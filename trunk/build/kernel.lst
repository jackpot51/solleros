     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> ;%define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> ;%define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> ;%define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> ;%define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> %define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 06010000            <1> dd 262	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[F171]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[F271]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[F071]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[F671]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[3674]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[F671]          <1> 	sub di, memlistbuf
   177 00000075 893E[3674]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[7103]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[7903]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[7303]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[7B03]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[7603]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[7E03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[4C760300]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[6903]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[6B03]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[6E03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[8103]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[8903]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[9103]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[9903]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[8303]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[8B03]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[9303]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[9B03]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[8603]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[8E03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[9603]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[9E03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[A103]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[A903]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[A303]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[AB03]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[A603]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[AE03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[57030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[4D03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[AF030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[5303]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[4B03]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[5103]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[4C760300]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[EC850300]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E86C4D0000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[86620500]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[4C760300]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[F6710000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[36740000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[F0710000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[14450000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[14450000]      <1> 	mov [physbaseptr], edi
   337 00000237 E9F0510000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E9681A0000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[003C0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9AF000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E879000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F8450460000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380                              <1> 	cmp byte [threadson], 1
   381                              <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002A8 803D[27540000]00    <1> 	cmp byte [threadson], 0
   385 000002AF 0F8486000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002B5 60                  <1> 	pusha
   390 000002B6 E464                <1> 	in al, 64h
   391 000002B8 A820                <1> 	test al, 20h
   392 000002BA 0F8579000000        <1> 	jnz near handled2
   393 000002C0 E460                <1> 	in al, 60h
   394 000002C2 3C01                <1> 	cmp al, 1		;escape
   395 000002C4 7405                <1> 	je userint
   396 000002C6 E96E000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002CB 31C0                <1> 	xor eax, eax
   421 000002CD 3905[4C860300]      <1> 	cmp [sigtable], eax
   422 000002D3 7411                <1> 	je .nosighook
   423 000002D5 8B1D[4C860300]      <1> 	mov ebx, [sigtable]
   424 000002DB 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002DF B020                <1> 	mov al, 0x20
   427 000002E1 E620                <1> 	out 0x20, al
   428 000002E3 61                  <1> 	popa
   429 000002E4 FB                  <1> 	sti
   430 000002E5 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002E6 E621                <1> 	out 0x21, al
   434 000002E8 E6A1                <1> 	out 0xA1, al
   435 000002EA B020                <1> 	mov al, 0x20
   436 000002EC E6A0                <1> 	out 0xA0, al
   437 000002EE E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002F0 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 000002F6 E640                <1> 	out 0x40, al
   441 000002F8 66C1C008            <1> 	rol ax, 8
   442 000002FC E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 000002FE B020                <1> 	mov al, 0x20
   445 00000300 E620                <1> 	out 0x20, al
   446 00000302 61                  <1> 	popa
   447 00000303 FB                  <1> 	sti
   448 00000304 BC[EC850300]        <1> 	mov esp, stackend ;reset stack
   449 00000309 E9EF1A0000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000030E 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000030F E92E000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487                              <1> 	cli
   488                              <1> 	pusha
   489                              <1> 	cmp byte [SoundBlaster], 1
   490                              <1> 	je near sblaster.cont
   491                              <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000314 50                  <1> 	push eax
   496 00000315 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 0000031A 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 00000320 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000325 720B                <1> 	jb nonanosecondrollover
   500 00000327 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000032D 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 00000332 A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000337 58                  <1> 	pop eax
   515 00000338 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000339 61                  <1> 	popa
   519                              <1> handled3:
   520 0000033A FB                  <1> 	sti
   521                              <1> handled:
   522 0000033B 50                  <1> 	push eax
   523 0000033C B020                <1> 	mov al, 0x20
   524 0000033E E620                <1> 	out 0x20, al
   525 00000340 58                  <1> 	pop eax
   526 00000341 CF                  <1> 	iret
   527                              <1> handled4:
   528 00000342 50                  <1> 	push eax
   529 00000343 B020                <1> 	mov al, 0x20
   530 00000345 E6A0                <1> 	out 0xA0, al
   531 00000347 E620                <1> 	out 0x20, al
   532 00000349 58                  <1> 	pop eax
   533 0000034A CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 0000034B 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000034D 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 00000351 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000353 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000357 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000359 0000                <1> 	dw 0			; base 15:0
   547 0000035B 00                  <1> 	db 0			; base 23:16
   548 0000035C 00                  <1> 	db 0			; type
   549 0000035D 00                  <1> 	db 0			; limit 19:16, flags
   550 0000035E 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 0000035F FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 00000361 0000                <1> 	dw 0			; base for this one is always 0
   555 00000363 00                  <1> 	db 0
   556 00000364 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 00000365 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 00000366 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 00000367 0200                <1> gdts:	dw 2;(stackend)/4096
   561 00000369 0000                <1> 	dw 0
   562 0000036B 00                  <1> 	db 0
   563 0000036C 92                  <1> 	db 0x92
   564 0000036D CF                  <1> 	db 0xCF
   565 0000036E 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 0000036F FFFF                <1> gdt2:	dw 0xFFFF
   569 00000371 0000                <1> 	dw 0			; (base gets set above)
   570 00000373 00                  <1> 	db 0
   571 00000374 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 00000375 CF                  <1> 	db 0xCF
   573 00000376 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 00000377 FFFF                <1> gdt3:	dw 0xFFFF
   577 00000379 0000                <1> 	dw 0			; (base gets set above)
   578 0000037B 00                  <1> 	db 0
   579 0000037C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 0000037D CF                  <1> 	db 0xCF
   581 0000037E 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 0000037F FFFF                <1> gdt4:	dw 0xFFFF
   584 00000381 0000                <1> 	dw 0			; (base gets set above)
   585 00000383 00                  <1> 	db 0
   586 00000384 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 00000385 CF                  <1> 	db 0xCF
   588 00000386 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 00000387 FFFF                <1> gdt5:	dw 0xFFFF
   592 00000389 0000                <1> 	dw 0			; (base gets set above)
   593 0000038B 00                  <1> 	db 0
   594 0000038C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 0000038D CF                  <1> 	db 0xCF
   596 0000038E 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 0000038F FFFF                <1> gdtv8086: dw 0xFFFF
   599 00000391 0000                <1> 	dw 0
   600 00000393 00                  <1> 	db 0
   601 00000394 9A                  <1> 	db 0x9A
   602 00000395 8F                  <1> 	db 0x8F
   603 00000396 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 00000397 FFFF                <1> gdtv80862: dw 0xFFFF
   606 00000399 0000                <1> 	dw 0
   607 0000039B 00                  <1> 	db 0
   608 0000039C 92                  <1> 	db 0x92
   609 0000039D 8F                  <1> 	db 0x8F
   610 0000039E 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 0000039F 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003A1 0000                <1> 	dw 0
   614 000003A3 00                  <1> 	db 0
   615 000003A4 9A                  <1> 	db 0x9A
   616 000003A5 8F                  <1> 	db 0x8F ;16 bit
   617 000003A6 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003A7 0001                <1> gdtdos2:	dw 256
   620 000003A9 0000                <1> 	dw 0
   621 000003AB 00                  <1> 	db 0
   622 000003AC 92                  <1> 	db 0x92
   623 000003AD 8F                  <1> 	db 0x8F ;16 bit
   624 000003AE 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003AF [D00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003B7 [DC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003BF [E80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003C7 [F40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003CF [000D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003D7 [0C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003DF [180D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003E7 [240D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003EF [300D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 000003F7 [3C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 000003FF [480D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000407 [540D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000040F [600D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000417 [6C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000041F [780D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000427 [840D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000042F [900D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000437 [9C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000043F [A80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000447 [B40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000044F [C00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000457 [CC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000045F [D80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000467 [E40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000046F [F00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000477 [FC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000047F [080E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000487 [140E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000048F [200E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 00000497 [2C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 0000049F [380E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004A7 [440E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004AF [6F1B]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004B7 [731B]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004BF [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004C7 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004CF [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004D7 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004DF [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 000004E7 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 000004EF [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 000004F7 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 000004FF [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000507 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000050F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000517 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000051F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000527 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 0000052F [6E0E]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000537 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000053F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000547 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000054F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000557 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000055F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000567 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000056F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000577 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000057F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000587 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000058F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 00000597 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 0000059F [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005A7 [3B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005AF [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005B7 [3B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005BF [3B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005C7 [3B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005CF [3B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786 000005D7 [3B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 000005DF [3B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 000005E7 [3B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 000005EF [0F03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 000005F7 [4203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 000005FF [4203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000607 [4203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 0000060F [4203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000617 [4203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 0000061F [4203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000627 [4203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 0000062F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000637 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000063F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000647 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000064F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000657 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000065F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000667 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000066F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000677 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000067F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000687 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000068F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000697 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000069F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006A7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006AF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006B7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006BF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006C7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006CF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006D7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006DF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006E7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006EF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006F7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006FF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000707 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000070F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000717 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000071F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000727 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000072F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000737 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000073F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000747 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000074F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000757 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000075F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000767 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000076F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000777 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000077F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000787 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000078F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000797 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000079F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007A7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007AF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007B7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007BF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007C7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007CF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007D7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007DF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007E7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007EF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007F7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007FF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000807 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000080F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000817 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000081F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000827 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000082F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000837 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000083F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000847 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000084F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000857 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000085F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000867 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000086F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000877 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000087F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000887 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000088F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000897 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000089F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008A7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008AF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008B7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008BF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008C7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008CF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008D7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008DF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008E7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008EF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008F7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008FF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000907 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000090F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000917 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000091F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000927 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000092F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000937 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000093F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000947 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000094F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000957 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000095F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000967 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000096F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000977 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000097F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000987 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000098F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000997 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000099F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009A7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009AF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009B7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009BF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009C7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009CF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009D7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009DF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009E7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009EF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009F7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009FF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A07 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A0F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A17 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A1F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A27 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A2F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A37 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A3F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A47 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A4F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A57 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A5F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A67 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A6F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A77 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A7F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A87 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A8F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A97 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A9F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AA7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000AAF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AB7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000ABF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AC7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ACF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AD7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000ADF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AE7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000AEF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AF7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000AFF [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B07 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B0F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B17 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B1F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B27 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B2F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B37 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B3F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B47 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B4F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B57 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B5F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B67 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B6F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B77 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B7F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B87 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B8F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B97 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B9F [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BA7 [3B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BAF FA                  <1> 	cli
  1343 00000BB0 A3[C20C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BB5 891D[BE0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BBB 8925[B00C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BC1 BB[BA0C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BC6 8B03                <1> 	mov eax, [ebx]
  1350 00000BC8 658903              <1> 	mov [gs:ebx], eax
  1351 00000BCB 81C304000000        <1> 	add ebx, 4
  1352 00000BD1 81FB[CA0C0000]      <1> 	cmp ebx, realmodeptr
  1353 00000BD7 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000BD9 EA[E00B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000BE0 B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000BE3 8ED8                <1> 	mov ds, ax
  1361 00000BE5 8EC0                <1> 	mov es, ax
  1362 00000BE7 8EE0                <1> 	mov fs, ax
  1363 00000BE9 8EE8                <1> 	mov gs, ax
  1364 00000BEB 8ED0                <1> 	mov ss, ax
  1365 00000BED 66BC[EC850300]      <1> 	mov esp, stackend
  1366 00000BF3 0F20C0              <1> 	mov eax, cr0
  1367 00000BF6 66A3[BA0C]          <1> 	mov [cr0old], eax
  1368 00000BFA 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C00 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C03 EA[080C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C08 8CC8                <1> 	mov ax, cs
  1374 00000C0A 8ED8                <1> 	mov ds, ax
  1375 00000C0C 8EC0                <1> 	mov es, ax
  1376 00000C0E 8EE0                <1> 	mov fs, ax
  1377 00000C10 8EE8                <1> 	mov gs, ax
  1378 00000C12 8ED0                <1> 	mov ss, ax
  1379 00000C14 BC[EC85]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C17 B011                <1> 	mov al, 0x11
  1382 00000C19 E620                <1> 	out 0x20, al
  1383 00000C1B E6A0                <1> 	out 0xA0, al
  1384 00000C1D B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C1F E621                <1> 	out 0x21, al
  1386 00000C21 B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C23 E6A1                <1> 	out 0xA1, al
  1388 00000C25 B004                <1> 	mov al, 4
  1389 00000C27 E621                <1> 	out 0x21, al
  1390 00000C29 B002                <1> 	mov al, 2
  1391 00000C2B E6A1                <1> 	out 0xA1, al
  1392 00000C2D B001                <1> 	mov al, 0x1
  1393 00000C2F E621                <1> 	out 0x21, al
  1394 00000C31 B001                <1> 	mov al, 0x1
  1395 00000C33 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C35 0F011E[B40C]        <1> 	lidt [idt_real]
  1398 00000C3A FB                  <1> 	sti
  1399                              <1> 
  1400 00000C3B 66A1[C20C]          <1> 	mov eax, [realmodeeax]
  1401 00000C3F 668B1E[BE0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C44 FF16[CA0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C48 66A3[C20C]          <1> 	mov [realmodeeax], eax
  1406 00000C4C 66891E[BE0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C51 FA                  <1> 	cli
  1409 00000C52 0F0116[4B03]        <1> 	lgdt [gdtr]
  1410 00000C57 0F011E[5103]        <1> 	lidt [idtr]
  1411 00000C5C 0F20C0              <1> 	mov eax, cr0
  1412 00000C5F 0C01                <1> 	or al, 1
  1413 00000C61 0F22C0              <1> 	mov cr0,eax
  1414 00000C64 EA[690C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000C69 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000C6D 8ED8                <1> 	mov ds, ax
  1420 00000C6F 8EC0                <1> 	mov es, ax
  1421 00000C71 8EE0                <1> 	mov fs, ax
  1422 00000C73 8ED0                <1> 	mov ss, ax
  1423 00000C75 8B25[B00C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000C7B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000C7F 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000C81 BB[BA0C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000C86 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000C89 8903                <1> 	mov [ebx], eax
  1431 00000C8B 81C304000000        <1> 	add ebx, 4
  1432 00000C91 81FB[CA0C0000]      <1> 	cmp ebx, realmodeptr
  1433 00000C97 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000C99 E89C420000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000C9E FB                  <1> 	sti
  1437 00000C9F A1[C20C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CA4 8B1D[BE0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CAA FF25[C60C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CB0 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CB4 FF03                <1> 	dw 0x3FF
  1444 00000CB6 00000000            <1> 	dd 0
  1445 00000CBA 00000000            <1> cr0old dd 0
  1446 00000CBE 00000000            <1> realmodeebx dd 0
  1447 00000CC2 00000000            <1> realmodeeax dd 0
  1448 00000CC6 00000000            <1> realmodereturn dd 0
  1449 00000CCA 0000                <1> realmodeptr dw 0
  1450 00000CCC 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461                              <1> unhand2:
  1462                              <1> 	cli
  1463                              <1> 	push ds
  1464                              <1> 	push es
  1465                              <1> 	push fs
  1466                              <1> 	push gs
  1467                              <1> 	push ss
  1468                              <1> 	pushad
  1469                              <1> %ifdef gui.included
  1470                              <1> 	cmp byte [guion], 0
  1471                              <1> 	je near noguiunhandstuff
  1472                              <1> 	mov word [locunhandy], 8
  1473                              <1> 	mov word [locunhandx], 8
  1474                              <1> 	mov bx, [background]
  1475                              <1> 	mov [backgroundcache], bx
  1476                              <1> 	mov byte [mousedisabled],1
  1477                              <1> 	mov bx, 1111100000000000b
  1478                              <1> 	mov [background], bx
  1479                              <1> noguiunhandstuff:
  1480                              <1> %endif
  1481                              <1> 	mov esi, esp
  1482                              <1> 	mov [espfirst], esi
  1483                              <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1484                              <1> 	mov [esploc], esi
  1485                              <1> 	mov esi, unhandmsg
  1486                              <1> 	mov [esiloc], esi
  1487                              <1> 	xor ecx, ecx
  1488                              <1> 	mov cl, [intprob]
  1489                              <1> 	mov ebx, errortypes
  1490                              <1> 	shl ecx, 2
  1491                              <1> 	add ebx, ecx
  1492                              <1> 	cmp ebx, errortypesend
  1493                              <1> 	jb gooderrortype
  1494                              <1> 	mov ebx, errortypesend
  1495                              <1> gooderrortype:
  1496                              <1> 	mov esi, [ebx]
  1497                              <1> %ifdef gui.included
  1498                              <1> 	cmp byte [guion], 0
  1499                              <1> 	je near errortext
  1500                              <1> 	mov cx, [locunhandy]
  1501                              <1> 	mov dx, [locunhandx]
  1502                              <1> 	mov ax, 1
  1503                              <1> 	xor bx, bx
  1504                              <1> 	call showstring2
  1505                              <1> 	mov [locunhandy], cx
  1506                              <1> 	mov [locunhandx], dx
  1507                              <1> 	jmp errortextdone
  1508                              <1> %endif
  1509                              <1> errortext:
  1510                              <1> 	call print		;;get the error message and print it
  1511                              <1> errortextdone:
  1512                              <1> 	xor ecx, ecx
  1513                              <1> 	mov cl, [intprob]
  1514                              <1> 	call expdump
  1515                              <1> dumpstack:
  1516                              <1> 	mov esi, [esploc]
  1517                              <1> 	cmp esi, esp
  1518                              <1> 	jb donedump
  1519                              <1> 	mov ecx, [ss:esi]
  1520                              <1> 	sub esi, 4
  1521                              <1> 	mov [esploc], esi
  1522                              <1> 	call expdump
  1523                              <1> 	jmp dumpstack
  1524                              <1> donedump:
  1525                              <1> 	mov ecx, cr0
  1526                              <1> 	call expdump
  1527                              <1> 	mov ecx, cr2
  1528                              <1> 	call expdump
  1529                              <1> 	mov ecx, cr3
  1530                              <1> 	call expdump
  1531                              <1> 	mov ecx, cr4
  1532                              <1> 	call expdump
  1533                              <1> 	str ecx
  1534                              <1> 	call expdump
  1535                              <1> 	sidt [igdtcache]
  1536                              <1> 	mov ecx, [igdtcache + 2]
  1537                              <1> 	call expdump
  1538                              <1> 	sgdt [igdtcache]
  1539                              <1> 	mov ecx, [igdtcache + 2]
  1540                              <1> 	call expdump
  1541                              <1> 	sldt ecx
  1542                              <1> 	call expdump
  1543                              <1> 	mov esi, [esploc]
  1544                              <1> 	mov edi, [ss:esp + 52]
  1545                              <1> 	add edi, 16
  1546                              <1> 	mov [codelocend], edi
  1547                              <1> 	sub edi, 32
  1548                              <1> dumpcodeloop:
  1549                              <1> 	mov [codeloc], edi
  1550                              <1> 	mov ecx, [edi]
  1551                              <1> 	call expdump
  1552                              <1> 	mov edi, [codeloc]
  1553                              <1> 	add edi, 4
  1554                              <1> 	cmp edi, [codelocend]
  1555                              <1> 	jb dumpcodeloop
  1556                              <1> 	mov esi, backtoosmsg
  1557                              <1> %ifdef gui.included
  1558                              <1> 	cmp byte [guion], 0
  1559                              <1> 	je backtomsg
  1560                              <1> guibacktomsg:
  1561                              <1> 	mov dx, [locunhandx]
  1562                              <1> 	mov cx, [locunhandy]
  1563                              <1> 	mov ax, 1
  1564                              <1> 	xor bx, bx
  1565                              <1> 	call showstring2
  1566                              <1> 	jmp backtomsgdone
  1567                              <1> backtomsg:
  1568                              <1> %endif
  1569                              <1> 	call print
  1570                              <1> backtomsgdone:
  1571                              <1> 	xor al, al
  1572                              <1> 	call rdcharint
  1573                              <1> 	cmp byte [intprob], 3
  1574                              <1> 	jne nodebugint
  1575                              <1> %ifdef gui.included
  1576                              <1> 	cmp byte [guion], 0
  1577                              <1> 	je nodebuggui
  1578                              <1> 	mov bx, [backgroundcache]
  1579                              <1> 	mov [background], bx
  1580                              <1> 	xor bx, bx
  1581                              <1> 	mov byte [mousedisabled], 0
  1582                              <1> 	call guiclear
  1583                              <1> 	call reloadallgraphics
  1584                              <1> 	call termcopy
  1585                              <1> nodebuggui:
  1586                              <1> %endif
  1587                              <1> 	mov esi, [espfirst]
  1588                              <1> 	mov esp, esi
  1589                              <1> 	popad
  1590                              <1> 	pop ss
  1591                              <1> 	pop gs
  1592                              <1> 	pop fs
  1593                              <1> 	pop es
  1594                              <1> 	pop ds
  1595                              <1> 	iret
  1596                              <1> nodebugint:
  1597                              <1> 	popad
  1598                              <1> 	pop ss
  1599                              <1> 	pop gs
  1600                              <1> 	pop fs
  1601                              <1> 	pop es
  1602                              <1> 	pop ds
  1603                              <1> %ifdef gui.included
  1604                              <1> 	cmp byte [guion], 0
  1605                              <1> 	je returnunhandgui
  1606                              <1> 	mov bx, [backgroundcache]
  1607                              <1> 	mov [background], bx
  1608                              <1> 	xor bx, bx
  1609                              <1> 	mov byte [mousedisabled], 0
  1610                              <1> 	call guiclear
  1611                              <1> 	call reloadallgraphics
  1612                              <1> 	call termcopy
  1613                              <1> %endif
  1614                              <1> returnunhandgui:
  1615                              <1> 	jmp nwcmd
  1616                              <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1617                              <1> 			db "Press any key to return to SollerOS",10,0
  1618                              <1> expdump:
  1619                              <1> 	mov esi, [esiloc]
  1620                              <1> 	mov edi, esi
  1621                              <1> 	add edi, 15
  1622                              <1> 	add esi, 4
  1623                              <1> 	mov [esiloc], edi
  1624                              <1> 	sub edi, 3
  1625                              <1> 	call converthex
  1626                              <1> 	sub esi, 4
  1627                              <1> %ifdef gui.included
  1628                              <1> 	cmp byte [guion], 0
  1629                              <1> 	je near expdumptext
  1630                              <1> 	mov cx, [locunhandy]
  1631                              <1> 	mov dx, [locunhandx]
  1632                              <1> 	mov ax, 1
  1633                              <1> 	xor bx, bx
  1634                              <1> 	call showstring2
  1635                              <1> 	mov [locunhandy], cx
  1636                              <1> 	mov [locunhandx], dx
  1637                              <1> 	ret
  1638                              <1> %endif
  1639                              <1> expdumptext:
  1640                              <1> 	call print
  1641                              <1> 	ret
  1642                              <1> esploc dd 0
  1643                              <1> espfirst dd 0
  1644                              <1> esiloc dd 0
  1645                              <1> esiregbuf dd 0
  1646                              <1> locunhandy dw 1
  1647                              <1> locunhandx dw 1
  1648                              <1> backgroundcache dw 0
  1649                              <1> intprob db 0
  1650                              <1> codeloc dd 0
  1651                              <1> codelocend dd 0
  1652                              <1> igdtcache dw 0,0,0
  1653                              <1> 	unhandmsg:	
  1654                              <1> 			db "INT=00000000",255,10,0
  1655                              <1> unhndrg:
  1656                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1657                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1658                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1659                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1660                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1661                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1662                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1663                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1664                              <1> unhandregs:
  1665                              <1> 			db "EFL=00000000  ",0
  1666                              <1> 			db "CS:=00000000  ",0
  1667                              <1> 			db "EIP=00000000",255,10,0
  1668                              <1> 			db "DS:=00000000  ",0
  1669                              <1> 			db "ES:=00000000  ",0
  1670                              <1> 			db "FS:=00000000  ",0
  1671                              <1> 			db "GS:=00000000  ",0
  1672                              <1> 			db "SS:=00000000",255,10,0
  1673                              <1> 			db "EAX=00000000  ",0
  1674                              <1> 			db "ECX=00000000  ",0
  1675                              <1> 			db "EDX=00000000  ",0
  1676                              <1> 			db "EBX=00000000",255,10,0
  1677                              <1> 			db "ESP=00000000  ",0
  1678                              <1> 			db "EBP=00000000  ",0
  1679                              <1> 			db "ESI=00000000  ",0
  1680                              <1> unhndrgend:	db "EDI=00000000",255,10,0
  1681                              <1> 			db "CR0=00000000  ",0
  1682                              <1> 			db "CR2=00000000  ",0
  1683                              <1> 			db "CR3=00000000  ",0
  1684                              <1> 			db "CR4=00000000",255,10,0
  1685                              <1> 			db "TR:=00000000  ",0
  1686                              <1> 			db "IDT=00000000  ",0
  1687                              <1> 			db "GDT=00000000  ",0
  1688                              <1> 			db "LDT=00000000",255,10,0
  1689                              <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1690                              <1> 			db 255,255,255,255,"00000000 ",255,0
  1691                              <1> 			db 255,255,255,"[00000000] ",0
  1692                              <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1693                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1694                              <1> unhandmsgend:
  1695                              <1> 
  1696                              <1> errortypes:
  1697                              <1> 			dd err0
  1698                              <1> 			dd err1
  1699                              <1> 			dd err2
  1700                              <1> 			dd err3
  1701                              <1> 			dd err4
  1702                              <1> 			dd err5
  1703                              <1> 			dd err6
  1704                              <1> 			dd err7
  1705                              <1> 			dd err8
  1706                              <1> 			dd err9
  1707                              <1> 			dd err10
  1708                              <1> 			dd err11
  1709                              <1> 			dd err12
  1710                              <1> 			dd err13
  1711                              <1> 			dd err14
  1712                              <1> 			dd err15
  1713                              <1> errortypesend:
  1714                              <1> 			dd unknownerror
  1715                              <1> 			
  1716                              <1> err0	db "Division by zero:",10
  1717                              <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1718                              <1> 		db "            x→0",10,0
  1719                              <1> 		
  1720                              <1> err1	db "Single-step/Breakpoint:",10
  1721                              <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1722                              <1> 		
  1723                              <1> err2	db "Nonmaskable interrupt:",10
  1724                              <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1725                              <1> 		
  1726                              <1> err3	db "Breakpoint:",10
  1727                              <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1728                              <1> 		db "ignored.",10,0
  1729                              <1> 		
  1730                              <1> err4	db "Overflow:",10
  1731                              <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1732                              <1> 		
  1733                              <1> err5	db "Bounds check:",10
  1734                              <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1735                              <1> 		db "of bounds.",10,0
  1736                              <1> 		
  1737                              <1> err6	db "Invalid opcode:",10
  1738                              <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1739                              <1> 		db "on 486's!",10,0
  1740                              <1> 		
  1741                              <1> err7	db "Coprocessor not available:",10
  1742                              <1> 		db "Don't you know they don't make those anymore!",10,0
  1743                              <1> 		
  1744                              <1> err8	db "Double fault:",10
  1745                              <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1746                              <1> 		
  1747                              <1> err9	db "Coprocessor segment overrun:",10,0
  1748                              <1> 		db "This never happens in modern computers, and never should.",10,0
  1749                              <1> 
  1750                              <1> err10	db "Invalid TSS:",10
  1751                              <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1752                              <1> 		
  1753                              <1> err11	db "Segment not present:",10
  1754                              <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1755                              <1> 		
  1756                              <1> err12	db "Stack exception:",10
  1757                              <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1758                              <1> 		
  1759                              <1> err13	db "General protection violation:",10
  1760                              <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1761                              <1> 		
  1762                              <1> err14	db "Page fault:",10
  1763                              <1> 		db "The page that was requested was not available.",10,0
  1764                              <1> 		
  1765                              <1> err15	db "Reserved for Plan R:",10
  1766                              <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1767                              <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1768                              <1> 		
  1769                              <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1770                              <1> 			db	"Memory? Are you there?",10,0
  1771                              <1> %else
  1772                              <1> unhand:	
  1773                              <1> 	%assign i 0
  1774                              <1> 	%rep 32
  1775                              <1> 	mov byte [intprob], i
  1776                              <1> 	jmp unhand2
  1777                              <1> 	%assign i i+1
  1778                              <1> 	%endrep
  1779 00000CD0 C605[6D0E0000]00    <2>  mov byte [intprob], i
  1780 00000CD7 E974010000          <2>  jmp unhand2
  1781                              <2>  %assign i i+1
  1782 00000CDC C605[6D0E0000]01    <2>  mov byte [intprob], i
  1783 00000CE3 E968010000          <2>  jmp unhand2
  1784                              <2>  %assign i i+1
  1785 00000CE8 C605[6D0E0000]02    <2>  mov byte [intprob], i
  1786 00000CEF E95C010000          <2>  jmp unhand2
  1787                              <2>  %assign i i+1
  1788 00000CF4 C605[6D0E0000]03    <2>  mov byte [intprob], i
  1789 00000CFB E950010000          <2>  jmp unhand2
  1790                              <2>  %assign i i+1
  1791 00000D00 C605[6D0E0000]04    <2>  mov byte [intprob], i
  1792 00000D07 E944010000          <2>  jmp unhand2
  1793                              <2>  %assign i i+1
  1794 00000D0C C605[6D0E0000]05    <2>  mov byte [intprob], i
  1795 00000D13 E938010000          <2>  jmp unhand2
  1796                              <2>  %assign i i+1
  1797 00000D18 C605[6D0E0000]06    <2>  mov byte [intprob], i
  1798 00000D1F E92C010000          <2>  jmp unhand2
  1799                              <2>  %assign i i+1
  1800 00000D24 C605[6D0E0000]07    <2>  mov byte [intprob], i
  1801 00000D2B E920010000          <2>  jmp unhand2
  1802                              <2>  %assign i i+1
  1803 00000D30 C605[6D0E0000]08    <2>  mov byte [intprob], i
  1804 00000D37 E914010000          <2>  jmp unhand2
  1805                              <2>  %assign i i+1
  1806 00000D3C C605[6D0E0000]09    <2>  mov byte [intprob], i
  1807 00000D43 E908010000          <2>  jmp unhand2
  1808                              <2>  %assign i i+1
  1809 00000D48 C605[6D0E0000]0A    <2>  mov byte [intprob], i
  1810 00000D4F E9FC000000          <2>  jmp unhand2
  1811                              <2>  %assign i i+1
  1812 00000D54 C605[6D0E0000]0B    <2>  mov byte [intprob], i
  1813 00000D5B E9F0000000          <2>  jmp unhand2
  1814                              <2>  %assign i i+1
  1815 00000D60 C605[6D0E0000]0C    <2>  mov byte [intprob], i
  1816 00000D67 E9E4000000          <2>  jmp unhand2
  1817                              <2>  %assign i i+1
  1818 00000D6C C605[6D0E0000]0D    <2>  mov byte [intprob], i
  1819 00000D73 E9D8000000          <2>  jmp unhand2
  1820                              <2>  %assign i i+1
  1821 00000D78 C605[6D0E0000]0E    <2>  mov byte [intprob], i
  1822 00000D7F E9CC000000          <2>  jmp unhand2
  1823                              <2>  %assign i i+1
  1824 00000D84 C605[6D0E0000]0F    <2>  mov byte [intprob], i
  1825 00000D8B E9C0000000          <2>  jmp unhand2
  1826                              <2>  %assign i i+1
  1827 00000D90 C605[6D0E0000]10    <2>  mov byte [intprob], i
  1828 00000D97 E9B4000000          <2>  jmp unhand2
  1829                              <2>  %assign i i+1
  1830 00000D9C C605[6D0E0000]11    <2>  mov byte [intprob], i
  1831 00000DA3 E9A8000000          <2>  jmp unhand2
  1832                              <2>  %assign i i+1
  1833 00000DA8 C605[6D0E0000]12    <2>  mov byte [intprob], i
  1834 00000DAF E99C000000          <2>  jmp unhand2
  1835                              <2>  %assign i i+1
  1836 00000DB4 C605[6D0E0000]13    <2>  mov byte [intprob], i
  1837 00000DBB E990000000          <2>  jmp unhand2
  1838                              <2>  %assign i i+1
  1839 00000DC0 C605[6D0E0000]14    <2>  mov byte [intprob], i
  1840 00000DC7 E984000000          <2>  jmp unhand2
  1841                              <2>  %assign i i+1
  1842 00000DCC C605[6D0E0000]15    <2>  mov byte [intprob], i
  1843 00000DD3 E978000000          <2>  jmp unhand2
  1844                              <2>  %assign i i+1
  1845 00000DD8 C605[6D0E0000]16    <2>  mov byte [intprob], i
  1846 00000DDF E96C000000          <2>  jmp unhand2
  1847                              <2>  %assign i i+1
  1848 00000DE4 C605[6D0E0000]17    <2>  mov byte [intprob], i
  1849 00000DEB E960000000          <2>  jmp unhand2
  1850                              <2>  %assign i i+1
  1851 00000DF0 C605[6D0E0000]18    <2>  mov byte [intprob], i
  1852 00000DF7 E954000000          <2>  jmp unhand2
  1853                              <2>  %assign i i+1
  1854 00000DFC C605[6D0E0000]19    <2>  mov byte [intprob], i
  1855 00000E03 E948000000          <2>  jmp unhand2
  1856                              <2>  %assign i i+1
  1857 00000E08 C605[6D0E0000]1A    <2>  mov byte [intprob], i
  1858 00000E0F E93C000000          <2>  jmp unhand2
  1859                              <2>  %assign i i+1
  1860 00000E14 C605[6D0E0000]1B    <2>  mov byte [intprob], i
  1861 00000E1B E930000000          <2>  jmp unhand2
  1862                              <2>  %assign i i+1
  1863 00000E20 C605[6D0E0000]1C    <2>  mov byte [intprob], i
  1864 00000E27 E924000000          <2>  jmp unhand2
  1865                              <2>  %assign i i+1
  1866 00000E2C C605[6D0E0000]1D    <2>  mov byte [intprob], i
  1867 00000E33 E918000000          <2>  jmp unhand2
  1868                              <2>  %assign i i+1
  1869 00000E38 C605[6D0E0000]1E    <2>  mov byte [intprob], i
  1870 00000E3F E90C000000          <2>  jmp unhand2
  1871                              <2>  %assign i i+1
  1872 00000E44 C605[6D0E0000]1F    <2>  mov byte [intprob], i
  1873 00000E4B E900000000          <2>  jmp unhand2
  1874                              <2>  %assign i i+1
  1875                              <1> unhand2:
  1876 00000E50 803D[6D0E0000]03    <1> 	cmp byte [intprob], 3
  1877 00000E57 0F84DEF4FFFF        <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1878 00000E5D BB00CDADDE          <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1879                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1880 00000E62 8A1D[6D0E0000]      <1> 	mov bl, [intprob]
  1881 00000E68 E992000000          <1> 	jmp exitprog
  1882 00000E6D 00                  <1> intprob db 0
  1883                              <1> %endif
  1884                                      %include "source/ints.asm"
  1885                              <1> newints:	;for great justice
  1886 00000E6E 80FC00              <1> 	cmp ah, 0
  1887 00000E71 0F8488000000        <1> 	je near exitprog   ;kills app
  1888 00000E77 80FC01              <1> 	cmp ah, 1
  1889 00000E7A 0F8407010000        <1> 	je near prntstr  ;print string
  1890 00000E80 80FC02              <1> 	cmp ah, 2
  1891 00000E83 0F84A5010000        <1> 	je near readstr	;read string
  1892 00000E89 80FC03              <1> 	cmp ah, 3
  1893 00000E8C 0F84C5010000        <1> 	je near clearscrn	;clear screen
  1894 00000E92 80FC04              <1> 	cmp ah, 4
  1895 00000E95 0F843A020000        <1> 	je near prntreadstr	;read and print string
  1896 00000E9B 80FC05              <1> 	cmp ah, 5
  1897 00000E9E 0F84FF060000        <1> 	je near readchar	;get char
  1898 00000EA4 80FC06              <1> 	cmp ah, 6
  1899 00000EA7 0F8466070000        <1> 	je near prntchar	;print char
  1900 00000EAD 80FC07              <1> 	cmp ah, 7
  1901 00000EB0 0F8483090000        <1> 	je near openfile	;read file
  1902                              <1> ;	cmp ah, 8
  1903                              <1> ;	je near closefile	;close file
  1904 00000EB6 80FC09              <1> 	cmp ah, 9
  1905 00000EB9 0F8484090000        <1> 	je near num2str	;convert number to string
  1906 00000EBF 80FC0A              <1> 	cmp ah, 10
  1907 00000EC2 0F8493090000        <1> 	je near str2num	;convert string to number
  1908                              <1> %ifdef threads.included
  1909                              <1> 	cmp ah, 11
  1910                              <1> 	je near forkthread	;create thread
  1911                              <1> %endif
  1912 00000EC8 80FC0C              <1> 	cmp ah, 12
  1913 00000ECB 0F8496090000        <1> 	je near gettime	;get time
  1914 00000ED1 80FC0D              <1> 	cmp ah, 13
  1915 00000ED4 0F84A2090000        <1> 	je near settime	;set time
  1916 00000EDA 80FC0E              <1> 	cmp ah, 14
  1917 00000EDD 0F84A9090000        <1> 	je near runcmd	;run program
  1918 00000EE3 80FC0F              <1> 	cmp ah, 15
  1919 00000EE6 0F84B5090000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  1920 00000EEC 80FC10              <1> 	cmp ah, 16
  1921 00000EEF 0F84D7090000        <1> 	je near hooksig	;hook code to a signal
  1922                              <1> %ifdef gui.included
  1923 00000EF5 80FC11              <1> 	cmp ah, 17
  1924 00000EF8 0F84DE090000        <1> 	je near guiint	;GUI operations
  1925                              <1> %endif
  1926                              <1> %ifdef sound.included
  1927                              <1> 	cmp ah, 18
  1928                              <1> 	je near soundint	;sound operations
  1929                              <1> %endif
  1930                              <1> %ifdef network.included
  1931                              <1> 	cmp ah, 19
  1932                              <1> 	je near netint	;networking operations
  1933                              <1> %endif
  1934 00000EFE CF                  <1> 	iret
  1935                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  1936                              <2> exitprog:
  1937 00000EFF 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1938 00000F03 8ED8                <2> 	mov ds, ax
  1939 00000F05 8EC0                <2> 	mov es, ax
  1940 00000F07 8EE0                <2> 	mov fs, ax
  1941 00000F09 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1942 00000F0D 8EE8                <2> 	mov gs, ax
  1943 00000F0F C705[28540000]0000- <2> 	mov dword [currentthread], 0
  1944 00000F17 0000                <2>
  1945 00000F19 C705[23540000]0400- <2> 	mov dword [lastthread], 4
  1946 00000F21 0000                <2>
  1947 00000F23 C605[27540000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1948 00000F2A 8B25[508A0300]      <2> 	mov esp, [previousstack] ;and this
  1949 00000F30 81FB00000000        <2> 	cmp ebx, 0
  1950 00000F36 0F8501000000        <2> 	jne near .error
  1951 00000F3C C3                  <2> 	ret
  1952                              <2> .error:
  1953 00000F3D 89D9                <2> 	mov ecx, ebx
  1954 00000F3F B006                <2> 	mov al, 6
  1955 00000F41 A2[2E230000]        <2> 	mov [firsthexshown], al
  1956 00000F46 51                  <2> 	push ecx
  1957 00000F47 BE[620F0000]        <2> 	mov esi, .msg1
  1958 00000F4C E855000000          <2> 	call printhighlight
  1959 00000F51 59                  <2> 	pop ecx
  1960 00000F52 E8EC130000          <2> 	call showhex
  1961 00000F57 BE[770F0000]        <2> 	mov esi, .msg2
  1962 00000F5C E845000000          <2> 	call printhighlight
  1963 00000F61 C3                  <2> 	ret
  1964                              <2> 	
  1965 00000F62 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  1966 00000F6B 7461747573206F6620- <2>
  1967 00000F74 307800              <2>
  1968 00000F77 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  1969 00000F80 726E65642E0A00      <2>
  1970                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  1971                              <2> prntstr:
  1972 00000F87 30E4                <2> xor ah, ah
  1973 00000F89 E82B000000          <2> call printint
  1974 00000F8E E915F3FFFF          <2> jmp timerinterrupt
  1975                              <2> 
  1976                              <2> 	printquiet:
  1977 00000F93 6631C0              <2> 		xor ax, ax
  1978 00000F96 66A3[2C100000]      <2> 		mov [endkeyprint], ax
  1979 00000F9C 66BB0700            <2> 		mov bx, 7
  1980 00000FA0 E82D000000          <2> 		call printint.b
  1981 00000FA5 C3                  <2> 		ret
  1982                              <2> 
  1983                              <2> 	printhighlight:
  1984 00000FA6 6631C0              <2> 		xor ax, ax
  1985 00000FA9 66BBF000            <2> 		mov bx, 0xF0
  1986 00000FAD E907000000          <2> 		jmp printint
  1987                              <2> 
  1988                              <2>     print:
  1989 00000FB2 6631C0              <2> 		xor ax, ax
  1990 00000FB5 66BB0700            <2> 		mov bx, 7
  1991                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  1992 00000FB9 56                  <2> 		push esi
  1993 00000FBA 66A3[2C100000]      <2> 		mov [endkeyprint], ax
  1994 00000FC0 E80D000000          <2> 		call .b
  1995 00000FC5 89F1                <2> 		mov ecx, esi
  1996 00000FC7 5F                  <2> 		pop edi
  1997 00000FC8 29F9                <2> 		sub ecx, edi
  1998 00000FCA 51                  <2> 		push ecx
  1999 00000FCB E85A0A0000          <2> 		call termcopy
  2000 00000FD0 59                  <2> 		pop ecx
  2001 00000FD1 C3                  <2> 		ret
  2002                              <2> 	.b:	
  2003 00000FD2 53                  <2> 		push ebx
  2004 00000FD3 31C0                <2> 		xor eax, eax
  2005 00000FD5 8A06                <2> 		mov al, [esi]
  2006 00000FD7 3CFF                <2> 		cmp al, 0xFF
  2007 00000FD9 7438                <2> 		je .doneutf
  2008 00000FDB 3CC0                <2> 		cmp al, 0xC0
  2009 00000FDD 7234                <2> 		jb .doneutf
  2010 00000FDF 3CE0                <2> 		cmp al, 0xE0
  2011 00000FE1 721D                <2> 		jb .two
  2012 00000FE3 46                  <2> 		inc esi
  2013 00000FE4 668B0E              <2> 		mov cx, [esi]
  2014 00000FE7 46                  <2> 		inc esi
  2015 00000FE8 C0E004              <2> 		shl al, 4
  2016 00000FEB 66C1E102            <2> 		shl cx, 2
  2017 00000FEF C0ED02              <2> 		shr ch, 2
  2018 00000FF2 66C1E902            <2> 		shr cx, 2
  2019 00000FF6 08C5                <2> 		or ch, al
  2020 00000FF8 6689C8              <2> 		mov ax, cx
  2021 00000FFB E913000000          <2> 		jmp .doneutf
  2022                              <2> 	.two:
  2023 00001000 8A2E                <2> 		mov ch, [esi]
  2024 00001002 46                  <2> 		inc esi
  2025 00001003 8A0E                <2> 		mov cl, [esi]
  2026 00001005 66C1E102            <2> 		shl cx, 2
  2027 00001009 C0ED02              <2> 		shr ch, 2
  2028 0000100C 66C1E902            <2> 		shr cx, 2
  2029 00001010 6689C8              <2> 		mov ax, cx
  2030                              <2> 	.doneutf:
  2031 00001013 5B                  <2> 		pop ebx
  2032 00001014 663B05[2C100000]    <2> 		cmp ax, [endkeyprint]
  2033 0000101B 740E                <2> 		je .done
  2034 0000101D 663DFFFE            <2> 		cmp ax, 0xFEFF
  2035 00001021 7405                <2> 		je .noprint
  2036 00001023 E818060000          <2> 		call prcharq
  2037                              <2> 	.noprint:
  2038 00001028 46                  <2> 		inc esi
  2039 00001029 EBA7                <2> 		jmp .b
  2040                              <2> 	.done:
  2041 0000102B C3                  <2> 		ret
  2042                              <2> 
  2043 0000102C 0000                <2> endkeyprint dw 0
  2044                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2045                              <2> readstr:
  2046 0000102E E805000000          <2> call readint
  2047 00001033 E970F2FFFF          <2> jmp timerinterrupt
  2048                              <2> 
  2049                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2050 00001038 89C3                <2> 		mov ebx, eax
  2051                              <2> 	.b:
  2052 0000103A 53                  <2> 		push ebx
  2053 0000103B 57                  <2> 		push edi
  2054 0000103C 56                  <2> 		push esi
  2055 0000103D 30C0                <2> 		xor al, al
  2056 0000103F E86B050000          <2> 		call rdcharint
  2057 00001044 5E                  <2> 		pop esi
  2058 00001045 8806                <2> 		mov [esi], al
  2059 00001047 46                  <2> 		inc esi
  2060 00001048 5F                  <2> 		pop edi
  2061 00001049 5B                  <2> 		pop ebx
  2062 0000104A 39FE                <2> 		cmp esi, edi
  2063 0000104C 7304                <2> 		jae .done
  2064 0000104E 38D8                <2> 		cmp al, bl
  2065 00001050 75E8                <2> 		jne .b
  2066                              <2> 	.done:
  2067 00001052 4E                  <2> 		dec esi
  2068 00001053 C60600              <2> 		mov byte [esi], 0
  2069 00001056 C3                  <2> 		ret
  2070                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2071                              <2> clearscrn:
  2072 00001057 E805000000          <2> call clear
  2073 0000105C E947F2FFFF          <2> jmp timerinterrupt
  2074                              <2> %ifdef io.serial
  2075                              <2> clear:
  2076                              <2> 	ret
  2077                              <2> %else
  2078                              <2> clear:
  2079 00001061 668B0D[33180000]    <2> 		mov cx, [charxy]
  2080 00001068 BF[E6A70300]        <2> 		mov edi, videobuf
  2081 0000106D 31C0                <2> 		xor eax, eax
  2082 0000106F A3[29180000]        <2> 		mov [linebeginpos], eax
  2083 00001074 A3[2D180000]        <2> 		mov [videobufpos], eax
  2084 00001079 6631D2              <2> 		xor dx, dx
  2085 0000107C 66A3[31180000]      <2> 		mov [charpos], ax
  2086 00001082 66B80700            <2> 		mov ax, 7
  2087 00001086 C1E010              <2> 		shl eax, 16
  2088                              <2> 	clearb:
  2089 00001089 8907                <2> 		mov [edi], eax
  2090 0000108B 81C704000000        <2> 		add edi, 4
  2091 00001091 FEC9                <2> 		dec cl
  2092 00001093 80F900              <2> 		cmp cl, 0
  2093 00001096 75F1                <2> 		jne clearb
  2094 00001098 8A0D[33180000]      <2> 		mov cl, [charxy]
  2095 0000109E FECD                <2> 		dec ch
  2096 000010A0 80FD00              <2> 		cmp ch, 0
  2097 000010A3 75E4                <2> 		jne clearb
  2098                              <2> 	cleardouble:
  2099 000010A5 BF[2E7D0400]        <2> 		mov edi, videobuf2
  2100 000010AA 668B0D[33180000]    <2> 		mov cx, [charxy]
  2101 000010B1 31C0                <2> 		xor eax, eax
  2102                              <2> 	clearc:
  2103 000010B3 8907                <2> 		mov [edi], eax
  2104 000010B5 81C704000000        <2> 		add edi, 4
  2105 000010BB FEC9                <2> 		dec cl
  2106 000010BD 80F900              <2> 		cmp cl, 0
  2107 000010C0 75F1                <2> 		jne clearc
  2108 000010C2 8A0D[33180000]      <2> 		mov cl, [charxy]
  2109 000010C8 FECD                <2> 		dec ch
  2110 000010CA 80FD00              <2> 		cmp ch, 0
  2111 000010CD 75E4                <2> 		jne clearc
  2112 000010CF E856090000          <2> 		call termcopy
  2113 000010D4 C3                  <2> 		ret
  2114                              <2> %endif
  2115                              <2> 		
  2116                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2117                              <2> prntreadstr:
  2118 000010D5 E80B000000          <2> call rdprint
  2119 000010DA E9C9F1FFFF          <2> jmp timerinterrupt
  2120                              <2> 
  2121                              <2> readline:
  2122 000010DF B00A                <2>   mov al, 10
  2123 000010E1 66BB0700            <2>   mov bx, 7
  2124                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2125 000010E5 E80F000000          <2> 	call rdprintdos
  2126 000010EA 50                  <2> 	push eax
  2127 000010EB A0[8E150000]        <2> 	mov al, [endkeyrdpr]
  2128 000010F0 30E4                <2> 	xor ah, ah
  2129 000010F2 E832050000          <2> 	call prcharint
  2130 000010F7 58                  <2> 	pop eax
  2131 000010F8 C3                  <2> 	ret
  2132                              <2> 
  2133                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2134 000010F9 8935[98150000]      <2> 		mov [buftxtloc], esi
  2135 000010FF A2[8E150000]        <2> 		mov [endkeyrdpr], al
  2136 00001104 66891D[90150000]    <2> 		mov [modkeyrdpr], bx
  2137 0000110B 8935[92150000]      <2> 		mov [firstesirdpr], esi
  2138 00001111 893D[9C150000]      <2> 		mov [endbufferrdpr], edi
  2139 00001117 8B3D[82520500]      <2> 		mov edi, [commandsentered]
  2140 0000111D 893D[7E520500]      <2> 		mov [commandlistentries], edi
  2141                              <2> 	rdprintb:
  2142 00001123 56                  <2> 		push esi
  2143 00001124 B001                <2> 		mov al, 1
  2144 00001126 E884040000          <2> 		call rdcharint
  2145 0000112B 8A25[0F160000]      <2> 		mov ah, [lastkey + 2]
  2146 00001131 88E1                <2> 		mov cl, ah
  2147 00001133 5E                  <2> 		pop esi
  2148                              <2> %ifdef io.serial
  2149                              <2> 		cmp ah, 0x41
  2150                              <2> 		je near rdprup
  2151                              <2> 		cmp ah, 0x42
  2152                              <2> 		je near rdprdown
  2153                              <2> 		cmp ah, 0x43
  2154                              <2> 		je near rdprright
  2155                              <2> 		cmp ah, 0x44
  2156                              <2> 		je near rdprleft
  2157                              <2> 		cmp ah, 0x31
  2158                              <2> 		je near rdprhome
  2159                              <2> 		cmp ah, 0x48
  2160                              <2> 		je near rdprhome
  2161                              <2> 		cmp ah, 0x46
  2162                              <2> 		je near rdprend
  2163                              <2> 		cmp ah, 0x33
  2164                              <2> 		je near rdprdel
  2165                              <2> 		cmp ah, 0x34
  2166                              <2> 		je near rdprend
  2167                              <2> %else
  2168 00001134 803D[A8490000]E0    <2> 		cmp byte [specialkey], 0xE0
  2169 0000113B 753F                <2> 		jne notspecialrdprnt
  2170 0000113D 80FC53              <2> 		cmp ah, 0x53
  2171 00001140 0F84B1030000        <2> 		je near rdprdel
  2172 00001146 80FC47              <2> 		cmp ah, 0x47
  2173 00001149 0F847E010000        <2> 		je near rdprhome
  2174 0000114F 80FC4F              <2> 		cmp ah, 0x4F
  2175 00001152 0F8494010000        <2> 		je near rdprend
  2176 00001158 80FC50              <2> 		cmp ah, 0x50
  2177 0000115B 0F8424020000        <2> 		je near rdprdown
  2178 00001161 80FC4D              <2> 		cmp ah, 0x4D
  2179 00001164 0F84C1010000        <2> 		je near rdprright
  2180 0000116A 80FC4B              <2> 		cmp ah, 0x4B
  2181 0000116D 0F8496010000        <2> 		je near rdprleft
  2182 00001173 80FC48              <2> 		cmp ah, 0x48
  2183 00001176 0F844C020000        <2> 		je near rdprup
  2184                              <2> 	notspecialrdprnt:
  2185                              <2> %endif
  2186 0000117C 66A1[0D160000]      <2> 		mov ax, [lastkey]
  2187 00001182 663D0800            <2> 		cmp ax, 8
  2188 00001186 0F84A0030000        <2> 		je near rdprbscheck
  2189 0000118C 663D0000            <2> 		cmp ax, 0
  2190 00001190 7491                <2> 		je rdprintb
  2191 00001192 80F900              <2> 		cmp cl, 0
  2192 00001195 748C                <2> 		je rdprintb
  2193 00001197 663D8000            <2> 		cmp ax, 0x80
  2194 0000119B 7257                <2> 		jb .normal
  2195 0000119D 663D0008            <2> 		cmp ax, 0x800
  2196 000011A1 7321                <2> 		jae .three
  2197 000011A3 46                  <2> 		inc esi
  2198 000011A4 3B35[9C150000]      <2> 		cmp esi, [endbufferrdpr]
  2199 000011AA 0F83DA000000        <2> 		jae near donerdprinc
  2200 000011B0 66C1E002            <2> 		shl ax, 2
  2201 000011B4 C0E802              <2> 		shr al, 2
  2202 000011B7 0C80                <2> 		or al, 10000000b
  2203 000011B9 80CCC0              <2> 		or ah, 11000000b
  2204 000011BC 8866FF              <2> 		mov [esi - 1], ah
  2205 000011BF E930000000          <2> 		jmp .normal
  2206                              <2> .three:	
  2207 000011C4 81C602000000        <2> 		add esi, 2
  2208 000011CA 3B35[9C150000]      <2> 		cmp esi, [endbufferrdpr]
  2209 000011D0 0F83B4000000        <2> 		jae near donerdprinc
  2210 000011D6 88E1                <2> 		mov cl, ah
  2211 000011D8 C0E904              <2> 		shr cl, 4
  2212 000011DB 80C9E0              <2> 		or cl, 11100000b
  2213 000011DE 884EFE              <2> 		mov [esi - 2], cl
  2214 000011E1 66C1E004            <2> 		shl ax, 4
  2215 000011E5 66C1E802            <2> 		shr ax, 2
  2216 000011E9 80CC80              <2> 		or ah, 10000000b
  2217 000011EC C0E802              <2> 		shr al, 2
  2218 000011EF 0C80                <2> 		or al, 10000000b
  2219 000011F1 8866FF              <2> 		mov [esi - 1], ah
  2220                              <2> .normal:
  2221 000011F4 8806                <2> 		mov [esi], al
  2222 000011F6 46                  <2> 		inc esi
  2223 000011F7 66A1[0D160000]      <2> 		mov ax, [lastkey]
  2224                              <2> 	bscheckequal:
  2225 000011FD 668B1D[90150000]    <2> 		mov bx, [modkeyrdpr]
  2226 00001204 803D[97150000]00    <2> 		cmp byte [txtmask], 0
  2227 0000120B 7407                <2> 		je nomasktxt
  2228 0000120D 30E4                <2> 		xor ah, ah
  2229 0000120F A0[97150000]        <2> 		mov al, [txtmask]
  2230                              <2> 	nomasktxt:
  2231 00001214 56                  <2> 		push esi
  2232 00001215 66A3[8C150000]      <2> 		mov [axcache], ax
  2233 0000121B 668B1D[8E150000]    <2> 		mov bx, [endkeyrdpr]
  2234 00001222 6639D8              <2> 		cmp ax, bx
  2235 00001225 7432                <2> 		je nobackprintbuftxt2
  2236 00001227 E8FD030000          <2> 		call prcharint
  2237 0000122C BE[D09C0300]        <2> 		mov esi, buftxt2
  2238 00001231 E85DFDFFFF          <2> 		call printquiet
  2239 00001236 66B82000            <2> 		mov ax, " "
  2240 0000123A E801040000          <2> 		call prcharq
  2241 0000123F 66B80800            <2> 		mov ax, 8
  2242 00001243 81FE[D09C0300]      <2> 		cmp esi, buftxt2
  2243 00001249 740E                <2> 		je nobackprintbuftxt2
  2244                              <2> 	backprintbuftxt2:
  2245 0000124B E8F0030000          <2> 		call prcharq
  2246 00001250 4E                  <2> 		dec esi
  2247 00001251 81FE[D09C0300]      <2> 		cmp esi, buftxt2
  2248 00001257 77F2                <2> 		ja backprintbuftxt2
  2249                              <2> 	nobackprintbuftxt2:
  2250 00001259 663D0A00            <2> 		cmp ax, 10
  2251 0000125D 7405                <2> 		je nonobackprint
  2252 0000125F E8C5030000          <2> 		call prcharint
  2253                              <2> 	nonobackprint:
  2254 00001264 5E                  <2> 		pop esi
  2255 00001265 3B35[9C150000]      <2> 		cmp esi, [endbufferrdpr]
  2256 0000126B 0F8319000000        <2> 		jae near donerdprinc
  2257 00001271 66A1[8C150000]      <2> 		mov ax, [axcache]
  2258 00001277 8A25[8E150000]      <2> 		mov ah, [endkeyrdpr]
  2259 0000127D 38E0                <2> 		cmp al, ah
  2260 0000127F 0F859EFEFFFF        <2> 		jne rdprintb
  2261 00001285 E901000000          <2> 		jmp donerdprint
  2262                              <2> 	donerdprinc:
  2263 0000128A 46                  <2> 		inc esi
  2264                              <2> 	donerdprint:
  2265 0000128B 4E                  <2> 		dec esi
  2266 0000128C BF[D09C0300]        <2> 		mov edi, buftxt2
  2267                              <2> 	copylaterstuff:
  2268 00001291 8A07                <2> 		mov al, [edi]
  2269 00001293 3C00                <2> 		cmp al, 0
  2270 00001295 7406                <2> 		je nocopylaterstuff
  2271 00001297 8806                <2> 		mov [esi], al
  2272 00001299 47                  <2> 		inc edi
  2273 0000129A 46                  <2> 		inc esi
  2274 0000129B EBF4                <2> 		jmp copylaterstuff
  2275                              <2> 	nocopylaterstuff:
  2276 0000129D C60600              <2> 		mov byte [esi], 0
  2277 000012A0 E80B000000          <2> 		call clearbuftxt2
  2278 000012A5 89F1                <2> 		mov ecx, esi
  2279 000012A7 8B3D[92150000]      <2> 		mov edi, [firstesirdpr]
  2280 000012AD 29F9                <2> 		sub ecx, edi
  2281 000012AF C3                  <2> 		ret
  2282                              <2> 	
  2283                              <2> 	clearbuftxt2:
  2284 000012B0 30C0                <2> 		xor al, al
  2285 000012B2 BF[D09C0300]        <2> 		mov edi, buftxt2
  2286                              <2> 	clearbuftxt2lp:
  2287 000012B7 8807                <2> 		mov [edi], al
  2288 000012B9 47                  <2> 		inc edi
  2289 000012BA 81FF[D0A00300]      <2> 		cmp edi, buftxt
  2290 000012C0 75F5                <2> 		jne clearbuftxt2lp
  2291 000012C2 C3                  <2> 		ret
  2292                              <2> 	
  2293                              <2> 	rdprintb2:
  2294 000012C3 E862070000          <2> 		call termcopy
  2295 000012C8 E956FEFFFF          <2> 		jmp rdprintb
  2296                              <2> 	
  2297                              <2> 	rdprhome:
  2298 000012CD 3B35[98150000]      <2> 		cmp esi, [buftxtloc]
  2299 000012D3 0F84EAFFFFFF        <2> 		je near rdprintb2
  2300 000012D9 BF[D09C0300]        <2> 		mov edi, buftxt2
  2301 000012DE 8A07                <2> 		mov al, [edi]
  2302 000012E0 E879020000          <2> 		call shiftbuftxt2
  2303 000012E5 E856030000          <2> 		call prcharq
  2304 000012EA EBE1                <2> 		jmp rdprhome
  2305                              <2> 		
  2306                              <2> 	rdprend:
  2307 000012EC BF[D09C0300]        <2> 		mov edi, buftxt2
  2308 000012F1 8A07                <2> 		mov al, [edi]
  2309 000012F3 3C00                <2> 		cmp al, 0
  2310 000012F5 0F84C8FFFFFF        <2> 		je near rdprintb2
  2311 000012FB 8806                <2> 		mov [esi], al
  2312 000012FD E849000000          <2> 		call shiftbuftxt2lft
  2313 00001302 E839030000          <2> 		call prcharq
  2314 00001307 EBE3                <2> 		jmp rdprend
  2315                              <2> 	
  2316                              <2> 	rdprleft:
  2317 00001309 3B35[98150000]      <2> 		cmp esi, [buftxtloc]
  2318 0000130F 0F840EFEFFFF        <2> 		je near rdprintb
  2319 00001315 BF[D09C0300]        <2> 		mov edi, buftxt2
  2320 0000131A 8A07                <2> 		mov al, [edi]
  2321 0000131C E83D020000          <2> 		call shiftbuftxt2
  2322 00001321 E803030000          <2> 		call prcharint
  2323 00001326 E9F8FDFFFF          <2> 		jmp rdprintb
  2324                              <2> 		
  2325                              <2> 	rdprright:
  2326 0000132B BF[D09C0300]        <2> 		mov edi, buftxt2
  2327 00001330 8A07                <2> 		mov al, [edi]
  2328 00001332 3C00                <2> 		cmp al, 0
  2329 00001334 0F84E9FDFFFF        <2> 		je near rdprintb
  2330 0000133A 8806                <2> 		mov [esi], al
  2331 0000133C E80A000000          <2> 		call shiftbuftxt2lft
  2332 00001341 E8E3020000          <2> 		call prcharint
  2333 00001346 E9D8FDFFFF          <2> 		jmp rdprintb
  2334                              <2> 		
  2335                              <2> 	shiftbuftxt2lft:
  2336 0000134B 55                  <2> 		push ebp
  2337 0000134C 89FD                <2> 		mov ebp, edi
  2338                              <2> 	.lp:
  2339 0000134E 3C00                <2> 		cmp al, 0
  2340 00001350 7408                <2> 		je noshiftbuftxt2lft
  2341 00001352 47                  <2> 		inc edi
  2342 00001353 8A07                <2> 		mov al, [edi]
  2343 00001355 8847FF              <2> 		mov [edi - 1], al
  2344 00001358 EBF4                <2> 		jmp .lp
  2345                              <2> 	noshiftbuftxt2lft:
  2346 0000135A 8A4500              <2> 		mov al, [ebp]
  2347 0000135D 5D                  <2> 		pop ebp
  2348 0000135E 3CC0                <2> 		cmp al, 0xC0
  2349 00001360 7304                <2> 		jae .nofix
  2350 00001362 3C80                <2> 		cmp al, 0x80
  2351 00001364 73E5                <2> 		jae shiftbuftxt2lft
  2352                              <2> 	.nofix:
  2353 00001366 8A06                <2> 		mov al, [esi]
  2354 00001368 30E4                <2> 		xor ah, ah
  2355 0000136A 46                  <2> 		inc esi
  2356 0000136B 668B1D[90150000]    <2> 		mov bx, [modkeyrdpr]
  2357 00001372 C3                  <2> 		ret
  2358                              <2> 		
  2359                              <2> 	rdprdownbck:
  2360 00001373 FECC                <2> 		dec ah
  2361 00001375 8825[96150000]      <2> 		mov [commandedit], ah
  2362 0000137B E88D000000          <2> 		call rdprbckspc
  2363 00001380 E99EFDFFFF          <2> 		jmp rdprintb
  2364                              <2> 	
  2365                              <2> 	rdprdown:
  2366 00001385 8A25[96150000]      <2> 		mov ah, [commandedit]
  2367 0000138B 80FC01              <2> 		cmp ah, 1
  2368 0000138E 0F868FFDFFFF        <2> 		jbe near rdprintb
  2369 00001394 8B3D[82520500]      <2> 		mov edi, [commandsentered]
  2370 0000139A 3B3D[7E520500]      <2> 		cmp edi, [commandlistentries]
  2371 000013A0 7618                <2> 		jbe .nofix
  2372 000013A2 8105[7E520500]0200- <2> 		add dword [commandlistentries], 2
  2373 000013AA 0000                <2>
  2374 000013AC 3B3D[7E520500]      <2> 		cmp edi, [commandlistentries]
  2375 000013B2 7706                <2> 		ja .nofix
  2376 000013B4 893D[7E520500]      <2> 		mov [commandlistentries], edi
  2377                              <2> 	.nofix:
  2378 000013BA 80FC02              <2> 		cmp ah, 2
  2379 000013BD 74B4                <2> 		je rdprdownbck
  2380 000013BF 80EC02              <2> 		sub ah, 2
  2381 000013C2 8825[96150000]      <2> 		mov [commandedit], ah
  2382                              <2> 		
  2383                              <2> 	rdprup:
  2384 000013C8 3805[96150000]      <2> 		cmp [commandedit], al
  2385 000013CE 0F844FFDFFFF        <2> 		je near rdprintb
  2386 000013D4 813D[7E520500]0000- <2> 		cmp dword [commandlistentries], 0
  2387 000013DC 0000                <2>
  2388 000013DE 0F843FFDFFFF        <2> 		je near rdprintb
  2389 000013E4 FF0D[7E520500]      <2> 		dec dword [commandlistentries]
  2390                              <2> 	.lp:
  2391 000013EA BF[D09C0300]        <2> 		mov edi, buftxt2
  2392 000013EF 8A07                <2> 		mov al, [edi]
  2393 000013F1 3C00                <2> 		cmp al, 0
  2394 000013F3 740E                <2> 		je .start
  2395 000013F5 8806                <2> 		mov [esi], al
  2396 000013F7 E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2397 000013FC E83F020000          <2> 		call prcharq
  2398 00001401 EBE7                <2> 		jmp .lp
  2399                              <2> 	.start:
  2400 00001403 E805000000          <2> 		call rdprbckspc
  2401 00001408 E948000000          <2> 		jmp getcurrentcommandstr
  2402                              <2> 	rdprbckspc:
  2403 0000140D 3B35[98150000]      <2> 		cmp esi, [buftxtloc]
  2404 00001413 7432                <2> 		je nordprupbck
  2405                              <2> 	rdprupbckspclp:
  2406 00001415 66B80800            <2> 		mov ax, 8
  2407 00001419 668B1D[90150000]    <2> 		mov bx, [modkeyrdpr]
  2408 00001420 E81B020000          <2> 		call prcharq
  2409 00001425 66B82000            <2> 		mov ax, ' '
  2410 00001429 E812020000          <2> 		call prcharq
  2411 0000142E 66B80800            <2> 		mov ax, 8
  2412 00001432 E809020000          <2> 		call prcharq
  2413 00001437 4E                  <2> 		dec esi
  2414 00001438 3B35[98150000]      <2> 		cmp esi, [buftxtloc]
  2415 0000143E 7402                <2> 		je nordprupbck2
  2416 00001440 EBD3                <2> 		jmp rdprupbckspclp
  2417                              <2> 	nordprupbck2:
  2418 00001442 E8E3050000          <2> 		call termcopy
  2419                              <2> 	nordprupbck:
  2420 00001447 8B3D[7A520500]      <2> 		mov edi, [commandbufpos]
  2421 0000144D 81C7[86520500]      <2> 		add edi, commandbuf
  2422 00001453 4F                  <2> 		dec edi
  2423 00001454 C3                  <2> 		ret
  2424                              <2> 	getcurrentcommandstr:
  2425 00001455 8A25[96150000]      <2> 		mov ah, [commandedit]
  2426 0000145B FE05[96150000]      <2> 		inc byte [commandedit]
  2427                              <2> 	getccmdlp:
  2428 00001461 4F                  <2> 		dec edi
  2429 00001462 8A07                <2> 		mov al, [edi]
  2430 00001464 81FF[86520500]      <2> 		cmp edi, commandbuf
  2431 0000146A 7231                <2> 		jb getcmdresetcommandbuf
  2432 0000146C 81EF[86520500]      <2> 		sub edi, commandbuf
  2433 00001472 3B3D[7A520500]      <2> 		cmp edi, [commandbufpos]
  2434 00001478 0F84A5FCFFFF        <2> 		je near rdprintb
  2435 0000147E 81C7[86520500]      <2> 		add edi, commandbuf
  2436 00001484 3C00                <2> 		cmp al, 0
  2437 00001486 75D9                <2> 		jne getccmdlp
  2438 00001488 FECC                <2> 		dec ah
  2439 0000148A 80FC00              <2> 		cmp ah, 0
  2440 0000148D 77D2                <2> 		ja getccmdlp
  2441 0000148F 47                  <2> 		inc edi
  2442 00001490 81FF[86620500]      <2> 		cmp edi, commandbufend
  2443 00001496 770D                <2> 		ja fixcmdbufb4morerdpr
  2444 00001498 E915000000          <2> 		jmp morerdprup
  2445                              <2> 	getcmdresetcommandbuf:
  2446 0000149D BF[86620500]        <2> 		mov edi, commandbufend
  2447 000014A2 47                  <2> 		inc edi
  2448 000014A3 EBBC                <2> 		jmp getccmdlp
  2449                              <2> 	fixcmdbufb4morerdpr:
  2450 000014A5 4F                  <2> 		dec edi
  2451 000014A6 81EF[86620500]      <2> 		sub edi, commandbufend
  2452 000014AC 81C7[86520500]      <2> 		add edi, commandbuf
  2453                              <2> 	morerdprup:
  2454 000014B2 8A07                <2> 		mov al, [edi]
  2455 000014B4 47                  <2> 		inc edi
  2456 000014B5 81EF[86520500]      <2> 		sub edi, commandbuf
  2457 000014BB 3C00                <2> 		cmp al, 0
  2458 000014BD 0F8400FEFFFF        <2> 		je near rdprintb2
  2459 000014C3 3B3D[7A520500]      <2> 		cmp edi, [commandbufpos]
  2460 000014C9 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2461 000014CF 81C7[86520500]      <2> 		add edi, commandbuf
  2462 000014D5 8806                <2> 		mov [esi], al
  2463 000014D7 46                  <2> 		inc esi
  2464 000014D8 57                  <2> 		push edi
  2465 000014D9 668B1D[90150000]    <2> 		mov bx, [modkeyrdpr]
  2466 000014E0 30E4                <2> 		xor ah, ah
  2467 000014E2 E859010000          <2> 		call prcharq
  2468 000014E7 5F                  <2> 		pop edi
  2469 000014E8 81FF[86620500]      <2> 		cmp edi, commandbufend
  2470 000014EE 76C2                <2> 		jbe morerdprup
  2471 000014F0 BF[86520500]        <2> 		mov edi, commandbuf
  2472 000014F5 EBBB                <2> 		jmp morerdprup
  2473                              <2> 
  2474                              <2> 	rdprdel:
  2475 000014F7 BF[D09C0300]        <2> 		mov edi, buftxt2
  2476 000014FC 8A07                <2> 		mov al, [edi]
  2477 000014FE 3C00                <2> 		cmp al, 0
  2478 00001500 0F841DFCFFFF        <2> 		je near rdprintb
  2479 00001506 8806                <2> 		mov [esi], al
  2480 00001508 3C80                <2> 		cmp al, 0x80
  2481 0000150A 7216                <2> 		jb .fn
  2482                              <2> 	.lp:
  2483 0000150C 46                  <2> 		inc esi
  2484 0000150D 47                  <2> 		inc edi
  2485 0000150E 8A07                <2> 		mov al, [edi]
  2486 00001510 3C00                <2> 		cmp al, 0
  2487 00001512 0F840BFCFFFF        <2> 		je near rdprintb
  2488 00001518 8806                <2> 		mov [esi], al
  2489 0000151A 3C80                <2> 		cmp al, 0x80
  2490 0000151C 7204                <2> 		jb .fn
  2491 0000151E 3CC0                <2> 		cmp al, 0xC0
  2492 00001520 72EA                <2> 		jb .lp
  2493                              <2> 	.fn:
  2494 00001522 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2495 00001527 E814010000          <2> 		call prcharq
  2496                              <2> 		
  2497                              <2> 	rdprbscheck:
  2498 0000152C 3B35[92150000]      <2> 		cmp esi, [firstesirdpr]
  2499 00001532 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2500                              <2> 	goodbscheck:
  2501 00001538 4E                  <2> 		dec esi
  2502 00001539 8A46FF              <2> 		mov al, [esi - 1]
  2503 0000153C C60600              <2> 		mov byte [esi], 0
  2504 0000153F 3CC0                <2> 		cmp al, 0xC0
  2505 00001541 7309                <2> 		jae .onemore
  2506 00001543 3C80                <2> 		cmp al, 0x80
  2507 00001545 73F1                <2> 		jae goodbscheck
  2508 00001547 E904000000          <2> 		jmp .nomore
  2509                              <2> 	.onemore:
  2510 0000154C 4E                  <2> 		dec esi
  2511 0000154D C60600              <2> 		mov byte [esi], 0		
  2512                              <2> 	.nomore:
  2513 00001550 668B1D[90150000]    <2> 		mov bx, [modkeyrdpr]
  2514 00001557 B008                <2> 		mov al, 8
  2515 00001559 E99FFCFFFF          <2> 		jmp bscheckequal
  2516                              <2> 		
  2517                              <2> 	shiftbuftxt2:
  2518 0000155E 55                  <2> 		push ebp
  2519 0000155F 89FD                <2> 		mov ebp, edi
  2520                              <2> 	.lp
  2521 00001561 3C00                <2> 		cmp al, 0
  2522 00001563 7409                <2> 		je noshiftbuftxt2
  2523 00001565 47                  <2> 		inc edi
  2524 00001566 8A27                <2> 		mov ah, [edi]
  2525 00001568 8807                <2> 		mov [edi], al
  2526 0000156A 88E0                <2> 		mov al, ah
  2527 0000156C EBF3                <2> 		jmp .lp
  2528                              <2> 	noshiftbuftxt2:
  2529 0000156E 8A4500              <2> 		mov al, [ebp]
  2530 00001571 5D                  <2> 		pop ebp
  2531 00001572 3CC0                <2> 		cmp al, 0xC0
  2532 00001574 7304                <2> 		jae .nofix
  2533 00001576 3C80                <2> 		cmp al, 0x80
  2534 00001578 73E4                <2> 		jae shiftbuftxt2
  2535                              <2> 	.nofix:
  2536 0000157A BF[D09C0300]        <2> 		mov edi, buftxt2
  2537 0000157F 4E                  <2> 		dec esi
  2538 00001580 8A06                <2> 		mov al, [esi]
  2539 00001582 8807                <2> 		mov [edi], al
  2540 00001584 C60600              <2> 		mov byte [esi], 0
  2541 00001587 66B80800            <2> 		mov ax, 8
  2542 0000158B C3                  <2> 		ret
  2543                              <2> 		
  2544 0000158C 0000                <2> axcache dw 0
  2545 0000158E 0000                <2> endkeyrdpr dw 0
  2546 00001590 0000                <2> modkeyrdpr dw 0
  2547 00001592 00000000            <2> firstesirdpr dd 0
  2548 00001596 00                  <2> commandedit db 0
  2549 00001597 00                  <2> txtmask db 0
  2550 00001598 00000000            <2> buftxtloc dd 0
  2551 0000159C 00000000            <2> endbufferrdpr dd 0
  2552 000015A0 082000              <2> backcursor db 8," ",0
  2553                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2554                              <2> readchar:
  2555 000015A3 E807000000          <2> 	call rdcharint
  2556 000015A8 E9FBECFFFF          <2> 	jmp timerinterrupt
  2557                              <2> getchar:
  2558 000015AD 30C0                <2> 	xor al, al
  2559                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2560 000015AF 66C705[11160000]01- <2> 		mov word [trans], 1
  2561 000015B7 00                  <2>
  2562 000015B8 3C00                <2> 		cmp al, 0
  2563 000015BA 7509                <2> 		jne transcheck
  2564 000015BC 66C705[11160000]00- <2> 		mov word [trans], 0
  2565 000015C4 00                  <2>
  2566                              <2> 	transcheck:
  2567                              <2> 	%ifdef io.serial
  2568                              <2> 		call serial.receive
  2569                              <2> 		xor ah, ah
  2570                              <2> 		cmp al, 13
  2571                              <2> 		je rdenter
  2572                              <2> 	%else
  2573 000015C5 E800340000          <2> 		call getkey
  2574 000015CA 66A1[0F160000]      <2> 		mov ax, [lastkey + 2]
  2575 000015D0 663D1C00            <2> 		cmp ax, 0x1C
  2576 000015D4 7425                <2> 		je rdenter
  2577                              <2> 	%endif
  2578 000015D6 66A1[0D160000]      <2> 		mov ax, [lastkey]
  2579 000015DC 668B1D[11160000]    <2> 		mov bx, [trans]
  2580 000015E3 803D[A8490000]E0    <2> 		cmp byte [specialkey], 0xE0
  2581 000015EA 7500                <2> 		jne nospecialtrans
  2582                              <2> 	nospecialtrans:
  2583 000015EC 6609C3              <2> 		or bx, ax
  2584 000015EF 6681FB0000          <2> 		cmp bx, 0
  2585 000015F4 74CF                <2> 		je transcheck
  2586 000015F6 E90C000000          <2> 		jmp rdend
  2587                              <2> 	rdenter:
  2588 000015FB C1E010              <2> 		shl eax, 16
  2589 000015FE 66B80A00            <2> 		mov ax, 10
  2590 00001602 A3[0D160000]        <2> 		mov [lastkey], eax
  2591                              <2> 	rdend:
  2592 00001607 A1[0D160000]        <2> 		mov eax, [lastkey]
  2593 0000160C C3                  <2> 		ret
  2594                              <2> 		
  2595 0000160D 00000000            <2> lastkey dd 0
  2596 00001611 0000                <2> trans dw 0
  2597                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2598                              <2> prntchar:
  2599 00001613 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2600                              <2> %ifdef io.serial
  2601                              <2> 	call prcharint
  2602                              <2> 	jmp timerinterrupt
  2603                              <2> prcharint:	
  2604                              <2> prcharq:
  2605                              <2> 	call serial.send
  2606                              <2> 	ret
  2607                              <2> %else
  2608 00001615 38FB                <2> cmp bl, bh
  2609 00001617 740A                <2> je prchar.notimer
  2610 00001619 E80B000000          <2> call prcharint
  2611 0000161E E985ECFFFF          <2> jmp timerinterrupt
  2612                              <2> prchar.notimer:
  2613 00001623 E818000000          <2> 	call prcharq
  2614 00001628 CF                  <2> 	iret
  2615                              <2> 	
  2616                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2617 00001629 663DFFFE            <2> 	cmp ax, 0xFEFF
  2618 0000162D 740E                <2> 	je .ret
  2619 0000162F 39C1                <2> 	cmp ecx, eax
  2620 00001631 740D                <2> 	je prcharq
  2621 00001633 E808000000          <2> 	call prcharq
  2622 00001638 E8ED030000          <2> 	call termcopy
  2623                              <2> .ret:
  2624 0000163D C3                  <2> 	ret
  2625 0000163E 00                  <2> termguion db 0
  2626 0000163F 00                  <2> termcopyon db 0
  2627                              <2> prcharq:
  2628 00001640 C1E310              <2> 	shl ebx, 16
  2629 00001643 6689C3              <2> 	mov bx, ax
  2630 00001646 89D8                <2> 	mov eax, ebx
  2631 00001648 A3[35180000]        <2> 	mov [charbuf], eax
  2632 0000164D 8B1D[2D180000]      <2> 	mov ebx, [videobufpos]
  2633 00001653 BF[E6A70300]        <2> 	mov edi, videobuf
  2634 00001658 01DF                <2> 	add edi, ebx
  2635 0000165A A1[351A0000]        <2> 	mov eax, [removedvideo]
  2636 0000165F 8907                <2> 	mov [edi], eax
  2637 00001661 A1[35180000]        <2> 	mov eax, [charbuf]
  2638 00001666 31D2                <2> 	xor edx, edx
  2639 00001668 668B15[31180000]    <2> 	mov dx, [charpos]
  2640 0000166F 31C9                <2> 	xor ecx, ecx
  2641 00001671 668B0D[33180000]    <2> 	mov cx, [charxy]
  2642 00001678 663D0900            <2> 	cmp ax, 9
  2643 0000167C 0F8479000000        <2> 	je near prtab
  2644 00001682 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2645 00001686 0F849C000000        <2> 	je near prcr
  2646 0000168C 663D0A00            <2> 	cmp ax, 10
  2647 00001690 0F84E5000000        <2> 	je near prnlcr
  2648 00001696 663D0800            <2> 	cmp ax, 8
  2649 0000169A 0F8499000000        <2> 	je near prbs
  2650 000016A0 663DFF00            <2> 	cmp ax, 255		;null character
  2651 000016A4 0F8424000000        <2> 	je near donescr
  2652 000016AA 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2653 000016AE 0F8341000000        <2> 	jae near prnofont
  2654                              <2> donepr:
  2655 000016B4 8907                <2> 	mov [edi], eax
  2656 000016B6 81C704000000        <2> 	add edi, 4
  2657 000016BC FEC2                <2> 	inc dl
  2658                              <2> donecrnl:
  2659 000016BE 38CA                <2> 	cmp dl, cl
  2660 000016C0 0F83D9000000        <2> 	jae near preol
  2661                              <2> doneeol:
  2662 000016C6 38EE                <2> 	cmp dh, ch
  2663 000016C8 0F83EE000000        <2> 	jae near prscr	
  2664                              <2> donescr:
  2665 000016CE 89FB                <2> 	mov ebx, edi
  2666 000016D0 8B07                <2> 	mov eax, [edi]
  2667 000016D2 A3[351A0000]        <2> 	mov [removedvideo], eax
  2668 000016D7 81EB[E6A70300]      <2> 	sub ebx, videobuf
  2669 000016DD 891D[2D180000]      <2> 	mov [videobufpos], ebx
  2670 000016E3 668915[31180000]    <2> 	mov [charpos], dx
  2671 000016EA A1[35180000]        <2> 	mov eax, [charbuf]
  2672 000016EF 89C3                <2> 	mov ebx, eax
  2673 000016F1 C1EB10              <2> 	shr ebx, 16
  2674 000016F4 C3                  <2> 	ret
  2675                              <2> 	
  2676                              <2> 	prnofont:
  2677 000016F5 66B80200            <2> 		mov ax, 2
  2678 000016F9 EBB9                <2> 		jmp donepr
  2679                              <2> 	prtab:
  2680 000016FB 8B1D[29180000]      <2> 		mov ebx, [linebeginpos]
  2681 00001701 81EF[E6A70300]      <2> 		sub edi, videobuf
  2682 00001707 29DF                <2> 		sub edi, ebx
  2683 00001709 C1EF05              <2> 		shr edi, 5
  2684 0000170C C1E705              <2> 		shl edi, 5
  2685 0000170F 81C720000000        <2> 		add edi, 32
  2686 00001715 C0EA03              <2> 		shr dl, 3
  2687 00001718 C0E203              <2> 		shl dl, 3
  2688 0000171B 80C208              <2> 		add dl, 8
  2689 0000171E 81C7[E6A70300]      <2> 		add edi, videobuf
  2690 00001724 01DF                <2> 		add edi, ebx
  2691 00001726 EB96                <2> 		jmp donecrnl
  2692                              <2> 	
  2693                              <2> 	prcr:
  2694 00001728 30D2                <2> 		xor dl, dl
  2695 0000172A BF[E6A70300]        <2> 		mov edi, videobuf
  2696 0000172F 8B1D[29180000]      <2> 		mov ebx, [linebeginpos]
  2697 00001735 01DF                <2> 		add edi, ebx
  2698 00001737 EB85                <2> 		jmp donecrnl
  2699                              <2> 			
  2700                              <2> 	prbs:
  2701 00001739 8B1D[29180000]      <2> 		mov ebx, [linebeginpos]
  2702 0000173F 80FA00              <2> 		cmp dl, 0
  2703 00001742 7415                <2> 		je prbackline
  2704                              <2> 	prnobmr:
  2705 00001744 891D[29180000]      <2> 		mov [linebeginpos], ebx
  2706 0000174A FECA                <2> 		dec dl
  2707 0000174C 31C0                <2> 		xor eax, eax
  2708 0000174E 81EF04000000        <2> 		sub edi, 4
  2709 00001754 E965FFFFFF          <2> 		jmp donecrnl
  2710                              <2> 	prbackline:
  2711 00001759 6631DB              <2> 		xor bx, bx
  2712 0000175C 88CA                <2> 		mov dl, cl
  2713 0000175E 80FE00              <2> 		cmp dh, 0
  2714 00001761 74E1                <2> 		je prnobmr
  2715 00001763 8B1D[29180000]      <2> 		mov ebx, [linebeginpos]
  2716 00001769 6651                <2> 		push cx
  2717 0000176B 31C9                <2> 		xor ecx, ecx
  2718 0000176D 8A0C24              <2> 		mov cl, [esp]
  2719 00001770 C1E102              <2> 		shl ecx, 2
  2720 00001773 29CB                <2> 		sub ebx, ecx
  2721 00001775 6659                <2> 		pop cx
  2722 00001777 FECE                <2> 		dec dh
  2723 00001779 EBC9                <2> 		jmp prnobmr
  2724                              <2> 		
  2725                              <2> 	prnlcr:
  2726 0000177B FEC6                <2> 		inc dh
  2727 0000177D 31DB                <2> 		xor ebx, ebx
  2728 0000177F 30D2                <2> 		xor dl, dl
  2729 00001781 88CB                <2> 		mov bl, cl
  2730 00001783 66C1E302            <2> 		shl bx, 2
  2731 00001787 BF[E6A70300]        <2> 		mov edi, videobuf
  2732 0000178C 031D[29180000]      <2> 		add ebx, [linebeginpos]
  2733 00001792 891D[29180000]      <2> 		mov [linebeginpos], ebx
  2734 00001798 01DF                <2> 		add edi, ebx
  2735 0000179A E91FFFFFFF          <2> 		jmp donecrnl
  2736                              <2> 		
  2737                              <2> 	preol:
  2738 0000179F 30D2                <2> 		xor dl, dl
  2739 000017A1 FEC6                <2> 		inc dh
  2740 000017A3 31DB                <2> 		xor ebx, ebx
  2741 000017A5 88CB                <2> 		mov bl, cl
  2742 000017A7 66C1E302            <2> 		shl bx, 2
  2743 000017AB 031D[29180000]      <2> 		add ebx, [linebeginpos]
  2744 000017B1 891D[29180000]      <2> 		mov [linebeginpos], ebx
  2745 000017B7 E90AFFFFFF          <2> 		jmp doneeol
  2746                              <2> 	prscr:
  2747 000017BC FECE                <2> 		dec dh
  2748 000017BE BF[E6A70300]        <2> 		mov edi, videobuf
  2749 000017C3 31DB                <2> 		xor ebx, ebx
  2750 000017C5 88CB                <2> 		mov bl, cl
  2751 000017C7 66C1E302            <2> 		shl bx, 2
  2752 000017CB 01FB                <2> 		add ebx, edi
  2753                              <2> 	intscrollloop:
  2754 000017CD 8B03                <2> 		mov eax, [ebx]
  2755 000017CF 8907                <2> 		mov [edi], eax
  2756 000017D1 81C704000000        <2> 		add edi, 4
  2757 000017D7 81C304000000        <2> 		add ebx, 4
  2758 000017DD FEC9                <2> 		dec cl
  2759 000017DF 80F900              <2> 		cmp cl, 0
  2760 000017E2 75E9                <2> 		jne intscrollloop
  2761 000017E4 8A0D[33180000]      <2> 		mov cl, [charxy]
  2762 000017EA FECD                <2> 		dec ch
  2763 000017EC 80FD01              <2> 		cmp ch, 1
  2764 000017EF 77DC                <2> 		ja intscrollloop
  2765 000017F1 31C0                <2> 		xor eax, eax
  2766 000017F3 81EF[E6A70300]      <2> 		sub edi, videobuf
  2767 000017F9 893D[29180000]      <2> 		mov [linebeginpos], edi
  2768 000017FF 81C7[E6A70300]      <2> 		add edi, videobuf
  2769 00001805 89FB                <2> 		mov ebx, edi
  2770                              <2> 	intloopclear:
  2771 00001807 8903                <2> 		mov [ebx], eax
  2772 00001809 81C304000000        <2> 		add ebx, 4
  2773 0000180F FEC9                <2> 		dec cl
  2774 00001811 80F900              <2> 		cmp cl, 0
  2775 00001814 75F1                <2> 		jne intloopclear
  2776 00001816 FECD                <2> 		dec ch
  2777 00001818 80FD00              <2> 		cmp ch, 0
  2778 0000181B 75EA                <2> 		jne intloopclear
  2779 0000181D 668B0D[33180000]    <2> 		mov cx, [charxy]
  2780 00001824 E9A5FEFFFF          <2> 		jmp donescr
  2781                              <2> 		
  2782 00001829 00000000            <2> linebeginpos dd 0
  2783 0000182D 00000000            <2> videobufpos: dd 0
  2784 00001831 0000                <2> charpos db 0,0
  2785 00001833 501E                <2> charxy db 80,30
  2786 00001835 00000000            <2> charbuf dd 0
  2787                              <2> %endif
  2788                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2789                              <2> openfile:
  2790 00001839 E80A3B0000          <2> 	call loadfile
  2791 0000183E E965EAFFFF          <2> 	jmp timerinterrupt
  2792                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2793                              <2> num2str:
  2794 00001843 3C00                <2> 	cmp al, 0
  2795 00001845 750A                <2> 	jne num2strb
  2796 00001847 E8C10B0000          <2> 	call showdec
  2797 0000184C E957EAFFFF          <2> 	jmp timerinterrupt
  2798                              <2> num2strb:
  2799 00001851 E8ED0A0000          <2> 	call showhex
  2800 00001856 E94DEAFFFF          <2> 	jmp timerinterrupt
  2801                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2802                              <2> str2num:
  2803 0000185B 89F7                <2> 	mov edi, esi
  2804 0000185D E88D0C0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2805 00001862 E941EAFFFF          <2> 	jmp timerinterrupt
  2806                              <2> 	
  2807                              <1> %ifdef threads.included
  2808                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2809                              <1> %endif
  2810                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2811                              <2> gettime:
  2812 00001867 A1[60020000]        <2> 	mov eax, [timeseconds]
  2813 0000186C 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  2814 00001872 89D9                <2> 	mov ecx, ebx
  2815 00001874 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2816 00001877 E92CEAFFFF          <2> 	jmp timerinterrupt
  2817                              <1> 	%include 'source/interrupts/13_settime.asm'
  2818                              <2> settime:
  2819 0000187C A3[60020000]        <2> 	mov [timeseconds], eax
  2820 00001881 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  2821 00001887 E91CEAFFFF          <2> 	jmp timerinterrupt
  2822                              <2> 	
  2823                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2824                              <2> runcmd:
  2825 0000188C BF[D0A00300]        <2> 	mov edi, buftxt
  2826                              <2> cpcmd:
  2827 00001891 8A06                <2> 	mov al, [esi]
  2828 00001893 8807                <2> 	mov [edi], al
  2829 00001895 46                  <2> 	inc esi
  2830 00001896 47                  <2> 	inc edi
  2831 00001897 3C00                <2> 	cmp al, 0
  2832 00001899 75F6                <2> 	jne cpcmd
  2833 0000189B E8A6070000          <2> 	call run
  2834 000018A0 CF                  <2> 	iret
  2835                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2836                              <2> proginfo:
  2837                              <2> 	;mov ebx, variables
  2838 000018A1 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  2839 000018A7 89F7                <2> 	mov edi, esi
  2840 000018A9 31C9                <2> 	xor ecx, ecx
  2841                              <2> getcommandzeroes:
  2842 000018AB 8A07                <2> 	mov al, [edi]
  2843 000018AD 47                  <2> 	inc edi
  2844 000018AE 3C3B                <2> 	cmp al, ';'
  2845 000018B0 740B                <2> 	je nomorezeroes
  2846 000018B2 3C00                <2> 	cmp al, 0
  2847 000018B4 7407                <2> 	je nomorezeroes
  2848 000018B6 3C20                <2> 	cmp al, ' '
  2849 000018B8 75F1                <2> 	jne getcommandzeroes
  2850 000018BA 41                  <2> 	inc ecx
  2851 000018BB EBEE                <2> 	jmp getcommandzeroes
  2852                              <2> nomorezeroes:
  2853 000018BD 41                  <2> 	inc ecx
  2854 000018BE 4F                  <2> 	dec edi
  2855 000018BF 8B1D[5C8C0300]      <2> 	mov ebx, [uid]
  2856 000018C5 8B15[28540000]      <2> 	mov edx, [currentthread]
  2857 000018CB CF                  <2> 	iret
  2858                              <2> 	
  2859                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  2860                              <2> hooksig: ;hook code in ESI to signal in AL
  2861 000018CC 3C00                <2> 	cmp al, 0
  2862 000018CE 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  2863                              <2> ;	xor ebx, ebx
  2864                              <2> ;	mov bl, al
  2865                              <2> ;	shl bl, 2
  2866 000018D0 BF[4C860300]        <2> 	mov edi, sigtable
  2867 000018D5 8937                <2> 	mov [edi], esi
  2868                              <2> .quit:
  2869 000018D7 E9CCE9FFFF          <2> 	jmp timerinterrupt
  2870                              <1> %ifdef gui.included
  2871                              <1> 	%include 'source/interrupts/17_guiint.asm'
  2872                              <2> guiint:
  2873 000018DC 3CFD                <2> 	cmp al, 253
  2874 000018DE 0F8473000000        <2> 	je near .getinfo
  2875 000018E4 803D[F0710000]01    <2> 	cmp byte [guion], 1
  2876 000018EB 0F8550000000        <2> 	jne near .nogui
  2877 000018F1 3C00                <2> 	cmp al, 0
  2878 000018F3 0F844D000000        <2> 	je near .clear
  2879 000018F9 3C01                <2> 	cmp al, 1
  2880 000018FB 0F84A8000000        <2> 	je near .putpixel
  2881 00001901 3C02                <2> 	cmp al, 2
  2882 00001903 0F84AD000000        <2> 	je near .drawtext
  2883 00001909 3C03                <2> 	cmp al, 3
  2884 0000190B 0F84C0000000        <2> 	je near .drawline
  2885 00001911 3C04                <2> 	cmp al, 4
  2886 00001913 0F84CB000000        <2> 	je near .drawcircle
  2887 00001919 3C05                <2> 	cmp al, 5
  2888 0000191B 0F84D3000000        <2> 	je near .fillcircle
  2889 00001921 3C06                <2> 	cmp al, 6
  2890 00001923 0F84DB000000        <2> 	je near .drawsquare
  2891 00001929 3C07                <2> 	cmp al, 7
  2892 0000192B 0F84E6000000        <2> 	je near .fillsquare
  2893 00001931 3CFE                <2> 	cmp al, 254
  2894 00001933 0F8446000000        <2> 	je near .setinfo
  2895 00001939 3CFF                <2> 	cmp al, 255
  2896 0000193B 0F8443000000        <2> 	je near .reset
  2897                              <2> .nogui:
  2898 00001941 E962E9FFFF          <2> 	jmp timerinterrupt
  2899                              <2> 
  2900                              <2> .clear:		;color in bx
  2901 00001946 66891D[0D5B0000]    <2> 	mov [background], bx
  2902                              <2> %ifdef gui.background
  2903                              <2> 	mov ebx, [backgroundimage]
  2904                              <2> 	cmp ebx, 0
  2905                              <2> 	je .clearit
  2906                              <2> 	mov dword [backgroundimage], 0
  2907                              <2> 	mov [.bgi], ebx
  2908                              <2> .clearit:
  2909                              <2> %endif
  2910 0000194D E86F410000          <2> 	call guiclear
  2911 00001952 E951E9FFFF          <2> 	jmp timerinterrupt
  2912                              <2> 	
  2913                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  2914 00001957 31DB                <2> 	xor ebx, ebx
  2915 00001959 31C9                <2> 	xor ecx, ecx
  2916 0000195B 31D2                <2> 	xor edx, edx
  2917 0000195D 381D[F0710000]      <2> 	cmp [guion], bl
  2918 00001963 74DC                <2> 	je .nogui
  2919 00001965 668B1D[0D5B0000]    <2> 	mov bx, [background]
  2920 0000196C 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  2921 00001973 668B0D[00450000]    <2> 	mov cx, [resolutiony]
  2922 0000197A E929E9FFFF          <2> 	jmp timerinterrupt
  2923                              <2> 	
  2924                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  2925 0000197F E924E9FFFF          <2> 	jmp timerinterrupt
  2926                              <2> .reset:		;resets the screen to the original settings
  2927 00001984 66BBCF7B            <2> 	mov bx, background.original
  2928 00001988 66891D[0D5B0000]    <2> 	mov [background], bx
  2929 0000198F 66BBFFFF            <2> 	mov bx, 0xFFFF
  2930 00001993 66891D[CA610000]    <2> 	mov [colorfont2], bx
  2931                              <2> %ifdef gui.background
  2932                              <2> 	mov ebx, [backgroundimage]
  2933                              <2> 	cmp ebx, 0
  2934                              <2> 	jne .resetit
  2935                              <2> 	mov ebx, [.bgi]
  2936                              <2> 	mov [backgroundimage], ebx
  2937                              <2> .resetit:
  2938                              <2> %endif
  2939 0000199A E822410000          <2> 	call guiclear
  2940 0000199F E86D410000          <2> 	call reloadallgraphics
  2941 000019A4 E9FFE8FFFF          <2> 	jmp timerinterrupt
  2942                              <2> 
  2943                              <2> %ifdef gui.background
  2944                              <2> 	.bgi dd 0
  2945                              <2> %endif
  2946                              <2> 	
  2947                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  2948 000019A9 6689DE              <2> 	mov si, bx
  2949 000019AC E86F570000          <2> 	call putpixel
  2950 000019B1 E9F2E8FFFF          <2> 	jmp timerinterrupt
  2951                              <2> 
  2952                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  2953 000019B6 66D1E2              <2> 	shl dx, 1
  2954 000019B9 66891D[CA610000]    <2> 	mov [colorfont2], bx
  2955 000019C0 66893D[0D5B0000]    <2> 	mov [background], di
  2956 000019C7 E896470000          <2> 	call showstring2
  2957 000019CC E9D7E8FFFF          <2> 	jmp timerinterrupt
  2958                              <2> 
  2959                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  2960 000019D1 6689F0              <2> 	mov ax, si
  2961 000019D4 6689DE              <2> 	mov si, bx
  2962 000019D7 6689FB              <2> 	mov bx, di
  2963 000019DA E8B63F0000          <2> 	call drawline
  2964 000019DF E9C4E8FFFF          <2> 	jmp timerinterrupt
  2965                              <2> 
  2966                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  2967 000019E4 6689F0              <2> 	mov ax, si
  2968 000019E7 6689DE              <2> 	mov si, bx
  2969 000019EA E82F3B0000          <2> 	call drawcircle
  2970 000019EF E9B4E8FFFF          <2> 	jmp timerinterrupt
  2971                              <2> 
  2972                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  2973 000019F4 6689F0              <2> 	mov ax, si
  2974 000019F7 6689DE              <2> 	mov si, bx
  2975 000019FA E8313C0000          <2> 	call fillcircle
  2976 000019FF E9A4E8FFFF          <2> 	jmp timerinterrupt
  2977                              <2> 	
  2978                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  2979 00001A04 6689F0              <2> 	mov ax, si
  2980 00001A07 6689DE              <2> 	mov si, bx
  2981 00001A0A 6689FB              <2> 	mov bx, di
  2982 00001A0D E8CF410000          <2> 	call drawsquare
  2983 00001A12 E991E8FFFF          <2> 	jmp timerinterrupt
  2984                              <2> 
  2985                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  2986 00001A17 6689F0              <2> 	mov ax, si
  2987 00001A1A 6689DE              <2> 	mov si, bx
  2988 00001A1D 6689FB              <2> 	mov bx, di
  2989 00001A20 E831420000          <2> 	call fillsquare
  2990 00001A25 E97EE8FFFF          <2> 	jmp timerinterrupt
  2991                              <1> %endif
  2992                              <1> %ifdef sound.included
  2993                              <1> 	%include 'source/interrupts/18_soundint.asm'
  2994                              <1> %endif
  2995                              <1> %ifdef network.included
  2996                              <1> 	%include 'source/interrupts/19_netint.asm'
  2997                              <1> %endif
  2998                              <1> 
  2999                              <1> termcopy:
  3000                              <1> %ifdef io.serial
  3001                              <1> 	ret
  3002                              <1> %else
  3003                              <1> %ifdef terminal.vsync
  3004                              <1> 	mov byte [termcopyneeded], 1
  3005                              <1> 	ret
  3006                              <1> %else
  3007 00001A2A E80A000000          <1> 	call newtermcopy
  3008 00001A2F C3                  <1> 	ret
  3009                              <1> %endif
  3010 00001A30 00                  <1> 	termcopyneeded db 0
  3011 00001A31 00000000            <1> 	termcursorpos dd 0
  3012 00001A35 00000000            <1> 	removedvideo dd 0
  3013                              <1> newtermcopy:
  3014 00001A39 60                  <1> 	pusha
  3015 00001A3A BF[E6A70300]        <1> 	mov edi, videobuf
  3016 00001A3F 31DB                <1> 	xor ebx, ebx
  3017 00001A41 881D[301A0000]      <1> 	mov [termcopyneeded], bl
  3018 00001A47 8B1D[2D180000]      <1> 	mov ebx, [videobufpos]
  3019 00001A4D 01DF                <1> 	add edi, ebx
  3020 00001A4F 893D[311A0000]      <1> 	mov [termcursorpos], edi
  3021 00001A55 E8E2000000          <1> 	call switchtermcursor
  3022 00001A5A 803D[F0710000]00    <1> 	cmp byte [guion], 0
  3023 00001A61 0F8420000000        <1> 	je near nowincopy
  3024                              <1> %ifdef gui.included
  3025 00001A67 C605[31690000]00    <1> 	mov byte [mouseselecton], 0
  3026 00001A6E C605[3F160000]01    <1> 	mov byte [termcopyon], 1
  3027 00001A75 803D[3E160000]01    <1> 	cmp byte [termguion], 1
  3028 00001A7C 0F84394C0000        <1> 	je near windowvideocopy
  3029                              <1> %endif
  3030 00001A82 E9AE000000          <1> 	jmp nocopytermatall
  3031                              <1> nowincopy:
  3032 00001A87 BE00000A00          <1> 	mov esi, 0xA0000
  3033 00001A8C A1[41020000]        <1> 	mov eax, [basecache]
  3034 00001A91 C1E004              <1> 	shl eax, 4
  3035 00001A94 29C6                <1> 	sub esi, eax
  3036 00001A96 BF[E6A70300]        <1> 	mov edi, videobuf
  3037 00001A9B 31C9                <1> 	xor ecx, ecx
  3038 00001A9D 668B0D[33180000]    <1> 	mov cx, [charxy]
  3039                              <1> nowincopy2:
  3040 00001AA4 8B07                <1> 	mov eax, [edi]
  3041 00001AA6 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3042 00001AAC 8B1F                <1> 	mov ebx, [edi]
  3043 00001AAE 8907                <1> 	mov [edi], eax
  3044 00001AB0 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3045 00001AB6 81C702000000        <1> 	add edi, 2
  3046 00001ABC 39D8                <1> 	cmp eax, ebx
  3047 00001ABE 744B                <1> 	je nopresentwinfont
  3048 00001AC0 81EF02000000        <1> 	sub edi, 2
  3049 00001AC6 BD[3A740000]        <1> 	mov ebp, fonts
  3050 00001ACB 31C0                <1> 	xor eax, eax
  3051 00001ACD 668B07              <1> 	mov ax, [edi]
  3052 00001AD0 C1E004              <1> 	shl eax, 4
  3053 00001AD3 01C5                <1> 	add ebp, eax
  3054 00001AD5 81C702000000        <1> 	add edi, 2
  3055 00001ADB 668B1F              <1> 	mov bx, [edi]
  3056 00001ADE 31D2                <1> 	xor edx, edx
  3057 00001AE0 8A15[33180000]      <1> 	mov dl, [charxy]
  3058 00001AE6 C1C110              <1> 	rol ecx, 16
  3059 00001AE9 B110                <1> 	mov cl, 16
  3060                              <1> nowinfont:
  3061 00001AEB 8A4500              <1> 	mov al, [ebp]
  3062 00001AEE D0C8                <1> 	ror al, 1
  3063 00001AF0 80FB80              <1> 	cmp bl, 0x80
  3064 00001AF3 7202                <1> 	jb notnotfont
  3065 00001AF5 F6D0                <1> 	not al
  3066                              <1> notnotfont:
  3067 00001AF7 8806                <1> 	mov [esi], al
  3068 00001AF9 01D6                <1> 	add esi, edx
  3069 00001AFB 45                  <1> 	inc ebp
  3070 00001AFC FEC9                <1> 	dec cl
  3071 00001AFE 80F900              <1> 	cmp cl, 0
  3072 00001B01 75E8                <1> 	jne nowinfont
  3073 00001B03 C1E204              <1> 	shl edx, 4
  3074 00001B06 29D6                <1> 	sub esi, edx
  3075 00001B08 C1C110              <1> 	rol ecx, 16
  3076                              <1> nopresentwinfont:
  3077 00001B0B 81C702000000        <1> 	add edi, 2
  3078 00001B11 46                  <1> 	inc esi
  3079 00001B12 FEC9                <1> 	dec cl
  3080 00001B14 80F900              <1> 	cmp cl, 0
  3081 00001B17 758B                <1> 	jne nowincopy2
  3082 00001B19 8A0D[33180000]      <1> 	mov cl, [charxy]
  3083 00001B1F 31D2                <1> 	xor edx, edx
  3084 00001B21 88CA                <1> 	mov dl, cl
  3085 00001B23 29D6                <1> 	sub esi, edx
  3086 00001B25 C1E204              <1> 	shl edx, 4
  3087 00001B28 01D6                <1> 	add esi, edx
  3088 00001B2A FECD                <1> 	dec ch
  3089 00001B2C 80FD00              <1> 	cmp ch, 0
  3090 00001B2F 0F856FFFFFFF        <1> 	jne nowincopy2
  3091                              <1> nocopytermatall:
  3092 00001B35 E802000000          <1> 	call switchtermcursor
  3093 00001B3A 61                  <1> 	popa
  3094 00001B3B C3                  <1> 	ret
  3095                              <1> 	
  3096                              <1> switchtermcursor:
  3097 00001B3C 8B3D[311A0000]      <1> 	mov edi, [termcursorpos]
  3098 00001B42 668B4702            <1> 	mov ax, [edi + 2]
  3099 00001B46 668B1F              <1> 	mov bx, [edi]
  3100 00001B49 663D8000            <1> 	cmp ax, 0x80
  3101 00001B4D 7209                <1> 	jb movlargecursorterm
  3102 00001B4F 66B80700            <1> 	mov ax, 7
  3103 00001B53 E904000000          <1> 	jmp movedcursorterm
  3104                              <1> movlargecursorterm:
  3105 00001B58 66B8F000            <1> 	mov ax, 0xF0
  3106                              <1> movedcursorterm:
  3107 00001B5C 66894702            <1> 	mov [edi + 2], ax
  3108 00001B60 6681FB0000          <1> 	cmp bx, 0
  3109 00001B65 7507                <1> 	jne fixednocursorterm
  3110 00001B67 66BB2000            <1> 	mov bx, ' '
  3111 00001B6B 66891F              <1> 	mov [edi], bx
  3112                              <1> fixednocursorterm:
  3113 00001B6E C3                  <1> 	ret
  3114                              <1> %endif
  3115                                      %include "source/dosints.asm"
  3116                              <1> int20h:
  3117 00001B6F 66B8004C            <1> mov ax, 0x4C00
  3118                              <1> int21h:
  3119                              <1> dostosolleros:
  3120 00001B73 6650                <1> 	push ax
  3121 00001B75 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3122 00001B79 8ED8                <1> 	mov ds, ax
  3123 00001B7B 8EC0                <1> 	mov es, ax
  3124 00001B7D 8EE0                <1> 	mov fs, ax
  3125 00001B7F 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3126 00001B83 8EE8                <1> 	mov gs, ax
  3127 00001B85 6658                <1> 	pop ax
  3128 00001B87 9C                  <1> 	pushf
  3129 00001B88 60                  <1> 	pusha
  3130 00001B89 80FC01              <1> 	cmp ah, 1
  3131 00001B8C 0F8449000000        <1> 	je near dosgchar
  3132 00001B92 80FC02              <1> 	cmp ah, 2
  3133 00001B95 0F8447000000        <1> 	je near doswchar
  3134 00001B9B 80FC09              <1> 	cmp ah, 9
  3135 00001B9E 0F8449000000        <1> 	je near dosprintstr
  3136 00001BA4 80FC0A              <1> 	cmp ah, 0xA
  3137 00001BA7 0F8456000000        <1> 	je near dosgetstr
  3138 00001BAD 80FC2B              <1> 	cmp ah, 0x2B
  3139 00001BB0 0F8492000000        <1> 	je near dosgetdate
  3140 00001BB6 80FC2C              <1> 	cmp ah, 0x2C
  3141 00001BB9 0F84AC000000        <1> 	je near dosgettime
  3142 00001BBF 80FC4C              <1> 	cmp ah, 0x4C
  3143 00001BC2 0F84C1000000        <1> 	je near dosexit
  3144                              <1> backtodos:
  3145 00001BC8 61                  <1> 	popa
  3146 00001BC9 9D                  <1> 	popf
  3147 00001BCA 6650                <1> 	push ax
  3148 00001BCC 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3149 00001BD0 8ED8                <1> 	mov ds, ax
  3150 00001BD2 8EC0                <1> 	mov es, ax
  3151 00001BD4 8EE0                <1> 	mov fs, ax
  3152 00001BD6 8EE8                <1> 	mov gs, ax
  3153 00001BD8 6658                <1> 	pop ax
  3154 00001BDA CF                  <1> 	iret
  3155                              <1> 
  3156                              <1> dosgchar:
  3157 00001BDB E8CDF9FFFF          <1> 	call getchar
  3158 00001BE0 EBE6                <1> 	jmp backtodos
  3159                              <1> 	
  3160                              <1> doswchar:
  3161 00001BE2 88D0                <1> 	mov al, dl
  3162 00001BE4 B307                <1> 	mov bl, 7
  3163 00001BE6 E83EFAFFFF          <1> 	call prcharint
  3164 00001BEB EBDB                <1> 	jmp backtodos
  3165                              <1> 	
  3166                              <1> dosprintstr:
  3167 00001BED 31F6                <1> 	xor esi, esi
  3168 00001BEF 6689D6              <1> 	mov si, dx
  3169 00001BF2 81C600004000        <1> 	add esi, dosprogloc
  3170 00001BF8 B024                <1> 	mov al, "$"
  3171 00001BFA B307                <1> 	mov bl, 7
  3172 00001BFC E8B8F3FFFF          <1> 	call printint
  3173 00001C01 EBC5                <1> 	jmp backtodos
  3174                              <1> 	
  3175                              <1> dosgetstr:
  3176 00001C03 31F6                <1> 	xor esi, esi
  3177 00001C05 6689D6              <1> 	mov si, dx
  3178 00001C08 81C600004000        <1> 	add esi, dosprogloc
  3179 00001C0E B900000000          <1> 	mov ecx, 0
  3180 00001C13 8A0E                <1> 	mov cl, [esi]
  3181 00001C15 81C602000000        <1> 	add esi, 2
  3182 00001C1B 89F7                <1> 	mov edi, esi
  3183 00001C1D 8935[441C0000]      <1> 	mov [stringstart], esi
  3184 00001C23 01CF                <1> 	add edi, ecx
  3185 00001C25 B00A                <1> 	mov al, 10
  3186 00001C27 B307                <1> 	mov bl, 7
  3187 00001C29 E8CBF4FFFF          <1> 	call rdprintdos
  3188 00001C2E 89F1                <1> 	mov ecx, esi
  3189 00001C30 2B0D[441C0000]      <1> 	sub ecx, [stringstart]
  3190 00001C36 8B35[441C0000]      <1> 	mov esi, [stringstart]
  3191 00001C3C 884EFF              <1> 	mov [esi - 1], cl
  3192 00001C3F 884EFE              <1> 	mov [esi - 2], cl
  3193 00001C42 EB84                <1> 	jmp backtodos
  3194 00001C44 00000000            <1> stringstart dd 0
  3195                              <1> 
  3196                              <1> dosgetdate:
  3197 00001C48 E8B7210000          <1> 	call time
  3198 00001C4D 8A0D[CC3F0000]      <1> 	mov cl, [RTCtimeYear]
  3199 00001C53 B500                <1> 	mov ch, 0
  3200 00001C55 6681C1D007          <1> 	add cx, 2000
  3201 00001C5A 8A35[CB3F0000]      <1> 	mov dh, [RTCtimeMonth]
  3202 00001C60 8A15[CA3F0000]      <1> 	mov dl, [RTCtimeDay]
  3203 00001C66 E95DFFFFFF          <1> 	jmp backtodos
  3204                              <1> 
  3205                              <1> dosgettime:
  3206 00001C6B E894210000          <1> 	call time
  3207 00001C70 8A2D[C93F0000]      <1> 	mov ch, [RTCtimeHour]
  3208 00001C76 8A0D[C83F0000]      <1> 	mov cl, [RTCtimeMinute]
  3209 00001C7C 8A35[C73F0000]      <1> 	mov dh, [RTCtimeSecond]
  3210 00001C82 B200                <1> 	mov dl, 0
  3211 00001C84 E93FFFFFFF          <1> 	jmp backtodos
  3212                              <1> 	
  3213                              <1> dosexit:
  3214 00001C89 BE[CB710000]        <1> 	mov esi, line
  3215 00001C8E E81FF3FFFF          <1> 	call print
  3216 00001C93 61                  <1> 	popa
  3217 00001C94 9D                  <1> 	popf
  3218 00001C95 8B25[508A0300]      <1> 	mov esp, [previousstack]
  3219 00001C9B 31DB                <1> 	xor ebx, ebx
  3220 00001C9D 88C3                <1> 	mov bl, al
  3221 00001C9F 80FB00              <1> 	cmp bl, 0
  3222 00001CA2 0F8595F2FFFF        <1> 	jne near exitprog.error
  3223 00001CA8 C3                  <1> 	ret
  3224                                      %include "source/solleros.asm"
  3225                              <1> 	;SOLLEROS.ASM
  3226                              <1> os:
  3227                              <1> setdefenv:
  3228 00001CA9 B02F                <1> 	mov al, '/'
  3229 00001CAB A2[5C8A0300]        <1> 	mov [currentfolder], al
  3230 00001CB0 B801000000          <1> 	mov eax, 1
  3231 00001CB5 A3[588A0300]        <1> 	mov [currentfolderloc], eax
  3232 00001CBA E8A2F3FFFF          <1> 	call clear
  3233                              <1> 	
  3234                              <1> bootfilecheck:
  3235 00001CBF 803D[608C0300]01    <1> 	cmp byte [ranboot], 1
  3236 00001CC6 0F841C000000        <1> 	je near nobootfile
  3237                              <1> 	%ifdef hardware.automatic
  3238                              <1> 		call initializelater ;Initialize components that have debug messages
  3239                              <1> 	%endif
  3240 00001CCC BF[8A710000]        <1> 	mov edi, bootfilename
  3241 00001CD1 BE00004000          <1> 	mov esi, 0x400000
  3242 00001CD6 E86D360000          <1> 	call loadfile
  3243 00001CDB 81FA00000000        <1> 	cmp edx, 0
  3244 00001CE1 7505                <1> 	jne nobootfile
  3245 00001CE3 E8B20D0000          <1> 	call progbatchfound
  3246                              <1> nobootfile:	
  3247 00001CE8 C605[608C0300]01    <1> 	mov byte [ranboot], 1
  3248                              <1> 
  3249 00001CEF BE[03000000]        <1> 	mov esi, signature
  3250                              <1> .sigcopyloop:	;this prevents an odd error
  3251 00001CF4 658A06              <1> 	mov al, [gs:esi]
  3252 00001CF7 8806                <1> 	mov [esi], al
  3253 00001CF9 46                  <1> 	inc esi
  3254 00001CFA 81FE[1D000000]      <1> 	cmp esi, signatureend
  3255 00001D00 72F2                <1> 	jb .sigcopyloop
  3256                              <1> 	
  3257 00001D02 BE[03000000]        <1> 	mov esi, signature
  3258 00001D07 E8A6F2FFFF          <1> 	call print
  3259 00001D0C 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3260 00001D12 E8F6060000          <1> 	call showdec
  3261 00001D17 BE[CB710000]        <1> 	mov esi, line
  3262 00001D1C E891F2FFFF          <1> 	call print
  3263 00001D21 BE[A7710000]        <1> 	mov esi, userask
  3264 00001D26 E887F2FFFF          <1> 	call print
  3265                              <1> usercheck:
  3266 00001D2B BE[D0A00300]        <1> 	mov esi, buftxt
  3267 00001D30 BF[D0A40300]        <1> 	mov edi, buftxtend
  3268 00001D35 B00A                <1> 	mov al, 10
  3269 00001D37 E8A9F3FFFF          <1> 	call rdprint
  3270 00001D3C 56                  <1> 	push esi
  3271 00001D3D BE[B1710000]        <1> 	mov esi, pwdask
  3272 00001D42 E86BF2FFFF          <1> 	call print
  3273 00001D47 5E                  <1> 	pop esi
  3274 00001D48 46                  <1> 	inc esi
  3275 00001D49 8935[3E1E0000]      <1> 	mov [esipass], esi
  3276                              <1> passcheck:
  3277 00001D4F E859F8FFFF          <1> 	call getchar
  3278 00001D54 3C0A                <1> 	cmp al, 10
  3279 00001D56 0F8438000000        <1> 	je near gotpass
  3280 00001D5C 3C08                <1> 	cmp al, 8
  3281 00001D5E 0F8412000000        <1> 	je near backpass
  3282 00001D64 8806                <1> 	mov [esi], al
  3283 00001D66 46                  <1> 	inc esi
  3284 00001D67 30E4                <1> 	xor ah, ah
  3285 00001D69 B02A                <1> 	mov al, "*"
  3286 00001D6B E8B9F8FFFF          <1> 	call prcharint
  3287 00001D70 EBDD                <1> 	jmp passcheck
  3288 00001D72 08200800            <1> backcursor2 db 8," ",8,0
  3289                              <1> backpass:
  3290 00001D76 3B35[3E1E0000]      <1> 	cmp esi, [esipass]
  3291 00001D7C 0F84CDFFFFFF        <1> 	je near passcheck
  3292 00001D82 4E                  <1> 	dec esi
  3293 00001D83 C60600              <1> 	mov byte [esi], 0
  3294 00001D86 56                  <1> 	push esi
  3295 00001D87 BE[721D0000]        <1> 	mov esi, backcursor2
  3296 00001D8C E821F2FFFF          <1> 	call print
  3297 00001D91 5E                  <1> 	pop esi
  3298 00001D92 EBBB                <1> 	jmp passcheck
  3299                              <1> gotpass:
  3300 00001D94 B00A                <1> 	mov al, 10
  3301 00001D96 E88EF8FFFF          <1> 	call prcharint
  3302 00001D9B 30C0                <1> 	xor al, al
  3303 00001D9D 31C9                <1> 	xor ecx, ecx
  3304 00001D9F 8806                <1> 	mov [esi], al
  3305 00001DA1 BB[CD710000]        <1> 	mov ebx, userlst
  3306                              <1> userfind:
  3307 00001DA6 BE[D0A00300]        <1> 	mov esi, buftxt
  3308 00001DAB 8A06                <1> 	mov al, [esi]
  3309 00001DAD 3C00                <1> 	cmp al, 0
  3310 00001DAF 0F84F4FEFFFF        <1> 	je near os
  3311 00001DB5 891D[421E0000]      <1> 	mov [usercache], ebx
  3312 00001DBB E860030000          <1> 	call tester
  3313 00001DC0 3C01                <1> 	cmp al, 1
  3314 00001DC2 7416                <1> 	je pwdtest
  3315 00001DC4 41                  <1> 	inc ecx
  3316                              <1> nxtuser:
  3317 00001DC5 8A03                <1> 	mov al, [ebx]
  3318 00001DC7 43                  <1> 	inc ebx
  3319 00001DC8 3C00                <1> 	cmp al, 0
  3320 00001DCA 75F9                <1> 	jne nxtuser
  3321 00001DCC 81FB[F0710000]      <1> 	cmp ebx, userlstend
  3322 00001DD2 0F83D1FEFFFF        <1> 	jae near os
  3323 00001DD8 EBCC                <1> 	jmp userfind
  3324                              <1> pwdtest:
  3325 00001DDA 46                  <1> 	inc esi
  3326 00001DDB 43                  <1> 	inc ebx
  3327 00001DDC E83F030000          <1> 	call tester
  3328 00001DE1 3C01                <1> 	cmp al, 1
  3329 00001DE3 7402                <1> 	je pwdrgt
  3330 00001DE5 EBDE                <1> 	jmp nxtuser
  3331                              <1> pwdrgt:
  3332 00001DE7 D1E9                <1> 	shr ecx, 1
  3333 00001DE9 890D[5C8C0300]      <1> 	mov [uid], ecx
  3334 00001DEF E86DF2FFFF          <1> 	call clear
  3335 00001DF4 31C9                <1> 	xor ecx, ecx
  3336 00001DF6 41                  <1> 	inc ecx
  3337 00001DF7 890D[7A520500]      <1> 	mov [commandbufpos], ecx
  3338                              <1> returnfromexp:
  3339 00001DFD 66B90002            <1> 	mov cx, 200h
  3340 00001E01 BE[D0A00300]        <1> 	mov esi, buftxt
  3341 00001E06 8935[1C210000]      <1> 	mov [currentcommandloc], esi
  3342 00001E0C E825000000          <1> 	call bufclr
  3343                              <1> clearolddata:
  3344 00001E11 31C0                <1> 	xor eax, eax
  3345 00001E13 A2[618C0300]        <1> 	mov [IFON], al
  3346 00001E18 A2[628C0300]        <1> 	mov [IFTRUE], al
  3347 00001E1D A2[CA8C0300]        <1> 	mov [BATCHISON], al
  3348 00001E22 A3[C68C0300]        <1> 	mov [BATCHPOS], eax
  3349 00001E27 A2[CB8C0300]        <1> 	mov [LOOPON], al
  3350 00001E2C A3[CC8C0300]        <1> 	mov [LOOPPOS], eax
  3351 00001E31 E933000000          <1> 	jmp nwcmd
  3352                              <1> bufclr:	
  3353 00001E36 30C0                <1> 	xor al, al
  3354 00001E38 8806                <1> 	mov [esi], al
  3355 00001E3A 46                  <1> 	inc esi
  3356 00001E3B E2F9                <1> 	loop bufclr
  3357 00001E3D C3                  <1> 	ret
  3358                              <1> 
  3359 00001E3E 00000000            <1> esipass dd 0
  3360 00001E42 [CD710000]          <1> usercache dd userlst
  3361                              <1> 	
  3362                              <1> buftxtclear:
  3363 00001E46 30C0                <1> 	xor al, al
  3364 00001E48 BE[D0A00300]        <1> 	mov esi, buftxt
  3365 00001E4D 81FE[D0A40300]      <1> clearbuftxt: cmp esi, buf2
  3366 00001E53 730E                <1> 	jae retbufclr
  3367 00001E55 8806                <1> 	mov [esi], al
  3368 00001E57 46                  <1> 	inc esi
  3369 00001E58 EBF3                <1> 	jmp clearbuftxt
  3370                              <1> 
  3371 00001E5A 39DE                <1> clearitbuf: cmp esi, ebx
  3372 00001E5C 7305                <1> 	jae retbufclr
  3373 00001E5E 8806                <1> 	mov [esi], al
  3374 00001E60 46                  <1> 	inc esi
  3375 00001E61 EBF7                <1> 	jmp clearitbuf
  3376 00001E63 C3                  <1> retbufclr: ret
  3377                              <1> 
  3378 00001E64 E900000000          <1> full:	jmp nwcmd
  3379                              <1> 
  3380                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3381                              <1> nwcmd:
  3382 00001E69 FB                  <1> 	sti
  3383 00001E6A 31C0                <1> 	xor eax, eax
  3384 00001E6C 3905[3E200000]      <1> 	cmp [nextcommandloc], eax
  3385 00001E72 7413                <1> 	je nomultiplecommand
  3386 00001E74 8B35[3E200000]      <1> 	mov esi, [nextcommandloc]
  3387 00001E7A 8935[42200000]      <1> 	mov [thiscommandloc], esi
  3388 00001E80 E8C6010000          <1> 	call fixvariables
  3389 00001E85 EBE2                <1> 	jmp nwcmd
  3390                              <1> nomultiplecommand:
  3391 00001E87 A3[42200000]        <1> 	mov [thiscommandloc], eax
  3392 00001E8C 3805[27540000]      <1> 	cmp [threadson], al
  3393 00001E92 7405                <1> 	je noclinwcmd
  3394 00001E94 A2[27540000]        <1> 	mov [threadson], al
  3395                              <1> noclinwcmd:
  3396 00001E99 B001                <1> 	mov al, 1
  3397 00001E9B 3805[CA8C0300]      <1> 	cmp [BATCHISON], al
  3398 00001EA1 7501                <1> 	jne cancel
  3399 00001EA3 C3                  <1> 	ret
  3400 00001EA4 30C0                <1> cancel:	xor al, al
  3401 00001EA6 A2[618C0300]        <1> 	mov [IFON], al
  3402 00001EAB A2[CA8C0300]        <1> 	mov [BATCHISON], al
  3403 00001EB0 B05B                <1> 	mov al, '['
  3404 00001EB2 66BB0700            <1> 	mov bx, 7
  3405 00001EB6 E885F7FFFF          <1> 	call prcharq
  3406 00001EBB 8B35[421E0000]      <1> 	mov esi, [usercache]
  3407 00001EC1 E8CDF0FFFF          <1> 	call printquiet
  3408 00001EC6 BE[BB710000]        <1> 	mov esi, computer
  3409 00001ECB E8C3F0FFFF          <1> 	call printquiet
  3410 00001ED0 BE[5C8A0300]        <1> 	mov esi, currentfolder
  3411 00001ED5 0335[548A0300]      <1> 	add esi, [lastfolderloc]
  3412 00001EDB E8B3F0FFFF          <1> 	call printquiet
  3413 00001EE0 BE[C6710000]        <1> 	mov esi, endprompt
  3414 00001EE5 E8C8F0FFFF          <1> 	call print
  3415 00001EEA E857FFFFFF          <1> 	call buftxtclear
  3416 00001EEF BE[D0A00300]        <1> 	mov esi, buftxt
  3417 00001EF4 C605[96150000]01    <1> 	mov byte [commandedit], 1
  3418 00001EFB B00A                <1> 	mov al, 10
  3419 00001EFD 66BB0700            <1> 	mov bx, 7
  3420 00001F01 BF[D0A40300]        <1> 	mov edi, buftxtend
  3421 00001F06 E8DAF1FFFF          <1> 	call rdprint
  3422 00001F0B C605[96150000]00    <1> 	mov byte [commandedit], 0
  3423 00001F12 803D[D0A00300]00    <1> 	cmp byte [buftxt], 0
  3424 00001F19 0F844AFFFFFF        <1> 	je near nwcmd
  3425 00001F1F 8B35[7A520500]      <1> gotcmd:	mov esi, [commandbufpos]
  3426 00001F25 8935[76520500]      <1> 	mov [lastcommandpos], esi
  3427 00001F2B FF05[82520500]      <1> 	inc dword [commandsentered]
  3428 00001F31 BF[D0A00300]        <1> 	mov edi, buftxt
  3429 00001F36 81C6[86520500]      <1> 	add esi, commandbuf
  3430 00001F3C 81FE[86620500]      <1> 	cmp esi, commandbufend
  3431 00001F42 7605                <1> 	jbe copycommand
  3432 00001F44 BE[86520500]        <1> 	mov esi, commandbuf
  3433                              <1> copycommand:
  3434 00001F49 8A07                <1> 	mov al, [edi]
  3435 00001F4B 8806                <1> 	mov [esi], al
  3436 00001F4D 47                  <1> 	inc edi
  3437 00001F4E 46                  <1> 	inc esi
  3438 00001F4F 3C00                <1> 	cmp al, 0
  3439 00001F51 740F                <1> 	je donecopy
  3440 00001F53 81FE[86620500]      <1> 	cmp esi, commandbufend
  3441 00001F59 76EE                <1> 	jbe copycommand
  3442 00001F5B BE[86520500]        <1> 	mov esi, commandbuf
  3443 00001F60 EBE7                <1> 	jmp copycommand
  3444                              <1> donecopy:
  3445 00001F62 81EE[86520500]      <1> 	sub esi, commandbuf
  3446 00001F68 8935[7A520500]      <1> 	mov [commandbufpos], esi
  3447 00001F6E E8D3000000          <1> 	call run
  3448 00001F73 E9F1FEFFFF          <1> 	jmp nwcmd
  3449                              <1> 
  3450 00001F78 E8C9FEFFFF          <1> input:	call buftxtclear
  3451 00001F7D BE[D0A00300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3452 00001F82 BF[D0A40300]        <1> 	mov edi, buftxtend
  3453 00001F87 B00A                <1> stdin:	mov al, 10
  3454 00001F89 B307                <1> 	mov bl, 7
  3455 00001F8B E855F1FFFF          <1> 	call rdprint
  3456 00001F90 C3                  <1> 	ret
  3457                              <1> 
  3458                              <1> replacevariable:
  3459 00001F91 8A4601              <1> 	mov al, [esi + 1]
  3460 00001F94 C64601FF            <1> 	mov byte [esi + 1], 255
  3461 00001F98 3C24                <1> 	cmp al, "$"
  3462 00001F9A 0F84AB000000        <1> 	je near fixvariables
  3463 00001FA0 884601              <1> 	mov [esi + 1], al
  3464 00001FA3 56                  <1> 	push esi
  3465 00001FA4 81EE[D0A00300]      <1> 	sub esi, buftxt
  3466 00001FAA 89F7                <1> 	mov edi, esi
  3467 00001FAC 81C6[D0A00300]      <1> 	add esi, buftxt
  3468 00001FB2 47                  <1> 	inc edi
  3469 00001FB3 BB[D08C0300]        <1> 	mov ebx, variables
  3470 00001FB8 E895120000          <1> 	call nxtvrech
  3471 00001FBD 89F7                <1> 	mov edi, esi
  3472 00001FBF 31DB                <1> 	xor ebx, ebx
  3473 00001FC1 4E                  <1> 	dec esi
  3474                              <1> findvarname:
  3475 00001FC2 4E                  <1> 	dec esi
  3476 00001FC3 8A06                <1> 	mov al, [esi]
  3477 00001FC5 43                  <1> 	inc ebx
  3478 00001FC6 3C04                <1> 	cmp al, 4
  3479 00001FC8 75F8                <1> 	jne findvarname
  3480 00001FCA 5E                  <1> 	pop esi
  3481                              <1> replacevarloop:
  3482 00001FCB 8A07                <1> 	mov al, [edi]
  3483 00001FCD 3C00                <1> 	cmp al, 0
  3484 00001FCF 0F8413000000        <1> 	je near compressbuftxt
  3485 00001FD5 81FB00000000        <1> 	cmp ebx, 0
  3486 00001FDB 0F8416000000        <1> 	je near expandbuftxt
  3487 00001FE1 8806                <1> 	mov [esi], al
  3488 00001FE3 4B                  <1> 	dec ebx
  3489 00001FE4 46                  <1> 	inc esi
  3490 00001FE5 47                  <1> 	inc edi
  3491 00001FE6 EBE3                <1> 	jmp replacevarloop
  3492                              <1> compressbuftxt:
  3493 00001FE8 8A041E              <1> 	mov al, [esi + ebx]
  3494 00001FEB 8806                <1> 	mov [esi], al
  3495 00001FED 46                  <1> 	inc esi
  3496 00001FEE 3C00                <1> 	cmp al, 0
  3497 00001FF0 75F6                <1> 	jne compressbuftxt
  3498 00001FF2 E954000000          <1> 	jmp fixvariables
  3499                              <1> expandbuftxt:
  3500 00001FF7 89F1                <1> 	mov ecx, esi
  3501 00001FF9 8A26                <1> 	mov ah, [esi]
  3502                              <1> expandbuftxtlp:
  3503 00001FFB 8A1E                <1> 	mov bl, [esi]
  3504 00001FFD 46                  <1> 	inc esi
  3505 00001FFE 8A3E                <1> 	mov bh, [esi]
  3506 00002000 8826                <1> 	mov [esi], ah
  3507 00002002 88FC                <1> 	mov ah, bh
  3508 00002004 80FB00              <1> 	cmp bl, 0
  3509 00002007 75F2                <1> 	jne expandbuftxtlp
  3510 00002009 89CE                <1> 	mov esi, ecx
  3511 0000200B 8806                <1> 	mov [esi], al
  3512 0000200D 47                  <1> 	inc edi
  3513 0000200E 8A07                <1> 	mov al, [edi]
  3514 00002010 3C00                <1> 	cmp al, 0
  3515 00002012 0F8433000000        <1> 	je near fixvariables
  3516 00002018 46                  <1> 	inc esi
  3517 00002019 EBDC                <1> 	jmp expandbuftxt
  3518                              <1> multipleprogline:
  3519 0000201B 30E4                <1> 	xor ah, ah
  3520 0000201D 8826                <1> 	mov [esi], ah
  3521 0000201F 46                  <1> 	inc esi
  3522 00002020 8935[3E200000]      <1> 	mov [nextcommandloc], esi
  3523 00002026 E93E000000          <1> 	jmp donefixvariables
  3524                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3525 0000202B 46                  <1> 	inc esi
  3526 0000202C 8A06                <1> 	mov al, [esi]
  3527 0000202E C606FF              <1> 	mov byte [esi], 255
  3528 00002031 3C23                <1> 	cmp al, '#'
  3529 00002033 7416                <1> 	je fixvariables
  3530 00002035 4E                  <1> 	dec esi
  3531 00002036 C60600              <1> 	mov byte [esi], 0
  3532 00002039 E90D000000          <1> 	jmp fixvariables
  3533                              <1> 	
  3534 0000203E 00000000            <1> nextcommandloc dd 0
  3535 00002042 00000000            <1> thiscommandloc dd 0	
  3536                              <1> run:
  3537 00002046 BE[D0A00300]        <1> 	mov esi, buftxt
  3538 0000204B 46                  <1> fixvariables:	inc esi
  3539 0000204C 8A06                <1> 	mov al, [esi]
  3540 0000204E 3C23                <1> 	cmp al, '#'	;inline comment
  3541 00002050 74D9                <1> 	je inlinecomment
  3542 00002052 3C24                <1> 	cmp al, '$' ;variable
  3543 00002054 0F8437FFFFFF        <1> 	je near replacevariable
  3544 0000205A 3C3B                <1> 	cmp al, ';' ;program list
  3545 0000205C 74BD                <1> 	je multipleprogline
  3546 0000205E 3C00                <1> 	cmp al, 0
  3547 00002060 75E9                <1> 	jne fixvariables
  3548 00002062 31C0                <1> 	xor eax, eax
  3549 00002064 A3[3E200000]        <1> 	mov [nextcommandloc], eax
  3550                              <1> donefixvariables:
  3551 00002069 803D[07260000]00    <1> 	cmp byte [indexdone], 0
  3552 00002070 7505                <1> 	jne progtest
  3553 00002072 E8FB040000          <1> 	call indexfiles
  3554                              <1> progtest:
  3555 00002077 31C0                <1> 	xor eax, eax
  3556 00002079 BB[50860300]        <1> 	mov ebx, fileindex
  3557 0000207E 668B03              <1> prgnxt:	mov ax, [ebx]
  3558 00002081 B1FF                <1> 	mov cl, 255
  3559 00002083 B52C                <1> 	mov ch, 44
  3560 00002085 6639C8              <1> 	cmp ax, cx
  3561 00002088 740B                <1> 	je fndprg
  3562 0000208A 43                  <1> 	inc ebx
  3563 0000208B 81FB[508A0300]      <1> 	cmp ebx, fileindexend
  3564 00002091 735D                <1> 	jae prgnf
  3565 00002093 EBE9                <1> 	jmp prgnxt
  3566 00002095 81C302000000        <1> fndprg: add ebx, 2
  3567 0000209B 31C9                <1> 	xor ecx, ecx
  3568 0000209D BE[D0A00300]        <1> 	mov esi, buftxt
  3569 000020A2 390D[42200000]      <1> 	cmp [thiscommandloc], ecx
  3570 000020A8 7406                <1> 	je noprgtstmultiple
  3571 000020AA 8B35[42200000]      <1> 	mov esi, [thiscommandloc]
  3572                              <1> noprgtstmultiple:
  3573 000020B0 E8A6000000          <1> 	call cndtest
  3574 000020B5 3C01                <1> 	cmp al, 1
  3575 000020B7 7302                <1> 	jae prggood
  3576 000020B9 EBC3                <1> 	jmp prgnxt
  3577 000020BB 81FB[508A0300]      <1> prggood: cmp ebx, fileindexend
  3578 000020C1 7358                <1> 	jae prgdn
  3579 000020C3 31C0                <1> 	xor eax, eax
  3580 000020C5 BE[D0A00300]        <1> 	mov esi, buftxt
  3581 000020CA 3905[42200000]      <1> 	cmp [thiscommandloc], eax
  3582 000020D0 7406                <1> 	je noprggoodmul
  3583 000020D2 8B35[42200000]      <1> 	mov esi, [thiscommandloc]
  3584                              <1> noprggoodmul:
  3585 000020D8 8935[1C210000]      <1> 	mov [currentcommandloc], esi
  3586 000020DE 81C303000000        <1> 	add ebx, 3
  3587 000020E4 8B3B                <1> 	mov edi, [ebx]
  3588 000020E6 C605[27540000]02    <1> 	mov byte [threadson], 2
  3589 000020ED FFD7                <1> 	call edi
  3590 000020EF C3                  <1> 	ret
  3591                              <1> prgnf:	
  3592 000020F0 8B35[1C210000]      <1> 	mov esi, [currentcommandloc]
  3593 000020F6 8A06                <1> 	mov al, [esi]
  3594 000020F8 3C00                <1> 	cmp al, 0
  3595 000020FA 741F                <1> 	je prgdn
  3596 000020FC BE[92710000]        <1> 	mov esi, notfound1
  3597 00002101 E8ACEEFFFF          <1> 	call print
  3598 00002106 8B35[1C210000]      <1> 	mov esi, [currentcommandloc]
  3599 0000210C E8A1EEFFFF          <1> 	call print
  3600 00002111 BE[9A710000]        <1> 	mov esi, notfound2
  3601 00002116 E897EEFFFF          <1> 	call print
  3602 0000211B C3                  <1> prgdn:	ret
  3603                              <1> 
  3604 0000211C 00000000            <1> currentcommandloc dd 0
  3605                              <1> 
  3606                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3607 00002120 6631C0              <1> 	xor ax, ax
  3608 00002123 8A06                <1> retest:	mov al, [esi]
  3609 00002125 8A23                <1> 	mov ah, [ebx]
  3610 00002127 3C00                <1> 	cmp al, 0
  3611 00002129 7408                <1> 	je testtrue
  3612 0000212B 38E0                <1> 	cmp al, ah
  3613 0000212D 750C                <1> 	jne testfalse
  3614 0000212F 43                  <1> 	inc ebx
  3615 00002130 46                  <1> 	inc esi
  3616 00002131 EBF0                <1> 	jmp retest
  3617                              <1> testtrue:
  3618 00002133 80FC00              <1> 	cmp ah, 0
  3619 00002136 7503                <1> 	jne testfalse
  3620 00002138 B001                <1> 	mov al, 1
  3621 0000213A C3                  <1> 	ret
  3622                              <1> testfalse:
  3623 0000213B 30C0                <1> 	xor al, al
  3624 0000213D C3                  <1> 	ret
  3625                              <1> 
  3626                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3627 0000213E 30C0                <1> 	xor al, al
  3628                              <1> opretest:
  3629 00002140 8A06                <1> 	mov al, [esi]
  3630 00002142 8A23                <1> 	mov ah, [ebx]
  3631 00002144 38E0                <1> 	cmp al, ah
  3632 00002146 7510                <1> 	jne optestfalse
  3633 00002148 80FC00              <1> 	cmp ah, 0
  3634 0000214B 7404                <1> 	je optesttrue
  3635 0000214D 43                  <1> 	inc ebx
  3636 0000214E 46                  <1> 	inc esi
  3637 0000214F EBEF                <1> 	jmp opretest
  3638                              <1> optesttrue:
  3639 00002151 3C00                <1> 	cmp al, 0
  3640 00002153 7503                <1> 	jne optestfalse
  3641 00002155 B001                <1> 	mov al, 1
  3642 00002157 C3                  <1> 	ret
  3643                              <1> optestfalse:
  3644 00002158 30C0                <1> 	xor al, al
  3645 0000215A C3                  <1> 	ret
  3646                              <1> 
  3647                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3648 0000215B 30C0                <1> 	xor al, al
  3649 0000215D 8A06                <1> cndretest:	mov al, [esi]
  3650 0000215F 8A23                <1> 	mov ah, [ebx]
  3651 00002161 38CC                <1> 	cmp ah, cl
  3652 00002163 7408                <1> 	je cndtesttrue
  3653 00002165 38E0                <1> 	cmp al, ah
  3654 00002167 750B                <1> 	jne cndtestfalse
  3655 00002169 43                  <1> 	inc ebx
  3656 0000216A 46                  <1> 	inc esi
  3657 0000216B EBF0                <1> 	jmp cndretest
  3658                              <1> cndtesttrue:
  3659 0000216D 38C8                <1> 	cmp al, cl
  3660 0000216F 7506                <1> 	jne cndtestalmost
  3661 00002171 B001                <1> 	mov al, 1
  3662 00002173 C3                  <1> 	ret
  3663                              <1> cndtestfalse:
  3664 00002174 30C0                <1> 	xor al, al
  3665 00002176 C3                  <1> 	ret
  3666                              <1> cndtestalmost:
  3667 00002177 B002                <1> 	mov al, 2
  3668 00002179 C3                  <1> 	ret
  3669                              <1> 	
  3670                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3671                              <1> 		                ;ends if array seperator is found backwards after 0
  3672                              <1> 	arnxt:	      
  3673 0000217A 88E8                <1> 		mov al, ch
  3674 0000217C 88CC                <1> 		mov ah, cl        
  3675 0000217E 663906              <1> 		cmp [esi], ax
  3676 00002181 744D                <1> 		je ardn
  3677 00002183 66390E              <1> 		cmp [esi], cx
  3678 00002186 7407                <1> 		je arfnd
  3679 00002188 46                  <1> 		inc esi
  3680 00002189 39DE                <1> 		cmp esi, ebx
  3681 0000218B 7343                <1> 		jae ardn
  3682 0000218D EBEB                <1> 		jmp arnxt
  3683 0000218F 81C602000000        <1> 	arfnd: add esi, 2
  3684 00002195 891D[D1210000]      <1> 		mov [arbx], ebx
  3685 0000219B 890D[D5210000]      <1> 		mov [arcx], ecx
  3686 000021A1 E80CEEFFFF          <1> 		call print
  3687 000021A6 8935[D7210000]      <1> 		mov [arsi], esi
  3688 000021AC BE[CB710000]        <1> 		mov esi, line
  3689 000021B1 E8FCEDFFFF          <1> 		call print
  3690 000021B6 8B1D[D1210000]      <1> 		mov ebx, [arbx]
  3691 000021BC 668B0D[D5210000]    <1> 		mov cx, [arcx]
  3692 000021C3 8B35[D7210000]      <1> 		mov esi, [arsi]
  3693 000021C9 46                  <1> 		inc esi
  3694 000021CA 39DE                <1> 		cmp esi, ebx
  3695 000021CC 7302                <1> 		jae ardn
  3696 000021CE EBAA                <1> 		jmp arnxt
  3697 000021D0 C3                  <1> 	ardn:	ret
  3698 000021D1 00000000            <1> arbx:	dw 0,0
  3699 000021D5 0000                <1> arcx:	db 0,0
  3700 000021D7 00000000            <1> arsi:	dw 0,0
  3701                              <1> 
  3702                              <1> clearbuffer:
  3703 000021DB BE[D0A40300]        <1> 	mov esi, buf2
  3704 000021E0 B030                <1> 	mov al, '0'
  3705 000021E2 81FE[E4A40300]      <1> clearbuf: cmp esi, numbuf
  3706 000021E8 7305                <1> 	jae doneclearbuff
  3707 000021EA 8806                <1> 	mov [esi], al
  3708 000021EC 46                  <1> 	inc esi
  3709 000021ED EBF3                <1> 	jmp clearbuf
  3710                              <1> doneclearbuff: 
  3711 000021EF C3                  <1> 		ret
  3712                              <1> 
  3713                              <1> convert:
  3714 000021F0 4E                  <1> 	dec esi
  3715 000021F1 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3716                              <1> .lp:
  3717 000021F3 89DE                <1> 	mov esi, ebx
  3718 000021F5 81EE09000000        <1> 	sub esi, 9
  3719 000021FB 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3720 00002201 720A                <1> 	jb .8
  3721 00002203 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3722 00002209 FE06                <1> 	inc byte [esi]
  3723 0000220B EBE6                <1> 	jmp .lp
  3724 0000220D 46                  <1> .8:	inc esi
  3725 0000220E 81F900E1F505        <1> 	cmp ecx, 100000000
  3726 00002214 720A                <1> 	jb .7
  3727 00002216 81E900E1F505        <1> 	sub ecx, 100000000
  3728 0000221C FE06                <1> 	inc byte [esi]
  3729 0000221E EBD3                <1> 	jmp .lp
  3730 00002220 46                  <1> .7:	inc esi
  3731 00002221 81F980969800        <1> 	cmp ecx, 10000000
  3732 00002227 720A                <1> 	jb .6
  3733 00002229 81E980969800        <1> 	sub ecx, 10000000
  3734 0000222F FE06                <1> 	inc byte [esi]
  3735 00002231 EBC0                <1> 	jmp .lp
  3736 00002233 46                  <1> .6:	inc esi
  3737 00002234 81F940420F00        <1> 	cmp ecx, 1000000
  3738 0000223A 720A                <1> 	jb .5
  3739 0000223C 81E940420F00        <1> 	sub ecx, 1000000
  3740 00002242 FE06                <1> 	inc byte [esi]
  3741 00002244 EBAD                <1> 	jmp .lp
  3742 00002246 46                  <1> .5:	inc esi
  3743 00002247 81F9A0860100        <1> 	cmp ecx, 100000
  3744 0000224D 720A                <1> 	jb .4
  3745 0000224F 81E9A0860100        <1> 	sub ecx, 100000
  3746 00002255 FE06                <1> 	inc byte [esi]
  3747 00002257 EB9A                <1> 	jmp .lp
  3748 00002259 46                  <1> .4:	inc esi
  3749 0000225A 81F910270000        <1> 	cmp ecx, 10000
  3750 00002260 720A                <1> 	jb .3
  3751 00002262 81E910270000        <1> 	sub ecx, 10000
  3752 00002268 FE06                <1> 	inc byte [esi]
  3753 0000226A EB87                <1> 	jmp .lp
  3754 0000226C 46                  <1> .3:	inc esi
  3755 0000226D 81F9E8030000        <1> 	cmp ecx, 1000
  3756 00002273 720D                <1> 	jb .2
  3757 00002275 81E9E8030000        <1> 	sub ecx, 1000
  3758 0000227B FE06                <1> 	inc byte [esi]
  3759 0000227D E971FFFFFF          <1> 	jmp .lp
  3760 00002282 46                  <1> .2:	inc esi
  3761 00002283 81F964000000        <1> 	cmp ecx, 100
  3762 00002289 720D                <1> 	jb .1
  3763 0000228B 81E964000000        <1> 	sub ecx, 100
  3764 00002291 FE06                <1> 	inc byte [esi]
  3765 00002293 E95BFFFFFF          <1> 	jmp .lp
  3766 00002298 46                  <1> .1:	inc esi
  3767 00002299 81F90A000000        <1> 	cmp ecx, 10
  3768 0000229F 720D                <1> 	jb .0
  3769 000022A1 81E90A000000        <1> 	sub ecx, 10
  3770 000022A7 FE06                <1> 	inc byte [esi]
  3771 000022A9 E945FFFFFF          <1> 	jmp .lp
  3772 000022AE 46                  <1> .0:	inc esi
  3773 000022AF 81F901000000        <1> 	cmp ecx, 1
  3774 000022B5 720D                <1> 	jb .dn
  3775 000022B7 81E901000000        <1> 	sub ecx, 1
  3776 000022BD FE06                <1> 	inc byte [esi]
  3777 000022BF E92FFFFFFF          <1> 	jmp .lp
  3778                              <1> .dn:
  3779 000022C4 C3                  <1> 	ret
  3780                              <1> 
  3781                              <1> 	
  3782                              <1> 
  3783 000022C5 00<rept>            <1> hexnumber times 8 db 0
  3784 000022CD 202000              <1> hexnumberend db "  ",0
  3785                              <1> 
  3786                              <1> converthex:
  3787                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3788 000022D0 56                  <1> 	push esi
  3789 000022D1 B030                <1> 	mov al, "0"
  3790 000022D3 39FE                <1> .clearlp: cmp esi, edi
  3791 000022D5 7305                <1> 	jae .doneclear
  3792 000022D7 8806                <1> 	mov [esi], al
  3793 000022D9 46                  <1> 	inc esi
  3794 000022DA EBF7                <1> 	jmp .clearlp
  3795                              <1> .doneclear:
  3796 000022DC 81EE02000000        <1> 	sub esi, 2
  3797 000022E2 89C8                <1> 	mov eax, ecx
  3798                              <1> .loop:
  3799 000022E4 30FF                <1> 	xor bh, bh
  3800 000022E6 88C3                <1> 	mov bl, al
  3801 000022E8 66C1E304            <1> 	shl bx, 4
  3802 000022EC C0EB04              <1> 	shr bl, 4
  3803 000022EF 86DF                <1> 	xchg bl, bh ;they are backwards
  3804 000022F1 80C330              <1> 	add bl, 48
  3805 000022F4 80FB39              <1> 	cmp bl, "9"
  3806 000022F7 7609                <1> 	jbe .goodbl
  3807 000022F9 80EB30              <1> 	sub bl, 48
  3808 000022FC 80EB0A              <1> 	sub bl, 0xA
  3809 000022FF 80C341              <1> 	add bl, "A"
  3810                              <1> .goodbl:
  3811 00002302 80C730              <1> 	add bh, 48
  3812 00002305 80FF39              <1> 	cmp bh, "9"
  3813 00002308 7609                <1> 	jbe .goodbh
  3814 0000230A 80EF30              <1> 	sub bh, 48
  3815 0000230D 80EF0A              <1> 	sub bh, 0xA
  3816 00002310 80C741              <1> 	add bh, "A"
  3817                              <1> .goodbh:
  3818 00002313 C1E808              <1> 	shr eax, 8
  3819 00002316 66891E              <1> 	mov [esi], bx
  3820 00002319 81EE02000000        <1> 	sub esi, 2
  3821 0000231F 3B3424              <1> 	cmp esi, [esp]
  3822 00002322 7207                <1> 	jb .done
  3823 00002324 3D00000000          <1> 	cmp eax, 0
  3824 00002329 75B9                <1> 	jne .loop
  3825                              <1> .done:
  3826 0000232B 5E                  <1> 	pop esi
  3827 0000232C C3                  <1> 	ret
  3828                              <1> 	
  3829                              <1> 	
  3830 0000232D 00                  <1> smallhex db 0
  3831 0000232E 01                  <1> firsthexshown db 1
  3832                              <1> showhexsmall:
  3833 0000232F C605[2D230000]01    <1> 	mov byte [smallhex], 1
  3834 00002336 E808000000          <1> 	call showhex
  3835 0000233B C605[2D230000]00    <1> 	mov byte [smallhex], 0
  3836 00002342 C3                  <1> 	ret
  3837                              <1> showhex:
  3838 00002343 60                  <1> 	pusha
  3839 00002344 BE[C5220000]        <1> 	mov esi, hexnumber
  3840 00002349 BF[CD220000]        <1> 	mov edi, hexnumberend
  3841 0000234E E87DFFFFFF          <1> 	call converthex
  3842 00002353 803D[2E230000]01    <1> 	cmp byte [firsthexshown], 1
  3843 0000235A 7503                <1> 	jne .show
  3844 0000235C 6631D2              <1> 	xor dx, dx
  3845                              <1> .show:
  3846 0000235F 803D[2E230000]03    <1> 	cmp byte [firsthexshown], 3
  3847 00002366 750A                <1> 	jne .nonewhexline
  3848 00002368 BE[CB710000]        <1> 	mov esi, line
  3849 0000236D E840ECFFFF          <1> 	call print
  3850                              <1> .nonewhexline:
  3851 00002372 803D[2E230000]04    <1> 	cmp byte [firsthexshown], 4
  3852 00002379 7527                <1> 	jne .notab
  3853 0000237B B1A0                <1> 	mov cl, 160
  3854 0000237D 28D1                <1> 	sub cl, dl
  3855 0000237F C0E905              <1> 	shr cl, 5
  3856 00002382 C0E105              <1> 	shl cl, 5
  3857 00002385 80F900              <1> 	cmp cl, 0
  3858 00002388 750F                <1> 	jne .nonewline
  3859 0000238A BE[CB710000]        <1> 	mov esi, line
  3860 0000238F E81EECFFFF          <1> 	call print
  3861 00002394 E909000000          <1> 	jmp .notab
  3862                              <1> .nonewline:
  3863 00002399 80C20F              <1> 	add dl, 15
  3864 0000239C C0EA04              <1> 	shr dl, 4
  3865 0000239F C0E204              <1> 	shl dl, 4
  3866                              <1> .notab:
  3867 000023A2 BE[C5220000]        <1> 	mov esi, hexnumber
  3868 000023A7 803D[2D230000]01    <1> 	cmp byte [smallhex],1
  3869 000023AE 7506                <1> 	jne .nosmall
  3870 000023B0 81C606000000        <1> 	add esi, 6
  3871                              <1> .nosmall:
  3872 000023B6 803D[2E230000]05    <1> 	cmp byte [firsthexshown], 5
  3873 000023BD 750A                <1> 	jne .noquiet
  3874 000023BF E8CFEBFFFF          <1> 	call printquiet
  3875 000023C4 E918000000          <1> 	jmp .donequiet
  3876                              <1> .noquiet:
  3877 000023C9 803D[2E230000]06    <1> 	cmp byte [firsthexshown], 6
  3878 000023D0 750A                <1> 	jne .normal
  3879 000023D2 E8CFEBFFFF          <1> 	call printhighlight
  3880 000023D7 E905000000          <1> 	jmp .donequiet
  3881                              <1> .normal:
  3882 000023DC E8D1EBFFFF          <1> 	call print
  3883                              <1> .donequiet:
  3884 000023E1 803D[2E230000]02    <1> 	cmp byte [firsthexshown], 2
  3885 000023E8 750A                <1> 	jne .shown
  3886 000023EA BE[CB710000]        <1> 	mov esi, line
  3887 000023EF E8BEEBFFFF          <1> 	call print
  3888                              <1> .shown:
  3889 000023F4 C605[2E230000]00    <1> 	mov byte [firsthexshown], 0
  3890 000023FB 61                  <1> 	popa
  3891 000023FC C3                  <1> 	ret
  3892                              <1> 
  3893                              <1> 
  3894 000023FD 303030303030303030- <1> decnumber db "00000000000000"
  3895 00002406 3030303030          <1>
  3896 0000240B 2000                <1> decnumberend: db " ",0
  3897                              <1> 
  3898                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3899 0000240D 60                  <1> 	pusha
  3900 0000240E BF[FD230000]        <1> 	mov edi, decnumber
  3901 00002413 BE[0B240000]        <1> 	mov esi, decnumberend
  3902                              <1> .clear:
  3903 00002418 C60730              <1> 	mov byte [edi], '0'
  3904 0000241B 47                  <1> 	inc edi
  3905 0000241C 39F7                <1> 	cmp edi, esi
  3906 0000241E 72F8                <1> 	jb .clear
  3907 00002420 BF[FD230000]        <1> 	mov edi, decnumber
  3908 00002425 E8C6FDFFFF          <1> 	call convert
  3909 0000242A 803D[2E230000]01    <1> 	cmp byte [firsthexshown], 1
  3910 00002431 7503                <1> 	jne .show
  3911 00002433 6631D2              <1> 	xor dx, dx
  3912                              <1> .show:
  3913 00002436 803D[2E230000]03    <1> 	cmp byte [firsthexshown], 3
  3914 0000243D 750A                <1> 	jne .nonewdecline
  3915 0000243F BE[CB710000]        <1> 	mov esi, line
  3916 00002444 E869EBFFFF          <1> 	call print
  3917                              <1> .nonewdecline:
  3918 00002449 803D[2E230000]04    <1> 	cmp byte [firsthexshown], 4
  3919 00002450 7527                <1> 	jne .notab
  3920 00002452 B1A0                <1> 	mov cl, 160
  3921 00002454 28D1                <1> 	sub cl, dl
  3922 00002456 C0E905              <1> 	shr cl, 5
  3923 00002459 C0E105              <1> 	shl cl, 5
  3924 0000245C 80F900              <1> 	cmp cl, 0
  3925 0000245F 750F                <1> 	jne .nonewline
  3926 00002461 BE[CB710000]        <1> 	mov esi, line
  3927 00002466 E847EBFFFF          <1> 	call print
  3928 0000246B E909000000          <1> 	jmp .notab
  3929                              <1> .nonewline:
  3930 00002470 80C20F              <1> 	add dl, 15
  3931 00002473 C0EA04              <1> 	shr dl, 4
  3932 00002476 C0E204              <1> 	shl dl, 4
  3933                              <1> .notab:
  3934 00002479 BE[FD230000]        <1> 	mov esi, decnumber
  3935 0000247E 4E                  <1> 	dec esi
  3936                              <1> .sifind:
  3937 0000247F 46                  <1> 	inc esi
  3938 00002480 803E30              <1> 	cmp byte [esi], '0'
  3939 00002483 74FA                <1> 	je .sifind
  3940 00002485 E828EBFFFF          <1> 	call print
  3941 0000248A 803D[2E230000]02    <1> 	cmp byte [firsthexshown], 2
  3942 00002491 750A                <1> 	jne .shown
  3943 00002493 BE[CB710000]        <1> 	mov esi, line
  3944 00002498 E815EBFFFF          <1> 	call print
  3945                              <1> .shown:
  3946 0000249D C605[2E230000]00    <1> 	mov byte [firsthexshown], 0
  3947 000024A4 61                  <1> 	popa
  3948 000024A5 C3                  <1> 	ret
  3949                              <1> 	
  3950                              <1> cnvrthextxt:
  3951 000024A6 31C9                <1> 	xor ecx, ecx
  3952 000024A8 31C0                <1> 	xor eax, eax
  3953 000024AA 31D2                <1> 	xor edx, edx
  3954 000024AC 31DB                <1> 	xor ebx, ebx
  3955 000024AE 4E                  <1> 	dec esi
  3956                              <1> .end:
  3957 000024AF 46                  <1> 	inc esi
  3958 000024B0 8A06                <1> 	mov al, [esi]
  3959 000024B2 3C00                <1> 	cmp al, 0
  3960 000024B4 75F9                <1> 	jne .end
  3961                              <1> .loop:
  3962 000024B6 4E                  <1> 	dec esi
  3963 000024B7 8A06                <1> 	mov al, [esi]
  3964 000024B9 3C41                <1> 	cmp al, "A"
  3965 000024BB 7328                <1> 	jae .char
  3966 000024BD 2C30                <1> 	sub al, 48
  3967 000024BF 3C10                <1> 	cmp al, 16
  3968 000024C1 7721                <1> 	ja .done
  3969                              <1> .donechar:
  3970 000024C3 81FA00000000        <1> 	cmp edx, 0
  3971 000024C9 740E                <1> 	je .noshl
  3972 000024CB 89D3                <1> 	mov ebx, edx
  3973                              <1> .shl:
  3974 000024CD C1E004              <1> 	shl eax, 4
  3975 000024D0 4B                  <1> 	dec ebx
  3976 000024D1 81FB00000000        <1> 	cmp ebx, 0
  3977 000024D7 75F4                <1> 	jne .shl
  3978                              <1> .noshl:
  3979 000024D9 42                  <1> 	inc edx
  3980 000024DA 01C1                <1> 	add ecx, eax
  3981 000024DC 81FA08000000        <1> 	cmp edx, 8
  3982 000024E2 72D2                <1> 	jb .loop
  3983                              <1> .done:
  3984 000024E4 C3                  <1> 	ret
  3985                              <1> .char:
  3986 000024E5 3C46                <1> 	cmp al, "F"
  3987 000024E7 77FB                <1> 	ja .done
  3988 000024E9 2C41                <1> 	sub al, "A"
  3989 000024EB 040A                <1> 	add al, 0xA
  3990 000024ED EBD4                <1> 	jmp .donechar
  3991                              <1> 	
  3992                              <1> 	
  3993                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3994 000024EF 31C9                <1> 	xor ecx, ecx
  3995 000024F1 31C0                <1> 	xor eax, eax
  3996 000024F3 31D2                <1> 	xor edx, edx
  3997 000024F5 31DB                <1> 	xor ebx, ebx
  3998 000024F7 4E                  <1> 	dec esi
  3999                              <1> .lp:
  4000 000024F8 46                  <1> 	inc esi
  4001 000024F9 8A06                <1> 	mov al, [esi]
  4002 000024FB 3C00                <1> 	cmp al, 0
  4003 000024FD 75F9                <1> 	jne .lp
  4004 000024FF 4E                  <1> 	dec esi
  4005 00002500 8A06                <1> 	mov al, [esi]
  4006 00002502 3C2E                <1> 	cmp al, '.'
  4007 00002504 7503                <1> 	jne .dot
  4008 00002506 46                  <1> 	inc esi
  4009 00002507 EBEF                <1> 	jmp .lp
  4010                              <1> .dot:
  4011 00002509 3C20                <1> 	cmp al, ' '
  4012 0000250B 7404                <1> 	je .zero
  4013 0000250D 3C30                <1> 	cmp al, '0'
  4014 0000250F 7504                <1> 	jne .txtlp
  4015                              <1> .zero: 
  4016 00002511 39FE                <1> 		cmp esi, edi
  4017 00002513 7458                <1> 		je .done
  4018                              <1> .txtlp:
  4019 00002515 31C0                <1> 	xor eax, eax
  4020 00002517 8A06                <1> 	mov al, [esi]
  4021 00002519 3C3D                <1> 	cmp al, '='
  4022 0000251B 7450                <1> 	je .done
  4023 0000251D 3C30                <1> 	cmp al, 48
  4024 0000251F 724C                <1> 	jb .done
  4025 00002521 3C23                <1> 	cmp al, '#'
  4026 00002523 7448                <1> 	je .done
  4027 00002525 39FE                <1> 	cmp esi, edi
  4028 00002527 7244                <1> 	jb .done
  4029 00002529 81F900000000        <1> 	cmp ecx, 0
  4030 0000252F 7708                <1> 	ja .exp
  4031 00002531 2C30                <1> .noexp:	sub al, 48
  4032 00002533 01C2                <1> 	add edx, eax
  4033 00002535 4E                  <1> 	dec esi
  4034 00002536 41                  <1> 	inc ecx
  4035 00002537 EBDC                <1> 	jmp .txtlp
  4036 00002539 81F900000000        <1> .exp:	cmp ecx, 0
  4037 0000253F 74F0                <1> 	je .noexp
  4038 00002541 2C30                <1> 	sub al, 48
  4039 00002543 51                  <1> 	push ecx
  4040 00002544 89C3                <1> .expmul:	mov ebx, eax
  4041 00002546 01D8                <1> 	add eax, ebx
  4042 00002548 01D8                <1> 	add eax, ebx
  4043 0000254A 01D8                <1> 	add eax, ebx
  4044 0000254C 01D8                <1> 	add eax, ebx
  4045 0000254E 01D8                <1> 	add eax, ebx
  4046 00002550 01D8                <1> 	add eax, ebx
  4047 00002552 01D8                <1> 	add eax, ebx
  4048 00002554 01D8                <1> 	add eax, ebx
  4049 00002556 01D8                <1> 	add eax, ebx
  4050 00002558 81E901000000        <1> 	sub ecx, 1
  4051 0000255E 81F900000000        <1> 	cmp ecx, 0
  4052 00002564 77DE                <1> 	ja .expmul
  4053 00002566 01C2                <1> 	add edx, eax
  4054 00002568 59                  <1> 	pop ecx
  4055 00002569 4E                  <1> 	dec esi
  4056 0000256A 41                  <1> 	inc ecx
  4057 0000256B EBA8                <1> 	jmp .txtlp
  4058 0000256D 89D1                <1> .done: mov ecx, edx
  4059 0000256F C3                  <1> 	ret
  4060                                      %include "source/programs.asm"
  4061 00002570 FF2C                <1> filetypes db 255,44
  4062                              <1> progstart:		;programs start here
  4063                              <1> indexfiles:
  4064 00002572 BE[72250000]        <1> 	mov esi, progstart
  4065 00002577 BB[50860300]        <1> 	mov ebx, fileindex
  4066 0000257C BF[72250000]        <1> 	mov edi, progstart
  4067 00002581 81EF02000000        <1> 	sub edi, 2
  4068                              <1> indexloop:
  4069 00002587 668B0E              <1> 	mov cx, [esi]
  4070                              <1> 	indexloop2:
  4071 0000258A 663B0F              <1> 		cmp cx, [edi]
  4072 0000258D 7424                <1> 		je indexloop2done
  4073 0000258F 81EF02000000        <1> 		sub edi, 2
  4074 00002595 81FF[70250000]      <1> 		cmp edi, filetypes
  4075 0000259B 73ED                <1> 		jae indexloop2
  4076 0000259D BF[72250000]        <1> 	mov edi, progstart
  4077 000025A2 81EF02000000        <1> 	sub edi, 2
  4078 000025A8 46                  <1> 	inc esi
  4079 000025A9 81FE[0E410000]      <1> 	cmp esi, batchprogend
  4080 000025AF 734E                <1> 	jae indexloopdone
  4081 000025B1 EBD4                <1> 	jmp indexloop
  4082                              <1> indexloop2done:
  4083 000025B3 66890B              <1> 	mov [ebx], cx
  4084 000025B6 81C302000000        <1> 	add ebx, 2
  4085 000025BC 81C602000000        <1> 	add esi, 2
  4086                              <1> 	nameindex:
  4087 000025C2 8A0E                <1> 		mov cl, [esi]
  4088 000025C4 80F900              <1> 		cmp cl, 0
  4089 000025C7 7406                <1> 		je nameindexdone
  4090 000025C9 880B                <1> 		mov [ebx], cl
  4091 000025CB 46                  <1> 		inc esi
  4092 000025CC 43                  <1> 		inc ebx
  4093 000025CD EBF3                <1> 		jmp nameindex
  4094                              <1> 	nameindexdone:
  4095 000025CF 43                  <1> 		inc ebx
  4096 000025D0 66C7030000          <1> 		mov word [ebx], 0
  4097 000025D5 81C302000000        <1> 		add ebx, 2
  4098 000025DB 46                  <1> 		inc esi
  4099 000025DC 8933                <1> 		mov [ebx], esi
  4100 000025DE 81C304000000        <1> 		add ebx, 4
  4101 000025E4 66C7030000          <1> 		mov word [ebx], 0
  4102 000025E9 81C302000000        <1> 		add ebx, 2
  4103 000025EF 81FB[508A0300]      <1> 		cmp ebx, fileindexend
  4104 000025F5 7308                <1> 		jae indexloopdone
  4105 000025F7 81C601000000        <1> 		add esi, 1
  4106 000025FD EB88                <1> 		jmp indexloop
  4107 000025FF C605[07260000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4108 00002606 C3                  <1> 		ret
  4109 00002607 00                  <1> indexdone db 0
  4110                              <1> %include 'source/programs/_comment.asm' ;#
  4111 00002608 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4112 0000260C C3                  <2> 	ret 
  4113                              <1> %include 'source/programs/_math.asm' ;!
  4114 0000260D FF2C2100            <2> db 255,44,"!",0
  4115                              <2> 	num:	
  4116 00002611 E8C5FBFFFF          <2> 		call clearbuffer
  4117 00002616 C605[97280000]00    <2> 		mov byte [decimal], 0
  4118 0000261D C605[98280000]00    <2> 		mov byte [decimal2], 0
  4119 00002624 8B35[1C210000]      <2> 		mov esi, [currentcommandloc]
  4120 0000262A 31C0                <2> 		xor eax, eax
  4121 0000262C 31C9                <2> 		xor ecx, ecx
  4122 0000262E 31DB                <2> 		xor ebx, ebx
  4123 00002630 8A06                <2> 	num2:	mov al, [esi]
  4124 00002632 3C2B                <2> 		cmp al, '+'
  4125 00002634 741B                <2> 		je operatorfound
  4126 00002636 3C2D                <2> 		cmp al, '-'
  4127 00002638 7417                <2> 		je operatorfound
  4128 0000263A 3C2A                <2> 		cmp al, '*'
  4129 0000263C 7413                <2> 		je operatorfound
  4130 0000263E 3C2F                <2> 		cmp al, '/'
  4131 00002640 740F                <2> 		je operatorfound
  4132 00002642 3C5E                <2> 		cmp al, '^'
  4133 00002644 740B                <2> 		je operatorfound
  4134 00002646 46                  <2> 		inc esi
  4135 00002647 3C00                <2> 		cmp al, 0
  4136 00002649 0F841AF8FFFF        <2> 		je near nwcmd
  4137 0000264F EBDF                <2> 		jmp num2
  4138 00002651 50                  <2> 	operatorfound: push eax
  4139 00002652 30E4                <2> 		xor ah, ah
  4140 00002654 8826                <2> 		mov [esi], ah
  4141 00002656 89F7                <2> 		mov edi, esi
  4142 00002658 46                  <2> 		inc esi
  4143 00002659 8A06                <2> 		mov al, [esi]
  4144 0000265B 3C25                <2> 		cmp al, '%'
  4145 0000265D 0F8462000000        <2> 		je near resultnum1
  4146                              <2> 	varnum2: 
  4147 00002663 57                  <2> 		push edi
  4148 00002664 E8A4000000          <2> 		call checkdecimal
  4149 00002669 5F                  <2> 		pop edi
  4150 0000266A E880FEFFFF          <2> 		call cnvrttxt
  4151                              <2> 	vrnm2:
  4152 0000266F 89CB                <2> 		mov ebx, ecx
  4153 00002671 53                  <2> 		push ebx
  4154 00002672 E864FBFFFF          <2> 		call clearbuffer
  4155 00002677 8B35[1C210000]      <2> 		mov esi, [currentcommandloc]
  4156 0000267D 89F7                <2> 		mov edi, esi
  4157 0000267F 46                  <2> 		inc esi
  4158 00002680 8A06                <2> 		mov al, [esi]
  4159 00002682 3C25                <2> 		cmp al, '%'
  4160 00002684 0F844F000000        <2> 		je near resultnum2
  4161                              <2> 	varnum4: 
  4162 0000268A 57                  <2> 		push edi
  4163 0000268B E869000000          <2> 		call checkdecimal2
  4164 00002690 5F                  <2> 		pop edi
  4165 00002691 E859FEFFFF          <2> 		call cnvrttxt
  4166                              <2> 	vrnm4:
  4167 00002696 5B                  <2> 		pop ebx
  4168 00002697 58                  <2> 		pop eax
  4169 00002698 3C2B                <2> 		cmp al, '+'
  4170 0000269A 0F849B000000        <2> 		je near plusnum
  4171 000026A0 3C2D                <2> 		cmp al, '-'
  4172 000026A2 0F849F000000        <2> 		je near subnum
  4173 000026A8 3C2A                <2> 		cmp al, '*'
  4174 000026AA 0F84A3000000        <2> 		je near mulnum
  4175 000026B0 3C2F                <2> 		cmp al, '/'
  4176 000026B2 0F84B1000000        <2> 		je near divnum
  4177 000026B8 3C5E                <2> 		cmp al, '^'
  4178 000026BA 0F84CE000000        <2> 		je near expnum
  4179 000026C0 E9A4F7FFFF          <2> 		jmp nwcmd
  4180                              <2> 	resultnum1:
  4181 000026C5 8A0D[99280000]      <2> 		mov cl, [decimalresult]
  4182 000026CB 880D[97280000]      <2> 		mov [decimal], cl
  4183 000026D1 8B0D[9A280000]      <2> 		mov ecx, [result]
  4184 000026D7 EB96                <2> 		jmp vrnm2
  4185                              <2> 	resultnum2:
  4186 000026D9 8A0D[97280000]      <2> 		mov cl, [decimal]
  4187 000026DF 880D[98280000]      <2> 		mov [decimal2], cl
  4188 000026E5 8A0D[99280000]      <2> 		mov cl, [decimalresult]
  4189 000026EB 880D[97280000]      <2> 		mov [decimal], cl
  4190 000026F1 8B0D[9A280000]      <2> 		mov ecx, [result]
  4191 000026F7 EB9D                <2> 		jmp vrnm4
  4192                              <2> 	checkdecimal2:
  4193 000026F9 8A25[97280000]      <2> 		mov ah, [decimal]
  4194 000026FF 8825[98280000]      <2> 		mov [decimal2], ah
  4195 00002705 30E4                <2> 		xor ah, ah
  4196 00002707 8825[97280000]      <2> 		mov [decimal], ah
  4197                              <2> 	checkdecimal:
  4198 0000270D 89F7                <2> 		mov edi, esi
  4199                              <2> 	chkdec1:
  4200 0000270F 8A07                <2> 		mov al, [edi]
  4201 00002711 3C2E                <2> 		cmp al, '.'
  4202 00002713 0F840B000000        <2> 		je near fnddec
  4203 00002719 3C00                <2> 		cmp al, 0
  4204 0000271B 0F8419000000        <2> 		je near nodecimal
  4205 00002721 47                  <2> 		inc edi
  4206 00002722 EBEB                <2> 		jmp chkdec1
  4207                              <2> 	fnddec:
  4208 00002724 8A4701              <2> 		mov al, [edi + 1]
  4209 00002727 8807                <2> 		mov [edi], al
  4210 00002729 3C00                <2> 		cmp al, 0
  4211 0000272B 0F8409000000        <2> 		je near nodecimal
  4212 00002731 FE05[97280000]      <2> 		inc byte [decimal]
  4213 00002737 47                  <2> 		inc edi
  4214 00002738 EBEA                <2> 		jmp fnddec
  4215                              <2> 	nodecimal:
  4216 0000273A C3                  <2> 		ret
  4217                              <2> 	plusnum:
  4218 0000273B E815010000          <2> 		call decaddfix
  4219 00002740 01D9                <2> 		add ecx, ebx
  4220 00002742 E98A000000          <2> 		jmp retnum
  4221                              <2> 	subnum:
  4222 00002747 E809010000          <2> 		call decaddfix
  4223 0000274C 29D9                <2> 		sub ecx, ebx
  4224 0000274E E97E000000          <2> 		jmp retnum
  4225                              <2> 	mulnum:
  4226 00002753 A0[98280000]        <2> 		mov al, [decimal2]
  4227 00002758 0005[97280000]      <2> 		add [decimal], al
  4228 0000275E 89C8                <2> 		mov eax, ecx
  4229 00002760 F7E3                <2> 		mul ebx
  4230 00002762 89C1                <2> 		mov ecx, eax
  4231 00002764 E968000000          <2> 		jmp retnum
  4232                              <2> 	divnum:
  4233 00002769 E8E7000000          <2> 		call decaddfix
  4234 0000276E 30C0                <2> 		xor al, al
  4235 00002770 A2[97280000]        <2> 		mov [decimal], al
  4236 00002775 31D2                <2> 		xor edx, edx
  4237 00002777 89C8                <2> 		mov eax, ecx
  4238 00002779 81FB00000000        <2> 		cmp ebx, 0
  4239 0000277F 0F844C000000        <2> 		je near retnum
  4240 00002785 F7F3                <2> 		div ebx
  4241 00002787 89C1                <2> 		mov ecx, eax
  4242 00002789 E943000000          <2> 		jmp retnum
  4243                              <2> 	expnum:
  4244 0000278E 8A15[97280000]      <2> 		mov dl, [decimal]
  4245 00002794 8815[98280000]      <2> 		mov [decimal2], dl
  4246 0000279A 31D2                <2> 		xor edx, edx
  4247 0000279C 89C8                <2> 		mov eax, ecx
  4248 0000279E 89D9                <2> 		mov ecx, ebx
  4249 000027A0 89C3                <2> 		mov ebx, eax
  4250 000027A2 81F900000000        <2> 		cmp ecx, 0
  4251 000027A8 7422                <2> 		je noexpnum
  4252 000027AA 49                  <2> 		dec ecx
  4253 000027AB 81F900000000        <2> 		cmp ecx, 0
  4254 000027B1 7412                <2> 		je noexpnumlp
  4255 000027B3 F7E3                <2> 	expnumlp: mul ebx
  4256 000027B5 8A15[98280000]      <2> 		mov dl, [decimal2]
  4257 000027BB 0015[97280000]      <2> 		add [decimal], dl
  4258 000027C1 31D2                <2> 		xor edx, edx
  4259 000027C3 E2EE                <2> 		loop expnumlp
  4260                              <2> 	noexpnumlp:
  4261 000027C5 89C1                <2> 		mov ecx, eax
  4262 000027C7 E905000000          <2> 		jmp retnum
  4263                              <2> 	noexpnum:
  4264 000027CC B901000000          <2> 		mov ecx, 1
  4265                              <2> 	retnum: 
  4266 000027D1 BE[E4A40300]        <2> 		mov esi, numbuf
  4267 000027D6 890D[9A280000]      <2> 		mov [result], ecx
  4268 000027DC E80FFAFFFF          <2> 		call convert
  4269 000027E1 BE[E4A40300]        <2> 		mov esi, numbuf
  4270 000027E6 8A25[97280000]      <2> 		mov ah, [decimal]
  4271 000027EC 8825[99280000]      <2> 		mov [decimalresult], ah
  4272 000027F2 80FC00              <2> 		cmp ah, 0
  4273 000027F5 0F8425000000        <2> 		je near noputdecimal
  4274                              <2> 	putdecimal:
  4275 000027FB 4E                  <2> 		dec esi
  4276 000027FC FECC                <2> 		dec ah
  4277 000027FE 80FC00              <2> 		cmp ah, 0
  4278 00002801 0F87F4FFFFFF        <2> 		ja near putdecimal
  4279 00002807 4E                  <2> 		dec esi
  4280 00002808 8A06                <2> 		mov al, [esi]
  4281 0000280A C6062E              <2> 		mov byte [esi], '.'
  4282                              <2> 	decputloop:
  4283 0000280D 4E                  <2> 		dec esi
  4284 0000280E 8A26                <2> 		mov ah, [esi]
  4285 00002810 8806                <2> 		mov [esi], al
  4286 00002812 88E0                <2> 		mov al, ah
  4287 00002814 81FE[D0A40300]      <2> 		cmp esi, buf2
  4288 0000281A 0F87EDFFFFFF        <2> 		ja near decputloop
  4289                              <2> 	noputdecimal:
  4290 00002820 BE[D0A40300]        <2> 		mov esi, buf2
  4291 00002825 E809000000          <2> 		call chkadd
  4292 0000282A E93AF6FFFF          <2> 		jmp nwcmd
  4293 0000282F 00000000            <2> edxnumbuf dw 0,0
  4294 00002833 8A06                <2> 	chkadd: mov al, [esi]
  4295 00002835 3C30                <2> 		cmp al, '0'
  4296 00002837 750C                <2> 		jne dnadd
  4297 00002839 46                  <2> 		inc esi
  4298 0000283A 81FE[E4A40300]      <2> 		cmp esi, numbuf
  4299 00002840 7402                <2> 		je dnaddm1
  4300 00002842 EBEF                <2> 		jmp chkadd
  4301 00002844 4E                  <2> 	dnaddm1: dec esi
  4302 00002845 E868E7FFFF          <2> 	dnadd:	call print
  4303 0000284A BE[CB710000]        <2> 		mov esi, line
  4304 0000284F E85EE7FFFF          <2> 		call print
  4305 00002854 C3                  <2> 		ret
  4306                              <2> 		
  4307                              <2> 	decaddfix:
  4308 00002855 A0[98280000]        <2> 		mov al, [decimal2]
  4309 0000285A 8A25[97280000]      <2> 		mov ah, [decimal]
  4310 00002860 38E0                <2> 		cmp al, ah
  4311 00002862 7432                <2> 		je gooddecadd
  4312 00002864 38E0                <2> 		cmp al, ah
  4313 00002866 721A                <2> 		jb lowdecadd
  4314                              <2> 	highdecadd:
  4315 00002868 FEC4                <2> 		inc ah
  4316 0000286A 89CA                <2> 		mov edx, ecx
  4317 0000286C C1E103              <2> 		shl ecx, 3
  4318 0000286F 01D1                <2> 		add ecx, edx
  4319 00002871 01D1                <2> 		add ecx, edx
  4320 00002873 38E0                <2> 		cmp al, ah
  4321 00002875 77F1                <2> 		ja highdecadd
  4322 00002877 8825[97280000]      <2> 		mov [decimal], ah
  4323 0000287D E914000000          <2> 		jmp gooddecadd
  4324                              <2> 	lowdecadd:
  4325 00002882 FEC0                <2> 		inc al
  4326 00002884 89DA                <2> 		mov edx, ebx
  4327 00002886 C1E303              <2> 		shl ebx, 3
  4328 00002889 01D3                <2> 		add ebx, edx
  4329 0000288B 01D3                <2> 		add ebx, edx
  4330 0000288D 38E0                <2> 		cmp al, ah
  4331 0000288F 72F1                <2> 		jb lowdecadd
  4332 00002891 A2[97280000]        <2> 		mov [decimal], al
  4333                              <2> 	gooddecadd:
  4334 00002896 C3                  <2> 		ret
  4335                              <2> 		
  4336 00002897 00                  <2> decimal db 0
  4337 00002898 00                  <2> decimal2 db 0
  4338 00002899 00                  <2> decimalresult db 0
  4339 0000289A 00000000            <2> result dd 0
  4340                              <1> %include 'source/programs/_variables.asm' ;% and $
  4341 0000289E FF2C2500            <2> db 255,44,"%",0
  4342                              <2> 	ans:
  4343 000028A2 BE[D0A40300]        <2> 		mov esi, buf2
  4344 000028A7 E887FFFFFF          <2> 		call chkadd
  4345 000028AC C3                  <2> 		ret
  4346                              <2> 		
  4347 000028AD FF2C2400            <2> db 255,44,"$",0
  4348 000028B1 8B35[1C210000]      <2> var: mov esi, [currentcommandloc]
  4349 000028B7 BB[D08C0300]        <2> 	mov ebx, variables
  4350 000028BC 8A06                <2> lkeq:	mov al, [esi]
  4351 000028BE 3C3D                <2> 	cmp al, '='
  4352 000028C0 741B                <2> 	je eqfnd	;is there an '=' sign?
  4353 000028C2 3C00                <2> 	cmp al, 0
  4354 000028C4 7403                <2> 	je echovars
  4355 000028C6 46                  <2> 	inc esi
  4356 000028C7 EBF3                <2> 	jmp lkeq
  4357 000028C9 BE[D08C0300]        <2> echovars: mov esi, variables
  4358 000028CE BB[D09C0300]        <2> 	mov ebx, varend
  4359 000028D3 B105                <2> 	mov cl, 5
  4360 000028D5 B504                <2> 	mov ch, 4
  4361 000028D7 E89EF8FFFF          <2> 	call array
  4362 000028DC C3                  <2> 	ret
  4363 000028DD 46                  <2> eqfnd:	inc esi
  4364 000028DE 8A06                <2> 	mov al, [esi]
  4365 000028E0 3C00                <2> 	cmp al, 0
  4366 000028E2 7410                <2> 	je readvar
  4367 000028E4 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  4368 000028EA BB[D08C0300]        <2> 	mov ebx, variables
  4369 000028EF E919000000          <2> 	jmp seek
  4370                              <2> readvar:
  4371 000028F4 B00A                <2> 	mov al, 10
  4372 000028F6 66BB0700            <2> 	mov bx, 7
  4373 000028FA C605[96150000]00    <2> 	mov byte [commandedit], 0
  4374 00002901 BF[D0A40300]        <2> 	mov edi, buftxtend
  4375 00002906 E8DAE7FFFF          <2> 	call rdprint
  4376 0000290B EBA4                <2> 	jmp var
  4377 0000290D 668B03              <2> seek:	mov ax, [ebx]
  4378 00002910 B105                <2> 	mov cl, 5
  4379 00002912 B504                <2> 	mov ch, 4
  4380 00002914 663D0000            <2> 	cmp ax, 0
  4381 00002918 0F845B000000        <2> 	je near save
  4382 0000291E 6639C8              <2> 	cmp ax, cx
  4383 00002921 7403                <2> 	je skfnd
  4384 00002923 43                  <2> 	inc ebx
  4385 00002924 EBE7                <2> 	jmp seek
  4386 00002926 8B35[1C210000]      <2> skfnd:	mov esi, [currentcommandloc]
  4387 0000292C 46                  <2> 	inc esi
  4388 0000292D 81C302000000        <2> 	add ebx, 2
  4389 00002933 89DF                <2> 	mov edi, ebx
  4390 00002935 B13D                <2> 	mov cl, '='
  4391 00002937 E81FF8FFFF          <2> 	call cndtest
  4392 0000293C 3C01                <2> 	cmp al, 1	
  4393 0000293E 7418                <2> 	je varfnd
  4394 00002940 89FB                <2> 	mov ebx, edi
  4395 00002942 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  4396 00002948 668B03              <2> 	mov ax, [ebx]
  4397 0000294B 663D0000            <2> 	cmp ax, 0
  4398 0000294F 0F8424000000        <2> 	je near save
  4399 00002955 43                  <2> 	inc ebx
  4400 00002956 EBB5                <2> 	jmp seek
  4401 00002958 8A03                <2> varfnd:	mov al, [ebx]
  4402 0000295A 3C04                <2> 	cmp al, 4
  4403 0000295C 7404                <2> 	je save2
  4404 0000295E 4B                  <2> 	dec ebx
  4405 0000295F 4E                  <2> 	dec esi
  4406 00002960 EBF6                <2> 	jmp varfnd
  4407 00002962 4B                  <2> save2:	dec ebx
  4408 00002963 4E                  <2> 	dec esi
  4409 00002964 8A03                <2> 	mov al, [ebx]
  4410 00002966 3C05                <2> 	cmp al, 5
  4411 00002968 7402                <2> 	je remove
  4412 0000296A EBEC                <2> 	jmp varfnd
  4413 0000296C 8A03                <2> remove: mov al, [ebx]
  4414 0000296E 3C00                <2> 	cmp al, 0
  4415 00002970 749B                <2> 	je seek
  4416 00002972 30C0                <2> 	xor al, al
  4417 00002974 8803                <2> 	mov [ebx], al
  4418 00002976 43                  <2> 	inc ebx
  4419 00002977 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4420 00002979 8B35[1C210000]      <2> save:	mov esi, [currentcommandloc]
  4421 0000297F 43                  <2> 	inc ebx
  4422 00002980 B005                <2> 	mov al, 5
  4423 00002982 B404                <2> 	mov ah, 4
  4424 00002984 668903              <2> 	mov [ebx], ax
  4425 00002987 43                  <2> 	inc ebx
  4426 00002988 43                  <2> svhere:	inc ebx
  4427 00002989 46                  <2> 	inc esi
  4428 0000298A 8A06                <2> 	mov al, [esi]
  4429 0000298C 3C00                <2> 	cmp al, 0
  4430 0000298E 0F844A000000        <2> 	je near svdone
  4431 00002994 3C25                <2> 	cmp al, '%'
  4432 00002996 7404                <2> 	je ans2
  4433 00002998 8803                <2> 	mov [ebx], al	
  4434 0000299A EBEC                <2> 	jmp svhere
  4435 0000299C 56                  <2> ans2:	push esi
  4436 0000299D BE[D0A40300]        <2> 	mov esi, buf2
  4437 000029A2 E823000000          <2> 	call ansfnd
  4438 000029A7 E803000000          <2> 	call anscp
  4439 000029AC 5E                  <2> 	pop esi
  4440 000029AD EBD9                <2> 	jmp svhere
  4441 000029AF 8A06                <2> anscp:	mov al, [esi]
  4442 000029B1 8803                <2> 	mov [ebx], al
  4443 000029B3 81FE[E4A40300]      <2> 	cmp esi, numbuf
  4444 000029B9 74CD                <2> 	je svhere
  4445 000029BB 3C00                <2> 	cmp al, 0
  4446 000029BD 74C9                <2> 	je svhere
  4447 000029BF 43                  <2> 	inc ebx
  4448 000029C0 46                  <2> 	inc esi
  4449 000029C1 EBEC                <2> 	jmp anscp
  4450 000029C3 5E                  <2> ansnf:	pop esi
  4451 000029C4 8A06                <2> 	mov al, [esi]
  4452 000029C6 8803                <2> 	mov [ebx], al
  4453 000029C8 EBBE                <2> 	jmp svhere
  4454 000029CA 46                  <2> ansfnd:	inc esi
  4455 000029CB 81FE[E3A40300]      <2> 	cmp esi, numbuf - 1
  4456 000029D1 740A                <2> 	je fndans
  4457 000029D3 8A06                <2> 	mov al, [esi]
  4458 000029D5 3C00                <2> 	cmp al, 0
  4459 000029D7 74EA                <2> 	je ansnf
  4460 000029D9 3C30                <2> 	cmp al, '0'
  4461 000029DB 74ED                <2> 	je ansfnd
  4462                              <2> fndans:
  4463 000029DD C3                  <2> 	ret
  4464 000029DE 30C0                <2> svdone:	xor al, al
  4465 000029E0 8803                <2> 	mov [ebx], al
  4466 000029E2 C3                  <2> 	ret
  4467                              <1> %include 'source/programs/_run.asm' ;./
  4468                              <2> 
  4469 000029E3 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4470 000029E7 FF2C2E2F00          <2> 	db 255,44,"./",0
  4471                              <2> rundiskprog:
  4472 000029EC 8B3D[1C210000]      <2> 	mov edi, [currentcommandloc]
  4473 000029F2 81C702000000        <2> 	add edi, 2
  4474 000029F8 BE00004000          <2> 	mov esi, 0x400000
  4475 000029FD E846290000          <2> 	call loadfile
  4476 00002A02 81FA94010000        <2> 	cmp edx, 404
  4477 00002A08 746A                <2> 	je noprogfound
  4478 00002A0A BB00004000          <2> 	mov ebx, 0x400000
  4479 00002A0F A1[E3290000]        <2> 	mov eax, [elfstart]
  4480 00002A14 3903                <2> 	cmp [ebx], eax
  4481 00002A16 0F8437000000        <2> 	je near runelf
  4482 00002A1C 66813B4558          <2> 	cmp word [ebx], "EX"
  4483 00002A21 7577                <2> 	jne progbatchfound
  4484 00002A23 81C302000000        <2> 	add ebx, 2
  4485 00002A29 8B3D[1C210000]      <2> 	mov edi, [currentcommandloc]
  4486 00002A2F 81C702000000        <2> 	add edi, 2
  4487                              <2> findspaceprog:
  4488 00002A35 8A07                <2> 	mov al, [edi]
  4489 00002A37 47                  <2> 	inc edi
  4490 00002A38 3C20                <2> 	cmp al, " "
  4491 00002A3A 75F9                <2> 	jne findspaceprog
  4492                              <2> findnonspaceprog:
  4493 00002A3C 8A07                <2> 	mov al, [edi]
  4494 00002A3E 47                  <2> 	inc edi
  4495 00002A3F 3C20                <2> 	cmp al, " "
  4496 00002A41 74F9                <2> 	je findnonspaceprog
  4497 00002A43 4F                  <2> 	dec edi
  4498 00002A44 8925[508A0300]      <2> 	mov [previousstack], esp
  4499 00002A4A FFD3                <2> 	call ebx
  4500 00002A4C 8B25[508A0300]      <2> 	mov esp, [previousstack]
  4501 00002A52 C3                  <2> 	ret
  4502                              <2> runelf:
  4503 00002A53 8B3D[1C210000]      <2> 	mov edi, [currentcommandloc]
  4504 00002A59 81C702000000        <2> 	add edi, 2
  4505 00002A5F 81C380000000        <2> 	add ebx, 0x80
  4506 00002A65 8925[508A0300]      <2> 	mov [previousstack], esp
  4507 00002A6B FFD3                <2> 	call ebx
  4508 00002A6D 8B25[508A0300]      <2> 	mov esp, [previousstack]
  4509 00002A73 C3                  <2> 	ret
  4510                              <2> noprogfound:
  4511 00002A74 BE[92710000]        <2> 	mov esi, notfound1
  4512 00002A79 E834E5FFFF          <2> 	call print
  4513 00002A7E 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  4514 00002A84 81C602000000        <2> 	add esi, 2
  4515 00002A8A E823E5FFFF          <2> 	call print
  4516 00002A8F BE[9A710000]        <2> 	mov esi, notfound2
  4517 00002A94 E819E5FFFF          <2> 	call print
  4518 00002A99 C3                  <2> 	ret
  4519                              <2> progbatchfound:
  4520 00002A9A BF00004000          <2> 		mov edi, 0x400000
  4521 00002A9F C605[CA8C0300]01    <2> 		mov byte [BATCHISON], 1
  4522                              <2> 	batchrunloop:
  4523 00002AA6 E89BF3FFFF          <2> 		call buftxtclear
  4524 00002AAB BE[D0A00300]        <2> 		mov esi, buftxt
  4525 00002AB0 8935[1C210000]      <2> 		mov [currentcommandloc], esi
  4526                              <2> 	batchrunloop2:
  4527 00002AB6 B10A                <2> 		mov cl, 10
  4528 00002AB8 B50D                <2> 		mov ch, 13
  4529 00002ABA 380F                <2> 		cmp [edi], cl
  4530 00002ABC 0F8419000000        <2> 		je near nxtbatchrunline
  4531 00002AC2 382F                <2> 		cmp [edi], ch
  4532 00002AC4 0F8411000000        <2> 		je near nxtbatchrunline
  4533 00002ACA 803F00              <2> 		cmp byte [edi], 0
  4534 00002ACD 0F8408000000        <2> 		je near nxtbatchrunline
  4535 00002AD3 8A07                <2> 		mov al, [edi]
  4536 00002AD5 8806                <2> 		mov [esi], al
  4537 00002AD7 46                  <2> 		inc esi
  4538 00002AD8 47                  <2> 		inc edi
  4539 00002AD9 EBDB                <2> 		jmp batchrunloop2
  4540                              <2> 	nxtbatchrunline:
  4541 00002ADB 47                  <2> 		inc edi
  4542 00002ADC 380F                <2> 		cmp [edi], cl
  4543 00002ADE 74FB                <2> 		je nxtbatchrunline
  4544 00002AE0 382F                <2> 		cmp [edi], ch
  4545 00002AE2 74F7                <2> 		je nxtbatchrunline
  4546 00002AE4 893D[422B0000]      <2> 		mov [batchedi], edi
  4547 00002AEA 893D[C68C0300]      <2> 		mov [BATCHPOS], edi
  4548 00002AF0 C60600              <2> 		mov byte [esi], 0
  4549 00002AF3 BE[D0A00300]        <2> 		mov esi, buftxt
  4550 00002AF8 803E00              <2> 		cmp byte [esi], 0
  4551 00002AFB 0F8439000000        <2> 		je near nobatchfoundrun
  4552 00002B01 31DB                <2> 		xor ebx, ebx
  4553 00002B03 8A1D[618C0300]      <2> 		mov bl, [IFON]
  4554 00002B09 80FB00              <2> 		cmp bl, 0
  4555 00002B0C 0F8534000000        <2> 		jne near iftestbatch
  4556                              <2> 	doneiftest:
  4557 00002B12 803D[182C0000]00    <2> 		cmp byte [runnextline], 0
  4558 00002B19 0F8405000000        <2> 		je near noruniftest
  4559 00002B1F E822F5FFFF          <2> 		call run
  4560                              <2> 	noruniftest:
  4561 00002B24 C605[182C0000]01    <2> 		mov byte [runnextline], 1
  4562 00002B2B 8B3D[422B0000]      <2> 		mov edi, [batchedi]
  4563 00002B31 803F00              <2> 		cmp byte [edi], 0
  4564 00002B34 0F856CFFFFFF        <2> 		jne near batchrunloop
  4565                              <2> 	nobatchfoundrun:
  4566 00002B3A C605[CA8C0300]00    <2> 		mov byte [BATCHISON], 0
  4567 00002B41 C3                  <2> 		ret
  4568                              <2> 	
  4569 00002B42 00000000            <2> batchedi dd 0	
  4570                              <2> 	
  4571                              <2> 	iftestbatch:
  4572 00002B46 BE[628C0300]        <2> 		mov esi, IFTRUE
  4573 00002B4B 01DE                <2> 		add esi, ebx
  4574 00002B4D 803E00              <2> 		cmp byte [esi], 0
  4575 00002B50 0F85BCFFFFFF        <2> 		jne near doneiftest
  4576 00002B56 881D[192C0000]      <2> 		mov [iffalsebuf], bl
  4577 00002B5C 803D[CB8C0300]01    <2> 		cmp byte [LOOPON], 1
  4578 00002B63 0F8513000000        <2> 		jne near fifindbatch
  4579 00002B69 E938FFFFFF          <2> 		jmp batchrunloop
  4580                              <2> 	elsetestbatch:
  4581 00002B6E C60601              <2> 		mov byte [esi], 1
  4582 00002B71 81C705000000        <2> 		add edi, 5
  4583 00002B77 E92AFFFFFF          <2> 		jmp batchrunloop
  4584                              <2> 	fifindbatch:
  4585 00002B7C 66B96966            <2> 		mov cx, "if"
  4586 00002B80 66B86669            <2> 		mov ax, "fi"
  4587 00002B84 663907              <2> 		cmp [edi], ax
  4588 00002B87 0F8424000000        <2> 		je near fifoundbatch
  4589 00002B8D 66390F              <2> 		cmp [edi], cx
  4590 00002B90 0F8465000000        <2> 		je near iffoundbatch
  4591 00002B96 803F00              <2> 		cmp byte [edi], 0
  4592 00002B99 0F8412000000        <2> 		je near fifoundbatch
  4593 00002B9F B8656C7365          <2> 		mov eax, "else"
  4594 00002BA4 3907                <2> 		cmp [edi], eax
  4595 00002BA6 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4596 00002BAC E973FFFFFF          <2> 		jmp noruniftest
  4597                              <2> 	fifoundbatch:
  4598 00002BB1 81C702000000        <2> 		add edi, 2
  4599 00002BB7 B00A                <2> 		mov al, 10
  4600 00002BB9 3807                <2> 		cmp [edi], al
  4601 00002BBB 0F840B000000        <2> 		je near goodfibatch
  4602 00002BC1 803F00              <2> 		cmp byte [edi], 0
  4603 00002BC4 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4604 00002BCA EBB0                <2> 		jmp fifindbatch
  4605                              <2> 	goodfibatch:
  4606 00002BCC B001                <2> 		mov al, 1
  4607 00002BCE 2805[618C0300]      <2> 		sub [IFON], al 
  4608 00002BD4 A0[618C0300]        <2> 		mov al, [IFON]
  4609 00002BD9 8A1D[192C0000]      <2> 		mov bl, [iffalsebuf]
  4610 00002BDF 38D8                <2> 		cmp al, bl
  4611 00002BE1 7799                <2> 		ja fifindbatch
  4612 00002BE3 8B35[1C210000]      <2> 		mov esi, [currentcommandloc]
  4613 00002BE9 81EF02000000        <2> 		sub edi, 2
  4614 00002BEF C605[182C0000]00    <2> 		mov byte [runnextline], 0
  4615 00002BF6 E9ABFEFFFF          <2> 		jmp batchrunloop
  4616                              <2> 	iffoundbatch:
  4617 00002BFB B020                <2> 		mov al, ' '
  4618 00002BFD 81C702000000        <2> 		add edi, 2
  4619 00002C03 3807                <2> 		cmp [edi], al
  4620 00002C05 0F8571FFFFFF        <2> 		jne near fifindbatch
  4621 00002C0B B001                <2> 		mov al, 1
  4622 00002C0D 0005[618C0300]      <2> 		add [IFON], al
  4623 00002C13 E964FFFFFF          <2> 		jmp fifindbatch
  4624                              <2> 		
  4625                              <2> 		
  4626 00002C18 01                  <2> runnextline db 1
  4627 00002C19 00                  <2> iffalsebuf db 0
  4628 00002C1A C3                  <2> notbatch: ret 
  4629                              <1> %ifdef network.included
  4630                              <1> 	%include 'source/programs/arp.asm'
  4631                              <1> %endif
  4632                              <1> %include 'source/programs/batch.asm'
  4633 00002C1B FF2C626174636800    <2> db 255,44,"batch",0
  4634                              <2> 	batchst: 
  4635 00002C23 8B3D[1C210000]      <2> 		mov edi, [currentcommandloc]
  4636 00002C29 81C706000000        <2> 		add edi, 6
  4637 00002C2F 803F00              <2> 		cmp byte [edi], 0
  4638 00002C32 0F846D000000        <2> 		je near nonamefound
  4639 00002C38 BE00004000          <2> 		mov esi, 0x400000
  4640 00002C3D E806270000          <2> 		call loadfile
  4641 00002C42 89D0                <2> 		mov eax, edx
  4642 00002C44 3D94010000          <2> 		cmp eax, 404
  4643 00002C49 7465                <2> 		je goodbatchname
  4644 00002C4B BE[562C0000]        <2> 		mov esi, badbatchname
  4645 00002C50 E85DE3FFFF          <2> 		call print
  4646 00002C55 C3                  <2> 		ret
  4647 00002C56 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4648 00002C5F 20616C726561647920- <2>
  4649 00002C68 657869737473210A00  <2>
  4650 00002C71 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4651 00002C7A 746F20747970652061- <2>
  4652 00002C83 206E616D6520616674- <2>
  4653 00002C8C 65722074686520636F- <2>
  4654 00002C95 6D6D616E642E0A00    <2>
  4655 00002C9D 00000000            <2> 		esicache3 dd 0
  4656 00002CA1 00000000            <2> 		esicache2 dd 0
  4657                              <2> 	nonamefound:
  4658 00002CA5 BE[712C0000]        <2> 		mov esi, namenotfoundbatch
  4659 00002CAA E803E3FFFF          <2> 		call print
  4660 00002CAF C3                  <2> 		ret
  4661                              <2> 	goodbatchname:
  4662 00002CB0 BE00004000          <2> 		mov esi, 0x400000
  4663                              <2> 	batchcreate:
  4664 00002CB5 8935[9D2C0000]      <2> 		mov [esicache3], esi
  4665 00002CBB BF00008000          <2> 		mov edi, 0x800000
  4666 00002CC0 B00A                <2> 		mov al, 10
  4667 00002CC2 B307                <2> 		mov bl, 7
  4668 00002CC4 B404                <2> 		mov ah, 4
  4669 00002CC6 CD30                <2> 		int 30h
  4670 00002CC8 8935[A12C0000]      <2> 		mov [esicache2], esi
  4671 00002CCE 8A0E                <2> 		mov cl, [esi]
  4672 00002CD0 8B35[9D2C0000]      <2> 		mov esi, [esicache3]
  4673 00002CD6 BB[0A2D0000]        <2> 		mov ebx, exitword
  4674 00002CDB E87BF4FFFF          <2> 		call cndtest
  4675 00002CE0 3C01                <2> 		cmp al, 1
  4676 00002CE2 7411                <2> 		je endbatchcreate
  4677 00002CE4 3C02                <2> 		cmp al, 2
  4678 00002CE6 740D                <2> 		je endbatchcreate
  4679 00002CE8 8B35[A12C0000]      <2> 		mov esi, [esicache2]
  4680 00002CEE B00A                <2> 		mov al, 10
  4681 00002CF0 8806                <2> 		mov [esi], al
  4682 00002CF2 46                  <2> 		inc esi
  4683 00002CF3 EBC0                <2> 		jmp batchcreate
  4684                              <2> 	endbatchcreate:
  4685 00002CF5 8B35[9D2C0000]      <2> 		mov esi, [esicache3]
  4686 00002CFB 31C0                <2> 		xor eax, eax
  4687 00002CFD 8806                <2> 		mov [esi], al
  4688 00002CFF BE00004000          <2> 		mov esi, 0x400000
  4689 00002D04 E8A9E2FFFF          <2> 		call print
  4690 00002D09 C3                  <2> 		ret
  4691                              <2> 	
  4692 00002D0A 5C7800              <2> 	exitword db "\x",0
  4693 00002D0D 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4694 00002D16 6F20657869742E0A00  <2>
  4695                              <1> %ifdef gui.background
  4696                              <1> 	%include 'source/programs/background.asm'
  4697                              <1> %endif
  4698                              <1> %include 'source/programs/beep.asm'
  4699 00002D1F FF2C6265657000      <2> 	db 255,44,"beep",0
  4700                              <2> beep:
  4701 00002D26 B8[4B2D0000]        <2> 	mov eax, beepstart
  4702 00002D2B A3[6B020000]        <2> 	mov [soundpos], eax
  4703 00002D30 B8[4F2D0000]        <2> 	mov eax, beepend
  4704 00002D35 A3[6F020000]        <2> 	mov [soundendpos], eax
  4705 00002D3A C605[68020000]01    <2> 	mov byte [soundon], 1
  4706                              <2> waitforsoundendbeep:
  4707 00002D41 A0[68020000]        <2> 	mov al, [soundon]
  4708 00002D46 3C00                <2> 	cmp al, 0
  4709 00002D48 75F7                <2> 	jne waitforsoundendbeep
  4710 00002D4A C3                  <2> 	ret
  4711                              <2> 	
  4712                              <2> beepstart:
  4713 00002D4B 3200D111            <2> 	dw 50, 4561
  4714                              <2> beepend:
  4715                              <1> %ifdef dos.compatible
  4716                              <1> %else
  4717                              <1> 	%include 'source/programs/boot.asm'
  4718 00002D4F FF2C626F6F7400      <2> db 255,44,"boot",0
  4719                              <2> quickboot:
  4720                              <2> 	;load and jump to the bootloader
  4721                              <2> 	; mov ecx, 1
  4722                              <2> 	; xor ebx, ebx
  4723                              <2> 	; mov esi, 0x400000
  4724                              <2> 	; call diskr
  4725                              <2> 	; mov ax, LINEAR_SEL
  4726                              <2> 	; mov fs, ax
  4727                              <2> 	; mov esi, 0x400000
  4728                              <2> 	; mov edi, 0x7C00
  4729                              <2> 	; xor ebx, ebx
  4730                              <2> ; .lp:
  4731                              <2> 	; mov ecx, [esi+ebx]
  4732                              <2> 	; mov [fs:edi+ebx], ecx
  4733                              <2> 	; add ebx, 4
  4734                              <2> 	; cmp ebx, 512
  4735                              <2> 	; jb .lp
  4736 00002D56 66BB[662D]          <2> 	mov bx, bootload
  4737 00002D5A 66891D[CA0C0000]    <2> 	mov [realmodeptr], bx
  4738 00002D61 E949DEFFFF          <2> 	jmp realmode
  4739                              <2> [BITS 16]
  4740                              <2> bootload:
  4741 00002D66 B80300              <2> 	mov ax, 3
  4742 00002D69 31DB                <2> 	xor bx, bx
  4743 00002D6B CD10                <2> 	int 10h
  4744 00002D6D EA007C0000          <2> 	jmp 0:0x7C00
  4745                              <2> [BITS 32]
  4746                              <1> %endif
  4747                              <1> %include 'source/programs/cd.asm'
  4748 00002D72 FF2C636400          <2> db 255,44,"cd",0
  4749                              <2> cd:
  4750 00002D77 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  4751 00002D7D 81C603000000        <2> 	add esi, 3
  4752 00002D83 8B3D[588A0300]      <2> 	mov edi, [currentfolderloc]
  4753 00002D89 893D[548A0300]      <2> 	mov [lastfolderloc], edi
  4754 00002D8F 81C7[5C8A0300]      <2> 	add edi, currentfolder
  4755 00002D95 4F                  <2> 	dec edi
  4756 00002D96 66813E2E2E          <2> 	cmp word [esi], ".."
  4757 00002D9B 742A                <2> 	je .moveup
  4758 00002D9D 47                  <2> 	inc edi
  4759                              <2> .movedown:
  4760 00002D9E 8A06                <2> 	mov al, [esi]
  4761 00002DA0 8807                <2> 	mov [edi], al
  4762 00002DA2 47                  <2> 	inc edi
  4763 00002DA3 46                  <2> 	inc esi
  4764 00002DA4 3C00                <2> 	cmp al, 0
  4765 00002DA6 740A                <2> 	je .donecd
  4766 00002DA8 81FF[5C8C0300]      <2> 	cmp edi, currentfolderend
  4767 00002DAE 72EE                <2> 	jb .movedown
  4768 00002DB0 30C0                <2> 	xor al, al
  4769                              <2> .donecd:
  4770 00002DB2 4F                  <2> 	dec edi
  4771 00002DB3 C6072F              <2> 	mov byte [edi], '/'
  4772 00002DB6 47                  <2> 	inc edi
  4773 00002DB7 C60700              <2> 	mov byte [edi], 0
  4774 00002DBA 81EF[5C8A0300]      <2> 	sub edi, currentfolder
  4775 00002DC0 893D[588A0300]      <2> 	mov [currentfolderloc], edi
  4776 00002DC6 C3                  <2> 	ret
  4777                              <2> .moveup:
  4778 00002DC7 31C0                <2> 	xor eax, eax
  4779 00002DC9 A3[548A0300]        <2> 	mov [lastfolderloc], eax
  4780                              <2> .moveuploop:
  4781 00002DCE 4F                  <2> 	dec edi
  4782 00002DCF 8A07                <2> 	mov al, [edi]
  4783 00002DD1 81FF[5C8A0300]      <2> 	cmp edi, currentfolder
  4784 00002DD7 763B                <2> 	jbe .moveupover
  4785 00002DD9 3C2F                <2> 	cmp al, '/'
  4786 00002DDB 75F1                <2> 	jne .moveuploop
  4787 00002DDD C6072F              <2> 	mov byte [edi], '/'
  4788 00002DE0 47                  <2> 	inc edi
  4789 00002DE1 C60700              <2> 	mov byte [edi], 0
  4790 00002DE4 81EF[5C8A0300]      <2> 	sub edi, currentfolder
  4791 00002DEA 893D[588A0300]      <2> 	mov [currentfolderloc], edi
  4792 00002DF0 81C7[5C8A0300]      <2> 	add edi, currentfolder
  4793 00002DF6 4F                  <2> 	dec edi
  4794                              <2> .lastfolder:
  4795 00002DF7 4F                  <2> 	dec edi
  4796 00002DF8 8A07                <2> 	mov al, [edi]
  4797 00002DFA 81FF[5C8A0300]      <2> 	cmp edi, currentfolder
  4798 00002E00 7604                <2> 	jbe .donemoveup
  4799 00002E02 3C2F                <2> 	cmp al, '/'
  4800 00002E04 75F1                <2> 	jne .lastfolder
  4801                              <2> .donemoveup:
  4802 00002E06 47                  <2> 	inc edi
  4803 00002E07 81EF[5C8A0300]      <2> 	sub edi, currentfolder
  4804 00002E0D 893D[548A0300]      <2> 	mov [lastfolderloc], edi
  4805 00002E13 C3                  <2> 	ret
  4806                              <2> .moveupover:
  4807 00002E14 BF[5C8A0300]        <2> 	mov edi, currentfolder
  4808 00002E19 C6072F              <2> 	mov byte [edi], '/'
  4809 00002E1C 47                  <2> 	inc edi
  4810 00002E1D C60700              <2> 	mov byte [edi], 0
  4811 00002E20 31C0                <2> 	xor eax, eax
  4812 00002E22 A3[548A0300]        <2> 	mov [lastfolderloc], eax
  4813 00002E27 40                  <2> 	inc eax
  4814 00002E28 A3[588A0300]        <2> 	mov [currentfolderloc], eax
  4815 00002E2D C3                  <2> 	ret
  4816                              <1> %include 'source/programs/charmap.asm'
  4817 00002E2E 00                  <2> charmapnum db 0
  4818 00002E2F FF2C636861726D6170- <2> db 255,44,"charmap",0
  4819 00002E38 00                  <2>
  4820 00002E39 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  4821 00002E3F 81C609000000        <2> 	add esi, 9
  4822 00002E45 803E00              <2> 	cmp byte [esi], 0
  4823 00002E48 7412                <2> 	je .nospecific
  4824 00002E4A E857F6FFFF          <2> 	call cnvrthextxt
  4825 00002E4F 6689C8              <2> 	mov ax, cx
  4826 00002E52 66BB0700            <2> 	mov bx, 7
  4827 00002E56 E8E5E7FFFF          <2> 	call prcharq
  4828 00002E5B C3                  <2> 	ret
  4829                              <2> .nospecific:
  4830 00002E5C 66BB0700            <2> 	mov bx, 7
  4831 00002E60 66B82000            <2> 	mov ax, " "
  4832 00002E64 C605[2E2E0000]00    <2> 	mov byte [charmapnum], 0
  4833 00002E6B E8D0E7FFFF          <2> 	call prcharq
  4834 00002E70 E8CBE7FFFF          <2> 	call prcharq
  4835 00002E75 E8C6E7FFFF          <2> 	call prcharq
  4836 00002E7A E8C1E7FFFF          <2> 	call prcharq
  4837 00002E7F 66B83000            <2> 	mov ax, "0"
  4838                              <2> charmapnumprnt:
  4839 00002E83 E8B8E7FFFF          <2> 	call prcharq
  4840 00002E88 6640                <2> 	inc ax
  4841 00002E8A 6650                <2> 	push ax
  4842 00002E8C 66B82000            <2> 	mov ax, " "
  4843 00002E90 E8ABE7FFFF          <2> 	call prcharq
  4844 00002E95 6658                <2> 	pop ax
  4845 00002E97 663D3900            <2> 	cmp ax, "9"
  4846 00002E9B 76E6                <2> 	jbe charmapnumprnt
  4847 00002E9D 66B84100            <2> 	mov ax, "A"
  4848                              <2> charmapnumprnt2:
  4849 00002EA1 E89AE7FFFF          <2> 	call prcharq
  4850 00002EA6 6640                <2> 	inc ax
  4851 00002EA8 6650                <2> 	push ax
  4852 00002EAA 66B82000            <2> 	mov ax, " "
  4853 00002EAE E88DE7FFFF          <2> 	call prcharq
  4854 00002EB3 6658                <2> 	pop ax
  4855 00002EB5 663D4700            <2> 	cmp ax, "G"
  4856 00002EB9 72E6                <2> 	jb charmapnumprnt2
  4857                              <2> 	
  4858 00002EBB BE[CB710000]        <2> 	mov esi, line
  4859 00002EC0 E8CEE0FFFF          <2> 	call printquiet
  4860 00002EC5 6631C0              <2> 	xor ax, ax
  4861 00002EC8 6689C1              <2> 	mov cx, ax
  4862 00002ECB E85FF4FFFF          <2> 	call showhexsmall
  4863 00002ED0 E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4864                              <2> charmapcopy:
  4865 00002ED5 6640                <2> 	inc ax
  4866 00002ED7 6650                <2> 	push ax
  4867 00002ED9 663D0800            <2> 	cmp ax, 8
  4868 00002EDD 7466                <2> 	je charmapnocopy
  4869 00002EDF 663D0900            <2> 	cmp ax, 9
  4870 00002EE3 7460                <2> 	je charmapnocopy
  4871 00002EE5 663D0A00            <2> 	cmp ax, 10
  4872 00002EE9 745A                <2> 	je charmapnocopy
  4873 00002EEB 663D0D00            <2> 	cmp ax, 13
  4874 00002EEF 7454                <2> 	je charmapnocopy
  4875 00002EF1 663DFF00            <2> 	cmp ax, 255
  4876 00002EF5 744E                <2> 	je charmapnocopy
  4877 00002EF7 663D0001            <2> 	cmp ax, 256
  4878 00002EFB 7443                <2> 	je nomorecharmap
  4879 00002EFD E83EE7FFFF          <2> 	call prcharq
  4880 00002F02 66B82000            <2> 	mov ax, " "
  4881 00002F06 E835E7FFFF          <2> 	call prcharq
  4882 00002F0B 6658                <2> 	pop ax
  4883                              <2> charmapcopycheck:
  4884 00002F0D FE05[2E2E0000]      <2> 	inc byte [charmapnum]
  4885 00002F13 803D[2E2E0000]10    <2> 	cmp byte [charmapnum], 16
  4886 00002F1A 72B9                <2> 	jb charmapcopy
  4887 00002F1C 6650                <2> 	push ax
  4888 00002F1E BE[CB710000]        <2> 	mov esi, line
  4889 00002F23 E86BE0FFFF          <2> 	call printquiet
  4890 00002F28 6658                <2> 	pop ax
  4891 00002F2A 3CFF                <2> 	cmp al, 255
  4892 00002F2C 7412                <2> 	je nomorecharmap
  4893 00002F2E 88C1                <2> 	mov cl, al
  4894 00002F30 FEC1                <2> 	inc cl
  4895 00002F32 E8F8F3FFFF          <2> 	call showhexsmall
  4896 00002F37 C605[2E2E0000]00    <2> 	mov byte [charmapnum], 0
  4897 00002F3E EB95                <2> 	jmp charmapcopy
  4898                              <2> nomorecharmap:
  4899 00002F40 E924EFFFFF          <2> 	jmp nwcmd
  4900                              <2> charmapnocopy:
  4901 00002F45 6650                <2> 	push ax
  4902 00002F47 66B82000            <2> 	mov ax, " "
  4903 00002F4B E8F0E6FFFF          <2> 	call prcharq
  4904 00002F50 E8EBE6FFFF          <2> 	call prcharq
  4905 00002F55 6658                <2> 	pop ax
  4906 00002F57 EBB4                <2> 	jmp charmapcopycheck
  4907                              <1> %ifdef gui.included
  4908                              <1> 	%include 'source/programs/circle.asm'
  4909 00002F59 FF2C636972636C6500  <2> db 255,44,"circle",0
  4910                              <2> circle:
  4911 00002F62 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  4912 00002F68 81C607000000        <2> 	add esi, 7
  4913 00002F6E 66B91000            <2> 	mov cx, 16
  4914 00002F72 30C0                <2> 	xor al, al
  4915 00002F74 3806                <2> 	cmp [esi], al
  4916 00002F76 7405                <2> 	je .nocmdline
  4917 00002F78 E872F5FFFF          <2> 	call cnvrttxt
  4918                              <2> .nocmdline:
  4919 00002F7D E8A3060000          <2> 	call linetester.stime
  4920 00002F82 E857000000          <2> 	call fcircle.nocmdline
  4921 00002F87 E8B1060000          <2> 	call linetester.etime
  4922 00002F8C 53                  <2> 	push ebx
  4923 00002F8D 57                  <2> 	push edi
  4924 00002F8E E81AE6FFFF          <2> 	call getchar
  4925 00002F93 59                  <2> 	pop ecx
  4926 00002F94 E874F4FFFF          <2> 	call showdec
  4927 00002F99 BE[CB360000]        <2> 	mov esi, linetester.msgcircle
  4928 00002F9E E8F0DFFFFF          <2> 	call printquiet
  4929 00002FA3 59                  <2> 	pop ecx
  4930 00002FA4 E864F4FFFF          <2> 	call showdec
  4931 00002FA9 BE[E2360000]        <2> 	mov esi, linetester.msgtime
  4932 00002FAE E8E0DFFFFF          <2> 	call printquiet
  4933 00002FB3 E8592B0000          <2> 	call reloadallgraphics
  4934 00002FB8 C3                  <2> 	ret
  4935                              <2> 	
  4936 00002FB9 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  4937 00002FC2 00                  <2>
  4938                              <2> fcircle:	
  4939 00002FC3 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  4940 00002FC9 81C608000000        <2> 	add esi, 8
  4941 00002FCF 66B91000            <2> 	mov cx, 16
  4942 00002FD3 30C0                <2> 	xor al, al
  4943 00002FD5 3806                <2> 	cmp [esi], al
  4944 00002FD7 7405                <2> 	je .nocmdline
  4945 00002FD9 E811F5FFFF          <2> 	call cnvrttxt
  4946                              <2> .nocmdline:
  4947 00002FDE 6689C8              <2> 	mov ax, cx
  4948 00002FE1 66D1E1              <2> 	shl cx, 1
  4949 00002FE4 6689CA              <2> 	mov dx, cx
  4950 00002FE7 663B15[FE440000]    <2> 	cmp dx, [resolutionx]
  4951 00002FEE 731B                <2> 	jae .done
  4952 00002FF0 663B0D[00450000]    <2> 	cmp cx, [resolutiony]
  4953 00002FF7 7312                <2> 	jae .done
  4954 00002FF9 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  4955 00003000 31FF                <2> 	xor edi, edi
  4956 00003002 803D[F0710000]01    <2> 	cmp byte [guion], 1
  4957 00003009 7401                <2> 	je .lp
  4958 0000300B C3                  <2> .done ret
  4959                              <2> .lp:
  4960 0000300C 6629C2              <2> 	sub dx, ax
  4961 0000300F 6629C1              <2> 	sub cx, ax
  4962 00003012 60                  <2> 	pusha
  4963 00003013 E818260000          <2> 	call fillcircle
  4964 00003018 61                  <2> 	popa
  4965 00003019 47                  <2> 	inc edi
  4966 0000301A 660335[64020000]    <2> 	add si, [timenanoseconds]
  4967 00003021 6601C2              <2> 	add dx, ax
  4968 00003024 6601C2              <2> 	add dx, ax
  4969 00003027 6601C2              <2> 	add dx, ax
  4970 0000302A 6601C1              <2> 	add cx, ax
  4971 0000302D 663B15[FE440000]    <2> 	cmp dx, [resolutionx]
  4972 00003034 72D6                <2> 	jb .lp
  4973 00003036 6689C2              <2> 	mov dx, ax
  4974 00003039 6601C2              <2> 	add dx, ax
  4975 0000303C 6601C1              <2> 	add cx, ax
  4976 0000303F 6601C1              <2> 	add cx, ax
  4977 00003042 663B0D[00450000]    <2> 	cmp cx, [resolutiony]
  4978 00003049 72C1                <2> 	jb .lp
  4979 0000304B C3                  <2> 	ret
  4980                              <1> %endif
  4981                              <1> %include 'source/programs/clear.asm'
  4982 0000304C FF2C636C65617200    <2> db 255,44,"clear",0
  4983 00003054 E808E0FFFF          <2> 		call clear
  4984 00003059 C3                  <2> 		ret 
  4985                              <1> %include 'source/programs/cpuid.asm'
  4986 0000305A FF2C637075696400    <2> db 255,44,"cpuid",0
  4987 00003062 31C0                <2> 	xor eax, eax
  4988 00003064 0FA2                <2> 	cpuid
  4989 00003066 891D[B7300000]      <2> 	mov [cpuidbuf], ebx
  4990 0000306C 8915[BB300000]      <2> 	mov [cpuidbuf + 4], edx
  4991 00003072 890D[BF300000]      <2> 	mov [cpuidbuf + 8], ecx
  4992 00003078 BE[B7300000]        <2> 	mov esi, cpuidbuf
  4993 0000307D E830DFFFFF          <2> 	call print
  4994 00003082 BE[CB710000]        <2> 	mov esi, line
  4995 00003087 E826DFFFFF          <2> 	call print
  4996 0000308C B801000000          <2> 	mov eax, 1
  4997 00003091 0FA2                <2> 	cpuid
  4998 00003093 89C1                <2> 	mov ecx, eax
  4999 00003095 C605[2E230000]02    <2> 	mov byte [firsthexshown], 2
  5000 0000309C E8A2F2FFFF          <2> 	call showhex
  5001 000030A1 B808000080          <2> 	mov eax, 0x80000008
  5002 000030A6 0FA2                <2> 	cpuid
  5003 000030A8 89C1                <2> 	mov ecx, eax
  5004 000030AA C605[2E230000]02    <2> 	mov byte [firsthexshown], 2
  5005 000030B1 E88DF2FFFF          <2> 	call showhex
  5006 000030B6 C3                  <2> 	ret
  5007                              <2> 	
  5008 000030B7 00<rept>            <2> cpuidbuf times 13 db 0
  5009                              <2> cpuidvendorend:
  5010                              <1> %ifdef network.included
  5011                              <1> 	%include 'source/programs/dhcp.asm'
  5012                              <1> %endif
  5013                              <1> %ifdef disk.none
  5014                              <1> %else
  5015                              <1> 	%include 'source/programs/dos.asm'
  5016 000030C4 FF2C646F7300        <2> db 255,44,"dos",0
  5017                              <2> dosrunner:
  5018 000030CA 8925[508A0300]      <2> 	mov [previousstack], esp
  5019 000030D0 8B3D[1C210000]      <2> 	mov edi, [currentcommandloc]
  5020 000030D6 81C704000000        <2> 	add edi, 4
  5021 000030DC BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5022 000030E1 E862220000          <2> 	call loadfile
  5023 000030E6 8B3D[1C210000]      <2> 	mov edi, [currentcommandloc]
  5024 000030EC 81C704000000        <2> 	add edi, 4
  5025 000030F2 81FA94010000        <2> 	cmp edx, 404
  5026 000030F8 0F845E000000        <2> 	je near .noprogfound
  5027 000030FE BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5028 00003103 31C9                <2> 	xor ecx, ecx
  5029                              <2> .findparams:
  5030 00003105 47                  <2> 	inc edi
  5031 00003106 8A07                <2> 	mov al, [edi]
  5032 00003108 3C20                <2> 	cmp al, " "
  5033 0000310A 75F9                <2> 	jne .findparams
  5034                              <2> .copyparams:
  5035 0000310C 8A07                <2> 	mov al, [edi]
  5036 0000310E 8803                <2> 	mov [ebx], al
  5037 00003110 43                  <2> 	inc ebx
  5038 00003111 47                  <2> 	inc edi
  5039 00003112 41                  <2> 	inc ecx
  5040 00003113 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5041 00003119 7304                <2> 	jae .nomoreparams
  5042 0000311B 3C00                <2> 	cmp al, 0
  5043 0000311D 75ED                <2> 	jne .copyparams
  5044                              <2> .nomoreparams:
  5045 0000311F 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5046 00003125 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5047 00003129 8ED8                <2> 	mov ds, ax
  5048 0000312B 8EC0                <2> 	mov es, ax
  5049 0000312D 8EE0                <2> 	mov fs, ax
  5050 0000312F 8EE8                <2> 	mov gs, ax
  5051 00003131 31C0                <2> 	xor eax, eax
  5052 00003133 31DB                <2> 	xor ebx, ebx
  5053 00003135 31C9                <2> 	xor ecx, ecx
  5054 00003137 31D2                <2> 	xor edx, edx
  5055 00003139 31FF                <2> 	xor edi, edi
  5056 0000313B 31F6                <2> 	xor esi, esi
  5057 0000313D 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5058 00003144 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5059 00003148 6689DA              <2> 	mov dx, bx
  5060 0000314B 8EC3                <2> 	mov es, bx
  5061 0000314D 8EE3                <2> 	mov fs, bx
  5062 0000314F 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5063 00003153 8EEB                <2> 	mov gs, bx
  5064 00003155 8B25[508A0300]      <2> 	mov esp, [previousstack]
  5065 0000315B C3                  <2> 	ret
  5066                              <2> .noprogfound:
  5067 0000315C BE[92710000]        <2> 	mov esi, notfound1
  5068 00003161 E84CDEFFFF          <2> 	call print
  5069 00003166 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  5070 0000316C 81C604000000        <2> 	add esi, 4
  5071 00003172 E83BDEFFFF          <2> 	call print
  5072 00003177 BE[9A710000]        <2> 	mov esi, notfound2
  5073 0000317C E831DEFFFF          <2> 	call print
  5074 00003181 C3                  <2> 	ret
  5075                              <2> 	
  5076                              <1> %endif
  5077                              <1> %include 'source/programs/dump.asm'
  5078 00003182 FF2C64756D7000      <2> db 255,44,"dump",0
  5079 00003189 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  5080 0000318F 81C605000000        <2> 	add esi, 5
  5081 00003195 31C9                <2> 	xor ecx, ecx
  5082 00003197 66B83078            <2> 	mov ax, "0x"
  5083 0000319B 663906              <2> 	cmp [esi], ax
  5084 0000319E 740A                <2> 	je dumphexin
  5085 000031A0 E84AF3FFFF          <2> 	call cnvrttxt
  5086 000031A5 E910000000          <2> 	jmp dumphexnow
  5087                              <2> dumphexin:
  5088 000031AA 81C602000000        <2> 	add esi, 2
  5089 000031B0 E8F1F2FFFF          <2> 	call cnvrthextxt
  5090 000031B5 E900000000          <2> 	jmp dumphexnow
  5091                              <2> dumphexnow:
  5092 000031BA 89CF                <2> 	mov edi, ecx
  5093 000031BC 89FE                <2> 	mov esi, edi
  5094 000031BE 81C680030000        <2> 	add esi, 896
  5095                              <2> dumphexloop:
  5096 000031C4 8B0F                <2> 	mov ecx, [edi]
  5097 000031C6 C605[2E230000]05    <2> 	mov byte [firsthexshown],5
  5098 000031CD E871F1FFFF          <2> 	call showhex
  5099 000031D2 81C704000000        <2> 	add edi, 4
  5100 000031D8 39F7                <2> 	cmp edi, esi
  5101 000031DA 72E8                <2> 	jb dumphexloop
  5102 000031DC E849E8FFFF          <2> 	call termcopy
  5103 000031E1 C3                  <2> 	ret 
  5104                              <1> %include 'source/programs/echo.asm'
  5105                              <2> 
  5106 000031E2 FF2C6563686F00      <2> db 255,44,"echo",0
  5107                              <2> 	echoprog:
  5108 000031E9 8B35[1C210000]      <2> 		mov esi, [currentcommandloc]
  5109 000031EF 81C605000000        <2> 		add esi, 5
  5110 000031F5 8A06                <2> 		mov al, [esi]
  5111 000031F7 E8B6DDFFFF          <2> 		call print
  5112 000031FC BE[CB710000]        <2> 		mov esi, line
  5113 00003201 E8ACDDFFFF          <2> 		call print
  5114 00003206 C3                  <2> 		ret
  5115 00003207 BB[D08C0300]        <2> 	echovr:	mov ebx, variables
  5116 0000320C BF06000000          <2> 		mov edi, 6
  5117 00003211 E83C000000          <2> 		call nxtvrech
  5118 00003216 E954000000          <2> 		jmp prntvr2
  5119 0000321B B13D                <2> 	echvar:	mov cl, '='
  5120 0000321D 43                  <2> 		inc ebx
  5121 0000321E 8A03                <2> 		mov al, [ebx]
  5122 00003220 3C00                <2> 		cmp al, 0
  5123 00003222 742E                <2> 		je nxtvrech
  5124 00003224 3C3D                <2> 		cmp al, '='
  5125 00003226 7422                <2> 		je nxtvrechb1
  5126 00003228 8B35[1C210000]      <2> 		mov esi, [currentcommandloc]
  5127 0000322E 01FE                <2> 		add esi, edi
  5128 00003230 E826EFFFFF          <2> 		call cndtest
  5129 00003235 3C02                <2> 		cmp al, 2
  5130 00003237 7432                <2> 		je prntvr
  5131 00003239 3C01                <2> 		cmp al, 1
  5132 0000323B 742E                <2> 		je prntvr
  5133 0000323D 8B35[1C210000]      <2> 		mov esi, [currentcommandloc]
  5134 00003243 01FE                <2> 		add esi, edi
  5135 00003245 E908000000          <2> 		jmp nxtvrech
  5136                              <2> 	nxtvrechb1:
  5137 0000324A 81EB02000000        <2> 		sub ebx, 2
  5138 00003250 EBC9                <2> 		jmp echvar
  5139 00003252 8A03                <2> 	nxtvrech: mov al, [ebx]
  5140 00003254 3C05                <2> 		cmp al, 5
  5141 00003256 740A                <2> 		je nxtvrec2
  5142 00003258 43                  <2> 		inc ebx
  5143 00003259 81FB[D09C0300]      <2> 		cmp ebx, varend
  5144 0000325F 72F1                <2> 		jb nxtvrech
  5145 00003261 C3                  <2> 		ret
  5146 00003262 43                  <2> 	nxtvrec2: inc ebx
  5147 00003263 8A03                <2> 		mov al, [ebx]
  5148 00003265 3C04                <2> 		cmp al, 4
  5149 00003267 74B2                <2> 		je echvar
  5150 00003269 EBE7                <2> 		jmp nxtvrech
  5151 0000326B 43                  <2> 	prntvr: inc ebx
  5152 0000326C 89DE                <2> 		mov esi, ebx
  5153 0000326E C3                  <2> 		ret
  5154 0000326F E83EDDFFFF          <2> 	prntvr2: call print
  5155 00003274 BE[CB710000]        <2> 		mov esi, line
  5156 00003279 E834DDFFFF          <2> 		call print
  5157 0000327E C3                  <2> 		ret 
  5158                              <1> %include 'source/programs/else.asm'
  5159 0000327F FF2C656C736500      <2> 	db 255,44,"else",0
  5160 00003286 31C0                <2> elsecmd:	xor eax, eax
  5161 00003288 3805[CA8C0300]      <2> 	cmp [BATCHISON], al
  5162 0000328E 0F8486F9FFFF        <2> 	je near notbatch
  5163 00003294 A0[618C0300]        <2> 	mov al, [IFON]
  5164 00003299 BE[628C0300]        <2> 	mov esi, IFTRUE
  5165 0000329E 01C6                <2> 	add esi, eax
  5166 000032A0 8A06                <2> 	mov al, [esi]
  5167 000032A2 3401                <2> 	xor al, 1
  5168 000032A4 8806                <2> 	mov [esi], al
  5169 000032A6 C3                  <2> 	ret 
  5170                              <1> %include 'source/programs/exit.asm'
  5171 000032A7 FF2C6578697400      <2> db 255,44,"exit",0
  5172 000032AE 803D[608C0300]01    <2> 	cmp byte [ranboot], 1
  5173 000032B5 0F8442EBFFFF        <2> 	je near returnfromexp
  5174 000032BB E928EAFFFF          <2> 	jmp nobootfile
  5175                              <1> %include 'source/programs/fi.asm'
  5176 000032C0 FF2C666900          <2> 	db 255,44,"fi",0
  5177 000032C5 30C0                <2> 	xor al, al
  5178 000032C7 3805[CA8C0300]      <2> 	cmp [BATCHISON], al
  5179 000032CD 0F8447F9FFFF        <2> 	je near notbatch
  5180 000032D3 B001                <2> fi:	mov al, 1
  5181 000032D5 2805[618C0300]      <2> 	sub [IFON],al
  5182 000032DB C3                  <2> 	ret 
  5183                              <1> %ifdef gui.included
  5184                              <1> 	%include 'source/programs/gui.asm'
  5185 000032DC FF2C67756900        <2> db 255,44,"gui",0
  5186                              <2> guiswitcher:
  5187 000032E2 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  5188 000032E8 81C604000000        <2> 	add esi, 4
  5189 000032EE 31C9                <2> 	xor ecx, ecx
  5190 000032F0 803E00              <2> 	cmp byte [esi], 0
  5191 000032F3 740A                <2> 	je .nomodepref
  5192 000032F5 E8ACF1FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5193 000032FA E907000000          <2> 	jmp .modepref
  5194                              <2> .nomodepref:
  5195 000032FF 51                  <2> 	push ecx
  5196 00003300 E85CDDFFFF          <2> 	call clear
  5197 00003305 59                  <2> 	pop ecx
  5198                              <2> .modepref:
  5199 00003306 66BB[0E41]          <2> 	mov bx, guiswitch
  5200 0000330A 66891D[CA0C0000]    <2> 	mov [realmodeptr], bx
  5201 00003311 BB[21330000]        <2> 	mov ebx, guiswitchret
  5202 00003316 891D[C60C0000]      <2> 	mov [realmodereturn], ebx
  5203 0000331C E98ED8FFFF          <2> 	jmp realmode
  5204                              <2> guiswitchret:
  5205 00003321 65803D[F0710000]01  <2> 	cmp byte [gs:guion], 1
  5206 00003329 7401                <2> 	je .cont
  5207 0000332B C3                  <2> 	ret
  5208                              <2> .cont:
  5209 0000332C BF[EC420000]        <2> 	mov edi, VBEMODEBLOCK
  5210                              <2> .loop:
  5211 00003331 658B07              <2> 	mov eax, [gs:edi]
  5212 00003334 8907                <2> 	mov [edi], eax
  5213 00003336 47                  <2> 	inc edi
  5214 00003337 81FF[F0450000]      <2> 	cmp edi, VBEEND
  5215 0000333D 72F2                <2> 	jb .loop
  5216 0000333F A1[14450000]        <2> 	mov eax, [physbaseptr]
  5217 00003344 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5218 0000334A C1E304              <2> 	shl ebx, 4
  5219 0000334D 29D8                <2> 	sub eax, ebx
  5220 0000334F A3[14450000]        <2> 	mov [physbaseptr], eax
  5221 00003354 C605[3E160000]00    <2> 	mov byte [termguion], 0
  5222 0000335B BE[E5A40300]        <2> 	mov esi, graphicstable
  5223 00003360 30C0                <2> 	xor al, al
  5224                              <2> .clear:
  5225 00003362 8806                <2> 	mov [esi], al
  5226 00003364 46                  <2> 	inc esi
  5227 00003365 81FE[E5A60300]      <2> 	cmp esi, graphicstableend
  5228 0000336B 72F5                <2> 	jb .clear
  5229 0000336D E838290000          <2> 	call guisetup
  5230                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5231 00003372 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  5232 00003379 668B0D[00450000]    <2> 	mov cx, [resolutiony]
  5233 00003380 6689D3              <2> 	mov bx, dx
  5234 00003383 6689C8              <2> 	mov ax, cx
  5235 00003386 66D1EB              <2> 	shr bx, 1
  5236 00003389 66D1E8              <2> 	shr ax, 1
  5237 0000338C 6689DA              <2> 	mov dx, bx
  5238 0000338F 66D1EA              <2> 	shr dx, 1
  5239 00003392 6689C1              <2> 	mov cx, ax
  5240 00003395 66D1E9              <2> 	shr cx, 1
  5241 00003398 6601D3              <2> 	add bx, dx
  5242 0000339B 6601C8              <2> 	add ax, cx
  5243 0000339E 66D1E9              <2> 	shr cx, 1
  5244 000033A1 66C1EB03            <2> 	shr bx, 3
  5245 000033A5 66C1E303            <2> 	shl bx, 3
  5246 000033A9 66C1E804            <2> 	shr ax, 4
  5247 000033AD 66C1E004            <2> 	shl ax, 4
  5248 000033B1 66891D[AF5E0000]    <2> 	mov [termwindow], bx
  5249 000033B8 66A3[B15E0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5250 000033BE BE[AF5E0000]        <2> 	mov esi, termwindow
  5251 000033C3 31DB                <2> 	xor ebx, ebx
  5252 000033C5 6631C0              <2> 	xor ax, ax
  5253 000033C8 E80F300000          <2> 	call showwindow
  5254 000033CD E81F120000          <2> 	call cursorgui
  5255 000033D2 E88ADCFFFF          <2> 	call clear
  5256 000033D7 C3                  <2> 	ret
  5257                              <2> 	
  5258                              <1> %endif
  5259                              <1> %include 'source/programs/help.asm'
  5260 000033D8 FF2C68656C7000      <2> db 255,44,"help",0
  5261                              <2> lscmd:	
  5262 000033DF B00D                <2> 		mov al, 13
  5263 000033E1 E85AE2FFFF          <2> 		call prcharq
  5264 000033E6 BE[72250000]        <2> 		mov esi, progstart
  5265 000033EB BB[0E410000]        <2> 		mov ebx, progend
  5266 000033F0 BE[50860300]        <2> dir:	mov esi, fileindex
  5267 000033F5 8A06                <2> 	dirnxt:	mov al, [esi]
  5268 000033F7 30E4                <2> 		xor ah, ah
  5269 000033F9 3CFF                <2> 		cmp al, 255
  5270 000033FB 7415                <2> 		je dirfnd
  5271 000033FD 46                  <2> 		inc esi
  5272 000033FE 81FE[508A0300]      <2> 		cmp esi,  fileindexend
  5273 00003404 7339                <2> 		jae dirdn
  5274 00003406 EBED                <2> 		jmp dirnxt
  5275                              <2> 	dirfnd3:
  5276 00003408 46                  <2> 		inc esi
  5277 00003409 81FE[508A0300]      <2> 		cmp esi, fileindexend
  5278 0000340F 76E4                <2> 		jbe dirnxt
  5279 00003411 4E                  <2> 		dec esi
  5280 00003412 46                  <2> 	dirfnd:	inc esi
  5281 00003413 8A06                <2> 		mov al, [esi]
  5282 00003415 30E4                <2> 		xor ah, ah
  5283 00003417 3C2C                <2> 		cmp al, 44
  5284 00003419 740B                <2> 		je dirfnd2
  5285 0000341B 46                  <2> 		inc esi
  5286 0000341C 81FE[508A0300]      <2> 		cmp esi,  fileindexend
  5287 00003422 731B                <2> 		jae dirdn
  5288 00003424 EBCF                <2> 		jmp dirnxt
  5289 00003426 46                  <2> 	dirfnd2: inc esi
  5290 00003427 E867DBFFFF          <2> 		call printquiet
  5291 0000342C 56                  <2> 		push esi
  5292 0000342D B009                <2> 		mov al, 9
  5293 0000342F E80CE2FFFF          <2> 		call prcharq
  5294 00003434 5E                  <2> 		pop esi
  5295 00003435 81FE[508A0300]      <2> 		cmp esi,  fileindexend
  5296 0000343B 7302                <2> 		jae dirdn
  5297 0000343D EBB6                <2> 		jmp dirnxt
  5298 0000343F BE[CB710000]        <2> 	dirdn:	mov esi, line
  5299 00003444 E869DBFFFF          <2> 			call print
  5300 00003449 C3                  <2> 			ret
  5301 0000344A 00                  <2> currentdir db 0
  5302                              <1> %include 'source/programs/if.asm'
  5303 0000344B FF2C696600          <2> 	db 255,44,"if",0
  5304 00003450 30C0                <2> ifcmd:	xor al, al
  5305 00003452 3805[CA8C0300]      <2> 	cmp [BATCHISON], al
  5306 00003458 0F84BCF7FFFF        <2> 	je near notbatch
  5307 0000345E 8B1D[1C210000]      <2> 	mov ebx, [currentcommandloc]
  5308 00003464 81C303000000        <2> 	add ebx, 3
  5309 0000346A 89DE                <2> 	mov esi, ebx
  5310 0000346C 8A06                <2> chkeqsn: mov al, [esi]
  5311 0000346E 3C00                <2> 	cmp al, 0
  5312 00003470 0F84A4F7FFFF        <2> 	je near notbatch
  5313 00003476 3C3D                <2> 	cmp al, '='
  5314 00003478 0F8403000000        <2> 	je near chkeqdn
  5315 0000347E 46                  <2> 	inc esi
  5316 0000347F EBEB                <2> 	jmp chkeqsn
  5317 00003481 B000                <2> chkeqdn: mov al, 0 
  5318 00003483 8806                <2> 	mov [esi], al
  5319 00003485 46                  <2> 	inc esi
  5320 00003486 E895ECFFFF          <2> 	call tester
  5321 0000348B 3C01                <2> 	cmp al, 1
  5322 0000348D 0F8405000000        <2> 	je near trueif
  5323 00003493 E91C000000          <2> 	jmp falseif
  5324 00003498 31C0                <2> trueif:	xor eax, eax
  5325 0000349A A0[618C0300]        <2> 	mov al, [IFON]
  5326 0000349F FEC0                <2> 	inc al
  5327 000034A1 A2[618C0300]        <2> 	mov [IFON], al
  5328 000034A6 30E4                <2> 	xor ah, ah
  5329 000034A8 BE[628C0300]        <2> 	mov esi, IFTRUE
  5330 000034AD 01C6                <2> 	add esi, eax
  5331 000034AF B401                <2> 	mov ah, 1
  5332 000034B1 8826                <2> 	mov [esi], ah
  5333 000034B3 C3                  <2> 	ret 
  5334 000034B4 31C0                <2> falseif: xor eax, eax
  5335 000034B6 A0[618C0300]        <2> 	mov al, [IFON]
  5336 000034BB FEC0                <2> 	inc al
  5337 000034BD A2[618C0300]        <2> 	mov [IFON], al
  5338 000034C2 30E4                <2> 	xor ah, ah
  5339 000034C4 BE[628C0300]        <2> 	mov esi, IFTRUE
  5340 000034C9 01C6                <2> 	add esi, eax
  5341 000034CB 30E4                <2> 	xor ah, ah
  5342 000034CD 8826                <2> 	mov [esi], ah
  5343 000034CF C3                  <2> 	ret 
  5344                              <1> %ifdef network.included
  5345                              <1> 	%include 'source/programs/ipconfig.asm'
  5346                              <1> %endif
  5347                              <1> %include 'source/programs/keycode.asm'
  5348 000034D0 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5349 000034D9 00                  <2>
  5350                              <2> keycode:
  5351 000034DA 66C705[11160000]00- <2> 	mov word [trans], 0
  5352 000034E2 00                  <2>
  5353 000034E3 C605[27540000]00    <2> 	mov byte [threadson], 0
  5354                              <2> %ifdef io.serial
  5355                              <2> .noserial:
  5356                              <2> 	hlt
  5357                              <2> 	mov dx, [serial.address]
  5358                              <2> 	in al, dx
  5359                              <2> 	cmp al, 0
  5360                              <2> 	je .noserial
  5361                              <2> 	mov cl, al
  5362                              <2> 	call showhexsmall
  5363                              <2> 	cmp al, 0x1B
  5364                              <2> 	jne .noserial
  5365                              <2> 	in al, dx
  5366                              <2> 	mov cl, al
  5367                              <2> 	call showhexsmall
  5368                              <2> 	cmp cl, 0x5B
  5369                              <2> 	je .noserial
  5370                              <2> 	ret
  5371                              <2> %else
  5372 000034EA E8DB140000          <2> 	call getkey
  5373 000034EF 31C0                <2> 	xor eax, eax
  5374 000034F1 31C9                <2> 	xor ecx, ecx
  5375 000034F3 8A0D[A8490000]      <2> 	mov cl, [specialkey]
  5376 000034F9 80F900              <2> 	cmp cl, 0
  5377 000034FC 0F8405000000        <2> 	je near .nospecialkeycode
  5378 00003502 E828EEFFFF          <2> 	call showhexsmall
  5379                              <2> .nospecialkeycode:
  5380 00003507 668B0D[0F160000]    <2> 	mov cx, [lastkey + 2]
  5381 0000350E E81CEEFFFF          <2> 	call showhexsmall
  5382 00003513 80F901              <2> 	cmp cl, 1
  5383 00003516 75C2                <2> 	jne keycode
  5384 00003518 C3                  <2> 	ret
  5385                              <2> %endif
  5386                              <1> %ifdef gui.included
  5387                              <1> 	%include 'source/programs/line.asm'
  5388 00003519 FF2C6C696E6500      <2> db 255,44,"line",0
  5389                              <2> linetester:
  5390 00003520 803D[F0710000]00    <2> 	cmp byte [guion], 0
  5391 00003527 0F841B000000        <2> 	je near .done
  5392 0000352D 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5393 00003534 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5394 00003539 E868000000          <2> 	call .circletest
  5395 0000353E BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5396 00003543 E801000000          <2> 	call .linetest
  5397                              <2> .done:
  5398 00003548 C3                  <2> 	ret
  5399                              <2> 
  5400                              <2> .linetest:
  5401 00003549 53                  <2> 	push ebx
  5402 0000354A E8D6000000          <2> 	call .stime
  5403 0000354F 5B                  <2> 	pop ebx
  5404 00003550 31FF                <2> 	xor edi, edi
  5405                              <2> .ltlp:
  5406 00003552 53                  <2> 	push ebx
  5407 00003553 E81C010000          <2> 	call .st
  5408 00003558 66F7D6              <2> 	not si
  5409 0000355B E814010000          <2> 	call .st
  5410 00003560 5B                  <2> 	pop ebx
  5411 00003561 66F7D6              <2> 	not si
  5412 00003564 660335[64020000]    <2> 	add si, [timenanoseconds]
  5413 0000356B 4B                  <2> 	dec ebx
  5414 0000356C 81FB00000000        <2> 	cmp ebx, 0
  5415 00003572 77DE                <2> 	ja .ltlp
  5416 00003574 E8C4000000          <2> 	call .etime
  5417 00003579 53                  <2> 	push ebx	
  5418 0000357A 57                  <2> 	push edi
  5419 0000357B E841250000          <2> 	call guiclear
  5420 00003580 E88C250000          <2> 	call reloadallgraphics
  5421 00003585 59                  <2> 	pop ecx
  5422 00003586 E882EEFFFF          <2> 	call showdec
  5423 0000358B BE[B6360000]        <2> 	mov esi, .msg
  5424 00003590 E81DDAFFFF          <2> 	call print
  5425 00003595 59                  <2> 	pop ecx
  5426 00003596 E872EEFFFF          <2> 	call showdec
  5427 0000359B BE[E2360000]        <2> 	mov esi, .msgtime
  5428 000035A0 E80DDAFFFF          <2> 	call print
  5429 000035A5 C3                  <2> 	ret
  5430                              <2> 	
  5431                              <2> .circletest:
  5432 000035A6 53                  <2> 	push ebx
  5433 000035A7 E879000000          <2> 	call .stime
  5434 000035AC 5B                  <2> 	pop ebx
  5435 000035AD 31FF                <2> 	xor edi, edi
  5436                              <2> .ctlp:
  5437 000035AF 53                  <2> 	push ebx
  5438 000035B0 668B0D[00450000]    <2> 	mov cx, [resolutiony]
  5439 000035B7 66D1E9              <2> 	shr cx, 1
  5440 000035BA 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  5441 000035C1 66D1EA              <2> 	shr dx, 1
  5442 000035C4 6689C8              <2> 	mov ax, cx
  5443                              <2> .circle:
  5444 000035C7 60                  <2> 	pusha
  5445 000035C8 E8511F0000          <2> 	call drawcircle
  5446 000035CD 61                  <2> 	popa
  5447 000035CE 6648                <2> 	dec ax
  5448 000035D0 47                  <2> 	inc edi
  5449 000035D1 663D0100            <2> 	cmp ax, 1
  5450 000035D5 77F0                <2> 	ja .circle
  5451 000035D7 66F7D6              <2> 	not si
  5452                              <2> .circle2:
  5453 000035DA 60                  <2> 	pusha
  5454 000035DB E83E1F0000          <2> 	call drawcircle
  5455 000035E0 61                  <2> 	popa
  5456 000035E1 47                  <2> 	inc edi
  5457 000035E2 6640                <2> 	inc ax
  5458 000035E4 6639C8              <2> 	cmp ax, cx
  5459 000035E7 76F1                <2> 	jbe .circle2
  5460 000035E9 5B                  <2> 	pop ebx
  5461 000035EA 66F7D6              <2> 	not si
  5462 000035ED 660335[64020000]    <2> 	add si, [timenanoseconds]
  5463 000035F4 4B                  <2> 	dec ebx
  5464 000035F5 81FB00000000        <2> 	cmp ebx, 0
  5465 000035FB 77B2                <2> 	ja .ctlp
  5466 000035FD E83B000000          <2> 	call .etime
  5467 00003602 53                  <2> 	push ebx
  5468 00003603 57                  <2> 	push edi
  5469 00003604 59                  <2> 	pop ecx
  5470 00003605 E803EEFFFF          <2> 	call showdec
  5471 0000360A BE[CB360000]        <2> 	mov esi, .msgcircle
  5472 0000360F E89ED9FFFF          <2> 	call print
  5473 00003614 59                  <2> 	pop ecx
  5474 00003615 E8F3EDFFFF          <2> 	call showdec
  5475 0000361A BE[E2360000]        <2> 	mov esi, .msgtime
  5476 0000361F E88ED9FFFF          <2> 	call print
  5477 00003624 C3                  <2> 	ret
  5478                              <2> 	
  5479                              <2> .stime:
  5480 00003625 F4                  <2> 	hlt
  5481 00003626 A1[60020000]        <2> 	mov eax, [timeseconds]
  5482 0000362B 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5483 00003631 A3[F1360000]        <2> 	mov [.time], eax
  5484 00003636 891D[F5360000]      <2> 	mov [.time + 4], ebx
  5485 0000363C C3                  <2> 	ret
  5486                              <2> 	
  5487                              <2> .etime:
  5488 0000363D A1[60020000]        <2> 	mov eax, [timeseconds]
  5489 00003642 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5490 00003648 8B0D[F1360000]      <2> 	mov ecx, [.time]
  5491 0000364E 8B15[F5360000]      <2> 	mov edx, [.time + 4]
  5492 00003654 C1EA0A              <2> 	shr edx, 10
  5493 00003657 C1EB0A              <2> 	shr ebx, 10
  5494 0000365A 29C8                <2> 	sub eax, ecx
  5495 0000365C 3D00000000          <2> 	cmp eax, 0
  5496 00003661 740E                <2> 	je .notclp
  5497                              <2> .tclp:
  5498 00003663 81C340420F00        <2> 	add ebx, 1000000
  5499 00003669 48                  <2> 	dec eax
  5500 0000366A 3D00000000          <2> 	cmp eax, 0
  5501 0000366F 75F2                <2> 	jne .tclp
  5502                              <2> .notclp:
  5503 00003671 29D3                <2> 	sub ebx, edx
  5504 00003673 C3                  <2> 	ret
  5505                              <2> 	
  5506                              <2> .st:
  5507 00003674 6631C0              <2> 	xor ax, ax
  5508 00003677 6631DB              <2> 	xor bx, bx
  5509 0000367A 668B0D[00450000]    <2> 	mov cx, [resolutiony]
  5510 00003681 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  5511                              <2> .lp:
  5512 00003688 60                  <2> 	pusha
  5513 00003689 E807230000          <2> 	call drawline
  5514 0000368E 61                  <2> 	popa
  5515                              <2> .noswitch:
  5516 0000368F 47                  <2> 	inc edi
  5517 00003690 6643                <2> 	inc bx
  5518 00003692 664A                <2> 	dec dx
  5519 00003694 6681FB0000          <2> 	cmp bx, 0
  5520 00003699 74ED                <2> 	je .lp
  5521 0000369B 6681FA0000          <2> 	cmp dx, 0
  5522 000036A0 75E6                <2> 	jne .lp
  5523                              <2> .lp2:
  5524 000036A2 60                  <2> 	pusha
  5525 000036A3 E8ED220000          <2> 	call drawline
  5526 000036A8 61                  <2> 	popa
  5527 000036A9 47                  <2> 	inc edi
  5528 000036AA 6640                <2> 	inc ax
  5529 000036AC 6649                <2> 	dec cx
  5530 000036AE 6681F90000          <2> 	cmp cx, 0
  5531 000036B3 75ED                <2> 	jne .lp2
  5532 000036B5 C3                  <2> 	ret
  5533                              <2> 	
  5534 000036B6 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5535 000036BF 6520647261776E2069- <2>
  5536 000036C8 6E2000              <2>
  5537 000036CB 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5538 000036D4 65726520647261776E- <2>
  5539 000036DD 20696E2000          <2>
  5540 000036E2 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5541 000036EB 6E64732E0A00        <2>
  5542 000036F1 0000000000000000    <2> .time dd 0,0	
  5543                              <1> %endif
  5544                              <1> %include 'source/programs/logout.asm'
  5545 000036F9 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5546 00003702 E9A2E5FFFF          <2> 	jmp os
  5547                              <1> %include 'source/programs/loop.asm'
  5548 00003707 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5549 0000370E 803D[CB8C0300]00    <2> 	cmp byte [LOOPON], 0
  5550 00003715 0F8501000000        <2> 	jne near filoop
  5551 0000371B C3                  <2> 	ret
  5552 0000371C 8B35[CC8C0300]      <2> filoop: mov esi, [LOOPPOS]
  5553 00003722 FE0D[618C0300]      <2> 	dec byte [IFON]
  5554 00003728 C605[CB8C0300]00    <2> 	mov byte [LOOPON], 0
  5555 0000372F 8935[C68C0300]      <2> 	mov [BATCHPOS], esi
  5556 00003735 8935[422B0000]      <2> 	mov [batchedi], esi
  5557 0000373B C3                  <2> 	ret 
  5558                              <1> %ifdef disk.none
  5559                              <1> %else
  5560                              <1> 	%include 'source/programs/ls.asm'
  5561 0000373C FF2C6C7300          <2> db 255,44,"ls",0
  5562 00003741 BE[3A740300]        <2> 		mov esi, diskfileindex
  5563                              <2> 	diskindexdir:
  5564 00003746 803E5F              <2> 		cmp byte [esi], '_'
  5565 00003749 7440                <2> 		je nextdiskindexdir
  5566 0000374B E843D8FFFF          <2> 		call printquiet
  5567 00003750 56                  <2> 		push esi
  5568 00003751 BE[AB370000]        <2> 		mov esi, disktab
  5569 00003756 E838D8FFFF          <2> 		call printquiet
  5570 0000375B 5E                  <2> 		pop esi
  5571 0000375C 8B4E05              <2> 		mov ecx, [esi + 5]
  5572 0000375F C605[2E230000]05    <2> 		mov byte [firsthexshown], 5
  5573 00003766 E8A2ECFFFF          <2> 		call showdec
  5574 0000376B 56                  <2> 		push esi
  5575 0000376C BE[CB710000]        <2> 		mov esi, line
  5576 00003771 E81DD8FFFF          <2> 		call printquiet
  5577 00003776 5E                  <2> 		pop esi
  5578 00003777 81C609000000        <2> 		add esi, 9
  5579 0000377D 81FE[4B760300]      <2> 		cmp esi, enddiskfileindex
  5580 00003783 72C1                <2> 		jb diskindexdir
  5581 00003785 E8A0E2FFFF          <2> 		call termcopy
  5582 0000378A C3                  <2> 		ret
  5583                              <2> 	nextdiskindexdir:
  5584 0000378B 46                  <2> 		inc esi
  5585 0000378C 803E00              <2> 		cmp byte [esi], 0
  5586 0000378F 75FA                <2> 		jne nextdiskindexdir
  5587 00003791 81C609000000        <2> 		add esi, 9
  5588 00003797 81FE[4B760300]      <2> 		cmp esi, enddiskfileindex
  5589 0000379D 72A7                <2> 		jb diskindexdir
  5590 0000379F E886E2FFFF          <2> 		call termcopy
  5591 000037A4 C3                  <2> 		ret
  5592                              <2> 		
  5593 000037A5 4469736B2000        <2> 		diskmsg db "Disk ",0
  5594 000037AB 0D09090900          <2> 		disktab db 13,9,9,9,0
  5595                              <1> %endif
  5596                              <1> %include 'source/programs/memory.asm'
  5597 000037B0 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5598 000037B9 BE[F6710000]        <2> 	mov esi, memlistbuf
  5599 000037BE 31FF                <2> 	xor edi, edi
  5600 000037C0 668B3D[36740000]    <2> 	mov di, [memlistend]
  5601 000037C7 01F7                <2> 	add edi, esi
  5602                              <2> printmemmap:
  5603 000037C9 8B0E                <2> 	mov ecx, [esi]
  5604 000037CB E873EBFFFF          <2> 	call showhex
  5605 000037D0 81C608000000        <2> 	add esi, 8
  5606 000037D6 8B0E                <2> 	mov ecx, [esi]
  5607 000037D8 E866EBFFFF          <2> 	call showhex
  5608 000037DD 81C608000000        <2> 	add esi, 8
  5609 000037E3 8B0E                <2> 	mov ecx, [esi]
  5610 000037E5 E859EBFFFF          <2> 	call showhex
  5611 000037EA 81C608000000        <2> 	add esi, 8
  5612 000037F0 57                  <2> 	push edi
  5613 000037F1 56                  <2> 	push esi
  5614 000037F2 BE[CB710000]        <2> 	mov esi, line
  5615 000037F7 E8B6D7FFFF          <2> 	call print
  5616 000037FC 5E                  <2> 	pop esi
  5617 000037FD 5F                  <2> 	pop edi
  5618 000037FE 39FE                <2> 	cmp esi, edi
  5619 00003800 72C7                <2> 	jb printmemmap
  5620 00003802 C3                  <2> 	ret
  5621                              <2> 	
  5622                              <1> %include 'source/programs/pci.asm'
  5623 00003803 FF2C70636900        <2> db 255,44,"pci",0
  5624 00003809 E805180000          <2> 	call pcidump
  5625 0000380E C3                  <2> 	ret 
  5626                              <1> %ifdef network.included
  5627                              <1> 	%include 'source/programs/ping.asm'
  5628                              <1> %endif
  5629                              <1> %ifdef disk.none
  5630                              <1> %else
  5631                              <1> 	%include 'source/programs/play.asm'
  5632 0000380F FF2C706C61796100    <2> db 255,44,"playa",0
  5633 00003817 8B3D[1C210000]      <2> 	mov edi, [currentcommandloc]
  5634 0000381D 81C706000000        <2> 	add edi, 6
  5635 00003823 E828000000          <2> 	call playasync
  5636 00003828 C3                  <2> 	ret
  5637 00003829 FF2C706C617900      <2> db 255,44,"play",0
  5638                              <2> play:
  5639 00003830 8B3D[1C210000]      <2> 	mov edi, [currentcommandloc]
  5640 00003836 81C705000000        <2> 	add edi, 5
  5641 0000383C E80F000000          <2> 	call playasync
  5642                              <2> .waitforsound:
  5643 00003841 F4                  <2> 	hlt
  5644                              <2> %ifdef sound.included
  5645                              <2> 	mov eax, [Length0]
  5646                              <2> 	or ax, [Length1]
  5647                              <2> %endif
  5648 00003842 0A05[68020000]      <2> 	or al, [soundon]
  5649 00003848 3D00000000          <2> 	cmp eax, 0
  5650 0000384D 75F2                <2> 	jne .waitforsound
  5651 0000384F C3                  <2> 	ret
  5652                              <2> playasync:
  5653 00003850 BE0000C000          <2> 	mov esi, 0xC00000
  5654 00003855 E8EE1A0000          <2> 	call loadfile
  5655 0000385A 81FA94010000        <2> 	cmp edx, 404
  5656 00003860 743F                <2> 	je nosoundfound
  5657 00003862 BB0000C000          <2> 	mov ebx, 0xC00000
  5658 00003867 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5659 0000386E 0F845A000000        <2> 	je near wave_player
  5660 00003874 66813B534E          <2> 	cmp word [ebx], "SN"
  5661 00003879 7526                <2> 	jne nosoundfound
  5662 0000387B 81C306000000        <2> 	add ebx, 6
  5663 00003881 891D[6B020000]      <2> 	mov [soundpos], ebx
  5664 00003887 035BFC              <2> 	add ebx, [ebx - 4]
  5665 0000388A 891D[6F020000]      <2> 	mov [soundendpos], ebx
  5666 00003890 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  5667 00003898 00                  <2>
  5668 00003899 C605[68020000]01    <2> 	mov byte [soundon], 1
  5669 000038A0 C3                  <2> 	ret
  5670                              <2> nosoundfound:
  5671 000038A1 BE[C7380000]        <2> 	mov esi, notfoundsound
  5672 000038A6 E807D7FFFF          <2> 	call print
  5673 000038AB 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  5674 000038B1 81C605000000        <2> 	add esi, 5
  5675 000038B7 E8F6D6FFFF          <2> 	call print
  5676 000038BC BE[9A710000]        <2> 	mov esi, notfound2
  5677 000038C1 E8ECD6FFFF          <2> 	call print
  5678 000038C6 C3                  <2> 	ret
  5679 000038C7 706C61793A2000      <2> notfoundsound db "play: ",0
  5680                              <2> 
  5681                              <2> %ifdef sound.included
  5682                              <2> sbplay:
  5683                              <2> 		mov esi, 0xC00000
  5684                              <2> 		mov ebx, esi
  5685                              <2> 		add esi, WAVSTART
  5686                              <2> 		sub edi, esi
  5687                              <2> 		mov [Length1], di
  5688                              <2> 		shr edi, 15
  5689                              <2> 		mov [Length0], edi
  5690                              <2> 		mov ecx, [ebx + 24]
  5691                              <2> 		mov [Freq], ecx
  5692                              <2> 		xor eax, eax
  5693                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  5694                              <2> 		add edx, WAVSTART
  5695                              <2> 		add	eax, edx
  5696                              <2> 		mov esi, eax
  5697                              <2> 		xor ecx, ecx
  5698                              <2> 		xor ebx, ebx
  5699                              <2> 		mov [SegLoc], bx
  5700                              <2> 		add ebx, 0x80000
  5701                              <2> 		mov cx, 0xFFFF
  5702                              <2> 		cmp di, 0
  5703                              <2> 		jne .autoinit
  5704                              <2> 		mov cx, [Length1]
  5705                              <2> 		mov byte [OddLength], 1
  5706                              <2> 		cmp cx, 32768
  5707                              <2> 		jae .autoinit
  5708                              <2> 		mov byte [OddLength], 0
  5709                              <2> 		shl cx, 1
  5710                              <2> 		inc edi
  5711                              <2> .autoinit:
  5712                              <2> 		dec edi
  5713                              <2> 		mov [Length0], edi
  5714                              <2> 		mov [Length1], cx
  5715                              <2> 		shr cx, 1
  5716                              <2> 		inc cx
  5717                              <2> 		add eax, ecx
  5718                              <2> 		mov [NextMemLoc], eax
  5719                              <2> 		mov	[MemLoc], esi
  5720                              <2> 		call DMACopy
  5721                              <2> 		xor ebx, ebx
  5722                              <2> 		mov bx, [SegLoc]
  5723                              <2> 		xor ecx, ecx
  5724                              <2> 		mov cx, [Length1]
  5725                              <2> 		shr cx, 1
  5726                              <2> 		inc cx
  5727                              <2> 		add ebx, ecx
  5728                              <2> 		mov [SegLoc], bx
  5729                              <2> 		add ebx, 0x80000
  5730                              <2> 		mov esi, [NextMemLoc]
  5731                              <2> 		mov eax, esi
  5732                              <2> 		add eax, ecx
  5733                              <2> 		mov [NextMemLoc], eax
  5734                              <2> 		mov	[MemLoc], esi
  5735                              <2> 		call DMACopy
  5736                              <2> 		call DMAPlay
  5737                              <2> 		call PlayDSP
  5738                              <2> 		ret
  5739                              <2> WAVSTART equ 64;44
  5740                              <2> wave_player:
  5741                              <2> 	cmp byte [SoundBlaster], 1
  5742                              <2> 	je near sbplay
  5743                              <2> 	mov esi, nosoundblaster
  5744                              <2> 	call print
  5745                              <2> 	ret
  5746                              <2> %else
  5747                              <2> 	wave_player:
  5748 000038CE BE[D9380000]        <2> 		mov esi, nosoundblaster
  5749 000038D3 E8DAD6FFFF          <2> 		call print
  5750 000038D8 C3                  <2> 		ret
  5751                              <2> %endif
  5752 000038D9 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5753 000038E2 426C61737465722064- <2>
  5754 000038EB 657465637465642E0A- <2>
  5755 000038F4 00                  <2>
  5756                              <1> %endif
  5757                              <1> %include 'source/programs/pwd.asm'
  5758 000038F5 FF2C70776400        <2> db 255,44,"pwd",0
  5759 000038FB BE[5C8A0300]        <2> 	mov esi, currentfolder
  5760 00003900 E88ED6FFFF          <2> 	call printquiet
  5761 00003905 BE[CB710000]        <2> 	mov esi, line
  5762 0000390A E8A3D6FFFF          <2> 	call print
  5763 0000390F C3                  <2> 	ret
  5764                              <2> 	
  5765                              <1> %include 'source/programs/reboot.asm'
  5766 00003910 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5767 00003919 0F011D[23390000]    <2> 		lidt [idtreboot]
  5768 00003920 CD00                <2> 		int 0
  5769 00003922 F4                  <2> 		hlt
  5770                              <2> 	
  5771 00003923 0000                <2> 	idtreboot dw 0
  5772 00003925 00000000            <2> 			  dd 0
  5773                              <2> 
  5774                              <2> 	coldboot:
  5775 00003929 66B84000            <2> 		MOV AX, 0040h
  5776 0000392D 8EC0                <2> 		MOV ES, AX
  5777 0000392F 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5778 00003938 00                  <2>
  5779 00003939 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5780 00003940 CF                  <2> 		IRET
  5781                              <2> 
  5782                              <2> 	warmboot:
  5783 00003941 66B84000            <2> 		MOV AX, 0040h
  5784 00003945 8EC0                <2> 		MOV ES, AX
  5785 00003947 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5786 00003950 12                  <2>
  5787 00003951 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5788 00003958 CF                  <2> 		IRET
  5789                              <2> 		
  5790                              <1> %include 'source/programs/reg.asm'
  5791 00003959 FF2C72656700        <2> db 255,44,"reg",0
  5792 0000395F CD03                <2> 	int 3
  5793 00003961 C3                  <2> 	ret 
  5794                              <1> %ifdef disk.none
  5795                              <1> %else
  5796                              <1> 	%include 'source/programs/show.asm'
  5797 00003962 FF2C73686F7700      <2> db 255,44,"show",0
  5798                              <2> showprog:
  5799 00003969 8B3D[1C210000]      <2> 		mov edi, [currentcommandloc]
  5800 0000396F 81C705000000        <2> 		add edi, 5
  5801 00003975 BE00004000          <2> 		mov esi, 0x400000
  5802 0000397A 803F26              <2> 		cmp byte [edi], '&'
  5803 0000397D 741B                <2> 		je .nullfile
  5804 0000397F BE00008000          <2> 		mov esi, 0x800000
  5805 00003984 E8BF190000          <2> 		call loadfile
  5806 00003989 81FA94010000        <2> 		cmp edx, 404
  5807 0000398F 0F8483000000        <2> 		je near filenotfound
  5808 00003995 BE00008000          <2> 		mov esi, 0x800000
  5809                              <2> .nullfile:
  5810                              <2> %ifdef gui.included
  5811 0000399A 66813E424D          <2> 		cmp word [esi], "BM"
  5812 0000399F 7410                <2> 		je bmpfound
  5813                              <2> %endif
  5814 000039A1 E80CD6FFFF          <2> 		call print
  5815 000039A6 BE[CB710000]        <2> 		mov esi, line
  5816 000039AB E802D6FFFF          <2> 		call print
  5817 000039B0 C3                  <2> 		ret
  5818                              <2> %ifdef gui.included
  5819                              <2> bmpfound:
  5820 000039B1 803D[F0710000]00    <2> 		cmp byte [guion], 0
  5821 000039B8 0F8428000000        <2> 		je near noguibmp
  5822 000039BE BE00008000          <2> 		mov esi, 0x800000
  5823 000039C3 31C9                <2> 		xor ecx, ecx
  5824 000039C5 31D2                <2> 		xor edx, edx
  5825 000039C7 31C0                <2> 		xor eax, eax
  5826 000039C9 31DB                <2> 		xor ebx, ebx
  5827 000039CB E87C1A0000          <2> 		call showbmp
  5828 000039D0 30C0                <2> 		xor al, al
  5829 000039D2 B405                <2> 		mov ah, 5
  5830 000039D4 CD30                <2> 		int 30h
  5831 000039D6 E8E6200000          <2> 		call guiclear
  5832 000039DB E8C51D0000          <2> 		call clearmousecursor
  5833 000039E0 E82C210000          <2> 		call reloadallgraphics
  5834 000039E5 C3                  <2> 		ret
  5835                              <2> noguibmp:
  5836 000039E6 BE[F1390000]        <2> 		mov esi, warnguimsg
  5837 000039EB E8C2D5FFFF          <2> 		call print
  5838 000039F0 C3                  <2> 		ret
  5839 000039F1 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5840 000039FA 6E6F7420626520646F- <2>
  5841 00003A03 6E6520776974686F75- <2>
  5842 00003A0C 742074686520475549- <2>
  5843 00003A15 2E0A00              <2>
  5844                              <2> %endif
  5845                              <2> 
  5846                              <2> filenotfound:
  5847 00003A18 BE[4B3A0000]        <2> 		mov esi, filenf
  5848 00003A1D E890D5FFFF          <2> 		call print
  5849 00003A22 8B35[1C210000]      <2> 		mov esi, [currentcommandloc]
  5850                              <2> findfilenotfoundzero:
  5851 00003A28 8A06                <2> 		mov al, [esi]
  5852 00003A2A 46                  <2> 		inc esi
  5853 00003A2B 3C00                <2> 		cmp al, 0
  5854 00003A2D 7411                <2> 		je nofilenamenotfound
  5855 00003A2F 81FE[D0A40300]      <2> 		cmp esi, buftxtend
  5856 00003A35 7309                <2> 		jae nofilenamenotfound
  5857 00003A37 3C20                <2> 		cmp al, " "
  5858 00003A39 75ED                <2> 		jne findfilenotfoundzero
  5859 00003A3B E872D5FFFF          <2> 		call print
  5860                              <2> nofilenamenotfound:
  5861 00003A40 BE[563A0000]        <2> 		mov esi, filenf2
  5862 00003A45 E868D5FFFF          <2> 		call print
  5863 00003A4A C3                  <2> 		ret
  5864 00003A4B 5468652066696C6520- <2> filenf db "The file ",34,0
  5865 00003A54 2200                <2>
  5866 00003A56 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5867 00003A5F 6F7420626520666F75- <2>
  5868 00003A68 6E642E0A00          <2>
  5869                              <1> %endif
  5870                              <1> %include 'source/programs/shush.asm'
  5871 00003A6D FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5872                              <2> shushprog:
  5873                              <2> %ifdef gui.included
  5874 00003A75 803D[F0710000]00    <2> 	cmp byte [guion], 0
  5875 00003A7C 0F84B9000000        <2> 	je near .noswitchsize
  5876 00003A82 8B35[1C210000]      <2> 	mov esi, [currentcommandloc]
  5877 00003A88 81C606000000        <2> 	add esi, 6
  5878 00003A8E 56                  <2> 	push esi
  5879 00003A8F 4E                  <2> 	dec esi
  5880                              <2> .findspace:
  5881 00003A90 46                  <2> 	inc esi
  5882 00003A91 8A06                <2> 	mov al, [esi]
  5883 00003A93 3C00                <2> 	cmp al, 0
  5884 00003A95 0F84A0000000        <2> 	je near .noswitchsize
  5885 00003A9B 3C58                <2> 	cmp al, "X"
  5886 00003A9D 7408                <2> 	je .donefind
  5887 00003A9F 3C78                <2> 	cmp al, "x"
  5888 00003AA1 7404                <2> 	je .donefind
  5889 00003AA3 3C20                <2> 	cmp al, " "
  5890 00003AA5 75E9                <2> 	jne .findspace
  5891                              <2> .donefind:
  5892 00003AA7 30C0                <2> 	xor al, al
  5893 00003AA9 8806                <2> 	mov [esi], al
  5894 00003AAB 46                  <2> 	inc esi
  5895 00003AAC 89F7                <2> 	mov edi, esi
  5896 00003AAE E83CEAFFFF          <2> 	call cnvrttxt
  5897 00003AB3 89C8                <2> 	mov eax, ecx
  5898 00003AB5 5E                  <2> 	pop esi
  5899 00003AB6 50                  <2> 	push eax
  5900 00003AB7 89F7                <2> 	mov edi, esi
  5901 00003AB9 E831EAFFFF          <2> 	call cnvrttxt
  5902 00003ABE 89CB                <2> 	mov ebx, ecx
  5903 00003AC0 58                  <2> 	pop eax	
  5904 00003AC1 6681FB0000          <2> 	cmp bx, 0
  5905 00003AC6 0F846F000000        <2> 	je near .noswitchsize
  5906 00003ACC 663D0000            <2> 	cmp ax, 0
  5907 00003AD0 0F8465000000        <2> 	je near .noswitchsize
  5908 00003AD6 66C1E303            <2> 	shl bx, 3
  5909 00003ADA 66C1E004            <2> 	shl ax, 4
  5910 00003ADE 663B1D[FE440000]    <2> 	cmp bx, [resolutionx]
  5911 00003AE5 7607                <2> 	jbe .nofixx
  5912 00003AE7 668B1D[FE440000]    <2> 	mov bx, [resolutionx]
  5913                              <2> .nofixx:
  5914 00003AEE 66051000            <2> 	add ax, 16
  5915 00003AF2 663B05[00450000]    <2> 	cmp ax, [resolutiony]
  5916 00003AF9 7606                <2> 	jbe .nofixy
  5917 00003AFB 66A1[00450000]      <2> 	mov ax, [resolutiony]
  5918                              <2> .nofixy:
  5919 00003B01 662D1000            <2> 	sub ax, 16
  5920 00003B05 6631C9              <2> 	xor cx, cx
  5921 00003B08 6631D2              <2> 	xor dx, dx
  5922 00003B0B 66891D[AF5E0000]    <2> 	mov [termwindow], bx
  5923 00003B12 66A3[B15E0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5924 00003B18 BE[AF5E0000]        <2> 	mov esi, termwindow
  5925 00003B1D 31DB                <2> 	xor ebx, ebx
  5926 00003B1F 6631C0              <2> 	xor ax, ax
  5927 00003B22 E8B5280000          <2> 	call showwindow
  5928 00003B27 E8951F0000          <2> 	call guiclear
  5929 00003B2C E830D5FFFF          <2> 	call clear
  5930 00003B31 E8DB1F0000          <2> 	call reloadallgraphics
  5931 00003B36 E8221D0000          <2> 	call switchmousepos2
  5932                              <2> .noswitchsize:
  5933                              <2> %endif
  5934 00003B3B BE[463B0000]        <2> 	mov esi, shushmsg
  5935 00003B40 E86DD4FFFF          <2> 	call print
  5936 00003B45 C3                  <2> 	ret
  5937 00003B46 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5938 00003B4F 6F2074686520536F6C- <2>
  5939 00003B58 6C65724F5320486172- <2>
  5940 00003B61 646C7920556E69782D- <2>
  5941 00003B6A 436F6D70617469626C- <2>
  5942 00003B73 65205368656C6C210A- <2>
  5943 00003B7C 00                  <2>
  5944                              <1> %include 'source/programs/system.asm'
  5945 00003B7D FF2C73797374656D00  <2> 	db 255,44,"system",0
  5946 00003B86 BE[833C0000]        <2> 	mov esi, kernelinfomsg
  5947 00003B8B E803D4FFFF          <2> 	call printquiet
  5948 00003B90 B9[3A740300]        <2> 	mov ecx, osend
  5949 00003B95 E873E8FFFF          <2> 	call showdec
  5950 00003B9A BE[983C0000]        <2> 	mov esi, diskbytemsg
  5951 00003B9F E8EFD3FFFF          <2> 	call printquiet
  5952 00003BA4 B9[3A740300]        <2> 	mov ecx, osend
  5953 00003BA9 81C1[86620500]      <2> 	add ecx, commandbufend
  5954 00003BAF 81E9[4C760300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5955 00003BB5 E853E8FFFF          <2> 	call showdec
  5956 00003BBA BE[AF3C0000]        <2> 	mov esi, membytemsg
  5957 00003BBF E8CFD3FFFF          <2> 	call printquiet
  5958 00003BC4 BE[FA3C0000]        <2> 	mov esi, endofmemmsg
  5959 00003BC9 E8C5D3FFFF          <2> 	call printquiet
  5960 00003BCE B9[86620500]        <2> 	mov ecx, bssend
  5961 00003BD3 E86BE7FFFF          <2> 	call showhex
  5962 00003BD8 BE[C83C0000]        <2> 	mov esi, systeminfomsg
  5963 00003BDD E8B1D3FFFF          <2> 	call printquiet
  5964                              <2> getcpuspeed:
  5965 00003BE2 B8FE000000          <2> 	mov eax, 0xFE
  5966 00003BE7 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5967 00003BE9 B020                <2> 	mov al, 0x20
  5968 00003BEB E620                <2> 	out 0x20, al
  5969 00003BED F4                  <2> 	hlt
  5970 00003BEE 0F31                <2> 	rdtsc
  5971 00003BF0 89D6                <2> 	mov esi, edx
  5972 00003BF2 89C7                <2> 	mov edi, eax
  5973 00003BF4 31C0                <2> 	xor eax, eax
  5974 00003BF6 C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  5975                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5976 00003BFD 40                  <2> 	inc eax
  5977 00003BFE EBFD                <2> 	jmp cpuspeedloop
  5978                              <2> cpuspeedloopend:
  5979 00003C00 0F31                <2> 	rdtsc
  5980 00003C02 29F8                <2> 	sub eax, edi
  5981 00003C04 29F2                <2> 	sub edx, esi
  5982 00003C06 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  5983 00003C0C A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  5984 00003C11 31C0                <2> 	xor eax, eax
  5985 00003C13 E621                <2> 	out 0x21, al
  5986 00003C15 B020                <2> 	mov al, 0x20
  5987 00003C17 E620                <2> 	out 0x20, al
  5988 00003C19 31D2                <2> 	xor edx, edx
  5989 00003C1B 31C0                <2> 	xor eax, eax
  5990 00003C1D A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  5991 00003C22 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5992                              <2> 				;result by 2
  5993 00003C24 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  5994 00003C2A C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5995 00003C2D F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5996 00003C2F 89C1                <2> 	mov ecx, eax
  5997 00003C31 E8D7E7FFFF          <2> 	call showdec
  5998 00003C36 BE[DE3C0000]        <2> 	mov esi, cpuspeedmsg
  5999 00003C3B E853D3FFFF          <2> 	call printquiet
  6000 00003C40 31D2                <2> 	xor edx, edx
  6001 00003C42 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6002 00003C47 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6003 00003C4D 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6004 00003C53 C1EB0A              <2> 	shr ebx, 10
  6005 00003C56 F7F3                <2> 	div ebx
  6006 00003C58 89C1                <2> 	mov ecx, eax
  6007 00003C5A E8AEE7FFFF          <2> 	call showdec
  6008 00003C5F BE[E43C0000]        <2> 	mov esi, cpuclockmsg
  6009 00003C64 E82AD3FFFF          <2> 	call printquiet
  6010 00003C69 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6011 00003C6F C1E914              <2> 	shr ecx, 20
  6012 00003C72 41                  <2> 	inc ecx	;the reading is one MB behind
  6013 00003C73 E895E7FFFF          <2> 	call showdec
  6014 00003C78 BE[E93C0000]        <2> 	mov esi, memoryspacemsg
  6015 00003C7D E830D3FFFF          <2> 	call print
  6016                              <2> %ifdef sound.included
  6017                              <2> 	cmp byte [SoundBlaster], 0
  6018                              <2> 	je .nosb
  6019                              <2> 	mov esi, soundblastermsg
  6020                              <2> 	call print
  6021                              <2> .nosb:
  6022                              <2> %endif
  6023 00003C82 C3                  <2> 	ret
  6024                              <2> 
  6025 00003C83 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6026 00003C8C 666F726D6174696F6E- <2>
  6027 00003C95 3A0A00              <2>
  6028 00003C98 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6029 00003CA1 6B2053706163652055- <2>
  6030 00003CAA 7365640A00          <2>
  6031 00003CAF 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6032 00003CB8 6F7279205370616365- <2>
  6033 00003CC1 20557365640A00      <2>
  6034 00003CC8 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6035 00003CD1 6E666F726D6174696F- <2>
  6036 00003CDA 6E3A0A00            <2>
  6037                              <2> %ifdef sound.included
  6038                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6039                              <2> %endif
  6040 00003CDE 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6041 00003CE4 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6042 00003CE9 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6043 00003CF2 2053706163650A00    <2>
  6044 00003CFA 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6045 00003D03 6D6F72792053706163- <2>
  6046 00003D0C 653A20307800        <2>
  6047                              <1> %include 'source/programs/time.asm'
  6048 00003D12 082E30303030303030- <2> timenscache db 8,".000000000"
  6049 00003D1B 3030                <2>
  6050 00003D1D 200A00              <2> timenscacheend: db " ",10,0
  6051 00003D20 00                  <2> istimeset db 0
  6052 00003D21 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6053 00003D2A 2063757272656E7420- <2>
  6054 00003D33 554E49582074696D65- <2>
  6055 00003D3C 3A0A00              <2>
  6056 00003D3F 00<rept>            <2> timeinputbuffer times 12 db 0
  6057 00003D4B 00                  <2> timeinputbend: db 0
  6058                              <2> 
  6059 00003D4C FF2C74696D6500      <2> db 255,44,"time",0
  6060 00003D53 803D[203D0000]00    <2> 	cmp byte [istimeset], 0
  6061 00003D5A 753A                <2> 	jne timeisset
  6062 00003D5C BE[213D0000]        <2> 	mov esi, settimemsg
  6063 00003D61 E84CD2FFFF          <2> 	call print
  6064 00003D66 BE[3F3D0000]        <2> 	mov esi, timeinputbuffer
  6065 00003D6B BF[4B3D0000]        <2> 	mov edi, timeinputbend
  6066 00003D70 E86AD3FFFF          <2> 	call readline
  6067 00003D75 BE[3F3D0000]        <2> 	mov esi, timeinputbuffer
  6068 00003D7A 31FF                <2> 	xor edi, edi
  6069 00003D7C E86EE7FFFF          <2> 	call cnvrttxt
  6070 00003D81 890D[60020000]      <2> 	mov [timeseconds], ecx
  6071 00003D87 31C9                <2> 	xor ecx, ecx
  6072 00003D89 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6073 00003D8F C605[203D0000]01    <2> 	mov byte [istimeset], 1
  6074                              <2> timeisset:
  6075 00003D96 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6076 00003D9C E86CE6FFFF          <2> 	call showdec
  6077                              <2> 	
  6078 00003DA1 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6079 00003DA7 BE[123D0000]        <2> 	mov esi, timenscache
  6080 00003DAC C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6081 00003DB3 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6082 00003DBA C6460A30            <2> 	mov byte [esi + 10], "0"
  6083 00003DBE BE[1D3D0000]        <2> 	mov esi, timenscacheend
  6084 00003DC3 E828E4FFFF          <2> 	call convert
  6085 00003DC8 BE[123D0000]        <2> 	mov esi, timenscache
  6086 00003DCD E8C1D1FFFF          <2> 	call printquiet
  6087                              <2> 	
  6088 00003DD2 E82D000000          <2> 	call time
  6089 00003DD7 BE[D03F0000]        <2> 	mov esi, timeshow
  6090 00003DDC E8B2D1FFFF          <2> 	call printquiet
  6091 00003DE1 BE[CB710000]        <2> 	mov esi, line
  6092 00003DE6 E8A8D1FFFF          <2> 	call printquiet
  6093 00003DEB BE[D93F0000]        <2> 	mov esi, dateshow
  6094 00003DF0 E89ED1FFFF          <2> 	call printquiet
  6095 00003DF5 BE[CB710000]        <2> 	mov esi, line
  6096 00003DFA E894D1FFFF          <2> 	call printquiet
  6097 00003DFF E9BC000000          <2> 	jmp findday
  6098                              <2> time:
  6099 00003E04 E84F010000          <2> 	call tstackput1
  6100 00003E09 B00A                <2> 	mov al,10			;Get RTC register A
  6101 00003E0B E879010000          <2> 	call tget1
  6102 00003E10 A880                <2> 	test al,0x80			;Is update in progress?
  6103 00003E12 75F0                <2> 	jne time				; yes, wait
  6104                              <2> 
  6105 00003E14 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6106 00003E16 E86E010000          <2> 	call tget1
  6107 00003E1B A2[C73F0000]        <2> 	mov [RTCtimeSecond],al
  6108                              <2> 
  6109 00003E20 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6110 00003E22 E862010000          <2> 	call tget1
  6111 00003E27 A2[C83F0000]        <2> 	mov [RTCtimeMinute],al
  6112                              <2> 
  6113 00003E2C B004                <2> 	mov al,0x04			;Get hours (see notes)
  6114 00003E2E E856010000          <2> 	call tget1
  6115 00003E33 A2[C93F0000]        <2> 	mov [RTCtimeHour],al
  6116                              <2> 
  6117 00003E38 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6118 00003E3A E84A010000          <2> 	call tget1
  6119 00003E3F A2[CA3F0000]        <2> 	mov [RTCtimeDay],al
  6120                              <2> 
  6121 00003E44 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6122 00003E46 E83E010000          <2> 	call tget1
  6123 00003E4B A2[CB3F0000]        <2> 	mov [RTCtimeMonth],al
  6124                              <2> 
  6125 00003E50 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6126 00003E52 E832010000          <2> 	call tget1
  6127 00003E57 A2[CC3F0000]        <2> 	mov [RTCtimeYear],al
  6128                              <2> 	
  6129 00003E5C BE[D03F0000]        <2> 	mov esi, timeshow
  6130 00003E61 8A2D[C93F0000]      <2> 	mov ch, [RTCtimeHour]
  6131 00003E67 E828010000          <2> 	call tput1
  6132 00003E6C 8A2D[C83F0000]      <2> 	mov ch, [RTCtimeMinute]
  6133 00003E72 E81D010000          <2> 	call tput1
  6134 00003E77 8A2D[C73F0000]      <2> 	mov ch, [RTCtimeSecond]
  6135 00003E7D E812010000          <2> 	call tput1
  6136 00003E82 BE[D93F0000]        <2> 	mov esi, dateshow
  6137 00003E87 8A2D[CB3F0000]      <2> 	mov ch, [RTCtimeMonth]
  6138 00003E8D E802010000          <2> 	call tput1
  6139 00003E92 8A2D[CA3F0000]      <2> 	mov ch, [RTCtimeDay]
  6140 00003E98 E8F7000000          <2> 	call tput1
  6141 00003E9D B520                <2> 	mov ch, 0x20
  6142 00003E9F E8F0000000          <2> 	call tput1
  6143 00003EA4 4E                  <2> 	dec esi
  6144 00003EA5 8A2D[CC3F0000]      <2> 	mov ch, [RTCtimeYear]
  6145 00003EAB E8E4000000          <2> 	call tput1
  6146 00003EB0 E8BD000000          <2> 	call tstackget1
  6147 00003EB5 C3                  <2> 	ret
  6148 00003EB6 BE[D03F0000]        <2> 	mov esi, timeshow
  6149 00003EBB E8F2D0FFFF          <2> 	call print
  6150                              <2> ;;get day of week
  6151                              <2> ;;add these:
  6152                              <2> ;;century value
  6153                              <2> ;;last 2 digits of year
  6154                              <2> ;;last 2 digits of year right shifted twice
  6155                              <2> ;;month table value
  6156                              <2> ;;day of the month
  6157                              <2> ;;divide these by 7
  6158                              <2> ;;the remainder is the day
  6159                              <2> findday:
  6160 00003EC0 31C0                <2> 	xor eax, eax
  6161                              <2> ;;first convert the values from BCD to hex
  6162 00003EC2 A0[CA3F0000]        <2> 	mov al, [RTCtimeDay]
  6163 00003EC7 E873000000          <2> 	call converttohex
  6164 00003ECC 8825[CD3F0000]      <2> 	mov [dayhex], ah
  6165 00003ED2 A0[CB3F0000]        <2> 	mov al, [RTCtimeMonth]
  6166 00003ED7 E863000000          <2> 	call converttohex
  6167 00003EDC 8825[CE3F0000]      <2> 	mov [monthhex], ah
  6168 00003EE2 A0[CC3F0000]        <2> 	mov al, [RTCtimeYear]
  6169 00003EE7 E853000000          <2> 	call converttohex
  6170 00003EEC 8825[CF3F0000]      <2> 	mov [yearhex], ah
  6171 00003EF2 31C0                <2> 	xor eax, eax
  6172 00003EF4 A0[CF3F0000]        <2> 	mov al, [yearhex]
  6173 00003EF9 C0E802              <2> 	shr al, 2
  6174 00003EFC 0205[CF3F0000]      <2> 	add al, [yearhex]
  6175 00003F02 0506000000          <2> 	add eax, 6
  6176 00003F07 31DB                <2> 	xor ebx, ebx
  6177 00003F09 8A1D[CE3F0000]      <2> 	mov bl, [monthhex]
  6178 00003F0F FECB                <2> 	dec bl
  6179 00003F11 81C3[EE3F0000]      <2> 	add ebx, month
  6180 00003F17 31C9                <2> 	xor ecx, ecx
  6181 00003F19 8A0B                <2> 	mov cl, [ebx]
  6182 00003F1B 01C8                <2> 	add eax, ecx
  6183 00003F1D 8A0D[CD3F0000]      <2> 	mov cl, [dayhex]
  6184 00003F23 01C8                <2> 	add eax, ecx
  6185 00003F25 66BB0700            <2> 	mov bx, 7
  6186 00003F29 31D2                <2> 	xor edx, edx
  6187 00003F2B 66F7F3              <2> 	div bx
  6188 00003F2E C1E202              <2> 	shl edx, 2
  6189 00003F31 81C2[FA3F0000]      <2> 	add edx, day
  6190 00003F37 8B32                <2> 	mov esi, [edx]
  6191 00003F39 E874D0FFFF          <2> 	call print
  6192 00003F3E C3                  <2> 	ret
  6193                              <2> 	
  6194                              <2> converttohex:
  6195 00003F3F 88C4                <2> 	mov ah, al
  6196 00003F41 C0E804              <2> 	shr al, 4
  6197 00003F44 C0E404              <2> 	shl ah, 4
  6198 00003F47 C0EC04              <2> 	shr ah, 4
  6199 00003F4A 3C00                <2> 	cmp al, 0
  6200 00003F4C 7409                <2> 	je noconverttohex
  6201                              <2> converttohexlp:
  6202 00003F4E 80C40A              <2> 	add ah, 10
  6203 00003F51 FEC8                <2> 	dec al
  6204 00003F53 3C00                <2> 	cmp al, 0
  6205 00003F55 75F7                <2> 	jne converttohexlp
  6206                              <2> noconverttohex:
  6207 00003F57 C3                  <2> 	ret
  6208                              <2> 	
  6209                              <2> tstackput1:
  6210 00003F58 8935[C33F0000]      <2> 	mov [tstack + 20], esi
  6211 00003F5E BE[AF3F0000]        <2> 	mov esi, tstack
  6212 00003F63 8906                <2> 	mov [esi], eax
  6213 00003F65 895E04              <2> 	mov [esi + 4], ebx
  6214 00003F68 894E08              <2> 	mov [esi + 8], ecx
  6215 00003F6B 89560C              <2> 	mov [esi + 12], edx
  6216 00003F6E 897E10              <2> 	mov [esi + 16], edi
  6217 00003F71 C3                  <2> 	ret
  6218                              <2> 	
  6219                              <2> tstackget1:
  6220 00003F72 BE[AF3F0000]        <2> 	mov esi, tstack
  6221 00003F77 8B06                <2> 	mov eax, [esi]
  6222 00003F79 8B5E04              <2> 	mov ebx, [esi + 4]
  6223 00003F7C 8B4E08              <2> 	mov ecx, [esi + 8]
  6224 00003F7F 8B560C              <2> 	mov edx, [esi + 12]
  6225 00003F82 8B7E10              <2> 	mov edi, [esi + 16]
  6226 00003F85 8B7614              <2> 	mov esi, [esi + 20]
  6227 00003F88 C3                  <2> 	ret
  6228                              <2> 	
  6229                              <2> tget1:
  6230 00003F89 66BA7000            <2> 	mov dx, 0x70
  6231 00003F8D EE                  <2> 	out dx, al
  6232 00003F8E 6642                <2> 	inc dx
  6233 00003F90 EC                  <2> 	in al, dx
  6234 00003F91 664A                <2> 	dec dx
  6235 00003F93 C3                  <2> 	ret
  6236                              <2> 	
  6237                              <2> tput1:
  6238 00003F94 66C1E904            <2> 	shr cx, 4
  6239 00003F98 B030                <2> 	mov al, 48
  6240 00003F9A 00E8                <2> 	add al, ch
  6241 00003F9C 8806                <2> 	mov [esi], al
  6242 00003F9E 46                  <2> 	inc esi
  6243 00003F9F B030                <2> 	mov al, 48
  6244 00003FA1 C0E904              <2> 	shr cl, 4
  6245 00003FA4 00C8                <2> 	add al, cl
  6246 00003FA6 8806                <2> 	mov [esi], al
  6247 00003FA8 81C602000000        <2> 	add esi, 2
  6248 00003FAE C3                  <2> 	ret
  6249                              <2> 		
  6250 00003FAF 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6251 00003FB8 000000000000000000- <2>
  6252 00003FC1 000000000000        <2>
  6253 00003FC7 00                  <2> 	RTCtimeSecond db 0
  6254 00003FC8 00                  <2> 	RTCtimeMinute db 0
  6255 00003FC9 00                  <2> 	RTCtimeHour db 0
  6256 00003FCA 00                  <2> 	RTCtimeDay db 0
  6257 00003FCB 00                  <2> 	RTCtimeMonth db 0
  6258 00003FCC 00                  <2> 	RTCtimeYear db 0
  6259 00003FCD 00                  <2> 	dayhex db 0
  6260 00003FCE 00                  <2> 	monthhex db 0
  6261 00003FCF 00                  <2> 	yearhex db 0
  6262 00003FD0 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6263 00003FD9 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6264 00003FE2 302000              <2>
  6265                              <2> 	oldcentury:	;;from 1700 to 1900
  6266 00003FE5 040200              <2> 	db 4,2,0
  6267                              <2> 	century:	;;from 2000 to 2500
  6268 00003FE8 060402000604        <2> 	db 6,4,2,0,6,4
  6269                              <2> 	month:
  6270 00003FEE 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6271 00003FF7 000305              <2>
  6272                              <2> 	day:
  6273 00003FFA [16400000]          <2> 	dd sunday
  6274 00003FFE [1E400000]          <2> 	dd monday
  6275 00004002 [26400000]          <2> 	dd tuesday
  6276 00004006 [2F400000]          <2> 	dd wednesday
  6277 0000400A [3A400000]          <2> 	dd thursday
  6278 0000400E [44400000]          <2> 	dd friday
  6279 00004012 [4C400000]          <2> 	dd saturday
  6280                              <2> sunday:
  6281 00004016 53756E6461790A00    <2> 	db "Sunday",10,0
  6282                              <2> monday:
  6283 0000401E 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6284                              <2> tuesday:
  6285 00004026 547565736461790A00  <2> 	db "Tuesday",10,0
  6286                              <2> wednesday:
  6287 0000402F 5765646E6573646179- <2> 	db "Wednesday",10,0
  6288 00004038 0A00                <2>
  6289                              <2> thursday:
  6290 0000403A 54687572736461790A- <2> 	db "Thursday",10,0
  6291 00004043 00                  <2>
  6292                              <2> friday:
  6293 00004044 4672696461790A00    <2> 	db "Friday",10,0
  6294                              <2> saturday:
  6295 0000404C 53617475726461790A- <2> 	db "Saturday",10,0
  6296 00004055 00                  <2>
  6297                              <1> %include 'source/programs/turnoff.asm'
  6298 00004056 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6299 0000405F 00                  <2>
  6300                              <2> 	turnoff:
  6301 00004060 66BB[7B40]          <2> 			mov bx, shutdown
  6302 00004064 66891D[CA0C0000]    <2> 			mov [realmodeptr], bx
  6303 0000406B BB[A5400000]        <2> 			mov ebx, halt
  6304 00004070 891D[C60C0000]      <2> 			mov [realmodereturn], ebx
  6305 00004076 E934CBFFFF          <2> 			jmp realmode
  6306                              <2> 
  6307                              <2> [BITS 16]
  6308                              <2> 		shutdown:
  6309 0000407B B453                <2> 			mov ah, 0x53
  6310 0000407D B004                <2> 			mov al, 4
  6311 0000407F 31DB                <2> 			xor bx, bx
  6312 00004081 CD15                <2> 			int 0x15
  6313                              <2> 			
  6314 00004083 B453                <2> 			mov ah, 0x53
  6315 00004085 B001                <2> 			mov al, 1
  6316 00004087 31DB                <2> 			xor bx, bx
  6317 00004089 CD15                <2> 			int 0x15
  6318                              <2> 			
  6319 0000408B B453                <2> 			mov ah, 0x53
  6320 0000408D B008                <2> 			mov al, 8
  6321 0000408F BB0100              <2> 			mov bx, 1
  6322 00004092 B90100              <2> 			mov cx, 1
  6323 00004095 CD15                <2> 			int 0x15
  6324                              <2> 			
  6325 00004097 B453                <2> 			mov ah, 0x53
  6326 00004099 B007                <2> 			mov al, 7
  6327 0000409B BB0100              <2> 			mov bx, 1
  6328 0000409E B90300              <2> 			mov cx, 3
  6329 000040A1 CD15                <2> 			int 0x15
  6330 000040A3 EBFE                <2> 			jmp $
  6331                              <2> 			[BITS 32]
  6332 000040A5 EBFE                <2> halt: jmp $
  6333                              <1> %include 'source/programs/wait.asm'
  6334 000040A7 FF2C7761697400      <2> db 255,44,"wait",0
  6335                              <2> waitkey:
  6336 000040AE E8FAD4FFFF          <2> 		call getchar
  6337 000040B3 C3                  <2> 		ret
  6338                              <1> %include 'source/programs/while.asm'
  6339 000040B4 FF2C7768696C6500    <2> db 255,44,"while",0
  6340 000040BC 30C0                <2> whilecmd:  xor al, al
  6341 000040BE 3805[CA8C0300]      <2> 	cmp [BATCHISON], al
  6342 000040C4 0F8450EBFFFF        <2> 	je near notbatch
  6343 000040CA 8B35[C68C0300]      <2> 	mov esi, [BATCHPOS]
  6344 000040D0 81EE02000000        <2> 	sub esi, 2
  6345 000040D6 4E                  <2> whilefnd: dec esi
  6346 000040D7 8A06                <2> 	mov al, [esi]
  6347 000040D9 3C0A                <2> 	cmp al, 10
  6348 000040DB 0F840A000000        <2> 	je near whilefnd2
  6349 000040E1 3C00                <2> 	cmp al, 0
  6350 000040E3 0F8402000000        <2> 	je near whilefnd2
  6351 000040E9 EBEB                <2> 	jmp whilefnd
  6352                              <2> whilefnd2:
  6353 000040EB 46                  <2> 	inc esi
  6354 000040EC 8935[CC8C0300]      <2> 	mov [LOOPPOS], esi
  6355 000040F2 C605[CB8C0300]01    <2> 	mov BYTE [LOOPON], 1
  6356 000040F9 BE[D0A00300]        <2> 	mov esi, buftxt
  6357 000040FE BB[D0A00300]        <2> 	mov ebx, buftxt
  6358 00004103 81C306000000        <2> 	add ebx, 6
  6359 00004109 E95EF3FFFF          <2> 	jmp chkeqsn
  6360                              <1> progend:		;programs end here	
  6361                              <1> batchprogend:
  6362                                  	%include "source/hardware.asm"
  6363                              <1> %ifdef gui.included
  6364                              <1> 	%include "source/drivers/video/vesa.asm"
  6365                              <2> [BITS 16]
  6366                              <2> guiswitch:
  6367 0000410E 81F90000            <2> 	cmp cx, 0
  6368 00004112 750B                <2> 	jne guiswitchdefnum
  6369 00004114 B81200              <2> 	mov ax, 12h
  6370 00004117 31DB                <2> 	xor bx, bx
  6371 00004119 CD10                <2> 	int 10h
  6372 0000411B E85100              <2> 	call guiloadagain
  6373                              <2> guiswitchnocando:
  6374 0000411E C3                  <2> 	ret	;return without switching as mode number is bad
  6375                              <2> guiswitchdefnum:	;switch to a defined mode number
  6376 0000411F B8004F              <2> 	mov ax, 0x4F00
  6377 00004122 BF[EC42]            <2> 	mov di, VBEMODEBLOCK
  6378 00004125 CD10                <2> 	int 10h
  6379 00004127 BE[0E43]            <2> 	mov si, reserved
  6380 0000412A 81EE0200            <2> 	sub si, 2
  6381                              <2> .loop:
  6382 0000412E 81C60200            <2> 	add si, 2
  6383 00004132 81FE[EC43]          <2> 	cmp si, oemdata
  6384 00004136 74E6                <2> 	je guiswitchnocando
  6385 00004138 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6386 0000413C 74E0                <2> 	je guiswitchnocando
  6387 0000413E 390C                <2> 	cmp [si], cx
  6388 00004140 75EC                <2> 	jne .loop
  6389 00004142 8936[4642]          <2> 	mov [videomodecache], si
  6390 00004146 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6391 0000414A B8014F              <2> 	mov ax, 0x4F01
  6392 0000414D BF[EC44]            <2> 	mov di, VBEMODEINFOBLOCK
  6393 00004150 890E[4442]          <2> 	mov [vesamode], cx
  6394 00004154 CD10                <2> 	int 10h
  6395 00004156 E9CB00              <2> 	jmp selectedvesa
  6396                              <2> guiload:
  6397 00004159 BE[C442]            <2> 	mov si, bootmsg
  6398 0000415C E81BBF              <2> 	call printrm
  6399 0000415F 31C0                <2> 	xor ax, ax
  6400 00004161 CD16                <2> 	int 16h
  6401 00004163 3C79                <2> 	cmp al, "y"
  6402 00004165 0F85CBBE            <2> 	jne near vgaset
  6403 00004169 BE[CA71]            <2> 	mov si, crlf
  6404 0000416C E80BBF              <2> 	call printrm
  6405                              <2> guiloadagain:
  6406 0000416F B8004F              <2> 	mov ax, 04F00h
  6407 00004172 BF[EC42]            <2> 	mov di, VBEMODEBLOCK
  6408 00004175 CD10                <2> 	int 10h
  6409 00004177 BE[0E43]            <2> 	mov si, reserved
  6410 0000417A 81EE0200            <2> 	sub si, 2
  6411                              <2> findvideomodes:
  6412 0000417E 81C60200            <2> 	add si, 2
  6413 00004182 8B0C                <2> 	mov cx, [si]
  6414 00004184 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6415 00004188 0F840A00            <2> 	je near nextvmode
  6416 0000418C 81FE[EC43]          <2> 	cmp si, oemdata
  6417 00004190 0F83A0BE            <2> 	jae near vgaset	;;kill if no valid list is found
  6418 00004194 EBE8                <2> 	jmp findvideomodes 	
  6419                              <2> ;;debug,shows vmodes available
  6420                              <2> nextvmode:
  6421 00004196 81EE0200            <2> 	sub si, 2
  6422 0000419A 81FE[0E43]          <2> 	cmp si, reserved
  6423 0000419E 0F82CDFF            <2> 	jb near guiloadagain
  6424 000041A2 8B0C                <2> 	mov cx, [si]
  6425 000041A4 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6426 000041A8 0F84EAFF            <2> 	je near nextvmode
  6427 000041AC 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6428 000041B0 B8014F              <2> 	mov ax, 04F01h
  6429 000041B3 BF[EC44]            <2> 	mov di, VBEMODEINFOBLOCK
  6430 000041B6 890E[4442]          <2> 	mov [vesamode], cx
  6431 000041BA CD10                <2> 	int 10h
  6432 000041BC A0[0545]            <2> 	mov al, [bitsperpixel]
  6433 000041BF 3C10                <2> 	cmp al, 16
  6434 000041C1 75D3                <2> 	jne nextvmode
  6435 000041C3 8936[4642]          <2> 	mov [videomodecache], si
  6436 000041C7 84E4                <2> 	test ah, ah
  6437 000041C9 0F842200            <2> 	jz near setvesamode
  6438 000041CD EBC7                <2> 	jmp nextvmode
  6439 000041CF 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6440 000041D8 20766964656F206D6F- <2>
  6441 000041E1 6465204F4B3F28792F- <2>
  6442 000041EA 6E290D0A00          <2>
  6443                              <2> setvesamode:
  6444 000041EF 8B0E[FE44]          <2> 	mov cx, [resolutionx]
  6445 000041F3 E85900              <2> 	call decshow
  6446 000041F6 B078                <2> 	mov al, "x"
  6447 000041F8 E8C100              <2> 	call char
  6448 000041FB 8B0E[0045]          <2> 	mov cx, [resolutiony]
  6449 000041FF E84D00              <2> 	call decshow
  6450 00004202 B040                <2> 	mov al, "@"
  6451 00004204 E8B500              <2> 	call char
  6452 00004207 31C9                <2> 	xor cx, cx
  6453 00004209 8A0E[0545]          <2> 	mov cl, [bitsperpixel]
  6454 0000420D E83F00              <2> 	call decshow
  6455 00004210 BE[CF41]            <2> 	mov si, isthisvideook
  6456 00004213 E864BE              <2> 	call printrm
  6457 00004216 31C0                <2> 	xor ax, ax
  6458 00004218 CD16                <2> 	int 16h
  6459 0000421A 8B36[4642]          <2> 	mov si, [videomodecache]
  6460 0000421E 3C79                <2> 	cmp al, "y"
  6461 00004220 0F8572FF            <2> 	jne near nextvmode
  6462                              <2> selectedvesa:
  6463 00004224 8B16[FE44]          <2> 	mov dx, [resolutionx]
  6464 00004228 01D2                <2> 	add dx, dx
  6465 0000422A 8916[EC45]          <2> 	mov [resolutionx2], dx
  6466 0000422E 31D2                <2> 	xor dx, dx
  6467 00004230 31C9                <2> 	xor cx, cx
  6468 00004232 B8024F              <2> 	mov ax, 04F02h
  6469 00004235 8B1E[4442]          <2> 	mov bx, [vesamode]
  6470 00004239 CD10                <2> 	int 10h		;;enter VESA mode
  6471 0000423B C606[F071]01        <2> 	mov byte [guion], 1
  6472 00004240 E801BE              <2> 	call getmemorysize;get the memory map after the video is initialized
  6473 00004243 C3                  <2> 	ret
  6474                              <2> 	
  6475 00004244 0000                <2> vesamode dw 0
  6476 00004246 0000                <2> videomodecache dw 0
  6477                              <2> 
  6478 00004248 0000000000          <2> dcnm db 0,0,0,0,0
  6479 0000424D 0000                <2> dcnmend db 0,0
  6480                              <2> 
  6481                              <2> 
  6482                              <2> decshow:
  6483 0000424F BE[4842]            <2> 	mov si, dcnm
  6484                              <2> decclear:
  6485 00004252 B030                <2> 	mov al, "0"
  6486 00004254 8804                <2> 	mov [si], al
  6487 00004256 46                  <2> 	inc si
  6488 00004257 81FE[4D42]          <2> 	cmp si, dcnmend
  6489 0000425B 76F5                <2> 	jbe decclear
  6490 0000425D 4E                  <2> 	dec si
  6491 0000425E E81500              <2> 	call convertrm
  6492 00004261 BE[4842]            <2> 	mov si, dcnm
  6493                              <2> dectst:
  6494 00004264 8A04                <2> 	mov al, [si]
  6495 00004266 46                  <2> 	inc si
  6496 00004267 81FE[4D42]          <2> 	cmp si, dcnmend
  6497 0000426B 7704                <2> 	ja dectstend
  6498 0000426D 3C30                <2> 	cmp al, "0"
  6499 0000426F 76F3                <2> 	jbe dectst
  6500                              <2> dectstend:
  6501 00004271 4E                  <2> 	dec si
  6502 00004272 E805BE              <2> 	call printrm
  6503 00004275 C3                  <2> 	ret
  6504                              <2> 	
  6505                              <2> 	
  6506                              <2> convertrm:
  6507 00004276 4E                  <2> 	dec si
  6508 00004277 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6509                              <2> cnvrtrm:
  6510 00004279 89DE                <2> 	mov si, bx
  6511 0000427B 81EE0300            <2> 	sub si, 3
  6512 0000427F 46                  <2> ten3rm:	inc si
  6513 00004280 81F9E803            <2> 	cmp cx, 1000
  6514 00004284 7208                <2> 	jb ten2rm
  6515 00004286 81E9E803            <2> 	sub cx, 1000
  6516 0000428A FE04                <2> 	inc byte [si]
  6517 0000428C EBEB                <2> 	jmp cnvrtrm
  6518 0000428E 46                  <2> ten2rm:	inc si
  6519 0000428F 81F96400            <2> 	cmp cx, 100
  6520 00004293 7208                <2> 	jb ten1rm
  6521 00004295 81E96400            <2> 	sub cx, 100
  6522 00004299 FE04                <2> 	inc byte [si]
  6523 0000429B EBDC                <2> 	jmp cnvrtrm
  6524 0000429D 46                  <2> ten1rm:	inc si
  6525 0000429E 81F90A00            <2> 	cmp cx, 10
  6526 000042A2 7208                <2> 	jb ten0rm
  6527 000042A4 81E90A00            <2> 	sub cx, 10
  6528 000042A8 FE04                <2> 	inc byte [si]
  6529 000042AA EBCD                <2> 	jmp cnvrtrm
  6530 000042AC 46                  <2> ten0rm:	inc si
  6531 000042AD 81F90100            <2> 	cmp cx, 1
  6532 000042B1 7208                <2> 	jb tendnrm
  6533 000042B3 81E90100            <2> 	sub cx, 1
  6534 000042B7 FE04                <2> 	inc byte [si]
  6535 000042B9 EBBE                <2> 	jmp cnvrtrm
  6536                              <2> tendnrm:
  6537 000042BB C3                  <2> 	ret
  6538                              <2> 
  6539                              <2>     char: 		    ;char must be in al
  6540 000042BC BB0700              <2>        mov bx, 07
  6541 000042BF B40E                <2> 	   mov ah, 0Eh
  6542 000042C1 CD10                <2> 	   int 10h
  6543 000042C3 C3                  <2> 	   ret
  6544                              <2> 
  6545 000042C4 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6546 000042CD 20746865204755493F- <2>
  6547 000042D6 28792F6E2900        <2>
  6548                              <2> 
  6549                              <2> 
  6550                              <2> mcursor:
  6551 000042DC 01                  <2> 	db	00000001b
  6552 000042DD 81                  <2> 	db	10000001b
  6553 000042DE C1                  <2> 	db	11000001b
  6554 000042DF E1                  <2> 	db	11100001b
  6555 000042E0 F1                  <2> 	db	11110001b
  6556 000042E1 F9                  <2> 	db	11111001b
  6557 000042E2 FD                  <2> 	db	11111101b
  6558 000042E3 FF                  <2> 	db	11111111b
  6559 000042E4 F9                  <2> 	db	11111001b
  6560 000042E5 B9                  <2> 	db	10111001b
  6561 000042E6 39                  <2> 	db	00111001b
  6562 000042E7 1C                  <2> 	db	00011100b
  6563 000042E8 1C                  <2> 	db	00011100b
  6564 000042E9 0E                  <2> 	db	00001110b
  6565 000042EA 0E                  <2> 	db	00001110b
  6566 000042EB 0C                  <2> 	db	00001100b
  6567                              <2> mcursorend:
  6568                              <2> 
  6569                              <2> 
  6570                              <2> VBEMODEBLOCK:
  6571 000042EC 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6572 000042F0 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6573 000042F2 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6574 000042F6 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6575 000042FA 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6576 000042FE 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6577 00004300 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6578 00004302 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6579 00004306 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6580 0000430A 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6581 0000430E 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6582 000043EC 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6583                              <2> 
  6584                              <2> VBEMODEINFOBLOCK:
  6585                              <2> ;Mandatory information for all VBE revision
  6586 000044EC 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6587 000044EE 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6588 000044EF 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6589 000044F0 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6590 000044F2 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6591 000044F4 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6592 000044F6 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6593 000044F8 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6594 000044FC 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6595                              <2> 
  6596                              <2> ;Mandatory information for VBE 1.2 and above
  6597 000044FE 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6598 00004500 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6599 00004502 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6600 00004503 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6601 00004504 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6602 00004505 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6603 00004506 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6604 00004507 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6605 00004508 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6606 00004509 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6607 0000450A 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6608                              <2> 
  6609                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6610 0000450B 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6611 0000450C 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6612 0000450D 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6613 0000450E 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6614 0000450F 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6615 00004510 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6616 00004511 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6617 00004512 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6618 00004513 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6619                              <2> 
  6620                              <2> ;Mandatory information for VBE 2.0 and above
  6621 00004514 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6622 00004518 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6623 0000451C 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6624 0000451E 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6625                              <2> 
  6626 000045EC 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6627                              <2> VBEEND:
  6628                              <2> [BITS 32]
  6629                              <1> 	%include "source/drivers/input/mouse.asm"
  6630 000045F0 00                  <2> mousedisabled db 0
  6631                              <2> 	
  6632                              <2> 	cursorgui:
  6633 000045F1 803D[82710000]01    <2> 		cmp byte [mouseon], 1
  6634 000045F8 0F8432000000        <2> 		je near mousedaemon
  6635 000045FE 803D[F0710000]00    <2> 		cmp byte [guion], 0
  6636 00004605 0F84D2040000        <2> 		je near entdown
  6637                              <2> 	initmouse:
  6638 0000460B 803D[F0710000]00    <2> 		cmp byte [guion], 0
  6639 00004612 7405                <2> 		je noswmsposinit
  6640 00004614 E844120000          <2> 		call switchmousepos2
  6641                              <2> 	noswmsposinit:
  6642 00004619 E85D020000          <2> 	  	call PS2SET
  6643 0000461E E886020000          <2> 		call ACTMOUS
  6644 00004623 C605[82710000]01    <2> 		mov byte [mouseon],1
  6645 0000462A E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6646                              <2> 		;call GETB
  6647                              <2> 				;;If the bytes are mixed up,
  6648                              <2> 				;;remove this line or add another of this line.
  6649                              <2> 	nomouse:
  6650 0000462F C3                  <2> 		ret
  6651                              <2> 		
  6652                              <2> 	mousedaemon:
  6653 00004630 803D[82710000]01    <2> 		cmp byte [mouseon], 1
  6654 00004637 75D2                <2> 		jne initmouse
  6655 00004639 E464                <2> 		in al, 64h ; Status
  6656 0000463B A820                <2> 		test al, 20h ; PS2-Mouse?
  6657 0000463D 0F8502000000        <2> 		jnz near moused
  6658 00004643 F4                  <2> 		hlt
  6659 00004644 C3                  <2> 		ret
  6660                              <2> 	moused:
  6661 00004645 803D[F0450000]01    <2> 		cmp byte [mousedisabled], 1
  6662 0000464C 74E1                <2> 		je nomouse
  6663 0000464E E87B020000          <2> 		  call GETB
  6664 00004653 88C3                <2> 		  mov  bl, al
  6665 00004655 80E301              <2> 		  and  bl, 1
  6666 00004658 881D[F3480000]      <2> 		  mov  BYTE [LBUTTON], bl
  6667 0000465E 88C3                <2> 		  mov  bl, al
  6668 00004660 80E302              <2> 		  and  bl, 2
  6669 00004663 D0EB                <2> 		  shr  bl, 1
  6670 00004665 881D[F4480000]      <2> 		  mov  BYTE [RBUTTON], bl
  6671 0000466B 88C3                <2> 		  mov  bl, al
  6672 0000466D 80E304              <2> 		  and  bl, 4
  6673 00004670 C0EB02              <2> 		  shr  bl, 2
  6674 00004673 881D[F5480000]      <2> 		  mov  BYTE [MBUTTON], bl
  6675 00004679 E850020000          <2> 		  call GETB
  6676 0000467E A2[F6480000]        <2> 		  mov  BYTE [XCOORD], al
  6677 00004683 E846020000          <2> 		  call GETB
  6678 00004688 A2[F7480000]        <2> 		  mov  BYTE [YCOORD], al
  6679                              <2> 
  6680                              <2> 	showpixelcursor:
  6681 0000468D 668B15[E2470000]    <2> 		mov dx, [mousecursorposition]
  6682 00004694 668B0D[E4470000]    <2> 		mov cx, [mousecursorposition + 2]
  6683 0000469B 668915[DE470000]    <2> 		mov [lastmouseposition], dx
  6684 000046A2 66890D[E0470000]    <2> 		mov [lastmouseposition + 2], cx
  6685 000046A9 A0[F6480000]        <2> 		mov al, [XCOORD]
  6686 000046AE 3C80                <2> 		cmp al, 128
  6687 000046B0 730C                <2> 		jae subxcoord
  6688 000046B2 00C0                <2> 		add al, al
  6689 000046B4 30E4                <2> 		xor ah, ah
  6690 000046B6 6601C2              <2> 		add dx, ax
  6691 000046B9 E90B000000          <2> 		jmp subxcoorddn
  6692                              <2> 	subxcoord:
  6693 000046BE 00C0                <2> 		add al, al
  6694 000046C0 30DB                <2> 		xor bl, bl
  6695 000046C2 28C3                <2> 		sub bl, al
  6696 000046C4 30FF                <2> 		xor bh, bh
  6697 000046C6 6629DA              <2> 		sub dx, bx
  6698                              <2> 	subxcoorddn:
  6699 000046C9 8A1D[F7480000]      <2> 		mov bl, [YCOORD]
  6700 000046CF 30C0                <2> 		xor al, al
  6701 000046D1 28D8                <2> 		sub al, bl
  6702 000046D3 3C80                <2> 		cmp al, 128
  6703 000046D5 730A                <2> 		jae subycoord
  6704 000046D7 30E4                <2> 		xor ah, ah
  6705 000046D9 6601C1              <2> 		add cx, ax
  6706 000046DC E909000000          <2> 		jmp subycoorddn
  6707                              <2> 	subycoord:
  6708 000046E1 30DB                <2> 		xor bl, bl
  6709 000046E3 28C3                <2> 		sub bl, al
  6710 000046E5 30FF                <2> 		xor bh, bh
  6711 000046E7 6629D9              <2> 		sub cx, bx
  6712                              <2> 	subycoorddn:
  6713 000046EA 6681FA204E          <2> 		cmp dx, 20000
  6714 000046EF 7603                <2> 		jbe nooriginx2
  6715 000046F1 6631D2              <2> 		xor dx, dx
  6716                              <2> 	nooriginx2:
  6717 000046F4 6681F9204E          <2> 		cmp cx, 20000
  6718 000046F9 7603                <2> 		jbe nooriginy2
  6719 000046FB 6631C9              <2> 		xor cx, cx
  6720                              <2> 	nooriginy2:
  6721 000046FE 6681FA0000          <2> 		cmp dx, 0
  6722 00004703 7415                <2> 		je nofixxcolumn2
  6723 00004705 663B15[EC450000]    <2> 		cmp dx, [resolutionx2]
  6724 0000470C 720C                <2> 		jb nofixxcolumn2
  6725 0000470E 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  6726 00004715 6681EA0200          <2> 		sub dx, 2
  6727                              <2> 	nofixxcolumn2:
  6728 0000471A 6681F90000          <2> 		cmp cx, 0
  6729 0000471F 7415                <2> 		je nofixyrow2
  6730 00004721 663B0D[00450000]    <2> 		cmp cx, [resolutiony]
  6731 00004728 720C                <2> 		jb nofixyrow2
  6732 0000472A 668B0D[00450000]    <2> 		mov cx, [resolutiony]
  6733 00004731 6681E90100          <2> 		sub cx, 1
  6734                              <2> 	nofixyrow2:
  6735 00004736 668915[E2470000]    <2> 		mov [mousecursorposition], dx
  6736 0000473D 66890D[E4470000]    <2> 		mov [mousecursorposition + 2], cx
  6737 00004744 803D[F0710000]00    <2> 		cmp byte [guion], 0
  6738 0000474B 0F8495000000        <2> 		je near termmouse
  6739 00004751 E8A7100000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6740 00004756 803D[F3480000]01    <2> 		cmp byte [LBUTTON], 1
  6741 0000475D 0F84E2210000        <2> 		je near clickicon
  6742 00004763 803D[F4480000]01    <2> 		cmp byte [RBUTTON], 1
  6743 0000476A 0F84D5210000        <2> 		je near clickicon
  6744 00004770 A0[32690000]        <2> 		mov al, [pbutton]
  6745 00004775 C705[35690000]0000- <2> 		mov dword [dragging], 0
  6746 0000477D 0000                <2>
  6747 0000477F 3C00                <2> 		cmp al, 0
  6748 00004781 740F                <2> 		je nopreviousbutton
  6749 00004783 E81D100000          <2> 		call clearmousecursor
  6750 00004788 E884130000          <2> 		call reloadallgraphics
  6751                              <2> 	windowtermcopyend:
  6752 0000478D E8CB100000          <2> 		call switchmousepos2
  6753                              <2> 	nopreviousbutton:
  6754 00004792 30C0                <2> 		xor al, al
  6755 00004794 A2[32690000]        <2> 		mov [pbutton], al
  6756 00004799 A2[996E0000]        <2> 		mov [windrag], al
  6757 0000479E A0[F3480000]        <2> 		mov al, [LBUTTON]
  6758 000047A3 A2[33690000]        <2> 		mov [pLBUTTON], al
  6759 000047A8 A0[F4480000]        <2> 		mov al, [RBUTTON]
  6760 000047AD A2[34690000]        <2> 		mov [pRBUTTON], al
  6761 000047B2 31D2                <2> 		xor edx, edx
  6762 000047B4 668B15[E2470000]    <2> 		mov dx, [mousecursorposition]
  6763 000047BB 668B0D[E4470000]    <2> 		mov cx, [mousecursorposition + 2]
  6764 000047C2 66BB18C7            <2> 		mov bx, 1100011100011000b
  6765 000047C6 66B80100            <2> 		mov ax, 1
  6766 000047CA C605[2F690000]01    <2> 		mov byte [showcursorfonton], 1
  6767 000047D1 E8051A0000          <2> 		call showfontvesa
  6768 000047D6 C605[2F690000]00    <2> 		mov byte [showcursorfonton], 0
  6769 000047DD C3                  <2> 		ret
  6770                              <2> 
  6771 000047DE 00000000            <2> lastmouseposition dw 0,0
  6772 000047E2 00000000            <2> mousecursorposition dw 0,0	
  6773                              <2> 
  6774                              <2> termmouse:
  6775 000047E6 BE[E6A70300]        <2> 		mov esi, videobuf
  6776 000047EB 31D2                <2> 		xor edx, edx
  6777 000047ED 668B15[DE470000]    <2> 		mov dx, [lastmouseposition]
  6778 000047F4 668B0D[E0470000]    <2> 		mov cx, [lastmouseposition + 2]
  6779 000047FB 66A1[79480000]      <2> 		mov ax, [cursorcache]
  6780 00004801 663D0000            <2> 		cmp ax, 0
  6781 00004805 7425                <2> 		je nocopycursorcache
  6782 00004807 66C1E104            <2> 		shl cx, 4
  6783 0000480B 66C1E203            <2> 		shl dx, 3
  6784 0000480F 01D6                <2> 		add esi, edx
  6785 00004811 6631D2              <2> 		xor dx, dx
  6786 00004814 8A15[33180000]      <2> 		mov dl, [charxy]
  6787 0000481A 6641                <2> 		inc cx
  6788                              <2> termmousecplp1:
  6789 0000481C 01D6                <2> 		add esi, edx
  6790 0000481E 6649                <2> 		dec cx
  6791 00004820 6681F90000          <2> 		cmp cx, 0
  6792 00004825 75F5                <2> 		jne termmousecplp1
  6793 00004827 29D6                <2> 		sub esi, edx
  6794 00004829 668906              <2> 		mov [esi], ax
  6795                              <2> nocopycursorcache:
  6796 0000482C BE[E6A70300]        <2> 		mov esi, videobuf
  6797 00004831 31D2                <2> 		xor edx, edx
  6798 00004833 668B15[E2470000]    <2> 		mov dx, [mousecursorposition]
  6799 0000483A 668B0D[E4470000]    <2> 		mov cx, [mousecursorposition + 2]
  6800 00004841 66C1E104            <2> 		shl cx, 4
  6801 00004845 66C1E203            <2> 		shl dx, 3
  6802 00004849 01D6                <2> 		add esi, edx
  6803 0000484B 6631D2              <2> 		xor dx, dx
  6804 0000484E 8A15[33180000]      <2> 		mov dl, [charxy]
  6805 00004854 6641                <2> 		inc cx
  6806                              <2> termmousecplp2:
  6807 00004856 01D6                <2> 		add esi, edx
  6808 00004858 6649                <2> 		dec cx
  6809 0000485A 6681F90000          <2> 		cmp cx, 0
  6810 0000485F 75F5                <2> 		jne termmousecplp2
  6811 00004861 29D6                <2> 		sub esi, edx
  6812 00004863 668B06              <2> 		mov ax, [esi]
  6813 00004866 66A3[79480000]      <2> 		mov [cursorcache], ax
  6814 0000486C B080                <2> 		mov al, 128
  6815 0000486E B407                <2> 		mov ah, 7
  6816 00004870 668906              <2> 		mov [esi], ax
  6817 00004873 E8B2D1FFFF          <2> 		call termcopy
  6818 00004878 C3                  <2> 		ret
  6819 00004879 0000                <2> cursorcache db 0,0
  6820                              <2> 
  6821                              <2> PS2SET:
  6822 0000487B B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6823 0000487D E664                <2>   out  0x64, al		; write to keyboardcontroller
  6824 0000487F E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6825 00004884 C3                  <2> ret
  6826                              <2> 
  6827                              <2> CHKPRT:
  6828 00004885 66B96400            <2>   mov  cx, 100
  6829                              <2>  .again:
  6830 00004889 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6831 0000488B A802                <2>   test al, 2		; Check if input buffer is empty
  6832 0000488D 7402                <2>   je .go
  6833 0000488F E2F8                <2>   loop .again
  6834                              <2>  .go:
  6835 00004891 C3                  <2> ret
  6836                              <2> 
  6837                              <2> WMOUS:
  6838 00004892 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6839 00004894 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6840 00004896 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6841 0000489B C3                  <2> ret
  6842                              <2> 
  6843                              <2> MBUFFUL:
  6844 0000489C 66B96400            <2>   mov cx, 100
  6845                              <2>  .mn:
  6846 000048A0 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6847 000048A2 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6848 000048A4 7402                <2>   jz  .mnn
  6849 000048A6 E2F8                <2>   loop .mn
  6850                              <2>  .mnn:
  6851 000048A8 C3                  <2> ret
  6852                              <2> 
  6853                              <2> 
  6854                              <2> ACTMOUS:
  6855 000048A9 E8E4FFFFFF          <2>   call WMOUS
  6856 000048AE B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6857 000048B0 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6858 000048B2 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6859 000048B7 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6860 000048BC C3                  <2> ret
  6861                              <2> 
  6862                              <2> CHKMOUS:
  6863 000048BD B300                <2>   mov  bl, 0
  6864 000048BF 66B96400            <2>   mov cx, 100
  6865                              <2>  .vrd:
  6866 000048C3 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6867 000048C5 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6868 000048C7 7504                <2>   jnz .yy
  6869 000048C9 E2F8                <2>   loop .vrd
  6870 000048CB B301                <2>   mov  bl, 1
  6871                              <2>  .yy:
  6872 000048CD C3                  <2> ret
  6873                              <2> 
  6874                              <2> GETB:
  6875                              <2>  .cagain:
  6876 000048CE E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6877 000048D3 08DB                <2>   or bl, bl
  6878 000048D5 75F7                <2>   jnz .cagain
  6879 000048D7 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6880 000048D9 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6881 000048DB E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6882 000048E0 6631C0              <2>   xor  ax, ax
  6883 000048E3 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6884 000048E5 88C2                <2>   mov  dl, al
  6885 000048E7 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6886 000048E9 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6887 000048EB E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6888 000048F0 88D0                <2>   mov  al, dl
  6889 000048F2 C3                  <2> ret
  6890                              <2> 
  6891 000048F3 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6892 000048F4 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6893 000048F5 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6894 000048F6 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6895 000048F7 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6896                              <1> %endif
  6897                              <1> %include "source/drivers/sound/pcspkr.asm"
  6898                              <2> ;PC Speaker Drivers
  6899                              <2> PCSpeakerRAW:
  6900 000048F8 60                  <2> 	pusha
  6901                              <2> nosoundrep:
  6902 000048F9 8B35[6B020000]      <2> 	mov esi, [soundpos]
  6903 000048FF 31C9                <2> 	xor ecx, ecx
  6904 00004901 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  6905 00004908 6681F90000          <2> 	cmp cx, 0
  6906 0000490D 0F8548000000        <2> 	jne near donesetpitch
  6907 00004913 668B0E              <2> 	mov cx, [esi]
  6908 00004916 668B5E02            <2> 	mov bx, [esi + 2]
  6909 0000491A 66890D[69020000]    <2> 	mov [soundrepititions], cx
  6910 00004921 81C604000000        <2> 	add esi, 4
  6911 00004927 8935[6B020000]      <2> 	mov [soundpos], esi
  6912 0000492D 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  6913 00004933 7735                <2> 	ja stopsound
  6914 00004935 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  6915 0000493D 00                  <2>
  6916 0000493E 74B9                <2> 	je nosoundrep
  6917 00004940 6681FB0000          <2> 	cmp bx, 0
  6918 00004945 740F                <2> 	je nosoundplay
  6919 00004947 E840000000          <2> 	call setpitch
  6920 0000494C E849000000          <2> 	call startsound
  6921 00004951 E905000000          <2> 	jmp donesetpitch
  6922                              <2> nosoundplay:
  6923 00004956 E846000000          <2> 	call killsound
  6924                              <2> donesetpitch:
  6925 0000495B 6649                <2> 	dec cx
  6926 0000495D 66890D[69020000]    <2> 	mov [soundrepititions], cx
  6927 00004964 61                  <2> 	popa
  6928 00004965 E93EB9FFFF          <2> 	jmp timerinterrupt
  6929                              <2> stopsound:
  6930 0000496A 31C0                <2> 	xor eax, eax
  6931 0000496C 66A3[69020000]      <2> 	mov [soundrepititions], ax
  6932 00004972 A2[68020000]        <2> 	mov [soundon], al
  6933 00004977 A3[6B020000]        <2> 	mov [soundpos], eax
  6934 0000497C A3[6F020000]        <2> 	mov [soundendpos], eax
  6935 00004981 E81B000000          <2> 	call killsound
  6936 00004986 61                  <2> 	popa
  6937 00004987 E91CB9FFFF          <2> 	jmp timerinterrupt
  6938                              <2> 
  6939                              <2> 
  6940                              <2> setpitch:
  6941 0000498C B0B6                <2> 	mov al, 0xB6
  6942 0000498E E643                <2> 	out 0x43, al
  6943 00004990 6689D8              <2> 	mov ax, bx
  6944 00004993 E642                <2> 	out 0x42, al
  6945 00004995 88E0                <2> 	mov al, ah
  6946 00004997 E642                <2> 	out 0x42, al
  6947 00004999 C3                  <2> 	ret
  6948                              <2> startsound:
  6949 0000499A E461                <2> 	in al, 0x61
  6950 0000499C 0C03                <2> 	or al, 3
  6951 0000499E E661                <2> 	out 0x61, al
  6952 000049A0 C3                  <2> 	ret
  6953                              <2> killsound:
  6954 000049A1 E461                <2> 	in al, 0x61
  6955 000049A3 24FC                <2> 	and al, 0xFC
  6956 000049A5 E661                <2> 	out 0x61, al
  6957 000049A7 C3                  <2> 	ret
  6958                              <2> 	
  6959                              <1> %ifdef sound.included
  6960                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6961                              <1> %endif
  6962                              <1> %ifdef io.serial
  6963                              <1> 	%include "source/drivers/input/serial.asm"
  6964                              <1> %else
  6965                              <1> 	%include "source/drivers/input/keyboard.asm"
  6966 000049A8 00                  <2> specialkey db 0
  6967                              <2> ;charregion db 0
  6968                              <2> waitforinput:		;this is basically the idle process
  6969                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  6970                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  6971 000049A9 6631C0              <2> 	xor ax, ax
  6972 000049AC A0[27540000]        <2> 	mov al, [threadson]
  6973 000049B1 8825[27540000]      <2> 	mov [threadson], ah
  6974 000049B7 FB                  <2> 	sti
  6975 000049B8 F4                  <2> 	hlt
  6976 000049B9 A2[27540000]        <2> 	mov [threadson], al
  6977 000049BE 66813D[11160000]00- <2> 	cmp word [trans], 0
  6978 000049C6 00                  <2>
  6979 000049C7 7401                <2> 	je getkey
  6980 000049C9 C3                  <2> 	ret
  6981                              <2> getkey:
  6982 000049CA 31C0                <2> 		xor eax, eax
  6983 000049CC A2[A8490000]        <2> 		mov [specialkey], al
  6984 000049D1 A3[0D160000]        <2> 		mov [lastkey], eax
  6985 000049D6 E464                <2> 		in al, 64h ; Status
  6986                              <2> 	%ifdef gui.included
  6987 000049D8 A820                <2> 		test al, 20h ; PS2-Mouse?
  6988 000049DA 0F8565FCFFFF        <2> 		jnz near moused
  6989                              <2> 	%endif
  6990 000049E0 A801                <2> 		test al, 1 
  6991 000049E2 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6992                              <2> 	calckey:
  6993 000049E4 E460                <2> 		in al, 60h
  6994 000049E6 30E4                <2> 		xor ah, ah
  6995 000049E8 6689C3              <2> 		mov bx, ax
  6996 000049EB 66A3[0F160000]      <2> 		mov [lastkey + 2], ax
  6997 000049F1 BF[804B0000]        <2> 		mov edi, scancode
  6998                              <2> 	searchscan: 
  6999 000049F6 80FB3A              <2> 		cmp bl, 3Ah
  7000 000049F9 7314                <2> 		jae scanother
  7001 000049FB C1E004              <2> 		shl eax, 4
  7002 000049FE 01C7                <2> 		add edi, eax
  7003 00004A00 668B07              <2> 		mov ax, [edi]
  7004 00004A03 663D0000            <2> 		cmp ax, 0
  7005 00004A07 7406                <2> 		je scanother
  7006 00004A09 E9D0000000          <2> 		jmp scanfound
  7007 00004A0E 00                  <2> uppercase db 0
  7008                              <2> scanother:
  7009 00004A0F 6631C0              <2> 		xor ax, ax
  7010 00004A12 66A3[0D160000]      <2> 		mov [lastkey], ax
  7011 00004A18 80FBE0              <2> 		cmp bl, 0E0h
  7012 00004A1B 0F8477000000        <2> 		je near getkeyspecial
  7013 00004A21 803D[A8490000]E0    <2> 		cmp byte [specialkey], 0xE0
  7014 00004A28 7525                <2> 		jne nospecialkey
  7015 00004A2A 80FB38              <2> 		cmp bl, 38h
  7016 00004A2D 0F849A000000        <2> 		je near alton
  7017 00004A33 80FBB8              <2> 		cmp bl, 0B8h
  7018 00004A36 0F8499000000        <2> 		je near altoff
  7019 00004A3C 80FB1D              <2> 		cmp bl, 1Dh
  7020 00004A3F 0F8478000000        <2> 		je near ctron
  7021 00004A45 80FB9D              <2> 		cmp bl, 9Dh
  7022 00004A48 0F8477000000        <2> 		je near ctroff
  7023 00004A4E C3                  <2> 		ret
  7024                              <2> nospecialkey:
  7025 00004A4F 80FB2A              <2> 		cmp bl, 2Ah
  7026 00004A52 0F8455000000        <2> 		je near shifton
  7027 00004A58 80FB36              <2> 		cmp bl, 36h
  7028 00004A5B 0F844C000000        <2> 		je near shifton
  7029 00004A61 80FB1C              <2> 		cmp bl, 1Ch
  7030 00004A64 0F8473000000        <2> 		je near entdown
  7031 00004A6A 80FBAA              <2> 		cmp bl, 0AAh
  7032 00004A6D 0F8442000000        <2> 		je near shiftoff
  7033 00004A73 80FBB6              <2> 		cmp bl, 0B6h
  7034 00004A76 0F8439000000        <2> 		je near shiftoff
  7035 00004A7C 80FB3A              <2> 		cmp bl, 3Ah
  7036 00004A7F 0F84A7000000        <2> 		je near capslock
  7037 00004A85 80FB45              <2> 		cmp bl, 0x45
  7038 00004A88 0F84AF000000        <2> 		je near numlock
  7039 00004A8E 80FB46              <2> 		cmp bl, 0x46
  7040 00004A91 0F84BE000000        <2> 		je near scrolllock
  7041 00004A97 C3                  <2> 		ret
  7042                              <2> 	getkeyspecial:
  7043 00004A98 C605[A8490000]E0    <2> 		mov byte [specialkey], 0xE0
  7044 00004A9F E940FFFFFF          <2> 		jmp calckey
  7045                              <2> 	shift:
  7046 00004AA4 A0[0E4A0000]        <2> 		mov al, [uppercase]
  7047 00004AA9 3C01                <2> 		cmp al, 1
  7048 00004AAB 7308                <2> 		jae shiftoff
  7049                              <2> 	shifton:
  7050 00004AAD C605[0E4A0000]01    <2> 		mov byte [uppercase], 1
  7051 00004AB4 C3                  <2> 		ret
  7052                              <2> 	shiftoff:
  7053 00004AB5 C605[0E4A0000]00    <2> 		mov byte [uppercase], 0
  7054 00004ABC C3                  <2> 		ret
  7055                              <2> 	ctron:
  7056 00004ABD C605[2B4B0000]01    <2> 		mov byte [ctrkey], 1
  7057 00004AC4 C3                  <2> 		ret
  7058                              <2> 	ctroff:
  7059 00004AC5 C605[2B4B0000]00    <2> 		mov byte [ctrkey], 0
  7060 00004ACC C3                  <2> 		ret
  7061                              <2> 	alton:
  7062 00004ACD C605[2A4B0000]01    <2> 		mov byte [altkey], 1
  7063 00004AD4 C3                  <2> 		ret
  7064                              <2> 	altoff:
  7065 00004AD5 C605[2A4B0000]00    <2> 		mov byte [altkey], 0
  7066 00004ADC C3                  <2> 		ret
  7067                              <2> 	entdown:
  7068 00004ADD C3                  <2> 		ret
  7069                              <2> scanfound:
  7070 00004ADE 81C708000000        <2> 		add edi, 8
  7071 00004AE4 803D[2B4B0000]01    <2> 		cmp byte [ctrkey], 1
  7072 00004AEB 7306                <2> 		jae ctrlin
  7073 00004AED 81EF08000000        <2> 		sub edi, 8
  7074                              <2> 	ctrlin:
  7075 00004AF3 81C704000000        <2> 		add edi, 4
  7076 00004AF9 803D[2A4B0000]01    <2> 		cmp byte [altkey], 1
  7077 00004B00 7306                <2> 		jae altin
  7078 00004B02 81EF04000000        <2> 		sub edi, 4
  7079                              <2> 	altin:
  7080 00004B08 81C702000000        <2> 		add edi, 2
  7081 00004B0E 803D[0E4A0000]01    <2> 		cmp byte [uppercase], 1
  7082 00004B15 7306                <2> 		jae uppercaseon
  7083 00004B17 81EF02000000        <2> 		sub edi, 2
  7084                              <2> 	uppercaseon:
  7085 00004B1D 668B07              <2> 		mov ax,[edi]
  7086 00004B20 66A3[0D160000]      <2> 		mov [lastkey], ax
  7087 00004B26 C3                  <2> 		ret
  7088                              <2> 		
  7089 00004B27 00                  <2> keyboardstatus db 0
  7090 00004B28 00                  <2> numlockstatus db 0
  7091 00004B29 00                  <2> scrolllockstatus db 0
  7092 00004B2A 00                  <2> altkey db 0
  7093 00004B2B 00                  <2> ctrkey db 0
  7094                              <2> 	capslock:
  7095 00004B2C 8035[274B0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7096 00004B33 E835000000          <2> 		call updatekblights
  7097 00004B38 E967FFFFFF          <2> 		jmp shift
  7098                              <2> 		
  7099                              <2> 	numlock:
  7100 00004B3D 8035[274B0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7101 00004B44 8035[284B0000]01    <2> 		xor byte [numlockstatus], 1
  7102 00004B4B E81D000000          <2> 		call updatekblights
  7103 00004B50 E975FEFFFF          <2> 		jmp getkey
  7104                              <2> 	
  7105                              <2> 	scrolllock:
  7106 00004B55 8035[274B0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7107 00004B5C 8035[294B0000]01    <2> 		xor byte [scrolllockstatus], 1
  7108 00004B63 E805000000          <2> 		call updatekblights
  7109 00004B68 E95DFEFFFF          <2> 		jmp getkey
  7110                              <2> 		
  7111                              <2> 	updatekblights:
  7112 00004B6D B0ED                <2> 		mov al, 0xED
  7113 00004B6F 66BA6000            <2> 		mov dx, 0x60
  7114 00004B73 EE                  <2> 		out dx, al
  7115                              <2> 	chkkbdack:
  7116 00004B74 EC                  <2> 		in al, dx
  7117 00004B75 3CFA                <2> 		cmp al, 0xFA
  7118 00004B77 75FB                <2> 		jne chkkbdack
  7119 00004B79 A0[274B0000]        <2> 		mov al, [keyboardstatus]
  7120 00004B7E EE                  <2> 		out dx, al
  7121 00004B7F C3                  <2> 		ret
  7122                              <2> 		
  7123                              <2> scancode:
  7124                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7125 00004B80 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7126 00004B89 00000000000000      <2>
  7127 00004B90 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7128 00004B99 00000000000000      <2>
  7129 00004BA0 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7130 00004BA9 00000000000000      <2>
  7131 00004BB0 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7132 00004BB9 00000000000000      <2>
  7133 00004BC0 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7134 00004BC9 00000000000000      <2>
  7135 00004BD0 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7136 00004BD9 00000000000000      <2>
  7137 00004BE0 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7138 00004BE9 00000000000000      <2>
  7139 00004BF0 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7140 00004BF9 00000000000000      <2>
  7141 00004C00 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7142 00004C09 00000000000000      <2>
  7143 00004C10 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7144 00004C19 00000000000000      <2>
  7145 00004C20 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7146 00004C29 00000000000000      <2>
  7147 00004C30 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7148 00004C39 00000000000000      <2>
  7149 00004C40 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7150 00004C49 00000000000000      <2>
  7151 00004C50 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7152 00004C59 00000000000000      <2>
  7153 00004C60 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7154 00004C69 00000000000000      <2>
  7155 00004C70 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7156 00004C79 00000000000000      <2>
  7157 00004C80 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7158 00004C88 003A0039041904      <2>
  7159 00004C90 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7160 00004C99 03000046042604      <2>
  7161 00004CA0 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7162 00004CA9 03950343042304      <2>
  7163 00004CB0 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7164 00004CB9 03A1033A041A04      <2>
  7165 00004CC0 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7166 00004CC9 03A40335041504      <2>
  7167 00004CD0 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7168 00004CD9 03A5033D041D04      <2>
  7169 00004CE0 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7170 00004CE9 03980333041304      <2>
  7171 00004CF0 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7172 00004CF9 03990348042804      <2>
  7173 00004D00 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7174 00004D09 039F0349042904      <2>
  7175 00004D10 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7176 00004D19 03A00337041704      <2>
  7177 00004D20 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7178 00004D29 00000045042504      <2>
  7179 00004D30 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7180 00004D39 0000004A042A04      <2>
  7181 00004D40 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7182 00004D49 00000000000000      <2>
  7183 00004D50 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7184 00004D59 00000000000000      <2>
  7185 00004D60 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7186 00004D69 03910344042404      <2>
  7187 00004D70 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7188 00004D79 03A3034B042B04      <2>
  7189 00004D80 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7190 00004D89 03940332041204      <2>
  7191 00004D90 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7192 00004D99 03A60330041004      <2>
  7193 00004DA0 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7194 00004DA9 0393033F041F04      <2>
  7195 00004DB0 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7196 00004DB9 03970340042004      <2>
  7197 00004DC0 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7198 00004DC9 039E033E041E04      <2>
  7199 00004DD0 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7200 00004DD9 039A033B041B04      <2>
  7201 00004DE0 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7202 00004DE9 039B0334041404      <2>
  7203 00004DF0 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7204 00004DF9 00000036041604      <2>
  7205 00004E00 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7206 00004E09 0000004D042D04      <2>
  7207 00004E10 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7208 00004E19 00000051040104      <2>
  7209 00004E20 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7210 00004E29 00000000000000      <2>
  7211 00004E30 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7212 00004E39 0000002F005C00      <2>
  7213 00004E40 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7214 00004E49 0396034F042F04      <2>
  7215 00004E50 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7216 00004E59 03A70347042704      <2>
  7217 00004E60 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7218 00004E69 03A80341042104      <2>
  7219 00004E70 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7220 00004E79 03A9033C041C04      <2>
  7221 00004E80 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7222 00004E89 03920338041804      <2>
  7223 00004E90 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7224 00004E99 039D0342042204      <2>
  7225 00004EA0 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7226 00004EA9 039C034C042C04      <2>
  7227 00004EB0 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7228 00004EB9 00000031041104      <2>
  7229 00004EC0 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7230 00004EC9 0000004E042E04      <2>
  7231 00004ED0 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7232 00004ED9 0000002E002C00      <2>
  7233 00004EE0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7234 00004EE9 00000000000000      <2>
  7235 00004EF0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7236 00004EF9 00000000000000      <2>
  7237 00004F00 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7238 00004F09 00000000000000      <2>
  7239 00004F10 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7240 00004F19 00000000000000      <2>
  7241                              <2> noscan:
  7242                              <2> 
  7243                              <1> %endif
  7244                              <1> ;drivers will soon be handled intelligently
  7245                              <1> ;every driver's source will be scanned for a .init function
  7246                              <1> ;that will be called and if it returns 0
  7247                              <1> ;the hardware was found and the driver initialized properly
  7248                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7249                              <1> 	%ifdef sound.included
  7250                              <1> 		call sblaster.init
  7251                              <1> 	%endif
  7252                              <1> 	%ifdef network.included
  7253                              <1> 		call network.init
  7254                              <1> 	%endif
  7255 00004F20 C3                  <1> 	ret
  7256                              <1> initialize:
  7257                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7258 00004F21 E814000000          <1> 	call .pic
  7259                              <1> %ifdef terminal.vsync
  7260                              <1> 	call .rtc
  7261                              <1> %endif
  7262 00004F26 E871000000          <1> 	call .pit
  7263 00004F2B E893000000          <1> 	call .fpu
  7264 00004F30 E8A4000000          <1> 	call .sse
  7265 00004F35 31C0                <1> 	xor eax, eax
  7266 00004F37 31C9                <1> 	xor ecx, ecx
  7267                              <1> %ifdef io.serial
  7268                              <1> 	call serial.init
  7269                              <1> %endif
  7270 00004F39 C3                  <1> 	ret
  7271                              <1> 	
  7272                              <1> .pic:
  7273 00004F3A B011                <1> 	mov al, 0x11
  7274 00004F3C E620                <1> 	out 0x20, al
  7275 00004F3E E6A0                <1> 	out 0xA0, al
  7276 00004F40 B040                <1> 	mov al, 0x40	;interrupt for master
  7277 00004F42 E621                <1> 	out 0x21, al
  7278 00004F44 B048                <1> 	mov al, 0x48	;interrupt for slave
  7279 00004F46 E6A1                <1> 	out 0xA1, al
  7280 00004F48 B004                <1> 	mov al, 4
  7281 00004F4A E621                <1> 	out 0x21, al
  7282 00004F4C B002                <1> 	mov al, 2
  7283 00004F4E E6A1                <1> 	out 0xA1, al
  7284 00004F50 B001                <1> 	mov al, 0x1
  7285 00004F52 E621                <1> 	out 0x21, al
  7286 00004F54 B001                <1> 	mov al, 0x1
  7287 00004F56 E6A1                <1> 	out 0xA1, al
  7288                              <1> 	;masks are set to zero so as not to mask
  7289 00004F58 30C0                <1> 	xor al, al
  7290 00004F5A E621                <1> 	out 0x21, al
  7291 00004F5C 30C0                <1> 	xor al, al
  7292 00004F5E E6A1                <1> 	out 0xA1, al
  7293 00004F60 B020                <1> 	mov al, 0x20
  7294 00004F62 E6A0                <1> 	out 0xA0, al
  7295 00004F64 E620                <1> 	out 0x20, al
  7296 00004F66 C3                  <1> 	ret
  7297                              <1> .rtc:
  7298 00004F67 B008                <1> 	mov al, 0x8
  7299 00004F69 88C4                <1> 	mov ah, al
  7300 00004F6B 66BA7000            <1> 	mov dx, 0x70
  7301 00004F6F EE                  <1> 	out dx, al
  7302 00004F70 6642                <1> 	inc dx
  7303 00004F72 EC                  <1> 	in al, dx
  7304 00004F73 86C4                <1> 	xchg al, ah
  7305 00004F75 664A                <1> 	dec dx
  7306 00004F77 EE                  <1> 	out dx, al
  7307 00004F78 6642                <1> 	inc dx
  7308 00004F7A 86C4                <1> 	xchg al, ah
  7309 00004F7C 0C40                <1> 	or al, 0x40
  7310 00004F7E EE                  <1> 	out dx, al
  7311                              <1> 	
  7312 00004F7F B00A                <1> 	mov al, 0xA
  7313 00004F81 664A                <1> 	dec dx
  7314 00004F83 EE                  <1> 	out dx, al
  7315 00004F84 86C4                <1> 	xchg al, ah
  7316 00004F86 6642                <1> 	inc dx
  7317 00004F88 EC                  <1> 	in al, dx
  7318 00004F89 24F0                <1> 	and al, 0xF0
  7319 00004F8B 0A05[0E030000]      <1> 	or al, [rtcrate]
  7320 00004F91 86C4                <1> 	xchg al, ah
  7321 00004F93 664A                <1> 	dec dx
  7322 00004F95 EE                  <1> 	out dx, al
  7323 00004F96 6642                <1> 	inc dx
  7324 00004F98 86C4                <1> 	xchg al, ah
  7325 00004F9A EE                  <1> 	out dx, al
  7326 00004F9B C3                  <1> 	ret
  7327                              <1> 	
  7328                              <1> .pit:
  7329                              <1> 	;initialize the PIT
  7330 00004F9C 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7331 00004FA2 E640                <1> 	out 0x40, al
  7332 00004FA4 66C1C008            <1> 	rol ax, 8
  7333 00004FA8 E640                <1> 	out 0x40, al
  7334                              <1> 	;enable rtc interrupt
  7335 00004FAA B00B                <1> 	mov al, 0xB
  7336 00004FAC E670                <1> 	out 0x70, al
  7337 00004FAE 66C1C008            <1> 	rol ax, 8
  7338 00004FB2 E471                <1> 	in al, 0x71
  7339 00004FB4 66C1C008            <1> 	rol ax, 8
  7340 00004FB8 E670                <1> 	out 0x70, al
  7341 00004FBA 66C1C008            <1> 	rol ax, 8
  7342 00004FBE 0C40                <1> 	or al, 0x40
  7343 00004FC0 E671                <1> 	out 0x71, al
  7344 00004FC2 C3                  <1> 	ret
  7345                              <1> .fpu:
  7346                              <1> 	;And now to initialize the fpu
  7347 00004FC3 0F20E0              <1> 	mov eax, cr4
  7348 00004FC6 0D00020000          <1> 	or eax, 0x200
  7349 00004FCB 0F22E0              <1> 	mov cr4, eax
  7350 00004FCE B87F0B0000          <1> 	mov eax, 0xB7F
  7351 00004FD3 50                  <1> 	push eax
  7352 00004FD4 D92C24              <1> 	fldcw [esp]
  7353 00004FD7 58                  <1> 	pop eax
  7354 00004FD8 C3                  <1> 	ret
  7355                              <1> 	
  7356                              <1> .sse:
  7357 00004FD9 0F20C0              <1> 	mov eax, cr0
  7358 00004FDC 24FB                <1> 	and al, 11111011b
  7359 00004FDE 0C02                <1> 	or al, 00000010b
  7360 00004FE0 0F22C0              <1> 	mov cr0, eax
  7361 00004FE3 0F20E0              <1> 	mov eax, cr4
  7362 00004FE6 660D0006            <1> 	or ax, 0000011000000000b
  7363 00004FEA 0F22E0              <1> 	mov cr4, eax
  7364 00004FED C3                  <1> 	ret
  7365                                      %include "source/pci.asm"
  7366 00004FEE 00                  <1> pcibus		db 0
  7367 00004FEF 00                  <1> pcidevice	db 0
  7368 00004FF0 00                  <1> pcifunction	db 0
  7369 00004FF1 00                  <1> pciregister	db 0
  7370 00004FF2 00                  <1> pcireqtype	db 0
  7371 00004FF3 00000000            <1> pcidevid	dd 0
  7372 00004FF7 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7373                              <1> getpcimem:
  7374 00004FFB B002                <1> 	mov al, 2
  7375 00004FFD A2[F24F0000]        <1> 	mov [pcireqtype], al
  7376 00005002 E922000000          <1> 	jmp searchpci
  7377                              <1> getpciport:
  7378 00005007 B001                <1> 	mov al, 1
  7379 00005009 A2[F24F0000]        <1> 	mov [pcireqtype], al
  7380 0000500E E916000000          <1> 	jmp searchpci
  7381                              <1> pcidump:
  7382 00005013 31C0                <1> 	xor eax, eax
  7383 00005015 A2[F04F0000]        <1> 	mov [pcifunction], al
  7384 0000501A A2[EE4F0000]        <1> 	mov [pcibus], al
  7385 0000501F A2[EF4F0000]        <1> 	mov [pcidevice], al
  7386 00005024 A2[F24F0000]        <1> 	mov [pcireqtype], al
  7387                              <1> searchpci:		;;return in ebx, start X in pciX
  7388 00005029 30C0                <1> 	xor al, al
  7389 0000502B A2[F14F0000]        <1> 	mov [pciregister], al
  7390 00005030 E81D020000          <1> 	call getpciaddr
  7391 00005035 BAF80C0000          <1> 	mov edx, 0xCF8
  7392 0000503A EF                  <1> 	out dx, eax	;;request pci config
  7393 0000503B BAFC0C0000          <1> 	mov edx, 0xCFC
  7394 00005040 ED                  <1> 	in eax, dx 	;;read in pci config
  7395 00005041 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7396 00005046 0F8237000000        <1> 	jb near checkpcidevice
  7397                              <1> searchpciret:
  7398                              <1> nextpcidevice:
  7399 0000504C 30C0                <1> 	xor al, al
  7400 0000504E A2[F04F0000]        <1> 	mov [pcifunction], al
  7401 00005053 A0[EF4F0000]        <1> 	mov al, [pcidevice]
  7402 00005058 3C1F                <1> 	cmp al, 11111b
  7403 0000505A 0F8300010000        <1> 	jae near nextpcibus
  7404 00005060 FEC0                <1> 	inc al
  7405 00005062 A2[EF4F0000]        <1> 	mov [pcidevice], al
  7406 00005067 EBC0                <1> 	jmp searchpci
  7407 00005069 A0[F04F0000]        <1> 	mov al, [pcifunction]
  7408 0000506E 3C07                <1> 	cmp al, 111b
  7409 00005070 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7410 00005076 FEC0                <1> 	inc al
  7411 00005078 A2[F04F0000]        <1> 	mov [pcifunction], al
  7412 0000507D EBAA                <1> 	jmp searchpci
  7413 0000507F 00000000            <1> pcitype: db 0,0,0,0
  7414                              <1> checkpcidevice:
  7415 00005083 31C0                <1> 	xor eax, eax
  7416 00005085 3905[F34F0000]      <1> 	cmp [pcidevid], eax
  7417 0000508B 0F8430000000        <1> 	je near .good
  7418 00005091 A2[F14F0000]        <1> 	mov [pciregister], al	;device id, vendor id
  7419 00005096 E8B7010000          <1> 	call getpciaddr
  7420 0000509B BAF80C0000          <1> 	mov edx, 0xCF8
  7421 000050A0 EF                  <1> 	out dx, eax
  7422 000050A1 BAFC0C0000          <1> 	mov edx, 0xCFC
  7423 000050A6 ED                  <1> 	in eax, dx
  7424 000050A7 2305[F74F0000]      <1> 	and eax, [pcidevidmask]
  7425 000050AD 8B1D[F34F0000]      <1> 	mov ebx, [pcidevid]
  7426 000050B3 231D[F74F0000]      <1> 	and ebx, [pcidevidmask]
  7427 000050B9 39D8                <1> 	cmp eax, ebx
  7428 000050BB 0F858BFFFFFF        <1> 	jne near searchpciret
  7429                              <1> .good:
  7430 000050C1 30C0                <1> 	xor al, al
  7431 000050C3 3805[F24F0000]      <1> 	cmp [pcireqtype], al
  7432 000050C9 0F842C000000        <1> 	je near dumppcidevice
  7433 000050CF B008                <1> 	mov al, 0x08
  7434 000050D1 A2[F14F0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7435 000050D6 E877010000          <1> 	call getpciaddr
  7436 000050DB BAF80C0000          <1> 	mov edx, 0xCF8
  7437 000050E0 EF                  <1> 	out dx, eax
  7438 000050E1 BAFC0C0000          <1> 	mov edx, 0xCFC
  7439 000050E6 ED                  <1> 	in eax, dx
  7440 000050E7 C1C008              <1> 	rol eax, 8
  7441 000050EA 3A05[7F500000]      <1> 	cmp al, [pcitype]
  7442 000050F0 0F84A0000000        <1> 	je near foundpciaddr
  7443 000050F6 E951FFFFFF          <1> 	jmp searchpciret
  7444                              <1> dumppcidevice:
  7445 000050FB 30C0                <1> 	xor al, al
  7446 000050FD A2[F14F0000]        <1> 	mov [pciregister], al
  7447 00005102 E84B010000          <1> 	call getpciaddr
  7448 00005107 89C1                <1> 	mov ecx, eax
  7449 00005109 C605[2E230000]05    <1> 	mov byte [firsthexshown], 5
  7450 00005110 E82ED2FFFF          <1> 	call showhex
  7451                              <1> dumppcidevicelp:
  7452 00005115 A2[F14F0000]        <1> 	mov [pciregister], al
  7453 0000511A E833010000          <1> 	call getpciaddr
  7454 0000511F BAF80C0000          <1> 	mov edx, 0xCF8
  7455 00005124 EF                  <1> 	out dx, eax
  7456 00005125 BAFC0C0000          <1> 	mov edx, 0xCFC
  7457 0000512A ED                  <1> 	in eax, dx
  7458 0000512B 89C1                <1> 	mov ecx, eax
  7459 0000512D A0[F14F0000]        <1> 	mov al, [pciregister]
  7460 00005132 0404                <1> 	add al, 4
  7461 00005134 C605[2E230000]05    <1> 	mov byte [firsthexshown], 5
  7462 0000513B E803D2FFFF          <1> 	call showhex
  7463 00005140 3C3C                <1> 	cmp al, 0x3C
  7464 00005142 72D1                <1> 	jb dumppcidevicelp
  7465                              <1> dumppcidn:
  7466                              <1> %ifdef io.serial
  7467                              <1> 	mov esi, line
  7468                              <1> 	call print
  7469                              <1> %else
  7470 00005144 803D[31180000]00    <1> 	cmp byte [charpos], 0
  7471 0000514B 0F84FBFEFFFF        <1> 	je near searchpciret
  7472 00005151 BE[CB710000]        <1> 	mov esi, line
  7473 00005156 E857BEFFFF          <1> 	call print
  7474                              <1> %endif
  7475 0000515B E9ECFEFFFF          <1> 	jmp searchpciret
  7476                              <1> nextpcibus:
  7477 00005160 30C0                <1> 	xor al, al
  7478 00005162 A2[EF4F0000]        <1> 	mov [pcidevice], al
  7479 00005167 A0[EE4F0000]        <1> 	mov al, [pcibus]
  7480 0000516C 3C7F                <1> 	cmp al, 1111111b
  7481 0000516E 730C                <1> 	jae donesearchpci
  7482 00005170 FEC0                <1> 	inc al
  7483 00005172 A2[EE4F0000]        <1> 	mov [pcibus], al
  7484 00005177 E9ADFEFFFF          <1> 	jmp searchpci
  7485                              <1> donesearchpci:
  7486 0000517C BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7487 00005181 31D2                <1> 	xor edx, edx
  7488 00005183 8815[7F500000]      <1> 	mov [pcitype], dl
  7489 00005189 8915[F34F0000]      <1> 	mov [pcidevid], edx
  7490 0000518F 891D[F74F0000]      <1> 	mov [pcidevidmask], ebx
  7491 00005195 C3                  <1> 	ret
  7492                              <1> foundpciaddr:
  7493 00005196 B010                <1> 	mov al, 0x10
  7494 00005198 A2[F14F0000]        <1> 	mov [pciregister], al
  7495 0000519D 803D[F24F0000]02    <1> 	cmp byte [pcireqtype], 2
  7496 000051A4 7443                <1> 	je findpcimemaddr
  7497                              <1> findpciioaddr:
  7498 000051A6 E8A7000000          <1> 	call getpciaddr
  7499 000051AB BAF80C0000          <1> 	mov edx, 0xCF8
  7500 000051B0 EF                  <1> 	out dx, eax
  7501 000051B1 BAFC0C0000          <1> 	mov edx, 0xCFC
  7502 000051B6 ED                  <1> 	in eax, dx
  7503 000051B7 89C3                <1> 	mov ebx, eax
  7504 000051B9 81E301000000        <1> 	and ebx, 1
  7505 000051BF 81FB00000000        <1> 	cmp ebx, 0
  7506 000051C5 0F846E000000        <1> 	je near notpciioaddr
  7507 000051CB 2D01000000          <1> 	sub eax, 1
  7508 000051D0 89C2                <1> 	mov edx, eax
  7509 000051D2 31DB                <1> 	xor ebx, ebx
  7510 000051D4 4B                  <1> 	dec ebx
  7511 000051D5 891D[F74F0000]      <1> 	mov [pcidevidmask], ebx
  7512 000051DB 43                  <1> 	inc ebx
  7513 000051DC 881D[7F500000]      <1> 	mov [pcitype], bl
  7514 000051E2 891D[F34F0000]      <1> 	mov [pcidevid], ebx
  7515 000051E8 C3                  <1> 	ret
  7516                              <1> findpcimemaddr:
  7517 000051E9 E864000000          <1> 	call getpciaddr
  7518 000051EE BAF80C0000          <1> 	mov edx, 0xCF8
  7519 000051F3 EF                  <1> 	out dx, eax
  7520 000051F4 BAFC0C0000          <1> 	mov edx, 0xCFC
  7521 000051F9 ED                  <1> 	in eax, dx
  7522 000051FA 89C3                <1> 	mov ebx, eax
  7523 000051FC 81E301000000        <1> 	and ebx, 1
  7524 00005202 81FB01000000        <1> 	cmp ebx, 1
  7525 00005208 0F842B000000        <1> 	je near notpciioaddr
  7526 0000520E C1E804              <1> 	shr eax, 4
  7527 00005211 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7528 00005214 89C2                <1> 	mov edx, eax
  7529 00005216 50                  <1> 	push eax
  7530 00005217 A1[41020000]        <1> 	mov eax, [basecache]
  7531 0000521C C1E004              <1> 	shl eax, 4
  7532 0000521F 29C2                <1> 	sub edx, eax
  7533 00005221 58                  <1> 	pop eax
  7534 00005222 31DB                <1> 	xor ebx, ebx
  7535 00005224 4B                  <1> 	dec ebx
  7536 00005225 891D[F74F0000]      <1> 	mov [pcidevidmask], ebx
  7537 0000522B 43                  <1> 	inc ebx
  7538 0000522C 881D[7F500000]      <1> 	mov [pcitype], bl
  7539 00005232 891D[F34F0000]      <1> 	mov [pcidevid], ebx
  7540 00005238 C3                  <1> 	ret
  7541                              <1> notpciioaddr:
  7542 00005239 A0[F14F0000]        <1> 	mov al, [pciregister]
  7543 0000523E 0404                <1> 	add al, 4
  7544 00005240 3C28                <1> 	cmp al, 0x28
  7545 00005242 0F8704FEFFFF        <1> 	ja near searchpciret
  7546 00005248 A2[F14F0000]        <1> 	mov [pciregister], al
  7547 0000524D E954FFFFFF          <1> 	jmp findpciioaddr
  7548                              <1> getpciaddr:		;;puts it in eax and ebx
  7549 00005252 31C0                <1> 			xor eax, eax
  7550 00005254 BB00000080          <1> 			mov ebx, 0x80000000
  7551 00005259 A0[EE4F0000]        <1> 			mov al, [pcibus]
  7552 0000525E C1E010              <1> 			shl eax, 16
  7553 00005261 01C3                <1> 			add ebx, eax
  7554 00005263 31C0                <1> 			xor eax, eax
  7555 00005265 A0[EF4F0000]        <1> 			mov al, [pcidevice]
  7556 0000526A C1E00B              <1> 			shl eax, 11
  7557 0000526D 01C3                <1> 			add ebx, eax
  7558 0000526F 31C0                <1> 			xor eax, eax
  7559 00005271 A0[F04F0000]        <1> 			mov al, [pcifunction]
  7560 00005276 C1E008              <1> 			shl eax, 8
  7561 00005279 01C3                <1> 			add ebx, eax
  7562 0000527B 31C0                <1> 			xor eax, eax
  7563 0000527D A0[F14F0000]        <1> 			mov al, [pciregister]
  7564 00005282 01C3                <1> 			add ebx, eax
  7565 00005284 89D8                <1> 			mov eax, ebx
  7566 00005286 C3                  <1> 			ret
  7567                                      %include "source/disk.asm"
  7568                              <1> %ifdef disk.real
  7569                              <1> 	%include "source/drivers/disk/realmode.asm"
  7570                              <2> diskr:
  7571                              <2> 			;sector count in cl
  7572                              <2> 			;disk number in ch
  7573                              <2> 			;48 bit address with last 32 bits in ebx
  7574                              <2> 			;buffer in esi
  7575                              <2> 			;puts end of buffer in edi and end lba address in edx
  7576 00005287 880D[B4520000]      <2> 	mov [sdlength], cl
  7577 0000528D 891D[B5520000]      <2> 	mov [sdaddress], ebx
  7578 00005293 8935[13540000]      <2> 	mov [oldesireal], esi
  7579 00005299 66BE[B952]          <2> 	mov si, readdiskreal
  7580 0000529D 668935[CA0C0000]    <2> 	mov [realmodeptr], si
  7581 000052A4 BE[F5520000]        <2> 	mov esi, backfromrealread
  7582 000052A9 8935[C60C0000]      <2> 	mov [realmodereturn], esi
  7583 000052AF E9FBB8FFFF          <2> 	jmp realmode
  7584 000052B4 00                  <2> sdlength db 0
  7585 000052B5 00000000            <2> sdaddress dd 0
  7586                              <2> 
  7587                              <2> [BITS 16]
  7588                              <2> readdiskreal:
  7589 000052B9 C706[E552]1000      <2> 	mov word [dlen], 0x10
  7590 000052BF C706[E952]0000      <2> 	mov word [daddress], 0
  7591 000052C5 C706[EB52]0001      <2> 	mov word [dsegm], 0x100
  7592 000052CB 66891E[ED52]        <2> 	mov [dlbaad], ebx
  7593 000052D0 880E[E752]          <2> 	mov [dreadlen], cl
  7594                              <2> ReadHardDisk:
  7595 000052D4 BE[E552]            <2> 	mov si, diskaddresspacket
  7596 000052D7 31C0                <2> 	xor ax, ax
  7597 000052D9 B442                <2> 	mov ah, 0x42
  7598 000052DB 8A16[E452]          <2> 	mov dl, [dnumber]
  7599 000052DF CD13                <2> 	int 0x13
  7600 000052E1 72F1                <2> 	jc ReadHardDisk
  7601 000052E3 C3                  <2> 	ret
  7602                              <2> 
  7603 000052E4 80                  <2> dnumber db 0x80
  7604                              <2> diskaddresspacket:
  7605 000052E5 10                  <2> dlen:	db 0x10 ;size of packet
  7606 000052E6 00                  <2> 		db 0
  7607 000052E7 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7608 000052E9 0000                <2> daddress:	dw 0	;address 0
  7609 000052EB 0001                <2> dsegm:		dw 0x100	;segment
  7610                              <2> 		;start with known value for hd
  7611                              <2> dlbaad:
  7612 000052ED 00000000            <2> 	dd 0	;lba address
  7613 000052F1 00000000            <2> 	dd 0
  7614                              <2> [BITS 32]
  7615                              <2> backfromrealread:
  7616 000052F5 8B35[13540000]      <2> 	mov esi, [oldesireal]
  7617 000052FB 8B1D[B5520000]      <2> 	mov ebx, [sdaddress]
  7618 00005301 31C9                <2> 	xor ecx, ecx
  7619 00005303 8A0D[B4520000]      <2> 	mov cl, [sdlength]
  7620 00005309 01CB                <2> 	add ebx, ecx
  7621 0000530B 66B80800            <2> 	mov ax, LINEAR_SEL
  7622 0000530F 8EE0                <2> 	mov fs, ax
  7623 00005311 BF00100000          <2> 	mov edi, 0x1000
  7624 00005316 B200                <2> 	mov dl, 0
  7625 00005318 D0E1                <2> 	shl cl, 1
  7626                              <2> copyfromrmodedisk:
  7627 0000531A 648A07              <2> 	mov al, [fs:edi]
  7628 0000531D 8806                <2> 	mov [esi], al
  7629 0000531F 47                  <2> 	inc edi
  7630 00005320 46                  <2> 	inc esi
  7631 00005321 FECA                <2> 	dec dl
  7632 00005323 80FA00              <2> 	cmp dl, 0
  7633 00005326 75F2                <2> 	jne copyfromrmodedisk
  7634 00005328 FEC9                <2> 	dec cl
  7635 0000532A B200                <2> 	mov dl, 0
  7636 0000532C 80F900              <2> 	cmp cl, 0
  7637 0000532F 75E9                <2> 	jne copyfromrmodedisk
  7638 00005331 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7639 00005335 8EE0                <2> 	mov fs, ax
  7640 00005337 89F7                <2> 	mov edi, esi
  7641 00005339 8B35[13540000]      <2> 	mov esi, [oldesireal]
  7642 0000533F 89DA                <2> 	mov edx, ebx
  7643 00005341 8B1D[B5520000]      <2> 	mov ebx, [sdaddress]
  7644 00005347 C3                  <2> 	ret
  7645                              <2> 	
  7646                              <1> %else
  7647                              <1> 	%ifdef disk.protected
  7648                              <1> 		%include "source/drivers/disk/pata.asm"
  7649                              <1> 	%endif
  7650                              <1> %endif
  7651                              <1> %ifdef disk.none
  7652                              <1> loadfile:	xor edx, edx
  7653                              <1> 			cmp byte [edi], '&'
  7654                              <1> 			je .ret
  7655                              <1> 			mov edx, 404	;no files are found except &
  7656                              <1> 		.ret:
  7657                              <1> 			ret
  7658                              <1> %else
  7659                              <1> ;This loads files using the methods in the loaded driver
  7660                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7661                              <1> 			;returns with err code in edx and file end in edi
  7662 00005348 803F00              <1> 	cmp byte [edi], 0
  7663 0000534B 0F8448000000        <1> 	je near nofileload
  7664 00005351 89FA                <1> 	mov edx, edi
  7665 00005353 BB[3A740300]        <1> 	mov ebx, diskfileindex
  7666                              <1> nextnamechar:
  7667 00005358 8A07                <1> 	mov al, [edi]
  7668 0000535A 3C26                <1> 	cmp al, '&'
  7669 0000535C 7440                <1> 	je nullfile
  7670 0000535E 8A23                <1> 	mov ah, [ebx]
  7671 00005360 47                  <1> 	inc edi
  7672 00005361 43                  <1> 	inc ebx
  7673 00005362 88C1                <1> 	mov cl, al
  7674 00005364 08E1                <1> 	or cl, ah
  7675 00005366 80F900              <1> 	cmp cl, 0
  7676 00005369 744E                <1> 	je equalfilenames
  7677 0000536B 80F920              <1> 	cmp cl, ' '
  7678 0000536E 7449                <1> 	je equalfilenames
  7679 00005370 3C2A                <1> 	cmp al, '*'
  7680 00005372 742B                <1> 	je equalfilenames2
  7681 00005374 80FC00              <1> 	cmp ah, 0
  7682 00005377 7410                <1> 	je nextfilename
  7683 00005379 3C00                <1> 	cmp al, 0
  7684 0000537B 7404                <1> 	je getebxzero
  7685 0000537D 38E0                <1> 	cmp al, ah
  7686 0000537F 74D7                <1> 	je nextnamechar
  7687                              <1> getebxzero:
  7688 00005381 8A23                <1> 	mov ah, [ebx]
  7689 00005383 43                  <1> 	inc ebx
  7690 00005384 80FC00              <1> 	cmp ah, 0
  7691 00005387 75F8                <1> 	jne getebxzero
  7692                              <1> nextfilename:
  7693 00005389 81C308000000        <1> 	add ebx, 8		;next descriptor
  7694 0000538F 89D7                <1> 	mov edi, edx
  7695 00005391 81FB[4B760300]      <1> 	cmp ebx, enddiskfileindex
  7696 00005397 72BF                <1> 	jb nextnamechar
  7697                              <1> nofileload:
  7698 00005399 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7699                              <1> nullfile:
  7700 0000539E C3                  <1> 	ret
  7701                              <1> equalfilenames2:
  7702 0000539F 81EB02000000        <1> 	sub ebx, 2
  7703                              <1> eqfilefind:
  7704 000053A5 43                  <1> 	inc ebx
  7705 000053A6 81FB[4B760300]      <1> 	cmp ebx, enddiskfileindex
  7706 000053AC 0F83E7FFFFFF        <1> 	jae near nofileload
  7707 000053B2 8A03                <1> 	mov al, [ebx]
  7708 000053B4 3C00                <1> 	cmp al, 0
  7709 000053B6 75ED                <1> 	jne eqfilefind
  7710 000053B8 43                  <1> 	inc ebx
  7711                              <1> equalfilenames:
  7712 000053B9 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7713 000053BC 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7714 000053BE 031D[F2710000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  7715 000053C4 31C9                <1> 	xor ecx, ecx
  7716 000053C6 88C1                <1> 	mov cl, al			;get excess number of sectors
  7717 000053C8 C0E102              <1> 	shl cl, 2
  7718 000053CB C0E902              <1> 	shr cl, 2			;cut off at 64
  7719 000053CE 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7720 000053D0 B500                <1> 	mov ch, 0			;drive 0
  7721 000053D2 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7722                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7723 000053D5 A3[17540000]        <1> 	mov [filetracks], eax
  7724 000053DA 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7725 000053DC 89DA                <1> 	mov edx, ebx
  7726 000053DE 80F900              <1> 	cmp cl, 0
  7727 000053E1 7405                <1> 	je copytracksforfile
  7728 000053E3 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7729                              <1> copytracksforfile:
  7730 000053E8 A1[17540000]        <1> 	mov eax, [filetracks]
  7731 000053ED 3D00000000          <1> 	cmp eax, 0
  7732 000053F2 7419                <1> 	je donecopyfile
  7733 000053F4 48                  <1> 	dec eax
  7734 000053F5 A3[17540000]        <1> 	mov [filetracks], eax
  7735 000053FA 89D3                <1> 	mov ebx, edx	;get end lba
  7736 000053FC B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7737 000053FE 8A2D[F1710000]      <1> 	mov ch, [DriveNumber]
  7738 00005404 89FE                <1> 	mov esi, edi	;reset buffer
  7739 00005406 E87CFEFFFF          <1> 	call diskr
  7740 0000540B EBDB                <1> 	jmp copytracksforfile
  7741                              <1> donecopyfile:
  7742 0000540D BA00000000          <1> 	mov edx, 0	;no error
  7743 00005412 C3                  <1> 	ret
  7744                              <1> 
  7745 00005413 00000000            <1> oldesireal dd 0
  7746 00005417 00000000            <1> filetracks dd 0
  7747 0000541B 00                  <1> lbad1 db 0
  7748 0000541C 00                  <1> lbad2 db 0
  7749 0000541D 00                  <1> lbad3 db 0
  7750 0000541E 00                  <1> lbad4 db 0
  7751 0000541F 00                  <1> lbad5 db 0
  7752 00005420 00                  <1> lbad6 db 0
  7753 00005421 6400                <1> segments dw 100
  7754                              <1> %endif
  7755                                      %include "source/threads.asm"
  7756                              <1> %ifdef threads.included	
  7757                              <1> nwcmdst:
  7758                              <1> 	xor eax, eax
  7759                              <1> 	mov esp, stackend
  7760                              <1> 	mov [threadson], al
  7761                              <1> 	mov [currentthread], eax
  7762                              <1> 	add eax, 4
  7763                              <1> 	mov [lastthread], eax
  7764                              <1> 	sti
  7765                              <1> 	jmp nwcmd
  7766                              <1> 
  7767                              <1> nomorethreadspace:
  7768                              <1> 	mov esi, nmts
  7769                              <1> 	call print
  7770                              <1> 	mov byte [threadson], 0
  7771                              <1> 	jmp nwcmd
  7772                              <1> nmts	db "Thread Overflow",10,0
  7773                              <1> 
  7774                              <1> nomorestackspace:
  7775                              <1> 	mov esi, nmss
  7776                              <1> 	call print
  7777                              <1> 	jmp nwcmdst
  7778                              <1> nmss	db "Stack Overflow",10,0
  7779                              <1> 	
  7780                              <1> threadswitch:
  7781                              <1> 	cli
  7782                              <1> 	pushad
  7783                              <1> 	mov edi, threadlist
  7784                              <1> 	mov eax, [currentthread]
  7785                              <1> 	inc eax
  7786                              <1> 	mov [currentthread], eax
  7787                              <1> 	dec ax
  7788                              <1> 	shl eax, 2
  7789                              <1> 	add edi, eax
  7790                              <1> 	mov [edi], esp
  7791                              <1> 	add edi, 4
  7792                              <1> 	cmp edi, threadlistend
  7793                              <1> 	jae near nookespthread
  7794                              <1> 	mov eax, [edi]
  7795                              <1> 	cmp eax, 0
  7796                              <1> 	jne near okespthread
  7797                              <1> nookespthread:
  7798                              <1> 	mov edi, threadlist
  7799                              <1> 	xor eax, eax
  7800                              <1> 	mov [currentthread], eax
  7801                              <1> 	mov eax, [edi]
  7802                              <1> 	cmp eax, 0
  7803                              <1> 	je near nwcmdst
  7804                              <1> okespthread:
  7805                              <1> 	mov esp, eax
  7806                              <1> 	mov al, 0x20
  7807                              <1> 	out 0x20, al
  7808                              <1> 	popad
  7809                              <1> 	sti
  7810                              <1> 	iret
  7811                              <1> 
  7812                              <1> %endif
  7813 00005423 04000000            <1> 	lastthread dd 4
  7814 00005427 00                  <1> 	threadson db 0
  7815 00005428 00000000            <1> 	currentthread dd 0
  7816                                  %ifdef gui.included
  7817                                      %include "source/gui/gui.asm"
  7818                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7819 0000542C 31C0                <1> 	xor eax, eax
  7820 0000542E 31DB                <1> 	xor ebx, ebx
  7821 00005430 31C9                <1> 	xor ecx, ecx
  7822 00005432 31D2                <1> 	xor edx, edx
  7823 00005434 E871080000          <1> 	call guisetup
  7824                              <1> guiloop:
  7825 00005439 E8B3F1FFFF          <1> 	call cursorgui
  7826                              <1> guistart:
  7827 0000543E E887F5FFFF          <1> 	call getkey
  7828 00005443 C605[2B690000]00    <1> 	mov byte [copygui], 0
  7829 0000544A EBF2                <1> 	jmp guistart
  7830                              <1> 
  7831                              <1> %include "source/gui/bmp.asm"
  7832                              <2> showbmp:
  7833 0000544C 668B06              <2> 	mov ax, [esi]
  7834 0000544F 663D424D            <2> 	cmp ax, "BM"
  7835 00005453 0F85BB000000        <2> 	jne near endedbmp
  7836 00005459 8B3D[14450000]      <2> 	mov edi, [physbaseptr]
  7837 0000545F 6689D0              <2> 	mov ax, dx
  7838 00005462 6689CB              <2> 	mov bx, cx
  7839 00005465 31C9                <2> 	xor ecx, ecx
  7840 00005467 31D2                <2> 	xor edx, edx
  7841 00005469 6689D9              <2> 	mov cx, bx
  7842 0000546C 6689C2              <2> 	mov dx, ax
  7843 0000546F 01D7                <2> 	add edi, edx
  7844 00005471 01D7                <2> 	add edi, edx
  7845 00005473 31D2                <2> 	xor edx, edx
  7846 00005475 668B15[EC450000]    <2> 	mov dx, [resolutionx2]
  7847 0000547C 034E16              <2> 	add ecx, [esi + 22]
  7848                              <2> bmplocloop:
  7849 0000547F 52                  <2> 	push edx
  7850 00005480 31C0                <2> 	xor eax, eax
  7851 00005482 6689D0              <2> 	mov ax, dx
  7852 00005485 F7E1                <2> 	mul ecx
  7853 00005487 5A                  <2> 	pop edx
  7854 00005488 663B0D[00450000]    <2> 	cmp cx, [resolutiony]
  7855 0000548F 7609                <2> 	jbe .nofixy
  7856 00005491 31C9                <2> 	xor ecx, ecx
  7857 00005493 668B0D[00450000]    <2> 	mov cx, [resolutiony]
  7858                              <2> .nofixy:
  7859 0000549A 01C7                <2> 	add edi, eax
  7860 0000549C 8B5612              <2> 	mov edx, [esi + 18]
  7861 0000549F 8B4E16              <2> 	mov ecx, [esi + 22]
  7862 000054A2 8B460A              <2> 	mov eax, [esi + 10]
  7863 000054A5 8B5E02              <2> 	mov ebx, [esi + 2]
  7864 000054A8 01F3                <2> 	add ebx, esi
  7865 000054AA 891D[1A550000]      <2> 	mov [bmpend], ebx
  7866 000054B0 89D3                <2> 	mov ebx, edx
  7867 000054B2 01C6                <2> 	add esi, eax
  7868                              <2> ldxbmp2:
  7869 000054B4 31D2                <2> 	xor edx, edx
  7870 000054B6 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  7871 000054BD 39D3                <2> 	cmp ebx, edx
  7872 000054BF 7702                <2> 	ja ldxbmp
  7873 000054C1 89DA                <2> 	mov edx, ebx
  7874                              <2> ldxbmp:
  7875 000054C3 668B06              <2> 	mov ax, [esi]
  7876 000054C6 668907              <2> 	mov [edi], ax
  7877 000054C9 81C702000000        <2> 	add edi, 2
  7878 000054CF 81C602000000        <2> 	add esi, 2
  7879 000054D5 3B35[1A550000]      <2> 	cmp esi, [bmpend]
  7880 000054DB 7737                <2> 	ja endedbmp
  7881 000054DD 4A                  <2> 	dec edx
  7882 000054DE 81FA00000000        <2> 	cmp edx, 0
  7883 000054E4 77DD                <2> 	ja ldxbmp
  7884 000054E6 31D2                <2> 	xor edx, edx
  7885 000054E8 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  7886 000054EF 39D3                <2> 	cmp ebx, edx
  7887 000054F1 7610                <2> 	jbe .notover
  7888                              <2> .over:
  7889 000054F3 01DE                <2> 	add esi, ebx
  7890 000054F5 01DE                <2> 	add esi, ebx
  7891 000054F7 29D6                <2> 	sub esi, edx
  7892 000054F9 29D6                <2> 	sub esi, edx
  7893 000054FB 01DF                <2> 	add edi, ebx
  7894 000054FD 01DF                <2> 	add edi, ebx
  7895 000054FF 29D7                <2> 	sub edi, edx
  7896 00005501 29D7                <2> 	sub edi, edx
  7897                              <2> .notover:
  7898 00005503 29DF                <2> 	sub edi, ebx
  7899 00005505 29DF                <2> 	sub edi, ebx
  7900 00005507 29D7                <2> 	sub edi, edx
  7901 00005509 29D7                <2> 	sub edi, edx
  7902 0000550B 49                  <2> 	dec ecx
  7903 0000550C 81F900000000        <2> 	cmp ecx, 0
  7904 00005512 77A0                <2> 	ja ldxbmp2
  7905                              <2> endedbmp:
  7906 00005514 E844030000          <2> 	call switchmousepos2
  7907 00005519 C3                  <2> 	ret
  7908                              <2> 	
  7909 0000551A 00000000            <2> 	bmpend dd 0
  7910                              <1> %include "source/gui/circle.asm"
  7911                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  7912 0000551E 55                  <2> 	push ebp
  7913 0000551F 663D0000            <2> 	cmp ax, 0
  7914 00005523 770A                <2> 	ja .nozerocircle
  7915 00005525 E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  7916 0000552A E9F7000000          <2> 	jmp .done
  7917                              <2> .nozerocircle:
  7918 0000552F 6689F5              <2> 	mov bp, si
  7919 00005532 6650                <2> 	push ax
  7920 00005534 E8281C0000          <2> 	call getpixelmem
  7921 00005539 31C0                <2> 	xor eax, eax
  7922 0000553B 6658                <2> 	pop ax
  7923 0000553D BE01000000          <2> 	mov esi, 1
  7924 00005542 29C6                <2> 	sub esi, eax
  7925 00005544 89C1                <2> 	mov ecx, eax
  7926 00005546 31C0                <2> 	xor eax, eax
  7927 00005548 66A1[EC450000]      <2> 	mov ax, [resolutionx2]
  7928 0000554E F7E1                <2> 	mul ecx
  7929 00005550 50                  <2> 	push eax
  7930 00005551 31D2                <2> 	xor edx, edx
  7931 00005553 01C7                <2> 	add edi, eax
  7932 00005555 66892F              <2> 	mov [edi], bp
  7933 00005558 29C7                <2> 	sub edi, eax
  7934 0000555A 29C7                <2> 	sub edi, eax
  7935 0000555C 66892F              <2> 	mov [edi], bp
  7936 0000555F 01C7                <2> 	add edi, eax
  7937 00005561 D1E1                <2> 	shl ecx, 1
  7938 00005563 01CF                <2> 	add edi, ecx
  7939 00005565 66892F              <2> 	mov [edi], bp
  7940 00005568 D1E1                <2> 	shl ecx, 1
  7941 0000556A 29CF                <2> 	sub edi, ecx
  7942 0000556C 66892F              <2> 	mov [edi], bp
  7943 0000556F D1E9                <2> 	shr ecx, 1
  7944 00005571 01CF                <2> 	add edi, ecx
  7945 00005573 D1E9                <2> 	shr ecx, 1
  7946 00005575 B802000000          <2> 	mov eax, 2
  7947 0000557A F7E1                <2> 	mul ecx
  7948 0000557C 48                  <2> 	dec eax
  7949 0000557D F7D0                <2> 	not eax ;make it negative
  7950 0000557F A3[2C560000]        <2> 	mov [.ddF_y], eax
  7951 00005584 58                  <2> 	pop eax
  7952 00005585 BB01000000          <2> 	mov ebx, 1
  7953 0000558A 891D[28560000]      <2> 	mov [.ddF_x], ebx
  7954 00005590 4B                  <2> 	dec ebx
  7955 00005591 31D2                <2> 	xor edx, edx
  7956 00005593 E904000000          <2> 	jmp .lp
  7957                              <2> .lpb:
  7958 00005598 D1EA                <2> 	shr edx, 1
  7959 0000559A D1E9                <2> 	shr ecx, 1
  7960                              <2> .lp:	;it starts this with the center in edi
  7961                              <2> 		;color in bp
  7962                              <2> 		;ddF_x in memory
  7963                              <2> 		;x*resolutionx2 in ebx
  7964                              <2> 		;x in edx
  7965                              <2> 		;ddF_y in memory
  7966                              <2> 		;y*resolutionx2 in eax
  7967                              <2> 		;f in esi
  7968                              <2> 		;y in ecx
  7969 0000559C 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  7970 000055A2 7717                <2> 	ja	.noddF_y
  7971 000055A4 49                  <2> 	dec ecx
  7972 000055A5 2B05[EC450000]      <2> 	sub eax, [resolutionx2]
  7973 000055AB 8105[2C560000]0200- <2> 	add dword [.ddF_y], 2
  7974 000055B3 0000                <2>
  7975 000055B5 0335[2C560000]      <2> 	add esi, [.ddF_y]
  7976                              <2> .noddF_y:
  7977 000055BB 42                  <2> 	inc edx
  7978 000055BC 031D[EC450000]      <2> 	add ebx, [resolutionx2]
  7979 000055C2 8105[28560000]0200- <2> 	add dword [.ddF_x], 2
  7980 000055CA 0000                <2>
  7981 000055CC 0335[28560000]      <2> 	add esi, [.ddF_x]
  7982                              <2> 
  7983 000055D2 D1E2                <2> 	shl edx, 1
  7984 000055D4 D1E1                <2> 	shl ecx, 1
  7985 000055D6 01D7                <2> 	add edi, edx
  7986 000055D8 01C7                <2> 	add edi, eax
  7987 000055DA 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  7988 000055DD D1E2                <2> 	shl edx, 1
  7989 000055DF 29D7                <2> 	sub edi, edx
  7990 000055E1 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  7991 000055E4 D1E0                <2> 	shl eax, 1
  7992 000055E6 29C7                <2> 	sub edi, eax
  7993 000055E8 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  7994 000055EB 01D7                <2> 	add edi, edx
  7995 000055ED 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  7996 000055F0 D1E8                <2> 	shr eax, 1
  7997 000055F2 D1EA                <2> 	shr edx, 1
  7998 000055F4 01C7                <2> 	add edi, eax
  7999 000055F6 29D7                <2> 	sub edi, edx
  8000                              <2> 
  8001 000055F8 39D1                <2> 	cmp ecx, edx
  8002 000055FA 749C                <2> 	je .lpb
  8003                              <2> 
  8004 000055FC 01DF                <2> 	add edi, ebx
  8005 000055FE 01CF                <2> 	add edi, ecx
  8006 00005600 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8007 00005603 D1E1                <2> 	shl ecx, 1
  8008 00005605 29CF                <2> 	sub edi, ecx
  8009 00005607 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8010 0000560A D1E3                <2> 	shl ebx, 1
  8011 0000560C 29DF                <2> 	sub edi, ebx
  8012 0000560E 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8013 00005611 01CF                <2> 	add edi, ecx
  8014 00005613 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8015 00005616 D1EB                <2> 	shr ebx, 1
  8016 00005618 D1E9                <2> 	shr ecx, 1
  8017 0000561A 01DF                <2> 	add edi, ebx
  8018 0000561C 29CF                <2> 	sub edi, ecx
  8019 0000561E 39CA                <2> 	cmp edx, ecx
  8020 00005620 0F8272FFFFFF        <2> 	jb .lpb
  8021                              <2> .done:
  8022 00005626 5D                  <2> 	pop ebp
  8023 00005627 C3                  <2> 	ret
  8024                              <2> 	
  8025 00005628 00000000            <2> .ddF_x dd 0
  8026 0000562C 00000000            <2> .ddF_y dd 0
  8027                              <2> 
  8028                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8029 00005630 55                  <2> 	push ebp
  8030 00005631 663D0000            <2> 	cmp ax, 0
  8031 00005635 770A                <2> 	ja .nozerocircle
  8032 00005637 E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  8033 0000563C E95A010000          <2> 	jmp .done
  8034                              <2> .nozerocircle:
  8035 00005641 6689F5              <2> 	mov bp, si
  8036 00005644 6650                <2> 	push ax
  8037 00005646 E8161B0000          <2> 	call getpixelmem
  8038 0000564B 31C0                <2> 	xor eax, eax
  8039 0000564D 6658                <2> 	pop ax
  8040 0000564F BE01000000          <2> 	mov esi, 1
  8041 00005654 29C6                <2> 	sub esi, eax
  8042 00005656 89C1                <2> 	mov ecx, eax
  8043 00005658 31C0                <2> 	xor eax, eax
  8044 0000565A 66A1[EC450000]      <2> 	mov ax, [resolutionx2]
  8045 00005660 F7E1                <2> 	mul ecx
  8046 00005662 50                  <2> 	push eax
  8047 00005663 31D2                <2> 	xor edx, edx
  8048 00005665 01C7                <2> 	add edi, eax
  8049 00005667 66892F              <2> 	mov [edi], bp
  8050 0000566A 29C7                <2> 	sub edi, eax
  8051 0000566C 29C7                <2> 	sub edi, eax
  8052 0000566E 66892F              <2> 	mov [edi], bp
  8053 00005671 01C7                <2> 	add edi, eax
  8054 00005673 D1E1                <2> 	shl ecx, 1
  8055 00005675 01CF                <2> 	add edi, ecx
  8056 00005677 51                  <2> 	push ecx
  8057                              <2> .s0:
  8058 00005678 66892F              <2> 	mov [edi], bp
  8059 0000567B 81EF02000000        <2> 	sub edi, 2
  8060 00005681 49                  <2> 	dec ecx
  8061 00005682 81F900000000        <2> 	cmp ecx, 0
  8062 00005688 75EE                <2> 	jne .s0
  8063 0000568A 66892F              <2> 	mov [edi], bp
  8064 0000568D 59                  <2> 	pop ecx
  8065 0000568E 01CF                <2> 	add edi, ecx
  8066 00005690 D1E9                <2> 	shr ecx, 1
  8067 00005692 B802000000          <2> 	mov eax, 2
  8068 00005697 F7E1                <2> 	mul ecx
  8069 00005699 48                  <2> 	dec eax
  8070 0000569A F7D0                <2> 	not eax ;make it negative
  8071 0000569C A3[A1570000]        <2> 	mov [.ddF_y], eax
  8072 000056A1 58                  <2> 	pop eax
  8073 000056A2 BB01000000          <2> 	mov ebx, 1
  8074 000056A7 891D[9D570000]      <2> 	mov [.ddF_x], ebx
  8075 000056AD 4B                  <2> 	dec ebx
  8076 000056AE 31D2                <2> 	xor edx, edx
  8077 000056B0 E904000000          <2> 	jmp .lp
  8078                              <2> .lpb:
  8079 000056B5 D1EA                <2> 	shr edx, 1
  8080 000056B7 D1E9                <2> 	shr ecx, 1
  8081                              <2> .lp:	;it starts this with the center in edi
  8082                              <2> 		;color in bp
  8083                              <2> 		;ddF_x in memory
  8084                              <2> 		;x*resolutionx2 in ebx
  8085                              <2> 		;x in edx
  8086                              <2> 		;ddF_y in memory
  8087                              <2> 		;y*resolutionx2 in eax
  8088                              <2> 		;f in esi
  8089                              <2> 		;y in ecx
  8090 000056B9 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8091 000056BF 7717                <2> 	ja	.noddF_y
  8092 000056C1 49                  <2> 	dec ecx
  8093 000056C2 2B05[EC450000]      <2> 	sub eax, [resolutionx2]
  8094 000056C8 8105[A1570000]0200- <2> 	add dword [.ddF_y], 2
  8095 000056D0 0000                <2>
  8096 000056D2 0335[A1570000]      <2> 	add esi, [.ddF_y]
  8097                              <2> .noddF_y:
  8098 000056D8 42                  <2> 	inc edx
  8099 000056D9 031D[EC450000]      <2> 	add ebx, [resolutionx2]
  8100 000056DF 8105[9D570000]0200- <2> 	add dword [.ddF_x], 2
  8101 000056E7 0000                <2>
  8102 000056E9 0335[9D570000]      <2> 	add esi, [.ddF_x]
  8103                              <2> 
  8104 000056EF D1E2                <2> 	shl edx, 1
  8105 000056F1 D1E1                <2> 	shl ecx, 1
  8106 000056F3 52                  <2> 	push edx
  8107 000056F4 29D7                <2> 	sub edi, edx
  8108 000056F6 01C7                <2> 	add edi, eax
  8109 000056F8 81FA00000000        <2> 	cmp edx, 0
  8110 000056FE 7412                <2> 	je .nos1
  8111                              <2> .s1:
  8112 00005700 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8113 00005703 81C702000000        <2> 	add edi, 2
  8114 00005709 4A                  <2> 	dec edx
  8115 0000570A 81FA00000000        <2> 	cmp edx, 0
  8116 00005710 75EE                <2> 	jne .s1
  8117                              <2> .nos1:
  8118 00005712 66892F              <2> 	mov [edi], bp
  8119 00005715 5A                  <2> 	pop edx
  8120 00005716 52                  <2> 	push edx
  8121 00005717 29C7                <2> 	sub edi, eax
  8122 00005719 29C7                <2> 	sub edi, eax
  8123 0000571B 81FA00000000        <2> 	cmp edx, 0
  8124 00005721 7412                <2> 	je .nos2
  8125                              <2> .s2:
  8126 00005723 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8127 00005726 81EF02000000        <2> 	sub edi, 2
  8128 0000572C 4A                  <2> 	dec edx
  8129 0000572D 81FA00000000        <2> 	cmp edx, 0
  8130 00005733 75EE                <2> 	jne .s2
  8131                              <2> .nos2:
  8132 00005735 66892F              <2> 	mov [edi], bp
  8133 00005738 5A                  <2> 	pop edx
  8134 00005739 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8135 0000573B 01D7                <2> 	add edi, edx
  8136                              <2> 
  8137 0000573D 39D1                <2> 	cmp ecx, edx
  8138 0000573F 0F8470FFFFFF        <2> 	je .lpb
  8139                              <2> 
  8140 00005745 51                  <2> 	push ecx
  8141 00005746 01DF                <2> 	add edi, ebx
  8142 00005748 29CF                <2> 	sub edi, ecx
  8143 0000574A 81F900000000        <2> 	cmp ecx, 0
  8144 00005750 7412                <2> 	je .nos3
  8145                              <2> .s3:
  8146 00005752 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8147 00005755 81C702000000        <2> 	add edi, 2
  8148 0000575B 49                  <2> 	dec ecx
  8149 0000575C 81F900000000        <2> 	cmp ecx, 0
  8150 00005762 75EE                <2> 	jne .s3
  8151                              <2> .nos3:
  8152 00005764 66892F              <2> 	mov [edi], bp
  8153 00005767 59                  <2> 	pop ecx
  8154 00005768 51                  <2> 	push ecx
  8155 00005769 29DF                <2> 	sub edi, ebx
  8156 0000576B 29DF                <2> 	sub edi, ebx
  8157 0000576D 81F900000000        <2> 	cmp ecx, 0
  8158 00005773 7412                <2> 	je .nos4
  8159                              <2> .s4:
  8160 00005775 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8161 00005778 81EF02000000        <2> 	sub edi, 2
  8162 0000577E 49                  <2> 	dec ecx
  8163 0000577F 81F900000000        <2> 	cmp ecx, 0
  8164 00005785 75EE                <2> 	jne .s4
  8165                              <2> .nos4:
  8166 00005787 66892F              <2> 	mov [edi], bp
  8167 0000578A 59                  <2> 	pop ecx
  8168 0000578B 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8169 0000578D 01CF                <2> 	add edi, ecx
  8170                              <2> 
  8171 0000578F D1EA                <2> 	shr edx, 1
  8172 00005791 D1E9                <2> 	shr ecx, 1
  8173 00005793 39CA                <2> 	cmp edx, ecx
  8174 00005795 0F821EFFFFFF        <2> 	jb .lp
  8175                              <2> .done:
  8176 0000579B 5D                  <2> 	pop ebp
  8177 0000579C C3                  <2> 	ret
  8178                              <2> 	
  8179 0000579D 00000000            <2> .ddF_x dd 0
  8180 000057A1 00000000            <2> .ddF_y dd 0
  8181                              <1> %include "source/gui/cursor.asm"
  8182                              <2> clearmousecursor:
  8183 000057A5 BE[0D5B0000]        <2> 		mov esi, background
  8184 000057AA 8B3D[14450000]      <2> 		mov edi, [physbaseptr]
  8185 000057B0 31D2                <2> 		xor edx, edx
  8186 000057B2 31C9                <2> 		xor ecx, ecx
  8187 000057B4 668B15[DE470000]    <2> 		mov dx, [lastmouseposition]
  8188 000057BB 668B0D[E0470000]    <2> 		mov cx, [lastmouseposition + 2]
  8189 000057C2 01D7                <2> 		add edi, edx
  8190 000057C4 31D2                <2> 		xor edx, edx
  8191 000057C6 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  8192 000057CD 81F900000000        <2> 		cmp ecx, 0
  8193 000057D3 7408                <2> 		je .nomul
  8194 000057D5 52                  <2> 		push edx
  8195 000057D6 89D0                <2> 		mov eax, edx
  8196 000057D8 F7E1                <2> 		mul ecx
  8197 000057DA 01C7                <2> 		add edi, eax
  8198 000057DC 5A                  <2> 		pop edx
  8199                              <2> .nomul:
  8200                              <2> %ifdef 	gui.background
  8201                              <2> 		cmp dword [backgroundimage], 0
  8202                              <2> 		je .noyclr
  8203                              <2> 		mov esi, [backgroundimage]
  8204                              <2> 		sub edi, [physbaseptr]
  8205                              <2> 		add esi, edi
  8206                              <2> 		add edi, [physbaseptr]
  8207                              <2> .backlp:
  8208                              <2> 		xor ebx, ebx
  8209                              <2> .noyback:
  8210                              <2> 		mov eax, [esi + ebx]
  8211                              <2> 		mov [edi + ebx], eax
  8212                              <2> 		add ebx, 4
  8213                              <2> 		cmp ebx, 16
  8214                              <2> 		jne .noyback
  8215                              <2> 		add edi, edx
  8216                              <2> 		add esi, edx
  8217                              <2> 		inc cx
  8218                              <2> 		cmp cx, 16
  8219                              <2> 		jb .backlp
  8220                              <2> 		ret
  8221                              <2> %endif
  8222                              <2> .noyclr:
  8223 000057DD 668B06              <2> 		mov ax, [esi]
  8224 000057E0 C1C010              <2> 		rol eax, 16
  8225 000057E3 668B06              <2> 		mov ax, [esi]
  8226 000057E6 8907                <2> 		mov [edi], eax
  8227 000057E8 894704              <2> 		mov [edi + 4], eax
  8228 000057EB 894708              <2> 		mov [edi + 8], eax
  8229 000057EE 89470C              <2> 		mov [edi + 12], eax
  8230 000057F1 01D7                <2> 		add edi, edx
  8231 000057F3 6641                <2> 		inc cx
  8232 000057F5 6681F91000          <2> 		cmp cx, 16
  8233 000057FA 72E1                <2> 		jb .noyclr
  8234 000057FC C3                  <2> 		ret
  8235                              <2> 
  8236                              <2> switchmousepos:		;;switch were the mouse is located
  8237 000057FD BE[E5A60300]        <2> 		mov esi, mousecolorbuf
  8238 00005802 8B3D[14450000]      <2> 		mov edi, [physbaseptr]
  8239 00005808 31D2                <2> 		xor edx, edx
  8240 0000580A 31C9                <2> 		xor ecx, ecx
  8241 0000580C 668B15[DE470000]    <2> 		mov dx, [lastmouseposition]
  8242 00005813 668B0D[E0470000]    <2> 		mov cx, [lastmouseposition + 2]
  8243 0000581A 01D7                <2> 		add edi, edx
  8244 0000581C 31D2                <2> 		xor edx, edx
  8245 0000581E 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  8246 00005825 6681F90000          <2> 		cmp cx, 0
  8247 0000582A 740B                <2> 		je noswmsy
  8248 0000582C 01D7                <2> swmsy:		add edi, edx
  8249 0000582E 6649                <2> 		dec cx
  8250 00005830 6681F90000          <2> 		cmp cx, 0
  8251 00005835 75F5                <2> 		jne swmsy
  8252 00005837 8B06                <2> noswmsy:	mov eax, [esi]
  8253 00005839 8B5E04              <2> 		mov ebx, [esi + 4]
  8254 0000583C 8907                <2> 		mov [edi], eax
  8255 0000583E 895F04              <2> 		mov [edi + 4], ebx
  8256 00005841 8B4608              <2> 		mov eax, [esi + 8]
  8257 00005844 8B5E0C              <2> 		mov ebx, [esi + 12]
  8258 00005847 894708              <2> 		mov [edi + 8], eax
  8259 0000584A 895F0C              <2> 		mov [edi + 12], ebx
  8260 0000584D 01D7                <2> 		add edi, edx
  8261 0000584F 81C610000000        <2> 		add esi, 16
  8262 00005855 81FE[E5A70300]      <2> 		cmp esi, mcolorend
  8263 0000585B 72DA                <2> 		jb noswmsy
  8264                              <2> 		
  8265                              <2> switchmousepos2:
  8266 0000585D BE[E5A60300]        <2> 		mov esi, mousecolorbuf
  8267 00005862 8B3D[14450000]      <2> 		mov edi, [physbaseptr]
  8268 00005868 31D2                <2> 		xor edx, edx
  8269 0000586A 31C9                <2> 		xor ecx, ecx
  8270 0000586C 668B15[E2470000]    <2> 		mov dx, [mousecursorposition]
  8271 00005873 668B0D[E4470000]    <2> 		mov cx, [mousecursorposition + 2]
  8272 0000587A 01D7                <2> 		add edi, edx
  8273 0000587C 31D2                <2> 		xor edx, edx
  8274 0000587E 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  8275 00005885 6681F90000          <2> 		cmp cx, 0
  8276 0000588A 740B                <2> 		je noswmsy2
  8277 0000588C 01D7                <2> swmsy2:		add edi, edx
  8278 0000588E 6649                <2> 		dec cx
  8279 00005890 6681F90000          <2> 		cmp cx, 0
  8280 00005895 75F5                <2> 		jne swmsy2
  8281 00005897 8B07                <2> noswmsy2:	mov eax, [edi]
  8282 00005899 8B5F04              <2> 		mov ebx, [edi + 4]
  8283 0000589C 8906                <2> 		mov [esi], eax
  8284 0000589E 895E04              <2> 		mov [esi + 4], ebx
  8285 000058A1 8B4708              <2> 		mov eax, [edi + 8]
  8286 000058A4 8B5F0C              <2> 		mov ebx, [edi + 12]
  8287 000058A7 894608              <2> 		mov [esi + 8], eax
  8288 000058AA 895E0C              <2> 		mov [esi + 12], ebx
  8289 000058AD 01D7                <2> 		add edi, edx
  8290 000058AF 81C610000000        <2> 		add esi, 16
  8291 000058B5 81FE[E5A70300]      <2> 		cmp esi, mcolorend
  8292 000058BB 72DA                <2> 		jb noswmsy2
  8293 000058BD C3                  <2> 		ret
  8294                              <2> 		
  8295                              <1> %include "source/gui/icon.asm"
  8296 000058BE 0000                <2> iconcolor dw 0
  8297                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8298 000058C0 A2[89710000]        <2> 		mov [iconselected], al
  8299 000058C5 8025[89710000]01    <2> 		and byte [iconselected], 1
  8300 000058CC B401                <2> 		mov ah, 1
  8301 000058CE E8DF150000          <2> 		call graphicsadd
  8302                              <2> 	showicon2:
  8303 000058D3 8B3D[14450000]      <2> 		mov edi, [physbaseptr]
  8304 000058D9 6601D2              <2> 		add dx, dx
  8305 000058DC 663B15[EC450000]    <2> 		cmp dx, [resolutionx2]
  8306 000058E3 720C                <2> 		jb screenxgood
  8307 000058E5 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  8308 000058EC 6681EA4000          <2> 		sub dx, 64
  8309                              <2> 	screenxgood:
  8310 000058F1 6681F90000          <2> 		cmp cx, 0
  8311 000058F6 742B                <2> 		je noscreenygoodchk
  8312 000058F8 663B0D[00450000]    <2> 		cmp cx, [resolutiony]
  8313 000058FF 720C                <2> 		jb screenygood
  8314 00005901 668B0D[00450000]    <2> 		mov cx, [resolutiony]
  8315 00005908 6681E92000          <2> 		sub cx, 32
  8316                              <2> 	screenygood:
  8317 0000590D 50                  <2> 		push eax
  8318 0000590E 52                  <2> 		push edx
  8319 0000590F 31C0                <2> 		xor eax, eax
  8320 00005911 31DB                <2> 		xor ebx, ebx
  8321 00005913 668B1D[EC450000]    <2> 		mov bx, [resolutionx2]
  8322 0000591A 6689C8              <2> 		mov ax, cx
  8323 0000591D F7E3                <2> 		mul ebx
  8324 0000591F 01C7                <2> 		add edi, eax
  8325 00005921 5A                  <2> 		pop edx
  8326 00005922 58                  <2> 		pop eax
  8327                              <2> 	noscreenygoodchk:
  8328 00005923 31DB                <2> 		xor ebx, ebx
  8329 00005925 6689D3              <2> 		mov bx, dx
  8330 00005928 01DF                <2> 		add edi, ebx
  8331 0000592A 6631C9              <2> 		xor cx, cx
  8332 0000592D 668B06              <2> 		mov ax, [esi]
  8333 00005930 81C602000000        <2> 		add esi, 2
  8334 00005936 66A3[BE580000]      <2> 		mov [iconcolor], ax
  8335                              <2> 	writeicon:
  8336 0000593C 8B06                <2> 		mov eax, [esi]
  8337 0000593E D1C0                <2> 		rol eax, 1
  8338 00005940 30C9                <2> 		xor cl, cl
  8339                              <2> 	writeiconline:
  8340 00005942 B201                <2> 		mov dl, 1
  8341 00005944 20C2                <2> 		and dl, al
  8342 00005946 3215[89710000]      <2> 		xor dl, [iconselected]
  8343 0000594C 668B1D[0D5B0000]    <2> 		mov bx, [background]
  8344 00005953 66891F              <2> 		mov [edi], bx
  8345 00005956 80FA00              <2> 		cmp dl, 0
  8346 00005959 740A                <2> 		je noiconline
  8347 0000595B 668B15[BE580000]    <2> 		mov dx, [iconcolor]
  8348 00005962 668917              <2> 		mov [edi], dx
  8349                              <2> 	noiconline:
  8350 00005965 81C702000000        <2> 		add edi, 2
  8351 0000596B D1C0                <2> 		rol eax, 1
  8352 0000596D FEC1                <2> 		inc cl
  8353 0000596F 80F920              <2> 		cmp cl, 32
  8354 00005972 72CE                <2> 		jb writeiconline
  8355 00005974 81C604000000        <2> 		add esi, 4
  8356 0000597A FEC5                <2> 		inc ch
  8357 0000597C 31D2                <2> 		xor edx, edx
  8358 0000597E 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  8359 00005985 01D7                <2> 		add edi, edx
  8360 00005987 81EF40000000        <2> 		sub edi, 64
  8361 0000598D 80FD20              <2> 		cmp ch, 32
  8362 00005990 72AA                <2> 		jb writeicon
  8363 00005992 31C0                <2> 		xor eax, eax
  8364 00005994 C3                  <2> 		ret
  8365                              <1> %include "source/gui/line.asm"
  8366                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8367 00005995 668935[B75A0000]    <2> 	mov [.color], si
  8368 0000599C C605[B95A0000]00    <2> 	mov byte [.steep], 0
  8369 000059A3 C605[BA5A0000]00    <2> 	mov byte [.yreversed], 0
  8370 000059AA E907000000          <2> 	jmp .notsteep
  8371                              <2> .steeploop:
  8372 000059AF C605[B95A0000]01    <2> 	mov byte [.steep], 1
  8373                              <2> .notsteep:
  8374 000059B6 31FF                <2> 	xor edi, edi
  8375 000059B8 31F6                <2> 	xor esi, esi
  8376 000059BA 6639DA              <2> 	cmp dx, bx
  8377 000059BD 7705                <2> 	ja .noreversex
  8378 000059BF 6687D3              <2> 	xchg dx, bx
  8379 000059C2 6691                <2> 	xchg cx, ax
  8380                              <2> .noreversex:
  8381 000059C4 6689D7              <2> 	mov di, dx
  8382 000059C7 6629DF              <2> 	sub di, bx
  8383                              <2> 	
  8384 000059CA 6639C1              <2> 	cmp cx, ax
  8385 000059CD 720B                <2> 	jb .reversey
  8386 000059CF 6689CE              <2> 	mov si, cx
  8387 000059D2 6629C6              <2> 	sub si, ax
  8388 000059D5 E90D000000          <2> 	jmp .normal
  8389                              <2> .reversey:
  8390 000059DA C605[BA5A0000]02    <2> 	mov byte [.yreversed], 2
  8391 000059E1 6689C6              <2> 	mov si, ax
  8392 000059E4 6629CE              <2> 	sub si, cx	
  8393                              <2> .normal:
  8394 000059E7 6687CA              <2> 	xchg cx, dx
  8395 000059EA 6693                <2> 	xchg ax, bx
  8396 000059EC 6639FE              <2> 	cmp si, di
  8397 000059EF 77BE                <2> 	ja .steeploop
  8398 000059F1 6687CA              <2> 	xchg cx, dx
  8399 000059F4 6693                <2> 	xchg ax, bx
  8400                              <2> 	
  8401 000059F6 6691                <2> 	xchg ax, cx
  8402 000059F8 6687DA              <2> 	xchg bx, dx
  8403 000059FB 66893D[BD5A0000]    <2> 	mov [.xdelta], di
  8404 00005A02 668935[BF5A0000]    <2> 	mov [.ydelta], si
  8405 00005A09 668B35[B75A0000]    <2> 	mov si, [.color]
  8406 00005A10 66891D[BB5A0000]    <2> 	mov [.endline], bx
  8407 00005A17 6652                <2> 	push dx
  8408 00005A19 6651                <2> 	push cx
  8409 00005A1B 6687CA              <2> 	xchg cx, dx
  8410 00005A1E 803D[B95A0000]01    <2> 	cmp byte [.steep], 1
  8411 00005A25 7403                <2> 	je .xchg
  8412 00005A27 6687D1              <2> 	xchg dx, cx
  8413                              <2> .xchg:
  8414 00005A2A E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8415 00005A2F 6659                <2> 	pop cx
  8416 00005A31 665A                <2> 	pop dx
  8417 00005A33 31C0                <2> 	xor eax, eax
  8418 00005A35 66A1[BD5A0000]      <2> 	mov ax, [.xdelta]
  8419 00005A3B 66D1E8              <2> 	shr ax, 1
  8420 00005A3E 8A0D[B95A0000]      <2> 	mov cl, [.steep]
  8421 00005A44 0A0D[BA5A0000]      <2> 	or cl, [.yreversed]
  8422 00005A4A 55                  <2> 	push ebp
  8423 00005A4B 668B2D[BB5A0000]    <2> 	mov bp, [.endline]
  8424 00005A52 6629D5              <2> 	sub bp, dx
  8425 00005A55 668B15[BF5A0000]    <2> 	mov dx, [.ydelta]
  8426                              <2> .lp:
  8427 00005A5C 668937              <2> 	mov [edi], si
  8428 00005A5F 6639D0              <2> 	cmp ax, dx
  8429 00005A62 7332                <2> 	jae .noaddx
  8430 00005A64 F6C102              <2> 	test cl, 2
  8431 00005A67 7414                <2> 	jz .nodecy
  8432 00005A69 F6C101              <2> 	test cl, 1
  8433 00005A6C 7509                <2> 	jnz .steepy
  8434 00005A6E 29DF                <2> 	sub edi, ebx
  8435 00005A70 29DF                <2> 	sub edi, ebx
  8436 00005A72 E906000000          <2> 	jmp .nodecy
  8437                              <2> .steepy:
  8438 00005A77 81EF04000000        <2> 	sub edi, 4
  8439                              <2> .nodecy:
  8440 00005A7D 660305[BD5A0000]    <2> 	add ax, [.xdelta]
  8441 00005A84 F6C101              <2> 	test cl, 1
  8442 00005A87 7507                <2> 	jnz .steepx
  8443 00005A89 01DF                <2> 	add edi, ebx
  8444 00005A8B E906000000          <2> 	jmp .noaddx
  8445                              <2> .steepx:
  8446 00005A90 81C702000000        <2> 	add edi, 2
  8447                              <2> .noaddx:
  8448 00005A96 6629D0              <2> 	sub ax, dx
  8449 00005A99 664D                <2> 	dec bp
  8450 00005A9B 81C702000000        <2> 	add edi, 2
  8451 00005AA1 F6C101              <2> 	test cl, 1
  8452 00005AA4 7408                <2> 	jz .nosteepx
  8453 00005AA6 81EF02000000        <2> 	sub edi, 2
  8454 00005AAC 01DF                <2> 	add edi, ebx
  8455                              <2> .nosteepx:
  8456 00005AAE 6681FD0000          <2> 	cmp bp, 0
  8457 00005AB3 75A7                <2> 	jne .lp
  8458                              <2> .done:
  8459 00005AB5 5D                  <2> 	pop ebp
  8460 00005AB6 C3                  <2> 	ret
  8461                              <2> 	
  8462 00005AB7 0000                <2> .color dw 0
  8463 00005AB9 00                  <2> .steep db 0
  8464 00005ABA 00                  <2> .yreversed db 0
  8465 00005ABB 0000                <2> .endline dw 0
  8466 00005ABD 0000                <2> .xdelta dw 0
  8467 00005ABF 0000                <2> .ydelta dw 0
  8468                              <1> %include "source/gui/refresh.asm"
  8469                              <2> guiclear:
  8470 00005AC1 8B3D[14450000]      <2> 	mov edi, [physbaseptr]
  8471 00005AC7 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  8472 00005ACE 668B0D[00450000]    <2> 	mov cx, [resolutiony]
  8473 00005AD5 668B1D[0D5B0000]    <2> 	mov bx, [background]
  8474 00005ADC 66891D[0F5B0000]    <2> 	mov [background + 2], bx
  8475                              <2> %ifdef gui.background
  8476                              <2> 	cmp dword [backgroundimage], 0
  8477                              <2> 	je guiclear.noback
  8478                              <2> 		mov esi, [backgroundimage]
  8479                              <2> 	.lp:
  8480                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8481                              <2> 		;movdqa [edi], xmm0
  8482                              <2> 		;add esi, 16
  8483                              <2> 		;add edi, 16
  8484                              <2> 		;sub dx, 8
  8485                              <2> 		mov eax, [esi]
  8486                              <2> 		mov [edi], eax
  8487                              <2> 		add esi, 4
  8488                              <2> 		add edi, 4
  8489                              <2> 		sub dx, 2
  8490                              <2> 		cmp dx, 0
  8491                              <2> 		ja .lp
  8492                              <2> 		dec cx
  8493                              <2> 		mov dx, [resolutionx]
  8494                              <2> 		cmp cx, 0
  8495                              <2> 		ja .lp
  8496                              <2> 		ret
  8497                              <2> 	backgroundimage dd 0
  8498                              <2> %endif
  8499                              <2> guiclear.noback:
  8500 00005AE3 A1[0D5B0000]        <2> 	mov eax, [background]
  8501                              <2> guiclearloop:
  8502 00005AE8 8907                <2> 	mov [edi], eax
  8503 00005AEA 81C704000000        <2> 	add edi, 4
  8504 00005AF0 6681EA0200          <2> 	sub dx, 2
  8505 00005AF5 6681FA0000          <2> 	cmp dx, 0
  8506 00005AFA 77EC                <2> 	ja guiclearloop
  8507 00005AFC 6649                <2> 	dec cx
  8508 00005AFE 668B15[FE440000]    <2> 	mov dx, [resolutionx]
  8509 00005B05 6681F90000          <2> 	cmp cx, 0
  8510 00005B0A 77DC                <2> 	ja guiclearloop
  8511 00005B0C C3                  <2> 	ret
  8512                              <2> 
  8513 00005B0D CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8514                              <2> 	.original equ 0111101111001111b
  8515                              <2> 
  8516                              <2> reloadallgraphics:
  8517 00005B11 BF[E5A40300]        <2> 		mov edi, graphicstable
  8518                              <2> reloadgraphicsloop:
  8519 00005B16 8B7702              <2> 		mov esi, [edi + 2]
  8520 00005B19 668B5706            <2> 		mov dx, [edi + 6]
  8521 00005B1D 668B4F08            <2> 		mov cx, [edi + 8]
  8522 00005B21 668B07              <2> 		mov ax, [edi]
  8523 00005B24 668B5F0A            <2> 		mov bx, [edi + 10]
  8524 00005B28 893D[9E6E0000]      <2> 		mov [grpctblpos], edi
  8525 00005B2E 3B3D[35690000]      <2> 		cmp edi, [dragging]
  8526 00005B34 741E                <2> 		je loadedgraphic
  8527 00005B36 663D0100            <2> 		cmp ax, 1
  8528 00005B3A 0F8436000000        <2> 		je near icongraphic
  8529 00005B40 663D0200            <2> 		cmp ax, 2
  8530 00005B44 0F843C000000        <2> 		je near stringgraphic
  8531 00005B4A 663D0300            <2> 		cmp ax, 3
  8532 00005B4E 0F8416000000        <2> 		je near windowgraphic
  8533 00005B54 8B3D[9E6E0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8534 00005B5A 81C710000000        <2> 		add edi, 16
  8535 00005B60 81FF[E5A60300]      <2> 		cmp edi, graphicstableend
  8536 00005B66 732E                <2> 		jae donereloadgraphics
  8537 00005B68 EBAC                <2> 		jmp reloadgraphicsloop
  8538                              <2> windowgraphic:
  8539 00005B6A E827090000          <2> 		call showwindow2
  8540 00005B6F E831B5FFFF          <2> 		call cleardouble
  8541 00005B74 EBDE                <2> 		jmp loadedgraphic
  8542 00005B76 80E301              <2> icongraphic:	and bl, 1
  8543 00005B79 881D[89710000]      <2> 		mov [iconselected], bl
  8544 00005B7F E84FFDFFFF          <2> 		call showicon2
  8545 00005B84 EBCE                <2> 		jmp loadedgraphic
  8546 00005B86 80E301              <2> stringgraphic:  and bl, 1
  8547 00005B89 881D[31690000]      <2> 		mov [mouseselecton], bl
  8548 00005B8F E8CE050000          <2> 		call showstring2
  8549 00005B94 EBBE                <2> 		jmp loadedgraphic
  8550                              <2> donereloadgraphics:
  8551 00005B96 8B3D[35690000]      <2> 		mov edi, [dragging]
  8552 00005B9C 81FF[E5A40300]      <2> 		cmp edi, graphicstable
  8553 00005BA2 7226                <2> 		jb notcorrectdrag
  8554 00005BA4 668B07              <2> 		mov ax, [edi]
  8555 00005BA7 8B7702              <2> 		mov esi, [edi + 2]
  8556 00005BAA 668B5706            <2> 		mov dx, [edi + 6]
  8557 00005BAE 668B4F08            <2> 		mov cx, [edi + 8]
  8558 00005BB2 668B5F0A            <2> 		mov bx, [edi + 10]
  8559 00005BB6 663D0100            <2> 		cmp ax, 1
  8560 00005BBA 750F                <2> 		jne noticondragging
  8561 00005BBC 80E301              <2> 		and bl, 1
  8562 00005BBF 881D[89710000]      <2> 		mov [iconselected], bl
  8563 00005BC5 E809FDFFFF          <2> 		call showicon2
  8564                              <2> notcorrectdrag:
  8565 00005BCA C3                  <2> 		ret
  8566                              <2> 
  8567                              <2> 	noticondragging:
  8568 00005BCB 663D0200            <2> 		cmp ax, 2
  8569 00005BCF 75F9                <2> 		jne notcorrectdrag
  8570 00005BD1 80E301              <2> 		and bl, 1
  8571 00005BD4 881D[31690000]      <2> 		mov [mouseselecton], bl
  8572 00005BDA E883050000          <2> 		call showstring2
  8573 00005BDF EBE9                <2> 		jmp notcorrectdrag
  8574                              <1> %include "source/gui/square.asm"
  8575                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  8576 00005BE1 6639D3              <2> 	cmp bx, dx
  8577 00005BE4 7303                <2> 	jae .noxchgx
  8578 00005BE6 6687DA              <2> 	xchg bx, dx
  8579                              <2> .noxchgx:
  8580 00005BE9 6639C8              <2> 	cmp ax, cx
  8581 00005BEC 7302                <2> 	jae .noxchgy
  8582 00005BEE 6691                <2> 	xchg ax, cx
  8583                              <2> .noxchgy:
  8584 00005BF0 6650                <2> 	push ax
  8585 00005BF2 6653                <2> 	push bx
  8586 00005BF4 6652                <2> 	push dx
  8587 00005BF6 E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8588 00005BFB 31D2                <2> 	xor edx, edx
  8589 00005BFD 665A                <2> 	pop dx
  8590 00005BFF 31DB                <2> 	xor ebx, ebx
  8591 00005C01 665B                <2> 	pop bx
  8592 00005C03 6658                <2> 	pop ax
  8593                              <2> .lp0:
  8594 00005C05 6652                <2> 	push dx
  8595                              <2> .lp:
  8596 00005C07 668937              <2> 	mov [edi], si
  8597 00005C0A 81C702000000        <2> 	add edi, 2
  8598 00005C10 6642                <2> 	inc dx
  8599 00005C12 6639DA              <2> 	cmp dx, bx
  8600 00005C15 76F0                <2> 	jbe .lp
  8601 00005C17 665A                <2> 	pop dx
  8602 00005C19 81EF02000000        <2> 	sub edi, 2
  8603 00005C1F 29DF                <2> 	sub edi, ebx
  8604 00005C21 29DF                <2> 	sub edi, ebx
  8605 00005C23 01D7                <2> 	add edi, edx
  8606 00005C25 01D7                <2> 	add edi, edx
  8607 00005C27 033D[EC450000]      <2> 	add edi, [resolutionx2]
  8608 00005C2D 6641                <2> 	inc cx
  8609 00005C2F 6639C1              <2> 	cmp cx, ax
  8610 00005C32 7203                <2> 	jb .lp2
  8611 00005C34 74CF                <2> 	je .lp0
  8612 00005C36 C3                  <2> 	ret
  8613                              <2> .lp2:
  8614 00005C37 57                  <2> 	push edi
  8615 00005C38 668937              <2> 	mov [edi], si
  8616 00005C3B 29D7                <2> 	sub edi, edx
  8617 00005C3D 29D7                <2> 	sub edi, edx
  8618 00005C3F 01DF                <2> 	add edi, ebx
  8619 00005C41 01DF                <2> 	add edi, ebx
  8620 00005C43 668937              <2> 	mov [edi], si
  8621 00005C46 5F                  <2> 	pop edi
  8622 00005C47 033D[EC450000]      <2> 	add edi, [resolutionx2]
  8623 00005C4D 6641                <2> 	inc cx
  8624 00005C4F 6639C1              <2> 	cmp cx, ax
  8625 00005C52 72E3                <2> 	jb .lp2
  8626 00005C54 EBAF                <2> 	jmp .lp0
  8627                              <2> 
  8628                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  8629 00005C56 6639D3              <2> 	cmp bx, dx
  8630 00005C59 7303                <2> 	jae .noxchgx
  8631 00005C5B 6687DA              <2> 	xchg bx, dx
  8632                              <2> .noxchgx:
  8633 00005C5E 6639C8              <2> 	cmp ax, cx
  8634 00005C61 7302                <2> 	jae .noxchgy
  8635 00005C63 6691                <2> 	xchg ax, cx
  8636                              <2> .noxchgy:
  8637 00005C65 6650                <2> 	push ax
  8638 00005C67 6653                <2> 	push bx
  8639 00005C69 6652                <2> 	push dx
  8640 00005C6B E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8641 00005C70 31D2                <2> 	xor edx, edx
  8642 00005C72 665A                <2> 	pop dx
  8643 00005C74 31DB                <2> 	xor ebx, ebx
  8644 00005C76 665B                <2> 	pop bx
  8645 00005C78 6658                <2> 	pop ax
  8646                              <2> .lp2
  8647 00005C7A 6652                <2> 	push dx
  8648                              <2> .lp:
  8649 00005C7C 668937              <2> 	mov [edi], si
  8650 00005C7F 81C702000000        <2> 	add edi, 2
  8651 00005C85 6642                <2> 	inc dx
  8652 00005C87 6639DA              <2> 	cmp dx, bx
  8653 00005C8A 76F0                <2> 	jbe .lp
  8654 00005C8C 665A                <2> 	pop dx
  8655 00005C8E 81EF02000000        <2> 	sub edi, 2
  8656 00005C94 29DF                <2> 	sub edi, ebx
  8657 00005C96 29DF                <2> 	sub edi, ebx
  8658 00005C98 01D7                <2> 	add edi, edx
  8659 00005C9A 01D7                <2> 	add edi, edx
  8660 00005C9C 033D[EC450000]      <2> 	add edi, [resolutionx2]
  8661 00005CA2 6641                <2> 	inc cx
  8662 00005CA4 6639C1              <2> 	cmp cx, ax
  8663 00005CA7 76D1                <2> 	jbe .lp2
  8664 00005CA9 C3                  <2> 	ret
  8665                              <1> %include "source/gui/startup.asm"
  8666                              <2> guisetup:
  8667                              <2> 	%ifdef gui.background
  8668                              <2> 	xor ebx, ebx
  8669                              <2> 	mov [backgroundimage], ebx
  8670                              <2> 	%endif
  8671 00005CAA E812FEFFFF          <2> 	call guiclear
  8672 00005CAF C605[F0710000]01    <2> 	mov byte [guion], 1
  8673 00005CB6 C605[31690000]00    <2> 	mov byte [mouseselecton], 0
  8674 00005CBD 31C0                <2> 	xor eax, eax
  8675 00005CBF 31DB                <2> 	xor ebx, ebx
  8676 00005CC1 31C9                <2> 	xor ecx, ecx
  8677 00005CC3 31D2                <2> 	xor edx, edx
  8678                              <2> 	
  8679 00005CC5 BE[875E0000]        <2> 	mov esi, pacmsg
  8680 00005CCA 30E4                <2> 	xor ah, ah
  8681 00005CCC B010                <2> 	mov al, 00010000b
  8682 00005CCE 31DB                <2> 	xor ebx, ebx
  8683 00005CD0 66B99000            <2> 	mov cx, 144
  8684 00005CD4 66BA0400            <2> 	mov dx, 4
  8685 00005CD8 E872040000          <2> 	call showstring
  8686                              <2> 	
  8687 00005CDD BE[C55E0000]        <2> 	mov esi, interneticon
  8688 00005CE2 30E4                <2> 	xor ah, ah
  8689 00005CE4 B010                <2> 	mov al, 00010000b
  8690 00005CE6 BB[B05D0000]        <2> 	mov ebx, noie
  8691 00005CEB 66B91800            <2> 	mov cx, 24
  8692 00005CEF 66BA0400            <2> 	mov dx, 4
  8693 00005CF3 E8C8FBFFFF          <2> 	call showicon
  8694                              <2> 	
  8695 00005CF8 BE[475F0000]        <2> 	mov esi, wordicon
  8696 00005CFD 30E4                <2> 	xor ah, ah
  8697 00005CFF B010                <2> 	mov al, 00010000b
  8698 00005D01 31DB                <2> 	xor ebx, ebx
  8699 00005D03 66B91800            <2> 	mov cx, 24
  8700 00005D07 66BA3000            <2> 	mov dx, 48
  8701 00005D0B E8B0FBFFFF          <2> 	call showicon
  8702                              <2> 	
  8703 00005D10 BE[C95F0000]        <2> 	mov esi, pacmanpellet
  8704 00005D15 30E4                <2> 	xor ah, ah
  8705 00005D17 B010                <2> 	mov al, 00010000b
  8706 00005D19 31DB                <2> 	xor ebx, ebx
  8707 00005D1B 66B94000            <2> 	mov cx, 64
  8708 00005D1F 66BA0400            <2> 	mov dx, 4
  8709 00005D23 E898FBFFFF          <2> 	call showicon
  8710                              <2> 	
  8711 00005D28 BE[CD600000]        <2> 	mov esi, pacman
  8712 00005D2D 30E4                <2> 	xor ah, ah
  8713 00005D2F B010                <2> 	mov al, 00010000b
  8714 00005D31 BB[995D0000]        <2> 	mov ebx, pacmannomnom
  8715 00005D36 66B94000            <2> 	mov cx, 64
  8716 00005D3A 66BA3000            <2> 	mov dx, 48
  8717 00005D3E E87DFBFFFF          <2> 	call showicon
  8718                              <2> 	
  8719 00005D43 BE[4B600000]        <2> 	mov esi, ghostie
  8720 00005D48 30E4                <2> 	xor ah, ah
  8721 00005D4A B010                <2> 	mov al, 00010000b
  8722 00005D4C BB[825D0000]        <2> 	mov ebx, boo
  8723 00005D51 66B96C00            <2> 	mov cx, 108
  8724 00005D55 66BA0400            <2> 	mov dx, 4
  8725 00005D59 E862FBFFFF          <2> 	call showicon
  8726                              <2> 	
  8727 00005D5E BE[695E0000]        <2> 	mov esi, start
  8728 00005D63 668B0D[00450000]    <2> 	mov cx, [resolutiony]
  8729 00005D6A 6681E91000          <2> 	sub cx, 16
  8730 00005D6F 66BA0200            <2> 	mov dx, 2
  8731 00005D73 30E4                <2> 	xor ah, ah
  8732 00005D75 B010                <2> 	mov al, 00010000b
  8733 00005D77 BB[255E0000]        <2> 	mov ebx, winblows
  8734 00005D7C E8CE030000          <2> 	call showstring
  8735                              <2> 
  8736                              <2> %ifdef gui.time	
  8737                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  8738                              <2> %endif
  8739 00005D81 C3                  <2> 	ret
  8740                              <2> 
  8741                              <2> 	boo:
  8742 00005D82 BE[825E0000]        <2> 		mov esi, boomsg
  8743 00005D87 66BA6400            <2> 		mov dx, 100
  8744 00005D8B 66B94001            <2> 		mov cx, 320
  8745 00005D8F 31DB                <2> 		xor ebx, ebx
  8746 00005D91 6631C0              <2> 		xor ax, ax
  8747 00005D94 E9B6030000          <2> 		jmp showstring
  8748                              <2> 
  8749                              <2> 	pacmannomnom:
  8750 00005D99 BE[A05E0000]        <2> 		mov esi, pacnom
  8751 00005D9E 66BA8200            <2> 		mov dx, 130
  8752 00005DA2 66B93C00            <2> 		mov cx, 60
  8753 00005DA6 31DB                <2> 		xor ebx, ebx
  8754 00005DA8 6631C0              <2> 		xor ax, ax
  8755 00005DAB E99F030000          <2> 		jmp showstring	
  8756                              <2> 	
  8757                              <2> 	noie:
  8758 00005DB0 66C705[AF5E0000]80- <2> 		mov word [termwindow], 640
  8759 00005DB8 02                  <2>
  8760 00005DB9 66C705[B15E0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8761 00005DC1 01                  <2>
  8762 00005DC2 BE[AF5E0000]        <2> 		mov esi, termwindow
  8763 00005DC7 66BA1000            <2> 		mov dx, 16
  8764 00005DCB 66B91000            <2> 		mov cx, 16
  8765 00005DCF 31DB                <2> 		xor ebx, ebx
  8766 00005DD1 6631C0              <2> 		xor ax, ax
  8767 00005DD4 E803060000          <2> 		call showwindow
  8768 00005DD9 E9CBBEFFFF          <2> 		jmp os
  8769                              <2> 
  8770                              <2> 	gotomenuboot:
  8771 00005DDE 31D2                <2> 		xor edx, edx
  8772 00005DE0 31C9                <2> 		xor ecx, ecx
  8773 00005DE2 668B15[FE440000]    <2> 		mov dx, [resolutionx]
  8774 00005DE9 668B0D[00450000]    <2> 		mov cx, [resolutiony]
  8775 00005DF0 66C1E904            <2> 		shr cx, 4
  8776 00005DF4 6681E90100          <2> 		sub cx, 1
  8777 00005DF9 66C1E104            <2> 		shl cx, 4
  8778 00005DFD 668915[AF5E0000]    <2> 		mov [termwindow], dx
  8779 00005E04 66890D[B15E0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8780 00005E0B BE[AF5E0000]        <2> 		mov esi, termwindow
  8781 00005E10 6631D2              <2> 		xor dx, dx
  8782 00005E13 6631C9              <2> 		xor cx, cx
  8783 00005E16 31DB                <2> 		xor ebx, ebx
  8784 00005E18 6631C0              <2> 		xor ax, ax
  8785 00005E1B E8BC050000          <2> 		call showwindow
  8786 00005E20 E984BEFFFF          <2> 		jmp os
  8787                              <2> 
  8788                              <2> 	winblows:
  8789 00005E25 BE[785E0000]        <2> 		mov esi, turnoffmsg
  8790 00005E2A BB[60400000]        <2> 		mov ebx, turnoff
  8791 00005E2F 668B0D[00450000]    <2> 		mov cx, [resolutiony]
  8792 00005E36 6681E92000          <2> 		sub cx, 32
  8793 00005E3B 6631D2              <2> 		xor dx, dx
  8794 00005E3E 30E4                <2> 		xor ah, ah
  8795 00005E40 B010                <2> 		mov al, 00010000b
  8796 00005E42 E808030000          <2> 		call showstring
  8797 00005E47 BE[6F5E0000]        <2> 		mov esi, gotomenu
  8798 00005E4C 668B0D[00450000]    <2> 		mov cx, [resolutiony]
  8799 00005E53 6681E93000          <2> 		sub cx, 48
  8800 00005E58 6631D2              <2> 		xor dx, dx
  8801 00005E5B 30E4                <2> 		xor ah, ah
  8802 00005E5D B010                <2> 		mov al, 00010000b
  8803 00005E5F BB[DE5D0000]        <2> 		mov ebx, gotomenuboot
  8804 00005E64 E9E6020000          <2> 		jmp showstring
  8805                              <2> 		
  8806                              <2> 
  8807 00005E69 737461727400        <2> 	start	db "start",0
  8808 00005E6F 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8809 00005E78 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8810 00005E81 00                  <2>
  8811 00005E82 426F6F2100          <2> 	boomsg db "Boo!",0
  8812 00005E87 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8813 00005E90 73206561737920746F- <2>
  8814 00005E99 20647261772E00      <2>
  8815 00005EA0 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8816 00005EA9 6D206E6F6D00        <2>
  8817                              <2> 
  8818 00005EAF 20035802            <2> 	termwindow:	dw 800,600	;window size
  8819 00005EB3 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8820 00005EB7 [E6A70300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8821 00005EBB [2E7D0400]          <2>
  8822 00005EBF 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8823                              <2> 	
  8824 00005EBF <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8825 00005EBF <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8826 00005EBF <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8827 00005EBF <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8828 00005EBF <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8829                              <2> 
  8830                              <2> %ifdef gui.time
  8831                              <2> guitime:
  8832                              <2> 		call time	;get rtc in timeshow & dateshow
  8833                              <2> 		xor ebx, ebx
  8834                              <2> 		mov dx, [resolutionx2]
  8835                              <2> 		xor cx, cx
  8836                              <2> 		sub dx, 304
  8837                              <2> 		mov esi, dateshow
  8838                              <2> 		mov al, 00010001b
  8839                              <2> 		call showstring
  8840                              <2> 		mov esi, timeshow
  8841                              <2> 		xor ebx, ebx
  8842                              <2> 		mov al, 00010001b
  8843                              <2> 		call showstring
  8844                              <2> 		ret
  8845                              <2> %endif
  8846                              <1> %include "source/gui/text.asm"
  8847                              <2> 	showstring:
  8848 0000614F A2[31690000]        <2> 		mov [mouseselecton], al
  8849 00006154 8025[31690000]01    <2> 		and byte [mouseselecton], 1
  8850 0000615B B402                <2> 		mov ah, 2
  8851 0000615D E8500D0000          <2> 		call graphicsadd
  8852                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  8853 00006162 30E4                <2> 		xor ah, ah
  8854 00006164 8A06                <2> 		mov al, [esi]
  8855 00006166 3CC0                <2> 		cmp al, 0xC0
  8856 00006168 7234                <2> 		jb .doneutf
  8857 0000616A 3CE0                <2> 		cmp al, 0xE0
  8858 0000616C 721D                <2> 		jb .two
  8859 0000616E 46                  <2> 		inc esi
  8860 0000616F 668B1E              <2> 		mov bx, [esi]
  8861 00006172 46                  <2> 		inc esi
  8862 00006173 C0E004              <2> 		shl al, 4
  8863 00006176 66C1E302            <2> 		shl bx, 2
  8864 0000617A C0EF02              <2> 		shr bh, 2
  8865 0000617D 66C1EB02            <2> 		shr bx, 2
  8866 00006181 08C7                <2> 		or bh, al
  8867 00006183 6689D8              <2> 		mov ax, bx
  8868 00006186 E913000000          <2> 		jmp .doneutf
  8869                              <2> 	.two:
  8870 0000618B 8A3E                <2> 		mov bh, [esi]
  8871 0000618D 46                  <2> 		inc esi
  8872 0000618E 8A1E                <2> 		mov bl, [esi]
  8873 00006190 66C1E302            <2> 		shl bx, 2
  8874 00006194 C0EF02              <2> 		shr bh, 2
  8875 00006197 66C1EB02            <2> 		shr bx, 2
  8876 0000619B 6689D8              <2> 		mov ax, bx
  8877                              <2> 	.doneutf:
  8878 0000619E 3C00                <2> 		cmp al, 0
  8879 000061A0 7420                <2> 		je doneshowstring
  8880 000061A2 46                  <2> 		inc esi
  8881 000061A3 3CFF                <2> 		cmp al, 255
  8882 000061A5 74BB                <2> 		je showstring2
  8883 000061A7 56                  <2> 		push esi
  8884 000061A8 668B1D[CA610000]    <2> 		mov bx, [colorfont2]
  8885 000061AF E827000000          <2> 		call showfontvesa
  8886 000061B4 663D0A00            <2> 		cmp ax, 10
  8887 000061B8 7405                <2> 		je noproceedshst
  8888 000061BA 6681C20800          <2> 		add dx, 8
  8889                              <2> 	noproceedshst:
  8890 000061BF 5E                  <2> 		pop esi
  8891 000061C0 EBA0                <2> 		jmp showstring2
  8892                              <2> 	doneshowstring:
  8893 000061C2 C605[31690000]00    <2> 		mov byte [mouseselecton], 0
  8894 000061C9 C3                  <2> 		ret
  8895                              <2> 
  8896 000061CA FFFF                <2> colorfont2 dw 0xFFFF
  8897 000061CC 00                  <2> colorcache db 0
  8898                              <2> 
  8899 000061CD 02                  <2> resolutionbytes db 2
  8900 000061CE 0000                <2> posxvesa dw 0
  8901 000061D0 0000                <2> posyvesa dw 0
  8902 000061D2 FFFF                <2> colorfont dw 0xFFFF
  8903                              <2> savefontvesa:		;same rules as showfontvesa
  8904 000061D4 C605[30690000]01    <2> 	mov byte [savefonton], 1
  8905                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  8906 000061DB 663DFF00            <2> 	cmp ax, 255
  8907 000061DF 7501                <2> 	jne nostopshowfont
  8908 000061E1 C3                  <2> 	ret
  8909                              <2> nostopshowfont:
  8910 000061E2 55                  <2> 	push ebp
  8911 000061E3 66890D[D0610000]    <2> 	mov [posyvesa], cx
  8912 000061EA 663D0A00            <2> 	cmp ax, 10
  8913 000061EE 0F8424000000        <2> 	je near goodvesafontx
  8914 000061F4 31C9                <2> 	xor ecx, ecx
  8915 000061F6 668B0D[EC450000]    <2> 	mov cx, [resolutionx2]
  8916 000061FD 6639CA              <2> 	cmp dx, cx
  8917 00006200 7616                <2> 	jbe goodvesafontx
  8918 00006202 6631D2              <2> 	xor dx, dx
  8919 00006205 668B0D[D0610000]    <2> 	mov cx, [posyvesa]
  8920 0000620C 6681C11000          <2> 	add cx, 16
  8921 00006211 66890D[D0610000]    <2> 	mov [posyvesa], cx
  8922                              <2> goodvesafontx:
  8923 00006218 668B0D[D0610000]    <2> 	mov cx, [posyvesa]
  8924 0000621F 668915[CE610000]    <2> 	mov [posxvesa], dx
  8925 00006226 8B3D[14450000]      <2> 	mov edi, [physbaseptr]
  8926 0000622C 66891D[D2610000]    <2> 	mov [colorfont], bx
  8927 00006233 668B2D[D2610000]    <2> 	mov bp, [colorfont]
  8928 0000623A 31DB                <2> 	xor ebx, ebx
  8929 0000623C 6689C3              <2> 	mov bx, ax
  8930 0000623F 31C0                <2> 	xor eax, eax
  8931 00006241 6689D8              <2> 	mov ax, bx
  8932 00006244 6689D3              <2> 	mov bx, dx
  8933 00006247 89DA                <2> 	mov edx, ebx
  8934 00006249 31DB                <2> 	xor ebx, ebx
  8935 0000624B 6681F90000          <2> 	cmp cx, 0
  8936 00006250 7414                <2> 	je vesaposloopdn
  8937 00006252 668B1D[EC450000]    <2> 	mov bx, [resolutionx2]
  8938                              <2> vesaposloop:
  8939 00006259 52                  <2> 	push edx
  8940 0000625A 50                  <2> 	push eax
  8941 0000625B 31C0                <2> 	xor eax, eax
  8942 0000625D 6689C8              <2> 	mov ax, cx
  8943 00006260 F7E3                <2> 	mul ebx
  8944 00006262 01C7                <2> 	add edi, eax
  8945 00006264 58                  <2> 	pop eax
  8946 00006265 5A                  <2> 	pop edx
  8947                              <2> vesaposloopdn:
  8948 00006266 01D7                <2> 	add edi, edx
  8949 00006268 BE[3A740000]        <2> 	mov esi, fonts
  8950                              <2> findfontvesa:
  8951 0000626D 663D0A00            <2> 	cmp ax, 10
  8952 00006271 0F84EB000000        <2> 	je near nwlinevesa
  8953 00006277 C1E004              <2> 	shl eax, 4
  8954 0000627A 01C6                <2> 	add esi, eax
  8955 0000627C C1E804              <2> 	shr eax, 4
  8956 0000627F 81FE[3A740300]      <2> 	cmp esi, fontend
  8957 00006285 0F83AB000000        <2> 	jae near donefontvesa
  8958 0000628B 4E                  <2> 	dec esi
  8959                              <2> foundfontvesa:
  8960 0000628C 46                  <2> 	inc esi
  8961 0000628D 803D[30690000]01    <2> 	cmp byte [savefonton], 1
  8962 00006294 0F84E7000000        <2> 	je near vesafontsaver
  8963 0000629A 30C9                <2> 	xor cl, cl
  8964 0000629C 8A06                <2> 	mov al, [esi]
  8965 0000629E 668B15[EC450000]    <2> 	mov dx, [resolutionx2]
  8966 000062A5 662B15[CE610000]    <2> 	sub dx, [posxvesa]
  8967 000062AC 6681FA1000          <2> 	cmp dx, 16
  8968 000062B1 7708                <2> 	ja paintfontvesa
  8969 000062B3 D0EA                <2> 	shr dl, 1
  8970 000062B5 8815[61630000]      <2> 	mov [charwidth], dl
  8971                              <2> paintfontvesa:
  8972 000062BB B201                <2> 	mov dl, 1
  8973 000062BD 20C2                <2> 	and dl, al
  8974 000062BF 803D[2F690000]01    <2> 	cmp byte [showcursorfonton], 1
  8975 000062C6 0F842E000000        <2> 	je near nodelpaintedfont
  8976 000062CC 803D[2F690000]02    <2> 	cmp byte [showcursorfonton], 2
  8977 000062D3 0F8511000000        <2> 	jne near noswitchcursorfonton
  8978 000062D9 80FA00              <2> 	cmp dl, 0
  8979 000062DC 0F8420000000        <2> 	je near nopixelset
  8980 000062E2 66892F              <2> 	mov [edi], bp
  8981 000062E5 E918000000          <2> 	jmp nopixelset
  8982                              <2> noswitchcursorfonton:
  8983 000062EA 3215[31690000]      <2> 	xor dl, [mouseselecton]
  8984 000062F0 668B1D[0D5B0000]    <2> 	mov bx, [background]
  8985 000062F7 66891F              <2> 	mov [edi], bx
  8986                              <2> nodelpaintedfont:
  8987 000062FA 80FA00              <2> 	cmp dl, 0
  8988 000062FD 7403                <2> 	je nopixelset
  8989 000062FF 66892F              <2> 	mov [edi], bp
  8990                              <2> nopixelset:
  8991 00006302 81C702000000        <2> 	add edi, 2
  8992 00006308 D0C0                <2> 	rol al, 1
  8993 0000630A FEC1                <2> 	inc cl
  8994 0000630C 3A0D[61630000]      <2> 	cmp cl, [charwidth]
  8995 00006312 72A7                <2> 	jb paintfontvesa
  8996 00006314 FEC5                <2> 	inc ch
  8997 00006316 31D2                <2> 	xor edx, edx
  8998 00006318 668B15[EC450000]    <2> 	mov dx, [resolutionx2]
  8999 0000631F 01D7                <2> 	add edi, edx
  9000 00006321 31D2                <2> 	xor edx, edx
  9001 00006323 8A15[61630000]      <2> 	mov dl, [charwidth]
  9002 00006329 00D2                <2> 	add dl, dl
  9003 0000632B 29D7                <2> 	sub edi, edx
  9004 0000632D 80FD10              <2> 	cmp ch, 16
  9005 00006330 0F8256FFFFFF        <2> 	jb foundfontvesa
  9006                              <2> donefontvesa:
  9007 00006336 C605[61630000]08    <2> 	mov byte [charwidth], 8
  9008 0000633D 668B15[CE610000]    <2> 	mov dx, [posxvesa]
  9009 00006344 8A1D[61630000]      <2> 	mov bl, [charwidth]
  9010 0000634A 30FF                <2> 	xor bh, bh
  9011 0000634C 6601DA              <2> 	add dx, bx
  9012 0000634F 6689EB              <2> 	mov bx, bp
  9013 00006352 668B0D[D0610000]    <2> 	mov cx, [posyvesa]
  9014 00006359 883D[30690000]      <2> 	mov [savefonton], bh
  9015 0000635F 5D                  <2> 	pop ebp
  9016 00006360 C3                  <2> 	ret
  9017 00006361 08                  <2> charwidth db 8
  9018                              <2> nwlinevesa:
  9019 00006362 6631D2              <2> 	xor dx, dx
  9020 00006365 668915[CE610000]    <2> 	mov [posxvesa], dx
  9021 0000636C 668B0D[D0610000]    <2> 	mov cx, [posyvesa]
  9022 00006373 6681C11000          <2> 	add cx, 16
  9023 00006378 66890D[D0610000]    <2> 	mov [posyvesa], cx
  9024 0000637F EBB5                <2> 	jmp donefontvesa
  9025                              <2> vesafontsaver:
  9026 00006381 30C0                <2> 	xor al, al
  9027 00006383 30C9                <2> 	xor cl, cl
  9028                              <2> vesafontsaver2:
  9029 00006385 66392F              <2> 	cmp [edi], bp
  9030 00006388 742C                <2> 	je colorfontmatch
  9031                              <2> donecolormatch:
  9032 0000638A 81C702000000        <2> 	add edi, 2
  9033 00006390 D0C0                <2> 	rol al, 1
  9034 00006392 FEC1                <2> 	inc cl
  9035 00006394 80F908              <2> 	cmp cl, 8
  9036 00006397 72EC                <2> 	jb vesafontsaver2
  9037 00006399 8806                <2> 	mov [esi], al
  9038 0000639B 46                  <2> 	inc esi
  9039 0000639C FEC5                <2> 	inc ch
  9040 0000639E 31D2                <2> 	xor edx, edx
  9041 000063A0 668B15[EC450000]    <2> 	mov dx, [resolutionx2]
  9042 000063A7 01D7                <2> 	add edi, edx
  9043 000063A9 81EF10000000        <2> 	sub edi, 16
  9044 000063AF 80FD10              <2> 	cmp ch, 16
  9045 000063B2 72CD                <2> 	jb vesafontsaver
  9046 000063B4 EB80                <2> 	jmp donefontvesa
  9047                              <2> colorfontmatch:
  9048 000063B6 0401                <2> 	add al, 1
  9049 000063B8 EBD0                <2> 	jmp donecolormatch
  9050                              <1> %include "source/gui/window.asm"
  9051 000063BA 0000                <2> winvcopystx dw 0
  9052 000063BC 0000                <2> winvcopysty dw 0
  9053 000063BE 0000                <2> winvcopydx dw 0
  9054 000063C0 0000                <2> winvcopycx dw 0
  9055 000063C2 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9056 000063C6 00000000            <2> windowbufloc: dd 0
  9057 000063CA 00000000            <2> windowvideobuf dd 0
  9058 000063CE 00000000            <2> windowvideobuf2 dd 0
  9059 000063D2 00000000            <2> windowinfobuf dd 0
  9060 000063D6 0000                <2> termcol dw 0
  9061 000063D8 00000000            <2> wincopyendpos dd 0
  9062                              <2> 
  9063                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9064 000063DC C605[3E160000]01    <2> 		mov byte [termguion], 1
  9065 000063E3 6681C11000          <2> 		add cx, 16
  9066 000063E8 668915[BA630000]    <2> 		mov [winvcopystx], dx
  9067 000063EF 66890D[BC630000]    <2> 		mov [winvcopysty], cx
  9068 000063F6 8935[D2630000]      <2> 		mov [windowinfobuf], esi
  9069 000063FC 668B16              <2> 		mov dx, [esi]
  9070 000063FF 668B4E02            <2> 		mov cx, [esi + 2]
  9071 00006403 31C0                <2> 		xor eax, eax
  9072 00006405 31DB                <2> 		xor ebx, ebx
  9073 00006407 6689D0              <2> 		mov ax, dx
  9074 0000640A 6689CB              <2> 		mov bx, cx
  9075 0000640D 66C1E803            <2> 		shr ax, 3
  9076 00006411 66C1EB04            <2> 		shr bx, 4
  9077 00006415 66A3[D6630000]      <2> 		mov [termcol], ax
  9078 0000641B A2[33180000]        <2> 		mov [charxy], al
  9079 00006420 881D[34180000]      <2> 		mov [charxy + 1], bl
  9080 00006426 8B7E04              <2> 		mov edi, [esi + 4]
  9081 00006429 893D[C2630000]      <2> 		mov [windowcolor], edi
  9082 0000642F 8B7E0C              <2> 		mov edi, [esi + 12]
  9083 00006432 893D[CE630000]      <2> 		mov [windowvideobuf2], edi
  9084 00006438 8B7E08              <2> 		mov edi, [esi + 8]
  9085 0000643B 893D[CA630000]      <2> 		mov [windowvideobuf], edi
  9086 00006441 81FB00000000        <2> 		cmp ebx, 0
  9087 00006447 0F84C1040000        <2> 		je near donewincopynow
  9088                              <2> 	findendposwin:
  9089 0000644D C1E002              <2> 		shl eax, 2
  9090 00006450 31D2                <2> 		xor edx, edx
  9091 00006452 F7E3                <2> 		mul ebx
  9092 00006454 01C7                <2> 		add edi, eax
  9093 00006456 893D[D8630000]      <2> 		mov [wincopyendpos], edi
  9094 0000645C 31FF                <2> 		xor edi, edi
  9095 0000645E 6631C0              <2> 		xor ax, ax
  9096 00006461 6631DB              <2> 		xor bx, bx
  9097 00006464 6601D2              <2> 		add dx, dx
  9098 00006467 668915[BE630000]    <2> 		mov [winvcopydx], dx
  9099 0000646E 66890D[C0630000]    <2> 		mov [winvcopycx], cx
  9100 00006475 668B0D[BC630000]    <2> 		mov cx, [winvcopysty]
  9101 0000647C 6681E91000          <2> 		sub cx, 16
  9102 00006481 668B15[BA630000]    <2> 		mov dx, [winvcopystx]
  9103 00006488 C605[3F160000]00    <2> 		mov byte [termcopyon], 0
  9104 0000648F B403                <2> 		mov ah, 3
  9105 00006491 E81C0A0000          <2> 		call graphicsadd
  9106                              <2> 	showwindow2:
  9107 00006496 6681C11000          <2> 		add cx, 16
  9108 0000649B 668915[BA630000]    <2> 		mov [winvcopystx], dx
  9109 000064A2 66890D[BC630000]    <2> 		mov [winvcopysty], cx
  9110 000064A9 668B16              <2> 		mov dx, [esi]
  9111 000064AC 668B4E02            <2> 		mov cx, [esi + 2]
  9112 000064B0 6601D2              <2> 		add dx, dx
  9113 000064B3 668915[BE630000]    <2> 		mov [winvcopydx], dx
  9114 000064BA 66890D[C0630000]    <2> 		mov [winvcopycx], cx
  9115 000064C1 E818000000          <2> 		call reloadwindowtitle
  9116 000064C6 803D[996E0000]01    <2> 		cmp byte [windrag], 1
  9117 000064CD 0F834A040000        <2> 		jae near forgetresetstuff
  9118 000064D3 8B3D[C6630000]      <2> 		mov edi, [windowbufloc]
  9119 000064D9 E96E020000          <2> 		jmp windowvideocopyset
  9120                              <2> 		
  9121                              <2> 	reloadwindowtitle:
  9122 000064DE 8B3D[C6630000]      <2> 		mov edi, [windowbufloc]
  9123 000064E4 31D2                <2> 		xor edx, edx
  9124 000064E6 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  9125 000064ED C1E204              <2> 		shl edx, 4
  9126 000064F0 29D7                <2> 		sub edi, edx
  9127 000064F2 803D[3F160000]00    <2> 		cmp byte [termcopyon], 0
  9128 000064F9 7532                <2> 		jne nocleartitlebarpos
  9129 000064FB 8B3D[14450000]      <2> 		mov edi, [physbaseptr]
  9130 00006501 31D2                <2> 		xor edx, edx
  9131 00006503 668B15[BA630000]    <2> 		mov dx, [winvcopystx]
  9132 0000650A 01D7                <2> 		add edi, edx
  9133 0000650C 31C9                <2> 		xor ecx, ecx
  9134 0000650E 668B0D[BC630000]    <2> 		mov cx, [winvcopysty]
  9135 00006515 6681E91000          <2> 		sub cx, 16
  9136 0000651A 6681F90000          <2> 		cmp cx, 0
  9137 0000651F 740C                <2> 		je nocleartitlebarpos
  9138                              <2> 	cleartitlebarpos:
  9139 00006521 31C0                <2> 		xor eax, eax
  9140 00006523 66A1[EC450000]      <2> 		mov ax, [resolutionx2]
  9141 00006529 F7E1                <2> 		mul ecx
  9142 0000652B 01C7                <2> 		add edi, eax
  9143                              <2> 	nocleartitlebarpos:
  9144 0000652D 66B91000            <2> 		mov cx, 16
  9145 00006531 668B15[BE630000]    <2> 		mov dx, [winvcopydx]
  9146 00006538 6681F90000          <2> 		cmp cx, 0
  9147 0000653D 0F8448000000        <2> 		je near canceltitlebarput
  9148 00006543 6681FA0000          <2> 		cmp dx, 0
  9149 00006548 0F843D000000        <2> 		je near canceltitlebarput
  9150                              <2> 	titlebarput:
  9151 0000654E 66A1[C2630000]      <2> 		mov ax, [windowcolor]
  9152 00006554 668907              <2> 		mov [edi], ax
  9153 00006557 6681EA0200          <2> 		sub dx, 2
  9154 0000655C 81C702000000        <2> 		add edi, 2
  9155 00006562 6681FA0000          <2> 		cmp dx, 0
  9156 00006567 75E5                <2> 		jne titlebarput
  9157 00006569 31D2                <2> 		xor edx, edx
  9158 0000656B 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  9159 00006572 6649                <2> 		dec cx
  9160 00006574 662B15[BE630000]    <2> 		sub dx, [winvcopydx]
  9161 0000657B 01D7                <2> 		add edi, edx
  9162 0000657D 668B15[BE630000]    <2> 		mov dx, [winvcopydx]
  9163 00006584 6681F90000          <2> 		cmp cx, 0
  9164 00006589 75C3                <2> 		jne titlebarput
  9165                              <2> 	canceltitlebarput:
  9166 0000658B 893D[C6630000]      <2> 		mov [windowbufloc], edi
  9167 00006591 803D[3F160000]02    <2> 		cmp byte [termcopyon], 2
  9168 00006598 0F841C010000        <2> 		je near winvcpst
  9169 0000659E 668B1D[0D5B0000]    <2> 		mov bx, [background]
  9170 000065A5 6653                <2> 		push bx
  9171 000065A7 6631DB              <2> 		xor bx, bx
  9172 000065AA 66891D[0D5B0000]    <2> 		mov [background], bx
  9173 000065B1 6631C0              <2> 		xor ax, ax
  9174 000065B4 81C610000000        <2> 		add esi, 16
  9175 000065BA 668B15[BA630000]    <2> 		mov dx, [winvcopystx]
  9176 000065C1 668B0D[BC630000]    <2> 		mov cx, [winvcopysty]
  9177 000065C8 6681E91000          <2> 		sub cx, 16
  9178 000065CD 668B1D[C2630000]    <2> 		mov bx, [windowcolor]
  9179 000065D4 C605[31690000]01    <2> 		mov byte [mouseselecton], 1
  9180 000065DB E882FBFFFF          <2> 		call showstring2	;Show window title
  9181 000065E0 8B35[421E0000]      <2> 		mov esi, [usercache]
  9182 000065E6 6681C21000          <2> 		add dx, 16
  9183 000065EB C605[31690000]01    <2> 		mov byte [mouseselecton], 1
  9184 000065F2 E86BFBFFFF          <2> 		call showstring2	;Show user name
  9185 000065F7 BE[BB710000]        <2> 		mov esi, computer
  9186 000065FC C605[31690000]01    <2> 		mov byte [mouseselecton], 1
  9187 00006603 E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9188 00006608 66B85800            <2> 		mov ax, "X"
  9189 0000660C 66BB00F8            <2> 		mov bx, 1111100000000000b
  9190 00006610 668B15[BA630000]    <2> 		mov dx, [winvcopystx]
  9191 00006617 668B0D[BC630000]    <2> 		mov cx, [winvcopysty]
  9192 0000661E 6681E91000          <2> 		sub cx, 16
  9193 00006623 6681EA1000          <2> 		sub dx, 16
  9194 00006628 660315[BE630000]    <2> 		add dx, [winvcopydx]
  9195 0000662F C605[31690000]01    <2> 		mov byte [mouseselecton], 1
  9196 00006636 663B15[EC450000]    <2> 		cmp dx, [resolutionx2]
  9197 0000663D 7305                <2> 		jae .nox
  9198 0000663F E897FBFFFF          <2> 		call showfontvesa
  9199                              <2> .nox:
  9200 00006644 668B1D[0D5B0000]    <2> 		mov bx, [background]
  9201 0000664B 6681EA1800          <2> 		sub dx, 24
  9202 00006650 66B82B00            <2> 		mov ax, "+"
  9203 00006654 66BBE007            <2> 		mov bx, 0000011111100000b
  9204 00006658 C605[31690000]01    <2> 		mov byte [mouseselecton], 1
  9205 0000665F 663B15[EC450000]    <2> 		cmp dx, [resolutionx2]
  9206 00006666 7305                <2> 		jae .noplus
  9207 00006668 E86EFBFFFF          <2> 		call showfontvesa
  9208                              <2> .noplus:
  9209 0000666D 6681EA1800          <2> 		sub dx, 24
  9210 00006672 66B82D00            <2> 		mov ax, "-"
  9211 00006676 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9212 0000667A C605[31690000]01    <2> 		mov byte [mouseselecton], 1
  9213 00006681 663B15[EC450000]    <2> 		cmp dx, [resolutionx2]
  9214 00006688 7305                <2> 		jae .nominus
  9215 0000668A E84CFBFFFF          <2> 		call showfontvesa
  9216                              <2> .nominus:
  9217 0000668F 6681EA1800          <2> 		sub dx, 24
  9218 00006694 66B83F00            <2> 		mov ax, "?"
  9219 00006698 66BB1F00            <2> 		mov bx, 0000000000011111b
  9220 0000669C C605[31690000]01    <2> 		mov byte [mouseselecton], 1
  9221 000066A3 663B15[EC450000]    <2> 		cmp dx, [resolutionx2]
  9222 000066AA 7305                <2> 		jae .noquestion
  9223 000066AC E82AFBFFFF          <2> 		call showfontvesa
  9224                              <2> .noquestion:
  9225 000066B1 665B                <2> 		pop bx
  9226 000066B3 66891D[0D5B0000]    <2> 		mov [background], bx
  9227                              <2> 	winvcpst:
  9228 000066BA C3                  <2> 		ret
  9229                              <2> 
  9230                              <2> 	windowvideocopy:
  9231 000066BB 8B35[D2630000]      <2> 		mov esi, [windowinfobuf]
  9232 000066C1 668B16              <2> 		mov dx, [esi]
  9233 000066C4 668B4E02            <2> 		mov cx, [esi + 2]
  9234 000066C8 8B7E04              <2> 		mov edi, [esi + 4]
  9235 000066CB 893D[C2630000]      <2> 		mov [windowcolor], edi
  9236 000066D1 8B7E08              <2> 		mov edi, [esi + 8]
  9237 000066D4 8B5E0C              <2> 		mov ebx, [esi + 12]
  9238 000066D7 893D[CA630000]      <2> 		mov [windowvideobuf], edi
  9239 000066DD 891D[CE630000]      <2> 		mov [windowvideobuf2], ebx
  9240 000066E3 31C0                <2> 		xor eax, eax
  9241 000066E5 31DB                <2> 		xor ebx, ebx
  9242 000066E7 6689D0              <2> 		mov ax, dx
  9243 000066EA 6689CB              <2> 		mov bx, cx
  9244 000066ED 66C1E803            <2> 		shr ax, 3
  9245 000066F1 66C1EB04            <2> 		shr bx, 4
  9246 000066F5 66A3[D6630000]      <2> 		mov [termcol], ax
  9247 000066FB A2[33180000]        <2> 		mov [charxy], al
  9248 00006700 881D[34180000]      <2> 		mov [charxy + 1], bl
  9249 00006706 8B3D[C6630000]      <2> 		mov edi, [windowbufloc]
  9250 0000670C 3B3D[14450000]      <2> 		cmp edi, [physbaseptr]
  9251 00006712 0F8334000000        <2> 		jae near windowvideocopyset
  9252 00006718 31C9                <2> 		xor ecx, ecx
  9253 0000671A 31D2                <2> 		xor edx, edx
  9254 0000671C 668B15[BA630000]    <2> 		mov dx, [winvcopystx]
  9255 00006723 668B0D[BC630000]    <2> 		mov cx, [winvcopysty]
  9256 0000672A 8B3D[14450000]      <2> 		mov edi, [physbaseptr]
  9257 00006730 01D7                <2> 		add edi, edx
  9258 00006732 81F900000000        <2> 		cmp ecx, 0
  9259 00006738 7412                <2> 		je windowvideocopyset
  9260                              <2> 	yrescopylp:
  9261 0000673A 31C0                <2> 		xor eax, eax
  9262 0000673C 66A1[EC450000]      <2> 		mov ax, [resolutionx2]
  9263 00006742 F7E1                <2> 		mul ecx
  9264 00006744 01C7                <2> 		add edi, eax
  9265 00006746 893D[C6630000]      <2> 		mov [windowbufloc], edi
  9266                              <2> 	windowvideocopyset:
  9267 0000674C 6631C9              <2> 		xor cx, cx
  9268 0000674F 6649                <2> 		dec cx
  9269 00006751 66890D[25690000]    <2> 		mov [charposline], cx
  9270 00006758 89FE                <2> 		mov esi, edi
  9271 0000675A 81EE10000000        <2> 		sub esi, 16
  9272 00006760 31D2                <2> 		xor edx, edx
  9273 00006762 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  9274 00006769 C1E204              <2> 		shl edx, 4
  9275 0000676C 01D6                <2> 		add esi, edx
  9276 0000676E 8B3D[CA630000]      <2> 		mov edi, [windowvideobuf]
  9277 00006774 81EF04000000        <2> 		sub edi, 4
  9278 0000677A 893D[27690000]      <2> 		mov [charposvbuf], edi
  9279 00006780 E97C000000          <2> 		jmp nextcharwin
  9280                              <2> 	win.write:	;adjusted this to use alpha
  9281                              <2> 				;5R, 6G, 5B
  9282                              <2> %ifdef gui.alphablending
  9283                              <2> 		push esi
  9284                              <2> 		push bx
  9285                              <2> 		push cx
  9286                              <2> 		push dx
  9287                              <2> %ifdef gui.background
  9288                              <2> 		mov esi, edi
  9289                              <2> 		sub esi, [physbaseptr]
  9290                              <2> 		add esi, [backgroundimage]
  9291                              <2> 		cmp dword [backgroundimage], 0
  9292                              <2> 		jne .red
  9293                              <2> %endif
  9294                              <2> 		mov esi, background
  9295                              <2> 	.red:
  9296                              <2> 		mov cx, [esi]
  9297                              <2> 		shr cx, 11
  9298                              <2> 		mov bx, ax
  9299                              <2> 		shr bx, 11
  9300                              <2> 		add cx, bx
  9301                              <2> 		add cx, bx
  9302                              <2> 		add cx, bx
  9303                              <2> 		shr cx, 2
  9304                              <2> 		shl cx, 11
  9305                              <2> 		mov dx, cx
  9306                              <2> 	.green:
  9307                              <2> 		mov cx, [esi]
  9308                              <2> 		shl cx, 5
  9309                              <2> 		shr cx, 10
  9310                              <2> 		mov bx, ax
  9311                              <2> 		shl bx, 5
  9312                              <2> 		shr bx, 10
  9313                              <2> 		add cx, bx
  9314                              <2> 		add cx, bx
  9315                              <2> 		add cx, bx
  9316                              <2> 		shr cx, 2
  9317                              <2> 		shl cx, 5
  9318                              <2> 		add dx, cx
  9319                              <2> 	.blue:
  9320                              <2> 		mov cx, [esi]
  9321                              <2> 		shl cx, 11
  9322                              <2> 		shr cx, 11
  9323                              <2> 		mov bx, ax
  9324                              <2> 		shl bx, 11
  9325                              <2> 		shr bx, 11
  9326                              <2> 		add cx, bx
  9327                              <2> 		add cx, bx
  9328                              <2> 		add cx, bx
  9329                              <2> 		shr cx, 2
  9330                              <2> 		add dx, cx
  9331                              <2> 		mov [edi], dx
  9332                              <2> 		pop dx
  9333                              <2> 		pop cx
  9334                              <2> 		pop bx
  9335                              <2> 		pop esi
  9336                              <2> %else
  9337 00006785 668907              <2> 		mov [edi], ax
  9338                              <2> %endif
  9339 00006788 C3                  <2> 		ret
  9340                              <2> 	copywindow:
  9341 00006789 B201                <2> 		mov dl, 1
  9342 0000678B D0C6                <2> 		rol dh, 1
  9343 0000678D 20F2                <2> 		and dl, dh
  9344 0000678F 66813D[CC610000]80- <2> 		cmp word [colorcache], 0x80
  9345 00006797 00                  <2>
  9346 00006798 7320                <2> 		jae switchwincolors
  9347 0000679A 66A1[C4630000]      <2> 		mov ax, [windowcolor + 2]
  9348 000067A0 E8E0FFFFFF          <2> 		call win.write
  9349 000067A5 80FA00              <2> 		cmp dl, 0
  9350 000067A8 742B                <2> 		je nowritewin
  9351 000067AA 66A1[C2630000]      <2> 		mov ax, [windowcolor]
  9352 000067B0 E8D0FFFFFF          <2> 		call win.write
  9353 000067B5 E91B000000          <2> 		jmp nowritewin
  9354                              <2> 	switchwincolors:
  9355 000067BA 66A1[C2630000]      <2> 		mov ax, [windowcolor]
  9356 000067C0 E8C0FFFFFF          <2> 		call win.write
  9357 000067C5 80FA00              <2> 		cmp dl, 0
  9358 000067C8 740B                <2> 		je nowritewin
  9359 000067CA 66A1[C4630000]      <2> 		mov ax, [windowcolor + 2]
  9360 000067D0 E8B0FFFFFF          <2> 		call win.write
  9361                              <2> 	nowritewin:
  9362 000067D5 81C702000000        <2> 		add edi, 2
  9363 000067DB FEC1                <2> 		inc cl
  9364 000067DD 80F908              <2> 		cmp cl, 8
  9365 000067E0 75A7                <2> 		jne copywindow
  9366 000067E2 43                  <2> 		inc ebx
  9367 000067E3 30C9                <2> 		xor cl, cl
  9368 000067E5 31D2                <2> 		xor edx, edx
  9369 000067E7 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  9370 000067EE 01D6                <2> 		add esi, edx
  9371 000067F0 89F7                <2> 		mov edi, esi
  9372 000067F2 8AB3[3A740000]      <2> 		mov dh, [fonts + ebx]
  9373 000067F8 D0CE                <2> 		ror dh, 1
  9374 000067FA FEC5                <2> 		inc ch
  9375 000067FC 80FD10              <2> 		cmp ch, 16
  9376 000067FF 7588                <2> 		jne copywindow
  9377                              <2> 	nextcharwin:
  9378 00006801 6631C9              <2> 		xor cx, cx
  9379 00006804 8B3D[27690000]      <2> 		mov edi, [charposvbuf]
  9380 0000680A 81C704000000        <2> 		add edi, 4
  9381 00006810 3B3D[D8630000]      <2> 		cmp edi, [wincopyendpos]
  9382 00006816 0F83F2000000        <2> 		jae near donewincopynow
  9383 0000681C 668B5F02            <2> 		mov bx, [edi + 2]
  9384 00006820 6681FB0000          <2> 		cmp bx, 0
  9385 00006825 7508                <2> 		jne nofixcolorwin
  9386 00006827 66BB0700            <2> 		mov bx, 7
  9387 0000682B 66895F02            <2> 		mov [edi + 2], bx
  9388                              <2> 	nofixcolorwin:
  9389 0000682F 66891D[CC610000]    <2> 		mov [colorcache], bx
  9390 00006836 8B1F                <2> 		mov ebx, [edi]
  9391 00006838 893D[27690000]      <2> 		mov [charposvbuf], edi
  9392 0000683E 813D[CE630000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9393 00006846 0000                <2>
  9394 00006848 7455                <2> 		je noskipcharcopy
  9395 0000684A 2B3D[CA630000]      <2> 		sub edi, [windowvideobuf]
  9396 00006850 033D[CE630000]      <2> 		add edi, [windowvideobuf2]
  9397 00006856 8B07                <2> 		mov eax, [edi]
  9398 00006858 39D8                <2> 		cmp eax, ebx
  9399 0000685A 7543                <2> 		jne noskipcharcopy
  9400                              <2> 	skipcharcopy:
  9401 0000685C 81C610000000        <2> 		add esi, 16
  9402 00006862 668B0D[25690000]    <2> 		mov cx, [charposline]
  9403 00006869 6641                <2> 		inc cx
  9404 0000686B 66890D[25690000]    <2> 		mov [charposline], cx
  9405 00006872 663B0D[D6630000]    <2> 		cmp cx, [termcol]
  9406 00006879 7286                <2> 		jb nextcharwin
  9407 0000687B 6631C9              <2> 		xor cx, cx
  9408 0000687E 66890D[25690000]    <2> 		mov [charposline], cx
  9409 00006885 31D2                <2> 		xor edx, edx
  9410 00006887 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  9411 0000688E C1E204              <2> 		shl edx, 4
  9412 00006891 662B15[BE630000]    <2> 		sub dx, [winvcopydx]
  9413 00006898 01D6                <2> 		add esi, edx
  9414 0000689A E962FFFFFF          <2> 		jmp nextcharwin
  9415                              <2> 	noskipcharcopy:
  9416 0000689F 891F                <2> 		mov [edi], ebx
  9417 000068A1 8B3D[27690000]      <2> 		mov edi, [charposvbuf]
  9418 000068A7 C1E310              <2> 		shl ebx, 16
  9419 000068AA C1EB0C              <2> 		shr ebx, 12
  9420 000068AD 31D2                <2> 		xor edx, edx
  9421 000068AF 668B15[EC450000]    <2> 		mov dx, [resolutionx2]
  9422 000068B6 C1E204              <2> 		shl edx, 4
  9423 000068B9 29D6                <2> 		sub esi, edx
  9424 000068BB 81C610000000        <2> 		add esi, 16
  9425 000068C1 89F7                <2> 		mov edi, esi
  9426 000068C3 668B0D[25690000]    <2> 		mov cx, [charposline]
  9427 000068CA 6641                <2> 		inc cx
  9428 000068CC 663B0D[D6630000]    <2> 		cmp cx, [termcol]
  9429 000068D3 7317                <2> 		jae fixwindowcopy
  9430 000068D5 66890D[25690000]    <2> 		mov [charposline], cx
  9431 000068DC 6631C9              <2> 		xor cx, cx
  9432 000068DF 8AB3[3A740000]      <2> 		mov dh, [fonts + ebx]
  9433 000068E5 D0CE                <2> 		ror dh, 1
  9434 000068E7 E99DFEFFFF          <2> 		jmp copywindow
  9435                              <2> fixwindowcopy:
  9436 000068EC 6631C9              <2> 		xor cx, cx
  9437 000068EF 66890D[25690000]    <2> 		mov [charposline], cx
  9438 000068F6 662B15[BE630000]    <2> 		sub dx, [winvcopydx]
  9439 000068FD 01D6                <2> 		add esi, edx
  9440 000068FF 89F7                <2> 		mov edi, esi
  9441 00006901 8AB3[3A740000]      <2> 		mov dh, [fonts + ebx]
  9442 00006907 D0CE                <2> 		ror dh, 1
  9443 00006909 E97BFEFFFF          <2> 		jmp copywindow
  9444                              <2> donewincopynow:
  9445 0000690E 803D[3F160000]01    <2> 		cmp byte [termcopyon], 1
  9446 00006915 7506                <2> 		jne forgetresetstuff
  9447 00006917 E820B2FFFF          <2> 		call switchtermcursor
  9448 0000691C 61                  <2> 		popa
  9449                              <2> forgetresetstuff:
  9450 0000691D C605[3F160000]00    <2> 		mov byte [termcopyon], 0
  9451 00006924 C3                  <2> 		ret
  9452                              <2> 		
  9453 00006925 0000                <2> charposline dw 0
  9454 00006927 00000000            <2> charposvbuf dw 0,0
  9455                              <1> 				
  9456 0000692B 00                  <1> copygui db 0
  9457 0000692C 00                  <1> graphicsset db 0
  9458 0000692D 0000                <1> graphicspos db 0,0
  9459 0000692F 00                  <1> showcursorfonton db 0
  9460 00006930 00                  <1> savefonton db 0
  9461 00006931 00                  <1> mouseselecton db 0
  9462                              <1> 
  9463 00006932 00                  <1> pbutton db 0
  9464 00006933 00                  <1> pLBUTTON db 0
  9465 00006934 00                  <1> pRBUTTON db 0
  9466 00006935 00000000            <1> dragging dw 0,0
  9467 00006939 0000000000000000    <1> lastpos dw 0,0,0,0
  9468 00006941 00000000            <1> colorbuf dw 0,0
  9469                              <1> 	
  9470                              <1> 	clickicon:
  9471 00006945 B001                <1> 		mov al, 1
  9472 00006947 A2[32690000]        <1> 		mov [pbutton], al
  9473 0000694C A0[33690000]        <1> 		mov al, [pLBUTTON]
  9474 00006951 2205[F3480000]      <1> 		and al, [LBUTTON]
  9475 00006957 8A25[34690000]      <1> 		mov ah, [pRBUTTON]
  9476 0000695D 2225[F4480000]      <1> 		and ah, [RBUTTON]
  9477 00006963 08E0                <1> 		or al, ah
  9478 00006965 3C00                <1> 		cmp al, 0
  9479 00006967 741B                <1> 		je nodragclick
  9480 00006969 813D[35690000]0100- <1> 		cmp dword [dragging], 1
  9481 00006971 0000                <1>
  9482 00006973 732F                <1> 		jae dragclick
  9483 00006975 C705[35690000]0100- <1> 		mov dword [dragging], 1
  9484 0000697D 0000                <1>
  9485 0000697F E920000000          <1> 		jmp dragclick
  9486                              <1> 	nodragclick:
  9487 00006984 31C0                <1> 		xor eax, eax
  9488 00006986 A3[35690000]        <1> 		mov dword [dragging], eax
  9489 0000698B A2[32690000]        <1> 		mov [pbutton], al
  9490 00006990 A0[F3480000]        <1> 		mov al, [LBUTTON]
  9491 00006995 A2[33690000]        <1> 		mov [pLBUTTON], al
  9492 0000699A A0[F4480000]        <1> 		mov al, [RBUTTON]
  9493 0000699F A2[34690000]        <1> 		mov [pRBUTTON], al
  9494                              <1> 	dragclick:
  9495 000069A4 6631C0              <1> 		xor ax, ax
  9496 000069A7 BE[E5A40300]        <1> 		mov esi, graphicstable
  9497 000069AC C705[85710000]0000- <1> 		mov dword [codepointer], 0
  9498 000069B4 0000                <1>
  9499                              <1> 	clicon2:
  9500 000069B6 31D2                <1> 		xor edx, edx
  9501 000069B8 31C9                <1> 		xor ecx, ecx
  9502 000069BA 66813E0100          <1> 		cmp word [esi], 1
  9503 000069BF 0F841B000000        <1> 		je near iconselect
  9504 000069C5 66813E0200          <1> 		cmp word [esi], 2
  9505 000069CA 0F8472010000        <1> 		je near textselected
  9506 000069D0 66813E0300          <1> 		cmp word [esi], 3
  9507 000069D5 0F84C7020000        <1> 		je near windowselect
  9508 000069DB E910040000          <1> 		jmp nexticonsel
  9509                              <1> 	iconselect:
  9510 000069E0 668B5606            <1> 		mov dx, [esi + 6]
  9511 000069E4 6689D0              <1> 		mov ax, dx
  9512 000069E7 668B4E08            <1> 		mov cx, [esi + 8]
  9513 000069EB 6689CB              <1> 		mov bx, cx
  9514 000069EE 6681C32000          <1> 		add bx, 32
  9515 000069F3 6601D0              <1> 		add ax, dx
  9516 000069F6 813D[35690000]0100- <1> 		cmp dword [dragging], 1
  9517 000069FE 0000                <1>
  9518 00006A00 746F                <1> 		je dragicon
  9519 00006A02 813D[35690000]0000- <1> 		cmp dword [dragging], 0
  9520 00006A0A 0000                <1>
  9521 00006A0C 7411                <1> 		je nodragiconcheck
  9522 00006A0E 3935[35690000]      <1> 		cmp dword [dragging], esi
  9523 00006A14 0F85D6030000        <1> 		jne near nexticonsel
  9524 00006A1A E952000000          <1> 		jmp dragicon
  9525                              <1> 	nodragiconcheck:
  9526 00006A1F 663905[E2470000]    <1> 		cmp [mousecursorposition], ax
  9527 00006A26 0F82C4030000        <1> 		jb near nexticonsel
  9528 00006A2C 66054000            <1> 		add ax, 64
  9529 00006A30 663905[E2470000]    <1> 		cmp [mousecursorposition], ax
  9530 00006A37 0F87B3030000        <1> 		ja near nexticonsel
  9531 00006A3D 6629D0              <1> 		sub ax, dx
  9532 00006A40 66390D[E4470000]    <1> 		cmp [mousecursorposition + 2], cx
  9533 00006A47 0F82A3030000        <1> 		jb near nexticonsel
  9534 00006A4D 66391D[E4470000]    <1> 		cmp [mousecursorposition + 2], bx
  9535 00006A54 0F8796030000        <1> 		ja near nexticonsel
  9536 00006A5A 668B460A            <1> 		mov ax, [esi + 10]
  9537 00006A5E 66250100            <1> 		and ax, 1
  9538 00006A62 663D0100            <1> 		cmp ax, 1
  9539 00006A66 0F84B6000000        <1> 		je near unselecticon
  9540 00006A6C E98D000000          <1> 		jmp nodragicon
  9541                              <1> 	dragicon:
  9542 00006A71 663905[DE470000]    <1> 		cmp [lastmouseposition], ax
  9543 00006A78 0F8272030000        <1> 		jb near nexticonsel
  9544 00006A7E 66054000            <1> 		add ax, 64
  9545 00006A82 663905[DE470000]    <1> 		cmp [lastmouseposition], ax
  9546 00006A89 0F8761030000        <1> 		ja near nexticonsel
  9547 00006A8F 6629D0              <1> 		sub ax, dx
  9548 00006A92 66390D[E0470000]    <1> 		cmp [lastmouseposition + 2], cx
  9549 00006A99 0F8251030000        <1> 		jb near nexticonsel
  9550 00006A9F 66391D[E0470000]    <1> 		cmp [lastmouseposition + 2], bx
  9551 00006AA6 0F8744030000        <1> 		ja near nexticonsel
  9552 00006AAC 668B460A            <1> 		mov ax, [esi + 10]
  9553 00006AB0 2410                <1> 		and al, 00010000b
  9554 00006AB2 3C10                <1> 		cmp al, 00010000b
  9555 00006AB4 7448                <1> 		je nodragicon
  9556 00006AB6 8935[35690000]      <1> 		mov [dragging], esi
  9557 00006ABC 66D1E2              <1> 		shl dx, 1
  9558 00006ABF 662B15[DE470000]    <1> 		sub dx, [lastmouseposition]
  9559 00006AC6 660315[E2470000]    <1> 		add dx, [mousecursorposition]
  9560 00006ACD 66D1EA              <1> 		shr dx, 1
  9561 00006AD0 66030D[E4470000]    <1> 		add cx, [mousecursorposition + 2]
  9562 00006AD7 662B0D[E0470000]    <1> 		sub cx, [lastmouseposition + 2]
  9563 00006ADE 663B15[EC450000]    <1> 		cmp dx, [resolutionx2]
  9564 00006AE5 7607                <1> 		jbe chkyresdrgicn
  9565 00006AE7 668B15[E2470000]    <1> 		mov dx, [mousecursorposition]
  9566                              <1> 	chkyresdrgicn:
  9567 00006AEE 663B0D[00450000]    <1> 		cmp cx, [resolutiony]
  9568 00006AF5 7607                <1> 		jbe nodragicon
  9569 00006AF7 668B0D[E4470000]    <1> 		mov cx, [mousecursorposition + 2]
  9570                              <1> 	nodragicon:
  9571 00006AFE 66814E0A0100        <1> 		or word [esi + 10], 1
  9572 00006B04 8B5E0C              <1> 		mov ebx, [esi + 12]
  9573 00006B07 668B460A            <1> 		mov ax, [esi + 10]
  9574 00006B0B 8B7602              <1> 		mov esi, [esi + 2]
  9575 00006B0E C705[85710000]0000- <1> 		mov dword [codepointer], 0
  9576 00006B16 0000                <1>
  9577 00006B18 E8A3EDFFFF          <1> 		call showicon
  9578 00006B1D E9E7020000          <1> 		jmp doneiconsel
  9579                              <1> 	unselecticon:
  9580 00006B22 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9581 00006B28 8B5E0C              <1> 		mov ebx, [esi + 12]
  9582 00006B2B 668B460A            <1> 		mov ax, [esi + 10]
  9583 00006B2F 8B7602              <1> 		mov esi, [esi + 2]
  9584 00006B32 891D[85710000]      <1> 		mov [codepointer], ebx
  9585 00006B38 E883EDFFFF          <1> 		call showicon
  9586 00006B3D E9C7020000          <1> 		jmp doneiconsel
  9587                              <1> 	textselected:
  9588 00006B42 8B5E02              <1> 		mov ebx, [esi + 2]
  9589 00006B45 668B5606            <1> 		mov dx, [esi + 6]
  9590 00006B49 6689D0              <1> 		mov ax, dx
  9591 00006B4C 668B4E08            <1> 		mov cx, [esi + 8]
  9592                              <1> 	lengthtesttext:
  9593 00006B50 803B00              <1> 		cmp byte [ebx], 0
  9594 00006B53 7407                <1> 		je donetesttextlength
  9595 00006B55 43                  <1> 		inc ebx
  9596 00006B56 66051000            <1> 		add ax, 16
  9597 00006B5A EBF4                <1> 		jmp lengthtesttext
  9598                              <1> 	donetesttextlength:
  9599 00006B5C 6689CB              <1> 		mov bx, cx
  9600 00006B5F 6681C30F00          <1> 		add bx, 15
  9601 00006B64 813D[35690000]0100- <1> 		cmp dword [dragging], 1
  9602 00006B6C 0000                <1>
  9603 00006B6E 7468                <1> 		je dragtext
  9604 00006B70 813D[35690000]0000- <1> 		cmp dword [dragging], 0
  9605 00006B78 0000                <1>
  9606 00006B7A 7411                <1> 		je nodragtextcheck
  9607 00006B7C 3935[35690000]      <1> 		cmp dword [dragging], esi
  9608 00006B82 0F8568020000        <1> 		jne near nexticonsel
  9609 00006B88 E94B000000          <1> 		jmp dragtext
  9610                              <1> 	nodragtextcheck:
  9611 00006B8D 663915[E2470000]    <1> 		cmp [mousecursorposition], dx
  9612 00006B94 0F8256020000        <1> 		jb near nexticonsel
  9613 00006B9A 663905[E2470000]    <1> 		cmp [mousecursorposition], ax
  9614 00006BA1 0F8749020000        <1> 		ja near nexticonsel
  9615 00006BA7 66390D[E4470000]    <1> 		cmp [mousecursorposition + 2], cx
  9616 00006BAE 0F823C020000        <1> 		jb near nexticonsel
  9617 00006BB4 66391D[E4470000]    <1> 		cmp [mousecursorposition + 2], bx
  9618 00006BBB 0F872F020000        <1> 		ja near nexticonsel
  9619 00006BC1 668B460A            <1> 		mov ax, [esi + 10]
  9620 00006BC5 66250100            <1> 		and ax, 1
  9621 00006BC9 663D0100            <1> 		cmp ax, 1
  9622 00006BCD 0F84AB000000        <1> 		je near unselecttext
  9623 00006BD3 E986000000          <1> 		jmp nodragtext
  9624                              <1> 	dragtext:
  9625 00006BD8 663915[DE470000]    <1> 		cmp [lastmouseposition], dx
  9626 00006BDF 0F820B020000        <1> 		jb near nexticonsel
  9627 00006BE5 663905[DE470000]    <1> 		cmp [lastmouseposition], ax
  9628 00006BEC 0F87FE010000        <1> 		ja near nexticonsel
  9629 00006BF2 66390D[E0470000]    <1> 		cmp [lastmouseposition + 2], cx
  9630 00006BF9 0F82F1010000        <1> 		jb near nexticonsel
  9631 00006BFF 66391D[E0470000]    <1> 		cmp [lastmouseposition + 2], bx
  9632 00006C06 0F87E4010000        <1> 		ja near nexticonsel
  9633 00006C0C 668B460A            <1> 		mov ax, [esi + 10]
  9634 00006C10 2410                <1> 		and al, 00010000b
  9635 00006C12 663D1000            <1> 		cmp ax, 00010000b
  9636 00006C16 0F8442000000        <1> 		je near nodragtext
  9637 00006C1C 8935[35690000]      <1> 		mov [dragging], esi
  9638 00006C22 662B15[DE470000]    <1> 		sub dx, [lastmouseposition]
  9639 00006C29 660315[E2470000]    <1> 		add dx, [mousecursorposition]
  9640 00006C30 66030D[E4470000]    <1> 		add cx, [mousecursorposition + 2]
  9641 00006C37 662B0D[E0470000]    <1> 		sub cx, [lastmouseposition + 2]
  9642 00006C3E 663B15[EC450000]    <1> 		cmp dx, [resolutionx2]
  9643 00006C45 7607                <1> 		jbe chkyresdrgtxt
  9644 00006C47 668B15[E2470000]    <1> 		mov dx, [mousecursorposition]
  9645                              <1> 	chkyresdrgtxt:
  9646 00006C4E 663B0D[00450000]    <1> 		cmp cx, [resolutiony]
  9647 00006C55 7607                <1> 		jbe nodragtext
  9648 00006C57 668B0D[E4470000]    <1> 		mov cx, [mousecursorposition + 2]
  9649                              <1> 	nodragtext:
  9650 00006C5E 66814E0A0100        <1> 		or word [esi + 10], 1
  9651 00006C64 8B5E0C              <1> 		mov ebx, [esi + 12]
  9652 00006C67 891D[85710000]      <1> 		mov [codepointer], ebx
  9653 00006C6D 668B460A            <1> 		mov ax, [esi + 10]
  9654 00006C71 8B7602              <1> 		mov esi, [esi + 2]
  9655 00006C74 E8D6F4FFFF          <1> 		call showstring
  9656 00006C79 E98B010000          <1> 		jmp doneiconsel
  9657                              <1> 	unselecttext:
  9658 00006C7E 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9659 00006C84 8B5E0C              <1> 		mov ebx, [esi + 12]
  9660 00006C87 668B460A            <1> 		mov ax, [esi + 10]
  9661 00006C8B 8B7602              <1> 		mov esi, [esi + 2]
  9662 00006C8E C705[85710000]0000- <1> 		mov dword [codepointer], 0
  9663 00006C96 0000                <1>
  9664 00006C98 E8B2F4FFFF          <1> 		call showstring
  9665 00006C9D E967010000          <1> 		jmp doneiconsel
  9666                              <1> windowselect:
  9667 00006CA2 8B7E02              <1> 		mov edi, [esi + 2]
  9668 00006CA5 668B5606            <1> 		mov dx, [esi + 6]
  9669 00006CA9 6689D0              <1> 		mov ax, dx
  9670 00006CAC 668B4E08            <1> 		mov cx, [esi + 8]
  9671 00006CB0 6689CB              <1> 		mov bx, cx
  9672 00006CB3 6681C31000          <1> 		add bx, 16
  9673 00006CB8 813D[35690000]0100- <1> 		cmp dword [dragging], 1
  9674 00006CC0 0000                <1>
  9675 00006CC2 746D                <1> 		je dragwin
  9676 00006CC4 813D[35690000]0000- <1> 		cmp dword [dragging], 0
  9677 00006CCC 0000                <1>
  9678 00006CCE 7411                <1> 		je nodragwincheck
  9679 00006CD0 3935[35690000]      <1> 		cmp dword [dragging], esi
  9680 00006CD6 0F8514010000        <1> 		jne near nexticonsel
  9681 00006CDC E950000000          <1> 		jmp dragwin
  9682                              <1> 	nodragwincheck:
  9683 00006CE1 663905[E2470000]    <1> 		cmp [mousecursorposition], ax
  9684 00006CE8 0F8202010000        <1> 		jb near nexticonsel
  9685 00006CEE 660307              <1> 		add ax, [edi]
  9686 00006CF1 660307              <1> 		add ax, [edi]
  9687 00006CF4 663905[E2470000]    <1> 		cmp [mousecursorposition], ax
  9688 00006CFB 0F87EF000000        <1> 		ja near nexticonsel
  9689 00006D01 66390D[E4470000]    <1> 		cmp [mousecursorposition + 2], cx
  9690 00006D08 0F82E2000000        <1> 		jb near nexticonsel
  9691 00006D0E 66391D[E4470000]    <1> 		cmp [mousecursorposition + 2], bx
  9692 00006D15 0F87D5000000        <1> 		ja near nexticonsel
  9693 00006D1B 662D1400            <1> 		sub ax, 20
  9694 00006D1F 663905[E2470000]    <1> 		cmp [mousecursorposition], ax
  9695 00006D26 0F87A4000000        <1> 		ja near killwin
  9696 00006D2C E98B000000          <1> 		jmp nodragwin
  9697                              <1> 	dragwin:
  9698 00006D31 663905[DE470000]    <1> 		cmp [lastmouseposition], ax
  9699 00006D38 0F82B2000000        <1> 		jb near nexticonsel
  9700 00006D3E 660307              <1> 		add ax, [edi]
  9701 00006D41 660307              <1> 		add ax, [edi]
  9702 00006D44 663905[DE470000]    <1> 		cmp [lastmouseposition], ax
  9703 00006D4B 0F879F000000        <1> 		ja near nexticonsel
  9704 00006D51 66390D[E0470000]    <1> 		cmp [lastmouseposition + 2], cx
  9705 00006D58 0F8292000000        <1> 		jb near nexticonsel
  9706 00006D5E 66391D[E0470000]    <1> 		cmp [lastmouseposition + 2], bx
  9707 00006D65 0F8785000000        <1> 		ja near nexticonsel
  9708 00006D6B 8935[35690000]      <1> 		mov [dragging], esi
  9709 00006D71 803D[996E0000]01    <1> 		cmp byte [windrag], 1
  9710 00006D78 7706                <1> 		ja .nochangewindrag
  9711 00006D7A FE05[996E0000]      <1> 		inc byte [windrag]
  9712                              <1> 	.nochangewindrag:
  9713 00006D80 662B15[DE470000]    <1> 		sub dx, [lastmouseposition]
  9714 00006D87 660315[E2470000]    <1> 		add dx, [mousecursorposition]
  9715 00006D8E 66030D[E4470000]    <1> 		add cx, [mousecursorposition + 2]
  9716 00006D95 662B0D[E0470000]    <1> 		sub cx, [lastmouseposition + 2]
  9717 00006D9C 663B15[EC450000]    <1> 		cmp dx, [resolutionx2]
  9718 00006DA3 7607                <1> 		jbe chkyresdrgwin
  9719 00006DA5 668B15[E2470000]    <1> 		mov dx, [mousecursorposition]
  9720                              <1> 	chkyresdrgwin:
  9721 00006DAC 663B0D[00450000]    <1> 		cmp cx, [resolutiony]
  9722 00006DB3 7607                <1> 		jbe nodragwin
  9723 00006DB5 668B0D[E4470000]    <1> 		mov cx, [mousecursorposition + 2]
  9724                              <1> 	nodragwin:
  9725 00006DBC 8B5E0C              <1> 		mov ebx, [esi + 12]
  9726 00006DBF 668B460A            <1> 		mov ax, [esi + 10]
  9727 00006DC3 8B7602              <1> 		mov esi, [esi + 2]
  9728 00006DC6 E811F6FFFF          <1> 		call showwindow
  9729 00006DCB E939000000          <1> 		jmp doneiconsel
  9730                              <1> 	killwin:
  9731 00006DD0 66C7060000          <1> 		mov word [esi], 0
  9732 00006DD5 C605[3E160000]00    <1> 		mov byte [termguion], 0
  9733 00006DDC E8E0ECFFFF          <1> 		call guiclear
  9734 00006DE1 E82BEDFFFF          <1> 		call reloadallgraphics
  9735 00006DE6 E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
  9736 00006DEB E94EE6FFFF          <1> 		jmp guistart
  9737                              <1> 	nexticonsel:
  9738 00006DF0 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9739 00006DF6 81C610000000        <1> 		add esi, 16
  9740 00006DFC 81FE[E5A60300]      <1> 		cmp esi, graphicstableend
  9741 00006E02 7305                <1> 		jae doneiconsel
  9742 00006E04 E9ADFBFFFF          <1> 		jmp clicon2
  9743                              <1> 	doneiconsel:
  9744 00006E09 813D[35690000]0100- <1> 		cmp dword [dragging], 1
  9745 00006E11 0000                <1>
  9746 00006E13 731A                <1> 		jae doneiconsel2
  9747 00006E15 A2[996E0000]        <1> 		mov [windrag], al
  9748 00006E1A 813D[85710000]0000- <1> 		cmp dword [codepointer], 0
  9749 00006E22 0000                <1>
  9750 00006E24 7409                <1> 		je doneiconsel2
  9751 00006E26 8B1D[85710000]      <1> 		mov ebx, [codepointer]
  9752 00006E2C FFD3                <1> 		call ebx
  9753 00006E2E C3                  <1> 		ret
  9754                              <1> 	doneiconsel2:
  9755 00006E2F A0[F3480000]        <1> 		mov al, [LBUTTON]
  9756 00006E34 A2[33690000]        <1> 		mov [pLBUTTON], al
  9757 00006E39 A0[F4480000]        <1> 		mov al, [RBUTTON]
  9758 00006E3E A2[34690000]        <1> 		mov [pRBUTTON], al
  9759 00006E43 813D[35690000]0100- <1> 		cmp dword [dragging], 1
  9760 00006E4B 0000                <1>
  9761 00006E4D 0F8618000000        <1> 		jbe near noreloadgraphicsclick
  9762 00006E53 E805EAFFFF          <1> 		call switchmousepos2
  9763 00006E58 803D[996E0000]01    <1> 		cmp byte [windrag], 1
  9764 00006E5F 7305                <1> 		jae noclearcursorcl
  9765 00006E61 E83FE9FFFF          <1> 		call clearmousecursor
  9766                              <1> noclearcursorcl:
  9767 00006E66 E8A6ECFFFF          <1> 		call reloadallgraphics
  9768                              <1> noreloadgraphicsclick:
  9769 00006E6B 30E4                <1> 		xor ah, ah
  9770 00006E6D 31C9                <1> 		xor ecx, ecx
  9771 00006E6F 31D2                <1> 		xor edx, edx
  9772 00006E71 B001                <1> 		mov al, 1
  9773 00006E73 668B15[E2470000]    <1> 		mov dx, [mousecursorposition]
  9774 00006E7A 668B0D[E4470000]    <1> 		mov cx, [mousecursorposition + 2]
  9775 00006E81 66BBE738            <1> 		mov bx, 0011100011100111b
  9776 00006E85 C605[2F690000]01    <1> 		mov byte [showcursorfonton], 1
  9777 00006E8C E84AF3FFFF          <1> 		call showfontvesa
  9778 00006E91 C605[2F690000]00    <1> 		mov byte [showcursorfonton], 0
  9779 00006E98 C3                  <1> 		ret
  9780 00006E99 00                  <1> windrag db 0
  9781 00006E9A 00000000            <1> lastdrag dw 0,0
  9782 00006E9E 00000000            <1> grpctblpos dw 0,0
  9783                              <1> 
  9784                              <1> 
  9785                              <1> 
  9786 00006EA2 00<rept>            <1> grphbuf times 16 db 0
  9787                              <1> 	graphicsadd:
  9788 00006EB2 BF[E5A40300]        <1> 		mov edi, graphicstable
  9789                              <1> 	shwgrph1:
  9790 00006EB7 397702              <1> 		cmp dword [edi + 2], esi
  9791 00006EBA 7414                <1> 		je showgraphicsreplace2
  9792 00006EBC 81C710000000        <1> 		add edi, 16
  9793 00006EC2 81FF[E5A60300]      <1> 		cmp edi, graphicstableend
  9794 00006EC8 0F8337020000        <1> 		jae near showgraphicsnew
  9795 00006ECE EBE7                <1> 		jmp shwgrph1
  9796                              <1> 	showgraphicsreplace2:
  9797 00006ED0 8935[A46E0000]      <1> 		mov [grphbuf + 2], esi
  9798 00006ED6 668915[A86E0000]    <1> 		mov [grphbuf + 6], dx
  9799 00006EDD 66890D[AA6E0000]    <1> 		mov [grphbuf + 8], cx
  9800 00006EE4 891D[AE6E0000]      <1> 		mov [grphbuf + 12], ebx
  9801 00006EEA 30FF                <1> 		xor bh, bh
  9802 00006EEC 88E3                <1> 		mov bl, ah
  9803 00006EEE 30E4                <1> 		xor ah, ah
  9804 00006EF0 66A3[AC6E0000]      <1> 		mov [grphbuf + 10], ax	
  9805 00006EF6 66891D[A26E0000]    <1> 		mov [grphbuf], bx
  9806 00006EFD 66A1[A26E0000]      <1> 		mov ax, [grphbuf]
  9807 00006F03 663D0100            <1> 		cmp ax, 1
  9808 00006F07 0F8419000000        <1> 		je near replaceicon
  9809 00006F0D 663D0200            <1> 		cmp ax, 2
  9810 00006F11 0F8493000000        <1> 		je near replacestring
  9811 00006F17 663D0300            <1> 		cmp ax, 3
  9812 00006F1B 0F840F010000        <1> 		je near replacewindow
  9813 00006F21 E9BC010000          <1> 		jmp showgraphicsreplace
  9814                              <1> 	replaceicon:
  9815 00006F26 893D[39690000]      <1> 		mov [lastpos], edi
  9816 00006F2C 8935[3D690000]      <1> 		mov [lastpos + 4], esi
  9817 00006F32 8B7702              <1> 		mov esi, [edi + 2]
  9818 00006F35 668B5F0C            <1> 		mov bx, [edi + 12]
  9819 00006F39 668B5706            <1> 		mov dx, [edi + 6]
  9820 00006F3D 668B4F08            <1> 		mov cx, [edi + 8]
  9821 00006F41 668B06              <1> 		mov ax, [esi]
  9822 00006F44 66A3[41690000]      <1> 		mov [colorbuf], ax
  9823 00006F4A 66A1[0D5B0000]      <1> 		mov ax, [background]
  9824 00006F50 668906              <1> 		mov [esi], ax
  9825 00006F53 8B5F0C              <1> 		mov ebx, [edi + 12]
  9826 00006F56 668B470A            <1> 		mov ax, [edi + 10]
  9827 00006F5A 2401                <1> 		and al, 1
  9828 00006F5C A2[89710000]        <1> 		mov [iconselected], al
  9829 00006F61 668B470A            <1> 		mov ax, [edi + 10]
  9830 00006F65 E869E9FFFF          <1> 		call showicon2
  9831 00006F6A 8B3D[39690000]      <1> 		mov edi, [lastpos]
  9832 00006F70 8B7702              <1> 		mov esi, [edi + 2]
  9833 00006F73 66A1[41690000]      <1> 		mov ax, [colorbuf]
  9834 00006F79 668906              <1> 		mov [esi], ax
  9835 00006F7C 8B35[3D690000]      <1> 		mov esi, [lastpos + 4]
  9836 00006F82 668B15[A86E0000]    <1> 		mov dx, [grphbuf + 6]
  9837 00006F89 668B0D[AA6E0000]    <1> 		mov cx, [grphbuf + 8]
  9838 00006F90 668B1D[A26E0000]    <1> 		mov bx, [grphbuf]
  9839 00006F97 66A1[AC6E0000]      <1> 		mov ax, [grphbuf + 10]
  9840 00006F9D 88DC                <1> 		mov ah, bl
  9841 00006F9F 8B1D[AE6E0000]      <1> 		mov ebx, [grphbuf + 12]
  9842 00006FA5 E938010000          <1> 		jmp showgraphicsreplace
  9843                              <1> 	replacestring:
  9844 00006FAA 893D[39690000]      <1> 		mov [lastpos], edi
  9845 00006FB0 8935[3D690000]      <1> 		mov [lastpos + 4], esi
  9846 00006FB6 8B5F0C              <1> 		mov ebx, [edi + 12]
  9847 00006FB9 8B7702              <1> 		mov esi, [edi + 2]
  9848 00006FBC 668B5706            <1> 		mov dx, [edi + 6]
  9849 00006FC0 668B4F08            <1> 		mov cx, [edi + 8]
  9850 00006FC4 66A1[CA610000]      <1> 		mov ax, [colorfont2]
  9851 00006FCA 66A3[41690000]      <1> 		mov [colorbuf], ax
  9852 00006FD0 66A1[0D5B0000]      <1> 		mov ax, [background]
  9853 00006FD6 66A3[CA610000]      <1> 		mov [colorfont2], ax		
  9854 00006FDC 8B5F0C              <1> 		mov ebx, [edi + 12]
  9855 00006FDF 668B470A            <1> 		mov ax, [edi + 10]
  9856 00006FE3 2401                <1> 		and al, 1
  9857 00006FE5 A2[31690000]        <1> 		mov [mouseselecton], al
  9858 00006FEA 668B470A            <1> 		mov ax, [edi + 10]
  9859 00006FEE E86FF1FFFF          <1> 		call showstring2
  9860 00006FF3 66A1[41690000]      <1> 		mov ax, [colorbuf]
  9861 00006FF9 66A3[CA610000]      <1> 		mov [colorfont2], ax
  9862 00006FFF 8B3D[39690000]      <1> 		mov edi, [lastpos]
  9863 00007005 8B7702              <1> 		mov esi, [edi + 2]
  9864 00007008 668B15[A86E0000]    <1> 		mov dx, [grphbuf + 6]
  9865 0000700F 668B0D[AA6E0000]    <1> 		mov cx, [grphbuf + 8]
  9866 00007016 668B1D[A26E0000]    <1> 		mov bx, [grphbuf]
  9867 0000701D 66A1[AC6E0000]      <1> 		mov ax, [grphbuf + 10]
  9868 00007023 88DC                <1> 		mov ah, bl
  9869 00007025 8B1D[AE6E0000]      <1> 		mov ebx, [grphbuf + 12]
  9870 0000702B E9B2000000          <1> 		jmp showgraphicsreplace
  9871                              <1> 	replacewindow:
  9872 00007030 893D[39690000]      <1> 		mov [lastpos], edi
  9873 00007036 8935[3D690000]      <1> 		mov [lastpos + 4], esi
  9874 0000703C 8B7702              <1> 		mov esi, [edi + 2]
  9875 0000703F 8B3D[C6630000]      <1> 		mov edi, [windowbufloc]
  9876 00007045 31D2                <1> 		xor edx, edx
  9877 00007047 668B15[EC450000]    <1> 		mov dx, [resolutionx2]
  9878 0000704E C1E204              <1> 		shl edx, 4
  9879 00007051 29D7                <1> 		sub edi, edx
  9880 00007053 31D2                <1> 		xor edx, edx
  9881 00007055 668B16              <1> 		mov dx, [esi]
  9882 00007058 660316              <1> 		add dx, [esi]
  9883 0000705B 668B4E02            <1> 		mov cx, [esi + 2]
  9884 0000705F 6681C11000          <1> 		add cx, 16
  9885 00007064 66A1[0D5B0000]      <1> 		mov ax, [background]
  9886 0000706A 803D[996E0000]01    <1> 		cmp byte [windrag], 1
  9887 00007071 7604                <1> 		jbe clearwindow
  9888 00007073 662B4E02            <1> 		sub cx, [esi + 2]
  9889                              <1> 	clearwindow:
  9890                              <1> 		%ifdef gui.background
  9891                              <1> 			cmp dword [backgroundimage], 0
  9892                              <1> 			je .noback
  9893                              <1> 			push esi
  9894                              <1> 			mov esi, [backgroundimage]
  9895                              <1> 			sub edi, [physbaseptr]
  9896                              <1> 			add esi, edi
  9897                              <1> 			add edi, [physbaseptr]
  9898                              <1> 			mov ax, [esi]
  9899                              <1> 			pop esi
  9900                              <1> 		.noback:
  9901                              <1> 		%endif
  9902 00007077 668907              <1> 		mov [edi], ax
  9903 0000707A 81C702000000        <1> 		add edi, 2
  9904 00007080 81EA02000000        <1> 		sub edx, 2
  9905 00007086 81FA00000000        <1> 		cmp edx, 0
  9906 0000708C 75E9                <1> 		jne clearwindow
  9907 0000708E 6649                <1> 		dec cx
  9908 00007090 668B15[EC450000]    <1> 		mov dx, [resolutionx2]
  9909 00007097 662B16              <1> 		sub dx, [esi]
  9910 0000709A 662B16              <1> 		sub dx, [esi]
  9911 0000709D 01D7                <1> 		add edi, edx
  9912 0000709F 668B16              <1> 		mov dx, [esi]
  9913 000070A2 660316              <1> 		add dx, [esi]
  9914 000070A5 6681F90000          <1> 		cmp cx, 0
  9915 000070AA 75CB                <1> 		jne clearwindow
  9916                              <1> 	endwindowclear:
  9917 000070AC C605[3F160000]00    <1> 		mov byte [termcopyon], 0
  9918 000070B3 8B3D[39690000]      <1> 		mov edi, [lastpos]
  9919 000070B9 8B35[A46E0000]      <1> 		mov esi, [grphbuf + 2]
  9920 000070BF 668B15[A86E0000]    <1> 		mov dx, [grphbuf + 6]
  9921 000070C6 668B0D[AA6E0000]    <1> 		mov cx, [grphbuf + 8]
  9922 000070CD 668B1D[A26E0000]    <1> 		mov bx, [grphbuf]
  9923 000070D4 66A1[AC6E0000]      <1> 		mov ax, [grphbuf + 10]
  9924 000070DA 88DC                <1> 		mov ah, bl
  9925 000070DC 8B1D[AE6E0000]      <1> 		mov ebx, [grphbuf + 12]
  9926                              <1> 	showgraphicsreplace:
  9927 000070E2 897702              <1> 		mov [edi + 2], esi
  9928 000070E5 66895706            <1> 		mov [edi + 6], dx
  9929 000070E9 66894F08            <1> 		mov [edi + 8], cx
  9930 000070ED 895F0C              <1> 		mov [edi + 12], ebx
  9931 000070F0 30FF                <1> 		xor bh, bh
  9932 000070F2 88E3                <1> 		mov bl, ah
  9933 000070F4 30E4                <1> 		xor ah, ah
  9934 000070F6 6689470A            <1> 		mov [edi + 10], ax
  9935 000070FA 66891F              <1> 		mov [edi], bx
  9936 000070FD 8B5F0C              <1> 		mov ebx, [edi + 12]
  9937 00007100 668B470A            <1> 		mov ax, [edi + 10]
  9938 00007104 C3                  <1> 		ret
  9939                              <1> 	showgraphicsnew:
  9940 00007105 BF[E5A40300]        <1> 		mov edi, graphicstable
  9941                              <1> 	shwgrph2:
  9942 0000710A 66813F0000          <1> 		cmp word [edi], 0
  9943 0000710F 74D1                <1> 		je showgraphicsreplace
  9944 00007111 81C710000000        <1> 		add edi, 16
  9945 00007117 81FF[E5A60300]      <1> 		cmp edi, graphicstableend
  9946 0000711D 72EB                <1> 		jb shwgrph2
  9947                              <1> 	showgraphicsdone:
  9948 0000711F C3                  <1> 		ret
  9949                              <1> 	
  9950                              <1> putpixel: ;color in si, point is (dx,cx)
  9951                              <1> 		;destroys edi, ebx, eax
  9952 00007120 6650                <1> 	push ax
  9953 00007122 6653                <1> 	push bx
  9954 00007124 31C0                <1> 	xor eax, eax
  9955 00007126 31DB                <1> 	xor ebx, ebx
  9956 00007128 31FF                <1> 	xor edi, edi
  9957 0000712A 668B1D[00450000]    <1> 	mov bx, [resolutiony]
  9958 00007131 66A1[FE440000]      <1> 	mov ax, [resolutionx]
  9959 00007137 6639C2              <1> 	cmp dx, ax
  9960 0000713A 7720                <1> 	ja .doneput
  9961 0000713C 66D1E0              <1> 	shl ax, 1
  9962 0000713F 6639D9              <1> 	cmp cx, bx
  9963 00007142 7718                <1> 	ja .doneput
  9964 00007144 6689CB              <1> 	mov bx, cx
  9965 00007147 52                  <1> 	push edx
  9966 00007148 F7E3                <1> 	mul ebx
  9967 0000714A 5A                  <1> 	pop edx
  9968 0000714B 6601D7              <1> 	add di, dx
  9969 0000714E 6601D7              <1> 	add di, dx
  9970 00007151 01C7                <1> 	add edi, eax
  9971 00007153 033D[14450000]      <1> 	add edi, [physbaseptr]
  9972 00007159 668937              <1> 	mov [edi], si
  9973                              <1> .doneput:
  9974 0000715C 665B                <1> 	pop bx
  9975 0000715E 6658                <1> 	pop ax
  9976 00007160 C3                  <1> 	ret
  9977                              <1> 	
  9978                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
  9979 00007161 31FF                <1> 	xor edi, edi
  9980 00007163 31C0                <1> 	xor eax, eax
  9981 00007165 31DB                <1> 	xor ebx, ebx
  9982 00007167 668B1D[EC450000]    <1> 	mov bx, [resolutionx2]
  9983 0000716E 6689D7              <1> 	mov di, dx
  9984 00007171 6601D7              <1> 	add di, dx
  9985 00007174 6689C8              <1> 	mov ax, cx
  9986 00007177 F7E3                <1> 	mul ebx
  9987 00007179 01C7                <1> 	add edi, eax
  9988 0000717B 033D[14450000]      <1> 	add edi, [physbaseptr]
  9989 00007181 C3                  <1> 	ret
  9990                              <1> 
  9991 00007182 00                  <1> 	mouseon db 0
  9992 00007183 0000                <1> 	icon dw 0	;pointer to icon
  9993 00007185 00000000            <1> 	codepointer dd 0 ;pointer to code
  9994 00007189 00                  <1> 	iconselected db 0
  9995                                  %endif
  9996                                  %ifdef network.included
  9997                                  	%include "source/network.asm"
  9998                                  %endif
  9999                                      %include "source/data.asm"
 10000 0000718A 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10001 00007192 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10002 0000719A 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10003 000071A3 6E640A00            <1>
 10004 000071A7 757365726E616D653A- <1> 	userask db "username:",0
 10005 000071B0 00                  <1>
 10006 000071B1 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10007 000071BA 00                  <1>
 10008 000071BB 40                  <1> 	computer db "@"
 10009                              <1> %ifdef io.serial
 10010                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10011                              <1> %else
 10012 000071BC 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10013 000071C5 00                  <1>
 10014                              <1> %endif
 10015 000071C6 5D242000            <1> 	endprompt db "]$ ",0
 10016 000071CA 0D                  <1> 	crlf 	db  13
 10017 000071CB 0A00                <1> 	line	db	10,0
 10018                              <1> 	userlst:
 10019 000071CD 726F6F7400          <1> 			db "root",0
 10020 000071D2 617765736F6D65706F- <1> 			db "awesomepower",0
 10021 000071DB 77657200            <1>
 10022 000071DF 7573657200          <1> 			db "user",0
 10023 000071E4 70617373776F726400  <1> 			db "password",0
 10024 000071ED 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10025 000071EF 00                  <1> 			db 0
 10026                              <1> 	userlstend:
 10027                              <1> 	
 10028 000071F0 00                  <1> 	guion db 0
 10029 000071F1 00                  <1> 	DriveNumber db 0
 10030 000071F2 00000000            <1> 	lbaad dd 0
 10031 000071F6 00<rept>            <1> 	memlistbuf times 576 db 0
 10032 00007436 00000000            <1> 	memlistend: dd 0
 10033                              <1> %ifdef io.serial
 10034                              <1> %else
 10035 00007436 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10036                              <1> fontend:
 10037                              <1> %endif
 10038                              <1> osend:	;this is the end of the operating system's space on disk
 10039                                  %ifdef disk.none
 10040                                  	diskfileindex:
 10041                                  	enddiskfileindex:
 10042                                  	align 512, db 0
 10043                                      %include "source/bss.asm"
 10044                                  %else
 10045                                      %include "build/fileindex.asm"
 10046                              <1> diskfileindex:
 10047 0003743A 617267746573742E65- <1> db "argtest.elf",0
 10048 00037443 6C6600              <1>
 10049 00037446 BC010000            <1> dd (f0-$$)/512
 10050 0003744A 06010000            <1> dd (f1-f0)/512
 10051 0003744E 6261636B67726F756E- <1> db "background.bmp",0
 10052 00037457 642E626D7000        <1>
 10053 0003745D C2020000            <1> dd (f1-$$)/512
 10054 00037461 01140000            <1> dd (f2-f1)/512
 10055 00037465 626F6F742E736800    <1> db "boot.sh",0
 10056 0003746D C3160000            <1> dd (f2-$$)/512
 10057 00037471 01000000            <1> dd (f3-f2)/512
 10058 00037475 63686172746573742E- <1> db "chartest.elf",0
 10059 0003747E 656C6600            <1>
 10060 00037482 C4160000            <1> dd (f3-$$)/512
 10061 00037486 26010000            <1> dd (f4-f3)/512
 10062 0003748A 646F73746573742E63- <1> db "dostest.com",0
 10063 00037493 6F6D00              <1>
 10064 00037496 EA170000            <1> dd (f4-$$)/512
 10065 0003749A 01000000            <1> dd (f5-f4)/512
 10066 0003749E 6578656300          <1> db "exec",0
 10067 000374A3 EB170000            <1> dd (f5-$$)/512
 10068 000374A7 01000000            <1> dd (f6-f5)/512
 10069 000374AB 66696E616C636F756E- <1> db "finalcount.sn",0
 10070 000374B4 742E736E00          <1>
 10071 000374B9 EC170000            <1> dd (f6-$$)/512
 10072 000374BD 01000000            <1> dd (f7-f6)/512
 10073 000374C1 666C6F7070792E7478- <1> db "floppy.txt",0
 10074 000374CA 7400                <1>
 10075 000374CC ED170000            <1> dd (f7-$$)/512
 10076 000374D0 0A000000            <1> dd (f8-f7)/512
 10077 000374D4 666F726B00          <1> db "fork",0
 10078 000374D9 F7170000            <1> dd (f8-$$)/512
 10079 000374DD 01000000            <1> dd (f9-f8)/512
 10080 000374E1 677261766974792E65- <1> db "gravity.elf",0
 10081 000374EA 6C6600              <1>
 10082 000374ED F8170000            <1> dd (f9-$$)/512
 10083 000374F1 E0000000            <1> dd (f10-f9)/512
 10084 000374F5 6775697465737400    <1> db "guitest",0
 10085 000374FD D8180000            <1> dd (f10-$$)/512
 10086 00037501 03000000            <1> dd (f11-f10)/512
 10087 00037505 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10088 0003750E 642E656C6600        <1>
 10089 00037514 DB180000            <1> dd (f11-$$)/512
 10090 00037518 D7010000            <1> dd (f12-f11)/512
 10091 0003751C 696E7400            <1> db "int",0
 10092 00037520 B21A0000            <1> dd (f12-$$)/512
 10093 00037524 01000000            <1> dd (f13-f12)/512
 10094 00037528 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10095 00037531 2E736E00            <1>
 10096 00037535 B31A0000            <1> dd (f13-$$)/512
 10097 00037539 01000000            <1> dd (f14-f13)/512
 10098 0003753D 6D6172696F2E736E00  <1> db "mario.sn",0
 10099 00037546 B41A0000            <1> dd (f14-$$)/512
 10100 0003754A 01000000            <1> dd (f15-f14)/512
 10101 0003754E 6D6F6D656E742E7761- <1> db "moment.wav",0
 10102 00037557 7600                <1>
 10103 00037559 B51A0000            <1> dd (f15-$$)/512
 10104 0003755D 570A0000            <1> dd (f16-f15)/512
 10105 00037561 70692E656C6600      <1> db "pi.elf",0
 10106 00037568 0C250000            <1> dd (f16-$$)/512
 10107 0003756C 1F010000            <1> dd (f17-f16)/512
 10108 00037570 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10109 00037579 626D7000            <1>
 10110 0003757D 2B260000            <1> dd (f17-$$)/512
 10111 00037581 B0020000            <1> dd (f18-f17)/512
 10112 00037585 736F6C6C65726F732E- <1> db "solleros.txt",0
 10113 0003758E 74787400            <1>
 10114 00037592 DB280000            <1> dd (f18-$$)/512
 10115 00037596 01000000            <1> dd (f19-f18)/512
 10116 0003759A 736F6E676F74696D65- <1> db "songotime.sn",0
 10117 000375A3 2E736E00            <1>
 10118 000375A7 DC280000            <1> dd (f19-$$)/512
 10119 000375AB 01000000            <1> dd (f20-f19)/512
 10120 000375AF 73736500            <1> db "sse",0
 10121 000375B3 DD280000            <1> dd (f20-$$)/512
 10122 000375B7 02000000            <1> dd (f21-f20)/512
 10123 000375BB 737464696F74657374- <1> db "stdiotest.elf",0
 10124 000375C4 2E656C6600          <1>
 10125 000375C9 DF280000            <1> dd (f21-$$)/512
 10126 000375CD 27010000            <1> dd (f22-f21)/512
 10127 000375D1 74656C7900          <1> db "tely",0
 10128 000375D6 062A0000            <1> dd (f22-$$)/512
 10129 000375DA 01000000            <1> dd (f23-f22)/512
 10130 000375DE 74696D65746573742E- <1> db "timetest.elf",0
 10131 000375E7 656C6600            <1>
 10132 000375EB 072A0000            <1> dd (f23-$$)/512
 10133 000375EF 04010000            <1> dd (f24-f23)/512
 10134 000375F3 7475746F7269616C2E- <1> db "tutorial.sh",0
 10135 000375FC 736800              <1>
 10136 000375FF 0B2B0000            <1> dd (f24-$$)/512
 10137 00037603 03000000            <1> dd (f25-f24)/512
 10138 00037607 756E667300          <1> db "unfs",0
 10139 0003760C 0E2B0000            <1> dd (f25-$$)/512
 10140 00037610 02000000            <1> dd (f26-f25)/512
 10141 00037614 7574662D382E747874- <1> db "utf-8.txt",0
 10142 0003761D 00                  <1>
 10143 0003761E 102B0000            <1> dd (f26-$$)/512
 10144 00037622 02000000            <1> dd (f27-f26)/512
 10145 00037626 766963746F72792E77- <1> db "victory.wav",0
 10146 0003762F 617600              <1>
 10147 00037632 122B0000            <1> dd (f27-$$)/512
 10148 00037636 16000000            <1> dd (f28-f27)/512
 10149 0003763A 5F696D672E62696E00  <1> db "_img.bin",0
 10150 00037643 282B0000            <1> dd (f28-$$)/512
 10151 00037647 D7020000            <1> dd (f29-f28)/512
 10152                              <1> enddiskfileindex:
 10153                              <1> 
 10154                                      %include "source/bss.asm"
 10155 0003764B 90                  <1> align 4, nop
 10156                              <1> bssstart: equ $
 10157                              <1> bsscopy equ $
 10158                              <1> initialstack equ bsscopy
 10159                              <1> stackend equ initialstack + 4000
 10160                              <1> sigtable equ stackend + 96
 10161                              <1> fileindex: equ sigtable + 4
 10162                              <1> fileindexend: equ fileindex + 1024
 10163                              <1> previousstack equ fileindexend
 10164                              <1> lastfolderloc equ previousstack + 4
 10165                              <1> currentfolderloc equ lastfolderloc + 4
 10166                              <1> currentfolder equ currentfolderloc + 4
 10167                              <1> currentfolderend equ currentfolder + 512
 10168                              <1> uid equ currentfolderend
 10169                              <1> ranboot equ uid + 4
 10170                              <1> IFON equ ranboot + 1
 10171                              <1> IFTRUE equ IFON + 1
 10172                              <1> BATCHPOS equ IFTRUE + 100
 10173                              <1> BATCHISON equ BATCHPOS + 4
 10174                              <1> LOOPON equ BATCHISON + 1
 10175                              <1> LOOPPOS	equ LOOPON + 1
 10176                              <1> variables: equ LOOPPOS + 4
 10177                              <1> varend: equ variables + 4096
 10178                              <1> buftxt2: equ varend
 10179                              <1> buftxt: equ buftxt2 + 1024
 10180                              <1> buftxtend: equ buftxt + 1024
 10181                              <1> buf2: equ buftxtend
 10182                              <1> numbuf: equ buf2 + 20
 10183                              <1> %ifdef io.serial
 10184                              <1> 	lastcommandpos equ numbuf + 1
 10185                              <1> %else
 10186                              <1> 	%ifdef gui.included
 10187                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10188                              <1> 		graphicstableend equ graphicstable + 200h
 10189                              <1> 		%ifdef gui.background
 10190                              <1> 			backgroundbuffer equ graphicstableend
 10191                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10192                              <1> 			mousecolorbuf equ backgroundbufferend
 10193                              <1> 		%else
 10194                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10195                              <1> 		%endif
 10196                              <1> 		mcolorend equ mousecolorbuf + 256
 10197                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 10198                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10199                              <1> 		videobuf2 equ videobufend
 10200                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10201                              <1> 	%else
 10202                              <1> 		videobuf equ numbuf + 1
 10203                              <1> 		videobufend equ videobuf + 80*30*4
 10204                              <1> 		videobuf2 equ videobufend
 10205                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10206                              <1> 	%endif
 10207                              <1> 	lastcommandpos: equ videobuf2end
 10208                              <1> %endif
 10209                              <1> 	commandbufpos: equ lastcommandpos + 4
 10210                              <1> 	commandlistentries: equ commandbufpos + 4
 10211                              <1> 	commandsentered: equ commandlistentries + 4
 10212                              <1> 	commandbuf: equ commandsentered + 4
 10213                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10214                              <1> %ifdef network.included
 10215                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10216                              <1> 	rbuffend equ rbuffstart + 8212
 10217                              <1> %else
 10218                              <1> 	rbuffstart equ commandbufend
 10219                              <1> 	rbuffend equ commandbufend
 10220                              <1> %endif
 10221                              <1> %ifdef threads.included
 10222                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 10223                              <1> 	threadlistend: equ threadlist + 1024*4
 10224                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10225                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 10226                              <1> 	bssend equ stack1 + 1024*1024
 10227                              <1> %else
 10228                              <1> 	bssend equ rbuffend
 10229                              <1> %endif
 10230                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10231                                      %include "build/files.asm"
 10232 0003764C 00<rept>            <1> align 512,db 0
 10233                              <1> f0:
 10234 0003764C <incbin>            <1> incbin "included/argtest.elf"
 10235 00058337 00<rept>            <1> align 512,db 0
 10236                              <1> f1:
 10237 00058337 <incbin>            <1> incbin "included/background.bmp"
 10238 002D8446 00<rept>            <1> align 512,db 0
 10239                              <1> f2:
 10240 002D8446 <incbin>            <1> incbin "included/boot.sh"
 10241 002D86FD 00<rept>            <1> align 512,db 0
 10242                              <1> f3:
 10243 002D86FD <incbin>            <1> incbin "included/chartest.elf"
 10244 002FD324 00<rept>            <1> align 512,db 0
 10245                              <1> f4:
 10246 002FD324 <incbin>            <1> incbin "included/dostest.com"
 10247 002FD531 00<rept>            <1> align 512,db 0
 10248                              <1> f5:
 10249 002FD531 <incbin>            <1> incbin "included/exec"
 10250 002FD6E1 00<rept>            <1> align 512,db 0
 10251                              <1> f6:
 10252 002FD6E1 <incbin>            <1> incbin "included/finalcount.sn"
 10253 002FD902 00<rept>            <1> align 512,db 0
 10254                              <1> f7:
 10255 002FD902 <incbin>            <1> incbin "included/floppy.txt"
 10256 002FEC66 00<rept>            <1> align 512,db 0
 10257                              <1> f8:
 10258 002FEC66 <incbin>            <1> incbin "included/fork"
 10259 002FEF58 00<rept>            <1> align 512,db 0
 10260                              <1> f9:
 10261 002FEF58 <incbin>            <1> incbin "included/gravity.elf"
 10262 0031AF1E 00<rept>            <1> align 512,db 0
 10263                              <1> f10:
 10264 0031AF1E <incbin>            <1> incbin "included/guitest"
 10265 0031B42B 00<rept>            <1> align 512,db 0
 10266                              <1> f11:
 10267 0031B42B <incbin>            <1> incbin "included/helloworld.elf"
 10268 00356228 00<rept>            <1> align 512,db 0
 10269                              <1> f12:
 10270 00356228 <incbin>            <1> incbin "included/int"
 10271 003565AF 00<rept>            <1> align 512,db 0
 10272                              <1> f13:
 10273 003565AF <incbin>            <1> incbin "included/lostwoods.sn"
 10274 00356656 00<rept>            <1> align 512,db 0
 10275                              <1> f14:
 10276 00356656 <incbin>            <1> incbin "included/mario.sn"
 10277 0035683A 00<rept>            <1> align 512,db 0
 10278                              <1> f15:
 10279 0035683A <incbin>            <1> incbin "included/moment.wav"
 10280 004A163A 00<rept>            <1> align 512,db 0
 10281                              <1> f16:
 10282 004A163A <incbin>            <1> incbin "included/pi.elf"
 10283 004C5572 00<rept>            <1> align 512,db 0
 10284                              <1> f17:
 10285 004C5572 <incbin>            <1> incbin "included/solleros.bmp"
 10286 0051B5E6 00<rept>            <1> align 512,db 0
 10287                              <1> f18:
 10288 0051B5E6 <incbin>            <1> incbin "included/solleros.txt"
 10289 0051B774 00<rept>            <1> align 512,db 0
 10290                              <1> f19:
 10291 0051B774 <incbin>            <1> incbin "included/songotime.sn"
 10292 0051B84A 00<rept>            <1> align 512,db 0
 10293                              <1> f20:
 10294 0051B84A <incbin>            <1> incbin "included/sse"
 10295 0051BCA8 00<rept>            <1> align 512,db 0
 10296                              <1> f21:
 10297 0051BCA8 <incbin>            <1> incbin "included/stdiotest.elf"
 10298 00540A88 00<rept>            <1> align 512,db 0
 10299                              <1> f22:
 10300 00540A88 <incbin>            <1> incbin "included/tely"
 10301 00540DBA 00<rept>            <1> align 512,db 0
 10302                              <1> f23:
 10303 00540DBA <incbin>            <1> incbin "included/timetest.elf"
 10304 00561482 00<rept>            <1> align 512,db 0
 10305                              <1> f24:
 10306 00561482 <incbin>            <1> incbin "included/tutorial.sh"
 10307 00561B52 00<rept>            <1> align 512,db 0
 10308                              <1> f25:
 10309 00561B52 <incbin>            <1> incbin "included/unfs"
 10310                              <1> align 512,db 0
 10311                              <1> f26:
 10312 00561B52 <incbin>            <1> incbin "included/utf-8.txt"
 10313 005623C8 00<rept>            <1> align 512,db 0
 10314                              <1> f27:
 10315 005623C8 <incbin>            <1> incbin "included/victory.wav"
 10316 00564F48 00<rept>            <1> align 512,db 0
 10317                              <1> f28:
 10318 00564F48 <incbin>            <1> incbin "included/_img.bin"
 10319                              <1> align 512,db 0
 10320                              <1> f29:
 10321                                  %endif
