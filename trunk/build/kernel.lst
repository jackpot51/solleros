     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> ;%define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> ;%define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 008E0300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[088A]          <1> 	mov [initialtsc], eax
   146 00000022 668916[0C8A]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[108A]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[148A]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[038A]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[048A]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C E95400              <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003F B81200              <1> 	mov ax, 12h
   164 00000042 31DB                <1> 	xor bx, bx
   165 00000044 CD10                <1> 	int 10h
   166 00000046 C606[028A]00        <1> 	mov byte [guion], 0
   167 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004E C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004F BF[188A]            <1> 	mov di, memlistbuf
   172 00000052 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000055 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000061 66B918000000        <1> 	mov ecx, 24
   177 00000067 CD15                <1> 	int 0x15
   178 00000069 81C71800            <1> 	add di, 24
   179 0000006D 81FF[588C]          <1> 	cmp di, memlistend
   180 00000071 7305                <1> 	jae nomoregetmemsize
   181 00000073 6685DB              <1> 	test ebx, ebx
   182 00000076 75DD                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000078 81EF[188A]          <1> 	sub di, memlistbuf
   185 0000007C 893E[588C]          <1> 	mov [memlistend], di
   186 00000080 C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 00000081 BB0700              <1>     mov bx,07		; write to display
   190 00000084 B40E                <1>     mov ah,0Eh		; screen function
   191 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000088 84C0                <1>     test al,al		; look for terminator 
   193 0000008A 7406                <1>     jz .done	; zero byte at end of string
   194 0000008C CD10                <1>     int 10h		; write character to screen.    
   195 0000008E 46                  <1> 	inc si	     	; move to next character
   196 0000008F E9F4FF              <1>     jmp .lp		; loop
   197 00000092 C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000093 6631C0              <1> 	xor eax, eax
   203 00000096 6631DB              <1> 	xor ebx, ebx
   204 00000099 6631C9              <1> 	xor ecx, ecx
   205 0000009C 6631D2              <1> 	xor edx, edx
   206 0000009F 6631F6              <1> 	xor esi, esi
   207 000000A2 6631FF              <1> 	xor edi, edi
   208 000000A5 BA9200              <1> 	mov dx, 0x92
   209 000000A8 EC                  <1> 	in al, dx	;A20
   210 000000A9 0C02                <1> 	or al, 2
   211 000000AB EE                  <1> 	out dx, al
   212 000000AC 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AE 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000B2 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B5 A3[B503]            <1> 	mov [gdt2 + 2],ax
   216 000000B8 A3[BD03]            <1> 	mov [gdt3 + 2],ax
   217 000000BB 66C1E810            <1> 	shr eax,16
   218 000000BF A2[B703]            <1> 	mov [gdt2 + 4],al
   219 000000C2 A2[BF03]            <1> 	mov [gdt3 + 4],al
   220 000000C5 8826[BA03]          <1> 	mov [gdt2 + 7],ah
   221 000000C9 8826[C203]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CD 66B8[008E0300]      <1> 	mov eax, initialstack
   224 000000D3 660306[4F02]        <1> 	add eax, [newcodecache]
   225 000000D8 A3[AD03]            <1> 	mov [gdts + 2],ax
   226 000000DB 66C1E810            <1> 	shr eax, 16
   227 000000DF A2[AF03]            <1> 	mov [gdts + 4],al
   228 000000E2 8826[B203]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E6 66A1[4F02]          <1> 	mov eax, [newcodecache]
   231 000000EA A3[C503]            <1> 	mov [gdt4 + 2],ax
   232 000000ED A3[CD03]            <1> 	mov [gdt5 + 2],ax
   233 000000F0 A3[D503]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F3 A3[DD03]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F6 66C1E810            <1> 	shr eax,16
   236 000000FA A2[C703]            <1> 	mov [gdt4 + 4],al
   237 000000FD A2[CF03]            <1> 	mov [gdt5 + 4],al
   238 00000100 A2[D703]            <1> 	mov [gdtv8086 + 4],al
   239 00000103 A2[DF03]            <1> 	mov [gdtv80862 + 4],al
   240 00000106 8826[CA03]          <1> 	mov [gdt4 + 7],ah
   241 0000010A 8826[D203]          <1> 	mov [gdt5 + 7],ah
   242 0000010E 8826[DA03]          <1> 	mov [gdtv8086 + 7],ah
   243 00000112 8826[E203]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000116 66B800004000        <1> 	mov eax, dosprogloc
   246 0000011C 660306[4F02]        <1> 	add eax, [newcodecache]
   247 00000121 A3[E503]            <1> 	mov [gdtdos + 2],ax
   248 00000124 A3[ED03]            <1> 	mov [gdtdos2 + 2],ax
   249 00000127 66C1E810            <1> 	shr eax,16
   250 0000012B A2[E703]            <1> 	mov [gdtdos + 4],al
   251 0000012E A2[EF03]            <1> 	mov [gdtdos2 + 4],al
   252 00000131 8826[EA03]          <1> 	mov [gdtdos + 7],ah
   253 00000135 8826[F203]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000139 67668D83[9B030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 00000141 66A3[9103]          <1> 	mov [gdtr + 2],eax
   258 00000145 67668D83[F3030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014D 66A3[9703]          <1> 	mov [idtr + 2],eax
   260 00000151 FA                  <1> 	cli
   261 00000152 0F0116[8F03]        <1> 	lgdt [gdtr]
   262 00000157 0F011E[9503]        <1> 	lidt [idtr]
   263 0000015C 6631DB              <1> 	xor ebx, ebx
   264 0000015F 8CDB                <1> 	mov bx, ds
   265 00000161 66891E[4B02]        <1> 	mov [basecache], ebx
   266 00000166 0F20C0              <1> 	mov eax,cr0
   267 00000169 0C01                <1> 	or al,1
   268 0000016B 0F22C0              <1> 	mov cr0,eax
   269 0000016E EA[7301]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000173 31C0                <1> 	xor eax, eax
   273 00000175 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000179 8ED8                <1> 	mov ds, ax
   275 0000017B 8EC0                <1> 	mov es, ax
   276 0000017D 8EE0                <1> 	mov fs, ax
   277 0000017F 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000183 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000185 648B06              <1> 	mov eax, [fs:esi]
   282 00000188 658906              <1> 	mov [gs:esi], eax
   283 0000018B 81C604000000        <1> 	add esi, 4
   284 00000191 81FE[008E0300]      <1> 	cmp esi, bsscopy
   285 00000197 72EC                <1> 	jb copykernel
   286 00000199 EA[A0010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 000001A0 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 000001A4 8ED8                <1> 	mov ds, ax
   291 000001A6 8EC0                <1> 	mov es, ax
   292 000001A8 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001AA 8ED0                <1> 	mov ss, ax
   295 000001AC BC[00AE0300]        <1> 	mov esp, stackend
   296 000001B1 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001B5 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B7 E8E7620000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001BC A1[4F020000]        <1> 	mov eax, [newcodecache]
   302 000001C1 C1E804              <1> 	shr eax, 4
   303 000001C4 A3[4B020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C9 BE[3CB64D00]        <1> 	mov esi, bssend
   306 000001CE 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001D0 8906                <1> 	mov [esi], eax
   309 000001D2 81EE04000000        <1> 	sub esi, 4
   310 000001D8 81FE[008E0300]      <1> 	cmp esi, bsscopy
   311 000001DE 77F0                <1> 	ja clearkernelbuffers
   312 000001E0 FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001E1 BE[188A0000]        <1> 	mov esi, memlistbuf
   316 000001E6 31FF                <1> 	xor edi, edi
   317 000001E8 668B3D[588C0000]    <1> 	mov di, [memlistend]
   318 000001EF 01F7                <1> 	add edi, esi
   319 000001F1 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001F3 39FE                <1> 	cmp esi, edi
   322 000001F5 7325                <1> 	jae finishedmemspacecalc
   323 000001F7 81C608000000        <1> 	add esi, 8
   324 000001FD 8B0E                <1> 	mov ecx, [esi]
   325 000001FF 81C608000000        <1> 	add esi, 8
   326 00000205 8B1E                <1> 	mov ebx, [esi]
   327 00000207 81C608000000        <1> 	add esi, 8
   328 0000020D 81FB01000000        <1> 	cmp ebx, 1
   329 00000213 75DE                <1> 	jne memoryspaceaddition
   330 00000215 01C8                <1> 	add eax, ecx
   331 00000217 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 0000021C A3[60020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 00000221 803D[028A0000]00    <1> 	cmp byte [guion], 0
   336 00000228 741C                <1> 	je normalstartup
   337 0000022A 8B1D[4B020000]      <1> 	mov ebx, [basecache]
   338 00000230 C1E304              <1> 	shl ebx, 4
   339 00000233 8B3D[4E580000]      <1> 	mov edi, [physbaseptr]
   340 00000239 29DF                <1> 	sub edi, ebx
   341 0000023B 893D[4E580000]      <1> 	mov [physbaseptr], edi
   342 00000241 E976680000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 00000246 E969290000          <1> 	jmp os
   346                              <1> 	
   347 0000024B 00000000            <1> basecache dd 0
   348 0000024F 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 00000253 00                  <1> testingcpuspeed db 0
   351 00000254 00000000            <1> cpuspeedperint dd 0
   352 00000258 0000000000000000    <1> cpuclocksperint dd 0,0
   353 00000260 00000000            <1> memoryspace dd 0
   354 00000264 7D0A                <1> pitdiv dw 2685
   355 00000266 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 0000026A 00                  <1> ticks db 0
   364 0000026B 00000000            <1> timeseconds dd 0
   365 0000026F 00000000            <1> timenanoseconds dd 0
   366 00000273 00                  <1> soundon db 0
   367 00000274 0000                <1> soundrepititions dw 0
   368 00000276 00000000            <1> soundpos dd 0
   369 0000027A 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 0000027E C605[53020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000285 A3[54020000]        <1> 	mov [cpuspeedperint], eax
   374 0000028A B8[B0510000]        <1> 	mov eax, cpuspeedloopend
   375 0000028F 890424              <1> 	mov [esp], eax
   376 00000292 E9E8000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000297 803D[53020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 0000029E 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 000002A0 E8B4000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 000002A5 803D[73020000]01    <1> 	cmp byte [soundon], 1
   385 000002AC 0F8480590000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 000002B2 803D[B76A0000]01    <1> 	cmp byte [threadson], 1
   389 000002B9 0F849A670000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002BF 803D[B76A0000]00    <1> 	cmp byte [threadson], 0
   393 000002C6 0F84B3000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397 000002CC FE05[6A020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   398 000002D2 0F85A7000000        <1> 	jnz near handled
   399                              <1> 	
   400 000002D8 60                  <1> 	pusha
   401 000002D9 E464                <1> 	in al, 64h
   402 000002DB A820                <1> 	test al, 20h
   403 000002DD 0F859B000000        <1> 	jnz near handled2
   404 000002E3 E460                <1> 	in al, 60h
   405 000002E5 3C01                <1> 	cmp al, 1		;escape
   406 000002E7 7405                <1> 	je userint
   407 000002E9 E990000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002EE 31C0                <1> 	xor eax, eax
   430 000002F0 3905[04AE0300]      <1> 	cmp [sigtable], eax
   431 000002F6 7410                <1> 	je .nosighook
   432 000002F8 8B1D[04AE0300]      <1> 	mov ebx, [sigtable]
   433 000002FE 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 00000302 B020                <1> 	mov al, 0x20
   436 00000304 E620                <1> 	out 0x20, al
   437 00000306 61                  <1> 	popa
   438 00000307 CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 00000308 E621                <1> 	out 0x21, al
   442 0000030A E6A1                <1> 	out 0xA1, al
   443 0000030C B020                <1> 	mov al, 0x20
   444 0000030E E6A0                <1> 	out 0xA0, al
   445 00000310 E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 00000312 66A1[64020000]      <1> 	mov ax, [pitdiv]
   448 00000318 E640                <1> 	out 0x40, al
   449 0000031A 66C1C008            <1> 	rol ax, 8
   450 0000031E E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 00000320 B020                <1> 	mov al, 0x20
   453 00000322 E620                <1> 	out 0x20, al
   454 00000324 61                  <1> 	popa
   455 00000325 E9ED090000          <1> 	jmp unhand + 12
   456                              <1> 	;pop ebp
   457                              <1> 	;pop ebp
   458                              <1> 	;popf
   459                              <1> 	;mov esp, stackend ;reset stack
   460                              <1> 	;jmp returnfromexp
   461                              <1> %endif
   462 0000032A 0A                  <1> rtcrate db 10
   463                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   464                              <1> %ifdef io.serial
   465                              <1> %else
   466                              <1> %ifdef terminal.vsync
   467 0000032B 803D[2B290000]00    <1> 	cmp byte [termcopyneeded], 0
   468 00000332 7405                <1> 	je .nocopy
   469 00000334 E8FB250000          <1> 	call newtermcopy
   470                              <1> .nocopy:
   471 00000339 50                  <1> 	push eax
   472 0000033A B00C                <1> 	mov al, 0xC
   473 0000033C E670                <1> 	out 0x70, al
   474 0000033E E471                <1> 	in al, 0x71
   475 00000340 58                  <1> 	pop eax
   476                              <1> %endif
   477                              <1> %endif
   478 00000341 E940000000          <1> 	jmp handledboth
   479                              <1> %ifdef rtl8139.included
   480                              <1> nextpacket dd rbuffstart
   481                              <1> rtl8139.irq:
   482                              <1> 	pusha
   483                              <1> 	mov dx, [rtl8139.basenicaddr]
   484                              <1> 	add dx, rtl8139.ISR
   485                              <1> 	xor eax, eax
   486                              <1> 	in ax, dx
   487                              <1> 	out dx, ax
   488                              <1> 	test ax, 1
   489                              <1> 	jz  near .norec
   490                              <1> 	mov esi, packetrecvmsg
   491                              <1> 	call print
   492                              <1> 	mov esi, [nextpacket]
   493                              <1> 	cmp esi, rbuffend
   494                              <1> 	jb .goodesi
   495                              <1> 	mov esi, rbuffstart
   496                              <1> .goodesi:
   497                              <1> 	mov ecx, esi
   498                              <1> 	sub ecx, rbuffstart
   499                              <1> 	call showhex
   500                              <1> 	mov ecx, [esi]
   501                              <1> 	test ecx, 1
   502                              <1> 	jz .notgood
   503                              <1> 	call showhex
   504                              <1> 	add esi, 4
   505                              <1> 	xor edi, edi
   506                              <1> 	mov di, [esi - 2]
   507                              <1> 	mov ecx, edi
   508                              <1> 	add edi, esi
   509                              <1> 	sub ecx, 4
   510                              <1> 	call showdec
   511                              <1> 
   512                              <1> 	mov ecx, edi
   513                              <1> 	sub ecx, rbuffstart
   514                              <1> 	add ecx, 3
   515                              <1> 	shr ecx, 2
   516                              <1> 	shl ecx, 2
   517                              <1> 	call showhex
   518                              <1> .notgood	
   519                              <1> 	mov  dx, [rtl8139.basenicaddr]
   520                              <1> 	add dx, rtl8139.CBR
   521                              <1> 	xor eax, eax
   522                              <1> 	in ax, dx
   523                              <1> 	mov ecx, eax
   524                              <1> 	call showhex
   525                              <1> 	
   526                              <1> 	mov dx, [rtl8139.basenicaddr]
   527                              <1> 	add dx, rtl8139.CAPR
   528                              <1> 	out dx, ax
   529                              <1> 	
   530                              <1> 	add eax, rbuffstart
   531                              <1> 	mov [nextpacket], eax
   532                              <1> 	
   533                              <1> ;	int3
   534                              <1> ;.lp:
   535                              <1> ;	mov cl, [esi]
   536                              <1> ;	call showhexsmall
   537                              <1> ;	inc esi
   538                              <1> ;	cmp esi, [nextpacket]
   539                              <1> ;	jb .lp
   540                              <1> ;	mov ecx, [esi]
   541                              <1> ;	call showhex
   542                              <1> ;	call printline
   543                              <1> .norec:
   544                              <1> 	popa
   545                              <1> 	jmp handledboth
   546                              <1> packetrecvmsg db 10,"Packet: ",0
   547                              <1> %endif
   548                              <1> %ifdef sound.included
   549                              <1> sblaster.irq:
   550 00000346 60                  <1> 	pusha
   551 00000347 803D[225F0000]01    <1> 	cmp byte [SoundBlaster], 1
   552 0000034E 0F84C8590000        <1> 	je near sblaster.cont
   553 00000354 E925000000          <1> 	jmp handled2
   554                              <1> %endif
   555                              <1> 	
   556                              <1> timekeeper:
   557 00000359 50                  <1> 	push eax
   558 0000035A A1[6F020000]        <1> 	mov eax, [timenanoseconds]
   559 0000035F 0305[66020000]      <1> 	add eax, [timeinterval]
   560 00000365 3D00CA9A3B          <1> 	cmp eax, 1000000000
   561 0000036A 720B                <1> 	jb nonanosecondrollover
   562 0000036C FF05[6B020000]      <1> 	inc dword [timeseconds]
   563 00000372 2D00CA9A3B          <1> 	sub eax, 1000000000
   564                              <1> 	%ifdef gui.time
   565                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   566                              <1> 		cmp byte [guion], 1
   567                              <1> 		jne nonanosecondrollover
   568                              <1> 		cmp dword [dragging], 0
   569                              <1> 		jne nonanosecondrollover
   570                              <1> 		pusha
   571                              <1> 		call guitime
   572                              <1> 		popa
   573                              <1> 	%endif
   574                              <1> nonanosecondrollover:
   575 00000377 A3[6F020000]        <1> 	mov [timenanoseconds], eax
   576 0000037C 58                  <1> 	pop eax
   577 0000037D C3                  <1> 	ret
   578                              <1> 	
   579                              <1> handled2:
   580 0000037E 61                  <1> 	popa
   581                              <1> handled:
   582 0000037F 50                  <1> 	push eax
   583 00000380 B020                <1> 	mov al, 0x20
   584 00000382 E620                <1> 	out 0x20, al
   585 00000384 58                  <1> 	pop eax
   586 00000385 CF                  <1> 	iret
   587                              <1> handledboth:
   588 00000386 50                  <1> 	push eax
   589 00000387 B020                <1> 	mov al, 0x20
   590 00000389 E6A0                <1> 	out 0xA0, al
   591 0000038B E620                <1> 	out 0x20, al
   592 0000038D 58                  <1> 	pop eax
   593 0000038E CF                  <1> 	iret
   594                              <1> 	
   595                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   596 0000038F 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   597 00000391 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   598                              <1> 
   599 00000395 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   600 00000397 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   601                              <1> 
   602                              <1> 
   603 0000039B 0000                <1> gdt:	dw 0			; limit 15:0
   604 0000039D 0000                <1> 	dw 0			; base 15:0
   605 0000039F 00                  <1> 	db 0			; base 23:16
   606 000003A0 00                  <1> 	db 0			; type
   607 000003A1 00                  <1> 	db 0			; limit 19:16, flags
   608 000003A2 00                  <1> 	db 0			; base 31:24
   609                              <1> ; linear data segment descriptor
   610                              <1> LINEAR_SEL	equ	$-gdt
   611 000003A3 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   612 000003A5 0000                <1> 	dw 0			; base for this one is always 0
   613 000003A7 00                  <1> 	db 0
   614 000003A8 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   615 000003A9 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   616 000003AA 00                  <1> 	db 0
   617                              <1> STACK_SEL	equ $-gdt
   618 000003AB 0200                <1> gdts:	dw 2;(stackend)/4096
   619 000003AD 0000                <1> 	dw 0
   620 000003AF 00                  <1> 	db 0
   621 000003B0 92                  <1> 	db 0x92
   622 000003B1 CF                  <1> 	db 0xCF
   623 000003B2 00                  <1> 	db 0
   624                              <1> ; code segment descriptor
   625                              <1> SYS_CODE_SEL	equ	$-gdt
   626 000003B3 FFFF                <1> gdt2:	dw 0xFFFF
   627 000003B5 0000                <1> 	dw 0			; (base gets set above)
   628 000003B7 00                  <1> 	db 0
   629 000003B8 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   630 000003B9 CF                  <1> 	db 0xCF
   631 000003BA 00                  <1> 	db 0
   632                              <1> ; data segment descriptor
   633                              <1> SYS_DATA_SEL	equ	$-gdt
   634 000003BB FFFF                <1> gdt3:	dw 0xFFFF
   635 000003BD 0000                <1> 	dw 0			; (base gets set above)
   636 000003BF 00                  <1> 	db 0
   637 000003C0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   638 000003C1 CF                  <1> 	db 0xCF
   639 000003C2 00                  <1> 	db 0
   640                              <1> NEW_CODE_SEL	equ	$-gdt
   641 000003C3 FFFF                <1> gdt4:	dw 0xFFFF
   642 000003C5 0000                <1> 	dw 0			; (base gets set above)
   643 000003C7 00                  <1> 	db 0
   644 000003C8 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   645 000003C9 CF                  <1> 	db 0xCF
   646 000003CA 00                  <1> 	db 0
   647                              <1> ; data segment descriptor
   648                              <1> NEW_DATA_SEL	equ	$-gdt
   649 000003CB FFFF                <1> gdt5:	dw 0xFFFF
   650 000003CD 0000                <1> 	dw 0			; (base gets set above)
   651 000003CF 00                  <1> 	db 0
   652 000003D0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   653 000003D1 CF                  <1> 	db 0xCF
   654 000003D2 00                  <1> 	db 0
   655                              <1> V8086_CODE_SEL	equ $-gdt
   656 000003D3 FFFF                <1> gdtv8086: dw 0xFFFF
   657 000003D5 0000                <1> 	dw 0
   658 000003D7 00                  <1> 	db 0
   659 000003D8 9A                  <1> 	db 0x9A
   660 000003D9 8F                  <1> 	db 0x8F
   661 000003DA 00                  <1> 	db 0
   662                              <1> V8086_DATA_SEL	equ $-gdt
   663 000003DB FFFF                <1> gdtv80862: dw 0xFFFF
   664 000003DD 0000                <1> 	dw 0
   665 000003DF 00                  <1> 	db 0
   666 000003E0 92                  <1> 	db 0x92
   667 000003E1 8F                  <1> 	db 0x8F
   668 000003E2 00                  <1> 	db 0
   669                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   670 000003E3 0001                <1> gdtdos:	dw 256	;give it 1 MB
   671 000003E5 0000                <1> 	dw 0
   672 000003E7 00                  <1> 	db 0
   673 000003E8 9A                  <1> 	db 0x9A
   674 000003E9 8F                  <1> 	db 0x8F ;16 bit
   675 000003EA 00                  <1> 	db 0
   676                              <1> DOS_DATA_SEL 	equ $-gdt
   677 000003EB 0001                <1> gdtdos2:	dw 256
   678 000003ED 0000                <1> 	dw 0
   679 000003EF 00                  <1> 	db 0
   680 000003F0 92                  <1> 	db 0x92
   681 000003F1 8F                  <1> 	db 0x8F ;16 bit
   682 000003F2 00                  <1> 	db 0
   683                              <1> gdt_end:
   684                              <1> 
   685                              <1> ;	interrupt descriptor table (IDT)
   686                              <1> ; 32 reserved interrupts:
   687                              <1> idt:	
   688                              <1> %assign i 0
   689                              <1> %rep    8
   690                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <1> %assign i i+1
   692                              <1> %endrep
   693 000003F3 [0B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 000003FB [170D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 00000403 [230D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 0000040B [2F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 00000413 [3B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 0000041B [470D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i i+1
   705 00000423 [530D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i i+1
   707 0000042B [5F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i i+1
   709 00000433 [6B0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   710                              <1> %assign i 9
   711                              <1> %rep    23
   712                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <1> %assign i i+1
   714                              <1> %endrep
   715 0000043B [770D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i i+1
   717 00000443 [830D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i i+1
   719 0000044B [8F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i i+1
   721 00000453 [9B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i i+1
   723 0000045B [A70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i i+1
   725 00000463 [B30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i i+1
   727 0000046B [BF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i i+1
   729 00000473 [CB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i i+1
   731 0000047B [D70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i i+1
   733 00000483 [E30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i i+1
   735 0000048B [EF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i i+1
   737 00000493 [FB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i i+1
   739 0000049B [070E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i i+1
   741 000004A3 [130E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i i+1
   743 000004AB [1F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i i+1
   745 000004B3 [2B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i i+1
   747 000004BB [370E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i i+1
   749 000004C3 [430E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i i+1
   751 000004CB [4F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i i+1
   753 000004D3 [5B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i i+1
   755 000004DB [670E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i i+1
   757 000004E3 [730E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i i+1
   759 000004EB [7F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i i+1
   761 000004F3 [6A2A]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   762 000004FB [6E2A]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   763                              <1> %assign i 0x22
   764                              <1> %rep 14
   765                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <1> %assign i +1
   767                              <1> %endrep
   768 00000503 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 0000050B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 00000513 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 0000051B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 00000523 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 0000052B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 00000533 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 0000053B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 00000543 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 0000054B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788 00000553 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   789                              <2> %assign i +1
   790 0000055B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   791                              <2> %assign i +1
   792 00000563 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   793                              <2> %assign i +1
   794 0000056B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   795                              <2> %assign i +1
   796                              <1> ;INT 30h for os use and 3rd party use:
   797 00000573 [121C]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   798                              <1> %assign i 0x31
   799                              <1> %rep 15
   800                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   801                              <1> %assign i +1
   802                              <1> %endrep
   803 0000057B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   804                              <2> %assign i +1
   805 00000583 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   806                              <2> %assign i +1
   807 0000058B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   808                              <2> %assign i +1
   809 00000593 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   810                              <2> %assign i +1
   811 0000059B [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   812                              <2> %assign i +1
   813 000005A3 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   814                              <2> %assign i +1
   815 000005AB [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   816                              <2> %assign i +1
   817 000005B3 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   818                              <2> %assign i +1
   819 000005BB [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   820                              <2> %assign i +1
   821 000005C3 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   822                              <2> %assign i +1
   823 000005CB [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   824                              <2> %assign i +1
   825 000005D3 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   826                              <2> %assign i +1
   827 000005DB [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   828                              <2> %assign i +1
   829 000005E3 [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   830                              <2> %assign i +1
   831 000005EB [7F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   832                              <2> %assign i +1
   833                              <1> ;and here we are at 0x40
   834                              <1> ;here are all the irq's
   835 000005F3 [9702]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   836 000005FB [7F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   837 00000603 [7F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   838 0000060B [7F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   839 00000613 [7F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   840                              <1> 	%ifdef sound.included
   841 0000061B [4603]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   842                              <1> 	%else
   843                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   844                              <1> 	%endif
   845 00000623 [7F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   846 0000062B [7F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   847 00000633 [2B03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   848 0000063B [8603]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   849 00000643 [8603]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   850                              <1> 	%ifdef rtl8139.included
   851                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   852                              <1> 	%else
   853 0000064B [8603]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   854                              <1> 	%endif
   855 00000653 [8603]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   856 0000065B [8603]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   857 00000663 [8603]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   858 0000066B [8603]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   859                              <1> ;This brings me up to 0x50
   860                              <1> %assign i 0x50
   861                              <1> %rep 176
   862                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   864                              <1> %assign i +1
   865                              <1> %endrep
   866 00000673 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000067B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000683 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 0000068B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000693 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 0000069B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006A3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006AB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000006B3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000006BB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000006C3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000006CB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000006D3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000006DB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000006E3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000006EB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 000006F3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 000006FB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000703 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000070B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000713 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000071B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000723 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000072B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000733 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000073B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000743 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000074B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000753 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000075B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000763 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000076B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000773 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000077B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000783 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 0000078B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000793 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 0000079B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007A3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007AB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000007B3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000007BB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000007C3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000007CB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000007D3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000007DB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000007E3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000007EB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 000007F3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 000007FB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000803 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000080B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000813 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000081B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000823 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000082B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000833 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000083B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000843 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000084B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000853 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000085B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000863 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 0000086B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000873 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 0000087B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000883 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 0000088B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000893 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 0000089B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008A3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008AB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000008B3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000008BB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000008C3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000008CB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 000008D3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 000008DB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 000008E3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 000008EB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 000008F3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 000008FB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000903 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000090B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000913 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000091B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000923 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000092B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000933 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000093B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000943 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000094B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000953 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 0000095B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000963 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 0000096B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000973 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 0000097B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000983 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 0000098B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000993 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 0000099B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009A3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009AB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 000009B3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 000009BB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 000009C3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 000009CB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 000009D3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 000009DB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 000009E3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 000009EB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 000009F3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 000009FB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A03 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A0B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A13 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A1B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A23 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A2B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A33 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A3B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A43 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A4B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A53 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A5B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000A63 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000A6B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000A73 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000A7B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000A83 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000A8B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000A93 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000A9B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AA3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000AAB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000AB3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000ABB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000AC3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000ACB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000AD3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000ADB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000AE3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000AEB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000AF3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000AFB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B03 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B0B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B13 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B1B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B23 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B2B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B33 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B3B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B43 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B4B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B53 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B5B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000B63 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000B6B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000B73 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349 00000B7B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1350                              <2> 
  1351                              <2> %assign i +1
  1352 00000B83 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1353                              <2> 
  1354                              <2> %assign i +1
  1355 00000B8B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1356                              <2> 
  1357                              <2> %assign i +1
  1358 00000B93 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1359                              <2> 
  1360                              <2> %assign i +1
  1361 00000B9B [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1362                              <2> 
  1363                              <2> %assign i +1
  1364 00000BA3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1365                              <2> 
  1366                              <2> %assign i +1
  1367 00000BAB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1368                              <2> 
  1369                              <2> %assign i +1
  1370 00000BB3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1371                              <2> 
  1372                              <2> %assign i +1
  1373 00000BBB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1374                              <2> 
  1375                              <2> %assign i +1
  1376 00000BC3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1377                              <2> 
  1378                              <2> %assign i +1
  1379 00000BCB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1380                              <2> 
  1381                              <2> %assign i +1
  1382 00000BD3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1383                              <2> 
  1384                              <2> %assign i +1
  1385 00000BDB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1386                              <2> 
  1387                              <2> %assign i +1
  1388 00000BE3 [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1389                              <2> 
  1390                              <2> %assign i +1
  1391 00000BEB [7F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1392                              <2> 
  1393                              <2> %assign i +1
  1394                              <1> idt_end:
  1395                                  	%include "source/realmode.asm"
  1396                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1397                              <1> 
  1398 00000BF3 FA                  <1> 	cli
  1399 00000BF4 A3[010D0000]        <1> 	mov [realmodeeax], eax
  1400 00000BF9 891D[FD0C0000]      <1> 	mov [realmodeebx], ebx
  1401 00000BFF 8925[EF0C0000]      <1> 	mov [pmodeesp], esp
  1402                              <1> 
  1403 00000C05 BB[F90C0000]        <1> 	mov ebx, cr0old
  1404                              <1> rmcopytofirstmbyte:
  1405 00000C0A 8B03                <1> 	mov eax, [ebx]
  1406 00000C0C 658903              <1> 	mov [gs:ebx], eax
  1407 00000C0F 81C304000000        <1> 	add ebx, 4
  1408 00000C15 81FB[050D0000]      <1> 	cmp ebx, realmodeptr
  1409 00000C1B 76ED                <1> 	jbe rmcopytofirstmbyte
  1410                              <1> 
  1411 00000C1D EA[240C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1412                              <1> 
  1413                              <1> [BITS 16]
  1414                              <1> protected16bit:
  1415 00000C24 B84000              <1> 	mov ax, V8086_DATA_SEL
  1416 00000C27 8ED8                <1> 	mov ds, ax
  1417 00000C29 8EC0                <1> 	mov es, ax
  1418 00000C2B 8EE0                <1> 	mov fs, ax
  1419 00000C2D 8EE8                <1> 	mov gs, ax
  1420 00000C2F 8ED0                <1> 	mov ss, ax
  1421 00000C31 66BC[00AE0300]      <1> 	mov esp, stackend
  1422 00000C37 0F20C0              <1> 	mov eax, cr0
  1423 00000C3A 66A3[F90C]          <1> 	mov [cr0old], eax
  1424 00000C3E 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1425 00000C44 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1426 00000C47 EA[4C0C]0010        <1> 	jmp 0x1000:inrealmode
  1427                              <1> 
  1428                              <1> inrealmode:
  1429 00000C4C 8CC8                <1> 	mov ax, cs
  1430 00000C4E 8ED8                <1> 	mov ds, ax
  1431 00000C50 8EC0                <1> 	mov es, ax
  1432 00000C52 8EE0                <1> 	mov fs, ax
  1433 00000C54 8EE8                <1> 	mov gs, ax
  1434 00000C56 8ED0                <1> 	mov ss, ax
  1435 00000C58 BC[00AE]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1436                              <1> 	
  1437 00000C5B B011                <1> 	mov al, 0x11
  1438 00000C5D E620                <1> 	out 0x20, al
  1439 00000C5F E6A0                <1> 	out 0xA0, al
  1440 00000C61 B008                <1> 	mov al, 0x8		;interrupt for master
  1441 00000C63 E621                <1> 	out 0x21, al
  1442 00000C65 B070                <1> 	mov al, 0x70	;interrupt for slave
  1443 00000C67 E6A1                <1> 	out 0xA1, al
  1444 00000C69 B004                <1> 	mov al, 4
  1445 00000C6B E621                <1> 	out 0x21, al
  1446 00000C6D B002                <1> 	mov al, 2
  1447 00000C6F E6A1                <1> 	out 0xA1, al
  1448 00000C71 B001                <1> 	mov al, 0x1
  1449 00000C73 E621                <1> 	out 0x21, al
  1450 00000C75 B001                <1> 	mov al, 0x1
  1451 00000C77 E6A1                <1> 	out 0xA1, al
  1452                              <1> 	
  1453 00000C79 0F011E[F30C]        <1> 	lidt [idt_real]
  1454 00000C7E FB                  <1> 	sti
  1455                              <1> 
  1456 00000C7F 66A1[010D]          <1> 	mov eax, [realmodeeax]
  1457 00000C83 668B1E[FD0C]        <1> 	mov ebx, [realmodeebx]
  1458                              <1> 
  1459 00000C88 FF16[050D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1460                              <1> 
  1461 00000C8C 66A3[010D]          <1> 	mov [realmodeeax], eax
  1462 00000C90 66891E[FD0C]        <1> 	mov [realmodeebx], ebx
  1463                              <1> 
  1464 00000C95 FA                  <1> 	cli
  1465 00000C96 0F0116[8F03]        <1> 	lgdt [gdtr]
  1466 00000C9B 0F011E[9503]        <1> 	lidt [idtr]
  1467 00000CA0 0F20C0              <1> 	mov eax, cr0
  1468 00000CA3 0C01                <1> 	or al, 1
  1469 00000CA5 0F22C0              <1> 	mov cr0,eax
  1470 00000CA8 EA[AD0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1471                              <1> 
  1472                              <1> [BITS 32]
  1473                              <1> returntopmode:
  1474 00000CAD 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1475 00000CB1 8ED8                <1> 	mov ds, ax
  1476 00000CB3 8EC0                <1> 	mov es, ax
  1477 00000CB5 8EE0                <1> 	mov fs, ax
  1478 00000CB7 8ED0                <1> 	mov ss, ax
  1479 00000CB9 8B25[EF0C0000]      <1> 	mov esp, [pmodeesp]
  1480 00000CBF 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1481 00000CC3 8EE8                <1> 	mov gs, ax
  1482                              <1> 
  1483 00000CC5 BB[F90C0000]        <1> 	mov ebx, cr0old
  1484                              <1> rmcopyfromfirstmbyte:
  1485 00000CCA 658B03              <1> 	mov eax, [gs:ebx]
  1486 00000CCD 8903                <1> 	mov [ebx], eax
  1487 00000CCF 81C304000000        <1> 	add ebx, 4
  1488 00000CD5 81FB[050D0000]      <1> 	cmp ebx, realmodeptr
  1489 00000CDB 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1490                              <1> 
  1491 00000CDD E804580000          <1> 	call initialize.pic ;reset irq's and masks
  1492 00000CE2 FB                  <1> 	sti
  1493 00000CE3 A1[010D0000]        <1> 	mov eax, [realmodeeax]
  1494 00000CE8 8B1D[FD0C0000]      <1> 	mov ebx, [realmodeebx]
  1495 00000CEE C3                  <1> 	ret
  1496                              <1> 	
  1497 00000CEF 00000000            <1> pmodeesp dd 0
  1498                              <1> idt_real:
  1499 00000CF3 FF03                <1> 	dw 0x3FF
  1500 00000CF5 00000000            <1> 	dd 0
  1501 00000CF9 00000000            <1> cr0old dd 0
  1502 00000CFD 00000000            <1> realmodeebx dd 0
  1503 00000D01 00000000            <1> realmodeeax dd 0
  1504 00000D05 0000                <1> realmodeptr dw 0
  1505 00000D07 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1506                                  [BITS 32]
  1507                                      %include "source/exception.asm"
  1508                              <1> %ifdef exceptions.included
  1509                              <1> unhand:	
  1510                              <1> 	%assign i 0
  1511                              <1> 	%rep 32
  1512                              <1> 	mov byte [intprob], i
  1513                              <1> 	jmp unhand2
  1514                              <1> 	%assign i i+1
  1515                              <1> 	%endrep
  1516 00000D0B C605[CB110000]00    <2>  mov byte [intprob], i
  1517 00000D12 E974010000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000D17 C605[CB110000]01    <2>  mov byte [intprob], i
  1520 00000D1E E968010000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000D23 C605[CB110000]02    <2>  mov byte [intprob], i
  1523 00000D2A E95C010000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000D2F C605[CB110000]03    <2>  mov byte [intprob], i
  1526 00000D36 E950010000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000D3B C605[CB110000]04    <2>  mov byte [intprob], i
  1529 00000D42 E944010000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000D47 C605[CB110000]05    <2>  mov byte [intprob], i
  1532 00000D4E E938010000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000D53 C605[CB110000]06    <2>  mov byte [intprob], i
  1535 00000D5A E92C010000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000D5F C605[CB110000]07    <2>  mov byte [intprob], i
  1538 00000D66 E920010000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000D6B C605[CB110000]08    <2>  mov byte [intprob], i
  1541 00000D72 E914010000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000D77 C605[CB110000]09    <2>  mov byte [intprob], i
  1544 00000D7E E908010000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000D83 C605[CB110000]0A    <2>  mov byte [intprob], i
  1547 00000D8A E9FC000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000D8F C605[CB110000]0B    <2>  mov byte [intprob], i
  1550 00000D96 E9F0000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000D9B C605[CB110000]0C    <2>  mov byte [intprob], i
  1553 00000DA2 E9E4000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000DA7 C605[CB110000]0D    <2>  mov byte [intprob], i
  1556 00000DAE E9D8000000          <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000DB3 C605[CB110000]0E    <2>  mov byte [intprob], i
  1559 00000DBA E9CC000000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 00000DBF C605[CB110000]0F    <2>  mov byte [intprob], i
  1562 00000DC6 E9C0000000          <2>  jmp unhand2
  1563                              <2>  %assign i i+1
  1564 00000DCB C605[CB110000]10    <2>  mov byte [intprob], i
  1565 00000DD2 E9B4000000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 00000DD7 C605[CB110000]11    <2>  mov byte [intprob], i
  1568 00000DDE E9A8000000          <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 00000DE3 C605[CB110000]12    <2>  mov byte [intprob], i
  1571 00000DEA E99C000000          <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 00000DEF C605[CB110000]13    <2>  mov byte [intprob], i
  1574 00000DF6 E990000000          <2>  jmp unhand2
  1575                              <2>  %assign i i+1
  1576 00000DFB C605[CB110000]14    <2>  mov byte [intprob], i
  1577 00000E02 E984000000          <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00000E07 C605[CB110000]15    <2>  mov byte [intprob], i
  1580 00000E0E E978000000          <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00000E13 C605[CB110000]16    <2>  mov byte [intprob], i
  1583 00000E1A E96C000000          <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 00000E1F C605[CB110000]17    <2>  mov byte [intprob], i
  1586 00000E26 E960000000          <2>  jmp unhand2
  1587                              <2>  %assign i i+1
  1588 00000E2B C605[CB110000]18    <2>  mov byte [intprob], i
  1589 00000E32 E954000000          <2>  jmp unhand2
  1590                              <2>  %assign i i+1
  1591 00000E37 C605[CB110000]19    <2>  mov byte [intprob], i
  1592 00000E3E E948000000          <2>  jmp unhand2
  1593                              <2>  %assign i i+1
  1594 00000E43 C605[CB110000]1A    <2>  mov byte [intprob], i
  1595 00000E4A E93C000000          <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 00000E4F C605[CB110000]1B    <2>  mov byte [intprob], i
  1598 00000E56 E930000000          <2>  jmp unhand2
  1599                              <2>  %assign i i+1
  1600 00000E5B C605[CB110000]1C    <2>  mov byte [intprob], i
  1601 00000E62 E924000000          <2>  jmp unhand2
  1602                              <2>  %assign i i+1
  1603 00000E67 C605[CB110000]1D    <2>  mov byte [intprob], i
  1604 00000E6E E918000000          <2>  jmp unhand2
  1605                              <2>  %assign i i+1
  1606 00000E73 C605[CB110000]1E    <2>  mov byte [intprob], i
  1607 00000E7A E90C000000          <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 00000E7F C605[CB110000]1F    <2>  mov byte [intprob], i
  1610 00000E86 E900000000          <2>  jmp unhand2
  1611                              <2>  %assign i i+1
  1612                              <1> unhand2:
  1613 00000E8B FA                  <1> 	cli
  1614 00000E8C 1E                  <1> 	push ds
  1615 00000E8D 06                  <1> 	push es
  1616 00000E8E 0FA0                <1> 	push fs
  1617 00000E90 0FA8                <1> 	push gs
  1618 00000E92 16                  <1> 	push ss
  1619 00000E93 60                  <1> 	pushad
  1620                              <1> %ifdef gui.included
  1621 00000E94 803D[028A0000]00    <1> 	cmp byte [guion], 0
  1622 00000E9B 0F8432000000        <1> 	je near noguiunhandstuff
  1623 00000EA1 66C705[C5110000]08- <1> 	mov word [locunhandy], 8
  1624 00000EA9 00                  <1>
  1625 00000EAA 66C705[C7110000]08- <1> 	mov word [locunhandx], 8
  1626 00000EB2 00                  <1>
  1627 00000EB3 668B1D[27720000]    <1> 	mov bx, [background]
  1628 00000EBA 66891D[C9110000]    <1> 	mov [backgroundcache], bx
  1629 00000EC1 C605[2A590000]01    <1> 	mov byte [mousedisabled],1
  1630 00000EC8 66BB00F8            <1> 	mov bx, 1111100000000000b
  1631 00000ECC 66891D[27720000]    <1> 	mov [background], bx
  1632                              <1> noguiunhandstuff:
  1633                              <1> %endif
  1634 00000ED3 89E6                <1> 	mov esi, esp
  1635 00000ED5 8935[B9110000]      <1> 	mov [espfirst], esi
  1636 00000EDB 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1637 00000EE1 8935[B5110000]      <1> 	mov [esploc], esi
  1638 00000EE7 BE[DA110000]        <1> 	mov esi, unhandmsg
  1639 00000EEC 8935[BD110000]      <1> 	mov [esiloc], esi
  1640 00000EF2 31C9                <1> 	xor ecx, ecx
  1641 00000EF4 8A0D[CB110000]      <1> 	mov cl, [intprob]
  1642 00000EFA BB[A9150000]        <1> 	mov ebx, errortypes
  1643 00000EFF C1E102              <1> 	shl ecx, 2
  1644 00000F02 01CB                <1> 	add ebx, ecx
  1645 00000F04 81FB[E9150000]      <1> 	cmp ebx, errortypesend
  1646 00000F0A 7205                <1> 	jb gooderrortype
  1647 00000F0C BB[E9150000]        <1> 	mov ebx, errortypesend
  1648                              <1> gooderrortype:
  1649 00000F11 8B33                <1> 	mov esi, [ebx]
  1650                              <1> %ifdef gui.included
  1651 00000F13 803D[028A0000]00    <1> 	cmp byte [guion], 0
  1652 00000F1A 0F842D000000        <1> 	je near errortext
  1653 00000F20 668B0D[C5110000]    <1> 	mov cx, [locunhandy]
  1654 00000F27 668B15[C7110000]    <1> 	mov dx, [locunhandx]
  1655 00000F2E 66B80100            <1> 	mov ax, 1
  1656 00000F32 6631DB              <1> 	xor bx, bx
  1657 00000F35 E85C690000          <1> 	call showstring2
  1658 00000F3A 66890D[C5110000]    <1> 	mov [locunhandy], cx
  1659 00000F41 668915[C7110000]    <1> 	mov [locunhandx], dx
  1660 00000F48 E905000000          <1> 	jmp errortextdone
  1661                              <1> %endif
  1662                              <1> errortext:
  1663 00000F4D E81B0E0000          <1> 	call print		;get the error message and print it
  1664                              <1> errortextdone:
  1665 00000F52 31C9                <1> 	xor ecx, ecx
  1666 00000F54 8A0D[CB110000]      <1> 	mov cl, [intprob]
  1667 00000F5A E8EF010000          <1> 	call expdump
  1668                              <1> dumpstack:
  1669 00000F5F 8B35[B5110000]      <1> 	mov esi, [esploc]
  1670 00000F65 39E6                <1> 	cmp esi, esp
  1671 00000F67 7219                <1> 	jb donedump
  1672 00000F69 368B0E              <1> 	mov ecx, [ss:esi]
  1673 00000F6C 81EE04000000        <1> 	sub esi, 4
  1674 00000F72 8935[B5110000]      <1> 	mov [esploc], esi
  1675 00000F78 E8D1010000          <1> 	call expdump
  1676 00000F7D E9DDFFFFFF          <1> 	jmp dumpstack
  1677                              <1> donedump:
  1678 00000F82 0F20C1              <1> 	mov ecx, cr0
  1679 00000F85 E8C4010000          <1> 	call expdump
  1680 00000F8A 0F20D1              <1> 	mov ecx, cr2
  1681 00000F8D E8BC010000          <1> 	call expdump
  1682 00000F92 0F20D9              <1> 	mov ecx, cr3
  1683 00000F95 E8B4010000          <1> 	call expdump
  1684 00000F9A 0F20E1              <1> 	mov ecx, cr4
  1685 00000F9D E8AC010000          <1> 	call expdump
  1686 00000FA2 0F00C9              <1> 	str ecx
  1687 00000FA5 E8A4010000          <1> 	call expdump
  1688 00000FAA 0F010D[D4110000]    <1> 	sidt [igdtcache]
  1689 00000FB1 8B0D[D6110000]      <1> 	mov ecx, [igdtcache + 2]
  1690 00000FB7 E892010000          <1> 	call expdump
  1691 00000FBC 0F0105[D4110000]    <1> 	sgdt [igdtcache]
  1692 00000FC3 8B0D[D6110000]      <1> 	mov ecx, [igdtcache + 2]
  1693 00000FC9 E880010000          <1> 	call expdump
  1694 00000FCE 0F00C1              <1> 	sldt ecx
  1695 00000FD1 E878010000          <1> 	call expdump
  1696 00000FD6 8B35[B5110000]      <1> 	mov esi, [esploc]
  1697 00000FDC 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1698 00000FE1 81C710000000        <1> 	add edi, 16
  1699 00000FE7 893D[D0110000]      <1> 	mov [codelocend], edi
  1700 00000FED 81EF20000000        <1> 	sub edi, 32
  1701                              <1> dumpcodeloop:
  1702 00000FF3 893D[CC110000]      <1> 	mov [codeloc], edi
  1703 00000FF9 8B0F                <1> 	mov ecx, [edi]
  1704 00000FFB E84E010000          <1> 	call expdump
  1705 00001000 8B3D[CC110000]      <1> 	mov edi, [codeloc]
  1706 00001006 81C704000000        <1> 	add edi, 4
  1707 0000100C 3B3D[D0110000]      <1> 	cmp edi, [codelocend]
  1708 00001012 72DF                <1> 	jb dumpcodeloop
  1709 00001014 BE[DF100000]        <1> 	mov esi, backtoosmsg
  1710                              <1> %ifdef gui.included
  1711 00001019 803D[028A0000]00    <1> 	cmp byte [guion], 0
  1712 00001020 741F                <1> 	je backtomsg
  1713                              <1> guibacktomsg:
  1714 00001022 668B15[C7110000]    <1> 	mov dx, [locunhandx]
  1715 00001029 668B0D[C5110000]    <1> 	mov cx, [locunhandy]
  1716 00001030 66B80100            <1> 	mov ax, 1
  1717 00001034 6631DB              <1> 	xor bx, bx
  1718 00001037 E85A680000          <1> 	call showstring2
  1719 0000103C E905000000          <1> 	jmp backtomsgdone
  1720                              <1> backtomsg:
  1721                              <1> %endif
  1722 00001041 E8270D0000          <1> 	call print
  1723                              <1> backtomsgdone:
  1724 00001046 30C0                <1> 	xor al, al
  1725 00001048 E83E130000          <1> 	call rdcharint
  1726 0000104D 803D[CB110000]03    <1> 	cmp byte [intprob], 3
  1727 00001054 7541                <1> 	jne nodebugint
  1728                              <1> %ifdef gui.included
  1729 00001056 803D[028A0000]00    <1> 	cmp byte [guion], 0
  1730 0000105D 7427                <1> 	je nodebuggui
  1731 0000105F 668B1D[C9110000]    <1> 	mov bx, [backgroundcache]
  1732 00001066 66891D[27720000]    <1> 	mov [background], bx
  1733 0000106D 6631DB              <1> 	xor bx, bx
  1734 00001070 C605[2A590000]00    <1> 	mov byte [mousedisabled], 0
  1735 00001077 E81C610000          <1> 	call guiclear
  1736 0000107C E8AA610000          <1> 	call reloadallgraphics
  1737 00001081 E89D180000          <1> 	call termcopy
  1738                              <1> nodebuggui:
  1739                              <1> %endif
  1740 00001086 8B35[B9110000]      <1> 	mov esi, [espfirst]
  1741 0000108C 89F4                <1> 	mov esp, esi
  1742 0000108E 61                  <1> 	popad
  1743 0000108F 17                  <1> 	pop ss
  1744 00001090 0FA9                <1> 	pop gs
  1745 00001092 0FA1                <1> 	pop fs
  1746 00001094 07                  <1> 	pop es
  1747 00001095 1F                  <1> 	pop ds
  1748 00001096 CF                  <1> 	iret
  1749                              <1> nodebugint:
  1750 00001097 61                  <1> 	popad
  1751 00001098 17                  <1> 	pop ss
  1752 00001099 0FA9                <1> 	pop gs
  1753 0000109B 0FA1                <1> 	pop fs
  1754 0000109D 07                  <1> 	pop es
  1755 0000109E 1F                  <1> 	pop ds
  1756 0000109F 81C408000000        <1> 	add esp, 8
  1757                              <1> ;	popf ;pop the cs segment selector into eflags
  1758                              <1> ;	popf ;then pop the flags
  1759                              <1> %ifdef gui.included
  1760 000010A5 803D[028A0000]00    <1> 	cmp byte [guion], 0
  1761 000010AC 7427                <1> 	je returnunhandgui
  1762 000010AE 668B1D[C9110000]    <1> 	mov bx, [backgroundcache]
  1763 000010B5 66891D[27720000]    <1> 	mov [background], bx
  1764 000010BC 6631DB              <1> 	xor bx, bx
  1765 000010BF C605[2A590000]00    <1> 	mov byte [mousedisabled], 0
  1766 000010C6 E8CD600000          <1> 	call guiclear
  1767 000010CB E85B610000          <1> 	call reloadallgraphics
  1768 000010D0 E84E180000          <1> 	call termcopy
  1769                              <1> %endif
  1770                              <1> returnunhandgui:
  1771 000010D5 BC[00AE0300]        <1> 	mov esp, stackend ;reset stack
  1772 000010DA E9A71C0000          <1> 	jmp nwcmd
  1773 000010DF 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1774 000010E8 737420616E79207072- <1>
  1775 000010F1 6F626C656D7320696E- <1>
  1776 000010FA 207468652049737375- <1>
  1777 00001103 65732073656374696F- <1>
  1778 0000110C 6E20617420736F6C6C- <1>
  1779 00001115 65726F732E676F6F67- <1>
  1780 0000111E 6C65636F64652E636F- <1>
  1781 00001127 6D0A                <1>
  1782 00001129 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1783 00001132 206B657920746F2072- <1>
  1784 0000113B 657475726E20746F20- <1>
  1785 00001144 536F6C6C65724F530A- <1>
  1786 0000114D 00                  <1>
  1787                              <1> expdump:
  1788 0000114E 8B35[BD110000]      <1> 	mov esi, [esiloc]
  1789 00001154 89F7                <1> 	mov edi, esi
  1790 00001156 81C70F000000        <1> 	add edi, 15
  1791 0000115C 81C604000000        <1> 	add esi, 4
  1792 00001162 893D[BD110000]      <1> 	mov [esiloc], edi
  1793 00001168 81EF03000000        <1> 	sub edi, 3
  1794 0000116E E8AB200000          <1> 	call converthex
  1795 00001173 81EE04000000        <1> 	sub esi, 4
  1796                              <1> %ifdef gui.included
  1797 00001179 803D[028A0000]00    <1> 	cmp byte [guion], 0
  1798 00001180 0F8429000000        <1> 	je near expdumptext
  1799 00001186 668B0D[C5110000]    <1> 	mov cx, [locunhandy]
  1800 0000118D 668B15[C7110000]    <1> 	mov dx, [locunhandx]
  1801 00001194 66B80100            <1> 	mov ax, 1
  1802 00001198 6631DB              <1> 	xor bx, bx
  1803 0000119B E8F6660000          <1> 	call showstring2
  1804 000011A0 66890D[C5110000]    <1> 	mov [locunhandy], cx
  1805 000011A7 668915[C7110000]    <1> 	mov [locunhandx], dx
  1806 000011AE C3                  <1> 	ret
  1807                              <1> %endif
  1808                              <1> expdumptext:
  1809 000011AF E8B90B0000          <1> 	call print
  1810 000011B4 C3                  <1> 	ret
  1811 000011B5 00000000            <1> esploc dd 0
  1812 000011B9 00000000            <1> espfirst dd 0
  1813 000011BD 00000000            <1> esiloc dd 0
  1814 000011C1 00000000            <1> esiregbuf dd 0
  1815 000011C5 0100                <1> locunhandy dw 1
  1816 000011C7 0100                <1> locunhandx dw 1
  1817 000011C9 0000                <1> backgroundcache dw 0
  1818 000011CB 00                  <1> intprob db 0
  1819 000011CC 00000000            <1> codeloc dd 0
  1820 000011D0 00000000            <1> codelocend dd 0
  1821 000011D4 000000000000        <1> igdtcache dw 0,0,0
  1822                              <1> 	unhandmsg:	
  1823 000011DA 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1824 000011E3 303030FF0A00        <1>
  1825                              <1> unhndrg:
  1826 000011E9 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1827 000011F2 303030202000<rept>  <1>
  1828 00001252 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1829 0000125B 303030FF0A00        <1>
  1830 00001261 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1831 0000126A 303030202000<rept>  <1>
  1832 000012CA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1833 000012D3 303030FF0A00        <1>
  1834 000012D9 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1835 000012E2 303030202000<rept>  <1>
  1836 00001342 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1837 0000134B 303030FF0A00        <1>
  1838 00001351 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1839 0000135A 303030202000<rept>  <1>
  1840 000013BA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 000013C3 303030FF0A00        <1>
  1842                              <1> unhandregs:
  1843 000013C9 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1844 000013D2 303030202000        <1>
  1845 000013D8 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1846 000013E1 303030202000        <1>
  1847 000013E7 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1848 000013F0 303030FF0A00        <1>
  1849 000013F6 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1850 000013FF 303030202000        <1>
  1851 00001405 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1852 0000140E 303030202000        <1>
  1853 00001414 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1854 0000141D 303030202000        <1>
  1855 00001423 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1856 0000142C 303030202000        <1>
  1857 00001432 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1858 0000143B 303030FF0A00        <1>
  1859 00001441 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1860 0000144A 303030202000        <1>
  1861 00001450 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1862 00001459 303030202000        <1>
  1863 0000145F 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1864 00001468 303030202000        <1>
  1865 0000146E 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1866 00001477 303030FF0A00        <1>
  1867 0000147D 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1868 00001486 303030202000        <1>
  1869 0000148C 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1870 00001495 303030202000        <1>
  1871 0000149B 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1872 000014A4 303030202000        <1>
  1873 000014AA 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1874 000014B3 303030FF0A00        <1>
  1875 000014B9 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1876 000014C2 303030202000        <1>
  1877 000014C8 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1878 000014D1 303030202000        <1>
  1879 000014D7 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1880 000014E0 303030202000        <1>
  1881 000014E6 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1882 000014EF 303030FF0A00        <1>
  1883 000014F5 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1884 000014FE 303030202000        <1>
  1885 00001504 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1886 0000150D 303030202000        <1>
  1887 00001513 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1888 0000151C 303030202000        <1>
  1889 00001522 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1890 0000152B 303030FF0A00        <1>
  1891 00001531 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1892 0000153A 303030202000<rept>  <1>
  1893 0000154F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1894 00001558 30303020FF00        <1>
  1895 0000155E FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1896 00001567 3030305D2000        <1>
  1897 0000156D FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1898 00001576 303030202000<rept>  <1>
  1899 0000159A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1900 000015A3 303030FF0A00        <1>
  1901                              <1> unhandmsgend:
  1902                              <1> 
  1903                              <1> errortypes:
  1904 000015A9 [ED150000]          <1> 			dd err0
  1905 000015AD [56160000]          <1> 			dd err1
  1906 000015B1 [B7160000]          <1> 			dd err2
  1907 000015B5 [0C170000]          <1> 			dd err3
  1908 000015B9 [70170000]          <1> 			dd err4
  1909 000015BD [C2170000]          <1> 			dd err5
  1910 000015C1 [2C180000]          <1> 			dd err6
  1911 000015C5 [94180000]          <1> 			dd err7
  1912 000015C9 [DE180000]          <1> 			dd err8
  1913 000015CD [3B190000]          <1> 			dd err9
  1914 000015D1 [94190000]          <1> 			dd err10
  1915 000015D5 [DF190000]          <1> 			dd err11
  1916 000015D9 [2F1A0000]          <1> 			dd err12
  1917 000015DD [881A0000]          <1> 			dd err13
  1918 000015E1 [EB1A0000]          <1> 			dd err14
  1919 000015E5 [271B0000]          <1> 			dd err15
  1920                              <1> errortypesend:
  1921 000015E9 [B31B0000]          <1> 			dd unknownerror
  1922                              <1> 			
  1923 000015ED 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1924 000015F6 6279207A65726F3A0A  <1>
  1925 000015FF 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1926 00001608 6C79206C696D2061C3- <1>
  1927 00001611 B778203D20E2889E20- <1>
  1928 0000161A 7768656E2061206973- <1>
  1929 00001623 20616E79207265616C- <1>
  1930 0000162C 206E756D6265722E20- <1>
  1931 00001635 486170707920456173- <1>
  1932 0000163E 746572210A          <1>
  1933 00001643 202020202020202020- <1> 		db "            x→0",10,0
  1934 0000164C 20202078E28692300A- <1>
  1935 00001655 00                  <1>
  1936                              <1> 		
  1937 00001656 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1938 0000165F 65702F427265616B70- <1>
  1939 00001668 6F696E743A0A        <1>
  1940 0000166E 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1941 00001677 696E74206661756C74- <1>
  1942 00001680 2C20627265616B706F- <1>
  1943 00001689 696E7420747261702C- <1>
  1944 00001692 206F722073696E676C- <1>
  1945 0000169B 652D73746570207472- <1>
  1946 000016A4 617020776173207472- <1>
  1947 000016AD 696767657265642E0A- <1>
  1948 000016B6 00                  <1>
  1949                              <1> 		
  1950 000016B7 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1951 000016C0 6C6520696E74657272- <1>
  1952 000016C9 7570743A0A          <1>
  1953 000016CE 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1954 000016D7 6520696E7465727275- <1>
  1955 000016E0 707420776173207472- <1>
  1956 000016E9 696767657265642074- <1>
  1957 000016F2 68617420636F756C64- <1>
  1958 000016FB 206E6F74206265206D- <1>
  1959 00001704 61736B65642E0A00    <1>
  1960                              <1> 		
  1961 0000170C 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1962 00001715 743A0A              <1>
  1963 00001718 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1964 00001721 727275707420697320- <1>
  1965 0000172A 7573656420696E2070- <1>
  1966 00001733 726F6772616D732074- <1>
  1967 0000173C 6F2073686F77207468- <1>
  1968 00001745 6520737461636B2061- <1>
  1969 0000174E 6E6420726567697374- <1>
  1970 00001757 65727320616E642063- <1>
  1971 00001760 616E2062650A        <1>
  1972 00001766 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1973 0000176F 00                  <1>
  1974                              <1> 		
  1975 00001770 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1976 00001779 0A                  <1>
  1977 0000177A 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1978 00001783 73736F722072616E20- <1>
  1979 0000178C 696E746F20616E2049- <1>
  1980 00001795 4E544F20696E737472- <1>
  1981 0000179E 756374696F6E207769- <1>
  1982 000017A7 746820746865206F76- <1>
  1983 000017B0 6572666C6F7720666C- <1>
  1984 000017B9 6167207365742E0A00  <1>
  1985                              <1> 		
  1986 000017C2 426F756E6473206368- <1> err5	db "Bounds check:",10
  1987 000017CB 65636B3A0A          <1>
  1988 000017D0 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1989 000017D9 73736F72207265626F- <1>
  1990 000017E2 756E6465642066726F- <1>
  1991 000017EB 6D206120424F554E44- <1>
  1992 000017F4 20696E737472756374- <1>
  1993 000017FD 696F6E2072756E206F- <1>
  1994 00001806 6E20616E206F706572- <1>
  1995 0000180F 616E64207468617420- <1>
  1996 00001818 776173206F75740A    <1>
  1997 00001820 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1998 00001829 2E0A00              <1>
  1999                              <1> 		
  2000 0000182C 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2001 00001835 70636F64653A0A      <1>
  2002 0000183C 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2003 00001845 73736F722068617320- <1>
  2004 0000184E 6E6F20696465612077- <1>
  2005 00001857 686174206974207761- <1>
  2006 00001860 7320747279696E6720- <1>
  2007 00001869 746F20657865637574- <1>
  2008 00001872 652E20446F6E277420- <1>
  2009 0000187B 72756E205353453420- <1>
  2010 00001884 636F64650A          <1>
  2011 00001889 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2012 00001892 0A00                <1>
  2013                              <1> 		
  2014 00001894 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2015 0000189D 6F72206E6F74206176- <1>
  2016 000018A6 61696C61626C653A0A  <1>
  2017 000018AF 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2018 000018B8 206B6E6F7720746865- <1>
  2019 000018C1 7920646F6E2774206D- <1>
  2020 000018CA 616B652074686F7365- <1>
  2021 000018D3 20616E796D6F726521- <1>
  2022 000018DC 0A00                <1>
  2023                              <1> 		
  2024 000018DE 446F75626C65206661- <1> err8	db "Double fault:",10
  2025 000018E7 756C743A0A          <1>
  2026 000018EC 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2027 000018F5 74696F6E2068616E64- <1>
  2028 000018FE 6C657220636F756C64- <1>
  2029 00001907 206E6F742068616E64- <1>
  2030 00001910 6C6520746861742069- <1>
  2031 00001919 7420636F756C64206E- <1>
  2032 00001922 6F742068616E646C65- <1>
  2033 0000192B 20616E206578636570- <1>
  2034 00001934 74696F6E2E0A00      <1>
  2035                              <1> 		
  2036 0000193B 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2037 00001944 6F72207365676D656E- <1>
  2038 0000194D 74206F76657272756E- <1>
  2039 00001956 3A0A00              <1>
  2040 00001959 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2041 00001962 722068617070656E73- <1>
  2042 0000196B 20696E206D6F646572- <1>
  2043 00001974 6E20636F6D70757465- <1>
  2044 0000197D 72732C20616E64206E- <1>
  2045 00001986 657665722073686F75- <1>
  2046 0000198F 6C642E0A00          <1>
  2047                              <1> 
  2048 00001994 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2049 0000199D 53533A0A            <1>
  2050 000019A1 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2051 000019AA 686174207761732073- <1>
  2052 000019B3 776974636865642074- <1>
  2053 000019BC 6F20697320696E7661- <1>
  2054 000019C5 6C69642E204E6F7468- <1>
  2055 000019CE 696E672066756E6E79- <1>
  2056 000019D7 20686572652E0A00    <1>
  2057                              <1> 		
  2058 000019DF 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2059 000019E8 6F742070726573656E- <1>
  2060 000019F1 743A0A              <1>
  2061 000019F4 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2062 000019FD 6E7420626974206F66- <1>
  2063 00001A06 20746865207365676D- <1>
  2064 00001A0F 656E74206465736372- <1>
  2065 00001A18 6970746F7220697320- <1>
  2066 00001A21 73657420746F207A65- <1>
  2067 00001A2A 726F2E0A00          <1>
  2068                              <1> 		
  2069 00001A2F 537461636B20657863- <1> err12	db "Stack exception:",10
  2070 00001A38 657074696F6E3A0A    <1>
  2071 00001A40 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2072 00001A49 7363726970746F7220- <1>
  2073 00001A52 697320696E76616C69- <1>
  2074 00001A5B 64206F72206E6F7420- <1>
  2075 00001A64 70726573656E74206F- <1>
  2076 00001A6D 7220697473206C696D- <1>
  2077 00001A76 697420697320746F6F- <1>
  2078 00001A7F 20736D616C6C2E0A00  <1>
  2079                              <1> 		
  2080 00001A88 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2081 00001A91 726F74656374696F6E- <1>
  2082 00001A9A 2076696F6C6174696F- <1>
  2083 00001AA3 6E3A0A              <1>
  2084 00001AA6 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2085 00001AAF 746564207468652063- <1>
  2086 00001AB8 6F6D70757465722E20- <1>
  2087 00001AC1 537465702061776179- <1>
  2088 00001ACA 20736C6F776C792E20- <1>
  2089 00001AD3 546865204642492069- <1>
  2090 00001ADC 73206F6E2069747320- <1>
  2091 00001AE5 7761792E0A00        <1>
  2092                              <1> 		
  2093 00001AEB 50616765206661756C- <1> err14	db "Page fault:",10
  2094 00001AF4 743A0A              <1>
  2095 00001AF7 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2096 00001B00 746861742077617320- <1>
  2097 00001B09 726571756573746564- <1>
  2098 00001B12 20776173206E6F7420- <1>
  2099 00001B1B 617661696C61626C65- <1>
  2100 00001B24 2E0A00              <1>
  2101                              <1> 		
  2102 00001B27 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2103 00001B30 666F7220506C616E20- <1>
  2104 00001B39 523A0A              <1>
  2105 00001B3C 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2106 00001B45 727275707420697320- <1>
  2107 00001B4E 726573657276656420- <1>
  2108 00001B57 666F72207573616765- <1>
  2109 00001B60 206F6E6C7920627920- <1>
  2110 00001B69 746865206D696C6974- <1>
  2111 00001B72 617279207768656E20- <1>
  2112 00001B7B 6974206973206E6563- <1>
  2113 00001B84 6573736172790A      <1>
  2114 00001B8B 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2115 00001B94 746520612066756C6C- <1>
  2116 00001B9D 2D7363616C6520636F- <1>
  2117 00001BA6 7570206427C3A97461- <1>
  2118 00001BAF 742E0A00            <1>
  2119                              <1> 		
  2120 00001BB3 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2121 00001BBC 68656C6C206A757374- <1>
  2122 00001BC5 2068617070656E6564- <1>
  2123 00001BCE 3F2049732065766572- <1>
  2124 00001BD7 796F6E65206F6B6179- <1>
  2125 00001BE0 3F2048617264206472- <1>
  2126 00001BE9 6976653F2056696465- <1>
  2127 00001BF2 6F20636172643F0A    <1>
  2128 00001BFA 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2129 00001C03 726520796F75207468- <1>
  2130 00001C0C 6572653F0A00        <1>
  2131                              <1> %else
  2132                              <1> unhand:	
  2133                              <1> 	%assign i 0
  2134                              <1> 	%rep 32
  2135                              <1> 	mov byte [intprob], i
  2136                              <1> 	jmp unhand2
  2137                              <1> 	%assign i i+1
  2138                              <1> 	%endrep
  2139                              <1> unhand2:
  2140                              <1> 	cmp byte [intprob], 3
  2141                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2142                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2143                              <1> 					;CD is the machine instruction for interrupt
  2144                              <1> 					;DEAD shows that the program died because of the int
  2145                              <1> 	mov bl, [intprob]
  2146                              <1> 	jmp exitprog
  2147                              <1> intprob db 0
  2148                              <1> %endif
  2149                                      %include "source/ints.asm"
  2150                              <1> int30h:	;for great justice
  2151 00001C12 80FC00              <1> 	cmp ah, 0
  2152 00001C15 0F849A000000        <1> 	je near exitprog   ;kills app
  2153 00001C1B 80FC01              <1> 	cmp ah, 1
  2154 00001C1E 0F8419010000        <1> 	je near prntstr  ;print string
  2155 00001C24 80FC02              <1> 	cmp ah, 2
  2156 00001C27 0F84C2010000        <1> 	je near readstr	;read string
  2157 00001C2D 80FC03              <1> 	cmp ah, 3
  2158 00001C30 0F84E2010000        <1> 	je near clearscrn	;clear screen
  2159 00001C36 80FC04              <1> 	cmp ah, 4
  2160 00001C39 0F8457020000        <1> 	je near prntreadstr	;read and print string
  2161 00001C3F 80FC05              <1> 	cmp ah, 5
  2162 00001C42 0F8437070000        <1> 	je near readchar	;get char
  2163 00001C48 80FC06              <1> 	cmp ah, 6
  2164 00001C4B 0F849E070000        <1> 	je near prntchar	;print char
  2165 00001C51 80FC07              <1> 	cmp ah, 7
  2166 00001C54 0F84BD090000        <1> 	je near openfile	;read file
  2167                              <1> ;	cmp ah, 8
  2168                              <1> ;	je near closefile	;close file
  2169 00001C5A 80FC09              <1> 	cmp ah, 9
  2170 00001C5D 0F84BE090000        <1> 	je near num2str	;convert number to string
  2171 00001C63 80FC0A              <1> 	cmp ah, 10
  2172 00001C66 0F84CD090000        <1> 	je near str2num	;convert string to number
  2173                              <1> %ifdef threads.included
  2174 00001C6C 80FC0B              <1> 	cmp ah, 11
  2175 00001C6F 0F84D0090000        <1> 	je near forkthread	;create thread
  2176                              <1> %endif
  2177 00001C75 80FC0C              <1> 	cmp ah, 12
  2178 00001C78 0F849E0A0000        <1> 	je near gettime	;get time
  2179 00001C7E 80FC0D              <1> 	cmp ah, 13
  2180 00001C81 0F84AA0A0000        <1> 	je near settime	;set time
  2181 00001C87 80FC0E              <1> 	cmp ah, 14
  2182 00001C8A 0F84B10A0000        <1> 	je near runcmd	;run program
  2183 00001C90 80FC0F              <1> 	cmp ah, 15
  2184 00001C93 0F84BD0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2185 00001C99 80FC10              <1> 	cmp ah, 16
  2186 00001C9C 0F84E20A0000        <1> 	je near hooksig	;hook code to a signal
  2187                              <1> %ifdef gui.included
  2188 00001CA2 80FC11              <1> 	cmp ah, 17
  2189 00001CA5 0F84E90A0000        <1> 	je near guiint	;GUI operations
  2190                              <1> %endif
  2191                              <1> %ifdef sound.included
  2192 00001CAB 80FC12              <1> 	cmp ah, 18
  2193 00001CAE 0F846A0C0000        <1> 	je near soundint	;sound operations
  2194                              <1> %endif
  2195                              <1> %ifdef network.included
  2196                              <1> 	cmp ah, 19
  2197                              <1> 	je near netint	;networking operations
  2198                              <1> %endif
  2199 00001CB4 CF                  <1> 	iret
  2200                              <1> 
  2201                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2202                              <2> exitprog:
  2203 00001CB5 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2204 00001CB9 8ED8                <2> 	mov ds, ax
  2205 00001CBB 8EC0                <2> 	mov es, ax
  2206 00001CBD 8EE0                <2> 	mov fs, ax
  2207 00001CBF 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2208 00001CC3 8EE8                <2> 	mov gs, ax
  2209 00001CC5 C705[B86A0000]0000- <2> 	mov dword [currentthread], 0
  2210 00001CCD 0000                <2>
  2211 00001CCF C705[B36A0000]0400- <2> 	mov dword [lastthread], 4
  2212 00001CD7 0000                <2>
  2213 00001CD9 C605[B76A0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2214 00001CE0 8B25[08B20300]      <2> 	mov esp, [previousstack] ;and this
  2215 00001CE6 81FB00000000        <2> 	cmp ebx, 0
  2216 00001CEC 0F8501000000        <2> 	jne near .error
  2217 00001CF2 C3                  <2> 	ret
  2218                              <2> .error:
  2219 00001CF3 89D9                <2> 	mov ecx, ebx
  2220 00001CF5 B006                <2> 	mov al, 6
  2221 00001CF7 A2[7F320000]        <2> 	mov [firsthexshown], al
  2222 00001CFC 51                  <2> 	push ecx
  2223 00001CFD BE[181D0000]        <2> 	mov esi, .msg1
  2224 00001D02 E855000000          <2> 	call printhighlight
  2225 00001D07 59                  <2> 	pop ecx
  2226 00001D08 E887150000          <2> 	call showhex
  2227 00001D0D BE[2D1D0000]        <2> 	mov esi, .msg2
  2228 00001D12 E845000000          <2> 	call printhighlight
  2229 00001D17 C3                  <2> 	ret
  2230                              <2> 	
  2231 00001D18 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2232 00001D21 7461747573206F6620- <2>
  2233 00001D2A 307800              <2>
  2234 00001D2D 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2235 00001D36 726E65642E0A00      <2>
  2236                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2237                              <2> prntstr:
  2238 00001D3D 30E4                <2> xor ah, ah
  2239 00001D3F E830000000          <2> call printint
  2240 00001D44 E969E5FFFF          <2> jmp timerinterrupt
  2241                              <2> 
  2242                              <2> 	printquiet:
  2243 00001D49 6631C0              <2> 		xor ax, ax
  2244 00001D4C 66A3[ED1D0000]      <2> 		mov [endkeyprint], ax
  2245 00001D52 66BB0700            <2> 		mov bx, 7
  2246 00001D56 E832000000          <2> 		call printint.b
  2247 00001D5B C3                  <2> 		ret
  2248                              <2> 
  2249                              <2> 	printhighlight:
  2250 00001D5C 6631C0              <2> 		xor ax, ax
  2251 00001D5F 66BBF000            <2> 		mov bx, 0xF0
  2252 00001D63 E90C000000          <2> 		jmp printint
  2253                              <2> 
  2254                              <2> 	printline:
  2255 00001D68 BE[DD890000]        <2> 		mov esi, line
  2256                              <2>     print:
  2257 00001D6D 6631C0              <2> 		xor ax, ax
  2258 00001D70 66BB0700            <2> 		mov bx, 7
  2259                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2260 00001D74 56                  <2> 		push esi
  2261 00001D75 66A3[ED1D0000]      <2> 		mov [endkeyprint], ax
  2262 00001D7B E80D000000          <2> 		call .b
  2263 00001D80 89F1                <2> 		mov ecx, esi
  2264 00001D82 5F                  <2> 		pop edi
  2265 00001D83 29F9                <2> 		sub ecx, edi
  2266 00001D85 51                  <2> 		push ecx
  2267 00001D86 E8980B0000          <2> 		call termcopy
  2268 00001D8B 59                  <2> 		pop ecx
  2269 00001D8C C3                  <2> 		ret
  2270                              <2> 	.b:	
  2271 00001D8D 53                  <2> 		push ebx
  2272 00001D8E 31C0                <2> 		xor eax, eax
  2273 00001D90 8A06                <2> 		mov al, [esi]
  2274 00001D92 3CFF                <2> 		cmp al, 0xFF
  2275 00001D94 7506                <2> 		jne .notnull
  2276 00001D96 5B                  <2> 		pop ebx
  2277 00001D97 E94A000000          <2> 		jmp .noprint
  2278                              <2> 	.notnull:
  2279 00001D9C 3CC0                <2> 		cmp al, 0xC0
  2280 00001D9E 7231                <2> 		jb .doneutf
  2281 00001DA0 3CE0                <2> 		cmp al, 0xE0
  2282 00001DA2 721A                <2> 		jb .two
  2283 00001DA4 46                  <2> 		inc esi
  2284 00001DA5 8A2E                <2> 		mov ch, [esi]
  2285 00001DA7 46                  <2> 		inc esi
  2286 00001DA8 8A0E                <2> 		mov cl, [esi]
  2287 00001DAA C0E004              <2> 		shl al, 4
  2288 00001DAD C0E102              <2> 		shl cl, 2
  2289 00001DB0 66C1E902            <2> 		shr cx, 2
  2290 00001DB4 08C5                <2> 		or ch, al
  2291 00001DB6 6689C8              <2> 		mov ax, cx
  2292 00001DB9 E913000000          <2> 		jmp .doneutf
  2293                              <2> 	.two:
  2294 00001DBE 8A2E                <2> 		mov ch, [esi]
  2295 00001DC0 46                  <2> 		inc esi
  2296 00001DC1 8A0E                <2> 		mov cl, [esi]
  2297 00001DC3 66C1E102            <2> 		shl cx, 2
  2298 00001DC7 C0ED02              <2> 		shr ch, 2
  2299 00001DCA 66C1E902            <2> 		shr cx, 2
  2300 00001DCE 6689C8              <2> 		mov ax, cx
  2301                              <2> 	.doneutf:
  2302 00001DD1 5B                  <2> 		pop ebx
  2303 00001DD2 663B05[ED1D0000]    <2> 		cmp ax, [endkeyprint]
  2304 00001DD9 7411                <2> 		je .done
  2305 00001DDB 663DFFFE            <2> 		cmp ax, 0xFEFF
  2306 00001DDF 7405                <2> 		je .noprint
  2307 00001DE1 E836060000          <2> 		call prcharq
  2308                              <2> 	.noprint:
  2309 00001DE6 46                  <2> 		inc esi
  2310 00001DE7 E9A1FFFFFF          <2> 		jmp .b
  2311                              <2> 	.done:
  2312 00001DEC C3                  <2> 		ret
  2313                              <2> 
  2314 00001DED 0000                <2> endkeyprint dw 0
  2315                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2316                              <2> readstr:
  2317 00001DEF E805000000          <2> call readint
  2318 00001DF4 E9B9E4FFFF          <2> jmp timerinterrupt
  2319                              <2> 
  2320                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2321 00001DF9 89C3                <2> 		mov ebx, eax
  2322                              <2> 	.b:
  2323 00001DFB 53                  <2> 		push ebx
  2324 00001DFC 57                  <2> 		push edi
  2325 00001DFD 56                  <2> 		push esi
  2326 00001DFE 30C0                <2> 		xor al, al
  2327 00001E00 E886050000          <2> 		call rdcharint
  2328 00001E05 5E                  <2> 		pop esi
  2329 00001E06 8806                <2> 		mov [esi], al
  2330 00001E08 46                  <2> 		inc esi
  2331 00001E09 5F                  <2> 		pop edi
  2332 00001E0A 5B                  <2> 		pop ebx
  2333 00001E0B 39FE                <2> 		cmp esi, edi
  2334 00001E0D 7304                <2> 		jae .done
  2335 00001E0F 38D8                <2> 		cmp al, bl
  2336 00001E11 75E8                <2> 		jne .b
  2337                              <2> 	.done:
  2338 00001E13 4E                  <2> 		dec esi
  2339 00001E14 C60600              <2> 		mov byte [esi], 0
  2340 00001E17 C3                  <2> 		ret
  2341                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2342                              <2> clearscrn:
  2343 00001E18 E805000000          <2> call clear
  2344 00001E1D E990E4FFFF          <2> jmp timerinterrupt
  2345                              <2> %ifdef io.serial
  2346                              <2> clear:
  2347                              <2> 	mov esi, .str
  2348                              <2> 	call print
  2349                              <2> 	ret
  2350                              <2> .str db 27,"[2J",27,"[f",0
  2351                              <2> %else
  2352                              <2> clear:
  2353 00001E22 668B0D[11260000]    <2> 		mov cx, [charxy]
  2354 00001E29 BF[9CE32B00]        <2> 		mov edi, videobuf
  2355 00001E2E 31C0                <2> 		xor eax, eax
  2356 00001E30 A3[07260000]        <2> 		mov [linebeginpos], eax
  2357 00001E35 A3[0B260000]        <2> 		mov [videobufpos], eax
  2358 00001E3A 6631D2              <2> 		xor dx, dx
  2359 00001E3D 66A3[0F260000]      <2> 		mov [charpos], ax
  2360 00001E43 66B80700            <2> 		mov ax, 7
  2361 00001E47 C1E010              <2> 		shl eax, 16
  2362                              <2> 	clearb:
  2363 00001E4A 8907                <2> 		mov [edi], eax
  2364 00001E4C 81C704000000        <2> 		add edi, 4
  2365 00001E52 FEC9                <2> 		dec cl
  2366 00001E54 80F900              <2> 		cmp cl, 0
  2367 00001E57 75F1                <2> 		jne clearb
  2368 00001E59 8A0D[11260000]      <2> 		mov cl, [charxy]
  2369 00001E5F FECD                <2> 		dec ch
  2370 00001E61 80FD00              <2> 		cmp ch, 0
  2371 00001E64 75E4                <2> 		jne clearb
  2372                              <2> 	cleardouble:
  2373 00001E66 BF[E4B82C00]        <2> 		mov edi, videobuf2
  2374 00001E6B 668B0D[11260000]    <2> 		mov cx, [charxy]
  2375 00001E72 31C0                <2> 		xor eax, eax
  2376                              <2> 	clearc:
  2377 00001E74 8907                <2> 		mov [edi], eax
  2378 00001E76 81C704000000        <2> 		add edi, 4
  2379 00001E7C FEC9                <2> 		dec cl
  2380 00001E7E 80F900              <2> 		cmp cl, 0
  2381 00001E81 75F1                <2> 		jne clearc
  2382 00001E83 8A0D[11260000]      <2> 		mov cl, [charxy]
  2383 00001E89 FECD                <2> 		dec ch
  2384 00001E8B 80FD00              <2> 		cmp ch, 0
  2385 00001E8E 75E4                <2> 		jne clearc
  2386 00001E90 E88E0A0000          <2> 		call termcopy
  2387 00001E95 C3                  <2> 		ret
  2388                              <2> %endif
  2389                              <2> 		
  2390                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2391                              <2> prntreadstr:
  2392 00001E96 E80B000000          <2> call rdprint
  2393 00001E9B E912E4FFFF          <2> jmp timerinterrupt
  2394                              <2> 
  2395                              <2> readline:
  2396 00001EA0 B00A                <2>   mov al, 10
  2397 00001EA2 66BB0700            <2>   mov bx, 7
  2398                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2399 00001EA6 E80F000000          <2> 	call rdprintdos
  2400 00001EAB 50                  <2> 	push eax
  2401 00001EAC A0[6A230000]        <2> 	mov al, [endkeyrdpr]
  2402 00001EB1 30E4                <2> 	xor ah, ah
  2403 00001EB3 E84D050000          <2> 	call prcharint
  2404 00001EB8 58                  <2> 	pop eax
  2405 00001EB9 C3                  <2> 	ret
  2406                              <2> 
  2407                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2408 00001EBA 8935[74230000]      <2> 		mov [buftxtloc], esi
  2409 00001EC0 A2[6A230000]        <2> 		mov [endkeyrdpr], al
  2410 00001EC5 66891D[6C230000]    <2> 		mov [modkeyrdpr], bx
  2411 00001ECC 8935[6E230000]      <2> 		mov [firstesirdpr], esi
  2412 00001ED2 893D[78230000]      <2> 		mov [endbufferrdpr], edi
  2413 00001ED8 8B3D[388E2D00]      <2> 		mov edi, [commandsentered]
  2414 00001EDE 893D[348E2D00]      <2> 		mov [commandlistentries], edi
  2415                              <2> 	rdprintb:
  2416 00001EE4 56                  <2> 		push esi
  2417 00001EE5 B001                <2> 		mov al, 1
  2418 00001EE7 E89F040000          <2> 		call rdcharint
  2419 00001EEC 8A25[EB230000]      <2> 		mov ah, [lastkey + 2]
  2420 00001EF2 88E1                <2> 		mov cl, ah
  2421 00001EF4 5E                  <2> 		pop esi
  2422                              <2> %ifdef io.serial
  2423                              <2> 		cmp ah, 0x41
  2424                              <2> 		je near rdprup
  2425                              <2> 		cmp ah, 0x42
  2426                              <2> 		je near rdprdown
  2427                              <2> 		cmp ah, 0x43
  2428                              <2> 		je near rdprright
  2429                              <2> 		cmp ah, 0x44
  2430                              <2> 		je near rdprleft
  2431                              <2> 		cmp ah, 0x31
  2432                              <2> 		je near rdprhome
  2433                              <2> 		cmp ah, 0x48
  2434                              <2> 		je near rdprhome
  2435                              <2> 		cmp ah, 0x46
  2436                              <2> 		je near rdprend
  2437                              <2> 		cmp ah, 0x33
  2438                              <2> 		je near rdprdel
  2439                              <2> 		cmp ah, 0x34
  2440                              <2> 		je near rdprend
  2441                              <2> %else
  2442 00001EF5 803D[235F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2443 00001EFC 753F                <2> 		jne notspecialrdprnt
  2444 00001EFE 80FC53              <2> 		cmp ah, 0x53
  2445 00001F01 0F84C9030000        <2> 		je near rdprdel
  2446 00001F07 80FC47              <2> 		cmp ah, 0x47
  2447 00001F0A 0F8481010000        <2> 		je near rdprhome
  2448 00001F10 80FC4F              <2> 		cmp ah, 0x4F
  2449 00001F13 0F849A010000        <2> 		je near rdprend
  2450 00001F19 80FC50              <2> 		cmp ah, 0x50
  2451 00001F1C 0F8430020000        <2> 		je near rdprdown
  2452 00001F22 80FC4D              <2> 		cmp ah, 0x4D
  2453 00001F25 0F84CA010000        <2> 		je near rdprright
  2454 00001F2B 80FC4B              <2> 		cmp ah, 0x4B
  2455 00001F2E 0F849F010000        <2> 		je near rdprleft
  2456 00001F34 80FC48              <2> 		cmp ah, 0x48
  2457 00001F37 0F8458020000        <2> 		je near rdprup
  2458                              <2> 	notspecialrdprnt:
  2459                              <2> %endif
  2460 00001F3D 66A1[E9230000]      <2> 		mov ax, [lastkey]
  2461 00001F43 663D0800            <2> 		cmp ax, 8
  2462 00001F47 0F84B8030000        <2> 		je near rdprbscheck
  2463 00001F4D 663D0000            <2> 		cmp ax, 0
  2464 00001F51 7491                <2> 		je rdprintb
  2465 00001F53 80F900              <2> 		cmp cl, 0
  2466 00001F56 748C                <2> 		je rdprintb
  2467 00001F58 663D8000            <2> 		cmp ax, 0x80
  2468 00001F5C 7257                <2> 		jb .normal
  2469 00001F5E 663D0008            <2> 		cmp ax, 0x800
  2470 00001F62 7321                <2> 		jae .three
  2471 00001F64 46                  <2> 		inc esi
  2472 00001F65 3B35[78230000]      <2> 		cmp esi, [endbufferrdpr]
  2473 00001F6B 0F83DA000000        <2> 		jae near donerdprinc
  2474 00001F71 66C1E002            <2> 		shl ax, 2
  2475 00001F75 C0E802              <2> 		shr al, 2
  2476 00001F78 0C80                <2> 		or al, 10000000b
  2477 00001F7A 80CCC0              <2> 		or ah, 11000000b
  2478 00001F7D 8866FF              <2> 		mov [esi - 1], ah
  2479 00001F80 E930000000          <2> 		jmp .normal
  2480                              <2> .three:	
  2481 00001F85 81C602000000        <2> 		add esi, 2
  2482 00001F8B 3B35[78230000]      <2> 		cmp esi, [endbufferrdpr]
  2483 00001F91 0F83B4000000        <2> 		jae near donerdprinc
  2484 00001F97 88E1                <2> 		mov cl, ah
  2485 00001F99 C0E904              <2> 		shr cl, 4
  2486 00001F9C 80C9E0              <2> 		or cl, 11100000b
  2487 00001F9F 884EFE              <2> 		mov [esi - 2], cl
  2488 00001FA2 66C1E004            <2> 		shl ax, 4
  2489 00001FA6 66C1E802            <2> 		shr ax, 2
  2490 00001FAA 80CC80              <2> 		or ah, 10000000b
  2491 00001FAD C0E802              <2> 		shr al, 2
  2492 00001FB0 0C80                <2> 		or al, 10000000b
  2493 00001FB2 8866FF              <2> 		mov [esi - 1], ah
  2494                              <2> .normal:
  2495 00001FB5 8806                <2> 		mov [esi], al
  2496 00001FB7 46                  <2> 		inc esi
  2497 00001FB8 66A1[E9230000]      <2> 		mov ax, [lastkey]
  2498                              <2> 	bscheckequal:
  2499 00001FBE 668B1D[6C230000]    <2> 		mov bx, [modkeyrdpr]
  2500 00001FC5 803D[73230000]00    <2> 		cmp byte [txtmask], 0
  2501 00001FCC 7407                <2> 		je nomasktxt
  2502 00001FCE 30E4                <2> 		xor ah, ah
  2503 00001FD0 A0[73230000]        <2> 		mov al, [txtmask]
  2504                              <2> 	nomasktxt:
  2505 00001FD5 56                  <2> 		push esi
  2506 00001FD6 66A3[68230000]      <2> 		mov [axcache], ax
  2507 00001FDC 668B1D[6A230000]    <2> 		mov bx, [endkeyrdpr]
  2508 00001FE3 6639D8              <2> 		cmp ax, bx
  2509 00001FE6 7432                <2> 		je nobackprintbuftxt2
  2510 00001FE8 E818040000          <2> 		call prcharint
  2511 00001FED BE[88C40300]        <2> 		mov esi, buftxt2
  2512 00001FF2 E852FDFFFF          <2> 		call printquiet
  2513 00001FF7 66B82000            <2> 		mov ax, " "
  2514 00001FFB E81C040000          <2> 		call prcharq
  2515 00002000 66B80800            <2> 		mov ax, 8
  2516 00002004 81FE[88C40300]      <2> 		cmp esi, buftxt2
  2517 0000200A 740E                <2> 		je nobackprintbuftxt2
  2518                              <2> 	backprintbuftxt2:
  2519 0000200C E80B040000          <2> 		call prcharq
  2520 00002011 4E                  <2> 		dec esi
  2521 00002012 81FE[88C40300]      <2> 		cmp esi, buftxt2
  2522 00002018 77F2                <2> 		ja backprintbuftxt2
  2523                              <2> 	nobackprintbuftxt2:
  2524 0000201A 663D0A00            <2> 		cmp ax, 10
  2525 0000201E 7405                <2> 		je nonobackprint
  2526 00002020 E8E0030000          <2> 		call prcharint
  2527                              <2> 	nonobackprint:
  2528 00002025 5E                  <2> 		pop esi
  2529 00002026 3B35[78230000]      <2> 		cmp esi, [endbufferrdpr]
  2530 0000202C 0F8319000000        <2> 		jae near donerdprinc
  2531 00002032 66A1[68230000]      <2> 		mov ax, [axcache]
  2532 00002038 8A25[6A230000]      <2> 		mov ah, [endkeyrdpr]
  2533 0000203E 38E0                <2> 		cmp al, ah
  2534 00002040 0F859EFEFFFF        <2> 		jne rdprintb
  2535 00002046 E901000000          <2> 		jmp donerdprint
  2536                              <2> 	donerdprinc:
  2537 0000204B 46                  <2> 		inc esi
  2538                              <2> 	donerdprint:
  2539 0000204C 4E                  <2> 		dec esi
  2540 0000204D BF[88C40300]        <2> 		mov edi, buftxt2
  2541                              <2> 	copylaterstuff:
  2542 00002052 8A07                <2> 		mov al, [edi]
  2543 00002054 3C00                <2> 		cmp al, 0
  2544 00002056 7409                <2> 		je nocopylaterstuff
  2545 00002058 8806                <2> 		mov [esi], al
  2546 0000205A 47                  <2> 		inc edi
  2547 0000205B 46                  <2> 		inc esi
  2548 0000205C E9F1FFFFFF          <2> 		jmp copylaterstuff
  2549                              <2> 	nocopylaterstuff:
  2550 00002061 C60600              <2> 		mov byte [esi], 0
  2551 00002064 E80B000000          <2> 		call clearbuftxt2
  2552 00002069 89F1                <2> 		mov ecx, esi
  2553 0000206B 8B3D[6E230000]      <2> 		mov edi, [firstesirdpr]
  2554 00002071 29F9                <2> 		sub ecx, edi
  2555 00002073 C3                  <2> 		ret
  2556                              <2> 	
  2557                              <2> 	clearbuftxt2:
  2558 00002074 30C0                <2> 		xor al, al
  2559 00002076 BF[88C40300]        <2> 		mov edi, buftxt2
  2560                              <2> 	clearbuftxt2lp:
  2561 0000207B 8807                <2> 		mov [edi], al
  2562 0000207D 47                  <2> 		inc edi
  2563 0000207E 81FF[88C80300]      <2> 		cmp edi, buftxt
  2564 00002084 75F5                <2> 		jne clearbuftxt2lp
  2565 00002086 C3                  <2> 		ret
  2566                              <2> 	
  2567                              <2> 	rdprintb2:
  2568 00002087 E897080000          <2> 		call termcopy
  2569 0000208C E953FEFFFF          <2> 		jmp rdprintb
  2570                              <2> 	
  2571                              <2> 	rdprhome:
  2572 00002091 3B35[74230000]      <2> 		cmp esi, [buftxtloc]
  2573 00002097 0F84EAFFFFFF        <2> 		je near rdprintb2
  2574 0000209D BF[88C40300]        <2> 		mov edi, buftxt2
  2575 000020A2 8A07                <2> 		mov al, [edi]
  2576 000020A4 E88E020000          <2> 		call shiftbuftxt2
  2577 000020A9 E86E030000          <2> 		call prcharq
  2578 000020AE E9DEFFFFFF          <2> 		jmp rdprhome
  2579                              <2> 		
  2580                              <2> 	rdprend:
  2581 000020B3 BF[88C40300]        <2> 		mov edi, buftxt2
  2582 000020B8 8A07                <2> 		mov al, [edi]
  2583 000020BA 3C00                <2> 		cmp al, 0
  2584 000020BC 0F84C5FFFFFF        <2> 		je near rdprintb2
  2585 000020C2 8806                <2> 		mov [esi], al
  2586 000020C4 E84C000000          <2> 		call shiftbuftxt2lft
  2587 000020C9 E84E030000          <2> 		call prcharq
  2588 000020CE E9E0FFFFFF          <2> 		jmp rdprend
  2589                              <2> 	
  2590                              <2> 	rdprleft:
  2591 000020D3 3B35[74230000]      <2> 		cmp esi, [buftxtloc]
  2592 000020D9 0F8405FEFFFF        <2> 		je near rdprintb
  2593 000020DF BF[88C40300]        <2> 		mov edi, buftxt2
  2594 000020E4 8A07                <2> 		mov al, [edi]
  2595 000020E6 E84C020000          <2> 		call shiftbuftxt2
  2596 000020EB E815030000          <2> 		call prcharint
  2597 000020F0 E9EFFDFFFF          <2> 		jmp rdprintb
  2598                              <2> 		
  2599                              <2> 	rdprright:
  2600 000020F5 BF[88C40300]        <2> 		mov edi, buftxt2
  2601 000020FA 8A07                <2> 		mov al, [edi]
  2602 000020FC 3C00                <2> 		cmp al, 0
  2603 000020FE 0F84E0FDFFFF        <2> 		je near rdprintb
  2604 00002104 8806                <2> 		mov [esi], al
  2605 00002106 E80A000000          <2> 		call shiftbuftxt2lft
  2606 0000210B E8F5020000          <2> 		call prcharint
  2607 00002110 E9CFFDFFFF          <2> 		jmp rdprintb
  2608                              <2> 		
  2609                              <2> 	shiftbuftxt2lft:
  2610 00002115 55                  <2> 		push ebp
  2611 00002116 89FD                <2> 		mov ebp, edi
  2612                              <2> 	.lp:
  2613 00002118 3C00                <2> 		cmp al, 0
  2614 0000211A 740B                <2> 		je noshiftbuftxt2lft
  2615 0000211C 47                  <2> 		inc edi
  2616 0000211D 8A07                <2> 		mov al, [edi]
  2617 0000211F 8847FF              <2> 		mov [edi - 1], al
  2618 00002122 E9F1FFFFFF          <2> 		jmp .lp
  2619                              <2> 	noshiftbuftxt2lft:
  2620 00002127 8A4500              <2> 		mov al, [ebp]
  2621 0000212A 5D                  <2> 		pop ebp
  2622 0000212B 3CC0                <2> 		cmp al, 0xC0
  2623 0000212D 7304                <2> 		jae .nofix
  2624 0000212F 3C80                <2> 		cmp al, 0x80
  2625 00002131 73E2                <2> 		jae shiftbuftxt2lft
  2626                              <2> 	.nofix:
  2627 00002133 8A06                <2> 		mov al, [esi]
  2628 00002135 30E4                <2> 		xor ah, ah
  2629 00002137 46                  <2> 		inc esi
  2630 00002138 668B1D[6C230000]    <2> 		mov bx, [modkeyrdpr]
  2631 0000213F C3                  <2> 		ret
  2632                              <2> 		
  2633                              <2> 	rdprdownbck:
  2634 00002140 FECC                <2> 		dec ah
  2635 00002142 8825[72230000]      <2> 		mov [commandedit], ah
  2636 00002148 E890000000          <2> 		call rdprbckspc
  2637 0000214D E992FDFFFF          <2> 		jmp rdprintb
  2638                              <2> 	
  2639                              <2> 	rdprdown:
  2640 00002152 8A25[72230000]      <2> 		mov ah, [commandedit]
  2641 00002158 80FC01              <2> 		cmp ah, 1
  2642 0000215B 0F8683FDFFFF        <2> 		jbe near rdprintb
  2643 00002161 8B3D[388E2D00]      <2> 		mov edi, [commandsentered]
  2644 00002167 3B3D[348E2D00]      <2> 		cmp edi, [commandlistentries]
  2645 0000216D 7618                <2> 		jbe .nofix
  2646 0000216F 8105[348E2D00]0200- <2> 		add dword [commandlistentries], 2
  2647 00002177 0000                <2>
  2648 00002179 3B3D[348E2D00]      <2> 		cmp edi, [commandlistentries]
  2649 0000217F 7706                <2> 		ja .nofix
  2650 00002181 893D[348E2D00]      <2> 		mov [commandlistentries], edi
  2651                              <2> 	.nofix:
  2652 00002187 80FC02              <2> 		cmp ah, 2
  2653 0000218A 74B4                <2> 		je rdprdownbck
  2654 0000218C 80EC02              <2> 		sub ah, 2
  2655 0000218F 8825[72230000]      <2> 		mov [commandedit], ah
  2656                              <2> 		
  2657                              <2> 	rdprup:
  2658 00002195 3805[72230000]      <2> 		cmp [commandedit], al
  2659 0000219B 0F8443FDFFFF        <2> 		je near rdprintb
  2660 000021A1 813D[348E2D00]0000- <2> 		cmp dword [commandlistentries], 0
  2661 000021A9 0000                <2>
  2662 000021AB 0F8433FDFFFF        <2> 		je near rdprintb
  2663 000021B1 FF0D[348E2D00]      <2> 		dec dword [commandlistentries]
  2664                              <2> 	.lp:
  2665 000021B7 BF[88C40300]        <2> 		mov edi, buftxt2
  2666 000021BC 8A07                <2> 		mov al, [edi]
  2667 000021BE 3C00                <2> 		cmp al, 0
  2668 000021C0 7411                <2> 		je .start
  2669 000021C2 8806                <2> 		mov [esi], al
  2670 000021C4 E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2671 000021C9 E84E020000          <2> 		call prcharq
  2672 000021CE E9E4FFFFFF          <2> 		jmp .lp
  2673                              <2> 	.start:
  2674 000021D3 E805000000          <2> 		call rdprbckspc
  2675 000021D8 E94B000000          <2> 		jmp getcurrentcommandstr
  2676                              <2> 	rdprbckspc:
  2677 000021DD 3B35[74230000]      <2> 		cmp esi, [buftxtloc]
  2678 000021E3 7435                <2> 		je nordprupbck
  2679                              <2> 	rdprupbckspclp:
  2680 000021E5 66B80800            <2> 		mov ax, 8
  2681 000021E9 668B1D[6C230000]    <2> 		mov bx, [modkeyrdpr]
  2682 000021F0 E827020000          <2> 		call prcharq
  2683 000021F5 66B82000            <2> 		mov ax, ' '
  2684 000021F9 E81E020000          <2> 		call prcharq
  2685 000021FE 66B80800            <2> 		mov ax, 8
  2686 00002202 E815020000          <2> 		call prcharq
  2687 00002207 4E                  <2> 		dec esi
  2688 00002208 3B35[74230000]      <2> 		cmp esi, [buftxtloc]
  2689 0000220E 7405                <2> 		je nordprupbck2
  2690 00002210 E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2691                              <2> 	nordprupbck2:
  2692 00002215 E809070000          <2> 		call termcopy
  2693                              <2> 	nordprupbck:
  2694 0000221A 8B3D[308E2D00]      <2> 		mov edi, [commandbufpos]
  2695 00002220 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2696 00002226 4F                  <2> 		dec edi
  2697 00002227 C3                  <2> 		ret
  2698                              <2> 	getcurrentcommandstr:
  2699 00002228 8A25[72230000]      <2> 		mov ah, [commandedit]
  2700 0000222E FE05[72230000]      <2> 		inc byte [commandedit]
  2701                              <2> 	getccmdlp:
  2702 00002234 4F                  <2> 		dec edi
  2703 00002235 8A07                <2> 		mov al, [edi]
  2704 00002237 81FF[3C8E2D00]      <2> 		cmp edi, commandbuf
  2705 0000223D 7231                <2> 		jb getcmdresetcommandbuf
  2706 0000223F 81EF[3C8E2D00]      <2> 		sub edi, commandbuf
  2707 00002245 3B3D[308E2D00]      <2> 		cmp edi, [commandbufpos]
  2708 0000224B 0F8493FCFFFF        <2> 		je near rdprintb
  2709 00002251 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2710 00002257 3C00                <2> 		cmp al, 0
  2711 00002259 75D9                <2> 		jne getccmdlp
  2712 0000225B FECC                <2> 		dec ah
  2713 0000225D 80FC00              <2> 		cmp ah, 0
  2714 00002260 77D2                <2> 		ja getccmdlp
  2715 00002262 47                  <2> 		inc edi
  2716 00002263 81FF[3C9E2D00]      <2> 		cmp edi, commandbufend
  2717 00002269 7710                <2> 		ja fixcmdbufb4morerdpr
  2718 0000226B E918000000          <2> 		jmp morerdprup
  2719                              <2> 	getcmdresetcommandbuf:
  2720 00002270 BF[3C9E2D00]        <2> 		mov edi, commandbufend
  2721 00002275 47                  <2> 		inc edi
  2722 00002276 E9B9FFFFFF          <2> 		jmp getccmdlp
  2723                              <2> 	fixcmdbufb4morerdpr:
  2724 0000227B 4F                  <2> 		dec edi
  2725 0000227C 81EF[3C9E2D00]      <2> 		sub edi, commandbufend
  2726 00002282 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2727                              <2> 	morerdprup:
  2728 00002288 8A07                <2> 		mov al, [edi]
  2729 0000228A 47                  <2> 		inc edi
  2730 0000228B 81EF[3C8E2D00]      <2> 		sub edi, commandbuf
  2731 00002291 3C00                <2> 		cmp al, 0
  2732 00002293 0F84EEFDFFFF        <2> 		je near rdprintb2
  2733 00002299 3B3D[308E2D00]      <2> 		cmp edi, [commandbufpos]
  2734 0000229F 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2735 000022A5 81C7[3C8E2D00]      <2> 		add edi, commandbuf
  2736 000022AB 8806                <2> 		mov [esi], al
  2737 000022AD 46                  <2> 		inc esi
  2738 000022AE 57                  <2> 		push edi
  2739 000022AF 668B1D[6C230000]    <2> 		mov bx, [modkeyrdpr]
  2740 000022B6 30E4                <2> 		xor ah, ah
  2741 000022B8 E85F010000          <2> 		call prcharq
  2742 000022BD 5F                  <2> 		pop edi
  2743 000022BE 81FF[3C9E2D00]      <2> 		cmp edi, commandbufend
  2744 000022C4 76C2                <2> 		jbe morerdprup
  2745 000022C6 BF[3C8E2D00]        <2> 		mov edi, commandbuf
  2746 000022CB E9B8FFFFFF          <2> 		jmp morerdprup
  2747                              <2> 
  2748                              <2> 	rdprdel:
  2749 000022D0 BF[88C40300]        <2> 		mov edi, buftxt2
  2750 000022D5 8A07                <2> 		mov al, [edi]
  2751 000022D7 3C00                <2> 		cmp al, 0
  2752 000022D9 0F8405FCFFFF        <2> 		je near rdprintb
  2753 000022DF 8806                <2> 		mov [esi], al
  2754 000022E1 3C80                <2> 		cmp al, 0x80
  2755 000022E3 7216                <2> 		jb .fn
  2756                              <2> 	.lp:
  2757 000022E5 46                  <2> 		inc esi
  2758 000022E6 47                  <2> 		inc edi
  2759 000022E7 8A07                <2> 		mov al, [edi]
  2760 000022E9 3C00                <2> 		cmp al, 0
  2761 000022EB 0F84F3FBFFFF        <2> 		je near rdprintb
  2762 000022F1 8806                <2> 		mov [esi], al
  2763 000022F3 3C80                <2> 		cmp al, 0x80
  2764 000022F5 7204                <2> 		jb .fn
  2765 000022F7 3CC0                <2> 		cmp al, 0xC0
  2766 000022F9 72EA                <2> 		jb .lp
  2767                              <2> 	.fn:
  2768 000022FB E815FEFFFF          <2> 		call shiftbuftxt2lft
  2769 00002300 E817010000          <2> 		call prcharq
  2770                              <2> 		
  2771                              <2> 	rdprbscheck:
  2772 00002305 3B35[6E230000]      <2> 		cmp esi, [firstesirdpr]
  2773 0000230B 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2774                              <2> 	goodbscheck:
  2775 00002311 4E                  <2> 		dec esi
  2776 00002312 8A46FF              <2> 		mov al, [esi - 1]
  2777 00002315 C60600              <2> 		mov byte [esi], 0
  2778 00002318 3CC0                <2> 		cmp al, 0xC0
  2779 0000231A 7309                <2> 		jae .onemore
  2780 0000231C 3C80                <2> 		cmp al, 0x80
  2781 0000231E 73F1                <2> 		jae goodbscheck
  2782 00002320 E904000000          <2> 		jmp .nomore
  2783                              <2> 	.onemore:
  2784 00002325 4E                  <2> 		dec esi
  2785 00002326 C60600              <2> 		mov byte [esi], 0		
  2786                              <2> 	.nomore:
  2787 00002329 668B1D[6C230000]    <2> 		mov bx, [modkeyrdpr]
  2788 00002330 B008                <2> 		mov al, 8
  2789 00002332 E987FCFFFF          <2> 		jmp bscheckequal
  2790                              <2> 		
  2791                              <2> 	shiftbuftxt2:
  2792 00002337 55                  <2> 		push ebp
  2793 00002338 89FD                <2> 		mov ebp, edi
  2794                              <2> 	.lp:
  2795 0000233A 3C00                <2> 		cmp al, 0
  2796 0000233C 740C                <2> 		je noshiftbuftxt2
  2797 0000233E 47                  <2> 		inc edi
  2798 0000233F 8A27                <2> 		mov ah, [edi]
  2799 00002341 8807                <2> 		mov [edi], al
  2800 00002343 88E0                <2> 		mov al, ah
  2801 00002345 E9F0FFFFFF          <2> 		jmp .lp
  2802                              <2> 	noshiftbuftxt2:
  2803 0000234A 8A4500              <2> 		mov al, [ebp]
  2804 0000234D 5D                  <2> 		pop ebp
  2805 0000234E 3CC0                <2> 		cmp al, 0xC0
  2806 00002350 7304                <2> 		jae .nofix
  2807 00002352 3C80                <2> 		cmp al, 0x80
  2808 00002354 73E1                <2> 		jae shiftbuftxt2
  2809                              <2> 	.nofix:
  2810 00002356 BF[88C40300]        <2> 		mov edi, buftxt2
  2811 0000235B 4E                  <2> 		dec esi
  2812 0000235C 8A06                <2> 		mov al, [esi]
  2813 0000235E 8807                <2> 		mov [edi], al
  2814 00002360 C60600              <2> 		mov byte [esi], 0
  2815 00002363 66B80800            <2> 		mov ax, 8
  2816 00002367 C3                  <2> 		ret
  2817                              <2> 		
  2818 00002368 0000                <2> axcache dw 0
  2819 0000236A 0000                <2> endkeyrdpr dw 0
  2820 0000236C 0000                <2> modkeyrdpr dw 0
  2821 0000236E 00000000            <2> firstesirdpr dd 0
  2822 00002372 00                  <2> commandedit db 0
  2823 00002373 00                  <2> txtmask db 0
  2824 00002374 00000000            <2> buftxtloc dd 0
  2825 00002378 00000000            <2> endbufferrdpr dd 0
  2826 0000237C 082000              <2> backcursor db 8," ",0
  2827                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2828                              <2> readchar:
  2829 0000237F E807000000          <2> 	call rdcharint
  2830 00002384 E929DFFFFF          <2> 	jmp timerinterrupt
  2831                              <2> getchar:
  2832 00002389 30C0                <2> 	xor al, al
  2833                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2834 0000238B 66C705[ED230000]01- <2> 		mov word [trans], 1
  2835 00002393 00                  <2>
  2836 00002394 3C00                <2> 		cmp al, 0
  2837 00002396 7509                <2> 		jne transcheck
  2838 00002398 66C705[ED230000]00- <2> 		mov word [trans], 0
  2839 000023A0 00                  <2>
  2840                              <2> 	transcheck:
  2841                              <2> 	%ifdef io.serial
  2842                              <2> 		call serial.receive
  2843                              <2> 		xor ah, ah
  2844                              <2> 		cmp al, 13
  2845                              <2> 		je rdenter
  2846                              <2> 	%else
  2847 000023A1 E8A13B0000          <2> 		call getkey
  2848 000023A6 66A1[EB230000]      <2> 		mov ax, [lastkey + 2]
  2849 000023AC 663D1C00            <2> 		cmp ax, 0x1C
  2850 000023B0 7425                <2> 		je rdenter
  2851                              <2> 	%endif
  2852 000023B2 66A1[E9230000]      <2> 		mov ax, [lastkey]
  2853 000023B8 668B1D[ED230000]    <2> 		mov bx, [trans]
  2854 000023BF 803D[235F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2855 000023C6 7500                <2> 		jne nospecialtrans
  2856                              <2> 	nospecialtrans:
  2857 000023C8 6609C3              <2> 		or bx, ax
  2858 000023CB 6681FB0000          <2> 		cmp bx, 0
  2859 000023D0 74CF                <2> 		je transcheck
  2860 000023D2 E90C000000          <2> 		jmp rdend
  2861                              <2> 	rdenter:
  2862 000023D7 C1E010              <2> 		shl eax, 16
  2863 000023DA 66B80A00            <2> 		mov ax, 10
  2864 000023DE A3[E9230000]        <2> 		mov [lastkey], eax
  2865                              <2> 	rdend:
  2866 000023E3 A1[E9230000]        <2> 		mov eax, [lastkey]
  2867 000023E8 C3                  <2> 		ret
  2868                              <2> 		
  2869 000023E9 00000000            <2> lastkey dd 0
  2870 000023ED 0000                <2> trans dw 0
  2871                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2872                              <2> prntchar:
  2873 000023EF 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2874                              <2> %ifdef io.serial
  2875                              <2> 	call prcharint
  2876                              <2> 	jmp timerinterrupt
  2877                              <2> prcharint:	
  2878                              <2> prcharq:
  2879                              <2> 	call serial.send
  2880                              <2> 	ret
  2881                              <2> %else
  2882 000023F1 38FB                <2> cmp bl, bh
  2883 000023F3 740A                <2> je prchar.notimer
  2884 000023F5 E80B000000          <2> call prcharint
  2885 000023FA E9B3DEFFFF          <2> jmp timerinterrupt
  2886                              <2> prchar.notimer:
  2887 000023FF E818000000          <2> 	call prcharq
  2888 00002404 CF                  <2> 	iret
  2889                              <2> 	
  2890                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2891 00002405 663DFFFE            <2> 	cmp ax, 0xFEFF
  2892 00002409 740E                <2> 	je .ret
  2893 0000240B 39C1                <2> 	cmp ecx, eax
  2894 0000240D 740D                <2> 	je prcharq
  2895 0000240F E808000000          <2> 	call prcharq
  2896 00002414 E80A050000          <2> 	call termcopy
  2897                              <2> .ret:
  2898 00002419 C3                  <2> 	ret
  2899 0000241A 00                  <2> termguion db 0
  2900 0000241B 00                  <2> termcopyon db 0
  2901                              <2> prcharq:
  2902 0000241C C1E310              <2> 	shl ebx, 16
  2903 0000241F 6689C3              <2> 	mov bx, ax
  2904 00002422 89D8                <2> 	mov eax, ebx
  2905 00002424 A3[13260000]        <2> 	mov [charbuf], eax
  2906 00002429 8B1D[0B260000]      <2> 	mov ebx, [videobufpos]
  2907 0000242F BF[9CE32B00]        <2> 	mov edi, videobuf
  2908 00002434 01DF                <2> 	add edi, ebx
  2909 00002436 A1[30290000]        <2> 	mov eax, [removedvideo]
  2910 0000243B 8907                <2> 	mov [edi], eax
  2911 0000243D A1[13260000]        <2> 	mov eax, [charbuf]
  2912 00002442 31D2                <2> 	xor edx, edx
  2913 00002444 668B15[0F260000]    <2> 	mov dx, [charpos]
  2914 0000244B 31C9                <2> 	xor ecx, ecx
  2915 0000244D 668B0D[11260000]    <2> 	mov cx, [charxy]
  2916 00002454 663D0900            <2> 	cmp ax, 9
  2917 00002458 0F8472000000        <2> 	je near prtab
  2918 0000245E 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2919 00002462 0F8498000000        <2> 	je near prcr
  2920 00002468 663D0A00            <2> 	cmp ax, 10
  2921 0000246C 0F84E7000000        <2> 	je near prnlcr
  2922 00002472 663D0800            <2> 	cmp ax, 8
  2923 00002476 0F8498000000        <2> 	je near prbs
  2924 0000247C 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2925 00002480 0F8341000000        <2> 	jae near prnofont
  2926                              <2> donepr:
  2927 00002486 8907                <2> 	mov [edi], eax
  2928 00002488 81C704000000        <2> 	add edi, 4
  2929 0000248E FEC2                <2> 	inc dl
  2930                              <2> donecrnl:
  2931 00002490 38CA                <2> 	cmp dl, cl
  2932 00002492 0F83E5000000        <2> 	jae near preol
  2933                              <2> doneeol:
  2934 00002498 38EE                <2> 	cmp dh, ch
  2935 0000249A 0F83FA000000        <2> 	jae near prscr	
  2936                              <2> donescr:
  2937 000024A0 89FB                <2> 	mov ebx, edi
  2938 000024A2 8B07                <2> 	mov eax, [edi]
  2939 000024A4 A3[30290000]        <2> 	mov [removedvideo], eax
  2940 000024A9 81EB[9CE32B00]      <2> 	sub ebx, videobuf
  2941 000024AF 891D[0B260000]      <2> 	mov [videobufpos], ebx
  2942 000024B5 668915[0F260000]    <2> 	mov [charpos], dx
  2943 000024BC A1[13260000]        <2> 	mov eax, [charbuf]
  2944 000024C1 89C3                <2> 	mov ebx, eax
  2945 000024C3 C1EB10              <2> 	shr ebx, 16
  2946 000024C6 C3                  <2> 	ret
  2947                              <2> 	
  2948                              <2> 	prnofont:
  2949 000024C7 66B80200            <2> 		mov ax, 2
  2950 000024CB E9B6FFFFFF          <2> 		jmp donepr
  2951                              <2> 	prtab:
  2952 000024D0 8B1D[07260000]      <2> 		mov ebx, [linebeginpos]
  2953 000024D6 81EF[9CE32B00]      <2> 		sub edi, videobuf
  2954 000024DC 29DF                <2> 		sub edi, ebx
  2955 000024DE C1EF05              <2> 		shr edi, 5
  2956 000024E1 C1E705              <2> 		shl edi, 5
  2957 000024E4 81C720000000        <2> 		add edi, 32
  2958 000024EA C0EA03              <2> 		shr dl, 3
  2959 000024ED C0E203              <2> 		shl dl, 3
  2960 000024F0 80C208              <2> 		add dl, 8
  2961 000024F3 81C7[9CE32B00]      <2> 		add edi, videobuf
  2962 000024F9 01DF                <2> 		add edi, ebx
  2963 000024FB E990FFFFFF          <2> 		jmp donecrnl
  2964                              <2> 	
  2965                              <2> 	prcr:
  2966 00002500 30D2                <2> 		xor dl, dl
  2967 00002502 BF[9CE32B00]        <2> 		mov edi, videobuf
  2968 00002507 8B1D[07260000]      <2> 		mov ebx, [linebeginpos]
  2969 0000250D 01DF                <2> 		add edi, ebx
  2970 0000250F E97CFFFFFF          <2> 		jmp donecrnl
  2971                              <2> 			
  2972                              <2> 	prbs:
  2973 00002514 8B1D[07260000]      <2> 		mov ebx, [linebeginpos]
  2974 0000251A 80FA00              <2> 		cmp dl, 0
  2975 0000251D 7415                <2> 		je prbackline
  2976                              <2> 	prnobmr:
  2977 0000251F 891D[07260000]      <2> 		mov [linebeginpos], ebx
  2978 00002525 FECA                <2> 		dec dl
  2979 00002527 31C0                <2> 		xor eax, eax
  2980 00002529 81EF04000000        <2> 		sub edi, 4
  2981 0000252F E95CFFFFFF          <2> 		jmp donecrnl
  2982                              <2> 	prbackline:
  2983 00002534 6631DB              <2> 		xor bx, bx
  2984 00002537 88CA                <2> 		mov dl, cl
  2985 00002539 80FE00              <2> 		cmp dh, 0
  2986 0000253C 74E1                <2> 		je prnobmr
  2987 0000253E 8B1D[07260000]      <2> 		mov ebx, [linebeginpos]
  2988 00002544 6651                <2> 		push cx
  2989 00002546 31C9                <2> 		xor ecx, ecx
  2990 00002548 8A0C24              <2> 		mov cl, [esp]
  2991 0000254B C1E102              <2> 		shl ecx, 2
  2992 0000254E 29CB                <2> 		sub ebx, ecx
  2993 00002550 6659                <2> 		pop cx
  2994 00002552 FECE                <2> 		dec dh
  2995 00002554 E9C6FFFFFF          <2> 		jmp prnobmr
  2996                              <2> 		
  2997                              <2> 	prnlcr:
  2998 00002559 FEC6                <2> 		inc dh
  2999 0000255B 31DB                <2> 		xor ebx, ebx
  3000 0000255D 30D2                <2> 		xor dl, dl
  3001 0000255F 88CB                <2> 		mov bl, cl
  3002 00002561 66C1E302            <2> 		shl bx, 2
  3003 00002565 BF[9CE32B00]        <2> 		mov edi, videobuf
  3004 0000256A 031D[07260000]      <2> 		add ebx, [linebeginpos]
  3005 00002570 891D[07260000]      <2> 		mov [linebeginpos], ebx
  3006 00002576 01DF                <2> 		add edi, ebx
  3007 00002578 E913FFFFFF          <2> 		jmp donecrnl
  3008                              <2> 		
  3009                              <2> 	preol:
  3010 0000257D 30D2                <2> 		xor dl, dl
  3011 0000257F FEC6                <2> 		inc dh
  3012 00002581 31DB                <2> 		xor ebx, ebx
  3013 00002583 88CB                <2> 		mov bl, cl
  3014 00002585 66C1E302            <2> 		shl bx, 2
  3015 00002589 031D[07260000]      <2> 		add ebx, [linebeginpos]
  3016 0000258F 891D[07260000]      <2> 		mov [linebeginpos], ebx
  3017 00002595 E9FEFEFFFF          <2> 		jmp doneeol
  3018                              <2> 	prscr:
  3019 0000259A FECE                <2> 		dec dh
  3020 0000259C BF[9CE32B00]        <2> 		mov edi, videobuf
  3021 000025A1 31DB                <2> 		xor ebx, ebx
  3022 000025A3 88CB                <2> 		mov bl, cl
  3023 000025A5 66C1E302            <2> 		shl bx, 2
  3024 000025A9 01FB                <2> 		add ebx, edi
  3025                              <2> 	intscrollloop:
  3026 000025AB 8B03                <2> 		mov eax, [ebx]
  3027 000025AD 8907                <2> 		mov [edi], eax
  3028 000025AF 81C704000000        <2> 		add edi, 4
  3029 000025B5 81C304000000        <2> 		add ebx, 4
  3030 000025BB FEC9                <2> 		dec cl
  3031 000025BD 80F900              <2> 		cmp cl, 0
  3032 000025C0 75E9                <2> 		jne intscrollloop
  3033 000025C2 8A0D[11260000]      <2> 		mov cl, [charxy]
  3034 000025C8 FECD                <2> 		dec ch
  3035 000025CA 80FD01              <2> 		cmp ch, 1
  3036 000025CD 77DC                <2> 		ja intscrollloop
  3037 000025CF 31C0                <2> 		xor eax, eax
  3038 000025D1 81EF[9CE32B00]      <2> 		sub edi, videobuf
  3039 000025D7 893D[07260000]      <2> 		mov [linebeginpos], edi
  3040 000025DD 81C7[9CE32B00]      <2> 		add edi, videobuf
  3041 000025E3 89FB                <2> 		mov ebx, edi
  3042                              <2> 	intloopclear:
  3043 000025E5 8903                <2> 		mov [ebx], eax
  3044 000025E7 81C304000000        <2> 		add ebx, 4
  3045 000025ED FEC9                <2> 		dec cl
  3046 000025EF 80F900              <2> 		cmp cl, 0
  3047 000025F2 75F1                <2> 		jne intloopclear
  3048 000025F4 FECD                <2> 		dec ch
  3049 000025F6 80FD00              <2> 		cmp ch, 0
  3050 000025F9 75EA                <2> 		jne intloopclear
  3051 000025FB 668B0D[11260000]    <2> 		mov cx, [charxy]
  3052 00002602 E999FEFFFF          <2> 		jmp donescr
  3053                              <2> 		
  3054 00002607 00000000            <2> linebeginpos dd 0
  3055 0000260B 00000000            <2> videobufpos: dd 0
  3056 0000260F 0000                <2> charpos db 0,0
  3057 00002611 501E                <2> charxy db 80,30
  3058 00002613 00000000            <2> charbuf dd 0
  3059                              <2> %endif
  3060                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3061                              <2> openfile:
  3062 00002617 E8D8420000          <2> 	call loadfile
  3063 0000261C E991DCFFFF          <2> 	jmp timerinterrupt
  3064                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3065                              <2> num2str:
  3066 00002621 3C00                <2> 	cmp al, 0
  3067 00002623 750A                <2> 	jne num2strb
  3068 00002625 E8250D0000          <2> 	call showdec
  3069 0000262A E983DCFFFF          <2> 	jmp timerinterrupt
  3070                              <2> num2strb:
  3071 0000262F E8600C0000          <2> 	call showhex
  3072 00002634 E979DCFFFF          <2> 	jmp timerinterrupt
  3073                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3074                              <2> str2num:
  3075 00002639 89F7                <2> 	mov edi, esi
  3076 0000263B E8ED0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3077 00002640 E96DDCFFFF          <2> 	jmp timerinterrupt
  3078                              <2> 	
  3079                              <1> %ifdef threads.included
  3080                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3081                              <2> forkthread:
  3082                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3083                              <2> 			;returns the PID of the new fork in ebx
  3084                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3085 00002645 FA                  <2> 	cli
  3086 00002646 60                  <2> 	pushad
  3087 00002647 8925[14270000]      <2> 	mov [.espold], esp
  3088 0000264D C605[B76A0000]01    <2> 	mov byte [threadson], 1
  3089 00002654 8B1D[B86A0000]      <2> 	mov ebx, [currentthread]
  3090 0000265A C1E302              <2> 	shl ebx, 2
  3091 0000265D 89A3[3C9E2D00]      <2> 	mov [threadlist + ebx], esp
  3092 00002663 C1EB02              <2> 	shr ebx, 2
  3093 00002666 81FB00000000        <2> 	cmp ebx, 0
  3094 0000266C 750C                <2> 	jne .simplestack
  3095 0000266E BB[00AE0300]        <2> 	mov ebx, stackend
  3096 00002673 29E3                <2> 	sub ebx, esp
  3097 00002675 E90B000000          <2> 	jmp .stackcalcdone
  3098                              <2> .simplestack:
  3099 0000267A C1E30A              <2> 	shl ebx, 10
  3100 0000267D 81C3[3CB62D00]      <2> 	add ebx, stack1
  3101 00002683 29E3                <2> 	sub ebx, esp
  3102                              <2> .stackcalcdone:
  3103 00002685 29DC                <2> 	sub esp, ebx
  3104 00002687 81C4[3CB62D00]      <2> 	add esp, stack1
  3105 0000268D 8B1D[B36A0000]      <2> 	mov ebx, [lastthread]
  3106 00002693 C1E308              <2> 	shl ebx, 8
  3107 00002696 01DC                <2> 	add esp, ebx
  3108 00002698 891D[18270000]      <2> 	mov [.stackend], ebx
  3109                              <2> 
  3110 0000269E 89E5                <2> 	mov ebp, esp
  3111 000026A0 8B25[14270000]      <2> 	mov esp, [.espold]
  3112                              <2> 
  3113 000026A6 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3114 000026A9 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3115                              <2> 
  3116 000026AD 31DB                <2> 	xor ebx, ebx
  3117                              <2> .stackcopy:
  3118 000026AF 668B041C            <2> 	mov ax, [esp + ebx]
  3119 000026B3 6689441D00          <2> 	mov [ebp + ebx], ax
  3120 000026B8 81C302000000        <2> 	add ebx, 2
  3121 000026BE 3B1D[18270000]      <2> 	cmp ebx, [.stackend]
  3122 000026C4 72E9                <2> 	jb .stackcopy
  3123                              <2> 
  3124 000026C6 31C0                <2> 	xor eax, eax
  3125 000026C8 668CC8              <2> 	mov ax, cs
  3126 000026CB 89C2                <2> 	mov edx, eax
  3127 000026CD 8B4C2428            <2> 	mov ecx, [esp + 40]
  3128 000026D1 81C900020000        <2> 	or ecx, 0x200
  3129                              <2> 	
  3130 000026D7 81FE00000000        <2> 	cmp esi, 0
  3131 000026DD 7504                <2> 	jne .nochangestack
  3132 000026DF 8B742420            <2> 	mov esi, [esp + 32]
  3133                              <2> .nochangestack:
  3134 000026E3 89F0                <2> 	mov eax, esi
  3135 000026E5 89EC                <2> 	mov esp, ebp
  3136                              <2> 
  3137 000026E7 89442420            <2> 	mov [esp + 32], eax
  3138 000026EB 89542424            <2> 	mov [esp + 36], edx
  3139 000026EF 894C2428            <2> 	mov [esp + 40], ecx
  3140                              <2> 
  3141 000026F3 8B1D[B36A0000]      <2> 	mov ebx, [lastthread]
  3142 000026F9 89A3[3C9E2D00]      <2> 	mov [threadlist + ebx], esp
  3143 000026FF 81C304000000        <2> 	add ebx, 4
  3144 00002705 891D[B36A0000]      <2> 	mov [lastthread], ebx
  3145 0000270B 8B25[14270000]      <2> 	mov esp, [.espold]
  3146 00002711 61                  <2> 	popad
  3147 00002712 FB                  <2> 	sti
  3148 00002713 CF                  <2> 	iret
  3149                              <2> 
  3150 00002714 00000000            <2> .espold dd 0
  3151 00002718 00000000            <2> .stackend dd 0
  3152                              <1> %endif
  3153                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3154                              <2> gettime:
  3155 0000271C A1[6B020000]        <2> 	mov eax, [timeseconds]
  3156 00002721 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  3157 00002727 89D9                <2> 	mov ecx, ebx
  3158 00002729 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3159 0000272C E981DBFFFF          <2> 	jmp timerinterrupt
  3160                              <1> 	%include 'source/interrupts/13_settime.asm'
  3161                              <2> settime:
  3162 00002731 A3[6B020000]        <2> 	mov [timeseconds], eax
  3163 00002736 891D[6F020000]      <2> 	mov [timenanoseconds], ebx
  3164 0000273C E971DBFFFF          <2> 	jmp timerinterrupt
  3165                              <2> 	
  3166                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3167                              <2> runcmd:
  3168 00002741 BF[88C80300]        <2> 	mov edi, buftxt
  3169                              <2> cpcmd:
  3170 00002746 8A06                <2> 	mov al, [esi]
  3171 00002748 8807                <2> 	mov [edi], al
  3172 0000274A 46                  <2> 	inc esi
  3173 0000274B 47                  <2> 	inc edi
  3174 0000274C 3C00                <2> 	cmp al, 0
  3175 0000274E 75F6                <2> 	jne cpcmd
  3176 00002750 E81A080000          <2> 	call run
  3177 00002755 CF                  <2> 	iret
  3178                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3179                              <2> proginfo:
  3180                              <2> 	;mov ebx, variables
  3181 00002756 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  3182 0000275C 89F7                <2> 	mov edi, esi
  3183 0000275E 31C9                <2> 	xor ecx, ecx
  3184                              <2> getcommandzeroes:
  3185 00002760 8A07                <2> 	mov al, [edi]
  3186 00002762 47                  <2> 	inc edi
  3187 00002763 3C3B                <2> 	cmp al, ';'
  3188 00002765 740E                <2> 	je nomorezeroes
  3189 00002767 3C00                <2> 	cmp al, 0
  3190 00002769 740A                <2> 	je nomorezeroes
  3191 0000276B 3C20                <2> 	cmp al, ' '
  3192 0000276D 75F1                <2> 	jne getcommandzeroes
  3193 0000276F 41                  <2> 	inc ecx
  3194 00002770 E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3195                              <2> nomorezeroes:
  3196 00002775 41                  <2> 	inc ecx
  3197 00002776 4F                  <2> 	dec edi
  3198 00002777 8B1D[14B40300]      <2> 	mov ebx, [uid]
  3199 0000277D 8B15[B86A0000]      <2> 	mov edx, [currentthread]
  3200 00002783 CF                  <2> 	iret
  3201                              <2> 	
  3202                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3203                              <2> hooksig: ;hook code in ESI to signal in AL
  3204 00002784 3C00                <2> 	cmp al, 0
  3205 00002786 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3206                              <2> ;	xor ebx, ebx
  3207                              <2> ;	mov bl, al
  3208                              <2> ;	shl bl, 2
  3209 00002788 BF[04AE0300]        <2> 	mov edi, sigtable
  3210 0000278D 8937                <2> 	mov [edi], esi
  3211                              <2> .quit:
  3212 0000278F E91EDBFFFF          <2> 	jmp timerinterrupt
  3213                              <1> %ifdef gui.included
  3214                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3215                              <2> guiint:
  3216 00002794 3CFD                <2> 	cmp al, 253
  3217 00002796 0F8491000000        <2> 	je near .getinfo
  3218 0000279C 803D[028A0000]01    <2> 	cmp byte [guion], 1
  3219 000027A3 0F8550000000        <2> 	jne near .nogui
  3220 000027A9 3C00                <2> 	cmp al, 0
  3221 000027AB 0F844D000000        <2> 	je near .clear
  3222 000027B1 3C01                <2> 	cmp al, 1
  3223 000027B3 0F84E4000000        <2> 	je near .putpixel
  3224 000027B9 3C02                <2> 	cmp al, 2
  3225 000027BB 0F84E9000000        <2> 	je near .drawtext
  3226 000027C1 3C03                <2> 	cmp al, 3
  3227 000027C3 0F84FC000000        <2> 	je near .drawline
  3228 000027C9 3C04                <2> 	cmp al, 4
  3229 000027CB 0F8407010000        <2> 	je near .drawcircle
  3230 000027D1 3C05                <2> 	cmp al, 5
  3231 000027D3 0F840F010000        <2> 	je near .fillcircle
  3232 000027D9 3C06                <2> 	cmp al, 6
  3233 000027DB 0F8417010000        <2> 	je near .drawsquare
  3234 000027E1 3C07                <2> 	cmp al, 7
  3235 000027E3 0F8422010000        <2> 	je near .fillsquare
  3236 000027E9 3CFE                <2> 	cmp al, 254
  3237 000027EB 0F8464000000        <2> 	je near .setinfo
  3238 000027F1 3CFF                <2> 	cmp al, 255
  3239 000027F3 0F8461000000        <2> 	je near .reset
  3240                              <2> .nogui:
  3241 000027F9 E9B4DAFFFF          <2> 	jmp timerinterrupt
  3242                              <2> 
  3243                              <2> .clear:		;color in bx
  3244 000027FE 66891D[27720000]    <2> 	mov [background], bx
  3245                              <2> %ifdef gui.background
  3246 00002805 8B1D[F9710000]      <2> 	mov ebx, [backgroundimage]
  3247 0000280B 81FB00000000        <2> 	cmp ebx, 0
  3248 00002811 7410                <2> 	je .clearit
  3249 00002813 C705[F9710000]0000- <2> 	mov dword [backgroundimage], 0
  3250 0000281B 0000                <2>
  3251 0000281D 891D[99280000]      <2> 	mov [.bgi], ebx
  3252                              <2> .clearit:
  3253                              <2> %endif
  3254 00002823 E870490000          <2> 	call guiclear
  3255 00002828 E985DAFFFF          <2> 	jmp timerinterrupt
  3256                              <2> 	
  3257                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3258 0000282D 31DB                <2> 	xor ebx, ebx
  3259 0000282F 31C9                <2> 	xor ecx, ecx
  3260 00002831 31D2                <2> 	xor edx, edx
  3261 00002833 381D[028A0000]      <2> 	cmp [guion], bl
  3262 00002839 74BE                <2> 	je .nogui
  3263 0000283B 668B1D[27720000]    <2> 	mov bx, [background]
  3264 00002842 668B15[38580000]    <2> 	mov dx, [resolutionx]
  3265 00002849 668B0D[3A580000]    <2> 	mov cx, [resolutiony]
  3266 00002850 E95DDAFFFF          <2> 	jmp timerinterrupt
  3267                              <2> 	
  3268                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3269 00002855 E958DAFFFF          <2> 	jmp timerinterrupt
  3270                              <2> .reset:		;resets the screen to the original settings
  3271 0000285A 66BBCF7B            <2> 	mov bx, background.original
  3272 0000285E 66891D[27720000]    <2> 	mov [background], bx
  3273 00002865 66BBFFFF            <2> 	mov bx, 0xFFFF
  3274 00002869 66891D[09790000]    <2> 	mov [colorfont2], bx
  3275                              <2> %ifdef gui.background
  3276 00002870 8B1D[F9710000]      <2> 	mov ebx, [backgroundimage]
  3277 00002876 81FB00000000        <2> 	cmp ebx, 0
  3278 0000287C 750C                <2> 	jne .resetit
  3279 0000287E 8B1D[99280000]      <2> 	mov ebx, [.bgi]
  3280 00002884 891D[F9710000]      <2> 	mov [backgroundimage], ebx
  3281                              <2> .resetit:
  3282                              <2> %endif
  3283 0000288A E809490000          <2> 	call guiclear
  3284 0000288F E897490000          <2> 	call reloadallgraphics
  3285 00002894 E919DAFFFF          <2> 	jmp timerinterrupt
  3286                              <2> 
  3287                              <2> %ifdef gui.background
  3288 00002899 00000000            <2> 	.bgi dd 0
  3289                              <2> %endif
  3290                              <2> 	
  3291                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3292 0000289D 6689DE              <2> 	mov si, bx
  3293 000028A0 E88D600000          <2> 	call putpixel
  3294 000028A5 E908DAFFFF          <2> 	jmp timerinterrupt
  3295                              <2> 
  3296                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3297 000028AA 66D1E2              <2> 	shl dx, 1
  3298 000028AD 66891D[09790000]    <2> 	mov [colorfont2], bx
  3299 000028B4 66893D[27720000]    <2> 	mov [background], di
  3300 000028BB E8D64F0000          <2> 	call showstring2
  3301 000028C0 E9EDD9FFFF          <2> 	jmp timerinterrupt
  3302                              <2> 
  3303                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3304 000028C5 6689F0              <2> 	mov ax, si
  3305 000028C8 6689DE              <2> 	mov si, bx
  3306 000028CB 6689FB              <2> 	mov bx, di
  3307 000028CE E899470000          <2> 	call drawline
  3308 000028D3 E9DAD9FFFF          <2> 	jmp timerinterrupt
  3309                              <2> 
  3310                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3311 000028D8 6689F0              <2> 	mov ax, si
  3312 000028DB 6689DE              <2> 	mov si, bx
  3313 000028DE E8CE420000          <2> 	call drawcircle
  3314 000028E3 E9CAD9FFFF          <2> 	jmp timerinterrupt
  3315                              <2> 
  3316                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3317 000028E8 6689F0              <2> 	mov ax, si
  3318 000028EB 6689DE              <2> 	mov si, bx
  3319 000028EE E8D0430000          <2> 	call fillcircle
  3320 000028F3 E9BAD9FFFF          <2> 	jmp timerinterrupt
  3321                              <2> 	
  3322                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3323 000028F8 6689F0              <2> 	mov ax, si
  3324 000028FB 6689DE              <2> 	mov si, bx
  3325 000028FE 6689FB              <2> 	mov bx, di
  3326 00002901 E8044A0000          <2> 	call drawsquare
  3327 00002906 E9A7D9FFFF          <2> 	jmp timerinterrupt
  3328                              <2> 
  3329                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3330 0000290B 6689F0              <2> 	mov ax, si
  3331 0000290E 6689DE              <2> 	mov si, bx
  3332 00002911 6689FB              <2> 	mov bx, di
  3333 00002914 E8694A0000          <2> 	call fillsquare
  3334 00002919 E994D9FFFF          <2> 	jmp timerinterrupt
  3335                              <1> %endif
  3336                              <1> %ifdef sound.included
  3337                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3338                              <2> soundint:
  3339 0000291E E98FD9FFFF          <2> 	jmp timerinterrupt
  3340                              <1> %endif
  3341                              <1> %ifdef network.included
  3342                              <1> 	%include 'source/interrupts/19_netint.asm'
  3343                              <1> %endif
  3344                              <1> 
  3345                              <1> termcopy:
  3346                              <1> %ifdef io.serial
  3347                              <1> 	ret
  3348                              <1> %else
  3349                              <1> %ifdef terminal.vsync
  3350 00002923 C605[2B290000]01    <1> 	mov byte [termcopyneeded], 1
  3351 0000292A C3                  <1> 	ret
  3352                              <1> %else
  3353                              <1> 	call newtermcopy
  3354                              <1> 	ret
  3355                              <1> %endif
  3356 0000292B 00                  <1> 	termcopyneeded db 0
  3357 0000292C 00000000            <1> 	termcursorpos dd 0
  3358 00002930 00000000            <1> 	removedvideo dd 0
  3359                              <1> newtermcopy:
  3360 00002934 60                  <1> 	pusha
  3361 00002935 BF[9CE32B00]        <1> 	mov edi, videobuf
  3362 0000293A 31DB                <1> 	xor ebx, ebx
  3363 0000293C 881D[2B290000]      <1> 	mov [termcopyneeded], bl
  3364 00002942 8B1D[0B260000]      <1> 	mov ebx, [videobufpos]
  3365 00002948 01DF                <1> 	add edi, ebx
  3366 0000294A 893D[2C290000]      <1> 	mov [termcursorpos], edi
  3367 00002950 E8E2000000          <1> 	call switchtermcursor
  3368 00002955 803D[028A0000]00    <1> 	cmp byte [guion], 0
  3369 0000295C 0F8420000000        <1> 	je near nowincopy
  3370                              <1> %ifdef gui.included
  3371 00002962 C605[18810000]00    <1> 	mov byte [mouseselecton], 0
  3372 00002969 C605[1B240000]01    <1> 	mov byte [termcopyon], 1
  3373 00002970 803D[1A240000]01    <1> 	cmp byte [termguion], 1
  3374 00002977 0F8486540000        <1> 	je near windowvideocopy
  3375                              <1> %endif
  3376 0000297D E9AE000000          <1> 	jmp nocopytermatall
  3377                              <1> nowincopy:
  3378 00002982 BE00000A00          <1> 	mov esi, 0xA0000
  3379 00002987 A1[4B020000]        <1> 	mov eax, [basecache]
  3380 0000298C C1E004              <1> 	shl eax, 4
  3381 0000298F 29C6                <1> 	sub esi, eax
  3382 00002991 BF[9CE32B00]        <1> 	mov edi, videobuf
  3383 00002996 31C9                <1> 	xor ecx, ecx
  3384 00002998 668B0D[11260000]    <1> 	mov cx, [charxy]
  3385                              <1> nowincopy2:
  3386 0000299F 8B07                <1> 	mov eax, [edi]
  3387 000029A1 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3388 000029A7 8B1F                <1> 	mov ebx, [edi]
  3389 000029A9 8907                <1> 	mov [edi], eax
  3390 000029AB 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3391 000029B1 81C702000000        <1> 	add edi, 2
  3392 000029B7 39D8                <1> 	cmp eax, ebx
  3393 000029B9 744B                <1> 	je nopresentwinfont
  3394 000029BB 81EF02000000        <1> 	sub edi, 2
  3395 000029C1 BD[5C8C0000]        <1> 	mov ebp, fonts
  3396 000029C6 31C0                <1> 	xor eax, eax
  3397 000029C8 668B07              <1> 	mov ax, [edi]
  3398 000029CB C1E004              <1> 	shl eax, 4
  3399 000029CE 01C5                <1> 	add ebp, eax
  3400 000029D0 81C702000000        <1> 	add edi, 2
  3401 000029D6 668B1F              <1> 	mov bx, [edi]
  3402 000029D9 31D2                <1> 	xor edx, edx
  3403 000029DB 8A15[11260000]      <1> 	mov dl, [charxy]
  3404 000029E1 C1C110              <1> 	rol ecx, 16
  3405 000029E4 B110                <1> 	mov cl, 16
  3406                              <1> nowinfont:
  3407 000029E6 8A4500              <1> 	mov al, [ebp]
  3408 000029E9 D0C8                <1> 	ror al, 1
  3409 000029EB 80FB80              <1> 	cmp bl, 0x80
  3410 000029EE 7202                <1> 	jb notnotfont
  3411 000029F0 F6D0                <1> 	not al
  3412                              <1> notnotfont:
  3413 000029F2 8806                <1> 	mov [esi], al
  3414 000029F4 01D6                <1> 	add esi, edx
  3415 000029F6 45                  <1> 	inc ebp
  3416 000029F7 FEC9                <1> 	dec cl
  3417 000029F9 80F900              <1> 	cmp cl, 0
  3418 000029FC 75E8                <1> 	jne nowinfont
  3419 000029FE C1E204              <1> 	shl edx, 4
  3420 00002A01 29D6                <1> 	sub esi, edx
  3421 00002A03 C1C110              <1> 	rol ecx, 16
  3422                              <1> nopresentwinfont:
  3423 00002A06 81C702000000        <1> 	add edi, 2
  3424 00002A0C 46                  <1> 	inc esi
  3425 00002A0D FEC9                <1> 	dec cl
  3426 00002A0F 80F900              <1> 	cmp cl, 0
  3427 00002A12 758B                <1> 	jne nowincopy2
  3428 00002A14 8A0D[11260000]      <1> 	mov cl, [charxy]
  3429 00002A1A 31D2                <1> 	xor edx, edx
  3430 00002A1C 88CA                <1> 	mov dl, cl
  3431 00002A1E 29D6                <1> 	sub esi, edx
  3432 00002A20 C1E204              <1> 	shl edx, 4
  3433 00002A23 01D6                <1> 	add esi, edx
  3434 00002A25 FECD                <1> 	dec ch
  3435 00002A27 80FD00              <1> 	cmp ch, 0
  3436 00002A2A 0F856FFFFFFF        <1> 	jne nowincopy2
  3437                              <1> nocopytermatall:
  3438 00002A30 E802000000          <1> 	call switchtermcursor
  3439 00002A35 61                  <1> 	popa
  3440 00002A36 C3                  <1> 	ret
  3441                              <1> 	
  3442                              <1> switchtermcursor:
  3443 00002A37 8B3D[2C290000]      <1> 	mov edi, [termcursorpos]
  3444 00002A3D 668B4702            <1> 	mov ax, [edi + 2]
  3445 00002A41 668B1F              <1> 	mov bx, [edi]
  3446 00002A44 663D8000            <1> 	cmp ax, 0x80
  3447 00002A48 7209                <1> 	jb movlargecursorterm
  3448 00002A4A 66B80700            <1> 	mov ax, 7
  3449 00002A4E E904000000          <1> 	jmp movedcursorterm
  3450                              <1> movlargecursorterm:
  3451 00002A53 66B8F000            <1> 	mov ax, 0xF0
  3452                              <1> movedcursorterm:
  3453 00002A57 66894702            <1> 	mov [edi + 2], ax
  3454 00002A5B 6681FB0000          <1> 	cmp bx, 0
  3455 00002A60 7507                <1> 	jne fixednocursorterm
  3456 00002A62 66BB2000            <1> 	mov bx, ' '
  3457 00002A66 66891F              <1> 	mov [edi], bx
  3458                              <1> fixednocursorterm:
  3459 00002A69 C3                  <1> 	ret
  3460                              <1> %endif
  3461                                      %include "source/dosints.asm"
  3462                              <1> int20h:
  3463 00002A6A 66B8004C            <1> mov ax, 0x4C00
  3464                              <1> int21h:
  3465                              <1> dostosolleros:
  3466 00002A6E 6650                <1> 	push ax
  3467 00002A70 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3468 00002A74 8ED8                <1> 	mov ds, ax
  3469 00002A76 8EC0                <1> 	mov es, ax
  3470 00002A78 8EE0                <1> 	mov fs, ax
  3471 00002A7A 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3472 00002A7E 8EE8                <1> 	mov gs, ax
  3473 00002A80 6658                <1> 	pop ax
  3474 00002A82 9C                  <1> 	pushf
  3475 00002A83 60                  <1> 	pusha
  3476 00002A84 80FC01              <1> 	cmp ah, 1
  3477 00002A87 0F8449000000        <1> 	je near dosgchar
  3478 00002A8D 80FC02              <1> 	cmp ah, 2
  3479 00002A90 0F844A000000        <1> 	je near doswchar
  3480 00002A96 80FC09              <1> 	cmp ah, 9
  3481 00002A99 0F8451000000        <1> 	je near dosprintstr
  3482 00002A9F 80FC0A              <1> 	cmp ah, 0xA
  3483 00002AA2 0F8463000000        <1> 	je near dosgetstr
  3484 00002AA8 80FC2B              <1> 	cmp ah, 0x2B
  3485 00002AAB 0F84A2000000        <1> 	je near dosgetdate
  3486 00002AB1 80FC2C              <1> 	cmp ah, 0x2C
  3487 00002AB4 0F84BC000000        <1> 	je near dosgettime
  3488 00002ABA 80FC4C              <1> 	cmp ah, 0x4C
  3489 00002ABD 0F84D1000000        <1> 	je near dosexit
  3490                              <1> backtodos:
  3491 00002AC3 61                  <1> 	popa
  3492 00002AC4 9D                  <1> 	popf
  3493 00002AC5 6650                <1> 	push ax
  3494 00002AC7 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3495 00002ACB 8ED8                <1> 	mov ds, ax
  3496 00002ACD 8EC0                <1> 	mov es, ax
  3497 00002ACF 8EE0                <1> 	mov fs, ax
  3498 00002AD1 8EE8                <1> 	mov gs, ax
  3499 00002AD3 6658                <1> 	pop ax
  3500 00002AD5 CF                  <1> 	iret
  3501                              <1> 
  3502                              <1> dosgchar:
  3503 00002AD6 E8AEF8FFFF          <1> 	call getchar
  3504 00002ADB E9E3FFFFFF          <1> 	jmp backtodos
  3505                              <1> 	
  3506                              <1> doswchar:
  3507 00002AE0 88D0                <1> 	mov al, dl
  3508 00002AE2 30E4                <1> 	xor ah, ah
  3509 00002AE4 B307                <1> 	mov bl, 7
  3510 00002AE6 E81AF9FFFF          <1> 	call prcharint
  3511 00002AEB E9D3FFFFFF          <1> 	jmp backtodos
  3512                              <1> 	
  3513                              <1> dosprintstr:
  3514 00002AF0 31F6                <1> 	xor esi, esi
  3515 00002AF2 6689D6              <1> 	mov si, dx
  3516 00002AF5 81C600004000        <1> 	add esi, dosprogloc
  3517 00002AFB 66B82400            <1> 	mov ax, "$"
  3518 00002AFF B307                <1> 	mov bl, 7
  3519 00002B01 E86EF2FFFF          <1> 	call printint
  3520 00002B06 E9B8FFFFFF          <1> 	jmp backtodos
  3521                              <1> 	
  3522                              <1> dosgetstr:
  3523 00002B0B 31F6                <1> 	xor esi, esi
  3524 00002B0D 6689D6              <1> 	mov si, dx
  3525 00002B10 81C600004000        <1> 	add esi, dosprogloc
  3526 00002B16 B900000000          <1> 	mov ecx, 0
  3527 00002B1B 8A0E                <1> 	mov cl, [esi]
  3528 00002B1D 81C602000000        <1> 	add esi, 2
  3529 00002B23 89F7                <1> 	mov edi, esi
  3530 00002B25 8935[4F2B0000]      <1> 	mov [stringstart], esi
  3531 00002B2B 01CF                <1> 	add edi, ecx
  3532 00002B2D B00A                <1> 	mov al, 10
  3533 00002B2F B307                <1> 	mov bl, 7
  3534 00002B31 E884F3FFFF          <1> 	call rdprintdos
  3535 00002B36 89F1                <1> 	mov ecx, esi
  3536 00002B38 2B0D[4F2B0000]      <1> 	sub ecx, [stringstart]
  3537 00002B3E 8B35[4F2B0000]      <1> 	mov esi, [stringstart]
  3538 00002B44 884EFF              <1> 	mov [esi - 1], cl
  3539 00002B47 884EFE              <1> 	mov [esi - 2], cl
  3540 00002B4A E974FFFFFF          <1> 	jmp backtodos
  3541 00002B4F 00000000            <1> stringstart dd 0
  3542                              <1> 
  3543                              <1> dosgetdate:
  3544 00002B53 E888160000          <1> 	call time
  3545 00002B58 8A0D[F7440000]      <1> 	mov cl, [RTCtimeYear]
  3546 00002B5E B500                <1> 	mov ch, 0
  3547 00002B60 6681C1D007          <1> 	add cx, 2000
  3548 00002B65 8A35[F6440000]      <1> 	mov dh, [RTCtimeMonth]
  3549 00002B6B 8A15[F5440000]      <1> 	mov dl, [RTCtimeDay]
  3550 00002B71 E94DFFFFFF          <1> 	jmp backtodos
  3551                              <1> 
  3552                              <1> dosgettime:
  3553 00002B76 E865160000          <1> 	call time
  3554 00002B7B 8A2D[F4440000]      <1> 	mov ch, [RTCtimeHour]
  3555 00002B81 8A0D[F3440000]      <1> 	mov cl, [RTCtimeMinute]
  3556 00002B87 8A35[F2440000]      <1> 	mov dh, [RTCtimeSecond]
  3557 00002B8D B200                <1> 	mov dl, 0
  3558 00002B8F E92FFFFFFF          <1> 	jmp backtodos
  3559                              <1> 	
  3560                              <1> dosexit:
  3561 00002B94 BE[DD890000]        <1> 	mov esi, line
  3562 00002B99 E8CFF1FFFF          <1> 	call print
  3563 00002B9E 61                  <1> 	popa
  3564 00002B9F 9D                  <1> 	popf
  3565 00002BA0 8B25[08B20300]      <1> 	mov esp, [previousstack]
  3566 00002BA6 31DB                <1> 	xor ebx, ebx
  3567 00002BA8 88C3                <1> 	mov bl, al
  3568 00002BAA 80FB00              <1> 	cmp bl, 0
  3569 00002BAD 0F8540F1FFFF        <1> 	jne near exitprog.error
  3570 00002BB3 C3                  <1> 	ret
  3571                                      %include "source/shush.asm"
  3572                              <1> os:
  3573                              <1> setdefenv:
  3574 00002BB4 C605[14B20300]2F    <1> 	mov byte [currentfolder], '/'
  3575 00002BBB C705[10B20300]0100- <1> 	mov dword [currentfolderloc], 1
  3576 00002BC3 0000                <1>
  3577 00002BC5 E858F2FFFF          <1> 	call clear
  3578                              <1> 	
  3579                              <1> bootfilecheck:
  3580 00002BCA 803D[18B40300]01    <1> 	cmp byte [ranboot], 1
  3581 00002BD1 0F8421000000        <1> 	je near nobootfile
  3582                              <1> 	%ifdef hardware.automatic
  3583 00002BD7 E8C1380000          <1> 		call initializelater ;Initialize components that have debug messages
  3584                              <1> 	%endif
  3585                              <1> 	%ifdef disk.none
  3586                              <1> 	%else
  3587 00002BDC BF[9C890000]        <1> 		mov edi, bootfilename
  3588 00002BE1 BE00004000          <1> 		mov esi, 0x400000
  3589 00002BE6 E8093D0000          <1> 		call loadfile
  3590 00002BEB 81FA00000000        <1> 		cmp edx, 0
  3591 00002BF1 7505                <1> 		jne nobootfile
  3592 00002BF3 E84E0E0000          <1> 		call progbatchfound
  3593                              <1> 	%endif
  3594                              <1> nobootfile:	
  3595 00002BF8 C605[18B40300]01    <1> 	mov byte [ranboot], 1
  3596                              <1> 
  3597 00002BFF BE[02000000]        <1> 	mov esi, signature
  3598                              <1> .sigcopyloop:	;this prevents an odd error
  3599 00002C04 658A06              <1> 	mov al, [gs:esi]
  3600 00002C07 8806                <1> 	mov [esi], al
  3601 00002C09 46                  <1> 	inc esi
  3602 00002C0A 81FE[10000000]      <1> 	cmp esi, signatureend
  3603 00002C10 72F2                <1> 	jb .sigcopyloop
  3604                              <1> 	
  3605 00002C12 BE[02000000]        <1> 	mov esi, signature
  3606 00002C17 E851F1FFFF          <1> 	call print
  3607 00002C1C 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3608 00002C22 E828070000          <1> 	call showdec
  3609 00002C27 E83CF1FFFF          <1> 	call printline
  3610 00002C2C BE[B9890000]        <1> 	mov esi, userask
  3611 00002C31 E837F1FFFF          <1> 	call print
  3612                              <1> 
  3613                              <1> usercheck:
  3614 00002C36 BE[88C80300]        <1> 	mov esi, buftxt
  3615 00002C3B BF[88CC0300]        <1> 	mov edi, buftxtend
  3616 00002C40 B00A                <1> 	mov al, 10
  3617 00002C42 E85FF2FFFF          <1> 	call rdprint
  3618 00002C47 56                  <1> 	push esi
  3619 00002C48 BE[C3890000]        <1> 	mov esi, pwdask
  3620 00002C4D E81BF1FFFF          <1> 	call print
  3621 00002C52 5E                  <1> 	pop esi
  3622 00002C53 46                  <1> 	inc esi
  3623 00002C54 8935[552D0000]      <1> 	mov [esipass], esi
  3624                              <1> passcheck:
  3625 00002C5A E82AF7FFFF          <1> 	call getchar
  3626 00002C5F 3C0A                <1> 	cmp al, 10
  3627 00002C61 0F843E000000        <1> 	je near gotpass
  3628 00002C67 3C08                <1> 	cmp al, 8
  3629 00002C69 0F8415000000        <1> 	je near backpass
  3630 00002C6F 8806                <1> 	mov [esi], al
  3631 00002C71 46                  <1> 	inc esi
  3632 00002C72 30E4                <1> 	xor ah, ah
  3633 00002C74 B02A                <1> 	mov al, "*"
  3634 00002C76 E88AF7FFFF          <1> 	call prcharint
  3635 00002C7B E9DAFFFFFF          <1> 	jmp passcheck
  3636 00002C80 08200800            <1> backcursor2 db 8," ",8,0
  3637                              <1> backpass:
  3638 00002C84 3B35[552D0000]      <1> 	cmp esi, [esipass]
  3639 00002C8A 0F84CAFFFFFF        <1> 	je near passcheck
  3640 00002C90 4E                  <1> 	dec esi
  3641 00002C91 C60600              <1> 	mov byte [esi], 0
  3642 00002C94 56                  <1> 	push esi
  3643 00002C95 BE[802C0000]        <1> 	mov esi, backcursor2
  3644 00002C9A E8CEF0FFFF          <1> 	call print
  3645 00002C9F 5E                  <1> 	pop esi
  3646 00002CA0 E9B5FFFFFF          <1> 	jmp passcheck
  3647                              <1> gotpass:
  3648 00002CA5 B00A                <1> 	mov al, 10
  3649 00002CA7 E859F7FFFF          <1> 	call prcharint
  3650 00002CAC 30C0                <1> 	xor al, al
  3651 00002CAE 31C9                <1> 	xor ecx, ecx
  3652 00002CB0 8806                <1> 	mov [esi], al
  3653 00002CB2 BB[DF890000]        <1> 	mov ebx, userlst
  3654                              <1> userfind:
  3655 00002CB7 BE[88C80300]        <1> 	mov esi, buftxt
  3656 00002CBC 8A06                <1> 	mov al, [esi]
  3657 00002CBE 3C00                <1> 	cmp al, 0
  3658 00002CC0 0F84EEFEFFFF        <1> 	je near os
  3659 00002CC6 891D[592D0000]      <1> 	mov [usercache], ebx
  3660 00002CCC E87E030000          <1> 	call tester
  3661 00002CD1 3C01                <1> 	cmp al, 1
  3662 00002CD3 7419                <1> 	je pwdtest
  3663 00002CD5 41                  <1> 	inc ecx
  3664                              <1> nxtuser:
  3665 00002CD6 8A03                <1> 	mov al, [ebx]
  3666 00002CD8 43                  <1> 	inc ebx
  3667 00002CD9 3C00                <1> 	cmp al, 0
  3668 00002CDB 75F9                <1> 	jne nxtuser
  3669 00002CDD 81FB[028A0000]      <1> 	cmp ebx, userlstend
  3670 00002CE3 0F83CBFEFFFF        <1> 	jae near os
  3671 00002CE9 E9C9FFFFFF          <1> 	jmp userfind
  3672                              <1> pwdtest:
  3673 00002CEE 46                  <1> 	inc esi
  3674 00002CEF 43                  <1> 	inc ebx
  3675 00002CF0 E85A030000          <1> 	call tester
  3676 00002CF5 3C01                <1> 	cmp al, 1
  3677 00002CF7 7405                <1> 	je pwdrgt
  3678 00002CF9 E9D8FFFFFF          <1> 	jmp nxtuser
  3679                              <1> pwdrgt:
  3680 00002CFE D1E9                <1> 	shr ecx, 1
  3681 00002D00 890D[14B40300]      <1> 	mov [uid], ecx
  3682 00002D06 E817F1FFFF          <1> 	call clear
  3683 00002D0B 31C9                <1> 	xor ecx, ecx
  3684 00002D0D 41                  <1> 	inc ecx
  3685 00002D0E 890D[308E2D00]      <1> 	mov [commandbufpos], ecx
  3686                              <1> returnfromexp:
  3687 00002D14 66B90002            <1> 	mov cx, 200h
  3688 00002D18 BE[88C80300]        <1> 	mov esi, buftxt
  3689 00002D1D 8935[4B300000]      <1> 	mov [currentcommandloc], esi
  3690 00002D23 E825000000          <1> 	call bufclr
  3691                              <1> clearolddata:
  3692 00002D28 31C0                <1> 	xor eax, eax
  3693 00002D2A A2[19B40300]        <1> 	mov [IFON], al
  3694 00002D2F A2[1AB40300]        <1> 	mov [IFTRUE], al
  3695 00002D34 A2[82B40300]        <1> 	mov [BATCHISON], al
  3696 00002D39 A3[7EB40300]        <1> 	mov [BATCHPOS], eax
  3697 00002D3E A2[83B40300]        <1> 	mov [LOOPON], al
  3698 00002D43 A3[84B40300]        <1> 	mov [LOOPPOS], eax
  3699 00002D48 E939000000          <1> 	jmp nwcmd
  3700                              <1> bufclr:	
  3701 00002D4D 30C0                <1> 	xor al, al
  3702 00002D4F 8806                <1> 	mov [esi], al
  3703 00002D51 46                  <1> 	inc esi
  3704 00002D52 E2F9                <1> 	loop bufclr
  3705 00002D54 C3                  <1> 	ret
  3706                              <1> 
  3707 00002D55 00000000            <1> esipass dd 0
  3708 00002D59 [DF890000]          <1> usercache dd userlst
  3709                              <1> 	
  3710                              <1> buftxtclear:
  3711 00002D5D 30C0                <1> 	xor al, al
  3712 00002D5F BE[88C80300]        <1> 	mov esi, buftxt
  3713 00002D64 81FE[88CC0300]      <1> clearbuftxt: cmp esi, buf2
  3714 00002D6A 7314                <1> 	jae retbufclr
  3715 00002D6C 8806                <1> 	mov [esi], al
  3716 00002D6E 46                  <1> 	inc esi
  3717 00002D6F E9F0FFFFFF          <1> 	jmp clearbuftxt
  3718                              <1> 
  3719 00002D74 39DE                <1> clearitbuf: cmp esi, ebx
  3720 00002D76 7308                <1> 	jae retbufclr
  3721 00002D78 8806                <1> 	mov [esi], al
  3722 00002D7A 46                  <1> 	inc esi
  3723 00002D7B E9F4FFFFFF          <1> 	jmp clearitbuf
  3724 00002D80 C3                  <1> retbufclr: ret
  3725                              <1> 
  3726 00002D81 E900000000          <1> full:	jmp nwcmd
  3727                              <1> 
  3728                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3729                              <1> nwcmd:
  3730 00002D86 FB                  <1> 	sti
  3731 00002D87 31C0                <1> 	xor eax, eax
  3732 00002D89 3905[672F0000]      <1> 	cmp [nextcommandloc], eax
  3733 00002D8F 7416                <1> 	je nomultiplecommand
  3734 00002D91 8B35[672F0000]      <1> 	mov esi, [nextcommandloc]
  3735 00002D97 8935[6B2F0000]      <1> 	mov [thiscommandloc], esi
  3736 00002D9D E8D2010000          <1> 	call fixvariables
  3737 00002DA2 E9DFFFFFFF          <1> 	jmp nwcmd
  3738                              <1> nomultiplecommand:
  3739 00002DA7 A3[6B2F0000]        <1> 	mov [thiscommandloc], eax
  3740 00002DAC 3805[B76A0000]      <1> 	cmp [threadson], al
  3741 00002DB2 7405                <1> 	je noclinwcmd
  3742 00002DB4 A2[B76A0000]        <1> 	mov [threadson], al
  3743                              <1> noclinwcmd:
  3744 00002DB9 B001                <1> 	mov al, 1
  3745 00002DBB 3805[82B40300]      <1> 	cmp [BATCHISON], al
  3746 00002DC1 7501                <1> 	jne cancel
  3747 00002DC3 C3                  <1> 	ret
  3748 00002DC4 30C0                <1> cancel:	xor al, al
  3749 00002DC6 A2[19B40300]        <1> 	mov [IFON], al
  3750 00002DCB A2[82B40300]        <1> 	mov [BATCHISON], al
  3751 00002DD0 B05B                <1> 	mov al, '['
  3752 00002DD2 66BB0700            <1> 	mov bx, 7
  3753 00002DD6 E841F6FFFF          <1> 	call prcharq
  3754 00002DDB 8B35[592D0000]      <1> 	mov esi, [usercache]
  3755 00002DE1 E863EFFFFF          <1> 	call printquiet
  3756 00002DE6 BE[CD890000]        <1> 	mov esi, computer
  3757 00002DEB E859EFFFFF          <1> 	call printquiet
  3758 00002DF0 BE[14B20300]        <1> 	mov esi, currentfolder
  3759 00002DF5 0335[0CB20300]      <1> 	add esi, [lastfolderloc]
  3760 00002DFB E849EFFFFF          <1> 	call printquiet
  3761 00002E00 BE[D8890000]        <1> 	mov esi, endprompt
  3762 00002E05 E863EFFFFF          <1> 	call print
  3763 00002E0A E84EFFFFFF          <1> 	call buftxtclear
  3764 00002E0F BE[88C80300]        <1> 	mov esi, buftxt
  3765 00002E14 C605[72230000]01    <1> 	mov byte [commandedit], 1
  3766 00002E1B B00A                <1> 	mov al, 10
  3767 00002E1D 66BB0700            <1> 	mov bx, 7
  3768 00002E21 BF[88CC0300]        <1> 	mov edi, buftxtend
  3769 00002E26 E87BF0FFFF          <1> 	call rdprint
  3770 00002E2B C605[72230000]00    <1> 	mov byte [commandedit], 0
  3771 00002E32 803D[88C80300]00    <1> 	cmp byte [buftxt], 0
  3772 00002E39 0F8447FFFFFF        <1> 	je near nwcmd
  3773 00002E3F 8B35[308E2D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3774 00002E45 8935[2C8E2D00]      <1> 	mov [lastcommandpos], esi
  3775 00002E4B FF05[388E2D00]      <1> 	inc dword [commandsentered]
  3776 00002E51 BF[88C80300]        <1> 	mov edi, buftxt
  3777 00002E56 81C6[3C8E2D00]      <1> 	add esi, commandbuf
  3778 00002E5C 81FE[3C9E2D00]      <1> 	cmp esi, commandbufend
  3779 00002E62 7605                <1> 	jbe copycommand
  3780 00002E64 BE[3C8E2D00]        <1> 	mov esi, commandbuf
  3781                              <1> copycommand:
  3782 00002E69 8A07                <1> 	mov al, [edi]
  3783 00002E6B 8806                <1> 	mov [esi], al
  3784 00002E6D 47                  <1> 	inc edi
  3785 00002E6E 46                  <1> 	inc esi
  3786 00002E6F 3C00                <1> 	cmp al, 0
  3787 00002E71 7412                <1> 	je donecopy
  3788 00002E73 81FE[3C9E2D00]      <1> 	cmp esi, commandbufend
  3789 00002E79 76EE                <1> 	jbe copycommand
  3790 00002E7B BE[3C8E2D00]        <1> 	mov esi, commandbuf
  3791 00002E80 E9E4FFFFFF          <1> 	jmp copycommand
  3792                              <1> donecopy:
  3793 00002E85 81EE[3C8E2D00]      <1> 	sub esi, commandbuf
  3794 00002E8B 8935[308E2D00]      <1> 	mov [commandbufpos], esi
  3795 00002E91 E8D9000000          <1> 	call run
  3796 00002E96 E9EBFEFFFF          <1> 	jmp nwcmd
  3797                              <1> 
  3798 00002E9B E8BDFEFFFF          <1> input:	call buftxtclear
  3799 00002EA0 BE[88C80300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3800 00002EA5 BF[88CC0300]        <1> 	mov edi, buftxtend
  3801 00002EAA B00A                <1> stdin:	mov al, 10
  3802 00002EAC B307                <1> 	mov bl, 7
  3803 00002EAE E8F3EFFFFF          <1> 	call rdprint
  3804 00002EB3 C3                  <1> 	ret
  3805                              <1> 
  3806                              <1> replacevariable:
  3807 00002EB4 8A4601              <1> 	mov al, [esi + 1]
  3808 00002EB7 C64601FF            <1> 	mov byte [esi + 1], 255
  3809 00002EBB 3C24                <1> 	cmp al, "$"
  3810 00002EBD 0F84B1000000        <1> 	je near fixvariables
  3811 00002EC3 884601              <1> 	mov [esi + 1], al
  3812 00002EC6 56                  <1> 	push esi
  3813 00002EC7 81EE[88C80300]      <1> 	sub esi, buftxt
  3814 00002ECD 89F7                <1> 	mov edi, esi
  3815 00002ECF 81C6[88C80300]      <1> 	add esi, buftxt
  3816 00002ED5 47                  <1> 	inc edi
  3817 00002ED6 BB[88B40300]        <1> 	mov ebx, variables
  3818 00002EDB E82D180000          <1> 	call nxtvrech
  3819 00002EE0 89F7                <1> 	mov edi, esi
  3820 00002EE2 31DB                <1> 	xor ebx, ebx
  3821 00002EE4 4E                  <1> 	dec esi
  3822                              <1> findvarname:
  3823 00002EE5 4E                  <1> 	dec esi
  3824 00002EE6 8A06                <1> 	mov al, [esi]
  3825 00002EE8 43                  <1> 	inc ebx
  3826 00002EE9 3C04                <1> 	cmp al, 4
  3827 00002EEB 75F8                <1> 	jne findvarname
  3828 00002EED 5E                  <1> 	pop esi
  3829                              <1> replacevarloop:
  3830 00002EEE 8A07                <1> 	mov al, [edi]
  3831 00002EF0 3C00                <1> 	cmp al, 0
  3832 00002EF2 0F8416000000        <1> 	je near compressbuftxt
  3833 00002EF8 81FB00000000        <1> 	cmp ebx, 0
  3834 00002EFE 0F8419000000        <1> 	je near expandbuftxt
  3835 00002F04 8806                <1> 	mov [esi], al
  3836 00002F06 4B                  <1> 	dec ebx
  3837 00002F07 46                  <1> 	inc esi
  3838 00002F08 47                  <1> 	inc edi
  3839 00002F09 E9E0FFFFFF          <1> 	jmp replacevarloop
  3840                              <1> compressbuftxt:
  3841 00002F0E 8A041E              <1> 	mov al, [esi + ebx]
  3842 00002F11 8806                <1> 	mov [esi], al
  3843 00002F13 46                  <1> 	inc esi
  3844 00002F14 3C00                <1> 	cmp al, 0
  3845 00002F16 75F6                <1> 	jne compressbuftxt
  3846 00002F18 E957000000          <1> 	jmp fixvariables
  3847                              <1> expandbuftxt:
  3848 00002F1D 89F1                <1> 	mov ecx, esi
  3849 00002F1F 8A26                <1> 	mov ah, [esi]
  3850                              <1> expandbuftxtlp:
  3851 00002F21 8A1E                <1> 	mov bl, [esi]
  3852 00002F23 46                  <1> 	inc esi
  3853 00002F24 8A3E                <1> 	mov bh, [esi]
  3854 00002F26 8826                <1> 	mov [esi], ah
  3855 00002F28 88FC                <1> 	mov ah, bh
  3856 00002F2A 80FB00              <1> 	cmp bl, 0
  3857 00002F2D 75F2                <1> 	jne expandbuftxtlp
  3858 00002F2F 89CE                <1> 	mov esi, ecx
  3859 00002F31 8806                <1> 	mov [esi], al
  3860 00002F33 47                  <1> 	inc edi
  3861 00002F34 8A07                <1> 	mov al, [edi]
  3862 00002F36 3C00                <1> 	cmp al, 0
  3863 00002F38 0F8436000000        <1> 	je near fixvariables
  3864 00002F3E 46                  <1> 	inc esi
  3865 00002F3F E9D9FFFFFF          <1> 	jmp expandbuftxt
  3866                              <1> multipleprogline:
  3867 00002F44 30E4                <1> 	xor ah, ah
  3868 00002F46 8826                <1> 	mov [esi], ah
  3869 00002F48 46                  <1> 	inc esi
  3870 00002F49 8935[672F0000]      <1> 	mov [nextcommandloc], esi
  3871 00002F4F E93E000000          <1> 	jmp donefixvariables
  3872                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3873 00002F54 46                  <1> 	inc esi
  3874 00002F55 8A06                <1> 	mov al, [esi]
  3875 00002F57 C606FF              <1> 	mov byte [esi], 255
  3876 00002F5A 3C23                <1> 	cmp al, '#'
  3877 00002F5C 7416                <1> 	je fixvariables
  3878 00002F5E 4E                  <1> 	dec esi
  3879 00002F5F C60600              <1> 	mov byte [esi], 0
  3880 00002F62 E90D000000          <1> 	jmp fixvariables
  3881                              <1> 	
  3882 00002F67 00000000            <1> nextcommandloc dd 0
  3883 00002F6B 00000000            <1> thiscommandloc dd 0	
  3884                              <1> run:
  3885 00002F6F BE[88C80300]        <1> 	mov esi, buftxt
  3886                              <1> fixvariables:
  3887 00002F74 46                  <1> 	inc esi
  3888 00002F75 8A06                <1> 	mov al, [esi]
  3889 00002F77 3C23                <1> 	cmp al, '#'	;inline comment
  3890 00002F79 74D9                <1> 	je inlinecomment
  3891 00002F7B 3C24                <1> 	cmp al, '$' ;variable
  3892 00002F7D 0F8431FFFFFF        <1> 	je near replacevariable
  3893 00002F83 3C3B                <1> 	cmp al, ';' ;program list
  3894 00002F85 74BD                <1> 	je multipleprogline
  3895 00002F87 3C00                <1> 	cmp al, 0
  3896 00002F89 75E9                <1> 	jne fixvariables
  3897 00002F8B 31C0                <1> 	xor eax, eax
  3898 00002F8D A3[672F0000]        <1> 	mov [nextcommandloc], eax
  3899                              <1> donefixvariables:
  3900 00002F92 803D[95350000]00    <1> 	cmp byte [indexdone], 0
  3901 00002F99 7505                <1> 	jne progtest
  3902 00002F9B E857050000          <1> 	call indexfiles
  3903                              <1> progtest:
  3904 00002FA0 31C0                <1> 	xor eax, eax
  3905 00002FA2 BB[08AE0300]        <1> 	mov ebx, fileindex
  3906 00002FA7 668B03              <1> prgnxt:	mov ax, [ebx]
  3907 00002FAA B1FF                <1> 	mov cl, 255
  3908 00002FAC B52C                <1> 	mov ch, 44
  3909 00002FAE 6639C8              <1> 	cmp ax, cx
  3910 00002FB1 740E                <1> 	je fndprg
  3911 00002FB3 43                  <1> 	inc ebx
  3912 00002FB4 81FB[08B20300]      <1> 	cmp ebx, fileindexend
  3913 00002FBA 7363                <1> 	jae prgnf
  3914 00002FBC E9E6FFFFFF          <1> 	jmp prgnxt
  3915 00002FC1 81C302000000        <1> fndprg: add ebx, 2
  3916 00002FC7 31C9                <1> 	xor ecx, ecx
  3917 00002FC9 BE[88C80300]        <1> 	mov esi, buftxt
  3918 00002FCE 390D[6B2F0000]      <1> 	cmp [thiscommandloc], ecx
  3919 00002FD4 7406                <1> 	je noprgtstmultiple
  3920 00002FD6 8B35[6B2F0000]      <1> 	mov esi, [thiscommandloc]
  3921                              <1> noprgtstmultiple:
  3922 00002FDC E8AF000000          <1> 	call cndtest
  3923 00002FE1 3C01                <1> 	cmp al, 1
  3924 00002FE3 7305                <1> 	jae prggood
  3925 00002FE5 E9BDFFFFFF          <1> 	jmp prgnxt
  3926 00002FEA 81FB[08B20300]      <1> prggood: cmp ebx, fileindexend
  3927 00002FF0 7358                <1> 	jae prgdn
  3928 00002FF2 31C0                <1> 	xor eax, eax
  3929 00002FF4 BE[88C80300]        <1> 	mov esi, buftxt
  3930 00002FF9 3905[6B2F0000]      <1> 	cmp [thiscommandloc], eax
  3931 00002FFF 7406                <1> 	je noprggoodmul
  3932 00003001 8B35[6B2F0000]      <1> 	mov esi, [thiscommandloc]
  3933                              <1> noprggoodmul:
  3934 00003007 8935[4B300000]      <1> 	mov [currentcommandloc], esi
  3935 0000300D 81C303000000        <1> 	add ebx, 3
  3936 00003013 8B3B                <1> 	mov edi, [ebx]
  3937 00003015 C605[B76A0000]02    <1> 	mov byte [threadson], 2
  3938 0000301C FFD7                <1> 	call edi
  3939 0000301E C3                  <1> 	ret
  3940                              <1> prgnf:	
  3941 0000301F 8B35[4B300000]      <1> 	mov esi, [currentcommandloc]
  3942 00003025 8A06                <1> 	mov al, [esi]
  3943 00003027 3C00                <1> 	cmp al, 0
  3944 00003029 741F                <1> 	je prgdn
  3945 0000302B BE[A4890000]        <1> 	mov esi, notfound1
  3946 00003030 E838EDFFFF          <1> 	call print
  3947 00003035 8B35[4B300000]      <1> 	mov esi, [currentcommandloc]
  3948 0000303B E82DEDFFFF          <1> 	call print
  3949 00003040 BE[AC890000]        <1> 	mov esi, notfound2
  3950 00003045 E823EDFFFF          <1> 	call print
  3951 0000304A C3                  <1> prgdn:	ret
  3952                              <1> 
  3953 0000304B 00000000            <1> currentcommandloc dd 0
  3954                              <1> 
  3955                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3956 0000304F 6631C0              <1> 	xor ax, ax
  3957 00003052 8A06                <1> retest:	mov al, [esi]
  3958 00003054 8A23                <1> 	mov ah, [ebx]
  3959 00003056 3C00                <1> 	cmp al, 0
  3960 00003058 740B                <1> 	je testtrue
  3961 0000305A 38E0                <1> 	cmp al, ah
  3962 0000305C 750F                <1> 	jne testfalse
  3963 0000305E 43                  <1> 	inc ebx
  3964 0000305F 46                  <1> 	inc esi
  3965 00003060 E9EDFFFFFF          <1> 	jmp retest
  3966                              <1> testtrue:
  3967 00003065 80FC00              <1> 	cmp ah, 0
  3968 00003068 7503                <1> 	jne testfalse
  3969 0000306A B001                <1> 	mov al, 1
  3970 0000306C C3                  <1> 	ret
  3971                              <1> testfalse:
  3972 0000306D 30C0                <1> 	xor al, al
  3973 0000306F C3                  <1> 	ret
  3974                              <1> 
  3975                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3976 00003070 30C0                <1> 	xor al, al
  3977                              <1> opretest:
  3978 00003072 8A06                <1> 	mov al, [esi]
  3979 00003074 8A23                <1> 	mov ah, [ebx]
  3980 00003076 38E0                <1> 	cmp al, ah
  3981 00003078 7513                <1> 	jne optestfalse
  3982 0000307A 80FC00              <1> 	cmp ah, 0
  3983 0000307D 7407                <1> 	je optesttrue
  3984 0000307F 43                  <1> 	inc ebx
  3985 00003080 46                  <1> 	inc esi
  3986 00003081 E9ECFFFFFF          <1> 	jmp opretest
  3987                              <1> optesttrue:
  3988 00003086 3C00                <1> 	cmp al, 0
  3989 00003088 7503                <1> 	jne optestfalse
  3990 0000308A B001                <1> 	mov al, 1
  3991 0000308C C3                  <1> 	ret
  3992                              <1> optestfalse:
  3993 0000308D 30C0                <1> 	xor al, al
  3994 0000308F C3                  <1> 	ret
  3995                              <1> 
  3996                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3997 00003090 30C0                <1> 	xor al, al
  3998 00003092 8A06                <1> cndretest:	mov al, [esi]
  3999 00003094 8A23                <1> 	mov ah, [ebx]
  4000 00003096 38CC                <1> 	cmp ah, cl
  4001 00003098 740B                <1> 	je cndtesttrue
  4002 0000309A 38E0                <1> 	cmp al, ah
  4003 0000309C 750E                <1> 	jne cndtestfalse
  4004 0000309E 43                  <1> 	inc ebx
  4005 0000309F 46                  <1> 	inc esi
  4006 000030A0 E9EDFFFFFF          <1> 	jmp cndretest
  4007                              <1> cndtesttrue:
  4008 000030A5 38C8                <1> 	cmp al, cl
  4009 000030A7 7506                <1> 	jne cndtestalmost
  4010 000030A9 B001                <1> 	mov al, 1
  4011 000030AB C3                  <1> 	ret
  4012                              <1> cndtestfalse:
  4013 000030AC 30C0                <1> 	xor al, al
  4014 000030AE C3                  <1> 	ret
  4015                              <1> cndtestalmost:
  4016 000030AF B002                <1> 	mov al, 2
  4017 000030B1 C3                  <1> 	ret
  4018                              <1> 	
  4019                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4020                              <1> 		                ;ends if array seperator is found backwards after 0
  4021                              <1> 	arnxt:	      
  4022 000030B2 88E8                <1> 		mov al, ch
  4023 000030B4 88CC                <1> 		mov ah, cl        
  4024 000030B6 663906              <1> 		cmp [esi], ax
  4025 000030B9 744E                <1> 		je ardn
  4026 000030BB 66390E              <1> 		cmp [esi], cx
  4027 000030BE 740A                <1> 		je arfnd
  4028 000030C0 46                  <1> 		inc esi
  4029 000030C1 39DE                <1> 		cmp esi, ebx
  4030 000030C3 7344                <1> 		jae ardn
  4031 000030C5 E9E8FFFFFF          <1> 		jmp arnxt
  4032 000030CA 81C602000000        <1> 	arfnd: add esi, 2
  4033 000030D0 891D[0A310000]      <1> 		mov [arbx], ebx
  4034 000030D6 890D[0E310000]      <1> 		mov [arcx], ecx
  4035 000030DC E88CECFFFF          <1> 		call print
  4036 000030E1 8935[10310000]      <1> 		mov [arsi], esi
  4037 000030E7 E87CECFFFF          <1> 		call printline
  4038 000030EC 8B1D[0A310000]      <1> 		mov ebx, [arbx]
  4039 000030F2 668B0D[0E310000]    <1> 		mov cx, [arcx]
  4040 000030F9 8B35[10310000]      <1> 		mov esi, [arsi]
  4041 000030FF 46                  <1> 		inc esi
  4042 00003100 39DE                <1> 		cmp esi, ebx
  4043 00003102 7305                <1> 		jae ardn
  4044 00003104 E9A9FFFFFF          <1> 		jmp arnxt
  4045 00003109 C3                  <1> 	ardn:	ret
  4046 0000310A 00000000            <1> arbx:	dw 0,0
  4047 0000310E 0000                <1> arcx:	db 0,0
  4048 00003110 00000000            <1> arsi:	dw 0,0
  4049                              <1> 
  4050                              <1> clearbuffer:
  4051 00003114 BE[88CC0300]        <1> 	mov esi, buf2
  4052 00003119 B030                <1> 	mov al, '0'
  4053 0000311B 81FE[9CCC0300]      <1> clearbuf: cmp esi, numbuf
  4054 00003121 7308                <1> 	jae doneclearbuff
  4055 00003123 8806                <1> 	mov [esi], al
  4056 00003125 46                  <1> 	inc esi
  4057 00003126 E9F0FFFFFF          <1> 	jmp clearbuf
  4058                              <1> doneclearbuff: 
  4059 0000312B C3                  <1> 		ret
  4060                              <1> 
  4061                              <1> convert:
  4062 0000312C 4E                  <1> 	dec esi
  4063 0000312D 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4064                              <1> .lp:
  4065 0000312F 89DE                <1> 	mov esi, ebx
  4066 00003131 81EE09000000        <1> 	sub esi, 9
  4067 00003137 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4068 0000313D 720D                <1> 	jb .8
  4069 0000313F 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4070 00003145 FE06                <1> 	inc byte [esi]
  4071 00003147 E9E3FFFFFF          <1> 	jmp .lp
  4072 0000314C 46                  <1> .8:	inc esi
  4073 0000314D 81F900E1F505        <1> 	cmp ecx, 100000000
  4074 00003153 720D                <1> 	jb .7
  4075 00003155 81E900E1F505        <1> 	sub ecx, 100000000
  4076 0000315B FE06                <1> 	inc byte [esi]
  4077 0000315D E9CDFFFFFF          <1> 	jmp .lp
  4078 00003162 46                  <1> .7:	inc esi
  4079 00003163 81F980969800        <1> 	cmp ecx, 10000000
  4080 00003169 720D                <1> 	jb .6
  4081 0000316B 81E980969800        <1> 	sub ecx, 10000000
  4082 00003171 FE06                <1> 	inc byte [esi]
  4083 00003173 E9B7FFFFFF          <1> 	jmp .lp
  4084 00003178 46                  <1> .6:	inc esi
  4085 00003179 81F940420F00        <1> 	cmp ecx, 1000000
  4086 0000317F 720D                <1> 	jb .5
  4087 00003181 81E940420F00        <1> 	sub ecx, 1000000
  4088 00003187 FE06                <1> 	inc byte [esi]
  4089 00003189 E9A1FFFFFF          <1> 	jmp .lp
  4090 0000318E 46                  <1> .5:	inc esi
  4091 0000318F 81F9A0860100        <1> 	cmp ecx, 100000
  4092 00003195 720D                <1> 	jb .4
  4093 00003197 81E9A0860100        <1> 	sub ecx, 100000
  4094 0000319D FE06                <1> 	inc byte [esi]
  4095 0000319F E98BFFFFFF          <1> 	jmp .lp
  4096 000031A4 46                  <1> .4:	inc esi
  4097 000031A5 81F910270000        <1> 	cmp ecx, 10000
  4098 000031AB 720D                <1> 	jb .3
  4099 000031AD 81E910270000        <1> 	sub ecx, 10000
  4100 000031B3 FE06                <1> 	inc byte [esi]
  4101 000031B5 E975FFFFFF          <1> 	jmp .lp
  4102 000031BA 46                  <1> .3:	inc esi
  4103 000031BB 81F9E8030000        <1> 	cmp ecx, 1000
  4104 000031C1 720D                <1> 	jb .2
  4105 000031C3 81E9E8030000        <1> 	sub ecx, 1000
  4106 000031C9 FE06                <1> 	inc byte [esi]
  4107 000031CB E95FFFFFFF          <1> 	jmp .lp
  4108 000031D0 46                  <1> .2:	inc esi
  4109 000031D1 81F964000000        <1> 	cmp ecx, 100
  4110 000031D7 720D                <1> 	jb .1
  4111 000031D9 81E964000000        <1> 	sub ecx, 100
  4112 000031DF FE06                <1> 	inc byte [esi]
  4113 000031E1 E949FFFFFF          <1> 	jmp .lp
  4114 000031E6 46                  <1> .1:	inc esi
  4115 000031E7 81F90A000000        <1> 	cmp ecx, 10
  4116 000031ED 720D                <1> 	jb .0
  4117 000031EF 81E90A000000        <1> 	sub ecx, 10
  4118 000031F5 FE06                <1> 	inc byte [esi]
  4119 000031F7 E933FFFFFF          <1> 	jmp .lp
  4120 000031FC 46                  <1> .0:	inc esi
  4121 000031FD 81F901000000        <1> 	cmp ecx, 1
  4122 00003203 720D                <1> 	jb .dn
  4123 00003205 81E901000000        <1> 	sub ecx, 1
  4124 0000320B FE06                <1> 	inc byte [esi]
  4125 0000320D E91DFFFFFF          <1> 	jmp .lp
  4126                              <1> .dn:
  4127 00003212 C3                  <1> 	ret
  4128                              <1> 
  4129                              <1> 	
  4130                              <1> 
  4131 00003213 00<rept>            <1> hexnumber times 8 db 0
  4132 0000321B 202000              <1> hexnumberend db "  ",0
  4133                              <1> 
  4134                              <1> converthex:
  4135                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4136 0000321E 56                  <1> 	push esi
  4137 0000321F B030                <1> 	mov al, "0"
  4138 00003221 39FE                <1> .clearlp: cmp esi, edi
  4139 00003223 7308                <1> 	jae .doneclear
  4140 00003225 8806                <1> 	mov [esi], al
  4141 00003227 46                  <1> 	inc esi
  4142 00003228 E9F4FFFFFF          <1> 	jmp .clearlp
  4143                              <1> .doneclear:
  4144 0000322D 81EE02000000        <1> 	sub esi, 2
  4145 00003233 89C8                <1> 	mov eax, ecx
  4146                              <1> .loop:
  4147 00003235 30FF                <1> 	xor bh, bh
  4148 00003237 88C3                <1> 	mov bl, al
  4149 00003239 66C1E304            <1> 	shl bx, 4
  4150 0000323D C0EB04              <1> 	shr bl, 4
  4151 00003240 86DF                <1> 	xchg bl, bh ;they are backwards
  4152 00003242 80C330              <1> 	add bl, 48
  4153 00003245 80FB39              <1> 	cmp bl, "9"
  4154 00003248 7609                <1> 	jbe .goodbl
  4155 0000324A 80EB30              <1> 	sub bl, 48
  4156 0000324D 80EB0A              <1> 	sub bl, 0xA
  4157 00003250 80C341              <1> 	add bl, "A"
  4158                              <1> .goodbl:
  4159 00003253 80C730              <1> 	add bh, 48
  4160 00003256 80FF39              <1> 	cmp bh, "9"
  4161 00003259 7609                <1> 	jbe .goodbh
  4162 0000325B 80EF30              <1> 	sub bh, 48
  4163 0000325E 80EF0A              <1> 	sub bh, 0xA
  4164 00003261 80C741              <1> 	add bh, "A"
  4165                              <1> .goodbh:
  4166 00003264 C1E808              <1> 	shr eax, 8
  4167 00003267 66891E              <1> 	mov [esi], bx
  4168 0000326A 81EE02000000        <1> 	sub esi, 2
  4169 00003270 3B3424              <1> 	cmp esi, [esp]
  4170 00003273 7207                <1> 	jb .done
  4171 00003275 3D00000000          <1> 	cmp eax, 0
  4172 0000327A 75B9                <1> 	jne .loop
  4173                              <1> .done:
  4174 0000327C 5E                  <1> 	pop esi
  4175 0000327D C3                  <1> 	ret
  4176                              <1> 	
  4177                              <1> 	
  4178 0000327E 00                  <1> smallhex db 0
  4179 0000327F 01                  <1> firsthexshown db 1
  4180                              <1> showhexsmall:
  4181 00003280 C605[7E320000]01    <1> 	mov byte [smallhex], 1
  4182 00003287 E808000000          <1> 	call showhex
  4183 0000328C C605[7E320000]00    <1> 	mov byte [smallhex], 0
  4184 00003293 C3                  <1> 	ret
  4185                              <1> showhex:
  4186 00003294 60                  <1> 	pusha
  4187 00003295 BE[13320000]        <1> 	mov esi, hexnumber
  4188 0000329A BF[1B320000]        <1> 	mov edi, hexnumberend
  4189 0000329F E87AFFFFFF          <1> 	call converthex
  4190 000032A4 803D[7F320000]01    <1> 	cmp byte [firsthexshown], 1
  4191 000032AB 7503                <1> 	jne .show
  4192 000032AD 6631D2              <1> 	xor dx, dx
  4193                              <1> .show:
  4194 000032B0 803D[7F320000]03    <1> 	cmp byte [firsthexshown], 3
  4195 000032B7 7505                <1> 	jne .nonewhexline
  4196 000032B9 E8AAEAFFFF          <1> 	call printline
  4197                              <1> .nonewhexline:
  4198 000032BE 803D[7F320000]04    <1> 	cmp byte [firsthexshown], 4
  4199 000032C5 7522                <1> 	jne .notab
  4200 000032C7 B1A0                <1> 	mov cl, 160
  4201 000032C9 28D1                <1> 	sub cl, dl
  4202 000032CB C0E905              <1> 	shr cl, 5
  4203 000032CE C0E105              <1> 	shl cl, 5
  4204 000032D1 80F900              <1> 	cmp cl, 0
  4205 000032D4 750A                <1> 	jne .nonewline
  4206 000032D6 E88DEAFFFF          <1> 	call printline
  4207 000032DB E909000000          <1> 	jmp .notab
  4208                              <1> .nonewline:
  4209 000032E0 80C20F              <1> 	add dl, 15
  4210 000032E3 C0EA04              <1> 	shr dl, 4
  4211 000032E6 C0E204              <1> 	shl dl, 4
  4212                              <1> .notab:
  4213 000032E9 BE[13320000]        <1> 	mov esi, hexnumber
  4214 000032EE 803D[7E320000]01    <1> 	cmp byte [smallhex],1
  4215 000032F5 7506                <1> 	jne .nosmall
  4216 000032F7 81C606000000        <1> 	add esi, 6
  4217                              <1> .nosmall:
  4218 000032FD 803D[7F320000]05    <1> 	cmp byte [firsthexshown], 5
  4219 00003304 750A                <1> 	jne .noquiet
  4220 00003306 E83EEAFFFF          <1> 	call printquiet
  4221 0000330B E918000000          <1> 	jmp .donequiet
  4222                              <1> .noquiet:
  4223 00003310 803D[7F320000]06    <1> 	cmp byte [firsthexshown], 6
  4224 00003317 750A                <1> 	jne .normal
  4225 00003319 E83EEAFFFF          <1> 	call printhighlight
  4226 0000331E E905000000          <1> 	jmp .donequiet
  4227                              <1> .normal:
  4228 00003323 E845EAFFFF          <1> 	call print
  4229                              <1> .donequiet:
  4230 00003328 803D[7F320000]02    <1> 	cmp byte [firsthexshown], 2
  4231 0000332F 7505                <1> 	jne .shown
  4232 00003331 E832EAFFFF          <1> 	call printline
  4233                              <1> .shown:
  4234 00003336 C605[7F320000]00    <1> 	mov byte [firsthexshown], 0
  4235 0000333D 61                  <1> 	popa
  4236 0000333E C3                  <1> 	ret
  4237                              <1> 
  4238                              <1> 
  4239 0000333F 303030303030303030- <1> decnumber db "00000000000000"
  4240 00003348 3030303030          <1>
  4241 0000334D 2000                <1> decnumberend: db " ",0
  4242                              <1> 
  4243                              <1> showdec: ;same as showhex, just uses decimal conversion
  4244 0000334F 60                  <1> 	pusha
  4245 00003350 BF[3F330000]        <1> 	mov edi, decnumber
  4246 00003355 BE[4D330000]        <1> 	mov esi, decnumberend
  4247                              <1> .clear:
  4248 0000335A C60730              <1> 	mov byte [edi], '0'
  4249 0000335D 47                  <1> 	inc edi
  4250 0000335E 39F7                <1> 	cmp edi, esi
  4251 00003360 72F8                <1> 	jb .clear
  4252 00003362 BF[3F330000]        <1> 	mov edi, decnumber
  4253 00003367 E8C0FDFFFF          <1> 	call convert
  4254 0000336C 803D[7F320000]01    <1> 	cmp byte [firsthexshown], 1
  4255 00003373 7503                <1> 	jne .show
  4256 00003375 6631D2              <1> 	xor dx, dx
  4257                              <1> .show:
  4258 00003378 803D[7F320000]03    <1> 	cmp byte [firsthexshown], 3
  4259 0000337F 7505                <1> 	jne .nonewdecline
  4260 00003381 E8E2E9FFFF          <1> 	call printline
  4261                              <1> .nonewdecline:
  4262 00003386 803D[7F320000]04    <1> 	cmp byte [firsthexshown], 4
  4263 0000338D 7522                <1> 	jne .notab
  4264 0000338F B1A0                <1> 	mov cl, 160
  4265 00003391 28D1                <1> 	sub cl, dl
  4266 00003393 C0E905              <1> 	shr cl, 5
  4267 00003396 C0E105              <1> 	shl cl, 5
  4268 00003399 80F900              <1> 	cmp cl, 0
  4269 0000339C 750A                <1> 	jne .nonewline
  4270 0000339E E8C5E9FFFF          <1> 	call printline
  4271 000033A3 E909000000          <1> 	jmp .notab
  4272                              <1> .nonewline:
  4273 000033A8 80C20F              <1> 	add dl, 15
  4274 000033AB C0EA04              <1> 	shr dl, 4
  4275 000033AE C0E204              <1> 	shl dl, 4
  4276                              <1> .notab:
  4277 000033B1 BE[3F330000]        <1> 	mov esi, decnumber
  4278 000033B6 4E                  <1> 	dec esi
  4279                              <1> .sifind:
  4280 000033B7 46                  <1> 	inc esi
  4281 000033B8 81FE[4C330000]      <1> 	cmp esi, decnumberend - 1
  4282 000033BE 7305                <1> 	jae .nosifind
  4283 000033C0 803E30              <1> 	cmp byte [esi], '0'
  4284 000033C3 74F2                <1> 	je .sifind
  4285                              <1> .nosifind:
  4286 000033C5 E8A3E9FFFF          <1> 	call print
  4287 000033CA 803D[7F320000]02    <1> 	cmp byte [firsthexshown], 2
  4288 000033D1 7505                <1> 	jne .shown
  4289 000033D3 E890E9FFFF          <1> 	call printline
  4290                              <1> .shown:
  4291 000033D8 C605[7F320000]00    <1> 	mov byte [firsthexshown], 0
  4292 000033DF 61                  <1> 	popa
  4293 000033E0 C3                  <1> 	ret
  4294                              <1> 	
  4295                              <1> cnvrthextxt:
  4296 000033E1 31C9                <1> 	xor ecx, ecx
  4297 000033E3 31C0                <1> 	xor eax, eax
  4298 000033E5 31D2                <1> 	xor edx, edx
  4299 000033E7 31DB                <1> 	xor ebx, ebx
  4300 000033E9 4E                  <1> 	dec esi
  4301                              <1> .end:
  4302 000033EA 46                  <1> 	inc esi
  4303 000033EB 8A06                <1> 	mov al, [esi]
  4304 000033ED 3C00                <1> 	cmp al, 0
  4305 000033EF 75F9                <1> 	jne .end
  4306                              <1> .loop:
  4307 000033F1 4E                  <1> 	dec esi
  4308 000033F2 8A06                <1> 	mov al, [esi]
  4309 000033F4 3C41                <1> 	cmp al, "A"
  4310 000033F6 7328                <1> 	jae .char
  4311 000033F8 2C30                <1> 	sub al, 48
  4312 000033FA 3C10                <1> 	cmp al, 16
  4313 000033FC 7721                <1> 	ja .done
  4314                              <1> .donechar:
  4315 000033FE 81FA00000000        <1> 	cmp edx, 0
  4316 00003404 740E                <1> 	je .noshl
  4317 00003406 89D3                <1> 	mov ebx, edx
  4318                              <1> .shl:
  4319 00003408 C1E004              <1> 	shl eax, 4
  4320 0000340B 4B                  <1> 	dec ebx
  4321 0000340C 81FB00000000        <1> 	cmp ebx, 0
  4322 00003412 75F4                <1> 	jne .shl
  4323                              <1> .noshl:
  4324 00003414 42                  <1> 	inc edx
  4325 00003415 01C1                <1> 	add ecx, eax
  4326 00003417 81FA08000000        <1> 	cmp edx, 8
  4327 0000341D 72D2                <1> 	jb .loop
  4328                              <1> .done:
  4329 0000341F C3                  <1> 	ret
  4330                              <1> .char:
  4331 00003420 3C46                <1> 	cmp al, "F"
  4332 00003422 77FB                <1> 	ja .done
  4333 00003424 2C41                <1> 	sub al, "A"
  4334 00003426 040A                <1> 	add al, 0xA
  4335 00003428 E9D1FFFFFF          <1> 	jmp .donechar
  4336                              <1> 	
  4337                              <1> 	
  4338                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4339 0000342D 31C9                <1> 	xor ecx, ecx
  4340 0000342F 31C0                <1> 	xor eax, eax
  4341 00003431 31D2                <1> 	xor edx, edx
  4342 00003433 31DB                <1> 	xor ebx, ebx
  4343 00003435 4E                  <1> 	dec esi
  4344                              <1> .lp:
  4345 00003436 46                  <1> 	inc esi
  4346 00003437 8A06                <1> 	mov al, [esi]
  4347 00003439 3C00                <1> 	cmp al, 0
  4348 0000343B 75F9                <1> 	jne .lp
  4349 0000343D 4E                  <1> 	dec esi
  4350 0000343E 8A06                <1> 	mov al, [esi]
  4351 00003440 3C2E                <1> 	cmp al, '.'
  4352 00003442 7506                <1> 	jne .dot
  4353 00003444 46                  <1> 	inc esi
  4354 00003445 E9ECFFFFFF          <1> 	jmp .lp
  4355                              <1> .dot:
  4356 0000344A 3C20                <1> 	cmp al, ' '
  4357 0000344C 7404                <1> 	je .zero
  4358 0000344E 3C30                <1> 	cmp al, '0'
  4359 00003450 7504                <1> 	jne .txtlp
  4360                              <1> .zero: 
  4361 00003452 39FE                <1> 		cmp esi, edi
  4362 00003454 744B                <1> 		je .done
  4363                              <1> .txtlp:
  4364 00003456 31C0                <1> 	xor eax, eax
  4365 00003458 8A06                <1> 	mov al, [esi]
  4366 0000345A 3C3D                <1> 	cmp al, '='
  4367 0000345C 7443                <1> 	je .done
  4368 0000345E 3C30                <1> 	cmp al, 48
  4369 00003460 723F                <1> 	jb .done
  4370 00003462 3C3A                <1> 	cmp al, 58
  4371 00003464 733B                <1> 	jae .done
  4372 00003466 3C23                <1> 	cmp al, '#'
  4373 00003468 7437                <1> 	je .done
  4374 0000346A 39FE                <1> 	cmp esi, edi
  4375 0000346C 7233                <1> 	jb .done
  4376 0000346E 81F900000000        <1> 	cmp ecx, 0
  4377 00003474 770B                <1> 	ja .exp
  4378 00003476 2C30                <1> .noexp:	sub al, 48
  4379 00003478 01C2                <1> 	add edx, eax
  4380 0000347A 4E                  <1> 	dec esi
  4381 0000347B 41                  <1> 	inc ecx
  4382 0000347C E9D5FFFFFF          <1> 	jmp .txtlp
  4383 00003481 81F900000000        <1> .exp:	cmp ecx, 0
  4384 00003487 74ED                <1> 	je .noexp
  4385 00003489 2C30                <1> 	sub al, 48
  4386 0000348B 51                  <1> 	push ecx
  4387                              <1> .expmul:
  4388 0000348C 89C3                <1> 	mov ebx, eax
  4389 0000348E 01D8                <1> 	add eax, ebx
  4390 00003490 C1E303              <1> 	shl ebx, 3
  4391 00003493 01D8                <1> 	add eax, ebx
  4392 00003495 E2F5                <1> 	loop .expmul
  4393 00003497 01C2                <1> 	add edx, eax
  4394 00003499 59                  <1> 	pop ecx
  4395 0000349A 4E                  <1> 	dec esi
  4396 0000349B 41                  <1> 	inc ecx
  4397 0000349C E9B5FFFFFF          <1> 	jmp .txtlp
  4398 000034A1 89D1                <1> .done: mov ecx, edx
  4399 000034A3 C3                  <1> 	ret
  4400                              <1> 
  4401                              <1> benchmarki: ;output number of clocks since initial value
  4402 000034A4 0F31                <1> 	rdtsc
  4403 000034A6 8B1D[088A0000]      <1> 	mov ebx, [initialtsc]
  4404 000034AC 8B0D[0C8A0000]      <1> 	mov ecx, [initialtsc + 4]
  4405 000034B2 E90E000000          <1> 	jmp benchmarkl.calc
  4406                              <1> 
  4407                              <1> benchmarkl: ;output number of clocks since last benchmark
  4408 000034B7 0F31                <1> 	rdtsc
  4409 000034B9 8B1D[108A0000]      <1> 	mov ebx, [lasttsc]
  4410 000034BF 8B0D[148A0000]      <1> 	mov ecx, [lasttsc + 4]
  4411                              <1> .calc:
  4412 000034C5 29D8                <1> 	sub eax, ebx
  4413 000034C7 7701                <1> 	ja .noover
  4414 000034C9 4A                  <1> 	dec edx
  4415                              <1> .noover:
  4416 000034CA 29CA                <1> 	sub edx, ecx
  4417 000034CC 8B0C24              <1> 	mov ecx, [esp]
  4418 000034CF E8C0FDFFFF          <1> 	call showhex
  4419 000034D4 89D1                <1> 	mov ecx, edx
  4420 000034D6 E8B9FDFFFF          <1> 	call showhex
  4421 000034DB 89C1                <1> 	mov ecx, eax
  4422 000034DD E8B2FDFFFF          <1> 	call showhex
  4423 000034E2 E881E8FFFF          <1> 	call printline
  4424 000034E7 0F31                <1> 	rdtsc
  4425 000034E9 A3[108A0000]        <1> 	mov [lasttsc], eax
  4426 000034EE 8915[148A0000]      <1> 	mov [lasttsc + 4], edx
  4427 000034F4 C3                  <1> 	ret
  4428                                      %include "source/programs.asm"
  4429 000034F5 FF2C                <1> filetypes db 255,44
  4430                              <1> progstart:		;programs start here
  4431                              <1> indexfiles:
  4432 000034F7 BE[F7340000]        <1> 	mov esi, progstart
  4433 000034FC BB[08AE0300]        <1> 	mov ebx, fileindex
  4434 00003501 BF[F7340000]        <1> 	mov edi, progstart
  4435 00003506 81EF02000000        <1> 	sub edi, 2
  4436                              <1> indexloop:
  4437 0000350C 668B0E              <1> 	mov cx, [esi]
  4438                              <1> 	indexloop2:
  4439 0000350F 663B0F              <1> 		cmp cx, [edi]
  4440 00003512 7427                <1> 		je indexloop2done
  4441 00003514 81EF02000000        <1> 		sub edi, 2
  4442 0000351A 81FF[F5340000]      <1> 		cmp edi, filetypes
  4443 00003520 73ED                <1> 		jae indexloop2
  4444 00003522 BF[F7340000]        <1> 	mov edi, progstart
  4445 00003527 81EF02000000        <1> 	sub edi, 2
  4446 0000352D 46                  <1> 	inc esi
  4447 0000352E 81FE[34540000]      <1> 	cmp esi, batchprogend
  4448 00003534 7357                <1> 	jae indexloopdone
  4449 00003536 E9D1FFFFFF          <1> 	jmp indexloop
  4450                              <1> indexloop2done:
  4451 0000353B 66890B              <1> 	mov [ebx], cx
  4452 0000353E 81C302000000        <1> 	add ebx, 2
  4453 00003544 81C602000000        <1> 	add esi, 2
  4454                              <1> 	nameindex:
  4455 0000354A 8A0E                <1> 		mov cl, [esi]
  4456 0000354C 80F900              <1> 		cmp cl, 0
  4457 0000354F 7409                <1> 		je nameindexdone
  4458 00003551 880B                <1> 		mov [ebx], cl
  4459 00003553 46                  <1> 		inc esi
  4460 00003554 43                  <1> 		inc ebx
  4461 00003555 E9F0FFFFFF          <1> 		jmp nameindex
  4462                              <1> 	nameindexdone:
  4463 0000355A 43                  <1> 		inc ebx
  4464 0000355B 66C7030000          <1> 		mov word [ebx], 0
  4465 00003560 81C302000000        <1> 		add ebx, 2
  4466 00003566 46                  <1> 		inc esi
  4467 00003567 8933                <1> 		mov [ebx], esi
  4468 00003569 81C304000000        <1> 		add ebx, 4
  4469 0000356F 66C7030000          <1> 		mov word [ebx], 0
  4470 00003574 81C302000000        <1> 		add ebx, 2
  4471 0000357A 81FB[08B20300]      <1> 		cmp ebx, fileindexend
  4472 00003580 730B                <1> 		jae indexloopdone
  4473 00003582 81C601000000        <1> 		add esi, 1
  4474 00003588 E97FFFFFFF          <1> 		jmp indexloop
  4475 0000358D C605[95350000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4476 00003594 C3                  <1> 		ret
  4477 00003595 00                  <1> indexdone db 0
  4478                              <1> %include 'source/programs/_comment.asm' ;#
  4479 00003596 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4480 0000359A C3                  <2> 	ret 
  4481                              <1> %include 'source/programs/_math.asm' ;!
  4482 0000359B FF2C2100            <2> db 255,44,"!",0
  4483                              <2> 	num:	
  4484 0000359F E870FBFFFF          <2> 		call clearbuffer
  4485 000035A4 C605[22380000]00    <2> 		mov byte [decimal], 0
  4486 000035AB C605[23380000]00    <2> 		mov byte [decimal2], 0
  4487 000035B2 8B35[4B300000]      <2> 		mov esi, [currentcommandloc]
  4488 000035B8 31C0                <2> 		xor eax, eax
  4489 000035BA 31C9                <2> 		xor ecx, ecx
  4490 000035BC 31DB                <2> 		xor ebx, ebx
  4491 000035BE 8A06                <2> 	num2:	mov al, [esi]
  4492 000035C0 3C2B                <2> 		cmp al, '+'
  4493 000035C2 7416                <2> 		je operatorfound
  4494 000035C4 3C2D                <2> 		cmp al, '-'
  4495 000035C6 7412                <2> 		je operatorfound
  4496 000035C8 3C2A                <2> 		cmp al, '*'
  4497 000035CA 740E                <2> 		je operatorfound
  4498 000035CC 3C2F                <2> 		cmp al, '/'
  4499 000035CE 740A                <2> 		je operatorfound
  4500 000035D0 3C5E                <2> 		cmp al, '^'
  4501 000035D2 7406                <2> 		je operatorfound
  4502 000035D4 46                  <2> 		inc esi
  4503 000035D5 84C0                <2> 		test al, al
  4504 000035D7 75E5                <2> 		jnz num2
  4505 000035D9 C3                  <2> 		ret
  4506 000035DA 50                  <2> 	operatorfound: push eax
  4507 000035DB 30E4                <2> 		xor ah, ah
  4508 000035DD 8826                <2> 		mov [esi], ah
  4509 000035DF 89F7                <2> 		mov edi, esi
  4510 000035E1 46                  <2> 		inc esi
  4511 000035E2 8A06                <2> 		mov al, [esi]
  4512 000035E4 3C25                <2> 		cmp al, '%'
  4513 000035E6 0F845E000000        <2> 		je near resultnum1
  4514                              <2> 	varnum2: 
  4515 000035EC 57                  <2> 		push edi
  4516 000035ED E8A6000000          <2> 		call checkdecimal
  4517 000035F2 5F                  <2> 		pop edi
  4518 000035F3 E835FEFFFF          <2> 		call cnvrttxt
  4519                              <2> 	vrnm2:
  4520 000035F8 89CB                <2> 		mov ebx, ecx
  4521 000035FA 53                  <2> 		push ebx
  4522 000035FB E814FBFFFF          <2> 		call clearbuffer
  4523 00003600 8B35[4B300000]      <2> 		mov esi, [currentcommandloc]
  4524 00003606 89F7                <2> 		mov edi, esi
  4525 00003608 46                  <2> 		inc esi
  4526 00003609 8A06                <2> 		mov al, [esi]
  4527 0000360B 3C25                <2> 		cmp al, '%'
  4528 0000360D 0F844E000000        <2> 		je near resultnum2
  4529                              <2> 	varnum4: 
  4530 00003613 57                  <2> 		push edi
  4531 00003614 E86B000000          <2> 		call checkdecimal2
  4532 00003619 5F                  <2> 		pop edi
  4533 0000361A E80EFEFFFF          <2> 		call cnvrttxt
  4534                              <2> 	vrnm4:
  4535 0000361F 5B                  <2> 		pop ebx
  4536 00003620 58                  <2> 		pop eax
  4537 00003621 3C2B                <2> 		cmp al, '+'
  4538 00003623 0F84A3000000        <2> 		je near plusnum
  4539 00003629 3C2D                <2> 		cmp al, '-'
  4540 0000362B 0F84A7000000        <2> 		je near subnum
  4541 00003631 3C2A                <2> 		cmp al, '*'
  4542 00003633 0F84AB000000        <2> 		je near mulnum
  4543 00003639 3C2F                <2> 		cmp al, '/'
  4544 0000363B 0F84B9000000        <2> 		je near divnum
  4545 00003641 3C5E                <2> 		cmp al, '^'
  4546 00003643 0F84D6000000        <2> 		je near expnum
  4547 00003649 C3                  <2> 		ret
  4548                              <2> 	resultnum1:
  4549 0000364A 8A0D[24380000]      <2> 		mov cl, [decimalresult]
  4550 00003650 880D[22380000]      <2> 		mov [decimal], cl
  4551 00003656 8B0D[25380000]      <2> 		mov ecx, [result]
  4552 0000365C E997FFFFFF          <2> 		jmp vrnm2
  4553                              <2> 	resultnum2:
  4554 00003661 8A0D[22380000]      <2> 		mov cl, [decimal]
  4555 00003667 880D[23380000]      <2> 		mov [decimal2], cl
  4556 0000366D 8A0D[24380000]      <2> 		mov cl, [decimalresult]
  4557 00003673 880D[22380000]      <2> 		mov [decimal], cl
  4558 00003679 8B0D[25380000]      <2> 		mov ecx, [result]
  4559 0000367F E99BFFFFFF          <2> 		jmp vrnm4
  4560                              <2> 	checkdecimal2:
  4561 00003684 8A25[22380000]      <2> 		mov ah, [decimal]
  4562 0000368A 8825[23380000]      <2> 		mov [decimal2], ah
  4563 00003690 30E4                <2> 		xor ah, ah
  4564 00003692 8825[22380000]      <2> 		mov [decimal], ah
  4565                              <2> 	checkdecimal:
  4566 00003698 89F7                <2> 		mov edi, esi
  4567                              <2> 	chkdec1:
  4568 0000369A 8A07                <2> 		mov al, [edi]
  4569 0000369C 3C2E                <2> 		cmp al, '.'
  4570 0000369E 0F840E000000        <2> 		je near fnddec
  4571 000036A4 3C00                <2> 		cmp al, 0
  4572 000036A6 0F841F000000        <2> 		je near nodecimal
  4573 000036AC 47                  <2> 		inc edi
  4574 000036AD E9E8FFFFFF          <2> 		jmp chkdec1
  4575                              <2> 	fnddec:
  4576 000036B2 8A4701              <2> 		mov al, [edi + 1]
  4577 000036B5 8807                <2> 		mov [edi], al
  4578 000036B7 3C00                <2> 		cmp al, 0
  4579 000036B9 0F840C000000        <2> 		je near nodecimal
  4580 000036BF FE05[22380000]      <2> 		inc byte [decimal]
  4581 000036C5 47                  <2> 		inc edi
  4582 000036C6 E9E7FFFFFF          <2> 		jmp fnddec
  4583                              <2> 	nodecimal:
  4584 000036CB C3                  <2> 		ret
  4585                              <2> 	plusnum:
  4586 000036CC E80F010000          <2> 		call decaddfix
  4587 000036D1 01D9                <2> 		add ecx, ebx
  4588 000036D3 E98A000000          <2> 		jmp retnum
  4589                              <2> 	subnum:
  4590 000036D8 E803010000          <2> 		call decaddfix
  4591 000036DD 29D9                <2> 		sub ecx, ebx
  4592 000036DF E97E000000          <2> 		jmp retnum
  4593                              <2> 	mulnum:
  4594 000036E4 A0[23380000]        <2> 		mov al, [decimal2]
  4595 000036E9 0005[22380000]      <2> 		add [decimal], al
  4596 000036EF 89C8                <2> 		mov eax, ecx
  4597 000036F1 F7E3                <2> 		mul ebx
  4598 000036F3 89C1                <2> 		mov ecx, eax
  4599 000036F5 E968000000          <2> 		jmp retnum
  4600                              <2> 	divnum:
  4601 000036FA E8E1000000          <2> 		call decaddfix
  4602 000036FF 30C0                <2> 		xor al, al
  4603 00003701 A2[22380000]        <2> 		mov [decimal], al
  4604 00003706 31D2                <2> 		xor edx, edx
  4605 00003708 89C8                <2> 		mov eax, ecx
  4606 0000370A 81FB00000000        <2> 		cmp ebx, 0
  4607 00003710 0F844C000000        <2> 		je near retnum
  4608 00003716 F7F3                <2> 		div ebx
  4609 00003718 89C1                <2> 		mov ecx, eax
  4610 0000371A E943000000          <2> 		jmp retnum
  4611                              <2> 	expnum:
  4612 0000371F 8A15[22380000]      <2> 		mov dl, [decimal]
  4613 00003725 8815[23380000]      <2> 		mov [decimal2], dl
  4614 0000372B 31D2                <2> 		xor edx, edx
  4615 0000372D 89C8                <2> 		mov eax, ecx
  4616 0000372F 89D9                <2> 		mov ecx, ebx
  4617 00003731 89C3                <2> 		mov ebx, eax
  4618 00003733 81F900000000        <2> 		cmp ecx, 0
  4619 00003739 7422                <2> 		je noexpnum
  4620 0000373B 49                  <2> 		dec ecx
  4621 0000373C 81F900000000        <2> 		cmp ecx, 0
  4622 00003742 7412                <2> 		je noexpnumlp
  4623 00003744 F7E3                <2> 	expnumlp: mul ebx
  4624 00003746 8A15[23380000]      <2> 		mov dl, [decimal2]
  4625 0000374C 0015[22380000]      <2> 		add [decimal], dl
  4626 00003752 31D2                <2> 		xor edx, edx
  4627 00003754 E2EE                <2> 		loop expnumlp
  4628                              <2> 	noexpnumlp:
  4629 00003756 89C1                <2> 		mov ecx, eax
  4630 00003758 E905000000          <2> 		jmp retnum
  4631                              <2> 	noexpnum:
  4632 0000375D B901000000          <2> 		mov ecx, 1
  4633                              <2> 	retnum: 
  4634 00003762 BE[9CCC0300]        <2> 		mov esi, numbuf
  4635 00003767 890D[25380000]      <2> 		mov [result], ecx
  4636 0000376D E8BAF9FFFF          <2> 		call convert
  4637 00003772 BE[9CCC0300]        <2> 		mov esi, numbuf
  4638 00003777 8A25[22380000]      <2> 		mov ah, [decimal]
  4639 0000377D 8825[24380000]      <2> 		mov [decimalresult], ah
  4640 00003783 80FC00              <2> 		cmp ah, 0
  4641 00003786 0F8425000000        <2> 		je near noputdecimal
  4642                              <2> 	putdecimal:
  4643 0000378C 4E                  <2> 		dec esi
  4644 0000378D FECC                <2> 		dec ah
  4645 0000378F 80FC00              <2> 		cmp ah, 0
  4646 00003792 0F87F4FFFFFF        <2> 		ja near putdecimal
  4647 00003798 4E                  <2> 		dec esi
  4648 00003799 8A06                <2> 		mov al, [esi]
  4649 0000379B C6062E              <2> 		mov byte [esi], '.'
  4650                              <2> 	decputloop:
  4651 0000379E 4E                  <2> 		dec esi
  4652 0000379F 8A26                <2> 		mov ah, [esi]
  4653 000037A1 8806                <2> 		mov [esi], al
  4654 000037A3 88E0                <2> 		mov al, ah
  4655 000037A5 81FE[88CC0300]      <2> 		cmp esi, buf2
  4656 000037AB 0F87EDFFFFFF        <2> 		ja near decputloop
  4657                              <2> 	noputdecimal:
  4658 000037B1 BE[88CC0300]        <2> 		mov esi, buf2
  4659 000037B6 E805000000          <2> 		call chkadd
  4660 000037BB C3                  <2> 		ret
  4661 000037BC 00000000            <2> edxnumbuf dw 0,0
  4662 000037C0 8A06                <2> 	chkadd: mov al, [esi]
  4663 000037C2 3C30                <2> 		cmp al, '0'
  4664 000037C4 750F                <2> 		jne dnadd
  4665 000037C6 46                  <2> 		inc esi
  4666 000037C7 81FE[9CCC0300]      <2> 		cmp esi, numbuf
  4667 000037CD 7405                <2> 		je dnaddm1
  4668 000037CF E9ECFFFFFF          <2> 		jmp chkadd
  4669 000037D4 4E                  <2> 	dnaddm1: dec esi
  4670 000037D5 E893E5FFFF          <2> 	dnadd:	call print
  4671 000037DA E889E5FFFF          <2> 		call printline
  4672 000037DF C3                  <2> 		ret
  4673                              <2> 		
  4674                              <2> 	decaddfix:
  4675 000037E0 A0[23380000]        <2> 		mov al, [decimal2]
  4676 000037E5 8A25[22380000]      <2> 		mov ah, [decimal]
  4677 000037EB 38E0                <2> 		cmp al, ah
  4678 000037ED 7432                <2> 		je gooddecadd
  4679 000037EF 38E0                <2> 		cmp al, ah
  4680 000037F1 721A                <2> 		jb lowdecadd
  4681                              <2> 	highdecadd:
  4682 000037F3 FEC4                <2> 		inc ah
  4683 000037F5 89CA                <2> 		mov edx, ecx
  4684 000037F7 C1E103              <2> 		shl ecx, 3
  4685 000037FA 01D1                <2> 		add ecx, edx
  4686 000037FC 01D1                <2> 		add ecx, edx
  4687 000037FE 38E0                <2> 		cmp al, ah
  4688 00003800 77F1                <2> 		ja highdecadd
  4689 00003802 8825[22380000]      <2> 		mov [decimal], ah
  4690 00003808 E914000000          <2> 		jmp gooddecadd
  4691                              <2> 	lowdecadd:
  4692 0000380D FEC0                <2> 		inc al
  4693 0000380F 89DA                <2> 		mov edx, ebx
  4694 00003811 C1E303              <2> 		shl ebx, 3
  4695 00003814 01D3                <2> 		add ebx, edx
  4696 00003816 01D3                <2> 		add ebx, edx
  4697 00003818 38E0                <2> 		cmp al, ah
  4698 0000381A 72F1                <2> 		jb lowdecadd
  4699 0000381C A2[22380000]        <2> 		mov [decimal], al
  4700                              <2> 	gooddecadd:
  4701 00003821 C3                  <2> 		ret
  4702                              <2> 		
  4703 00003822 00                  <2> decimal db 0
  4704 00003823 00                  <2> decimal2 db 0
  4705 00003824 00                  <2> decimalresult db 0
  4706 00003825 00000000            <2> result dd 0
  4707                              <1> %include 'source/programs/_variables.asm' ;% and $
  4708 00003829 FF2C2500            <2> db 255,44,"%",0
  4709                              <2> 	ans:
  4710 0000382D BE[88CC0300]        <2> 		mov esi, buf2
  4711 00003832 E889FFFFFF          <2> 		call chkadd
  4712 00003837 C3                  <2> 		ret
  4713                              <2> 		
  4714 00003838 FF2C2400            <2> db 255,44,"$",0
  4715 0000383C 8B35[4B300000]      <2> var: mov esi, [currentcommandloc]
  4716 00003842 BB[88B40300]        <2> 	mov ebx, variables
  4717 00003847 8A06                <2> lkeq:	mov al, [esi]
  4718 00003849 3C3D                <2> 	cmp al, '='
  4719 0000384B 741E                <2> 	je eqfnd	;is there an '=' sign?
  4720 0000384D 3C00                <2> 	cmp al, 0
  4721 0000384F 7406                <2> 	je echovars
  4722 00003851 46                  <2> 	inc esi
  4723 00003852 E9F0FFFFFF          <2> 	jmp lkeq
  4724 00003857 BE[88B40300]        <2> echovars: mov esi, variables
  4725 0000385C BB[88C40300]        <2> 	mov ebx, varend
  4726 00003861 B105                <2> 	mov cl, 5
  4727 00003863 B504                <2> 	mov ch, 4
  4728 00003865 E848F8FFFF          <2> 	call array
  4729 0000386A C3                  <2> 	ret
  4730 0000386B 46                  <2> eqfnd:	inc esi
  4731 0000386C 8A06                <2> 	mov al, [esi]
  4732 0000386E 3C00                <2> 	cmp al, 0
  4733 00003870 7410                <2> 	je readvar
  4734 00003872 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  4735 00003878 BB[88B40300]        <2> 	mov ebx, variables
  4736 0000387D E91C000000          <2> 	jmp seek
  4737                              <2> readvar:
  4738 00003882 B00A                <2> 	mov al, 10
  4739 00003884 66BB0700            <2> 	mov bx, 7
  4740 00003888 C605[72230000]00    <2> 	mov byte [commandedit], 0
  4741 0000388F BF[88CC0300]        <2> 	mov edi, buftxtend
  4742 00003894 E80DE6FFFF          <2> 	call rdprint
  4743 00003899 E99EFFFFFF          <2> 	jmp var
  4744 0000389E 668B03              <2> seek:	mov ax, [ebx]
  4745 000038A1 B105                <2> 	mov cl, 5
  4746 000038A3 B504                <2> 	mov ch, 4
  4747 000038A5 663D0000            <2> 	cmp ax, 0
  4748 000038A9 0F846A000000        <2> 	je near save
  4749 000038AF 6639C8              <2> 	cmp ax, cx
  4750 000038B2 7406                <2> 	je skfnd
  4751 000038B4 43                  <2> 	inc ebx
  4752 000038B5 E9E4FFFFFF          <2> 	jmp seek
  4753 000038BA 8B35[4B300000]      <2> skfnd:	mov esi, [currentcommandloc]
  4754 000038C0 46                  <2> 	inc esi
  4755 000038C1 81C302000000        <2> 	add ebx, 2
  4756 000038C7 89DF                <2> 	mov edi, ebx
  4757 000038C9 B13D                <2> 	mov cl, '='
  4758 000038CB E8C0F7FFFF          <2> 	call cndtest
  4759 000038D0 3C01                <2> 	cmp al, 1	
  4760 000038D2 741B                <2> 	je varfnd
  4761 000038D4 89FB                <2> 	mov ebx, edi
  4762 000038D6 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  4763 000038DC 668B03              <2> 	mov ax, [ebx]
  4764 000038DF 663D0000            <2> 	cmp ax, 0
  4765 000038E3 0F8430000000        <2> 	je near save
  4766 000038E9 43                  <2> 	inc ebx
  4767 000038EA E9AFFFFFFF          <2> 	jmp seek
  4768 000038EF 8A03                <2> varfnd:	mov al, [ebx]
  4769 000038F1 3C04                <2> 	cmp al, 4
  4770 000038F3 7407                <2> 	je save2
  4771 000038F5 4B                  <2> 	dec ebx
  4772 000038F6 4E                  <2> 	dec esi
  4773 000038F7 E9F3FFFFFF          <2> 	jmp varfnd
  4774 000038FC 4B                  <2> save2:	dec ebx
  4775 000038FD 4E                  <2> 	dec esi
  4776 000038FE 8A03                <2> 	mov al, [ebx]
  4777 00003900 3C05                <2> 	cmp al, 5
  4778 00003902 7405                <2> 	je remove
  4779 00003904 E9E6FFFFFF          <2> 	jmp varfnd
  4780 00003909 8A03                <2> remove: mov al, [ebx]
  4781 0000390B 3C00                <2> 	cmp al, 0
  4782 0000390D 748F                <2> 	je seek
  4783 0000390F 30C0                <2> 	xor al, al
  4784 00003911 8803                <2> 	mov [ebx], al
  4785 00003913 43                  <2> 	inc ebx
  4786 00003914 E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4787 00003919 8B35[4B300000]      <2> save:	mov esi, [currentcommandloc]
  4788 0000391F 43                  <2> 	inc ebx
  4789 00003920 B005                <2> 	mov al, 5
  4790 00003922 B404                <2> 	mov ah, 4
  4791 00003924 668903              <2> 	mov [ebx], ax
  4792 00003927 43                  <2> 	inc ebx
  4793 00003928 43                  <2> svhere:	inc ebx
  4794 00003929 46                  <2> 	inc esi
  4795 0000392A 8A06                <2> 	mov al, [esi]
  4796 0000392C 3C00                <2> 	cmp al, 0
  4797 0000392E 0F8456000000        <2> 	je near svdone
  4798 00003934 3C25                <2> 	cmp al, '%'
  4799 00003936 7407                <2> 	je ans2
  4800 00003938 8803                <2> 	mov [ebx], al	
  4801 0000393A E9E9FFFFFF          <2> 	jmp svhere
  4802 0000393F 56                  <2> ans2:	push esi
  4803 00003940 BE[88CC0300]        <2> 	mov esi, buf2
  4804 00003945 E82C000000          <2> 	call ansfnd
  4805 0000394A E806000000          <2> 	call anscp
  4806 0000394F 5E                  <2> 	pop esi
  4807 00003950 E9D3FFFFFF          <2> 	jmp svhere
  4808 00003955 8A06                <2> anscp:	mov al, [esi]
  4809 00003957 8803                <2> 	mov [ebx], al
  4810 00003959 81FE[9CCC0300]      <2> 	cmp esi, numbuf
  4811 0000395F 74C7                <2> 	je svhere
  4812 00003961 3C00                <2> 	cmp al, 0
  4813 00003963 74C3                <2> 	je svhere
  4814 00003965 43                  <2> 	inc ebx
  4815 00003966 46                  <2> 	inc esi
  4816 00003967 E9E9FFFFFF          <2> 	jmp anscp
  4817 0000396C 5E                  <2> ansnf:	pop esi
  4818 0000396D 8A06                <2> 	mov al, [esi]
  4819 0000396F 8803                <2> 	mov [ebx], al
  4820 00003971 E9B2FFFFFF          <2> 	jmp svhere
  4821 00003976 46                  <2> ansfnd:	inc esi
  4822 00003977 81FE[9BCC0300]      <2> 	cmp esi, numbuf - 1
  4823 0000397D 740A                <2> 	je fndans
  4824 0000397F 8A06                <2> 	mov al, [esi]
  4825 00003981 3C00                <2> 	cmp al, 0
  4826 00003983 74E7                <2> 	je ansnf
  4827 00003985 3C30                <2> 	cmp al, '0'
  4828 00003987 74ED                <2> 	je ansfnd
  4829                              <2> fndans:
  4830 00003989 C3                  <2> 	ret
  4831 0000398A 30C0                <2> svdone:	xor al, al
  4832 0000398C 8803                <2> 	mov [ebx], al
  4833 0000398E C3                  <2> 	ret
  4834                              <1> %include 'source/programs/_run.asm' ;./
  4835 0000398F 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4836 00003993 FF2C2E2F00          <2> 	db 255,44,"./",0
  4837                              <2> rundiskprog:
  4838 00003998 8B3D[4B300000]      <2> 	mov edi, [currentcommandloc]
  4839 0000399E 81C702000000        <2> 	add edi, 2
  4840 000039A4 BE00004000          <2> 	mov esi, 0x400000
  4841 000039A9 E8462F0000          <2> 	call loadfile
  4842 000039AE 81FA94010000        <2> 	cmp edx, 404
  4843 000039B4 746A                <2> 	je noprogfound
  4844 000039B6 BB00004000          <2> 	mov ebx, 0x400000
  4845 000039BB A1[8F390000]        <2> 	mov eax, [elfstart]
  4846 000039C0 3903                <2> 	cmp [ebx], eax
  4847 000039C2 0F8437000000        <2> 	je near runelf
  4848 000039C8 66813B4558          <2> 	cmp word [ebx], "EX"
  4849 000039CD 7577                <2> 	jne progbatchfound
  4850 000039CF 81C302000000        <2> 	add ebx, 2
  4851 000039D5 8B3D[4B300000]      <2> 	mov edi, [currentcommandloc]
  4852 000039DB 81C702000000        <2> 	add edi, 2
  4853                              <2> findspaceprog:
  4854 000039E1 8A07                <2> 	mov al, [edi]
  4855 000039E3 47                  <2> 	inc edi
  4856 000039E4 3C20                <2> 	cmp al, " "
  4857 000039E6 75F9                <2> 	jne findspaceprog
  4858                              <2> findnonspaceprog:
  4859 000039E8 8A07                <2> 	mov al, [edi]
  4860 000039EA 47                  <2> 	inc edi
  4861 000039EB 3C20                <2> 	cmp al, " "
  4862 000039ED 74F9                <2> 	je findnonspaceprog
  4863 000039EF 4F                  <2> 	dec edi
  4864 000039F0 8925[08B20300]      <2> 	mov [previousstack], esp
  4865 000039F6 FFD3                <2> 	call ebx
  4866 000039F8 8B25[08B20300]      <2> 	mov esp, [previousstack]
  4867 000039FE C3                  <2> 	ret
  4868                              <2> runelf:
  4869 000039FF 8B3D[4B300000]      <2> 	mov edi, [currentcommandloc]
  4870 00003A05 81C702000000        <2> 	add edi, 2
  4871 00003A0B 81C380000000        <2> 	add ebx, 0x80
  4872 00003A11 8925[08B20300]      <2> 	mov [previousstack], esp
  4873 00003A17 FFD3                <2> 	call ebx
  4874 00003A19 8B25[08B20300]      <2> 	mov esp, [previousstack]
  4875 00003A1F C3                  <2> 	ret
  4876                              <2> noprogfound:
  4877 00003A20 BE[A4890000]        <2> 	mov esi, notfound1
  4878 00003A25 E843E3FFFF          <2> 	call print
  4879 00003A2A 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  4880 00003A30 81C602000000        <2> 	add esi, 2
  4881 00003A36 E832E3FFFF          <2> 	call print
  4882 00003A3B BE[AC890000]        <2> 	mov esi, notfound2
  4883 00003A40 E828E3FFFF          <2> 	call print
  4884 00003A45 C3                  <2> 	ret
  4885                              <2> progbatchfound:
  4886 00003A46 BF00004000          <2> 		mov edi, 0x400000
  4887 00003A4B C605[82B40300]01    <2> 		mov byte [BATCHISON], 1
  4888                              <2> 	batchrunloop:
  4889 00003A52 E806F3FFFF          <2> 		call buftxtclear
  4890 00003A57 BE[88C80300]        <2> 		mov esi, buftxt
  4891 00003A5C 8935[4B300000]      <2> 		mov [currentcommandloc], esi
  4892                              <2> 	batchrunloop2:
  4893 00003A62 B10A                <2> 		mov cl, 10
  4894 00003A64 B50D                <2> 		mov ch, 13
  4895 00003A66 380F                <2> 		cmp [edi], cl
  4896 00003A68 0F841C000000        <2> 		je near nxtbatchrunline
  4897 00003A6E 382F                <2> 		cmp [edi], ch
  4898 00003A70 0F8414000000        <2> 		je near nxtbatchrunline
  4899 00003A76 803F00              <2> 		cmp byte [edi], 0
  4900 00003A79 0F840B000000        <2> 		je near nxtbatchrunline
  4901 00003A7F 8A07                <2> 		mov al, [edi]
  4902 00003A81 8806                <2> 		mov [esi], al
  4903 00003A83 46                  <2> 		inc esi
  4904 00003A84 47                  <2> 		inc edi
  4905 00003A85 E9D8FFFFFF          <2> 		jmp batchrunloop2
  4906                              <2> 	nxtbatchrunline:
  4907 00003A8A 47                  <2> 		inc edi
  4908 00003A8B 380F                <2> 		cmp [edi], cl
  4909 00003A8D 74FB                <2> 		je nxtbatchrunline
  4910 00003A8F 382F                <2> 		cmp [edi], ch
  4911 00003A91 74F7                <2> 		je nxtbatchrunline
  4912 00003A93 893D[F13A0000]      <2> 		mov [batchedi], edi
  4913 00003A99 893D[7EB40300]      <2> 		mov [BATCHPOS], edi
  4914 00003A9F C60600              <2> 		mov byte [esi], 0
  4915 00003AA2 BE[88C80300]        <2> 		mov esi, buftxt
  4916 00003AA7 803E00              <2> 		cmp byte [esi], 0
  4917 00003AAA 0F8439000000        <2> 		je near nobatchfoundrun
  4918 00003AB0 31DB                <2> 		xor ebx, ebx
  4919 00003AB2 8A1D[19B40300]      <2> 		mov bl, [IFON]
  4920 00003AB8 80FB00              <2> 		cmp bl, 0
  4921 00003ABB 0F8534000000        <2> 		jne near iftestbatch
  4922                              <2> 	doneiftest:
  4923 00003AC1 803D[CA3B0000]00    <2> 		cmp byte [runnextline], 0
  4924 00003AC8 0F8405000000        <2> 		je near noruniftest
  4925 00003ACE E89CF4FFFF          <2> 		call run
  4926                              <2> 	noruniftest:
  4927 00003AD3 C605[CA3B0000]01    <2> 		mov byte [runnextline], 1
  4928 00003ADA 8B3D[F13A0000]      <2> 		mov edi, [batchedi]
  4929 00003AE0 803F00              <2> 		cmp byte [edi], 0
  4930 00003AE3 0F8569FFFFFF        <2> 		jne near batchrunloop
  4931                              <2> 	nobatchfoundrun:
  4932 00003AE9 C605[82B40300]00    <2> 		mov byte [BATCHISON], 0
  4933 00003AF0 C3                  <2> 		ret
  4934                              <2> 	
  4935 00003AF1 00000000            <2> batchedi dd 0	
  4936                              <2> 	
  4937                              <2> 	iftestbatch:
  4938 00003AF5 BE[1AB40300]        <2> 		mov esi, IFTRUE
  4939 00003AFA 01DE                <2> 		add esi, ebx
  4940 00003AFC 803E00              <2> 		cmp byte [esi], 0
  4941 00003AFF 0F85BCFFFFFF        <2> 		jne near doneiftest
  4942 00003B05 881D[CB3B0000]      <2> 		mov [iffalsebuf], bl
  4943 00003B0B 803D[83B40300]01    <2> 		cmp byte [LOOPON], 1
  4944 00003B12 0F8513000000        <2> 		jne near fifindbatch
  4945 00003B18 E935FFFFFF          <2> 		jmp batchrunloop
  4946                              <2> 	elsetestbatch:
  4947 00003B1D C60601              <2> 		mov byte [esi], 1
  4948 00003B20 81C705000000        <2> 		add edi, 5
  4949 00003B26 E927FFFFFF          <2> 		jmp batchrunloop
  4950                              <2> 	fifindbatch:
  4951 00003B2B 66B96966            <2> 		mov cx, "if"
  4952 00003B2F 66B86669            <2> 		mov ax, "fi"
  4953 00003B33 663907              <2> 		cmp [edi], ax
  4954 00003B36 0F8424000000        <2> 		je near fifoundbatch
  4955 00003B3C 66390F              <2> 		cmp [edi], cx
  4956 00003B3F 0F8468000000        <2> 		je near iffoundbatch
  4957 00003B45 803F00              <2> 		cmp byte [edi], 0
  4958 00003B48 0F8412000000        <2> 		je near fifoundbatch
  4959 00003B4E B8656C7365          <2> 		mov eax, "else"
  4960 00003B53 3907                <2> 		cmp [edi], eax
  4961 00003B55 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4962 00003B5B E973FFFFFF          <2> 		jmp noruniftest
  4963                              <2> 	fifoundbatch:
  4964 00003B60 81C702000000        <2> 		add edi, 2
  4965 00003B66 B00A                <2> 		mov al, 10
  4966 00003B68 3807                <2> 		cmp [edi], al
  4967 00003B6A 0F840E000000        <2> 		je near goodfibatch
  4968 00003B70 803F00              <2> 		cmp byte [edi], 0
  4969 00003B73 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4970 00003B79 E9ADFFFFFF          <2> 		jmp fifindbatch
  4971                              <2> 	goodfibatch:
  4972 00003B7E B001                <2> 		mov al, 1
  4973 00003B80 2805[19B40300]      <2> 		sub [IFON], al 
  4974 00003B86 A0[19B40300]        <2> 		mov al, [IFON]
  4975 00003B8B 8A1D[CB3B0000]      <2> 		mov bl, [iffalsebuf]
  4976 00003B91 38D8                <2> 		cmp al, bl
  4977 00003B93 7796                <2> 		ja fifindbatch
  4978 00003B95 8B35[4B300000]      <2> 		mov esi, [currentcommandloc]
  4979 00003B9B 81EF02000000        <2> 		sub edi, 2
  4980 00003BA1 C605[CA3B0000]00    <2> 		mov byte [runnextline], 0
  4981 00003BA8 E9A5FEFFFF          <2> 		jmp batchrunloop
  4982                              <2> 	iffoundbatch:
  4983 00003BAD B020                <2> 		mov al, ' '
  4984 00003BAF 81C702000000        <2> 		add edi, 2
  4985 00003BB5 3807                <2> 		cmp [edi], al
  4986 00003BB7 0F856EFFFFFF        <2> 		jne near fifindbatch
  4987 00003BBD B001                <2> 		mov al, 1
  4988 00003BBF 0005[19B40300]      <2> 		add [IFON], al
  4989 00003BC5 E961FFFFFF          <2> 		jmp fifindbatch
  4990                              <2> 		
  4991                              <2> 		
  4992 00003BCA 01                  <2> runnextline db 1
  4993 00003BCB 00                  <2> iffalsebuf db 0
  4994 00003BCC C3                  <2> notbatch: ret 
  4995                              <1> %ifdef network.included
  4996                              <1> 	%include 'source/programs/arp.asm'
  4997                              <1> %endif
  4998                              <1> %include 'source/programs/batch.asm'
  4999 00003BCD FF2C626174636800    <2> db 255,44,"batch",0
  5000                              <2> 	batchst: 
  5001 00003BD5 8B3D[4B300000]      <2> 		mov edi, [currentcommandloc]
  5002 00003BDB 81C706000000        <2> 		add edi, 6
  5003 00003BE1 803F00              <2> 		cmp byte [edi], 0
  5004 00003BE4 0F846D000000        <2> 		je near nonamefound
  5005 00003BEA BE00004000          <2> 		mov esi, 0x400000
  5006 00003BEF E8002D0000          <2> 		call loadfile
  5007 00003BF4 89D0                <2> 		mov eax, edx
  5008 00003BF6 3D94010000          <2> 		cmp eax, 404
  5009 00003BFB 7465                <2> 		je goodbatchname
  5010 00003BFD BE[083C0000]        <2> 		mov esi, badbatchname
  5011 00003C02 E866E1FFFF          <2> 		call print
  5012 00003C07 C3                  <2> 		ret
  5013 00003C08 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5014 00003C11 20616C726561647920- <2>
  5015 00003C1A 657869737473210A00  <2>
  5016 00003C23 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5017 00003C2C 746F20747970652061- <2>
  5018 00003C35 206E616D6520616674- <2>
  5019 00003C3E 65722074686520636F- <2>
  5020 00003C47 6D6D616E642E0A00    <2>
  5021 00003C4F 00000000            <2> 		esicache3 dd 0
  5022 00003C53 00000000            <2> 		esicache2 dd 0
  5023                              <2> 	nonamefound:
  5024 00003C57 BE[233C0000]        <2> 		mov esi, namenotfoundbatch
  5025 00003C5C E80CE1FFFF          <2> 		call print
  5026 00003C61 C3                  <2> 		ret
  5027                              <2> 	goodbatchname:
  5028 00003C62 BE00004000          <2> 		mov esi, 0x400000
  5029                              <2> 	batchcreate:
  5030 00003C67 8935[4F3C0000]      <2> 		mov [esicache3], esi
  5031 00003C6D BF00008000          <2> 		mov edi, 0x800000
  5032 00003C72 B00A                <2> 		mov al, 10
  5033 00003C74 B307                <2> 		mov bl, 7
  5034 00003C76 B404                <2> 		mov ah, 4
  5035 00003C78 CD30                <2> 		int 30h
  5036 00003C7A 8935[533C0000]      <2> 		mov [esicache2], esi
  5037 00003C80 8A0E                <2> 		mov cl, [esi]
  5038 00003C82 8B35[4F3C0000]      <2> 		mov esi, [esicache3]
  5039 00003C88 BB[BF3C0000]        <2> 		mov ebx, exitword
  5040 00003C8D E8FEF3FFFF          <2> 		call cndtest
  5041 00003C92 3C01                <2> 		cmp al, 1
  5042 00003C94 7414                <2> 		je endbatchcreate
  5043 00003C96 3C02                <2> 		cmp al, 2
  5044 00003C98 7410                <2> 		je endbatchcreate
  5045 00003C9A 8B35[533C0000]      <2> 		mov esi, [esicache2]
  5046 00003CA0 B00A                <2> 		mov al, 10
  5047 00003CA2 8806                <2> 		mov [esi], al
  5048 00003CA4 46                  <2> 		inc esi
  5049 00003CA5 E9BDFFFFFF          <2> 		jmp batchcreate
  5050                              <2> 	endbatchcreate:
  5051 00003CAA 8B35[4F3C0000]      <2> 		mov esi, [esicache3]
  5052 00003CB0 31C0                <2> 		xor eax, eax
  5053 00003CB2 8806                <2> 		mov [esi], al
  5054 00003CB4 BE00004000          <2> 		mov esi, 0x400000
  5055 00003CB9 E8AFE0FFFF          <2> 		call print
  5056 00003CBE C3                  <2> 		ret
  5057                              <2> 	
  5058 00003CBF 5C7800              <2> 	exitword db "\x",0
  5059 00003CC2 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5060 00003CCB 6F20657869742E0A00  <2>
  5061                              <1> %ifdef gui.background
  5062                              <1> 	%include 'source/programs/background.asm'
  5063 00003CD4 FF2C6261636B67726F- <2> db 255,44,"background",0
  5064 00003CDD 756E6400            <2>
  5065 00003CE1 8B3D[4B300000]      <2> 		mov edi, [currentcommandloc]
  5066 00003CE7 81C70B000000        <2> 		add edi, 11
  5067 00003CED BE00008000          <2> 		mov esi, 0x800000
  5068 00003CF2 E8FD2B0000          <2> 		call loadfile
  5069 00003CF7 81FA94010000        <2> 		cmp edx, 404
  5070 00003CFD 0F84C2120000        <2> 		je near filenotfound
  5071 00003D03 BE00008000          <2> 		mov esi, 0x800000
  5072 00003D08 66813E424D          <2> 		cmp word [esi], "BM"
  5073 00003D0D 7401                <2> 		je .bmpfound
  5074 00003D0F C3                  <2> 		ret
  5075                              <2> .bmpfound:
  5076 00003D10 8B3D[4E580000]      <2> 		mov edi, [physbaseptr]
  5077 00003D16 57                  <2> 		push edi
  5078 00003D17 BE[9CCE0300]        <2> 		mov esi, backgroundbuffer
  5079 00003D1C 8935[F9710000]      <2> 		mov [backgroundimage], esi
  5080 00003D22 8935[4E580000]      <2> 		mov [physbaseptr], esi
  5081 00003D28 31C0                <2> 		xor eax, eax
  5082                              <2> .clearlp:
  5083 00003D2A 8906                <2> 		mov [esi], eax
  5084 00003D2C 81C604000000        <2> 		add esi, 4
  5085 00003D32 81FE[9CE22B00]      <2> 		cmp esi, backgroundbufferend
  5086 00003D38 72F0                <2> 		jb .clearlp
  5087 00003D3A BE00008000          <2> 		mov esi, 0x800000
  5088 00003D3F 31C9                <2> 		xor ecx, ecx
  5089 00003D41 31D2                <2> 		xor edx, edx
  5090 00003D43 31DB                <2> 		xor ebx, ebx
  5091 00003D45 E8952D0000          <2> 		call showbmp
  5092 00003D4A 5F                  <2> 		pop edi
  5093 00003D4B 893D[4E580000]      <2> 		mov [physbaseptr], edi
  5094 00003D51 803D[028A0000]00    <2> 		cmp byte [guion], 0
  5095 00003D58 740F                <2> 		je .noclear
  5096 00003D5A E839340000          <2> 		call guiclear
  5097 00003D5F E8D4300000          <2> 		call clearmousecursor
  5098 00003D64 E8C2340000          <2> 		call reloadallgraphics
  5099                              <2> .noclear:
  5100 00003D69 C3                  <2> 		ret
  5101                              <1> %endif
  5102                              <1> %include 'source/programs/beep.asm'
  5103 00003D6A FF2C6265657000      <2> 	db 255,44,"beep",0
  5104                              <2> beep:
  5105 00003D71 B8[963D0000]        <2> 	mov eax, beepstart
  5106 00003D76 A3[76020000]        <2> 	mov [soundpos], eax
  5107 00003D7B B8[9A3D0000]        <2> 	mov eax, beepend
  5108 00003D80 A3[7A020000]        <2> 	mov [soundendpos], eax
  5109 00003D85 C605[73020000]01    <2> 	mov byte [soundon], 1
  5110                              <2> waitforsoundendbeep:
  5111 00003D8C A0[73020000]        <2> 	mov al, [soundon]
  5112 00003D91 3C00                <2> 	cmp al, 0
  5113 00003D93 75F7                <2> 	jne waitforsoundendbeep
  5114 00003D95 C3                  <2> 	ret
  5115                              <2> 	
  5116                              <2> beepstart:
  5117 00003D96 3200D111            <2> 	dw 50, 4561
  5118                              <2> beepend:
  5119                              <1> %ifdef dos.compatible
  5120                              <1> %else
  5121                              <1> 	%include 'source/programs/boot.asm'
  5122 00003D9A FF2C626F6F7400      <2> db 255,44,"boot",0
  5123                              <2> quickboot:
  5124                              <2> 	;load and jump to the bootloader
  5125                              <2> 	; mov ecx, 1
  5126                              <2> 	; xor ebx, ebx
  5127                              <2> 	; mov esi, 0x400000
  5128                              <2> 	; call diskr
  5129                              <2> 	; mov ax, LINEAR_SEL
  5130                              <2> 	; mov fs, ax
  5131                              <2> 	; mov esi, 0x400000
  5132                              <2> 	; mov edi, 0x7C00
  5133                              <2> 	; xor ebx, ebx
  5134                              <2> ; .lp:
  5135                              <2> 	; mov ecx, [esi+ebx]
  5136                              <2> 	; mov [fs:edi+ebx], ecx
  5137                              <2> 	; add ebx, 4
  5138                              <2> 	; cmp ebx, 512
  5139                              <2> 	; jb .lp
  5140 00003DA1 66BB[B13D]          <2> 	mov bx, bootload
  5141 00003DA5 66891D[050D0000]    <2> 	mov [realmodeptr], bx
  5142 00003DAC E942CEFFFF          <2> 	jmp realmode
  5143                              <2> [BITS 16]
  5144                              <2> bootload:
  5145 00003DB1 B80300              <2> 	mov ax, 3
  5146 00003DB4 31DB                <2> 	xor bx, bx
  5147 00003DB6 CD10                <2> 	int 10h
  5148 00003DB8 EA007C0000          <2> 	jmp 0:0x7C00
  5149                              <2> [BITS 32]
  5150                              <1> %endif
  5151                              <1> %include 'source/programs/cd.asm'
  5152 00003DBD FF2C636400          <2> db 255,44,"cd",0
  5153                              <2> cd:
  5154 00003DC2 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  5155 00003DC8 81C603000000        <2> 	add esi, 3
  5156 00003DCE 8B3D[10B20300]      <2> 	mov edi, [currentfolderloc]
  5157 00003DD4 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5158 00003DDA 81C7[14B20300]      <2> 	add edi, currentfolder
  5159 00003DE0 4F                  <2> 	dec edi
  5160 00003DE1 803E2F              <2> 	cmp byte [esi], '/'
  5161 00003DE4 751C                <2> 	jne .noroot
  5162 00003DE6 31FF                <2> 	xor edi, edi
  5163 00003DE8 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5164 00003DEE 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5165 00003DF4 81C7[14B20300]      <2> 	add edi, currentfolder
  5166 00003DFA 4F                  <2> 	dec edi
  5167 00003DFB 46                  <2> 	inc esi
  5168 00003DFC 803E00              <2> 	cmp byte [esi], 0
  5169 00003DFF 7401                <2> 	je .noroot
  5170 00003E01 4E                  <2> 	dec esi
  5171                              <2> .noroot:
  5172 00003E02 66813E2E2E          <2> 	cmp word [esi], ".."
  5173 00003E07 742A                <2> 	je .moveup
  5174 00003E09 47                  <2> 	inc edi
  5175                              <2> .movedown:
  5176 00003E0A 8A06                <2> 	mov al, [esi]
  5177 00003E0C 8807                <2> 	mov [edi], al
  5178 00003E0E 47                  <2> 	inc edi
  5179 00003E0F 46                  <2> 	inc esi
  5180 00003E10 3C00                <2> 	cmp al, 0
  5181 00003E12 740A                <2> 	je .donecd
  5182 00003E14 81FF[14B40300]      <2> 	cmp edi, currentfolderend
  5183 00003E1A 72EE                <2> 	jb .movedown
  5184 00003E1C 30C0                <2> 	xor al, al
  5185                              <2> .donecd:
  5186 00003E1E 4F                  <2> 	dec edi
  5187 00003E1F C6072F              <2> 	mov byte [edi], '/'
  5188 00003E22 47                  <2> 	inc edi
  5189 00003E23 C60700              <2> 	mov byte [edi], 0
  5190 00003E26 81EF[14B20300]      <2> 	sub edi, currentfolder
  5191 00003E2C 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5192 00003E32 C3                  <2> 	ret
  5193                              <2> .moveup:
  5194 00003E33 31C0                <2> 	xor eax, eax
  5195 00003E35 A3[0CB20300]        <2> 	mov [lastfolderloc], eax
  5196                              <2> .moveuploop:
  5197 00003E3A 4F                  <2> 	dec edi
  5198 00003E3B 8A07                <2> 	mov al, [edi]
  5199 00003E3D 81FF[14B20300]      <2> 	cmp edi, currentfolder
  5200 00003E43 763B                <2> 	jbe .moveupover
  5201 00003E45 3C2F                <2> 	cmp al, '/'
  5202 00003E47 75F1                <2> 	jne .moveuploop
  5203 00003E49 C6072F              <2> 	mov byte [edi], '/'
  5204 00003E4C 47                  <2> 	inc edi
  5205 00003E4D C60700              <2> 	mov byte [edi], 0
  5206 00003E50 81EF[14B20300]      <2> 	sub edi, currentfolder
  5207 00003E56 893D[10B20300]      <2> 	mov [currentfolderloc], edi
  5208 00003E5C 81C7[14B20300]      <2> 	add edi, currentfolder
  5209 00003E62 4F                  <2> 	dec edi
  5210                              <2> .lastfolder:
  5211 00003E63 4F                  <2> 	dec edi
  5212 00003E64 8A07                <2> 	mov al, [edi]
  5213 00003E66 81FF[14B20300]      <2> 	cmp edi, currentfolder
  5214 00003E6C 7604                <2> 	jbe .donemoveup
  5215 00003E6E 3C2F                <2> 	cmp al, '/'
  5216 00003E70 75F1                <2> 	jne .lastfolder
  5217                              <2> .donemoveup:
  5218 00003E72 47                  <2> 	inc edi
  5219 00003E73 81EF[14B20300]      <2> 	sub edi, currentfolder
  5220 00003E79 893D[0CB20300]      <2> 	mov [lastfolderloc], edi
  5221 00003E7F C3                  <2> 	ret
  5222                              <2> .moveupover:
  5223 00003E80 BF[14B20300]        <2> 	mov edi, currentfolder
  5224 00003E85 C6072F              <2> 	mov byte [edi], '/'
  5225 00003E88 47                  <2> 	inc edi
  5226 00003E89 C60700              <2> 	mov byte [edi], 0
  5227 00003E8C 31C0                <2> 	xor eax, eax
  5228 00003E8E A3[0CB20300]        <2> 	mov [lastfolderloc], eax
  5229 00003E93 40                  <2> 	inc eax
  5230 00003E94 A3[10B20300]        <2> 	mov [currentfolderloc], eax
  5231 00003E99 C3                  <2> 	ret
  5232                              <1> %include 'source/programs/charmap.asm'
  5233 00003E9A 00                  <2> charmapnum db 0
  5234 00003E9B FF2C636861726D6170- <2> db 255,44,"charmap",0
  5235 00003EA4 00                  <2>
  5236 00003EA5 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  5237 00003EAB 81C608000000        <2> 	add esi, 8
  5238 00003EB1 803E00              <2> 	cmp byte [esi], 0
  5239 00003EB4 7412                <2> 	je .nospecific
  5240 00003EB6 E826F5FFFF          <2> 	call cnvrthextxt
  5241 00003EBB 6689C8              <2> 	mov ax, cx
  5242 00003EBE 66BB0700            <2> 	mov bx, 7
  5243 00003EC2 E855E5FFFF          <2> 	call prcharq
  5244 00003EC7 C3                  <2> 	ret
  5245                              <2> .nospecific:
  5246 00003EC8 66BB0700            <2> 	mov bx, 7
  5247 00003ECC 66B82000            <2> 	mov ax, " "
  5248 00003ED0 C605[9A3E0000]00    <2> 	mov byte [charmapnum], 0
  5249 00003ED7 E840E5FFFF          <2> 	call prcharq
  5250 00003EDC E83BE5FFFF          <2> 	call prcharq
  5251 00003EE1 E836E5FFFF          <2> 	call prcharq
  5252 00003EE6 E831E5FFFF          <2> 	call prcharq
  5253 00003EEB 66B83000            <2> 	mov ax, "0"
  5254                              <2> charmapnumprnt:
  5255 00003EEF E828E5FFFF          <2> 	call prcharq
  5256 00003EF4 6640                <2> 	inc ax
  5257 00003EF6 6650                <2> 	push ax
  5258 00003EF8 66B82000            <2> 	mov ax, " "
  5259 00003EFC E81BE5FFFF          <2> 	call prcharq
  5260 00003F01 6658                <2> 	pop ax
  5261 00003F03 663D3900            <2> 	cmp ax, "9"
  5262 00003F07 76E6                <2> 	jbe charmapnumprnt
  5263 00003F09 66B84100            <2> 	mov ax, "A"
  5264                              <2> charmapnumprnt2:
  5265 00003F0D E80AE5FFFF          <2> 	call prcharq
  5266 00003F12 6640                <2> 	inc ax
  5267 00003F14 6650                <2> 	push ax
  5268 00003F16 66B82000            <2> 	mov ax, " "
  5269 00003F1A E8FDE4FFFF          <2> 	call prcharq
  5270 00003F1F 6658                <2> 	pop ax
  5271 00003F21 663D4700            <2> 	cmp ax, "G"
  5272 00003F25 72E6                <2> 	jb charmapnumprnt2
  5273                              <2> 	
  5274 00003F27 BE[DD890000]        <2> 	mov esi, line
  5275 00003F2C E818DEFFFF          <2> 	call printquiet
  5276 00003F31 6631C0              <2> 	xor ax, ax
  5277 00003F34 6689C1              <2> 	mov cx, ax
  5278 00003F37 E844F3FFFF          <2> 	call showhexsmall
  5279 00003F3C E925000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5280                              <2> charmapcopy:
  5281 00003F41 6640                <2> 	inc ax
  5282 00003F43 663D0800            <2> 	cmp ax, 8
  5283 00003F47 741D                <2> 	je charmapnocopy
  5284 00003F49 663D0900            <2> 	cmp ax, 9
  5285 00003F4D 7417                <2> 	je charmapnocopy
  5286 00003F4F 663D0A00            <2> 	cmp ax, 10
  5287 00003F53 7411                <2> 	je charmapnocopy
  5288 00003F55 663D0D00            <2> 	cmp ax, 13
  5289 00003F59 740B                <2> 	je charmapnocopy
  5290 00003F5B 663D0001            <2> 	cmp ax, 256
  5291 00003F5F 744D                <2> 	je nomorecharmap
  5292 00003F61 E904000000          <2> 	jmp okchar
  5293                              <2> charmapnocopy:
  5294 00003F66 66B82000            <2> 	mov ax, " "
  5295                              <2> okchar:
  5296 00003F6A 6650                <2> 	push ax
  5297 00003F6C E8ABE4FFFF          <2> 	call prcharq
  5298 00003F71 66B82000            <2> 	mov ax, " "
  5299 00003F75 E8A2E4FFFF          <2> 	call prcharq
  5300 00003F7A 6658                <2> 	pop ax
  5301                              <2> charmapcopycheck:
  5302 00003F7C FE05[9A3E0000]      <2> 	inc byte [charmapnum]
  5303 00003F82 803D[9A3E0000]10    <2> 	cmp byte [charmapnum], 16
  5304 00003F89 72B6                <2> 	jb charmapcopy
  5305 00003F8B 6650                <2> 	push ax
  5306 00003F8D BE[DD890000]        <2> 	mov esi, line
  5307 00003F92 E8B2DDFFFF          <2> 	call printquiet
  5308 00003F97 6658                <2> 	pop ax
  5309 00003F99 88C1                <2> 	mov cl, al
  5310 00003F9B FEC1                <2> 	inc cl
  5311 00003F9D E8DEF2FFFF          <2> 	call showhexsmall
  5312 00003FA2 C605[9A3E0000]00    <2> 	mov byte [charmapnum], 0
  5313 00003FA9 E993FFFFFF          <2> 	jmp charmapcopy
  5314                              <2> nomorecharmap:
  5315 00003FAE C3                  <2> 	ret
  5316                              <1> %ifdef gui.included
  5317                              <1> 	%include 'source/programs/circle.asm'
  5318 00003FAF FF2C636972636C6500  <2> db 255,44,"circle",0
  5319                              <2> circle:
  5320 00003FB8 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  5321 00003FBE 81C607000000        <2> 	add esi, 7
  5322 00003FC4 66B91000            <2> 	mov cx, 16
  5323 00003FC8 30C0                <2> 	xor al, al
  5324 00003FCA 3806                <2> 	cmp [esi], al
  5325 00003FCC 7405                <2> 	je .nocmdline
  5326 00003FCE E85AF4FFFF          <2> 	call cnvrttxt
  5327                              <2> .nocmdline:
  5328 00003FD3 E80A0B0000          <2> 	call linetester.stime
  5329 00003FD8 E857000000          <2> 	call fcircle.nocmdline
  5330 00003FDD E8180B0000          <2> 	call linetester.etime
  5331 00003FE2 53                  <2> 	push ebx
  5332 00003FE3 57                  <2> 	push edi
  5333 00003FE4 E8A0E3FFFF          <2> 	call getchar
  5334 00003FE9 59                  <2> 	pop ecx
  5335 00003FEA E860F3FFFF          <2> 	call showdec
  5336 00003FEF BE[884B0000]        <2> 	mov esi, linetester.msgcircle
  5337 00003FF4 E850DDFFFF          <2> 	call printquiet
  5338 00003FF9 59                  <2> 	pop ecx
  5339 00003FFA E850F3FFFF          <2> 	call showdec
  5340 00003FFF BE[9F4B0000]        <2> 	mov esi, linetester.msgtime
  5341 00004004 E840DDFFFF          <2> 	call printquiet
  5342 00004009 E81D320000          <2> 	call reloadallgraphics
  5343 0000400E C3                  <2> 	ret
  5344                              <2> 	
  5345 0000400F FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5346 00004018 00                  <2>
  5347                              <2> fcircle:	
  5348 00004019 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  5349 0000401F 81C608000000        <2> 	add esi, 8
  5350 00004025 66B91000            <2> 	mov cx, 16
  5351 00004029 30C0                <2> 	xor al, al
  5352 0000402B 3806                <2> 	cmp [esi], al
  5353 0000402D 7405                <2> 	je .nocmdline
  5354 0000402F E8F9F3FFFF          <2> 	call cnvrttxt
  5355                              <2> .nocmdline:
  5356 00004034 6689C8              <2> 	mov ax, cx
  5357 00004037 66D1E1              <2> 	shl cx, 1
  5358 0000403A 6689CA              <2> 	mov dx, cx
  5359 0000403D 663B15[38580000]    <2> 	cmp dx, [resolutionx]
  5360 00004044 731B                <2> 	jae .done
  5361 00004046 663B0D[3A580000]    <2> 	cmp cx, [resolutiony]
  5362 0000404D 7312                <2> 	jae .done
  5363 0000404F 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2]
  5364 00004056 31FF                <2> 	xor edi, edi
  5365 00004058 803D[028A0000]01    <2> 	cmp byte [guion], 1
  5366 0000405F 7401                <2> 	je .lp
  5367 00004061 C3                  <2> .done ret
  5368                              <2> .lp:
  5369 00004062 6629C2              <2> 	sub dx, ax
  5370 00004065 6629C1              <2> 	sub cx, ax
  5371 00004068 60                  <2> 	pusha
  5372 00004069 E8552C0000          <2> 	call fillcircle
  5373 0000406E 61                  <2> 	popa
  5374 0000406F 47                  <2> 	inc edi
  5375 00004070 660335[6F020000]    <2> 	add si, [timenanoseconds]
  5376 00004077 6601C2              <2> 	add dx, ax
  5377 0000407A 6601C2              <2> 	add dx, ax
  5378 0000407D 6601C2              <2> 	add dx, ax
  5379 00004080 6601C1              <2> 	add cx, ax
  5380 00004083 663B15[38580000]    <2> 	cmp dx, [resolutionx]
  5381 0000408A 72D6                <2> 	jb .lp
  5382 0000408C 6689C2              <2> 	mov dx, ax
  5383 0000408F 6601C2              <2> 	add dx, ax
  5384 00004092 6601C1              <2> 	add cx, ax
  5385 00004095 6601C1              <2> 	add cx, ax
  5386 00004098 663B0D[3A580000]    <2> 	cmp cx, [resolutiony]
  5387 0000409F 72C1                <2> 	jb .lp
  5388 000040A1 C3                  <2> 	ret
  5389                              <1> %endif
  5390                              <1> %include 'source/programs/clear.asm'
  5391 000040A2 FF2C636C65617200    <2> db 255,44,"clear",0
  5392 000040AA E873DDFFFF          <2> 		call clear
  5393 000040AF C3                  <2> 		ret 
  5394                              <1> %include 'source/programs/cpuid.asm'
  5395 000040B0 FF2C637075696400    <2> db 255,44,"cpuid",0
  5396 000040B8 31C0                <2> 	xor eax, eax
  5397 000040BA 0FA2                <2> 	cpuid
  5398 000040BC 891D[0D410000]      <2> 	mov [cpuidbuf], ebx
  5399 000040C2 8915[11410000]      <2> 	mov [cpuidbuf + 4], edx
  5400 000040C8 890D[15410000]      <2> 	mov [cpuidbuf + 8], ecx
  5401 000040CE BE[0D410000]        <2> 	mov esi, cpuidbuf
  5402 000040D3 E895DCFFFF          <2> 	call print
  5403 000040D8 BE[DD890000]        <2> 	mov esi, line
  5404 000040DD E88BDCFFFF          <2> 	call print
  5405 000040E2 B801000000          <2> 	mov eax, 1
  5406 000040E7 0FA2                <2> 	cpuid
  5407 000040E9 89C1                <2> 	mov ecx, eax
  5408 000040EB C605[7F320000]02    <2> 	mov byte [firsthexshown], 2
  5409 000040F2 E89DF1FFFF          <2> 	call showhex
  5410 000040F7 B808000080          <2> 	mov eax, 0x80000008
  5411 000040FC 0FA2                <2> 	cpuid
  5412 000040FE 89C1                <2> 	mov ecx, eax
  5413 00004100 C605[7F320000]02    <2> 	mov byte [firsthexshown], 2
  5414 00004107 E888F1FFFF          <2> 	call showhex
  5415 0000410C C3                  <2> 	ret
  5416                              <2> 	
  5417 0000410D 00<rept>            <2> cpuidbuf times 13 db 0
  5418                              <2> cpuidvendorend:
  5419                              <1> %include 'source/programs/date.asm'
  5420 0000411A 082E30303030303030- <2> timenscache db 8,".000000000"
  5421 00004123 3030                <2>
  5422 00004125 200A00              <2> timenscacheend: db " ",10,0
  5423 00004128 00                  <2> istimeset db 0
  5424 00004129 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5425 00004132 2063757272656E7420- <2>
  5426 0000413B 554E49582074696D65- <2>
  5427 00004144 3A0A00              <2>
  5428 00004147 00<rept>            <2> timeinputbuffer times 12 db 0
  5429 00004153 00                  <2> timeinputbend: db 0
  5430                              <2> 
  5431 00004154 FF2C6461746500      <2> db 255,44,"date",0
  5432                              <2> 	;cmp byte [istimeset], 0
  5433                              <2> 	;jne timeisset
  5434 0000415B E880000000          <2> 	call time
  5435 00004160 E828020000          <2> 	call timeconvert	
  5436                              <2> 	; mov esi, settimemsg
  5437                              <2> 	; call print
  5438                              <2> 	; mov esi, timeinputbuffer
  5439                              <2> 	; mov edi, timeinputbend
  5440                              <2> 	; call readline
  5441                              <2> 	; mov esi, timeinputbuffer
  5442                              <2> 	; xor edi, edi
  5443                              <2> 	; call cnvrttxt
  5444 00004165 890D[6B020000]      <2> 	mov [timeseconds], ecx
  5445                              <2> 	;xor ecx, ecx
  5446                              <2> 	;mov [timenanoseconds], ecx
  5447 0000416B C605[28410000]01    <2> 	mov byte [istimeset], 1
  5448                              <2> timeisset:
  5449 00004172 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  5450 00004178 E8D2F1FFFF          <2> 	call showdec
  5451                              <2> 	
  5452 0000417D 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  5453 00004183 BE[1A410000]        <2> 	mov esi, timenscache
  5454 00004188 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5455 0000418F C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5456 00004196 C6460A30            <2> 	mov byte [esi + 10], "0"
  5457 0000419A BE[25410000]        <2> 	mov esi, timenscacheend
  5458 0000419F E888EFFFFF          <2> 	call convert
  5459 000041A4 BE[1A410000]        <2> 	mov esi, timenscache
  5460 000041A9 E89BDBFFFF          <2> 	call printquiet
  5461                              <2> 	
  5462 000041AE E82D000000          <2> 	call time
  5463 000041B3 BE[FB440000]        <2> 	mov esi, timeshow
  5464 000041B8 E88CDBFFFF          <2> 	call printquiet
  5465 000041BD BE[DD890000]        <2> 	mov esi, line
  5466 000041C2 E882DBFFFF          <2> 	call printquiet
  5467 000041C7 BE[04450000]        <2> 	mov esi, dateshow
  5468 000041CC E878DBFFFF          <2> 	call printquiet
  5469 000041D1 BE[DD890000]        <2> 	mov esi, line
  5470 000041D6 E86EDBFFFF          <2> 	call printquiet
  5471 000041DB E9BE000000          <2> 	jmp findday
  5472                              <2> time:
  5473 000041E0 E851010000          <2> 	call tstackput1
  5474 000041E5 B00A                <2> 	mov al,10			;Get RTC register A
  5475 000041E7 E87B010000          <2> 	call tget1
  5476 000041EC A880                <2> 	test al,0x80			;Is update in progress?
  5477 000041EE 75F0                <2> 	jne time				; yes, wait
  5478                              <2> 
  5479 000041F0 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5480 000041F2 E870010000          <2> 	call tget1
  5481 000041F7 A2[F2440000]        <2> 	mov [RTCtimeSecond],al
  5482                              <2> 
  5483 000041FC B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5484 000041FE E864010000          <2> 	call tget1
  5485 00004203 A2[F3440000]        <2> 	mov [RTCtimeMinute],al
  5486                              <2> 
  5487 00004208 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5488 0000420A E858010000          <2> 	call tget1
  5489 0000420F A2[F4440000]        <2> 	mov [RTCtimeHour],al
  5490                              <2> 
  5491 00004214 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5492 00004216 E84C010000          <2> 	call tget1
  5493 0000421B A2[F5440000]        <2> 	mov [RTCtimeDay],al
  5494                              <2> 
  5495 00004220 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5496 00004222 E840010000          <2> 	call tget1
  5497 00004227 241F                <2> 	and al, 11111b
  5498 00004229 A2[F6440000]        <2> 	mov [RTCtimeMonth],al
  5499                              <2> 
  5500 0000422E B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5501 00004230 E832010000          <2> 	call tget1
  5502 00004235 A2[F7440000]        <2> 	mov [RTCtimeYear],al
  5503                              <2> 	
  5504 0000423A BE[FB440000]        <2> 	mov esi, timeshow
  5505 0000423F 8A2D[F4440000]      <2> 	mov ch, [RTCtimeHour]
  5506 00004245 E828010000          <2> 	call tput1
  5507 0000424A 8A2D[F3440000]      <2> 	mov ch, [RTCtimeMinute]
  5508 00004250 E81D010000          <2> 	call tput1
  5509 00004255 8A2D[F2440000]      <2> 	mov ch, [RTCtimeSecond]
  5510 0000425B E812010000          <2> 	call tput1
  5511 00004260 BE[04450000]        <2> 	mov esi, dateshow
  5512 00004265 8A2D[F6440000]      <2> 	mov ch, [RTCtimeMonth]
  5513 0000426B E802010000          <2> 	call tput1
  5514 00004270 8A2D[F5440000]      <2> 	mov ch, [RTCtimeDay]
  5515 00004276 E8F7000000          <2> 	call tput1
  5516 0000427B B520                <2> 	mov ch, 0x20
  5517 0000427D E8F0000000          <2> 	call tput1
  5518 00004282 4E                  <2> 	dec esi
  5519 00004283 8A2D[F7440000]      <2> 	mov ch, [RTCtimeYear]
  5520 00004289 E8E4000000          <2> 	call tput1
  5521 0000428E E8BD000000          <2> 	call tstackget1
  5522 00004293 C3                  <2> 	ret
  5523 00004294 BE[FB440000]        <2> 	mov esi, timeshow
  5524 00004299 E8CFDAFFFF          <2> 	call print
  5525                              <2> ;get day of week
  5526                              <2> ;add these:
  5527                              <2> ;century value
  5528                              <2> ;last 2 digits of year
  5529                              <2> ;last 2 digits of year right shifted twice
  5530                              <2> ;month table value
  5531                              <2> ;day of the month
  5532                              <2> ;divide these by 7
  5533                              <2> ;the remainder is the day
  5534                              <2> findday:
  5535 0000429E 31C0                <2> 	xor eax, eax
  5536                              <2> ;first convert the values from BCD to hex
  5537 000042A0 A0[F5440000]        <2> 	mov al, [RTCtimeDay]
  5538 000042A5 E873000000          <2> 	call converttohex
  5539 000042AA 8825[F8440000]      <2> 	mov [dayhex], ah
  5540 000042B0 A0[F6440000]        <2> 	mov al, [RTCtimeMonth]
  5541 000042B5 E863000000          <2> 	call converttohex
  5542 000042BA 8825[F9440000]      <2> 	mov [monthhex], ah
  5543 000042C0 A0[F7440000]        <2> 	mov al, [RTCtimeYear]
  5544 000042C5 E853000000          <2> 	call converttohex
  5545 000042CA 8825[FA440000]      <2> 	mov [yearhex], ah
  5546 000042D0 31C0                <2> 	xor eax, eax
  5547 000042D2 A0[FA440000]        <2> 	mov al, [yearhex]
  5548 000042D7 C0E802              <2> 	shr al, 2
  5549 000042DA 0205[FA440000]      <2> 	add al, [yearhex]
  5550 000042E0 0506000000          <2> 	add eax, 6
  5551 000042E5 31DB                <2> 	xor ebx, ebx
  5552 000042E7 8A1D[F9440000]      <2> 	mov bl, [monthhex]
  5553 000042ED FECB                <2> 	dec bl
  5554 000042EF 81C3[19450000]      <2> 	add ebx, month
  5555 000042F5 31C9                <2> 	xor ecx, ecx
  5556 000042F7 8A0B                <2> 	mov cl, [ebx]
  5557 000042F9 01C8                <2> 	add eax, ecx
  5558 000042FB 8A0D[F8440000]      <2> 	mov cl, [dayhex]
  5559 00004301 01C8                <2> 	add eax, ecx
  5560 00004303 66BB0700            <2> 	mov bx, 7
  5561 00004307 31D2                <2> 	xor edx, edx
  5562 00004309 66F7F3              <2> 	div bx
  5563 0000430C C1E202              <2> 	shl edx, 2
  5564 0000430F 81C2[25450000]      <2> 	add edx, day
  5565 00004315 8B32                <2> 	mov esi, [edx]
  5566 00004317 E851DAFFFF          <2> 	call print
  5567 0000431C C3                  <2> 	ret
  5568                              <2> 	
  5569                              <2> converttohex:
  5570 0000431D 88C4                <2> 	mov ah, al
  5571 0000431F C0E804              <2> 	shr al, 4
  5572 00004322 C0E404              <2> 	shl ah, 4
  5573 00004325 C0EC04              <2> 	shr ah, 4
  5574 00004328 3C00                <2> 	cmp al, 0
  5575 0000432A 7409                <2> 	je noconverttohex
  5576                              <2> converttohexlp:
  5577 0000432C 80C40A              <2> 	add ah, 10
  5578 0000432F FEC8                <2> 	dec al
  5579 00004331 3C00                <2> 	cmp al, 0
  5580 00004333 75F7                <2> 	jne converttohexlp
  5581                              <2> noconverttohex:
  5582 00004335 C3                  <2> 	ret
  5583                              <2> 	
  5584                              <2> tstackput1:
  5585 00004336 8935[EE440000]      <2> 	mov [tstack + 20], esi
  5586 0000433C BE[DA440000]        <2> 	mov esi, tstack
  5587 00004341 8906                <2> 	mov [esi], eax
  5588 00004343 895E04              <2> 	mov [esi + 4], ebx
  5589 00004346 894E08              <2> 	mov [esi + 8], ecx
  5590 00004349 89560C              <2> 	mov [esi + 12], edx
  5591 0000434C 897E10              <2> 	mov [esi + 16], edi
  5592 0000434F C3                  <2> 	ret
  5593                              <2> 	
  5594                              <2> tstackget1:
  5595 00004350 BE[DA440000]        <2> 	mov esi, tstack
  5596 00004355 8B06                <2> 	mov eax, [esi]
  5597 00004357 8B5E04              <2> 	mov ebx, [esi + 4]
  5598 0000435A 8B4E08              <2> 	mov ecx, [esi + 8]
  5599 0000435D 8B560C              <2> 	mov edx, [esi + 12]
  5600 00004360 8B7E10              <2> 	mov edi, [esi + 16]
  5601 00004363 8B7614              <2> 	mov esi, [esi + 20]
  5602 00004366 C3                  <2> 	ret
  5603                              <2> 	
  5604                              <2> tget1:
  5605 00004367 66BA7000            <2> 	mov dx, 0x70
  5606 0000436B EE                  <2> 	out dx, al
  5607 0000436C 6642                <2> 	inc dx
  5608 0000436E EC                  <2> 	in al, dx
  5609 0000436F 664A                <2> 	dec dx
  5610 00004371 C3                  <2> 	ret
  5611                              <2> 	
  5612                              <2> tput1:
  5613 00004372 66C1E904            <2> 	shr cx, 4
  5614 00004376 B030                <2> 	mov al, 48
  5615 00004378 00E8                <2> 	add al, ch
  5616 0000437A 8806                <2> 	mov [esi], al
  5617 0000437C 46                  <2> 	inc esi
  5618 0000437D B030                <2> 	mov al, 48
  5619 0000437F C0E904              <2> 	shr cl, 4
  5620 00004382 00C8                <2> 	add al, cl
  5621 00004384 8806                <2> 	mov [esi], al
  5622 00004386 81C602000000        <2> 	add esi, 2
  5623 0000438C C3                  <2> 	ret
  5624                              <2> 	
  5625                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5626 0000438D 31DB                <2> 	xor ebx, ebx
  5627 0000438F 31C9                <2> 	xor ecx, ecx
  5628 00004391 31FF                <2> 	xor edi, edi
  5629 00004393 31F6                <2> 	xor esi, esi
  5630                              <2> 	
  5631 00004395 A0[F2440000]        <2> 	mov al, [RTCtimeSecond]
  5632 0000439A E87EFFFFFF          <2> 	call converttohex
  5633 0000439F 88E1                <2> 	mov cl, ah
  5634                              <2> 	
  5635 000043A1 A0[F3440000]        <2> 	mov al, [RTCtimeMinute]
  5636 000043A6 E872FFFFFF          <2> 	call converttohex
  5637 000043AB 88E3                <2> 	mov bl, ah
  5638 000043AD B83C000000          <2> 	mov eax, 60
  5639 000043B2 31D2                <2> 	xor edx, edx
  5640 000043B4 F7E3                <2> 	mul ebx
  5641 000043B6 01C1                <2> 	add ecx, eax
  5642                              <2> 	
  5643 000043B8 A0[F4440000]        <2> 	mov al, [RTCtimeHour]
  5644 000043BD E85BFFFFFF          <2> 	call converttohex
  5645 000043C2 88E3                <2> 	mov bl, ah
  5646 000043C4 B8100E0000          <2> 	mov eax, 3600
  5647 000043C9 31D2                <2> 	xor edx, edx
  5648 000043CB F7E3                <2> 	mul ebx
  5649 000043CD 01C1                <2> 	add ecx, eax
  5650                              <2> 		
  5651 000043CF 31C0                <2> 	xor eax, eax
  5652 000043D1 A0[F7440000]        <2> 	mov al, [RTCtimeYear]
  5653 000043D6 E842FFFFFF          <2> 	call converttohex
  5654 000043DB 6689C6              <2> 	mov si, ax
  5655 000043DE 66C1EE08            <2> 	shr si, 8
  5656 000043E2 6681FE4600          <2> 	cmp si, 70
  5657 000043E7 7705                <2> 	ja .no100
  5658 000043E9 6681C66400          <2> 	add si, 100
  5659                              <2> .no100:
  5660 000043EE 6681C66C07          <2> 	add si, 1900
  5661                              <2> 	
  5662 000043F3 BB[CC440000]        <2> 	mov ebx, .month
  5663 000043F8 A0[F5440000]        <2> 	mov al, [RTCtimeDay]
  5664 000043FD E81BFFFFFF          <2> 	call converttohex
  5665 00004402 88E0                <2> 	mov al, ah
  5666 00004404 FEC8                <2> 	dec al
  5667 00004406 31D2                <2> 	xor edx, edx
  5668 00004408 88C2                <2> 	mov dl, al
  5669 0000440A A0[F6440000]        <2> 	mov al, [RTCtimeMonth]
  5670 0000440F E809FFFFFF          <2> 	call converttohex
  5671 00004414 88D0                <2> 	mov al, dl
  5672 00004416 88E2                <2> 	mov dl, ah
  5673 00004418 30E4                <2> 	xor ah, ah
  5674 0000441A 6689D5              <2> 	mov bp, dx
  5675                              <2> 	
  5676 0000441D 6689F7              <2> 	mov di, si
  5677 00004420 66C1EF02            <2> 	shr di, 2
  5678 00004424 66C1E702            <2> 	shl di, 2
  5679 00004428 C605[CD440000]1C    <2> 	mov byte [.month + 1], 28
  5680 0000442F 6639F7              <2> 	cmp di, si
  5681 00004432 7506                <2> 	jne .nofebmod
  5682 00004434 FE05[CD440000]      <2> 	inc byte [.month + 1]
  5683                              <2> .nofebmod:
  5684 0000443A 664D                <2> 	dec bp
  5685 0000443C 6681FD0000          <2> 	cmp bp, 0
  5686 00004441 740A                <2> 	je .ylp
  5687 00004443 8A13                <2> 	mov dl, [ebx]
  5688 00004445 01D0                <2> 	add eax, edx
  5689 00004447 43                  <2> 	inc ebx
  5690 00004448 E9EDFFFFFF          <2> 	jmp .nofebmod
  5691                              <2> 	
  5692                              <2> .ylp:
  5693 0000444D 6689F7              <2> 	mov di, si
  5694 00004450 66C1EF02            <2> 	shr di, 2
  5695 00004454 66C1E702            <2> 	shl di, 2
  5696 00004458 81C18033E101        <2> 	add ecx, 31536000
  5697 0000445E 6639F7              <2> 	cmp di, si
  5698 00004461 7506                <2> 	jne .noymod
  5699 00004463 81C180510100        <2> 	add ecx, 86400
  5700                              <2> .noymod:
  5701 00004469 664E                <2> 	dec si
  5702 0000446B 6681FEB207          <2> 	cmp si, 1970
  5703 00004470 77DB                <2> 	ja .ylp
  5704                              <2> 	
  5705 00004472 BB80510100          <2> 	mov ebx, 86400
  5706 00004477 31D2                <2> 	xor edx, edx
  5707 00004479 F7E3                <2> 	mul ebx
  5708 0000447B 01C1                <2> 	add ecx, eax
  5709                              <2> 	
  5710 0000447D 31DB                <2> 	xor ebx, ebx
  5711 0000447F 31D2                <2> 	xor edx, edx
  5712 00004481 B8100E0000          <2> 	mov eax, 3600
  5713 00004486 8A3D[D8440000]      <2> 	mov bh, [timezoneh]
  5714 0000448C 80FF80              <2> 	cmp bh, 128
  5715 0000448F 720D                <2> 	jb .posh
  5716 00004491 28FB                <2> 	sub bl, bh
  5717 00004493 30FF                <2> 	xor bh, bh
  5718 00004495 F7E3                <2> 	mul ebx
  5719 00004497 01C1                <2> 	add ecx, eax
  5720 00004499 E906000000          <2> 	jmp .doneth
  5721                              <2> .posh:
  5722 0000449E 86DF                <2> 	xchg bl, bh
  5723 000044A0 F7E3                <2> 	mul ebx
  5724 000044A2 29C1                <2> 	sub ecx, eax
  5725                              <2> .doneth:
  5726                              <2> 
  5727 000044A4 31DB                <2> 	xor ebx, ebx	
  5728 000044A6 31D2                <2> 	xor edx, edx
  5729 000044A8 B83C000000          <2> 	mov eax, 60
  5730 000044AD 8A3D[D9440000]      <2> 	mov bh, [timezonem]
  5731 000044B3 80FF80              <2> 	cmp bh, 128
  5732 000044B6 720D                <2> 	jb .posm
  5733 000044B8 28FB                <2> 	sub bl, bh
  5734 000044BA 30FF                <2> 	xor bh, bh
  5735 000044BC F7E3                <2> 	mul ebx
  5736 000044BE 01C1                <2> 	add ecx, eax
  5737 000044C0 E906000000          <2> 	jmp .donetm
  5738                              <2> .posm:
  5739 000044C5 86DF                <2> 	xchg bl, bh
  5740 000044C7 F7E3                <2> 	mul ebx
  5741 000044C9 29C1                <2> 	sub ecx, eax
  5742                              <2> .donetm:
  5743                              <2> 
  5744 000044CB C3                  <2> 	ret
  5745                              <2> 	
  5746                              <2> 
  5747 000044CC 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5748 000044D5 1F1E1F              <2>
  5749                              <2> 
  5750 000044D8 FA                  <2> 	timezoneh db -6
  5751 000044D9 00                  <2> 	timezonem db 0
  5752 000044DA 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5753 000044E3 000000000000000000- <2>
  5754 000044EC 000000000000        <2>
  5755 000044F2 00                  <2> 	RTCtimeSecond db 0
  5756 000044F3 00                  <2> 	RTCtimeMinute db 0
  5757 000044F4 00                  <2> 	RTCtimeHour db 0
  5758 000044F5 00                  <2> 	RTCtimeDay db 0
  5759 000044F6 00                  <2> 	RTCtimeMonth db 0
  5760 000044F7 00                  <2> 	RTCtimeYear db 0
  5761 000044F8 00                  <2> 	dayhex db 0
  5762 000044F9 00                  <2> 	monthhex db 0
  5763 000044FA 00                  <2> 	yearhex db 0
  5764 000044FB 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5765 00004504 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5766 0000450D 302000              <2>
  5767                              <2> 	oldcentury:	;from 1700 to 1900
  5768 00004510 040200              <2> 	db 4,2,0
  5769                              <2> 	century:	;from 2000 to 2500
  5770 00004513 060402000604        <2> 	db 6,4,2,0,6,4
  5771                              <2> 	month:
  5772 00004519 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5773 00004522 000305              <2>
  5774                              <2> 	day:
  5775 00004525 [41450000]          <2> 	dd sunday
  5776 00004529 [49450000]          <2> 	dd monday
  5777 0000452D [51450000]          <2> 	dd tuesday
  5778 00004531 [5A450000]          <2> 	dd wednesday
  5779 00004535 [65450000]          <2> 	dd thursday
  5780 00004539 [6F450000]          <2> 	dd friday
  5781 0000453D [77450000]          <2> 	dd saturday
  5782                              <2> sunday:
  5783 00004541 53756E6461790A00    <2> 	db "Sunday",10,0
  5784                              <2> monday:
  5785 00004549 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5786                              <2> tuesday:
  5787 00004551 547565736461790A00  <2> 	db "Tuesday",10,0
  5788                              <2> wednesday:
  5789 0000455A 5765646E6573646179- <2> 	db "Wednesday",10,0
  5790 00004563 0A00                <2>
  5791                              <2> thursday:
  5792 00004565 54687572736461790A- <2> 	db "Thursday",10,0
  5793 0000456E 00                  <2>
  5794                              <2> friday:
  5795 0000456F 4672696461790A00    <2> 	db "Friday",10,0
  5796                              <2> saturday:
  5797 00004577 53617475726461790A- <2> 	db "Saturday",10,0
  5798 00004580 00                  <2>
  5799                              <1> %ifdef network.included
  5800                              <1> 	%include 'source/programs/dhcp.asm'
  5801                              <1> %endif
  5802                              <1> %ifdef disk.none
  5803                              <1> %else
  5804                              <1> 	%include 'source/programs/dos.asm'
  5805 00004581 FF2C646F7300        <2> db 255,44,"dos",0
  5806                              <2> dosrunner:
  5807 00004587 8925[08B20300]      <2> 	mov [previousstack], esp
  5808 0000458D 8B3D[4B300000]      <2> 	mov edi, [currentcommandloc]
  5809 00004593 81C704000000        <2> 	add edi, 4
  5810 00004599 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5811 0000459E E851230000          <2> 	call loadfile
  5812 000045A3 8B3D[4B300000]      <2> 	mov edi, [currentcommandloc]
  5813 000045A9 81C704000000        <2> 	add edi, 4
  5814 000045AF 81FA94010000        <2> 	cmp edx, 404
  5815 000045B5 0F845E000000        <2> 	je near .noprogfound
  5816 000045BB BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5817 000045C0 31C9                <2> 	xor ecx, ecx
  5818                              <2> .findparams:
  5819 000045C2 47                  <2> 	inc edi
  5820 000045C3 8A07                <2> 	mov al, [edi]
  5821 000045C5 3C20                <2> 	cmp al, " "
  5822 000045C7 75F9                <2> 	jne .findparams
  5823                              <2> .copyparams:
  5824 000045C9 8A07                <2> 	mov al, [edi]
  5825 000045CB 8803                <2> 	mov [ebx], al
  5826 000045CD 43                  <2> 	inc ebx
  5827 000045CE 47                  <2> 	inc edi
  5828 000045CF 41                  <2> 	inc ecx
  5829 000045D0 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5830 000045D6 7304                <2> 	jae .nomoreparams
  5831 000045D8 3C00                <2> 	cmp al, 0
  5832 000045DA 75ED                <2> 	jne .copyparams
  5833                              <2> .nomoreparams:
  5834 000045DC 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5835 000045E2 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5836 000045E6 8ED8                <2> 	mov ds, ax
  5837 000045E8 8EC0                <2> 	mov es, ax
  5838 000045EA 8EE0                <2> 	mov fs, ax
  5839 000045EC 8EE8                <2> 	mov gs, ax
  5840 000045EE 31C0                <2> 	xor eax, eax
  5841 000045F0 31DB                <2> 	xor ebx, ebx
  5842 000045F2 31C9                <2> 	xor ecx, ecx
  5843 000045F4 31D2                <2> 	xor edx, edx
  5844 000045F6 31FF                <2> 	xor edi, edi
  5845 000045F8 31F6                <2> 	xor esi, esi
  5846 000045FA 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5847 00004601 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5848 00004605 6689DA              <2> 	mov dx, bx
  5849 00004608 8EC3                <2> 	mov es, bx
  5850 0000460A 8EE3                <2> 	mov fs, bx
  5851 0000460C 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5852 00004610 8EEB                <2> 	mov gs, bx
  5853 00004612 8B25[08B20300]      <2> 	mov esp, [previousstack]
  5854 00004618 C3                  <2> 	ret
  5855                              <2> .noprogfound:
  5856 00004619 BE[A4890000]        <2> 	mov esi, notfound1
  5857 0000461E E84AD7FFFF          <2> 	call print
  5858 00004623 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  5859 00004629 81C604000000        <2> 	add esi, 4
  5860 0000462F E839D7FFFF          <2> 	call print
  5861 00004634 BE[AC890000]        <2> 	mov esi, notfound2
  5862 00004639 E82FD7FFFF          <2> 	call print
  5863 0000463E C3                  <2> 	ret
  5864                              <2> 	
  5865                              <1> %endif
  5866                              <1> %include 'source/programs/dump.asm'
  5867 0000463F FF2C64756D7000      <2> db 255,44,"dump",0
  5868 00004646 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  5869 0000464C 81C605000000        <2> 	add esi, 5
  5870 00004652 31C9                <2> 	xor ecx, ecx
  5871 00004654 66B83078            <2> 	mov ax, "0x"
  5872 00004658 663906              <2> 	cmp [esi], ax
  5873 0000465B 740A                <2> 	je dumphexin
  5874 0000465D E8CBEDFFFF          <2> 	call cnvrttxt
  5875 00004662 E910000000          <2> 	jmp dumphexnow
  5876                              <2> dumphexin:
  5877 00004667 81C602000000        <2> 	add esi, 2
  5878 0000466D E86FEDFFFF          <2> 	call cnvrthextxt
  5879 00004672 E900000000          <2> 	jmp dumphexnow
  5880                              <2> dumphexnow:
  5881 00004677 89CF                <2> 	mov edi, ecx
  5882 00004679 89FE                <2> 	mov esi, edi
  5883 0000467B 81C680030000        <2> 	add esi, 896
  5884                              <2> dumphexloop:
  5885 00004681 8B0F                <2> 	mov ecx, [edi]
  5886 00004683 C605[7F320000]05    <2> 	mov byte [firsthexshown],5
  5887 0000468A E805ECFFFF          <2> 	call showhex
  5888 0000468F 81C704000000        <2> 	add edi, 4
  5889 00004695 39F7                <2> 	cmp edi, esi
  5890 00004697 72E8                <2> 	jb dumphexloop
  5891 00004699 E885E2FFFF          <2> 	call termcopy
  5892 0000469E C3                  <2> 	ret 
  5893                              <1> %include 'source/programs/echo.asm'
  5894 0000469F FF2C6563686F00      <2> db 255,44,"echo",0
  5895                              <2> 	echoprog:
  5896 000046A6 8B35[4B300000]      <2> 		mov esi, [currentcommandloc]
  5897 000046AC 81C605000000        <2> 		add esi, 5
  5898 000046B2 8A06                <2> 		mov al, [esi]
  5899 000046B4 E890D6FFFF          <2> 		call printquiet
  5900 000046B9 E8AAD6FFFF          <2> 		call printline
  5901 000046BE C3                  <2> 		ret
  5902 000046BF BB[88B40300]        <2> 	echovr:	mov ebx, variables
  5903 000046C4 BF06000000          <2> 		mov edi, 6
  5904 000046C9 E83F000000          <2> 		call nxtvrech
  5905 000046CE E95A000000          <2> 		jmp prntvr2
  5906 000046D3 B13D                <2> 	echvar:	mov cl, '='
  5907 000046D5 43                  <2> 		inc ebx
  5908 000046D6 8A03                <2> 		mov al, [ebx]
  5909 000046D8 3C00                <2> 		cmp al, 0
  5910 000046DA 7431                <2> 		je nxtvrech
  5911 000046DC 3C3D                <2> 		cmp al, '='
  5912 000046DE 7422                <2> 		je nxtvrechb1
  5913 000046E0 8B35[4B300000]      <2> 		mov esi, [currentcommandloc]
  5914 000046E6 01FE                <2> 		add esi, edi
  5915 000046E8 E8A3E9FFFF          <2> 		call cndtest
  5916 000046ED 3C02                <2> 		cmp al, 2
  5917 000046EF 7438                <2> 		je prntvr
  5918 000046F1 3C01                <2> 		cmp al, 1
  5919 000046F3 7434                <2> 		je prntvr
  5920 000046F5 8B35[4B300000]      <2> 		mov esi, [currentcommandloc]
  5921 000046FB 01FE                <2> 		add esi, edi
  5922 000046FD E90B000000          <2> 		jmp nxtvrech
  5923                              <2> 	nxtvrechb1:
  5924 00004702 81EB02000000        <2> 		sub ebx, 2
  5925 00004708 E9C6FFFFFF          <2> 		jmp echvar
  5926 0000470D 8A03                <2> 	nxtvrech: mov al, [ebx]
  5927 0000470F 3C05                <2> 		cmp al, 5
  5928 00004711 740A                <2> 		je nxtvrec2
  5929 00004713 43                  <2> 		inc ebx
  5930 00004714 81FB[88C40300]      <2> 		cmp ebx, varend
  5931 0000471A 72F1                <2> 		jb nxtvrech
  5932 0000471C C3                  <2> 		ret
  5933 0000471D 43                  <2> 	nxtvrec2: inc ebx
  5934 0000471E 8A03                <2> 		mov al, [ebx]
  5935 00004720 3C04                <2> 		cmp al, 4
  5936 00004722 74AF                <2> 		je echvar
  5937 00004724 E9E4FFFFFF          <2> 		jmp nxtvrech
  5938 00004729 43                  <2> 	prntvr: inc ebx
  5939 0000472A 89DE                <2> 		mov esi, ebx
  5940 0000472C C3                  <2> 		ret
  5941 0000472D E83BD6FFFF          <2> 	prntvr2: call print
  5942 00004732 BE[DD890000]        <2> 		mov esi, line
  5943 00004737 E831D6FFFF          <2> 		call print
  5944 0000473C C3                  <2> 		ret 
  5945                              <1> %include 'source/programs/else.asm'
  5946 0000473D FF2C656C736500      <2> 	db 255,44,"else",0
  5947 00004744 31C0                <2> elsecmd:	xor eax, eax
  5948 00004746 3805[82B40300]      <2> 	cmp [BATCHISON], al
  5949 0000474C 0F847AF4FFFF        <2> 	je near notbatch
  5950 00004752 A0[19B40300]        <2> 	mov al, [IFON]
  5951 00004757 BE[1AB40300]        <2> 	mov esi, IFTRUE
  5952 0000475C 01C6                <2> 	add esi, eax
  5953 0000475E 8A06                <2> 	mov al, [esi]
  5954 00004760 3401                <2> 	xor al, 1
  5955 00004762 8806                <2> 	mov [esi], al
  5956 00004764 C3                  <2> 	ret 
  5957                              <1> %include 'source/programs/exit.asm'
  5958 00004765 FF2C6578697400      <2> db 255,44,"exit",0
  5959 0000476C 803D[18B40300]01    <2> 	cmp byte [ranboot], 1
  5960 00004773 0F849BE5FFFF        <2> 	je near returnfromexp
  5961 00004779 E97AE4FFFF          <2> 	jmp nobootfile
  5962                              <1> %include 'source/programs/fi.asm'
  5963 0000477E FF2C666900          <2> 	db 255,44,"fi",0
  5964 00004783 30C0                <2> 	xor al, al
  5965 00004785 3805[82B40300]      <2> 	cmp [BATCHISON], al
  5966 0000478B 0F843BF4FFFF        <2> 	je near notbatch
  5967 00004791 B001                <2> fi:	mov al, 1
  5968 00004793 2805[19B40300]      <2> 	sub [IFON],al
  5969 00004799 C3                  <2> 	ret 
  5970                              <1> %ifdef gui.included
  5971                              <1> 	%include 'source/programs/gui.asm'
  5972 0000479A FF2C67756900        <2> db 255,44,"gui",0
  5973                              <2> guiswitcher:
  5974 000047A0 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  5975 000047A6 81C604000000        <2> 	add esi, 4
  5976 000047AC 31C9                <2> 	xor ecx, ecx
  5977 000047AE 803E00              <2> 	cmp byte [esi], 0
  5978 000047B1 740A                <2> 	je .nomodepref
  5979 000047B3 E829ECFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5980 000047B8 E907000000          <2> 	jmp .modepref
  5981                              <2> .nomodepref:
  5982 000047BD 51                  <2> 	push ecx
  5983 000047BE E85FD6FFFF          <2> 	call clear
  5984 000047C3 59                  <2> 	pop ecx
  5985                              <2> .modepref:
  5986 000047C4 66C705[050D0000]-   <2> 	mov word [realmodeptr], guiswitch
  5987 000047CB [3454]              <2>
  5988 000047CD E821C4FFFF          <2> 	call realmode
  5989                              <2> guiswitchret:
  5990 000047D2 65803D[028A0000]01  <2> 	cmp byte [gs:guion], 1
  5991 000047DA 7401                <2> 	je .cont
  5992 000047DC C3                  <2> 	ret
  5993                              <2> .cont:
  5994 000047DD BF[26560000]        <2> 	mov edi, VBEMODEBLOCK
  5995                              <2> .loop:
  5996 000047E2 658B07              <2> 	mov eax, [gs:edi]
  5997 000047E5 8907                <2> 	mov [edi], eax
  5998 000047E7 47                  <2> 	inc edi
  5999 000047E8 81FF[2A590000]      <2> 	cmp edi, VBEEND
  6000 000047EE 72F2                <2> 	jb .loop
  6001 000047F0 A1[4E580000]        <2> 	mov eax, [physbaseptr]
  6002 000047F5 8B1D[4B020000]      <2> 	mov ebx, [basecache]
  6003 000047FB C1E304              <2> 	shl ebx, 4
  6004 000047FE 29D8                <2> 	sub eax, ebx
  6005 00004800 A3[4E580000]        <2> 	mov [physbaseptr], eax
  6006 00004805 C605[1A240000]00    <2> 	mov byte [termguion], 0
  6007 0000480C BE[9CCC0300]        <2> 	mov esi, graphicstable
  6008 00004811 30C0                <2> 	xor al, al
  6009                              <2> .clear:
  6010 00004813 8806                <2> 	mov [esi], al
  6011 00004815 46                  <2> 	inc esi
  6012 00004816 81FE[9CCE0300]      <2> 	cmp esi, graphicstableend
  6013 0000481C 72F5                <2> 	jb .clear
  6014 0000481E E8B32B0000          <2> 	call guisetup
  6015                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6016 00004823 668B15[38580000]    <2> 	mov dx, [resolutionx]
  6017 0000482A 668B0D[3A580000]    <2> 	mov cx, [resolutiony]
  6018 00004831 6689D3              <2> 	mov bx, dx
  6019 00004834 6689C8              <2> 	mov ax, cx
  6020 00004837 66D1EB              <2> 	shr bx, 1
  6021 0000483A 66D1E8              <2> 	shr ax, 1
  6022 0000483D 6689DA              <2> 	mov dx, bx
  6023 00004840 66D1EA              <2> 	shr dx, 1
  6024 00004843 6689C1              <2> 	mov cx, ax
  6025 00004846 66D1E9              <2> 	shr cx, 1
  6026 00004849 6601D3              <2> 	add bx, dx
  6027 0000484C 6601C8              <2> 	add ax, cx
  6028 0000484F 66D1E9              <2> 	shr cx, 1
  6029 00004852 66C1EB03            <2> 	shr bx, 3
  6030 00004856 66C1E303            <2> 	shl bx, 3
  6031 0000485A 66C1E804            <2> 	shr ax, 4
  6032 0000485E 66C1E004            <2> 	shl ax, 4
  6033 00004862 66891D[E3750000]    <2> 	mov [termwindow], bx
  6034 00004869 66A3[E5750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6035 0000486F BE[E3750000]        <2> 	mov esi, termwindow
  6036 00004874 31DB                <2> 	xor ebx, ebx
  6037 00004876 6631C0              <2> 	xor ax, ax
  6038 00004879 E8A6320000          <2> 	call showwindow
  6039 0000487E E8A8100000          <2> 	call cursorgui
  6040 00004883 E89AD5FFFF          <2> 	call clear
  6041 00004888 C3                  <2> 	ret
  6042                              <2> 	
  6043                              <1> %endif
  6044                              <1> %include 'source/programs/help.asm'
  6045 00004889 FF2C68656C7000      <2> db 255,44,"help",0
  6046                              <2> lscmd:	
  6047 00004890 B00D                <2> 		mov al, 13
  6048 00004892 E885DBFFFF          <2> 		call prcharq
  6049 00004897 BE[F7340000]        <2> 		mov esi, progstart
  6050 0000489C BB[34540000]        <2> 		mov ebx, progend
  6051 000048A1 BE[08AE0300]        <2> dir:	mov esi, fileindex
  6052 000048A6 8A06                <2> 	dirnxt:	mov al, [esi]
  6053 000048A8 30E4                <2> 		xor ah, ah
  6054 000048AA 3CFF                <2> 		cmp al, 255
  6055 000048AC 7418                <2> 		je dirfnd
  6056 000048AE 46                  <2> 		inc esi
  6057 000048AF 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6058 000048B5 7342                <2> 		jae dirdn
  6059 000048B7 E9EAFFFFFF          <2> 		jmp dirnxt
  6060                              <2> 	dirfnd3:
  6061 000048BC 46                  <2> 		inc esi
  6062 000048BD 81FE[08B20300]      <2> 		cmp esi, fileindexend
  6063 000048C3 76E1                <2> 		jbe dirnxt
  6064 000048C5 4E                  <2> 		dec esi
  6065 000048C6 46                  <2> 	dirfnd:	inc esi
  6066 000048C7 8A06                <2> 		mov al, [esi]
  6067 000048C9 30E4                <2> 		xor ah, ah
  6068 000048CB 3C2C                <2> 		cmp al, 44
  6069 000048CD 740E                <2> 		je dirfnd2
  6070 000048CF 46                  <2> 		inc esi
  6071 000048D0 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6072 000048D6 7321                <2> 		jae dirdn
  6073 000048D8 E9C9FFFFFF          <2> 		jmp dirnxt
  6074 000048DD 46                  <2> 	dirfnd2: inc esi
  6075 000048DE E866D4FFFF          <2> 		call printquiet
  6076 000048E3 56                  <2> 		push esi
  6077 000048E4 B009                <2> 		mov al, 9
  6078 000048E6 E831DBFFFF          <2> 		call prcharq
  6079 000048EB 5E                  <2> 		pop esi
  6080 000048EC 81FE[08B20300]      <2> 		cmp esi,  fileindexend
  6081 000048F2 7305                <2> 		jae dirdn
  6082 000048F4 E9ADFFFFFF          <2> 		jmp dirnxt
  6083 000048F9 BE[DD890000]        <2> 	dirdn:	mov esi, line
  6084 000048FE E86AD4FFFF          <2> 			call print
  6085 00004903 C3                  <2> 			ret
  6086 00004904 00                  <2> currentdir db 0
  6087                              <1> %include 'source/programs/if.asm'
  6088 00004905 FF2C696600          <2> 	db 255,44,"if",0
  6089 0000490A 30C0                <2> ifcmd:	xor al, al
  6090 0000490C 3805[82B40300]      <2> 	cmp [BATCHISON], al
  6091 00004912 0F84B4F2FFFF        <2> 	je near notbatch
  6092 00004918 8B1D[4B300000]      <2> 	mov ebx, [currentcommandloc]
  6093 0000491E 81C303000000        <2> 	add ebx, 3
  6094 00004924 89DE                <2> 	mov esi, ebx
  6095 00004926 8A06                <2> chkeqsn: mov al, [esi]
  6096 00004928 3C00                <2> 	cmp al, 0
  6097 0000492A 0F849CF2FFFF        <2> 	je near notbatch
  6098 00004930 3C3D                <2> 	cmp al, '='
  6099 00004932 0F8406000000        <2> 	je near chkeqdn
  6100 00004938 46                  <2> 	inc esi
  6101 00004939 E9E8FFFFFF          <2> 	jmp chkeqsn
  6102 0000493E B000                <2> chkeqdn: mov al, 0 
  6103 00004940 8806                <2> 	mov [esi], al
  6104 00004942 46                  <2> 	inc esi
  6105 00004943 E807E7FFFF          <2> 	call tester
  6106 00004948 3C01                <2> 	cmp al, 1
  6107 0000494A 0F8405000000        <2> 	je near trueif
  6108 00004950 E91C000000          <2> 	jmp falseif
  6109 00004955 31C0                <2> trueif:	xor eax, eax
  6110 00004957 A0[19B40300]        <2> 	mov al, [IFON]
  6111 0000495C FEC0                <2> 	inc al
  6112 0000495E A2[19B40300]        <2> 	mov [IFON], al
  6113 00004963 30E4                <2> 	xor ah, ah
  6114 00004965 BE[1AB40300]        <2> 	mov esi, IFTRUE
  6115 0000496A 01C6                <2> 	add esi, eax
  6116 0000496C B401                <2> 	mov ah, 1
  6117 0000496E 8826                <2> 	mov [esi], ah
  6118 00004970 C3                  <2> 	ret 
  6119 00004971 31C0                <2> falseif: xor eax, eax
  6120 00004973 A0[19B40300]        <2> 	mov al, [IFON]
  6121 00004978 FEC0                <2> 	inc al
  6122 0000497A A2[19B40300]        <2> 	mov [IFON], al
  6123 0000497F 30E4                <2> 	xor ah, ah
  6124 00004981 BE[1AB40300]        <2> 	mov esi, IFTRUE
  6125 00004986 01C6                <2> 	add esi, eax
  6126 00004988 30E4                <2> 	xor ah, ah
  6127 0000498A 8826                <2> 	mov [esi], ah
  6128 0000498C C3                  <2> 	ret 
  6129                              <1> %ifdef network.included
  6130                              <1> 	%include 'source/programs/ipconfig.asm'
  6131                              <1> %endif
  6132                              <1> %include 'source/programs/keycode.asm'
  6133 0000498D FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6134 00004996 00                  <2>
  6135                              <2> keycode:
  6136 00004997 66C705[ED230000]00- <2> 	mov word [trans], 0
  6137 0000499F 00                  <2>
  6138 000049A0 C605[B76A0000]00    <2> 	mov byte [threadson], 0
  6139                              <2> %ifdef io.serial
  6140                              <2> .noserial:
  6141                              <2> 	hlt
  6142                              <2> 	mov dx, [serial.address]
  6143                              <2> 	in al, dx
  6144                              <2> 	cmp al, 0
  6145                              <2> 	je .noserial
  6146                              <2> 	mov cl, al
  6147                              <2> 	call showhexsmall
  6148                              <2> 	cmp al, 0x1B
  6149                              <2> 	jne .noserial
  6150                              <2> 	in al, dx
  6151                              <2> 	mov cl, al
  6152                              <2> 	call showhexsmall
  6153                              <2> 	cmp cl, 0x5B
  6154                              <2> 	je .noserial
  6155                              <2> 	ret
  6156                              <2> %else
  6157 000049A7 E89B150000          <2> 	call getkey
  6158 000049AC 31C0                <2> 	xor eax, eax
  6159 000049AE 31C9                <2> 	xor ecx, ecx
  6160 000049B0 8A0D[235F0000]      <2> 	mov cl, [specialkey]
  6161 000049B6 80F900              <2> 	cmp cl, 0
  6162 000049B9 0F8405000000        <2> 	je near .nospecialkeycode
  6163 000049BF E8BCE8FFFF          <2> 	call showhexsmall
  6164                              <2> .nospecialkeycode:
  6165 000049C4 668B0D[EB230000]    <2> 	mov cx, [lastkey + 2]
  6166 000049CB E8B0E8FFFF          <2> 	call showhexsmall
  6167 000049D0 80F901              <2> 	cmp cl, 1
  6168 000049D3 75C2                <2> 	jne keycode
  6169 000049D5 C3                  <2> 	ret
  6170                              <2> %endif
  6171                              <1> %ifdef gui.included
  6172                              <1> 	%include 'source/programs/line.asm'
  6173 000049D6 FF2C6C696E6500      <2> db 255,44,"line",0
  6174                              <2> linetester:
  6175 000049DD 803D[028A0000]00    <2> 	cmp byte [guion], 0
  6176 000049E4 0F841B000000        <2> 	je near .done
  6177 000049EA 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6178 000049F1 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6179 000049F6 E868000000          <2> 	call .circletest
  6180 000049FB BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6181 00004A00 E801000000          <2> 	call .linetest
  6182                              <2> .done:
  6183 00004A05 C3                  <2> 	ret
  6184                              <2> 
  6185                              <2> .linetest:
  6186 00004A06 53                  <2> 	push ebx
  6187 00004A07 E8D6000000          <2> 	call .stime
  6188 00004A0C 5B                  <2> 	pop ebx
  6189 00004A0D 31FF                <2> 	xor edi, edi
  6190                              <2> .ltlp:
  6191 00004A0F 53                  <2> 	push ebx
  6192 00004A10 E81C010000          <2> 	call .st
  6193 00004A15 66F7D6              <2> 	not si
  6194 00004A18 E814010000          <2> 	call .st
  6195 00004A1D 5B                  <2> 	pop ebx
  6196 00004A1E 66F7D6              <2> 	not si
  6197 00004A21 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6198 00004A28 4B                  <2> 	dec ebx
  6199 00004A29 81FB00000000        <2> 	cmp ebx, 0
  6200 00004A2F 77DE                <2> 	ja .ltlp
  6201 00004A31 E8C4000000          <2> 	call .etime
  6202 00004A36 53                  <2> 	push ebx	
  6203 00004A37 57                  <2> 	push edi
  6204 00004A38 E85B270000          <2> 	call guiclear
  6205 00004A3D E8E9270000          <2> 	call reloadallgraphics
  6206 00004A42 59                  <2> 	pop ecx
  6207 00004A43 E807E9FFFF          <2> 	call showdec
  6208 00004A48 BE[734B0000]        <2> 	mov esi, .msg
  6209 00004A4D E81BD3FFFF          <2> 	call print
  6210 00004A52 59                  <2> 	pop ecx
  6211 00004A53 E8F7E8FFFF          <2> 	call showdec
  6212 00004A58 BE[9F4B0000]        <2> 	mov esi, .msgtime
  6213 00004A5D E80BD3FFFF          <2> 	call print
  6214 00004A62 C3                  <2> 	ret
  6215                              <2> 	
  6216                              <2> .circletest:
  6217 00004A63 53                  <2> 	push ebx
  6218 00004A64 E879000000          <2> 	call .stime
  6219 00004A69 5B                  <2> 	pop ebx
  6220 00004A6A 31FF                <2> 	xor edi, edi
  6221                              <2> .ctlp:
  6222 00004A6C 53                  <2> 	push ebx
  6223 00004A6D 668B0D[3A580000]    <2> 	mov cx, [resolutiony]
  6224 00004A74 66D1E9              <2> 	shr cx, 1
  6225 00004A77 668B15[38580000]    <2> 	mov dx, [resolutionx]
  6226 00004A7E 66D1EA              <2> 	shr dx, 1
  6227 00004A81 6689C8              <2> 	mov ax, cx
  6228                              <2> .circle:
  6229 00004A84 60                  <2> 	pusha
  6230 00004A85 E827210000          <2> 	call drawcircle
  6231 00004A8A 61                  <2> 	popa
  6232 00004A8B 6648                <2> 	dec ax
  6233 00004A8D 47                  <2> 	inc edi
  6234 00004A8E 663D0100            <2> 	cmp ax, 1
  6235 00004A92 77F0                <2> 	ja .circle
  6236 00004A94 66F7D6              <2> 	not si
  6237                              <2> .circle2:
  6238 00004A97 60                  <2> 	pusha
  6239 00004A98 E814210000          <2> 	call drawcircle
  6240 00004A9D 61                  <2> 	popa
  6241 00004A9E 47                  <2> 	inc edi
  6242 00004A9F 6640                <2> 	inc ax
  6243 00004AA1 6639C8              <2> 	cmp ax, cx
  6244 00004AA4 76F1                <2> 	jbe .circle2
  6245 00004AA6 5B                  <2> 	pop ebx
  6246 00004AA7 66F7D6              <2> 	not si
  6247 00004AAA 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6248 00004AB1 4B                  <2> 	dec ebx
  6249 00004AB2 81FB00000000        <2> 	cmp ebx, 0
  6250 00004AB8 77B2                <2> 	ja .ctlp
  6251 00004ABA E83B000000          <2> 	call .etime
  6252 00004ABF 53                  <2> 	push ebx
  6253 00004AC0 57                  <2> 	push edi
  6254 00004AC1 59                  <2> 	pop ecx
  6255 00004AC2 E888E8FFFF          <2> 	call showdec
  6256 00004AC7 BE[884B0000]        <2> 	mov esi, .msgcircle
  6257 00004ACC E89CD2FFFF          <2> 	call print
  6258 00004AD1 59                  <2> 	pop ecx
  6259 00004AD2 E878E8FFFF          <2> 	call showdec
  6260 00004AD7 BE[9F4B0000]        <2> 	mov esi, .msgtime
  6261 00004ADC E88CD2FFFF          <2> 	call print
  6262 00004AE1 C3                  <2> 	ret
  6263                              <2> 	
  6264                              <2> .stime:
  6265 00004AE2 F4                  <2> 	hlt
  6266 00004AE3 A1[6B020000]        <2> 	mov eax, [timeseconds]
  6267 00004AE8 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6268 00004AEE A3[AE4B0000]        <2> 	mov [.time], eax
  6269 00004AF3 891D[B24B0000]      <2> 	mov [.time + 4], ebx
  6270 00004AF9 C3                  <2> 	ret
  6271                              <2> 	
  6272                              <2> .etime:
  6273 00004AFA A1[6B020000]        <2> 	mov eax, [timeseconds]
  6274 00004AFF 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6275 00004B05 8B0D[AE4B0000]      <2> 	mov ecx, [.time]
  6276 00004B0B 8B15[B24B0000]      <2> 	mov edx, [.time + 4]
  6277 00004B11 C1EA0A              <2> 	shr edx, 10
  6278 00004B14 C1EB0A              <2> 	shr ebx, 10
  6279 00004B17 29C8                <2> 	sub eax, ecx
  6280 00004B19 3D00000000          <2> 	cmp eax, 0
  6281 00004B1E 740E                <2> 	je .notclp
  6282                              <2> .tclp:
  6283 00004B20 81C340420F00        <2> 	add ebx, 1000000
  6284 00004B26 48                  <2> 	dec eax
  6285 00004B27 3D00000000          <2> 	cmp eax, 0
  6286 00004B2C 75F2                <2> 	jne .tclp
  6287                              <2> .notclp:
  6288 00004B2E 29D3                <2> 	sub ebx, edx
  6289 00004B30 C3                  <2> 	ret
  6290                              <2> 	
  6291                              <2> .st:
  6292 00004B31 6631C0              <2> 	xor ax, ax
  6293 00004B34 6631DB              <2> 	xor bx, bx
  6294 00004B37 668B0D[3A580000]    <2> 	mov cx, [resolutiony]
  6295 00004B3E 668B15[38580000]    <2> 	mov dx, [resolutionx]
  6296                              <2> .lp:
  6297 00004B45 60                  <2> 	pusha
  6298 00004B46 E821250000          <2> 	call drawline
  6299 00004B4B 61                  <2> 	popa
  6300                              <2> .noswitch:
  6301 00004B4C 47                  <2> 	inc edi
  6302 00004B4D 6643                <2> 	inc bx
  6303 00004B4F 664A                <2> 	dec dx
  6304 00004B51 6681FB0000          <2> 	cmp bx, 0
  6305 00004B56 74ED                <2> 	je .lp
  6306 00004B58 6681FA0000          <2> 	cmp dx, 0
  6307 00004B5D 75E6                <2> 	jne .lp
  6308                              <2> .lp2:
  6309 00004B5F 60                  <2> 	pusha
  6310 00004B60 E807250000          <2> 	call drawline
  6311 00004B65 61                  <2> 	popa
  6312 00004B66 47                  <2> 	inc edi
  6313 00004B67 6640                <2> 	inc ax
  6314 00004B69 6649                <2> 	dec cx
  6315 00004B6B 6681F90000          <2> 	cmp cx, 0
  6316 00004B70 75ED                <2> 	jne .lp2
  6317 00004B72 C3                  <2> 	ret
  6318                              <2> 	
  6319 00004B73 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6320 00004B7C 6520647261776E2069- <2>
  6321 00004B85 6E2000              <2>
  6322 00004B88 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6323 00004B91 65726520647261776E- <2>
  6324 00004B9A 20696E2000          <2>
  6325 00004B9F 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6326 00004BA8 6E64732E0A00        <2>
  6327 00004BAE 0000000000000000    <2> .time dd 0,0	
  6328                              <1> %endif
  6329                              <1> %include 'source/programs/logout.asm'
  6330 00004BB6 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6331 00004BBF E9F0DFFFFF          <2> 	jmp os
  6332                              <1> %include 'source/programs/loop.asm'
  6333 00004BC4 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6334 00004BCB 803D[83B40300]00    <2> 	cmp byte [LOOPON], 0
  6335 00004BD2 0F8501000000        <2> 	jne near filoop
  6336 00004BD8 C3                  <2> 	ret
  6337 00004BD9 8B35[84B40300]      <2> filoop: mov esi, [LOOPPOS]
  6338 00004BDF FE0D[19B40300]      <2> 	dec byte [IFON]
  6339 00004BE5 C605[83B40300]00    <2> 	mov byte [LOOPON], 0
  6340 00004BEC 8935[7EB40300]      <2> 	mov [BATCHPOS], esi
  6341 00004BF2 8935[F13A0000]      <2> 	mov [batchedi], esi
  6342 00004BF8 C3                  <2> 	ret 
  6343                              <1> %ifdef disk.none
  6344                              <1> %else
  6345                              <1> 	%include 'source/programs/ls.asm'
  6346 00004BF9 FF2C6C7300          <2> db 255,44,"ls",0
  6347 00004BFE BE[5C8C0300]        <2> 		mov esi, diskfileindex
  6348                              <2> 	diskindexdir:
  6349 00004C03 803E5F              <2> 		cmp byte [esi], '_'
  6350 00004C06 7440                <2> 		je nextdiskindexdir
  6351 00004C08 E83CD1FFFF          <2> 		call printquiet
  6352 00004C0D 56                  <2> 		push esi
  6353 00004C0E BE[684C0000]        <2> 		mov esi, disktab
  6354 00004C13 E831D1FFFF          <2> 		call printquiet
  6355 00004C18 5E                  <2> 		pop esi
  6356 00004C19 8B4E05              <2> 		mov ecx, [esi + 5]
  6357 00004C1C C605[7F320000]05    <2> 		mov byte [firsthexshown], 5
  6358 00004C23 E827E7FFFF          <2> 		call showdec
  6359 00004C28 56                  <2> 		push esi
  6360 00004C29 BE[DD890000]        <2> 		mov esi, line
  6361 00004C2E E816D1FFFF          <2> 		call printquiet
  6362 00004C33 5E                  <2> 		pop esi
  6363 00004C34 81C609000000        <2> 		add esi, 9
  6364 00004C3A 81FE[528D0300]      <2> 		cmp esi, enddiskfileindex
  6365 00004C40 72C1                <2> 		jb diskindexdir
  6366 00004C42 E8DCDCFFFF          <2> 		call termcopy
  6367 00004C47 C3                  <2> 		ret
  6368                              <2> 	nextdiskindexdir:
  6369 00004C48 46                  <2> 		inc esi
  6370 00004C49 803E00              <2> 		cmp byte [esi], 0
  6371 00004C4C 75FA                <2> 		jne nextdiskindexdir
  6372 00004C4E 81C609000000        <2> 		add esi, 9
  6373 00004C54 81FE[528D0300]      <2> 		cmp esi, enddiskfileindex
  6374 00004C5A 72A7                <2> 		jb diskindexdir
  6375 00004C5C E8C2DCFFFF          <2> 		call termcopy
  6376 00004C61 C3                  <2> 		ret
  6377                              <2> 		
  6378 00004C62 4469736B2000        <2> 		diskmsg db "Disk ",0
  6379 00004C68 0D09090900          <2> 		disktab db 13,9,9,9,0
  6380                              <1> %endif
  6381                              <1> %include 'source/programs/memory.asm'
  6382 00004C6D FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6383 00004C76 BE[188A0000]        <2> 	mov esi, memlistbuf
  6384 00004C7B 31FF                <2> 	xor edi, edi
  6385 00004C7D 668B3D[588C0000]    <2> 	mov di, [memlistend]
  6386 00004C84 01F7                <2> 	add edi, esi
  6387                              <2> printmemmap:
  6388 00004C86 8B0E                <2> 	mov ecx, [esi]
  6389 00004C88 E807E6FFFF          <2> 	call showhex
  6390 00004C8D 81C608000000        <2> 	add esi, 8
  6391 00004C93 8B0E                <2> 	mov ecx, [esi]
  6392 00004C95 E8FAE5FFFF          <2> 	call showhex
  6393 00004C9A 81C608000000        <2> 	add esi, 8
  6394 00004CA0 8B0E                <2> 	mov ecx, [esi]
  6395 00004CA2 E8EDE5FFFF          <2> 	call showhex
  6396 00004CA7 81C608000000        <2> 	add esi, 8
  6397 00004CAD 57                  <2> 	push edi
  6398 00004CAE 56                  <2> 	push esi
  6399 00004CAF E8B4D0FFFF          <2> 	call printline
  6400 00004CB4 5E                  <2> 	pop esi
  6401 00004CB5 5F                  <2> 	pop edi
  6402 00004CB6 39FE                <2> 	cmp esi, edi
  6403 00004CB8 72CC                <2> 	jb printmemmap
  6404 00004CBA C3                  <2> 	ret
  6405                              <2> 	
  6406                              <1> %include 'source/programs/pci.asm'
  6407 00004CBB FF2C70636900        <2> db 255,44,"pci",0
  6408 00004CC1 E8F9180000          <2> 	call pcidump
  6409 00004CC6 C3                  <2> 	ret 
  6410                              <1> %ifdef network.included
  6411                              <1> 	%include 'source/programs/ping.asm'
  6412                              <1> %endif
  6413                              <1> %ifdef disk.none
  6414                              <1> %else
  6415                              <1> 	%include 'source/programs/play.asm'
  6416 00004CC7 FF2C706C61796100    <2> db 255,44,"playa",0
  6417 00004CCF 8B3D[4B300000]      <2> 	mov edi, [currentcommandloc]
  6418 00004CD5 81C706000000        <2> 	add edi, 6
  6419 00004CDB E835000000          <2> 	call playasync
  6420 00004CE0 C3                  <2> 	ret
  6421 00004CE1 FF2C706C61792000    <2> db 255,44,"play ",0
  6422                              <2> play:
  6423 00004CE9 8B3D[4B300000]      <2> 	mov edi, [currentcommandloc]
  6424 00004CEF 81C705000000        <2> 	add edi, 5
  6425 00004CF5 E81B000000          <2> 	call playasync
  6426                              <2> .waitforsound:
  6427 00004CFA F4                  <2> 	hlt
  6428                              <2> %ifdef sound.included
  6429 00004CFB A1[0D5F0000]        <2> 	mov eax, [Length0]
  6430 00004D00 660B05[115F0000]    <2> 	or ax, [Length1]
  6431                              <2> %endif
  6432 00004D07 0A05[73020000]      <2> 	or al, [soundon]
  6433 00004D0D 3D00000000          <2> 	cmp eax, 0
  6434 00004D12 75E6                <2> 	jne .waitforsound
  6435 00004D14 C3                  <2> 	ret
  6436                              <2> playasync:
  6437 00004D15 BE0000C000          <2> 	mov esi, 0xC00000
  6438 00004D1A E8D51B0000          <2> 	call loadfile
  6439 00004D1F 81FA94010000        <2> 	cmp edx, 404
  6440 00004D25 743F                <2> 	je nosoundfound
  6441 00004D27 BB0000C000          <2> 	mov ebx, 0xC00000
  6442 00004D2C 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6443 00004D33 0F843F010000        <2> 	je near wave_player
  6444 00004D39 66813B534E          <2> 	cmp word [ebx], "SN"
  6445 00004D3E 7526                <2> 	jne nosoundfound
  6446 00004D40 81C306000000        <2> 	add ebx, 6
  6447 00004D46 891D[76020000]      <2> 	mov [soundpos], ebx
  6448 00004D4C 035BFC              <2> 	add ebx, [ebx - 4]
  6449 00004D4F 891D[7A020000]      <2> 	mov [soundendpos], ebx
  6450 00004D55 66C705[74020000]00- <2> 	mov word [soundrepititions], 0
  6451 00004D5D 00                  <2>
  6452 00004D5E C605[73020000]01    <2> 	mov byte [soundon], 1
  6453 00004D65 C3                  <2> 	ret
  6454                              <2> nosoundfound:
  6455 00004D66 BE[8C4D0000]        <2> 	mov esi, notfoundsound
  6456 00004D6B E8FDCFFFFF          <2> 	call print
  6457 00004D70 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  6458 00004D76 81C605000000        <2> 	add esi, 5
  6459 00004D7C E8ECCFFFFF          <2> 	call print
  6460 00004D81 BE[AC890000]        <2> 	mov esi, notfound2
  6461 00004D86 E8E2CFFFFF          <2> 	call print
  6462 00004D8B C3                  <2> 	ret
  6463 00004D8C 706C61793A2000      <2> notfoundsound db "play: ",0
  6464                              <2> 
  6465                              <2> %ifdef sound.included
  6466                              <2> sbplay:
  6467 00004D93 BE0000C000          <2> 		mov esi, 0xC00000
  6468 00004D98 89F3                <2> 		mov ebx, esi
  6469 00004D9A 81C62C000000        <2> 		add esi, WAVSTART
  6470 00004DA0 29F7                <2> 		sub edi, esi
  6471 00004DA2 66893D[115F0000]    <2> 		mov [Length1], di
  6472 00004DA9 C1EF0F              <2> 		shr edi, 15
  6473 00004DAC 893D[0D5F0000]      <2> 		mov [Length0], edi
  6474 00004DB2 8B4B18              <2> 		mov ecx, [ebx + 24]
  6475 00004DB5 890D[1E5F0000]      <2> 		mov [Freq], ecx
  6476 00004DBB 31C0                <2> 		xor eax, eax
  6477 00004DBD BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6478 00004DC2 81C22C000000        <2> 		add edx, WAVSTART
  6479 00004DC8 01D0                <2> 		add	eax, edx
  6480 00004DCA 89C6                <2> 		mov esi, eax
  6481 00004DCC 31C9                <2> 		xor ecx, ecx
  6482 00004DCE 31DB                <2> 		xor ebx, ebx
  6483 00004DD0 66891D[1B5F0000]    <2> 		mov [SegLoc], bx
  6484 00004DD7 81C300000800        <2> 		add ebx, 0x80000
  6485 00004DDD 66B9FFFF            <2> 		mov cx, 0xFFFF
  6486 00004DE1 6681FF0000          <2> 		cmp di, 0
  6487 00004DE6 7520                <2> 		jne .autoinit
  6488 00004DE8 668B0D[115F0000]    <2> 		mov cx, [Length1]
  6489 00004DEF C605[0C5F0000]01    <2> 		mov byte [OddLength], 1
  6490 00004DF6 6681F90080          <2> 		cmp cx, 32768
  6491 00004DFB 730B                <2> 		jae .autoinit
  6492 00004DFD C605[0C5F0000]00    <2> 		mov byte [OddLength], 0
  6493 00004E04 66D1E1              <2> 		shl cx, 1
  6494 00004E07 47                  <2> 		inc edi
  6495                              <2> .autoinit:
  6496 00004E08 4F                  <2> 		dec edi
  6497 00004E09 893D[0D5F0000]      <2> 		mov [Length0], edi
  6498 00004E0F 66890D[115F0000]    <2> 		mov [Length1], cx
  6499 00004E16 66D1E9              <2> 		shr cx, 1
  6500 00004E19 6641                <2> 		inc cx
  6501 00004E1B 01C8                <2> 		add eax, ecx
  6502 00004E1D A3[135F0000]        <2> 		mov [NextMemLoc], eax
  6503 00004E22 8935[175F0000]      <2> 		mov	[MemLoc], esi
  6504 00004E28 E8850F0000          <2> 		call DMACopy
  6505 00004E2D 31DB                <2> 		xor ebx, ebx
  6506 00004E2F 668B1D[1B5F0000]    <2> 		mov bx, [SegLoc]
  6507 00004E36 31C9                <2> 		xor ecx, ecx
  6508 00004E38 668B0D[115F0000]    <2> 		mov cx, [Length1]
  6509 00004E3F 66D1E9              <2> 		shr cx, 1
  6510 00004E42 6641                <2> 		inc cx
  6511 00004E44 01CB                <2> 		add ebx, ecx
  6512 00004E46 66891D[1B5F0000]    <2> 		mov [SegLoc], bx
  6513 00004E4D 81C300000800        <2> 		add ebx, 0x80000
  6514 00004E53 8B35[135F0000]      <2> 		mov esi, [NextMemLoc]
  6515 00004E59 89F0                <2> 		mov eax, esi
  6516 00004E5B 01C8                <2> 		add eax, ecx
  6517 00004E5D A3[135F0000]        <2> 		mov [NextMemLoc], eax
  6518 00004E62 8935[175F0000]      <2> 		mov	[MemLoc], esi
  6519 00004E68 E8450F0000          <2> 		call DMACopy
  6520 00004E6D E8630F0000          <2> 		call DMAPlay
  6521 00004E72 E8ED0F0000          <2> 		call PlayDSP
  6522 00004E77 C3                  <2> 		ret
  6523                              <2> WAVSTART equ 44
  6524                              <2> wave_player:
  6525 00004E78 803D[225F0000]01    <2> 	cmp byte [SoundBlaster], 1
  6526 00004E7F 0F840EFFFFFF        <2> 	je near sbplay
  6527 00004E85 BE[904E0000]        <2> 	mov esi, nosoundblaster
  6528 00004E8A E8DECEFFFF          <2> 	call print
  6529 00004E8F C3                  <2> 	ret
  6530                              <2> %else
  6531                              <2> 	wave_player:
  6532                              <2> 		mov esi, nosoundblaster
  6533                              <2> 		call print
  6534                              <2> 		ret
  6535                              <2> %endif
  6536 00004E90 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6537 00004E99 426C61737465722064- <2>
  6538 00004EA2 657465637465642E0A- <2>
  6539 00004EAB 00                  <2>
  6540                              <1> %endif
  6541                              <1> %include 'source/programs/pwd.asm'
  6542 00004EAC FF2C70776400        <2> db 255,44,"pwd",0
  6543 00004EB2 BE[14B20300]        <2> 	mov esi, currentfolder
  6544 00004EB7 E88DCEFFFF          <2> 	call printquiet
  6545 00004EBC E8A7CEFFFF          <2> 	call printline
  6546 00004EC1 C3                  <2> 	ret
  6547                              <2> 	
  6548                              <1> %include 'source/programs/reboot.asm'
  6549 00004EC2 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6550 00004ECB 0F011D[D54E0000]    <2> 		lidt [idtreboot]
  6551 00004ED2 CD00                <2> 		int 0
  6552 00004ED4 F4                  <2> 		hlt
  6553                              <2> 	
  6554 00004ED5 0000                <2> 	idtreboot dw 0
  6555 00004ED7 00000000            <2> 			  dd 0
  6556                              <2> 
  6557                              <2> 	coldboot:
  6558 00004EDB 66B84000            <2> 		MOV AX, 0040h
  6559 00004EDF 8EC0                <2> 		MOV ES, AX
  6560 00004EE1 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6561 00004EEA 00                  <2>
  6562 00004EEB EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6563 00004EF2 CF                  <2> 		IRET
  6564                              <2> 
  6565                              <2> 	warmboot:
  6566 00004EF3 66B84000            <2> 		MOV AX, 0040h
  6567 00004EF7 8EC0                <2> 		MOV ES, AX
  6568 00004EF9 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6569 00004F02 12                  <2>
  6570 00004F03 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6571 00004F0A CF                  <2> 		IRET
  6572                              <2> 		
  6573                              <1> %include 'source/programs/reg.asm'
  6574 00004F0B FF2C72656700        <2> db 255,44,"reg",0
  6575 00004F11 CD03                <2> 	int 3
  6576 00004F13 C3                  <2> 	ret 
  6577                              <1> %ifdef disk.none
  6578                              <1> %else
  6579                              <1> 	%include 'source/programs/show.asm'
  6580 00004F14 FF2C73686F7700      <2> db 255,44,"show",0
  6581                              <2> showprog:
  6582 00004F1B 8B3D[4B300000]      <2> 		mov edi, [currentcommandloc]
  6583 00004F21 81C705000000        <2> 		add edi, 5
  6584 00004F27 BE00004000          <2> 		mov esi, 0x400000
  6585 00004F2C 803F26              <2> 		cmp byte [edi], '&'
  6586 00004F2F 741B                <2> 		je .nullfile
  6587 00004F31 BE00008000          <2> 		mov esi, 0x800000
  6588 00004F36 E8B9190000          <2> 		call loadfile
  6589 00004F3B 81FA94010000        <2> 		cmp edx, 404
  6590 00004F41 0F847E000000        <2> 		je near filenotfound
  6591 00004F47 BE00008000          <2> 		mov esi, 0x800000
  6592                              <2> .nullfile:
  6593                              <2> %ifdef gui.included
  6594 00004F4C 66813E424D          <2> 		cmp word [esi], "BM"
  6595 00004F51 740B                <2> 		je bmpfound
  6596                              <2> %endif
  6597 00004F53 E815CEFFFF          <2> 		call print
  6598 00004F58 E80BCEFFFF          <2> 		call printline
  6599 00004F5D C3                  <2> 		ret
  6600                              <2> %ifdef gui.included
  6601                              <2> bmpfound:
  6602 00004F5E 803D[028A0000]00    <2> 		cmp byte [guion], 0
  6603 00004F65 0F8428000000        <2> 		je near noguibmp
  6604 00004F6B BE00008000          <2> 		mov esi, 0x800000
  6605 00004F70 31C9                <2> 		xor ecx, ecx
  6606 00004F72 31D2                <2> 		xor edx, edx
  6607 00004F74 31C0                <2> 		xor eax, eax
  6608 00004F76 31DB                <2> 		xor ebx, ebx
  6609 00004F78 E8621B0000          <2> 		call showbmp
  6610 00004F7D 30C0                <2> 		xor al, al
  6611 00004F7F B405                <2> 		mov ah, 5
  6612 00004F81 CD30                <2> 		int 30h
  6613 00004F83 E810220000          <2> 		call guiclear
  6614 00004F88 E8AB1E0000          <2> 		call clearmousecursor
  6615 00004F8D E899220000          <2> 		call reloadallgraphics
  6616 00004F92 C3                  <2> 		ret
  6617                              <2> noguibmp:
  6618 00004F93 BE[9E4F0000]        <2> 		mov esi, warnguimsg
  6619 00004F98 E8D0CDFFFF          <2> 		call print
  6620 00004F9D C3                  <2> 		ret
  6621 00004F9E 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6622 00004FA7 6E6F7420626520646F- <2>
  6623 00004FB0 6E6520776974686F75- <2>
  6624 00004FB9 742074686520475549- <2>
  6625 00004FC2 2E0A00              <2>
  6626                              <2> %endif
  6627                              <2> 
  6628                              <2> filenotfound:
  6629 00004FC5 BE[F84F0000]        <2> 		mov esi, filenf
  6630 00004FCA E89ECDFFFF          <2> 		call print
  6631 00004FCF 8B35[4B300000]      <2> 		mov esi, [currentcommandloc]
  6632                              <2> findfilenotfoundzero:
  6633 00004FD5 8A06                <2> 		mov al, [esi]
  6634 00004FD7 46                  <2> 		inc esi
  6635 00004FD8 3C00                <2> 		cmp al, 0
  6636 00004FDA 7411                <2> 		je nofilenamenotfound
  6637 00004FDC 81FE[88CC0300]      <2> 		cmp esi, buftxtend
  6638 00004FE2 7309                <2> 		jae nofilenamenotfound
  6639 00004FE4 3C20                <2> 		cmp al, " "
  6640 00004FE6 75ED                <2> 		jne findfilenotfoundzero
  6641 00004FE8 E880CDFFFF          <2> 		call print
  6642                              <2> nofilenamenotfound:
  6643 00004FED BE[03500000]        <2> 		mov esi, filenf2
  6644 00004FF2 E876CDFFFF          <2> 		call print
  6645 00004FF7 C3                  <2> 		ret
  6646 00004FF8 5468652066696C6520- <2> filenf db "The file ",34,0
  6647 00005001 2200                <2>
  6648 00005003 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6649 0000500C 6F7420626520666F75- <2>
  6650 00005015 6E642E0A00          <2>
  6651                              <1> %endif
  6652                              <1> %include 'source/programs/shush.asm'
  6653 0000501A FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6654                              <2> shushprog:
  6655                              <2> %ifdef gui.included
  6656 00005022 803D[028A0000]00    <2> 	cmp byte [guion], 0
  6657 00005029 0F84B9000000        <2> 	je near .noswitchsize
  6658 0000502F 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  6659 00005035 81C606000000        <2> 	add esi, 6
  6660 0000503B 56                  <2> 	push esi
  6661 0000503C 4E                  <2> 	dec esi
  6662                              <2> .findspace:
  6663 0000503D 46                  <2> 	inc esi
  6664 0000503E 8A06                <2> 	mov al, [esi]
  6665 00005040 3C00                <2> 	cmp al, 0
  6666 00005042 0F84A0000000        <2> 	je near .noswitchsize
  6667 00005048 3C58                <2> 	cmp al, "X"
  6668 0000504A 7408                <2> 	je .donefind
  6669 0000504C 3C78                <2> 	cmp al, "x"
  6670 0000504E 7404                <2> 	je .donefind
  6671 00005050 3C20                <2> 	cmp al, " "
  6672 00005052 75E9                <2> 	jne .findspace
  6673                              <2> .donefind:
  6674 00005054 30C0                <2> 	xor al, al
  6675 00005056 8806                <2> 	mov [esi], al
  6676 00005058 46                  <2> 	inc esi
  6677 00005059 89F7                <2> 	mov edi, esi
  6678 0000505B E8CDE3FFFF          <2> 	call cnvrttxt
  6679 00005060 89C8                <2> 	mov eax, ecx
  6680 00005062 5E                  <2> 	pop esi
  6681 00005063 50                  <2> 	push eax
  6682 00005064 89F7                <2> 	mov edi, esi
  6683 00005066 E8C2E3FFFF          <2> 	call cnvrttxt
  6684 0000506B 89CB                <2> 	mov ebx, ecx
  6685 0000506D 58                  <2> 	pop eax	
  6686 0000506E 6681FB0000          <2> 	cmp bx, 0
  6687 00005073 0F846F000000        <2> 	je near .noswitchsize
  6688 00005079 663D0000            <2> 	cmp ax, 0
  6689 0000507D 0F8465000000        <2> 	je near .noswitchsize
  6690 00005083 66C1E303            <2> 	shl bx, 3
  6691 00005087 66C1E004            <2> 	shl ax, 4
  6692 0000508B 663B1D[38580000]    <2> 	cmp bx, [resolutionx]
  6693 00005092 7607                <2> 	jbe .nofixx
  6694 00005094 668B1D[38580000]    <2> 	mov bx, [resolutionx]
  6695                              <2> .nofixx:
  6696 0000509B 66051000            <2> 	add ax, 16
  6697 0000509F 663B05[3A580000]    <2> 	cmp ax, [resolutiony]
  6698 000050A6 7606                <2> 	jbe .nofixy
  6699 000050A8 66A1[3A580000]      <2> 	mov ax, [resolutiony]
  6700                              <2> .nofixy:
  6701 000050AE 662D1000            <2> 	sub ax, 16
  6702 000050B2 6631C9              <2> 	xor cx, cx
  6703 000050B5 6631D2              <2> 	xor dx, dx
  6704 000050B8 66891D[E3750000]    <2> 	mov [termwindow], bx
  6705 000050BF 66A3[E5750000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6706 000050C5 BE[E3750000]        <2> 	mov esi, termwindow
  6707 000050CA 31DB                <2> 	xor ebx, ebx
  6708 000050CC 6631C0              <2> 	xor ax, ax
  6709 000050CF E8502A0000          <2> 	call showwindow
  6710 000050D4 E8BF200000          <2> 	call guiclear
  6711 000050D9 E844CDFFFF          <2> 	call clear
  6712 000050DE E848210000          <2> 	call reloadallgraphics
  6713 000050E3 E84C1E0000          <2> 	call switchmousepos2
  6714                              <2> .noswitchsize:
  6715                              <2> %endif
  6716 000050E8 BE[F3500000]        <2> 	mov esi, shushmsg
  6717 000050ED E87BCCFFFF          <2> 	call print
  6718 000050F2 C3                  <2> 	ret
  6719 000050F3 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6720 000050FC 6F2074686520536F6C- <2>
  6721 00005105 6C65724F5320486172- <2>
  6722 0000510E 646C7920556E69782D- <2>
  6723 00005117 436F6D70617469626C- <2>
  6724 00005120 65205368656C6C210A- <2>
  6725 00005129 00                  <2>
  6726                              <1> %include 'source/programs/system.asm'
  6727 0000512A FF2C73797374656D00  <2> 	db 255,44,"system",0
  6728 00005133 BE[46520000]        <2> 	mov esi, kernelinfomsg
  6729 00005138 E80CCCFFFF          <2> 	call printquiet
  6730 0000513D B9[5C8C0300]        <2> 	mov ecx, osend
  6731 00005142 E808E2FFFF          <2> 	call showdec
  6732 00005147 BE[5B520000]        <2> 	mov esi, diskbytemsg
  6733 0000514C E8F8CBFFFF          <2> 	call printquiet
  6734 00005151 B9[5C8C0300]        <2> 	mov ecx, osend
  6735 00005156 81C1[3C9E2D00]      <2> 	add ecx, commandbufend
  6736 0000515C 81E9[008E0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6737 00005162 E8E8E1FFFF          <2> 	call showdec
  6738 00005167 BE[72520000]        <2> 	mov esi, membytemsg
  6739 0000516C E8D8CBFFFF          <2> 	call printquiet
  6740 00005171 BE[D5520000]        <2> 	mov esi, endofmemmsg
  6741 00005176 E8CECBFFFF          <2> 	call printquiet
  6742 0000517B B9[3CB64D00]        <2> 	mov ecx, bssend
  6743 00005180 E80FE1FFFF          <2> 	call showhex
  6744 00005185 BE[8B520000]        <2> 	mov esi, systeminfomsg
  6745 0000518A E8BACBFFFF          <2> 	call printquiet
  6746                              <2> getcpuspeed:
  6747 0000518F B8FE000000          <2> 	mov eax, 0xFE
  6748 00005194 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6749 00005196 B020                <2> 	mov al, 0x20
  6750 00005198 E620                <2> 	out 0x20, al
  6751 0000519A F4                  <2> 	hlt
  6752 0000519B 0F31                <2> 	rdtsc
  6753 0000519D 89D6                <2> 	mov esi, edx
  6754 0000519F 89C7                <2> 	mov edi, eax
  6755 000051A1 31C0                <2> 	xor eax, eax
  6756 000051A3 C605[53020000]01    <2> 	mov byte [testingcpuspeed], 1
  6757                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6758 000051AA 40                  <2> 	inc eax
  6759 000051AB E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6760                              <2> cpuspeedloopend:
  6761 000051B0 0F31                <2> 	rdtsc
  6762 000051B2 29F8                <2> 	sub eax, edi
  6763 000051B4 29F2                <2> 	sub edx, esi
  6764 000051B6 8915[5C020000]      <2> 	mov [cpuclocksperint + 4], edx
  6765 000051BC A3[58020000]        <2> 	mov [cpuclocksperint], eax
  6766 000051C1 31C0                <2> 	xor eax, eax
  6767 000051C3 E621                <2> 	out 0x21, al
  6768 000051C5 B020                <2> 	mov al, 0x20
  6769 000051C7 E620                <2> 	out 0x20, al
  6770 000051C9 31D2                <2> 	xor edx, edx
  6771 000051CB 31C0                <2> 	xor eax, eax
  6772 000051CD A1[54020000]        <2> 	mov eax, [cpuspeedperint]
  6773 000051D2 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6774                              <2> 				;result by 2
  6775 000051D4 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6776 000051DA C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6777 000051DD F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6778 000051DF 89C1                <2> 	mov ecx, eax
  6779 000051E1 E869E1FFFF          <2> 	call showdec
  6780 000051E6 BE[B9520000]        <2> 	mov esi, cpuspeedmsg
  6781 000051EB E859CBFFFF          <2> 	call printquiet
  6782 000051F0 31D2                <2> 	xor edx, edx
  6783 000051F2 A1[58020000]        <2> 	mov eax, [cpuclocksperint]
  6784 000051F7 8B15[5C020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6785 000051FD 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6786 00005203 C1EB0A              <2> 	shr ebx, 10
  6787 00005206 F7F3                <2> 	div ebx
  6788 00005208 89C1                <2> 	mov ecx, eax
  6789 0000520A E840E1FFFF          <2> 	call showdec
  6790 0000520F BE[BF520000]        <2> 	mov esi, cpuclockmsg
  6791 00005214 E830CBFFFF          <2> 	call printquiet
  6792 00005219 8B0D[60020000]      <2> 	mov ecx, [memoryspace]
  6793 0000521F C1E914              <2> 	shr ecx, 20
  6794 00005222 41                  <2> 	inc ecx	;the reading is one MB behind
  6795 00005223 E827E1FFFF          <2> 	call showdec
  6796 00005228 BE[C4520000]        <2> 	mov esi, memoryspacemsg
  6797 0000522D E83BCBFFFF          <2> 	call print
  6798                              <2> %ifdef sound.included
  6799 00005232 803D[225F0000]00    <2> 	cmp byte [SoundBlaster], 0
  6800 00005239 740A                <2> 	je .nosb
  6801 0000523B BE[A1520000]        <2> 	mov esi, soundblastermsg
  6802 00005240 E828CBFFFF          <2> 	call print
  6803                              <2> .nosb:
  6804                              <2> %endif
  6805 00005245 C3                  <2> 	ret
  6806                              <2> 
  6807 00005246 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6808 0000524F 666F726D6174696F6E- <2>
  6809 00005258 3A0A00              <2>
  6810 0000525B 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6811 00005264 6B2053706163652055- <2>
  6812 0000526D 7365640A00          <2>
  6813 00005272 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6814 0000527B 6F7279205370616365- <2>
  6815 00005284 20557365640A00      <2>
  6816 0000528B 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6817 00005294 6E666F726D6174696F- <2>
  6818 0000529D 6E3A0A00            <2>
  6819                              <2> %ifdef sound.included
  6820 000052A1 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6821 000052AA 746572204465746563- <2>
  6822 000052B3 7465642E0A00        <2>
  6823                              <2> %endif
  6824 000052B9 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6825 000052BF 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6826 000052C4 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6827 000052CD 2053706163650A00    <2>
  6828 000052D5 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6829 000052DE 6D6F72792053706163- <2>
  6830 000052E7 653A20307800        <2>
  6831                              <1> %include 'source/programs/time.asm'
  6832 000052ED FF2C74696D6500      <2> db 255,44,"time",0	
  6833                              <2> timer:
  6834 000052F4 8B35[4B300000]      <2> 	mov esi, [currentcommandloc]
  6835 000052FA 81C604000000        <2> 	add esi, 4
  6836 00005300 803E00              <2> 	cmp byte [esi], 0
  6837 00005303 7477                <2> 	je .norun
  6838 00005305 46                  <2> 	inc esi
  6839 00005306 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  6840 0000530C 51                  <2> 	push ecx
  6841 0000530D 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  6842 00005313 51                  <2> 	push ecx
  6843 00005314 BF[88C80300]        <2> 	mov edi, buftxt
  6844                              <2> .cpcmd:
  6845 00005319 8A06                <2> 	mov al, [esi]
  6846 0000531B 8807                <2> 	mov [edi], al
  6847 0000531D 46                  <2> 	inc esi
  6848 0000531E 47                  <2> 	inc edi
  6849 0000531F 3C00                <2> 	cmp al, 0
  6850 00005321 75F6                <2> 	jne .cpcmd
  6851 00005323 E847DCFFFF          <2> 	call run
  6852 00005328 5A                  <2> 	pop edx
  6853 00005329 58                  <2> 	pop eax
  6854                              <2> 
  6855 0000532A 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  6856 00005330 29C1                <2> 	sub ecx, eax
  6857 00005332 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6858 00005338 29D3                <2> 	sub ebx, edx
  6859 0000533A 7307                <2> 	jae .nosign
  6860 0000533C 81C300CA9A3B        <2> 	add ebx, 1000000000
  6861 00005342 49                  <2> 	dec ecx
  6862                              <2> .nosign:
  6863 00005343 E807E0FFFF          <2> 	call showdec
  6864                              <2> 	
  6865 00005348 89D9                <2> 	mov ecx, ebx
  6866 0000534A BE[1A410000]        <2> 	mov esi, timenscache
  6867 0000534F C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6868 00005356 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6869 0000535D C6460A30            <2> 	mov byte [esi + 10], "0"
  6870 00005361 BE[25410000]        <2> 	mov esi, timenscacheend
  6871 00005366 E8C1DDFFFF          <2> 	call convert
  6872 0000536B BE[1A410000]        <2> 	mov esi, timenscache
  6873 00005370 E8F8C9FFFF          <2> 	call print
  6874 00005375 C605[1A410000]08    <2> 	mov byte [timenscache], 8
  6875                              <2> .norun:
  6876 0000537C C3                  <2> 	ret
  6877                              <2> 	
  6878                              <1> %include 'source/programs/turnoff.asm'
  6879 0000537D FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6880 00005386 00                  <2>
  6881                              <2> 	turnoff:
  6882 00005387 66C705[050D0000]-   <2> 			mov word [realmodeptr], shutdown
  6883 0000538E [9A53]              <2>
  6884 00005390 BB[C5530000]        <2> 			mov ebx, halt
  6885 00005395 E859B8FFFF          <2> 			call realmode
  6886                              <2> 
  6887                              <2> [BITS 16]
  6888                              <2> 		shutdown:
  6889 0000539A B453                <2> 			mov ah, 0x53
  6890 0000539C B004                <2> 			mov al, 4
  6891 0000539E 31DB                <2> 			xor bx, bx
  6892 000053A0 CD15                <2> 			int 0x15
  6893                              <2> 			
  6894 000053A2 B453                <2> 			mov ah, 0x53
  6895 000053A4 B001                <2> 			mov al, 1
  6896 000053A6 31DB                <2> 			xor bx, bx
  6897 000053A8 CD15                <2> 			int 0x15
  6898                              <2> 			
  6899 000053AA B453                <2> 			mov ah, 0x53
  6900 000053AC B008                <2> 			mov al, 8
  6901 000053AE BB0100              <2> 			mov bx, 1
  6902 000053B1 B90100              <2> 			mov cx, 1
  6903 000053B4 CD15                <2> 			int 0x15
  6904                              <2> 			
  6905 000053B6 B453                <2> 			mov ah, 0x53
  6906 000053B8 B007                <2> 			mov al, 7
  6907 000053BA BB0100              <2> 			mov bx, 1
  6908 000053BD B90300              <2> 			mov cx, 3
  6909 000053C0 CD15                <2> 			int 0x15
  6910 000053C2 E9FDFF              <2> 			jmp $
  6911                              <2> 			[BITS 32]
  6912 000053C5 E9FBFFFFFF          <2> halt: jmp $
  6913                              <1> %include 'source/programs/wait.asm'
  6914 000053CA FF2C7761697400      <2> db 255,44,"wait",0
  6915                              <2> waitkey:
  6916 000053D1 E8B3CFFFFF          <2> 		call getchar
  6917 000053D6 C3                  <2> 		ret
  6918                              <1> %include 'source/programs/while.asm'
  6919 000053D7 FF2C7768696C6500    <2> db 255,44,"while",0
  6920 000053DF 30C0                <2> whilecmd:  xor al, al
  6921 000053E1 3805[82B40300]      <2> 	cmp [BATCHISON], al
  6922 000053E7 0F84DFE7FFFF        <2> 	je near notbatch
  6923 000053ED 8B35[7EB40300]      <2> 	mov esi, [BATCHPOS]
  6924 000053F3 81EE02000000        <2> 	sub esi, 2
  6925 000053F9 4E                  <2> whilefnd: dec esi
  6926 000053FA 8A06                <2> 	mov al, [esi]
  6927 000053FC 3C0A                <2> 	cmp al, 10
  6928 000053FE 0F840D000000        <2> 	je near whilefnd2
  6929 00005404 3C00                <2> 	cmp al, 0
  6930 00005406 0F8405000000        <2> 	je near whilefnd2
  6931 0000540C E9E8FFFFFF          <2> 	jmp whilefnd
  6932                              <2> whilefnd2:
  6933 00005411 46                  <2> 	inc esi
  6934 00005412 8935[84B40300]      <2> 	mov [LOOPPOS], esi
  6935 00005418 C605[83B40300]01    <2> 	mov BYTE [LOOPON], 1
  6936 0000541F BE[88C80300]        <2> 	mov esi, buftxt
  6937 00005424 BB[88C80300]        <2> 	mov ebx, buftxt
  6938 00005429 81C306000000        <2> 	add ebx, 6
  6939 0000542F E9F2F4FFFF          <2> 	jmp chkeqsn
  6940                              <1> progend:		;programs end here	
  6941                              <1> batchprogend:
  6942                                  	%include "source/hardware.asm"
  6943                              <1> %ifdef gui.included
  6944                              <1> 	%include "source/drivers/video/vesa.asm"
  6945                              <2> [BITS 16]
  6946                              <2> guiswitch:
  6947 00005434 81F90000            <2> 	cmp cx, 0
  6948 00005438 750B                <2> 	jne guiswitchdefnum
  6949 0000543A B81200              <2> 	mov ax, 12h
  6950 0000543D 31DB                <2> 	xor bx, bx
  6951 0000543F CD10                <2> 	int 10h
  6952 00005441 E85100              <2> 	call guiloadagain
  6953                              <2> guiswitchnocando:
  6954 00005444 C3                  <2> 	ret	;return without switching as mode number is bad
  6955                              <2> guiswitchdefnum:	;switch to a defined mode number
  6956 00005445 B8004F              <2> 	mov ax, 0x4F00
  6957 00005448 BF[2656]            <2> 	mov di, VBEMODEBLOCK
  6958 0000544B CD10                <2> 	int 10h
  6959 0000544D BE[4856]            <2> 	mov si, reserved
  6960 00005450 81EE0200            <2> 	sub si, 2
  6961                              <2> .loop:
  6962 00005454 81C60200            <2> 	add si, 2
  6963 00005458 81FE[2657]          <2> 	cmp si, oemdata
  6964 0000545C 74E6                <2> 	je guiswitchnocando
  6965 0000545E 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6966 00005462 74E0                <2> 	je guiswitchnocando
  6967 00005464 390C                <2> 	cmp [si], cx
  6968 00005466 75EC                <2> 	jne .loop
  6969 00005468 8936[7C55]          <2> 	mov [videomodecache], si
  6970 0000546C 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6971 00005470 B8014F              <2> 	mov ax, 0x4F01
  6972 00005473 BF[2658]            <2> 	mov di, VBEMODEINFOBLOCK
  6973 00005476 890E[7A55]          <2> 	mov [vesamode], cx
  6974 0000547A CD10                <2> 	int 10h
  6975 0000547C E9DB00              <2> 	jmp selectedvesa
  6976                              <2> guiload:
  6977 0000547F BE[FE55]            <2> 	mov si, bootmsg
  6978 00005482 E8FCAB              <2> 	call printrm
  6979 00005485 31C0                <2> 	xor ax, ax
  6980 00005487 CD16                <2> 	int 16h
  6981 00005489 3C79                <2> 	cmp al, "y"
  6982 0000548B 0F85B0AB            <2> 	jne near vgaset
  6983 0000548F BE[DC89]            <2> 	mov si, crlf
  6984 00005492 E8ECAB              <2> 	call printrm
  6985                              <2> guiloadagain:
  6986 00005495 B8004F              <2> 	mov ax, 04F00h
  6987 00005498 BF[2656]            <2> 	mov di, VBEMODEBLOCK
  6988 0000549B CD10                <2> 	int 10h
  6989 0000549D BE[4856]            <2> 	mov si, reserved
  6990 000054A0 81EE0200            <2> 	sub si, 2
  6991                              <2> findvideomodes:
  6992 000054A4 81C60200            <2> 	add si, 2
  6993 000054A8 8B0C                <2> 	mov cx, [si]
  6994 000054AA 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6995 000054AE 0F840B00            <2> 	je near nextvmode
  6996 000054B2 81FE[2657]          <2> 	cmp si, oemdata
  6997 000054B6 0F8385AB            <2> 	jae near vgaset	;kill if no valid list is found
  6998 000054BA E9E7FF              <2> 	jmp findvideomodes 	
  6999                              <2> ;debug,shows vmodes available
  7000                              <2> nextvmode:
  7001 000054BD 81EE0200            <2> 	sub si, 2
  7002 000054C1 81FE[4856]          <2> 	cmp si, reserved
  7003 000054C5 0F82CCFF            <2> 	jb near guiloadagain
  7004 000054C9 8B0C                <2> 	mov cx, [si]
  7005 000054CB 81F9FFFF            <2> 	cmp cx, 0xFFFF
  7006 000054CF 0F84EAFF            <2> 	je near nextvmode
  7007 000054D3 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  7008 000054D7 B8014F              <2> 	mov ax, 04F01h
  7009 000054DA BF[2658]            <2> 	mov di, VBEMODEINFOBLOCK
  7010 000054DD 890E[7A55]          <2> 	mov [vesamode], cx
  7011 000054E1 CD10                <2> 	int 10h
  7012 000054E3 A0[3F58]            <2> 	mov al, [bitsperpixel]
  7013 000054E6 3C10                <2> 	cmp al, 16
  7014 000054E8 75D3                <2> 	jne nextvmode
  7015 000054EA 8936[7C55]          <2> 	mov [videomodecache], si
  7016 000054EE 84E4                <2> 	test ah, ah
  7017 000054F0 0F842300            <2> 	jz near setvesamode
  7018 000054F4 E9C6FF              <2> 	jmp nextvmode
  7019 000054F7 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7020 00005500 20766964656F206D6F- <2>
  7021 00005509 6465204F4B3F28792F- <2>
  7022 00005512 6E290D0A00          <2>
  7023                              <2> setvesamode:
  7024 00005517 8B36[7C55]          <2> 	mov si, [videomodecache]
  7025 0000551B 8B0C                <2> 	mov cx, [si]
  7026 0000551D E86500              <2> 	call decshow
  7027 00005520 B03A                <2> 	mov al, ':'
  7028 00005522 E8D100              <2> 	call char
  7029 00005525 8B0E[3858]          <2> 	mov cx, [resolutionx]
  7030 00005529 E85900              <2> 	call decshow
  7031 0000552C B078                <2> 	mov al, "x"
  7032 0000552E E8C500              <2> 	call char
  7033 00005531 8B0E[3A58]          <2> 	mov cx, [resolutiony]
  7034 00005535 E84D00              <2> 	call decshow
  7035 00005538 B040                <2> 	mov al, "@"
  7036 0000553A E8B900              <2> 	call char
  7037 0000553D 31C9                <2> 	xor cx, cx
  7038 0000553F 8A0E[3F58]          <2> 	mov cl, [bitsperpixel]
  7039 00005543 E83F00              <2> 	call decshow
  7040 00005546 BE[F754]            <2> 	mov si, isthisvideook
  7041 00005549 E835AB              <2> 	call printrm
  7042 0000554C 31C0                <2> 	xor ax, ax
  7043 0000554E CD16                <2> 	int 16h
  7044 00005550 8B36[7C55]          <2> 	mov si, [videomodecache]
  7045 00005554 3C79                <2> 	cmp al, "y"
  7046 00005556 0F8563FF            <2> 	jne near nextvmode
  7047                              <2> selectedvesa:
  7048 0000555A 8B16[3858]          <2> 	mov dx, [resolutionx]
  7049 0000555E 01D2                <2> 	add dx, dx
  7050 00005560 8916[2659]          <2> 	mov [resolutionx2], dx
  7051 00005564 31D2                <2> 	xor dx, dx
  7052 00005566 31C9                <2> 	xor cx, cx
  7053 00005568 B8024F              <2> 	mov ax, 04F02h
  7054 0000556B 8B1E[7A55]          <2> 	mov bx, [vesamode]
  7055 0000556F CD10                <2> 	int 10h		;enter VESA mode
  7056 00005571 C606[028A]01        <2> 	mov byte [guion], 1
  7057 00005576 E8D6AA              <2> 	call getmemorysize;get the memory map after the video is initialized
  7058 00005579 C3                  <2> 	ret
  7059                              <2> 	
  7060 0000557A 0000                <2> vesamode dw 0
  7061 0000557C 0000                <2> videomodecache dw 0
  7062                              <2> 
  7063 0000557E 0000000000          <2> dcnm db 0,0,0,0,0
  7064 00005583 0000                <2> dcnmend db 0,0
  7065                              <2> 
  7066                              <2> 
  7067                              <2> decshow:
  7068 00005585 BE[7E55]            <2> 	mov si, dcnm
  7069                              <2> decclear:
  7070 00005588 B030                <2> 	mov al, "0"
  7071 0000558A 8804                <2> 	mov [si], al
  7072 0000558C 46                  <2> 	inc si
  7073 0000558D 81FE[8355]          <2> 	cmp si, dcnmend
  7074 00005591 76F5                <2> 	jbe decclear
  7075 00005593 4E                  <2> 	dec si
  7076 00005594 E81500              <2> 	call convertrm
  7077 00005597 BE[7E55]            <2> 	mov si, dcnm
  7078                              <2> dectst:
  7079 0000559A 8A04                <2> 	mov al, [si]
  7080 0000559C 46                  <2> 	inc si
  7081 0000559D 81FE[8355]          <2> 	cmp si, dcnmend
  7082 000055A1 7704                <2> 	ja dectstend
  7083 000055A3 3C30                <2> 	cmp al, "0"
  7084 000055A5 76F3                <2> 	jbe dectst
  7085                              <2> dectstend:
  7086 000055A7 4E                  <2> 	dec si
  7087 000055A8 E8D6AA              <2> 	call printrm
  7088 000055AB C3                  <2> 	ret
  7089                              <2> 	
  7090                              <2> 	
  7091                              <2> convertrm:
  7092 000055AC 4E                  <2> 	dec si
  7093 000055AD 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7094                              <2> cnvrtrm:
  7095 000055AF 89DE                <2> 	mov si, bx
  7096 000055B1 81EE0300            <2> 	sub si, 3
  7097 000055B5 46                  <2> ten3rm:	inc si
  7098 000055B6 81F9E803            <2> 	cmp cx, 1000
  7099 000055BA 7209                <2> 	jb ten2rm
  7100 000055BC 81E9E803            <2> 	sub cx, 1000
  7101 000055C0 FE04                <2> 	inc byte [si]
  7102 000055C2 E9EAFF              <2> 	jmp cnvrtrm
  7103 000055C5 46                  <2> ten2rm:	inc si
  7104 000055C6 81F96400            <2> 	cmp cx, 100
  7105 000055CA 7209                <2> 	jb ten1rm
  7106 000055CC 81E96400            <2> 	sub cx, 100
  7107 000055D0 FE04                <2> 	inc byte [si]
  7108 000055D2 E9DAFF              <2> 	jmp cnvrtrm
  7109 000055D5 46                  <2> ten1rm:	inc si
  7110 000055D6 81F90A00            <2> 	cmp cx, 10
  7111 000055DA 7209                <2> 	jb ten0rm
  7112 000055DC 81E90A00            <2> 	sub cx, 10
  7113 000055E0 FE04                <2> 	inc byte [si]
  7114 000055E2 E9CAFF              <2> 	jmp cnvrtrm
  7115 000055E5 46                  <2> ten0rm:	inc si
  7116 000055E6 81F90100            <2> 	cmp cx, 1
  7117 000055EA 7209                <2> 	jb tendnrm
  7118 000055EC 81E90100            <2> 	sub cx, 1
  7119 000055F0 FE04                <2> 	inc byte [si]
  7120 000055F2 E9BAFF              <2> 	jmp cnvrtrm
  7121                              <2> tendnrm:
  7122 000055F5 C3                  <2> 	ret
  7123                              <2> 
  7124                              <2>     char: 		    ;char must be in al
  7125 000055F6 BB0700              <2>        mov bx, 07
  7126 000055F9 B40E                <2> 	   mov ah, 0Eh
  7127 000055FB CD10                <2> 	   int 10h
  7128 000055FD C3                  <2> 	   ret
  7129                              <2> 
  7130 000055FE 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7131 00005607 20746865204755493F- <2>
  7132 00005610 28792F6E2900        <2>
  7133                              <2> 
  7134                              <2> 
  7135                              <2> mcursor:
  7136 00005616 01                  <2> 	db	00000001b
  7137 00005617 81                  <2> 	db	10000001b
  7138 00005618 C1                  <2> 	db	11000001b
  7139 00005619 E1                  <2> 	db	11100001b
  7140 0000561A F1                  <2> 	db	11110001b
  7141 0000561B F9                  <2> 	db	11111001b
  7142 0000561C FD                  <2> 	db	11111101b
  7143 0000561D FF                  <2> 	db	11111111b
  7144 0000561E F9                  <2> 	db	11111001b
  7145 0000561F B9                  <2> 	db	10111001b
  7146 00005620 39                  <2> 	db	00111001b
  7147 00005621 1C                  <2> 	db	00011100b
  7148 00005622 1C                  <2> 	db	00011100b
  7149 00005623 0E                  <2> 	db	00001110b
  7150 00005624 0E                  <2> 	db	00001110b
  7151 00005625 0C                  <2> 	db	00001100b
  7152                              <2> mcursorend:
  7153                              <2> 
  7154                              <2> 
  7155                              <2> VBEMODEBLOCK:
  7156 00005626 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7157 0000562A 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7158 0000562C 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7159 00005630 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7160 00005634 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7161 00005638 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7162 0000563A 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7163 0000563C 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7164 00005640 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7165 00005644 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7166 00005648 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7167 00005726 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7168                              <2> 
  7169                              <2> VBEMODEINFOBLOCK:
  7170                              <2> ;Mandatory information for all VBE revision
  7171 00005826 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7172 00005828 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7173 00005829 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7174 0000582A 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7175 0000582C 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7176 0000582E 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7177 00005830 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7178 00005832 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7179 00005836 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7180                              <2> 
  7181                              <2> ;Mandatory information for VBE 1.2 and above
  7182 00005838 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7183 0000583A 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7184 0000583C 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7185 0000583D 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7186 0000583E 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7187 0000583F 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7188 00005840 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7189 00005841 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7190 00005842 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7191 00005843 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7192 00005844 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7193                              <2> 
  7194                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7195 00005845 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7196 00005846 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7197 00005847 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7198 00005848 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7199 00005849 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7200 0000584A 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7201 0000584B 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7202 0000584C 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7203 0000584D 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7204                              <2> 
  7205                              <2> ;Mandatory information for VBE 2.0 and above
  7206 0000584E 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7207 00005852 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7208 00005856 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7209 00005858 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7210                              <2> 
  7211 00005926 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7212                              <2> VBEEND:
  7213                              <2> [BITS 32]
  7214                              <1> 	%include "source/drivers/input/mouse.asm"
  7215 0000592A 00                  <2> mousedisabled db 0
  7216                              <2> 	
  7217                              <2> 	cursorgui:
  7218 0000592B 803D[94890000]01    <2> 		cmp byte [mouseon], 1
  7219 00005932 0F8432000000        <2> 		je near mousedaemon
  7220 00005938 803D[028A0000]00    <2> 		cmp byte [guion], 0
  7221 0000593F 0F8415070000        <2> 		je near entdown
  7222                              <2> 	initmouse:
  7223 00005945 803D[028A0000]00    <2> 		cmp byte [guion], 0
  7224 0000594C 7405                <2> 		je noswmsposinit
  7225 0000594E E8E1150000          <2> 		call switchmousepos2
  7226                              <2> 	noswmsposinit:
  7227 00005953 E85D020000          <2> 	  	call PS2SET
  7228 00005958 E886020000          <2> 		call ACTMOUS
  7229 0000595D C605[94890000]01    <2> 		mov byte [mouseon],1
  7230 00005964 E89F020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7231                              <2> 		;call GETB
  7232                              <2> 				;if the bytes are mixed up,
  7233                              <2> 				;remove this line or add another of this line.
  7234                              <2> 	nomouse:
  7235 00005969 C3                  <2> 		ret
  7236                              <2> 		
  7237                              <2> 	mousedaemon:
  7238 0000596A 803D[94890000]01    <2> 		cmp byte [mouseon], 1
  7239 00005971 75D2                <2> 		jne initmouse
  7240 00005973 E464                <2> 		in al, 64h ; Status
  7241 00005975 A820                <2> 		test al, 20h ; PS2-Mouse?
  7242 00005977 0F8502000000        <2> 		jnz near moused
  7243 0000597D F4                  <2> 		hlt
  7244 0000597E C3                  <2> 		ret
  7245                              <2> 	moused:
  7246 0000597F 803D[2A590000]01    <2> 		cmp byte [mousedisabled], 1
  7247 00005986 74E1                <2> 		je nomouse
  7248 00005988 E87B020000          <2> 		  call GETB
  7249 0000598D 88C3                <2> 		  mov  bl, al
  7250 0000598F 80E301              <2> 		  and  bl, 1
  7251 00005992 881D[2D5C0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7252 00005998 88C3                <2> 		  mov  bl, al
  7253 0000599A 80E302              <2> 		  and  bl, 2
  7254 0000599D D0EB                <2> 		  shr  bl, 1
  7255 0000599F 881D[2E5C0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7256 000059A5 88C3                <2> 		  mov  bl, al
  7257 000059A7 80E304              <2> 		  and  bl, 4
  7258 000059AA C0EB02              <2> 		  shr  bl, 2
  7259 000059AD 881D[2F5C0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7260 000059B3 E850020000          <2> 		  call GETB
  7261 000059B8 A2[305C0000]        <2> 		  mov  BYTE [XCOORD], al
  7262 000059BD E846020000          <2> 		  call GETB
  7263 000059C2 A2[315C0000]        <2> 		  mov  BYTE [YCOORD], al
  7264                              <2> 
  7265                              <2> 	showpixelcursor:
  7266 000059C7 668B15[1C5B0000]    <2> 		mov dx, [mousecursorposition]
  7267 000059CE 668B0D[1E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7268 000059D5 668915[185B0000]    <2> 		mov [lastmouseposition], dx
  7269 000059DC 66890D[1A5B0000]    <2> 		mov [lastmouseposition + 2], cx
  7270 000059E3 A0[305C0000]        <2> 		mov al, [XCOORD]
  7271 000059E8 3C80                <2> 		cmp al, 128
  7272 000059EA 730C                <2> 		jae subxcoord
  7273 000059EC 00C0                <2> 		add al, al
  7274 000059EE 30E4                <2> 		xor ah, ah
  7275 000059F0 6601C2              <2> 		add dx, ax
  7276 000059F3 E90B000000          <2> 		jmp subxcoorddn
  7277                              <2> 	subxcoord:
  7278 000059F8 00C0                <2> 		add al, al
  7279 000059FA 30DB                <2> 		xor bl, bl
  7280 000059FC 28C3                <2> 		sub bl, al
  7281 000059FE 30FF                <2> 		xor bh, bh
  7282 00005A00 6629DA              <2> 		sub dx, bx
  7283                              <2> 	subxcoorddn:
  7284 00005A03 8A1D[315C0000]      <2> 		mov bl, [YCOORD]
  7285 00005A09 30C0                <2> 		xor al, al
  7286 00005A0B 28D8                <2> 		sub al, bl
  7287 00005A0D 3C80                <2> 		cmp al, 128
  7288 00005A0F 730A                <2> 		jae subycoord
  7289 00005A11 30E4                <2> 		xor ah, ah
  7290 00005A13 6601C1              <2> 		add cx, ax
  7291 00005A16 E909000000          <2> 		jmp subycoorddn
  7292                              <2> 	subycoord:
  7293 00005A1B 30DB                <2> 		xor bl, bl
  7294 00005A1D 28C3                <2> 		sub bl, al
  7295 00005A1F 30FF                <2> 		xor bh, bh
  7296 00005A21 6629D9              <2> 		sub cx, bx
  7297                              <2> 	subycoorddn:
  7298 00005A24 6681FA204E          <2> 		cmp dx, 20000
  7299 00005A29 7603                <2> 		jbe nooriginx2
  7300 00005A2B 6631D2              <2> 		xor dx, dx
  7301                              <2> 	nooriginx2:
  7302 00005A2E 6681F9204E          <2> 		cmp cx, 20000
  7303 00005A33 7603                <2> 		jbe nooriginy2
  7304 00005A35 6631C9              <2> 		xor cx, cx
  7305                              <2> 	nooriginy2:
  7306 00005A38 6681FA0000          <2> 		cmp dx, 0
  7307 00005A3D 7415                <2> 		je nofixxcolumn2
  7308 00005A3F 663B15[26590000]    <2> 		cmp dx, [resolutionx2]
  7309 00005A46 720C                <2> 		jb nofixxcolumn2
  7310 00005A48 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  7311 00005A4F 6681EA0200          <2> 		sub dx, 2
  7312                              <2> 	nofixxcolumn2:
  7313 00005A54 6681F90000          <2> 		cmp cx, 0
  7314 00005A59 7415                <2> 		je nofixyrow2
  7315 00005A5B 663B0D[3A580000]    <2> 		cmp cx, [resolutiony]
  7316 00005A62 720C                <2> 		jb nofixyrow2
  7317 00005A64 668B0D[3A580000]    <2> 		mov cx, [resolutiony]
  7318 00005A6B 6681E90100          <2> 		sub cx, 1
  7319                              <2> 	nofixyrow2:
  7320 00005A70 668915[1C5B0000]    <2> 		mov [mousecursorposition], dx
  7321 00005A77 66890D[1E5B0000]    <2> 		mov [mousecursorposition + 2], cx
  7322 00005A7E 803D[028A0000]00    <2> 		cmp byte [guion], 0
  7323 00005A85 0F8495000000        <2> 		je near termmouse
  7324 00005A8B E844140000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7325 00005A90 803D[2D5C0000]01    <2> 		cmp byte [LBUTTON], 1
  7326 00005A97 0F848F260000        <2> 		je near clickicon
  7327 00005A9D 803D[2E5C0000]01    <2> 		cmp byte [RBUTTON], 1
  7328 00005AA4 0F8482260000        <2> 		je near clickicon
  7329 00005AAA A0[19810000]        <2> 		mov al, [pbutton]
  7330 00005AAF C705[1C810000]0000- <2> 		mov dword [dragging], 0
  7331 00005AB7 0000                <2>
  7332 00005AB9 3C00                <2> 		cmp al, 0
  7333 00005ABB 740F                <2> 		je nopreviousbutton
  7334 00005ABD E876130000          <2> 		call clearmousecursor
  7335 00005AC2 E864170000          <2> 		call reloadallgraphics
  7336                              <2> 	windowtermcopyend:
  7337 00005AC7 E868140000          <2> 		call switchmousepos2
  7338                              <2> 	nopreviousbutton:
  7339 00005ACC 30C0                <2> 		xor al, al
  7340 00005ACE A2[19810000]        <2> 		mov [pbutton], al
  7341 00005AD3 A2[83860000]        <2> 		mov [windrag], al
  7342 00005AD8 A0[2D5C0000]        <2> 		mov al, [LBUTTON]
  7343 00005ADD A2[1A810000]        <2> 		mov [pLBUTTON], al
  7344 00005AE2 A0[2E5C0000]        <2> 		mov al, [RBUTTON]
  7345 00005AE7 A2[1B810000]        <2> 		mov [pRBUTTON], al
  7346 00005AEC 31D2                <2> 		xor edx, edx
  7347 00005AEE 668B15[1C5B0000]    <2> 		mov dx, [mousecursorposition]
  7348 00005AF5 668B0D[1E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7349 00005AFC 66BB18C7            <2> 		mov bx, 1100011100011000b
  7350 00005B00 66B80100            <2> 		mov ax, 1
  7351 00005B04 C605[16810000]01    <2> 		mov byte [showcursorfonton], 1
  7352 00005B0B E80A1E0000          <2> 		call showfontvesa
  7353 00005B10 C605[16810000]00    <2> 		mov byte [showcursorfonton], 0
  7354 00005B17 C3                  <2> 		ret
  7355                              <2> 
  7356 00005B18 00000000            <2> lastmouseposition dw 0,0
  7357 00005B1C 00000000            <2> mousecursorposition dw 0,0	
  7358                              <2> 
  7359                              <2> termmouse:
  7360 00005B20 BE[9CE32B00]        <2> 		mov esi, videobuf
  7361 00005B25 31D2                <2> 		xor edx, edx
  7362 00005B27 668B15[185B0000]    <2> 		mov dx, [lastmouseposition]
  7363 00005B2E 668B0D[1A5B0000]    <2> 		mov cx, [lastmouseposition + 2]
  7364 00005B35 66A1[B35B0000]      <2> 		mov ax, [cursorcache]
  7365 00005B3B 663D0000            <2> 		cmp ax, 0
  7366 00005B3F 7425                <2> 		je nocopycursorcache
  7367 00005B41 66C1E104            <2> 		shl cx, 4
  7368 00005B45 66C1E203            <2> 		shl dx, 3
  7369 00005B49 01D6                <2> 		add esi, edx
  7370 00005B4B 6631D2              <2> 		xor dx, dx
  7371 00005B4E 8A15[11260000]      <2> 		mov dl, [charxy]
  7372 00005B54 6641                <2> 		inc cx
  7373                              <2> termmousecplp1:
  7374 00005B56 01D6                <2> 		add esi, edx
  7375 00005B58 6649                <2> 		dec cx
  7376 00005B5A 6681F90000          <2> 		cmp cx, 0
  7377 00005B5F 75F5                <2> 		jne termmousecplp1
  7378 00005B61 29D6                <2> 		sub esi, edx
  7379 00005B63 668906              <2> 		mov [esi], ax
  7380                              <2> nocopycursorcache:
  7381 00005B66 BE[9CE32B00]        <2> 		mov esi, videobuf
  7382 00005B6B 31D2                <2> 		xor edx, edx
  7383 00005B6D 668B15[1C5B0000]    <2> 		mov dx, [mousecursorposition]
  7384 00005B74 668B0D[1E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  7385 00005B7B 66C1E104            <2> 		shl cx, 4
  7386 00005B7F 66C1E203            <2> 		shl dx, 3
  7387 00005B83 01D6                <2> 		add esi, edx
  7388 00005B85 6631D2              <2> 		xor dx, dx
  7389 00005B88 8A15[11260000]      <2> 		mov dl, [charxy]
  7390 00005B8E 6641                <2> 		inc cx
  7391                              <2> termmousecplp2:
  7392 00005B90 01D6                <2> 		add esi, edx
  7393 00005B92 6649                <2> 		dec cx
  7394 00005B94 6681F90000          <2> 		cmp cx, 0
  7395 00005B99 75F5                <2> 		jne termmousecplp2
  7396 00005B9B 29D6                <2> 		sub esi, edx
  7397 00005B9D 668B06              <2> 		mov ax, [esi]
  7398 00005BA0 66A3[B35B0000]      <2> 		mov [cursorcache], ax
  7399 00005BA6 B080                <2> 		mov al, 128
  7400 00005BA8 B407                <2> 		mov ah, 7
  7401 00005BAA 668906              <2> 		mov [esi], ax
  7402 00005BAD E871CDFFFF          <2> 		call termcopy
  7403 00005BB2 C3                  <2> 		ret
  7404 00005BB3 0000                <2> cursorcache db 0,0
  7405                              <2> 
  7406                              <2> PS2SET:
  7407 00005BB5 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7408 00005BB7 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7409 00005BB9 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7410 00005BBE C3                  <2> ret
  7411                              <2> 
  7412                              <2> CHKPRT:
  7413 00005BBF 66B96400            <2>   mov  cx, 100
  7414                              <2>  .again:
  7415 00005BC3 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7416 00005BC5 A802                <2>   test al, 2		; Check if input buffer is empty
  7417 00005BC7 7402                <2>   je .go
  7418 00005BC9 E2F8                <2>   loop .again
  7419                              <2>  .go:
  7420 00005BCB C3                  <2> ret
  7421                              <2> 
  7422                              <2> WMOUS:
  7423 00005BCC B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7424 00005BCE E664                <2>   out  0x64, al		; write to keyboardcontroller
  7425 00005BD0 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7426 00005BD5 C3                  <2> ret
  7427                              <2> 
  7428                              <2> MBUFFUL:
  7429 00005BD6 66B96400            <2>   mov cx, 100
  7430                              <2>  .mn:
  7431 00005BDA E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7432 00005BDC A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7433 00005BDE 7402                <2>   jz  .mnn
  7434 00005BE0 E2F8                <2>   loop .mn
  7435                              <2>  .mnn:
  7436 00005BE2 C3                  <2> ret
  7437                              <2> 
  7438                              <2> 
  7439                              <2> ACTMOUS:
  7440 00005BE3 E8E4FFFFFF          <2>   call WMOUS
  7441 00005BE8 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7442 00005BEA E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7443 00005BEC E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7444 00005BF1 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7445 00005BF6 C3                  <2> ret
  7446                              <2> 
  7447                              <2> CHKMOUS:
  7448 00005BF7 B300                <2>   mov  bl, 0
  7449 00005BF9 66B96400            <2>   mov cx, 100
  7450                              <2>  .vrd:
  7451 00005BFD E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7452 00005BFF A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7453 00005C01 7504                <2>   jnz .yy
  7454 00005C03 E2F8                <2>   loop .vrd
  7455 00005C05 B301                <2>   mov  bl, 1
  7456                              <2>  .yy:
  7457 00005C07 C3                  <2> ret
  7458                              <2> 
  7459                              <2> GETB:
  7460                              <2>  .cagain:
  7461 00005C08 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7462 00005C0D 08DB                <2>   or bl, bl
  7463 00005C0F 75F7                <2>   jnz .cagain
  7464 00005C11 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7465 00005C13 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7466 00005C15 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7467 00005C1A 6631C0              <2>   xor  ax, ax
  7468 00005C1D E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7469 00005C1F 88C2                <2>   mov  dl, al
  7470 00005C21 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7471 00005C23 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7472 00005C25 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7473 00005C2A 88D0                <2>   mov  al, dl
  7474 00005C2C C3                  <2> ret
  7475                              <2> 
  7476 00005C2D 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7477 00005C2E 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7478 00005C2F 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7479 00005C30 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7480 00005C31 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7481                              <1> %endif
  7482                              <1> %include "source/drivers/sound/pcspkr.asm"
  7483                              <2> ;PC Speaker Drivers
  7484                              <2> PCSpeakerRAW:
  7485 00005C32 60                  <2> 	pusha
  7486                              <2> nosoundrep:
  7487 00005C33 8B35[76020000]      <2> 	mov esi, [soundpos]
  7488 00005C39 31C9                <2> 	xor ecx, ecx
  7489 00005C3B 668B0D[74020000]    <2> 	mov cx, [soundrepititions]
  7490 00005C42 6681F90000          <2> 	cmp cx, 0
  7491 00005C47 0F8548000000        <2> 	jne near donesetpitch
  7492 00005C4D 668B0E              <2> 	mov cx, [esi]
  7493 00005C50 668B5E02            <2> 	mov bx, [esi + 2]
  7494 00005C54 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7495 00005C5B 81C604000000        <2> 	add esi, 4
  7496 00005C61 8935[76020000]      <2> 	mov [soundpos], esi
  7497 00005C67 3B35[7A020000]      <2> 	cmp esi, [soundendpos]
  7498 00005C6D 7735                <2> 	ja stopsound
  7499 00005C6F 66813D[74020000]00- <2> 	cmp word [soundrepititions], 0
  7500 00005C77 00                  <2>
  7501 00005C78 74B9                <2> 	je nosoundrep
  7502 00005C7A 6681FB0000          <2> 	cmp bx, 0
  7503 00005C7F 740F                <2> 	je nosoundplay
  7504 00005C81 E840000000          <2> 	call setpitch
  7505 00005C86 E849000000          <2> 	call startsound
  7506 00005C8B E905000000          <2> 	jmp donesetpitch
  7507                              <2> nosoundplay:
  7508 00005C90 E846000000          <2> 	call killsound
  7509                              <2> donesetpitch:
  7510 00005C95 6649                <2> 	dec cx
  7511 00005C97 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7512 00005C9E 61                  <2> 	popa
  7513 00005C9F E90EA6FFFF          <2> 	jmp timerinterrupt
  7514                              <2> stopsound:
  7515 00005CA4 31C0                <2> 	xor eax, eax
  7516 00005CA6 66A3[74020000]      <2> 	mov [soundrepititions], ax
  7517 00005CAC A2[73020000]        <2> 	mov [soundon], al
  7518 00005CB1 A3[76020000]        <2> 	mov [soundpos], eax
  7519 00005CB6 A3[7A020000]        <2> 	mov [soundendpos], eax
  7520 00005CBB E81B000000          <2> 	call killsound
  7521 00005CC0 61                  <2> 	popa
  7522 00005CC1 E9ECA5FFFF          <2> 	jmp timerinterrupt
  7523                              <2> 
  7524                              <2> 
  7525                              <2> setpitch:
  7526 00005CC6 B0B6                <2> 	mov al, 0xB6
  7527 00005CC8 E643                <2> 	out 0x43, al
  7528 00005CCA 6689D8              <2> 	mov ax, bx
  7529 00005CCD E642                <2> 	out 0x42, al
  7530 00005CCF 88E0                <2> 	mov al, ah
  7531 00005CD1 E642                <2> 	out 0x42, al
  7532 00005CD3 C3                  <2> 	ret
  7533                              <2> startsound:
  7534 00005CD4 E461                <2> 	in al, 0x61
  7535 00005CD6 0C03                <2> 	or al, 3
  7536 00005CD8 E661                <2> 	out 0x61, al
  7537 00005CDA C3                  <2> 	ret
  7538                              <2> killsound:
  7539 00005CDB E461                <2> 	in al, 0x61
  7540 00005CDD 24FC                <2> 	and al, 0xFC
  7541 00005CDF E661                <2> 	out 0x61, al
  7542 00005CE1 C3                  <2> 	ret
  7543                              <2> 	
  7544                              <1> %ifdef sound.included
  7545                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7546                              <2> ;Sound Blaster Drivers
  7547                              <2> sblaster:
  7548                              <2> .init:
  7549 00005CE2 E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7550 00005CE7 A2[225F0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7551 00005CEC 3C00                <2> 		cmp al, 0
  7552 00005CEE 7418                <2> 		je .noinit
  7553 00005CF0 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7554 00005CF2 E805020000          <2> 		call WriteDSP
  7555 00005CF7 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7556 00005CF9 E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7557 00005CFE BE[095D0000]        <2> 		mov esi, .initmsg
  7558 00005D03 E865C0FFFF          <2> 		call print
  7559                              <2> .noinit:
  7560 00005D08 C3                  <2> 		ret
  7561 00005D09 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7562 00005D12 69616C697A65642E0A- <2>
  7563 00005D1B 00                  <2>
  7564                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7565 00005D1C 813D[0D5F0000]0000- <2> 	cmp dword [Length0], 0
  7566 00005D24 0000                <2>
  7567 00005D26 0F8462000000        <2> 	je near .done
  7568 00005D2C FF0D[0D5F0000]      <2> 	dec dword [Length0]
  7569 00005D32 E908000000          <2> 	jmp .notodd
  7570                              <2> .oddlength:
  7571 00005D37 31C9                <2> 	xor ecx, ecx
  7572 00005D39 880D[0C5F0000]      <2> 	mov [OddLength], cl
  7573                              <2> .notodd:
  7574 00005D3F 8B35[135F0000]      <2> 	mov esi, [NextMemLoc]
  7575 00005D45 31C9                <2> 	xor ecx, ecx
  7576 00005D47 668B0D[115F0000]    <2> 	mov cx, [Length1]
  7577 00005D4E D1E9                <2> 	shr ecx, 1
  7578 00005D50 6641                <2> 	inc cx
  7579 00005D52 31DB                <2> 	xor ebx, ebx
  7580 00005D54 668B1D[1B5F0000]    <2> 	mov bx, [SegLoc]
  7581 00005D5B 6601CB              <2> 	add bx, cx
  7582 00005D5E 66891D[1B5F0000]    <2> 	mov [SegLoc], bx
  7583 00005D65 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7584 00005D6B 8935[175F0000]      <2> 	mov [MemLoc], esi
  7585 00005D71 89C8                <2> 	mov eax, ecx
  7586 00005D73 01F0                <2> 	add eax, esi
  7587 00005D75 A3[135F0000]        <2> 	mov [NextMemLoc], eax
  7588 00005D7A E833000000          <2> 	call DMACopy
  7589                              <2> 	;call DMAPlay
  7590 00005D7F E8E0000000          <2> 	call PlayDSP
  7591 00005D84 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7592 00005D88 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7593 00005D89 E9F0A5FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7594                              <2> .done:
  7595 00005D8E 803D[0C5F0000]01    <2> 	cmp byte [OddLength], 1
  7596 00005D95 74A0                <2> 	je .oddlength
  7597 00005D97 31C0                <2> 	xor eax, eax
  7598 00005D99 66A3[115F0000]      <2> 	mov [Length1], ax
  7599 00005D9F 66B8D000            <2> 	mov ax, 0xD0
  7600 00005DA3 E854010000          <2> 	call WriteDSP
  7601 00005DA8 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7602 00005DAC EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7603 00005DAD E9CCA5FFFF          <2> 	jmp handled2
  7604                              <2> 	
  7605                              <2> DMACopy:
  7606 00005DB2 66B80800            <2> 		mov ax, LINEAR_SEL
  7607 00005DB6 8EE0                <2> 		mov fs, ax
  7608 00005DB8 C1E902              <2> 		shr ecx, 2
  7609                              <2> .loop:
  7610 00005DBB 8B06                <2> 		mov eax, [esi]
  7611 00005DBD 648903              <2> 		mov [fs:ebx], eax
  7612 00005DC0 81C604000000        <2> 		add esi, 4
  7613 00005DC6 81C304000000        <2> 		add ebx, 4
  7614 00005DCC E2ED                <2> 		loop .loop
  7615 00005DCE 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7616 00005DD2 8EE0                <2> 		mov fs, ax
  7617 00005DD4 C3                  <2> 		ret
  7618                              <2> 		
  7619                              <2> 
  7620                              <2> DMAPlay:    ;uses eax ebx edx
  7621 00005DD5 C605[1D5F0000]00    <2> 		mov	byte [Page1],00h
  7622                              <2> 
  7623 00005DDC B005                <2> 		mov	al,(Channel+4)
  7624 00005DDE 66BA0A00            <2> 		mov	dx,0Ah
  7625 00005DE2 EE                  <2> 		out	dx,al
  7626 00005DE3 30C0                <2> 		xor	al,al
  7627 00005DE5 66BA0C00            <2> 		mov	dx,0Ch
  7628 00005DE9 EE                  <2> 		out	dx,al
  7629 00005DEA B059                <2> 		mov	al,ModeReg
  7630 00005DEC 66BA0B00            <2> 		mov	dx,0Bh
  7631 00005DF0 EE                  <2> 		out	dx,al
  7632 00005DF1 B800000800          <2> 		mov	eax,0x80000
  7633 00005DF6 66BA0200            <2> 		mov	dx,AddPort
  7634 00005DFA EE                  <2> 		out	dx,al
  7635 00005DFB 86C4                <2> 		xchg al,ah
  7636 00005DFD EE                  <2> 		out	dx,al
  7637 00005DFE B800000800          <2> 		mov	eax,0x80000
  7638 00005E03 89C2                <2> 		mov	edx,eax
  7639 00005E05 2500000100          <2> 		and	eax,65536
  7640 00005E0A 7406                <2> 		jz	MemLocN1
  7641 00005E0C FE05[1D5F0000]      <2> 		inc	byte [Page1]
  7642                              <2> MemLocN1:
  7643 00005E12 89D0                <2> 		mov	eax,edx
  7644 00005E14 2500000200          <2> 		and	eax,131072
  7645 00005E19 7407                <2> 		jz	MemLocN2
  7646 00005E1B 8005[1D5F0000]02    <2> 		add	byte [Page1],02
  7647                              <2> MemLocN2:
  7648 00005E22 89D0                <2> 		mov	eax,edx
  7649 00005E24 2500000400          <2> 		and	eax,262144
  7650 00005E29 7407                <2> 		jz	MemLocN3
  7651 00005E2B 8005[1D5F0000]04    <2> 		add	byte [Page1],04
  7652                              <2> MemLocN3:
  7653 00005E32 89D0                <2> 		mov	eax,edx
  7654 00005E34 2500000800          <2> 		and	eax,524288
  7655 00005E39 7407                <2> 		jz	MemLocN4
  7656 00005E3B 8005[1D5F0000]08    <2> 		add	byte [Page1],08
  7657                              <2> MemLocN4:
  7658 00005E42 66BA8300            <2> 		mov	dx,PgPort
  7659 00005E46 A0[1D5F0000]        <2> 		mov	al,[Page1]
  7660 00005E4B EE                  <2> 		out	dx,al
  7661 00005E4C 66BA0300            <2> 		mov	dx,LenPort
  7662 00005E50 66A1[115F0000]      <2> 		mov	ax,[Length1]
  7663 00005E56 6648                <2> 		dec ax
  7664 00005E58 EE                  <2> 		out	dx,al
  7665 00005E59 86C4                <2> 		xchg al,ah
  7666 00005E5B EE                  <2> 		out	dx,al
  7667 00005E5C 66BA0A00            <2> 		mov	dx,0Ah
  7668 00005E60 B001                <2> 		mov	al,Channel
  7669 00005E62 EE                  <2> 		out	dx,al
  7670 00005E63 C3                  <2> 		ret
  7671                              <2> 		
  7672                              <2> PlayDSP:
  7673 00005E64 B040                <2> 		mov	al,40h
  7674 00005E66 E891000000          <2> 		call WriteDSP
  7675 00005E6B 31D2                <2> 		xor	edx,edx
  7676 00005E6D B840420F00          <2> 		mov	eax,1000000
  7677 00005E72 8B1D[1E5F0000]      <2> 		mov	ebx,[Freq]
  7678 00005E78 803D[0B5F0000]00    <2> 		cmp byte [Stereo], 0
  7679 00005E7F 7402                <2> 		je .nost
  7680 00005E81 D1E3                <2> 		shl ebx, 1
  7681                              <2> .nost:
  7682 00005E83 F7F3                <2> 		div	ebx
  7683 00005E85 89C3                <2> 		mov	ebx,eax
  7684 00005E87 B800010000          <2> 		mov	eax,256
  7685 00005E8C 29D8                <2> 		sub	eax,ebx
  7686 00005E8E E869000000          <2> 		call WriteDSP
  7687 00005E93 B014                <2> 		mov	al,14h	;write the mode
  7688 00005E95 803D[0B5F0000]00    <2> 		cmp byte [Stereo], 0
  7689 00005E9C 7400                <2> 		je .nost2
  7690                              <2> 		
  7691                              <2> .nost2:
  7692 00005E9E E859000000          <2> 		call WriteDSP
  7693 00005EA3 66A1[115F0000]      <2> 		mov	ax,[Length1]
  7694 00005EA9 66D1E8              <2> 		shr ax, 1
  7695 00005EAC E84B000000          <2> 		call WriteDSP
  7696 00005EB1 86C4                <2> 		xchg al,ah
  7697 00005EB3 E844000000          <2> 		call WriteDSP
  7698 00005EB8 C3                  <2> 		ret
  7699                              <2> 
  7700                              <2> MstrVol:    ;uses ax dx
  7701 00005EB9 6650                <2> 	   push ax
  7702 00005EBB 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7703 00005EBF B022                <2> 	   mov	al,22h
  7704 00005EC1 EE                  <2> 	   out	dx,al
  7705 00005EC2 6658                <2> 	   pop	ax
  7706 00005EC4 6642                <2> 	   inc	dx
  7707 00005EC6 EE                  <2> 	   out	dx,al
  7708 00005EC7 C3                  <2> 	   ret
  7709                              <2> 	   
  7710                              <2> ResetDSP:   ; uses cx dx
  7711 00005EC8 66BA2602            <2> 			mov	dx,(BasePort+6)
  7712 00005ECC B001                <2> 			mov	al,01
  7713 00005ECE EE                  <2> 			out	dx,al
  7714 00005ECF 66B93200            <2> 			mov	cx,50
  7715 00005ED3 EC                  <2> WaitIt1:	in	al,dx
  7716 00005ED4 E2FD                <2> 			loop WaitIt1
  7717 00005ED6 30C0                <2> 			xor	al,al
  7718 00005ED8 EE                  <2> 			out	dx,al
  7719 00005ED9 66B93200            <2> 			mov	cx,50
  7720 00005EDD EC                  <2> WaitIt2:	in	al,dx
  7721 00005EDE E2FD                <2> 			loop WaitIt2
  7722 00005EE0 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7723 00005EE2 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7724 00005EE6 EC                  <2> 			in	al,dx
  7725 00005EE7 2480                <2> 			and	al,80h
  7726 00005EE9 3C80                <2> 			cmp	al,80h
  7727 00005EEB 750C                <2> 			jne	ResetErr
  7728 00005EED 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7729 00005EF1 EC                  <2> 			in	al,dx
  7730 00005EF2 3CAA                <2> 			cmp	al,0AAh
  7731 00005EF4 7503                <2> 			jne	ResetErr
  7732 00005EF6 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7733 00005EF8 C3                  <2> 			ret
  7734 00005EF9 30C0                <2> ResetErr:	xor al, al
  7735 00005EFB C3                  <2> 			ret
  7736                              <2> 
  7737                              <2> WriteDSP:   ;uses ax dx
  7738 00005EFC 6650                <2> 		push ax
  7739 00005EFE 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7740 00005F02 EC                  <2> WaitIt:	in	al,dx
  7741 00005F03 2480                <2> 		and	al,80h
  7742 00005F05 75FB                <2> 		jnz	WaitIt
  7743 00005F07 6658                <2> 		pop	ax
  7744 00005F09 EE                  <2> 		out	dx,al
  7745 00005F0A C3                  <2> 		ret
  7746                              <2> 
  7747 00005F0B 00                  <2> Stereo db 0
  7748 00005F0C 00                  <2> OddLength db 0
  7749 00005F0D 00000000            <2> Length0 dd	0
  7750 00005F11 0000                <2> Length1	dw  0
  7751 00005F13 00000000            <2> NextMemLoc dd 0
  7752 00005F17 00000000            <2> MemLoc	dd  0
  7753 00005F1B 0000                <2> SegLoc  dw 0
  7754 00005F1D 00                  <2> Page1	db  0
  7755 00005F1E 00000000            <2> Freq	dd	0
  7756                              <2> PgPort	equ 83h
  7757                              <2> AddPort	equ 02h
  7758                              <2> LenPort	equ 03h
  7759                              <2> ModeReg	equ 59h
  7760                              <2> Channel	equ 01h
  7761                              <2> BasePort	equ 220h
  7762 00005F22 00                  <2> SoundBlaster	db 0
  7763                              <1> %endif
  7764                              <1> %ifdef io.serial
  7765                              <1> 	%include "source/drivers/input/serial.asm"
  7766                              <1> %else
  7767                              <1> 	%include "source/drivers/input/keyboard.asm"
  7768 00005F23 00                  <2> specialkey db 0
  7769                              <2> ;charregion db 0
  7770                              <2> waitforinput:		;this is basically the idle process
  7771                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7772                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7773 00005F24 6631C0              <2> 	xor ax, ax
  7774 00005F27 A0[B76A0000]        <2> 	mov al, [threadson]
  7775 00005F2C 8825[B76A0000]      <2> 	mov [threadson], ah
  7776 00005F32 9C                  <2> 	pushf
  7777 00005F33 FB                  <2> 	sti
  7778 00005F34 F4                  <2> 	hlt
  7779 00005F35 9D                  <2> 	popf
  7780 00005F36 A2[B76A0000]        <2> 	mov [threadson], al
  7781 00005F3B 66813D[ED230000]00- <2> 	cmp word [trans], 0
  7782 00005F43 00                  <2>
  7783 00005F44 7401                <2> 	je getkey
  7784 00005F46 C3                  <2> 	ret
  7785                              <2> getkey:
  7786 00005F47 31C0                <2> 		xor eax, eax
  7787 00005F49 A2[235F0000]        <2> 		mov [specialkey], al
  7788 00005F4E A3[E9230000]        <2> 		mov [lastkey], eax
  7789 00005F53 E464                <2> 		in al, 64h ; Status
  7790                              <2> 	%ifdef gui.included
  7791 00005F55 A820                <2> 		test al, 20h ; PS2-Mouse?
  7792 00005F57 0F8522FAFFFF        <2> 		jnz near moused
  7793                              <2> 	%endif
  7794 00005F5D A801                <2> 		test al, 1 
  7795 00005F5F 74C3                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7796                              <2> 	calckey:
  7797 00005F61 E460                <2> 		in al, 60h
  7798 00005F63 30E4                <2> 		xor ah, ah
  7799 00005F65 6689C3              <2> 		mov bx, ax
  7800 00005F68 66A3[EB230000]      <2> 		mov [lastkey + 2], ax
  7801 00005F6E BF[FD600000]        <2> 		mov edi, scancode
  7802                              <2> 	searchscan: 
  7803 00005F73 80FB3A              <2> 		cmp bl, 3Ah
  7804 00005F76 7314                <2> 		jae scanother
  7805 00005F78 C1E004              <2> 		shl eax, 4
  7806 00005F7B 01C7                <2> 		add edi, eax
  7807 00005F7D 668B07              <2> 		mov ax, [edi]
  7808 00005F80 663D0000            <2> 		cmp ax, 0
  7809 00005F84 7406                <2> 		je scanother
  7810 00005F86 E9D0000000          <2> 		jmp scanfound
  7811 00005F8B 00                  <2> uppercase db 0
  7812                              <2> scanother:
  7813 00005F8C 6631C0              <2> 		xor ax, ax
  7814 00005F8F 66A3[E9230000]      <2> 		mov [lastkey], ax
  7815 00005F95 80FBE0              <2> 		cmp bl, 0E0h
  7816 00005F98 0F8477000000        <2> 		je near getkeyspecial
  7817 00005F9E 803D[235F0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7818 00005FA5 7525                <2> 		jne nospecialkey
  7819 00005FA7 80FB38              <2> 		cmp bl, 38h
  7820 00005FAA 0F849A000000        <2> 		je near alton
  7821 00005FB0 80FBB8              <2> 		cmp bl, 0B8h
  7822 00005FB3 0F8499000000        <2> 		je near altoff
  7823 00005FB9 80FB1D              <2> 		cmp bl, 1Dh
  7824 00005FBC 0F8478000000        <2> 		je near ctron
  7825 00005FC2 80FB9D              <2> 		cmp bl, 9Dh
  7826 00005FC5 0F8477000000        <2> 		je near ctroff
  7827 00005FCB C3                  <2> 		ret
  7828                              <2> nospecialkey:
  7829 00005FCC 80FB2A              <2> 		cmp bl, 2Ah
  7830 00005FCF 0F8455000000        <2> 		je near shifton
  7831 00005FD5 80FB36              <2> 		cmp bl, 36h
  7832 00005FD8 0F844C000000        <2> 		je near shifton
  7833 00005FDE 80FB1C              <2> 		cmp bl, 1Ch
  7834 00005FE1 0F8473000000        <2> 		je near entdown
  7835 00005FE7 80FBAA              <2> 		cmp bl, 0AAh
  7836 00005FEA 0F8442000000        <2> 		je near shiftoff
  7837 00005FF0 80FBB6              <2> 		cmp bl, 0B6h
  7838 00005FF3 0F8439000000        <2> 		je near shiftoff
  7839 00005FF9 80FB3A              <2> 		cmp bl, 3Ah
  7840 00005FFC 0F84A7000000        <2> 		je near capslock
  7841 00006002 80FB45              <2> 		cmp bl, 0x45
  7842 00006005 0F84AF000000        <2> 		je near numlock
  7843 0000600B 80FB46              <2> 		cmp bl, 0x46
  7844 0000600E 0F84BE000000        <2> 		je near scrolllock
  7845 00006014 C3                  <2> 		ret
  7846                              <2> 	getkeyspecial:
  7847 00006015 C605[235F0000]E0    <2> 		mov byte [specialkey], 0xE0
  7848 0000601C E940FFFFFF          <2> 		jmp calckey
  7849                              <2> 	shift:
  7850 00006021 A0[8B5F0000]        <2> 		mov al, [uppercase]
  7851 00006026 3C01                <2> 		cmp al, 1
  7852 00006028 7308                <2> 		jae shiftoff
  7853                              <2> 	shifton:
  7854 0000602A C605[8B5F0000]01    <2> 		mov byte [uppercase], 1
  7855 00006031 C3                  <2> 		ret
  7856                              <2> 	shiftoff:
  7857 00006032 C605[8B5F0000]00    <2> 		mov byte [uppercase], 0
  7858 00006039 C3                  <2> 		ret
  7859                              <2> 	ctron:
  7860 0000603A C605[A8600000]01    <2> 		mov byte [ctrkey], 1
  7861 00006041 C3                  <2> 		ret
  7862                              <2> 	ctroff:
  7863 00006042 C605[A8600000]00    <2> 		mov byte [ctrkey], 0
  7864 00006049 C3                  <2> 		ret
  7865                              <2> 	alton:
  7866 0000604A C605[A7600000]01    <2> 		mov byte [altkey], 1
  7867 00006051 C3                  <2> 		ret
  7868                              <2> 	altoff:
  7869 00006052 C605[A7600000]00    <2> 		mov byte [altkey], 0
  7870 00006059 C3                  <2> 		ret
  7871                              <2> 	entdown:
  7872 0000605A C3                  <2> 		ret
  7873                              <2> scanfound:
  7874 0000605B 81C708000000        <2> 		add edi, 8
  7875 00006061 803D[A8600000]01    <2> 		cmp byte [ctrkey], 1
  7876 00006068 7306                <2> 		jae ctrlin
  7877 0000606A 81EF08000000        <2> 		sub edi, 8
  7878                              <2> 	ctrlin:
  7879 00006070 81C704000000        <2> 		add edi, 4
  7880 00006076 803D[A7600000]01    <2> 		cmp byte [altkey], 1
  7881 0000607D 7306                <2> 		jae altin
  7882 0000607F 81EF04000000        <2> 		sub edi, 4
  7883                              <2> 	altin:
  7884 00006085 81C702000000        <2> 		add edi, 2
  7885 0000608B 803D[8B5F0000]01    <2> 		cmp byte [uppercase], 1
  7886 00006092 7306                <2> 		jae uppercaseon
  7887 00006094 81EF02000000        <2> 		sub edi, 2
  7888                              <2> 	uppercaseon:
  7889 0000609A 668B07              <2> 		mov ax,[edi]
  7890 0000609D 66A3[E9230000]      <2> 		mov [lastkey], ax
  7891 000060A3 C3                  <2> 		ret
  7892                              <2> 		
  7893 000060A4 00                  <2> keyboardstatus db 0
  7894 000060A5 00                  <2> numlockstatus db 0
  7895 000060A6 00                  <2> scrolllockstatus db 0
  7896 000060A7 00                  <2> altkey db 0
  7897 000060A8 00                  <2> ctrkey db 0
  7898                              <2> 	capslock:
  7899 000060A9 8035[A4600000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7900 000060B0 E835000000          <2> 		call updatekblights
  7901 000060B5 E967FFFFFF          <2> 		jmp shift
  7902                              <2> 		
  7903                              <2> 	numlock:
  7904 000060BA 8035[A4600000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7905 000060C1 8035[A5600000]01    <2> 		xor byte [numlockstatus], 1
  7906 000060C8 E81D000000          <2> 		call updatekblights
  7907 000060CD E975FEFFFF          <2> 		jmp getkey
  7908                              <2> 	
  7909                              <2> 	scrolllock:
  7910 000060D2 8035[A4600000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7911 000060D9 8035[A6600000]01    <2> 		xor byte [scrolllockstatus], 1
  7912 000060E0 E805000000          <2> 		call updatekblights
  7913 000060E5 E95DFEFFFF          <2> 		jmp getkey
  7914                              <2> 		
  7915                              <2> 	updatekblights:
  7916 000060EA B0ED                <2> 		mov al, 0xED
  7917 000060EC 66BA6000            <2> 		mov dx, 0x60
  7918 000060F0 EE                  <2> 		out dx, al
  7919                              <2> 	chkkbdack:
  7920 000060F1 EC                  <2> 		in al, dx
  7921 000060F2 3CFA                <2> 		cmp al, 0xFA
  7922 000060F4 75FB                <2> 		jne chkkbdack
  7923 000060F6 A0[A4600000]        <2> 		mov al, [keyboardstatus]
  7924 000060FB EE                  <2> 		out dx, al
  7925 000060FC C3                  <2> 		ret
  7926                              <2> 		
  7927                              <2> scancode:
  7928                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7929 000060FD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7930 00006106 00000000000000      <2>
  7931 0000610D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7932 00006116 00000000000000      <2>
  7933 0000611D 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7934 00006126 00000000000000      <2>
  7935 0000612D 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7936 00006136 00000000000000      <2>
  7937 0000613D 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7938 00006146 00000000000000      <2>
  7939 0000614D 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7940 00006156 00000000000000      <2>
  7941 0000615D 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7942 00006166 00000000000000      <2>
  7943 0000616D 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7944 00006176 00000000000000      <2>
  7945 0000617D 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7946 00006186 00000000000000      <2>
  7947 0000618D 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7948 00006196 00000000000000      <2>
  7949 0000619D 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7950 000061A6 00000000000000      <2>
  7951 000061AD 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7952 000061B6 00000000000000      <2>
  7953 000061BD 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7954 000061C6 00000000000000      <2>
  7955 000061CD 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7956 000061D6 00000000000000      <2>
  7957 000061DD 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7958 000061E6 00000000000000      <2>
  7959 000061ED 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7960 000061F6 00000000000000      <2>
  7961 000061FD 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7962 00006205 003A0039041904      <2>
  7963 0000620D 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7964 00006216 03000046042604      <2>
  7965 0000621D 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7966 00006226 03950343042304      <2>
  7967 0000622D 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7968 00006236 03A1033A041A04      <2>
  7969 0000623D 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7970 00006246 03A40335041504      <2>
  7971 0000624D 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7972 00006256 03A5033D041D04      <2>
  7973 0000625D 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7974 00006266 03980333041304      <2>
  7975 0000626D 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7976 00006276 03990348042804      <2>
  7977 0000627D 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7978 00006286 039F0349042904      <2>
  7979 0000628D 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7980 00006296 03A00337041704      <2>
  7981 0000629D 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7982 000062A6 00000045042504      <2>
  7983 000062AD 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7984 000062B6 0000004A042A04      <2>
  7985 000062BD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7986 000062C6 00000000000000      <2>
  7987 000062CD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7988 000062D6 00000000000000      <2>
  7989 000062DD 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7990 000062E6 03910344042404      <2>
  7991 000062ED 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7992 000062F6 03A3034B042B04      <2>
  7993 000062FD 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7994 00006306 03940332041204      <2>
  7995 0000630D 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7996 00006316 03A60330041004      <2>
  7997 0000631D 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7998 00006326 0393033F041F04      <2>
  7999 0000632D 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  8000 00006336 03970340042004      <2>
  8001 0000633D 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  8002 00006346 039E033E041E04      <2>
  8003 0000634D 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  8004 00006356 039A033B041B04      <2>
  8005 0000635D 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  8006 00006366 039B0334041404      <2>
  8007 0000636D 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  8008 00006376 00000036041604      <2>
  8009 0000637D 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  8010 00006386 0000004D042D04      <2>
  8011 0000638D 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  8012 00006396 00000051040104      <2>
  8013 0000639D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8014 000063A6 00000000000000      <2>
  8015 000063AD 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  8016 000063B6 0000002F005C00      <2>
  8017 000063BD 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8018 000063C6 0396034F042F04      <2>
  8019 000063CD 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8020 000063D6 03A70347042704      <2>
  8021 000063DD 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8022 000063E6 03A80341042104      <2>
  8023 000063ED 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8024 000063F6 03A9033C041C04      <2>
  8025 000063FD 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8026 00006406 03920338041804      <2>
  8027 0000640D 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8028 00006416 039D0342042204      <2>
  8029 0000641D 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8030 00006426 039C034C042C04      <2>
  8031 0000642D 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8032 00006436 00000031041104      <2>
  8033 0000643D 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8034 00006446 0000004E042E04      <2>
  8035 0000644D 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8036 00006456 0000002E002C00      <2>
  8037 0000645D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8038 00006466 00000000000000      <2>
  8039 0000646D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8040 00006476 00000000000000      <2>
  8041 0000647D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8042 00006486 00000000000000      <2>
  8043 0000648D 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8044 00006496 00000000000000      <2>
  8045                              <2> noscan:
  8046                              <2> 
  8047                              <1> %endif
  8048                              <1> ;drivers will soon be handled intelligently
  8049                              <1> ;every driver's source will be scanned for a .init function
  8050                              <1> ;that will be called and if it returns 0
  8051                              <1> ;the hardware was found and the driver initialized properly
  8052                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8053                              <1> 	%ifdef sound.included
  8054 0000649D E840F8FFFF          <1> 		call sblaster.init
  8055                              <1> 	%endif
  8056                              <1> 	%ifdef network.included
  8057                              <1> 		call network.init
  8058                              <1> 	%endif
  8059 000064A2 C3                  <1> 	ret
  8060                              <1> initialize:
  8061                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8062 000064A3 E83E000000          <1> 	call .pic
  8063                              <1> %ifdef terminal.vsync
  8064 000064A8 E866000000          <1> 	call .rtc
  8065                              <1> %endif
  8066 000064AD E896000000          <1> 	call .pit
  8067 000064B2 E8B8000000          <1> 	call .fpu
  8068 000064B7 E8C9000000          <1> 	call .sse
  8069 000064BC 31C0                <1> 	xor eax, eax
  8070 000064BE 31C9                <1> 	xor ecx, ecx
  8071                              <1> %ifdef io.serial
  8072                              <1> 	call serial.init
  8073                              <1> %endif
  8074 000064C0 E801000000          <1> 	call .time
  8075 000064C5 C3                  <1> 	ret
  8076                              <1> 	
  8077                              <1> .time:
  8078 000064C6 E815DDFFFF          <1> 	call time
  8079 000064CB E8BDDEFFFF          <1> 	call timeconvert
  8080 000064D0 890D[6B020000]      <1> 	mov [timeseconds], ecx
  8081 000064D6 31C9                <1> 	xor ecx, ecx
  8082 000064D8 890D[6F020000]      <1> 	mov [timenanoseconds], ecx
  8083 000064DE C605[28410000]01    <1> 	mov byte [istimeset], 1
  8084 000064E5 C3                  <1> 	ret
  8085                              <1> 	
  8086                              <1> .pic:
  8087 000064E6 B011                <1> 	mov al, 0x11
  8088 000064E8 E620                <1> 	out 0x20, al
  8089 000064EA E6A0                <1> 	out 0xA0, al
  8090 000064EC B040                <1> 	mov al, 0x40	;interrupt for master
  8091 000064EE E621                <1> 	out 0x21, al
  8092 000064F0 B048                <1> 	mov al, 0x48	;interrupt for slave
  8093 000064F2 E6A1                <1> 	out 0xA1, al
  8094 000064F4 B004                <1> 	mov al, 4
  8095 000064F6 E621                <1> 	out 0x21, al
  8096 000064F8 B002                <1> 	mov al, 2
  8097 000064FA E6A1                <1> 	out 0xA1, al
  8098 000064FC B001                <1> 	mov al, 0x1
  8099 000064FE E621                <1> 	out 0x21, al
  8100 00006500 B001                <1> 	mov al, 0x1
  8101 00006502 E6A1                <1> 	out 0xA1, al
  8102                              <1> 	;masks are set to zero so as not to mask
  8103 00006504 30C0                <1> 	xor al, al
  8104 00006506 E621                <1> 	out 0x21, al
  8105 00006508 30C0                <1> 	xor al, al
  8106 0000650A E6A1                <1> 	out 0xA1, al
  8107 0000650C B020                <1> 	mov al, 0x20
  8108 0000650E E6A0                <1> 	out 0xA0, al
  8109 00006510 E620                <1> 	out 0x20, al
  8110 00006512 C3                  <1> 	ret
  8111                              <1> .rtc:
  8112 00006513 B008                <1> 	mov al, 0x8
  8113 00006515 88C4                <1> 	mov ah, al
  8114 00006517 66BA7000            <1> 	mov dx, 0x70
  8115 0000651B EE                  <1> 	out dx, al
  8116 0000651C 6642                <1> 	inc dx
  8117 0000651E EC                  <1> 	in al, dx
  8118 0000651F 86C4                <1> 	xchg al, ah
  8119 00006521 664A                <1> 	dec dx
  8120 00006523 EE                  <1> 	out dx, al
  8121 00006524 6642                <1> 	inc dx
  8122 00006526 86C4                <1> 	xchg al, ah
  8123 00006528 0C40                <1> 	or al, 0x40
  8124 0000652A EE                  <1> 	out dx, al
  8125                              <1> 	
  8126 0000652B B00A                <1> 	mov al, 0xA
  8127 0000652D 664A                <1> 	dec dx
  8128 0000652F EE                  <1> 	out dx, al
  8129 00006530 86C4                <1> 	xchg al, ah
  8130 00006532 6642                <1> 	inc dx
  8131 00006534 EC                  <1> 	in al, dx
  8132 00006535 24F0                <1> 	and al, 0xF0
  8133 00006537 0A05[2A030000]      <1> 	or al, [rtcrate]
  8134 0000653D 86C4                <1> 	xchg al, ah
  8135 0000653F 664A                <1> 	dec dx
  8136 00006541 EE                  <1> 	out dx, al
  8137 00006542 6642                <1> 	inc dx
  8138 00006544 86C4                <1> 	xchg al, ah
  8139 00006546 EE                  <1> 	out dx, al
  8140 00006547 C3                  <1> 	ret
  8141                              <1> 	
  8142                              <1> .pit:
  8143                              <1> 	;initialize the PIT
  8144 00006548 66A1[64020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8145 0000654E E640                <1> 	out 0x40, al
  8146 00006550 66C1C008            <1> 	rol ax, 8
  8147 00006554 E640                <1> 	out 0x40, al
  8148                              <1> 	;enable rtc interrupt
  8149 00006556 B00B                <1> 	mov al, 0xB
  8150 00006558 E670                <1> 	out 0x70, al
  8151 0000655A 66C1C008            <1> 	rol ax, 8
  8152 0000655E E471                <1> 	in al, 0x71
  8153 00006560 66C1C008            <1> 	rol ax, 8
  8154 00006564 E670                <1> 	out 0x70, al
  8155 00006566 66C1C008            <1> 	rol ax, 8
  8156 0000656A 0C40                <1> 	or al, 0x40
  8157 0000656C E671                <1> 	out 0x71, al
  8158 0000656E C3                  <1> 	ret
  8159                              <1> .fpu:
  8160                              <1> 	;And now to initialize the fpu
  8161 0000656F 0F20E0              <1> 	mov eax, cr4
  8162 00006572 0D00020000          <1> 	or eax, 0x200
  8163 00006577 0F22E0              <1> 	mov cr4, eax
  8164 0000657A B87F0B0000          <1> 	mov eax, 0xB7F
  8165 0000657F 50                  <1> 	push eax
  8166 00006580 D92C24              <1> 	fldcw [esp]
  8167 00006583 58                  <1> 	pop eax
  8168 00006584 C3                  <1> 	ret
  8169                              <1> 	
  8170                              <1> .sse:
  8171 00006585 0F20C0              <1> 	mov eax, cr0
  8172 00006588 24FB                <1> 	and al, 11111011b
  8173 0000658A 0C02                <1> 	or al, 00000010b
  8174 0000658C 0F22C0              <1> 	mov cr0, eax
  8175 0000658F 0F20E0              <1> 	mov eax, cr4
  8176 00006592 660D0006            <1> 	or ax, 0000011000000000b
  8177 00006596 0F22E0              <1> 	mov cr4, eax
  8178 00006599 C3                  <1> 	ret
  8179                                      %include "source/pci.asm"
  8180 0000659A 00                  <1> pcibus		db 0
  8181 0000659B 00                  <1> pcidevice	db 0
  8182 0000659C 00                  <1> pcifunction	db 0
  8183 0000659D 00                  <1> pciregister	db 0
  8184 0000659E 00                  <1> pcireqtype	db 0
  8185 0000659F 00000000            <1> pcidevid	dd 0
  8186 000065A3 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8187                              <1> getpcimem:
  8188 000065A7 B002                <1> 	mov al, 2
  8189 000065A9 A2[9E650000]        <1> 	mov [pcireqtype], al
  8190 000065AE E922000000          <1> 	jmp searchpci
  8191                              <1> getpciport:
  8192 000065B3 B001                <1> 	mov al, 1
  8193 000065B5 A2[9E650000]        <1> 	mov [pcireqtype], al
  8194 000065BA E916000000          <1> 	jmp searchpci
  8195                              <1> pcidump:
  8196 000065BF 31C0                <1> 	xor eax, eax
  8197 000065C1 A2[9C650000]        <1> 	mov [pcifunction], al
  8198 000065C6 A2[9A650000]        <1> 	mov [pcibus], al
  8199 000065CB A2[9B650000]        <1> 	mov [pcidevice], al
  8200 000065D0 A2[9E650000]        <1> 	mov [pcireqtype], al
  8201                              <1> searchpci:		;return in ebx, start X in pciX
  8202 000065D5 30C0                <1> 	xor al, al
  8203 000065D7 A2[9D650000]        <1> 	mov [pciregister], al
  8204 000065DC E823020000          <1> 	call getpciaddr
  8205 000065E1 BAF80C0000          <1> 	mov edx, 0xCF8
  8206 000065E6 EF                  <1> 	out dx, eax	;request pci config
  8207 000065E7 BAFC0C0000          <1> 	mov edx, 0xCFC
  8208 000065EC ED                  <1> 	in eax, dx 	;read in pci config
  8209 000065ED 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8210 000065F2 0F823D000000        <1> 	jb near checkpcidevice
  8211                              <1> searchpciret:
  8212                              <1> nextpcidevice:
  8213 000065F8 30C0                <1> 	xor al, al
  8214 000065FA A2[9C650000]        <1> 	mov [pcifunction], al
  8215 000065FF A0[9B650000]        <1> 	mov al, [pcidevice]
  8216 00006604 3C1F                <1> 	cmp al, 11111b
  8217 00006606 0F8306010000        <1> 	jae near nextpcibus
  8218 0000660C FEC0                <1> 	inc al
  8219 0000660E A2[9B650000]        <1> 	mov [pcidevice], al
  8220 00006613 E9BDFFFFFF          <1> 	jmp searchpci
  8221 00006618 A0[9C650000]        <1> 	mov al, [pcifunction]
  8222 0000661D 3C07                <1> 	cmp al, 111b
  8223 0000661F 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  8224 00006625 FEC0                <1> 	inc al
  8225 00006627 A2[9C650000]        <1> 	mov [pcifunction], al
  8226 0000662C E9A4FFFFFF          <1> 	jmp searchpci
  8227 00006631 00000000            <1> pcitype: db 0,0,0,0
  8228                              <1> checkpcidevice:
  8229 00006635 31C0                <1> 	xor eax, eax
  8230 00006637 3905[9F650000]      <1> 	cmp [pcidevid], eax
  8231 0000663D 0F8430000000        <1> 	je near .good
  8232 00006643 A2[9D650000]        <1> 	mov [pciregister], al	;device id, vendor id
  8233 00006648 E8B7010000          <1> 	call getpciaddr
  8234 0000664D BAF80C0000          <1> 	mov edx, 0xCF8
  8235 00006652 EF                  <1> 	out dx, eax
  8236 00006653 BAFC0C0000          <1> 	mov edx, 0xCFC
  8237 00006658 ED                  <1> 	in eax, dx
  8238 00006659 2305[A3650000]      <1> 	and eax, [pcidevidmask]
  8239 0000665F 8B1D[9F650000]      <1> 	mov ebx, [pcidevid]
  8240 00006665 231D[A3650000]      <1> 	and ebx, [pcidevidmask]
  8241 0000666B 39D8                <1> 	cmp eax, ebx
  8242 0000666D 0F8585FFFFFF        <1> 	jne near searchpciret
  8243                              <1> .good:
  8244 00006673 30C0                <1> 	xor al, al
  8245 00006675 3805[9E650000]      <1> 	cmp [pcireqtype], al
  8246 0000667B 0F842C000000        <1> 	je near dumppcidevice
  8247 00006681 B008                <1> 	mov al, 0x08
  8248 00006683 A2[9D650000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8249 00006688 E877010000          <1> 	call getpciaddr
  8250 0000668D BAF80C0000          <1> 	mov edx, 0xCF8
  8251 00006692 EF                  <1> 	out dx, eax
  8252 00006693 BAFC0C0000          <1> 	mov edx, 0xCFC
  8253 00006698 ED                  <1> 	in eax, dx
  8254 00006699 C1C008              <1> 	rol eax, 8
  8255 0000669C 3A05[31660000]      <1> 	cmp al, [pcitype]
  8256 000066A2 0F84A0000000        <1> 	je near foundpciaddr
  8257 000066A8 E94BFFFFFF          <1> 	jmp searchpciret
  8258                              <1> dumppcidevice:
  8259 000066AD 30C0                <1> 	xor al, al
  8260 000066AF A2[9D650000]        <1> 	mov [pciregister], al
  8261 000066B4 E84B010000          <1> 	call getpciaddr
  8262 000066B9 89C1                <1> 	mov ecx, eax
  8263 000066BB C605[7F320000]05    <1> 	mov byte [firsthexshown], 5
  8264 000066C2 E8CDCBFFFF          <1> 	call showhex
  8265                              <1> dumppcidevicelp:
  8266 000066C7 A2[9D650000]        <1> 	mov [pciregister], al
  8267 000066CC E833010000          <1> 	call getpciaddr
  8268 000066D1 BAF80C0000          <1> 	mov edx, 0xCF8
  8269 000066D6 EF                  <1> 	out dx, eax
  8270 000066D7 BAFC0C0000          <1> 	mov edx, 0xCFC
  8271 000066DC ED                  <1> 	in eax, dx
  8272 000066DD 89C1                <1> 	mov ecx, eax
  8273 000066DF A0[9D650000]        <1> 	mov al, [pciregister]
  8274 000066E4 0404                <1> 	add al, 4
  8275 000066E6 C605[7F320000]05    <1> 	mov byte [firsthexshown], 5
  8276 000066ED E8A2CBFFFF          <1> 	call showhex
  8277 000066F2 3C3C                <1> 	cmp al, 0x3C
  8278 000066F4 72D1                <1> 	jb dumppcidevicelp
  8279                              <1> dumppcidn:
  8280                              <1> %ifdef io.serial
  8281                              <1> 	mov esi, line
  8282                              <1> 	call print
  8283                              <1> %else
  8284 000066F6 803D[0F260000]00    <1> 	cmp byte [charpos], 0
  8285 000066FD 0F84F5FEFFFF        <1> 	je near searchpciret
  8286 00006703 BE[DD890000]        <1> 	mov esi, line
  8287 00006708 E860B6FFFF          <1> 	call print
  8288                              <1> %endif
  8289 0000670D E9E6FEFFFF          <1> 	jmp searchpciret
  8290                              <1> nextpcibus:
  8291 00006712 30C0                <1> 	xor al, al
  8292 00006714 A2[9B650000]        <1> 	mov [pcidevice], al
  8293 00006719 A0[9A650000]        <1> 	mov al, [pcibus]
  8294 0000671E 3C7F                <1> 	cmp al, 1111111b
  8295 00006720 730C                <1> 	jae donesearchpci
  8296 00006722 FEC0                <1> 	inc al
  8297 00006724 A2[9A650000]        <1> 	mov [pcibus], al
  8298 00006729 E9A7FEFFFF          <1> 	jmp searchpci
  8299                              <1> donesearchpci:
  8300 0000672E BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8301 00006733 31D2                <1> 	xor edx, edx
  8302 00006735 8815[31660000]      <1> 	mov [pcitype], dl
  8303 0000673B 8915[9F650000]      <1> 	mov [pcidevid], edx
  8304 00006741 891D[A3650000]      <1> 	mov [pcidevidmask], ebx
  8305 00006747 C3                  <1> 	ret
  8306                              <1> foundpciaddr:
  8307 00006748 B010                <1> 	mov al, 0x10
  8308 0000674A A2[9D650000]        <1> 	mov [pciregister], al
  8309 0000674F 803D[9E650000]02    <1> 	cmp byte [pcireqtype], 2
  8310 00006756 7443                <1> 	je findpcimemaddr
  8311                              <1> findpciioaddr:
  8312 00006758 E8A7000000          <1> 	call getpciaddr
  8313 0000675D BAF80C0000          <1> 	mov edx, 0xCF8
  8314 00006762 EF                  <1> 	out dx, eax
  8315 00006763 BAFC0C0000          <1> 	mov edx, 0xCFC
  8316 00006768 ED                  <1> 	in eax, dx
  8317 00006769 89C3                <1> 	mov ebx, eax
  8318 0000676B 81E301000000        <1> 	and ebx, 1
  8319 00006771 81FB00000000        <1> 	cmp ebx, 0
  8320 00006777 0F846E000000        <1> 	je near notpciioaddr
  8321 0000677D 2D01000000          <1> 	sub eax, 1
  8322 00006782 89C2                <1> 	mov edx, eax
  8323 00006784 31DB                <1> 	xor ebx, ebx
  8324 00006786 4B                  <1> 	dec ebx
  8325 00006787 891D[A3650000]      <1> 	mov [pcidevidmask], ebx
  8326 0000678D 43                  <1> 	inc ebx
  8327 0000678E 881D[31660000]      <1> 	mov [pcitype], bl
  8328 00006794 891D[9F650000]      <1> 	mov [pcidevid], ebx
  8329 0000679A C3                  <1> 	ret
  8330                              <1> findpcimemaddr:
  8331 0000679B E864000000          <1> 	call getpciaddr
  8332 000067A0 BAF80C0000          <1> 	mov edx, 0xCF8
  8333 000067A5 EF                  <1> 	out dx, eax
  8334 000067A6 BAFC0C0000          <1> 	mov edx, 0xCFC
  8335 000067AB ED                  <1> 	in eax, dx
  8336 000067AC 89C3                <1> 	mov ebx, eax
  8337 000067AE 81E301000000        <1> 	and ebx, 1
  8338 000067B4 81FB01000000        <1> 	cmp ebx, 1
  8339 000067BA 0F842B000000        <1> 	je near notpciioaddr
  8340 000067C0 C1E804              <1> 	shr eax, 4
  8341 000067C3 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8342 000067C6 89C2                <1> 	mov edx, eax
  8343 000067C8 50                  <1> 	push eax
  8344 000067C9 A1[4B020000]        <1> 	mov eax, [basecache]
  8345 000067CE C1E004              <1> 	shl eax, 4
  8346 000067D1 29C2                <1> 	sub edx, eax
  8347 000067D3 58                  <1> 	pop eax
  8348 000067D4 31DB                <1> 	xor ebx, ebx
  8349 000067D6 4B                  <1> 	dec ebx
  8350 000067D7 891D[A3650000]      <1> 	mov [pcidevidmask], ebx
  8351 000067DD 43                  <1> 	inc ebx
  8352 000067DE 881D[31660000]      <1> 	mov [pcitype], bl
  8353 000067E4 891D[9F650000]      <1> 	mov [pcidevid], ebx
  8354 000067EA C3                  <1> 	ret
  8355                              <1> notpciioaddr:
  8356 000067EB A0[9D650000]        <1> 	mov al, [pciregister]
  8357 000067F0 0404                <1> 	add al, 4
  8358 000067F2 3C28                <1> 	cmp al, 0x28
  8359 000067F4 0F87FEFDFFFF        <1> 	ja near searchpciret
  8360 000067FA A2[9D650000]        <1> 	mov [pciregister], al
  8361 000067FF E954FFFFFF          <1> 	jmp findpciioaddr
  8362                              <1> getpciaddr:		;puts it in eax and ebx
  8363 00006804 31C0                <1> 			xor eax, eax
  8364 00006806 BB00000080          <1> 			mov ebx, 0x80000000
  8365 0000680B A0[9A650000]        <1> 			mov al, [pcibus]
  8366 00006810 C1E010              <1> 			shl eax, 16
  8367 00006813 01C3                <1> 			add ebx, eax
  8368 00006815 31C0                <1> 			xor eax, eax
  8369 00006817 A0[9B650000]        <1> 			mov al, [pcidevice]
  8370 0000681C C1E00B              <1> 			shl eax, 11
  8371 0000681F 01C3                <1> 			add ebx, eax
  8372 00006821 31C0                <1> 			xor eax, eax
  8373 00006823 A0[9C650000]        <1> 			mov al, [pcifunction]
  8374 00006828 C1E008              <1> 			shl eax, 8
  8375 0000682B 01C3                <1> 			add ebx, eax
  8376 0000682D 31C0                <1> 			xor eax, eax
  8377 0000682F A0[9D650000]        <1> 			mov al, [pciregister]
  8378 00006834 01C3                <1> 			add ebx, eax
  8379 00006836 89D8                <1> 			mov eax, ebx
  8380 00006838 C3                  <1> 			ret
  8381                                      %include "source/disk.asm"
  8382                              <1> %ifdef disk.real
  8383                              <1> 	%include "source/drivers/disk/realmode.asm"
  8384                              <2> diskr:
  8385                              <2> 			;sector count in cl
  8386                              <2> 			;disk number in ch
  8387                              <2> 			;48 bit address with last 32 bits in ebx
  8388                              <2> 			;buffer in esi
  8389                              <2> 			;puts end of buffer in edi and end lba address in edx
  8390 00006839 880D[60680000]      <2> 	mov [sdlength], cl
  8391 0000683F 891D[61680000]      <2> 	mov [sdaddress], ebx
  8392 00006845 8935[E2690000]      <2> 	mov [oldesireal], esi
  8393 0000684B 66BE[6568]          <2> 	mov si, readdiskreal
  8394 0000684F 668935[050D0000]    <2> 	mov [realmodeptr], si
  8395 00006856 E898A3FFFF          <2> 	call realmode
  8396 0000685B E941000000          <2> 	jmp backfromrealread
  8397 00006860 00                  <2> sdlength db 0
  8398 00006861 00000000            <2> sdaddress dd 0
  8399                              <2> 
  8400                              <2> [BITS 16]
  8401                              <2> readdiskreal:
  8402 00006865 C706[9168]1000      <2> 	mov word [dlen], 0x10
  8403 0000686B C706[9568]0000      <2> 	mov word [daddress], 0
  8404 00006871 C706[9768]0001      <2> 	mov word [dsegm], 0x100
  8405 00006877 66891E[9968]        <2> 	mov [dlbaad], ebx
  8406 0000687C 880E[9368]          <2> 	mov [dreadlen], cl
  8407                              <2> ReadHardDisk:
  8408 00006880 BE[9168]            <2> 	mov si, diskaddresspacket
  8409 00006883 31C0                <2> 	xor ax, ax
  8410 00006885 B442                <2> 	mov ah, 0x42
  8411 00006887 8A16[9068]          <2> 	mov dl, [dnumber]
  8412 0000688B CD13                <2> 	int 0x13
  8413 0000688D 72F1                <2> 	jc ReadHardDisk
  8414 0000688F C3                  <2> 	ret
  8415                              <2> 
  8416 00006890 80                  <2> dnumber db 0x80
  8417                              <2> diskaddresspacket:
  8418 00006891 10                  <2> dlen:	db 0x10 ;size of packet
  8419 00006892 00                  <2> 		db 0
  8420 00006893 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8421 00006895 0000                <2> daddress:	dw 0	;address 0
  8422 00006897 0001                <2> dsegm:		dw 0x100	;segment
  8423                              <2> 		;start with known value for hd
  8424                              <2> dlbaad:
  8425 00006899 00000000            <2> 	dd 0	;lba address
  8426 0000689D 00000000            <2> 	dd 0
  8427                              <2> [BITS 32]
  8428                              <2> backfromrealread:
  8429 000068A1 8B35[E2690000]      <2> 	mov esi, [oldesireal]
  8430 000068A7 8B1D[61680000]      <2> 	mov ebx, [sdaddress]
  8431 000068AD 31C9                <2> 	xor ecx, ecx
  8432 000068AF 8A0D[60680000]      <2> 	mov cl, [sdlength]
  8433 000068B5 01CB                <2> 	add ebx, ecx
  8434 000068B7 66B80800            <2> 	mov ax, LINEAR_SEL
  8435 000068BB 8EE0                <2> 	mov fs, ax
  8436 000068BD BF00100000          <2> 	mov edi, 0x1000
  8437 000068C2 B200                <2> 	mov dl, 0
  8438 000068C4 D0E1                <2> 	shl cl, 1
  8439                              <2> copyfromrmodedisk:
  8440 000068C6 648A07              <2> 	mov al, [fs:edi]
  8441 000068C9 8806                <2> 	mov [esi], al
  8442 000068CB 47                  <2> 	inc edi
  8443 000068CC 46                  <2> 	inc esi
  8444 000068CD FECA                <2> 	dec dl
  8445 000068CF 80FA00              <2> 	cmp dl, 0
  8446 000068D2 75F2                <2> 	jne copyfromrmodedisk
  8447 000068D4 FEC9                <2> 	dec cl
  8448 000068D6 B200                <2> 	mov dl, 0
  8449 000068D8 80F900              <2> 	cmp cl, 0
  8450 000068DB 75E9                <2> 	jne copyfromrmodedisk
  8451 000068DD 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8452 000068E1 8EE0                <2> 	mov fs, ax
  8453 000068E3 89F7                <2> 	mov edi, esi
  8454 000068E5 8B35[E2690000]      <2> 	mov esi, [oldesireal]
  8455 000068EB 89DA                <2> 	mov edx, ebx
  8456 000068ED 8B1D[61680000]      <2> 	mov ebx, [sdaddress]
  8457 000068F3 C3                  <2> 	ret
  8458                              <2> 	
  8459                              <1> %else
  8460                              <1> 	%ifdef disk.protected
  8461                              <1> 		%include "source/drivers/disk/pata.asm"
  8462                              <1> 	%endif
  8463                              <1> %endif
  8464                              <1> %ifdef disk.none
  8465                              <1> loadfile:	xor edx, edx
  8466                              <1> 			cmp byte [edi], '&'
  8467                              <1> 			je .ret
  8468                              <1> 			mov edx, 404	;no files are found except &
  8469                              <1> 		.ret:
  8470                              <1> 			ret
  8471                              <1> %else
  8472                              <1> ;This loads files using the methods in the loaded driver
  8473                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8474                              <1> 			;returns with err code in edx and file end in edi
  8475 000068F4 803F00              <1> 	cmp byte [edi], 0
  8476 000068F7 0F8448000000        <1> 	je near nofileload
  8477 000068FD 89FA                <1> 	mov edx, edi
  8478 000068FF BB[5C8C0300]        <1> 	mov ebx, diskfileindex
  8479                              <1> nextnamechar:
  8480 00006904 8A07                <1> 	mov al, [edi]
  8481 00006906 3C26                <1> 	cmp al, '&'
  8482 00006908 7440                <1> 	je nullfile
  8483 0000690A 8A23                <1> 	mov ah, [ebx]
  8484 0000690C 47                  <1> 	inc edi
  8485 0000690D 43                  <1> 	inc ebx
  8486 0000690E 88C1                <1> 	mov cl, al
  8487 00006910 08E1                <1> 	or cl, ah
  8488 00006912 80F900              <1> 	cmp cl, 0
  8489 00006915 746E                <1> 	je equalfilenames
  8490 00006917 80F920              <1> 	cmp cl, ' '
  8491 0000691A 7469                <1> 	je equalfilenames
  8492 0000691C 3C2A                <1> 	cmp al, '*'
  8493 0000691E 742B                <1> 	je asteriskcheck
  8494 00006920 80FC00              <1> 	cmp ah, 0
  8495 00006923 7410                <1> 	je nextfilename
  8496 00006925 3C00                <1> 	cmp al, 0
  8497 00006927 7404                <1> 	je getebxzero
  8498 00006929 38E0                <1> 	cmp al, ah
  8499 0000692B 74D7                <1> 	je nextnamechar
  8500                              <1> getebxzero:
  8501 0000692D 8A23                <1> 	mov ah, [ebx]
  8502 0000692F 43                  <1> 	inc ebx
  8503 00006930 80FC00              <1> 	cmp ah, 0
  8504 00006933 75F8                <1> 	jne getebxzero
  8505                              <1> nextfilename:
  8506 00006935 81C308000000        <1> 	add ebx, 8		;next descriptor
  8507 0000693B 89D7                <1> 	mov edi, edx
  8508 0000693D 81FB[528D0300]      <1> 	cmp ebx, enddiskfileindex
  8509 00006943 72BF                <1> 	jb nextnamechar
  8510                              <1> nofileload:
  8511 00006945 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8512                              <1> nullfile:
  8513 0000694A C3                  <1> 	ret
  8514                              <1> asteriskcheck:
  8515 0000694B 4B                  <1> 	dec ebx
  8516 0000694C 8A07                <1> 	mov al, [edi]
  8517 0000694E 3C2A                <1> 	cmp al, '*'
  8518 00006950 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8519 00006952 3C20                <1> 	cmp al, ' '
  8520 00006954 7415                <1> 	je equalfilenames2
  8521 00006956 3C00                <1> 	cmp al, 0
  8522 00006958 7411                <1> 	je equalfilenames2
  8523                              <1> .lp:
  8524 0000695A 8A23                <1> 	mov ah, [ebx]
  8525 0000695C 80FC00              <1> 	cmp ah, 0
  8526 0000695F 74D4                <1> 	je nextfilename
  8527 00006961 38E0                <1> 	cmp al, ah
  8528 00006963 749F                <1> 	je nextnamechar
  8529 00006965 43                  <1> 	inc ebx
  8530 00006966 E9EFFFFFFF          <1> 	jmp .lp
  8531                              <1> equalfilenames2:
  8532 0000696B 81EB02000000        <1> 	sub ebx, 2
  8533                              <1> eqfilefind:
  8534 00006971 43                  <1> 	inc ebx
  8535 00006972 81FB[528D0300]      <1> 	cmp ebx, enddiskfileindex
  8536 00006978 0F83C7FFFFFF        <1> 	jae near nofileload
  8537 0000697E 8A03                <1> 	mov al, [ebx]
  8538 00006980 3C00                <1> 	cmp al, 0
  8539 00006982 75ED                <1> 	jne eqfilefind
  8540 00006984 43                  <1> 	inc ebx
  8541                              <1> equalfilenames:
  8542 00006985 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8543 00006988 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8544 0000698A 031D[048A0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8545 00006990 31C9                <1> 	xor ecx, ecx
  8546 00006992 88C1                <1> 	mov cl, al			;get excess number of sectors
  8547 00006994 C0E102              <1> 	shl cl, 2
  8548 00006997 C0E902              <1> 	shr cl, 2			;cut off at 64
  8549 0000699A 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8550 0000699C B500                <1> 	mov ch, 0			;drive 0
  8551 0000699E C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8552                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8553 000069A1 A3[E6690000]        <1> 	mov [filetracks], eax
  8554 000069A6 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8555 000069A8 89DA                <1> 	mov edx, ebx
  8556 000069AA 80F900              <1> 	cmp cl, 0
  8557 000069AD 7405                <1> 	je copytracksforfile
  8558 000069AF E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  8559                              <1> copytracksforfile:
  8560 000069B4 A1[E6690000]        <1> 	mov eax, [filetracks]
  8561 000069B9 3D00000000          <1> 	cmp eax, 0
  8562 000069BE 741C                <1> 	je donecopyfile
  8563 000069C0 48                  <1> 	dec eax
  8564 000069C1 A3[E6690000]        <1> 	mov [filetracks], eax
  8565 000069C6 89D3                <1> 	mov ebx, edx	;get end lba
  8566 000069C8 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8567 000069CA 8A2D[038A0000]      <1> 	mov ch, [DriveNumber]
  8568 000069D0 89FE                <1> 	mov esi, edi	;reset buffer
  8569 000069D2 E862FEFFFF          <1> 	call diskr
  8570 000069D7 E9D8FFFFFF          <1> 	jmp copytracksforfile
  8571                              <1> donecopyfile:
  8572 000069DC BA00000000          <1> 	mov edx, 0	;no error
  8573 000069E1 C3                  <1> 	ret
  8574                              <1> 
  8575 000069E2 00000000            <1> oldesireal dd 0
  8576 000069E6 00000000            <1> filetracks dd 0
  8577 000069EA 00                  <1> lbad1 db 0
  8578 000069EB 00                  <1> lbad2 db 0
  8579 000069EC 00                  <1> lbad3 db 0
  8580 000069ED 00                  <1> lbad4 db 0
  8581 000069EE 00                  <1> lbad5 db 0
  8582 000069EF 00                  <1> lbad6 db 0
  8583 000069F0 6400                <1> segments dw 100
  8584                              <1> %endif
  8585                                      %include "source/threads.asm"
  8586                              <1> %ifdef threads.included	
  8587                              <1> nwcmdst:
  8588 000069F2 31C0                <1> 	xor eax, eax
  8589 000069F4 BC[00AE0300]        <1> 	mov esp, stackend
  8590 000069F9 A2[B76A0000]        <1> 	mov [threadson], al
  8591 000069FE A3[B86A0000]        <1> 	mov [currentthread], eax
  8592 00006A03 0504000000          <1> 	add eax, 4
  8593 00006A08 A3[B36A0000]        <1> 	mov [lastthread], eax
  8594 00006A0D FB                  <1> 	sti
  8595 00006A0E E973C3FFFF          <1> 	jmp nwcmd
  8596                              <1> 
  8597                              <1> nomorethreadspace:
  8598 00006A13 BE[296A0000]        <1> 	mov esi, nmts
  8599 00006A18 E850B3FFFF          <1> 	call print
  8600 00006A1D C605[B76A0000]00    <1> 	mov byte [threadson], 0
  8601 00006A24 E95DC3FFFF          <1> 	jmp nwcmd
  8602 00006A29 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8603 00006A32 6572666C6F770A00    <1>
  8604                              <1> 
  8605                              <1> nomorestackspace:
  8606 00006A3A BE[496A0000]        <1> 	mov esi, nmss
  8607 00006A3F E829B3FFFF          <1> 	call print
  8608 00006A44 E9A9FFFFFF          <1> 	jmp nwcmdst
  8609 00006A49 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8610 00006A52 72666C6F770A00      <1>
  8611                              <1> 	
  8612                              <1> threadswitch:
  8613 00006A59 60                  <1> 	pushad 
  8614 00006A5A BF[3C9E2D00]        <1> 	mov edi, threadlist
  8615 00006A5F A1[B86A0000]        <1> 	mov eax, [currentthread]
  8616 00006A64 40                  <1> 	inc eax
  8617 00006A65 A3[B86A0000]        <1> 	mov [currentthread], eax
  8618 00006A6A 6648                <1> 	dec ax
  8619 00006A6C C1E002              <1> 	shl eax, 2
  8620 00006A6F 01C7                <1> 	add edi, eax
  8621 00006A71 8927                <1> 	mov [edi], esp
  8622 00006A73 81C704000000        <1> 	add edi, 4
  8623 00006A79 81FF[3CAE2D00]      <1> 	cmp edi, threadlistend
  8624 00006A7F 0F830D000000        <1> 	jae near nookespthread
  8625 00006A85 8B07                <1> 	mov eax, [edi]
  8626 00006A87 3D00000000          <1> 	cmp eax, 0
  8627 00006A8C 0F8519000000        <1> 	jne near okespthread
  8628                              <1> nookespthread:
  8629 00006A92 BF[3C9E2D00]        <1> 	mov edi, threadlist
  8630 00006A97 31C0                <1> 	xor eax, eax
  8631 00006A99 A3[B86A0000]        <1> 	mov [currentthread], eax
  8632 00006A9E 8B07                <1> 	mov eax, [edi]
  8633 00006AA0 3D00000000          <1> 	cmp eax, 0
  8634 00006AA5 0F8447FFFFFF        <1> 	je near nwcmdst
  8635                              <1> okespthread:
  8636 00006AAB 89C4                <1> 	mov esp, eax
  8637 00006AAD B020                <1> 	mov al, 0x20
  8638 00006AAF E620                <1> 	out 0x20, al
  8639 00006AB1 61                  <1> 	popad
  8640 00006AB2 CF                  <1> 	iret
  8641                              <1> 
  8642                              <1> %endif
  8643 00006AB3 04000000            <1> 	lastthread dd 4
  8644 00006AB7 00                  <1> 	threadson db 0
  8645 00006AB8 00000000            <1> 	currentthread dd 0
  8646                                  %ifdef gui.included
  8647                                      %include "source/gui/gui.asm"
  8648                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8649 00006ABC 31C0                <1> 	xor eax, eax
  8650 00006ABE 31DB                <1> 	xor ebx, ebx
  8651 00006AC0 31C9                <1> 	xor ecx, ecx
  8652 00006AC2 31D2                <1> 	xor edx, edx
  8653 00006AC4 E80D090000          <1> 	call guisetup
  8654                              <1> guiloop:
  8655 00006AC9 E85DEEFFFF          <1> 	call cursorgui
  8656                              <1> guistart:
  8657 00006ACE E874F4FFFF          <1> 	call getkey
  8658 00006AD3 C605[12810000]00    <1> 	mov byte [copygui], 0
  8659 00006ADA E9EFFFFFFF          <1> 	jmp guistart
  8660                              <1> 
  8661                              <1> %include "source/gui/bmp.asm"
  8662                              <2> showbmp:
  8663 00006ADF 668B06              <2> 	mov ax, [esi]
  8664 00006AE2 663D424D            <2> 	cmp ax, "BM"
  8665 00006AE6 0F85BB000000        <2> 	jne near endedbmp
  8666 00006AEC 8B3D[4E580000]      <2> 	mov edi, [physbaseptr]
  8667 00006AF2 6689D0              <2> 	mov ax, dx
  8668 00006AF5 6689CB              <2> 	mov bx, cx
  8669 00006AF8 31C9                <2> 	xor ecx, ecx
  8670 00006AFA 31D2                <2> 	xor edx, edx
  8671 00006AFC 6689D9              <2> 	mov cx, bx
  8672 00006AFF 6689C2              <2> 	mov dx, ax
  8673 00006B02 01D7                <2> 	add edi, edx
  8674 00006B04 01D7                <2> 	add edi, edx
  8675 00006B06 31D2                <2> 	xor edx, edx
  8676 00006B08 668B15[26590000]    <2> 	mov dx, [resolutionx2]
  8677 00006B0F 034E16              <2> 	add ecx, [esi + 22]
  8678                              <2> bmplocloop:
  8679 00006B12 52                  <2> 	push edx
  8680 00006B13 31C0                <2> 	xor eax, eax
  8681 00006B15 6689D0              <2> 	mov ax, dx
  8682 00006B18 F7E1                <2> 	mul ecx
  8683 00006B1A 5A                  <2> 	pop edx
  8684 00006B1B 663B0D[3A580000]    <2> 	cmp cx, [resolutiony]
  8685 00006B22 7609                <2> 	jbe .nofixy
  8686 00006B24 31C9                <2> 	xor ecx, ecx
  8687 00006B26 668B0D[3A580000]    <2> 	mov cx, [resolutiony]
  8688                              <2> .nofixy:
  8689 00006B2D 01C7                <2> 	add edi, eax
  8690 00006B2F 8B5612              <2> 	mov edx, [esi + 18]
  8691 00006B32 8B4E16              <2> 	mov ecx, [esi + 22]
  8692 00006B35 8B460A              <2> 	mov eax, [esi + 10]
  8693 00006B38 8B5E02              <2> 	mov ebx, [esi + 2]
  8694 00006B3B 01F3                <2> 	add ebx, esi
  8695 00006B3D 891D[AD6B0000]      <2> 	mov [bmpend], ebx
  8696 00006B43 89D3                <2> 	mov ebx, edx
  8697 00006B45 01C6                <2> 	add esi, eax
  8698                              <2> ldxbmp2:
  8699 00006B47 31D2                <2> 	xor edx, edx
  8700 00006B49 668B15[38580000]    <2> 	mov dx, [resolutionx]
  8701 00006B50 39D3                <2> 	cmp ebx, edx
  8702 00006B52 7702                <2> 	ja ldxbmp
  8703 00006B54 89DA                <2> 	mov edx, ebx
  8704                              <2> ldxbmp:
  8705 00006B56 668B06              <2> 	mov ax, [esi]
  8706 00006B59 668907              <2> 	mov [edi], ax
  8707 00006B5C 81C702000000        <2> 	add edi, 2
  8708 00006B62 81C602000000        <2> 	add esi, 2
  8709 00006B68 3B35[AD6B0000]      <2> 	cmp esi, [bmpend]
  8710 00006B6E 7737                <2> 	ja endedbmp
  8711 00006B70 4A                  <2> 	dec edx
  8712 00006B71 81FA00000000        <2> 	cmp edx, 0
  8713 00006B77 77DD                <2> 	ja ldxbmp
  8714 00006B79 31D2                <2> 	xor edx, edx
  8715 00006B7B 668B15[38580000]    <2> 	mov dx, [resolutionx]
  8716 00006B82 39D3                <2> 	cmp ebx, edx
  8717 00006B84 7610                <2> 	jbe .notover
  8718                              <2> .over:
  8719 00006B86 01DE                <2> 	add esi, ebx
  8720 00006B88 01DE                <2> 	add esi, ebx
  8721 00006B8A 29D6                <2> 	sub esi, edx
  8722 00006B8C 29D6                <2> 	sub esi, edx
  8723 00006B8E 01DF                <2> 	add edi, ebx
  8724 00006B90 01DF                <2> 	add edi, ebx
  8725 00006B92 29D7                <2> 	sub edi, edx
  8726 00006B94 29D7                <2> 	sub edi, edx
  8727                              <2> .notover:
  8728 00006B96 29DF                <2> 	sub edi, ebx
  8729 00006B98 29DF                <2> 	sub edi, ebx
  8730 00006B9A 29D7                <2> 	sub edi, edx
  8731 00006B9C 29D7                <2> 	sub edi, edx
  8732 00006B9E 49                  <2> 	dec ecx
  8733 00006B9F 81F900000000        <2> 	cmp ecx, 0
  8734 00006BA5 77A0                <2> 	ja ldxbmp2
  8735                              <2> endedbmp:
  8736 00006BA7 E888030000          <2> 	call switchmousepos2
  8737 00006BAC C3                  <2> 	ret
  8738                              <2> 	
  8739 00006BAD 00000000            <2> 	bmpend dd 0
  8740                              <1> %include "source/gui/circle.asm"
  8741                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8742 00006BB1 55                  <2> 	push ebp
  8743 00006BB2 663D0000            <2> 	cmp ax, 0
  8744 00006BB6 770A                <2> 	ja .nozerocircle
  8745 00006BB8 E8751D0000          <2> 	call putpixel	;the easiest circle ever
  8746 00006BBD E9F7000000          <2> 	jmp .done
  8747                              <2> .nozerocircle:
  8748 00006BC2 6689F5              <2> 	mov bp, si
  8749 00006BC5 6650                <2> 	push ax
  8750 00006BC7 E8A71D0000          <2> 	call getpixelmem
  8751 00006BCC 31C0                <2> 	xor eax, eax
  8752 00006BCE 6658                <2> 	pop ax
  8753 00006BD0 BE01000000          <2> 	mov esi, 1
  8754 00006BD5 29C6                <2> 	sub esi, eax
  8755 00006BD7 89C1                <2> 	mov ecx, eax
  8756 00006BD9 31C0                <2> 	xor eax, eax
  8757 00006BDB 66A1[26590000]      <2> 	mov ax, [resolutionx2]
  8758 00006BE1 F7E1                <2> 	mul ecx
  8759 00006BE3 50                  <2> 	push eax
  8760 00006BE4 31D2                <2> 	xor edx, edx
  8761 00006BE6 01C7                <2> 	add edi, eax
  8762 00006BE8 66892F              <2> 	mov [edi], bp
  8763 00006BEB 29C7                <2> 	sub edi, eax
  8764 00006BED 29C7                <2> 	sub edi, eax
  8765 00006BEF 66892F              <2> 	mov [edi], bp
  8766 00006BF2 01C7                <2> 	add edi, eax
  8767 00006BF4 D1E1                <2> 	shl ecx, 1
  8768 00006BF6 01CF                <2> 	add edi, ecx
  8769 00006BF8 66892F              <2> 	mov [edi], bp
  8770 00006BFB D1E1                <2> 	shl ecx, 1
  8771 00006BFD 29CF                <2> 	sub edi, ecx
  8772 00006BFF 66892F              <2> 	mov [edi], bp
  8773 00006C02 D1E9                <2> 	shr ecx, 1
  8774 00006C04 01CF                <2> 	add edi, ecx
  8775 00006C06 D1E9                <2> 	shr ecx, 1
  8776 00006C08 B802000000          <2> 	mov eax, 2
  8777 00006C0D F7E1                <2> 	mul ecx
  8778 00006C0F 48                  <2> 	dec eax
  8779 00006C10 F7D0                <2> 	not eax ;make it negative
  8780 00006C12 A3[BF6C0000]        <2> 	mov [.ddF_y], eax
  8781 00006C17 58                  <2> 	pop eax
  8782 00006C18 BB01000000          <2> 	mov ebx, 1
  8783 00006C1D 891D[BB6C0000]      <2> 	mov [.ddF_x], ebx
  8784 00006C23 4B                  <2> 	dec ebx
  8785 00006C24 31D2                <2> 	xor edx, edx
  8786 00006C26 E904000000          <2> 	jmp .lp
  8787                              <2> .lpb:
  8788 00006C2B D1EA                <2> 	shr edx, 1
  8789 00006C2D D1E9                <2> 	shr ecx, 1
  8790                              <2> .lp:	;it starts this with the center in edi
  8791                              <2> 		;color in bp
  8792                              <2> 		;ddF_x in memory
  8793                              <2> 		;x*resolutionx2 in ebx
  8794                              <2> 		;x in edx
  8795                              <2> 		;ddF_y in memory
  8796                              <2> 		;y*resolutionx2 in eax
  8797                              <2> 		;f in esi
  8798                              <2> 		;y in ecx
  8799 00006C2F 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8800 00006C35 7717                <2> 	ja	.noddF_y
  8801 00006C37 49                  <2> 	dec ecx
  8802 00006C38 2B05[26590000]      <2> 	sub eax, [resolutionx2]
  8803 00006C3E 8105[BF6C0000]0200- <2> 	add dword [.ddF_y], 2
  8804 00006C46 0000                <2>
  8805 00006C48 0335[BF6C0000]      <2> 	add esi, [.ddF_y]
  8806                              <2> .noddF_y:
  8807 00006C4E 42                  <2> 	inc edx
  8808 00006C4F 031D[26590000]      <2> 	add ebx, [resolutionx2]
  8809 00006C55 8105[BB6C0000]0200- <2> 	add dword [.ddF_x], 2
  8810 00006C5D 0000                <2>
  8811 00006C5F 0335[BB6C0000]      <2> 	add esi, [.ddF_x]
  8812                              <2> 
  8813 00006C65 D1E2                <2> 	shl edx, 1
  8814 00006C67 D1E1                <2> 	shl ecx, 1
  8815 00006C69 01D7                <2> 	add edi, edx
  8816 00006C6B 01C7                <2> 	add edi, eax
  8817 00006C6D 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8818 00006C70 D1E2                <2> 	shl edx, 1
  8819 00006C72 29D7                <2> 	sub edi, edx
  8820 00006C74 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8821 00006C77 D1E0                <2> 	shl eax, 1
  8822 00006C79 29C7                <2> 	sub edi, eax
  8823 00006C7B 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8824 00006C7E 01D7                <2> 	add edi, edx
  8825 00006C80 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8826 00006C83 D1E8                <2> 	shr eax, 1
  8827 00006C85 D1EA                <2> 	shr edx, 1
  8828 00006C87 01C7                <2> 	add edi, eax
  8829 00006C89 29D7                <2> 	sub edi, edx
  8830                              <2> 
  8831 00006C8B 39D1                <2> 	cmp ecx, edx
  8832 00006C8D 749C                <2> 	je .lpb
  8833                              <2> 
  8834 00006C8F 01DF                <2> 	add edi, ebx
  8835 00006C91 01CF                <2> 	add edi, ecx
  8836 00006C93 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8837 00006C96 D1E1                <2> 	shl ecx, 1
  8838 00006C98 29CF                <2> 	sub edi, ecx
  8839 00006C9A 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8840 00006C9D D1E3                <2> 	shl ebx, 1
  8841 00006C9F 29DF                <2> 	sub edi, ebx
  8842 00006CA1 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8843 00006CA4 01CF                <2> 	add edi, ecx
  8844 00006CA6 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8845 00006CA9 D1EB                <2> 	shr ebx, 1
  8846 00006CAB D1E9                <2> 	shr ecx, 1
  8847 00006CAD 01DF                <2> 	add edi, ebx
  8848 00006CAF 29CF                <2> 	sub edi, ecx
  8849 00006CB1 39CA                <2> 	cmp edx, ecx
  8850 00006CB3 0F8272FFFFFF        <2> 	jb .lpb
  8851                              <2> .done:
  8852 00006CB9 5D                  <2> 	pop ebp
  8853 00006CBA C3                  <2> 	ret
  8854                              <2> 	
  8855 00006CBB 00000000            <2> .ddF_x dd 0
  8856 00006CBF 00000000            <2> .ddF_y dd 0
  8857                              <2> 
  8858                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8859 00006CC3 55                  <2> 	push ebp
  8860 00006CC4 663D0000            <2> 	cmp ax, 0
  8861 00006CC8 770A                <2> 	ja .nozerocircle
  8862 00006CCA E8631C0000          <2> 	call putpixel	;the easiest circle ever
  8863 00006CCF E95A010000          <2> 	jmp .done
  8864                              <2> .nozerocircle:
  8865 00006CD4 6689F5              <2> 	mov bp, si
  8866 00006CD7 6650                <2> 	push ax
  8867 00006CD9 E8951C0000          <2> 	call getpixelmem
  8868 00006CDE 31C0                <2> 	xor eax, eax
  8869 00006CE0 6658                <2> 	pop ax
  8870 00006CE2 BE01000000          <2> 	mov esi, 1
  8871 00006CE7 29C6                <2> 	sub esi, eax
  8872 00006CE9 89C1                <2> 	mov ecx, eax
  8873 00006CEB 31C0                <2> 	xor eax, eax
  8874 00006CED 66A1[26590000]      <2> 	mov ax, [resolutionx2]
  8875 00006CF3 F7E1                <2> 	mul ecx
  8876 00006CF5 50                  <2> 	push eax
  8877 00006CF6 31D2                <2> 	xor edx, edx
  8878 00006CF8 01C7                <2> 	add edi, eax
  8879 00006CFA 66892F              <2> 	mov [edi], bp
  8880 00006CFD 29C7                <2> 	sub edi, eax
  8881 00006CFF 29C7                <2> 	sub edi, eax
  8882 00006D01 66892F              <2> 	mov [edi], bp
  8883 00006D04 01C7                <2> 	add edi, eax
  8884 00006D06 D1E1                <2> 	shl ecx, 1
  8885 00006D08 01CF                <2> 	add edi, ecx
  8886 00006D0A 51                  <2> 	push ecx
  8887                              <2> .s0:
  8888 00006D0B 66892F              <2> 	mov [edi], bp
  8889 00006D0E 81EF02000000        <2> 	sub edi, 2
  8890 00006D14 49                  <2> 	dec ecx
  8891 00006D15 81F900000000        <2> 	cmp ecx, 0
  8892 00006D1B 75EE                <2> 	jne .s0
  8893 00006D1D 66892F              <2> 	mov [edi], bp
  8894 00006D20 59                  <2> 	pop ecx
  8895 00006D21 01CF                <2> 	add edi, ecx
  8896 00006D23 D1E9                <2> 	shr ecx, 1
  8897 00006D25 B802000000          <2> 	mov eax, 2
  8898 00006D2A F7E1                <2> 	mul ecx
  8899 00006D2C 48                  <2> 	dec eax
  8900 00006D2D F7D0                <2> 	not eax ;make it negative
  8901 00006D2F A3[346E0000]        <2> 	mov [.ddF_y], eax
  8902 00006D34 58                  <2> 	pop eax
  8903 00006D35 BB01000000          <2> 	mov ebx, 1
  8904 00006D3A 891D[306E0000]      <2> 	mov [.ddF_x], ebx
  8905 00006D40 4B                  <2> 	dec ebx
  8906 00006D41 31D2                <2> 	xor edx, edx
  8907 00006D43 E904000000          <2> 	jmp .lp
  8908                              <2> .lpb:
  8909 00006D48 D1EA                <2> 	shr edx, 1
  8910 00006D4A D1E9                <2> 	shr ecx, 1
  8911                              <2> .lp:	;it starts this with the center in edi
  8912                              <2> 		;color in bp
  8913                              <2> 		;ddF_x in memory
  8914                              <2> 		;x*resolutionx2 in ebx
  8915                              <2> 		;x in edx
  8916                              <2> 		;ddF_y in memory
  8917                              <2> 		;y*resolutionx2 in eax
  8918                              <2> 		;f in esi
  8919                              <2> 		;y in ecx
  8920 00006D4C 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8921 00006D52 7717                <2> 	ja	.noddF_y
  8922 00006D54 49                  <2> 	dec ecx
  8923 00006D55 2B05[26590000]      <2> 	sub eax, [resolutionx2]
  8924 00006D5B 8105[346E0000]0200- <2> 	add dword [.ddF_y], 2
  8925 00006D63 0000                <2>
  8926 00006D65 0335[346E0000]      <2> 	add esi, [.ddF_y]
  8927                              <2> .noddF_y:
  8928 00006D6B 42                  <2> 	inc edx
  8929 00006D6C 031D[26590000]      <2> 	add ebx, [resolutionx2]
  8930 00006D72 8105[306E0000]0200- <2> 	add dword [.ddF_x], 2
  8931 00006D7A 0000                <2>
  8932 00006D7C 0335[306E0000]      <2> 	add esi, [.ddF_x]
  8933                              <2> 
  8934 00006D82 D1E2                <2> 	shl edx, 1
  8935 00006D84 D1E1                <2> 	shl ecx, 1
  8936 00006D86 52                  <2> 	push edx
  8937 00006D87 29D7                <2> 	sub edi, edx
  8938 00006D89 01C7                <2> 	add edi, eax
  8939 00006D8B 81FA00000000        <2> 	cmp edx, 0
  8940 00006D91 7412                <2> 	je .nos1
  8941                              <2> .s1:
  8942 00006D93 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8943 00006D96 81C702000000        <2> 	add edi, 2
  8944 00006D9C 4A                  <2> 	dec edx
  8945 00006D9D 81FA00000000        <2> 	cmp edx, 0
  8946 00006DA3 75EE                <2> 	jne .s1
  8947                              <2> .nos1:
  8948 00006DA5 66892F              <2> 	mov [edi], bp
  8949 00006DA8 5A                  <2> 	pop edx
  8950 00006DA9 52                  <2> 	push edx
  8951 00006DAA 29C7                <2> 	sub edi, eax
  8952 00006DAC 29C7                <2> 	sub edi, eax
  8953 00006DAE 81FA00000000        <2> 	cmp edx, 0
  8954 00006DB4 7412                <2> 	je .nos2
  8955                              <2> .s2:
  8956 00006DB6 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8957 00006DB9 81EF02000000        <2> 	sub edi, 2
  8958 00006DBF 4A                  <2> 	dec edx
  8959 00006DC0 81FA00000000        <2> 	cmp edx, 0
  8960 00006DC6 75EE                <2> 	jne .s2
  8961                              <2> .nos2:
  8962 00006DC8 66892F              <2> 	mov [edi], bp
  8963 00006DCB 5A                  <2> 	pop edx
  8964 00006DCC 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8965 00006DCE 01D7                <2> 	add edi, edx
  8966                              <2> 
  8967 00006DD0 39D1                <2> 	cmp ecx, edx
  8968 00006DD2 0F8470FFFFFF        <2> 	je .lpb
  8969                              <2> 
  8970 00006DD8 51                  <2> 	push ecx
  8971 00006DD9 01DF                <2> 	add edi, ebx
  8972 00006DDB 29CF                <2> 	sub edi, ecx
  8973 00006DDD 81F900000000        <2> 	cmp ecx, 0
  8974 00006DE3 7412                <2> 	je .nos3
  8975                              <2> .s3:
  8976 00006DE5 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8977 00006DE8 81C702000000        <2> 	add edi, 2
  8978 00006DEE 49                  <2> 	dec ecx
  8979 00006DEF 81F900000000        <2> 	cmp ecx, 0
  8980 00006DF5 75EE                <2> 	jne .s3
  8981                              <2> .nos3:
  8982 00006DF7 66892F              <2> 	mov [edi], bp
  8983 00006DFA 59                  <2> 	pop ecx
  8984 00006DFB 51                  <2> 	push ecx
  8985 00006DFC 29DF                <2> 	sub edi, ebx
  8986 00006DFE 29DF                <2> 	sub edi, ebx
  8987 00006E00 81F900000000        <2> 	cmp ecx, 0
  8988 00006E06 7412                <2> 	je .nos4
  8989                              <2> .s4:
  8990 00006E08 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8991 00006E0B 81EF02000000        <2> 	sub edi, 2
  8992 00006E11 49                  <2> 	dec ecx
  8993 00006E12 81F900000000        <2> 	cmp ecx, 0
  8994 00006E18 75EE                <2> 	jne .s4
  8995                              <2> .nos4:
  8996 00006E1A 66892F              <2> 	mov [edi], bp
  8997 00006E1D 59                  <2> 	pop ecx
  8998 00006E1E 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8999 00006E20 01CF                <2> 	add edi, ecx
  9000                              <2> 
  9001 00006E22 D1EA                <2> 	shr edx, 1
  9002 00006E24 D1E9                <2> 	shr ecx, 1
  9003 00006E26 39CA                <2> 	cmp edx, ecx
  9004 00006E28 0F821EFFFFFF        <2> 	jb .lp
  9005                              <2> .done:
  9006 00006E2E 5D                  <2> 	pop ebp
  9007 00006E2F C3                  <2> 	ret
  9008                              <2> 	
  9009 00006E30 00000000            <2> .ddF_x dd 0
  9010 00006E34 00000000            <2> .ddF_y dd 0
  9011                              <1> %include "source/gui/cursor.asm"
  9012                              <2> clearmousecursor:
  9013 00006E38 BE[27720000]        <2> 		mov esi, background
  9014 00006E3D 8B3D[4E580000]      <2> 		mov edi, [physbaseptr]
  9015 00006E43 31D2                <2> 		xor edx, edx
  9016 00006E45 31C9                <2> 		xor ecx, ecx
  9017 00006E47 668B15[185B0000]    <2> 		mov dx, [lastmouseposition]
  9018 00006E4E 668B0D[1A5B0000]    <2> 		mov cx, [lastmouseposition + 2]
  9019 00006E55 01D7                <2> 		add edi, edx
  9020 00006E57 31D2                <2> 		xor edx, edx
  9021 00006E59 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  9022 00006E60 81F900000000        <2> 		cmp ecx, 0
  9023 00006E66 7408                <2> 		je .nomul
  9024 00006E68 52                  <2> 		push edx
  9025 00006E69 89D0                <2> 		mov eax, edx
  9026 00006E6B F7E1                <2> 		mul ecx
  9027 00006E6D 01C7                <2> 		add edi, eax
  9028 00006E6F 5A                  <2> 		pop edx
  9029                              <2> .nomul:
  9030                              <2> %ifdef 	gui.background
  9031 00006E70 813D[F9710000]0000- <2> 		cmp dword [backgroundimage], 0
  9032 00006E78 0000                <2>
  9033 00006E7A 7438                <2> 		je .noyclr
  9034 00006E7C 8B35[F9710000]      <2> 		mov esi, [backgroundimage]
  9035 00006E82 2B3D[4E580000]      <2> 		sub edi, [physbaseptr]
  9036 00006E88 01FE                <2> 		add esi, edi
  9037 00006E8A 033D[4E580000]      <2> 		add edi, [physbaseptr]
  9038                              <2> .backlp:
  9039 00006E90 31DB                <2> 		xor ebx, ebx
  9040                              <2> .noyback:
  9041 00006E92 8B041E              <2> 		mov eax, [esi + ebx]
  9042 00006E95 89041F              <2> 		mov [edi + ebx], eax
  9043 00006E98 81C304000000        <2> 		add ebx, 4
  9044 00006E9E 81FB10000000        <2> 		cmp ebx, 16
  9045 00006EA4 75EC                <2> 		jne .noyback
  9046 00006EA6 01D7                <2> 		add edi, edx
  9047 00006EA8 01D6                <2> 		add esi, edx
  9048 00006EAA 6641                <2> 		inc cx
  9049 00006EAC 6681F91000          <2> 		cmp cx, 16
  9050 00006EB1 72DD                <2> 		jb .backlp
  9051 00006EB3 C3                  <2> 		ret
  9052                              <2> %endif
  9053                              <2> .noyclr:
  9054 00006EB4 668B06              <2> 		mov ax, [esi]
  9055 00006EB7 C1C010              <2> 		rol eax, 16
  9056 00006EBA 668B06              <2> 		mov ax, [esi]
  9057 00006EBD 8907                <2> 		mov [edi], eax
  9058 00006EBF 894704              <2> 		mov [edi + 4], eax
  9059 00006EC2 894708              <2> 		mov [edi + 8], eax
  9060 00006EC5 89470C              <2> 		mov [edi + 12], eax
  9061 00006EC8 01D7                <2> 		add edi, edx
  9062 00006ECA 6641                <2> 		inc cx
  9063 00006ECC 6681F91000          <2> 		cmp cx, 16
  9064 00006ED1 72E1                <2> 		jb .noyclr
  9065 00006ED3 C3                  <2> 		ret
  9066                              <2> 
  9067                              <2> switchmousepos:		;;switch were the mouse is located
  9068 00006ED4 BE[9CE22B00]        <2> 		mov esi, mousecolorbuf
  9069 00006ED9 8B3D[4E580000]      <2> 		mov edi, [physbaseptr]
  9070 00006EDF 31D2                <2> 		xor edx, edx
  9071 00006EE1 31C9                <2> 		xor ecx, ecx
  9072 00006EE3 668B15[185B0000]    <2> 		mov dx, [lastmouseposition]
  9073 00006EEA 668B0D[1A5B0000]    <2> 		mov cx, [lastmouseposition + 2]
  9074 00006EF1 01D7                <2> 		add edi, edx
  9075 00006EF3 31D2                <2> 		xor edx, edx
  9076 00006EF5 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  9077 00006EFC 6681F90000          <2> 		cmp cx, 0
  9078 00006F01 740B                <2> 		je noswmsy
  9079 00006F03 01D7                <2> swmsy:		add edi, edx
  9080 00006F05 6649                <2> 		dec cx
  9081 00006F07 6681F90000          <2> 		cmp cx, 0
  9082 00006F0C 75F5                <2> 		jne swmsy
  9083 00006F0E 8B06                <2> noswmsy:	mov eax, [esi]
  9084 00006F10 8B5E04              <2> 		mov ebx, [esi + 4]
  9085 00006F13 8907                <2> 		mov [edi], eax
  9086 00006F15 895F04              <2> 		mov [edi + 4], ebx
  9087 00006F18 8B4608              <2> 		mov eax, [esi + 8]
  9088 00006F1B 8B5E0C              <2> 		mov ebx, [esi + 12]
  9089 00006F1E 894708              <2> 		mov [edi + 8], eax
  9090 00006F21 895F0C              <2> 		mov [edi + 12], ebx
  9091 00006F24 01D7                <2> 		add edi, edx
  9092 00006F26 81C610000000        <2> 		add esi, 16
  9093 00006F2C 81FE[9CE32B00]      <2> 		cmp esi, mcolorend
  9094 00006F32 72DA                <2> 		jb noswmsy
  9095                              <2> 		
  9096                              <2> switchmousepos2:
  9097 00006F34 BE[9CE22B00]        <2> 		mov esi, mousecolorbuf
  9098 00006F39 8B3D[4E580000]      <2> 		mov edi, [physbaseptr]
  9099 00006F3F 31D2                <2> 		xor edx, edx
  9100 00006F41 31C9                <2> 		xor ecx, ecx
  9101 00006F43 668B15[1C5B0000]    <2> 		mov dx, [mousecursorposition]
  9102 00006F4A 668B0D[1E5B0000]    <2> 		mov cx, [mousecursorposition + 2]
  9103 00006F51 01D7                <2> 		add edi, edx
  9104 00006F53 31D2                <2> 		xor edx, edx
  9105 00006F55 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  9106 00006F5C 6681F90000          <2> 		cmp cx, 0
  9107 00006F61 740B                <2> 		je noswmsy2
  9108 00006F63 01D7                <2> swmsy2:		add edi, edx
  9109 00006F65 6649                <2> 		dec cx
  9110 00006F67 6681F90000          <2> 		cmp cx, 0
  9111 00006F6C 75F5                <2> 		jne swmsy2
  9112 00006F6E 8B07                <2> noswmsy2:	mov eax, [edi]
  9113 00006F70 8B5F04              <2> 		mov ebx, [edi + 4]
  9114 00006F73 8906                <2> 		mov [esi], eax
  9115 00006F75 895E04              <2> 		mov [esi + 4], ebx
  9116 00006F78 8B4708              <2> 		mov eax, [edi + 8]
  9117 00006F7B 8B5F0C              <2> 		mov ebx, [edi + 12]
  9118 00006F7E 894608              <2> 		mov [esi + 8], eax
  9119 00006F81 895E0C              <2> 		mov [esi + 12], ebx
  9120 00006F84 01D7                <2> 		add edi, edx
  9121 00006F86 81C610000000        <2> 		add esi, 16
  9122 00006F8C 81FE[9CE32B00]      <2> 		cmp esi, mcolorend
  9123 00006F92 72DA                <2> 		jb noswmsy2
  9124 00006F94 C3                  <2> 		ret
  9125                              <2> 		
  9126                              <1> %include "source/gui/icon.asm"
  9127 00006F95 0000                <2> iconcolor dw 0
  9128                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9129 00006F97 A2[9B890000]        <2> 		mov [iconselected], al
  9130 00006F9C 8025[9B890000]01    <2> 		and byte [iconselected], 1
  9131 00006FA3 B401                <2> 		mov ah, 1
  9132 00006FA5 E8F2160000          <2> 		call graphicsadd
  9133                              <2> 	showicon2:
  9134 00006FAA 8B3D[4E580000]      <2> 		mov edi, [physbaseptr]
  9135 00006FB0 6601D2              <2> 		add dx, dx
  9136 00006FB3 663B15[26590000]    <2> 		cmp dx, [resolutionx2]
  9137 00006FBA 720C                <2> 		jb screenxgood
  9138 00006FBC 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  9139 00006FC3 6681EA4000          <2> 		sub dx, 64
  9140                              <2> 	screenxgood:
  9141 00006FC8 6681F90000          <2> 		cmp cx, 0
  9142 00006FCD 742B                <2> 		je noscreenygoodchk
  9143 00006FCF 663B0D[3A580000]    <2> 		cmp cx, [resolutiony]
  9144 00006FD6 720C                <2> 		jb screenygood
  9145 00006FD8 668B0D[3A580000]    <2> 		mov cx, [resolutiony]
  9146 00006FDF 6681E92000          <2> 		sub cx, 32
  9147                              <2> 	screenygood:
  9148 00006FE4 50                  <2> 		push eax
  9149 00006FE5 52                  <2> 		push edx
  9150 00006FE6 31C0                <2> 		xor eax, eax
  9151 00006FE8 31DB                <2> 		xor ebx, ebx
  9152 00006FEA 668B1D[26590000]    <2> 		mov bx, [resolutionx2]
  9153 00006FF1 6689C8              <2> 		mov ax, cx
  9154 00006FF4 F7E3                <2> 		mul ebx
  9155 00006FF6 01C7                <2> 		add edi, eax
  9156 00006FF8 5A                  <2> 		pop edx
  9157 00006FF9 58                  <2> 		pop eax
  9158                              <2> 	noscreenygoodchk:
  9159 00006FFA 31DB                <2> 		xor ebx, ebx
  9160 00006FFC 6689D3              <2> 		mov bx, dx
  9161 00006FFF 01DF                <2> 		add edi, ebx
  9162 00007001 6631C9              <2> 		xor cx, cx
  9163 00007004 668B06              <2> 		mov ax, [esi]
  9164 00007007 81C602000000        <2> 		add esi, 2
  9165 0000700D 66A3[956F0000]      <2> 		mov [iconcolor], ax
  9166                              <2> 	writeicon:
  9167 00007013 8B06                <2> 		mov eax, [esi]
  9168 00007015 D1C0                <2> 		rol eax, 1
  9169 00007017 30C9                <2> 		xor cl, cl
  9170                              <2> 	writeiconline:
  9171 00007019 B201                <2> 		mov dl, 1
  9172 0000701B 20C2                <2> 		and dl, al
  9173 0000701D 3215[9B890000]      <2> 		xor dl, [iconselected]
  9174 00007023 668B1D[27720000]    <2> 		mov bx, [background]
  9175 0000702A 66891F              <2> 		mov [edi], bx
  9176 0000702D 80FA00              <2> 		cmp dl, 0
  9177 00007030 740A                <2> 		je noiconline
  9178 00007032 668B15[956F0000]    <2> 		mov dx, [iconcolor]
  9179 00007039 668917              <2> 		mov [edi], dx
  9180                              <2> 	noiconline:
  9181 0000703C 81C702000000        <2> 		add edi, 2
  9182 00007042 D1C0                <2> 		rol eax, 1
  9183 00007044 FEC1                <2> 		inc cl
  9184 00007046 80F920              <2> 		cmp cl, 32
  9185 00007049 72CE                <2> 		jb writeiconline
  9186 0000704B 81C604000000        <2> 		add esi, 4
  9187 00007051 FEC5                <2> 		inc ch
  9188 00007053 31D2                <2> 		xor edx, edx
  9189 00007055 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  9190 0000705C 01D7                <2> 		add edi, edx
  9191 0000705E 81EF40000000        <2> 		sub edi, 64
  9192 00007064 80FD20              <2> 		cmp ch, 32
  9193 00007067 72AA                <2> 		jb writeicon
  9194 00007069 31C0                <2> 		xor eax, eax
  9195 0000706B C3                  <2> 		ret
  9196                              <1> %include "source/gui/line.asm"
  9197                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9198 0000706C 668935[8E710000]    <2> 	mov [.color], si
  9199 00007073 C605[90710000]00    <2> 	mov byte [.steep], 0
  9200 0000707A C605[91710000]00    <2> 	mov byte [.yreversed], 0
  9201 00007081 E907000000          <2> 	jmp .notsteep
  9202                              <2> .steeploop:
  9203 00007086 C605[90710000]01    <2> 	mov byte [.steep], 1
  9204                              <2> .notsteep:
  9205 0000708D 31FF                <2> 	xor edi, edi
  9206 0000708F 31F6                <2> 	xor esi, esi
  9207 00007091 6639DA              <2> 	cmp dx, bx
  9208 00007094 7705                <2> 	ja .noreversex
  9209 00007096 6687D3              <2> 	xchg dx, bx
  9210 00007099 6691                <2> 	xchg cx, ax
  9211                              <2> .noreversex:
  9212 0000709B 6689D7              <2> 	mov di, dx
  9213 0000709E 6629DF              <2> 	sub di, bx
  9214                              <2> 	
  9215 000070A1 6639C1              <2> 	cmp cx, ax
  9216 000070A4 720B                <2> 	jb .reversey
  9217 000070A6 6689CE              <2> 	mov si, cx
  9218 000070A9 6629C6              <2> 	sub si, ax
  9219 000070AC E90D000000          <2> 	jmp .normal
  9220                              <2> .reversey:
  9221 000070B1 C605[91710000]02    <2> 	mov byte [.yreversed], 2
  9222 000070B8 6689C6              <2> 	mov si, ax
  9223 000070BB 6629CE              <2> 	sub si, cx	
  9224                              <2> .normal:
  9225 000070BE 6687CA              <2> 	xchg cx, dx
  9226 000070C1 6693                <2> 	xchg ax, bx
  9227 000070C3 6639FE              <2> 	cmp si, di
  9228 000070C6 77BE                <2> 	ja .steeploop
  9229 000070C8 6687CA              <2> 	xchg cx, dx
  9230 000070CB 6693                <2> 	xchg ax, bx
  9231                              <2> 	
  9232 000070CD 6691                <2> 	xchg ax, cx
  9233 000070CF 6687DA              <2> 	xchg bx, dx
  9234 000070D2 66893D[94710000]    <2> 	mov [.xdelta], di
  9235 000070D9 668935[96710000]    <2> 	mov [.ydelta], si
  9236 000070E0 668B35[8E710000]    <2> 	mov si, [.color]
  9237 000070E7 66891D[92710000]    <2> 	mov [.endline], bx
  9238 000070EE 6652                <2> 	push dx
  9239 000070F0 6651                <2> 	push cx
  9240 000070F2 6687CA              <2> 	xchg cx, dx
  9241 000070F5 803D[90710000]01    <2> 	cmp byte [.steep], 1
  9242 000070FC 7403                <2> 	je .xchg
  9243 000070FE 6687D1              <2> 	xchg dx, cx
  9244                              <2> .xchg:
  9245 00007101 E86D180000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9246 00007106 6659                <2> 	pop cx
  9247 00007108 665A                <2> 	pop dx
  9248 0000710A 31C0                <2> 	xor eax, eax
  9249 0000710C 66A1[94710000]      <2> 	mov ax, [.xdelta]
  9250 00007112 66D1E8              <2> 	shr ax, 1
  9251 00007115 8A0D[90710000]      <2> 	mov cl, [.steep]
  9252 0000711B 0A0D[91710000]      <2> 	or cl, [.yreversed]
  9253 00007121 55                  <2> 	push ebp
  9254 00007122 668B2D[92710000]    <2> 	mov bp, [.endline]
  9255 00007129 6629D5              <2> 	sub bp, dx
  9256 0000712C 668B15[96710000]    <2> 	mov dx, [.ydelta]
  9257                              <2> .lp:
  9258 00007133 668937              <2> 	mov [edi], si
  9259 00007136 6639D0              <2> 	cmp ax, dx
  9260 00007139 7332                <2> 	jae .noaddx
  9261 0000713B F6C102              <2> 	test cl, 2
  9262 0000713E 7414                <2> 	jz .nodecy
  9263 00007140 F6C101              <2> 	test cl, 1
  9264 00007143 7509                <2> 	jnz .steepy
  9265 00007145 29DF                <2> 	sub edi, ebx
  9266 00007147 29DF                <2> 	sub edi, ebx
  9267 00007149 E906000000          <2> 	jmp .nodecy
  9268                              <2> .steepy:
  9269 0000714E 81EF04000000        <2> 	sub edi, 4
  9270                              <2> .nodecy:
  9271 00007154 660305[94710000]    <2> 	add ax, [.xdelta]
  9272 0000715B F6C101              <2> 	test cl, 1
  9273 0000715E 7507                <2> 	jnz .steepx
  9274 00007160 01DF                <2> 	add edi, ebx
  9275 00007162 E906000000          <2> 	jmp .noaddx
  9276                              <2> .steepx:
  9277 00007167 81C702000000        <2> 	add edi, 2
  9278                              <2> .noaddx:
  9279 0000716D 6629D0              <2> 	sub ax, dx
  9280 00007170 664D                <2> 	dec bp
  9281 00007172 81C702000000        <2> 	add edi, 2
  9282 00007178 F6C101              <2> 	test cl, 1
  9283 0000717B 7408                <2> 	jz .nosteepx
  9284 0000717D 81EF02000000        <2> 	sub edi, 2
  9285 00007183 01DF                <2> 	add edi, ebx
  9286                              <2> .nosteepx:
  9287 00007185 6681FD0000          <2> 	cmp bp, 0
  9288 0000718A 75A7                <2> 	jne .lp
  9289                              <2> .done:
  9290 0000718C 5D                  <2> 	pop ebp
  9291 0000718D C3                  <2> 	ret
  9292                              <2> 	
  9293 0000718E 0000                <2> .color dw 0
  9294 00007190 00                  <2> .steep db 0
  9295 00007191 00                  <2> .yreversed db 0
  9296 00007192 0000                <2> .endline dw 0
  9297 00007194 0000                <2> .xdelta dw 0
  9298 00007196 0000                <2> .ydelta dw 0
  9299                              <1> %include "source/gui/refresh.asm"
  9300                              <2> guiclear:
  9301 00007198 8B3D[4E580000]      <2> 	mov edi, [physbaseptr]
  9302 0000719E 668B15[38580000]    <2> 	mov dx, [resolutionx]
  9303 000071A5 668B0D[3A580000]    <2> 	mov cx, [resolutiony]
  9304 000071AC 668B1D[27720000]    <2> 	mov bx, [background]
  9305 000071B3 66891D[29720000]    <2> 	mov [background + 2], bx
  9306                              <2> %ifdef gui.background
  9307 000071BA 813D[F9710000]0000- <2> 	cmp dword [backgroundimage], 0
  9308 000071C2 0000                <2>
  9309 000071C4 7437                <2> 	je guiclear.noback
  9310 000071C6 8B35[F9710000]      <2> 		mov esi, [backgroundimage]
  9311                              <2> 	.lp:
  9312                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9313                              <2> 		;movdqa [edi], xmm0
  9314                              <2> 		;add esi, 16
  9315                              <2> 		;add edi, 16
  9316                              <2> 		;sub dx, 8
  9317 000071CC 8B06                <2> 		mov eax, [esi]
  9318 000071CE 8907                <2> 		mov [edi], eax
  9319 000071D0 81C604000000        <2> 		add esi, 4
  9320 000071D6 81C704000000        <2> 		add edi, 4
  9321 000071DC 6681EA0200          <2> 		sub dx, 2
  9322 000071E1 6681FA0000          <2> 		cmp dx, 0
  9323 000071E6 77E4                <2> 		ja .lp
  9324 000071E8 6649                <2> 		dec cx
  9325 000071EA 668B15[38580000]    <2> 		mov dx, [resolutionx]
  9326 000071F1 6681F90000          <2> 		cmp cx, 0
  9327 000071F6 77D4                <2> 		ja .lp
  9328 000071F8 C3                  <2> 		ret
  9329 000071F9 00000000            <2> 	backgroundimage dd 0
  9330                              <2> %endif
  9331                              <2> guiclear.noback:
  9332 000071FD A1[27720000]        <2> 	mov eax, [background]
  9333                              <2> guiclearloop:
  9334 00007202 8907                <2> 	mov [edi], eax
  9335 00007204 81C704000000        <2> 	add edi, 4
  9336 0000720A 6681EA0200          <2> 	sub dx, 2
  9337 0000720F 6681FA0000          <2> 	cmp dx, 0
  9338 00007214 77EC                <2> 	ja guiclearloop
  9339 00007216 6649                <2> 	dec cx
  9340 00007218 668B15[38580000]    <2> 	mov dx, [resolutionx]
  9341 0000721F 6681F90000          <2> 	cmp cx, 0
  9342 00007224 77DC                <2> 	ja guiclearloop
  9343 00007226 C3                  <2> 	ret
  9344                              <2> 
  9345 00007227 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9346                              <2> 	.original equ 0111101111001111b
  9347                              <2> 
  9348                              <2> reloadallgraphics:
  9349 0000722B BF[9CCC0300]        <2> 		mov edi, graphicstable
  9350                              <2> reloadgraphicsloop:
  9351 00007230 8B7702              <2> 		mov esi, [edi + 2]
  9352 00007233 668B5706            <2> 		mov dx, [edi + 6]
  9353 00007237 668B4F08            <2> 		mov cx, [edi + 8]
  9354 0000723B 668B07              <2> 		mov ax, [edi]
  9355 0000723E 668B5F0A            <2> 		mov bx, [edi + 10]
  9356 00007242 893D[88860000]      <2> 		mov [grpctblpos], edi
  9357 00007248 3B3D[1C810000]      <2> 		cmp edi, [dragging]
  9358 0000724E 741E                <2> 		je loadedgraphic
  9359 00007250 663D0100            <2> 		cmp ax, 1
  9360 00007254 0F843C000000        <2> 		je near icongraphic
  9361 0000725A 663D0200            <2> 		cmp ax, 2
  9362 0000725E 0F8445000000        <2> 		je near stringgraphic
  9363 00007264 663D0300            <2> 		cmp ax, 3
  9364 00007268 0F8419000000        <2> 		je near windowgraphic
  9365 0000726E 8B3D[88860000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9366 00007274 81C710000000        <2> 		add edi, 16
  9367 0000727A 81FF[9CCE0300]      <2> 		cmp edi, graphicstableend
  9368 00007280 733A                <2> 		jae donereloadgraphics
  9369 00007282 E9A9FFFFFF          <2> 		jmp reloadgraphicsloop
  9370                              <2> windowgraphic:
  9371 00007287 E852090000          <2> 		call showwindow2
  9372 0000728C E8D5ABFFFF          <2> 		call cleardouble
  9373 00007291 E9D8FFFFFF          <2> 		jmp loadedgraphic
  9374 00007296 80E301              <2> icongraphic:	and bl, 1
  9375 00007299 881D[9B890000]      <2> 		mov [iconselected], bl
  9376 0000729F E806FDFFFF          <2> 		call showicon2
  9377 000072A4 E9C5FFFFFF          <2> 		jmp loadedgraphic
  9378 000072A9 80E301              <2> stringgraphic:  and bl, 1
  9379 000072AC 881D[18810000]      <2> 		mov [mouseselecton], bl
  9380 000072B2 E8DF050000          <2> 		call showstring2
  9381 000072B7 E9B2FFFFFF          <2> 		jmp loadedgraphic
  9382                              <2> donereloadgraphics:
  9383 000072BC 8B3D[1C810000]      <2> 		mov edi, [dragging]
  9384 000072C2 81FF[9CCC0300]      <2> 		cmp edi, graphicstable
  9385 000072C8 7226                <2> 		jb notcorrectdrag
  9386 000072CA 668B07              <2> 		mov ax, [edi]
  9387 000072CD 8B7702              <2> 		mov esi, [edi + 2]
  9388 000072D0 668B5706            <2> 		mov dx, [edi + 6]
  9389 000072D4 668B4F08            <2> 		mov cx, [edi + 8]
  9390 000072D8 668B5F0A            <2> 		mov bx, [edi + 10]
  9391 000072DC 663D0100            <2> 		cmp ax, 1
  9392 000072E0 750F                <2> 		jne noticondragging
  9393 000072E2 80E301              <2> 		and bl, 1
  9394 000072E5 881D[9B890000]      <2> 		mov [iconselected], bl
  9395 000072EB E8BAFCFFFF          <2> 		call showicon2
  9396                              <2> notcorrectdrag:
  9397 000072F0 C3                  <2> 		ret
  9398                              <2> 
  9399                              <2> 	noticondragging:
  9400 000072F1 663D0200            <2> 		cmp ax, 2
  9401 000072F5 75F9                <2> 		jne notcorrectdrag
  9402 000072F7 80E301              <2> 		and bl, 1
  9403 000072FA 881D[18810000]      <2> 		mov [mouseselecton], bl
  9404 00007300 E891050000          <2> 		call showstring2
  9405 00007305 E9E6FFFFFF          <2> 		jmp notcorrectdrag
  9406                              <1> %include "source/gui/square.asm"
  9407                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9408 0000730A 6639D3              <2> 	cmp bx, dx
  9409 0000730D 7303                <2> 	jae .noxchgx
  9410 0000730F 6687DA              <2> 	xchg bx, dx
  9411                              <2> .noxchgx:
  9412 00007312 6639C8              <2> 	cmp ax, cx
  9413 00007315 7302                <2> 	jae .noxchgy
  9414 00007317 6691                <2> 	xchg ax, cx
  9415                              <2> .noxchgy:
  9416 00007319 6650                <2> 	push ax
  9417 0000731B 6653                <2> 	push bx
  9418 0000731D 6652                <2> 	push dx
  9419 0000731F E84F160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9420 00007324 31D2                <2> 	xor edx, edx
  9421 00007326 665A                <2> 	pop dx
  9422 00007328 31DB                <2> 	xor ebx, ebx
  9423 0000732A 665B                <2> 	pop bx
  9424 0000732C 6658                <2> 	pop ax
  9425                              <2> .lp0:
  9426 0000732E 6652                <2> 	push dx
  9427                              <2> .lp:
  9428 00007330 668937              <2> 	mov [edi], si
  9429 00007333 81C702000000        <2> 	add edi, 2
  9430 00007339 6642                <2> 	inc dx
  9431 0000733B 6639DA              <2> 	cmp dx, bx
  9432 0000733E 76F0                <2> 	jbe .lp
  9433 00007340 665A                <2> 	pop dx
  9434 00007342 81EF02000000        <2> 	sub edi, 2
  9435 00007348 29DF                <2> 	sub edi, ebx
  9436 0000734A 29DF                <2> 	sub edi, ebx
  9437 0000734C 01D7                <2> 	add edi, edx
  9438 0000734E 01D7                <2> 	add edi, edx
  9439 00007350 033D[26590000]      <2> 	add edi, [resolutionx2]
  9440 00007356 6641                <2> 	inc cx
  9441 00007358 6639C1              <2> 	cmp cx, ax
  9442 0000735B 7203                <2> 	jb .lp2
  9443 0000735D 74CF                <2> 	je .lp0
  9444 0000735F C3                  <2> 	ret
  9445                              <2> .lp2:
  9446 00007360 57                  <2> 	push edi
  9447 00007361 668937              <2> 	mov [edi], si
  9448 00007364 29D7                <2> 	sub edi, edx
  9449 00007366 29D7                <2> 	sub edi, edx
  9450 00007368 01DF                <2> 	add edi, ebx
  9451 0000736A 01DF                <2> 	add edi, ebx
  9452 0000736C 668937              <2> 	mov [edi], si
  9453 0000736F 5F                  <2> 	pop edi
  9454 00007370 033D[26590000]      <2> 	add edi, [resolutionx2]
  9455 00007376 6641                <2> 	inc cx
  9456 00007378 6639C1              <2> 	cmp cx, ax
  9457 0000737B 72E3                <2> 	jb .lp2
  9458 0000737D E9ACFFFFFF          <2> 	jmp .lp0
  9459                              <2> 
  9460                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9461 00007382 6639D3              <2> 	cmp bx, dx
  9462 00007385 7303                <2> 	jae .noxchgx
  9463 00007387 6687DA              <2> 	xchg bx, dx
  9464                              <2> .noxchgx:
  9465 0000738A 6639C8              <2> 	cmp ax, cx
  9466 0000738D 7302                <2> 	jae .noxchgy
  9467 0000738F 6691                <2> 	xchg ax, cx
  9468                              <2> .noxchgy:
  9469 00007391 6650                <2> 	push ax
  9470 00007393 6653                <2> 	push bx
  9471 00007395 6652                <2> 	push dx
  9472 00007397 E8D7150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9473 0000739C 31D2                <2> 	xor edx, edx
  9474 0000739E 665A                <2> 	pop dx
  9475 000073A0 31DB                <2> 	xor ebx, ebx
  9476 000073A2 665B                <2> 	pop bx
  9477 000073A4 6658                <2> 	pop ax
  9478                              <2> .lp2:
  9479 000073A6 6652                <2> 	push dx
  9480                              <2> .lp:
  9481 000073A8 668937              <2> 	mov [edi], si
  9482 000073AB 81C702000000        <2> 	add edi, 2
  9483 000073B1 6642                <2> 	inc dx
  9484 000073B3 6639DA              <2> 	cmp dx, bx
  9485 000073B6 76F0                <2> 	jbe .lp
  9486 000073B8 665A                <2> 	pop dx
  9487 000073BA 81EF02000000        <2> 	sub edi, 2
  9488 000073C0 29DF                <2> 	sub edi, ebx
  9489 000073C2 29DF                <2> 	sub edi, ebx
  9490 000073C4 01D7                <2> 	add edi, edx
  9491 000073C6 01D7                <2> 	add edi, edx
  9492 000073C8 033D[26590000]      <2> 	add edi, [resolutionx2]
  9493 000073CE 6641                <2> 	inc cx
  9494 000073D0 6639C1              <2> 	cmp cx, ax
  9495 000073D3 76D1                <2> 	jbe .lp2
  9496 000073D5 C3                  <2> 	ret
  9497                              <1> %include "source/gui/startup.asm"
  9498                              <2> guisetup:
  9499                              <2> 	%ifdef gui.background
  9500 000073D6 31DB                <2> 	xor ebx, ebx
  9501 000073D8 891D[F9710000]      <2> 	mov [backgroundimage], ebx
  9502                              <2> 	%endif
  9503 000073DE E8B5FDFFFF          <2> 	call guiclear
  9504 000073E3 C605[028A0000]01    <2> 	mov byte [guion], 1
  9505 000073EA C605[18810000]00    <2> 	mov byte [mouseselecton], 0
  9506 000073F1 31C0                <2> 	xor eax, eax
  9507 000073F3 31DB                <2> 	xor ebx, ebx
  9508 000073F5 31C9                <2> 	xor ecx, ecx
  9509 000073F7 31D2                <2> 	xor edx, edx
  9510                              <2> 	
  9511 000073F9 BE[BB750000]        <2> 	mov esi, pacmsg
  9512 000073FE 30E4                <2> 	xor ah, ah
  9513 00007400 B010                <2> 	mov al, 00010000b
  9514 00007402 31DB                <2> 	xor ebx, ebx
  9515 00007404 66B99000            <2> 	mov cx, 144
  9516 00007408 66BA0400            <2> 	mov dx, 4
  9517 0000740C E872040000          <2> 	call showstring
  9518                              <2> 	
  9519 00007411 BE[F9750000]        <2> 	mov esi, interneticon
  9520 00007416 30E4                <2> 	xor ah, ah
  9521 00007418 B010                <2> 	mov al, 00010000b
  9522 0000741A BB[E4740000]        <2> 	mov ebx, noie
  9523 0000741F 66B91800            <2> 	mov cx, 24
  9524 00007423 66BA0400            <2> 	mov dx, 4
  9525 00007427 E86BFBFFFF          <2> 	call showicon
  9526                              <2> 	
  9527 0000742C BE[7B760000]        <2> 	mov esi, wordicon
  9528 00007431 30E4                <2> 	xor ah, ah
  9529 00007433 B010                <2> 	mov al, 00010000b
  9530 00007435 31DB                <2> 	xor ebx, ebx
  9531 00007437 66B91800            <2> 	mov cx, 24
  9532 0000743B 66BA3000            <2> 	mov dx, 48
  9533 0000743F E853FBFFFF          <2> 	call showicon
  9534                              <2> 	
  9535 00007444 BE[FD760000]        <2> 	mov esi, pacmanpellet
  9536 00007449 30E4                <2> 	xor ah, ah
  9537 0000744B B010                <2> 	mov al, 00010000b
  9538 0000744D 31DB                <2> 	xor ebx, ebx
  9539 0000744F 66B94000            <2> 	mov cx, 64
  9540 00007453 66BA0400            <2> 	mov dx, 4
  9541 00007457 E83BFBFFFF          <2> 	call showicon
  9542                              <2> 	
  9543 0000745C BE[01780000]        <2> 	mov esi, pacman
  9544 00007461 30E4                <2> 	xor ah, ah
  9545 00007463 B010                <2> 	mov al, 00010000b
  9546 00007465 BB[CD740000]        <2> 	mov ebx, pacmannomnom
  9547 0000746A 66B94000            <2> 	mov cx, 64
  9548 0000746E 66BA3000            <2> 	mov dx, 48
  9549 00007472 E820FBFFFF          <2> 	call showicon
  9550                              <2> 	
  9551 00007477 BE[7F770000]        <2> 	mov esi, ghostie
  9552 0000747C 30E4                <2> 	xor ah, ah
  9553 0000747E B010                <2> 	mov al, 00010000b
  9554 00007480 BB[B6740000]        <2> 	mov ebx, boo
  9555 00007485 66B96C00            <2> 	mov cx, 108
  9556 00007489 66BA0400            <2> 	mov dx, 4
  9557 0000748D E805FBFFFF          <2> 	call showicon
  9558                              <2> 	
  9559 00007492 BE[9D750000]        <2> 	mov esi, start
  9560 00007497 668B0D[3A580000]    <2> 	mov cx, [resolutiony]
  9561 0000749E 6681E91000          <2> 	sub cx, 16
  9562 000074A3 66BA0200            <2> 	mov dx, 2
  9563 000074A7 30E4                <2> 	xor ah, ah
  9564 000074A9 B010                <2> 	mov al, 00010000b
  9565 000074AB BB[59750000]        <2> 	mov ebx, winblows
  9566 000074B0 E8CE030000          <2> 	call showstring
  9567                              <2> 
  9568                              <2> %ifdef gui.time	
  9569                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9570                              <2> %endif
  9571 000074B5 C3                  <2> 	ret
  9572                              <2> 
  9573                              <2> 	boo:
  9574 000074B6 BE[B6750000]        <2> 		mov esi, boomsg
  9575 000074BB 66BA6400            <2> 		mov dx, 100
  9576 000074BF 66B94001            <2> 		mov cx, 320
  9577 000074C3 31DB                <2> 		xor ebx, ebx
  9578 000074C5 6631C0              <2> 		xor ax, ax
  9579 000074C8 E9B6030000          <2> 		jmp showstring
  9580                              <2> 
  9581                              <2> 	pacmannomnom:
  9582 000074CD BE[D4750000]        <2> 		mov esi, pacnom
  9583 000074D2 66BA8200            <2> 		mov dx, 130
  9584 000074D6 66B93C00            <2> 		mov cx, 60
  9585 000074DA 31DB                <2> 		xor ebx, ebx
  9586 000074DC 6631C0              <2> 		xor ax, ax
  9587 000074DF E99F030000          <2> 		jmp showstring	
  9588                              <2> 	
  9589                              <2> 	noie:
  9590 000074E4 66C705[E3750000]80- <2> 		mov word [termwindow], 640
  9591 000074EC 02                  <2>
  9592 000074ED 66C705[E5750000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9593 000074F5 01                  <2>
  9594 000074F6 BE[E3750000]        <2> 		mov esi, termwindow
  9595 000074FB 66BA1000            <2> 		mov dx, 16
  9596 000074FF 66B91000            <2> 		mov cx, 16
  9597 00007503 31DB                <2> 		xor ebx, ebx
  9598 00007505 6631C0              <2> 		xor ax, ax
  9599 00007508 E817060000          <2> 		call showwindow
  9600 0000750D E9A2B6FFFF          <2> 		jmp os
  9601                              <2> 
  9602                              <2> 	gotomenuboot:
  9603 00007512 31D2                <2> 		xor edx, edx
  9604 00007514 31C9                <2> 		xor ecx, ecx
  9605 00007516 668B15[38580000]    <2> 		mov dx, [resolutionx]
  9606 0000751D 668B0D[3A580000]    <2> 		mov cx, [resolutiony]
  9607 00007524 66C1E904            <2> 		shr cx, 4
  9608 00007528 6681E90100          <2> 		sub cx, 1
  9609 0000752D 66C1E104            <2> 		shl cx, 4
  9610 00007531 668915[E3750000]    <2> 		mov [termwindow], dx
  9611 00007538 66890D[E5750000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9612 0000753F BE[E3750000]        <2> 		mov esi, termwindow
  9613 00007544 6631D2              <2> 		xor dx, dx
  9614 00007547 6631C9              <2> 		xor cx, cx
  9615 0000754A 31DB                <2> 		xor ebx, ebx
  9616 0000754C 6631C0              <2> 		xor ax, ax
  9617 0000754F E8D0050000          <2> 		call showwindow
  9618 00007554 E95BB6FFFF          <2> 		jmp os
  9619                              <2> 
  9620                              <2> 	winblows:
  9621 00007559 BE[AC750000]        <2> 		mov esi, turnoffmsg
  9622 0000755E BB[87530000]        <2> 		mov ebx, turnoff
  9623 00007563 668B0D[3A580000]    <2> 		mov cx, [resolutiony]
  9624 0000756A 6681E92000          <2> 		sub cx, 32
  9625 0000756F 6631D2              <2> 		xor dx, dx
  9626 00007572 30E4                <2> 		xor ah, ah
  9627 00007574 B010                <2> 		mov al, 00010000b
  9628 00007576 E808030000          <2> 		call showstring
  9629 0000757B BE[A3750000]        <2> 		mov esi, gotomenu
  9630 00007580 668B0D[3A580000]    <2> 		mov cx, [resolutiony]
  9631 00007587 6681E93000          <2> 		sub cx, 48
  9632 0000758C 6631D2              <2> 		xor dx, dx
  9633 0000758F 30E4                <2> 		xor ah, ah
  9634 00007591 B010                <2> 		mov al, 00010000b
  9635 00007593 BB[12750000]        <2> 		mov ebx, gotomenuboot
  9636 00007598 E9E6020000          <2> 		jmp showstring
  9637                              <2> 		
  9638                              <2> 
  9639 0000759D 737461727400        <2> 	start	db "start",0
  9640 000075A3 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9641 000075AC 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9642 000075B5 00                  <2>
  9643 000075B6 426F6F2100          <2> 	boomsg db "Boo!",0
  9644 000075BB 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9645 000075C4 73206561737920746F- <2>
  9646 000075CD 20647261772E00      <2>
  9647 000075D4 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9648 000075DD 6D206E6F6D00        <2>
  9649                              <2> 
  9650 000075E3 20035802            <2> 	termwindow:	dw 800,600	;window size
  9651 000075E7 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9652 000075EB [9CE32B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9653 000075EF [E4B82C00]          <2>
  9654 000075F3 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9655                              <2> 	
  9656 000075F9 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9657 0000767B <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9658 000076FD <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9659 0000777F <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9660 00007801 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9661                              <2> 
  9662                              <2> %ifdef gui.time
  9663                              <2> guitime:
  9664                              <2> 		call time	;get rtc in timeshow & dateshow
  9665                              <2> 		xor ebx, ebx
  9666                              <2> 		mov dx, [resolutionx2]
  9667                              <2> 		xor cx, cx
  9668                              <2> 		sub dx, 304
  9669                              <2> 		mov esi, dateshow
  9670                              <2> 		mov al, 00010001b
  9671                              <2> 		call showstring
  9672                              <2> 		mov esi, timeshow
  9673                              <2> 		xor ebx, ebx
  9674                              <2> 		mov al, 00010001b
  9675                              <2> 		call showstring
  9676                              <2> 		ret
  9677                              <2> %endif
  9678                              <1> %include "source/gui/text.asm"
  9679                              <2> 	showstring:
  9680 00007883 A2[18810000]        <2> 		mov [mouseselecton], al
  9681 00007888 8025[18810000]01    <2> 		and byte [mouseselecton], 1
  9682 0000788F B402                <2> 		mov ah, 2
  9683 00007891 E8060E0000          <2> 		call graphicsadd
  9684                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9685 00007896 30E4                <2> 		xor ah, ah
  9686 00007898 8A06                <2> 		mov al, [esi]
  9687 0000789A 3CFF                <2> 		cmp al, 0xFF
  9688 0000789C 7506                <2> 		jne .notnull
  9689 0000789E 46                  <2> 		inc esi
  9690 0000789F E9F2FFFFFF          <2> 		jmp showstring2
  9691                              <2> .notnull:
  9692 000078A4 3CC0                <2> 		cmp al, 0xC0
  9693 000078A6 7234                <2> 		jb .doneutf
  9694 000078A8 3CE0                <2> 		cmp al, 0xE0
  9695 000078AA 721D                <2> 		jb .two
  9696 000078AC 46                  <2> 		inc esi
  9697 000078AD 668B1E              <2> 		mov bx, [esi]
  9698 000078B0 46                  <2> 		inc esi
  9699 000078B1 C0E004              <2> 		shl al, 4
  9700 000078B4 66C1E302            <2> 		shl bx, 2
  9701 000078B8 C0EF02              <2> 		shr bh, 2
  9702 000078BB 66C1EB02            <2> 		shr bx, 2
  9703 000078BF 08C7                <2> 		or bh, al
  9704 000078C1 6689D8              <2> 		mov ax, bx
  9705 000078C4 E913000000          <2> 		jmp .doneutf
  9706                              <2> 	.two:
  9707 000078C9 8A3E                <2> 		mov bh, [esi]
  9708 000078CB 46                  <2> 		inc esi
  9709 000078CC 8A1E                <2> 		mov bl, [esi]
  9710 000078CE 66C1E302            <2> 		shl bx, 2
  9711 000078D2 C0EF02              <2> 		shr bh, 2
  9712 000078D5 66C1EB02            <2> 		shr bx, 2
  9713 000078D9 6689D8              <2> 		mov ax, bx
  9714                              <2> 	.doneutf:
  9715 000078DC 663D0000            <2> 		cmp ax, 0
  9716 000078E0 741F                <2> 		je doneshowstring
  9717 000078E2 46                  <2> 		inc esi
  9718 000078E3 56                  <2> 		push esi
  9719 000078E4 668B1D[09790000]    <2> 		mov bx, [colorfont2]
  9720 000078EB E82A000000          <2> 		call showfontvesa
  9721 000078F0 663D0A00            <2> 		cmp ax, 10
  9722 000078F4 7405                <2> 		je noproceedshst
  9723 000078F6 6681C20800          <2> 		add dx, 8
  9724                              <2> 	noproceedshst:
  9725 000078FB 5E                  <2> 		pop esi
  9726 000078FC E995FFFFFF          <2> 		jmp showstring2
  9727                              <2> 	doneshowstring:
  9728 00007901 C605[18810000]00    <2> 		mov byte [mouseselecton], 0
  9729 00007908 C3                  <2> 		ret
  9730                              <2> 
  9731 00007909 FFFF                <2> colorfont2 dw 0xFFFF
  9732 0000790B 00                  <2> colorcache db 0
  9733                              <2> 
  9734 0000790C 02                  <2> resolutionbytes db 2
  9735 0000790D 0000                <2> posxvesa dw 0
  9736 0000790F 0000                <2> posyvesa dw 0
  9737 00007911 FFFF                <2> colorfont dw 0xFFFF
  9738                              <2> savefontvesa:		;same rules as showfontvesa
  9739 00007913 C605[17810000]01    <2> 	mov byte [savefonton], 1
  9740                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9741 0000791A 663DFF00            <2> 	cmp ax, 255
  9742 0000791E 7501                <2> 	jne nostopshowfont
  9743 00007920 C3                  <2> 	ret
  9744                              <2> nostopshowfont:
  9745 00007921 55                  <2> 	push ebp
  9746 00007922 66890D[0F790000]    <2> 	mov [posyvesa], cx
  9747 00007929 663D0A00            <2> 	cmp ax, 10
  9748 0000792D 0F8424000000        <2> 	je near goodvesafontx
  9749 00007933 31C9                <2> 	xor ecx, ecx
  9750 00007935 668B0D[26590000]    <2> 	mov cx, [resolutionx2]
  9751 0000793C 6639CA              <2> 	cmp dx, cx
  9752 0000793F 7616                <2> 	jbe goodvesafontx
  9753 00007941 6631D2              <2> 	xor dx, dx
  9754 00007944 668B0D[0F790000]    <2> 	mov cx, [posyvesa]
  9755 0000794B 6681C11000          <2> 	add cx, 16
  9756 00007950 66890D[0F790000]    <2> 	mov [posyvesa], cx
  9757                              <2> goodvesafontx:
  9758 00007957 668B0D[0F790000]    <2> 	mov cx, [posyvesa]
  9759 0000795E 668915[0D790000]    <2> 	mov [posxvesa], dx
  9760 00007965 8B3D[4E580000]      <2> 	mov edi, [physbaseptr]
  9761 0000796B 66891D[11790000]    <2> 	mov [colorfont], bx
  9762 00007972 668B2D[11790000]    <2> 	mov bp, [colorfont]
  9763 00007979 31DB                <2> 	xor ebx, ebx
  9764 0000797B 6689C3              <2> 	mov bx, ax
  9765 0000797E 31C0                <2> 	xor eax, eax
  9766 00007980 6689D8              <2> 	mov ax, bx
  9767 00007983 6689D3              <2> 	mov bx, dx
  9768 00007986 89DA                <2> 	mov edx, ebx
  9769 00007988 31DB                <2> 	xor ebx, ebx
  9770 0000798A 6681F90000          <2> 	cmp cx, 0
  9771 0000798F 7414                <2> 	je vesaposloopdn
  9772 00007991 668B1D[26590000]    <2> 	mov bx, [resolutionx2]
  9773                              <2> vesaposloop:
  9774 00007998 52                  <2> 	push edx
  9775 00007999 50                  <2> 	push eax
  9776 0000799A 31C0                <2> 	xor eax, eax
  9777 0000799C 6689C8              <2> 	mov ax, cx
  9778 0000799F F7E3                <2> 	mul ebx
  9779 000079A1 01C7                <2> 	add edi, eax
  9780 000079A3 58                  <2> 	pop eax
  9781 000079A4 5A                  <2> 	pop edx
  9782                              <2> vesaposloopdn:
  9783 000079A5 01D7                <2> 	add edi, edx
  9784 000079A7 BE[5C8C0000]        <2> 	mov esi, fonts
  9785                              <2> findfontvesa:
  9786 000079AC 663D0A00            <2> 	cmp ax, 10
  9787 000079B0 0F84EB000000        <2> 	je near nwlinevesa
  9788 000079B6 C1E004              <2> 	shl eax, 4
  9789 000079B9 01C6                <2> 	add esi, eax
  9790 000079BB C1E804              <2> 	shr eax, 4
  9791 000079BE 81FE[5C8C0300]      <2> 	cmp esi, fontend
  9792 000079C4 0F83AB000000        <2> 	jae near donefontvesa
  9793 000079CA 4E                  <2> 	dec esi
  9794                              <2> foundfontvesa:
  9795 000079CB 46                  <2> 	inc esi
  9796 000079CC 803D[17810000]01    <2> 	cmp byte [savefonton], 1
  9797 000079D3 0F84EA000000        <2> 	je near vesafontsaver
  9798 000079D9 30C9                <2> 	xor cl, cl
  9799 000079DB 8A06                <2> 	mov al, [esi]
  9800 000079DD 668B15[26590000]    <2> 	mov dx, [resolutionx2]
  9801 000079E4 662B15[0D790000]    <2> 	sub dx, [posxvesa]
  9802 000079EB 6681FA1000          <2> 	cmp dx, 16
  9803 000079F0 7708                <2> 	ja paintfontvesa
  9804 000079F2 D0EA                <2> 	shr dl, 1
  9805 000079F4 8815[A07A0000]      <2> 	mov [charwidth], dl
  9806                              <2> paintfontvesa:
  9807 000079FA B201                <2> 	mov dl, 1
  9808 000079FC 20C2                <2> 	and dl, al
  9809 000079FE 803D[16810000]01    <2> 	cmp byte [showcursorfonton], 1
  9810 00007A05 0F842E000000        <2> 	je near nodelpaintedfont
  9811 00007A0B 803D[16810000]02    <2> 	cmp byte [showcursorfonton], 2
  9812 00007A12 0F8511000000        <2> 	jne near noswitchcursorfonton
  9813 00007A18 80FA00              <2> 	cmp dl, 0
  9814 00007A1B 0F8420000000        <2> 	je near nopixelset
  9815 00007A21 66892F              <2> 	mov [edi], bp
  9816 00007A24 E918000000          <2> 	jmp nopixelset
  9817                              <2> noswitchcursorfonton:
  9818 00007A29 3215[18810000]      <2> 	xor dl, [mouseselecton]
  9819 00007A2F 668B1D[27720000]    <2> 	mov bx, [background]
  9820 00007A36 66891F              <2> 	mov [edi], bx
  9821                              <2> nodelpaintedfont:
  9822 00007A39 80FA00              <2> 	cmp dl, 0
  9823 00007A3C 7403                <2> 	je nopixelset
  9824 00007A3E 66892F              <2> 	mov [edi], bp
  9825                              <2> nopixelset:
  9826 00007A41 81C702000000        <2> 	add edi, 2
  9827 00007A47 D0C0                <2> 	rol al, 1
  9828 00007A49 FEC1                <2> 	inc cl
  9829 00007A4B 3A0D[A07A0000]      <2> 	cmp cl, [charwidth]
  9830 00007A51 72A7                <2> 	jb paintfontvesa
  9831 00007A53 FEC5                <2> 	inc ch
  9832 00007A55 31D2                <2> 	xor edx, edx
  9833 00007A57 668B15[26590000]    <2> 	mov dx, [resolutionx2]
  9834 00007A5E 01D7                <2> 	add edi, edx
  9835 00007A60 31D2                <2> 	xor edx, edx
  9836 00007A62 8A15[A07A0000]      <2> 	mov dl, [charwidth]
  9837 00007A68 00D2                <2> 	add dl, dl
  9838 00007A6A 29D7                <2> 	sub edi, edx
  9839 00007A6C 80FD10              <2> 	cmp ch, 16
  9840 00007A6F 0F8256FFFFFF        <2> 	jb foundfontvesa
  9841                              <2> donefontvesa:
  9842 00007A75 C605[A07A0000]08    <2> 	mov byte [charwidth], 8
  9843 00007A7C 668B15[0D790000]    <2> 	mov dx, [posxvesa]
  9844 00007A83 8A1D[A07A0000]      <2> 	mov bl, [charwidth]
  9845 00007A89 30FF                <2> 	xor bh, bh
  9846 00007A8B 6601DA              <2> 	add dx, bx
  9847 00007A8E 6689EB              <2> 	mov bx, bp
  9848 00007A91 668B0D[0F790000]    <2> 	mov cx, [posyvesa]
  9849 00007A98 883D[17810000]      <2> 	mov [savefonton], bh
  9850 00007A9E 5D                  <2> 	pop ebp
  9851 00007A9F C3                  <2> 	ret
  9852 00007AA0 08                  <2> charwidth db 8
  9853                              <2> nwlinevesa:
  9854 00007AA1 6631D2              <2> 	xor dx, dx
  9855 00007AA4 668915[0D790000]    <2> 	mov [posxvesa], dx
  9856 00007AAB 668B0D[0F790000]    <2> 	mov cx, [posyvesa]
  9857 00007AB2 6681C11000          <2> 	add cx, 16
  9858 00007AB7 66890D[0F790000]    <2> 	mov [posyvesa], cx
  9859 00007ABE E9B2FFFFFF          <2> 	jmp donefontvesa
  9860                              <2> vesafontsaver:
  9861 00007AC3 30C0                <2> 	xor al, al
  9862 00007AC5 30C9                <2> 	xor cl, cl
  9863                              <2> vesafontsaver2:
  9864 00007AC7 66392F              <2> 	cmp [edi], bp
  9865 00007ACA 742F                <2> 	je colorfontmatch
  9866                              <2> donecolormatch:
  9867 00007ACC 81C702000000        <2> 	add edi, 2
  9868 00007AD2 D0C0                <2> 	rol al, 1
  9869 00007AD4 FEC1                <2> 	inc cl
  9870 00007AD6 80F908              <2> 	cmp cl, 8
  9871 00007AD9 72EC                <2> 	jb vesafontsaver2
  9872 00007ADB 8806                <2> 	mov [esi], al
  9873 00007ADD 46                  <2> 	inc esi
  9874 00007ADE FEC5                <2> 	inc ch
  9875 00007AE0 31D2                <2> 	xor edx, edx
  9876 00007AE2 668B15[26590000]    <2> 	mov dx, [resolutionx2]
  9877 00007AE9 01D7                <2> 	add edi, edx
  9878 00007AEB 81EF10000000        <2> 	sub edi, 16
  9879 00007AF1 80FD10              <2> 	cmp ch, 16
  9880 00007AF4 72CD                <2> 	jb vesafontsaver
  9881 00007AF6 E97AFFFFFF          <2> 	jmp donefontvesa
  9882                              <2> colorfontmatch:
  9883 00007AFB 0401                <2> 	add al, 1
  9884 00007AFD E9CAFFFFFF          <2> 	jmp donecolormatch
  9885                              <1> %include "source/gui/window.asm"
  9886 00007B02 0000                <2> winvcopystx dw 0
  9887 00007B04 0000                <2> winvcopysty dw 0
  9888 00007B06 0000                <2> winvcopydx dw 0
  9889 00007B08 0000                <2> winvcopycx dw 0
  9890 00007B0A FFFF0000            <2> windowcolor dw 0xFFFF,0
  9891 00007B0E 00000000            <2> windowbufloc: dd 0
  9892 00007B12 00000000            <2> windowvideobuf dd 0
  9893 00007B16 00000000            <2> windowvideobuf2 dd 0
  9894 00007B1A 00000000            <2> windowinfobuf dd 0
  9895 00007B1E 0000                <2> termcol dw 0
  9896 00007B20 00000000            <2> wincopyendpos dd 0
  9897                              <2> 
  9898                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9899 00007B24 C605[1A240000]01    <2> 		mov byte [termguion], 1
  9900 00007B2B 6681C11000          <2> 		add cx, 16
  9901 00007B30 668915[027B0000]    <2> 		mov [winvcopystx], dx
  9902 00007B37 66890D[047B0000]    <2> 		mov [winvcopysty], cx
  9903 00007B3E 8935[1A7B0000]      <2> 		mov [windowinfobuf], esi
  9904 00007B44 668B16              <2> 		mov dx, [esi]
  9905 00007B47 668B4E02            <2> 		mov cx, [esi + 2]
  9906 00007B4B 31C0                <2> 		xor eax, eax
  9907 00007B4D 31DB                <2> 		xor ebx, ebx
  9908 00007B4F 6689D0              <2> 		mov ax, dx
  9909 00007B52 6689CB              <2> 		mov bx, cx
  9910 00007B55 66C1E803            <2> 		shr ax, 3
  9911 00007B59 66C1EB04            <2> 		shr bx, 4
  9912 00007B5D 66A3[1E7B0000]      <2> 		mov [termcol], ax
  9913 00007B63 A2[11260000]        <2> 		mov [charxy], al
  9914 00007B68 881D[12260000]      <2> 		mov [charxy + 1], bl
  9915 00007B6E 8B7E04              <2> 		mov edi, [esi + 4]
  9916 00007B71 893D[0A7B0000]      <2> 		mov [windowcolor], edi
  9917 00007B77 8B7E0C              <2> 		mov edi, [esi + 12]
  9918 00007B7A 893D[167B0000]      <2> 		mov [windowvideobuf2], edi
  9919 00007B80 8B7E08              <2> 		mov edi, [esi + 8]
  9920 00007B83 893D[127B0000]      <2> 		mov [windowvideobuf], edi
  9921 00007B89 81FB00000000        <2> 		cmp ebx, 0
  9922 00007B8F 0F8460050000        <2> 		je near donewincopynow
  9923                              <2> 	findendposwin:
  9924 00007B95 C1E002              <2> 		shl eax, 2
  9925 00007B98 31D2                <2> 		xor edx, edx
  9926 00007B9A F7E3                <2> 		mul ebx
  9927 00007B9C 01C7                <2> 		add edi, eax
  9928 00007B9E 893D[207B0000]      <2> 		mov [wincopyendpos], edi
  9929 00007BA4 31FF                <2> 		xor edi, edi
  9930 00007BA6 6631C0              <2> 		xor ax, ax
  9931 00007BA9 6631DB              <2> 		xor bx, bx
  9932 00007BAC 6601D2              <2> 		add dx, dx
  9933 00007BAF 668915[067B0000]    <2> 		mov [winvcopydx], dx
  9934 00007BB6 66890D[087B0000]    <2> 		mov [winvcopycx], cx
  9935 00007BBD 668B0D[047B0000]    <2> 		mov cx, [winvcopysty]
  9936 00007BC4 6681E91000          <2> 		sub cx, 16
  9937 00007BC9 668B15[027B0000]    <2> 		mov dx, [winvcopystx]
  9938 00007BD0 C605[1B240000]00    <2> 		mov byte [termcopyon], 0
  9939 00007BD7 B403                <2> 		mov ah, 3
  9940 00007BD9 E8BE0A0000          <2> 		call graphicsadd
  9941                              <2> 	showwindow2:
  9942 00007BDE 6681C11000          <2> 		add cx, 16
  9943 00007BE3 668915[027B0000]    <2> 		mov [winvcopystx], dx
  9944 00007BEA 66890D[047B0000]    <2> 		mov [winvcopysty], cx
  9945 00007BF1 668B16              <2> 		mov dx, [esi]
  9946 00007BF4 668B4E02            <2> 		mov cx, [esi + 2]
  9947 00007BF8 6601D2              <2> 		add dx, dx
  9948 00007BFB 668915[067B0000]    <2> 		mov [winvcopydx], dx
  9949 00007C02 66890D[087B0000]    <2> 		mov [winvcopycx], cx
  9950 00007C09 E818000000          <2> 		call reloadwindowtitle
  9951 00007C0E 803D[83860000]01    <2> 		cmp byte [windrag], 1
  9952 00007C15 0F83E9040000        <2> 		jae near forgetresetstuff
  9953 00007C1B 8B3D[0E7B0000]      <2> 		mov edi, [windowbufloc]
  9954 00007C21 E96E020000          <2> 		jmp windowvideocopyset
  9955                              <2> 		
  9956                              <2> 	reloadwindowtitle:
  9957 00007C26 8B3D[0E7B0000]      <2> 		mov edi, [windowbufloc]
  9958 00007C2C 31D2                <2> 		xor edx, edx
  9959 00007C2E 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  9960 00007C35 C1E204              <2> 		shl edx, 4
  9961 00007C38 29D7                <2> 		sub edi, edx
  9962 00007C3A 803D[1B240000]00    <2> 		cmp byte [termcopyon], 0
  9963 00007C41 7532                <2> 		jne nocleartitlebarpos
  9964 00007C43 8B3D[4E580000]      <2> 		mov edi, [physbaseptr]
  9965 00007C49 31D2                <2> 		xor edx, edx
  9966 00007C4B 668B15[027B0000]    <2> 		mov dx, [winvcopystx]
  9967 00007C52 01D7                <2> 		add edi, edx
  9968 00007C54 31C9                <2> 		xor ecx, ecx
  9969 00007C56 668B0D[047B0000]    <2> 		mov cx, [winvcopysty]
  9970 00007C5D 6681E91000          <2> 		sub cx, 16
  9971 00007C62 6681F90000          <2> 		cmp cx, 0
  9972 00007C67 740C                <2> 		je nocleartitlebarpos
  9973                              <2> 	cleartitlebarpos:
  9974 00007C69 31C0                <2> 		xor eax, eax
  9975 00007C6B 66A1[26590000]      <2> 		mov ax, [resolutionx2]
  9976 00007C71 F7E1                <2> 		mul ecx
  9977 00007C73 01C7                <2> 		add edi, eax
  9978                              <2> 	nocleartitlebarpos:
  9979 00007C75 66B91000            <2> 		mov cx, 16
  9980 00007C79 668B15[067B0000]    <2> 		mov dx, [winvcopydx]
  9981 00007C80 6681F90000          <2> 		cmp cx, 0
  9982 00007C85 0F8448000000        <2> 		je near canceltitlebarput
  9983 00007C8B 6681FA0000          <2> 		cmp dx, 0
  9984 00007C90 0F843D000000        <2> 		je near canceltitlebarput
  9985                              <2> 	titlebarput:
  9986 00007C96 66A1[0A7B0000]      <2> 		mov ax, [windowcolor]
  9987 00007C9C 668907              <2> 		mov [edi], ax
  9988 00007C9F 6681EA0200          <2> 		sub dx, 2
  9989 00007CA4 81C702000000        <2> 		add edi, 2
  9990 00007CAA 6681FA0000          <2> 		cmp dx, 0
  9991 00007CAF 75E5                <2> 		jne titlebarput
  9992 00007CB1 31D2                <2> 		xor edx, edx
  9993 00007CB3 668B15[26590000]    <2> 		mov dx, [resolutionx2]
  9994 00007CBA 6649                <2> 		dec cx
  9995 00007CBC 662B15[067B0000]    <2> 		sub dx, [winvcopydx]
  9996 00007CC3 01D7                <2> 		add edi, edx
  9997 00007CC5 668B15[067B0000]    <2> 		mov dx, [winvcopydx]
  9998 00007CCC 6681F90000          <2> 		cmp cx, 0
  9999 00007CD1 75C3                <2> 		jne titlebarput
 10000                              <2> 	canceltitlebarput:
 10001 00007CD3 893D[0E7B0000]      <2> 		mov [windowbufloc], edi
 10002 00007CD9 803D[1B240000]02    <2> 		cmp byte [termcopyon], 2
 10003 00007CE0 0F841C010000        <2> 		je near winvcpst
 10004 00007CE6 668B1D[27720000]    <2> 		mov bx, [background]
 10005 00007CED 6653                <2> 		push bx
 10006 00007CEF 6631DB              <2> 		xor bx, bx
 10007 00007CF2 66891D[27720000]    <2> 		mov [background], bx
 10008 00007CF9 6631C0              <2> 		xor ax, ax
 10009 00007CFC 81C610000000        <2> 		add esi, 16
 10010 00007D02 668B15[027B0000]    <2> 		mov dx, [winvcopystx]
 10011 00007D09 668B0D[047B0000]    <2> 		mov cx, [winvcopysty]
 10012 00007D10 6681E91000          <2> 		sub cx, 16
 10013 00007D15 668B1D[0A7B0000]    <2> 		mov bx, [windowcolor]
 10014 00007D1C C605[18810000]01    <2> 		mov byte [mouseselecton], 1
 10015 00007D23 E86EFBFFFF          <2> 		call showstring2	;Show window title
 10016 00007D28 8B35[592D0000]      <2> 		mov esi, [usercache]
 10017 00007D2E 6681C21000          <2> 		add dx, 16
 10018 00007D33 C605[18810000]01    <2> 		mov byte [mouseselecton], 1
 10019 00007D3A E857FBFFFF          <2> 		call showstring2	;Show user name
 10020 00007D3F BE[CD890000]        <2> 		mov esi, computer
 10021 00007D44 C605[18810000]01    <2> 		mov byte [mouseselecton], 1
 10022 00007D4B E846FBFFFF          <2> 		call showstring2	;Show computer name
 10023 00007D50 66B85800            <2> 		mov ax, "X"
 10024 00007D54 66BB00F8            <2> 		mov bx, 1111100000000000b
 10025 00007D58 668B15[027B0000]    <2> 		mov dx, [winvcopystx]
 10026 00007D5F 668B0D[047B0000]    <2> 		mov cx, [winvcopysty]
 10027 00007D66 6681E91000          <2> 		sub cx, 16
 10028 00007D6B 6681EA1000          <2> 		sub dx, 16
 10029 00007D70 660315[067B0000]    <2> 		add dx, [winvcopydx]
 10030 00007D77 C605[18810000]01    <2> 		mov byte [mouseselecton], 1
 10031 00007D7E 663B15[26590000]    <2> 		cmp dx, [resolutionx2]
 10032 00007D85 7305                <2> 		jae .nox
 10033 00007D87 E88EFBFFFF          <2> 		call showfontvesa
 10034                              <2> .nox:
 10035 00007D8C 668B1D[27720000]    <2> 		mov bx, [background]
 10036 00007D93 6681EA1800          <2> 		sub dx, 24
 10037 00007D98 66B82B00            <2> 		mov ax, "+"
 10038 00007D9C 66BBE007            <2> 		mov bx, 0000011111100000b
 10039 00007DA0 C605[18810000]01    <2> 		mov byte [mouseselecton], 1
 10040 00007DA7 663B15[26590000]    <2> 		cmp dx, [resolutionx2]
 10041 00007DAE 7305                <2> 		jae .noplus
 10042 00007DB0 E865FBFFFF          <2> 		call showfontvesa
 10043                              <2> .noplus:
 10044 00007DB5 6681EA1800          <2> 		sub dx, 24
 10045 00007DBA 66B82D00            <2> 		mov ax, "-"
 10046 00007DBE 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10047 00007DC2 C605[18810000]01    <2> 		mov byte [mouseselecton], 1
 10048 00007DC9 663B15[26590000]    <2> 		cmp dx, [resolutionx2]
 10049 00007DD0 7305                <2> 		jae .nominus
 10050 00007DD2 E843FBFFFF          <2> 		call showfontvesa
 10051                              <2> .nominus:
 10052 00007DD7 6681EA1800          <2> 		sub dx, 24
 10053 00007DDC 66B83F00            <2> 		mov ax, "?"
 10054 00007DE0 66BB1F00            <2> 		mov bx, 0000000000011111b
 10055 00007DE4 C605[18810000]01    <2> 		mov byte [mouseselecton], 1
 10056 00007DEB 663B15[26590000]    <2> 		cmp dx, [resolutionx2]
 10057 00007DF2 7305                <2> 		jae .noquestion
 10058 00007DF4 E821FBFFFF          <2> 		call showfontvesa
 10059                              <2> .noquestion:
 10060 00007DF9 665B                <2> 		pop bx
 10061 00007DFB 66891D[27720000]    <2> 		mov [background], bx
 10062                              <2> 	winvcpst:
 10063 00007E02 C3                  <2> 		ret
 10064                              <2> 
 10065                              <2> 	windowvideocopy:
 10066 00007E03 8B35[1A7B0000]      <2> 		mov esi, [windowinfobuf]
 10067 00007E09 668B16              <2> 		mov dx, [esi]
 10068 00007E0C 668B4E02            <2> 		mov cx, [esi + 2]
 10069 00007E10 8B7E04              <2> 		mov edi, [esi + 4]
 10070 00007E13 893D[0A7B0000]      <2> 		mov [windowcolor], edi
 10071 00007E19 8B7E08              <2> 		mov edi, [esi + 8]
 10072 00007E1C 8B5E0C              <2> 		mov ebx, [esi + 12]
 10073 00007E1F 893D[127B0000]      <2> 		mov [windowvideobuf], edi
 10074 00007E25 891D[167B0000]      <2> 		mov [windowvideobuf2], ebx
 10075 00007E2B 31C0                <2> 		xor eax, eax
 10076 00007E2D 31DB                <2> 		xor ebx, ebx
 10077 00007E2F 6689D0              <2> 		mov ax, dx
 10078 00007E32 6689CB              <2> 		mov bx, cx
 10079 00007E35 66C1E803            <2> 		shr ax, 3
 10080 00007E39 66C1EB04            <2> 		shr bx, 4
 10081 00007E3D 66A3[1E7B0000]      <2> 		mov [termcol], ax
 10082 00007E43 A2[11260000]        <2> 		mov [charxy], al
 10083 00007E48 881D[12260000]      <2> 		mov [charxy + 1], bl
 10084 00007E4E 8B3D[0E7B0000]      <2> 		mov edi, [windowbufloc]
 10085 00007E54 3B3D[4E580000]      <2> 		cmp edi, [physbaseptr]
 10086 00007E5A 0F8334000000        <2> 		jae near windowvideocopyset
 10087 00007E60 31C9                <2> 		xor ecx, ecx
 10088 00007E62 31D2                <2> 		xor edx, edx
 10089 00007E64 668B15[027B0000]    <2> 		mov dx, [winvcopystx]
 10090 00007E6B 668B0D[047B0000]    <2> 		mov cx, [winvcopysty]
 10091 00007E72 8B3D[4E580000]      <2> 		mov edi, [physbaseptr]
 10092 00007E78 01D7                <2> 		add edi, edx
 10093 00007E7A 81F900000000        <2> 		cmp ecx, 0
 10094 00007E80 7412                <2> 		je windowvideocopyset
 10095                              <2> 	yrescopylp:
 10096 00007E82 31C0                <2> 		xor eax, eax
 10097 00007E84 66A1[26590000]      <2> 		mov ax, [resolutionx2]
 10098 00007E8A F7E1                <2> 		mul ecx
 10099 00007E8C 01C7                <2> 		add edi, eax
 10100 00007E8E 893D[0E7B0000]      <2> 		mov [windowbufloc], edi
 10101                              <2> 	windowvideocopyset:
 10102 00007E94 6631C9              <2> 		xor cx, cx
 10103 00007E97 6649                <2> 		dec cx
 10104 00007E99 66890D[0C810000]    <2> 		mov [charposline], cx
 10105 00007EA0 89FE                <2> 		mov esi, edi
 10106 00007EA2 81EE10000000        <2> 		sub esi, 16
 10107 00007EA8 31D2                <2> 		xor edx, edx
 10108 00007EAA 668B15[26590000]    <2> 		mov dx, [resolutionx2]
 10109 00007EB1 C1E204              <2> 		shl edx, 4
 10110 00007EB4 01D6                <2> 		add esi, edx
 10111 00007EB6 8B3D[127B0000]      <2> 		mov edi, [windowvideobuf]
 10112 00007EBC 81EF04000000        <2> 		sub edi, 4
 10113 00007EC2 893D[0E810000]      <2> 		mov [charposvbuf], edi
 10114 00007EC8 E91B010000          <2> 		jmp nextcharwin
 10115                              <2> 	win.write:	;adjusted this to use alpha
 10116                              <2> 				;5R, 6G, 5B
 10117                              <2> %ifdef gui.alphablending
 10118 00007ECD 56                  <2> 		push esi
 10119 00007ECE 6653                <2> 		push bx
 10120 00007ED0 6651                <2> 		push cx
 10121 00007ED2 6652                <2> 		push dx
 10122                              <2> %ifdef gui.background
 10123 00007ED4 89FE                <2> 		mov esi, edi
 10124 00007ED6 2B35[4E580000]      <2> 		sub esi, [physbaseptr]
 10125 00007EDC 0335[F9710000]      <2> 		add esi, [backgroundimage]
 10126 00007EE2 813D[F9710000]0000- <2> 		cmp dword [backgroundimage], 0
 10127 00007EEA 0000                <2>
 10128 00007EEC 7505                <2> 		jne .red
 10129                              <2> %endif
 10130 00007EEE BE[27720000]        <2> 		mov esi, background
 10131                              <2> 	.red:
 10132 00007EF3 668B0E              <2> 		mov cx, [esi]
 10133 00007EF6 66C1E90B            <2> 		shr cx, 11
 10134 00007EFA 6689C3              <2> 		mov bx, ax
 10135 00007EFD 66C1EB0B            <2> 		shr bx, 11
 10136 00007F01 6601D9              <2> 		add cx, bx
 10137 00007F04 6601D9              <2> 		add cx, bx
 10138 00007F07 6601D9              <2> 		add cx, bx
 10139 00007F0A 66C1E902            <2> 		shr cx, 2
 10140 00007F0E 66C1E10B            <2> 		shl cx, 11
 10141 00007F12 6689CA              <2> 		mov dx, cx
 10142                              <2> 	.green:
 10143 00007F15 668B0E              <2> 		mov cx, [esi]
 10144 00007F18 66C1E105            <2> 		shl cx, 5
 10145 00007F1C 66C1E90A            <2> 		shr cx, 10
 10146 00007F20 6689C3              <2> 		mov bx, ax
 10147 00007F23 66C1E305            <2> 		shl bx, 5
 10148 00007F27 66C1EB0A            <2> 		shr bx, 10
 10149 00007F2B 6601D9              <2> 		add cx, bx
 10150 00007F2E 6601D9              <2> 		add cx, bx
 10151 00007F31 6601D9              <2> 		add cx, bx
 10152 00007F34 66C1E902            <2> 		shr cx, 2
 10153 00007F38 66C1E105            <2> 		shl cx, 5
 10154 00007F3C 6601CA              <2> 		add dx, cx
 10155                              <2> 	.blue:
 10156 00007F3F 668B0E              <2> 		mov cx, [esi]
 10157 00007F42 66C1E10B            <2> 		shl cx, 11
 10158 00007F46 66C1E90B            <2> 		shr cx, 11
 10159 00007F4A 6689C3              <2> 		mov bx, ax
 10160 00007F4D 66C1E30B            <2> 		shl bx, 11
 10161 00007F51 66C1EB0B            <2> 		shr bx, 11
 10162 00007F55 6601D9              <2> 		add cx, bx
 10163 00007F58 6601D9              <2> 		add cx, bx
 10164 00007F5B 6601D9              <2> 		add cx, bx
 10165 00007F5E 66C1E902            <2> 		shr cx, 2
 10166 00007F62 6601CA              <2> 		add dx, cx
 10167 00007F65 668917              <2> 		mov [edi], dx
 10168 00007F68 665A                <2> 		pop dx
 10169 00007F6A 6659                <2> 		pop cx
 10170 00007F6C 665B                <2> 		pop bx
 10171 00007F6E 5E                  <2> 		pop esi
 10172                              <2> %else
 10173                              <2> 		mov [edi], ax
 10174                              <2> %endif
 10175 00007F6F C3                  <2> 		ret
 10176                              <2> 	copywindow:
 10177 00007F70 B201                <2> 		mov dl, 1
 10178 00007F72 D0C6                <2> 		rol dh, 1
 10179 00007F74 20F2                <2> 		and dl, dh
 10180 00007F76 66813D[0B790000]80- <2> 		cmp word [colorcache], 0x80
 10181 00007F7E 00                  <2>
 10182 00007F7F 7320                <2> 		jae switchwincolors
 10183 00007F81 66A1[0C7B0000]      <2> 		mov ax, [windowcolor + 2]
 10184 00007F87 E841FFFFFF          <2> 		call win.write
 10185 00007F8C 80FA00              <2> 		cmp dl, 0
 10186 00007F8F 742B                <2> 		je nowritewin
 10187 00007F91 66A1[0A7B0000]      <2> 		mov ax, [windowcolor]
 10188 00007F97 E831FFFFFF          <2> 		call win.write
 10189 00007F9C E91B000000          <2> 		jmp nowritewin
 10190                              <2> 	switchwincolors:
 10191 00007FA1 66A1[0A7B0000]      <2> 		mov ax, [windowcolor]
 10192 00007FA7 E821FFFFFF          <2> 		call win.write
 10193 00007FAC 80FA00              <2> 		cmp dl, 0
 10194 00007FAF 740B                <2> 		je nowritewin
 10195 00007FB1 66A1[0C7B0000]      <2> 		mov ax, [windowcolor + 2]
 10196 00007FB7 E811FFFFFF          <2> 		call win.write
 10197                              <2> 	nowritewin:
 10198 00007FBC 81C702000000        <2> 		add edi, 2
 10199 00007FC2 FEC1                <2> 		inc cl
 10200 00007FC4 80F908              <2> 		cmp cl, 8
 10201 00007FC7 75A7                <2> 		jne copywindow
 10202 00007FC9 43                  <2> 		inc ebx
 10203 00007FCA 30C9                <2> 		xor cl, cl
 10204 00007FCC 31D2                <2> 		xor edx, edx
 10205 00007FCE 668B15[26590000]    <2> 		mov dx, [resolutionx2]
 10206 00007FD5 01D6                <2> 		add esi, edx
 10207 00007FD7 89F7                <2> 		mov edi, esi
 10208 00007FD9 8AB3[5C8C0000]      <2> 		mov dh, [fonts + ebx]
 10209 00007FDF D0CE                <2> 		ror dh, 1
 10210 00007FE1 FEC5                <2> 		inc ch
 10211 00007FE3 80FD10              <2> 		cmp ch, 16
 10212 00007FE6 7588                <2> 		jne copywindow
 10213                              <2> 	nextcharwin:
 10214 00007FE8 6631C9              <2> 		xor cx, cx
 10215 00007FEB 8B3D[0E810000]      <2> 		mov edi, [charposvbuf]
 10216 00007FF1 81C704000000        <2> 		add edi, 4
 10217 00007FF7 3B3D[207B0000]      <2> 		cmp edi, [wincopyendpos]
 10218 00007FFD 0F83F2000000        <2> 		jae near donewincopynow
 10219 00008003 668B5F02            <2> 		mov bx, [edi + 2]
 10220 00008007 6681FB0000          <2> 		cmp bx, 0
 10221 0000800C 7508                <2> 		jne nofixcolorwin
 10222 0000800E 66BB0700            <2> 		mov bx, 7
 10223 00008012 66895F02            <2> 		mov [edi + 2], bx
 10224                              <2> 	nofixcolorwin:
 10225 00008016 66891D[0B790000]    <2> 		mov [colorcache], bx
 10226 0000801D 8B1F                <2> 		mov ebx, [edi]
 10227 0000801F 893D[0E810000]      <2> 		mov [charposvbuf], edi
 10228 00008025 813D[167B0000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10229 0000802D 0000                <2>
 10230 0000802F 7455                <2> 		je noskipcharcopy
 10231 00008031 2B3D[127B0000]      <2> 		sub edi, [windowvideobuf]
 10232 00008037 033D[167B0000]      <2> 		add edi, [windowvideobuf2]
 10233 0000803D 8B07                <2> 		mov eax, [edi]
 10234 0000803F 39D8                <2> 		cmp eax, ebx
 10235 00008041 7543                <2> 		jne noskipcharcopy
 10236                              <2> 	skipcharcopy:
 10237 00008043 81C610000000        <2> 		add esi, 16
 10238 00008049 668B0D[0C810000]    <2> 		mov cx, [charposline]
 10239 00008050 6641                <2> 		inc cx
 10240 00008052 66890D[0C810000]    <2> 		mov [charposline], cx
 10241 00008059 663B0D[1E7B0000]    <2> 		cmp cx, [termcol]
 10242 00008060 7286                <2> 		jb nextcharwin
 10243 00008062 6631C9              <2> 		xor cx, cx
 10244 00008065 66890D[0C810000]    <2> 		mov [charposline], cx
 10245 0000806C 31D2                <2> 		xor edx, edx
 10246 0000806E 668B15[26590000]    <2> 		mov dx, [resolutionx2]
 10247 00008075 C1E204              <2> 		shl edx, 4
 10248 00008078 662B15[067B0000]    <2> 		sub dx, [winvcopydx]
 10249 0000807F 01D6                <2> 		add esi, edx
 10250 00008081 E962FFFFFF          <2> 		jmp nextcharwin
 10251                              <2> 	noskipcharcopy:
 10252 00008086 891F                <2> 		mov [edi], ebx
 10253 00008088 8B3D[0E810000]      <2> 		mov edi, [charposvbuf]
 10254 0000808E C1E310              <2> 		shl ebx, 16
 10255 00008091 C1EB0C              <2> 		shr ebx, 12
 10256 00008094 31D2                <2> 		xor edx, edx
 10257 00008096 668B15[26590000]    <2> 		mov dx, [resolutionx2]
 10258 0000809D C1E204              <2> 		shl edx, 4
 10259 000080A0 29D6                <2> 		sub esi, edx
 10260 000080A2 81C610000000        <2> 		add esi, 16
 10261 000080A8 89F7                <2> 		mov edi, esi
 10262 000080AA 668B0D[0C810000]    <2> 		mov cx, [charposline]
 10263 000080B1 6641                <2> 		inc cx
 10264 000080B3 663B0D[1E7B0000]    <2> 		cmp cx, [termcol]
 10265 000080BA 7317                <2> 		jae fixwindowcopy
 10266 000080BC 66890D[0C810000]    <2> 		mov [charposline], cx
 10267 000080C3 6631C9              <2> 		xor cx, cx
 10268 000080C6 8AB3[5C8C0000]      <2> 		mov dh, [fonts + ebx]
 10269 000080CC D0CE                <2> 		ror dh, 1
 10270 000080CE E99DFEFFFF          <2> 		jmp copywindow
 10271                              <2> fixwindowcopy:
 10272 000080D3 6631C9              <2> 		xor cx, cx
 10273 000080D6 66890D[0C810000]    <2> 		mov [charposline], cx
 10274 000080DD 662B15[067B0000]    <2> 		sub dx, [winvcopydx]
 10275 000080E4 01D6                <2> 		add esi, edx
 10276 000080E6 89F7                <2> 		mov edi, esi
 10277 000080E8 8AB3[5C8C0000]      <2> 		mov dh, [fonts + ebx]
 10278 000080EE D0CE                <2> 		ror dh, 1
 10279 000080F0 E97BFEFFFF          <2> 		jmp copywindow
 10280                              <2> donewincopynow:
 10281 000080F5 803D[1B240000]01    <2> 		cmp byte [termcopyon], 1
 10282 000080FC 7506                <2> 		jne forgetresetstuff
 10283 000080FE E834A9FFFF          <2> 		call switchtermcursor
 10284 00008103 61                  <2> 		popa
 10285                              <2> forgetresetstuff:
 10286 00008104 C605[1B240000]00    <2> 		mov byte [termcopyon], 0
 10287 0000810B C3                  <2> 		ret
 10288                              <2> 		
 10289 0000810C 0000                <2> charposline dw 0
 10290 0000810E 00000000            <2> charposvbuf dw 0,0
 10291                              <1> 				
 10292 00008112 00                  <1> copygui db 0
 10293 00008113 00                  <1> graphicsset db 0
 10294 00008114 0000                <1> graphicspos db 0,0
 10295 00008116 00                  <1> showcursorfonton db 0
 10296 00008117 00                  <1> savefonton db 0
 10297 00008118 00                  <1> mouseselecton db 0
 10298                              <1> 
 10299 00008119 00                  <1> pbutton db 0
 10300 0000811A 00                  <1> pLBUTTON db 0
 10301 0000811B 00                  <1> pRBUTTON db 0
 10302 0000811C 00000000            <1> dragging dw 0,0
 10303 00008120 0000000000000000    <1> lastpos dw 0,0,0,0
 10304 00008128 00000000            <1> colorbuf dw 0,0
 10305                              <1> 	
 10306                              <1> 	clickicon:
 10307 0000812C B001                <1> 		mov al, 1
 10308 0000812E A2[19810000]        <1> 		mov [pbutton], al
 10309 00008133 A0[1A810000]        <1> 		mov al, [pLBUTTON]
 10310 00008138 2205[2D5C0000]      <1> 		and al, [LBUTTON]
 10311 0000813E 8A25[1B810000]      <1> 		mov ah, [pRBUTTON]
 10312 00008144 2225[2E5C0000]      <1> 		and ah, [RBUTTON]
 10313 0000814A 08E0                <1> 		or al, ah
 10314 0000814C 3C00                <1> 		cmp al, 0
 10315 0000814E 741B                <1> 		je nodragclick
 10316 00008150 813D[1C810000]0100- <1> 		cmp dword [dragging], 1
 10317 00008158 0000                <1>
 10318 0000815A 732F                <1> 		jae dragclick
 10319 0000815C C705[1C810000]0100- <1> 		mov dword [dragging], 1
 10320 00008164 0000                <1>
 10321 00008166 E920000000          <1> 		jmp dragclick
 10322                              <1> 	nodragclick:
 10323 0000816B 31C0                <1> 		xor eax, eax
 10324 0000816D A3[1C810000]        <1> 		mov dword [dragging], eax
 10325 00008172 A2[19810000]        <1> 		mov [pbutton], al
 10326 00008177 A0[2D5C0000]        <1> 		mov al, [LBUTTON]
 10327 0000817C A2[1A810000]        <1> 		mov [pLBUTTON], al
 10328 00008181 A0[2E5C0000]        <1> 		mov al, [RBUTTON]
 10329 00008186 A2[1B810000]        <1> 		mov [pRBUTTON], al
 10330                              <1> 	dragclick:
 10331 0000818B 6631C0              <1> 		xor ax, ax
 10332 0000818E BE[9CCC0300]        <1> 		mov esi, graphicstable
 10333 00008193 C705[97890000]0000- <1> 		mov dword [codepointer], 0
 10334 0000819B 0000                <1>
 10335                              <1> 	clicon2:
 10336 0000819D 31D2                <1> 		xor edx, edx
 10337 0000819F 31C9                <1> 		xor ecx, ecx
 10338 000081A1 66813E0100          <1> 		cmp word [esi], 1
 10339 000081A6 0F841B000000        <1> 		je near iconselect
 10340 000081AC 66813E0200          <1> 		cmp word [esi], 2
 10341 000081B1 0F8472010000        <1> 		je near textselected
 10342 000081B7 66813E0300          <1> 		cmp word [esi], 3
 10343 000081BC 0F84CA020000        <1> 		je near windowselect
 10344 000081C2 E913040000          <1> 		jmp nexticonsel
 10345                              <1> 	iconselect:
 10346 000081C7 668B5606            <1> 		mov dx, [esi + 6]
 10347 000081CB 6689D0              <1> 		mov ax, dx
 10348 000081CE 668B4E08            <1> 		mov cx, [esi + 8]
 10349 000081D2 6689CB              <1> 		mov bx, cx
 10350 000081D5 6681C32000          <1> 		add bx, 32
 10351 000081DA 6601D0              <1> 		add ax, dx
 10352 000081DD 813D[1C810000]0100- <1> 		cmp dword [dragging], 1
 10353 000081E5 0000                <1>
 10354 000081E7 746F                <1> 		je dragicon
 10355 000081E9 813D[1C810000]0000- <1> 		cmp dword [dragging], 0
 10356 000081F1 0000                <1>
 10357 000081F3 7411                <1> 		je nodragiconcheck
 10358 000081F5 3935[1C810000]      <1> 		cmp dword [dragging], esi
 10359 000081FB 0F85D9030000        <1> 		jne near nexticonsel
 10360 00008201 E952000000          <1> 		jmp dragicon
 10361                              <1> 	nodragiconcheck:
 10362 00008206 663905[1C5B0000]    <1> 		cmp [mousecursorposition], ax
 10363 0000820D 0F82C7030000        <1> 		jb near nexticonsel
 10364 00008213 66054000            <1> 		add ax, 64
 10365 00008217 663905[1C5B0000]    <1> 		cmp [mousecursorposition], ax
 10366 0000821E 0F87B6030000        <1> 		ja near nexticonsel
 10367 00008224 6629D0              <1> 		sub ax, dx
 10368 00008227 66390D[1E5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10369 0000822E 0F82A6030000        <1> 		jb near nexticonsel
 10370 00008234 66391D[1E5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10371 0000823B 0F8799030000        <1> 		ja near nexticonsel
 10372 00008241 668B460A            <1> 		mov ax, [esi + 10]
 10373 00008245 66250100            <1> 		and ax, 1
 10374 00008249 663D0100            <1> 		cmp ax, 1
 10375 0000824D 0F84B6000000        <1> 		je near unselecticon
 10376 00008253 E98D000000          <1> 		jmp nodragicon
 10377                              <1> 	dragicon:
 10378 00008258 663905[185B0000]    <1> 		cmp [lastmouseposition], ax
 10379 0000825F 0F8275030000        <1> 		jb near nexticonsel
 10380 00008265 66054000            <1> 		add ax, 64
 10381 00008269 663905[185B0000]    <1> 		cmp [lastmouseposition], ax
 10382 00008270 0F8764030000        <1> 		ja near nexticonsel
 10383 00008276 6629D0              <1> 		sub ax, dx
 10384 00008279 66390D[1A5B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10385 00008280 0F8254030000        <1> 		jb near nexticonsel
 10386 00008286 66391D[1A5B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10387 0000828D 0F8747030000        <1> 		ja near nexticonsel
 10388 00008293 668B460A            <1> 		mov ax, [esi + 10]
 10389 00008297 2410                <1> 		and al, 00010000b
 10390 00008299 3C10                <1> 		cmp al, 00010000b
 10391 0000829B 7448                <1> 		je nodragicon
 10392 0000829D 8935[1C810000]      <1> 		mov [dragging], esi
 10393 000082A3 66D1E2              <1> 		shl dx, 1
 10394 000082A6 662B15[185B0000]    <1> 		sub dx, [lastmouseposition]
 10395 000082AD 660315[1C5B0000]    <1> 		add dx, [mousecursorposition]
 10396 000082B4 66D1EA              <1> 		shr dx, 1
 10397 000082B7 66030D[1E5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10398 000082BE 662B0D[1A5B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10399 000082C5 663B15[26590000]    <1> 		cmp dx, [resolutionx2]
 10400 000082CC 7607                <1> 		jbe chkyresdrgicn
 10401 000082CE 668B15[1C5B0000]    <1> 		mov dx, [mousecursorposition]
 10402                              <1> 	chkyresdrgicn:
 10403 000082D5 663B0D[3A580000]    <1> 		cmp cx, [resolutiony]
 10404 000082DC 7607                <1> 		jbe nodragicon
 10405 000082DE 668B0D[1E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10406                              <1> 	nodragicon:
 10407 000082E5 66814E0A0100        <1> 		or word [esi + 10], 1
 10408 000082EB 8B5E0C              <1> 		mov ebx, [esi + 12]
 10409 000082EE 668B460A            <1> 		mov ax, [esi + 10]
 10410 000082F2 8B7602              <1> 		mov esi, [esi + 2]
 10411 000082F5 C705[97890000]0000- <1> 		mov dword [codepointer], 0
 10412 000082FD 0000                <1>
 10413 000082FF E893ECFFFF          <1> 		call showicon
 10414 00008304 E9EA020000          <1> 		jmp doneiconsel
 10415                              <1> 	unselecticon:
 10416 00008309 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10417 0000830F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10418 00008312 668B460A            <1> 		mov ax, [esi + 10]
 10419 00008316 8B7602              <1> 		mov esi, [esi + 2]
 10420 00008319 891D[97890000]      <1> 		mov [codepointer], ebx
 10421 0000831F E873ECFFFF          <1> 		call showicon
 10422 00008324 E9CA020000          <1> 		jmp doneiconsel
 10423                              <1> 	textselected:
 10424 00008329 8B5E02              <1> 		mov ebx, [esi + 2]
 10425 0000832C 668B5606            <1> 		mov dx, [esi + 6]
 10426 00008330 6689D0              <1> 		mov ax, dx
 10427 00008333 668B4E08            <1> 		mov cx, [esi + 8]
 10428                              <1> 	lengthtesttext:
 10429 00008337 803B00              <1> 		cmp byte [ebx], 0
 10430 0000833A 740A                <1> 		je donetesttextlength
 10431 0000833C 43                  <1> 		inc ebx
 10432 0000833D 66051000            <1> 		add ax, 16
 10433 00008341 E9F1FFFFFF          <1> 		jmp lengthtesttext
 10434                              <1> 	donetesttextlength:
 10435 00008346 6689CB              <1> 		mov bx, cx
 10436 00008349 6681C30F00          <1> 		add bx, 15
 10437 0000834E 813D[1C810000]0100- <1> 		cmp dword [dragging], 1
 10438 00008356 0000                <1>
 10439 00008358 7468                <1> 		je dragtext
 10440 0000835A 813D[1C810000]0000- <1> 		cmp dword [dragging], 0
 10441 00008362 0000                <1>
 10442 00008364 7411                <1> 		je nodragtextcheck
 10443 00008366 3935[1C810000]      <1> 		cmp dword [dragging], esi
 10444 0000836C 0F8568020000        <1> 		jne near nexticonsel
 10445 00008372 E94B000000          <1> 		jmp dragtext
 10446                              <1> 	nodragtextcheck:
 10447 00008377 663915[1C5B0000]    <1> 		cmp [mousecursorposition], dx
 10448 0000837E 0F8256020000        <1> 		jb near nexticonsel
 10449 00008384 663905[1C5B0000]    <1> 		cmp [mousecursorposition], ax
 10450 0000838B 0F8749020000        <1> 		ja near nexticonsel
 10451 00008391 66390D[1E5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10452 00008398 0F823C020000        <1> 		jb near nexticonsel
 10453 0000839E 66391D[1E5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10454 000083A5 0F872F020000        <1> 		ja near nexticonsel
 10455 000083AB 668B460A            <1> 		mov ax, [esi + 10]
 10456 000083AF 66250100            <1> 		and ax, 1
 10457 000083B3 663D0100            <1> 		cmp ax, 1
 10458 000083B7 0F84AB000000        <1> 		je near unselecttext
 10459 000083BD E986000000          <1> 		jmp nodragtext
 10460                              <1> 	dragtext:
 10461 000083C2 663915[185B0000]    <1> 		cmp [lastmouseposition], dx
 10462 000083C9 0F820B020000        <1> 		jb near nexticonsel
 10463 000083CF 663905[185B0000]    <1> 		cmp [lastmouseposition], ax
 10464 000083D6 0F87FE010000        <1> 		ja near nexticonsel
 10465 000083DC 66390D[1A5B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10466 000083E3 0F82F1010000        <1> 		jb near nexticonsel
 10467 000083E9 66391D[1A5B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10468 000083F0 0F87E4010000        <1> 		ja near nexticonsel
 10469 000083F6 668B460A            <1> 		mov ax, [esi + 10]
 10470 000083FA 2410                <1> 		and al, 00010000b
 10471 000083FC 663D1000            <1> 		cmp ax, 00010000b
 10472 00008400 0F8442000000        <1> 		je near nodragtext
 10473 00008406 8935[1C810000]      <1> 		mov [dragging], esi
 10474 0000840C 662B15[185B0000]    <1> 		sub dx, [lastmouseposition]
 10475 00008413 660315[1C5B0000]    <1> 		add dx, [mousecursorposition]
 10476 0000841A 66030D[1E5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10477 00008421 662B0D[1A5B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10478 00008428 663B15[26590000]    <1> 		cmp dx, [resolutionx2]
 10479 0000842F 7607                <1> 		jbe chkyresdrgtxt
 10480 00008431 668B15[1C5B0000]    <1> 		mov dx, [mousecursorposition]
 10481                              <1> 	chkyresdrgtxt:
 10482 00008438 663B0D[3A580000]    <1> 		cmp cx, [resolutiony]
 10483 0000843F 7607                <1> 		jbe nodragtext
 10484 00008441 668B0D[1E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10485                              <1> 	nodragtext:
 10486 00008448 66814E0A0100        <1> 		or word [esi + 10], 1
 10487 0000844E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10488 00008451 891D[97890000]      <1> 		mov [codepointer], ebx
 10489 00008457 668B460A            <1> 		mov ax, [esi + 10]
 10490 0000845B 8B7602              <1> 		mov esi, [esi + 2]
 10491 0000845E E820F4FFFF          <1> 		call showstring
 10492 00008463 E98B010000          <1> 		jmp doneiconsel
 10493                              <1> 	unselecttext:
 10494 00008468 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10495 0000846E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10496 00008471 668B460A            <1> 		mov ax, [esi + 10]
 10497 00008475 8B7602              <1> 		mov esi, [esi + 2]
 10498 00008478 C705[97890000]0000- <1> 		mov dword [codepointer], 0
 10499 00008480 0000                <1>
 10500 00008482 E8FCF3FFFF          <1> 		call showstring
 10501 00008487 E967010000          <1> 		jmp doneiconsel
 10502                              <1> windowselect:
 10503 0000848C 8B7E02              <1> 		mov edi, [esi + 2]
 10504 0000848F 668B5606            <1> 		mov dx, [esi + 6]
 10505 00008493 6689D0              <1> 		mov ax, dx
 10506 00008496 668B4E08            <1> 		mov cx, [esi + 8]
 10507 0000849A 6689CB              <1> 		mov bx, cx
 10508 0000849D 6681C31000          <1> 		add bx, 16
 10509 000084A2 813D[1C810000]0100- <1> 		cmp dword [dragging], 1
 10510 000084AA 0000                <1>
 10511 000084AC 746D                <1> 		je dragwin
 10512 000084AE 813D[1C810000]0000- <1> 		cmp dword [dragging], 0
 10513 000084B6 0000                <1>
 10514 000084B8 7411                <1> 		je nodragwincheck
 10515 000084BA 3935[1C810000]      <1> 		cmp dword [dragging], esi
 10516 000084C0 0F8514010000        <1> 		jne near nexticonsel
 10517 000084C6 E950000000          <1> 		jmp dragwin
 10518                              <1> 	nodragwincheck:
 10519 000084CB 663905[1C5B0000]    <1> 		cmp [mousecursorposition], ax
 10520 000084D2 0F8202010000        <1> 		jb near nexticonsel
 10521 000084D8 660307              <1> 		add ax, [edi]
 10522 000084DB 660307              <1> 		add ax, [edi]
 10523 000084DE 663905[1C5B0000]    <1> 		cmp [mousecursorposition], ax
 10524 000084E5 0F87EF000000        <1> 		ja near nexticonsel
 10525 000084EB 66390D[1E5B0000]    <1> 		cmp [mousecursorposition + 2], cx
 10526 000084F2 0F82E2000000        <1> 		jb near nexticonsel
 10527 000084F8 66391D[1E5B0000]    <1> 		cmp [mousecursorposition + 2], bx
 10528 000084FF 0F87D5000000        <1> 		ja near nexticonsel
 10529 00008505 662D1400            <1> 		sub ax, 20
 10530 00008509 663905[1C5B0000]    <1> 		cmp [mousecursorposition], ax
 10531 00008510 0F87A4000000        <1> 		ja near killwin
 10532 00008516 E98B000000          <1> 		jmp nodragwin
 10533                              <1> 	dragwin:
 10534 0000851B 663905[185B0000]    <1> 		cmp [lastmouseposition], ax
 10535 00008522 0F82B2000000        <1> 		jb near nexticonsel
 10536 00008528 660307              <1> 		add ax, [edi]
 10537 0000852B 660307              <1> 		add ax, [edi]
 10538 0000852E 663905[185B0000]    <1> 		cmp [lastmouseposition], ax
 10539 00008535 0F879F000000        <1> 		ja near nexticonsel
 10540 0000853B 66390D[1A5B0000]    <1> 		cmp [lastmouseposition + 2], cx
 10541 00008542 0F8292000000        <1> 		jb near nexticonsel
 10542 00008548 66391D[1A5B0000]    <1> 		cmp [lastmouseposition + 2], bx
 10543 0000854F 0F8785000000        <1> 		ja near nexticonsel
 10544 00008555 8935[1C810000]      <1> 		mov [dragging], esi
 10545 0000855B 803D[83860000]01    <1> 		cmp byte [windrag], 1
 10546 00008562 7706                <1> 		ja .nochangewindrag
 10547 00008564 FE05[83860000]      <1> 		inc byte [windrag]
 10548                              <1> 	.nochangewindrag:
 10549 0000856A 662B15[185B0000]    <1> 		sub dx, [lastmouseposition]
 10550 00008571 660315[1C5B0000]    <1> 		add dx, [mousecursorposition]
 10551 00008578 66030D[1E5B0000]    <1> 		add cx, [mousecursorposition + 2]
 10552 0000857F 662B0D[1A5B0000]    <1> 		sub cx, [lastmouseposition + 2]
 10553 00008586 663B15[26590000]    <1> 		cmp dx, [resolutionx2]
 10554 0000858D 7607                <1> 		jbe chkyresdrgwin
 10555 0000858F 668B15[1C5B0000]    <1> 		mov dx, [mousecursorposition]
 10556                              <1> 	chkyresdrgwin:
 10557 00008596 663B0D[3A580000]    <1> 		cmp cx, [resolutiony]
 10558 0000859D 7607                <1> 		jbe nodragwin
 10559 0000859F 668B0D[1E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10560                              <1> 	nodragwin:
 10561 000085A6 8B5E0C              <1> 		mov ebx, [esi + 12]
 10562 000085A9 668B460A            <1> 		mov ax, [esi + 10]
 10563 000085AD 8B7602              <1> 		mov esi, [esi + 2]
 10564 000085B0 E86FF5FFFF          <1> 		call showwindow
 10565 000085B5 E939000000          <1> 		jmp doneiconsel
 10566                              <1> 	killwin:
 10567 000085BA 66C7060000          <1> 		mov word [esi], 0
 10568 000085BF C605[1A240000]00    <1> 		mov byte [termguion], 0
 10569 000085C6 E8CDEBFFFF          <1> 		call guiclear
 10570 000085CB E85BECFFFF          <1> 		call reloadallgraphics
 10571 000085D0 E85FE9FFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10572 000085D5 E9F4E4FFFF          <1> 		jmp guistart
 10573                              <1> 	nexticonsel:
 10574 000085DA 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10575 000085E0 81C610000000        <1> 		add esi, 16
 10576 000085E6 81FE[9CCE0300]      <1> 		cmp esi, graphicstableend
 10577 000085EC 7305                <1> 		jae doneiconsel
 10578 000085EE E9AAFBFFFF          <1> 		jmp clicon2
 10579                              <1> 	doneiconsel:
 10580 000085F3 813D[1C810000]0100- <1> 		cmp dword [dragging], 1
 10581 000085FB 0000                <1>
 10582 000085FD 731A                <1> 		jae doneiconsel2
 10583 000085FF A2[83860000]        <1> 		mov [windrag], al
 10584 00008604 813D[97890000]0000- <1> 		cmp dword [codepointer], 0
 10585 0000860C 0000                <1>
 10586 0000860E 7409                <1> 		je doneiconsel2
 10587 00008610 8B1D[97890000]      <1> 		mov ebx, [codepointer]
 10588 00008616 FFD3                <1> 		call ebx
 10589 00008618 C3                  <1> 		ret
 10590                              <1> 	doneiconsel2:
 10591 00008619 A0[2D5C0000]        <1> 		mov al, [LBUTTON]
 10592 0000861E A2[1A810000]        <1> 		mov [pLBUTTON], al
 10593 00008623 A0[2E5C0000]        <1> 		mov al, [RBUTTON]
 10594 00008628 A2[1B810000]        <1> 		mov [pRBUTTON], al
 10595 0000862D 813D[1C810000]0100- <1> 		cmp dword [dragging], 1
 10596 00008635 0000                <1>
 10597 00008637 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10598 0000863D E8F2E8FFFF          <1> 		call switchmousepos2
 10599 00008642 803D[83860000]01    <1> 		cmp byte [windrag], 1
 10600 00008649 7305                <1> 		jae noclearcursorcl
 10601 0000864B E8E8E7FFFF          <1> 		call clearmousecursor
 10602                              <1> noclearcursorcl:
 10603 00008650 E8D6EBFFFF          <1> 		call reloadallgraphics
 10604                              <1> noreloadgraphicsclick:
 10605 00008655 30E4                <1> 		xor ah, ah
 10606 00008657 31C9                <1> 		xor ecx, ecx
 10607 00008659 31D2                <1> 		xor edx, edx
 10608 0000865B B001                <1> 		mov al, 1
 10609 0000865D 668B15[1C5B0000]    <1> 		mov dx, [mousecursorposition]
 10610 00008664 668B0D[1E5B0000]    <1> 		mov cx, [mousecursorposition + 2]
 10611 0000866B 66BBE738            <1> 		mov bx, 0011100011100111b
 10612 0000866F C605[16810000]01    <1> 		mov byte [showcursorfonton], 1
 10613 00008676 E89FF2FFFF          <1> 		call showfontvesa
 10614 0000867B C605[16810000]00    <1> 		mov byte [showcursorfonton], 0
 10615 00008682 C3                  <1> 		ret
 10616 00008683 00                  <1> windrag db 0
 10617 00008684 00000000            <1> lastdrag dw 0,0
 10618 00008688 00000000            <1> grpctblpos dw 0,0
 10619                              <1> 
 10620                              <1> 
 10621                              <1> 
 10622 0000868C 00<rept>            <1> grphbuf times 16 db 0
 10623                              <1> 	graphicsadd:
 10624 0000869C BF[9CCC0300]        <1> 		mov edi, graphicstable
 10625                              <1> 	shwgrph1:
 10626 000086A1 397702              <1> 		cmp dword [edi + 2], esi
 10627 000086A4 7417                <1> 		je showgraphicsreplace2
 10628 000086A6 81C710000000        <1> 		add edi, 16
 10629 000086AC 81FF[9CCE0300]      <1> 		cmp edi, graphicstableend
 10630 000086B2 0F835F020000        <1> 		jae near showgraphicsnew
 10631 000086B8 E9E4FFFFFF          <1> 		jmp shwgrph1
 10632                              <1> 	showgraphicsreplace2:
 10633 000086BD 8935[8E860000]      <1> 		mov [grphbuf + 2], esi
 10634 000086C3 668915[92860000]    <1> 		mov [grphbuf + 6], dx
 10635 000086CA 66890D[94860000]    <1> 		mov [grphbuf + 8], cx
 10636 000086D1 891D[98860000]      <1> 		mov [grphbuf + 12], ebx
 10637 000086D7 30FF                <1> 		xor bh, bh
 10638 000086D9 88E3                <1> 		mov bl, ah
 10639 000086DB 30E4                <1> 		xor ah, ah
 10640 000086DD 66A3[96860000]      <1> 		mov [grphbuf + 10], ax	
 10641 000086E3 66891D[8C860000]    <1> 		mov [grphbuf], bx
 10642 000086EA 66A1[8C860000]      <1> 		mov ax, [grphbuf]
 10643 000086F0 663D0100            <1> 		cmp ax, 1
 10644 000086F4 0F8419000000        <1> 		je near replaceicon
 10645 000086FA 663D0200            <1> 		cmp ax, 2
 10646 000086FE 0F8493000000        <1> 		je near replacestring
 10647 00008704 663D0300            <1> 		cmp ax, 3
 10648 00008708 0F840F010000        <1> 		je near replacewindow
 10649 0000870E E9E1010000          <1> 		jmp showgraphicsreplace
 10650                              <1> 	replaceicon:
 10651 00008713 893D[20810000]      <1> 		mov [lastpos], edi
 10652 00008719 8935[24810000]      <1> 		mov [lastpos + 4], esi
 10653 0000871F 8B7702              <1> 		mov esi, [edi + 2]
 10654 00008722 668B5F0C            <1> 		mov bx, [edi + 12]
 10655 00008726 668B5706            <1> 		mov dx, [edi + 6]
 10656 0000872A 668B4F08            <1> 		mov cx, [edi + 8]
 10657 0000872E 668B06              <1> 		mov ax, [esi]
 10658 00008731 66A3[28810000]      <1> 		mov [colorbuf], ax
 10659 00008737 66A1[27720000]      <1> 		mov ax, [background]
 10660 0000873D 668906              <1> 		mov [esi], ax
 10661 00008740 8B5F0C              <1> 		mov ebx, [edi + 12]
 10662 00008743 668B470A            <1> 		mov ax, [edi + 10]
 10663 00008747 2401                <1> 		and al, 1
 10664 00008749 A2[9B890000]        <1> 		mov [iconselected], al
 10665 0000874E 668B470A            <1> 		mov ax, [edi + 10]
 10666 00008752 E853E8FFFF          <1> 		call showicon2
 10667 00008757 8B3D[20810000]      <1> 		mov edi, [lastpos]
 10668 0000875D 8B7702              <1> 		mov esi, [edi + 2]
 10669 00008760 66A1[28810000]      <1> 		mov ax, [colorbuf]
 10670 00008766 668906              <1> 		mov [esi], ax
 10671 00008769 8B35[24810000]      <1> 		mov esi, [lastpos + 4]
 10672 0000876F 668B15[92860000]    <1> 		mov dx, [grphbuf + 6]
 10673 00008776 668B0D[94860000]    <1> 		mov cx, [grphbuf + 8]
 10674 0000877D 668B1D[8C860000]    <1> 		mov bx, [grphbuf]
 10675 00008784 66A1[96860000]      <1> 		mov ax, [grphbuf + 10]
 10676 0000878A 88DC                <1> 		mov ah, bl
 10677 0000878C 8B1D[98860000]      <1> 		mov ebx, [grphbuf + 12]
 10678 00008792 E95D010000          <1> 		jmp showgraphicsreplace
 10679                              <1> 	replacestring:
 10680 00008797 893D[20810000]      <1> 		mov [lastpos], edi
 10681 0000879D 8935[24810000]      <1> 		mov [lastpos + 4], esi
 10682 000087A3 8B5F0C              <1> 		mov ebx, [edi + 12]
 10683 000087A6 8B7702              <1> 		mov esi, [edi + 2]
 10684 000087A9 668B5706            <1> 		mov dx, [edi + 6]
 10685 000087AD 668B4F08            <1> 		mov cx, [edi + 8]
 10686 000087B1 66A1[09790000]      <1> 		mov ax, [colorfont2]
 10687 000087B7 66A3[28810000]      <1> 		mov [colorbuf], ax
 10688 000087BD 66A1[27720000]      <1> 		mov ax, [background]
 10689 000087C3 66A3[09790000]      <1> 		mov [colorfont2], ax		
 10690 000087C9 8B5F0C              <1> 		mov ebx, [edi + 12]
 10691 000087CC 668B470A            <1> 		mov ax, [edi + 10]
 10692 000087D0 2401                <1> 		and al, 1
 10693 000087D2 A2[18810000]        <1> 		mov [mouseselecton], al
 10694 000087D7 668B470A            <1> 		mov ax, [edi + 10]
 10695 000087DB E8B6F0FFFF          <1> 		call showstring2
 10696 000087E0 66A1[28810000]      <1> 		mov ax, [colorbuf]
 10697 000087E6 66A3[09790000]      <1> 		mov [colorfont2], ax
 10698 000087EC 8B3D[20810000]      <1> 		mov edi, [lastpos]
 10699 000087F2 8B7702              <1> 		mov esi, [edi + 2]
 10700 000087F5 668B15[92860000]    <1> 		mov dx, [grphbuf + 6]
 10701 000087FC 668B0D[94860000]    <1> 		mov cx, [grphbuf + 8]
 10702 00008803 668B1D[8C860000]    <1> 		mov bx, [grphbuf]
 10703 0000880A 66A1[96860000]      <1> 		mov ax, [grphbuf + 10]
 10704 00008810 88DC                <1> 		mov ah, bl
 10705 00008812 8B1D[98860000]      <1> 		mov ebx, [grphbuf + 12]
 10706 00008818 E9D7000000          <1> 		jmp showgraphicsreplace
 10707                              <1> 	replacewindow:
 10708 0000881D 893D[20810000]      <1> 		mov [lastpos], edi
 10709 00008823 8935[24810000]      <1> 		mov [lastpos + 4], esi
 10710 00008829 8B7702              <1> 		mov esi, [edi + 2]
 10711 0000882C 8B3D[0E7B0000]      <1> 		mov edi, [windowbufloc]
 10712 00008832 31D2                <1> 		xor edx, edx
 10713 00008834 668B15[26590000]    <1> 		mov dx, [resolutionx2]
 10714 0000883B C1E204              <1> 		shl edx, 4
 10715 0000883E 29D7                <1> 		sub edi, edx
 10716 00008840 31D2                <1> 		xor edx, edx
 10717 00008842 668B16              <1> 		mov dx, [esi]
 10718 00008845 660316              <1> 		add dx, [esi]
 10719 00008848 668B4E02            <1> 		mov cx, [esi + 2]
 10720 0000884C 6681C11000          <1> 		add cx, 16
 10721 00008851 66A1[27720000]      <1> 		mov ax, [background]
 10722 00008857 803D[83860000]01    <1> 		cmp byte [windrag], 1
 10723 0000885E 7604                <1> 		jbe clearwindow
 10724 00008860 662B4E02            <1> 		sub cx, [esi + 2]
 10725                              <1> 	clearwindow:
 10726                              <1> 		%ifdef gui.background
 10727 00008864 813D[F9710000]0000- <1> 			cmp dword [backgroundimage], 0
 10728 0000886C 0000                <1>
 10729 0000886E 7419                <1> 			je .noback
 10730 00008870 56                  <1> 			push esi
 10731 00008871 8B35[F9710000]      <1> 			mov esi, [backgroundimage]
 10732 00008877 2B3D[4E580000]      <1> 			sub edi, [physbaseptr]
 10733 0000887D 01FE                <1> 			add esi, edi
 10734 0000887F 033D[4E580000]      <1> 			add edi, [physbaseptr]
 10735 00008885 668B06              <1> 			mov ax, [esi]
 10736 00008888 5E                  <1> 			pop esi
 10737                              <1> 		.noback:
 10738                              <1> 		%endif
 10739 00008889 668907              <1> 		mov [edi], ax
 10740 0000888C 81C702000000        <1> 		add edi, 2
 10741 00008892 81EA02000000        <1> 		sub edx, 2
 10742 00008898 81FA00000000        <1> 		cmp edx, 0
 10743 0000889E 75C4                <1> 		jne clearwindow
 10744 000088A0 6649                <1> 		dec cx
 10745 000088A2 668B15[26590000]    <1> 		mov dx, [resolutionx2]
 10746 000088A9 662B16              <1> 		sub dx, [esi]
 10747 000088AC 662B16              <1> 		sub dx, [esi]
 10748 000088AF 01D7                <1> 		add edi, edx
 10749 000088B1 668B16              <1> 		mov dx, [esi]
 10750 000088B4 660316              <1> 		add dx, [esi]
 10751 000088B7 6681F90000          <1> 		cmp cx, 0
 10752 000088BC 75A6                <1> 		jne clearwindow
 10753                              <1> 	endwindowclear:
 10754 000088BE C605[1B240000]00    <1> 		mov byte [termcopyon], 0
 10755 000088C5 8B3D[20810000]      <1> 		mov edi, [lastpos]
 10756 000088CB 8B35[8E860000]      <1> 		mov esi, [grphbuf + 2]
 10757 000088D1 668B15[92860000]    <1> 		mov dx, [grphbuf + 6]
 10758 000088D8 668B0D[94860000]    <1> 		mov cx, [grphbuf + 8]
 10759 000088DF 668B1D[8C860000]    <1> 		mov bx, [grphbuf]
 10760 000088E6 66A1[96860000]      <1> 		mov ax, [grphbuf + 10]
 10761 000088EC 88DC                <1> 		mov ah, bl
 10762 000088EE 8B1D[98860000]      <1> 		mov ebx, [grphbuf + 12]
 10763                              <1> 	showgraphicsreplace:
 10764 000088F4 897702              <1> 		mov [edi + 2], esi
 10765 000088F7 66895706            <1> 		mov [edi + 6], dx
 10766 000088FB 66894F08            <1> 		mov [edi + 8], cx
 10767 000088FF 895F0C              <1> 		mov [edi + 12], ebx
 10768 00008902 30FF                <1> 		xor bh, bh
 10769 00008904 88E3                <1> 		mov bl, ah
 10770 00008906 30E4                <1> 		xor ah, ah
 10771 00008908 6689470A            <1> 		mov [edi + 10], ax
 10772 0000890C 66891F              <1> 		mov [edi], bx
 10773 0000890F 8B5F0C              <1> 		mov ebx, [edi + 12]
 10774 00008912 668B470A            <1> 		mov ax, [edi + 10]
 10775 00008916 C3                  <1> 		ret
 10776                              <1> 	showgraphicsnew:
 10777 00008917 BF[9CCC0300]        <1> 		mov edi, graphicstable
 10778                              <1> 	shwgrph2:
 10779 0000891C 66813F0000          <1> 		cmp word [edi], 0
 10780 00008921 74D1                <1> 		je showgraphicsreplace
 10781 00008923 81C710000000        <1> 		add edi, 16
 10782 00008929 81FF[9CCE0300]      <1> 		cmp edi, graphicstableend
 10783 0000892F 72EB                <1> 		jb shwgrph2
 10784                              <1> 	showgraphicsdone:
 10785 00008931 C3                  <1> 		ret
 10786                              <1> 	
 10787                              <1> putpixel: ;color in si, point is (dx,cx)
 10788                              <1> 		;destroys edi, ebx, eax
 10789 00008932 6650                <1> 	push ax
 10790 00008934 6653                <1> 	push bx
 10791 00008936 31C0                <1> 	xor eax, eax
 10792 00008938 31DB                <1> 	xor ebx, ebx
 10793 0000893A 31FF                <1> 	xor edi, edi
 10794 0000893C 668B1D[3A580000]    <1> 	mov bx, [resolutiony]
 10795 00008943 66A1[38580000]      <1> 	mov ax, [resolutionx]
 10796 00008949 6639C2              <1> 	cmp dx, ax
 10797 0000894C 7720                <1> 	ja .doneput
 10798 0000894E 66D1E0              <1> 	shl ax, 1
 10799 00008951 6639D9              <1> 	cmp cx, bx
 10800 00008954 7718                <1> 	ja .doneput
 10801 00008956 6689CB              <1> 	mov bx, cx
 10802 00008959 52                  <1> 	push edx
 10803 0000895A F7E3                <1> 	mul ebx
 10804 0000895C 5A                  <1> 	pop edx
 10805 0000895D 6601D7              <1> 	add di, dx
 10806 00008960 6601D7              <1> 	add di, dx
 10807 00008963 01C7                <1> 	add edi, eax
 10808 00008965 033D[4E580000]      <1> 	add edi, [physbaseptr]
 10809 0000896B 668937              <1> 	mov [edi], si
 10810                              <1> .doneput:
 10811 0000896E 665B                <1> 	pop bx
 10812 00008970 6658                <1> 	pop ax
 10813 00008972 C3                  <1> 	ret
 10814                              <1> 	
 10815                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10816 00008973 31FF                <1> 	xor edi, edi
 10817 00008975 31C0                <1> 	xor eax, eax
 10818 00008977 31DB                <1> 	xor ebx, ebx
 10819 00008979 668B1D[26590000]    <1> 	mov bx, [resolutionx2]
 10820 00008980 6689D7              <1> 	mov di, dx
 10821 00008983 6601D7              <1> 	add di, dx
 10822 00008986 6689C8              <1> 	mov ax, cx
 10823 00008989 F7E3                <1> 	mul ebx
 10824 0000898B 01C7                <1> 	add edi, eax
 10825 0000898D 033D[4E580000]      <1> 	add edi, [physbaseptr]
 10826 00008993 C3                  <1> 	ret
 10827                              <1> 
 10828 00008994 00                  <1> 	mouseon db 0
 10829 00008995 0000                <1> 	icon dw 0	;pointer to icon
 10830 00008997 00000000            <1> 	codepointer dd 0 ;pointer to code
 10831 0000899B 00                  <1> 	iconselected db 0
 10832                                  %endif
 10833                                  %ifdef network.included
 10834                                  	%include "source/network.asm"
 10835                                  %endif
 10836                                      %include "source/data.asm"
 10837 0000899C 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 10838 000089A4 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 10839 000089AC 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 10840 000089B5 6E640A00            <1>
 10841 000089B9 757365726E616D653A- <1> 	userask db	"username:",0
 10842 000089C2 00                  <1>
 10843 000089C3 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10844 000089CC 00                  <1>
 10845 000089CD 40                  <1> 	computer db	"@"
 10846                              <1> %ifdef io.serial
 10847                              <1> 	computername db	"SollerOS.",io.serial," ",0
 10848                              <1> %else
 10849 000089CE 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 10850 000089D7 00                  <1>
 10851                              <1> %endif
 10852 000089D8 5D242000            <1> 	endprompt db "]$ ",0
 10853 000089DC 0D                  <1> 	crlf 	db	13
 10854 000089DD 0A00                <1> 	line	db	10,0
 10855                              <1> 	userlst:
 10856 000089DF 726F6F7400          <1> 			db "root",0
 10857 000089E4 617765736F6D65706F- <1> 			db "awesomepower",0
 10858 000089ED 77657200            <1>
 10859 000089F1 7573657200          <1> 			db "user",0
 10860 000089F6 70617373776F726400  <1> 			db "password",0
 10861 000089FF 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 10862 00008A01 00                  <1> 			db 0
 10863                              <1> 	userlstend:
 10864                              <1> 	
 10865 00008A02 00                  <1> 	guion db 0
 10866 00008A03 00                  <1> 	DriveNumber db 0
 10867 00008A04 00000000            <1> 	lbaad dd 0
 10868 00008A08 0000000000000000    <1> 	initialtsc dd 0,0
 10869 00008A10 0000000000000000    <1> 	lasttsc dd 0,0
 10870 00008A18 00<rept>            <1> 	memlistbuf times 576 db 0
 10871 00008C58 00000000            <1> 	memlistend: dd 0
 10872                              <1> %ifdef io.serial
 10873                              <1> %else
 10874                              <1> fonts:
 10875                              <1> %ifdef font.unicode
 10876 00008C5C <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 10877                              <1> %else
 10878                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 10879                              <1> %endif
 10880                              <1> fontend:
 10881                              <1> %endif
 10882                              <1> osend:	;this is the end of the operating system's space on disk
 10883                                  %ifdef disk.none
 10884                                  	diskfileindex:
 10885                                  	enddiskfileindex:
 10886                                      %include "source/bss.asm"
 10887                                  %else
 10888                                      %include "build/fileindex.asm"
 10889                              <1> diskfileindex:
 10890 00038C5C 5F696D672E62696E00  <1> db "_img.bin",0
 10891 00038C65 C7010000            <1> dd (f0-$$)/512
 10892 00038C69 0C000000            <1> dd (f1-f0)/512
 10893 00038C6D 626F6F742E736800    <1> db "boot.sh",0
 10894 00038C75 D3010000            <1> dd (f1-$$)/512
 10895 00038C79 01000000            <1> dd (f2-f1)/512
 10896 00038C7D 646F73746573742E63- <1> db "dostest.com",0
 10897 00038C86 6F6D00              <1>
 10898 00038C89 D4010000            <1> dd (f2-$$)/512
 10899 00038C8D 01000000            <1> dd (f3-f2)/512
 10900 00038C91 6578656300          <1> db "exec",0
 10901 00038C96 D5010000            <1> dd (f3-$$)/512
 10902 00038C9A 01000000            <1> dd (f4-f3)/512
 10903 00038C9E 66696E616C636F756E- <1> db "finalcount.sn",0
 10904 00038CA7 742E736E00          <1>
 10905 00038CAC D6010000            <1> dd (f4-$$)/512
 10906 00038CB0 01000000            <1> dd (f5-f4)/512
 10907 00038CB4 666F726B00          <1> db "fork",0
 10908 00038CB9 D7010000            <1> dd (f5-$$)/512
 10909 00038CBD 01000000            <1> dd (f6-f5)/512
 10910 00038CC1 6775697465737400    <1> db "guitest",0
 10911 00038CC9 D8010000            <1> dd (f6-$$)/512
 10912 00038CCD 03000000            <1> dd (f7-f6)/512
 10913 00038CD1 696E7400            <1> db "int",0
 10914 00038CD5 DB010000            <1> dd (f7-$$)/512
 10915 00038CD9 01000000            <1> dd (f8-f7)/512
 10916 00038CDD 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10917 00038CE6 2E736E00            <1>
 10918 00038CEA DC010000            <1> dd (f8-$$)/512
 10919 00038CEE 01000000            <1> dd (f9-f8)/512
 10920 00038CF2 6D6172696F2E736E00  <1> db "mario.sn",0
 10921 00038CFB DD010000            <1> dd (f9-$$)/512
 10922 00038CFF 01000000            <1> dd (f10-f9)/512
 10923 00038D03 736F6E676F74696D65- <1> db "songotime.sn",0
 10924 00038D0C 2E736E00            <1>
 10925 00038D10 DE010000            <1> dd (f10-$$)/512
 10926 00038D14 01000000            <1> dd (f11-f10)/512
 10927 00038D18 73736500            <1> db "sse",0
 10928 00038D1C DF010000            <1> dd (f11-$$)/512
 10929 00038D20 02000000            <1> dd (f12-f11)/512
 10930 00038D24 74656C7900          <1> db "tely",0
 10931 00038D29 E1010000            <1> dd (f12-$$)/512
 10932 00038D2D 01000000            <1> dd (f13-f12)/512
 10933 00038D31 7475746F7269616C2E- <1> db "tutorial.sh",0
 10934 00038D3A 736800              <1>
 10935 00038D3D E2010000            <1> dd (f13-$$)/512
 10936 00038D41 03000000            <1> dd (f14-f13)/512
 10937 00038D45 756E667300          <1> db "unfs",0
 10938 00038D4A E5010000            <1> dd (f14-$$)/512
 10939 00038D4E 02000000            <1> dd (f15-f14)/512
 10940                              <1> enddiskfileindex:
 10941                              <1> 
 10942                                      %include "source/bss.asm"
 10943 00038D52 00<rept>            <1> align 512, db 0
 10944                              <1> bssstart equ $
 10945                              <1> bsscopy equ $
 10946                              <1> initialstack equ bsscopy
 10947                              <1> stackend equ initialstack + 8192
 10948                              <1> sigtable equ stackend + 4
 10949                              <1> fileindex equ sigtable + 4
 10950                              <1> fileindexend equ fileindex + 1024
 10951                              <1> previousstack equ fileindexend
 10952                              <1> lastfolderloc equ previousstack + 4
 10953                              <1> currentfolderloc equ lastfolderloc + 4
 10954                              <1> currentfolder equ currentfolderloc + 4
 10955                              <1> currentfolderend equ currentfolder + 512
 10956                              <1> uid equ currentfolderend
 10957                              <1> ranboot equ uid + 4
 10958                              <1> IFON equ ranboot + 1
 10959                              <1> IFTRUE equ IFON + 1
 10960                              <1> BATCHPOS equ IFTRUE + 100
 10961                              <1> BATCHISON equ BATCHPOS + 4
 10962                              <1> LOOPON equ BATCHISON + 1
 10963                              <1> LOOPPOS	equ LOOPON + 1
 10964                              <1> variables equ LOOPPOS + 4
 10965                              <1> varend equ variables + 4096
 10966                              <1> buftxt2 equ varend
 10967                              <1> buftxt equ buftxt2 + 1024
 10968                              <1> buftxtend equ buftxt + 1024
 10969                              <1> buf2 equ buftxtend
 10970                              <1> numbuf equ buf2 + 20
 10971                              <1> %ifdef io.serial
 10972                              <1> 	lastcommandpos equ numbuf
 10973                              <1> %else
 10974                              <1> 	%ifdef gui.included
 10975                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10976                              <1> 		graphicstableend equ graphicstable + 512
 10977                              <1> 		%ifdef gui.background
 10978                              <1> 			backgroundbuffer equ graphicstableend
 10979                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10980                              <1> 			mousecolorbuf equ backgroundbufferend
 10981                              <1> 		%else
 10982                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10983                              <1> 		%endif
 10984                              <1> 		mcolorend equ mousecolorbuf + 256
 10985                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 10986                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10987                              <1> 		videobuf2 equ videobufend
 10988                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10989                              <1> 	%else
 10990                              <1> 		videobuf equ numbuf
 10991                              <1> 		videobufend equ videobuf + 80*30*4
 10992                              <1> 		videobuf2 equ videobufend
 10993                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10994                              <1> 	%endif
 10995                              <1> 	lastcommandpos: equ videobuf2end
 10996                              <1> %endif
 10997                              <1> 	commandbufpos: equ lastcommandpos + 4
 10998                              <1> 	commandlistentries: equ commandbufpos + 4
 10999                              <1> 	commandsentered: equ commandlistentries + 4
 11000                              <1> 	commandbuf: equ commandsentered + 4
 11001                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11002                              <1> %ifdef network.included
 11003                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11004                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 11005                              <1> 	rbuffoverflow equ rbuffend + 1500
 11006                              <1> %else
 11007                              <1> 	rbuffstart equ commandbufend
 11008                              <1> 	rbuffend equ commandbufend
 11009                              <1> %endif
 11010                              <1> %ifdef threads.included
 11011                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 11012                              <1> 	threadlistend: equ threadlist + 1024*4
 11013                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11014                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 11015                              <1> 	bssend equ stack1 + 1024*2048
 11016                              <1> %else
 11017                              <1> 	bssend equ rbuffend
 11018                              <1> %endif
 11019                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11020                                      %include "build/files.asm"
 11021                              <1> align 512,db 0
 11022                              <1> f0:
 11023 00038E00 <incbin>            <1> incbin "included/_img.bin"
 11024                              <1> align 512,db 0
 11025                              <1> f1:
 11026 0003A600 <incbin>            <1> incbin "included/boot.sh"
 11027 0003A718 00<rept>            <1> align 512,db 0
 11028                              <1> f2:
 11029 0003A800 <incbin>            <1> incbin "included/dostest.com"
 11030 0003A931 00<rept>            <1> align 512,db 0
 11031                              <1> f3:
 11032 0003AA00 <incbin>            <1> incbin "included/exec"
 11033 0003AAF1 00<rept>            <1> align 512,db 0
 11034                              <1> f4:
 11035 0003AC00 <incbin>            <1> incbin "included/finalcount.sn"
 11036 0003AD02 00<rept>            <1> align 512,db 0
 11037                              <1> f5:
 11038 0003AE00 <incbin>            <1> incbin "included/fork"
 11039 0003AF61 00<rept>            <1> align 512,db 0
 11040                              <1> f6:
 11041 0003B000 <incbin>            <1> incbin "included/guitest"
 11042 0003B43D 00<rept>            <1> align 512,db 0
 11043                              <1> f7:
 11044 0003B600 <incbin>            <1> incbin "included/int"
 11045 0003B7B2 00<rept>            <1> align 512,db 0
 11046                              <1> f8:
 11047 0003B800 <incbin>            <1> incbin "included/lostwoods.sn"
 11048 0003B8AE 00<rept>            <1> align 512,db 0
 11049                              <1> f9:
 11050 0003BA00 <incbin>            <1> incbin "included/mario.sn"
 11051 0003BA3A 00<rept>            <1> align 512,db 0
 11052                              <1> f10:
 11053 0003BC00 <incbin>            <1> incbin "included/songotime.sn"
 11054 0003BC4A 00<rept>            <1> align 512,db 0
 11055                              <1> f11:
 11056 0003BE00 <incbin>            <1> incbin "included/sse"
 11057 0003C0AA 00<rept>            <1> align 512,db 0
 11058                              <1> f12:
 11059 0003C200 <incbin>            <1> incbin "included/tely"
 11060 0003C3D2 00<rept>            <1> align 512,db 0
 11061                              <1> f13:
 11062 0003C400 <incbin>            <1> incbin "included/tutorial.sh"
 11063 0003C952 00<rept>            <1> align 512,db 0
 11064                              <1> f14:
 11065 0003CA00 <incbin>            <1> incbin "included/unfs"
 11066                              <1> align 512,db 0
 11067                              <1> f15:
 11068                                  %endif
