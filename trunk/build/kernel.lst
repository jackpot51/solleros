     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> ;%define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> ;%define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 008A0300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[ED84]          <1> 	mov [initialtsc], eax
   146 00000022 668916[F184]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[F584]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[F984]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[E884]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[E984]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80200              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C EB52                <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003E B81200              <1> 	mov ax, 12h
   164 00000041 31DB                <1> 	xor bx, bx
   165 00000043 CD10                <1> 	int 10h
   166 00000045 C606[E784]00        <1> 	mov byte [guion], 0
   167 0000004A E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004D C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004E BF[FD84]            <1> 	mov di, memlistbuf
   172 00000051 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000054 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005A 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000060 66B918000000        <1> 	mov ecx, 24
   177 00000066 CD15                <1> 	int 0x15
   178 00000068 83C718              <1> 	add di, 24
   179 0000006B 81FF[3D87]          <1> 	cmp di, memlistend
   180 0000006F 7305                <1> 	jae nomoregetmemsize
   181 00000071 6685DB              <1> 	test ebx, ebx
   182 00000074 75DE                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000076 81EF[FD84]          <1> 	sub di, memlistbuf
   185 0000007A 893E[3D87]          <1> 	mov [memlistend], di
   186 0000007E C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 0000007F BB0700              <1>     mov bx,07		; write to display
   190 00000082 B40E                <1>     mov ah,0Eh		; screen function
   191 00000084 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000086 84C0                <1>     test al,al		; look for terminator 
   193 00000088 7405                <1>     jz .done	; zero byte at end of string
   194 0000008A CD10                <1>     int 10h		; write character to screen.    
   195 0000008C 46                  <1> 	inc si	     	; move to next character
   196 0000008D EBF5                <1>     jmp .lp		; loop
   197 0000008F C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000090 6631C0              <1> 	xor eax, eax
   203 00000093 6631DB              <1> 	xor ebx, ebx
   204 00000096 6631C9              <1> 	xor ecx, ecx
   205 00000099 6631D2              <1> 	xor edx, edx
   206 0000009C 6631F6              <1> 	xor esi, esi
   207 0000009F 6631FF              <1> 	xor edi, edi
   208 000000A2 BA9200              <1> 	mov dx, 0x92
   209 000000A5 EC                  <1> 	in al, dx	;A20
   210 000000A6 0C02                <1> 	or al, 2
   211 000000A8 EE                  <1> 	out dx, al
   212 000000A9 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AB 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000AF 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B2 A3[9703]            <1> 	mov [gdt2 + 2],ax
   216 000000B5 A3[9F03]            <1> 	mov [gdt3 + 2],ax
   217 000000B8 66C1E810            <1> 	shr eax,16
   218 000000BC A2[9903]            <1> 	mov [gdt2 + 4],al
   219 000000BF A2[A103]            <1> 	mov [gdt3 + 4],al
   220 000000C2 8826[9C03]          <1> 	mov [gdt2 + 7],ah
   221 000000C6 8826[A403]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CA 66B8[008A0300]      <1> 	mov eax, initialstack
   224 000000D0 660306[3702]        <1> 	add eax, [newcodecache]
   225 000000D5 A3[8F03]            <1> 	mov [gdts + 2],ax
   226 000000D8 66C1E810            <1> 	shr eax, 16
   227 000000DC A2[9103]            <1> 	mov [gdts + 4],al
   228 000000DF 8826[9403]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E3 66A1[3702]          <1> 	mov eax, [newcodecache]
   231 000000E7 A3[A703]            <1> 	mov [gdt4 + 2],ax
   232 000000EA A3[AF03]            <1> 	mov [gdt5 + 2],ax
   233 000000ED A3[B703]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F0 A3[BF03]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F3 66C1E810            <1> 	shr eax,16
   236 000000F7 A2[A903]            <1> 	mov [gdt4 + 4],al
   237 000000FA A2[B103]            <1> 	mov [gdt5 + 4],al
   238 000000FD A2[B903]            <1> 	mov [gdtv8086 + 4],al
   239 00000100 A2[C103]            <1> 	mov [gdtv80862 + 4],al
   240 00000103 8826[AC03]          <1> 	mov [gdt4 + 7],ah
   241 00000107 8826[B403]          <1> 	mov [gdt5 + 7],ah
   242 0000010B 8826[BC03]          <1> 	mov [gdtv8086 + 7],ah
   243 0000010F 8826[C403]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000113 66B800004000        <1> 	mov eax, dosprogloc
   246 00000119 660306[3702]        <1> 	add eax, [newcodecache]
   247 0000011E A3[C703]            <1> 	mov [gdtdos + 2],ax
   248 00000121 A3[CF03]            <1> 	mov [gdtdos2 + 2],ax
   249 00000124 66C1E810            <1> 	shr eax,16
   250 00000128 A2[C903]            <1> 	mov [gdtdos + 4],al
   251 0000012B A2[D103]            <1> 	mov [gdtdos2 + 4],al
   252 0000012E 8826[CC03]          <1> 	mov [gdtdos + 7],ah
   253 00000132 8826[D403]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000136 67668D83[7D030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 0000013E 66A3[7303]          <1> 	mov [gdtr + 2],eax
   258 00000142 67668D83[D5030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014A 66A3[7903]          <1> 	mov [idtr + 2],eax
   260 0000014E FA                  <1> 	cli
   261 0000014F 0F0116[7103]        <1> 	lgdt [gdtr]
   262 00000154 0F011E[7703]        <1> 	lidt [idtr]
   263 00000159 6631DB              <1> 	xor ebx, ebx
   264 0000015C 8CDB                <1> 	mov bx, ds
   265 0000015E 66891E[3302]        <1> 	mov [basecache], ebx
   266 00000163 0F20C0              <1> 	mov eax,cr0
   267 00000166 0C01                <1> 	or al,1
   268 00000168 0F22C0              <1> 	mov cr0,eax
   269 0000016B EA[7001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000170 31C0                <1> 	xor eax, eax
   273 00000172 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000176 8ED8                <1> 	mov ds, ax
   275 00000178 8EC0                <1> 	mov es, ax
   276 0000017A 8EE0                <1> 	mov fs, ax
   277 0000017C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000180 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000182 648B06              <1> 	mov eax, [fs:esi]
   282 00000185 658906              <1> 	mov [gs:esi], eax
   283 00000188 83C604              <1> 	add esi, 4
   284 0000018B 81FE[008A0300]      <1> 	cmp esi, bsscopy
   285 00000191 72EF                <1> 	jb copykernel
   286 00000193 EA[9A010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 0000019A 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 0000019E 8ED8                <1> 	mov ds, ax
   291 000001A0 8EC0                <1> 	mov es, ax
   292 000001A2 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001A4 8ED0                <1> 	mov ss, ax
   295 000001A6 BC[00AA0300]        <1> 	mov esp, stackend
   296 000001AB 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001AF 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B1 E8855F0000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001B6 A1[37020000]        <1> 	mov eax, [newcodecache]
   302 000001BB C1E804              <1> 	shr eax, 4
   303 000001BE A3[33020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C3 BE[3CB24D00]        <1> 	mov esi, bssend
   306 000001C8 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001CA 8906                <1> 	mov [esi], eax
   309 000001CC 83EE04              <1> 	sub esi, 4
   310 000001CF 81FE[008A0300]      <1> 	cmp esi, bsscopy
   311 000001D5 77F3                <1> 	ja clearkernelbuffers
   312 000001D7 FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001D8 BE[FD840000]        <1> 	mov esi, memlistbuf
   316 000001DD 31FF                <1> 	xor edi, edi
   317 000001DF 668B3D[3D870000]    <1> 	mov di, [memlistend]
   318 000001E6 01F7                <1> 	add edi, esi
   319 000001E8 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001EA 39FE                <1> 	cmp esi, edi
   322 000001EC 7316                <1> 	jae finishedmemspacecalc
   323 000001EE 83C608              <1> 	add esi, 8
   324 000001F1 8B0E                <1> 	mov ecx, [esi]
   325 000001F3 83C608              <1> 	add esi, 8
   326 000001F6 8B1E                <1> 	mov ebx, [esi]
   327 000001F8 83C608              <1> 	add esi, 8
   328 000001FB 83FB01              <1> 	cmp ebx, 1
   329 000001FE 75EA                <1> 	jne memoryspaceaddition
   330 00000200 01C8                <1> 	add eax, ecx
   331 00000202 EBE6                <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 00000204 A3[48020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 00000209 803D[E7840000]00    <1> 	cmp byte [guion], 0
   336 00000210 741C                <1> 	je normalstartup
   337 00000212 8B1D[33020000]      <1> 	mov ebx, [basecache]
   338 00000218 C1E304              <1> 	shl ebx, 4
   339 0000021B 8B3D[1A550000]      <1> 	mov edi, [physbaseptr]
   340 00000221 29DF                <1> 	sub edi, ebx
   341 00000223 893D[1A550000]      <1> 	mov [physbaseptr], edi
   342 00000229 E9EB640000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 0000022E E96B280000          <1> 	jmp os
   346                              <1> 	
   347 00000233 00000000            <1> basecache dd 0
   348 00000237 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 0000023B 00                  <1> testingcpuspeed db 0
   351 0000023C 00000000            <1> cpuspeedperint dd 0
   352 00000240 0000000000000000    <1> cpuclocksperint dd 0,0
   353 00000248 00000000            <1> memoryspace dd 0
   354 0000024C 7D0A                <1> pitdiv dw 2685
   355 0000024E 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 00000252 00                  <1> ticks db 0
   364 00000253 00000000            <1> timeseconds dd 0
   365 00000257 00000000            <1> timenanoseconds dd 0
   366 0000025B 00                  <1> soundon db 0
   367 0000025C 0000                <1> soundrepititions dw 0
   368 0000025E 00000000            <1> soundpos dd 0
   369 00000262 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 00000266 C605[3B020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 0000026D A3[3C020000]        <1> 	mov [cpuspeedperint], eax
   374 00000272 B8[A24E0000]        <1> 	mov eax, cpuspeedloopend
   375 00000277 890424              <1> 	mov [esp], eax
   376 0000027A E9E2000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 0000027F 803D[3B020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 00000286 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 00000288 E8AE000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 0000028D 803D[5B020000]01    <1> 	cmp byte [soundon], 1
   385 00000294 0F8458560000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 0000029A 803D[14670000]01    <1> 	cmp byte [threadson], 1
   389 000002A1 0F8416640000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002A7 803D[14670000]00    <1> 	cmp byte [threadson], 0
   393 000002AE 0F84AD000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397 000002B4 FE05[52020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   398 000002BA 0F85A1000000        <1> 	jnz near handled
   399                              <1> 	
   400 000002C0 60                  <1> 	pusha
   401 000002C1 E464                <1> 	in al, 64h
   402 000002C3 A820                <1> 	test al, 20h
   403 000002C5 0F8595000000        <1> 	jnz near handled2
   404 000002CB E460                <1> 	in al, 60h
   405 000002CD 3C01                <1> 	cmp al, 1		;escape
   406 000002CF 7405                <1> 	je userint
   407 000002D1 E98A000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002D6 31C0                <1> 	xor eax, eax
   430 000002D8 3905[04AA0300]      <1> 	cmp [sigtable], eax
   431 000002DE 7410                <1> 	je .nosighook
   432 000002E0 8B1D[04AA0300]      <1> 	mov ebx, [sigtable]
   433 000002E6 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 000002EA B020                <1> 	mov al, 0x20
   436 000002EC E620                <1> 	out 0x20, al
   437 000002EE 61                  <1> 	popa
   438 000002EF CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 000002F0 E621                <1> 	out 0x21, al
   442 000002F2 E6A1                <1> 	out 0xA1, al
   443 000002F4 B020                <1> 	mov al, 0x20
   444 000002F6 E6A0                <1> 	out 0xA0, al
   445 000002F8 E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 000002FA 66A1[4C020000]      <1> 	mov ax, [pitdiv]
   448 00000300 E640                <1> 	out 0x40, al
   449 00000302 66C1C008            <1> 	rol ax, 8
   450 00000306 E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 00000308 B020                <1> 	mov al, 0x20
   453 0000030A E620                <1> 	out 0x20, al
   454 0000030C 61                  <1> 	popa
   455 0000030D E9E1090000          <1> 	jmp unhand + 12
   456                              <1> 	;pop ebp
   457                              <1> 	;pop ebp
   458                              <1> 	;popf
   459                              <1> 	;mov esp, stackend ;reset stack
   460                              <1> 	;jmp returnfromexp
   461                              <1> %endif
   462 00000312 0A                  <1> rtcrate db 10
   463                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   464                              <1> %ifdef io.serial
   465                              <1> %else
   466                              <1> %ifdef terminal.vsync
   467 00000313 803D[34280000]00    <1> 	cmp byte [termcopyneeded], 0
   468 0000031A 7405                <1> 	je .nocopy
   469 0000031C E81C250000          <1> 	call newtermcopy
   470                              <1> .nocopy:
   471 00000321 50                  <1> 	push eax
   472 00000322 B00C                <1> 	mov al, 0xC
   473 00000324 E670                <1> 	out 0x70, al
   474 00000326 E471                <1> 	in al, 0x71
   475 00000328 58                  <1> 	pop eax
   476                              <1> %endif
   477                              <1> %endif
   478 00000329 EB3D                <1> 	jmp handledboth
   479                              <1> %ifdef rtl8139.included
   480                              <1> nextpacket dd rbuffstart
   481                              <1> rtl8139.irq:
   482                              <1> 	pusha
   483                              <1> 	mov dx, [rtl8139.basenicaddr]
   484                              <1> 	add dx, rtl8139.ISR
   485                              <1> 	xor eax, eax
   486                              <1> 	in ax, dx
   487                              <1> 	out dx, ax
   488                              <1> 	test ax, 1
   489                              <1> 	jz  near .norec
   490                              <1> 	mov esi, packetrecvmsg
   491                              <1> 	call print
   492                              <1> 	mov esi, [nextpacket]
   493                              <1> 	cmp esi, rbuffend
   494                              <1> 	jb .goodesi
   495                              <1> 	mov esi, rbuffstart
   496                              <1> .goodesi:
   497                              <1> 	mov ecx, esi
   498                              <1> 	sub ecx, rbuffstart
   499                              <1> 	call showhex
   500                              <1> 	mov ecx, [esi]
   501                              <1> 	test ecx, 1
   502                              <1> 	jz .notgood
   503                              <1> 	call showhex
   504                              <1> 	add esi, 4
   505                              <1> 	xor edi, edi
   506                              <1> 	mov di, [esi - 2]
   507                              <1> 	mov ecx, edi
   508                              <1> 	add edi, esi
   509                              <1> 	sub ecx, 4
   510                              <1> 	call showdec
   511                              <1> 
   512                              <1> 	mov ecx, edi
   513                              <1> 	sub ecx, rbuffstart
   514                              <1> 	add ecx, 3
   515                              <1> 	shr ecx, 2
   516                              <1> 	shl ecx, 2
   517                              <1> 	call showhex
   518                              <1> .notgood	
   519                              <1> 	mov  dx, [rtl8139.basenicaddr]
   520                              <1> 	add dx, rtl8139.CBR
   521                              <1> 	xor eax, eax
   522                              <1> 	in ax, dx
   523                              <1> 	mov ecx, eax
   524                              <1> 	call showhex
   525                              <1> 	
   526                              <1> 	mov dx, [rtl8139.basenicaddr]
   527                              <1> 	add dx, rtl8139.CAPR
   528                              <1> 	out dx, ax
   529                              <1> 	
   530                              <1> 	add eax, rbuffstart
   531                              <1> 	mov [nextpacket], eax
   532                              <1> 	
   533                              <1> ;	int3
   534                              <1> ;.lp:
   535                              <1> ;	mov cl, [esi]
   536                              <1> ;	call showhexsmall
   537                              <1> ;	inc esi
   538                              <1> ;	cmp esi, [nextpacket]
   539                              <1> ;	jb .lp
   540                              <1> ;	mov ecx, [esi]
   541                              <1> ;	call showhex
   542                              <1> ;	call printline
   543                              <1> .norec:
   544                              <1> 	popa
   545                              <1> 	jmp handledboth
   546                              <1> packetrecvmsg db 10,"Packet: ",0
   547                              <1> %endif
   548                              <1> %ifdef sound.included
   549                              <1> sblaster.irq:
   550 0000032B 60                  <1> 	pusha
   551 0000032C 803D[CD5B0000]01    <1> 	cmp byte [SoundBlaster], 1
   552 00000333 0F849A560000        <1> 	je near sblaster.cont
   553 00000339 EB25                <1> 	jmp handled2
   554                              <1> %endif
   555                              <1> 	
   556                              <1> timekeeper:
   557 0000033B 50                  <1> 	push eax
   558 0000033C A1[57020000]        <1> 	mov eax, [timenanoseconds]
   559 00000341 0305[4E020000]      <1> 	add eax, [timeinterval]
   560 00000347 3D00CA9A3B          <1> 	cmp eax, 1000000000
   561 0000034C 720B                <1> 	jb nonanosecondrollover
   562 0000034E FF05[53020000]      <1> 	inc dword [timeseconds]
   563 00000354 2D00CA9A3B          <1> 	sub eax, 1000000000
   564                              <1> 	%ifdef gui.time
   565                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   566                              <1> 		cmp byte [guion], 1
   567                              <1> 		jne nonanosecondrollover
   568                              <1> 		cmp dword [dragging], 0
   569                              <1> 		jne nonanosecondrollover
   570                              <1> 		pusha
   571                              <1> 		call guitime
   572                              <1> 		popa
   573                              <1> 	%endif
   574                              <1> nonanosecondrollover:
   575 00000359 A3[57020000]        <1> 	mov [timenanoseconds], eax
   576 0000035E 58                  <1> 	pop eax
   577 0000035F C3                  <1> 	ret
   578                              <1> 	
   579                              <1> handled2:
   580 00000360 61                  <1> 	popa
   581                              <1> handled:
   582 00000361 50                  <1> 	push eax
   583 00000362 B020                <1> 	mov al, 0x20
   584 00000364 E620                <1> 	out 0x20, al
   585 00000366 58                  <1> 	pop eax
   586 00000367 CF                  <1> 	iret
   587                              <1> handledboth:
   588 00000368 50                  <1> 	push eax
   589 00000369 B020                <1> 	mov al, 0x20
   590 0000036B E6A0                <1> 	out 0xA0, al
   591 0000036D E620                <1> 	out 0x20, al
   592 0000036F 58                  <1> 	pop eax
   593 00000370 CF                  <1> 	iret
   594                              <1> 	
   595                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   596 00000371 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   597 00000373 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   598                              <1> 
   599 00000377 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   600 00000379 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   601                              <1> 
   602                              <1> 
   603 0000037D 0000                <1> gdt:	dw 0			; limit 15:0
   604 0000037F 0000                <1> 	dw 0			; base 15:0
   605 00000381 00                  <1> 	db 0			; base 23:16
   606 00000382 00                  <1> 	db 0			; type
   607 00000383 00                  <1> 	db 0			; limit 19:16, flags
   608 00000384 00                  <1> 	db 0			; base 31:24
   609                              <1> ; linear data segment descriptor
   610                              <1> LINEAR_SEL	equ	$-gdt
   611 00000385 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   612 00000387 0000                <1> 	dw 0			; base for this one is always 0
   613 00000389 00                  <1> 	db 0
   614 0000038A 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   615 0000038B CF                  <1> 	db 0xCF			; page-granular, 32-bit
   616 0000038C 00                  <1> 	db 0
   617                              <1> STACK_SEL	equ $-gdt
   618 0000038D 0200                <1> gdts:	dw 2;(stackend)/4096
   619 0000038F 0000                <1> 	dw 0
   620 00000391 00                  <1> 	db 0
   621 00000392 92                  <1> 	db 0x92
   622 00000393 CF                  <1> 	db 0xCF
   623 00000394 00                  <1> 	db 0
   624                              <1> ; code segment descriptor
   625                              <1> SYS_CODE_SEL	equ	$-gdt
   626 00000395 FFFF                <1> gdt2:	dw 0xFFFF
   627 00000397 0000                <1> 	dw 0			; (base gets set above)
   628 00000399 00                  <1> 	db 0
   629 0000039A 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   630 0000039B CF                  <1> 	db 0xCF
   631 0000039C 00                  <1> 	db 0
   632                              <1> ; data segment descriptor
   633                              <1> SYS_DATA_SEL	equ	$-gdt
   634 0000039D FFFF                <1> gdt3:	dw 0xFFFF
   635 0000039F 0000                <1> 	dw 0			; (base gets set above)
   636 000003A1 00                  <1> 	db 0
   637 000003A2 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   638 000003A3 CF                  <1> 	db 0xCF
   639 000003A4 00                  <1> 	db 0
   640                              <1> NEW_CODE_SEL	equ	$-gdt
   641 000003A5 FFFF                <1> gdt4:	dw 0xFFFF
   642 000003A7 0000                <1> 	dw 0			; (base gets set above)
   643 000003A9 00                  <1> 	db 0
   644 000003AA 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   645 000003AB CF                  <1> 	db 0xCF
   646 000003AC 00                  <1> 	db 0
   647                              <1> ; data segment descriptor
   648                              <1> NEW_DATA_SEL	equ	$-gdt
   649 000003AD FFFF                <1> gdt5:	dw 0xFFFF
   650 000003AF 0000                <1> 	dw 0			; (base gets set above)
   651 000003B1 00                  <1> 	db 0
   652 000003B2 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   653 000003B3 CF                  <1> 	db 0xCF
   654 000003B4 00                  <1> 	db 0
   655                              <1> V8086_CODE_SEL	equ $-gdt
   656 000003B5 FFFF                <1> gdtv8086: dw 0xFFFF
   657 000003B7 0000                <1> 	dw 0
   658 000003B9 00                  <1> 	db 0
   659 000003BA 9A                  <1> 	db 0x9A
   660 000003BB 8F                  <1> 	db 0x8F
   661 000003BC 00                  <1> 	db 0
   662                              <1> V8086_DATA_SEL	equ $-gdt
   663 000003BD FFFF                <1> gdtv80862: dw 0xFFFF
   664 000003BF 0000                <1> 	dw 0
   665 000003C1 00                  <1> 	db 0
   666 000003C2 92                  <1> 	db 0x92
   667 000003C3 8F                  <1> 	db 0x8F
   668 000003C4 00                  <1> 	db 0
   669                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   670 000003C5 0001                <1> gdtdos:	dw 256	;give it 1 MB
   671 000003C7 0000                <1> 	dw 0
   672 000003C9 00                  <1> 	db 0
   673 000003CA 9A                  <1> 	db 0x9A
   674 000003CB 8F                  <1> 	db 0x8F ;16 bit
   675 000003CC 00                  <1> 	db 0
   676                              <1> DOS_DATA_SEL 	equ $-gdt
   677 000003CD 0001                <1> gdtdos2:	dw 256
   678 000003CF 0000                <1> 	dw 0
   679 000003D1 00                  <1> 	db 0
   680 000003D2 92                  <1> 	db 0x92
   681 000003D3 8F                  <1> 	db 0x8F ;16 bit
   682 000003D4 00                  <1> 	db 0
   683                              <1> gdt_end:
   684                              <1> 
   685                              <1> ;	interrupt descriptor table (IDT)
   686                              <1> ; 32 reserved interrupts:
   687                              <1> idt:	
   688                              <1> %assign i 0
   689                              <1> %rep    8
   690                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <1> %assign i i+1
   692                              <1> %endrep
   693 000003D5 [E70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 000003DD [F30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 000003E5 [FF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 000003ED [0B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 000003F5 [170D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 000003FD [230D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i i+1
   705 00000405 [2F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i i+1
   707 0000040D [3B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i i+1
   709 00000415 [470D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   710                              <1> %assign i 9
   711                              <1> %rep    23
   712                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <1> %assign i i+1
   714                              <1> %endrep
   715 0000041D [530D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i i+1
   717 00000425 [5F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i i+1
   719 0000042D [6B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i i+1
   721 00000435 [770D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i i+1
   723 0000043D [830D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i i+1
   725 00000445 [8F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i i+1
   727 0000044D [9B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i i+1
   729 00000455 [A70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i i+1
   731 0000045D [B30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i i+1
   733 00000465 [BF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i i+1
   735 0000046D [CB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i i+1
   737 00000475 [D70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i i+1
   739 0000047D [E30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i i+1
   741 00000485 [EF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i i+1
   743 0000048D [FB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i i+1
   745 00000495 [070E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i i+1
   747 0000049D [130E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i i+1
   749 000004A5 [1F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i i+1
   751 000004AD [2B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i i+1
   753 000004B5 [370E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i i+1
   755 000004BD [430E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i i+1
   757 000004C5 [4F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i i+1
   759 000004CD [5B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i i+1
   761 000004D5 [6329]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   762 000004DD [6729]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   763                              <1> %assign i 0x22
   764                              <1> %rep 14
   765                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <1> %assign i +1
   767                              <1> %endrep
   768 000004E5 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000004ED [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000004F5 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000004FD [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 00000505 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 0000050D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 00000515 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 0000051D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 00000525 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 0000052D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788 00000535 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   789                              <2> %assign i +1
   790 0000053D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   791                              <2> %assign i +1
   792 00000545 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   793                              <2> %assign i +1
   794 0000054D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   795                              <2> %assign i +1
   796                              <1> ;INT 30h for os use and 3rd party use:
   797 00000555 [9D1B]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   798                              <1> %assign i 0x31
   799                              <1> %rep 15
   800                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   801                              <1> %assign i +1
   802                              <1> %endrep
   803 0000055D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   804                              <2> %assign i +1
   805 00000565 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   806                              <2> %assign i +1
   807 0000056D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   808                              <2> %assign i +1
   809 00000575 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   810                              <2> %assign i +1
   811 0000057D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   812                              <2> %assign i +1
   813 00000585 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   814                              <2> %assign i +1
   815 0000058D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   816                              <2> %assign i +1
   817 00000595 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   818                              <2> %assign i +1
   819 0000059D [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   820                              <2> %assign i +1
   821 000005A5 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   822                              <2> %assign i +1
   823 000005AD [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   824                              <2> %assign i +1
   825 000005B5 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   826                              <2> %assign i +1
   827 000005BD [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   828                              <2> %assign i +1
   829 000005C5 [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   830                              <2> %assign i +1
   831 000005CD [6103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   832                              <2> %assign i +1
   833                              <1> ;and here we are at 0x40
   834                              <1> ;here are all the irq's
   835 000005D5 [7F02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   836 000005DD [6103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   837 000005E5 [6103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   838 000005ED [6103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   839 000005F5 [6103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   840                              <1> 	%ifdef sound.included
   841 000005FD [2B03]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   842                              <1> 	%else
   843                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   844                              <1> 	%endif
   845 00000605 [6103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   846 0000060D [6103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   847 00000615 [1303]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   848 0000061D [6803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   849 00000625 [6803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   850                              <1> 	%ifdef rtl8139.included
   851                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   852                              <1> 	%else
   853 0000062D [6803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   854                              <1> 	%endif
   855 00000635 [6803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   856 0000063D [6803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   857 00000645 [6803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   858 0000064D [6803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   859                              <1> ;This brings me up to 0x50
   860                              <1> %assign i 0x50
   861                              <1> %rep 176
   862                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   864                              <1> %assign i +1
   865                              <1> %endrep
   866 00000655 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000065D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000665 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 0000066D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000675 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 0000067D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000685 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000068D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000695 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000069D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000006A5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000006AD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000006B5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000006BD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000006C5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000006CD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 000006D5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 000006DD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 000006E5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 000006ED [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 000006F5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000006FD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000705 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000070D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000715 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000071D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000725 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000072D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000735 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000073D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000745 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000074D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000755 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000075D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000765 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 0000076D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000775 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 0000077D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000785 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000078D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000795 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000079D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000007A5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000007AD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000007B5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000007BD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000007C5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000007CD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 000007D5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 000007DD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 000007E5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 000007ED [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 000007F5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000007FD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000805 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000080D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000815 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000081D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000825 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000082D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000835 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000083D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000845 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 0000084D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000855 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 0000085D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000865 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 0000086D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000875 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 0000087D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000885 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000088D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000895 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000089D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000008A5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000008AD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 000008B5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 000008BD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 000008C5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 000008CD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 000008D5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 000008DD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 000008E5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 000008ED [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 000008F5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 000008FD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000905 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000090D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000915 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000091D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000925 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000092D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000935 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 0000093D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000945 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 0000094D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000955 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 0000095D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000965 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 0000096D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000975 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 0000097D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000985 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 0000098D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000995 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 0000099D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 000009A5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 000009AD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 000009B5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 000009BD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 000009C5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 000009CD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 000009D5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 000009DD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 000009E5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 000009ED [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 000009F5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 000009FD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A05 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A0D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A15 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A1D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A25 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A2D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A35 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A3D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000A45 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000A4D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000A55 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000A5D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000A65 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000A6D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000A75 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000A7D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000A85 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000A8D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000A95 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000A9D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000AA5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000AAD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000AB5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000ABD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000AC5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000ACD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000AD5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000ADD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000AE5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000AED [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000AF5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000AFD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B05 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B0D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B15 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B1D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B25 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B2D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B35 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B3D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000B45 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000B4D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000B55 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349 00000B5D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1350                              <2> 
  1351                              <2> %assign i +1
  1352 00000B65 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1353                              <2> 
  1354                              <2> %assign i +1
  1355 00000B6D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1356                              <2> 
  1357                              <2> %assign i +1
  1358 00000B75 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1359                              <2> 
  1360                              <2> %assign i +1
  1361 00000B7D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1362                              <2> 
  1363                              <2> %assign i +1
  1364 00000B85 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1365                              <2> 
  1366                              <2> %assign i +1
  1367 00000B8D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1368                              <2> 
  1369                              <2> %assign i +1
  1370 00000B95 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1371                              <2> 
  1372                              <2> %assign i +1
  1373 00000B9D [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1374                              <2> 
  1375                              <2> %assign i +1
  1376 00000BA5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1377                              <2> 
  1378                              <2> %assign i +1
  1379 00000BAD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1380                              <2> 
  1381                              <2> %assign i +1
  1382 00000BB5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1383                              <2> 
  1384                              <2> %assign i +1
  1385 00000BBD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1386                              <2> 
  1387                              <2> %assign i +1
  1388 00000BC5 [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1389                              <2> 
  1390                              <2> %assign i +1
  1391 00000BCD [6103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1392                              <2> 
  1393                              <2> %assign i +1
  1394                              <1> idt_end:
  1395                                  	%include "source/realmode.asm"
  1396                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1397                              <1> 
  1398 00000BD5 FA                  <1> 	cli
  1399 00000BD6 A3[DD0C0000]        <1> 	mov [realmodeeax], eax
  1400 00000BDB 891D[D90C0000]      <1> 	mov [realmodeebx], ebx
  1401 00000BE1 8925[CB0C0000]      <1> 	mov [pmodeesp], esp
  1402                              <1> 
  1403 00000BE7 BB[D50C0000]        <1> 	mov ebx, cr0old
  1404                              <1> rmcopytofirstmbyte:
  1405 00000BEC 8B03                <1> 	mov eax, [ebx]
  1406 00000BEE 658903              <1> 	mov [gs:ebx], eax
  1407 00000BF1 83C304              <1> 	add ebx, 4
  1408 00000BF4 81FB[E10C0000]      <1> 	cmp ebx, realmodeptr
  1409 00000BFA 76F0                <1> 	jbe rmcopytofirstmbyte
  1410                              <1> 
  1411 00000BFC EA[030C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1412                              <1> 
  1413                              <1> [BITS 16]
  1414                              <1> protected16bit:
  1415 00000C03 B84000              <1> 	mov ax, V8086_DATA_SEL
  1416 00000C06 8ED8                <1> 	mov ds, ax
  1417 00000C08 8EC0                <1> 	mov es, ax
  1418 00000C0A 8EE0                <1> 	mov fs, ax
  1419 00000C0C 8EE8                <1> 	mov gs, ax
  1420 00000C0E 8ED0                <1> 	mov ss, ax
  1421 00000C10 66BC[00AA0300]      <1> 	mov esp, stackend
  1422 00000C16 0F20C0              <1> 	mov eax, cr0
  1423 00000C19 66A3[D50C]          <1> 	mov [cr0old], eax
  1424 00000C1D 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1425 00000C23 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1426 00000C26 EA[2B0C]0010        <1> 	jmp 0x1000:inrealmode
  1427                              <1> 
  1428                              <1> inrealmode:
  1429 00000C2B 8CC8                <1> 	mov ax, cs
  1430 00000C2D 8ED8                <1> 	mov ds, ax
  1431 00000C2F 8EC0                <1> 	mov es, ax
  1432 00000C31 8EE0                <1> 	mov fs, ax
  1433 00000C33 8EE8                <1> 	mov gs, ax
  1434 00000C35 8ED0                <1> 	mov ss, ax
  1435 00000C37 BC[00AA]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1436                              <1> 	
  1437 00000C3A B011                <1> 	mov al, 0x11
  1438 00000C3C E620                <1> 	out 0x20, al
  1439 00000C3E E6A0                <1> 	out 0xA0, al
  1440 00000C40 B008                <1> 	mov al, 0x8		;interrupt for master
  1441 00000C42 E621                <1> 	out 0x21, al
  1442 00000C44 B070                <1> 	mov al, 0x70	;interrupt for slave
  1443 00000C46 E6A1                <1> 	out 0xA1, al
  1444 00000C48 B004                <1> 	mov al, 4
  1445 00000C4A E621                <1> 	out 0x21, al
  1446 00000C4C B002                <1> 	mov al, 2
  1447 00000C4E E6A1                <1> 	out 0xA1, al
  1448 00000C50 B001                <1> 	mov al, 0x1
  1449 00000C52 E621                <1> 	out 0x21, al
  1450 00000C54 B001                <1> 	mov al, 0x1
  1451 00000C56 E6A1                <1> 	out 0xA1, al
  1452                              <1> 	
  1453 00000C58 0F011E[CF0C]        <1> 	lidt [idt_real]
  1454 00000C5D FB                  <1> 	sti
  1455                              <1> 
  1456 00000C5E 66A1[DD0C]          <1> 	mov eax, [realmodeeax]
  1457 00000C62 668B1E[D90C]        <1> 	mov ebx, [realmodeebx]
  1458                              <1> 
  1459 00000C67 FF16[E10C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1460                              <1> 
  1461 00000C6B 66A3[DD0C]          <1> 	mov [realmodeeax], eax
  1462 00000C6F 66891E[D90C]        <1> 	mov [realmodeebx], ebx
  1463                              <1> 
  1464 00000C74 FA                  <1> 	cli
  1465 00000C75 0F0116[7103]        <1> 	lgdt [gdtr]
  1466 00000C7A 0F011E[7703]        <1> 	lidt [idtr]
  1467 00000C7F 0F20C0              <1> 	mov eax, cr0
  1468 00000C82 0C01                <1> 	or al, 1
  1469 00000C84 0F22C0              <1> 	mov cr0,eax
  1470 00000C87 EA[8C0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1471                              <1> 
  1472                              <1> [BITS 32]
  1473                              <1> returntopmode:
  1474 00000C8C 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1475 00000C90 8ED8                <1> 	mov ds, ax
  1476 00000C92 8EC0                <1> 	mov es, ax
  1477 00000C94 8EE0                <1> 	mov fs, ax
  1478 00000C96 8ED0                <1> 	mov ss, ax
  1479 00000C98 8B25[CB0C0000]      <1> 	mov esp, [pmodeesp]
  1480 00000C9E 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1481 00000CA2 8EE8                <1> 	mov gs, ax
  1482                              <1> 
  1483 00000CA4 BB[D50C0000]        <1> 	mov ebx, cr0old
  1484                              <1> rmcopyfromfirstmbyte:
  1485 00000CA9 658B03              <1> 	mov eax, [gs:ebx]
  1486 00000CAC 8903                <1> 	mov [ebx], eax
  1487 00000CAE 83C304              <1> 	add ebx, 4
  1488 00000CB1 81FB[E10C0000]      <1> 	cmp ebx, realmodeptr
  1489 00000CB7 76F0                <1> 	jbe rmcopyfromfirstmbyte
  1490                              <1> 
  1491 00000CB9 E8C0540000          <1> 	call initialize.pic ;reset irq's and masks
  1492 00000CBE FB                  <1> 	sti
  1493 00000CBF A1[DD0C0000]        <1> 	mov eax, [realmodeeax]
  1494 00000CC4 8B1D[D90C0000]      <1> 	mov ebx, [realmodeebx]
  1495 00000CCA C3                  <1> 	ret
  1496                              <1> 	
  1497 00000CCB 00000000            <1> pmodeesp dd 0
  1498                              <1> idt_real:
  1499 00000CCF FF03                <1> 	dw 0x3FF
  1500 00000CD1 00000000            <1> 	dd 0
  1501 00000CD5 00000000            <1> cr0old dd 0
  1502 00000CD9 00000000            <1> realmodeebx dd 0
  1503 00000CDD 00000000            <1> realmodeeax dd 0
  1504 00000CE1 0000                <1> realmodeptr dw 0
  1505 00000CE3 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1506                                  [BITS 32]
  1507                                      %include "source/exception.asm"
  1508                              <1> %ifdef exceptions.included
  1509                              <1> unhand:	
  1510                              <1> 	%assign i 0
  1511                              <1> 	%rep 32
  1512                              <1> 	mov byte [intprob], i
  1513                              <1> 	jmp unhand2
  1514                              <1> 	%assign i i+1
  1515                              <1> 	%endrep
  1516 00000CE7 C605[56110000]00    <2>  mov byte [intprob], i
  1517 00000CEE E947010000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000CF3 C605[56110000]01    <2>  mov byte [intprob], i
  1520 00000CFA E93B010000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000CFF C605[56110000]02    <2>  mov byte [intprob], i
  1523 00000D06 E92F010000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000D0B C605[56110000]03    <2>  mov byte [intprob], i
  1526 00000D12 E923010000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000D17 C605[56110000]04    <2>  mov byte [intprob], i
  1529 00000D1E E917010000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000D23 C605[56110000]05    <2>  mov byte [intprob], i
  1532 00000D2A E90B010000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000D2F C605[56110000]06    <2>  mov byte [intprob], i
  1535 00000D36 E9FF000000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000D3B C605[56110000]07    <2>  mov byte [intprob], i
  1538 00000D42 E9F3000000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000D47 C605[56110000]08    <2>  mov byte [intprob], i
  1541 00000D4E E9E7000000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000D53 C605[56110000]09    <2>  mov byte [intprob], i
  1544 00000D5A E9DB000000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000D5F C605[56110000]0A    <2>  mov byte [intprob], i
  1547 00000D66 E9CF000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000D6B C605[56110000]0B    <2>  mov byte [intprob], i
  1550 00000D72 E9C3000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000D77 C605[56110000]0C    <2>  mov byte [intprob], i
  1553 00000D7E E9B7000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000D83 C605[56110000]0D    <2>  mov byte [intprob], i
  1556 00000D8A E9AB000000          <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000D8F C605[56110000]0E    <2>  mov byte [intprob], i
  1559 00000D96 E99F000000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 00000D9B C605[56110000]0F    <2>  mov byte [intprob], i
  1562 00000DA2 E993000000          <2>  jmp unhand2
  1563                              <2>  %assign i i+1
  1564 00000DA7 C605[56110000]10    <2>  mov byte [intprob], i
  1565 00000DAE E987000000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 00000DB3 C605[56110000]11    <2>  mov byte [intprob], i
  1568 00000DBA EB7E                <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 00000DBC C605[56110000]12    <2>  mov byte [intprob], i
  1571 00000DC3 EB75                <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 00000DC5 C605[56110000]13    <2>  mov byte [intprob], i
  1574 00000DCC EB6C                <2>  jmp unhand2
  1575                              <2>  %assign i i+1
  1576 00000DCE C605[56110000]14    <2>  mov byte [intprob], i
  1577 00000DD5 EB63                <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00000DD7 C605[56110000]15    <2>  mov byte [intprob], i
  1580 00000DDE EB5A                <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00000DE0 C605[56110000]16    <2>  mov byte [intprob], i
  1583 00000DE7 EB51                <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 00000DE9 C605[56110000]17    <2>  mov byte [intprob], i
  1586 00000DF0 EB48                <2>  jmp unhand2
  1587                              <2>  %assign i i+1
  1588 00000DF2 C605[56110000]18    <2>  mov byte [intprob], i
  1589 00000DF9 EB3F                <2>  jmp unhand2
  1590                              <2>  %assign i i+1
  1591 00000DFB C605[56110000]19    <2>  mov byte [intprob], i
  1592 00000E02 EB36                <2>  jmp unhand2
  1593                              <2>  %assign i i+1
  1594 00000E04 C605[56110000]1A    <2>  mov byte [intprob], i
  1595 00000E0B EB2D                <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 00000E0D C605[56110000]1B    <2>  mov byte [intprob], i
  1598 00000E14 EB24                <2>  jmp unhand2
  1599                              <2>  %assign i i+1
  1600 00000E16 C605[56110000]1C    <2>  mov byte [intprob], i
  1601 00000E1D EB1B                <2>  jmp unhand2
  1602                              <2>  %assign i i+1
  1603 00000E1F C605[56110000]1D    <2>  mov byte [intprob], i
  1604 00000E26 EB12                <2>  jmp unhand2
  1605                              <2>  %assign i i+1
  1606 00000E28 C605[56110000]1E    <2>  mov byte [intprob], i
  1607 00000E2F EB09                <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 00000E31 C605[56110000]1F    <2>  mov byte [intprob], i
  1610 00000E38 EB00                <2>  jmp unhand2
  1611                              <2>  %assign i i+1
  1612                              <1> unhand2:
  1613 00000E3A FA                  <1> 	cli
  1614 00000E3B 1E                  <1> 	push ds
  1615 00000E3C 06                  <1> 	push es
  1616 00000E3D 0FA0                <1> 	push fs
  1617 00000E3F 0FA8                <1> 	push gs
  1618 00000E41 16                  <1> 	push ss
  1619 00000E42 60                  <1> 	pushad
  1620                              <1> %ifdef gui.included
  1621 00000E43 803D[E7840000]00    <1> 	cmp byte [guion], 0
  1622 00000E4A 0F8432000000        <1> 	je near noguiunhandstuff
  1623 00000E50 66C705[50110000]08- <1> 	mov word [locunhandy], 8
  1624 00000E58 00                  <1>
  1625 00000E59 66C705[52110000]08- <1> 	mov word [locunhandx], 8
  1626 00000E61 00                  <1>
  1627 00000E62 668B1D[E36D0000]    <1> 	mov bx, [background]
  1628 00000E69 66891D[54110000]    <1> 	mov [backgroundcache], bx
  1629 00000E70 C605[F6550000]01    <1> 	mov byte [mousedisabled],1
  1630 00000E77 66BB00F8            <1> 	mov bx, 1111100000000000b
  1631 00000E7B 66891D[E36D0000]    <1> 	mov [background], bx
  1632                              <1> noguiunhandstuff:
  1633                              <1> %endif
  1634 00000E82 89E6                <1> 	mov esi, esp
  1635 00000E84 8935[44110000]      <1> 	mov [espfirst], esi
  1636 00000E8A 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1637 00000E90 8935[40110000]      <1> 	mov [esploc], esi
  1638 00000E96 BE[65110000]        <1> 	mov esi, unhandmsg
  1639 00000E9B 8935[48110000]      <1> 	mov [esiloc], esi
  1640 00000EA1 31C9                <1> 	xor ecx, ecx
  1641 00000EA3 8A0D[56110000]      <1> 	mov cl, [intprob]
  1642 00000EA9 BB[34150000]        <1> 	mov ebx, errortypes
  1643 00000EAE C1E102              <1> 	shl ecx, 2
  1644 00000EB1 01CB                <1> 	add ebx, ecx
  1645 00000EB3 81FB[74150000]      <1> 	cmp ebx, errortypesend
  1646 00000EB9 7205                <1> 	jb gooderrortype
  1647 00000EBB BB[74150000]        <1> 	mov ebx, errortypesend
  1648                              <1> gooderrortype:
  1649 00000EC0 8B33                <1> 	mov esi, [ebx]
  1650                              <1> %ifdef gui.included
  1651 00000EC2 803D[E7840000]00    <1> 	cmp byte [guion], 0
  1652 00000EC9 0F842A000000        <1> 	je near errortext
  1653 00000ECF 668B0D[50110000]    <1> 	mov cx, [locunhandy]
  1654 00000ED6 668B15[52110000]    <1> 	mov dx, [locunhandx]
  1655 00000EDD 66B80100            <1> 	mov ax, 1
  1656 00000EE1 6631DB              <1> 	xor bx, bx
  1657 00000EE4 E844650000          <1> 	call showstring2
  1658 00000EE9 66890D[50110000]    <1> 	mov [locunhandy], cx
  1659 00000EF0 668915[52110000]    <1> 	mov [locunhandx], dx
  1660 00000EF7 EB05                <1> 	jmp errortextdone
  1661                              <1> %endif
  1662                              <1> errortext:
  1663 00000EF9 E8F40D0000          <1> 	call print		;get the error message and print it
  1664                              <1> errortextdone:
  1665 00000EFE 31C9                <1> 	xor ecx, ecx
  1666 00000F00 8A0D[56110000]      <1> 	mov cl, [intprob]
  1667 00000F06 E8DA010000          <1> 	call expdump
  1668                              <1> dumpstack:
  1669 00000F0B 8B35[40110000]      <1> 	mov esi, [esploc]
  1670 00000F11 39E6                <1> 	cmp esi, esp
  1671 00000F13 7213                <1> 	jb donedump
  1672 00000F15 368B0E              <1> 	mov ecx, [ss:esi]
  1673 00000F18 83EE04              <1> 	sub esi, 4
  1674 00000F1B 8935[40110000]      <1> 	mov [esploc], esi
  1675 00000F21 E8BF010000          <1> 	call expdump
  1676 00000F26 EBE3                <1> 	jmp dumpstack
  1677                              <1> donedump:
  1678 00000F28 0F20C1              <1> 	mov ecx, cr0
  1679 00000F2B E8B5010000          <1> 	call expdump
  1680 00000F30 0F20D1              <1> 	mov ecx, cr2
  1681 00000F33 E8AD010000          <1> 	call expdump
  1682 00000F38 0F20D9              <1> 	mov ecx, cr3
  1683 00000F3B E8A5010000          <1> 	call expdump
  1684 00000F40 0F20E1              <1> 	mov ecx, cr4
  1685 00000F43 E89D010000          <1> 	call expdump
  1686 00000F48 0F00C9              <1> 	str ecx
  1687 00000F4B E895010000          <1> 	call expdump
  1688 00000F50 0F010D[5F110000]    <1> 	sidt [igdtcache]
  1689 00000F57 8B0D[61110000]      <1> 	mov ecx, [igdtcache + 2]
  1690 00000F5D E883010000          <1> 	call expdump
  1691 00000F62 0F0105[5F110000]    <1> 	sgdt [igdtcache]
  1692 00000F69 8B0D[61110000]      <1> 	mov ecx, [igdtcache + 2]
  1693 00000F6F E871010000          <1> 	call expdump
  1694 00000F74 0F00C1              <1> 	sldt ecx
  1695 00000F77 E869010000          <1> 	call expdump
  1696 00000F7C 8B35[40110000]      <1> 	mov esi, [esploc]
  1697 00000F82 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1698 00000F87 83C710              <1> 	add edi, 16
  1699 00000F8A 893D[5B110000]      <1> 	mov [codelocend], edi
  1700 00000F90 83EF20              <1> 	sub edi, 32
  1701                              <1> dumpcodeloop:
  1702 00000F93 893D[57110000]      <1> 	mov [codeloc], edi
  1703 00000F99 8B0F                <1> 	mov ecx, [edi]
  1704 00000F9B E845010000          <1> 	call expdump
  1705 00000FA0 8B3D[57110000]      <1> 	mov edi, [codeloc]
  1706 00000FA6 83C704              <1> 	add edi, 4
  1707 00000FA9 3B3D[5B110000]      <1> 	cmp edi, [codelocend]
  1708 00000FAF 72E2                <1> 	jb dumpcodeloop
  1709 00000FB1 BE[76100000]        <1> 	mov esi, backtoosmsg
  1710                              <1> %ifdef gui.included
  1711 00000FB6 803D[E7840000]00    <1> 	cmp byte [guion], 0
  1712 00000FBD 741C                <1> 	je backtomsg
  1713                              <1> guibacktomsg:
  1714 00000FBF 668B15[52110000]    <1> 	mov dx, [locunhandx]
  1715 00000FC6 668B0D[50110000]    <1> 	mov cx, [locunhandy]
  1716 00000FCD 66B80100            <1> 	mov ax, 1
  1717 00000FD1 6631DB              <1> 	xor bx, bx
  1718 00000FD4 E854640000          <1> 	call showstring2
  1719 00000FD9 EB05                <1> 	jmp backtomsgdone
  1720                              <1> backtomsg:
  1721                              <1> %endif
  1722 00000FDB E8120D0000          <1> 	call print
  1723                              <1> backtomsgdone:
  1724 00000FE0 30C0                <1> 	xor al, al
  1725 00000FE2 E8E7120000          <1> 	call rdcharint
  1726 00000FE7 803D[56110000]03    <1> 	cmp byte [intprob], 3
  1727 00000FEE 7541                <1> 	jne nodebugint
  1728                              <1> %ifdef gui.included
  1729 00000FF0 803D[E7840000]00    <1> 	cmp byte [guion], 0
  1730 00000FF7 7427                <1> 	je nodebuggui
  1731 00000FF9 668B1D[54110000]    <1> 	mov bx, [backgroundcache]
  1732 00001000 66891D[E36D0000]    <1> 	mov [background], bx
  1733 00001007 6631DB              <1> 	xor bx, bx
  1734 0000100A C605[F6550000]00    <1> 	mov byte [mousedisabled], 0
  1735 00001011 E8505D0000          <1> 	call guiclear
  1736 00001016 E8CC5D0000          <1> 	call reloadallgraphics
  1737 0000101B E80C180000          <1> 	call termcopy
  1738                              <1> nodebuggui:
  1739                              <1> %endif
  1740 00001020 8B35[44110000]      <1> 	mov esi, [espfirst]
  1741 00001026 89F4                <1> 	mov esp, esi
  1742 00001028 61                  <1> 	popad
  1743 00001029 17                  <1> 	pop ss
  1744 0000102A 0FA9                <1> 	pop gs
  1745 0000102C 0FA1                <1> 	pop fs
  1746 0000102E 07                  <1> 	pop es
  1747 0000102F 1F                  <1> 	pop ds
  1748 00001030 CF                  <1> 	iret
  1749                              <1> nodebugint:
  1750 00001031 61                  <1> 	popad
  1751 00001032 17                  <1> 	pop ss
  1752 00001033 0FA9                <1> 	pop gs
  1753 00001035 0FA1                <1> 	pop fs
  1754 00001037 07                  <1> 	pop es
  1755 00001038 1F                  <1> 	pop ds
  1756 00001039 83C408              <1> 	add esp, 8
  1757                              <1> ;	popf ;pop the cs segment selector into eflags
  1758                              <1> ;	popf ;then pop the flags
  1759                              <1> %ifdef gui.included
  1760 0000103C 803D[E7840000]00    <1> 	cmp byte [guion], 0
  1761 00001043 7427                <1> 	je returnunhandgui
  1762 00001045 668B1D[54110000]    <1> 	mov bx, [backgroundcache]
  1763 0000104C 66891D[E36D0000]    <1> 	mov [background], bx
  1764 00001053 6631DB              <1> 	xor bx, bx
  1765 00001056 C605[F6550000]00    <1> 	mov byte [mousedisabled], 0
  1766 0000105D E8045D0000          <1> 	call guiclear
  1767 00001062 E8805D0000          <1> 	call reloadallgraphics
  1768 00001067 E8C0170000          <1> 	call termcopy
  1769                              <1> %endif
  1770                              <1> returnunhandgui:
  1771 0000106C BC[00AA0300]        <1> 	mov esp, stackend ;reset stack
  1772 00001071 E9DF1B0000          <1> 	jmp nwcmd
  1773 00001076 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1774 0000107F 737420616E79207072- <1>
  1775 00001088 6F626C656D7320696E- <1>
  1776 00001091 207468652049737375- <1>
  1777 0000109A 65732073656374696F- <1>
  1778 000010A3 6E20617420736F6C6C- <1>
  1779 000010AC 65726F732E676F6F67- <1>
  1780 000010B5 6C65636F64652E636F- <1>
  1781 000010BE 6D0A                <1>
  1782 000010C0 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1783 000010C9 206B657920746F2072- <1>
  1784 000010D2 657475726E20746F20- <1>
  1785 000010DB 536F6C6C65724F530A- <1>
  1786 000010E4 00                  <1>
  1787                              <1> expdump:
  1788 000010E5 8B35[48110000]      <1> 	mov esi, [esiloc]
  1789 000010EB 89F7                <1> 	mov edi, esi
  1790 000010ED 83C70F              <1> 	add edi, 15
  1791 000010F0 83C604              <1> 	add esi, 4
  1792 000010F3 893D[48110000]      <1> 	mov [esiloc], edi
  1793 000010F9 83EF03              <1> 	sub edi, 3
  1794 000010FC E88C1F0000          <1> 	call converthex
  1795 00001101 83EE04              <1> 	sub esi, 4
  1796                              <1> %ifdef gui.included
  1797 00001104 803D[E7840000]00    <1> 	cmp byte [guion], 0
  1798 0000110B 0F8429000000        <1> 	je near expdumptext
  1799 00001111 668B0D[50110000]    <1> 	mov cx, [locunhandy]
  1800 00001118 668B15[52110000]    <1> 	mov dx, [locunhandx]
  1801 0000111F 66B80100            <1> 	mov ax, 1
  1802 00001123 6631DB              <1> 	xor bx, bx
  1803 00001126 E802630000          <1> 	call showstring2
  1804 0000112B 66890D[50110000]    <1> 	mov [locunhandy], cx
  1805 00001132 668915[52110000]    <1> 	mov [locunhandx], dx
  1806 00001139 C3                  <1> 	ret
  1807                              <1> %endif
  1808                              <1> expdumptext:
  1809 0000113A E8B30B0000          <1> 	call print
  1810 0000113F C3                  <1> 	ret
  1811 00001140 00000000            <1> esploc dd 0
  1812 00001144 00000000            <1> espfirst dd 0
  1813 00001148 00000000            <1> esiloc dd 0
  1814 0000114C 00000000            <1> esiregbuf dd 0
  1815 00001150 0100                <1> locunhandy dw 1
  1816 00001152 0100                <1> locunhandx dw 1
  1817 00001154 0000                <1> backgroundcache dw 0
  1818 00001156 00                  <1> intprob db 0
  1819 00001157 00000000            <1> codeloc dd 0
  1820 0000115B 00000000            <1> codelocend dd 0
  1821 0000115F 000000000000        <1> igdtcache dw 0,0,0
  1822                              <1> 	unhandmsg:	
  1823 00001165 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1824 0000116E 303030FF0A00        <1>
  1825                              <1> unhndrg:
  1826 00001174 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1827 0000117D 303030202000<rept>  <1>
  1828 000011DD FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1829 000011E6 303030FF0A00        <1>
  1830 000011EC FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1831 000011F5 303030202000<rept>  <1>
  1832 00001255 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1833 0000125E 303030FF0A00        <1>
  1834 00001264 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1835 0000126D 303030202000<rept>  <1>
  1836 000012CD FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1837 000012D6 303030FF0A00        <1>
  1838 000012DC FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1839 000012E5 303030202000<rept>  <1>
  1840 00001345 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 0000134E 303030FF0A00        <1>
  1842                              <1> unhandregs:
  1843 00001354 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1844 0000135D 303030202000        <1>
  1845 00001363 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1846 0000136C 303030202000        <1>
  1847 00001372 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1848 0000137B 303030FF0A00        <1>
  1849 00001381 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1850 0000138A 303030202000        <1>
  1851 00001390 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1852 00001399 303030202000        <1>
  1853 0000139F 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1854 000013A8 303030202000        <1>
  1855 000013AE 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1856 000013B7 303030202000        <1>
  1857 000013BD 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1858 000013C6 303030FF0A00        <1>
  1859 000013CC 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1860 000013D5 303030202000        <1>
  1861 000013DB 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1862 000013E4 303030202000        <1>
  1863 000013EA 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1864 000013F3 303030202000        <1>
  1865 000013F9 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1866 00001402 303030FF0A00        <1>
  1867 00001408 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1868 00001411 303030202000        <1>
  1869 00001417 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1870 00001420 303030202000        <1>
  1871 00001426 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1872 0000142F 303030202000        <1>
  1873 00001435 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1874 0000143E 303030FF0A00        <1>
  1875 00001444 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1876 0000144D 303030202000        <1>
  1877 00001453 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1878 0000145C 303030202000        <1>
  1879 00001462 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1880 0000146B 303030202000        <1>
  1881 00001471 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1882 0000147A 303030FF0A00        <1>
  1883 00001480 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1884 00001489 303030202000        <1>
  1885 0000148F 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1886 00001498 303030202000        <1>
  1887 0000149E 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1888 000014A7 303030202000        <1>
  1889 000014AD 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1890 000014B6 303030FF0A00        <1>
  1891 000014BC FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1892 000014C5 303030202000<rept>  <1>
  1893 000014DA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1894 000014E3 30303020FF00        <1>
  1895 000014E9 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1896 000014F2 3030305D2000        <1>
  1897 000014F8 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1898 00001501 303030202000<rept>  <1>
  1899 00001525 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1900 0000152E 303030FF0A00        <1>
  1901                              <1> unhandmsgend:
  1902                              <1> 
  1903                              <1> errortypes:
  1904 00001534 [78150000]          <1> 			dd err0
  1905 00001538 [E1150000]          <1> 			dd err1
  1906 0000153C [42160000]          <1> 			dd err2
  1907 00001540 [97160000]          <1> 			dd err3
  1908 00001544 [FB160000]          <1> 			dd err4
  1909 00001548 [4D170000]          <1> 			dd err5
  1910 0000154C [B7170000]          <1> 			dd err6
  1911 00001550 [1F180000]          <1> 			dd err7
  1912 00001554 [69180000]          <1> 			dd err8
  1913 00001558 [C6180000]          <1> 			dd err9
  1914 0000155C [1F190000]          <1> 			dd err10
  1915 00001560 [6A190000]          <1> 			dd err11
  1916 00001564 [BA190000]          <1> 			dd err12
  1917 00001568 [131A0000]          <1> 			dd err13
  1918 0000156C [761A0000]          <1> 			dd err14
  1919 00001570 [B21A0000]          <1> 			dd err15
  1920                              <1> errortypesend:
  1921 00001574 [3E1B0000]          <1> 			dd unknownerror
  1922                              <1> 			
  1923 00001578 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1924 00001581 6279207A65726F3A0A  <1>
  1925 0000158A 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1926 00001593 6C79206C696D2061C3- <1>
  1927 0000159C B778203D20E2889E20- <1>
  1928 000015A5 7768656E2061206973- <1>
  1929 000015AE 20616E79207265616C- <1>
  1930 000015B7 206E756D6265722E20- <1>
  1931 000015C0 486170707920456173- <1>
  1932 000015C9 746572210A          <1>
  1933 000015CE 202020202020202020- <1> 		db "            x→0",10,0
  1934 000015D7 20202078E28692300A- <1>
  1935 000015E0 00                  <1>
  1936                              <1> 		
  1937 000015E1 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1938 000015EA 65702F427265616B70- <1>
  1939 000015F3 6F696E743A0A        <1>
  1940 000015F9 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1941 00001602 696E74206661756C74- <1>
  1942 0000160B 2C20627265616B706F- <1>
  1943 00001614 696E7420747261702C- <1>
  1944 0000161D 206F722073696E676C- <1>
  1945 00001626 652D73746570207472- <1>
  1946 0000162F 617020776173207472- <1>
  1947 00001638 696767657265642E0A- <1>
  1948 00001641 00                  <1>
  1949                              <1> 		
  1950 00001642 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1951 0000164B 6C6520696E74657272- <1>
  1952 00001654 7570743A0A          <1>
  1953 00001659 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1954 00001662 6520696E7465727275- <1>
  1955 0000166B 707420776173207472- <1>
  1956 00001674 696767657265642074- <1>
  1957 0000167D 68617420636F756C64- <1>
  1958 00001686 206E6F74206265206D- <1>
  1959 0000168F 61736B65642E0A00    <1>
  1960                              <1> 		
  1961 00001697 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1962 000016A0 743A0A              <1>
  1963 000016A3 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1964 000016AC 727275707420697320- <1>
  1965 000016B5 7573656420696E2070- <1>
  1966 000016BE 726F6772616D732074- <1>
  1967 000016C7 6F2073686F77207468- <1>
  1968 000016D0 6520737461636B2061- <1>
  1969 000016D9 6E6420726567697374- <1>
  1970 000016E2 65727320616E642063- <1>
  1971 000016EB 616E2062650A        <1>
  1972 000016F1 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1973 000016FA 00                  <1>
  1974                              <1> 		
  1975 000016FB 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1976 00001704 0A                  <1>
  1977 00001705 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1978 0000170E 73736F722072616E20- <1>
  1979 00001717 696E746F20616E2049- <1>
  1980 00001720 4E544F20696E737472- <1>
  1981 00001729 756374696F6E207769- <1>
  1982 00001732 746820746865206F76- <1>
  1983 0000173B 6572666C6F7720666C- <1>
  1984 00001744 6167207365742E0A00  <1>
  1985                              <1> 		
  1986 0000174D 426F756E6473206368- <1> err5	db "Bounds check:",10
  1987 00001756 65636B3A0A          <1>
  1988 0000175B 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1989 00001764 73736F72207265626F- <1>
  1990 0000176D 756E6465642066726F- <1>
  1991 00001776 6D206120424F554E44- <1>
  1992 0000177F 20696E737472756374- <1>
  1993 00001788 696F6E2072756E206F- <1>
  1994 00001791 6E20616E206F706572- <1>
  1995 0000179A 616E64207468617420- <1>
  1996 000017A3 776173206F75740A    <1>
  1997 000017AB 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1998 000017B4 2E0A00              <1>
  1999                              <1> 		
  2000 000017B7 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2001 000017C0 70636F64653A0A      <1>
  2002 000017C7 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2003 000017D0 73736F722068617320- <1>
  2004 000017D9 6E6F20696465612077- <1>
  2005 000017E2 686174206974207761- <1>
  2006 000017EB 7320747279696E6720- <1>
  2007 000017F4 746F20657865637574- <1>
  2008 000017FD 652E20446F6E277420- <1>
  2009 00001806 72756E205353453420- <1>
  2010 0000180F 636F64650A          <1>
  2011 00001814 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2012 0000181D 0A00                <1>
  2013                              <1> 		
  2014 0000181F 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2015 00001828 6F72206E6F74206176- <1>
  2016 00001831 61696C61626C653A0A  <1>
  2017 0000183A 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2018 00001843 206B6E6F7720746865- <1>
  2019 0000184C 7920646F6E2774206D- <1>
  2020 00001855 616B652074686F7365- <1>
  2021 0000185E 20616E796D6F726521- <1>
  2022 00001867 0A00                <1>
  2023                              <1> 		
  2024 00001869 446F75626C65206661- <1> err8	db "Double fault:",10
  2025 00001872 756C743A0A          <1>
  2026 00001877 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2027 00001880 74696F6E2068616E64- <1>
  2028 00001889 6C657220636F756C64- <1>
  2029 00001892 206E6F742068616E64- <1>
  2030 0000189B 6C6520746861742069- <1>
  2031 000018A4 7420636F756C64206E- <1>
  2032 000018AD 6F742068616E646C65- <1>
  2033 000018B6 20616E206578636570- <1>
  2034 000018BF 74696F6E2E0A00      <1>
  2035                              <1> 		
  2036 000018C6 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2037 000018CF 6F72207365676D656E- <1>
  2038 000018D8 74206F76657272756E- <1>
  2039 000018E1 3A0A00              <1>
  2040 000018E4 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2041 000018ED 722068617070656E73- <1>
  2042 000018F6 20696E206D6F646572- <1>
  2043 000018FF 6E20636F6D70757465- <1>
  2044 00001908 72732C20616E64206E- <1>
  2045 00001911 657665722073686F75- <1>
  2046 0000191A 6C642E0A00          <1>
  2047                              <1> 
  2048 0000191F 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2049 00001928 53533A0A            <1>
  2050 0000192C 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2051 00001935 686174207761732073- <1>
  2052 0000193E 776974636865642074- <1>
  2053 00001947 6F20697320696E7661- <1>
  2054 00001950 6C69642E204E6F7468- <1>
  2055 00001959 696E672066756E6E79- <1>
  2056 00001962 20686572652E0A00    <1>
  2057                              <1> 		
  2058 0000196A 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2059 00001973 6F742070726573656E- <1>
  2060 0000197C 743A0A              <1>
  2061 0000197F 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2062 00001988 6E7420626974206F66- <1>
  2063 00001991 20746865207365676D- <1>
  2064 0000199A 656E74206465736372- <1>
  2065 000019A3 6970746F7220697320- <1>
  2066 000019AC 73657420746F207A65- <1>
  2067 000019B5 726F2E0A00          <1>
  2068                              <1> 		
  2069 000019BA 537461636B20657863- <1> err12	db "Stack exception:",10
  2070 000019C3 657074696F6E3A0A    <1>
  2071 000019CB 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2072 000019D4 7363726970746F7220- <1>
  2073 000019DD 697320696E76616C69- <1>
  2074 000019E6 64206F72206E6F7420- <1>
  2075 000019EF 70726573656E74206F- <1>
  2076 000019F8 7220697473206C696D- <1>
  2077 00001A01 697420697320746F6F- <1>
  2078 00001A0A 20736D616C6C2E0A00  <1>
  2079                              <1> 		
  2080 00001A13 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2081 00001A1C 726F74656374696F6E- <1>
  2082 00001A25 2076696F6C6174696F- <1>
  2083 00001A2E 6E3A0A              <1>
  2084 00001A31 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2085 00001A3A 746564207468652063- <1>
  2086 00001A43 6F6D70757465722E20- <1>
  2087 00001A4C 537465702061776179- <1>
  2088 00001A55 20736C6F776C792E20- <1>
  2089 00001A5E 546865204642492069- <1>
  2090 00001A67 73206F6E2069747320- <1>
  2091 00001A70 7761792E0A00        <1>
  2092                              <1> 		
  2093 00001A76 50616765206661756C- <1> err14	db "Page fault:",10
  2094 00001A7F 743A0A              <1>
  2095 00001A82 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2096 00001A8B 746861742077617320- <1>
  2097 00001A94 726571756573746564- <1>
  2098 00001A9D 20776173206E6F7420- <1>
  2099 00001AA6 617661696C61626C65- <1>
  2100 00001AAF 2E0A00              <1>
  2101                              <1> 		
  2102 00001AB2 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2103 00001ABB 666F7220506C616E20- <1>
  2104 00001AC4 523A0A              <1>
  2105 00001AC7 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2106 00001AD0 727275707420697320- <1>
  2107 00001AD9 726573657276656420- <1>
  2108 00001AE2 666F72207573616765- <1>
  2109 00001AEB 206F6E6C7920627920- <1>
  2110 00001AF4 746865206D696C6974- <1>
  2111 00001AFD 617279207768656E20- <1>
  2112 00001B06 6974206973206E6563- <1>
  2113 00001B0F 6573736172790A      <1>
  2114 00001B16 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2115 00001B1F 746520612066756C6C- <1>
  2116 00001B28 2D7363616C6520636F- <1>
  2117 00001B31 7570206427C3A97461- <1>
  2118 00001B3A 742E0A00            <1>
  2119                              <1> 		
  2120 00001B3E 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2121 00001B47 68656C6C206A757374- <1>
  2122 00001B50 2068617070656E6564- <1>
  2123 00001B59 3F2049732065766572- <1>
  2124 00001B62 796F6E65206F6B6179- <1>
  2125 00001B6B 3F2048617264206472- <1>
  2126 00001B74 6976653F2056696465- <1>
  2127 00001B7D 6F20636172643F0A    <1>
  2128 00001B85 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2129 00001B8E 726520796F75207468- <1>
  2130 00001B97 6572653F0A00        <1>
  2131                              <1> %else
  2132                              <1> unhand:	
  2133                              <1> 	%assign i 0
  2134                              <1> 	%rep 32
  2135                              <1> 	mov byte [intprob], i
  2136                              <1> 	jmp unhand2
  2137                              <1> 	%assign i i+1
  2138                              <1> 	%endrep
  2139                              <1> unhand2:
  2140                              <1> 	cmp byte [intprob], 3
  2141                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2142                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2143                              <1> 					;CD is the machine instruction for interrupt
  2144                              <1> 					;DEAD shows that the program died because of the int
  2145                              <1> 	mov bl, [intprob]
  2146                              <1> 	jmp exitprog
  2147                              <1> intprob db 0
  2148                              <1> %endif
  2149                                      %include "source/ints.asm"
  2150                              <1> int30h:	;for great justice
  2151 00001B9D 80FC00              <1> 	cmp ah, 0
  2152 00001BA0 0F849A000000        <1> 	je near exitprog   ;kills app
  2153 00001BA6 80FC01              <1> 	cmp ah, 1
  2154 00001BA9 0F8416010000        <1> 	je near prntstr  ;print string
  2155 00001BAF 80FC02              <1> 	cmp ah, 2
  2156 00001BB2 0F84B3010000        <1> 	je near readstr	;read string
  2157 00001BB8 80FC03              <1> 	cmp ah, 3
  2158 00001BBB 0F84D3010000        <1> 	je near clearscrn	;clear screen
  2159 00001BC1 80FC04              <1> 	cmp ah, 4
  2160 00001BC4 0F8442020000        <1> 	je near prntreadstr	;read and print string
  2161 00001BCA 80FC05              <1> 	cmp ah, 5
  2162 00001BCD 0F84EF060000        <1> 	je near readchar	;get char
  2163 00001BD3 80FC06              <1> 	cmp ah, 6
  2164 00001BD6 0F8452070000        <1> 	je near prntchar	;print char
  2165 00001BDC 80FC07              <1> 	cmp ah, 7
  2166 00001BDF 0F8453090000        <1> 	je near openfile	;read file
  2167                              <1> ;	cmp ah, 8
  2168                              <1> ;	je near closefile	;close file
  2169 00001BE5 80FC09              <1> 	cmp ah, 9
  2170 00001BE8 0F8454090000        <1> 	je near num2str	;convert number to string
  2171 00001BEE 80FC0A              <1> 	cmp ah, 10
  2172 00001BF1 0F8463090000        <1> 	je near str2num	;convert string to number
  2173                              <1> %ifdef threads.included
  2174 00001BF7 80FC0B              <1> 	cmp ah, 11
  2175 00001BFA 0F8466090000        <1> 	je near forkthread	;create thread
  2176                              <1> %endif
  2177 00001C00 80FC0C              <1> 	cmp ah, 12
  2178 00001C03 0F84250A0000        <1> 	je near gettime	;get time
  2179 00001C09 80FC0D              <1> 	cmp ah, 13
  2180 00001C0C 0F84310A0000        <1> 	je near settime	;set time
  2181 00001C12 80FC0E              <1> 	cmp ah, 14
  2182 00001C15 0F84380A0000        <1> 	je near runcmd	;run program
  2183 00001C1B 80FC0F              <1> 	cmp ah, 15
  2184 00001C1E 0F84440A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2185 00001C24 80FC10              <1> 	cmp ah, 16
  2186 00001C27 0F84660A0000        <1> 	je near hooksig	;hook code to a signal
  2187                              <1> %ifdef gui.included
  2188 00001C2D 80FC11              <1> 	cmp ah, 17
  2189 00001C30 0F846D0A0000        <1> 	je near guiint	;GUI operations
  2190                              <1> %endif
  2191                              <1> %ifdef sound.included
  2192 00001C36 80FC12              <1> 	cmp ah, 18
  2193 00001C39 0F84E80B0000        <1> 	je near soundint	;sound operations
  2194                              <1> %endif
  2195                              <1> %ifdef network.included
  2196                              <1> 	cmp ah, 19
  2197                              <1> 	je near netint	;networking operations
  2198                              <1> %endif
  2199 00001C3F CF                  <1> 	iret
  2200                              <1> 
  2201                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2202                              <2> exitprog:
  2203 00001C40 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2204 00001C44 8ED8                <2> 	mov ds, ax
  2205 00001C46 8EC0                <2> 	mov es, ax
  2206 00001C48 8EE0                <2> 	mov fs, ax
  2207 00001C4A 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2208 00001C4E 8EE8                <2> 	mov gs, ax
  2209 00001C50 C705[15670000]0000- <2> 	mov dword [currentthread], 0
  2210 00001C58 0000                <2>
  2211 00001C5A C705[10670000]0400- <2> 	mov dword [lastthread], 4
  2212 00001C62 0000                <2>
  2213 00001C64 C605[14670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2214 00001C6B 8B25[08AE0300]      <2> 	mov esp, [previousstack] ;and this
  2215 00001C71 83FB00              <2> 	cmp ebx, 0
  2216 00001C74 0F8501000000        <2> 	jne near .error
  2217 00001C7A C3                  <2> 	ret
  2218                              <2> .error:
  2219 00001C7B 89D9                <2> 	mov ecx, ebx
  2220 00001C7D B006                <2> 	mov al, 6
  2221 00001C7F A2[E3300000]        <2> 	mov [firsthexshown], al
  2222 00001C84 51                  <2> 	push ecx
  2223 00001C85 BE[A01C0000]        <2> 	mov esi, .msg1
  2224 00001C8A E855000000          <2> 	call printhighlight
  2225 00001C8F 59                  <2> 	pop ecx
  2226 00001C90 E863140000          <2> 	call showhex
  2227 00001C95 BE[B51C0000]        <2> 	mov esi, .msg2
  2228 00001C9A E845000000          <2> 	call printhighlight
  2229 00001C9F C3                  <2> 	ret
  2230                              <2> 	
  2231 00001CA0 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2232 00001CA9 7461747573206F6620- <2>
  2233 00001CB2 307800              <2>
  2234 00001CB5 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2235 00001CBE 726E65642E0A00      <2>
  2236                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2237                              <2> prntstr:
  2238 00001CC5 30E4                <2> xor ah, ah
  2239 00001CC7 E82D000000          <2> call printint
  2240 00001CCC E9C9E5FFFF          <2> jmp timerinterrupt
  2241                              <2> 
  2242                              <2> 	printquiet:
  2243 00001CD1 6631C0              <2> 		xor ax, ax
  2244 00001CD4 66A3[691D0000]      <2> 		mov [endkeyprint], ax
  2245 00001CDA 66BB0700            <2> 		mov bx, 7
  2246 00001CDE E82F000000          <2> 		call printint.b
  2247 00001CE3 C3                  <2> 		ret
  2248                              <2> 
  2249                              <2> 	printhighlight:
  2250 00001CE4 6631C0              <2> 		xor ax, ax
  2251 00001CE7 66BBF000            <2> 		mov bx, 0xF0
  2252 00001CEB EB0C                <2> 		jmp printint
  2253                              <2> 
  2254                              <2> 	printline:
  2255 00001CED BE[C2840000]        <2> 		mov esi, line
  2256                              <2>     print:
  2257 00001CF2 6631C0              <2> 		xor ax, ax
  2258 00001CF5 66BB0700            <2> 		mov bx, 7
  2259                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2260 00001CF9 56                  <2> 		push esi
  2261 00001CFA 66A3[691D0000]      <2> 		mov [endkeyprint], ax
  2262 00001D00 E80D000000          <2> 		call .b
  2263 00001D05 89F1                <2> 		mov ecx, esi
  2264 00001D07 5F                  <2> 		pop edi
  2265 00001D08 29F9                <2> 		sub ecx, edi
  2266 00001D0A 51                  <2> 		push ecx
  2267 00001D0B E81C0B0000          <2> 		call termcopy
  2268 00001D10 59                  <2> 		pop ecx
  2269 00001D11 C3                  <2> 		ret
  2270                              <2> 	.b:	
  2271 00001D12 53                  <2> 		push ebx
  2272 00001D13 31C0                <2> 		xor eax, eax
  2273 00001D15 8A06                <2> 		mov al, [esi]
  2274 00001D17 3CFF                <2> 		cmp al, 0xFF
  2275 00001D19 7503                <2> 		jne .notnull
  2276 00001D1B 5B                  <2> 		pop ebx
  2277 00001D1C EB47                <2> 		jmp .noprint
  2278                              <2> 	.notnull:
  2279 00001D1E 3CC0                <2> 		cmp al, 0xC0
  2280 00001D20 722E                <2> 		jb .doneutf
  2281 00001D22 3CE0                <2> 		cmp al, 0xE0
  2282 00001D24 7217                <2> 		jb .two
  2283 00001D26 46                  <2> 		inc esi
  2284 00001D27 8A2E                <2> 		mov ch, [esi]
  2285 00001D29 46                  <2> 		inc esi
  2286 00001D2A 8A0E                <2> 		mov cl, [esi]
  2287 00001D2C C0E004              <2> 		shl al, 4
  2288 00001D2F C0E102              <2> 		shl cl, 2
  2289 00001D32 66C1E902            <2> 		shr cx, 2
  2290 00001D36 08C5                <2> 		or ch, al
  2291 00001D38 6689C8              <2> 		mov ax, cx
  2292 00001D3B EB13                <2> 		jmp .doneutf
  2293                              <2> 	.two:
  2294 00001D3D 8A2E                <2> 		mov ch, [esi]
  2295 00001D3F 46                  <2> 		inc esi
  2296 00001D40 8A0E                <2> 		mov cl, [esi]
  2297 00001D42 66C1E102            <2> 		shl cx, 2
  2298 00001D46 C0ED02              <2> 		shr ch, 2
  2299 00001D49 66C1E902            <2> 		shr cx, 2
  2300 00001D4D 6689C8              <2> 		mov ax, cx
  2301                              <2> 	.doneutf:
  2302 00001D50 5B                  <2> 		pop ebx
  2303 00001D51 663B05[691D0000]    <2> 		cmp ax, [endkeyprint]
  2304 00001D58 740E                <2> 		je .done
  2305 00001D5A 663DFFFE            <2> 		cmp ax, 0xFEFF
  2306 00001D5E 7405                <2> 		je .noprint
  2307 00001D60 E8F6050000          <2> 		call prcharq
  2308                              <2> 	.noprint:
  2309 00001D65 46                  <2> 		inc esi
  2310 00001D66 EBAA                <2> 		jmp .b
  2311                              <2> 	.done:
  2312 00001D68 C3                  <2> 		ret
  2313                              <2> 
  2314 00001D69 0000                <2> endkeyprint dw 0
  2315                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2316                              <2> readstr:
  2317 00001D6B E805000000          <2> call readint
  2318 00001D70 E925E5FFFF          <2> jmp timerinterrupt
  2319                              <2> 
  2320                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2321 00001D75 89C3                <2> 		mov ebx, eax
  2322                              <2> 	.b:
  2323 00001D77 53                  <2> 		push ebx
  2324 00001D78 57                  <2> 		push edi
  2325 00001D79 56                  <2> 		push esi
  2326 00001D7A 30C0                <2> 		xor al, al
  2327 00001D7C E84D050000          <2> 		call rdcharint
  2328 00001D81 5E                  <2> 		pop esi
  2329 00001D82 8806                <2> 		mov [esi], al
  2330 00001D84 46                  <2> 		inc esi
  2331 00001D85 5F                  <2> 		pop edi
  2332 00001D86 5B                  <2> 		pop ebx
  2333 00001D87 39FE                <2> 		cmp esi, edi
  2334 00001D89 7304                <2> 		jae .done
  2335 00001D8B 38D8                <2> 		cmp al, bl
  2336 00001D8D 75E8                <2> 		jne .b
  2337                              <2> 	.done:
  2338 00001D8F 4E                  <2> 		dec esi
  2339 00001D90 C60600              <2> 		mov byte [esi], 0
  2340 00001D93 C3                  <2> 		ret
  2341                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2342                              <2> clearscrn:
  2343 00001D94 E805000000          <2> call clear
  2344 00001D99 E9FCE4FFFF          <2> jmp timerinterrupt
  2345                              <2> %ifdef io.serial
  2346                              <2> clear:
  2347                              <2> 	mov esi, .str
  2348                              <2> 	call print
  2349                              <2> 	ret
  2350                              <2> .str db 27,"[2J",27,"[f",0
  2351                              <2> %else
  2352                              <2> clear:
  2353 00001D9E 668B0D[32250000]    <2> 		mov cx, [charxy]
  2354 00001DA5 BF[9CDF2B00]        <2> 		mov edi, videobuf
  2355 00001DAA 31C0                <2> 		xor eax, eax
  2356 00001DAC A3[28250000]        <2> 		mov [linebeginpos], eax
  2357 00001DB1 A3[2C250000]        <2> 		mov [videobufpos], eax
  2358 00001DB6 6631D2              <2> 		xor dx, dx
  2359 00001DB9 66A3[30250000]      <2> 		mov [charpos], ax
  2360 00001DBF 66B80700            <2> 		mov ax, 7
  2361 00001DC3 C1E010              <2> 		shl eax, 16
  2362                              <2> 	clearb:
  2363 00001DC6 8907                <2> 		mov [edi], eax
  2364 00001DC8 83C704              <2> 		add edi, 4
  2365 00001DCB FEC9                <2> 		dec cl
  2366 00001DCD 80F900              <2> 		cmp cl, 0
  2367 00001DD0 75F4                <2> 		jne clearb
  2368 00001DD2 8A0D[32250000]      <2> 		mov cl, [charxy]
  2369 00001DD8 FECD                <2> 		dec ch
  2370 00001DDA 80FD00              <2> 		cmp ch, 0
  2371 00001DDD 75E7                <2> 		jne clearb
  2372                              <2> 	cleardouble:
  2373 00001DDF BF[E4B42C00]        <2> 		mov edi, videobuf2
  2374 00001DE4 668B0D[32250000]    <2> 		mov cx, [charxy]
  2375 00001DEB 31C0                <2> 		xor eax, eax
  2376                              <2> 	clearc:
  2377 00001DED 8907                <2> 		mov [edi], eax
  2378 00001DEF 83C704              <2> 		add edi, 4
  2379 00001DF2 FEC9                <2> 		dec cl
  2380 00001DF4 80F900              <2> 		cmp cl, 0
  2381 00001DF7 75F4                <2> 		jne clearc
  2382 00001DF9 8A0D[32250000]      <2> 		mov cl, [charxy]
  2383 00001DFF FECD                <2> 		dec ch
  2384 00001E01 80FD00              <2> 		cmp ch, 0
  2385 00001E04 75E7                <2> 		jne clearc
  2386 00001E06 E8210A0000          <2> 		call termcopy
  2387 00001E0B C3                  <2> 		ret
  2388                              <2> %endif
  2389                              <2> 		
  2390                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2391                              <2> prntreadstr:
  2392 00001E0C E80B000000          <2> call rdprint
  2393 00001E11 E984E4FFFF          <2> jmp timerinterrupt
  2394                              <2> 
  2395                              <2> readline:
  2396 00001E16 B00A                <2>   mov al, 10
  2397 00001E18 66BB0700            <2>   mov bx, 7
  2398                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2399 00001E1C E80F000000          <2> 	call rdprintdos
  2400 00001E21 50                  <2> 	push eax
  2401 00001E22 A0[AD220000]        <2> 	mov al, [endkeyrdpr]
  2402 00001E27 30E4                <2> 	xor ah, ah
  2403 00001E29 E816050000          <2> 	call prcharint
  2404 00001E2E 58                  <2> 	pop eax
  2405 00001E2F C3                  <2> 	ret
  2406                              <2> 
  2407                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2408 00001E30 8935[B7220000]      <2> 		mov [buftxtloc], esi
  2409 00001E36 A2[AD220000]        <2> 		mov [endkeyrdpr], al
  2410 00001E3B 66891D[AF220000]    <2> 		mov [modkeyrdpr], bx
  2411 00001E42 8935[B1220000]      <2> 		mov [firstesirdpr], esi
  2412 00001E48 893D[BB220000]      <2> 		mov [endbufferrdpr], edi
  2413 00001E4E 8B3D[388A2D00]      <2> 		mov edi, [commandsentered]
  2414 00001E54 893D[348A2D00]      <2> 		mov [commandlistentries], edi
  2415                              <2> 	rdprintb:
  2416 00001E5A 56                  <2> 		push esi
  2417 00001E5B B001                <2> 		mov al, 1
  2418 00001E5D E86C040000          <2> 		call rdcharint
  2419 00001E62 8A25[2A230000]      <2> 		mov ah, [lastkey + 2]
  2420 00001E68 88E1                <2> 		mov cl, ah
  2421 00001E6A 5E                  <2> 		pop esi
  2422                              <2> %ifdef io.serial
  2423                              <2> 		cmp ah, 0x41
  2424                              <2> 		je near rdprup
  2425                              <2> 		cmp ah, 0x42
  2426                              <2> 		je near rdprdown
  2427                              <2> 		cmp ah, 0x43
  2428                              <2> 		je near rdprright
  2429                              <2> 		cmp ah, 0x44
  2430                              <2> 		je near rdprleft
  2431                              <2> 		cmp ah, 0x31
  2432                              <2> 		je near rdprhome
  2433                              <2> 		cmp ah, 0x48
  2434                              <2> 		je near rdprhome
  2435                              <2> 		cmp ah, 0x46
  2436                              <2> 		je near rdprend
  2437                              <2> 		cmp ah, 0x33
  2438                              <2> 		je near rdprdel
  2439                              <2> 		cmp ah, 0x34
  2440                              <2> 		je near rdprend
  2441                              <2> %else
  2442 00001E6B 803D[CE5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2443 00001E72 753F                <2> 		jne notspecialrdprnt
  2444 00001E74 80FC53              <2> 		cmp ah, 0x53
  2445 00001E77 0F849C030000        <2> 		je near rdprdel
  2446 00001E7D 80FC47              <2> 		cmp ah, 0x47
  2447 00001E80 0F8475010000        <2> 		je near rdprhome
  2448 00001E86 80FC4F              <2> 		cmp ah, 0x4F
  2449 00001E89 0F848B010000        <2> 		je near rdprend
  2450 00001E8F 80FC50              <2> 		cmp ah, 0x50
  2451 00001E92 0F841B020000        <2> 		je near rdprdown
  2452 00001E98 80FC4D              <2> 		cmp ah, 0x4D
  2453 00001E9B 0F84B8010000        <2> 		je near rdprright
  2454 00001EA1 80FC4B              <2> 		cmp ah, 0x4B
  2455 00001EA4 0F848D010000        <2> 		je near rdprleft
  2456 00001EAA 80FC48              <2> 		cmp ah, 0x48
  2457 00001EAD 0F8440020000        <2> 		je near rdprup
  2458                              <2> 	notspecialrdprnt:
  2459                              <2> %endif
  2460 00001EB3 66A1[28230000]      <2> 		mov ax, [lastkey]
  2461 00001EB9 6683F808            <2> 		cmp ax, 8
  2462 00001EBD 0F848B030000        <2> 		je near rdprbscheck
  2463 00001EC3 6683F800            <2> 		cmp ax, 0
  2464 00001EC7 7491                <2> 		je rdprintb
  2465 00001EC9 80F900              <2> 		cmp cl, 0
  2466 00001ECC 748C                <2> 		je rdprintb
  2467 00001ECE 663D8000            <2> 		cmp ax, 0x80
  2468 00001ED2 7251                <2> 		jb .normal
  2469 00001ED4 663D0008            <2> 		cmp ax, 0x800
  2470 00001ED8 731E                <2> 		jae .three
  2471 00001EDA 46                  <2> 		inc esi
  2472 00001EDB 3B35[BB220000]      <2> 		cmp esi, [endbufferrdpr]
  2473 00001EE1 0F83D1000000        <2> 		jae near donerdprinc
  2474 00001EE7 66C1E002            <2> 		shl ax, 2
  2475 00001EEB C0E802              <2> 		shr al, 2
  2476 00001EEE 0C80                <2> 		or al, 10000000b
  2477 00001EF0 80CCC0              <2> 		or ah, 11000000b
  2478 00001EF3 8866FF              <2> 		mov [esi - 1], ah
  2479 00001EF6 EB2D                <2> 		jmp .normal
  2480                              <2> .three:	
  2481 00001EF8 83C602              <2> 		add esi, 2
  2482 00001EFB 3B35[BB220000]      <2> 		cmp esi, [endbufferrdpr]
  2483 00001F01 0F83B1000000        <2> 		jae near donerdprinc
  2484 00001F07 88E1                <2> 		mov cl, ah
  2485 00001F09 C0E904              <2> 		shr cl, 4
  2486 00001F0C 80C9E0              <2> 		or cl, 11100000b
  2487 00001F0F 884EFE              <2> 		mov [esi - 2], cl
  2488 00001F12 66C1E004            <2> 		shl ax, 4
  2489 00001F16 66C1E802            <2> 		shr ax, 2
  2490 00001F1A 80CC80              <2> 		or ah, 10000000b
  2491 00001F1D C0E802              <2> 		shr al, 2
  2492 00001F20 0C80                <2> 		or al, 10000000b
  2493 00001F22 8866FF              <2> 		mov [esi - 1], ah
  2494                              <2> .normal:
  2495 00001F25 8806                <2> 		mov [esi], al
  2496 00001F27 46                  <2> 		inc esi
  2497 00001F28 66A1[28230000]      <2> 		mov ax, [lastkey]
  2498                              <2> 	bscheckequal:
  2499 00001F2E 668B1D[AF220000]    <2> 		mov bx, [modkeyrdpr]
  2500 00001F35 803D[B6220000]00    <2> 		cmp byte [txtmask], 0
  2501 00001F3C 7407                <2> 		je nomasktxt
  2502 00001F3E 30E4                <2> 		xor ah, ah
  2503 00001F40 A0[B6220000]        <2> 		mov al, [txtmask]
  2504                              <2> 	nomasktxt:
  2505 00001F45 56                  <2> 		push esi
  2506 00001F46 66A3[AB220000]      <2> 		mov [axcache], ax
  2507 00001F4C 668B1D[AD220000]    <2> 		mov bx, [endkeyrdpr]
  2508 00001F53 6639D8              <2> 		cmp ax, bx
  2509 00001F56 7432                <2> 		je nobackprintbuftxt2
  2510 00001F58 E8E7030000          <2> 		call prcharint
  2511 00001F5D BE[88C00300]        <2> 		mov esi, buftxt2
  2512 00001F62 E86AFDFFFF          <2> 		call printquiet
  2513 00001F67 66B82000            <2> 		mov ax, " "
  2514 00001F6B E8EB030000          <2> 		call prcharq
  2515 00001F70 66B80800            <2> 		mov ax, 8
  2516 00001F74 81FE[88C00300]      <2> 		cmp esi, buftxt2
  2517 00001F7A 740E                <2> 		je nobackprintbuftxt2
  2518                              <2> 	backprintbuftxt2:
  2519 00001F7C E8DA030000          <2> 		call prcharq
  2520 00001F81 4E                  <2> 		dec esi
  2521 00001F82 81FE[88C00300]      <2> 		cmp esi, buftxt2
  2522 00001F88 77F2                <2> 		ja backprintbuftxt2
  2523                              <2> 	nobackprintbuftxt2:
  2524 00001F8A 6683F80A            <2> 		cmp ax, 10
  2525 00001F8E 7405                <2> 		je nonobackprint
  2526 00001F90 E8AF030000          <2> 		call prcharint
  2527                              <2> 	nonobackprint:
  2528 00001F95 5E                  <2> 		pop esi
  2529 00001F96 3B35[BB220000]      <2> 		cmp esi, [endbufferrdpr]
  2530 00001F9C 0F8316000000        <2> 		jae near donerdprinc
  2531 00001FA2 66A1[AB220000]      <2> 		mov ax, [axcache]
  2532 00001FA8 8A25[AD220000]      <2> 		mov ah, [endkeyrdpr]
  2533 00001FAE 38E0                <2> 		cmp al, ah
  2534 00001FB0 0F85A4FEFFFF        <2> 		jne rdprintb
  2535 00001FB6 EB01                <2> 		jmp donerdprint
  2536                              <2> 	donerdprinc:
  2537 00001FB8 46                  <2> 		inc esi
  2538                              <2> 	donerdprint:
  2539 00001FB9 4E                  <2> 		dec esi
  2540 00001FBA BF[88C00300]        <2> 		mov edi, buftxt2
  2541                              <2> 	copylaterstuff:
  2542 00001FBF 8A07                <2> 		mov al, [edi]
  2543 00001FC1 3C00                <2> 		cmp al, 0
  2544 00001FC3 7406                <2> 		je nocopylaterstuff
  2545 00001FC5 8806                <2> 		mov [esi], al
  2546 00001FC7 47                  <2> 		inc edi
  2547 00001FC8 46                  <2> 		inc esi
  2548 00001FC9 EBF4                <2> 		jmp copylaterstuff
  2549                              <2> 	nocopylaterstuff:
  2550 00001FCB C60600              <2> 		mov byte [esi], 0
  2551 00001FCE E80B000000          <2> 		call clearbuftxt2
  2552 00001FD3 89F1                <2> 		mov ecx, esi
  2553 00001FD5 8B3D[B1220000]      <2> 		mov edi, [firstesirdpr]
  2554 00001FDB 29F9                <2> 		sub ecx, edi
  2555 00001FDD C3                  <2> 		ret
  2556                              <2> 	
  2557                              <2> 	clearbuftxt2:
  2558 00001FDE 30C0                <2> 		xor al, al
  2559 00001FE0 BF[88C00300]        <2> 		mov edi, buftxt2
  2560                              <2> 	clearbuftxt2lp:
  2561 00001FE5 8807                <2> 		mov [edi], al
  2562 00001FE7 47                  <2> 		inc edi
  2563 00001FE8 81FF[88C40300]      <2> 		cmp edi, buftxt
  2564 00001FEE 75F5                <2> 		jne clearbuftxt2lp
  2565 00001FF0 C3                  <2> 		ret
  2566                              <2> 	
  2567                              <2> 	rdprintb2:
  2568 00001FF1 E836080000          <2> 		call termcopy
  2569 00001FF6 E95FFEFFFF          <2> 		jmp rdprintb
  2570                              <2> 	
  2571                              <2> 	rdprhome:
  2572 00001FFB 3B35[B7220000]      <2> 		cmp esi, [buftxtloc]
  2573 00002001 0F84EAFFFFFF        <2> 		je near rdprintb2
  2574 00002007 BF[88C00300]        <2> 		mov edi, buftxt2
  2575 0000200C 8A07                <2> 		mov al, [edi]
  2576 0000200E E86A020000          <2> 		call shiftbuftxt2
  2577 00002013 E843030000          <2> 		call prcharq
  2578 00002018 EBE1                <2> 		jmp rdprhome
  2579                              <2> 		
  2580                              <2> 	rdprend:
  2581 0000201A BF[88C00300]        <2> 		mov edi, buftxt2
  2582 0000201F 8A07                <2> 		mov al, [edi]
  2583 00002021 3C00                <2> 		cmp al, 0
  2584 00002023 0F84C8FFFFFF        <2> 		je near rdprintb2
  2585 00002029 8806                <2> 		mov [esi], al
  2586 0000202B E849000000          <2> 		call shiftbuftxt2lft
  2587 00002030 E826030000          <2> 		call prcharq
  2588 00002035 EBE3                <2> 		jmp rdprend
  2589                              <2> 	
  2590                              <2> 	rdprleft:
  2591 00002037 3B35[B7220000]      <2> 		cmp esi, [buftxtloc]
  2592 0000203D 0F8417FEFFFF        <2> 		je near rdprintb
  2593 00002043 BF[88C00300]        <2> 		mov edi, buftxt2
  2594 00002048 8A07                <2> 		mov al, [edi]
  2595 0000204A E82E020000          <2> 		call shiftbuftxt2
  2596 0000204F E8F0020000          <2> 		call prcharint
  2597 00002054 E901FEFFFF          <2> 		jmp rdprintb
  2598                              <2> 		
  2599                              <2> 	rdprright:
  2600 00002059 BF[88C00300]        <2> 		mov edi, buftxt2
  2601 0000205E 8A07                <2> 		mov al, [edi]
  2602 00002060 3C00                <2> 		cmp al, 0
  2603 00002062 0F84F2FDFFFF        <2> 		je near rdprintb
  2604 00002068 8806                <2> 		mov [esi], al
  2605 0000206A E80A000000          <2> 		call shiftbuftxt2lft
  2606 0000206F E8D0020000          <2> 		call prcharint
  2607 00002074 E9E1FDFFFF          <2> 		jmp rdprintb
  2608                              <2> 		
  2609                              <2> 	shiftbuftxt2lft:
  2610 00002079 55                  <2> 		push ebp
  2611 0000207A 89FD                <2> 		mov ebp, edi
  2612                              <2> 	.lp:
  2613 0000207C 3C00                <2> 		cmp al, 0
  2614 0000207E 7408                <2> 		je noshiftbuftxt2lft
  2615 00002080 47                  <2> 		inc edi
  2616 00002081 8A07                <2> 		mov al, [edi]
  2617 00002083 8847FF              <2> 		mov [edi - 1], al
  2618 00002086 EBF4                <2> 		jmp .lp
  2619                              <2> 	noshiftbuftxt2lft:
  2620 00002088 8A4500              <2> 		mov al, [ebp]
  2621 0000208B 5D                  <2> 		pop ebp
  2622 0000208C 3CC0                <2> 		cmp al, 0xC0
  2623 0000208E 7304                <2> 		jae .nofix
  2624 00002090 3C80                <2> 		cmp al, 0x80
  2625 00002092 73E5                <2> 		jae shiftbuftxt2lft
  2626                              <2> 	.nofix:
  2627 00002094 8A06                <2> 		mov al, [esi]
  2628 00002096 30E4                <2> 		xor ah, ah
  2629 00002098 46                  <2> 		inc esi
  2630 00002099 668B1D[AF220000]    <2> 		mov bx, [modkeyrdpr]
  2631 000020A0 C3                  <2> 		ret
  2632                              <2> 		
  2633                              <2> 	rdprdownbck:
  2634 000020A1 FECC                <2> 		dec ah
  2635 000020A3 8825[B5220000]      <2> 		mov [commandedit], ah
  2636 000020A9 E884000000          <2> 		call rdprbckspc
  2637 000020AE E9A7FDFFFF          <2> 		jmp rdprintb
  2638                              <2> 	
  2639                              <2> 	rdprdown:
  2640 000020B3 8A25[B5220000]      <2> 		mov ah, [commandedit]
  2641 000020B9 80FC01              <2> 		cmp ah, 1
  2642 000020BC 0F8698FDFFFF        <2> 		jbe near rdprintb
  2643 000020C2 8B3D[388A2D00]      <2> 		mov edi, [commandsentered]
  2644 000020C8 3B3D[348A2D00]      <2> 		cmp edi, [commandlistentries]
  2645 000020CE 7615                <2> 		jbe .nofix
  2646 000020D0 8305[348A2D00]02    <2> 		add dword [commandlistentries], 2
  2647 000020D7 3B3D[348A2D00]      <2> 		cmp edi, [commandlistentries]
  2648 000020DD 7706                <2> 		ja .nofix
  2649 000020DF 893D[348A2D00]      <2> 		mov [commandlistentries], edi
  2650                              <2> 	.nofix:
  2651 000020E5 80FC02              <2> 		cmp ah, 2
  2652 000020E8 74B7                <2> 		je rdprdownbck
  2653 000020EA 80EC02              <2> 		sub ah, 2
  2654 000020ED 8825[B5220000]      <2> 		mov [commandedit], ah
  2655                              <2> 		
  2656                              <2> 	rdprup:
  2657 000020F3 3805[B5220000]      <2> 		cmp [commandedit], al
  2658 000020F9 0F845BFDFFFF        <2> 		je near rdprintb
  2659 000020FF 833D[348A2D00]00    <2> 		cmp dword [commandlistentries], 0
  2660 00002106 0F844EFDFFFF        <2> 		je near rdprintb
  2661 0000210C FF0D[348A2D00]      <2> 		dec dword [commandlistentries]
  2662                              <2> 	.lp:
  2663 00002112 BF[88C00300]        <2> 		mov edi, buftxt2
  2664 00002117 8A07                <2> 		mov al, [edi]
  2665 00002119 3C00                <2> 		cmp al, 0
  2666 0000211B 740E                <2> 		je .start
  2667 0000211D 8806                <2> 		mov [esi], al
  2668 0000211F E855FFFFFF          <2> 		call shiftbuftxt2lft
  2669 00002124 E832020000          <2> 		call prcharq
  2670 00002129 EBE7                <2> 		jmp .lp
  2671                              <2> 	.start:
  2672 0000212B E802000000          <2> 		call rdprbckspc
  2673 00002130 EB48                <2> 		jmp getcurrentcommandstr
  2674                              <2> 	rdprbckspc:
  2675 00002132 3B35[B7220000]      <2> 		cmp esi, [buftxtloc]
  2676 00002138 7432                <2> 		je nordprupbck
  2677                              <2> 	rdprupbckspclp:
  2678 0000213A 66B80800            <2> 		mov ax, 8
  2679 0000213E 668B1D[AF220000]    <2> 		mov bx, [modkeyrdpr]
  2680 00002145 E811020000          <2> 		call prcharq
  2681 0000214A 66B82000            <2> 		mov ax, ' '
  2682 0000214E E808020000          <2> 		call prcharq
  2683 00002153 66B80800            <2> 		mov ax, 8
  2684 00002157 E8FF010000          <2> 		call prcharq
  2685 0000215C 4E                  <2> 		dec esi
  2686 0000215D 3B35[B7220000]      <2> 		cmp esi, [buftxtloc]
  2687 00002163 7402                <2> 		je nordprupbck2
  2688 00002165 EBD3                <2> 		jmp rdprupbckspclp
  2689                              <2> 	nordprupbck2:
  2690 00002167 E8C0060000          <2> 		call termcopy
  2691                              <2> 	nordprupbck:
  2692 0000216C 8B3D[308A2D00]      <2> 		mov edi, [commandbufpos]
  2693 00002172 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2694 00002178 4F                  <2> 		dec edi
  2695 00002179 C3                  <2> 		ret
  2696                              <2> 	getcurrentcommandstr:
  2697 0000217A 8A25[B5220000]      <2> 		mov ah, [commandedit]
  2698 00002180 FE05[B5220000]      <2> 		inc byte [commandedit]
  2699                              <2> 	getccmdlp:
  2700 00002186 4F                  <2> 		dec edi
  2701 00002187 8A07                <2> 		mov al, [edi]
  2702 00002189 81FF[3C8A2D00]      <2> 		cmp edi, commandbuf
  2703 0000218F 722E                <2> 		jb getcmdresetcommandbuf
  2704 00002191 81EF[3C8A2D00]      <2> 		sub edi, commandbuf
  2705 00002197 3B3D[308A2D00]      <2> 		cmp edi, [commandbufpos]
  2706 0000219D 0F84B7FCFFFF        <2> 		je near rdprintb
  2707 000021A3 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2708 000021A9 3C00                <2> 		cmp al, 0
  2709 000021AB 75D9                <2> 		jne getccmdlp
  2710 000021AD FECC                <2> 		dec ah
  2711 000021AF 80FC00              <2> 		cmp ah, 0
  2712 000021B2 77D2                <2> 		ja getccmdlp
  2713 000021B4 47                  <2> 		inc edi
  2714 000021B5 81FF[3C9A2D00]      <2> 		cmp edi, commandbufend
  2715 000021BB 770A                <2> 		ja fixcmdbufb4morerdpr
  2716 000021BD EB15                <2> 		jmp morerdprup
  2717                              <2> 	getcmdresetcommandbuf:
  2718 000021BF BF[3C9A2D00]        <2> 		mov edi, commandbufend
  2719 000021C4 47                  <2> 		inc edi
  2720 000021C5 EBBF                <2> 		jmp getccmdlp
  2721                              <2> 	fixcmdbufb4morerdpr:
  2722 000021C7 4F                  <2> 		dec edi
  2723 000021C8 81EF[3C9A2D00]      <2> 		sub edi, commandbufend
  2724 000021CE 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2725                              <2> 	morerdprup:
  2726 000021D4 8A07                <2> 		mov al, [edi]
  2727 000021D6 47                  <2> 		inc edi
  2728 000021D7 81EF[3C8A2D00]      <2> 		sub edi, commandbuf
  2729 000021DD 3C00                <2> 		cmp al, 0
  2730 000021DF 0F840CFEFFFF        <2> 		je near rdprintb2
  2731 000021E5 3B3D[308A2D00]      <2> 		cmp edi, [commandbufpos]
  2732 000021EB 0F8300FEFFFF        <2> 		jae near rdprintb2
  2733 000021F1 81C7[3C8A2D00]      <2> 		add edi, commandbuf
  2734 000021F7 8806                <2> 		mov [esi], al
  2735 000021F9 46                  <2> 		inc esi
  2736 000021FA 57                  <2> 		push edi
  2737 000021FB 668B1D[AF220000]    <2> 		mov bx, [modkeyrdpr]
  2738 00002202 30E4                <2> 		xor ah, ah
  2739 00002204 E852010000          <2> 		call prcharq
  2740 00002209 5F                  <2> 		pop edi
  2741 0000220A 81FF[3C9A2D00]      <2> 		cmp edi, commandbufend
  2742 00002210 76C2                <2> 		jbe morerdprup
  2743 00002212 BF[3C8A2D00]        <2> 		mov edi, commandbuf
  2744 00002217 EBBB                <2> 		jmp morerdprup
  2745                              <2> 
  2746                              <2> 	rdprdel:
  2747 00002219 BF[88C00300]        <2> 		mov edi, buftxt2
  2748 0000221E 8A07                <2> 		mov al, [edi]
  2749 00002220 3C00                <2> 		cmp al, 0
  2750 00002222 0F8432FCFFFF        <2> 		je near rdprintb
  2751 00002228 8806                <2> 		mov [esi], al
  2752 0000222A 3C80                <2> 		cmp al, 0x80
  2753 0000222C 7216                <2> 		jb .fn
  2754                              <2> 	.lp:
  2755 0000222E 46                  <2> 		inc esi
  2756 0000222F 47                  <2> 		inc edi
  2757 00002230 8A07                <2> 		mov al, [edi]
  2758 00002232 3C00                <2> 		cmp al, 0
  2759 00002234 0F8420FCFFFF        <2> 		je near rdprintb
  2760 0000223A 8806                <2> 		mov [esi], al
  2761 0000223C 3C80                <2> 		cmp al, 0x80
  2762 0000223E 7204                <2> 		jb .fn
  2763 00002240 3CC0                <2> 		cmp al, 0xC0
  2764 00002242 72EA                <2> 		jb .lp
  2765                              <2> 	.fn:
  2766 00002244 E830FEFFFF          <2> 		call shiftbuftxt2lft
  2767 00002249 E80D010000          <2> 		call prcharq
  2768                              <2> 		
  2769                              <2> 	rdprbscheck:
  2770 0000224E 3B35[B1220000]      <2> 		cmp esi, [firstesirdpr]
  2771 00002254 0F8600FCFFFF        <2> 		jbe near rdprintb
  2772                              <2> 	goodbscheck:
  2773 0000225A 4E                  <2> 		dec esi
  2774 0000225B 8A46FF              <2> 		mov al, [esi - 1]
  2775 0000225E C60600              <2> 		mov byte [esi], 0
  2776 00002261 3CC0                <2> 		cmp al, 0xC0
  2777 00002263 7306                <2> 		jae .onemore
  2778 00002265 3C80                <2> 		cmp al, 0x80
  2779 00002267 73F1                <2> 		jae goodbscheck
  2780 00002269 EB04                <2> 		jmp .nomore
  2781                              <2> 	.onemore:
  2782 0000226B 4E                  <2> 		dec esi
  2783 0000226C C60600              <2> 		mov byte [esi], 0		
  2784                              <2> 	.nomore:
  2785 0000226F 668B1D[AF220000]    <2> 		mov bx, [modkeyrdpr]
  2786 00002276 B008                <2> 		mov al, 8
  2787 00002278 E9B1FCFFFF          <2> 		jmp bscheckequal
  2788                              <2> 		
  2789                              <2> 	shiftbuftxt2:
  2790 0000227D 55                  <2> 		push ebp
  2791 0000227E 89FD                <2> 		mov ebp, edi
  2792                              <2> 	.lp:
  2793 00002280 3C00                <2> 		cmp al, 0
  2794 00002282 7409                <2> 		je noshiftbuftxt2
  2795 00002284 47                  <2> 		inc edi
  2796 00002285 8A27                <2> 		mov ah, [edi]
  2797 00002287 8807                <2> 		mov [edi], al
  2798 00002289 88E0                <2> 		mov al, ah
  2799 0000228B EBF3                <2> 		jmp .lp
  2800                              <2> 	noshiftbuftxt2:
  2801 0000228D 8A4500              <2> 		mov al, [ebp]
  2802 00002290 5D                  <2> 		pop ebp
  2803 00002291 3CC0                <2> 		cmp al, 0xC0
  2804 00002293 7304                <2> 		jae .nofix
  2805 00002295 3C80                <2> 		cmp al, 0x80
  2806 00002297 73E4                <2> 		jae shiftbuftxt2
  2807                              <2> 	.nofix:
  2808 00002299 BF[88C00300]        <2> 		mov edi, buftxt2
  2809 0000229E 4E                  <2> 		dec esi
  2810 0000229F 8A06                <2> 		mov al, [esi]
  2811 000022A1 8807                <2> 		mov [edi], al
  2812 000022A3 C60600              <2> 		mov byte [esi], 0
  2813 000022A6 66B80800            <2> 		mov ax, 8
  2814 000022AA C3                  <2> 		ret
  2815                              <2> 		
  2816 000022AB 0000                <2> axcache dw 0
  2817 000022AD 0000                <2> endkeyrdpr dw 0
  2818 000022AF 0000                <2> modkeyrdpr dw 0
  2819 000022B1 00000000            <2> firstesirdpr dd 0
  2820 000022B5 00                  <2> commandedit db 0
  2821 000022B6 00                  <2> txtmask db 0
  2822 000022B7 00000000            <2> buftxtloc dd 0
  2823 000022BB 00000000            <2> endbufferrdpr dd 0
  2824 000022BF 082000              <2> backcursor db 8," ",0
  2825                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2826                              <2> readchar:
  2827 000022C2 E807000000          <2> 	call rdcharint
  2828 000022C7 E9CEDFFFFF          <2> 	jmp timerinterrupt
  2829                              <2> getchar:
  2830 000022CC 30C0                <2> 	xor al, al
  2831                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2832 000022CE 66C705[2C230000]01- <2> 		mov word [trans], 1
  2833 000022D6 00                  <2>
  2834 000022D7 3C00                <2> 		cmp al, 0
  2835 000022D9 7509                <2> 		jne transcheck
  2836 000022DB 66C705[2C230000]00- <2> 		mov word [trans], 0
  2837 000022E3 00                  <2>
  2838                              <2> 	transcheck:
  2839                              <2> 	%ifdef io.serial
  2840                              <2> 		call serial.receive
  2841                              <2> 		xor ah, ah
  2842                              <2> 		cmp al, 13
  2843                              <2> 		je rdenter
  2844                              <2> 	%else
  2845 000022E4 E808390000          <2> 		call getkey
  2846 000022E9 66A1[2A230000]      <2> 		mov ax, [lastkey + 2]
  2847 000022EF 6683F81C            <2> 		cmp ax, 0x1C
  2848 000022F3 7421                <2> 		je rdenter
  2849                              <2> 	%endif
  2850 000022F5 66A1[28230000]      <2> 		mov ax, [lastkey]
  2851 000022FB 668B1D[2C230000]    <2> 		mov bx, [trans]
  2852 00002302 803D[CE5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2853 00002309 7500                <2> 		jne nospecialtrans
  2854                              <2> 	nospecialtrans:
  2855 0000230B 6609C3              <2> 		or bx, ax
  2856 0000230E 6683FB00            <2> 		cmp bx, 0
  2857 00002312 74D0                <2> 		je transcheck
  2858 00002314 EB0C                <2> 		jmp rdend
  2859                              <2> 	rdenter:
  2860 00002316 C1E010              <2> 		shl eax, 16
  2861 00002319 66B80A00            <2> 		mov ax, 10
  2862 0000231D A3[28230000]        <2> 		mov [lastkey], eax
  2863                              <2> 	rdend:
  2864 00002322 A1[28230000]        <2> 		mov eax, [lastkey]
  2865 00002327 C3                  <2> 		ret
  2866                              <2> 		
  2867 00002328 00000000            <2> lastkey dd 0
  2868 0000232C 0000                <2> trans dw 0
  2869                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2870                              <2> prntchar:
  2871 0000232E 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2872                              <2> %ifdef io.serial
  2873                              <2> 	call prcharint
  2874                              <2> 	jmp timerinterrupt
  2875                              <2> prcharint:	
  2876                              <2> prcharq:
  2877                              <2> 	call serial.send
  2878                              <2> 	ret
  2879                              <2> %else
  2880 00002330 38FB                <2> cmp bl, bh
  2881 00002332 740A                <2> je prchar.notimer
  2882 00002334 E80B000000          <2> call prcharint
  2883 00002339 E95CDFFFFF          <2> jmp timerinterrupt
  2884                              <2> prchar.notimer:
  2885 0000233E E818000000          <2> 	call prcharq
  2886 00002343 CF                  <2> 	iret
  2887                              <2> 	
  2888                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2889 00002344 663DFFFE            <2> 	cmp ax, 0xFEFF
  2890 00002348 740E                <2> 	je .ret
  2891 0000234A 39C1                <2> 	cmp ecx, eax
  2892 0000234C 740D                <2> 	je prcharq
  2893 0000234E E808000000          <2> 	call prcharq
  2894 00002353 E8D4040000          <2> 	call termcopy
  2895                              <2> .ret:
  2896 00002358 C3                  <2> 	ret
  2897 00002359 00                  <2> termguion db 0
  2898 0000235A 00                  <2> termcopyon db 0
  2899                              <2> prcharq:
  2900 0000235B C1E310              <2> 	shl ebx, 16
  2901 0000235E 6689C3              <2> 	mov bx, ax
  2902 00002361 89D8                <2> 	mov eax, ebx
  2903 00002363 A3[34250000]        <2> 	mov [charbuf], eax
  2904 00002368 8B1D[2C250000]      <2> 	mov ebx, [videobufpos]
  2905 0000236E BF[9CDF2B00]        <2> 	mov edi, videobuf
  2906 00002373 01DF                <2> 	add edi, ebx
  2907 00002375 A1[39280000]        <2> 	mov eax, [removedvideo]
  2908 0000237A 8907                <2> 	mov [edi], eax
  2909 0000237C A1[34250000]        <2> 	mov eax, [charbuf]
  2910 00002381 31D2                <2> 	xor edx, edx
  2911 00002383 668B15[30250000]    <2> 	mov dx, [charpos]
  2912 0000238A 31C9                <2> 	xor ecx, ecx
  2913 0000238C 668B0D[32250000]    <2> 	mov cx, [charxy]
  2914 00002393 6683F809            <2> 	cmp ax, 9
  2915 00002397 0F846C000000        <2> 	je near prtab
  2916 0000239D 6683F80D            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2917 000023A1 0F848C000000        <2> 	je near prcr
  2918 000023A7 6683F80A            <2> 	cmp ax, 10
  2919 000023AB 0F84D2000000        <2> 	je near prnlcr
  2920 000023B1 6683F808            <2> 	cmp ax, 8
  2921 000023B5 0F8489000000        <2> 	je near prbs
  2922 000023BB 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2923 000023BF 0F833E000000        <2> 	jae near prnofont
  2924                              <2> donepr:
  2925 000023C5 8907                <2> 	mov [edi], eax
  2926 000023C7 83C704              <2> 	add edi, 4
  2927 000023CA FEC2                <2> 	inc dl
  2928                              <2> donecrnl:
  2929 000023CC 38CA                <2> 	cmp dl, cl
  2930 000023CE 0F83D3000000        <2> 	jae near preol
  2931                              <2> doneeol:
  2932 000023D4 38EE                <2> 	cmp dh, ch
  2933 000023D6 0F83E8000000        <2> 	jae near prscr	
  2934                              <2> donescr:
  2935 000023DC 89FB                <2> 	mov ebx, edi
  2936 000023DE 8B07                <2> 	mov eax, [edi]
  2937 000023E0 A3[39280000]        <2> 	mov [removedvideo], eax
  2938 000023E5 81EB[9CDF2B00]      <2> 	sub ebx, videobuf
  2939 000023EB 891D[2C250000]      <2> 	mov [videobufpos], ebx
  2940 000023F1 668915[30250000]    <2> 	mov [charpos], dx
  2941 000023F8 A1[34250000]        <2> 	mov eax, [charbuf]
  2942 000023FD 89C3                <2> 	mov ebx, eax
  2943 000023FF C1EB10              <2> 	shr ebx, 16
  2944 00002402 C3                  <2> 	ret
  2945                              <2> 	
  2946                              <2> 	prnofont:
  2947 00002403 66B80200            <2> 		mov ax, 2
  2948 00002407 EBBC                <2> 		jmp donepr
  2949                              <2> 	prtab:
  2950 00002409 8B1D[28250000]      <2> 		mov ebx, [linebeginpos]
  2951 0000240F 81EF[9CDF2B00]      <2> 		sub edi, videobuf
  2952 00002415 29DF                <2> 		sub edi, ebx
  2953 00002417 C1EF05              <2> 		shr edi, 5
  2954 0000241A C1E705              <2> 		shl edi, 5
  2955 0000241D 83C720              <2> 		add edi, 32
  2956 00002420 C0EA03              <2> 		shr dl, 3
  2957 00002423 C0E203              <2> 		shl dl, 3
  2958 00002426 80C208              <2> 		add dl, 8
  2959 00002429 81C7[9CDF2B00]      <2> 		add edi, videobuf
  2960 0000242F 01DF                <2> 		add edi, ebx
  2961 00002431 EB99                <2> 		jmp donecrnl
  2962                              <2> 	
  2963                              <2> 	prcr:
  2964 00002433 30D2                <2> 		xor dl, dl
  2965 00002435 BF[9CDF2B00]        <2> 		mov edi, videobuf
  2966 0000243A 8B1D[28250000]      <2> 		mov ebx, [linebeginpos]
  2967 00002440 01DF                <2> 		add edi, ebx
  2968 00002442 EB88                <2> 		jmp donecrnl
  2969                              <2> 			
  2970                              <2> 	prbs:
  2971 00002444 8B1D[28250000]      <2> 		mov ebx, [linebeginpos]
  2972 0000244A 80FA00              <2> 		cmp dl, 0
  2973 0000244D 7412                <2> 		je prbackline
  2974                              <2> 	prnobmr:
  2975 0000244F 891D[28250000]      <2> 		mov [linebeginpos], ebx
  2976 00002455 FECA                <2> 		dec dl
  2977 00002457 31C0                <2> 		xor eax, eax
  2978 00002459 83EF04              <2> 		sub edi, 4
  2979 0000245C E96BFFFFFF          <2> 		jmp donecrnl
  2980                              <2> 	prbackline:
  2981 00002461 6631DB              <2> 		xor bx, bx
  2982 00002464 88CA                <2> 		mov dl, cl
  2983 00002466 80FE00              <2> 		cmp dh, 0
  2984 00002469 74E4                <2> 		je prnobmr
  2985 0000246B 8B1D[28250000]      <2> 		mov ebx, [linebeginpos]
  2986 00002471 6651                <2> 		push cx
  2987 00002473 31C9                <2> 		xor ecx, ecx
  2988 00002475 8A0C24              <2> 		mov cl, [esp]
  2989 00002478 C1E102              <2> 		shl ecx, 2
  2990 0000247B 29CB                <2> 		sub ebx, ecx
  2991 0000247D 6659                <2> 		pop cx
  2992 0000247F FECE                <2> 		dec dh
  2993 00002481 EBCC                <2> 		jmp prnobmr
  2994                              <2> 		
  2995                              <2> 	prnlcr:
  2996 00002483 FEC6                <2> 		inc dh
  2997 00002485 31DB                <2> 		xor ebx, ebx
  2998 00002487 30D2                <2> 		xor dl, dl
  2999 00002489 88CB                <2> 		mov bl, cl
  3000 0000248B 66C1E302            <2> 		shl bx, 2
  3001 0000248F BF[9CDF2B00]        <2> 		mov edi, videobuf
  3002 00002494 031D[28250000]      <2> 		add ebx, [linebeginpos]
  3003 0000249A 891D[28250000]      <2> 		mov [linebeginpos], ebx
  3004 000024A0 01DF                <2> 		add edi, ebx
  3005 000024A2 E925FFFFFF          <2> 		jmp donecrnl
  3006                              <2> 		
  3007                              <2> 	preol:
  3008 000024A7 30D2                <2> 		xor dl, dl
  3009 000024A9 FEC6                <2> 		inc dh
  3010 000024AB 31DB                <2> 		xor ebx, ebx
  3011 000024AD 88CB                <2> 		mov bl, cl
  3012 000024AF 66C1E302            <2> 		shl bx, 2
  3013 000024B3 031D[28250000]      <2> 		add ebx, [linebeginpos]
  3014 000024B9 891D[28250000]      <2> 		mov [linebeginpos], ebx
  3015 000024BF E910FFFFFF          <2> 		jmp doneeol
  3016                              <2> 	prscr:
  3017 000024C4 FECE                <2> 		dec dh
  3018 000024C6 BF[9CDF2B00]        <2> 		mov edi, videobuf
  3019 000024CB 31DB                <2> 		xor ebx, ebx
  3020 000024CD 88CB                <2> 		mov bl, cl
  3021 000024CF 66C1E302            <2> 		shl bx, 2
  3022 000024D3 01FB                <2> 		add ebx, edi
  3023                              <2> 	intscrollloop:
  3024 000024D5 8B03                <2> 		mov eax, [ebx]
  3025 000024D7 8907                <2> 		mov [edi], eax
  3026 000024D9 83C704              <2> 		add edi, 4
  3027 000024DC 83C304              <2> 		add ebx, 4
  3028 000024DF FEC9                <2> 		dec cl
  3029 000024E1 80F900              <2> 		cmp cl, 0
  3030 000024E4 75EF                <2> 		jne intscrollloop
  3031 000024E6 8A0D[32250000]      <2> 		mov cl, [charxy]
  3032 000024EC FECD                <2> 		dec ch
  3033 000024EE 80FD01              <2> 		cmp ch, 1
  3034 000024F1 77E2                <2> 		ja intscrollloop
  3035 000024F3 31C0                <2> 		xor eax, eax
  3036 000024F5 81EF[9CDF2B00]      <2> 		sub edi, videobuf
  3037 000024FB 893D[28250000]      <2> 		mov [linebeginpos], edi
  3038 00002501 81C7[9CDF2B00]      <2> 		add edi, videobuf
  3039 00002507 89FB                <2> 		mov ebx, edi
  3040                              <2> 	intloopclear:
  3041 00002509 8903                <2> 		mov [ebx], eax
  3042 0000250B 83C304              <2> 		add ebx, 4
  3043 0000250E FEC9                <2> 		dec cl
  3044 00002510 80F900              <2> 		cmp cl, 0
  3045 00002513 75F4                <2> 		jne intloopclear
  3046 00002515 FECD                <2> 		dec ch
  3047 00002517 80FD00              <2> 		cmp ch, 0
  3048 0000251A 75ED                <2> 		jne intloopclear
  3049 0000251C 668B0D[32250000]    <2> 		mov cx, [charxy]
  3050 00002523 E9B4FEFFFF          <2> 		jmp donescr
  3051                              <2> 		
  3052 00002528 00000000            <2> linebeginpos dd 0
  3053 0000252C 00000000            <2> videobufpos: dd 0
  3054 00002530 0000                <2> charpos db 0,0
  3055 00002532 501E                <2> charxy db 80,30
  3056 00002534 00000000            <2> charbuf dd 0
  3057                              <2> %endif
  3058                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3059                              <2> openfile:
  3060 00002538 E82E400000          <2> 	call loadfile
  3061 0000253D E958DDFFFF          <2> 	jmp timerinterrupt
  3062                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3063                              <2> num2str:
  3064 00002542 3C00                <2> 	cmp al, 0
  3065 00002544 750A                <2> 	jne num2strb
  3066 00002546 E85C0C0000          <2> 	call showdec
  3067 0000254B E94ADDFFFF          <2> 	jmp timerinterrupt
  3068                              <2> num2strb:
  3069 00002550 E8A30B0000          <2> 	call showhex
  3070 00002555 E940DDFFFF          <2> 	jmp timerinterrupt
  3071                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3072                              <2> str2num:
  3073 0000255A 89F7                <2> 	mov edi, esi
  3074 0000255C E8150D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3075 00002561 E934DDFFFF          <2> 	jmp timerinterrupt
  3076                              <2> 	
  3077                              <1> %ifdef threads.included
  3078                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3079                              <2> forkthread:
  3080                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3081                              <2> 			;returns the PID of the new fork in ebx
  3082                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3083 00002566 FA                  <2> 	cli
  3084 00002567 60                  <2> 	pushad
  3085 00002568 8925[26260000]      <2> 	mov [.espold], esp
  3086 0000256E C605[14670000]01    <2> 	mov byte [threadson], 1
  3087 00002575 8B1D[15670000]      <2> 	mov ebx, [currentthread]
  3088 0000257B C1E302              <2> 	shl ebx, 2
  3089 0000257E 89A3[3C9A2D00]      <2> 	mov [threadlist + ebx], esp
  3090 00002584 C1EB02              <2> 	shr ebx, 2
  3091 00002587 83FB00              <2> 	cmp ebx, 0
  3092 0000258A 7509                <2> 	jne .simplestack
  3093 0000258C BB[00AA0300]        <2> 	mov ebx, stackend
  3094 00002591 29E3                <2> 	sub ebx, esp
  3095 00002593 EB0B                <2> 	jmp .stackcalcdone
  3096                              <2> .simplestack:
  3097 00002595 C1E30A              <2> 	shl ebx, 10
  3098 00002598 81C3[3CB22D00]      <2> 	add ebx, stack1
  3099 0000259E 29E3                <2> 	sub ebx, esp
  3100                              <2> .stackcalcdone:
  3101 000025A0 29DC                <2> 	sub esp, ebx
  3102 000025A2 81C4[3CB22D00]      <2> 	add esp, stack1
  3103 000025A8 8B1D[10670000]      <2> 	mov ebx, [lastthread]
  3104 000025AE C1E308              <2> 	shl ebx, 8
  3105 000025B1 01DC                <2> 	add esp, ebx
  3106 000025B3 891D[2A260000]      <2> 	mov [.stackend], ebx
  3107                              <2> 
  3108 000025B9 89E5                <2> 	mov ebp, esp
  3109 000025BB 8B25[26260000]      <2> 	mov esp, [.espold]
  3110                              <2> 
  3111 000025C1 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3112 000025C4 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3113                              <2> 
  3114 000025C8 31DB                <2> 	xor ebx, ebx
  3115                              <2> .stackcopy:
  3116 000025CA 668B041C            <2> 	mov ax, [esp + ebx]
  3117 000025CE 6689441D00          <2> 	mov [ebp + ebx], ax
  3118 000025D3 83C302              <2> 	add ebx, 2
  3119 000025D6 3B1D[2A260000]      <2> 	cmp ebx, [.stackend]
  3120 000025DC 72EC                <2> 	jb .stackcopy
  3121                              <2> 
  3122 000025DE 31C0                <2> 	xor eax, eax
  3123 000025E0 668CC8              <2> 	mov ax, cs
  3124 000025E3 89C2                <2> 	mov edx, eax
  3125 000025E5 8B4C2428            <2> 	mov ecx, [esp + 40]
  3126 000025E9 81C900020000        <2> 	or ecx, 0x200
  3127                              <2> 	
  3128 000025EF 83FE00              <2> 	cmp esi, 0
  3129 000025F2 7504                <2> 	jne .nochangestack
  3130 000025F4 8B742420            <2> 	mov esi, [esp + 32]
  3131                              <2> .nochangestack:
  3132 000025F8 89F0                <2> 	mov eax, esi
  3133 000025FA 89EC                <2> 	mov esp, ebp
  3134                              <2> 
  3135 000025FC 89442420            <2> 	mov [esp + 32], eax
  3136 00002600 89542424            <2> 	mov [esp + 36], edx
  3137 00002604 894C2428            <2> 	mov [esp + 40], ecx
  3138                              <2> 
  3139 00002608 8B1D[10670000]      <2> 	mov ebx, [lastthread]
  3140 0000260E 89A3[3C9A2D00]      <2> 	mov [threadlist + ebx], esp
  3141 00002614 83C304              <2> 	add ebx, 4
  3142 00002617 891D[10670000]      <2> 	mov [lastthread], ebx
  3143 0000261D 8B25[26260000]      <2> 	mov esp, [.espold]
  3144 00002623 61                  <2> 	popad
  3145 00002624 FB                  <2> 	sti
  3146 00002625 CF                  <2> 	iret
  3147                              <2> 
  3148 00002626 00000000            <2> .espold dd 0
  3149 0000262A 00000000            <2> .stackend dd 0
  3150                              <1> %endif
  3151                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3152                              <2> gettime:
  3153 0000262E A1[53020000]        <2> 	mov eax, [timeseconds]
  3154 00002633 8B1D[57020000]      <2> 	mov ebx, [timenanoseconds]
  3155 00002639 89D9                <2> 	mov ecx, ebx
  3156 0000263B C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3157 0000263E E957DCFFFF          <2> 	jmp timerinterrupt
  3158                              <1> 	%include 'source/interrupts/13_settime.asm'
  3159                              <2> settime:
  3160 00002643 A3[53020000]        <2> 	mov [timeseconds], eax
  3161 00002648 891D[57020000]      <2> 	mov [timenanoseconds], ebx
  3162 0000264E E947DCFFFF          <2> 	jmp timerinterrupt
  3163                              <2> 	
  3164                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3165                              <2> runcmd:
  3166 00002653 BF[88C40300]        <2> 	mov edi, buftxt
  3167                              <2> cpcmd:
  3168 00002658 8A06                <2> 	mov al, [esi]
  3169 0000265A 8807                <2> 	mov [edi], al
  3170 0000265C 46                  <2> 	inc esi
  3171 0000265D 47                  <2> 	inc edi
  3172 0000265E 3C00                <2> 	cmp al, 0
  3173 00002660 75F6                <2> 	jne cpcmd
  3174 00002662 E8BF070000          <2> 	call run
  3175 00002667 CF                  <2> 	iret
  3176                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3177                              <2> proginfo:
  3178                              <2> 	;mov ebx, variables
  3179 00002668 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  3180 0000266E 89F7                <2> 	mov edi, esi
  3181 00002670 31C9                <2> 	xor ecx, ecx
  3182                              <2> getcommandzeroes:
  3183 00002672 8A07                <2> 	mov al, [edi]
  3184 00002674 47                  <2> 	inc edi
  3185 00002675 3C3B                <2> 	cmp al, ';'
  3186 00002677 740B                <2> 	je nomorezeroes
  3187 00002679 3C00                <2> 	cmp al, 0
  3188 0000267B 7407                <2> 	je nomorezeroes
  3189 0000267D 3C20                <2> 	cmp al, ' '
  3190 0000267F 75F1                <2> 	jne getcommandzeroes
  3191 00002681 41                  <2> 	inc ecx
  3192 00002682 EBEE                <2> 	jmp getcommandzeroes
  3193                              <2> nomorezeroes:
  3194 00002684 41                  <2> 	inc ecx
  3195 00002685 4F                  <2> 	dec edi
  3196 00002686 8B1D[14B00300]      <2> 	mov ebx, [uid]
  3197 0000268C 8B15[15670000]      <2> 	mov edx, [currentthread]
  3198 00002692 CF                  <2> 	iret
  3199                              <2> 	
  3200                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3201                              <2> hooksig: ;hook code in ESI to signal in AL
  3202 00002693 3C00                <2> 	cmp al, 0
  3203 00002695 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3204                              <2> ;	xor ebx, ebx
  3205                              <2> ;	mov bl, al
  3206                              <2> ;	shl bl, 2
  3207 00002697 BF[04AA0300]        <2> 	mov edi, sigtable
  3208 0000269C 8937                <2> 	mov [edi], esi
  3209                              <2> .quit:
  3210 0000269E E9F7DBFFFF          <2> 	jmp timerinterrupt
  3211                              <1> %ifdef gui.included
  3212                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3213                              <2> guiint:
  3214 000026A3 3CFD                <2> 	cmp al, 253
  3215 000026A5 0F848E000000        <2> 	je near .getinfo
  3216 000026AB 803D[E7840000]01    <2> 	cmp byte [guion], 1
  3217 000026B2 0F8550000000        <2> 	jne near .nogui
  3218 000026B8 3C00                <2> 	cmp al, 0
  3219 000026BA 0F844D000000        <2> 	je near .clear
  3220 000026C0 3C01                <2> 	cmp al, 1
  3221 000026C2 0F84DE000000        <2> 	je near .putpixel
  3222 000026C8 3C02                <2> 	cmp al, 2
  3223 000026CA 0F84E3000000        <2> 	je near .drawtext
  3224 000026D0 3C03                <2> 	cmp al, 3
  3225 000026D2 0F84F6000000        <2> 	je near .drawline
  3226 000026D8 3C04                <2> 	cmp al, 4
  3227 000026DA 0F8401010000        <2> 	je near .drawcircle
  3228 000026E0 3C05                <2> 	cmp al, 5
  3229 000026E2 0F8409010000        <2> 	je near .fillcircle
  3230 000026E8 3C06                <2> 	cmp al, 6
  3231 000026EA 0F8411010000        <2> 	je near .drawsquare
  3232 000026F0 3C07                <2> 	cmp al, 7
  3233 000026F2 0F841C010000        <2> 	je near .fillsquare
  3234 000026F8 3CFE                <2> 	cmp al, 254
  3235 000026FA 0F8461000000        <2> 	je near .setinfo
  3236 00002700 3CFF                <2> 	cmp al, 255
  3237 00002702 0F845E000000        <2> 	je near .reset
  3238                              <2> .nogui:
  3239 00002708 E98DDBFFFF          <2> 	jmp timerinterrupt
  3240                              <2> 
  3241                              <2> .clear:		;color in bx
  3242 0000270D 66891D[E36D0000]    <2> 	mov [background], bx
  3243                              <2> %ifdef gui.background
  3244 00002714 8B1D[BB6D0000]      <2> 	mov ebx, [backgroundimage]
  3245 0000271A 83FB00              <2> 	cmp ebx, 0
  3246 0000271D 7410                <2> 	je .clearit
  3247 0000271F C705[BB6D0000]0000- <2> 	mov dword [backgroundimage], 0
  3248 00002727 0000                <2>
  3249 00002729 891D[A2270000]      <2> 	mov [.bgi], ebx
  3250                              <2> .clearit:
  3251                              <2> %endif
  3252 0000272F E832460000          <2> 	call guiclear
  3253 00002734 E961DBFFFF          <2> 	jmp timerinterrupt
  3254                              <2> 	
  3255                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3256 00002739 31DB                <2> 	xor ebx, ebx
  3257 0000273B 31C9                <2> 	xor ecx, ecx
  3258 0000273D 31D2                <2> 	xor edx, edx
  3259 0000273F 381D[E7840000]      <2> 	cmp [guion], bl
  3260 00002745 74C1                <2> 	je .nogui
  3261 00002747 668B1D[E36D0000]    <2> 	mov bx, [background]
  3262 0000274E 668B15[04550000]    <2> 	mov dx, [resolutionx]
  3263 00002755 668B0D[06550000]    <2> 	mov cx, [resolutiony]
  3264 0000275C E939DBFFFF          <2> 	jmp timerinterrupt
  3265                              <2> 	
  3266                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3267 00002761 E934DBFFFF          <2> 	jmp timerinterrupt
  3268                              <2> .reset:		;resets the screen to the original settings
  3269 00002766 66BBCF7B            <2> 	mov bx, background.original
  3270 0000276A 66891D[E36D0000]    <2> 	mov [background], bx
  3271 00002771 66BBFFFF            <2> 	mov bx, 0xFFFF
  3272 00002775 66891D[96740000]    <2> 	mov [colorfont2], bx
  3273                              <2> %ifdef gui.background
  3274 0000277C 8B1D[BB6D0000]      <2> 	mov ebx, [backgroundimage]
  3275 00002782 83FB00              <2> 	cmp ebx, 0
  3276 00002785 750C                <2> 	jne .resetit
  3277 00002787 8B1D[A2270000]      <2> 	mov ebx, [.bgi]
  3278 0000278D 891D[BB6D0000]      <2> 	mov [backgroundimage], ebx
  3279                              <2> .resetit:
  3280                              <2> %endif
  3281 00002793 E8CE450000          <2> 	call guiclear
  3282 00002798 E84A460000          <2> 	call reloadallgraphics
  3283 0000279D E9F8DAFFFF          <2> 	jmp timerinterrupt
  3284                              <2> 
  3285                              <2> %ifdef gui.background
  3286 000027A2 00000000            <2> 	.bgi dd 0
  3287                              <2> %endif
  3288                              <2> 	
  3289                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3290 000027A6 6689DE              <2> 	mov si, bx
  3291 000027A9 E8695C0000          <2> 	call putpixel
  3292 000027AE E9E7DAFFFF          <2> 	jmp timerinterrupt
  3293                              <2> 
  3294                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3295 000027B3 66D1E2              <2> 	shl dx, 1
  3296 000027B6 66891D[96740000]    <2> 	mov [colorfont2], bx
  3297 000027BD 66893D[E36D0000]    <2> 	mov [background], di
  3298 000027C4 E8644C0000          <2> 	call showstring2
  3299 000027C9 E9CCDAFFFF          <2> 	jmp timerinterrupt
  3300                              <2> 
  3301                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3302 000027CE 6689F0              <2> 	mov ax, si
  3303 000027D1 6689DE              <2> 	mov si, bx
  3304 000027D4 6689FB              <2> 	mov bx, di
  3305 000027D7 E877440000          <2> 	call drawline
  3306 000027DC E9B9DAFFFF          <2> 	jmp timerinterrupt
  3307                              <2> 
  3308                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3309 000027E1 6689F0              <2> 	mov ax, si
  3310 000027E4 6689DE              <2> 	mov si, bx
  3311 000027E7 E813400000          <2> 	call drawcircle
  3312 000027EC E9A9DAFFFF          <2> 	jmp timerinterrupt
  3313                              <2> 
  3314                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3315 000027F1 6689F0              <2> 	mov ax, si
  3316 000027F4 6689DE              <2> 	mov si, bx
  3317 000027F7 E80C410000          <2> 	call fillcircle
  3318 000027FC E999DAFFFF          <2> 	jmp timerinterrupt
  3319                              <2> 	
  3320                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3321 00002801 6689F0              <2> 	mov ax, si
  3322 00002804 6689DE              <2> 	mov si, bx
  3323 00002807 6689FB              <2> 	mov bx, di
  3324 0000280A E8A5460000          <2> 	call drawsquare
  3325 0000280F E986DAFFFF          <2> 	jmp timerinterrupt
  3326                              <2> 
  3327                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3328 00002814 6689F0              <2> 	mov ax, si
  3329 00002817 6689DE              <2> 	mov si, bx
  3330 0000281A 6689FB              <2> 	mov bx, di
  3331 0000281D E801470000          <2> 	call fillsquare
  3332 00002822 E973DAFFFF          <2> 	jmp timerinterrupt
  3333                              <1> %endif
  3334                              <1> %ifdef sound.included
  3335                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3336                              <2> soundint:
  3337 00002827 E96EDAFFFF          <2> 	jmp timerinterrupt
  3338                              <1> %endif
  3339                              <1> %ifdef network.included
  3340                              <1> 	%include 'source/interrupts/19_netint.asm'
  3341                              <1> %endif
  3342                              <1> 
  3343                              <1> termcopy:
  3344                              <1> %ifdef io.serial
  3345                              <1> 	ret
  3346                              <1> %else
  3347                              <1> %ifdef terminal.vsync
  3348 0000282C C605[34280000]01    <1> 	mov byte [termcopyneeded], 1
  3349 00002833 C3                  <1> 	ret
  3350                              <1> %else
  3351                              <1> 	call newtermcopy
  3352                              <1> 	ret
  3353                              <1> %endif
  3354 00002834 00                  <1> 	termcopyneeded db 0
  3355 00002835 00000000            <1> 	termcursorpos dd 0
  3356 00002839 00000000            <1> 	removedvideo dd 0
  3357                              <1> newtermcopy:
  3358 0000283D 60                  <1> 	pusha
  3359 0000283E BF[9CDF2B00]        <1> 	mov edi, videobuf
  3360 00002843 31DB                <1> 	xor ebx, ebx
  3361 00002845 881D[34280000]      <1> 	mov [termcopyneeded], bl
  3362 0000284B 8B1D[2C250000]      <1> 	mov ebx, [videobufpos]
  3363 00002851 01DF                <1> 	add edi, ebx
  3364 00002853 893D[35280000]      <1> 	mov [termcursorpos], edi
  3365 00002859 E8D6000000          <1> 	call switchtermcursor
  3366 0000285E 803D[E7840000]00    <1> 	cmp byte [guion], 0
  3367 00002865 0F8420000000        <1> 	je near nowincopy
  3368                              <1> %ifdef gui.included
  3369 0000286B C605[537C0000]00    <1> 	mov byte [mouseselecton], 0
  3370 00002872 C605[5A230000]01    <1> 	mov byte [termcopyon], 1
  3371 00002879 803D[59230000]01    <1> 	cmp byte [termguion], 1
  3372 00002880 0F84D7500000        <1> 	je near windowvideocopy
  3373                              <1> %endif
  3374 00002886 E9A2000000          <1> 	jmp nocopytermatall
  3375                              <1> nowincopy:
  3376 0000288B BE00000A00          <1> 	mov esi, 0xA0000
  3377 00002890 A1[33020000]        <1> 	mov eax, [basecache]
  3378 00002895 C1E004              <1> 	shl eax, 4
  3379 00002898 29C6                <1> 	sub esi, eax
  3380 0000289A BF[9CDF2B00]        <1> 	mov edi, videobuf
  3381 0000289F 31C9                <1> 	xor ecx, ecx
  3382 000028A1 668B0D[32250000]    <1> 	mov cx, [charxy]
  3383                              <1> nowincopy2:
  3384 000028A8 8B07                <1> 	mov eax, [edi]
  3385 000028AA 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3386 000028B0 8B1F                <1> 	mov ebx, [edi]
  3387 000028B2 8907                <1> 	mov [edi], eax
  3388 000028B4 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3389 000028BA 83C702              <1> 	add edi, 2
  3390 000028BD 39D8                <1> 	cmp eax, ebx
  3391 000028BF 7445                <1> 	je nopresentwinfont
  3392 000028C1 83EF02              <1> 	sub edi, 2
  3393 000028C4 BD[41870000]        <1> 	mov ebp, fonts
  3394 000028C9 31C0                <1> 	xor eax, eax
  3395 000028CB 668B07              <1> 	mov ax, [edi]
  3396 000028CE C1E004              <1> 	shl eax, 4
  3397 000028D1 01C5                <1> 	add ebp, eax
  3398 000028D3 83C702              <1> 	add edi, 2
  3399 000028D6 668B1F              <1> 	mov bx, [edi]
  3400 000028D9 31D2                <1> 	xor edx, edx
  3401 000028DB 8A15[32250000]      <1> 	mov dl, [charxy]
  3402 000028E1 C1C110              <1> 	rol ecx, 16
  3403 000028E4 B110                <1> 	mov cl, 16
  3404                              <1> nowinfont:
  3405 000028E6 8A4500              <1> 	mov al, [ebp]
  3406 000028E9 D0C8                <1> 	ror al, 1
  3407 000028EB 80FB80              <1> 	cmp bl, 0x80
  3408 000028EE 7202                <1> 	jb notnotfont
  3409 000028F0 F6D0                <1> 	not al
  3410                              <1> notnotfont:
  3411 000028F2 8806                <1> 	mov [esi], al
  3412 000028F4 01D6                <1> 	add esi, edx
  3413 000028F6 45                  <1> 	inc ebp
  3414 000028F7 FEC9                <1> 	dec cl
  3415 000028F9 80F900              <1> 	cmp cl, 0
  3416 000028FC 75E8                <1> 	jne nowinfont
  3417 000028FE C1E204              <1> 	shl edx, 4
  3418 00002901 29D6                <1> 	sub esi, edx
  3419 00002903 C1C110              <1> 	rol ecx, 16
  3420                              <1> nopresentwinfont:
  3421 00002906 83C702              <1> 	add edi, 2
  3422 00002909 46                  <1> 	inc esi
  3423 0000290A FEC9                <1> 	dec cl
  3424 0000290C 80F900              <1> 	cmp cl, 0
  3425 0000290F 7597                <1> 	jne nowincopy2
  3426 00002911 8A0D[32250000]      <1> 	mov cl, [charxy]
  3427 00002917 31D2                <1> 	xor edx, edx
  3428 00002919 88CA                <1> 	mov dl, cl
  3429 0000291B 29D6                <1> 	sub esi, edx
  3430 0000291D C1E204              <1> 	shl edx, 4
  3431 00002920 01D6                <1> 	add esi, edx
  3432 00002922 FECD                <1> 	dec ch
  3433 00002924 80FD00              <1> 	cmp ch, 0
  3434 00002927 0F857BFFFFFF        <1> 	jne nowincopy2
  3435                              <1> nocopytermatall:
  3436 0000292D E802000000          <1> 	call switchtermcursor
  3437 00002932 61                  <1> 	popa
  3438 00002933 C3                  <1> 	ret
  3439                              <1> 	
  3440                              <1> switchtermcursor:
  3441 00002934 8B3D[35280000]      <1> 	mov edi, [termcursorpos]
  3442 0000293A 668B4702            <1> 	mov ax, [edi + 2]
  3443 0000293E 668B1F              <1> 	mov bx, [edi]
  3444 00002941 663D8000            <1> 	cmp ax, 0x80
  3445 00002945 7206                <1> 	jb movlargecursorterm
  3446 00002947 66B80700            <1> 	mov ax, 7
  3447 0000294B EB04                <1> 	jmp movedcursorterm
  3448                              <1> movlargecursorterm:
  3449 0000294D 66B8F000            <1> 	mov ax, 0xF0
  3450                              <1> movedcursorterm:
  3451 00002951 66894702            <1> 	mov [edi + 2], ax
  3452 00002955 6683FB00            <1> 	cmp bx, 0
  3453 00002959 7507                <1> 	jne fixednocursorterm
  3454 0000295B 66BB2000            <1> 	mov bx, ' '
  3455 0000295F 66891F              <1> 	mov [edi], bx
  3456                              <1> fixednocursorterm:
  3457 00002962 C3                  <1> 	ret
  3458                              <1> %endif
  3459                                      %include "source/dosints.asm"
  3460                              <1> int20h:
  3461 00002963 66B8004C            <1> mov ax, 0x4C00
  3462                              <1> int21h:
  3463                              <1> dostosolleros:
  3464 00002967 6650                <1> 	push ax
  3465 00002969 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3466 0000296D 8ED8                <1> 	mov ds, ax
  3467 0000296F 8EC0                <1> 	mov es, ax
  3468 00002971 8EE0                <1> 	mov fs, ax
  3469 00002973 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3470 00002977 8EE8                <1> 	mov gs, ax
  3471 00002979 6658                <1> 	pop ax
  3472 0000297B 9C                  <1> 	pushf
  3473 0000297C 60                  <1> 	pusha
  3474 0000297D 80FC01              <1> 	cmp ah, 1
  3475 00002980 0F8449000000        <1> 	je near dosgchar
  3476 00002986 80FC02              <1> 	cmp ah, 2
  3477 00002989 0F8447000000        <1> 	je near doswchar
  3478 0000298F 80FC09              <1> 	cmp ah, 9
  3479 00002992 0F844B000000        <1> 	je near dosprintstr
  3480 00002998 80FC0A              <1> 	cmp ah, 0xA
  3481 0000299B 0F845A000000        <1> 	je near dosgetstr
  3482 000029A1 80FC2B              <1> 	cmp ah, 0x2B
  3483 000029A4 0F8493000000        <1> 	je near dosgetdate
  3484 000029AA 80FC2C              <1> 	cmp ah, 0x2C
  3485 000029AD 0F84AD000000        <1> 	je near dosgettime
  3486 000029B3 80FC4C              <1> 	cmp ah, 0x4C
  3487 000029B6 0F84C2000000        <1> 	je near dosexit
  3488                              <1> backtodos:
  3489 000029BC 61                  <1> 	popa
  3490 000029BD 9D                  <1> 	popf
  3491 000029BE 6650                <1> 	push ax
  3492 000029C0 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3493 000029C4 8ED8                <1> 	mov ds, ax
  3494 000029C6 8EC0                <1> 	mov es, ax
  3495 000029C8 8EE0                <1> 	mov fs, ax
  3496 000029CA 8EE8                <1> 	mov gs, ax
  3497 000029CC 6658                <1> 	pop ax
  3498 000029CE CF                  <1> 	iret
  3499                              <1> 
  3500                              <1> dosgchar:
  3501 000029CF E8F8F8FFFF          <1> 	call getchar
  3502 000029D4 EBE6                <1> 	jmp backtodos
  3503                              <1> 	
  3504                              <1> doswchar:
  3505 000029D6 88D0                <1> 	mov al, dl
  3506 000029D8 30E4                <1> 	xor ah, ah
  3507 000029DA B307                <1> 	mov bl, 7
  3508 000029DC E863F9FFFF          <1> 	call prcharint
  3509 000029E1 EBD9                <1> 	jmp backtodos
  3510                              <1> 	
  3511                              <1> dosprintstr:
  3512 000029E3 31F6                <1> 	xor esi, esi
  3513 000029E5 6689D6              <1> 	mov si, dx
  3514 000029E8 81C600004000        <1> 	add esi, dosprogloc
  3515 000029EE 66B82400            <1> 	mov ax, "$"
  3516 000029F2 B307                <1> 	mov bl, 7
  3517 000029F4 E800F3FFFF          <1> 	call printint
  3518 000029F9 EBC1                <1> 	jmp backtodos
  3519                              <1> 	
  3520                              <1> dosgetstr:
  3521 000029FB 31F6                <1> 	xor esi, esi
  3522 000029FD 6689D6              <1> 	mov si, dx
  3523 00002A00 81C600004000        <1> 	add esi, dosprogloc
  3524 00002A06 B900000000          <1> 	mov ecx, 0
  3525 00002A0B 8A0E                <1> 	mov cl, [esi]
  3526 00002A0D 83C602              <1> 	add esi, 2
  3527 00002A10 89F7                <1> 	mov edi, esi
  3528 00002A12 8935[392A0000]      <1> 	mov [stringstart], esi
  3529 00002A18 01CF                <1> 	add edi, ecx
  3530 00002A1A B00A                <1> 	mov al, 10
  3531 00002A1C B307                <1> 	mov bl, 7
  3532 00002A1E E80DF4FFFF          <1> 	call rdprintdos
  3533 00002A23 89F1                <1> 	mov ecx, esi
  3534 00002A25 2B0D[392A0000]      <1> 	sub ecx, [stringstart]
  3535 00002A2B 8B35[392A0000]      <1> 	mov esi, [stringstart]
  3536 00002A31 884EFF              <1> 	mov [esi - 1], cl
  3537 00002A34 884EFE              <1> 	mov [esi - 2], cl
  3538 00002A37 EB83                <1> 	jmp backtodos
  3539 00002A39 00000000            <1> stringstart dd 0
  3540                              <1> 
  3541                              <1> dosgetdate:
  3542 00002A3D E81E150000          <1> 	call time
  3543 00002A42 8A0D[66420000]      <1> 	mov cl, [RTCtimeYear]
  3544 00002A48 B500                <1> 	mov ch, 0
  3545 00002A4A 6681C1D007          <1> 	add cx, 2000
  3546 00002A4F 8A35[65420000]      <1> 	mov dh, [RTCtimeMonth]
  3547 00002A55 8A15[64420000]      <1> 	mov dl, [RTCtimeDay]
  3548 00002A5B E95CFFFFFF          <1> 	jmp backtodos
  3549                              <1> 
  3550                              <1> dosgettime:
  3551 00002A60 E8FB140000          <1> 	call time
  3552 00002A65 8A2D[63420000]      <1> 	mov ch, [RTCtimeHour]
  3553 00002A6B 8A0D[62420000]      <1> 	mov cl, [RTCtimeMinute]
  3554 00002A71 8A35[61420000]      <1> 	mov dh, [RTCtimeSecond]
  3555 00002A77 B200                <1> 	mov dl, 0
  3556 00002A79 E93EFFFFFF          <1> 	jmp backtodos
  3557                              <1> 	
  3558                              <1> dosexit:
  3559 00002A7E BE[C2840000]        <1> 	mov esi, line
  3560 00002A83 E86AF2FFFF          <1> 	call print
  3561 00002A88 61                  <1> 	popa
  3562 00002A89 9D                  <1> 	popf
  3563 00002A8A 8B25[08AE0300]      <1> 	mov esp, [previousstack]
  3564 00002A90 31DB                <1> 	xor ebx, ebx
  3565 00002A92 88C3                <1> 	mov bl, al
  3566 00002A94 80FB00              <1> 	cmp bl, 0
  3567 00002A97 0F85DEF1FFFF        <1> 	jne near exitprog.error
  3568 00002A9D C3                  <1> 	ret
  3569                                      %include "source/shush.asm"
  3570                              <1> os:
  3571                              <1> setdefenv:
  3572 00002A9E C605[14AE0300]2F    <1> 	mov byte [currentfolder], '/'
  3573 00002AA5 C705[10AE0300]0100- <1> 	mov dword [currentfolderloc], 1
  3574 00002AAD 0000                <1>
  3575 00002AAF E8EAF2FFFF          <1> 	call clear
  3576                              <1> 	
  3577                              <1> bootfilecheck:
  3578 00002AB4 803D[18B00300]01    <1> 	cmp byte [ranboot], 1
  3579 00002ABB 0F841E000000        <1> 	je near nobootfile
  3580                              <1> 	%ifdef hardware.automatic
  3581 00002AC1 E86F360000          <1> 		call initializelater ;Initialize components that have debug messages
  3582                              <1> 	%endif
  3583                              <1> 	%ifdef disk.none
  3584                              <1> 	%else
  3585 00002AC6 BF[81840000]        <1> 		mov edi, bootfilename
  3586 00002ACB BE00004000          <1> 		mov esi, 0x400000
  3587 00002AD0 E8963A0000          <1> 		call loadfile
  3588 00002AD5 83FA00              <1> 		cmp edx, 0
  3589 00002AD8 7505                <1> 		jne nobootfile
  3590 00002ADA E81A0D0000          <1> 		call progbatchfound
  3591                              <1> 	%endif
  3592                              <1> nobootfile:	
  3593 00002ADF C605[18B00300]01    <1> 	mov byte [ranboot], 1
  3594                              <1> 
  3595 00002AE6 BE[02000000]        <1> 	mov esi, signature
  3596                              <1> .sigcopyloop:	;this prevents an odd error
  3597 00002AEB 658A06              <1> 	mov al, [gs:esi]
  3598 00002AEE 8806                <1> 	mov [esi], al
  3599 00002AF0 46                  <1> 	inc esi
  3600 00002AF1 81FE[10000000]      <1> 	cmp esi, signatureend
  3601 00002AF7 72F2                <1> 	jb .sigcopyloop
  3602                              <1> 	
  3603 00002AF9 BE[02000000]        <1> 	mov esi, signature
  3604 00002AFE E8EFF1FFFF          <1> 	call print
  3605 00002B03 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3606 00002B09 E899060000          <1> 	call showdec
  3607 00002B0E E8DAF1FFFF          <1> 	call printline
  3608 00002B13 BE[9E840000]        <1> 	mov esi, userask
  3609 00002B18 E8D5F1FFFF          <1> 	call print
  3610                              <1> 
  3611                              <1> usercheck:
  3612 00002B1D BE[88C40300]        <1> 	mov esi, buftxt
  3613 00002B22 BF[88C80300]        <1> 	mov edi, buftxtend
  3614 00002B27 B00A                <1> 	mov al, 10
  3615 00002B29 E8EEF2FFFF          <1> 	call rdprint
  3616 00002B2E 56                  <1> 	push esi
  3617 00002B2F BE[A8840000]        <1> 	mov esi, pwdask
  3618 00002B34 E8B9F1FFFF          <1> 	call print
  3619 00002B39 5E                  <1> 	pop esi
  3620 00002B3A 46                  <1> 	inc esi
  3621 00002B3B 8935[2D2C0000]      <1> 	mov [esipass], esi
  3622                              <1> passcheck:
  3623 00002B41 E886F7FFFF          <1> 	call getchar
  3624 00002B46 3C0A                <1> 	cmp al, 10
  3625 00002B48 0F8438000000        <1> 	je near gotpass
  3626 00002B4E 3C08                <1> 	cmp al, 8
  3627 00002B50 0F8412000000        <1> 	je near backpass
  3628 00002B56 8806                <1> 	mov [esi], al
  3629 00002B58 46                  <1> 	inc esi
  3630 00002B59 30E4                <1> 	xor ah, ah
  3631 00002B5B B02A                <1> 	mov al, "*"
  3632 00002B5D E8E2F7FFFF          <1> 	call prcharint
  3633 00002B62 EBDD                <1> 	jmp passcheck
  3634 00002B64 08200800            <1> backcursor2 db 8," ",8,0
  3635                              <1> backpass:
  3636 00002B68 3B35[2D2C0000]      <1> 	cmp esi, [esipass]
  3637 00002B6E 0F84CDFFFFFF        <1> 	je near passcheck
  3638 00002B74 4E                  <1> 	dec esi
  3639 00002B75 C60600              <1> 	mov byte [esi], 0
  3640 00002B78 56                  <1> 	push esi
  3641 00002B79 BE[642B0000]        <1> 	mov esi, backcursor2
  3642 00002B7E E86FF1FFFF          <1> 	call print
  3643 00002B83 5E                  <1> 	pop esi
  3644 00002B84 EBBB                <1> 	jmp passcheck
  3645                              <1> gotpass:
  3646 00002B86 B00A                <1> 	mov al, 10
  3647 00002B88 E8B7F7FFFF          <1> 	call prcharint
  3648 00002B8D 30C0                <1> 	xor al, al
  3649 00002B8F 31C9                <1> 	xor ecx, ecx
  3650 00002B91 8806                <1> 	mov [esi], al
  3651 00002B93 BB[C4840000]        <1> 	mov ebx, userlst
  3652                              <1> userfind:
  3653 00002B98 BE[88C40300]        <1> 	mov esi, buftxt
  3654 00002B9D 8A06                <1> 	mov al, [esi]
  3655 00002B9F 3C00                <1> 	cmp al, 0
  3656 00002BA1 0F84F7FEFFFF        <1> 	je near os
  3657 00002BA7 891D[312C0000]      <1> 	mov [usercache], ebx
  3658 00002BAD E848030000          <1> 	call tester
  3659 00002BB2 3C01                <1> 	cmp al, 1
  3660 00002BB4 7416                <1> 	je pwdtest
  3661 00002BB6 41                  <1> 	inc ecx
  3662                              <1> nxtuser:
  3663 00002BB7 8A03                <1> 	mov al, [ebx]
  3664 00002BB9 43                  <1> 	inc ebx
  3665 00002BBA 3C00                <1> 	cmp al, 0
  3666 00002BBC 75F9                <1> 	jne nxtuser
  3667 00002BBE 81FB[E7840000]      <1> 	cmp ebx, userlstend
  3668 00002BC4 0F83D4FEFFFF        <1> 	jae near os
  3669 00002BCA EBCC                <1> 	jmp userfind
  3670                              <1> pwdtest:
  3671 00002BCC 46                  <1> 	inc esi
  3672 00002BCD 43                  <1> 	inc ebx
  3673 00002BCE E827030000          <1> 	call tester
  3674 00002BD3 3C01                <1> 	cmp al, 1
  3675 00002BD5 7402                <1> 	je pwdrgt
  3676 00002BD7 EBDE                <1> 	jmp nxtuser
  3677                              <1> pwdrgt:
  3678 00002BD9 D1E9                <1> 	shr ecx, 1
  3679 00002BDB 890D[14B00300]      <1> 	mov [uid], ecx
  3680 00002BE1 E8B8F1FFFF          <1> 	call clear
  3681 00002BE6 31C9                <1> 	xor ecx, ecx
  3682 00002BE8 41                  <1> 	inc ecx
  3683 00002BE9 890D[308A2D00]      <1> 	mov [commandbufpos], ecx
  3684                              <1> returnfromexp:
  3685 00002BEF 66B90002            <1> 	mov cx, 200h
  3686 00002BF3 BE[88C40300]        <1> 	mov esi, buftxt
  3687 00002BF8 8935[F62E0000]      <1> 	mov [currentcommandloc], esi
  3688 00002BFE E822000000          <1> 	call bufclr
  3689                              <1> clearolddata:
  3690 00002C03 31C0                <1> 	xor eax, eax
  3691 00002C05 A2[19B00300]        <1> 	mov [IFON], al
  3692 00002C0A A2[1AB00300]        <1> 	mov [IFTRUE], al
  3693 00002C0F A2[82B00300]        <1> 	mov [BATCHISON], al
  3694 00002C14 A3[7EB00300]        <1> 	mov [BATCHPOS], eax
  3695 00002C19 A2[83B00300]        <1> 	mov [LOOPON], al
  3696 00002C1E A3[84B00300]        <1> 	mov [LOOPPOS], eax
  3697 00002C23 EB30                <1> 	jmp nwcmd
  3698                              <1> bufclr:	
  3699 00002C25 30C0                <1> 	xor al, al
  3700 00002C27 8806                <1> 	mov [esi], al
  3701 00002C29 46                  <1> 	inc esi
  3702 00002C2A E2F9                <1> 	loop bufclr
  3703 00002C2C C3                  <1> 	ret
  3704                              <1> 
  3705 00002C2D 00000000            <1> esipass dd 0
  3706 00002C31 [C4840000]          <1> usercache dd userlst
  3707                              <1> 	
  3708                              <1> buftxtclear:
  3709 00002C35 30C0                <1> 	xor al, al
  3710 00002C37 BE[88C40300]        <1> 	mov esi, buftxt
  3711 00002C3C 81FE[88C80300]      <1> clearbuftxt: cmp esi, buf2
  3712 00002C42 730E                <1> 	jae retbufclr
  3713 00002C44 8806                <1> 	mov [esi], al
  3714 00002C46 46                  <1> 	inc esi
  3715 00002C47 EBF3                <1> 	jmp clearbuftxt
  3716                              <1> 
  3717 00002C49 39DE                <1> clearitbuf: cmp esi, ebx
  3718 00002C4B 7305                <1> 	jae retbufclr
  3719 00002C4D 8806                <1> 	mov [esi], al
  3720 00002C4F 46                  <1> 	inc esi
  3721 00002C50 EBF7                <1> 	jmp clearitbuf
  3722 00002C52 C3                  <1> retbufclr: ret
  3723                              <1> 
  3724 00002C53 EB00                <1> full:	jmp nwcmd
  3725                              <1> 
  3726                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3727                              <1> nwcmd:
  3728 00002C55 FB                  <1> 	sti
  3729 00002C56 31C0                <1> 	xor eax, eax
  3730 00002C58 3905[1E2E0000]      <1> 	cmp [nextcommandloc], eax
  3731 00002C5E 7413                <1> 	je nomultiplecommand
  3732 00002C60 8B35[1E2E0000]      <1> 	mov esi, [nextcommandloc]
  3733 00002C66 8935[222E0000]      <1> 	mov [thiscommandloc], esi
  3734 00002C6C E8BA010000          <1> 	call fixvariables
  3735 00002C71 EBE2                <1> 	jmp nwcmd
  3736                              <1> nomultiplecommand:
  3737 00002C73 A3[222E0000]        <1> 	mov [thiscommandloc], eax
  3738 00002C78 3805[14670000]      <1> 	cmp [threadson], al
  3739 00002C7E 7405                <1> 	je noclinwcmd
  3740 00002C80 A2[14670000]        <1> 	mov [threadson], al
  3741                              <1> noclinwcmd:
  3742 00002C85 B001                <1> 	mov al, 1
  3743 00002C87 3805[82B00300]      <1> 	cmp [BATCHISON], al
  3744 00002C8D 7501                <1> 	jne cancel
  3745 00002C8F C3                  <1> 	ret
  3746 00002C90 30C0                <1> cancel:	xor al, al
  3747 00002C92 A2[19B00300]        <1> 	mov [IFON], al
  3748 00002C97 A2[82B00300]        <1> 	mov [BATCHISON], al
  3749 00002C9C B05B                <1> 	mov al, '['
  3750 00002C9E 66BB0700            <1> 	mov bx, 7
  3751 00002CA2 E8B4F6FFFF          <1> 	call prcharq
  3752 00002CA7 8B35[312C0000]      <1> 	mov esi, [usercache]
  3753 00002CAD E81FF0FFFF          <1> 	call printquiet
  3754 00002CB2 BE[B2840000]        <1> 	mov esi, computer
  3755 00002CB7 E815F0FFFF          <1> 	call printquiet
  3756 00002CBC BE[14AE0300]        <1> 	mov esi, currentfolder
  3757 00002CC1 0335[0CAE0300]      <1> 	add esi, [lastfolderloc]
  3758 00002CC7 E805F0FFFF          <1> 	call printquiet
  3759 00002CCC BE[BD840000]        <1> 	mov esi, endprompt
  3760 00002CD1 E81CF0FFFF          <1> 	call print
  3761 00002CD6 E85AFFFFFF          <1> 	call buftxtclear
  3762 00002CDB BE[88C40300]        <1> 	mov esi, buftxt
  3763 00002CE0 C605[B5220000]01    <1> 	mov byte [commandedit], 1
  3764 00002CE7 B00A                <1> 	mov al, 10
  3765 00002CE9 66BB0700            <1> 	mov bx, 7
  3766 00002CED BF[88C80300]        <1> 	mov edi, buftxtend
  3767 00002CF2 E825F1FFFF          <1> 	call rdprint
  3768 00002CF7 C605[B5220000]00    <1> 	mov byte [commandedit], 0
  3769 00002CFE 803D[88C40300]00    <1> 	cmp byte [buftxt], 0
  3770 00002D05 0F844AFFFFFF        <1> 	je near nwcmd
  3771 00002D0B 8B35[308A2D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3772 00002D11 8935[2C8A2D00]      <1> 	mov [lastcommandpos], esi
  3773 00002D17 FF05[388A2D00]      <1> 	inc dword [commandsentered]
  3774 00002D1D BF[88C40300]        <1> 	mov edi, buftxt
  3775 00002D22 81C6[3C8A2D00]      <1> 	add esi, commandbuf
  3776 00002D28 81FE[3C9A2D00]      <1> 	cmp esi, commandbufend
  3777 00002D2E 7605                <1> 	jbe copycommand
  3778 00002D30 BE[3C8A2D00]        <1> 	mov esi, commandbuf
  3779                              <1> copycommand:
  3780 00002D35 8A07                <1> 	mov al, [edi]
  3781 00002D37 8806                <1> 	mov [esi], al
  3782 00002D39 47                  <1> 	inc edi
  3783 00002D3A 46                  <1> 	inc esi
  3784 00002D3B 3C00                <1> 	cmp al, 0
  3785 00002D3D 740F                <1> 	je donecopy
  3786 00002D3F 81FE[3C9A2D00]      <1> 	cmp esi, commandbufend
  3787 00002D45 76EE                <1> 	jbe copycommand
  3788 00002D47 BE[3C8A2D00]        <1> 	mov esi, commandbuf
  3789 00002D4C EBE7                <1> 	jmp copycommand
  3790                              <1> donecopy:
  3791 00002D4E 81EE[3C8A2D00]      <1> 	sub esi, commandbuf
  3792 00002D54 8935[308A2D00]      <1> 	mov [commandbufpos], esi
  3793 00002D5A E8C7000000          <1> 	call run
  3794 00002D5F E9F1FEFFFF          <1> 	jmp nwcmd
  3795                              <1> 
  3796 00002D64 E8CCFEFFFF          <1> input:	call buftxtclear
  3797 00002D69 BE[88C40300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3798 00002D6E BF[88C80300]        <1> 	mov edi, buftxtend
  3799 00002D73 B00A                <1> stdin:	mov al, 10
  3800 00002D75 B307                <1> 	mov bl, 7
  3801 00002D77 E8A0F0FFFF          <1> 	call rdprint
  3802 00002D7C C3                  <1> 	ret
  3803                              <1> 
  3804                              <1> replacevariable:
  3805 00002D7D 8A4601              <1> 	mov al, [esi + 1]
  3806 00002D80 C64601FF            <1> 	mov byte [esi + 1], 255
  3807 00002D84 3C24                <1> 	cmp al, "$"
  3808 00002D86 0F849F000000        <1> 	je near fixvariables
  3809 00002D8C 884601              <1> 	mov [esi + 1], al
  3810 00002D8F 56                  <1> 	push esi
  3811 00002D90 81EE[88C40300]      <1> 	sub esi, buftxt
  3812 00002D96 89F7                <1> 	mov edi, esi
  3813 00002D98 81C6[88C40300]      <1> 	add esi, buftxt
  3814 00002D9E 47                  <1> 	inc edi
  3815 00002D9F BB[88B00300]        <1> 	mov ebx, variables
  3816 00002DA4 E8AC160000          <1> 	call nxtvrech
  3817 00002DA9 89F7                <1> 	mov edi, esi
  3818 00002DAB 31DB                <1> 	xor ebx, ebx
  3819 00002DAD 4E                  <1> 	dec esi
  3820                              <1> findvarname:
  3821 00002DAE 4E                  <1> 	dec esi
  3822 00002DAF 8A06                <1> 	mov al, [esi]
  3823 00002DB1 43                  <1> 	inc ebx
  3824 00002DB2 3C04                <1> 	cmp al, 4
  3825 00002DB4 75F8                <1> 	jne findvarname
  3826 00002DB6 5E                  <1> 	pop esi
  3827                              <1> replacevarloop:
  3828 00002DB7 8A07                <1> 	mov al, [edi]
  3829 00002DB9 3C00                <1> 	cmp al, 0
  3830 00002DBB 0F8410000000        <1> 	je near compressbuftxt
  3831 00002DC1 83FB00              <1> 	cmp ebx, 0
  3832 00002DC4 0F8413000000        <1> 	je near expandbuftxt
  3833 00002DCA 8806                <1> 	mov [esi], al
  3834 00002DCC 4B                  <1> 	dec ebx
  3835 00002DCD 46                  <1> 	inc esi
  3836 00002DCE 47                  <1> 	inc edi
  3837 00002DCF EBE6                <1> 	jmp replacevarloop
  3838                              <1> compressbuftxt:
  3839 00002DD1 8A041E              <1> 	mov al, [esi + ebx]
  3840 00002DD4 8806                <1> 	mov [esi], al
  3841 00002DD6 46                  <1> 	inc esi
  3842 00002DD7 3C00                <1> 	cmp al, 0
  3843 00002DD9 75F6                <1> 	jne compressbuftxt
  3844 00002DDB EB4E                <1> 	jmp fixvariables
  3845                              <1> expandbuftxt:
  3846 00002DDD 89F1                <1> 	mov ecx, esi
  3847 00002DDF 8A26                <1> 	mov ah, [esi]
  3848                              <1> expandbuftxtlp:
  3849 00002DE1 8A1E                <1> 	mov bl, [esi]
  3850 00002DE3 46                  <1> 	inc esi
  3851 00002DE4 8A3E                <1> 	mov bh, [esi]
  3852 00002DE6 8826                <1> 	mov [esi], ah
  3853 00002DE8 88FC                <1> 	mov ah, bh
  3854 00002DEA 80FB00              <1> 	cmp bl, 0
  3855 00002DED 75F2                <1> 	jne expandbuftxtlp
  3856 00002DEF 89CE                <1> 	mov esi, ecx
  3857 00002DF1 8806                <1> 	mov [esi], al
  3858 00002DF3 47                  <1> 	inc edi
  3859 00002DF4 8A07                <1> 	mov al, [edi]
  3860 00002DF6 3C00                <1> 	cmp al, 0
  3861 00002DF8 0F842D000000        <1> 	je near fixvariables
  3862 00002DFE 46                  <1> 	inc esi
  3863 00002DFF EBDC                <1> 	jmp expandbuftxt
  3864                              <1> multipleprogline:
  3865 00002E01 30E4                <1> 	xor ah, ah
  3866 00002E03 8826                <1> 	mov [esi], ah
  3867 00002E05 46                  <1> 	inc esi
  3868 00002E06 8935[1E2E0000]      <1> 	mov [nextcommandloc], esi
  3869 00002E0C EB3B                <1> 	jmp donefixvariables
  3870                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3871 00002E0E 46                  <1> 	inc esi
  3872 00002E0F 8A06                <1> 	mov al, [esi]
  3873 00002E11 C606FF              <1> 	mov byte [esi], 255
  3874 00002E14 3C23                <1> 	cmp al, '#'
  3875 00002E16 7413                <1> 	je fixvariables
  3876 00002E18 4E                  <1> 	dec esi
  3877 00002E19 C60600              <1> 	mov byte [esi], 0
  3878 00002E1C EB0D                <1> 	jmp fixvariables
  3879                              <1> 	
  3880 00002E1E 00000000            <1> nextcommandloc dd 0
  3881 00002E22 00000000            <1> thiscommandloc dd 0	
  3882                              <1> run:
  3883 00002E26 BE[88C40300]        <1> 	mov esi, buftxt
  3884                              <1> fixvariables:
  3885 00002E2B 46                  <1> 	inc esi
  3886 00002E2C 8A06                <1> 	mov al, [esi]
  3887 00002E2E 3C23                <1> 	cmp al, '#'	;inline comment
  3888 00002E30 74DC                <1> 	je inlinecomment
  3889 00002E32 3C24                <1> 	cmp al, '$' ;variable
  3890 00002E34 0F8443FFFFFF        <1> 	je near replacevariable
  3891 00002E3A 3C3B                <1> 	cmp al, ';' ;program list
  3892 00002E3C 74C3                <1> 	je multipleprogline
  3893 00002E3E 3C00                <1> 	cmp al, 0
  3894 00002E40 75E9                <1> 	jne fixvariables
  3895 00002E42 31C0                <1> 	xor eax, eax
  3896 00002E44 A3[1E2E0000]        <1> 	mov [nextcommandloc], eax
  3897                              <1> donefixvariables:
  3898 00002E49 803D[A8330000]00    <1> 	cmp byte [indexdone], 0
  3899 00002E50 7505                <1> 	jne progtest
  3900 00002E52 E8D7040000          <1> 	call indexfiles
  3901                              <1> progtest:
  3902 00002E57 31C0                <1> 	xor eax, eax
  3903 00002E59 BB[08AA0300]        <1> 	mov ebx, fileindex
  3904 00002E5E 668B03              <1> prgnxt:	mov ax, [ebx]
  3905 00002E61 B1FF                <1> 	mov cl, 255
  3906 00002E63 B52C                <1> 	mov ch, 44
  3907 00002E65 6639C8              <1> 	cmp ax, cx
  3908 00002E68 740B                <1> 	je fndprg
  3909 00002E6A 43                  <1> 	inc ebx
  3910 00002E6B 81FB[08AE0300]      <1> 	cmp ebx, fileindexend
  3911 00002E71 7357                <1> 	jae prgnf
  3912 00002E73 EBE9                <1> 	jmp prgnxt
  3913 00002E75 83C302              <1> fndprg: add ebx, 2
  3914 00002E78 31C9                <1> 	xor ecx, ecx
  3915 00002E7A BE[88C40300]        <1> 	mov esi, buftxt
  3916 00002E7F 390D[222E0000]      <1> 	cmp [thiscommandloc], ecx
  3917 00002E85 7406                <1> 	je noprgtstmultiple
  3918 00002E87 8B35[222E0000]      <1> 	mov esi, [thiscommandloc]
  3919                              <1> noprgtstmultiple:
  3920 00002E8D E8A3000000          <1> 	call cndtest
  3921 00002E92 3C01                <1> 	cmp al, 1
  3922 00002E94 7302                <1> 	jae prggood
  3923 00002E96 EBC6                <1> 	jmp prgnxt
  3924 00002E98 81FB[08AE0300]      <1> prggood: cmp ebx, fileindexend
  3925 00002E9E 7355                <1> 	jae prgdn
  3926 00002EA0 31C0                <1> 	xor eax, eax
  3927 00002EA2 BE[88C40300]        <1> 	mov esi, buftxt
  3928 00002EA7 3905[222E0000]      <1> 	cmp [thiscommandloc], eax
  3929 00002EAD 7406                <1> 	je noprggoodmul
  3930 00002EAF 8B35[222E0000]      <1> 	mov esi, [thiscommandloc]
  3931                              <1> noprggoodmul:
  3932 00002EB5 8935[F62E0000]      <1> 	mov [currentcommandloc], esi
  3933 00002EBB 83C303              <1> 	add ebx, 3
  3934 00002EBE 8B3B                <1> 	mov edi, [ebx]
  3935 00002EC0 C605[14670000]02    <1> 	mov byte [threadson], 2
  3936 00002EC7 FFD7                <1> 	call edi
  3937 00002EC9 C3                  <1> 	ret
  3938                              <1> prgnf:	
  3939 00002ECA 8B35[F62E0000]      <1> 	mov esi, [currentcommandloc]
  3940 00002ED0 8A06                <1> 	mov al, [esi]
  3941 00002ED2 3C00                <1> 	cmp al, 0
  3942 00002ED4 741F                <1> 	je prgdn
  3943 00002ED6 BE[89840000]        <1> 	mov esi, notfound1
  3944 00002EDB E812EEFFFF          <1> 	call print
  3945 00002EE0 8B35[F62E0000]      <1> 	mov esi, [currentcommandloc]
  3946 00002EE6 E807EEFFFF          <1> 	call print
  3947 00002EEB BE[91840000]        <1> 	mov esi, notfound2
  3948 00002EF0 E8FDEDFFFF          <1> 	call print
  3949 00002EF5 C3                  <1> prgdn:	ret
  3950                              <1> 
  3951 00002EF6 00000000            <1> currentcommandloc dd 0
  3952                              <1> 
  3953                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3954 00002EFA 6631C0              <1> 	xor ax, ax
  3955 00002EFD 8A06                <1> retest:	mov al, [esi]
  3956 00002EFF 8A23                <1> 	mov ah, [ebx]
  3957 00002F01 3C00                <1> 	cmp al, 0
  3958 00002F03 7408                <1> 	je testtrue
  3959 00002F05 38E0                <1> 	cmp al, ah
  3960 00002F07 750C                <1> 	jne testfalse
  3961 00002F09 43                  <1> 	inc ebx
  3962 00002F0A 46                  <1> 	inc esi
  3963 00002F0B EBF0                <1> 	jmp retest
  3964                              <1> testtrue:
  3965 00002F0D 80FC00              <1> 	cmp ah, 0
  3966 00002F10 7503                <1> 	jne testfalse
  3967 00002F12 B001                <1> 	mov al, 1
  3968 00002F14 C3                  <1> 	ret
  3969                              <1> testfalse:
  3970 00002F15 30C0                <1> 	xor al, al
  3971 00002F17 C3                  <1> 	ret
  3972                              <1> 
  3973                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3974 00002F18 30C0                <1> 	xor al, al
  3975                              <1> opretest:
  3976 00002F1A 8A06                <1> 	mov al, [esi]
  3977 00002F1C 8A23                <1> 	mov ah, [ebx]
  3978 00002F1E 38E0                <1> 	cmp al, ah
  3979 00002F20 7510                <1> 	jne optestfalse
  3980 00002F22 80FC00              <1> 	cmp ah, 0
  3981 00002F25 7404                <1> 	je optesttrue
  3982 00002F27 43                  <1> 	inc ebx
  3983 00002F28 46                  <1> 	inc esi
  3984 00002F29 EBEF                <1> 	jmp opretest
  3985                              <1> optesttrue:
  3986 00002F2B 3C00                <1> 	cmp al, 0
  3987 00002F2D 7503                <1> 	jne optestfalse
  3988 00002F2F B001                <1> 	mov al, 1
  3989 00002F31 C3                  <1> 	ret
  3990                              <1> optestfalse:
  3991 00002F32 30C0                <1> 	xor al, al
  3992 00002F34 C3                  <1> 	ret
  3993                              <1> 
  3994                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3995 00002F35 30C0                <1> 	xor al, al
  3996 00002F37 8A06                <1> cndretest:	mov al, [esi]
  3997 00002F39 8A23                <1> 	mov ah, [ebx]
  3998 00002F3B 38CC                <1> 	cmp ah, cl
  3999 00002F3D 7408                <1> 	je cndtesttrue
  4000 00002F3F 38E0                <1> 	cmp al, ah
  4001 00002F41 750B                <1> 	jne cndtestfalse
  4002 00002F43 43                  <1> 	inc ebx
  4003 00002F44 46                  <1> 	inc esi
  4004 00002F45 EBF0                <1> 	jmp cndretest
  4005                              <1> cndtesttrue:
  4006 00002F47 38C8                <1> 	cmp al, cl
  4007 00002F49 7506                <1> 	jne cndtestalmost
  4008 00002F4B B001                <1> 	mov al, 1
  4009 00002F4D C3                  <1> 	ret
  4010                              <1> cndtestfalse:
  4011 00002F4E 30C0                <1> 	xor al, al
  4012 00002F50 C3                  <1> 	ret
  4013                              <1> cndtestalmost:
  4014 00002F51 B002                <1> 	mov al, 2
  4015 00002F53 C3                  <1> 	ret
  4016                              <1> 	
  4017                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4018                              <1> 		                ;ends if array seperator is found backwards after 0
  4019                              <1> 	arnxt:	      
  4020 00002F54 88E8                <1> 		mov al, ch
  4021 00002F56 88CC                <1> 		mov ah, cl        
  4022 00002F58 663906              <1> 		cmp [esi], ax
  4023 00002F5B 7445                <1> 		je ardn
  4024 00002F5D 66390E              <1> 		cmp [esi], cx
  4025 00002F60 7407                <1> 		je arfnd
  4026 00002F62 46                  <1> 		inc esi
  4027 00002F63 39DE                <1> 		cmp esi, ebx
  4028 00002F65 733B                <1> 		jae ardn
  4029 00002F67 EBEB                <1> 		jmp arnxt
  4030 00002F69 83C602              <1> 	arfnd: add esi, 2
  4031 00002F6C 891D[A32F0000]      <1> 		mov [arbx], ebx
  4032 00002F72 890D[A72F0000]      <1> 		mov [arcx], ecx
  4033 00002F78 E875EDFFFF          <1> 		call print
  4034 00002F7D 8935[A92F0000]      <1> 		mov [arsi], esi
  4035 00002F83 E865EDFFFF          <1> 		call printline
  4036 00002F88 8B1D[A32F0000]      <1> 		mov ebx, [arbx]
  4037 00002F8E 668B0D[A72F0000]    <1> 		mov cx, [arcx]
  4038 00002F95 8B35[A92F0000]      <1> 		mov esi, [arsi]
  4039 00002F9B 46                  <1> 		inc esi
  4040 00002F9C 39DE                <1> 		cmp esi, ebx
  4041 00002F9E 7302                <1> 		jae ardn
  4042 00002FA0 EBB2                <1> 		jmp arnxt
  4043 00002FA2 C3                  <1> 	ardn:	ret
  4044 00002FA3 00000000            <1> arbx:	dw 0,0
  4045 00002FA7 0000                <1> arcx:	db 0,0
  4046 00002FA9 00000000            <1> arsi:	dw 0,0
  4047                              <1> 
  4048                              <1> clearbuffer:
  4049 00002FAD BE[88C80300]        <1> 	mov esi, buf2
  4050 00002FB2 B030                <1> 	mov al, '0'
  4051 00002FB4 81FE[9CC80300]      <1> clearbuf: cmp esi, numbuf
  4052 00002FBA 7305                <1> 	jae doneclearbuff
  4053 00002FBC 8806                <1> 	mov [esi], al
  4054 00002FBE 46                  <1> 	inc esi
  4055 00002FBF EBF3                <1> 	jmp clearbuf
  4056                              <1> doneclearbuff: 
  4057 00002FC1 C3                  <1> 		ret
  4058                              <1> 
  4059                              <1> convert:
  4060 00002FC2 4E                  <1> 	dec esi
  4061 00002FC3 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4062                              <1> .lp:
  4063 00002FC5 89DE                <1> 	mov esi, ebx
  4064 00002FC7 83EE09              <1> 	sub esi, 9
  4065 00002FCA 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4066 00002FD0 720A                <1> 	jb .8
  4067 00002FD2 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4068 00002FD8 FE06                <1> 	inc byte [esi]
  4069 00002FDA EBE9                <1> 	jmp .lp
  4070 00002FDC 46                  <1> .8:	inc esi
  4071 00002FDD 81F900E1F505        <1> 	cmp ecx, 100000000
  4072 00002FE3 720A                <1> 	jb .7
  4073 00002FE5 81E900E1F505        <1> 	sub ecx, 100000000
  4074 00002FEB FE06                <1> 	inc byte [esi]
  4075 00002FED EBD6                <1> 	jmp .lp
  4076 00002FEF 46                  <1> .7:	inc esi
  4077 00002FF0 81F980969800        <1> 	cmp ecx, 10000000
  4078 00002FF6 720A                <1> 	jb .6
  4079 00002FF8 81E980969800        <1> 	sub ecx, 10000000
  4080 00002FFE FE06                <1> 	inc byte [esi]
  4081 00003000 EBC3                <1> 	jmp .lp
  4082 00003002 46                  <1> .6:	inc esi
  4083 00003003 81F940420F00        <1> 	cmp ecx, 1000000
  4084 00003009 720A                <1> 	jb .5
  4085 0000300B 81E940420F00        <1> 	sub ecx, 1000000
  4086 00003011 FE06                <1> 	inc byte [esi]
  4087 00003013 EBB0                <1> 	jmp .lp
  4088 00003015 46                  <1> .5:	inc esi
  4089 00003016 81F9A0860100        <1> 	cmp ecx, 100000
  4090 0000301C 720A                <1> 	jb .4
  4091 0000301E 81E9A0860100        <1> 	sub ecx, 100000
  4092 00003024 FE06                <1> 	inc byte [esi]
  4093 00003026 EB9D                <1> 	jmp .lp
  4094 00003028 46                  <1> .4:	inc esi
  4095 00003029 81F910270000        <1> 	cmp ecx, 10000
  4096 0000302F 720A                <1> 	jb .3
  4097 00003031 81E910270000        <1> 	sub ecx, 10000
  4098 00003037 FE06                <1> 	inc byte [esi]
  4099 00003039 EB8A                <1> 	jmp .lp
  4100 0000303B 46                  <1> .3:	inc esi
  4101 0000303C 81F9E8030000        <1> 	cmp ecx, 1000
  4102 00003042 720D                <1> 	jb .2
  4103 00003044 81E9E8030000        <1> 	sub ecx, 1000
  4104 0000304A FE06                <1> 	inc byte [esi]
  4105 0000304C E974FFFFFF          <1> 	jmp .lp
  4106 00003051 46                  <1> .2:	inc esi
  4107 00003052 83F964              <1> 	cmp ecx, 100
  4108 00003055 720A                <1> 	jb .1
  4109 00003057 83E964              <1> 	sub ecx, 100
  4110 0000305A FE06                <1> 	inc byte [esi]
  4111 0000305C E964FFFFFF          <1> 	jmp .lp
  4112 00003061 46                  <1> .1:	inc esi
  4113 00003062 83F90A              <1> 	cmp ecx, 10
  4114 00003065 720A                <1> 	jb .0
  4115 00003067 83E90A              <1> 	sub ecx, 10
  4116 0000306A FE06                <1> 	inc byte [esi]
  4117 0000306C E954FFFFFF          <1> 	jmp .lp
  4118 00003071 46                  <1> .0:	inc esi
  4119 00003072 83F901              <1> 	cmp ecx, 1
  4120 00003075 720A                <1> 	jb .dn
  4121 00003077 83E901              <1> 	sub ecx, 1
  4122 0000307A FE06                <1> 	inc byte [esi]
  4123 0000307C E944FFFFFF          <1> 	jmp .lp
  4124                              <1> .dn:
  4125 00003081 C3                  <1> 	ret
  4126                              <1> 
  4127                              <1> 	
  4128                              <1> 
  4129 00003082 00<rept>            <1> hexnumber times 8 db 0
  4130 0000308A 202000              <1> hexnumberend db "  ",0
  4131                              <1> 
  4132                              <1> converthex:
  4133                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4134 0000308D 56                  <1> 	push esi
  4135 0000308E B030                <1> 	mov al, "0"
  4136 00003090 39FE                <1> .clearlp: cmp esi, edi
  4137 00003092 7305                <1> 	jae .doneclear
  4138 00003094 8806                <1> 	mov [esi], al
  4139 00003096 46                  <1> 	inc esi
  4140 00003097 EBF7                <1> 	jmp .clearlp
  4141                              <1> .doneclear:
  4142 00003099 83EE02              <1> 	sub esi, 2
  4143 0000309C 89C8                <1> 	mov eax, ecx
  4144                              <1> .loop:
  4145 0000309E 30FF                <1> 	xor bh, bh
  4146 000030A0 88C3                <1> 	mov bl, al
  4147 000030A2 66C1E304            <1> 	shl bx, 4
  4148 000030A6 C0EB04              <1> 	shr bl, 4
  4149 000030A9 86DF                <1> 	xchg bl, bh ;they are backwards
  4150 000030AB 80C330              <1> 	add bl, 48
  4151 000030AE 80FB39              <1> 	cmp bl, "9"
  4152 000030B1 7609                <1> 	jbe .goodbl
  4153 000030B3 80EB30              <1> 	sub bl, 48
  4154 000030B6 80EB0A              <1> 	sub bl, 0xA
  4155 000030B9 80C341              <1> 	add bl, "A"
  4156                              <1> .goodbl:
  4157 000030BC 80C730              <1> 	add bh, 48
  4158 000030BF 80FF39              <1> 	cmp bh, "9"
  4159 000030C2 7609                <1> 	jbe .goodbh
  4160 000030C4 80EF30              <1> 	sub bh, 48
  4161 000030C7 80EF0A              <1> 	sub bh, 0xA
  4162 000030CA 80C741              <1> 	add bh, "A"
  4163                              <1> .goodbh:
  4164 000030CD C1E808              <1> 	shr eax, 8
  4165 000030D0 66891E              <1> 	mov [esi], bx
  4166 000030D3 83EE02              <1> 	sub esi, 2
  4167 000030D6 3B3424              <1> 	cmp esi, [esp]
  4168 000030D9 7205                <1> 	jb .done
  4169 000030DB 83F800              <1> 	cmp eax, 0
  4170 000030DE 75BE                <1> 	jne .loop
  4171                              <1> .done:
  4172 000030E0 5E                  <1> 	pop esi
  4173 000030E1 C3                  <1> 	ret
  4174                              <1> 	
  4175                              <1> 	
  4176 000030E2 00                  <1> smallhex db 0
  4177 000030E3 01                  <1> firsthexshown db 1
  4178                              <1> showhexsmall:
  4179 000030E4 C605[E2300000]01    <1> 	mov byte [smallhex], 1
  4180 000030EB E808000000          <1> 	call showhex
  4181 000030F0 C605[E2300000]00    <1> 	mov byte [smallhex], 0
  4182 000030F7 C3                  <1> 	ret
  4183                              <1> showhex:
  4184 000030F8 60                  <1> 	pusha
  4185 000030F9 BE[82300000]        <1> 	mov esi, hexnumber
  4186 000030FE BF[8A300000]        <1> 	mov edi, hexnumberend
  4187 00003103 E885FFFFFF          <1> 	call converthex
  4188 00003108 803D[E3300000]01    <1> 	cmp byte [firsthexshown], 1
  4189 0000310F 7503                <1> 	jne .show
  4190 00003111 6631D2              <1> 	xor dx, dx
  4191                              <1> .show:
  4192 00003114 803D[E3300000]03    <1> 	cmp byte [firsthexshown], 3
  4193 0000311B 7505                <1> 	jne .nonewhexline
  4194 0000311D E8CBEBFFFF          <1> 	call printline
  4195                              <1> .nonewhexline:
  4196 00003122 803D[E3300000]04    <1> 	cmp byte [firsthexshown], 4
  4197 00003129 751F                <1> 	jne .notab
  4198 0000312B B1A0                <1> 	mov cl, 160
  4199 0000312D 28D1                <1> 	sub cl, dl
  4200 0000312F C0E905              <1> 	shr cl, 5
  4201 00003132 C0E105              <1> 	shl cl, 5
  4202 00003135 80F900              <1> 	cmp cl, 0
  4203 00003138 7507                <1> 	jne .nonewline
  4204 0000313A E8AEEBFFFF          <1> 	call printline
  4205 0000313F EB09                <1> 	jmp .notab
  4206                              <1> .nonewline:
  4207 00003141 80C20F              <1> 	add dl, 15
  4208 00003144 C0EA04              <1> 	shr dl, 4
  4209 00003147 C0E204              <1> 	shl dl, 4
  4210                              <1> .notab:
  4211 0000314A BE[82300000]        <1> 	mov esi, hexnumber
  4212 0000314F 803D[E2300000]01    <1> 	cmp byte [smallhex],1
  4213 00003156 7503                <1> 	jne .nosmall
  4214 00003158 83C606              <1> 	add esi, 6
  4215                              <1> .nosmall:
  4216 0000315B 803D[E3300000]05    <1> 	cmp byte [firsthexshown], 5
  4217 00003162 7507                <1> 	jne .noquiet
  4218 00003164 E868EBFFFF          <1> 	call printquiet
  4219 00003169 EB15                <1> 	jmp .donequiet
  4220                              <1> .noquiet:
  4221 0000316B 803D[E3300000]06    <1> 	cmp byte [firsthexshown], 6
  4222 00003172 7507                <1> 	jne .normal
  4223 00003174 E86BEBFFFF          <1> 	call printhighlight
  4224 00003179 EB05                <1> 	jmp .donequiet
  4225                              <1> .normal:
  4226 0000317B E872EBFFFF          <1> 	call print
  4227                              <1> .donequiet:
  4228 00003180 803D[E3300000]02    <1> 	cmp byte [firsthexshown], 2
  4229 00003187 7505                <1> 	jne .shown
  4230 00003189 E85FEBFFFF          <1> 	call printline
  4231                              <1> .shown:
  4232 0000318E C605[E3300000]00    <1> 	mov byte [firsthexshown], 0
  4233 00003195 61                  <1> 	popa
  4234 00003196 C3                  <1> 	ret
  4235                              <1> 
  4236                              <1> 
  4237 00003197 303030303030303030- <1> decnumber db "00000000000000"
  4238 000031A0 3030303030          <1>
  4239 000031A5 2000                <1> decnumberend: db " ",0
  4240                              <1> 
  4241                              <1> showdec: ;same as showhex, just uses decimal conversion
  4242 000031A7 60                  <1> 	pusha
  4243 000031A8 BF[97310000]        <1> 	mov edi, decnumber
  4244 000031AD BE[A5310000]        <1> 	mov esi, decnumberend
  4245                              <1> .clear:
  4246 000031B2 C60730              <1> 	mov byte [edi], '0'
  4247 000031B5 47                  <1> 	inc edi
  4248 000031B6 39F7                <1> 	cmp edi, esi
  4249 000031B8 72F8                <1> 	jb .clear
  4250 000031BA BF[97310000]        <1> 	mov edi, decnumber
  4251 000031BF E8FEFDFFFF          <1> 	call convert
  4252 000031C4 803D[E3300000]01    <1> 	cmp byte [firsthexshown], 1
  4253 000031CB 7503                <1> 	jne .show
  4254 000031CD 6631D2              <1> 	xor dx, dx
  4255                              <1> .show:
  4256 000031D0 803D[E3300000]03    <1> 	cmp byte [firsthexshown], 3
  4257 000031D7 7505                <1> 	jne .nonewdecline
  4258 000031D9 E80FEBFFFF          <1> 	call printline
  4259                              <1> .nonewdecline:
  4260 000031DE 803D[E3300000]04    <1> 	cmp byte [firsthexshown], 4
  4261 000031E5 751F                <1> 	jne .notab
  4262 000031E7 B1A0                <1> 	mov cl, 160
  4263 000031E9 28D1                <1> 	sub cl, dl
  4264 000031EB C0E905              <1> 	shr cl, 5
  4265 000031EE C0E105              <1> 	shl cl, 5
  4266 000031F1 80F900              <1> 	cmp cl, 0
  4267 000031F4 7507                <1> 	jne .nonewline
  4268 000031F6 E8F2EAFFFF          <1> 	call printline
  4269 000031FB EB09                <1> 	jmp .notab
  4270                              <1> .nonewline:
  4271 000031FD 80C20F              <1> 	add dl, 15
  4272 00003200 C0EA04              <1> 	shr dl, 4
  4273 00003203 C0E204              <1> 	shl dl, 4
  4274                              <1> .notab:
  4275 00003206 BE[97310000]        <1> 	mov esi, decnumber
  4276 0000320B 4E                  <1> 	dec esi
  4277                              <1> .sifind:
  4278 0000320C 46                  <1> 	inc esi
  4279 0000320D 81FE[A4310000]      <1> 	cmp esi, decnumberend - 1
  4280 00003213 7305                <1> 	jae .nosifind
  4281 00003215 803E30              <1> 	cmp byte [esi], '0'
  4282 00003218 74F2                <1> 	je .sifind
  4283                              <1> .nosifind:
  4284 0000321A E8D3EAFFFF          <1> 	call print
  4285 0000321F 803D[E3300000]02    <1> 	cmp byte [firsthexshown], 2
  4286 00003226 7505                <1> 	jne .shown
  4287 00003228 E8C0EAFFFF          <1> 	call printline
  4288                              <1> .shown:
  4289 0000322D C605[E3300000]00    <1> 	mov byte [firsthexshown], 0
  4290 00003234 61                  <1> 	popa
  4291 00003235 C3                  <1> 	ret
  4292                              <1> 	
  4293                              <1> cnvrthextxt:
  4294 00003236 31C9                <1> 	xor ecx, ecx
  4295 00003238 31C0                <1> 	xor eax, eax
  4296 0000323A 31D2                <1> 	xor edx, edx
  4297 0000323C 31DB                <1> 	xor ebx, ebx
  4298 0000323E 4E                  <1> 	dec esi
  4299                              <1> .end:
  4300 0000323F 46                  <1> 	inc esi
  4301 00003240 8A06                <1> 	mov al, [esi]
  4302 00003242 3C00                <1> 	cmp al, 0
  4303 00003244 75F9                <1> 	jne .end
  4304                              <1> .loop:
  4305 00003246 4E                  <1> 	dec esi
  4306 00003247 8A06                <1> 	mov al, [esi]
  4307 00003249 3C41                <1> 	cmp al, "A"
  4308 0000324B 731F                <1> 	jae .char
  4309 0000324D 2C30                <1> 	sub al, 48
  4310 0000324F 3C10                <1> 	cmp al, 16
  4311 00003251 7718                <1> 	ja .done
  4312                              <1> .donechar:
  4313 00003253 83FA00              <1> 	cmp edx, 0
  4314 00003256 740B                <1> 	je .noshl
  4315 00003258 89D3                <1> 	mov ebx, edx
  4316                              <1> .shl:
  4317 0000325A C1E004              <1> 	shl eax, 4
  4318 0000325D 4B                  <1> 	dec ebx
  4319 0000325E 83FB00              <1> 	cmp ebx, 0
  4320 00003261 75F7                <1> 	jne .shl
  4321                              <1> .noshl:
  4322 00003263 42                  <1> 	inc edx
  4323 00003264 01C1                <1> 	add ecx, eax
  4324 00003266 83FA08              <1> 	cmp edx, 8
  4325 00003269 72DB                <1> 	jb .loop
  4326                              <1> .done:
  4327 0000326B C3                  <1> 	ret
  4328                              <1> .char:
  4329 0000326C 3C46                <1> 	cmp al, "F"
  4330 0000326E 77FB                <1> 	ja .done
  4331 00003270 2C41                <1> 	sub al, "A"
  4332 00003272 040A                <1> 	add al, 0xA
  4333 00003274 EBDD                <1> 	jmp .donechar
  4334                              <1> 	
  4335                              <1> 	
  4336                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4337 00003276 31C9                <1> 	xor ecx, ecx
  4338 00003278 31C0                <1> 	xor eax, eax
  4339 0000327A 31D2                <1> 	xor edx, edx
  4340 0000327C 31DB                <1> 	xor ebx, ebx
  4341 0000327E 4E                  <1> 	dec esi
  4342                              <1> .lp:
  4343 0000327F 46                  <1> 	inc esi
  4344 00003280 8A06                <1> 	mov al, [esi]
  4345 00003282 3C00                <1> 	cmp al, 0
  4346 00003284 75F9                <1> 	jne .lp
  4347 00003286 4E                  <1> 	dec esi
  4348 00003287 8A06                <1> 	mov al, [esi]
  4349 00003289 3C2E                <1> 	cmp al, '.'
  4350 0000328B 7503                <1> 	jne .dot
  4351 0000328D 46                  <1> 	inc esi
  4352 0000328E EBEF                <1> 	jmp .lp
  4353                              <1> .dot:
  4354 00003290 3C20                <1> 	cmp al, ' '
  4355 00003292 7404                <1> 	je .zero
  4356 00003294 3C30                <1> 	cmp al, '0'
  4357 00003296 7504                <1> 	jne .txtlp
  4358                              <1> .zero: 
  4359 00003298 39FE                <1> 		cmp esi, edi
  4360 0000329A 743F                <1> 		je .done
  4361                              <1> .txtlp:
  4362 0000329C 31C0                <1> 	xor eax, eax
  4363 0000329E 8A06                <1> 	mov al, [esi]
  4364 000032A0 3C3D                <1> 	cmp al, '='
  4365 000032A2 7437                <1> 	je .done
  4366 000032A4 3C30                <1> 	cmp al, 48
  4367 000032A6 7233                <1> 	jb .done
  4368 000032A8 3C3A                <1> 	cmp al, 58
  4369 000032AA 732F                <1> 	jae .done
  4370 000032AC 3C23                <1> 	cmp al, '#'
  4371 000032AE 742B                <1> 	je .done
  4372 000032B0 39FE                <1> 	cmp esi, edi
  4373 000032B2 7227                <1> 	jb .done
  4374 000032B4 83F900              <1> 	cmp ecx, 0
  4375 000032B7 7708                <1> 	ja .exp
  4376 000032B9 2C30                <1> .noexp:	sub al, 48
  4377 000032BB 01C2                <1> 	add edx, eax
  4378 000032BD 4E                  <1> 	dec esi
  4379 000032BE 41                  <1> 	inc ecx
  4380 000032BF EBDB                <1> 	jmp .txtlp
  4381 000032C1 83F900              <1> .exp:	cmp ecx, 0
  4382 000032C4 74F3                <1> 	je .noexp
  4383 000032C6 2C30                <1> 	sub al, 48
  4384 000032C8 51                  <1> 	push ecx
  4385                              <1> .expmul:
  4386 000032C9 89C3                <1> 	mov ebx, eax
  4387 000032CB 01D8                <1> 	add eax, ebx
  4388 000032CD C1E303              <1> 	shl ebx, 3
  4389 000032D0 01D8                <1> 	add eax, ebx
  4390 000032D2 E2F5                <1> 	loop .expmul
  4391 000032D4 01C2                <1> 	add edx, eax
  4392 000032D6 59                  <1> 	pop ecx
  4393 000032D7 4E                  <1> 	dec esi
  4394 000032D8 41                  <1> 	inc ecx
  4395 000032D9 EBC1                <1> 	jmp .txtlp
  4396 000032DB 89D1                <1> .done: mov ecx, edx
  4397 000032DD C3                  <1> 	ret
  4398                              <1> 
  4399                              <1> benchmarki: ;output number of clocks since initial value
  4400 000032DE 0F31                <1> 	rdtsc
  4401 000032E0 8B1D[ED840000]      <1> 	mov ebx, [initialtsc]
  4402 000032E6 8B0D[F1840000]      <1> 	mov ecx, [initialtsc + 4]
  4403 000032EC EB0E                <1> 	jmp benchmarkl.calc
  4404                              <1> 
  4405                              <1> benchmarkl: ;output number of clocks since last benchmark
  4406 000032EE 0F31                <1> 	rdtsc
  4407 000032F0 8B1D[F5840000]      <1> 	mov ebx, [lasttsc]
  4408 000032F6 8B0D[F9840000]      <1> 	mov ecx, [lasttsc + 4]
  4409                              <1> .calc:
  4410 000032FC 29D8                <1> 	sub eax, ebx
  4411 000032FE 7701                <1> 	ja .noover
  4412 00003300 4A                  <1> 	dec edx
  4413                              <1> .noover:
  4414 00003301 29CA                <1> 	sub edx, ecx
  4415 00003303 8B0C24              <1> 	mov ecx, [esp]
  4416 00003306 E8EDFDFFFF          <1> 	call showhex
  4417 0000330B 89D1                <1> 	mov ecx, edx
  4418 0000330D E8E6FDFFFF          <1> 	call showhex
  4419 00003312 89C1                <1> 	mov ecx, eax
  4420 00003314 E8DFFDFFFF          <1> 	call showhex
  4421 00003319 E8CFE9FFFF          <1> 	call printline
  4422 0000331E 0F31                <1> 	rdtsc
  4423 00003320 A3[F5840000]        <1> 	mov [lasttsc], eax
  4424 00003325 8915[F9840000]      <1> 	mov [lasttsc + 4], edx
  4425 0000332B C3                  <1> 	ret
  4426                                      %include "source/programs.asm"
  4427 0000332C FF2C                <1> filetypes db 255,44
  4428                              <1> progstart:		;programs start here
  4429                              <1> indexfiles:
  4430 0000332E BE[2E330000]        <1> 	mov esi, progstart
  4431 00003333 BB[08AA0300]        <1> 	mov ebx, fileindex
  4432 00003338 BF[2E330000]        <1> 	mov edi, progstart
  4433 0000333D 83EF02              <1> 	sub edi, 2
  4434                              <1> indexloop:
  4435 00003340 668B0E              <1> 	mov cx, [esi]
  4436                              <1> 	indexloop2:
  4437 00003343 663B0F              <1> 		cmp cx, [edi]
  4438 00003346 741E                <1> 		je indexloop2done
  4439 00003348 83EF02              <1> 		sub edi, 2
  4440 0000334B 81FF[2C330000]      <1> 		cmp edi, filetypes
  4441 00003351 73F0                <1> 		jae indexloop2
  4442 00003353 BF[2E330000]        <1> 	mov edi, progstart
  4443 00003358 83EF02              <1> 	sub edi, 2
  4444 0000335B 46                  <1> 	inc esi
  4445 0000335C 81FE[16510000]      <1> 	cmp esi, batchprogend
  4446 00003362 733C                <1> 	jae indexloopdone
  4447 00003364 EBDA                <1> 	jmp indexloop
  4448                              <1> indexloop2done:
  4449 00003366 66890B              <1> 	mov [ebx], cx
  4450 00003369 83C302              <1> 	add ebx, 2
  4451 0000336C 83C602              <1> 	add esi, 2
  4452                              <1> 	nameindex:
  4453 0000336F 8A0E                <1> 		mov cl, [esi]
  4454 00003371 80F900              <1> 		cmp cl, 0
  4455 00003374 7406                <1> 		je nameindexdone
  4456 00003376 880B                <1> 		mov [ebx], cl
  4457 00003378 46                  <1> 		inc esi
  4458 00003379 43                  <1> 		inc ebx
  4459 0000337A EBF3                <1> 		jmp nameindex
  4460                              <1> 	nameindexdone:
  4461 0000337C 43                  <1> 		inc ebx
  4462 0000337D 66C7030000          <1> 		mov word [ebx], 0
  4463 00003382 83C302              <1> 		add ebx, 2
  4464 00003385 46                  <1> 		inc esi
  4465 00003386 8933                <1> 		mov [ebx], esi
  4466 00003388 83C304              <1> 		add ebx, 4
  4467 0000338B 66C7030000          <1> 		mov word [ebx], 0
  4468 00003390 83C302              <1> 		add ebx, 2
  4469 00003393 81FB[08AE0300]      <1> 		cmp ebx, fileindexend
  4470 00003399 7305                <1> 		jae indexloopdone
  4471 0000339B 83C601              <1> 		add esi, 1
  4472 0000339E EBA0                <1> 		jmp indexloop
  4473 000033A0 C605[A8330000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4474 000033A7 C3                  <1> 		ret
  4475 000033A8 00                  <1> indexdone db 0
  4476                              <1> %include 'source/programs/_comment.asm' ;#
  4477 000033A9 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4478 000033AD C3                  <2> 	ret 
  4479                              <1> %include 'source/programs/_math.asm' ;!
  4480 000033AE FF2C2100            <2> db 255,44,"!",0
  4481                              <2> 	num:	
  4482 000033B2 E8F6FBFFFF          <2> 		call clearbuffer
  4483 000033B7 C605[0B360000]00    <2> 		mov byte [decimal], 0
  4484 000033BE C605[0C360000]00    <2> 		mov byte [decimal2], 0
  4485 000033C5 8B35[F62E0000]      <2> 		mov esi, [currentcommandloc]
  4486 000033CB 31C0                <2> 		xor eax, eax
  4487 000033CD 31C9                <2> 		xor ecx, ecx
  4488 000033CF 31DB                <2> 		xor ebx, ebx
  4489 000033D1 8A06                <2> 	num2:	mov al, [esi]
  4490 000033D3 3C2B                <2> 		cmp al, '+'
  4491 000033D5 7416                <2> 		je operatorfound
  4492 000033D7 3C2D                <2> 		cmp al, '-'
  4493 000033D9 7412                <2> 		je operatorfound
  4494 000033DB 3C2A                <2> 		cmp al, '*'
  4495 000033DD 740E                <2> 		je operatorfound
  4496 000033DF 3C2F                <2> 		cmp al, '/'
  4497 000033E1 740A                <2> 		je operatorfound
  4498 000033E3 3C5E                <2> 		cmp al, '^'
  4499 000033E5 7406                <2> 		je operatorfound
  4500 000033E7 46                  <2> 		inc esi
  4501 000033E8 84C0                <2> 		test al, al
  4502 000033EA 75E5                <2> 		jnz num2
  4503 000033EC C3                  <2> 		ret
  4504 000033ED 50                  <2> 	operatorfound: push eax
  4505 000033EE 30E4                <2> 		xor ah, ah
  4506 000033F0 8826                <2> 		mov [esi], ah
  4507 000033F2 89F7                <2> 		mov edi, esi
  4508 000033F4 46                  <2> 		inc esi
  4509 000033F5 8A06                <2> 		mov al, [esi]
  4510 000033F7 3C25                <2> 		cmp al, '%'
  4511 000033F9 0F845E000000        <2> 		je near resultnum1
  4512                              <2> 	varnum2: 
  4513 000033FF 57                  <2> 		push edi
  4514 00003400 E8A0000000          <2> 		call checkdecimal
  4515 00003405 5F                  <2> 		pop edi
  4516 00003406 E86BFEFFFF          <2> 		call cnvrttxt
  4517                              <2> 	vrnm2:
  4518 0000340B 89CB                <2> 		mov ebx, ecx
  4519 0000340D 53                  <2> 		push ebx
  4520 0000340E E89AFBFFFF          <2> 		call clearbuffer
  4521 00003413 8B35[F62E0000]      <2> 		mov esi, [currentcommandloc]
  4522 00003419 89F7                <2> 		mov edi, esi
  4523 0000341B 46                  <2> 		inc esi
  4524 0000341C 8A06                <2> 		mov al, [esi]
  4525 0000341E 3C25                <2> 		cmp al, '%'
  4526 00003420 0F844B000000        <2> 		je near resultnum2
  4527                              <2> 	varnum4: 
  4528 00003426 57                  <2> 		push edi
  4529 00003427 E865000000          <2> 		call checkdecimal2
  4530 0000342C 5F                  <2> 		pop edi
  4531 0000342D E844FEFFFF          <2> 		call cnvrttxt
  4532                              <2> 	vrnm4:
  4533 00003432 5B                  <2> 		pop ebx
  4534 00003433 58                  <2> 		pop eax
  4535 00003434 3C2B                <2> 		cmp al, '+'
  4536 00003436 0F8497000000        <2> 		je near plusnum
  4537 0000343C 3C2D                <2> 		cmp al, '-'
  4538 0000343E 0F8498000000        <2> 		je near subnum
  4539 00003444 3C2A                <2> 		cmp al, '*'
  4540 00003446 0F8499000000        <2> 		je near mulnum
  4541 0000344C 3C2F                <2> 		cmp al, '/'
  4542 0000344E 0F84A4000000        <2> 		je near divnum
  4543 00003454 3C5E                <2> 		cmp al, '^'
  4544 00003456 0F84BB000000        <2> 		je near expnum
  4545 0000345C C3                  <2> 		ret
  4546                              <2> 	resultnum1:
  4547 0000345D 8A0D[0D360000]      <2> 		mov cl, [decimalresult]
  4548 00003463 880D[0B360000]      <2> 		mov [decimal], cl
  4549 00003469 8B0D[0E360000]      <2> 		mov ecx, [result]
  4550 0000346F EB9A                <2> 		jmp vrnm2
  4551                              <2> 	resultnum2:
  4552 00003471 8A0D[0B360000]      <2> 		mov cl, [decimal]
  4553 00003477 880D[0C360000]      <2> 		mov [decimal2], cl
  4554 0000347D 8A0D[0D360000]      <2> 		mov cl, [decimalresult]
  4555 00003483 880D[0B360000]      <2> 		mov [decimal], cl
  4556 00003489 8B0D[0E360000]      <2> 		mov ecx, [result]
  4557 0000348F EBA1                <2> 		jmp vrnm4
  4558                              <2> 	checkdecimal2:
  4559 00003491 8A25[0B360000]      <2> 		mov ah, [decimal]
  4560 00003497 8825[0C360000]      <2> 		mov [decimal2], ah
  4561 0000349D 30E4                <2> 		xor ah, ah
  4562 0000349F 8825[0B360000]      <2> 		mov [decimal], ah
  4563                              <2> 	checkdecimal:
  4564 000034A5 89F7                <2> 		mov edi, esi
  4565                              <2> 	chkdec1:
  4566 000034A7 8A07                <2> 		mov al, [edi]
  4567 000034A9 3C2E                <2> 		cmp al, '.'
  4568 000034AB 0F840B000000        <2> 		je near fnddec
  4569 000034B1 3C00                <2> 		cmp al, 0
  4570 000034B3 0F8419000000        <2> 		je near nodecimal
  4571 000034B9 47                  <2> 		inc edi
  4572 000034BA EBEB                <2> 		jmp chkdec1
  4573                              <2> 	fnddec:
  4574 000034BC 8A4701              <2> 		mov al, [edi + 1]
  4575 000034BF 8807                <2> 		mov [edi], al
  4576 000034C1 3C00                <2> 		cmp al, 0
  4577 000034C3 0F8409000000        <2> 		je near nodecimal
  4578 000034C9 FE05[0B360000]      <2> 		inc byte [decimal]
  4579 000034CF 47                  <2> 		inc edi
  4580 000034D0 EBEA                <2> 		jmp fnddec
  4581                              <2> 	nodecimal:
  4582 000034D2 C3                  <2> 		ret
  4583                              <2> 	plusnum:
  4584 000034D3 E8F4000000          <2> 		call decaddfix
  4585 000034D8 01D9                <2> 		add ecx, ebx
  4586 000034DA EB75                <2> 		jmp retnum
  4587                              <2> 	subnum:
  4588 000034DC E8EB000000          <2> 		call decaddfix
  4589 000034E1 29D9                <2> 		sub ecx, ebx
  4590 000034E3 EB6C                <2> 		jmp retnum
  4591                              <2> 	mulnum:
  4592 000034E5 A0[0C360000]        <2> 		mov al, [decimal2]
  4593 000034EA 0005[0B360000]      <2> 		add [decimal], al
  4594 000034F0 89C8                <2> 		mov eax, ecx
  4595 000034F2 F7E3                <2> 		mul ebx
  4596 000034F4 89C1                <2> 		mov ecx, eax
  4597 000034F6 EB59                <2> 		jmp retnum
  4598                              <2> 	divnum:
  4599 000034F8 E8CF000000          <2> 		call decaddfix
  4600 000034FD 30C0                <2> 		xor al, al
  4601 000034FF A2[0B360000]        <2> 		mov [decimal], al
  4602 00003504 31D2                <2> 		xor edx, edx
  4603 00003506 89C8                <2> 		mov eax, ecx
  4604 00003508 83FB00              <2> 		cmp ebx, 0
  4605 0000350B 0F8440000000        <2> 		je near retnum
  4606 00003511 F7F3                <2> 		div ebx
  4607 00003513 89C1                <2> 		mov ecx, eax
  4608 00003515 EB3A                <2> 		jmp retnum
  4609                              <2> 	expnum:
  4610 00003517 8A15[0B360000]      <2> 		mov dl, [decimal]
  4611 0000351D 8815[0C360000]      <2> 		mov [decimal2], dl
  4612 00003523 31D2                <2> 		xor edx, edx
  4613 00003525 89C8                <2> 		mov eax, ecx
  4614 00003527 89D9                <2> 		mov ecx, ebx
  4615 00003529 89C3                <2> 		mov ebx, eax
  4616 0000352B 83F900              <2> 		cmp ecx, 0
  4617 0000352E 741C                <2> 		je noexpnum
  4618 00003530 49                  <2> 		dec ecx
  4619 00003531 83F900              <2> 		cmp ecx, 0
  4620 00003534 7412                <2> 		je noexpnumlp
  4621 00003536 F7E3                <2> 	expnumlp: mul ebx
  4622 00003538 8A15[0C360000]      <2> 		mov dl, [decimal2]
  4623 0000353E 0015[0B360000]      <2> 		add [decimal], dl
  4624 00003544 31D2                <2> 		xor edx, edx
  4625 00003546 E2EE                <2> 		loop expnumlp
  4626                              <2> 	noexpnumlp:
  4627 00003548 89C1                <2> 		mov ecx, eax
  4628 0000354A EB05                <2> 		jmp retnum
  4629                              <2> 	noexpnum:
  4630 0000354C B901000000          <2> 		mov ecx, 1
  4631                              <2> 	retnum: 
  4632 00003551 BE[9CC80300]        <2> 		mov esi, numbuf
  4633 00003556 890D[0E360000]      <2> 		mov [result], ecx
  4634 0000355C E861FAFFFF          <2> 		call convert
  4635 00003561 BE[9CC80300]        <2> 		mov esi, numbuf
  4636 00003566 8A25[0B360000]      <2> 		mov ah, [decimal]
  4637 0000356C 8825[0D360000]      <2> 		mov [decimalresult], ah
  4638 00003572 80FC00              <2> 		cmp ah, 0
  4639 00003575 0F8425000000        <2> 		je near noputdecimal
  4640                              <2> 	putdecimal:
  4641 0000357B 4E                  <2> 		dec esi
  4642 0000357C FECC                <2> 		dec ah
  4643 0000357E 80FC00              <2> 		cmp ah, 0
  4644 00003581 0F87F4FFFFFF        <2> 		ja near putdecimal
  4645 00003587 4E                  <2> 		dec esi
  4646 00003588 8A06                <2> 		mov al, [esi]
  4647 0000358A C6062E              <2> 		mov byte [esi], '.'
  4648                              <2> 	decputloop:
  4649 0000358D 4E                  <2> 		dec esi
  4650 0000358E 8A26                <2> 		mov ah, [esi]
  4651 00003590 8806                <2> 		mov [esi], al
  4652 00003592 88E0                <2> 		mov al, ah
  4653 00003594 81FE[88C80300]      <2> 		cmp esi, buf2
  4654 0000359A 0F87EDFFFFFF        <2> 		ja near decputloop
  4655                              <2> 	noputdecimal:
  4656 000035A0 BE[88C80300]        <2> 		mov esi, buf2
  4657 000035A5 E805000000          <2> 		call chkadd
  4658 000035AA C3                  <2> 		ret
  4659 000035AB 00000000            <2> edxnumbuf dw 0,0
  4660 000035AF 8A06                <2> 	chkadd: mov al, [esi]
  4661 000035B1 3C30                <2> 		cmp al, '0'
  4662 000035B3 750C                <2> 		jne dnadd
  4663 000035B5 46                  <2> 		inc esi
  4664 000035B6 81FE[9CC80300]      <2> 		cmp esi, numbuf
  4665 000035BC 7402                <2> 		je dnaddm1
  4666 000035BE EBEF                <2> 		jmp chkadd
  4667 000035C0 4E                  <2> 	dnaddm1: dec esi
  4668 000035C1 E82CE7FFFF          <2> 	dnadd:	call print
  4669 000035C6 E822E7FFFF          <2> 		call printline
  4670 000035CB C3                  <2> 		ret
  4671                              <2> 		
  4672                              <2> 	decaddfix:
  4673 000035CC A0[0C360000]        <2> 		mov al, [decimal2]
  4674 000035D1 8A25[0B360000]      <2> 		mov ah, [decimal]
  4675 000035D7 38E0                <2> 		cmp al, ah
  4676 000035D9 742F                <2> 		je gooddecadd
  4677 000035DB 38E0                <2> 		cmp al, ah
  4678 000035DD 7217                <2> 		jb lowdecadd
  4679                              <2> 	highdecadd:
  4680 000035DF FEC4                <2> 		inc ah
  4681 000035E1 89CA                <2> 		mov edx, ecx
  4682 000035E3 C1E103              <2> 		shl ecx, 3
  4683 000035E6 01D1                <2> 		add ecx, edx
  4684 000035E8 01D1                <2> 		add ecx, edx
  4685 000035EA 38E0                <2> 		cmp al, ah
  4686 000035EC 77F1                <2> 		ja highdecadd
  4687 000035EE 8825[0B360000]      <2> 		mov [decimal], ah
  4688 000035F4 EB14                <2> 		jmp gooddecadd
  4689                              <2> 	lowdecadd:
  4690 000035F6 FEC0                <2> 		inc al
  4691 000035F8 89DA                <2> 		mov edx, ebx
  4692 000035FA C1E303              <2> 		shl ebx, 3
  4693 000035FD 01D3                <2> 		add ebx, edx
  4694 000035FF 01D3                <2> 		add ebx, edx
  4695 00003601 38E0                <2> 		cmp al, ah
  4696 00003603 72F1                <2> 		jb lowdecadd
  4697 00003605 A2[0B360000]        <2> 		mov [decimal], al
  4698                              <2> 	gooddecadd:
  4699 0000360A C3                  <2> 		ret
  4700                              <2> 		
  4701 0000360B 00                  <2> decimal db 0
  4702 0000360C 00                  <2> decimal2 db 0
  4703 0000360D 00                  <2> decimalresult db 0
  4704 0000360E 00000000            <2> result dd 0
  4705                              <1> %include 'source/programs/_variables.asm' ;% and $
  4706 00003612 FF2C2500            <2> db 255,44,"%",0
  4707                              <2> 	ans:
  4708 00003616 BE[88C80300]        <2> 		mov esi, buf2
  4709 0000361B E88FFFFFFF          <2> 		call chkadd
  4710 00003620 C3                  <2> 		ret
  4711                              <2> 		
  4712 00003621 FF2C2400            <2> db 255,44,"$",0
  4713 00003625 8B35[F62E0000]      <2> var: mov esi, [currentcommandloc]
  4714 0000362B BB[88B00300]        <2> 	mov ebx, variables
  4715 00003630 8A06                <2> lkeq:	mov al, [esi]
  4716 00003632 3C3D                <2> 	cmp al, '='
  4717 00003634 741B                <2> 	je eqfnd	;is there an '=' sign?
  4718 00003636 3C00                <2> 	cmp al, 0
  4719 00003638 7403                <2> 	je echovars
  4720 0000363A 46                  <2> 	inc esi
  4721 0000363B EBF3                <2> 	jmp lkeq
  4722 0000363D BE[88B00300]        <2> echovars: mov esi, variables
  4723 00003642 BB[88C00300]        <2> 	mov ebx, varend
  4724 00003647 B105                <2> 	mov cl, 5
  4725 00003649 B504                <2> 	mov ch, 4
  4726 0000364B E804F9FFFF          <2> 	call array
  4727 00003650 C3                  <2> 	ret
  4728 00003651 46                  <2> eqfnd:	inc esi
  4729 00003652 8A06                <2> 	mov al, [esi]
  4730 00003654 3C00                <2> 	cmp al, 0
  4731 00003656 740D                <2> 	je readvar
  4732 00003658 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  4733 0000365E BB[88B00300]        <2> 	mov ebx, variables
  4734 00003663 EB19                <2> 	jmp seek
  4735                              <2> readvar:
  4736 00003665 B00A                <2> 	mov al, 10
  4737 00003667 66BB0700            <2> 	mov bx, 7
  4738 0000366B C605[B5220000]00    <2> 	mov byte [commandedit], 0
  4739 00003672 BF[88C80300]        <2> 	mov edi, buftxtend
  4740 00003677 E8A0E7FFFF          <2> 	call rdprint
  4741 0000367C EBA7                <2> 	jmp var
  4742 0000367E 668B03              <2> seek:	mov ax, [ebx]
  4743 00003681 B105                <2> 	mov cl, 5
  4744 00003683 B504                <2> 	mov ch, 4
  4745 00003685 6683F800            <2> 	cmp ax, 0
  4746 00003689 0F8458000000        <2> 	je near save
  4747 0000368F 6639C8              <2> 	cmp ax, cx
  4748 00003692 7403                <2> 	je skfnd
  4749 00003694 43                  <2> 	inc ebx
  4750 00003695 EBE7                <2> 	jmp seek
  4751 00003697 8B35[F62E0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4752 0000369D 46                  <2> 	inc esi
  4753 0000369E 83C302              <2> 	add ebx, 2
  4754 000036A1 89DF                <2> 	mov edi, ebx
  4755 000036A3 B13D                <2> 	mov cl, '='
  4756 000036A5 E88BF8FFFF          <2> 	call cndtest
  4757 000036AA 3C01                <2> 	cmp al, 1	
  4758 000036AC 7418                <2> 	je varfnd
  4759 000036AE 89FB                <2> 	mov ebx, edi
  4760 000036B0 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  4761 000036B6 668B03              <2> 	mov ax, [ebx]
  4762 000036B9 6683F800            <2> 	cmp ax, 0
  4763 000036BD 0F8424000000        <2> 	je near save
  4764 000036C3 43                  <2> 	inc ebx
  4765 000036C4 EBB8                <2> 	jmp seek
  4766 000036C6 8A03                <2> varfnd:	mov al, [ebx]
  4767 000036C8 3C04                <2> 	cmp al, 4
  4768 000036CA 7404                <2> 	je save2
  4769 000036CC 4B                  <2> 	dec ebx
  4770 000036CD 4E                  <2> 	dec esi
  4771 000036CE EBF6                <2> 	jmp varfnd
  4772 000036D0 4B                  <2> save2:	dec ebx
  4773 000036D1 4E                  <2> 	dec esi
  4774 000036D2 8A03                <2> 	mov al, [ebx]
  4775 000036D4 3C05                <2> 	cmp al, 5
  4776 000036D6 7402                <2> 	je remove
  4777 000036D8 EBEC                <2> 	jmp varfnd
  4778 000036DA 8A03                <2> remove: mov al, [ebx]
  4779 000036DC 3C00                <2> 	cmp al, 0
  4780 000036DE 749E                <2> 	je seek
  4781 000036E0 30C0                <2> 	xor al, al
  4782 000036E2 8803                <2> 	mov [ebx], al
  4783 000036E4 43                  <2> 	inc ebx
  4784 000036E5 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4785 000036E7 8B35[F62E0000]      <2> save:	mov esi, [currentcommandloc]
  4786 000036ED 43                  <2> 	inc ebx
  4787 000036EE B005                <2> 	mov al, 5
  4788 000036F0 B404                <2> 	mov ah, 4
  4789 000036F2 668903              <2> 	mov [ebx], ax
  4790 000036F5 43                  <2> 	inc ebx
  4791 000036F6 43                  <2> svhere:	inc ebx
  4792 000036F7 46                  <2> 	inc esi
  4793 000036F8 8A06                <2> 	mov al, [esi]
  4794 000036FA 3C00                <2> 	cmp al, 0
  4795 000036FC 0F844A000000        <2> 	je near svdone
  4796 00003702 3C25                <2> 	cmp al, '%'
  4797 00003704 7404                <2> 	je ans2
  4798 00003706 8803                <2> 	mov [ebx], al	
  4799 00003708 EBEC                <2> 	jmp svhere
  4800 0000370A 56                  <2> ans2:	push esi
  4801 0000370B BE[88C80300]        <2> 	mov esi, buf2
  4802 00003710 E823000000          <2> 	call ansfnd
  4803 00003715 E803000000          <2> 	call anscp
  4804 0000371A 5E                  <2> 	pop esi
  4805 0000371B EBD9                <2> 	jmp svhere
  4806 0000371D 8A06                <2> anscp:	mov al, [esi]
  4807 0000371F 8803                <2> 	mov [ebx], al
  4808 00003721 81FE[9CC80300]      <2> 	cmp esi, numbuf
  4809 00003727 74CD                <2> 	je svhere
  4810 00003729 3C00                <2> 	cmp al, 0
  4811 0000372B 74C9                <2> 	je svhere
  4812 0000372D 43                  <2> 	inc ebx
  4813 0000372E 46                  <2> 	inc esi
  4814 0000372F EBEC                <2> 	jmp anscp
  4815 00003731 5E                  <2> ansnf:	pop esi
  4816 00003732 8A06                <2> 	mov al, [esi]
  4817 00003734 8803                <2> 	mov [ebx], al
  4818 00003736 EBBE                <2> 	jmp svhere
  4819 00003738 46                  <2> ansfnd:	inc esi
  4820 00003739 81FE[9BC80300]      <2> 	cmp esi, numbuf - 1
  4821 0000373F 740A                <2> 	je fndans
  4822 00003741 8A06                <2> 	mov al, [esi]
  4823 00003743 3C00                <2> 	cmp al, 0
  4824 00003745 74EA                <2> 	je ansnf
  4825 00003747 3C30                <2> 	cmp al, '0'
  4826 00003749 74ED                <2> 	je ansfnd
  4827                              <2> fndans:
  4828 0000374B C3                  <2> 	ret
  4829 0000374C 30C0                <2> svdone:	xor al, al
  4830 0000374E 8803                <2> 	mov [ebx], al
  4831 00003750 C3                  <2> 	ret
  4832                              <1> %include 'source/programs/_run.asm' ;./
  4833 00003751 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4834 00003755 FF2C2E2F00          <2> 	db 255,44,"./",0
  4835                              <2> rundiskprog:
  4836 0000375A 8B3D[F62E0000]      <2> 	mov edi, [currentcommandloc]
  4837 00003760 83C702              <2> 	add edi, 2
  4838 00003763 BE00004000          <2> 	mov esi, 0x400000
  4839 00003768 E8FE2D0000          <2> 	call loadfile
  4840 0000376D 81FA94010000        <2> 	cmp edx, 404
  4841 00003773 7461                <2> 	je noprogfound
  4842 00003775 BB00004000          <2> 	mov ebx, 0x400000
  4843 0000377A A1[51370000]        <2> 	mov eax, [elfstart]
  4844 0000377F 3903                <2> 	cmp [ebx], eax
  4845 00003781 0F8431000000        <2> 	je near runelf
  4846 00003787 66813B4558          <2> 	cmp word [ebx], "EX"
  4847 0000378C 756B                <2> 	jne progbatchfound
  4848 0000378E 83C302              <2> 	add ebx, 2
  4849 00003791 8B3D[F62E0000]      <2> 	mov edi, [currentcommandloc]
  4850 00003797 83C702              <2> 	add edi, 2
  4851                              <2> findspaceprog:
  4852 0000379A 8A07                <2> 	mov al, [edi]
  4853 0000379C 47                  <2> 	inc edi
  4854 0000379D 3C20                <2> 	cmp al, " "
  4855 0000379F 75F9                <2> 	jne findspaceprog
  4856                              <2> findnonspaceprog:
  4857 000037A1 8A07                <2> 	mov al, [edi]
  4858 000037A3 47                  <2> 	inc edi
  4859 000037A4 3C20                <2> 	cmp al, " "
  4860 000037A6 74F9                <2> 	je findnonspaceprog
  4861 000037A8 4F                  <2> 	dec edi
  4862 000037A9 8925[08AE0300]      <2> 	mov [previousstack], esp
  4863 000037AF FFD3                <2> 	call ebx
  4864 000037B1 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  4865 000037B7 C3                  <2> 	ret
  4866                              <2> runelf:
  4867 000037B8 8B3D[F62E0000]      <2> 	mov edi, [currentcommandloc]
  4868 000037BE 83C702              <2> 	add edi, 2
  4869 000037C1 81C380000000        <2> 	add ebx, 0x80
  4870 000037C7 8925[08AE0300]      <2> 	mov [previousstack], esp
  4871 000037CD FFD3                <2> 	call ebx
  4872 000037CF 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  4873 000037D5 C3                  <2> 	ret
  4874                              <2> noprogfound:
  4875 000037D6 BE[89840000]        <2> 	mov esi, notfound1
  4876 000037DB E812E5FFFF          <2> 	call print
  4877 000037E0 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  4878 000037E6 83C602              <2> 	add esi, 2
  4879 000037E9 E804E5FFFF          <2> 	call print
  4880 000037EE BE[91840000]        <2> 	mov esi, notfound2
  4881 000037F3 E8FAE4FFFF          <2> 	call print
  4882 000037F8 C3                  <2> 	ret
  4883                              <2> progbatchfound:
  4884 000037F9 BF00004000          <2> 		mov edi, 0x400000
  4885 000037FE C605[82B00300]01    <2> 		mov byte [BATCHISON], 1
  4886                              <2> 	batchrunloop:
  4887 00003805 E82BF4FFFF          <2> 		call buftxtclear
  4888 0000380A BE[88C40300]        <2> 		mov esi, buftxt
  4889 0000380F 8935[F62E0000]      <2> 		mov [currentcommandloc], esi
  4890                              <2> 	batchrunloop2:
  4891 00003815 B10A                <2> 		mov cl, 10
  4892 00003817 B50D                <2> 		mov ch, 13
  4893 00003819 380F                <2> 		cmp [edi], cl
  4894 0000381B 0F8419000000        <2> 		je near nxtbatchrunline
  4895 00003821 382F                <2> 		cmp [edi], ch
  4896 00003823 0F8411000000        <2> 		je near nxtbatchrunline
  4897 00003829 803F00              <2> 		cmp byte [edi], 0
  4898 0000382C 0F8408000000        <2> 		je near nxtbatchrunline
  4899 00003832 8A07                <2> 		mov al, [edi]
  4900 00003834 8806                <2> 		mov [esi], al
  4901 00003836 46                  <2> 		inc esi
  4902 00003837 47                  <2> 		inc edi
  4903 00003838 EBDB                <2> 		jmp batchrunloop2
  4904                              <2> 	nxtbatchrunline:
  4905 0000383A 47                  <2> 		inc edi
  4906 0000383B 380F                <2> 		cmp [edi], cl
  4907 0000383D 74FB                <2> 		je nxtbatchrunline
  4908 0000383F 382F                <2> 		cmp [edi], ch
  4909 00003841 74F7                <2> 		je nxtbatchrunline
  4910 00003843 893D[A1380000]      <2> 		mov [batchedi], edi
  4911 00003849 893D[7EB00300]      <2> 		mov [BATCHPOS], edi
  4912 0000384F C60600              <2> 		mov byte [esi], 0
  4913 00003852 BE[88C40300]        <2> 		mov esi, buftxt
  4914 00003857 803E00              <2> 		cmp byte [esi], 0
  4915 0000385A 0F8439000000        <2> 		je near nobatchfoundrun
  4916 00003860 31DB                <2> 		xor ebx, ebx
  4917 00003862 8A1D[19B00300]      <2> 		mov bl, [IFON]
  4918 00003868 80FB00              <2> 		cmp bl, 0
  4919 0000386B 0F8534000000        <2> 		jne near iftestbatch
  4920                              <2> 	doneiftest:
  4921 00003871 803D[6B390000]00    <2> 		cmp byte [runnextline], 0
  4922 00003878 0F8405000000        <2> 		je near noruniftest
  4923 0000387E E8A3F5FFFF          <2> 		call run
  4924                              <2> 	noruniftest:
  4925 00003883 C605[6B390000]01    <2> 		mov byte [runnextline], 1
  4926 0000388A 8B3D[A1380000]      <2> 		mov edi, [batchedi]
  4927 00003890 803F00              <2> 		cmp byte [edi], 0
  4928 00003893 0F856CFFFFFF        <2> 		jne near batchrunloop
  4929                              <2> 	nobatchfoundrun:
  4930 00003899 C605[82B00300]00    <2> 		mov byte [BATCHISON], 0
  4931 000038A0 C3                  <2> 		ret
  4932                              <2> 	
  4933 000038A1 00000000            <2> batchedi dd 0	
  4934                              <2> 	
  4935                              <2> 	iftestbatch:
  4936 000038A5 BE[1AB00300]        <2> 		mov esi, IFTRUE
  4937 000038AA 01DE                <2> 		add esi, ebx
  4938 000038AC 803E00              <2> 		cmp byte [esi], 0
  4939 000038AF 0F85BCFFFFFF        <2> 		jne near doneiftest
  4940 000038B5 881D[6C390000]      <2> 		mov [iffalsebuf], bl
  4941 000038BB 803D[83B00300]01    <2> 		cmp byte [LOOPON], 1
  4942 000038C2 0F8510000000        <2> 		jne near fifindbatch
  4943 000038C8 E938FFFFFF          <2> 		jmp batchrunloop
  4944                              <2> 	elsetestbatch:
  4945 000038CD C60601              <2> 		mov byte [esi], 1
  4946 000038D0 83C705              <2> 		add edi, 5
  4947 000038D3 E92DFFFFFF          <2> 		jmp batchrunloop
  4948                              <2> 	fifindbatch:
  4949 000038D8 66B96966            <2> 		mov cx, "if"
  4950 000038DC 66B86669            <2> 		mov ax, "fi"
  4951 000038E0 663907              <2> 		cmp [edi], ax
  4952 000038E3 0F8424000000        <2> 		je near fifoundbatch
  4953 000038E9 66390F              <2> 		cmp [edi], cx
  4954 000038EC 0F845F000000        <2> 		je near iffoundbatch
  4955 000038F2 803F00              <2> 		cmp byte [edi], 0
  4956 000038F5 0F8412000000        <2> 		je near fifoundbatch
  4957 000038FB B8656C7365          <2> 		mov eax, "else"
  4958 00003900 3907                <2> 		cmp [edi], eax
  4959 00003902 0F84C5FFFFFF        <2> 		je near elsetestbatch
  4960 00003908 E976FFFFFF          <2> 		jmp noruniftest
  4961                              <2> 	fifoundbatch:
  4962 0000390D 83C702              <2> 		add edi, 2
  4963 00003910 B00A                <2> 		mov al, 10
  4964 00003912 3807                <2> 		cmp [edi], al
  4965 00003914 0F840B000000        <2> 		je near goodfibatch
  4966 0000391A 803F00              <2> 		cmp byte [edi], 0
  4967 0000391D 0F8476FFFFFF        <2> 		je near nobatchfoundrun
  4968 00003923 EBB3                <2> 		jmp fifindbatch
  4969                              <2> 	goodfibatch:
  4970 00003925 B001                <2> 		mov al, 1
  4971 00003927 2805[19B00300]      <2> 		sub [IFON], al 
  4972 0000392D A0[19B00300]        <2> 		mov al, [IFON]
  4973 00003932 8A1D[6C390000]      <2> 		mov bl, [iffalsebuf]
  4974 00003938 38D8                <2> 		cmp al, bl
  4975 0000393A 779C                <2> 		ja fifindbatch
  4976 0000393C 8B35[F62E0000]      <2> 		mov esi, [currentcommandloc]
  4977 00003942 83EF02              <2> 		sub edi, 2
  4978 00003945 C605[6B390000]00    <2> 		mov byte [runnextline], 0
  4979 0000394C E9B4FEFFFF          <2> 		jmp batchrunloop
  4980                              <2> 	iffoundbatch:
  4981 00003951 B020                <2> 		mov al, ' '
  4982 00003953 83C702              <2> 		add edi, 2
  4983 00003956 3807                <2> 		cmp [edi], al
  4984 00003958 0F857AFFFFFF        <2> 		jne near fifindbatch
  4985 0000395E B001                <2> 		mov al, 1
  4986 00003960 0005[19B00300]      <2> 		add [IFON], al
  4987 00003966 E96DFFFFFF          <2> 		jmp fifindbatch
  4988                              <2> 		
  4989                              <2> 		
  4990 0000396B 01                  <2> runnextline db 1
  4991 0000396C 00                  <2> iffalsebuf db 0
  4992 0000396D C3                  <2> notbatch: ret 
  4993                              <1> %ifdef network.included
  4994                              <1> 	%include 'source/programs/arp.asm'
  4995                              <1> %endif
  4996                              <1> %include 'source/programs/batch.asm'
  4997 0000396E FF2C626174636800    <2> db 255,44,"batch",0
  4998                              <2> 	batchst: 
  4999 00003976 8B3D[F62E0000]      <2> 		mov edi, [currentcommandloc]
  5000 0000397C 83C706              <2> 		add edi, 6
  5001 0000397F 803F00              <2> 		cmp byte [edi], 0
  5002 00003982 0F846D000000        <2> 		je near nonamefound
  5003 00003988 BE00004000          <2> 		mov esi, 0x400000
  5004 0000398D E8D92B0000          <2> 		call loadfile
  5005 00003992 89D0                <2> 		mov eax, edx
  5006 00003994 3D94010000          <2> 		cmp eax, 404
  5007 00003999 7465                <2> 		je goodbatchname
  5008 0000399B BE[A6390000]        <2> 		mov esi, badbatchname
  5009 000039A0 E84DE3FFFF          <2> 		call print
  5010 000039A5 C3                  <2> 		ret
  5011 000039A6 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5012 000039AF 20616C726561647920- <2>
  5013 000039B8 657869737473210A00  <2>
  5014 000039C1 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5015 000039CA 746F20747970652061- <2>
  5016 000039D3 206E616D6520616674- <2>
  5017 000039DC 65722074686520636F- <2>
  5018 000039E5 6D6D616E642E0A00    <2>
  5019 000039ED 00000000            <2> 		esicache3 dd 0
  5020 000039F1 00000000            <2> 		esicache2 dd 0
  5021                              <2> 	nonamefound:
  5022 000039F5 BE[C1390000]        <2> 		mov esi, namenotfoundbatch
  5023 000039FA E8F3E2FFFF          <2> 		call print
  5024 000039FF C3                  <2> 		ret
  5025                              <2> 	goodbatchname:
  5026 00003A00 BE00004000          <2> 		mov esi, 0x400000
  5027                              <2> 	batchcreate:
  5028 00003A05 8935[ED390000]      <2> 		mov [esicache3], esi
  5029 00003A0B BF00008000          <2> 		mov edi, 0x800000
  5030 00003A10 B00A                <2> 		mov al, 10
  5031 00003A12 B307                <2> 		mov bl, 7
  5032 00003A14 B404                <2> 		mov ah, 4
  5033 00003A16 CD30                <2> 		int 30h
  5034 00003A18 8935[F1390000]      <2> 		mov [esicache2], esi
  5035 00003A1E 8A0E                <2> 		mov cl, [esi]
  5036 00003A20 8B35[ED390000]      <2> 		mov esi, [esicache3]
  5037 00003A26 BB[5A3A0000]        <2> 		mov ebx, exitword
  5038 00003A2B E805F5FFFF          <2> 		call cndtest
  5039 00003A30 3C01                <2> 		cmp al, 1
  5040 00003A32 7411                <2> 		je endbatchcreate
  5041 00003A34 3C02                <2> 		cmp al, 2
  5042 00003A36 740D                <2> 		je endbatchcreate
  5043 00003A38 8B35[F1390000]      <2> 		mov esi, [esicache2]
  5044 00003A3E B00A                <2> 		mov al, 10
  5045 00003A40 8806                <2> 		mov [esi], al
  5046 00003A42 46                  <2> 		inc esi
  5047 00003A43 EBC0                <2> 		jmp batchcreate
  5048                              <2> 	endbatchcreate:
  5049 00003A45 8B35[ED390000]      <2> 		mov esi, [esicache3]
  5050 00003A4B 31C0                <2> 		xor eax, eax
  5051 00003A4D 8806                <2> 		mov [esi], al
  5052 00003A4F BE00004000          <2> 		mov esi, 0x400000
  5053 00003A54 E899E2FFFF          <2> 		call print
  5054 00003A59 C3                  <2> 		ret
  5055                              <2> 	
  5056 00003A5A 5C7800              <2> 	exitword db "\x",0
  5057 00003A5D 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5058 00003A66 6F20657869742E0A00  <2>
  5059                              <1> %ifdef gui.background
  5060                              <1> 	%include 'source/programs/background.asm'
  5061 00003A6F FF2C6261636B67726F- <2> db 255,44,"background",0
  5062 00003A78 756E6400            <2>
  5063 00003A7C 8B3D[F62E0000]      <2> 		mov edi, [currentcommandloc]
  5064 00003A82 83C70B              <2> 		add edi, 11
  5065 00003A85 BE00008000          <2> 		mov esi, 0x800000
  5066 00003A8A E8DC2A0000          <2> 		call loadfile
  5067 00003A8F 81FA94010000        <2> 		cmp edx, 404
  5068 00003A95 0F8423120000        <2> 		je near filenotfound
  5069 00003A9B BE00008000          <2> 		mov esi, 0x800000
  5070 00003AA0 66813E424D          <2> 		cmp word [esi], "BM"
  5071 00003AA5 7401                <2> 		je .bmpfound
  5072 00003AA7 C3                  <2> 		ret
  5073                              <2> .bmpfound:
  5074 00003AA8 8B3D[1A550000]      <2> 		mov edi, [physbaseptr]
  5075 00003AAE 57                  <2> 		push edi
  5076 00003AAF BE[9CCA0300]        <2> 		mov esi, backgroundbuffer
  5077 00003AB4 8935[BB6D0000]      <2> 		mov [backgroundimage], esi
  5078 00003ABA 8935[1A550000]      <2> 		mov [physbaseptr], esi
  5079 00003AC0 31C0                <2> 		xor eax, eax
  5080                              <2> .clearlp:
  5081 00003AC2 8906                <2> 		mov [esi], eax
  5082 00003AC4 83C604              <2> 		add esi, 4
  5083 00003AC7 81FE[9CDE2B00]      <2> 		cmp esi, backgroundbufferend
  5084 00003ACD 72F3                <2> 		jb .clearlp
  5085 00003ACF BE00008000          <2> 		mov esi, 0x800000
  5086 00003AD4 31C9                <2> 		xor ecx, ecx
  5087 00003AD6 31D2                <2> 		xor edx, edx
  5088 00003AD8 31DB                <2> 		xor ebx, ebx
  5089 00003ADA E85A2C0000          <2> 		call showbmp
  5090 00003ADF 5F                  <2> 		pop edi
  5091 00003AE0 893D[1A550000]      <2> 		mov [physbaseptr], edi
  5092 00003AE6 803D[E7840000]00    <2> 		cmp byte [guion], 0
  5093 00003AED 740F                <2> 		je .noclear
  5094 00003AEF E872320000          <2> 		call guiclear
  5095 00003AF4 E84D2F0000          <2> 		call clearmousecursor
  5096 00003AF9 E8E9320000          <2> 		call reloadallgraphics
  5097                              <2> .noclear:
  5098 00003AFE C3                  <2> 		ret
  5099                              <1> %endif
  5100                              <1> %include 'source/programs/beep.asm'
  5101 00003AFF FF2C6265657000      <2> 	db 255,44,"beep",0
  5102                              <2> beep:
  5103 00003B06 B8[2B3B0000]        <2> 	mov eax, beepstart
  5104 00003B0B A3[5E020000]        <2> 	mov [soundpos], eax
  5105 00003B10 B8[2F3B0000]        <2> 	mov eax, beepend
  5106 00003B15 A3[62020000]        <2> 	mov [soundendpos], eax
  5107 00003B1A C605[5B020000]01    <2> 	mov byte [soundon], 1
  5108                              <2> waitforsoundendbeep:
  5109 00003B21 A0[5B020000]        <2> 	mov al, [soundon]
  5110 00003B26 3C00                <2> 	cmp al, 0
  5111 00003B28 75F7                <2> 	jne waitforsoundendbeep
  5112 00003B2A C3                  <2> 	ret
  5113                              <2> 	
  5114                              <2> beepstart:
  5115 00003B2B 3200D111            <2> 	dw 50, 4561
  5116                              <2> beepend:
  5117                              <1> %ifdef dos.compatible
  5118                              <1> %else
  5119                              <1> 	%include 'source/programs/boot.asm'
  5120 00003B2F FF2C626F6F7400      <2> db 255,44,"boot",0
  5121                              <2> quickboot:
  5122                              <2> 	;load and jump to the bootloader
  5123                              <2> 	; mov ecx, 1
  5124                              <2> 	; xor ebx, ebx
  5125                              <2> 	; mov esi, 0x400000
  5126                              <2> 	; call diskr
  5127                              <2> 	; mov ax, LINEAR_SEL
  5128                              <2> 	; mov fs, ax
  5129                              <2> 	; mov esi, 0x400000
  5130                              <2> 	; mov edi, 0x7C00
  5131                              <2> 	; xor ebx, ebx
  5132                              <2> ; .lp:
  5133                              <2> 	; mov ecx, [esi+ebx]
  5134                              <2> 	; mov [fs:edi+ebx], ecx
  5135                              <2> 	; add ebx, 4
  5136                              <2> 	; cmp ebx, 512
  5137                              <2> 	; jb .lp
  5138 00003B36 66BB[463B]          <2> 	mov bx, bootload
  5139 00003B3A 66891D[E10C0000]    <2> 	mov [realmodeptr], bx
  5140 00003B41 E98FD0FFFF          <2> 	jmp realmode
  5141                              <2> [BITS 16]
  5142                              <2> bootload:
  5143 00003B46 B80300              <2> 	mov ax, 3
  5144 00003B49 31DB                <2> 	xor bx, bx
  5145 00003B4B CD10                <2> 	int 10h
  5146 00003B4D EA007C0000          <2> 	jmp 0:0x7C00
  5147                              <2> [BITS 32]
  5148                              <1> %endif
  5149                              <1> %include 'source/programs/cd.asm'
  5150 00003B52 FF2C636400          <2> db 255,44,"cd",0
  5151                              <2> cd:
  5152 00003B57 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  5153 00003B5D 83C603              <2> 	add esi, 3
  5154 00003B60 8B3D[10AE0300]      <2> 	mov edi, [currentfolderloc]
  5155 00003B66 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5156 00003B6C 81C7[14AE0300]      <2> 	add edi, currentfolder
  5157 00003B72 4F                  <2> 	dec edi
  5158 00003B73 803E2F              <2> 	cmp byte [esi], '/'
  5159 00003B76 751C                <2> 	jne .noroot
  5160 00003B78 31FF                <2> 	xor edi, edi
  5161 00003B7A 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5162 00003B80 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5163 00003B86 81C7[14AE0300]      <2> 	add edi, currentfolder
  5164 00003B8C 4F                  <2> 	dec edi
  5165 00003B8D 46                  <2> 	inc esi
  5166 00003B8E 803E00              <2> 	cmp byte [esi], 0
  5167 00003B91 7401                <2> 	je .noroot
  5168 00003B93 4E                  <2> 	dec esi
  5169                              <2> .noroot:
  5170 00003B94 66813E2E2E          <2> 	cmp word [esi], ".."
  5171 00003B99 742A                <2> 	je .moveup
  5172 00003B9B 47                  <2> 	inc edi
  5173                              <2> .movedown:
  5174 00003B9C 8A06                <2> 	mov al, [esi]
  5175 00003B9E 8807                <2> 	mov [edi], al
  5176 00003BA0 47                  <2> 	inc edi
  5177 00003BA1 46                  <2> 	inc esi
  5178 00003BA2 3C00                <2> 	cmp al, 0
  5179 00003BA4 740A                <2> 	je .donecd
  5180 00003BA6 81FF[14B00300]      <2> 	cmp edi, currentfolderend
  5181 00003BAC 72EE                <2> 	jb .movedown
  5182 00003BAE 30C0                <2> 	xor al, al
  5183                              <2> .donecd:
  5184 00003BB0 4F                  <2> 	dec edi
  5185 00003BB1 C6072F              <2> 	mov byte [edi], '/'
  5186 00003BB4 47                  <2> 	inc edi
  5187 00003BB5 C60700              <2> 	mov byte [edi], 0
  5188 00003BB8 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5189 00003BBE 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5190 00003BC4 C3                  <2> 	ret
  5191                              <2> .moveup:
  5192 00003BC5 31C0                <2> 	xor eax, eax
  5193 00003BC7 A3[0CAE0300]        <2> 	mov [lastfolderloc], eax
  5194                              <2> .moveuploop:
  5195 00003BCC 4F                  <2> 	dec edi
  5196 00003BCD 8A07                <2> 	mov al, [edi]
  5197 00003BCF 81FF[14AE0300]      <2> 	cmp edi, currentfolder
  5198 00003BD5 763B                <2> 	jbe .moveupover
  5199 00003BD7 3C2F                <2> 	cmp al, '/'
  5200 00003BD9 75F1                <2> 	jne .moveuploop
  5201 00003BDB C6072F              <2> 	mov byte [edi], '/'
  5202 00003BDE 47                  <2> 	inc edi
  5203 00003BDF C60700              <2> 	mov byte [edi], 0
  5204 00003BE2 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5205 00003BE8 893D[10AE0300]      <2> 	mov [currentfolderloc], edi
  5206 00003BEE 81C7[14AE0300]      <2> 	add edi, currentfolder
  5207 00003BF4 4F                  <2> 	dec edi
  5208                              <2> .lastfolder:
  5209 00003BF5 4F                  <2> 	dec edi
  5210 00003BF6 8A07                <2> 	mov al, [edi]
  5211 00003BF8 81FF[14AE0300]      <2> 	cmp edi, currentfolder
  5212 00003BFE 7604                <2> 	jbe .donemoveup
  5213 00003C00 3C2F                <2> 	cmp al, '/'
  5214 00003C02 75F1                <2> 	jne .lastfolder
  5215                              <2> .donemoveup:
  5216 00003C04 47                  <2> 	inc edi
  5217 00003C05 81EF[14AE0300]      <2> 	sub edi, currentfolder
  5218 00003C0B 893D[0CAE0300]      <2> 	mov [lastfolderloc], edi
  5219 00003C11 C3                  <2> 	ret
  5220                              <2> .moveupover:
  5221 00003C12 BF[14AE0300]        <2> 	mov edi, currentfolder
  5222 00003C17 C6072F              <2> 	mov byte [edi], '/'
  5223 00003C1A 47                  <2> 	inc edi
  5224 00003C1B C60700              <2> 	mov byte [edi], 0
  5225 00003C1E 31C0                <2> 	xor eax, eax
  5226 00003C20 A3[0CAE0300]        <2> 	mov [lastfolderloc], eax
  5227 00003C25 40                  <2> 	inc eax
  5228 00003C26 A3[10AE0300]        <2> 	mov [currentfolderloc], eax
  5229 00003C2B C3                  <2> 	ret
  5230                              <1> %include 'source/programs/charmap.asm'
  5231 00003C2C 00                  <2> charmapnum db 0
  5232 00003C2D FF2C636861726D6170- <2> db 255,44,"charmap",0
  5233 00003C36 00                  <2>
  5234 00003C37 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  5235 00003C3D 83C608              <2> 	add esi, 8
  5236 00003C40 803E00              <2> 	cmp byte [esi], 0
  5237 00003C43 7412                <2> 	je .nospecific
  5238 00003C45 E8ECF5FFFF          <2> 	call cnvrthextxt
  5239 00003C4A 6689C8              <2> 	mov ax, cx
  5240 00003C4D 66BB0700            <2> 	mov bx, 7
  5241 00003C51 E805E7FFFF          <2> 	call prcharq
  5242 00003C56 C3                  <2> 	ret
  5243                              <2> .nospecific:
  5244 00003C57 66BB0700            <2> 	mov bx, 7
  5245 00003C5B 66B82000            <2> 	mov ax, " "
  5246 00003C5F C605[2C3C0000]00    <2> 	mov byte [charmapnum], 0
  5247 00003C66 E8F0E6FFFF          <2> 	call prcharq
  5248 00003C6B E8EBE6FFFF          <2> 	call prcharq
  5249 00003C70 E8E6E6FFFF          <2> 	call prcharq
  5250 00003C75 E8E1E6FFFF          <2> 	call prcharq
  5251 00003C7A 66B83000            <2> 	mov ax, "0"
  5252                              <2> charmapnumprnt:
  5253 00003C7E E8D8E6FFFF          <2> 	call prcharq
  5254 00003C83 6640                <2> 	inc ax
  5255 00003C85 6650                <2> 	push ax
  5256 00003C87 66B82000            <2> 	mov ax, " "
  5257 00003C8B E8CBE6FFFF          <2> 	call prcharq
  5258 00003C90 6658                <2> 	pop ax
  5259 00003C92 6683F839            <2> 	cmp ax, "9"
  5260 00003C96 76E6                <2> 	jbe charmapnumprnt
  5261 00003C98 66B84100            <2> 	mov ax, "A"
  5262                              <2> charmapnumprnt2:
  5263 00003C9C E8BAE6FFFF          <2> 	call prcharq
  5264 00003CA1 6640                <2> 	inc ax
  5265 00003CA3 6650                <2> 	push ax
  5266 00003CA5 66B82000            <2> 	mov ax, " "
  5267 00003CA9 E8ADE6FFFF          <2> 	call prcharq
  5268 00003CAE 6658                <2> 	pop ax
  5269 00003CB0 6683F847            <2> 	cmp ax, "G"
  5270 00003CB4 72E6                <2> 	jb charmapnumprnt2
  5271                              <2> 	
  5272 00003CB6 BE[C2840000]        <2> 	mov esi, line
  5273 00003CBB E811E0FFFF          <2> 	call printquiet
  5274 00003CC0 6631C0              <2> 	xor ax, ax
  5275 00003CC3 6689C1              <2> 	mov cx, ax
  5276 00003CC6 E819F4FFFF          <2> 	call showhexsmall
  5277 00003CCB EB22                <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5278                              <2> charmapcopy:
  5279 00003CCD 6640                <2> 	inc ax
  5280 00003CCF 6683F808            <2> 	cmp ax, 8
  5281 00003CD3 741A                <2> 	je charmapnocopy
  5282 00003CD5 6683F809            <2> 	cmp ax, 9
  5283 00003CD9 7414                <2> 	je charmapnocopy
  5284 00003CDB 6683F80A            <2> 	cmp ax, 10
  5285 00003CDF 740E                <2> 	je charmapnocopy
  5286 00003CE1 6683F80D            <2> 	cmp ax, 13
  5287 00003CE5 7408                <2> 	je charmapnocopy
  5288 00003CE7 663D0001            <2> 	cmp ax, 256
  5289 00003CEB 7447                <2> 	je nomorecharmap
  5290 00003CED EB04                <2> 	jmp okchar
  5291                              <2> charmapnocopy:
  5292 00003CEF 66B82000            <2> 	mov ax, " "
  5293                              <2> okchar:
  5294 00003CF3 6650                <2> 	push ax
  5295 00003CF5 E861E6FFFF          <2> 	call prcharq
  5296 00003CFA 66B82000            <2> 	mov ax, " "
  5297 00003CFE E858E6FFFF          <2> 	call prcharq
  5298 00003D03 6658                <2> 	pop ax
  5299                              <2> charmapcopycheck:
  5300 00003D05 FE05[2C3C0000]      <2> 	inc byte [charmapnum]
  5301 00003D0B 803D[2C3C0000]10    <2> 	cmp byte [charmapnum], 16
  5302 00003D12 72B9                <2> 	jb charmapcopy
  5303 00003D14 6650                <2> 	push ax
  5304 00003D16 BE[C2840000]        <2> 	mov esi, line
  5305 00003D1B E8B1DFFFFF          <2> 	call printquiet
  5306 00003D20 6658                <2> 	pop ax
  5307 00003D22 88C1                <2> 	mov cl, al
  5308 00003D24 FEC1                <2> 	inc cl
  5309 00003D26 E8B9F3FFFF          <2> 	call showhexsmall
  5310 00003D2B C605[2C3C0000]00    <2> 	mov byte [charmapnum], 0
  5311 00003D32 EB99                <2> 	jmp charmapcopy
  5312                              <2> nomorecharmap:
  5313 00003D34 C3                  <2> 	ret
  5314                              <1> %ifdef gui.included
  5315                              <1> 	%include 'source/programs/circle.asm'
  5316 00003D35 FF2C636972636C6500  <2> db 255,44,"circle",0
  5317                              <2> circle:
  5318 00003D3E 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  5319 00003D44 83C607              <2> 	add esi, 7
  5320 00003D47 66B91000            <2> 	mov cx, 16
  5321 00003D4B 30C0                <2> 	xor al, al
  5322 00003D4D 3806                <2> 	cmp [esi], al
  5323 00003D4F 7405                <2> 	je .nocmdline
  5324 00003D51 E820F5FFFF          <2> 	call cnvrttxt
  5325                              <2> .nocmdline:
  5326 00003D56 E8AE0A0000          <2> 	call linetester.stime
  5327 00003D5B E854000000          <2> 	call fcircle.nocmdline
  5328 00003D60 E8BC0A0000          <2> 	call linetester.etime
  5329 00003D65 53                  <2> 	push ebx
  5330 00003D66 57                  <2> 	push edi
  5331 00003D67 E860E5FFFF          <2> 	call getchar
  5332 00003D6C 59                  <2> 	pop ecx
  5333 00003D6D E835F4FFFF          <2> 	call showdec
  5334 00003D72 BE[A8480000]        <2> 	mov esi, linetester.msgcircle
  5335 00003D77 E855DFFFFF          <2> 	call printquiet
  5336 00003D7C 59                  <2> 	pop ecx
  5337 00003D7D E825F4FFFF          <2> 	call showdec
  5338 00003D82 BE[BF480000]        <2> 	mov esi, linetester.msgtime
  5339 00003D87 E845DFFFFF          <2> 	call printquiet
  5340 00003D8C E856300000          <2> 	call reloadallgraphics
  5341 00003D91 C3                  <2> 	ret
  5342                              <2> 	
  5343 00003D92 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5344 00003D9B 00                  <2>
  5345                              <2> fcircle:	
  5346 00003D9C 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  5347 00003DA2 83C608              <2> 	add esi, 8
  5348 00003DA5 66B91000            <2> 	mov cx, 16
  5349 00003DA9 30C0                <2> 	xor al, al
  5350 00003DAB 3806                <2> 	cmp [esi], al
  5351 00003DAD 7405                <2> 	je .nocmdline
  5352 00003DAF E8C2F4FFFF          <2> 	call cnvrttxt
  5353                              <2> .nocmdline:
  5354 00003DB4 6689C8              <2> 	mov ax, cx
  5355 00003DB7 66D1E1              <2> 	shl cx, 1
  5356 00003DBA 6689CA              <2> 	mov dx, cx
  5357 00003DBD 663B15[04550000]    <2> 	cmp dx, [resolutionx]
  5358 00003DC4 731B                <2> 	jae .done
  5359 00003DC6 663B0D[06550000]    <2> 	cmp cx, [resolutiony]
  5360 00003DCD 7312                <2> 	jae .done
  5361 00003DCF 668B35[59020000]    <2> 	mov si, [timenanoseconds + 2]
  5362 00003DD6 31FF                <2> 	xor edi, edi
  5363 00003DD8 803D[E7840000]01    <2> 	cmp byte [guion], 1
  5364 00003DDF 7401                <2> 	je .lp
  5365 00003DE1 C3                  <2> .done ret
  5366                              <2> .lp:
  5367 00003DE2 6629C2              <2> 	sub dx, ax
  5368 00003DE5 6629C1              <2> 	sub cx, ax
  5369 00003DE8 60                  <2> 	pusha
  5370 00003DE9 E81A2B0000          <2> 	call fillcircle
  5371 00003DEE 61                  <2> 	popa
  5372 00003DEF 47                  <2> 	inc edi
  5373 00003DF0 660335[57020000]    <2> 	add si, [timenanoseconds]
  5374 00003DF7 6601C2              <2> 	add dx, ax
  5375 00003DFA 6601C2              <2> 	add dx, ax
  5376 00003DFD 6601C2              <2> 	add dx, ax
  5377 00003E00 6601C1              <2> 	add cx, ax
  5378 00003E03 663B15[04550000]    <2> 	cmp dx, [resolutionx]
  5379 00003E0A 72D6                <2> 	jb .lp
  5380 00003E0C 6689C2              <2> 	mov dx, ax
  5381 00003E0F 6601C2              <2> 	add dx, ax
  5382 00003E12 6601C1              <2> 	add cx, ax
  5383 00003E15 6601C1              <2> 	add cx, ax
  5384 00003E18 663B0D[06550000]    <2> 	cmp cx, [resolutiony]
  5385 00003E1F 72C1                <2> 	jb .lp
  5386 00003E21 C3                  <2> 	ret
  5387                              <1> %endif
  5388                              <1> %include 'source/programs/clear.asm'
  5389 00003E22 FF2C636C65617200    <2> db 255,44,"clear",0
  5390 00003E2A E86FDFFFFF          <2> 		call clear
  5391 00003E2F C3                  <2> 		ret 
  5392                              <1> %include 'source/programs/cpuid.asm'
  5393 00003E30 FF2C637075696400    <2> db 255,44,"cpuid",0
  5394 00003E38 31C0                <2> 	xor eax, eax
  5395 00003E3A 0FA2                <2> 	cpuid
  5396 00003E3C 891D[8D3E0000]      <2> 	mov [cpuidbuf], ebx
  5397 00003E42 8915[913E0000]      <2> 	mov [cpuidbuf + 4], edx
  5398 00003E48 890D[953E0000]      <2> 	mov [cpuidbuf + 8], ecx
  5399 00003E4E BE[8D3E0000]        <2> 	mov esi, cpuidbuf
  5400 00003E53 E89ADEFFFF          <2> 	call print
  5401 00003E58 BE[C2840000]        <2> 	mov esi, line
  5402 00003E5D E890DEFFFF          <2> 	call print
  5403 00003E62 B801000000          <2> 	mov eax, 1
  5404 00003E67 0FA2                <2> 	cpuid
  5405 00003E69 89C1                <2> 	mov ecx, eax
  5406 00003E6B C605[E3300000]02    <2> 	mov byte [firsthexshown], 2
  5407 00003E72 E881F2FFFF          <2> 	call showhex
  5408 00003E77 B808000080          <2> 	mov eax, 0x80000008
  5409 00003E7C 0FA2                <2> 	cpuid
  5410 00003E7E 89C1                <2> 	mov ecx, eax
  5411 00003E80 C605[E3300000]02    <2> 	mov byte [firsthexshown], 2
  5412 00003E87 E86CF2FFFF          <2> 	call showhex
  5413 00003E8C C3                  <2> 	ret
  5414                              <2> 	
  5415 00003E8D 00<rept>            <2> cpuidbuf times 13 db 0
  5416                              <2> cpuidvendorend:
  5417                              <1> %include 'source/programs/date.asm'
  5418 00003E9A 082E30303030303030- <2> timenscache db 8,".000000000"
  5419 00003EA3 3030                <2>
  5420 00003EA5 200A00              <2> timenscacheend: db " ",10,0
  5421 00003EA8 00                  <2> istimeset db 0
  5422 00003EA9 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5423 00003EB2 2063757272656E7420- <2>
  5424 00003EBB 554E49582074696D65- <2>
  5425 00003EC4 3A0A00              <2>
  5426 00003EC7 00<rept>            <2> timeinputbuffer times 12 db 0
  5427 00003ED3 00                  <2> timeinputbend: db 0
  5428                              <2> 
  5429 00003ED4 FF2C6461746500      <2> db 255,44,"date",0
  5430                              <2> 	;cmp byte [istimeset], 0
  5431                              <2> 	;jne timeisset
  5432 00003EDB E880000000          <2> 	call time
  5433 00003EE0 E823020000          <2> 	call timeconvert	
  5434                              <2> 	; mov esi, settimemsg
  5435                              <2> 	; call print
  5436                              <2> 	; mov esi, timeinputbuffer
  5437                              <2> 	; mov edi, timeinputbend
  5438                              <2> 	; call readline
  5439                              <2> 	; mov esi, timeinputbuffer
  5440                              <2> 	; xor edi, edi
  5441                              <2> 	; call cnvrttxt
  5442 00003EE5 890D[53020000]      <2> 	mov [timeseconds], ecx
  5443                              <2> 	;xor ecx, ecx
  5444                              <2> 	;mov [timenanoseconds], ecx
  5445 00003EEB C605[A83E0000]01    <2> 	mov byte [istimeset], 1
  5446                              <2> timeisset:
  5447 00003EF2 8B0D[53020000]      <2> 	mov ecx, [timeseconds]
  5448 00003EF8 E8AAF2FFFF          <2> 	call showdec
  5449                              <2> 	
  5450 00003EFD 8B0D[57020000]      <2> 	mov ecx, [timenanoseconds]
  5451 00003F03 BE[9A3E0000]        <2> 	mov esi, timenscache
  5452 00003F08 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5453 00003F0F C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5454 00003F16 C6460A30            <2> 	mov byte [esi + 10], "0"
  5455 00003F1A BE[A53E0000]        <2> 	mov esi, timenscacheend
  5456 00003F1F E89EF0FFFF          <2> 	call convert
  5457 00003F24 BE[9A3E0000]        <2> 	mov esi, timenscache
  5458 00003F29 E8A3DDFFFF          <2> 	call printquiet
  5459                              <2> 	
  5460 00003F2E E82D000000          <2> 	call time
  5461 00003F33 BE[6A420000]        <2> 	mov esi, timeshow
  5462 00003F38 E894DDFFFF          <2> 	call printquiet
  5463 00003F3D BE[C2840000]        <2> 	mov esi, line
  5464 00003F42 E88ADDFFFF          <2> 	call printquiet
  5465 00003F47 BE[73420000]        <2> 	mov esi, dateshow
  5466 00003F4C E880DDFFFF          <2> 	call printquiet
  5467 00003F51 BE[C2840000]        <2> 	mov esi, line
  5468 00003F56 E876DDFFFF          <2> 	call printquiet
  5469 00003F5B E9BE000000          <2> 	jmp findday
  5470                              <2> time:
  5471 00003F60 E84F010000          <2> 	call tstackput1
  5472 00003F65 B00A                <2> 	mov al,10			;Get RTC register A
  5473 00003F67 E879010000          <2> 	call tget1
  5474 00003F6C A880                <2> 	test al,0x80			;Is update in progress?
  5475 00003F6E 75F0                <2> 	jne time				; yes, wait
  5476                              <2> 
  5477 00003F70 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5478 00003F72 E86E010000          <2> 	call tget1
  5479 00003F77 A2[61420000]        <2> 	mov [RTCtimeSecond],al
  5480                              <2> 
  5481 00003F7C B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5482 00003F7E E862010000          <2> 	call tget1
  5483 00003F83 A2[62420000]        <2> 	mov [RTCtimeMinute],al
  5484                              <2> 
  5485 00003F88 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5486 00003F8A E856010000          <2> 	call tget1
  5487 00003F8F A2[63420000]        <2> 	mov [RTCtimeHour],al
  5488                              <2> 
  5489 00003F94 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5490 00003F96 E84A010000          <2> 	call tget1
  5491 00003F9B A2[64420000]        <2> 	mov [RTCtimeDay],al
  5492                              <2> 
  5493 00003FA0 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5494 00003FA2 E83E010000          <2> 	call tget1
  5495 00003FA7 241F                <2> 	and al, 11111b
  5496 00003FA9 A2[65420000]        <2> 	mov [RTCtimeMonth],al
  5497                              <2> 
  5498 00003FAE B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5499 00003FB0 E830010000          <2> 	call tget1
  5500 00003FB5 A2[66420000]        <2> 	mov [RTCtimeYear],al
  5501                              <2> 	
  5502 00003FBA BE[6A420000]        <2> 	mov esi, timeshow
  5503 00003FBF 8A2D[63420000]      <2> 	mov ch, [RTCtimeHour]
  5504 00003FC5 E826010000          <2> 	call tput1
  5505 00003FCA 8A2D[62420000]      <2> 	mov ch, [RTCtimeMinute]
  5506 00003FD0 E81B010000          <2> 	call tput1
  5507 00003FD5 8A2D[61420000]      <2> 	mov ch, [RTCtimeSecond]
  5508 00003FDB E810010000          <2> 	call tput1
  5509 00003FE0 BE[73420000]        <2> 	mov esi, dateshow
  5510 00003FE5 8A2D[65420000]      <2> 	mov ch, [RTCtimeMonth]
  5511 00003FEB E800010000          <2> 	call tput1
  5512 00003FF0 8A2D[64420000]      <2> 	mov ch, [RTCtimeDay]
  5513 00003FF6 E8F5000000          <2> 	call tput1
  5514 00003FFB B520                <2> 	mov ch, 0x20
  5515 00003FFD E8EE000000          <2> 	call tput1
  5516 00004002 4E                  <2> 	dec esi
  5517 00004003 8A2D[66420000]      <2> 	mov ch, [RTCtimeYear]
  5518 00004009 E8E2000000          <2> 	call tput1
  5519 0000400E E8BB000000          <2> 	call tstackget1
  5520 00004013 C3                  <2> 	ret
  5521 00004014 BE[6A420000]        <2> 	mov esi, timeshow
  5522 00004019 E8D4DCFFFF          <2> 	call print
  5523                              <2> ;get day of week
  5524                              <2> ;add these:
  5525                              <2> ;century value
  5526                              <2> ;last 2 digits of year
  5527                              <2> ;last 2 digits of year right shifted twice
  5528                              <2> ;month table value
  5529                              <2> ;day of the month
  5530                              <2> ;divide these by 7
  5531                              <2> ;the remainder is the day
  5532                              <2> findday:
  5533 0000401E 31C0                <2> 	xor eax, eax
  5534                              <2> ;first convert the values from BCD to hex
  5535 00004020 A0[64420000]        <2> 	mov al, [RTCtimeDay]
  5536 00004025 E871000000          <2> 	call converttohex
  5537 0000402A 8825[67420000]      <2> 	mov [dayhex], ah
  5538 00004030 A0[65420000]        <2> 	mov al, [RTCtimeMonth]
  5539 00004035 E861000000          <2> 	call converttohex
  5540 0000403A 8825[68420000]      <2> 	mov [monthhex], ah
  5541 00004040 A0[66420000]        <2> 	mov al, [RTCtimeYear]
  5542 00004045 E851000000          <2> 	call converttohex
  5543 0000404A 8825[69420000]      <2> 	mov [yearhex], ah
  5544 00004050 31C0                <2> 	xor eax, eax
  5545 00004052 A0[69420000]        <2> 	mov al, [yearhex]
  5546 00004057 C0E802              <2> 	shr al, 2
  5547 0000405A 0205[69420000]      <2> 	add al, [yearhex]
  5548 00004060 83C006              <2> 	add eax, 6
  5549 00004063 31DB                <2> 	xor ebx, ebx
  5550 00004065 8A1D[68420000]      <2> 	mov bl, [monthhex]
  5551 0000406B FECB                <2> 	dec bl
  5552 0000406D 81C3[88420000]      <2> 	add ebx, month
  5553 00004073 31C9                <2> 	xor ecx, ecx
  5554 00004075 8A0B                <2> 	mov cl, [ebx]
  5555 00004077 01C8                <2> 	add eax, ecx
  5556 00004079 8A0D[67420000]      <2> 	mov cl, [dayhex]
  5557 0000407F 01C8                <2> 	add eax, ecx
  5558 00004081 66BB0700            <2> 	mov bx, 7
  5559 00004085 31D2                <2> 	xor edx, edx
  5560 00004087 66F7F3              <2> 	div bx
  5561 0000408A C1E202              <2> 	shl edx, 2
  5562 0000408D 81C2[94420000]      <2> 	add edx, day
  5563 00004093 8B32                <2> 	mov esi, [edx]
  5564 00004095 E858DCFFFF          <2> 	call print
  5565 0000409A C3                  <2> 	ret
  5566                              <2> 	
  5567                              <2> converttohex:
  5568 0000409B 88C4                <2> 	mov ah, al
  5569 0000409D C0E804              <2> 	shr al, 4
  5570 000040A0 C0E404              <2> 	shl ah, 4
  5571 000040A3 C0EC04              <2> 	shr ah, 4
  5572 000040A6 3C00                <2> 	cmp al, 0
  5573 000040A8 7409                <2> 	je noconverttohex
  5574                              <2> converttohexlp:
  5575 000040AA 80C40A              <2> 	add ah, 10
  5576 000040AD FEC8                <2> 	dec al
  5577 000040AF 3C00                <2> 	cmp al, 0
  5578 000040B1 75F7                <2> 	jne converttohexlp
  5579                              <2> noconverttohex:
  5580 000040B3 C3                  <2> 	ret
  5581                              <2> 	
  5582                              <2> tstackput1:
  5583 000040B4 8935[5D420000]      <2> 	mov [tstack + 20], esi
  5584 000040BA BE[49420000]        <2> 	mov esi, tstack
  5585 000040BF 8906                <2> 	mov [esi], eax
  5586 000040C1 895E04              <2> 	mov [esi + 4], ebx
  5587 000040C4 894E08              <2> 	mov [esi + 8], ecx
  5588 000040C7 89560C              <2> 	mov [esi + 12], edx
  5589 000040CA 897E10              <2> 	mov [esi + 16], edi
  5590 000040CD C3                  <2> 	ret
  5591                              <2> 	
  5592                              <2> tstackget1:
  5593 000040CE BE[49420000]        <2> 	mov esi, tstack
  5594 000040D3 8B06                <2> 	mov eax, [esi]
  5595 000040D5 8B5E04              <2> 	mov ebx, [esi + 4]
  5596 000040D8 8B4E08              <2> 	mov ecx, [esi + 8]
  5597 000040DB 8B560C              <2> 	mov edx, [esi + 12]
  5598 000040DE 8B7E10              <2> 	mov edi, [esi + 16]
  5599 000040E1 8B7614              <2> 	mov esi, [esi + 20]
  5600 000040E4 C3                  <2> 	ret
  5601                              <2> 	
  5602                              <2> tget1:
  5603 000040E5 66BA7000            <2> 	mov dx, 0x70
  5604 000040E9 EE                  <2> 	out dx, al
  5605 000040EA 6642                <2> 	inc dx
  5606 000040EC EC                  <2> 	in al, dx
  5607 000040ED 664A                <2> 	dec dx
  5608 000040EF C3                  <2> 	ret
  5609                              <2> 	
  5610                              <2> tput1:
  5611 000040F0 66C1E904            <2> 	shr cx, 4
  5612 000040F4 B030                <2> 	mov al, 48
  5613 000040F6 00E8                <2> 	add al, ch
  5614 000040F8 8806                <2> 	mov [esi], al
  5615 000040FA 46                  <2> 	inc esi
  5616 000040FB B030                <2> 	mov al, 48
  5617 000040FD C0E904              <2> 	shr cl, 4
  5618 00004100 00C8                <2> 	add al, cl
  5619 00004102 8806                <2> 	mov [esi], al
  5620 00004104 83C602              <2> 	add esi, 2
  5621 00004107 C3                  <2> 	ret
  5622                              <2> 	
  5623                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5624 00004108 31DB                <2> 	xor ebx, ebx
  5625 0000410A 31C9                <2> 	xor ecx, ecx
  5626 0000410C 31FF                <2> 	xor edi, edi
  5627 0000410E 31F6                <2> 	xor esi, esi
  5628                              <2> 	
  5629 00004110 A0[61420000]        <2> 	mov al, [RTCtimeSecond]
  5630 00004115 E881FFFFFF          <2> 	call converttohex
  5631 0000411A 88E1                <2> 	mov cl, ah
  5632                              <2> 	
  5633 0000411C A0[62420000]        <2> 	mov al, [RTCtimeMinute]
  5634 00004121 E875FFFFFF          <2> 	call converttohex
  5635 00004126 88E3                <2> 	mov bl, ah
  5636 00004128 B83C000000          <2> 	mov eax, 60
  5637 0000412D 31D2                <2> 	xor edx, edx
  5638 0000412F F7E3                <2> 	mul ebx
  5639 00004131 01C1                <2> 	add ecx, eax
  5640                              <2> 	
  5641 00004133 A0[63420000]        <2> 	mov al, [RTCtimeHour]
  5642 00004138 E85EFFFFFF          <2> 	call converttohex
  5643 0000413D 88E3                <2> 	mov bl, ah
  5644 0000413F B8100E0000          <2> 	mov eax, 3600
  5645 00004144 31D2                <2> 	xor edx, edx
  5646 00004146 F7E3                <2> 	mul ebx
  5647 00004148 01C1                <2> 	add ecx, eax
  5648                              <2> 		
  5649 0000414A 31C0                <2> 	xor eax, eax
  5650 0000414C A0[66420000]        <2> 	mov al, [RTCtimeYear]
  5651 00004151 E845FFFFFF          <2> 	call converttohex
  5652 00004156 6689C6              <2> 	mov si, ax
  5653 00004159 66C1EE08            <2> 	shr si, 8
  5654 0000415D 6683FE46            <2> 	cmp si, 70
  5655 00004161 7704                <2> 	ja .no100
  5656 00004163 6683C664            <2> 	add si, 100
  5657                              <2> .no100:
  5658 00004167 6681C66C07          <2> 	add si, 1900
  5659                              <2> 	
  5660 0000416C BB[3B420000]        <2> 	mov ebx, .month
  5661 00004171 A0[64420000]        <2> 	mov al, [RTCtimeDay]
  5662 00004176 E820FFFFFF          <2> 	call converttohex
  5663 0000417B 88E0                <2> 	mov al, ah
  5664 0000417D FEC8                <2> 	dec al
  5665 0000417F 31D2                <2> 	xor edx, edx
  5666 00004181 88C2                <2> 	mov dl, al
  5667 00004183 A0[65420000]        <2> 	mov al, [RTCtimeMonth]
  5668 00004188 E80EFFFFFF          <2> 	call converttohex
  5669 0000418D 88D0                <2> 	mov al, dl
  5670 0000418F 88E2                <2> 	mov dl, ah
  5671 00004191 30E4                <2> 	xor ah, ah
  5672 00004193 6689D5              <2> 	mov bp, dx
  5673                              <2> 	
  5674 00004196 6689F7              <2> 	mov di, si
  5675 00004199 66C1EF02            <2> 	shr di, 2
  5676 0000419D 66C1E702            <2> 	shl di, 2
  5677 000041A1 C605[3C420000]1C    <2> 	mov byte [.month + 1], 28
  5678 000041A8 6639F7              <2> 	cmp di, si
  5679 000041AB 7506                <2> 	jne .nofebmod
  5680 000041AD FE05[3C420000]      <2> 	inc byte [.month + 1]
  5681                              <2> .nofebmod:
  5682 000041B3 664D                <2> 	dec bp
  5683 000041B5 6683FD00            <2> 	cmp bp, 0
  5684 000041B9 7407                <2> 	je .ylp
  5685 000041BB 8A13                <2> 	mov dl, [ebx]
  5686 000041BD 01D0                <2> 	add eax, edx
  5687 000041BF 43                  <2> 	inc ebx
  5688 000041C0 EBF1                <2> 	jmp .nofebmod
  5689                              <2> 	
  5690                              <2> .ylp:
  5691 000041C2 6689F7              <2> 	mov di, si
  5692 000041C5 66C1EF02            <2> 	shr di, 2
  5693 000041C9 66C1E702            <2> 	shl di, 2
  5694 000041CD 81C18033E101        <2> 	add ecx, 31536000
  5695 000041D3 6639F7              <2> 	cmp di, si
  5696 000041D6 7506                <2> 	jne .noymod
  5697 000041D8 81C180510100        <2> 	add ecx, 86400
  5698                              <2> .noymod:
  5699 000041DE 664E                <2> 	dec si
  5700 000041E0 6681FEB207          <2> 	cmp si, 1970
  5701 000041E5 77DB                <2> 	ja .ylp
  5702                              <2> 	
  5703 000041E7 BB80510100          <2> 	mov ebx, 86400
  5704 000041EC 31D2                <2> 	xor edx, edx
  5705 000041EE F7E3                <2> 	mul ebx
  5706 000041F0 01C1                <2> 	add ecx, eax
  5707                              <2> 	
  5708 000041F2 31DB                <2> 	xor ebx, ebx
  5709 000041F4 31D2                <2> 	xor edx, edx
  5710 000041F6 B8100E0000          <2> 	mov eax, 3600
  5711 000041FB 8A3D[47420000]      <2> 	mov bh, [timezoneh]
  5712 00004201 80FF80              <2> 	cmp bh, 128
  5713 00004204 720A                <2> 	jb .posh
  5714 00004206 28FB                <2> 	sub bl, bh
  5715 00004208 30FF                <2> 	xor bh, bh
  5716 0000420A F7E3                <2> 	mul ebx
  5717 0000420C 01C1                <2> 	add ecx, eax
  5718 0000420E EB06                <2> 	jmp .doneth
  5719                              <2> .posh:
  5720 00004210 86DF                <2> 	xchg bl, bh
  5721 00004212 F7E3                <2> 	mul ebx
  5722 00004214 29C1                <2> 	sub ecx, eax
  5723                              <2> .doneth:
  5724                              <2> 
  5725 00004216 31DB                <2> 	xor ebx, ebx	
  5726 00004218 31D2                <2> 	xor edx, edx
  5727 0000421A B83C000000          <2> 	mov eax, 60
  5728 0000421F 8A3D[48420000]      <2> 	mov bh, [timezonem]
  5729 00004225 80FF80              <2> 	cmp bh, 128
  5730 00004228 720A                <2> 	jb .posm
  5731 0000422A 28FB                <2> 	sub bl, bh
  5732 0000422C 30FF                <2> 	xor bh, bh
  5733 0000422E F7E3                <2> 	mul ebx
  5734 00004230 01C1                <2> 	add ecx, eax
  5735 00004232 EB06                <2> 	jmp .donetm
  5736                              <2> .posm:
  5737 00004234 86DF                <2> 	xchg bl, bh
  5738 00004236 F7E3                <2> 	mul ebx
  5739 00004238 29C1                <2> 	sub ecx, eax
  5740                              <2> .donetm:
  5741                              <2> 
  5742 0000423A C3                  <2> 	ret
  5743                              <2> 	
  5744                              <2> 
  5745 0000423B 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5746 00004244 1F1E1F              <2>
  5747                              <2> 
  5748 00004247 FA                  <2> 	timezoneh db -6
  5749 00004248 00                  <2> 	timezonem db 0
  5750 00004249 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5751 00004252 000000000000000000- <2>
  5752 0000425B 000000000000        <2>
  5753 00004261 00                  <2> 	RTCtimeSecond db 0
  5754 00004262 00                  <2> 	RTCtimeMinute db 0
  5755 00004263 00                  <2> 	RTCtimeHour db 0
  5756 00004264 00                  <2> 	RTCtimeDay db 0
  5757 00004265 00                  <2> 	RTCtimeMonth db 0
  5758 00004266 00                  <2> 	RTCtimeYear db 0
  5759 00004267 00                  <2> 	dayhex db 0
  5760 00004268 00                  <2> 	monthhex db 0
  5761 00004269 00                  <2> 	yearhex db 0
  5762 0000426A 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5763 00004273 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5764 0000427C 302000              <2>
  5765                              <2> 	oldcentury:	;from 1700 to 1900
  5766 0000427F 040200              <2> 	db 4,2,0
  5767                              <2> 	century:	;from 2000 to 2500
  5768 00004282 060402000604        <2> 	db 6,4,2,0,6,4
  5769                              <2> 	month:
  5770 00004288 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5771 00004291 000305              <2>
  5772                              <2> 	day:
  5773 00004294 [B0420000]          <2> 	dd sunday
  5774 00004298 [B8420000]          <2> 	dd monday
  5775 0000429C [C0420000]          <2> 	dd tuesday
  5776 000042A0 [C9420000]          <2> 	dd wednesday
  5777 000042A4 [D4420000]          <2> 	dd thursday
  5778 000042A8 [DE420000]          <2> 	dd friday
  5779 000042AC [E6420000]          <2> 	dd saturday
  5780                              <2> sunday:
  5781 000042B0 53756E6461790A00    <2> 	db "Sunday",10,0
  5782                              <2> monday:
  5783 000042B8 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5784                              <2> tuesday:
  5785 000042C0 547565736461790A00  <2> 	db "Tuesday",10,0
  5786                              <2> wednesday:
  5787 000042C9 5765646E6573646179- <2> 	db "Wednesday",10,0
  5788 000042D2 0A00                <2>
  5789                              <2> thursday:
  5790 000042D4 54687572736461790A- <2> 	db "Thursday",10,0
  5791 000042DD 00                  <2>
  5792                              <2> friday:
  5793 000042DE 4672696461790A00    <2> 	db "Friday",10,0
  5794                              <2> saturday:
  5795 000042E6 53617475726461790A- <2> 	db "Saturday",10,0
  5796 000042EF 00                  <2>
  5797                              <1> %ifdef network.included
  5798                              <1> 	%include 'source/programs/dhcp.asm'
  5799                              <1> %endif
  5800                              <1> %ifdef disk.none
  5801                              <1> %else
  5802                              <1> 	%include 'source/programs/dos.asm'
  5803 000042F0 FF2C646F7300        <2> db 255,44,"dos",0
  5804                              <2> dosrunner:
  5805 000042F6 8925[08AE0300]      <2> 	mov [previousstack], esp
  5806 000042FC 8B3D[F62E0000]      <2> 	mov edi, [currentcommandloc]
  5807 00004302 83C704              <2> 	add edi, 4
  5808 00004305 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5809 0000430A E85C220000          <2> 	call loadfile
  5810 0000430F 8B3D[F62E0000]      <2> 	mov edi, [currentcommandloc]
  5811 00004315 83C704              <2> 	add edi, 4
  5812 00004318 81FA94010000        <2> 	cmp edx, 404
  5813 0000431E 0F845E000000        <2> 	je near .noprogfound
  5814 00004324 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5815 00004329 31C9                <2> 	xor ecx, ecx
  5816                              <2> .findparams:
  5817 0000432B 47                  <2> 	inc edi
  5818 0000432C 8A07                <2> 	mov al, [edi]
  5819 0000432E 3C20                <2> 	cmp al, " "
  5820 00004330 75F9                <2> 	jne .findparams
  5821                              <2> .copyparams:
  5822 00004332 8A07                <2> 	mov al, [edi]
  5823 00004334 8803                <2> 	mov [ebx], al
  5824 00004336 43                  <2> 	inc ebx
  5825 00004337 47                  <2> 	inc edi
  5826 00004338 41                  <2> 	inc ecx
  5827 00004339 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5828 0000433F 7304                <2> 	jae .nomoreparams
  5829 00004341 3C00                <2> 	cmp al, 0
  5830 00004343 75ED                <2> 	jne .copyparams
  5831                              <2> .nomoreparams:
  5832 00004345 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5833 0000434B 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5834 0000434F 8ED8                <2> 	mov ds, ax
  5835 00004351 8EC0                <2> 	mov es, ax
  5836 00004353 8EE0                <2> 	mov fs, ax
  5837 00004355 8EE8                <2> 	mov gs, ax
  5838 00004357 31C0                <2> 	xor eax, eax
  5839 00004359 31DB                <2> 	xor ebx, ebx
  5840 0000435B 31C9                <2> 	xor ecx, ecx
  5841 0000435D 31D2                <2> 	xor edx, edx
  5842 0000435F 31FF                <2> 	xor edi, edi
  5843 00004361 31F6                <2> 	xor esi, esi
  5844 00004363 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5845 0000436A 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5846 0000436E 6689DA              <2> 	mov dx, bx
  5847 00004371 8EC3                <2> 	mov es, bx
  5848 00004373 8EE3                <2> 	mov fs, bx
  5849 00004375 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5850 00004379 8EEB                <2> 	mov gs, bx
  5851 0000437B 8B25[08AE0300]      <2> 	mov esp, [previousstack]
  5852 00004381 C3                  <2> 	ret
  5853                              <2> .noprogfound:
  5854 00004382 BE[89840000]        <2> 	mov esi, notfound1
  5855 00004387 E866D9FFFF          <2> 	call print
  5856 0000438C 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  5857 00004392 83C604              <2> 	add esi, 4
  5858 00004395 E858D9FFFF          <2> 	call print
  5859 0000439A BE[91840000]        <2> 	mov esi, notfound2
  5860 0000439F E84ED9FFFF          <2> 	call print
  5861 000043A4 C3                  <2> 	ret
  5862                              <2> 	
  5863                              <1> %endif
  5864                              <1> %include 'source/programs/dump.asm'
  5865 000043A5 FF2C64756D7000      <2> db 255,44,"dump",0
  5866 000043AC 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  5867 000043B2 83C605              <2> 	add esi, 5
  5868 000043B5 31C9                <2> 	xor ecx, ecx
  5869 000043B7 66B83078            <2> 	mov ax, "0x"
  5870 000043BB 663906              <2> 	cmp [esi], ax
  5871 000043BE 7407                <2> 	je dumphexin
  5872 000043C0 E8B1EEFFFF          <2> 	call cnvrttxt
  5873 000043C5 EB0A                <2> 	jmp dumphexnow
  5874                              <2> dumphexin:
  5875 000043C7 83C602              <2> 	add esi, 2
  5876 000043CA E867EEFFFF          <2> 	call cnvrthextxt
  5877 000043CF EB00                <2> 	jmp dumphexnow
  5878                              <2> dumphexnow:
  5879 000043D1 89CF                <2> 	mov edi, ecx
  5880 000043D3 89FE                <2> 	mov esi, edi
  5881 000043D5 81C680030000        <2> 	add esi, 896
  5882                              <2> dumphexloop:
  5883 000043DB 8B0F                <2> 	mov ecx, [edi]
  5884 000043DD C605[E3300000]05    <2> 	mov byte [firsthexshown],5
  5885 000043E4 E80FEDFFFF          <2> 	call showhex
  5886 000043E9 83C704              <2> 	add edi, 4
  5887 000043EC 39F7                <2> 	cmp edi, esi
  5888 000043EE 72EB                <2> 	jb dumphexloop
  5889 000043F0 E837E4FFFF          <2> 	call termcopy
  5890 000043F5 C3                  <2> 	ret 
  5891                              <1> %include 'source/programs/echo.asm'
  5892 000043F6 FF2C6563686F00      <2> db 255,44,"echo",0
  5893                              <2> 	echoprog:
  5894 000043FD 8B35[F62E0000]      <2> 		mov esi, [currentcommandloc]
  5895 00004403 83C605              <2> 		add esi, 5
  5896 00004406 8A06                <2> 		mov al, [esi]
  5897 00004408 E8C4D8FFFF          <2> 		call printquiet
  5898 0000440D E8DBD8FFFF          <2> 		call printline
  5899 00004412 C3                  <2> 		ret
  5900 00004413 BB[88B00300]        <2> 	echovr:	mov ebx, variables
  5901 00004418 BF06000000          <2> 		mov edi, 6
  5902 0000441D E833000000          <2> 		call nxtvrech
  5903 00004422 EB4E                <2> 		jmp prntvr2
  5904 00004424 B13D                <2> 	echvar:	mov cl, '='
  5905 00004426 43                  <2> 		inc ebx
  5906 00004427 8A03                <2> 		mov al, [ebx]
  5907 00004429 3C00                <2> 		cmp al, 0
  5908 0000442B 7428                <2> 		je nxtvrech
  5909 0000442D 3C3D                <2> 		cmp al, '='
  5910 0000442F 741F                <2> 		je nxtvrechb1
  5911 00004431 8B35[F62E0000]      <2> 		mov esi, [currentcommandloc]
  5912 00004437 01FE                <2> 		add esi, edi
  5913 00004439 E8F7EAFFFF          <2> 		call cndtest
  5914 0000443E 3C02                <2> 		cmp al, 2
  5915 00004440 742C                <2> 		je prntvr
  5916 00004442 3C01                <2> 		cmp al, 1
  5917 00004444 7428                <2> 		je prntvr
  5918 00004446 8B35[F62E0000]      <2> 		mov esi, [currentcommandloc]
  5919 0000444C 01FE                <2> 		add esi, edi
  5920 0000444E EB05                <2> 		jmp nxtvrech
  5921                              <2> 	nxtvrechb1:
  5922 00004450 83EB02              <2> 		sub ebx, 2
  5923 00004453 EBCF                <2> 		jmp echvar
  5924 00004455 8A03                <2> 	nxtvrech: mov al, [ebx]
  5925 00004457 3C05                <2> 		cmp al, 5
  5926 00004459 740A                <2> 		je nxtvrec2
  5927 0000445B 43                  <2> 		inc ebx
  5928 0000445C 81FB[88C00300]      <2> 		cmp ebx, varend
  5929 00004462 72F1                <2> 		jb nxtvrech
  5930 00004464 C3                  <2> 		ret
  5931 00004465 43                  <2> 	nxtvrec2: inc ebx
  5932 00004466 8A03                <2> 		mov al, [ebx]
  5933 00004468 3C04                <2> 		cmp al, 4
  5934 0000446A 74B8                <2> 		je echvar
  5935 0000446C EBE7                <2> 		jmp nxtvrech
  5936 0000446E 43                  <2> 	prntvr: inc ebx
  5937 0000446F 89DE                <2> 		mov esi, ebx
  5938 00004471 C3                  <2> 		ret
  5939 00004472 E87BD8FFFF          <2> 	prntvr2: call print
  5940 00004477 BE[C2840000]        <2> 		mov esi, line
  5941 0000447C E871D8FFFF          <2> 		call print
  5942 00004481 C3                  <2> 		ret 
  5943                              <1> %include 'source/programs/else.asm'
  5944 00004482 FF2C656C736500      <2> 	db 255,44,"else",0
  5945 00004489 31C0                <2> elsecmd:	xor eax, eax
  5946 0000448B 3805[82B00300]      <2> 	cmp [BATCHISON], al
  5947 00004491 0F84D6F4FFFF        <2> 	je near notbatch
  5948 00004497 A0[19B00300]        <2> 	mov al, [IFON]
  5949 0000449C BE[1AB00300]        <2> 	mov esi, IFTRUE
  5950 000044A1 01C6                <2> 	add esi, eax
  5951 000044A3 8A06                <2> 	mov al, [esi]
  5952 000044A5 3401                <2> 	xor al, 1
  5953 000044A7 8806                <2> 	mov [esi], al
  5954 000044A9 C3                  <2> 	ret 
  5955                              <1> %include 'source/programs/exit.asm'
  5956 000044AA FF2C6578697400      <2> db 255,44,"exit",0
  5957 000044B1 803D[18B00300]01    <2> 	cmp byte [ranboot], 1
  5958 000044B8 0F8431E7FFFF        <2> 	je near returnfromexp
  5959 000044BE E91CE6FFFF          <2> 	jmp nobootfile
  5960                              <1> %include 'source/programs/fi.asm'
  5961 000044C3 FF2C666900          <2> 	db 255,44,"fi",0
  5962 000044C8 30C0                <2> 	xor al, al
  5963 000044CA 3805[82B00300]      <2> 	cmp [BATCHISON], al
  5964 000044D0 0F8497F4FFFF        <2> 	je near notbatch
  5965 000044D6 B001                <2> fi:	mov al, 1
  5966 000044D8 2805[19B00300]      <2> 	sub [IFON],al
  5967 000044DE C3                  <2> 	ret 
  5968                              <1> %ifdef gui.included
  5969                              <1> 	%include 'source/programs/gui.asm'
  5970 000044DF FF2C67756900        <2> db 255,44,"gui",0
  5971                              <2> guiswitcher:
  5972 000044E5 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  5973 000044EB 83C604              <2> 	add esi, 4
  5974 000044EE 31C9                <2> 	xor ecx, ecx
  5975 000044F0 803E00              <2> 	cmp byte [esi], 0
  5976 000044F3 7407                <2> 	je .nomodepref
  5977 000044F5 E83CEDFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5978 000044FA EB07                <2> 	jmp .modepref
  5979                              <2> .nomodepref:
  5980 000044FC 51                  <2> 	push ecx
  5981 000044FD E89CD8FFFF          <2> 	call clear
  5982 00004502 59                  <2> 	pop ecx
  5983                              <2> .modepref:
  5984 00004503 66C705[E10C0000]-   <2> 	mov word [realmodeptr], guiswitch
  5985 0000450A [1651]              <2>
  5986 0000450C E8C4C6FFFF          <2> 	call realmode
  5987                              <2> guiswitchret:
  5988 00004511 65803D[E7840000]01  <2> 	cmp byte [gs:guion], 1
  5989 00004519 7401                <2> 	je .cont
  5990 0000451B C3                  <2> 	ret
  5991                              <2> .cont:
  5992 0000451C BF[F2520000]        <2> 	mov edi, VBEMODEBLOCK
  5993                              <2> .loop:
  5994 00004521 658B07              <2> 	mov eax, [gs:edi]
  5995 00004524 8907                <2> 	mov [edi], eax
  5996 00004526 47                  <2> 	inc edi
  5997 00004527 81FF[F6550000]      <2> 	cmp edi, VBEEND
  5998 0000452D 72F2                <2> 	jb .loop
  5999 0000452F A1[1A550000]        <2> 	mov eax, [physbaseptr]
  6000 00004534 8B1D[33020000]      <2> 	mov ebx, [basecache]
  6001 0000453A C1E304              <2> 	shl ebx, 4
  6002 0000453D 29D8                <2> 	sub eax, ebx
  6003 0000453F A3[1A550000]        <2> 	mov [physbaseptr], eax
  6004 00004544 C605[59230000]00    <2> 	mov byte [termguion], 0
  6005 0000454B BE[9CC80300]        <2> 	mov esi, graphicstable
  6006 00004550 30C0                <2> 	xor al, al
  6007                              <2> .clear:
  6008 00004552 8806                <2> 	mov [esi], al
  6009 00004554 46                  <2> 	inc esi
  6010 00004555 81FE[9CCA0300]      <2> 	cmp esi, graphicstableend
  6011 0000455B 72F5                <2> 	jb .clear
  6012 0000455D E80F2A0000          <2> 	call guisetup
  6013                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6014 00004562 668B15[04550000]    <2> 	mov dx, [resolutionx]
  6015 00004569 668B0D[06550000]    <2> 	mov cx, [resolutiony]
  6016 00004570 6689D3              <2> 	mov bx, dx
  6017 00004573 6689C8              <2> 	mov ax, cx
  6018 00004576 66D1EB              <2> 	shr bx, 1
  6019 00004579 66D1E8              <2> 	shr ax, 1
  6020 0000457C 6689DA              <2> 	mov dx, bx
  6021 0000457F 66D1EA              <2> 	shr dx, 1
  6022 00004582 6689C1              <2> 	mov cx, ax
  6023 00004585 66D1E9              <2> 	shr cx, 1
  6024 00004588 6601D3              <2> 	add bx, dx
  6025 0000458B 6601C8              <2> 	add ax, cx
  6026 0000458E 66D1E9              <2> 	shr cx, 1
  6027 00004591 66C1EB03            <2> 	shr bx, 3
  6028 00004595 66C1E303            <2> 	shl bx, 3
  6029 00004599 66C1E804            <2> 	shr ax, 4
  6030 0000459D 66C1E004            <2> 	shl ax, 4
  6031 000045A1 66891D[7A710000]    <2> 	mov [termwindow], bx
  6032 000045A8 66A3[7C710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6033 000045AE BE[7A710000]        <2> 	mov esi, termwindow
  6034 000045B3 31DB                <2> 	xor ebx, ebx
  6035 000045B5 6631C0              <2> 	xor ax, ax
  6036 000045B8 E8DB300000          <2> 	call showwindow
  6037 000045BD E835100000          <2> 	call cursorgui
  6038 000045C2 E8D7D7FFFF          <2> 	call clear
  6039 000045C7 C3                  <2> 	ret
  6040                              <2> 	
  6041                              <1> %endif
  6042                              <1> %include 'source/programs/help.asm'
  6043 000045C8 FF2C68656C7000      <2> db 255,44,"help",0
  6044                              <2> lscmd:	
  6045 000045CF B00D                <2> 		mov al, 13
  6046 000045D1 E885DDFFFF          <2> 		call prcharq
  6047 000045D6 BE[2E330000]        <2> 		mov esi, progstart
  6048 000045DB BB[16510000]        <2> 		mov ebx, progend
  6049 000045E0 BE[08AA0300]        <2> dir:	mov esi, fileindex
  6050 000045E5 8A06                <2> 	dirnxt:	mov al, [esi]
  6051 000045E7 30E4                <2> 		xor ah, ah
  6052 000045E9 3CFF                <2> 		cmp al, 255
  6053 000045EB 7415                <2> 		je dirfnd
  6054 000045ED 46                  <2> 		inc esi
  6055 000045EE 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6056 000045F4 7339                <2> 		jae dirdn
  6057 000045F6 EBED                <2> 		jmp dirnxt
  6058                              <2> 	dirfnd3:
  6059 000045F8 46                  <2> 		inc esi
  6060 000045F9 81FE[08AE0300]      <2> 		cmp esi, fileindexend
  6061 000045FF 76E4                <2> 		jbe dirnxt
  6062 00004601 4E                  <2> 		dec esi
  6063 00004602 46                  <2> 	dirfnd:	inc esi
  6064 00004603 8A06                <2> 		mov al, [esi]
  6065 00004605 30E4                <2> 		xor ah, ah
  6066 00004607 3C2C                <2> 		cmp al, 44
  6067 00004609 740B                <2> 		je dirfnd2
  6068 0000460B 46                  <2> 		inc esi
  6069 0000460C 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6070 00004612 731B                <2> 		jae dirdn
  6071 00004614 EBCF                <2> 		jmp dirnxt
  6072 00004616 46                  <2> 	dirfnd2: inc esi
  6073 00004617 E8B5D6FFFF          <2> 		call printquiet
  6074 0000461C 56                  <2> 		push esi
  6075 0000461D B009                <2> 		mov al, 9
  6076 0000461F E837DDFFFF          <2> 		call prcharq
  6077 00004624 5E                  <2> 		pop esi
  6078 00004625 81FE[08AE0300]      <2> 		cmp esi,  fileindexend
  6079 0000462B 7302                <2> 		jae dirdn
  6080 0000462D EBB6                <2> 		jmp dirnxt
  6081 0000462F BE[C2840000]        <2> 	dirdn:	mov esi, line
  6082 00004634 E8B9D6FFFF          <2> 			call print
  6083 00004639 C3                  <2> 			ret
  6084 0000463A 00                  <2> currentdir db 0
  6085                              <1> %include 'source/programs/if.asm'
  6086 0000463B FF2C696600          <2> 	db 255,44,"if",0
  6087 00004640 30C0                <2> ifcmd:	xor al, al
  6088 00004642 3805[82B00300]      <2> 	cmp [BATCHISON], al
  6089 00004648 0F841FF3FFFF        <2> 	je near notbatch
  6090 0000464E 8B1D[F62E0000]      <2> 	mov ebx, [currentcommandloc]
  6091 00004654 83C303              <2> 	add ebx, 3
  6092 00004657 89DE                <2> 	mov esi, ebx
  6093 00004659 8A06                <2> chkeqsn: mov al, [esi]
  6094 0000465B 3C00                <2> 	cmp al, 0
  6095 0000465D 0F840AF3FFFF        <2> 	je near notbatch
  6096 00004663 3C3D                <2> 	cmp al, '='
  6097 00004665 0F8403000000        <2> 	je near chkeqdn
  6098 0000466B 46                  <2> 	inc esi
  6099 0000466C EBEB                <2> 	jmp chkeqsn
  6100 0000466E B000                <2> chkeqdn: mov al, 0 
  6101 00004670 8806                <2> 	mov [esi], al
  6102 00004672 46                  <2> 	inc esi
  6103 00004673 E882E8FFFF          <2> 	call tester
  6104 00004678 3C01                <2> 	cmp al, 1
  6105 0000467A 0F8402000000        <2> 	je near trueif
  6106 00004680 EB1C                <2> 	jmp falseif
  6107 00004682 31C0                <2> trueif:	xor eax, eax
  6108 00004684 A0[19B00300]        <2> 	mov al, [IFON]
  6109 00004689 FEC0                <2> 	inc al
  6110 0000468B A2[19B00300]        <2> 	mov [IFON], al
  6111 00004690 30E4                <2> 	xor ah, ah
  6112 00004692 BE[1AB00300]        <2> 	mov esi, IFTRUE
  6113 00004697 01C6                <2> 	add esi, eax
  6114 00004699 B401                <2> 	mov ah, 1
  6115 0000469B 8826                <2> 	mov [esi], ah
  6116 0000469D C3                  <2> 	ret 
  6117 0000469E 31C0                <2> falseif: xor eax, eax
  6118 000046A0 A0[19B00300]        <2> 	mov al, [IFON]
  6119 000046A5 FEC0                <2> 	inc al
  6120 000046A7 A2[19B00300]        <2> 	mov [IFON], al
  6121 000046AC 30E4                <2> 	xor ah, ah
  6122 000046AE BE[1AB00300]        <2> 	mov esi, IFTRUE
  6123 000046B3 01C6                <2> 	add esi, eax
  6124 000046B5 30E4                <2> 	xor ah, ah
  6125 000046B7 8826                <2> 	mov [esi], ah
  6126 000046B9 C3                  <2> 	ret 
  6127                              <1> %ifdef network.included
  6128                              <1> 	%include 'source/programs/ipconfig.asm'
  6129                              <1> %endif
  6130                              <1> %include 'source/programs/keycode.asm'
  6131 000046BA FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6132 000046C3 00                  <2>
  6133                              <2> keycode:
  6134 000046C4 66C705[2C230000]00- <2> 	mov word [trans], 0
  6135 000046CC 00                  <2>
  6136 000046CD C605[14670000]00    <2> 	mov byte [threadson], 0
  6137                              <2> %ifdef io.serial
  6138                              <2> .noserial:
  6139                              <2> 	hlt
  6140                              <2> 	mov dx, [serial.address]
  6141                              <2> 	in al, dx
  6142                              <2> 	cmp al, 0
  6143                              <2> 	je .noserial
  6144                              <2> 	mov cl, al
  6145                              <2> 	call showhexsmall
  6146                              <2> 	cmp al, 0x1B
  6147                              <2> 	jne .noserial
  6148                              <2> 	in al, dx
  6149                              <2> 	mov cl, al
  6150                              <2> 	call showhexsmall
  6151                              <2> 	cmp cl, 0x5B
  6152                              <2> 	je .noserial
  6153                              <2> 	ret
  6154                              <2> %else
  6155 000046D4 E818150000          <2> 	call getkey
  6156 000046D9 31C0                <2> 	xor eax, eax
  6157 000046DB 31C9                <2> 	xor ecx, ecx
  6158 000046DD 8A0D[CE5B0000]      <2> 	mov cl, [specialkey]
  6159 000046E3 80F900              <2> 	cmp cl, 0
  6160 000046E6 0F8405000000        <2> 	je near .nospecialkeycode
  6161 000046EC E8F3E9FFFF          <2> 	call showhexsmall
  6162                              <2> .nospecialkeycode:
  6163 000046F1 668B0D[2A230000]    <2> 	mov cx, [lastkey + 2]
  6164 000046F8 E8E7E9FFFF          <2> 	call showhexsmall
  6165 000046FD 80F901              <2> 	cmp cl, 1
  6166 00004700 75C2                <2> 	jne keycode
  6167 00004702 C3                  <2> 	ret
  6168                              <2> %endif
  6169                              <1> %ifdef gui.included
  6170                              <1> 	%include 'source/programs/line.asm'
  6171 00004703 FF2C6C696E6500      <2> db 255,44,"line",0
  6172                              <2> linetester:
  6173 0000470A 803D[E7840000]00    <2> 	cmp byte [guion], 0
  6174 00004711 0F841B000000        <2> 	je near .done
  6175 00004717 668B35[59020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6176 0000471E BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6177 00004723 E865000000          <2> 	call .circletest
  6178 00004728 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6179 0000472D E801000000          <2> 	call .linetest
  6180                              <2> .done:
  6181 00004732 C3                  <2> 	ret
  6182                              <2> 
  6183                              <2> .linetest:
  6184 00004733 53                  <2> 	push ebx
  6185 00004734 E8D0000000          <2> 	call .stime
  6186 00004739 5B                  <2> 	pop ebx
  6187 0000473A 31FF                <2> 	xor edi, edi
  6188                              <2> .ltlp:
  6189 0000473C 53                  <2> 	push ebx
  6190 0000473D E812010000          <2> 	call .st
  6191 00004742 66F7D6              <2> 	not si
  6192 00004745 E80A010000          <2> 	call .st
  6193 0000474A 5B                  <2> 	pop ebx
  6194 0000474B 66F7D6              <2> 	not si
  6195 0000474E 660335[57020000]    <2> 	add si, [timenanoseconds]
  6196 00004755 4B                  <2> 	dec ebx
  6197 00004756 83FB00              <2> 	cmp ebx, 0
  6198 00004759 77E1                <2> 	ja .ltlp
  6199 0000475B E8C1000000          <2> 	call .etime
  6200 00004760 53                  <2> 	push ebx	
  6201 00004761 57                  <2> 	push edi
  6202 00004762 E8FF250000          <2> 	call guiclear
  6203 00004767 E87B260000          <2> 	call reloadallgraphics
  6204 0000476C 59                  <2> 	pop ecx
  6205 0000476D E835EAFFFF          <2> 	call showdec
  6206 00004772 BE[93480000]        <2> 	mov esi, .msg
  6207 00004777 E876D5FFFF          <2> 	call print
  6208 0000477C 59                  <2> 	pop ecx
  6209 0000477D E825EAFFFF          <2> 	call showdec
  6210 00004782 BE[BF480000]        <2> 	mov esi, .msgtime
  6211 00004787 E866D5FFFF          <2> 	call print
  6212 0000478C C3                  <2> 	ret
  6213                              <2> 	
  6214                              <2> .circletest:
  6215 0000478D 53                  <2> 	push ebx
  6216 0000478E E876000000          <2> 	call .stime
  6217 00004793 5B                  <2> 	pop ebx
  6218 00004794 31FF                <2> 	xor edi, edi
  6219                              <2> .ctlp:
  6220 00004796 53                  <2> 	push ebx
  6221 00004797 668B0D[06550000]    <2> 	mov cx, [resolutiony]
  6222 0000479E 66D1E9              <2> 	shr cx, 1
  6223 000047A1 668B15[04550000]    <2> 	mov dx, [resolutionx]
  6224 000047A8 66D1EA              <2> 	shr dx, 1
  6225 000047AB 6689C8              <2> 	mov ax, cx
  6226                              <2> .circle:
  6227 000047AE 60                  <2> 	pusha
  6228 000047AF E84B200000          <2> 	call drawcircle
  6229 000047B4 61                  <2> 	popa
  6230 000047B5 6648                <2> 	dec ax
  6231 000047B7 47                  <2> 	inc edi
  6232 000047B8 6683F801            <2> 	cmp ax, 1
  6233 000047BC 77F0                <2> 	ja .circle
  6234 000047BE 66F7D6              <2> 	not si
  6235                              <2> .circle2:
  6236 000047C1 60                  <2> 	pusha
  6237 000047C2 E838200000          <2> 	call drawcircle
  6238 000047C7 61                  <2> 	popa
  6239 000047C8 47                  <2> 	inc edi
  6240 000047C9 6640                <2> 	inc ax
  6241 000047CB 6639C8              <2> 	cmp ax, cx
  6242 000047CE 76F1                <2> 	jbe .circle2
  6243 000047D0 5B                  <2> 	pop ebx
  6244 000047D1 66F7D6              <2> 	not si
  6245 000047D4 660335[57020000]    <2> 	add si, [timenanoseconds]
  6246 000047DB 4B                  <2> 	dec ebx
  6247 000047DC 83FB00              <2> 	cmp ebx, 0
  6248 000047DF 77B5                <2> 	ja .ctlp
  6249 000047E1 E83B000000          <2> 	call .etime
  6250 000047E6 53                  <2> 	push ebx
  6251 000047E7 57                  <2> 	push edi
  6252 000047E8 59                  <2> 	pop ecx
  6253 000047E9 E8B9E9FFFF          <2> 	call showdec
  6254 000047EE BE[A8480000]        <2> 	mov esi, .msgcircle
  6255 000047F3 E8FAD4FFFF          <2> 	call print
  6256 000047F8 59                  <2> 	pop ecx
  6257 000047F9 E8A9E9FFFF          <2> 	call showdec
  6258 000047FE BE[BF480000]        <2> 	mov esi, .msgtime
  6259 00004803 E8EAD4FFFF          <2> 	call print
  6260 00004808 C3                  <2> 	ret
  6261                              <2> 	
  6262                              <2> .stime:
  6263 00004809 F4                  <2> 	hlt
  6264 0000480A A1[53020000]        <2> 	mov eax, [timeseconds]
  6265 0000480F 8B1D[57020000]      <2> 	mov ebx, [timenanoseconds]
  6266 00004815 A3[CE480000]        <2> 	mov [.time], eax
  6267 0000481A 891D[D2480000]      <2> 	mov [.time + 4], ebx
  6268 00004820 C3                  <2> 	ret
  6269                              <2> 	
  6270                              <2> .etime:
  6271 00004821 A1[53020000]        <2> 	mov eax, [timeseconds]
  6272 00004826 8B1D[57020000]      <2> 	mov ebx, [timenanoseconds]
  6273 0000482C 8B0D[CE480000]      <2> 	mov ecx, [.time]
  6274 00004832 8B15[D2480000]      <2> 	mov edx, [.time + 4]
  6275 00004838 C1EA0A              <2> 	shr edx, 10
  6276 0000483B C1EB0A              <2> 	shr ebx, 10
  6277 0000483E 29C8                <2> 	sub eax, ecx
  6278 00004840 83F800              <2> 	cmp eax, 0
  6279 00004843 740C                <2> 	je .notclp
  6280                              <2> .tclp:
  6281 00004845 81C340420F00        <2> 	add ebx, 1000000
  6282 0000484B 48                  <2> 	dec eax
  6283 0000484C 83F800              <2> 	cmp eax, 0
  6284 0000484F 75F4                <2> 	jne .tclp
  6285                              <2> .notclp:
  6286 00004851 29D3                <2> 	sub ebx, edx
  6287 00004853 C3                  <2> 	ret
  6288                              <2> 	
  6289                              <2> .st:
  6290 00004854 6631C0              <2> 	xor ax, ax
  6291 00004857 6631DB              <2> 	xor bx, bx
  6292 0000485A 668B0D[06550000]    <2> 	mov cx, [resolutiony]
  6293 00004861 668B15[04550000]    <2> 	mov dx, [resolutionx]
  6294                              <2> .lp:
  6295 00004868 60                  <2> 	pusha
  6296 00004869 E8E5230000          <2> 	call drawline
  6297 0000486E 61                  <2> 	popa
  6298                              <2> .noswitch:
  6299 0000486F 47                  <2> 	inc edi
  6300 00004870 6643                <2> 	inc bx
  6301 00004872 664A                <2> 	dec dx
  6302 00004874 6683FB00            <2> 	cmp bx, 0
  6303 00004878 74EE                <2> 	je .lp
  6304 0000487A 6683FA00            <2> 	cmp dx, 0
  6305 0000487E 75E8                <2> 	jne .lp
  6306                              <2> .lp2:
  6307 00004880 60                  <2> 	pusha
  6308 00004881 E8CD230000          <2> 	call drawline
  6309 00004886 61                  <2> 	popa
  6310 00004887 47                  <2> 	inc edi
  6311 00004888 6640                <2> 	inc ax
  6312 0000488A 6649                <2> 	dec cx
  6313 0000488C 6683F900            <2> 	cmp cx, 0
  6314 00004890 75EE                <2> 	jne .lp2
  6315 00004892 C3                  <2> 	ret
  6316                              <2> 	
  6317 00004893 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6318 0000489C 6520647261776E2069- <2>
  6319 000048A5 6E2000              <2>
  6320 000048A8 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6321 000048B1 65726520647261776E- <2>
  6322 000048BA 20696E2000          <2>
  6323 000048BF 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6324 000048C8 6E64732E0A00        <2>
  6325 000048CE 0000000000000000    <2> .time dd 0,0	
  6326                              <1> %endif
  6327                              <1> %include 'source/programs/logout.asm'
  6328 000048D6 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6329 000048DF E9BAE1FFFF          <2> 	jmp os
  6330                              <1> %include 'source/programs/loop.asm'
  6331 000048E4 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6332 000048EB 803D[83B00300]00    <2> 	cmp byte [LOOPON], 0
  6333 000048F2 0F8501000000        <2> 	jne near filoop
  6334 000048F8 C3                  <2> 	ret
  6335 000048F9 8B35[84B00300]      <2> filoop: mov esi, [LOOPPOS]
  6336 000048FF FE0D[19B00300]      <2> 	dec byte [IFON]
  6337 00004905 C605[83B00300]00    <2> 	mov byte [LOOPON], 0
  6338 0000490C 8935[7EB00300]      <2> 	mov [BATCHPOS], esi
  6339 00004912 8935[A1380000]      <2> 	mov [batchedi], esi
  6340 00004918 C3                  <2> 	ret 
  6341                              <1> %ifdef disk.none
  6342                              <1> %else
  6343                              <1> 	%include 'source/programs/ls.asm'
  6344 00004919 FF2C6C7300          <2> db 255,44,"ls",0
  6345 0000491E BE[41870300]        <2> 		mov esi, diskfileindex
  6346                              <2> 	diskindexdir:
  6347 00004923 803E5F              <2> 		cmp byte [esi], '_'
  6348 00004926 743D                <2> 		je nextdiskindexdir
  6349 00004928 E8A4D3FFFF          <2> 		call printquiet
  6350 0000492D 56                  <2> 		push esi
  6351 0000492E BE[82490000]        <2> 		mov esi, disktab
  6352 00004933 E899D3FFFF          <2> 		call printquiet
  6353 00004938 5E                  <2> 		pop esi
  6354 00004939 8B4E05              <2> 		mov ecx, [esi + 5]
  6355 0000493C C605[E3300000]05    <2> 		mov byte [firsthexshown], 5
  6356 00004943 E85FE8FFFF          <2> 		call showdec
  6357 00004948 56                  <2> 		push esi
  6358 00004949 BE[C2840000]        <2> 		mov esi, line
  6359 0000494E E87ED3FFFF          <2> 		call printquiet
  6360 00004953 5E                  <2> 		pop esi
  6361 00004954 83C609              <2> 		add esi, 9
  6362 00004957 81FE[37880300]      <2> 		cmp esi, enddiskfileindex
  6363 0000495D 72C4                <2> 		jb diskindexdir
  6364 0000495F E8C8DEFFFF          <2> 		call termcopy
  6365 00004964 C3                  <2> 		ret
  6366                              <2> 	nextdiskindexdir:
  6367 00004965 46                  <2> 		inc esi
  6368 00004966 803E00              <2> 		cmp byte [esi], 0
  6369 00004969 75FA                <2> 		jne nextdiskindexdir
  6370 0000496B 83C609              <2> 		add esi, 9
  6371 0000496E 81FE[37880300]      <2> 		cmp esi, enddiskfileindex
  6372 00004974 72AD                <2> 		jb diskindexdir
  6373 00004976 E8B1DEFFFF          <2> 		call termcopy
  6374 0000497B C3                  <2> 		ret
  6375                              <2> 		
  6376 0000497C 4469736B2000        <2> 		diskmsg db "Disk ",0
  6377 00004982 0D09090900          <2> 		disktab db 13,9,9,9,0
  6378                              <1> %endif
  6379                              <1> %include 'source/programs/memory.asm'
  6380 00004987 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6381 00004990 BE[FD840000]        <2> 	mov esi, memlistbuf
  6382 00004995 31FF                <2> 	xor edi, edi
  6383 00004997 668B3D[3D870000]    <2> 	mov di, [memlistend]
  6384 0000499E 01F7                <2> 	add edi, esi
  6385                              <2> printmemmap:
  6386 000049A0 8B0E                <2> 	mov ecx, [esi]
  6387 000049A2 E851E7FFFF          <2> 	call showhex
  6388 000049A7 83C608              <2> 	add esi, 8
  6389 000049AA 8B0E                <2> 	mov ecx, [esi]
  6390 000049AC E847E7FFFF          <2> 	call showhex
  6391 000049B1 83C608              <2> 	add esi, 8
  6392 000049B4 8B0E                <2> 	mov ecx, [esi]
  6393 000049B6 E83DE7FFFF          <2> 	call showhex
  6394 000049BB 83C608              <2> 	add esi, 8
  6395 000049BE 57                  <2> 	push edi
  6396 000049BF 56                  <2> 	push esi
  6397 000049C0 E828D3FFFF          <2> 	call printline
  6398 000049C5 5E                  <2> 	pop esi
  6399 000049C6 5F                  <2> 	pop edi
  6400 000049C7 39FE                <2> 	cmp esi, edi
  6401 000049C9 72D5                <2> 	jb printmemmap
  6402 000049CB C3                  <2> 	ret
  6403                              <2> 	
  6404                              <1> %include 'source/programs/pci.asm'
  6405 000049CC FF2C70636900        <2> db 255,44,"pci",0
  6406 000049D2 E876180000          <2> 	call pcidump
  6407 000049D7 C3                  <2> 	ret 
  6408                              <1> %ifdef network.included
  6409                              <1> 	%include 'source/programs/ping.asm'
  6410                              <1> %endif
  6411                              <1> %ifdef disk.none
  6412                              <1> %else
  6413                              <1> 	%include 'source/programs/play.asm'
  6414 000049D8 FF2C706C61796100    <2> db 255,44,"playa",0
  6415 000049E0 8B3D[F62E0000]      <2> 	mov edi, [currentcommandloc]
  6416 000049E6 83C706              <2> 	add edi, 6
  6417 000049E9 E830000000          <2> 	call playasync
  6418 000049EE C3                  <2> 	ret
  6419 000049EF FF2C706C61792000    <2> db 255,44,"play ",0
  6420                              <2> play:
  6421 000049F7 8B3D[F62E0000]      <2> 	mov edi, [currentcommandloc]
  6422 000049FD 83C705              <2> 	add edi, 5
  6423 00004A00 E819000000          <2> 	call playasync
  6424                              <2> .waitforsound:
  6425 00004A05 F4                  <2> 	hlt
  6426                              <2> %ifdef sound.included
  6427 00004A06 A1[B85B0000]        <2> 	mov eax, [Length0]
  6428 00004A0B 660B05[BC5B0000]    <2> 	or ax, [Length1]
  6429                              <2> %endif
  6430 00004A12 0A05[5B020000]      <2> 	or al, [soundon]
  6431 00004A18 83F800              <2> 	cmp eax, 0
  6432 00004A1B 75E8                <2> 	jne .waitforsound
  6433 00004A1D C3                  <2> 	ret
  6434                              <2> playasync:
  6435 00004A1E BE0000C000          <2> 	mov esi, 0xC00000
  6436 00004A23 E8431B0000          <2> 	call loadfile
  6437 00004A28 81FA94010000        <2> 	cmp edx, 404
  6438 00004A2E 743C                <2> 	je nosoundfound
  6439 00004A30 BB0000C000          <2> 	mov ebx, 0xC00000
  6440 00004A35 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6441 00004A3C 0F8432010000        <2> 	je near wave_player
  6442 00004A42 66813B534E          <2> 	cmp word [ebx], "SN"
  6443 00004A47 7523                <2> 	jne nosoundfound
  6444 00004A49 83C306              <2> 	add ebx, 6
  6445 00004A4C 891D[5E020000]      <2> 	mov [soundpos], ebx
  6446 00004A52 035BFC              <2> 	add ebx, [ebx - 4]
  6447 00004A55 891D[62020000]      <2> 	mov [soundendpos], ebx
  6448 00004A5B 66C705[5C020000]00- <2> 	mov word [soundrepititions], 0
  6449 00004A63 00                  <2>
  6450 00004A64 C605[5B020000]01    <2> 	mov byte [soundon], 1
  6451 00004A6B C3                  <2> 	ret
  6452                              <2> nosoundfound:
  6453 00004A6C BE[8F4A0000]        <2> 	mov esi, notfoundsound
  6454 00004A71 E87CD2FFFF          <2> 	call print
  6455 00004A76 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  6456 00004A7C 83C605              <2> 	add esi, 5
  6457 00004A7F E86ED2FFFF          <2> 	call print
  6458 00004A84 BE[91840000]        <2> 	mov esi, notfound2
  6459 00004A89 E864D2FFFF          <2> 	call print
  6460 00004A8E C3                  <2> 	ret
  6461 00004A8F 706C61793A2000      <2> notfoundsound db "play: ",0
  6462                              <2> 
  6463                              <2> %ifdef sound.included
  6464                              <2> sbplay:
  6465 00004A96 BE0000C000          <2> 		mov esi, 0xC00000
  6466 00004A9B 89F3                <2> 		mov ebx, esi
  6467 00004A9D 83C62C              <2> 		add esi, WAVSTART
  6468 00004AA0 29F7                <2> 		sub edi, esi
  6469 00004AA2 66893D[BC5B0000]    <2> 		mov [Length1], di
  6470 00004AA9 C1EF0F              <2> 		shr edi, 15
  6471 00004AAC 893D[B85B0000]      <2> 		mov [Length0], edi
  6472 00004AB2 8B4B18              <2> 		mov ecx, [ebx + 24]
  6473 00004AB5 890D[C95B0000]      <2> 		mov [Freq], ecx
  6474 00004ABB 31C0                <2> 		xor eax, eax
  6475 00004ABD BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6476 00004AC2 83C22C              <2> 		add edx, WAVSTART
  6477 00004AC5 01D0                <2> 		add	eax, edx
  6478 00004AC7 89C6                <2> 		mov esi, eax
  6479 00004AC9 31C9                <2> 		xor ecx, ecx
  6480 00004ACB 31DB                <2> 		xor ebx, ebx
  6481 00004ACD 66891D[C65B0000]    <2> 		mov [SegLoc], bx
  6482 00004AD4 81C300000800        <2> 		add ebx, 0x80000
  6483 00004ADA 66B9FFFF            <2> 		mov cx, 0xFFFF
  6484 00004ADE 6683FF00            <2> 		cmp di, 0
  6485 00004AE2 7520                <2> 		jne .autoinit
  6486 00004AE4 668B0D[BC5B0000]    <2> 		mov cx, [Length1]
  6487 00004AEB C605[B75B0000]01    <2> 		mov byte [OddLength], 1
  6488 00004AF2 6681F90080          <2> 		cmp cx, 32768
  6489 00004AF7 730B                <2> 		jae .autoinit
  6490 00004AF9 C605[B75B0000]00    <2> 		mov byte [OddLength], 0
  6491 00004B00 66D1E1              <2> 		shl cx, 1
  6492 00004B03 47                  <2> 		inc edi
  6493                              <2> .autoinit:
  6494 00004B04 4F                  <2> 		dec edi
  6495 00004B05 893D[B85B0000]      <2> 		mov [Length0], edi
  6496 00004B0B 66890D[BC5B0000]    <2> 		mov [Length1], cx
  6497 00004B12 66D1E9              <2> 		shr cx, 1
  6498 00004B15 6641                <2> 		inc cx
  6499 00004B17 01C8                <2> 		add eax, ecx
  6500 00004B19 A3[BE5B0000]        <2> 		mov [NextMemLoc], eax
  6501 00004B1E 8935[C25B0000]      <2> 		mov	[MemLoc], esi
  6502 00004B24 E83A0F0000          <2> 		call DMACopy
  6503 00004B29 31DB                <2> 		xor ebx, ebx
  6504 00004B2B 668B1D[C65B0000]    <2> 		mov bx, [SegLoc]
  6505 00004B32 31C9                <2> 		xor ecx, ecx
  6506 00004B34 668B0D[BC5B0000]    <2> 		mov cx, [Length1]
  6507 00004B3B 66D1E9              <2> 		shr cx, 1
  6508 00004B3E 6641                <2> 		inc cx
  6509 00004B40 01CB                <2> 		add ebx, ecx
  6510 00004B42 66891D[C65B0000]    <2> 		mov [SegLoc], bx
  6511 00004B49 81C300000800        <2> 		add ebx, 0x80000
  6512 00004B4F 8B35[BE5B0000]      <2> 		mov esi, [NextMemLoc]
  6513 00004B55 89F0                <2> 		mov eax, esi
  6514 00004B57 01C8                <2> 		add eax, ecx
  6515 00004B59 A3[BE5B0000]        <2> 		mov [NextMemLoc], eax
  6516 00004B5E 8935[C25B0000]      <2> 		mov	[MemLoc], esi
  6517 00004B64 E8FA0E0000          <2> 		call DMACopy
  6518 00004B69 E8120F0000          <2> 		call DMAPlay
  6519 00004B6E E89C0F0000          <2> 		call PlayDSP
  6520 00004B73 C3                  <2> 		ret
  6521                              <2> WAVSTART equ 44
  6522                              <2> wave_player:
  6523 00004B74 803D[CD5B0000]01    <2> 	cmp byte [SoundBlaster], 1
  6524 00004B7B 0F8415FFFFFF        <2> 	je near sbplay
  6525 00004B81 BE[8C4B0000]        <2> 	mov esi, nosoundblaster
  6526 00004B86 E867D1FFFF          <2> 	call print
  6527 00004B8B C3                  <2> 	ret
  6528                              <2> %else
  6529                              <2> 	wave_player:
  6530                              <2> 		mov esi, nosoundblaster
  6531                              <2> 		call print
  6532                              <2> 		ret
  6533                              <2> %endif
  6534 00004B8C 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6535 00004B95 426C61737465722064- <2>
  6536 00004B9E 657465637465642E0A- <2>
  6537 00004BA7 00                  <2>
  6538                              <1> %endif
  6539                              <1> %include 'source/programs/pwd.asm'
  6540 00004BA8 FF2C70776400        <2> db 255,44,"pwd",0
  6541 00004BAE BE[14AE0300]        <2> 	mov esi, currentfolder
  6542 00004BB3 E819D1FFFF          <2> 	call printquiet
  6543 00004BB8 E830D1FFFF          <2> 	call printline
  6544 00004BBD C3                  <2> 	ret
  6545                              <2> 	
  6546                              <1> %include 'source/programs/reboot.asm'
  6547 00004BBE FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6548 00004BC7 0F011D[D14B0000]    <2> 		lidt [idtreboot]
  6549 00004BCE CD00                <2> 		int 0
  6550 00004BD0 F4                  <2> 		hlt
  6551                              <2> 	
  6552 00004BD1 0000                <2> 	idtreboot dw 0
  6553 00004BD3 00000000            <2> 			  dd 0
  6554                              <2> 
  6555                              <2> 	coldboot:
  6556 00004BD7 66B84000            <2> 		MOV AX, 0040h
  6557 00004BDB 8EC0                <2> 		MOV ES, AX
  6558 00004BDD 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6559 00004BE6 00                  <2>
  6560 00004BE7 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6561 00004BEE CF                  <2> 		IRET
  6562                              <2> 
  6563                              <2> 	warmboot:
  6564 00004BEF 66B84000            <2> 		MOV AX, 0040h
  6565 00004BF3 8EC0                <2> 		MOV ES, AX
  6566 00004BF5 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6567 00004BFE 12                  <2>
  6568 00004BFF EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6569 00004C06 CF                  <2> 		IRET
  6570                              <2> 		
  6571                              <1> %include 'source/programs/reg.asm'
  6572 00004C07 FF2C72656700        <2> db 255,44,"reg",0
  6573 00004C0D CD03                <2> 	int 3
  6574 00004C0F C3                  <2> 	ret 
  6575                              <1> %ifdef disk.none
  6576                              <1> %else
  6577                              <1> 	%include 'source/programs/show.asm'
  6578 00004C10 FF2C73686F7700      <2> db 255,44,"show",0
  6579                              <2> showprog:
  6580 00004C17 8B3D[F62E0000]      <2> 		mov edi, [currentcommandloc]
  6581 00004C1D 83C705              <2> 		add edi, 5
  6582 00004C20 BE00004000          <2> 		mov esi, 0x400000
  6583 00004C25 803F26              <2> 		cmp byte [edi], '&'
  6584 00004C28 741B                <2> 		je .nullfile
  6585 00004C2A BE00008000          <2> 		mov esi, 0x800000
  6586 00004C2F E837190000          <2> 		call loadfile
  6587 00004C34 81FA94010000        <2> 		cmp edx, 404
  6588 00004C3A 0F847E000000        <2> 		je near filenotfound
  6589 00004C40 BE00008000          <2> 		mov esi, 0x800000
  6590                              <2> .nullfile:
  6591                              <2> %ifdef gui.included
  6592 00004C45 66813E424D          <2> 		cmp word [esi], "BM"
  6593 00004C4A 740B                <2> 		je bmpfound
  6594                              <2> %endif
  6595 00004C4C E8A1D0FFFF          <2> 		call print
  6596 00004C51 E897D0FFFF          <2> 		call printline
  6597 00004C56 C3                  <2> 		ret
  6598                              <2> %ifdef gui.included
  6599                              <2> bmpfound:
  6600 00004C57 803D[E7840000]00    <2> 		cmp byte [guion], 0
  6601 00004C5E 0F8428000000        <2> 		je near noguibmp
  6602 00004C64 BE00008000          <2> 		mov esi, 0x800000
  6603 00004C69 31C9                <2> 		xor ecx, ecx
  6604 00004C6B 31D2                <2> 		xor edx, edx
  6605 00004C6D 31C0                <2> 		xor eax, eax
  6606 00004C6F 31DB                <2> 		xor ebx, ebx
  6607 00004C71 E8C31A0000          <2> 		call showbmp
  6608 00004C76 30C0                <2> 		xor al, al
  6609 00004C78 B405                <2> 		mov ah, 5
  6610 00004C7A CD30                <2> 		int 30h
  6611 00004C7C E8E5200000          <2> 		call guiclear
  6612 00004C81 E8C01D0000          <2> 		call clearmousecursor
  6613 00004C86 E85C210000          <2> 		call reloadallgraphics
  6614 00004C8B C3                  <2> 		ret
  6615                              <2> noguibmp:
  6616 00004C8C BE[974C0000]        <2> 		mov esi, warnguimsg
  6617 00004C91 E85CD0FFFF          <2> 		call print
  6618 00004C96 C3                  <2> 		ret
  6619 00004C97 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6620 00004CA0 6E6F7420626520646F- <2>
  6621 00004CA9 6E6520776974686F75- <2>
  6622 00004CB2 742074686520475549- <2>
  6623 00004CBB 2E0A00              <2>
  6624                              <2> %endif
  6625                              <2> 
  6626                              <2> filenotfound:
  6627 00004CBE BE[F14C0000]        <2> 		mov esi, filenf
  6628 00004CC3 E82AD0FFFF          <2> 		call print
  6629 00004CC8 8B35[F62E0000]      <2> 		mov esi, [currentcommandloc]
  6630                              <2> findfilenotfoundzero:
  6631 00004CCE 8A06                <2> 		mov al, [esi]
  6632 00004CD0 46                  <2> 		inc esi
  6633 00004CD1 3C00                <2> 		cmp al, 0
  6634 00004CD3 7411                <2> 		je nofilenamenotfound
  6635 00004CD5 81FE[88C80300]      <2> 		cmp esi, buftxtend
  6636 00004CDB 7309                <2> 		jae nofilenamenotfound
  6637 00004CDD 3C20                <2> 		cmp al, " "
  6638 00004CDF 75ED                <2> 		jne findfilenotfoundzero
  6639 00004CE1 E80CD0FFFF          <2> 		call print
  6640                              <2> nofilenamenotfound:
  6641 00004CE6 BE[FC4C0000]        <2> 		mov esi, filenf2
  6642 00004CEB E802D0FFFF          <2> 		call print
  6643 00004CF0 C3                  <2> 		ret
  6644 00004CF1 5468652066696C6520- <2> filenf db "The file ",34,0
  6645 00004CFA 2200                <2>
  6646 00004CFC 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6647 00004D05 6F7420626520666F75- <2>
  6648 00004D0E 6E642E0A00          <2>
  6649                              <1> %endif
  6650                              <1> %include 'source/programs/shush.asm'
  6651 00004D13 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6652                              <2> shushprog:
  6653                              <2> %ifdef gui.included
  6654 00004D1B 803D[E7840000]00    <2> 	cmp byte [guion], 0
  6655 00004D22 0F84B5000000        <2> 	je near .noswitchsize
  6656 00004D28 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  6657 00004D2E 83C606              <2> 	add esi, 6
  6658 00004D31 56                  <2> 	push esi
  6659 00004D32 4E                  <2> 	dec esi
  6660                              <2> .findspace:
  6661 00004D33 46                  <2> 	inc esi
  6662 00004D34 8A06                <2> 	mov al, [esi]
  6663 00004D36 3C00                <2> 	cmp al, 0
  6664 00004D38 0F849F000000        <2> 	je near .noswitchsize
  6665 00004D3E 3C58                <2> 	cmp al, "X"
  6666 00004D40 7408                <2> 	je .donefind
  6667 00004D42 3C78                <2> 	cmp al, "x"
  6668 00004D44 7404                <2> 	je .donefind
  6669 00004D46 3C20                <2> 	cmp al, " "
  6670 00004D48 75E9                <2> 	jne .findspace
  6671                              <2> .donefind:
  6672 00004D4A 30C0                <2> 	xor al, al
  6673 00004D4C 8806                <2> 	mov [esi], al
  6674 00004D4E 46                  <2> 	inc esi
  6675 00004D4F 89F7                <2> 	mov edi, esi
  6676 00004D51 E820E5FFFF          <2> 	call cnvrttxt
  6677 00004D56 89C8                <2> 	mov eax, ecx
  6678 00004D58 5E                  <2> 	pop esi
  6679 00004D59 50                  <2> 	push eax
  6680 00004D5A 89F7                <2> 	mov edi, esi
  6681 00004D5C E815E5FFFF          <2> 	call cnvrttxt
  6682 00004D61 89CB                <2> 	mov ebx, ecx
  6683 00004D63 58                  <2> 	pop eax	
  6684 00004D64 6683FB00            <2> 	cmp bx, 0
  6685 00004D68 0F846F000000        <2> 	je near .noswitchsize
  6686 00004D6E 6683F800            <2> 	cmp ax, 0
  6687 00004D72 0F8465000000        <2> 	je near .noswitchsize
  6688 00004D78 66C1E303            <2> 	shl bx, 3
  6689 00004D7C 66C1E004            <2> 	shl ax, 4
  6690 00004D80 663B1D[04550000]    <2> 	cmp bx, [resolutionx]
  6691 00004D87 7607                <2> 	jbe .nofixx
  6692 00004D89 668B1D[04550000]    <2> 	mov bx, [resolutionx]
  6693                              <2> .nofixx:
  6694 00004D90 6683C010            <2> 	add ax, 16
  6695 00004D94 663B05[06550000]    <2> 	cmp ax, [resolutiony]
  6696 00004D9B 7606                <2> 	jbe .nofixy
  6697 00004D9D 66A1[06550000]      <2> 	mov ax, [resolutiony]
  6698                              <2> .nofixy:
  6699 00004DA3 6683E810            <2> 	sub ax, 16
  6700 00004DA7 6631C9              <2> 	xor cx, cx
  6701 00004DAA 6631D2              <2> 	xor dx, dx
  6702 00004DAD 66891D[7A710000]    <2> 	mov [termwindow], bx
  6703 00004DB4 66A3[7C710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6704 00004DBA BE[7A710000]        <2> 	mov esi, termwindow
  6705 00004DBF 31DB                <2> 	xor ebx, ebx
  6706 00004DC1 6631C0              <2> 	xor ax, ax
  6707 00004DC4 E8CF280000          <2> 	call showwindow
  6708 00004DC9 E8981F0000          <2> 	call guiclear
  6709 00004DCE E8CBCFFFFF          <2> 	call clear
  6710 00004DD3 E80F200000          <2> 	call reloadallgraphics
  6711 00004DD8 E8521D0000          <2> 	call switchmousepos2
  6712                              <2> .noswitchsize:
  6713                              <2> %endif
  6714 00004DDD BE[E84D0000]        <2> 	mov esi, shushmsg
  6715 00004DE2 E80BCFFFFF          <2> 	call print
  6716 00004DE7 C3                  <2> 	ret
  6717 00004DE8 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6718 00004DF1 6F2074686520536F6C- <2>
  6719 00004DFA 6C65724F5320486172- <2>
  6720 00004E03 646C7920556E69782D- <2>
  6721 00004E0C 436F6D70617469626C- <2>
  6722 00004E15 65205368656C6C210A- <2>
  6723 00004E1E 00                  <2>
  6724                              <1> %include 'source/programs/system.asm'
  6725 00004E1F FF2C73797374656D00  <2> 	db 255,44,"system",0
  6726 00004E28 BE[384F0000]        <2> 	mov esi, kernelinfomsg
  6727 00004E2D E89FCEFFFF          <2> 	call printquiet
  6728 00004E32 B9[41870300]        <2> 	mov ecx, osend
  6729 00004E37 E86BE3FFFF          <2> 	call showdec
  6730 00004E3C BE[4D4F0000]        <2> 	mov esi, diskbytemsg
  6731 00004E41 E88BCEFFFF          <2> 	call printquiet
  6732 00004E46 B9[41870300]        <2> 	mov ecx, osend
  6733 00004E4B 81C1[3C9A2D00]      <2> 	add ecx, commandbufend
  6734 00004E51 81E9[008A0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6735 00004E57 E84BE3FFFF          <2> 	call showdec
  6736 00004E5C BE[644F0000]        <2> 	mov esi, membytemsg
  6737 00004E61 E86BCEFFFF          <2> 	call printquiet
  6738 00004E66 BE[C74F0000]        <2> 	mov esi, endofmemmsg
  6739 00004E6B E861CEFFFF          <2> 	call printquiet
  6740 00004E70 B9[3CB24D00]        <2> 	mov ecx, bssend
  6741 00004E75 E87EE2FFFF          <2> 	call showhex
  6742 00004E7A BE[7D4F0000]        <2> 	mov esi, systeminfomsg
  6743 00004E7F E84DCEFFFF          <2> 	call printquiet
  6744                              <2> getcpuspeed:
  6745 00004E84 B8FE000000          <2> 	mov eax, 0xFE
  6746 00004E89 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6747 00004E8B B020                <2> 	mov al, 0x20
  6748 00004E8D E620                <2> 	out 0x20, al
  6749 00004E8F F4                  <2> 	hlt
  6750 00004E90 0F31                <2> 	rdtsc
  6751 00004E92 89D6                <2> 	mov esi, edx
  6752 00004E94 89C7                <2> 	mov edi, eax
  6753 00004E96 31C0                <2> 	xor eax, eax
  6754 00004E98 C605[3B020000]01    <2> 	mov byte [testingcpuspeed], 1
  6755                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6756 00004E9F 40                  <2> 	inc eax
  6757 00004EA0 EBFD                <2> 	jmp cpuspeedloop
  6758                              <2> cpuspeedloopend:
  6759 00004EA2 0F31                <2> 	rdtsc
  6760 00004EA4 29F8                <2> 	sub eax, edi
  6761 00004EA6 29F2                <2> 	sub edx, esi
  6762 00004EA8 8915[44020000]      <2> 	mov [cpuclocksperint + 4], edx
  6763 00004EAE A3[40020000]        <2> 	mov [cpuclocksperint], eax
  6764 00004EB3 31C0                <2> 	xor eax, eax
  6765 00004EB5 E621                <2> 	out 0x21, al
  6766 00004EB7 B020                <2> 	mov al, 0x20
  6767 00004EB9 E620                <2> 	out 0x20, al
  6768 00004EBB 31D2                <2> 	xor edx, edx
  6769 00004EBD 31C0                <2> 	xor eax, eax
  6770 00004EBF A1[3C020000]        <2> 	mov eax, [cpuspeedperint]
  6771 00004EC4 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6772                              <2> 				;result by 2
  6773 00004EC6 8B1D[4E020000]      <2> 	mov ebx, [timeinterval]
  6774 00004ECC C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6775 00004ECF F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6776 00004ED1 89C1                <2> 	mov ecx, eax
  6777 00004ED3 E8CFE2FFFF          <2> 	call showdec
  6778 00004ED8 BE[AB4F0000]        <2> 	mov esi, cpuspeedmsg
  6779 00004EDD E8EFCDFFFF          <2> 	call printquiet
  6780 00004EE2 31D2                <2> 	xor edx, edx
  6781 00004EE4 A1[40020000]        <2> 	mov eax, [cpuclocksperint]
  6782 00004EE9 8B15[44020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6783 00004EEF 8B1D[4E020000]      <2> 	mov ebx, [timeinterval]
  6784 00004EF5 C1EB0A              <2> 	shr ebx, 10
  6785 00004EF8 F7F3                <2> 	div ebx
  6786 00004EFA 89C1                <2> 	mov ecx, eax
  6787 00004EFC E8A6E2FFFF          <2> 	call showdec
  6788 00004F01 BE[B14F0000]        <2> 	mov esi, cpuclockmsg
  6789 00004F06 E8C6CDFFFF          <2> 	call printquiet
  6790 00004F0B 8B0D[48020000]      <2> 	mov ecx, [memoryspace]
  6791 00004F11 C1E914              <2> 	shr ecx, 20
  6792 00004F14 41                  <2> 	inc ecx	;the reading is one MB behind
  6793 00004F15 E88DE2FFFF          <2> 	call showdec
  6794 00004F1A BE[B64F0000]        <2> 	mov esi, memoryspacemsg
  6795 00004F1F E8CECDFFFF          <2> 	call print
  6796                              <2> %ifdef sound.included
  6797 00004F24 803D[CD5B0000]00    <2> 	cmp byte [SoundBlaster], 0
  6798 00004F2B 740A                <2> 	je .nosb
  6799 00004F2D BE[934F0000]        <2> 	mov esi, soundblastermsg
  6800 00004F32 E8BBCDFFFF          <2> 	call print
  6801                              <2> .nosb:
  6802                              <2> %endif
  6803 00004F37 C3                  <2> 	ret
  6804                              <2> 
  6805 00004F38 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6806 00004F41 666F726D6174696F6E- <2>
  6807 00004F4A 3A0A00              <2>
  6808 00004F4D 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6809 00004F56 6B2053706163652055- <2>
  6810 00004F5F 7365640A00          <2>
  6811 00004F64 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6812 00004F6D 6F7279205370616365- <2>
  6813 00004F76 20557365640A00      <2>
  6814 00004F7D 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6815 00004F86 6E666F726D6174696F- <2>
  6816 00004F8F 6E3A0A00            <2>
  6817                              <2> %ifdef sound.included
  6818 00004F93 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6819 00004F9C 746572204465746563- <2>
  6820 00004FA5 7465642E0A00        <2>
  6821                              <2> %endif
  6822 00004FAB 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6823 00004FB1 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6824 00004FB6 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6825 00004FBF 2053706163650A00    <2>
  6826 00004FC7 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6827 00004FD0 6D6F72792053706163- <2>
  6828 00004FD9 653A20307800        <2>
  6829                              <1> %include 'source/programs/time.asm'
  6830 00004FDF FF2C74696D6500      <2> db 255,44,"time",0	
  6831                              <2> timer:
  6832 00004FE6 8B35[F62E0000]      <2> 	mov esi, [currentcommandloc]
  6833 00004FEC 83C604              <2> 	add esi, 4
  6834 00004FEF 803E00              <2> 	cmp byte [esi], 0
  6835 00004FF2 7477                <2> 	je .norun
  6836 00004FF4 46                  <2> 	inc esi
  6837 00004FF5 8B0D[53020000]      <2> 	mov ecx, [timeseconds]
  6838 00004FFB 51                  <2> 	push ecx
  6839 00004FFC 8B0D[57020000]      <2> 	mov ecx, [timenanoseconds]
  6840 00005002 51                  <2> 	push ecx
  6841 00005003 BF[88C40300]        <2> 	mov edi, buftxt
  6842                              <2> .cpcmd:
  6843 00005008 8A06                <2> 	mov al, [esi]
  6844 0000500A 8807                <2> 	mov [edi], al
  6845 0000500C 46                  <2> 	inc esi
  6846 0000500D 47                  <2> 	inc edi
  6847 0000500E 3C00                <2> 	cmp al, 0
  6848 00005010 75F6                <2> 	jne .cpcmd
  6849 00005012 E80FDEFFFF          <2> 	call run
  6850 00005017 5A                  <2> 	pop edx
  6851 00005018 58                  <2> 	pop eax
  6852                              <2> 
  6853 00005019 8B0D[53020000]      <2> 	mov ecx, [timeseconds]
  6854 0000501F 29C1                <2> 	sub ecx, eax
  6855 00005021 8B1D[57020000]      <2> 	mov ebx, [timenanoseconds]
  6856 00005027 29D3                <2> 	sub ebx, edx
  6857 00005029 7307                <2> 	jae .nosign
  6858 0000502B 81C300CA9A3B        <2> 	add ebx, 1000000000
  6859 00005031 49                  <2> 	dec ecx
  6860                              <2> .nosign:
  6861 00005032 E870E1FFFF          <2> 	call showdec
  6862                              <2> 	
  6863 00005037 89D9                <2> 	mov ecx, ebx
  6864 00005039 BE[9A3E0000]        <2> 	mov esi, timenscache
  6865 0000503E C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6866 00005045 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6867 0000504C C6460A30            <2> 	mov byte [esi + 10], "0"
  6868 00005050 BE[A53E0000]        <2> 	mov esi, timenscacheend
  6869 00005055 E868DFFFFF          <2> 	call convert
  6870 0000505A BE[9A3E0000]        <2> 	mov esi, timenscache
  6871 0000505F E88ECCFFFF          <2> 	call print
  6872 00005064 C605[9A3E0000]08    <2> 	mov byte [timenscache], 8
  6873                              <2> .norun:
  6874 0000506B C3                  <2> 	ret
  6875                              <2> 	
  6876                              <1> %include 'source/programs/turnoff.asm'
  6877 0000506C FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6878 00005075 00                  <2>
  6879                              <2> 	turnoff:
  6880 00005076 66C705[E10C0000]-   <2> 			mov word [realmodeptr], shutdown
  6881 0000507D [8950]              <2>
  6882 0000507F BB[B3500000]        <2> 			mov ebx, halt
  6883 00005084 E84CBBFFFF          <2> 			call realmode
  6884                              <2> 
  6885                              <2> [BITS 16]
  6886                              <2> 		shutdown:
  6887 00005089 B453                <2> 			mov ah, 0x53
  6888 0000508B B004                <2> 			mov al, 4
  6889 0000508D 31DB                <2> 			xor bx, bx
  6890 0000508F CD15                <2> 			int 0x15
  6891                              <2> 			
  6892 00005091 B453                <2> 			mov ah, 0x53
  6893 00005093 B001                <2> 			mov al, 1
  6894 00005095 31DB                <2> 			xor bx, bx
  6895 00005097 CD15                <2> 			int 0x15
  6896                              <2> 			
  6897 00005099 B453                <2> 			mov ah, 0x53
  6898 0000509B B008                <2> 			mov al, 8
  6899 0000509D BB0100              <2> 			mov bx, 1
  6900 000050A0 B90100              <2> 			mov cx, 1
  6901 000050A3 CD15                <2> 			int 0x15
  6902                              <2> 			
  6903 000050A5 B453                <2> 			mov ah, 0x53
  6904 000050A7 B007                <2> 			mov al, 7
  6905 000050A9 BB0100              <2> 			mov bx, 1
  6906 000050AC B90300              <2> 			mov cx, 3
  6907 000050AF CD15                <2> 			int 0x15
  6908 000050B1 EBFE                <2> 			jmp $
  6909                              <2> 			[BITS 32]
  6910 000050B3 EBFE                <2> halt: jmp $
  6911                              <1> %include 'source/programs/wait.asm'
  6912 000050B5 FF2C7761697400      <2> db 255,44,"wait",0
  6913                              <2> waitkey:
  6914 000050BC E80BD2FFFF          <2> 		call getchar
  6915 000050C1 C3                  <2> 		ret
  6916                              <1> %include 'source/programs/while.asm'
  6917 000050C2 FF2C7768696C6500    <2> db 255,44,"while",0
  6918 000050CA 30C0                <2> whilecmd:  xor al, al
  6919 000050CC 3805[82B00300]      <2> 	cmp [BATCHISON], al
  6920 000050D2 0F8495E8FFFF        <2> 	je near notbatch
  6921 000050D8 8B35[7EB00300]      <2> 	mov esi, [BATCHPOS]
  6922 000050DE 83EE02              <2> 	sub esi, 2
  6923 000050E1 4E                  <2> whilefnd: dec esi
  6924 000050E2 8A06                <2> 	mov al, [esi]
  6925 000050E4 3C0A                <2> 	cmp al, 10
  6926 000050E6 0F840A000000        <2> 	je near whilefnd2
  6927 000050EC 3C00                <2> 	cmp al, 0
  6928 000050EE 0F8402000000        <2> 	je near whilefnd2
  6929 000050F4 EBEB                <2> 	jmp whilefnd
  6930                              <2> whilefnd2:
  6931 000050F6 46                  <2> 	inc esi
  6932 000050F7 8935[84B00300]      <2> 	mov [LOOPPOS], esi
  6933 000050FD C605[83B00300]01    <2> 	mov BYTE [LOOPON], 1
  6934 00005104 BE[88C40300]        <2> 	mov esi, buftxt
  6935 00005109 BB[88C40300]        <2> 	mov ebx, buftxt
  6936 0000510E 83C306              <2> 	add ebx, 6
  6937 00005111 E943F5FFFF          <2> 	jmp chkeqsn
  6938                              <1> progend:		;programs end here	
  6939                              <1> batchprogend:
  6940                                  	%include "source/hardware.asm"
  6941                              <1> %ifdef gui.included
  6942                              <1> 	%include "source/drivers/video/vesa.asm"
  6943                              <2> [BITS 16]
  6944                              <2> guiswitch:
  6945 00005116 83F900              <2> 	cmp cx, 0
  6946 00005119 750B                <2> 	jne guiswitchdefnum
  6947 0000511B B81200              <2> 	mov ax, 12h
  6948 0000511E 31DB                <2> 	xor bx, bx
  6949 00005120 CD10                <2> 	int 10h
  6950 00005122 E84E00              <2> 	call guiloadagain
  6951                              <2> guiswitchnocando:
  6952 00005125 C3                  <2> 	ret	;return without switching as mode number is bad
  6953                              <2> guiswitchdefnum:	;switch to a defined mode number
  6954 00005126 B8004F              <2> 	mov ax, 0x4F00
  6955 00005129 BF[F252]            <2> 	mov di, VBEMODEBLOCK
  6956 0000512C CD10                <2> 	int 10h
  6957 0000512E BE[1453]            <2> 	mov si, reserved
  6958 00005131 83EE02              <2> 	sub si, 2
  6959                              <2> .loop:
  6960 00005134 83C602              <2> 	add si, 2
  6961 00005137 81FE[F253]          <2> 	cmp si, oemdata
  6962 0000513B 74E8                <2> 	je guiswitchnocando
  6963 0000513D 833CFF              <2> 	cmp word [si], 0xFFFF
  6964 00005140 74E3                <2> 	je guiswitchnocando
  6965 00005142 390C                <2> 	cmp [si], cx
  6966 00005144 75EE                <2> 	jne .loop
  6967 00005146 8936[5352]          <2> 	mov [videomodecache], si
  6968 0000514A 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6969 0000514E B8014F              <2> 	mov ax, 0x4F01
  6970 00005151 BF[F254]            <2> 	mov di, VBEMODEINFOBLOCK
  6971 00005154 890E[5152]          <2> 	mov [vesamode], cx
  6972 00005158 CD10                <2> 	int 10h
  6973 0000515A E9D400              <2> 	jmp selectedvesa
  6974                              <2> guiload:
  6975 0000515D BE[CA52]            <2> 	mov si, bootmsg
  6976 00005160 E81CAF              <2> 	call printrm
  6977 00005163 31C0                <2> 	xor ax, ax
  6978 00005165 CD16                <2> 	int 16h
  6979 00005167 3C79                <2> 	cmp al, "y"
  6980 00005169 0F85D1AE            <2> 	jne near vgaset
  6981 0000516D BE[C184]            <2> 	mov si, crlf
  6982 00005170 E80CAF              <2> 	call printrm
  6983                              <2> guiloadagain:
  6984 00005173 B8004F              <2> 	mov ax, 04F00h
  6985 00005176 BF[F252]            <2> 	mov di, VBEMODEBLOCK
  6986 00005179 CD10                <2> 	int 10h
  6987 0000517B BE[1453]            <2> 	mov si, reserved
  6988 0000517E 83EE02              <2> 	sub si, 2
  6989                              <2> findvideomodes:
  6990 00005181 83C602              <2> 	add si, 2
  6991 00005184 8B0C                <2> 	mov cx, [si]
  6992 00005186 83F9FF              <2> 	cmp cx, 0xFFFF
  6993 00005189 0F840A00            <2> 	je near nextvmode
  6994 0000518D 81FE[F253]          <2> 	cmp si, oemdata
  6995 00005191 0F83A9AE            <2> 	jae near vgaset	;kill if no valid list is found
  6996 00005195 EBEA                <2> 	jmp findvideomodes 	
  6997                              <2> ;debug,shows vmodes available
  6998                              <2> nextvmode:
  6999 00005197 83EE02              <2> 	sub si, 2
  7000 0000519A 81FE[1453]          <2> 	cmp si, reserved
  7001 0000519E 0F82D1FF            <2> 	jb near guiloadagain
  7002 000051A2 8B0C                <2> 	mov cx, [si]
  7003 000051A4 83F9FF              <2> 	cmp cx, 0xFFFF
  7004 000051A7 0F84ECFF            <2> 	je near nextvmode
  7005 000051AB 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  7006 000051AF B8014F              <2> 	mov ax, 04F01h
  7007 000051B2 BF[F254]            <2> 	mov di, VBEMODEINFOBLOCK
  7008 000051B5 890E[5152]          <2> 	mov [vesamode], cx
  7009 000051B9 CD10                <2> 	int 10h
  7010 000051BB A0[0B55]            <2> 	mov al, [bitsperpixel]
  7011 000051BE 3C10                <2> 	cmp al, 16
  7012 000051C0 75D5                <2> 	jne nextvmode
  7013 000051C2 8936[5352]          <2> 	mov [videomodecache], si
  7014 000051C6 84E4                <2> 	test ah, ah
  7015 000051C8 0F842200            <2> 	jz near setvesamode
  7016 000051CC EBC9                <2> 	jmp nextvmode
  7017 000051CE 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7018 000051D7 20766964656F206D6F- <2>
  7019 000051E0 6465204F4B3F28792F- <2>
  7020 000051E9 6E290D0A00          <2>
  7021                              <2> setvesamode:
  7022 000051EE 8B36[5352]          <2> 	mov si, [videomodecache]
  7023 000051F2 8B0C                <2> 	mov cx, [si]
  7024 000051F4 E86500              <2> 	call decshow
  7025 000051F7 B03A                <2> 	mov al, ':'
  7026 000051F9 E8C600              <2> 	call char
  7027 000051FC 8B0E[0455]          <2> 	mov cx, [resolutionx]
  7028 00005200 E85900              <2> 	call decshow
  7029 00005203 B078                <2> 	mov al, "x"
  7030 00005205 E8BA00              <2> 	call char
  7031 00005208 8B0E[0655]          <2> 	mov cx, [resolutiony]
  7032 0000520C E84D00              <2> 	call decshow
  7033 0000520F B040                <2> 	mov al, "@"
  7034 00005211 E8AE00              <2> 	call char
  7035 00005214 31C9                <2> 	xor cx, cx
  7036 00005216 8A0E[0B55]          <2> 	mov cl, [bitsperpixel]
  7037 0000521A E83F00              <2> 	call decshow
  7038 0000521D BE[CE51]            <2> 	mov si, isthisvideook
  7039 00005220 E85CAE              <2> 	call printrm
  7040 00005223 31C0                <2> 	xor ax, ax
  7041 00005225 CD16                <2> 	int 16h
  7042 00005227 8B36[5352]          <2> 	mov si, [videomodecache]
  7043 0000522B 3C79                <2> 	cmp al, "y"
  7044 0000522D 0F8566FF            <2> 	jne near nextvmode
  7045                              <2> selectedvesa:
  7046 00005231 8B16[0455]          <2> 	mov dx, [resolutionx]
  7047 00005235 01D2                <2> 	add dx, dx
  7048 00005237 8916[F255]          <2> 	mov [resolutionx2], dx
  7049 0000523B 31D2                <2> 	xor dx, dx
  7050 0000523D 31C9                <2> 	xor cx, cx
  7051 0000523F B8024F              <2> 	mov ax, 04F02h
  7052 00005242 8B1E[5152]          <2> 	mov bx, [vesamode]
  7053 00005246 CD10                <2> 	int 10h		;enter VESA mode
  7054 00005248 C606[E784]01        <2> 	mov byte [guion], 1
  7055 0000524D E8FEAD              <2> 	call getmemorysize;get the memory map after the video is initialized
  7056 00005250 C3                  <2> 	ret
  7057                              <2> 	
  7058 00005251 0000                <2> vesamode dw 0
  7059 00005253 0000                <2> videomodecache dw 0
  7060                              <2> 
  7061 00005255 0000000000          <2> dcnm db 0,0,0,0,0
  7062 0000525A 0000                <2> dcnmend db 0,0
  7063                              <2> 
  7064                              <2> 
  7065                              <2> decshow:
  7066 0000525C BE[5552]            <2> 	mov si, dcnm
  7067                              <2> decclear:
  7068 0000525F B030                <2> 	mov al, "0"
  7069 00005261 8804                <2> 	mov [si], al
  7070 00005263 46                  <2> 	inc si
  7071 00005264 81FE[5A52]          <2> 	cmp si, dcnmend
  7072 00005268 76F5                <2> 	jbe decclear
  7073 0000526A 4E                  <2> 	dec si
  7074 0000526B E81500              <2> 	call convertrm
  7075 0000526E BE[5552]            <2> 	mov si, dcnm
  7076                              <2> dectst:
  7077 00005271 8A04                <2> 	mov al, [si]
  7078 00005273 46                  <2> 	inc si
  7079 00005274 81FE[5A52]          <2> 	cmp si, dcnmend
  7080 00005278 7704                <2> 	ja dectstend
  7081 0000527A 3C30                <2> 	cmp al, "0"
  7082 0000527C 76F3                <2> 	jbe dectst
  7083                              <2> dectstend:
  7084 0000527E 4E                  <2> 	dec si
  7085 0000527F E8FDAD              <2> 	call printrm
  7086 00005282 C3                  <2> 	ret
  7087                              <2> 	
  7088                              <2> 	
  7089                              <2> convertrm:
  7090 00005283 4E                  <2> 	dec si
  7091 00005284 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7092                              <2> cnvrtrm:
  7093 00005286 89DE                <2> 	mov si, bx
  7094 00005288 83EE03              <2> 	sub si, 3
  7095 0000528B 46                  <2> ten3rm:	inc si
  7096 0000528C 81F9E803            <2> 	cmp cx, 1000
  7097 00005290 7208                <2> 	jb ten2rm
  7098 00005292 81E9E803            <2> 	sub cx, 1000
  7099 00005296 FE04                <2> 	inc byte [si]
  7100 00005298 EBEC                <2> 	jmp cnvrtrm
  7101 0000529A 46                  <2> ten2rm:	inc si
  7102 0000529B 83F964              <2> 	cmp cx, 100
  7103 0000529E 7207                <2> 	jb ten1rm
  7104 000052A0 83E964              <2> 	sub cx, 100
  7105 000052A3 FE04                <2> 	inc byte [si]
  7106 000052A5 EBDF                <2> 	jmp cnvrtrm
  7107 000052A7 46                  <2> ten1rm:	inc si
  7108 000052A8 83F90A              <2> 	cmp cx, 10
  7109 000052AB 7207                <2> 	jb ten0rm
  7110 000052AD 83E90A              <2> 	sub cx, 10
  7111 000052B0 FE04                <2> 	inc byte [si]
  7112 000052B2 EBD2                <2> 	jmp cnvrtrm
  7113 000052B4 46                  <2> ten0rm:	inc si
  7114 000052B5 83F901              <2> 	cmp cx, 1
  7115 000052B8 7207                <2> 	jb tendnrm
  7116 000052BA 83E901              <2> 	sub cx, 1
  7117 000052BD FE04                <2> 	inc byte [si]
  7118 000052BF EBC5                <2> 	jmp cnvrtrm
  7119                              <2> tendnrm:
  7120 000052C1 C3                  <2> 	ret
  7121                              <2> 
  7122                              <2>     char: 		    ;char must be in al
  7123 000052C2 BB0700              <2>        mov bx, 07
  7124 000052C5 B40E                <2> 	   mov ah, 0Eh
  7125 000052C7 CD10                <2> 	   int 10h
  7126 000052C9 C3                  <2> 	   ret
  7127                              <2> 
  7128 000052CA 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7129 000052D3 20746865204755493F- <2>
  7130 000052DC 28792F6E2900        <2>
  7131                              <2> 
  7132                              <2> 
  7133                              <2> mcursor:
  7134 000052E2 01                  <2> 	db	00000001b
  7135 000052E3 81                  <2> 	db	10000001b
  7136 000052E4 C1                  <2> 	db	11000001b
  7137 000052E5 E1                  <2> 	db	11100001b
  7138 000052E6 F1                  <2> 	db	11110001b
  7139 000052E7 F9                  <2> 	db	11111001b
  7140 000052E8 FD                  <2> 	db	11111101b
  7141 000052E9 FF                  <2> 	db	11111111b
  7142 000052EA F9                  <2> 	db	11111001b
  7143 000052EB B9                  <2> 	db	10111001b
  7144 000052EC 39                  <2> 	db	00111001b
  7145 000052ED 1C                  <2> 	db	00011100b
  7146 000052EE 1C                  <2> 	db	00011100b
  7147 000052EF 0E                  <2> 	db	00001110b
  7148 000052F0 0E                  <2> 	db	00001110b
  7149 000052F1 0C                  <2> 	db	00001100b
  7150                              <2> mcursorend:
  7151                              <2> 
  7152                              <2> 
  7153                              <2> VBEMODEBLOCK:
  7154 000052F2 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7155 000052F6 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7156 000052F8 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7157 000052FC 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7158 00005300 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7159 00005304 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7160 00005306 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7161 00005308 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7162 0000530C 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7163 00005310 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7164 00005314 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7165 000053F2 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7166                              <2> 
  7167                              <2> VBEMODEINFOBLOCK:
  7168                              <2> ;Mandatory information for all VBE revision
  7169 000054F2 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7170 000054F4 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7171 000054F5 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7172 000054F6 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7173 000054F8 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7174 000054FA 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7175 000054FC 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7176 000054FE 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7177 00005502 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7178                              <2> 
  7179                              <2> ;Mandatory information for VBE 1.2 and above
  7180 00005504 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7181 00005506 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7182 00005508 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7183 00005509 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7184 0000550A 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7185 0000550B 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7186 0000550C 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7187 0000550D 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7188 0000550E 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7189 0000550F 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7190 00005510 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7191                              <2> 
  7192                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7193 00005511 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7194 00005512 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7195 00005513 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7196 00005514 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7197 00005515 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7198 00005516 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7199 00005517 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7200 00005518 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7201 00005519 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7202                              <2> 
  7203                              <2> ;Mandatory information for VBE 2.0 and above
  7204 0000551A 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7205 0000551E 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7206 00005522 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7207 00005524 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7208                              <2> 
  7209 000055F2 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7210                              <2> VBEEND:
  7211                              <2> [BITS 32]
  7212                              <1> 	%include "source/drivers/input/mouse.asm"
  7213 000055F6 00                  <2> mousedisabled db 0
  7214                              <2> 	
  7215                              <2> 	cursorgui:
  7216 000055F7 803D[79840000]01    <2> 		cmp byte [mouseon], 1
  7217 000055FE 0F8432000000        <2> 		je near mousedaemon
  7218 00005604 803D[E7840000]00    <2> 		cmp byte [guion], 0
  7219 0000560B 0F84F3060000        <2> 		je near entdown
  7220                              <2> 	initmouse:
  7221 00005611 803D[E7840000]00    <2> 		cmp byte [guion], 0
  7222 00005618 7405                <2> 		je noswmsposinit
  7223 0000561A E810150000          <2> 		call switchmousepos2
  7224                              <2> 	noswmsposinit:
  7225 0000561F E851020000          <2> 	  	call PS2SET
  7226 00005624 E87A020000          <2> 		call ACTMOUS
  7227 00005629 C605[79840000]01    <2> 		mov byte [mouseon],1
  7228 00005630 E893020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7229                              <2> 		;call GETB
  7230                              <2> 				;if the bytes are mixed up,
  7231                              <2> 				;remove this line or add another of this line.
  7232                              <2> 	nomouse:
  7233 00005635 C3                  <2> 		ret
  7234                              <2> 		
  7235                              <2> 	mousedaemon:
  7236 00005636 803D[79840000]01    <2> 		cmp byte [mouseon], 1
  7237 0000563D 75D2                <2> 		jne initmouse
  7238 0000563F E464                <2> 		in al, 64h ; Status
  7239 00005641 A820                <2> 		test al, 20h ; PS2-Mouse?
  7240 00005643 0F8502000000        <2> 		jnz near moused
  7241 00005649 F4                  <2> 		hlt
  7242 0000564A C3                  <2> 		ret
  7243                              <2> 	moused:
  7244 0000564B 803D[F6550000]01    <2> 		cmp byte [mousedisabled], 1
  7245 00005652 74E1                <2> 		je nomouse
  7246 00005654 E86F020000          <2> 		  call GETB
  7247 00005659 88C3                <2> 		  mov  bl, al
  7248 0000565B 80E301              <2> 		  and  bl, 1
  7249 0000565E 881D[ED580000]      <2> 		  mov  BYTE [LBUTTON], bl
  7250 00005664 88C3                <2> 		  mov  bl, al
  7251 00005666 80E302              <2> 		  and  bl, 2
  7252 00005669 D0EB                <2> 		  shr  bl, 1
  7253 0000566B 881D[EE580000]      <2> 		  mov  BYTE [RBUTTON], bl
  7254 00005671 88C3                <2> 		  mov  bl, al
  7255 00005673 80E304              <2> 		  and  bl, 4
  7256 00005676 C0EB02              <2> 		  shr  bl, 2
  7257 00005679 881D[EF580000]      <2> 		  mov  BYTE [MBUTTON], bl
  7258 0000567F E844020000          <2> 		  call GETB
  7259 00005684 A2[F0580000]        <2> 		  mov  BYTE [XCOORD], al
  7260 00005689 E83A020000          <2> 		  call GETB
  7261 0000568E A2[F1580000]        <2> 		  mov  BYTE [YCOORD], al
  7262                              <2> 
  7263                              <2> 	showpixelcursor:
  7264 00005693 668B15[DE570000]    <2> 		mov dx, [mousecursorposition]
  7265 0000569A 668B0D[E0570000]    <2> 		mov cx, [mousecursorposition + 2]
  7266 000056A1 668915[DA570000]    <2> 		mov [lastmouseposition], dx
  7267 000056A8 66890D[DC570000]    <2> 		mov [lastmouseposition + 2], cx
  7268 000056AF A0[F0580000]        <2> 		mov al, [XCOORD]
  7269 000056B4 3C80                <2> 		cmp al, 128
  7270 000056B6 7309                <2> 		jae subxcoord
  7271 000056B8 00C0                <2> 		add al, al
  7272 000056BA 30E4                <2> 		xor ah, ah
  7273 000056BC 6601C2              <2> 		add dx, ax
  7274 000056BF EB0B                <2> 		jmp subxcoorddn
  7275                              <2> 	subxcoord:
  7276 000056C1 00C0                <2> 		add al, al
  7277 000056C3 30DB                <2> 		xor bl, bl
  7278 000056C5 28C3                <2> 		sub bl, al
  7279 000056C7 30FF                <2> 		xor bh, bh
  7280 000056C9 6629DA              <2> 		sub dx, bx
  7281                              <2> 	subxcoorddn:
  7282 000056CC 8A1D[F1580000]      <2> 		mov bl, [YCOORD]
  7283 000056D2 30C0                <2> 		xor al, al
  7284 000056D4 28D8                <2> 		sub al, bl
  7285 000056D6 3C80                <2> 		cmp al, 128
  7286 000056D8 7307                <2> 		jae subycoord
  7287 000056DA 30E4                <2> 		xor ah, ah
  7288 000056DC 6601C1              <2> 		add cx, ax
  7289 000056DF EB09                <2> 		jmp subycoorddn
  7290                              <2> 	subycoord:
  7291 000056E1 30DB                <2> 		xor bl, bl
  7292 000056E3 28C3                <2> 		sub bl, al
  7293 000056E5 30FF                <2> 		xor bh, bh
  7294 000056E7 6629D9              <2> 		sub cx, bx
  7295                              <2> 	subycoorddn:
  7296 000056EA 6681FA204E          <2> 		cmp dx, 20000
  7297 000056EF 7603                <2> 		jbe nooriginx2
  7298 000056F1 6631D2              <2> 		xor dx, dx
  7299                              <2> 	nooriginx2:
  7300 000056F4 6681F9204E          <2> 		cmp cx, 20000
  7301 000056F9 7603                <2> 		jbe nooriginy2
  7302 000056FB 6631C9              <2> 		xor cx, cx
  7303                              <2> 	nooriginy2:
  7304 000056FE 6683FA00            <2> 		cmp dx, 0
  7305 00005702 7414                <2> 		je nofixxcolumn2
  7306 00005704 663B15[F2550000]    <2> 		cmp dx, [resolutionx2]
  7307 0000570B 720B                <2> 		jb nofixxcolumn2
  7308 0000570D 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  7309 00005714 6683EA02            <2> 		sub dx, 2
  7310                              <2> 	nofixxcolumn2:
  7311 00005718 6683F900            <2> 		cmp cx, 0
  7312 0000571C 7414                <2> 		je nofixyrow2
  7313 0000571E 663B0D[06550000]    <2> 		cmp cx, [resolutiony]
  7314 00005725 720B                <2> 		jb nofixyrow2
  7315 00005727 668B0D[06550000]    <2> 		mov cx, [resolutiony]
  7316 0000572E 6683E901            <2> 		sub cx, 1
  7317                              <2> 	nofixyrow2:
  7318 00005732 668915[DE570000]    <2> 		mov [mousecursorposition], dx
  7319 00005739 66890D[E0570000]    <2> 		mov [mousecursorposition + 2], cx
  7320 00005740 803D[E7840000]00    <2> 		cmp byte [guion], 0
  7321 00005747 0F8495000000        <2> 		je near termmouse
  7322 0000574D E882130000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7323 00005752 803D[ED580000]01    <2> 		cmp byte [LBUTTON], 1
  7324 00005759 0F8408250000        <2> 		je near clickicon
  7325 0000575F 803D[EE580000]01    <2> 		cmp byte [RBUTTON], 1
  7326 00005766 0F84FB240000        <2> 		je near clickicon
  7327 0000576C A0[547C0000]        <2> 		mov al, [pbutton]
  7328 00005771 C705[577C0000]0000- <2> 		mov dword [dragging], 0
  7329 00005779 0000                <2>
  7330 0000577B 3C00                <2> 		cmp al, 0
  7331 0000577D 740F                <2> 		je nopreviousbutton
  7332 0000577F E8C2120000          <2> 		call clearmousecursor
  7333 00005784 E85E160000          <2> 		call reloadallgraphics
  7334                              <2> 	windowtermcopyend:
  7335 00005789 E8A1130000          <2> 		call switchmousepos2
  7336                              <2> 	nopreviousbutton:
  7337 0000578E 30C0                <2> 		xor al, al
  7338 00005790 A2[547C0000]        <2> 		mov [pbutton], al
  7339 00005795 A2[80810000]        <2> 		mov [windrag], al
  7340 0000579A A0[ED580000]        <2> 		mov al, [LBUTTON]
  7341 0000579F A2[557C0000]        <2> 		mov [pLBUTTON], al
  7342 000057A4 A0[EE580000]        <2> 		mov al, [RBUTTON]
  7343 000057A9 A2[567C0000]        <2> 		mov [pRBUTTON], al
  7344 000057AE 31D2                <2> 		xor edx, edx
  7345 000057B0 668B15[DE570000]    <2> 		mov dx, [mousecursorposition]
  7346 000057B7 668B0D[E0570000]    <2> 		mov cx, [mousecursorposition + 2]
  7347 000057BE 66BB18C7            <2> 		mov bx, 1100011100011000b
  7348 000057C2 66B80100            <2> 		mov ax, 1
  7349 000057C6 C605[517C0000]01    <2> 		mov byte [showcursorfonton], 1
  7350 000057CD E8D51C0000          <2> 		call showfontvesa
  7351 000057D2 C605[517C0000]00    <2> 		mov byte [showcursorfonton], 0
  7352 000057D9 C3                  <2> 		ret
  7353                              <2> 
  7354 000057DA 00000000            <2> lastmouseposition dw 0,0
  7355 000057DE 00000000            <2> mousecursorposition dw 0,0	
  7356                              <2> 
  7357                              <2> termmouse:
  7358 000057E2 BE[9CDF2B00]        <2> 		mov esi, videobuf
  7359 000057E7 31D2                <2> 		xor edx, edx
  7360 000057E9 668B15[DA570000]    <2> 		mov dx, [lastmouseposition]
  7361 000057F0 668B0D[DC570000]    <2> 		mov cx, [lastmouseposition + 2]
  7362 000057F7 66A1[73580000]      <2> 		mov ax, [cursorcache]
  7363 000057FD 6683F800            <2> 		cmp ax, 0
  7364 00005801 7424                <2> 		je nocopycursorcache
  7365 00005803 66C1E104            <2> 		shl cx, 4
  7366 00005807 66C1E203            <2> 		shl dx, 3
  7367 0000580B 01D6                <2> 		add esi, edx
  7368 0000580D 6631D2              <2> 		xor dx, dx
  7369 00005810 8A15[32250000]      <2> 		mov dl, [charxy]
  7370 00005816 6641                <2> 		inc cx
  7371                              <2> termmousecplp1:
  7372 00005818 01D6                <2> 		add esi, edx
  7373 0000581A 6649                <2> 		dec cx
  7374 0000581C 6683F900            <2> 		cmp cx, 0
  7375 00005820 75F6                <2> 		jne termmousecplp1
  7376 00005822 29D6                <2> 		sub esi, edx
  7377 00005824 668906              <2> 		mov [esi], ax
  7378                              <2> nocopycursorcache:
  7379 00005827 BE[9CDF2B00]        <2> 		mov esi, videobuf
  7380 0000582C 31D2                <2> 		xor edx, edx
  7381 0000582E 668B15[DE570000]    <2> 		mov dx, [mousecursorposition]
  7382 00005835 668B0D[E0570000]    <2> 		mov cx, [mousecursorposition + 2]
  7383 0000583C 66C1E104            <2> 		shl cx, 4
  7384 00005840 66C1E203            <2> 		shl dx, 3
  7385 00005844 01D6                <2> 		add esi, edx
  7386 00005846 6631D2              <2> 		xor dx, dx
  7387 00005849 8A15[32250000]      <2> 		mov dl, [charxy]
  7388 0000584F 6641                <2> 		inc cx
  7389                              <2> termmousecplp2:
  7390 00005851 01D6                <2> 		add esi, edx
  7391 00005853 6649                <2> 		dec cx
  7392 00005855 6683F900            <2> 		cmp cx, 0
  7393 00005859 75F6                <2> 		jne termmousecplp2
  7394 0000585B 29D6                <2> 		sub esi, edx
  7395 0000585D 668B06              <2> 		mov ax, [esi]
  7396 00005860 66A3[73580000]      <2> 		mov [cursorcache], ax
  7397 00005866 B080                <2> 		mov al, 128
  7398 00005868 B407                <2> 		mov ah, 7
  7399 0000586A 668906              <2> 		mov [esi], ax
  7400 0000586D E8BACFFFFF          <2> 		call termcopy
  7401 00005872 C3                  <2> 		ret
  7402 00005873 0000                <2> cursorcache db 0,0
  7403                              <2> 
  7404                              <2> PS2SET:
  7405 00005875 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7406 00005877 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7407 00005879 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7408 0000587E C3                  <2> ret
  7409                              <2> 
  7410                              <2> CHKPRT:
  7411 0000587F 66B96400            <2>   mov  cx, 100
  7412                              <2>  .again:
  7413 00005883 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7414 00005885 A802                <2>   test al, 2		; Check if input buffer is empty
  7415 00005887 7402                <2>   je .go
  7416 00005889 E2F8                <2>   loop .again
  7417                              <2>  .go:
  7418 0000588B C3                  <2> ret
  7419                              <2> 
  7420                              <2> WMOUS:
  7421 0000588C B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7422 0000588E E664                <2>   out  0x64, al		; write to keyboardcontroller
  7423 00005890 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7424 00005895 C3                  <2> ret
  7425                              <2> 
  7426                              <2> MBUFFUL:
  7427 00005896 66B96400            <2>   mov cx, 100
  7428                              <2>  .mn:
  7429 0000589A E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7430 0000589C A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7431 0000589E 7402                <2>   jz  .mnn
  7432 000058A0 E2F8                <2>   loop .mn
  7433                              <2>  .mnn:
  7434 000058A2 C3                  <2> ret
  7435                              <2> 
  7436                              <2> 
  7437                              <2> ACTMOUS:
  7438 000058A3 E8E4FFFFFF          <2>   call WMOUS
  7439 000058A8 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7440 000058AA E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7441 000058AC E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7442 000058B1 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7443 000058B6 C3                  <2> ret
  7444                              <2> 
  7445                              <2> CHKMOUS:
  7446 000058B7 B300                <2>   mov  bl, 0
  7447 000058B9 66B96400            <2>   mov cx, 100
  7448                              <2>  .vrd:
  7449 000058BD E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7450 000058BF A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7451 000058C1 7504                <2>   jnz .yy
  7452 000058C3 E2F8                <2>   loop .vrd
  7453 000058C5 B301                <2>   mov  bl, 1
  7454                              <2>  .yy:
  7455 000058C7 C3                  <2> ret
  7456                              <2> 
  7457                              <2> GETB:
  7458                              <2>  .cagain:
  7459 000058C8 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7460 000058CD 08DB                <2>   or bl, bl
  7461 000058CF 75F7                <2>   jnz .cagain
  7462 000058D1 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7463 000058D3 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7464 000058D5 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7465 000058DA 6631C0              <2>   xor  ax, ax
  7466 000058DD E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7467 000058DF 88C2                <2>   mov  dl, al
  7468 000058E1 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7469 000058E3 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7470 000058E5 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7471 000058EA 88D0                <2>   mov  al, dl
  7472 000058EC C3                  <2> ret
  7473                              <2> 
  7474 000058ED 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7475 000058EE 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7476 000058EF 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7477 000058F0 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7478 000058F1 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7479                              <1> %endif
  7480                              <1> %include "source/drivers/sound/pcspkr.asm"
  7481                              <2> ;PC Speaker Drivers
  7482                              <2> PCSpeakerRAW:
  7483 000058F2 60                  <2> 	pusha
  7484                              <2> nosoundrep:
  7485 000058F3 8B35[5E020000]      <2> 	mov esi, [soundpos]
  7486 000058F9 31C9                <2> 	xor ecx, ecx
  7487 000058FB 668B0D[5C020000]    <2> 	mov cx, [soundrepititions]
  7488 00005902 6683F900            <2> 	cmp cx, 0
  7489 00005906 0F8540000000        <2> 	jne near donesetpitch
  7490 0000590C 668B0E              <2> 	mov cx, [esi]
  7491 0000590F 668B5E02            <2> 	mov bx, [esi + 2]
  7492 00005913 66890D[5C020000]    <2> 	mov [soundrepititions], cx
  7493 0000591A 83C604              <2> 	add esi, 4
  7494 0000591D 8935[5E020000]      <2> 	mov [soundpos], esi
  7495 00005923 3B35[62020000]      <2> 	cmp esi, [soundendpos]
  7496 00005929 7730                <2> 	ja stopsound
  7497 0000592B 66833D[5C020000]00  <2> 	cmp word [soundrepititions], 0
  7498 00005933 74BE                <2> 	je nosoundrep
  7499 00005935 6683FB00            <2> 	cmp bx, 0
  7500 00005939 740C                <2> 	je nosoundplay
  7501 0000593B E83D000000          <2> 	call setpitch
  7502 00005940 E846000000          <2> 	call startsound
  7503 00005945 EB05                <2> 	jmp donesetpitch
  7504                              <2> nosoundplay:
  7505 00005947 E846000000          <2> 	call killsound
  7506                              <2> donesetpitch:
  7507 0000594C 6649                <2> 	dec cx
  7508 0000594E 66890D[5C020000]    <2> 	mov [soundrepititions], cx
  7509 00005955 61                  <2> 	popa
  7510 00005956 E93FA9FFFF          <2> 	jmp timerinterrupt
  7511                              <2> stopsound:
  7512 0000595B 31C0                <2> 	xor eax, eax
  7513 0000595D 66A3[5C020000]      <2> 	mov [soundrepititions], ax
  7514 00005963 A2[5B020000]        <2> 	mov [soundon], al
  7515 00005968 A3[5E020000]        <2> 	mov [soundpos], eax
  7516 0000596D A3[62020000]        <2> 	mov [soundendpos], eax
  7517 00005972 E81B000000          <2> 	call killsound
  7518 00005977 61                  <2> 	popa
  7519 00005978 E91DA9FFFF          <2> 	jmp timerinterrupt
  7520                              <2> 
  7521                              <2> 
  7522                              <2> setpitch:
  7523 0000597D B0B6                <2> 	mov al, 0xB6
  7524 0000597F E643                <2> 	out 0x43, al
  7525 00005981 6689D8              <2> 	mov ax, bx
  7526 00005984 E642                <2> 	out 0x42, al
  7527 00005986 88E0                <2> 	mov al, ah
  7528 00005988 E642                <2> 	out 0x42, al
  7529 0000598A C3                  <2> 	ret
  7530                              <2> startsound:
  7531 0000598B E461                <2> 	in al, 0x61
  7532 0000598D 0C03                <2> 	or al, 3
  7533 0000598F E661                <2> 	out 0x61, al
  7534 00005991 C3                  <2> 	ret
  7535                              <2> killsound:
  7536 00005992 E461                <2> 	in al, 0x61
  7537 00005994 24FC                <2> 	and al, 0xFC
  7538 00005996 E661                <2> 	out 0x61, al
  7539 00005998 C3                  <2> 	ret
  7540                              <2> 	
  7541                              <1> %ifdef sound.included
  7542                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7543                              <2> ;Sound Blaster Drivers
  7544                              <2> sblaster:
  7545                              <2> .init:
  7546 00005999 E8D5010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7547 0000599E A2[CD5B0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7548 000059A3 3C00                <2> 		cmp al, 0
  7549 000059A5 7418                <2> 		je .noinit
  7550 000059A7 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7551 000059A9 E8F9010000          <2> 		call WriteDSP
  7552 000059AE B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7553 000059B0 E8AF010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7554 000059B5 BE[C0590000]        <2> 		mov esi, .initmsg
  7555 000059BA E833C3FFFF          <2> 		call print
  7556                              <2> .noinit:
  7557 000059BF C3                  <2> 		ret
  7558 000059C0 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7559 000059C9 69616C697A65642E0A- <2>
  7560 000059D2 00                  <2>
  7561                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7562 000059D3 833D[B85B0000]00    <2> 	cmp dword [Length0], 0
  7563 000059DA 0F845F000000        <2> 	je near .done
  7564 000059E0 FF0D[B85B0000]      <2> 	dec dword [Length0]
  7565 000059E6 EB08                <2> 	jmp .notodd
  7566                              <2> .oddlength:
  7567 000059E8 31C9                <2> 	xor ecx, ecx
  7568 000059EA 880D[B75B0000]      <2> 	mov [OddLength], cl
  7569                              <2> .notodd:
  7570 000059F0 8B35[BE5B0000]      <2> 	mov esi, [NextMemLoc]
  7571 000059F6 31C9                <2> 	xor ecx, ecx
  7572 000059F8 668B0D[BC5B0000]    <2> 	mov cx, [Length1]
  7573 000059FF D1E9                <2> 	shr ecx, 1
  7574 00005A01 6641                <2> 	inc cx
  7575 00005A03 31DB                <2> 	xor ebx, ebx
  7576 00005A05 668B1D[C65B0000]    <2> 	mov bx, [SegLoc]
  7577 00005A0C 6601CB              <2> 	add bx, cx
  7578 00005A0F 66891D[C65B0000]    <2> 	mov [SegLoc], bx
  7579 00005A16 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7580 00005A1C 8935[C25B0000]      <2> 	mov [MemLoc], esi
  7581 00005A22 89C8                <2> 	mov eax, ecx
  7582 00005A24 01F0                <2> 	add eax, esi
  7583 00005A26 A3[BE5B0000]        <2> 	mov [NextMemLoc], eax
  7584 00005A2B E833000000          <2> 	call DMACopy
  7585                              <2> 	;call DMAPlay
  7586 00005A30 E8DA000000          <2> 	call PlayDSP
  7587 00005A35 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7588 00005A39 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7589 00005A3A E921A9FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7590                              <2> .done:
  7591 00005A3F 803D[B75B0000]01    <2> 	cmp byte [OddLength], 1
  7592 00005A46 74A0                <2> 	je .oddlength
  7593 00005A48 31C0                <2> 	xor eax, eax
  7594 00005A4A 66A3[BC5B0000]      <2> 	mov [Length1], ax
  7595 00005A50 66B8D000            <2> 	mov ax, 0xD0
  7596 00005A54 E84E010000          <2> 	call WriteDSP
  7597 00005A59 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7598 00005A5D EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7599 00005A5E E9FDA8FFFF          <2> 	jmp handled2
  7600                              <2> 	
  7601                              <2> DMACopy:
  7602 00005A63 66B80800            <2> 		mov ax, LINEAR_SEL
  7603 00005A67 8EE0                <2> 		mov fs, ax
  7604 00005A69 C1E902              <2> 		shr ecx, 2
  7605                              <2> .loop:
  7606 00005A6C 8B06                <2> 		mov eax, [esi]
  7607 00005A6E 648903              <2> 		mov [fs:ebx], eax
  7608 00005A71 83C604              <2> 		add esi, 4
  7609 00005A74 83C304              <2> 		add ebx, 4
  7610 00005A77 E2F3                <2> 		loop .loop
  7611 00005A79 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7612 00005A7D 8EE0                <2> 		mov fs, ax
  7613 00005A7F C3                  <2> 		ret
  7614                              <2> 		
  7615                              <2> 
  7616                              <2> DMAPlay:    ;uses eax ebx edx
  7617 00005A80 C605[C85B0000]00    <2> 		mov	byte [Page1],00h
  7618                              <2> 
  7619 00005A87 B005                <2> 		mov	al,(Channel+4)
  7620 00005A89 66BA0A00            <2> 		mov	dx,0Ah
  7621 00005A8D EE                  <2> 		out	dx,al
  7622 00005A8E 30C0                <2> 		xor	al,al
  7623 00005A90 66BA0C00            <2> 		mov	dx,0Ch
  7624 00005A94 EE                  <2> 		out	dx,al
  7625 00005A95 B059                <2> 		mov	al,ModeReg
  7626 00005A97 66BA0B00            <2> 		mov	dx,0Bh
  7627 00005A9B EE                  <2> 		out	dx,al
  7628 00005A9C B800000800          <2> 		mov	eax,0x80000
  7629 00005AA1 66BA0200            <2> 		mov	dx,AddPort
  7630 00005AA5 EE                  <2> 		out	dx,al
  7631 00005AA6 86C4                <2> 		xchg al,ah
  7632 00005AA8 EE                  <2> 		out	dx,al
  7633 00005AA9 B800000800          <2> 		mov	eax,0x80000
  7634 00005AAE 89C2                <2> 		mov	edx,eax
  7635 00005AB0 2500000100          <2> 		and	eax,65536
  7636 00005AB5 7406                <2> 		jz	MemLocN1
  7637 00005AB7 FE05[C85B0000]      <2> 		inc	byte [Page1]
  7638                              <2> MemLocN1:
  7639 00005ABD 89D0                <2> 		mov	eax,edx
  7640 00005ABF 2500000200          <2> 		and	eax,131072
  7641 00005AC4 7407                <2> 		jz	MemLocN2
  7642 00005AC6 8005[C85B0000]02    <2> 		add	byte [Page1],02
  7643                              <2> MemLocN2:
  7644 00005ACD 89D0                <2> 		mov	eax,edx
  7645 00005ACF 2500000400          <2> 		and	eax,262144
  7646 00005AD4 7407                <2> 		jz	MemLocN3
  7647 00005AD6 8005[C85B0000]04    <2> 		add	byte [Page1],04
  7648                              <2> MemLocN3:
  7649 00005ADD 89D0                <2> 		mov	eax,edx
  7650 00005ADF 2500000800          <2> 		and	eax,524288
  7651 00005AE4 7407                <2> 		jz	MemLocN4
  7652 00005AE6 8005[C85B0000]08    <2> 		add	byte [Page1],08
  7653                              <2> MemLocN4:
  7654 00005AED 66BA8300            <2> 		mov	dx,PgPort
  7655 00005AF1 A0[C85B0000]        <2> 		mov	al,[Page1]
  7656 00005AF6 EE                  <2> 		out	dx,al
  7657 00005AF7 66BA0300            <2> 		mov	dx,LenPort
  7658 00005AFB 66A1[BC5B0000]      <2> 		mov	ax,[Length1]
  7659 00005B01 6648                <2> 		dec ax
  7660 00005B03 EE                  <2> 		out	dx,al
  7661 00005B04 86C4                <2> 		xchg al,ah
  7662 00005B06 EE                  <2> 		out	dx,al
  7663 00005B07 66BA0A00            <2> 		mov	dx,0Ah
  7664 00005B0B B001                <2> 		mov	al,Channel
  7665 00005B0D EE                  <2> 		out	dx,al
  7666 00005B0E C3                  <2> 		ret
  7667                              <2> 		
  7668                              <2> PlayDSP:
  7669 00005B0F B040                <2> 		mov	al,40h
  7670 00005B11 E891000000          <2> 		call WriteDSP
  7671 00005B16 31D2                <2> 		xor	edx,edx
  7672 00005B18 B840420F00          <2> 		mov	eax,1000000
  7673 00005B1D 8B1D[C95B0000]      <2> 		mov	ebx,[Freq]
  7674 00005B23 803D[B65B0000]00    <2> 		cmp byte [Stereo], 0
  7675 00005B2A 7402                <2> 		je .nost
  7676 00005B2C D1E3                <2> 		shl ebx, 1
  7677                              <2> .nost:
  7678 00005B2E F7F3                <2> 		div	ebx
  7679 00005B30 89C3                <2> 		mov	ebx,eax
  7680 00005B32 B800010000          <2> 		mov	eax,256
  7681 00005B37 29D8                <2> 		sub	eax,ebx
  7682 00005B39 E869000000          <2> 		call WriteDSP
  7683 00005B3E B014                <2> 		mov	al,14h	;write the mode
  7684 00005B40 803D[B65B0000]00    <2> 		cmp byte [Stereo], 0
  7685 00005B47 7400                <2> 		je .nost2
  7686                              <2> 		
  7687                              <2> .nost2:
  7688 00005B49 E859000000          <2> 		call WriteDSP
  7689 00005B4E 66A1[BC5B0000]      <2> 		mov	ax,[Length1]
  7690 00005B54 66D1E8              <2> 		shr ax, 1
  7691 00005B57 E84B000000          <2> 		call WriteDSP
  7692 00005B5C 86C4                <2> 		xchg al,ah
  7693 00005B5E E844000000          <2> 		call WriteDSP
  7694 00005B63 C3                  <2> 		ret
  7695                              <2> 
  7696                              <2> MstrVol:    ;uses ax dx
  7697 00005B64 6650                <2> 	   push ax
  7698 00005B66 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7699 00005B6A B022                <2> 	   mov	al,22h
  7700 00005B6C EE                  <2> 	   out	dx,al
  7701 00005B6D 6658                <2> 	   pop	ax
  7702 00005B6F 6642                <2> 	   inc	dx
  7703 00005B71 EE                  <2> 	   out	dx,al
  7704 00005B72 C3                  <2> 	   ret
  7705                              <2> 	   
  7706                              <2> ResetDSP:   ; uses cx dx
  7707 00005B73 66BA2602            <2> 			mov	dx,(BasePort+6)
  7708 00005B77 B001                <2> 			mov	al,01
  7709 00005B79 EE                  <2> 			out	dx,al
  7710 00005B7A 66B93200            <2> 			mov	cx,50
  7711 00005B7E EC                  <2> WaitIt1:	in	al,dx
  7712 00005B7F E2FD                <2> 			loop WaitIt1
  7713 00005B81 30C0                <2> 			xor	al,al
  7714 00005B83 EE                  <2> 			out	dx,al
  7715 00005B84 66B93200            <2> 			mov	cx,50
  7716 00005B88 EC                  <2> WaitIt2:	in	al,dx
  7717 00005B89 E2FD                <2> 			loop WaitIt2
  7718 00005B8B B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7719 00005B8D 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7720 00005B91 EC                  <2> 			in	al,dx
  7721 00005B92 2480                <2> 			and	al,80h
  7722 00005B94 3C80                <2> 			cmp	al,80h
  7723 00005B96 750C                <2> 			jne	ResetErr
  7724 00005B98 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7725 00005B9C EC                  <2> 			in	al,dx
  7726 00005B9D 3CAA                <2> 			cmp	al,0AAh
  7727 00005B9F 7503                <2> 			jne	ResetErr
  7728 00005BA1 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7729 00005BA3 C3                  <2> 			ret
  7730 00005BA4 30C0                <2> ResetErr:	xor al, al
  7731 00005BA6 C3                  <2> 			ret
  7732                              <2> 
  7733                              <2> WriteDSP:   ;uses ax dx
  7734 00005BA7 6650                <2> 		push ax
  7735 00005BA9 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7736 00005BAD EC                  <2> WaitIt:	in	al,dx
  7737 00005BAE 2480                <2> 		and	al,80h
  7738 00005BB0 75FB                <2> 		jnz	WaitIt
  7739 00005BB2 6658                <2> 		pop	ax
  7740 00005BB4 EE                  <2> 		out	dx,al
  7741 00005BB5 C3                  <2> 		ret
  7742                              <2> 
  7743 00005BB6 00                  <2> Stereo db 0
  7744 00005BB7 00                  <2> OddLength db 0
  7745 00005BB8 00000000            <2> Length0 dd	0
  7746 00005BBC 0000                <2> Length1	dw  0
  7747 00005BBE 00000000            <2> NextMemLoc dd 0
  7748 00005BC2 00000000            <2> MemLoc	dd  0
  7749 00005BC6 0000                <2> SegLoc  dw 0
  7750 00005BC8 00                  <2> Page1	db  0
  7751 00005BC9 00000000            <2> Freq	dd	0
  7752                              <2> PgPort	equ 83h
  7753                              <2> AddPort	equ 02h
  7754                              <2> LenPort	equ 03h
  7755                              <2> ModeReg	equ 59h
  7756                              <2> Channel	equ 01h
  7757                              <2> BasePort	equ 220h
  7758 00005BCD 00                  <2> SoundBlaster	db 0
  7759                              <1> %endif
  7760                              <1> %ifdef io.serial
  7761                              <1> 	%include "source/drivers/input/serial.asm"
  7762                              <1> %else
  7763                              <1> 	%include "source/drivers/input/keyboard.asm"
  7764 00005BCE 00                  <2> specialkey db 0
  7765                              <2> ;charregion db 0
  7766                              <2> waitforinput:		;this is basically the idle process
  7767                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7768                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7769 00005BCF 6631C0              <2> 	xor ax, ax
  7770 00005BD2 A0[14670000]        <2> 	mov al, [threadson]
  7771 00005BD7 8825[14670000]      <2> 	mov [threadson], ah
  7772 00005BDD 9C                  <2> 	pushf
  7773 00005BDE FB                  <2> 	sti
  7774 00005BDF F4                  <2> 	hlt
  7775 00005BE0 9D                  <2> 	popf
  7776 00005BE1 A2[14670000]        <2> 	mov [threadson], al
  7777 00005BE6 66833D[2C230000]00  <2> 	cmp word [trans], 0
  7778 00005BEE 7401                <2> 	je getkey
  7779 00005BF0 C3                  <2> 	ret
  7780                              <2> getkey:
  7781 00005BF1 31C0                <2> 		xor eax, eax
  7782 00005BF3 A2[CE5B0000]        <2> 		mov [specialkey], al
  7783 00005BF8 A3[28230000]        <2> 		mov [lastkey], eax
  7784 00005BFD E464                <2> 		in al, 64h ; Status
  7785                              <2> 	%ifdef gui.included
  7786 00005BFF A820                <2> 		test al, 20h ; PS2-Mouse?
  7787 00005C01 0F8544FAFFFF        <2> 		jnz near moused
  7788                              <2> 	%endif
  7789 00005C07 A801                <2> 		test al, 1 
  7790 00005C09 74C4                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7791                              <2> 	calckey:
  7792 00005C0B E460                <2> 		in al, 60h
  7793 00005C0D 30E4                <2> 		xor ah, ah
  7794 00005C0F 6689C3              <2> 		mov bx, ax
  7795 00005C12 66A3[2A230000]      <2> 		mov [lastkey + 2], ax
  7796 00005C18 BF[955D0000]        <2> 		mov edi, scancode
  7797                              <2> 	searchscan: 
  7798 00005C1D 80FB3A              <2> 		cmp bl, 3Ah
  7799 00005C20 7314                <2> 		jae scanother
  7800 00005C22 C1E004              <2> 		shl eax, 4
  7801 00005C25 01C7                <2> 		add edi, eax
  7802 00005C27 668B07              <2> 		mov ax, [edi]
  7803 00005C2A 6683F800            <2> 		cmp ax, 0
  7804 00005C2E 7406                <2> 		je scanother
  7805 00005C30 E9D0000000          <2> 		jmp scanfound
  7806 00005C35 00                  <2> uppercase db 0
  7807                              <2> scanother:
  7808 00005C36 6631C0              <2> 		xor ax, ax
  7809 00005C39 66A3[28230000]      <2> 		mov [lastkey], ax
  7810 00005C3F 80FBE0              <2> 		cmp bl, 0E0h
  7811 00005C42 0F8477000000        <2> 		je near getkeyspecial
  7812 00005C48 803D[CE5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7813 00005C4F 7525                <2> 		jne nospecialkey
  7814 00005C51 80FB38              <2> 		cmp bl, 38h
  7815 00005C54 0F849A000000        <2> 		je near alton
  7816 00005C5A 80FBB8              <2> 		cmp bl, 0B8h
  7817 00005C5D 0F8499000000        <2> 		je near altoff
  7818 00005C63 80FB1D              <2> 		cmp bl, 1Dh
  7819 00005C66 0F8478000000        <2> 		je near ctron
  7820 00005C6C 80FB9D              <2> 		cmp bl, 9Dh
  7821 00005C6F 0F8477000000        <2> 		je near ctroff
  7822 00005C75 C3                  <2> 		ret
  7823                              <2> nospecialkey:
  7824 00005C76 80FB2A              <2> 		cmp bl, 2Ah
  7825 00005C79 0F8455000000        <2> 		je near shifton
  7826 00005C7F 80FB36              <2> 		cmp bl, 36h
  7827 00005C82 0F844C000000        <2> 		je near shifton
  7828 00005C88 80FB1C              <2> 		cmp bl, 1Ch
  7829 00005C8B 0F8473000000        <2> 		je near entdown
  7830 00005C91 80FBAA              <2> 		cmp bl, 0AAh
  7831 00005C94 0F8442000000        <2> 		je near shiftoff
  7832 00005C9A 80FBB6              <2> 		cmp bl, 0B6h
  7833 00005C9D 0F8439000000        <2> 		je near shiftoff
  7834 00005CA3 80FB3A              <2> 		cmp bl, 3Ah
  7835 00005CA6 0F8495000000        <2> 		je near capslock
  7836 00005CAC 80FB45              <2> 		cmp bl, 0x45
  7837 00005CAF 0F849D000000        <2> 		je near numlock
  7838 00005CB5 80FB46              <2> 		cmp bl, 0x46
  7839 00005CB8 0F84AC000000        <2> 		je near scrolllock
  7840 00005CBE C3                  <2> 		ret
  7841                              <2> 	getkeyspecial:
  7842 00005CBF C605[CE5B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7843 00005CC6 E940FFFFFF          <2> 		jmp calckey
  7844                              <2> 	shift:
  7845 00005CCB A0[355C0000]        <2> 		mov al, [uppercase]
  7846 00005CD0 3C01                <2> 		cmp al, 1
  7847 00005CD2 7308                <2> 		jae shiftoff
  7848                              <2> 	shifton:
  7849 00005CD4 C605[355C0000]01    <2> 		mov byte [uppercase], 1
  7850 00005CDB C3                  <2> 		ret
  7851                              <2> 	shiftoff:
  7852 00005CDC C605[355C0000]00    <2> 		mov byte [uppercase], 0
  7853 00005CE3 C3                  <2> 		ret
  7854                              <2> 	ctron:
  7855 00005CE4 C605[405D0000]01    <2> 		mov byte [ctrkey], 1
  7856 00005CEB C3                  <2> 		ret
  7857                              <2> 	ctroff:
  7858 00005CEC C605[405D0000]00    <2> 		mov byte [ctrkey], 0
  7859 00005CF3 C3                  <2> 		ret
  7860                              <2> 	alton:
  7861 00005CF4 C605[3F5D0000]01    <2> 		mov byte [altkey], 1
  7862 00005CFB C3                  <2> 		ret
  7863                              <2> 	altoff:
  7864 00005CFC C605[3F5D0000]00    <2> 		mov byte [altkey], 0
  7865 00005D03 C3                  <2> 		ret
  7866                              <2> 	entdown:
  7867 00005D04 C3                  <2> 		ret
  7868                              <2> scanfound:
  7869 00005D05 83C708              <2> 		add edi, 8
  7870 00005D08 803D[405D0000]01    <2> 		cmp byte [ctrkey], 1
  7871 00005D0F 7303                <2> 		jae ctrlin
  7872 00005D11 83EF08              <2> 		sub edi, 8
  7873                              <2> 	ctrlin:
  7874 00005D14 83C704              <2> 		add edi, 4
  7875 00005D17 803D[3F5D0000]01    <2> 		cmp byte [altkey], 1
  7876 00005D1E 7303                <2> 		jae altin
  7877 00005D20 83EF04              <2> 		sub edi, 4
  7878                              <2> 	altin:
  7879 00005D23 83C702              <2> 		add edi, 2
  7880 00005D26 803D[355C0000]01    <2> 		cmp byte [uppercase], 1
  7881 00005D2D 7303                <2> 		jae uppercaseon
  7882 00005D2F 83EF02              <2> 		sub edi, 2
  7883                              <2> 	uppercaseon:
  7884 00005D32 668B07              <2> 		mov ax,[edi]
  7885 00005D35 66A3[28230000]      <2> 		mov [lastkey], ax
  7886 00005D3B C3                  <2> 		ret
  7887                              <2> 		
  7888 00005D3C 00                  <2> keyboardstatus db 0
  7889 00005D3D 00                  <2> numlockstatus db 0
  7890 00005D3E 00                  <2> scrolllockstatus db 0
  7891 00005D3F 00                  <2> altkey db 0
  7892 00005D40 00                  <2> ctrkey db 0
  7893                              <2> 	capslock:
  7894 00005D41 8035[3C5D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7895 00005D48 E835000000          <2> 		call updatekblights
  7896 00005D4D E979FFFFFF          <2> 		jmp shift
  7897                              <2> 		
  7898                              <2> 	numlock:
  7899 00005D52 8035[3C5D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7900 00005D59 8035[3D5D0000]01    <2> 		xor byte [numlockstatus], 1
  7901 00005D60 E81D000000          <2> 		call updatekblights
  7902 00005D65 E987FEFFFF          <2> 		jmp getkey
  7903                              <2> 	
  7904                              <2> 	scrolllock:
  7905 00005D6A 8035[3C5D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7906 00005D71 8035[3E5D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7907 00005D78 E805000000          <2> 		call updatekblights
  7908 00005D7D E96FFEFFFF          <2> 		jmp getkey
  7909                              <2> 		
  7910                              <2> 	updatekblights:
  7911 00005D82 B0ED                <2> 		mov al, 0xED
  7912 00005D84 66BA6000            <2> 		mov dx, 0x60
  7913 00005D88 EE                  <2> 		out dx, al
  7914                              <2> 	chkkbdack:
  7915 00005D89 EC                  <2> 		in al, dx
  7916 00005D8A 3CFA                <2> 		cmp al, 0xFA
  7917 00005D8C 75FB                <2> 		jne chkkbdack
  7918 00005D8E A0[3C5D0000]        <2> 		mov al, [keyboardstatus]
  7919 00005D93 EE                  <2> 		out dx, al
  7920 00005D94 C3                  <2> 		ret
  7921                              <2> 		
  7922                              <2> scancode:
  7923                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7924 00005D95 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7925 00005D9E 00000000000000      <2>
  7926 00005DA5 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7927 00005DAE 00000000000000      <2>
  7928 00005DB5 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7929 00005DBE 00000000000000      <2>
  7930 00005DC5 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7931 00005DCE 00000000000000      <2>
  7932 00005DD5 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7933 00005DDE 00000000000000      <2>
  7934 00005DE5 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7935 00005DEE 00000000000000      <2>
  7936 00005DF5 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7937 00005DFE 00000000000000      <2>
  7938 00005E05 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7939 00005E0E 00000000000000      <2>
  7940 00005E15 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7941 00005E1E 00000000000000      <2>
  7942 00005E25 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7943 00005E2E 00000000000000      <2>
  7944 00005E35 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7945 00005E3E 00000000000000      <2>
  7946 00005E45 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7947 00005E4E 00000000000000      <2>
  7948 00005E55 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7949 00005E5E 00000000000000      <2>
  7950 00005E65 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7951 00005E6E 00000000000000      <2>
  7952 00005E75 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7953 00005E7E 00000000000000      <2>
  7954 00005E85 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7955 00005E8E 00000000000000      <2>
  7956 00005E95 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7957 00005E9D 003A0039041904      <2>
  7958 00005EA5 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7959 00005EAE 03000046042604      <2>
  7960 00005EB5 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7961 00005EBE 03950343042304      <2>
  7962 00005EC5 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7963 00005ECE 03A1033A041A04      <2>
  7964 00005ED5 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7965 00005EDE 03A40335041504      <2>
  7966 00005EE5 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7967 00005EEE 03A5033D041D04      <2>
  7968 00005EF5 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7969 00005EFE 03980333041304      <2>
  7970 00005F05 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7971 00005F0E 03990348042804      <2>
  7972 00005F15 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7973 00005F1E 039F0349042904      <2>
  7974 00005F25 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7975 00005F2E 03A00337041704      <2>
  7976 00005F35 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7977 00005F3E 00000045042504      <2>
  7978 00005F45 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7979 00005F4E 0000004A042A04      <2>
  7980 00005F55 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7981 00005F5E 00000000000000      <2>
  7982 00005F65 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7983 00005F6E 00000000000000      <2>
  7984 00005F75 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7985 00005F7E 03910344042404      <2>
  7986 00005F85 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7987 00005F8E 03A3034B042B04      <2>
  7988 00005F95 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7989 00005F9E 03940332041204      <2>
  7990 00005FA5 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7991 00005FAE 03A60330041004      <2>
  7992 00005FB5 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7993 00005FBE 0393033F041F04      <2>
  7994 00005FC5 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7995 00005FCE 03970340042004      <2>
  7996 00005FD5 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7997 00005FDE 039E033E041E04      <2>
  7998 00005FE5 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7999 00005FEE 039A033B041B04      <2>
  8000 00005FF5 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  8001 00005FFE 039B0334041404      <2>
  8002 00006005 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  8003 0000600E 00000036041604      <2>
  8004 00006015 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  8005 0000601E 0000004D042D04      <2>
  8006 00006025 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  8007 0000602E 00000051040104      <2>
  8008 00006035 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8009 0000603E 00000000000000      <2>
  8010 00006045 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  8011 0000604E 0000002F005C00      <2>
  8012 00006055 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8013 0000605E 0396034F042F04      <2>
  8014 00006065 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8015 0000606E 03A70347042704      <2>
  8016 00006075 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8017 0000607E 03A80341042104      <2>
  8018 00006085 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8019 0000608E 03A9033C041C04      <2>
  8020 00006095 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8021 0000609E 03920338041804      <2>
  8022 000060A5 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8023 000060AE 039D0342042204      <2>
  8024 000060B5 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8025 000060BE 039C034C042C04      <2>
  8026 000060C5 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8027 000060CE 00000031041104      <2>
  8028 000060D5 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8029 000060DE 0000004E042E04      <2>
  8030 000060E5 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8031 000060EE 0000002E002C00      <2>
  8032 000060F5 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8033 000060FE 00000000000000      <2>
  8034 00006105 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8035 0000610E 00000000000000      <2>
  8036 00006115 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8037 0000611E 00000000000000      <2>
  8038 00006125 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8039 0000612E 00000000000000      <2>
  8040                              <2> noscan:
  8041                              <2> 
  8042                              <1> %endif
  8043                              <1> ;drivers will soon be handled intelligently
  8044                              <1> ;every driver's source will be scanned for a .init function
  8045                              <1> ;that will be called and if it returns 0
  8046                              <1> ;the hardware was found and the driver initialized properly
  8047                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8048                              <1> 	%ifdef sound.included
  8049 00006135 E85FF8FFFF          <1> 		call sblaster.init
  8050                              <1> 	%endif
  8051                              <1> 	%ifdef network.included
  8052                              <1> 		call network.init
  8053                              <1> 	%endif
  8054 0000613A C3                  <1> 	ret
  8055                              <1> initialize:
  8056                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8057 0000613B E83E000000          <1> 	call .pic
  8058                              <1> %ifdef terminal.vsync
  8059 00006140 E862000000          <1> 	call .rtc
  8060                              <1> %endif
  8061 00006145 E892000000          <1> 	call .pit
  8062 0000614A E8B4000000          <1> 	call .fpu
  8063 0000614F E8C5000000          <1> 	call .sse
  8064 00006154 31C0                <1> 	xor eax, eax
  8065 00006156 31C9                <1> 	xor ecx, ecx
  8066                              <1> %ifdef io.serial
  8067                              <1> 	call serial.init
  8068                              <1> %endif
  8069 00006158 E801000000          <1> 	call .time
  8070 0000615D C3                  <1> 	ret
  8071                              <1> 	
  8072                              <1> .time:
  8073 0000615E E8FDDDFFFF          <1> 	call time
  8074 00006163 E8A0DFFFFF          <1> 	call timeconvert
  8075 00006168 890D[53020000]      <1> 	mov [timeseconds], ecx
  8076 0000616E 31C9                <1> 	xor ecx, ecx
  8077 00006170 890D[57020000]      <1> 	mov [timenanoseconds], ecx
  8078 00006176 C605[A83E0000]01    <1> 	mov byte [istimeset], 1
  8079 0000617D C3                  <1> 	ret
  8080                              <1> 	
  8081                              <1> .pic:
  8082 0000617E B011                <1> 	mov al, 0x11
  8083 00006180 E620                <1> 	out 0x20, al
  8084 00006182 E6A0                <1> 	out 0xA0, al
  8085 00006184 B040                <1> 	mov al, 0x40	;interrupt for master
  8086 00006186 E621                <1> 	out 0x21, al
  8087 00006188 B048                <1> 	mov al, 0x48	;interrupt for slave
  8088 0000618A E6A1                <1> 	out 0xA1, al
  8089 0000618C B004                <1> 	mov al, 4
  8090 0000618E E621                <1> 	out 0x21, al
  8091 00006190 B002                <1> 	mov al, 2
  8092 00006192 E6A1                <1> 	out 0xA1, al
  8093 00006194 B001                <1> 	mov al, 0x1
  8094 00006196 E621                <1> 	out 0x21, al
  8095 00006198 E6A1                <1> 	out 0xA1, al
  8096                              <1> 	;masks are set to zero so as not to mask
  8097 0000619A 30C0                <1> 	xor al, al
  8098 0000619C E621                <1> 	out 0x21, al
  8099 0000619E E6A1                <1> 	out 0xA1, al
  8100 000061A0 B020                <1> 	mov al, 0x20
  8101 000061A2 E6A0                <1> 	out 0xA0, al
  8102 000061A4 E620                <1> 	out 0x20, al
  8103 000061A6 C3                  <1> 	ret
  8104                              <1> .rtc:
  8105 000061A7 B008                <1> 	mov al, 0x8
  8106 000061A9 88C4                <1> 	mov ah, al
  8107 000061AB 66BA7000            <1> 	mov dx, 0x70
  8108 000061AF EE                  <1> 	out dx, al
  8109 000061B0 6642                <1> 	inc dx
  8110 000061B2 EC                  <1> 	in al, dx
  8111 000061B3 86C4                <1> 	xchg al, ah
  8112 000061B5 664A                <1> 	dec dx
  8113 000061B7 EE                  <1> 	out dx, al
  8114 000061B8 6642                <1> 	inc dx
  8115 000061BA 86C4                <1> 	xchg al, ah
  8116 000061BC 0C40                <1> 	or al, 0x40
  8117 000061BE EE                  <1> 	out dx, al
  8118                              <1> 	
  8119 000061BF B00A                <1> 	mov al, 0xA
  8120 000061C1 664A                <1> 	dec dx
  8121 000061C3 EE                  <1> 	out dx, al
  8122 000061C4 86C4                <1> 	xchg al, ah
  8123 000061C6 6642                <1> 	inc dx
  8124 000061C8 EC                  <1> 	in al, dx
  8125 000061C9 24F0                <1> 	and al, 0xF0
  8126 000061CB 0A05[12030000]      <1> 	or al, [rtcrate]
  8127 000061D1 86C4                <1> 	xchg al, ah
  8128 000061D3 664A                <1> 	dec dx
  8129 000061D5 EE                  <1> 	out dx, al
  8130 000061D6 6642                <1> 	inc dx
  8131 000061D8 86C4                <1> 	xchg al, ah
  8132 000061DA EE                  <1> 	out dx, al
  8133 000061DB C3                  <1> 	ret
  8134                              <1> 	
  8135                              <1> .pit:
  8136                              <1> 	;initialize the PIT
  8137 000061DC 66A1[4C020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8138 000061E2 E640                <1> 	out 0x40, al
  8139 000061E4 66C1C008            <1> 	rol ax, 8
  8140 000061E8 E640                <1> 	out 0x40, al
  8141                              <1> 	;enable rtc interrupt
  8142 000061EA B00B                <1> 	mov al, 0xB
  8143 000061EC E670                <1> 	out 0x70, al
  8144 000061EE 66C1C008            <1> 	rol ax, 8
  8145 000061F2 E471                <1> 	in al, 0x71
  8146 000061F4 66C1C008            <1> 	rol ax, 8
  8147 000061F8 E670                <1> 	out 0x70, al
  8148 000061FA 66C1C008            <1> 	rol ax, 8
  8149 000061FE 0C40                <1> 	or al, 0x40
  8150 00006200 E671                <1> 	out 0x71, al
  8151 00006202 C3                  <1> 	ret
  8152                              <1> .fpu:
  8153                              <1> 	;And now to initialize the fpu
  8154 00006203 0F20E0              <1> 	mov eax, cr4
  8155 00006206 0D00020000          <1> 	or eax, 0x200
  8156 0000620B 0F22E0              <1> 	mov cr4, eax
  8157 0000620E B87F0B0000          <1> 	mov eax, 0xB7F
  8158 00006213 50                  <1> 	push eax
  8159 00006214 D92C24              <1> 	fldcw [esp]
  8160 00006217 58                  <1> 	pop eax
  8161 00006218 C3                  <1> 	ret
  8162                              <1> 	
  8163                              <1> .sse:
  8164 00006219 0F20C0              <1> 	mov eax, cr0
  8165 0000621C 24FB                <1> 	and al, 11111011b
  8166 0000621E 0C02                <1> 	or al, 00000010b
  8167 00006220 0F22C0              <1> 	mov cr0, eax
  8168 00006223 0F20E0              <1> 	mov eax, cr4
  8169 00006226 660D0006            <1> 	or ax, 0000011000000000b
  8170 0000622A 0F22E0              <1> 	mov cr4, eax
  8171 0000622D C3                  <1> 	ret
  8172                                      %include "source/pci.asm"
  8173 0000622E 00                  <1> pcibus		db 0
  8174 0000622F 00                  <1> pcidevice	db 0
  8175 00006230 00                  <1> pcifunction	db 0
  8176 00006231 00                  <1> pciregister	db 0
  8177 00006232 00                  <1> pcireqtype	db 0
  8178 00006233 00000000            <1> pcidevid	dd 0
  8179 00006237 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8180                              <1> getpcimem:
  8181 0000623B B002                <1> 	mov al, 2
  8182 0000623D A2[32620000]        <1> 	mov [pcireqtype], al
  8183 00006242 EB1F                <1> 	jmp searchpci
  8184                              <1> getpciport:
  8185 00006244 B001                <1> 	mov al, 1
  8186 00006246 A2[32620000]        <1> 	mov [pcireqtype], al
  8187 0000624B EB16                <1> 	jmp searchpci
  8188                              <1> pcidump:
  8189 0000624D 31C0                <1> 	xor eax, eax
  8190 0000624F A2[30620000]        <1> 	mov [pcifunction], al
  8191 00006254 A2[2E620000]        <1> 	mov [pcibus], al
  8192 00006259 A2[2F620000]        <1> 	mov [pcidevice], al
  8193 0000625E A2[32620000]        <1> 	mov [pcireqtype], al
  8194                              <1> searchpci:		;return in ebx, start X in pciX
  8195 00006263 30C0                <1> 	xor al, al
  8196 00006265 A2[31620000]        <1> 	mov [pciregister], al
  8197 0000626A E80F020000          <1> 	call getpciaddr
  8198 0000626F BAF80C0000          <1> 	mov edx, 0xCF8
  8199 00006274 EF                  <1> 	out dx, eax	;request pci config
  8200 00006275 BAFC0C0000          <1> 	mov edx, 0xCFC
  8201 0000627A ED                  <1> 	in eax, dx 	;read in pci config
  8202 0000627B 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8203 00006280 0F8237000000        <1> 	jb near checkpcidevice
  8204                              <1> searchpciret:
  8205                              <1> nextpcidevice:
  8206 00006286 30C0                <1> 	xor al, al
  8207 00006288 A2[30620000]        <1> 	mov [pcifunction], al
  8208 0000628D A0[2F620000]        <1> 	mov al, [pcidevice]
  8209 00006292 3C1F                <1> 	cmp al, 11111b
  8210 00006294 0F8300010000        <1> 	jae near nextpcibus
  8211 0000629A FEC0                <1> 	inc al
  8212 0000629C A2[2F620000]        <1> 	mov [pcidevice], al
  8213 000062A1 EBC0                <1> 	jmp searchpci
  8214 000062A3 A0[30620000]        <1> 	mov al, [pcifunction]
  8215 000062A8 3C07                <1> 	cmp al, 111b
  8216 000062AA 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8217 000062B0 FEC0                <1> 	inc al
  8218 000062B2 A2[30620000]        <1> 	mov [pcifunction], al
  8219 000062B7 EBAA                <1> 	jmp searchpci
  8220 000062B9 00000000            <1> pcitype: db 0,0,0,0
  8221                              <1> checkpcidevice:
  8222 000062BD 31C0                <1> 	xor eax, eax
  8223 000062BF 3905[33620000]      <1> 	cmp [pcidevid], eax
  8224 000062C5 0F8430000000        <1> 	je near .good
  8225 000062CB A2[31620000]        <1> 	mov [pciregister], al	;device id, vendor id
  8226 000062D0 E8A9010000          <1> 	call getpciaddr
  8227 000062D5 BAF80C0000          <1> 	mov edx, 0xCF8
  8228 000062DA EF                  <1> 	out dx, eax
  8229 000062DB BAFC0C0000          <1> 	mov edx, 0xCFC
  8230 000062E0 ED                  <1> 	in eax, dx
  8231 000062E1 2305[37620000]      <1> 	and eax, [pcidevidmask]
  8232 000062E7 8B1D[33620000]      <1> 	mov ebx, [pcidevid]
  8233 000062ED 231D[37620000]      <1> 	and ebx, [pcidevidmask]
  8234 000062F3 39D8                <1> 	cmp eax, ebx
  8235 000062F5 0F858BFFFFFF        <1> 	jne near searchpciret
  8236                              <1> .good:
  8237 000062FB 30C0                <1> 	xor al, al
  8238 000062FD 3805[32620000]      <1> 	cmp [pcireqtype], al
  8239 00006303 0F842C000000        <1> 	je near dumppcidevice
  8240 00006309 B008                <1> 	mov al, 0x08
  8241 0000630B A2[31620000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8242 00006310 E869010000          <1> 	call getpciaddr
  8243 00006315 BAF80C0000          <1> 	mov edx, 0xCF8
  8244 0000631A EF                  <1> 	out dx, eax
  8245 0000631B BAFC0C0000          <1> 	mov edx, 0xCFC
  8246 00006320 ED                  <1> 	in eax, dx
  8247 00006321 C1C008              <1> 	rol eax, 8
  8248 00006324 3A05[B9620000]      <1> 	cmp al, [pcitype]
  8249 0000632A 0F84A0000000        <1> 	je near foundpciaddr
  8250 00006330 E951FFFFFF          <1> 	jmp searchpciret
  8251                              <1> dumppcidevice:
  8252 00006335 30C0                <1> 	xor al, al
  8253 00006337 A2[31620000]        <1> 	mov [pciregister], al
  8254 0000633C E83D010000          <1> 	call getpciaddr
  8255 00006341 89C1                <1> 	mov ecx, eax
  8256 00006343 C605[E3300000]05    <1> 	mov byte [firsthexshown], 5
  8257 0000634A E8A9CDFFFF          <1> 	call showhex
  8258                              <1> dumppcidevicelp:
  8259 0000634F A2[31620000]        <1> 	mov [pciregister], al
  8260 00006354 E825010000          <1> 	call getpciaddr
  8261 00006359 BAF80C0000          <1> 	mov edx, 0xCF8
  8262 0000635E EF                  <1> 	out dx, eax
  8263 0000635F BAFC0C0000          <1> 	mov edx, 0xCFC
  8264 00006364 ED                  <1> 	in eax, dx
  8265 00006365 89C1                <1> 	mov ecx, eax
  8266 00006367 A0[31620000]        <1> 	mov al, [pciregister]
  8267 0000636C 0404                <1> 	add al, 4
  8268 0000636E C605[E3300000]05    <1> 	mov byte [firsthexshown], 5
  8269 00006375 E87ECDFFFF          <1> 	call showhex
  8270 0000637A 3C3C                <1> 	cmp al, 0x3C
  8271 0000637C 72D1                <1> 	jb dumppcidevicelp
  8272                              <1> dumppcidn:
  8273                              <1> %ifdef io.serial
  8274                              <1> 	mov esi, line
  8275                              <1> 	call print
  8276                              <1> %else
  8277 0000637E 803D[30250000]00    <1> 	cmp byte [charpos], 0
  8278 00006385 0F84FBFEFFFF        <1> 	je near searchpciret
  8279 0000638B BE[C2840000]        <1> 	mov esi, line
  8280 00006390 E85DB9FFFF          <1> 	call print
  8281                              <1> %endif
  8282 00006395 E9ECFEFFFF          <1> 	jmp searchpciret
  8283                              <1> nextpcibus:
  8284 0000639A 30C0                <1> 	xor al, al
  8285 0000639C A2[2F620000]        <1> 	mov [pcidevice], al
  8286 000063A1 A0[2E620000]        <1> 	mov al, [pcibus]
  8287 000063A6 3C7F                <1> 	cmp al, 1111111b
  8288 000063A8 730C                <1> 	jae donesearchpci
  8289 000063AA FEC0                <1> 	inc al
  8290 000063AC A2[2E620000]        <1> 	mov [pcibus], al
  8291 000063B1 E9ADFEFFFF          <1> 	jmp searchpci
  8292                              <1> donesearchpci:
  8293 000063B6 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8294 000063BB 31D2                <1> 	xor edx, edx
  8295 000063BD 8815[B9620000]      <1> 	mov [pcitype], dl
  8296 000063C3 8915[33620000]      <1> 	mov [pcidevid], edx
  8297 000063C9 891D[37620000]      <1> 	mov [pcidevidmask], ebx
  8298 000063CF C3                  <1> 	ret
  8299                              <1> foundpciaddr:
  8300 000063D0 B010                <1> 	mov al, 0x10
  8301 000063D2 A2[31620000]        <1> 	mov [pciregister], al
  8302 000063D7 803D[32620000]02    <1> 	cmp byte [pcireqtype], 2
  8303 000063DE 743B                <1> 	je findpcimemaddr
  8304                              <1> findpciioaddr:
  8305 000063E0 E899000000          <1> 	call getpciaddr
  8306 000063E5 BAF80C0000          <1> 	mov edx, 0xCF8
  8307 000063EA EF                  <1> 	out dx, eax
  8308 000063EB BAFC0C0000          <1> 	mov edx, 0xCFC
  8309 000063F0 ED                  <1> 	in eax, dx
  8310 000063F1 89C3                <1> 	mov ebx, eax
  8311 000063F3 83E301              <1> 	and ebx, 1
  8312 000063F6 83FB00              <1> 	cmp ebx, 0
  8313 000063F9 0F8466000000        <1> 	je near notpciioaddr
  8314 000063FF 83E801              <1> 	sub eax, 1
  8315 00006402 89C2                <1> 	mov edx, eax
  8316 00006404 31DB                <1> 	xor ebx, ebx
  8317 00006406 4B                  <1> 	dec ebx
  8318 00006407 891D[37620000]      <1> 	mov [pcidevidmask], ebx
  8319 0000640D 43                  <1> 	inc ebx
  8320 0000640E 881D[B9620000]      <1> 	mov [pcitype], bl
  8321 00006414 891D[33620000]      <1> 	mov [pcidevid], ebx
  8322 0000641A C3                  <1> 	ret
  8323                              <1> findpcimemaddr:
  8324 0000641B E85E000000          <1> 	call getpciaddr
  8325 00006420 BAF80C0000          <1> 	mov edx, 0xCF8
  8326 00006425 EF                  <1> 	out dx, eax
  8327 00006426 BAFC0C0000          <1> 	mov edx, 0xCFC
  8328 0000642B ED                  <1> 	in eax, dx
  8329 0000642C 89C3                <1> 	mov ebx, eax
  8330 0000642E 83E301              <1> 	and ebx, 1
  8331 00006431 83FB01              <1> 	cmp ebx, 1
  8332 00006434 0F842B000000        <1> 	je near notpciioaddr
  8333 0000643A C1E804              <1> 	shr eax, 4
  8334 0000643D C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8335 00006440 89C2                <1> 	mov edx, eax
  8336 00006442 50                  <1> 	push eax
  8337 00006443 A1[33020000]        <1> 	mov eax, [basecache]
  8338 00006448 C1E004              <1> 	shl eax, 4
  8339 0000644B 29C2                <1> 	sub edx, eax
  8340 0000644D 58                  <1> 	pop eax
  8341 0000644E 31DB                <1> 	xor ebx, ebx
  8342 00006450 4B                  <1> 	dec ebx
  8343 00006451 891D[37620000]      <1> 	mov [pcidevidmask], ebx
  8344 00006457 43                  <1> 	inc ebx
  8345 00006458 881D[B9620000]      <1> 	mov [pcitype], bl
  8346 0000645E 891D[33620000]      <1> 	mov [pcidevid], ebx
  8347 00006464 C3                  <1> 	ret
  8348                              <1> notpciioaddr:
  8349 00006465 A0[31620000]        <1> 	mov al, [pciregister]
  8350 0000646A 0404                <1> 	add al, 4
  8351 0000646C 3C28                <1> 	cmp al, 0x28
  8352 0000646E 0F8712FEFFFF        <1> 	ja near searchpciret
  8353 00006474 A2[31620000]        <1> 	mov [pciregister], al
  8354 00006479 E962FFFFFF          <1> 	jmp findpciioaddr
  8355                              <1> getpciaddr:		;puts it in eax and ebx
  8356 0000647E 31C0                <1> 			xor eax, eax
  8357 00006480 BB00000080          <1> 			mov ebx, 0x80000000
  8358 00006485 A0[2E620000]        <1> 			mov al, [pcibus]
  8359 0000648A C1E010              <1> 			shl eax, 16
  8360 0000648D 01C3                <1> 			add ebx, eax
  8361 0000648F 31C0                <1> 			xor eax, eax
  8362 00006491 A0[2F620000]        <1> 			mov al, [pcidevice]
  8363 00006496 C1E00B              <1> 			shl eax, 11
  8364 00006499 01C3                <1> 			add ebx, eax
  8365 0000649B 31C0                <1> 			xor eax, eax
  8366 0000649D A0[30620000]        <1> 			mov al, [pcifunction]
  8367 000064A2 C1E008              <1> 			shl eax, 8
  8368 000064A5 01C3                <1> 			add ebx, eax
  8369 000064A7 31C0                <1> 			xor eax, eax
  8370 000064A9 A0[31620000]        <1> 			mov al, [pciregister]
  8371 000064AE 01C3                <1> 			add ebx, eax
  8372 000064B0 89D8                <1> 			mov eax, ebx
  8373 000064B2 C3                  <1> 			ret
  8374                                      %include "source/disk.asm"
  8375                              <1> %ifdef disk.real
  8376                              <1> 	%include "source/drivers/disk/realmode.asm"
  8377                              <2> diskr:
  8378                              <2> 			;sector count in cl
  8379                              <2> 			;disk number in ch
  8380                              <2> 			;48 bit address with last 32 bits in ebx
  8381                              <2> 			;buffer in esi
  8382                              <2> 			;puts end of buffer in edi and end lba address in edx
  8383 000064B3 880D[D7640000]      <2> 	mov [sdlength], cl
  8384 000064B9 891D[D8640000]      <2> 	mov [sdaddress], ebx
  8385 000064BF 8935[4B660000]      <2> 	mov [oldesireal], esi
  8386 000064C5 66BE[DC64]          <2> 	mov si, readdiskreal
  8387 000064C9 668935[E10C0000]    <2> 	mov [realmodeptr], si
  8388 000064D0 E800A7FFFF          <2> 	call realmode
  8389 000064D5 EB41                <2> 	jmp backfromrealread
  8390 000064D7 00                  <2> sdlength db 0
  8391 000064D8 00000000            <2> sdaddress dd 0
  8392                              <2> 
  8393                              <2> [BITS 16]
  8394                              <2> readdiskreal:
  8395 000064DC C706[0865]1000      <2> 	mov word [dlen], 0x10
  8396 000064E2 C706[0C65]0000      <2> 	mov word [daddress], 0
  8397 000064E8 C706[0E65]0001      <2> 	mov word [dsegm], 0x100
  8398 000064EE 66891E[1065]        <2> 	mov [dlbaad], ebx
  8399 000064F3 880E[0A65]          <2> 	mov [dreadlen], cl
  8400                              <2> ReadHardDisk:
  8401 000064F7 BE[0865]            <2> 	mov si, diskaddresspacket
  8402 000064FA 31C0                <2> 	xor ax, ax
  8403 000064FC B442                <2> 	mov ah, 0x42
  8404 000064FE 8A16[0765]          <2> 	mov dl, [dnumber]
  8405 00006502 CD13                <2> 	int 0x13
  8406 00006504 72F1                <2> 	jc ReadHardDisk
  8407 00006506 C3                  <2> 	ret
  8408                              <2> 
  8409 00006507 80                  <2> dnumber db 0x80
  8410                              <2> diskaddresspacket:
  8411 00006508 10                  <2> dlen:	db 0x10 ;size of packet
  8412 00006509 00                  <2> 		db 0
  8413 0000650A 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8414 0000650C 0000                <2> daddress:	dw 0	;address 0
  8415 0000650E 0001                <2> dsegm:		dw 0x100	;segment
  8416                              <2> 		;start with known value for hd
  8417                              <2> dlbaad:
  8418 00006510 00000000            <2> 	dd 0	;lba address
  8419 00006514 00000000            <2> 	dd 0
  8420                              <2> [BITS 32]
  8421                              <2> backfromrealread:
  8422 00006518 8B35[4B660000]      <2> 	mov esi, [oldesireal]
  8423 0000651E 8B1D[D8640000]      <2> 	mov ebx, [sdaddress]
  8424 00006524 31C9                <2> 	xor ecx, ecx
  8425 00006526 8A0D[D7640000]      <2> 	mov cl, [sdlength]
  8426 0000652C 01CB                <2> 	add ebx, ecx
  8427 0000652E 66B80800            <2> 	mov ax, LINEAR_SEL
  8428 00006532 8EE0                <2> 	mov fs, ax
  8429 00006534 BF00100000          <2> 	mov edi, 0x1000
  8430 00006539 B200                <2> 	mov dl, 0
  8431 0000653B D0E1                <2> 	shl cl, 1
  8432                              <2> copyfromrmodedisk:
  8433 0000653D 648A07              <2> 	mov al, [fs:edi]
  8434 00006540 8806                <2> 	mov [esi], al
  8435 00006542 47                  <2> 	inc edi
  8436 00006543 46                  <2> 	inc esi
  8437 00006544 FECA                <2> 	dec dl
  8438 00006546 80FA00              <2> 	cmp dl, 0
  8439 00006549 75F2                <2> 	jne copyfromrmodedisk
  8440 0000654B FEC9                <2> 	dec cl
  8441 0000654D B200                <2> 	mov dl, 0
  8442 0000654F 80F900              <2> 	cmp cl, 0
  8443 00006552 75E9                <2> 	jne copyfromrmodedisk
  8444 00006554 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8445 00006558 8EE0                <2> 	mov fs, ax
  8446 0000655A 89F7                <2> 	mov edi, esi
  8447 0000655C 8B35[4B660000]      <2> 	mov esi, [oldesireal]
  8448 00006562 89DA                <2> 	mov edx, ebx
  8449 00006564 8B1D[D8640000]      <2> 	mov ebx, [sdaddress]
  8450 0000656A C3                  <2> 	ret
  8451                              <2> 	
  8452                              <1> %else
  8453                              <1> 	%ifdef disk.protected
  8454                              <1> 		%include "source/drivers/disk/pata.asm"
  8455                              <1> 	%endif
  8456                              <1> %endif
  8457                              <1> %ifdef disk.none
  8458                              <1> loadfile:	xor edx, edx
  8459                              <1> 			cmp byte [edi], '&'
  8460                              <1> 			je .ret
  8461                              <1> 			mov edx, 404	;no files are found except &
  8462                              <1> 		.ret:
  8463                              <1> 			ret
  8464                              <1> %else
  8465                              <1> ;This loads files using the methods in the loaded driver
  8466                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8467                              <1> 			;returns with err code in edx and file end in edi
  8468 0000656B 803F00              <1> 	cmp byte [edi], 0
  8469 0000656E 0F8445000000        <1> 	je near nofileload
  8470 00006574 89FA                <1> 	mov edx, edi
  8471 00006576 BB[41870300]        <1> 	mov ebx, diskfileindex
  8472                              <1> nextnamechar:
  8473 0000657B 8A07                <1> 	mov al, [edi]
  8474 0000657D 3C26                <1> 	cmp al, '&'
  8475 0000657F 743D                <1> 	je nullfile
  8476 00006581 8A23                <1> 	mov ah, [ebx]
  8477 00006583 47                  <1> 	inc edi
  8478 00006584 43                  <1> 	inc ebx
  8479 00006585 88C1                <1> 	mov cl, al
  8480 00006587 08E1                <1> 	or cl, ah
  8481 00006589 80F900              <1> 	cmp cl, 0
  8482 0000658C 7465                <1> 	je equalfilenames
  8483 0000658E 80F920              <1> 	cmp cl, ' '
  8484 00006591 7460                <1> 	je equalfilenames
  8485 00006593 3C2A                <1> 	cmp al, '*'
  8486 00006595 7428                <1> 	je asteriskcheck
  8487 00006597 80FC00              <1> 	cmp ah, 0
  8488 0000659A 7410                <1> 	je nextfilename
  8489 0000659C 3C00                <1> 	cmp al, 0
  8490 0000659E 7404                <1> 	je getebxzero
  8491 000065A0 38E0                <1> 	cmp al, ah
  8492 000065A2 74D7                <1> 	je nextnamechar
  8493                              <1> getebxzero:
  8494 000065A4 8A23                <1> 	mov ah, [ebx]
  8495 000065A6 43                  <1> 	inc ebx
  8496 000065A7 80FC00              <1> 	cmp ah, 0
  8497 000065AA 75F8                <1> 	jne getebxzero
  8498                              <1> nextfilename:
  8499 000065AC 83C308              <1> 	add ebx, 8		;next descriptor
  8500 000065AF 89D7                <1> 	mov edi, edx
  8501 000065B1 81FB[37880300]      <1> 	cmp ebx, enddiskfileindex
  8502 000065B7 72C2                <1> 	jb nextnamechar
  8503                              <1> nofileload:
  8504 000065B9 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8505                              <1> nullfile:
  8506 000065BE C3                  <1> 	ret
  8507                              <1> asteriskcheck:
  8508 000065BF 4B                  <1> 	dec ebx
  8509 000065C0 8A07                <1> 	mov al, [edi]
  8510 000065C2 3C2A                <1> 	cmp al, '*'
  8511 000065C4 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8512 000065C6 3C20                <1> 	cmp al, ' '
  8513 000065C8 7412                <1> 	je equalfilenames2
  8514 000065CA 3C00                <1> 	cmp al, 0
  8515 000065CC 740E                <1> 	je equalfilenames2
  8516                              <1> .lp:
  8517 000065CE 8A23                <1> 	mov ah, [ebx]
  8518 000065D0 80FC00              <1> 	cmp ah, 0
  8519 000065D3 74D7                <1> 	je nextfilename
  8520 000065D5 38E0                <1> 	cmp al, ah
  8521 000065D7 74A2                <1> 	je nextnamechar
  8522 000065D9 43                  <1> 	inc ebx
  8523 000065DA EBF2                <1> 	jmp .lp
  8524                              <1> equalfilenames2:
  8525 000065DC 83EB02              <1> 	sub ebx, 2
  8526                              <1> eqfilefind:
  8527 000065DF 43                  <1> 	inc ebx
  8528 000065E0 81FB[37880300]      <1> 	cmp ebx, enddiskfileindex
  8529 000065E6 0F83CDFFFFFF        <1> 	jae near nofileload
  8530 000065EC 8A03                <1> 	mov al, [ebx]
  8531 000065EE 3C00                <1> 	cmp al, 0
  8532 000065F0 75ED                <1> 	jne eqfilefind
  8533 000065F2 43                  <1> 	inc ebx
  8534                              <1> equalfilenames:
  8535 000065F3 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8536 000065F6 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8537 000065F8 031D[E9840000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8538 000065FE 31C9                <1> 	xor ecx, ecx
  8539 00006600 88C1                <1> 	mov cl, al			;get excess number of sectors
  8540 00006602 C0E102              <1> 	shl cl, 2
  8541 00006605 C0E902              <1> 	shr cl, 2			;cut off at 64
  8542 00006608 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8543 0000660A B500                <1> 	mov ch, 0			;drive 0
  8544 0000660C C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8545                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8546 0000660F A3[4F660000]        <1> 	mov [filetracks], eax
  8547 00006614 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8548 00006616 89DA                <1> 	mov edx, ebx
  8549 00006618 80F900              <1> 	cmp cl, 0
  8550 0000661B 7405                <1> 	je copytracksforfile
  8551 0000661D E891FEFFFF          <1> 	call diskr	;take care of excess sectors
  8552                              <1> copytracksforfile:
  8553 00006622 A1[4F660000]        <1> 	mov eax, [filetracks]
  8554 00006627 83F800              <1> 	cmp eax, 0
  8555 0000662A 7419                <1> 	je donecopyfile
  8556 0000662C 48                  <1> 	dec eax
  8557 0000662D A3[4F660000]        <1> 	mov [filetracks], eax
  8558 00006632 89D3                <1> 	mov ebx, edx	;get end lba
  8559 00006634 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8560 00006636 8A2D[E8840000]      <1> 	mov ch, [DriveNumber]
  8561 0000663C 89FE                <1> 	mov esi, edi	;reset buffer
  8562 0000663E E870FEFFFF          <1> 	call diskr
  8563 00006643 EBDD                <1> 	jmp copytracksforfile
  8564                              <1> donecopyfile:
  8565 00006645 BA00000000          <1> 	mov edx, 0	;no error
  8566 0000664A C3                  <1> 	ret
  8567                              <1> 
  8568 0000664B 00000000            <1> oldesireal dd 0
  8569 0000664F 00000000            <1> filetracks dd 0
  8570 00006653 00                  <1> lbad1 db 0
  8571 00006654 00                  <1> lbad2 db 0
  8572 00006655 00                  <1> lbad3 db 0
  8573 00006656 00                  <1> lbad4 db 0
  8574 00006657 00                  <1> lbad5 db 0
  8575 00006658 00                  <1> lbad6 db 0
  8576 00006659 6400                <1> segments dw 100
  8577                              <1> %endif
  8578                                      %include "source/threads.asm"
  8579                              <1> %ifdef threads.included	
  8580                              <1> nwcmdst:
  8581 0000665B 31C0                <1> 	xor eax, eax
  8582 0000665D BC[00AA0300]        <1> 	mov esp, stackend
  8583 00006662 A2[14670000]        <1> 	mov [threadson], al
  8584 00006667 A3[15670000]        <1> 	mov [currentthread], eax
  8585 0000666C 83C004              <1> 	add eax, 4
  8586 0000666F A3[10670000]        <1> 	mov [lastthread], eax
  8587 00006674 FB                  <1> 	sti
  8588 00006675 E9DBC5FFFF          <1> 	jmp nwcmd
  8589                              <1> 
  8590                              <1> nomorethreadspace:
  8591 0000667A BE[90660000]        <1> 	mov esi, nmts
  8592 0000667F E86EB6FFFF          <1> 	call print
  8593 00006684 C605[14670000]00    <1> 	mov byte [threadson], 0
  8594 0000668B E9C5C5FFFF          <1> 	jmp nwcmd
  8595 00006690 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8596 00006699 6572666C6F770A00    <1>
  8597                              <1> 
  8598                              <1> nomorestackspace:
  8599 000066A1 BE[AD660000]        <1> 	mov esi, nmss
  8600 000066A6 E847B6FFFF          <1> 	call print
  8601 000066AB EBAE                <1> 	jmp nwcmdst
  8602 000066AD 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8603 000066B6 72666C6F770A00      <1>
  8604                              <1> 	
  8605                              <1> threadswitch:
  8606 000066BD 60                  <1> 	pushad 
  8607 000066BE BF[3C9A2D00]        <1> 	mov edi, threadlist
  8608 000066C3 A1[15670000]        <1> 	mov eax, [currentthread]
  8609 000066C8 40                  <1> 	inc eax
  8610 000066C9 A3[15670000]        <1> 	mov [currentthread], eax
  8611 000066CE 6648                <1> 	dec ax
  8612 000066D0 C1E002              <1> 	shl eax, 2
  8613 000066D3 01C7                <1> 	add edi, eax
  8614 000066D5 8927                <1> 	mov [edi], esp
  8615 000066D7 83C704              <1> 	add edi, 4
  8616 000066DA 81FF[3CAA2D00]      <1> 	cmp edi, threadlistend
  8617 000066E0 0F830B000000        <1> 	jae near nookespthread
  8618 000066E6 8B07                <1> 	mov eax, [edi]
  8619 000066E8 83F800              <1> 	cmp eax, 0
  8620 000066EB 0F8517000000        <1> 	jne near okespthread
  8621                              <1> nookespthread:
  8622 000066F1 BF[3C9A2D00]        <1> 	mov edi, threadlist
  8623 000066F6 31C0                <1> 	xor eax, eax
  8624 000066F8 A3[15670000]        <1> 	mov [currentthread], eax
  8625 000066FD 8B07                <1> 	mov eax, [edi]
  8626 000066FF 83F800              <1> 	cmp eax, 0
  8627 00006702 0F8453FFFFFF        <1> 	je near nwcmdst
  8628                              <1> okespthread:
  8629 00006708 89C4                <1> 	mov esp, eax
  8630 0000670A B020                <1> 	mov al, 0x20
  8631 0000670C E620                <1> 	out 0x20, al
  8632 0000670E 61                  <1> 	popad
  8633 0000670F CF                  <1> 	iret
  8634                              <1> 
  8635                              <1> %endif
  8636 00006710 04000000            <1> 	lastthread dd 4
  8637 00006714 00                  <1> 	threadson db 0
  8638 00006715 00000000            <1> 	currentthread dd 0
  8639                                  %ifdef gui.included
  8640                                      %include "source/gui/gui.asm"
  8641                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8642 00006719 31C0                <1> 	xor eax, eax
  8643 0000671B 31DB                <1> 	xor ebx, ebx
  8644 0000671D 31C9                <1> 	xor ecx, ecx
  8645 0000671F 31D2                <1> 	xor edx, edx
  8646 00006721 E84B080000          <1> 	call guisetup
  8647                              <1> guiloop:
  8648 00006726 E8CCEEFFFF          <1> 	call cursorgui
  8649                              <1> guistart:
  8650 0000672B E8C1F4FFFF          <1> 	call getkey
  8651 00006730 C605[4D7C0000]00    <1> 	mov byte [copygui], 0
  8652 00006737 EBF2                <1> 	jmp guistart
  8653                              <1> 
  8654                              <1> %include "source/gui/bmp.asm"
  8655                              <2> showbmp:
  8656 00006739 668B06              <2> 	mov ax, [esi]
  8657 0000673C 663D424D            <2> 	cmp ax, "BM"
  8658 00006740 0F85AF000000        <2> 	jne near endedbmp
  8659 00006746 8B3D[1A550000]      <2> 	mov edi, [physbaseptr]
  8660 0000674C 6689D0              <2> 	mov ax, dx
  8661 0000674F 6689CB              <2> 	mov bx, cx
  8662 00006752 31C9                <2> 	xor ecx, ecx
  8663 00006754 31D2                <2> 	xor edx, edx
  8664 00006756 6689D9              <2> 	mov cx, bx
  8665 00006759 6689C2              <2> 	mov dx, ax
  8666 0000675C 01D7                <2> 	add edi, edx
  8667 0000675E 01D7                <2> 	add edi, edx
  8668 00006760 31D2                <2> 	xor edx, edx
  8669 00006762 668B15[F2550000]    <2> 	mov dx, [resolutionx2]
  8670 00006769 034E16              <2> 	add ecx, [esi + 22]
  8671                              <2> bmplocloop:
  8672 0000676C 52                  <2> 	push edx
  8673 0000676D 31C0                <2> 	xor eax, eax
  8674 0000676F 6689D0              <2> 	mov ax, dx
  8675 00006772 F7E1                <2> 	mul ecx
  8676 00006774 5A                  <2> 	pop edx
  8677 00006775 663B0D[06550000]    <2> 	cmp cx, [resolutiony]
  8678 0000677C 7609                <2> 	jbe .nofixy
  8679 0000677E 31C9                <2> 	xor ecx, ecx
  8680 00006780 668B0D[06550000]    <2> 	mov cx, [resolutiony]
  8681                              <2> .nofixy:
  8682 00006787 01C7                <2> 	add edi, eax
  8683 00006789 8B5612              <2> 	mov edx, [esi + 18]
  8684 0000678C 8B4E16              <2> 	mov ecx, [esi + 22]
  8685 0000678F 8B460A              <2> 	mov eax, [esi + 10]
  8686 00006792 8B5E02              <2> 	mov ebx, [esi + 2]
  8687 00006795 01F3                <2> 	add ebx, esi
  8688 00006797 891D[FB670000]      <2> 	mov [bmpend], ebx
  8689 0000679D 89D3                <2> 	mov ebx, edx
  8690 0000679F 01C6                <2> 	add esi, eax
  8691                              <2> ldxbmp2:
  8692 000067A1 31D2                <2> 	xor edx, edx
  8693 000067A3 668B15[04550000]    <2> 	mov dx, [resolutionx]
  8694 000067AA 39D3                <2> 	cmp ebx, edx
  8695 000067AC 7702                <2> 	ja ldxbmp
  8696 000067AE 89DA                <2> 	mov edx, ebx
  8697                              <2> ldxbmp:
  8698 000067B0 668B06              <2> 	mov ax, [esi]
  8699 000067B3 668907              <2> 	mov [edi], ax
  8700 000067B6 83C702              <2> 	add edi, 2
  8701 000067B9 83C602              <2> 	add esi, 2
  8702 000067BC 3B35[FB670000]      <2> 	cmp esi, [bmpend]
  8703 000067C2 7731                <2> 	ja endedbmp
  8704 000067C4 4A                  <2> 	dec edx
  8705 000067C5 83FA00              <2> 	cmp edx, 0
  8706 000067C8 77E6                <2> 	ja ldxbmp
  8707 000067CA 31D2                <2> 	xor edx, edx
  8708 000067CC 668B15[04550000]    <2> 	mov dx, [resolutionx]
  8709 000067D3 39D3                <2> 	cmp ebx, edx
  8710 000067D5 7610                <2> 	jbe .notover
  8711                              <2> .over:
  8712 000067D7 01DE                <2> 	add esi, ebx
  8713 000067D9 01DE                <2> 	add esi, ebx
  8714 000067DB 29D6                <2> 	sub esi, edx
  8715 000067DD 29D6                <2> 	sub esi, edx
  8716 000067DF 01DF                <2> 	add edi, ebx
  8717 000067E1 01DF                <2> 	add edi, ebx
  8718 000067E3 29D7                <2> 	sub edi, edx
  8719 000067E5 29D7                <2> 	sub edi, edx
  8720                              <2> .notover:
  8721 000067E7 29DF                <2> 	sub edi, ebx
  8722 000067E9 29DF                <2> 	sub edi, ebx
  8723 000067EB 29D7                <2> 	sub edi, edx
  8724 000067ED 29D7                <2> 	sub edi, edx
  8725 000067EF 49                  <2> 	dec ecx
  8726 000067F0 83F900              <2> 	cmp ecx, 0
  8727 000067F3 77AC                <2> 	ja ldxbmp2
  8728                              <2> endedbmp:
  8729 000067F5 E835030000          <2> 	call switchmousepos2
  8730 000067FA C3                  <2> 	ret
  8731                              <2> 	
  8732 000067FB 00000000            <2> 	bmpend dd 0
  8733                              <1> %include "source/gui/circle.asm"
  8734                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8735 000067FF 55                  <2> 	push ebp
  8736 00006800 6683F800            <2> 	cmp ax, 0
  8737 00006804 770A                <2> 	ja .nozerocircle
  8738 00006806 E80C1C0000          <2> 	call putpixel	;the easiest circle ever
  8739 0000680B E9EE000000          <2> 	jmp .done
  8740                              <2> .nozerocircle:
  8741 00006810 6689F5              <2> 	mov bp, si
  8742 00006813 6650                <2> 	push ax
  8743 00006815 E83E1C0000          <2> 	call getpixelmem
  8744 0000681A 31C0                <2> 	xor eax, eax
  8745 0000681C 6658                <2> 	pop ax
  8746 0000681E BE01000000          <2> 	mov esi, 1
  8747 00006823 29C6                <2> 	sub esi, eax
  8748 00006825 89C1                <2> 	mov ecx, eax
  8749 00006827 31C0                <2> 	xor eax, eax
  8750 00006829 66A1[F2550000]      <2> 	mov ax, [resolutionx2]
  8751 0000682F F7E1                <2> 	mul ecx
  8752 00006831 50                  <2> 	push eax
  8753 00006832 31D2                <2> 	xor edx, edx
  8754 00006834 01C7                <2> 	add edi, eax
  8755 00006836 66892F              <2> 	mov [edi], bp
  8756 00006839 29C7                <2> 	sub edi, eax
  8757 0000683B 29C7                <2> 	sub edi, eax
  8758 0000683D 66892F              <2> 	mov [edi], bp
  8759 00006840 01C7                <2> 	add edi, eax
  8760 00006842 D1E1                <2> 	shl ecx, 1
  8761 00006844 01CF                <2> 	add edi, ecx
  8762 00006846 66892F              <2> 	mov [edi], bp
  8763 00006849 D1E1                <2> 	shl ecx, 1
  8764 0000684B 29CF                <2> 	sub edi, ecx
  8765 0000684D 66892F              <2> 	mov [edi], bp
  8766 00006850 D1E9                <2> 	shr ecx, 1
  8767 00006852 01CF                <2> 	add edi, ecx
  8768 00006854 D1E9                <2> 	shr ecx, 1
  8769 00006856 B802000000          <2> 	mov eax, 2
  8770 0000685B F7E1                <2> 	mul ecx
  8771 0000685D 48                  <2> 	dec eax
  8772 0000685E F7D0                <2> 	not eax ;make it negative
  8773 00006860 A3[04690000]        <2> 	mov [.ddF_y], eax
  8774 00006865 58                  <2> 	pop eax
  8775 00006866 BB01000000          <2> 	mov ebx, 1
  8776 0000686B 891D[00690000]      <2> 	mov [.ddF_x], ebx
  8777 00006871 4B                  <2> 	dec ebx
  8778 00006872 31D2                <2> 	xor edx, edx
  8779 00006874 EB04                <2> 	jmp .lp
  8780                              <2> .lpb:
  8781 00006876 D1EA                <2> 	shr edx, 1
  8782 00006878 D1E9                <2> 	shr ecx, 1
  8783                              <2> .lp:	;it starts this with the center in edi
  8784                              <2> 		;color in bp
  8785                              <2> 		;ddF_x in memory
  8786                              <2> 		;x*resolutionx2 in ebx
  8787                              <2> 		;x in edx
  8788                              <2> 		;ddF_y in memory
  8789                              <2> 		;y*resolutionx2 in eax
  8790                              <2> 		;f in esi
  8791                              <2> 		;y in ecx
  8792 0000687A 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8793 00006880 7714                <2> 	ja	.noddF_y
  8794 00006882 49                  <2> 	dec ecx
  8795 00006883 2B05[F2550000]      <2> 	sub eax, [resolutionx2]
  8796 00006889 8305[04690000]02    <2> 	add dword [.ddF_y], 2
  8797 00006890 0335[04690000]      <2> 	add esi, [.ddF_y]
  8798                              <2> .noddF_y:
  8799 00006896 42                  <2> 	inc edx
  8800 00006897 031D[F2550000]      <2> 	add ebx, [resolutionx2]
  8801 0000689D 8305[00690000]02    <2> 	add dword [.ddF_x], 2
  8802 000068A4 0335[00690000]      <2> 	add esi, [.ddF_x]
  8803                              <2> 
  8804 000068AA D1E2                <2> 	shl edx, 1
  8805 000068AC D1E1                <2> 	shl ecx, 1
  8806 000068AE 01D7                <2> 	add edi, edx
  8807 000068B0 01C7                <2> 	add edi, eax
  8808 000068B2 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8809 000068B5 D1E2                <2> 	shl edx, 1
  8810 000068B7 29D7                <2> 	sub edi, edx
  8811 000068B9 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8812 000068BC D1E0                <2> 	shl eax, 1
  8813 000068BE 29C7                <2> 	sub edi, eax
  8814 000068C0 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8815 000068C3 01D7                <2> 	add edi, edx
  8816 000068C5 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8817 000068C8 D1E8                <2> 	shr eax, 1
  8818 000068CA D1EA                <2> 	shr edx, 1
  8819 000068CC 01C7                <2> 	add edi, eax
  8820 000068CE 29D7                <2> 	sub edi, edx
  8821                              <2> 
  8822 000068D0 39D1                <2> 	cmp ecx, edx
  8823 000068D2 74A2                <2> 	je .lpb
  8824                              <2> 
  8825 000068D4 01DF                <2> 	add edi, ebx
  8826 000068D6 01CF                <2> 	add edi, ecx
  8827 000068D8 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8828 000068DB D1E1                <2> 	shl ecx, 1
  8829 000068DD 29CF                <2> 	sub edi, ecx
  8830 000068DF 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8831 000068E2 D1E3                <2> 	shl ebx, 1
  8832 000068E4 29DF                <2> 	sub edi, ebx
  8833 000068E6 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8834 000068E9 01CF                <2> 	add edi, ecx
  8835 000068EB 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8836 000068EE D1EB                <2> 	shr ebx, 1
  8837 000068F0 D1E9                <2> 	shr ecx, 1
  8838 000068F2 01DF                <2> 	add edi, ebx
  8839 000068F4 29CF                <2> 	sub edi, ecx
  8840 000068F6 39CA                <2> 	cmp edx, ecx
  8841 000068F8 0F8278FFFFFF        <2> 	jb .lpb
  8842                              <2> .done:
  8843 000068FE 5D                  <2> 	pop ebp
  8844 000068FF C3                  <2> 	ret
  8845                              <2> 	
  8846 00006900 00000000            <2> .ddF_x dd 0
  8847 00006904 00000000            <2> .ddF_y dd 0
  8848                              <2> 
  8849                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8850 00006908 55                  <2> 	push ebp
  8851 00006909 6683F800            <2> 	cmp ax, 0
  8852 0000690D 770A                <2> 	ja .nozerocircle
  8853 0000690F E8031B0000          <2> 	call putpixel	;the easiest circle ever
  8854 00006914 E923010000          <2> 	jmp .done
  8855                              <2> .nozerocircle:
  8856 00006919 6689F5              <2> 	mov bp, si
  8857 0000691C 6650                <2> 	push ax
  8858 0000691E E8351B0000          <2> 	call getpixelmem
  8859 00006923 31C0                <2> 	xor eax, eax
  8860 00006925 6658                <2> 	pop ax
  8861 00006927 BE01000000          <2> 	mov esi, 1
  8862 0000692C 29C6                <2> 	sub esi, eax
  8863 0000692E 89C1                <2> 	mov ecx, eax
  8864 00006930 31C0                <2> 	xor eax, eax
  8865 00006932 66A1[F2550000]      <2> 	mov ax, [resolutionx2]
  8866 00006938 F7E1                <2> 	mul ecx
  8867 0000693A 50                  <2> 	push eax
  8868 0000693B 31D2                <2> 	xor edx, edx
  8869 0000693D 01C7                <2> 	add edi, eax
  8870 0000693F 66892F              <2> 	mov [edi], bp
  8871 00006942 29C7                <2> 	sub edi, eax
  8872 00006944 29C7                <2> 	sub edi, eax
  8873 00006946 66892F              <2> 	mov [edi], bp
  8874 00006949 01C7                <2> 	add edi, eax
  8875 0000694B D1E1                <2> 	shl ecx, 1
  8876 0000694D 01CF                <2> 	add edi, ecx
  8877 0000694F 51                  <2> 	push ecx
  8878                              <2> .s0:
  8879 00006950 66892F              <2> 	mov [edi], bp
  8880 00006953 83EF02              <2> 	sub edi, 2
  8881 00006956 49                  <2> 	dec ecx
  8882 00006957 83F900              <2> 	cmp ecx, 0
  8883 0000695A 75F4                <2> 	jne .s0
  8884 0000695C 66892F              <2> 	mov [edi], bp
  8885 0000695F 59                  <2> 	pop ecx
  8886 00006960 01CF                <2> 	add edi, ecx
  8887 00006962 D1E9                <2> 	shr ecx, 1
  8888 00006964 B802000000          <2> 	mov eax, 2
  8889 00006969 F7E1                <2> 	mul ecx
  8890 0000696B 48                  <2> 	dec eax
  8891 0000696C F7D0                <2> 	not eax ;make it negative
  8892 0000696E A3[426A0000]        <2> 	mov [.ddF_y], eax
  8893 00006973 58                  <2> 	pop eax
  8894 00006974 BB01000000          <2> 	mov ebx, 1
  8895 00006979 891D[3E6A0000]      <2> 	mov [.ddF_x], ebx
  8896 0000697F 4B                  <2> 	dec ebx
  8897 00006980 31D2                <2> 	xor edx, edx
  8898 00006982 EB04                <2> 	jmp .lp
  8899                              <2> .lpb:
  8900 00006984 D1EA                <2> 	shr edx, 1
  8901 00006986 D1E9                <2> 	shr ecx, 1
  8902                              <2> .lp:	;it starts this with the center in edi
  8903                              <2> 		;color in bp
  8904                              <2> 		;ddF_x in memory
  8905                              <2> 		;x*resolutionx2 in ebx
  8906                              <2> 		;x in edx
  8907                              <2> 		;ddF_y in memory
  8908                              <2> 		;y*resolutionx2 in eax
  8909                              <2> 		;f in esi
  8910                              <2> 		;y in ecx
  8911 00006988 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8912 0000698E 7714                <2> 	ja	.noddF_y
  8913 00006990 49                  <2> 	dec ecx
  8914 00006991 2B05[F2550000]      <2> 	sub eax, [resolutionx2]
  8915 00006997 8305[426A0000]02    <2> 	add dword [.ddF_y], 2
  8916 0000699E 0335[426A0000]      <2> 	add esi, [.ddF_y]
  8917                              <2> .noddF_y:
  8918 000069A4 42                  <2> 	inc edx
  8919 000069A5 031D[F2550000]      <2> 	add ebx, [resolutionx2]
  8920 000069AB 8305[3E6A0000]02    <2> 	add dword [.ddF_x], 2
  8921 000069B2 0335[3E6A0000]      <2> 	add esi, [.ddF_x]
  8922                              <2> 
  8923 000069B8 D1E2                <2> 	shl edx, 1
  8924 000069BA D1E1                <2> 	shl ecx, 1
  8925 000069BC 52                  <2> 	push edx
  8926 000069BD 29D7                <2> 	sub edi, edx
  8927 000069BF 01C7                <2> 	add edi, eax
  8928 000069C1 83FA00              <2> 	cmp edx, 0
  8929 000069C4 740C                <2> 	je .nos1
  8930                              <2> .s1:
  8931 000069C6 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8932 000069C9 83C702              <2> 	add edi, 2
  8933 000069CC 4A                  <2> 	dec edx
  8934 000069CD 83FA00              <2> 	cmp edx, 0
  8935 000069D0 75F4                <2> 	jne .s1
  8936                              <2> .nos1:
  8937 000069D2 66892F              <2> 	mov [edi], bp
  8938 000069D5 5A                  <2> 	pop edx
  8939 000069D6 52                  <2> 	push edx
  8940 000069D7 29C7                <2> 	sub edi, eax
  8941 000069D9 29C7                <2> 	sub edi, eax
  8942 000069DB 83FA00              <2> 	cmp edx, 0
  8943 000069DE 740C                <2> 	je .nos2
  8944                              <2> .s2:
  8945 000069E0 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8946 000069E3 83EF02              <2> 	sub edi, 2
  8947 000069E6 4A                  <2> 	dec edx
  8948 000069E7 83FA00              <2> 	cmp edx, 0
  8949 000069EA 75F4                <2> 	jne .s2
  8950                              <2> .nos2:
  8951 000069EC 66892F              <2> 	mov [edi], bp
  8952 000069EF 5A                  <2> 	pop edx
  8953 000069F0 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8954 000069F2 01D7                <2> 	add edi, edx
  8955                              <2> 
  8956 000069F4 39D1                <2> 	cmp ecx, edx
  8957 000069F6 748C                <2> 	je .lpb
  8958                              <2> 
  8959 000069F8 51                  <2> 	push ecx
  8960 000069F9 01DF                <2> 	add edi, ebx
  8961 000069FB 29CF                <2> 	sub edi, ecx
  8962 000069FD 83F900              <2> 	cmp ecx, 0
  8963 00006A00 740C                <2> 	je .nos3
  8964                              <2> .s3:
  8965 00006A02 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8966 00006A05 83C702              <2> 	add edi, 2
  8967 00006A08 49                  <2> 	dec ecx
  8968 00006A09 83F900              <2> 	cmp ecx, 0
  8969 00006A0C 75F4                <2> 	jne .s3
  8970                              <2> .nos3:
  8971 00006A0E 66892F              <2> 	mov [edi], bp
  8972 00006A11 59                  <2> 	pop ecx
  8973 00006A12 51                  <2> 	push ecx
  8974 00006A13 29DF                <2> 	sub edi, ebx
  8975 00006A15 29DF                <2> 	sub edi, ebx
  8976 00006A17 83F900              <2> 	cmp ecx, 0
  8977 00006A1A 740C                <2> 	je .nos4
  8978                              <2> .s4:
  8979 00006A1C 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8980 00006A1F 83EF02              <2> 	sub edi, 2
  8981 00006A22 49                  <2> 	dec ecx
  8982 00006A23 83F900              <2> 	cmp ecx, 0
  8983 00006A26 75F4                <2> 	jne .s4
  8984                              <2> .nos4:
  8985 00006A28 66892F              <2> 	mov [edi], bp
  8986 00006A2B 59                  <2> 	pop ecx
  8987 00006A2C 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8988 00006A2E 01CF                <2> 	add edi, ecx
  8989                              <2> 
  8990 00006A30 D1EA                <2> 	shr edx, 1
  8991 00006A32 D1E9                <2> 	shr ecx, 1
  8992 00006A34 39CA                <2> 	cmp edx, ecx
  8993 00006A36 0F824CFFFFFF        <2> 	jb .lp
  8994                              <2> .done:
  8995 00006A3C 5D                  <2> 	pop ebp
  8996 00006A3D C3                  <2> 	ret
  8997                              <2> 	
  8998 00006A3E 00000000            <2> .ddF_x dd 0
  8999 00006A42 00000000            <2> .ddF_y dd 0
  9000                              <1> %include "source/gui/cursor.asm"
  9001                              <2> clearmousecursor:
  9002 00006A46 BE[E36D0000]        <2> 		mov esi, background
  9003 00006A4B 8B3D[1A550000]      <2> 		mov edi, [physbaseptr]
  9004 00006A51 31D2                <2> 		xor edx, edx
  9005 00006A53 31C9                <2> 		xor ecx, ecx
  9006 00006A55 668B15[DA570000]    <2> 		mov dx, [lastmouseposition]
  9007 00006A5C 668B0D[DC570000]    <2> 		mov cx, [lastmouseposition + 2]
  9008 00006A63 01D7                <2> 		add edi, edx
  9009 00006A65 31D2                <2> 		xor edx, edx
  9010 00006A67 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  9011 00006A6E 83F900              <2> 		cmp ecx, 0
  9012 00006A71 7408                <2> 		je .nomul
  9013 00006A73 52                  <2> 		push edx
  9014 00006A74 89D0                <2> 		mov eax, edx
  9015 00006A76 F7E1                <2> 		mul ecx
  9016 00006A78 01C7                <2> 		add edi, eax
  9017 00006A7A 5A                  <2> 		pop edx
  9018                              <2> .nomul:
  9019                              <2> %ifdef 	gui.background
  9020 00006A7B 833D[BB6D0000]00    <2> 		cmp dword [backgroundimage], 0
  9021 00006A82 7431                <2> 		je .noyclr
  9022 00006A84 8B35[BB6D0000]      <2> 		mov esi, [backgroundimage]
  9023 00006A8A 2B3D[1A550000]      <2> 		sub edi, [physbaseptr]
  9024 00006A90 01FE                <2> 		add esi, edi
  9025 00006A92 033D[1A550000]      <2> 		add edi, [physbaseptr]
  9026                              <2> .backlp:
  9027 00006A98 31DB                <2> 		xor ebx, ebx
  9028                              <2> .noyback:
  9029 00006A9A 8B041E              <2> 		mov eax, [esi + ebx]
  9030 00006A9D 89041F              <2> 		mov [edi + ebx], eax
  9031 00006AA0 83C304              <2> 		add ebx, 4
  9032 00006AA3 83FB10              <2> 		cmp ebx, 16
  9033 00006AA6 75F2                <2> 		jne .noyback
  9034 00006AA8 01D7                <2> 		add edi, edx
  9035 00006AAA 01D6                <2> 		add esi, edx
  9036 00006AAC 6641                <2> 		inc cx
  9037 00006AAE 6683F910            <2> 		cmp cx, 16
  9038 00006AB2 72E4                <2> 		jb .backlp
  9039 00006AB4 C3                  <2> 		ret
  9040                              <2> %endif
  9041                              <2> .noyclr:
  9042 00006AB5 668B06              <2> 		mov ax, [esi]
  9043 00006AB8 C1C010              <2> 		rol eax, 16
  9044 00006ABB 668B06              <2> 		mov ax, [esi]
  9045 00006ABE 8907                <2> 		mov [edi], eax
  9046 00006AC0 894704              <2> 		mov [edi + 4], eax
  9047 00006AC3 894708              <2> 		mov [edi + 8], eax
  9048 00006AC6 89470C              <2> 		mov [edi + 12], eax
  9049 00006AC9 01D7                <2> 		add edi, edx
  9050 00006ACB 6641                <2> 		inc cx
  9051 00006ACD 6683F910            <2> 		cmp cx, 16
  9052 00006AD1 72E2                <2> 		jb .noyclr
  9053 00006AD3 C3                  <2> 		ret
  9054                              <2> 
  9055                              <2> switchmousepos:		;;switch were the mouse is located
  9056 00006AD4 BE[9CDE2B00]        <2> 		mov esi, mousecolorbuf
  9057 00006AD9 8B3D[1A550000]      <2> 		mov edi, [physbaseptr]
  9058 00006ADF 31D2                <2> 		xor edx, edx
  9059 00006AE1 31C9                <2> 		xor ecx, ecx
  9060 00006AE3 668B15[DA570000]    <2> 		mov dx, [lastmouseposition]
  9061 00006AEA 668B0D[DC570000]    <2> 		mov cx, [lastmouseposition + 2]
  9062 00006AF1 01D7                <2> 		add edi, edx
  9063 00006AF3 31D2                <2> 		xor edx, edx
  9064 00006AF5 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  9065 00006AFC 6683F900            <2> 		cmp cx, 0
  9066 00006B00 740A                <2> 		je noswmsy
  9067 00006B02 01D7                <2> swmsy:		add edi, edx
  9068 00006B04 6649                <2> 		dec cx
  9069 00006B06 6683F900            <2> 		cmp cx, 0
  9070 00006B0A 75F6                <2> 		jne swmsy
  9071 00006B0C 8B06                <2> noswmsy:	mov eax, [esi]
  9072 00006B0E 8B5E04              <2> 		mov ebx, [esi + 4]
  9073 00006B11 8907                <2> 		mov [edi], eax
  9074 00006B13 895F04              <2> 		mov [edi + 4], ebx
  9075 00006B16 8B4608              <2> 		mov eax, [esi + 8]
  9076 00006B19 8B5E0C              <2> 		mov ebx, [esi + 12]
  9077 00006B1C 894708              <2> 		mov [edi + 8], eax
  9078 00006B1F 895F0C              <2> 		mov [edi + 12], ebx
  9079 00006B22 01D7                <2> 		add edi, edx
  9080 00006B24 83C610              <2> 		add esi, 16
  9081 00006B27 81FE[9CDF2B00]      <2> 		cmp esi, mcolorend
  9082 00006B2D 72DD                <2> 		jb noswmsy
  9083                              <2> 		
  9084                              <2> switchmousepos2:
  9085 00006B2F BE[9CDE2B00]        <2> 		mov esi, mousecolorbuf
  9086 00006B34 8B3D[1A550000]      <2> 		mov edi, [physbaseptr]
  9087 00006B3A 31D2                <2> 		xor edx, edx
  9088 00006B3C 31C9                <2> 		xor ecx, ecx
  9089 00006B3E 668B15[DE570000]    <2> 		mov dx, [mousecursorposition]
  9090 00006B45 668B0D[E0570000]    <2> 		mov cx, [mousecursorposition + 2]
  9091 00006B4C 01D7                <2> 		add edi, edx
  9092 00006B4E 31D2                <2> 		xor edx, edx
  9093 00006B50 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  9094 00006B57 6683F900            <2> 		cmp cx, 0
  9095 00006B5B 740A                <2> 		je noswmsy2
  9096 00006B5D 01D7                <2> swmsy2:		add edi, edx
  9097 00006B5F 6649                <2> 		dec cx
  9098 00006B61 6683F900            <2> 		cmp cx, 0
  9099 00006B65 75F6                <2> 		jne swmsy2
  9100 00006B67 8B07                <2> noswmsy2:	mov eax, [edi]
  9101 00006B69 8B5F04              <2> 		mov ebx, [edi + 4]
  9102 00006B6C 8906                <2> 		mov [esi], eax
  9103 00006B6E 895E04              <2> 		mov [esi + 4], ebx
  9104 00006B71 8B4708              <2> 		mov eax, [edi + 8]
  9105 00006B74 8B5F0C              <2> 		mov ebx, [edi + 12]
  9106 00006B77 894608              <2> 		mov [esi + 8], eax
  9107 00006B7A 895E0C              <2> 		mov [esi + 12], ebx
  9108 00006B7D 01D7                <2> 		add edi, edx
  9109 00006B7F 83C610              <2> 		add esi, 16
  9110 00006B82 81FE[9CDF2B00]      <2> 		cmp esi, mcolorend
  9111 00006B88 72DD                <2> 		jb noswmsy2
  9112 00006B8A C3                  <2> 		ret
  9113                              <2> 		
  9114                              <1> %include "source/gui/icon.asm"
  9115 00006B8B 0000                <2> iconcolor dw 0
  9116                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9117 00006B8D A2[80840000]        <2> 		mov [iconselected], al
  9118 00006B92 8025[80840000]01    <2> 		and byte [iconselected], 1
  9119 00006B99 B401                <2> 		mov ah, 1
  9120 00006B9B E8F9150000          <2> 		call graphicsadd
  9121                              <2> 	showicon2:
  9122 00006BA0 8B3D[1A550000]      <2> 		mov edi, [physbaseptr]
  9123 00006BA6 6601D2              <2> 		add dx, dx
  9124 00006BA9 663B15[F2550000]    <2> 		cmp dx, [resolutionx2]
  9125 00006BB0 720B                <2> 		jb screenxgood
  9126 00006BB2 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  9127 00006BB9 6683EA40            <2> 		sub dx, 64
  9128                              <2> 	screenxgood:
  9129 00006BBD 6683F900            <2> 		cmp cx, 0
  9130 00006BC1 742A                <2> 		je noscreenygoodchk
  9131 00006BC3 663B0D[06550000]    <2> 		cmp cx, [resolutiony]
  9132 00006BCA 720B                <2> 		jb screenygood
  9133 00006BCC 668B0D[06550000]    <2> 		mov cx, [resolutiony]
  9134 00006BD3 6683E920            <2> 		sub cx, 32
  9135                              <2> 	screenygood:
  9136 00006BD7 50                  <2> 		push eax
  9137 00006BD8 52                  <2> 		push edx
  9138 00006BD9 31C0                <2> 		xor eax, eax
  9139 00006BDB 31DB                <2> 		xor ebx, ebx
  9140 00006BDD 668B1D[F2550000]    <2> 		mov bx, [resolutionx2]
  9141 00006BE4 6689C8              <2> 		mov ax, cx
  9142 00006BE7 F7E3                <2> 		mul ebx
  9143 00006BE9 01C7                <2> 		add edi, eax
  9144 00006BEB 5A                  <2> 		pop edx
  9145 00006BEC 58                  <2> 		pop eax
  9146                              <2> 	noscreenygoodchk:
  9147 00006BED 31DB                <2> 		xor ebx, ebx
  9148 00006BEF 6689D3              <2> 		mov bx, dx
  9149 00006BF2 01DF                <2> 		add edi, ebx
  9150 00006BF4 6631C9              <2> 		xor cx, cx
  9151 00006BF7 668B06              <2> 		mov ax, [esi]
  9152 00006BFA 83C602              <2> 		add esi, 2
  9153 00006BFD 66A3[8B6B0000]      <2> 		mov [iconcolor], ax
  9154                              <2> 	writeicon:
  9155 00006C03 8B06                <2> 		mov eax, [esi]
  9156 00006C05 D1C0                <2> 		rol eax, 1
  9157 00006C07 30C9                <2> 		xor cl, cl
  9158                              <2> 	writeiconline:
  9159 00006C09 B201                <2> 		mov dl, 1
  9160 00006C0B 20C2                <2> 		and dl, al
  9161 00006C0D 3215[80840000]      <2> 		xor dl, [iconselected]
  9162 00006C13 668B1D[E36D0000]    <2> 		mov bx, [background]
  9163 00006C1A 66891F              <2> 		mov [edi], bx
  9164 00006C1D 80FA00              <2> 		cmp dl, 0
  9165 00006C20 740A                <2> 		je noiconline
  9166 00006C22 668B15[8B6B0000]    <2> 		mov dx, [iconcolor]
  9167 00006C29 668917              <2> 		mov [edi], dx
  9168                              <2> 	noiconline:
  9169 00006C2C 83C702              <2> 		add edi, 2
  9170 00006C2F D1C0                <2> 		rol eax, 1
  9171 00006C31 FEC1                <2> 		inc cl
  9172 00006C33 80F920              <2> 		cmp cl, 32
  9173 00006C36 72D1                <2> 		jb writeiconline
  9174 00006C38 83C604              <2> 		add esi, 4
  9175 00006C3B FEC5                <2> 		inc ch
  9176 00006C3D 31D2                <2> 		xor edx, edx
  9177 00006C3F 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  9178 00006C46 01D7                <2> 		add edi, edx
  9179 00006C48 83EF40              <2> 		sub edi, 64
  9180 00006C4B 80FD20              <2> 		cmp ch, 32
  9181 00006C4E 72B3                <2> 		jb writeicon
  9182 00006C50 31C0                <2> 		xor eax, eax
  9183 00006C52 C3                  <2> 		ret
  9184                              <1> %include "source/gui/line.asm"
  9185                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9186 00006C53 668935[5C6D0000]    <2> 	mov [.color], si
  9187 00006C5A C605[5E6D0000]00    <2> 	mov byte [.steep], 0
  9188 00006C61 C605[5F6D0000]00    <2> 	mov byte [.yreversed], 0
  9189 00006C68 EB07                <2> 	jmp .notsteep
  9190                              <2> .steeploop:
  9191 00006C6A C605[5E6D0000]01    <2> 	mov byte [.steep], 1
  9192                              <2> .notsteep:
  9193 00006C71 31FF                <2> 	xor edi, edi
  9194 00006C73 31F6                <2> 	xor esi, esi
  9195 00006C75 6639DA              <2> 	cmp dx, bx
  9196 00006C78 7705                <2> 	ja .noreversex
  9197 00006C7A 6687D3              <2> 	xchg dx, bx
  9198 00006C7D 6691                <2> 	xchg cx, ax
  9199                              <2> .noreversex:
  9200 00006C7F 6689D7              <2> 	mov di, dx
  9201 00006C82 6629DF              <2> 	sub di, bx
  9202                              <2> 	
  9203 00006C85 6639C1              <2> 	cmp cx, ax
  9204 00006C88 7208                <2> 	jb .reversey
  9205 00006C8A 6689CE              <2> 	mov si, cx
  9206 00006C8D 6629C6              <2> 	sub si, ax
  9207 00006C90 EB0D                <2> 	jmp .normal
  9208                              <2> .reversey:
  9209 00006C92 C605[5F6D0000]02    <2> 	mov byte [.yreversed], 2
  9210 00006C99 6689C6              <2> 	mov si, ax
  9211 00006C9C 6629CE              <2> 	sub si, cx	
  9212                              <2> .normal:
  9213 00006C9F 6687CA              <2> 	xchg cx, dx
  9214 00006CA2 6693                <2> 	xchg ax, bx
  9215 00006CA4 6639FE              <2> 	cmp si, di
  9216 00006CA7 77C1                <2> 	ja .steeploop
  9217 00006CA9 6687CA              <2> 	xchg cx, dx
  9218 00006CAC 6693                <2> 	xchg ax, bx
  9219                              <2> 	
  9220 00006CAE 6691                <2> 	xchg ax, cx
  9221 00006CB0 6687DA              <2> 	xchg bx, dx
  9222 00006CB3 66893D[626D0000]    <2> 	mov [.xdelta], di
  9223 00006CBA 668935[646D0000]    <2> 	mov [.ydelta], si
  9224 00006CC1 668B35[5C6D0000]    <2> 	mov si, [.color]
  9225 00006CC8 66891D[606D0000]    <2> 	mov [.endline], bx
  9226 00006CCF 6652                <2> 	push dx
  9227 00006CD1 6651                <2> 	push cx
  9228 00006CD3 6687CA              <2> 	xchg cx, dx
  9229 00006CD6 803D[5E6D0000]01    <2> 	cmp byte [.steep], 1
  9230 00006CDD 7403                <2> 	je .xchg
  9231 00006CDF 6687D1              <2> 	xchg dx, cx
  9232                              <2> .xchg:
  9233 00006CE2 E871170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9234 00006CE7 6659                <2> 	pop cx
  9235 00006CE9 665A                <2> 	pop dx
  9236 00006CEB 31C0                <2> 	xor eax, eax
  9237 00006CED 66A1[626D0000]      <2> 	mov ax, [.xdelta]
  9238 00006CF3 66D1E8              <2> 	shr ax, 1
  9239 00006CF6 8A0D[5E6D0000]      <2> 	mov cl, [.steep]
  9240 00006CFC 0A0D[5F6D0000]      <2> 	or cl, [.yreversed]
  9241 00006D02 55                  <2> 	push ebp
  9242 00006D03 668B2D[606D0000]    <2> 	mov bp, [.endline]
  9243 00006D0A 6629D5              <2> 	sub bp, dx
  9244 00006D0D 668B15[646D0000]    <2> 	mov dx, [.ydelta]
  9245                              <2> .lp:
  9246 00006D14 668937              <2> 	mov [edi], si
  9247 00006D17 6639D0              <2> 	cmp ax, dx
  9248 00006D1A 7326                <2> 	jae .noaddx
  9249 00006D1C F6C102              <2> 	test cl, 2
  9250 00006D1F 740E                <2> 	jz .nodecy
  9251 00006D21 F6C101              <2> 	test cl, 1
  9252 00006D24 7506                <2> 	jnz .steepy
  9253 00006D26 29DF                <2> 	sub edi, ebx
  9254 00006D28 29DF                <2> 	sub edi, ebx
  9255 00006D2A EB03                <2> 	jmp .nodecy
  9256                              <2> .steepy:
  9257 00006D2C 83EF04              <2> 	sub edi, 4
  9258                              <2> .nodecy:
  9259 00006D2F 660305[626D0000]    <2> 	add ax, [.xdelta]
  9260 00006D36 F6C101              <2> 	test cl, 1
  9261 00006D39 7504                <2> 	jnz .steepx
  9262 00006D3B 01DF                <2> 	add edi, ebx
  9263 00006D3D EB03                <2> 	jmp .noaddx
  9264                              <2> .steepx:
  9265 00006D3F 83C702              <2> 	add edi, 2
  9266                              <2> .noaddx:
  9267 00006D42 6629D0              <2> 	sub ax, dx
  9268 00006D45 664D                <2> 	dec bp
  9269 00006D47 83C702              <2> 	add edi, 2
  9270 00006D4A F6C101              <2> 	test cl, 1
  9271 00006D4D 7405                <2> 	jz .nosteepx
  9272 00006D4F 83EF02              <2> 	sub edi, 2
  9273 00006D52 01DF                <2> 	add edi, ebx
  9274                              <2> .nosteepx:
  9275 00006D54 6683FD00            <2> 	cmp bp, 0
  9276 00006D58 75BA                <2> 	jne .lp
  9277                              <2> .done:
  9278 00006D5A 5D                  <2> 	pop ebp
  9279 00006D5B C3                  <2> 	ret
  9280                              <2> 	
  9281 00006D5C 0000                <2> .color dw 0
  9282 00006D5E 00                  <2> .steep db 0
  9283 00006D5F 00                  <2> .yreversed db 0
  9284 00006D60 0000                <2> .endline dw 0
  9285 00006D62 0000                <2> .xdelta dw 0
  9286 00006D64 0000                <2> .ydelta dw 0
  9287                              <1> %include "source/gui/refresh.asm"
  9288                              <2> guiclear:
  9289 00006D66 8B3D[1A550000]      <2> 	mov edi, [physbaseptr]
  9290 00006D6C 668B15[04550000]    <2> 	mov dx, [resolutionx]
  9291 00006D73 668B0D[06550000]    <2> 	mov cx, [resolutiony]
  9292 00006D7A 668B1D[E36D0000]    <2> 	mov bx, [background]
  9293 00006D81 66891D[E56D0000]    <2> 	mov [background + 2], bx
  9294                              <2> %ifdef gui.background
  9295 00006D88 833D[BB6D0000]00    <2> 	cmp dword [backgroundimage], 0
  9296 00006D8F 742E                <2> 	je guiclear.noback
  9297 00006D91 8B35[BB6D0000]      <2> 		mov esi, [backgroundimage]
  9298                              <2> 	.lp:
  9299                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9300                              <2> 		;movdqa [edi], xmm0
  9301                              <2> 		;add esi, 16
  9302                              <2> 		;add edi, 16
  9303                              <2> 		;sub dx, 8
  9304 00006D97 8B06                <2> 		mov eax, [esi]
  9305 00006D99 8907                <2> 		mov [edi], eax
  9306 00006D9B 83C604              <2> 		add esi, 4
  9307 00006D9E 83C704              <2> 		add edi, 4
  9308 00006DA1 6683EA02            <2> 		sub dx, 2
  9309 00006DA5 6683FA00            <2> 		cmp dx, 0
  9310 00006DA9 77EC                <2> 		ja .lp
  9311 00006DAB 6649                <2> 		dec cx
  9312 00006DAD 668B15[04550000]    <2> 		mov dx, [resolutionx]
  9313 00006DB4 6683F900            <2> 		cmp cx, 0
  9314 00006DB8 77DD                <2> 		ja .lp
  9315 00006DBA C3                  <2> 		ret
  9316 00006DBB 00000000            <2> 	backgroundimage dd 0
  9317                              <2> %endif
  9318                              <2> guiclear.noback:
  9319 00006DBF A1[E36D0000]        <2> 	mov eax, [background]
  9320                              <2> guiclearloop:
  9321 00006DC4 8907                <2> 	mov [edi], eax
  9322 00006DC6 83C704              <2> 	add edi, 4
  9323 00006DC9 6683EA02            <2> 	sub dx, 2
  9324 00006DCD 6683FA00            <2> 	cmp dx, 0
  9325 00006DD1 77F1                <2> 	ja guiclearloop
  9326 00006DD3 6649                <2> 	dec cx
  9327 00006DD5 668B15[04550000]    <2> 	mov dx, [resolutionx]
  9328 00006DDC 6683F900            <2> 	cmp cx, 0
  9329 00006DE0 77E2                <2> 	ja guiclearloop
  9330 00006DE2 C3                  <2> 	ret
  9331                              <2> 
  9332 00006DE3 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9333                              <2> 	.original equ 0111101111001111b
  9334                              <2> 
  9335                              <2> reloadallgraphics:
  9336 00006DE7 BF[9CC80300]        <2> 		mov edi, graphicstable
  9337                              <2> reloadgraphicsloop:
  9338 00006DEC 8B7702              <2> 		mov esi, [edi + 2]
  9339 00006DEF 668B5706            <2> 		mov dx, [edi + 6]
  9340 00006DF3 668B4F08            <2> 		mov cx, [edi + 8]
  9341 00006DF7 668B07              <2> 		mov ax, [edi]
  9342 00006DFA 668B5F0A            <2> 		mov bx, [edi + 10]
  9343 00006DFE 893D[85810000]      <2> 		mov [grpctblpos], edi
  9344 00006E04 3B3D[577C0000]      <2> 		cmp edi, [dragging]
  9345 00006E0A 741E                <2> 		je loadedgraphic
  9346 00006E0C 6683F801            <2> 		cmp ax, 1
  9347 00006E10 0F8433000000        <2> 		je near icongraphic
  9348 00006E16 6683F802            <2> 		cmp ax, 2
  9349 00006E1A 0F8439000000        <2> 		je near stringgraphic
  9350 00006E20 6683F803            <2> 		cmp ax, 3
  9351 00006E24 0F8413000000        <2> 		je near windowgraphic
  9352 00006E2A 8B3D[85810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9353 00006E30 83C710              <2> 		add edi, 16
  9354 00006E33 81FF[9CCA0300]      <2> 		cmp edi, graphicstableend
  9355 00006E39 732E                <2> 		jae donereloadgraphics
  9356 00006E3B EBAF                <2> 		jmp reloadgraphicsloop
  9357                              <2> windowgraphic:
  9358 00006E3D E80B090000          <2> 		call showwindow2
  9359 00006E42 E898AFFFFF          <2> 		call cleardouble
  9360 00006E47 EBE1                <2> 		jmp loadedgraphic
  9361 00006E49 80E301              <2> icongraphic:	and bl, 1
  9362 00006E4C 881D[80840000]      <2> 		mov [iconselected], bl
  9363 00006E52 E849FDFFFF          <2> 		call showicon2
  9364 00006E57 EBD1                <2> 		jmp loadedgraphic
  9365 00006E59 80E301              <2> stringgraphic:  and bl, 1
  9366 00006E5C 881D[537C0000]      <2> 		mov [mouseselecton], bl
  9367 00006E62 E8C6050000          <2> 		call showstring2
  9368 00006E67 EBC1                <2> 		jmp loadedgraphic
  9369                              <2> donereloadgraphics:
  9370 00006E69 8B3D[577C0000]      <2> 		mov edi, [dragging]
  9371 00006E6F 81FF[9CC80300]      <2> 		cmp edi, graphicstable
  9372 00006E75 7226                <2> 		jb notcorrectdrag
  9373 00006E77 668B07              <2> 		mov ax, [edi]
  9374 00006E7A 8B7702              <2> 		mov esi, [edi + 2]
  9375 00006E7D 668B5706            <2> 		mov dx, [edi + 6]
  9376 00006E81 668B4F08            <2> 		mov cx, [edi + 8]
  9377 00006E85 668B5F0A            <2> 		mov bx, [edi + 10]
  9378 00006E89 6683F801            <2> 		cmp ax, 1
  9379 00006E8D 750F                <2> 		jne noticondragging
  9380 00006E8F 80E301              <2> 		and bl, 1
  9381 00006E92 881D[80840000]      <2> 		mov [iconselected], bl
  9382 00006E98 E803FDFFFF          <2> 		call showicon2
  9383                              <2> notcorrectdrag:
  9384 00006E9D C3                  <2> 		ret
  9385                              <2> 
  9386                              <2> 	noticondragging:
  9387 00006E9E 6683F802            <2> 		cmp ax, 2
  9388 00006EA2 75F9                <2> 		jne notcorrectdrag
  9389 00006EA4 80E301              <2> 		and bl, 1
  9390 00006EA7 881D[537C0000]      <2> 		mov [mouseselecton], bl
  9391 00006EAD E87B050000          <2> 		call showstring2
  9392 00006EB2 EBE9                <2> 		jmp notcorrectdrag
  9393                              <1> %include "source/gui/square.asm"
  9394                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9395 00006EB4 6639D3              <2> 	cmp bx, dx
  9396 00006EB7 7303                <2> 	jae .noxchgx
  9397 00006EB9 6687DA              <2> 	xchg bx, dx
  9398                              <2> .noxchgx:
  9399 00006EBC 6639C8              <2> 	cmp ax, cx
  9400 00006EBF 7302                <2> 	jae .noxchgy
  9401 00006EC1 6691                <2> 	xchg ax, cx
  9402                              <2> .noxchgy:
  9403 00006EC3 6650                <2> 	push ax
  9404 00006EC5 6653                <2> 	push bx
  9405 00006EC7 6652                <2> 	push dx
  9406 00006EC9 E88A150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9407 00006ECE 31D2                <2> 	xor edx, edx
  9408 00006ED0 665A                <2> 	pop dx
  9409 00006ED2 31DB                <2> 	xor ebx, ebx
  9410 00006ED4 665B                <2> 	pop bx
  9411 00006ED6 6658                <2> 	pop ax
  9412                              <2> .lp0:
  9413 00006ED8 6652                <2> 	push dx
  9414                              <2> .lp:
  9415 00006EDA 668937              <2> 	mov [edi], si
  9416 00006EDD 83C702              <2> 	add edi, 2
  9417 00006EE0 6642                <2> 	inc dx
  9418 00006EE2 6639DA              <2> 	cmp dx, bx
  9419 00006EE5 76F3                <2> 	jbe .lp
  9420 00006EE7 665A                <2> 	pop dx
  9421 00006EE9 83EF02              <2> 	sub edi, 2
  9422 00006EEC 29DF                <2> 	sub edi, ebx
  9423 00006EEE 29DF                <2> 	sub edi, ebx
  9424 00006EF0 01D7                <2> 	add edi, edx
  9425 00006EF2 01D7                <2> 	add edi, edx
  9426 00006EF4 033D[F2550000]      <2> 	add edi, [resolutionx2]
  9427 00006EFA 6641                <2> 	inc cx
  9428 00006EFC 6639C1              <2> 	cmp cx, ax
  9429 00006EFF 7203                <2> 	jb .lp2
  9430 00006F01 74D5                <2> 	je .lp0
  9431 00006F03 C3                  <2> 	ret
  9432                              <2> .lp2:
  9433 00006F04 57                  <2> 	push edi
  9434 00006F05 668937              <2> 	mov [edi], si
  9435 00006F08 29D7                <2> 	sub edi, edx
  9436 00006F0A 29D7                <2> 	sub edi, edx
  9437 00006F0C 01DF                <2> 	add edi, ebx
  9438 00006F0E 01DF                <2> 	add edi, ebx
  9439 00006F10 668937              <2> 	mov [edi], si
  9440 00006F13 5F                  <2> 	pop edi
  9441 00006F14 033D[F2550000]      <2> 	add edi, [resolutionx2]
  9442 00006F1A 6641                <2> 	inc cx
  9443 00006F1C 6639C1              <2> 	cmp cx, ax
  9444 00006F1F 72E3                <2> 	jb .lp2
  9445 00006F21 EBB5                <2> 	jmp .lp0
  9446                              <2> 
  9447                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9448 00006F23 6639D3              <2> 	cmp bx, dx
  9449 00006F26 7303                <2> 	jae .noxchgx
  9450 00006F28 6687DA              <2> 	xchg bx, dx
  9451                              <2> .noxchgx:
  9452 00006F2B 6639C8              <2> 	cmp ax, cx
  9453 00006F2E 7302                <2> 	jae .noxchgy
  9454 00006F30 6691                <2> 	xchg ax, cx
  9455                              <2> .noxchgy:
  9456 00006F32 6650                <2> 	push ax
  9457 00006F34 6653                <2> 	push bx
  9458 00006F36 6652                <2> 	push dx
  9459 00006F38 E81B150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9460 00006F3D 31D2                <2> 	xor edx, edx
  9461 00006F3F 665A                <2> 	pop dx
  9462 00006F41 31DB                <2> 	xor ebx, ebx
  9463 00006F43 665B                <2> 	pop bx
  9464 00006F45 6658                <2> 	pop ax
  9465                              <2> .lp2:
  9466 00006F47 6652                <2> 	push dx
  9467                              <2> .lp:
  9468 00006F49 668937              <2> 	mov [edi], si
  9469 00006F4C 83C702              <2> 	add edi, 2
  9470 00006F4F 6642                <2> 	inc dx
  9471 00006F51 6639DA              <2> 	cmp dx, bx
  9472 00006F54 76F3                <2> 	jbe .lp
  9473 00006F56 665A                <2> 	pop dx
  9474 00006F58 83EF02              <2> 	sub edi, 2
  9475 00006F5B 29DF                <2> 	sub edi, ebx
  9476 00006F5D 29DF                <2> 	sub edi, ebx
  9477 00006F5F 01D7                <2> 	add edi, edx
  9478 00006F61 01D7                <2> 	add edi, edx
  9479 00006F63 033D[F2550000]      <2> 	add edi, [resolutionx2]
  9480 00006F69 6641                <2> 	inc cx
  9481 00006F6B 6639C1              <2> 	cmp cx, ax
  9482 00006F6E 76D7                <2> 	jbe .lp2
  9483 00006F70 C3                  <2> 	ret
  9484                              <1> %include "source/gui/startup.asm"
  9485                              <2> guisetup:
  9486                              <2> 	%ifdef gui.background
  9487 00006F71 31DB                <2> 	xor ebx, ebx
  9488 00006F73 891D[BB6D0000]      <2> 	mov [backgroundimage], ebx
  9489                              <2> 	%endif
  9490 00006F79 E8E8FDFFFF          <2> 	call guiclear
  9491 00006F7E C605[E7840000]01    <2> 	mov byte [guion], 1
  9492 00006F85 C605[537C0000]00    <2> 	mov byte [mouseselecton], 0
  9493 00006F8C 31C0                <2> 	xor eax, eax
  9494 00006F8E 31DB                <2> 	xor ebx, ebx
  9495 00006F90 31C9                <2> 	xor ecx, ecx
  9496 00006F92 31D2                <2> 	xor edx, edx
  9497                              <2> 	
  9498 00006F94 BE[52710000]        <2> 	mov esi, pacmsg
  9499 00006F99 30E4                <2> 	xor ah, ah
  9500 00006F9B B010                <2> 	mov al, 00010000b
  9501 00006F9D 31DB                <2> 	xor ebx, ebx
  9502 00006F9F 66B99000            <2> 	mov cx, 144
  9503 00006FA3 66BA0400            <2> 	mov dx, 4
  9504 00006FA7 E86E040000          <2> 	call showstring
  9505                              <2> 	
  9506 00006FAC BE[90710000]        <2> 	mov esi, interneticon
  9507 00006FB1 30E4                <2> 	xor ah, ah
  9508 00006FB3 B010                <2> 	mov al, 00010000b
  9509 00006FB5 BB[7E700000]        <2> 	mov ebx, noie
  9510 00006FBA 66B91800            <2> 	mov cx, 24
  9511 00006FBE 66BA0400            <2> 	mov dx, 4
  9512 00006FC2 E8C6FBFFFF          <2> 	call showicon
  9513                              <2> 	
  9514 00006FC7 BE[12720000]        <2> 	mov esi, wordicon
  9515 00006FCC 30E4                <2> 	xor ah, ah
  9516 00006FCE B010                <2> 	mov al, 00010000b
  9517 00006FD0 31DB                <2> 	xor ebx, ebx
  9518 00006FD2 66B91800            <2> 	mov cx, 24
  9519 00006FD6 66BA3000            <2> 	mov dx, 48
  9520 00006FDA E8AEFBFFFF          <2> 	call showicon
  9521                              <2> 	
  9522 00006FDF BE[94720000]        <2> 	mov esi, pacmanpellet
  9523 00006FE4 30E4                <2> 	xor ah, ah
  9524 00006FE6 B010                <2> 	mov al, 00010000b
  9525 00006FE8 31DB                <2> 	xor ebx, ebx
  9526 00006FEA 66B94000            <2> 	mov cx, 64
  9527 00006FEE 66BA0400            <2> 	mov dx, 4
  9528 00006FF2 E896FBFFFF          <2> 	call showicon
  9529                              <2> 	
  9530 00006FF7 BE[98730000]        <2> 	mov esi, pacman
  9531 00006FFC 30E4                <2> 	xor ah, ah
  9532 00006FFE B010                <2> 	mov al, 00010000b
  9533 00007000 BB[67700000]        <2> 	mov ebx, pacmannomnom
  9534 00007005 66B94000            <2> 	mov cx, 64
  9535 00007009 66BA3000            <2> 	mov dx, 48
  9536 0000700D E87BFBFFFF          <2> 	call showicon
  9537                              <2> 	
  9538 00007012 BE[16730000]        <2> 	mov esi, ghostie
  9539 00007017 30E4                <2> 	xor ah, ah
  9540 00007019 B010                <2> 	mov al, 00010000b
  9541 0000701B BB[50700000]        <2> 	mov ebx, boo
  9542 00007020 66B96C00            <2> 	mov cx, 108
  9543 00007024 66BA0400            <2> 	mov dx, 4
  9544 00007028 E860FBFFFF          <2> 	call showicon
  9545                              <2> 	
  9546 0000702D BE[34710000]        <2> 	mov esi, start
  9547 00007032 668B0D[06550000]    <2> 	mov cx, [resolutiony]
  9548 00007039 6683E910            <2> 	sub cx, 16
  9549 0000703D 66BA0200            <2> 	mov dx, 2
  9550 00007041 30E4                <2> 	xor ah, ah
  9551 00007043 B010                <2> 	mov al, 00010000b
  9552 00007045 BB[F2700000]        <2> 	mov ebx, winblows
  9553 0000704A E8CB030000          <2> 	call showstring
  9554                              <2> 
  9555                              <2> %ifdef gui.time	
  9556                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9557                              <2> %endif
  9558 0000704F C3                  <2> 	ret
  9559                              <2> 
  9560                              <2> 	boo:
  9561 00007050 BE[4D710000]        <2> 		mov esi, boomsg
  9562 00007055 66BA6400            <2> 		mov dx, 100
  9563 00007059 66B94001            <2> 		mov cx, 320
  9564 0000705D 31DB                <2> 		xor ebx, ebx
  9565 0000705F 6631C0              <2> 		xor ax, ax
  9566 00007062 E9B3030000          <2> 		jmp showstring
  9567                              <2> 
  9568                              <2> 	pacmannomnom:
  9569 00007067 BE[6B710000]        <2> 		mov esi, pacnom
  9570 0000706C 66BA8200            <2> 		mov dx, 130
  9571 00007070 66B93C00            <2> 		mov cx, 60
  9572 00007074 31DB                <2> 		xor ebx, ebx
  9573 00007076 6631C0              <2> 		xor ax, ax
  9574 00007079 E99C030000          <2> 		jmp showstring	
  9575                              <2> 	
  9576                              <2> 	noie:
  9577 0000707E 66C705[7A710000]80- <2> 		mov word [termwindow], 640
  9578 00007086 02                  <2>
  9579 00007087 66C705[7C710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9580 0000708F 01                  <2>
  9581 00007090 BE[7A710000]        <2> 		mov esi, termwindow
  9582 00007095 66BA1000            <2> 		mov dx, 16
  9583 00007099 66B91000            <2> 		mov cx, 16
  9584 0000709D 31DB                <2> 		xor ebx, ebx
  9585 0000709F 6631C0              <2> 		xor ax, ax
  9586 000070A2 E8F1050000          <2> 		call showwindow
  9587 000070A7 E9F2B9FFFF          <2> 		jmp os
  9588                              <2> 
  9589                              <2> 	gotomenuboot:
  9590 000070AC 31D2                <2> 		xor edx, edx
  9591 000070AE 31C9                <2> 		xor ecx, ecx
  9592 000070B0 668B15[04550000]    <2> 		mov dx, [resolutionx]
  9593 000070B7 668B0D[06550000]    <2> 		mov cx, [resolutiony]
  9594 000070BE 66C1E904            <2> 		shr cx, 4
  9595 000070C2 6683E901            <2> 		sub cx, 1
  9596 000070C6 66C1E104            <2> 		shl cx, 4
  9597 000070CA 668915[7A710000]    <2> 		mov [termwindow], dx
  9598 000070D1 66890D[7C710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9599 000070D8 BE[7A710000]        <2> 		mov esi, termwindow
  9600 000070DD 6631D2              <2> 		xor dx, dx
  9601 000070E0 6631C9              <2> 		xor cx, cx
  9602 000070E3 31DB                <2> 		xor ebx, ebx
  9603 000070E5 6631C0              <2> 		xor ax, ax
  9604 000070E8 E8AB050000          <2> 		call showwindow
  9605 000070ED E9ACB9FFFF          <2> 		jmp os
  9606                              <2> 
  9607                              <2> 	winblows:
  9608 000070F2 BE[43710000]        <2> 		mov esi, turnoffmsg
  9609 000070F7 BB[76500000]        <2> 		mov ebx, turnoff
  9610 000070FC 668B0D[06550000]    <2> 		mov cx, [resolutiony]
  9611 00007103 6683E920            <2> 		sub cx, 32
  9612 00007107 6631D2              <2> 		xor dx, dx
  9613 0000710A 30E4                <2> 		xor ah, ah
  9614 0000710C B010                <2> 		mov al, 00010000b
  9615 0000710E E807030000          <2> 		call showstring
  9616 00007113 BE[3A710000]        <2> 		mov esi, gotomenu
  9617 00007118 668B0D[06550000]    <2> 		mov cx, [resolutiony]
  9618 0000711F 6683E930            <2> 		sub cx, 48
  9619 00007123 6631D2              <2> 		xor dx, dx
  9620 00007126 30E4                <2> 		xor ah, ah
  9621 00007128 B010                <2> 		mov al, 00010000b
  9622 0000712A BB[AC700000]        <2> 		mov ebx, gotomenuboot
  9623 0000712F E9E6020000          <2> 		jmp showstring
  9624                              <2> 		
  9625                              <2> 
  9626 00007134 737461727400        <2> 	start	db "start",0
  9627 0000713A 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9628 00007143 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9629 0000714C 00                  <2>
  9630 0000714D 426F6F2100          <2> 	boomsg db "Boo!",0
  9631 00007152 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9632 0000715B 73206561737920746F- <2>
  9633 00007164 20647261772E00      <2>
  9634 0000716B 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9635 00007174 6D206E6F6D00        <2>
  9636                              <2> 
  9637 0000717A 20035802            <2> 	termwindow:	dw 800,600	;window size
  9638 0000717E FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9639 00007182 [9CDF2B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9640 00007186 [E4B42C00]          <2>
  9641 0000718A 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9642                              <2> 	
  9643 00007190 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9644 00007212 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9645 00007294 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9646 00007316 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9647 00007398 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9648                              <2> 
  9649                              <2> %ifdef gui.time
  9650                              <2> guitime:
  9651                              <2> 		call time	;get rtc in timeshow & dateshow
  9652                              <2> 		xor ebx, ebx
  9653                              <2> 		mov dx, [resolutionx2]
  9654                              <2> 		xor cx, cx
  9655                              <2> 		sub dx, 304
  9656                              <2> 		mov esi, dateshow
  9657                              <2> 		mov al, 00010001b
  9658                              <2> 		call showstring
  9659                              <2> 		mov esi, timeshow
  9660                              <2> 		xor ebx, ebx
  9661                              <2> 		mov al, 00010001b
  9662                              <2> 		call showstring
  9663                              <2> 		ret
  9664                              <2> %endif
  9665                              <1> %include "source/gui/text.asm"
  9666                              <2> 	showstring:
  9667 0000741A A2[537C0000]        <2> 		mov [mouseselecton], al
  9668 0000741F 8025[537C0000]01    <2> 		and byte [mouseselecton], 1
  9669 00007426 B402                <2> 		mov ah, 2
  9670 00007428 E86C0D0000          <2> 		call graphicsadd
  9671                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9672 0000742D 30E4                <2> 		xor ah, ah
  9673 0000742F 8A06                <2> 		mov al, [esi]
  9674 00007431 3CFF                <2> 		cmp al, 0xFF
  9675 00007433 7503                <2> 		jne .notnull
  9676 00007435 46                  <2> 		inc esi
  9677 00007436 EBF5                <2> 		jmp showstring2
  9678                              <2> .notnull:
  9679 00007438 3CC0                <2> 		cmp al, 0xC0
  9680 0000743A 7231                <2> 		jb .doneutf
  9681 0000743C 3CE0                <2> 		cmp al, 0xE0
  9682 0000743E 721A                <2> 		jb .two
  9683 00007440 46                  <2> 		inc esi
  9684 00007441 668B1E              <2> 		mov bx, [esi]
  9685 00007444 46                  <2> 		inc esi
  9686 00007445 C0E004              <2> 		shl al, 4
  9687 00007448 66C1E302            <2> 		shl bx, 2
  9688 0000744C C0EF02              <2> 		shr bh, 2
  9689 0000744F 66C1EB02            <2> 		shr bx, 2
  9690 00007453 08C7                <2> 		or bh, al
  9691 00007455 6689D8              <2> 		mov ax, bx
  9692 00007458 EB13                <2> 		jmp .doneutf
  9693                              <2> 	.two:
  9694 0000745A 8A3E                <2> 		mov bh, [esi]
  9695 0000745C 46                  <2> 		inc esi
  9696 0000745D 8A1E                <2> 		mov bl, [esi]
  9697 0000745F 66C1E302            <2> 		shl bx, 2
  9698 00007463 C0EF02              <2> 		shr bh, 2
  9699 00007466 66C1EB02            <2> 		shr bx, 2
  9700 0000746A 6689D8              <2> 		mov ax, bx
  9701                              <2> 	.doneutf:
  9702 0000746D 6683F800            <2> 		cmp ax, 0
  9703 00007471 741B                <2> 		je doneshowstring
  9704 00007473 46                  <2> 		inc esi
  9705 00007474 56                  <2> 		push esi
  9706 00007475 668B1D[96740000]    <2> 		mov bx, [colorfont2]
  9707 0000747C E826000000          <2> 		call showfontvesa
  9708 00007481 6683F80A            <2> 		cmp ax, 10
  9709 00007485 7404                <2> 		je noproceedshst
  9710 00007487 6683C208            <2> 		add dx, 8
  9711                              <2> 	noproceedshst:
  9712 0000748B 5E                  <2> 		pop esi
  9713 0000748C EB9F                <2> 		jmp showstring2
  9714                              <2> 	doneshowstring:
  9715 0000748E C605[537C0000]00    <2> 		mov byte [mouseselecton], 0
  9716 00007495 C3                  <2> 		ret
  9717                              <2> 
  9718 00007496 FFFF                <2> colorfont2 dw 0xFFFF
  9719 00007498 00                  <2> colorcache db 0
  9720                              <2> 
  9721 00007499 02                  <2> resolutionbytes db 2
  9722 0000749A 0000                <2> posxvesa dw 0
  9723 0000749C 0000                <2> posyvesa dw 0
  9724 0000749E FFFF                <2> colorfont dw 0xFFFF
  9725                              <2> savefontvesa:		;same rules as showfontvesa
  9726 000074A0 C605[527C0000]01    <2> 	mov byte [savefonton], 1
  9727                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9728 000074A7 663DFF00            <2> 	cmp ax, 255
  9729 000074AB 7501                <2> 	jne nostopshowfont
  9730 000074AD C3                  <2> 	ret
  9731                              <2> nostopshowfont:
  9732 000074AE 55                  <2> 	push ebp
  9733 000074AF 66890D[9C740000]    <2> 	mov [posyvesa], cx
  9734 000074B6 6683F80A            <2> 	cmp ax, 10
  9735 000074BA 0F8423000000        <2> 	je near goodvesafontx
  9736 000074C0 31C9                <2> 	xor ecx, ecx
  9737 000074C2 668B0D[F2550000]    <2> 	mov cx, [resolutionx2]
  9738 000074C9 6639CA              <2> 	cmp dx, cx
  9739 000074CC 7615                <2> 	jbe goodvesafontx
  9740 000074CE 6631D2              <2> 	xor dx, dx
  9741 000074D1 668B0D[9C740000]    <2> 	mov cx, [posyvesa]
  9742 000074D8 6683C110            <2> 	add cx, 16
  9743 000074DC 66890D[9C740000]    <2> 	mov [posyvesa], cx
  9744                              <2> goodvesafontx:
  9745 000074E3 668B0D[9C740000]    <2> 	mov cx, [posyvesa]
  9746 000074EA 668915[9A740000]    <2> 	mov [posxvesa], dx
  9747 000074F1 8B3D[1A550000]      <2> 	mov edi, [physbaseptr]
  9748 000074F7 66891D[9E740000]    <2> 	mov [colorfont], bx
  9749 000074FE 668B2D[9E740000]    <2> 	mov bp, [colorfont]
  9750 00007505 31DB                <2> 	xor ebx, ebx
  9751 00007507 6689C3              <2> 	mov bx, ax
  9752 0000750A 31C0                <2> 	xor eax, eax
  9753 0000750C 6689D8              <2> 	mov ax, bx
  9754 0000750F 6689D3              <2> 	mov bx, dx
  9755 00007512 89DA                <2> 	mov edx, ebx
  9756 00007514 31DB                <2> 	xor ebx, ebx
  9757 00007516 6683F900            <2> 	cmp cx, 0
  9758 0000751A 7414                <2> 	je vesaposloopdn
  9759 0000751C 668B1D[F2550000]    <2> 	mov bx, [resolutionx2]
  9760                              <2> vesaposloop:
  9761 00007523 52                  <2> 	push edx
  9762 00007524 50                  <2> 	push eax
  9763 00007525 31C0                <2> 	xor eax, eax
  9764 00007527 6689C8              <2> 	mov ax, cx
  9765 0000752A F7E3                <2> 	mul ebx
  9766 0000752C 01C7                <2> 	add edi, eax
  9767 0000752E 58                  <2> 	pop eax
  9768 0000752F 5A                  <2> 	pop edx
  9769                              <2> vesaposloopdn:
  9770 00007530 01D7                <2> 	add edi, edx
  9771 00007532 BE[41870000]        <2> 	mov esi, fonts
  9772                              <2> findfontvesa:
  9773 00007537 6683F80A            <2> 	cmp ax, 10
  9774 0000753B 0F84E4000000        <2> 	je near nwlinevesa
  9775 00007541 C1E004              <2> 	shl eax, 4
  9776 00007544 01C6                <2> 	add esi, eax
  9777 00007546 C1E804              <2> 	shr eax, 4
  9778 00007549 81FE[41870300]      <2> 	cmp esi, fontend
  9779 0000754F 0F83A4000000        <2> 	jae near donefontvesa
  9780 00007555 4E                  <2> 	dec esi
  9781                              <2> foundfontvesa:
  9782 00007556 46                  <2> 	inc esi
  9783 00007557 803D[527C0000]01    <2> 	cmp byte [savefonton], 1
  9784 0000755E 0F84DF000000        <2> 	je near vesafontsaver
  9785 00007564 30C9                <2> 	xor cl, cl
  9786 00007566 8A06                <2> 	mov al, [esi]
  9787 00007568 668B15[F2550000]    <2> 	mov dx, [resolutionx2]
  9788 0000756F 662B15[9A740000]    <2> 	sub dx, [posxvesa]
  9789 00007576 6683FA10            <2> 	cmp dx, 16
  9790 0000757A 7708                <2> 	ja paintfontvesa
  9791 0000757C D0EA                <2> 	shr dl, 1
  9792 0000757E 8815[24760000]      <2> 	mov [charwidth], dl
  9793                              <2> paintfontvesa:
  9794 00007584 B201                <2> 	mov dl, 1
  9795 00007586 20C2                <2> 	and dl, al
  9796 00007588 803D[517C0000]01    <2> 	cmp byte [showcursorfonton], 1
  9797 0000758F 0F842B000000        <2> 	je near nodelpaintedfont
  9798 00007595 803D[517C0000]02    <2> 	cmp byte [showcursorfonton], 2
  9799 0000759C 0F850E000000        <2> 	jne near noswitchcursorfonton
  9800 000075A2 80FA00              <2> 	cmp dl, 0
  9801 000075A5 0F841D000000        <2> 	je near nopixelset
  9802 000075AB 66892F              <2> 	mov [edi], bp
  9803 000075AE EB18                <2> 	jmp nopixelset
  9804                              <2> noswitchcursorfonton:
  9805 000075B0 3215[537C0000]      <2> 	xor dl, [mouseselecton]
  9806 000075B6 668B1D[E36D0000]    <2> 	mov bx, [background]
  9807 000075BD 66891F              <2> 	mov [edi], bx
  9808                              <2> nodelpaintedfont:
  9809 000075C0 80FA00              <2> 	cmp dl, 0
  9810 000075C3 7403                <2> 	je nopixelset
  9811 000075C5 66892F              <2> 	mov [edi], bp
  9812                              <2> nopixelset:
  9813 000075C8 83C702              <2> 	add edi, 2
  9814 000075CB D0C0                <2> 	rol al, 1
  9815 000075CD FEC1                <2> 	inc cl
  9816 000075CF 3A0D[24760000]      <2> 	cmp cl, [charwidth]
  9817 000075D5 72AD                <2> 	jb paintfontvesa
  9818 000075D7 FEC5                <2> 	inc ch
  9819 000075D9 31D2                <2> 	xor edx, edx
  9820 000075DB 668B15[F2550000]    <2> 	mov dx, [resolutionx2]
  9821 000075E2 01D7                <2> 	add edi, edx
  9822 000075E4 31D2                <2> 	xor edx, edx
  9823 000075E6 8A15[24760000]      <2> 	mov dl, [charwidth]
  9824 000075EC 00D2                <2> 	add dl, dl
  9825 000075EE 29D7                <2> 	sub edi, edx
  9826 000075F0 80FD10              <2> 	cmp ch, 16
  9827 000075F3 0F825DFFFFFF        <2> 	jb foundfontvesa
  9828                              <2> donefontvesa:
  9829 000075F9 C605[24760000]08    <2> 	mov byte [charwidth], 8
  9830 00007600 668B15[9A740000]    <2> 	mov dx, [posxvesa]
  9831 00007607 8A1D[24760000]      <2> 	mov bl, [charwidth]
  9832 0000760D 30FF                <2> 	xor bh, bh
  9833 0000760F 6601DA              <2> 	add dx, bx
  9834 00007612 6689EB              <2> 	mov bx, bp
  9835 00007615 668B0D[9C740000]    <2> 	mov cx, [posyvesa]
  9836 0000761C 883D[527C0000]      <2> 	mov [savefonton], bh
  9837 00007622 5D                  <2> 	pop ebp
  9838 00007623 C3                  <2> 	ret
  9839 00007624 08                  <2> charwidth db 8
  9840                              <2> nwlinevesa:
  9841 00007625 6631D2              <2> 	xor dx, dx
  9842 00007628 668915[9A740000]    <2> 	mov [posxvesa], dx
  9843 0000762F 668B0D[9C740000]    <2> 	mov cx, [posyvesa]
  9844 00007636 6683C110            <2> 	add cx, 16
  9845 0000763A 66890D[9C740000]    <2> 	mov [posyvesa], cx
  9846 00007641 EBB6                <2> 	jmp donefontvesa
  9847                              <2> vesafontsaver:
  9848 00007643 30C0                <2> 	xor al, al
  9849 00007645 30C9                <2> 	xor cl, cl
  9850                              <2> vesafontsaver2:
  9851 00007647 66392F              <2> 	cmp [edi], bp
  9852 0000764A 7426                <2> 	je colorfontmatch
  9853                              <2> donecolormatch:
  9854 0000764C 83C702              <2> 	add edi, 2
  9855 0000764F D0C0                <2> 	rol al, 1
  9856 00007651 FEC1                <2> 	inc cl
  9857 00007653 80F908              <2> 	cmp cl, 8
  9858 00007656 72EF                <2> 	jb vesafontsaver2
  9859 00007658 8806                <2> 	mov [esi], al
  9860 0000765A 46                  <2> 	inc esi
  9861 0000765B FEC5                <2> 	inc ch
  9862 0000765D 31D2                <2> 	xor edx, edx
  9863 0000765F 668B15[F2550000]    <2> 	mov dx, [resolutionx2]
  9864 00007666 01D7                <2> 	add edi, edx
  9865 00007668 83EF10              <2> 	sub edi, 16
  9866 0000766B 80FD10              <2> 	cmp ch, 16
  9867 0000766E 72D3                <2> 	jb vesafontsaver
  9868 00007670 EB87                <2> 	jmp donefontvesa
  9869                              <2> colorfontmatch:
  9870 00007672 0401                <2> 	add al, 1
  9871 00007674 EBD6                <2> 	jmp donecolormatch
  9872                              <1> %include "source/gui/window.asm"
  9873 00007676 0000                <2> winvcopystx dw 0
  9874 00007678 0000                <2> winvcopysty dw 0
  9875 0000767A 0000                <2> winvcopydx dw 0
  9876 0000767C 0000                <2> winvcopycx dw 0
  9877 0000767E FFFF0000            <2> windowcolor dw 0xFFFF,0
  9878 00007682 00000000            <2> windowbufloc: dd 0
  9879 00007686 00000000            <2> windowvideobuf dd 0
  9880 0000768A 00000000            <2> windowvideobuf2 dd 0
  9881 0000768E 00000000            <2> windowinfobuf dd 0
  9882 00007692 0000                <2> termcol dw 0
  9883 00007694 00000000            <2> wincopyendpos dd 0
  9884                              <2> 
  9885                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9886 00007698 C605[59230000]01    <2> 		mov byte [termguion], 1
  9887 0000769F 6683C110            <2> 		add cx, 16
  9888 000076A3 668915[76760000]    <2> 		mov [winvcopystx], dx
  9889 000076AA 66890D[78760000]    <2> 		mov [winvcopysty], cx
  9890 000076B1 8935[8E760000]      <2> 		mov [windowinfobuf], esi
  9891 000076B7 668B16              <2> 		mov dx, [esi]
  9892 000076BA 668B4E02            <2> 		mov cx, [esi + 2]
  9893 000076BE 31C0                <2> 		xor eax, eax
  9894 000076C0 31DB                <2> 		xor ebx, ebx
  9895 000076C2 6689D0              <2> 		mov ax, dx
  9896 000076C5 6689CB              <2> 		mov bx, cx
  9897 000076C8 66C1E803            <2> 		shr ax, 3
  9898 000076CC 66C1EB04            <2> 		shr bx, 4
  9899 000076D0 66A3[92760000]      <2> 		mov [termcol], ax
  9900 000076D6 A2[32250000]        <2> 		mov [charxy], al
  9901 000076DB 881D[33250000]      <2> 		mov [charxy + 1], bl
  9902 000076E1 8B7E04              <2> 		mov edi, [esi + 4]
  9903 000076E4 893D[7E760000]      <2> 		mov [windowcolor], edi
  9904 000076EA 8B7E0C              <2> 		mov edi, [esi + 12]
  9905 000076ED 893D[8A760000]      <2> 		mov [windowvideobuf2], edi
  9906 000076F3 8B7E08              <2> 		mov edi, [esi + 8]
  9907 000076F6 893D[86760000]      <2> 		mov [windowvideobuf], edi
  9908 000076FC 83FB00              <2> 		cmp ebx, 0
  9909 000076FF 0F842B050000        <2> 		je near donewincopynow
  9910                              <2> 	findendposwin:
  9911 00007705 C1E002              <2> 		shl eax, 2
  9912 00007708 31D2                <2> 		xor edx, edx
  9913 0000770A F7E3                <2> 		mul ebx
  9914 0000770C 01C7                <2> 		add edi, eax
  9915 0000770E 893D[94760000]      <2> 		mov [wincopyendpos], edi
  9916 00007714 31FF                <2> 		xor edi, edi
  9917 00007716 6631C0              <2> 		xor ax, ax
  9918 00007719 6631DB              <2> 		xor bx, bx
  9919 0000771C 6601D2              <2> 		add dx, dx
  9920 0000771F 668915[7A760000]    <2> 		mov [winvcopydx], dx
  9921 00007726 66890D[7C760000]    <2> 		mov [winvcopycx], cx
  9922 0000772D 668B0D[78760000]    <2> 		mov cx, [winvcopysty]
  9923 00007734 6683E910            <2> 		sub cx, 16
  9924 00007738 668B15[76760000]    <2> 		mov dx, [winvcopystx]
  9925 0000773F C605[5A230000]00    <2> 		mov byte [termcopyon], 0
  9926 00007746 B403                <2> 		mov ah, 3
  9927 00007748 E84C0A0000          <2> 		call graphicsadd
  9928                              <2> 	showwindow2:
  9929 0000774D 6683C110            <2> 		add cx, 16
  9930 00007751 668915[76760000]    <2> 		mov [winvcopystx], dx
  9931 00007758 66890D[78760000]    <2> 		mov [winvcopysty], cx
  9932 0000775F 668B16              <2> 		mov dx, [esi]
  9933 00007762 668B4E02            <2> 		mov cx, [esi + 2]
  9934 00007766 6601D2              <2> 		add dx, dx
  9935 00007769 668915[7A760000]    <2> 		mov [winvcopydx], dx
  9936 00007770 66890D[7C760000]    <2> 		mov [winvcopycx], cx
  9937 00007777 E818000000          <2> 		call reloadwindowtitle
  9938 0000777C 803D[80810000]01    <2> 		cmp byte [windrag], 1
  9939 00007783 0F83B6040000        <2> 		jae near forgetresetstuff
  9940 00007789 8B3D[82760000]      <2> 		mov edi, [windowbufloc]
  9941 0000778F E957020000          <2> 		jmp windowvideocopyset
  9942                              <2> 		
  9943                              <2> 	reloadwindowtitle:
  9944 00007794 8B3D[82760000]      <2> 		mov edi, [windowbufloc]
  9945 0000779A 31D2                <2> 		xor edx, edx
  9946 0000779C 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  9947 000077A3 C1E204              <2> 		shl edx, 4
  9948 000077A6 29D7                <2> 		sub edi, edx
  9949 000077A8 803D[5A230000]00    <2> 		cmp byte [termcopyon], 0
  9950 000077AF 7530                <2> 		jne nocleartitlebarpos
  9951 000077B1 8B3D[1A550000]      <2> 		mov edi, [physbaseptr]
  9952 000077B7 31D2                <2> 		xor edx, edx
  9953 000077B9 668B15[76760000]    <2> 		mov dx, [winvcopystx]
  9954 000077C0 01D7                <2> 		add edi, edx
  9955 000077C2 31C9                <2> 		xor ecx, ecx
  9956 000077C4 668B0D[78760000]    <2> 		mov cx, [winvcopysty]
  9957 000077CB 6683E910            <2> 		sub cx, 16
  9958 000077CF 6683F900            <2> 		cmp cx, 0
  9959 000077D3 740C                <2> 		je nocleartitlebarpos
  9960                              <2> 	cleartitlebarpos:
  9961 000077D5 31C0                <2> 		xor eax, eax
  9962 000077D7 66A1[F2550000]      <2> 		mov ax, [resolutionx2]
  9963 000077DD F7E1                <2> 		mul ecx
  9964 000077DF 01C7                <2> 		add edi, eax
  9965                              <2> 	nocleartitlebarpos:
  9966 000077E1 66B91000            <2> 		mov cx, 16
  9967 000077E5 668B15[7A760000]    <2> 		mov dx, [winvcopydx]
  9968 000077EC 6683F900            <2> 		cmp cx, 0
  9969 000077F0 0F8441000000        <2> 		je near canceltitlebarput
  9970 000077F6 6683FA00            <2> 		cmp dx, 0
  9971 000077FA 0F8437000000        <2> 		je near canceltitlebarput
  9972                              <2> 	titlebarput:
  9973 00007800 66A1[7E760000]      <2> 		mov ax, [windowcolor]
  9974 00007806 668907              <2> 		mov [edi], ax
  9975 00007809 6683EA02            <2> 		sub dx, 2
  9976 0000780D 83C702              <2> 		add edi, 2
  9977 00007810 6683FA00            <2> 		cmp dx, 0
  9978 00007814 75EA                <2> 		jne titlebarput
  9979 00007816 31D2                <2> 		xor edx, edx
  9980 00007818 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
  9981 0000781F 6649                <2> 		dec cx
  9982 00007821 662B15[7A760000]    <2> 		sub dx, [winvcopydx]
  9983 00007828 01D7                <2> 		add edi, edx
  9984 0000782A 668B15[7A760000]    <2> 		mov dx, [winvcopydx]
  9985 00007831 6683F900            <2> 		cmp cx, 0
  9986 00007835 75C9                <2> 		jne titlebarput
  9987                              <2> 	canceltitlebarput:
  9988 00007837 893D[82760000]      <2> 		mov [windowbufloc], edi
  9989 0000783D 803D[5A230000]02    <2> 		cmp byte [termcopyon], 2
  9990 00007844 0F8412010000        <2> 		je near winvcpst
  9991 0000784A 668B1D[E36D0000]    <2> 		mov bx, [background]
  9992 00007851 6653                <2> 		push bx
  9993 00007853 6631DB              <2> 		xor bx, bx
  9994 00007856 66891D[E36D0000]    <2> 		mov [background], bx
  9995 0000785D 6631C0              <2> 		xor ax, ax
  9996 00007860 83C610              <2> 		add esi, 16
  9997 00007863 668B15[76760000]    <2> 		mov dx, [winvcopystx]
  9998 0000786A 668B0D[78760000]    <2> 		mov cx, [winvcopysty]
  9999 00007871 6683E910            <2> 		sub cx, 16
 10000 00007875 668B1D[7E760000]    <2> 		mov bx, [windowcolor]
 10001 0000787C C605[537C0000]01    <2> 		mov byte [mouseselecton], 1
 10002 00007883 E8A5FBFFFF          <2> 		call showstring2	;Show window title
 10003 00007888 8B35[312C0000]      <2> 		mov esi, [usercache]
 10004 0000788E 6683C210            <2> 		add dx, 16
 10005 00007892 C605[537C0000]01    <2> 		mov byte [mouseselecton], 1
 10006 00007899 E88FFBFFFF          <2> 		call showstring2	;Show user name
 10007 0000789E BE[B2840000]        <2> 		mov esi, computer
 10008 000078A3 C605[537C0000]01    <2> 		mov byte [mouseselecton], 1
 10009 000078AA E87EFBFFFF          <2> 		call showstring2	;Show computer name
 10010 000078AF 66B85800            <2> 		mov ax, "X"
 10011 000078B3 66BB00F8            <2> 		mov bx, 1111100000000000b
 10012 000078B7 668B15[76760000]    <2> 		mov dx, [winvcopystx]
 10013 000078BE 668B0D[78760000]    <2> 		mov cx, [winvcopysty]
 10014 000078C5 6683E910            <2> 		sub cx, 16
 10015 000078C9 6683EA10            <2> 		sub dx, 16
 10016 000078CD 660315[7A760000]    <2> 		add dx, [winvcopydx]
 10017 000078D4 C605[537C0000]01    <2> 		mov byte [mouseselecton], 1
 10018 000078DB 663B15[F2550000]    <2> 		cmp dx, [resolutionx2]
 10019 000078E2 7305                <2> 		jae .nox
 10020 000078E4 E8BEFBFFFF          <2> 		call showfontvesa
 10021                              <2> .nox:
 10022 000078E9 668B1D[E36D0000]    <2> 		mov bx, [background]
 10023 000078F0 6683EA18            <2> 		sub dx, 24
 10024 000078F4 66B82B00            <2> 		mov ax, "+"
 10025 000078F8 66BBE007            <2> 		mov bx, 0000011111100000b
 10026 000078FC C605[537C0000]01    <2> 		mov byte [mouseselecton], 1
 10027 00007903 663B15[F2550000]    <2> 		cmp dx, [resolutionx2]
 10028 0000790A 7305                <2> 		jae .noplus
 10029 0000790C E896FBFFFF          <2> 		call showfontvesa
 10030                              <2> .noplus:
 10031 00007911 6683EA18            <2> 		sub dx, 24
 10032 00007915 66B82D00            <2> 		mov ax, "-"
 10033 00007919 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10034 0000791D C605[537C0000]01    <2> 		mov byte [mouseselecton], 1
 10035 00007924 663B15[F2550000]    <2> 		cmp dx, [resolutionx2]
 10036 0000792B 7305                <2> 		jae .nominus
 10037 0000792D E875FBFFFF          <2> 		call showfontvesa
 10038                              <2> .nominus:
 10039 00007932 6683EA18            <2> 		sub dx, 24
 10040 00007936 66B83F00            <2> 		mov ax, "?"
 10041 0000793A 66BB1F00            <2> 		mov bx, 0000000000011111b
 10042 0000793E C605[537C0000]01    <2> 		mov byte [mouseselecton], 1
 10043 00007945 663B15[F2550000]    <2> 		cmp dx, [resolutionx2]
 10044 0000794C 7305                <2> 		jae .noquestion
 10045 0000794E E854FBFFFF          <2> 		call showfontvesa
 10046                              <2> .noquestion:
 10047 00007953 665B                <2> 		pop bx
 10048 00007955 66891D[E36D0000]    <2> 		mov [background], bx
 10049                              <2> 	winvcpst:
 10050 0000795C C3                  <2> 		ret
 10051                              <2> 
 10052                              <2> 	windowvideocopy:
 10053 0000795D 8B35[8E760000]      <2> 		mov esi, [windowinfobuf]
 10054 00007963 668B16              <2> 		mov dx, [esi]
 10055 00007966 668B4E02            <2> 		mov cx, [esi + 2]
 10056 0000796A 8B7E04              <2> 		mov edi, [esi + 4]
 10057 0000796D 893D[7E760000]      <2> 		mov [windowcolor], edi
 10058 00007973 8B7E08              <2> 		mov edi, [esi + 8]
 10059 00007976 8B5E0C              <2> 		mov ebx, [esi + 12]
 10060 00007979 893D[86760000]      <2> 		mov [windowvideobuf], edi
 10061 0000797F 891D[8A760000]      <2> 		mov [windowvideobuf2], ebx
 10062 00007985 31C0                <2> 		xor eax, eax
 10063 00007987 31DB                <2> 		xor ebx, ebx
 10064 00007989 6689D0              <2> 		mov ax, dx
 10065 0000798C 6689CB              <2> 		mov bx, cx
 10066 0000798F 66C1E803            <2> 		shr ax, 3
 10067 00007993 66C1EB04            <2> 		shr bx, 4
 10068 00007997 66A3[92760000]      <2> 		mov [termcol], ax
 10069 0000799D A2[32250000]        <2> 		mov [charxy], al
 10070 000079A2 881D[33250000]      <2> 		mov [charxy + 1], bl
 10071 000079A8 8B3D[82760000]      <2> 		mov edi, [windowbufloc]
 10072 000079AE 3B3D[1A550000]      <2> 		cmp edi, [physbaseptr]
 10073 000079B4 0F8331000000        <2> 		jae near windowvideocopyset
 10074 000079BA 31C9                <2> 		xor ecx, ecx
 10075 000079BC 31D2                <2> 		xor edx, edx
 10076 000079BE 668B15[76760000]    <2> 		mov dx, [winvcopystx]
 10077 000079C5 668B0D[78760000]    <2> 		mov cx, [winvcopysty]
 10078 000079CC 8B3D[1A550000]      <2> 		mov edi, [physbaseptr]
 10079 000079D2 01D7                <2> 		add edi, edx
 10080 000079D4 83F900              <2> 		cmp ecx, 0
 10081 000079D7 7412                <2> 		je windowvideocopyset
 10082                              <2> 	yrescopylp:
 10083 000079D9 31C0                <2> 		xor eax, eax
 10084 000079DB 66A1[F2550000]      <2> 		mov ax, [resolutionx2]
 10085 000079E1 F7E1                <2> 		mul ecx
 10086 000079E3 01C7                <2> 		add edi, eax
 10087 000079E5 893D[82760000]      <2> 		mov [windowbufloc], edi
 10088                              <2> 	windowvideocopyset:
 10089 000079EB 6631C9              <2> 		xor cx, cx
 10090 000079EE 6649                <2> 		dec cx
 10091 000079F0 66890D[477C0000]    <2> 		mov [charposline], cx
 10092 000079F7 89FE                <2> 		mov esi, edi
 10093 000079F9 83EE10              <2> 		sub esi, 16
 10094 000079FC 31D2                <2> 		xor edx, edx
 10095 000079FE 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
 10096 00007A05 C1E204              <2> 		shl edx, 4
 10097 00007A08 01D6                <2> 		add esi, edx
 10098 00007A0A 8B3D[86760000]      <2> 		mov edi, [windowvideobuf]
 10099 00007A10 83EF04              <2> 		sub edi, 4
 10100 00007A13 893D[497C0000]      <2> 		mov [charposvbuf], edi
 10101 00007A19 E912010000          <2> 		jmp nextcharwin
 10102                              <2> 	win.write:	;adjusted this to use alpha
 10103                              <2> 				;5R, 6G, 5B
 10104                              <2> %ifdef gui.alphablending
 10105 00007A1E 56                  <2> 		push esi
 10106 00007A1F 6653                <2> 		push bx
 10107 00007A21 6651                <2> 		push cx
 10108 00007A23 6652                <2> 		push dx
 10109                              <2> %ifdef gui.background
 10110 00007A25 89FE                <2> 		mov esi, edi
 10111 00007A27 2B35[1A550000]      <2> 		sub esi, [physbaseptr]
 10112 00007A2D 0335[BB6D0000]      <2> 		add esi, [backgroundimage]
 10113 00007A33 833D[BB6D0000]00    <2> 		cmp dword [backgroundimage], 0
 10114 00007A3A 7505                <2> 		jne .red
 10115                              <2> %endif
 10116 00007A3C BE[E36D0000]        <2> 		mov esi, background
 10117                              <2> 	.red:
 10118 00007A41 668B0E              <2> 		mov cx, [esi]
 10119 00007A44 66C1E90B            <2> 		shr cx, 11
 10120 00007A48 6689C3              <2> 		mov bx, ax
 10121 00007A4B 66C1EB0B            <2> 		shr bx, 11
 10122 00007A4F 6601D9              <2> 		add cx, bx
 10123 00007A52 6601D9              <2> 		add cx, bx
 10124 00007A55 6601D9              <2> 		add cx, bx
 10125 00007A58 66C1E902            <2> 		shr cx, 2
 10126 00007A5C 66C1E10B            <2> 		shl cx, 11
 10127 00007A60 6689CA              <2> 		mov dx, cx
 10128                              <2> 	.green:
 10129 00007A63 668B0E              <2> 		mov cx, [esi]
 10130 00007A66 66C1E105            <2> 		shl cx, 5
 10131 00007A6A 66C1E90A            <2> 		shr cx, 10
 10132 00007A6E 6689C3              <2> 		mov bx, ax
 10133 00007A71 66C1E305            <2> 		shl bx, 5
 10134 00007A75 66C1EB0A            <2> 		shr bx, 10
 10135 00007A79 6601D9              <2> 		add cx, bx
 10136 00007A7C 6601D9              <2> 		add cx, bx
 10137 00007A7F 6601D9              <2> 		add cx, bx
 10138 00007A82 66C1E902            <2> 		shr cx, 2
 10139 00007A86 66C1E105            <2> 		shl cx, 5
 10140 00007A8A 6601CA              <2> 		add dx, cx
 10141                              <2> 	.blue:
 10142 00007A8D 668B0E              <2> 		mov cx, [esi]
 10143 00007A90 66C1E10B            <2> 		shl cx, 11
 10144 00007A94 66C1E90B            <2> 		shr cx, 11
 10145 00007A98 6689C3              <2> 		mov bx, ax
 10146 00007A9B 66C1E30B            <2> 		shl bx, 11
 10147 00007A9F 66C1EB0B            <2> 		shr bx, 11
 10148 00007AA3 6601D9              <2> 		add cx, bx
 10149 00007AA6 6601D9              <2> 		add cx, bx
 10150 00007AA9 6601D9              <2> 		add cx, bx
 10151 00007AAC 66C1E902            <2> 		shr cx, 2
 10152 00007AB0 6601CA              <2> 		add dx, cx
 10153 00007AB3 668917              <2> 		mov [edi], dx
 10154 00007AB6 665A                <2> 		pop dx
 10155 00007AB8 6659                <2> 		pop cx
 10156 00007ABA 665B                <2> 		pop bx
 10157 00007ABC 5E                  <2> 		pop esi
 10158                              <2> %else
 10159                              <2> 		mov [edi], ax
 10160                              <2> %endif
 10161 00007ABD C3                  <2> 		ret
 10162                              <2> 	copywindow:
 10163 00007ABE B201                <2> 		mov dl, 1
 10164 00007AC0 D0C6                <2> 		rol dh, 1
 10165 00007AC2 20F2                <2> 		and dl, dh
 10166 00007AC4 66813D[98740000]80- <2> 		cmp word [colorcache], 0x80
 10167 00007ACC 00                  <2>
 10168 00007ACD 731D                <2> 		jae switchwincolors
 10169 00007ACF 66A1[80760000]      <2> 		mov ax, [windowcolor + 2]
 10170 00007AD5 E844FFFFFF          <2> 		call win.write
 10171 00007ADA 80FA00              <2> 		cmp dl, 0
 10172 00007ADD 7428                <2> 		je nowritewin
 10173 00007ADF 66A1[7E760000]      <2> 		mov ax, [windowcolor]
 10174 00007AE5 E834FFFFFF          <2> 		call win.write
 10175 00007AEA EB1B                <2> 		jmp nowritewin
 10176                              <2> 	switchwincolors:
 10177 00007AEC 66A1[7E760000]      <2> 		mov ax, [windowcolor]
 10178 00007AF2 E827FFFFFF          <2> 		call win.write
 10179 00007AF7 80FA00              <2> 		cmp dl, 0
 10180 00007AFA 740B                <2> 		je nowritewin
 10181 00007AFC 66A1[80760000]      <2> 		mov ax, [windowcolor + 2]
 10182 00007B02 E817FFFFFF          <2> 		call win.write
 10183                              <2> 	nowritewin:
 10184 00007B07 83C702              <2> 		add edi, 2
 10185 00007B0A FEC1                <2> 		inc cl
 10186 00007B0C 80F908              <2> 		cmp cl, 8
 10187 00007B0F 75AD                <2> 		jne copywindow
 10188 00007B11 43                  <2> 		inc ebx
 10189 00007B12 30C9                <2> 		xor cl, cl
 10190 00007B14 31D2                <2> 		xor edx, edx
 10191 00007B16 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
 10192 00007B1D 01D6                <2> 		add esi, edx
 10193 00007B1F 89F7                <2> 		mov edi, esi
 10194 00007B21 8AB3[41870000]      <2> 		mov dh, [fonts + ebx]
 10195 00007B27 D0CE                <2> 		ror dh, 1
 10196 00007B29 FEC5                <2> 		inc ch
 10197 00007B2B 80FD10              <2> 		cmp ch, 16
 10198 00007B2E 758E                <2> 		jne copywindow
 10199                              <2> 	nextcharwin:
 10200 00007B30 6631C9              <2> 		xor cx, cx
 10201 00007B33 8B3D[497C0000]      <2> 		mov edi, [charposvbuf]
 10202 00007B39 83C704              <2> 		add edi, 4
 10203 00007B3C 3B3D[94760000]      <2> 		cmp edi, [wincopyendpos]
 10204 00007B42 0F83E8000000        <2> 		jae near donewincopynow
 10205 00007B48 668B5F02            <2> 		mov bx, [edi + 2]
 10206 00007B4C 6683FB00            <2> 		cmp bx, 0
 10207 00007B50 7508                <2> 		jne nofixcolorwin
 10208 00007B52 66BB0700            <2> 		mov bx, 7
 10209 00007B56 66895F02            <2> 		mov [edi + 2], bx
 10210                              <2> 	nofixcolorwin:
 10211 00007B5A 66891D[98740000]    <2> 		mov [colorcache], bx
 10212 00007B61 8B1F                <2> 		mov ebx, [edi]
 10213 00007B63 893D[497C0000]      <2> 		mov [charposvbuf], edi
 10214 00007B69 833D[8A760000]00    <2> 		cmp dword [windowvideobuf2], 0
 10215 00007B70 7452                <2> 		je noskipcharcopy
 10216 00007B72 2B3D[86760000]      <2> 		sub edi, [windowvideobuf]
 10217 00007B78 033D[8A760000]      <2> 		add edi, [windowvideobuf2]
 10218 00007B7E 8B07                <2> 		mov eax, [edi]
 10219 00007B80 39D8                <2> 		cmp eax, ebx
 10220 00007B82 7540                <2> 		jne noskipcharcopy
 10221                              <2> 	skipcharcopy:
 10222 00007B84 83C610              <2> 		add esi, 16
 10223 00007B87 668B0D[477C0000]    <2> 		mov cx, [charposline]
 10224 00007B8E 6641                <2> 		inc cx
 10225 00007B90 66890D[477C0000]    <2> 		mov [charposline], cx
 10226 00007B97 663B0D[92760000]    <2> 		cmp cx, [termcol]
 10227 00007B9E 7290                <2> 		jb nextcharwin
 10228 00007BA0 6631C9              <2> 		xor cx, cx
 10229 00007BA3 66890D[477C0000]    <2> 		mov [charposline], cx
 10230 00007BAA 31D2                <2> 		xor edx, edx
 10231 00007BAC 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
 10232 00007BB3 C1E204              <2> 		shl edx, 4
 10233 00007BB6 662B15[7A760000]    <2> 		sub dx, [winvcopydx]
 10234 00007BBD 01D6                <2> 		add esi, edx
 10235 00007BBF E96CFFFFFF          <2> 		jmp nextcharwin
 10236                              <2> 	noskipcharcopy:
 10237 00007BC4 891F                <2> 		mov [edi], ebx
 10238 00007BC6 8B3D[497C0000]      <2> 		mov edi, [charposvbuf]
 10239 00007BCC C1E310              <2> 		shl ebx, 16
 10240 00007BCF C1EB0C              <2> 		shr ebx, 12
 10241 00007BD2 31D2                <2> 		xor edx, edx
 10242 00007BD4 668B15[F2550000]    <2> 		mov dx, [resolutionx2]
 10243 00007BDB C1E204              <2> 		shl edx, 4
 10244 00007BDE 29D6                <2> 		sub esi, edx
 10245 00007BE0 83C610              <2> 		add esi, 16
 10246 00007BE3 89F7                <2> 		mov edi, esi
 10247 00007BE5 668B0D[477C0000]    <2> 		mov cx, [charposline]
 10248 00007BEC 6641                <2> 		inc cx
 10249 00007BEE 663B0D[92760000]    <2> 		cmp cx, [termcol]
 10250 00007BF5 7317                <2> 		jae fixwindowcopy
 10251 00007BF7 66890D[477C0000]    <2> 		mov [charposline], cx
 10252 00007BFE 6631C9              <2> 		xor cx, cx
 10253 00007C01 8AB3[41870000]      <2> 		mov dh, [fonts + ebx]
 10254 00007C07 D0CE                <2> 		ror dh, 1
 10255 00007C09 E9B0FEFFFF          <2> 		jmp copywindow
 10256                              <2> fixwindowcopy:
 10257 00007C0E 6631C9              <2> 		xor cx, cx
 10258 00007C11 66890D[477C0000]    <2> 		mov [charposline], cx
 10259 00007C18 662B15[7A760000]    <2> 		sub dx, [winvcopydx]
 10260 00007C1F 01D6                <2> 		add esi, edx
 10261 00007C21 89F7                <2> 		mov edi, esi
 10262 00007C23 8AB3[41870000]      <2> 		mov dh, [fonts + ebx]
 10263 00007C29 D0CE                <2> 		ror dh, 1
 10264 00007C2B E98EFEFFFF          <2> 		jmp copywindow
 10265                              <2> donewincopynow:
 10266 00007C30 803D[5A230000]01    <2> 		cmp byte [termcopyon], 1
 10267 00007C37 7506                <2> 		jne forgetresetstuff
 10268 00007C39 E8F6ACFFFF          <2> 		call switchtermcursor
 10269 00007C3E 61                  <2> 		popa
 10270                              <2> forgetresetstuff:
 10271 00007C3F C605[5A230000]00    <2> 		mov byte [termcopyon], 0
 10272 00007C46 C3                  <2> 		ret
 10273                              <2> 		
 10274 00007C47 0000                <2> charposline dw 0
 10275 00007C49 00000000            <2> charposvbuf dw 0,0
 10276                              <1> 				
 10277 00007C4D 00                  <1> copygui db 0
 10278 00007C4E 00                  <1> graphicsset db 0
 10279 00007C4F 0000                <1> graphicspos db 0,0
 10280 00007C51 00                  <1> showcursorfonton db 0
 10281 00007C52 00                  <1> savefonton db 0
 10282 00007C53 00                  <1> mouseselecton db 0
 10283                              <1> 
 10284 00007C54 00                  <1> pbutton db 0
 10285 00007C55 00                  <1> pLBUTTON db 0
 10286 00007C56 00                  <1> pRBUTTON db 0
 10287 00007C57 00000000            <1> dragging dw 0,0
 10288 00007C5B 0000000000000000    <1> lastpos dw 0,0,0,0
 10289 00007C63 00000000            <1> colorbuf dw 0,0
 10290                              <1> 	
 10291                              <1> 	clickicon:
 10292 00007C67 B001                <1> 		mov al, 1
 10293 00007C69 A2[547C0000]        <1> 		mov [pbutton], al
 10294 00007C6E A0[557C0000]        <1> 		mov al, [pLBUTTON]
 10295 00007C73 2205[ED580000]      <1> 		and al, [LBUTTON]
 10296 00007C79 8A25[567C0000]      <1> 		mov ah, [pRBUTTON]
 10297 00007C7F 2225[EE580000]      <1> 		and ah, [RBUTTON]
 10298 00007C85 08E0                <1> 		or al, ah
 10299 00007C87 3C00                <1> 		cmp al, 0
 10300 00007C89 7415                <1> 		je nodragclick
 10301 00007C8B 833D[577C0000]01    <1> 		cmp dword [dragging], 1
 10302 00007C92 732C                <1> 		jae dragclick
 10303 00007C94 C705[577C0000]0100- <1> 		mov dword [dragging], 1
 10304 00007C9C 0000                <1>
 10305 00007C9E EB20                <1> 		jmp dragclick
 10306                              <1> 	nodragclick:
 10307 00007CA0 31C0                <1> 		xor eax, eax
 10308 00007CA2 A3[577C0000]        <1> 		mov dword [dragging], eax
 10309 00007CA7 A2[547C0000]        <1> 		mov [pbutton], al
 10310 00007CAC A0[ED580000]        <1> 		mov al, [LBUTTON]
 10311 00007CB1 A2[557C0000]        <1> 		mov [pLBUTTON], al
 10312 00007CB6 A0[EE580000]        <1> 		mov al, [RBUTTON]
 10313 00007CBB A2[567C0000]        <1> 		mov [pRBUTTON], al
 10314                              <1> 	dragclick:
 10315 00007CC0 6631C0              <1> 		xor ax, ax
 10316 00007CC3 BE[9CC80300]        <1> 		mov esi, graphicstable
 10317 00007CC8 C705[7C840000]0000- <1> 		mov dword [codepointer], 0
 10318 00007CD0 0000                <1>
 10319                              <1> 	clicon2:
 10320 00007CD2 31D2                <1> 		xor edx, edx
 10321 00007CD4 31C9                <1> 		xor ecx, ecx
 10322 00007CD6 66833E01            <1> 		cmp word [esi], 1
 10323 00007CDA 0F8419000000        <1> 		je near iconselect
 10324 00007CE0 66833E02            <1> 		cmp word [esi], 2
 10325 00007CE4 0F8465010000        <1> 		je near textselected
 10326 00007CEA 66833E03            <1> 		cmp word [esi], 3
 10327 00007CEE 0F84AF020000        <1> 		je near windowselect
 10328 00007CF4 E9EB030000          <1> 		jmp nexticonsel
 10329                              <1> 	iconselect:
 10330 00007CF9 668B5606            <1> 		mov dx, [esi + 6]
 10331 00007CFD 6689D0              <1> 		mov ax, dx
 10332 00007D00 668B4E08            <1> 		mov cx, [esi + 8]
 10333 00007D04 6689CB              <1> 		mov bx, cx
 10334 00007D07 6683C320            <1> 		add bx, 32
 10335 00007D0B 6601D0              <1> 		add ax, dx
 10336 00007D0E 833D[577C0000]01    <1> 		cmp dword [dragging], 1
 10337 00007D15 7469                <1> 		je dragicon
 10338 00007D17 833D[577C0000]00    <1> 		cmp dword [dragging], 0
 10339 00007D1E 740E                <1> 		je nodragiconcheck
 10340 00007D20 3935[577C0000]      <1> 		cmp dword [dragging], esi
 10341 00007D26 0F85B8030000        <1> 		jne near nexticonsel
 10342 00007D2C EB52                <1> 		jmp dragicon
 10343                              <1> 	nodragiconcheck:
 10344 00007D2E 663905[DE570000]    <1> 		cmp [mousecursorposition], ax
 10345 00007D35 0F82A9030000        <1> 		jb near nexticonsel
 10346 00007D3B 6683C040            <1> 		add ax, 64
 10347 00007D3F 663905[DE570000]    <1> 		cmp [mousecursorposition], ax
 10348 00007D46 0F8798030000        <1> 		ja near nexticonsel
 10349 00007D4C 6629D0              <1> 		sub ax, dx
 10350 00007D4F 66390D[E0570000]    <1> 		cmp [mousecursorposition + 2], cx
 10351 00007D56 0F8288030000        <1> 		jb near nexticonsel
 10352 00007D5C 66391D[E0570000]    <1> 		cmp [mousecursorposition + 2], bx
 10353 00007D63 0F877B030000        <1> 		ja near nexticonsel
 10354 00007D69 668B460A            <1> 		mov ax, [esi + 10]
 10355 00007D6D 6683E001            <1> 		and ax, 1
 10356 00007D71 6683F801            <1> 		cmp ax, 1
 10357 00007D75 0F84B5000000        <1> 		je near unselecticon
 10358 00007D7B E98D000000          <1> 		jmp nodragicon
 10359                              <1> 	dragicon:
 10360 00007D80 663905[DA570000]    <1> 		cmp [lastmouseposition], ax
 10361 00007D87 0F8257030000        <1> 		jb near nexticonsel
 10362 00007D8D 6683C040            <1> 		add ax, 64
 10363 00007D91 663905[DA570000]    <1> 		cmp [lastmouseposition], ax
 10364 00007D98 0F8746030000        <1> 		ja near nexticonsel
 10365 00007D9E 6629D0              <1> 		sub ax, dx
 10366 00007DA1 66390D[DC570000]    <1> 		cmp [lastmouseposition + 2], cx
 10367 00007DA8 0F8236030000        <1> 		jb near nexticonsel
 10368 00007DAE 66391D[DC570000]    <1> 		cmp [lastmouseposition + 2], bx
 10369 00007DB5 0F8729030000        <1> 		ja near nexticonsel
 10370 00007DBB 668B460A            <1> 		mov ax, [esi + 10]
 10371 00007DBF 2410                <1> 		and al, 00010000b
 10372 00007DC1 3C10                <1> 		cmp al, 00010000b
 10373 00007DC3 7448                <1> 		je nodragicon
 10374 00007DC5 8935[577C0000]      <1> 		mov [dragging], esi
 10375 00007DCB 66D1E2              <1> 		shl dx, 1
 10376 00007DCE 662B15[DA570000]    <1> 		sub dx, [lastmouseposition]
 10377 00007DD5 660315[DE570000]    <1> 		add dx, [mousecursorposition]
 10378 00007DDC 66D1EA              <1> 		shr dx, 1
 10379 00007DDF 66030D[E0570000]    <1> 		add cx, [mousecursorposition + 2]
 10380 00007DE6 662B0D[DC570000]    <1> 		sub cx, [lastmouseposition + 2]
 10381 00007DED 663B15[F2550000]    <1> 		cmp dx, [resolutionx2]
 10382 00007DF4 7607                <1> 		jbe chkyresdrgicn
 10383 00007DF6 668B15[DE570000]    <1> 		mov dx, [mousecursorposition]
 10384                              <1> 	chkyresdrgicn:
 10385 00007DFD 663B0D[06550000]    <1> 		cmp cx, [resolutiony]
 10386 00007E04 7607                <1> 		jbe nodragicon
 10387 00007E06 668B0D[E0570000]    <1> 		mov cx, [mousecursorposition + 2]
 10388                              <1> 	nodragicon:
 10389 00007E0D 66834E0A01          <1> 		or word [esi + 10], 1
 10390 00007E12 8B5E0C              <1> 		mov ebx, [esi + 12]
 10391 00007E15 668B460A            <1> 		mov ax, [esi + 10]
 10392 00007E19 8B7602              <1> 		mov esi, [esi + 2]
 10393 00007E1C C705[7C840000]0000- <1> 		mov dword [codepointer], 0
 10394 00007E24 0000                <1>
 10395 00007E26 E862EDFFFF          <1> 		call showicon
 10396 00007E2B E9C9020000          <1> 		jmp doneiconsel
 10397                              <1> 	unselecticon:
 10398 00007E30 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10399 00007E35 8B5E0C              <1> 		mov ebx, [esi + 12]
 10400 00007E38 668B460A            <1> 		mov ax, [esi + 10]
 10401 00007E3C 8B7602              <1> 		mov esi, [esi + 2]
 10402 00007E3F 891D[7C840000]      <1> 		mov [codepointer], ebx
 10403 00007E45 E843EDFFFF          <1> 		call showicon
 10404 00007E4A E9AA020000          <1> 		jmp doneiconsel
 10405                              <1> 	textselected:
 10406 00007E4F 8B5E02              <1> 		mov ebx, [esi + 2]
 10407 00007E52 668B5606            <1> 		mov dx, [esi + 6]
 10408 00007E56 6689D0              <1> 		mov ax, dx
 10409 00007E59 668B4E08            <1> 		mov cx, [esi + 8]
 10410                              <1> 	lengthtesttext:
 10411 00007E5D 803B00              <1> 		cmp byte [ebx], 0
 10412 00007E60 7407                <1> 		je donetesttextlength
 10413 00007E62 43                  <1> 		inc ebx
 10414 00007E63 6683C010            <1> 		add ax, 16
 10415 00007E67 EBF4                <1> 		jmp lengthtesttext
 10416                              <1> 	donetesttextlength:
 10417 00007E69 6689CB              <1> 		mov bx, cx
 10418 00007E6C 6683C30F            <1> 		add bx, 15
 10419 00007E70 833D[577C0000]01    <1> 		cmp dword [dragging], 1
 10420 00007E77 7462                <1> 		je dragtext
 10421 00007E79 833D[577C0000]00    <1> 		cmp dword [dragging], 0
 10422 00007E80 740E                <1> 		je nodragtextcheck
 10423 00007E82 3935[577C0000]      <1> 		cmp dword [dragging], esi
 10424 00007E88 0F8556020000        <1> 		jne near nexticonsel
 10425 00007E8E EB4B                <1> 		jmp dragtext
 10426                              <1> 	nodragtextcheck:
 10427 00007E90 663915[DE570000]    <1> 		cmp [mousecursorposition], dx
 10428 00007E97 0F8247020000        <1> 		jb near nexticonsel
 10429 00007E9D 663905[DE570000]    <1> 		cmp [mousecursorposition], ax
 10430 00007EA4 0F873A020000        <1> 		ja near nexticonsel
 10431 00007EAA 66390D[E0570000]    <1> 		cmp [mousecursorposition + 2], cx
 10432 00007EB1 0F822D020000        <1> 		jb near nexticonsel
 10433 00007EB7 66391D[E0570000]    <1> 		cmp [mousecursorposition + 2], bx
 10434 00007EBE 0F8720020000        <1> 		ja near nexticonsel
 10435 00007EC4 668B460A            <1> 		mov ax, [esi + 10]
 10436 00007EC8 6683E001            <1> 		and ax, 1
 10437 00007ECC 6683F801            <1> 		cmp ax, 1
 10438 00007ED0 0F84AA000000        <1> 		je near unselecttext
 10439 00007ED6 E986000000          <1> 		jmp nodragtext
 10440                              <1> 	dragtext:
 10441 00007EDB 663915[DA570000]    <1> 		cmp [lastmouseposition], dx
 10442 00007EE2 0F82FC010000        <1> 		jb near nexticonsel
 10443 00007EE8 663905[DA570000]    <1> 		cmp [lastmouseposition], ax
 10444 00007EEF 0F87EF010000        <1> 		ja near nexticonsel
 10445 00007EF5 66390D[DC570000]    <1> 		cmp [lastmouseposition + 2], cx
 10446 00007EFC 0F82E2010000        <1> 		jb near nexticonsel
 10447 00007F02 66391D[DC570000]    <1> 		cmp [lastmouseposition + 2], bx
 10448 00007F09 0F87D5010000        <1> 		ja near nexticonsel
 10449 00007F0F 668B460A            <1> 		mov ax, [esi + 10]
 10450 00007F13 2410                <1> 		and al, 00010000b
 10451 00007F15 6683F810            <1> 		cmp ax, 00010000b
 10452 00007F19 0F8442000000        <1> 		je near nodragtext
 10453 00007F1F 8935[577C0000]      <1> 		mov [dragging], esi
 10454 00007F25 662B15[DA570000]    <1> 		sub dx, [lastmouseposition]
 10455 00007F2C 660315[DE570000]    <1> 		add dx, [mousecursorposition]
 10456 00007F33 66030D[E0570000]    <1> 		add cx, [mousecursorposition + 2]
 10457 00007F3A 662B0D[DC570000]    <1> 		sub cx, [lastmouseposition + 2]
 10458 00007F41 663B15[F2550000]    <1> 		cmp dx, [resolutionx2]
 10459 00007F48 7607                <1> 		jbe chkyresdrgtxt
 10460 00007F4A 668B15[DE570000]    <1> 		mov dx, [mousecursorposition]
 10461                              <1> 	chkyresdrgtxt:
 10462 00007F51 663B0D[06550000]    <1> 		cmp cx, [resolutiony]
 10463 00007F58 7607                <1> 		jbe nodragtext
 10464 00007F5A 668B0D[E0570000]    <1> 		mov cx, [mousecursorposition + 2]
 10465                              <1> 	nodragtext:
 10466 00007F61 66834E0A01          <1> 		or word [esi + 10], 1
 10467 00007F66 8B5E0C              <1> 		mov ebx, [esi + 12]
 10468 00007F69 891D[7C840000]      <1> 		mov [codepointer], ebx
 10469 00007F6F 668B460A            <1> 		mov ax, [esi + 10]
 10470 00007F73 8B7602              <1> 		mov esi, [esi + 2]
 10471 00007F76 E89FF4FFFF          <1> 		call showstring
 10472 00007F7B E979010000          <1> 		jmp doneiconsel
 10473                              <1> 	unselecttext:
 10474 00007F80 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10475 00007F85 8B5E0C              <1> 		mov ebx, [esi + 12]
 10476 00007F88 668B460A            <1> 		mov ax, [esi + 10]
 10477 00007F8C 8B7602              <1> 		mov esi, [esi + 2]
 10478 00007F8F C705[7C840000]0000- <1> 		mov dword [codepointer], 0
 10479 00007F97 0000                <1>
 10480 00007F99 E87CF4FFFF          <1> 		call showstring
 10481 00007F9E E956010000          <1> 		jmp doneiconsel
 10482                              <1> windowselect:
 10483 00007FA3 8B7E02              <1> 		mov edi, [esi + 2]
 10484 00007FA6 668B5606            <1> 		mov dx, [esi + 6]
 10485 00007FAA 6689D0              <1> 		mov ax, dx
 10486 00007FAD 668B4E08            <1> 		mov cx, [esi + 8]
 10487 00007FB1 6689CB              <1> 		mov bx, cx
 10488 00007FB4 6683C310            <1> 		add bx, 16
 10489 00007FB8 833D[577C0000]01    <1> 		cmp dword [dragging], 1
 10490 00007FBF 7467                <1> 		je dragwin
 10491 00007FC1 833D[577C0000]00    <1> 		cmp dword [dragging], 0
 10492 00007FC8 740E                <1> 		je nodragwincheck
 10493 00007FCA 3935[577C0000]      <1> 		cmp dword [dragging], esi
 10494 00007FD0 0F850E010000        <1> 		jne near nexticonsel
 10495 00007FD6 EB50                <1> 		jmp dragwin
 10496                              <1> 	nodragwincheck:
 10497 00007FD8 663905[DE570000]    <1> 		cmp [mousecursorposition], ax
 10498 00007FDF 0F82FF000000        <1> 		jb near nexticonsel
 10499 00007FE5 660307              <1> 		add ax, [edi]
 10500 00007FE8 660307              <1> 		add ax, [edi]
 10501 00007FEB 663905[DE570000]    <1> 		cmp [mousecursorposition], ax
 10502 00007FF2 0F87EC000000        <1> 		ja near nexticonsel
 10503 00007FF8 66390D[E0570000]    <1> 		cmp [mousecursorposition + 2], cx
 10504 00007FFF 0F82DF000000        <1> 		jb near nexticonsel
 10505 00008005 66391D[E0570000]    <1> 		cmp [mousecursorposition + 2], bx
 10506 0000800C 0F87D2000000        <1> 		ja near nexticonsel
 10507 00008012 6683E814            <1> 		sub ax, 20
 10508 00008016 663905[DE570000]    <1> 		cmp [mousecursorposition], ax
 10509 0000801D 0F87A1000000        <1> 		ja near killwin
 10510 00008023 E98B000000          <1> 		jmp nodragwin
 10511                              <1> 	dragwin:
 10512 00008028 663905[DA570000]    <1> 		cmp [lastmouseposition], ax
 10513 0000802F 0F82AF000000        <1> 		jb near nexticonsel
 10514 00008035 660307              <1> 		add ax, [edi]
 10515 00008038 660307              <1> 		add ax, [edi]
 10516 0000803B 663905[DA570000]    <1> 		cmp [lastmouseposition], ax
 10517 00008042 0F879C000000        <1> 		ja near nexticonsel
 10518 00008048 66390D[DC570000]    <1> 		cmp [lastmouseposition + 2], cx
 10519 0000804F 0F828F000000        <1> 		jb near nexticonsel
 10520 00008055 66391D[DC570000]    <1> 		cmp [lastmouseposition + 2], bx
 10521 0000805C 0F8782000000        <1> 		ja near nexticonsel
 10522 00008062 8935[577C0000]      <1> 		mov [dragging], esi
 10523 00008068 803D[80810000]01    <1> 		cmp byte [windrag], 1
 10524 0000806F 7706                <1> 		ja .nochangewindrag
 10525 00008071 FE05[80810000]      <1> 		inc byte [windrag]
 10526                              <1> 	.nochangewindrag:
 10527 00008077 662B15[DA570000]    <1> 		sub dx, [lastmouseposition]
 10528 0000807E 660315[DE570000]    <1> 		add dx, [mousecursorposition]
 10529 00008085 66030D[E0570000]    <1> 		add cx, [mousecursorposition + 2]
 10530 0000808C 662B0D[DC570000]    <1> 		sub cx, [lastmouseposition + 2]
 10531 00008093 663B15[F2550000]    <1> 		cmp dx, [resolutionx2]
 10532 0000809A 7607                <1> 		jbe chkyresdrgwin
 10533 0000809C 668B15[DE570000]    <1> 		mov dx, [mousecursorposition]
 10534                              <1> 	chkyresdrgwin:
 10535 000080A3 663B0D[06550000]    <1> 		cmp cx, [resolutiony]
 10536 000080AA 7607                <1> 		jbe nodragwin
 10537 000080AC 668B0D[E0570000]    <1> 		mov cx, [mousecursorposition + 2]
 10538                              <1> 	nodragwin:
 10539 000080B3 8B5E0C              <1> 		mov ebx, [esi + 12]
 10540 000080B6 668B460A            <1> 		mov ax, [esi + 10]
 10541 000080BA 8B7602              <1> 		mov esi, [esi + 2]
 10542 000080BD E8D6F5FFFF          <1> 		call showwindow
 10543 000080C2 EB35                <1> 		jmp doneiconsel
 10544                              <1> 	killwin:
 10545 000080C4 66C7060000          <1> 		mov word [esi], 0
 10546 000080C9 C605[59230000]00    <1> 		mov byte [termguion], 0
 10547 000080D0 E891ECFFFF          <1> 		call guiclear
 10548 000080D5 E80DEDFFFF          <1> 		call reloadallgraphics
 10549 000080DA E850EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10550 000080DF E947E6FFFF          <1> 		jmp guistart
 10551                              <1> 	nexticonsel:
 10552 000080E4 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10553 000080E9 83C610              <1> 		add esi, 16
 10554 000080EC 81FE[9CCA0300]      <1> 		cmp esi, graphicstableend
 10555 000080F2 7305                <1> 		jae doneiconsel
 10556 000080F4 E9D9FBFFFF          <1> 		jmp clicon2
 10557                              <1> 	doneiconsel:
 10558 000080F9 833D[577C0000]01    <1> 		cmp dword [dragging], 1
 10559 00008100 7317                <1> 		jae doneiconsel2
 10560 00008102 A2[80810000]        <1> 		mov [windrag], al
 10561 00008107 833D[7C840000]00    <1> 		cmp dword [codepointer], 0
 10562 0000810E 7409                <1> 		je doneiconsel2
 10563 00008110 8B1D[7C840000]      <1> 		mov ebx, [codepointer]
 10564 00008116 FFD3                <1> 		call ebx
 10565 00008118 C3                  <1> 		ret
 10566                              <1> 	doneiconsel2:
 10567 00008119 A0[ED580000]        <1> 		mov al, [LBUTTON]
 10568 0000811E A2[557C0000]        <1> 		mov [pLBUTTON], al
 10569 00008123 A0[EE580000]        <1> 		mov al, [RBUTTON]
 10570 00008128 A2[567C0000]        <1> 		mov [pRBUTTON], al
 10571 0000812D 833D[577C0000]01    <1> 		cmp dword [dragging], 1
 10572 00008134 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10573 0000813A E8F0E9FFFF          <1> 		call switchmousepos2
 10574 0000813F 803D[80810000]01    <1> 		cmp byte [windrag], 1
 10575 00008146 7305                <1> 		jae noclearcursorcl
 10576 00008148 E8F9E8FFFF          <1> 		call clearmousecursor
 10577                              <1> noclearcursorcl:
 10578 0000814D E895ECFFFF          <1> 		call reloadallgraphics
 10579                              <1> noreloadgraphicsclick:
 10580 00008152 30E4                <1> 		xor ah, ah
 10581 00008154 31C9                <1> 		xor ecx, ecx
 10582 00008156 31D2                <1> 		xor edx, edx
 10583 00008158 B001                <1> 		mov al, 1
 10584 0000815A 668B15[DE570000]    <1> 		mov dx, [mousecursorposition]
 10585 00008161 668B0D[E0570000]    <1> 		mov cx, [mousecursorposition + 2]
 10586 00008168 66BBE738            <1> 		mov bx, 0011100011100111b
 10587 0000816C C605[517C0000]01    <1> 		mov byte [showcursorfonton], 1
 10588 00008173 E82FF3FFFF          <1> 		call showfontvesa
 10589 00008178 C605[517C0000]00    <1> 		mov byte [showcursorfonton], 0
 10590 0000817F C3                  <1> 		ret
 10591 00008180 00                  <1> windrag db 0
 10592 00008181 00000000            <1> lastdrag dw 0,0
 10593 00008185 00000000            <1> grpctblpos dw 0,0
 10594                              <1> 
 10595                              <1> 
 10596                              <1> 
 10597 00008189 00<rept>            <1> grphbuf times 16 db 0
 10598                              <1> 	graphicsadd:
 10599 00008199 BF[9CC80300]        <1> 		mov edi, graphicstable
 10600                              <1> 	shwgrph1:
 10601 0000819E 397702              <1> 		cmp dword [edi + 2], esi
 10602 000081A1 7411                <1> 		je showgraphicsreplace2
 10603 000081A3 83C710              <1> 		add edi, 16
 10604 000081A6 81FF[9CCA0300]      <1> 		cmp edi, graphicstableend
 10605 000081AC 0F834E020000        <1> 		jae near showgraphicsnew
 10606 000081B2 EBEA                <1> 		jmp shwgrph1
 10607                              <1> 	showgraphicsreplace2:
 10608 000081B4 8935[8B810000]      <1> 		mov [grphbuf + 2], esi
 10609 000081BA 668915[8F810000]    <1> 		mov [grphbuf + 6], dx
 10610 000081C1 66890D[91810000]    <1> 		mov [grphbuf + 8], cx
 10611 000081C8 891D[95810000]      <1> 		mov [grphbuf + 12], ebx
 10612 000081CE 30FF                <1> 		xor bh, bh
 10613 000081D0 88E3                <1> 		mov bl, ah
 10614 000081D2 30E4                <1> 		xor ah, ah
 10615 000081D4 66A3[93810000]      <1> 		mov [grphbuf + 10], ax	
 10616 000081DA 66891D[89810000]    <1> 		mov [grphbuf], bx
 10617 000081E1 66A1[89810000]      <1> 		mov ax, [grphbuf]
 10618 000081E7 6683F801            <1> 		cmp ax, 1
 10619 000081EB 0F8419000000        <1> 		je near replaceicon
 10620 000081F1 6683F802            <1> 		cmp ax, 2
 10621 000081F5 0F8493000000        <1> 		je near replacestring
 10622 000081FB 6683F803            <1> 		cmp ax, 3
 10623 000081FF 0F840F010000        <1> 		je near replacewindow
 10624 00008205 E9D3010000          <1> 		jmp showgraphicsreplace
 10625                              <1> 	replaceicon:
 10626 0000820A 893D[5B7C0000]      <1> 		mov [lastpos], edi
 10627 00008210 8935[5F7C0000]      <1> 		mov [lastpos + 4], esi
 10628 00008216 8B7702              <1> 		mov esi, [edi + 2]
 10629 00008219 668B5F0C            <1> 		mov bx, [edi + 12]
 10630 0000821D 668B5706            <1> 		mov dx, [edi + 6]
 10631 00008221 668B4F08            <1> 		mov cx, [edi + 8]
 10632 00008225 668B06              <1> 		mov ax, [esi]
 10633 00008228 66A3[637C0000]      <1> 		mov [colorbuf], ax
 10634 0000822E 66A1[E36D0000]      <1> 		mov ax, [background]
 10635 00008234 668906              <1> 		mov [esi], ax
 10636 00008237 8B5F0C              <1> 		mov ebx, [edi + 12]
 10637 0000823A 668B470A            <1> 		mov ax, [edi + 10]
 10638 0000823E 2401                <1> 		and al, 1
 10639 00008240 A2[80840000]        <1> 		mov [iconselected], al
 10640 00008245 668B470A            <1> 		mov ax, [edi + 10]
 10641 00008249 E852E9FFFF          <1> 		call showicon2
 10642 0000824E 8B3D[5B7C0000]      <1> 		mov edi, [lastpos]
 10643 00008254 8B7702              <1> 		mov esi, [edi + 2]
 10644 00008257 66A1[637C0000]      <1> 		mov ax, [colorbuf]
 10645 0000825D 668906              <1> 		mov [esi], ax
 10646 00008260 8B35[5F7C0000]      <1> 		mov esi, [lastpos + 4]
 10647 00008266 668B15[8F810000]    <1> 		mov dx, [grphbuf + 6]
 10648 0000826D 668B0D[91810000]    <1> 		mov cx, [grphbuf + 8]
 10649 00008274 668B1D[89810000]    <1> 		mov bx, [grphbuf]
 10650 0000827B 66A1[93810000]      <1> 		mov ax, [grphbuf + 10]
 10651 00008281 88DC                <1> 		mov ah, bl
 10652 00008283 8B1D[95810000]      <1> 		mov ebx, [grphbuf + 12]
 10653 00008289 E94F010000          <1> 		jmp showgraphicsreplace
 10654                              <1> 	replacestring:
 10655 0000828E 893D[5B7C0000]      <1> 		mov [lastpos], edi
 10656 00008294 8935[5F7C0000]      <1> 		mov [lastpos + 4], esi
 10657 0000829A 8B5F0C              <1> 		mov ebx, [edi + 12]
 10658 0000829D 8B7702              <1> 		mov esi, [edi + 2]
 10659 000082A0 668B5706            <1> 		mov dx, [edi + 6]
 10660 000082A4 668B4F08            <1> 		mov cx, [edi + 8]
 10661 000082A8 66A1[96740000]      <1> 		mov ax, [colorfont2]
 10662 000082AE 66A3[637C0000]      <1> 		mov [colorbuf], ax
 10663 000082B4 66A1[E36D0000]      <1> 		mov ax, [background]
 10664 000082BA 66A3[96740000]      <1> 		mov [colorfont2], ax		
 10665 000082C0 8B5F0C              <1> 		mov ebx, [edi + 12]
 10666 000082C3 668B470A            <1> 		mov ax, [edi + 10]
 10667 000082C7 2401                <1> 		and al, 1
 10668 000082C9 A2[537C0000]        <1> 		mov [mouseselecton], al
 10669 000082CE 668B470A            <1> 		mov ax, [edi + 10]
 10670 000082D2 E856F1FFFF          <1> 		call showstring2
 10671 000082D7 66A1[637C0000]      <1> 		mov ax, [colorbuf]
 10672 000082DD 66A3[96740000]      <1> 		mov [colorfont2], ax
 10673 000082E3 8B3D[5B7C0000]      <1> 		mov edi, [lastpos]
 10674 000082E9 8B7702              <1> 		mov esi, [edi + 2]
 10675 000082EC 668B15[8F810000]    <1> 		mov dx, [grphbuf + 6]
 10676 000082F3 668B0D[91810000]    <1> 		mov cx, [grphbuf + 8]
 10677 000082FA 668B1D[89810000]    <1> 		mov bx, [grphbuf]
 10678 00008301 66A1[93810000]      <1> 		mov ax, [grphbuf + 10]
 10679 00008307 88DC                <1> 		mov ah, bl
 10680 00008309 8B1D[95810000]      <1> 		mov ebx, [grphbuf + 12]
 10681 0000830F E9C9000000          <1> 		jmp showgraphicsreplace
 10682                              <1> 	replacewindow:
 10683 00008314 893D[5B7C0000]      <1> 		mov [lastpos], edi
 10684 0000831A 8935[5F7C0000]      <1> 		mov [lastpos + 4], esi
 10685 00008320 8B7702              <1> 		mov esi, [edi + 2]
 10686 00008323 8B3D[82760000]      <1> 		mov edi, [windowbufloc]
 10687 00008329 31D2                <1> 		xor edx, edx
 10688 0000832B 668B15[F2550000]    <1> 		mov dx, [resolutionx2]
 10689 00008332 C1E204              <1> 		shl edx, 4
 10690 00008335 29D7                <1> 		sub edi, edx
 10691 00008337 31D2                <1> 		xor edx, edx
 10692 00008339 668B16              <1> 		mov dx, [esi]
 10693 0000833C 660316              <1> 		add dx, [esi]
 10694 0000833F 668B4E02            <1> 		mov cx, [esi + 2]
 10695 00008343 6683C110            <1> 		add cx, 16
 10696 00008347 66A1[E36D0000]      <1> 		mov ax, [background]
 10697 0000834D 803D[80810000]01    <1> 		cmp byte [windrag], 1
 10698 00008354 7604                <1> 		jbe clearwindow
 10699 00008356 662B4E02            <1> 		sub cx, [esi + 2]
 10700                              <1> 	clearwindow:
 10701                              <1> 		%ifdef gui.background
 10702 0000835A 833D[BB6D0000]00    <1> 			cmp dword [backgroundimage], 0
 10703 00008361 7419                <1> 			je .noback
 10704 00008363 56                  <1> 			push esi
 10705 00008364 8B35[BB6D0000]      <1> 			mov esi, [backgroundimage]
 10706 0000836A 2B3D[1A550000]      <1> 			sub edi, [physbaseptr]
 10707 00008370 01FE                <1> 			add esi, edi
 10708 00008372 033D[1A550000]      <1> 			add edi, [physbaseptr]
 10709 00008378 668B06              <1> 			mov ax, [esi]
 10710 0000837B 5E                  <1> 			pop esi
 10711                              <1> 		.noback:
 10712                              <1> 		%endif
 10713 0000837C 668907              <1> 		mov [edi], ax
 10714 0000837F 83C702              <1> 		add edi, 2
 10715 00008382 83EA02              <1> 		sub edx, 2
 10716 00008385 83FA00              <1> 		cmp edx, 0
 10717 00008388 75D0                <1> 		jne clearwindow
 10718 0000838A 6649                <1> 		dec cx
 10719 0000838C 668B15[F2550000]    <1> 		mov dx, [resolutionx2]
 10720 00008393 662B16              <1> 		sub dx, [esi]
 10721 00008396 662B16              <1> 		sub dx, [esi]
 10722 00008399 01D7                <1> 		add edi, edx
 10723 0000839B 668B16              <1> 		mov dx, [esi]
 10724 0000839E 660316              <1> 		add dx, [esi]
 10725 000083A1 6683F900            <1> 		cmp cx, 0
 10726 000083A5 75B3                <1> 		jne clearwindow
 10727                              <1> 	endwindowclear:
 10728 000083A7 C605[5A230000]00    <1> 		mov byte [termcopyon], 0
 10729 000083AE 8B3D[5B7C0000]      <1> 		mov edi, [lastpos]
 10730 000083B4 8B35[8B810000]      <1> 		mov esi, [grphbuf + 2]
 10731 000083BA 668B15[8F810000]    <1> 		mov dx, [grphbuf + 6]
 10732 000083C1 668B0D[91810000]    <1> 		mov cx, [grphbuf + 8]
 10733 000083C8 668B1D[89810000]    <1> 		mov bx, [grphbuf]
 10734 000083CF 66A1[93810000]      <1> 		mov ax, [grphbuf + 10]
 10735 000083D5 88DC                <1> 		mov ah, bl
 10736 000083D7 8B1D[95810000]      <1> 		mov ebx, [grphbuf + 12]
 10737                              <1> 	showgraphicsreplace:
 10738 000083DD 897702              <1> 		mov [edi + 2], esi
 10739 000083E0 66895706            <1> 		mov [edi + 6], dx
 10740 000083E4 66894F08            <1> 		mov [edi + 8], cx
 10741 000083E8 895F0C              <1> 		mov [edi + 12], ebx
 10742 000083EB 30FF                <1> 		xor bh, bh
 10743 000083ED 88E3                <1> 		mov bl, ah
 10744 000083EF 30E4                <1> 		xor ah, ah
 10745 000083F1 6689470A            <1> 		mov [edi + 10], ax
 10746 000083F5 66891F              <1> 		mov [edi], bx
 10747 000083F8 8B5F0C              <1> 		mov ebx, [edi + 12]
 10748 000083FB 668B470A            <1> 		mov ax, [edi + 10]
 10749 000083FF C3                  <1> 		ret
 10750                              <1> 	showgraphicsnew:
 10751 00008400 BF[9CC80300]        <1> 		mov edi, graphicstable
 10752                              <1> 	shwgrph2:
 10753 00008405 66833F00            <1> 		cmp word [edi], 0
 10754 00008409 74D2                <1> 		je showgraphicsreplace
 10755 0000840B 83C710              <1> 		add edi, 16
 10756 0000840E 81FF[9CCA0300]      <1> 		cmp edi, graphicstableend
 10757 00008414 72EF                <1> 		jb shwgrph2
 10758                              <1> 	showgraphicsdone:
 10759 00008416 C3                  <1> 		ret
 10760                              <1> 	
 10761                              <1> putpixel: ;color in si, point is (dx,cx)
 10762                              <1> 		;destroys edi, ebx, eax
 10763 00008417 6650                <1> 	push ax
 10764 00008419 6653                <1> 	push bx
 10765 0000841B 31C0                <1> 	xor eax, eax
 10766 0000841D 31DB                <1> 	xor ebx, ebx
 10767 0000841F 31FF                <1> 	xor edi, edi
 10768 00008421 668B1D[06550000]    <1> 	mov bx, [resolutiony]
 10769 00008428 66A1[04550000]      <1> 	mov ax, [resolutionx]
 10770 0000842E 6639C2              <1> 	cmp dx, ax
 10771 00008431 7720                <1> 	ja .doneput
 10772 00008433 66D1E0              <1> 	shl ax, 1
 10773 00008436 6639D9              <1> 	cmp cx, bx
 10774 00008439 7718                <1> 	ja .doneput
 10775 0000843B 6689CB              <1> 	mov bx, cx
 10776 0000843E 52                  <1> 	push edx
 10777 0000843F F7E3                <1> 	mul ebx
 10778 00008441 5A                  <1> 	pop edx
 10779 00008442 6601D7              <1> 	add di, dx
 10780 00008445 6601D7              <1> 	add di, dx
 10781 00008448 01C7                <1> 	add edi, eax
 10782 0000844A 033D[1A550000]      <1> 	add edi, [physbaseptr]
 10783 00008450 668937              <1> 	mov [edi], si
 10784                              <1> .doneput:
 10785 00008453 665B                <1> 	pop bx
 10786 00008455 6658                <1> 	pop ax
 10787 00008457 C3                  <1> 	ret
 10788                              <1> 	
 10789                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10790 00008458 31FF                <1> 	xor edi, edi
 10791 0000845A 31C0                <1> 	xor eax, eax
 10792 0000845C 31DB                <1> 	xor ebx, ebx
 10793 0000845E 668B1D[F2550000]    <1> 	mov bx, [resolutionx2]
 10794 00008465 6689D7              <1> 	mov di, dx
 10795 00008468 6601D7              <1> 	add di, dx
 10796 0000846B 6689C8              <1> 	mov ax, cx
 10797 0000846E F7E3                <1> 	mul ebx
 10798 00008470 01C7                <1> 	add edi, eax
 10799 00008472 033D[1A550000]      <1> 	add edi, [physbaseptr]
 10800 00008478 C3                  <1> 	ret
 10801                              <1> 
 10802 00008479 00                  <1> 	mouseon db 0
 10803 0000847A 0000                <1> 	icon dw 0	;pointer to icon
 10804 0000847C 00000000            <1> 	codepointer dd 0 ;pointer to code
 10805 00008480 00                  <1> 	iconselected db 0
 10806                                  %endif
 10807                                  %ifdef network.included
 10808                                  	%include "source/network.asm"
 10809                                  %endif
 10810                                      %include "source/data.asm"
 10811 00008481 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 10812 00008489 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 10813 00008491 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 10814 0000849A 6E640A00            <1>
 10815 0000849E 757365726E616D653A- <1> 	userask db	"username:",0
 10816 000084A7 00                  <1>
 10817 000084A8 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10818 000084B1 00                  <1>
 10819 000084B2 40                  <1> 	computer db	"@"
 10820                              <1> %ifdef io.serial
 10821                              <1> 	computername db	"SollerOS.",io.serial," ",0
 10822                              <1> %else
 10823 000084B3 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 10824 000084BC 00                  <1>
 10825                              <1> %endif
 10826 000084BD 5D242000            <1> 	endprompt db "]$ ",0
 10827 000084C1 0D                  <1> 	crlf 	db	13
 10828 000084C2 0A00                <1> 	line	db	10,0
 10829                              <1> 	userlst:
 10830 000084C4 726F6F7400          <1> 			db "root",0
 10831 000084C9 617765736F6D65706F- <1> 			db "awesomepower",0
 10832 000084D2 77657200            <1>
 10833 000084D6 7573657200          <1> 			db "user",0
 10834 000084DB 70617373776F726400  <1> 			db "password",0
 10835 000084E4 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 10836 000084E6 00                  <1> 			db 0
 10837                              <1> 	userlstend:
 10838                              <1> 	
 10839 000084E7 00                  <1> 	guion db 0
 10840 000084E8 00                  <1> 	DriveNumber db 0
 10841 000084E9 00000000            <1> 	lbaad dd 0
 10842 000084ED 0000000000000000    <1> 	initialtsc dd 0,0
 10843 000084F5 0000000000000000    <1> 	lasttsc dd 0,0
 10844 000084FD 00<rept>            <1> 	memlistbuf times 576 db 0
 10845 0000873D 00000000            <1> 	memlistend: dd 0
 10846                              <1> %ifdef io.serial
 10847                              <1> %else
 10848                              <1> fonts:
 10849                              <1> %ifdef font.unicode
 10850 00008741 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 10851                              <1> %else
 10852                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 10853                              <1> %endif
 10854                              <1> fontend:
 10855                              <1> %endif
 10856                              <1> osend:	;this is the end of the operating system's space on disk
 10857                                  %ifdef disk.none
 10858                                  	diskfileindex:
 10859                                  	enddiskfileindex:
 10860                                      %include "source/bss.asm"
 10861                                  %else
 10862                                      %include "build/fileindex.asm"
 10863                              <1> diskfileindex:
 10864 00038741 626F6F742E736800    <1> db "boot.sh",0
 10865 00038749 C5010000            <1> dd (f0-$$)/512
 10866 0003874D 01000000            <1> dd (f1-f0)/512
 10867 00038751 646F73746573742E63- <1> db "dostest.com",0
 10868 0003875A 6F6D00              <1>
 10869 0003875D C6010000            <1> dd (f1-$$)/512
 10870 00038761 01000000            <1> dd (f2-f1)/512
 10871 00038765 6578656300          <1> db "exec",0
 10872 0003876A C7010000            <1> dd (f2-$$)/512
 10873 0003876E 01000000            <1> dd (f3-f2)/512
 10874 00038772 66696E616C636F756E- <1> db "finalcount.sn",0
 10875 0003877B 742E736E00          <1>
 10876 00038780 C8010000            <1> dd (f3-$$)/512
 10877 00038784 01000000            <1> dd (f4-f3)/512
 10878 00038788 666F726B00          <1> db "fork",0
 10879 0003878D C9010000            <1> dd (f4-$$)/512
 10880 00038791 01000000            <1> dd (f5-f4)/512
 10881 00038795 6775697465737400    <1> db "guitest",0
 10882 0003879D CA010000            <1> dd (f5-$$)/512
 10883 000387A1 03000000            <1> dd (f6-f5)/512
 10884 000387A5 696E7400            <1> db "int",0
 10885 000387A9 CD010000            <1> dd (f6-$$)/512
 10886 000387AD 01000000            <1> dd (f7-f6)/512
 10887 000387B1 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10888 000387BA 2E736E00            <1>
 10889 000387BE CE010000            <1> dd (f7-$$)/512
 10890 000387C2 01000000            <1> dd (f8-f7)/512
 10891 000387C6 6D6172696F2E736E00  <1> db "mario.sn",0
 10892 000387CF CF010000            <1> dd (f8-$$)/512
 10893 000387D3 01000000            <1> dd (f9-f8)/512
 10894 000387D7 736F6E676F74696D65- <1> db "songotime.sn",0
 10895 000387E0 2E736E00            <1>
 10896 000387E4 D0010000            <1> dd (f9-$$)/512
 10897 000387E8 01000000            <1> dd (f10-f9)/512
 10898 000387EC 73736500            <1> db "sse",0
 10899 000387F0 D1010000            <1> dd (f10-$$)/512
 10900 000387F4 02000000            <1> dd (f11-f10)/512
 10901 000387F8 74656C7900          <1> db "tely",0
 10902 000387FD D3010000            <1> dd (f11-$$)/512
 10903 00038801 01000000            <1> dd (f12-f11)/512
 10904 00038805 7475746F7269616C2E- <1> db "tutorial.sh",0
 10905 0003880E 736800              <1>
 10906 00038811 D4010000            <1> dd (f12-$$)/512
 10907 00038815 03000000            <1> dd (f13-f12)/512
 10908 00038819 756E667300          <1> db "unfs",0
 10909 0003881E D7010000            <1> dd (f13-$$)/512
 10910 00038822 02000000            <1> dd (f14-f13)/512
 10911 00038826 5F696D672E62696E00  <1> db "_img.bin",0
 10912 0003882F D9010000            <1> dd (f14-$$)/512
 10913 00038833 0C000000            <1> dd (f15-f14)/512
 10914                              <1> enddiskfileindex:
 10915                              <1> 
 10916                                      %include "source/bss.asm"
 10917 00038837 00<rept>            <1> align 512, db 0
 10918                              <1> bssstart equ $
 10919                              <1> bsscopy equ $
 10920                              <1> initialstack equ bsscopy
 10921                              <1> stackend equ initialstack + 8192
 10922                              <1> sigtable equ stackend + 4
 10923                              <1> fileindex equ sigtable + 4
 10924                              <1> fileindexend equ fileindex + 1024
 10925                              <1> previousstack equ fileindexend
 10926                              <1> lastfolderloc equ previousstack + 4
 10927                              <1> currentfolderloc equ lastfolderloc + 4
 10928                              <1> currentfolder equ currentfolderloc + 4
 10929                              <1> currentfolderend equ currentfolder + 512
 10930                              <1> uid equ currentfolderend
 10931                              <1> ranboot equ uid + 4
 10932                              <1> IFON equ ranboot + 1
 10933                              <1> IFTRUE equ IFON + 1
 10934                              <1> BATCHPOS equ IFTRUE + 100
 10935                              <1> BATCHISON equ BATCHPOS + 4
 10936                              <1> LOOPON equ BATCHISON + 1
 10937                              <1> LOOPPOS	equ LOOPON + 1
 10938                              <1> variables equ LOOPPOS + 4
 10939                              <1> varend equ variables + 4096
 10940                              <1> buftxt2 equ varend
 10941                              <1> buftxt equ buftxt2 + 1024
 10942                              <1> buftxtend equ buftxt + 1024
 10943                              <1> buf2 equ buftxtend
 10944                              <1> numbuf equ buf2 + 20
 10945                              <1> %ifdef io.serial
 10946                              <1> 	lastcommandpos equ numbuf
 10947                              <1> %else
 10948                              <1> 	%ifdef gui.included
 10949                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10950                              <1> 		graphicstableend equ graphicstable + 512
 10951                              <1> 		%ifdef gui.background
 10952                              <1> 			backgroundbuffer equ graphicstableend
 10953                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10954                              <1> 			mousecolorbuf equ backgroundbufferend
 10955                              <1> 		%else
 10956                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10957                              <1> 		%endif
 10958                              <1> 		mcolorend equ mousecolorbuf + 256
 10959                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 10960                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10961                              <1> 		videobuf2 equ videobufend
 10962                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10963                              <1> 	%else
 10964                              <1> 		videobuf equ numbuf
 10965                              <1> 		videobufend equ videobuf + 80*30*4
 10966                              <1> 		videobuf2 equ videobufend
 10967                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10968                              <1> 	%endif
 10969                              <1> 	lastcommandpos: equ videobuf2end
 10970                              <1> %endif
 10971                              <1> 	commandbufpos: equ lastcommandpos + 4
 10972                              <1> 	commandlistentries: equ commandbufpos + 4
 10973                              <1> 	commandsentered: equ commandlistentries + 4
 10974                              <1> 	commandbuf: equ commandsentered + 4
 10975                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10976                              <1> %ifdef network.included
 10977                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10978                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 10979                              <1> 	rbuffoverflow equ rbuffend + 1500
 10980                              <1> %else
 10981                              <1> 	rbuffstart equ commandbufend
 10982                              <1> 	rbuffend equ commandbufend
 10983                              <1> %endif
 10984                              <1> %ifdef threads.included
 10985                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 10986                              <1> 	threadlistend: equ threadlist + 1024*4
 10987                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10988                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 10989                              <1> 	bssend equ stack1 + 1024*2048
 10990                              <1> %else
 10991                              <1> 	bssend equ rbuffend
 10992                              <1> %endif
 10993                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10994                                      %include "build/files.asm"
 10995                              <1> align 512,db 0
 10996                              <1> f0:
 10997 00038A00 <incbin>            <1> incbin "included/boot.sh"
 10998 00038B18 00<rept>            <1> align 512,db 0
 10999                              <1> f1:
 11000 00038C00 <incbin>            <1> incbin "included/dostest.com"
 11001 00038D2F 00<rept>            <1> align 512,db 0
 11002                              <1> f2:
 11003 00038E00 <incbin>            <1> incbin "included/exec"
 11004 00038EE9 00<rept>            <1> align 512,db 0
 11005                              <1> f3:
 11006 00039000 <incbin>            <1> incbin "included/finalcount.sn"
 11007 00039102 00<rept>            <1> align 512,db 0
 11008                              <1> f4:
 11009 00039200 <incbin>            <1> incbin "included/fork"
 11010 0003934C 00<rept>            <1> align 512,db 0
 11011                              <1> f5:
 11012 00039400 <incbin>            <1> incbin "included/guitest"
 11013 0003982E 00<rept>            <1> align 512,db 0
 11014                              <1> f6:
 11015 00039A00 <incbin>            <1> incbin "included/int"
 11016 00039BA6 00<rept>            <1> align 512,db 0
 11017                              <1> f7:
 11018 00039C00 <incbin>            <1> incbin "included/lostwoods.sn"
 11019 00039CAE 00<rept>            <1> align 512,db 0
 11020                              <1> f8:
 11021 00039E00 <incbin>            <1> incbin "included/mario.sn"
 11022 00039E3A 00<rept>            <1> align 512,db 0
 11023                              <1> f9:
 11024 0003A000 <incbin>            <1> incbin "included/songotime.sn"
 11025 0003A04A 00<rept>            <1> align 512,db 0
 11026                              <1> f10:
 11027 0003A200 <incbin>            <1> incbin "included/sse"
 11028 0003A48A 00<rept>            <1> align 512,db 0
 11029                              <1> f11:
 11030 0003A600 <incbin>            <1> incbin "included/tely"
 11031 0003A7B6 00<rept>            <1> align 512,db 0
 11032                              <1> f12:
 11033 0003A800 <incbin>            <1> incbin "included/tutorial.sh"
 11034 0003AD52 00<rept>            <1> align 512,db 0
 11035                              <1> f13:
 11036 0003AE00 <incbin>            <1> incbin "included/unfs"
 11037                              <1> align 512,db 0
 11038                              <1> f14:
 11039 0003B200 <incbin>            <1> incbin "included/_img.bin"
 11040                              <1> align 512,db 0
 11041                              <1> f15:
 11042                                  %endif
