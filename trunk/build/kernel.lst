     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> %define rtl8169.included
    49                              <1> ;This includes the RTL8169 drivers
    50                              <1> 
    51                              <1> %define rtl8139.included
    52                              <1> ;This includes the RTL8139 drivers
    53                              <1> 
    54                              <1> %define ne2000.included
    55                              <1> ;This includes the ne2000 drivers
    56                              <1> 
    57                              <1> %define i8254x.included
    58                              <1> ;This includes the Intel 8254x drivers
    59                              <1> 
    60                              <1> ;%define sector.debug
    61                              <1> ;Dump the contents of the first sector of SollerOS
    62                              <1> 
    63                              <1> ;%define system.simple 
    64                              <1> ;The smallest possible system, overrides all options
    65                              <1> 
    66                              <1> ;FIX DEPENDANCIES
    67                              <1> %ifdef gui.included
    68                              <1> 	%undef io.serial
    69                              <1> %else
    70                              <1> 	%undef gui.alphablending
    71                              <1> 	%undef gui.background
    72                              <1> %endif
    73                              <1> %ifdef disk.protected
    74                              <1> 	%undef disk.real
    75                              <1> %endif
    76                              <1> %ifdef network.included
    77                              <1> %else
    78                              <1> 	%undef i8254x.included
    79                              <1> 	%undef ne2000.included
    80                              <1> 	%undef rtl8139.included
    81                              <1> 	%undef rtl8169.included
    82                              <1> %endif
    83                              <1> %ifdef system.simple
    84                              <1> 	%define io.serial "1"
    85                              <1> 	%define disk.real
    86                              <1> 	%undef gui.included
    87                              <1> 	%undef gui.alphablending
    88                              <1> 	%undef gui.background
    89                              <1> 	%undef terminal.vsync
    90                              <1> 	%undef hardware.automatic
    91                              <1> 	%undef threads.included
    92                              <1> 	%undef exceptions.included
    93                              <1> 	%undef disk.protected
    94                              <1> 	%undef sound.included
    95                              <1> 	%undef network.included
    96                              <1> 	%undef rtl8139.included
    97                              <1> 	%undef rtl8169.included
    98                              <1> 	%undef ne2000.included
    99                              <1> 	%undef i8254x.included
   100                              <1> 	%undef sector.debug
   101                              <1> %endif
   102                                  [BITS 16]
   103                                      %include "source/boot.asm"
   104                              <1>     ; MENU.ASM
   105                              <1> %include 'source/signature.asm'
   106                              <2> signature:
   107 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
   108 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
   109 00000011 696C642000          <2>
   110 00000016 E7000000            <2> dd 231	;version number
   111                              <2> signatureend:
   112                              <1> menustart:	
   113 0000001A 8CC8                <1> 	mov ax, cs
   114 0000001C 8ED8                <1> 	mov ds, ax
   115 0000001E 8EC0                <1> 	mov es, ax
   116 00000020 8ED0                <1> 	mov ss, ax
   117 00000022 880E[399F]          <1> 	mov [DriveNumber], cl
   118 00000026 668916[3A9F]        <1> 	mov [lbaad], edx
   119                              <1> %ifdef io.serial
   120                              <1> 	call getmemorysize
   121                              <1> 	mov si, serialmsg
   122                              <1> 	call printrm
   123                              <1> 	jmp pmode
   124                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   125                              <1> %else
   126 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   127 0000002E E95700              <1> 	jmp pmode
   128                              <1> %endif
   129                              <1> 	
   130                              <1> vgaset:
   131 00000031 B81200              <1> 	mov ax, 12h
   132 00000034 31DB                <1> 	xor bx, bx
   133 00000036 CD10                <1> 	int 10h
   134 00000038 C606[389F]00        <1> 	mov byte [guion], 0
   135 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   136 00000040 C3                  <1> 	ret
   137                              <1> 
   138                              <1> getmemorysize:
   139 00000041 BF[3E9F]            <1> 	mov di, memlistbuf
   140 00000044 6631DB              <1> 	xor ebx, ebx
   141                              <1> getmemsizeloop:
   142 00000047 66B820E80000        <1> 	mov eax, 0xE820
   143 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   144 00000053 66B918000000        <1> 	mov ecx, 24
   145 00000059 CD15                <1> 	int 0x15
   146 0000005B 81C71800            <1> 	add di, 24
   147 0000005F 81FF[7EA1]          <1> 	cmp di, memlistend
   148 00000063 7309                <1> 	jae nomoregetmemsize
   149 00000065 6681FB00000000      <1> 	cmp ebx, 0
   150 0000006C 75D9                <1> 	jne getmemsizeloop
   151                              <1> nomoregetmemsize:
   152 0000006E 81EF[3E9F]          <1> 	sub di, memlistbuf
   153 00000072 893E[7EA1]          <1> 	mov [memlistend], di
   154 00000076 C3                  <1> 	ret
   155                              <1> 	
   156                              <1> printrm:			; 'si' comes in with string address
   157 00000077 BB0700              <1>     mov bx,07		; write to display
   158 0000007A B40E                <1>     mov ah,0Eh		; screen function
   159 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   160 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   161 00000080 7405                <1>     je .done		; zero byte at end of string
   162 00000082 CD10                <1>     int 10h		; write character to screen.    
   163 00000084 46                  <1> 	inc si	     	; move to next character
   164 00000085 EBF5                <1>     jmp .lp		; loop
   165 00000087 C3                  <1> .done: ret
   166                                      %include "source/pmode.asm"
   167                              <1> [BITS 16]
   168                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   169                              <1> ;	16-bit real mode
   170                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   171                              <1> 
   172                              <1> pmode:
   173 00000088 6631C0              <1> 	xor eax, eax
   174 0000008B 6631DB              <1> 	xor ebx, ebx
   175 0000008E 6631C9              <1> 	xor ecx, ecx
   176 00000091 6631D2              <1> 	xor edx, edx
   177 00000094 6631F6              <1> 	xor esi, esi
   178 00000097 6631FF              <1> 	xor edi, edi
   179 0000009A BA9200              <1> 	mov dx, 0x92
   180 0000009D EC                  <1> 	in al, dx	;;A20
   181 0000009E 0C02                <1> 	or al, 2
   182 000000A0 EE                  <1> 	out dx, al
   183 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   184 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   185 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   186 000000AB A3[9503]            <1> 	mov [gdt2 + 2],ax
   187 000000AE A3[9D03]            <1> 	mov [gdt3 + 2],ax
   188 000000B1 66C1E810            <1> 	shr eax,16
   189 000000B5 A2[9703]            <1> 	mov [gdt2 + 4],al
   190 000000B8 A2[9F03]            <1> 	mov [gdt3 + 4],al
   191 000000BB 8826[9A03]          <1> 	mov [gdt2 + 7],ah
   192 000000BF 8826[A203]          <1> 	mov [gdt3 + 7],ah
   193                              <1> 
   194 000000C3 66B8[7EA10000]      <1> 	mov eax, initialstack
   195 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   196 000000CE A3[8D03]            <1> 	mov [gdts + 2],ax
   197 000000D1 66C1E810            <1> 	shr eax, 16
   198 000000D5 A2[8F03]            <1> 	mov [gdts + 4],al
   199 000000D8 8826[9203]          <1> 	mov [gdts + 7], ah
   200                              <1> 	
   201 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   202 000000E0 A3[A503]            <1> 	mov [gdt4 + 2],ax
   203 000000E3 A3[AD03]            <1> 	mov [gdt5 + 2],ax
   204 000000E6 A3[B503]            <1> 	mov [gdtv8086 + 2], ax
   205 000000E9 A3[BD03]            <1> 	mov [gdtv80862 + 2], ax
   206 000000EC 66C1E810            <1> 	shr eax,16
   207 000000F0 A2[A703]            <1> 	mov [gdt4 + 4],al
   208 000000F3 A2[AF03]            <1> 	mov [gdt5 + 4],al
   209 000000F6 A2[B703]            <1> 	mov [gdtv8086 + 4],al
   210 000000F9 A2[BF03]            <1> 	mov [gdtv80862 + 4],al
   211 000000FC 8826[AA03]          <1> 	mov [gdt4 + 7],ah
   212 00000100 8826[B203]          <1> 	mov [gdt5 + 7],ah
   213 00000104 8826[BA03]          <1> 	mov [gdtv8086 + 7],ah
   214 00000108 8826[C203]          <1> 	mov [gdtv80862 + 7],ah
   215                              <1> 	
   216 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   217 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   218 00000117 A3[C503]            <1> 	mov [gdtdos + 2],ax
   219 0000011A A3[CD03]            <1> 	mov [gdtdos2 + 2],ax
   220 0000011D 66C1E810            <1> 	shr eax,16
   221 00000121 A2[C703]            <1> 	mov [gdtdos + 4],al
   222 00000124 A2[CF03]            <1> 	mov [gdtdos2 + 4],al
   223 00000127 8826[CA03]          <1> 	mov [gdtdos + 7],ah
   224 0000012B 8826[D203]          <1> 	mov [gdtdos2 + 7],ah
   225                              <1> 	
   226                              <1> ; fix up gdt and idt
   227 0000012F 67668D83[7B030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   228 00000137 66A3[7103]          <1> 	mov [gdtr + 2],eax
   229 0000013B 67668D83[D3030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   230 00000143 66A3[7703]          <1> 	mov [idtr + 2],eax
   231 00000147 FA                  <1> 	cli
   232 00000148 0F0116[6F03]        <1> 	lgdt [gdtr]
   233 0000014D 0F011E[7503]        <1> 	lidt [idtr]
   234 00000152 6631DB              <1> 	xor ebx, ebx
   235 00000155 8CDB                <1> 	mov bx, ds
   236 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   237 0000015C 0F20C0              <1> 	mov eax,cr0
   238 0000015F 0C01                <1> 	or al,1
   239 00000161 0F22C0              <1> 	mov cr0,eax
   240 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   241                              <1> [BITS 32]
   242                              <1> do_pm:
   243 00000169 31C0                <1> 	xor eax, eax
   244 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   245 0000016F 8ED8                <1> 	mov ds, ax
   246 00000171 8EC0                <1> 	mov es, ax
   247 00000173 8EE0                <1> 	mov fs, ax
   248 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   249 00000179 8EE8                <1> 	mov gs, ax
   250                              <1> 	
   251                              <1> copykernel:
   252 0000017B 648B06              <1> 	mov eax, [fs:esi]
   253 0000017E 658906              <1> 	mov [gs:esi], eax
   254 00000181 81C604000000        <1> 	add esi, 4
   255 00000187 81FE[7EA10000]      <1> 	cmp esi, bsscopy
   256 0000018D 72EC                <1> 	jb copykernel
   257 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   258                              <1> 	
   259                              <1> done_copy:
   260 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   261 0000019A 8ED8                <1> 	mov ds, ax
   262 0000019C 8EC0                <1> 	mov es, ax
   263 0000019E 8EE0                <1> 	mov fs, ax
   264                              <1> 	;mov ax, STACK_SEL
   265 000001A0 8ED0                <1> 	mov ss, ax
   266 000001A2 BC[1EB10000]        <1> 	mov esp, stackend
   267 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   268 000001AB 8EE8                <1> 	mov gs, ax
   269                              <1> 	
   270 000001AD E8A15D0000          <1> 	call initialize	;initialize drivers
   271                              <1> 	
   272 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   273 000001B7 C1E804              <1> 	shr eax, 4
   274 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   275                              <1> 	
   276 000001BF BE[80003A00]        <1> 	mov esi, bssend
   277 000001C4 31C0                <1> 	xor eax, eax
   278                              <1> clearkernelbuffers:
   279 000001C6 8906                <1> 	mov [esi], eax
   280 000001C8 81EE04000000        <1> 	sub esi, 4
   281 000001CE 81FE[7EA10000]      <1> 	cmp esi, bsscopy
   282 000001D4 77F0                <1> 	ja clearkernelbuffers
   283 000001D6 FB                  <1> 	sti
   284                              <1> 
   285                              <1> getmemoryspace:
   286 000001D7 BE[3E9F0000]        <1> 	mov esi, memlistbuf
   287 000001DC 31FF                <1> 	xor edi, edi
   288 000001DE 668B3D[7EA10000]    <1> 	mov di, [memlistend]
   289 000001E5 01F7                <1> 	add edi, esi
   290 000001E7 31C0                <1> 	xor eax, eax
   291                              <1> memoryspaceaddition:
   292 000001E9 39FE                <1> 	cmp esi, edi
   293 000001EB 7322                <1> 	jae finishedmemspacecalc
   294 000001ED 81C608000000        <1> 	add esi, 8
   295 000001F3 8B0E                <1> 	mov ecx, [esi]
   296 000001F5 81C608000000        <1> 	add esi, 8
   297 000001FB 8B1E                <1> 	mov ebx, [esi]
   298 000001FD 81C608000000        <1> 	add esi, 8
   299 00000203 81FB01000000        <1> 	cmp ebx, 1
   300 00000209 75DE                <1> 	jne memoryspaceaddition
   301 0000020B 01C8                <1> 	add eax, ecx
   302 0000020D EBDA                <1> 	jmp memoryspaceaddition
   303                              <1> finishedmemspacecalc:
   304 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   305                              <1> %ifdef gui.included
   306 00000214 803D[389F0000]00    <1> 	cmp byte [guion], 0
   307 0000021B 741C                <1> 	je normalstartup
   308 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   309 00000223 C1E304              <1> 	shl ebx, 4
   310 00000226 8B3D[3F550000]      <1> 	mov edi, [physbaseptr]
   311 0000022C 29DF                <1> 	sub edi, ebx
   312 0000022E 893D[3F550000]      <1> 	mov [physbaseptr], edi
   313 00000234 E9DF620000          <1> 	jmp guiboot
   314                              <1> %endif
   315                              <1> normalstartup:
   316 00000239 E9C6250000          <1> 	jmp os
   317                              <1> 	
   318 0000023E 00000000            <1> basecache dd 0
   319 00000242 00001000            <1> newcodecache dd 0x100000
   320                              <1> 
   321 00000246 00                  <1> testingcpuspeed db 0
   322 00000247 00000000            <1> cpuspeedperint dd 0
   323 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   324 00000253 00000000            <1> memoryspace dd 0
   325 00000257 7D0A                <1> pitdiv dw 2685
   326 00000259 2E562200            <1> timeinterval dd 2250286
   327 0000025D 00000000            <1> timeseconds dd 0
   328 00000261 00000000            <1> timenanoseconds dd 0
   329 00000265 00                  <1> soundon db 0
   330 00000266 0000                <1> soundrepititions dw 0
   331 00000268 00000000            <1> soundpos dd 0
   332 0000026C 00000000            <1> soundendpos dd 0
   333                              <1> 
   334                              <1> cpuspeedend:
   335 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   336 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   337 0000027C B8[004C0000]        <1> 	mov eax, cpuspeedloopend
   338 00000281 890424              <1> 	mov [esp], eax
   339 00000284 E9D6000000          <1> 	jmp handled
   340                              <1> 
   341                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   342                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   343                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   344                              <1> 
   345                              <1> pitinterrupt: ;this controls threading
   346 00000289 FA                  <1> 	cli
   347 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   348 00000291 74DD                <1> 	je cpuspeedend
   349                              <1> 		
   350 00000293 E8A0000000          <1> 	call timekeeper ;this updates the internal time
   351                              <1> 	
   352 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   353 0000029F 0F847E560000        <1> 	je near PCSpeakerRAW
   354                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   355                              <1> %ifdef threads.included
   356 000002A5 803D[13650000]01    <1> 	cmp byte [threadson], 1
   357 000002AC 0F8401620000        <1> 	je near threadswitch
   358                              <1> %endif
   359                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   360 000002B2 803D[13650000]00    <1> 	cmp byte [threadson], 0
   361 000002B9 0F84A0000000        <1> 	je near handled
   362                              <1> %ifdef io.serial
   363                              <1> 	jmp handled
   364                              <1> %else
   365 000002BF 60                  <1> 	pusha
   366 000002C0 E464                <1> 	in al, 64h
   367 000002C2 A820                <1> 	test al, 20h
   368 000002C4 0F8593000000        <1> 	jnz near handled2
   369 000002CA E460                <1> 	in al, 60h
   370 000002CC 3C01                <1> 	cmp al, 1		;escape
   371 000002CE 7405                <1> 	je userint
   372 000002D0 E988000000          <1> 	jmp handled2
   373                              <1> userint:
   374                              <1> 	;UNMASK ALL INTS
   375 000002D5 30C0                <1> 	xor al, al
   376 000002D7 E621                <1> 	out 0x21, al
   377 000002D9 30C0                <1> 	xor al, al
   378 000002DB E6A1                <1> 	out 0xA1, al
   379 000002DD B020                <1> 	mov al, 0x20
   380 000002DF E6A0                <1> 	out 0xA0, al
   381 000002E1 E620                <1> 	out 0x20, al
   382                              <1> 	;RESET PIT DIVISOR
   383 000002E3 66A1[57020000]      <1> 	mov ax, [pitdiv]
   384 000002E9 E640                <1> 	out 0x40, al
   385 000002EB 66C1C008            <1> 	rol ax, 8
   386 000002EF E640                <1> 	out 0x40, al
   387                              <1> 	;RESET PIC
   388 000002F1 B020                <1> 	mov al, 0x20
   389 000002F3 E620                <1> 	out 0x20, al
   390 000002F5 61                  <1> 	popa
   391 000002F6 FB                  <1> 	sti
   392 000002F7 BC[1EB10000]        <1> 	mov esp, stackend ;reset stack
   393 000002FC E95A260000          <1> 	jmp returnfromexp
   394                              <1> %endif
   395 00000301 0A                  <1> rtcrate db 10
   396                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   397                              <1> %ifdef io.serial
   398                              <1> %else
   399                              <1> %ifdef terminal.vsync
   400                              <1> 	cli
   401                              <1> 	cmp byte [termcopyneeded], 0
   402                              <1> 	je .nocopy
   403                              <1> 	call newtermcopy
   404                              <1> .nocopy
   405                              <1> 	push eax
   406                              <1> 	mov al, 0xC
   407                              <1> 	out 0x70, al
   408                              <1> 	in al, 0x71
   409                              <1> 	pop eax
   410                              <1> 	sti
   411                              <1> %endif
   412                              <1> %endif
   413 00000302 E95F000000          <1> 	jmp handled4
   414                              <1> %ifdef rtl8139.included
   415                              <1> rtl8139.irq:
   416 00000307 FA                  <1> 	cli
   417 00000308 52                  <1> 	push edx
   418 00000309 50                  <1> 	push eax
   419 0000030A 8B15[66820000]      <1> 	mov edx, [rtl8139.basenicaddr]
   420 00000310 81C23E000000        <1> 	add edx, rtl8139.ISR
   421 00000316 31C0                <1> 	xor eax, eax
   422 00000318 66ED                <1> 	in ax, dx
   423 0000031A 66EF                <1> 	out dx, ax
   424 0000031C 58                  <1> 	pop eax
   425 0000031D 5A                  <1> 	pop edx
   426 0000031E FB                  <1> 	sti
   427 0000031F E942000000          <1> 	jmp handled4
   428                              <1> %endif
   429                              <1> %ifdef sound.included
   430                              <1> sblaster.irq:
   431 00000324 FA                  <1> 	cli
   432 00000325 60                  <1> 	pusha
   433 00000326 803D[095C0000]01    <1> 	cmp byte [SoundBlaster], 1
   434 0000032D 0F84E1560000        <1> 	je near sblaster.cont
   435 00000333 E925000000          <1> 	jmp handled2
   436                              <1> %endif
   437                              <1> 	
   438                              <1> timekeeper:
   439 00000338 50                  <1> 	push eax
   440 00000339 A1[61020000]        <1> 	mov eax, [timenanoseconds]
   441 0000033E 0305[59020000]      <1> 	add eax, [timeinterval]
   442 00000344 3D00CA9A3B          <1> 	cmp eax, 1000000000
   443 00000349 720B                <1> 	jb nonanosecondrollover
   444 0000034B FF05[5D020000]      <1> 	inc dword [timeseconds]
   445 00000351 2D00CA9A3B          <1> 	sub eax, 1000000000
   446                              <1> 	%ifdef gui.time
   447                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   448                              <1> 		cmp byte [guion], 1
   449                              <1> 		jne nonanosecondrollover
   450                              <1> 		cmp dword [dragging], 0
   451                              <1> 		jne nonanosecondrollover
   452                              <1> 		pusha
   453                              <1> 		call guitime
   454                              <1> 		popa
   455                              <1> 	%endif
   456                              <1> nonanosecondrollover:
   457 00000356 A3[61020000]        <1> 	mov [timenanoseconds], eax
   458 0000035B 58                  <1> 	pop eax
   459 0000035C C3                  <1> 	ret
   460                              <1> 	
   461                              <1> handled2:
   462 0000035D 61                  <1> 	popa
   463                              <1> handled3:
   464 0000035E FB                  <1> 	sti
   465                              <1> handled:
   466 0000035F 50                  <1> 	push eax
   467 00000360 B020                <1> 	mov al, 0x20
   468 00000362 E620                <1> 	out 0x20, al
   469 00000364 58                  <1> 	pop eax
   470 00000365 CF                  <1> 	iret
   471                              <1> handled4:
   472 00000366 50                  <1> 	push eax
   473 00000367 B020                <1> 	mov al, 0x20
   474 00000369 E6A0                <1> 	out 0xA0, al
   475 0000036B E620                <1> 	out 0x20, al
   476 0000036D 58                  <1> 	pop eax
   477 0000036E CF                  <1> 	iret
   478                              <1> [BITS 16]
   479                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   481                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   482 0000036F 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   483 00000371 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   484                              <1> 
   485 00000375 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   486 00000377 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   487                              <1> 
   488                              <1> 
   489 0000037B 0000                <1> gdt:	dw 0			; limit 15:0
   490 0000037D 0000                <1> 	dw 0			; base 15:0
   491 0000037F 00                  <1> 	db 0			; base 23:16
   492 00000380 00                  <1> 	db 0			; type
   493 00000381 00                  <1> 	db 0			; limit 19:16, flags
   494 00000382 00                  <1> 	db 0			; base 31:24
   495                              <1> ; linear data segment descriptor
   496                              <1> LINEAR_SEL	equ	$-gdt
   497 00000383 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   498 00000385 0000                <1> 	dw 0			; base for this one is always 0
   499 00000387 00                  <1> 	db 0
   500 00000388 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   501 00000389 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   502 0000038A 00                  <1> 	db 0
   503                              <1> STACK_SEL	equ $-gdt
   504 0000038B 0200                <1> gdts:	dw 2;(stackend)/4096
   505 0000038D 0000                <1> 	dw 0
   506 0000038F 00                  <1> 	db 0
   507 00000390 92                  <1> 	db 0x92
   508 00000391 CF                  <1> 	db 0xCF
   509 00000392 00                  <1> 	db 0
   510                              <1> ; code segment descriptor
   511                              <1> SYS_CODE_SEL	equ	$-gdt
   512 00000393 FFFF                <1> gdt2:	dw 0xFFFF
   513 00000395 0000                <1> 	dw 0			; (base gets set above)
   514 00000397 00                  <1> 	db 0
   515 00000398 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   516 00000399 CF                  <1> 	db 0xCF
   517 0000039A 00                  <1> 	db 0
   518                              <1> ; data segment descriptor
   519                              <1> SYS_DATA_SEL	equ	$-gdt
   520 0000039B FFFF                <1> gdt3:	dw 0xFFFF
   521 0000039D 0000                <1> 	dw 0			; (base gets set above)
   522 0000039F 00                  <1> 	db 0
   523 000003A0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   524 000003A1 CF                  <1> 	db 0xCF
   525 000003A2 00                  <1> 	db 0
   526                              <1> NEW_CODE_SEL	equ	$-gdt
   527 000003A3 FFFF                <1> gdt4:	dw 0xFFFF
   528 000003A5 0000                <1> 	dw 0			; (base gets set above)
   529 000003A7 00                  <1> 	db 0
   530 000003A8 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   531 000003A9 CF                  <1> 	db 0xCF
   532 000003AA 00                  <1> 	db 0
   533                              <1> ; data segment descriptor
   534                              <1> NEW_DATA_SEL	equ	$-gdt
   535 000003AB FFFF                <1> gdt5:	dw 0xFFFF
   536 000003AD 0000                <1> 	dw 0			; (base gets set above)
   537 000003AF 00                  <1> 	db 0
   538 000003B0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   539 000003B1 CF                  <1> 	db 0xCF
   540 000003B2 00                  <1> 	db 0
   541                              <1> V8086_CODE_SEL	equ $-gdt
   542 000003B3 FFFF                <1> gdtv8086: dw 0xFFFF
   543 000003B5 0000                <1> 	dw 0
   544 000003B7 00                  <1> 	db 0
   545 000003B8 9A                  <1> 	db 0x9A
   546 000003B9 8F                  <1> 	db 0x8F
   547 000003BA 00                  <1> 	db 0
   548                              <1> V8086_DATA_SEL	equ $-gdt
   549 000003BB FFFF                <1> gdtv80862: dw 0xFFFF
   550 000003BD 0000                <1> 	dw 0
   551 000003BF 00                  <1> 	db 0
   552 000003C0 92                  <1> 	db 0x92
   553 000003C1 8F                  <1> 	db 0x8F
   554 000003C2 00                  <1> 	db 0
   555                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   556 000003C3 0001                <1> gdtdos:	dw 256	;give it 1 MB
   557 000003C5 0000                <1> 	dw 0
   558 000003C7 00                  <1> 	db 0
   559 000003C8 9A                  <1> 	db 0x9A
   560 000003C9 8F                  <1> 	db 0x8F ;16 bit
   561 000003CA 00                  <1> 	db 0
   562                              <1> DOS_DATA_SEL 	equ $-gdt
   563 000003CB 0001                <1> gdtdos2:	dw 256
   564 000003CD 0000                <1> 	dw 0
   565 000003CF 00                  <1> 	db 0
   566 000003D0 92                  <1> 	db 0x92
   567 000003D1 8F                  <1> 	db 0x8F ;16 bit
   568 000003D2 00                  <1> 	db 0
   569                              <1> gdt_end:
   570                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   571                              <1> ;	interrupt descriptor table (IDT)
   572                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   573                              <1> ; 32 reserved interrupts:
   574                              <1> idt:	
   575                              <1> %assign i 0
   576                              <1> %rep    8
   577                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   578                              <1> %assign i i+1
   579                              <1> %endrep
   580 000003D3 [F40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 000003DB [000D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 000003E3 [0C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 000003EB [180D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 000003F3 [240D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 000003FB [300D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000403 [3C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 0000040B [480D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 00000413 [540D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   597                              <1> %assign i 9
   598                              <1> %rep    23
   599                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   600                              <1> %assign i i+1
   601                              <1> %endrep
   602 0000041B [600D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 00000423 [6C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 0000042B [780D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 00000433 [840D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 0000043B [900D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 00000443 [9C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 0000044B [A80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 00000453 [B40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 0000045B [C00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i i+1
   620 00000463 [CC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i i+1
   622 0000046B [D80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i i+1
   624 00000473 [E40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i i+1
   626 0000047B [F00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   627                              <2> %assign i i+1
   628 00000483 [FC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   629                              <2> %assign i i+1
   630 0000048B [080E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   631                              <2> %assign i i+1
   632 00000493 [140E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <2> %assign i i+1
   634 0000049B [200E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   635                              <2> %assign i i+1
   636 000004A3 [2C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000004AB [380E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000004B3 [440E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000004BB [500E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000004C3 [5C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000004CB [680E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000004D3 [CA26]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   649 000004DB [CE26]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   650                              <1> %assign i 0x22
   651                              <1> %rep 14
   652                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   653                              <1> %assign i +1
   654                              <1> %endrep
   655 000004E3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 000004EB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 000004F3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661 000004FB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i +1
   663 00000503 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i +1
   665 0000050B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i +1
   667 00000513 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i +1
   669 0000051B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i +1
   671 00000523 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i +1
   673 0000052B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i +1
   675 00000533 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i +1
   677 0000053B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i +1
   679 00000543 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i +1
   681 0000054B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i +1
   683                              <1> ;INT 30h for os use and 3rd party use:
   684 00000553 [E71B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   685                              <1> %assign i 0x31
   686                              <1> %rep 15
   687                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   688                              <1> %assign i +1
   689                              <1> %endrep
   690 0000055B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 00000563 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 0000056B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 00000573 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698 0000057B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i +1
   700 00000583 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i +1
   702 0000058B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i +1
   704 00000593 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i +1
   706 0000059B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i +1
   708 000005A3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i +1
   710 000005AB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 000005B3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 000005BB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716 000005C3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i +1
   718 000005CB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> %assign i +1
   720                              <1> ;and here we are at 0x40
   721                              <1> ;here are all the irq's
   722 000005D3 [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   723 000005DB [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   724 000005E3 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   725 000005EB [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   726 000005F3 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   727                              <1> 	%ifdef sound.included
   728 000005FB [2403]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   729                              <1> 	%else
   730                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   731                              <1> 	%endif
   732 00000603 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   733 0000060B [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   734 00000613 [0203]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   735 0000061B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   736 00000623 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   737                              <1> 	%ifdef rtl8139.included
   738 0000062B [0703]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   739                              <1> 	%else
   740                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   741                              <1> 	%endif
   742 00000633 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   743 0000063B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   744 00000643 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   745 0000064B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   746                              <1> ;This brings me up to 0x50
   747                              <1> %assign i 0x50
   748                              <1> %rep 176
   749                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   750                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   751                              <1> %assign i +1
   752                              <1> %endrep
   753 00000653 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 0000065B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 00000663 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 0000066B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 00000673 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 0000067B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 00000683 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 0000068B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 00000693 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 0000069B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 000006A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 000006AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 000006B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 000006BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 000006C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 000006CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 000006D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 000006DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000006E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000006EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000006F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000006FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 00000703 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 0000070B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 00000713 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 0000071B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 00000723 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 0000072B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000733 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 0000073B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000743 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 0000074B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000753 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 0000075B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000763 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 0000076B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000773 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 0000077B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000783 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 0000078B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000793 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 0000079B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 000007A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 000007AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 000007B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 000007BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 000007C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 000007CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 000007D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000007DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000007E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000007EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000007F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000007FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 00000803 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 0000080B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 00000813 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 0000081B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 00000823 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 0000082B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000833 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 0000083B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000843 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 0000084B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000853 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 0000085B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000863 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 0000086B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000873 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 0000087B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000883 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 0000088B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000893 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 0000089B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 000008A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 000008AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 000008B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 000008BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 000008C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 000008CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 000008D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000008DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000008E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000008EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000008F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000008FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 00000903 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 0000090B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 00000913 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 0000091B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 00000923 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 0000092B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000933 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 0000093B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000943 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 0000094B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000953 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 0000095B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000963 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 0000096B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000973 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 0000097B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000983 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 0000098B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000993 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 0000099B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 000009A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 000009AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 000009B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 000009BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 000009C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 000009CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 000009D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 000009DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 000009E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 000009EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 000009F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 000009FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000A03 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000A0B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000A13 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000A1B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000A23 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000A2B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000A33 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000A3B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000A43 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000A4B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000A53 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000A5B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000A63 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000A6B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000A73 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000A7B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000A83 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000A8B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000A93 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000A9B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000AA3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000AAB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000AB3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000ABB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000AC3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000ACB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000AD3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000ADB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000AE3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000AEB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000AF3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000AFB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000B03 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000B0B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000B13 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000B1B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000B23 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000B2B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000B33 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000B3B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000B43 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000B4B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000B53 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000B5B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000B63 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000B6B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000B73 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000B7B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000B83 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000B8B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000B93 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000B9B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000BA3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000BAB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000BB3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000BBB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000BC3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000BCB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281                              <1> idt_end:
  1282                              <1> [BITS 32]
  1283                                  	%include "source/realmode.asm"
  1284                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1285                              <1> 			;and the return address is in realmodereturn
  1286 00000BD3 FA                  <1> 	cli
  1287 00000BD4 A3[E60C0000]        <1> 	mov [realmodeeax], eax
  1288 00000BD9 891D[E20C0000]      <1> 	mov [realmodeebx], ebx
  1289 00000BDF 8925[D40C0000]      <1> 	mov [pmodeesp], esp
  1290                              <1> 
  1291 00000BE5 BB[DE0C0000]        <1> 	mov ebx, cr0old
  1292                              <1> rmcopytofirstmbyte:
  1293 00000BEA 8B03                <1> 	mov eax, [ebx]
  1294 00000BEC 658903              <1> 	mov [gs:ebx], eax
  1295 00000BEF 81C304000000        <1> 	add ebx, 4
  1296 00000BF5 81FB[EE0C0000]      <1> 	cmp ebx, realmodeptr
  1297 00000BFB 76ED                <1> 	jbe rmcopytofirstmbyte
  1298                              <1> 
  1299 00000BFD EA[040C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1300                              <1> 
  1301                              <1> [BITS 16]
  1302                              <1> protected16bit:
  1303 00000C04 B84000              <1> 	mov ax, V8086_DATA_SEL
  1304 00000C07 8ED8                <1> 	mov ds, ax
  1305 00000C09 8EC0                <1> 	mov es, ax
  1306 00000C0B 8EE0                <1> 	mov fs, ax
  1307 00000C0D 8EE8                <1> 	mov gs, ax
  1308 00000C0F 8ED0                <1> 	mov ss, ax
  1309 00000C11 66BC[1EB10000]      <1> 	mov esp, stackend
  1310 00000C17 0F20C0              <1> 	mov eax, cr0
  1311 00000C1A 66A3[DE0C]          <1> 	mov [cr0old], eax
  1312 00000C1E 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1313 00000C24 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1314 00000C27 EA[2C0C]0010        <1> 	jmp 0x1000:inrealmode
  1315                              <1> 
  1316                              <1> inrealmode:
  1317 00000C2C 8CC8                <1> 	mov ax, cs
  1318 00000C2E 8ED8                <1> 	mov ds, ax
  1319 00000C30 8EC0                <1> 	mov es, ax
  1320 00000C32 8EE0                <1> 	mov fs, ax
  1321 00000C34 8EE8                <1> 	mov gs, ax
  1322 00000C36 8ED0                <1> 	mov ss, ax
  1323 00000C38 BC[1EB1]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1324                              <1> 	
  1325 00000C3B B011                <1> 	mov al, 0x11
  1326 00000C3D E620                <1> 	out 0x20, al
  1327 00000C3F E6A0                <1> 	out 0xA0, al
  1328 00000C41 B008                <1> 	mov al, 0x8		;interrupt for master
  1329 00000C43 E621                <1> 	out 0x21, al
  1330 00000C45 B070                <1> 	mov al, 0x70	;interrupt for slave
  1331 00000C47 E6A1                <1> 	out 0xA1, al
  1332 00000C49 B004                <1> 	mov al, 4
  1333 00000C4B E621                <1> 	out 0x21, al
  1334 00000C4D B002                <1> 	mov al, 2
  1335 00000C4F E6A1                <1> 	out 0xA1, al
  1336 00000C51 B001                <1> 	mov al, 0x1
  1337 00000C53 E621                <1> 	out 0x21, al
  1338 00000C55 B001                <1> 	mov al, 0x1
  1339 00000C57 E6A1                <1> 	out 0xA1, al
  1340                              <1> 	
  1341 00000C59 0F011E[D80C]        <1> 	lidt [idt_real]
  1342 00000C5E FB                  <1> 	sti
  1343                              <1> 
  1344 00000C5F 66A1[E60C]          <1> 	mov eax, [realmodeeax]
  1345 00000C63 668B1E[E20C]        <1> 	mov ebx, [realmodeebx]
  1346                              <1> 
  1347 00000C68 FF16[EE0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1348                              <1> 
  1349 00000C6C 66A3[E60C]          <1> 	mov [realmodeeax], eax
  1350 00000C70 66891E[E20C]        <1> 	mov [realmodeebx], ebx
  1351                              <1> 
  1352 00000C75 FA                  <1> 	cli
  1353 00000C76 0F0116[6F03]        <1> 	lgdt [gdtr]
  1354 00000C7B 0F011E[7503]        <1> 	lidt [idtr]
  1355 00000C80 0F20C0              <1> 	mov eax, cr0
  1356 00000C83 0C01                <1> 	or al, 1
  1357 00000C85 0F22C0              <1> 	mov cr0,eax
  1358 00000C88 EA[8D0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1359                              <1> 
  1360                              <1> [BITS 32]
  1361                              <1> returntopmode:
  1362 00000C8D 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1363 00000C91 8ED8                <1> 	mov ds, ax
  1364 00000C93 8EC0                <1> 	mov es, ax
  1365 00000C95 8EE0                <1> 	mov fs, ax
  1366 00000C97 8ED0                <1> 	mov ss, ax
  1367 00000C99 8B25[D40C0000]      <1> 	mov esp, [pmodeesp]
  1368 00000C9F 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1369 00000CA3 8EE8                <1> 	mov gs, ax
  1370                              <1> 
  1371 00000CA5 BB[DE0C0000]        <1> 	mov ebx, cr0old
  1372                              <1> rmcopyfromfirstmbyte:
  1373 00000CAA 658B03              <1> 	mov eax, [gs:ebx]
  1374 00000CAD 8903                <1> 	mov [ebx], eax
  1375 00000CAF 81C304000000        <1> 	add ebx, 4
  1376 00000CB5 81FB[EE0C0000]      <1> 	cmp ebx, realmodeptr
  1377 00000CBB 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1378                              <1> 
  1379 00000CBD E8AA520000          <1> 	call initialize.pic ;reset irq's and masks
  1380 00000CC2 FB                  <1> 	sti
  1381 00000CC3 A1[E60C0000]        <1> 	mov eax, [realmodeeax]
  1382 00000CC8 8B1D[E20C0000]      <1> 	mov ebx, [realmodeebx]
  1383 00000CCE FF25[EA0C0000]      <1> 	jmp dword [realmodereturn]
  1384                              <1> 	
  1385 00000CD4 00000000            <1> pmodeesp dd 0
  1386                              <1> idt_real:
  1387 00000CD8 FF03                <1> 	dw 0x3FF
  1388 00000CDA 00000000            <1> 	dd 0
  1389 00000CDE 00000000            <1> cr0old dd 0
  1390 00000CE2 00000000            <1> realmodeebx dd 0
  1391 00000CE6 00000000            <1> realmodeeax dd 0
  1392 00000CEA 00000000            <1> realmodereturn dd 0
  1393 00000CEE 0000                <1> realmodeptr dw 0
  1394 00000CF0 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1395                                  [BITS 32]
  1396                                      %include "source/exception.asm"
  1397                              <1> %ifdef exceptions.included
  1398                              <1> unhand:	
  1399                              <1> 	%assign i 0
  1400                              <1> 	%rep 32
  1401                              <1> 	mov byte [intprob], i
  1402                              <1> 	jmp unhand2
  1403                              <1> 	%assign i i+1
  1404                              <1> 	%endrep
  1405 00000CF4 C605[A6110000]00    <2>  mov byte [intprob], i
  1406 00000CFB E974010000          <2>  jmp unhand2
  1407                              <2>  %assign i i+1
  1408 00000D00 C605[A6110000]01    <2>  mov byte [intprob], i
  1409 00000D07 E968010000          <2>  jmp unhand2
  1410                              <2>  %assign i i+1
  1411 00000D0C C605[A6110000]02    <2>  mov byte [intprob], i
  1412 00000D13 E95C010000          <2>  jmp unhand2
  1413                              <2>  %assign i i+1
  1414 00000D18 C605[A6110000]03    <2>  mov byte [intprob], i
  1415 00000D1F E950010000          <2>  jmp unhand2
  1416                              <2>  %assign i i+1
  1417 00000D24 C605[A6110000]04    <2>  mov byte [intprob], i
  1418 00000D2B E944010000          <2>  jmp unhand2
  1419                              <2>  %assign i i+1
  1420 00000D30 C605[A6110000]05    <2>  mov byte [intprob], i
  1421 00000D37 E938010000          <2>  jmp unhand2
  1422                              <2>  %assign i i+1
  1423 00000D3C C605[A6110000]06    <2>  mov byte [intprob], i
  1424 00000D43 E92C010000          <2>  jmp unhand2
  1425                              <2>  %assign i i+1
  1426 00000D48 C605[A6110000]07    <2>  mov byte [intprob], i
  1427 00000D4F E920010000          <2>  jmp unhand2
  1428                              <2>  %assign i i+1
  1429 00000D54 C605[A6110000]08    <2>  mov byte [intprob], i
  1430 00000D5B E914010000          <2>  jmp unhand2
  1431                              <2>  %assign i i+1
  1432 00000D60 C605[A6110000]09    <2>  mov byte [intprob], i
  1433 00000D67 E908010000          <2>  jmp unhand2
  1434                              <2>  %assign i i+1
  1435 00000D6C C605[A6110000]0A    <2>  mov byte [intprob], i
  1436 00000D73 E9FC000000          <2>  jmp unhand2
  1437                              <2>  %assign i i+1
  1438 00000D78 C605[A6110000]0B    <2>  mov byte [intprob], i
  1439 00000D7F E9F0000000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00000D84 C605[A6110000]0C    <2>  mov byte [intprob], i
  1442 00000D8B E9E4000000          <2>  jmp unhand2
  1443                              <2>  %assign i i+1
  1444 00000D90 C605[A6110000]0D    <2>  mov byte [intprob], i
  1445 00000D97 E9D8000000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000D9C C605[A6110000]0E    <2>  mov byte [intprob], i
  1448 00000DA3 E9CC000000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000DA8 C605[A6110000]0F    <2>  mov byte [intprob], i
  1451 00000DAF E9C0000000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00000DB4 C605[A6110000]10    <2>  mov byte [intprob], i
  1454 00000DBB E9B4000000          <2>  jmp unhand2
  1455                              <2>  %assign i i+1
  1456 00000DC0 C605[A6110000]11    <2>  mov byte [intprob], i
  1457 00000DC7 E9A8000000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000DCC C605[A6110000]12    <2>  mov byte [intprob], i
  1460 00000DD3 E99C000000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000DD8 C605[A6110000]13    <2>  mov byte [intprob], i
  1463 00000DDF E990000000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000DE4 C605[A6110000]14    <2>  mov byte [intprob], i
  1466 00000DEB E984000000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000DF0 C605[A6110000]15    <2>  mov byte [intprob], i
  1469 00000DF7 E978000000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000DFC C605[A6110000]16    <2>  mov byte [intprob], i
  1472 00000E03 E96C000000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000E08 C605[A6110000]17    <2>  mov byte [intprob], i
  1475 00000E0F E960000000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000E14 C605[A6110000]18    <2>  mov byte [intprob], i
  1478 00000E1B E954000000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000E20 C605[A6110000]19    <2>  mov byte [intprob], i
  1481 00000E27 E948000000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000E2C C605[A6110000]1A    <2>  mov byte [intprob], i
  1484 00000E33 E93C000000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000E38 C605[A6110000]1B    <2>  mov byte [intprob], i
  1487 00000E3F E930000000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000E44 C605[A6110000]1C    <2>  mov byte [intprob], i
  1490 00000E4B E924000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000E50 C605[A6110000]1D    <2>  mov byte [intprob], i
  1493 00000E57 E918000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000E5C C605[A6110000]1E    <2>  mov byte [intprob], i
  1496 00000E63 E90C000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000E68 C605[A6110000]1F    <2>  mov byte [intprob], i
  1499 00000E6F E900000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501                              <1> unhand2:
  1502 00000E74 FA                  <1> 	cli
  1503 00000E75 1E                  <1> 	push ds
  1504 00000E76 06                  <1> 	push es
  1505 00000E77 0FA0                <1> 	push fs
  1506 00000E79 0FA8                <1> 	push gs
  1507 00000E7B 16                  <1> 	push ss
  1508 00000E7C 60                  <1> 	pushad
  1509                              <1> %ifdef gui.included
  1510 00000E7D 803D[389F0000]00    <1> 	cmp byte [guion], 0
  1511 00000E84 0F8432000000        <1> 	je near noguiunhandstuff
  1512 00000E8A 66C705[A0110000]08- <1> 	mov word [locunhandy], 8
  1513 00000E92 00                  <1>
  1514 00000E93 66C705[A2110000]08- <1> 	mov word [locunhandx], 8
  1515 00000E9B 00                  <1>
  1516 00000E9C 668B1D[F86A0000]    <1> 	mov bx, [background]
  1517 00000EA3 66891D[A4110000]    <1> 	mov [backgroundcache], bx
  1518 00000EAA C605[1B560000]01    <1> 	mov byte [mousedisabled],1
  1519 00000EB1 66BB00F8            <1> 	mov bx, 1111100000000000b
  1520 00000EB5 66891D[F86A0000]    <1> 	mov [background], bx
  1521                              <1> noguiunhandstuff:
  1522                              <1> %endif
  1523 00000EBC 89E6                <1> 	mov esi, esp
  1524 00000EBE 8935[94110000]      <1> 	mov [espfirst], esi
  1525 00000EC4 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1526 00000ECA 8935[90110000]      <1> 	mov [esploc], esi
  1527 00000ED0 BE[B5110000]        <1> 	mov esi, unhandmsg
  1528 00000ED5 8935[98110000]      <1> 	mov [esiloc], esi
  1529 00000EDB 31C9                <1> 	xor ecx, ecx
  1530 00000EDD 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1531 00000EE3 BB[84150000]        <1> 	mov ebx, errortypes
  1532 00000EE8 C1E102              <1> 	shl ecx, 2
  1533 00000EEB 01CB                <1> 	add ebx, ecx
  1534 00000EED 81FB[C4150000]      <1> 	cmp ebx, errortypesend
  1535 00000EF3 7205                <1> 	jb gooderrortype
  1536 00000EF5 BB[C4150000]        <1> 	mov ebx, errortypesend
  1537                              <1> gooderrortype:
  1538 00000EFA 8B33                <1> 	mov esi, [ebx]
  1539                              <1> %ifdef gui.included
  1540 00000EFC 803D[389F0000]00    <1> 	cmp byte [guion], 0
  1541 00000F03 0F842D000000        <1> 	je near errortext
  1542 00000F09 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1543 00000F10 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1544 00000F17 66B80100            <1> 	mov ax, 1
  1545 00000F1B 6631DB              <1> 	xor bx, bx
  1546 00000F1E E869610000          <1> 	call showstring2
  1547 00000F23 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1548 00000F2A 668915[A2110000]    <1> 	mov [locunhandx], dx
  1549 00000F31 E905000000          <1> 	jmp errortextdone
  1550                              <1> %endif
  1551                              <1> errortext:
  1552 00000F36 E8E40D0000          <1> 	call print		;;get the error message and print it
  1553                              <1> errortextdone:
  1554 00000F3B 31C9                <1> 	xor ecx, ecx
  1555 00000F3D 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1556 00000F43 E8E1010000          <1> 	call expdump
  1557                              <1> dumpstack:
  1558 00000F48 8B35[90110000]      <1> 	mov esi, [esploc]
  1559 00000F4E 39E6                <1> 	cmp esi, esp
  1560 00000F50 7216                <1> 	jb donedump
  1561 00000F52 368B0E              <1> 	mov ecx, [ss:esi]
  1562 00000F55 81EE04000000        <1> 	sub esi, 4
  1563 00000F5B 8935[90110000]      <1> 	mov [esploc], esi
  1564 00000F61 E8C3010000          <1> 	call expdump
  1565 00000F66 EBE0                <1> 	jmp dumpstack
  1566                              <1> donedump:
  1567 00000F68 0F20C1              <1> 	mov ecx, cr0
  1568 00000F6B E8B9010000          <1> 	call expdump
  1569 00000F70 0F20D1              <1> 	mov ecx, cr2
  1570 00000F73 E8B1010000          <1> 	call expdump
  1571 00000F78 0F20D9              <1> 	mov ecx, cr3
  1572 00000F7B E8A9010000          <1> 	call expdump
  1573 00000F80 0F20E1              <1> 	mov ecx, cr4
  1574 00000F83 E8A1010000          <1> 	call expdump
  1575 00000F88 0F00C9              <1> 	str ecx
  1576 00000F8B E899010000          <1> 	call expdump
  1577 00000F90 0F010D[AF110000]    <1> 	sidt [igdtcache]
  1578 00000F97 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1579 00000F9D E887010000          <1> 	call expdump
  1580 00000FA2 0F0105[AF110000]    <1> 	sgdt [igdtcache]
  1581 00000FA9 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1582 00000FAF E875010000          <1> 	call expdump
  1583 00000FB4 0F00C1              <1> 	sldt ecx
  1584 00000FB7 E86D010000          <1> 	call expdump
  1585 00000FBC 8B35[90110000]      <1> 	mov esi, [esploc]
  1586 00000FC2 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1587 00000FC7 81C710000000        <1> 	add edi, 16
  1588 00000FCD 893D[AB110000]      <1> 	mov [codelocend], edi
  1589 00000FD3 81EF20000000        <1> 	sub edi, 32
  1590                              <1> dumpcodeloop:
  1591 00000FD9 893D[A7110000]      <1> 	mov [codeloc], edi
  1592 00000FDF 8B0F                <1> 	mov ecx, [edi]
  1593 00000FE1 E843010000          <1> 	call expdump
  1594 00000FE6 8B3D[A7110000]      <1> 	mov edi, [codeloc]
  1595 00000FEC 81C704000000        <1> 	add edi, 4
  1596 00000FF2 3B3D[AB110000]      <1> 	cmp edi, [codelocend]
  1597 00000FF8 72DF                <1> 	jb dumpcodeloop
  1598 00000FFA BE[BA100000]        <1> 	mov esi, backtoosmsg
  1599                              <1> %ifdef gui.included
  1600 00000FFF 803D[389F0000]00    <1> 	cmp byte [guion], 0
  1601 00001006 741F                <1> 	je backtomsg
  1602                              <1> guibacktomsg:
  1603 00001008 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1604 0000100F 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1605 00001016 66B80100            <1> 	mov ax, 1
  1606 0000101A 6631DB              <1> 	xor bx, bx
  1607 0000101D E86A600000          <1> 	call showstring2
  1608 00001022 E905000000          <1> 	jmp backtomsgdone
  1609                              <1> backtomsg:
  1610                              <1> %endif
  1611 00001027 E8F30C0000          <1> 	call print
  1612                              <1> backtomsgdone:
  1613 0000102C 30C0                <1> 	xor al, al
  1614 0000102E E8BC110000          <1> 	call rdcharint
  1615 00001033 803D[A6110000]03    <1> 	cmp byte [intprob], 3
  1616 0000103A 7541                <1> 	jne nodebugint
  1617                              <1> %ifdef gui.included
  1618 0000103C 803D[389F0000]00    <1> 	cmp byte [guion], 0
  1619 00001043 7427                <1> 	je nodebuggui
  1620 00001045 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1621 0000104C 66891D[F86A0000]    <1> 	mov [background], bx
  1622 00001053 6631DB              <1> 	xor bx, bx
  1623 00001056 C605[1B560000]00    <1> 	mov byte [mousedisabled], 0
  1624 0000105D E8155A0000          <1> 	call guiclear
  1625 00001062 E8955A0000          <1> 	call reloadallgraphics
  1626 00001067 E840150000          <1> 	call termcopy
  1627                              <1> nodebuggui:
  1628                              <1> %endif
  1629 0000106C 8B35[94110000]      <1> 	mov esi, [espfirst]
  1630 00001072 89F4                <1> 	mov esp, esi
  1631 00001074 61                  <1> 	popad
  1632 00001075 17                  <1> 	pop ss
  1633 00001076 0FA9                <1> 	pop gs
  1634 00001078 0FA1                <1> 	pop fs
  1635 0000107A 07                  <1> 	pop es
  1636 0000107B 1F                  <1> 	pop ds
  1637 0000107C CF                  <1> 	iret
  1638                              <1> nodebugint:
  1639 0000107D 61                  <1> 	popad
  1640 0000107E 17                  <1> 	pop ss
  1641 0000107F 0FA9                <1> 	pop gs
  1642 00001081 0FA1                <1> 	pop fs
  1643 00001083 07                  <1> 	pop es
  1644 00001084 1F                  <1> 	pop ds
  1645                              <1> %ifdef gui.included
  1646 00001085 803D[389F0000]00    <1> 	cmp byte [guion], 0
  1647 0000108C 7427                <1> 	je returnunhandgui
  1648 0000108E 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1649 00001095 66891D[F86A0000]    <1> 	mov [background], bx
  1650 0000109C 6631DB              <1> 	xor bx, bx
  1651 0000109F C605[1B560000]00    <1> 	mov byte [mousedisabled], 0
  1652 000010A6 E8CC590000          <1> 	call guiclear
  1653 000010AB E84C5A0000          <1> 	call reloadallgraphics
  1654 000010B0 E8F7140000          <1> 	call termcopy
  1655                              <1> %endif
  1656                              <1> returnunhandgui:
  1657 000010B5 E90D190000          <1> 	jmp nwcmd
  1658 000010BA 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1659 000010C3 737420616E79207072- <1>
  1660 000010CC 6F626C656D7320696E- <1>
  1661 000010D5 207468652049737375- <1>
  1662 000010DE 65732073656374696F- <1>
  1663 000010E7 6E20617420736F6C6C- <1>
  1664 000010F0 65726F732E676F6F67- <1>
  1665 000010F9 6C65636F64652E636F- <1>
  1666 00001102 6D0A                <1>
  1667 00001104 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1668 0000110D 206B657920746F2072- <1>
  1669 00001116 657475726E20746F20- <1>
  1670 0000111F 536F6C6C65724F530A- <1>
  1671 00001128 00                  <1>
  1672                              <1> expdump:
  1673 00001129 8B35[98110000]      <1> 	mov esi, [esiloc]
  1674 0000112F 89F7                <1> 	mov edi, esi
  1675 00001131 81C70F000000        <1> 	add edi, 15
  1676 00001137 81C604000000        <1> 	add esi, 4
  1677 0000113D 893D[98110000]      <1> 	mov [esiloc], edi
  1678 00001143 81EF03000000        <1> 	sub edi, 3
  1679 00001149 E8E01C0000          <1> 	call converthex
  1680 0000114E 81EE04000000        <1> 	sub esi, 4
  1681                              <1> %ifdef gui.included
  1682 00001154 803D[389F0000]00    <1> 	cmp byte [guion], 0
  1683 0000115B 0F8429000000        <1> 	je near expdumptext
  1684 00001161 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1685 00001168 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1686 0000116F 66B80100            <1> 	mov ax, 1
  1687 00001173 6631DB              <1> 	xor bx, bx
  1688 00001176 E8115F0000          <1> 	call showstring2
  1689 0000117B 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1690 00001182 668915[A2110000]    <1> 	mov [locunhandx], dx
  1691 00001189 C3                  <1> 	ret
  1692                              <1> %endif
  1693                              <1> expdumptext:
  1694 0000118A E8900B0000          <1> 	call print
  1695 0000118F C3                  <1> 	ret
  1696 00001190 00000000            <1> esploc dd 0
  1697 00001194 00000000            <1> espfirst dd 0
  1698 00001198 00000000            <1> esiloc dd 0
  1699 0000119C 00000000            <1> esiregbuf dd 0
  1700 000011A0 0100                <1> locunhandy dw 1
  1701 000011A2 0100                <1> locunhandx dw 1
  1702 000011A4 0000                <1> backgroundcache dw 0
  1703 000011A6 00                  <1> intprob db 0
  1704 000011A7 00000000            <1> codeloc dd 0
  1705 000011AB 00000000            <1> codelocend dd 0
  1706 000011AF 000000000000        <1> igdtcache dw 0,0,0
  1707                              <1> 	unhandmsg:	
  1708 000011B5 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1709 000011BE 303030FF0A00        <1>
  1710                              <1> unhndrg:
  1711 000011C4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1712 000011CD 303030202000<rept>  <1>
  1713 0000122D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1714 00001236 303030FF0A00        <1>
  1715 0000123C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1716 00001245 303030202000<rept>  <1>
  1717 000012A5 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1718 000012AE 303030FF0A00        <1>
  1719 000012B4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1720 000012BD 303030202000<rept>  <1>
  1721 0000131D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1722 00001326 303030FF0A00        <1>
  1723 0000132C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1724 00001335 303030202000<rept>  <1>
  1725 00001395 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1726 0000139E 303030FF0A00        <1>
  1727                              <1> unhandregs:
  1728 000013A4 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1729 000013AD 303030202000        <1>
  1730 000013B3 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1731 000013BC 303030202000        <1>
  1732 000013C2 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1733 000013CB 303030FF0A00        <1>
  1734 000013D1 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1735 000013DA 303030202000        <1>
  1736 000013E0 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1737 000013E9 303030202000        <1>
  1738 000013EF 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1739 000013F8 303030202000        <1>
  1740 000013FE 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1741 00001407 303030202000        <1>
  1742 0000140D 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1743 00001416 303030FF0A00        <1>
  1744 0000141C 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1745 00001425 303030202000        <1>
  1746 0000142B 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1747 00001434 303030202000        <1>
  1748 0000143A 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1749 00001443 303030202000        <1>
  1750 00001449 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1751 00001452 303030FF0A00        <1>
  1752 00001458 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1753 00001461 303030202000        <1>
  1754 00001467 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1755 00001470 303030202000        <1>
  1756 00001476 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1757 0000147F 303030202000        <1>
  1758 00001485 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1759 0000148E 303030FF0A00        <1>
  1760 00001494 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1761 0000149D 303030202000        <1>
  1762 000014A3 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1763 000014AC 303030202000        <1>
  1764 000014B2 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1765 000014BB 303030202000        <1>
  1766 000014C1 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1767 000014CA 303030FF0A00        <1>
  1768 000014D0 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1769 000014D9 303030202000        <1>
  1770 000014DF 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1771 000014E8 303030202000        <1>
  1772 000014EE 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1773 000014F7 303030202000        <1>
  1774 000014FD 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1775 00001506 303030FF0A00        <1>
  1776 0000150C FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1777 00001515 303030202000<rept>  <1>
  1778 0000152A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1779 00001533 30303020FF00        <1>
  1780 00001539 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1781 00001542 3030305D2000        <1>
  1782 00001548 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1783 00001551 303030202000<rept>  <1>
  1784 00001575 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1785 0000157E 303030FF0A00        <1>
  1786                              <1> unhandmsgend:
  1787                              <1> 
  1788                              <1> errortypes:
  1789 00001584 [C8150000]          <1> 			dd err0
  1790 00001588 [2C160000]          <1> 			dd err1
  1791 0000158C [8D160000]          <1> 			dd err2
  1792 00001590 [E2160000]          <1> 			dd err3
  1793 00001594 [46170000]          <1> 			dd err4
  1794 00001598 [98170000]          <1> 			dd err5
  1795 0000159C [02180000]          <1> 			dd err6
  1796 000015A0 [6A180000]          <1> 			dd err7
  1797 000015A4 [B4180000]          <1> 			dd err8
  1798 000015A8 [11190000]          <1> 			dd err9
  1799 000015AC [6A190000]          <1> 			dd err10
  1800 000015B0 [B5190000]          <1> 			dd err11
  1801 000015B4 [051A0000]          <1> 			dd err12
  1802 000015B8 [5E1A0000]          <1> 			dd err13
  1803 000015BC [C11A0000]          <1> 			dd err14
  1804 000015C0 [FD1A0000]          <1> 			dd err15
  1805                              <1> errortypesend:
  1806 000015C4 [881B0000]          <1> 			dd unknownerror
  1807                              <1> 			
  1808 000015C8 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1809 000015D1 6279207A65726F3A0A  <1>
  1810 000015DA 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1811 000015E3 6C79206C696D2061F6- <1>
  1812 000015EC 78203D20EC20776865- <1>
  1813 000015F5 6E206120697320616E- <1>
  1814 000015FE 79207265616C206E75- <1>
  1815 00001607 6D6265722E20486170- <1>
  1816 00001610 707920456173746572- <1>
  1817 00001619 210A                <1>
  1818 0000161B 202020202020202020- <1> 		db "            x",26,"0",10,0
  1819 00001624 202020781A300A00    <1>
  1820                              <1> 		
  1821 0000162C 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1822 00001635 65702F427265616B70- <1>
  1823 0000163E 6F696E743A0A        <1>
  1824 00001644 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1825 0000164D 696E74206661756C74- <1>
  1826 00001656 2C20627265616B706F- <1>
  1827 0000165F 696E7420747261702C- <1>
  1828 00001668 206F722073696E676C- <1>
  1829 00001671 652D73746570207472- <1>
  1830 0000167A 617020776173207472- <1>
  1831 00001683 696767657265642E0A- <1>
  1832 0000168C 00                  <1>
  1833                              <1> 		
  1834 0000168D 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1835 00001696 6C6520696E74657272- <1>
  1836 0000169F 7570743A0A          <1>
  1837 000016A4 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1838 000016AD 6520696E7465727275- <1>
  1839 000016B6 707420776173207472- <1>
  1840 000016BF 696767657265642074- <1>
  1841 000016C8 68617420636F756C64- <1>
  1842 000016D1 206E6F74206265206D- <1>
  1843 000016DA 61736B65642E0A00    <1>
  1844                              <1> 		
  1845 000016E2 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1846 000016EB 743A0A              <1>
  1847 000016EE 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1848 000016F7 727275707420697320- <1>
  1849 00001700 7573656420696E2070- <1>
  1850 00001709 726F6772616D732074- <1>
  1851 00001712 6F2073686F77207468- <1>
  1852 0000171B 6520737461636B2061- <1>
  1853 00001724 6E6420726567697374- <1>
  1854 0000172D 65727320616E642063- <1>
  1855 00001736 616E2062650A        <1>
  1856 0000173C 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1857 00001745 00                  <1>
  1858                              <1> 		
  1859 00001746 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1860 0000174F 0A                  <1>
  1861 00001750 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1862 00001759 73736F722072616E20- <1>
  1863 00001762 696E746F20616E2049- <1>
  1864 0000176B 4E544F20696E737472- <1>
  1865 00001774 756374696F6E207769- <1>
  1866 0000177D 746820746865206F76- <1>
  1867 00001786 6572666C6F7720666C- <1>
  1868 0000178F 6167207365742E0A00  <1>
  1869                              <1> 		
  1870 00001798 426F756E6473206368- <1> err5	db "Bounds check:",10
  1871 000017A1 65636B3A0A          <1>
  1872 000017A6 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1873 000017AF 73736F72207265626F- <1>
  1874 000017B8 756E6465642066726F- <1>
  1875 000017C1 6D206120424F554E44- <1>
  1876 000017CA 20696E737472756374- <1>
  1877 000017D3 696F6E2072756E206F- <1>
  1878 000017DC 6E20616E206F706572- <1>
  1879 000017E5 616E64207468617420- <1>
  1880 000017EE 776173206F75740A    <1>
  1881 000017F6 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1882 000017FF 2E0A00              <1>
  1883                              <1> 		
  1884 00001802 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1885 0000180B 70636F64653A0A      <1>
  1886 00001812 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1887 0000181B 73736F722068617320- <1>
  1888 00001824 6E6F20696465612077- <1>
  1889 0000182D 686174206974207761- <1>
  1890 00001836 7320747279696E6720- <1>
  1891 0000183F 746F20657865637574- <1>
  1892 00001848 652E20446F6E277420- <1>
  1893 00001851 72756E205353453420- <1>
  1894 0000185A 636F64650A          <1>
  1895 0000185F 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1896 00001868 0A00                <1>
  1897                              <1> 		
  1898 0000186A 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1899 00001873 6F72206E6F74206176- <1>
  1900 0000187C 61696C61626C653A0A  <1>
  1901 00001885 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1902 0000188E 206B6E6F7720746865- <1>
  1903 00001897 7920646F6E2774206D- <1>
  1904 000018A0 616B652074686F7365- <1>
  1905 000018A9 20616E796D6F726521- <1>
  1906 000018B2 0A00                <1>
  1907                              <1> 		
  1908 000018B4 446F75626C65206661- <1> err8	db "Double fault:",10
  1909 000018BD 756C743A0A          <1>
  1910 000018C2 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1911 000018CB 74696F6E2068616E64- <1>
  1912 000018D4 6C657220636F756C64- <1>
  1913 000018DD 206E6F742068616E64- <1>
  1914 000018E6 6C6520746861742069- <1>
  1915 000018EF 7420636F756C64206E- <1>
  1916 000018F8 6F742068616E646C65- <1>
  1917 00001901 20616E206578636570- <1>
  1918 0000190A 74696F6E2E0A00      <1>
  1919                              <1> 		
  1920 00001911 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1921 0000191A 6F72207365676D656E- <1>
  1922 00001923 74206F76657272756E- <1>
  1923 0000192C 3A0A00              <1>
  1924 0000192F 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1925 00001938 722068617070656E73- <1>
  1926 00001941 20696E206D6F646572- <1>
  1927 0000194A 6E20636F6D70757465- <1>
  1928 00001953 72732C20616E64206E- <1>
  1929 0000195C 657665722073686F75- <1>
  1930 00001965 6C642E0A00          <1>
  1931                              <1> 
  1932 0000196A 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1933 00001973 53533A0A            <1>
  1934 00001977 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1935 00001980 686174207761732073- <1>
  1936 00001989 776974636865642074- <1>
  1937 00001992 6F20697320696E7661- <1>
  1938 0000199B 6C69642E204E6F7468- <1>
  1939 000019A4 696E672066756E6E79- <1>
  1940 000019AD 20686572652E0A00    <1>
  1941                              <1> 		
  1942 000019B5 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1943 000019BE 6F742070726573656E- <1>
  1944 000019C7 743A0A              <1>
  1945 000019CA 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1946 000019D3 6E7420626974206F66- <1>
  1947 000019DC 20746865207365676D- <1>
  1948 000019E5 656E74206465736372- <1>
  1949 000019EE 6970746F7220697320- <1>
  1950 000019F7 73657420746F207A65- <1>
  1951 00001A00 726F2E0A00          <1>
  1952                              <1> 		
  1953 00001A05 537461636B20657863- <1> err12	db "Stack exception:",10
  1954 00001A0E 657074696F6E3A0A    <1>
  1955 00001A16 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1956 00001A1F 7363726970746F7220- <1>
  1957 00001A28 697320696E76616C69- <1>
  1958 00001A31 64206F72206E6F7420- <1>
  1959 00001A3A 70726573656E74206F- <1>
  1960 00001A43 7220697473206C696D- <1>
  1961 00001A4C 697420697320746F6F- <1>
  1962 00001A55 20736D616C6C2E0A00  <1>
  1963                              <1> 		
  1964 00001A5E 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1965 00001A67 726F74656374696F6E- <1>
  1966 00001A70 2076696F6C6174696F- <1>
  1967 00001A79 6E3A0A              <1>
  1968 00001A7C 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1969 00001A85 746564207468652063- <1>
  1970 00001A8E 6F6D70757465722E20- <1>
  1971 00001A97 537465702061776179- <1>
  1972 00001AA0 20736C6F776C792E20- <1>
  1973 00001AA9 546865204642492069- <1>
  1974 00001AB2 73206F6E2069747320- <1>
  1975 00001ABB 7761792E0A00        <1>
  1976                              <1> 		
  1977 00001AC1 50616765206661756C- <1> err14	db "Page fault:",10
  1978 00001ACA 743A0A              <1>
  1979 00001ACD 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1980 00001AD6 746861742077617320- <1>
  1981 00001ADF 726571756573746564- <1>
  1982 00001AE8 20776173206E6F7420- <1>
  1983 00001AF1 617661696C61626C65- <1>
  1984 00001AFA 2E0A00              <1>
  1985                              <1> 		
  1986 00001AFD 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1987 00001B06 666F7220506C616E20- <1>
  1988 00001B0F 523A0A              <1>
  1989 00001B12 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1990 00001B1B 727275707420697320- <1>
  1991 00001B24 726573657276656420- <1>
  1992 00001B2D 666F72207573616765- <1>
  1993 00001B36 206F6E6C7920627920- <1>
  1994 00001B3F 746865206D696C6974- <1>
  1995 00001B48 617279207768656E20- <1>
  1996 00001B51 6974206973206E6563- <1>
  1997 00001B5A 6573736172790A      <1>
  1998 00001B61 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1999 00001B6A 746520612066756C6C- <1>
  2000 00001B73 2D7363616C6520636F- <1>
  2001 00001B7C 757020642782746174- <1>
  2002 00001B85 2E0A00              <1>
  2003                              <1> 		
  2004 00001B88 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2005 00001B91 68656C6C206A757374- <1>
  2006 00001B9A 2068617070656E6564- <1>
  2007 00001BA3 3F2049732065766572- <1>
  2008 00001BAC 796F6E65206F6B6179- <1>
  2009 00001BB5 3F2048617264206472- <1>
  2010 00001BBE 6976653F2056696465- <1>
  2011 00001BC7 6F20636172643F0A    <1>
  2012 00001BCF 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2013 00001BD8 726520796F75207468- <1>
  2014 00001BE1 6572653F0A00        <1>
  2015                              <1> %else
  2016                              <1> unhand:	
  2017                              <1> 	%assign i 0
  2018                              <1> 	%rep 32
  2019                              <1> 	mov byte [intprob], i
  2020                              <1> 	jmp unhand2
  2021                              <1> 	%assign i i+1
  2022                              <1> 	%endrep
  2023                              <1> unhand2:
  2024                              <1> 	cmp byte [intprob], 3
  2025                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2026                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2027                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2028                              <1> 	mov bl, [intprob]
  2029                              <1> 	jmp exitprog
  2030                              <1> intprob db 0
  2031                              <1> %endif
  2032                                      %include "source/ints.asm"
  2033                              <1> newints:	;for great justice
  2034 00001BE7 80FC00              <1> 	cmp ah, 0
  2035 00001BEA 0F847F000000        <1> 	je near intx0   ;kills app
  2036 00001BF0 80FC01              <1> 	cmp ah, 1
  2037 00001BF3 0F84FE000000        <1> 	je near intx1   ;print string
  2038 00001BF9 80FC02              <1> 	cmp ah, 2
  2039 00001BFC 0F8450010000        <1> 	je near intx2	;read string
  2040 00001C02 80FC03              <1> 	cmp ah, 3
  2041 00001C05 0F8470010000        <1> 	je near intx3	;clear screen
  2042 00001C0B 80FC04              <1> 	cmp ah, 4
  2043 00001C0E 0F84E2010000        <1> 	je near intx4	;read and print string
  2044 00001C14 80FC05              <1> 	cmp ah, 5
  2045 00001C17 0F84C6050000        <1> 	je near intx5	;get char
  2046 00001C1D 80FC06              <1> 	cmp ah, 6
  2047 00001C20 0F8418060000        <1> 	je near intx6	;print char
  2048 00001C26 80FC07              <1> 	cmp ah, 7
  2049 00001C29 0F8410080000        <1> 	je near intx7	;read file
  2050                              <1> ;	cmp ah, 8
  2051                              <1> ;	je near intx8	;write file
  2052 00001C2F 80FC09              <1> 	cmp ah, 9
  2053 00001C32 0F8411080000        <1> 	je near intx9	;convert number to string
  2054 00001C38 80FC0A              <1> 	cmp ah, 10
  2055 00001C3B 0F8420080000        <1> 	je near intx10	;convert string to number
  2056                              <1> %ifdef threads.included
  2057 00001C41 80FC0B              <1> 	cmp ah, 11
  2058 00001C44 0F8421080000        <1> 	je near intx11	;create thread
  2059                              <1> %endif
  2060 00001C4A 80FC0C              <1> 	cmp ah, 12
  2061 00001C4D 0F84EF080000        <1> 	je near intx12	;get time
  2062 00001C53 80FC0D              <1> 	cmp ah, 13
  2063 00001C56 0F84FB080000        <1> 	je near intx13	;set time
  2064 00001C5C 80FC0E              <1> 	cmp ah, 14
  2065 00001C5F 0F8402090000        <1> 	je near intx14	;run program
  2066 00001C65 80FC0F              <1> 	cmp ah, 15
  2067 00001C68 0F840E090000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2068 00001C6E C3                  <1> 	ret
  2069                              <1> 	
  2070                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2071                              <1> intx0:
  2072                              <1> 	%include 'source/interrupts/0_exit.asm'
  2073                              <2> exitprog:
  2074 00001C6F 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2075 00001C73 8ED8                <2> 	mov ds, ax
  2076 00001C75 8EC0                <2> 	mov es, ax
  2077 00001C77 8EE0                <2> 	mov fs, ax
  2078 00001C79 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2079 00001C7D 8EE8                <2> 	mov gs, ax
  2080 00001C7F C705[14650000]0000- <2> 	mov dword [currentthread], 0
  2081 00001C87 0000                <2>
  2082 00001C89 C705[0F650000]0400- <2> 	mov dword [lastthread], 4
  2083 00001C91 0000                <2>
  2084 00001C93 C605[13650000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2085 00001C9A 8B25[7EB50000]      <2> 	mov esp, [previousstack] ;and this
  2086 00001CA0 81FB00000000        <2> 	cmp ebx, 0
  2087 00001CA6 0F8501000000        <2> 	jne near .error
  2088 00001CAC C3                  <2> 	ret
  2089                              <2> .error:
  2090 00001CAD 89D9                <2> 	mov ecx, ebx
  2091 00001CAF B006                <2> 	mov al, 6
  2092 00001CB1 A2[8C2E0000]        <2> 	mov [firsthexshown], al
  2093 00001CB6 51                  <2> 	push ecx
  2094 00001CB7 BE[D21C0000]        <2> 	mov esi, .msg1
  2095 00001CBC E840000000          <2> 	call printhighlight
  2096 00001CC1 59                  <2> 	pop ecx
  2097 00001CC2 E8DA110000          <2> 	call showhex
  2098 00001CC7 BE[E71C0000]        <2> 	mov esi, .msg2
  2099 00001CCC E830000000          <2> 	call printhighlight
  2100 00001CD1 C3                  <2> 	ret
  2101                              <2> 	
  2102 00001CD2 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2103 00001CDB 7461747573206F6620- <2>
  2104 00001CE4 307800              <2>
  2105 00001CE7 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2106 00001CF0 726E65642E0A00      <2>
  2107                              <1> intx1:
  2108                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2109 00001CF7 E82A000000          <2> call printint
  2110 00001CFC E9A4E5FFFF          <2> jmp timerinterrupt
  2111                              <2> 
  2112                              <2> 	printhighlight:
  2113 00001D01 6631C0              <2> 		xor ax, ax
  2114 00001D04 66BBF000            <2> 		mov bx, 0xF0
  2115 00001D08 E919000000          <2> 		jmp printint
  2116                              <2> 	printquiet:
  2117 00001D0D 6631C0              <2> 		xor ax, ax
  2118 00001D10 A2[511D0000]        <2> 		mov [endkeyprint], al
  2119 00001D15 66BB0700            <2> 		mov bx, 7
  2120 00001D19 E820000000          <2> 		call printint.b
  2121 00001D1E C3                  <2> 		ret
  2122                              <2>     print:
  2123 00001D1F 6631C0              <2> 		xor ax, ax
  2124 00001D22 66BB0700            <2> 		mov bx, 7
  2125                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2126 00001D26 56                  <2> 		push esi
  2127 00001D27 A2[511D0000]        <2> 		mov [endkeyprint], al
  2128 00001D2C E80D000000          <2> 		call .b
  2129 00001D31 89F1                <2> 		mov ecx, esi
  2130 00001D33 5F                  <2> 		pop edi
  2131 00001D34 29F9                <2> 		sub ecx, edi
  2132 00001D36 51                  <2> 		push ecx
  2133 00001D37 E870080000          <2> 		call termcopy
  2134 00001D3C 59                  <2> 		pop ecx
  2135 00001D3D C3                  <2> 		ret
  2136                              <2> 	.b:
  2137 00001D3E 8A06                <2> 		mov al, [esi]
  2138 00001D40 3A05[511D0000]      <2> 		cmp al, [endkeyprint]
  2139 00001D46 7408                <2> 		je .done
  2140 00001D48 E816050000          <2> 		call prcharq
  2141 00001D4D 46                  <2> 		inc esi
  2142 00001D4E EBEE                <2> 		jmp .b
  2143                              <2> 	.done:
  2144 00001D50 C3                  <2> 		ret
  2145                              <2> 
  2146 00001D51 00                  <2> endkeyprint db 0
  2147                              <1> intx2:
  2148                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2149 00001D52 E805000000          <2> call readint
  2150 00001D57 E949E5FFFF          <2> jmp timerinterrupt
  2151                              <2> 
  2152                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2153 00001D5C 89C3                <2> 		mov ebx, eax
  2154                              <2> 	.b:
  2155 00001D5E 53                  <2> 		push ebx
  2156 00001D5F 57                  <2> 		push edi
  2157 00001D60 56                  <2> 		push esi
  2158 00001D61 30C0                <2> 		xor al, al
  2159 00001D63 E887040000          <2> 		call rdcharint
  2160 00001D68 5E                  <2> 		pop esi
  2161 00001D69 8806                <2> 		mov [esi], al
  2162 00001D6B 46                  <2> 		inc esi
  2163 00001D6C 5F                  <2> 		pop edi
  2164 00001D6D 5B                  <2> 		pop ebx
  2165 00001D6E 39FE                <2> 		cmp esi, edi
  2166 00001D70 7304                <2> 		jae .done
  2167 00001D72 38D8                <2> 		cmp al, bl
  2168 00001D74 75E8                <2> 		jne .b
  2169                              <2> 	.done:
  2170 00001D76 4E                  <2> 		dec esi
  2171 00001D77 C60600              <2> 		mov byte [esi], 0
  2172 00001D7A C3                  <2> 		ret
  2173                              <1> intx3:
  2174                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2175 00001D7B E805000000          <2> call clear
  2176 00001D80 E920E5FFFF          <2> jmp timerinterrupt
  2177                              <2> %ifdef io.serial
  2178                              <2> clear:
  2179                              <2> 	ret
  2180                              <2> %else
  2181                              <2> clear:		
  2182 00001D85 668B0D[3B240000]    <2> 		mov cx, [charxy]
  2183 00001D8C BF[14E72800]        <2> 		mov edi, videobuf
  2184 00001D91 31C0                <2> 		xor eax, eax
  2185 00001D93 A3[31240000]        <2> 		mov [linebeginpos], eax
  2186 00001D98 A3[35240000]        <2> 		mov [videobufpos], eax
  2187 00001D9D 6631D2              <2> 		xor dx, dx
  2188 00001DA0 66A3[39240000]      <2> 		mov [charpos], ax
  2189 00001DA6 B407                <2> 		mov ah, 7
  2190                              <2> 	clearb:
  2191 00001DA8 668907              <2> 		mov [edi], ax
  2192 00001DAB 81C702000000        <2> 		add edi, 2
  2193 00001DB1 FEC9                <2> 		dec cl
  2194 00001DB3 80F900              <2> 		cmp cl, 0
  2195 00001DB6 75F0                <2> 		jne clearb
  2196 00001DB8 8A0D[3B240000]      <2> 		mov cl, [charxy]
  2197 00001DBE FECD                <2> 		dec ch
  2198 00001DC0 80FD00              <2> 		cmp ch, 0
  2199 00001DC3 75E3                <2> 		jne clearb
  2200                              <2> 	cleardouble:
  2201 00001DC5 BF[B8512900]        <2> 		mov edi, videobuf2
  2202 00001DCA 668B0D[3B240000]    <2> 		mov cx, [charxy]
  2203 00001DD1 31C0                <2> 		xor eax, eax
  2204                              <2> 	clearc:
  2205 00001DD3 668907              <2> 		mov [edi], ax
  2206 00001DD6 81C702000000        <2> 		add edi, 2
  2207 00001DDC FEC9                <2> 		dec cl
  2208 00001DDE 80F900              <2> 		cmp cl, 0
  2209 00001DE1 75F0                <2> 		jne clearc
  2210 00001DE3 8A0D[3B240000]      <2> 		mov cl, [charxy]
  2211 00001DE9 FECD                <2> 		dec ch
  2212 00001DEB 80FD00              <2> 		cmp ch, 0
  2213 00001DEE 75E3                <2> 		jne clearc
  2214 00001DF0 E8B7070000          <2> 		call termcopy
  2215 00001DF5 C3                  <2> 		ret
  2216                              <2> %endif
  2217                              <2> 		
  2218                              <1> intx4:
  2219                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2220 00001DF6 E809000000          <2> call rdprint
  2221 00001DFB E9A5E4FFFF          <2> jmp timerinterrupt
  2222                              <2> 
  2223                              <2> readline:
  2224 00001E00 B00A                <2>   mov al, 10
  2225 00001E02 B307                <2>   mov bl, 7
  2226                              <2> rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2227 00001E04 E80D000000          <2> 	call rdprintdos
  2228 00001E09 50                  <2> 	push eax
  2229 00001E0A A0[D0210000]        <2> 	mov al, [endkeyrdpr]
  2230 00001E0F E83E040000          <2> 	call prcharint
  2231 00001E14 58                  <2> 	pop eax
  2232 00001E15 C3                  <2> 	ret
  2233                              <2> 
  2234                              <2> 	rdprintdos:
  2235 00001E16 8935[D8210000]      <2> 		mov [buftxtloc], esi
  2236 00001E1C A2[D0210000]        <2> 		mov [endkeyrdpr], al
  2237 00001E21 881D[D1210000]      <2> 		mov [modkeyrdpr], bl
  2238 00001E27 8935[D2210000]      <2> 		mov [firstesirdpr], esi
  2239 00001E2D 893D[DC210000]      <2> 		mov [endbufferrdpr], edi
  2240 00001E33 8B3D[68BC2900]      <2> 		mov edi, [commandsentered]
  2241 00001E39 893D[64BC2900]      <2> 		mov [commandlistentries], edi
  2242                              <2> 	rdprintb:
  2243 00001E3F 56                  <2> 		push esi
  2244 00001E40 B001                <2> 		mov al, 1
  2245 00001E42 E8A8030000          <2> 		call rdcharint
  2246 00001E47 5E                  <2> 		pop esi
  2247                              <2> %ifdef io.serial
  2248                              <2> 		cmp ah, 0x41
  2249                              <2> 		je near rdprup
  2250                              <2> 		cmp ah, 0x42
  2251                              <2> 		je near rdprdown
  2252                              <2> 		cmp ah, 0x43
  2253                              <2> 		je near rdprright
  2254                              <2> 		cmp ah, 0x44
  2255                              <2> 		je near rdprleft
  2256                              <2> 		cmp ah, 0x31
  2257                              <2> 		je near rdprhome
  2258                              <2> 		cmp ah, 0x48
  2259                              <2> 		je near rdprhome
  2260                              <2> 		cmp ah, 0x46
  2261                              <2> 		je near rdprend
  2262                              <2> 		cmp ah, 0x33
  2263                              <2> 		je near rdprdel
  2264                              <2> 		cmp ah, 0x34
  2265                              <2> 		je near rdprend
  2266                              <2> %else
  2267 00001E48 803D[0A5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2268 00001E4F 751B                <2> 		jne notspecialrdprnt
  2269 00001E51 80FC53              <2> 		cmp ah, 0x53
  2270 00001E54 0F841E030000        <2> 		je near rdprdel
  2271 00001E5A 80FC47              <2> 		cmp ah, 0x47
  2272 00001E5D 0F8407010000        <2> 		je near rdprhome
  2273 00001E63 80FC4F              <2> 		cmp ah, 0x4F
  2274 00001E66 0F841D010000        <2> 		je near rdprend
  2275                              <2> 	notspecialrdprnt:
  2276 00001E6C 80FC50              <2> 		cmp ah, 0x50
  2277 00001E6F 0F849B010000        <2> 		je near rdprdown
  2278 00001E75 80FC4D              <2> 		cmp ah, 0x4D
  2279 00001E78 0F844A010000        <2> 		je near rdprright
  2280 00001E7E 80FC4B              <2> 		cmp ah, 0x4B
  2281 00001E81 0F841F010000        <2> 		je near rdprleft
  2282 00001E87 80FC48              <2> 		cmp ah, 0x48
  2283 00001E8A 0F84C3010000        <2> 		je near rdprup
  2284                              <2> %endif
  2285 00001E90 3C08                <2> 		cmp al, 8
  2286 00001E92 0F84FB020000        <2> 		je near rdprbscheck
  2287 00001E98 3C00                <2> 		cmp al, 0
  2288 00001E9A 74A3                <2> 		je rdprintb
  2289 00001E9C 80FC00              <2> 		cmp ah, 0
  2290 00001E9F 749E                <2> 		je rdprintb
  2291 00001EA1 8806                <2> 		mov [esi], al
  2292 00001EA3 46                  <2> 		inc esi
  2293                              <2> 	bscheckequal:
  2294 00001EA4 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2295 00001EAA 8A3D[D7210000]      <2> 		mov bh, [txtmask]
  2296 00001EB0 80FF00              <2> 		cmp bh, 0
  2297 00001EB3 7404                <2> 		je nomasktxt
  2298 00001EB5 88F8                <2> 		mov al, bh
  2299 00001EB7 30FF                <2> 		xor bh, bh
  2300                              <2> 	nomasktxt:
  2301 00001EB9 56                  <2> 		push esi
  2302 00001EBA 66A3[CE210000]      <2> 		mov [axcache], ax
  2303 00001EC0 8A25[D0210000]      <2> 		mov ah, [endkeyrdpr]
  2304 00001EC6 38E0                <2> 		cmp al, ah
  2305 00001EC8 742E                <2> 		je nobackprintbuftxt2
  2306 00001ECA E883030000          <2> 		call prcharint
  2307 00001ECF BE[FEC70000]        <2> 		mov esi, buftxt2
  2308 00001ED4 E834FEFFFF          <2> 		call printquiet
  2309 00001ED9 B020                <2> 		mov al, " "
  2310 00001EDB E883030000          <2> 		call prcharq
  2311 00001EE0 B008                <2> 		mov al, 8
  2312 00001EE2 81FE[FEC70000]      <2> 		cmp esi, buftxt2
  2313 00001EE8 740E                <2> 		je nobackprintbuftxt2
  2314                              <2> 	backprintbuftxt2:
  2315 00001EEA E874030000          <2> 		call prcharq
  2316 00001EEF 4E                  <2> 		dec esi
  2317 00001EF0 81FE[FEC70000]      <2> 		cmp esi, buftxt2
  2318 00001EF6 77F2                <2> 		ja backprintbuftxt2
  2319                              <2> 	nobackprintbuftxt2:
  2320 00001EF8 3C0A                <2> 		cmp al, 10
  2321 00001EFA 7405                <2> 		je nonobackprint
  2322 00001EFC E851030000          <2> 		call prcharint
  2323                              <2> 	nonobackprint:
  2324 00001F01 5E                  <2> 		pop esi
  2325 00001F02 3B35[DC210000]      <2> 		cmp esi, [endbufferrdpr]
  2326 00001F08 0F8319000000        <2> 		jae near donerdprinc
  2327 00001F0E 66A1[CE210000]      <2> 		mov ax, [axcache]
  2328 00001F14 8A25[D0210000]      <2> 		mov ah, [endkeyrdpr]
  2329 00001F1A 38E0                <2> 		cmp al, ah
  2330 00001F1C 0F851DFFFFFF        <2> 		jne rdprintb
  2331 00001F22 E901000000          <2> 		jmp donerdprint
  2332                              <2> 	donerdprinc:
  2333 00001F27 46                  <2> 		inc esi
  2334                              <2> 	donerdprint:
  2335 00001F28 4E                  <2> 		dec esi
  2336 00001F29 BF[FEC70000]        <2> 		mov edi, buftxt2
  2337                              <2> 	copylaterstuff:
  2338 00001F2E 8A07                <2> 		mov al, [edi]
  2339 00001F30 3C00                <2> 		cmp al, 0
  2340 00001F32 7406                <2> 		je nocopylaterstuff
  2341 00001F34 8806                <2> 		mov [esi], al
  2342 00001F36 47                  <2> 		inc edi
  2343 00001F37 46                  <2> 		inc esi
  2344 00001F38 EBF4                <2> 		jmp copylaterstuff
  2345                              <2> 	nocopylaterstuff:
  2346 00001F3A C60600              <2> 		mov byte [esi], 0
  2347 00001F3D E80B000000          <2> 		call clearbuftxt2
  2348 00001F42 89F1                <2> 		mov ecx, esi
  2349 00001F44 8B3D[D2210000]      <2> 		mov edi, [firstesirdpr]
  2350 00001F4A 29F9                <2> 		sub ecx, edi
  2351 00001F4C C3                  <2> 		ret
  2352                              <2> 	
  2353                              <2> 	clearbuftxt2:
  2354 00001F4D 30C0                <2> 		xor al, al
  2355 00001F4F BF[FEC70000]        <2> 		mov edi, buftxt2
  2356                              <2> 	clearbuftxt2lp:
  2357 00001F54 8807                <2> 		mov [edi], al
  2358 00001F56 47                  <2> 		inc edi
  2359 00001F57 81FF[FECB0000]      <2> 		cmp edi, buftxt
  2360 00001F5D 75F5                <2> 		jne clearbuftxt2lp
  2361 00001F5F C3                  <2> 		ret
  2362                              <2> 	
  2363                              <2> 	rdprintb2:
  2364 00001F60 E847060000          <2> 		call termcopy
  2365 00001F65 E9D5FEFFFF          <2> 		jmp rdprintb
  2366                              <2> 	
  2367                              <2> 	rdprhome:
  2368 00001F6A 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2369 00001F70 0F84EAFFFFFF        <2> 		je near rdprintb2
  2370 00001F76 BF[FEC70000]        <2> 		mov edi, buftxt2
  2371 00001F7B 8A07                <2> 		mov al, [edi]
  2372 00001F7D E82F020000          <2> 		call shiftbuftxt2
  2373 00001F82 E8DC020000          <2> 		call prcharq
  2374 00001F87 EBE1                <2> 		jmp rdprhome
  2375                              <2> 		
  2376                              <2> 	rdprend:
  2377 00001F89 BF[FEC70000]        <2> 		mov edi, buftxt2
  2378 00001F8E 8A07                <2> 		mov al, [edi]
  2379 00001F90 3C00                <2> 		cmp al, 0
  2380 00001F92 0F84C8FFFFFF        <2> 		je near rdprintb2
  2381 00001F98 8806                <2> 		mov [esi], al
  2382 00001F9A E849000000          <2> 		call shiftbuftxt2lft
  2383 00001F9F E8BF020000          <2> 		call prcharq
  2384 00001FA4 EBE3                <2> 		jmp rdprend
  2385                              <2> 	
  2386                              <2> 	rdprleft:
  2387 00001FA6 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2388 00001FAC 0F848DFEFFFF        <2> 		je near rdprintb
  2389 00001FB2 BF[FEC70000]        <2> 		mov edi, buftxt2
  2390 00001FB7 8A07                <2> 		mov al, [edi]
  2391 00001FB9 E8F3010000          <2> 		call shiftbuftxt2
  2392 00001FBE E88F020000          <2> 		call prcharint
  2393 00001FC3 E977FEFFFF          <2> 		jmp rdprintb
  2394                              <2> 		
  2395                              <2> 	rdprright:
  2396 00001FC8 BF[FEC70000]        <2> 		mov edi, buftxt2
  2397 00001FCD 8A07                <2> 		mov al, [edi]
  2398 00001FCF 3C00                <2> 		cmp al, 0
  2399 00001FD1 0F8468FEFFFF        <2> 		je near rdprintb
  2400 00001FD7 8806                <2> 		mov [esi], al
  2401 00001FD9 E80A000000          <2> 		call shiftbuftxt2lft
  2402 00001FDE E86F020000          <2> 		call prcharint
  2403 00001FE3 E957FEFFFF          <2> 		jmp rdprintb
  2404                              <2> 	shiftbuftxt2lft:
  2405 00001FE8 3C00                <2> 		cmp al, 0
  2406 00001FEA 7408                <2> 		je noshiftbuftxt2lft
  2407 00001FEC 47                  <2> 		inc edi
  2408 00001FED 8A07                <2> 		mov al, [edi]
  2409 00001FEF 8847FF              <2> 		mov [edi - 1], al
  2410 00001FF2 EBF4                <2> 		jmp shiftbuftxt2lft
  2411                              <2> 	noshiftbuftxt2lft:
  2412 00001FF4 8A06                <2> 		mov al, [esi]
  2413 00001FF6 46                  <2> 		inc esi
  2414 00001FF7 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2415 00001FFD C3                  <2> 		ret
  2416                              <2> 		
  2417                              <2> 	rdprdownbck:
  2418 00001FFE FECC                <2> 		dec ah
  2419 00002000 8825[D6210000]      <2> 		mov [commandedit], ah
  2420 00002006 E88D000000          <2> 		call rdprbckspc
  2421 0000200B E92FFEFFFF          <2> 		jmp rdprintb
  2422                              <2> 	
  2423                              <2> 	rdprdown:
  2424 00002010 8A25[D6210000]      <2> 		mov ah, [commandedit]
  2425 00002016 80FC01              <2> 		cmp ah, 1
  2426 00002019 0F8620FEFFFF        <2> 		jbe near rdprintb
  2427 0000201F 8B3D[68BC2900]      <2> 		mov edi, [commandsentered]
  2428 00002025 3B3D[64BC2900]      <2> 		cmp edi, [commandlistentries]
  2429 0000202B 7618                <2> 		jbe .nofix
  2430 0000202D 8105[64BC2900]0200- <2> 		add dword [commandlistentries], 2
  2431 00002035 0000                <2>
  2432 00002037 3B3D[64BC2900]      <2> 		cmp edi, [commandlistentries]
  2433 0000203D 7706                <2> 		ja .nofix
  2434 0000203F 893D[64BC2900]      <2> 		mov [commandlistentries], edi
  2435                              <2> 	.nofix:
  2436 00002045 80FC02              <2> 		cmp ah, 2
  2437 00002048 74B4                <2> 		je rdprdownbck
  2438 0000204A 80EC02              <2> 		sub ah, 2
  2439 0000204D 8825[D6210000]      <2> 		mov [commandedit], ah
  2440                              <2> 		
  2441                              <2> 	rdprup:
  2442 00002053 3805[D6210000]      <2> 		cmp [commandedit], al
  2443 00002059 0F84E0FDFFFF        <2> 		je near rdprintb
  2444 0000205F 813D[64BC2900]0000- <2> 		cmp dword [commandlistentries], 0
  2445 00002067 0000                <2>
  2446 00002069 0F84D0FDFFFF        <2> 		je near rdprintb
  2447 0000206F FF0D[64BC2900]      <2> 		dec dword [commandlistentries]
  2448                              <2> 	.lp:
  2449 00002075 BF[FEC70000]        <2> 		mov edi, buftxt2
  2450 0000207A 8A07                <2> 		mov al, [edi]
  2451 0000207C 3C00                <2> 		cmp al, 0
  2452 0000207E 740E                <2> 		je .start
  2453 00002080 8806                <2> 		mov [esi], al
  2454 00002082 E861FFFFFF          <2> 		call shiftbuftxt2lft
  2455 00002087 E8D7010000          <2> 		call prcharq
  2456 0000208C EBE7                <2> 		jmp .lp
  2457                              <2> 	.start:
  2458 0000208E E805000000          <2> 		call rdprbckspc
  2459 00002093 E941000000          <2> 		jmp getcurrentcommandstr
  2460                              <2> 	rdprbckspc:
  2461 00002098 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2462 0000209E 742B                <2> 		je nordprupbck
  2463                              <2> 	rdprupbckspclp:
  2464 000020A0 B008                <2> 		mov al, 8
  2465 000020A2 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2466 000020A8 E8B6010000          <2> 		call prcharq
  2467 000020AD B020                <2> 		mov al, ' '
  2468 000020AF E8AF010000          <2> 		call prcharq
  2469 000020B4 B008                <2> 		mov al, 8
  2470 000020B6 E8A8010000          <2> 		call prcharq
  2471 000020BB 4E                  <2> 		dec esi
  2472 000020BC 3B35[D8210000]      <2> 		cmp esi, [buftxtloc]
  2473 000020C2 7402                <2> 		je nordprupbck2
  2474 000020C4 EBDA                <2> 		jmp rdprupbckspclp
  2475                              <2> 	nordprupbck2:
  2476 000020C6 E8E1040000          <2> 		call termcopy
  2477                              <2> 	nordprupbck:
  2478 000020CB 8B3D[60BC2900]      <2> 		mov edi, [commandbufpos]
  2479 000020D1 81C7[6CBC2900]      <2> 		add edi, commandbuf
  2480 000020D7 4F                  <2> 		dec edi
  2481 000020D8 C3                  <2> 		ret
  2482                              <2> 	getcurrentcommandstr:
  2483 000020D9 8A25[D6210000]      <2> 		mov ah, [commandedit]
  2484 000020DF FE05[D6210000]      <2> 		inc byte [commandedit]
  2485                              <2> 	getccmdlp:
  2486 000020E5 4F                  <2> 		dec edi
  2487 000020E6 8A07                <2> 		mov al, [edi]
  2488 000020E8 81FF[6CBC2900]      <2> 		cmp edi, commandbuf
  2489 000020EE 7231                <2> 		jb getcmdresetcommandbuf
  2490 000020F0 81EF[6CBC2900]      <2> 		sub edi, commandbuf
  2491 000020F6 3B3D[60BC2900]      <2> 		cmp edi, [commandbufpos]
  2492 000020FC 0F843DFDFFFF        <2> 		je near rdprintb
  2493 00002102 81C7[6CBC2900]      <2> 		add edi, commandbuf
  2494 00002108 3C00                <2> 		cmp al, 0
  2495 0000210A 75D9                <2> 		jne getccmdlp
  2496 0000210C FECC                <2> 		dec ah
  2497 0000210E 80FC00              <2> 		cmp ah, 0
  2498 00002111 77D2                <2> 		ja getccmdlp
  2499 00002113 47                  <2> 		inc edi
  2500 00002114 81FF[6CCC2900]      <2> 		cmp edi, commandbufend
  2501 0000211A 770D                <2> 		ja fixcmdbufb4morerdpr
  2502 0000211C E915000000          <2> 		jmp morerdprup
  2503                              <2> 	getcmdresetcommandbuf:
  2504 00002121 BF[6CCC2900]        <2> 		mov edi, commandbufend
  2505 00002126 47                  <2> 		inc edi
  2506 00002127 EBBC                <2> 		jmp getccmdlp
  2507                              <2> 	fixcmdbufb4morerdpr:
  2508 00002129 4F                  <2> 		dec edi
  2509 0000212A 81EF[6CCC2900]      <2> 		sub edi, commandbufend
  2510 00002130 81C7[6CBC2900]      <2> 		add edi, commandbuf
  2511                              <2> 	morerdprup:
  2512 00002136 8A07                <2> 		mov al, [edi]
  2513 00002138 47                  <2> 		inc edi
  2514 00002139 81EF[6CBC2900]      <2> 		sub edi, commandbuf
  2515 0000213F 3C00                <2> 		cmp al, 0
  2516 00002141 0F8419FEFFFF        <2> 		je near rdprintb2
  2517 00002147 3B3D[60BC2900]      <2> 		cmp edi, [commandbufpos]
  2518 0000214D 0F830DFEFFFF        <2> 		jae near rdprintb2
  2519 00002153 81C7[6CBC2900]      <2> 		add edi, commandbuf
  2520 00002159 8806                <2> 		mov [esi], al
  2521 0000215B 46                  <2> 		inc esi
  2522 0000215C 57                  <2> 		push edi
  2523 0000215D 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2524 00002163 E8FB000000          <2> 		call prcharq
  2525 00002168 5F                  <2> 		pop edi
  2526 00002169 81FF[6CCC2900]      <2> 		cmp edi, commandbufend
  2527 0000216F 76C5                <2> 		jbe morerdprup
  2528 00002171 BF[6CBC2900]        <2> 		mov edi, commandbuf
  2529 00002176 EBBE                <2> 		jmp morerdprup
  2530                              <2> 		
  2531                              <2> 	rdprdel:
  2532 00002178 BF[FEC70000]        <2> 		mov edi, buftxt2
  2533 0000217D 8A07                <2> 		mov al, [edi]
  2534 0000217F 3C00                <2> 		cmp al, 0
  2535 00002181 0F84B8FCFFFF        <2> 		je near rdprintb
  2536 00002187 8806                <2> 		mov [esi], al
  2537 00002189 E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2538 0000218E E8D0000000          <2> 		call prcharq
  2539                              <2> 		
  2540                              <2> 	rdprbscheck:
  2541 00002193 3B35[D2210000]      <2> 		cmp esi, [firstesirdpr]
  2542 00002199 7705                <2> 		ja goodbscheck
  2543 0000219B E99FFCFFFF          <2> 		jmp rdprintb
  2544                              <2> 	goodbscheck:
  2545 000021A0 4E                  <2> 		dec esi
  2546 000021A1 C60600              <2> 		mov byte [esi], 0
  2547 000021A4 8A1D[D1210000]      <2> 		mov bl, [modkeyrdpr]
  2548 000021AA B008                <2> 		mov al, 8
  2549 000021AC E9F3FCFFFF          <2> 		jmp bscheckequal
  2550                              <2> 		
  2551                              <2> 	shiftbuftxt2:
  2552 000021B1 3C00                <2> 		cmp al, 0
  2553 000021B3 7409                <2> 		je noshiftbuftxt2
  2554 000021B5 47                  <2> 		inc edi
  2555 000021B6 8A27                <2> 		mov ah, [edi]
  2556 000021B8 8807                <2> 		mov [edi], al
  2557 000021BA 88E0                <2> 		mov al, ah
  2558 000021BC EBF3                <2> 		jmp shiftbuftxt2
  2559                              <2> 	noshiftbuftxt2:
  2560 000021BE BF[FEC70000]        <2> 		mov edi, buftxt2
  2561 000021C3 4E                  <2> 		dec esi
  2562 000021C4 8A06                <2> 		mov al, [esi]
  2563 000021C6 8807                <2> 		mov [edi], al
  2564 000021C8 C60600              <2> 		mov byte [esi], 0
  2565 000021CB B008                <2> 		mov al, 8
  2566 000021CD C3                  <2> 		ret
  2567                              <2> 		
  2568 000021CE 0000                <2> axcache dw 0
  2569 000021D0 00                  <2> endkeyrdpr db 0
  2570 000021D1 00                  <2> modkeyrdpr db 0
  2571 000021D2 00000000            <2> firstesirdpr dd 0
  2572 000021D6 00                  <2> commandedit db 0
  2573 000021D7 00                  <2> txtmask db 0
  2574 000021D8 00000000            <2> buftxtloc dd 0
  2575 000021DC 00000000            <2> endbufferrdpr dd 0
  2576 000021E0 082000              <2> backcursor db 8," ",0
  2577                              <1> intx5:
  2578                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2579 000021E3 E807000000          <2> 	call rdcharint
  2580 000021E8 E9B8E0FFFF          <2> 	jmp timerinterrupt
  2581                              <2> getchar:
  2582 000021ED 30C0                <2> 	xor al, al
  2583                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2584 000021EF C605[3D220000]01    <2> 		mov byte [trans], 1
  2585 000021F6 3C00                <2> 		cmp al, 0
  2586 000021F8 7507                <2> 		jne transcheck
  2587 000021FA C605[3D220000]00    <2> 		mov byte [trans], 0
  2588                              <2> 	transcheck:
  2589                              <2> 	%ifdef io.serial
  2590                              <2> 		call serial.receive
  2591                              <2> 		cmp al, 13
  2592                              <2> 		je rdenter
  2593                              <2> 	%else
  2594 00002201 E8243A0000          <2> 		call getkey
  2595 00002206 66A1[3B220000]      <2> 		mov ax, [lastkey]
  2596 0000220C 80FC1C              <2> 		cmp ah, 0x1C
  2597 0000220F 741F                <2> 		je rdenter
  2598                              <2> 	%endif
  2599 00002211 8A3D[3D220000]      <2> 		mov bh, [trans]
  2600 00002217 803D[0A5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2601 0000221E 7504                <2> 		jne nospecialtrans
  2602 00002220 88C3                <2> 		mov bl, al
  2603 00002222 30C0                <2> 		xor al, al
  2604                              <2> 	nospecialtrans:
  2605 00002224 08C7                <2> 		or bh, al
  2606 00002226 80FF00              <2> 		cmp bh, 0
  2607 00002229 74D6                <2> 		je transcheck
  2608 0000222B E90A000000          <2> 		jmp rdend
  2609                              <2> 	rdenter:
  2610 00002230 B41C                <2> 		mov ah, 0x1C
  2611 00002232 B00A                <2> 		mov al, 10
  2612 00002234 66A3[3B220000]      <2> 		mov [lastkey], ax
  2613                              <2> 	rdend:
  2614 0000223A C3                  <2> 		ret
  2615                              <2> 		
  2616 0000223B 0000                <2> lastkey db 0,0
  2617 0000223D 00                  <2> trans db 0
  2618                              <1> intx6:
  2619                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2620                              <2> %ifdef io.serial
  2621                              <2> 	cmp bl, bh
  2622                              <2> 	call prcharint
  2623                              <2> 	jmp timerinterrupt
  2624                              <2> prcharint:	
  2625                              <2> prcharq:
  2626                              <2> 	call serial.send
  2627                              <2> 	ret
  2628                              <2> %else
  2629 0000223E 38FB                <2> cmp bl, bh
  2630 00002240 740A                <2> je prchar.notimer
  2631 00002242 E80B000000          <2> call prcharint
  2632 00002247 E959E0FFFF          <2> jmp timerinterrupt
  2633                              <2> prchar.notimer:
  2634 0000224C E812000000          <2> 	call prcharq
  2635 00002251 CF                  <2> 	iret
  2636                              <2> 	
  2637                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2638 00002252 38FB                <2> 	cmp bl, bh
  2639 00002254 740D                <2> 	je prcharq
  2640 00002256 E808000000          <2> 	call prcharq
  2641 0000225B E84C030000          <2> 	call termcopy
  2642 00002260 C3                  <2> 	ret
  2643 00002261 00                  <2> termguion db 0
  2644 00002262 00                  <2> termcopyon db 0
  2645                              <2> prcharq:
  2646 00002263 88DC                <2> 	mov ah, bl
  2647 00002265 66A3[3D240000]      <2> 	mov [charbuf], ax
  2648 0000226B 8B1D[35240000]      <2> 	mov ebx, [videobufpos]
  2649 00002271 BF[14E72800]        <2> 	mov edi, videobuf
  2650 00002276 01DF                <2> 	add edi, ebx
  2651 00002278 66A1[B7250000]      <2> 	mov ax, [removedvideo]
  2652 0000227E 668907              <2> 	mov [edi], ax
  2653 00002281 66A1[3D240000]      <2> 	mov ax, [charbuf]
  2654 00002287 31D2                <2> 	xor edx, edx
  2655 00002289 668B15[39240000]    <2> 	mov dx, [charpos]
  2656 00002290 31C9                <2> 	xor ecx, ecx
  2657 00002292 668B0D[3B240000]    <2> 	mov cx, [charxy]
  2658 00002299 3C09                <2> 	cmp al, 9
  2659 0000229B 0F8462000000        <2> 	je near prtab
  2660 000022A1 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2661 000022A3 0F8487000000        <2> 	je near prcr
  2662 000022A9 3C0A                <2> 	cmp al, 10
  2663 000022AB 0F84D1000000        <2> 	je near prnlcr
  2664 000022B1 3C08                <2> 	cmp al, 8
  2665 000022B3 0F8488000000        <2> 	je near prbs
  2666 000022B9 3CFF                <2> 	cmp al, 255		;;null character
  2667 000022BB 0F841B000000        <2> 	je near donescr
  2668 000022C1 668907              <2> 	mov [edi], ax
  2669 000022C4 81C702000000        <2> 	add edi, 2
  2670 000022CA FEC2                <2> 	inc dl
  2671                              <2> donecrnl:
  2672 000022CC 38CA                <2> 	cmp dl, cl
  2673 000022CE 0F83D1000000        <2> 	jae near preol
  2674                              <2> doneeol:
  2675 000022D4 38EE                <2> 	cmp dh, ch
  2676 000022D6 0F83E5000000        <2> 	jae near prscr	
  2677                              <2> donescr:
  2678 000022DC 89FB                <2> 	mov ebx, edi
  2679 000022DE 668B07              <2> 	mov ax, [edi]
  2680 000022E1 66A3[B7250000]      <2> 	mov [removedvideo], ax
  2681 000022E7 81EB[14E72800]      <2> 	sub ebx, videobuf
  2682 000022ED 891D[35240000]      <2> 	mov [videobufpos], ebx
  2683 000022F3 668915[39240000]    <2> 	mov [charpos], dx
  2684 000022FA 66A1[3D240000]      <2> 	mov ax, [charbuf]
  2685 00002300 88E3                <2> 	mov bl, ah
  2686 00002302 C3                  <2> 	ret
  2687                              <2> 	
  2688                              <2> 	prtab:
  2689 00002303 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2690 00002309 81EF[14E72800]      <2> 		sub edi, videobuf
  2691 0000230F 29DF                <2> 		sub edi, ebx
  2692 00002311 C1EF04              <2> 		shr edi, 4
  2693 00002314 C1E704              <2> 		shl edi, 4
  2694 00002317 81C710000000        <2> 		add edi, 16
  2695 0000231D C0EA03              <2> 		shr dl, 3
  2696 00002320 C0E203              <2> 		shl dl, 3
  2697 00002323 80C208              <2> 		add dl, 8
  2698 00002326 81C7[14E72800]      <2> 		add edi, videobuf
  2699 0000232C 01DF                <2> 		add edi, ebx
  2700 0000232E EB9C                <2> 		jmp donecrnl
  2701                              <2> 	
  2702                              <2> 	prcr:
  2703 00002330 30D2                <2> 		xor dl, dl
  2704 00002332 BF[14E72800]        <2> 		mov edi, videobuf
  2705 00002337 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2706 0000233D 01DF                <2> 		add edi, ebx
  2707 0000233F EB8B                <2> 		jmp donecrnl
  2708                              <2> 			
  2709                              <2> 	prbs:
  2710 00002341 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2711 00002347 80FA00              <2> 		cmp dl, 0
  2712 0000234A 7416                <2> 		je prbackline
  2713                              <2> 	prnobmr:
  2714 0000234C 891D[31240000]      <2> 		mov [linebeginpos], ebx
  2715 00002352 FECA                <2> 		dec dl
  2716 00002354 6631C0              <2> 		xor ax, ax
  2717 00002357 81EF02000000        <2> 		sub edi, 2
  2718 0000235D E96AFFFFFF          <2> 		jmp donecrnl
  2719                              <2> 	prbackline:
  2720 00002362 6631DB              <2> 		xor bx, bx
  2721 00002365 88CA                <2> 		mov dl, cl
  2722 00002367 80FE00              <2> 		cmp dh, 0
  2723 0000236A 74E0                <2> 		je prnobmr
  2724 0000236C 8B1D[31240000]      <2> 		mov ebx, [linebeginpos]
  2725 00002372 6651                <2> 		push cx
  2726 00002374 30ED                <2> 		xor ch, ch
  2727 00002376 6629CB              <2> 		sub bx, cx
  2728 00002379 6629CB              <2> 		sub bx, cx
  2729 0000237C 6659                <2> 		pop cx
  2730 0000237E FECE                <2> 		dec dh
  2731 00002380 EBCA                <2> 		jmp prnobmr
  2732                              <2> 		
  2733                              <2> 	prnlcr:
  2734 00002382 FEC6                <2> 		inc dh
  2735 00002384 31DB                <2> 		xor ebx, ebx
  2736 00002386 30D2                <2> 		xor dl, dl
  2737 00002388 88CB                <2> 		mov bl, cl
  2738 0000238A 66D1E3              <2> 		shl bx, 1
  2739 0000238D BF[14E72800]        <2> 		mov edi, videobuf
  2740 00002392 031D[31240000]      <2> 		add ebx, [linebeginpos]
  2741 00002398 891D[31240000]      <2> 		mov [linebeginpos], ebx
  2742 0000239E 01DF                <2> 		add edi, ebx
  2743 000023A0 E927FFFFFF          <2> 		jmp donecrnl
  2744                              <2> 		
  2745                              <2> 	preol:
  2746 000023A5 30D2                <2> 		xor dl, dl
  2747 000023A7 FEC6                <2> 		inc dh
  2748 000023A9 31DB                <2> 		xor ebx, ebx
  2749 000023AB 88CB                <2> 		mov bl, cl
  2750 000023AD 66D1E3              <2> 		shl bx, 1
  2751 000023B0 031D[31240000]      <2> 		add ebx, [linebeginpos]
  2752 000023B6 891D[31240000]      <2> 		mov [linebeginpos], ebx
  2753 000023BC E913FFFFFF          <2> 		jmp doneeol
  2754                              <2> 	prscr:
  2755 000023C1 FECE                <2> 		dec dh
  2756 000023C3 BF[14E72800]        <2> 		mov edi, videobuf
  2757 000023C8 31DB                <2> 		xor ebx, ebx
  2758 000023CA 88CB                <2> 		mov bl, cl
  2759 000023CC 66D1E3              <2> 		shl bx, 1
  2760 000023CF 01FB                <2> 		add ebx, edi
  2761                              <2> 	intscrollloop:
  2762 000023D1 668B03              <2> 		mov ax, [ebx]
  2763 000023D4 668907              <2> 		mov [edi], ax
  2764 000023D7 81C702000000        <2> 		add edi, 2
  2765 000023DD 81C302000000        <2> 		add ebx, 2
  2766 000023E3 FEC9                <2> 		dec cl
  2767 000023E5 80F900              <2> 		cmp cl, 0
  2768 000023E8 75E7                <2> 		jne intscrollloop
  2769 000023EA 8A0D[3B240000]      <2> 		mov cl, [charxy]
  2770 000023F0 FECD                <2> 		dec ch
  2771 000023F2 80FD01              <2> 		cmp ch, 1
  2772 000023F5 77DA                <2> 		ja intscrollloop
  2773 000023F7 6631C0              <2> 		xor ax, ax
  2774 000023FA 81EF[14E72800]      <2> 		sub edi, videobuf
  2775 00002400 893D[31240000]      <2> 		mov [linebeginpos], edi
  2776 00002406 81C7[14E72800]      <2> 		add edi, videobuf
  2777 0000240C 89FB                <2> 		mov ebx, edi
  2778                              <2> 	intloopclear:
  2779 0000240E 668903              <2> 		mov [ebx], ax
  2780 00002411 81C302000000        <2> 		add ebx, 2
  2781 00002417 FEC9                <2> 		dec cl
  2782 00002419 80F900              <2> 		cmp cl, 0
  2783 0000241C 75F0                <2> 		jne intloopclear
  2784 0000241E FECD                <2> 		dec ch
  2785 00002420 80FD00              <2> 		cmp ch, 0
  2786 00002423 75E9                <2> 		jne intloopclear
  2787 00002425 668B0D[3B240000]    <2> 		mov cx, [charxy]
  2788 0000242C E9ABFEFFFF          <2> 		jmp donescr
  2789                              <2> 		
  2790 00002431 00000000            <2> linebeginpos dd 0
  2791 00002435 00000000            <2> videobufpos: dd 0
  2792 00002439 0000                <2> charpos db 0,0
  2793 0000243B 501E                <2> charxy db 80,30
  2794 0000243D 0000                <2> charbuf dw 0
  2795                              <2> %endif
  2796                              <1> intx7:
  2797                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2798 0000243F E8303F0000          <2> 	call loadfile
  2799 00002444 E95CDEFFFF          <2> 	jmp timerinterrupt
  2800                              <1> intx9:
  2801                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2802 00002449 3C00                <2> 	cmp al, 0
  2803 0000244B 750A                <2> 	jne num2strb
  2804 0000244D E8190B0000          <2> 	call showdec
  2805 00002452 E94EDEFFFF          <2> 	jmp timerinterrupt
  2806                              <2> num2strb:
  2807 00002457 E8450A0000          <2> 	call showhex
  2808 0000245C E944DEFFFF          <2> 	jmp timerinterrupt
  2809                              <1> intx10:
  2810                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2811 00002461 E8E70B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2812 00002466 E93ADEFFFF          <2> 	jmp timerinterrupt
  2813                              <2> 	
  2814                              <1> %ifdef threads.included
  2815                              <1> intx11:
  2816                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2817                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2818                              <2> 			;returns the PID of the new fork in ebx
  2819                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2820 0000246B FA                  <2> 	cli
  2821 0000246C 60                  <2> 	pushad
  2822 0000246D 8925[3A250000]      <2> 	mov [.espold], esp
  2823 00002473 C605[13650000]01    <2> 	mov byte [threadson], 1
  2824 0000247A 8B1D[14650000]      <2> 	mov ebx, [currentthread]
  2825 00002480 C1E302              <2> 	shl ebx, 2
  2826 00002483 89A3[80EC2900]      <2> 	mov [threadlist + ebx], esp
  2827 00002489 C1EB02              <2> 	shr ebx, 2
  2828 0000248C 81FB00000000        <2> 	cmp ebx, 0
  2829 00002492 750C                <2> 	jne .simplestack
  2830 00002494 BB[1EB10000]        <2> 	mov ebx, stackend
  2831 00002499 29E3                <2> 	sub ebx, esp
  2832 0000249B E90B000000          <2> 	jmp .stackcalcdone
  2833                              <2> .simplestack:
  2834 000024A0 C1E30A              <2> 	shl ebx, 10
  2835 000024A3 81C3[80002A00]      <2> 	add ebx, stack1
  2836 000024A9 29E3                <2> 	sub ebx, esp
  2837                              <2> .stackcalcdone:
  2838 000024AB 29DC                <2> 	sub esp, ebx
  2839 000024AD 81C4[80002A00]      <2> 	add esp, stack1
  2840 000024B3 8B1D[0F650000]      <2> 	mov ebx, [lastthread]
  2841 000024B9 C1E308              <2> 	shl ebx, 8
  2842 000024BC 01DC                <2> 	add esp, ebx
  2843 000024BE 891D[3E250000]      <2> 	mov [.stackend], ebx
  2844                              <2> 
  2845 000024C4 89E5                <2> 	mov ebp, esp
  2846 000024C6 8B25[3A250000]      <2> 	mov esp, [.espold]
  2847                              <2> 
  2848 000024CC C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2849 000024CF 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2850                              <2> 
  2851 000024D3 31DB                <2> 	xor ebx, ebx
  2852                              <2> .stackcopy:
  2853 000024D5 668B041C            <2> 	mov ax, [esp + ebx]
  2854 000024D9 6689441D00          <2> 	mov [ebp + ebx], ax
  2855 000024DE 81C302000000        <2> 	add ebx, 2
  2856 000024E4 3B1D[3E250000]      <2> 	cmp ebx, [.stackend]
  2857 000024EA 72E9                <2> 	jb .stackcopy
  2858                              <2> 
  2859 000024EC 31C0                <2> 	xor eax, eax
  2860 000024EE 668CC8              <2> 	mov ax, cs
  2861 000024F1 89C2                <2> 	mov edx, eax
  2862 000024F3 8B4C2428            <2> 	mov ecx, [esp + 40]
  2863 000024F7 81C900020000        <2> 	or ecx, 0x200
  2864                              <2> 	
  2865 000024FD 81FE00000000        <2> 	cmp esi, 0
  2866 00002503 7504                <2> 	jne .nochangestack
  2867 00002505 8B742420            <2> 	mov esi, [esp + 32]
  2868                              <2> .nochangestack:
  2869 00002509 89F0                <2> 	mov eax, esi
  2870 0000250B 89EC                <2> 	mov esp, ebp
  2871                              <2> 
  2872 0000250D 89442420            <2> 	mov [esp + 32], eax
  2873 00002511 89542424            <2> 	mov [esp + 36], edx
  2874 00002515 894C2428            <2> 	mov [esp + 40], ecx
  2875                              <2> 
  2876 00002519 8B1D[0F650000]      <2> 	mov ebx, [lastthread]
  2877 0000251F 89A3[80EC2900]      <2> 	mov [threadlist + ebx], esp
  2878 00002525 81C304000000        <2> 	add ebx, 4
  2879 0000252B 891D[0F650000]      <2> 	mov [lastthread], ebx
  2880 00002531 8B25[3A250000]      <2> 	mov esp, [.espold]
  2881 00002537 61                  <2> 	popad
  2882 00002538 FB                  <2> 	sti
  2883 00002539 CF                  <2> 	iret
  2884                              <2> 
  2885 0000253A 00000000            <2> .espold dd 0
  2886 0000253E 00000000            <2> .stackend dd 0
  2887                              <1> %endif
  2888                              <1> intx12:
  2889                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2890 00002542 A1[5D020000]        <2> 	mov eax, [timeseconds]
  2891 00002547 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2892 0000254D 89D9                <2> 	mov ecx, ebx
  2893 0000254F C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2894 00002552 E94EDDFFFF          <2> 	jmp timerinterrupt
  2895                              <1> intx13:
  2896                              <1> 	%include 'source/interrupts/13_settime.asm'
  2897 00002557 A3[5D020000]        <2> 	mov [timeseconds], eax
  2898 0000255C 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2899 00002562 E93EDDFFFF          <2> 	jmp timerinterrupt
  2900                              <2> 	
  2901                              <1> intx14:
  2902                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2903 00002567 BF[FECB0000]        <2> 	mov edi, buftxt
  2904                              <2> cpcmd:
  2905 0000256C 8A06                <2> 	mov al, [esi]
  2906 0000256E 8807                <2> 	mov [edi], al
  2907 00002570 46                  <2> 	inc esi
  2908 00002571 47                  <2> 	inc edi
  2909 00002572 3C00                <2> 	cmp al, 0
  2910 00002574 75F6                <2> 	jne cpcmd
  2911 00002576 E829060000          <2> 	call run
  2912 0000257B CF                  <2> 	iret
  2913                              <1> intx15:
  2914                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2915 0000257C BB[FEB70000]        <2> 	mov ebx, variables
  2916 00002581 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  2917 00002587 89F7                <2> 	mov edi, esi
  2918 00002589 31C9                <2> 	xor ecx, ecx
  2919                              <2> getcommandzeroes:
  2920 0000258B 8A07                <2> 	mov al, [edi]
  2921 0000258D 47                  <2> 	inc edi
  2922 0000258E 3C3B                <2> 	cmp al, ';'
  2923 00002590 740B                <2> 	je nomorezeroes
  2924 00002592 3C00                <2> 	cmp al, 0
  2925 00002594 7407                <2> 	je nomorezeroes
  2926 00002596 3C20                <2> 	cmp al, ' '
  2927 00002598 75F1                <2> 	jne getcommandzeroes
  2928 0000259A 41                  <2> 	inc ecx
  2929 0000259B EBEE                <2> 	jmp getcommandzeroes
  2930                              <2> nomorezeroes:
  2931 0000259D 41                  <2> 	inc ecx
  2932 0000259E 4F                  <2> 	dec edi
  2933 0000259F 8B1D[8AB70000]      <2> 	mov ebx, [uid]
  2934 000025A5 8B15[14650000]      <2> 	mov edx, [currentthread]
  2935 000025AB CF                  <2> 	iret
  2936                              <2> 	
  2937                              <1> termcopy:
  2938                              <1> %ifdef io.serial
  2939                              <1> 	ret
  2940                              <1> %else
  2941                              <1> %ifdef terminal.vsync
  2942                              <1> 	mov byte [termcopyneeded], 1
  2943                              <1> 	ret
  2944                              <1> %else
  2945 000025AC E808000000          <1> 	call newtermcopy
  2946 000025B1 C3                  <1> 	ret
  2947                              <1> %endif
  2948 000025B2 00                  <1> 	termcopyneeded db 0
  2949 000025B3 00000000            <1> 	termcursorpos dd 0
  2950 000025B7 0000                <1> 	removedvideo dw 0
  2951                              <1> newtermcopy:
  2952 000025B9 60                  <1> 	pusha
  2953 000025BA BF[14E72800]        <1> 	mov edi, videobuf
  2954 000025BF 31DB                <1> 	xor ebx, ebx
  2955 000025C1 881D[B2250000]      <1> 	mov [termcopyneeded], bl
  2956 000025C7 8B1D[35240000]      <1> 	mov ebx, [videobufpos]
  2957 000025CD 01DF                <1> 	add edi, ebx
  2958 000025CF 893D[B3250000]      <1> 	mov [termcursorpos], edi
  2959 000025D5 E8CB000000          <1> 	call switchtermcursor
  2960 000025DA 803D[389F0000]00    <1> 	cmp byte [guion], 0
  2961 000025E1 0F8420000000        <1> 	je near nowincopy
  2962                              <1> %ifdef gui.included
  2963 000025E7 C605[31780000]00    <1> 	mov byte [mouseselecton], 0
  2964 000025EE C605[62220000]01    <1> 	mov byte [termcopyon], 1
  2965 000025F5 803D[61220000]01    <1> 	cmp byte [termguion], 1
  2966 000025FC 0F84BD4F0000        <1> 	je near windowvideocopy
  2967                              <1> %endif
  2968 00002602 E997000000          <1> 	jmp nocopytermatall
  2969                              <1> nowincopy:
  2970 00002607 BE00000A00          <1> 	mov esi, 0xA0000
  2971 0000260C A1[3E020000]        <1> 	mov eax, [basecache]
  2972 00002611 C1E004              <1> 	shl eax, 4
  2973 00002614 29C6                <1> 	sub esi, eax
  2974 00002616 BF[14E72800]        <1> 	mov edi, videobuf
  2975 0000261B 31C9                <1> 	xor ecx, ecx
  2976 0000261D 668B0D[3B240000]    <1> 	mov cx, [charxy]
  2977                              <1> nowincopy2:
  2978 00002624 668B07              <1> 	mov ax, [edi]
  2979 00002627 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2980 0000262D 668B1F              <1> 	mov bx, [edi]
  2981 00002630 668907              <1> 	mov [edi], ax
  2982 00002633 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2983 00002639 47                  <1> 	inc edi
  2984 0000263A 6639D8              <1> 	cmp ax, bx
  2985 0000263D 743E                <1> 	je nopresentwinfont
  2986 0000263F 4F                  <1> 	dec edi
  2987 00002640 BB[838D0000]        <1> 	mov ebx, fonts
  2988 00002645 31C0                <1> 	xor eax, eax
  2989 00002647 8A07                <1> 	mov al, [edi]
  2990 00002649 C1E004              <1> 	shl eax, 4
  2991 0000264C 01C3                <1> 	add ebx, eax
  2992 0000264E 47                  <1> 	inc edi
  2993 0000264F 8A27                <1> 	mov ah, [edi]
  2994 00002651 31D2                <1> 	xor edx, edx
  2995 00002653 8A15[3B240000]      <1> 	mov dl, [charxy]
  2996 00002659 C1C110              <1> 	rol ecx, 16
  2997 0000265C B110                <1> 	mov cl, 16
  2998                              <1> nowinfont:
  2999 0000265E 8A03                <1> 	mov al, [ebx]
  3000 00002660 D0C8                <1> 	ror al, 1
  3001 00002662 80FC07              <1> 	cmp ah, 7
  3002 00002665 7602                <1> 	jbe notnotfont
  3003 00002667 F6D0                <1> 	not al
  3004                              <1> notnotfont:
  3005 00002669 8806                <1> 	mov [esi], al
  3006 0000266B 01D6                <1> 	add esi, edx
  3007 0000266D 43                  <1> 	inc ebx
  3008 0000266E FEC9                <1> 	dec cl
  3009 00002670 80F900              <1> 	cmp cl, 0
  3010 00002673 75E9                <1> 	jne nowinfont
  3011 00002675 C1E204              <1> 	shl edx, 4
  3012 00002678 29D6                <1> 	sub esi, edx
  3013 0000267A C1C110              <1> 	rol ecx, 16
  3014                              <1> nopresentwinfont:
  3015 0000267D 47                  <1> 	inc edi
  3016 0000267E 46                  <1> 	inc esi
  3017 0000267F FEC9                <1> 	dec cl
  3018 00002681 80F900              <1> 	cmp cl, 0
  3019 00002684 759E                <1> 	jne nowincopy2
  3020 00002686 8A0D[3B240000]      <1> 	mov cl, [charxy]
  3021 0000268C 31D2                <1> 	xor edx, edx
  3022 0000268E 88CA                <1> 	mov dl, cl
  3023 00002690 29D6                <1> 	sub esi, edx
  3024 00002692 C1E204              <1> 	shl edx, 4
  3025 00002695 01D6                <1> 	add esi, edx
  3026 00002697 FECD                <1> 	dec ch
  3027 00002699 80FD00              <1> 	cmp ch, 0
  3028 0000269C 7586                <1> 	jne nowincopy2
  3029                              <1> nocopytermatall:
  3030 0000269E E802000000          <1> 	call switchtermcursor
  3031 000026A3 61                  <1> 	popa
  3032 000026A4 C3                  <1> 	ret
  3033                              <1> 	
  3034                              <1> switchtermcursor:
  3035 000026A5 8B3D[B3250000]      <1> 	mov edi, [termcursorpos]
  3036 000026AB 8A4701              <1> 	mov al, [edi + 1]
  3037 000026AE 8A27                <1> 	mov ah, [edi]
  3038 000026B0 3C07                <1> 	cmp al, 7
  3039 000026B2 7607                <1> 	jbe movlargecursorterm
  3040 000026B4 B007                <1> 	mov al, 7
  3041 000026B6 E902000000          <1> 	jmp movedcursorterm
  3042                              <1> movlargecursorterm:
  3043 000026BB B0F0                <1> 	mov al, 0xF0
  3044                              <1> movedcursorterm:
  3045 000026BD 884701              <1> 	mov [edi + 1], al
  3046 000026C0 80FC00              <1> 	cmp ah, 0
  3047 000026C3 7504                <1> 	jne fixednocursorterm
  3048 000026C5 B420                <1> 	mov ah, " "
  3049 000026C7 8827                <1> 	mov [edi], ah
  3050                              <1> fixednocursorterm:
  3051 000026C9 C3                  <1> 	ret
  3052                              <1> %endif
  3053                                      %include "source/dosints.asm"
  3054                              <1> int20h:
  3055 000026CA 66B8004C            <1> mov ax, 0x4C00
  3056                              <1> int21h:
  3057                              <1> dostosolleros:
  3058 000026CE 6650                <1> 	push ax
  3059 000026D0 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3060 000026D4 8ED8                <1> 	mov ds, ax
  3061 000026D6 8EC0                <1> 	mov es, ax
  3062 000026D8 8EE0                <1> 	mov fs, ax
  3063 000026DA 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3064 000026DE 8EE8                <1> 	mov gs, ax
  3065 000026E0 6658                <1> 	pop ax
  3066 000026E2 9C                  <1> 	pushf
  3067 000026E3 60                  <1> 	pusha
  3068 000026E4 80FC01              <1> 	cmp ah, 1
  3069 000026E7 0F8449000000        <1> 	je near dosgchar
  3070 000026ED 80FC02              <1> 	cmp ah, 2
  3071 000026F0 0F8447000000        <1> 	je near doswchar
  3072 000026F6 80FC09              <1> 	cmp ah, 9
  3073 000026F9 0F8449000000        <1> 	je near dosprintstr
  3074 000026FF 80FC0A              <1> 	cmp ah, 0xA
  3075 00002702 0F8456000000        <1> 	je near dosgetstr
  3076 00002708 80FC2B              <1> 	cmp ah, 0x2B
  3077 0000270B 0F8492000000        <1> 	je near dosgetdate
  3078 00002711 80FC2C              <1> 	cmp ah, 0x2C
  3079 00002714 0F84AC000000        <1> 	je near dosgettime
  3080 0000271A 80FC4C              <1> 	cmp ah, 0x4C
  3081 0000271D 0F84C1000000        <1> 	je near dosexit
  3082                              <1> backtodos:
  3083 00002723 61                  <1> 	popa
  3084 00002724 9D                  <1> 	popf
  3085 00002725 6650                <1> 	push ax
  3086 00002727 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3087 0000272B 8ED8                <1> 	mov ds, ax
  3088 0000272D 8EC0                <1> 	mov es, ax
  3089 0000272F 8EE0                <1> 	mov fs, ax
  3090 00002731 8EE8                <1> 	mov gs, ax
  3091 00002733 6658                <1> 	pop ax
  3092 00002735 CF                  <1> 	iret
  3093                              <1> 
  3094                              <1> dosgchar:
  3095 00002736 E8B2FAFFFF          <1> 	call getchar
  3096 0000273B EBE6                <1> 	jmp backtodos
  3097                              <1> 	
  3098                              <1> doswchar:
  3099 0000273D 88D0                <1> 	mov al, dl
  3100 0000273F B307                <1> 	mov bl, 7
  3101 00002741 E80CFBFFFF          <1> 	call prcharint
  3102 00002746 EBDB                <1> 	jmp backtodos
  3103                              <1> 	
  3104                              <1> dosprintstr:
  3105 00002748 31F6                <1> 	xor esi, esi
  3106 0000274A 6689D6              <1> 	mov si, dx
  3107 0000274D 81C600004000        <1> 	add esi, dosprogloc
  3108 00002753 B024                <1> 	mov al, "$"
  3109 00002755 B307                <1> 	mov bl, 7
  3110 00002757 E8CAF5FFFF          <1> 	call printint
  3111 0000275C EBC5                <1> 	jmp backtodos
  3112                              <1> 	
  3113                              <1> dosgetstr:
  3114 0000275E 31F6                <1> 	xor esi, esi
  3115 00002760 6689D6              <1> 	mov si, dx
  3116 00002763 81C600004000        <1> 	add esi, dosprogloc
  3117 00002769 B900000000          <1> 	mov ecx, 0
  3118 0000276E 8A0E                <1> 	mov cl, [esi]
  3119 00002770 81C602000000        <1> 	add esi, 2
  3120 00002776 89F7                <1> 	mov edi, esi
  3121 00002778 8935[9F270000]      <1> 	mov [stringstart], esi
  3122 0000277E 01CF                <1> 	add edi, ecx
  3123 00002780 B00A                <1> 	mov al, 10
  3124 00002782 B307                <1> 	mov bl, 7
  3125 00002784 E88DF6FFFF          <1> 	call rdprintdos
  3126 00002789 89F1                <1> 	mov ecx, esi
  3127 0000278B 2B0D[9F270000]      <1> 	sub ecx, [stringstart]
  3128 00002791 8B35[9F270000]      <1> 	mov esi, [stringstart]
  3129 00002797 884EFF              <1> 	mov [esi - 1], cl
  3130 0000279A 884EFE              <1> 	mov [esi - 2], cl
  3131 0000279D EB84                <1> 	jmp backtodos
  3132 0000279F 00000000            <1> stringstart dd 0
  3133                              <1> 
  3134                              <1> dosgetdate:
  3135 000027A3 E887260000          <1> 	call time
  3136 000027A8 8A0D[F74F0000]      <1> 	mov cl, [RTCtimeYear]
  3137 000027AE B500                <1> 	mov ch, 0
  3138 000027B0 6681C1D007          <1> 	add cx, 2000
  3139 000027B5 8A35[F64F0000]      <1> 	mov dh, [RTCtimeMonth]
  3140 000027BB 8A15[F54F0000]      <1> 	mov dl, [RTCtimeDay]
  3141 000027C1 E95DFFFFFF          <1> 	jmp backtodos
  3142                              <1> 
  3143                              <1> dosgettime:
  3144 000027C6 E864260000          <1> 	call time
  3145 000027CB 8A2D[F44F0000]      <1> 	mov ch, [RTCtimeHour]
  3146 000027D1 8A0D[F34F0000]      <1> 	mov cl, [RTCtimeMinute]
  3147 000027D7 8A35[F24F0000]      <1> 	mov dh, [RTCtimeSecond]
  3148 000027DD B200                <1> 	mov dl, 0
  3149 000027DF E93FFFFFFF          <1> 	jmp backtodos
  3150                              <1> 	
  3151                              <1> dosexit:
  3152 000027E4 BE[5E8D0000]        <1> 	mov esi, line
  3153 000027E9 E831F5FFFF          <1> 	call print
  3154 000027EE 61                  <1> 	popa
  3155 000027EF 9D                  <1> 	popf
  3156 000027F0 8B25[7EB50000]      <1> 	mov esp, [previousstack]
  3157 000027F6 31DB                <1> 	xor ebx, ebx
  3158 000027F8 88C3                <1> 	mov bl, al
  3159 000027FA 80FB00              <1> 	cmp bl, 0
  3160 000027FD 0F85AAF4FFFF        <1> 	jne near exitprog.error
  3161 00002803 C3                  <1> 	ret
  3162                                      %include "source/solleros.asm"
  3163                              <1> 	;SOLLEROS.ASM
  3164                              <1> os:
  3165                              <1> setdefenv:
  3166 00002804 B02F                <1> 	mov al, '/'
  3167 00002806 A2[8AB50000]        <1> 	mov [currentfolder], al
  3168 0000280B B801000000          <1> 	mov eax, 1
  3169 00002810 A3[86B50000]        <1> 	mov [currentfolderloc], eax
  3170 00002815 E86BF5FFFF          <1> 	call clear
  3171                              <1> 	
  3172                              <1> bootfilecheck:
  3173 0000281A 803D[8EB70000]01    <1> 	cmp byte [ranboot], 1
  3174 00002821 0F8421000000        <1> 	je near nobootfile
  3175                              <1> 	%ifdef hardware.automatic
  3176 00002827 E81C370000          <1> 		call initializelater ;Initialize components that have debug messages
  3177                              <1> 	%endif
  3178 0000282C BF[1D8D0000]        <1> 	mov edi, bootfilename
  3179 00002831 BE00004000          <1> 	mov esi, 0x400000
  3180 00002836 E8393B0000          <1> 	call loadfile
  3181 0000283B 81FA00000000        <1> 	cmp edx, 0
  3182 00002841 7505                <1> 	jne nobootfile
  3183 00002843 E8B00D0000          <1> 	call progbatchfound
  3184                              <1> nobootfile:	
  3185 00002848 C605[8EB70000]01    <1> 	mov byte [ranboot], 1
  3186                              <1> 
  3187 0000284F BE[00000000]        <1> 	mov esi, signature
  3188                              <1> .sigcopyloop:	;this prevents an odd error
  3189 00002854 658A06              <1> 	mov al, [gs:esi]
  3190 00002857 8806                <1> 	mov [esi], al
  3191 00002859 46                  <1> 	inc esi
  3192 0000285A 81FE[1A000000]      <1> 	cmp esi, signatureend
  3193 00002860 72F2                <1> 	jb .sigcopyloop
  3194                              <1> 	
  3195 00002862 BE[00000000]        <1> 	mov esi, signature
  3196 00002867 E8B3F4FFFF          <1> 	call print
  3197 0000286C 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3198 00002872 E8F4060000          <1> 	call showdec
  3199 00002877 BE[5E8D0000]        <1> 	mov esi, line
  3200 0000287C E89EF4FFFF          <1> 	call print
  3201 00002881 BE[3A8D0000]        <1> 	mov esi, userask
  3202 00002886 E894F4FFFF          <1> 	call print
  3203                              <1> usercheck:
  3204 0000288B BE[FECB0000]        <1> 	mov esi, buftxt
  3205 00002890 BF[FECF0000]        <1> 	mov edi, buftxtend
  3206 00002895 B00A                <1> 	mov al, 10
  3207 00002897 E868F5FFFF          <1> 	call rdprint
  3208 0000289C 56                  <1> 	push esi
  3209 0000289D BE[448D0000]        <1> 	mov esi, pwdask
  3210 000028A2 E878F4FFFF          <1> 	call print
  3211 000028A7 5E                  <1> 	pop esi
  3212 000028A8 46                  <1> 	inc esi
  3213 000028A9 8935[9C290000]      <1> 	mov [esipass], esi
  3214                              <1> passcheck:
  3215 000028AF E839F9FFFF          <1> 	call getchar
  3216 000028B4 3C0A                <1> 	cmp al, 10
  3217 000028B6 0F8436000000        <1> 	je near gotpass
  3218 000028BC 3C08                <1> 	cmp al, 8
  3219 000028BE 0F8410000000        <1> 	je near backpass
  3220 000028C4 8806                <1> 	mov [esi], al
  3221 000028C6 46                  <1> 	inc esi
  3222 000028C7 B02A                <1> 	mov al, "*"
  3223 000028C9 E884F9FFFF          <1> 	call prcharint
  3224 000028CE EBDF                <1> 	jmp passcheck
  3225 000028D0 08200800            <1> backcursor2 db 8," ",8,0
  3226                              <1> backpass:
  3227 000028D4 3B35[9C290000]      <1> 	cmp esi, [esipass]
  3228 000028DA 0F84CFFFFFFF        <1> 	je near passcheck
  3229 000028E0 4E                  <1> 	dec esi
  3230 000028E1 C60600              <1> 	mov byte [esi], 0
  3231 000028E4 56                  <1> 	push esi
  3232 000028E5 BE[D0280000]        <1> 	mov esi, backcursor2
  3233 000028EA E830F4FFFF          <1> 	call print
  3234 000028EF 5E                  <1> 	pop esi
  3235 000028F0 EBBD                <1> 	jmp passcheck
  3236                              <1> gotpass:
  3237 000028F2 B00A                <1> 	mov al, 10
  3238 000028F4 E859F9FFFF          <1> 	call prcharint
  3239 000028F9 30C0                <1> 	xor al, al
  3240 000028FB 31C9                <1> 	xor ecx, ecx
  3241 000028FD 8806                <1> 	mov [esi], al
  3242 000028FF BB[608D0000]        <1> 	mov ebx, userlst
  3243                              <1> userfind:
  3244 00002904 BE[FECB0000]        <1> 	mov esi, buftxt
  3245 00002909 8A06                <1> 	mov al, [esi]
  3246 0000290B 3C00                <1> 	cmp al, 0
  3247 0000290D 0F84F1FEFFFF        <1> 	je near os
  3248 00002913 891D[A0290000]      <1> 	mov [usercache], ebx
  3249 00002919 E860030000          <1> 	call tester
  3250 0000291E 3C01                <1> 	cmp al, 1
  3251 00002920 7416                <1> 	je pwdtest
  3252 00002922 41                  <1> 	inc ecx
  3253                              <1> nxtuser:
  3254 00002923 8A03                <1> 	mov al, [ebx]
  3255 00002925 43                  <1> 	inc ebx
  3256 00002926 3C00                <1> 	cmp al, 0
  3257 00002928 75F9                <1> 	jne nxtuser
  3258 0000292A 81FB[838D0000]      <1> 	cmp ebx, userlstend
  3259 00002930 0F83CEFEFFFF        <1> 	jae near os
  3260 00002936 EBCC                <1> 	jmp userfind
  3261                              <1> pwdtest:
  3262 00002938 46                  <1> 	inc esi
  3263 00002939 43                  <1> 	inc ebx
  3264 0000293A E83F030000          <1> 	call tester
  3265 0000293F 3C01                <1> 	cmp al, 1
  3266 00002941 7402                <1> 	je pwdrgt
  3267 00002943 EBDE                <1> 	jmp nxtuser
  3268                              <1> pwdrgt:
  3269 00002945 D1E9                <1> 	shr ecx, 1
  3270 00002947 890D[8AB70000]      <1> 	mov [uid], ecx
  3271 0000294D E833F4FFFF          <1> 	call clear
  3272 00002952 31C9                <1> 	xor ecx, ecx
  3273 00002954 41                  <1> 	inc ecx
  3274 00002955 890D[60BC2900]      <1> 	mov [commandbufpos], ecx
  3275                              <1> returnfromexp:
  3276 0000295B 66B90002            <1> 	mov cx, 200h
  3277 0000295F BE[FECB0000]        <1> 	mov esi, buftxt
  3278 00002964 8935[7A2C0000]      <1> 	mov [currentcommandloc], esi
  3279 0000296A E825000000          <1> 	call bufclr
  3280                              <1> clearolddata:
  3281 0000296F 31C0                <1> 	xor eax, eax
  3282 00002971 A2[8FB70000]        <1> 	mov [IFON], al
  3283 00002976 A2[90B70000]        <1> 	mov [IFTRUE], al
  3284 0000297B A2[F8B70000]        <1> 	mov [BATCHISON], al
  3285 00002980 A3[F4B70000]        <1> 	mov [BATCHPOS], eax
  3286 00002985 A2[F9B70000]        <1> 	mov [LOOPON], al
  3287 0000298A A3[FAB70000]        <1> 	mov [LOOPPOS], eax
  3288 0000298F E933000000          <1> 	jmp nwcmd
  3289                              <1> bufclr:	
  3290 00002994 30C0                <1> 	xor al, al
  3291 00002996 8806                <1> 	mov [esi], al
  3292 00002998 46                  <1> 	inc esi
  3293 00002999 E2F9                <1> 	loop bufclr
  3294 0000299B C3                  <1> 	ret
  3295                              <1> 
  3296 0000299C 00000000            <1> esipass dd 0
  3297 000029A0 [608D0000]          <1> usercache dd userlst
  3298                              <1> 	
  3299                              <1> buftxtclear:
  3300 000029A4 30C0                <1> 	xor al, al
  3301 000029A6 BE[FECB0000]        <1> 	mov esi, buftxt
  3302 000029AB 81FE[FECF0000]      <1> clearbuftxt: cmp esi, buf2
  3303 000029B1 730E                <1> 	jae retbufclr
  3304 000029B3 8806                <1> 	mov [esi], al
  3305 000029B5 46                  <1> 	inc esi
  3306 000029B6 EBF3                <1> 	jmp clearbuftxt
  3307                              <1> 
  3308 000029B8 39DE                <1> clearitbuf: cmp esi, ebx
  3309 000029BA 7305                <1> 	jae retbufclr
  3310 000029BC 8806                <1> 	mov [esi], al
  3311 000029BE 46                  <1> 	inc esi
  3312 000029BF EBF7                <1> 	jmp clearitbuf
  3313 000029C1 C3                  <1> retbufclr: ret
  3314                              <1> 
  3315 000029C2 E900000000          <1> full:	jmp nwcmd
  3316                              <1> 
  3317                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3318                              <1> nwcmd:
  3319 000029C7 FB                  <1> 	sti
  3320 000029C8 31C0                <1> 	xor eax, eax
  3321 000029CA 3905[9C2B0000]      <1> 	cmp [nextcommandloc], eax
  3322 000029D0 7413                <1> 	je nomultiplecommand
  3323 000029D2 8B35[9C2B0000]      <1> 	mov esi, [nextcommandloc]
  3324 000029D8 8935[A02B0000]      <1> 	mov [thiscommandloc], esi
  3325 000029DE E8C6010000          <1> 	call fixvariables
  3326 000029E3 EBE2                <1> 	jmp nwcmd
  3327                              <1> nomultiplecommand:
  3328 000029E5 A3[A02B0000]        <1> 	mov [thiscommandloc], eax
  3329 000029EA 3805[13650000]      <1> 	cmp [threadson], al
  3330 000029F0 7405                <1> 	je noclinwcmd
  3331 000029F2 A2[13650000]        <1> 	mov [threadson], al
  3332                              <1> noclinwcmd:
  3333 000029F7 B001                <1> 	mov al, 1
  3334 000029F9 3805[F8B70000]      <1> 	cmp [BATCHISON], al
  3335 000029FF 7501                <1> 	jne cancel
  3336 00002A01 C3                  <1> 	ret
  3337 00002A02 30C0                <1> cancel:	xor al, al
  3338 00002A04 A2[8FB70000]        <1> 	mov [IFON], al
  3339 00002A09 A2[F8B70000]        <1> 	mov [BATCHISON], al
  3340 00002A0E B05B                <1> 	mov al, '['
  3341 00002A10 66BB0700            <1> 	mov bx, 7
  3342 00002A14 E84AF8FFFF          <1> 	call prcharq
  3343 00002A19 8B35[A0290000]      <1> 	mov esi, [usercache]
  3344 00002A1F E8E9F2FFFF          <1> 	call printquiet
  3345 00002A24 BE[4E8D0000]        <1> 	mov esi, computer
  3346 00002A29 E8DFF2FFFF          <1> 	call printquiet
  3347 00002A2E BE[8AB50000]        <1> 	mov esi, currentfolder
  3348 00002A33 0335[82B50000]      <1> 	add esi, [lastfolderloc]
  3349 00002A39 E8CFF2FFFF          <1> 	call printquiet
  3350 00002A3E BE[598D0000]        <1> 	mov esi, endprompt
  3351 00002A43 E8D7F2FFFF          <1> 	call print
  3352 00002A48 E857FFFFFF          <1> 	call buftxtclear
  3353 00002A4D BE[FECB0000]        <1> 	mov esi, buftxt
  3354 00002A52 C605[D6210000]01    <1> 	mov byte [commandedit], 1
  3355 00002A59 B00A                <1> 	mov al, 10
  3356 00002A5B 66BB0700            <1> 	mov bx, 7
  3357 00002A5F BF[FECF0000]        <1> 	mov edi, buftxtend
  3358 00002A64 E89BF3FFFF          <1> 	call rdprint
  3359 00002A69 C605[D6210000]00    <1> 	mov byte [commandedit], 0
  3360 00002A70 803D[FECB0000]00    <1> 	cmp byte [buftxt], 0
  3361 00002A77 0F844AFFFFFF        <1> 	je near nwcmd
  3362 00002A7D 8B35[60BC2900]      <1> gotcmd:	mov esi, [commandbufpos]
  3363 00002A83 8935[5CBC2900]      <1> 	mov [lastcommandpos], esi
  3364 00002A89 FF05[68BC2900]      <1> 	inc dword [commandsentered]
  3365 00002A8F BF[FECB0000]        <1> 	mov edi, buftxt
  3366 00002A94 81C6[6CBC2900]      <1> 	add esi, commandbuf
  3367 00002A9A 81FE[6CCC2900]      <1> 	cmp esi, commandbufend
  3368 00002AA0 7605                <1> 	jbe copycommand
  3369 00002AA2 BE[6CBC2900]        <1> 	mov esi, commandbuf
  3370                              <1> copycommand:
  3371 00002AA7 8A07                <1> 	mov al, [edi]
  3372 00002AA9 8806                <1> 	mov [esi], al
  3373 00002AAB 47                  <1> 	inc edi
  3374 00002AAC 46                  <1> 	inc esi
  3375 00002AAD 3C00                <1> 	cmp al, 0
  3376 00002AAF 740F                <1> 	je donecopy
  3377 00002AB1 81FE[6CCC2900]      <1> 	cmp esi, commandbufend
  3378 00002AB7 76EE                <1> 	jbe copycommand
  3379 00002AB9 BE[6CBC2900]        <1> 	mov esi, commandbuf
  3380 00002ABE EBE7                <1> 	jmp copycommand
  3381                              <1> donecopy:
  3382 00002AC0 81EE[6CBC2900]      <1> 	sub esi, commandbuf
  3383 00002AC6 8935[60BC2900]      <1> 	mov [commandbufpos], esi
  3384 00002ACC E8D3000000          <1> 	call run
  3385 00002AD1 E9F1FEFFFF          <1> 	jmp nwcmd
  3386                              <1> 
  3387 00002AD6 E8C9FEFFFF          <1> input:	call buftxtclear
  3388 00002ADB BE[FECB0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3389 00002AE0 BF[FECF0000]        <1> 	mov edi, buftxtend
  3390 00002AE5 B00A                <1> stdin:	mov al, 10
  3391 00002AE7 B307                <1> 	mov bl, 7
  3392 00002AE9 E816F3FFFF          <1> 	call rdprint
  3393 00002AEE C3                  <1> 	ret
  3394                              <1> 
  3395                              <1> replacevariable:
  3396 00002AEF 8A4601              <1> 	mov al, [esi + 1]
  3397 00002AF2 C64601FF            <1> 	mov byte [esi + 1], 255
  3398 00002AF6 3C24                <1> 	cmp al, "$"
  3399 00002AF8 0F84AB000000        <1> 	je near fixvariables
  3400 00002AFE 884601              <1> 	mov [esi + 1], al
  3401 00002B01 56                  <1> 	push esi
  3402 00002B02 81EE[FECB0000]      <1> 	sub esi, buftxt
  3403 00002B08 89F7                <1> 	mov edi, esi
  3404 00002B0A 81C6[FECB0000]      <1> 	add esi, buftxt
  3405 00002B10 47                  <1> 	inc edi
  3406 00002B11 BB[FEB70000]        <1> 	mov ebx, variables
  3407 00002B16 E8A3140000          <1> 	call nxtvrech
  3408 00002B1B 89F7                <1> 	mov edi, esi
  3409 00002B1D 31DB                <1> 	xor ebx, ebx
  3410 00002B1F 4E                  <1> 	dec esi
  3411                              <1> findvarname:
  3412 00002B20 4E                  <1> 	dec esi
  3413 00002B21 8A06                <1> 	mov al, [esi]
  3414 00002B23 43                  <1> 	inc ebx
  3415 00002B24 3C04                <1> 	cmp al, 4
  3416 00002B26 75F8                <1> 	jne findvarname
  3417 00002B28 5E                  <1> 	pop esi
  3418                              <1> replacevarloop:
  3419 00002B29 8A07                <1> 	mov al, [edi]
  3420 00002B2B 3C00                <1> 	cmp al, 0
  3421 00002B2D 0F8413000000        <1> 	je near compressbuftxt
  3422 00002B33 81FB00000000        <1> 	cmp ebx, 0
  3423 00002B39 0F8416000000        <1> 	je near expandbuftxt
  3424 00002B3F 8806                <1> 	mov [esi], al
  3425 00002B41 4B                  <1> 	dec ebx
  3426 00002B42 46                  <1> 	inc esi
  3427 00002B43 47                  <1> 	inc edi
  3428 00002B44 EBE3                <1> 	jmp replacevarloop
  3429                              <1> compressbuftxt:
  3430 00002B46 8A041E              <1> 	mov al, [esi + ebx]
  3431 00002B49 8806                <1> 	mov [esi], al
  3432 00002B4B 46                  <1> 	inc esi
  3433 00002B4C 3C00                <1> 	cmp al, 0
  3434 00002B4E 75F6                <1> 	jne compressbuftxt
  3435 00002B50 E954000000          <1> 	jmp fixvariables
  3436                              <1> expandbuftxt:
  3437 00002B55 89F1                <1> 	mov ecx, esi
  3438 00002B57 8A26                <1> 	mov ah, [esi]
  3439                              <1> expandbuftxtlp:
  3440 00002B59 8A1E                <1> 	mov bl, [esi]
  3441 00002B5B 46                  <1> 	inc esi
  3442 00002B5C 8A3E                <1> 	mov bh, [esi]
  3443 00002B5E 8826                <1> 	mov [esi], ah
  3444 00002B60 88FC                <1> 	mov ah, bh
  3445 00002B62 80FB00              <1> 	cmp bl, 0
  3446 00002B65 75F2                <1> 	jne expandbuftxtlp
  3447 00002B67 89CE                <1> 	mov esi, ecx
  3448 00002B69 8806                <1> 	mov [esi], al
  3449 00002B6B 47                  <1> 	inc edi
  3450 00002B6C 8A07                <1> 	mov al, [edi]
  3451 00002B6E 3C00                <1> 	cmp al, 0
  3452 00002B70 0F8433000000        <1> 	je near fixvariables
  3453 00002B76 46                  <1> 	inc esi
  3454 00002B77 EBDC                <1> 	jmp expandbuftxt
  3455                              <1> multipleprogline:
  3456 00002B79 30E4                <1> 	xor ah, ah
  3457 00002B7B 8826                <1> 	mov [esi], ah
  3458 00002B7D 46                  <1> 	inc esi
  3459 00002B7E 8935[9C2B0000]      <1> 	mov [nextcommandloc], esi
  3460 00002B84 E93E000000          <1> 	jmp donefixvariables
  3461                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3462 00002B89 46                  <1> 	inc esi
  3463 00002B8A 8A06                <1> 	mov al, [esi]
  3464 00002B8C C606FF              <1> 	mov byte [esi], 255
  3465 00002B8F 3C23                <1> 	cmp al, '#'
  3466 00002B91 7416                <1> 	je fixvariables
  3467 00002B93 4E                  <1> 	dec esi
  3468 00002B94 C60600              <1> 	mov byte [esi], 0
  3469 00002B97 E90D000000          <1> 	jmp fixvariables
  3470                              <1> 	
  3471 00002B9C 00000000            <1> nextcommandloc dd 0
  3472 00002BA0 00000000            <1> thiscommandloc dd 0	
  3473                              <1> run:
  3474 00002BA4 BE[FECB0000]        <1> 	mov esi, buftxt
  3475 00002BA9 46                  <1> fixvariables:	inc esi
  3476 00002BAA 8A06                <1> 	mov al, [esi]
  3477 00002BAC 3C23                <1> 	cmp al, '#'	;inline comment
  3478 00002BAE 74D9                <1> 	je inlinecomment
  3479 00002BB0 3C24                <1> 	cmp al, '$' ;variable
  3480 00002BB2 0F8437FFFFFF        <1> 	je near replacevariable
  3481 00002BB8 3C3B                <1> 	cmp al, ';' ;program list
  3482 00002BBA 74BD                <1> 	je multipleprogline
  3483 00002BBC 3C00                <1> 	cmp al, 0
  3484 00002BBE 75E9                <1> 	jne fixvariables
  3485 00002BC0 31C0                <1> 	xor eax, eax
  3486 00002BC2 A3[9C2B0000]        <1> 	mov [nextcommandloc], eax
  3487                              <1> donefixvariables:
  3488 00002BC7 803D[65310000]00    <1> 	cmp byte [indexdone], 0
  3489 00002BCE 7505                <1> 	jne progtest
  3490 00002BD0 E8FB040000          <1> 	call indexfiles
  3491                              <1> progtest:
  3492 00002BD5 31C0                <1> 	xor eax, eax
  3493 00002BD7 BB[7EB10000]        <1> 	mov ebx, fileindex
  3494 00002BDC 668B03              <1> prgnxt:	mov ax, [ebx]
  3495 00002BDF B1FF                <1> 	mov cl, 255
  3496 00002BE1 B52C                <1> 	mov ch, 44
  3497 00002BE3 6639C8              <1> 	cmp ax, cx
  3498 00002BE6 740B                <1> 	je fndprg
  3499 00002BE8 43                  <1> 	inc ebx
  3500 00002BE9 81FB[7EB50000]      <1> 	cmp ebx, fileindexend
  3501 00002BEF 735D                <1> 	jae prgnf
  3502 00002BF1 EBE9                <1> 	jmp prgnxt
  3503 00002BF3 81C302000000        <1> fndprg: add ebx, 2
  3504 00002BF9 31C9                <1> 	xor ecx, ecx
  3505 00002BFB BE[FECB0000]        <1> 	mov esi, buftxt
  3506 00002C00 390D[A02B0000]      <1> 	cmp [thiscommandloc], ecx
  3507 00002C06 7406                <1> 	je noprgtstmultiple
  3508 00002C08 8B35[A02B0000]      <1> 	mov esi, [thiscommandloc]
  3509                              <1> noprgtstmultiple:
  3510 00002C0E E8A6000000          <1> 	call cndtest
  3511 00002C13 3C01                <1> 	cmp al, 1
  3512 00002C15 7302                <1> 	jae prggood
  3513 00002C17 EBC3                <1> 	jmp prgnxt
  3514 00002C19 81FB[7EB50000]      <1> prggood: cmp ebx, fileindexend
  3515 00002C1F 7358                <1> 	jae prgdn
  3516 00002C21 31C0                <1> 	xor eax, eax
  3517 00002C23 BE[FECB0000]        <1> 	mov esi, buftxt
  3518 00002C28 3905[A02B0000]      <1> 	cmp [thiscommandloc], eax
  3519 00002C2E 7406                <1> 	je noprggoodmul
  3520 00002C30 8B35[A02B0000]      <1> 	mov esi, [thiscommandloc]
  3521                              <1> noprggoodmul:
  3522 00002C36 8935[7A2C0000]      <1> 	mov [currentcommandloc], esi
  3523 00002C3C 81C303000000        <1> 	add ebx, 3
  3524 00002C42 8B3B                <1> 	mov edi, [ebx]
  3525 00002C44 C605[13650000]02    <1> 	mov byte [threadson], 2
  3526 00002C4B FFD7                <1> 	call edi
  3527 00002C4D C3                  <1> 	ret
  3528                              <1> prgnf:	
  3529 00002C4E 8B35[7A2C0000]      <1> 	mov esi, [currentcommandloc]
  3530 00002C54 8A06                <1> 	mov al, [esi]
  3531 00002C56 3C00                <1> 	cmp al, 0
  3532 00002C58 741F                <1> 	je prgdn
  3533 00002C5A BE[258D0000]        <1> 	mov esi, notfound1
  3534 00002C5F E8BBF0FFFF          <1> 	call print
  3535 00002C64 8B35[7A2C0000]      <1> 	mov esi, [currentcommandloc]
  3536 00002C6A E8B0F0FFFF          <1> 	call print
  3537 00002C6F BE[2D8D0000]        <1> 	mov esi, notfound2
  3538 00002C74 E8A6F0FFFF          <1> 	call print
  3539 00002C79 C3                  <1> prgdn:	ret
  3540                              <1> 
  3541 00002C7A 00000000            <1> currentcommandloc dd 0
  3542                              <1> 
  3543                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3544 00002C7E 6631C0              <1> 	xor ax, ax
  3545 00002C81 8A06                <1> retest:	mov al, [esi]
  3546 00002C83 8A23                <1> 	mov ah, [ebx]
  3547 00002C85 3C00                <1> 	cmp al, 0
  3548 00002C87 7408                <1> 	je testtrue
  3549 00002C89 38E0                <1> 	cmp al, ah
  3550 00002C8B 750C                <1> 	jne testfalse
  3551 00002C8D 43                  <1> 	inc ebx
  3552 00002C8E 46                  <1> 	inc esi
  3553 00002C8F EBF0                <1> 	jmp retest
  3554                              <1> testtrue:
  3555 00002C91 80FC00              <1> 	cmp ah, 0
  3556 00002C94 7503                <1> 	jne testfalse
  3557 00002C96 B001                <1> 	mov al, 1
  3558 00002C98 C3                  <1> 	ret
  3559                              <1> testfalse:
  3560 00002C99 30C0                <1> 	xor al, al
  3561 00002C9B C3                  <1> 	ret
  3562                              <1> 
  3563                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3564 00002C9C 30C0                <1> 	xor al, al
  3565                              <1> opretest:
  3566 00002C9E 8A06                <1> 	mov al, [esi]
  3567 00002CA0 8A23                <1> 	mov ah, [ebx]
  3568 00002CA2 38E0                <1> 	cmp al, ah
  3569 00002CA4 7510                <1> 	jne optestfalse
  3570 00002CA6 80FC00              <1> 	cmp ah, 0
  3571 00002CA9 7404                <1> 	je optesttrue
  3572 00002CAB 43                  <1> 	inc ebx
  3573 00002CAC 46                  <1> 	inc esi
  3574 00002CAD EBEF                <1> 	jmp opretest
  3575                              <1> optesttrue:
  3576 00002CAF 3C00                <1> 	cmp al, 0
  3577 00002CB1 7503                <1> 	jne optestfalse
  3578 00002CB3 B001                <1> 	mov al, 1
  3579 00002CB5 C3                  <1> 	ret
  3580                              <1> optestfalse:
  3581 00002CB6 30C0                <1> 	xor al, al
  3582 00002CB8 C3                  <1> 	ret
  3583                              <1> 
  3584                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3585 00002CB9 30C0                <1> 	xor al, al
  3586 00002CBB 8A06                <1> cndretest:	mov al, [esi]
  3587 00002CBD 8A23                <1> 	mov ah, [ebx]
  3588 00002CBF 38CC                <1> 	cmp ah, cl
  3589 00002CC1 7408                <1> 	je cndtesttrue
  3590 00002CC3 38E0                <1> 	cmp al, ah
  3591 00002CC5 750B                <1> 	jne cndtestfalse
  3592 00002CC7 43                  <1> 	inc ebx
  3593 00002CC8 46                  <1> 	inc esi
  3594 00002CC9 EBF0                <1> 	jmp cndretest
  3595                              <1> cndtesttrue:
  3596 00002CCB 38C8                <1> 	cmp al, cl
  3597 00002CCD 7506                <1> 	jne cndtestalmost
  3598 00002CCF B001                <1> 	mov al, 1
  3599 00002CD1 C3                  <1> 	ret
  3600                              <1> cndtestfalse:
  3601 00002CD2 30C0                <1> 	xor al, al
  3602 00002CD4 C3                  <1> 	ret
  3603                              <1> cndtestalmost:
  3604 00002CD5 B002                <1> 	mov al, 2
  3605 00002CD7 C3                  <1> 	ret
  3606                              <1> 	
  3607                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3608                              <1> 		                ;ends if array seperator is found backwards after 0
  3609                              <1> 	arnxt:	      
  3610 00002CD8 88E8                <1> 		mov al, ch
  3611 00002CDA 88CC                <1> 		mov ah, cl        
  3612 00002CDC 663906              <1> 		cmp [esi], ax
  3613 00002CDF 744D                <1> 		je ardn
  3614 00002CE1 66390E              <1> 		cmp [esi], cx
  3615 00002CE4 7407                <1> 		je arfnd
  3616 00002CE6 46                  <1> 		inc esi
  3617 00002CE7 39DE                <1> 		cmp esi, ebx
  3618 00002CE9 7343                <1> 		jae ardn
  3619 00002CEB EBEB                <1> 		jmp arnxt
  3620 00002CED 81C602000000        <1> 	arfnd: add esi, 2
  3621 00002CF3 891D[2F2D0000]      <1> 		mov [arbx], ebx
  3622 00002CF9 890D[332D0000]      <1> 		mov [arcx], ecx
  3623 00002CFF E81BF0FFFF          <1> 		call print
  3624 00002D04 8935[352D0000]      <1> 		mov [arsi], esi
  3625 00002D0A BE[5E8D0000]        <1> 		mov esi, line
  3626 00002D0F E80BF0FFFF          <1> 		call print
  3627 00002D14 8B1D[2F2D0000]      <1> 		mov ebx, [arbx]
  3628 00002D1A 668B0D[332D0000]    <1> 		mov cx, [arcx]
  3629 00002D21 8B35[352D0000]      <1> 		mov esi, [arsi]
  3630 00002D27 46                  <1> 		inc esi
  3631 00002D28 39DE                <1> 		cmp esi, ebx
  3632 00002D2A 7302                <1> 		jae ardn
  3633 00002D2C EBAA                <1> 		jmp arnxt
  3634 00002D2E C3                  <1> 	ardn:	ret
  3635 00002D2F 00000000            <1> arbx:	dw 0,0
  3636 00002D33 0000                <1> arcx:	db 0,0
  3637 00002D35 00000000            <1> arsi:	dw 0,0
  3638                              <1> 
  3639                              <1> clearbuffer:
  3640 00002D39 BE[FECF0000]        <1> 	mov esi, buf2
  3641 00002D3E B030                <1> 	mov al, '0'
  3642 00002D40 81FE[12D00000]      <1> clearbuf: cmp esi, numbuf
  3643 00002D46 7305                <1> 	jae doneclearbuff
  3644 00002D48 8806                <1> 	mov [esi], al
  3645 00002D4A 46                  <1> 	inc esi
  3646 00002D4B EBF3                <1> 	jmp clearbuf
  3647                              <1> doneclearbuff: 
  3648 00002D4D C3                  <1> 		ret
  3649                              <1> 
  3650                              <1> convert:
  3651 00002D4E 4E                  <1> 	dec esi
  3652 00002D4F 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3653                              <1> .lp:
  3654 00002D51 89DE                <1> 	mov esi, ebx
  3655 00002D53 81EE09000000        <1> 	sub esi, 9
  3656 00002D59 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3657 00002D5F 720A                <1> 	jb .8
  3658 00002D61 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3659 00002D67 FE06                <1> 	inc byte [esi]
  3660 00002D69 EBE6                <1> 	jmp .lp
  3661 00002D6B 46                  <1> .8:	inc esi
  3662 00002D6C 81F900E1F505        <1> 	cmp ecx, 100000000
  3663 00002D72 720A                <1> 	jb .7
  3664 00002D74 81E900E1F505        <1> 	sub ecx, 100000000
  3665 00002D7A FE06                <1> 	inc byte [esi]
  3666 00002D7C EBD3                <1> 	jmp .lp
  3667 00002D7E 46                  <1> .7:	inc esi
  3668 00002D7F 81F980969800        <1> 	cmp ecx, 10000000
  3669 00002D85 720A                <1> 	jb .6
  3670 00002D87 81E980969800        <1> 	sub ecx, 10000000
  3671 00002D8D FE06                <1> 	inc byte [esi]
  3672 00002D8F EBC0                <1> 	jmp .lp
  3673 00002D91 46                  <1> .6:	inc esi
  3674 00002D92 81F940420F00        <1> 	cmp ecx, 1000000
  3675 00002D98 720A                <1> 	jb .5
  3676 00002D9A 81E940420F00        <1> 	sub ecx, 1000000
  3677 00002DA0 FE06                <1> 	inc byte [esi]
  3678 00002DA2 EBAD                <1> 	jmp .lp
  3679 00002DA4 46                  <1> .5:	inc esi
  3680 00002DA5 81F9A0860100        <1> 	cmp ecx, 100000
  3681 00002DAB 720A                <1> 	jb .4
  3682 00002DAD 81E9A0860100        <1> 	sub ecx, 100000
  3683 00002DB3 FE06                <1> 	inc byte [esi]
  3684 00002DB5 EB9A                <1> 	jmp .lp
  3685 00002DB7 46                  <1> .4:	inc esi
  3686 00002DB8 81F910270000        <1> 	cmp ecx, 10000
  3687 00002DBE 720A                <1> 	jb .3
  3688 00002DC0 81E910270000        <1> 	sub ecx, 10000
  3689 00002DC6 FE06                <1> 	inc byte [esi]
  3690 00002DC8 EB87                <1> 	jmp .lp
  3691 00002DCA 46                  <1> .3:	inc esi
  3692 00002DCB 81F9E8030000        <1> 	cmp ecx, 1000
  3693 00002DD1 720D                <1> 	jb .2
  3694 00002DD3 81E9E8030000        <1> 	sub ecx, 1000
  3695 00002DD9 FE06                <1> 	inc byte [esi]
  3696 00002DDB E971FFFFFF          <1> 	jmp .lp
  3697 00002DE0 46                  <1> .2:	inc esi
  3698 00002DE1 81F964000000        <1> 	cmp ecx, 100
  3699 00002DE7 720D                <1> 	jb .1
  3700 00002DE9 81E964000000        <1> 	sub ecx, 100
  3701 00002DEF FE06                <1> 	inc byte [esi]
  3702 00002DF1 E95BFFFFFF          <1> 	jmp .lp
  3703 00002DF6 46                  <1> .1:	inc esi
  3704 00002DF7 81F90A000000        <1> 	cmp ecx, 10
  3705 00002DFD 720D                <1> 	jb .0
  3706 00002DFF 81E90A000000        <1> 	sub ecx, 10
  3707 00002E05 FE06                <1> 	inc byte [esi]
  3708 00002E07 E945FFFFFF          <1> 	jmp .lp
  3709 00002E0C 46                  <1> .0:	inc esi
  3710 00002E0D 81F901000000        <1> 	cmp ecx, 1
  3711 00002E13 720D                <1> 	jb .dn
  3712 00002E15 81E901000000        <1> 	sub ecx, 1
  3713 00002E1B FE06                <1> 	inc byte [esi]
  3714 00002E1D E92FFFFFFF          <1> 	jmp .lp
  3715                              <1> .dn:
  3716 00002E22 C3                  <1> 	ret
  3717                              <1> 
  3718                              <1> 	
  3719                              <1> 
  3720 00002E23 00<rept>            <1> hexnumber times 8 db 0
  3721 00002E2B 202000              <1> hexnumberend db "  ",0
  3722                              <1> 
  3723                              <1> converthex:
  3724                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3725 00002E2E 56                  <1> 	push esi
  3726 00002E2F B030                <1> 	mov al, "0"
  3727 00002E31 39FE                <1> .clearlp: cmp esi, edi
  3728 00002E33 7305                <1> 	jae .doneclear
  3729 00002E35 8806                <1> 	mov [esi], al
  3730 00002E37 46                  <1> 	inc esi
  3731 00002E38 EBF7                <1> 	jmp .clearlp
  3732                              <1> .doneclear:
  3733 00002E3A 81EE02000000        <1> 	sub esi, 2
  3734 00002E40 89C8                <1> 	mov eax, ecx
  3735                              <1> .loop:
  3736 00002E42 30FF                <1> 	xor bh, bh
  3737 00002E44 88C3                <1> 	mov bl, al
  3738 00002E46 66C1E304            <1> 	shl bx, 4
  3739 00002E4A C0EB04              <1> 	shr bl, 4
  3740 00002E4D 86DF                <1> 	xchg bl, bh ;they are backwards
  3741 00002E4F 80C330              <1> 	add bl, 48
  3742 00002E52 80FB39              <1> 	cmp bl, "9"
  3743 00002E55 7609                <1> 	jbe .goodbl
  3744 00002E57 80EB30              <1> 	sub bl, 48
  3745 00002E5A 80EB0A              <1> 	sub bl, 0xA
  3746 00002E5D 80C341              <1> 	add bl, "A"
  3747                              <1> .goodbl:
  3748 00002E60 80C730              <1> 	add bh, 48
  3749 00002E63 80FF39              <1> 	cmp bh, "9"
  3750 00002E66 7609                <1> 	jbe .goodbh
  3751 00002E68 80EF30              <1> 	sub bh, 48
  3752 00002E6B 80EF0A              <1> 	sub bh, 0xA
  3753 00002E6E 80C741              <1> 	add bh, "A"
  3754                              <1> .goodbh:
  3755 00002E71 C1E808              <1> 	shr eax, 8
  3756 00002E74 66891E              <1> 	mov [esi], bx
  3757 00002E77 81EE02000000        <1> 	sub esi, 2
  3758 00002E7D 3B3424              <1> 	cmp esi, [esp]
  3759 00002E80 7207                <1> 	jb .done
  3760 00002E82 3D00000000          <1> 	cmp eax, 0
  3761 00002E87 75B9                <1> 	jne .loop
  3762                              <1> .done:
  3763 00002E89 5E                  <1> 	pop esi
  3764 00002E8A C3                  <1> 	ret
  3765                              <1> 	
  3766                              <1> 	
  3767 00002E8B 00                  <1> smallhex db 0
  3768 00002E8C 01                  <1> firsthexshown db 1
  3769                              <1> showhexsmall:
  3770 00002E8D C605[8B2E0000]01    <1> 	mov byte [smallhex], 1
  3771 00002E94 E808000000          <1> 	call showhex
  3772 00002E99 C605[8B2E0000]00    <1> 	mov byte [smallhex], 0
  3773 00002EA0 C3                  <1> 	ret
  3774                              <1> showhex:
  3775 00002EA1 60                  <1> 	pusha
  3776 00002EA2 BE[232E0000]        <1> 	mov esi, hexnumber
  3777 00002EA7 BF[2B2E0000]        <1> 	mov edi, hexnumberend
  3778 00002EAC E87DFFFFFF          <1> 	call converthex
  3779 00002EB1 803D[8C2E0000]01    <1> 	cmp byte [firsthexshown], 1
  3780 00002EB8 7503                <1> 	jne .show
  3781 00002EBA 6631D2              <1> 	xor dx, dx
  3782                              <1> .show:
  3783 00002EBD 803D[8C2E0000]03    <1> 	cmp byte [firsthexshown], 3
  3784 00002EC4 750A                <1> 	jne .nonewhexline
  3785 00002EC6 BE[5E8D0000]        <1> 	mov esi, line
  3786 00002ECB E84FEEFFFF          <1> 	call print
  3787                              <1> .nonewhexline:
  3788 00002ED0 803D[8C2E0000]04    <1> 	cmp byte [firsthexshown], 4
  3789 00002ED7 7527                <1> 	jne .notab
  3790 00002ED9 B1A0                <1> 	mov cl, 160
  3791 00002EDB 28D1                <1> 	sub cl, dl
  3792 00002EDD C0E905              <1> 	shr cl, 5
  3793 00002EE0 C0E105              <1> 	shl cl, 5
  3794 00002EE3 80F900              <1> 	cmp cl, 0
  3795 00002EE6 750F                <1> 	jne .nonewline
  3796 00002EE8 BE[5E8D0000]        <1> 	mov esi, line
  3797 00002EED E82DEEFFFF          <1> 	call print
  3798 00002EF2 E909000000          <1> 	jmp .notab
  3799                              <1> .nonewline:
  3800 00002EF7 80C20F              <1> 	add dl, 15
  3801 00002EFA C0EA04              <1> 	shr dl, 4
  3802 00002EFD C0E204              <1> 	shl dl, 4
  3803                              <1> .notab:
  3804 00002F00 BE[232E0000]        <1> 	mov esi, hexnumber
  3805 00002F05 803D[8B2E0000]01    <1> 	cmp byte [smallhex],1
  3806 00002F0C 7506                <1> 	jne .nosmall
  3807 00002F0E 81C606000000        <1> 	add esi, 6
  3808                              <1> .nosmall:
  3809 00002F14 803D[8C2E0000]05    <1> 	cmp byte [firsthexshown], 5
  3810 00002F1B 750A                <1> 	jne .noquiet
  3811 00002F1D E8EBEDFFFF          <1> 	call printquiet
  3812 00002F22 E918000000          <1> 	jmp .donequiet
  3813                              <1> .noquiet:
  3814 00002F27 803D[8C2E0000]06    <1> 	cmp byte [firsthexshown], 6
  3815 00002F2E 750A                <1> 	jne .normal
  3816 00002F30 E8CCEDFFFF          <1> 	call printhighlight
  3817 00002F35 E905000000          <1> 	jmp .donequiet
  3818                              <1> .normal:
  3819 00002F3A E8E0EDFFFF          <1> 	call print
  3820                              <1> .donequiet:
  3821 00002F3F 803D[8C2E0000]02    <1> 	cmp byte [firsthexshown], 2
  3822 00002F46 750A                <1> 	jne .shown
  3823 00002F48 BE[5E8D0000]        <1> 	mov esi, line
  3824 00002F4D E8CDEDFFFF          <1> 	call print
  3825                              <1> .shown:
  3826 00002F52 C605[8C2E0000]00    <1> 	mov byte [firsthexshown], 0
  3827 00002F59 61                  <1> 	popa
  3828 00002F5A C3                  <1> 	ret
  3829                              <1> 
  3830                              <1> 
  3831 00002F5B 303030303030303030- <1> decnumber db "00000000000000"
  3832 00002F64 3030303030          <1>
  3833 00002F69 2000                <1> decnumberend: db " ",0
  3834                              <1> 
  3835                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3836 00002F6B 60                  <1> 	pusha
  3837 00002F6C BF[5B2F0000]        <1> 	mov edi, decnumber
  3838 00002F71 BE[692F0000]        <1> 	mov esi, decnumberend
  3839                              <1> .clear:
  3840 00002F76 C60730              <1> 	mov byte [edi], '0'
  3841 00002F79 47                  <1> 	inc edi
  3842 00002F7A 39F7                <1> 	cmp edi, esi
  3843 00002F7C 72F8                <1> 	jb .clear
  3844 00002F7E BF[5B2F0000]        <1> 	mov edi, decnumber
  3845 00002F83 E8C6FDFFFF          <1> 	call convert
  3846 00002F88 803D[8C2E0000]01    <1> 	cmp byte [firsthexshown], 1
  3847 00002F8F 7503                <1> 	jne .show
  3848 00002F91 6631D2              <1> 	xor dx, dx
  3849                              <1> .show:
  3850 00002F94 803D[8C2E0000]03    <1> 	cmp byte [firsthexshown], 3
  3851 00002F9B 750A                <1> 	jne .nonewdecline
  3852 00002F9D BE[5E8D0000]        <1> 	mov esi, line
  3853 00002FA2 E878EDFFFF          <1> 	call print
  3854                              <1> .nonewdecline:
  3855 00002FA7 803D[8C2E0000]04    <1> 	cmp byte [firsthexshown], 4
  3856 00002FAE 7527                <1> 	jne .notab
  3857 00002FB0 B1A0                <1> 	mov cl, 160
  3858 00002FB2 28D1                <1> 	sub cl, dl
  3859 00002FB4 C0E905              <1> 	shr cl, 5
  3860 00002FB7 C0E105              <1> 	shl cl, 5
  3861 00002FBA 80F900              <1> 	cmp cl, 0
  3862 00002FBD 750F                <1> 	jne .nonewline
  3863 00002FBF BE[5E8D0000]        <1> 	mov esi, line
  3864 00002FC4 E856EDFFFF          <1> 	call print
  3865 00002FC9 E909000000          <1> 	jmp .notab
  3866                              <1> .nonewline:
  3867 00002FCE 80C20F              <1> 	add dl, 15
  3868 00002FD1 C0EA04              <1> 	shr dl, 4
  3869 00002FD4 C0E204              <1> 	shl dl, 4
  3870                              <1> .notab:
  3871 00002FD7 BE[5B2F0000]        <1> 	mov esi, decnumber
  3872 00002FDC 4E                  <1> 	dec esi
  3873                              <1> .sifind:
  3874 00002FDD 46                  <1> 	inc esi
  3875 00002FDE 803E30              <1> 	cmp byte [esi], '0'
  3876 00002FE1 74FA                <1> 	je .sifind
  3877 00002FE3 E837EDFFFF          <1> 	call print
  3878 00002FE8 803D[8C2E0000]02    <1> 	cmp byte [firsthexshown], 2
  3879 00002FEF 750A                <1> 	jne .shown
  3880 00002FF1 BE[5E8D0000]        <1> 	mov esi, line
  3881 00002FF6 E824EDFFFF          <1> 	call print
  3882                              <1> .shown:
  3883 00002FFB C605[8C2E0000]00    <1> 	mov byte [firsthexshown], 0
  3884 00003002 61                  <1> 	popa
  3885 00003003 C3                  <1> 	ret
  3886                              <1> 	
  3887                              <1> cnvrthextxt:
  3888 00003004 31C9                <1> 	xor ecx, ecx
  3889 00003006 31C0                <1> 	xor eax, eax
  3890 00003008 31D2                <1> 	xor edx, edx
  3891 0000300A 31DB                <1> 	xor ebx, ebx
  3892 0000300C 4E                  <1> 	dec esi
  3893                              <1> .end:
  3894 0000300D 46                  <1> 	inc esi
  3895 0000300E 8A06                <1> 	mov al, [esi]
  3896 00003010 3C00                <1> 	cmp al, 0
  3897 00003012 75F9                <1> 	jne .end
  3898                              <1> .loop:
  3899 00003014 4E                  <1> 	dec esi
  3900 00003015 8A06                <1> 	mov al, [esi]
  3901 00003017 3C41                <1> 	cmp al, "A"
  3902 00003019 7328                <1> 	jae .char
  3903 0000301B 2C30                <1> 	sub al, 48
  3904 0000301D 3C10                <1> 	cmp al, 16
  3905 0000301F 7721                <1> 	ja .done
  3906                              <1> .donechar:
  3907 00003021 81FA00000000        <1> 	cmp edx, 0
  3908 00003027 740E                <1> 	je .noshl
  3909 00003029 89D3                <1> 	mov ebx, edx
  3910                              <1> .shl:
  3911 0000302B C1E004              <1> 	shl eax, 4
  3912 0000302E 4B                  <1> 	dec ebx
  3913 0000302F 81FB00000000        <1> 	cmp ebx, 0
  3914 00003035 75F4                <1> 	jne .shl
  3915                              <1> .noshl:
  3916 00003037 42                  <1> 	inc edx
  3917 00003038 01C1                <1> 	add ecx, eax
  3918 0000303A 81FA08000000        <1> 	cmp edx, 8
  3919 00003040 72D2                <1> 	jb .loop
  3920                              <1> .done:
  3921 00003042 C3                  <1> 	ret
  3922                              <1> .char:
  3923 00003043 3C46                <1> 	cmp al, "F"
  3924 00003045 77FB                <1> 	ja .done
  3925 00003047 2C41                <1> 	sub al, "A"
  3926 00003049 040A                <1> 	add al, 0xA
  3927 0000304B EBD4                <1> 	jmp .donechar
  3928                              <1> 	
  3929                              <1> 	
  3930                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3931 0000304D 31C9                <1> 	xor ecx, ecx
  3932 0000304F 31C0                <1> 	xor eax, eax
  3933 00003051 31D2                <1> 	xor edx, edx
  3934 00003053 31DB                <1> 	xor ebx, ebx
  3935 00003055 4E                  <1> 	dec esi
  3936                              <1> .lp:
  3937 00003056 46                  <1> 	inc esi
  3938 00003057 8A06                <1> 	mov al, [esi]
  3939 00003059 3C00                <1> 	cmp al, 0
  3940 0000305B 75F9                <1> 	jne .lp
  3941 0000305D 4E                  <1> 	dec esi
  3942 0000305E 8A06                <1> 	mov al, [esi]
  3943 00003060 3C2E                <1> 	cmp al, '.'
  3944 00003062 7503                <1> 	jne .dot
  3945 00003064 46                  <1> 	inc esi
  3946 00003065 EBEF                <1> 	jmp .lp
  3947                              <1> .dot:
  3948 00003067 3C20                <1> 	cmp al, ' '
  3949 00003069 7404                <1> 	je .zero
  3950 0000306B 3C30                <1> 	cmp al, '0'
  3951 0000306D 7504                <1> 	jne .txtlp
  3952                              <1> .zero: 
  3953 0000306F 39FE                <1> 		cmp esi, edi
  3954 00003071 7458                <1> 		je .done
  3955                              <1> .txtlp:
  3956 00003073 31C0                <1> 	xor eax, eax
  3957 00003075 8A06                <1> 	mov al, [esi]
  3958 00003077 3C3D                <1> 	cmp al, '='
  3959 00003079 7450                <1> 	je .done
  3960 0000307B 3C30                <1> 	cmp al, 48
  3961 0000307D 724C                <1> 	jb .done
  3962 0000307F 3C23                <1> 	cmp al, '#'
  3963 00003081 7448                <1> 	je .done
  3964 00003083 39FE                <1> 	cmp esi, edi
  3965 00003085 7244                <1> 	jb .done
  3966 00003087 81F900000000        <1> 	cmp ecx, 0
  3967 0000308D 7708                <1> 	ja .exp
  3968 0000308F 2C30                <1> .noexp:	sub al, 48
  3969 00003091 01C2                <1> 	add edx, eax
  3970 00003093 4E                  <1> 	dec esi
  3971 00003094 41                  <1> 	inc ecx
  3972 00003095 EBDC                <1> 	jmp .txtlp
  3973 00003097 81F900000000        <1> .exp:	cmp ecx, 0
  3974 0000309D 74F0                <1> 	je .noexp
  3975 0000309F 2C30                <1> 	sub al, 48
  3976 000030A1 51                  <1> 	push ecx
  3977 000030A2 89C3                <1> .expmul:	mov ebx, eax
  3978 000030A4 01D8                <1> 	add eax, ebx
  3979 000030A6 01D8                <1> 	add eax, ebx
  3980 000030A8 01D8                <1> 	add eax, ebx
  3981 000030AA 01D8                <1> 	add eax, ebx
  3982 000030AC 01D8                <1> 	add eax, ebx
  3983 000030AE 01D8                <1> 	add eax, ebx
  3984 000030B0 01D8                <1> 	add eax, ebx
  3985 000030B2 01D8                <1> 	add eax, ebx
  3986 000030B4 01D8                <1> 	add eax, ebx
  3987 000030B6 81E901000000        <1> 	sub ecx, 1
  3988 000030BC 81F900000000        <1> 	cmp ecx, 0
  3989 000030C2 77DE                <1> 	ja .expmul
  3990 000030C4 01C2                <1> 	add edx, eax
  3991 000030C6 59                  <1> 	pop ecx
  3992 000030C7 4E                  <1> 	dec esi
  3993 000030C8 41                  <1> 	inc ecx
  3994 000030C9 EBA8                <1> 	jmp .txtlp
  3995 000030CB 89D1                <1> .done: mov ecx, edx
  3996 000030CD C3                  <1> 	ret
  3997                                      %include "source/programs.asm"
  3998 000030CE FF2C                <1> filetypes db 255,44
  3999                              <1> progstart:		;programs start here
  4000                              <1> indexfiles:
  4001 000030D0 BE[D0300000]        <1> 	mov esi, progstart
  4002 000030D5 BB[7EB10000]        <1> 	mov ebx, fileindex
  4003 000030DA BF[D0300000]        <1> 	mov edi, progstart
  4004 000030DF 81EF02000000        <1> 	sub edi, 2
  4005                              <1> indexloop:
  4006 000030E5 668B0E              <1> 	mov cx, [esi]
  4007                              <1> 	indexloop2:
  4008 000030E8 663B0F              <1> 		cmp cx, [edi]
  4009 000030EB 7424                <1> 		je indexloop2done
  4010 000030ED 81EF02000000        <1> 		sub edi, 2
  4011 000030F3 81FF[CE300000]      <1> 		cmp edi, filetypes
  4012 000030F9 73ED                <1> 		jae indexloop2
  4013 000030FB BF[D0300000]        <1> 	mov edi, progstart
  4014 00003100 81EF02000000        <1> 	sub edi, 2
  4015 00003106 46                  <1> 	inc esi
  4016 00003107 81FE[39510000]      <1> 	cmp esi, batchprogend
  4017 0000310D 734E                <1> 	jae indexloopdone
  4018 0000310F EBD4                <1> 	jmp indexloop
  4019                              <1> indexloop2done:
  4020 00003111 66890B              <1> 	mov [ebx], cx
  4021 00003114 81C302000000        <1> 	add ebx, 2
  4022 0000311A 81C602000000        <1> 	add esi, 2
  4023                              <1> 	nameindex:
  4024 00003120 8A0E                <1> 		mov cl, [esi]
  4025 00003122 80F900              <1> 		cmp cl, 0
  4026 00003125 7406                <1> 		je nameindexdone
  4027 00003127 880B                <1> 		mov [ebx], cl
  4028 00003129 46                  <1> 		inc esi
  4029 0000312A 43                  <1> 		inc ebx
  4030 0000312B EBF3                <1> 		jmp nameindex
  4031                              <1> 	nameindexdone:
  4032 0000312D 43                  <1> 		inc ebx
  4033 0000312E 66C7030000          <1> 		mov word [ebx], 0
  4034 00003133 81C302000000        <1> 		add ebx, 2
  4035 00003139 46                  <1> 		inc esi
  4036 0000313A 8933                <1> 		mov [ebx], esi
  4037 0000313C 81C304000000        <1> 		add ebx, 4
  4038 00003142 66C7030000          <1> 		mov word [ebx], 0
  4039 00003147 81C302000000        <1> 		add ebx, 2
  4040 0000314D 81FB[7EB50000]      <1> 		cmp ebx, fileindexend
  4041 00003153 7308                <1> 		jae indexloopdone
  4042 00003155 81C601000000        <1> 		add esi, 1
  4043 0000315B EB88                <1> 		jmp indexloop
  4044 0000315D C605[65310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4045 00003164 C3                  <1> 		ret
  4046 00003165 00                  <1> indexdone db 0
  4047                              <1> %include 'source/programs/_comment.asm' ;#
  4048 00003166 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4049 0000316A C3                  <2> 	ret 
  4050                              <1> %include 'source/programs/_math.asm' ;!
  4051 0000316B FF2C2100            <2> db 255,44,"!",0
  4052                              <2> 	num:	
  4053 0000316F E8C5FBFFFF          <2> 		call clearbuffer
  4054 00003174 C605[F5330000]00    <2> 		mov byte [decimal], 0
  4055 0000317B C605[F6330000]00    <2> 		mov byte [decimal2], 0
  4056 00003182 8B35[7A2C0000]      <2> 		mov esi, [currentcommandloc]
  4057 00003188 31C0                <2> 		xor eax, eax
  4058 0000318A 31C9                <2> 		xor ecx, ecx
  4059 0000318C 31DB                <2> 		xor ebx, ebx
  4060 0000318E 8A06                <2> 	num2:	mov al, [esi]
  4061 00003190 3C2B                <2> 		cmp al, '+'
  4062 00003192 741B                <2> 		je operatorfound
  4063 00003194 3C2D                <2> 		cmp al, '-'
  4064 00003196 7417                <2> 		je operatorfound
  4065 00003198 3C2A                <2> 		cmp al, '*'
  4066 0000319A 7413                <2> 		je operatorfound
  4067 0000319C 3C2F                <2> 		cmp al, '/'
  4068 0000319E 740F                <2> 		je operatorfound
  4069 000031A0 3C5E                <2> 		cmp al, '^'
  4070 000031A2 740B                <2> 		je operatorfound
  4071 000031A4 46                  <2> 		inc esi
  4072 000031A5 3C00                <2> 		cmp al, 0
  4073 000031A7 0F841AF8FFFF        <2> 		je near nwcmd
  4074 000031AD EBDF                <2> 		jmp num2
  4075 000031AF 50                  <2> 	operatorfound: push eax
  4076 000031B0 30E4                <2> 		xor ah, ah
  4077 000031B2 8826                <2> 		mov [esi], ah
  4078 000031B4 89F7                <2> 		mov edi, esi
  4079 000031B6 46                  <2> 		inc esi
  4080 000031B7 8A06                <2> 		mov al, [esi]
  4081 000031B9 3C25                <2> 		cmp al, '%'
  4082 000031BB 0F8462000000        <2> 		je near resultnum1
  4083                              <2> 	varnum2: 
  4084 000031C1 57                  <2> 		push edi
  4085 000031C2 E8A4000000          <2> 		call checkdecimal
  4086 000031C7 5F                  <2> 		pop edi
  4087 000031C8 E880FEFFFF          <2> 		call cnvrttxt
  4088                              <2> 	vrnm2:
  4089 000031CD 89CB                <2> 		mov ebx, ecx
  4090 000031CF 53                  <2> 		push ebx
  4091 000031D0 E864FBFFFF          <2> 		call clearbuffer
  4092 000031D5 8B35[7A2C0000]      <2> 		mov esi, [currentcommandloc]
  4093 000031DB 89F7                <2> 		mov edi, esi
  4094 000031DD 46                  <2> 		inc esi
  4095 000031DE 8A06                <2> 		mov al, [esi]
  4096 000031E0 3C25                <2> 		cmp al, '%'
  4097 000031E2 0F844F000000        <2> 		je near resultnum2
  4098                              <2> 	varnum4: 
  4099 000031E8 57                  <2> 		push edi
  4100 000031E9 E869000000          <2> 		call checkdecimal2
  4101 000031EE 5F                  <2> 		pop edi
  4102 000031EF E859FEFFFF          <2> 		call cnvrttxt
  4103                              <2> 	vrnm4:
  4104 000031F4 5B                  <2> 		pop ebx
  4105 000031F5 58                  <2> 		pop eax
  4106 000031F6 3C2B                <2> 		cmp al, '+'
  4107 000031F8 0F849B000000        <2> 		je near plusnum
  4108 000031FE 3C2D                <2> 		cmp al, '-'
  4109 00003200 0F849F000000        <2> 		je near subnum
  4110 00003206 3C2A                <2> 		cmp al, '*'
  4111 00003208 0F84A3000000        <2> 		je near mulnum
  4112 0000320E 3C2F                <2> 		cmp al, '/'
  4113 00003210 0F84B1000000        <2> 		je near divnum
  4114 00003216 3C5E                <2> 		cmp al, '^'
  4115 00003218 0F84CE000000        <2> 		je near expnum
  4116 0000321E E9A4F7FFFF          <2> 		jmp nwcmd
  4117                              <2> 	resultnum1:
  4118 00003223 8A0D[F7330000]      <2> 		mov cl, [decimalresult]
  4119 00003229 880D[F5330000]      <2> 		mov [decimal], cl
  4120 0000322F 8B0D[F8330000]      <2> 		mov ecx, [result]
  4121 00003235 EB96                <2> 		jmp vrnm2
  4122                              <2> 	resultnum2:
  4123 00003237 8A0D[F5330000]      <2> 		mov cl, [decimal]
  4124 0000323D 880D[F6330000]      <2> 		mov [decimal2], cl
  4125 00003243 8A0D[F7330000]      <2> 		mov cl, [decimalresult]
  4126 00003249 880D[F5330000]      <2> 		mov [decimal], cl
  4127 0000324F 8B0D[F8330000]      <2> 		mov ecx, [result]
  4128 00003255 EB9D                <2> 		jmp vrnm4
  4129                              <2> 	checkdecimal2:
  4130 00003257 8A25[F5330000]      <2> 		mov ah, [decimal]
  4131 0000325D 8825[F6330000]      <2> 		mov [decimal2], ah
  4132 00003263 30E4                <2> 		xor ah, ah
  4133 00003265 8825[F5330000]      <2> 		mov [decimal], ah
  4134                              <2> 	checkdecimal:
  4135 0000326B 89F7                <2> 		mov edi, esi
  4136                              <2> 	chkdec1:
  4137 0000326D 8A07                <2> 		mov al, [edi]
  4138 0000326F 3C2E                <2> 		cmp al, '.'
  4139 00003271 0F840B000000        <2> 		je near fnddec
  4140 00003277 3C00                <2> 		cmp al, 0
  4141 00003279 0F8419000000        <2> 		je near nodecimal
  4142 0000327F 47                  <2> 		inc edi
  4143 00003280 EBEB                <2> 		jmp chkdec1
  4144                              <2> 	fnddec:
  4145 00003282 8A4701              <2> 		mov al, [edi + 1]
  4146 00003285 8807                <2> 		mov [edi], al
  4147 00003287 3C00                <2> 		cmp al, 0
  4148 00003289 0F8409000000        <2> 		je near nodecimal
  4149 0000328F FE05[F5330000]      <2> 		inc byte [decimal]
  4150 00003295 47                  <2> 		inc edi
  4151 00003296 EBEA                <2> 		jmp fnddec
  4152                              <2> 	nodecimal:
  4153 00003298 C3                  <2> 		ret
  4154                              <2> 	plusnum:
  4155 00003299 E815010000          <2> 		call decaddfix
  4156 0000329E 01D9                <2> 		add ecx, ebx
  4157 000032A0 E98A000000          <2> 		jmp retnum
  4158                              <2> 	subnum:
  4159 000032A5 E809010000          <2> 		call decaddfix
  4160 000032AA 29D9                <2> 		sub ecx, ebx
  4161 000032AC E97E000000          <2> 		jmp retnum
  4162                              <2> 	mulnum:
  4163 000032B1 A0[F6330000]        <2> 		mov al, [decimal2]
  4164 000032B6 0005[F5330000]      <2> 		add [decimal], al
  4165 000032BC 89C8                <2> 		mov eax, ecx
  4166 000032BE F7E3                <2> 		mul ebx
  4167 000032C0 89C1                <2> 		mov ecx, eax
  4168 000032C2 E968000000          <2> 		jmp retnum
  4169                              <2> 	divnum:
  4170 000032C7 E8E7000000          <2> 		call decaddfix
  4171 000032CC 30C0                <2> 		xor al, al
  4172 000032CE A2[F5330000]        <2> 		mov [decimal], al
  4173 000032D3 31D2                <2> 		xor edx, edx
  4174 000032D5 89C8                <2> 		mov eax, ecx
  4175 000032D7 81FB00000000        <2> 		cmp ebx, 0
  4176 000032DD 0F844C000000        <2> 		je near retnum
  4177 000032E3 F7F3                <2> 		div ebx
  4178 000032E5 89C1                <2> 		mov ecx, eax
  4179 000032E7 E943000000          <2> 		jmp retnum
  4180                              <2> 	expnum:
  4181 000032EC 8A15[F5330000]      <2> 		mov dl, [decimal]
  4182 000032F2 8815[F6330000]      <2> 		mov [decimal2], dl
  4183 000032F8 31D2                <2> 		xor edx, edx
  4184 000032FA 89C8                <2> 		mov eax, ecx
  4185 000032FC 89D9                <2> 		mov ecx, ebx
  4186 000032FE 89C3                <2> 		mov ebx, eax
  4187 00003300 81F900000000        <2> 		cmp ecx, 0
  4188 00003306 7422                <2> 		je noexpnum
  4189 00003308 49                  <2> 		dec ecx
  4190 00003309 81F900000000        <2> 		cmp ecx, 0
  4191 0000330F 7412                <2> 		je noexpnumlp
  4192 00003311 F7E3                <2> 	expnumlp: mul ebx
  4193 00003313 8A15[F6330000]      <2> 		mov dl, [decimal2]
  4194 00003319 0015[F5330000]      <2> 		add [decimal], dl
  4195 0000331F 31D2                <2> 		xor edx, edx
  4196 00003321 E2EE                <2> 		loop expnumlp
  4197                              <2> 	noexpnumlp:
  4198 00003323 89C1                <2> 		mov ecx, eax
  4199 00003325 E905000000          <2> 		jmp retnum
  4200                              <2> 	noexpnum:
  4201 0000332A B901000000          <2> 		mov ecx, 1
  4202                              <2> 	retnum: 
  4203 0000332F BE[12D00000]        <2> 		mov esi, numbuf
  4204 00003334 890D[F8330000]      <2> 		mov [result], ecx
  4205 0000333A E80FFAFFFF          <2> 		call convert
  4206 0000333F BE[12D00000]        <2> 		mov esi, numbuf
  4207 00003344 8A25[F5330000]      <2> 		mov ah, [decimal]
  4208 0000334A 8825[F7330000]      <2> 		mov [decimalresult], ah
  4209 00003350 80FC00              <2> 		cmp ah, 0
  4210 00003353 0F8425000000        <2> 		je near noputdecimal
  4211                              <2> 	putdecimal:
  4212 00003359 4E                  <2> 		dec esi
  4213 0000335A FECC                <2> 		dec ah
  4214 0000335C 80FC00              <2> 		cmp ah, 0
  4215 0000335F 0F87F4FFFFFF        <2> 		ja near putdecimal
  4216 00003365 4E                  <2> 		dec esi
  4217 00003366 8A06                <2> 		mov al, [esi]
  4218 00003368 C6062E              <2> 		mov byte [esi], '.'
  4219                              <2> 	decputloop:
  4220 0000336B 4E                  <2> 		dec esi
  4221 0000336C 8A26                <2> 		mov ah, [esi]
  4222 0000336E 8806                <2> 		mov [esi], al
  4223 00003370 88E0                <2> 		mov al, ah
  4224 00003372 81FE[FECF0000]      <2> 		cmp esi, buf2
  4225 00003378 0F87EDFFFFFF        <2> 		ja near decputloop
  4226                              <2> 	noputdecimal:
  4227 0000337E BE[FECF0000]        <2> 		mov esi, buf2
  4228 00003383 E809000000          <2> 		call chkadd
  4229 00003388 E93AF6FFFF          <2> 		jmp nwcmd
  4230 0000338D 00000000            <2> edxnumbuf dw 0,0
  4231 00003391 8A06                <2> 	chkadd: mov al, [esi]
  4232 00003393 3C30                <2> 		cmp al, '0'
  4233 00003395 750C                <2> 		jne dnadd
  4234 00003397 46                  <2> 		inc esi
  4235 00003398 81FE[12D00000]      <2> 		cmp esi, numbuf
  4236 0000339E 7402                <2> 		je dnaddm1
  4237 000033A0 EBEF                <2> 		jmp chkadd
  4238 000033A2 4E                  <2> 	dnaddm1: dec esi
  4239 000033A3 E877E9FFFF          <2> 	dnadd:	call print
  4240 000033A8 BE[5E8D0000]        <2> 		mov esi, line
  4241 000033AD E86DE9FFFF          <2> 		call print
  4242 000033B2 C3                  <2> 		ret
  4243                              <2> 		
  4244                              <2> 	decaddfix:
  4245 000033B3 A0[F6330000]        <2> 		mov al, [decimal2]
  4246 000033B8 8A25[F5330000]      <2> 		mov ah, [decimal]
  4247 000033BE 38E0                <2> 		cmp al, ah
  4248 000033C0 7432                <2> 		je gooddecadd
  4249 000033C2 38E0                <2> 		cmp al, ah
  4250 000033C4 721A                <2> 		jb lowdecadd
  4251                              <2> 	highdecadd:
  4252 000033C6 FEC4                <2> 		inc ah
  4253 000033C8 89CA                <2> 		mov edx, ecx
  4254 000033CA C1E103              <2> 		shl ecx, 3
  4255 000033CD 01D1                <2> 		add ecx, edx
  4256 000033CF 01D1                <2> 		add ecx, edx
  4257 000033D1 38E0                <2> 		cmp al, ah
  4258 000033D3 77F1                <2> 		ja highdecadd
  4259 000033D5 8825[F5330000]      <2> 		mov [decimal], ah
  4260 000033DB E914000000          <2> 		jmp gooddecadd
  4261                              <2> 	lowdecadd:
  4262 000033E0 FEC0                <2> 		inc al
  4263 000033E2 89DA                <2> 		mov edx, ebx
  4264 000033E4 C1E303              <2> 		shl ebx, 3
  4265 000033E7 01D3                <2> 		add ebx, edx
  4266 000033E9 01D3                <2> 		add ebx, edx
  4267 000033EB 38E0                <2> 		cmp al, ah
  4268 000033ED 72F1                <2> 		jb lowdecadd
  4269 000033EF A2[F5330000]        <2> 		mov [decimal], al
  4270                              <2> 	gooddecadd:
  4271 000033F4 C3                  <2> 		ret
  4272                              <2> 		
  4273 000033F5 00                  <2> decimal db 0
  4274 000033F6 00                  <2> decimal2 db 0
  4275 000033F7 00                  <2> decimalresult db 0
  4276 000033F8 00000000            <2> result dd 0
  4277                              <1> %include 'source/programs/_variables.asm' ;% and $
  4278 000033FC FF2C2500            <2> db 255,44,"%",0
  4279                              <2> 	ans:
  4280 00003400 BE[FECF0000]        <2> 		mov esi, buf2
  4281 00003405 E887FFFFFF          <2> 		call chkadd
  4282 0000340A C3                  <2> 		ret
  4283                              <2> 		
  4284 0000340B FF2C2400            <2> db 255,44,"$",0
  4285 0000340F 8B35[7A2C0000]      <2> var: mov esi, [currentcommandloc]
  4286 00003415 BB[FEB70000]        <2> 	mov ebx, variables
  4287 0000341A 8A06                <2> lkeq:	mov al, [esi]
  4288 0000341C 3C3D                <2> 	cmp al, '='
  4289 0000341E 741B                <2> 	je eqfnd	;is there an '=' sign?
  4290 00003420 3C00                <2> 	cmp al, 0
  4291 00003422 7403                <2> 	je echovars
  4292 00003424 46                  <2> 	inc esi
  4293 00003425 EBF3                <2> 	jmp lkeq
  4294 00003427 BE[FEB70000]        <2> echovars: mov esi, variables
  4295 0000342C BB[FEC70000]        <2> 	mov ebx, varend
  4296 00003431 B105                <2> 	mov cl, 5
  4297 00003433 B504                <2> 	mov ch, 4
  4298 00003435 E89EF8FFFF          <2> 	call array
  4299 0000343A C3                  <2> 	ret
  4300 0000343B 46                  <2> eqfnd:	inc esi
  4301 0000343C 8A06                <2> 	mov al, [esi]
  4302 0000343E 3C00                <2> 	cmp al, 0
  4303 00003440 7410                <2> 	je readvar
  4304 00003442 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  4305 00003448 BB[FEB70000]        <2> 	mov ebx, variables
  4306 0000344D E919000000          <2> 	jmp seek
  4307                              <2> readvar:
  4308 00003452 B00A                <2> 	mov al, 10
  4309 00003454 66BB0700            <2> 	mov bx, 7
  4310 00003458 C605[D6210000]00    <2> 	mov byte [commandedit], 0
  4311 0000345F BF[FECF0000]        <2> 	mov edi, buftxtend
  4312 00003464 E89BE9FFFF          <2> 	call rdprint
  4313 00003469 EBA4                <2> 	jmp var
  4314 0000346B 668B03              <2> seek:	mov ax, [ebx]
  4315 0000346E B105                <2> 	mov cl, 5
  4316 00003470 B504                <2> 	mov ch, 4
  4317 00003472 663D0000            <2> 	cmp ax, 0
  4318 00003476 0F845B000000        <2> 	je near save
  4319 0000347C 6639C8              <2> 	cmp ax, cx
  4320 0000347F 7403                <2> 	je skfnd
  4321 00003481 43                  <2> 	inc ebx
  4322 00003482 EBE7                <2> 	jmp seek
  4323 00003484 8B35[7A2C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4324 0000348A 46                  <2> 	inc esi
  4325 0000348B 81C302000000        <2> 	add ebx, 2
  4326 00003491 89DF                <2> 	mov edi, ebx
  4327 00003493 B13D                <2> 	mov cl, '='
  4328 00003495 E81FF8FFFF          <2> 	call cndtest
  4329 0000349A 3C01                <2> 	cmp al, 1	
  4330 0000349C 7418                <2> 	je varfnd
  4331 0000349E 89FB                <2> 	mov ebx, edi
  4332 000034A0 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  4333 000034A6 668B03              <2> 	mov ax, [ebx]
  4334 000034A9 663D0000            <2> 	cmp ax, 0
  4335 000034AD 0F8424000000        <2> 	je near save
  4336 000034B3 43                  <2> 	inc ebx
  4337 000034B4 EBB5                <2> 	jmp seek
  4338 000034B6 8A03                <2> varfnd:	mov al, [ebx]
  4339 000034B8 3C04                <2> 	cmp al, 4
  4340 000034BA 7404                <2> 	je save2
  4341 000034BC 4B                  <2> 	dec ebx
  4342 000034BD 4E                  <2> 	dec esi
  4343 000034BE EBF6                <2> 	jmp varfnd
  4344 000034C0 4B                  <2> save2:	dec ebx
  4345 000034C1 4E                  <2> 	dec esi
  4346 000034C2 8A03                <2> 	mov al, [ebx]
  4347 000034C4 3C05                <2> 	cmp al, 5
  4348 000034C6 7402                <2> 	je remove
  4349 000034C8 EBEC                <2> 	jmp varfnd
  4350 000034CA 8A03                <2> remove: mov al, [ebx]
  4351 000034CC 3C00                <2> 	cmp al, 0
  4352 000034CE 749B                <2> 	je seek
  4353 000034D0 30C0                <2> 	xor al, al
  4354 000034D2 8803                <2> 	mov [ebx], al
  4355 000034D4 43                  <2> 	inc ebx
  4356 000034D5 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4357 000034D7 8B35[7A2C0000]      <2> save:	mov esi, [currentcommandloc]
  4358 000034DD 43                  <2> 	inc ebx
  4359 000034DE B005                <2> 	mov al, 5
  4360 000034E0 B404                <2> 	mov ah, 4
  4361 000034E2 668903              <2> 	mov [ebx], ax
  4362 000034E5 43                  <2> 	inc ebx
  4363 000034E6 43                  <2> svhere:	inc ebx
  4364 000034E7 46                  <2> 	inc esi
  4365 000034E8 8A06                <2> 	mov al, [esi]
  4366 000034EA 3C00                <2> 	cmp al, 0
  4367 000034EC 0F844A000000        <2> 	je near svdone
  4368 000034F2 3C25                <2> 	cmp al, '%'
  4369 000034F4 7404                <2> 	je ans2
  4370 000034F6 8803                <2> 	mov [ebx], al	
  4371 000034F8 EBEC                <2> 	jmp svhere
  4372 000034FA 56                  <2> ans2:	push esi
  4373 000034FB BE[FECF0000]        <2> 	mov esi, buf2
  4374 00003500 E823000000          <2> 	call ansfnd
  4375 00003505 E803000000          <2> 	call anscp
  4376 0000350A 5E                  <2> 	pop esi
  4377 0000350B EBD9                <2> 	jmp svhere
  4378 0000350D 8A06                <2> anscp:	mov al, [esi]
  4379 0000350F 8803                <2> 	mov [ebx], al
  4380 00003511 81FE[12D00000]      <2> 	cmp esi, numbuf
  4381 00003517 74CD                <2> 	je svhere
  4382 00003519 3C00                <2> 	cmp al, 0
  4383 0000351B 74C9                <2> 	je svhere
  4384 0000351D 43                  <2> 	inc ebx
  4385 0000351E 46                  <2> 	inc esi
  4386 0000351F EBEC                <2> 	jmp anscp
  4387 00003521 5E                  <2> ansnf:	pop esi
  4388 00003522 8A06                <2> 	mov al, [esi]
  4389 00003524 8803                <2> 	mov [ebx], al
  4390 00003526 EBBE                <2> 	jmp svhere
  4391 00003528 46                  <2> ansfnd:	inc esi
  4392 00003529 81FE[11D00000]      <2> 	cmp esi, numbuf - 1
  4393 0000352F 740A                <2> 	je fndans
  4394 00003531 8A06                <2> 	mov al, [esi]
  4395 00003533 3C00                <2> 	cmp al, 0
  4396 00003535 74EA                <2> 	je ansnf
  4397 00003537 3C30                <2> 	cmp al, '0'
  4398 00003539 74ED                <2> 	je ansfnd
  4399                              <2> fndans:
  4400 0000353B C3                  <2> 	ret
  4401 0000353C 30C0                <2> svdone:	xor al, al
  4402 0000353E 8803                <2> 	mov [ebx], al
  4403 00003540 C3                  <2> 	ret
  4404                              <1> %include 'source/programs/_run.asm' ;./
  4405                              <2> 
  4406 00003541 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4407 00003545 FF2C2E2F00          <2> 	db 255,44,"./",0
  4408                              <2> rundiskprog:
  4409 0000354A 8B3D[7A2C0000]      <2> 	mov edi, [currentcommandloc]
  4410 00003550 81C702000000        <2> 	add edi, 2
  4411 00003556 BE00004000          <2> 	mov esi, 0x400000
  4412 0000355B E8142E0000          <2> 	call loadfile
  4413 00003560 81FA94010000        <2> 	cmp edx, 404
  4414 00003566 746A                <2> 	je noprogfound
  4415 00003568 BB00004000          <2> 	mov ebx, 0x400000
  4416 0000356D A1[41350000]        <2> 	mov eax, [elfstart]
  4417 00003572 3903                <2> 	cmp [ebx], eax
  4418 00003574 0F8437000000        <2> 	je near runelf
  4419 0000357A 66813B4558          <2> 	cmp word [ebx], "EX"
  4420 0000357F 7577                <2> 	jne progbatchfound
  4421 00003581 81C302000000        <2> 	add ebx, 2
  4422 00003587 8B3D[7A2C0000]      <2> 	mov edi, [currentcommandloc]
  4423 0000358D 81C702000000        <2> 	add edi, 2
  4424                              <2> findspaceprog:
  4425 00003593 8A07                <2> 	mov al, [edi]
  4426 00003595 47                  <2> 	inc edi
  4427 00003596 3C20                <2> 	cmp al, " "
  4428 00003598 75F9                <2> 	jne findspaceprog
  4429                              <2> findnonspaceprog:
  4430 0000359A 8A07                <2> 	mov al, [edi]
  4431 0000359C 47                  <2> 	inc edi
  4432 0000359D 3C20                <2> 	cmp al, " "
  4433 0000359F 74F9                <2> 	je findnonspaceprog
  4434 000035A1 4F                  <2> 	dec edi
  4435 000035A2 8925[7EB50000]      <2> 	mov [previousstack], esp
  4436 000035A8 FFD3                <2> 	call ebx
  4437 000035AA 8B25[7EB50000]      <2> 	mov esp, [previousstack]
  4438 000035B0 C3                  <2> 	ret
  4439                              <2> runelf:
  4440 000035B1 8B3D[7A2C0000]      <2> 	mov edi, [currentcommandloc]
  4441 000035B7 81C702000000        <2> 	add edi, 2
  4442 000035BD 81C380000000        <2> 	add ebx, 0x80
  4443 000035C3 8925[7EB50000]      <2> 	mov [previousstack], esp
  4444 000035C9 FFD3                <2> 	call ebx
  4445 000035CB 8B25[7EB50000]      <2> 	mov esp, [previousstack]
  4446 000035D1 C3                  <2> 	ret
  4447                              <2> noprogfound:
  4448 000035D2 BE[258D0000]        <2> 	mov esi, notfound1
  4449 000035D7 E843E7FFFF          <2> 	call print
  4450 000035DC 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  4451 000035E2 81C602000000        <2> 	add esi, 2
  4452 000035E8 E832E7FFFF          <2> 	call print
  4453 000035ED BE[2D8D0000]        <2> 	mov esi, notfound2
  4454 000035F2 E828E7FFFF          <2> 	call print
  4455 000035F7 C3                  <2> 	ret
  4456                              <2> progbatchfound:
  4457 000035F8 BF00004000          <2> 		mov edi, 0x400000
  4458 000035FD C605[F8B70000]01    <2> 		mov byte [BATCHISON], 1
  4459                              <2> 	batchrunloop:
  4460 00003604 E89BF3FFFF          <2> 		call buftxtclear
  4461 00003609 BE[FECB0000]        <2> 		mov esi, buftxt
  4462 0000360E 8935[7A2C0000]      <2> 		mov [currentcommandloc], esi
  4463                              <2> 	batchrunloop2:
  4464 00003614 B10A                <2> 		mov cl, 10
  4465 00003616 B50D                <2> 		mov ch, 13
  4466 00003618 380F                <2> 		cmp [edi], cl
  4467 0000361A 0F8419000000        <2> 		je near nxtbatchrunline
  4468 00003620 382F                <2> 		cmp [edi], ch
  4469 00003622 0F8411000000        <2> 		je near nxtbatchrunline
  4470 00003628 803F00              <2> 		cmp byte [edi], 0
  4471 0000362B 0F8408000000        <2> 		je near nxtbatchrunline
  4472 00003631 8A07                <2> 		mov al, [edi]
  4473 00003633 8806                <2> 		mov [esi], al
  4474 00003635 46                  <2> 		inc esi
  4475 00003636 47                  <2> 		inc edi
  4476 00003637 EBDB                <2> 		jmp batchrunloop2
  4477                              <2> 	nxtbatchrunline:
  4478 00003639 47                  <2> 		inc edi
  4479 0000363A 380F                <2> 		cmp [edi], cl
  4480 0000363C 74FB                <2> 		je nxtbatchrunline
  4481 0000363E 382F                <2> 		cmp [edi], ch
  4482 00003640 74F7                <2> 		je nxtbatchrunline
  4483 00003642 893D[A0360000]      <2> 		mov [batchedi], edi
  4484 00003648 893D[F4B70000]      <2> 		mov [BATCHPOS], edi
  4485 0000364E C60600              <2> 		mov byte [esi], 0
  4486 00003651 BE[FECB0000]        <2> 		mov esi, buftxt
  4487 00003656 803E00              <2> 		cmp byte [esi], 0
  4488 00003659 0F8439000000        <2> 		je near nobatchfoundrun
  4489 0000365F 31DB                <2> 		xor ebx, ebx
  4490 00003661 8A1D[8FB70000]      <2> 		mov bl, [IFON]
  4491 00003667 80FB00              <2> 		cmp bl, 0
  4492 0000366A 0F8534000000        <2> 		jne near iftestbatch
  4493                              <2> 	doneiftest:
  4494 00003670 803D[76370000]00    <2> 		cmp byte [runnextline], 0
  4495 00003677 0F8405000000        <2> 		je near noruniftest
  4496 0000367D E822F5FFFF          <2> 		call run
  4497                              <2> 	noruniftest:
  4498 00003682 C605[76370000]01    <2> 		mov byte [runnextline], 1
  4499 00003689 8B3D[A0360000]      <2> 		mov edi, [batchedi]
  4500 0000368F 803F00              <2> 		cmp byte [edi], 0
  4501 00003692 0F856CFFFFFF        <2> 		jne near batchrunloop
  4502                              <2> 	nobatchfoundrun:
  4503 00003698 C605[F8B70000]00    <2> 		mov byte [BATCHISON], 0
  4504 0000369F C3                  <2> 		ret
  4505                              <2> 	
  4506 000036A0 00000000            <2> batchedi dd 0	
  4507                              <2> 	
  4508                              <2> 	iftestbatch:
  4509 000036A4 BE[90B70000]        <2> 		mov esi, IFTRUE
  4510 000036A9 01DE                <2> 		add esi, ebx
  4511 000036AB 803E00              <2> 		cmp byte [esi], 0
  4512 000036AE 0F85BCFFFFFF        <2> 		jne near doneiftest
  4513 000036B4 881D[77370000]      <2> 		mov [iffalsebuf], bl
  4514 000036BA 803D[F9B70000]01    <2> 		cmp byte [LOOPON], 1
  4515 000036C1 0F8513000000        <2> 		jne near fifindbatch
  4516 000036C7 E938FFFFFF          <2> 		jmp batchrunloop
  4517                              <2> 	elsetestbatch:
  4518 000036CC C60601              <2> 		mov byte [esi], 1
  4519 000036CF 81C705000000        <2> 		add edi, 5
  4520 000036D5 E92AFFFFFF          <2> 		jmp batchrunloop
  4521                              <2> 	fifindbatch:
  4522 000036DA 66B96966            <2> 		mov cx, "if"
  4523 000036DE 66B86669            <2> 		mov ax, "fi"
  4524 000036E2 663907              <2> 		cmp [edi], ax
  4525 000036E5 0F8424000000        <2> 		je near fifoundbatch
  4526 000036EB 66390F              <2> 		cmp [edi], cx
  4527 000036EE 0F8465000000        <2> 		je near iffoundbatch
  4528 000036F4 803F00              <2> 		cmp byte [edi], 0
  4529 000036F7 0F8412000000        <2> 		je near fifoundbatch
  4530 000036FD B8656C7365          <2> 		mov eax, "else"
  4531 00003702 3907                <2> 		cmp [edi], eax
  4532 00003704 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4533 0000370A E973FFFFFF          <2> 		jmp noruniftest
  4534                              <2> 	fifoundbatch:
  4535 0000370F 81C702000000        <2> 		add edi, 2
  4536 00003715 B00A                <2> 		mov al, 10
  4537 00003717 3807                <2> 		cmp [edi], al
  4538 00003719 0F840B000000        <2> 		je near goodfibatch
  4539 0000371F 803F00              <2> 		cmp byte [edi], 0
  4540 00003722 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4541 00003728 EBB0                <2> 		jmp fifindbatch
  4542                              <2> 	goodfibatch:
  4543 0000372A B001                <2> 		mov al, 1
  4544 0000372C 2805[8FB70000]      <2> 		sub [IFON], al 
  4545 00003732 A0[8FB70000]        <2> 		mov al, [IFON]
  4546 00003737 8A1D[77370000]      <2> 		mov bl, [iffalsebuf]
  4547 0000373D 38D8                <2> 		cmp al, bl
  4548 0000373F 7799                <2> 		ja fifindbatch
  4549 00003741 8B35[7A2C0000]      <2> 		mov esi, [currentcommandloc]
  4550 00003747 81EF02000000        <2> 		sub edi, 2
  4551 0000374D C605[76370000]00    <2> 		mov byte [runnextline], 0
  4552 00003754 E9ABFEFFFF          <2> 		jmp batchrunloop
  4553                              <2> 	iffoundbatch:
  4554 00003759 B020                <2> 		mov al, ' '
  4555 0000375B 81C702000000        <2> 		add edi, 2
  4556 00003761 3807                <2> 		cmp [edi], al
  4557 00003763 0F8571FFFFFF        <2> 		jne near fifindbatch
  4558 00003769 B001                <2> 		mov al, 1
  4559 0000376B 0005[8FB70000]      <2> 		add [IFON], al
  4560 00003771 E964FFFFFF          <2> 		jmp fifindbatch
  4561                              <2> 		
  4562                              <2> 		
  4563 00003776 01                  <2> runnextline db 1
  4564 00003777 00                  <2> iffalsebuf db 0
  4565                              <2> 
  4566 00003778 C3                  <2> notbatch: ret 
  4567                              <1> %ifdef network.included
  4568                              <1> 	%include 'source/programs/arp.asm'
  4569 00003779 FF2C61727000        <2> db 255,44,"arp",0
  4570                              <2> 	;ARP TESTING
  4571                              <2> arptest:
  4572 0000377F 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  4573 00003785 81C604000000        <2> 	add esi, 4
  4574 0000378B E89A540000          <2> 	call strtoip
  4575 00003790 890D[37380000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4576 00003796 E8D5540000          <2> 	call showip
  4577 0000379B 803D[3B380000]01    <2> 	cmp byte [arpconfig], 1
  4578 000037A2 7405                <2> 	je arptest2
  4579 000037A4 E841000000          <2> 	call arpinit
  4580                              <2> arptest2:	;try to reach 192.168.0.1
  4581 000037A9 8B0D[178D0000]      <2> 	mov ecx, [sysmac]
  4582 000037AF 668B1D[1B8D0000]    <2> 	mov bx, [sysmac + 4]
  4583 000037B6 890D[17380000]      <2> 	mov [sourcemac], ecx
  4584 000037BC 66891D[1B380000]    <2> 	mov [sourcemac + 4],bx
  4585 000037C3 890D[27380000]      <2> 	mov [arpsenderinfo], ecx
  4586 000037C9 66891D[2B380000]    <2> 	mov [arpsenderinfo + 4], bx
  4587 000037D0 BF[11380000]        <2> 	mov edi, frame
  4588 000037D5 BE[3B380000]        <2> 	mov esi, framend
  4589 000037DA E802540000          <2> 	call sendpacket
  4590 000037DF BE[5E8D0000]        <2> 	mov esi, line
  4591 000037E4 E836E5FFFF          <2> 	call print
  4592 000037E9 C3                  <2> 	ret
  4593                              <2> 	
  4594                              <2> arpinit:
  4595 000037EA BE[3C380000]        <2> 	mov esi, arptable
  4596 000037EF BF[178D0000]        <2> 	mov edi, sysmac
  4597 000037F4 BB[138D0000]        <2> 	mov ebx, sysip
  4598 000037F9 8B0F                <2> 	mov ecx, [edi]
  4599 000037FB 890E                <2> 	mov [esi], ecx
  4600 000037FD 668B4F04            <2> 	mov cx, [edi + 4]
  4601 00003801 894E04              <2> 	mov [esi + 4], ecx
  4602 00003804 8B0B                <2> 	mov ecx, [ebx]
  4603 00003806 894E06              <2> 	mov [esi + 6], ecx
  4604 00003809 C605[3B380000]01    <2> 	mov byte [arpconfig], 1
  4605 00003810 C3                  <2> 	ret
  4606                              <2> 	
  4607                              <2> ;example frame
  4608                              <2> frame:
  4609 00003811 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4610 00003817 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4611 0000381D 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4612                              <2> 	;;example packet
  4613 0000381F 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4614 00003821 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4615 00003823 0604                <2> 					db 6,4			;length of mac, length of ip
  4616 00003825 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4617 00003827 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4618 0000382D C0A80073            <2> 					db 192,168,0,115		;ip
  4619 00003831 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4620 00003837 C0A80000            <2> 					db 192,168,0,0			;ip
  4621                              <2> framend:
  4622                              <2> 
  4623 0000383B 00                  <2> arpconfig db 0
  4624                              <2> arptable:	;;mac,ip
  4625 0000383C 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4626 00003845 00<rept>            <2>
  4627                              <2> arptableend:	
  4628                              <1> %endif
  4629                              <1> %include 'source/programs/batch.asm'
  4630 000038A0 FF2C626174636800    <2> db 255,44,"batch",0
  4631                              <2> 	batchst: 
  4632 000038A8 8B3D[7A2C0000]      <2> 		mov edi, [currentcommandloc]
  4633 000038AE 81C706000000        <2> 		add edi, 6
  4634 000038B4 803F00              <2> 		cmp byte [edi], 0
  4635 000038B7 0F846D000000        <2> 		je near nonamefound
  4636 000038BD BE00004000          <2> 		mov esi, 0x400000
  4637 000038C2 E8AD2A0000          <2> 		call loadfile
  4638 000038C7 89D0                <2> 		mov eax, edx
  4639 000038C9 3D94010000          <2> 		cmp eax, 404
  4640 000038CE 7465                <2> 		je goodbatchname
  4641 000038D0 BE[DB380000]        <2> 		mov esi, badbatchname
  4642 000038D5 E845E4FFFF          <2> 		call print
  4643 000038DA C3                  <2> 		ret
  4644 000038DB 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4645 000038E4 20616C726561647920- <2>
  4646 000038ED 657869737473210A00  <2>
  4647 000038F6 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4648 000038FF 746F20747970652061- <2>
  4649 00003908 206E616D6520616674- <2>
  4650 00003911 65722074686520636F- <2>
  4651 0000391A 6D6D616E642E0A00    <2>
  4652 00003922 00000000            <2> 		esicache3 dd 0
  4653 00003926 00000000            <2> 		esicache2 dd 0
  4654                              <2> 	nonamefound:
  4655 0000392A BE[F6380000]        <2> 		mov esi, namenotfoundbatch
  4656 0000392F E8EBE3FFFF          <2> 		call print
  4657 00003934 C3                  <2> 		ret
  4658                              <2> 	goodbatchname:
  4659 00003935 BE00004000          <2> 		mov esi, 0x400000
  4660                              <2> 	batchcreate:
  4661 0000393A 8935[22390000]      <2> 		mov [esicache3], esi
  4662 00003940 BF00008000          <2> 		mov edi, 0x800000
  4663 00003945 B00A                <2> 		mov al, 10
  4664 00003947 B307                <2> 		mov bl, 7
  4665 00003949 B404                <2> 		mov ah, 4
  4666 0000394B CD30                <2> 		int 30h
  4667 0000394D 8935[26390000]      <2> 		mov [esicache2], esi
  4668 00003953 8A0E                <2> 		mov cl, [esi]
  4669 00003955 8B35[22390000]      <2> 		mov esi, [esicache3]
  4670 0000395B BB[8F390000]        <2> 		mov ebx, exitword
  4671 00003960 E854F3FFFF          <2> 		call cndtest
  4672 00003965 3C01                <2> 		cmp al, 1
  4673 00003967 7411                <2> 		je endbatchcreate
  4674 00003969 3C02                <2> 		cmp al, 2
  4675 0000396B 740D                <2> 		je endbatchcreate
  4676 0000396D 8B35[26390000]      <2> 		mov esi, [esicache2]
  4677 00003973 B00A                <2> 		mov al, 10
  4678 00003975 8806                <2> 		mov [esi], al
  4679 00003977 46                  <2> 		inc esi
  4680 00003978 EBC0                <2> 		jmp batchcreate
  4681                              <2> 	endbatchcreate:
  4682 0000397A 8B35[22390000]      <2> 		mov esi, [esicache3]
  4683 00003980 31C0                <2> 		xor eax, eax
  4684 00003982 8806                <2> 		mov [esi], al
  4685 00003984 BE00004000          <2> 		mov esi, 0x400000
  4686 00003989 E891E3FFFF          <2> 		call print
  4687 0000398E C3                  <2> 		ret
  4688                              <2> 	
  4689 0000398F 5C7800              <2> 	exitword db "\x",0
  4690 00003992 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4691 0000399B 6F20657869742E0A00  <2>
  4692                              <1> %ifdef gui.background
  4693                              <1> 	%include 'source/programs/background.asm'
  4694 000039A4 FF2C6261636B67726F- <2> db 255,44,"background",0
  4695 000039AD 756E6400            <2>
  4696 000039B1 8B3D[7A2C0000]      <2> 		mov edi, [currentcommandloc]
  4697 000039B7 81C70B000000        <2> 		add edi, 11
  4698 000039BD BE00008000          <2> 		mov esi, 0x800000
  4699 000039C2 E8AD290000          <2> 		call loadfile
  4700 000039C7 81FA94010000        <2> 		cmp edx, 404
  4701 000039CD 0F8445100000        <2> 		je near filenotfound
  4702 000039D3 BE00008000          <2> 		mov esi, 0x800000
  4703 000039D8 66813E424D          <2> 		cmp word [esi], "BM"
  4704 000039DD 7401                <2> 		je .bmpfound
  4705 000039DF C3                  <2> 		ret
  4706                              <2> .bmpfound:
  4707 000039E0 8B3D[3F550000]      <2> 		mov edi, [physbaseptr]
  4708 000039E6 57                  <2> 		push edi
  4709 000039E7 BE[13D20000]        <2> 		mov esi, backgroundbuffer
  4710 000039EC 8935[CA6A0000]      <2> 		mov [backgroundimage], esi
  4711 000039F2 8935[3F550000]      <2> 		mov [physbaseptr], esi
  4712 000039F8 31C0                <2> 		xor eax, eax
  4713                              <2> .clearlp:
  4714 000039FA 8906                <2> 		mov [esi], eax
  4715 000039FC 81C604000000        <2> 		add esi, 4
  4716 00003A02 81FE[13E62800]      <2> 		cmp esi, backgroundbufferend
  4717 00003A08 72F0                <2> 		jb .clearlp
  4718 00003A0A BE00008000          <2> 		mov esi, 0x800000
  4719 00003A0F 31C9                <2> 		xor ecx, ecx
  4720 00003A11 31D2                <2> 		xor edx, edx
  4721 00003A13 31DB                <2> 		xor ebx, ebx
  4722 00003A15 E81E2B0000          <2> 		call showbmp
  4723 00003A1A 5F                  <2> 		pop edi
  4724 00003A1B 893D[3F550000]      <2> 		mov [physbaseptr], edi
  4725 00003A21 803D[389F0000]00    <2> 		cmp byte [guion], 0
  4726 00003A28 740F                <2> 		je .noclear
  4727 00003A2A E848300000          <2> 		call guiclear
  4728 00003A2F E8E32C0000          <2> 		call clearmousecursor
  4729 00003A34 E8C3300000          <2> 		call reloadallgraphics
  4730                              <2> .noclear:
  4731 00003A39 C3                  <2> 		ret
  4732                              <1> %endif
  4733                              <1> %include 'source/programs/beep.asm'
  4734 00003A3A FF2C6265657000      <2> 	db 255,44,"beep",0
  4735                              <2> beep:
  4736 00003A41 B8[663A0000]        <2> 	mov eax, beepstart
  4737 00003A46 A3[68020000]        <2> 	mov [soundpos], eax
  4738 00003A4B B8[6A3A0000]        <2> 	mov eax, beepend
  4739 00003A50 A3[6C020000]        <2> 	mov [soundendpos], eax
  4740 00003A55 C605[65020000]01    <2> 	mov byte [soundon], 1
  4741                              <2> waitforsoundendbeep:
  4742 00003A5C A0[65020000]        <2> 	mov al, [soundon]
  4743 00003A61 3C00                <2> 	cmp al, 0
  4744 00003A63 75F7                <2> 	jne waitforsoundendbeep
  4745 00003A65 C3                  <2> 	ret
  4746                              <2> 	
  4747                              <2> beepstart:
  4748 00003A66 3200D111            <2> 	dw 50, 4561
  4749                              <2> beepend:
  4750                              <1> %include 'source/programs/cd.asm'
  4751 00003A6A FF2C636400          <2> db 255,44,"cd",0
  4752                              <2> cd:
  4753 00003A6F 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  4754 00003A75 81C603000000        <2> 	add esi, 3
  4755 00003A7B 8B3D[86B50000]      <2> 	mov edi, [currentfolderloc]
  4756 00003A81 893D[82B50000]      <2> 	mov [lastfolderloc], edi
  4757 00003A87 81C7[8AB50000]      <2> 	add edi, currentfolder
  4758 00003A8D 4F                  <2> 	dec edi
  4759 00003A8E 66813E2E2E          <2> 	cmp word [esi], ".."
  4760 00003A93 742A                <2> 	je .moveup
  4761 00003A95 47                  <2> 	inc edi
  4762                              <2> .movedown:
  4763 00003A96 8A06                <2> 	mov al, [esi]
  4764 00003A98 8807                <2> 	mov [edi], al
  4765 00003A9A 47                  <2> 	inc edi
  4766 00003A9B 46                  <2> 	inc esi
  4767 00003A9C 3C00                <2> 	cmp al, 0
  4768 00003A9E 740A                <2> 	je .donecd
  4769 00003AA0 81FF[8AB70000]      <2> 	cmp edi, currentfolderend
  4770 00003AA6 72EE                <2> 	jb .movedown
  4771 00003AA8 30C0                <2> 	xor al, al
  4772                              <2> .donecd:
  4773 00003AAA 4F                  <2> 	dec edi
  4774 00003AAB C6072F              <2> 	mov byte [edi], '/'
  4775 00003AAE 47                  <2> 	inc edi
  4776 00003AAF C60700              <2> 	mov byte [edi], 0
  4777 00003AB2 81EF[8AB50000]      <2> 	sub edi, currentfolder
  4778 00003AB8 893D[86B50000]      <2> 	mov [currentfolderloc], edi
  4779 00003ABE C3                  <2> 	ret
  4780                              <2> .moveup:
  4781 00003ABF 31C0                <2> 	xor eax, eax
  4782 00003AC1 A3[82B50000]        <2> 	mov [lastfolderloc], eax
  4783                              <2> .moveuploop:
  4784 00003AC6 4F                  <2> 	dec edi
  4785 00003AC7 8A07                <2> 	mov al, [edi]
  4786 00003AC9 81FF[8AB50000]      <2> 	cmp edi, currentfolder
  4787 00003ACF 763B                <2> 	jbe .moveupover
  4788 00003AD1 3C2F                <2> 	cmp al, '/'
  4789 00003AD3 75F1                <2> 	jne .moveuploop
  4790 00003AD5 C6072F              <2> 	mov byte [edi], '/'
  4791 00003AD8 47                  <2> 	inc edi
  4792 00003AD9 C60700              <2> 	mov byte [edi], 0
  4793 00003ADC 81EF[8AB50000]      <2> 	sub edi, currentfolder
  4794 00003AE2 893D[86B50000]      <2> 	mov [currentfolderloc], edi
  4795 00003AE8 81C7[8AB50000]      <2> 	add edi, currentfolder
  4796 00003AEE 4F                  <2> 	dec edi
  4797                              <2> .lastfolder:
  4798 00003AEF 4F                  <2> 	dec edi
  4799 00003AF0 8A07                <2> 	mov al, [edi]
  4800 00003AF2 81FF[8AB50000]      <2> 	cmp edi, currentfolder
  4801 00003AF8 7604                <2> 	jbe .donemoveup
  4802 00003AFA 3C2F                <2> 	cmp al, '/'
  4803 00003AFC 75F1                <2> 	jne .lastfolder
  4804                              <2> .donemoveup:
  4805 00003AFE 47                  <2> 	inc edi
  4806 00003AFF 81EF[8AB50000]      <2> 	sub edi, currentfolder
  4807 00003B05 893D[82B50000]      <2> 	mov [lastfolderloc], edi
  4808 00003B0B C3                  <2> 	ret
  4809                              <2> .moveupover:
  4810 00003B0C BF[8AB50000]        <2> 	mov edi, currentfolder
  4811 00003B11 C6072F              <2> 	mov byte [edi], '/'
  4812 00003B14 47                  <2> 	inc edi
  4813 00003B15 C60700              <2> 	mov byte [edi], 0
  4814 00003B18 31C0                <2> 	xor eax, eax
  4815 00003B1A A3[82B50000]        <2> 	mov [lastfolderloc], eax
  4816 00003B1F 40                  <2> 	inc eax
  4817 00003B20 A3[86B50000]        <2> 	mov [currentfolderloc], eax
  4818 00003B25 C3                  <2> 	ret
  4819                              <1> %include 'source/programs/charmap.asm'
  4820 00003B26 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4821 00003B2F 00                  <2>
  4822 00003B30 66BB0700            <2> 	mov bx, 7
  4823 00003B34 B020                <2> 	mov al, " "
  4824 00003B36 E828E7FFFF          <2> 	call prcharq
  4825 00003B3B E823E7FFFF          <2> 	call prcharq
  4826 00003B40 E81EE7FFFF          <2> 	call prcharq
  4827 00003B45 E819E7FFFF          <2> 	call prcharq
  4828 00003B4A B030                <2> 	mov al, "0"
  4829                              <2> charmapnumprnt:
  4830 00003B4C E812E7FFFF          <2> 	call prcharq
  4831 00003B51 FEC0                <2> 	inc al
  4832 00003B53 6650                <2> 	push ax
  4833 00003B55 B020                <2> 	mov al, " "
  4834 00003B57 E807E7FFFF          <2> 	call prcharq
  4835 00003B5C 6658                <2> 	pop ax
  4836 00003B5E 3C39                <2> 	cmp al, "9"
  4837 00003B60 76EA                <2> 	jbe charmapnumprnt
  4838 00003B62 B041                <2> 	mov al, "A"
  4839                              <2> charmapnumprnt2:
  4840 00003B64 E8FAE6FFFF          <2> 	call prcharq
  4841 00003B69 FEC0                <2> 	inc al
  4842 00003B6B 6650                <2> 	push ax
  4843 00003B6D B020                <2> 	mov al, " "
  4844 00003B6F E8EFE6FFFF          <2> 	call prcharq
  4845 00003B74 6658                <2> 	pop ax
  4846 00003B76 3C47                <2> 	cmp al, "G"
  4847 00003B78 72EA                <2> 	jb charmapnumprnt2
  4848                              <2> 	
  4849 00003B7A BE[5E8D0000]        <2> 	mov esi, line
  4850 00003B7F E889E1FFFF          <2> 	call printquiet
  4851 00003B84 6631C0              <2> 	xor ax, ax
  4852 00003B87 88C1                <2> 	mov cl, al
  4853 00003B89 E8FFF2FFFF          <2> 	call showhexsmall
  4854 00003B8E E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4855                              <2> charmapcopy:
  4856 00003B93 FEC0                <2> 	inc al
  4857 00003B95 6650                <2> 	push ax
  4858 00003B97 3C08                <2> 	cmp al, 8
  4859 00003B99 744D                <2> 	je charmapnocopy
  4860 00003B9B 3C09                <2> 	cmp al, 9
  4861 00003B9D 7449                <2> 	je charmapnocopy
  4862 00003B9F 3C0A                <2> 	cmp al, 10
  4863 00003BA1 7445                <2> 	je charmapnocopy
  4864 00003BA3 3C0D                <2> 	cmp al, 13
  4865 00003BA5 7441                <2> 	je charmapnocopy
  4866 00003BA7 3CFF                <2> 	cmp al, 255
  4867 00003BA9 743D                <2> 	je charmapnocopy
  4868 00003BAB 3C00                <2> 	cmp al, 0
  4869 00003BAD 7434                <2> 	je nomorecharmap
  4870 00003BAF E8AFE6FFFF          <2> 	call prcharq
  4871 00003BB4 B020                <2> 	mov al, " "
  4872 00003BB6 E8A8E6FFFF          <2> 	call prcharq
  4873 00003BBB 6658                <2> 	pop ax
  4874                              <2> charmapcopycheck:
  4875 00003BBD FEC4                <2> 	inc ah
  4876 00003BBF 80FC10              <2> 	cmp ah, 16
  4877 00003BC2 72CF                <2> 	jb charmapcopy
  4878 00003BC4 6650                <2> 	push ax
  4879 00003BC6 BE[5E8D0000]        <2> 	mov esi, line
  4880 00003BCB E83DE1FFFF          <2> 	call printquiet
  4881 00003BD0 6658                <2> 	pop ax
  4882 00003BD2 3CFF                <2> 	cmp al, 255
  4883 00003BD4 740D                <2> 	je nomorecharmap
  4884 00003BD6 88C1                <2> 	mov cl, al
  4885 00003BD8 FEC1                <2> 	inc cl
  4886 00003BDA E8AEF2FFFF          <2> 	call showhexsmall
  4887 00003BDF 30E4                <2> 	xor ah, ah
  4888 00003BE1 EBB0                <2> 	jmp charmapcopy
  4889                              <2> nomorecharmap:
  4890 00003BE3 E9DFEDFFFF          <2> 	jmp nwcmd
  4891                              <2> charmapnocopy:
  4892 00003BE8 6650                <2> 	push ax
  4893 00003BEA B020                <2> 	mov al, " "
  4894 00003BEC E872E6FFFF          <2> 	call prcharq
  4895 00003BF1 E86DE6FFFF          <2> 	call prcharq
  4896 00003BF6 6658                <2> 	pop ax
  4897 00003BF8 EBC3                <2> 	jmp charmapcopycheck
  4898                              <1> %include 'source/programs/clear.asm'
  4899 00003BFA FF2C636C65617200    <2> db 255,44,"clear",0
  4900 00003C02 E87EE1FFFF          <2> 		call clear
  4901 00003C07 C3                  <2> 		ret 
  4902                              <1> %include 'source/programs/cpuid.asm'
  4903 00003C08 FF2C637075696400    <2> db 255,44,"cpuid",0
  4904 00003C10 31C0                <2> 	xor eax, eax
  4905 00003C12 0FA2                <2> 	cpuid
  4906 00003C14 891D[653C0000]      <2> 	mov [cpuidbuf], ebx
  4907 00003C1A 8915[693C0000]      <2> 	mov [cpuidbuf + 4], edx
  4908 00003C20 890D[6D3C0000]      <2> 	mov [cpuidbuf + 8], ecx
  4909 00003C26 BE[653C0000]        <2> 	mov esi, cpuidbuf
  4910 00003C2B E8EFE0FFFF          <2> 	call print
  4911 00003C30 BE[5E8D0000]        <2> 	mov esi, line
  4912 00003C35 E8E5E0FFFF          <2> 	call print
  4913 00003C3A B801000000          <2> 	mov eax, 1
  4914 00003C3F 0FA2                <2> 	cpuid
  4915 00003C41 89C1                <2> 	mov ecx, eax
  4916 00003C43 C605[8C2E0000]02    <2> 	mov byte [firsthexshown], 2
  4917 00003C4A E852F2FFFF          <2> 	call showhex
  4918 00003C4F B808000080          <2> 	mov eax, 0x80000008
  4919 00003C54 0FA2                <2> 	cpuid
  4920 00003C56 89C1                <2> 	mov ecx, eax
  4921 00003C58 C605[8C2E0000]02    <2> 	mov byte [firsthexshown], 2
  4922 00003C5F E83DF2FFFF          <2> 	call showhex
  4923 00003C64 C3                  <2> 	ret
  4924                              <2> 	
  4925 00003C65 00<rept>            <2> cpuidbuf times 13 db 0
  4926                              <2> cpuidvendorend:
  4927                              <1> %ifdef network.included
  4928                              <1> 	%include 'source/programs/dhcp.asm'
  4929 00003C72 FF2C6468637000      <2> db 255,44,"dhcp",0
  4930                              <2> dhcp:
  4931 00003C79 BE[393D0000]        <2> 	mov esi, .dhcp.mac
  4932 00003C7E BB[193E0000]        <2> 	mov ebx, .dhcp.option.mac
  4933 00003C83 BF[F93C0000]        <2> 	mov edi, .mac
  4934 00003C88 31C9                <2> 	xor ecx, ecx
  4935 00003C8A 66890D[0B3D0000]    <2> 	mov [.ip.checksum], cx
  4936 00003C91 66890D[1B3D0000]    <2> 	mov [.udp.checksum], cx
  4937 00003C98 8B0D[178D0000]      <2> 	mov ecx, [sysmac]
  4938 00003C9E 890B                <2> 	mov [ebx], ecx
  4939 00003CA0 890F                <2> 	mov [edi], ecx
  4940 00003CA2 890E                <2> 	mov [esi], ecx
  4941 00003CA4 668B0D[1B8D0000]    <2> 	mov cx, [sysmac + 4]
  4942 00003CAB 66894B04            <2> 	mov [ebx + 4], cx
  4943 00003CAF 66894E04            <2> 	mov [esi + 4], cx
  4944 00003CB3 66894F04            <2> 	mov [edi + 4], cx
  4945 00003CB7 BF[013D0000]        <2> 	mov edi, .ip.header
  4946 00003CBC BE[153D0000]        <2> 	mov esi, .ip.headerend
  4947 00003CC1 E83C4F0000          <2> 	call getchecksum
  4948 00003CC6 66890D[0B3D0000]    <2> 	mov [.ip.checksum], cx
  4949 00003CCD BF[153D0000]        <2> 	mov edi, .udp.header
  4950 00003CD2 BE[303E0000]        <2> 	mov esi, .udp.end
  4951 00003CD7 E8264F0000          <2> 	call getchecksum
  4952 00003CDC 66890D[1B3D0000]    <2> 	mov [.udp.checksum], cx
  4953 00003CE3 BF[F33C0000]        <2> 	mov edi, .frame
  4954 00003CE8 BE[303E0000]        <2> 	mov esi, .udp.end
  4955 00003CED E8EF4E0000          <2> 	call sendpacket
  4956 00003CF2 C3                  <2> 	ret
  4957                              <2> .frame:
  4958 00003CF3 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4959 00003CF9 000000000000        <2> 	.mac db 0,0,0,0,0,0
  4960 00003CFF 0800                <2> 	db 8,0
  4961                              <2> .ip.header:
  4962 00003D01 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  4963 00003D02 00                  <2> 	db 0
  4964 00003D03 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  4965 00003D05 0000                <2> 	dw 0
  4966 00003D07 0000                <2> 	dw 0
  4967 00003D09 80                  <2> 	db 0x80
  4968 00003D0A 11                  <2> 	db 17
  4969 00003D0B 0000                <2> .ip.checksum dw 0
  4970 00003D0D 00000000            <2> 	db 0,0,0,0
  4971 00003D11 FFFFFFFF            <2> 	db 255,255,255,255	
  4972                              <2> .ip.headerend:
  4973                              <2> .udp.header:
  4974 00003D15 0044                <2> 	db 0,68	;source port
  4975 00003D17 0043                <2> 	db 0,67 ;destination port
  4976 00003D19 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  4977 00003D1B 0000                <2> .udp.checksum dw 0
  4978                              <2> .udp.headerend:
  4979                              <2> .dhcp.data:
  4980 00003D1D 01                  <2> 	db 1	;message type
  4981 00003D1E 01                  <2> 	db 1	;hardware type
  4982 00003D1F 06                  <2> 	db 6	;hardware address length
  4983 00003D20 00                  <2> 	db 0	;hops
  4984 00003D21 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  4985 00003D25 0000                <2> 	db 0,0	;seconds elapsed
  4986 00003D27 0000                <2> 	db 0,0	;flags
  4987 00003D29 00000000            <2> 	db 0,0,0,0	;client ip address
  4988 00003D2D 00000000            <2> 	db 0,0,0,0	;your ip address
  4989 00003D31 00000000            <2> 	db 0,0,0,0	;server ip address
  4990 00003D35 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  4991 00003D39 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  4992 00003D3F 00<rept>            <2> 	times 10 db 0	;padding
  4993 00003D49 00<rept>            <2> 	times 64 db 0	;server host name
  4994 00003D89 00<rept>            <2> 	times 128 db 0	;boot file name
  4995 00003E09 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  4996                              <2> .dhcp.option.type:
  4997 00003E0D 350103              <2> 	db 53,1,3	;DHCP Request
  4998 00003E10 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  4999 00003E16 3D07                <2> 	db 61,7 ;client id(mac)
  5000 00003E18 01                  <2> 	db 1	;Type=Ethernet
  5001 00003E19 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5002 00003E1F 0C08                <2> 	db 12,8 ;host name
  5003 00003E21 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5004 00003E29 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5005 00003E2F FF                  <2> 	db 0xFF	;end DHCP options
  5006                              <2> .dhcp.end:
  5007                              <2> .udp.end:
  5008                              <2> 	
  5009                              <1> %endif
  5010                              <1> %include 'source/programs/dos.asm'
  5011 00003E30 FF2C646F7300        <2> db 255,44,"dos",0
  5012                              <2> dosrunner:
  5013 00003E36 8925[7EB50000]      <2> 	mov [previousstack], esp
  5014 00003E3C 8B3D[7A2C0000]      <2> 	mov edi, [currentcommandloc]
  5015 00003E42 81C704000000        <2> 	add edi, 4
  5016 00003E48 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5017 00003E4D E822250000          <2> 	call loadfile
  5018 00003E52 8B3D[7A2C0000]      <2> 	mov edi, [currentcommandloc]
  5019 00003E58 81C704000000        <2> 	add edi, 4
  5020 00003E5E 81FA94010000        <2> 	cmp edx, 404
  5021 00003E64 0F845E000000        <2> 	je near .noprogfound
  5022 00003E6A BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5023 00003E6F 31C9                <2> 	xor ecx, ecx
  5024                              <2> .findparams:
  5025 00003E71 47                  <2> 	inc edi
  5026 00003E72 8A07                <2> 	mov al, [edi]
  5027 00003E74 3C20                <2> 	cmp al, " "
  5028 00003E76 75F9                <2> 	jne .findparams
  5029                              <2> .copyparams:
  5030 00003E78 8A07                <2> 	mov al, [edi]
  5031 00003E7A 8803                <2> 	mov [ebx], al
  5032 00003E7C 43                  <2> 	inc ebx
  5033 00003E7D 47                  <2> 	inc edi
  5034 00003E7E 41                  <2> 	inc ecx
  5035 00003E7F 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5036 00003E85 7304                <2> 	jae .nomoreparams
  5037 00003E87 3C00                <2> 	cmp al, 0
  5038 00003E89 75ED                <2> 	jne .copyparams
  5039                              <2> .nomoreparams:
  5040 00003E8B 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5041 00003E91 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5042 00003E95 8ED8                <2> 	mov ds, ax
  5043 00003E97 8EC0                <2> 	mov es, ax
  5044 00003E99 8EE0                <2> 	mov fs, ax
  5045 00003E9B 8EE8                <2> 	mov gs, ax
  5046 00003E9D 31C0                <2> 	xor eax, eax
  5047 00003E9F 31DB                <2> 	xor ebx, ebx
  5048 00003EA1 31C9                <2> 	xor ecx, ecx
  5049 00003EA3 31D2                <2> 	xor edx, edx
  5050 00003EA5 31FF                <2> 	xor edi, edi
  5051 00003EA7 31F6                <2> 	xor esi, esi
  5052 00003EA9 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5053 00003EB0 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5054 00003EB4 6689DA              <2> 	mov dx, bx
  5055 00003EB7 8EC3                <2> 	mov es, bx
  5056 00003EB9 8EE3                <2> 	mov fs, bx
  5057 00003EBB 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5058 00003EBF 8EEB                <2> 	mov gs, bx
  5059 00003EC1 8B25[7EB50000]      <2> 	mov esp, [previousstack]
  5060 00003EC7 C3                  <2> 	ret
  5061                              <2> .noprogfound:
  5062 00003EC8 BE[258D0000]        <2> 	mov esi, notfound1
  5063 00003ECD E84DDEFFFF          <2> 	call print
  5064 00003ED2 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  5065 00003ED8 81C604000000        <2> 	add esi, 4
  5066 00003EDE E83CDEFFFF          <2> 	call print
  5067 00003EE3 BE[2D8D0000]        <2> 	mov esi, notfound2
  5068 00003EE8 E832DEFFFF          <2> 	call print
  5069 00003EED C3                  <2> 	ret
  5070                              <2> 	
  5071                              <1> %include 'source/programs/dump.asm'
  5072 00003EEE FF2C64756D7000      <2> db 255,44,"dump",0
  5073 00003EF5 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  5074 00003EFB 81C605000000        <2> 	add esi, 5
  5075 00003F01 31C9                <2> 	xor ecx, ecx
  5076 00003F03 66B83078            <2> 	mov ax, "0x"
  5077 00003F07 663906              <2> 	cmp [esi], ax
  5078 00003F0A 740A                <2> 	je dumphexin
  5079 00003F0C E83CF1FFFF          <2> 	call cnvrttxt
  5080 00003F11 E910000000          <2> 	jmp dumphexnow
  5081                              <2> dumphexin:
  5082 00003F16 81C602000000        <2> 	add esi, 2
  5083 00003F1C E8E3F0FFFF          <2> 	call cnvrthextxt
  5084 00003F21 E900000000          <2> 	jmp dumphexnow
  5085                              <2> dumphexnow:
  5086 00003F26 89CF                <2> 	mov edi, ecx
  5087 00003F28 89FE                <2> 	mov esi, edi
  5088 00003F2A 81C680030000        <2> 	add esi, 896
  5089                              <2> dumphexloop:
  5090 00003F30 8B0F                <2> 	mov ecx, [edi]
  5091 00003F32 C605[8C2E0000]05    <2> 	mov byte [firsthexshown],5
  5092 00003F39 E863EFFFFF          <2> 	call showhex
  5093 00003F3E 81C704000000        <2> 	add edi, 4
  5094 00003F44 39F7                <2> 	cmp edi, esi
  5095 00003F46 72E8                <2> 	jb dumphexloop
  5096 00003F48 E85FE6FFFF          <2> 	call termcopy
  5097 00003F4D C3                  <2> 	ret 
  5098                              <1> %include 'source/programs/echo.asm'
  5099                              <2> 
  5100 00003F4E FF2C6563686F00      <2> db 255,44,"echo",0
  5101                              <2> 	echoprog:
  5102 00003F55 8B35[7A2C0000]      <2> 		mov esi, [currentcommandloc]
  5103 00003F5B 81C605000000        <2> 		add esi, 5
  5104 00003F61 8A06                <2> 		mov al, [esi]
  5105 00003F63 E8B7DDFFFF          <2> 		call print
  5106 00003F68 BE[5E8D0000]        <2> 		mov esi, line
  5107 00003F6D E8ADDDFFFF          <2> 		call print
  5108 00003F72 C3                  <2> 		ret
  5109 00003F73 BB[FEB70000]        <2> 	echovr:	mov ebx, variables
  5110 00003F78 BF06000000          <2> 		mov edi, 6
  5111 00003F7D E83C000000          <2> 		call nxtvrech
  5112 00003F82 E954000000          <2> 		jmp prntvr2
  5113 00003F87 B13D                <2> 	echvar:	mov cl, '='
  5114 00003F89 43                  <2> 		inc ebx
  5115 00003F8A 8A03                <2> 		mov al, [ebx]
  5116 00003F8C 3C00                <2> 		cmp al, 0
  5117 00003F8E 742E                <2> 		je nxtvrech
  5118 00003F90 3C3D                <2> 		cmp al, '='
  5119 00003F92 7422                <2> 		je nxtvrechb1
  5120 00003F94 8B35[7A2C0000]      <2> 		mov esi, [currentcommandloc]
  5121 00003F9A 01FE                <2> 		add esi, edi
  5122 00003F9C E818EDFFFF          <2> 		call cndtest
  5123 00003FA1 3C02                <2> 		cmp al, 2
  5124 00003FA3 7432                <2> 		je prntvr
  5125 00003FA5 3C01                <2> 		cmp al, 1
  5126 00003FA7 742E                <2> 		je prntvr
  5127 00003FA9 8B35[7A2C0000]      <2> 		mov esi, [currentcommandloc]
  5128 00003FAF 01FE                <2> 		add esi, edi
  5129 00003FB1 E908000000          <2> 		jmp nxtvrech
  5130                              <2> 	nxtvrechb1:
  5131 00003FB6 81EB02000000        <2> 		sub ebx, 2
  5132 00003FBC EBC9                <2> 		jmp echvar
  5133 00003FBE 8A03                <2> 	nxtvrech: mov al, [ebx]
  5134 00003FC0 3C05                <2> 		cmp al, 5
  5135 00003FC2 740A                <2> 		je nxtvrec2
  5136 00003FC4 43                  <2> 		inc ebx
  5137 00003FC5 81FB[FEC70000]      <2> 		cmp ebx, varend
  5138 00003FCB 72F1                <2> 		jb nxtvrech
  5139 00003FCD C3                  <2> 		ret
  5140 00003FCE 43                  <2> 	nxtvrec2: inc ebx
  5141 00003FCF 8A03                <2> 		mov al, [ebx]
  5142 00003FD1 3C04                <2> 		cmp al, 4
  5143 00003FD3 74B2                <2> 		je echvar
  5144 00003FD5 EBE7                <2> 		jmp nxtvrech
  5145 00003FD7 43                  <2> 	prntvr: inc ebx
  5146 00003FD8 89DE                <2> 		mov esi, ebx
  5147 00003FDA C3                  <2> 		ret
  5148 00003FDB E83FDDFFFF          <2> 	prntvr2: call print
  5149 00003FE0 BE[5E8D0000]        <2> 		mov esi, line
  5150 00003FE5 E835DDFFFF          <2> 		call print
  5151 00003FEA C3                  <2> 		ret 
  5152                              <1> %include 'source/programs/else.asm'
  5153 00003FEB FF2C656C736500      <2> 	db 255,44,"else",0
  5154 00003FF2 31C0                <2> elsecmd:	xor eax, eax
  5155 00003FF4 3805[F8B70000]      <2> 	cmp [BATCHISON], al
  5156 00003FFA 0F8478F7FFFF        <2> 	je near notbatch
  5157 00004000 A0[8FB70000]        <2> 	mov al, [IFON]
  5158 00004005 BE[90B70000]        <2> 	mov esi, IFTRUE
  5159 0000400A 01C6                <2> 	add esi, eax
  5160 0000400C 8A06                <2> 	mov al, [esi]
  5161 0000400E 3401                <2> 	xor al, 1
  5162 00004010 8806                <2> 	mov [esi], al
  5163 00004012 C3                  <2> 	ret 
  5164                              <1> %include 'source/programs/exit.asm'
  5165 00004013 FF2C6578697400      <2> db 255,44,"exit",0
  5166 0000401A 803D[8EB70000]01    <2> 	cmp byte [ranboot], 1
  5167 00004021 0F8434E9FFFF        <2> 	je near returnfromexp
  5168 00004027 E91CE8FFFF          <2> 	jmp nobootfile
  5169                              <1> %include 'source/programs/fi.asm'
  5170 0000402C FF2C666900          <2> 	db 255,44,"fi",0
  5171 00004031 30C0                <2> 	xor al, al
  5172 00004033 3805[F8B70000]      <2> 	cmp [BATCHISON], al
  5173 00004039 0F8439F7FFFF        <2> 	je near notbatch
  5174 0000403F B001                <2> fi:	mov al, 1
  5175 00004041 2805[8FB70000]      <2> 	sub [IFON],al
  5176 00004047 C3                  <2> 	ret 
  5177                              <1> %ifdef gui.included
  5178                              <1> 	%include 'source/programs/gui.asm'
  5179 00004048 FF2C67756900        <2> db 255,44,"gui",0
  5180                              <2> guiswitcher:
  5181 0000404E 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  5182 00004054 81C604000000        <2> 	add esi, 4
  5183 0000405A 31C9                <2> 	xor ecx, ecx
  5184 0000405C 803E00              <2> 	cmp byte [esi], 0
  5185 0000405F 740A                <2> 	je .nomodepref
  5186 00004061 E89EEFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5187 00004066 E907000000          <2> 	jmp .modepref
  5188                              <2> .nomodepref:
  5189 0000406B 51                  <2> 	push ecx
  5190 0000406C E814DDFFFF          <2> 	call clear
  5191 00004071 59                  <2> 	pop ecx
  5192                              <2> .modepref:
  5193 00004072 66BB[3951]          <2> 	mov bx, guiswitch
  5194 00004076 66891D[EE0C0000]    <2> 	mov [realmodeptr], bx
  5195 0000407D BB[8D400000]        <2> 	mov ebx, guiswitchret
  5196 00004082 891D[EA0C0000]      <2> 	mov [realmodereturn], ebx
  5197 00004088 E946CBFFFF          <2> 	jmp realmode
  5198                              <2> guiswitchret:
  5199 0000408D 65803D[389F0000]01  <2> 	cmp byte [gs:guion], 1
  5200 00004095 7401                <2> 	je .cont
  5201 00004097 C3                  <2> 	ret
  5202                              <2> .cont:
  5203 00004098 BF[17530000]        <2> 	mov edi, VBEMODEBLOCK
  5204                              <2> .loop:
  5205 0000409D 658B07              <2> 	mov eax, [gs:edi]
  5206 000040A0 8907                <2> 	mov [edi], eax
  5207 000040A2 47                  <2> 	inc edi
  5208 000040A3 81FF[1B560000]      <2> 	cmp edi, VBEEND
  5209 000040A9 72F2                <2> 	jb .loop
  5210 000040AB A1[3F550000]        <2> 	mov eax, [physbaseptr]
  5211 000040B0 2D00001000          <2> 	sub eax, 0x100000
  5212 000040B5 A3[3F550000]        <2> 	mov [physbaseptr], eax
  5213 000040BA C605[61220000]00    <2> 	mov byte [termguion], 0
  5214 000040C1 BE[13D00000]        <2> 	mov esi, graphicstable
  5215 000040C6 30C0                <2> 	xor al, al
  5216                              <2> .clear:
  5217 000040C8 8806                <2> 	mov [esi], al
  5218 000040CA 46                  <2> 	inc esi
  5219 000040CB 81FE[13D20000]      <2> 	cmp esi, graphicstableend
  5220 000040D1 72F5                <2> 	jb .clear
  5221 000040D3 E8F42A0000          <2> 	call guisetup
  5222                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5223 000040D8 668B15[29550000]    <2> 	mov dx, [resolutionx]
  5224 000040DF 668B0D[2B550000]    <2> 	mov cx, [resolutiony]
  5225 000040E6 6689D3              <2> 	mov bx, dx
  5226 000040E9 6689C8              <2> 	mov ax, cx
  5227 000040EC 66D1EB              <2> 	shr bx, 1
  5228 000040EF 66D1E8              <2> 	shr ax, 1
  5229 000040F2 6689DA              <2> 	mov dx, bx
  5230 000040F5 66D1EA              <2> 	shr dx, 1
  5231 000040F8 6689C1              <2> 	mov cx, ax
  5232 000040FB 66D1E9              <2> 	shr cx, 1
  5233 000040FE 6601D3              <2> 	add bx, dx
  5234 00004101 6601C8              <2> 	add ax, cx
  5235 00004104 66D1E9              <2> 	shr cx, 1
  5236 00004107 66C1EB03            <2> 	shr bx, 3
  5237 0000410B 66C1E303            <2> 	shl bx, 3
  5238 0000410F 66C1E804            <2> 	shr ax, 4
  5239 00004113 66C1E004            <2> 	shl ax, 4
  5240 00004117 66891D[D96D0000]    <2> 	mov [termwindow], bx
  5241 0000411E 66A3[DB6D0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5242 00004124 BE[D96D0000]        <2> 	mov esi, termwindow
  5243 00004129 31DB                <2> 	xor ebx, ebx
  5244 0000412B 6631C0              <2> 	xor ax, ax
  5245 0000412E E8AF310000          <2> 	call showwindow
  5246 00004133 E8E4140000          <2> 	call cursorgui
  5247 00004138 E848DCFFFF          <2> 	call clear
  5248 0000413D C3                  <2> 	ret
  5249                              <2> 	
  5250                              <1> %endif
  5251                              <1> %include 'source/programs/help.asm'
  5252 0000413E FF2C68656C7000      <2> db 255,44,"help",0
  5253                              <2> lscmd:	
  5254 00004145 B00D                <2> 		mov al, 13
  5255 00004147 E817E1FFFF          <2> 		call prcharq
  5256 0000414C BE[D0300000]        <2> 		mov esi, progstart
  5257 00004151 BB[39510000]        <2> 		mov ebx, progend
  5258 00004156 BE[7EB10000]        <2> dir:	mov esi, fileindex
  5259 0000415B 8A06                <2> 	dirnxt:	mov al, [esi]
  5260 0000415D 30E4                <2> 		xor ah, ah
  5261 0000415F 3CFF                <2> 		cmp al, 255
  5262 00004161 7415                <2> 		je dirfnd
  5263 00004163 46                  <2> 		inc esi
  5264 00004164 81FE[7EB50000]      <2> 		cmp esi,  fileindexend
  5265 0000416A 7339                <2> 		jae dirdn
  5266 0000416C EBED                <2> 		jmp dirnxt
  5267                              <2> 	dirfnd3:
  5268 0000416E 46                  <2> 		inc esi
  5269 0000416F 81FE[7EB50000]      <2> 		cmp esi, fileindexend
  5270 00004175 76E4                <2> 		jbe dirnxt
  5271 00004177 4E                  <2> 		dec esi
  5272 00004178 46                  <2> 	dirfnd:	inc esi
  5273 00004179 8A06                <2> 		mov al, [esi]
  5274 0000417B 30E4                <2> 		xor ah, ah
  5275 0000417D 3C2C                <2> 		cmp al, 44
  5276 0000417F 740B                <2> 		je dirfnd2
  5277 00004181 46                  <2> 		inc esi
  5278 00004182 81FE[7EB50000]      <2> 		cmp esi,  fileindexend
  5279 00004188 731B                <2> 		jae dirdn
  5280 0000418A EBCF                <2> 		jmp dirnxt
  5281 0000418C 46                  <2> 	dirfnd2: inc esi
  5282 0000418D E87BDBFFFF          <2> 		call printquiet
  5283 00004192 56                  <2> 		push esi
  5284 00004193 B009                <2> 		mov al, 9
  5285 00004195 E8C9E0FFFF          <2> 		call prcharq
  5286 0000419A 5E                  <2> 		pop esi
  5287 0000419B 81FE[7EB50000]      <2> 		cmp esi,  fileindexend
  5288 000041A1 7302                <2> 		jae dirdn
  5289 000041A3 EBB6                <2> 		jmp dirnxt
  5290 000041A5 BE[5E8D0000]        <2> 	dirdn:	mov esi, line
  5291 000041AA E870DBFFFF          <2> 			call print
  5292 000041AF C3                  <2> 			ret
  5293 000041B0 00                  <2> currentdir db 0
  5294                              <1> %include 'source/programs/if.asm'
  5295 000041B1 FF2C696600          <2> 	db 255,44,"if",0
  5296 000041B6 30C0                <2> ifcmd:	xor al, al
  5297 000041B8 3805[F8B70000]      <2> 	cmp [BATCHISON], al
  5298 000041BE 0F84B4F5FFFF        <2> 	je near notbatch
  5299 000041C4 8B1D[7A2C0000]      <2> 	mov ebx, [currentcommandloc]
  5300 000041CA 81C303000000        <2> 	add ebx, 3
  5301 000041D0 89DE                <2> 	mov esi, ebx
  5302 000041D2 8A06                <2> chkeqsn: mov al, [esi]
  5303 000041D4 3C00                <2> 	cmp al, 0
  5304 000041D6 0F849CF5FFFF        <2> 	je near notbatch
  5305 000041DC 3C3D                <2> 	cmp al, '='
  5306 000041DE 0F8403000000        <2> 	je near chkeqdn
  5307 000041E4 46                  <2> 	inc esi
  5308 000041E5 EBEB                <2> 	jmp chkeqsn
  5309 000041E7 B000                <2> chkeqdn: mov al, 0 
  5310 000041E9 8806                <2> 	mov [esi], al
  5311 000041EB 46                  <2> 	inc esi
  5312 000041EC E88DEAFFFF          <2> 	call tester
  5313 000041F1 3C01                <2> 	cmp al, 1
  5314 000041F3 0F8405000000        <2> 	je near trueif
  5315 000041F9 E91C000000          <2> 	jmp falseif
  5316 000041FE 31C0                <2> trueif:	xor eax, eax
  5317 00004200 A0[8FB70000]        <2> 	mov al, [IFON]
  5318 00004205 FEC0                <2> 	inc al
  5319 00004207 A2[8FB70000]        <2> 	mov [IFON], al
  5320 0000420C 30E4                <2> 	xor ah, ah
  5321 0000420E BE[90B70000]        <2> 	mov esi, IFTRUE
  5322 00004213 01C6                <2> 	add esi, eax
  5323 00004215 B401                <2> 	mov ah, 1
  5324 00004217 8826                <2> 	mov [esi], ah
  5325 00004219 C3                  <2> 	ret 
  5326 0000421A 31C0                <2> falseif: xor eax, eax
  5327 0000421C A0[8FB70000]        <2> 	mov al, [IFON]
  5328 00004221 FEC0                <2> 	inc al
  5329 00004223 A2[8FB70000]        <2> 	mov [IFON], al
  5330 00004228 30E4                <2> 	xor ah, ah
  5331 0000422A BE[90B70000]        <2> 	mov esi, IFTRUE
  5332 0000422F 01C6                <2> 	add esi, eax
  5333 00004231 30E4                <2> 	xor ah, ah
  5334 00004233 8826                <2> 	mov [esi], ah
  5335 00004235 C3                  <2> 	ret 
  5336                              <1> %ifdef network.included
  5337                              <1> 	%include 'source/programs/ipconfig.asm'
  5338 00004236 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5339 0000423F 6700                <2>
  5340                              <2> ifconfig:
  5341 00004241 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  5342 00004247 81C609000000        <2> 	add esi, 9
  5343 0000424D 803E00              <2> 	cmp byte [esi], 0
  5344 00004250 740B                <2> 	je .noip
  5345 00004252 E8D3490000          <2> 	call strtoip
  5346 00004257 890D[138D0000]      <2> 	mov [sysip], ecx
  5347                              <2> .noip:
  5348                              <2> %ifdef ne2000.included
  5349 0000425D 803D[1D890000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5350 00004264 751E                <2> 	jne .none2000
  5351 00004266 BE[1E890000]        <2> 	mov esi, ne2000.name
  5352 0000426B E8AFDAFFFF          <2> 	call print
  5353 00004270 B9[40890000]        <2> 	mov ecx, ne2000.mac
  5354 00004275 E8324A0000          <2> 	call showmac
  5355 0000427A BE[5E8D0000]        <2> 	mov esi, line
  5356 0000427F E89BDAFFFF          <2> 	call print
  5357                              <2> .none2000:
  5358                              <2> %endif
  5359                              <2> %ifdef rtl8139.included
  5360 00004284 803D[6A820000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5361 0000428B 751E                <2> 	jne .nortl8139
  5362 0000428D BE[71820000]        <2> 	mov esi, rtl8139.name
  5363 00004292 E888DAFFFF          <2> 	call print
  5364 00004297 B9[6B820000]        <2> 	mov ecx, rtl8139.mac
  5365 0000429C E80B4A0000          <2> 	call showmac
  5366 000042A1 BE[5E8D0000]        <2> 	mov esi, line
  5367 000042A6 E874DAFFFF          <2> 	call print
  5368                              <2> .nortl8139:
  5369                              <2> %endif
  5370                              <2> %ifdef rtl8169.included
  5371 000042AB 803D[72840000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5372 000042B2 751E                <2> 	jne .nortl8169
  5373 000042B4 BE[79840000]        <2> 	mov esi, rtl8169.name
  5374 000042B9 E861DAFFFF          <2> 	call print
  5375 000042BE B9[73840000]        <2> 	mov ecx, rtl8169.mac
  5376 000042C3 E8E4490000          <2> 	call showmac
  5377 000042C8 BE[5E8D0000]        <2> 	mov esi, line
  5378 000042CD E84DDAFFFF          <2> 	call print
  5379                              <2> .nortl8169:
  5380                              <2> %endif
  5381                              <2> %ifdef i8254x.included
  5382 000042D2 803D[398B0000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5383 000042D9 751E                <2> 	jne .noi8254x
  5384 000042DB BE[408B0000]        <2> 	mov esi, i8254x.name
  5385 000042E0 E83ADAFFFF          <2> 	call print
  5386 000042E5 B9[3A8B0000]        <2> 	mov ecx, i8254x.mac
  5387 000042EA E8BD490000          <2> 	call showmac
  5388 000042EF BE[5E8D0000]        <2> 	mov esi, line
  5389 000042F4 E826DAFFFF          <2> 	call print
  5390                              <2> .noi8254x:
  5391                              <2> %endif
  5392 000042F9 8B0D[138D0000]      <2> 	mov ecx, [sysip]
  5393 000042FF E86C490000          <2> 	call showip
  5394 00004304 BE[5E8D0000]        <2> 	mov esi, line
  5395 00004309 E811DAFFFF          <2> 	call print
  5396 0000430E C3                  <2> 	ret
  5397                              <2> 	
  5398                              <1> %endif
  5399                              <1> %include 'source/programs/keycode.asm'
  5400 0000430F FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5401 00004318 00                  <2>
  5402                              <2> keycode:
  5403 00004319 C605[3D220000]00    <2> 	mov byte [trans], 0
  5404 00004320 C605[13650000]00    <2> 	mov byte [threadson], 0
  5405                              <2> %ifdef io.serial
  5406                              <2> .noserial:
  5407                              <2> 	hlt
  5408                              <2> 	mov dx, [serial.address]
  5409                              <2> 	in al, dx
  5410                              <2> 	cmp al, 0
  5411                              <2> 	je .noserial
  5412                              <2> 	mov cl, al
  5413                              <2> 	call showhexsmall
  5414                              <2> 	cmp al, 0x1B
  5415                              <2> 	jne .noserial
  5416                              <2> 	in al, dx
  5417                              <2> 	mov cl, al
  5418                              <2> 	call showhexsmall
  5419                              <2> 	cmp cl, 0x5B
  5420                              <2> 	je .noserial
  5421                              <2> 	ret
  5422                              <2> %else
  5423 00004327 E8FE180000          <2> 	call getkey
  5424 0000432C 31C0                <2> 	xor eax, eax
  5425 0000432E 31C9                <2> 	xor ecx, ecx
  5426 00004330 8A0D[0A5C0000]      <2> 	mov cl, [specialkey]
  5427 00004336 80F900              <2> 	cmp cl, 0
  5428 00004339 0F8405000000        <2> 	je near .nospecialkeycode
  5429 0000433F E849EBFFFF          <2> 	call showhexsmall
  5430                              <2> .nospecialkeycode:
  5431 00004344 66A1[3B220000]      <2> 	mov ax, [lastkey]
  5432 0000434A 88E1                <2> 	mov cl, ah
  5433 0000434C E83CEBFFFF          <2> 	call showhexsmall
  5434 00004351 80FC01              <2> 	cmp ah, 1
  5435 00004354 75C3                <2> 	jne keycode
  5436 00004356 C3                  <2> 	ret
  5437                              <2> %endif
  5438                              <1> %ifdef gui.included
  5439                              <1> 	%include 'source/programs/line.asm'
  5440 00004357 FF2C6C696E6500      <2> db 255,44,"line",0
  5441                              <2> linetester:
  5442 0000435E 803D[389F0000]00    <2> 	cmp byte [guion], 0
  5443 00004365 0F841B000000        <2> 	je near .done
  5444 0000436B 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5445 00004372 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode
  5446 00004377 E868000000          <2> 	call .circletest
  5447 0000437C BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines
  5448 00004381 E801000000          <2> 	call .linetest
  5449                              <2> .done:
  5450 00004386 C3                  <2> 	ret
  5451                              <2> 
  5452                              <2> .linetest:
  5453 00004387 53                  <2> 	push ebx
  5454 00004388 E8D6000000          <2> 	call .stime
  5455 0000438D 5B                  <2> 	pop ebx
  5456 0000438E 31FF                <2> 	xor edi, edi
  5457                              <2> .ltlp:
  5458 00004390 53                  <2> 	push ebx
  5459 00004391 E81C010000          <2> 	call .st
  5460 00004396 66F7D6              <2> 	not si
  5461 00004399 E814010000          <2> 	call .st
  5462 0000439E 5B                  <2> 	pop ebx
  5463 0000439F 66F7D6              <2> 	not si
  5464 000043A2 660335[61020000]    <2> 	add si, [timenanoseconds]
  5465 000043A9 4B                  <2> 	dec ebx
  5466 000043AA 81FB00000000        <2> 	cmp ebx, 0
  5467 000043B0 77DE                <2> 	ja .ltlp
  5468 000043B2 E8C4000000          <2> 	call .etime
  5469 000043B7 53                  <2> 	push ebx	
  5470 000043B8 57                  <2> 	push edi
  5471 000043B9 E8B9260000          <2> 	call guiclear
  5472 000043BE E839270000          <2> 	call reloadallgraphics
  5473 000043C3 59                  <2> 	pop ecx
  5474 000043C4 E8A2EBFFFF          <2> 	call showdec
  5475 000043C9 BE[F4440000]        <2> 	mov esi, .msg
  5476 000043CE E84CD9FFFF          <2> 	call print
  5477 000043D3 59                  <2> 	pop ecx
  5478 000043D4 E892EBFFFF          <2> 	call showdec
  5479 000043D9 BE[20450000]        <2> 	mov esi, .msgtime
  5480 000043DE E83CD9FFFF          <2> 	call print
  5481 000043E3 C3                  <2> 	ret
  5482                              <2> 	
  5483                              <2> .circletest:
  5484 000043E4 53                  <2> 	push ebx
  5485 000043E5 E879000000          <2> 	call .stime
  5486 000043EA 5B                  <2> 	pop ebx
  5487 000043EB 31FF                <2> 	xor edi, edi
  5488                              <2> .ctlp:
  5489 000043ED 53                  <2> 	push ebx
  5490 000043EE 668B0D[2B550000]    <2> 	mov cx, [resolutiony]
  5491 000043F5 66D1E9              <2> 	shr cx, 1
  5492 000043F8 668B15[29550000]    <2> 	mov dx, [resolutionx]
  5493 000043FF 66D1EA              <2> 	shr dx, 1
  5494 00004402 6689C8              <2> 	mov ax, cx
  5495                              <2> .circle:
  5496 00004405 60                  <2> 	pusha
  5497 00004406 E8FF210000          <2> 	call drawcircle
  5498 0000440B 61                  <2> 	popa
  5499 0000440C 6648                <2> 	dec ax
  5500 0000440E 47                  <2> 	inc edi
  5501 0000440F 663D0100            <2> 	cmp ax, 1
  5502 00004413 77F0                <2> 	ja .circle
  5503 00004415 66F7D6              <2> 	not si
  5504                              <2> .circle2:
  5505 00004418 60                  <2> 	pusha
  5506 00004419 E8EC210000          <2> 	call drawcircle
  5507 0000441E 61                  <2> 	popa
  5508 0000441F 47                  <2> 	inc edi
  5509 00004420 6640                <2> 	inc ax
  5510 00004422 6639C8              <2> 	cmp ax, cx
  5511 00004425 76F1                <2> 	jbe .circle2
  5512 00004427 5B                  <2> 	pop ebx
  5513 00004428 66F7D6              <2> 	not si
  5514 0000442B 660335[61020000]    <2> 	add si, [timenanoseconds]
  5515 00004432 4B                  <2> 	dec ebx
  5516 00004433 81FB00000000        <2> 	cmp ebx, 0
  5517 00004439 77B2                <2> 	ja .ctlp
  5518 0000443B E83B000000          <2> 	call .etime
  5519 00004440 53                  <2> 	push ebx
  5520 00004441 57                  <2> 	push edi
  5521 00004442 59                  <2> 	pop ecx
  5522 00004443 E823EBFFFF          <2> 	call showdec
  5523 00004448 BE[09450000]        <2> 	mov esi, .msgcircle
  5524 0000444D E8CDD8FFFF          <2> 	call print
  5525 00004452 59                  <2> 	pop ecx
  5526 00004453 E813EBFFFF          <2> 	call showdec
  5527 00004458 BE[20450000]        <2> 	mov esi, .msgtime
  5528 0000445D E8BDD8FFFF          <2> 	call print
  5529 00004462 C3                  <2> 	ret
  5530                              <2> 	
  5531                              <2> .stime:
  5532 00004463 F4                  <2> 	hlt
  5533 00004464 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5534 00004469 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5535 0000446F A3[2F450000]        <2> 	mov [.time], eax
  5536 00004474 891D[33450000]      <2> 	mov [.time + 4], ebx
  5537 0000447A C3                  <2> 	ret
  5538                              <2> 	
  5539                              <2> .etime:
  5540 0000447B A1[5D020000]        <2> 	mov eax, [timeseconds]
  5541 00004480 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5542 00004486 8B0D[2F450000]      <2> 	mov ecx, [.time]
  5543 0000448C 8B15[33450000]      <2> 	mov edx, [.time + 4]
  5544 00004492 C1EA0A              <2> 	shr edx, 10
  5545 00004495 C1EB0A              <2> 	shr ebx, 10
  5546 00004498 29C8                <2> 	sub eax, ecx
  5547 0000449A 3D00000000          <2> 	cmp eax, 0
  5548 0000449F 740E                <2> 	je .notclp
  5549                              <2> .tclp:
  5550 000044A1 81C340420F00        <2> 	add ebx, 1000000
  5551 000044A7 48                  <2> 	dec eax
  5552 000044A8 3D00000000          <2> 	cmp eax, 0
  5553 000044AD 75F2                <2> 	jne .tclp
  5554                              <2> .notclp:
  5555 000044AF 29D3                <2> 	sub ebx, edx
  5556 000044B1 C3                  <2> 	ret
  5557                              <2> 	
  5558                              <2> .st:
  5559 000044B2 6631C0              <2> 	xor ax, ax
  5560 000044B5 6631DB              <2> 	xor bx, bx
  5561 000044B8 668B0D[2B550000]    <2> 	mov cx, [resolutiony]
  5562 000044BF 668B15[29550000]    <2> 	mov dx, [resolutionx]
  5563                              <2> .lp:
  5564 000044C6 60                  <2> 	pusha
  5565 000044C7 E87F240000          <2> 	call drawline
  5566 000044CC 61                  <2> 	popa
  5567                              <2> .noswitch:
  5568 000044CD 47                  <2> 	inc edi
  5569 000044CE 6643                <2> 	inc bx
  5570 000044D0 664A                <2> 	dec dx
  5571 000044D2 6681FB0000          <2> 	cmp bx, 0
  5572 000044D7 74ED                <2> 	je .lp
  5573 000044D9 6681FA0000          <2> 	cmp dx, 0
  5574 000044DE 75E6                <2> 	jne .lp
  5575                              <2> .lp2:
  5576 000044E0 60                  <2> 	pusha
  5577 000044E1 E865240000          <2> 	call drawline
  5578 000044E6 61                  <2> 	popa
  5579 000044E7 47                  <2> 	inc edi
  5580 000044E8 6640                <2> 	inc ax
  5581 000044EA 6649                <2> 	dec cx
  5582 000044EC 6681F90000          <2> 	cmp cx, 0
  5583 000044F1 75ED                <2> 	jne .lp2
  5584 000044F3 C3                  <2> 	ret
  5585                              <2> 	
  5586 000044F4 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5587 000044FD 6520647261776E2069- <2>
  5588 00004506 6E2000              <2>
  5589 00004509 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5590 00004512 65726520647261776E- <2>
  5591 0000451B 20696E2000          <2>
  5592 00004520 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5593 00004529 6E64732E0A00        <2>
  5594 0000452F 0000000000000000    <2> .time dd 0,0	
  5595                              <1> %endif
  5596                              <1> %include 'source/programs/logout.asm'
  5597 00004537 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5598 00004540 E9BFE2FFFF          <2> 	jmp os
  5599                              <1> %include 'source/programs/loop.asm'
  5600 00004545 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5601 0000454C 803D[F9B70000]00    <2> 	cmp byte [LOOPON], 0
  5602 00004553 0F8501000000        <2> 	jne near filoop
  5603 00004559 C3                  <2> 	ret
  5604 0000455A 8B35[FAB70000]      <2> filoop: mov esi, [LOOPPOS]
  5605 00004560 FE0D[8FB70000]      <2> 	dec byte [IFON]
  5606 00004566 C605[F9B70000]00    <2> 	mov byte [LOOPON], 0
  5607 0000456D 8935[F4B70000]      <2> 	mov [BATCHPOS], esi
  5608 00004573 8935[A0360000]      <2> 	mov [batchedi], esi
  5609 00004579 C3                  <2> 	ret 
  5610                              <1> %include 'source/programs/ls.asm'
  5611 0000457A FF2C6C7300          <2> db 255,44,"ls",0
  5612 0000457F BE[839D0000]        <2> 		mov esi, diskfileindex
  5613                              <2> 	diskindexdir:
  5614 00004584 803E5F              <2> 		cmp byte [esi], '_'
  5615 00004587 7440                <2> 		je nextdiskindexdir
  5616 00004589 E87FD7FFFF          <2> 		call printquiet
  5617 0000458E 56                  <2> 		push esi
  5618 0000458F BE[E9450000]        <2> 		mov esi, disktab
  5619 00004594 E874D7FFFF          <2> 		call printquiet
  5620 00004599 5E                  <2> 		pop esi
  5621 0000459A 8B4E05              <2> 		mov ecx, [esi + 5]
  5622 0000459D C605[8C2E0000]05    <2> 		mov byte [firsthexshown], 5
  5623 000045A4 E8C2E9FFFF          <2> 		call showdec
  5624 000045A9 56                  <2> 		push esi
  5625 000045AA BE[5E8D0000]        <2> 		mov esi, line
  5626 000045AF E859D7FFFF          <2> 		call printquiet
  5627 000045B4 5E                  <2> 		pop esi
  5628 000045B5 81C609000000        <2> 		add esi, 9
  5629 000045BB 81FE[389F0000]      <2> 		cmp esi, enddiskfileindex
  5630 000045C1 72C1                <2> 		jb diskindexdir
  5631 000045C3 E8E4DFFFFF          <2> 		call termcopy
  5632 000045C8 C3                  <2> 		ret
  5633                              <2> 	nextdiskindexdir:
  5634 000045C9 46                  <2> 		inc esi
  5635 000045CA 803E00              <2> 		cmp byte [esi], 0
  5636 000045CD 75FA                <2> 		jne nextdiskindexdir
  5637 000045CF 81C609000000        <2> 		add esi, 9
  5638 000045D5 81FE[389F0000]      <2> 		cmp esi, enddiskfileindex
  5639 000045DB 72A7                <2> 		jb diskindexdir
  5640 000045DD E8CADFFFFF          <2> 		call termcopy
  5641 000045E2 C3                  <2> 		ret
  5642                              <2> 		
  5643 000045E3 4469736B2000        <2> 		diskmsg db "Disk ",0
  5644 000045E9 0D09090900          <2> 		disktab db 13,9,9,9,0
  5645                              <1> %include 'source/programs/memory.asm'
  5646 000045EE FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5647 000045F7 BE[3E9F0000]        <2> 	mov esi, memlistbuf
  5648 000045FC 31FF                <2> 	xor edi, edi
  5649 000045FE 668B3D[7EA10000]    <2> 	mov di, [memlistend]
  5650 00004605 01F7                <2> 	add edi, esi
  5651                              <2> printmemmap:
  5652 00004607 8B0E                <2> 	mov ecx, [esi]
  5653 00004609 E893E8FFFF          <2> 	call showhex
  5654 0000460E 81C608000000        <2> 	add esi, 8
  5655 00004614 8B0E                <2> 	mov ecx, [esi]
  5656 00004616 E886E8FFFF          <2> 	call showhex
  5657 0000461B 81C608000000        <2> 	add esi, 8
  5658 00004621 8B0E                <2> 	mov ecx, [esi]
  5659 00004623 E879E8FFFF          <2> 	call showhex
  5660 00004628 81C608000000        <2> 	add esi, 8
  5661 0000462E 57                  <2> 	push edi
  5662 0000462F 56                  <2> 	push esi
  5663 00004630 BE[5E8D0000]        <2> 	mov esi, line
  5664 00004635 E8E5D6FFFF          <2> 	call print
  5665 0000463A 5E                  <2> 	pop esi
  5666 0000463B 5F                  <2> 	pop edi
  5667 0000463C 39FE                <2> 	cmp esi, edi
  5668 0000463E 72C7                <2> 	jb printmemmap
  5669 00004640 C3                  <2> 	ret
  5670                              <2> 	
  5671                              <1> %include 'source/programs/pci.asm'
  5672 00004641 FF2C70636900        <2> db 255,44,"pci",0
  5673 00004647 E8F9190000          <2> 	call pcidump
  5674 0000464C C3                  <2> 	ret 
  5675                              <1> %ifdef network.included
  5676                              <1> 	%include 'source/programs/ping.asm'
  5677 0000464D FF2C70696E6700      <2> db 255,44,"ping",0
  5678                              <2> ping:
  5679 00004654 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  5680 0000465A 81C605000000        <2> 	add esi, 5
  5681 00004660 E8C5450000          <2> 	call strtoip
  5682 00004665 890D[F0460000]      <2> 	mov [.destip], ecx
  5683 0000466B E800460000          <2> 	call showip
  5684 00004670 8B0D[138D0000]      <2> 	mov ecx, [sysip]
  5685 00004676 890D[EC460000]      <2> 	mov [.sourceip]. ecx
  5686 0000467C 31C0                <2> 	xor eax, eax
  5687 0000467E 31DB                <2> 	xor ebx, ebx
  5688 00004680 66A3[EA460000]      <2> 	mov [.checksum], ax
  5689 00004686 66A3[F6460000]      <2> 	mov [.icmpchecksum], ax
  5690 0000468C BF[E0460000]        <2> 	mov edi, .header
  5691 00004691 BE[F4460000]        <2> 	mov esi, .headerend
  5692 00004696 E867450000          <2> 	call getchecksum
  5693 0000469B 66890D[EA460000]    <2> 	mov [.checksum], cx
  5694 000046A2 BF[F4460000]        <2> 	mov edi, .icmp
  5695 000046A7 BE[1C470000]        <2> 	mov esi, .packetend
  5696 000046AC E851450000          <2> 	call getchecksum
  5697 000046B1 66890D[F6460000]    <2> 	mov [.icmpchecksum], cx
  5698 000046B8 BF[D2460000]        <2> 	mov edi, .packet
  5699 000046BD BE[1C470000]        <2> 	mov esi, .packetend
  5700 000046C2 E81A450000          <2> 	call sendpacket
  5701 000046C7 BE[5E8D0000]        <2> 	mov esi, line
  5702 000046CC E84ED6FFFF          <2> 	call print
  5703 000046D1 C3                  <2> 	ret
  5704                              <2> 	
  5705                              <2> 	
  5706                              <2> 	
  5707                              <2> .packet:
  5708 000046D2 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5709 000046D8 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5710 000046DE 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5711                              <2> .header:
  5712 000046E0 45                  <2> .version	db 0x45
  5713 000046E1 00                  <2> .services	db 0
  5714 000046E2 003C                <2> .length	db 0,0x3C
  5715 000046E4 0000                <2> .id		dw 0
  5716 000046E6 00                  <2> .flags	db 0
  5717 000046E7 00                  <2> .fragment db 0
  5718 000046E8 80                  <2> .ttl	db 128
  5719 000046E9 01                  <2> .protocol db 1 ;ICMP
  5720 000046EA 0000                <2> .checksum dw 0
  5721 000046EC 00000000            <2> .sourceip dd 0
  5722 000046F0 00000000            <2> .destip dd 0
  5723                              <2> .headerend:
  5724                              <2> .icmp:
  5725 000046F4 08                  <2> .icmptype db 8 ;Ping request
  5726 000046F5 00                  <2> .icmpcode db 0
  5727 000046F6 0000                <2> .icmpchecksum dw 0
  5728 000046F8 0001                <2> .icmpid db 0,1
  5729 000046FA 0000                <2> .sequence dw 0
  5730 000046FC 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5731 00004705 6A6B6C6D6E6F707172- <2>
  5732 0000470E 737475767761626364- <2>
  5733 00004717 6566676869          <2>
  5734                              <2> .packetend:
  5735                              <1> %endif
  5736                              <1> %include 'source/programs/play.asm'
  5737 0000471C FF2C706C61796100    <2> db 255,44,"playa",0
  5738 00004724 8B3D[7A2C0000]      <2> 	mov edi, [currentcommandloc]
  5739 0000472A 81C706000000        <2> 	add edi, 6
  5740 00004730 E833000000          <2> 	call playasync
  5741 00004735 C3                  <2> 	ret
  5742 00004736 FF2C706C617900      <2> db 255,44,"play",0
  5743                              <2> play:
  5744 0000473D 8B3D[7A2C0000]      <2> 	mov edi, [currentcommandloc]
  5745 00004743 81C705000000        <2> 	add edi, 5
  5746 00004749 E81A000000          <2> 	call playasync
  5747                              <2> .waitforsound:
  5748                              <2> %ifdef sound.included
  5749 0000474E A1[F35B0000]        <2> 	mov eax, [Length0]
  5750 00004753 660B05[F75B0000]    <2> 	or ax, [Length1]
  5751                              <2> %endif
  5752 0000475A 0A05[65020000]      <2> 	or al, [soundon]
  5753 00004760 3D00000000          <2> 	cmp eax, 0
  5754 00004765 75E7                <2> 	jne .waitforsound
  5755 00004767 C3                  <2> 	ret
  5756                              <2> playasync:
  5757 00004768 BE0000C000          <2> 	mov esi, 0xC00000
  5758 0000476D E8021C0000          <2> 	call loadfile
  5759 00004772 81FA94010000        <2> 	cmp edx, 404
  5760 00004778 743F                <2> 	je nosoundfound
  5761 0000477A BB0000C000          <2> 	mov ebx, 0xC00000
  5762 0000477F 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5763 00004786 0F843F010000        <2> 	je near wave_player
  5764 0000478C 66813B534E          <2> 	cmp word [ebx], "SN"
  5765 00004791 7526                <2> 	jne nosoundfound
  5766 00004793 81C306000000        <2> 	add ebx, 6
  5767 00004799 891D[68020000]      <2> 	mov [soundpos], ebx
  5768 0000479F 035BFC              <2> 	add ebx, [ebx - 4]
  5769 000047A2 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5770 000047A8 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5771 000047B0 00                  <2>
  5772 000047B1 C605[65020000]01    <2> 	mov byte [soundon], 1
  5773 000047B8 C3                  <2> 	ret
  5774                              <2> nosoundfound:
  5775 000047B9 BE[DF470000]        <2> 	mov esi, notfoundsound
  5776 000047BE E85CD5FFFF          <2> 	call print
  5777 000047C3 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  5778 000047C9 81C605000000        <2> 	add esi, 5
  5779 000047CF E84BD5FFFF          <2> 	call print
  5780 000047D4 BE[2D8D0000]        <2> 	mov esi, notfound2
  5781 000047D9 E841D5FFFF          <2> 	call print
  5782 000047DE C3                  <2> 	ret
  5783 000047DF 706C61793A2000      <2> notfoundsound db "play: ",0
  5784                              <2> 
  5785                              <2> %ifdef sound.included
  5786                              <2> sbplay:
  5787 000047E6 BE0000C000          <2> 		mov esi, 0xC00000
  5788 000047EB 89F3                <2> 		mov ebx, esi
  5789 000047ED 81C640000000        <2> 		add esi, WAVSTART
  5790 000047F3 29F7                <2> 		sub edi, esi
  5791 000047F5 66893D[F75B0000]    <2> 		mov [Length1], di
  5792 000047FC C1EF0F              <2> 		shr edi, 15
  5793 000047FF 893D[F35B0000]      <2> 		mov [Length0], edi
  5794 00004805 8B4B18              <2> 		mov ecx, [ebx + 24]
  5795 00004808 890D[045C0000]      <2> 		mov [Freq], ecx
  5796 0000480E 31C0                <2> 		xor eax, eax
  5797 00004810 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  5798 00004815 81C240000000        <2> 		add edx, WAVSTART
  5799 0000481B 01D0                <2> 		add	eax, edx
  5800 0000481D 89C6                <2> 		mov esi, eax
  5801 0000481F 31C9                <2> 		xor ecx, ecx
  5802 00004821 31DB                <2> 		xor ebx, ebx
  5803 00004823 66891D[015C0000]    <2> 		mov [SegLoc], bx
  5804 0000482A 81C300000800        <2> 		add ebx, 0x80000
  5805 00004830 66B9FFFF            <2> 		mov cx, 0xFFFF
  5806 00004834 6681FF0000          <2> 		cmp di, 0
  5807 00004839 7520                <2> 		jne .autoinit
  5808 0000483B 668B0D[F75B0000]    <2> 		mov cx, [Length1]
  5809 00004842 C605[F25B0000]01    <2> 		mov byte [OddLength], 1
  5810 00004849 6681F90080          <2> 		cmp cx, 32768
  5811 0000484E 730B                <2> 		jae .autoinit
  5812 00004850 C605[F25B0000]00    <2> 		mov byte [OddLength], 0
  5813 00004857 66D1E1              <2> 		shl cx, 1
  5814 0000485A 47                  <2> 		inc edi
  5815                              <2> .autoinit:
  5816 0000485B 4F                  <2> 		dec edi
  5817 0000485C 893D[F35B0000]      <2> 		mov [Length0], edi
  5818 00004862 66890D[F75B0000]    <2> 		mov [Length1], cx
  5819 00004869 66D1E9              <2> 		shr cx, 1
  5820 0000486C 6641                <2> 		inc cx
  5821 0000486E 01C8                <2> 		add eax, ecx
  5822 00004870 A3[F95B0000]        <2> 		mov [NextMemLoc], eax
  5823 00004875 8935[FD5B0000]      <2> 		mov	[MemLoc], esi
  5824 0000487B E82A120000          <2> 		call DMACopy
  5825 00004880 31DB                <2> 		xor ebx, ebx
  5826 00004882 668B1D[015C0000]    <2> 		mov bx, [SegLoc]
  5827 00004889 31C9                <2> 		xor ecx, ecx
  5828 0000488B 668B0D[F75B0000]    <2> 		mov cx, [Length1]
  5829 00004892 66D1E9              <2> 		shr cx, 1
  5830 00004895 6641                <2> 		inc cx
  5831 00004897 01CB                <2> 		add ebx, ecx
  5832 00004899 66891D[015C0000]    <2> 		mov [SegLoc], bx
  5833 000048A0 81C300000800        <2> 		add ebx, 0x80000
  5834 000048A6 8B35[F95B0000]      <2> 		mov esi, [NextMemLoc]
  5835 000048AC 89F0                <2> 		mov eax, esi
  5836 000048AE 01C8                <2> 		add eax, ecx
  5837 000048B0 A3[F95B0000]        <2> 		mov [NextMemLoc], eax
  5838 000048B5 8935[FD5B0000]      <2> 		mov	[MemLoc], esi
  5839 000048BB E8EA110000          <2> 		call DMACopy
  5840 000048C0 E808120000          <2> 		call DMAPlay
  5841 000048C5 E892120000          <2> 		call PlayDSP
  5842 000048CA C3                  <2> 		ret
  5843                              <2> WAVSTART equ 64;44
  5844                              <2> wave_player:
  5845 000048CB 803D[095C0000]01    <2> 	cmp byte [SoundBlaster], 1
  5846 000048D2 0F840EFFFFFF        <2> 	je near sbplay
  5847 000048D8 BE[E3480000]        <2> 	mov esi, nosoundblaster
  5848 000048DD E83DD4FFFF          <2> 	call print
  5849 000048E2 C3                  <2> 	ret
  5850                              <2> %else
  5851                              <2> 	wave_player:
  5852                              <2> 		mov esi, nosoundblaster
  5853                              <2> 		call print
  5854                              <2> 		ret
  5855                              <2> %endif
  5856 000048E3 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5857 000048EC 426C61737465722064- <2>
  5858 000048F5 657465637465642E0A- <2>
  5859 000048FE 00                  <2>
  5860                              <1> %include 'source/programs/pwd.asm'
  5861 000048FF FF2C70776400        <2> db 255,44,"pwd",0
  5862 00004905 BE[8AB50000]        <2> 	mov esi, currentfolder
  5863 0000490A E8FED3FFFF          <2> 	call printquiet
  5864 0000490F BE[5E8D0000]        <2> 	mov esi, line
  5865 00004914 E806D4FFFF          <2> 	call print
  5866 00004919 C3                  <2> 	ret
  5867                              <2> 	
  5868                              <1> %include 'source/programs/reboot.asm'
  5869 0000491A FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5870 00004923 0F011D[2D490000]    <2> 		lidt [idtreboot]
  5871 0000492A CD00                <2> 		int 0
  5872 0000492C F4                  <2> 		hlt
  5873                              <2> 	
  5874 0000492D 0000                <2> 	idtreboot dw 0
  5875 0000492F 00000000            <2> 			  dd 0
  5876                              <2> 
  5877                              <2> 	coldboot:
  5878 00004933 66B84000            <2> 		MOV AX, 0040h
  5879 00004937 8EC0                <2> 		MOV ES, AX
  5880 00004939 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5881 00004942 00                  <2>
  5882 00004943 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5883 0000494A CF                  <2> 		IRET
  5884                              <2> 
  5885                              <2> 	warmboot:
  5886 0000494B 66B84000            <2> 		MOV AX, 0040h
  5887 0000494F 8EC0                <2> 		MOV ES, AX
  5888 00004951 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5889 0000495A 12                  <2>
  5890 0000495B EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5891 00004962 CF                  <2> 		IRET
  5892                              <2> 		
  5893                              <1> %include 'source/programs/reg.asm'
  5894 00004963 FF2C72656700        <2> db 255,44,"reg",0
  5895 00004969 CD03                <2> 	int 3
  5896 0000496B C3                  <2> 	ret 
  5897                              <1> %include 'source/programs/show.asm'
  5898 0000496C FF2C73686F7700      <2> db 255,44,"show",0
  5899 00004973 8B3D[7A2C0000]      <2> 		mov edi, [currentcommandloc]
  5900 00004979 81C705000000        <2> 		add edi, 5
  5901 0000497F BE00008000          <2> 		mov esi, 0x800000
  5902 00004984 E8EB190000          <2> 		call loadfile
  5903 00004989 81FA94010000        <2> 		cmp edx, 404
  5904 0000498F 0F8483000000        <2> 		je near filenotfound
  5905 00004995 BE00008000          <2> 		mov esi, 0x800000
  5906                              <2> %ifdef gui.included
  5907 0000499A 66813E424D          <2> 		cmp word [esi], "BM"
  5908 0000499F 7410                <2> 		je bmpfound
  5909                              <2> %endif
  5910 000049A1 E879D3FFFF          <2> 		call print
  5911 000049A6 BE[5E8D0000]        <2> 		mov esi, line
  5912 000049AB E86FD3FFFF          <2> 		call print
  5913 000049B0 C3                  <2> 		ret
  5914                              <2> %ifdef gui.included
  5915                              <2> bmpfound:
  5916 000049B1 803D[389F0000]00    <2> 		cmp byte [guion], 0
  5917 000049B8 0F8428000000        <2> 		je near noguibmp
  5918 000049BE BE00008000          <2> 		mov esi, 0x800000
  5919 000049C3 31C9                <2> 		xor ecx, ecx
  5920 000049C5 31D2                <2> 		xor edx, edx
  5921 000049C7 31C0                <2> 		xor eax, eax
  5922 000049C9 31DB                <2> 		xor ebx, ebx
  5923 000049CB E8681B0000          <2> 		call showbmp
  5924 000049D0 30C0                <2> 		xor al, al
  5925 000049D2 B405                <2> 		mov ah, 5
  5926 000049D4 CD30                <2> 		int 30h
  5927 000049D6 E89C200000          <2> 		call guiclear
  5928 000049DB E8371D0000          <2> 		call clearmousecursor
  5929 000049E0 E817210000          <2> 		call reloadallgraphics
  5930 000049E5 C3                  <2> 		ret
  5931                              <2> noguibmp:
  5932 000049E6 BE[F1490000]        <2> 		mov esi, warnguimsg
  5933 000049EB E82FD3FFFF          <2> 		call print
  5934 000049F0 C3                  <2> 		ret
  5935 000049F1 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5936 000049FA 6E6F7420626520646F- <2>
  5937 00004A03 6E6520776974686F75- <2>
  5938 00004A0C 742074686520475549- <2>
  5939 00004A15 2E0A00              <2>
  5940                              <2> %endif
  5941                              <2> 
  5942                              <2> filenotfound:
  5943 00004A18 BE[4B4A0000]        <2> 		mov esi, filenf
  5944 00004A1D E8FDD2FFFF          <2> 		call print
  5945 00004A22 8B35[7A2C0000]      <2> 		mov esi, [currentcommandloc]
  5946                              <2> findfilenotfoundzero:
  5947 00004A28 8A06                <2> 		mov al, [esi]
  5948 00004A2A 46                  <2> 		inc esi
  5949 00004A2B 3C00                <2> 		cmp al, 0
  5950 00004A2D 7411                <2> 		je nofilenamenotfound
  5951 00004A2F 81FE[FECF0000]      <2> 		cmp esi, buftxtend
  5952 00004A35 7309                <2> 		jae nofilenamenotfound
  5953 00004A37 3C20                <2> 		cmp al, " "
  5954 00004A39 75ED                <2> 		jne findfilenotfoundzero
  5955 00004A3B E8DFD2FFFF          <2> 		call print
  5956                              <2> nofilenamenotfound:
  5957 00004A40 BE[564A0000]        <2> 		mov esi, filenf2
  5958 00004A45 E8D5D2FFFF          <2> 		call print
  5959 00004A4A C3                  <2> 		ret
  5960 00004A4B 5468652066696C6520- <2> filenf db "The file ",34,0
  5961 00004A54 2200                <2>
  5962 00004A56 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5963 00004A5F 6F7420626520666F75- <2>
  5964 00004A68 6E642E0A00          <2>
  5965                              <1> %include 'source/programs/shush.asm'
  5966 00004A6D FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5967                              <2> shushprog:
  5968                              <2> %ifdef gui.included
  5969 00004A75 803D[389F0000]00    <2> 	cmp byte [guion], 0
  5970 00004A7C 0F84B9000000        <2> 	je near .noswitchsize
  5971 00004A82 8B35[7A2C0000]      <2> 	mov esi, [currentcommandloc]
  5972 00004A88 81C606000000        <2> 	add esi, 6
  5973 00004A8E 56                  <2> 	push esi
  5974 00004A8F 4E                  <2> 	dec esi
  5975                              <2> .findspace:
  5976 00004A90 46                  <2> 	inc esi
  5977 00004A91 8A06                <2> 	mov al, [esi]
  5978 00004A93 3C00                <2> 	cmp al, 0
  5979 00004A95 0F84A0000000        <2> 	je near .noswitchsize
  5980 00004A9B 3C58                <2> 	cmp al, "X"
  5981 00004A9D 7408                <2> 	je .donefind
  5982 00004A9F 3C78                <2> 	cmp al, "x"
  5983 00004AA1 7404                <2> 	je .donefind
  5984 00004AA3 3C20                <2> 	cmp al, " "
  5985 00004AA5 75E9                <2> 	jne .findspace
  5986                              <2> .donefind:
  5987 00004AA7 30C0                <2> 	xor al, al
  5988 00004AA9 8806                <2> 	mov [esi], al
  5989 00004AAB 46                  <2> 	inc esi
  5990 00004AAC 89F7                <2> 	mov edi, esi
  5991 00004AAE E89AE5FFFF          <2> 	call cnvrttxt
  5992 00004AB3 89C8                <2> 	mov eax, ecx
  5993 00004AB5 5E                  <2> 	pop esi
  5994 00004AB6 50                  <2> 	push eax
  5995 00004AB7 89F7                <2> 	mov edi, esi
  5996 00004AB9 E88FE5FFFF          <2> 	call cnvrttxt
  5997 00004ABE 89CB                <2> 	mov ebx, ecx
  5998 00004AC0 58                  <2> 	pop eax	
  5999 00004AC1 6681FB0000          <2> 	cmp bx, 0
  6000 00004AC6 0F846F000000        <2> 	je near .noswitchsize
  6001 00004ACC 663D0000            <2> 	cmp ax, 0
  6002 00004AD0 0F8465000000        <2> 	je near .noswitchsize
  6003 00004AD6 66C1E303            <2> 	shl bx, 3
  6004 00004ADA 66C1E004            <2> 	shl ax, 4
  6005 00004ADE 663B1D[29550000]    <2> 	cmp bx, [resolutionx]
  6006 00004AE5 7607                <2> 	jbe .nofixx
  6007 00004AE7 668B1D[29550000]    <2> 	mov bx, [resolutionx]
  6008                              <2> .nofixx:
  6009 00004AEE 66051000            <2> 	add ax, 16
  6010 00004AF2 663B05[2B550000]    <2> 	cmp ax, [resolutiony]
  6011 00004AF9 7606                <2> 	jbe .nofixy
  6012 00004AFB 66A1[2B550000]      <2> 	mov ax, [resolutiony]
  6013                              <2> .nofixy:
  6014 00004B01 662D1000            <2> 	sub ax, 16
  6015 00004B05 6631C9              <2> 	xor cx, cx
  6016 00004B08 6631D2              <2> 	xor dx, dx
  6017 00004B0B 66891D[D96D0000]    <2> 	mov [termwindow], bx
  6018 00004B12 66A3[DB6D0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6019 00004B18 BE[D96D0000]        <2> 	mov esi, termwindow
  6020 00004B1D 31DB                <2> 	xor ebx, ebx
  6021 00004B1F 6631C0              <2> 	xor ax, ax
  6022 00004B22 E8BB270000          <2> 	call showwindow
  6023 00004B27 E84B1F0000          <2> 	call guiclear
  6024 00004B2C E854D2FFFF          <2> 	call clear
  6025 00004B31 E8C61F0000          <2> 	call reloadallgraphics
  6026 00004B36 E8D81C0000          <2> 	call switchmousepos2
  6027                              <2> .noswitchsize:
  6028                              <2> %endif
  6029 00004B3B BE[464B0000]        <2> 	mov esi, shushmsg
  6030 00004B40 E8DAD1FFFF          <2> 	call print
  6031 00004B45 C3                  <2> 	ret
  6032 00004B46 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6033 00004B4F 6F2074686520536F6C- <2>
  6034 00004B58 6C65724F5320486172- <2>
  6035 00004B61 646C7920556E69782D- <2>
  6036 00004B6A 436F6D70617469626C- <2>
  6037 00004B73 65205368656C6C210A- <2>
  6038 00004B7C 00                  <2>
  6039                              <1> %include 'source/programs/system.asm'
  6040 00004B7D FF2C73797374656D00  <2> 	db 255,44,"system",0
  6041 00004B86 BE[964C0000]        <2> 	mov esi, kernelinfomsg
  6042 00004B8B E87DD1FFFF          <2> 	call printquiet
  6043 00004B90 B9[839D0000]        <2> 	mov ecx, osend
  6044 00004B95 E8D1E3FFFF          <2> 	call showdec
  6045 00004B9A BE[AB4C0000]        <2> 	mov esi, diskbytemsg
  6046 00004B9F E869D1FFFF          <2> 	call printquiet
  6047 00004BA4 B9[839D0000]        <2> 	mov ecx, osend
  6048 00004BA9 81C1[6CCC2900]      <2> 	add ecx, commandbufend
  6049 00004BAF 81E9[389F0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6050 00004BB5 E8B1E3FFFF          <2> 	call showdec
  6051 00004BBA BE[C24C0000]        <2> 	mov esi, membytemsg
  6052 00004BBF E849D1FFFF          <2> 	call printquiet
  6053 00004BC4 BE[254D0000]        <2> 	mov esi, endofmemmsg
  6054 00004BC9 E83FD1FFFF          <2> 	call printquiet
  6055 00004BCE B9[80003A00]        <2> 	mov ecx, bssend
  6056 00004BD3 E8C9E2FFFF          <2> 	call showhex
  6057 00004BD8 BE[DB4C0000]        <2> 	mov esi, systeminfomsg
  6058 00004BDD E82BD1FFFF          <2> 	call printquiet
  6059                              <2> getcpuspeed:
  6060 00004BE2 B8FE000000          <2> 	mov eax, 0xFE
  6061 00004BE7 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6062 00004BE9 B020                <2> 	mov al, 0x20
  6063 00004BEB E620                <2> 	out 0x20, al
  6064 00004BED F4                  <2> 	hlt
  6065 00004BEE 0F31                <2> 	rdtsc
  6066 00004BF0 89D6                <2> 	mov esi, edx
  6067 00004BF2 89C7                <2> 	mov edi, eax
  6068 00004BF4 31C0                <2> 	xor eax, eax
  6069 00004BF6 C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  6070                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6071 00004BFD 40                  <2> 	inc eax
  6072 00004BFE EBFD                <2> 	jmp cpuspeedloop
  6073                              <2> cpuspeedloopend:
  6074 00004C00 0F31                <2> 	rdtsc
  6075 00004C02 29F8                <2> 	sub eax, edi
  6076 00004C04 29F2                <2> 	sub edx, esi
  6077 00004C06 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  6078 00004C0C A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  6079 00004C11 31C0                <2> 	xor eax, eax
  6080 00004C13 E621                <2> 	out 0x21, al
  6081 00004C15 B020                <2> 	mov al, 0x20
  6082 00004C17 E620                <2> 	out 0x20, al
  6083 00004C19 31D2                <2> 	xor edx, edx
  6084 00004C1B 31C0                <2> 	xor eax, eax
  6085 00004C1D A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  6086 00004C22 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6087                              <2> 				;result by 2
  6088 00004C24 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6089 00004C2A C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6090 00004C2D F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6091 00004C2F 89C1                <2> 	mov ecx, eax
  6092 00004C31 E835E3FFFF          <2> 	call showdec
  6093 00004C36 BE[094D0000]        <2> 	mov esi, cpuspeedmsg
  6094 00004C3B E8CDD0FFFF          <2> 	call printquiet
  6095 00004C40 31D2                <2> 	xor edx, edx
  6096 00004C42 A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  6097 00004C47 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6098 00004C4D 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6099 00004C53 C1EB0A              <2> 	shr ebx, 10
  6100 00004C56 F7F3                <2> 	div ebx
  6101 00004C58 89C1                <2> 	mov ecx, eax
  6102 00004C5A E80CE3FFFF          <2> 	call showdec
  6103 00004C5F BE[0F4D0000]        <2> 	mov esi, cpuclockmsg
  6104 00004C64 E8A4D0FFFF          <2> 	call printquiet
  6105 00004C69 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  6106 00004C6F C1E914              <2> 	shr ecx, 20
  6107 00004C72 41                  <2> 	inc ecx	;the reading is one MB behind
  6108 00004C73 E8F3E2FFFF          <2> 	call showdec
  6109 00004C78 BE[144D0000]        <2> 	mov esi, memoryspacemsg
  6110 00004C7D E89DD0FFFF          <2> 	call print
  6111                              <2> %ifdef sound.included
  6112 00004C82 803D[095C0000]00    <2> 	cmp byte [SoundBlaster], 0
  6113 00004C89 740A                <2> 	je .nosb
  6114 00004C8B BE[F14C0000]        <2> 	mov esi, soundblastermsg
  6115 00004C90 E88AD0FFFF          <2> 	call print
  6116                              <2> .nosb:
  6117                              <2> %endif
  6118 00004C95 C3                  <2> 	ret
  6119                              <2> 
  6120 00004C96 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6121 00004C9F 666F726D6174696F6E- <2>
  6122 00004CA8 3A0A00              <2>
  6123 00004CAB 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6124 00004CB4 6B2053706163652055- <2>
  6125 00004CBD 7365640A00          <2>
  6126 00004CC2 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6127 00004CCB 6F7279205370616365- <2>
  6128 00004CD4 20557365640A00      <2>
  6129 00004CDB 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6130 00004CE4 6E666F726D6174696F- <2>
  6131 00004CED 6E3A0A00            <2>
  6132                              <2> %ifdef sound.included
  6133 00004CF1 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6134 00004CFA 746572204465746563- <2>
  6135 00004D03 7465642E0A00        <2>
  6136                              <2> %endif
  6137 00004D09 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6138 00004D0F 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6139 00004D14 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6140 00004D1D 2053706163650A00    <2>
  6141 00004D25 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6142 00004D2E 6D6F72792053706163- <2>
  6143 00004D37 653A20307800        <2>
  6144                              <1> %include 'source/programs/time.asm'
  6145 00004D3D 082E30303030303030- <2> timenscache db 8,".000000000"
  6146 00004D46 3030                <2>
  6147 00004D48 200A00              <2> timenscacheend: db " ",10,0
  6148 00004D4B 00                  <2> istimeset db 0
  6149 00004D4C 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6150 00004D55 2063757272656E7420- <2>
  6151 00004D5E 554E49582074696D65- <2>
  6152 00004D67 3A0A00              <2>
  6153 00004D6A 00<rept>            <2> timeinputbuffer times 12 db 0
  6154 00004D76 00                  <2> timeinputbend: db 0
  6155                              <2> 
  6156 00004D77 FF2C74696D6500      <2> db 255,44,"time",0
  6157 00004D7E 803D[4B4D0000]00    <2> 	cmp byte [istimeset], 0
  6158 00004D85 753A                <2> 	jne timeisset
  6159 00004D87 BE[4C4D0000]        <2> 	mov esi, settimemsg
  6160 00004D8C E88ECFFFFF          <2> 	call print
  6161 00004D91 BE[6A4D0000]        <2> 	mov esi, timeinputbuffer
  6162 00004D96 BF[764D0000]        <2> 	mov edi, timeinputbend
  6163 00004D9B E860D0FFFF          <2> 	call readline
  6164 00004DA0 BE[6A4D0000]        <2> 	mov esi, timeinputbuffer
  6165 00004DA5 31FF                <2> 	xor edi, edi
  6166 00004DA7 E8A1E2FFFF          <2> 	call cnvrttxt
  6167 00004DAC 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6168 00004DB2 31C9                <2> 	xor ecx, ecx
  6169 00004DB4 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6170 00004DBA C605[4B4D0000]01    <2> 	mov byte [istimeset], 1
  6171                              <2> timeisset:
  6172 00004DC1 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6173 00004DC7 E89FE1FFFF          <2> 	call showdec
  6174                              <2> 	
  6175 00004DCC 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6176 00004DD2 BE[3D4D0000]        <2> 	mov esi, timenscache
  6177 00004DD7 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6178 00004DDE C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6179 00004DE5 C6460A30            <2> 	mov byte [esi + 10], "0"
  6180 00004DE9 BE[484D0000]        <2> 	mov esi, timenscacheend
  6181 00004DEE E85BDFFFFF          <2> 	call convert
  6182 00004DF3 BE[3D4D0000]        <2> 	mov esi, timenscache
  6183 00004DF8 E810CFFFFF          <2> 	call printquiet
  6184                              <2> 	
  6185 00004DFD E82D000000          <2> 	call time
  6186 00004E02 BE[FB4F0000]        <2> 	mov esi, timeshow
  6187 00004E07 E801CFFFFF          <2> 	call printquiet
  6188 00004E0C BE[5E8D0000]        <2> 	mov esi, line
  6189 00004E11 E8F7CEFFFF          <2> 	call printquiet
  6190 00004E16 BE[04500000]        <2> 	mov esi, dateshow
  6191 00004E1B E8EDCEFFFF          <2> 	call printquiet
  6192 00004E20 BE[5E8D0000]        <2> 	mov esi, line
  6193 00004E25 E8E3CEFFFF          <2> 	call printquiet
  6194 00004E2A E9BC000000          <2> 	jmp findday
  6195                              <2> time:
  6196 00004E2F E84F010000          <2> 	call tstackput1
  6197 00004E34 B00A                <2> 	mov al,10			;Get RTC register A
  6198 00004E36 E879010000          <2> 	call tget1
  6199 00004E3B A880                <2> 	test al,0x80			;Is update in progress?
  6200 00004E3D 75F0                <2> 	jne time				; yes, wait
  6201                              <2> 
  6202 00004E3F B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6203 00004E41 E86E010000          <2> 	call tget1
  6204 00004E46 A2[F24F0000]        <2> 	mov [RTCtimeSecond],al
  6205                              <2> 
  6206 00004E4B B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6207 00004E4D E862010000          <2> 	call tget1
  6208 00004E52 A2[F34F0000]        <2> 	mov [RTCtimeMinute],al
  6209                              <2> 
  6210 00004E57 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6211 00004E59 E856010000          <2> 	call tget1
  6212 00004E5E A2[F44F0000]        <2> 	mov [RTCtimeHour],al
  6213                              <2> 
  6214 00004E63 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6215 00004E65 E84A010000          <2> 	call tget1
  6216 00004E6A A2[F54F0000]        <2> 	mov [RTCtimeDay],al
  6217                              <2> 
  6218 00004E6F B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6219 00004E71 E83E010000          <2> 	call tget1
  6220 00004E76 A2[F64F0000]        <2> 	mov [RTCtimeMonth],al
  6221                              <2> 
  6222 00004E7B B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6223 00004E7D E832010000          <2> 	call tget1
  6224 00004E82 A2[F74F0000]        <2> 	mov [RTCtimeYear],al
  6225                              <2> 	
  6226 00004E87 BE[FB4F0000]        <2> 	mov esi, timeshow
  6227 00004E8C 8A2D[F44F0000]      <2> 	mov ch, [RTCtimeHour]
  6228 00004E92 E828010000          <2> 	call tput1
  6229 00004E97 8A2D[F34F0000]      <2> 	mov ch, [RTCtimeMinute]
  6230 00004E9D E81D010000          <2> 	call tput1
  6231 00004EA2 8A2D[F24F0000]      <2> 	mov ch, [RTCtimeSecond]
  6232 00004EA8 E812010000          <2> 	call tput1
  6233 00004EAD BE[04500000]        <2> 	mov esi, dateshow
  6234 00004EB2 8A2D[F64F0000]      <2> 	mov ch, [RTCtimeMonth]
  6235 00004EB8 E802010000          <2> 	call tput1
  6236 00004EBD 8A2D[F54F0000]      <2> 	mov ch, [RTCtimeDay]
  6237 00004EC3 E8F7000000          <2> 	call tput1
  6238 00004EC8 B520                <2> 	mov ch, 0x20
  6239 00004ECA E8F0000000          <2> 	call tput1
  6240 00004ECF 4E                  <2> 	dec esi
  6241 00004ED0 8A2D[F74F0000]      <2> 	mov ch, [RTCtimeYear]
  6242 00004ED6 E8E4000000          <2> 	call tput1
  6243 00004EDB E8BD000000          <2> 	call tstackget1
  6244 00004EE0 C3                  <2> 	ret
  6245 00004EE1 BE[FB4F0000]        <2> 	mov esi, timeshow
  6246 00004EE6 E834CEFFFF          <2> 	call print
  6247                              <2> ;;get day of week
  6248                              <2> ;;add these:
  6249                              <2> ;;century value
  6250                              <2> ;;last 2 digits of year
  6251                              <2> ;;last 2 digits of year right shifted twice
  6252                              <2> ;;month table value
  6253                              <2> ;;day of the month
  6254                              <2> ;;divide these by 7
  6255                              <2> ;;the remainder is the day
  6256                              <2> findday:
  6257 00004EEB 31C0                <2> 	xor eax, eax
  6258                              <2> ;;first convert the values from BCD to hex
  6259 00004EED A0[F54F0000]        <2> 	mov al, [RTCtimeDay]
  6260 00004EF2 E873000000          <2> 	call converttohex
  6261 00004EF7 8825[F84F0000]      <2> 	mov [dayhex], ah
  6262 00004EFD A0[F64F0000]        <2> 	mov al, [RTCtimeMonth]
  6263 00004F02 E863000000          <2> 	call converttohex
  6264 00004F07 8825[F94F0000]      <2> 	mov [monthhex], ah
  6265 00004F0D A0[F74F0000]        <2> 	mov al, [RTCtimeYear]
  6266 00004F12 E853000000          <2> 	call converttohex
  6267 00004F17 8825[FA4F0000]      <2> 	mov [yearhex], ah
  6268 00004F1D 31C0                <2> 	xor eax, eax
  6269 00004F1F A0[FA4F0000]        <2> 	mov al, [yearhex]
  6270 00004F24 C0E802              <2> 	shr al, 2
  6271 00004F27 0205[FA4F0000]      <2> 	add al, [yearhex]
  6272 00004F2D 0506000000          <2> 	add eax, 6
  6273 00004F32 31DB                <2> 	xor ebx, ebx
  6274 00004F34 8A1D[F94F0000]      <2> 	mov bl, [monthhex]
  6275 00004F3A FECB                <2> 	dec bl
  6276 00004F3C 81C3[19500000]      <2> 	add ebx, month
  6277 00004F42 31C9                <2> 	xor ecx, ecx
  6278 00004F44 8A0B                <2> 	mov cl, [ebx]
  6279 00004F46 01C8                <2> 	add eax, ecx
  6280 00004F48 8A0D[F84F0000]      <2> 	mov cl, [dayhex]
  6281 00004F4E 01C8                <2> 	add eax, ecx
  6282 00004F50 66BB0700            <2> 	mov bx, 7
  6283 00004F54 31D2                <2> 	xor edx, edx
  6284 00004F56 66F7F3              <2> 	div bx
  6285 00004F59 C1E202              <2> 	shl edx, 2
  6286 00004F5C 81C2[25500000]      <2> 	add edx, day
  6287 00004F62 8B32                <2> 	mov esi, [edx]
  6288 00004F64 E8B6CDFFFF          <2> 	call print
  6289 00004F69 C3                  <2> 	ret
  6290                              <2> 	
  6291                              <2> converttohex:
  6292 00004F6A 88C4                <2> 	mov ah, al
  6293 00004F6C C0E804              <2> 	shr al, 4
  6294 00004F6F C0E404              <2> 	shl ah, 4
  6295 00004F72 C0EC04              <2> 	shr ah, 4
  6296 00004F75 3C00                <2> 	cmp al, 0
  6297 00004F77 7409                <2> 	je noconverttohex
  6298                              <2> converttohexlp:
  6299 00004F79 80C40A              <2> 	add ah, 10
  6300 00004F7C FEC8                <2> 	dec al
  6301 00004F7E 3C00                <2> 	cmp al, 0
  6302 00004F80 75F7                <2> 	jne converttohexlp
  6303                              <2> noconverttohex:
  6304 00004F82 C3                  <2> 	ret
  6305                              <2> 	
  6306                              <2> tstackput1:
  6307 00004F83 8935[EE4F0000]      <2> 	mov [tstack + 20], esi
  6308 00004F89 BE[DA4F0000]        <2> 	mov esi, tstack
  6309 00004F8E 8906                <2> 	mov [esi], eax
  6310 00004F90 895E04              <2> 	mov [esi + 4], ebx
  6311 00004F93 894E08              <2> 	mov [esi + 8], ecx
  6312 00004F96 89560C              <2> 	mov [esi + 12], edx
  6313 00004F99 897E10              <2> 	mov [esi + 16], edi
  6314 00004F9C C3                  <2> 	ret
  6315                              <2> 	
  6316                              <2> tstackget1:
  6317 00004F9D BE[DA4F0000]        <2> 	mov esi, tstack
  6318 00004FA2 8B06                <2> 	mov eax, [esi]
  6319 00004FA4 8B5E04              <2> 	mov ebx, [esi + 4]
  6320 00004FA7 8B4E08              <2> 	mov ecx, [esi + 8]
  6321 00004FAA 8B560C              <2> 	mov edx, [esi + 12]
  6322 00004FAD 8B7E10              <2> 	mov edi, [esi + 16]
  6323 00004FB0 8B7614              <2> 	mov esi, [esi + 20]
  6324 00004FB3 C3                  <2> 	ret
  6325                              <2> 	
  6326                              <2> tget1:
  6327 00004FB4 66BA7000            <2> 	mov dx, 0x70
  6328 00004FB8 EE                  <2> 	out dx, al
  6329 00004FB9 6642                <2> 	inc dx
  6330 00004FBB EC                  <2> 	in al, dx
  6331 00004FBC 664A                <2> 	dec dx
  6332 00004FBE C3                  <2> 	ret
  6333                              <2> 	
  6334                              <2> tput1:
  6335 00004FBF 66C1E904            <2> 	shr cx, 4
  6336 00004FC3 B030                <2> 	mov al, 48
  6337 00004FC5 00E8                <2> 	add al, ch
  6338 00004FC7 8806                <2> 	mov [esi], al
  6339 00004FC9 46                  <2> 	inc esi
  6340 00004FCA B030                <2> 	mov al, 48
  6341 00004FCC C0E904              <2> 	shr cl, 4
  6342 00004FCF 00C8                <2> 	add al, cl
  6343 00004FD1 8806                <2> 	mov [esi], al
  6344 00004FD3 81C602000000        <2> 	add esi, 2
  6345 00004FD9 C3                  <2> 	ret
  6346                              <2> 		
  6347 00004FDA 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6348 00004FE3 000000000000000000- <2>
  6349 00004FEC 000000000000        <2>
  6350 00004FF2 00                  <2> 	RTCtimeSecond db 0
  6351 00004FF3 00                  <2> 	RTCtimeMinute db 0
  6352 00004FF4 00                  <2> 	RTCtimeHour db 0
  6353 00004FF5 00                  <2> 	RTCtimeDay db 0
  6354 00004FF6 00                  <2> 	RTCtimeMonth db 0
  6355 00004FF7 00                  <2> 	RTCtimeYear db 0
  6356 00004FF8 00                  <2> 	dayhex db 0
  6357 00004FF9 00                  <2> 	monthhex db 0
  6358 00004FFA 00                  <2> 	yearhex db 0
  6359 00004FFB 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6360 00005004 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6361 0000500D 302000              <2>
  6362                              <2> 	oldcentury:	;;from 1700 to 1900
  6363 00005010 040200              <2> 	db 4,2,0
  6364                              <2> 	century:	;;from 2000 to 2500
  6365 00005013 060402000604        <2> 	db 6,4,2,0,6,4
  6366                              <2> 	month:
  6367 00005019 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6368 00005022 000305              <2>
  6369                              <2> 	day:
  6370 00005025 [41500000]          <2> 	dd sunday
  6371 00005029 [49500000]          <2> 	dd monday
  6372 0000502D [51500000]          <2> 	dd tuesday
  6373 00005031 [5A500000]          <2> 	dd wednesday
  6374 00005035 [65500000]          <2> 	dd thursday
  6375 00005039 [6F500000]          <2> 	dd friday
  6376 0000503D [77500000]          <2> 	dd saturday
  6377                              <2> sunday:
  6378 00005041 53756E6461790A00    <2> 	db "Sunday",10,0
  6379                              <2> monday:
  6380 00005049 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6381                              <2> tuesday:
  6382 00005051 547565736461790A00  <2> 	db "Tuesday",10,0
  6383                              <2> wednesday:
  6384 0000505A 5765646E6573646179- <2> 	db "Wednesday",10,0
  6385 00005063 0A00                <2>
  6386                              <2> thursday:
  6387 00005065 54687572736461790A- <2> 	db "Thursday",10,0
  6388 0000506E 00                  <2>
  6389                              <2> friday:
  6390 0000506F 4672696461790A00    <2> 	db "Friday",10,0
  6391                              <2> saturday:
  6392 00005077 53617475726461790A- <2> 	db "Saturday",10,0
  6393 00005080 00                  <2>
  6394                              <1> %include 'source/programs/turnoff.asm'
  6395 00005081 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6396 0000508A 00                  <2>
  6397                              <2> 	turnoff:
  6398 0000508B 66BB[A650]          <2> 			mov bx, shutdown
  6399 0000508F 66891D[EE0C0000]    <2> 			mov [realmodeptr], bx
  6400 00005096 BB[D0500000]        <2> 			mov ebx, halt
  6401 0000509B 891D[EA0C0000]      <2> 			mov [realmodereturn], ebx
  6402 000050A1 E92DBBFFFF          <2> 			jmp realmode
  6403                              <2> 
  6404                              <2> [BITS 16]
  6405                              <2> 		shutdown:
  6406 000050A6 B453                <2> 			mov ah, 0x53
  6407 000050A8 B004                <2> 			mov al, 4
  6408 000050AA 31DB                <2> 			xor bx, bx
  6409 000050AC CD15                <2> 			int 0x15
  6410                              <2> 			
  6411 000050AE B453                <2> 			mov ah, 0x53
  6412 000050B0 B001                <2> 			mov al, 1
  6413 000050B2 31DB                <2> 			xor bx, bx
  6414 000050B4 CD15                <2> 			int 0x15
  6415                              <2> 			
  6416 000050B6 B453                <2> 			mov ah, 0x53
  6417 000050B8 B008                <2> 			mov al, 8
  6418 000050BA BB0100              <2> 			mov bx, 1
  6419 000050BD B90100              <2> 			mov cx, 1
  6420 000050C0 CD15                <2> 			int 0x15
  6421                              <2> 			
  6422 000050C2 B453                <2> 			mov ah, 0x53
  6423 000050C4 B007                <2> 			mov al, 7
  6424 000050C6 BB0100              <2> 			mov bx, 1
  6425 000050C9 B90300              <2> 			mov cx, 3
  6426 000050CC CD15                <2> 			int 0x15
  6427 000050CE EBFE                <2> 			jmp $
  6428                              <2> 			[BITS 32]
  6429 000050D0 EBFE                <2> halt: jmp $
  6430                              <1> %include 'source/programs/wait.asm'
  6431 000050D2 FF2C7761697400      <2> db 255,44,"wait",0
  6432                              <2> waitkey:
  6433 000050D9 E80FD1FFFF          <2> 		call getchar
  6434 000050DE C3                  <2> 		ret
  6435                              <1> %include 'source/programs/while.asm'
  6436 000050DF FF2C7768696C6500    <2> db 255,44,"while",0
  6437 000050E7 30C0                <2> whilecmd:  xor al, al
  6438 000050E9 3805[F8B70000]      <2> 	cmp [BATCHISON], al
  6439 000050EF 0F8483E6FFFF        <2> 	je near notbatch
  6440 000050F5 8B35[F4B70000]      <2> 	mov esi, [BATCHPOS]
  6441 000050FB 81EE02000000        <2> 	sub esi, 2
  6442 00005101 4E                  <2> whilefnd: dec esi
  6443 00005102 8A06                <2> 	mov al, [esi]
  6444 00005104 3C0A                <2> 	cmp al, 10
  6445 00005106 0F840A000000        <2> 	je near whilefnd2
  6446 0000510C 3C00                <2> 	cmp al, 0
  6447 0000510E 0F8402000000        <2> 	je near whilefnd2
  6448 00005114 EBEB                <2> 	jmp whilefnd
  6449                              <2> whilefnd2:
  6450 00005116 46                  <2> 	inc esi
  6451 00005117 8935[FAB70000]      <2> 	mov [LOOPPOS], esi
  6452 0000511D C605[F9B70000]01    <2> 	mov BYTE [LOOPON], 1
  6453 00005124 BE[FECB0000]        <2> 	mov esi, buftxt
  6454 00005129 BB[FECB0000]        <2> 	mov ebx, buftxt
  6455 0000512E 81C306000000        <2> 	add ebx, 6
  6456 00005134 E999F0FFFF          <2> 	jmp chkeqsn
  6457                              <1> progend:		;programs end here	
  6458                              <1> batchprogend:
  6459                                  	%include "source/hardware.asm"
  6460                              <1> %ifdef gui.included
  6461                              <1> 	%include "source/drivers/video/vesa.asm"
  6462                              <2> [BITS 16]
  6463                              <2> guiswitch:
  6464 00005139 81F90000            <2> 	cmp cx, 0
  6465 0000513D 750B                <2> 	jne guiswitchdefnum
  6466 0000513F B81200              <2> 	mov ax, 12h
  6467 00005142 31DB                <2> 	xor bx, bx
  6468 00005144 CD10                <2> 	int 10h
  6469 00005146 E85100              <2> 	call guiloadagain
  6470                              <2> guiswitchnocando:
  6471 00005149 C3                  <2> 	ret	;return without switching as mode number is bad
  6472                              <2> guiswitchdefnum:	;switch to a defined mode number
  6473 0000514A B8004F              <2> 	mov ax, 0x4F00
  6474 0000514D BF[1753]            <2> 	mov di, VBEMODEBLOCK
  6475 00005150 CD10                <2> 	int 10h
  6476 00005152 BE[3953]            <2> 	mov si, reserved
  6477 00005155 81EE0200            <2> 	sub si, 2
  6478                              <2> .loop:
  6479 00005159 81C60200            <2> 	add si, 2
  6480 0000515D 81FE[1754]          <2> 	cmp si, oemdata
  6481 00005161 74E6                <2> 	je guiswitchnocando
  6482 00005163 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6483 00005167 74E0                <2> 	je guiswitchnocando
  6484 00005169 390C                <2> 	cmp [si], cx
  6485 0000516B 75EC                <2> 	jne .loop
  6486 0000516D 8936[7152]          <2> 	mov [videomodecache], si
  6487 00005171 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6488 00005175 B8014F              <2> 	mov ax, 0x4F01
  6489 00005178 BF[1755]            <2> 	mov di, VBEMODEINFOBLOCK
  6490 0000517B 890E[6F52]          <2> 	mov [vesamode], cx
  6491 0000517F CD10                <2> 	int 10h
  6492 00005181 E9CB00              <2> 	jmp selectedvesa
  6493                              <2> guiload:
  6494 00005184 BE[EF52]            <2> 	mov si, bootmsg
  6495 00005187 E8EDAE              <2> 	call printrm
  6496 0000518A 31C0                <2> 	xor ax, ax
  6497 0000518C CD16                <2> 	int 16h
  6498 0000518E 3C79                <2> 	cmp al, "y"
  6499 00005190 0F859DAE            <2> 	jne near vgaset
  6500 00005194 BE[5D8D]            <2> 	mov si, crlf
  6501 00005197 E8DDAE              <2> 	call printrm
  6502                              <2> guiloadagain:
  6503 0000519A B8004F              <2> 	mov ax, 04F00h
  6504 0000519D BF[1753]            <2> 	mov di, VBEMODEBLOCK
  6505 000051A0 CD10                <2> 	int 10h
  6506 000051A2 BE[3953]            <2> 	mov si, reserved
  6507 000051A5 81EE0200            <2> 	sub si, 2
  6508                              <2> findvideomodes:
  6509 000051A9 81C60200            <2> 	add si, 2
  6510 000051AD 8B0C                <2> 	mov cx, [si]
  6511 000051AF 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6512 000051B3 0F840A00            <2> 	je near nextvmode
  6513 000051B7 81FE[1754]          <2> 	cmp si, oemdata
  6514 000051BB 0F8372AE            <2> 	jae near vgaset	;;kill if no valid list is found
  6515 000051BF EBE8                <2> 	jmp findvideomodes 	
  6516                              <2> ;;debug,shows vmodes available
  6517                              <2> nextvmode:
  6518 000051C1 81EE0200            <2> 	sub si, 2
  6519 000051C5 81FE[3953]          <2> 	cmp si, reserved
  6520 000051C9 0F82CDFF            <2> 	jb near guiloadagain
  6521 000051CD 8B0C                <2> 	mov cx, [si]
  6522 000051CF 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6523 000051D3 0F84EAFF            <2> 	je near nextvmode
  6524 000051D7 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6525 000051DB B8014F              <2> 	mov ax, 04F01h
  6526 000051DE BF[1755]            <2> 	mov di, VBEMODEINFOBLOCK
  6527 000051E1 890E[6F52]          <2> 	mov [vesamode], cx
  6528 000051E5 CD10                <2> 	int 10h
  6529 000051E7 A0[3055]            <2> 	mov al, [bitsperpixel]
  6530 000051EA 3C10                <2> 	cmp al, 16
  6531 000051EC 75D3                <2> 	jne nextvmode
  6532 000051EE 8936[7152]          <2> 	mov [videomodecache], si
  6533 000051F2 84E4                <2> 	test ah, ah
  6534 000051F4 0F842200            <2> 	jz near setvesamode
  6535 000051F8 EBC7                <2> 	jmp nextvmode
  6536 000051FA 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6537 00005203 20766964656F206D6F- <2>
  6538 0000520C 6465204F4B3F28792F- <2>
  6539 00005215 6E290D0A00          <2>
  6540                              <2> setvesamode:
  6541 0000521A 8B0E[2955]          <2> 	mov cx, [resolutionx]
  6542 0000521E E85900              <2> 	call decshow
  6543 00005221 B078                <2> 	mov al, "x"
  6544 00005223 E8C100              <2> 	call char
  6545 00005226 8B0E[2B55]          <2> 	mov cx, [resolutiony]
  6546 0000522A E84D00              <2> 	call decshow
  6547 0000522D B040                <2> 	mov al, "@"
  6548 0000522F E8B500              <2> 	call char
  6549 00005232 31C9                <2> 	xor cx, cx
  6550 00005234 8A0E[3055]          <2> 	mov cl, [bitsperpixel]
  6551 00005238 E83F00              <2> 	call decshow
  6552 0000523B BE[FA51]            <2> 	mov si, isthisvideook
  6553 0000523E E836AE              <2> 	call printrm
  6554 00005241 31C0                <2> 	xor ax, ax
  6555 00005243 CD16                <2> 	int 16h
  6556 00005245 8B36[7152]          <2> 	mov si, [videomodecache]
  6557 00005249 3C79                <2> 	cmp al, "y"
  6558 0000524B 0F8572FF            <2> 	jne near nextvmode
  6559                              <2> selectedvesa:
  6560 0000524F 8B16[2955]          <2> 	mov dx, [resolutionx]
  6561 00005253 01D2                <2> 	add dx, dx
  6562 00005255 8916[1756]          <2> 	mov [resolutionx2], dx
  6563 00005259 31D2                <2> 	xor dx, dx
  6564 0000525B 31C9                <2> 	xor cx, cx
  6565 0000525D B8024F              <2> 	mov ax, 04F02h
  6566 00005260 8B1E[6F52]          <2> 	mov bx, [vesamode]
  6567 00005264 CD10                <2> 	int 10h		;;enter VESA mode
  6568 00005266 C606[389F]01        <2> 	mov byte [guion], 1
  6569 0000526B E8D3AD              <2> 	call getmemorysize;get the memory map after the video is initialized
  6570 0000526E C3                  <2> 	ret
  6571                              <2> 	
  6572 0000526F 0000                <2> vesamode dw 0
  6573 00005271 0000                <2> videomodecache dw 0
  6574                              <2> 
  6575 00005273 0000000000          <2> dcnm db 0,0,0,0,0
  6576 00005278 0000                <2> dcnmend db 0,0
  6577                              <2> 
  6578                              <2> 
  6579                              <2> decshow:
  6580 0000527A BE[7352]            <2> 	mov si, dcnm
  6581                              <2> decclear:
  6582 0000527D B030                <2> 	mov al, "0"
  6583 0000527F 8804                <2> 	mov [si], al
  6584 00005281 46                  <2> 	inc si
  6585 00005282 81FE[7852]          <2> 	cmp si, dcnmend
  6586 00005286 76F5                <2> 	jbe decclear
  6587 00005288 4E                  <2> 	dec si
  6588 00005289 E81500              <2> 	call convertrm
  6589 0000528C BE[7352]            <2> 	mov si, dcnm
  6590                              <2> dectst:
  6591 0000528F 8A04                <2> 	mov al, [si]
  6592 00005291 46                  <2> 	inc si
  6593 00005292 81FE[7852]          <2> 	cmp si, dcnmend
  6594 00005296 7704                <2> 	ja dectstend
  6595 00005298 3C30                <2> 	cmp al, "0"
  6596 0000529A 76F3                <2> 	jbe dectst
  6597                              <2> dectstend:
  6598 0000529C 4E                  <2> 	dec si
  6599 0000529D E8D7AD              <2> 	call printrm
  6600 000052A0 C3                  <2> 	ret
  6601                              <2> 	
  6602                              <2> 	
  6603                              <2> convertrm:
  6604 000052A1 4E                  <2> 	dec si
  6605 000052A2 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6606                              <2> cnvrtrm:
  6607 000052A4 89DE                <2> 	mov si, bx
  6608 000052A6 81EE0300            <2> 	sub si, 3
  6609 000052AA 46                  <2> ten3rm:	inc si
  6610 000052AB 81F9E803            <2> 	cmp cx, 1000
  6611 000052AF 7208                <2> 	jb ten2rm
  6612 000052B1 81E9E803            <2> 	sub cx, 1000
  6613 000052B5 FE04                <2> 	inc byte [si]
  6614 000052B7 EBEB                <2> 	jmp cnvrtrm
  6615 000052B9 46                  <2> ten2rm:	inc si
  6616 000052BA 81F96400            <2> 	cmp cx, 100
  6617 000052BE 7208                <2> 	jb ten1rm
  6618 000052C0 81E96400            <2> 	sub cx, 100
  6619 000052C4 FE04                <2> 	inc byte [si]
  6620 000052C6 EBDC                <2> 	jmp cnvrtrm
  6621 000052C8 46                  <2> ten1rm:	inc si
  6622 000052C9 81F90A00            <2> 	cmp cx, 10
  6623 000052CD 7208                <2> 	jb ten0rm
  6624 000052CF 81E90A00            <2> 	sub cx, 10
  6625 000052D3 FE04                <2> 	inc byte [si]
  6626 000052D5 EBCD                <2> 	jmp cnvrtrm
  6627 000052D7 46                  <2> ten0rm:	inc si
  6628 000052D8 81F90100            <2> 	cmp cx, 1
  6629 000052DC 7208                <2> 	jb tendnrm
  6630 000052DE 81E90100            <2> 	sub cx, 1
  6631 000052E2 FE04                <2> 	inc byte [si]
  6632 000052E4 EBBE                <2> 	jmp cnvrtrm
  6633                              <2> tendnrm:
  6634 000052E6 C3                  <2> 	ret
  6635                              <2> 
  6636                              <2>     char: 		    ;char must be in al
  6637 000052E7 BB0700              <2>        mov bx, 07
  6638 000052EA B40E                <2> 	   mov ah, 0Eh
  6639 000052EC CD10                <2> 	   int 10h
  6640 000052EE C3                  <2> 	   ret
  6641                              <2> 
  6642 000052EF 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6643 000052F8 20746865204755493F- <2>
  6644 00005301 28792F6E2900        <2>
  6645                              <2> 
  6646                              <2> 
  6647                              <2> mcursor:
  6648 00005307 01                  <2> 	db	00000001b
  6649 00005308 81                  <2> 	db	10000001b
  6650 00005309 C1                  <2> 	db	11000001b
  6651 0000530A E1                  <2> 	db	11100001b
  6652 0000530B F1                  <2> 	db	11110001b
  6653 0000530C F9                  <2> 	db	11111001b
  6654 0000530D FD                  <2> 	db	11111101b
  6655 0000530E FF                  <2> 	db	11111111b
  6656 0000530F F9                  <2> 	db	11111001b
  6657 00005310 B9                  <2> 	db	10111001b
  6658 00005311 39                  <2> 	db	00111001b
  6659 00005312 1C                  <2> 	db	00011100b
  6660 00005313 1C                  <2> 	db	00011100b
  6661 00005314 0E                  <2> 	db	00001110b
  6662 00005315 0E                  <2> 	db	00001110b
  6663 00005316 0C                  <2> 	db	00001100b
  6664                              <2> mcursorend:
  6665                              <2> 
  6666                              <2> 
  6667                              <2> VBEMODEBLOCK:
  6668 00005317 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6669 0000531B 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6670 0000531D 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6671 00005321 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6672 00005325 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6673 00005329 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6674 0000532B 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6675 0000532D 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6676 00005331 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6677 00005335 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6678 00005339 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6679 00005417 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6680                              <2> 
  6681                              <2> VBEMODEINFOBLOCK:
  6682                              <2> ;Mandatory information for all VBE revision
  6683 00005517 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6684 00005519 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6685 0000551A 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6686 0000551B 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6687 0000551D 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6688 0000551F 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6689 00005521 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6690 00005523 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6691 00005527 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6692                              <2> 
  6693                              <2> ;Mandatory information for VBE 1.2 and above
  6694 00005529 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6695 0000552B 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6696 0000552D 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6697 0000552E 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6698 0000552F 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6699 00005530 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6700 00005531 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6701 00005532 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6702 00005533 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6703 00005534 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6704 00005535 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6705                              <2> 
  6706                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6707 00005536 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6708 00005537 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6709 00005538 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6710 00005539 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6711 0000553A 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6712 0000553B 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6713 0000553C 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6714 0000553D 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6715 0000553E 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6716                              <2> 
  6717                              <2> ;Mandatory information for VBE 2.0 and above
  6718 0000553F 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6719 00005543 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6720 00005547 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6721 00005549 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6722                              <2> 
  6723 00005617 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6724                              <2> VBEEND:
  6725                              <2> [BITS 32]
  6726                              <1> 	%include "source/drivers/input/mouse.asm"
  6727 0000561B 00                  <2> mousedisabled db 0
  6728                              <2> 	
  6729                              <2> 	cursorgui:
  6730 0000561C 803D[A7800000]01    <2> 		cmp byte [mouseon], 1
  6731 00005623 0F8432000000        <2> 		je near mousedaemon
  6732 00005629 803D[389F0000]00    <2> 		cmp byte [guion], 0
  6733 00005630 0F8415070000        <2> 		je near entdown
  6734                              <2> 	initmouse:
  6735 00005636 803D[389F0000]00    <2> 		cmp byte [guion], 0
  6736 0000563D 7405                <2> 		je noswmsposinit
  6737 0000563F E8CF110000          <2> 		call switchmousepos2
  6738                              <2> 	noswmsposinit:
  6739 00005644 E85D020000          <2> 	  	call PS2SET
  6740 00005649 E886020000          <2> 		call ACTMOUS
  6741 0000564E C605[A7800000]01    <2> 		mov byte [mouseon],1
  6742 00005655 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6743                              <2> 		;call GETB
  6744                              <2> 				;;If the bytes are mixed up,
  6745                              <2> 				;;remove this line or add another of this line.
  6746                              <2> 	nomouse:
  6747 0000565A C3                  <2> 		ret
  6748                              <2> 		
  6749                              <2> 	mousedaemon:
  6750 0000565B 803D[A7800000]01    <2> 		cmp byte [mouseon], 1
  6751 00005662 75D2                <2> 		jne initmouse
  6752 00005664 E464                <2> 		in al, 64h ; Status
  6753 00005666 A820                <2> 		test al, 20h ; PS2-Mouse?
  6754 00005668 0F8502000000        <2> 		jnz near moused
  6755 0000566E F4                  <2> 		hlt
  6756 0000566F C3                  <2> 		ret
  6757                              <2> 	moused:
  6758 00005670 803D[1B560000]01    <2> 		cmp byte [mousedisabled], 1
  6759 00005677 74E1                <2> 		je nomouse
  6760 00005679 E87B020000          <2> 		  call GETB
  6761 0000567E 88C3                <2> 		  mov  bl, al
  6762 00005680 80E301              <2> 		  and  bl, 1
  6763 00005683 881D[1E590000]      <2> 		  mov  BYTE [LBUTTON], bl
  6764 00005689 88C3                <2> 		  mov  bl, al
  6765 0000568B 80E302              <2> 		  and  bl, 2
  6766 0000568E D0EB                <2> 		  shr  bl, 1
  6767 00005690 881D[1F590000]      <2> 		  mov  BYTE [RBUTTON], bl
  6768 00005696 88C3                <2> 		  mov  bl, al
  6769 00005698 80E304              <2> 		  and  bl, 4
  6770 0000569B C0EB02              <2> 		  shr  bl, 2
  6771 0000569E 881D[20590000]      <2> 		  mov  BYTE [MBUTTON], bl
  6772 000056A4 E850020000          <2> 		  call GETB
  6773 000056A9 A2[21590000]        <2> 		  mov  BYTE [XCOORD], al
  6774 000056AE E846020000          <2> 		  call GETB
  6775 000056B3 A2[22590000]        <2> 		  mov  BYTE [YCOORD], al
  6776                              <2> 
  6777                              <2> 	showpixelcursor:
  6778 000056B8 668B15[0D580000]    <2> 		mov dx, [mousecursorposition]
  6779 000056BF 668B0D[0F580000]    <2> 		mov cx, [mousecursorposition + 2]
  6780 000056C6 668915[09580000]    <2> 		mov [lastmouseposition], dx
  6781 000056CD 66890D[0B580000]    <2> 		mov [lastmouseposition + 2], cx
  6782 000056D4 A0[21590000]        <2> 		mov al, [XCOORD]
  6783 000056D9 3C80                <2> 		cmp al, 128
  6784 000056DB 730C                <2> 		jae subxcoord
  6785 000056DD 00C0                <2> 		add al, al
  6786 000056DF 30E4                <2> 		xor ah, ah
  6787 000056E1 6601C2              <2> 		add dx, ax
  6788 000056E4 E90B000000          <2> 		jmp subxcoorddn
  6789                              <2> 	subxcoord:
  6790 000056E9 00C0                <2> 		add al, al
  6791 000056EB 30DB                <2> 		xor bl, bl
  6792 000056ED 28C3                <2> 		sub bl, al
  6793 000056EF 30FF                <2> 		xor bh, bh
  6794 000056F1 6629DA              <2> 		sub dx, bx
  6795                              <2> 	subxcoorddn:
  6796 000056F4 8A1D[22590000]      <2> 		mov bl, [YCOORD]
  6797 000056FA 30C0                <2> 		xor al, al
  6798 000056FC 28D8                <2> 		sub al, bl
  6799 000056FE 3C80                <2> 		cmp al, 128
  6800 00005700 730A                <2> 		jae subycoord
  6801 00005702 30E4                <2> 		xor ah, ah
  6802 00005704 6601C1              <2> 		add cx, ax
  6803 00005707 E909000000          <2> 		jmp subycoorddn
  6804                              <2> 	subycoord:
  6805 0000570C 30DB                <2> 		xor bl, bl
  6806 0000570E 28C3                <2> 		sub bl, al
  6807 00005710 30FF                <2> 		xor bh, bh
  6808 00005712 6629D9              <2> 		sub cx, bx
  6809                              <2> 	subycoorddn:
  6810 00005715 6681FA204E          <2> 		cmp dx, 20000
  6811 0000571A 7603                <2> 		jbe nooriginx2
  6812 0000571C 6631D2              <2> 		xor dx, dx
  6813                              <2> 	nooriginx2:
  6814 0000571F 6681F9204E          <2> 		cmp cx, 20000
  6815 00005724 7603                <2> 		jbe nooriginy2
  6816 00005726 6631C9              <2> 		xor cx, cx
  6817                              <2> 	nooriginy2:
  6818 00005729 6681FA0000          <2> 		cmp dx, 0
  6819 0000572E 7415                <2> 		je nofixxcolumn2
  6820 00005730 663B15[17560000]    <2> 		cmp dx, [resolutionx2]
  6821 00005737 720C                <2> 		jb nofixxcolumn2
  6822 00005739 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  6823 00005740 6681EA0200          <2> 		sub dx, 2
  6824                              <2> 	nofixxcolumn2:
  6825 00005745 6681F90000          <2> 		cmp cx, 0
  6826 0000574A 7415                <2> 		je nofixyrow2
  6827 0000574C 663B0D[2B550000]    <2> 		cmp cx, [resolutiony]
  6828 00005753 720C                <2> 		jb nofixyrow2
  6829 00005755 668B0D[2B550000]    <2> 		mov cx, [resolutiony]
  6830 0000575C 6681E90100          <2> 		sub cx, 1
  6831                              <2> 	nofixyrow2:
  6832 00005761 668915[0D580000]    <2> 		mov [mousecursorposition], dx
  6833 00005768 66890D[0F580000]    <2> 		mov [mousecursorposition + 2], cx
  6834 0000576F 803D[389F0000]00    <2> 		cmp byte [guion], 0
  6835 00005776 0F8495000000        <2> 		je near termmouse
  6836 0000577C E832100000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6837 00005781 803D[1E590000]01    <2> 		cmp byte [LBUTTON], 1
  6838 00005788 0F84B7200000        <2> 		je near clickicon
  6839 0000578E 803D[1F590000]01    <2> 		cmp byte [RBUTTON], 1
  6840 00005795 0F84AA200000        <2> 		je near clickicon
  6841 0000579B A0[32780000]        <2> 		mov al, [pbutton]
  6842 000057A0 C705[35780000]0000- <2> 		mov dword [dragging], 0
  6843 000057A8 0000                <2>
  6844 000057AA 3C00                <2> 		cmp al, 0
  6845 000057AC 740F                <2> 		je nopreviousbutton
  6846 000057AE E8640F0000          <2> 		call clearmousecursor
  6847 000057B3 E844130000          <2> 		call reloadallgraphics
  6848                              <2> 	windowtermcopyend:
  6849 000057B8 E856100000          <2> 		call switchmousepos2
  6850                              <2> 	nopreviousbutton:
  6851 000057BD 30C0                <2> 		xor al, al
  6852 000057BF A2[32780000]        <2> 		mov [pbutton], al
  6853 000057C4 A2[997D0000]        <2> 		mov [windrag], al
  6854 000057C9 A0[1E590000]        <2> 		mov al, [LBUTTON]
  6855 000057CE A2[33780000]        <2> 		mov [pLBUTTON], al
  6856 000057D3 A0[1F590000]        <2> 		mov al, [RBUTTON]
  6857 000057D8 A2[34780000]        <2> 		mov [pRBUTTON], al
  6858 000057DD 31D2                <2> 		xor edx, edx
  6859 000057DF 668B15[0D580000]    <2> 		mov dx, [mousecursorposition]
  6860 000057E6 668B0D[0F580000]    <2> 		mov cx, [mousecursorposition + 2]
  6861 000057ED 66BB18C7            <2> 		mov bx, 1100011100011000b
  6862 000057F1 30E4                <2> 		xor ah, ah
  6863 000057F3 B0FE                <2> 		mov al, 254
  6864 000057F5 C605[2F780000]01    <2> 		mov byte [showcursorfonton], 1
  6865 000057FC E8CA180000          <2> 		call showfontvesa
  6866 00005801 C605[2F780000]00    <2> 		mov byte [showcursorfonton], 0
  6867 00005808 C3                  <2> 		ret
  6868                              <2> 
  6869 00005809 00000000            <2> lastmouseposition dw 0,0
  6870 0000580D 00000000            <2> mousecursorposition dw 0,0	
  6871                              <2> 
  6872                              <2> termmouse:
  6873 00005811 BE[14E72800]        <2> 		mov esi, videobuf
  6874 00005816 31D2                <2> 		xor edx, edx
  6875 00005818 668B15[09580000]    <2> 		mov dx, [lastmouseposition]
  6876 0000581F 668B0D[0B580000]    <2> 		mov cx, [lastmouseposition + 2]
  6877 00005826 66A1[A4580000]      <2> 		mov ax, [cursorcache]
  6878 0000582C 663D0000            <2> 		cmp ax, 0
  6879 00005830 7425                <2> 		je nocopycursorcache
  6880 00005832 66C1E104            <2> 		shl cx, 4
  6881 00005836 66C1E203            <2> 		shl dx, 3
  6882 0000583A 01D6                <2> 		add esi, edx
  6883 0000583C 6631D2              <2> 		xor dx, dx
  6884 0000583F 8A15[3B240000]      <2> 		mov dl, [charxy]
  6885 00005845 6641                <2> 		inc cx
  6886                              <2> termmousecplp1:
  6887 00005847 01D6                <2> 		add esi, edx
  6888 00005849 6649                <2> 		dec cx
  6889 0000584B 6681F90000          <2> 		cmp cx, 0
  6890 00005850 75F5                <2> 		jne termmousecplp1
  6891 00005852 29D6                <2> 		sub esi, edx
  6892 00005854 668906              <2> 		mov [esi], ax
  6893                              <2> nocopycursorcache:
  6894 00005857 BE[14E72800]        <2> 		mov esi, videobuf
  6895 0000585C 31D2                <2> 		xor edx, edx
  6896 0000585E 668B15[0D580000]    <2> 		mov dx, [mousecursorposition]
  6897 00005865 668B0D[0F580000]    <2> 		mov cx, [mousecursorposition + 2]
  6898 0000586C 66C1E104            <2> 		shl cx, 4
  6899 00005870 66C1E203            <2> 		shl dx, 3
  6900 00005874 01D6                <2> 		add esi, edx
  6901 00005876 6631D2              <2> 		xor dx, dx
  6902 00005879 8A15[3B240000]      <2> 		mov dl, [charxy]
  6903 0000587F 6641                <2> 		inc cx
  6904                              <2> termmousecplp2:
  6905 00005881 01D6                <2> 		add esi, edx
  6906 00005883 6649                <2> 		dec cx
  6907 00005885 6681F90000          <2> 		cmp cx, 0
  6908 0000588A 75F5                <2> 		jne termmousecplp2
  6909 0000588C 29D6                <2> 		sub esi, edx
  6910 0000588E 668B06              <2> 		mov ax, [esi]
  6911 00005891 66A3[A4580000]      <2> 		mov [cursorcache], ax
  6912 00005897 B080                <2> 		mov al, 128
  6913 00005899 B407                <2> 		mov ah, 7
  6914 0000589B 668906              <2> 		mov [esi], ax
  6915 0000589E E809CDFFFF          <2> 		call termcopy
  6916 000058A3 C3                  <2> 		ret
  6917 000058A4 0000                <2> cursorcache db 0,0
  6918                              <2> 
  6919                              <2> PS2SET:
  6920 000058A6 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6921 000058A8 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6922 000058AA E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6923 000058AF C3                  <2> ret
  6924                              <2> 
  6925                              <2> CHKPRT:
  6926 000058B0 66B96400            <2>   mov  cx, 100
  6927                              <2>  .again:
  6928 000058B4 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6929 000058B6 A802                <2>   test al, 2		; Check if input buffer is empty
  6930 000058B8 7402                <2>   je .go
  6931 000058BA E2F8                <2>   loop .again
  6932                              <2>  .go:
  6933 000058BC C3                  <2> ret
  6934                              <2> 
  6935                              <2> WMOUS:
  6936 000058BD B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6937 000058BF E664                <2>   out  0x64, al		; write to keyboardcontroller
  6938 000058C1 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6939 000058C6 C3                  <2> ret
  6940                              <2> 
  6941                              <2> MBUFFUL:
  6942 000058C7 66B96400            <2>   mov cx, 100
  6943                              <2>  .mn:
  6944 000058CB E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6945 000058CD A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6946 000058CF 7402                <2>   jz  .mnn
  6947 000058D1 E2F8                <2>   loop .mn
  6948                              <2>  .mnn:
  6949 000058D3 C3                  <2> ret
  6950                              <2> 
  6951                              <2> 
  6952                              <2> ACTMOUS:
  6953 000058D4 E8E4FFFFFF          <2>   call WMOUS
  6954 000058D9 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6955 000058DB E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6956 000058DD E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6957 000058E2 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6958 000058E7 C3                  <2> ret
  6959                              <2> 
  6960                              <2> CHKMOUS:
  6961 000058E8 B300                <2>   mov  bl, 0
  6962 000058EA 66B96400            <2>   mov cx, 100
  6963                              <2>  .vrd:
  6964 000058EE E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6965 000058F0 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6966 000058F2 7504                <2>   jnz .yy
  6967 000058F4 E2F8                <2>   loop .vrd
  6968 000058F6 B301                <2>   mov  bl, 1
  6969                              <2>  .yy:
  6970 000058F8 C3                  <2> ret
  6971                              <2> 
  6972                              <2> GETB:
  6973                              <2>  .cagain:
  6974 000058F9 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6975 000058FE 08DB                <2>   or bl, bl
  6976 00005900 75F7                <2>   jnz .cagain
  6977 00005902 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6978 00005904 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6979 00005906 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6980 0000590B 6631C0              <2>   xor  ax, ax
  6981 0000590E E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6982 00005910 88C2                <2>   mov  dl, al
  6983 00005912 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6984 00005914 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6985 00005916 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6986 0000591B 88D0                <2>   mov  al, dl
  6987 0000591D C3                  <2> ret
  6988                              <2> 
  6989 0000591E 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6990 0000591F 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6991 00005920 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6992 00005921 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6993 00005922 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6994                              <1> %endif
  6995                              <1> %include "source/drivers/sound/pcspkr.asm"
  6996                              <2> ;PC Speaker Drivers
  6997                              <2> PCSpeakerRAW:
  6998 00005923 60                  <2> 	pusha
  6999                              <2> nosoundrep:
  7000 00005924 8B35[68020000]      <2> 	mov esi, [soundpos]
  7001 0000592A 31C9                <2> 	xor ecx, ecx
  7002 0000592C 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  7003 00005933 6681F90000          <2> 	cmp cx, 0
  7004 00005938 0F8548000000        <2> 	jne near donesetpitch
  7005 0000593E 668B0E              <2> 	mov cx, [esi]
  7006 00005941 668B5E02            <2> 	mov bx, [esi + 2]
  7007 00005945 66890D[66020000]    <2> 	mov [soundrepititions], cx
  7008 0000594C 81C604000000        <2> 	add esi, 4
  7009 00005952 8935[68020000]      <2> 	mov [soundpos], esi
  7010 00005958 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  7011 0000595E 7735                <2> 	ja stopsound
  7012 00005960 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  7013 00005968 00                  <2>
  7014 00005969 74B9                <2> 	je nosoundrep
  7015 0000596B 6681FB0000          <2> 	cmp bx, 0
  7016 00005970 740F                <2> 	je nosoundplay
  7017 00005972 E840000000          <2> 	call setpitch
  7018 00005977 E849000000          <2> 	call startsound
  7019 0000597C E905000000          <2> 	jmp donesetpitch
  7020                              <2> nosoundplay:
  7021 00005981 E846000000          <2> 	call killsound
  7022                              <2> donesetpitch:
  7023 00005986 6649                <2> 	dec cx
  7024 00005988 66890D[66020000]    <2> 	mov [soundrepititions], cx
  7025 0000598F 61                  <2> 	popa
  7026 00005990 E910A9FFFF          <2> 	jmp timerinterrupt
  7027                              <2> stopsound:
  7028 00005995 31C0                <2> 	xor eax, eax
  7029 00005997 66A3[66020000]      <2> 	mov [soundrepititions], ax
  7030 0000599D A2[65020000]        <2> 	mov [soundon], al
  7031 000059A2 A3[68020000]        <2> 	mov [soundpos], eax
  7032 000059A7 A3[6C020000]        <2> 	mov [soundendpos], eax
  7033 000059AC E81B000000          <2> 	call killsound
  7034 000059B1 61                  <2> 	popa
  7035 000059B2 E9EEA8FFFF          <2> 	jmp timerinterrupt
  7036                              <2> 
  7037                              <2> 
  7038                              <2> setpitch:
  7039 000059B7 B0B6                <2> 	mov al, 0xB6
  7040 000059B9 E643                <2> 	out 0x43, al
  7041 000059BB 6689D8              <2> 	mov ax, bx
  7042 000059BE E642                <2> 	out 0x42, al
  7043 000059C0 88E0                <2> 	mov al, ah
  7044 000059C2 E642                <2> 	out 0x42, al
  7045 000059C4 C3                  <2> 	ret
  7046                              <2> startsound:
  7047 000059C5 E461                <2> 	in al, 0x61
  7048 000059C7 0C03                <2> 	or al, 3
  7049 000059C9 E661                <2> 	out 0x61, al
  7050 000059CB C3                  <2> 	ret
  7051                              <2> killsound:
  7052 000059CC E461                <2> 	in al, 0x61
  7053 000059CE 24FC                <2> 	and al, 0xFC
  7054 000059D0 E661                <2> 	out 0x61, al
  7055 000059D2 C3                  <2> 	ret
  7056                              <2> 	
  7057                              <1> %ifdef sound.included
  7058                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7059                              <2> ;Sound Blaster Drivers
  7060                              <2> sblaster:
  7061                              <2> .init:
  7062 000059D3 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7063 000059D8 A2[095C0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7064 000059DD 3C00                <2> 		cmp al, 0
  7065 000059DF 7418                <2> 		je .noinit
  7066 000059E1 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7067 000059E3 E8FB010000          <2> 		call WriteDSP
  7068 000059E8 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7069 000059EA E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7070 000059EF BE[FA590000]        <2> 		mov esi, .initmsg
  7071 000059F4 E826C3FFFF          <2> 		call print
  7072                              <2> .noinit:
  7073 000059F9 C3                  <2> 		ret
  7074 000059FA 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7075 00005A03 74657220496E697469- <2>
  7076 00005A0C 616C697A65640A00    <2>
  7077                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7078 00005A14 813D[F35B0000]0000- <2> 	cmp dword [Length0], 0
  7079 00005A1C 0000                <2>
  7080 00005A1E 0F8462000000        <2> 	je near .done
  7081 00005A24 FF0D[F35B0000]      <2> 	dec dword [Length0]
  7082 00005A2A E908000000          <2> 	jmp .notodd
  7083                              <2> .oddlength:
  7084 00005A2F 31C9                <2> 	xor ecx, ecx
  7085 00005A31 880D[F25B0000]      <2> 	mov [OddLength], cl
  7086                              <2> .notodd:
  7087 00005A37 8B35[F95B0000]      <2> 	mov esi, [NextMemLoc]
  7088 00005A3D 31C9                <2> 	xor ecx, ecx
  7089 00005A3F 668B0D[F75B0000]    <2> 	mov cx, [Length1]
  7090 00005A46 D1E9                <2> 	shr ecx, 1
  7091 00005A48 6641                <2> 	inc cx
  7092 00005A4A 31DB                <2> 	xor ebx, ebx
  7093 00005A4C 668B1D[015C0000]    <2> 	mov bx, [SegLoc]
  7094 00005A53 6601CB              <2> 	add bx, cx
  7095 00005A56 66891D[015C0000]    <2> 	mov [SegLoc], bx
  7096 00005A5D 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7097 00005A63 8935[FD5B0000]      <2> 	mov [MemLoc], esi
  7098 00005A69 89C8                <2> 	mov eax, ecx
  7099 00005A6B 01F0                <2> 	add eax, esi
  7100 00005A6D A3[F95B0000]        <2> 	mov [NextMemLoc], eax
  7101 00005A72 E833000000          <2> 	call DMACopy
  7102                              <2> 	;call DMAPlay
  7103 00005A77 E8E0000000          <2> 	call PlayDSP
  7104 00005A7C 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7105 00005A80 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7106 00005A81 E9D7A8FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7107                              <2> .done:
  7108 00005A86 803D[F25B0000]01    <2> 	cmp byte [OddLength], 1
  7109 00005A8D 74A0                <2> 	je .oddlength
  7110 00005A8F 31C0                <2> 	xor eax, eax
  7111 00005A91 66A3[F75B0000]      <2> 	mov [Length1], ax
  7112 00005A97 66B8D000            <2> 	mov ax, 0xD0
  7113 00005A9B E843010000          <2> 	call WriteDSP
  7114 00005AA0 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7115 00005AA4 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7116 00005AA5 E9B3A8FFFF          <2> 	jmp handled2
  7117                              <2> 	
  7118                              <2> DMACopy:
  7119 00005AAA 66B80800            <2> 		mov ax, LINEAR_SEL
  7120 00005AAE 8EE0                <2> 		mov fs, ax
  7121 00005AB0 C1E902              <2> 		shr ecx, 2
  7122                              <2> .loop:
  7123 00005AB3 8B06                <2> 		mov eax, [esi]
  7124 00005AB5 648903              <2> 		mov [fs:ebx], eax
  7125 00005AB8 81C604000000        <2> 		add esi, 4
  7126 00005ABE 81C304000000        <2> 		add ebx, 4
  7127 00005AC4 E2ED                <2> 		loop .loop
  7128 00005AC6 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7129 00005ACA 8EE0                <2> 		mov fs, ax
  7130 00005ACC C3                  <2> 		ret
  7131                              <2> 		
  7132                              <2> 
  7133                              <2> DMAPlay:    ;uses eax ebx edx
  7134 00005ACD C605[035C0000]00    <2> 		mov	byte [Page1],00h
  7135                              <2> 
  7136 00005AD4 B005                <2> 		mov	al,(Channel+4)
  7137 00005AD6 66BA0A00            <2> 		mov	dx,0Ah
  7138 00005ADA EE                  <2> 		out	dx,al
  7139 00005ADB 30C0                <2> 		xor	al,al
  7140 00005ADD 66BA0C00            <2> 		mov	dx,0Ch
  7141 00005AE1 EE                  <2> 		out	dx,al
  7142 00005AE2 B059                <2> 		mov	al,ModeReg
  7143 00005AE4 66BA0B00            <2> 		mov	dx,0Bh
  7144 00005AE8 EE                  <2> 		out	dx,al
  7145 00005AE9 B800000800          <2> 		mov	eax,0x80000
  7146 00005AEE 66BA0200            <2> 		mov	dx,AddPort
  7147 00005AF2 EE                  <2> 		out	dx,al
  7148 00005AF3 86C4                <2> 		xchg al,ah
  7149 00005AF5 EE                  <2> 		out	dx,al
  7150 00005AF6 B800000800          <2> 		mov	eax,0x80000
  7151 00005AFB 89C2                <2> 		mov	edx,eax
  7152 00005AFD 2500000100          <2> 		and	eax,65536
  7153 00005B02 7406                <2> 		jz	MemLocN1
  7154 00005B04 FE05[035C0000]      <2> 		inc	byte [Page1]
  7155                              <2> MemLocN1:
  7156 00005B0A 89D0                <2> 		mov	eax,edx
  7157 00005B0C 2500000200          <2> 		and	eax,131072
  7158 00005B11 7407                <2> 		jz	MemLocN2
  7159 00005B13 8005[035C0000]02    <2> 		add	byte [Page1],02
  7160                              <2> MemLocN2:
  7161 00005B1A 89D0                <2> 		mov	eax,edx
  7162 00005B1C 2500000400          <2> 		and	eax,262144
  7163 00005B21 7407                <2> 		jz	MemLocN3
  7164 00005B23 8005[035C0000]04    <2> 		add	byte [Page1],04
  7165                              <2> MemLocN3:
  7166 00005B2A 89D0                <2> 		mov	eax,edx
  7167 00005B2C 2500000800          <2> 		and	eax,524288
  7168 00005B31 7407                <2> 		jz	MemLocN4
  7169 00005B33 8005[035C0000]08    <2> 		add	byte [Page1],08
  7170                              <2> MemLocN4:
  7171 00005B3A 66BA8300            <2> 		mov	dx,PgPort
  7172 00005B3E A0[035C0000]        <2> 		mov	al,[Page1]
  7173 00005B43 EE                  <2> 		out	dx,al
  7174 00005B44 66BA0300            <2> 		mov	dx,LenPort
  7175 00005B48 66A1[F75B0000]      <2> 		mov	ax,[Length1]
  7176 00005B4E 6648                <2> 		dec ax
  7177 00005B50 EE                  <2> 		out	dx,al
  7178 00005B51 86C4                <2> 		xchg al,ah
  7179 00005B53 EE                  <2> 		out	dx,al
  7180 00005B54 66BA0A00            <2> 		mov	dx,0Ah
  7181 00005B58 B001                <2> 		mov	al,Channel
  7182 00005B5A EE                  <2> 		out	dx,al
  7183 00005B5B C3                  <2> 		ret
  7184                              <2> 		
  7185                              <2> PlayDSP:
  7186 00005B5C B040                <2> 		mov	al,40h
  7187 00005B5E E880000000          <2> 		call WriteDSP
  7188 00005B63 31D2                <2> 		xor	edx,edx
  7189 00005B65 B840420F00          <2> 		mov	eax,1000000
  7190 00005B6A 8B1D[045C0000]      <2> 		mov	ebx,[Freq]
  7191 00005B70 F7F3                <2> 		div	ebx
  7192 00005B72 89C3                <2> 		mov	ebx,eax
  7193 00005B74 B800010000          <2> 		mov	eax,256
  7194 00005B79 29D8                <2> 		sub	eax,ebx
  7195 00005B7B E863000000          <2> 		call WriteDSP
  7196 00005B80 A0[085C0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7197 00005B85 E859000000          <2> 		call WriteDSP
  7198 00005B8A 66A1[F75B0000]      <2> 		mov	ax,[Length1]
  7199 00005B90 66D1E8              <2> 		shr ax, 1
  7200 00005B93 E84B000000          <2> 		call WriteDSP
  7201 00005B98 86C4                <2> 		xchg al,ah
  7202 00005B9A E844000000          <2> 		call WriteDSP
  7203 00005B9F C3                  <2> 		ret
  7204                              <2> 
  7205                              <2> MstrVol:    ;uses ax dx
  7206 00005BA0 6650                <2> 	   push ax
  7207 00005BA2 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7208 00005BA6 B022                <2> 	   mov	al,22h
  7209 00005BA8 EE                  <2> 	   out	dx,al
  7210 00005BA9 6658                <2> 	   pop	ax
  7211 00005BAB 6642                <2> 	   inc	dx
  7212 00005BAD EE                  <2> 	   out	dx,al
  7213 00005BAE C3                  <2> 	   ret
  7214                              <2> 	   
  7215                              <2> ResetDSP:   ; uses cx dx
  7216 00005BAF 66BA2602            <2> 			mov	dx,(BasePort+6)
  7217 00005BB3 B001                <2> 			mov	al,01
  7218 00005BB5 EE                  <2> 			out	dx,al
  7219 00005BB6 66B93200            <2> 			mov	cx,50
  7220 00005BBA EC                  <2> WaitIt1:	in	al,dx
  7221 00005BBB E2FD                <2> 			loop WaitIt1
  7222 00005BBD 30C0                <2> 			xor	al,al
  7223 00005BBF EE                  <2> 			out	dx,al
  7224 00005BC0 66B93200            <2> 			mov	cx,50
  7225 00005BC4 EC                  <2> WaitIt2:	in	al,dx
  7226 00005BC5 E2FD                <2> 			loop WaitIt2
  7227 00005BC7 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7228 00005BC9 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7229 00005BCD EC                  <2> 			in	al,dx
  7230 00005BCE 2480                <2> 			and	al,80h
  7231 00005BD0 3C80                <2> 			cmp	al,80h
  7232 00005BD2 750C                <2> 			jne	ResetErr
  7233 00005BD4 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7234 00005BD8 EC                  <2> 			in	al,dx
  7235 00005BD9 3CAA                <2> 			cmp	al,0AAh
  7236 00005BDB 7503                <2> 			jne	ResetErr
  7237 00005BDD B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7238 00005BDF C3                  <2> 			ret
  7239 00005BE0 30C0                <2> ResetErr:	xor al, al
  7240 00005BE2 C3                  <2> 			ret
  7241                              <2> 
  7242                              <2> WriteDSP:   ;uses ax dx
  7243 00005BE3 6650                <2> 		push ax
  7244 00005BE5 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7245 00005BE9 EC                  <2> WaitIt:	in	al,dx
  7246 00005BEA 2480                <2> 		and	al,80h
  7247 00005BEC 75FB                <2> 		jnz	WaitIt
  7248 00005BEE 6658                <2> 		pop	ax
  7249 00005BF0 EE                  <2> 		out	dx,al
  7250 00005BF1 C3                  <2> 		ret
  7251                              <2> 
  7252 00005BF2 00                  <2> OddLength db 0
  7253 00005BF3 00000000            <2> Length0 dd	0
  7254 00005BF7 0000                <2> Length1	dw  0
  7255 00005BF9 00000000            <2> NextMemLoc dd 0
  7256 00005BFD 00000000            <2> MemLoc	dd  0
  7257 00005C01 0000                <2> SegLoc  dw 0
  7258 00005C03 00                  <2> Page1	db  0
  7259 00005C04 00000000            <2> Freq	dd	0
  7260 00005C08 14                  <2> WAVEMode db 14h
  7261                              <2> PgPort	equ 83h
  7262                              <2> AddPort	equ 02h
  7263                              <2> LenPort	equ 03h
  7264                              <2> ModeReg	equ 59h
  7265                              <2> Channel	equ 01h
  7266                              <2> BasePort	equ 220h
  7267 00005C09 00                  <2> SoundBlaster	db 0
  7268                              <1> %endif
  7269                              <1> %ifdef io.serial
  7270                              <1> 	%include "source/drivers/input/serial.asm"
  7271                              <1> %else
  7272                              <1> 	%include "source/drivers/input/keyboard.asm"
  7273 00005C0A 00                  <2> specialkey db 0
  7274 00005C0B 00                  <2> charregion db 0
  7275                              <2> waitforinput:		;;this is basically the idle process
  7276                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7277                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7278 00005C0C 6631C0              <2> 	xor ax, ax
  7279 00005C0F A0[13650000]        <2> 	mov al, [threadson]
  7280 00005C14 8825[13650000]      <2> 	mov [threadson], ah
  7281 00005C1A FB                  <2> 	sti
  7282 00005C1B F4                  <2> 	hlt
  7283 00005C1C A2[13650000]        <2> 	mov [threadson], al
  7284 00005C21 3A25[3D220000]      <2> 	cmp ah, [trans]
  7285 00005C27 7401                <2> 	je getkey
  7286 00005C29 C3                  <2> 	ret
  7287                              <2> getkey:
  7288 00005C2A 31C0                <2> 		xor eax, eax
  7289 00005C2C A2[0A5C0000]        <2> 		mov [specialkey], al
  7290 00005C31 66A3[3B220000]      <2> 		mov [lastkey], ax
  7291 00005C37 E464                <2> 		in al, 64h ; Status
  7292                              <2> 	%ifdef gui.included
  7293 00005C39 A820                <2> 		test al, 20h ; PS2-Mouse?
  7294 00005C3B 0F852FFAFFFF        <2> 		jnz near moused
  7295                              <2> 	%endif
  7296 00005C41 A801                <2> 		test al, 1 
  7297 00005C43 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7298                              <2> 	calckey:
  7299 00005C45 E460                <2> 		in al, 60h
  7300 00005C47 88C4                <2> 		mov ah, al
  7301 00005C49 30C0                <2> 		xor al, al
  7302 00005C4B 8825[3C220000]      <2> 		mov [lastkey + 1], ah
  7303 00005C51 88E0                <2> 		mov al, ah
  7304 00005C53 BF[EC5D0000]        <2> 		mov edi, scancode
  7305                              <2> 	searchscan: 
  7306 00005C58 3C3A                <2> 		cmp al, 3Ah
  7307 00005C5A 731A                <2> 		jae scanother
  7308 00005C5C 30E4                <2> 		xor ah, ah
  7309 00005C5E C0E002              <2> 		shl al, 2
  7310 00005C61 01C7                <2> 		add edi, eax
  7311 00005C63 D0E8                <2> 		shr al, 1
  7312 00005C65 01C7                <2> 		add edi, eax
  7313 00005C67 D0E8                <2> 		shr al, 1
  7314 00005C69 8A27                <2> 		mov ah, [edi]
  7315 00005C6B 80FC00              <2> 		cmp ah, 0
  7316 00005C6E 7406                <2> 		je scanother
  7317 00005C70 E9D7000000          <2> 		jmp scanfound
  7318 00005C75 00                  <2> uppercase db 0
  7319                              <2> scanother:
  7320 00005C76 88C4                <2> 		mov ah, al
  7321 00005C78 30C0                <2> 		xor al, al
  7322 00005C7A 66A3[3B220000]      <2> 		mov [lastkey], ax
  7323 00005C80 80FCE0              <2> 		cmp ah, 0E0h
  7324 00005C83 0F847D000000        <2> 		je near getkeyspecial
  7325 00005C89 803D[0A5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7326 00005C90 752B                <2> 		jne nospecialkey
  7327 00005C92 80FC38              <2> 		cmp ah, 38h
  7328 00005C95 0F84A0000000        <2> 		je near alton
  7329 00005C9B 80FCB8              <2> 		cmp ah, 0B8h
  7330 00005C9E 0F849F000000        <2> 		je near altoff
  7331 00005CA4 80FC1D              <2> 		cmp ah, 1Dh
  7332 00005CA7 0F847E000000        <2> 		je near ctron
  7333 00005CAD 80FC9D              <2> 		cmp ah, 9Dh
  7334 00005CB0 0F847D000000        <2> 		je near ctroff
  7335 00005CB6 66A3[3B220000]      <2> 		mov [lastkey], ax
  7336 00005CBC C3                  <2> 		ret
  7337                              <2> nospecialkey:
  7338 00005CBD 80FC2A              <2> 		cmp ah, 2Ah
  7339 00005CC0 0F8455000000        <2> 		je near shifton
  7340 00005CC6 80FC36              <2> 		cmp ah, 36h
  7341 00005CC9 0F844C000000        <2> 		je near shifton
  7342 00005CCF 80FC1C              <2> 		cmp ah, 1Ch
  7343 00005CD2 0F8473000000        <2> 		je near entdown
  7344 00005CD8 80FCAA              <2> 		cmp ah, 0AAh
  7345 00005CDB 0F8442000000        <2> 		je near shiftoff
  7346 00005CE1 80FCB6              <2> 		cmp ah, 0B6h
  7347 00005CE4 0F8439000000        <2> 		je near shiftoff
  7348 00005CEA 80FC3A              <2> 		cmp ah, 3Ah
  7349 00005CED 0F84A5000000        <2> 		je near capslock
  7350 00005CF3 80FC45              <2> 		cmp ah, 0x45
  7351 00005CF6 0F84AD000000        <2> 		je near numlock
  7352 00005CFC 80FC46              <2> 		cmp ah, 0x46
  7353 00005CFF 0F84BC000000        <2> 		je near scrolllock
  7354 00005D05 C3                  <2> 		ret
  7355                              <2> 	getkeyspecial:
  7356 00005D06 C605[0A5C0000]E0    <2> 		mov byte [specialkey], 0xE0
  7357 00005D0D E933FFFFFF          <2> 		jmp calckey
  7358                              <2> 	shift:
  7359 00005D12 A0[755C0000]        <2> 		mov al, [uppercase]
  7360 00005D17 3C01                <2> 		cmp al, 1
  7361 00005D19 7308                <2> 		jae shiftoff
  7362                              <2> 	shifton:
  7363 00005D1B C605[755C0000]01    <2> 		mov byte [uppercase], 1
  7364 00005D22 C3                  <2> 		ret
  7365                              <2> 	shiftoff:
  7366 00005D23 C605[755C0000]00    <2> 		mov byte [uppercase], 0
  7367 00005D2A C3                  <2> 		ret
  7368                              <2> 	ctron:
  7369 00005D2B C605[975D0000]01    <2> 		mov byte [ctrkey], 1
  7370 00005D32 C3                  <2> 		ret
  7371                              <2> 	ctroff:
  7372 00005D33 C605[975D0000]00    <2> 		mov byte [ctrkey], 0
  7373 00005D3A C3                  <2> 		ret
  7374                              <2> 	alton:
  7375 00005D3B C605[965D0000]01    <2> 		mov byte [altkey], 1
  7376 00005D42 C3                  <2> 		ret
  7377                              <2> 	altoff:
  7378 00005D43 C605[965D0000]00    <2> 		mov byte [altkey], 0
  7379 00005D4A C3                  <2> 		ret
  7380                              <2> 	entdown:
  7381 00005D4B C3                  <2> 		ret
  7382                              <2> 	scanfound:
  7383 00005D4C 81C704000000        <2> 		add edi, 4
  7384 00005D52 803D[975D0000]01    <2> 		cmp byte [ctrkey], 1
  7385 00005D59 731B                <2> 		jae altin
  7386 00005D5B 81EF04000000        <2> 		sub edi, 4
  7387 00005D61 81C702000000        <2> 		add edi, 2
  7388 00005D67 803D[965D0000]01    <2> 		cmp byte [altkey], 1
  7389 00005D6E 7306                <2> 		jae altin
  7390 00005D70 81EF02000000        <2> 		sub edi, 2
  7391                              <2> altin:
  7392 00005D76 81C701000000        <2> 		add edi, 1
  7393 00005D7C 803D[755C0000]01    <2> 		cmp byte [uppercase], 1
  7394 00005D83 7306                <2> 		jae uppercaseon
  7395 00005D85 81EF01000000        <2> 		sub edi, 1
  7396                              <2> uppercaseon:
  7397 00005D8B 8A07                <2> 		mov al,[edi]
  7398 00005D8D A2[3B220000]        <2> 		mov [lastkey], al
  7399 00005D92 C3                  <2> 		ret
  7400                              <2> 		
  7401 00005D93 00                  <2> keyboardstatus db 0
  7402 00005D94 00                  <2> numlockstatus db 0
  7403 00005D95 00                  <2> scrolllockstatus db 0
  7404 00005D96 00                  <2> altkey db 0
  7405 00005D97 00                  <2> ctrkey db 0
  7406                              <2> 	capslock:
  7407 00005D98 8035[935D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7408 00005D9F E835000000          <2> 		call updatekblights
  7409 00005DA4 E969FFFFFF          <2> 		jmp shift
  7410                              <2> 		
  7411                              <2> 	numlock:
  7412 00005DA9 8035[935D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7413 00005DB0 8035[945D0000]01    <2> 		xor byte [numlockstatus], 1
  7414 00005DB7 E81D000000          <2> 		call updatekblights
  7415 00005DBC E969FEFFFF          <2> 		jmp getkey
  7416                              <2> 	
  7417                              <2> 	scrolllock:
  7418 00005DC1 8035[935D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7419 00005DC8 8035[955D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7420 00005DCF E805000000          <2> 		call updatekblights
  7421 00005DD4 E951FEFFFF          <2> 		jmp getkey
  7422                              <2> 		
  7423                              <2> 	updatekblights:
  7424 00005DD9 B0ED                <2> 		mov al, 0xED
  7425 00005DDB 66BA6000            <2> 		mov dx, 0x60
  7426 00005DDF EE                  <2> 		out dx, al
  7427                              <2> 	chkkbdack:
  7428 00005DE0 EC                  <2> 		in al, dx
  7429 00005DE1 3CFA                <2> 		cmp al, 0xFA
  7430 00005DE3 75FB                <2> 		jne chkkbdack
  7431 00005DE5 A0[935D0000]        <2> 		mov al, [keyboardstatus]
  7432 00005DEA EE                  <2> 		out dx, al
  7433 00005DEB C3                  <2> 		ret
  7434                              <2> 		
  7435                              <2> scancode:
  7436                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY
  7437 00005DEC 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7438 00005DF2 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7439 00005DF8 3121AD130000        <2> 	db '1','!',0xAD,0x13,0,0	;2h
  7440 00005DFE 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7441 00005E04 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7442 00005E0A 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7443 00005E10 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7444 00005E16 365EACFC0000        <2> 	db '6','^',0xAC,0xFC,0,0	;7h
  7445 00005E1C 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7446 00005E22 382AEC070000        <2> 	db '8','*',0xEC,0x7,0,0		;9h
  7447 00005E28 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7448 00005E2E 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7449 00005E34 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7450 00005E3A 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7451 00005E40 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7452 00005E46 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7453 00005E4C 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7454 00005E52 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7455 00005E58 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7456 00005E5E 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7457 00005E64 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7458 00005E6A 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7459 00005E70 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7460 00005E76 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7461 00005E7C 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7462 00005E82 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7463 00005E88 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7464 00005E8E 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7465 00005E94 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7466 00005E9A 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7467 00005EA0 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7468 00005EA6 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7469 00005EAC 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7470 00005EB2 66469F0CEDE8        <2> 	db 'f','F',159,0xC,237,232	;21h
  7471 00005EB8 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7472 00005EBE 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7473 00005EC4 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7474 00005ECA 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7475 00005ED0 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7476 00005ED6 3B3A14DC0000        <2> 	db ';',':',20,0xDC,0,0			;27h
  7477 00005EDC 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7478 00005EE2 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7479 00005EE8 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7480 00005EEE 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7481 00005EF4 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7482 00005EFA 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7483 00005F00 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7484 00005F06 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7485 00005F0C 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7486 00005F12 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7487 00005F18 6D4D0E0BE64D        <2> 	db 'm','M',0xE,0xB,230,'M'		;32h
  7488 00005F1E 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7489 00005F24 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7490 00005F2A 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7491 00005F30 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7492 00005F36 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7493 00005F3C 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7494 00005F42 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7495                              <2> noscan:
  7496                              <2> 
  7497                              <1> %endif
  7498                              <1> ;drivers will soon be handled intelligently
  7499                              <1> ;every driver's source will be scanned for a .init function
  7500                              <1> ;that will be called and if it returns 0
  7501                              <1> ;the hardware was found and the driver initialized properly
  7502                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7503                              <1> 	%ifdef sound.included
  7504 00005F48 E886FAFFFF          <1> 		call sblaster.init
  7505                              <1> 	%endif
  7506                              <1> 	%ifdef network.included
  7507 00005F4D E85D210000          <1> 		call network.init
  7508                              <1> 	%endif
  7509 00005F52 C3                  <1> 	ret
  7510                              <1> initialize:
  7511                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7512 00005F53 E814000000          <1> 	call .pic
  7513                              <1> %ifdef terminal.vsync
  7514                              <1> 	call .rtc
  7515                              <1> %endif
  7516 00005F58 E871000000          <1> 	call .pit
  7517 00005F5D E893000000          <1> 	call .fpu
  7518 00005F62 E8A4000000          <1> 	call .sse
  7519 00005F67 31C0                <1> 	xor eax, eax
  7520 00005F69 31C9                <1> 	xor ecx, ecx
  7521                              <1> %ifdef io.serial
  7522                              <1> 	call serial.init
  7523                              <1> %endif
  7524 00005F6B C3                  <1> 	ret
  7525                              <1> 	
  7526                              <1> .pic:
  7527 00005F6C B011                <1> 	mov al, 0x11
  7528 00005F6E E620                <1> 	out 0x20, al
  7529 00005F70 E6A0                <1> 	out 0xA0, al
  7530 00005F72 B040                <1> 	mov al, 0x40	;interrupt for master
  7531 00005F74 E621                <1> 	out 0x21, al
  7532 00005F76 B048                <1> 	mov al, 0x48	;interrupt for slave
  7533 00005F78 E6A1                <1> 	out 0xA1, al
  7534 00005F7A B004                <1> 	mov al, 4
  7535 00005F7C E621                <1> 	out 0x21, al
  7536 00005F7E B002                <1> 	mov al, 2
  7537 00005F80 E6A1                <1> 	out 0xA1, al
  7538 00005F82 B001                <1> 	mov al, 0x1
  7539 00005F84 E621                <1> 	out 0x21, al
  7540 00005F86 B001                <1> 	mov al, 0x1
  7541 00005F88 E6A1                <1> 	out 0xA1, al
  7542                              <1> 	;masks are set to zero so as not to mask
  7543 00005F8A 30C0                <1> 	xor al, al
  7544 00005F8C E621                <1> 	out 0x21, al
  7545 00005F8E 30C0                <1> 	xor al, al
  7546 00005F90 E6A1                <1> 	out 0xA1, al
  7547 00005F92 B020                <1> 	mov al, 0x20
  7548 00005F94 E6A0                <1> 	out 0xA0, al
  7549 00005F96 E620                <1> 	out 0x20, al
  7550 00005F98 C3                  <1> 	ret
  7551                              <1> .rtc:
  7552 00005F99 B008                <1> 	mov al, 0x8
  7553 00005F9B 88C4                <1> 	mov ah, al
  7554 00005F9D 66BA7000            <1> 	mov dx, 0x70
  7555 00005FA1 EE                  <1> 	out dx, al
  7556 00005FA2 6642                <1> 	inc dx
  7557 00005FA4 EC                  <1> 	in al, dx
  7558 00005FA5 86C4                <1> 	xchg al, ah
  7559 00005FA7 664A                <1> 	dec dx
  7560 00005FA9 EE                  <1> 	out dx, al
  7561 00005FAA 6642                <1> 	inc dx
  7562 00005FAC 86C4                <1> 	xchg al, ah
  7563 00005FAE 0C40                <1> 	or al, 0x40
  7564 00005FB0 EE                  <1> 	out dx, al
  7565                              <1> 	
  7566 00005FB1 B00A                <1> 	mov al, 0xA
  7567 00005FB3 664A                <1> 	dec dx
  7568 00005FB5 EE                  <1> 	out dx, al
  7569 00005FB6 86C4                <1> 	xchg al, ah
  7570 00005FB8 6642                <1> 	inc dx
  7571 00005FBA EC                  <1> 	in al, dx
  7572 00005FBB 24F0                <1> 	and al, 0xF0
  7573 00005FBD 0A05[01030000]      <1> 	or al, [rtcrate]
  7574 00005FC3 86C4                <1> 	xchg al, ah
  7575 00005FC5 664A                <1> 	dec dx
  7576 00005FC7 EE                  <1> 	out dx, al
  7577 00005FC8 6642                <1> 	inc dx
  7578 00005FCA 86C4                <1> 	xchg al, ah
  7579 00005FCC EE                  <1> 	out dx, al
  7580 00005FCD C3                  <1> 	ret
  7581                              <1> 	
  7582                              <1> .pit:
  7583                              <1> 	;initialize the PIT
  7584 00005FCE 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7585 00005FD4 E640                <1> 	out 0x40, al
  7586 00005FD6 66C1C008            <1> 	rol ax, 8
  7587 00005FDA E640                <1> 	out 0x40, al
  7588                              <1> 	;enable rtc interrupt
  7589 00005FDC B00B                <1> 	mov al, 0xB
  7590 00005FDE E670                <1> 	out 0x70, al
  7591 00005FE0 66C1C008            <1> 	rol ax, 8
  7592 00005FE4 E471                <1> 	in al, 0x71
  7593 00005FE6 66C1C008            <1> 	rol ax, 8
  7594 00005FEA E670                <1> 	out 0x70, al
  7595 00005FEC 66C1C008            <1> 	rol ax, 8
  7596 00005FF0 0C40                <1> 	or al, 0x40
  7597 00005FF2 E671                <1> 	out 0x71, al
  7598 00005FF4 C3                  <1> 	ret
  7599                              <1> .fpu:
  7600                              <1> 	;And now to initialize the fpu
  7601 00005FF5 0F20E0              <1> 	mov eax, cr4
  7602 00005FF8 0D00020000          <1> 	or eax, 0x200
  7603 00005FFD 0F22E0              <1> 	mov cr4, eax
  7604 00006000 B87F0B0000          <1> 	mov eax, 0xB7F
  7605 00006005 50                  <1> 	push eax
  7606 00006006 D92C24              <1> 	fldcw [esp]
  7607 00006009 58                  <1> 	pop eax
  7608 0000600A C3                  <1> 	ret
  7609                              <1> 	
  7610                              <1> .sse:
  7611 0000600B 0F20C0              <1> 	mov eax, cr0
  7612 0000600E 24FB                <1> 	and al, 11111011b
  7613 00006010 0C02                <1> 	or al, 00000010b
  7614 00006012 0F22C0              <1> 	mov cr0, eax
  7615 00006015 0F20E0              <1> 	mov eax, cr4
  7616 00006018 660D0006            <1> 	or ax, 0000011000000000b
  7617 0000601C 0F22E0              <1> 	mov cr4, eax
  7618 0000601F C3                  <1> 	ret
  7619                                      %include "source/pci.asm"
  7620 00006020 00                  <1> pcibus		db 0
  7621 00006021 00                  <1> pcidevice	db 0
  7622 00006022 00                  <1> pcifunction	db 0
  7623 00006023 00                  <1> pciregister	db 0
  7624 00006024 00                  <1> pcireqtype	db 0
  7625 00006025 00000000            <1> pcidevid	dd 0
  7626 00006029 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7627                              <1> getpcimem:
  7628 0000602D B002                <1> 	mov al, 2
  7629 0000602F A2[24600000]        <1> 	mov [pcireqtype], al
  7630 00006034 E922000000          <1> 	jmp searchpci
  7631                              <1> getpciport:
  7632 00006039 B001                <1> 	mov al, 1
  7633 0000603B A2[24600000]        <1> 	mov [pcireqtype], al
  7634 00006040 E916000000          <1> 	jmp searchpci
  7635                              <1> pcidump:
  7636 00006045 31C0                <1> 	xor eax, eax
  7637 00006047 A2[22600000]        <1> 	mov [pcifunction], al
  7638 0000604C A2[20600000]        <1> 	mov [pcibus], al
  7639 00006051 A2[21600000]        <1> 	mov [pcidevice], al
  7640 00006056 A2[24600000]        <1> 	mov [pcireqtype], al
  7641                              <1> searchpci:		;;return in ebx, start X in pciX
  7642 0000605B 30C0                <1> 	xor al, al
  7643 0000605D A2[23600000]        <1> 	mov [pciregister], al
  7644 00006062 E817020000          <1> 	call getpciaddr
  7645 00006067 BAF80C0000          <1> 	mov edx, 0xCF8
  7646 0000606C EF                  <1> 	out dx, eax	;;request pci config
  7647 0000606D BAFC0C0000          <1> 	mov edx, 0xCFC
  7648 00006072 ED                  <1> 	in eax, dx 	;;read in pci config
  7649 00006073 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7650 00006078 0F8237000000        <1> 	jb near checkpcidevice
  7651                              <1> searchpciret:
  7652                              <1> nextpcidevice:
  7653 0000607E 30C0                <1> 	xor al, al
  7654 00006080 A2[22600000]        <1> 	mov [pcifunction], al
  7655 00006085 A0[21600000]        <1> 	mov al, [pcidevice]
  7656 0000608A 3C1F                <1> 	cmp al, 11111b
  7657 0000608C 0F8300010000        <1> 	jae near nextpcibus
  7658 00006092 FEC0                <1> 	inc al
  7659 00006094 A2[21600000]        <1> 	mov [pcidevice], al
  7660 00006099 EBC0                <1> 	jmp searchpci
  7661 0000609B A0[22600000]        <1> 	mov al, [pcifunction]
  7662 000060A0 3C07                <1> 	cmp al, 111b
  7663 000060A2 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7664 000060A8 FEC0                <1> 	inc al
  7665 000060AA A2[22600000]        <1> 	mov [pcifunction], al
  7666 000060AF EBAA                <1> 	jmp searchpci
  7667 000060B1 00000000            <1> pcitype: db 0,0,0,0
  7668                              <1> checkpcidevice:
  7669 000060B5 31C0                <1> 	xor eax, eax
  7670 000060B7 3905[25600000]      <1> 	cmp [pcidevid], eax
  7671 000060BD 0F8430000000        <1> 	je near .good
  7672 000060C3 A2[23600000]        <1> 	mov [pciregister], al	;device id, vendor id
  7673 000060C8 E8B1010000          <1> 	call getpciaddr
  7674 000060CD BAF80C0000          <1> 	mov edx, 0xCF8
  7675 000060D2 EF                  <1> 	out dx, eax
  7676 000060D3 BAFC0C0000          <1> 	mov edx, 0xCFC
  7677 000060D8 ED                  <1> 	in eax, dx
  7678 000060D9 2305[29600000]      <1> 	and eax, [pcidevidmask]
  7679 000060DF 8B1D[25600000]      <1> 	mov ebx, [pcidevid]
  7680 000060E5 231D[29600000]      <1> 	and ebx, [pcidevidmask]
  7681 000060EB 39D8                <1> 	cmp eax, ebx
  7682 000060ED 0F858BFFFFFF        <1> 	jne near searchpciret
  7683                              <1> .good:
  7684 000060F3 30C0                <1> 	xor al, al
  7685 000060F5 3805[24600000]      <1> 	cmp [pcireqtype], al
  7686 000060FB 0F842C000000        <1> 	je near dumppcidevice
  7687 00006101 B008                <1> 	mov al, 0x08
  7688 00006103 A2[23600000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7689 00006108 E871010000          <1> 	call getpciaddr
  7690 0000610D BAF80C0000          <1> 	mov edx, 0xCF8
  7691 00006112 EF                  <1> 	out dx, eax
  7692 00006113 BAFC0C0000          <1> 	mov edx, 0xCFC
  7693 00006118 ED                  <1> 	in eax, dx
  7694 00006119 C1C008              <1> 	rol eax, 8
  7695 0000611C 3A05[B1600000]      <1> 	cmp al, [pcitype]
  7696 00006122 0F84A0000000        <1> 	je near foundpciaddr
  7697 00006128 E951FFFFFF          <1> 	jmp searchpciret
  7698                              <1> dumppcidevice:
  7699 0000612D 30C0                <1> 	xor al, al
  7700 0000612F A2[23600000]        <1> 	mov [pciregister], al
  7701 00006134 E845010000          <1> 	call getpciaddr
  7702 00006139 89C1                <1> 	mov ecx, eax
  7703 0000613B C605[8C2E0000]05    <1> 	mov byte [firsthexshown], 5
  7704 00006142 E85ACDFFFF          <1> 	call showhex
  7705                              <1> dumppcidevicelp:
  7706 00006147 A2[23600000]        <1> 	mov [pciregister], al
  7707 0000614C E82D010000          <1> 	call getpciaddr
  7708 00006151 BAF80C0000          <1> 	mov edx, 0xCF8
  7709 00006156 EF                  <1> 	out dx, eax
  7710 00006157 BAFC0C0000          <1> 	mov edx, 0xCFC
  7711 0000615C ED                  <1> 	in eax, dx
  7712 0000615D 89C1                <1> 	mov ecx, eax
  7713 0000615F A0[23600000]        <1> 	mov al, [pciregister]
  7714 00006164 0404                <1> 	add al, 4
  7715 00006166 C605[8C2E0000]05    <1> 	mov byte [firsthexshown], 5
  7716 0000616D E82FCDFFFF          <1> 	call showhex
  7717 00006172 3C3C                <1> 	cmp al, 0x3C
  7718 00006174 72D1                <1> 	jb dumppcidevicelp
  7719                              <1> dumppcidn:
  7720                              <1> %ifdef io.serial
  7721                              <1> 	mov esi, line
  7722                              <1> 	call print
  7723                              <1> %else
  7724 00006176 803D[39240000]00    <1> 	cmp byte [charpos], 0
  7725 0000617D 0F84FBFEFFFF        <1> 	je near searchpciret
  7726 00006183 BE[5E8D0000]        <1> 	mov esi, line
  7727 00006188 E892BBFFFF          <1> 	call print
  7728                              <1> %endif
  7729 0000618D E9ECFEFFFF          <1> 	jmp searchpciret
  7730                              <1> nextpcibus:
  7731 00006192 30C0                <1> 	xor al, al
  7732 00006194 A2[21600000]        <1> 	mov [pcidevice], al
  7733 00006199 A0[20600000]        <1> 	mov al, [pcibus]
  7734 0000619E 3C7F                <1> 	cmp al, 1111111b
  7735 000061A0 730C                <1> 	jae donesearchpci
  7736 000061A2 FEC0                <1> 	inc al
  7737 000061A4 A2[20600000]        <1> 	mov [pcibus], al
  7738 000061A9 E9ADFEFFFF          <1> 	jmp searchpci
  7739                              <1> donesearchpci:
  7740 000061AE BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7741 000061B3 31D2                <1> 	xor edx, edx
  7742 000061B5 8815[B1600000]      <1> 	mov [pcitype], dl
  7743 000061BB 8915[25600000]      <1> 	mov [pcidevid], edx
  7744 000061C1 891D[29600000]      <1> 	mov [pcidevidmask], ebx
  7745 000061C7 C3                  <1> 	ret
  7746                              <1> foundpciaddr:
  7747 000061C8 B010                <1> 	mov al, 0x10
  7748 000061CA A2[23600000]        <1> 	mov [pciregister], al
  7749 000061CF 803D[24600000]02    <1> 	cmp byte [pcireqtype], 2
  7750 000061D6 7443                <1> 	je findpcimemaddr
  7751                              <1> findpciioaddr:
  7752 000061D8 E8A1000000          <1> 	call getpciaddr
  7753 000061DD BAF80C0000          <1> 	mov edx, 0xCF8
  7754 000061E2 EF                  <1> 	out dx, eax
  7755 000061E3 BAFC0C0000          <1> 	mov edx, 0xCFC
  7756 000061E8 ED                  <1> 	in eax, dx
  7757 000061E9 89C3                <1> 	mov ebx, eax
  7758 000061EB 81E301000000        <1> 	and ebx, 1
  7759 000061F1 81FB00000000        <1> 	cmp ebx, 0
  7760 000061F7 0F8468000000        <1> 	je near notpciioaddr
  7761 000061FD 2D01000000          <1> 	sub eax, 1
  7762 00006202 89C2                <1> 	mov edx, eax
  7763 00006204 31DB                <1> 	xor ebx, ebx
  7764 00006206 4B                  <1> 	dec ebx
  7765 00006207 891D[29600000]      <1> 	mov [pcidevidmask], ebx
  7766 0000620D 43                  <1> 	inc ebx
  7767 0000620E 881D[B1600000]      <1> 	mov [pcitype], bl
  7768 00006214 891D[25600000]      <1> 	mov [pcidevid], ebx
  7769 0000621A C3                  <1> 	ret
  7770                              <1> findpcimemaddr:
  7771 0000621B E85E000000          <1> 	call getpciaddr
  7772 00006220 BAF80C0000          <1> 	mov edx, 0xCF8
  7773 00006225 EF                  <1> 	out dx, eax
  7774 00006226 BAFC0C0000          <1> 	mov edx, 0xCFC
  7775 0000622B ED                  <1> 	in eax, dx
  7776 0000622C 89C3                <1> 	mov ebx, eax
  7777 0000622E 81E301000000        <1> 	and ebx, 1
  7778 00006234 81FB01000000        <1> 	cmp ebx, 1
  7779 0000623A 0F8425000000        <1> 	je near notpciioaddr
  7780 00006240 89C2                <1> 	mov edx, eax
  7781 00006242 50                  <1> 	push eax
  7782 00006243 A1[3E020000]        <1> 	mov eax, [basecache]
  7783 00006248 C1E004              <1> 	shl eax, 4
  7784 0000624B 29C2                <1> 	sub edx, eax
  7785 0000624D 58                  <1> 	pop eax
  7786 0000624E 31DB                <1> 	xor ebx, ebx
  7787 00006250 4B                  <1> 	dec ebx
  7788 00006251 891D[29600000]      <1> 	mov [pcidevidmask], ebx
  7789 00006257 43                  <1> 	inc ebx
  7790 00006258 881D[B1600000]      <1> 	mov [pcitype], bl
  7791 0000625E 891D[25600000]      <1> 	mov [pcidevid], ebx
  7792 00006264 C3                  <1> 	ret
  7793                              <1> notpciioaddr:
  7794 00006265 A0[23600000]        <1> 	mov al, [pciregister]
  7795 0000626A 0404                <1> 	add al, 4
  7796 0000626C 3C28                <1> 	cmp al, 0x28
  7797 0000626E 0F870AFEFFFF        <1> 	ja near searchpciret
  7798 00006274 A2[23600000]        <1> 	mov [pciregister], al
  7799 00006279 E95AFFFFFF          <1> 	jmp findpciioaddr
  7800                              <1> getpciaddr:		;;puts it in eax and ebx
  7801 0000627E 31C0                <1> 			xor eax, eax
  7802 00006280 BB00000080          <1> 			mov ebx, 0x80000000
  7803 00006285 A0[20600000]        <1> 			mov al, [pcibus]
  7804 0000628A C1E010              <1> 			shl eax, 16
  7805 0000628D 01C3                <1> 			add ebx, eax
  7806 0000628F 31C0                <1> 			xor eax, eax
  7807 00006291 A0[21600000]        <1> 			mov al, [pcidevice]
  7808 00006296 C1E00B              <1> 			shl eax, 11
  7809 00006299 01C3                <1> 			add ebx, eax
  7810 0000629B 31C0                <1> 			xor eax, eax
  7811 0000629D A0[22600000]        <1> 			mov al, [pcifunction]
  7812 000062A2 C1E008              <1> 			shl eax, 8
  7813 000062A5 01C3                <1> 			add ebx, eax
  7814 000062A7 31C0                <1> 			xor eax, eax
  7815 000062A9 A0[23600000]        <1> 			mov al, [pciregister]
  7816 000062AE 01C3                <1> 			add ebx, eax
  7817 000062B0 89D8                <1> 			mov eax, ebx
  7818 000062B2 C3                  <1> 			ret
  7819                                      %include "source/disk.asm"
  7820                              <1> ;This loads files using the methods in the loaded driver
  7821                              <1> %ifdef disk.real
  7822                              <1> %include "source/drivers/disk/realmode.asm"
  7823                              <2> diskr:
  7824                              <2> 			;read from disk using real mode-it does not work with large files
  7825                              <2> 			;sector count in cl
  7826                              <2> 			;disk number in ch
  7827                              <2> 			;48 bit address with last 32 bits in ebx
  7828                              <2> 			;buffer in esi
  7829                              <2> 			;puts end of buffer in edi and end lba address in edx
  7830 000062B3 880D[E0620000]      <2> 	mov [sdlength], cl
  7831 000062B9 891D[E1620000]      <2> 	mov [sdaddress], ebx
  7832 000062BF 8935[3F640000]      <2> 	mov [oldesireal], esi
  7833 000062C5 66BE[E562]          <2> 	mov si, readdiskreal
  7834 000062C9 668935[EE0C0000]    <2> 	mov [realmodeptr], si
  7835 000062D0 BE[21630000]        <2> 	mov esi, backfromrealread
  7836 000062D5 8935[EA0C0000]      <2> 	mov [realmodereturn], esi
  7837 000062DB E9F3A8FFFF          <2> 	jmp realmode
  7838 000062E0 00                  <2> sdlength db 0
  7839 000062E1 00000000            <2> sdaddress dd 0
  7840                              <2> 
  7841                              <2> [BITS 16]
  7842                              <2> readdiskreal:
  7843 000062E5 C706[1163]1000      <2> 	mov word [dlen], 0x10
  7844 000062EB C706[1563]0000      <2> 	mov word [daddress], 0
  7845 000062F1 C706[1763]0001      <2> 	mov word [dsegm], 0x100
  7846 000062F7 66891E[1963]        <2> 	mov [dlbaad], ebx
  7847 000062FC 880E[1363]          <2> 	mov [dreadlen], cl
  7848                              <2> ReadHardDisk:
  7849 00006300 BE[1163]            <2> 	mov si, diskaddresspacket
  7850 00006303 31C0                <2> 	xor ax, ax
  7851 00006305 B442                <2> 	mov ah, 0x42
  7852 00006307 8A16[1063]          <2> 	mov dl, [dnumber]
  7853 0000630B CD13                <2> 	int 0x13
  7854 0000630D 72F1                <2> 	jc ReadHardDisk
  7855 0000630F C3                  <2> 	ret
  7856                              <2> 
  7857 00006310 80                  <2> dnumber db 0x80
  7858                              <2> diskaddresspacket:
  7859 00006311 10                  <2> dlen:	db 0x10 ;size of packet
  7860 00006312 00                  <2> 		db 0
  7861 00006313 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7862 00006315 0000                <2> daddress:	dw 0x0	;address 0
  7863 00006317 0001                <2> dsegm:		dw 0x100	;segment
  7864                              <2> 		;start with known value for hd
  7865                              <2> dlbaad:
  7866 00006319 00000000            <2> 	dd 0	;lba address
  7867 0000631D 00000000            <2> 	dd 0
  7868                              <2> [BITS 32]
  7869                              <2> backfromrealread:
  7870 00006321 8B35[3F640000]      <2> 	mov esi, [oldesireal]
  7871 00006327 8B1D[E1620000]      <2> 	mov ebx, [sdaddress]
  7872 0000632D 31C9                <2> 	xor ecx, ecx
  7873 0000632F 8A0D[E0620000]      <2> 	mov cl, [sdlength]
  7874 00006335 01CB                <2> 	add ebx, ecx
  7875 00006337 66B80800            <2> 	mov ax, LINEAR_SEL
  7876 0000633B 8EE0                <2> 	mov fs, ax
  7877 0000633D BF00100000          <2> 	mov edi, 0x1000
  7878 00006342 B200                <2> 	mov dl, 0
  7879 00006344 D0E1                <2> 	shl cl, 1
  7880                              <2> copyfromrmodedisk:
  7881 00006346 648A07              <2> 	mov al, [fs:edi]
  7882 00006349 8806                <2> 	mov [esi], al
  7883 0000634B 47                  <2> 	inc edi
  7884 0000634C 46                  <2> 	inc esi
  7885 0000634D FECA                <2> 	dec dl
  7886 0000634F 80FA00              <2> 	cmp dl, 0
  7887 00006352 75F2                <2> 	jne copyfromrmodedisk
  7888 00006354 FEC9                <2> 	dec cl
  7889 00006356 B200                <2> 	mov dl, 0
  7890 00006358 80F900              <2> 	cmp cl, 0
  7891 0000635B 75E9                <2> 	jne copyfromrmodedisk
  7892 0000635D 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7893 00006361 8EE0                <2> 	mov fs, ax
  7894 00006363 89F7                <2> 	mov edi, esi
  7895 00006365 8B35[3F640000]      <2> 	mov esi, [oldesireal]
  7896 0000636B 89DA                <2> 	mov edx, ebx
  7897 0000636D 8B1D[E1620000]      <2> 	mov ebx, [sdaddress]
  7898 00006373 C3                  <2> 	ret
  7899                              <2> 	
  7900                              <1> %else
  7901                              <1> 	%ifdef disk.protected
  7902                              <1> 	%include "source/drivers/disk/pata.asm"
  7903                              <1> 	%endif
  7904                              <1> %endif
  7905                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7906                              <1> 			;returns with err code in edx and file end in edi
  7907 00006374 803F00              <1> 	cmp byte [edi], 0
  7908 00006377 0F8448000000        <1> 	je near nofileload
  7909 0000637D 89FA                <1> 	mov edx, edi
  7910 0000637F BB[839D0000]        <1> 	mov ebx, diskfileindex
  7911                              <1> nextnamechar:
  7912 00006384 8A07                <1> 	mov al, [edi]
  7913 00006386 3C26                <1> 	cmp al, '&'
  7914 00006388 7440                <1> 	je nullfile
  7915 0000638A 8A23                <1> 	mov ah, [ebx]
  7916 0000638C 47                  <1> 	inc edi
  7917 0000638D 43                  <1> 	inc ebx
  7918 0000638E 88C1                <1> 	mov cl, al
  7919 00006390 08E1                <1> 	or cl, ah
  7920 00006392 80F900              <1> 	cmp cl, 0
  7921 00006395 744E                <1> 	je equalfilenames
  7922 00006397 80F920              <1> 	cmp cl, ' '
  7923 0000639A 7449                <1> 	je equalfilenames
  7924 0000639C 3C2A                <1> 	cmp al, '*'
  7925 0000639E 742B                <1> 	je equalfilenames2
  7926 000063A0 80FC00              <1> 	cmp ah, 0
  7927 000063A3 7410                <1> 	je nextfilename
  7928 000063A5 3C00                <1> 	cmp al, 0
  7929 000063A7 7404                <1> 	je getebxzero
  7930 000063A9 38E0                <1> 	cmp al, ah
  7931 000063AB 74D7                <1> 	je nextnamechar
  7932                              <1> getebxzero:
  7933 000063AD 8A23                <1> 	mov ah, [ebx]
  7934 000063AF 43                  <1> 	inc ebx
  7935 000063B0 80FC00              <1> 	cmp ah, 0
  7936 000063B3 75F8                <1> 	jne getebxzero
  7937                              <1> nextfilename:
  7938 000063B5 81C308000000        <1> 	add ebx, 8		;next descriptor
  7939 000063BB 89D7                <1> 	mov edi, edx
  7940 000063BD 81FB[389F0000]      <1> 	cmp ebx, enddiskfileindex
  7941 000063C3 72BF                <1> 	jb nextnamechar
  7942                              <1> nofileload:
  7943 000063C5 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7944                              <1> nullfile:
  7945 000063CA C3                  <1> 	ret
  7946                              <1> equalfilenames2:
  7947 000063CB 81EB02000000        <1> 	sub ebx, 2
  7948                              <1> eqfilefind:
  7949 000063D1 43                  <1> 	inc ebx
  7950 000063D2 81FB[389F0000]      <1> 	cmp ebx, enddiskfileindex
  7951 000063D8 0F83E7FFFFFF        <1> 	jae near nofileload
  7952 000063DE 8A03                <1> 	mov al, [ebx]
  7953 000063E0 3C00                <1> 	cmp al, 0
  7954 000063E2 75ED                <1> 	jne eqfilefind
  7955 000063E4 43                  <1> 	inc ebx
  7956                              <1> equalfilenames:
  7957 000063E5 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7958 000063E8 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7959 000063EA 031D[3A9F0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7960 000063F0 31C9                <1> 	xor ecx, ecx
  7961 000063F2 88C1                <1> 	mov cl, al			;get excess number of sectors
  7962 000063F4 C0E102              <1> 	shl cl, 2
  7963 000063F7 C0E902              <1> 	shr cl, 2			;cut off at 64
  7964 000063FA 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7965 000063FC B500                <1> 	mov ch, 0			;drive 0
  7966 000063FE C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7967                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7968 00006401 A3[43640000]        <1> 	mov [filetracks], eax
  7969 00006406 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7970 00006408 89DA                <1> 	mov edx, ebx
  7971 0000640A 80F900              <1> 	cmp cl, 0
  7972 0000640D 7405                <1> 	je copytracksforfile
  7973 0000640F E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7974                              <1> copytracksforfile:
  7975 00006414 A1[43640000]        <1> 	mov eax, [filetracks]
  7976 00006419 3D00000000          <1> 	cmp eax, 0
  7977 0000641E 7419                <1> 	je donecopyfile
  7978 00006420 48                  <1> 	dec eax
  7979 00006421 A3[43640000]        <1> 	mov [filetracks], eax
  7980 00006426 89D3                <1> 	mov ebx, edx	;get end lba
  7981 00006428 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7982 0000642A 8A2D[399F0000]      <1> 	mov ch, [DriveNumber]
  7983 00006430 89FE                <1> 	mov esi, edi	;reset buffer
  7984 00006432 E87CFEFFFF          <1> 	call diskr
  7985 00006437 EBDB                <1> 	jmp copytracksforfile
  7986                              <1> donecopyfile:
  7987 00006439 BA00000000          <1> 	mov edx, 0	;no error
  7988 0000643E C3                  <1> 	ret
  7989                              <1> 
  7990 0000643F 00000000            <1> oldesireal dd 0
  7991 00006443 00000000            <1> filetracks dd 0
  7992 00006447 00                  <1> lbad1 db 0
  7993 00006448 00                  <1> lbad2 db 0
  7994 00006449 00                  <1> lbad3 db 0
  7995 0000644A 00                  <1> lbad4 db 0
  7996 0000644B 00                  <1> lbad5 db 0
  7997 0000644C 00                  <1> lbad6 db 0
  7998 0000644D 6400                <1> segments dw 100
  7999                              <1> 
  8000                              <1> 
  8001                              <1> 	
  8002                                      %include "source/threads.asm"
  8003                              <1> %ifdef threads.included	
  8004                              <1> nwcmdst:
  8005 0000644F 31C0                <1> 	xor eax, eax
  8006 00006451 BC[1EB10000]        <1> 	mov esp, stackend
  8007 00006456 A2[13650000]        <1> 	mov [threadson], al
  8008 0000645B A3[14650000]        <1> 	mov [currentthread], eax
  8009 00006460 0504000000          <1> 	add eax, 4
  8010 00006465 A3[0F650000]        <1> 	mov [lastthread], eax
  8011 0000646A FB                  <1> 	sti
  8012 0000646B E957C5FFFF          <1> 	jmp nwcmd
  8013                              <1> 
  8014                              <1> nomorethreadspace:
  8015 00006470 BE[86640000]        <1> 	mov esi, nmts
  8016 00006475 E8A5B8FFFF          <1> 	call print
  8017 0000647A C605[13650000]00    <1> 	mov byte [threadson], 0
  8018 00006481 E941C5FFFF          <1> 	jmp nwcmd
  8019 00006486 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8020 0000648F 6572666C6F770A00    <1>
  8021                              <1> 
  8022                              <1> nomorestackspace:
  8023 00006497 BE[A3640000]        <1> 	mov esi, nmss
  8024 0000649C E87EB8FFFF          <1> 	call print
  8025 000064A1 EBAC                <1> 	jmp nwcmdst
  8026 000064A3 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8027 000064AC 72666C6F770A00      <1>
  8028                              <1> 	
  8029                              <1> threadswitch:
  8030 000064B3 FA                  <1> 	cli
  8031 000064B4 60                  <1> 	pushad
  8032 000064B5 BF[80EC2900]        <1> 	mov edi, threadlist
  8033 000064BA A1[14650000]        <1> 	mov eax, [currentthread]
  8034 000064BF 40                  <1> 	inc eax
  8035 000064C0 A3[14650000]        <1> 	mov [currentthread], eax
  8036 000064C5 6648                <1> 	dec ax
  8037 000064C7 C1E002              <1> 	shl eax, 2
  8038 000064CA 01C7                <1> 	add edi, eax
  8039 000064CC 8927                <1> 	mov [edi], esp
  8040 000064CE 81C704000000        <1> 	add edi, 4
  8041 000064D4 81FF[80FC2900]      <1> 	cmp edi, threadlistend
  8042 000064DA 0F830D000000        <1> 	jae near nookespthread
  8043 000064E0 8B07                <1> 	mov eax, [edi]
  8044 000064E2 3D00000000          <1> 	cmp eax, 0
  8045 000064E7 0F8519000000        <1> 	jne near okespthread
  8046                              <1> nookespthread:
  8047 000064ED BF[80EC2900]        <1> 	mov edi, threadlist
  8048 000064F2 31C0                <1> 	xor eax, eax
  8049 000064F4 A3[14650000]        <1> 	mov [currentthread], eax
  8050 000064F9 8B07                <1> 	mov eax, [edi]
  8051 000064FB 3D00000000          <1> 	cmp eax, 0
  8052 00006500 0F8449FFFFFF        <1> 	je near nwcmdst
  8053                              <1> okespthread:
  8054 00006506 89C4                <1> 	mov esp, eax
  8055 00006508 B020                <1> 	mov al, 0x20
  8056 0000650A E620                <1> 	out 0x20, al
  8057 0000650C 61                  <1> 	popad
  8058 0000650D FB                  <1> 	sti
  8059 0000650E CF                  <1> 	iret
  8060                              <1> 
  8061                              <1> %endif
  8062 0000650F 04000000            <1> 	lastthread dd 4
  8063 00006513 00                  <1> 	threadson db 0
  8064 00006514 00000000            <1> 	currentthread dd 0
  8065                                  %ifdef gui.included
  8066                                      %include "source/gui/gui.asm"
  8067                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8068 00006518 31C0                <1> 	xor eax, eax
  8069 0000651A 31DB                <1> 	xor ebx, ebx
  8070 0000651C 31C9                <1> 	xor ecx, ecx
  8071 0000651E 31D2                <1> 	xor edx, edx
  8072 00006520 E8A7060000          <1> 	call guisetup
  8073                              <1> guiloop:
  8074 00006525 E8F2F0FFFF          <1> 	call cursorgui
  8075                              <1> guistart:
  8076 0000652A E8FBF6FFFF          <1> 	call getkey
  8077 0000652F C605[2B780000]00    <1> 	mov byte [copygui], 0
  8078 00006536 EBF2                <1> 	jmp guistart
  8079                              <1> 
  8080                              <1> %include "source/gui/bmp.asm"
  8081                              <2> 
  8082                              <2> showbmp:
  8083 00006538 668B06              <2> 	mov ax, [esi]
  8084 0000653B 663D424D            <2> 	cmp ax, "BM"
  8085 0000653F 0F85BB000000        <2> 	jne near endedbmp
  8086 00006545 8B3D[3F550000]      <2> 	mov edi, [physbaseptr]
  8087 0000654B 6689D0              <2> 	mov ax, dx
  8088 0000654E 6689CB              <2> 	mov bx, cx
  8089 00006551 31C9                <2> 	xor ecx, ecx
  8090 00006553 31D2                <2> 	xor edx, edx
  8091 00006555 6689D9              <2> 	mov cx, bx
  8092 00006558 6689C2              <2> 	mov dx, ax
  8093 0000655B 01D7                <2> 	add edi, edx
  8094 0000655D 01D7                <2> 	add edi, edx
  8095 0000655F 31D2                <2> 	xor edx, edx
  8096 00006561 668B15[17560000]    <2> 	mov dx, [resolutionx2]
  8097 00006568 034E16              <2> 	add ecx, [esi + 22]
  8098                              <2> bmplocloop:
  8099 0000656B 52                  <2> 	push edx
  8100 0000656C 31C0                <2> 	xor eax, eax
  8101 0000656E 6689D0              <2> 	mov ax, dx
  8102 00006571 F7E1                <2> 	mul ecx
  8103 00006573 5A                  <2> 	pop edx
  8104 00006574 663B0D[2B550000]    <2> 	cmp cx, [resolutiony]
  8105 0000657B 7609                <2> 	jbe .nofixy
  8106 0000657D 31C9                <2> 	xor ecx, ecx
  8107 0000657F 668B0D[2B550000]    <2> 	mov cx, [resolutiony]
  8108                              <2> .nofixy:
  8109 00006586 01C7                <2> 	add edi, eax
  8110 00006588 8B5612              <2> 	mov edx, [esi + 18]
  8111 0000658B 8B4E16              <2> 	mov ecx, [esi + 22]
  8112 0000658E 8B460A              <2> 	mov eax, [esi + 10]
  8113 00006591 8B5E02              <2> 	mov ebx, [esi + 2]
  8114 00006594 01F3                <2> 	add ebx, esi
  8115 00006596 891D[06660000]      <2> 	mov [bmpend], ebx
  8116 0000659C 89D3                <2> 	mov ebx, edx
  8117 0000659E 01C6                <2> 	add esi, eax
  8118                              <2> ldxbmp2:
  8119 000065A0 31D2                <2> 	xor edx, edx
  8120 000065A2 668B15[29550000]    <2> 	mov dx, [resolutionx]
  8121 000065A9 39D3                <2> 	cmp ebx, edx
  8122 000065AB 7702                <2> 	ja ldxbmp
  8123 000065AD 89DA                <2> 	mov edx, ebx
  8124                              <2> ldxbmp:
  8125 000065AF 668B06              <2> 	mov ax, [esi]
  8126 000065B2 668907              <2> 	mov [edi], ax
  8127 000065B5 81C702000000        <2> 	add edi, 2
  8128 000065BB 81C602000000        <2> 	add esi, 2
  8129 000065C1 3B35[06660000]      <2> 	cmp esi, [bmpend]
  8130 000065C7 7737                <2> 	ja endedbmp
  8131 000065C9 4A                  <2> 	dec edx
  8132 000065CA 81FA00000000        <2> 	cmp edx, 0
  8133 000065D0 77DD                <2> 	ja ldxbmp
  8134 000065D2 31D2                <2> 	xor edx, edx
  8135 000065D4 668B15[29550000]    <2> 	mov dx, [resolutionx]
  8136 000065DB 39D3                <2> 	cmp ebx, edx
  8137 000065DD 7610                <2> 	jbe .notover
  8138                              <2> .over:
  8139 000065DF 01DE                <2> 	add esi, ebx
  8140 000065E1 01DE                <2> 	add esi, ebx
  8141 000065E3 29D6                <2> 	sub esi, edx
  8142 000065E5 29D6                <2> 	sub esi, edx
  8143 000065E7 01DF                <2> 	add edi, ebx
  8144 000065E9 01DF                <2> 	add edi, ebx
  8145 000065EB 29D7                <2> 	sub edi, edx
  8146 000065ED 29D7                <2> 	sub edi, edx
  8147                              <2> .notover:
  8148 000065EF 29DF                <2> 	sub edi, ebx
  8149 000065F1 29DF                <2> 	sub edi, ebx
  8150 000065F3 29D7                <2> 	sub edi, edx
  8151 000065F5 29D7                <2> 	sub edi, edx
  8152 000065F7 49                  <2> 	dec ecx
  8153 000065F8 81F900000000        <2> 	cmp ecx, 0
  8154 000065FE 77A0                <2> 	ja ldxbmp2
  8155                              <2> endedbmp:
  8156 00006600 E80E020000          <2> 	call switchmousepos2
  8157 00006605 C3                  <2> 	ret
  8158                              <2> 	
  8159 00006606 00000000            <2> 	bmpend dd 0
  8160                              <1> %include "source/gui/circle.asm"
  8161                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8162 0000660A 663D0000            <2> 	cmp ax, 0
  8163 0000660E 770A                <2> 	ja .nozerocircle
  8164 00006610 E8301A0000          <2> 	call putpixel	;the easiest circle ever
  8165 00006615 E9F4000000          <2> 	jmp .done
  8166                              <2> .nozerocircle:
  8167 0000661A 55                  <2> 	push ebp
  8168 0000661B 6689F5              <2> 	mov bp, si
  8169 0000661E 6650                <2> 	push ax
  8170 00006620 E8611A0000          <2> 	call getpixelmem
  8171 00006625 31C0                <2> 	xor eax, eax
  8172 00006627 6658                <2> 	pop ax
  8173 00006629 BE01000000          <2> 	mov esi, 1
  8174 0000662E 29C6                <2> 	sub esi, eax
  8175 00006630 89C1                <2> 	mov ecx, eax
  8176 00006632 31C0                <2> 	xor eax, eax
  8177 00006634 66A1[17560000]      <2> 	mov ax, [resolutionx2]
  8178 0000663A F7E1                <2> 	mul ecx
  8179 0000663C 50                  <2> 	push eax
  8180 0000663D 31D2                <2> 	xor edx, edx
  8181 0000663F 01C7                <2> 	add edi, eax
  8182 00006641 66892F              <2> 	mov [edi], bp
  8183 00006644 29C7                <2> 	sub edi, eax
  8184 00006646 29C7                <2> 	sub edi, eax
  8185 00006648 66892F              <2> 	mov [edi], bp
  8186 0000664B 01C7                <2> 	add edi, eax
  8187 0000664D D1E1                <2> 	shl ecx, 1
  8188 0000664F 01CF                <2> 	add edi, ecx
  8189 00006651 66892F              <2> 	mov [edi], bp
  8190 00006654 D1E1                <2> 	shl ecx, 1
  8191 00006656 29CF                <2> 	sub edi, ecx
  8192 00006658 66892F              <2> 	mov [edi], bp
  8193 0000665B D1E9                <2> 	shr ecx, 1
  8194 0000665D 01CF                <2> 	add edi, ecx
  8195 0000665F D1E9                <2> 	shr ecx, 1
  8196 00006661 B802000000          <2> 	mov eax, 2
  8197 00006666 F7E1                <2> 	mul ecx
  8198 00006668 48                  <2> 	dec eax
  8199 00006669 F7D0                <2> 	not eax ;make it negative
  8200 0000666B A3[13670000]        <2> 	mov [.ddF_y], eax
  8201 00006670 58                  <2> 	pop eax
  8202 00006671 BB01000000          <2> 	mov ebx, 1
  8203 00006676 891D[0F670000]      <2> 	mov [.ddF_x], ebx
  8204 0000667C 4B                  <2> 	dec ebx
  8205 0000667D 31D2                <2> 	xor edx, edx
  8206                              <2> .lp:	;it starts this with the center in edi
  8207                              <2> 		;color in bp
  8208                              <2> 		;ddF_x in memor
  8209                              <2> 		;x*resolutionx2 in ebx
  8210                              <2> 		;x in edx
  8211                              <2> 		;ddF_y in memory
  8212                              <2> 		;y*resolutionx2 in eax
  8213                              <2> 		;f in esi
  8214                              <2> 		;y in ecx
  8215 0000667F 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8216 00006685 7717                <2> 	ja	.noddF_y
  8217 00006687 49                  <2> 	dec ecx
  8218 00006688 2B05[17560000]      <2> 	sub eax, [resolutionx2]
  8219 0000668E 8105[13670000]0200- <2> 	add dword [.ddF_y], 2
  8220 00006696 0000                <2>
  8221 00006698 0335[13670000]      <2> 	add esi, [.ddF_y]
  8222                              <2> .noddF_y:
  8223 0000669E 42                  <2> 	inc edx
  8224 0000669F 031D[17560000]      <2> 	add ebx, [resolutionx2]
  8225 000066A5 8105[0F670000]0200- <2> 	add dword [.ddF_x], 2
  8226 000066AD 0000                <2>
  8227 000066AF 0335[0F670000]      <2> 	add esi, [.ddF_x]
  8228                              <2> 
  8229 000066B5 D1E2                <2> 	shl edx, 1
  8230 000066B7 D1E1                <2> 	shl ecx, 1
  8231 000066B9 01D7                <2> 	add edi, edx
  8232 000066BB 01C7                <2> 	add edi, eax
  8233 000066BD 66892F              <2> 	mov [edi], bp
  8234 000066C0 D1E2                <2> 	shl edx, 1
  8235 000066C2 29D7                <2> 	sub edi, edx
  8236 000066C4 66892F              <2> 	mov [edi], bp
  8237 000066C7 01D7                <2> 	add edi, edx
  8238 000066C9 D1E0                <2> 	shl eax, 1
  8239 000066CB 29C7                <2> 	sub edi, eax
  8240 000066CD 66892F              <2> 	mov [edi], bp
  8241 000066D0 29D7                <2> 	sub edi, edx
  8242 000066D2 66892F              <2> 	mov [edi], bp
  8243 000066D5 D1EA                <2> 	shr edx, 1
  8244 000066D7 D1E8                <2> 	shr eax, 1
  8245 000066D9 01C7                <2> 	add edi, eax
  8246 000066DB 01D7                <2> 	add edi, edx
  8247                              <2> 	
  8248 000066DD 01DF                <2> 	add edi, ebx
  8249 000066DF 01CF                <2> 	add edi, ecx
  8250 000066E1 66892F              <2> 	mov [edi], bp
  8251 000066E4 D1E1                <2> 	shl ecx, 1
  8252 000066E6 29CF                <2> 	sub edi, ecx
  8253 000066E8 66892F              <2> 	mov [edi], bp
  8254 000066EB D1E3                <2> 	shl ebx, 1
  8255 000066ED 29DF                <2> 	sub edi, ebx
  8256 000066EF 01CF                <2> 	add edi, ecx
  8257 000066F1 66892F              <2> 	mov [edi], bp
  8258 000066F4 29CF                <2> 	sub edi, ecx
  8259 000066F6 66892F              <2> 	mov [edi], bp
  8260 000066F9 D1EB                <2> 	shr ebx, 1
  8261 000066FB D1E9                <2> 	shr ecx, 1
  8262 000066FD 01DF                <2> 	add edi, ebx
  8263 000066FF 01CF                <2> 	add edi, ecx
  8264 00006701 D1EA                <2> 	shr edx, 1
  8265 00006703 D1E9                <2> 	shr ecx, 1
  8266 00006705 39CA                <2> 	cmp edx, ecx
  8267 00006707 0F8272FFFFFF        <2> 	jb .lp
  8268 0000670D 5D                  <2> 	pop ebp
  8269                              <2> .done:
  8270 0000670E C3                  <2> 	ret
  8271                              <2> 	
  8272 0000670F 00000000            <2> .ddF_x dd 0
  8273 00006713 00000000            <2> .ddF_y dd 0
  8274                              <1> %include "source/gui/cursor.asm"
  8275                              <2> clearmousecursor:
  8276 00006717 BE[F86A0000]        <2> 		mov esi, background
  8277 0000671C 8B3D[3F550000]      <2> 		mov edi, [physbaseptr]
  8278 00006722 31D2                <2> 		xor edx, edx
  8279 00006724 31C9                <2> 		xor ecx, ecx
  8280 00006726 668B15[09580000]    <2> 		mov dx, [lastmouseposition]
  8281 0000672D 668B0D[0B580000]    <2> 		mov cx, [lastmouseposition + 2]
  8282 00006734 01D7                <2> 		add edi, edx
  8283 00006736 31D2                <2> 		xor edx, edx
  8284 00006738 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  8285 0000673F 81F900000000        <2> 		cmp ecx, 0
  8286 00006745 7408                <2> 		je .nomul
  8287 00006747 52                  <2> 		push edx
  8288 00006748 89D0                <2> 		mov eax, edx
  8289 0000674A F7E1                <2> 		mul ecx
  8290 0000674C 01C7                <2> 		add edi, eax
  8291 0000674E 5A                  <2> 		pop edx
  8292                              <2> .nomul:
  8293                              <2> %ifdef 	gui.background
  8294 0000674F 813D[CA6A0000]0000- <2> 		cmp dword [backgroundimage], 0
  8295 00006757 0000                <2>
  8296 00006759 7438                <2> 		je .noyclr
  8297 0000675B 8B35[CA6A0000]      <2> 		mov esi, [backgroundimage]
  8298 00006761 2B3D[3F550000]      <2> 		sub edi, [physbaseptr]
  8299 00006767 01FE                <2> 		add esi, edi
  8300 00006769 033D[3F550000]      <2> 		add edi, [physbaseptr]
  8301                              <2> .backlp:
  8302 0000676F 31DB                <2> 		xor ebx, ebx
  8303                              <2> .noyback:
  8304 00006771 8B041E              <2> 		mov eax, [esi + ebx]
  8305 00006774 89041F              <2> 		mov [edi + ebx], eax
  8306 00006777 81C304000000        <2> 		add ebx, 4
  8307 0000677D 81FB10000000        <2> 		cmp ebx, 16
  8308 00006783 75EC                <2> 		jne .noyback
  8309 00006785 01D7                <2> 		add edi, edx
  8310 00006787 01D6                <2> 		add esi, edx
  8311 00006789 6641                <2> 		inc cx
  8312 0000678B 6681F91000          <2> 		cmp cx, 16
  8313 00006790 72DD                <2> 		jb .backlp
  8314 00006792 C3                  <2> 		ret
  8315                              <2> %endif
  8316                              <2> .noyclr:
  8317 00006793 668B06              <2> 		mov ax, [esi]
  8318 00006796 C1C010              <2> 		rol eax, 16
  8319 00006799 668B06              <2> 		mov ax, [esi]
  8320 0000679C 8907                <2> 		mov [edi], eax
  8321 0000679E 894704              <2> 		mov [edi + 4], eax
  8322 000067A1 894708              <2> 		mov [edi + 8], eax
  8323 000067A4 89470C              <2> 		mov [edi + 12], eax
  8324 000067A7 01D7                <2> 		add edi, edx
  8325 000067A9 6641                <2> 		inc cx
  8326 000067AB 6681F91000          <2> 		cmp cx, 16
  8327 000067B0 72E1                <2> 		jb .noyclr
  8328 000067B2 C3                  <2> 		ret
  8329                              <2> 
  8330                              <2> switchmousepos:		;;switch were the mouse is located
  8331 000067B3 BE[13E62800]        <2> 		mov esi, mousecolorbuf
  8332 000067B8 8B3D[3F550000]      <2> 		mov edi, [physbaseptr]
  8333 000067BE 31D2                <2> 		xor edx, edx
  8334 000067C0 31C9                <2> 		xor ecx, ecx
  8335 000067C2 668B15[09580000]    <2> 		mov dx, [lastmouseposition]
  8336 000067C9 668B0D[0B580000]    <2> 		mov cx, [lastmouseposition + 2]
  8337 000067D0 01D7                <2> 		add edi, edx
  8338 000067D2 31D2                <2> 		xor edx, edx
  8339 000067D4 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  8340 000067DB 6681F90000          <2> 		cmp cx, 0
  8341 000067E0 740B                <2> 		je noswmsy
  8342 000067E2 01D7                <2> swmsy:		add edi, edx
  8343 000067E4 6649                <2> 		dec cx
  8344 000067E6 6681F90000          <2> 		cmp cx, 0
  8345 000067EB 75F5                <2> 		jne swmsy
  8346 000067ED 8B06                <2> noswmsy:	mov eax, [esi]
  8347 000067EF 8B5E04              <2> 		mov ebx, [esi + 4]
  8348 000067F2 8907                <2> 		mov [edi], eax
  8349 000067F4 895F04              <2> 		mov [edi + 4], ebx
  8350 000067F7 8B4608              <2> 		mov eax, [esi + 8]
  8351 000067FA 8B5E0C              <2> 		mov ebx, [esi + 12]
  8352 000067FD 894708              <2> 		mov [edi + 8], eax
  8353 00006800 895F0C              <2> 		mov [edi + 12], ebx
  8354 00006803 01D7                <2> 		add edi, edx
  8355 00006805 81C610000000        <2> 		add esi, 16
  8356 0000680B 81FE[13E72800]      <2> 		cmp esi, mcolorend
  8357 00006811 72DA                <2> 		jb noswmsy
  8358                              <2> 		
  8359                              <2> switchmousepos2:
  8360 00006813 BE[13E62800]        <2> 		mov esi, mousecolorbuf
  8361 00006818 8B3D[3F550000]      <2> 		mov edi, [physbaseptr]
  8362 0000681E 31D2                <2> 		xor edx, edx
  8363 00006820 31C9                <2> 		xor ecx, ecx
  8364 00006822 668B15[0D580000]    <2> 		mov dx, [mousecursorposition]
  8365 00006829 668B0D[0F580000]    <2> 		mov cx, [mousecursorposition + 2]
  8366 00006830 01D7                <2> 		add edi, edx
  8367 00006832 31D2                <2> 		xor edx, edx
  8368 00006834 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  8369 0000683B 6681F90000          <2> 		cmp cx, 0
  8370 00006840 740B                <2> 		je noswmsy2
  8371 00006842 01D7                <2> swmsy2:		add edi, edx
  8372 00006844 6649                <2> 		dec cx
  8373 00006846 6681F90000          <2> 		cmp cx, 0
  8374 0000684B 75F5                <2> 		jne swmsy2
  8375 0000684D 8B07                <2> noswmsy2:	mov eax, [edi]
  8376 0000684F 8B5F04              <2> 		mov ebx, [edi + 4]
  8377 00006852 8906                <2> 		mov [esi], eax
  8378 00006854 895E04              <2> 		mov [esi + 4], ebx
  8379 00006857 8B4708              <2> 		mov eax, [edi + 8]
  8380 0000685A 8B5F0C              <2> 		mov ebx, [edi + 12]
  8381 0000685D 894608              <2> 		mov [esi + 8], eax
  8382 00006860 895E0C              <2> 		mov [esi + 12], ebx
  8383 00006863 01D7                <2> 		add edi, edx
  8384 00006865 81C610000000        <2> 		add esi, 16
  8385 0000686B 81FE[13E72800]      <2> 		cmp esi, mcolorend
  8386 00006871 72DA                <2> 		jb noswmsy2
  8387 00006873 C3                  <2> 		ret
  8388                              <2> 		
  8389                              <1> %include "source/gui/icon.asm"
  8390 00006874 0000                <2> iconcolor dw 0
  8391                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8392 00006876 A2[AE800000]        <2> 		mov [iconselected], al
  8393 0000687B 8025[AE800000]01    <2> 		and byte [iconselected], 1
  8394 00006882 B401                <2> 		mov ah, 1
  8395 00006884 E829150000          <2> 		call graphicsadd
  8396                              <2> 	showicon2:
  8397 00006889 8B3D[3F550000]      <2> 		mov edi, [physbaseptr]
  8398 0000688F 6601D2              <2> 		add dx, dx
  8399 00006892 663B15[17560000]    <2> 		cmp dx, [resolutionx2]
  8400 00006899 720C                <2> 		jb screenxgood
  8401 0000689B 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  8402 000068A2 6681EA4000          <2> 		sub dx, 64
  8403                              <2> 	screenxgood:
  8404 000068A7 6681F90000          <2> 		cmp cx, 0
  8405 000068AC 742B                <2> 		je noscreenygoodchk
  8406 000068AE 663B0D[2B550000]    <2> 		cmp cx, [resolutiony]
  8407 000068B5 720C                <2> 		jb screenygood
  8408 000068B7 668B0D[2B550000]    <2> 		mov cx, [resolutiony]
  8409 000068BE 6681E92000          <2> 		sub cx, 32
  8410                              <2> 	screenygood:
  8411 000068C3 50                  <2> 		push eax
  8412 000068C4 52                  <2> 		push edx
  8413 000068C5 31C0                <2> 		xor eax, eax
  8414 000068C7 31DB                <2> 		xor ebx, ebx
  8415 000068C9 668B1D[17560000]    <2> 		mov bx, [resolutionx2]
  8416 000068D0 6689C8              <2> 		mov ax, cx
  8417 000068D3 F7E3                <2> 		mul ebx
  8418 000068D5 01C7                <2> 		add edi, eax
  8419 000068D7 5A                  <2> 		pop edx
  8420 000068D8 58                  <2> 		pop eax
  8421                              <2> 	noscreenygoodchk:
  8422 000068D9 31DB                <2> 		xor ebx, ebx
  8423 000068DB 6689D3              <2> 		mov bx, dx
  8424 000068DE 01DF                <2> 		add edi, ebx
  8425 000068E0 6631C9              <2> 		xor cx, cx
  8426 000068E3 668B06              <2> 		mov ax, [esi]
  8427 000068E6 81C602000000        <2> 		add esi, 2
  8428 000068EC 66A3[74680000]      <2> 		mov [iconcolor], ax
  8429                              <2> 	writeicon:
  8430 000068F2 8B06                <2> 		mov eax, [esi]
  8431 000068F4 D1C0                <2> 		rol eax, 1
  8432 000068F6 30C9                <2> 		xor cl, cl
  8433                              <2> 	writeiconline:
  8434 000068F8 B201                <2> 		mov dl, 1
  8435 000068FA 20C2                <2> 		and dl, al
  8436 000068FC 3215[AE800000]      <2> 		xor dl, [iconselected]
  8437 00006902 668B1D[F86A0000]    <2> 		mov bx, [background]
  8438 00006909 66891F              <2> 		mov [edi], bx
  8439 0000690C 80FA00              <2> 		cmp dl, 0
  8440 0000690F 740A                <2> 		je noiconline
  8441 00006911 668B15[74680000]    <2> 		mov dx, [iconcolor]
  8442 00006918 668917              <2> 		mov [edi], dx
  8443                              <2> 	noiconline:
  8444 0000691B 81C702000000        <2> 		add edi, 2
  8445 00006921 D1C0                <2> 		rol eax, 1
  8446 00006923 FEC1                <2> 		inc cl
  8447 00006925 80F920              <2> 		cmp cl, 32
  8448 00006928 72CE                <2> 		jb writeiconline
  8449 0000692A 81C604000000        <2> 		add esi, 4
  8450 00006930 FEC5                <2> 		inc ch
  8451 00006932 31D2                <2> 		xor edx, edx
  8452 00006934 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  8453 0000693B 01D7                <2> 		add edi, edx
  8454 0000693D 81EF40000000        <2> 		sub edi, 64
  8455 00006943 80FD20              <2> 		cmp ch, 32
  8456 00006946 72AA                <2> 		jb writeicon
  8457 00006948 31C0                <2> 		xor eax, eax
  8458 0000694A C3                  <2> 		ret
  8459                              <1> %include "source/gui/line.asm"
  8460                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8461 0000694B 668935[6D6A0000]    <2> 	mov [.color], si
  8462 00006952 C605[6F6A0000]00    <2> 	mov byte [.steep], 0
  8463 00006959 C605[706A0000]00    <2> 	mov byte [.yreversed], 0
  8464 00006960 E907000000          <2> 	jmp .notsteep
  8465                              <2> .steeploop:
  8466 00006965 C605[6F6A0000]01    <2> 	mov byte [.steep], 1
  8467                              <2> .notsteep:
  8468 0000696C 31FF                <2> 	xor edi, edi
  8469 0000696E 31F6                <2> 	xor esi, esi
  8470 00006970 6639DA              <2> 	cmp dx, bx
  8471 00006973 7705                <2> 	ja .noreversex
  8472 00006975 6687D3              <2> 	xchg dx, bx
  8473 00006978 6691                <2> 	xchg cx, ax
  8474                              <2> .noreversex:
  8475 0000697A 6689D7              <2> 	mov di, dx
  8476 0000697D 6629DF              <2> 	sub di, bx
  8477                              <2> 	
  8478 00006980 6639C1              <2> 	cmp cx, ax
  8479 00006983 720B                <2> 	jb .reversey
  8480 00006985 6689CE              <2> 	mov si, cx
  8481 00006988 6629C6              <2> 	sub si, ax
  8482 0000698B E90D000000          <2> 	jmp .normal
  8483                              <2> .reversey:
  8484 00006990 C605[706A0000]02    <2> 	mov byte [.yreversed], 2
  8485 00006997 6689C6              <2> 	mov si, ax
  8486 0000699A 6629CE              <2> 	sub si, cx	
  8487                              <2> .normal:
  8488 0000699D 6687CA              <2> 	xchg cx, dx
  8489 000069A0 6693                <2> 	xchg ax, bx
  8490 000069A2 6639FE              <2> 	cmp si, di
  8491 000069A5 77BE                <2> 	ja .steeploop
  8492 000069A7 6687CA              <2> 	xchg cx, dx
  8493 000069AA 6693                <2> 	xchg ax, bx
  8494                              <2> 	
  8495 000069AC 6691                <2> 	xchg ax, cx
  8496 000069AE 6687DA              <2> 	xchg bx, dx
  8497 000069B1 66893D[736A0000]    <2> 	mov [.xdelta], di
  8498 000069B8 668935[756A0000]    <2> 	mov [.ydelta], si
  8499 000069BF 668B35[6D6A0000]    <2> 	mov si, [.color]
  8500 000069C6 66891D[716A0000]    <2> 	mov [.endline], bx
  8501 000069CD 6652                <2> 	push dx
  8502 000069CF 6651                <2> 	push cx
  8503 000069D1 6687CA              <2> 	xchg cx, dx
  8504 000069D4 803D[6F6A0000]01    <2> 	cmp byte [.steep], 1
  8505 000069DB 7403                <2> 	je .xchg
  8506 000069DD 6687D1              <2> 	xchg dx, cx
  8507                              <2> .xchg:
  8508 000069E0 E8A1160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8509 000069E5 6659                <2> 	pop cx
  8510 000069E7 665A                <2> 	pop dx
  8511 000069E9 31C0                <2> 	xor eax, eax
  8512 000069EB 66A1[736A0000]      <2> 	mov ax, [.xdelta]
  8513 000069F1 66D1E8              <2> 	shr ax, 1
  8514 000069F4 8A0D[6F6A0000]      <2> 	mov cl, [.steep]
  8515 000069FA 0A0D[706A0000]      <2> 	or cl, [.yreversed]
  8516 00006A00 55                  <2> 	push ebp
  8517 00006A01 668B2D[716A0000]    <2> 	mov bp, [.endline]
  8518 00006A08 6629D5              <2> 	sub bp, dx
  8519 00006A0B 668B15[756A0000]    <2> 	mov dx, [.ydelta]
  8520                              <2> .lp:
  8521 00006A12 668937              <2> 	mov [edi], si
  8522 00006A15 6639D0              <2> 	cmp ax, dx
  8523 00006A18 7332                <2> 	jae .noaddx
  8524 00006A1A F6C102              <2> 	test cl, 2
  8525 00006A1D 7414                <2> 	jz .nodecy
  8526 00006A1F F6C101              <2> 	test cl, 1
  8527 00006A22 7509                <2> 	jnz .steepy
  8528 00006A24 29DF                <2> 	sub edi, ebx
  8529 00006A26 29DF                <2> 	sub edi, ebx
  8530 00006A28 E906000000          <2> 	jmp .nodecy
  8531                              <2> .steepy:
  8532 00006A2D 81EF04000000        <2> 	sub edi, 4
  8533                              <2> .nodecy:
  8534 00006A33 660305[736A0000]    <2> 	add ax, [.xdelta]
  8535 00006A3A F6C101              <2> 	test cl, 1
  8536 00006A3D 7507                <2> 	jnz .steepx
  8537 00006A3F 01DF                <2> 	add edi, ebx
  8538 00006A41 E906000000          <2> 	jmp .noaddx
  8539                              <2> .steepx:
  8540 00006A46 81C702000000        <2> 	add edi, 2
  8541                              <2> .noaddx:
  8542 00006A4C 6629D0              <2> 	sub ax, dx
  8543 00006A4F 664D                <2> 	dec bp
  8544 00006A51 81C702000000        <2> 	add edi, 2
  8545 00006A57 F6C101              <2> 	test cl, 1
  8546 00006A5A 7408                <2> 	jz .nosteepx
  8547 00006A5C 81EF02000000        <2> 	sub edi, 2
  8548 00006A62 01DF                <2> 	add edi, ebx
  8549                              <2> .nosteepx:
  8550 00006A64 6681FD0000          <2> 	cmp bp, 0
  8551 00006A69 75A7                <2> 	jne .lp
  8552                              <2> .done:
  8553 00006A6B 5D                  <2> 	pop ebp
  8554 00006A6C C3                  <2> 	ret
  8555                              <2> 	
  8556 00006A6D 0000                <2> .color dw 0
  8557 00006A6F 00                  <2> .steep db 0
  8558 00006A70 00                  <2> .yreversed db 0
  8559 00006A71 0000                <2> .endline dw 0
  8560 00006A73 0000                <2> .xdelta dw 0
  8561 00006A75 0000                <2> .ydelta dw 0
  8562                              <1> %include "source/gui/refresh.asm"
  8563                              <2> guiclear:
  8564 00006A77 8B3D[3F550000]      <2> 	mov edi, [physbaseptr]
  8565 00006A7D 668B15[29550000]    <2> 	mov dx, [resolutionx]
  8566 00006A84 668B0D[2B550000]    <2> 	mov cx, [resolutiony]
  8567                              <2> %ifdef gui.background
  8568 00006A8B 813D[CA6A0000]0000- <2> 	cmp dword [backgroundimage], 0
  8569 00006A93 0000                <2>
  8570 00006A95 7437                <2> 	je guiclear.noback
  8571 00006A97 8B35[CA6A0000]      <2> 		mov esi, [backgroundimage]
  8572                              <2> 	.lp:
  8573                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8574                              <2> 		;movdqa [edi], xmm0
  8575                              <2> 		;add esi, 16
  8576                              <2> 		;add edi, 16
  8577                              <2> 		;sub dx, 8
  8578 00006A9D 8B06                <2> 		mov eax, [esi]
  8579 00006A9F 8907                <2> 		mov [edi], eax
  8580 00006AA1 81C604000000        <2> 		add esi, 4
  8581 00006AA7 81C704000000        <2> 		add edi, 4
  8582 00006AAD 6681EA0200          <2> 		sub dx, 2
  8583 00006AB2 6681FA0000          <2> 		cmp dx, 0
  8584 00006AB7 77E4                <2> 		ja .lp
  8585 00006AB9 6649                <2> 		dec cx
  8586 00006ABB 668B15[29550000]    <2> 		mov dx, [resolutionx]
  8587 00006AC2 6681F90000          <2> 		cmp cx, 0
  8588 00006AC7 77D4                <2> 		ja .lp
  8589 00006AC9 C3                  <2> 		ret
  8590 00006ACA 00000000            <2> 	backgroundimage dd 0
  8591                              <2> %endif
  8592                              <2> guiclear.noback:
  8593 00006ACE A1[F86A0000]        <2> 	mov eax, [background]
  8594                              <2> guiclearloop:
  8595 00006AD3 8907                <2> 	mov [edi], eax
  8596 00006AD5 81C704000000        <2> 	add edi, 4
  8597 00006ADB 6681EA0200          <2> 	sub dx, 2
  8598 00006AE0 6681FA0000          <2> 	cmp dx, 0
  8599 00006AE5 77EC                <2> 	ja guiclearloop
  8600 00006AE7 6649                <2> 	dec cx
  8601 00006AE9 668B15[29550000]    <2> 	mov dx, [resolutionx]
  8602 00006AF0 6681F90000          <2> 	cmp cx, 0
  8603 00006AF5 77DC                <2> 	ja guiclearloop
  8604 00006AF7 C3                  <2> 	ret
  8605                              <2> 
  8606 00006AF8 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8607                              <2> 
  8608                              <2> reloadallgraphics:
  8609 00006AFC BF[13D00000]        <2> 		mov edi, graphicstable
  8610                              <2> reloadgraphicsloop:
  8611 00006B01 8B7702              <2> 		mov esi, [edi + 2]
  8612 00006B04 668B5706            <2> 		mov dx, [edi + 6]
  8613 00006B08 668B4F08            <2> 		mov cx, [edi + 8]
  8614 00006B0C 668B07              <2> 		mov ax, [edi]
  8615 00006B0F 668B5F0A            <2> 		mov bx, [edi + 10]
  8616 00006B13 893D[9E7D0000]      <2> 		mov [grpctblpos], edi
  8617 00006B19 3B3D[35780000]      <2> 		cmp edi, [dragging]
  8618 00006B1F 741E                <2> 		je loadedgraphic
  8619 00006B21 663D0100            <2> 		cmp ax, 1
  8620 00006B25 0F8436000000        <2> 		je near icongraphic
  8621 00006B2B 663D0200            <2> 		cmp ax, 2
  8622 00006B2F 0F843C000000        <2> 		je near stringgraphic
  8623 00006B35 663D0300            <2> 		cmp ax, 3
  8624 00006B39 0F8416000000        <2> 		je near windowgraphic
  8625 00006B3F 8B3D[9E7D0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8626 00006B45 81C710000000        <2> 		add edi, 16
  8627 00006B4B 81FF[13D20000]      <2> 		cmp edi, graphicstableend
  8628 00006B51 732E                <2> 		jae donereloadgraphics
  8629 00006B53 EBAC                <2> 		jmp reloadgraphicsloop
  8630                              <2> windowgraphic:
  8631 00006B55 E846080000          <2> 		call showwindow2
  8632 00006B5A E866B2FFFF          <2> 		call cleardouble
  8633 00006B5F EBDE                <2> 		jmp loadedgraphic
  8634 00006B61 80E301              <2> icongraphic:	and bl, 1
  8635 00006B64 881D[AE800000]      <2> 		mov [iconselected], bl
  8636 00006B6A E81AFDFFFF          <2> 		call showicon2
  8637 00006B6F EBCE                <2> 		jmp loadedgraphic
  8638 00006B71 80E301              <2> stringgraphic:  and bl, 1
  8639 00006B74 881D[31780000]      <2> 		mov [mouseselecton], bl
  8640 00006B7A E80D050000          <2> 		call showstring2
  8641 00006B7F EBBE                <2> 		jmp loadedgraphic
  8642                              <2> donereloadgraphics:
  8643 00006B81 8B3D[35780000]      <2> 		mov edi, [dragging]
  8644 00006B87 81FF[13D00000]      <2> 		cmp edi, graphicstable
  8645 00006B8D 7226                <2> 		jb notcorrectdrag
  8646 00006B8F 668B07              <2> 		mov ax, [edi]
  8647 00006B92 8B7702              <2> 		mov esi, [edi + 2]
  8648 00006B95 668B5706            <2> 		mov dx, [edi + 6]
  8649 00006B99 668B4F08            <2> 		mov cx, [edi + 8]
  8650 00006B9D 668B5F0A            <2> 		mov bx, [edi + 10]
  8651 00006BA1 663D0100            <2> 		cmp ax, 1
  8652 00006BA5 750F                <2> 		jne noticondragging
  8653 00006BA7 80E301              <2> 		and bl, 1
  8654 00006BAA 881D[AE800000]      <2> 		mov [iconselected], bl
  8655 00006BB0 E8D4FCFFFF          <2> 		call showicon2
  8656                              <2> notcorrectdrag:
  8657 00006BB5 C3                  <2> 		ret
  8658                              <2> 
  8659                              <2> 	noticondragging:
  8660 00006BB6 663D0200            <2> 		cmp ax, 2
  8661 00006BBA 75F9                <2> 		jne notcorrectdrag
  8662 00006BBC 80E301              <2> 		and bl, 1
  8663 00006BBF 881D[31780000]      <2> 		mov [mouseselecton], bl
  8664 00006BC5 E8C2040000          <2> 		call showstring2
  8665 00006BCA EBE9                <2> 		jmp notcorrectdrag
  8666                              <1> %include "source/gui/startup.asm"
  8667                              <2> guisetup:
  8668                              <2> 	%ifdef gui.background
  8669 00006BCC 31DB                <2> 	xor ebx, ebx
  8670 00006BCE 891D[CA6A0000]      <2> 	mov [backgroundimage], ebx
  8671                              <2> 	%endif
  8672 00006BD4 E89EFEFFFF          <2> 	call guiclear
  8673 00006BD9 C605[389F0000]01    <2> 	mov byte [guion], 1
  8674 00006BE0 C605[31780000]00    <2> 	mov byte [mouseselecton], 0
  8675 00006BE7 31C0                <2> 	xor eax, eax
  8676 00006BE9 31DB                <2> 	xor ebx, ebx
  8677 00006BEB 31C9                <2> 	xor ecx, ecx
  8678 00006BED 31D2                <2> 	xor edx, edx
  8679                              <2> 	
  8680 00006BEF BE[B16D0000]        <2> 	mov esi, pacmsg
  8681 00006BF4 30E4                <2> 	xor ah, ah
  8682 00006BF6 B010                <2> 	mov al, 00010000b
  8683 00006BF8 31DB                <2> 	xor ebx, ebx
  8684 00006BFA 66B99000            <2> 	mov cx, 144
  8685 00006BFE 66BA0400            <2> 	mov dx, 4
  8686 00006C02 E872040000          <2> 	call showstring
  8687                              <2> 	
  8688 00006C07 BE[EF6D0000]        <2> 	mov esi, interneticon
  8689 00006C0C 30E4                <2> 	xor ah, ah
  8690 00006C0E B010                <2> 	mov al, 00010000b
  8691 00006C10 BB[DA6C0000]        <2> 	mov ebx, noie
  8692 00006C15 66B91800            <2> 	mov cx, 24
  8693 00006C19 66BA0400            <2> 	mov dx, 4
  8694 00006C1D E854FCFFFF          <2> 	call showicon
  8695                              <2> 	
  8696 00006C22 BE[716E0000]        <2> 	mov esi, wordicon
  8697 00006C27 30E4                <2> 	xor ah, ah
  8698 00006C29 B010                <2> 	mov al, 00010000b
  8699 00006C2B 31DB                <2> 	xor ebx, ebx
  8700 00006C2D 66B91800            <2> 	mov cx, 24
  8701 00006C31 66BA3000            <2> 	mov dx, 48
  8702 00006C35 E83CFCFFFF          <2> 	call showicon
  8703                              <2> 	
  8704 00006C3A BE[F36E0000]        <2> 	mov esi, pacmanpellet
  8705 00006C3F 30E4                <2> 	xor ah, ah
  8706 00006C41 B010                <2> 	mov al, 00010000b
  8707 00006C43 31DB                <2> 	xor ebx, ebx
  8708 00006C45 66B94000            <2> 	mov cx, 64
  8709 00006C49 66BA0400            <2> 	mov dx, 4
  8710 00006C4D E824FCFFFF          <2> 	call showicon
  8711                              <2> 	
  8712 00006C52 BE[F76F0000]        <2> 	mov esi, pacman
  8713 00006C57 30E4                <2> 	xor ah, ah
  8714 00006C59 B010                <2> 	mov al, 00010000b
  8715 00006C5B BB[C36C0000]        <2> 	mov ebx, pacmannomnom
  8716 00006C60 66B94000            <2> 	mov cx, 64
  8717 00006C64 66BA3000            <2> 	mov dx, 48
  8718 00006C68 E809FCFFFF          <2> 	call showicon
  8719                              <2> 	
  8720 00006C6D BE[756F0000]        <2> 	mov esi, ghostie
  8721 00006C72 30E4                <2> 	xor ah, ah
  8722 00006C74 B010                <2> 	mov al, 00010000b
  8723 00006C76 BB[AC6C0000]        <2> 	mov ebx, boo
  8724 00006C7B 66B96C00            <2> 	mov cx, 108
  8725 00006C7F 66BA0400            <2> 	mov dx, 4
  8726 00006C83 E8EEFBFFFF          <2> 	call showicon
  8727                              <2> 	
  8728 00006C88 BE[936D0000]        <2> 	mov esi, start
  8729 00006C8D 668B0D[2B550000]    <2> 	mov cx, [resolutiony]
  8730 00006C94 6681E91000          <2> 	sub cx, 16
  8731 00006C99 66BA0200            <2> 	mov dx, 2
  8732 00006C9D 30E4                <2> 	xor ah, ah
  8733 00006C9F B010                <2> 	mov al, 00010000b
  8734 00006CA1 BB[4F6D0000]        <2> 	mov ebx, winblows
  8735 00006CA6 E8CE030000          <2> 	call showstring
  8736                              <2> 
  8737                              <2> %ifdef gui.time	
  8738                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  8739                              <2> %endif
  8740 00006CAB C3                  <2> 	ret
  8741                              <2> 
  8742                              <2> 	boo:
  8743 00006CAC BE[AC6D0000]        <2> 		mov esi, boomsg
  8744 00006CB1 66BA6400            <2> 		mov dx, 100
  8745 00006CB5 66B94001            <2> 		mov cx, 320
  8746 00006CB9 31DB                <2> 		xor ebx, ebx
  8747 00006CBB 6631C0              <2> 		xor ax, ax
  8748 00006CBE E9B6030000          <2> 		jmp showstring
  8749                              <2> 
  8750                              <2> 	pacmannomnom:
  8751 00006CC3 BE[CA6D0000]        <2> 		mov esi, pacnom
  8752 00006CC8 66BA8200            <2> 		mov dx, 130
  8753 00006CCC 66B93C00            <2> 		mov cx, 60
  8754 00006CD0 31DB                <2> 		xor ebx, ebx
  8755 00006CD2 6631C0              <2> 		xor ax, ax
  8756 00006CD5 E99F030000          <2> 		jmp showstring	
  8757                              <2> 	
  8758                              <2> 	noie:
  8759 00006CDA 66C705[D96D0000]80- <2> 		mov word [termwindow], 640
  8760 00006CE2 02                  <2>
  8761 00006CE3 66C705[DB6D0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8762 00006CEB 01                  <2>
  8763 00006CEC BE[D96D0000]        <2> 		mov esi, termwindow
  8764 00006CF1 66BA1000            <2> 		mov dx, 16
  8765 00006CF5 66B91000            <2> 		mov cx, 16
  8766 00006CF9 31DB                <2> 		xor ebx, ebx
  8767 00006CFB 6631C0              <2> 		xor ax, ax
  8768 00006CFE E8DF050000          <2> 		call showwindow
  8769 00006D03 E9FCBAFFFF          <2> 		jmp os
  8770                              <2> 
  8771                              <2> 	gotomenuboot:
  8772 00006D08 31D2                <2> 		xor edx, edx
  8773 00006D0A 31C9                <2> 		xor ecx, ecx
  8774 00006D0C 668B15[29550000]    <2> 		mov dx, [resolutionx]
  8775 00006D13 668B0D[2B550000]    <2> 		mov cx, [resolutiony]
  8776 00006D1A 66C1E904            <2> 		shr cx, 4
  8777 00006D1E 6681E90100          <2> 		sub cx, 1
  8778 00006D23 66C1E104            <2> 		shl cx, 4
  8779 00006D27 668915[D96D0000]    <2> 		mov [termwindow], dx
  8780 00006D2E 66890D[DB6D0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8781 00006D35 BE[D96D0000]        <2> 		mov esi, termwindow
  8782 00006D3A 6631D2              <2> 		xor dx, dx
  8783 00006D3D 6631C9              <2> 		xor cx, cx
  8784 00006D40 31DB                <2> 		xor ebx, ebx
  8785 00006D42 6631C0              <2> 		xor ax, ax
  8786 00006D45 E898050000          <2> 		call showwindow
  8787 00006D4A E9B5BAFFFF          <2> 		jmp os
  8788                              <2> 
  8789                              <2> 	winblows:
  8790 00006D4F BE[A26D0000]        <2> 		mov esi, turnoffmsg
  8791 00006D54 BB[8B500000]        <2> 		mov ebx, turnoff
  8792 00006D59 668B0D[2B550000]    <2> 		mov cx, [resolutiony]
  8793 00006D60 6681E92000          <2> 		sub cx, 32
  8794 00006D65 6631D2              <2> 		xor dx, dx
  8795 00006D68 30E4                <2> 		xor ah, ah
  8796 00006D6A B010                <2> 		mov al, 00010000b
  8797 00006D6C E808030000          <2> 		call showstring
  8798 00006D71 BE[996D0000]        <2> 		mov esi, gotomenu
  8799 00006D76 668B0D[2B550000]    <2> 		mov cx, [resolutiony]
  8800 00006D7D 6681E93000          <2> 		sub cx, 48
  8801 00006D82 6631D2              <2> 		xor dx, dx
  8802 00006D85 30E4                <2> 		xor ah, ah
  8803 00006D87 B010                <2> 		mov al, 00010000b
  8804 00006D89 BB[086D0000]        <2> 		mov ebx, gotomenuboot
  8805 00006D8E E9E6020000          <2> 		jmp showstring
  8806                              <2> 		
  8807                              <2> 
  8808 00006D93 737461727400        <2> 	start	db "start",0
  8809 00006D99 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8810 00006DA2 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8811 00006DAB 00                  <2>
  8812 00006DAC 426F6F2100          <2> 	boomsg db "Boo!",0
  8813 00006DB1 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8814 00006DBA 73206561737920746F- <2>
  8815 00006DC3 20647261772E00      <2>
  8816 00006DCA 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8817 00006DD3 6D206E6F6D00        <2>
  8818                              <2> 
  8819 00006DD9 20035802            <2> 	termwindow:	dw 800,600	;window size
  8820 00006DDD FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8821 00006DE1 [14E72800]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8822 00006DE5 [B8512900]          <2>
  8823 00006DE9 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8824                              <2> 	
  8825 00006DE9 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8826 00006DE9 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8827 00006DE9 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8828 00006DE9 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8829 00006DE9 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8830                              <2> 
  8831                              <2> %ifdef gui.time
  8832                              <2> guitime:
  8833                              <2> 		call time	;get rtc in timeshow & dateshow
  8834                              <2> 		xor ebx, ebx
  8835                              <2> 		mov dx, [resolutionx2]
  8836                              <2> 		xor cx, cx
  8837                              <2> 		sub dx, 304
  8838                              <2> 		mov esi, dateshow
  8839                              <2> 		mov al, 00010001b
  8840                              <2> 		call showstring
  8841                              <2> 		mov esi, timeshow
  8842                              <2> 		xor ebx, ebx
  8843                              <2> 		mov al, 00010001b
  8844                              <2> 		call showstring
  8845                              <2> 		ret
  8846                              <2> %endif
  8847                              <1> %include "source/gui/text.asm"
  8848                              <2> 	showstring:
  8849 00007079 A2[31780000]        <2> 		mov [mouseselecton], al
  8850 0000707E 8025[31780000]01    <2> 		and byte [mouseselecton], 1
  8851 00007085 B402                <2> 		mov ah, 2
  8852 00007087 E8260D0000          <2> 		call graphicsadd
  8853                              <2> 	showstring2:
  8854 0000708C 30E4                <2> 		xor ah, ah
  8855 0000708E 8A06                <2> 		mov al, [esi]
  8856 00007090 3C00                <2> 		cmp al, 0
  8857 00007092 741E                <2> 		je doneshowstring
  8858 00007094 46                  <2> 		inc esi
  8859 00007095 3CFF                <2> 		cmp al, 255
  8860 00007097 74F3                <2> 		je showstring2
  8861 00007099 56                  <2> 		push esi
  8862 0000709A 668B1D[BA700000]    <2> 		mov bx, [colorfont2]
  8863 000070A1 E825000000          <2> 		call showfontvesa
  8864 000070A6 3C0A                <2> 		cmp al, 10
  8865 000070A8 7405                <2> 		je noproceedshst
  8866 000070AA 6681C20800          <2> 		add dx, 8
  8867                              <2> 	noproceedshst:
  8868 000070AF 5E                  <2> 		pop esi
  8869 000070B0 EBDA                <2> 		jmp showstring2
  8870                              <2> 	doneshowstring:
  8871 000070B2 C605[31780000]00    <2> 		mov byte [mouseselecton], 0
  8872 000070B9 C3                  <2> 		ret
  8873                              <2> 
  8874 000070BA FFFF                <2> colorfont2 dw 0xFFFF
  8875 000070BC 00                  <2> colorcache db 0
  8876                              <2> 
  8877 000070BD 02                  <2> resolutionbytes db 2
  8878 000070BE 0000                <2> posxvesa dw 0
  8879 000070C0 0000                <2> posyvesa dw 0
  8880 000070C2 FFFF                <2> colorfont dw 0xFFFF
  8881                              <2> savefontvesa:		;;same rules as showfontvesa
  8882 000070C4 C605[30780000]01    <2> 	mov byte [savefonton], 1
  8883                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8884 000070CB 3CFF                <2> 	cmp al, 255
  8885 000070CD 7501                <2> 	jne nostopshowfont
  8886 000070CF C3                  <2> 	ret
  8887                              <2> nostopshowfont:
  8888 000070D0 66890D[C0700000]    <2> 	mov [posyvesa], cx
  8889 000070D7 3C0A                <2> 	cmp al, 10
  8890 000070D9 0F8424000000        <2> 	je near goodvesafontx
  8891 000070DF 31C9                <2> 	xor ecx, ecx
  8892 000070E1 668B0D[17560000]    <2> 	mov cx, [resolutionx2]
  8893 000070E8 6639CA              <2> 	cmp dx, cx
  8894 000070EB 7616                <2> 	jbe goodvesafontx
  8895 000070ED 6631D2              <2> 	xor dx, dx
  8896 000070F0 668B0D[C0700000]    <2> 	mov cx, [posyvesa]
  8897 000070F7 6681C11000          <2> 	add cx, 16
  8898 000070FC 66890D[C0700000]    <2> 	mov [posyvesa], cx
  8899                              <2> goodvesafontx:
  8900 00007103 668B0D[C0700000]    <2> 	mov cx, [posyvesa]
  8901 0000710A 668915[BE700000]    <2> 	mov [posxvesa], dx
  8902 00007111 8B3D[3F550000]      <2> 	mov edi, [physbaseptr]
  8903 00007117 66891D[C2700000]    <2> 	mov [colorfont], bx
  8904 0000711E 31DB                <2> 	xor ebx, ebx
  8905 00007120 88C3                <2> 	mov bl, al
  8906 00007122 31C0                <2> 	xor eax, eax
  8907 00007124 88D8                <2> 	mov al, bl
  8908 00007126 6689D3              <2> 	mov bx, dx
  8909 00007129 89DA                <2> 	mov edx, ebx
  8910 0000712B 31DB                <2> 	xor ebx, ebx
  8911 0000712D 6681F90000          <2> 	cmp cx, 0
  8912 00007132 7414                <2> 	je vesaposloopdn
  8913 00007134 668B1D[17560000]    <2> 	mov bx, [resolutionx2]
  8914                              <2> vesaposloop:
  8915 0000713B 52                  <2> 	push edx
  8916 0000713C 50                  <2> 	push eax
  8917 0000713D 31C0                <2> 	xor eax, eax
  8918 0000713F 6689C8              <2> 	mov ax, cx
  8919 00007142 F7E3                <2> 	mul ebx
  8920 00007144 01C7                <2> 	add edi, eax
  8921 00007146 58                  <2> 	pop eax
  8922 00007147 5A                  <2> 	pop edx
  8923                              <2> vesaposloopdn:
  8924 00007148 01D7                <2> 	add edi, edx
  8925 0000714A BE[838D0000]        <2> 	mov esi, fonts
  8926                              <2> findfontvesa:
  8927 0000714F 30E4                <2> 	xor ah, ah
  8928 00007151 3C0A                <2> 	cmp al, 10
  8929 00007153 0F84FE000000        <2> 	je near nwlinevesa
  8930 00007159 C1E004              <2> 	shl eax, 4
  8931 0000715C 01C6                <2> 	add esi, eax
  8932 0000715E C1E804              <2> 	shr eax, 4
  8933 00007161 81FE[839D0000]      <2> 	cmp esi, fontend
  8934 00007167 0F83B9000000        <2> 	jae near donefontvesa
  8935 0000716D 4E                  <2> 	dec esi
  8936                              <2> foundfontvesa:
  8937 0000716E 46                  <2> 	inc esi
  8938 0000716F 803D[30780000]01    <2> 	cmp byte [savefonton], 1
  8939 00007176 0F8401010000        <2> 	je near vesafontsaver
  8940 0000717C 30C9                <2> 	xor cl, cl
  8941 0000717E 8A06                <2> 	mov al, [esi]
  8942 00007180 668B15[17560000]    <2> 	mov dx, [resolutionx2]
  8943 00007187 662B15[BE700000]    <2> 	sub dx, [posxvesa]
  8944 0000718E 6681FA1000          <2> 	cmp dx, 16
  8945 00007193 7708                <2> 	ja paintfontvesa
  8946 00007195 D0EA                <2> 	shr dl, 1
  8947 00007197 8815[56720000]      <2> 	mov [charwidth], dl
  8948                              <2> paintfontvesa:
  8949 0000719D B201                <2> 	mov dl, 1
  8950 0000719F 20C2                <2> 	and dl, al
  8951 000071A1 803D[2F780000]01    <2> 	cmp byte [showcursorfonton], 1
  8952 000071A8 0F8435000000        <2> 	je near nodelpaintedfont
  8953 000071AE 803D[2F780000]02    <2> 	cmp byte [showcursorfonton], 2
  8954 000071B5 0F8518000000        <2> 	jne near noswitchcursorfonton
  8955 000071BB 80FA00              <2> 	cmp dl, 0
  8956 000071BE 0F842E000000        <2> 	je near nopixelset
  8957 000071C4 668B1D[C2700000]    <2> 	mov bx, [colorfont]
  8958 000071CB 66891F              <2> 	mov [edi], bx
  8959 000071CE E91F000000          <2> 	jmp nopixelset
  8960                              <2> noswitchcursorfonton:
  8961 000071D3 3215[31780000]      <2> 	xor dl, [mouseselecton]
  8962 000071D9 668B1D[F86A0000]    <2> 	mov bx, [background]
  8963 000071E0 66891F              <2> 	mov [edi], bx
  8964                              <2> nodelpaintedfont:
  8965 000071E3 80FA00              <2> 	cmp dl, 0
  8966 000071E6 740A                <2> 	je nopixelset
  8967 000071E8 668B15[C2700000]    <2> 	mov dx, [colorfont]
  8968 000071EF 668917              <2> 	mov [edi], dx
  8969                              <2> nopixelset:
  8970 000071F2 81C702000000        <2> 	add edi, 2
  8971 000071F8 D0C0                <2> 	rol al, 1
  8972 000071FA FEC1                <2> 	inc cl
  8973 000071FC 3A0D[56720000]      <2> 	cmp cl, [charwidth]
  8974 00007202 7299                <2> 	jb paintfontvesa
  8975 00007204 FEC5                <2> 	inc ch
  8976 00007206 31D2                <2> 	xor edx, edx
  8977 00007208 668B15[17560000]    <2> 	mov dx, [resolutionx2]
  8978 0000720F 01D7                <2> 	add edi, edx
  8979 00007211 31D2                <2> 	xor edx, edx
  8980 00007213 8A15[56720000]      <2> 	mov dl, [charwidth]
  8981 00007219 00D2                <2> 	add dl, dl
  8982 0000721B 29D7                <2> 	sub edi, edx
  8983 0000721D 80FD10              <2> 	cmp ch, 16
  8984 00007220 0F8248FFFFFF        <2> 	jb foundfontvesa
  8985                              <2> donefontvesa:
  8986 00007226 B208                <2> 	mov dl, 8
  8987 00007228 8815[56720000]      <2> 	mov [charwidth], dl
  8988 0000722E 668B15[BE700000]    <2> 	mov dx, [posxvesa]
  8989 00007235 8A1D[56720000]      <2> 	mov bl, [charwidth]
  8990 0000723B 30FF                <2> 	xor bh, bh
  8991 0000723D 6601DA              <2> 	add dx, bx
  8992 00007240 668B1D[C2700000]    <2> 	mov bx, [colorfont]
  8993 00007247 668B0D[C0700000]    <2> 	mov cx, [posyvesa]
  8994 0000724E C605[30780000]00    <2> 	mov byte [savefonton], 0
  8995 00007255 C3                  <2> 	ret
  8996 00007256 08                  <2> charwidth db 8
  8997                              <2> nwlinevesa:
  8998 00007257 668B15[BE700000]    <2> 	mov dx, [posxvesa]
  8999 0000725E 6631D2              <2> 	xor dx, dx
  9000 00007261 668915[BE700000]    <2> 	mov [posxvesa], dx
  9001 00007268 668B0D[C0700000]    <2> 	mov cx, [posyvesa]
  9002 0000726F 6681C11000          <2> 	add cx, 16
  9003 00007274 66890D[C0700000]    <2> 	mov [posyvesa], cx
  9004 0000727B EBA9                <2> 	jmp donefontvesa
  9005                              <2> vesafontsaver:
  9006 0000727D 30C0                <2> 	xor al, al
  9007 0000727F 30C9                <2> 	xor cl, cl
  9008                              <2> vesafontsaver2:
  9009 00007281 668B17              <2> 	mov dx, [edi]
  9010 00007284 663B15[C2700000]    <2> 	cmp dx, [colorfont]
  9011 0000728B 742F                <2> 	je colorfontmatch
  9012                              <2> donecolormatch:
  9013 0000728D 81C702000000        <2> 	add edi, 2
  9014 00007293 D0C0                <2> 	rol al, 1
  9015 00007295 FEC1                <2> 	inc cl
  9016 00007297 80F908              <2> 	cmp cl, 8
  9017 0000729A 72E5                <2> 	jb vesafontsaver2
  9018 0000729C 8806                <2> 	mov [esi], al
  9019 0000729E 46                  <2> 	inc esi
  9020 0000729F FEC5                <2> 	inc ch
  9021 000072A1 31D2                <2> 	xor edx, edx
  9022 000072A3 668B15[17560000]    <2> 	mov dx, [resolutionx2]
  9023 000072AA 01D7                <2> 	add edi, edx
  9024 000072AC 81EF10000000        <2> 	sub edi, 16
  9025 000072B2 80FD10              <2> 	cmp ch, 16
  9026 000072B5 72C6                <2> 	jb vesafontsaver
  9027 000072B7 E96AFFFFFF          <2> 	jmp donefontvesa
  9028                              <2> colorfontmatch:
  9029 000072BC 0401                <2> 	add al, 1
  9030 000072BE EBCD                <2> 	jmp donecolormatch
  9031                              <1> %include "source/gui/window.asm"
  9032 000072C0 0000                <2> winvcopystx dw 0
  9033 000072C2 0000                <2> winvcopysty dw 0
  9034 000072C4 0000                <2> winvcopydx dw 0
  9035 000072C6 0000                <2> winvcopycx dw 0
  9036 000072C8 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9037 000072CC 00000000            <2> windowbufloc: dd 0
  9038 000072D0 00000000            <2> windowvideobuf dd 0
  9039 000072D4 00000000            <2> windowvideobuf2 dd 0
  9040 000072D8 00000000            <2> windowinfobuf dd 0
  9041 000072DC 0000                <2> termcol dw 0
  9042 000072DE 00000000            <2> wincopyendpos dd 0
  9043                              <2> 
  9044                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9045 000072E2 C605[61220000]01    <2> 		mov byte [termguion], 1
  9046 000072E9 6681C11000          <2> 		add cx, 16
  9047 000072EE 668915[C0720000]    <2> 		mov [winvcopystx], dx
  9048 000072F5 66890D[C2720000]    <2> 		mov [winvcopysty], cx
  9049 000072FC 8935[D8720000]      <2> 		mov [windowinfobuf], esi
  9050 00007302 668B16              <2> 		mov dx, [esi]
  9051 00007305 668B4E02            <2> 		mov cx, [esi + 2]
  9052 00007309 31C0                <2> 		xor eax, eax
  9053 0000730B 31DB                <2> 		xor ebx, ebx
  9054 0000730D 6689D0              <2> 		mov ax, dx
  9055 00007310 6689CB              <2> 		mov bx, cx
  9056 00007313 66C1E803            <2> 		shr ax, 3
  9057 00007317 66C1EB04            <2> 		shr bx, 4
  9058 0000731B 66A3[DC720000]      <2> 		mov [termcol], ax
  9059 00007321 A2[3B240000]        <2> 		mov [charxy], al
  9060 00007326 881D[3C240000]      <2> 		mov [charxy + 1], bl
  9061 0000732C 8B7E04              <2> 		mov edi, [esi + 4]
  9062 0000732F 893D[C8720000]      <2> 		mov [windowcolor], edi
  9063 00007335 8B7E0C              <2> 		mov edi, [esi + 12]
  9064 00007338 893D[D4720000]      <2> 		mov [windowvideobuf2], edi
  9065 0000733E 8B7E08              <2> 		mov edi, [esi + 8]
  9066 00007341 893D[D0720000]      <2> 		mov [windowvideobuf], edi
  9067 00007347 81FB00000000        <2> 		cmp ebx, 0
  9068 0000734D 0F84BB040000        <2> 		je near donewincopynow
  9069                              <2> 	findendposwin:
  9070 00007353 01C7                <2> 		add edi, eax
  9071 00007355 01C7                <2> 		add edi, eax
  9072 00007357 4B                  <2> 		dec ebx
  9073 00007358 81FB00000000        <2> 		cmp ebx, 0
  9074 0000735E 77F3                <2> 		ja findendposwin
  9075 00007360 893D[DE720000]      <2> 		mov [wincopyendpos], edi
  9076 00007366 31FF                <2> 		xor edi, edi
  9077 00007368 6631C0              <2> 		xor ax, ax
  9078 0000736B 6631DB              <2> 		xor bx, bx
  9079 0000736E 6601D2              <2> 		add dx, dx
  9080 00007371 668915[C4720000]    <2> 		mov [winvcopydx], dx
  9081 00007378 66890D[C6720000]    <2> 		mov [winvcopycx], cx
  9082 0000737F 668B0D[C2720000]    <2> 		mov cx, [winvcopysty]
  9083 00007386 6681E91000          <2> 		sub cx, 16
  9084 0000738B 668B15[C0720000]    <2> 		mov dx, [winvcopystx]
  9085 00007392 C605[62220000]00    <2> 		mov byte [termcopyon], 0
  9086 00007399 B403                <2> 		mov ah, 3
  9087 0000739B E8120A0000          <2> 		call graphicsadd
  9088                              <2> 	showwindow2:
  9089 000073A0 6681C11000          <2> 		add cx, 16
  9090 000073A5 668915[C0720000]    <2> 		mov [winvcopystx], dx
  9091 000073AC 66890D[C2720000]    <2> 		mov [winvcopysty], cx
  9092 000073B3 668B16              <2> 		mov dx, [esi]
  9093 000073B6 668B4E02            <2> 		mov cx, [esi + 2]
  9094 000073BA 6601D2              <2> 		add dx, dx
  9095 000073BD 668915[C4720000]    <2> 		mov [winvcopydx], dx
  9096 000073C4 66890D[C6720000]    <2> 		mov [winvcopycx], cx
  9097 000073CB E818000000          <2> 		call reloadwindowtitle
  9098 000073D0 803D[997D0000]01    <2> 		cmp byte [windrag], 1
  9099 000073D7 0F8340040000        <2> 		jae near forgetresetstuff
  9100 000073DD 8B3D[CC720000]      <2> 		mov edi, [windowbufloc]
  9101 000073E3 E968020000          <2> 		jmp windowvideocopyset
  9102                              <2> 		
  9103                              <2> 	reloadwindowtitle:
  9104 000073E8 8B3D[CC720000]      <2> 		mov edi, [windowbufloc]
  9105 000073EE 31D2                <2> 		xor edx, edx
  9106 000073F0 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  9107 000073F7 C1E204              <2> 		shl edx, 4
  9108 000073FA 29D7                <2> 		sub edi, edx
  9109 000073FC 803D[62220000]00    <2> 		cmp byte [termcopyon], 0
  9110 00007403 7532                <2> 		jne nocleartitlebarpos
  9111 00007405 8B3D[3F550000]      <2> 		mov edi, [physbaseptr]
  9112 0000740B 31D2                <2> 		xor edx, edx
  9113 0000740D 668B15[C0720000]    <2> 		mov dx, [winvcopystx]
  9114 00007414 01D7                <2> 		add edi, edx
  9115 00007416 31C9                <2> 		xor ecx, ecx
  9116 00007418 668B0D[C2720000]    <2> 		mov cx, [winvcopysty]
  9117 0000741F 6681E91000          <2> 		sub cx, 16
  9118 00007424 6681F90000          <2> 		cmp cx, 0
  9119 00007429 740C                <2> 		je nocleartitlebarpos
  9120                              <2> 	cleartitlebarpos:
  9121 0000742B 31C0                <2> 		xor eax, eax
  9122 0000742D 66A1[17560000]      <2> 		mov ax, [resolutionx2]
  9123 00007433 F7E1                <2> 		mul ecx
  9124 00007435 01C7                <2> 		add edi, eax
  9125                              <2> 	nocleartitlebarpos:
  9126 00007437 66B91000            <2> 		mov cx, 16
  9127 0000743B 668B15[C4720000]    <2> 		mov dx, [winvcopydx]
  9128 00007442 6681F90000          <2> 		cmp cx, 0
  9129 00007447 0F8448000000        <2> 		je near canceltitlebarput
  9130 0000744D 6681FA0000          <2> 		cmp dx, 0
  9131 00007452 0F843D000000        <2> 		je near canceltitlebarput
  9132                              <2> 	titlebarput:
  9133 00007458 66A1[C8720000]      <2> 		mov ax, [windowcolor]
  9134 0000745E 668907              <2> 		mov [edi], ax
  9135 00007461 6681EA0200          <2> 		sub dx, 2
  9136 00007466 81C702000000        <2> 		add edi, 2
  9137 0000746C 6681FA0000          <2> 		cmp dx, 0
  9138 00007471 75E5                <2> 		jne titlebarput
  9139 00007473 31D2                <2> 		xor edx, edx
  9140 00007475 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  9141 0000747C 6649                <2> 		dec cx
  9142 0000747E 662B15[C4720000]    <2> 		sub dx, [winvcopydx]
  9143 00007485 01D7                <2> 		add edi, edx
  9144 00007487 668B15[C4720000]    <2> 		mov dx, [winvcopydx]
  9145 0000748E 6681F90000          <2> 		cmp cx, 0
  9146 00007493 75C3                <2> 		jne titlebarput
  9147                              <2> 	canceltitlebarput:
  9148 00007495 893D[CC720000]      <2> 		mov [windowbufloc], edi
  9149 0000749B 803D[62220000]02    <2> 		cmp byte [termcopyon], 2
  9150 000074A2 0F8416010000        <2> 		je near winvcpst
  9151 000074A8 668B1D[F86A0000]    <2> 		mov bx, [background]
  9152 000074AF 6653                <2> 		push bx
  9153                              <2> 		;mov bx, 1111111111111111b
  9154 000074B1 6631DB              <2> 		xor bx, bx
  9155 000074B4 66891D[F86A0000]    <2> 		mov [background], bx
  9156 000074BB 6631C0              <2> 		xor ax, ax
  9157 000074BE 81C610000000        <2> 		add esi, 16
  9158 000074C4 668B15[C0720000]    <2> 		mov dx, [winvcopystx]
  9159 000074CB 668B0D[C2720000]    <2> 		mov cx, [winvcopysty]
  9160 000074D2 6681E91000          <2> 		sub cx, 16
  9161 000074D7 668B1D[C8720000]    <2> 		mov bx, [windowcolor]
  9162 000074DE C605[31780000]01    <2> 		mov byte [mouseselecton], 1
  9163 000074E5 E8A2FBFFFF          <2> 		call showstring2	;Show window title
  9164 000074EA 8B35[A0290000]      <2> 		mov esi, [usercache]
  9165 000074F0 6681C21000          <2> 		add dx, 16
  9166 000074F5 C605[31780000]01    <2> 		mov byte [mouseselecton], 1
  9167 000074FC E88BFBFFFF          <2> 		call showstring2	;Show user name
  9168 00007501 BE[4E8D0000]        <2> 		mov esi, computer
  9169 00007506 C605[31780000]01    <2> 		mov byte [mouseselecton], 1
  9170 0000750D E87AFBFFFF          <2> 		call showstring2	;Show computer name
  9171 00007512 B058                <2> 		mov al, "X"
  9172 00007514 30E4                <2> 		xor ah, ah
  9173 00007516 66BB00F8            <2> 		mov bx, 1111100000000000b
  9174 0000751A 668B15[C0720000]    <2> 		mov dx, [winvcopystx]
  9175 00007521 668B0D[C2720000]    <2> 		mov cx, [winvcopysty]
  9176 00007528 6681E91000          <2> 		sub cx, 16
  9177 0000752D 6681EA1000          <2> 		sub dx, 16
  9178 00007532 660315[C4720000]    <2> 		add dx, [winvcopydx]
  9179 00007539 C605[31780000]01    <2> 		mov byte [mouseselecton], 1
  9180 00007540 663B15[17560000]    <2> 		cmp dx, [resolutionx2]
  9181 00007547 7305                <2> 		jae .nox
  9182 00007549 E87DFBFFFF          <2> 		call showfontvesa
  9183                              <2> .nox:
  9184 0000754E 668B1D[F86A0000]    <2> 		mov bx, [background]
  9185 00007555 6681EA1800          <2> 		sub dx, 24
  9186 0000755A B02B                <2> 		mov al, "+"
  9187 0000755C 66BBE007            <2> 		mov bx, 0000011111100000b
  9188 00007560 C605[31780000]01    <2> 		mov byte [mouseselecton], 1
  9189 00007567 663B15[17560000]    <2> 		cmp dx, [resolutionx2]
  9190 0000756E 7305                <2> 		jae .noplus
  9191 00007570 E856FBFFFF          <2> 		call showfontvesa
  9192                              <2> .noplus:
  9193 00007575 6681EA1800          <2> 		sub dx, 24
  9194 0000757A B02D                <2> 		mov al, "-"
  9195 0000757C 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9196 00007580 C605[31780000]01    <2> 		mov byte [mouseselecton], 1
  9197 00007587 663B15[17560000]    <2> 		cmp dx, [resolutionx2]
  9198 0000758E 7305                <2> 		jae .nominus
  9199 00007590 E836FBFFFF          <2> 		call showfontvesa
  9200                              <2> .nominus:
  9201 00007595 6681EA1800          <2> 		sub dx, 24
  9202 0000759A B03F                <2> 		mov al, "?"
  9203 0000759C 66BB1F00            <2> 		mov bx, 0000000000011111b
  9204 000075A0 C605[31780000]01    <2> 		mov byte [mouseselecton], 1
  9205 000075A7 663B15[17560000]    <2> 		cmp dx, [resolutionx2]
  9206 000075AE 7305                <2> 		jae .noquestion
  9207 000075B0 E816FBFFFF          <2> 		call showfontvesa
  9208                              <2> .noquestion:
  9209 000075B5 665B                <2> 		pop bx
  9210 000075B7 66891D[F86A0000]    <2> 		mov [background], bx
  9211                              <2> 	winvcpst:
  9212 000075BE C3                  <2> 		ret
  9213                              <2> 
  9214                              <2> 	windowvideocopy:
  9215 000075BF 8B35[D8720000]      <2> 		mov esi, [windowinfobuf]
  9216 000075C5 668B16              <2> 		mov dx, [esi]
  9217 000075C8 668B4E02            <2> 		mov cx, [esi + 2]
  9218 000075CC 8B7E04              <2> 		mov edi, [esi + 4]
  9219 000075CF 893D[C8720000]      <2> 		mov [windowcolor], edi
  9220 000075D5 8B7E08              <2> 		mov edi, [esi + 8]
  9221 000075D8 8B5E0C              <2> 		mov ebx, [esi + 12]
  9222 000075DB 893D[D0720000]      <2> 		mov [windowvideobuf], edi
  9223 000075E1 891D[D4720000]      <2> 		mov [windowvideobuf2], ebx
  9224 000075E7 31C0                <2> 		xor eax, eax
  9225 000075E9 31DB                <2> 		xor ebx, ebx
  9226 000075EB 6689D0              <2> 		mov ax, dx
  9227 000075EE 6689CB              <2> 		mov bx, cx
  9228 000075F1 66C1E803            <2> 		shr ax, 3
  9229 000075F5 66C1EB04            <2> 		shr bx, 4
  9230 000075F9 66A3[DC720000]      <2> 		mov [termcol], ax
  9231 000075FF A2[3B240000]        <2> 		mov [charxy], al
  9232 00007604 881D[3C240000]      <2> 		mov [charxy + 1], bl
  9233 0000760A 8B3D[CC720000]      <2> 		mov edi, [windowbufloc]
  9234 00007610 3B3D[3F550000]      <2> 		cmp edi, [physbaseptr]
  9235 00007616 0F8334000000        <2> 		jae near windowvideocopyset
  9236 0000761C 31C9                <2> 		xor ecx, ecx
  9237 0000761E 31D2                <2> 		xor edx, edx
  9238 00007620 668B15[C0720000]    <2> 		mov dx, [winvcopystx]
  9239 00007627 668B0D[C2720000]    <2> 		mov cx, [winvcopysty]
  9240 0000762E 8B3D[3F550000]      <2> 		mov edi, [physbaseptr]
  9241 00007634 01D7                <2> 		add edi, edx
  9242 00007636 81F900000000        <2> 		cmp ecx, 0
  9243 0000763C 7412                <2> 		je windowvideocopyset
  9244                              <2> 	yrescopylp:
  9245 0000763E 31C0                <2> 		xor eax, eax
  9246 00007640 66A1[17560000]      <2> 		mov ax, [resolutionx2]
  9247 00007646 F7E1                <2> 		mul ecx
  9248 00007648 01C7                <2> 		add edi, eax
  9249 0000764A 893D[CC720000]      <2> 		mov [windowbufloc], edi
  9250                              <2> 	windowvideocopyset:
  9251 00007650 6631C9              <2> 		xor cx, cx
  9252 00007653 6649                <2> 		dec cx
  9253 00007655 66890D[25780000]    <2> 		mov [charposline], cx
  9254 0000765C 89FE                <2> 		mov esi, edi
  9255 0000765E 81EE10000000        <2> 		sub esi, 16
  9256 00007664 31D2                <2> 		xor edx, edx
  9257 00007666 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  9258 0000766D C1E204              <2> 		shl edx, 4
  9259 00007670 01D6                <2> 		add esi, edx
  9260 00007672 8B3D[D0720000]      <2> 		mov edi, [windowvideobuf]
  9261 00007678 81EF02000000        <2> 		sub edi, 2
  9262 0000767E 893D[27780000]      <2> 		mov [charposvbuf], edi
  9263 00007684 E97A000000          <2> 		jmp nextcharwin
  9264                              <2> 	win.write:	;adjusted this to use alpha
  9265                              <2> 				;5R, 6G, 5B
  9266                              <2> %ifdef gui.alphablending
  9267                              <2> 		push esi
  9268                              <2> 		push bx
  9269                              <2> 		push cx
  9270                              <2> 		push dx
  9271                              <2> %ifdef gui.background
  9272                              <2> 		mov esi, edi
  9273                              <2> 		sub esi, [physbaseptr]
  9274                              <2> 		add esi, [backgroundimage]
  9275                              <2> 		cmp dword [backgroundimage], 0
  9276                              <2> 		jne .red
  9277                              <2> %endif
  9278                              <2> 		mov esi, background
  9279                              <2> 	.red:
  9280                              <2> 		mov cx, [esi]
  9281                              <2> 		shr cx, 11
  9282                              <2> 		mov bx, ax
  9283                              <2> 		shr bx, 11
  9284                              <2> 		add cx, bx
  9285                              <2> 		add cx, bx
  9286                              <2> 		add cx, bx
  9287                              <2> 		shr cx, 2
  9288                              <2> 		shl cx, 11
  9289                              <2> 		mov dx, cx
  9290                              <2> 	.green:
  9291                              <2> 		mov cx, [esi]
  9292                              <2> 		shl cx, 5
  9293                              <2> 		shr cx, 10
  9294                              <2> 		mov bx, ax
  9295                              <2> 		shl bx, 5
  9296                              <2> 		shr bx, 10
  9297                              <2> 		add cx, bx
  9298                              <2> 		add cx, bx
  9299                              <2> 		add cx, bx
  9300                              <2> 		shr cx, 2
  9301                              <2> 		shl cx, 5
  9302                              <2> 		add dx, cx
  9303                              <2> 	.blue:
  9304                              <2> 		mov cx, [esi]
  9305                              <2> 		shl cx, 11
  9306                              <2> 		shr cx, 11
  9307                              <2> 		mov bx, ax
  9308                              <2> 		shl bx, 11
  9309                              <2> 		shr bx, 11
  9310                              <2> 		add cx, bx
  9311                              <2> 		add cx, bx
  9312                              <2> 		add cx, bx
  9313                              <2> 		shr cx, 2
  9314                              <2> 		add dx, cx
  9315                              <2> 		mov [edi], dx
  9316                              <2> 		pop dx
  9317                              <2> 		pop cx
  9318                              <2> 		pop bx
  9319                              <2> 		pop esi
  9320                              <2> %else
  9321 00007689 668907              <2> 		mov [edi], ax
  9322                              <2> %endif
  9323 0000768C C3                  <2> 		ret
  9324                              <2> 	copywindow:
  9325 0000768D B201                <2> 		mov dl, 1
  9326 0000768F D0C6                <2> 		rol dh, 1
  9327 00007691 20F2                <2> 		and dl, dh
  9328 00007693 803D[BC700000]10    <2> 		cmp byte [colorcache], 0x10
  9329 0000769A 7320                <2> 		jae switchwincolors
  9330 0000769C 66A1[CA720000]      <2> 		mov ax, [windowcolor + 2]
  9331 000076A2 E8E2FFFFFF          <2> 		call win.write
  9332 000076A7 80FA00              <2> 		cmp dl, 0
  9333 000076AA 742B                <2> 		je nowritewin
  9334 000076AC 66A1[C8720000]      <2> 		mov ax, [windowcolor]
  9335 000076B2 E8D2FFFFFF          <2> 		call win.write
  9336 000076B7 E91B000000          <2> 		jmp nowritewin
  9337                              <2> 	switchwincolors:
  9338 000076BC 66A1[C8720000]      <2> 		mov ax, [windowcolor]
  9339 000076C2 E8C2FFFFFF          <2> 		call win.write
  9340 000076C7 80FA00              <2> 		cmp dl, 0
  9341 000076CA 740B                <2> 		je nowritewin
  9342 000076CC 66A1[CA720000]      <2> 		mov ax, [windowcolor + 2]
  9343 000076D2 E8B2FFFFFF          <2> 		call win.write
  9344                              <2> 	nowritewin:
  9345 000076D7 81C702000000        <2> 		add edi, 2
  9346 000076DD FEC1                <2> 		inc cl
  9347 000076DF 80F908              <2> 		cmp cl, 8
  9348 000076E2 75A9                <2> 		jne copywindow
  9349 000076E4 6643                <2> 		inc bx
  9350 000076E6 30C9                <2> 		xor cl, cl
  9351 000076E8 31D2                <2> 		xor edx, edx
  9352 000076EA 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  9353 000076F1 01D6                <2> 		add esi, edx
  9354 000076F3 89F7                <2> 		mov edi, esi
  9355 000076F5 678AB7[838D]        <2> 		mov dh, [fonts + bx]
  9356 000076FA D0CE                <2> 		ror dh, 1
  9357 000076FC FEC5                <2> 		inc ch
  9358 000076FE 80FD10              <2> 		cmp ch, 16
  9359 00007701 758A                <2> 		jne copywindow
  9360                              <2> 	nextcharwin:
  9361 00007703 6631C9              <2> 		xor cx, cx
  9362 00007706 8B3D[27780000]      <2> 		mov edi, [charposvbuf]
  9363 0000770C 81C702000000        <2> 		add edi, 2
  9364 00007712 3B3D[DE720000]      <2> 		cmp edi, [wincopyendpos]
  9365 00007718 0F83F0000000        <2> 		jae near donewincopynow
  9366 0000771E 8A7F01              <2> 		mov bh, [edi + 1]
  9367 00007721 80FF00              <2> 		cmp bh, 0
  9368 00007724 7505                <2> 		jne nofixcolorwin
  9369 00007726 B707                <2> 		mov bh, 7
  9370 00007728 887F01              <2> 		mov [edi + 1], bh
  9371                              <2> 	nofixcolorwin:
  9372 0000772B 883D[BC700000]      <2> 		mov [colorcache], bh
  9373 00007731 8A1F                <2> 		mov bl, [edi]
  9374 00007733 893D[27780000]      <2> 		mov [charposvbuf], edi
  9375 00007739 813D[D4720000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9376 00007741 0000                <2>
  9377 00007743 7459                <2> 		je noskipcharcopy
  9378 00007745 2B3D[D0720000]      <2> 		sub edi, [windowvideobuf]
  9379 0000774B 033D[D4720000]      <2> 		add edi, [windowvideobuf2]
  9380 00007751 8A6701              <2> 		mov ah, [edi + 1]
  9381 00007754 8A07                <2> 		mov al, [edi]
  9382 00007756 6639D8              <2> 		cmp ax, bx
  9383 00007759 7543                <2> 		jne noskipcharcopy
  9384                              <2> 	skipcharcopy:
  9385 0000775B 81C610000000        <2> 		add esi, 16
  9386 00007761 668B0D[25780000]    <2> 		mov cx, [charposline]
  9387 00007768 6641                <2> 		inc cx
  9388 0000776A 66890D[25780000]    <2> 		mov [charposline], cx
  9389 00007771 663B0D[DC720000]    <2> 		cmp cx, [termcol]
  9390 00007778 7289                <2> 		jb nextcharwin
  9391 0000777A 6631C9              <2> 		xor cx, cx
  9392 0000777D 66890D[25780000]    <2> 		mov [charposline], cx
  9393 00007784 31D2                <2> 		xor edx, edx
  9394 00007786 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  9395 0000778D C1E204              <2> 		shl edx, 4
  9396 00007790 662B15[C4720000]    <2> 		sub dx, [winvcopydx]
  9397 00007797 01D6                <2> 		add esi, edx
  9398 00007799 E965FFFFFF          <2> 		jmp nextcharwin
  9399                              <2> 	noskipcharcopy:
  9400 0000779E 881F                <2> 		mov [edi], bl
  9401 000077A0 887F01              <2> 		mov [edi + 1], bh
  9402 000077A3 8B3D[27780000]      <2> 		mov edi, [charposvbuf]
  9403 000077A9 30FF                <2> 		xor bh, bh
  9404 000077AB 66C1E304            <2> 		shl bx, 4
  9405 000077AF 31D2                <2> 		xor edx, edx
  9406 000077B1 668B15[17560000]    <2> 		mov dx, [resolutionx2]
  9407 000077B8 C1E204              <2> 		shl edx, 4
  9408 000077BB 29D6                <2> 		sub esi, edx
  9409 000077BD 81C610000000        <2> 		add esi, 16
  9410 000077C3 89F7                <2> 		mov edi, esi
  9411 000077C5 668B0D[25780000]    <2> 		mov cx, [charposline]
  9412 000077CC 6641                <2> 		inc cx
  9413 000077CE 663B0D[DC720000]    <2> 		cmp cx, [termcol]
  9414 000077D5 7316                <2> 		jae fixwindowcopy
  9415 000077D7 66890D[25780000]    <2> 		mov [charposline], cx
  9416 000077DE 6631C9              <2> 		xor cx, cx
  9417 000077E1 678AB7[838D]        <2> 		mov dh, [fonts + bx]
  9418 000077E6 D0CE                <2> 		ror dh, 1
  9419 000077E8 E9A0FEFFFF          <2> 		jmp copywindow
  9420                              <2> fixwindowcopy:
  9421 000077ED 6631C9              <2> 		xor cx, cx
  9422 000077F0 66890D[25780000]    <2> 		mov [charposline], cx
  9423 000077F7 662B15[C4720000]    <2> 		sub dx, [winvcopydx]
  9424 000077FE 01D6                <2> 		add esi, edx
  9425 00007800 89F7                <2> 		mov edi, esi
  9426 00007802 678AB7[838D]        <2> 		mov dh, [fonts + bx]
  9427 00007807 D0CE                <2> 		ror dh, 1
  9428 00007809 E97FFEFFFF          <2> 		jmp copywindow
  9429                              <2> donewincopynow:
  9430 0000780E 803D[62220000]01    <2> 		cmp byte [termcopyon], 1
  9431 00007815 7506                <2> 		jne forgetresetstuff
  9432 00007817 E889AEFFFF          <2> 		call switchtermcursor
  9433 0000781C 61                  <2> 		popa
  9434                              <2> forgetresetstuff:
  9435 0000781D C605[62220000]00    <2> 		mov byte [termcopyon], 0
  9436 00007824 C3                  <2> 		ret
  9437                              <2> 		
  9438 00007825 0000                <2> charposline dw 0
  9439 00007827 00000000            <2> charposvbuf dw 0,0
  9440                              <1> 				
  9441 0000782B 00                  <1> copygui db 0
  9442 0000782C 00                  <1> graphicsset db 0
  9443 0000782D 0000                <1> graphicspos db 0,0
  9444 0000782F 00                  <1> showcursorfonton db 0
  9445 00007830 00                  <1> savefonton db 0
  9446 00007831 00                  <1> mouseselecton db 0
  9447                              <1> 
  9448 00007832 00                  <1> pbutton db 0
  9449 00007833 00                  <1> pLBUTTON db 0
  9450 00007834 00                  <1> pRBUTTON db 0
  9451 00007835 00000000            <1> dragging dw 0,0
  9452 00007839 0000000000000000    <1> lastpos dw 0,0,0,0
  9453 00007841 00000000            <1> colorbuf dw 0,0
  9454                              <1> 	
  9455                              <1> 	clickicon:
  9456 00007845 B001                <1> 		mov al, 1
  9457 00007847 A2[32780000]        <1> 		mov [pbutton], al
  9458 0000784C A0[33780000]        <1> 		mov al, [pLBUTTON]
  9459 00007851 2205[1E590000]      <1> 		and al, [LBUTTON]
  9460 00007857 8A25[34780000]      <1> 		mov ah, [pRBUTTON]
  9461 0000785D 2225[1F590000]      <1> 		and ah, [RBUTTON]
  9462 00007863 08E0                <1> 		or al, ah
  9463 00007865 3C00                <1> 		cmp al, 0
  9464 00007867 741B                <1> 		je nodragclick
  9465 00007869 813D[35780000]0100- <1> 		cmp dword [dragging], 1
  9466 00007871 0000                <1>
  9467 00007873 732D                <1> 		jae dragclick
  9468 00007875 C705[35780000]0100- <1> 		mov dword [dragging], 1
  9469 0000787D 0000                <1>
  9470 0000787F E91E000000          <1> 		jmp dragclick
  9471                              <1> 	nodragclick:
  9472 00007884 C705[35780000]0000- <1> 		mov dword [dragging], 0
  9473 0000788C 0000                <1>
  9474 0000788E A0[1E590000]        <1> 		mov al, [LBUTTON]
  9475 00007893 A2[33780000]        <1> 		mov [pLBUTTON], al
  9476 00007898 A0[1F590000]        <1> 		mov al, [RBUTTON]
  9477 0000789D A2[34780000]        <1> 		mov [pRBUTTON], al
  9478                              <1> 	dragclick:
  9479 000078A2 6631C0              <1> 		xor ax, ax
  9480 000078A5 BE[13D00000]        <1> 		mov esi, graphicstable
  9481 000078AA C705[AA800000]0000- <1> 		mov dword [codepointer], 0
  9482 000078B2 0000                <1>
  9483                              <1> 	clicon2:
  9484 000078B4 31D2                <1> 		xor edx, edx
  9485 000078B6 31C9                <1> 		xor ecx, ecx
  9486 000078B8 66813E0100          <1> 		cmp word [esi], 1
  9487 000078BD 0F841B000000        <1> 		je near iconselect
  9488 000078C3 66813E0200          <1> 		cmp word [esi], 2
  9489 000078C8 0F8472010000        <1> 		je near textselected
  9490 000078CE 66813E0300          <1> 		cmp word [esi], 3
  9491 000078D3 0F84C7020000        <1> 		je near windowselect
  9492 000078D9 E910040000          <1> 		jmp nexticonsel
  9493                              <1> 	iconselect:
  9494 000078DE 668B5606            <1> 		mov dx, [esi + 6]
  9495 000078E2 6689D0              <1> 		mov ax, dx
  9496 000078E5 668B4E08            <1> 		mov cx, [esi + 8]
  9497 000078E9 6689CB              <1> 		mov bx, cx
  9498 000078EC 6681C32000          <1> 		add bx, 32
  9499 000078F1 6601D0              <1> 		add ax, dx
  9500 000078F4 813D[35780000]0100- <1> 		cmp dword [dragging], 1
  9501 000078FC 0000                <1>
  9502 000078FE 746F                <1> 		je dragicon
  9503 00007900 813D[35780000]0000- <1> 		cmp dword [dragging], 0
  9504 00007908 0000                <1>
  9505 0000790A 7411                <1> 		je nodragiconcheck
  9506 0000790C 3935[35780000]      <1> 		cmp dword [dragging], esi
  9507 00007912 0F85D6030000        <1> 		jne near nexticonsel
  9508 00007918 E952000000          <1> 		jmp dragicon
  9509                              <1> 	nodragiconcheck:
  9510 0000791D 663905[0D580000]    <1> 		cmp [mousecursorposition], ax
  9511 00007924 0F82C4030000        <1> 		jb near nexticonsel
  9512 0000792A 66054000            <1> 		add ax, 64
  9513 0000792E 663905[0D580000]    <1> 		cmp [mousecursorposition], ax
  9514 00007935 0F87B3030000        <1> 		ja near nexticonsel
  9515 0000793B 6629D0              <1> 		sub ax, dx
  9516 0000793E 66390D[0F580000]    <1> 		cmp [mousecursorposition + 2], cx
  9517 00007945 0F82A3030000        <1> 		jb near nexticonsel
  9518 0000794B 66391D[0F580000]    <1> 		cmp [mousecursorposition + 2], bx
  9519 00007952 0F8796030000        <1> 		ja near nexticonsel
  9520 00007958 668B460A            <1> 		mov ax, [esi + 10]
  9521 0000795C 66250100            <1> 		and ax, 1
  9522 00007960 663D0100            <1> 		cmp ax, 1
  9523 00007964 0F84B6000000        <1> 		je near unselecticon
  9524 0000796A E98D000000          <1> 		jmp nodragicon
  9525                              <1> 	dragicon:
  9526 0000796F 663905[09580000]    <1> 		cmp [lastmouseposition], ax
  9527 00007976 0F8272030000        <1> 		jb near nexticonsel
  9528 0000797C 66054000            <1> 		add ax, 64
  9529 00007980 663905[09580000]    <1> 		cmp [lastmouseposition], ax
  9530 00007987 0F8761030000        <1> 		ja near nexticonsel
  9531 0000798D 6629D0              <1> 		sub ax, dx
  9532 00007990 66390D[0B580000]    <1> 		cmp [lastmouseposition + 2], cx
  9533 00007997 0F8251030000        <1> 		jb near nexticonsel
  9534 0000799D 66391D[0B580000]    <1> 		cmp [lastmouseposition + 2], bx
  9535 000079A4 0F8744030000        <1> 		ja near nexticonsel
  9536 000079AA 668B460A            <1> 		mov ax, [esi + 10]
  9537 000079AE 2410                <1> 		and al, 00010000b
  9538 000079B0 3C10                <1> 		cmp al, 00010000b
  9539 000079B2 7448                <1> 		je nodragicon
  9540 000079B4 8935[35780000]      <1> 		mov [dragging], esi
  9541 000079BA 66D1E2              <1> 		shl dx, 1
  9542 000079BD 662B15[09580000]    <1> 		sub dx, [lastmouseposition]
  9543 000079C4 660315[0D580000]    <1> 		add dx, [mousecursorposition]
  9544 000079CB 66D1EA              <1> 		shr dx, 1
  9545 000079CE 66030D[0F580000]    <1> 		add cx, [mousecursorposition + 2]
  9546 000079D5 662B0D[0B580000]    <1> 		sub cx, [lastmouseposition + 2]
  9547 000079DC 663B15[17560000]    <1> 		cmp dx, [resolutionx2]
  9548 000079E3 7607                <1> 		jbe chkyresdrgicn
  9549 000079E5 668B15[0D580000]    <1> 		mov dx, [mousecursorposition]
  9550                              <1> 	chkyresdrgicn:
  9551 000079EC 663B0D[2B550000]    <1> 		cmp cx, [resolutiony]
  9552 000079F3 7607                <1> 		jbe nodragicon
  9553 000079F5 668B0D[0F580000]    <1> 		mov cx, [mousecursorposition + 2]
  9554                              <1> 	nodragicon:
  9555 000079FC 66814E0A0100        <1> 		or word [esi + 10], 1
  9556 00007A02 8B5E0C              <1> 		mov ebx, [esi + 12]
  9557 00007A05 668B460A            <1> 		mov ax, [esi + 10]
  9558 00007A09 8B7602              <1> 		mov esi, [esi + 2]
  9559 00007A0C C705[AA800000]0000- <1> 		mov dword [codepointer], 0
  9560 00007A14 0000                <1>
  9561 00007A16 E85BEEFFFF          <1> 		call showicon
  9562 00007A1B E9E7020000          <1> 		jmp doneiconsel
  9563                              <1> 	unselecticon:
  9564 00007A20 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9565 00007A26 8B5E0C              <1> 		mov ebx, [esi + 12]
  9566 00007A29 668B460A            <1> 		mov ax, [esi + 10]
  9567 00007A2D 8B7602              <1> 		mov esi, [esi + 2]
  9568 00007A30 891D[AA800000]      <1> 		mov [codepointer], ebx
  9569 00007A36 E83BEEFFFF          <1> 		call showicon
  9570 00007A3B E9C7020000          <1> 		jmp doneiconsel
  9571                              <1> 	textselected:
  9572 00007A40 8B5E02              <1> 		mov ebx, [esi + 2]
  9573 00007A43 668B5606            <1> 		mov dx, [esi + 6]
  9574 00007A47 6689D0              <1> 		mov ax, dx
  9575 00007A4A 668B4E08            <1> 		mov cx, [esi + 8]
  9576                              <1> 	lengthtesttext:
  9577 00007A4E 803B00              <1> 		cmp byte [ebx], 0
  9578 00007A51 7407                <1> 		je donetesttextlength
  9579 00007A53 43                  <1> 		inc ebx
  9580 00007A54 66051000            <1> 		add ax, 16
  9581 00007A58 EBF4                <1> 		jmp lengthtesttext
  9582                              <1> 	donetesttextlength:
  9583 00007A5A 6689CB              <1> 		mov bx, cx
  9584 00007A5D 6681C30F00          <1> 		add bx, 15
  9585 00007A62 813D[35780000]0100- <1> 		cmp dword [dragging], 1
  9586 00007A6A 0000                <1>
  9587 00007A6C 7468                <1> 		je dragtext
  9588 00007A6E 813D[35780000]0000- <1> 		cmp dword [dragging], 0
  9589 00007A76 0000                <1>
  9590 00007A78 7411                <1> 		je nodragtextcheck
  9591 00007A7A 3935[35780000]      <1> 		cmp dword [dragging], esi
  9592 00007A80 0F8568020000        <1> 		jne near nexticonsel
  9593 00007A86 E94B000000          <1> 		jmp dragtext
  9594                              <1> 	nodragtextcheck:
  9595 00007A8B 663915[0D580000]    <1> 		cmp [mousecursorposition], dx
  9596 00007A92 0F8256020000        <1> 		jb near nexticonsel
  9597 00007A98 663905[0D580000]    <1> 		cmp [mousecursorposition], ax
  9598 00007A9F 0F8749020000        <1> 		ja near nexticonsel
  9599 00007AA5 66390D[0F580000]    <1> 		cmp [mousecursorposition + 2], cx
  9600 00007AAC 0F823C020000        <1> 		jb near nexticonsel
  9601 00007AB2 66391D[0F580000]    <1> 		cmp [mousecursorposition + 2], bx
  9602 00007AB9 0F872F020000        <1> 		ja near nexticonsel
  9603 00007ABF 668B460A            <1> 		mov ax, [esi + 10]
  9604 00007AC3 66250100            <1> 		and ax, 1
  9605 00007AC7 663D0100            <1> 		cmp ax, 1
  9606 00007ACB 0F84AB000000        <1> 		je near unselecttext
  9607 00007AD1 E986000000          <1> 		jmp nodragtext
  9608                              <1> 	dragtext:
  9609 00007AD6 663915[09580000]    <1> 		cmp [lastmouseposition], dx
  9610 00007ADD 0F820B020000        <1> 		jb near nexticonsel
  9611 00007AE3 663905[09580000]    <1> 		cmp [lastmouseposition], ax
  9612 00007AEA 0F87FE010000        <1> 		ja near nexticonsel
  9613 00007AF0 66390D[0B580000]    <1> 		cmp [lastmouseposition + 2], cx
  9614 00007AF7 0F82F1010000        <1> 		jb near nexticonsel
  9615 00007AFD 66391D[0B580000]    <1> 		cmp [lastmouseposition + 2], bx
  9616 00007B04 0F87E4010000        <1> 		ja near nexticonsel
  9617 00007B0A 668B460A            <1> 		mov ax, [esi + 10]
  9618 00007B0E 2410                <1> 		and al, 00010000b
  9619 00007B10 663D1000            <1> 		cmp ax, 00010000b
  9620 00007B14 0F8442000000        <1> 		je near nodragtext
  9621 00007B1A 8935[35780000]      <1> 		mov [dragging], esi
  9622 00007B20 662B15[09580000]    <1> 		sub dx, [lastmouseposition]
  9623 00007B27 660315[0D580000]    <1> 		add dx, [mousecursorposition]
  9624 00007B2E 66030D[0F580000]    <1> 		add cx, [mousecursorposition + 2]
  9625 00007B35 662B0D[0B580000]    <1> 		sub cx, [lastmouseposition + 2]
  9626 00007B3C 663B15[17560000]    <1> 		cmp dx, [resolutionx2]
  9627 00007B43 7607                <1> 		jbe chkyresdrgtxt
  9628 00007B45 668B15[0D580000]    <1> 		mov dx, [mousecursorposition]
  9629                              <1> 	chkyresdrgtxt:
  9630 00007B4C 663B0D[2B550000]    <1> 		cmp cx, [resolutiony]
  9631 00007B53 7607                <1> 		jbe nodragtext
  9632 00007B55 668B0D[0F580000]    <1> 		mov cx, [mousecursorposition + 2]
  9633                              <1> 	nodragtext:
  9634 00007B5C 66814E0A0100        <1> 		or word [esi + 10], 1
  9635 00007B62 8B5E0C              <1> 		mov ebx, [esi + 12]
  9636 00007B65 891D[AA800000]      <1> 		mov [codepointer], ebx
  9637 00007B6B 668B460A            <1> 		mov ax, [esi + 10]
  9638 00007B6F 8B7602              <1> 		mov esi, [esi + 2]
  9639 00007B72 E802F5FFFF          <1> 		call showstring
  9640 00007B77 E98B010000          <1> 		jmp doneiconsel
  9641                              <1> 	unselecttext:
  9642 00007B7C 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9643 00007B82 8B5E0C              <1> 		mov ebx, [esi + 12]
  9644 00007B85 668B460A            <1> 		mov ax, [esi + 10]
  9645 00007B89 8B7602              <1> 		mov esi, [esi + 2]
  9646 00007B8C C705[AA800000]0000- <1> 		mov dword [codepointer], 0
  9647 00007B94 0000                <1>
  9648 00007B96 E8DEF4FFFF          <1> 		call showstring
  9649 00007B9B E967010000          <1> 		jmp doneiconsel
  9650                              <1> windowselect:
  9651 00007BA0 8B7E02              <1> 		mov edi, [esi + 2]
  9652 00007BA3 668B5606            <1> 		mov dx, [esi + 6]
  9653 00007BA7 6689D0              <1> 		mov ax, dx
  9654 00007BAA 668B4E08            <1> 		mov cx, [esi + 8]
  9655 00007BAE 6689CB              <1> 		mov bx, cx
  9656 00007BB1 6681C31000          <1> 		add bx, 16
  9657 00007BB6 813D[35780000]0100- <1> 		cmp dword [dragging], 1
  9658 00007BBE 0000                <1>
  9659 00007BC0 746D                <1> 		je dragwin
  9660 00007BC2 813D[35780000]0000- <1> 		cmp dword [dragging], 0
  9661 00007BCA 0000                <1>
  9662 00007BCC 7411                <1> 		je nodragwincheck
  9663 00007BCE 3935[35780000]      <1> 		cmp dword [dragging], esi
  9664 00007BD4 0F8514010000        <1> 		jne near nexticonsel
  9665 00007BDA E950000000          <1> 		jmp dragwin
  9666                              <1> 	nodragwincheck:
  9667 00007BDF 663905[0D580000]    <1> 		cmp [mousecursorposition], ax
  9668 00007BE6 0F8202010000        <1> 		jb near nexticonsel
  9669 00007BEC 660307              <1> 		add ax, [edi]
  9670 00007BEF 660307              <1> 		add ax, [edi]
  9671 00007BF2 663905[0D580000]    <1> 		cmp [mousecursorposition], ax
  9672 00007BF9 0F87EF000000        <1> 		ja near nexticonsel
  9673 00007BFF 66390D[0F580000]    <1> 		cmp [mousecursorposition + 2], cx
  9674 00007C06 0F82E2000000        <1> 		jb near nexticonsel
  9675 00007C0C 66391D[0F580000]    <1> 		cmp [mousecursorposition + 2], bx
  9676 00007C13 0F87D5000000        <1> 		ja near nexticonsel
  9677 00007C19 662D1400            <1> 		sub ax, 20
  9678 00007C1D 663905[0D580000]    <1> 		cmp [mousecursorposition], ax
  9679 00007C24 0F87A4000000        <1> 		ja near killwin
  9680 00007C2A E98B000000          <1> 		jmp nodragwin
  9681                              <1> 	dragwin:
  9682 00007C2F 663905[09580000]    <1> 		cmp [lastmouseposition], ax
  9683 00007C36 0F82B2000000        <1> 		jb near nexticonsel
  9684 00007C3C 660307              <1> 		add ax, [edi]
  9685 00007C3F 660307              <1> 		add ax, [edi]
  9686 00007C42 663905[09580000]    <1> 		cmp [lastmouseposition], ax
  9687 00007C49 0F879F000000        <1> 		ja near nexticonsel
  9688 00007C4F 66390D[0B580000]    <1> 		cmp [lastmouseposition + 2], cx
  9689 00007C56 0F8292000000        <1> 		jb near nexticonsel
  9690 00007C5C 66391D[0B580000]    <1> 		cmp [lastmouseposition + 2], bx
  9691 00007C63 0F8785000000        <1> 		ja near nexticonsel
  9692 00007C69 8935[35780000]      <1> 		mov [dragging], esi
  9693 00007C6F 803D[997D0000]01    <1> 		cmp byte [windrag], 1
  9694 00007C76 7706                <1> 		ja .nochangewindrag
  9695 00007C78 FE05[997D0000]      <1> 		inc byte [windrag]
  9696                              <1> 	.nochangewindrag:
  9697 00007C7E 662B15[09580000]    <1> 		sub dx, [lastmouseposition]
  9698 00007C85 660315[0D580000]    <1> 		add dx, [mousecursorposition]
  9699 00007C8C 66030D[0F580000]    <1> 		add cx, [mousecursorposition + 2]
  9700 00007C93 662B0D[0B580000]    <1> 		sub cx, [lastmouseposition + 2]
  9701 00007C9A 663B15[17560000]    <1> 		cmp dx, [resolutionx2]
  9702 00007CA1 7607                <1> 		jbe chkyresdrgwin
  9703 00007CA3 668B15[0D580000]    <1> 		mov dx, [mousecursorposition]
  9704                              <1> 	chkyresdrgwin:
  9705 00007CAA 663B0D[2B550000]    <1> 		cmp cx, [resolutiony]
  9706 00007CB1 7607                <1> 		jbe nodragwin
  9707 00007CB3 668B0D[0F580000]    <1> 		mov cx, [mousecursorposition + 2]
  9708                              <1> 	nodragwin:
  9709 00007CBA 8B5E0C              <1> 		mov ebx, [esi + 12]
  9710 00007CBD 668B460A            <1> 		mov ax, [esi + 10]
  9711 00007CC1 8B7602              <1> 		mov esi, [esi + 2]
  9712 00007CC4 E819F6FFFF          <1> 		call showwindow
  9713 00007CC9 E939000000          <1> 		jmp doneiconsel
  9714                              <1> 	killwin:
  9715 00007CCE 66C7060000          <1> 		mov word [esi], 0
  9716 00007CD3 C605[61220000]00    <1> 		mov byte [termguion], 0
  9717 00007CDA E898EDFFFF          <1> 		call guiclear
  9718 00007CDF E818EEFFFF          <1> 		call reloadallgraphics
  9719 00007CE4 E82AEBFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
  9720 00007CE9 E93CE8FFFF          <1> 		jmp guistart
  9721                              <1> 	nexticonsel:
  9722 00007CEE 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9723 00007CF4 81C610000000        <1> 		add esi, 16
  9724 00007CFA 81FE[13D20000]      <1> 		cmp esi, graphicstableend
  9725 00007D00 7305                <1> 		jae doneiconsel
  9726 00007D02 E9ADFBFFFF          <1> 		jmp clicon2
  9727                              <1> 	doneiconsel:
  9728 00007D07 813D[35780000]0100- <1> 		cmp dword [dragging], 1
  9729 00007D0F 0000                <1>
  9730 00007D11 731C                <1> 		jae doneiconsel2
  9731 00007D13 30C0                <1> 		xor al, al
  9732 00007D15 A2[997D0000]        <1> 		mov [windrag], al
  9733 00007D1A 813D[AA800000]0000- <1> 		cmp dword [codepointer], 0
  9734 00007D22 0000                <1>
  9735 00007D24 7409                <1> 		je doneiconsel2
  9736 00007D26 8B1D[AA800000]      <1> 		mov ebx, [codepointer]
  9737 00007D2C FFD3                <1> 		call ebx
  9738 00007D2E C3                  <1> 		ret
  9739                              <1> 	doneiconsel2:
  9740 00007D2F A0[1E590000]        <1> 		mov al, [LBUTTON]
  9741 00007D34 A2[33780000]        <1> 		mov [pLBUTTON], al
  9742 00007D39 A0[1F590000]        <1> 		mov al, [RBUTTON]
  9743 00007D3E A2[34780000]        <1> 		mov [pRBUTTON], al
  9744 00007D43 813D[35780000]0100- <1> 		cmp dword [dragging], 1
  9745 00007D4B 0000                <1>
  9746 00007D4D 0F8618000000        <1> 		jbe near noreloadgraphicsclick
  9747 00007D53 E8BBEAFFFF          <1> 		call switchmousepos2
  9748 00007D58 803D[997D0000]01    <1> 		cmp byte [windrag], 1
  9749 00007D5F 7305                <1> 		jae noclearcursorcl
  9750 00007D61 E8B1E9FFFF          <1> 		call clearmousecursor
  9751                              <1> noclearcursorcl:
  9752 00007D66 E891EDFFFF          <1> 		call reloadallgraphics
  9753                              <1> noreloadgraphicsclick:
  9754 00007D6B 30E4                <1> 		xor ah, ah
  9755 00007D6D 31C9                <1> 		xor ecx, ecx
  9756 00007D6F 31D2                <1> 		xor edx, edx
  9757 00007D71 B0FE                <1> 		mov al, 254
  9758 00007D73 668B15[0D580000]    <1> 		mov dx, [mousecursorposition]
  9759 00007D7A 668B0D[0F580000]    <1> 		mov cx, [mousecursorposition + 2]
  9760 00007D81 66BBE738            <1> 		mov bx, 0011100011100111b
  9761 00007D85 C605[2F780000]01    <1> 		mov byte [showcursorfonton], 1
  9762 00007D8C E83AF3FFFF          <1> 		call showfontvesa
  9763 00007D91 C605[2F780000]00    <1> 		mov byte [showcursorfonton], 0
  9764 00007D98 C3                  <1> 		ret
  9765 00007D99 00                  <1> windrag db 0
  9766 00007D9A 00000000            <1> lastdrag dw 0,0
  9767 00007D9E 00000000            <1> grpctblpos dw 0,0
  9768                              <1> 
  9769                              <1> 
  9770                              <1> 
  9771 00007DA2 00<rept>            <1> grphbuf times 16 db 0
  9772                              <1> 	graphicsadd:
  9773 00007DB2 BF[13D00000]        <1> 		mov edi, graphicstable
  9774                              <1> 	shwgrph1:
  9775 00007DB7 397702              <1> 		cmp dword [edi + 2], esi
  9776 00007DBA 7414                <1> 		je showgraphicsreplace2
  9777 00007DBC 81C710000000        <1> 		add edi, 16
  9778 00007DC2 81FF[13D20000]      <1> 		cmp edi, graphicstableend
  9779 00007DC8 0F835C020000        <1> 		jae near showgraphicsnew
  9780 00007DCE EBE7                <1> 		jmp shwgrph1
  9781                              <1> 	showgraphicsreplace2:
  9782 00007DD0 8935[A47D0000]      <1> 		mov [grphbuf + 2], esi
  9783 00007DD6 668915[A87D0000]    <1> 		mov [grphbuf + 6], dx
  9784 00007DDD 66890D[AA7D0000]    <1> 		mov [grphbuf + 8], cx
  9785 00007DE4 891D[AE7D0000]      <1> 		mov [grphbuf + 12], ebx
  9786 00007DEA 30FF                <1> 		xor bh, bh
  9787 00007DEC 88E3                <1> 		mov bl, ah
  9788 00007DEE 30E4                <1> 		xor ah, ah
  9789 00007DF0 66A3[AC7D0000]      <1> 		mov [grphbuf + 10], ax	
  9790 00007DF6 66891D[A27D0000]    <1> 		mov [grphbuf], bx
  9791 00007DFD 66A1[A27D0000]      <1> 		mov ax, [grphbuf]
  9792 00007E03 663D0100            <1> 		cmp ax, 1
  9793 00007E07 0F8419000000        <1> 		je near replaceicon
  9794 00007E0D 663D0200            <1> 		cmp ax, 2
  9795 00007E11 0F8493000000        <1> 		je near replacestring
  9796 00007E17 663D0300            <1> 		cmp ax, 3
  9797 00007E1B 0F840F010000        <1> 		je near replacewindow
  9798 00007E21 E9E1010000          <1> 		jmp showgraphicsreplace
  9799                              <1> 	replaceicon:
  9800 00007E26 893D[39780000]      <1> 		mov [lastpos], edi
  9801 00007E2C 8935[3D780000]      <1> 		mov [lastpos + 4], esi
  9802 00007E32 8B7702              <1> 		mov esi, [edi + 2]
  9803 00007E35 668B5F0C            <1> 		mov bx, [edi + 12]
  9804 00007E39 668B5706            <1> 		mov dx, [edi + 6]
  9805 00007E3D 668B4F08            <1> 		mov cx, [edi + 8]
  9806 00007E41 668B06              <1> 		mov ax, [esi]
  9807 00007E44 66A3[41780000]      <1> 		mov [colorbuf], ax
  9808 00007E4A 66A1[F86A0000]      <1> 		mov ax, [background]
  9809 00007E50 668906              <1> 		mov [esi], ax
  9810 00007E53 8B5F0C              <1> 		mov ebx, [edi + 12]
  9811 00007E56 668B470A            <1> 		mov ax, [edi + 10]
  9812 00007E5A 2401                <1> 		and al, 1
  9813 00007E5C A2[AE800000]        <1> 		mov [iconselected], al
  9814 00007E61 668B470A            <1> 		mov ax, [edi + 10]
  9815 00007E65 E81FEAFFFF          <1> 		call showicon2
  9816 00007E6A 8B3D[39780000]      <1> 		mov edi, [lastpos]
  9817 00007E70 8B7702              <1> 		mov esi, [edi + 2]
  9818 00007E73 66A1[41780000]      <1> 		mov ax, [colorbuf]
  9819 00007E79 668906              <1> 		mov [esi], ax
  9820 00007E7C 8B35[3D780000]      <1> 		mov esi, [lastpos + 4]
  9821 00007E82 668B15[A87D0000]    <1> 		mov dx, [grphbuf + 6]
  9822 00007E89 668B0D[AA7D0000]    <1> 		mov cx, [grphbuf + 8]
  9823 00007E90 668B1D[A27D0000]    <1> 		mov bx, [grphbuf]
  9824 00007E97 66A1[AC7D0000]      <1> 		mov ax, [grphbuf + 10]
  9825 00007E9D 88DC                <1> 		mov ah, bl
  9826 00007E9F 8B1D[AE7D0000]      <1> 		mov ebx, [grphbuf + 12]
  9827 00007EA5 E95D010000          <1> 		jmp showgraphicsreplace
  9828                              <1> 	replacestring:
  9829 00007EAA 893D[39780000]      <1> 		mov [lastpos], edi
  9830 00007EB0 8935[3D780000]      <1> 		mov [lastpos + 4], esi
  9831 00007EB6 8B5F0C              <1> 		mov ebx, [edi + 12]
  9832 00007EB9 8B7702              <1> 		mov esi, [edi + 2]
  9833 00007EBC 668B5706            <1> 		mov dx, [edi + 6]
  9834 00007EC0 668B4F08            <1> 		mov cx, [edi + 8]
  9835 00007EC4 66A1[BA700000]      <1> 		mov ax, [colorfont2]
  9836 00007ECA 66A3[41780000]      <1> 		mov [colorbuf], ax
  9837 00007ED0 66A1[F86A0000]      <1> 		mov ax, [background]
  9838 00007ED6 66A3[BA700000]      <1> 		mov [colorfont2], ax		
  9839 00007EDC 8B5F0C              <1> 		mov ebx, [edi + 12]
  9840 00007EDF 668B470A            <1> 		mov ax, [edi + 10]
  9841 00007EE3 2401                <1> 		and al, 1
  9842 00007EE5 A2[31780000]        <1> 		mov [mouseselecton], al
  9843 00007EEA 668B470A            <1> 		mov ax, [edi + 10]
  9844 00007EEE E899F1FFFF          <1> 		call showstring2
  9845 00007EF3 66A1[41780000]      <1> 		mov ax, [colorbuf]
  9846 00007EF9 66A3[BA700000]      <1> 		mov [colorfont2], ax
  9847 00007EFF 8B3D[39780000]      <1> 		mov edi, [lastpos]
  9848 00007F05 8B7702              <1> 		mov esi, [edi + 2]
  9849 00007F08 668B15[A87D0000]    <1> 		mov dx, [grphbuf + 6]
  9850 00007F0F 668B0D[AA7D0000]    <1> 		mov cx, [grphbuf + 8]
  9851 00007F16 668B1D[A27D0000]    <1> 		mov bx, [grphbuf]
  9852 00007F1D 66A1[AC7D0000]      <1> 		mov ax, [grphbuf + 10]
  9853 00007F23 88DC                <1> 		mov ah, bl
  9854 00007F25 8B1D[AE7D0000]      <1> 		mov ebx, [grphbuf + 12]
  9855 00007F2B E9D7000000          <1> 		jmp showgraphicsreplace
  9856                              <1> 	replacewindow:
  9857 00007F30 893D[39780000]      <1> 		mov [lastpos], edi
  9858 00007F36 8935[3D780000]      <1> 		mov [lastpos + 4], esi
  9859 00007F3C 8B7702              <1> 		mov esi, [edi + 2]
  9860 00007F3F 8B3D[CC720000]      <1> 		mov edi, [windowbufloc]
  9861 00007F45 31D2                <1> 		xor edx, edx
  9862 00007F47 668B15[17560000]    <1> 		mov dx, [resolutionx2]
  9863 00007F4E C1E204              <1> 		shl edx, 4
  9864 00007F51 29D7                <1> 		sub edi, edx
  9865 00007F53 31D2                <1> 		xor edx, edx
  9866 00007F55 668B16              <1> 		mov dx, [esi]
  9867 00007F58 660316              <1> 		add dx, [esi]
  9868 00007F5B 668B4E02            <1> 		mov cx, [esi + 2]
  9869 00007F5F 6681C11000          <1> 		add cx, 16
  9870 00007F64 66A1[F86A0000]      <1> 		mov ax, [background]
  9871 00007F6A 803D[997D0000]01    <1> 		cmp byte [windrag], 1
  9872 00007F71 7604                <1> 		jbe clearwindow
  9873 00007F73 662B4E02            <1> 		sub cx, [esi + 2]
  9874                              <1> 	clearwindow:
  9875                              <1> 		%ifdef gui.background
  9876 00007F77 813D[CA6A0000]0000- <1> 			cmp dword [backgroundimage], 0
  9877 00007F7F 0000                <1>
  9878 00007F81 7419                <1> 			je .noback
  9879 00007F83 56                  <1> 			push esi
  9880 00007F84 8B35[CA6A0000]      <1> 			mov esi, [backgroundimage]
  9881 00007F8A 2B3D[3F550000]      <1> 			sub edi, [physbaseptr]
  9882 00007F90 01FE                <1> 			add esi, edi
  9883 00007F92 033D[3F550000]      <1> 			add edi, [physbaseptr]
  9884 00007F98 668B06              <1> 			mov ax, [esi]
  9885 00007F9B 5E                  <1> 			pop esi
  9886                              <1> 		.noback:
  9887                              <1> 		%endif
  9888 00007F9C 668907              <1> 		mov [edi], ax
  9889 00007F9F 81C702000000        <1> 		add edi, 2
  9890 00007FA5 81EA02000000        <1> 		sub edx, 2
  9891 00007FAB 81FA00000000        <1> 		cmp edx, 0
  9892 00007FB1 75C4                <1> 		jne clearwindow
  9893 00007FB3 6649                <1> 		dec cx
  9894 00007FB5 668B15[17560000]    <1> 		mov dx, [resolutionx2]
  9895 00007FBC 662B16              <1> 		sub dx, [esi]
  9896 00007FBF 662B16              <1> 		sub dx, [esi]
  9897 00007FC2 01D7                <1> 		add edi, edx
  9898 00007FC4 668B16              <1> 		mov dx, [esi]
  9899 00007FC7 660316              <1> 		add dx, [esi]
  9900 00007FCA 6681F90000          <1> 		cmp cx, 0
  9901 00007FCF 75A6                <1> 		jne clearwindow
  9902                              <1> 	endwindowclear:
  9903 00007FD1 C605[62220000]00    <1> 		mov byte [termcopyon], 0
  9904 00007FD8 8B3D[39780000]      <1> 		mov edi, [lastpos]
  9905 00007FDE 8B35[A47D0000]      <1> 		mov esi, [grphbuf + 2]
  9906 00007FE4 668B15[A87D0000]    <1> 		mov dx, [grphbuf + 6]
  9907 00007FEB 668B0D[AA7D0000]    <1> 		mov cx, [grphbuf + 8]
  9908 00007FF2 668B1D[A27D0000]    <1> 		mov bx, [grphbuf]
  9909 00007FF9 66A1[AC7D0000]      <1> 		mov ax, [grphbuf + 10]
  9910 00007FFF 88DC                <1> 		mov ah, bl
  9911 00008001 8B1D[AE7D0000]      <1> 		mov ebx, [grphbuf + 12]
  9912                              <1> 	showgraphicsreplace:
  9913 00008007 897702              <1> 		mov [edi + 2], esi
  9914 0000800A 66895706            <1> 		mov [edi + 6], dx
  9915 0000800E 66894F08            <1> 		mov [edi + 8], cx
  9916 00008012 895F0C              <1> 		mov [edi + 12], ebx
  9917 00008015 30FF                <1> 		xor bh, bh
  9918 00008017 88E3                <1> 		mov bl, ah
  9919 00008019 30E4                <1> 		xor ah, ah
  9920 0000801B 6689470A            <1> 		mov [edi + 10], ax
  9921 0000801F 66891F              <1> 		mov [edi], bx
  9922 00008022 8B5F0C              <1> 		mov ebx, [edi + 12]
  9923 00008025 668B470A            <1> 		mov ax, [edi + 10]
  9924 00008029 C3                  <1> 		ret
  9925                              <1> 	showgraphicsnew:
  9926 0000802A BF[13D00000]        <1> 		mov edi, graphicstable
  9927                              <1> 	shwgrph2:
  9928 0000802F 66813F0000          <1> 		cmp word [edi], 0
  9929 00008034 74D1                <1> 		je showgraphicsreplace
  9930 00008036 81C710000000        <1> 		add edi, 16
  9931 0000803C 81FF[13D20000]      <1> 		cmp edi, graphicstableend
  9932 00008042 72EB                <1> 		jb shwgrph2
  9933                              <1> 	showgraphicsdone:
  9934 00008044 C3                  <1> 		ret
  9935                              <1> 	
  9936                              <1> putpixel: ;color in si, point is (dx,cx)
  9937                              <1> 		;destroys edi, ebx, eax
  9938 00008045 6650                <1> 	push ax
  9939 00008047 6653                <1> 	push bx
  9940 00008049 31C0                <1> 	xor eax, eax
  9941 0000804B 31DB                <1> 	xor ebx, ebx
  9942 0000804D 31FF                <1> 	xor edi, edi
  9943 0000804F 668B1D[2B550000]    <1> 	mov bx, [resolutiony]
  9944 00008056 66A1[29550000]      <1> 	mov ax, [resolutionx]
  9945 0000805C 6639C2              <1> 	cmp dx, ax
  9946 0000805F 7720                <1> 	ja .doneput
  9947 00008061 66D1E0              <1> 	shl ax, 1
  9948 00008064 6639D9              <1> 	cmp cx, bx
  9949 00008067 7718                <1> 	ja .doneput
  9950 00008069 6689CB              <1> 	mov bx, cx
  9951 0000806C 52                  <1> 	push edx
  9952 0000806D F7E3                <1> 	mul ebx
  9953 0000806F 5A                  <1> 	pop edx
  9954 00008070 6601D7              <1> 	add di, dx
  9955 00008073 6601D7              <1> 	add di, dx
  9956 00008076 01C7                <1> 	add edi, eax
  9957 00008078 033D[3F550000]      <1> 	add edi, [physbaseptr]
  9958 0000807E 668937              <1> 	mov [edi], si
  9959                              <1> .doneput:
  9960 00008081 665B                <1> 	pop bx
  9961 00008083 6658                <1> 	pop ax
  9962 00008085 C3                  <1> 	ret
  9963                              <1> 	
  9964                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
  9965 00008086 31FF                <1> 	xor edi, edi
  9966 00008088 31C0                <1> 	xor eax, eax
  9967 0000808A 31DB                <1> 	xor ebx, ebx
  9968 0000808C 668B1D[17560000]    <1> 	mov bx, [resolutionx2]
  9969 00008093 6689D7              <1> 	mov di, dx
  9970 00008096 6601D7              <1> 	add di, dx
  9971 00008099 6689C8              <1> 	mov ax, cx
  9972 0000809C F7E3                <1> 	mul ebx
  9973 0000809E 01C7                <1> 	add edi, eax
  9974 000080A0 033D[3F550000]      <1> 	add edi, [physbaseptr]
  9975 000080A6 C3                  <1> 	ret
  9976                              <1> 
  9977 000080A7 00                  <1> 	mouseon db 0
  9978 000080A8 0000                <1> 	icon dw 0	;pointer to icon
  9979 000080AA 00000000            <1> 	codepointer dd 0 ;pointer to code
  9980 000080AE 00                  <1> 	iconselected db 0
  9981                                  %endif
  9982                                  %ifdef network.included
  9983                                  	%include "source/network.asm"
  9984                              <1> network.init:
  9985                              <1> %ifdef rtl8139.included
  9986                              <1> 	%include "source/drivers/network/rtl8139.asm"
  9987                              <2> ;RTL8139 NIC DRIVER
  9988                              <2> rtl8139:
  9989 000080AF E805000000          <2> 	call .init
  9990 000080B4 E9CE010000          <2> 	jmp .end
  9991                              <2> 
  9992                              <2> .RBSTART equ 0x30
  9993                              <2> .IMR equ 0x3C
  9994                              <2> .ISR equ 0x3E
  9995                              <2> .CMD equ 0x37
  9996                              <2> .RCR equ 0x44
  9997                              <2> .CONFIG1 equ 0x52
  9998                              <2> .TSD0 equ 0x10
  9999                              <2> .TSAD0 equ 0x20
 10000                              <2> .init:	;should find card, get mac, and initialize card
 10001 000080B9 31C0                <2> 	xor eax, eax
 10002 000080BB A2[22600000]        <2> 	mov [pcifunction], al
 10003 000080C0 A2[20600000]        <2> 	mov [pcibus], al
 10004 000080C5 A2[21600000]        <2> 	mov [pcidevice], al
 10005 000080CA B002                <2> 	mov al, 0x02 ;type code
 10006 000080CC A2[B1600000]        <2> 	mov [pcitype], al
 10007 000080D1 B8EC103981          <2> 	mov eax, 0x813910EC
 10008 000080D6 A3[25600000]        <2> 	mov [pcidevid], eax
 10009 000080DB E859DFFFFF          <2> 	call getpciport
 10010 000080E0 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10011 000080E6 7501                <2> 	jne .initnic
 10012 000080E8 C3                  <2> 	ret
 10013                              <2> .initnic:
 10014 000080E9 8915[66820000]      <2> 	mov [.basenicaddr], edx
 10015 000080EF 89D1                <2> 	mov ecx, edx
 10016 000080F1 E8ABADFFFF          <2> 	call showhex	;for debugging, please remove
 10017 000080F6 BE[6CCC2900]        <2> 	mov esi, rbuffstart
 10018 000080FB B900200000          <2> 	mov ecx, 8192
 10019 00008100 31C0                <2> 	xor eax, eax
 10020                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10021 00008102 8806                <2> 	mov [esi], al
 10022 00008104 46                  <2> 	inc esi
 10023 00008105 6649                <2> 	dec cx
 10024 00008107 6681F90000          <2> 	cmp cx, 0
 10025 0000810C 75F4                <2> 	jne .clearrbuff
 10026                              <2> .findmac:
 10027 0000810E 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10028 00008114 BF[6B820000]        <2> 	mov edi, .mac
 10029 00008119 B906000000          <2> 	mov ecx, 6
 10030                              <2> .macputloop:
 10031 0000811E EC                  <2> 	in al, dx
 10032 0000811F 8807                <2> 	mov [edi], al
 10033 00008121 47                  <2> 	inc edi
 10034 00008122 42                  <2> 	inc edx
 10035 00008123 49                  <2> 	dec ecx
 10036 00008124 75F8                <2> 	jnz .macputloop
 10037 00008126 B9[6B820000]        <2> 	mov ecx, .mac
 10038 0000812B E87C0B0000          <2> 	call showmac
 10039 00008130 E817000000          <2> 	call .resetnic
 10040 00008135 BE[71820000]        <2> 	mov esi, .name
 10041 0000813A E8E09BFFFF          <2> 	call print
 10042 0000813F BE[7A820000]        <2> 	mov esi, .initmsg
 10043 00008144 E8D69BFFFF          <2> 	call print
 10044 00008149 31DB                <2> 	xor ebx, ebx
 10045 0000814B C3                  <2> 	ret
 10046                              <2> .resetnic:
 10047 0000814C 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10048 00008152 81C252000000        <2> 	add edx, .CONFIG1
 10049 00008158 30C0                <2> 	xor al, al
 10050 0000815A EE                  <2> 	out dx, al	;WAKE UP!!!!
 10051 0000815B 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10052 00008161 81C237000000        <2> 	add edx, .CMD
 10053 00008167 B010                <2> 	mov al, 0x10
 10054 00008169 EE                  <2> 	out dx, al	;Reset
 10055                              <2> .resetnicwait:
 10056 0000816A EC                  <2> 	in al, dx
 10057 0000816B A810                <2> 	test al, 0x10
 10058 0000816D 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10059 00008173 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10060 00008179 81C230000000        <2> 	add edx, .RBSTART
 10061 0000817F B8[6CCC2900]        <2> 	mov eax, rbuffstart
 10062 00008184 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
 10063 00008189 EF                  <2> 	out dx, eax	;give nic receive buffer location
 10064 0000818A 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10065 00008190 81C23C000000        <2> 	add edx, .IMR
 10066                              <2> 	;in ax, dx
 10067 00008196 66B80500            <2> 	mov ax, 5
 10068 0000819A 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 10069 0000819C 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10070 000081A2 81C244000000        <2> 	add edx, .RCR
 10071 000081A8 B802000000          <2> 	mov eax, 000010b ;receive only physical matches
 10072 000081AD 0580000000          <2> 	add eax, 128 ;enable wrap option
 10073 000081B2 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10074 000081B3 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10075 000081B9 81C237000000        <2> 	add edx, .CMD
 10076 000081BF B00C                <2> 	mov al, 0x0C
 10077 000081C1 EE                  <2> 	out dx, al	;use transmit and receive
 10078 000081C2 C605[6A820000]01    <2> 	mov byte [.nicconfig], 1
 10079 000081C9 C3                  <2> 	ret
 10080                              <2> 	
 10081                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10082 000081CA 56                  <2> 	push esi
 10083 000081CB 57                  <2> 	push edi
 10084 000081CC 803D[6A820000]01    <2> 	cmp byte [.nicconfig], 1
 10085 000081D3 7410                <2> 	je .sendit
 10086 000081D5 E8DFFEFFFF          <2> 	call .init
 10087 000081DA 5F                  <2> 	pop edi
 10088 000081DB 5E                  <2> 	pop esi
 10089 000081DC 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10090 000081E2 75E6                <2> 	jne .sendpacket
 10091 000081E4 C3                  <2> 	ret
 10092                              <2> .sendit:
 10093 000081E5 E862FFFFFF          <2> 	call .resetnic
 10094 000081EA 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10095 000081F0 81C220000000        <2> 	add edx, .TSAD0
 10096 000081F6 5F                  <2> 	pop edi
 10097 000081F7 8B0D[6B820000]      <2> 	mov ecx, [.mac]
 10098 000081FD 894F06              <2> 	mov [edi + 6], ecx
 10099 00008200 668B0D[6F820000]    <2> 	mov cx, [.mac + 4]
 10100 00008207 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10101 0000820B A1[3E020000]        <2> 	mov eax, [basecache]
 10102 00008210 C1E004              <2> 	shl eax, 4
 10103 00008213 01F8                <2> 	add eax, edi
 10104 00008215 EF                  <2> 	out dx, eax	;here's Johnny!
 10105 00008216 5E                  <2> 	pop esi
 10106 00008217 29FE                <2> 	sub esi, edi
 10107 00008219 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10108 0000821F 81C210000000        <2> 	add edx, .TSD0
 10109 00008225 ED                  <2> 	in eax, dx ;get tsd
 10110 00008226 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
 10111 0000822B 01F0                <2> 	add eax, esi ;add length to tsd
 10112 0000822D 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
 10113 00008232 EF                  <2> 	out dx, eax
 10114                              <2> .checknicownbit:
 10115 00008233 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10116 00008239 81C210000000        <2> 	add edx, .TSD0
 10117 0000823F ED                  <2> 	in eax, dx
 10118 00008240 2500200000          <2> 	and eax, 0x2000 ;check own bit
 10119 00008245 3D00200000          <2> 	cmp eax, 0x2000
 10120 0000824A 75E7                <2> 	jne .checknicownbit
 10121                              <2> .checknictokbit:
 10122 0000824C 8B15[66820000]      <2> 	mov edx, [.basenicaddr]
 10123 00008252 81C210000000        <2> 	add edx, .TSD0
 10124 00008258 ED                  <2> 	in eax, dx
 10125 00008259 2500800000          <2> 	and eax, 0x8000	;check tok bit
 10126 0000825E 3D00800000          <2> 	cmp eax, 0x8000
 10127 00008263 75E7                <2> 	jne .checknictokbit
 10128 00008265 C3                  <2> 	ret
 10129 00008266 00000000            <2> .basenicaddr dd 0
 10130 0000826A 00                  <2> .nicconfig db 0
 10131 0000826B 000000000000        <2> .mac db 0,0,0,0,0,0
 10132 00008271 52544C383133392000  <2> .name db "RTL8139 ",0
 10133 0000827A 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10134 00008283 65640A00            <2>
 10135                              <2> 
 10136                              <2> .end:
 10137                              <1> %endif
 10138                              <1> %ifdef rtl8169.included
 10139                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10140                              <2> ;RTL8169 NIC DRIVER
 10141                              <2> rtl8169:
 10142 00008287 E805000000          <2> 	call .init
 10143 0000828C E97F030000          <2> 	jmp .end
 10144                              <2> 
 10145                              <2> ;REGISTERS
 10146                              <2> .CMD equ 0x37
 10147                              <2> .TXPOLL equ 0x38
 10148                              <2> .TCR equ 0x40
 10149                              <2> .RCR equ 0x44
 10150                              <2> .IMR equ 0x3C
 10151                              <2> .ISR equ 0x3E
 10152                              <2> .LOCK equ 0x50
 10153                              <2> .CONFIG1 equ 0x52
 10154                              <2> .TDSAR equ 0x20
 10155                              <2> .RDSAR equ 0xE4
 10156                              <2> .MAXRX equ 0xDA
 10157                              <2> .MAXTX equ 0xEC
 10158                              <2> ;IMPORTANT VALUES
 10159                              <2> .OWN equ 0x80000000
 10160                              <2> .EOR equ 0x40000000
 10161                              <2> .POLLING equ 0x40
 10162                              <2> ;CODE
 10163                              <2> .init:	;should find card, get mac, and initialize card
 10164 00008291 31C0                <2> 	xor eax, eax
 10165 00008293 A2[22600000]        <2> 	mov [pcifunction], al
 10166 00008298 A2[20600000]        <2> 	mov [pcibus], al
 10167 0000829D A2[21600000]        <2> 	mov [pcidevice], al
 10168 000082A2 B002                <2> 	mov al, 0x02 ;type code
 10169 000082A4 A2[B1600000]        <2> 	mov [pcitype], al
 10170 000082A9 B8EC106981          <2> 	mov eax, 0x816910EC
 10171 000082AE A3[25600000]        <2> 	mov [pcidevid], eax
 10172 000082B3 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10173 000082B8 891D[29600000]      <2> 	mov [pcidevidmask], ebx
 10174 000082BE E876DDFFFF          <2> 	call getpciport
 10175 000082C3 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10176 000082C9 7501                <2> 	jne .initnic
 10177 000082CB C3                  <2> 	ret
 10178                              <2> .initnic:
 10179 000082CC 8915[6E840000]      <2> 	mov [.basenicaddr], edx
 10180 000082D2 89D1                <2> 	mov ecx, edx
 10181 000082D4 E8C8ABFFFF          <2> 	call showhex	;for debugging, please remove
 10182 000082D9 BE[6CCC2900]        <2> 	mov esi, rbuffstart
 10183 000082DE B900200000          <2> 	mov ecx, 8192
 10184 000082E3 31C0                <2> 	xor eax, eax
 10185                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10186 000082E5 8806                <2> 	mov [esi], al
 10187 000082E7 46                  <2> 	inc esi
 10188 000082E8 6649                <2> 	dec cx
 10189 000082EA 6681F90000          <2> 	cmp cx, 0
 10190 000082EF 75F4                <2> 	jne .clearrbuff
 10191                              <2> .findmac:
 10192 000082F1 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10193 000082F7 BF[73840000]        <2> 	mov edi, .mac
 10194 000082FC B906000000          <2> 	mov ecx, 6
 10195                              <2> .macputloop:
 10196 00008301 EC                  <2> 	in al, dx
 10197 00008302 8807                <2> 	mov [edi], al
 10198 00008304 47                  <2> 	inc edi
 10199 00008305 42                  <2> 	inc edx
 10200 00008306 49                  <2> 	dec ecx
 10201 00008307 75F8                <2> 	jnz .macputloop
 10202 00008309 B9[73840000]        <2> 	mov ecx, .mac
 10203 0000830E E899090000          <2> 	call showmac
 10204 00008313 E817000000          <2> 	call .resetnic
 10205 00008318 BE[79840000]        <2> 	mov esi, .name
 10206 0000831D E8FD99FFFF          <2> 	call print
 10207 00008322 BE[82840000]        <2> 	mov esi, .initmsg
 10208 00008327 E8F399FFFF          <2> 	call print
 10209 0000832C 31DB                <2> 	xor ebx, ebx
 10210 0000832E C3                  <2> 	ret
 10211                              <2> .resetnic:
 10212 0000832F 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10213 00008335 81C237000000        <2> 	add edx, .CMD
 10214 0000833B B010                <2> 	mov al, 0x10
 10215 0000833D EE                  <2> 	out dx, al	;Reset
 10216                              <2> .resetnicwait:
 10217 0000833E EC                  <2> 	in al, dx
 10218 0000833F A810                <2> 	test al, 0x10
 10219 00008341 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10220 00008347 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10221 0000834D 81C250000000        <2> 	add edx, .LOCK
 10222 00008353 B0C0                <2> 	mov al, 0xC0
 10223 00008355 EE                  <2> 	out dx, al	;unlock config registers
 10224 00008356 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10225 0000835C 81C244000000        <2> 	add edx, .RCR
 10226 00008362 B80FE70000          <2> 	mov eax, 0x0000E70F
 10227 00008367 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10228 00008368 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10229 0000836E 81C240000000        <2> 	add edx, .TCR
 10230 00008374 B800070003          <2> 	mov eax, 0x03000700
 10231 00008379 EF                  <2> 	out dx, eax	;set up tcr
 10232 0000837A 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10233 00008380 81C2DA000000        <2> 	add edx, .MAXRX
 10234 00008386 66B8FF1F            <2> 	mov ax, 0x1FFF
 10235 0000838A 66EF                <2> 	out dx, ax	;setup max rx size
 10236 0000838C 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10237 00008392 81C2EC000000        <2> 	add edx, .MAXTX
 10238 00008398 B03B                <2> 	mov al, 0x3B
 10239 0000839A EE                  <2> 	out dx, al	;setup max tx size
 10240 0000839B 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10241 000083A1 81C220000000        <2> 	add edx, .TDSAR
 10242 000083A7 A1[3E020000]        <2> 	mov eax, [basecache]
 10243 000083AC C1E004              <2> 	shl eax, 4
 10244 000083AF 05[00850000]        <2> 	add eax, .txdesc
 10245 000083B4 EF                  <2> 	out dx, eax
 10246 000083B5 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10247 000083BB 81C2E4000000        <2> 	add edx, .RDSAR
 10248 000083C1 A1[3E020000]        <2> 	mov eax, [basecache]
 10249 000083C6 C1E004              <2> 	shl eax, 4
 10250 000083C9 05[00860000]        <2> 	add eax, .rxdesc
 10251 000083CE EF                  <2> 	out dx, eax
 10252 000083CF 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10253 000083D5 81C237000000        <2> 	add edx, .CMD
 10254 000083DB B00C                <2> 	mov al, 0x0C
 10255 000083DD EE                  <2> 	out dx, al	;use transmit and receive
 10256 000083DE 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10257 000083E4 81C250000000        <2> 	add edx, .LOCK
 10258 000083EA 30C0                <2> 	xor al, al
 10259 000083EC EE                  <2> 	out dx, al
 10260 000083ED C605[72840000]01    <2> 	mov byte [.nicconfig], 1
 10261 000083F4 C3                  <2> 	ret
 10262                              <2> 	
 10263                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10264 000083F5 803D[72840000]01    <2> 	cmp byte [.nicconfig], 1
 10265 000083FC 7412                <2> 	je .sendcachedata
 10266 000083FE 56                  <2> 	push esi
 10267 000083FF 57                  <2> 	push edi
 10268 00008400 E88CFEFFFF          <2> 	call .init
 10269 00008405 5F                  <2> 	pop edi
 10270 00008406 5E                  <2> 	pop esi
 10271 00008407 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10272 0000840D 75E6                <2> 	jne .sendpacket
 10273 0000840F C3                  <2> 	ret
 10274                              <2> .sendcachedata:
 10275 00008410 8B0D[73840000]      <2> 	mov ecx, [.mac]
 10276 00008416 894F06              <2> 	mov [edi + 6], ecx
 10277 00008419 668B0D[77840000]    <2> 	mov cx, [.mac + 4]
 10278 00008420 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10279 00008424 A1[3E020000]        <2> 	mov eax, [basecache]
 10280 00008429 C1E004              <2> 	shl eax, 4
 10281 0000842C 01F8                <2> 	add eax, edi
 10282 0000842E A3[08850000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10283 00008433 29FE                <2> 	sub esi, edi
 10284 00008435 668935[00850000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10285 0000843C 810D[00850000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10286 00008444 0080                <2>
 10287 00008446 8B15[6E840000]      <2> 	mov edx, [.basenicaddr]
 10288 0000844C 81C238000000        <2> 	add edx, .TXPOLL
 10289 00008452 B040                <2> 	mov al, .POLLING
 10290 00008454 EE                  <2> 	out dx, al	;set up TX Polling
 10291                              <2> .sendloop:
 10292 00008455 A1[00850000]        <2> 	mov eax, [.txdesc]
 10293 0000845A 89C1                <2> 	mov ecx, eax
 10294 0000845C E840AAFFFF          <2> 	call showhex
 10295 00008461 E8879DFFFF          <2> 	call getchar
 10296 00008466 A900000080          <2> 	test eax, .OWN
 10297 0000846B 75E8                <2> 	jnz .sendloop
 10298 0000846D C3                  <2> 	ret
 10299                              <2> 	
 10300 0000846E 00000000            <2> .basenicaddr dd 0
 10301 00008472 00                  <2> .nicconfig db 0
 10302 00008473 000000000000        <2> .mac db 0,0,0,0,0,0
 10303 00008479 52544C383136392000  <2> .name db "RTL8169 ",0
 10304 00008482 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10305 0000848B 65640A00            <2>
 10306 0000848F 90<rept>            <2> align 256, nop
 10307                              <2> .txdesc:
 10308 00008500 00000040            <2> 	dd .EOR	;command
 10309 00008504 00000000            <2> 	dd 0	;vlan
 10310 00008508 00000000            <2> 	dd 0	;low buf
 10311 0000850C 00000000            <2> 	dd 0	;high buf
 10312 00008510 90<rept>            <2> align 256, nop
 10313                              <2> .rxdesc:
 10314 00008600 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10315 00008604 00000000            <2> 	dd 0	;vlan
 10316 00008608 [6CCC2900]          <2> 	dd rbuffstart	;low buf
 10317 0000860C 00000000            <2> 	dd 0	;high buf
 10318                              <2> .end:
 10319                              <1> %endif
 10320                              <1> %ifdef ne2000.included
 10321                              <1> 	%include "source/drivers/network/ne2000.asm"
 10322                              <2> ne2000:
 10323 00008610 E805000000          <2> 	call .init
 10324 00008615 E93C030000          <2> 	jmp .end
 10325                              <2> 
 10326                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10327                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10328                              <2> ;0	CR		CR		CR		CR		CR		CR
 10329                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10330                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10331                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10332                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10333                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10334                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10335                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10336                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10337                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10338                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10339                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10340                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10341                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10342                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10343                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10344                              <2> .CR equ 0
 10345                              <2> 	.CR.STP	equ 1		;Stop
 10346                              <2> 	.CR.STA equ 2		;Start
 10347                              <2> 	.CR.TXP equ 4		;Transmit
 10348                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10349                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10350                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10351                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10352                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10353                              <2> .PSTART equ 1
 10354                              <2> .PSTOP equ 2
 10355                              <2> .BNRY equ 3
 10356                              <2> .ISR equ 7
 10357                              <2> 	.ISR.PRX equ 1		;Packet Received
 10358                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10359                              <2> 	.ISR.RXE equ 4		;Receive Error
 10360                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10361                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10362                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10363                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10364                              <2> 	.ISR.RST equ 0x80	;Reset status
 10365                              <2> .RSAR0 equ 8
 10366                              <2> .RSAR1 equ 9
 10367                              <2> .RBCR0 equ 0xA
 10368                              <2> .RBCR1 equ 0xB
 10369                              <2> .RCR equ 0xC
 10370                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10371                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10372                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10373                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10374                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10375                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10376                              <2> .DCR equ 0xE
 10377                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10378                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10379                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10380                              <2> 	.DCR.LS equ 8		;Loopback Select
 10381                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10382                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10383                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10384                              <2> .ASIC equ 0x10
 10385                              <2> .RESET equ 0x1F
 10386                              <2> 
 10387                              <2> .init:
 10388 0000861A BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10389 0000861F 31C0                <2> 	xor eax, eax
 10390 00008621 A2[22600000]        <2> 	mov [pcifunction], al
 10391 00008626 A2[20600000]        <2> 	mov [pcibus], al
 10392 0000862B A2[21600000]        <2> 	mov [pcidevice], al
 10393 00008630 B002                <2> 	mov al, 2 ;type code
 10394 00008632 A2[B1600000]        <2> 	mov [pcitype], al
 10395 00008637 B8EC102980          <2> 	mov eax, 0x802910EC
 10396 0000863C A3[25600000]        <2> 	mov [pcidevid], eax
 10397 00008641 E8F3D9FFFF          <2> 	call getpciport
 10398 00008646 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10399 0000864C 7501                <2> 	jne .good0
 10400 0000864E C3                  <2> 	ret
 10401                              <2> .good0:
 10402 0000864F 8915[19890000]      <2> 	mov [.basenicaddr], edx
 10403 00008655 89D1                <2> 	mov ecx, edx
 10404                              <2> .test:
 10405 00008657 E854000000          <2> 	call .reset
 10406 0000865C E87B000000          <2> 	call .stop
 10407 00008661 89CA                <2> 	mov edx, ecx
 10408 00008663 B9FF000000          <2> 	mov ecx, 0xFF
 10409 00008668 E2FE                <2> 	loop $ ;wait for ~100 us
 10410 0000866A 89D1                <2> 	mov ecx, edx
 10411 0000866C EC                  <2> 	in al, dx
 10412 0000866D 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10413 0000866F 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10414 00008671 7410                <2> 	je .good1
 10415 00008673 89CA                <2> 	mov edx, ecx
 10416 00008675 81C207000000        <2> 	add edx, .ISR
 10417 0000867B EC                  <2> 	in al, dx
 10418 0000867C 2480                <2> 	and al, .ISR.RST
 10419 0000867E 3C80                <2> 	cmp al, .ISR.RST
 10420 00008680 7401                <2> 	je .good1
 10421 00008682 C3                  <2> 	ret
 10422                              <2> .good1:
 10423 00008683 E819A8FFFF          <2> call showhex	;for debugging, please remove
 10424 00008688 E85B000000          <2> 	call .setup
 10425 0000868D E81A060000          <2> call showmac
 10426 00008692 BE[1E890000]        <2> mov esi, .name
 10427 00008697 E88396FFFF          <2> call print
 10428 0000869C BE[26890000]        <2> mov esi, .initmsg
 10429 000086A1 E87996FFFF          <2> call print
 10430 000086A6 C605[1D890000]01    <2> 	mov byte [.nicconfig], 1
 10431 000086AD 31DB                <2> 	xor ebx, ebx
 10432 000086AF C3                  <2> 	ret
 10433                              <2> .reset:
 10434 000086B0 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10435 000086B6 81C21F000000        <2> 	add edx, .RESET
 10436 000086BC EC                  <2> 	in al, dx
 10437 000086BD EE                  <2> 	out dx, al ;write its contents to itself
 10438 000086BE C3                  <2> 	ret
 10439                              <2> .page:
 10440 000086BF 66C1E00E            <2> 	shl ax, 14
 10441 000086C3 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10442 000086C9 EC                  <2> 	in al, dx
 10443 000086CA 243F                <2> 	and al, 00111111b
 10444 000086CC 08E0                <2> 	or al, ah
 10445 000086CE EE                  <2> 	out dx, al
 10446 000086CF C3                  <2> 	ret
 10447                              <2> .start:
 10448 000086D0 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10449 000086D6 B020                <2> 	mov al, .CR.RD2
 10450 000086D8 B002                <2> 	mov al, .CR.STA
 10451 000086DA EE                  <2> 	out dx, al
 10452 000086DB C3                  <2> 	ret
 10453                              <2> .stop:
 10454 000086DC 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10455 000086E2 B020                <2> 	mov al, .CR.RD2
 10456 000086E4 0C01                <2> 	or al, .CR.STP
 10457 000086E6 EE                  <2> 	out dx, al
 10458 000086E7 C3                  <2> 	ret
 10459                              <2> .setup:
 10460 000086E8 E8EFFFFFFF          <2> 	call .stop
 10461 000086ED 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10462 000086F3 81C20E000000        <2> 	add edx, .DCR
 10463 000086F9 B040                <2> 	mov al, .DCR.FT1
 10464 000086FB 0C01                <2> 	or al, .DCR.WTS
 10465 000086FD 0C08                <2> 	or al, .DCR.LS
 10466 000086FF EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10467 00008700 E8B9000000          <2> 	call .getmac
 10468 00008705 E8D2FFFFFF          <2> 	call .stop
 10469 0000870A 30C0                <2> 	xor al, al
 10470 0000870C 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10471 00008712 81C20A000000        <2> 	add edx, .RBCR0
 10472 00008718 EE                  <2> 	out dx, al
 10473 00008719 6642                <2> 	inc dx
 10474 0000871B EE                  <2> 	out dx, al ;Clear byte count
 10475 0000871C B800400000          <2> 	mov eax, 16*1024
 10476 00008721 A3[38890000]        <2> 	mov [.ringstart], eax
 10477 00008726 C1E808              <2> 	shr eax, 8
 10478 00008729 66A3[34890000]      <2> 	mov [.pagestart], ax
 10479 0000872F 0534000000          <2> 	add eax, 64-2*6
 10480 00008734 A3[36890000]        <2> 	mov [.pageend], eax
 10481 00008739 C1E008              <2> 	shl eax, 8
 10482 0000873C 66A3[3C890000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10483 00008742 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10484 00008748 81C201000000        <2> 	add edx, .PSTART
 10485 0000874E A0[34890000]        <2> 	mov al, [.pagestart]
 10486 00008753 EE                  <2> 	out dx, al
 10487 00008754 A0[36890000]        <2> 	mov al, [.pageend]
 10488 00008759 6642                <2> 	inc dx
 10489 0000875B EE                  <2> 	out dx, al
 10490 0000875C A0[34890000]        <2> 	mov al, [.pagestart]
 10491 00008761 6642                <2> 	inc dx
 10492 00008763 EE                  <2> 	out dx, al
 10493 00008764 E873FFFFFF          <2> 	call .stop
 10494                              <2> ;INSERT INTERRUPT ENABLE HERE
 10495 00008769 B001                <2> 	mov al, 1
 10496 0000876B E84FFFFFFF          <2> 	call .page
 10497 00008770 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10498 00008776 BF[46890000]        <2> 	mov edi, .rom
 10499                              <2> .copymactocard:
 10500 0000877B 42                  <2> 	inc edx
 10501 0000877C 6E                  <2> 	outsb
 10502 0000877D 81C702000000        <2> 	add edi, 2
 10503 00008783 81FA06000000        <2> 	cmp edx, 6
 10504 00008789 76F0                <2> 	jbe .copymactocard
 10505 0000878B 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10506 00008791 81C207000000        <2> 	add edx, 7
 10507 00008797 A0[34890000]        <2> 	mov al, [.pagestart]
 10508 0000879C FEC0                <2> 	inc al
 10509 0000879E EE                  <2> 	out dx, al ;set page in CURR register
 10510                              <2> ;INSERT MULTICAST INIT HERE
 10511 0000879F E838FFFFFF          <2> 	call .stop
 10512 000087A4 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10513 000087AA 81C20C000000        <2> 	add edx, .RCR
 10514 000087B0 B004                <2> 	mov al, .RCR.AB
 10515 000087B2 EE                  <2> 	out dx, al ;accept broadcast
 10516 000087B3 6642                <2> 	inc dx
 10517 000087B5 30C0                <2> 	xor al, al
 10518 000087B7 EE                  <2> 	out dx, al ;stop loopback
 10519 000087B8 E813FFFFFF          <2> 	call .start
 10520 000087BD C3                  <2> 	ret
 10521                              <2> .getmac:
 10522 000087BE 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10523 000087C4 B020                <2> 	mov al, 0x20
 10524 000087C6 0C02                <2> 	or al, 2
 10525 000087C8 EE                  <2> 	out dx, al	;set STA and RD2 bits
 10526 000087C9 6681C20A00          <2> 	add dx, .RBCR0
 10527 000087CE B010                <2> 	mov al, 16
 10528 000087D0 EE                  <2> 	out dx, al
 10529 000087D1 6642                <2> 	inc dx
 10530 000087D3 30C0                <2> 	xor al, al
 10531 000087D5 EE                  <2> 	out dx, al
 10532 000087D6 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10533 000087DC 6681C20800          <2> 	add dx, .RSAR0
 10534 000087E1 EE                  <2> 	out dx, al
 10535 000087E2 6642                <2> 	inc dx
 10536 000087E4 EE                  <2> 	out dx, al
 10537 000087E5 668B15[19890000]    <2> 	mov dx, [.basenicaddr]
 10538 000087EC B008                <2> 	mov al, 8
 10539 000087EE 0C02                <2> 	or al, 2
 10540 000087F0 EE                  <2> 	out dx, al
 10541 000087F1 668B15[19890000]    <2> 	mov dx, [.basenicaddr]
 10542 000087F8 6681C21000          <2> 	add dx, .ASIC
 10543 000087FD B908000000          <2> 	mov ecx, 8
 10544 00008802 BF[46890000]        <2> 	mov edi, .rom
 10545 00008807 F3666D              <2> 	rep insw
 10546                              <2> .copymac:
 10547 0000880A BF[46890000]        <2> 	mov edi, .rom
 10548 0000880F BE[40890000]        <2> 	mov esi, .mac
 10549 00008814 B906000000          <2> 	mov ecx, 6
 10550                              <2> .lpmac:
 10551 00008819 8A07                <2> 	mov al, [edi]
 10552 0000881B 8806                <2> 	mov [esi], al
 10553 0000881D 81C702000000        <2> 	add edi, 2
 10554 00008823 46                  <2> 	inc esi
 10555 00008824 E2F3                <2> 	loop .lpmac
 10556 00008826 B9[40890000]        <2> 	mov ecx, .mac
 10557 0000882B C3                  <2> 	ret
 10558                              <2> .sendpacket:
 10559 0000882C 803D[1D890000]00    <2> 	cmp byte [.nicconfig], 0
 10560 00008833 7512                <2> 	jne .sendit
 10561 00008835 56                  <2> 	push esi
 10562 00008836 57                  <2> 	push edi
 10563 00008837 E8DEFDFFFF          <2> 	call .init
 10564 0000883C 5F                  <2> 	pop edi
 10565 0000883D 5E                  <2> 	pop esi
 10566 0000883E 81FB00000000        <2> 	cmp ebx, 0
 10567 00008844 7401                <2> 	je .sendit
 10568 00008846 C3                  <2> 	ret
 10569                              <2> .sendit: ;packet start in edi, end in esi
 10570 00008847 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10571                              <2> 	;now the packet start is in esi, end in edi
 10572 00008849 8B0D[40890000]      <2> 	mov ecx, [.mac]
 10573 0000884F 894E06              <2> 	mov [esi + 6], ecx
 10574 00008852 668B0D[44890000]    <2> 	mov cx, [.mac + 4]
 10575 00008859 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10576 0000885D 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10577 00008863 B020                <2> 	mov al, .CR.RD2
 10578 00008865 0C02                <2> 	or al, .CR.STA
 10579 00008867 EE                  <2> 	out dx, al ;set RD2 and STA
 10580 00008868 81C207000000        <2> 	add edx, .ISR ; ISR
 10581 0000886E B040                <2> 	mov al, .ISR.RDC
 10582 00008870 EE                  <2> 	out dx, al ;set RDC flag
 10583 00008871 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10584 00008877 6681C20A00          <2> 	add dx, .RBCR0
 10585 0000887C 89F8                <2> 	mov eax, edi
 10586 0000887E 29F0                <2> 	sub eax, esi
 10587 00008880 BB01000000          <2> 	mov ebx, 1
 10588 00008885 21C3                <2> 	and ebx, eax
 10589 00008887 81FB01000000        <2> 	cmp ebx, 1
 10590 0000888D 7501                <2> 	jne .nofixword
 10591 0000888F 40                  <2> 	inc eax
 10592                              <2> .nofixword:
 10593 00008890 89C1                <2> 	mov ecx, eax ;save length in ecx
 10594 00008892 EE                  <2> 	out dx, al
 10595 00008893 86C4                <2> 	xchg al, ah
 10596 00008895 6642                <2> 	inc dx
 10597 00008897 EE                  <2> 	out dx, al ;send size
 10598 00008898 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10599 0000889E 6681C20800          <2> 	add dx, .RSAR0
 10600 000088A3 66A1[34890000]      <2> 	mov ax, [.pagestart]
 10601 000088A9 C1E008              <2> 	shl eax, 8
 10602 000088AC EE                  <2> 	out dx, al
 10603 000088AD 86C4                <2> 	xchg al, ah
 10604 000088AF 6642                <2> 	inc dx
 10605 000088B1 EE                  <2> 	out dx, al ;send address in NIC memory
 10606 000088B2 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10607 000088B8 B010                <2> 	mov al, .CR.RD1
 10608 000088BA 0C02                <2> 	or al, .CR.STA
 10609 000088BC EE                  <2> 	out dx, al ;set RD and STA
 10610 000088BD 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10611 000088BF D1E9                <2> 	shr ecx, 1
 10612 000088C1 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10613 000088C7 6681C21000          <2> 	add dx, 0x10
 10614 000088CC F3666F              <2> 	rep outsw ;Send the packet data
 10615 000088CF 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10616 000088D5 6681C20700          <2> 	add dx, .ISR
 10617                              <2> .chkcopylp:
 10618 000088DA B440                <2> 	mov ah, .ISR.RDC
 10619 000088DC EC                  <2> 	in al, dx
 10620 000088DD 20C4                <2> 	and ah, al
 10621 000088DF 80FC40              <2> 	cmp ah, 0x40
 10622 000088E2 75F6                <2> 	jne .chkcopylp	
 10623 000088E4 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10624 000088EA 6681C20400          <2> 	add dx, 4
 10625 000088EF A0[34890000]        <2> 	mov al, [.pagestart]
 10626 000088F4 EE                  <2> 	out dx, al ;send start address in pages
 10627 000088F5 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10628 000088FB 81C205000000        <2> 	add edx, 0x5
 10629 00008901 89D8                <2> 	mov eax, ebx
 10630 00008903 EE                  <2> 	out dx, al
 10631 00008904 86C4                <2> 	xchg al, ah
 10632 00008906 6642                <2> 	inc dx
 10633 00008908 EE                  <2> 	out dx, al ;send length
 10634 00008909 8B15[19890000]      <2> 	mov edx, [.basenicaddr]
 10635 0000890F B020                <2> 	mov al, 0x20
 10636 00008911 0C04                <2> 	or al, 4
 10637 00008913 0C02                <2> 	or al, 2
 10638 00008915 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 10639 00008916 31DB                <2> 	xor ebx, ebx
 10640 00008918 C3                  <2> 	ret
 10641 00008919 00000000            <2> .basenicaddr dd 0
 10642 0000891D 00                  <2> .nicconfig db 0
 10643 0000891E 4E45323030302000    <2> .name db "NE2000 ",0
 10644 00008926 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 10645 0000892F 65642E0A00          <2>
 10646                              <2> align 2, nop
 10647 00008934 0000                <2> .pagestart dw 0
 10648 00008936 0000                <2> .pageend dw 0
 10649 00008938 00000000            <2> .ringstart dd 0
 10650 0000893C 00000000            <2> .ringend dd 0
 10651 00008940 000000000000        <2> .mac db 0,0,0,0,0,0
 10652 00008946 00<rept>            <2> .rom times 16 db 0
 10653                              <2> 
 10654                              <2> .end:
 10655                              <1> %endif
 10656                              <1> %ifdef i8254x.included
 10657                              <1> 	%include "source/drivers/network/i8254x.asm"
 10658                              <2> ;Intel 8254x NIC DRIVER
 10659                              <2> i8254x:
 10660 00008956 E805000000          <2> 	call .init
 10661 0000895B E980020000          <2> 	jmp .end
 10662                              <2> 
 10663                              <2> ;REGISTERS
 10664                              <2> .EEC equ 0x10
 10665                              <2> .EERD equ 0x14
 10666                              <2> .TCTL equ 0x400
 10667                              <2> .TIPG equ 0x410
 10668                              <2> .TDBAL equ 0x3800
 10669                              <2> .TDBAH equ 0x3804
 10670                              <2> .TDLEN equ 0x3808
 10671                              <2> .TDH equ 0x3810
 10672                              <2> .TDT equ 0x3818
 10673                              <2> .RAL equ 0x5400
 10674                              <2> .RAH equ 0x5404
 10675                              <2> ;CODE
 10676                              <2> .init:	;should find card, get mac, and initialize card
 10677 00008960 31C0                <2> 	xor eax, eax
 10678 00008962 A2[22600000]        <2> 	mov [pcifunction], al
 10679 00008967 A2[20600000]        <2> 	mov [pcibus], al
 10680 0000896C A2[21600000]        <2> 	mov [pcidevice], al
 10681 00008971 B002                <2> 	mov al, 0x02 ;type code
 10682 00008973 A2[B1600000]        <2> 	mov [pcitype], al
 10683 00008978 B886800010          <2> 	mov eax, 0x10008086
 10684 0000897D A3[25600000]        <2> 	mov [pcidevid], eax
 10685 00008982 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 10686 00008987 891D[29600000]      <2> 	mov [pcidevidmask], ebx
 10687 0000898D E89BD6FFFF          <2> 	call getpcimem
 10688 00008992 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10689 00008998 7501                <2> 	jne .initnic
 10690 0000899A C3                  <2> 	ret
 10691                              <2> .initnic:
 10692 0000899B 8915[358B0000]      <2> 	mov [.basenicaddr], edx
 10693 000089A1 89D1                <2> 	mov ecx, edx
 10694 000089A3 E8F9A4FFFF          <2> 	call showhex	;for debugging, please remove
 10695 000089A8 BE[6CCC2900]        <2> 	mov esi, rbuffstart
 10696 000089AD B900200000          <2> 	mov ecx, 8192
 10697 000089B2 31C0                <2> 	xor eax, eax
 10698                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10699 000089B4 8806                <2> 	mov [esi], al
 10700 000089B6 46                  <2> 	inc esi
 10701 000089B7 6649                <2> 	dec cx
 10702 000089B9 6681F90000          <2> 	cmp cx, 0
 10703 000089BE 75F4                <2> 	jne .clearrbuff
 10704                              <2> .findmac:
 10705 000089C0 8B1D[358B0000]      <2> 	mov ebx, [.basenicaddr]
 10706                              <2> 	; Setup Control Register
 10707 000089C6 B861030000          <2> 	mov eax, 0x361
 10708 000089CB 8903                <2> 	mov [ebx], eax
 10709                              <2> 	; Setup Transmission Descriptors
 10710 000089CD BF[608B0000]        <2> 	mov edi, .tdesc
 10711 000089D2 A1[3E020000]        <2> 	mov eax, [basecache]
 10712 000089D7 C1E004              <2> 	shl eax, 4
 10713 000089DA 01F8                <2> 	add eax, edi
 10714 000089DC 898300380000        <2> 	mov [ebx + .TDBAL], eax
 10715 000089E2 31C0                <2> 	xor eax, eax
 10716 000089E4 898310380000        <2> 	mov [ebx + .TDH], eax
 10717 000089EA 898318380000        <2> 	mov [ebx + .TDT], eax
 10718 000089F0 898304380000        <2> 	mov [ebx + .TDBAH], eax
 10719 000089F6 66B88000            <2> 	mov ax, 128
 10720 000089FA 898308380000        <2> 	mov [ebx + .TDLEN], eax
 10721 00008A00 B80A010401          <2> 	mov eax, 0x104010A
 10722 00008A05 898300040000        <2> 	mov [ebx + .TCTL], eax	;turn on transmission, set up other registers
 10723 00008A0B B80A285000          <2> 	mov eax, 0x50280A
 10724 00008A10 898310040000        <2> 	mov [ebx + .TIPG], eax	;setup TIPG
 10725                              <2> 	;Setup Receive Registers
 10726 00008A16 BF[3A8B0000]        <2> 	mov edi, .mac
 10727 00008A1B 81C300540000        <2> 	add ebx, .RAL
 10728 00008A21 31D2                <2> 	xor edx, edx
 10729 00008A23 B903000000          <2> 	mov ecx, 3
 10730                              <2> .macloop:
 10731 00008A28 E8BC000000          <2> 	call .eepromread
 10732 00008A2D 668907              <2> 	mov [edi], ax
 10733 00008A30 668903              <2> 	mov [ebx], ax
 10734 00008A33 42                  <2> 	inc edx
 10735 00008A34 81C302000000        <2> 	add ebx, 2
 10736 00008A3A 81C702000000        <2> 	add edi, 2
 10737 00008A40 E2E6                <2> 	loop .macloop
 10738 00008A42 66B80080            <2> 	mov ax, 0x8000
 10739 00008A46 668903              <2> 	mov [ebx], ax	;set address valid bit
 10740                              <2> 
 10741 00008A49 B9[3A8B0000]        <2> 	mov ecx, .mac
 10742 00008A4E E859020000          <2> 	call showmac
 10743 00008A53 BE[408B0000]        <2> 	mov esi, .name
 10744 00008A58 E8C292FFFF          <2> 	call print
 10745 00008A5D BE[488B0000]        <2> 	mov esi, .initmsg
 10746 00008A62 E8B892FFFF          <2> 	call print
 10747 00008A67 C605[398B0000]01    <2> 	mov byte [.nicconfig], 1
 10748 00008A6E 31DB                <2> 	xor ebx, ebx
 10749 00008A70 C3                  <2> 	ret
 10750                              <2> 	
 10751                              <2> .sendpacket:
 10752 00008A71 803D[398B0000]00    <2> 	cmp byte [.nicconfig], 0
 10753 00008A78 7512                <2> 	jne .sendit
 10754 00008A7A 56                  <2> 	push esi
 10755 00008A7B 57                  <2> 	push edi
 10756 00008A7C E8DFFEFFFF          <2> 	call .init
 10757 00008A81 5F                  <2> 	pop edi
 10758 00008A82 5E                  <2> 	pop esi
 10759 00008A83 81FB00000000        <2> 	cmp ebx, 0
 10760 00008A89 7401                <2> 	je .sendit
 10761 00008A8B C3                  <2> 	ret
 10762                              <2> .sendit	;packet start in edi, packet end in esi
 10763 00008A8C 8B0D[3A8B0000]      <2> 	mov ecx, [.mac]
 10764 00008A92 894F06              <2> 	mov [edi + 6], ecx
 10765 00008A95 668B0D[3E8B0000]    <2> 	mov cx, [.mac + 4]
 10766 00008A9C 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10767 00008AA0 8B1D[358B0000]      <2> 	mov ebx, [.basenicaddr]
 10768 00008AA6 29FE                <2> 	sub esi, edi
 10769 00008AA8 A1[3E020000]        <2> 	mov eax, [basecache]
 10770 00008AAD C1E004              <2> 	shl eax, 4
 10771 00008AB0 01F8                <2> 	add eax, edi	;ALWAYS ADD THE VIRTUAL MEMORY OFFSET!
 10772 00008AB2 A3[608B0000]        <2> 	mov [.tdesc], eax	;Low Address
 10773 00008AB7 8935[688B0000]      <2> 	mov [.tdesc + 8], esi	;Length
 10774 00008ABD B8000B0000          <2> 	mov eax, 0xB00
 10775 00008AC2 A3[6A8B0000]        <2> 	mov [.tdesc + 10], eax	;Command
 10776 00008AC7 B810000000          <2> 	mov eax, 16
 10777 00008ACC 898318380000        <2> 	mov [ebx + .TDT], eax	;Trail of TDESC ring buffer
 10778                              <2> .checksta:
 10779 00008AD2 8B0D[6C8B0000]      <2> 	mov ecx, [.tdesc + 12]
 10780 00008AD8 81E101000000        <2> 	and ecx, 1
 10781 00008ADE 81F900000000        <2> 	cmp ecx, 0
 10782 00008AE4 74EC                <2> 	je .checksta
 10783 00008AE6 31DB                <2> 	xor ebx, ebx
 10784 00008AE8 C3                  <2> 	ret
 10785                              <2> 	
 10786                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 10787 00008AE9 8B35[358B0000]      <2> 	mov esi, [.basenicaddr]
 10788 00008AEF 8B4610              <2> 	mov eax, [esi + .EEC]
 10789 00008AF2 0D40000000          <2> 	or eax, 1000000b
 10790 00008AF7 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 10791                              <2> .waiteeprom:
 10792 00008AFA 8B4610              <2> 	mov eax, [esi + .EEC]
 10793 00008AFD 2580000000          <2> 	and eax, 10000000b
 10794 00008B02 3D80000000          <2> 	cmp eax, 10000000b
 10795 00008B07 75F1                <2> 	jne .waiteeprom
 10796 00008B09 8B4614              <2> 	mov eax, [esi + .EERD]
 10797 00008B0C 31C0                <2> 	xor eax, eax
 10798 00008B0E 88D4                <2> 	mov ah, dl 	;eeprom address
 10799 00008B10 0C01                <2> 	or al, 1	;start read
 10800 00008B12 894614              <2> 	mov [esi + .EERD], eax
 10801                              <2> .waiteepromread:
 10802 00008B15 8B4614              <2> 	mov eax, [esi + .EERD]
 10803 00008B18 2510000000          <2> 	and eax, 10000b
 10804 00008B1D 3D10000000          <2> 	cmp eax, 10000b
 10805 00008B22 75F1                <2> 	jne .waiteepromread
 10806 00008B24 8B4614              <2> 	mov eax, [esi + .EERD]
 10807 00008B27 668B4610            <2> 	mov ax, [esi + .EEC]
 10808 00008B2B 24BF                <2> 	and al, 10111111b
 10809 00008B2D 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 10810 00008B31 C1E810              <2> 	shr eax, 16	;AX has the requested word
 10811 00008B34 C3                  <2> 	ret
 10812                              <2> 
 10813 00008B35 00000000            <2> .basenicaddr dd 0
 10814 00008B39 00                  <2> .nicconfig db 0
 10815 00008B3A 000000000000        <2> .mac db 0,0,0,0,0,0
 10816 00008B40 4938323534582000    <2> .name db "I8254X ",0
 10817 00008B48 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10818 00008B51 65640A00            <2>
 10819 00008B55 00<rept>            <2> align 16, db 0
 10820                              <2> .tdesc:
 10821 00008B60 00000000            <2> 	dd 0	;Address Low = 0
 10822 00008B64 00000000            <2> 	dd 0	;Address High = 4
 10823 00008B68 0000                <2> 	dw 0	;Length = 8
 10824 00008B6A 00                  <2> 	db 0	;CSO = 10
 10825 00008B6B 00                  <2> 	db 0	;CMD = 11
 10826 00008B6C 00                  <2> 	db 0	;STA, RSV = 12
 10827 00008B6D 00                  <2> 	db 0	;CSS = 13
 10828 00008B6E 0000                <2> 	dw 0	;Special = 14
 10829 00008B70 00<rept>            <2> times (128-16) db 0
 10830                              <2> .end:
 10831                              <1> %endif
 10832 00008BE0 C3                  <1> 	ret
 10833                              <1> 
 10834                              <1> sendpacket: ;packet start in edi, end in esi
 10835                              <1> 	%ifdef rtl8139.included
 10836 00008BE1 57                  <1> 		push edi
 10837 00008BE2 56                  <1> 		push esi
 10838 00008BE3 E8E2F5FFFF          <1> 		call rtl8139.sendpacket
 10839 00008BE8 5E                  <1> 		pop esi
 10840 00008BE9 5F                  <1> 		pop edi
 10841                              <1> 	%endif
 10842                              <1> 	%ifdef rtl8169.included
 10843 00008BEA 57                  <1> 		push edi
 10844 00008BEB 56                  <1> 		push esi
 10845 00008BEC E804F8FFFF          <1> 		call rtl8169.sendpacket
 10846 00008BF1 5E                  <1> 		pop esi
 10847 00008BF2 5F                  <1> 		pop edi
 10848                              <1> 	%endif
 10849                              <1> 	%ifdef ne2000.included
 10850 00008BF3 57                  <1> 		push edi
 10851 00008BF4 56                  <1> 		push esi
 10852 00008BF5 E832FCFFFF          <1> 		call ne2000.sendpacket
 10853 00008BFA 5E                  <1> 		pop esi
 10854 00008BFB 5F                  <1> 		pop edi
 10855                              <1> 	%endif
 10856                              <1> 	%ifdef i8254x.included
 10857 00008BFC E870FEFFFF          <1> 		call i8254x.sendpacket
 10858                              <1> 	%endif
 10859 00008C01 C3                  <1> 	ret
 10860                              <1> 
 10861                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10862 00008C02 31C0                <1> 	xor eax, eax
 10863 00008C04 31DB                <1> 	xor ebx, ebx
 10864 00008C06 31C9                <1> 	xor ecx, ecx
 10865                              <1> .lp:
 10866 00008C08 8A07                <1> 	mov al, [edi]
 10867 00008C0A 8A6701              <1> 	mov ah, [edi + 1]
 10868 00008C0D 01C3                <1> 	add ebx, eax
 10869 00008C0F 81C702000000        <1> 	add edi, 2
 10870 00008C15 39F7                <1> 	cmp edi, esi
 10871 00008C17 72EF                <1> 	jb .lp
 10872 00008C19 66B9FFFF            <1> 	mov cx, 0xFFFF
 10873 00008C1D 6689D8              <1> 	mov ax, bx
 10874 00008C20 C1EB10              <1> 	shr ebx, 16
 10875 00008C23 6601D8              <1> 	add ax, bx
 10876 00008C26 6629C1              <1> 	sub cx, ax
 10877 00008C29 C3                  <1> 	ret
 10878                              <1> 	
 10879                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10880 00008C2A 31DB                <1> 	xor ebx, ebx
 10881 00008C2C 31C9                <1> 	xor ecx, ecx
 10882 00008C2E 31D2                <1> 	xor edx, edx
 10883                              <1> .mlp:
 10884 00008C30 89F7                <1> 	mov edi, esi
 10885 00008C32 4F                  <1> 	dec edi
 10886                              <1> .lp:
 10887 00008C33 47                  <1> 	inc edi
 10888 00008C34 8A07                <1> 	mov al, [edi]
 10889 00008C36 3C20                <1> 	cmp al, " "
 10890 00008C38 7408                <1> 	je .dnlp
 10891 00008C3A 3C00                <1> 	cmp al, 0
 10892 00008C3C 7404                <1> 	je .dnlp
 10893 00008C3E 3C2E                <1> 	cmp al, "."
 10894 00008C40 75F1                <1> 	jne .lp
 10895                              <1> .dnlp:
 10896 00008C42 30C0                <1> 	xor al, al
 10897 00008C44 8807                <1> 	mov [edi], al
 10898 00008C46 53                  <1> 	push ebx
 10899 00008C47 56                  <1> 	push esi
 10900 00008C48 57                  <1> 	push edi
 10901 00008C49 31FF                <1> 	xor edi, edi
 10902 00008C4B E8FDA3FFFF          <1> 	call cnvrttxt
 10903 00008C50 5E                  <1> 	pop esi
 10904 00008C51 5F                  <1> 	pop edi ;i intentionally switch them
 10905 00008C52 5B                  <1> 	pop ebx
 10906 00008C53 46                  <1> 	inc esi
 10907 00008C54 BF[6C8C0000]        <1> 	mov edi, ipstr
 10908 00008C59 880C1F              <1> 	mov [edi + ebx], cl
 10909 00008C5C 43                  <1> 	inc ebx
 10910 00008C5D 81FB04000000        <1> 	cmp ebx, 4
 10911 00008C63 72CB                <1> 	jb .mlp
 10912 00008C65 8B0D[6C8C0000]      <1> 	mov ecx, [ipstr]
 10913 00008C6B C3                  <1> 	ret
 10914 00008C6C 00000000            <1> ipstr dd 0
 10915                              <1> showip: 	;put the ip address in ecx
 10916 00008C70 89C8                <1> 	mov eax, ecx
 10917 00008C72 30DB                <1> 	xor bl, bl
 10918                              <1> .lp:
 10919 00008C74 3C00                <1> 	cmp al, 0
 10920 00008C76 750B                <1> 	jne .nozeroprint
 10921 00008C78 B030                <1> 	mov al, "0"
 10922 00008C7A 50                  <1> 	push eax
 10923 00008C7B E8E395FFFF          <1> 	call prcharq
 10924 00008C80 58                  <1> 	pop eax
 10925 00008C81 30C0                <1> 	xor al, al
 10926                              <1> .nozeroprint:
 10927 00008C83 31C9                <1> 	xor ecx, ecx
 10928 00008C85 88C1                <1> 	mov cl, al
 10929 00008C87 E8DFA2FFFF          <1> 	call showdec
 10930 00008C8C C1E808              <1> 	shr eax, 8
 10931 00008C8F FEC3                <1> 	inc bl
 10932 00008C91 80FB04              <1> 	cmp bl, 4
 10933 00008C94 7312                <1> 	jae .done
 10934 00008C96 50                  <1> 	push eax
 10935 00008C97 6653                <1> 	push bx
 10936 00008C99 BE[A98C0000]        <1> 	mov esi, .dot
 10937 00008C9E E87C90FFFF          <1> 	call print
 10938 00008CA3 665B                <1> 	pop bx
 10939 00008CA5 58                  <1> 	pop eax
 10940 00008CA6 EBCC                <1> 	jmp .lp
 10941                              <1> .done:
 10942 00008CA8 C3                  <1> 	ret
 10943 00008CA9 082E00              <1> .dot db 8,".",0
 10944                              <1> showmac:	;mac begins in [ecx]
 10945 00008CAC BE[FC8C0000]        <1> 	mov esi, macprint
 10946 00008CB1 89CF                <1> 	mov edi, ecx
 10947 00008CB3 81C106000000        <1> 	add ecx, 6
 10948                              <1> showmacloop:
 10949 00008CB9 8A07                <1> 	mov al, [edi]
 10950 00008CBB 8A27                <1> 	mov ah, [edi]
 10951 00008CBD C0E804              <1> 	shr al, 4
 10952 00008CC0 C0E404              <1> 	shl ah, 4
 10953 00008CC3 C0EC04              <1> 	shr ah, 4
 10954 00008CC6 0430                <1> 	add al, 48
 10955 00008CC8 3C39                <1> 	cmp al, "9"
 10956 00008CCA 7606                <1> 	jbe .goodal
 10957 00008CCC 2C30                <1> 	sub al, 48
 10958 00008CCE 2C0A                <1> 	sub al, 0xA
 10959 00008CD0 0441                <1> 	add al, "A"
 10960                              <1> .goodal:
 10961 00008CD2 80C430              <1> 	add ah, 48
 10962 00008CD5 80FC39              <1> 	cmp ah, "9"
 10963 00008CD8 7609                <1> 	jbe .goodah
 10964 00008CDA 80EC30              <1> 	sub ah, 48
 10965 00008CDD 80EC0A              <1> 	sub ah, 0xA
 10966 00008CE0 80C441              <1> 	add ah, "A"
 10967                              <1> .goodah:
 10968 00008CE3 668906              <1> 	mov [esi], ax
 10969 00008CE6 81C603000000        <1> 	add esi, 3
 10970 00008CEC 47                  <1> 	inc edi
 10971 00008CED 39CF                <1> 	cmp edi, ecx
 10972 00008CEF 72C8                <1> 	jb showmacloop
 10973 00008CF1 BE[FC8C0000]        <1> 	mov esi, macprint
 10974 00008CF6 E82490FFFF          <1> 	call print
 10975 00008CFB C3                  <1> 	ret
 10976                              <1> 	
 10977 00008CFC 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10978 00008D05 30303A30303A303020- <1>
 10979 00008D0E 00                  <1>
 10980 00008D0F 00000000            <1> ethernetend dw 0,0
 10981 00008D13 C0A80002            <1> sysip db 192,168,0,2
 10982 00008D17 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10983                                  %endif
 10984                                      %include "source/data.asm"
 10985 00008D1D 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10986 00008D25 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10987 00008D2D 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10988 00008D36 6E640A00            <1>
 10989 00008D3A 757365726E616D653A- <1> 	userask db "username:",0
 10990 00008D43 00                  <1>
 10991 00008D44 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10992 00008D4D 00                  <1>
 10993 00008D4E 40                  <1> 	computer db "@"
 10994                              <1> %ifdef io.serial
 10995                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10996                              <1> %else
 10997 00008D4F 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10998 00008D58 00                  <1>
 10999                              <1> %endif
 11000 00008D59 5D242000            <1> 	endprompt db "]$ ",0
 11001 00008D5D 0D                  <1> 	crlf 	db  13
 11002 00008D5E 0A00                <1> 	line	db	10,0
 11003                              <1> 	userlst:
 11004 00008D60 726F6F7400          <1> 			db "root",0
 11005 00008D65 617765736F6D65706F- <1> 			db "awesomepower",0
 11006 00008D6E 77657200            <1>
 11007 00008D72 7573657200          <1> 			db "user",0
 11008 00008D77 70617373776F726400  <1> 			db "password",0
 11009 00008D80 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 11010 00008D82 00                  <1> 			db 0
 11011                              <1> 	userlstend:
 11012                              <1> 	
 11013                              <1> %ifdef io.serial
 11014                              <1> %else
 11015 00008D82 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 11016                              <1> fontend:
 11017                              <1> %endif
 11018                              <1> osend:	;this is the end of the operating system's space on disk
 11019                                      %include "build/fileindex.asm"
 11020                              <1> diskfileindex:
 11021 00009D83 617267746573742E65- <1> db "argtest.elf",0
 11022 00009D8C 6C6600              <1>
 11023 00009D8F 50000000            <1> dd (f0-$$)/512
 11024 00009D93 06010000            <1> dd (f1-f0)/512
 11025 00009D97 6261636B67726F756E- <1> db "background.bmp",0
 11026 00009DA0 642E626D7000        <1>
 11027 00009DA6 56010000            <1> dd (f1-$$)/512
 11028 00009DAA 01140000            <1> dd (f2-f1)/512
 11029 00009DAE 626F6F742E736800    <1> db "boot.sh",0
 11030 00009DB6 57150000            <1> dd (f2-$$)/512
 11031 00009DBA 01000000            <1> dd (f3-f2)/512
 11032 00009DBE 63686172746573742E- <1> db "chartest.elf",0
 11033 00009DC7 656C6600            <1>
 11034 00009DCB 58150000            <1> dd (f3-$$)/512
 11035 00009DCF 26010000            <1> dd (f4-f3)/512
 11036 00009DD3 646F73746573742E63- <1> db "dostest.com",0
 11037 00009DDC 6F6D00              <1>
 11038 00009DDF 7E160000            <1> dd (f4-$$)/512
 11039 00009DE3 01000000            <1> dd (f5-f4)/512
 11040 00009DE7 6578656300          <1> db "exec",0
 11041 00009DEC 7F160000            <1> dd (f5-$$)/512
 11042 00009DF0 01000000            <1> dd (f6-f5)/512
 11043 00009DF4 66696E616C636F756E- <1> db "finalcount.sn",0
 11044 00009DFD 742E736E00          <1>
 11045 00009E02 80160000            <1> dd (f6-$$)/512
 11046 00009E06 01000000            <1> dd (f7-f6)/512
 11047 00009E0A 666F726B00          <1> db "fork",0
 11048 00009E0F 81160000            <1> dd (f7-$$)/512
 11049 00009E13 01000000            <1> dd (f8-f7)/512
 11050 00009E17 68656C6C6F776F726C- <1> db "helloworld.elf",0
 11051 00009E20 642E656C6600        <1>
 11052 00009E26 82160000            <1> dd (f8-$$)/512
 11053 00009E2A D6010000            <1> dd (f9-f8)/512
 11054 00009E2E 696E7400            <1> db "int",0
 11055 00009E32 58180000            <1> dd (f9-$$)/512
 11056 00009E36 01000000            <1> dd (f10-f9)/512
 11057 00009E3A 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11058 00009E43 2E736E00            <1>
 11059 00009E47 59180000            <1> dd (f10-$$)/512
 11060 00009E4B 01000000            <1> dd (f11-f10)/512
 11061 00009E4F 6D6172696F2E736E00  <1> db "mario.sn",0
 11062 00009E58 5A180000            <1> dd (f11-$$)/512
 11063 00009E5C 01000000            <1> dd (f12-f11)/512
 11064 00009E60 70692E656C6600      <1> db "pi.elf",0
 11065 00009E67 5B180000            <1> dd (f12-$$)/512
 11066 00009E6B 1F010000            <1> dd (f13-f12)/512
 11067 00009E6F 736F6C6C65726F732E- <1> db "solleros.bmp",0
 11068 00009E78 626D7000            <1>
 11069 00009E7C 7A190000            <1> dd (f13-$$)/512
 11070 00009E80 B0020000            <1> dd (f14-f13)/512
 11071 00009E84 736F6C6C65726F732E- <1> db "solleros.txt",0
 11072 00009E8D 74787400            <1>
 11073 00009E91 2A1C0000            <1> dd (f14-$$)/512
 11074 00009E95 01000000            <1> dd (f15-f14)/512
 11075 00009E99 736F6E676F74696D65- <1> db "songotime.sn",0
 11076 00009EA2 2E736E00            <1>
 11077 00009EA6 2B1C0000            <1> dd (f15-$$)/512
 11078 00009EAA 01000000            <1> dd (f16-f15)/512
 11079 00009EAE 73736500            <1> db "sse",0
 11080 00009EB2 2C1C0000            <1> dd (f16-$$)/512
 11081 00009EB6 02000000            <1> dd (f17-f16)/512
 11082 00009EBA 737464696F74657374- <1> db "stdiotest.elf",0
 11083 00009EC3 2E656C6600          <1>
 11084 00009EC8 2E1C0000            <1> dd (f17-$$)/512
 11085 00009ECC 27010000            <1> dd (f18-f17)/512
 11086 00009ED0 74656C7900          <1> db "tely",0
 11087 00009ED5 551D0000            <1> dd (f18-$$)/512
 11088 00009ED9 01000000            <1> dd (f19-f18)/512
 11089 00009EDD 74696D65746573742E- <1> db "timetest.elf",0
 11090 00009EE6 656C6600            <1>
 11091 00009EEA 561D0000            <1> dd (f19-$$)/512
 11092 00009EEE 04010000            <1> dd (f20-f19)/512
 11093 00009EF2 7475746F7269616C2E- <1> db "tutorial.sh",0
 11094 00009EFB 736800              <1>
 11095 00009EFE 5A1E0000            <1> dd (f20-$$)/512
 11096 00009F02 03000000            <1> dd (f21-f20)/512
 11097 00009F06 756E667300          <1> db "unfs",0
 11098 00009F0B 5D1E0000            <1> dd (f21-$$)/512
 11099 00009F0F 02000000            <1> dd (f22-f21)/512
 11100 00009F13 766963746F72792E77- <1> db "victory.wav",0
 11101 00009F1C 617600              <1>
 11102 00009F1F 5F1E0000            <1> dd (f22-$$)/512
 11103 00009F23 16000000            <1> dd (f23-f22)/512
 11104 00009F27 5F696D672E62696E00  <1> db "_img.bin",0
 11105 00009F30 751E0000            <1> dd (f23-$$)/512
 11106 00009F34 D7020000            <1> dd (f24-f23)/512
 11107                              <1> enddiskfileindex:
 11108                              <1> 
 11109                                      %include "source/bss.asm"
 11110                              <1> align 4, nop
 11111                              <1> bssstart: equ $
 11112                              <1> guion equ bssstart
 11113                              <1> DriveNumber equ guion + 1
 11114                              <1> lbaad equ DriveNumber + 1
 11115                              <1> memlistbuf equ lbaad + 4
 11116                              <1> memlistend equ memlistbuf + 576
 11117                              <1> bsscopy equ memlistend
 11118                              <1> initialstack equ bsscopy
 11119                              <1> stackend equ initialstack + 4000
 11120                              <1> fileindex: equ stackend + 96
 11121                              <1> fileindexend: equ fileindex + 1024
 11122                              <1> previousstack equ fileindexend
 11123                              <1> lastfolderloc equ previousstack + 4
 11124                              <1> currentfolderloc equ lastfolderloc + 4
 11125                              <1> currentfolder equ currentfolderloc + 4
 11126                              <1> currentfolderend equ currentfolder + 512
 11127                              <1> uid equ currentfolderend
 11128                              <1> ranboot equ uid + 4
 11129                              <1> IFON equ ranboot + 1
 11130                              <1> IFTRUE equ IFON + 1
 11131                              <1> BATCHPOS equ IFTRUE + 100
 11132                              <1> BATCHISON equ BATCHPOS + 4
 11133                              <1> LOOPON equ BATCHISON + 1
 11134                              <1> LOOPPOS	equ LOOPON + 1
 11135                              <1> variables: equ LOOPPOS + 4
 11136                              <1> varend: equ variables + 4096
 11137                              <1> buftxt2: equ varend
 11138                              <1> buftxt: equ buftxt2 + 1024
 11139                              <1> buftxtend: equ buftxt + 1024
 11140                              <1> buf2: equ buftxtend
 11141                              <1> numbuf: equ buf2 + 20
 11142                              <1> %ifdef io.serial
 11143                              <1> 	lastcommandpos equ numbuf + 1
 11144                              <1> %else
 11145                              <1> 	%ifdef gui.included
 11146                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11147                              <1> 		graphicstableend equ graphicstable + 200h
 11148                              <1> 		%ifdef gui.background
 11149                              <1> 			backgroundbuffer equ graphicstableend
 11150                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11151                              <1> 			mousecolorbuf equ backgroundbufferend
 11152                              <1> 		%else
 11153                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11154                              <1> 		%endif
 11155                              <1> 		mcolorend equ mousecolorbuf + 256
 11156                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11157                              <1> 		videobufend	equ videobuf + 210*65*2
 11158                              <1> 		videobuf2 equ videobufend
 11159                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 11160                              <1> 	%else
 11161                              <1> 		videobuf equ numbuf + 1
 11162                              <1> 		videobufend equ videobuf + 80*30*2
 11163                              <1> 		videobuf2 equ videobufend
 11164                              <1> 		videobuf2end equ videobuf2 + 80*30*2
 11165                              <1> 	%endif
 11166                              <1> 	lastcommandpos: equ videobuf2end
 11167                              <1> %endif
 11168                              <1> 	commandbufpos: equ lastcommandpos + 4
 11169                              <1> 	commandlistentries: equ commandbufpos + 4
 11170                              <1> 	commandsentered: equ commandlistentries + 4
 11171                              <1> 	commandbuf: equ commandsentered + 4
 11172                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11173                              <1> %ifdef network.included
 11174                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11175                              <1> 	rbuffend equ rbuffstart + 8212
 11176                              <1> %else
 11177                              <1> 	rbuffstart equ commandbufend
 11178                              <1> 	rbuffend equ commandbufend
 11179                              <1> %endif
 11180                              <1> %ifdef threads.included
 11181                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11182                              <1> 	threadlistend: equ threadlist + 1024*4
 11183                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11184                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11185                              <1> 	bssend equ stack1 + 1024*1024
 11186                              <1> %else
 11187                              <1> 	bssend equ rbuffend
 11188                              <1> %endif
 11189                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11190                                      %include "build/files.asm"
 11191 00009F38 00<rept>            <1> align 512,db 0
 11192                              <1> f0:
 11193 00009F38 <incbin>            <1> incbin "included/argtest.elf"
 11194 0002AAF2 00<rept>            <1> align 512,db 0
 11195                              <1> f1:
 11196 0002AAF2 <incbin>            <1> incbin "included/background.bmp"
 11197 002AAC46 00<rept>            <1> align 512,db 0
 11198                              <1> f2:
 11199 002AAC46 <incbin>            <1> incbin "included/boot.sh"
 11200 002AAF05 00<rept>            <1> align 512,db 0
 11201                              <1> f3:
 11202 002AAF05 <incbin>            <1> incbin "included/chartest.elf"
 11203 002CFADB 00<rept>            <1> align 512,db 0
 11204                              <1> f4:
 11205 002CFADB <incbin>            <1> incbin "included/dostest.com"
 11206 002CFD31 00<rept>            <1> align 512,db 0
 11207                              <1> f5:
 11208 002CFD31 <incbin>            <1> incbin "included/exec"
 11209 002CFEE9 00<rept>            <1> align 512,db 0
 11210                              <1> f6:
 11211 002CFEE9 <incbin>            <1> incbin "included/finalcount.sn"
 11212 002D0102 00<rept>            <1> align 512,db 0
 11213                              <1> f7:
 11214 002D0102 <incbin>            <1> incbin "included/fork"
 11215 002D0362 00<rept>            <1> align 512,db 0
 11216                              <1> f8:
 11217 002D0362 <incbin>            <1> incbin "included/helloworld.elf"
 11218 0030AFE3 00<rept>            <1> align 512,db 0
 11219                              <1> f9:
 11220 0030AFE3 <incbin>            <1> incbin "included/int"
 11221 0030B1B5 00<rept>            <1> align 512,db 0
 11222                              <1> f10:
 11223 0030B1B5 <incbin>            <1> incbin "included/lostwoods.sn"
 11224 0030B256 00<rept>            <1> align 512,db 0
 11225                              <1> f11:
 11226 0030B256 <incbin>            <1> incbin "included/mario.sn"
 11227 0030B43A 00<rept>            <1> align 512,db 0
 11228                              <1> f12:
 11229 0030B43A <incbin>            <1> incbin "included/pi.elf"
 11230 0032F331 00<rept>            <1> align 512,db 0
 11231                              <1> f13:
 11232 0032F331 <incbin>            <1> incbin "included/solleros.bmp"
 11233 003853E6 00<rept>            <1> align 512,db 0
 11234                              <1> f14:
 11235 003853E6 <incbin>            <1> incbin "included/solleros.txt"
 11236 00385574 00<rept>            <1> align 512,db 0
 11237                              <1> f15:
 11238 00385574 <incbin>            <1> incbin "included/songotime.sn"
 11239 0038564A 00<rept>            <1> align 512,db 0
 11240                              <1> f16:
 11241 0038564A <incbin>            <1> incbin "included/sse"
 11242 00385AA8 00<rept>            <1> align 512,db 0
 11243                              <1> f17:
 11244 00385AA8 <incbin>            <1> incbin "included/stdiotest.elf"
 11245 003AA843 00<rept>            <1> align 512,db 0
 11246                              <1> f18:
 11247 003AA843 <incbin>            <1> incbin "included/tely"
 11248 003AABC7 00<rept>            <1> align 512,db 0
 11249                              <1> f19:
 11250 003AABC7 <incbin>            <1> incbin "included/timetest.elf"
 11251 003CB23D 00<rept>            <1> align 512,db 0
 11252                              <1> f20:
 11253 003CB23D <incbin>            <1> incbin "included/tutorial.sh"
 11254 003CB952 00<rept>            <1> align 512,db 0
 11255                              <1> f21:
 11256 003CB952 <incbin>            <1> incbin "included/unfs"
 11257                              <1> align 512,db 0
 11258                              <1> f22:
 11259 003CB952 <incbin>            <1> incbin "included/victory.wav"
 11260 003CE948 00<rept>            <1> align 512,db 0
 11261                              <1> f23:
 11262 003CE948 <incbin>            <1> incbin "included/_img.bin"
 11263                              <1> align 512,db 0
 11264                              <1> f24:
