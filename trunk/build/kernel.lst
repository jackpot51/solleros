     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> %define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> %define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 00940300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[3290]          <1> 	mov [initialtsc], eax
   146 00000022 668916[3690]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[3A90]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[3E90]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[2D90]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[2E90]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C E95400              <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003F B81200              <1> 	mov ax, 12h
   164 00000042 31DB                <1> 	xor bx, bx
   165 00000044 CD10                <1> 	int 10h
   166 00000046 C606[2C90]00        <1> 	mov byte [guion], 0
   167 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004E C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004F BF[4290]            <1> 	mov di, memlistbuf
   172 00000052 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000055 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000061 66B918000000        <1> 	mov ecx, 24
   177 00000067 CD15                <1> 	int 0x15
   178 00000069 81C71800            <1> 	add di, 24
   179 0000006D 81FF[8292]          <1> 	cmp di, memlistend
   180 00000071 7305                <1> 	jae nomoregetmemsize
   181 00000073 6685DB              <1> 	test ebx, ebx
   182 00000076 75DD                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000078 81EF[4290]          <1> 	sub di, memlistbuf
   185 0000007C 893E[8292]          <1> 	mov [memlistend], di
   186 00000080 C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 00000081 BB0700              <1>     mov bx,07		; write to display
   190 00000084 B40E                <1>     mov ah,0Eh		; screen function
   191 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000088 84C0                <1>     test al,al		; look for terminator 
   193 0000008A 7406                <1>     jz .done	; zero byte at end of string
   194 0000008C CD10                <1>     int 10h		; write character to screen.    
   195 0000008E 46                  <1> 	inc si	     	; move to next character
   196 0000008F E9F4FF              <1>     jmp .lp		; loop
   197 00000092 C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000093 6631C0              <1> 	xor eax, eax
   203 00000096 6631DB              <1> 	xor ebx, ebx
   204 00000099 6631C9              <1> 	xor ecx, ecx
   205 0000009C 6631D2              <1> 	xor edx, edx
   206 0000009F 6631F6              <1> 	xor esi, esi
   207 000000A2 6631FF              <1> 	xor edi, edi
   208 000000A5 BA9200              <1> 	mov dx, 0x92
   209 000000A8 EC                  <1> 	in al, dx	;A20
   210 000000A9 0C02                <1> 	or al, 2
   211 000000AB EE                  <1> 	out dx, al
   212 000000AC 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AE 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000B2 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B5 A3[A703]            <1> 	mov [gdt2 + 2],ax
   216 000000B8 A3[AF03]            <1> 	mov [gdt3 + 2],ax
   217 000000BB 66C1E810            <1> 	shr eax,16
   218 000000BF A2[A903]            <1> 	mov [gdt2 + 4],al
   219 000000C2 A2[B103]            <1> 	mov [gdt3 + 4],al
   220 000000C5 8826[AC03]          <1> 	mov [gdt2 + 7],ah
   221 000000C9 8826[B403]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CD 66B8[00940300]      <1> 	mov eax, initialstack
   224 000000D3 660306[4F02]        <1> 	add eax, [newcodecache]
   225 000000D8 A3[9F03]            <1> 	mov [gdts + 2],ax
   226 000000DB 66C1E810            <1> 	shr eax, 16
   227 000000DF A2[A103]            <1> 	mov [gdts + 4],al
   228 000000E2 8826[A403]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E6 66A1[4F02]          <1> 	mov eax, [newcodecache]
   231 000000EA A3[B703]            <1> 	mov [gdt4 + 2],ax
   232 000000ED A3[BF03]            <1> 	mov [gdt5 + 2],ax
   233 000000F0 A3[C703]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F3 A3[CF03]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F6 66C1E810            <1> 	shr eax,16
   236 000000FA A2[B903]            <1> 	mov [gdt4 + 4],al
   237 000000FD A2[C103]            <1> 	mov [gdt5 + 4],al
   238 00000100 A2[C903]            <1> 	mov [gdtv8086 + 4],al
   239 00000103 A2[D103]            <1> 	mov [gdtv80862 + 4],al
   240 00000106 8826[BC03]          <1> 	mov [gdt4 + 7],ah
   241 0000010A 8826[C403]          <1> 	mov [gdt5 + 7],ah
   242 0000010E 8826[CC03]          <1> 	mov [gdtv8086 + 7],ah
   243 00000112 8826[D403]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000116 66B800004000        <1> 	mov eax, dosprogloc
   246 0000011C 660306[4F02]        <1> 	add eax, [newcodecache]
   247 00000121 A3[D703]            <1> 	mov [gdtdos + 2],ax
   248 00000124 A3[DF03]            <1> 	mov [gdtdos2 + 2],ax
   249 00000127 66C1E810            <1> 	shr eax,16
   250 0000012B A2[D903]            <1> 	mov [gdtdos + 4],al
   251 0000012E A2[E103]            <1> 	mov [gdtdos2 + 4],al
   252 00000131 8826[DC03]          <1> 	mov [gdtdos + 7],ah
   253 00000135 8826[E403]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000139 67668D83[8D030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 00000141 66A3[8303]          <1> 	mov [gdtr + 2],eax
   258 00000145 67668D83[E5030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014D 66A3[8903]          <1> 	mov [idtr + 2],eax
   260 00000151 FA                  <1> 	cli
   261 00000152 0F0116[8103]        <1> 	lgdt [gdtr]
   262 00000157 0F011E[8703]        <1> 	lidt [idtr]
   263 0000015C 6631DB              <1> 	xor ebx, ebx
   264 0000015F 8CDB                <1> 	mov bx, ds
   265 00000161 66891E[4B02]        <1> 	mov [basecache], ebx
   266 00000166 0F20C0              <1> 	mov eax,cr0
   267 00000169 0C01                <1> 	or al,1
   268 0000016B 0F22C0              <1> 	mov cr0,eax
   269 0000016E EA[7301]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000173 31C0                <1> 	xor eax, eax
   273 00000175 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000179 8ED8                <1> 	mov ds, ax
   275 0000017B 8EC0                <1> 	mov es, ax
   276 0000017D 8EE0                <1> 	mov fs, ax
   277 0000017F 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000183 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000185 648B06              <1> 	mov eax, [fs:esi]
   282 00000188 658906              <1> 	mov [gs:esi], eax
   283 0000018B 81C604000000        <1> 	add esi, 4
   284 00000191 81FE[00940300]      <1> 	cmp esi, bsscopy
   285 00000197 72EC                <1> 	jb copykernel
   286 00000199 EA[A0010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 000001A0 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 000001A4 8ED8                <1> 	mov ds, ax
   291 000001A6 8EC0                <1> 	mov es, ax
   292 000001A8 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001AA 8ED0                <1> 	mov ss, ax
   295 000001AC BC[00B40300]        <1> 	mov esp, stackend
   296 000001B1 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001B5 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B7 E811660000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001BC A1[4F020000]        <1> 	mov eax, [newcodecache]
   302 000001C1 C1E804              <1> 	shr eax, 4
   303 000001C4 A3[4B020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C9 BE[52C82500]        <1> 	mov esi, bssend
   306 000001CE 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001D0 8906                <1> 	mov [esi], eax
   309 000001D2 81EE04000000        <1> 	sub esi, 4
   310 000001D8 81FE[00940300]      <1> 	cmp esi, bsscopy
   311 000001DE 77F0                <1> 	ja clearkernelbuffers
   312 000001E0 FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001E1 BE[42900000]        <1> 	mov esi, memlistbuf
   316 000001E6 31FF                <1> 	xor edi, edi
   317 000001E8 668B3D[82920000]    <1> 	mov di, [memlistend]
   318 000001EF 01F7                <1> 	add edi, esi
   319 000001F1 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001F3 39FE                <1> 	cmp esi, edi
   322 000001F5 7325                <1> 	jae finishedmemspacecalc
   323 000001F7 81C608000000        <1> 	add esi, 8
   324 000001FD 8B0E                <1> 	mov ecx, [esi]
   325 000001FF 81C608000000        <1> 	add esi, 8
   326 00000205 8B1E                <1> 	mov ebx, [esi]
   327 00000207 81C608000000        <1> 	add esi, 8
   328 0000020D 81FB01000000        <1> 	cmp ebx, 1
   329 00000213 75DE                <1> 	jne memoryspaceaddition
   330 00000215 01C8                <1> 	add eax, ecx
   331 00000217 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 0000021C A3[60020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 00000221 803D[2C900000]00    <1> 	cmp byte [guion], 0
   336 00000228 741C                <1> 	je normalstartup
   337 0000022A 8B1D[4B020000]      <1> 	mov ebx, [basecache]
   338 00000230 C1E304              <1> 	shl ebx, 4
   339 00000233 8B3D[755B0000]      <1> 	mov edi, [physbaseptr]
   340 00000239 29DF                <1> 	sub edi, ebx
   341 0000023B 893D[755B0000]      <1> 	mov [physbaseptr], edi
   342 00000241 E99B6B0000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 00000246 E92A290000          <1> 	jmp os
   346                              <1> 	
   347 0000024B 00000000            <1> basecache dd 0
   348 0000024F 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 00000253 00                  <1> testingcpuspeed db 0
   351 00000254 00000000            <1> cpuspeedperint dd 0
   352 00000258 0000000000000000    <1> cpuclocksperint dd 0,0
   353 00000260 00000000            <1> memoryspace dd 0
   354 00000264 7D0A                <1> pitdiv dw 2685
   355 00000266 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 0000026A 00                  <1> ticks db 0
   364 0000026B 00000000            <1> timeseconds dd 0
   365 0000026F 00000000            <1> timenanoseconds dd 0
   366 00000273 00                  <1> soundon db 0
   367 00000274 0000                <1> soundrepititions dw 0
   368 00000276 00000000            <1> soundpos dd 0
   369 0000027A 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 0000027E C605[53020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000285 A3[54020000]        <1> 	mov [cpuspeedperint], eax
   374 0000028A B8[D7540000]        <1> 	mov eax, cpuspeedloopend
   375 0000028F 890424              <1> 	mov [esp], eax
   376 00000292 E9DA000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000297 803D[53020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 0000029E 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 000002A0 E8A6000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 000002A5 803D[73020000]01    <1> 	cmp byte [soundon], 1
   385 000002AC 0F84A75C0000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 000002B2 803D[DC6D0000]01    <1> 	cmp byte [threadson], 1
   389 000002B9 0F84BF6A0000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002BF 803D[DC6D0000]00    <1> 	cmp byte [threadson], 0
   393 000002C6 0F84A5000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397 000002CC FE05[6A020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   398 000002D2 0F8599000000        <1> 	jnz near handled
   399                              <1> 	
   400 000002D8 60                  <1> 	pusha
   401 000002D9 E464                <1> 	in al, 64h
   402 000002DB A820                <1> 	test al, 20h
   403 000002DD 0F858D000000        <1> 	jnz near handled2
   404 000002E3 E460                <1> 	in al, 60h
   405 000002E5 3C01                <1> 	cmp al, 1		;escape
   406 000002E7 7405                <1> 	je userint
   407 000002E9 E982000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002EE 31C0                <1> 	xor eax, eax
   430 000002F0 3905[04B40300]      <1> 	cmp [sigtable], eax
   431 000002F6 7410                <1> 	je .nosighook
   432 000002F8 8B1D[04B40300]      <1> 	mov ebx, [sigtable]
   433 000002FE 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 00000302 B020                <1> 	mov al, 0x20
   436 00000304 E620                <1> 	out 0x20, al
   437 00000306 61                  <1> 	popa
   438 00000307 CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 00000308 E621                <1> 	out 0x21, al
   442 0000030A E6A1                <1> 	out 0xA1, al
   443 0000030C B020                <1> 	mov al, 0x20
   444 0000030E E6A0                <1> 	out 0xA0, al
   445 00000310 E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 00000312 66A1[64020000]      <1> 	mov ax, [pitdiv]
   448 00000318 E640                <1> 	out 0x40, al
   449 0000031A 66C1C008            <1> 	rol ax, 8
   450 0000031E E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 00000320 B020                <1> 	mov al, 0x20
   453 00000322 E620                <1> 	out 0x20, al
   454 00000324 61                  <1> 	popa
   455 00000325 5D                  <1> 	pop ebp
   456 00000326 5D                  <1> 	pop ebp
   457 00000327 9D                  <1> 	popf
   458 00000328 BC[00B40300]        <1> 	mov esp, stackend ;reset stack
   459 0000032D E9A3290000          <1> 	jmp returnfromexp
   460                              <1> %endif
   461 00000332 0A                  <1> rtcrate db 10
   462                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   463                              <1> %ifdef io.serial
   464                              <1> %else
   465                              <1> %ifdef terminal.vsync
   466                              <1> 	cmp byte [termcopyneeded], 0
   467                              <1> 	je .nocopy
   468                              <1> 	call newtermcopy
   469                              <1> .nocopy
   470                              <1> 	push eax
   471                              <1> 	mov al, 0xC
   472                              <1> 	out 0x70, al
   473                              <1> 	in al, 0x71
   474                              <1> 	pop eax
   475                              <1> %endif
   476                              <1> %endif
   477 00000333 E940000000          <1> 	jmp handledboth
   478                              <1> %ifdef rtl8139.included
   479                              <1> rtl8139.irq:
   480                              <1> 	push edx
   481                              <1> 	push eax
   482                              <1> 	mov edx, [rtl8139.basenicaddr]
   483                              <1> 	add edx, rtl8139.ISR
   484                              <1> 	xor eax, eax
   485                              <1> 	in ax, dx
   486                              <1> 	out dx, ax
   487                              <1> 	pop eax
   488                              <1> 	pop edx
   489                              <1> 	jmp handledboth
   490                              <1> %endif
   491                              <1> %ifdef sound.included
   492                              <1> sblaster.irq:
   493 00000338 60                  <1> 	pusha
   494 00000339 803D[49620000]01    <1> 	cmp byte [SoundBlaster], 1
   495 00000340 0F84FD5C0000        <1> 	je near sblaster.cont
   496 00000346 E925000000          <1> 	jmp handled2
   497                              <1> %endif
   498                              <1> 	
   499                              <1> timekeeper:
   500 0000034B 50                  <1> 	push eax
   501 0000034C A1[6F020000]        <1> 	mov eax, [timenanoseconds]
   502 00000351 0305[66020000]      <1> 	add eax, [timeinterval]
   503 00000357 3D00CA9A3B          <1> 	cmp eax, 1000000000
   504 0000035C 720B                <1> 	jb nonanosecondrollover
   505 0000035E FF05[6B020000]      <1> 	inc dword [timeseconds]
   506 00000364 2D00CA9A3B          <1> 	sub eax, 1000000000
   507                              <1> 	%ifdef gui.time
   508                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   509                              <1> 		cmp byte [guion], 1
   510                              <1> 		jne nonanosecondrollover
   511                              <1> 		cmp dword [dragging], 0
   512                              <1> 		jne nonanosecondrollover
   513                              <1> 		pusha
   514                              <1> 		call guitime
   515                              <1> 		popa
   516                              <1> 	%endif
   517                              <1> nonanosecondrollover:
   518 00000369 A3[6F020000]        <1> 	mov [timenanoseconds], eax
   519 0000036E 58                  <1> 	pop eax
   520 0000036F C3                  <1> 	ret
   521                              <1> 	
   522                              <1> handled2:
   523 00000370 61                  <1> 	popa
   524                              <1> handled:
   525 00000371 50                  <1> 	push eax
   526 00000372 B020                <1> 	mov al, 0x20
   527 00000374 E620                <1> 	out 0x20, al
   528 00000376 58                  <1> 	pop eax
   529 00000377 CF                  <1> 	iret
   530                              <1> handledboth:
   531 00000378 50                  <1> 	push eax
   532 00000379 B020                <1> 	mov al, 0x20
   533 0000037B E6A0                <1> 	out 0xA0, al
   534 0000037D E620                <1> 	out 0x20, al
   535 0000037F 58                  <1> 	pop eax
   536 00000380 CF                  <1> 	iret
   537                              <1> 	
   538                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   539 00000381 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   540 00000383 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   541                              <1> 
   542 00000387 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   543 00000389 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   544                              <1> 
   545                              <1> 
   546 0000038D 0000                <1> gdt:	dw 0			; limit 15:0
   547 0000038F 0000                <1> 	dw 0			; base 15:0
   548 00000391 00                  <1> 	db 0			; base 23:16
   549 00000392 00                  <1> 	db 0			; type
   550 00000393 00                  <1> 	db 0			; limit 19:16, flags
   551 00000394 00                  <1> 	db 0			; base 31:24
   552                              <1> ; linear data segment descriptor
   553                              <1> LINEAR_SEL	equ	$-gdt
   554 00000395 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   555 00000397 0000                <1> 	dw 0			; base for this one is always 0
   556 00000399 00                  <1> 	db 0
   557 0000039A 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   558 0000039B CF                  <1> 	db 0xCF			; page-granular, 32-bit
   559 0000039C 00                  <1> 	db 0
   560                              <1> STACK_SEL	equ $-gdt
   561 0000039D 0200                <1> gdts:	dw 2;(stackend)/4096
   562 0000039F 0000                <1> 	dw 0
   563 000003A1 00                  <1> 	db 0
   564 000003A2 92                  <1> 	db 0x92
   565 000003A3 CF                  <1> 	db 0xCF
   566 000003A4 00                  <1> 	db 0
   567                              <1> ; code segment descriptor
   568                              <1> SYS_CODE_SEL	equ	$-gdt
   569 000003A5 FFFF                <1> gdt2:	dw 0xFFFF
   570 000003A7 0000                <1> 	dw 0			; (base gets set above)
   571 000003A9 00                  <1> 	db 0
   572 000003AA 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   573 000003AB CF                  <1> 	db 0xCF
   574 000003AC 00                  <1> 	db 0
   575                              <1> ; data segment descriptor
   576                              <1> SYS_DATA_SEL	equ	$-gdt
   577 000003AD FFFF                <1> gdt3:	dw 0xFFFF
   578 000003AF 0000                <1> 	dw 0			; (base gets set above)
   579 000003B1 00                  <1> 	db 0
   580 000003B2 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   581 000003B3 CF                  <1> 	db 0xCF
   582 000003B4 00                  <1> 	db 0
   583                              <1> NEW_CODE_SEL	equ	$-gdt
   584 000003B5 FFFF                <1> gdt4:	dw 0xFFFF
   585 000003B7 0000                <1> 	dw 0			; (base gets set above)
   586 000003B9 00                  <1> 	db 0
   587 000003BA 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   588 000003BB CF                  <1> 	db 0xCF
   589 000003BC 00                  <1> 	db 0
   590                              <1> ; data segment descriptor
   591                              <1> NEW_DATA_SEL	equ	$-gdt
   592 000003BD FFFF                <1> gdt5:	dw 0xFFFF
   593 000003BF 0000                <1> 	dw 0			; (base gets set above)
   594 000003C1 00                  <1> 	db 0
   595 000003C2 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   596 000003C3 CF                  <1> 	db 0xCF
   597 000003C4 00                  <1> 	db 0
   598                              <1> V8086_CODE_SEL	equ $-gdt
   599 000003C5 FFFF                <1> gdtv8086: dw 0xFFFF
   600 000003C7 0000                <1> 	dw 0
   601 000003C9 00                  <1> 	db 0
   602 000003CA 9A                  <1> 	db 0x9A
   603 000003CB 8F                  <1> 	db 0x8F
   604 000003CC 00                  <1> 	db 0
   605                              <1> V8086_DATA_SEL	equ $-gdt
   606 000003CD FFFF                <1> gdtv80862: dw 0xFFFF
   607 000003CF 0000                <1> 	dw 0
   608 000003D1 00                  <1> 	db 0
   609 000003D2 92                  <1> 	db 0x92
   610 000003D3 8F                  <1> 	db 0x8F
   611 000003D4 00                  <1> 	db 0
   612                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   613 000003D5 0001                <1> gdtdos:	dw 256	;give it 1 MB
   614 000003D7 0000                <1> 	dw 0
   615 000003D9 00                  <1> 	db 0
   616 000003DA 9A                  <1> 	db 0x9A
   617 000003DB 8F                  <1> 	db 0x8F ;16 bit
   618 000003DC 00                  <1> 	db 0
   619                              <1> DOS_DATA_SEL 	equ $-gdt
   620 000003DD 0001                <1> gdtdos2:	dw 256
   621 000003DF 0000                <1> 	dw 0
   622 000003E1 00                  <1> 	db 0
   623 000003E2 92                  <1> 	db 0x92
   624 000003E3 8F                  <1> 	db 0x8F ;16 bit
   625 000003E4 00                  <1> 	db 0
   626                              <1> gdt_end:
   627                              <1> 
   628                              <1> ;	interrupt descriptor table (IDT)
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003E5 [FD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003ED [090D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003F5 [150D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003FD [210D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 00000405 [2D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 0000040D [390D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 00000415 [450D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 0000041D [510D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 00000425 [5D0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 0000042D [690D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 00000435 [750D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 0000043D [810D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 00000445 [8D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 0000044D [990D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 00000455 [A50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 0000045D [B10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 00000465 [BD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 0000046D [C90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 00000475 [D50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 0000047D [E10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 00000485 [ED0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 0000048D [F90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 00000495 [050E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 0000049D [110E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 000004A5 [1D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 000004AD [290E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 000004B5 [350E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 000004BD [410E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 000004C5 [4D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004CD [590E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004D5 [650E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004DD [710E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004E5 [2B2A]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   705 000004ED [2F2A]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004F5 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004FD [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 00000505 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 0000050D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 00000515 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 0000051D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 00000525 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 0000052D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 00000535 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 0000053D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 00000545 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 0000054D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 00000555 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 0000055D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 00000565 [FF1B]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 0000056D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 00000575 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 0000057D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 00000585 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 0000058D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 00000595 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 0000059D [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 000005A5 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 000005AD [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 000005B5 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 000005BD [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005C5 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005CD [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005D5 [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005DD [7103]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005E5 [9702]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005ED [7103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005F5 [7103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005FD [7103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 00000605 [7103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784 0000060D [3803]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 00000615 [7103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 0000061D [7103]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 00000625 [3303]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 0000062D [7803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 00000635 [7803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 0000063D [7803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 00000645 [7803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 0000064D [7803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 00000655 [7803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 0000065D [7803]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 00000665 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 0000066D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 00000675 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 0000067D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 00000685 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 0000068D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 00000695 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 0000069D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 000006A5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 000006AD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 000006B5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 000006BD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 000006C5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006CD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006D5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006DD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006E5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006ED [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006F5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006FD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 00000705 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 0000070D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 00000715 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 0000071D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000725 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 0000072D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 00000735 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 0000073D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 00000745 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 0000074D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 00000755 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 0000075D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 00000765 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 0000076D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 00000775 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 0000077D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 00000785 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 0000078D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000795 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 0000079D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000007A5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 000007AD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 000007B5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 000007BD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 000007C5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007CD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007D5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007DD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007E5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007ED [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007F5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007FD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 00000805 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 0000080D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 00000815 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 0000081D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000825 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 0000082D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 00000835 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 0000083D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 00000845 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 0000084D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 00000855 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 0000085D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 00000865 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 0000086D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 00000875 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 0000087D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 00000885 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 0000088D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000895 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 0000089D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000008A5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 000008AD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 000008B5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 000008BD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 000008C5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008CD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008D5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008DD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008E5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008ED [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008F5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008FD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000905 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 0000090D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000915 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 0000091D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000925 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 0000092D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000935 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 0000093D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000945 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 0000094D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000955 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 0000095D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000965 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 0000096D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000975 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 0000097D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000985 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 0000098D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000995 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 0000099D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 000009A5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 000009AD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 000009B5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 000009BD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 000009C5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009CD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009D5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009DD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009E5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009ED [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009F5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009FD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000A05 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000A0D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000A15 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000A1D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000A25 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A2D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A35 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A3D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A45 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A4D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A55 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A5D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A65 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A6D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A75 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A7D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A85 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A8D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A95 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A9D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000AA5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000AAD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000AB5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000ABD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000AC5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000ACD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AD5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000ADD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000AE5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AED [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AF5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AFD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000B05 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000B0D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000B15 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000B1D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000B25 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B2D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B35 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B3D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B45 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B4D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B55 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B5D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B65 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B6D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B75 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B7D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B85 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B8D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B95 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B9D [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000BA5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000BAD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000BB5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000BBD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000BC5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BCD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BD5 [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BDD [7103]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                                  	%include "source/realmode.asm"
  1339                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1340                              <1> 
  1341 00000BE5 FA                  <1> 	cli
  1342 00000BE6 A3[F30C0000]        <1> 	mov [realmodeeax], eax
  1343 00000BEB 891D[EF0C0000]      <1> 	mov [realmodeebx], ebx
  1344 00000BF1 8925[E10C0000]      <1> 	mov [pmodeesp], esp
  1345                              <1> 
  1346 00000BF7 BB[EB0C0000]        <1> 	mov ebx, cr0old
  1347                              <1> rmcopytofirstmbyte:
  1348 00000BFC 8B03                <1> 	mov eax, [ebx]
  1349 00000BFE 658903              <1> 	mov [gs:ebx], eax
  1350 00000C01 81C304000000        <1> 	add ebx, 4
  1351 00000C07 81FB[F70C0000]      <1> 	cmp ebx, realmodeptr
  1352 00000C0D 76ED                <1> 	jbe rmcopytofirstmbyte
  1353                              <1> 
  1354 00000C0F EA[160C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1355                              <1> 
  1356                              <1> [BITS 16]
  1357                              <1> protected16bit:
  1358 00000C16 B84000              <1> 	mov ax, V8086_DATA_SEL
  1359 00000C19 8ED8                <1> 	mov ds, ax
  1360 00000C1B 8EC0                <1> 	mov es, ax
  1361 00000C1D 8EE0                <1> 	mov fs, ax
  1362 00000C1F 8EE8                <1> 	mov gs, ax
  1363 00000C21 8ED0                <1> 	mov ss, ax
  1364 00000C23 66BC[00B40300]      <1> 	mov esp, stackend
  1365 00000C29 0F20C0              <1> 	mov eax, cr0
  1366 00000C2C 66A3[EB0C]          <1> 	mov [cr0old], eax
  1367 00000C30 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1368 00000C36 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1369 00000C39 EA[3E0C]0010        <1> 	jmp 0x1000:inrealmode
  1370                              <1> 
  1371                              <1> inrealmode:
  1372 00000C3E 8CC8                <1> 	mov ax, cs
  1373 00000C40 8ED8                <1> 	mov ds, ax
  1374 00000C42 8EC0                <1> 	mov es, ax
  1375 00000C44 8EE0                <1> 	mov fs, ax
  1376 00000C46 8EE8                <1> 	mov gs, ax
  1377 00000C48 8ED0                <1> 	mov ss, ax
  1378 00000C4A BC[00B4]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1379                              <1> 	
  1380 00000C4D B011                <1> 	mov al, 0x11
  1381 00000C4F E620                <1> 	out 0x20, al
  1382 00000C51 E6A0                <1> 	out 0xA0, al
  1383 00000C53 B008                <1> 	mov al, 0x8		;interrupt for master
  1384 00000C55 E621                <1> 	out 0x21, al
  1385 00000C57 B070                <1> 	mov al, 0x70	;interrupt for slave
  1386 00000C59 E6A1                <1> 	out 0xA1, al
  1387 00000C5B B004                <1> 	mov al, 4
  1388 00000C5D E621                <1> 	out 0x21, al
  1389 00000C5F B002                <1> 	mov al, 2
  1390 00000C61 E6A1                <1> 	out 0xA1, al
  1391 00000C63 B001                <1> 	mov al, 0x1
  1392 00000C65 E621                <1> 	out 0x21, al
  1393 00000C67 B001                <1> 	mov al, 0x1
  1394 00000C69 E6A1                <1> 	out 0xA1, al
  1395                              <1> 	
  1396 00000C6B 0F011E[E50C]        <1> 	lidt [idt_real]
  1397 00000C70 FB                  <1> 	sti
  1398                              <1> 
  1399 00000C71 66A1[F30C]          <1> 	mov eax, [realmodeeax]
  1400 00000C75 668B1E[EF0C]        <1> 	mov ebx, [realmodeebx]
  1401                              <1> 
  1402 00000C7A FF16[F70C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1403                              <1> 
  1404 00000C7E 66A3[F30C]          <1> 	mov [realmodeeax], eax
  1405 00000C82 66891E[EF0C]        <1> 	mov [realmodeebx], ebx
  1406                              <1> 
  1407 00000C87 FA                  <1> 	cli
  1408 00000C88 0F0116[8103]        <1> 	lgdt [gdtr]
  1409 00000C8D 0F011E[8703]        <1> 	lidt [idtr]
  1410 00000C92 0F20C0              <1> 	mov eax, cr0
  1411 00000C95 0C01                <1> 	or al, 1
  1412 00000C97 0F22C0              <1> 	mov cr0,eax
  1413 00000C9A EA[9F0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1414                              <1> 
  1415                              <1> [BITS 32]
  1416                              <1> returntopmode:
  1417 00000C9F 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1418 00000CA3 8ED8                <1> 	mov ds, ax
  1419 00000CA5 8EC0                <1> 	mov es, ax
  1420 00000CA7 8EE0                <1> 	mov fs, ax
  1421 00000CA9 8ED0                <1> 	mov ss, ax
  1422 00000CAB 8B25[E10C0000]      <1> 	mov esp, [pmodeesp]
  1423 00000CB1 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1424 00000CB5 8EE8                <1> 	mov gs, ax
  1425                              <1> 
  1426 00000CB7 BB[EB0C0000]        <1> 	mov ebx, cr0old
  1427                              <1> rmcopyfromfirstmbyte:
  1428 00000CBC 658B03              <1> 	mov eax, [gs:ebx]
  1429 00000CBF 8903                <1> 	mov [ebx], eax
  1430 00000CC1 81C304000000        <1> 	add ebx, 4
  1431 00000CC7 81FB[F70C0000]      <1> 	cmp ebx, realmodeptr
  1432 00000CCD 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1433                              <1> 
  1434 00000CCF E8375B0000          <1> 	call initialize.pic ;reset irq's and masks
  1435 00000CD4 FB                  <1> 	sti
  1436 00000CD5 A1[F30C0000]        <1> 	mov eax, [realmodeeax]
  1437 00000CDA 8B1D[EF0C0000]      <1> 	mov ebx, [realmodeebx]
  1438 00000CE0 C3                  <1> 	ret
  1439                              <1> 	
  1440 00000CE1 00000000            <1> pmodeesp dd 0
  1441                              <1> idt_real:
  1442 00000CE5 FF03                <1> 	dw 0x3FF
  1443 00000CE7 00000000            <1> 	dd 0
  1444 00000CEB 00000000            <1> cr0old dd 0
  1445 00000CEF 00000000            <1> realmodeebx dd 0
  1446 00000CF3 00000000            <1> realmodeeax dd 0
  1447 00000CF7 0000                <1> realmodeptr dw 0
  1448 00000CF9 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1449                                  [BITS 32]
  1450                                      %include "source/exception.asm"
  1451                              <1> %ifdef exceptions.included
  1452                              <1> unhand:	
  1453                              <1> 	%assign i 0
  1454                              <1> 	%rep 32
  1455                              <1> 	mov byte [intprob], i
  1456                              <1> 	jmp unhand2
  1457                              <1> 	%assign i i+1
  1458                              <1> 	%endrep
  1459 00000CFD C605[B8110000]00    <2>  mov byte [intprob], i
  1460 00000D04 E974010000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000D09 C605[B8110000]01    <2>  mov byte [intprob], i
  1463 00000D10 E968010000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000D15 C605[B8110000]02    <2>  mov byte [intprob], i
  1466 00000D1C E95C010000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000D21 C605[B8110000]03    <2>  mov byte [intprob], i
  1469 00000D28 E950010000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000D2D C605[B8110000]04    <2>  mov byte [intprob], i
  1472 00000D34 E944010000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000D39 C605[B8110000]05    <2>  mov byte [intprob], i
  1475 00000D40 E938010000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000D45 C605[B8110000]06    <2>  mov byte [intprob], i
  1478 00000D4C E92C010000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000D51 C605[B8110000]07    <2>  mov byte [intprob], i
  1481 00000D58 E920010000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000D5D C605[B8110000]08    <2>  mov byte [intprob], i
  1484 00000D64 E914010000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000D69 C605[B8110000]09    <2>  mov byte [intprob], i
  1487 00000D70 E908010000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000D75 C605[B8110000]0A    <2>  mov byte [intprob], i
  1490 00000D7C E9FC000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000D81 C605[B8110000]0B    <2>  mov byte [intprob], i
  1493 00000D88 E9F0000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000D8D C605[B8110000]0C    <2>  mov byte [intprob], i
  1496 00000D94 E9E4000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000D99 C605[B8110000]0D    <2>  mov byte [intprob], i
  1499 00000DA0 E9D8000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00000DA5 C605[B8110000]0E    <2>  mov byte [intprob], i
  1502 00000DAC E9CC000000          <2>  jmp unhand2
  1503                              <2>  %assign i i+1
  1504 00000DB1 C605[B8110000]0F    <2>  mov byte [intprob], i
  1505 00000DB8 E9C0000000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000DBD C605[B8110000]10    <2>  mov byte [intprob], i
  1508 00000DC4 E9B4000000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000DC9 C605[B8110000]11    <2>  mov byte [intprob], i
  1511 00000DD0 E9A8000000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00000DD5 C605[B8110000]12    <2>  mov byte [intprob], i
  1514 00000DDC E99C000000          <2>  jmp unhand2
  1515                              <2>  %assign i i+1
  1516 00000DE1 C605[B8110000]13    <2>  mov byte [intprob], i
  1517 00000DE8 E990000000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000DED C605[B8110000]14    <2>  mov byte [intprob], i
  1520 00000DF4 E984000000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000DF9 C605[B8110000]15    <2>  mov byte [intprob], i
  1523 00000E00 E978000000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000E05 C605[B8110000]16    <2>  mov byte [intprob], i
  1526 00000E0C E96C000000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000E11 C605[B8110000]17    <2>  mov byte [intprob], i
  1529 00000E18 E960000000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000E1D C605[B8110000]18    <2>  mov byte [intprob], i
  1532 00000E24 E954000000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000E29 C605[B8110000]19    <2>  mov byte [intprob], i
  1535 00000E30 E948000000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000E35 C605[B8110000]1A    <2>  mov byte [intprob], i
  1538 00000E3C E93C000000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000E41 C605[B8110000]1B    <2>  mov byte [intprob], i
  1541 00000E48 E930000000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000E4D C605[B8110000]1C    <2>  mov byte [intprob], i
  1544 00000E54 E924000000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000E59 C605[B8110000]1D    <2>  mov byte [intprob], i
  1547 00000E60 E918000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000E65 C605[B8110000]1E    <2>  mov byte [intprob], i
  1550 00000E6C E90C000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000E71 C605[B8110000]1F    <2>  mov byte [intprob], i
  1553 00000E78 E900000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555                              <1> unhand2:
  1556 00000E7D FA                  <1> 	cli
  1557 00000E7E 1E                  <1> 	push ds
  1558 00000E7F 06                  <1> 	push es
  1559 00000E80 0FA0                <1> 	push fs
  1560 00000E82 0FA8                <1> 	push gs
  1561 00000E84 16                  <1> 	push ss
  1562 00000E85 60                  <1> 	pushad
  1563                              <1> %ifdef gui.included
  1564 00000E86 803D[2C900000]00    <1> 	cmp byte [guion], 0
  1565 00000E8D 0F8432000000        <1> 	je near noguiunhandstuff
  1566 00000E93 66C705[B2110000]08- <1> 	mov word [locunhandy], 8
  1567 00000E9B 00                  <1>
  1568 00000E9C 66C705[B4110000]08- <1> 	mov word [locunhandx], 8
  1569 00000EA4 00                  <1>
  1570 00000EA5 668B1D[C5740000]    <1> 	mov bx, [background]
  1571 00000EAC 66891D[B6110000]    <1> 	mov [backgroundcache], bx
  1572 00000EB3 C605[515C0000]01    <1> 	mov byte [mousedisabled],1
  1573 00000EBA 66BB00F8            <1> 	mov bx, 1111100000000000b
  1574 00000EBE 66891D[C5740000]    <1> 	mov [background], bx
  1575                              <1> noguiunhandstuff:
  1576                              <1> %endif
  1577 00000EC5 89E6                <1> 	mov esi, esp
  1578 00000EC7 8935[A6110000]      <1> 	mov [espfirst], esi
  1579 00000ECD 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1580 00000ED3 8935[A2110000]      <1> 	mov [esploc], esi
  1581 00000ED9 BE[C7110000]        <1> 	mov esi, unhandmsg
  1582 00000EDE 8935[AA110000]      <1> 	mov [esiloc], esi
  1583 00000EE4 31C9                <1> 	xor ecx, ecx
  1584 00000EE6 8A0D[B8110000]      <1> 	mov cl, [intprob]
  1585 00000EEC BB[96150000]        <1> 	mov ebx, errortypes
  1586 00000EF1 C1E102              <1> 	shl ecx, 2
  1587 00000EF4 01CB                <1> 	add ebx, ecx
  1588 00000EF6 81FB[D6150000]      <1> 	cmp ebx, errortypesend
  1589 00000EFC 7205                <1> 	jb gooderrortype
  1590 00000EFE BB[D6150000]        <1> 	mov ebx, errortypesend
  1591                              <1> gooderrortype:
  1592 00000F03 8B33                <1> 	mov esi, [ebx]
  1593                              <1> %ifdef gui.included
  1594 00000F05 803D[2C900000]00    <1> 	cmp byte [guion], 0
  1595 00000F0C 0F842D000000        <1> 	je near errortext
  1596 00000F12 668B0D[B2110000]    <1> 	mov cx, [locunhandy]
  1597 00000F19 668B15[B4110000]    <1> 	mov dx, [locunhandx]
  1598 00000F20 66B80100            <1> 	mov ax, 1
  1599 00000F24 6631DB              <1> 	xor bx, bx
  1600 00000F27 E8006C0000          <1> 	call showstring2
  1601 00000F2C 66890D[B2110000]    <1> 	mov [locunhandy], cx
  1602 00000F33 668915[B4110000]    <1> 	mov [locunhandx], dx
  1603 00000F3A E905000000          <1> 	jmp errortextdone
  1604                              <1> %endif
  1605                              <1> errortext:
  1606 00000F3F E81F0E0000          <1> 	call print		;get the error message and print it
  1607                              <1> errortextdone:
  1608 00000F44 31C9                <1> 	xor ecx, ecx
  1609 00000F46 8A0D[B8110000]      <1> 	mov cl, [intprob]
  1610 00000F4C E8EA010000          <1> 	call expdump
  1611                              <1> dumpstack:
  1612 00000F51 8B35[A2110000]      <1> 	mov esi, [esploc]
  1613 00000F57 39E6                <1> 	cmp esi, esp
  1614 00000F59 7219                <1> 	jb donedump
  1615 00000F5B 368B0E              <1> 	mov ecx, [ss:esi]
  1616 00000F5E 81EE04000000        <1> 	sub esi, 4
  1617 00000F64 8935[A2110000]      <1> 	mov [esploc], esi
  1618 00000F6A E8CC010000          <1> 	call expdump
  1619 00000F6F E9DDFFFFFF          <1> 	jmp dumpstack
  1620                              <1> donedump:
  1621 00000F74 0F20C1              <1> 	mov ecx, cr0
  1622 00000F77 E8BF010000          <1> 	call expdump
  1623 00000F7C 0F20D1              <1> 	mov ecx, cr2
  1624 00000F7F E8B7010000          <1> 	call expdump
  1625 00000F84 0F20D9              <1> 	mov ecx, cr3
  1626 00000F87 E8AF010000          <1> 	call expdump
  1627 00000F8C 0F20E1              <1> 	mov ecx, cr4
  1628 00000F8F E8A7010000          <1> 	call expdump
  1629 00000F94 0F00C9              <1> 	str ecx
  1630 00000F97 E89F010000          <1> 	call expdump
  1631 00000F9C 0F010D[C1110000]    <1> 	sidt [igdtcache]
  1632 00000FA3 8B0D[C3110000]      <1> 	mov ecx, [igdtcache + 2]
  1633 00000FA9 E88D010000          <1> 	call expdump
  1634 00000FAE 0F0105[C1110000]    <1> 	sgdt [igdtcache]
  1635 00000FB5 8B0D[C3110000]      <1> 	mov ecx, [igdtcache + 2]
  1636 00000FBB E87B010000          <1> 	call expdump
  1637 00000FC0 0F00C1              <1> 	sldt ecx
  1638 00000FC3 E873010000          <1> 	call expdump
  1639 00000FC8 8B35[A2110000]      <1> 	mov esi, [esploc]
  1640 00000FCE 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1641 00000FD3 81C710000000        <1> 	add edi, 16
  1642 00000FD9 893D[BD110000]      <1> 	mov [codelocend], edi
  1643 00000FDF 81EF20000000        <1> 	sub edi, 32
  1644                              <1> dumpcodeloop:
  1645 00000FE5 893D[B9110000]      <1> 	mov [codeloc], edi
  1646 00000FEB 8B0F                <1> 	mov ecx, [edi]
  1647 00000FED E849010000          <1> 	call expdump
  1648 00000FF2 8B3D[B9110000]      <1> 	mov edi, [codeloc]
  1649 00000FF8 81C704000000        <1> 	add edi, 4
  1650 00000FFE 3B3D[BD110000]      <1> 	cmp edi, [codelocend]
  1651 00001004 72DF                <1> 	jb dumpcodeloop
  1652 00001006 BE[CC100000]        <1> 	mov esi, backtoosmsg
  1653                              <1> %ifdef gui.included
  1654 0000100B 803D[2C900000]00    <1> 	cmp byte [guion], 0
  1655 00001012 741F                <1> 	je backtomsg
  1656                              <1> guibacktomsg:
  1657 00001014 668B15[B4110000]    <1> 	mov dx, [locunhandx]
  1658 0000101B 668B0D[B2110000]    <1> 	mov cx, [locunhandy]
  1659 00001022 66B80100            <1> 	mov ax, 1
  1660 00001026 6631DB              <1> 	xor bx, bx
  1661 00001029 E8FE6A0000          <1> 	call showstring2
  1662 0000102E E905000000          <1> 	jmp backtomsgdone
  1663                              <1> backtomsg:
  1664                              <1> %endif
  1665 00001033 E82B0D0000          <1> 	call print
  1666                              <1> backtomsgdone:
  1667 00001038 30C0                <1> 	xor al, al
  1668 0000103A E83C130000          <1> 	call rdcharint
  1669 0000103F 803D[B8110000]03    <1> 	cmp byte [intprob], 3
  1670 00001046 7541                <1> 	jne nodebugint
  1671                              <1> %ifdef gui.included
  1672 00001048 803D[2C900000]00    <1> 	cmp byte [guion], 0
  1673 0000104F 7427                <1> 	je nodebuggui
  1674 00001051 668B1D[B6110000]    <1> 	mov bx, [backgroundcache]
  1675 00001058 66891D[C5740000]    <1> 	mov [background], bx
  1676 0000105F 6631DB              <1> 	xor bx, bx
  1677 00001062 C605[515C0000]00    <1> 	mov byte [mousedisabled], 0
  1678 00001069 E80B640000          <1> 	call guiclear
  1679 0000106E E856640000          <1> 	call reloadallgraphics
  1680 00001073 E86E180000          <1> 	call termcopy
  1681                              <1> nodebuggui:
  1682                              <1> %endif
  1683 00001078 8B35[A6110000]      <1> 	mov esi, [espfirst]
  1684 0000107E 89F4                <1> 	mov esp, esi
  1685 00001080 61                  <1> 	popad
  1686 00001081 17                  <1> 	pop ss
  1687 00001082 0FA9                <1> 	pop gs
  1688 00001084 0FA1                <1> 	pop fs
  1689 00001086 07                  <1> 	pop es
  1690 00001087 1F                  <1> 	pop ds
  1691 00001088 CF                  <1> 	iret
  1692                              <1> nodebugint:
  1693 00001089 61                  <1> 	popad
  1694 0000108A 17                  <1> 	pop ss
  1695 0000108B 0FA9                <1> 	pop gs
  1696 0000108D 0FA1                <1> 	pop fs
  1697 0000108F 07                  <1> 	pop es
  1698 00001090 1F                  <1> 	pop ds
  1699 00001091 81C408000000        <1> 	add esp, 8
  1700                              <1> ;	popf ;pop the cs segment selector into eflags
  1701                              <1> ;	popf ;then pop the flags
  1702                              <1> %ifdef gui.included
  1703 00001097 803D[2C900000]00    <1> 	cmp byte [guion], 0
  1704 0000109E 7427                <1> 	je returnunhandgui
  1705 000010A0 668B1D[B6110000]    <1> 	mov bx, [backgroundcache]
  1706 000010A7 66891D[C5740000]    <1> 	mov [background], bx
  1707 000010AE 6631DB              <1> 	xor bx, bx
  1708 000010B1 C605[515C0000]00    <1> 	mov byte [mousedisabled], 0
  1709 000010B8 E8BC630000          <1> 	call guiclear
  1710 000010BD E807640000          <1> 	call reloadallgraphics
  1711 000010C2 E81F180000          <1> 	call termcopy
  1712                              <1> %endif
  1713                              <1> returnunhandgui:
  1714 000010C7 E97B1C0000          <1> 	jmp nwcmd
  1715 000010CC 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1716 000010D5 737420616E79207072- <1>
  1717 000010DE 6F626C656D7320696E- <1>
  1718 000010E7 207468652049737375- <1>
  1719 000010F0 65732073656374696F- <1>
  1720 000010F9 6E20617420736F6C6C- <1>
  1721 00001102 65726F732E676F6F67- <1>
  1722 0000110B 6C65636F64652E636F- <1>
  1723 00001114 6D0A                <1>
  1724 00001116 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1725 0000111F 206B657920746F2072- <1>
  1726 00001128 657475726E20746F20- <1>
  1727 00001131 536F6C6C65724F530A- <1>
  1728 0000113A 00                  <1>
  1729                              <1> expdump:
  1730 0000113B 8B35[AA110000]      <1> 	mov esi, [esiloc]
  1731 00001141 89F7                <1> 	mov edi, esi
  1732 00001143 81C70F000000        <1> 	add edi, 15
  1733 00001149 81C604000000        <1> 	add esi, 4
  1734 0000114F 893D[AA110000]      <1> 	mov [esiloc], edi
  1735 00001155 81EF03000000        <1> 	sub edi, 3
  1736 0000115B E87F200000          <1> 	call converthex
  1737 00001160 81EE04000000        <1> 	sub esi, 4
  1738                              <1> %ifdef gui.included
  1739 00001166 803D[2C900000]00    <1> 	cmp byte [guion], 0
  1740 0000116D 0F8429000000        <1> 	je near expdumptext
  1741 00001173 668B0D[B2110000]    <1> 	mov cx, [locunhandy]
  1742 0000117A 668B15[B4110000]    <1> 	mov dx, [locunhandx]
  1743 00001181 66B80100            <1> 	mov ax, 1
  1744 00001185 6631DB              <1> 	xor bx, bx
  1745 00001188 E89F690000          <1> 	call showstring2
  1746 0000118D 66890D[B2110000]    <1> 	mov [locunhandy], cx
  1747 00001194 668915[B4110000]    <1> 	mov [locunhandx], dx
  1748 0000119B C3                  <1> 	ret
  1749                              <1> %endif
  1750                              <1> expdumptext:
  1751 0000119C E8C20B0000          <1> 	call print
  1752 000011A1 C3                  <1> 	ret
  1753 000011A2 00000000            <1> esploc dd 0
  1754 000011A6 00000000            <1> espfirst dd 0
  1755 000011AA 00000000            <1> esiloc dd 0
  1756 000011AE 00000000            <1> esiregbuf dd 0
  1757 000011B2 0100                <1> locunhandy dw 1
  1758 000011B4 0100                <1> locunhandx dw 1
  1759 000011B6 0000                <1> backgroundcache dw 0
  1760 000011B8 00                  <1> intprob db 0
  1761 000011B9 00000000            <1> codeloc dd 0
  1762 000011BD 00000000            <1> codelocend dd 0
  1763 000011C1 000000000000        <1> igdtcache dw 0,0,0
  1764                              <1> 	unhandmsg:	
  1765 000011C7 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1766 000011D0 303030FF0A00        <1>
  1767                              <1> unhndrg:
  1768 000011D6 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1769 000011DF 303030202000<rept>  <1>
  1770 0000123F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1771 00001248 303030FF0A00        <1>
  1772 0000124E FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1773 00001257 303030202000<rept>  <1>
  1774 000012B7 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1775 000012C0 303030FF0A00        <1>
  1776 000012C6 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1777 000012CF 303030202000<rept>  <1>
  1778 0000132F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1779 00001338 303030FF0A00        <1>
  1780 0000133E FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1781 00001347 303030202000<rept>  <1>
  1782 000013A7 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1783 000013B0 303030FF0A00        <1>
  1784                              <1> unhandregs:
  1785 000013B6 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1786 000013BF 303030202000        <1>
  1787 000013C5 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1788 000013CE 303030202000        <1>
  1789 000013D4 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1790 000013DD 303030FF0A00        <1>
  1791 000013E3 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1792 000013EC 303030202000        <1>
  1793 000013F2 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1794 000013FB 303030202000        <1>
  1795 00001401 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1796 0000140A 303030202000        <1>
  1797 00001410 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1798 00001419 303030202000        <1>
  1799 0000141F 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1800 00001428 303030FF0A00        <1>
  1801 0000142E 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1802 00001437 303030202000        <1>
  1803 0000143D 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1804 00001446 303030202000        <1>
  1805 0000144C 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1806 00001455 303030202000        <1>
  1807 0000145B 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1808 00001464 303030FF0A00        <1>
  1809 0000146A 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1810 00001473 303030202000        <1>
  1811 00001479 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1812 00001482 303030202000        <1>
  1813 00001488 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1814 00001491 303030202000        <1>
  1815 00001497 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1816 000014A0 303030FF0A00        <1>
  1817 000014A6 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1818 000014AF 303030202000        <1>
  1819 000014B5 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1820 000014BE 303030202000        <1>
  1821 000014C4 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1822 000014CD 303030202000        <1>
  1823 000014D3 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1824 000014DC 303030FF0A00        <1>
  1825 000014E2 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1826 000014EB 303030202000        <1>
  1827 000014F1 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1828 000014FA 303030202000        <1>
  1829 00001500 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1830 00001509 303030202000        <1>
  1831 0000150F 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1832 00001518 303030FF0A00        <1>
  1833 0000151E FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1834 00001527 303030202000<rept>  <1>
  1835 0000153C FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1836 00001545 30303020FF00        <1>
  1837 0000154B FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1838 00001554 3030305D2000        <1>
  1839 0000155A FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1840 00001563 303030202000<rept>  <1>
  1841 00001587 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1842 00001590 303030FF0A00        <1>
  1843                              <1> unhandmsgend:
  1844                              <1> 
  1845                              <1> errortypes:
  1846 00001596 [DA150000]          <1> 			dd err0
  1847 0000159A [43160000]          <1> 			dd err1
  1848 0000159E [A4160000]          <1> 			dd err2
  1849 000015A2 [F9160000]          <1> 			dd err3
  1850 000015A6 [5D170000]          <1> 			dd err4
  1851 000015AA [AF170000]          <1> 			dd err5
  1852 000015AE [19180000]          <1> 			dd err6
  1853 000015B2 [81180000]          <1> 			dd err7
  1854 000015B6 [CB180000]          <1> 			dd err8
  1855 000015BA [28190000]          <1> 			dd err9
  1856 000015BE [81190000]          <1> 			dd err10
  1857 000015C2 [CC190000]          <1> 			dd err11
  1858 000015C6 [1C1A0000]          <1> 			dd err12
  1859 000015CA [751A0000]          <1> 			dd err13
  1860 000015CE [D81A0000]          <1> 			dd err14
  1861 000015D2 [141B0000]          <1> 			dd err15
  1862                              <1> errortypesend:
  1863 000015D6 [A01B0000]          <1> 			dd unknownerror
  1864                              <1> 			
  1865 000015DA 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1866 000015E3 6279207A65726F3A0A  <1>
  1867 000015EC 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1868 000015F5 6C79206C696D2061C3- <1>
  1869 000015FE B778203D20E2889E20- <1>
  1870 00001607 7768656E2061206973- <1>
  1871 00001610 20616E79207265616C- <1>
  1872 00001619 206E756D6265722E20- <1>
  1873 00001622 486170707920456173- <1>
  1874 0000162B 746572210A          <1>
  1875 00001630 202020202020202020- <1> 		db "            x→0",10,0
  1876 00001639 20202078E28692300A- <1>
  1877 00001642 00                  <1>
  1878                              <1> 		
  1879 00001643 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1880 0000164C 65702F427265616B70- <1>
  1881 00001655 6F696E743A0A        <1>
  1882 0000165B 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1883 00001664 696E74206661756C74- <1>
  1884 0000166D 2C20627265616B706F- <1>
  1885 00001676 696E7420747261702C- <1>
  1886 0000167F 206F722073696E676C- <1>
  1887 00001688 652D73746570207472- <1>
  1888 00001691 617020776173207472- <1>
  1889 0000169A 696767657265642E0A- <1>
  1890 000016A3 00                  <1>
  1891                              <1> 		
  1892 000016A4 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1893 000016AD 6C6520696E74657272- <1>
  1894 000016B6 7570743A0A          <1>
  1895 000016BB 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1896 000016C4 6520696E7465727275- <1>
  1897 000016CD 707420776173207472- <1>
  1898 000016D6 696767657265642074- <1>
  1899 000016DF 68617420636F756C64- <1>
  1900 000016E8 206E6F74206265206D- <1>
  1901 000016F1 61736B65642E0A00    <1>
  1902                              <1> 		
  1903 000016F9 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1904 00001702 743A0A              <1>
  1905 00001705 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1906 0000170E 727275707420697320- <1>
  1907 00001717 7573656420696E2070- <1>
  1908 00001720 726F6772616D732074- <1>
  1909 00001729 6F2073686F77207468- <1>
  1910 00001732 6520737461636B2061- <1>
  1911 0000173B 6E6420726567697374- <1>
  1912 00001744 65727320616E642063- <1>
  1913 0000174D 616E2062650A        <1>
  1914 00001753 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1915 0000175C 00                  <1>
  1916                              <1> 		
  1917 0000175D 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1918 00001766 0A                  <1>
  1919 00001767 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1920 00001770 73736F722072616E20- <1>
  1921 00001779 696E746F20616E2049- <1>
  1922 00001782 4E544F20696E737472- <1>
  1923 0000178B 756374696F6E207769- <1>
  1924 00001794 746820746865206F76- <1>
  1925 0000179D 6572666C6F7720666C- <1>
  1926 000017A6 6167207365742E0A00  <1>
  1927                              <1> 		
  1928 000017AF 426F756E6473206368- <1> err5	db "Bounds check:",10
  1929 000017B8 65636B3A0A          <1>
  1930 000017BD 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1931 000017C6 73736F72207265626F- <1>
  1932 000017CF 756E6465642066726F- <1>
  1933 000017D8 6D206120424F554E44- <1>
  1934 000017E1 20696E737472756374- <1>
  1935 000017EA 696F6E2072756E206F- <1>
  1936 000017F3 6E20616E206F706572- <1>
  1937 000017FC 616E64207468617420- <1>
  1938 00001805 776173206F75740A    <1>
  1939 0000180D 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1940 00001816 2E0A00              <1>
  1941                              <1> 		
  1942 00001819 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1943 00001822 70636F64653A0A      <1>
  1944 00001829 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1945 00001832 73736F722068617320- <1>
  1946 0000183B 6E6F20696465612077- <1>
  1947 00001844 686174206974207761- <1>
  1948 0000184D 7320747279696E6720- <1>
  1949 00001856 746F20657865637574- <1>
  1950 0000185F 652E20446F6E277420- <1>
  1951 00001868 72756E205353453420- <1>
  1952 00001871 636F64650A          <1>
  1953 00001876 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1954 0000187F 0A00                <1>
  1955                              <1> 		
  1956 00001881 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1957 0000188A 6F72206E6F74206176- <1>
  1958 00001893 61696C61626C653A0A  <1>
  1959 0000189C 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1960 000018A5 206B6E6F7720746865- <1>
  1961 000018AE 7920646F6E2774206D- <1>
  1962 000018B7 616B652074686F7365- <1>
  1963 000018C0 20616E796D6F726521- <1>
  1964 000018C9 0A00                <1>
  1965                              <1> 		
  1966 000018CB 446F75626C65206661- <1> err8	db "Double fault:",10
  1967 000018D4 756C743A0A          <1>
  1968 000018D9 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1969 000018E2 74696F6E2068616E64- <1>
  1970 000018EB 6C657220636F756C64- <1>
  1971 000018F4 206E6F742068616E64- <1>
  1972 000018FD 6C6520746861742069- <1>
  1973 00001906 7420636F756C64206E- <1>
  1974 0000190F 6F742068616E646C65- <1>
  1975 00001918 20616E206578636570- <1>
  1976 00001921 74696F6E2E0A00      <1>
  1977                              <1> 		
  1978 00001928 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1979 00001931 6F72207365676D656E- <1>
  1980 0000193A 74206F76657272756E- <1>
  1981 00001943 3A0A00              <1>
  1982 00001946 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1983 0000194F 722068617070656E73- <1>
  1984 00001958 20696E206D6F646572- <1>
  1985 00001961 6E20636F6D70757465- <1>
  1986 0000196A 72732C20616E64206E- <1>
  1987 00001973 657665722073686F75- <1>
  1988 0000197C 6C642E0A00          <1>
  1989                              <1> 
  1990 00001981 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1991 0000198A 53533A0A            <1>
  1992 0000198E 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1993 00001997 686174207761732073- <1>
  1994 000019A0 776974636865642074- <1>
  1995 000019A9 6F20697320696E7661- <1>
  1996 000019B2 6C69642E204E6F7468- <1>
  1997 000019BB 696E672066756E6E79- <1>
  1998 000019C4 20686572652E0A00    <1>
  1999                              <1> 		
  2000 000019CC 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2001 000019D5 6F742070726573656E- <1>
  2002 000019DE 743A0A              <1>
  2003 000019E1 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2004 000019EA 6E7420626974206F66- <1>
  2005 000019F3 20746865207365676D- <1>
  2006 000019FC 656E74206465736372- <1>
  2007 00001A05 6970746F7220697320- <1>
  2008 00001A0E 73657420746F207A65- <1>
  2009 00001A17 726F2E0A00          <1>
  2010                              <1> 		
  2011 00001A1C 537461636B20657863- <1> err12	db "Stack exception:",10
  2012 00001A25 657074696F6E3A0A    <1>
  2013 00001A2D 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2014 00001A36 7363726970746F7220- <1>
  2015 00001A3F 697320696E76616C69- <1>
  2016 00001A48 64206F72206E6F7420- <1>
  2017 00001A51 70726573656E74206F- <1>
  2018 00001A5A 7220697473206C696D- <1>
  2019 00001A63 697420697320746F6F- <1>
  2020 00001A6C 20736D616C6C2E0A00  <1>
  2021                              <1> 		
  2022 00001A75 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2023 00001A7E 726F74656374696F6E- <1>
  2024 00001A87 2076696F6C6174696F- <1>
  2025 00001A90 6E3A0A              <1>
  2026 00001A93 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2027 00001A9C 746564207468652063- <1>
  2028 00001AA5 6F6D70757465722E20- <1>
  2029 00001AAE 537465702061776179- <1>
  2030 00001AB7 20736C6F776C792E20- <1>
  2031 00001AC0 546865204642492069- <1>
  2032 00001AC9 73206F6E2069747320- <1>
  2033 00001AD2 7761792E0A00        <1>
  2034                              <1> 		
  2035 00001AD8 50616765206661756C- <1> err14	db "Page fault:",10
  2036 00001AE1 743A0A              <1>
  2037 00001AE4 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2038 00001AED 746861742077617320- <1>
  2039 00001AF6 726571756573746564- <1>
  2040 00001AFF 20776173206E6F7420- <1>
  2041 00001B08 617661696C61626C65- <1>
  2042 00001B11 2E0A00              <1>
  2043                              <1> 		
  2044 00001B14 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2045 00001B1D 666F7220506C616E20- <1>
  2046 00001B26 523A0A              <1>
  2047 00001B29 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2048 00001B32 727275707420697320- <1>
  2049 00001B3B 726573657276656420- <1>
  2050 00001B44 666F72207573616765- <1>
  2051 00001B4D 206F6E6C7920627920- <1>
  2052 00001B56 746865206D696C6974- <1>
  2053 00001B5F 617279207768656E20- <1>
  2054 00001B68 6974206973206E6563- <1>
  2055 00001B71 6573736172790A      <1>
  2056 00001B78 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2057 00001B81 746520612066756C6C- <1>
  2058 00001B8A 2D7363616C6520636F- <1>
  2059 00001B93 7570206427C3A97461- <1>
  2060 00001B9C 742E0A00            <1>
  2061                              <1> 		
  2062 00001BA0 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2063 00001BA9 68656C6C206A757374- <1>
  2064 00001BB2 2068617070656E6564- <1>
  2065 00001BBB 3F2049732065766572- <1>
  2066 00001BC4 796F6E65206F6B6179- <1>
  2067 00001BCD 3F2048617264206472- <1>
  2068 00001BD6 6976653F2056696465- <1>
  2069 00001BDF 6F20636172643F0A    <1>
  2070 00001BE7 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2071 00001BF0 726520796F75207468- <1>
  2072 00001BF9 6572653F0A00        <1>
  2073                              <1> %else
  2074                              <1> unhand:	
  2075                              <1> 	%assign i 0
  2076                              <1> 	%rep 32
  2077                              <1> 	mov byte [intprob], i
  2078                              <1> 	jmp unhand2
  2079                              <1> 	%assign i i+1
  2080                              <1> 	%endrep
  2081                              <1> unhand2:
  2082                              <1> 	cmp byte [intprob], 3
  2083                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2084                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2085                              <1> 					;CD is the machine instruction for interrupt
  2086                              <1> 					;DEAD shows that the program died because of the int
  2087                              <1> 	mov bl, [intprob]
  2088                              <1> 	jmp exitprog
  2089                              <1> intprob db 0
  2090                              <1> %endif
  2091                                      %include "source/ints.asm"
  2092                              <1> int30h:	;for great justice
  2093 00001BFF 80FC00              <1> 	cmp ah, 0
  2094 00001C02 0F84A3000000        <1> 	je near exitprog   ;kills app
  2095 00001C08 80FC01              <1> 	cmp ah, 1
  2096 00001C0B 0F8422010000        <1> 	je near prntstr  ;print string
  2097 00001C11 80FC02              <1> 	cmp ah, 2
  2098 00001C14 0F84C5010000        <1> 	je near readstr	;read string
  2099 00001C1A 80FC03              <1> 	cmp ah, 3
  2100 00001C1D 0F84E5010000        <1> 	je near clearscrn	;clear screen
  2101 00001C23 80FC04              <1> 	cmp ah, 4
  2102 00001C26 0F845A020000        <1> 	je near prntreadstr	;read and print string
  2103 00001C2C 80FC05              <1> 	cmp ah, 5
  2104 00001C2F 0F843A070000        <1> 	je near readchar	;get char
  2105 00001C35 80FC06              <1> 	cmp ah, 6
  2106 00001C38 0F84A1070000        <1> 	je near prntchar	;print char
  2107 00001C3E 80FC07              <1> 	cmp ah, 7
  2108 00001C41 0F84CA090000        <1> 	je near openfile	;read file
  2109                              <1> ;	cmp ah, 8
  2110                              <1> ;	je near closefile	;close file
  2111 00001C47 80FC09              <1> 	cmp ah, 9
  2112 00001C4A 0F84CB090000        <1> 	je near num2str	;convert number to string
  2113 00001C50 80FC0A              <1> 	cmp ah, 10
  2114 00001C53 0F84DA090000        <1> 	je near str2num	;convert string to number
  2115                              <1> %ifdef threads.included
  2116 00001C59 80FC0B              <1> 	cmp ah, 11
  2117 00001C5C 0F84DD090000        <1> 	je near forkthread	;create thread
  2118                              <1> %endif
  2119 00001C62 80FC0C              <1> 	cmp ah, 12
  2120 00001C65 0F84AB0A0000        <1> 	je near gettime	;get time
  2121 00001C6B 80FC0D              <1> 	cmp ah, 13
  2122 00001C6E 0F84B70A0000        <1> 	je near settime	;set time
  2123 00001C74 80FC0E              <1> 	cmp ah, 14
  2124 00001C77 0F84BE0A0000        <1> 	je near runcmd	;run program
  2125 00001C7D 80FC0F              <1> 	cmp ah, 15
  2126 00001C80 0F84CA0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2127 00001C86 80FC10              <1> 	cmp ah, 16
  2128 00001C89 0F84EF0A0000        <1> 	je near hooksig	;hook code to a signal
  2129                              <1> %ifdef gui.included
  2130 00001C8F 80FC11              <1> 	cmp ah, 17
  2131 00001C92 0F84F60A0000        <1> 	je near guiint	;GUI operations
  2132                              <1> %endif
  2133                              <1> %ifdef sound.included
  2134 00001C98 80FC12              <1> 	cmp ah, 18
  2135 00001C9B 0F843B0C0000        <1> 	je near soundint	;sound operations
  2136                              <1> %endif
  2137                              <1> %ifdef network.included
  2138 00001CA1 80FC13              <1> 	cmp ah, 19
  2139 00001CA4 0F84370C0000        <1> 	je near netint	;networking operations
  2140                              <1> %endif
  2141 00001CAA CF                  <1> 	iret
  2142                              <1> 
  2143                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2144                              <2> exitprog:
  2145 00001CAB 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2146 00001CAF 8ED8                <2> 	mov ds, ax
  2147 00001CB1 8EC0                <2> 	mov es, ax
  2148 00001CB3 8EE0                <2> 	mov fs, ax
  2149 00001CB5 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2150 00001CB9 8EE8                <2> 	mov gs, ax
  2151 00001CBB C705[DD6D0000]0000- <2> 	mov dword [currentthread], 0
  2152 00001CC3 0000                <2>
  2153 00001CC5 C705[D86D0000]0400- <2> 	mov dword [lastthread], 4
  2154 00001CCD 0000                <2>
  2155 00001CCF C605[DC6D0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2156 00001CD6 8B25[08B80300]      <2> 	mov esp, [previousstack] ;and this
  2157 00001CDC 81FB00000000        <2> 	cmp ebx, 0
  2158 00001CE2 0F8501000000        <2> 	jne near .error
  2159 00001CE8 C3                  <2> 	ret
  2160                              <2> .error:
  2161 00001CE9 89D9                <2> 	mov ecx, ebx
  2162 00001CEB B006                <2> 	mov al, 6
  2163 00001CED A2[40320000]        <2> 	mov [firsthexshown], al
  2164 00001CF2 51                  <2> 	push ecx
  2165 00001CF3 BE[0E1D0000]        <2> 	mov esi, .msg1
  2166 00001CF8 E855000000          <2> 	call printhighlight
  2167 00001CFD 59                  <2> 	pop ecx
  2168 00001CFE E852150000          <2> 	call showhex
  2169 00001D03 BE[231D0000]        <2> 	mov esi, .msg2
  2170 00001D08 E845000000          <2> 	call printhighlight
  2171 00001D0D C3                  <2> 	ret
  2172                              <2> 	
  2173 00001D0E 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2174 00001D17 7461747573206F6620- <2>
  2175 00001D20 307800              <2>
  2176 00001D23 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2177 00001D2C 726E65642E0A00      <2>
  2178                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2179                              <2> prntstr:
  2180 00001D33 30E4                <2> xor ah, ah
  2181 00001D35 E830000000          <2> call printint
  2182 00001D3A E973E5FFFF          <2> jmp timerinterrupt
  2183                              <2> 
  2184                              <2> 	printquiet:
  2185 00001D3F 6631C0              <2> 		xor ax, ax
  2186 00001D42 66A3[DD1D0000]      <2> 		mov [endkeyprint], ax
  2187 00001D48 66BB0700            <2> 		mov bx, 7
  2188 00001D4C E832000000          <2> 		call printint.b
  2189 00001D51 C3                  <2> 		ret
  2190                              <2> 
  2191                              <2> 	printhighlight:
  2192 00001D52 6631C0              <2> 		xor ax, ax
  2193 00001D55 66BBF000            <2> 		mov bx, 0xF0
  2194 00001D59 E90C000000          <2> 		jmp printint
  2195                              <2> 
  2196                              <2> 	printline:
  2197 00001D5E BE[07900000]        <2> 		mov esi, line
  2198                              <2>     print:
  2199 00001D63 6631C0              <2> 		xor ax, ax
  2200 00001D66 66BB0700            <2> 		mov bx, 7
  2201                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2202 00001D6A 56                  <2> 		push esi
  2203 00001D6B 66A3[DD1D0000]      <2> 		mov [endkeyprint], ax
  2204 00001D71 E80D000000          <2> 		call .b
  2205 00001D76 89F1                <2> 		mov ecx, esi
  2206 00001D78 5F                  <2> 		pop edi
  2207 00001D79 29F9                <2> 		sub ecx, edi
  2208 00001D7B 51                  <2> 		push ecx
  2209 00001D7C E8650B0000          <2> 		call termcopy
  2210 00001D81 59                  <2> 		pop ecx
  2211 00001D82 C3                  <2> 		ret
  2212                              <2> 	.b:	
  2213 00001D83 53                  <2> 		push ebx
  2214 00001D84 31C0                <2> 		xor eax, eax
  2215 00001D86 8A06                <2> 		mov al, [esi]
  2216 00001D88 3CFF                <2> 		cmp al, 0xFF
  2217 00001D8A 7435                <2> 		je .doneutf
  2218 00001D8C 3CC0                <2> 		cmp al, 0xC0
  2219 00001D8E 7231                <2> 		jb .doneutf
  2220 00001D90 3CE0                <2> 		cmp al, 0xE0
  2221 00001D92 721A                <2> 		jb .two
  2222 00001D94 46                  <2> 		inc esi
  2223 00001D95 8A2E                <2> 		mov ch, [esi]
  2224 00001D97 46                  <2> 		inc esi
  2225 00001D98 8A0E                <2> 		mov cl, [esi]
  2226 00001D9A C0E004              <2> 		shl al, 4
  2227 00001D9D C0E102              <2> 		shl cl, 2
  2228 00001DA0 66C1E902            <2> 		shr cx, 2
  2229 00001DA4 08C5                <2> 		or ch, al
  2230 00001DA6 6689C8              <2> 		mov ax, cx
  2231 00001DA9 E913000000          <2> 		jmp .doneutf
  2232                              <2> 	.two:
  2233 00001DAE 8A2E                <2> 		mov ch, [esi]
  2234 00001DB0 46                  <2> 		inc esi
  2235 00001DB1 8A0E                <2> 		mov cl, [esi]
  2236 00001DB3 66C1E102            <2> 		shl cx, 2
  2237 00001DB7 C0ED02              <2> 		shr ch, 2
  2238 00001DBA 66C1E902            <2> 		shr cx, 2
  2239 00001DBE 6689C8              <2> 		mov ax, cx
  2240                              <2> 	.doneutf:
  2241 00001DC1 5B                  <2> 		pop ebx
  2242 00001DC2 663B05[DD1D0000]    <2> 		cmp ax, [endkeyprint]
  2243 00001DC9 7411                <2> 		je .done
  2244 00001DCB 663DFFFE            <2> 		cmp ax, 0xFEFF
  2245 00001DCF 7405                <2> 		je .noprint
  2246 00001DD1 E836060000          <2> 		call prcharq
  2247                              <2> 	.noprint:
  2248 00001DD6 46                  <2> 		inc esi
  2249 00001DD7 E9A7FFFFFF          <2> 		jmp .b
  2250                              <2> 	.done:
  2251 00001DDC C3                  <2> 		ret
  2252                              <2> 
  2253 00001DDD 0000                <2> endkeyprint dw 0
  2254                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2255                              <2> readstr:
  2256 00001DDF E805000000          <2> call readint
  2257 00001DE4 E9C9E4FFFF          <2> jmp timerinterrupt
  2258                              <2> 
  2259                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2260 00001DE9 89C3                <2> 		mov ebx, eax
  2261                              <2> 	.b:
  2262 00001DEB 53                  <2> 		push ebx
  2263 00001DEC 57                  <2> 		push edi
  2264 00001DED 56                  <2> 		push esi
  2265 00001DEE 30C0                <2> 		xor al, al
  2266 00001DF0 E886050000          <2> 		call rdcharint
  2267 00001DF5 5E                  <2> 		pop esi
  2268 00001DF6 8806                <2> 		mov [esi], al
  2269 00001DF8 46                  <2> 		inc esi
  2270 00001DF9 5F                  <2> 		pop edi
  2271 00001DFA 5B                  <2> 		pop ebx
  2272 00001DFB 39FE                <2> 		cmp esi, edi
  2273 00001DFD 7304                <2> 		jae .done
  2274 00001DFF 38D8                <2> 		cmp al, bl
  2275 00001E01 75E8                <2> 		jne .b
  2276                              <2> 	.done:
  2277 00001E03 4E                  <2> 		dec esi
  2278 00001E04 C60600              <2> 		mov byte [esi], 0
  2279 00001E07 C3                  <2> 		ret
  2280                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2281                              <2> clearscrn:
  2282 00001E08 E805000000          <2> call clear
  2283 00001E0D E9A0E4FFFF          <2> jmp timerinterrupt
  2284                              <2> %ifdef io.serial
  2285                              <2> clear:
  2286                              <2> 	mov esi, .str
  2287                              <2> 	call print
  2288                              <2> 	ret
  2289                              <2> .str db 27,"[2J",27,"[f",0
  2290                              <2> %else
  2291                              <2> clear:
  2292 00001E12 668B0D[0B260000]    <2> 		mov cx, [charxy]
  2293 00001E19 BF[9ED50300]        <2> 		mov edi, videobuf
  2294 00001E1E 31C0                <2> 		xor eax, eax
  2295 00001E20 A3[01260000]        <2> 		mov [linebeginpos], eax
  2296 00001E25 A3[05260000]        <2> 		mov [videobufpos], eax
  2297 00001E2A 6631D2              <2> 		xor dx, dx
  2298 00001E2D 66A3[09260000]      <2> 		mov [charpos], ax
  2299 00001E33 66B80700            <2> 		mov ax, 7
  2300 00001E37 C1E010              <2> 		shl eax, 16
  2301                              <2> 	clearb:
  2302 00001E3A 8907                <2> 		mov [edi], eax
  2303 00001E3C 81C704000000        <2> 		add edi, 4
  2304 00001E42 FEC9                <2> 		dec cl
  2305 00001E44 80F900              <2> 		cmp cl, 0
  2306 00001E47 75F1                <2> 		jne clearb
  2307 00001E49 8A0D[0B260000]      <2> 		mov cl, [charxy]
  2308 00001E4F FECD                <2> 		dec ch
  2309 00001E51 80FD00              <2> 		cmp ch, 0
  2310 00001E54 75E4                <2> 		jne clearb
  2311                              <2> 	cleardouble:
  2312 00001E56 BF[E6AA0400]        <2> 		mov edi, videobuf2
  2313 00001E5B 668B0D[0B260000]    <2> 		mov cx, [charxy]
  2314 00001E62 31C0                <2> 		xor eax, eax
  2315                              <2> 	clearc:
  2316 00001E64 8907                <2> 		mov [edi], eax
  2317 00001E66 81C704000000        <2> 		add edi, 4
  2318 00001E6C FEC9                <2> 		dec cl
  2319 00001E6E 80F900              <2> 		cmp cl, 0
  2320 00001E71 75F1                <2> 		jne clearc
  2321 00001E73 8A0D[0B260000]      <2> 		mov cl, [charxy]
  2322 00001E79 FECD                <2> 		dec ch
  2323 00001E7B 80FD00              <2> 		cmp ch, 0
  2324 00001E7E 75E4                <2> 		jne clearc
  2325 00001E80 E8610A0000          <2> 		call termcopy
  2326 00001E85 C3                  <2> 		ret
  2327                              <2> %endif
  2328                              <2> 		
  2329                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2330                              <2> prntreadstr:
  2331 00001E86 E80B000000          <2> call rdprint
  2332 00001E8B E922E4FFFF          <2> jmp timerinterrupt
  2333                              <2> 
  2334                              <2> readline:
  2335 00001E90 B00A                <2>   mov al, 10
  2336 00001E92 66BB0700            <2>   mov bx, 7
  2337                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2338 00001E96 E80F000000          <2> 	call rdprintdos
  2339 00001E9B 50                  <2> 	push eax
  2340 00001E9C A0[5A230000]        <2> 	mov al, [endkeyrdpr]
  2341 00001EA1 30E4                <2> 	xor ah, ah
  2342 00001EA3 E84D050000          <2> 	call prcharint
  2343 00001EA8 58                  <2> 	pop eax
  2344 00001EA9 C3                  <2> 	ret
  2345                              <2> 
  2346                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2347 00001EAA 8935[64230000]      <2> 		mov [buftxtloc], esi
  2348 00001EB0 A2[5A230000]        <2> 		mov [endkeyrdpr], al
  2349 00001EB5 66891D[5C230000]    <2> 		mov [modkeyrdpr], bx
  2350 00001EBC 8935[5E230000]      <2> 		mov [firstesirdpr], esi
  2351 00001EC2 893D[68230000]      <2> 		mov [endbufferrdpr], edi
  2352 00001EC8 8B3D[3A800500]      <2> 		mov edi, [commandsentered]
  2353 00001ECE 893D[36800500]      <2> 		mov [commandlistentries], edi
  2354                              <2> 	rdprintb:
  2355 00001ED4 56                  <2> 		push esi
  2356 00001ED5 B001                <2> 		mov al, 1
  2357 00001ED7 E89F040000          <2> 		call rdcharint
  2358 00001EDC 8A25[DB230000]      <2> 		mov ah, [lastkey + 2]
  2359 00001EE2 88E1                <2> 		mov cl, ah
  2360 00001EE4 5E                  <2> 		pop esi
  2361                              <2> %ifdef io.serial
  2362                              <2> 		cmp ah, 0x41
  2363                              <2> 		je near rdprup
  2364                              <2> 		cmp ah, 0x42
  2365                              <2> 		je near rdprdown
  2366                              <2> 		cmp ah, 0x43
  2367                              <2> 		je near rdprright
  2368                              <2> 		cmp ah, 0x44
  2369                              <2> 		je near rdprleft
  2370                              <2> 		cmp ah, 0x31
  2371                              <2> 		je near rdprhome
  2372                              <2> 		cmp ah, 0x48
  2373                              <2> 		je near rdprhome
  2374                              <2> 		cmp ah, 0x46
  2375                              <2> 		je near rdprend
  2376                              <2> 		cmp ah, 0x33
  2377                              <2> 		je near rdprdel
  2378                              <2> 		cmp ah, 0x34
  2379                              <2> 		je near rdprend
  2380                              <2> %else
  2381 00001EE5 803D[4A620000]E0    <2> 		cmp byte [specialkey], 0xE0
  2382 00001EEC 753F                <2> 		jne notspecialrdprnt
  2383 00001EEE 80FC53              <2> 		cmp ah, 0x53
  2384 00001EF1 0F84C9030000        <2> 		je near rdprdel
  2385 00001EF7 80FC47              <2> 		cmp ah, 0x47
  2386 00001EFA 0F8481010000        <2> 		je near rdprhome
  2387 00001F00 80FC4F              <2> 		cmp ah, 0x4F
  2388 00001F03 0F849A010000        <2> 		je near rdprend
  2389 00001F09 80FC50              <2> 		cmp ah, 0x50
  2390 00001F0C 0F8430020000        <2> 		je near rdprdown
  2391 00001F12 80FC4D              <2> 		cmp ah, 0x4D
  2392 00001F15 0F84CA010000        <2> 		je near rdprright
  2393 00001F1B 80FC4B              <2> 		cmp ah, 0x4B
  2394 00001F1E 0F849F010000        <2> 		je near rdprleft
  2395 00001F24 80FC48              <2> 		cmp ah, 0x48
  2396 00001F27 0F8458020000        <2> 		je near rdprup
  2397                              <2> 	notspecialrdprnt:
  2398                              <2> %endif
  2399 00001F2D 66A1[D9230000]      <2> 		mov ax, [lastkey]
  2400 00001F33 663D0800            <2> 		cmp ax, 8
  2401 00001F37 0F84B8030000        <2> 		je near rdprbscheck
  2402 00001F3D 663D0000            <2> 		cmp ax, 0
  2403 00001F41 7491                <2> 		je rdprintb
  2404 00001F43 80F900              <2> 		cmp cl, 0
  2405 00001F46 748C                <2> 		je rdprintb
  2406 00001F48 663D8000            <2> 		cmp ax, 0x80
  2407 00001F4C 7257                <2> 		jb .normal
  2408 00001F4E 663D0008            <2> 		cmp ax, 0x800
  2409 00001F52 7321                <2> 		jae .three
  2410 00001F54 46                  <2> 		inc esi
  2411 00001F55 3B35[68230000]      <2> 		cmp esi, [endbufferrdpr]
  2412 00001F5B 0F83DA000000        <2> 		jae near donerdprinc
  2413 00001F61 66C1E002            <2> 		shl ax, 2
  2414 00001F65 C0E802              <2> 		shr al, 2
  2415 00001F68 0C80                <2> 		or al, 10000000b
  2416 00001F6A 80CCC0              <2> 		or ah, 11000000b
  2417 00001F6D 8866FF              <2> 		mov [esi - 1], ah
  2418 00001F70 E930000000          <2> 		jmp .normal
  2419                              <2> .three:	
  2420 00001F75 81C602000000        <2> 		add esi, 2
  2421 00001F7B 3B35[68230000]      <2> 		cmp esi, [endbufferrdpr]
  2422 00001F81 0F83B4000000        <2> 		jae near donerdprinc
  2423 00001F87 88E1                <2> 		mov cl, ah
  2424 00001F89 C0E904              <2> 		shr cl, 4
  2425 00001F8C 80C9E0              <2> 		or cl, 11100000b
  2426 00001F8F 884EFE              <2> 		mov [esi - 2], cl
  2427 00001F92 66C1E004            <2> 		shl ax, 4
  2428 00001F96 66C1E802            <2> 		shr ax, 2
  2429 00001F9A 80CC80              <2> 		or ah, 10000000b
  2430 00001F9D C0E802              <2> 		shr al, 2
  2431 00001FA0 0C80                <2> 		or al, 10000000b
  2432 00001FA2 8866FF              <2> 		mov [esi - 1], ah
  2433                              <2> .normal:
  2434 00001FA5 8806                <2> 		mov [esi], al
  2435 00001FA7 46                  <2> 		inc esi
  2436 00001FA8 66A1[D9230000]      <2> 		mov ax, [lastkey]
  2437                              <2> 	bscheckequal:
  2438 00001FAE 668B1D[5C230000]    <2> 		mov bx, [modkeyrdpr]
  2439 00001FB5 803D[63230000]00    <2> 		cmp byte [txtmask], 0
  2440 00001FBC 7407                <2> 		je nomasktxt
  2441 00001FBE 30E4                <2> 		xor ah, ah
  2442 00001FC0 A0[63230000]        <2> 		mov al, [txtmask]
  2443                              <2> 	nomasktxt:
  2444 00001FC5 56                  <2> 		push esi
  2445 00001FC6 66A3[58230000]      <2> 		mov [axcache], ax
  2446 00001FCC 668B1D[5A230000]    <2> 		mov bx, [endkeyrdpr]
  2447 00001FD3 6639D8              <2> 		cmp ax, bx
  2448 00001FD6 7432                <2> 		je nobackprintbuftxt2
  2449 00001FD8 E818040000          <2> 		call prcharint
  2450 00001FDD BE[88CA0300]        <2> 		mov esi, buftxt2
  2451 00001FE2 E858FDFFFF          <2> 		call printquiet
  2452 00001FE7 66B82000            <2> 		mov ax, " "
  2453 00001FEB E81C040000          <2> 		call prcharq
  2454 00001FF0 66B80800            <2> 		mov ax, 8
  2455 00001FF4 81FE[88CA0300]      <2> 		cmp esi, buftxt2
  2456 00001FFA 740E                <2> 		je nobackprintbuftxt2
  2457                              <2> 	backprintbuftxt2:
  2458 00001FFC E80B040000          <2> 		call prcharq
  2459 00002001 4E                  <2> 		dec esi
  2460 00002002 81FE[88CA0300]      <2> 		cmp esi, buftxt2
  2461 00002008 77F2                <2> 		ja backprintbuftxt2
  2462                              <2> 	nobackprintbuftxt2:
  2463 0000200A 663D0A00            <2> 		cmp ax, 10
  2464 0000200E 7405                <2> 		je nonobackprint
  2465 00002010 E8E0030000          <2> 		call prcharint
  2466                              <2> 	nonobackprint:
  2467 00002015 5E                  <2> 		pop esi
  2468 00002016 3B35[68230000]      <2> 		cmp esi, [endbufferrdpr]
  2469 0000201C 0F8319000000        <2> 		jae near donerdprinc
  2470 00002022 66A1[58230000]      <2> 		mov ax, [axcache]
  2471 00002028 8A25[5A230000]      <2> 		mov ah, [endkeyrdpr]
  2472 0000202E 38E0                <2> 		cmp al, ah
  2473 00002030 0F859EFEFFFF        <2> 		jne rdprintb
  2474 00002036 E901000000          <2> 		jmp donerdprint
  2475                              <2> 	donerdprinc:
  2476 0000203B 46                  <2> 		inc esi
  2477                              <2> 	donerdprint:
  2478 0000203C 4E                  <2> 		dec esi
  2479 0000203D BF[88CA0300]        <2> 		mov edi, buftxt2
  2480                              <2> 	copylaterstuff:
  2481 00002042 8A07                <2> 		mov al, [edi]
  2482 00002044 3C00                <2> 		cmp al, 0
  2483 00002046 7409                <2> 		je nocopylaterstuff
  2484 00002048 8806                <2> 		mov [esi], al
  2485 0000204A 47                  <2> 		inc edi
  2486 0000204B 46                  <2> 		inc esi
  2487 0000204C E9F1FFFFFF          <2> 		jmp copylaterstuff
  2488                              <2> 	nocopylaterstuff:
  2489 00002051 C60600              <2> 		mov byte [esi], 0
  2490 00002054 E80B000000          <2> 		call clearbuftxt2
  2491 00002059 89F1                <2> 		mov ecx, esi
  2492 0000205B 8B3D[5E230000]      <2> 		mov edi, [firstesirdpr]
  2493 00002061 29F9                <2> 		sub ecx, edi
  2494 00002063 C3                  <2> 		ret
  2495                              <2> 	
  2496                              <2> 	clearbuftxt2:
  2497 00002064 30C0                <2> 		xor al, al
  2498 00002066 BF[88CA0300]        <2> 		mov edi, buftxt2
  2499                              <2> 	clearbuftxt2lp:
  2500 0000206B 8807                <2> 		mov [edi], al
  2501 0000206D 47                  <2> 		inc edi
  2502 0000206E 81FF[88CE0300]      <2> 		cmp edi, buftxt
  2503 00002074 75F5                <2> 		jne clearbuftxt2lp
  2504 00002076 C3                  <2> 		ret
  2505                              <2> 	
  2506                              <2> 	rdprintb2:
  2507 00002077 E86A080000          <2> 		call termcopy
  2508 0000207C E953FEFFFF          <2> 		jmp rdprintb
  2509                              <2> 	
  2510                              <2> 	rdprhome:
  2511 00002081 3B35[64230000]      <2> 		cmp esi, [buftxtloc]
  2512 00002087 0F84EAFFFFFF        <2> 		je near rdprintb2
  2513 0000208D BF[88CA0300]        <2> 		mov edi, buftxt2
  2514 00002092 8A07                <2> 		mov al, [edi]
  2515 00002094 E88E020000          <2> 		call shiftbuftxt2
  2516 00002099 E86E030000          <2> 		call prcharq
  2517 0000209E E9DEFFFFFF          <2> 		jmp rdprhome
  2518                              <2> 		
  2519                              <2> 	rdprend:
  2520 000020A3 BF[88CA0300]        <2> 		mov edi, buftxt2
  2521 000020A8 8A07                <2> 		mov al, [edi]
  2522 000020AA 3C00                <2> 		cmp al, 0
  2523 000020AC 0F84C5FFFFFF        <2> 		je near rdprintb2
  2524 000020B2 8806                <2> 		mov [esi], al
  2525 000020B4 E84C000000          <2> 		call shiftbuftxt2lft
  2526 000020B9 E84E030000          <2> 		call prcharq
  2527 000020BE E9E0FFFFFF          <2> 		jmp rdprend
  2528                              <2> 	
  2529                              <2> 	rdprleft:
  2530 000020C3 3B35[64230000]      <2> 		cmp esi, [buftxtloc]
  2531 000020C9 0F8405FEFFFF        <2> 		je near rdprintb
  2532 000020CF BF[88CA0300]        <2> 		mov edi, buftxt2
  2533 000020D4 8A07                <2> 		mov al, [edi]
  2534 000020D6 E84C020000          <2> 		call shiftbuftxt2
  2535 000020DB E815030000          <2> 		call prcharint
  2536 000020E0 E9EFFDFFFF          <2> 		jmp rdprintb
  2537                              <2> 		
  2538                              <2> 	rdprright:
  2539 000020E5 BF[88CA0300]        <2> 		mov edi, buftxt2
  2540 000020EA 8A07                <2> 		mov al, [edi]
  2541 000020EC 3C00                <2> 		cmp al, 0
  2542 000020EE 0F84E0FDFFFF        <2> 		je near rdprintb
  2543 000020F4 8806                <2> 		mov [esi], al
  2544 000020F6 E80A000000          <2> 		call shiftbuftxt2lft
  2545 000020FB E8F5020000          <2> 		call prcharint
  2546 00002100 E9CFFDFFFF          <2> 		jmp rdprintb
  2547                              <2> 		
  2548                              <2> 	shiftbuftxt2lft:
  2549 00002105 55                  <2> 		push ebp
  2550 00002106 89FD                <2> 		mov ebp, edi
  2551                              <2> 	.lp:
  2552 00002108 3C00                <2> 		cmp al, 0
  2553 0000210A 740B                <2> 		je noshiftbuftxt2lft
  2554 0000210C 47                  <2> 		inc edi
  2555 0000210D 8A07                <2> 		mov al, [edi]
  2556 0000210F 8847FF              <2> 		mov [edi - 1], al
  2557 00002112 E9F1FFFFFF          <2> 		jmp .lp
  2558                              <2> 	noshiftbuftxt2lft:
  2559 00002117 8A4500              <2> 		mov al, [ebp]
  2560 0000211A 5D                  <2> 		pop ebp
  2561 0000211B 3CC0                <2> 		cmp al, 0xC0
  2562 0000211D 7304                <2> 		jae .nofix
  2563 0000211F 3C80                <2> 		cmp al, 0x80
  2564 00002121 73E2                <2> 		jae shiftbuftxt2lft
  2565                              <2> 	.nofix:
  2566 00002123 8A06                <2> 		mov al, [esi]
  2567 00002125 30E4                <2> 		xor ah, ah
  2568 00002127 46                  <2> 		inc esi
  2569 00002128 668B1D[5C230000]    <2> 		mov bx, [modkeyrdpr]
  2570 0000212F C3                  <2> 		ret
  2571                              <2> 		
  2572                              <2> 	rdprdownbck:
  2573 00002130 FECC                <2> 		dec ah
  2574 00002132 8825[62230000]      <2> 		mov [commandedit], ah
  2575 00002138 E890000000          <2> 		call rdprbckspc
  2576 0000213D E992FDFFFF          <2> 		jmp rdprintb
  2577                              <2> 	
  2578                              <2> 	rdprdown:
  2579 00002142 8A25[62230000]      <2> 		mov ah, [commandedit]
  2580 00002148 80FC01              <2> 		cmp ah, 1
  2581 0000214B 0F8683FDFFFF        <2> 		jbe near rdprintb
  2582 00002151 8B3D[3A800500]      <2> 		mov edi, [commandsentered]
  2583 00002157 3B3D[36800500]      <2> 		cmp edi, [commandlistentries]
  2584 0000215D 7618                <2> 		jbe .nofix
  2585 0000215F 8105[36800500]0200- <2> 		add dword [commandlistentries], 2
  2586 00002167 0000                <2>
  2587 00002169 3B3D[36800500]      <2> 		cmp edi, [commandlistentries]
  2588 0000216F 7706                <2> 		ja .nofix
  2589 00002171 893D[36800500]      <2> 		mov [commandlistentries], edi
  2590                              <2> 	.nofix:
  2591 00002177 80FC02              <2> 		cmp ah, 2
  2592 0000217A 74B4                <2> 		je rdprdownbck
  2593 0000217C 80EC02              <2> 		sub ah, 2
  2594 0000217F 8825[62230000]      <2> 		mov [commandedit], ah
  2595                              <2> 		
  2596                              <2> 	rdprup:
  2597 00002185 3805[62230000]      <2> 		cmp [commandedit], al
  2598 0000218B 0F8443FDFFFF        <2> 		je near rdprintb
  2599 00002191 813D[36800500]0000- <2> 		cmp dword [commandlistentries], 0
  2600 00002199 0000                <2>
  2601 0000219B 0F8433FDFFFF        <2> 		je near rdprintb
  2602 000021A1 FF0D[36800500]      <2> 		dec dword [commandlistentries]
  2603                              <2> 	.lp:
  2604 000021A7 BF[88CA0300]        <2> 		mov edi, buftxt2
  2605 000021AC 8A07                <2> 		mov al, [edi]
  2606 000021AE 3C00                <2> 		cmp al, 0
  2607 000021B0 7411                <2> 		je .start
  2608 000021B2 8806                <2> 		mov [esi], al
  2609 000021B4 E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2610 000021B9 E84E020000          <2> 		call prcharq
  2611 000021BE E9E4FFFFFF          <2> 		jmp .lp
  2612                              <2> 	.start:
  2613 000021C3 E805000000          <2> 		call rdprbckspc
  2614 000021C8 E94B000000          <2> 		jmp getcurrentcommandstr
  2615                              <2> 	rdprbckspc:
  2616 000021CD 3B35[64230000]      <2> 		cmp esi, [buftxtloc]
  2617 000021D3 7435                <2> 		je nordprupbck
  2618                              <2> 	rdprupbckspclp:
  2619 000021D5 66B80800            <2> 		mov ax, 8
  2620 000021D9 668B1D[5C230000]    <2> 		mov bx, [modkeyrdpr]
  2621 000021E0 E827020000          <2> 		call prcharq
  2622 000021E5 66B82000            <2> 		mov ax, ' '
  2623 000021E9 E81E020000          <2> 		call prcharq
  2624 000021EE 66B80800            <2> 		mov ax, 8
  2625 000021F2 E815020000          <2> 		call prcharq
  2626 000021F7 4E                  <2> 		dec esi
  2627 000021F8 3B35[64230000]      <2> 		cmp esi, [buftxtloc]
  2628 000021FE 7405                <2> 		je nordprupbck2
  2629 00002200 E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2630                              <2> 	nordprupbck2:
  2631 00002205 E8DC060000          <2> 		call termcopy
  2632                              <2> 	nordprupbck:
  2633 0000220A 8B3D[32800500]      <2> 		mov edi, [commandbufpos]
  2634 00002210 81C7[3E800500]      <2> 		add edi, commandbuf
  2635 00002216 4F                  <2> 		dec edi
  2636 00002217 C3                  <2> 		ret
  2637                              <2> 	getcurrentcommandstr:
  2638 00002218 8A25[62230000]      <2> 		mov ah, [commandedit]
  2639 0000221E FE05[62230000]      <2> 		inc byte [commandedit]
  2640                              <2> 	getccmdlp:
  2641 00002224 4F                  <2> 		dec edi
  2642 00002225 8A07                <2> 		mov al, [edi]
  2643 00002227 81FF[3E800500]      <2> 		cmp edi, commandbuf
  2644 0000222D 7231                <2> 		jb getcmdresetcommandbuf
  2645 0000222F 81EF[3E800500]      <2> 		sub edi, commandbuf
  2646 00002235 3B3D[32800500]      <2> 		cmp edi, [commandbufpos]
  2647 0000223B 0F8493FCFFFF        <2> 		je near rdprintb
  2648 00002241 81C7[3E800500]      <2> 		add edi, commandbuf
  2649 00002247 3C00                <2> 		cmp al, 0
  2650 00002249 75D9                <2> 		jne getccmdlp
  2651 0000224B FECC                <2> 		dec ah
  2652 0000224D 80FC00              <2> 		cmp ah, 0
  2653 00002250 77D2                <2> 		ja getccmdlp
  2654 00002252 47                  <2> 		inc edi
  2655 00002253 81FF[3E900500]      <2> 		cmp edi, commandbufend
  2656 00002259 7710                <2> 		ja fixcmdbufb4morerdpr
  2657 0000225B E918000000          <2> 		jmp morerdprup
  2658                              <2> 	getcmdresetcommandbuf:
  2659 00002260 BF[3E900500]        <2> 		mov edi, commandbufend
  2660 00002265 47                  <2> 		inc edi
  2661 00002266 E9B9FFFFFF          <2> 		jmp getccmdlp
  2662                              <2> 	fixcmdbufb4morerdpr:
  2663 0000226B 4F                  <2> 		dec edi
  2664 0000226C 81EF[3E900500]      <2> 		sub edi, commandbufend
  2665 00002272 81C7[3E800500]      <2> 		add edi, commandbuf
  2666                              <2> 	morerdprup:
  2667 00002278 8A07                <2> 		mov al, [edi]
  2668 0000227A 47                  <2> 		inc edi
  2669 0000227B 81EF[3E800500]      <2> 		sub edi, commandbuf
  2670 00002281 3C00                <2> 		cmp al, 0
  2671 00002283 0F84EEFDFFFF        <2> 		je near rdprintb2
  2672 00002289 3B3D[32800500]      <2> 		cmp edi, [commandbufpos]
  2673 0000228F 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2674 00002295 81C7[3E800500]      <2> 		add edi, commandbuf
  2675 0000229B 8806                <2> 		mov [esi], al
  2676 0000229D 46                  <2> 		inc esi
  2677 0000229E 57                  <2> 		push edi
  2678 0000229F 668B1D[5C230000]    <2> 		mov bx, [modkeyrdpr]
  2679 000022A6 30E4                <2> 		xor ah, ah
  2680 000022A8 E85F010000          <2> 		call prcharq
  2681 000022AD 5F                  <2> 		pop edi
  2682 000022AE 81FF[3E900500]      <2> 		cmp edi, commandbufend
  2683 000022B4 76C2                <2> 		jbe morerdprup
  2684 000022B6 BF[3E800500]        <2> 		mov edi, commandbuf
  2685 000022BB E9B8FFFFFF          <2> 		jmp morerdprup
  2686                              <2> 
  2687                              <2> 	rdprdel:
  2688 000022C0 BF[88CA0300]        <2> 		mov edi, buftxt2
  2689 000022C5 8A07                <2> 		mov al, [edi]
  2690 000022C7 3C00                <2> 		cmp al, 0
  2691 000022C9 0F8405FCFFFF        <2> 		je near rdprintb
  2692 000022CF 8806                <2> 		mov [esi], al
  2693 000022D1 3C80                <2> 		cmp al, 0x80
  2694 000022D3 7216                <2> 		jb .fn
  2695                              <2> 	.lp:
  2696 000022D5 46                  <2> 		inc esi
  2697 000022D6 47                  <2> 		inc edi
  2698 000022D7 8A07                <2> 		mov al, [edi]
  2699 000022D9 3C00                <2> 		cmp al, 0
  2700 000022DB 0F84F3FBFFFF        <2> 		je near rdprintb
  2701 000022E1 8806                <2> 		mov [esi], al
  2702 000022E3 3C80                <2> 		cmp al, 0x80
  2703 000022E5 7204                <2> 		jb .fn
  2704 000022E7 3CC0                <2> 		cmp al, 0xC0
  2705 000022E9 72EA                <2> 		jb .lp
  2706                              <2> 	.fn:
  2707 000022EB E815FEFFFF          <2> 		call shiftbuftxt2lft
  2708 000022F0 E817010000          <2> 		call prcharq
  2709                              <2> 		
  2710                              <2> 	rdprbscheck:
  2711 000022F5 3B35[5E230000]      <2> 		cmp esi, [firstesirdpr]
  2712 000022FB 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2713                              <2> 	goodbscheck:
  2714 00002301 4E                  <2> 		dec esi
  2715 00002302 8A46FF              <2> 		mov al, [esi - 1]
  2716 00002305 C60600              <2> 		mov byte [esi], 0
  2717 00002308 3CC0                <2> 		cmp al, 0xC0
  2718 0000230A 7309                <2> 		jae .onemore
  2719 0000230C 3C80                <2> 		cmp al, 0x80
  2720 0000230E 73F1                <2> 		jae goodbscheck
  2721 00002310 E904000000          <2> 		jmp .nomore
  2722                              <2> 	.onemore:
  2723 00002315 4E                  <2> 		dec esi
  2724 00002316 C60600              <2> 		mov byte [esi], 0		
  2725                              <2> 	.nomore:
  2726 00002319 668B1D[5C230000]    <2> 		mov bx, [modkeyrdpr]
  2727 00002320 B008                <2> 		mov al, 8
  2728 00002322 E987FCFFFF          <2> 		jmp bscheckequal
  2729                              <2> 		
  2730                              <2> 	shiftbuftxt2:
  2731 00002327 55                  <2> 		push ebp
  2732 00002328 89FD                <2> 		mov ebp, edi
  2733                              <2> 	.lp:
  2734 0000232A 3C00                <2> 		cmp al, 0
  2735 0000232C 740C                <2> 		je noshiftbuftxt2
  2736 0000232E 47                  <2> 		inc edi
  2737 0000232F 8A27                <2> 		mov ah, [edi]
  2738 00002331 8807                <2> 		mov [edi], al
  2739 00002333 88E0                <2> 		mov al, ah
  2740 00002335 E9F0FFFFFF          <2> 		jmp .lp
  2741                              <2> 	noshiftbuftxt2:
  2742 0000233A 8A4500              <2> 		mov al, [ebp]
  2743 0000233D 5D                  <2> 		pop ebp
  2744 0000233E 3CC0                <2> 		cmp al, 0xC0
  2745 00002340 7304                <2> 		jae .nofix
  2746 00002342 3C80                <2> 		cmp al, 0x80
  2747 00002344 73E1                <2> 		jae shiftbuftxt2
  2748                              <2> 	.nofix:
  2749 00002346 BF[88CA0300]        <2> 		mov edi, buftxt2
  2750 0000234B 4E                  <2> 		dec esi
  2751 0000234C 8A06                <2> 		mov al, [esi]
  2752 0000234E 8807                <2> 		mov [edi], al
  2753 00002350 C60600              <2> 		mov byte [esi], 0
  2754 00002353 66B80800            <2> 		mov ax, 8
  2755 00002357 C3                  <2> 		ret
  2756                              <2> 		
  2757 00002358 0000                <2> axcache dw 0
  2758 0000235A 0000                <2> endkeyrdpr dw 0
  2759 0000235C 0000                <2> modkeyrdpr dw 0
  2760 0000235E 00000000            <2> firstesirdpr dd 0
  2761 00002362 00                  <2> commandedit db 0
  2762 00002363 00                  <2> txtmask db 0
  2763 00002364 00000000            <2> buftxtloc dd 0
  2764 00002368 00000000            <2> endbufferrdpr dd 0
  2765 0000236C 082000              <2> backcursor db 8," ",0
  2766                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2767                              <2> readchar:
  2768 0000236F E807000000          <2> 	call rdcharint
  2769 00002374 E939DFFFFF          <2> 	jmp timerinterrupt
  2770                              <2> getchar:
  2771 00002379 30C0                <2> 	xor al, al
  2772                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2773 0000237B 66C705[DD230000]01- <2> 		mov word [trans], 1
  2774 00002383 00                  <2>
  2775 00002384 3C00                <2> 		cmp al, 0
  2776 00002386 7509                <2> 		jne transcheck
  2777 00002388 66C705[DD230000]00- <2> 		mov word [trans], 0
  2778 00002390 00                  <2>
  2779                              <2> 	transcheck:
  2780                              <2> 	%ifdef io.serial
  2781                              <2> 		call serial.receive
  2782                              <2> 		xor ah, ah
  2783                              <2> 		cmp al, 13
  2784                              <2> 		je rdenter
  2785                              <2> 	%else
  2786 00002391 E8D63E0000          <2> 		call getkey
  2787 00002396 66A1[DB230000]      <2> 		mov ax, [lastkey + 2]
  2788 0000239C 663D1C00            <2> 		cmp ax, 0x1C
  2789 000023A0 7425                <2> 		je rdenter
  2790                              <2> 	%endif
  2791 000023A2 66A1[D9230000]      <2> 		mov ax, [lastkey]
  2792 000023A8 668B1D[DD230000]    <2> 		mov bx, [trans]
  2793 000023AF 803D[4A620000]E0    <2> 		cmp byte [specialkey], 0xE0
  2794 000023B6 7500                <2> 		jne nospecialtrans
  2795                              <2> 	nospecialtrans:
  2796 000023B8 6609C3              <2> 		or bx, ax
  2797 000023BB 6681FB0000          <2> 		cmp bx, 0
  2798 000023C0 74CF                <2> 		je transcheck
  2799 000023C2 E90C000000          <2> 		jmp rdend
  2800                              <2> 	rdenter:
  2801 000023C7 C1E010              <2> 		shl eax, 16
  2802 000023CA 66B80A00            <2> 		mov ax, 10
  2803 000023CE A3[D9230000]        <2> 		mov [lastkey], eax
  2804                              <2> 	rdend:
  2805 000023D3 A1[D9230000]        <2> 		mov eax, [lastkey]
  2806 000023D8 C3                  <2> 		ret
  2807                              <2> 		
  2808 000023D9 00000000            <2> lastkey dd 0
  2809 000023DD 0000                <2> trans dw 0
  2810                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2811                              <2> prntchar:
  2812 000023DF 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2813                              <2> %ifdef io.serial
  2814                              <2> 	call prcharint
  2815                              <2> 	jmp timerinterrupt
  2816                              <2> prcharint:	
  2817                              <2> prcharq:
  2818                              <2> 	call serial.send
  2819                              <2> 	ret
  2820                              <2> %else
  2821 000023E1 38FB                <2> cmp bl, bh
  2822 000023E3 740A                <2> je prchar.notimer
  2823 000023E5 E80B000000          <2> call prcharint
  2824 000023EA E9C3DEFFFF          <2> jmp timerinterrupt
  2825                              <2> prchar.notimer:
  2826 000023EF E818000000          <2> 	call prcharq
  2827 000023F4 CF                  <2> 	iret
  2828                              <2> 	
  2829                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2830 000023F5 663DFFFE            <2> 	cmp ax, 0xFEFF
  2831 000023F9 740E                <2> 	je .ret
  2832 000023FB 39C1                <2> 	cmp ecx, eax
  2833 000023FD 740D                <2> 	je prcharq
  2834 000023FF E808000000          <2> 	call prcharq
  2835 00002404 E8DD040000          <2> 	call termcopy
  2836                              <2> .ret:
  2837 00002409 C3                  <2> 	ret
  2838 0000240A 00                  <2> termguion db 0
  2839 0000240B 00                  <2> termcopyon db 0
  2840                              <2> prcharq:
  2841 0000240C C1E310              <2> 	shl ebx, 16
  2842 0000240F 6689C3              <2> 	mov bx, ax
  2843 00002412 89D8                <2> 	mov eax, ebx
  2844 00002414 A3[0D260000]        <2> 	mov [charbuf], eax
  2845 00002419 8B1D[05260000]      <2> 	mov ebx, [videobufpos]
  2846 0000241F BF[9ED50300]        <2> 	mov edi, videobuf
  2847 00002424 01DF                <2> 	add edi, ebx
  2848 00002426 A1[F1280000]        <2> 	mov eax, [removedvideo]
  2849 0000242B 8907                <2> 	mov [edi], eax
  2850 0000242D A1[0D260000]        <2> 	mov eax, [charbuf]
  2851 00002432 31D2                <2> 	xor edx, edx
  2852 00002434 668B15[09260000]    <2> 	mov dx, [charpos]
  2853 0000243B 31C9                <2> 	xor ecx, ecx
  2854 0000243D 668B0D[0B260000]    <2> 	mov cx, [charxy]
  2855 00002444 663D0900            <2> 	cmp ax, 9
  2856 00002448 0F847C000000        <2> 	je near prtab
  2857 0000244E 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2858 00002452 0F84A2000000        <2> 	je near prcr
  2859 00002458 663D0A00            <2> 	cmp ax, 10
  2860 0000245C 0F84F1000000        <2> 	je near prnlcr
  2861 00002462 663D0800            <2> 	cmp ax, 8
  2862 00002466 0F84A2000000        <2> 	je near prbs
  2863 0000246C 663DFF00            <2> 	cmp ax, 255		;null character
  2864 00002470 0F8424000000        <2> 	je near donescr
  2865 00002476 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2866 0000247A 0F8341000000        <2> 	jae near prnofont
  2867                              <2> donepr:
  2868 00002480 8907                <2> 	mov [edi], eax
  2869 00002482 81C704000000        <2> 	add edi, 4
  2870 00002488 FEC2                <2> 	inc dl
  2871                              <2> donecrnl:
  2872 0000248A 38CA                <2> 	cmp dl, cl
  2873 0000248C 0F83E5000000        <2> 	jae near preol
  2874                              <2> doneeol:
  2875 00002492 38EE                <2> 	cmp dh, ch
  2876 00002494 0F83FA000000        <2> 	jae near prscr	
  2877                              <2> donescr:
  2878 0000249A 89FB                <2> 	mov ebx, edi
  2879 0000249C 8B07                <2> 	mov eax, [edi]
  2880 0000249E A3[F1280000]        <2> 	mov [removedvideo], eax
  2881 000024A3 81EB[9ED50300]      <2> 	sub ebx, videobuf
  2882 000024A9 891D[05260000]      <2> 	mov [videobufpos], ebx
  2883 000024AF 668915[09260000]    <2> 	mov [charpos], dx
  2884 000024B6 A1[0D260000]        <2> 	mov eax, [charbuf]
  2885 000024BB 89C3                <2> 	mov ebx, eax
  2886 000024BD C1EB10              <2> 	shr ebx, 16
  2887 000024C0 C3                  <2> 	ret
  2888                              <2> 	
  2889                              <2> 	prnofont:
  2890 000024C1 66B80200            <2> 		mov ax, 2
  2891 000024C5 E9B6FFFFFF          <2> 		jmp donepr
  2892                              <2> 	prtab:
  2893 000024CA 8B1D[01260000]      <2> 		mov ebx, [linebeginpos]
  2894 000024D0 81EF[9ED50300]      <2> 		sub edi, videobuf
  2895 000024D6 29DF                <2> 		sub edi, ebx
  2896 000024D8 C1EF05              <2> 		shr edi, 5
  2897 000024DB C1E705              <2> 		shl edi, 5
  2898 000024DE 81C720000000        <2> 		add edi, 32
  2899 000024E4 C0EA03              <2> 		shr dl, 3
  2900 000024E7 C0E203              <2> 		shl dl, 3
  2901 000024EA 80C208              <2> 		add dl, 8
  2902 000024ED 81C7[9ED50300]      <2> 		add edi, videobuf
  2903 000024F3 01DF                <2> 		add edi, ebx
  2904 000024F5 E990FFFFFF          <2> 		jmp donecrnl
  2905                              <2> 	
  2906                              <2> 	prcr:
  2907 000024FA 30D2                <2> 		xor dl, dl
  2908 000024FC BF[9ED50300]        <2> 		mov edi, videobuf
  2909 00002501 8B1D[01260000]      <2> 		mov ebx, [linebeginpos]
  2910 00002507 01DF                <2> 		add edi, ebx
  2911 00002509 E97CFFFFFF          <2> 		jmp donecrnl
  2912                              <2> 			
  2913                              <2> 	prbs:
  2914 0000250E 8B1D[01260000]      <2> 		mov ebx, [linebeginpos]
  2915 00002514 80FA00              <2> 		cmp dl, 0
  2916 00002517 7415                <2> 		je prbackline
  2917                              <2> 	prnobmr:
  2918 00002519 891D[01260000]      <2> 		mov [linebeginpos], ebx
  2919 0000251F FECA                <2> 		dec dl
  2920 00002521 31C0                <2> 		xor eax, eax
  2921 00002523 81EF04000000        <2> 		sub edi, 4
  2922 00002529 E95CFFFFFF          <2> 		jmp donecrnl
  2923                              <2> 	prbackline:
  2924 0000252E 6631DB              <2> 		xor bx, bx
  2925 00002531 88CA                <2> 		mov dl, cl
  2926 00002533 80FE00              <2> 		cmp dh, 0
  2927 00002536 74E1                <2> 		je prnobmr
  2928 00002538 8B1D[01260000]      <2> 		mov ebx, [linebeginpos]
  2929 0000253E 6651                <2> 		push cx
  2930 00002540 31C9                <2> 		xor ecx, ecx
  2931 00002542 8A0C24              <2> 		mov cl, [esp]
  2932 00002545 C1E102              <2> 		shl ecx, 2
  2933 00002548 29CB                <2> 		sub ebx, ecx
  2934 0000254A 6659                <2> 		pop cx
  2935 0000254C FECE                <2> 		dec dh
  2936 0000254E E9C6FFFFFF          <2> 		jmp prnobmr
  2937                              <2> 		
  2938                              <2> 	prnlcr:
  2939 00002553 FEC6                <2> 		inc dh
  2940 00002555 31DB                <2> 		xor ebx, ebx
  2941 00002557 30D2                <2> 		xor dl, dl
  2942 00002559 88CB                <2> 		mov bl, cl
  2943 0000255B 66C1E302            <2> 		shl bx, 2
  2944 0000255F BF[9ED50300]        <2> 		mov edi, videobuf
  2945 00002564 031D[01260000]      <2> 		add ebx, [linebeginpos]
  2946 0000256A 891D[01260000]      <2> 		mov [linebeginpos], ebx
  2947 00002570 01DF                <2> 		add edi, ebx
  2948 00002572 E913FFFFFF          <2> 		jmp donecrnl
  2949                              <2> 		
  2950                              <2> 	preol:
  2951 00002577 30D2                <2> 		xor dl, dl
  2952 00002579 FEC6                <2> 		inc dh
  2953 0000257B 31DB                <2> 		xor ebx, ebx
  2954 0000257D 88CB                <2> 		mov bl, cl
  2955 0000257F 66C1E302            <2> 		shl bx, 2
  2956 00002583 031D[01260000]      <2> 		add ebx, [linebeginpos]
  2957 00002589 891D[01260000]      <2> 		mov [linebeginpos], ebx
  2958 0000258F E9FEFEFFFF          <2> 		jmp doneeol
  2959                              <2> 	prscr:
  2960 00002594 FECE                <2> 		dec dh
  2961 00002596 BF[9ED50300]        <2> 		mov edi, videobuf
  2962 0000259B 31DB                <2> 		xor ebx, ebx
  2963 0000259D 88CB                <2> 		mov bl, cl
  2964 0000259F 66C1E302            <2> 		shl bx, 2
  2965 000025A3 01FB                <2> 		add ebx, edi
  2966                              <2> 	intscrollloop:
  2967 000025A5 8B03                <2> 		mov eax, [ebx]
  2968 000025A7 8907                <2> 		mov [edi], eax
  2969 000025A9 81C704000000        <2> 		add edi, 4
  2970 000025AF 81C304000000        <2> 		add ebx, 4
  2971 000025B5 FEC9                <2> 		dec cl
  2972 000025B7 80F900              <2> 		cmp cl, 0
  2973 000025BA 75E9                <2> 		jne intscrollloop
  2974 000025BC 8A0D[0B260000]      <2> 		mov cl, [charxy]
  2975 000025C2 FECD                <2> 		dec ch
  2976 000025C4 80FD01              <2> 		cmp ch, 1
  2977 000025C7 77DC                <2> 		ja intscrollloop
  2978 000025C9 31C0                <2> 		xor eax, eax
  2979 000025CB 81EF[9ED50300]      <2> 		sub edi, videobuf
  2980 000025D1 893D[01260000]      <2> 		mov [linebeginpos], edi
  2981 000025D7 81C7[9ED50300]      <2> 		add edi, videobuf
  2982 000025DD 89FB                <2> 		mov ebx, edi
  2983                              <2> 	intloopclear:
  2984 000025DF 8903                <2> 		mov [ebx], eax
  2985 000025E1 81C304000000        <2> 		add ebx, 4
  2986 000025E7 FEC9                <2> 		dec cl
  2987 000025E9 80F900              <2> 		cmp cl, 0
  2988 000025EC 75F1                <2> 		jne intloopclear
  2989 000025EE FECD                <2> 		dec ch
  2990 000025F0 80FD00              <2> 		cmp ch, 0
  2991 000025F3 75EA                <2> 		jne intloopclear
  2992 000025F5 668B0D[0B260000]    <2> 		mov cx, [charxy]
  2993 000025FC E999FEFFFF          <2> 		jmp donescr
  2994                              <2> 		
  2995 00002601 00000000            <2> linebeginpos dd 0
  2996 00002605 00000000            <2> videobufpos: dd 0
  2997 00002609 0000                <2> charpos db 0,0
  2998 0000260B 501E                <2> charxy db 80,30
  2999 0000260D 00000000            <2> charbuf dd 0
  3000                              <2> %endif
  3001                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3002                              <2> openfile:
  3003 00002611 E803460000          <2> 	call loadfile
  3004 00002616 E997DCFFFF          <2> 	jmp timerinterrupt
  3005                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3006                              <2> num2str:
  3007 0000261B 3C00                <2> 	cmp al, 0
  3008 0000261D 750A                <2> 	jne num2strb
  3009 0000261F E8EC0C0000          <2> 	call showdec
  3010 00002624 E989DCFFFF          <2> 	jmp timerinterrupt
  3011                              <2> num2strb:
  3012 00002629 E8270C0000          <2> 	call showhex
  3013 0000262E E97FDCFFFF          <2> 	jmp timerinterrupt
  3014                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3015                              <2> str2num:
  3016 00002633 89F7                <2> 	mov edi, esi
  3017 00002635 E8B40D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3018 0000263A E973DCFFFF          <2> 	jmp timerinterrupt
  3019                              <2> 	
  3020                              <1> %ifdef threads.included
  3021                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3022                              <2> forkthread:
  3023                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3024                              <2> 			;returns the PID of the new fork in ebx
  3025                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3026 0000263F FA                  <2> 	cli
  3027 00002640 60                  <2> 	pushad
  3028 00002641 8925[0E270000]      <2> 	mov [.espold], esp
  3029 00002647 C605[DC6D0000]01    <2> 	mov byte [threadson], 1
  3030 0000264E 8B1D[DD6D0000]      <2> 	mov ebx, [currentthread]
  3031 00002654 C1E302              <2> 	shl ebx, 2
  3032 00002657 89A3[52B00500]      <2> 	mov [threadlist + ebx], esp
  3033 0000265D C1EB02              <2> 	shr ebx, 2
  3034 00002660 81FB00000000        <2> 	cmp ebx, 0
  3035 00002666 750C                <2> 	jne .simplestack
  3036 00002668 BB[00B40300]        <2> 	mov ebx, stackend
  3037 0000266D 29E3                <2> 	sub ebx, esp
  3038 0000266F E90B000000          <2> 	jmp .stackcalcdone
  3039                              <2> .simplestack:
  3040 00002674 C1E30A              <2> 	shl ebx, 10
  3041 00002677 81C3[52C80500]      <2> 	add ebx, stack1
  3042 0000267D 29E3                <2> 	sub ebx, esp
  3043                              <2> .stackcalcdone:
  3044 0000267F 29DC                <2> 	sub esp, ebx
  3045 00002681 81C4[52C80500]      <2> 	add esp, stack1
  3046 00002687 8B1D[D86D0000]      <2> 	mov ebx, [lastthread]
  3047 0000268D C1E308              <2> 	shl ebx, 8
  3048 00002690 01DC                <2> 	add esp, ebx
  3049 00002692 891D[12270000]      <2> 	mov [.stackend], ebx
  3050                              <2> 
  3051 00002698 89E5                <2> 	mov ebp, esp
  3052 0000269A 8B25[0E270000]      <2> 	mov esp, [.espold]
  3053                              <2> 
  3054 000026A0 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3055 000026A3 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3056                              <2> 
  3057 000026A7 31DB                <2> 	xor ebx, ebx
  3058                              <2> .stackcopy:
  3059 000026A9 668B041C            <2> 	mov ax, [esp + ebx]
  3060 000026AD 6689441D00          <2> 	mov [ebp + ebx], ax
  3061 000026B2 81C302000000        <2> 	add ebx, 2
  3062 000026B8 3B1D[12270000]      <2> 	cmp ebx, [.stackend]
  3063 000026BE 72E9                <2> 	jb .stackcopy
  3064                              <2> 
  3065 000026C0 31C0                <2> 	xor eax, eax
  3066 000026C2 668CC8              <2> 	mov ax, cs
  3067 000026C5 89C2                <2> 	mov edx, eax
  3068 000026C7 8B4C2428            <2> 	mov ecx, [esp + 40]
  3069 000026CB 81C900020000        <2> 	or ecx, 0x200
  3070                              <2> 	
  3071 000026D1 81FE00000000        <2> 	cmp esi, 0
  3072 000026D7 7504                <2> 	jne .nochangestack
  3073 000026D9 8B742420            <2> 	mov esi, [esp + 32]
  3074                              <2> .nochangestack:
  3075 000026DD 89F0                <2> 	mov eax, esi
  3076 000026DF 89EC                <2> 	mov esp, ebp
  3077                              <2> 
  3078 000026E1 89442420            <2> 	mov [esp + 32], eax
  3079 000026E5 89542424            <2> 	mov [esp + 36], edx
  3080 000026E9 894C2428            <2> 	mov [esp + 40], ecx
  3081                              <2> 
  3082 000026ED 8B1D[D86D0000]      <2> 	mov ebx, [lastthread]
  3083 000026F3 89A3[52B00500]      <2> 	mov [threadlist + ebx], esp
  3084 000026F9 81C304000000        <2> 	add ebx, 4
  3085 000026FF 891D[D86D0000]      <2> 	mov [lastthread], ebx
  3086 00002705 8B25[0E270000]      <2> 	mov esp, [.espold]
  3087 0000270B 61                  <2> 	popad
  3088 0000270C FB                  <2> 	sti
  3089 0000270D CF                  <2> 	iret
  3090                              <2> 
  3091 0000270E 00000000            <2> .espold dd 0
  3092 00002712 00000000            <2> .stackend dd 0
  3093                              <1> %endif
  3094                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3095                              <2> gettime:
  3096 00002716 A1[6B020000]        <2> 	mov eax, [timeseconds]
  3097 0000271B 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  3098 00002721 89D9                <2> 	mov ecx, ebx
  3099 00002723 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3100 00002726 E987DBFFFF          <2> 	jmp timerinterrupt
  3101                              <1> 	%include 'source/interrupts/13_settime.asm'
  3102                              <2> settime:
  3103 0000272B A3[6B020000]        <2> 	mov [timeseconds], eax
  3104 00002730 891D[6F020000]      <2> 	mov [timenanoseconds], ebx
  3105 00002736 E977DBFFFF          <2> 	jmp timerinterrupt
  3106                              <2> 	
  3107                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3108                              <2> runcmd:
  3109 0000273B BF[88CE0300]        <2> 	mov edi, buftxt
  3110                              <2> cpcmd:
  3111 00002740 8A06                <2> 	mov al, [esi]
  3112 00002742 8807                <2> 	mov [edi], al
  3113 00002744 46                  <2> 	inc esi
  3114 00002745 47                  <2> 	inc edi
  3115 00002746 3C00                <2> 	cmp al, 0
  3116 00002748 75F6                <2> 	jne cpcmd
  3117 0000274A E8E1070000          <2> 	call run
  3118 0000274F CF                  <2> 	iret
  3119                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3120                              <2> proginfo:
  3121                              <2> 	;mov ebx, variables
  3122 00002750 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  3123 00002756 89F7                <2> 	mov edi, esi
  3124 00002758 31C9                <2> 	xor ecx, ecx
  3125                              <2> getcommandzeroes:
  3126 0000275A 8A07                <2> 	mov al, [edi]
  3127 0000275C 47                  <2> 	inc edi
  3128 0000275D 3C3B                <2> 	cmp al, ';'
  3129 0000275F 740E                <2> 	je nomorezeroes
  3130 00002761 3C00                <2> 	cmp al, 0
  3131 00002763 740A                <2> 	je nomorezeroes
  3132 00002765 3C20                <2> 	cmp al, ' '
  3133 00002767 75F1                <2> 	jne getcommandzeroes
  3134 00002769 41                  <2> 	inc ecx
  3135 0000276A E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3136                              <2> nomorezeroes:
  3137 0000276F 41                  <2> 	inc ecx
  3138 00002770 4F                  <2> 	dec edi
  3139 00002771 8B1D[14BA0300]      <2> 	mov ebx, [uid]
  3140 00002777 8B15[DD6D0000]      <2> 	mov edx, [currentthread]
  3141 0000277D CF                  <2> 	iret
  3142                              <2> 	
  3143                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3144                              <2> hooksig: ;hook code in ESI to signal in AL
  3145 0000277E 3C00                <2> 	cmp al, 0
  3146 00002780 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3147                              <2> ;	xor ebx, ebx
  3148                              <2> ;	mov bl, al
  3149                              <2> ;	shl bl, 2
  3150 00002782 BF[04B40300]        <2> 	mov edi, sigtable
  3151 00002787 8937                <2> 	mov [edi], esi
  3152                              <2> .quit:
  3153 00002789 E924DBFFFF          <2> 	jmp timerinterrupt
  3154                              <1> %ifdef gui.included
  3155                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3156                              <2> guiint:
  3157 0000278E 3CFD                <2> 	cmp al, 253
  3158 00002790 0F8473000000        <2> 	je near .getinfo
  3159 00002796 803D[2C900000]01    <2> 	cmp byte [guion], 1
  3160 0000279D 0F8550000000        <2> 	jne near .nogui
  3161 000027A3 3C00                <2> 	cmp al, 0
  3162 000027A5 0F844D000000        <2> 	je near .clear
  3163 000027AB 3C01                <2> 	cmp al, 1
  3164 000027AD 0F84A8000000        <2> 	je near .putpixel
  3165 000027B3 3C02                <2> 	cmp al, 2
  3166 000027B5 0F84AD000000        <2> 	je near .drawtext
  3167 000027BB 3C03                <2> 	cmp al, 3
  3168 000027BD 0F84C0000000        <2> 	je near .drawline
  3169 000027C3 3C04                <2> 	cmp al, 4
  3170 000027C5 0F84CB000000        <2> 	je near .drawcircle
  3171 000027CB 3C05                <2> 	cmp al, 5
  3172 000027CD 0F84D3000000        <2> 	je near .fillcircle
  3173 000027D3 3C06                <2> 	cmp al, 6
  3174 000027D5 0F84DB000000        <2> 	je near .drawsquare
  3175 000027DB 3C07                <2> 	cmp al, 7
  3176 000027DD 0F84E6000000        <2> 	je near .fillsquare
  3177 000027E3 3CFE                <2> 	cmp al, 254
  3178 000027E5 0F8446000000        <2> 	je near .setinfo
  3179 000027EB 3CFF                <2> 	cmp al, 255
  3180 000027ED 0F8443000000        <2> 	je near .reset
  3181                              <2> .nogui:
  3182 000027F3 E9BADAFFFF          <2> 	jmp timerinterrupt
  3183                              <2> 
  3184                              <2> .clear:		;color in bx
  3185 000027F8 66891D[C5740000]    <2> 	mov [background], bx
  3186                              <2> %ifdef gui.background
  3187                              <2> 	mov ebx, [backgroundimage]
  3188                              <2> 	cmp ebx, 0
  3189                              <2> 	je .clearit
  3190                              <2> 	mov dword [backgroundimage], 0
  3191                              <2> 	mov [.bgi], ebx
  3192                              <2> .clearit:
  3193                              <2> %endif
  3194 000027FF E8754C0000          <2> 	call guiclear
  3195 00002804 E9A9DAFFFF          <2> 	jmp timerinterrupt
  3196                              <2> 	
  3197                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3198 00002809 31DB                <2> 	xor ebx, ebx
  3199 0000280B 31C9                <2> 	xor ecx, ecx
  3200 0000280D 31D2                <2> 	xor edx, edx
  3201 0000280F 381D[2C900000]      <2> 	cmp [guion], bl
  3202 00002815 74DC                <2> 	je .nogui
  3203 00002817 668B1D[C5740000]    <2> 	mov bx, [background]
  3204 0000281E 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  3205 00002825 668B0D[615B0000]    <2> 	mov cx, [resolutiony]
  3206 0000282C E981DAFFFF          <2> 	jmp timerinterrupt
  3207                              <2> 	
  3208                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3209 00002831 E97CDAFFFF          <2> 	jmp timerinterrupt
  3210                              <2> .reset:		;resets the screen to the original settings
  3211 00002836 66BBCF7B            <2> 	mov bx, background.original
  3212 0000283A 66891D[C5740000]    <2> 	mov [background], bx
  3213 00002841 66BBFFFF            <2> 	mov bx, 0xFFFF
  3214 00002845 66891D[977B0000]    <2> 	mov [colorfont2], bx
  3215                              <2> %ifdef gui.background
  3216                              <2> 	mov ebx, [backgroundimage]
  3217                              <2> 	cmp ebx, 0
  3218                              <2> 	jne .resetit
  3219                              <2> 	mov ebx, [.bgi]
  3220                              <2> 	mov [backgroundimage], ebx
  3221                              <2> .resetit:
  3222                              <2> %endif
  3223 0000284C E8284C0000          <2> 	call guiclear
  3224 00002851 E8734C0000          <2> 	call reloadallgraphics
  3225 00002856 E957DAFFFF          <2> 	jmp timerinterrupt
  3226                              <2> 
  3227                              <2> %ifdef gui.background
  3228                              <2> 	.bgi dd 0
  3229                              <2> %endif
  3230                              <2> 	
  3231                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3232 0000285B 6689DE              <2> 	mov si, bx
  3233 0000285E E899620000          <2> 	call putpixel
  3234 00002863 E94ADAFFFF          <2> 	jmp timerinterrupt
  3235                              <2> 
  3236                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3237 00002868 66D1E2              <2> 	shl dx, 1
  3238 0000286B 66891D[977B0000]    <2> 	mov [colorfont2], bx
  3239 00002872 66893D[C5740000]    <2> 	mov [background], di
  3240 00002879 E8AE520000          <2> 	call showstring2
  3241 0000287E E92FDAFFFF          <2> 	jmp timerinterrupt
  3242                              <2> 
  3243                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3244 00002883 6689F0              <2> 	mov ax, si
  3245 00002886 6689DE              <2> 	mov si, bx
  3246 00002889 6689FB              <2> 	mov bx, di
  3247 0000288C E8BC4A0000          <2> 	call drawline
  3248 00002891 E91CDAFFFF          <2> 	jmp timerinterrupt
  3249                              <2> 
  3250                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3251 00002896 6689F0              <2> 	mov ax, si
  3252 00002899 6689DE              <2> 	mov si, bx
  3253 0000289C E835460000          <2> 	call drawcircle
  3254 000028A1 E90CDAFFFF          <2> 	jmp timerinterrupt
  3255                              <2> 
  3256                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3257 000028A6 6689F0              <2> 	mov ax, si
  3258 000028A9 6689DE              <2> 	mov si, bx
  3259 000028AC E837470000          <2> 	call fillcircle
  3260 000028B1 E9FCD9FFFF          <2> 	jmp timerinterrupt
  3261                              <2> 	
  3262                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3263 000028B6 6689F0              <2> 	mov ax, si
  3264 000028B9 6689DE              <2> 	mov si, bx
  3265 000028BC 6689FB              <2> 	mov bx, di
  3266 000028BF E8E44C0000          <2> 	call drawsquare
  3267 000028C4 E9E9D9FFFF          <2> 	jmp timerinterrupt
  3268                              <2> 
  3269                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3270 000028C9 6689F0              <2> 	mov ax, si
  3271 000028CC 6689DE              <2> 	mov si, bx
  3272 000028CF 6689FB              <2> 	mov bx, di
  3273 000028D2 E8494D0000          <2> 	call fillsquare
  3274 000028D7 E9D6D9FFFF          <2> 	jmp timerinterrupt
  3275                              <1> %endif
  3276                              <1> %ifdef sound.included
  3277                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3278                              <2> soundint:
  3279 000028DC E9D1D9FFFF          <2> 	jmp timerinterrupt
  3280                              <1> %endif
  3281                              <1> %ifdef network.included
  3282                              <1> 	%include 'source/interrupts/19_netint.asm'
  3283                              <2> netint:
  3284 000028E1 E9CCD9FFFF          <2> 	jmp timerinterrupt
  3285                              <1> %endif
  3286                              <1> 
  3287                              <1> termcopy:
  3288                              <1> %ifdef io.serial
  3289                              <1> 	ret
  3290                              <1> %else
  3291                              <1> %ifdef terminal.vsync
  3292                              <1> 	mov byte [termcopyneeded], 1
  3293                              <1> 	ret
  3294                              <1> %else
  3295 000028E6 E80A000000          <1> 	call newtermcopy
  3296 000028EB C3                  <1> 	ret
  3297                              <1> %endif
  3298 000028EC 00                  <1> 	termcopyneeded db 0
  3299 000028ED 00000000            <1> 	termcursorpos dd 0
  3300 000028F1 00000000            <1> 	removedvideo dd 0
  3301                              <1> newtermcopy:
  3302 000028F5 60                  <1> 	pusha
  3303 000028F6 BF[9ED50300]        <1> 	mov edi, videobuf
  3304 000028FB 31DB                <1> 	xor ebx, ebx
  3305 000028FD 881D[EC280000]      <1> 	mov [termcopyneeded], bl
  3306 00002903 8B1D[05260000]      <1> 	mov ebx, [videobufpos]
  3307 00002909 01DF                <1> 	add edi, ebx
  3308 0000290B 893D[ED280000]      <1> 	mov [termcursorpos], edi
  3309 00002911 E8E2000000          <1> 	call switchtermcursor
  3310 00002916 803D[2C900000]00    <1> 	cmp byte [guion], 0
  3311 0000291D 0F8420000000        <1> 	je near nowincopy
  3312                              <1> %ifdef gui.included
  3313 00002923 C605[07830000]00    <1> 	mov byte [mouseselecton], 0
  3314 0000292A C605[0B240000]01    <1> 	mov byte [termcopyon], 1
  3315 00002931 803D[0A240000]01    <1> 	cmp byte [termguion], 1
  3316 00002938 0F8453570000        <1> 	je near windowvideocopy
  3317                              <1> %endif
  3318 0000293E E9AE000000          <1> 	jmp nocopytermatall
  3319                              <1> nowincopy:
  3320 00002943 BE00000A00          <1> 	mov esi, 0xA0000
  3321 00002948 A1[4B020000]        <1> 	mov eax, [basecache]
  3322 0000294D C1E004              <1> 	shl eax, 4
  3323 00002950 29C6                <1> 	sub esi, eax
  3324 00002952 BF[9ED50300]        <1> 	mov edi, videobuf
  3325 00002957 31C9                <1> 	xor ecx, ecx
  3326 00002959 668B0D[0B260000]    <1> 	mov cx, [charxy]
  3327                              <1> nowincopy2:
  3328 00002960 8B07                <1> 	mov eax, [edi]
  3329 00002962 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3330 00002968 8B1F                <1> 	mov ebx, [edi]
  3331 0000296A 8907                <1> 	mov [edi], eax
  3332 0000296C 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3333 00002972 81C702000000        <1> 	add edi, 2
  3334 00002978 39D8                <1> 	cmp eax, ebx
  3335 0000297A 744B                <1> 	je nopresentwinfont
  3336 0000297C 81EF02000000        <1> 	sub edi, 2
  3337 00002982 BD[86920000]        <1> 	mov ebp, fonts
  3338 00002987 31C0                <1> 	xor eax, eax
  3339 00002989 668B07              <1> 	mov ax, [edi]
  3340 0000298C C1E004              <1> 	shl eax, 4
  3341 0000298F 01C5                <1> 	add ebp, eax
  3342 00002991 81C702000000        <1> 	add edi, 2
  3343 00002997 668B1F              <1> 	mov bx, [edi]
  3344 0000299A 31D2                <1> 	xor edx, edx
  3345 0000299C 8A15[0B260000]      <1> 	mov dl, [charxy]
  3346 000029A2 C1C110              <1> 	rol ecx, 16
  3347 000029A5 B110                <1> 	mov cl, 16
  3348                              <1> nowinfont:
  3349 000029A7 8A4500              <1> 	mov al, [ebp]
  3350 000029AA D0C8                <1> 	ror al, 1
  3351 000029AC 80FB80              <1> 	cmp bl, 0x80
  3352 000029AF 7202                <1> 	jb notnotfont
  3353 000029B1 F6D0                <1> 	not al
  3354                              <1> notnotfont:
  3355 000029B3 8806                <1> 	mov [esi], al
  3356 000029B5 01D6                <1> 	add esi, edx
  3357 000029B7 45                  <1> 	inc ebp
  3358 000029B8 FEC9                <1> 	dec cl
  3359 000029BA 80F900              <1> 	cmp cl, 0
  3360 000029BD 75E8                <1> 	jne nowinfont
  3361 000029BF C1E204              <1> 	shl edx, 4
  3362 000029C2 29D6                <1> 	sub esi, edx
  3363 000029C4 C1C110              <1> 	rol ecx, 16
  3364                              <1> nopresentwinfont:
  3365 000029C7 81C702000000        <1> 	add edi, 2
  3366 000029CD 46                  <1> 	inc esi
  3367 000029CE FEC9                <1> 	dec cl
  3368 000029D0 80F900              <1> 	cmp cl, 0
  3369 000029D3 758B                <1> 	jne nowincopy2
  3370 000029D5 8A0D[0B260000]      <1> 	mov cl, [charxy]
  3371 000029DB 31D2                <1> 	xor edx, edx
  3372 000029DD 88CA                <1> 	mov dl, cl
  3373 000029DF 29D6                <1> 	sub esi, edx
  3374 000029E1 C1E204              <1> 	shl edx, 4
  3375 000029E4 01D6                <1> 	add esi, edx
  3376 000029E6 FECD                <1> 	dec ch
  3377 000029E8 80FD00              <1> 	cmp ch, 0
  3378 000029EB 0F856FFFFFFF        <1> 	jne nowincopy2
  3379                              <1> nocopytermatall:
  3380 000029F1 E802000000          <1> 	call switchtermcursor
  3381 000029F6 61                  <1> 	popa
  3382 000029F7 C3                  <1> 	ret
  3383                              <1> 	
  3384                              <1> switchtermcursor:
  3385 000029F8 8B3D[ED280000]      <1> 	mov edi, [termcursorpos]
  3386 000029FE 668B4702            <1> 	mov ax, [edi + 2]
  3387 00002A02 668B1F              <1> 	mov bx, [edi]
  3388 00002A05 663D8000            <1> 	cmp ax, 0x80
  3389 00002A09 7209                <1> 	jb movlargecursorterm
  3390 00002A0B 66B80700            <1> 	mov ax, 7
  3391 00002A0F E904000000          <1> 	jmp movedcursorterm
  3392                              <1> movlargecursorterm:
  3393 00002A14 66B8F000            <1> 	mov ax, 0xF0
  3394                              <1> movedcursorterm:
  3395 00002A18 66894702            <1> 	mov [edi + 2], ax
  3396 00002A1C 6681FB0000          <1> 	cmp bx, 0
  3397 00002A21 7507                <1> 	jne fixednocursorterm
  3398 00002A23 66BB2000            <1> 	mov bx, ' '
  3399 00002A27 66891F              <1> 	mov [edi], bx
  3400                              <1> fixednocursorterm:
  3401 00002A2A C3                  <1> 	ret
  3402                              <1> %endif
  3403                                      %include "source/dosints.asm"
  3404                              <1> int20h:
  3405 00002A2B 66B8004C            <1> mov ax, 0x4C00
  3406                              <1> int21h:
  3407                              <1> dostosolleros:
  3408 00002A2F 6650                <1> 	push ax
  3409 00002A31 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3410 00002A35 8ED8                <1> 	mov ds, ax
  3411 00002A37 8EC0                <1> 	mov es, ax
  3412 00002A39 8EE0                <1> 	mov fs, ax
  3413 00002A3B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3414 00002A3F 8EE8                <1> 	mov gs, ax
  3415 00002A41 6658                <1> 	pop ax
  3416 00002A43 9C                  <1> 	pushf
  3417 00002A44 60                  <1> 	pusha
  3418 00002A45 80FC01              <1> 	cmp ah, 1
  3419 00002A48 0F8449000000        <1> 	je near dosgchar
  3420 00002A4E 80FC02              <1> 	cmp ah, 2
  3421 00002A51 0F844A000000        <1> 	je near doswchar
  3422 00002A57 80FC09              <1> 	cmp ah, 9
  3423 00002A5A 0F8451000000        <1> 	je near dosprintstr
  3424 00002A60 80FC0A              <1> 	cmp ah, 0xA
  3425 00002A63 0F8463000000        <1> 	je near dosgetstr
  3426 00002A69 80FC2B              <1> 	cmp ah, 0x2B
  3427 00002A6C 0F84A2000000        <1> 	je near dosgetdate
  3428 00002A72 80FC2C              <1> 	cmp ah, 0x2C
  3429 00002A75 0F84BC000000        <1> 	je near dosgettime
  3430 00002A7B 80FC4C              <1> 	cmp ah, 0x4C
  3431 00002A7E 0F84D1000000        <1> 	je near dosexit
  3432                              <1> backtodos:
  3433 00002A84 61                  <1> 	popa
  3434 00002A85 9D                  <1> 	popf
  3435 00002A86 6650                <1> 	push ax
  3436 00002A88 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3437 00002A8C 8ED8                <1> 	mov ds, ax
  3438 00002A8E 8EC0                <1> 	mov es, ax
  3439 00002A90 8EE0                <1> 	mov fs, ax
  3440 00002A92 8EE8                <1> 	mov gs, ax
  3441 00002A94 6658                <1> 	pop ax
  3442 00002A96 CF                  <1> 	iret
  3443                              <1> 
  3444                              <1> dosgchar:
  3445 00002A97 E8DDF8FFFF          <1> 	call getchar
  3446 00002A9C E9E3FFFFFF          <1> 	jmp backtodos
  3447                              <1> 	
  3448                              <1> doswchar:
  3449 00002AA1 88D0                <1> 	mov al, dl
  3450 00002AA3 30E4                <1> 	xor ah, ah
  3451 00002AA5 B307                <1> 	mov bl, 7
  3452 00002AA7 E849F9FFFF          <1> 	call prcharint
  3453 00002AAC E9D3FFFFFF          <1> 	jmp backtodos
  3454                              <1> 	
  3455                              <1> dosprintstr:
  3456 00002AB1 31F6                <1> 	xor esi, esi
  3457 00002AB3 6689D6              <1> 	mov si, dx
  3458 00002AB6 81C600004000        <1> 	add esi, dosprogloc
  3459 00002ABC 66B82400            <1> 	mov ax, "$"
  3460 00002AC0 B307                <1> 	mov bl, 7
  3461 00002AC2 E8A3F2FFFF          <1> 	call printint
  3462 00002AC7 E9B8FFFFFF          <1> 	jmp backtodos
  3463                              <1> 	
  3464                              <1> dosgetstr:
  3465 00002ACC 31F6                <1> 	xor esi, esi
  3466 00002ACE 6689D6              <1> 	mov si, dx
  3467 00002AD1 81C600004000        <1> 	add esi, dosprogloc
  3468 00002AD7 B900000000          <1> 	mov ecx, 0
  3469 00002ADC 8A0E                <1> 	mov cl, [esi]
  3470 00002ADE 81C602000000        <1> 	add esi, 2
  3471 00002AE4 89F7                <1> 	mov edi, esi
  3472 00002AE6 8935[102B0000]      <1> 	mov [stringstart], esi
  3473 00002AEC 01CF                <1> 	add edi, ecx
  3474 00002AEE B00A                <1> 	mov al, 10
  3475 00002AF0 B307                <1> 	mov bl, 7
  3476 00002AF2 E8B3F3FFFF          <1> 	call rdprintdos
  3477 00002AF7 89F1                <1> 	mov ecx, esi
  3478 00002AF9 2B0D[102B0000]      <1> 	sub ecx, [stringstart]
  3479 00002AFF 8B35[102B0000]      <1> 	mov esi, [stringstart]
  3480 00002B05 884EFF              <1> 	mov [esi - 1], cl
  3481 00002B08 884EFE              <1> 	mov [esi - 2], cl
  3482 00002B0B E974FFFFFF          <1> 	jmp backtodos
  3483 00002B10 00000000            <1> stringstart dd 0
  3484                              <1> 
  3485                              <1> dosgetdate:
  3486 00002B14 E80C170000          <1> 	call time
  3487 00002B19 8A0D[3C450000]      <1> 	mov cl, [RTCtimeYear]
  3488 00002B1F B500                <1> 	mov ch, 0
  3489 00002B21 6681C1D007          <1> 	add cx, 2000
  3490 00002B26 8A35[3B450000]      <1> 	mov dh, [RTCtimeMonth]
  3491 00002B2C 8A15[3A450000]      <1> 	mov dl, [RTCtimeDay]
  3492 00002B32 E94DFFFFFF          <1> 	jmp backtodos
  3493                              <1> 
  3494                              <1> dosgettime:
  3495 00002B37 E8E9160000          <1> 	call time
  3496 00002B3C 8A2D[39450000]      <1> 	mov ch, [RTCtimeHour]
  3497 00002B42 8A0D[38450000]      <1> 	mov cl, [RTCtimeMinute]
  3498 00002B48 8A35[37450000]      <1> 	mov dh, [RTCtimeSecond]
  3499 00002B4E B200                <1> 	mov dl, 0
  3500 00002B50 E92FFFFFFF          <1> 	jmp backtodos
  3501                              <1> 	
  3502                              <1> dosexit:
  3503 00002B55 BE[07900000]        <1> 	mov esi, line
  3504 00002B5A E804F2FFFF          <1> 	call print
  3505 00002B5F 61                  <1> 	popa
  3506 00002B60 9D                  <1> 	popf
  3507 00002B61 8B25[08B80300]      <1> 	mov esp, [previousstack]
  3508 00002B67 31DB                <1> 	xor ebx, ebx
  3509 00002B69 88C3                <1> 	mov bl, al
  3510 00002B6B 80FB00              <1> 	cmp bl, 0
  3511 00002B6E 0F8575F1FFFF        <1> 	jne near exitprog.error
  3512 00002B74 C3                  <1> 	ret
  3513                                      %include "source/shush.asm"
  3514                              <1> os:
  3515                              <1> setdefenv:
  3516 00002B75 C605[14B80300]2F    <1> 	mov byte [currentfolder], '/'
  3517 00002B7C C705[10B80300]0100- <1> 	mov dword [currentfolderloc], 1
  3518 00002B84 0000                <1>
  3519 00002B86 E887F2FFFF          <1> 	call clear
  3520                              <1> 	
  3521                              <1> bootfilecheck:
  3522 00002B8B 803D[18BA0300]01    <1> 	cmp byte [ranboot], 1
  3523 00002B92 0F8421000000        <1> 	je near nobootfile
  3524                              <1> 	%ifdef hardware.automatic
  3525 00002B98 E8253C0000          <1> 		call initializelater ;Initialize components that have debug messages
  3526                              <1> 	%endif
  3527                              <1> 	%ifdef disk.none
  3528                              <1> 	%else
  3529 00002B9D BF[C68F0000]        <1> 		mov edi, bootfilename
  3530 00002BA2 BE00004000          <1> 		mov esi, 0x400000
  3531 00002BA7 E86D400000          <1> 		call loadfile
  3532 00002BAC 81FA00000000        <1> 		cmp edx, 0
  3533 00002BB2 7505                <1> 		jne nobootfile
  3534 00002BB4 E84A0E0000          <1> 		call progbatchfound
  3535                              <1> 	%endif
  3536                              <1> nobootfile:	
  3537 00002BB9 C605[18BA0300]01    <1> 	mov byte [ranboot], 1
  3538                              <1> 
  3539 00002BC0 BE[02000000]        <1> 	mov esi, signature
  3540                              <1> .sigcopyloop:	;this prevents an odd error
  3541 00002BC5 658A06              <1> 	mov al, [gs:esi]
  3542 00002BC8 8806                <1> 	mov [esi], al
  3543 00002BCA 46                  <1> 	inc esi
  3544 00002BCB 81FE[10000000]      <1> 	cmp esi, signatureend
  3545 00002BD1 72F2                <1> 	jb .sigcopyloop
  3546                              <1> 	
  3547 00002BD3 BE[02000000]        <1> 	mov esi, signature
  3548 00002BD8 E886F1FFFF          <1> 	call print
  3549 00002BDD 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3550 00002BE3 E828070000          <1> 	call showdec
  3551 00002BE8 E871F1FFFF          <1> 	call printline
  3552 00002BED BE[E38F0000]        <1> 	mov esi, userask
  3553 00002BF2 E86CF1FFFF          <1> 	call print
  3554                              <1> 
  3555                              <1> usercheck:
  3556 00002BF7 BE[88CE0300]        <1> 	mov esi, buftxt
  3557 00002BFC BF[88D20300]        <1> 	mov edi, buftxtend
  3558 00002C01 B00A                <1> 	mov al, 10
  3559 00002C03 E88EF2FFFF          <1> 	call rdprint
  3560 00002C08 56                  <1> 	push esi
  3561 00002C09 BE[ED8F0000]        <1> 	mov esi, pwdask
  3562 00002C0E E850F1FFFF          <1> 	call print
  3563 00002C13 5E                  <1> 	pop esi
  3564 00002C14 46                  <1> 	inc esi
  3565 00002C15 8935[162D0000]      <1> 	mov [esipass], esi
  3566                              <1> passcheck:
  3567 00002C1B E859F7FFFF          <1> 	call getchar
  3568 00002C20 3C0A                <1> 	cmp al, 10
  3569 00002C22 0F843E000000        <1> 	je near gotpass
  3570 00002C28 3C08                <1> 	cmp al, 8
  3571 00002C2A 0F8415000000        <1> 	je near backpass
  3572 00002C30 8806                <1> 	mov [esi], al
  3573 00002C32 46                  <1> 	inc esi
  3574 00002C33 30E4                <1> 	xor ah, ah
  3575 00002C35 B02A                <1> 	mov al, "*"
  3576 00002C37 E8B9F7FFFF          <1> 	call prcharint
  3577 00002C3C E9DAFFFFFF          <1> 	jmp passcheck
  3578 00002C41 08200800            <1> backcursor2 db 8," ",8,0
  3579                              <1> backpass:
  3580 00002C45 3B35[162D0000]      <1> 	cmp esi, [esipass]
  3581 00002C4B 0F84CAFFFFFF        <1> 	je near passcheck
  3582 00002C51 4E                  <1> 	dec esi
  3583 00002C52 C60600              <1> 	mov byte [esi], 0
  3584 00002C55 56                  <1> 	push esi
  3585 00002C56 BE[412C0000]        <1> 	mov esi, backcursor2
  3586 00002C5B E803F1FFFF          <1> 	call print
  3587 00002C60 5E                  <1> 	pop esi
  3588 00002C61 E9B5FFFFFF          <1> 	jmp passcheck
  3589                              <1> gotpass:
  3590 00002C66 B00A                <1> 	mov al, 10
  3591 00002C68 E888F7FFFF          <1> 	call prcharint
  3592 00002C6D 30C0                <1> 	xor al, al
  3593 00002C6F 31C9                <1> 	xor ecx, ecx
  3594 00002C71 8806                <1> 	mov [esi], al
  3595 00002C73 BB[09900000]        <1> 	mov ebx, userlst
  3596                              <1> userfind:
  3597 00002C78 BE[88CE0300]        <1> 	mov esi, buftxt
  3598 00002C7D 8A06                <1> 	mov al, [esi]
  3599 00002C7F 3C00                <1> 	cmp al, 0
  3600 00002C81 0F84EEFEFFFF        <1> 	je near os
  3601 00002C87 891D[1A2D0000]      <1> 	mov [usercache], ebx
  3602 00002C8D E87E030000          <1> 	call tester
  3603 00002C92 3C01                <1> 	cmp al, 1
  3604 00002C94 7419                <1> 	je pwdtest
  3605 00002C96 41                  <1> 	inc ecx
  3606                              <1> nxtuser:
  3607 00002C97 8A03                <1> 	mov al, [ebx]
  3608 00002C99 43                  <1> 	inc ebx
  3609 00002C9A 3C00                <1> 	cmp al, 0
  3610 00002C9C 75F9                <1> 	jne nxtuser
  3611 00002C9E 81FB[2C900000]      <1> 	cmp ebx, userlstend
  3612 00002CA4 0F83CBFEFFFF        <1> 	jae near os
  3613 00002CAA E9C9FFFFFF          <1> 	jmp userfind
  3614                              <1> pwdtest:
  3615 00002CAF 46                  <1> 	inc esi
  3616 00002CB0 43                  <1> 	inc ebx
  3617 00002CB1 E85A030000          <1> 	call tester
  3618 00002CB6 3C01                <1> 	cmp al, 1
  3619 00002CB8 7405                <1> 	je pwdrgt
  3620 00002CBA E9D8FFFFFF          <1> 	jmp nxtuser
  3621                              <1> pwdrgt:
  3622 00002CBF D1E9                <1> 	shr ecx, 1
  3623 00002CC1 890D[14BA0300]      <1> 	mov [uid], ecx
  3624 00002CC7 E846F1FFFF          <1> 	call clear
  3625 00002CCC 31C9                <1> 	xor ecx, ecx
  3626 00002CCE 41                  <1> 	inc ecx
  3627 00002CCF 890D[32800500]      <1> 	mov [commandbufpos], ecx
  3628                              <1> returnfromexp:
  3629 00002CD5 66B90002            <1> 	mov cx, 200h
  3630 00002CD9 BE[88CE0300]        <1> 	mov esi, buftxt
  3631 00002CDE 8935[0C300000]      <1> 	mov [currentcommandloc], esi
  3632 00002CE4 E825000000          <1> 	call bufclr
  3633                              <1> clearolddata:
  3634 00002CE9 31C0                <1> 	xor eax, eax
  3635 00002CEB A2[19BA0300]        <1> 	mov [IFON], al
  3636 00002CF0 A2[1ABA0300]        <1> 	mov [IFTRUE], al
  3637 00002CF5 A2[82BA0300]        <1> 	mov [BATCHISON], al
  3638 00002CFA A3[7EBA0300]        <1> 	mov [BATCHPOS], eax
  3639 00002CFF A2[83BA0300]        <1> 	mov [LOOPON], al
  3640 00002D04 A3[84BA0300]        <1> 	mov [LOOPPOS], eax
  3641 00002D09 E939000000          <1> 	jmp nwcmd
  3642                              <1> bufclr:	
  3643 00002D0E 30C0                <1> 	xor al, al
  3644 00002D10 8806                <1> 	mov [esi], al
  3645 00002D12 46                  <1> 	inc esi
  3646 00002D13 E2F9                <1> 	loop bufclr
  3647 00002D15 C3                  <1> 	ret
  3648                              <1> 
  3649 00002D16 00000000            <1> esipass dd 0
  3650 00002D1A [09900000]          <1> usercache dd userlst
  3651                              <1> 	
  3652                              <1> buftxtclear:
  3653 00002D1E 30C0                <1> 	xor al, al
  3654 00002D20 BE[88CE0300]        <1> 	mov esi, buftxt
  3655 00002D25 81FE[88D20300]      <1> clearbuftxt: cmp esi, buf2
  3656 00002D2B 7314                <1> 	jae retbufclr
  3657 00002D2D 8806                <1> 	mov [esi], al
  3658 00002D2F 46                  <1> 	inc esi
  3659 00002D30 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3660                              <1> 
  3661 00002D35 39DE                <1> clearitbuf: cmp esi, ebx
  3662 00002D37 7308                <1> 	jae retbufclr
  3663 00002D39 8806                <1> 	mov [esi], al
  3664 00002D3B 46                  <1> 	inc esi
  3665 00002D3C E9F4FFFFFF          <1> 	jmp clearitbuf
  3666 00002D41 C3                  <1> retbufclr: ret
  3667                              <1> 
  3668 00002D42 E900000000          <1> full:	jmp nwcmd
  3669                              <1> 
  3670                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3671                              <1> nwcmd:
  3672 00002D47 FB                  <1> 	sti
  3673 00002D48 31C0                <1> 	xor eax, eax
  3674 00002D4A 3905[282F0000]      <1> 	cmp [nextcommandloc], eax
  3675 00002D50 7416                <1> 	je nomultiplecommand
  3676 00002D52 8B35[282F0000]      <1> 	mov esi, [nextcommandloc]
  3677 00002D58 8935[2C2F0000]      <1> 	mov [thiscommandloc], esi
  3678 00002D5E E8D2010000          <1> 	call fixvariables
  3679 00002D63 E9DFFFFFFF          <1> 	jmp nwcmd
  3680                              <1> nomultiplecommand:
  3681 00002D68 A3[2C2F0000]        <1> 	mov [thiscommandloc], eax
  3682 00002D6D 3805[DC6D0000]      <1> 	cmp [threadson], al
  3683 00002D73 7405                <1> 	je noclinwcmd
  3684 00002D75 A2[DC6D0000]        <1> 	mov [threadson], al
  3685                              <1> noclinwcmd:
  3686 00002D7A B001                <1> 	mov al, 1
  3687 00002D7C 3805[82BA0300]      <1> 	cmp [BATCHISON], al
  3688 00002D82 7501                <1> 	jne cancel
  3689 00002D84 C3                  <1> 	ret
  3690 00002D85 30C0                <1> cancel:	xor al, al
  3691 00002D87 A2[19BA0300]        <1> 	mov [IFON], al
  3692 00002D8C A2[82BA0300]        <1> 	mov [BATCHISON], al
  3693 00002D91 B05B                <1> 	mov al, '['
  3694 00002D93 66BB0700            <1> 	mov bx, 7
  3695 00002D97 E870F6FFFF          <1> 	call prcharq
  3696 00002D9C 8B35[1A2D0000]      <1> 	mov esi, [usercache]
  3697 00002DA2 E898EFFFFF          <1> 	call printquiet
  3698 00002DA7 BE[F78F0000]        <1> 	mov esi, computer
  3699 00002DAC E88EEFFFFF          <1> 	call printquiet
  3700 00002DB1 BE[14B80300]        <1> 	mov esi, currentfolder
  3701 00002DB6 0335[0CB80300]      <1> 	add esi, [lastfolderloc]
  3702 00002DBC E87EEFFFFF          <1> 	call printquiet
  3703 00002DC1 BE[02900000]        <1> 	mov esi, endprompt
  3704 00002DC6 E898EFFFFF          <1> 	call print
  3705 00002DCB E84EFFFFFF          <1> 	call buftxtclear
  3706 00002DD0 BE[88CE0300]        <1> 	mov esi, buftxt
  3707 00002DD5 C605[62230000]01    <1> 	mov byte [commandedit], 1
  3708 00002DDC B00A                <1> 	mov al, 10
  3709 00002DDE 66BB0700            <1> 	mov bx, 7
  3710 00002DE2 BF[88D20300]        <1> 	mov edi, buftxtend
  3711 00002DE7 E8AAF0FFFF          <1> 	call rdprint
  3712 00002DEC C605[62230000]00    <1> 	mov byte [commandedit], 0
  3713 00002DF3 803D[88CE0300]00    <1> 	cmp byte [buftxt], 0
  3714 00002DFA 0F8447FFFFFF        <1> 	je near nwcmd
  3715 00002E00 8B35[32800500]      <1> gotcmd:	mov esi, [commandbufpos]
  3716 00002E06 8935[2E800500]      <1> 	mov [lastcommandpos], esi
  3717 00002E0C FF05[3A800500]      <1> 	inc dword [commandsentered]
  3718 00002E12 BF[88CE0300]        <1> 	mov edi, buftxt
  3719 00002E17 81C6[3E800500]      <1> 	add esi, commandbuf
  3720 00002E1D 81FE[3E900500]      <1> 	cmp esi, commandbufend
  3721 00002E23 7605                <1> 	jbe copycommand
  3722 00002E25 BE[3E800500]        <1> 	mov esi, commandbuf
  3723                              <1> copycommand:
  3724 00002E2A 8A07                <1> 	mov al, [edi]
  3725 00002E2C 8806                <1> 	mov [esi], al
  3726 00002E2E 47                  <1> 	inc edi
  3727 00002E2F 46                  <1> 	inc esi
  3728 00002E30 3C00                <1> 	cmp al, 0
  3729 00002E32 7412                <1> 	je donecopy
  3730 00002E34 81FE[3E900500]      <1> 	cmp esi, commandbufend
  3731 00002E3A 76EE                <1> 	jbe copycommand
  3732 00002E3C BE[3E800500]        <1> 	mov esi, commandbuf
  3733 00002E41 E9E4FFFFFF          <1> 	jmp copycommand
  3734                              <1> donecopy:
  3735 00002E46 81EE[3E800500]      <1> 	sub esi, commandbuf
  3736 00002E4C 8935[32800500]      <1> 	mov [commandbufpos], esi
  3737 00002E52 E8D9000000          <1> 	call run
  3738 00002E57 E9EBFEFFFF          <1> 	jmp nwcmd
  3739                              <1> 
  3740 00002E5C E8BDFEFFFF          <1> input:	call buftxtclear
  3741 00002E61 BE[88CE0300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3742 00002E66 BF[88D20300]        <1> 	mov edi, buftxtend
  3743 00002E6B B00A                <1> stdin:	mov al, 10
  3744 00002E6D B307                <1> 	mov bl, 7
  3745 00002E6F E822F0FFFF          <1> 	call rdprint
  3746 00002E74 C3                  <1> 	ret
  3747                              <1> 
  3748                              <1> replacevariable:
  3749 00002E75 8A4601              <1> 	mov al, [esi + 1]
  3750 00002E78 C64601FF            <1> 	mov byte [esi + 1], 255
  3751 00002E7C 3C24                <1> 	cmp al, "$"
  3752 00002E7E 0F84B1000000        <1> 	je near fixvariables
  3753 00002E84 884601              <1> 	mov [esi + 1], al
  3754 00002E87 56                  <1> 	push esi
  3755 00002E88 81EE[88CE0300]      <1> 	sub esi, buftxt
  3756 00002E8E 89F7                <1> 	mov edi, esi
  3757 00002E90 81C6[88CE0300]      <1> 	add esi, buftxt
  3758 00002E96 47                  <1> 	inc edi
  3759 00002E97 BB[88BA0300]        <1> 	mov ebx, variables
  3760 00002E9C E86F1A0000          <1> 	call nxtvrech
  3761 00002EA1 89F7                <1> 	mov edi, esi
  3762 00002EA3 31DB                <1> 	xor ebx, ebx
  3763 00002EA5 4E                  <1> 	dec esi
  3764                              <1> findvarname:
  3765 00002EA6 4E                  <1> 	dec esi
  3766 00002EA7 8A06                <1> 	mov al, [esi]
  3767 00002EA9 43                  <1> 	inc ebx
  3768 00002EAA 3C04                <1> 	cmp al, 4
  3769 00002EAC 75F8                <1> 	jne findvarname
  3770 00002EAE 5E                  <1> 	pop esi
  3771                              <1> replacevarloop:
  3772 00002EAF 8A07                <1> 	mov al, [edi]
  3773 00002EB1 3C00                <1> 	cmp al, 0
  3774 00002EB3 0F8416000000        <1> 	je near compressbuftxt
  3775 00002EB9 81FB00000000        <1> 	cmp ebx, 0
  3776 00002EBF 0F8419000000        <1> 	je near expandbuftxt
  3777 00002EC5 8806                <1> 	mov [esi], al
  3778 00002EC7 4B                  <1> 	dec ebx
  3779 00002EC8 46                  <1> 	inc esi
  3780 00002EC9 47                  <1> 	inc edi
  3781 00002ECA E9E0FFFFFF          <1> 	jmp replacevarloop
  3782                              <1> compressbuftxt:
  3783 00002ECF 8A041E              <1> 	mov al, [esi + ebx]
  3784 00002ED2 8806                <1> 	mov [esi], al
  3785 00002ED4 46                  <1> 	inc esi
  3786 00002ED5 3C00                <1> 	cmp al, 0
  3787 00002ED7 75F6                <1> 	jne compressbuftxt
  3788 00002ED9 E957000000          <1> 	jmp fixvariables
  3789                              <1> expandbuftxt:
  3790 00002EDE 89F1                <1> 	mov ecx, esi
  3791 00002EE0 8A26                <1> 	mov ah, [esi]
  3792                              <1> expandbuftxtlp:
  3793 00002EE2 8A1E                <1> 	mov bl, [esi]
  3794 00002EE4 46                  <1> 	inc esi
  3795 00002EE5 8A3E                <1> 	mov bh, [esi]
  3796 00002EE7 8826                <1> 	mov [esi], ah
  3797 00002EE9 88FC                <1> 	mov ah, bh
  3798 00002EEB 80FB00              <1> 	cmp bl, 0
  3799 00002EEE 75F2                <1> 	jne expandbuftxtlp
  3800 00002EF0 89CE                <1> 	mov esi, ecx
  3801 00002EF2 8806                <1> 	mov [esi], al
  3802 00002EF4 47                  <1> 	inc edi
  3803 00002EF5 8A07                <1> 	mov al, [edi]
  3804 00002EF7 3C00                <1> 	cmp al, 0
  3805 00002EF9 0F8436000000        <1> 	je near fixvariables
  3806 00002EFF 46                  <1> 	inc esi
  3807 00002F00 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3808                              <1> multipleprogline:
  3809 00002F05 30E4                <1> 	xor ah, ah
  3810 00002F07 8826                <1> 	mov [esi], ah
  3811 00002F09 46                  <1> 	inc esi
  3812 00002F0A 8935[282F0000]      <1> 	mov [nextcommandloc], esi
  3813 00002F10 E93E000000          <1> 	jmp donefixvariables
  3814                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3815 00002F15 46                  <1> 	inc esi
  3816 00002F16 8A06                <1> 	mov al, [esi]
  3817 00002F18 C606FF              <1> 	mov byte [esi], 255
  3818 00002F1B 3C23                <1> 	cmp al, '#'
  3819 00002F1D 7416                <1> 	je fixvariables
  3820 00002F1F 4E                  <1> 	dec esi
  3821 00002F20 C60600              <1> 	mov byte [esi], 0
  3822 00002F23 E90D000000          <1> 	jmp fixvariables
  3823                              <1> 	
  3824 00002F28 00000000            <1> nextcommandloc dd 0
  3825 00002F2C 00000000            <1> thiscommandloc dd 0	
  3826                              <1> run:
  3827 00002F30 BE[88CE0300]        <1> 	mov esi, buftxt
  3828                              <1> fixvariables:
  3829 00002F35 46                  <1> 	inc esi
  3830 00002F36 8A06                <1> 	mov al, [esi]
  3831 00002F38 3C23                <1> 	cmp al, '#'	;inline comment
  3832 00002F3A 74D9                <1> 	je inlinecomment
  3833 00002F3C 3C24                <1> 	cmp al, '$' ;variable
  3834 00002F3E 0F8431FFFFFF        <1> 	je near replacevariable
  3835 00002F44 3C3B                <1> 	cmp al, ';' ;program list
  3836 00002F46 74BD                <1> 	je multipleprogline
  3837 00002F48 3C00                <1> 	cmp al, 0
  3838 00002F4A 75E9                <1> 	jne fixvariables
  3839 00002F4C 31C0                <1> 	xor eax, eax
  3840 00002F4E A3[282F0000]        <1> 	mov [nextcommandloc], eax
  3841                              <1> donefixvariables:
  3842 00002F53 803D[52350000]00    <1> 	cmp byte [indexdone], 0
  3843 00002F5A 7505                <1> 	jne progtest
  3844 00002F5C E853050000          <1> 	call indexfiles
  3845                              <1> progtest:
  3846 00002F61 31C0                <1> 	xor eax, eax
  3847 00002F63 BB[08B40300]        <1> 	mov ebx, fileindex
  3848 00002F68 668B03              <1> prgnxt:	mov ax, [ebx]
  3849 00002F6B B1FF                <1> 	mov cl, 255
  3850 00002F6D B52C                <1> 	mov ch, 44
  3851 00002F6F 6639C8              <1> 	cmp ax, cx
  3852 00002F72 740E                <1> 	je fndprg
  3853 00002F74 43                  <1> 	inc ebx
  3854 00002F75 81FB[08B80300]      <1> 	cmp ebx, fileindexend
  3855 00002F7B 7363                <1> 	jae prgnf
  3856 00002F7D E9E6FFFFFF          <1> 	jmp prgnxt
  3857 00002F82 81C302000000        <1> fndprg: add ebx, 2
  3858 00002F88 31C9                <1> 	xor ecx, ecx
  3859 00002F8A BE[88CE0300]        <1> 	mov esi, buftxt
  3860 00002F8F 390D[2C2F0000]      <1> 	cmp [thiscommandloc], ecx
  3861 00002F95 7406                <1> 	je noprgtstmultiple
  3862 00002F97 8B35[2C2F0000]      <1> 	mov esi, [thiscommandloc]
  3863                              <1> noprgtstmultiple:
  3864 00002F9D E8AF000000          <1> 	call cndtest
  3865 00002FA2 3C01                <1> 	cmp al, 1
  3866 00002FA4 7305                <1> 	jae prggood
  3867 00002FA6 E9BDFFFFFF          <1> 	jmp prgnxt
  3868 00002FAB 81FB[08B80300]      <1> prggood: cmp ebx, fileindexend
  3869 00002FB1 7358                <1> 	jae prgdn
  3870 00002FB3 31C0                <1> 	xor eax, eax
  3871 00002FB5 BE[88CE0300]        <1> 	mov esi, buftxt
  3872 00002FBA 3905[2C2F0000]      <1> 	cmp [thiscommandloc], eax
  3873 00002FC0 7406                <1> 	je noprggoodmul
  3874 00002FC2 8B35[2C2F0000]      <1> 	mov esi, [thiscommandloc]
  3875                              <1> noprggoodmul:
  3876 00002FC8 8935[0C300000]      <1> 	mov [currentcommandloc], esi
  3877 00002FCE 81C303000000        <1> 	add ebx, 3
  3878 00002FD4 8B3B                <1> 	mov edi, [ebx]
  3879 00002FD6 C605[DC6D0000]02    <1> 	mov byte [threadson], 2
  3880 00002FDD FFD7                <1> 	call edi
  3881 00002FDF C3                  <1> 	ret
  3882                              <1> prgnf:	
  3883 00002FE0 8B35[0C300000]      <1> 	mov esi, [currentcommandloc]
  3884 00002FE6 8A06                <1> 	mov al, [esi]
  3885 00002FE8 3C00                <1> 	cmp al, 0
  3886 00002FEA 741F                <1> 	je prgdn
  3887 00002FEC BE[CE8F0000]        <1> 	mov esi, notfound1
  3888 00002FF1 E86DEDFFFF          <1> 	call print
  3889 00002FF6 8B35[0C300000]      <1> 	mov esi, [currentcommandloc]
  3890 00002FFC E862EDFFFF          <1> 	call print
  3891 00003001 BE[D68F0000]        <1> 	mov esi, notfound2
  3892 00003006 E858EDFFFF          <1> 	call print
  3893 0000300B C3                  <1> prgdn:	ret
  3894                              <1> 
  3895 0000300C 00000000            <1> currentcommandloc dd 0
  3896                              <1> 
  3897                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3898 00003010 6631C0              <1> 	xor ax, ax
  3899 00003013 8A06                <1> retest:	mov al, [esi]
  3900 00003015 8A23                <1> 	mov ah, [ebx]
  3901 00003017 3C00                <1> 	cmp al, 0
  3902 00003019 740B                <1> 	je testtrue
  3903 0000301B 38E0                <1> 	cmp al, ah
  3904 0000301D 750F                <1> 	jne testfalse
  3905 0000301F 43                  <1> 	inc ebx
  3906 00003020 46                  <1> 	inc esi
  3907 00003021 E9EDFFFFFF          <1> 	jmp retest
  3908                              <1> testtrue:
  3909 00003026 80FC00              <1> 	cmp ah, 0
  3910 00003029 7503                <1> 	jne testfalse
  3911 0000302B B001                <1> 	mov al, 1
  3912 0000302D C3                  <1> 	ret
  3913                              <1> testfalse:
  3914 0000302E 30C0                <1> 	xor al, al
  3915 00003030 C3                  <1> 	ret
  3916                              <1> 
  3917                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3918 00003031 30C0                <1> 	xor al, al
  3919                              <1> opretest:
  3920 00003033 8A06                <1> 	mov al, [esi]
  3921 00003035 8A23                <1> 	mov ah, [ebx]
  3922 00003037 38E0                <1> 	cmp al, ah
  3923 00003039 7513                <1> 	jne optestfalse
  3924 0000303B 80FC00              <1> 	cmp ah, 0
  3925 0000303E 7407                <1> 	je optesttrue
  3926 00003040 43                  <1> 	inc ebx
  3927 00003041 46                  <1> 	inc esi
  3928 00003042 E9ECFFFFFF          <1> 	jmp opretest
  3929                              <1> optesttrue:
  3930 00003047 3C00                <1> 	cmp al, 0
  3931 00003049 7503                <1> 	jne optestfalse
  3932 0000304B B001                <1> 	mov al, 1
  3933 0000304D C3                  <1> 	ret
  3934                              <1> optestfalse:
  3935 0000304E 30C0                <1> 	xor al, al
  3936 00003050 C3                  <1> 	ret
  3937                              <1> 
  3938                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3939 00003051 30C0                <1> 	xor al, al
  3940 00003053 8A06                <1> cndretest:	mov al, [esi]
  3941 00003055 8A23                <1> 	mov ah, [ebx]
  3942 00003057 38CC                <1> 	cmp ah, cl
  3943 00003059 740B                <1> 	je cndtesttrue
  3944 0000305B 38E0                <1> 	cmp al, ah
  3945 0000305D 750E                <1> 	jne cndtestfalse
  3946 0000305F 43                  <1> 	inc ebx
  3947 00003060 46                  <1> 	inc esi
  3948 00003061 E9EDFFFFFF          <1> 	jmp cndretest
  3949                              <1> cndtesttrue:
  3950 00003066 38C8                <1> 	cmp al, cl
  3951 00003068 7506                <1> 	jne cndtestalmost
  3952 0000306A B001                <1> 	mov al, 1
  3953 0000306C C3                  <1> 	ret
  3954                              <1> cndtestfalse:
  3955 0000306D 30C0                <1> 	xor al, al
  3956 0000306F C3                  <1> 	ret
  3957                              <1> cndtestalmost:
  3958 00003070 B002                <1> 	mov al, 2
  3959 00003072 C3                  <1> 	ret
  3960                              <1> 	
  3961                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3962                              <1> 		                ;ends if array seperator is found backwards after 0
  3963                              <1> 	arnxt:	      
  3964 00003073 88E8                <1> 		mov al, ch
  3965 00003075 88CC                <1> 		mov ah, cl        
  3966 00003077 663906              <1> 		cmp [esi], ax
  3967 0000307A 744E                <1> 		je ardn
  3968 0000307C 66390E              <1> 		cmp [esi], cx
  3969 0000307F 740A                <1> 		je arfnd
  3970 00003081 46                  <1> 		inc esi
  3971 00003082 39DE                <1> 		cmp esi, ebx
  3972 00003084 7344                <1> 		jae ardn
  3973 00003086 E9E8FFFFFF          <1> 		jmp arnxt
  3974 0000308B 81C602000000        <1> 	arfnd: add esi, 2
  3975 00003091 891D[CB300000]      <1> 		mov [arbx], ebx
  3976 00003097 890D[CF300000]      <1> 		mov [arcx], ecx
  3977 0000309D E8C1ECFFFF          <1> 		call print
  3978 000030A2 8935[D1300000]      <1> 		mov [arsi], esi
  3979 000030A8 E8B1ECFFFF          <1> 		call printline
  3980 000030AD 8B1D[CB300000]      <1> 		mov ebx, [arbx]
  3981 000030B3 668B0D[CF300000]    <1> 		mov cx, [arcx]
  3982 000030BA 8B35[D1300000]      <1> 		mov esi, [arsi]
  3983 000030C0 46                  <1> 		inc esi
  3984 000030C1 39DE                <1> 		cmp esi, ebx
  3985 000030C3 7305                <1> 		jae ardn
  3986 000030C5 E9A9FFFFFF          <1> 		jmp arnxt
  3987 000030CA C3                  <1> 	ardn:	ret
  3988 000030CB 00000000            <1> arbx:	dw 0,0
  3989 000030CF 0000                <1> arcx:	db 0,0
  3990 000030D1 00000000            <1> arsi:	dw 0,0
  3991                              <1> 
  3992                              <1> clearbuffer:
  3993 000030D5 BE[88D20300]        <1> 	mov esi, buf2
  3994 000030DA B030                <1> 	mov al, '0'
  3995 000030DC 81FE[9CD20300]      <1> clearbuf: cmp esi, numbuf
  3996 000030E2 7308                <1> 	jae doneclearbuff
  3997 000030E4 8806                <1> 	mov [esi], al
  3998 000030E6 46                  <1> 	inc esi
  3999 000030E7 E9F0FFFFFF          <1> 	jmp clearbuf
  4000                              <1> doneclearbuff: 
  4001 000030EC C3                  <1> 		ret
  4002                              <1> 
  4003                              <1> convert:
  4004 000030ED 4E                  <1> 	dec esi
  4005 000030EE 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4006                              <1> .lp:
  4007 000030F0 89DE                <1> 	mov esi, ebx
  4008 000030F2 81EE09000000        <1> 	sub esi, 9
  4009 000030F8 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4010 000030FE 720D                <1> 	jb .8
  4011 00003100 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4012 00003106 FE06                <1> 	inc byte [esi]
  4013 00003108 E9E3FFFFFF          <1> 	jmp .lp
  4014 0000310D 46                  <1> .8:	inc esi
  4015 0000310E 81F900E1F505        <1> 	cmp ecx, 100000000
  4016 00003114 720D                <1> 	jb .7
  4017 00003116 81E900E1F505        <1> 	sub ecx, 100000000
  4018 0000311C FE06                <1> 	inc byte [esi]
  4019 0000311E E9CDFFFFFF          <1> 	jmp .lp
  4020 00003123 46                  <1> .7:	inc esi
  4021 00003124 81F980969800        <1> 	cmp ecx, 10000000
  4022 0000312A 720D                <1> 	jb .6
  4023 0000312C 81E980969800        <1> 	sub ecx, 10000000
  4024 00003132 FE06                <1> 	inc byte [esi]
  4025 00003134 E9B7FFFFFF          <1> 	jmp .lp
  4026 00003139 46                  <1> .6:	inc esi
  4027 0000313A 81F940420F00        <1> 	cmp ecx, 1000000
  4028 00003140 720D                <1> 	jb .5
  4029 00003142 81E940420F00        <1> 	sub ecx, 1000000
  4030 00003148 FE06                <1> 	inc byte [esi]
  4031 0000314A E9A1FFFFFF          <1> 	jmp .lp
  4032 0000314F 46                  <1> .5:	inc esi
  4033 00003150 81F9A0860100        <1> 	cmp ecx, 100000
  4034 00003156 720D                <1> 	jb .4
  4035 00003158 81E9A0860100        <1> 	sub ecx, 100000
  4036 0000315E FE06                <1> 	inc byte [esi]
  4037 00003160 E98BFFFFFF          <1> 	jmp .lp
  4038 00003165 46                  <1> .4:	inc esi
  4039 00003166 81F910270000        <1> 	cmp ecx, 10000
  4040 0000316C 720D                <1> 	jb .3
  4041 0000316E 81E910270000        <1> 	sub ecx, 10000
  4042 00003174 FE06                <1> 	inc byte [esi]
  4043 00003176 E975FFFFFF          <1> 	jmp .lp
  4044 0000317B 46                  <1> .3:	inc esi
  4045 0000317C 81F9E8030000        <1> 	cmp ecx, 1000
  4046 00003182 720D                <1> 	jb .2
  4047 00003184 81E9E8030000        <1> 	sub ecx, 1000
  4048 0000318A FE06                <1> 	inc byte [esi]
  4049 0000318C E95FFFFFFF          <1> 	jmp .lp
  4050 00003191 46                  <1> .2:	inc esi
  4051 00003192 81F964000000        <1> 	cmp ecx, 100
  4052 00003198 720D                <1> 	jb .1
  4053 0000319A 81E964000000        <1> 	sub ecx, 100
  4054 000031A0 FE06                <1> 	inc byte [esi]
  4055 000031A2 E949FFFFFF          <1> 	jmp .lp
  4056 000031A7 46                  <1> .1:	inc esi
  4057 000031A8 81F90A000000        <1> 	cmp ecx, 10
  4058 000031AE 720D                <1> 	jb .0
  4059 000031B0 81E90A000000        <1> 	sub ecx, 10
  4060 000031B6 FE06                <1> 	inc byte [esi]
  4061 000031B8 E933FFFFFF          <1> 	jmp .lp
  4062 000031BD 46                  <1> .0:	inc esi
  4063 000031BE 81F901000000        <1> 	cmp ecx, 1
  4064 000031C4 720D                <1> 	jb .dn
  4065 000031C6 81E901000000        <1> 	sub ecx, 1
  4066 000031CC FE06                <1> 	inc byte [esi]
  4067 000031CE E91DFFFFFF          <1> 	jmp .lp
  4068                              <1> .dn:
  4069 000031D3 C3                  <1> 	ret
  4070                              <1> 
  4071                              <1> 	
  4072                              <1> 
  4073 000031D4 00<rept>            <1> hexnumber times 8 db 0
  4074 000031DC 202000              <1> hexnumberend db "  ",0
  4075                              <1> 
  4076                              <1> converthex:
  4077                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4078 000031DF 56                  <1> 	push esi
  4079 000031E0 B030                <1> 	mov al, "0"
  4080 000031E2 39FE                <1> .clearlp: cmp esi, edi
  4081 000031E4 7308                <1> 	jae .doneclear
  4082 000031E6 8806                <1> 	mov [esi], al
  4083 000031E8 46                  <1> 	inc esi
  4084 000031E9 E9F4FFFFFF          <1> 	jmp .clearlp
  4085                              <1> .doneclear:
  4086 000031EE 81EE02000000        <1> 	sub esi, 2
  4087 000031F4 89C8                <1> 	mov eax, ecx
  4088                              <1> .loop:
  4089 000031F6 30FF                <1> 	xor bh, bh
  4090 000031F8 88C3                <1> 	mov bl, al
  4091 000031FA 66C1E304            <1> 	shl bx, 4
  4092 000031FE C0EB04              <1> 	shr bl, 4
  4093 00003201 86DF                <1> 	xchg bl, bh ;they are backwards
  4094 00003203 80C330              <1> 	add bl, 48
  4095 00003206 80FB39              <1> 	cmp bl, "9"
  4096 00003209 7609                <1> 	jbe .goodbl
  4097 0000320B 80EB30              <1> 	sub bl, 48
  4098 0000320E 80EB0A              <1> 	sub bl, 0xA
  4099 00003211 80C341              <1> 	add bl, "A"
  4100                              <1> .goodbl:
  4101 00003214 80C730              <1> 	add bh, 48
  4102 00003217 80FF39              <1> 	cmp bh, "9"
  4103 0000321A 7609                <1> 	jbe .goodbh
  4104 0000321C 80EF30              <1> 	sub bh, 48
  4105 0000321F 80EF0A              <1> 	sub bh, 0xA
  4106 00003222 80C741              <1> 	add bh, "A"
  4107                              <1> .goodbh:
  4108 00003225 C1E808              <1> 	shr eax, 8
  4109 00003228 66891E              <1> 	mov [esi], bx
  4110 0000322B 81EE02000000        <1> 	sub esi, 2
  4111 00003231 3B3424              <1> 	cmp esi, [esp]
  4112 00003234 7207                <1> 	jb .done
  4113 00003236 3D00000000          <1> 	cmp eax, 0
  4114 0000323B 75B9                <1> 	jne .loop
  4115                              <1> .done:
  4116 0000323D 5E                  <1> 	pop esi
  4117 0000323E C3                  <1> 	ret
  4118                              <1> 	
  4119                              <1> 	
  4120 0000323F 00                  <1> smallhex db 0
  4121 00003240 01                  <1> firsthexshown db 1
  4122                              <1> showhexsmall:
  4123 00003241 C605[3F320000]01    <1> 	mov byte [smallhex], 1
  4124 00003248 E808000000          <1> 	call showhex
  4125 0000324D C605[3F320000]00    <1> 	mov byte [smallhex], 0
  4126 00003254 C3                  <1> 	ret
  4127                              <1> showhex:
  4128 00003255 60                  <1> 	pusha
  4129 00003256 BE[D4310000]        <1> 	mov esi, hexnumber
  4130 0000325B BF[DC310000]        <1> 	mov edi, hexnumberend
  4131 00003260 E87AFFFFFF          <1> 	call converthex
  4132 00003265 803D[40320000]01    <1> 	cmp byte [firsthexshown], 1
  4133 0000326C 7503                <1> 	jne .show
  4134 0000326E 6631D2              <1> 	xor dx, dx
  4135                              <1> .show:
  4136 00003271 803D[40320000]03    <1> 	cmp byte [firsthexshown], 3
  4137 00003278 7505                <1> 	jne .nonewhexline
  4138 0000327A E8DFEAFFFF          <1> 	call printline
  4139                              <1> .nonewhexline:
  4140 0000327F 803D[40320000]04    <1> 	cmp byte [firsthexshown], 4
  4141 00003286 7522                <1> 	jne .notab
  4142 00003288 B1A0                <1> 	mov cl, 160
  4143 0000328A 28D1                <1> 	sub cl, dl
  4144 0000328C C0E905              <1> 	shr cl, 5
  4145 0000328F C0E105              <1> 	shl cl, 5
  4146 00003292 80F900              <1> 	cmp cl, 0
  4147 00003295 750A                <1> 	jne .nonewline
  4148 00003297 E8C2EAFFFF          <1> 	call printline
  4149 0000329C E909000000          <1> 	jmp .notab
  4150                              <1> .nonewline:
  4151 000032A1 80C20F              <1> 	add dl, 15
  4152 000032A4 C0EA04              <1> 	shr dl, 4
  4153 000032A7 C0E204              <1> 	shl dl, 4
  4154                              <1> .notab:
  4155 000032AA BE[D4310000]        <1> 	mov esi, hexnumber
  4156 000032AF 803D[3F320000]01    <1> 	cmp byte [smallhex],1
  4157 000032B6 7506                <1> 	jne .nosmall
  4158 000032B8 81C606000000        <1> 	add esi, 6
  4159                              <1> .nosmall:
  4160 000032BE 803D[40320000]05    <1> 	cmp byte [firsthexshown], 5
  4161 000032C5 750A                <1> 	jne .noquiet
  4162 000032C7 E873EAFFFF          <1> 	call printquiet
  4163 000032CC E918000000          <1> 	jmp .donequiet
  4164                              <1> .noquiet:
  4165 000032D1 803D[40320000]06    <1> 	cmp byte [firsthexshown], 6
  4166 000032D8 750A                <1> 	jne .normal
  4167 000032DA E873EAFFFF          <1> 	call printhighlight
  4168 000032DF E905000000          <1> 	jmp .donequiet
  4169                              <1> .normal:
  4170 000032E4 E87AEAFFFF          <1> 	call print
  4171                              <1> .donequiet:
  4172 000032E9 803D[40320000]02    <1> 	cmp byte [firsthexshown], 2
  4173 000032F0 7505                <1> 	jne .shown
  4174 000032F2 E867EAFFFF          <1> 	call printline
  4175                              <1> .shown:
  4176 000032F7 C605[40320000]00    <1> 	mov byte [firsthexshown], 0
  4177 000032FE 61                  <1> 	popa
  4178 000032FF C3                  <1> 	ret
  4179                              <1> 
  4180                              <1> 
  4181 00003300 303030303030303030- <1> decnumber db "00000000000000"
  4182 00003309 3030303030          <1>
  4183 0000330E 2000                <1> decnumberend: db " ",0
  4184                              <1> 
  4185                              <1> showdec: ;same as showhex, just uses decimal conversion
  4186 00003310 60                  <1> 	pusha
  4187 00003311 BF[00330000]        <1> 	mov edi, decnumber
  4188 00003316 BE[0E330000]        <1> 	mov esi, decnumberend
  4189                              <1> .clear:
  4190 0000331B C60730              <1> 	mov byte [edi], '0'
  4191 0000331E 47                  <1> 	inc edi
  4192 0000331F 39F7                <1> 	cmp edi, esi
  4193 00003321 72F8                <1> 	jb .clear
  4194 00003323 BF[00330000]        <1> 	mov edi, decnumber
  4195 00003328 E8C0FDFFFF          <1> 	call convert
  4196 0000332D 803D[40320000]01    <1> 	cmp byte [firsthexshown], 1
  4197 00003334 7503                <1> 	jne .show
  4198 00003336 6631D2              <1> 	xor dx, dx
  4199                              <1> .show:
  4200 00003339 803D[40320000]03    <1> 	cmp byte [firsthexshown], 3
  4201 00003340 7505                <1> 	jne .nonewdecline
  4202 00003342 E817EAFFFF          <1> 	call printline
  4203                              <1> .nonewdecline:
  4204 00003347 803D[40320000]04    <1> 	cmp byte [firsthexshown], 4
  4205 0000334E 7522                <1> 	jne .notab
  4206 00003350 B1A0                <1> 	mov cl, 160
  4207 00003352 28D1                <1> 	sub cl, dl
  4208 00003354 C0E905              <1> 	shr cl, 5
  4209 00003357 C0E105              <1> 	shl cl, 5
  4210 0000335A 80F900              <1> 	cmp cl, 0
  4211 0000335D 750A                <1> 	jne .nonewline
  4212 0000335F E8FAE9FFFF          <1> 	call printline
  4213 00003364 E909000000          <1> 	jmp .notab
  4214                              <1> .nonewline:
  4215 00003369 80C20F              <1> 	add dl, 15
  4216 0000336C C0EA04              <1> 	shr dl, 4
  4217 0000336F C0E204              <1> 	shl dl, 4
  4218                              <1> .notab:
  4219 00003372 BE[00330000]        <1> 	mov esi, decnumber
  4220 00003377 4E                  <1> 	dec esi
  4221                              <1> .sifind:
  4222 00003378 46                  <1> 	inc esi
  4223 00003379 81FE[0D330000]      <1> 	cmp esi, decnumberend - 1
  4224 0000337F 7305                <1> 	jae .nosifind
  4225 00003381 803E30              <1> 	cmp byte [esi], '0'
  4226 00003384 74F2                <1> 	je .sifind
  4227                              <1> .nosifind:
  4228 00003386 E8D8E9FFFF          <1> 	call print
  4229 0000338B 803D[40320000]02    <1> 	cmp byte [firsthexshown], 2
  4230 00003392 7505                <1> 	jne .shown
  4231 00003394 E8C5E9FFFF          <1> 	call printline
  4232                              <1> .shown:
  4233 00003399 C605[40320000]00    <1> 	mov byte [firsthexshown], 0
  4234 000033A0 61                  <1> 	popa
  4235 000033A1 C3                  <1> 	ret
  4236                              <1> 	
  4237                              <1> cnvrthextxt:
  4238 000033A2 31C9                <1> 	xor ecx, ecx
  4239 000033A4 31C0                <1> 	xor eax, eax
  4240 000033A6 31D2                <1> 	xor edx, edx
  4241 000033A8 31DB                <1> 	xor ebx, ebx
  4242 000033AA 4E                  <1> 	dec esi
  4243                              <1> .end:
  4244 000033AB 46                  <1> 	inc esi
  4245 000033AC 8A06                <1> 	mov al, [esi]
  4246 000033AE 3C00                <1> 	cmp al, 0
  4247 000033B0 75F9                <1> 	jne .end
  4248                              <1> .loop:
  4249 000033B2 4E                  <1> 	dec esi
  4250 000033B3 8A06                <1> 	mov al, [esi]
  4251 000033B5 3C41                <1> 	cmp al, "A"
  4252 000033B7 7328                <1> 	jae .char
  4253 000033B9 2C30                <1> 	sub al, 48
  4254 000033BB 3C10                <1> 	cmp al, 16
  4255 000033BD 7721                <1> 	ja .done
  4256                              <1> .donechar:
  4257 000033BF 81FA00000000        <1> 	cmp edx, 0
  4258 000033C5 740E                <1> 	je .noshl
  4259 000033C7 89D3                <1> 	mov ebx, edx
  4260                              <1> .shl:
  4261 000033C9 C1E004              <1> 	shl eax, 4
  4262 000033CC 4B                  <1> 	dec ebx
  4263 000033CD 81FB00000000        <1> 	cmp ebx, 0
  4264 000033D3 75F4                <1> 	jne .shl
  4265                              <1> .noshl:
  4266 000033D5 42                  <1> 	inc edx
  4267 000033D6 01C1                <1> 	add ecx, eax
  4268 000033D8 81FA08000000        <1> 	cmp edx, 8
  4269 000033DE 72D2                <1> 	jb .loop
  4270                              <1> .done:
  4271 000033E0 C3                  <1> 	ret
  4272                              <1> .char:
  4273 000033E1 3C46                <1> 	cmp al, "F"
  4274 000033E3 77FB                <1> 	ja .done
  4275 000033E5 2C41                <1> 	sub al, "A"
  4276 000033E7 040A                <1> 	add al, 0xA
  4277 000033E9 E9D1FFFFFF          <1> 	jmp .donechar
  4278                              <1> 	
  4279                              <1> 	
  4280                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4281 000033EE 31C9                <1> 	xor ecx, ecx
  4282 000033F0 31C0                <1> 	xor eax, eax
  4283 000033F2 31D2                <1> 	xor edx, edx
  4284 000033F4 31DB                <1> 	xor ebx, ebx
  4285 000033F6 4E                  <1> 	dec esi
  4286                              <1> .lp:
  4287 000033F7 46                  <1> 	inc esi
  4288 000033F8 8A06                <1> 	mov al, [esi]
  4289 000033FA 3C00                <1> 	cmp al, 0
  4290 000033FC 75F9                <1> 	jne .lp
  4291 000033FE 4E                  <1> 	dec esi
  4292 000033FF 8A06                <1> 	mov al, [esi]
  4293 00003401 3C2E                <1> 	cmp al, '.'
  4294 00003403 7506                <1> 	jne .dot
  4295 00003405 46                  <1> 	inc esi
  4296 00003406 E9ECFFFFFF          <1> 	jmp .lp
  4297                              <1> .dot:
  4298 0000340B 3C20                <1> 	cmp al, ' '
  4299 0000340D 7404                <1> 	je .zero
  4300 0000340F 3C30                <1> 	cmp al, '0'
  4301 00003411 7504                <1> 	jne .txtlp
  4302                              <1> .zero: 
  4303 00003413 39FE                <1> 		cmp esi, edi
  4304 00003415 7447                <1> 		je .done
  4305                              <1> .txtlp:
  4306 00003417 31C0                <1> 	xor eax, eax
  4307 00003419 8A06                <1> 	mov al, [esi]
  4308 0000341B 3C3D                <1> 	cmp al, '='
  4309 0000341D 743F                <1> 	je .done
  4310 0000341F 3C30                <1> 	cmp al, 48
  4311 00003421 723B                <1> 	jb .done
  4312 00003423 3C23                <1> 	cmp al, '#'
  4313 00003425 7437                <1> 	je .done
  4314 00003427 39FE                <1> 	cmp esi, edi
  4315 00003429 7233                <1> 	jb .done
  4316 0000342B 81F900000000        <1> 	cmp ecx, 0
  4317 00003431 770B                <1> 	ja .exp
  4318 00003433 2C30                <1> .noexp:	sub al, 48
  4319 00003435 01C2                <1> 	add edx, eax
  4320 00003437 4E                  <1> 	dec esi
  4321 00003438 41                  <1> 	inc ecx
  4322 00003439 E9D9FFFFFF          <1> 	jmp .txtlp
  4323 0000343E 81F900000000        <1> .exp:	cmp ecx, 0
  4324 00003444 74ED                <1> 	je .noexp
  4325 00003446 2C30                <1> 	sub al, 48
  4326 00003448 51                  <1> 	push ecx
  4327                              <1> .expmul:
  4328 00003449 89C3                <1> 	mov ebx, eax
  4329 0000344B 01D8                <1> 	add eax, ebx
  4330 0000344D C1E303              <1> 	shl ebx, 3
  4331 00003450 01D8                <1> 	add eax, ebx
  4332 00003452 E2F5                <1> 	loop .expmul
  4333 00003454 01C2                <1> 	add edx, eax
  4334 00003456 59                  <1> 	pop ecx
  4335 00003457 4E                  <1> 	dec esi
  4336 00003458 41                  <1> 	inc ecx
  4337 00003459 E9B9FFFFFF          <1> 	jmp .txtlp
  4338 0000345E 89D1                <1> .done: mov ecx, edx
  4339 00003460 C3                  <1> 	ret
  4340                              <1> 
  4341                              <1> benchmarki: ;output number of clocks since initial value
  4342 00003461 0F31                <1> 	rdtsc
  4343 00003463 8B1D[32900000]      <1> 	mov ebx, [initialtsc]
  4344 00003469 8B0D[36900000]      <1> 	mov ecx, [initialtsc + 4]
  4345 0000346F E90E000000          <1> 	jmp benchmarkl.calc
  4346                              <1> 
  4347                              <1> benchmarkl: ;output number of clocks since last benchmark
  4348 00003474 0F31                <1> 	rdtsc
  4349 00003476 8B1D[3A900000]      <1> 	mov ebx, [lasttsc]
  4350 0000347C 8B0D[3E900000]      <1> 	mov ecx, [lasttsc + 4]
  4351                              <1> .calc:
  4352 00003482 29D8                <1> 	sub eax, ebx
  4353 00003484 7701                <1> 	ja .noover
  4354 00003486 4A                  <1> 	dec edx
  4355                              <1> .noover:
  4356 00003487 29CA                <1> 	sub edx, ecx
  4357 00003489 8B0C24              <1> 	mov ecx, [esp]
  4358 0000348C E8C4FDFFFF          <1> 	call showhex
  4359 00003491 89D1                <1> 	mov ecx, edx
  4360 00003493 E8BDFDFFFF          <1> 	call showhex
  4361 00003498 89C1                <1> 	mov ecx, eax
  4362 0000349A E8B6FDFFFF          <1> 	call showhex
  4363 0000349F E8BAE8FFFF          <1> 	call printline
  4364 000034A4 0F31                <1> 	rdtsc
  4365 000034A6 A3[3A900000]        <1> 	mov [lasttsc], eax
  4366 000034AB 8915[3E900000]      <1> 	mov [lasttsc + 4], edx
  4367 000034B1 C3                  <1> 	ret
  4368                                      %include "source/programs.asm"
  4369 000034B2 FF2C                <1> filetypes db 255,44
  4370                              <1> progstart:		;programs start here
  4371                              <1> indexfiles:
  4372 000034B4 BE[B4340000]        <1> 	mov esi, progstart
  4373 000034B9 BB[08B40300]        <1> 	mov ebx, fileindex
  4374 000034BE BF[B4340000]        <1> 	mov edi, progstart
  4375 000034C3 81EF02000000        <1> 	sub edi, 2
  4376                              <1> indexloop:
  4377 000034C9 668B0E              <1> 	mov cx, [esi]
  4378                              <1> 	indexloop2:
  4379 000034CC 663B0F              <1> 		cmp cx, [edi]
  4380 000034CF 7427                <1> 		je indexloop2done
  4381 000034D1 81EF02000000        <1> 		sub edi, 2
  4382 000034D7 81FF[B2340000]      <1> 		cmp edi, filetypes
  4383 000034DD 73ED                <1> 		jae indexloop2
  4384 000034DF BF[B4340000]        <1> 	mov edi, progstart
  4385 000034E4 81EF02000000        <1> 	sub edi, 2
  4386 000034EA 46                  <1> 	inc esi
  4387 000034EB 81FE[5B570000]      <1> 	cmp esi, batchprogend
  4388 000034F1 7357                <1> 	jae indexloopdone
  4389 000034F3 E9D1FFFFFF          <1> 	jmp indexloop
  4390                              <1> indexloop2done:
  4391 000034F8 66890B              <1> 	mov [ebx], cx
  4392 000034FB 81C302000000        <1> 	add ebx, 2
  4393 00003501 81C602000000        <1> 	add esi, 2
  4394                              <1> 	nameindex:
  4395 00003507 8A0E                <1> 		mov cl, [esi]
  4396 00003509 80F900              <1> 		cmp cl, 0
  4397 0000350C 7409                <1> 		je nameindexdone
  4398 0000350E 880B                <1> 		mov [ebx], cl
  4399 00003510 46                  <1> 		inc esi
  4400 00003511 43                  <1> 		inc ebx
  4401 00003512 E9F0FFFFFF          <1> 		jmp nameindex
  4402                              <1> 	nameindexdone:
  4403 00003517 43                  <1> 		inc ebx
  4404 00003518 66C7030000          <1> 		mov word [ebx], 0
  4405 0000351D 81C302000000        <1> 		add ebx, 2
  4406 00003523 46                  <1> 		inc esi
  4407 00003524 8933                <1> 		mov [ebx], esi
  4408 00003526 81C304000000        <1> 		add ebx, 4
  4409 0000352C 66C7030000          <1> 		mov word [ebx], 0
  4410 00003531 81C302000000        <1> 		add ebx, 2
  4411 00003537 81FB[08B80300]      <1> 		cmp ebx, fileindexend
  4412 0000353D 730B                <1> 		jae indexloopdone
  4413 0000353F 81C601000000        <1> 		add esi, 1
  4414 00003545 E97FFFFFFF          <1> 		jmp indexloop
  4415 0000354A C605[52350000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4416 00003551 C3                  <1> 		ret
  4417 00003552 00                  <1> indexdone db 0
  4418                              <1> %include 'source/programs/_comment.asm' ;#
  4419 00003553 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4420 00003557 C3                  <2> 	ret 
  4421                              <1> %include 'source/programs/_math.asm' ;!
  4422 00003558 FF2C2100            <2> db 255,44,"!",0
  4423                              <2> 	num:	
  4424 0000355C E874FBFFFF          <2> 		call clearbuffer
  4425 00003561 C605[DF370000]00    <2> 		mov byte [decimal], 0
  4426 00003568 C605[E0370000]00    <2> 		mov byte [decimal2], 0
  4427 0000356F 8B35[0C300000]      <2> 		mov esi, [currentcommandloc]
  4428 00003575 31C0                <2> 		xor eax, eax
  4429 00003577 31C9                <2> 		xor ecx, ecx
  4430 00003579 31DB                <2> 		xor ebx, ebx
  4431 0000357B 8A06                <2> 	num2:	mov al, [esi]
  4432 0000357D 3C2B                <2> 		cmp al, '+'
  4433 0000357F 7416                <2> 		je operatorfound
  4434 00003581 3C2D                <2> 		cmp al, '-'
  4435 00003583 7412                <2> 		je operatorfound
  4436 00003585 3C2A                <2> 		cmp al, '*'
  4437 00003587 740E                <2> 		je operatorfound
  4438 00003589 3C2F                <2> 		cmp al, '/'
  4439 0000358B 740A                <2> 		je operatorfound
  4440 0000358D 3C5E                <2> 		cmp al, '^'
  4441 0000358F 7406                <2> 		je operatorfound
  4442 00003591 46                  <2> 		inc esi
  4443 00003592 84C0                <2> 		test al, al
  4444 00003594 75E5                <2> 		jnz num2
  4445 00003596 C3                  <2> 		ret
  4446 00003597 50                  <2> 	operatorfound: push eax
  4447 00003598 30E4                <2> 		xor ah, ah
  4448 0000359A 8826                <2> 		mov [esi], ah
  4449 0000359C 89F7                <2> 		mov edi, esi
  4450 0000359E 46                  <2> 		inc esi
  4451 0000359F 8A06                <2> 		mov al, [esi]
  4452 000035A1 3C25                <2> 		cmp al, '%'
  4453 000035A3 0F845E000000        <2> 		je near resultnum1
  4454                              <2> 	varnum2: 
  4455 000035A9 57                  <2> 		push edi
  4456 000035AA E8A6000000          <2> 		call checkdecimal
  4457 000035AF 5F                  <2> 		pop edi
  4458 000035B0 E839FEFFFF          <2> 		call cnvrttxt
  4459                              <2> 	vrnm2:
  4460 000035B5 89CB                <2> 		mov ebx, ecx
  4461 000035B7 53                  <2> 		push ebx
  4462 000035B8 E818FBFFFF          <2> 		call clearbuffer
  4463 000035BD 8B35[0C300000]      <2> 		mov esi, [currentcommandloc]
  4464 000035C3 89F7                <2> 		mov edi, esi
  4465 000035C5 46                  <2> 		inc esi
  4466 000035C6 8A06                <2> 		mov al, [esi]
  4467 000035C8 3C25                <2> 		cmp al, '%'
  4468 000035CA 0F844E000000        <2> 		je near resultnum2
  4469                              <2> 	varnum4: 
  4470 000035D0 57                  <2> 		push edi
  4471 000035D1 E86B000000          <2> 		call checkdecimal2
  4472 000035D6 5F                  <2> 		pop edi
  4473 000035D7 E812FEFFFF          <2> 		call cnvrttxt
  4474                              <2> 	vrnm4:
  4475 000035DC 5B                  <2> 		pop ebx
  4476 000035DD 58                  <2> 		pop eax
  4477 000035DE 3C2B                <2> 		cmp al, '+'
  4478 000035E0 0F84A3000000        <2> 		je near plusnum
  4479 000035E6 3C2D                <2> 		cmp al, '-'
  4480 000035E8 0F84A7000000        <2> 		je near subnum
  4481 000035EE 3C2A                <2> 		cmp al, '*'
  4482 000035F0 0F84AB000000        <2> 		je near mulnum
  4483 000035F6 3C2F                <2> 		cmp al, '/'
  4484 000035F8 0F84B9000000        <2> 		je near divnum
  4485 000035FE 3C5E                <2> 		cmp al, '^'
  4486 00003600 0F84D6000000        <2> 		je near expnum
  4487 00003606 C3                  <2> 		ret
  4488                              <2> 	resultnum1:
  4489 00003607 8A0D[E1370000]      <2> 		mov cl, [decimalresult]
  4490 0000360D 880D[DF370000]      <2> 		mov [decimal], cl
  4491 00003613 8B0D[E2370000]      <2> 		mov ecx, [result]
  4492 00003619 E997FFFFFF          <2> 		jmp vrnm2
  4493                              <2> 	resultnum2:
  4494 0000361E 8A0D[DF370000]      <2> 		mov cl, [decimal]
  4495 00003624 880D[E0370000]      <2> 		mov [decimal2], cl
  4496 0000362A 8A0D[E1370000]      <2> 		mov cl, [decimalresult]
  4497 00003630 880D[DF370000]      <2> 		mov [decimal], cl
  4498 00003636 8B0D[E2370000]      <2> 		mov ecx, [result]
  4499 0000363C E99BFFFFFF          <2> 		jmp vrnm4
  4500                              <2> 	checkdecimal2:
  4501 00003641 8A25[DF370000]      <2> 		mov ah, [decimal]
  4502 00003647 8825[E0370000]      <2> 		mov [decimal2], ah
  4503 0000364D 30E4                <2> 		xor ah, ah
  4504 0000364F 8825[DF370000]      <2> 		mov [decimal], ah
  4505                              <2> 	checkdecimal:
  4506 00003655 89F7                <2> 		mov edi, esi
  4507                              <2> 	chkdec1:
  4508 00003657 8A07                <2> 		mov al, [edi]
  4509 00003659 3C2E                <2> 		cmp al, '.'
  4510 0000365B 0F840E000000        <2> 		je near fnddec
  4511 00003661 3C00                <2> 		cmp al, 0
  4512 00003663 0F841F000000        <2> 		je near nodecimal
  4513 00003669 47                  <2> 		inc edi
  4514 0000366A E9E8FFFFFF          <2> 		jmp chkdec1
  4515                              <2> 	fnddec:
  4516 0000366F 8A4701              <2> 		mov al, [edi + 1]
  4517 00003672 8807                <2> 		mov [edi], al
  4518 00003674 3C00                <2> 		cmp al, 0
  4519 00003676 0F840C000000        <2> 		je near nodecimal
  4520 0000367C FE05[DF370000]      <2> 		inc byte [decimal]
  4521 00003682 47                  <2> 		inc edi
  4522 00003683 E9E7FFFFFF          <2> 		jmp fnddec
  4523                              <2> 	nodecimal:
  4524 00003688 C3                  <2> 		ret
  4525                              <2> 	plusnum:
  4526 00003689 E80F010000          <2> 		call decaddfix
  4527 0000368E 01D9                <2> 		add ecx, ebx
  4528 00003690 E98A000000          <2> 		jmp retnum
  4529                              <2> 	subnum:
  4530 00003695 E803010000          <2> 		call decaddfix
  4531 0000369A 29D9                <2> 		sub ecx, ebx
  4532 0000369C E97E000000          <2> 		jmp retnum
  4533                              <2> 	mulnum:
  4534 000036A1 A0[E0370000]        <2> 		mov al, [decimal2]
  4535 000036A6 0005[DF370000]      <2> 		add [decimal], al
  4536 000036AC 89C8                <2> 		mov eax, ecx
  4537 000036AE F7E3                <2> 		mul ebx
  4538 000036B0 89C1                <2> 		mov ecx, eax
  4539 000036B2 E968000000          <2> 		jmp retnum
  4540                              <2> 	divnum:
  4541 000036B7 E8E1000000          <2> 		call decaddfix
  4542 000036BC 30C0                <2> 		xor al, al
  4543 000036BE A2[DF370000]        <2> 		mov [decimal], al
  4544 000036C3 31D2                <2> 		xor edx, edx
  4545 000036C5 89C8                <2> 		mov eax, ecx
  4546 000036C7 81FB00000000        <2> 		cmp ebx, 0
  4547 000036CD 0F844C000000        <2> 		je near retnum
  4548 000036D3 F7F3                <2> 		div ebx
  4549 000036D5 89C1                <2> 		mov ecx, eax
  4550 000036D7 E943000000          <2> 		jmp retnum
  4551                              <2> 	expnum:
  4552 000036DC 8A15[DF370000]      <2> 		mov dl, [decimal]
  4553 000036E2 8815[E0370000]      <2> 		mov [decimal2], dl
  4554 000036E8 31D2                <2> 		xor edx, edx
  4555 000036EA 89C8                <2> 		mov eax, ecx
  4556 000036EC 89D9                <2> 		mov ecx, ebx
  4557 000036EE 89C3                <2> 		mov ebx, eax
  4558 000036F0 81F900000000        <2> 		cmp ecx, 0
  4559 000036F6 7422                <2> 		je noexpnum
  4560 000036F8 49                  <2> 		dec ecx
  4561 000036F9 81F900000000        <2> 		cmp ecx, 0
  4562 000036FF 7412                <2> 		je noexpnumlp
  4563 00003701 F7E3                <2> 	expnumlp: mul ebx
  4564 00003703 8A15[E0370000]      <2> 		mov dl, [decimal2]
  4565 00003709 0015[DF370000]      <2> 		add [decimal], dl
  4566 0000370F 31D2                <2> 		xor edx, edx
  4567 00003711 E2EE                <2> 		loop expnumlp
  4568                              <2> 	noexpnumlp:
  4569 00003713 89C1                <2> 		mov ecx, eax
  4570 00003715 E905000000          <2> 		jmp retnum
  4571                              <2> 	noexpnum:
  4572 0000371A B901000000          <2> 		mov ecx, 1
  4573                              <2> 	retnum: 
  4574 0000371F BE[9CD20300]        <2> 		mov esi, numbuf
  4575 00003724 890D[E2370000]      <2> 		mov [result], ecx
  4576 0000372A E8BEF9FFFF          <2> 		call convert
  4577 0000372F BE[9CD20300]        <2> 		mov esi, numbuf
  4578 00003734 8A25[DF370000]      <2> 		mov ah, [decimal]
  4579 0000373A 8825[E1370000]      <2> 		mov [decimalresult], ah
  4580 00003740 80FC00              <2> 		cmp ah, 0
  4581 00003743 0F8425000000        <2> 		je near noputdecimal
  4582                              <2> 	putdecimal:
  4583 00003749 4E                  <2> 		dec esi
  4584 0000374A FECC                <2> 		dec ah
  4585 0000374C 80FC00              <2> 		cmp ah, 0
  4586 0000374F 0F87F4FFFFFF        <2> 		ja near putdecimal
  4587 00003755 4E                  <2> 		dec esi
  4588 00003756 8A06                <2> 		mov al, [esi]
  4589 00003758 C6062E              <2> 		mov byte [esi], '.'
  4590                              <2> 	decputloop:
  4591 0000375B 4E                  <2> 		dec esi
  4592 0000375C 8A26                <2> 		mov ah, [esi]
  4593 0000375E 8806                <2> 		mov [esi], al
  4594 00003760 88E0                <2> 		mov al, ah
  4595 00003762 81FE[88D20300]      <2> 		cmp esi, buf2
  4596 00003768 0F87EDFFFFFF        <2> 		ja near decputloop
  4597                              <2> 	noputdecimal:
  4598 0000376E BE[88D20300]        <2> 		mov esi, buf2
  4599 00003773 E805000000          <2> 		call chkadd
  4600 00003778 C3                  <2> 		ret
  4601 00003779 00000000            <2> edxnumbuf dw 0,0
  4602 0000377D 8A06                <2> 	chkadd: mov al, [esi]
  4603 0000377F 3C30                <2> 		cmp al, '0'
  4604 00003781 750F                <2> 		jne dnadd
  4605 00003783 46                  <2> 		inc esi
  4606 00003784 81FE[9CD20300]      <2> 		cmp esi, numbuf
  4607 0000378A 7405                <2> 		je dnaddm1
  4608 0000378C E9ECFFFFFF          <2> 		jmp chkadd
  4609 00003791 4E                  <2> 	dnaddm1: dec esi
  4610 00003792 E8CCE5FFFF          <2> 	dnadd:	call print
  4611 00003797 E8C2E5FFFF          <2> 		call printline
  4612 0000379C C3                  <2> 		ret
  4613                              <2> 		
  4614                              <2> 	decaddfix:
  4615 0000379D A0[E0370000]        <2> 		mov al, [decimal2]
  4616 000037A2 8A25[DF370000]      <2> 		mov ah, [decimal]
  4617 000037A8 38E0                <2> 		cmp al, ah
  4618 000037AA 7432                <2> 		je gooddecadd
  4619 000037AC 38E0                <2> 		cmp al, ah
  4620 000037AE 721A                <2> 		jb lowdecadd
  4621                              <2> 	highdecadd:
  4622 000037B0 FEC4                <2> 		inc ah
  4623 000037B2 89CA                <2> 		mov edx, ecx
  4624 000037B4 C1E103              <2> 		shl ecx, 3
  4625 000037B7 01D1                <2> 		add ecx, edx
  4626 000037B9 01D1                <2> 		add ecx, edx
  4627 000037BB 38E0                <2> 		cmp al, ah
  4628 000037BD 77F1                <2> 		ja highdecadd
  4629 000037BF 8825[DF370000]      <2> 		mov [decimal], ah
  4630 000037C5 E914000000          <2> 		jmp gooddecadd
  4631                              <2> 	lowdecadd:
  4632 000037CA FEC0                <2> 		inc al
  4633 000037CC 89DA                <2> 		mov edx, ebx
  4634 000037CE C1E303              <2> 		shl ebx, 3
  4635 000037D1 01D3                <2> 		add ebx, edx
  4636 000037D3 01D3                <2> 		add ebx, edx
  4637 000037D5 38E0                <2> 		cmp al, ah
  4638 000037D7 72F1                <2> 		jb lowdecadd
  4639 000037D9 A2[DF370000]        <2> 		mov [decimal], al
  4640                              <2> 	gooddecadd:
  4641 000037DE C3                  <2> 		ret
  4642                              <2> 		
  4643 000037DF 00                  <2> decimal db 0
  4644 000037E0 00                  <2> decimal2 db 0
  4645 000037E1 00                  <2> decimalresult db 0
  4646 000037E2 00000000            <2> result dd 0
  4647                              <1> %include 'source/programs/_variables.asm' ;% and $
  4648 000037E6 FF2C2500            <2> db 255,44,"%",0
  4649                              <2> 	ans:
  4650 000037EA BE[88D20300]        <2> 		mov esi, buf2
  4651 000037EF E889FFFFFF          <2> 		call chkadd
  4652 000037F4 C3                  <2> 		ret
  4653                              <2> 		
  4654 000037F5 FF2C2400            <2> db 255,44,"$",0
  4655 000037F9 8B35[0C300000]      <2> var: mov esi, [currentcommandloc]
  4656 000037FF BB[88BA0300]        <2> 	mov ebx, variables
  4657 00003804 8A06                <2> lkeq:	mov al, [esi]
  4658 00003806 3C3D                <2> 	cmp al, '='
  4659 00003808 741E                <2> 	je eqfnd	;is there an '=' sign?
  4660 0000380A 3C00                <2> 	cmp al, 0
  4661 0000380C 7406                <2> 	je echovars
  4662 0000380E 46                  <2> 	inc esi
  4663 0000380F E9F0FFFFFF          <2> 	jmp lkeq
  4664 00003814 BE[88BA0300]        <2> echovars: mov esi, variables
  4665 00003819 BB[88CA0300]        <2> 	mov ebx, varend
  4666 0000381E B105                <2> 	mov cl, 5
  4667 00003820 B504                <2> 	mov ch, 4
  4668 00003822 E84CF8FFFF          <2> 	call array
  4669 00003827 C3                  <2> 	ret
  4670 00003828 46                  <2> eqfnd:	inc esi
  4671 00003829 8A06                <2> 	mov al, [esi]
  4672 0000382B 3C00                <2> 	cmp al, 0
  4673 0000382D 7410                <2> 	je readvar
  4674 0000382F 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  4675 00003835 BB[88BA0300]        <2> 	mov ebx, variables
  4676 0000383A E91C000000          <2> 	jmp seek
  4677                              <2> readvar:
  4678 0000383F B00A                <2> 	mov al, 10
  4679 00003841 66BB0700            <2> 	mov bx, 7
  4680 00003845 C605[62230000]00    <2> 	mov byte [commandedit], 0
  4681 0000384C BF[88D20300]        <2> 	mov edi, buftxtend
  4682 00003851 E840E6FFFF          <2> 	call rdprint
  4683 00003856 E99EFFFFFF          <2> 	jmp var
  4684 0000385B 668B03              <2> seek:	mov ax, [ebx]
  4685 0000385E B105                <2> 	mov cl, 5
  4686 00003860 B504                <2> 	mov ch, 4
  4687 00003862 663D0000            <2> 	cmp ax, 0
  4688 00003866 0F846A000000        <2> 	je near save
  4689 0000386C 6639C8              <2> 	cmp ax, cx
  4690 0000386F 7406                <2> 	je skfnd
  4691 00003871 43                  <2> 	inc ebx
  4692 00003872 E9E4FFFFFF          <2> 	jmp seek
  4693 00003877 8B35[0C300000]      <2> skfnd:	mov esi, [currentcommandloc]
  4694 0000387D 46                  <2> 	inc esi
  4695 0000387E 81C302000000        <2> 	add ebx, 2
  4696 00003884 89DF                <2> 	mov edi, ebx
  4697 00003886 B13D                <2> 	mov cl, '='
  4698 00003888 E8C4F7FFFF          <2> 	call cndtest
  4699 0000388D 3C01                <2> 	cmp al, 1	
  4700 0000388F 741B                <2> 	je varfnd
  4701 00003891 89FB                <2> 	mov ebx, edi
  4702 00003893 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  4703 00003899 668B03              <2> 	mov ax, [ebx]
  4704 0000389C 663D0000            <2> 	cmp ax, 0
  4705 000038A0 0F8430000000        <2> 	je near save
  4706 000038A6 43                  <2> 	inc ebx
  4707 000038A7 E9AFFFFFFF          <2> 	jmp seek
  4708 000038AC 8A03                <2> varfnd:	mov al, [ebx]
  4709 000038AE 3C04                <2> 	cmp al, 4
  4710 000038B0 7407                <2> 	je save2
  4711 000038B2 4B                  <2> 	dec ebx
  4712 000038B3 4E                  <2> 	dec esi
  4713 000038B4 E9F3FFFFFF          <2> 	jmp varfnd
  4714 000038B9 4B                  <2> save2:	dec ebx
  4715 000038BA 4E                  <2> 	dec esi
  4716 000038BB 8A03                <2> 	mov al, [ebx]
  4717 000038BD 3C05                <2> 	cmp al, 5
  4718 000038BF 7405                <2> 	je remove
  4719 000038C1 E9E6FFFFFF          <2> 	jmp varfnd
  4720 000038C6 8A03                <2> remove: mov al, [ebx]
  4721 000038C8 3C00                <2> 	cmp al, 0
  4722 000038CA 748F                <2> 	je seek
  4723 000038CC 30C0                <2> 	xor al, al
  4724 000038CE 8803                <2> 	mov [ebx], al
  4725 000038D0 43                  <2> 	inc ebx
  4726 000038D1 E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4727 000038D6 8B35[0C300000]      <2> save:	mov esi, [currentcommandloc]
  4728 000038DC 43                  <2> 	inc ebx
  4729 000038DD B005                <2> 	mov al, 5
  4730 000038DF B404                <2> 	mov ah, 4
  4731 000038E1 668903              <2> 	mov [ebx], ax
  4732 000038E4 43                  <2> 	inc ebx
  4733 000038E5 43                  <2> svhere:	inc ebx
  4734 000038E6 46                  <2> 	inc esi
  4735 000038E7 8A06                <2> 	mov al, [esi]
  4736 000038E9 3C00                <2> 	cmp al, 0
  4737 000038EB 0F8456000000        <2> 	je near svdone
  4738 000038F1 3C25                <2> 	cmp al, '%'
  4739 000038F3 7407                <2> 	je ans2
  4740 000038F5 8803                <2> 	mov [ebx], al	
  4741 000038F7 E9E9FFFFFF          <2> 	jmp svhere
  4742 000038FC 56                  <2> ans2:	push esi
  4743 000038FD BE[88D20300]        <2> 	mov esi, buf2
  4744 00003902 E82C000000          <2> 	call ansfnd
  4745 00003907 E806000000          <2> 	call anscp
  4746 0000390C 5E                  <2> 	pop esi
  4747 0000390D E9D3FFFFFF          <2> 	jmp svhere
  4748 00003912 8A06                <2> anscp:	mov al, [esi]
  4749 00003914 8803                <2> 	mov [ebx], al
  4750 00003916 81FE[9CD20300]      <2> 	cmp esi, numbuf
  4751 0000391C 74C7                <2> 	je svhere
  4752 0000391E 3C00                <2> 	cmp al, 0
  4753 00003920 74C3                <2> 	je svhere
  4754 00003922 43                  <2> 	inc ebx
  4755 00003923 46                  <2> 	inc esi
  4756 00003924 E9E9FFFFFF          <2> 	jmp anscp
  4757 00003929 5E                  <2> ansnf:	pop esi
  4758 0000392A 8A06                <2> 	mov al, [esi]
  4759 0000392C 8803                <2> 	mov [ebx], al
  4760 0000392E E9B2FFFFFF          <2> 	jmp svhere
  4761 00003933 46                  <2> ansfnd:	inc esi
  4762 00003934 81FE[9BD20300]      <2> 	cmp esi, numbuf - 1
  4763 0000393A 740A                <2> 	je fndans
  4764 0000393C 8A06                <2> 	mov al, [esi]
  4765 0000393E 3C00                <2> 	cmp al, 0
  4766 00003940 74E7                <2> 	je ansnf
  4767 00003942 3C30                <2> 	cmp al, '0'
  4768 00003944 74ED                <2> 	je ansfnd
  4769                              <2> fndans:
  4770 00003946 C3                  <2> 	ret
  4771 00003947 30C0                <2> svdone:	xor al, al
  4772 00003949 8803                <2> 	mov [ebx], al
  4773 0000394B C3                  <2> 	ret
  4774                              <1> %include 'source/programs/_run.asm' ;./
  4775 0000394C 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4776 00003950 FF2C2E2F00          <2> 	db 255,44,"./",0
  4777                              <2> rundiskprog:
  4778 00003955 8B3D[0C300000]      <2> 	mov edi, [currentcommandloc]
  4779 0000395B 81C702000000        <2> 	add edi, 2
  4780 00003961 BE00004000          <2> 	mov esi, 0x400000
  4781 00003966 E8AE320000          <2> 	call loadfile
  4782 0000396B 81FA94010000        <2> 	cmp edx, 404
  4783 00003971 746A                <2> 	je noprogfound
  4784 00003973 BB00004000          <2> 	mov ebx, 0x400000
  4785 00003978 A1[4C390000]        <2> 	mov eax, [elfstart]
  4786 0000397D 3903                <2> 	cmp [ebx], eax
  4787 0000397F 0F8437000000        <2> 	je near runelf
  4788 00003985 66813B4558          <2> 	cmp word [ebx], "EX"
  4789 0000398A 7577                <2> 	jne progbatchfound
  4790 0000398C 81C302000000        <2> 	add ebx, 2
  4791 00003992 8B3D[0C300000]      <2> 	mov edi, [currentcommandloc]
  4792 00003998 81C702000000        <2> 	add edi, 2
  4793                              <2> findspaceprog:
  4794 0000399E 8A07                <2> 	mov al, [edi]
  4795 000039A0 47                  <2> 	inc edi
  4796 000039A1 3C20                <2> 	cmp al, " "
  4797 000039A3 75F9                <2> 	jne findspaceprog
  4798                              <2> findnonspaceprog:
  4799 000039A5 8A07                <2> 	mov al, [edi]
  4800 000039A7 47                  <2> 	inc edi
  4801 000039A8 3C20                <2> 	cmp al, " "
  4802 000039AA 74F9                <2> 	je findnonspaceprog
  4803 000039AC 4F                  <2> 	dec edi
  4804 000039AD 8925[08B80300]      <2> 	mov [previousstack], esp
  4805 000039B3 FFD3                <2> 	call ebx
  4806 000039B5 8B25[08B80300]      <2> 	mov esp, [previousstack]
  4807 000039BB C3                  <2> 	ret
  4808                              <2> runelf:
  4809 000039BC 8B3D[0C300000]      <2> 	mov edi, [currentcommandloc]
  4810 000039C2 81C702000000        <2> 	add edi, 2
  4811 000039C8 81C380000000        <2> 	add ebx, 0x80
  4812 000039CE 8925[08B80300]      <2> 	mov [previousstack], esp
  4813 000039D4 FFD3                <2> 	call ebx
  4814 000039D6 8B25[08B80300]      <2> 	mov esp, [previousstack]
  4815 000039DC C3                  <2> 	ret
  4816                              <2> noprogfound:
  4817 000039DD BE[CE8F0000]        <2> 	mov esi, notfound1
  4818 000039E2 E87CE3FFFF          <2> 	call print
  4819 000039E7 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  4820 000039ED 81C602000000        <2> 	add esi, 2
  4821 000039F3 E86BE3FFFF          <2> 	call print
  4822 000039F8 BE[D68F0000]        <2> 	mov esi, notfound2
  4823 000039FD E861E3FFFF          <2> 	call print
  4824 00003A02 C3                  <2> 	ret
  4825                              <2> progbatchfound:
  4826 00003A03 BF00004000          <2> 		mov edi, 0x400000
  4827 00003A08 C605[82BA0300]01    <2> 		mov byte [BATCHISON], 1
  4828                              <2> 	batchrunloop:
  4829 00003A0F E80AF3FFFF          <2> 		call buftxtclear
  4830 00003A14 BE[88CE0300]        <2> 		mov esi, buftxt
  4831 00003A19 8935[0C300000]      <2> 		mov [currentcommandloc], esi
  4832                              <2> 	batchrunloop2:
  4833 00003A1F B10A                <2> 		mov cl, 10
  4834 00003A21 B50D                <2> 		mov ch, 13
  4835 00003A23 380F                <2> 		cmp [edi], cl
  4836 00003A25 0F841C000000        <2> 		je near nxtbatchrunline
  4837 00003A2B 382F                <2> 		cmp [edi], ch
  4838 00003A2D 0F8414000000        <2> 		je near nxtbatchrunline
  4839 00003A33 803F00              <2> 		cmp byte [edi], 0
  4840 00003A36 0F840B000000        <2> 		je near nxtbatchrunline
  4841 00003A3C 8A07                <2> 		mov al, [edi]
  4842 00003A3E 8806                <2> 		mov [esi], al
  4843 00003A40 46                  <2> 		inc esi
  4844 00003A41 47                  <2> 		inc edi
  4845 00003A42 E9D8FFFFFF          <2> 		jmp batchrunloop2
  4846                              <2> 	nxtbatchrunline:
  4847 00003A47 47                  <2> 		inc edi
  4848 00003A48 380F                <2> 		cmp [edi], cl
  4849 00003A4A 74FB                <2> 		je nxtbatchrunline
  4850 00003A4C 382F                <2> 		cmp [edi], ch
  4851 00003A4E 74F7                <2> 		je nxtbatchrunline
  4852 00003A50 893D[AE3A0000]      <2> 		mov [batchedi], edi
  4853 00003A56 893D[7EBA0300]      <2> 		mov [BATCHPOS], edi
  4854 00003A5C C60600              <2> 		mov byte [esi], 0
  4855 00003A5F BE[88CE0300]        <2> 		mov esi, buftxt
  4856 00003A64 803E00              <2> 		cmp byte [esi], 0
  4857 00003A67 0F8439000000        <2> 		je near nobatchfoundrun
  4858 00003A6D 31DB                <2> 		xor ebx, ebx
  4859 00003A6F 8A1D[19BA0300]      <2> 		mov bl, [IFON]
  4860 00003A75 80FB00              <2> 		cmp bl, 0
  4861 00003A78 0F8534000000        <2> 		jne near iftestbatch
  4862                              <2> 	doneiftest:
  4863 00003A7E 803D[873B0000]00    <2> 		cmp byte [runnextline], 0
  4864 00003A85 0F8405000000        <2> 		je near noruniftest
  4865 00003A8B E8A0F4FFFF          <2> 		call run
  4866                              <2> 	noruniftest:
  4867 00003A90 C605[873B0000]01    <2> 		mov byte [runnextline], 1
  4868 00003A97 8B3D[AE3A0000]      <2> 		mov edi, [batchedi]
  4869 00003A9D 803F00              <2> 		cmp byte [edi], 0
  4870 00003AA0 0F8569FFFFFF        <2> 		jne near batchrunloop
  4871                              <2> 	nobatchfoundrun:
  4872 00003AA6 C605[82BA0300]00    <2> 		mov byte [BATCHISON], 0
  4873 00003AAD C3                  <2> 		ret
  4874                              <2> 	
  4875 00003AAE 00000000            <2> batchedi dd 0	
  4876                              <2> 	
  4877                              <2> 	iftestbatch:
  4878 00003AB2 BE[1ABA0300]        <2> 		mov esi, IFTRUE
  4879 00003AB7 01DE                <2> 		add esi, ebx
  4880 00003AB9 803E00              <2> 		cmp byte [esi], 0
  4881 00003ABC 0F85BCFFFFFF        <2> 		jne near doneiftest
  4882 00003AC2 881D[883B0000]      <2> 		mov [iffalsebuf], bl
  4883 00003AC8 803D[83BA0300]01    <2> 		cmp byte [LOOPON], 1
  4884 00003ACF 0F8513000000        <2> 		jne near fifindbatch
  4885 00003AD5 E935FFFFFF          <2> 		jmp batchrunloop
  4886                              <2> 	elsetestbatch:
  4887 00003ADA C60601              <2> 		mov byte [esi], 1
  4888 00003ADD 81C705000000        <2> 		add edi, 5
  4889 00003AE3 E927FFFFFF          <2> 		jmp batchrunloop
  4890                              <2> 	fifindbatch:
  4891 00003AE8 66B96966            <2> 		mov cx, "if"
  4892 00003AEC 66B86669            <2> 		mov ax, "fi"
  4893 00003AF0 663907              <2> 		cmp [edi], ax
  4894 00003AF3 0F8424000000        <2> 		je near fifoundbatch
  4895 00003AF9 66390F              <2> 		cmp [edi], cx
  4896 00003AFC 0F8468000000        <2> 		je near iffoundbatch
  4897 00003B02 803F00              <2> 		cmp byte [edi], 0
  4898 00003B05 0F8412000000        <2> 		je near fifoundbatch
  4899 00003B0B B8656C7365          <2> 		mov eax, "else"
  4900 00003B10 3907                <2> 		cmp [edi], eax
  4901 00003B12 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4902 00003B18 E973FFFFFF          <2> 		jmp noruniftest
  4903                              <2> 	fifoundbatch:
  4904 00003B1D 81C702000000        <2> 		add edi, 2
  4905 00003B23 B00A                <2> 		mov al, 10
  4906 00003B25 3807                <2> 		cmp [edi], al
  4907 00003B27 0F840E000000        <2> 		je near goodfibatch
  4908 00003B2D 803F00              <2> 		cmp byte [edi], 0
  4909 00003B30 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4910 00003B36 E9ADFFFFFF          <2> 		jmp fifindbatch
  4911                              <2> 	goodfibatch:
  4912 00003B3B B001                <2> 		mov al, 1
  4913 00003B3D 2805[19BA0300]      <2> 		sub [IFON], al 
  4914 00003B43 A0[19BA0300]        <2> 		mov al, [IFON]
  4915 00003B48 8A1D[883B0000]      <2> 		mov bl, [iffalsebuf]
  4916 00003B4E 38D8                <2> 		cmp al, bl
  4917 00003B50 7796                <2> 		ja fifindbatch
  4918 00003B52 8B35[0C300000]      <2> 		mov esi, [currentcommandloc]
  4919 00003B58 81EF02000000        <2> 		sub edi, 2
  4920 00003B5E C605[873B0000]00    <2> 		mov byte [runnextline], 0
  4921 00003B65 E9A5FEFFFF          <2> 		jmp batchrunloop
  4922                              <2> 	iffoundbatch:
  4923 00003B6A B020                <2> 		mov al, ' '
  4924 00003B6C 81C702000000        <2> 		add edi, 2
  4925 00003B72 3807                <2> 		cmp [edi], al
  4926 00003B74 0F856EFFFFFF        <2> 		jne near fifindbatch
  4927 00003B7A B001                <2> 		mov al, 1
  4928 00003B7C 0005[19BA0300]      <2> 		add [IFON], al
  4929 00003B82 E961FFFFFF          <2> 		jmp fifindbatch
  4930                              <2> 		
  4931                              <2> 		
  4932 00003B87 01                  <2> runnextline db 1
  4933 00003B88 00                  <2> iffalsebuf db 0
  4934 00003B89 C3                  <2> notbatch: ret 
  4935                              <1> %ifdef network.included
  4936                              <1> 	%include 'source/programs/arp.asm'
  4937 00003B8A FF2C61727000        <2> db 255,44,"arp",0
  4938                              <2> 	;ARP TESTING
  4939                              <2> arptest:
  4940 00003B90 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  4941 00003B96 81C604000000        <2> 	add esi, 4
  4942 00003B9C E83E530000          <2> 	call strtoip
  4943 00003BA1 890D[483C0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4944 00003BA7 E879530000          <2> 	call showip
  4945 00003BAC 803D[4C3C0000]01    <2> 	cmp byte [arpconfig], 1
  4946 00003BB3 7405                <2> 	je arptest2
  4947 00003BB5 E841000000          <2> 	call arpinit
  4948                              <2> arptest2:	;try to reach 192.168.0.1
  4949 00003BBA 8B0D[C08F0000]      <2> 	mov ecx, [sysmac]
  4950 00003BC0 668B1D[C48F0000]    <2> 	mov bx, [sysmac + 4]
  4951 00003BC7 890D[283C0000]      <2> 	mov [sourcemac], ecx
  4952 00003BCD 66891D[2C3C0000]    <2> 	mov [sourcemac + 4],bx
  4953 00003BD4 890D[383C0000]      <2> 	mov [arpsenderinfo], ecx
  4954 00003BDA 66891D[3C3C0000]    <2> 	mov [arpsenderinfo + 4], bx
  4955 00003BE1 BF[223C0000]        <2> 	mov edi, frame
  4956 00003BE6 BE[4C3C0000]        <2> 	mov esi, framend
  4957 00003BEB E8BD520000          <2> 	call sendpacket
  4958 00003BF0 BE[07900000]        <2> 	mov esi, line
  4959 00003BF5 E869E1FFFF          <2> 	call print
  4960 00003BFA C3                  <2> 	ret
  4961                              <2> 	
  4962                              <2> arpinit:
  4963 00003BFB BE[4D3C0000]        <2> 	mov esi, arptable
  4964 00003C00 BF[C08F0000]        <2> 	mov edi, sysmac
  4965 00003C05 BB[BC8F0000]        <2> 	mov ebx, sysip
  4966 00003C0A 8B0F                <2> 	mov ecx, [edi]
  4967 00003C0C 890E                <2> 	mov [esi], ecx
  4968 00003C0E 668B4F04            <2> 	mov cx, [edi + 4]
  4969 00003C12 894E04              <2> 	mov [esi + 4], ecx
  4970 00003C15 8B0B                <2> 	mov ecx, [ebx]
  4971 00003C17 894E06              <2> 	mov [esi + 6], ecx
  4972 00003C1A C605[4C3C0000]01    <2> 	mov byte [arpconfig], 1
  4973 00003C21 C3                  <2> 	ret
  4974                              <2> 	
  4975                              <2> ;example frame
  4976                              <2> frame:
  4977 00003C22 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4978 00003C28 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4979 00003C2E 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4980                              <2> 	;example packet
  4981 00003C30 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4982 00003C32 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4983 00003C34 0604                <2> 					db 6,4			;length of mac, length of ip
  4984 00003C36 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4985 00003C38 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4986 00003C3E C0A80073            <2> 					db 192,168,0,115		;ip
  4987 00003C42 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4988 00003C48 C0A80000            <2> 					db 192,168,0,0			;ip
  4989                              <2> framend:
  4990                              <2> 
  4991 00003C4C 00                  <2> arpconfig db 0
  4992                              <2> arptable:	;mac,ip
  4993 00003C4D 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4994 00003C56 00<rept>            <2>
  4995                              <2> arptableend:	
  4996                              <1> %endif
  4997                              <1> %include 'source/programs/batch.asm'
  4998 00003CB1 FF2C626174636800    <2> db 255,44,"batch",0
  4999                              <2> 	batchst: 
  5000 00003CB9 8B3D[0C300000]      <2> 		mov edi, [currentcommandloc]
  5001 00003CBF 81C706000000        <2> 		add edi, 6
  5002 00003CC5 803F00              <2> 		cmp byte [edi], 0
  5003 00003CC8 0F846D000000        <2> 		je near nonamefound
  5004 00003CCE BE00004000          <2> 		mov esi, 0x400000
  5005 00003CD3 E8412F0000          <2> 		call loadfile
  5006 00003CD8 89D0                <2> 		mov eax, edx
  5007 00003CDA 3D94010000          <2> 		cmp eax, 404
  5008 00003CDF 7465                <2> 		je goodbatchname
  5009 00003CE1 BE[EC3C0000]        <2> 		mov esi, badbatchname
  5010 00003CE6 E878E0FFFF          <2> 		call print
  5011 00003CEB C3                  <2> 		ret
  5012 00003CEC 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5013 00003CF5 20616C726561647920- <2>
  5014 00003CFE 657869737473210A00  <2>
  5015 00003D07 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5016 00003D10 746F20747970652061- <2>
  5017 00003D19 206E616D6520616674- <2>
  5018 00003D22 65722074686520636F- <2>
  5019 00003D2B 6D6D616E642E0A00    <2>
  5020 00003D33 00000000            <2> 		esicache3 dd 0
  5021 00003D37 00000000            <2> 		esicache2 dd 0
  5022                              <2> 	nonamefound:
  5023 00003D3B BE[073D0000]        <2> 		mov esi, namenotfoundbatch
  5024 00003D40 E81EE0FFFF          <2> 		call print
  5025 00003D45 C3                  <2> 		ret
  5026                              <2> 	goodbatchname:
  5027 00003D46 BE00004000          <2> 		mov esi, 0x400000
  5028                              <2> 	batchcreate:
  5029 00003D4B 8935[333D0000]      <2> 		mov [esicache3], esi
  5030 00003D51 BF00008000          <2> 		mov edi, 0x800000
  5031 00003D56 B00A                <2> 		mov al, 10
  5032 00003D58 B307                <2> 		mov bl, 7
  5033 00003D5A B404                <2> 		mov ah, 4
  5034 00003D5C CD30                <2> 		int 30h
  5035 00003D5E 8935[373D0000]      <2> 		mov [esicache2], esi
  5036 00003D64 8A0E                <2> 		mov cl, [esi]
  5037 00003D66 8B35[333D0000]      <2> 		mov esi, [esicache3]
  5038 00003D6C BB[A33D0000]        <2> 		mov ebx, exitword
  5039 00003D71 E8DBF2FFFF          <2> 		call cndtest
  5040 00003D76 3C01                <2> 		cmp al, 1
  5041 00003D78 7414                <2> 		je endbatchcreate
  5042 00003D7A 3C02                <2> 		cmp al, 2
  5043 00003D7C 7410                <2> 		je endbatchcreate
  5044 00003D7E 8B35[373D0000]      <2> 		mov esi, [esicache2]
  5045 00003D84 B00A                <2> 		mov al, 10
  5046 00003D86 8806                <2> 		mov [esi], al
  5047 00003D88 46                  <2> 		inc esi
  5048 00003D89 E9BDFFFFFF          <2> 		jmp batchcreate
  5049                              <2> 	endbatchcreate:
  5050 00003D8E 8B35[333D0000]      <2> 		mov esi, [esicache3]
  5051 00003D94 31C0                <2> 		xor eax, eax
  5052 00003D96 8806                <2> 		mov [esi], al
  5053 00003D98 BE00004000          <2> 		mov esi, 0x400000
  5054 00003D9D E8C1DFFFFF          <2> 		call print
  5055 00003DA2 C3                  <2> 		ret
  5056                              <2> 	
  5057 00003DA3 5C7800              <2> 	exitword db "\x",0
  5058 00003DA6 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5059 00003DAF 6F20657869742E0A00  <2>
  5060                              <1> %ifdef gui.background
  5061                              <1> 	%include 'source/programs/background.asm'
  5062                              <1> %endif
  5063                              <1> %include 'source/programs/beep.asm'
  5064 00003DB8 FF2C6265657000      <2> 	db 255,44,"beep",0
  5065                              <2> beep:
  5066 00003DBF B8[E43D0000]        <2> 	mov eax, beepstart
  5067 00003DC4 A3[76020000]        <2> 	mov [soundpos], eax
  5068 00003DC9 B8[E83D0000]        <2> 	mov eax, beepend
  5069 00003DCE A3[7A020000]        <2> 	mov [soundendpos], eax
  5070 00003DD3 C605[73020000]01    <2> 	mov byte [soundon], 1
  5071                              <2> waitforsoundendbeep:
  5072 00003DDA A0[73020000]        <2> 	mov al, [soundon]
  5073 00003DDF 3C00                <2> 	cmp al, 0
  5074 00003DE1 75F7                <2> 	jne waitforsoundendbeep
  5075 00003DE3 C3                  <2> 	ret
  5076                              <2> 	
  5077                              <2> beepstart:
  5078 00003DE4 3200D111            <2> 	dw 50, 4561
  5079                              <2> beepend:
  5080                              <1> %ifdef dos.compatible
  5081                              <1> %else
  5082                              <1> 	%include 'source/programs/boot.asm'
  5083 00003DE8 FF2C626F6F7400      <2> db 255,44,"boot",0
  5084                              <2> quickboot:
  5085                              <2> 	;load and jump to the bootloader
  5086                              <2> 	; mov ecx, 1
  5087                              <2> 	; xor ebx, ebx
  5088                              <2> 	; mov esi, 0x400000
  5089                              <2> 	; call diskr
  5090                              <2> 	; mov ax, LINEAR_SEL
  5091                              <2> 	; mov fs, ax
  5092                              <2> 	; mov esi, 0x400000
  5093                              <2> 	; mov edi, 0x7C00
  5094                              <2> 	; xor ebx, ebx
  5095                              <2> ; .lp:
  5096                              <2> 	; mov ecx, [esi+ebx]
  5097                              <2> 	; mov [fs:edi+ebx], ecx
  5098                              <2> 	; add ebx, 4
  5099                              <2> 	; cmp ebx, 512
  5100                              <2> 	; jb .lp
  5101 00003DEF 66BB[FF3D]          <2> 	mov bx, bootload
  5102 00003DF3 66891D[F70C0000]    <2> 	mov [realmodeptr], bx
  5103 00003DFA E9E6CDFFFF          <2> 	jmp realmode
  5104                              <2> [BITS 16]
  5105                              <2> bootload:
  5106 00003DFF B80300              <2> 	mov ax, 3
  5107 00003E02 31DB                <2> 	xor bx, bx
  5108 00003E04 CD10                <2> 	int 10h
  5109 00003E06 EA007C0000          <2> 	jmp 0:0x7C00
  5110                              <2> [BITS 32]
  5111                              <1> %endif
  5112                              <1> %include 'source/programs/cd.asm'
  5113 00003E0B FF2C636400          <2> db 255,44,"cd",0
  5114                              <2> cd:
  5115 00003E10 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  5116 00003E16 81C603000000        <2> 	add esi, 3
  5117 00003E1C 8B3D[10B80300]      <2> 	mov edi, [currentfolderloc]
  5118 00003E22 893D[0CB80300]      <2> 	mov [lastfolderloc], edi
  5119 00003E28 81C7[14B80300]      <2> 	add edi, currentfolder
  5120 00003E2E 4F                  <2> 	dec edi
  5121 00003E2F 66813E2E2E          <2> 	cmp word [esi], ".."
  5122 00003E34 742A                <2> 	je .moveup
  5123 00003E36 47                  <2> 	inc edi
  5124                              <2> .movedown:
  5125 00003E37 8A06                <2> 	mov al, [esi]
  5126 00003E39 8807                <2> 	mov [edi], al
  5127 00003E3B 47                  <2> 	inc edi
  5128 00003E3C 46                  <2> 	inc esi
  5129 00003E3D 3C00                <2> 	cmp al, 0
  5130 00003E3F 740A                <2> 	je .donecd
  5131 00003E41 81FF[14BA0300]      <2> 	cmp edi, currentfolderend
  5132 00003E47 72EE                <2> 	jb .movedown
  5133 00003E49 30C0                <2> 	xor al, al
  5134                              <2> .donecd:
  5135 00003E4B 4F                  <2> 	dec edi
  5136 00003E4C C6072F              <2> 	mov byte [edi], '/'
  5137 00003E4F 47                  <2> 	inc edi
  5138 00003E50 C60700              <2> 	mov byte [edi], 0
  5139 00003E53 81EF[14B80300]      <2> 	sub edi, currentfolder
  5140 00003E59 893D[10B80300]      <2> 	mov [currentfolderloc], edi
  5141 00003E5F C3                  <2> 	ret
  5142                              <2> .moveup:
  5143 00003E60 31C0                <2> 	xor eax, eax
  5144 00003E62 A3[0CB80300]        <2> 	mov [lastfolderloc], eax
  5145                              <2> .moveuploop:
  5146 00003E67 4F                  <2> 	dec edi
  5147 00003E68 8A07                <2> 	mov al, [edi]
  5148 00003E6A 81FF[14B80300]      <2> 	cmp edi, currentfolder
  5149 00003E70 763B                <2> 	jbe .moveupover
  5150 00003E72 3C2F                <2> 	cmp al, '/'
  5151 00003E74 75F1                <2> 	jne .moveuploop
  5152 00003E76 C6072F              <2> 	mov byte [edi], '/'
  5153 00003E79 47                  <2> 	inc edi
  5154 00003E7A C60700              <2> 	mov byte [edi], 0
  5155 00003E7D 81EF[14B80300]      <2> 	sub edi, currentfolder
  5156 00003E83 893D[10B80300]      <2> 	mov [currentfolderloc], edi
  5157 00003E89 81C7[14B80300]      <2> 	add edi, currentfolder
  5158 00003E8F 4F                  <2> 	dec edi
  5159                              <2> .lastfolder:
  5160 00003E90 4F                  <2> 	dec edi
  5161 00003E91 8A07                <2> 	mov al, [edi]
  5162 00003E93 81FF[14B80300]      <2> 	cmp edi, currentfolder
  5163 00003E99 7604                <2> 	jbe .donemoveup
  5164 00003E9B 3C2F                <2> 	cmp al, '/'
  5165 00003E9D 75F1                <2> 	jne .lastfolder
  5166                              <2> .donemoveup:
  5167 00003E9F 47                  <2> 	inc edi
  5168 00003EA0 81EF[14B80300]      <2> 	sub edi, currentfolder
  5169 00003EA6 893D[0CB80300]      <2> 	mov [lastfolderloc], edi
  5170 00003EAC C3                  <2> 	ret
  5171                              <2> .moveupover:
  5172 00003EAD BF[14B80300]        <2> 	mov edi, currentfolder
  5173 00003EB2 C6072F              <2> 	mov byte [edi], '/'
  5174 00003EB5 47                  <2> 	inc edi
  5175 00003EB6 C60700              <2> 	mov byte [edi], 0
  5176 00003EB9 31C0                <2> 	xor eax, eax
  5177 00003EBB A3[0CB80300]        <2> 	mov [lastfolderloc], eax
  5178 00003EC0 40                  <2> 	inc eax
  5179 00003EC1 A3[10B80300]        <2> 	mov [currentfolderloc], eax
  5180 00003EC6 C3                  <2> 	ret
  5181                              <1> %include 'source/programs/charmap.asm'
  5182 00003EC7 00                  <2> charmapnum db 0
  5183 00003EC8 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5184 00003ED1 00                  <2>
  5185 00003ED2 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  5186 00003ED8 81C608000000        <2> 	add esi, 8
  5187 00003EDE 803E00              <2> 	cmp byte [esi], 0
  5188 00003EE1 7412                <2> 	je .nospecific
  5189 00003EE3 E8BAF4FFFF          <2> 	call cnvrthextxt
  5190 00003EE8 6689C8              <2> 	mov ax, cx
  5191 00003EEB 66BB0700            <2> 	mov bx, 7
  5192 00003EEF E818E5FFFF          <2> 	call prcharq
  5193 00003EF4 C3                  <2> 	ret
  5194                              <2> .nospecific:
  5195 00003EF5 66BB0700            <2> 	mov bx, 7
  5196 00003EF9 66B82000            <2> 	mov ax, " "
  5197 00003EFD C605[C73E0000]00    <2> 	mov byte [charmapnum], 0
  5198 00003F04 E803E5FFFF          <2> 	call prcharq
  5199 00003F09 E8FEE4FFFF          <2> 	call prcharq
  5200 00003F0E E8F9E4FFFF          <2> 	call prcharq
  5201 00003F13 E8F4E4FFFF          <2> 	call prcharq
  5202 00003F18 66B83000            <2> 	mov ax, "0"
  5203                              <2> charmapnumprnt:
  5204 00003F1C E8EBE4FFFF          <2> 	call prcharq
  5205 00003F21 6640                <2> 	inc ax
  5206 00003F23 6650                <2> 	push ax
  5207 00003F25 66B82000            <2> 	mov ax, " "
  5208 00003F29 E8DEE4FFFF          <2> 	call prcharq
  5209 00003F2E 6658                <2> 	pop ax
  5210 00003F30 663D3900            <2> 	cmp ax, "9"
  5211 00003F34 76E6                <2> 	jbe charmapnumprnt
  5212 00003F36 66B84100            <2> 	mov ax, "A"
  5213                              <2> charmapnumprnt2:
  5214 00003F3A E8CDE4FFFF          <2> 	call prcharq
  5215 00003F3F 6640                <2> 	inc ax
  5216 00003F41 6650                <2> 	push ax
  5217 00003F43 66B82000            <2> 	mov ax, " "
  5218 00003F47 E8C0E4FFFF          <2> 	call prcharq
  5219 00003F4C 6658                <2> 	pop ax
  5220 00003F4E 663D4700            <2> 	cmp ax, "G"
  5221 00003F52 72E6                <2> 	jb charmapnumprnt2
  5222                              <2> 	
  5223 00003F54 BE[07900000]        <2> 	mov esi, line
  5224 00003F59 E8E1DDFFFF          <2> 	call printquiet
  5225 00003F5E 6631C0              <2> 	xor ax, ax
  5226 00003F61 6689C1              <2> 	mov cx, ax
  5227 00003F64 E8D8F2FFFF          <2> 	call showhexsmall
  5228 00003F69 E96F000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5229                              <2> charmapcopy:
  5230 00003F6E 6640                <2> 	inc ax
  5231 00003F70 663D0800            <2> 	cmp ax, 8
  5232 00003F74 7467                <2> 	je charmapnocopy
  5233 00003F76 663D0900            <2> 	cmp ax, 9
  5234 00003F7A 7461                <2> 	je charmapnocopy
  5235 00003F7C 663D0A00            <2> 	cmp ax, 10
  5236 00003F80 745B                <2> 	je charmapnocopy
  5237 00003F82 663D0D00            <2> 	cmp ax, 13
  5238 00003F86 7455                <2> 	je charmapnocopy
  5239 00003F88 663DFF00            <2> 	cmp ax, 255
  5240 00003F8C 744F                <2> 	je charmapnocopy
  5241 00003F8E 663D0001            <2> 	cmp ax, 256
  5242 00003F92 7448                <2> 	je nomorecharmap
  5243 00003F94 6650                <2> 	push ax
  5244 00003F96 E871E4FFFF          <2> 	call prcharq
  5245 00003F9B 66B82000            <2> 	mov ax, " "
  5246 00003F9F E868E4FFFF          <2> 	call prcharq
  5247 00003FA4 6658                <2> 	pop ax
  5248                              <2> charmapcopycheck:
  5249 00003FA6 FE05[C73E0000]      <2> 	inc byte [charmapnum]
  5250 00003FAC 803D[C73E0000]10    <2> 	cmp byte [charmapnum], 16
  5251 00003FB3 72B9                <2> 	jb charmapcopy
  5252 00003FB5 6650                <2> 	push ax
  5253 00003FB7 BE[07900000]        <2> 	mov esi, line
  5254 00003FBC E87EDDFFFF          <2> 	call printquiet
  5255 00003FC1 6658                <2> 	pop ax
  5256 00003FC3 3CFF                <2> 	cmp al, 255
  5257 00003FC5 7415                <2> 	je nomorecharmap
  5258 00003FC7 88C1                <2> 	mov cl, al
  5259 00003FC9 FEC1                <2> 	inc cl
  5260 00003FCB E871F2FFFF          <2> 	call showhexsmall
  5261 00003FD0 C605[C73E0000]00    <2> 	mov byte [charmapnum], 0
  5262 00003FD7 E992FFFFFF          <2> 	jmp charmapcopy
  5263                              <2> nomorecharmap:
  5264 00003FDC C3                  <2> 	ret
  5265                              <2> charmapnocopy:
  5266 00003FDD 6650                <2> 	push ax
  5267 00003FDF 66B82000            <2> 	mov ax, " "
  5268 00003FE3 E824E4FFFF          <2> 	call prcharq
  5269 00003FE8 E81FE4FFFF          <2> 	call prcharq
  5270 00003FED 6658                <2> 	pop ax
  5271 00003FEF E9B2FFFFFF          <2> 	jmp charmapcopycheck
  5272                              <1> %ifdef gui.included
  5273                              <1> 	%include 'source/programs/circle.asm'
  5274 00003FF4 FF2C636972636C6500  <2> db 255,44,"circle",0
  5275                              <2> circle:
  5276 00003FFD 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  5277 00004003 81C607000000        <2> 	add esi, 7
  5278 00004009 66B91000            <2> 	mov cx, 16
  5279 0000400D 30C0                <2> 	xor al, al
  5280 0000400F 3806                <2> 	cmp [esi], al
  5281 00004011 7405                <2> 	je .nocmdline
  5282 00004013 E8D6F3FFFF          <2> 	call cnvrttxt
  5283                              <2> .nocmdline:
  5284 00004018 E8220D0000          <2> 	call linetester.stime
  5285 0000401D E857000000          <2> 	call fcircle.nocmdline
  5286 00004022 E8300D0000          <2> 	call linetester.etime
  5287 00004027 53                  <2> 	push ebx
  5288 00004028 57                  <2> 	push edi
  5289 00004029 E84BE3FFFF          <2> 	call getchar
  5290 0000402E 59                  <2> 	pop ecx
  5291 0000402F E8DCF2FFFF          <2> 	call showdec
  5292 00004034 BE[E54D0000]        <2> 	mov esi, linetester.msgcircle
  5293 00004039 E801DDFFFF          <2> 	call printquiet
  5294 0000403E 59                  <2> 	pop ecx
  5295 0000403F E8CCF2FFFF          <2> 	call showdec
  5296 00004044 BE[FC4D0000]        <2> 	mov esi, linetester.msgtime
  5297 00004049 E8F1DCFFFF          <2> 	call printquiet
  5298 0000404E E876340000          <2> 	call reloadallgraphics
  5299 00004053 C3                  <2> 	ret
  5300                              <2> 	
  5301 00004054 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5302 0000405D 00                  <2>
  5303                              <2> fcircle:	
  5304 0000405E 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  5305 00004064 81C608000000        <2> 	add esi, 8
  5306 0000406A 66B91000            <2> 	mov cx, 16
  5307 0000406E 30C0                <2> 	xor al, al
  5308 00004070 3806                <2> 	cmp [esi], al
  5309 00004072 7405                <2> 	je .nocmdline
  5310 00004074 E875F3FFFF          <2> 	call cnvrttxt
  5311                              <2> .nocmdline:
  5312 00004079 6689C8              <2> 	mov ax, cx
  5313 0000407C 66D1E1              <2> 	shl cx, 1
  5314 0000407F 6689CA              <2> 	mov dx, cx
  5315 00004082 663B15[5F5B0000]    <2> 	cmp dx, [resolutionx]
  5316 00004089 731B                <2> 	jae .done
  5317 0000408B 663B0D[615B0000]    <2> 	cmp cx, [resolutiony]
  5318 00004092 7312                <2> 	jae .done
  5319 00004094 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2]
  5320 0000409B 31FF                <2> 	xor edi, edi
  5321 0000409D 803D[2C900000]01    <2> 	cmp byte [guion], 1
  5322 000040A4 7401                <2> 	je .lp
  5323 000040A6 C3                  <2> .done ret
  5324                              <2> .lp:
  5325 000040A7 6629C2              <2> 	sub dx, ax
  5326 000040AA 6629C1              <2> 	sub cx, ax
  5327 000040AD 60                  <2> 	pusha
  5328 000040AE E8352F0000          <2> 	call fillcircle
  5329 000040B3 61                  <2> 	popa
  5330 000040B4 47                  <2> 	inc edi
  5331 000040B5 660335[6F020000]    <2> 	add si, [timenanoseconds]
  5332 000040BC 6601C2              <2> 	add dx, ax
  5333 000040BF 6601C2              <2> 	add dx, ax
  5334 000040C2 6601C2              <2> 	add dx, ax
  5335 000040C5 6601C1              <2> 	add cx, ax
  5336 000040C8 663B15[5F5B0000]    <2> 	cmp dx, [resolutionx]
  5337 000040CF 72D6                <2> 	jb .lp
  5338 000040D1 6689C2              <2> 	mov dx, ax
  5339 000040D4 6601C2              <2> 	add dx, ax
  5340 000040D7 6601C1              <2> 	add cx, ax
  5341 000040DA 6601C1              <2> 	add cx, ax
  5342 000040DD 663B0D[615B0000]    <2> 	cmp cx, [resolutiony]
  5343 000040E4 72C1                <2> 	jb .lp
  5344 000040E6 C3                  <2> 	ret
  5345                              <1> %endif
  5346                              <1> %include 'source/programs/clear.asm'
  5347 000040E7 FF2C636C65617200    <2> db 255,44,"clear",0
  5348 000040EF E81EDDFFFF          <2> 		call clear
  5349 000040F4 C3                  <2> 		ret 
  5350                              <1> %include 'source/programs/cpuid.asm'
  5351 000040F5 FF2C637075696400    <2> db 255,44,"cpuid",0
  5352 000040FD 31C0                <2> 	xor eax, eax
  5353 000040FF 0FA2                <2> 	cpuid
  5354 00004101 891D[52410000]      <2> 	mov [cpuidbuf], ebx
  5355 00004107 8915[56410000]      <2> 	mov [cpuidbuf + 4], edx
  5356 0000410D 890D[5A410000]      <2> 	mov [cpuidbuf + 8], ecx
  5357 00004113 BE[52410000]        <2> 	mov esi, cpuidbuf
  5358 00004118 E846DCFFFF          <2> 	call print
  5359 0000411D BE[07900000]        <2> 	mov esi, line
  5360 00004122 E83CDCFFFF          <2> 	call print
  5361 00004127 B801000000          <2> 	mov eax, 1
  5362 0000412C 0FA2                <2> 	cpuid
  5363 0000412E 89C1                <2> 	mov ecx, eax
  5364 00004130 C605[40320000]02    <2> 	mov byte [firsthexshown], 2
  5365 00004137 E819F1FFFF          <2> 	call showhex
  5366 0000413C B808000080          <2> 	mov eax, 0x80000008
  5367 00004141 0FA2                <2> 	cpuid
  5368 00004143 89C1                <2> 	mov ecx, eax
  5369 00004145 C605[40320000]02    <2> 	mov byte [firsthexshown], 2
  5370 0000414C E804F1FFFF          <2> 	call showhex
  5371 00004151 C3                  <2> 	ret
  5372                              <2> 	
  5373 00004152 00<rept>            <2> cpuidbuf times 13 db 0
  5374                              <2> cpuidvendorend:
  5375                              <1> %include 'source/programs/date.asm'
  5376 0000415F 082E30303030303030- <2> timenscache db 8,".000000000"
  5377 00004168 3030                <2>
  5378 0000416A 200A00              <2> timenscacheend: db " ",10,0
  5379 0000416D 00                  <2> istimeset db 0
  5380 0000416E 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5381 00004177 2063757272656E7420- <2>
  5382 00004180 554E49582074696D65- <2>
  5383 00004189 3A0A00              <2>
  5384 0000418C 00<rept>            <2> timeinputbuffer times 12 db 0
  5385 00004198 00                  <2> timeinputbend: db 0
  5386                              <2> 
  5387 00004199 FF2C6461746500      <2> db 255,44,"date",0
  5388                              <2> 	;cmp byte [istimeset], 0
  5389                              <2> 	;jne timeisset
  5390 000041A0 E880000000          <2> 	call time
  5391 000041A5 E828020000          <2> 	call timeconvert	
  5392                              <2> 	; mov esi, settimemsg
  5393                              <2> 	; call print
  5394                              <2> 	; mov esi, timeinputbuffer
  5395                              <2> 	; mov edi, timeinputbend
  5396                              <2> 	; call readline
  5397                              <2> 	; mov esi, timeinputbuffer
  5398                              <2> 	; xor edi, edi
  5399                              <2> 	; call cnvrttxt
  5400 000041AA 890D[6B020000]      <2> 	mov [timeseconds], ecx
  5401                              <2> 	;xor ecx, ecx
  5402                              <2> 	;mov [timenanoseconds], ecx
  5403 000041B0 C605[6D410000]01    <2> 	mov byte [istimeset], 1
  5404                              <2> timeisset:
  5405 000041B7 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  5406 000041BD E84EF1FFFF          <2> 	call showdec
  5407                              <2> 	
  5408 000041C2 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  5409 000041C8 BE[5F410000]        <2> 	mov esi, timenscache
  5410 000041CD C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5411 000041D4 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5412 000041DB C6460A30            <2> 	mov byte [esi + 10], "0"
  5413 000041DF BE[6A410000]        <2> 	mov esi, timenscacheend
  5414 000041E4 E804EFFFFF          <2> 	call convert
  5415 000041E9 BE[5F410000]        <2> 	mov esi, timenscache
  5416 000041EE E84CDBFFFF          <2> 	call printquiet
  5417                              <2> 	
  5418 000041F3 E82D000000          <2> 	call time
  5419 000041F8 BE[40450000]        <2> 	mov esi, timeshow
  5420 000041FD E83DDBFFFF          <2> 	call printquiet
  5421 00004202 BE[07900000]        <2> 	mov esi, line
  5422 00004207 E833DBFFFF          <2> 	call printquiet
  5423 0000420C BE[49450000]        <2> 	mov esi, dateshow
  5424 00004211 E829DBFFFF          <2> 	call printquiet
  5425 00004216 BE[07900000]        <2> 	mov esi, line
  5426 0000421B E81FDBFFFF          <2> 	call printquiet
  5427 00004220 E9BE000000          <2> 	jmp findday
  5428                              <2> time:
  5429 00004225 E851010000          <2> 	call tstackput1
  5430 0000422A B00A                <2> 	mov al,10			;Get RTC register A
  5431 0000422C E87B010000          <2> 	call tget1
  5432 00004231 A880                <2> 	test al,0x80			;Is update in progress?
  5433 00004233 75F0                <2> 	jne time				; yes, wait
  5434                              <2> 
  5435 00004235 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5436 00004237 E870010000          <2> 	call tget1
  5437 0000423C A2[37450000]        <2> 	mov [RTCtimeSecond],al
  5438                              <2> 
  5439 00004241 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5440 00004243 E864010000          <2> 	call tget1
  5441 00004248 A2[38450000]        <2> 	mov [RTCtimeMinute],al
  5442                              <2> 
  5443 0000424D B004                <2> 	mov al,0x04			;Get hours (see notes)
  5444 0000424F E858010000          <2> 	call tget1
  5445 00004254 A2[39450000]        <2> 	mov [RTCtimeHour],al
  5446                              <2> 
  5447 00004259 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5448 0000425B E84C010000          <2> 	call tget1
  5449 00004260 A2[3A450000]        <2> 	mov [RTCtimeDay],al
  5450                              <2> 
  5451 00004265 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5452 00004267 E840010000          <2> 	call tget1
  5453 0000426C 241F                <2> 	and al, 11111b
  5454 0000426E A2[3B450000]        <2> 	mov [RTCtimeMonth],al
  5455                              <2> 
  5456 00004273 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5457 00004275 E832010000          <2> 	call tget1
  5458 0000427A A2[3C450000]        <2> 	mov [RTCtimeYear],al
  5459                              <2> 	
  5460 0000427F BE[40450000]        <2> 	mov esi, timeshow
  5461 00004284 8A2D[39450000]      <2> 	mov ch, [RTCtimeHour]
  5462 0000428A E828010000          <2> 	call tput1
  5463 0000428F 8A2D[38450000]      <2> 	mov ch, [RTCtimeMinute]
  5464 00004295 E81D010000          <2> 	call tput1
  5465 0000429A 8A2D[37450000]      <2> 	mov ch, [RTCtimeSecond]
  5466 000042A0 E812010000          <2> 	call tput1
  5467 000042A5 BE[49450000]        <2> 	mov esi, dateshow
  5468 000042AA 8A2D[3B450000]      <2> 	mov ch, [RTCtimeMonth]
  5469 000042B0 E802010000          <2> 	call tput1
  5470 000042B5 8A2D[3A450000]      <2> 	mov ch, [RTCtimeDay]
  5471 000042BB E8F7000000          <2> 	call tput1
  5472 000042C0 B520                <2> 	mov ch, 0x20
  5473 000042C2 E8F0000000          <2> 	call tput1
  5474 000042C7 4E                  <2> 	dec esi
  5475 000042C8 8A2D[3C450000]      <2> 	mov ch, [RTCtimeYear]
  5476 000042CE E8E4000000          <2> 	call tput1
  5477 000042D3 E8BD000000          <2> 	call tstackget1
  5478 000042D8 C3                  <2> 	ret
  5479 000042D9 BE[40450000]        <2> 	mov esi, timeshow
  5480 000042DE E880DAFFFF          <2> 	call print
  5481                              <2> ;get day of week
  5482                              <2> ;add these:
  5483                              <2> ;century value
  5484                              <2> ;last 2 digits of year
  5485                              <2> ;last 2 digits of year right shifted twice
  5486                              <2> ;month table value
  5487                              <2> ;day of the month
  5488                              <2> ;divide these by 7
  5489                              <2> ;the remainder is the day
  5490                              <2> findday:
  5491 000042E3 31C0                <2> 	xor eax, eax
  5492                              <2> ;first convert the values from BCD to hex
  5493 000042E5 A0[3A450000]        <2> 	mov al, [RTCtimeDay]
  5494 000042EA E873000000          <2> 	call converttohex
  5495 000042EF 8825[3D450000]      <2> 	mov [dayhex], ah
  5496 000042F5 A0[3B450000]        <2> 	mov al, [RTCtimeMonth]
  5497 000042FA E863000000          <2> 	call converttohex
  5498 000042FF 8825[3E450000]      <2> 	mov [monthhex], ah
  5499 00004305 A0[3C450000]        <2> 	mov al, [RTCtimeYear]
  5500 0000430A E853000000          <2> 	call converttohex
  5501 0000430F 8825[3F450000]      <2> 	mov [yearhex], ah
  5502 00004315 31C0                <2> 	xor eax, eax
  5503 00004317 A0[3F450000]        <2> 	mov al, [yearhex]
  5504 0000431C C0E802              <2> 	shr al, 2
  5505 0000431F 0205[3F450000]      <2> 	add al, [yearhex]
  5506 00004325 0506000000          <2> 	add eax, 6
  5507 0000432A 31DB                <2> 	xor ebx, ebx
  5508 0000432C 8A1D[3E450000]      <2> 	mov bl, [monthhex]
  5509 00004332 FECB                <2> 	dec bl
  5510 00004334 81C3[5E450000]      <2> 	add ebx, month
  5511 0000433A 31C9                <2> 	xor ecx, ecx
  5512 0000433C 8A0B                <2> 	mov cl, [ebx]
  5513 0000433E 01C8                <2> 	add eax, ecx
  5514 00004340 8A0D[3D450000]      <2> 	mov cl, [dayhex]
  5515 00004346 01C8                <2> 	add eax, ecx
  5516 00004348 66BB0700            <2> 	mov bx, 7
  5517 0000434C 31D2                <2> 	xor edx, edx
  5518 0000434E 66F7F3              <2> 	div bx
  5519 00004351 C1E202              <2> 	shl edx, 2
  5520 00004354 81C2[6A450000]      <2> 	add edx, day
  5521 0000435A 8B32                <2> 	mov esi, [edx]
  5522 0000435C E802DAFFFF          <2> 	call print
  5523 00004361 C3                  <2> 	ret
  5524                              <2> 	
  5525                              <2> converttohex:
  5526 00004362 88C4                <2> 	mov ah, al
  5527 00004364 C0E804              <2> 	shr al, 4
  5528 00004367 C0E404              <2> 	shl ah, 4
  5529 0000436A C0EC04              <2> 	shr ah, 4
  5530 0000436D 3C00                <2> 	cmp al, 0
  5531 0000436F 7409                <2> 	je noconverttohex
  5532                              <2> converttohexlp:
  5533 00004371 80C40A              <2> 	add ah, 10
  5534 00004374 FEC8                <2> 	dec al
  5535 00004376 3C00                <2> 	cmp al, 0
  5536 00004378 75F7                <2> 	jne converttohexlp
  5537                              <2> noconverttohex:
  5538 0000437A C3                  <2> 	ret
  5539                              <2> 	
  5540                              <2> tstackput1:
  5541 0000437B 8935[33450000]      <2> 	mov [tstack + 20], esi
  5542 00004381 BE[1F450000]        <2> 	mov esi, tstack
  5543 00004386 8906                <2> 	mov [esi], eax
  5544 00004388 895E04              <2> 	mov [esi + 4], ebx
  5545 0000438B 894E08              <2> 	mov [esi + 8], ecx
  5546 0000438E 89560C              <2> 	mov [esi + 12], edx
  5547 00004391 897E10              <2> 	mov [esi + 16], edi
  5548 00004394 C3                  <2> 	ret
  5549                              <2> 	
  5550                              <2> tstackget1:
  5551 00004395 BE[1F450000]        <2> 	mov esi, tstack
  5552 0000439A 8B06                <2> 	mov eax, [esi]
  5553 0000439C 8B5E04              <2> 	mov ebx, [esi + 4]
  5554 0000439F 8B4E08              <2> 	mov ecx, [esi + 8]
  5555 000043A2 8B560C              <2> 	mov edx, [esi + 12]
  5556 000043A5 8B7E10              <2> 	mov edi, [esi + 16]
  5557 000043A8 8B7614              <2> 	mov esi, [esi + 20]
  5558 000043AB C3                  <2> 	ret
  5559                              <2> 	
  5560                              <2> tget1:
  5561 000043AC 66BA7000            <2> 	mov dx, 0x70
  5562 000043B0 EE                  <2> 	out dx, al
  5563 000043B1 6642                <2> 	inc dx
  5564 000043B3 EC                  <2> 	in al, dx
  5565 000043B4 664A                <2> 	dec dx
  5566 000043B6 C3                  <2> 	ret
  5567                              <2> 	
  5568                              <2> tput1:
  5569 000043B7 66C1E904            <2> 	shr cx, 4
  5570 000043BB B030                <2> 	mov al, 48
  5571 000043BD 00E8                <2> 	add al, ch
  5572 000043BF 8806                <2> 	mov [esi], al
  5573 000043C1 46                  <2> 	inc esi
  5574 000043C2 B030                <2> 	mov al, 48
  5575 000043C4 C0E904              <2> 	shr cl, 4
  5576 000043C7 00C8                <2> 	add al, cl
  5577 000043C9 8806                <2> 	mov [esi], al
  5578 000043CB 81C602000000        <2> 	add esi, 2
  5579 000043D1 C3                  <2> 	ret
  5580                              <2> 	
  5581                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5582 000043D2 31DB                <2> 	xor ebx, ebx
  5583 000043D4 31C9                <2> 	xor ecx, ecx
  5584 000043D6 31FF                <2> 	xor edi, edi
  5585 000043D8 31F6                <2> 	xor esi, esi
  5586                              <2> 	
  5587 000043DA A0[37450000]        <2> 	mov al, [RTCtimeSecond]
  5588 000043DF E87EFFFFFF          <2> 	call converttohex
  5589 000043E4 88E1                <2> 	mov cl, ah
  5590                              <2> 	
  5591 000043E6 A0[38450000]        <2> 	mov al, [RTCtimeMinute]
  5592 000043EB E872FFFFFF          <2> 	call converttohex
  5593 000043F0 88E3                <2> 	mov bl, ah
  5594 000043F2 B83C000000          <2> 	mov eax, 60
  5595 000043F7 31D2                <2> 	xor edx, edx
  5596 000043F9 F7E3                <2> 	mul ebx
  5597 000043FB 01C1                <2> 	add ecx, eax
  5598                              <2> 	
  5599 000043FD A0[39450000]        <2> 	mov al, [RTCtimeHour]
  5600 00004402 E85BFFFFFF          <2> 	call converttohex
  5601 00004407 88E3                <2> 	mov bl, ah
  5602 00004409 B8100E0000          <2> 	mov eax, 3600
  5603 0000440E 31D2                <2> 	xor edx, edx
  5604 00004410 F7E3                <2> 	mul ebx
  5605 00004412 01C1                <2> 	add ecx, eax
  5606                              <2> 		
  5607 00004414 31C0                <2> 	xor eax, eax
  5608 00004416 A0[3C450000]        <2> 	mov al, [RTCtimeYear]
  5609 0000441B E842FFFFFF          <2> 	call converttohex
  5610 00004420 6689C6              <2> 	mov si, ax
  5611 00004423 66C1EE08            <2> 	shr si, 8
  5612 00004427 6681FE4600          <2> 	cmp si, 70
  5613 0000442C 7705                <2> 	ja .no100
  5614 0000442E 6681C66400          <2> 	add si, 100
  5615                              <2> .no100:
  5616 00004433 6681C66C07          <2> 	add si, 1900
  5617                              <2> 	
  5618 00004438 BB[11450000]        <2> 	mov ebx, .month
  5619 0000443D A0[3A450000]        <2> 	mov al, [RTCtimeDay]
  5620 00004442 E81BFFFFFF          <2> 	call converttohex
  5621 00004447 88E0                <2> 	mov al, ah
  5622 00004449 FEC8                <2> 	dec al
  5623 0000444B 31D2                <2> 	xor edx, edx
  5624 0000444D 88C2                <2> 	mov dl, al
  5625 0000444F A0[3B450000]        <2> 	mov al, [RTCtimeMonth]
  5626 00004454 E809FFFFFF          <2> 	call converttohex
  5627 00004459 88D0                <2> 	mov al, dl
  5628 0000445B 88E2                <2> 	mov dl, ah
  5629 0000445D 30E4                <2> 	xor ah, ah
  5630 0000445F 6689D5              <2> 	mov bp, dx
  5631                              <2> 	
  5632 00004462 6689F7              <2> 	mov di, si
  5633 00004465 66C1EF02            <2> 	shr di, 2
  5634 00004469 66C1E702            <2> 	shl di, 2
  5635 0000446D C605[12450000]1C    <2> 	mov byte [.month + 1], 28
  5636 00004474 6639F7              <2> 	cmp di, si
  5637 00004477 7506                <2> 	jne .nofebmod
  5638 00004479 FE05[12450000]      <2> 	inc byte [.month + 1]
  5639                              <2> .nofebmod:
  5640 0000447F 664D                <2> 	dec bp
  5641 00004481 6681FD0000          <2> 	cmp bp, 0
  5642 00004486 740A                <2> 	je .ylp
  5643 00004488 8A13                <2> 	mov dl, [ebx]
  5644 0000448A 01D0                <2> 	add eax, edx
  5645 0000448C 43                  <2> 	inc ebx
  5646 0000448D E9EDFFFFFF          <2> 	jmp .nofebmod
  5647                              <2> 	
  5648                              <2> .ylp:
  5649 00004492 6689F7              <2> 	mov di, si
  5650 00004495 66C1EF02            <2> 	shr di, 2
  5651 00004499 66C1E702            <2> 	shl di, 2
  5652 0000449D 81C18033E101        <2> 	add ecx, 31536000
  5653 000044A3 6639F7              <2> 	cmp di, si
  5654 000044A6 7506                <2> 	jne .noymod
  5655 000044A8 81C180510100        <2> 	add ecx, 86400
  5656                              <2> .noymod:
  5657 000044AE 664E                <2> 	dec si
  5658 000044B0 6681FEB207          <2> 	cmp si, 1970
  5659 000044B5 77DB                <2> 	ja .ylp
  5660                              <2> 	
  5661 000044B7 BB80510100          <2> 	mov ebx, 86400
  5662 000044BC 31D2                <2> 	xor edx, edx
  5663 000044BE F7E3                <2> 	mul ebx
  5664 000044C0 01C1                <2> 	add ecx, eax
  5665                              <2> 	
  5666 000044C2 31DB                <2> 	xor ebx, ebx
  5667 000044C4 31D2                <2> 	xor edx, edx
  5668 000044C6 B8100E0000          <2> 	mov eax, 3600
  5669 000044CB 8A3D[1D450000]      <2> 	mov bh, [timezoneh]
  5670 000044D1 80FF80              <2> 	cmp bh, 128
  5671 000044D4 720D                <2> 	jb .posh
  5672 000044D6 28FB                <2> 	sub bl, bh
  5673 000044D8 30FF                <2> 	xor bh, bh
  5674 000044DA F7E3                <2> 	mul ebx
  5675 000044DC 01C1                <2> 	add ecx, eax
  5676 000044DE E906000000          <2> 	jmp .doneth
  5677                              <2> .posh:
  5678 000044E3 86DF                <2> 	xchg bl, bh
  5679 000044E5 F7E3                <2> 	mul ebx
  5680 000044E7 29C1                <2> 	sub ecx, eax
  5681                              <2> .doneth:
  5682                              <2> 
  5683 000044E9 31DB                <2> 	xor ebx, ebx	
  5684 000044EB 31D2                <2> 	xor edx, edx
  5685 000044ED B83C000000          <2> 	mov eax, 60
  5686 000044F2 8A3D[1E450000]      <2> 	mov bh, [timezonem]
  5687 000044F8 80FF80              <2> 	cmp bh, 128
  5688 000044FB 720D                <2> 	jb .posm
  5689 000044FD 28FB                <2> 	sub bl, bh
  5690 000044FF 30FF                <2> 	xor bh, bh
  5691 00004501 F7E3                <2> 	mul ebx
  5692 00004503 01C1                <2> 	add ecx, eax
  5693 00004505 E906000000          <2> 	jmp .donetm
  5694                              <2> .posm:
  5695 0000450A 86DF                <2> 	xchg bl, bh
  5696 0000450C F7E3                <2> 	mul ebx
  5697 0000450E 29C1                <2> 	sub ecx, eax
  5698                              <2> .donetm:
  5699                              <2> 
  5700 00004510 C3                  <2> 	ret
  5701                              <2> 	
  5702                              <2> 
  5703 00004511 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5704 0000451A 1F1E1F              <2>
  5705                              <2> 
  5706 0000451D FA                  <2> 	timezoneh db -6
  5707 0000451E 00                  <2> 	timezonem db 0
  5708 0000451F 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5709 00004528 000000000000000000- <2>
  5710 00004531 000000000000        <2>
  5711 00004537 00                  <2> 	RTCtimeSecond db 0
  5712 00004538 00                  <2> 	RTCtimeMinute db 0
  5713 00004539 00                  <2> 	RTCtimeHour db 0
  5714 0000453A 00                  <2> 	RTCtimeDay db 0
  5715 0000453B 00                  <2> 	RTCtimeMonth db 0
  5716 0000453C 00                  <2> 	RTCtimeYear db 0
  5717 0000453D 00                  <2> 	dayhex db 0
  5718 0000453E 00                  <2> 	monthhex db 0
  5719 0000453F 00                  <2> 	yearhex db 0
  5720 00004540 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5721 00004549 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5722 00004552 302000              <2>
  5723                              <2> 	oldcentury:	;from 1700 to 1900
  5724 00004555 040200              <2> 	db 4,2,0
  5725                              <2> 	century:	;from 2000 to 2500
  5726 00004558 060402000604        <2> 	db 6,4,2,0,6,4
  5727                              <2> 	month:
  5728 0000455E 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5729 00004567 000305              <2>
  5730                              <2> 	day:
  5731 0000456A [86450000]          <2> 	dd sunday
  5732 0000456E [8E450000]          <2> 	dd monday
  5733 00004572 [96450000]          <2> 	dd tuesday
  5734 00004576 [9F450000]          <2> 	dd wednesday
  5735 0000457A [AA450000]          <2> 	dd thursday
  5736 0000457E [B4450000]          <2> 	dd friday
  5737 00004582 [BC450000]          <2> 	dd saturday
  5738                              <2> sunday:
  5739 00004586 53756E6461790A00    <2> 	db "Sunday",10,0
  5740                              <2> monday:
  5741 0000458E 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5742                              <2> tuesday:
  5743 00004596 547565736461790A00  <2> 	db "Tuesday",10,0
  5744                              <2> wednesday:
  5745 0000459F 5765646E6573646179- <2> 	db "Wednesday",10,0
  5746 000045A8 0A00                <2>
  5747                              <2> thursday:
  5748 000045AA 54687572736461790A- <2> 	db "Thursday",10,0
  5749 000045B3 00                  <2>
  5750                              <2> friday:
  5751 000045B4 4672696461790A00    <2> 	db "Friday",10,0
  5752                              <2> saturday:
  5753 000045BC 53617475726461790A- <2> 	db "Saturday",10,0
  5754 000045C5 00                  <2>
  5755                              <1> %ifdef network.included
  5756                              <1> 	%include 'source/programs/dhcp.asm'
  5757 000045C6 FF2C6468637000      <2> db 255,44,"dhcp",0
  5758                              <2> dhcp:
  5759 000045CD BE[8D460000]        <2> 	mov esi, .dhcp.mac
  5760 000045D2 BB[6D470000]        <2> 	mov ebx, .dhcp.option.mac
  5761 000045D7 BF[4D460000]        <2> 	mov edi, .mac
  5762 000045DC 31C9                <2> 	xor ecx, ecx
  5763 000045DE 66890D[5F460000]    <2> 	mov [.ip.checksum], cx
  5764 000045E5 66890D[6F460000]    <2> 	mov [.udp.checksum], cx
  5765 000045EC 8B0D[C08F0000]      <2> 	mov ecx, [sysmac]
  5766 000045F2 890B                <2> 	mov [ebx], ecx
  5767 000045F4 890F                <2> 	mov [edi], ecx
  5768 000045F6 890E                <2> 	mov [esi], ecx
  5769 000045F8 668B0D[C48F0000]    <2> 	mov cx, [sysmac + 4]
  5770 000045FF 66894B04            <2> 	mov [ebx + 4], cx
  5771 00004603 66894E04            <2> 	mov [esi + 4], cx
  5772 00004607 66894F04            <2> 	mov [edi + 4], cx
  5773 0000460B BF[55460000]        <2> 	mov edi, .ip.header
  5774 00004610 BE[69460000]        <2> 	mov esi, .ip.headerend
  5775 00004615 E89D480000          <2> 	call getchecksum
  5776 0000461A 66890D[5F460000]    <2> 	mov [.ip.checksum], cx
  5777 00004621 BF[69460000]        <2> 	mov edi, .udp.header
  5778 00004626 BE[84470000]        <2> 	mov esi, .udp.end
  5779 0000462B E887480000          <2> 	call getchecksum
  5780 00004630 66890D[6F460000]    <2> 	mov [.udp.checksum], cx
  5781 00004637 BF[47460000]        <2> 	mov edi, .frame
  5782 0000463C BE[84470000]        <2> 	mov esi, .udp.end
  5783 00004641 E867480000          <2> 	call sendpacket
  5784 00004646 C3                  <2> 	ret
  5785                              <2> 
  5786                              <2> .frame:
  5787 00004647 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5788 0000464D 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5789 00004653 0800                <2> 	db 8,0
  5790                              <2> .ip.header:
  5791 00004655 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5792 00004656 00                  <2> 	db 0
  5793 00004657 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header) % 256
  5794 00004659 0000                <2> 	dw 0
  5795 0000465B 0000                <2> 	dw 0
  5796 0000465D 80                  <2> 	db 0x80
  5797 0000465E 11                  <2> 	db 17
  5798 0000465F 0000                <2> .ip.checksum dw 0
  5799 00004661 00000000            <2> 	db 0,0,0,0
  5800 00004665 FFFFFFFF            <2> 	db 255,255,255,255	
  5801                              <2> .ip.headerend:
  5802                              <2> .udp.header:
  5803 00004669 0044                <2> 	db 0,68	;source port
  5804 0000466B 0043                <2> 	db 0,67 ;destination port
  5805 0000466D 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header) % 256
  5806 0000466F 0000                <2> .udp.checksum dw 0
  5807                              <2> .udp.headerend:
  5808                              <2> .dhcp.data:
  5809 00004671 01                  <2> 	db 1	;message type
  5810 00004672 01                  <2> 	db 1	;hardware type
  5811 00004673 06                  <2> 	db 6	;hardware address length
  5812 00004674 00                  <2> 	db 0	;hops
  5813 00004675 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5814 00004679 0000                <2> 	db 0,0	;seconds elapsed
  5815 0000467B 0000                <2> 	db 0,0	;flags
  5816 0000467D 00000000            <2> 	db 0,0,0,0	;client ip address
  5817 00004681 00000000            <2> 	db 0,0,0,0	;your ip address
  5818 00004685 00000000            <2> 	db 0,0,0,0	;server ip address
  5819 00004689 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5820 0000468D 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5821 00004693 00<rept>            <2> 	times 10 db 0	;padding
  5822 0000469D 00<rept>            <2> 	times 64 db 0	;server host name
  5823 000046DD 00<rept>            <2> 	times 128 db 0	;boot file name
  5824 0000475D 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5825                              <2> .dhcp.option.type:
  5826 00004761 350103              <2> 	db 53,1,3	;DHCP Request
  5827 00004764 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5828 0000476A 3D07                <2> 	db 61,7 ;client id(mac)
  5829 0000476C 01                  <2> 	db 1	;Type=Ethernet
  5830 0000476D 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5831 00004773 0C08                <2> 	db 12,8 ;host name
  5832 00004775 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5833 0000477D 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5834 00004783 FF                  <2> 	db 0xFF	;end DHCP options
  5835                              <2> .dhcp.end:
  5836                              <2> .udp.end:
  5837                              <2> 	
  5838                              <1> %endif
  5839                              <1> %ifdef disk.none
  5840                              <1> %else
  5841                              <1> 	%include 'source/programs/dos.asm'
  5842 00004784 FF2C646F7300        <2> db 255,44,"dos",0
  5843                              <2> dosrunner:
  5844 0000478A 8925[08B80300]      <2> 	mov [previousstack], esp
  5845 00004790 8B3D[0C300000]      <2> 	mov edi, [currentcommandloc]
  5846 00004796 81C704000000        <2> 	add edi, 4
  5847 0000479C BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5848 000047A1 E873240000          <2> 	call loadfile
  5849 000047A6 8B3D[0C300000]      <2> 	mov edi, [currentcommandloc]
  5850 000047AC 81C704000000        <2> 	add edi, 4
  5851 000047B2 81FA94010000        <2> 	cmp edx, 404
  5852 000047B8 0F845E000000        <2> 	je near .noprogfound
  5853 000047BE BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5854 000047C3 31C9                <2> 	xor ecx, ecx
  5855                              <2> .findparams:
  5856 000047C5 47                  <2> 	inc edi
  5857 000047C6 8A07                <2> 	mov al, [edi]
  5858 000047C8 3C20                <2> 	cmp al, " "
  5859 000047CA 75F9                <2> 	jne .findparams
  5860                              <2> .copyparams:
  5861 000047CC 8A07                <2> 	mov al, [edi]
  5862 000047CE 8803                <2> 	mov [ebx], al
  5863 000047D0 43                  <2> 	inc ebx
  5864 000047D1 47                  <2> 	inc edi
  5865 000047D2 41                  <2> 	inc ecx
  5866 000047D3 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5867 000047D9 7304                <2> 	jae .nomoreparams
  5868 000047DB 3C00                <2> 	cmp al, 0
  5869 000047DD 75ED                <2> 	jne .copyparams
  5870                              <2> .nomoreparams:
  5871 000047DF 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5872 000047E5 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5873 000047E9 8ED8                <2> 	mov ds, ax
  5874 000047EB 8EC0                <2> 	mov es, ax
  5875 000047ED 8EE0                <2> 	mov fs, ax
  5876 000047EF 8EE8                <2> 	mov gs, ax
  5877 000047F1 31C0                <2> 	xor eax, eax
  5878 000047F3 31DB                <2> 	xor ebx, ebx
  5879 000047F5 31C9                <2> 	xor ecx, ecx
  5880 000047F7 31D2                <2> 	xor edx, edx
  5881 000047F9 31FF                <2> 	xor edi, edi
  5882 000047FB 31F6                <2> 	xor esi, esi
  5883 000047FD 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5884 00004804 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5885 00004808 6689DA              <2> 	mov dx, bx
  5886 0000480B 8EC3                <2> 	mov es, bx
  5887 0000480D 8EE3                <2> 	mov fs, bx
  5888 0000480F 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5889 00004813 8EEB                <2> 	mov gs, bx
  5890 00004815 8B25[08B80300]      <2> 	mov esp, [previousstack]
  5891 0000481B C3                  <2> 	ret
  5892                              <2> .noprogfound:
  5893 0000481C BE[CE8F0000]        <2> 	mov esi, notfound1
  5894 00004821 E83DD5FFFF          <2> 	call print
  5895 00004826 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  5896 0000482C 81C604000000        <2> 	add esi, 4
  5897 00004832 E82CD5FFFF          <2> 	call print
  5898 00004837 BE[D68F0000]        <2> 	mov esi, notfound2
  5899 0000483C E822D5FFFF          <2> 	call print
  5900 00004841 C3                  <2> 	ret
  5901                              <2> 	
  5902                              <1> %endif
  5903                              <1> %include 'source/programs/dump.asm'
  5904 00004842 FF2C64756D7000      <2> db 255,44,"dump",0
  5905 00004849 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  5906 0000484F 81C605000000        <2> 	add esi, 5
  5907 00004855 31C9                <2> 	xor ecx, ecx
  5908 00004857 66B83078            <2> 	mov ax, "0x"
  5909 0000485B 663906              <2> 	cmp [esi], ax
  5910 0000485E 740A                <2> 	je dumphexin
  5911 00004860 E889EBFFFF          <2> 	call cnvrttxt
  5912 00004865 E910000000          <2> 	jmp dumphexnow
  5913                              <2> dumphexin:
  5914 0000486A 81C602000000        <2> 	add esi, 2
  5915 00004870 E82DEBFFFF          <2> 	call cnvrthextxt
  5916 00004875 E900000000          <2> 	jmp dumphexnow
  5917                              <2> dumphexnow:
  5918 0000487A 89CF                <2> 	mov edi, ecx
  5919 0000487C 89FE                <2> 	mov esi, edi
  5920 0000487E 81C680030000        <2> 	add esi, 896
  5921                              <2> dumphexloop:
  5922 00004884 8B0F                <2> 	mov ecx, [edi]
  5923 00004886 C605[40320000]05    <2> 	mov byte [firsthexshown],5
  5924 0000488D E8C3E9FFFF          <2> 	call showhex
  5925 00004892 81C704000000        <2> 	add edi, 4
  5926 00004898 39F7                <2> 	cmp edi, esi
  5927 0000489A 72E8                <2> 	jb dumphexloop
  5928 0000489C E845E0FFFF          <2> 	call termcopy
  5929 000048A1 C3                  <2> 	ret 
  5930                              <1> %include 'source/programs/echo.asm'
  5931 000048A2 FF2C6563686F00      <2> db 255,44,"echo",0
  5932                              <2> 	echoprog:
  5933 000048A9 8B35[0C300000]      <2> 		mov esi, [currentcommandloc]
  5934 000048AF 81C605000000        <2> 		add esi, 5
  5935 000048B5 8A06                <2> 		mov al, [esi]
  5936 000048B7 E883D4FFFF          <2> 		call printquiet
  5937 000048BC E89DD4FFFF          <2> 		call printline
  5938 000048C1 C3                  <2> 		ret
  5939 000048C2 BB[88BA0300]        <2> 	echovr:	mov ebx, variables
  5940 000048C7 BF06000000          <2> 		mov edi, 6
  5941 000048CC E83F000000          <2> 		call nxtvrech
  5942 000048D1 E95A000000          <2> 		jmp prntvr2
  5943 000048D6 B13D                <2> 	echvar:	mov cl, '='
  5944 000048D8 43                  <2> 		inc ebx
  5945 000048D9 8A03                <2> 		mov al, [ebx]
  5946 000048DB 3C00                <2> 		cmp al, 0
  5947 000048DD 7431                <2> 		je nxtvrech
  5948 000048DF 3C3D                <2> 		cmp al, '='
  5949 000048E1 7422                <2> 		je nxtvrechb1
  5950 000048E3 8B35[0C300000]      <2> 		mov esi, [currentcommandloc]
  5951 000048E9 01FE                <2> 		add esi, edi
  5952 000048EB E861E7FFFF          <2> 		call cndtest
  5953 000048F0 3C02                <2> 		cmp al, 2
  5954 000048F2 7438                <2> 		je prntvr
  5955 000048F4 3C01                <2> 		cmp al, 1
  5956 000048F6 7434                <2> 		je prntvr
  5957 000048F8 8B35[0C300000]      <2> 		mov esi, [currentcommandloc]
  5958 000048FE 01FE                <2> 		add esi, edi
  5959 00004900 E90B000000          <2> 		jmp nxtvrech
  5960                              <2> 	nxtvrechb1:
  5961 00004905 81EB02000000        <2> 		sub ebx, 2
  5962 0000490B E9C6FFFFFF          <2> 		jmp echvar
  5963 00004910 8A03                <2> 	nxtvrech: mov al, [ebx]
  5964 00004912 3C05                <2> 		cmp al, 5
  5965 00004914 740A                <2> 		je nxtvrec2
  5966 00004916 43                  <2> 		inc ebx
  5967 00004917 81FB[88CA0300]      <2> 		cmp ebx, varend
  5968 0000491D 72F1                <2> 		jb nxtvrech
  5969 0000491F C3                  <2> 		ret
  5970 00004920 43                  <2> 	nxtvrec2: inc ebx
  5971 00004921 8A03                <2> 		mov al, [ebx]
  5972 00004923 3C04                <2> 		cmp al, 4
  5973 00004925 74AF                <2> 		je echvar
  5974 00004927 E9E4FFFFFF          <2> 		jmp nxtvrech
  5975 0000492C 43                  <2> 	prntvr: inc ebx
  5976 0000492D 89DE                <2> 		mov esi, ebx
  5977 0000492F C3                  <2> 		ret
  5978 00004930 E82ED4FFFF          <2> 	prntvr2: call print
  5979 00004935 BE[07900000]        <2> 		mov esi, line
  5980 0000493A E824D4FFFF          <2> 		call print
  5981 0000493F C3                  <2> 		ret 
  5982                              <1> %include 'source/programs/else.asm'
  5983 00004940 FF2C656C736500      <2> 	db 255,44,"else",0
  5984 00004947 31C0                <2> elsecmd:	xor eax, eax
  5985 00004949 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  5986 0000494F 0F8434F2FFFF        <2> 	je near notbatch
  5987 00004955 A0[19BA0300]        <2> 	mov al, [IFON]
  5988 0000495A BE[1ABA0300]        <2> 	mov esi, IFTRUE
  5989 0000495F 01C6                <2> 	add esi, eax
  5990 00004961 8A06                <2> 	mov al, [esi]
  5991 00004963 3401                <2> 	xor al, 1
  5992 00004965 8806                <2> 	mov [esi], al
  5993 00004967 C3                  <2> 	ret 
  5994                              <1> %include 'source/programs/exit.asm'
  5995 00004968 FF2C6578697400      <2> db 255,44,"exit",0
  5996 0000496F 803D[18BA0300]01    <2> 	cmp byte [ranboot], 1
  5997 00004976 0F8459E3FFFF        <2> 	je near returnfromexp
  5998 0000497C E938E2FFFF          <2> 	jmp nobootfile
  5999                              <1> %include 'source/programs/fi.asm'
  6000 00004981 FF2C666900          <2> 	db 255,44,"fi",0
  6001 00004986 30C0                <2> 	xor al, al
  6002 00004988 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  6003 0000498E 0F84F5F1FFFF        <2> 	je near notbatch
  6004 00004994 B001                <2> fi:	mov al, 1
  6005 00004996 2805[19BA0300]      <2> 	sub [IFON],al
  6006 0000499C C3                  <2> 	ret 
  6007                              <1> %ifdef gui.included
  6008                              <1> 	%include 'source/programs/gui.asm'
  6009 0000499D FF2C67756900        <2> db 255,44,"gui",0
  6010                              <2> guiswitcher:
  6011 000049A3 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  6012 000049A9 81C604000000        <2> 	add esi, 4
  6013 000049AF 31C9                <2> 	xor ecx, ecx
  6014 000049B1 803E00              <2> 	cmp byte [esi], 0
  6015 000049B4 740A                <2> 	je .nomodepref
  6016 000049B6 E8E7E9FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  6017 000049BB E907000000          <2> 	jmp .modepref
  6018                              <2> .nomodepref:
  6019 000049C0 51                  <2> 	push ecx
  6020 000049C1 E84CD4FFFF          <2> 	call clear
  6021 000049C6 59                  <2> 	pop ecx
  6022                              <2> .modepref:
  6023 000049C7 66C705[F70C0000]-   <2> 	mov word [realmodeptr], guiswitch
  6024 000049CE [5B57]              <2>
  6025 000049D0 E810C2FFFF          <2> 	call realmode
  6026                              <2> guiswitchret:
  6027 000049D5 65803D[2C900000]01  <2> 	cmp byte [gs:guion], 1
  6028 000049DD 7401                <2> 	je .cont
  6029 000049DF C3                  <2> 	ret
  6030                              <2> .cont:
  6031 000049E0 BF[4D590000]        <2> 	mov edi, VBEMODEBLOCK
  6032                              <2> .loop:
  6033 000049E5 658B07              <2> 	mov eax, [gs:edi]
  6034 000049E8 8907                <2> 	mov [edi], eax
  6035 000049EA 47                  <2> 	inc edi
  6036 000049EB 81FF[515C0000]      <2> 	cmp edi, VBEEND
  6037 000049F1 72F2                <2> 	jb .loop
  6038 000049F3 A1[755B0000]        <2> 	mov eax, [physbaseptr]
  6039 000049F8 8B1D[4B020000]      <2> 	mov ebx, [basecache]
  6040 000049FE C1E304              <2> 	shl ebx, 4
  6041 00004A01 29D8                <2> 	sub eax, ebx
  6042 00004A03 A3[755B0000]        <2> 	mov [physbaseptr], eax
  6043 00004A08 C605[0A240000]00    <2> 	mov byte [termguion], 0
  6044 00004A0F BE[9DD20300]        <2> 	mov esi, graphicstable
  6045 00004A14 30C0                <2> 	xor al, al
  6046                              <2> .clear:
  6047 00004A16 8806                <2> 	mov [esi], al
  6048 00004A18 46                  <2> 	inc esi
  6049 00004A19 81FE[9DD40300]      <2> 	cmp esi, graphicstableend
  6050 00004A1F 72F5                <2> 	jb .clear
  6051 00004A21 E84E2C0000          <2> 	call guisetup
  6052                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6053 00004A26 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  6054 00004A2D 668B0D[615B0000]    <2> 	mov cx, [resolutiony]
  6055 00004A34 6689D3              <2> 	mov bx, dx
  6056 00004A37 6689C8              <2> 	mov ax, cx
  6057 00004A3A 66D1EB              <2> 	shr bx, 1
  6058 00004A3D 66D1E8              <2> 	shr ax, 1
  6059 00004A40 6689DA              <2> 	mov dx, bx
  6060 00004A43 66D1EA              <2> 	shr dx, 1
  6061 00004A46 6689C1              <2> 	mov cx, ax
  6062 00004A49 66D1E9              <2> 	shr cx, 1
  6063 00004A4C 6601D3              <2> 	add bx, dx
  6064 00004A4F 6601C8              <2> 	add ax, cx
  6065 00004A52 66D1E9              <2> 	shr cx, 1
  6066 00004A55 66C1EB03            <2> 	shr bx, 3
  6067 00004A59 66C1E303            <2> 	shl bx, 3
  6068 00004A5D 66C1E804            <2> 	shr ax, 4
  6069 00004A61 66C1E004            <2> 	shl ax, 4
  6070 00004A65 66891D[79780000]    <2> 	mov [termwindow], bx
  6071 00004A6C 66A3[7B780000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6072 00004A72 BE[79780000]        <2> 	mov esi, termwindow
  6073 00004A77 31DB                <2> 	xor ebx, ebx
  6074 00004A79 6631C0              <2> 	xor ax, ax
  6075 00004A7C E831330000          <2> 	call showwindow
  6076 00004A81 E8CC110000          <2> 	call cursorgui
  6077 00004A86 E887D3FFFF          <2> 	call clear
  6078 00004A8B C3                  <2> 	ret
  6079                              <2> 	
  6080                              <1> %endif
  6081                              <1> %include 'source/programs/help.asm'
  6082 00004A8C FF2C68656C7000      <2> db 255,44,"help",0
  6083                              <2> lscmd:	
  6084 00004A93 B00D                <2> 		mov al, 13
  6085 00004A95 E872D9FFFF          <2> 		call prcharq
  6086 00004A9A BE[B4340000]        <2> 		mov esi, progstart
  6087 00004A9F BB[5B570000]        <2> 		mov ebx, progend
  6088 00004AA4 BE[08B40300]        <2> dir:	mov esi, fileindex
  6089 00004AA9 8A06                <2> 	dirnxt:	mov al, [esi]
  6090 00004AAB 30E4                <2> 		xor ah, ah
  6091 00004AAD 3CFF                <2> 		cmp al, 255
  6092 00004AAF 7418                <2> 		je dirfnd
  6093 00004AB1 46                  <2> 		inc esi
  6094 00004AB2 81FE[08B80300]      <2> 		cmp esi,  fileindexend
  6095 00004AB8 7342                <2> 		jae dirdn
  6096 00004ABA E9EAFFFFFF          <2> 		jmp dirnxt
  6097                              <2> 	dirfnd3:
  6098 00004ABF 46                  <2> 		inc esi
  6099 00004AC0 81FE[08B80300]      <2> 		cmp esi, fileindexend
  6100 00004AC6 76E1                <2> 		jbe dirnxt
  6101 00004AC8 4E                  <2> 		dec esi
  6102 00004AC9 46                  <2> 	dirfnd:	inc esi
  6103 00004ACA 8A06                <2> 		mov al, [esi]
  6104 00004ACC 30E4                <2> 		xor ah, ah
  6105 00004ACE 3C2C                <2> 		cmp al, 44
  6106 00004AD0 740E                <2> 		je dirfnd2
  6107 00004AD2 46                  <2> 		inc esi
  6108 00004AD3 81FE[08B80300]      <2> 		cmp esi,  fileindexend
  6109 00004AD9 7321                <2> 		jae dirdn
  6110 00004ADB E9C9FFFFFF          <2> 		jmp dirnxt
  6111 00004AE0 46                  <2> 	dirfnd2: inc esi
  6112 00004AE1 E859D2FFFF          <2> 		call printquiet
  6113 00004AE6 56                  <2> 		push esi
  6114 00004AE7 B009                <2> 		mov al, 9
  6115 00004AE9 E81ED9FFFF          <2> 		call prcharq
  6116 00004AEE 5E                  <2> 		pop esi
  6117 00004AEF 81FE[08B80300]      <2> 		cmp esi,  fileindexend
  6118 00004AF5 7305                <2> 		jae dirdn
  6119 00004AF7 E9ADFFFFFF          <2> 		jmp dirnxt
  6120 00004AFC BE[07900000]        <2> 	dirdn:	mov esi, line
  6121 00004B01 E85DD2FFFF          <2> 			call print
  6122 00004B06 C3                  <2> 			ret
  6123 00004B07 00                  <2> currentdir db 0
  6124                              <1> %include 'source/programs/if.asm'
  6125 00004B08 FF2C696600          <2> 	db 255,44,"if",0
  6126 00004B0D 30C0                <2> ifcmd:	xor al, al
  6127 00004B0F 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  6128 00004B15 0F846EF0FFFF        <2> 	je near notbatch
  6129 00004B1B 8B1D[0C300000]      <2> 	mov ebx, [currentcommandloc]
  6130 00004B21 81C303000000        <2> 	add ebx, 3
  6131 00004B27 89DE                <2> 	mov esi, ebx
  6132 00004B29 8A06                <2> chkeqsn: mov al, [esi]
  6133 00004B2B 3C00                <2> 	cmp al, 0
  6134 00004B2D 0F8456F0FFFF        <2> 	je near notbatch
  6135 00004B33 3C3D                <2> 	cmp al, '='
  6136 00004B35 0F8406000000        <2> 	je near chkeqdn
  6137 00004B3B 46                  <2> 	inc esi
  6138 00004B3C E9E8FFFFFF          <2> 	jmp chkeqsn
  6139 00004B41 B000                <2> chkeqdn: mov al, 0 
  6140 00004B43 8806                <2> 	mov [esi], al
  6141 00004B45 46                  <2> 	inc esi
  6142 00004B46 E8C5E4FFFF          <2> 	call tester
  6143 00004B4B 3C01                <2> 	cmp al, 1
  6144 00004B4D 0F8405000000        <2> 	je near trueif
  6145 00004B53 E91C000000          <2> 	jmp falseif
  6146 00004B58 31C0                <2> trueif:	xor eax, eax
  6147 00004B5A A0[19BA0300]        <2> 	mov al, [IFON]
  6148 00004B5F FEC0                <2> 	inc al
  6149 00004B61 A2[19BA0300]        <2> 	mov [IFON], al
  6150 00004B66 30E4                <2> 	xor ah, ah
  6151 00004B68 BE[1ABA0300]        <2> 	mov esi, IFTRUE
  6152 00004B6D 01C6                <2> 	add esi, eax
  6153 00004B6F B401                <2> 	mov ah, 1
  6154 00004B71 8826                <2> 	mov [esi], ah
  6155 00004B73 C3                  <2> 	ret 
  6156 00004B74 31C0                <2> falseif: xor eax, eax
  6157 00004B76 A0[19BA0300]        <2> 	mov al, [IFON]
  6158 00004B7B FEC0                <2> 	inc al
  6159 00004B7D A2[19BA0300]        <2> 	mov [IFON], al
  6160 00004B82 30E4                <2> 	xor ah, ah
  6161 00004B84 BE[1ABA0300]        <2> 	mov esi, IFTRUE
  6162 00004B89 01C6                <2> 	add esi, eax
  6163 00004B8B 30E4                <2> 	xor ah, ah
  6164 00004B8D 8826                <2> 	mov [esi], ah
  6165 00004B8F C3                  <2> 	ret 
  6166                              <1> %ifdef network.included
  6167                              <1> 	%include 'source/programs/ipconfig.asm'
  6168 00004B90 FF2C6966636F6E6669- <2> db 255,44,"ifconfig",0
  6169 00004B99 6700                <2>
  6170                              <2> ifconfig:
  6171 00004B9B 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  6172 00004BA1 81C609000000        <2> 	add esi, 9
  6173 00004BA7 803E00              <2> 	cmp byte [esi], 0
  6174 00004BAA 740B                <2> 	je .noip
  6175 00004BAC E82E430000          <2> 	call strtoip
  6176 00004BB1 890D[BC8F0000]      <2> 	mov [sysip], ecx
  6177                              <2> .noip:
  6178                              <2> %ifdef ne2000.included
  6179 00004BB7 803D[738E0000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  6180 00004BBE 7519                <2> 	jne .none2000
  6181 00004BC0 BE[748E0000]        <2> 	mov esi, ne2000.name
  6182 00004BC5 E899D1FFFF          <2> 	call print
  6183 00004BCA B9[968E0000]        <2> 	mov ecx, ne2000.mac
  6184 00004BCF E881430000          <2> 	call showmac
  6185 00004BD4 E885D1FFFF          <2> 	call printline
  6186                              <2> .none2000:
  6187                              <2> %endif
  6188                              <2> %ifdef rtl8139.included
  6189                              <2> 	cmp byte [rtl8139.nicconfig], 1
  6190                              <2> 	jne .nortl8139
  6191                              <2> 	mov esi, rtl8139.name
  6192                              <2> 	call print
  6193                              <2> 	mov ecx, rtl8139.mac
  6194                              <2> 	call showmac
  6195                              <2> 	call printline
  6196                              <2> .nortl8139:
  6197                              <2> %endif
  6198                              <2> %ifdef rtl8169.included
  6199                              <2> 	cmp byte [rtl8169.nicconfig], 1
  6200                              <2> 	jne .nortl8169
  6201                              <2> 	mov esi, rtl8169.name
  6202                              <2> 	call print
  6203                              <2> 	mov ecx, rtl8169.mac
  6204                              <2> 	call showmac
  6205                              <2> 	call printline
  6206                              <2> .nortl8169:
  6207                              <2> %endif
  6208                              <2> %ifdef i8254x.included
  6209                              <2> 	cmp byte [i8254x.nicconfig], 1
  6210                              <2> 	jne .noi8254x
  6211                              <2> 	mov esi, i8254x.name
  6212                              <2> 	call print
  6213                              <2> 	mov ecx, i8254x.mac
  6214                              <2> 	call showmac
  6215                              <2> 	call printline
  6216                              <2> .noi8254x:
  6217                              <2> %endif
  6218 00004BD9 8B0D[BC8F0000]      <2> 	mov ecx, [sysip]
  6219 00004BDF E841430000          <2> 	call showip
  6220 00004BE4 E875D1FFFF          <2> 	call printline
  6221 00004BE9 C3                  <2> 	ret
  6222                              <2> 	
  6223                              <1> %endif
  6224                              <1> %include 'source/programs/keycode.asm'
  6225 00004BEA FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6226 00004BF3 00                  <2>
  6227                              <2> keycode:
  6228 00004BF4 66C705[DD230000]00- <2> 	mov word [trans], 0
  6229 00004BFC 00                  <2>
  6230 00004BFD C605[DC6D0000]00    <2> 	mov byte [threadson], 0
  6231                              <2> %ifdef io.serial
  6232                              <2> .noserial:
  6233                              <2> 	hlt
  6234                              <2> 	mov dx, [serial.address]
  6235                              <2> 	in al, dx
  6236                              <2> 	cmp al, 0
  6237                              <2> 	je .noserial
  6238                              <2> 	mov cl, al
  6239                              <2> 	call showhexsmall
  6240                              <2> 	cmp al, 0x1B
  6241                              <2> 	jne .noserial
  6242                              <2> 	in al, dx
  6243                              <2> 	mov cl, al
  6244                              <2> 	call showhexsmall
  6245                              <2> 	cmp cl, 0x5B
  6246                              <2> 	je .noserial
  6247                              <2> 	ret
  6248                              <2> %else
  6249 00004C04 E863160000          <2> 	call getkey
  6250 00004C09 31C0                <2> 	xor eax, eax
  6251 00004C0B 31C9                <2> 	xor ecx, ecx
  6252 00004C0D 8A0D[4A620000]      <2> 	mov cl, [specialkey]
  6253 00004C13 80F900              <2> 	cmp cl, 0
  6254 00004C16 0F8405000000        <2> 	je near .nospecialkeycode
  6255 00004C1C E820E6FFFF          <2> 	call showhexsmall
  6256                              <2> .nospecialkeycode:
  6257 00004C21 668B0D[DB230000]    <2> 	mov cx, [lastkey + 2]
  6258 00004C28 E814E6FFFF          <2> 	call showhexsmall
  6259 00004C2D 80F901              <2> 	cmp cl, 1
  6260 00004C30 75C2                <2> 	jne keycode
  6261 00004C32 C3                  <2> 	ret
  6262                              <2> %endif
  6263                              <1> %ifdef gui.included
  6264                              <1> 	%include 'source/programs/line.asm'
  6265 00004C33 FF2C6C696E6500      <2> db 255,44,"line",0
  6266                              <2> linetester:
  6267 00004C3A 803D[2C900000]00    <2> 	cmp byte [guion], 0
  6268 00004C41 0F841B000000        <2> 	je near .done
  6269 00004C47 668B35[71020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6270 00004C4E BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6271 00004C53 E868000000          <2> 	call .circletest
  6272 00004C58 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6273 00004C5D E801000000          <2> 	call .linetest
  6274                              <2> .done:
  6275 00004C62 C3                  <2> 	ret
  6276                              <2> 
  6277                              <2> .linetest:
  6278 00004C63 53                  <2> 	push ebx
  6279 00004C64 E8D6000000          <2> 	call .stime
  6280 00004C69 5B                  <2> 	pop ebx
  6281 00004C6A 31FF                <2> 	xor edi, edi
  6282                              <2> .ltlp:
  6283 00004C6C 53                  <2> 	push ebx
  6284 00004C6D E81C010000          <2> 	call .st
  6285 00004C72 66F7D6              <2> 	not si
  6286 00004C75 E814010000          <2> 	call .st
  6287 00004C7A 5B                  <2> 	pop ebx
  6288 00004C7B 66F7D6              <2> 	not si
  6289 00004C7E 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6290 00004C85 4B                  <2> 	dec ebx
  6291 00004C86 81FB00000000        <2> 	cmp ebx, 0
  6292 00004C8C 77DE                <2> 	ja .ltlp
  6293 00004C8E E8C4000000          <2> 	call .etime
  6294 00004C93 53                  <2> 	push ebx	
  6295 00004C94 57                  <2> 	push edi
  6296 00004C95 E8DF270000          <2> 	call guiclear
  6297 00004C9A E82A280000          <2> 	call reloadallgraphics
  6298 00004C9F 59                  <2> 	pop ecx
  6299 00004CA0 E86BE6FFFF          <2> 	call showdec
  6300 00004CA5 BE[D04D0000]        <2> 	mov esi, .msg
  6301 00004CAA E8B4D0FFFF          <2> 	call print
  6302 00004CAF 59                  <2> 	pop ecx
  6303 00004CB0 E85BE6FFFF          <2> 	call showdec
  6304 00004CB5 BE[FC4D0000]        <2> 	mov esi, .msgtime
  6305 00004CBA E8A4D0FFFF          <2> 	call print
  6306 00004CBF C3                  <2> 	ret
  6307                              <2> 	
  6308                              <2> .circletest:
  6309 00004CC0 53                  <2> 	push ebx
  6310 00004CC1 E879000000          <2> 	call .stime
  6311 00004CC6 5B                  <2> 	pop ebx
  6312 00004CC7 31FF                <2> 	xor edi, edi
  6313                              <2> .ctlp:
  6314 00004CC9 53                  <2> 	push ebx
  6315 00004CCA 668B0D[615B0000]    <2> 	mov cx, [resolutiony]
  6316 00004CD1 66D1E9              <2> 	shr cx, 1
  6317 00004CD4 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  6318 00004CDB 66D1EA              <2> 	shr dx, 1
  6319 00004CDE 6689C8              <2> 	mov ax, cx
  6320                              <2> .circle:
  6321 00004CE1 60                  <2> 	pusha
  6322 00004CE2 E8EF210000          <2> 	call drawcircle
  6323 00004CE7 61                  <2> 	popa
  6324 00004CE8 6648                <2> 	dec ax
  6325 00004CEA 47                  <2> 	inc edi
  6326 00004CEB 663D0100            <2> 	cmp ax, 1
  6327 00004CEF 77F0                <2> 	ja .circle
  6328 00004CF1 66F7D6              <2> 	not si
  6329                              <2> .circle2:
  6330 00004CF4 60                  <2> 	pusha
  6331 00004CF5 E8DC210000          <2> 	call drawcircle
  6332 00004CFA 61                  <2> 	popa
  6333 00004CFB 47                  <2> 	inc edi
  6334 00004CFC 6640                <2> 	inc ax
  6335 00004CFE 6639C8              <2> 	cmp ax, cx
  6336 00004D01 76F1                <2> 	jbe .circle2
  6337 00004D03 5B                  <2> 	pop ebx
  6338 00004D04 66F7D6              <2> 	not si
  6339 00004D07 660335[6F020000]    <2> 	add si, [timenanoseconds]
  6340 00004D0E 4B                  <2> 	dec ebx
  6341 00004D0F 81FB00000000        <2> 	cmp ebx, 0
  6342 00004D15 77B2                <2> 	ja .ctlp
  6343 00004D17 E83B000000          <2> 	call .etime
  6344 00004D1C 53                  <2> 	push ebx
  6345 00004D1D 57                  <2> 	push edi
  6346 00004D1E 59                  <2> 	pop ecx
  6347 00004D1F E8ECE5FFFF          <2> 	call showdec
  6348 00004D24 BE[E54D0000]        <2> 	mov esi, .msgcircle
  6349 00004D29 E835D0FFFF          <2> 	call print
  6350 00004D2E 59                  <2> 	pop ecx
  6351 00004D2F E8DCE5FFFF          <2> 	call showdec
  6352 00004D34 BE[FC4D0000]        <2> 	mov esi, .msgtime
  6353 00004D39 E825D0FFFF          <2> 	call print
  6354 00004D3E C3                  <2> 	ret
  6355                              <2> 	
  6356                              <2> .stime:
  6357 00004D3F F4                  <2> 	hlt
  6358 00004D40 A1[6B020000]        <2> 	mov eax, [timeseconds]
  6359 00004D45 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6360 00004D4B A3[0B4E0000]        <2> 	mov [.time], eax
  6361 00004D50 891D[0F4E0000]      <2> 	mov [.time + 4], ebx
  6362 00004D56 C3                  <2> 	ret
  6363                              <2> 	
  6364                              <2> .etime:
  6365 00004D57 A1[6B020000]        <2> 	mov eax, [timeseconds]
  6366 00004D5C 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  6367 00004D62 8B0D[0B4E0000]      <2> 	mov ecx, [.time]
  6368 00004D68 8B15[0F4E0000]      <2> 	mov edx, [.time + 4]
  6369 00004D6E C1EA0A              <2> 	shr edx, 10
  6370 00004D71 C1EB0A              <2> 	shr ebx, 10
  6371 00004D74 29C8                <2> 	sub eax, ecx
  6372 00004D76 3D00000000          <2> 	cmp eax, 0
  6373 00004D7B 740E                <2> 	je .notclp
  6374                              <2> .tclp:
  6375 00004D7D 81C340420F00        <2> 	add ebx, 1000000
  6376 00004D83 48                  <2> 	dec eax
  6377 00004D84 3D00000000          <2> 	cmp eax, 0
  6378 00004D89 75F2                <2> 	jne .tclp
  6379                              <2> .notclp:
  6380 00004D8B 29D3                <2> 	sub ebx, edx
  6381 00004D8D C3                  <2> 	ret
  6382                              <2> 	
  6383                              <2> .st:
  6384 00004D8E 6631C0              <2> 	xor ax, ax
  6385 00004D91 6631DB              <2> 	xor bx, bx
  6386 00004D94 668B0D[615B0000]    <2> 	mov cx, [resolutiony]
  6387 00004D9B 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  6388                              <2> .lp:
  6389 00004DA2 60                  <2> 	pusha
  6390 00004DA3 E8A5250000          <2> 	call drawline
  6391 00004DA8 61                  <2> 	popa
  6392                              <2> .noswitch:
  6393 00004DA9 47                  <2> 	inc edi
  6394 00004DAA 6643                <2> 	inc bx
  6395 00004DAC 664A                <2> 	dec dx
  6396 00004DAE 6681FB0000          <2> 	cmp bx, 0
  6397 00004DB3 74ED                <2> 	je .lp
  6398 00004DB5 6681FA0000          <2> 	cmp dx, 0
  6399 00004DBA 75E6                <2> 	jne .lp
  6400                              <2> .lp2:
  6401 00004DBC 60                  <2> 	pusha
  6402 00004DBD E88B250000          <2> 	call drawline
  6403 00004DC2 61                  <2> 	popa
  6404 00004DC3 47                  <2> 	inc edi
  6405 00004DC4 6640                <2> 	inc ax
  6406 00004DC6 6649                <2> 	dec cx
  6407 00004DC8 6681F90000          <2> 	cmp cx, 0
  6408 00004DCD 75ED                <2> 	jne .lp2
  6409 00004DCF C3                  <2> 	ret
  6410                              <2> 	
  6411 00004DD0 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6412 00004DD9 6520647261776E2069- <2>
  6413 00004DE2 6E2000              <2>
  6414 00004DE5 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6415 00004DEE 65726520647261776E- <2>
  6416 00004DF7 20696E2000          <2>
  6417 00004DFC 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6418 00004E05 6E64732E0A00        <2>
  6419 00004E0B 0000000000000000    <2> .time dd 0,0	
  6420                              <1> %endif
  6421                              <1> %include 'source/programs/logout.asm'
  6422 00004E13 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6423 00004E1C E954DDFFFF          <2> 	jmp os
  6424                              <1> %include 'source/programs/loop.asm'
  6425 00004E21 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6426 00004E28 803D[83BA0300]00    <2> 	cmp byte [LOOPON], 0
  6427 00004E2F 0F8501000000        <2> 	jne near filoop
  6428 00004E35 C3                  <2> 	ret
  6429 00004E36 8B35[84BA0300]      <2> filoop: mov esi, [LOOPPOS]
  6430 00004E3C FE0D[19BA0300]      <2> 	dec byte [IFON]
  6431 00004E42 C605[83BA0300]00    <2> 	mov byte [LOOPON], 0
  6432 00004E49 8935[7EBA0300]      <2> 	mov [BATCHPOS], esi
  6433 00004E4F 8935[AE3A0000]      <2> 	mov [batchedi], esi
  6434 00004E55 C3                  <2> 	ret 
  6435                              <1> %ifdef disk.none
  6436                              <1> %else
  6437                              <1> 	%include 'source/programs/ls.asm'
  6438 00004E56 FF2C6C7300          <2> db 255,44,"ls",0
  6439 00004E5B BE[86920300]        <2> 		mov esi, diskfileindex
  6440                              <2> 	diskindexdir:
  6441 00004E60 803E5F              <2> 		cmp byte [esi], '_'
  6442 00004E63 7440                <2> 		je nextdiskindexdir
  6443 00004E65 E8D5CEFFFF          <2> 		call printquiet
  6444 00004E6A 56                  <2> 		push esi
  6445 00004E6B BE[C54E0000]        <2> 		mov esi, disktab
  6446 00004E70 E8CACEFFFF          <2> 		call printquiet
  6447 00004E75 5E                  <2> 		pop esi
  6448 00004E76 8B4E05              <2> 		mov ecx, [esi + 5]
  6449 00004E79 C605[40320000]05    <2> 		mov byte [firsthexshown], 5
  6450 00004E80 E88BE4FFFF          <2> 		call showdec
  6451 00004E85 56                  <2> 		push esi
  6452 00004E86 BE[07900000]        <2> 		mov esi, line
  6453 00004E8B E8AFCEFFFF          <2> 		call printquiet
  6454 00004E90 5E                  <2> 		pop esi
  6455 00004E91 81C609000000        <2> 		add esi, 9
  6456 00004E97 81FE[68930300]      <2> 		cmp esi, enddiskfileindex
  6457 00004E9D 72C1                <2> 		jb diskindexdir
  6458 00004E9F E842DAFFFF          <2> 		call termcopy
  6459 00004EA4 C3                  <2> 		ret
  6460                              <2> 	nextdiskindexdir:
  6461 00004EA5 46                  <2> 		inc esi
  6462 00004EA6 803E00              <2> 		cmp byte [esi], 0
  6463 00004EA9 75FA                <2> 		jne nextdiskindexdir
  6464 00004EAB 81C609000000        <2> 		add esi, 9
  6465 00004EB1 81FE[68930300]      <2> 		cmp esi, enddiskfileindex
  6466 00004EB7 72A7                <2> 		jb diskindexdir
  6467 00004EB9 E828DAFFFF          <2> 		call termcopy
  6468 00004EBE C3                  <2> 		ret
  6469                              <2> 		
  6470 00004EBF 4469736B2000        <2> 		diskmsg db "Disk ",0
  6471 00004EC5 0D09090900          <2> 		disktab db 13,9,9,9,0
  6472                              <1> %endif
  6473                              <1> %include 'source/programs/memory.asm'
  6474 00004ECA FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6475 00004ED3 BE[42900000]        <2> 	mov esi, memlistbuf
  6476 00004ED8 31FF                <2> 	xor edi, edi
  6477 00004EDA 668B3D[82920000]    <2> 	mov di, [memlistend]
  6478 00004EE1 01F7                <2> 	add edi, esi
  6479                              <2> printmemmap:
  6480 00004EE3 8B0E                <2> 	mov ecx, [esi]
  6481 00004EE5 E86BE3FFFF          <2> 	call showhex
  6482 00004EEA 81C608000000        <2> 	add esi, 8
  6483 00004EF0 8B0E                <2> 	mov ecx, [esi]
  6484 00004EF2 E85EE3FFFF          <2> 	call showhex
  6485 00004EF7 81C608000000        <2> 	add esi, 8
  6486 00004EFD 8B0E                <2> 	mov ecx, [esi]
  6487 00004EFF E851E3FFFF          <2> 	call showhex
  6488 00004F04 81C608000000        <2> 	add esi, 8
  6489 00004F0A 57                  <2> 	push edi
  6490 00004F0B 56                  <2> 	push esi
  6491 00004F0C E84DCEFFFF          <2> 	call printline
  6492 00004F11 5E                  <2> 	pop esi
  6493 00004F12 5F                  <2> 	pop edi
  6494 00004F13 39FE                <2> 	cmp esi, edi
  6495 00004F15 72CC                <2> 	jb printmemmap
  6496 00004F17 C3                  <2> 	ret
  6497                              <2> 	
  6498                              <1> %include 'source/programs/pci.asm'
  6499 00004F18 FF2C70636900        <2> db 255,44,"pci",0
  6500 00004F1E E8C1190000          <2> 	call pcidump
  6501 00004F23 C3                  <2> 	ret 
  6502                              <1> %ifdef network.included
  6503                              <1> 	%include 'source/programs/ping.asm'
  6504 00004F24 FF2C70696E6700      <2> db 255,44,"ping",0
  6505                              <2> ping:
  6506 00004F2B 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  6507 00004F31 81C605000000        <2> 	add esi, 5
  6508 00004F37 E8A33F0000          <2> 	call strtoip
  6509 00004F3C 890D[C24F0000]      <2> 	mov [.destip], ecx
  6510 00004F42 E8DE3F0000          <2> 	call showip
  6511 00004F47 8B0D[BC8F0000]      <2> 	mov ecx, [sysip]
  6512 00004F4D 890D[BE4F0000]      <2> 	mov [.sourceip], ecx
  6513 00004F53 31C0                <2> 	xor eax, eax
  6514 00004F55 31DB                <2> 	xor ebx, ebx
  6515 00004F57 66A3[BC4F0000]      <2> 	mov [.checksum], ax
  6516 00004F5D 66A3[C84F0000]      <2> 	mov [.icmpchecksum], ax
  6517 00004F63 BF[B24F0000]        <2> 	mov edi, .header
  6518 00004F68 BE[C64F0000]        <2> 	mov esi, .headerend
  6519 00004F6D E8453F0000          <2> 	call getchecksum
  6520 00004F72 66890D[BC4F0000]    <2> 	mov [.checksum], cx
  6521 00004F79 BF[C64F0000]        <2> 	mov edi, .icmp
  6522 00004F7E BE[EE4F0000]        <2> 	mov esi, .packetend
  6523 00004F83 E82F3F0000          <2> 	call getchecksum
  6524 00004F88 66890D[C84F0000]    <2> 	mov [.icmpchecksum], cx
  6525 00004F8F BF[A44F0000]        <2> 	mov edi, .packet
  6526 00004F94 BE[EE4F0000]        <2> 	mov esi, .packetend
  6527 00004F99 E80F3F0000          <2> 	call sendpacket
  6528 00004F9E E8BBCDFFFF          <2> 	call printline
  6529 00004FA3 C3                  <2> 	ret
  6530                              <2> 	
  6531                              <2> 	
  6532                              <2> 	
  6533                              <2> .packet:
  6534 00004FA4 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6535 00004FAA 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6536 00004FB0 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6537                              <2> .header:
  6538 00004FB2 45                  <2> .version	db 0x45
  6539 00004FB3 00                  <2> .services	db 0
  6540 00004FB4 003C                <2> .length	db 0,0x3C
  6541 00004FB6 0000                <2> .id		dw 0
  6542 00004FB8 00                  <2> .flags	db 0
  6543 00004FB9 00                  <2> .fragment db 0
  6544 00004FBA 80                  <2> .ttl	db 128
  6545 00004FBB 01                  <2> .protocol db 1 ;ICMP
  6546 00004FBC 0000                <2> .checksum dw 0
  6547 00004FBE 00000000            <2> .sourceip dd 0
  6548 00004FC2 00000000            <2> .destip dd 0
  6549                              <2> .headerend:
  6550                              <2> .icmp:
  6551 00004FC6 08                  <2> .icmptype db 8 ;Ping request
  6552 00004FC7 00                  <2> .icmpcode db 0
  6553 00004FC8 0000                <2> .icmpchecksum dw 0
  6554 00004FCA 0001                <2> .icmpid db 0,1
  6555 00004FCC 0000                <2> .sequence dw 0
  6556 00004FCE 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6557 00004FD7 6A6B6C6D6E6F707172- <2>
  6558 00004FE0 737475767761626364- <2>
  6559 00004FE9 6566676869          <2>
  6560                              <2> .packetend:
  6561                              <1> %endif
  6562                              <1> %ifdef disk.none
  6563                              <1> %else
  6564                              <1> 	%include 'source/programs/play.asm'
  6565 00004FEE FF2C706C61796100    <2> db 255,44,"playa",0
  6566 00004FF6 8B3D[0C300000]      <2> 	mov edi, [currentcommandloc]
  6567 00004FFC 81C706000000        <2> 	add edi, 6
  6568 00005002 E835000000          <2> 	call playasync
  6569 00005007 C3                  <2> 	ret
  6570 00005008 FF2C706C61792000    <2> db 255,44,"play ",0
  6571                              <2> play:
  6572 00005010 8B3D[0C300000]      <2> 	mov edi, [currentcommandloc]
  6573 00005016 81C705000000        <2> 	add edi, 5
  6574 0000501C E81B000000          <2> 	call playasync
  6575                              <2> .waitforsound:
  6576 00005021 F4                  <2> 	hlt
  6577                              <2> %ifdef sound.included
  6578 00005022 A1[34620000]        <2> 	mov eax, [Length0]
  6579 00005027 660B05[38620000]    <2> 	or ax, [Length1]
  6580                              <2> %endif
  6581 0000502E 0A05[73020000]      <2> 	or al, [soundon]
  6582 00005034 3D00000000          <2> 	cmp eax, 0
  6583 00005039 75E6                <2> 	jne .waitforsound
  6584 0000503B C3                  <2> 	ret
  6585                              <2> playasync:
  6586 0000503C BE0000C000          <2> 	mov esi, 0xC00000
  6587 00005041 E8D31B0000          <2> 	call loadfile
  6588 00005046 81FA94010000        <2> 	cmp edx, 404
  6589 0000504C 743F                <2> 	je nosoundfound
  6590 0000504E BB0000C000          <2> 	mov ebx, 0xC00000
  6591 00005053 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6592 0000505A 0F843F010000        <2> 	je near wave_player
  6593 00005060 66813B534E          <2> 	cmp word [ebx], "SN"
  6594 00005065 7526                <2> 	jne nosoundfound
  6595 00005067 81C306000000        <2> 	add ebx, 6
  6596 0000506D 891D[76020000]      <2> 	mov [soundpos], ebx
  6597 00005073 035BFC              <2> 	add ebx, [ebx - 4]
  6598 00005076 891D[7A020000]      <2> 	mov [soundendpos], ebx
  6599 0000507C 66C705[74020000]00- <2> 	mov word [soundrepititions], 0
  6600 00005084 00                  <2>
  6601 00005085 C605[73020000]01    <2> 	mov byte [soundon], 1
  6602 0000508C C3                  <2> 	ret
  6603                              <2> nosoundfound:
  6604 0000508D BE[B3500000]        <2> 	mov esi, notfoundsound
  6605 00005092 E8CCCCFFFF          <2> 	call print
  6606 00005097 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  6607 0000509D 81C605000000        <2> 	add esi, 5
  6608 000050A3 E8BBCCFFFF          <2> 	call print
  6609 000050A8 BE[D68F0000]        <2> 	mov esi, notfound2
  6610 000050AD E8B1CCFFFF          <2> 	call print
  6611 000050B2 C3                  <2> 	ret
  6612 000050B3 706C61793A2000      <2> notfoundsound db "play: ",0
  6613                              <2> 
  6614                              <2> %ifdef sound.included
  6615                              <2> sbplay:
  6616 000050BA BE0000C000          <2> 		mov esi, 0xC00000
  6617 000050BF 89F3                <2> 		mov ebx, esi
  6618 000050C1 81C62C000000        <2> 		add esi, WAVSTART
  6619 000050C7 29F7                <2> 		sub edi, esi
  6620 000050C9 66893D[38620000]    <2> 		mov [Length1], di
  6621 000050D0 C1EF0F              <2> 		shr edi, 15
  6622 000050D3 893D[34620000]      <2> 		mov [Length0], edi
  6623 000050D9 8B4B18              <2> 		mov ecx, [ebx + 24]
  6624 000050DC 890D[45620000]      <2> 		mov [Freq], ecx
  6625 000050E2 31C0                <2> 		xor eax, eax
  6626 000050E4 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6627 000050E9 81C22C000000        <2> 		add edx, WAVSTART
  6628 000050EF 01D0                <2> 		add	eax, edx
  6629 000050F1 89C6                <2> 		mov esi, eax
  6630 000050F3 31C9                <2> 		xor ecx, ecx
  6631 000050F5 31DB                <2> 		xor ebx, ebx
  6632 000050F7 66891D[42620000]    <2> 		mov [SegLoc], bx
  6633 000050FE 81C300000800        <2> 		add ebx, 0x80000
  6634 00005104 66B9FFFF            <2> 		mov cx, 0xFFFF
  6635 00005108 6681FF0000          <2> 		cmp di, 0
  6636 0000510D 7520                <2> 		jne .autoinit
  6637 0000510F 668B0D[38620000]    <2> 		mov cx, [Length1]
  6638 00005116 C605[33620000]01    <2> 		mov byte [OddLength], 1
  6639 0000511D 6681F90080          <2> 		cmp cx, 32768
  6640 00005122 730B                <2> 		jae .autoinit
  6641 00005124 C605[33620000]00    <2> 		mov byte [OddLength], 0
  6642 0000512B 66D1E1              <2> 		shl cx, 1
  6643 0000512E 47                  <2> 		inc edi
  6644                              <2> .autoinit:
  6645 0000512F 4F                  <2> 		dec edi
  6646 00005130 893D[34620000]      <2> 		mov [Length0], edi
  6647 00005136 66890D[38620000]    <2> 		mov [Length1], cx
  6648 0000513D 66D1E9              <2> 		shr cx, 1
  6649 00005140 6641                <2> 		inc cx
  6650 00005142 01C8                <2> 		add eax, ecx
  6651 00005144 A3[3A620000]        <2> 		mov [NextMemLoc], eax
  6652 00005149 8935[3E620000]      <2> 		mov	[MemLoc], esi
  6653 0000514F E8850F0000          <2> 		call DMACopy
  6654 00005154 31DB                <2> 		xor ebx, ebx
  6655 00005156 668B1D[42620000]    <2> 		mov bx, [SegLoc]
  6656 0000515D 31C9                <2> 		xor ecx, ecx
  6657 0000515F 668B0D[38620000]    <2> 		mov cx, [Length1]
  6658 00005166 66D1E9              <2> 		shr cx, 1
  6659 00005169 6641                <2> 		inc cx
  6660 0000516B 01CB                <2> 		add ebx, ecx
  6661 0000516D 66891D[42620000]    <2> 		mov [SegLoc], bx
  6662 00005174 81C300000800        <2> 		add ebx, 0x80000
  6663 0000517A 8B35[3A620000]      <2> 		mov esi, [NextMemLoc]
  6664 00005180 89F0                <2> 		mov eax, esi
  6665 00005182 01C8                <2> 		add eax, ecx
  6666 00005184 A3[3A620000]        <2> 		mov [NextMemLoc], eax
  6667 00005189 8935[3E620000]      <2> 		mov	[MemLoc], esi
  6668 0000518F E8450F0000          <2> 		call DMACopy
  6669 00005194 E8630F0000          <2> 		call DMAPlay
  6670 00005199 E8ED0F0000          <2> 		call PlayDSP
  6671 0000519E C3                  <2> 		ret
  6672                              <2> WAVSTART equ 44
  6673                              <2> wave_player:
  6674 0000519F 803D[49620000]01    <2> 	cmp byte [SoundBlaster], 1
  6675 000051A6 0F840EFFFFFF        <2> 	je near sbplay
  6676 000051AC BE[B7510000]        <2> 	mov esi, nosoundblaster
  6677 000051B1 E8ADCBFFFF          <2> 	call print
  6678 000051B6 C3                  <2> 	ret
  6679                              <2> %else
  6680                              <2> 	wave_player:
  6681                              <2> 		mov esi, nosoundblaster
  6682                              <2> 		call print
  6683                              <2> 		ret
  6684                              <2> %endif
  6685 000051B7 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6686 000051C0 426C61737465722064- <2>
  6687 000051C9 657465637465642E0A- <2>
  6688 000051D2 00                  <2>
  6689                              <1> %endif
  6690                              <1> %include 'source/programs/pwd.asm'
  6691 000051D3 FF2C70776400        <2> db 255,44,"pwd",0
  6692 000051D9 BE[14B80300]        <2> 	mov esi, currentfolder
  6693 000051DE E85CCBFFFF          <2> 	call printquiet
  6694 000051E3 E876CBFFFF          <2> 	call printline
  6695 000051E8 C3                  <2> 	ret
  6696                              <2> 	
  6697                              <1> %include 'source/programs/reboot.asm'
  6698 000051E9 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6699 000051F2 0F011D[FC510000]    <2> 		lidt [idtreboot]
  6700 000051F9 CD00                <2> 		int 0
  6701 000051FB F4                  <2> 		hlt
  6702                              <2> 	
  6703 000051FC 0000                <2> 	idtreboot dw 0
  6704 000051FE 00000000            <2> 			  dd 0
  6705                              <2> 
  6706                              <2> 	coldboot:
  6707 00005202 66B84000            <2> 		MOV AX, 0040h
  6708 00005206 8EC0                <2> 		MOV ES, AX
  6709 00005208 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6710 00005211 00                  <2>
  6711 00005212 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6712 00005219 CF                  <2> 		IRET
  6713                              <2> 
  6714                              <2> 	warmboot:
  6715 0000521A 66B84000            <2> 		MOV AX, 0040h
  6716 0000521E 8EC0                <2> 		MOV ES, AX
  6717 00005220 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6718 00005229 12                  <2>
  6719 0000522A EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6720 00005231 CF                  <2> 		IRET
  6721                              <2> 		
  6722                              <1> %include 'source/programs/reg.asm'
  6723 00005232 FF2C72656700        <2> db 255,44,"reg",0
  6724 00005238 CD03                <2> 	int 3
  6725 0000523A C3                  <2> 	ret 
  6726                              <1> %ifdef disk.none
  6727                              <1> %else
  6728                              <1> 	%include 'source/programs/show.asm'
  6729 0000523B FF2C73686F7700      <2> db 255,44,"show",0
  6730                              <2> showprog:
  6731 00005242 8B3D[0C300000]      <2> 		mov edi, [currentcommandloc]
  6732 00005248 81C705000000        <2> 		add edi, 5
  6733 0000524E BE00004000          <2> 		mov esi, 0x400000
  6734 00005253 803F26              <2> 		cmp byte [edi], '&'
  6735 00005256 741B                <2> 		je .nullfile
  6736 00005258 BE00008000          <2> 		mov esi, 0x800000
  6737 0000525D E8B7190000          <2> 		call loadfile
  6738 00005262 81FA94010000        <2> 		cmp edx, 404
  6739 00005268 0F847E000000        <2> 		je near filenotfound
  6740 0000526E BE00008000          <2> 		mov esi, 0x800000
  6741                              <2> .nullfile:
  6742                              <2> %ifdef gui.included
  6743 00005273 66813E424D          <2> 		cmp word [esi], "BM"
  6744 00005278 740B                <2> 		je bmpfound
  6745                              <2> %endif
  6746 0000527A E8E4CAFFFF          <2> 		call print
  6747 0000527F E8DACAFFFF          <2> 		call printline
  6748 00005284 C3                  <2> 		ret
  6749                              <2> %ifdef gui.included
  6750                              <2> bmpfound:
  6751 00005285 803D[2C900000]00    <2> 		cmp byte [guion], 0
  6752 0000528C 0F8428000000        <2> 		je near noguibmp
  6753 00005292 BE00008000          <2> 		mov esi, 0x800000
  6754 00005297 31C9                <2> 		xor ecx, ecx
  6755 00005299 31D2                <2> 		xor edx, edx
  6756 0000529B 31C0                <2> 		xor eax, eax
  6757 0000529D 31DB                <2> 		xor ebx, ebx
  6758 0000529F E8601B0000          <2> 		call showbmp
  6759 000052A4 30C0                <2> 		xor al, al
  6760 000052A6 B405                <2> 		mov ah, 5
  6761 000052A8 CD30                <2> 		int 30h
  6762 000052AA E8CA210000          <2> 		call guiclear
  6763 000052AF E8A91E0000          <2> 		call clearmousecursor
  6764 000052B4 E810220000          <2> 		call reloadallgraphics
  6765 000052B9 C3                  <2> 		ret
  6766                              <2> noguibmp:
  6767 000052BA BE[C5520000]        <2> 		mov esi, warnguimsg
  6768 000052BF E89FCAFFFF          <2> 		call print
  6769 000052C4 C3                  <2> 		ret
  6770 000052C5 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6771 000052CE 6E6F7420626520646F- <2>
  6772 000052D7 6E6520776974686F75- <2>
  6773 000052E0 742074686520475549- <2>
  6774 000052E9 2E0A00              <2>
  6775                              <2> %endif
  6776                              <2> 
  6777                              <2> filenotfound:
  6778 000052EC BE[1F530000]        <2> 		mov esi, filenf
  6779 000052F1 E86DCAFFFF          <2> 		call print
  6780 000052F6 8B35[0C300000]      <2> 		mov esi, [currentcommandloc]
  6781                              <2> findfilenotfoundzero:
  6782 000052FC 8A06                <2> 		mov al, [esi]
  6783 000052FE 46                  <2> 		inc esi
  6784 000052FF 3C00                <2> 		cmp al, 0
  6785 00005301 7411                <2> 		je nofilenamenotfound
  6786 00005303 81FE[88D20300]      <2> 		cmp esi, buftxtend
  6787 00005309 7309                <2> 		jae nofilenamenotfound
  6788 0000530B 3C20                <2> 		cmp al, " "
  6789 0000530D 75ED                <2> 		jne findfilenotfoundzero
  6790 0000530F E84FCAFFFF          <2> 		call print
  6791                              <2> nofilenamenotfound:
  6792 00005314 BE[2A530000]        <2> 		mov esi, filenf2
  6793 00005319 E845CAFFFF          <2> 		call print
  6794 0000531E C3                  <2> 		ret
  6795 0000531F 5468652066696C6520- <2> filenf db "The file ",34,0
  6796 00005328 2200                <2>
  6797 0000532A 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6798 00005333 6F7420626520666F75- <2>
  6799 0000533C 6E642E0A00          <2>
  6800                              <1> %endif
  6801                              <1> %include 'source/programs/shush.asm'
  6802 00005341 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6803                              <2> shushprog:
  6804                              <2> %ifdef gui.included
  6805 00005349 803D[2C900000]00    <2> 	cmp byte [guion], 0
  6806 00005350 0F84B9000000        <2> 	je near .noswitchsize
  6807 00005356 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  6808 0000535C 81C606000000        <2> 	add esi, 6
  6809 00005362 56                  <2> 	push esi
  6810 00005363 4E                  <2> 	dec esi
  6811                              <2> .findspace:
  6812 00005364 46                  <2> 	inc esi
  6813 00005365 8A06                <2> 	mov al, [esi]
  6814 00005367 3C00                <2> 	cmp al, 0
  6815 00005369 0F84A0000000        <2> 	je near .noswitchsize
  6816 0000536F 3C58                <2> 	cmp al, "X"
  6817 00005371 7408                <2> 	je .donefind
  6818 00005373 3C78                <2> 	cmp al, "x"
  6819 00005375 7404                <2> 	je .donefind
  6820 00005377 3C20                <2> 	cmp al, " "
  6821 00005379 75E9                <2> 	jne .findspace
  6822                              <2> .donefind:
  6823 0000537B 30C0                <2> 	xor al, al
  6824 0000537D 8806                <2> 	mov [esi], al
  6825 0000537F 46                  <2> 	inc esi
  6826 00005380 89F7                <2> 	mov edi, esi
  6827 00005382 E867E0FFFF          <2> 	call cnvrttxt
  6828 00005387 89C8                <2> 	mov eax, ecx
  6829 00005389 5E                  <2> 	pop esi
  6830 0000538A 50                  <2> 	push eax
  6831 0000538B 89F7                <2> 	mov edi, esi
  6832 0000538D E85CE0FFFF          <2> 	call cnvrttxt
  6833 00005392 89CB                <2> 	mov ebx, ecx
  6834 00005394 58                  <2> 	pop eax	
  6835 00005395 6681FB0000          <2> 	cmp bx, 0
  6836 0000539A 0F846F000000        <2> 	je near .noswitchsize
  6837 000053A0 663D0000            <2> 	cmp ax, 0
  6838 000053A4 0F8465000000        <2> 	je near .noswitchsize
  6839 000053AA 66C1E303            <2> 	shl bx, 3
  6840 000053AE 66C1E004            <2> 	shl ax, 4
  6841 000053B2 663B1D[5F5B0000]    <2> 	cmp bx, [resolutionx]
  6842 000053B9 7607                <2> 	jbe .nofixx
  6843 000053BB 668B1D[5F5B0000]    <2> 	mov bx, [resolutionx]
  6844                              <2> .nofixx:
  6845 000053C2 66051000            <2> 	add ax, 16
  6846 000053C6 663B05[615B0000]    <2> 	cmp ax, [resolutiony]
  6847 000053CD 7606                <2> 	jbe .nofixy
  6848 000053CF 66A1[615B0000]      <2> 	mov ax, [resolutiony]
  6849                              <2> .nofixy:
  6850 000053D5 662D1000            <2> 	sub ax, 16
  6851 000053D9 6631C9              <2> 	xor cx, cx
  6852 000053DC 6631D2              <2> 	xor dx, dx
  6853 000053DF 66891D[79780000]    <2> 	mov [termwindow], bx
  6854 000053E6 66A3[7B780000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6855 000053EC BE[79780000]        <2> 	mov esi, termwindow
  6856 000053F1 31DB                <2> 	xor ebx, ebx
  6857 000053F3 6631C0              <2> 	xor ax, ax
  6858 000053F6 E8B7290000          <2> 	call showwindow
  6859 000053FB E879200000          <2> 	call guiclear
  6860 00005400 E80DCAFFFF          <2> 	call clear
  6861 00005405 E8BF200000          <2> 	call reloadallgraphics
  6862 0000540A E8061E0000          <2> 	call switchmousepos2
  6863                              <2> .noswitchsize:
  6864                              <2> %endif
  6865 0000540F BE[1A540000]        <2> 	mov esi, shushmsg
  6866 00005414 E84AC9FFFF          <2> 	call print
  6867 00005419 C3                  <2> 	ret
  6868 0000541A 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6869 00005423 6F2074686520536F6C- <2>
  6870 0000542C 6C65724F5320486172- <2>
  6871 00005435 646C7920556E69782D- <2>
  6872 0000543E 436F6D70617469626C- <2>
  6873 00005447 65205368656C6C210A- <2>
  6874 00005450 00                  <2>
  6875                              <1> %include 'source/programs/system.asm'
  6876 00005451 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6877 0000545A BE[6D550000]        <2> 	mov esi, kernelinfomsg
  6878 0000545F E8DBC8FFFF          <2> 	call printquiet
  6879 00005464 B9[86920300]        <2> 	mov ecx, osend
  6880 00005469 E8A2DEFFFF          <2> 	call showdec
  6881 0000546E BE[82550000]        <2> 	mov esi, diskbytemsg
  6882 00005473 E8C7C8FFFF          <2> 	call printquiet
  6883 00005478 B9[86920300]        <2> 	mov ecx, osend
  6884 0000547D 81C1[3E900500]      <2> 	add ecx, commandbufend
  6885 00005483 81E9[00940300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6886 00005489 E882DEFFFF          <2> 	call showdec
  6887 0000548E BE[99550000]        <2> 	mov esi, membytemsg
  6888 00005493 E8A7C8FFFF          <2> 	call printquiet
  6889 00005498 BE[FC550000]        <2> 	mov esi, endofmemmsg
  6890 0000549D E89DC8FFFF          <2> 	call printquiet
  6891 000054A2 B9[52C82500]        <2> 	mov ecx, bssend
  6892 000054A7 E8A9DDFFFF          <2> 	call showhex
  6893 000054AC BE[B2550000]        <2> 	mov esi, systeminfomsg
  6894 000054B1 E889C8FFFF          <2> 	call printquiet
  6895                              <2> getcpuspeed:
  6896 000054B6 B8FE000000          <2> 	mov eax, 0xFE
  6897 000054BB E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6898 000054BD B020                <2> 	mov al, 0x20
  6899 000054BF E620                <2> 	out 0x20, al
  6900 000054C1 F4                  <2> 	hlt
  6901 000054C2 0F31                <2> 	rdtsc
  6902 000054C4 89D6                <2> 	mov esi, edx
  6903 000054C6 89C7                <2> 	mov edi, eax
  6904 000054C8 31C0                <2> 	xor eax, eax
  6905 000054CA C605[53020000]01    <2> 	mov byte [testingcpuspeed], 1
  6906                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6907 000054D1 40                  <2> 	inc eax
  6908 000054D2 E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6909                              <2> cpuspeedloopend:
  6910 000054D7 0F31                <2> 	rdtsc
  6911 000054D9 29F8                <2> 	sub eax, edi
  6912 000054DB 29F2                <2> 	sub edx, esi
  6913 000054DD 8915[5C020000]      <2> 	mov [cpuclocksperint + 4], edx
  6914 000054E3 A3[58020000]        <2> 	mov [cpuclocksperint], eax
  6915 000054E8 31C0                <2> 	xor eax, eax
  6916 000054EA E621                <2> 	out 0x21, al
  6917 000054EC B020                <2> 	mov al, 0x20
  6918 000054EE E620                <2> 	out 0x20, al
  6919 000054F0 31D2                <2> 	xor edx, edx
  6920 000054F2 31C0                <2> 	xor eax, eax
  6921 000054F4 A1[54020000]        <2> 	mov eax, [cpuspeedperint]
  6922 000054F9 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6923                              <2> 				;result by 2
  6924 000054FB 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6925 00005501 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6926 00005504 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6927 00005506 89C1                <2> 	mov ecx, eax
  6928 00005508 E803DEFFFF          <2> 	call showdec
  6929 0000550D BE[E0550000]        <2> 	mov esi, cpuspeedmsg
  6930 00005512 E828C8FFFF          <2> 	call printquiet
  6931 00005517 31D2                <2> 	xor edx, edx
  6932 00005519 A1[58020000]        <2> 	mov eax, [cpuclocksperint]
  6933 0000551E 8B15[5C020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6934 00005524 8B1D[66020000]      <2> 	mov ebx, [timeinterval]
  6935 0000552A C1EB0A              <2> 	shr ebx, 10
  6936 0000552D F7F3                <2> 	div ebx
  6937 0000552F 89C1                <2> 	mov ecx, eax
  6938 00005531 E8DADDFFFF          <2> 	call showdec
  6939 00005536 BE[E6550000]        <2> 	mov esi, cpuclockmsg
  6940 0000553B E8FFC7FFFF          <2> 	call printquiet
  6941 00005540 8B0D[60020000]      <2> 	mov ecx, [memoryspace]
  6942 00005546 C1E914              <2> 	shr ecx, 20
  6943 00005549 41                  <2> 	inc ecx	;the reading is one MB behind
  6944 0000554A E8C1DDFFFF          <2> 	call showdec
  6945 0000554F BE[EB550000]        <2> 	mov esi, memoryspacemsg
  6946 00005554 E80AC8FFFF          <2> 	call print
  6947                              <2> %ifdef sound.included
  6948 00005559 803D[49620000]00    <2> 	cmp byte [SoundBlaster], 0
  6949 00005560 740A                <2> 	je .nosb
  6950 00005562 BE[C8550000]        <2> 	mov esi, soundblastermsg
  6951 00005567 E8F7C7FFFF          <2> 	call print
  6952                              <2> .nosb:
  6953                              <2> %endif
  6954 0000556C C3                  <2> 	ret
  6955                              <2> 
  6956 0000556D 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6957 00005576 666F726D6174696F6E- <2>
  6958 0000557F 3A0A00              <2>
  6959 00005582 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6960 0000558B 6B2053706163652055- <2>
  6961 00005594 7365640A00          <2>
  6962 00005599 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6963 000055A2 6F7279205370616365- <2>
  6964 000055AB 20557365640A00      <2>
  6965 000055B2 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6966 000055BB 6E666F726D6174696F- <2>
  6967 000055C4 6E3A0A00            <2>
  6968                              <2> %ifdef sound.included
  6969 000055C8 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6970 000055D1 746572204465746563- <2>
  6971 000055DA 7465642E0A00        <2>
  6972                              <2> %endif
  6973 000055E0 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6974 000055E6 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6975 000055EB 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6976 000055F4 2053706163650A00    <2>
  6977 000055FC 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6978 00005605 6D6F72792053706163- <2>
  6979 0000560E 653A20307800        <2>
  6980                              <1> %include 'source/programs/time.asm'
  6981 00005614 FF2C74696D6500      <2> db 255,44,"time",0	
  6982                              <2> timer:
  6983 0000561B 8B35[0C300000]      <2> 	mov esi, [currentcommandloc]
  6984 00005621 81C604000000        <2> 	add esi, 4
  6985 00005627 803E00              <2> 	cmp byte [esi], 0
  6986 0000562A 7477                <2> 	je .norun
  6987 0000562C 46                  <2> 	inc esi
  6988 0000562D 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  6989 00005633 51                  <2> 	push ecx
  6990 00005634 8B0D[6F020000]      <2> 	mov ecx, [timenanoseconds]
  6991 0000563A 51                  <2> 	push ecx
  6992 0000563B BF[88CE0300]        <2> 	mov edi, buftxt
  6993                              <2> .cpcmd:
  6994 00005640 8A06                <2> 	mov al, [esi]
  6995 00005642 8807                <2> 	mov [edi], al
  6996 00005644 46                  <2> 	inc esi
  6997 00005645 47                  <2> 	inc edi
  6998 00005646 3C00                <2> 	cmp al, 0
  6999 00005648 75F6                <2> 	jne .cpcmd
  7000 0000564A E8E1D8FFFF          <2> 	call run
  7001 0000564F 5A                  <2> 	pop edx
  7002 00005650 58                  <2> 	pop eax
  7003                              <2> 
  7004 00005651 8B0D[6B020000]      <2> 	mov ecx, [timeseconds]
  7005 00005657 29C1                <2> 	sub ecx, eax
  7006 00005659 8B1D[6F020000]      <2> 	mov ebx, [timenanoseconds]
  7007 0000565F 29D3                <2> 	sub ebx, edx
  7008 00005661 7307                <2> 	jae .nosign
  7009 00005663 81C300CA9A3B        <2> 	add ebx, 1000000000
  7010 00005669 49                  <2> 	dec ecx
  7011                              <2> .nosign:
  7012 0000566A E8A1DCFFFF          <2> 	call showdec
  7013                              <2> 	
  7014 0000566F 89D9                <2> 	mov ecx, ebx
  7015 00005671 BE[5F410000]        <2> 	mov esi, timenscache
  7016 00005676 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  7017 0000567D C7460630303030      <2> 	mov dword [esi + 6], "0000"
  7018 00005684 C6460A30            <2> 	mov byte [esi + 10], "0"
  7019 00005688 BE[6A410000]        <2> 	mov esi, timenscacheend
  7020 0000568D E85BDAFFFF          <2> 	call convert
  7021 00005692 BE[5F410000]        <2> 	mov esi, timenscache
  7022 00005697 E8C7C6FFFF          <2> 	call print
  7023 0000569C C605[5F410000]08    <2> 	mov byte [timenscache], 8
  7024                              <2> .norun:
  7025 000056A3 C3                  <2> 	ret
  7026                              <2> 	
  7027                              <1> %include 'source/programs/turnoff.asm'
  7028 000056A4 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  7029 000056AD 00                  <2>
  7030                              <2> 	turnoff:
  7031 000056AE 66C705[F70C0000]-   <2> 			mov word [realmodeptr], shutdown
  7032 000056B5 [C156]              <2>
  7033 000056B7 BB[EC560000]        <2> 			mov ebx, halt
  7034 000056BC E824B5FFFF          <2> 			call realmode
  7035                              <2> 
  7036                              <2> [BITS 16]
  7037                              <2> 		shutdown:
  7038 000056C1 B453                <2> 			mov ah, 0x53
  7039 000056C3 B004                <2> 			mov al, 4
  7040 000056C5 31DB                <2> 			xor bx, bx
  7041 000056C7 CD15                <2> 			int 0x15
  7042                              <2> 			
  7043 000056C9 B453                <2> 			mov ah, 0x53
  7044 000056CB B001                <2> 			mov al, 1
  7045 000056CD 31DB                <2> 			xor bx, bx
  7046 000056CF CD15                <2> 			int 0x15
  7047                              <2> 			
  7048 000056D1 B453                <2> 			mov ah, 0x53
  7049 000056D3 B008                <2> 			mov al, 8
  7050 000056D5 BB0100              <2> 			mov bx, 1
  7051 000056D8 B90100              <2> 			mov cx, 1
  7052 000056DB CD15                <2> 			int 0x15
  7053                              <2> 			
  7054 000056DD B453                <2> 			mov ah, 0x53
  7055 000056DF B007                <2> 			mov al, 7
  7056 000056E1 BB0100              <2> 			mov bx, 1
  7057 000056E4 B90300              <2> 			mov cx, 3
  7058 000056E7 CD15                <2> 			int 0x15
  7059 000056E9 E9FDFF              <2> 			jmp $
  7060                              <2> 			[BITS 32]
  7061 000056EC E9FBFFFFFF          <2> halt: jmp $
  7062                              <1> %include 'source/programs/wait.asm'
  7063 000056F1 FF2C7761697400      <2> db 255,44,"wait",0
  7064                              <2> waitkey:
  7065 000056F8 E87CCCFFFF          <2> 		call getchar
  7066 000056FD C3                  <2> 		ret
  7067                              <1> %include 'source/programs/while.asm'
  7068 000056FE FF2C7768696C6500    <2> db 255,44,"while",0
  7069 00005706 30C0                <2> whilecmd:  xor al, al
  7070 00005708 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  7071 0000570E 0F8475E4FFFF        <2> 	je near notbatch
  7072 00005714 8B35[7EBA0300]      <2> 	mov esi, [BATCHPOS]
  7073 0000571A 81EE02000000        <2> 	sub esi, 2
  7074 00005720 4E                  <2> whilefnd: dec esi
  7075 00005721 8A06                <2> 	mov al, [esi]
  7076 00005723 3C0A                <2> 	cmp al, 10
  7077 00005725 0F840D000000        <2> 	je near whilefnd2
  7078 0000572B 3C00                <2> 	cmp al, 0
  7079 0000572D 0F8405000000        <2> 	je near whilefnd2
  7080 00005733 E9E8FFFFFF          <2> 	jmp whilefnd
  7081                              <2> whilefnd2:
  7082 00005738 46                  <2> 	inc esi
  7083 00005739 8935[84BA0300]      <2> 	mov [LOOPPOS], esi
  7084 0000573F C605[83BA0300]01    <2> 	mov BYTE [LOOPON], 1
  7085 00005746 BE[88CE0300]        <2> 	mov esi, buftxt
  7086 0000574B BB[88CE0300]        <2> 	mov ebx, buftxt
  7087 00005750 81C306000000        <2> 	add ebx, 6
  7088 00005756 E9CEF3FFFF          <2> 	jmp chkeqsn
  7089                              <1> progend:		;programs end here	
  7090                              <1> batchprogend:
  7091                                  	%include "source/hardware.asm"
  7092                              <1> %ifdef gui.included
  7093                              <1> 	%include "source/drivers/video/vesa.asm"
  7094                              <2> [BITS 16]
  7095                              <2> guiswitch:
  7096 0000575B 81F90000            <2> 	cmp cx, 0
  7097 0000575F 750B                <2> 	jne guiswitchdefnum
  7098 00005761 B81200              <2> 	mov ax, 12h
  7099 00005764 31DB                <2> 	xor bx, bx
  7100 00005766 CD10                <2> 	int 10h
  7101 00005768 E85100              <2> 	call guiloadagain
  7102                              <2> guiswitchnocando:
  7103 0000576B C3                  <2> 	ret	;return without switching as mode number is bad
  7104                              <2> guiswitchdefnum:	;switch to a defined mode number
  7105 0000576C B8004F              <2> 	mov ax, 0x4F00
  7106 0000576F BF[4D59]            <2> 	mov di, VBEMODEBLOCK
  7107 00005772 CD10                <2> 	int 10h
  7108 00005774 BE[6F59]            <2> 	mov si, reserved
  7109 00005777 81EE0200            <2> 	sub si, 2
  7110                              <2> .loop:
  7111 0000577B 81C60200            <2> 	add si, 2
  7112 0000577F 81FE[4D5A]          <2> 	cmp si, oemdata
  7113 00005783 74E6                <2> 	je guiswitchnocando
  7114 00005785 813CFFFF            <2> 	cmp word [si], 0xFFFF
  7115 00005789 74E0                <2> 	je guiswitchnocando
  7116 0000578B 390C                <2> 	cmp [si], cx
  7117 0000578D 75EC                <2> 	jne .loop
  7118 0000578F 8936[A358]          <2> 	mov [videomodecache], si
  7119 00005793 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  7120 00005797 B8014F              <2> 	mov ax, 0x4F01
  7121 0000579A BF[4D5B]            <2> 	mov di, VBEMODEINFOBLOCK
  7122 0000579D 890E[A158]          <2> 	mov [vesamode], cx
  7123 000057A1 CD10                <2> 	int 10h
  7124 000057A3 E9DB00              <2> 	jmp selectedvesa
  7125                              <2> guiload:
  7126 000057A6 BE[2559]            <2> 	mov si, bootmsg
  7127 000057A9 E8D5A8              <2> 	call printrm
  7128 000057AC 31C0                <2> 	xor ax, ax
  7129 000057AE CD16                <2> 	int 16h
  7130 000057B0 3C79                <2> 	cmp al, "y"
  7131 000057B2 0F8589A8            <2> 	jne near vgaset
  7132 000057B6 BE[0690]            <2> 	mov si, crlf
  7133 000057B9 E8C5A8              <2> 	call printrm
  7134                              <2> guiloadagain:
  7135 000057BC B8004F              <2> 	mov ax, 04F00h
  7136 000057BF BF[4D59]            <2> 	mov di, VBEMODEBLOCK
  7137 000057C2 CD10                <2> 	int 10h
  7138 000057C4 BE[6F59]            <2> 	mov si, reserved
  7139 000057C7 81EE0200            <2> 	sub si, 2
  7140                              <2> findvideomodes:
  7141 000057CB 81C60200            <2> 	add si, 2
  7142 000057CF 8B0C                <2> 	mov cx, [si]
  7143 000057D1 81F9FFFF            <2> 	cmp cx, 0xFFFF
  7144 000057D5 0F840B00            <2> 	je near nextvmode
  7145 000057D9 81FE[4D5A]          <2> 	cmp si, oemdata
  7146 000057DD 0F835EA8            <2> 	jae near vgaset	;kill if no valid list is found
  7147 000057E1 E9E7FF              <2> 	jmp findvideomodes 	
  7148                              <2> ;debug,shows vmodes available
  7149                              <2> nextvmode:
  7150 000057E4 81EE0200            <2> 	sub si, 2
  7151 000057E8 81FE[6F59]          <2> 	cmp si, reserved
  7152 000057EC 0F82CCFF            <2> 	jb near guiloadagain
  7153 000057F0 8B0C                <2> 	mov cx, [si]
  7154 000057F2 81F9FFFF            <2> 	cmp cx, 0xFFFF
  7155 000057F6 0F84EAFF            <2> 	je near nextvmode
  7156 000057FA 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  7157 000057FE B8014F              <2> 	mov ax, 04F01h
  7158 00005801 BF[4D5B]            <2> 	mov di, VBEMODEINFOBLOCK
  7159 00005804 890E[A158]          <2> 	mov [vesamode], cx
  7160 00005808 CD10                <2> 	int 10h
  7161 0000580A A0[665B]            <2> 	mov al, [bitsperpixel]
  7162 0000580D 3C10                <2> 	cmp al, 16
  7163 0000580F 75D3                <2> 	jne nextvmode
  7164 00005811 8936[A358]          <2> 	mov [videomodecache], si
  7165 00005815 84E4                <2> 	test ah, ah
  7166 00005817 0F842300            <2> 	jz near setvesamode
  7167 0000581B E9C6FF              <2> 	jmp nextvmode
  7168 0000581E 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7169 00005827 20766964656F206D6F- <2>
  7170 00005830 6465204F4B3F28792F- <2>
  7171 00005839 6E290D0A00          <2>
  7172                              <2> setvesamode:
  7173 0000583E 8B36[A358]          <2> 	mov si, [videomodecache]
  7174 00005842 8B0C                <2> 	mov cx, [si]
  7175 00005844 E86500              <2> 	call decshow
  7176 00005847 B03A                <2> 	mov al, ':'
  7177 00005849 E8D100              <2> 	call char
  7178 0000584C 8B0E[5F5B]          <2> 	mov cx, [resolutionx]
  7179 00005850 E85900              <2> 	call decshow
  7180 00005853 B078                <2> 	mov al, "x"
  7181 00005855 E8C500              <2> 	call char
  7182 00005858 8B0E[615B]          <2> 	mov cx, [resolutiony]
  7183 0000585C E84D00              <2> 	call decshow
  7184 0000585F B040                <2> 	mov al, "@"
  7185 00005861 E8B900              <2> 	call char
  7186 00005864 31C9                <2> 	xor cx, cx
  7187 00005866 8A0E[665B]          <2> 	mov cl, [bitsperpixel]
  7188 0000586A E83F00              <2> 	call decshow
  7189 0000586D BE[1E58]            <2> 	mov si, isthisvideook
  7190 00005870 E80EA8              <2> 	call printrm
  7191 00005873 31C0                <2> 	xor ax, ax
  7192 00005875 CD16                <2> 	int 16h
  7193 00005877 8B36[A358]          <2> 	mov si, [videomodecache]
  7194 0000587B 3C79                <2> 	cmp al, "y"
  7195 0000587D 0F8563FF            <2> 	jne near nextvmode
  7196                              <2> selectedvesa:
  7197 00005881 8B16[5F5B]          <2> 	mov dx, [resolutionx]
  7198 00005885 01D2                <2> 	add dx, dx
  7199 00005887 8916[4D5C]          <2> 	mov [resolutionx2], dx
  7200 0000588B 31D2                <2> 	xor dx, dx
  7201 0000588D 31C9                <2> 	xor cx, cx
  7202 0000588F B8024F              <2> 	mov ax, 04F02h
  7203 00005892 8B1E[A158]          <2> 	mov bx, [vesamode]
  7204 00005896 CD10                <2> 	int 10h		;enter VESA mode
  7205 00005898 C606[2C90]01        <2> 	mov byte [guion], 1
  7206 0000589D E8AFA7              <2> 	call getmemorysize;get the memory map after the video is initialized
  7207 000058A0 C3                  <2> 	ret
  7208                              <2> 	
  7209 000058A1 0000                <2> vesamode dw 0
  7210 000058A3 0000                <2> videomodecache dw 0
  7211                              <2> 
  7212 000058A5 0000000000          <2> dcnm db 0,0,0,0,0
  7213 000058AA 0000                <2> dcnmend db 0,0
  7214                              <2> 
  7215                              <2> 
  7216                              <2> decshow:
  7217 000058AC BE[A558]            <2> 	mov si, dcnm
  7218                              <2> decclear:
  7219 000058AF B030                <2> 	mov al, "0"
  7220 000058B1 8804                <2> 	mov [si], al
  7221 000058B3 46                  <2> 	inc si
  7222 000058B4 81FE[AA58]          <2> 	cmp si, dcnmend
  7223 000058B8 76F5                <2> 	jbe decclear
  7224 000058BA 4E                  <2> 	dec si
  7225 000058BB E81500              <2> 	call convertrm
  7226 000058BE BE[A558]            <2> 	mov si, dcnm
  7227                              <2> dectst:
  7228 000058C1 8A04                <2> 	mov al, [si]
  7229 000058C3 46                  <2> 	inc si
  7230 000058C4 81FE[AA58]          <2> 	cmp si, dcnmend
  7231 000058C8 7704                <2> 	ja dectstend
  7232 000058CA 3C30                <2> 	cmp al, "0"
  7233 000058CC 76F3                <2> 	jbe dectst
  7234                              <2> dectstend:
  7235 000058CE 4E                  <2> 	dec si
  7236 000058CF E8AFA7              <2> 	call printrm
  7237 000058D2 C3                  <2> 	ret
  7238                              <2> 	
  7239                              <2> 	
  7240                              <2> convertrm:
  7241 000058D3 4E                  <2> 	dec si
  7242 000058D4 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7243                              <2> cnvrtrm:
  7244 000058D6 89DE                <2> 	mov si, bx
  7245 000058D8 81EE0300            <2> 	sub si, 3
  7246 000058DC 46                  <2> ten3rm:	inc si
  7247 000058DD 81F9E803            <2> 	cmp cx, 1000
  7248 000058E1 7209                <2> 	jb ten2rm
  7249 000058E3 81E9E803            <2> 	sub cx, 1000
  7250 000058E7 FE04                <2> 	inc byte [si]
  7251 000058E9 E9EAFF              <2> 	jmp cnvrtrm
  7252 000058EC 46                  <2> ten2rm:	inc si
  7253 000058ED 81F96400            <2> 	cmp cx, 100
  7254 000058F1 7209                <2> 	jb ten1rm
  7255 000058F3 81E96400            <2> 	sub cx, 100
  7256 000058F7 FE04                <2> 	inc byte [si]
  7257 000058F9 E9DAFF              <2> 	jmp cnvrtrm
  7258 000058FC 46                  <2> ten1rm:	inc si
  7259 000058FD 81F90A00            <2> 	cmp cx, 10
  7260 00005901 7209                <2> 	jb ten0rm
  7261 00005903 81E90A00            <2> 	sub cx, 10
  7262 00005907 FE04                <2> 	inc byte [si]
  7263 00005909 E9CAFF              <2> 	jmp cnvrtrm
  7264 0000590C 46                  <2> ten0rm:	inc si
  7265 0000590D 81F90100            <2> 	cmp cx, 1
  7266 00005911 7209                <2> 	jb tendnrm
  7267 00005913 81E90100            <2> 	sub cx, 1
  7268 00005917 FE04                <2> 	inc byte [si]
  7269 00005919 E9BAFF              <2> 	jmp cnvrtrm
  7270                              <2> tendnrm:
  7271 0000591C C3                  <2> 	ret
  7272                              <2> 
  7273                              <2>     char: 		    ;char must be in al
  7274 0000591D BB0700              <2>        mov bx, 07
  7275 00005920 B40E                <2> 	   mov ah, 0Eh
  7276 00005922 CD10                <2> 	   int 10h
  7277 00005924 C3                  <2> 	   ret
  7278                              <2> 
  7279 00005925 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7280 0000592E 20746865204755493F- <2>
  7281 00005937 28792F6E2900        <2>
  7282                              <2> 
  7283                              <2> 
  7284                              <2> mcursor:
  7285 0000593D 01                  <2> 	db	00000001b
  7286 0000593E 81                  <2> 	db	10000001b
  7287 0000593F C1                  <2> 	db	11000001b
  7288 00005940 E1                  <2> 	db	11100001b
  7289 00005941 F1                  <2> 	db	11110001b
  7290 00005942 F9                  <2> 	db	11111001b
  7291 00005943 FD                  <2> 	db	11111101b
  7292 00005944 FF                  <2> 	db	11111111b
  7293 00005945 F9                  <2> 	db	11111001b
  7294 00005946 B9                  <2> 	db	10111001b
  7295 00005947 39                  <2> 	db	00111001b
  7296 00005948 1C                  <2> 	db	00011100b
  7297 00005949 1C                  <2> 	db	00011100b
  7298 0000594A 0E                  <2> 	db	00001110b
  7299 0000594B 0E                  <2> 	db	00001110b
  7300 0000594C 0C                  <2> 	db	00001100b
  7301                              <2> mcursorend:
  7302                              <2> 
  7303                              <2> 
  7304                              <2> VBEMODEBLOCK:
  7305 0000594D 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7306 00005951 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7307 00005953 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7308 00005957 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7309 0000595B 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7310 0000595F 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7311 00005961 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7312 00005963 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7313 00005967 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7314 0000596B 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7315 0000596F 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7316 00005A4D 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7317                              <2> 
  7318                              <2> VBEMODEINFOBLOCK:
  7319                              <2> ;Mandatory information for all VBE revision
  7320 00005B4D 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7321 00005B4F 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7322 00005B50 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7323 00005B51 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7324 00005B53 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7325 00005B55 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7326 00005B57 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7327 00005B59 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7328 00005B5D 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7329                              <2> 
  7330                              <2> ;Mandatory information for VBE 1.2 and above
  7331 00005B5F 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7332 00005B61 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7333 00005B63 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7334 00005B64 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7335 00005B65 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7336 00005B66 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7337 00005B67 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7338 00005B68 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7339 00005B69 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7340 00005B6A 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7341 00005B6B 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7342                              <2> 
  7343                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7344 00005B6C 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7345 00005B6D 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7346 00005B6E 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7347 00005B6F 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7348 00005B70 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7349 00005B71 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7350 00005B72 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7351 00005B73 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7352 00005B74 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7353                              <2> 
  7354                              <2> ;Mandatory information for VBE 2.0 and above
  7355 00005B75 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7356 00005B79 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7357 00005B7D 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7358 00005B7F 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7359                              <2> 
  7360 00005C4D 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7361                              <2> VBEEND:
  7362                              <2> [BITS 32]
  7363                              <1> 	%include "source/drivers/input/mouse.asm"
  7364 00005C51 00                  <2> mousedisabled db 0
  7365                              <2> 	
  7366                              <2> 	cursorgui:
  7367 00005C52 803D[5E8B0000]01    <2> 		cmp byte [mouseon], 1
  7368 00005C59 0F8432000000        <2> 		je near mousedaemon
  7369 00005C5F 803D[2C900000]00    <2> 		cmp byte [guion], 0
  7370 00005C66 0F8413070000        <2> 		je near entdown
  7371                              <2> 	initmouse:
  7372 00005C6C 803D[2C900000]00    <2> 		cmp byte [guion], 0
  7373 00005C73 7405                <2> 		je noswmsposinit
  7374 00005C75 E89B150000          <2> 		call switchmousepos2
  7375                              <2> 	noswmsposinit:
  7376 00005C7A E85D020000          <2> 	  	call PS2SET
  7377 00005C7F E886020000          <2> 		call ACTMOUS
  7378 00005C84 C605[5E8B0000]01    <2> 		mov byte [mouseon],1
  7379 00005C8B E89F020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7380                              <2> 		;call GETB
  7381                              <2> 				;if the bytes are mixed up,
  7382                              <2> 				;remove this line or add another of this line.
  7383                              <2> 	nomouse:
  7384 00005C90 C3                  <2> 		ret
  7385                              <2> 		
  7386                              <2> 	mousedaemon:
  7387 00005C91 803D[5E8B0000]01    <2> 		cmp byte [mouseon], 1
  7388 00005C98 75D2                <2> 		jne initmouse
  7389 00005C9A E464                <2> 		in al, 64h ; Status
  7390 00005C9C A820                <2> 		test al, 20h ; PS2-Mouse?
  7391 00005C9E 0F8502000000        <2> 		jnz near moused
  7392 00005CA4 F4                  <2> 		hlt
  7393 00005CA5 C3                  <2> 		ret
  7394                              <2> 	moused:
  7395 00005CA6 803D[515C0000]01    <2> 		cmp byte [mousedisabled], 1
  7396 00005CAD 74E1                <2> 		je nomouse
  7397 00005CAF E87B020000          <2> 		  call GETB
  7398 00005CB4 88C3                <2> 		  mov  bl, al
  7399 00005CB6 80E301              <2> 		  and  bl, 1
  7400 00005CB9 881D[545F0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7401 00005CBF 88C3                <2> 		  mov  bl, al
  7402 00005CC1 80E302              <2> 		  and  bl, 2
  7403 00005CC4 D0EB                <2> 		  shr  bl, 1
  7404 00005CC6 881D[555F0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7405 00005CCC 88C3                <2> 		  mov  bl, al
  7406 00005CCE 80E304              <2> 		  and  bl, 4
  7407 00005CD1 C0EB02              <2> 		  shr  bl, 2
  7408 00005CD4 881D[565F0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7409 00005CDA E850020000          <2> 		  call GETB
  7410 00005CDF A2[575F0000]        <2> 		  mov  BYTE [XCOORD], al
  7411 00005CE4 E846020000          <2> 		  call GETB
  7412 00005CE9 A2[585F0000]        <2> 		  mov  BYTE [YCOORD], al
  7413                              <2> 
  7414                              <2> 	showpixelcursor:
  7415 00005CEE 668B15[435E0000]    <2> 		mov dx, [mousecursorposition]
  7416 00005CF5 668B0D[455E0000]    <2> 		mov cx, [mousecursorposition + 2]
  7417 00005CFC 668915[3F5E0000]    <2> 		mov [lastmouseposition], dx
  7418 00005D03 66890D[415E0000]    <2> 		mov [lastmouseposition + 2], cx
  7419 00005D0A A0[575F0000]        <2> 		mov al, [XCOORD]
  7420 00005D0F 3C80                <2> 		cmp al, 128
  7421 00005D11 730C                <2> 		jae subxcoord
  7422 00005D13 00C0                <2> 		add al, al
  7423 00005D15 30E4                <2> 		xor ah, ah
  7424 00005D17 6601C2              <2> 		add dx, ax
  7425 00005D1A E90B000000          <2> 		jmp subxcoorddn
  7426                              <2> 	subxcoord:
  7427 00005D1F 00C0                <2> 		add al, al
  7428 00005D21 30DB                <2> 		xor bl, bl
  7429 00005D23 28C3                <2> 		sub bl, al
  7430 00005D25 30FF                <2> 		xor bh, bh
  7431 00005D27 6629DA              <2> 		sub dx, bx
  7432                              <2> 	subxcoorddn:
  7433 00005D2A 8A1D[585F0000]      <2> 		mov bl, [YCOORD]
  7434 00005D30 30C0                <2> 		xor al, al
  7435 00005D32 28D8                <2> 		sub al, bl
  7436 00005D34 3C80                <2> 		cmp al, 128
  7437 00005D36 730A                <2> 		jae subycoord
  7438 00005D38 30E4                <2> 		xor ah, ah
  7439 00005D3A 6601C1              <2> 		add cx, ax
  7440 00005D3D E909000000          <2> 		jmp subycoorddn
  7441                              <2> 	subycoord:
  7442 00005D42 30DB                <2> 		xor bl, bl
  7443 00005D44 28C3                <2> 		sub bl, al
  7444 00005D46 30FF                <2> 		xor bh, bh
  7445 00005D48 6629D9              <2> 		sub cx, bx
  7446                              <2> 	subycoorddn:
  7447 00005D4B 6681FA204E          <2> 		cmp dx, 20000
  7448 00005D50 7603                <2> 		jbe nooriginx2
  7449 00005D52 6631D2              <2> 		xor dx, dx
  7450                              <2> 	nooriginx2:
  7451 00005D55 6681F9204E          <2> 		cmp cx, 20000
  7452 00005D5A 7603                <2> 		jbe nooriginy2
  7453 00005D5C 6631C9              <2> 		xor cx, cx
  7454                              <2> 	nooriginy2:
  7455 00005D5F 6681FA0000          <2> 		cmp dx, 0
  7456 00005D64 7415                <2> 		je nofixxcolumn2
  7457 00005D66 663B15[4D5C0000]    <2> 		cmp dx, [resolutionx2]
  7458 00005D6D 720C                <2> 		jb nofixxcolumn2
  7459 00005D6F 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
  7460 00005D76 6681EA0200          <2> 		sub dx, 2
  7461                              <2> 	nofixxcolumn2:
  7462 00005D7B 6681F90000          <2> 		cmp cx, 0
  7463 00005D80 7415                <2> 		je nofixyrow2
  7464 00005D82 663B0D[615B0000]    <2> 		cmp cx, [resolutiony]
  7465 00005D89 720C                <2> 		jb nofixyrow2
  7466 00005D8B 668B0D[615B0000]    <2> 		mov cx, [resolutiony]
  7467 00005D92 6681E90100          <2> 		sub cx, 1
  7468                              <2> 	nofixyrow2:
  7469 00005D97 668915[435E0000]    <2> 		mov [mousecursorposition], dx
  7470 00005D9E 66890D[455E0000]    <2> 		mov [mousecursorposition + 2], cx
  7471 00005DA5 803D[2C900000]00    <2> 		cmp byte [guion], 0
  7472 00005DAC 0F8495000000        <2> 		je near termmouse
  7473 00005DB2 E8FE130000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7474 00005DB7 803D[545F0000]01    <2> 		cmp byte [LBUTTON], 1
  7475 00005DBE 0F8457250000        <2> 		je near clickicon
  7476 00005DC4 803D[555F0000]01    <2> 		cmp byte [RBUTTON], 1
  7477 00005DCB 0F844A250000        <2> 		je near clickicon
  7478 00005DD1 A0[08830000]        <2> 		mov al, [pbutton]
  7479 00005DD6 C705[0B830000]0000- <2> 		mov dword [dragging], 0
  7480 00005DDE 0000                <2>
  7481 00005DE0 3C00                <2> 		cmp al, 0
  7482 00005DE2 740F                <2> 		je nopreviousbutton
  7483 00005DE4 E874130000          <2> 		call clearmousecursor
  7484 00005DE9 E8DB160000          <2> 		call reloadallgraphics
  7485                              <2> 	windowtermcopyend:
  7486 00005DEE E822140000          <2> 		call switchmousepos2
  7487                              <2> 	nopreviousbutton:
  7488 00005DF3 30C0                <2> 		xor al, al
  7489 00005DF5 A2[08830000]        <2> 		mov [pbutton], al
  7490 00005DFA A2[72880000]        <2> 		mov [windrag], al
  7491 00005DFF A0[545F0000]        <2> 		mov al, [LBUTTON]
  7492 00005E04 A2[09830000]        <2> 		mov [pLBUTTON], al
  7493 00005E09 A0[555F0000]        <2> 		mov al, [RBUTTON]
  7494 00005E0E A2[0A830000]        <2> 		mov [pRBUTTON], al
  7495 00005E13 31D2                <2> 		xor edx, edx
  7496 00005E15 668B15[435E0000]    <2> 		mov dx, [mousecursorposition]
  7497 00005E1C 668B0D[455E0000]    <2> 		mov cx, [mousecursorposition + 2]
  7498 00005E23 66BB18C7            <2> 		mov bx, 1100011100011000b
  7499 00005E27 66B80100            <2> 		mov ax, 1
  7500 00005E2B C605[05830000]01    <2> 		mov byte [showcursorfonton], 1
  7501 00005E32 E8711D0000          <2> 		call showfontvesa
  7502 00005E37 C605[05830000]00    <2> 		mov byte [showcursorfonton], 0
  7503 00005E3E C3                  <2> 		ret
  7504                              <2> 
  7505 00005E3F 00000000            <2> lastmouseposition dw 0,0
  7506 00005E43 00000000            <2> mousecursorposition dw 0,0	
  7507                              <2> 
  7508                              <2> termmouse:
  7509 00005E47 BE[9ED50300]        <2> 		mov esi, videobuf
  7510 00005E4C 31D2                <2> 		xor edx, edx
  7511 00005E4E 668B15[3F5E0000]    <2> 		mov dx, [lastmouseposition]
  7512 00005E55 668B0D[415E0000]    <2> 		mov cx, [lastmouseposition + 2]
  7513 00005E5C 66A1[DA5E0000]      <2> 		mov ax, [cursorcache]
  7514 00005E62 663D0000            <2> 		cmp ax, 0
  7515 00005E66 7425                <2> 		je nocopycursorcache
  7516 00005E68 66C1E104            <2> 		shl cx, 4
  7517 00005E6C 66C1E203            <2> 		shl dx, 3
  7518 00005E70 01D6                <2> 		add esi, edx
  7519 00005E72 6631D2              <2> 		xor dx, dx
  7520 00005E75 8A15[0B260000]      <2> 		mov dl, [charxy]
  7521 00005E7B 6641                <2> 		inc cx
  7522                              <2> termmousecplp1:
  7523 00005E7D 01D6                <2> 		add esi, edx
  7524 00005E7F 6649                <2> 		dec cx
  7525 00005E81 6681F90000          <2> 		cmp cx, 0
  7526 00005E86 75F5                <2> 		jne termmousecplp1
  7527 00005E88 29D6                <2> 		sub esi, edx
  7528 00005E8A 668906              <2> 		mov [esi], ax
  7529                              <2> nocopycursorcache:
  7530 00005E8D BE[9ED50300]        <2> 		mov esi, videobuf
  7531 00005E92 31D2                <2> 		xor edx, edx
  7532 00005E94 668B15[435E0000]    <2> 		mov dx, [mousecursorposition]
  7533 00005E9B 668B0D[455E0000]    <2> 		mov cx, [mousecursorposition + 2]
  7534 00005EA2 66C1E104            <2> 		shl cx, 4
  7535 00005EA6 66C1E203            <2> 		shl dx, 3
  7536 00005EAA 01D6                <2> 		add esi, edx
  7537 00005EAC 6631D2              <2> 		xor dx, dx
  7538 00005EAF 8A15[0B260000]      <2> 		mov dl, [charxy]
  7539 00005EB5 6641                <2> 		inc cx
  7540                              <2> termmousecplp2:
  7541 00005EB7 01D6                <2> 		add esi, edx
  7542 00005EB9 6649                <2> 		dec cx
  7543 00005EBB 6681F90000          <2> 		cmp cx, 0
  7544 00005EC0 75F5                <2> 		jne termmousecplp2
  7545 00005EC2 29D6                <2> 		sub esi, edx
  7546 00005EC4 668B06              <2> 		mov ax, [esi]
  7547 00005EC7 66A3[DA5E0000]      <2> 		mov [cursorcache], ax
  7548 00005ECD B080                <2> 		mov al, 128
  7549 00005ECF B407                <2> 		mov ah, 7
  7550 00005ED1 668906              <2> 		mov [esi], ax
  7551 00005ED4 E80DCAFFFF          <2> 		call termcopy
  7552 00005ED9 C3                  <2> 		ret
  7553 00005EDA 0000                <2> cursorcache db 0,0
  7554                              <2> 
  7555                              <2> PS2SET:
  7556 00005EDC B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7557 00005EDE E664                <2>   out  0x64, al		; write to keyboardcontroller
  7558 00005EE0 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7559 00005EE5 C3                  <2> ret
  7560                              <2> 
  7561                              <2> CHKPRT:
  7562 00005EE6 66B96400            <2>   mov  cx, 100
  7563                              <2>  .again:
  7564 00005EEA E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7565 00005EEC A802                <2>   test al, 2		; Check if input buffer is empty
  7566 00005EEE 7402                <2>   je .go
  7567 00005EF0 E2F8                <2>   loop .again
  7568                              <2>  .go:
  7569 00005EF2 C3                  <2> ret
  7570                              <2> 
  7571                              <2> WMOUS:
  7572 00005EF3 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7573 00005EF5 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7574 00005EF7 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7575 00005EFC C3                  <2> ret
  7576                              <2> 
  7577                              <2> MBUFFUL:
  7578 00005EFD 66B96400            <2>   mov cx, 100
  7579                              <2>  .mn:
  7580 00005F01 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7581 00005F03 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7582 00005F05 7402                <2>   jz  .mnn
  7583 00005F07 E2F8                <2>   loop .mn
  7584                              <2>  .mnn:
  7585 00005F09 C3                  <2> ret
  7586                              <2> 
  7587                              <2> 
  7588                              <2> ACTMOUS:
  7589 00005F0A E8E4FFFFFF          <2>   call WMOUS
  7590 00005F0F B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7591 00005F11 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7592 00005F13 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7593 00005F18 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7594 00005F1D C3                  <2> ret
  7595                              <2> 
  7596                              <2> CHKMOUS:
  7597 00005F1E B300                <2>   mov  bl, 0
  7598 00005F20 66B96400            <2>   mov cx, 100
  7599                              <2>  .vrd:
  7600 00005F24 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7601 00005F26 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7602 00005F28 7504                <2>   jnz .yy
  7603 00005F2A E2F8                <2>   loop .vrd
  7604 00005F2C B301                <2>   mov  bl, 1
  7605                              <2>  .yy:
  7606 00005F2E C3                  <2> ret
  7607                              <2> 
  7608                              <2> GETB:
  7609                              <2>  .cagain:
  7610 00005F2F E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7611 00005F34 08DB                <2>   or bl, bl
  7612 00005F36 75F7                <2>   jnz .cagain
  7613 00005F38 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7614 00005F3A E664                <2>   out  0x64, al		; write to keyboardcontroller
  7615 00005F3C E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7616 00005F41 6631C0              <2>   xor  ax, ax
  7617 00005F44 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7618 00005F46 88C2                <2>   mov  dl, al
  7619 00005F48 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7620 00005F4A E664                <2>   out  0x64, al		; write to keyboardcontroller
  7621 00005F4C E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7622 00005F51 88D0                <2>   mov  al, dl
  7623 00005F53 C3                  <2> ret
  7624                              <2> 
  7625 00005F54 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7626 00005F55 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7627 00005F56 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7628 00005F57 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7629 00005F58 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7630                              <1> %endif
  7631                              <1> %include "source/drivers/sound/pcspkr.asm"
  7632                              <2> ;PC Speaker Drivers
  7633                              <2> PCSpeakerRAW:
  7634 00005F59 60                  <2> 	pusha
  7635                              <2> nosoundrep:
  7636 00005F5A 8B35[76020000]      <2> 	mov esi, [soundpos]
  7637 00005F60 31C9                <2> 	xor ecx, ecx
  7638 00005F62 668B0D[74020000]    <2> 	mov cx, [soundrepititions]
  7639 00005F69 6681F90000          <2> 	cmp cx, 0
  7640 00005F6E 0F8548000000        <2> 	jne near donesetpitch
  7641 00005F74 668B0E              <2> 	mov cx, [esi]
  7642 00005F77 668B5E02            <2> 	mov bx, [esi + 2]
  7643 00005F7B 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7644 00005F82 81C604000000        <2> 	add esi, 4
  7645 00005F88 8935[76020000]      <2> 	mov [soundpos], esi
  7646 00005F8E 3B35[7A020000]      <2> 	cmp esi, [soundendpos]
  7647 00005F94 7735                <2> 	ja stopsound
  7648 00005F96 66813D[74020000]00- <2> 	cmp word [soundrepititions], 0
  7649 00005F9E 00                  <2>
  7650 00005F9F 74B9                <2> 	je nosoundrep
  7651 00005FA1 6681FB0000          <2> 	cmp bx, 0
  7652 00005FA6 740F                <2> 	je nosoundplay
  7653 00005FA8 E840000000          <2> 	call setpitch
  7654 00005FAD E849000000          <2> 	call startsound
  7655 00005FB2 E905000000          <2> 	jmp donesetpitch
  7656                              <2> nosoundplay:
  7657 00005FB7 E846000000          <2> 	call killsound
  7658                              <2> donesetpitch:
  7659 00005FBC 6649                <2> 	dec cx
  7660 00005FBE 66890D[74020000]    <2> 	mov [soundrepititions], cx
  7661 00005FC5 61                  <2> 	popa
  7662 00005FC6 E9E7A2FFFF          <2> 	jmp timerinterrupt
  7663                              <2> stopsound:
  7664 00005FCB 31C0                <2> 	xor eax, eax
  7665 00005FCD 66A3[74020000]      <2> 	mov [soundrepititions], ax
  7666 00005FD3 A2[73020000]        <2> 	mov [soundon], al
  7667 00005FD8 A3[76020000]        <2> 	mov [soundpos], eax
  7668 00005FDD A3[7A020000]        <2> 	mov [soundendpos], eax
  7669 00005FE2 E81B000000          <2> 	call killsound
  7670 00005FE7 61                  <2> 	popa
  7671 00005FE8 E9C5A2FFFF          <2> 	jmp timerinterrupt
  7672                              <2> 
  7673                              <2> 
  7674                              <2> setpitch:
  7675 00005FED B0B6                <2> 	mov al, 0xB6
  7676 00005FEF E643                <2> 	out 0x43, al
  7677 00005FF1 6689D8              <2> 	mov ax, bx
  7678 00005FF4 E642                <2> 	out 0x42, al
  7679 00005FF6 88E0                <2> 	mov al, ah
  7680 00005FF8 E642                <2> 	out 0x42, al
  7681 00005FFA C3                  <2> 	ret
  7682                              <2> startsound:
  7683 00005FFB E461                <2> 	in al, 0x61
  7684 00005FFD 0C03                <2> 	or al, 3
  7685 00005FFF E661                <2> 	out 0x61, al
  7686 00006001 C3                  <2> 	ret
  7687                              <2> killsound:
  7688 00006002 E461                <2> 	in al, 0x61
  7689 00006004 24FC                <2> 	and al, 0xFC
  7690 00006006 E661                <2> 	out 0x61, al
  7691 00006008 C3                  <2> 	ret
  7692                              <2> 	
  7693                              <1> %ifdef sound.included
  7694                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7695                              <2> ;Sound Blaster Drivers
  7696                              <2> sblaster:
  7697                              <2> .init:
  7698 00006009 E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7699 0000600E A2[49620000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7700 00006013 3C00                <2> 		cmp al, 0
  7701 00006015 7418                <2> 		je .noinit
  7702 00006017 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7703 00006019 E805020000          <2> 		call WriteDSP
  7704 0000601E B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7705 00006020 E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7706 00006025 BE[30600000]        <2> 		mov esi, .initmsg
  7707 0000602A E834BDFFFF          <2> 		call print
  7708                              <2> .noinit:
  7709 0000602F C3                  <2> 		ret
  7710 00006030 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7711 00006039 69616C697A65642E0A- <2>
  7712 00006042 00                  <2>
  7713                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7714 00006043 813D[34620000]0000- <2> 	cmp dword [Length0], 0
  7715 0000604B 0000                <2>
  7716 0000604D 0F8462000000        <2> 	je near .done
  7717 00006053 FF0D[34620000]      <2> 	dec dword [Length0]
  7718 00006059 E908000000          <2> 	jmp .notodd
  7719                              <2> .oddlength:
  7720 0000605E 31C9                <2> 	xor ecx, ecx
  7721 00006060 880D[33620000]      <2> 	mov [OddLength], cl
  7722                              <2> .notodd:
  7723 00006066 8B35[3A620000]      <2> 	mov esi, [NextMemLoc]
  7724 0000606C 31C9                <2> 	xor ecx, ecx
  7725 0000606E 668B0D[38620000]    <2> 	mov cx, [Length1]
  7726 00006075 D1E9                <2> 	shr ecx, 1
  7727 00006077 6641                <2> 	inc cx
  7728 00006079 31DB                <2> 	xor ebx, ebx
  7729 0000607B 668B1D[42620000]    <2> 	mov bx, [SegLoc]
  7730 00006082 6601CB              <2> 	add bx, cx
  7731 00006085 66891D[42620000]    <2> 	mov [SegLoc], bx
  7732 0000608C 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7733 00006092 8935[3E620000]      <2> 	mov [MemLoc], esi
  7734 00006098 89C8                <2> 	mov eax, ecx
  7735 0000609A 01F0                <2> 	add eax, esi
  7736 0000609C A3[3A620000]        <2> 	mov [NextMemLoc], eax
  7737 000060A1 E833000000          <2> 	call DMACopy
  7738                              <2> 	;call DMAPlay
  7739 000060A6 E8E0000000          <2> 	call PlayDSP
  7740 000060AB 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7741 000060AF EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7742 000060B0 E9BBA2FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7743                              <2> .done:
  7744 000060B5 803D[33620000]01    <2> 	cmp byte [OddLength], 1
  7745 000060BC 74A0                <2> 	je .oddlength
  7746 000060BE 31C0                <2> 	xor eax, eax
  7747 000060C0 66A3[38620000]      <2> 	mov [Length1], ax
  7748 000060C6 66B8D000            <2> 	mov ax, 0xD0
  7749 000060CA E854010000          <2> 	call WriteDSP
  7750 000060CF 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7751 000060D3 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7752 000060D4 E997A2FFFF          <2> 	jmp handled2
  7753                              <2> 	
  7754                              <2> DMACopy:
  7755 000060D9 66B80800            <2> 		mov ax, LINEAR_SEL
  7756 000060DD 8EE0                <2> 		mov fs, ax
  7757 000060DF C1E902              <2> 		shr ecx, 2
  7758                              <2> .loop:
  7759 000060E2 8B06                <2> 		mov eax, [esi]
  7760 000060E4 648903              <2> 		mov [fs:ebx], eax
  7761 000060E7 81C604000000        <2> 		add esi, 4
  7762 000060ED 81C304000000        <2> 		add ebx, 4
  7763 000060F3 E2ED                <2> 		loop .loop
  7764 000060F5 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7765 000060F9 8EE0                <2> 		mov fs, ax
  7766 000060FB C3                  <2> 		ret
  7767                              <2> 		
  7768                              <2> 
  7769                              <2> DMAPlay:    ;uses eax ebx edx
  7770 000060FC C605[44620000]00    <2> 		mov	byte [Page1],00h
  7771                              <2> 
  7772 00006103 B005                <2> 		mov	al,(Channel+4)
  7773 00006105 66BA0A00            <2> 		mov	dx,0Ah
  7774 00006109 EE                  <2> 		out	dx,al
  7775 0000610A 30C0                <2> 		xor	al,al
  7776 0000610C 66BA0C00            <2> 		mov	dx,0Ch
  7777 00006110 EE                  <2> 		out	dx,al
  7778 00006111 B059                <2> 		mov	al,ModeReg
  7779 00006113 66BA0B00            <2> 		mov	dx,0Bh
  7780 00006117 EE                  <2> 		out	dx,al
  7781 00006118 B800000800          <2> 		mov	eax,0x80000
  7782 0000611D 66BA0200            <2> 		mov	dx,AddPort
  7783 00006121 EE                  <2> 		out	dx,al
  7784 00006122 86C4                <2> 		xchg al,ah
  7785 00006124 EE                  <2> 		out	dx,al
  7786 00006125 B800000800          <2> 		mov	eax,0x80000
  7787 0000612A 89C2                <2> 		mov	edx,eax
  7788 0000612C 2500000100          <2> 		and	eax,65536
  7789 00006131 7406                <2> 		jz	MemLocN1
  7790 00006133 FE05[44620000]      <2> 		inc	byte [Page1]
  7791                              <2> MemLocN1:
  7792 00006139 89D0                <2> 		mov	eax,edx
  7793 0000613B 2500000200          <2> 		and	eax,131072
  7794 00006140 7407                <2> 		jz	MemLocN2
  7795 00006142 8005[44620000]02    <2> 		add	byte [Page1],02
  7796                              <2> MemLocN2:
  7797 00006149 89D0                <2> 		mov	eax,edx
  7798 0000614B 2500000400          <2> 		and	eax,262144
  7799 00006150 7407                <2> 		jz	MemLocN3
  7800 00006152 8005[44620000]04    <2> 		add	byte [Page1],04
  7801                              <2> MemLocN3:
  7802 00006159 89D0                <2> 		mov	eax,edx
  7803 0000615B 2500000800          <2> 		and	eax,524288
  7804 00006160 7407                <2> 		jz	MemLocN4
  7805 00006162 8005[44620000]08    <2> 		add	byte [Page1],08
  7806                              <2> MemLocN4:
  7807 00006169 66BA8300            <2> 		mov	dx,PgPort
  7808 0000616D A0[44620000]        <2> 		mov	al,[Page1]
  7809 00006172 EE                  <2> 		out	dx,al
  7810 00006173 66BA0300            <2> 		mov	dx,LenPort
  7811 00006177 66A1[38620000]      <2> 		mov	ax,[Length1]
  7812 0000617D 6648                <2> 		dec ax
  7813 0000617F EE                  <2> 		out	dx,al
  7814 00006180 86C4                <2> 		xchg al,ah
  7815 00006182 EE                  <2> 		out	dx,al
  7816 00006183 66BA0A00            <2> 		mov	dx,0Ah
  7817 00006187 B001                <2> 		mov	al,Channel
  7818 00006189 EE                  <2> 		out	dx,al
  7819 0000618A C3                  <2> 		ret
  7820                              <2> 		
  7821                              <2> PlayDSP:
  7822 0000618B B040                <2> 		mov	al,40h
  7823 0000618D E891000000          <2> 		call WriteDSP
  7824 00006192 31D2                <2> 		xor	edx,edx
  7825 00006194 B840420F00          <2> 		mov	eax,1000000
  7826 00006199 8B1D[45620000]      <2> 		mov	ebx,[Freq]
  7827 0000619F 803D[32620000]00    <2> 		cmp byte [Stereo], 0
  7828 000061A6 7402                <2> 		je .nost
  7829 000061A8 D1E3                <2> 		shl ebx, 1
  7830                              <2> .nost:
  7831 000061AA F7F3                <2> 		div	ebx
  7832 000061AC 89C3                <2> 		mov	ebx,eax
  7833 000061AE B800010000          <2> 		mov	eax,256
  7834 000061B3 29D8                <2> 		sub	eax,ebx
  7835 000061B5 E869000000          <2> 		call WriteDSP
  7836 000061BA B014                <2> 		mov	al,14h	;write the mode
  7837 000061BC 803D[32620000]00    <2> 		cmp byte [Stereo], 0
  7838 000061C3 7400                <2> 		je .nost2
  7839                              <2> 		
  7840                              <2> .nost2:
  7841 000061C5 E859000000          <2> 		call WriteDSP
  7842 000061CA 66A1[38620000]      <2> 		mov	ax,[Length1]
  7843 000061D0 66D1E8              <2> 		shr ax, 1
  7844 000061D3 E84B000000          <2> 		call WriteDSP
  7845 000061D8 86C4                <2> 		xchg al,ah
  7846 000061DA E844000000          <2> 		call WriteDSP
  7847 000061DF C3                  <2> 		ret
  7848                              <2> 
  7849                              <2> MstrVol:    ;uses ax dx
  7850 000061E0 6650                <2> 	   push ax
  7851 000061E2 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7852 000061E6 B022                <2> 	   mov	al,22h
  7853 000061E8 EE                  <2> 	   out	dx,al
  7854 000061E9 6658                <2> 	   pop	ax
  7855 000061EB 6642                <2> 	   inc	dx
  7856 000061ED EE                  <2> 	   out	dx,al
  7857 000061EE C3                  <2> 	   ret
  7858                              <2> 	   
  7859                              <2> ResetDSP:   ; uses cx dx
  7860 000061EF 66BA2602            <2> 			mov	dx,(BasePort+6)
  7861 000061F3 B001                <2> 			mov	al,01
  7862 000061F5 EE                  <2> 			out	dx,al
  7863 000061F6 66B93200            <2> 			mov	cx,50
  7864 000061FA EC                  <2> WaitIt1:	in	al,dx
  7865 000061FB E2FD                <2> 			loop WaitIt1
  7866 000061FD 30C0                <2> 			xor	al,al
  7867 000061FF EE                  <2> 			out	dx,al
  7868 00006200 66B93200            <2> 			mov	cx,50
  7869 00006204 EC                  <2> WaitIt2:	in	al,dx
  7870 00006205 E2FD                <2> 			loop WaitIt2
  7871 00006207 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7872 00006209 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7873 0000620D EC                  <2> 			in	al,dx
  7874 0000620E 2480                <2> 			and	al,80h
  7875 00006210 3C80                <2> 			cmp	al,80h
  7876 00006212 750C                <2> 			jne	ResetErr
  7877 00006214 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7878 00006218 EC                  <2> 			in	al,dx
  7879 00006219 3CAA                <2> 			cmp	al,0AAh
  7880 0000621B 7503                <2> 			jne	ResetErr
  7881 0000621D B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7882 0000621F C3                  <2> 			ret
  7883 00006220 30C0                <2> ResetErr:	xor al, al
  7884 00006222 C3                  <2> 			ret
  7885                              <2> 
  7886                              <2> WriteDSP:   ;uses ax dx
  7887 00006223 6650                <2> 		push ax
  7888 00006225 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7889 00006229 EC                  <2> WaitIt:	in	al,dx
  7890 0000622A 2480                <2> 		and	al,80h
  7891 0000622C 75FB                <2> 		jnz	WaitIt
  7892 0000622E 6658                <2> 		pop	ax
  7893 00006230 EE                  <2> 		out	dx,al
  7894 00006231 C3                  <2> 		ret
  7895                              <2> 
  7896 00006232 00                  <2> Stereo db 0
  7897 00006233 00                  <2> OddLength db 0
  7898 00006234 00000000            <2> Length0 dd	0
  7899 00006238 0000                <2> Length1	dw  0
  7900 0000623A 00000000            <2> NextMemLoc dd 0
  7901 0000623E 00000000            <2> MemLoc	dd  0
  7902 00006242 0000                <2> SegLoc  dw 0
  7903 00006244 00                  <2> Page1	db  0
  7904 00006245 00000000            <2> Freq	dd	0
  7905                              <2> PgPort	equ 83h
  7906                              <2> AddPort	equ 02h
  7907                              <2> LenPort	equ 03h
  7908                              <2> ModeReg	equ 59h
  7909                              <2> Channel	equ 01h
  7910                              <2> BasePort	equ 220h
  7911 00006249 00                  <2> SoundBlaster	db 0
  7912                              <1> %endif
  7913                              <1> %ifdef io.serial
  7914                              <1> 	%include "source/drivers/input/serial.asm"
  7915                              <1> %else
  7916                              <1> 	%include "source/drivers/input/keyboard.asm"
  7917 0000624A 00                  <2> specialkey db 0
  7918                              <2> ;charregion db 0
  7919                              <2> waitforinput:		;this is basically the idle process
  7920                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7921                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7922 0000624B 6631C0              <2> 	xor ax, ax
  7923 0000624E A0[DC6D0000]        <2> 	mov al, [threadson]
  7924 00006253 8825[DC6D0000]      <2> 	mov [threadson], ah
  7925 00006259 FB                  <2> 	sti
  7926 0000625A F4                  <2> 	hlt
  7927 0000625B A2[DC6D0000]        <2> 	mov [threadson], al
  7928 00006260 66813D[DD230000]00- <2> 	cmp word [trans], 0
  7929 00006268 00                  <2>
  7930 00006269 7401                <2> 	je getkey
  7931 0000626B C3                  <2> 	ret
  7932                              <2> getkey:
  7933 0000626C 31C0                <2> 		xor eax, eax
  7934 0000626E A2[4A620000]        <2> 		mov [specialkey], al
  7935 00006273 A3[D9230000]        <2> 		mov [lastkey], eax
  7936 00006278 E464                <2> 		in al, 64h ; Status
  7937                              <2> 	%ifdef gui.included
  7938 0000627A A820                <2> 		test al, 20h ; PS2-Mouse?
  7939 0000627C 0F8524FAFFFF        <2> 		jnz near moused
  7940                              <2> 	%endif
  7941 00006282 A801                <2> 		test al, 1 
  7942 00006284 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7943                              <2> 	calckey:
  7944 00006286 E460                <2> 		in al, 60h
  7945 00006288 30E4                <2> 		xor ah, ah
  7946 0000628A 6689C3              <2> 		mov bx, ax
  7947 0000628D 66A3[DB230000]      <2> 		mov [lastkey + 2], ax
  7948 00006293 BF[22640000]        <2> 		mov edi, scancode
  7949                              <2> 	searchscan: 
  7950 00006298 80FB3A              <2> 		cmp bl, 3Ah
  7951 0000629B 7314                <2> 		jae scanother
  7952 0000629D C1E004              <2> 		shl eax, 4
  7953 000062A0 01C7                <2> 		add edi, eax
  7954 000062A2 668B07              <2> 		mov ax, [edi]
  7955 000062A5 663D0000            <2> 		cmp ax, 0
  7956 000062A9 7406                <2> 		je scanother
  7957 000062AB E9D0000000          <2> 		jmp scanfound
  7958 000062B0 00                  <2> uppercase db 0
  7959                              <2> scanother:
  7960 000062B1 6631C0              <2> 		xor ax, ax
  7961 000062B4 66A3[D9230000]      <2> 		mov [lastkey], ax
  7962 000062BA 80FBE0              <2> 		cmp bl, 0E0h
  7963 000062BD 0F8477000000        <2> 		je near getkeyspecial
  7964 000062C3 803D[4A620000]E0    <2> 		cmp byte [specialkey], 0xE0
  7965 000062CA 7525                <2> 		jne nospecialkey
  7966 000062CC 80FB38              <2> 		cmp bl, 38h
  7967 000062CF 0F849A000000        <2> 		je near alton
  7968 000062D5 80FBB8              <2> 		cmp bl, 0B8h
  7969 000062D8 0F8499000000        <2> 		je near altoff
  7970 000062DE 80FB1D              <2> 		cmp bl, 1Dh
  7971 000062E1 0F8478000000        <2> 		je near ctron
  7972 000062E7 80FB9D              <2> 		cmp bl, 9Dh
  7973 000062EA 0F8477000000        <2> 		je near ctroff
  7974 000062F0 C3                  <2> 		ret
  7975                              <2> nospecialkey:
  7976 000062F1 80FB2A              <2> 		cmp bl, 2Ah
  7977 000062F4 0F8455000000        <2> 		je near shifton
  7978 000062FA 80FB36              <2> 		cmp bl, 36h
  7979 000062FD 0F844C000000        <2> 		je near shifton
  7980 00006303 80FB1C              <2> 		cmp bl, 1Ch
  7981 00006306 0F8473000000        <2> 		je near entdown
  7982 0000630C 80FBAA              <2> 		cmp bl, 0AAh
  7983 0000630F 0F8442000000        <2> 		je near shiftoff
  7984 00006315 80FBB6              <2> 		cmp bl, 0B6h
  7985 00006318 0F8439000000        <2> 		je near shiftoff
  7986 0000631E 80FB3A              <2> 		cmp bl, 3Ah
  7987 00006321 0F84A7000000        <2> 		je near capslock
  7988 00006327 80FB45              <2> 		cmp bl, 0x45
  7989 0000632A 0F84AF000000        <2> 		je near numlock
  7990 00006330 80FB46              <2> 		cmp bl, 0x46
  7991 00006333 0F84BE000000        <2> 		je near scrolllock
  7992 00006339 C3                  <2> 		ret
  7993                              <2> 	getkeyspecial:
  7994 0000633A C605[4A620000]E0    <2> 		mov byte [specialkey], 0xE0
  7995 00006341 E940FFFFFF          <2> 		jmp calckey
  7996                              <2> 	shift:
  7997 00006346 A0[B0620000]        <2> 		mov al, [uppercase]
  7998 0000634B 3C01                <2> 		cmp al, 1
  7999 0000634D 7308                <2> 		jae shiftoff
  8000                              <2> 	shifton:
  8001 0000634F C605[B0620000]01    <2> 		mov byte [uppercase], 1
  8002 00006356 C3                  <2> 		ret
  8003                              <2> 	shiftoff:
  8004 00006357 C605[B0620000]00    <2> 		mov byte [uppercase], 0
  8005 0000635E C3                  <2> 		ret
  8006                              <2> 	ctron:
  8007 0000635F C605[CD630000]01    <2> 		mov byte [ctrkey], 1
  8008 00006366 C3                  <2> 		ret
  8009                              <2> 	ctroff:
  8010 00006367 C605[CD630000]00    <2> 		mov byte [ctrkey], 0
  8011 0000636E C3                  <2> 		ret
  8012                              <2> 	alton:
  8013 0000636F C605[CC630000]01    <2> 		mov byte [altkey], 1
  8014 00006376 C3                  <2> 		ret
  8015                              <2> 	altoff:
  8016 00006377 C605[CC630000]00    <2> 		mov byte [altkey], 0
  8017 0000637E C3                  <2> 		ret
  8018                              <2> 	entdown:
  8019 0000637F C3                  <2> 		ret
  8020                              <2> scanfound:
  8021 00006380 81C708000000        <2> 		add edi, 8
  8022 00006386 803D[CD630000]01    <2> 		cmp byte [ctrkey], 1
  8023 0000638D 7306                <2> 		jae ctrlin
  8024 0000638F 81EF08000000        <2> 		sub edi, 8
  8025                              <2> 	ctrlin:
  8026 00006395 81C704000000        <2> 		add edi, 4
  8027 0000639B 803D[CC630000]01    <2> 		cmp byte [altkey], 1
  8028 000063A2 7306                <2> 		jae altin
  8029 000063A4 81EF04000000        <2> 		sub edi, 4
  8030                              <2> 	altin:
  8031 000063AA 81C702000000        <2> 		add edi, 2
  8032 000063B0 803D[B0620000]01    <2> 		cmp byte [uppercase], 1
  8033 000063B7 7306                <2> 		jae uppercaseon
  8034 000063B9 81EF02000000        <2> 		sub edi, 2
  8035                              <2> 	uppercaseon:
  8036 000063BF 668B07              <2> 		mov ax,[edi]
  8037 000063C2 66A3[D9230000]      <2> 		mov [lastkey], ax
  8038 000063C8 C3                  <2> 		ret
  8039                              <2> 		
  8040 000063C9 00                  <2> keyboardstatus db 0
  8041 000063CA 00                  <2> numlockstatus db 0
  8042 000063CB 00                  <2> scrolllockstatus db 0
  8043 000063CC 00                  <2> altkey db 0
  8044 000063CD 00                  <2> ctrkey db 0
  8045                              <2> 	capslock:
  8046 000063CE 8035[C9630000]04    <2> 		xor byte [keyboardstatus], 00000100b
  8047 000063D5 E835000000          <2> 		call updatekblights
  8048 000063DA E967FFFFFF          <2> 		jmp shift
  8049                              <2> 		
  8050                              <2> 	numlock:
  8051 000063DF 8035[C9630000]02    <2> 		xor byte [keyboardstatus], 00000010b
  8052 000063E6 8035[CA630000]01    <2> 		xor byte [numlockstatus], 1
  8053 000063ED E81D000000          <2> 		call updatekblights
  8054 000063F2 E975FEFFFF          <2> 		jmp getkey
  8055                              <2> 	
  8056                              <2> 	scrolllock:
  8057 000063F7 8035[C9630000]01    <2> 		xor byte [keyboardstatus], 00000001b
  8058 000063FE 8035[CB630000]01    <2> 		xor byte [scrolllockstatus], 1
  8059 00006405 E805000000          <2> 		call updatekblights
  8060 0000640A E95DFEFFFF          <2> 		jmp getkey
  8061                              <2> 		
  8062                              <2> 	updatekblights:
  8063 0000640F B0ED                <2> 		mov al, 0xED
  8064 00006411 66BA6000            <2> 		mov dx, 0x60
  8065 00006415 EE                  <2> 		out dx, al
  8066                              <2> 	chkkbdack:
  8067 00006416 EC                  <2> 		in al, dx
  8068 00006417 3CFA                <2> 		cmp al, 0xFA
  8069 00006419 75FB                <2> 		jne chkkbdack
  8070 0000641B A0[C9630000]        <2> 		mov al, [keyboardstatus]
  8071 00006420 EE                  <2> 		out dx, al
  8072 00006421 C3                  <2> 		ret
  8073                              <2> 		
  8074                              <2> scancode:
  8075                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  8076 00006422 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8077 0000642B 00000000000000      <2>
  8078 00006432 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8079 0000643B 00000000000000      <2>
  8080 00006442 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  8081 0000644B 00000000000000      <2>
  8082 00006452 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  8083 0000645B 00000000000000      <2>
  8084 00006462 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  8085 0000646B 00000000000000      <2>
  8086 00006472 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  8087 0000647B 00000000000000      <2>
  8088 00006482 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  8089 0000648B 00000000000000      <2>
  8090 00006492 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  8091 0000649B 00000000000000      <2>
  8092 000064A2 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  8093 000064AB 00000000000000      <2>
  8094 000064B2 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  8095 000064BB 00000000000000      <2>
  8096 000064C2 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  8097 000064CB 00000000000000      <2>
  8098 000064D2 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  8099 000064DB 00000000000000      <2>
  8100 000064E2 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  8101 000064EB 00000000000000      <2>
  8102 000064F2 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  8103 000064FB 00000000000000      <2>
  8104 00006502 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  8105 0000650B 00000000000000      <2>
  8106 00006512 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8107 0000651B 00000000000000      <2>
  8108 00006522 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  8109 0000652A 003A0039041904      <2>
  8110 00006532 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  8111 0000653B 03000046042604      <2>
  8112 00006542 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  8113 0000654B 03950343042304      <2>
  8114 00006552 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  8115 0000655B 03A1033A041A04      <2>
  8116 00006562 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  8117 0000656B 03A40335041504      <2>
  8118 00006572 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  8119 0000657B 03A5033D041D04      <2>
  8120 00006582 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  8121 0000658B 03980333041304      <2>
  8122 00006592 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  8123 0000659B 03990348042804      <2>
  8124 000065A2 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  8125 000065AB 039F0349042904      <2>
  8126 000065B2 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  8127 000065BB 03A00337041704      <2>
  8128 000065C2 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  8129 000065CB 00000045042504      <2>
  8130 000065D2 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  8131 000065DB 0000004A042A04      <2>
  8132 000065E2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8133 000065EB 00000000000000      <2>
  8134 000065F2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8135 000065FB 00000000000000      <2>
  8136 00006602 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  8137 0000660B 03910344042404      <2>
  8138 00006612 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  8139 0000661B 03A3034B042B04      <2>
  8140 00006622 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  8141 0000662B 03940332041204      <2>
  8142 00006632 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  8143 0000663B 03A60330041004      <2>
  8144 00006642 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  8145 0000664B 0393033F041F04      <2>
  8146 00006652 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  8147 0000665B 03970340042004      <2>
  8148 00006662 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  8149 0000666B 039E033E041E04      <2>
  8150 00006672 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  8151 0000667B 039A033B041B04      <2>
  8152 00006682 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  8153 0000668B 039B0334041404      <2>
  8154 00006692 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  8155 0000669B 00000036041604      <2>
  8156 000066A2 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  8157 000066AB 0000004D042D04      <2>
  8158 000066B2 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  8159 000066BB 00000051040104      <2>
  8160 000066C2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8161 000066CB 00000000000000      <2>
  8162 000066D2 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  8163 000066DB 0000002F005C00      <2>
  8164 000066E2 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8165 000066EB 0396034F042F04      <2>
  8166 000066F2 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8167 000066FB 03A70347042704      <2>
  8168 00006702 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8169 0000670B 03A80341042104      <2>
  8170 00006712 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8171 0000671B 03A9033C041C04      <2>
  8172 00006722 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8173 0000672B 03920338041804      <2>
  8174 00006732 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8175 0000673B 039D0342042204      <2>
  8176 00006742 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8177 0000674B 039C034C042C04      <2>
  8178 00006752 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8179 0000675B 00000031041104      <2>
  8180 00006762 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8181 0000676B 0000004E042E04      <2>
  8182 00006772 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8183 0000677B 0000002E002C00      <2>
  8184 00006782 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8185 0000678B 00000000000000      <2>
  8186 00006792 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8187 0000679B 00000000000000      <2>
  8188 000067A2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8189 000067AB 00000000000000      <2>
  8190 000067B2 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8191 000067BB 00000000000000      <2>
  8192                              <2> noscan:
  8193                              <2> 
  8194                              <1> %endif
  8195                              <1> ;drivers will soon be handled intelligently
  8196                              <1> ;every driver's source will be scanned for a .init function
  8197                              <1> ;that will be called and if it returns 0
  8198                              <1> ;the hardware was found and the driver initialized properly
  8199                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8200                              <1> 	%ifdef sound.included
  8201 000067C2 E842F8FFFF          <1> 		call sblaster.init
  8202                              <1> 	%endif
  8203                              <1> 	%ifdef network.included
  8204 000067C7 E89A230000          <1> 		call network.init
  8205                              <1> 	%endif
  8206 000067CC C3                  <1> 	ret
  8207                              <1> initialize:
  8208                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8209 000067CD E839000000          <1> 	call .pic
  8210                              <1> %ifdef terminal.vsync
  8211                              <1> 	call .rtc
  8212                              <1> %endif
  8213 000067D2 E896000000          <1> 	call .pit
  8214 000067D7 E8B8000000          <1> 	call .fpu
  8215 000067DC E8C9000000          <1> 	call .sse
  8216 000067E1 31C0                <1> 	xor eax, eax
  8217 000067E3 31C9                <1> 	xor ecx, ecx
  8218                              <1> %ifdef io.serial
  8219                              <1> 	call serial.init
  8220                              <1> %endif
  8221 000067E5 E801000000          <1> 	call .time
  8222 000067EA C3                  <1> 	ret
  8223                              <1> 	
  8224                              <1> .time:
  8225 000067EB E835DAFFFF          <1> 	call time
  8226 000067F0 E8DDDBFFFF          <1> 	call timeconvert
  8227 000067F5 890D[6B020000]      <1> 	mov [timeseconds], ecx
  8228 000067FB 31C9                <1> 	xor ecx, ecx
  8229 000067FD 890D[6F020000]      <1> 	mov [timenanoseconds], ecx
  8230 00006803 C605[6D410000]01    <1> 	mov byte [istimeset], 1
  8231 0000680A C3                  <1> 	ret
  8232                              <1> 	
  8233                              <1> .pic:
  8234 0000680B B011                <1> 	mov al, 0x11
  8235 0000680D E620                <1> 	out 0x20, al
  8236 0000680F E6A0                <1> 	out 0xA0, al
  8237 00006811 B040                <1> 	mov al, 0x40	;interrupt for master
  8238 00006813 E621                <1> 	out 0x21, al
  8239 00006815 B048                <1> 	mov al, 0x48	;interrupt for slave
  8240 00006817 E6A1                <1> 	out 0xA1, al
  8241 00006819 B004                <1> 	mov al, 4
  8242 0000681B E621                <1> 	out 0x21, al
  8243 0000681D B002                <1> 	mov al, 2
  8244 0000681F E6A1                <1> 	out 0xA1, al
  8245 00006821 B001                <1> 	mov al, 0x1
  8246 00006823 E621                <1> 	out 0x21, al
  8247 00006825 B001                <1> 	mov al, 0x1
  8248 00006827 E6A1                <1> 	out 0xA1, al
  8249                              <1> 	;masks are set to zero so as not to mask
  8250 00006829 30C0                <1> 	xor al, al
  8251 0000682B E621                <1> 	out 0x21, al
  8252 0000682D 30C0                <1> 	xor al, al
  8253 0000682F E6A1                <1> 	out 0xA1, al
  8254 00006831 B020                <1> 	mov al, 0x20
  8255 00006833 E6A0                <1> 	out 0xA0, al
  8256 00006835 E620                <1> 	out 0x20, al
  8257 00006837 C3                  <1> 	ret
  8258                              <1> .rtc:
  8259 00006838 B008                <1> 	mov al, 0x8
  8260 0000683A 88C4                <1> 	mov ah, al
  8261 0000683C 66BA7000            <1> 	mov dx, 0x70
  8262 00006840 EE                  <1> 	out dx, al
  8263 00006841 6642                <1> 	inc dx
  8264 00006843 EC                  <1> 	in al, dx
  8265 00006844 86C4                <1> 	xchg al, ah
  8266 00006846 664A                <1> 	dec dx
  8267 00006848 EE                  <1> 	out dx, al
  8268 00006849 6642                <1> 	inc dx
  8269 0000684B 86C4                <1> 	xchg al, ah
  8270 0000684D 0C40                <1> 	or al, 0x40
  8271 0000684F EE                  <1> 	out dx, al
  8272                              <1> 	
  8273 00006850 B00A                <1> 	mov al, 0xA
  8274 00006852 664A                <1> 	dec dx
  8275 00006854 EE                  <1> 	out dx, al
  8276 00006855 86C4                <1> 	xchg al, ah
  8277 00006857 6642                <1> 	inc dx
  8278 00006859 EC                  <1> 	in al, dx
  8279 0000685A 24F0                <1> 	and al, 0xF0
  8280 0000685C 0A05[32030000]      <1> 	or al, [rtcrate]
  8281 00006862 86C4                <1> 	xchg al, ah
  8282 00006864 664A                <1> 	dec dx
  8283 00006866 EE                  <1> 	out dx, al
  8284 00006867 6642                <1> 	inc dx
  8285 00006869 86C4                <1> 	xchg al, ah
  8286 0000686B EE                  <1> 	out dx, al
  8287 0000686C C3                  <1> 	ret
  8288                              <1> 	
  8289                              <1> .pit:
  8290                              <1> 	;initialize the PIT
  8291 0000686D 66A1[64020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8292 00006873 E640                <1> 	out 0x40, al
  8293 00006875 66C1C008            <1> 	rol ax, 8
  8294 00006879 E640                <1> 	out 0x40, al
  8295                              <1> 	;enable rtc interrupt
  8296 0000687B B00B                <1> 	mov al, 0xB
  8297 0000687D E670                <1> 	out 0x70, al
  8298 0000687F 66C1C008            <1> 	rol ax, 8
  8299 00006883 E471                <1> 	in al, 0x71
  8300 00006885 66C1C008            <1> 	rol ax, 8
  8301 00006889 E670                <1> 	out 0x70, al
  8302 0000688B 66C1C008            <1> 	rol ax, 8
  8303 0000688F 0C40                <1> 	or al, 0x40
  8304 00006891 E671                <1> 	out 0x71, al
  8305 00006893 C3                  <1> 	ret
  8306                              <1> .fpu:
  8307                              <1> 	;And now to initialize the fpu
  8308 00006894 0F20E0              <1> 	mov eax, cr4
  8309 00006897 0D00020000          <1> 	or eax, 0x200
  8310 0000689C 0F22E0              <1> 	mov cr4, eax
  8311 0000689F B87F0B0000          <1> 	mov eax, 0xB7F
  8312 000068A4 50                  <1> 	push eax
  8313 000068A5 D92C24              <1> 	fldcw [esp]
  8314 000068A8 58                  <1> 	pop eax
  8315 000068A9 C3                  <1> 	ret
  8316                              <1> 	
  8317                              <1> .sse:
  8318 000068AA 0F20C0              <1> 	mov eax, cr0
  8319 000068AD 24FB                <1> 	and al, 11111011b
  8320 000068AF 0C02                <1> 	or al, 00000010b
  8321 000068B1 0F22C0              <1> 	mov cr0, eax
  8322 000068B4 0F20E0              <1> 	mov eax, cr4
  8323 000068B7 660D0006            <1> 	or ax, 0000011000000000b
  8324 000068BB 0F22E0              <1> 	mov cr4, eax
  8325 000068BE C3                  <1> 	ret
  8326                                      %include "source/pci.asm"
  8327 000068BF 00                  <1> pcibus		db 0
  8328 000068C0 00                  <1> pcidevice	db 0
  8329 000068C1 00                  <1> pcifunction	db 0
  8330 000068C2 00                  <1> pciregister	db 0
  8331 000068C3 00                  <1> pcireqtype	db 0
  8332 000068C4 00000000            <1> pcidevid	dd 0
  8333 000068C8 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8334                              <1> getpcimem:
  8335 000068CC B002                <1> 	mov al, 2
  8336 000068CE A2[C3680000]        <1> 	mov [pcireqtype], al
  8337 000068D3 E922000000          <1> 	jmp searchpci
  8338                              <1> getpciport:
  8339 000068D8 B001                <1> 	mov al, 1
  8340 000068DA A2[C3680000]        <1> 	mov [pcireqtype], al
  8341 000068DF E916000000          <1> 	jmp searchpci
  8342                              <1> pcidump:
  8343 000068E4 31C0                <1> 	xor eax, eax
  8344 000068E6 A2[C1680000]        <1> 	mov [pcifunction], al
  8345 000068EB A2[BF680000]        <1> 	mov [pcibus], al
  8346 000068F0 A2[C0680000]        <1> 	mov [pcidevice], al
  8347 000068F5 A2[C3680000]        <1> 	mov [pcireqtype], al
  8348                              <1> searchpci:		;return in ebx, start X in pciX
  8349 000068FA 30C0                <1> 	xor al, al
  8350 000068FC A2[C2680000]        <1> 	mov [pciregister], al
  8351 00006901 E823020000          <1> 	call getpciaddr
  8352 00006906 BAF80C0000          <1> 	mov edx, 0xCF8
  8353 0000690B EF                  <1> 	out dx, eax	;request pci config
  8354 0000690C BAFC0C0000          <1> 	mov edx, 0xCFC
  8355 00006911 ED                  <1> 	in eax, dx 	;read in pci config
  8356 00006912 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8357 00006917 0F823D000000        <1> 	jb near checkpcidevice
  8358                              <1> searchpciret:
  8359                              <1> nextpcidevice:
  8360 0000691D 30C0                <1> 	xor al, al
  8361 0000691F A2[C1680000]        <1> 	mov [pcifunction], al
  8362 00006924 A0[C0680000]        <1> 	mov al, [pcidevice]
  8363 00006929 3C1F                <1> 	cmp al, 11111b
  8364 0000692B 0F8306010000        <1> 	jae near nextpcibus
  8365 00006931 FEC0                <1> 	inc al
  8366 00006933 A2[C0680000]        <1> 	mov [pcidevice], al
  8367 00006938 E9BDFFFFFF          <1> 	jmp searchpci
  8368 0000693D A0[C1680000]        <1> 	mov al, [pcifunction]
  8369 00006942 3C07                <1> 	cmp al, 111b
  8370 00006944 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  8371 0000694A FEC0                <1> 	inc al
  8372 0000694C A2[C1680000]        <1> 	mov [pcifunction], al
  8373 00006951 E9A4FFFFFF          <1> 	jmp searchpci
  8374 00006956 00000000            <1> pcitype: db 0,0,0,0
  8375                              <1> checkpcidevice:
  8376 0000695A 31C0                <1> 	xor eax, eax
  8377 0000695C 3905[C4680000]      <1> 	cmp [pcidevid], eax
  8378 00006962 0F8430000000        <1> 	je near .good
  8379 00006968 A2[C2680000]        <1> 	mov [pciregister], al	;device id, vendor id
  8380 0000696D E8B7010000          <1> 	call getpciaddr
  8381 00006972 BAF80C0000          <1> 	mov edx, 0xCF8
  8382 00006977 EF                  <1> 	out dx, eax
  8383 00006978 BAFC0C0000          <1> 	mov edx, 0xCFC
  8384 0000697D ED                  <1> 	in eax, dx
  8385 0000697E 2305[C8680000]      <1> 	and eax, [pcidevidmask]
  8386 00006984 8B1D[C4680000]      <1> 	mov ebx, [pcidevid]
  8387 0000698A 231D[C8680000]      <1> 	and ebx, [pcidevidmask]
  8388 00006990 39D8                <1> 	cmp eax, ebx
  8389 00006992 0F8585FFFFFF        <1> 	jne near searchpciret
  8390                              <1> .good:
  8391 00006998 30C0                <1> 	xor al, al
  8392 0000699A 3805[C3680000]      <1> 	cmp [pcireqtype], al
  8393 000069A0 0F842C000000        <1> 	je near dumppcidevice
  8394 000069A6 B008                <1> 	mov al, 0x08
  8395 000069A8 A2[C2680000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8396 000069AD E877010000          <1> 	call getpciaddr
  8397 000069B2 BAF80C0000          <1> 	mov edx, 0xCF8
  8398 000069B7 EF                  <1> 	out dx, eax
  8399 000069B8 BAFC0C0000          <1> 	mov edx, 0xCFC
  8400 000069BD ED                  <1> 	in eax, dx
  8401 000069BE C1C008              <1> 	rol eax, 8
  8402 000069C1 3A05[56690000]      <1> 	cmp al, [pcitype]
  8403 000069C7 0F84A0000000        <1> 	je near foundpciaddr
  8404 000069CD E94BFFFFFF          <1> 	jmp searchpciret
  8405                              <1> dumppcidevice:
  8406 000069D2 30C0                <1> 	xor al, al
  8407 000069D4 A2[C2680000]        <1> 	mov [pciregister], al
  8408 000069D9 E84B010000          <1> 	call getpciaddr
  8409 000069DE 89C1                <1> 	mov ecx, eax
  8410 000069E0 C605[40320000]05    <1> 	mov byte [firsthexshown], 5
  8411 000069E7 E869C8FFFF          <1> 	call showhex
  8412                              <1> dumppcidevicelp:
  8413 000069EC A2[C2680000]        <1> 	mov [pciregister], al
  8414 000069F1 E833010000          <1> 	call getpciaddr
  8415 000069F6 BAF80C0000          <1> 	mov edx, 0xCF8
  8416 000069FB EF                  <1> 	out dx, eax
  8417 000069FC BAFC0C0000          <1> 	mov edx, 0xCFC
  8418 00006A01 ED                  <1> 	in eax, dx
  8419 00006A02 89C1                <1> 	mov ecx, eax
  8420 00006A04 A0[C2680000]        <1> 	mov al, [pciregister]
  8421 00006A09 0404                <1> 	add al, 4
  8422 00006A0B C605[40320000]05    <1> 	mov byte [firsthexshown], 5
  8423 00006A12 E83EC8FFFF          <1> 	call showhex
  8424 00006A17 3C3C                <1> 	cmp al, 0x3C
  8425 00006A19 72D1                <1> 	jb dumppcidevicelp
  8426                              <1> dumppcidn:
  8427                              <1> %ifdef io.serial
  8428                              <1> 	mov esi, line
  8429                              <1> 	call print
  8430                              <1> %else
  8431 00006A1B 803D[09260000]00    <1> 	cmp byte [charpos], 0
  8432 00006A22 0F84F5FEFFFF        <1> 	je near searchpciret
  8433 00006A28 BE[07900000]        <1> 	mov esi, line
  8434 00006A2D E831B3FFFF          <1> 	call print
  8435                              <1> %endif
  8436 00006A32 E9E6FEFFFF          <1> 	jmp searchpciret
  8437                              <1> nextpcibus:
  8438 00006A37 30C0                <1> 	xor al, al
  8439 00006A39 A2[C0680000]        <1> 	mov [pcidevice], al
  8440 00006A3E A0[BF680000]        <1> 	mov al, [pcibus]
  8441 00006A43 3C7F                <1> 	cmp al, 1111111b
  8442 00006A45 730C                <1> 	jae donesearchpci
  8443 00006A47 FEC0                <1> 	inc al
  8444 00006A49 A2[BF680000]        <1> 	mov [pcibus], al
  8445 00006A4E E9A7FEFFFF          <1> 	jmp searchpci
  8446                              <1> donesearchpci:
  8447 00006A53 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8448 00006A58 31D2                <1> 	xor edx, edx
  8449 00006A5A 8815[56690000]      <1> 	mov [pcitype], dl
  8450 00006A60 8915[C4680000]      <1> 	mov [pcidevid], edx
  8451 00006A66 891D[C8680000]      <1> 	mov [pcidevidmask], ebx
  8452 00006A6C C3                  <1> 	ret
  8453                              <1> foundpciaddr:
  8454 00006A6D B010                <1> 	mov al, 0x10
  8455 00006A6F A2[C2680000]        <1> 	mov [pciregister], al
  8456 00006A74 803D[C3680000]02    <1> 	cmp byte [pcireqtype], 2
  8457 00006A7B 7443                <1> 	je findpcimemaddr
  8458                              <1> findpciioaddr:
  8459 00006A7D E8A7000000          <1> 	call getpciaddr
  8460 00006A82 BAF80C0000          <1> 	mov edx, 0xCF8
  8461 00006A87 EF                  <1> 	out dx, eax
  8462 00006A88 BAFC0C0000          <1> 	mov edx, 0xCFC
  8463 00006A8D ED                  <1> 	in eax, dx
  8464 00006A8E 89C3                <1> 	mov ebx, eax
  8465 00006A90 81E301000000        <1> 	and ebx, 1
  8466 00006A96 81FB00000000        <1> 	cmp ebx, 0
  8467 00006A9C 0F846E000000        <1> 	je near notpciioaddr
  8468 00006AA2 2D01000000          <1> 	sub eax, 1
  8469 00006AA7 89C2                <1> 	mov edx, eax
  8470 00006AA9 31DB                <1> 	xor ebx, ebx
  8471 00006AAB 4B                  <1> 	dec ebx
  8472 00006AAC 891D[C8680000]      <1> 	mov [pcidevidmask], ebx
  8473 00006AB2 43                  <1> 	inc ebx
  8474 00006AB3 881D[56690000]      <1> 	mov [pcitype], bl
  8475 00006AB9 891D[C4680000]      <1> 	mov [pcidevid], ebx
  8476 00006ABF C3                  <1> 	ret
  8477                              <1> findpcimemaddr:
  8478 00006AC0 E864000000          <1> 	call getpciaddr
  8479 00006AC5 BAF80C0000          <1> 	mov edx, 0xCF8
  8480 00006ACA EF                  <1> 	out dx, eax
  8481 00006ACB BAFC0C0000          <1> 	mov edx, 0xCFC
  8482 00006AD0 ED                  <1> 	in eax, dx
  8483 00006AD1 89C3                <1> 	mov ebx, eax
  8484 00006AD3 81E301000000        <1> 	and ebx, 1
  8485 00006AD9 81FB01000000        <1> 	cmp ebx, 1
  8486 00006ADF 0F842B000000        <1> 	je near notpciioaddr
  8487 00006AE5 C1E804              <1> 	shr eax, 4
  8488 00006AE8 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8489 00006AEB 89C2                <1> 	mov edx, eax
  8490 00006AED 50                  <1> 	push eax
  8491 00006AEE A1[4B020000]        <1> 	mov eax, [basecache]
  8492 00006AF3 C1E004              <1> 	shl eax, 4
  8493 00006AF6 29C2                <1> 	sub edx, eax
  8494 00006AF8 58                  <1> 	pop eax
  8495 00006AF9 31DB                <1> 	xor ebx, ebx
  8496 00006AFB 4B                  <1> 	dec ebx
  8497 00006AFC 891D[C8680000]      <1> 	mov [pcidevidmask], ebx
  8498 00006B02 43                  <1> 	inc ebx
  8499 00006B03 881D[56690000]      <1> 	mov [pcitype], bl
  8500 00006B09 891D[C4680000]      <1> 	mov [pcidevid], ebx
  8501 00006B0F C3                  <1> 	ret
  8502                              <1> notpciioaddr:
  8503 00006B10 A0[C2680000]        <1> 	mov al, [pciregister]
  8504 00006B15 0404                <1> 	add al, 4
  8505 00006B17 3C28                <1> 	cmp al, 0x28
  8506 00006B19 0F87FEFDFFFF        <1> 	ja near searchpciret
  8507 00006B1F A2[C2680000]        <1> 	mov [pciregister], al
  8508 00006B24 E954FFFFFF          <1> 	jmp findpciioaddr
  8509                              <1> getpciaddr:		;puts it in eax and ebx
  8510 00006B29 31C0                <1> 			xor eax, eax
  8511 00006B2B BB00000080          <1> 			mov ebx, 0x80000000
  8512 00006B30 A0[BF680000]        <1> 			mov al, [pcibus]
  8513 00006B35 C1E010              <1> 			shl eax, 16
  8514 00006B38 01C3                <1> 			add ebx, eax
  8515 00006B3A 31C0                <1> 			xor eax, eax
  8516 00006B3C A0[C0680000]        <1> 			mov al, [pcidevice]
  8517 00006B41 C1E00B              <1> 			shl eax, 11
  8518 00006B44 01C3                <1> 			add ebx, eax
  8519 00006B46 31C0                <1> 			xor eax, eax
  8520 00006B48 A0[C1680000]        <1> 			mov al, [pcifunction]
  8521 00006B4D C1E008              <1> 			shl eax, 8
  8522 00006B50 01C3                <1> 			add ebx, eax
  8523 00006B52 31C0                <1> 			xor eax, eax
  8524 00006B54 A0[C2680000]        <1> 			mov al, [pciregister]
  8525 00006B59 01C3                <1> 			add ebx, eax
  8526 00006B5B 89D8                <1> 			mov eax, ebx
  8527 00006B5D C3                  <1> 			ret
  8528                                      %include "source/disk.asm"
  8529                              <1> %ifdef disk.real
  8530                              <1> 	%include "source/drivers/disk/realmode.asm"
  8531                              <2> diskr:
  8532                              <2> 			;sector count in cl
  8533                              <2> 			;disk number in ch
  8534                              <2> 			;48 bit address with last 32 bits in ebx
  8535                              <2> 			;buffer in esi
  8536                              <2> 			;puts end of buffer in edi and end lba address in edx
  8537 00006B5E 880D[856B0000]      <2> 	mov [sdlength], cl
  8538 00006B64 891D[866B0000]      <2> 	mov [sdaddress], ebx
  8539 00006B6A 8935[076D0000]      <2> 	mov [oldesireal], esi
  8540 00006B70 66BE[8A6B]          <2> 	mov si, readdiskreal
  8541 00006B74 668935[F70C0000]    <2> 	mov [realmodeptr], si
  8542 00006B7B E865A0FFFF          <2> 	call realmode
  8543 00006B80 E941000000          <2> 	jmp backfromrealread
  8544 00006B85 00                  <2> sdlength db 0
  8545 00006B86 00000000            <2> sdaddress dd 0
  8546                              <2> 
  8547                              <2> [BITS 16]
  8548                              <2> readdiskreal:
  8549 00006B8A C706[B66B]1000      <2> 	mov word [dlen], 0x10
  8550 00006B90 C706[BA6B]0000      <2> 	mov word [daddress], 0
  8551 00006B96 C706[BC6B]0001      <2> 	mov word [dsegm], 0x100
  8552 00006B9C 66891E[BE6B]        <2> 	mov [dlbaad], ebx
  8553 00006BA1 880E[B86B]          <2> 	mov [dreadlen], cl
  8554                              <2> ReadHardDisk:
  8555 00006BA5 BE[B66B]            <2> 	mov si, diskaddresspacket
  8556 00006BA8 31C0                <2> 	xor ax, ax
  8557 00006BAA B442                <2> 	mov ah, 0x42
  8558 00006BAC 8A16[B56B]          <2> 	mov dl, [dnumber]
  8559 00006BB0 CD13                <2> 	int 0x13
  8560 00006BB2 72F1                <2> 	jc ReadHardDisk
  8561 00006BB4 C3                  <2> 	ret
  8562                              <2> 
  8563 00006BB5 80                  <2> dnumber db 0x80
  8564                              <2> diskaddresspacket:
  8565 00006BB6 10                  <2> dlen:	db 0x10 ;size of packet
  8566 00006BB7 00                  <2> 		db 0
  8567 00006BB8 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8568 00006BBA 0000                <2> daddress:	dw 0	;address 0
  8569 00006BBC 0001                <2> dsegm:		dw 0x100	;segment
  8570                              <2> 		;start with known value for hd
  8571                              <2> dlbaad:
  8572 00006BBE 00000000            <2> 	dd 0	;lba address
  8573 00006BC2 00000000            <2> 	dd 0
  8574                              <2> [BITS 32]
  8575                              <2> backfromrealread:
  8576 00006BC6 8B35[076D0000]      <2> 	mov esi, [oldesireal]
  8577 00006BCC 8B1D[866B0000]      <2> 	mov ebx, [sdaddress]
  8578 00006BD2 31C9                <2> 	xor ecx, ecx
  8579 00006BD4 8A0D[856B0000]      <2> 	mov cl, [sdlength]
  8580 00006BDA 01CB                <2> 	add ebx, ecx
  8581 00006BDC 66B80800            <2> 	mov ax, LINEAR_SEL
  8582 00006BE0 8EE0                <2> 	mov fs, ax
  8583 00006BE2 BF00100000          <2> 	mov edi, 0x1000
  8584 00006BE7 B200                <2> 	mov dl, 0
  8585 00006BE9 D0E1                <2> 	shl cl, 1
  8586                              <2> copyfromrmodedisk:
  8587 00006BEB 648A07              <2> 	mov al, [fs:edi]
  8588 00006BEE 8806                <2> 	mov [esi], al
  8589 00006BF0 47                  <2> 	inc edi
  8590 00006BF1 46                  <2> 	inc esi
  8591 00006BF2 FECA                <2> 	dec dl
  8592 00006BF4 80FA00              <2> 	cmp dl, 0
  8593 00006BF7 75F2                <2> 	jne copyfromrmodedisk
  8594 00006BF9 FEC9                <2> 	dec cl
  8595 00006BFB B200                <2> 	mov dl, 0
  8596 00006BFD 80F900              <2> 	cmp cl, 0
  8597 00006C00 75E9                <2> 	jne copyfromrmodedisk
  8598 00006C02 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8599 00006C06 8EE0                <2> 	mov fs, ax
  8600 00006C08 89F7                <2> 	mov edi, esi
  8601 00006C0A 8B35[076D0000]      <2> 	mov esi, [oldesireal]
  8602 00006C10 89DA                <2> 	mov edx, ebx
  8603 00006C12 8B1D[866B0000]      <2> 	mov ebx, [sdaddress]
  8604 00006C18 C3                  <2> 	ret
  8605                              <2> 	
  8606                              <1> %else
  8607                              <1> 	%ifdef disk.protected
  8608                              <1> 		%include "source/drivers/disk/pata.asm"
  8609                              <1> 	%endif
  8610                              <1> %endif
  8611                              <1> %ifdef disk.none
  8612                              <1> loadfile:	xor edx, edx
  8613                              <1> 			cmp byte [edi], '&'
  8614                              <1> 			je .ret
  8615                              <1> 			mov edx, 404	;no files are found except &
  8616                              <1> 		.ret:
  8617                              <1> 			ret
  8618                              <1> %else
  8619                              <1> ;This loads files using the methods in the loaded driver
  8620                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8621                              <1> 			;returns with err code in edx and file end in edi
  8622 00006C19 803F00              <1> 	cmp byte [edi], 0
  8623 00006C1C 0F8448000000        <1> 	je near nofileload
  8624 00006C22 89FA                <1> 	mov edx, edi
  8625 00006C24 BB[86920300]        <1> 	mov ebx, diskfileindex
  8626                              <1> nextnamechar:
  8627 00006C29 8A07                <1> 	mov al, [edi]
  8628 00006C2B 3C26                <1> 	cmp al, '&'
  8629 00006C2D 7440                <1> 	je nullfile
  8630 00006C2F 8A23                <1> 	mov ah, [ebx]
  8631 00006C31 47                  <1> 	inc edi
  8632 00006C32 43                  <1> 	inc ebx
  8633 00006C33 88C1                <1> 	mov cl, al
  8634 00006C35 08E1                <1> 	or cl, ah
  8635 00006C37 80F900              <1> 	cmp cl, 0
  8636 00006C3A 746E                <1> 	je equalfilenames
  8637 00006C3C 80F920              <1> 	cmp cl, ' '
  8638 00006C3F 7469                <1> 	je equalfilenames
  8639 00006C41 3C2A                <1> 	cmp al, '*'
  8640 00006C43 742B                <1> 	je asteriskcheck
  8641 00006C45 80FC00              <1> 	cmp ah, 0
  8642 00006C48 7410                <1> 	je nextfilename
  8643 00006C4A 3C00                <1> 	cmp al, 0
  8644 00006C4C 7404                <1> 	je getebxzero
  8645 00006C4E 38E0                <1> 	cmp al, ah
  8646 00006C50 74D7                <1> 	je nextnamechar
  8647                              <1> getebxzero:
  8648 00006C52 8A23                <1> 	mov ah, [ebx]
  8649 00006C54 43                  <1> 	inc ebx
  8650 00006C55 80FC00              <1> 	cmp ah, 0
  8651 00006C58 75F8                <1> 	jne getebxzero
  8652                              <1> nextfilename:
  8653 00006C5A 81C308000000        <1> 	add ebx, 8		;next descriptor
  8654 00006C60 89D7                <1> 	mov edi, edx
  8655 00006C62 81FB[68930300]      <1> 	cmp ebx, enddiskfileindex
  8656 00006C68 72BF                <1> 	jb nextnamechar
  8657                              <1> nofileload:
  8658 00006C6A BA94010000          <1> 	mov edx, 404	;indicate not found error
  8659                              <1> nullfile:
  8660 00006C6F C3                  <1> 	ret
  8661                              <1> asteriskcheck:
  8662 00006C70 4B                  <1> 	dec ebx
  8663 00006C71 8A07                <1> 	mov al, [edi]
  8664 00006C73 3C2A                <1> 	cmp al, '*'
  8665 00006C75 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8666 00006C77 3C20                <1> 	cmp al, ' '
  8667 00006C79 7415                <1> 	je equalfilenames2
  8668 00006C7B 3C00                <1> 	cmp al, 0
  8669 00006C7D 7411                <1> 	je equalfilenames2
  8670                              <1> .lp:
  8671 00006C7F 8A23                <1> 	mov ah, [ebx]
  8672 00006C81 80FC00              <1> 	cmp ah, 0
  8673 00006C84 74D4                <1> 	je nextfilename
  8674 00006C86 38E0                <1> 	cmp al, ah
  8675 00006C88 749F                <1> 	je nextnamechar
  8676 00006C8A 43                  <1> 	inc ebx
  8677 00006C8B E9EFFFFFFF          <1> 	jmp .lp
  8678                              <1> equalfilenames2:
  8679 00006C90 81EB02000000        <1> 	sub ebx, 2
  8680                              <1> eqfilefind:
  8681 00006C96 43                  <1> 	inc ebx
  8682 00006C97 81FB[68930300]      <1> 	cmp ebx, enddiskfileindex
  8683 00006C9D 0F83C7FFFFFF        <1> 	jae near nofileload
  8684 00006CA3 8A03                <1> 	mov al, [ebx]
  8685 00006CA5 3C00                <1> 	cmp al, 0
  8686 00006CA7 75ED                <1> 	jne eqfilefind
  8687 00006CA9 43                  <1> 	inc ebx
  8688                              <1> equalfilenames:
  8689 00006CAA 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8690 00006CAD 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8691 00006CAF 031D[2E900000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8692 00006CB5 31C9                <1> 	xor ecx, ecx
  8693 00006CB7 88C1                <1> 	mov cl, al			;get excess number of sectors
  8694 00006CB9 C0E102              <1> 	shl cl, 2
  8695 00006CBC C0E902              <1> 	shr cl, 2			;cut off at 64
  8696 00006CBF 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8697 00006CC1 B500                <1> 	mov ch, 0			;drive 0
  8698 00006CC3 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8699                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8700 00006CC6 A3[0B6D0000]        <1> 	mov [filetracks], eax
  8701 00006CCB 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8702 00006CCD 89DA                <1> 	mov edx, ebx
  8703 00006CCF 80F900              <1> 	cmp cl, 0
  8704 00006CD2 7405                <1> 	je copytracksforfile
  8705 00006CD4 E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  8706                              <1> copytracksforfile:
  8707 00006CD9 A1[0B6D0000]        <1> 	mov eax, [filetracks]
  8708 00006CDE 3D00000000          <1> 	cmp eax, 0
  8709 00006CE3 741C                <1> 	je donecopyfile
  8710 00006CE5 48                  <1> 	dec eax
  8711 00006CE6 A3[0B6D0000]        <1> 	mov [filetracks], eax
  8712 00006CEB 89D3                <1> 	mov ebx, edx	;get end lba
  8713 00006CED B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8714 00006CEF 8A2D[2D900000]      <1> 	mov ch, [DriveNumber]
  8715 00006CF5 89FE                <1> 	mov esi, edi	;reset buffer
  8716 00006CF7 E862FEFFFF          <1> 	call diskr
  8717 00006CFC E9D8FFFFFF          <1> 	jmp copytracksforfile
  8718                              <1> donecopyfile:
  8719 00006D01 BA00000000          <1> 	mov edx, 0	;no error
  8720 00006D06 C3                  <1> 	ret
  8721                              <1> 
  8722 00006D07 00000000            <1> oldesireal dd 0
  8723 00006D0B 00000000            <1> filetracks dd 0
  8724 00006D0F 00                  <1> lbad1 db 0
  8725 00006D10 00                  <1> lbad2 db 0
  8726 00006D11 00                  <1> lbad3 db 0
  8727 00006D12 00                  <1> lbad4 db 0
  8728 00006D13 00                  <1> lbad5 db 0
  8729 00006D14 00                  <1> lbad6 db 0
  8730 00006D15 6400                <1> segments dw 100
  8731                              <1> %endif
  8732                                      %include "source/threads.asm"
  8733                              <1> %ifdef threads.included	
  8734                              <1> nwcmdst:
  8735 00006D17 31C0                <1> 	xor eax, eax
  8736 00006D19 BC[00B40300]        <1> 	mov esp, stackend
  8737 00006D1E A2[DC6D0000]        <1> 	mov [threadson], al
  8738 00006D23 A3[DD6D0000]        <1> 	mov [currentthread], eax
  8739 00006D28 0504000000          <1> 	add eax, 4
  8740 00006D2D A3[D86D0000]        <1> 	mov [lastthread], eax
  8741 00006D32 FB                  <1> 	sti
  8742 00006D33 E90FC0FFFF          <1> 	jmp nwcmd
  8743                              <1> 
  8744                              <1> nomorethreadspace:
  8745 00006D38 BE[4E6D0000]        <1> 	mov esi, nmts
  8746 00006D3D E821B0FFFF          <1> 	call print
  8747 00006D42 C605[DC6D0000]00    <1> 	mov byte [threadson], 0
  8748 00006D49 E9F9BFFFFF          <1> 	jmp nwcmd
  8749 00006D4E 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8750 00006D57 6572666C6F770A00    <1>
  8751                              <1> 
  8752                              <1> nomorestackspace:
  8753 00006D5F BE[6E6D0000]        <1> 	mov esi, nmss
  8754 00006D64 E8FAAFFFFF          <1> 	call print
  8755 00006D69 E9A9FFFFFF          <1> 	jmp nwcmdst
  8756 00006D6E 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8757 00006D77 72666C6F770A00      <1>
  8758                              <1> 	
  8759                              <1> threadswitch:
  8760 00006D7E 60                  <1> 	pushad 
  8761 00006D7F BF[52B00500]        <1> 	mov edi, threadlist
  8762 00006D84 A1[DD6D0000]        <1> 	mov eax, [currentthread]
  8763 00006D89 40                  <1> 	inc eax
  8764 00006D8A A3[DD6D0000]        <1> 	mov [currentthread], eax
  8765 00006D8F 6648                <1> 	dec ax
  8766 00006D91 C1E002              <1> 	shl eax, 2
  8767 00006D94 01C7                <1> 	add edi, eax
  8768 00006D96 8927                <1> 	mov [edi], esp
  8769 00006D98 81C704000000        <1> 	add edi, 4
  8770 00006D9E 81FF[52C00500]      <1> 	cmp edi, threadlistend
  8771 00006DA4 0F830D000000        <1> 	jae near nookespthread
  8772 00006DAA 8B07                <1> 	mov eax, [edi]
  8773 00006DAC 3D00000000          <1> 	cmp eax, 0
  8774 00006DB1 0F8519000000        <1> 	jne near okespthread
  8775                              <1> nookespthread:
  8776 00006DB7 BF[52B00500]        <1> 	mov edi, threadlist
  8777 00006DBC 31C0                <1> 	xor eax, eax
  8778 00006DBE A3[DD6D0000]        <1> 	mov [currentthread], eax
  8779 00006DC3 8B07                <1> 	mov eax, [edi]
  8780 00006DC5 3D00000000          <1> 	cmp eax, 0
  8781 00006DCA 0F8447FFFFFF        <1> 	je near nwcmdst
  8782                              <1> okespthread:
  8783 00006DD0 89C4                <1> 	mov esp, eax
  8784 00006DD2 B020                <1> 	mov al, 0x20
  8785 00006DD4 E620                <1> 	out 0x20, al
  8786 00006DD6 61                  <1> 	popad
  8787 00006DD7 CF                  <1> 	iret
  8788                              <1> 
  8789                              <1> %endif
  8790 00006DD8 04000000            <1> 	lastthread dd 4
  8791 00006DDC 00                  <1> 	threadson db 0
  8792 00006DDD 00000000            <1> 	currentthread dd 0
  8793                                  %ifdef gui.included
  8794                                      %include "source/gui/gui.asm"
  8795                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8796 00006DE1 31C0                <1> 	xor eax, eax
  8797 00006DE3 31DB                <1> 	xor ebx, ebx
  8798 00006DE5 31C9                <1> 	xor ecx, ecx
  8799 00006DE7 31D2                <1> 	xor edx, edx
  8800 00006DE9 E886080000          <1> 	call guisetup
  8801                              <1> guiloop:
  8802 00006DEE E85FEEFFFF          <1> 	call cursorgui
  8803                              <1> guistart:
  8804 00006DF3 E874F4FFFF          <1> 	call getkey
  8805 00006DF8 C605[01830000]00    <1> 	mov byte [copygui], 0
  8806 00006DFF E9EFFFFFFF          <1> 	jmp guistart
  8807                              <1> 
  8808                              <1> %include "source/gui/bmp.asm"
  8809                              <2> showbmp:
  8810 00006E04 668B06              <2> 	mov ax, [esi]
  8811 00006E07 663D424D            <2> 	cmp ax, "BM"
  8812 00006E0B 0F85BB000000        <2> 	jne near endedbmp
  8813 00006E11 8B3D[755B0000]      <2> 	mov edi, [physbaseptr]
  8814 00006E17 6689D0              <2> 	mov ax, dx
  8815 00006E1A 6689CB              <2> 	mov bx, cx
  8816 00006E1D 31C9                <2> 	xor ecx, ecx
  8817 00006E1F 31D2                <2> 	xor edx, edx
  8818 00006E21 6689D9              <2> 	mov cx, bx
  8819 00006E24 6689C2              <2> 	mov dx, ax
  8820 00006E27 01D7                <2> 	add edi, edx
  8821 00006E29 01D7                <2> 	add edi, edx
  8822 00006E2B 31D2                <2> 	xor edx, edx
  8823 00006E2D 668B15[4D5C0000]    <2> 	mov dx, [resolutionx2]
  8824 00006E34 034E16              <2> 	add ecx, [esi + 22]
  8825                              <2> bmplocloop:
  8826 00006E37 52                  <2> 	push edx
  8827 00006E38 31C0                <2> 	xor eax, eax
  8828 00006E3A 6689D0              <2> 	mov ax, dx
  8829 00006E3D F7E1                <2> 	mul ecx
  8830 00006E3F 5A                  <2> 	pop edx
  8831 00006E40 663B0D[615B0000]    <2> 	cmp cx, [resolutiony]
  8832 00006E47 7609                <2> 	jbe .nofixy
  8833 00006E49 31C9                <2> 	xor ecx, ecx
  8834 00006E4B 668B0D[615B0000]    <2> 	mov cx, [resolutiony]
  8835                              <2> .nofixy:
  8836 00006E52 01C7                <2> 	add edi, eax
  8837 00006E54 8B5612              <2> 	mov edx, [esi + 18]
  8838 00006E57 8B4E16              <2> 	mov ecx, [esi + 22]
  8839 00006E5A 8B460A              <2> 	mov eax, [esi + 10]
  8840 00006E5D 8B5E02              <2> 	mov ebx, [esi + 2]
  8841 00006E60 01F3                <2> 	add ebx, esi
  8842 00006E62 891D[D26E0000]      <2> 	mov [bmpend], ebx
  8843 00006E68 89D3                <2> 	mov ebx, edx
  8844 00006E6A 01C6                <2> 	add esi, eax
  8845                              <2> ldxbmp2:
  8846 00006E6C 31D2                <2> 	xor edx, edx
  8847 00006E6E 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  8848 00006E75 39D3                <2> 	cmp ebx, edx
  8849 00006E77 7702                <2> 	ja ldxbmp
  8850 00006E79 89DA                <2> 	mov edx, ebx
  8851                              <2> ldxbmp:
  8852 00006E7B 668B06              <2> 	mov ax, [esi]
  8853 00006E7E 668907              <2> 	mov [edi], ax
  8854 00006E81 81C702000000        <2> 	add edi, 2
  8855 00006E87 81C602000000        <2> 	add esi, 2
  8856 00006E8D 3B35[D26E0000]      <2> 	cmp esi, [bmpend]
  8857 00006E93 7737                <2> 	ja endedbmp
  8858 00006E95 4A                  <2> 	dec edx
  8859 00006E96 81FA00000000        <2> 	cmp edx, 0
  8860 00006E9C 77DD                <2> 	ja ldxbmp
  8861 00006E9E 31D2                <2> 	xor edx, edx
  8862 00006EA0 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  8863 00006EA7 39D3                <2> 	cmp ebx, edx
  8864 00006EA9 7610                <2> 	jbe .notover
  8865                              <2> .over:
  8866 00006EAB 01DE                <2> 	add esi, ebx
  8867 00006EAD 01DE                <2> 	add esi, ebx
  8868 00006EAF 29D6                <2> 	sub esi, edx
  8869 00006EB1 29D6                <2> 	sub esi, edx
  8870 00006EB3 01DF                <2> 	add edi, ebx
  8871 00006EB5 01DF                <2> 	add edi, ebx
  8872 00006EB7 29D7                <2> 	sub edi, edx
  8873 00006EB9 29D7                <2> 	sub edi, edx
  8874                              <2> .notover:
  8875 00006EBB 29DF                <2> 	sub edi, ebx
  8876 00006EBD 29DF                <2> 	sub edi, ebx
  8877 00006EBF 29D7                <2> 	sub edi, edx
  8878 00006EC1 29D7                <2> 	sub edi, edx
  8879 00006EC3 49                  <2> 	dec ecx
  8880 00006EC4 81F900000000        <2> 	cmp ecx, 0
  8881 00006ECA 77A0                <2> 	ja ldxbmp2
  8882                              <2> endedbmp:
  8883 00006ECC E844030000          <2> 	call switchmousepos2
  8884 00006ED1 C3                  <2> 	ret
  8885                              <2> 	
  8886 00006ED2 00000000            <2> 	bmpend dd 0
  8887                              <1> %include "source/gui/circle.asm"
  8888                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8889 00006ED6 55                  <2> 	push ebp
  8890 00006ED7 663D0000            <2> 	cmp ax, 0
  8891 00006EDB 770A                <2> 	ja .nozerocircle
  8892 00006EDD E81A1C0000          <2> 	call putpixel	;the easiest circle ever
  8893 00006EE2 E9F7000000          <2> 	jmp .done
  8894                              <2> .nozerocircle:
  8895 00006EE7 6689F5              <2> 	mov bp, si
  8896 00006EEA 6650                <2> 	push ax
  8897 00006EEC E84C1C0000          <2> 	call getpixelmem
  8898 00006EF1 31C0                <2> 	xor eax, eax
  8899 00006EF3 6658                <2> 	pop ax
  8900 00006EF5 BE01000000          <2> 	mov esi, 1
  8901 00006EFA 29C6                <2> 	sub esi, eax
  8902 00006EFC 89C1                <2> 	mov ecx, eax
  8903 00006EFE 31C0                <2> 	xor eax, eax
  8904 00006F00 66A1[4D5C0000]      <2> 	mov ax, [resolutionx2]
  8905 00006F06 F7E1                <2> 	mul ecx
  8906 00006F08 50                  <2> 	push eax
  8907 00006F09 31D2                <2> 	xor edx, edx
  8908 00006F0B 01C7                <2> 	add edi, eax
  8909 00006F0D 66892F              <2> 	mov [edi], bp
  8910 00006F10 29C7                <2> 	sub edi, eax
  8911 00006F12 29C7                <2> 	sub edi, eax
  8912 00006F14 66892F              <2> 	mov [edi], bp
  8913 00006F17 01C7                <2> 	add edi, eax
  8914 00006F19 D1E1                <2> 	shl ecx, 1
  8915 00006F1B 01CF                <2> 	add edi, ecx
  8916 00006F1D 66892F              <2> 	mov [edi], bp
  8917 00006F20 D1E1                <2> 	shl ecx, 1
  8918 00006F22 29CF                <2> 	sub edi, ecx
  8919 00006F24 66892F              <2> 	mov [edi], bp
  8920 00006F27 D1E9                <2> 	shr ecx, 1
  8921 00006F29 01CF                <2> 	add edi, ecx
  8922 00006F2B D1E9                <2> 	shr ecx, 1
  8923 00006F2D B802000000          <2> 	mov eax, 2
  8924 00006F32 F7E1                <2> 	mul ecx
  8925 00006F34 48                  <2> 	dec eax
  8926 00006F35 F7D0                <2> 	not eax ;make it negative
  8927 00006F37 A3[E46F0000]        <2> 	mov [.ddF_y], eax
  8928 00006F3C 58                  <2> 	pop eax
  8929 00006F3D BB01000000          <2> 	mov ebx, 1
  8930 00006F42 891D[E06F0000]      <2> 	mov [.ddF_x], ebx
  8931 00006F48 4B                  <2> 	dec ebx
  8932 00006F49 31D2                <2> 	xor edx, edx
  8933 00006F4B E904000000          <2> 	jmp .lp
  8934                              <2> .lpb:
  8935 00006F50 D1EA                <2> 	shr edx, 1
  8936 00006F52 D1E9                <2> 	shr ecx, 1
  8937                              <2> .lp:	;it starts this with the center in edi
  8938                              <2> 		;color in bp
  8939                              <2> 		;ddF_x in memory
  8940                              <2> 		;x*resolutionx2 in ebx
  8941                              <2> 		;x in edx
  8942                              <2> 		;ddF_y in memory
  8943                              <2> 		;y*resolutionx2 in eax
  8944                              <2> 		;f in esi
  8945                              <2> 		;y in ecx
  8946 00006F54 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8947 00006F5A 7717                <2> 	ja	.noddF_y
  8948 00006F5C 49                  <2> 	dec ecx
  8949 00006F5D 2B05[4D5C0000]      <2> 	sub eax, [resolutionx2]
  8950 00006F63 8105[E46F0000]0200- <2> 	add dword [.ddF_y], 2
  8951 00006F6B 0000                <2>
  8952 00006F6D 0335[E46F0000]      <2> 	add esi, [.ddF_y]
  8953                              <2> .noddF_y:
  8954 00006F73 42                  <2> 	inc edx
  8955 00006F74 031D[4D5C0000]      <2> 	add ebx, [resolutionx2]
  8956 00006F7A 8105[E06F0000]0200- <2> 	add dword [.ddF_x], 2
  8957 00006F82 0000                <2>
  8958 00006F84 0335[E06F0000]      <2> 	add esi, [.ddF_x]
  8959                              <2> 
  8960 00006F8A D1E2                <2> 	shl edx, 1
  8961 00006F8C D1E1                <2> 	shl ecx, 1
  8962 00006F8E 01D7                <2> 	add edi, edx
  8963 00006F90 01C7                <2> 	add edi, eax
  8964 00006F92 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8965 00006F95 D1E2                <2> 	shl edx, 1
  8966 00006F97 29D7                <2> 	sub edi, edx
  8967 00006F99 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8968 00006F9C D1E0                <2> 	shl eax, 1
  8969 00006F9E 29C7                <2> 	sub edi, eax
  8970 00006FA0 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8971 00006FA3 01D7                <2> 	add edi, edx
  8972 00006FA5 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8973 00006FA8 D1E8                <2> 	shr eax, 1
  8974 00006FAA D1EA                <2> 	shr edx, 1
  8975 00006FAC 01C7                <2> 	add edi, eax
  8976 00006FAE 29D7                <2> 	sub edi, edx
  8977                              <2> 
  8978 00006FB0 39D1                <2> 	cmp ecx, edx
  8979 00006FB2 749C                <2> 	je .lpb
  8980                              <2> 
  8981 00006FB4 01DF                <2> 	add edi, ebx
  8982 00006FB6 01CF                <2> 	add edi, ecx
  8983 00006FB8 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8984 00006FBB D1E1                <2> 	shl ecx, 1
  8985 00006FBD 29CF                <2> 	sub edi, ecx
  8986 00006FBF 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8987 00006FC2 D1E3                <2> 	shl ebx, 1
  8988 00006FC4 29DF                <2> 	sub edi, ebx
  8989 00006FC6 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8990 00006FC9 01CF                <2> 	add edi, ecx
  8991 00006FCB 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8992 00006FCE D1EB                <2> 	shr ebx, 1
  8993 00006FD0 D1E9                <2> 	shr ecx, 1
  8994 00006FD2 01DF                <2> 	add edi, ebx
  8995 00006FD4 29CF                <2> 	sub edi, ecx
  8996 00006FD6 39CA                <2> 	cmp edx, ecx
  8997 00006FD8 0F8272FFFFFF        <2> 	jb .lpb
  8998                              <2> .done:
  8999 00006FDE 5D                  <2> 	pop ebp
  9000 00006FDF C3                  <2> 	ret
  9001                              <2> 	
  9002 00006FE0 00000000            <2> .ddF_x dd 0
  9003 00006FE4 00000000            <2> .ddF_y dd 0
  9004                              <2> 
  9005                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  9006 00006FE8 55                  <2> 	push ebp
  9007 00006FE9 663D0000            <2> 	cmp ax, 0
  9008 00006FED 770A                <2> 	ja .nozerocircle
  9009 00006FEF E8081B0000          <2> 	call putpixel	;the easiest circle ever
  9010 00006FF4 E95A010000          <2> 	jmp .done
  9011                              <2> .nozerocircle:
  9012 00006FF9 6689F5              <2> 	mov bp, si
  9013 00006FFC 6650                <2> 	push ax
  9014 00006FFE E83A1B0000          <2> 	call getpixelmem
  9015 00007003 31C0                <2> 	xor eax, eax
  9016 00007005 6658                <2> 	pop ax
  9017 00007007 BE01000000          <2> 	mov esi, 1
  9018 0000700C 29C6                <2> 	sub esi, eax
  9019 0000700E 89C1                <2> 	mov ecx, eax
  9020 00007010 31C0                <2> 	xor eax, eax
  9021 00007012 66A1[4D5C0000]      <2> 	mov ax, [resolutionx2]
  9022 00007018 F7E1                <2> 	mul ecx
  9023 0000701A 50                  <2> 	push eax
  9024 0000701B 31D2                <2> 	xor edx, edx
  9025 0000701D 01C7                <2> 	add edi, eax
  9026 0000701F 66892F              <2> 	mov [edi], bp
  9027 00007022 29C7                <2> 	sub edi, eax
  9028 00007024 29C7                <2> 	sub edi, eax
  9029 00007026 66892F              <2> 	mov [edi], bp
  9030 00007029 01C7                <2> 	add edi, eax
  9031 0000702B D1E1                <2> 	shl ecx, 1
  9032 0000702D 01CF                <2> 	add edi, ecx
  9033 0000702F 51                  <2> 	push ecx
  9034                              <2> .s0:
  9035 00007030 66892F              <2> 	mov [edi], bp
  9036 00007033 81EF02000000        <2> 	sub edi, 2
  9037 00007039 49                  <2> 	dec ecx
  9038 0000703A 81F900000000        <2> 	cmp ecx, 0
  9039 00007040 75EE                <2> 	jne .s0
  9040 00007042 66892F              <2> 	mov [edi], bp
  9041 00007045 59                  <2> 	pop ecx
  9042 00007046 01CF                <2> 	add edi, ecx
  9043 00007048 D1E9                <2> 	shr ecx, 1
  9044 0000704A B802000000          <2> 	mov eax, 2
  9045 0000704F F7E1                <2> 	mul ecx
  9046 00007051 48                  <2> 	dec eax
  9047 00007052 F7D0                <2> 	not eax ;make it negative
  9048 00007054 A3[59710000]        <2> 	mov [.ddF_y], eax
  9049 00007059 58                  <2> 	pop eax
  9050 0000705A BB01000000          <2> 	mov ebx, 1
  9051 0000705F 891D[55710000]      <2> 	mov [.ddF_x], ebx
  9052 00007065 4B                  <2> 	dec ebx
  9053 00007066 31D2                <2> 	xor edx, edx
  9054 00007068 E904000000          <2> 	jmp .lp
  9055                              <2> .lpb:
  9056 0000706D D1EA                <2> 	shr edx, 1
  9057 0000706F D1E9                <2> 	shr ecx, 1
  9058                              <2> .lp:	;it starts this with the center in edi
  9059                              <2> 		;color in bp
  9060                              <2> 		;ddF_x in memory
  9061                              <2> 		;x*resolutionx2 in ebx
  9062                              <2> 		;x in edx
  9063                              <2> 		;ddF_y in memory
  9064                              <2> 		;y*resolutionx2 in eax
  9065                              <2> 		;f in esi
  9066                              <2> 		;y in ecx
  9067 00007071 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  9068 00007077 7717                <2> 	ja	.noddF_y
  9069 00007079 49                  <2> 	dec ecx
  9070 0000707A 2B05[4D5C0000]      <2> 	sub eax, [resolutionx2]
  9071 00007080 8105[59710000]0200- <2> 	add dword [.ddF_y], 2
  9072 00007088 0000                <2>
  9073 0000708A 0335[59710000]      <2> 	add esi, [.ddF_y]
  9074                              <2> .noddF_y:
  9075 00007090 42                  <2> 	inc edx
  9076 00007091 031D[4D5C0000]      <2> 	add ebx, [resolutionx2]
  9077 00007097 8105[55710000]0200- <2> 	add dword [.ddF_x], 2
  9078 0000709F 0000                <2>
  9079 000070A1 0335[55710000]      <2> 	add esi, [.ddF_x]
  9080                              <2> 
  9081 000070A7 D1E2                <2> 	shl edx, 1
  9082 000070A9 D1E1                <2> 	shl ecx, 1
  9083 000070AB 52                  <2> 	push edx
  9084 000070AC 29D7                <2> 	sub edi, edx
  9085 000070AE 01C7                <2> 	add edi, eax
  9086 000070B0 81FA00000000        <2> 	cmp edx, 0
  9087 000070B6 7412                <2> 	je .nos1
  9088                              <2> .s1:
  9089 000070B8 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  9090 000070BB 81C702000000        <2> 	add edi, 2
  9091 000070C1 4A                  <2> 	dec edx
  9092 000070C2 81FA00000000        <2> 	cmp edx, 0
  9093 000070C8 75EE                <2> 	jne .s1
  9094                              <2> .nos1:
  9095 000070CA 66892F              <2> 	mov [edi], bp
  9096 000070CD 5A                  <2> 	pop edx
  9097 000070CE 52                  <2> 	push edx
  9098 000070CF 29C7                <2> 	sub edi, eax
  9099 000070D1 29C7                <2> 	sub edi, eax
  9100 000070D3 81FA00000000        <2> 	cmp edx, 0
  9101 000070D9 7412                <2> 	je .nos2
  9102                              <2> .s2:
  9103 000070DB 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  9104 000070DE 81EF02000000        <2> 	sub edi, 2
  9105 000070E4 4A                  <2> 	dec edx
  9106 000070E5 81FA00000000        <2> 	cmp edx, 0
  9107 000070EB 75EE                <2> 	jne .s2
  9108                              <2> .nos2:
  9109 000070ED 66892F              <2> 	mov [edi], bp
  9110 000070F0 5A                  <2> 	pop edx
  9111 000070F1 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  9112 000070F3 01D7                <2> 	add edi, edx
  9113                              <2> 
  9114 000070F5 39D1                <2> 	cmp ecx, edx
  9115 000070F7 0F8470FFFFFF        <2> 	je .lpb
  9116                              <2> 
  9117 000070FD 51                  <2> 	push ecx
  9118 000070FE 01DF                <2> 	add edi, ebx
  9119 00007100 29CF                <2> 	sub edi, ecx
  9120 00007102 81F900000000        <2> 	cmp ecx, 0
  9121 00007108 7412                <2> 	je .nos3
  9122                              <2> .s3:
  9123 0000710A 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  9124 0000710D 81C702000000        <2> 	add edi, 2
  9125 00007113 49                  <2> 	dec ecx
  9126 00007114 81F900000000        <2> 	cmp ecx, 0
  9127 0000711A 75EE                <2> 	jne .s3
  9128                              <2> .nos3:
  9129 0000711C 66892F              <2> 	mov [edi], bp
  9130 0000711F 59                  <2> 	pop ecx
  9131 00007120 51                  <2> 	push ecx
  9132 00007121 29DF                <2> 	sub edi, ebx
  9133 00007123 29DF                <2> 	sub edi, ebx
  9134 00007125 81F900000000        <2> 	cmp ecx, 0
  9135 0000712B 7412                <2> 	je .nos4
  9136                              <2> .s4:
  9137 0000712D 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  9138 00007130 81EF02000000        <2> 	sub edi, 2
  9139 00007136 49                  <2> 	dec ecx
  9140 00007137 81F900000000        <2> 	cmp ecx, 0
  9141 0000713D 75EE                <2> 	jne .s4
  9142                              <2> .nos4:
  9143 0000713F 66892F              <2> 	mov [edi], bp
  9144 00007142 59                  <2> 	pop ecx
  9145 00007143 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  9146 00007145 01CF                <2> 	add edi, ecx
  9147                              <2> 
  9148 00007147 D1EA                <2> 	shr edx, 1
  9149 00007149 D1E9                <2> 	shr ecx, 1
  9150 0000714B 39CA                <2> 	cmp edx, ecx
  9151 0000714D 0F821EFFFFFF        <2> 	jb .lp
  9152                              <2> .done:
  9153 00007153 5D                  <2> 	pop ebp
  9154 00007154 C3                  <2> 	ret
  9155                              <2> 	
  9156 00007155 00000000            <2> .ddF_x dd 0
  9157 00007159 00000000            <2> .ddF_y dd 0
  9158                              <1> %include "source/gui/cursor.asm"
  9159                              <2> clearmousecursor:
  9160 0000715D BE[C5740000]        <2> 		mov esi, background
  9161 00007162 8B3D[755B0000]      <2> 		mov edi, [physbaseptr]
  9162 00007168 31D2                <2> 		xor edx, edx
  9163 0000716A 31C9                <2> 		xor ecx, ecx
  9164 0000716C 668B15[3F5E0000]    <2> 		mov dx, [lastmouseposition]
  9165 00007173 668B0D[415E0000]    <2> 		mov cx, [lastmouseposition + 2]
  9166 0000717A 01D7                <2> 		add edi, edx
  9167 0000717C 31D2                <2> 		xor edx, edx
  9168 0000717E 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
  9169 00007185 81F900000000        <2> 		cmp ecx, 0
  9170 0000718B 7408                <2> 		je .nomul
  9171 0000718D 52                  <2> 		push edx
  9172 0000718E 89D0                <2> 		mov eax, edx
  9173 00007190 F7E1                <2> 		mul ecx
  9174 00007192 01C7                <2> 		add edi, eax
  9175 00007194 5A                  <2> 		pop edx
  9176                              <2> .nomul:
  9177                              <2> %ifdef 	gui.background
  9178                              <2> 		cmp dword [backgroundimage], 0
  9179                              <2> 		je .noyclr
  9180                              <2> 		mov esi, [backgroundimage]
  9181                              <2> 		sub edi, [physbaseptr]
  9182                              <2> 		add esi, edi
  9183                              <2> 		add edi, [physbaseptr]
  9184                              <2> .backlp:
  9185                              <2> 		xor ebx, ebx
  9186                              <2> .noyback:
  9187                              <2> 		mov eax, [esi + ebx]
  9188                              <2> 		mov [edi + ebx], eax
  9189                              <2> 		add ebx, 4
  9190                              <2> 		cmp ebx, 16
  9191                              <2> 		jne .noyback
  9192                              <2> 		add edi, edx
  9193                              <2> 		add esi, edx
  9194                              <2> 		inc cx
  9195                              <2> 		cmp cx, 16
  9196                              <2> 		jb .backlp
  9197                              <2> 		ret
  9198                              <2> %endif
  9199                              <2> .noyclr:
  9200 00007195 668B06              <2> 		mov ax, [esi]
  9201 00007198 C1C010              <2> 		rol eax, 16
  9202 0000719B 668B06              <2> 		mov ax, [esi]
  9203 0000719E 8907                <2> 		mov [edi], eax
  9204 000071A0 894704              <2> 		mov [edi + 4], eax
  9205 000071A3 894708              <2> 		mov [edi + 8], eax
  9206 000071A6 89470C              <2> 		mov [edi + 12], eax
  9207 000071A9 01D7                <2> 		add edi, edx
  9208 000071AB 6641                <2> 		inc cx
  9209 000071AD 6681F91000          <2> 		cmp cx, 16
  9210 000071B2 72E1                <2> 		jb .noyclr
  9211 000071B4 C3                  <2> 		ret
  9212                              <2> 
  9213                              <2> switchmousepos:		;;switch were the mouse is located
  9214 000071B5 BE[9DD40300]        <2> 		mov esi, mousecolorbuf
  9215 000071BA 8B3D[755B0000]      <2> 		mov edi, [physbaseptr]
  9216 000071C0 31D2                <2> 		xor edx, edx
  9217 000071C2 31C9                <2> 		xor ecx, ecx
  9218 000071C4 668B15[3F5E0000]    <2> 		mov dx, [lastmouseposition]
  9219 000071CB 668B0D[415E0000]    <2> 		mov cx, [lastmouseposition + 2]
  9220 000071D2 01D7                <2> 		add edi, edx
  9221 000071D4 31D2                <2> 		xor edx, edx
  9222 000071D6 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
  9223 000071DD 6681F90000          <2> 		cmp cx, 0
  9224 000071E2 740B                <2> 		je noswmsy
  9225 000071E4 01D7                <2> swmsy:		add edi, edx
  9226 000071E6 6649                <2> 		dec cx
  9227 000071E8 6681F90000          <2> 		cmp cx, 0
  9228 000071ED 75F5                <2> 		jne swmsy
  9229 000071EF 8B06                <2> noswmsy:	mov eax, [esi]
  9230 000071F1 8B5E04              <2> 		mov ebx, [esi + 4]
  9231 000071F4 8907                <2> 		mov [edi], eax
  9232 000071F6 895F04              <2> 		mov [edi + 4], ebx
  9233 000071F9 8B4608              <2> 		mov eax, [esi + 8]
  9234 000071FC 8B5E0C              <2> 		mov ebx, [esi + 12]
  9235 000071FF 894708              <2> 		mov [edi + 8], eax
  9236 00007202 895F0C              <2> 		mov [edi + 12], ebx
  9237 00007205 01D7                <2> 		add edi, edx
  9238 00007207 81C610000000        <2> 		add esi, 16
  9239 0000720D 81FE[9DD50300]      <2> 		cmp esi, mcolorend
  9240 00007213 72DA                <2> 		jb noswmsy
  9241                              <2> 		
  9242                              <2> switchmousepos2:
  9243 00007215 BE[9DD40300]        <2> 		mov esi, mousecolorbuf
  9244 0000721A 8B3D[755B0000]      <2> 		mov edi, [physbaseptr]
  9245 00007220 31D2                <2> 		xor edx, edx
  9246 00007222 31C9                <2> 		xor ecx, ecx
  9247 00007224 668B15[435E0000]    <2> 		mov dx, [mousecursorposition]
  9248 0000722B 668B0D[455E0000]    <2> 		mov cx, [mousecursorposition + 2]
  9249 00007232 01D7                <2> 		add edi, edx
  9250 00007234 31D2                <2> 		xor edx, edx
  9251 00007236 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
  9252 0000723D 6681F90000          <2> 		cmp cx, 0
  9253 00007242 740B                <2> 		je noswmsy2
  9254 00007244 01D7                <2> swmsy2:		add edi, edx
  9255 00007246 6649                <2> 		dec cx
  9256 00007248 6681F90000          <2> 		cmp cx, 0
  9257 0000724D 75F5                <2> 		jne swmsy2
  9258 0000724F 8B07                <2> noswmsy2:	mov eax, [edi]
  9259 00007251 8B5F04              <2> 		mov ebx, [edi + 4]
  9260 00007254 8906                <2> 		mov [esi], eax
  9261 00007256 895E04              <2> 		mov [esi + 4], ebx
  9262 00007259 8B4708              <2> 		mov eax, [edi + 8]
  9263 0000725C 8B5F0C              <2> 		mov ebx, [edi + 12]
  9264 0000725F 894608              <2> 		mov [esi + 8], eax
  9265 00007262 895E0C              <2> 		mov [esi + 12], ebx
  9266 00007265 01D7                <2> 		add edi, edx
  9267 00007267 81C610000000        <2> 		add esi, 16
  9268 0000726D 81FE[9DD50300]      <2> 		cmp esi, mcolorend
  9269 00007273 72DA                <2> 		jb noswmsy2
  9270 00007275 C3                  <2> 		ret
  9271                              <2> 		
  9272                              <1> %include "source/gui/icon.asm"
  9273 00007276 0000                <2> iconcolor dw 0
  9274                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9275 00007278 A2[658B0000]        <2> 		mov [iconselected], al
  9276 0000727D 8025[658B0000]01    <2> 		and byte [iconselected], 1
  9277 00007284 B401                <2> 		mov ah, 1
  9278 00007286 E800160000          <2> 		call graphicsadd
  9279                              <2> 	showicon2:
  9280 0000728B 8B3D[755B0000]      <2> 		mov edi, [physbaseptr]
  9281 00007291 6601D2              <2> 		add dx, dx
  9282 00007294 663B15[4D5C0000]    <2> 		cmp dx, [resolutionx2]
  9283 0000729B 720C                <2> 		jb screenxgood
  9284 0000729D 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
  9285 000072A4 6681EA4000          <2> 		sub dx, 64
  9286                              <2> 	screenxgood:
  9287 000072A9 6681F90000          <2> 		cmp cx, 0
  9288 000072AE 742B                <2> 		je noscreenygoodchk
  9289 000072B0 663B0D[615B0000]    <2> 		cmp cx, [resolutiony]
  9290 000072B7 720C                <2> 		jb screenygood
  9291 000072B9 668B0D[615B0000]    <2> 		mov cx, [resolutiony]
  9292 000072C0 6681E92000          <2> 		sub cx, 32
  9293                              <2> 	screenygood:
  9294 000072C5 50                  <2> 		push eax
  9295 000072C6 52                  <2> 		push edx
  9296 000072C7 31C0                <2> 		xor eax, eax
  9297 000072C9 31DB                <2> 		xor ebx, ebx
  9298 000072CB 668B1D[4D5C0000]    <2> 		mov bx, [resolutionx2]
  9299 000072D2 6689C8              <2> 		mov ax, cx
  9300 000072D5 F7E3                <2> 		mul ebx
  9301 000072D7 01C7                <2> 		add edi, eax
  9302 000072D9 5A                  <2> 		pop edx
  9303 000072DA 58                  <2> 		pop eax
  9304                              <2> 	noscreenygoodchk:
  9305 000072DB 31DB                <2> 		xor ebx, ebx
  9306 000072DD 6689D3              <2> 		mov bx, dx
  9307 000072E0 01DF                <2> 		add edi, ebx
  9308 000072E2 6631C9              <2> 		xor cx, cx
  9309 000072E5 668B06              <2> 		mov ax, [esi]
  9310 000072E8 81C602000000        <2> 		add esi, 2
  9311 000072EE 66A3[76720000]      <2> 		mov [iconcolor], ax
  9312                              <2> 	writeicon:
  9313 000072F4 8B06                <2> 		mov eax, [esi]
  9314 000072F6 D1C0                <2> 		rol eax, 1
  9315 000072F8 30C9                <2> 		xor cl, cl
  9316                              <2> 	writeiconline:
  9317 000072FA B201                <2> 		mov dl, 1
  9318 000072FC 20C2                <2> 		and dl, al
  9319 000072FE 3215[658B0000]      <2> 		xor dl, [iconselected]
  9320 00007304 668B1D[C5740000]    <2> 		mov bx, [background]
  9321 0000730B 66891F              <2> 		mov [edi], bx
  9322 0000730E 80FA00              <2> 		cmp dl, 0
  9323 00007311 740A                <2> 		je noiconline
  9324 00007313 668B15[76720000]    <2> 		mov dx, [iconcolor]
  9325 0000731A 668917              <2> 		mov [edi], dx
  9326                              <2> 	noiconline:
  9327 0000731D 81C702000000        <2> 		add edi, 2
  9328 00007323 D1C0                <2> 		rol eax, 1
  9329 00007325 FEC1                <2> 		inc cl
  9330 00007327 80F920              <2> 		cmp cl, 32
  9331 0000732A 72CE                <2> 		jb writeiconline
  9332 0000732C 81C604000000        <2> 		add esi, 4
  9333 00007332 FEC5                <2> 		inc ch
  9334 00007334 31D2                <2> 		xor edx, edx
  9335 00007336 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
  9336 0000733D 01D7                <2> 		add edi, edx
  9337 0000733F 81EF40000000        <2> 		sub edi, 64
  9338 00007345 80FD20              <2> 		cmp ch, 32
  9339 00007348 72AA                <2> 		jb writeicon
  9340 0000734A 31C0                <2> 		xor eax, eax
  9341 0000734C C3                  <2> 		ret
  9342                              <1> %include "source/gui/line.asm"
  9343                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9344 0000734D 668935[6F740000]    <2> 	mov [.color], si
  9345 00007354 C605[71740000]00    <2> 	mov byte [.steep], 0
  9346 0000735B C605[72740000]00    <2> 	mov byte [.yreversed], 0
  9347 00007362 E907000000          <2> 	jmp .notsteep
  9348                              <2> .steeploop:
  9349 00007367 C605[71740000]01    <2> 	mov byte [.steep], 1
  9350                              <2> .notsteep:
  9351 0000736E 31FF                <2> 	xor edi, edi
  9352 00007370 31F6                <2> 	xor esi, esi
  9353 00007372 6639DA              <2> 	cmp dx, bx
  9354 00007375 7705                <2> 	ja .noreversex
  9355 00007377 6687D3              <2> 	xchg dx, bx
  9356 0000737A 6691                <2> 	xchg cx, ax
  9357                              <2> .noreversex:
  9358 0000737C 6689D7              <2> 	mov di, dx
  9359 0000737F 6629DF              <2> 	sub di, bx
  9360                              <2> 	
  9361 00007382 6639C1              <2> 	cmp cx, ax
  9362 00007385 720B                <2> 	jb .reversey
  9363 00007387 6689CE              <2> 	mov si, cx
  9364 0000738A 6629C6              <2> 	sub si, ax
  9365 0000738D E90D000000          <2> 	jmp .normal
  9366                              <2> .reversey:
  9367 00007392 C605[72740000]02    <2> 	mov byte [.yreversed], 2
  9368 00007399 6689C6              <2> 	mov si, ax
  9369 0000739C 6629CE              <2> 	sub si, cx	
  9370                              <2> .normal:
  9371 0000739F 6687CA              <2> 	xchg cx, dx
  9372 000073A2 6693                <2> 	xchg ax, bx
  9373 000073A4 6639FE              <2> 	cmp si, di
  9374 000073A7 77BE                <2> 	ja .steeploop
  9375 000073A9 6687CA              <2> 	xchg cx, dx
  9376 000073AC 6693                <2> 	xchg ax, bx
  9377                              <2> 	
  9378 000073AE 6691                <2> 	xchg ax, cx
  9379 000073B0 6687DA              <2> 	xchg bx, dx
  9380 000073B3 66893D[75740000]    <2> 	mov [.xdelta], di
  9381 000073BA 668935[77740000]    <2> 	mov [.ydelta], si
  9382 000073C1 668B35[6F740000]    <2> 	mov si, [.color]
  9383 000073C8 66891D[73740000]    <2> 	mov [.endline], bx
  9384 000073CF 6652                <2> 	push dx
  9385 000073D1 6651                <2> 	push cx
  9386 000073D3 6687CA              <2> 	xchg cx, dx
  9387 000073D6 803D[71740000]01    <2> 	cmp byte [.steep], 1
  9388 000073DD 7403                <2> 	je .xchg
  9389 000073DF 6687D1              <2> 	xchg dx, cx
  9390                              <2> .xchg:
  9391 000073E2 E856170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9392 000073E7 6659                <2> 	pop cx
  9393 000073E9 665A                <2> 	pop dx
  9394 000073EB 31C0                <2> 	xor eax, eax
  9395 000073ED 66A1[75740000]      <2> 	mov ax, [.xdelta]
  9396 000073F3 66D1E8              <2> 	shr ax, 1
  9397 000073F6 8A0D[71740000]      <2> 	mov cl, [.steep]
  9398 000073FC 0A0D[72740000]      <2> 	or cl, [.yreversed]
  9399 00007402 55                  <2> 	push ebp
  9400 00007403 668B2D[73740000]    <2> 	mov bp, [.endline]
  9401 0000740A 6629D5              <2> 	sub bp, dx
  9402 0000740D 668B15[77740000]    <2> 	mov dx, [.ydelta]
  9403                              <2> .lp:
  9404 00007414 668937              <2> 	mov [edi], si
  9405 00007417 6639D0              <2> 	cmp ax, dx
  9406 0000741A 7332                <2> 	jae .noaddx
  9407 0000741C F6C102              <2> 	test cl, 2
  9408 0000741F 7414                <2> 	jz .nodecy
  9409 00007421 F6C101              <2> 	test cl, 1
  9410 00007424 7509                <2> 	jnz .steepy
  9411 00007426 29DF                <2> 	sub edi, ebx
  9412 00007428 29DF                <2> 	sub edi, ebx
  9413 0000742A E906000000          <2> 	jmp .nodecy
  9414                              <2> .steepy:
  9415 0000742F 81EF04000000        <2> 	sub edi, 4
  9416                              <2> .nodecy:
  9417 00007435 660305[75740000]    <2> 	add ax, [.xdelta]
  9418 0000743C F6C101              <2> 	test cl, 1
  9419 0000743F 7507                <2> 	jnz .steepx
  9420 00007441 01DF                <2> 	add edi, ebx
  9421 00007443 E906000000          <2> 	jmp .noaddx
  9422                              <2> .steepx:
  9423 00007448 81C702000000        <2> 	add edi, 2
  9424                              <2> .noaddx:
  9425 0000744E 6629D0              <2> 	sub ax, dx
  9426 00007451 664D                <2> 	dec bp
  9427 00007453 81C702000000        <2> 	add edi, 2
  9428 00007459 F6C101              <2> 	test cl, 1
  9429 0000745C 7408                <2> 	jz .nosteepx
  9430 0000745E 81EF02000000        <2> 	sub edi, 2
  9431 00007464 01DF                <2> 	add edi, ebx
  9432                              <2> .nosteepx:
  9433 00007466 6681FD0000          <2> 	cmp bp, 0
  9434 0000746B 75A7                <2> 	jne .lp
  9435                              <2> .done:
  9436 0000746D 5D                  <2> 	pop ebp
  9437 0000746E C3                  <2> 	ret
  9438                              <2> 	
  9439 0000746F 0000                <2> .color dw 0
  9440 00007471 00                  <2> .steep db 0
  9441 00007472 00                  <2> .yreversed db 0
  9442 00007473 0000                <2> .endline dw 0
  9443 00007475 0000                <2> .xdelta dw 0
  9444 00007477 0000                <2> .ydelta dw 0
  9445                              <1> %include "source/gui/refresh.asm"
  9446                              <2> guiclear:
  9447 00007479 8B3D[755B0000]      <2> 	mov edi, [physbaseptr]
  9448 0000747F 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  9449 00007486 668B0D[615B0000]    <2> 	mov cx, [resolutiony]
  9450 0000748D 668B1D[C5740000]    <2> 	mov bx, [background]
  9451 00007494 66891D[C7740000]    <2> 	mov [background + 2], bx
  9452                              <2> %ifdef gui.background
  9453                              <2> 	cmp dword [backgroundimage], 0
  9454                              <2> 	je guiclear.noback
  9455                              <2> 		mov esi, [backgroundimage]
  9456                              <2> 	.lp:
  9457                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9458                              <2> 		;movdqa [edi], xmm0
  9459                              <2> 		;add esi, 16
  9460                              <2> 		;add edi, 16
  9461                              <2> 		;sub dx, 8
  9462                              <2> 		mov eax, [esi]
  9463                              <2> 		mov [edi], eax
  9464                              <2> 		add esi, 4
  9465                              <2> 		add edi, 4
  9466                              <2> 		sub dx, 2
  9467                              <2> 		cmp dx, 0
  9468                              <2> 		ja .lp
  9469                              <2> 		dec cx
  9470                              <2> 		mov dx, [resolutionx]
  9471                              <2> 		cmp cx, 0
  9472                              <2> 		ja .lp
  9473                              <2> 		ret
  9474                              <2> 	backgroundimage dd 0
  9475                              <2> %endif
  9476                              <2> guiclear.noback:
  9477 0000749B A1[C5740000]        <2> 	mov eax, [background]
  9478                              <2> guiclearloop:
  9479 000074A0 8907                <2> 	mov [edi], eax
  9480 000074A2 81C704000000        <2> 	add edi, 4
  9481 000074A8 6681EA0200          <2> 	sub dx, 2
  9482 000074AD 6681FA0000          <2> 	cmp dx, 0
  9483 000074B2 77EC                <2> 	ja guiclearloop
  9484 000074B4 6649                <2> 	dec cx
  9485 000074B6 668B15[5F5B0000]    <2> 	mov dx, [resolutionx]
  9486 000074BD 6681F90000          <2> 	cmp cx, 0
  9487 000074C2 77DC                <2> 	ja guiclearloop
  9488 000074C4 C3                  <2> 	ret
  9489                              <2> 
  9490 000074C5 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9491                              <2> 	.original equ 0111101111001111b
  9492                              <2> 
  9493                              <2> reloadallgraphics:
  9494 000074C9 BF[9DD20300]        <2> 		mov edi, graphicstable
  9495                              <2> reloadgraphicsloop:
  9496 000074CE 8B7702              <2> 		mov esi, [edi + 2]
  9497 000074D1 668B5706            <2> 		mov dx, [edi + 6]
  9498 000074D5 668B4F08            <2> 		mov cx, [edi + 8]
  9499 000074D9 668B07              <2> 		mov ax, [edi]
  9500 000074DC 668B5F0A            <2> 		mov bx, [edi + 10]
  9501 000074E0 893D[77880000]      <2> 		mov [grpctblpos], edi
  9502 000074E6 3B3D[0B830000]      <2> 		cmp edi, [dragging]
  9503 000074EC 741E                <2> 		je loadedgraphic
  9504 000074EE 663D0100            <2> 		cmp ax, 1
  9505 000074F2 0F843C000000        <2> 		je near icongraphic
  9506 000074F8 663D0200            <2> 		cmp ax, 2
  9507 000074FC 0F8445000000        <2> 		je near stringgraphic
  9508 00007502 663D0300            <2> 		cmp ax, 3
  9509 00007506 0F8419000000        <2> 		je near windowgraphic
  9510 0000750C 8B3D[77880000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9511 00007512 81C710000000        <2> 		add edi, 16
  9512 00007518 81FF[9DD40300]      <2> 		cmp edi, graphicstableend
  9513 0000751E 733A                <2> 		jae donereloadgraphics
  9514 00007520 E9A9FFFFFF          <2> 		jmp reloadgraphicsloop
  9515                              <2> windowgraphic:
  9516 00007525 E842090000          <2> 		call showwindow2
  9517 0000752A E827A9FFFF          <2> 		call cleardouble
  9518 0000752F E9D8FFFFFF          <2> 		jmp loadedgraphic
  9519 00007534 80E301              <2> icongraphic:	and bl, 1
  9520 00007537 881D[658B0000]      <2> 		mov [iconselected], bl
  9521 0000753D E849FDFFFF          <2> 		call showicon2
  9522 00007542 E9C5FFFFFF          <2> 		jmp loadedgraphic
  9523 00007547 80E301              <2> stringgraphic:  and bl, 1
  9524 0000754A 881D[07830000]      <2> 		mov [mouseselecton], bl
  9525 00007550 E8D7050000          <2> 		call showstring2
  9526 00007555 E9B2FFFFFF          <2> 		jmp loadedgraphic
  9527                              <2> donereloadgraphics:
  9528 0000755A 8B3D[0B830000]      <2> 		mov edi, [dragging]
  9529 00007560 81FF[9DD20300]      <2> 		cmp edi, graphicstable
  9530 00007566 7226                <2> 		jb notcorrectdrag
  9531 00007568 668B07              <2> 		mov ax, [edi]
  9532 0000756B 8B7702              <2> 		mov esi, [edi + 2]
  9533 0000756E 668B5706            <2> 		mov dx, [edi + 6]
  9534 00007572 668B4F08            <2> 		mov cx, [edi + 8]
  9535 00007576 668B5F0A            <2> 		mov bx, [edi + 10]
  9536 0000757A 663D0100            <2> 		cmp ax, 1
  9537 0000757E 750F                <2> 		jne noticondragging
  9538 00007580 80E301              <2> 		and bl, 1
  9539 00007583 881D[658B0000]      <2> 		mov [iconselected], bl
  9540 00007589 E8FDFCFFFF          <2> 		call showicon2
  9541                              <2> notcorrectdrag:
  9542 0000758E C3                  <2> 		ret
  9543                              <2> 
  9544                              <2> 	noticondragging:
  9545 0000758F 663D0200            <2> 		cmp ax, 2
  9546 00007593 75F9                <2> 		jne notcorrectdrag
  9547 00007595 80E301              <2> 		and bl, 1
  9548 00007598 881D[07830000]      <2> 		mov [mouseselecton], bl
  9549 0000759E E889050000          <2> 		call showstring2
  9550 000075A3 E9E6FFFFFF          <2> 		jmp notcorrectdrag
  9551                              <1> %include "source/gui/square.asm"
  9552                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9553 000075A8 6639D3              <2> 	cmp bx, dx
  9554 000075AB 7303                <2> 	jae .noxchgx
  9555 000075AD 6687DA              <2> 	xchg bx, dx
  9556                              <2> .noxchgx:
  9557 000075B0 6639C8              <2> 	cmp ax, cx
  9558 000075B3 7302                <2> 	jae .noxchgy
  9559 000075B5 6691                <2> 	xchg ax, cx
  9560                              <2> .noxchgy:
  9561 000075B7 6650                <2> 	push ax
  9562 000075B9 6653                <2> 	push bx
  9563 000075BB 6652                <2> 	push dx
  9564 000075BD E87B150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9565 000075C2 31D2                <2> 	xor edx, edx
  9566 000075C4 665A                <2> 	pop dx
  9567 000075C6 31DB                <2> 	xor ebx, ebx
  9568 000075C8 665B                <2> 	pop bx
  9569 000075CA 6658                <2> 	pop ax
  9570                              <2> .lp0:
  9571 000075CC 6652                <2> 	push dx
  9572                              <2> .lp:
  9573 000075CE 668937              <2> 	mov [edi], si
  9574 000075D1 81C702000000        <2> 	add edi, 2
  9575 000075D7 6642                <2> 	inc dx
  9576 000075D9 6639DA              <2> 	cmp dx, bx
  9577 000075DC 76F0                <2> 	jbe .lp
  9578 000075DE 665A                <2> 	pop dx
  9579 000075E0 81EF02000000        <2> 	sub edi, 2
  9580 000075E6 29DF                <2> 	sub edi, ebx
  9581 000075E8 29DF                <2> 	sub edi, ebx
  9582 000075EA 01D7                <2> 	add edi, edx
  9583 000075EC 01D7                <2> 	add edi, edx
  9584 000075EE 033D[4D5C0000]      <2> 	add edi, [resolutionx2]
  9585 000075F4 6641                <2> 	inc cx
  9586 000075F6 6639C1              <2> 	cmp cx, ax
  9587 000075F9 7203                <2> 	jb .lp2
  9588 000075FB 74CF                <2> 	je .lp0
  9589 000075FD C3                  <2> 	ret
  9590                              <2> .lp2:
  9591 000075FE 57                  <2> 	push edi
  9592 000075FF 668937              <2> 	mov [edi], si
  9593 00007602 29D7                <2> 	sub edi, edx
  9594 00007604 29D7                <2> 	sub edi, edx
  9595 00007606 01DF                <2> 	add edi, ebx
  9596 00007608 01DF                <2> 	add edi, ebx
  9597 0000760A 668937              <2> 	mov [edi], si
  9598 0000760D 5F                  <2> 	pop edi
  9599 0000760E 033D[4D5C0000]      <2> 	add edi, [resolutionx2]
  9600 00007614 6641                <2> 	inc cx
  9601 00007616 6639C1              <2> 	cmp cx, ax
  9602 00007619 72E3                <2> 	jb .lp2
  9603 0000761B E9ACFFFFFF          <2> 	jmp .lp0
  9604                              <2> 
  9605                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9606 00007620 6639D3              <2> 	cmp bx, dx
  9607 00007623 7303                <2> 	jae .noxchgx
  9608 00007625 6687DA              <2> 	xchg bx, dx
  9609                              <2> .noxchgx:
  9610 00007628 6639C8              <2> 	cmp ax, cx
  9611 0000762B 7302                <2> 	jae .noxchgy
  9612 0000762D 6691                <2> 	xchg ax, cx
  9613                              <2> .noxchgy:
  9614 0000762F 6650                <2> 	push ax
  9615 00007631 6653                <2> 	push bx
  9616 00007633 6652                <2> 	push dx
  9617 00007635 E803150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9618 0000763A 31D2                <2> 	xor edx, edx
  9619 0000763C 665A                <2> 	pop dx
  9620 0000763E 31DB                <2> 	xor ebx, ebx
  9621 00007640 665B                <2> 	pop bx
  9622 00007642 6658                <2> 	pop ax
  9623                              <2> .lp2:
  9624 00007644 6652                <2> 	push dx
  9625                              <2> .lp:
  9626 00007646 668937              <2> 	mov [edi], si
  9627 00007649 81C702000000        <2> 	add edi, 2
  9628 0000764F 6642                <2> 	inc dx
  9629 00007651 6639DA              <2> 	cmp dx, bx
  9630 00007654 76F0                <2> 	jbe .lp
  9631 00007656 665A                <2> 	pop dx
  9632 00007658 81EF02000000        <2> 	sub edi, 2
  9633 0000765E 29DF                <2> 	sub edi, ebx
  9634 00007660 29DF                <2> 	sub edi, ebx
  9635 00007662 01D7                <2> 	add edi, edx
  9636 00007664 01D7                <2> 	add edi, edx
  9637 00007666 033D[4D5C0000]      <2> 	add edi, [resolutionx2]
  9638 0000766C 6641                <2> 	inc cx
  9639 0000766E 6639C1              <2> 	cmp cx, ax
  9640 00007671 76D1                <2> 	jbe .lp2
  9641 00007673 C3                  <2> 	ret
  9642                              <1> %include "source/gui/startup.asm"
  9643                              <2> guisetup:
  9644                              <2> 	%ifdef gui.background
  9645                              <2> 	xor ebx, ebx
  9646                              <2> 	mov [backgroundimage], ebx
  9647                              <2> 	%endif
  9648 00007674 E800FEFFFF          <2> 	call guiclear
  9649 00007679 C605[2C900000]01    <2> 	mov byte [guion], 1
  9650 00007680 C605[07830000]00    <2> 	mov byte [mouseselecton], 0
  9651 00007687 31C0                <2> 	xor eax, eax
  9652 00007689 31DB                <2> 	xor ebx, ebx
  9653 0000768B 31C9                <2> 	xor ecx, ecx
  9654 0000768D 31D2                <2> 	xor edx, edx
  9655                              <2> 	
  9656 0000768F BE[51780000]        <2> 	mov esi, pacmsg
  9657 00007694 30E4                <2> 	xor ah, ah
  9658 00007696 B010                <2> 	mov al, 00010000b
  9659 00007698 31DB                <2> 	xor ebx, ebx
  9660 0000769A 66B99000            <2> 	mov cx, 144
  9661 0000769E 66BA0400            <2> 	mov dx, 4
  9662 000076A2 E872040000          <2> 	call showstring
  9663                              <2> 	
  9664 000076A7 BE[8F780000]        <2> 	mov esi, interneticon
  9665 000076AC 30E4                <2> 	xor ah, ah
  9666 000076AE B010                <2> 	mov al, 00010000b
  9667 000076B0 BB[7A770000]        <2> 	mov ebx, noie
  9668 000076B5 66B91800            <2> 	mov cx, 24
  9669 000076B9 66BA0400            <2> 	mov dx, 4
  9670 000076BD E8B6FBFFFF          <2> 	call showicon
  9671                              <2> 	
  9672 000076C2 BE[11790000]        <2> 	mov esi, wordicon
  9673 000076C7 30E4                <2> 	xor ah, ah
  9674 000076C9 B010                <2> 	mov al, 00010000b
  9675 000076CB 31DB                <2> 	xor ebx, ebx
  9676 000076CD 66B91800            <2> 	mov cx, 24
  9677 000076D1 66BA3000            <2> 	mov dx, 48
  9678 000076D5 E89EFBFFFF          <2> 	call showicon
  9679                              <2> 	
  9680 000076DA BE[93790000]        <2> 	mov esi, pacmanpellet
  9681 000076DF 30E4                <2> 	xor ah, ah
  9682 000076E1 B010                <2> 	mov al, 00010000b
  9683 000076E3 31DB                <2> 	xor ebx, ebx
  9684 000076E5 66B94000            <2> 	mov cx, 64
  9685 000076E9 66BA0400            <2> 	mov dx, 4
  9686 000076ED E886FBFFFF          <2> 	call showicon
  9687                              <2> 	
  9688 000076F2 BE[977A0000]        <2> 	mov esi, pacman
  9689 000076F7 30E4                <2> 	xor ah, ah
  9690 000076F9 B010                <2> 	mov al, 00010000b
  9691 000076FB BB[63770000]        <2> 	mov ebx, pacmannomnom
  9692 00007700 66B94000            <2> 	mov cx, 64
  9693 00007704 66BA3000            <2> 	mov dx, 48
  9694 00007708 E86BFBFFFF          <2> 	call showicon
  9695                              <2> 	
  9696 0000770D BE[157A0000]        <2> 	mov esi, ghostie
  9697 00007712 30E4                <2> 	xor ah, ah
  9698 00007714 B010                <2> 	mov al, 00010000b
  9699 00007716 BB[4C770000]        <2> 	mov ebx, boo
  9700 0000771B 66B96C00            <2> 	mov cx, 108
  9701 0000771F 66BA0400            <2> 	mov dx, 4
  9702 00007723 E850FBFFFF          <2> 	call showicon
  9703                              <2> 	
  9704 00007728 BE[33780000]        <2> 	mov esi, start
  9705 0000772D 668B0D[615B0000]    <2> 	mov cx, [resolutiony]
  9706 00007734 6681E91000          <2> 	sub cx, 16
  9707 00007739 66BA0200            <2> 	mov dx, 2
  9708 0000773D 30E4                <2> 	xor ah, ah
  9709 0000773F B010                <2> 	mov al, 00010000b
  9710 00007741 BB[EF770000]        <2> 	mov ebx, winblows
  9711 00007746 E8CE030000          <2> 	call showstring
  9712                              <2> 
  9713                              <2> %ifdef gui.time	
  9714                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9715                              <2> %endif
  9716 0000774B C3                  <2> 	ret
  9717                              <2> 
  9718                              <2> 	boo:
  9719 0000774C BE[4C780000]        <2> 		mov esi, boomsg
  9720 00007751 66BA6400            <2> 		mov dx, 100
  9721 00007755 66B94001            <2> 		mov cx, 320
  9722 00007759 31DB                <2> 		xor ebx, ebx
  9723 0000775B 6631C0              <2> 		xor ax, ax
  9724 0000775E E9B6030000          <2> 		jmp showstring
  9725                              <2> 
  9726                              <2> 	pacmannomnom:
  9727 00007763 BE[6A780000]        <2> 		mov esi, pacnom
  9728 00007768 66BA8200            <2> 		mov dx, 130
  9729 0000776C 66B93C00            <2> 		mov cx, 60
  9730 00007770 31DB                <2> 		xor ebx, ebx
  9731 00007772 6631C0              <2> 		xor ax, ax
  9732 00007775 E99F030000          <2> 		jmp showstring	
  9733                              <2> 	
  9734                              <2> 	noie:
  9735 0000777A 66C705[79780000]80- <2> 		mov word [termwindow], 640
  9736 00007782 02                  <2>
  9737 00007783 66C705[7B780000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9738 0000778B 01                  <2>
  9739 0000778C BE[79780000]        <2> 		mov esi, termwindow
  9740 00007791 66BA1000            <2> 		mov dx, 16
  9741 00007795 66B91000            <2> 		mov cx, 16
  9742 00007799 31DB                <2> 		xor ebx, ebx
  9743 0000779B 6631C0              <2> 		xor ax, ax
  9744 0000779E E80F060000          <2> 		call showwindow
  9745 000077A3 E9CDB3FFFF          <2> 		jmp os
  9746                              <2> 
  9747                              <2> 	gotomenuboot:
  9748 000077A8 31D2                <2> 		xor edx, edx
  9749 000077AA 31C9                <2> 		xor ecx, ecx
  9750 000077AC 668B15[5F5B0000]    <2> 		mov dx, [resolutionx]
  9751 000077B3 668B0D[615B0000]    <2> 		mov cx, [resolutiony]
  9752 000077BA 66C1E904            <2> 		shr cx, 4
  9753 000077BE 6681E90100          <2> 		sub cx, 1
  9754 000077C3 66C1E104            <2> 		shl cx, 4
  9755 000077C7 668915[79780000]    <2> 		mov [termwindow], dx
  9756 000077CE 66890D[7B780000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9757 000077D5 BE[79780000]        <2> 		mov esi, termwindow
  9758 000077DA 6631D2              <2> 		xor dx, dx
  9759 000077DD 6631C9              <2> 		xor cx, cx
  9760 000077E0 31DB                <2> 		xor ebx, ebx
  9761 000077E2 6631C0              <2> 		xor ax, ax
  9762 000077E5 E8C8050000          <2> 		call showwindow
  9763 000077EA E986B3FFFF          <2> 		jmp os
  9764                              <2> 
  9765                              <2> 	winblows:
  9766 000077EF BE[42780000]        <2> 		mov esi, turnoffmsg
  9767 000077F4 BB[AE560000]        <2> 		mov ebx, turnoff
  9768 000077F9 668B0D[615B0000]    <2> 		mov cx, [resolutiony]
  9769 00007800 6681E92000          <2> 		sub cx, 32
  9770 00007805 6631D2              <2> 		xor dx, dx
  9771 00007808 30E4                <2> 		xor ah, ah
  9772 0000780A B010                <2> 		mov al, 00010000b
  9773 0000780C E808030000          <2> 		call showstring
  9774 00007811 BE[39780000]        <2> 		mov esi, gotomenu
  9775 00007816 668B0D[615B0000]    <2> 		mov cx, [resolutiony]
  9776 0000781D 6681E93000          <2> 		sub cx, 48
  9777 00007822 6631D2              <2> 		xor dx, dx
  9778 00007825 30E4                <2> 		xor ah, ah
  9779 00007827 B010                <2> 		mov al, 00010000b
  9780 00007829 BB[A8770000]        <2> 		mov ebx, gotomenuboot
  9781 0000782E E9E6020000          <2> 		jmp showstring
  9782                              <2> 		
  9783                              <2> 
  9784 00007833 737461727400        <2> 	start	db "start",0
  9785 00007839 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9786 00007842 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9787 0000784B 00                  <2>
  9788 0000784C 426F6F2100          <2> 	boomsg db "Boo!",0
  9789 00007851 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9790 0000785A 73206561737920746F- <2>
  9791 00007863 20647261772E00      <2>
  9792 0000786A 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9793 00007873 6D206E6F6D00        <2>
  9794                              <2> 
  9795 00007879 20035802            <2> 	termwindow:	dw 800,600	;window size
  9796 0000787D FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9797 00007881 [9ED50300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9798 00007885 [E6AA0400]          <2>
  9799 00007889 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9800                              <2> 	
  9801 0000788F <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9802 00007911 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9803 00007993 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9804 00007A15 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9805 00007A97 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9806                              <2> 
  9807                              <2> %ifdef gui.time
  9808                              <2> guitime:
  9809                              <2> 		call time	;get rtc in timeshow & dateshow
  9810                              <2> 		xor ebx, ebx
  9811                              <2> 		mov dx, [resolutionx2]
  9812                              <2> 		xor cx, cx
  9813                              <2> 		sub dx, 304
  9814                              <2> 		mov esi, dateshow
  9815                              <2> 		mov al, 00010001b
  9816                              <2> 		call showstring
  9817                              <2> 		mov esi, timeshow
  9818                              <2> 		xor ebx, ebx
  9819                              <2> 		mov al, 00010001b
  9820                              <2> 		call showstring
  9821                              <2> 		ret
  9822                              <2> %endif
  9823                              <1> %include "source/gui/text.asm"
  9824                              <2> 	showstring:
  9825 00007B19 A2[07830000]        <2> 		mov [mouseselecton], al
  9826 00007B1E 8025[07830000]01    <2> 		and byte [mouseselecton], 1
  9827 00007B25 B402                <2> 		mov ah, 2
  9828 00007B27 E85F0D0000          <2> 		call graphicsadd
  9829                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9830 00007B2C 30E4                <2> 		xor ah, ah
  9831 00007B2E 8A06                <2> 		mov al, [esi]
  9832 00007B30 3CC0                <2> 		cmp al, 0xC0
  9833 00007B32 7234                <2> 		jb .doneutf
  9834 00007B34 3CE0                <2> 		cmp al, 0xE0
  9835 00007B36 721D                <2> 		jb .two
  9836 00007B38 46                  <2> 		inc esi
  9837 00007B39 668B1E              <2> 		mov bx, [esi]
  9838 00007B3C 46                  <2> 		inc esi
  9839 00007B3D C0E004              <2> 		shl al, 4
  9840 00007B40 66C1E302            <2> 		shl bx, 2
  9841 00007B44 C0EF02              <2> 		shr bh, 2
  9842 00007B47 66C1EB02            <2> 		shr bx, 2
  9843 00007B4B 08C7                <2> 		or bh, al
  9844 00007B4D 6689D8              <2> 		mov ax, bx
  9845 00007B50 E913000000          <2> 		jmp .doneutf
  9846                              <2> 	.two:
  9847 00007B55 8A3E                <2> 		mov bh, [esi]
  9848 00007B57 46                  <2> 		inc esi
  9849 00007B58 8A1E                <2> 		mov bl, [esi]
  9850 00007B5A 66C1E302            <2> 		shl bx, 2
  9851 00007B5E C0EF02              <2> 		shr bh, 2
  9852 00007B61 66C1EB02            <2> 		shr bx, 2
  9853 00007B65 6689D8              <2> 		mov ax, bx
  9854                              <2> 	.doneutf:
  9855 00007B68 3C00                <2> 		cmp al, 0
  9856 00007B6A 7423                <2> 		je doneshowstring
  9857 00007B6C 46                  <2> 		inc esi
  9858 00007B6D 3CFF                <2> 		cmp al, 255
  9859 00007B6F 74BB                <2> 		je showstring2
  9860 00007B71 56                  <2> 		push esi
  9861 00007B72 668B1D[977B0000]    <2> 		mov bx, [colorfont2]
  9862 00007B79 E82A000000          <2> 		call showfontvesa
  9863 00007B7E 663D0A00            <2> 		cmp ax, 10
  9864 00007B82 7405                <2> 		je noproceedshst
  9865 00007B84 6681C20800          <2> 		add dx, 8
  9866                              <2> 	noproceedshst:
  9867 00007B89 5E                  <2> 		pop esi
  9868 00007B8A E99DFFFFFF          <2> 		jmp showstring2
  9869                              <2> 	doneshowstring:
  9870 00007B8F C605[07830000]00    <2> 		mov byte [mouseselecton], 0
  9871 00007B96 C3                  <2> 		ret
  9872                              <2> 
  9873 00007B97 FFFF                <2> colorfont2 dw 0xFFFF
  9874 00007B99 00                  <2> colorcache db 0
  9875                              <2> 
  9876 00007B9A 02                  <2> resolutionbytes db 2
  9877 00007B9B 0000                <2> posxvesa dw 0
  9878 00007B9D 0000                <2> posyvesa dw 0
  9879 00007B9F FFFF                <2> colorfont dw 0xFFFF
  9880                              <2> savefontvesa:		;same rules as showfontvesa
  9881 00007BA1 C605[06830000]01    <2> 	mov byte [savefonton], 1
  9882                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9883 00007BA8 663DFF00            <2> 	cmp ax, 255
  9884 00007BAC 7501                <2> 	jne nostopshowfont
  9885 00007BAE C3                  <2> 	ret
  9886                              <2> nostopshowfont:
  9887 00007BAF 55                  <2> 	push ebp
  9888 00007BB0 66890D[9D7B0000]    <2> 	mov [posyvesa], cx
  9889 00007BB7 663D0A00            <2> 	cmp ax, 10
  9890 00007BBB 0F8424000000        <2> 	je near goodvesafontx
  9891 00007BC1 31C9                <2> 	xor ecx, ecx
  9892 00007BC3 668B0D[4D5C0000]    <2> 	mov cx, [resolutionx2]
  9893 00007BCA 6639CA              <2> 	cmp dx, cx
  9894 00007BCD 7616                <2> 	jbe goodvesafontx
  9895 00007BCF 6631D2              <2> 	xor dx, dx
  9896 00007BD2 668B0D[9D7B0000]    <2> 	mov cx, [posyvesa]
  9897 00007BD9 6681C11000          <2> 	add cx, 16
  9898 00007BDE 66890D[9D7B0000]    <2> 	mov [posyvesa], cx
  9899                              <2> goodvesafontx:
  9900 00007BE5 668B0D[9D7B0000]    <2> 	mov cx, [posyvesa]
  9901 00007BEC 668915[9B7B0000]    <2> 	mov [posxvesa], dx
  9902 00007BF3 8B3D[755B0000]      <2> 	mov edi, [physbaseptr]
  9903 00007BF9 66891D[9F7B0000]    <2> 	mov [colorfont], bx
  9904 00007C00 668B2D[9F7B0000]    <2> 	mov bp, [colorfont]
  9905 00007C07 31DB                <2> 	xor ebx, ebx
  9906 00007C09 6689C3              <2> 	mov bx, ax
  9907 00007C0C 31C0                <2> 	xor eax, eax
  9908 00007C0E 6689D8              <2> 	mov ax, bx
  9909 00007C11 6689D3              <2> 	mov bx, dx
  9910 00007C14 89DA                <2> 	mov edx, ebx
  9911 00007C16 31DB                <2> 	xor ebx, ebx
  9912 00007C18 6681F90000          <2> 	cmp cx, 0
  9913 00007C1D 7414                <2> 	je vesaposloopdn
  9914 00007C1F 668B1D[4D5C0000]    <2> 	mov bx, [resolutionx2]
  9915                              <2> vesaposloop:
  9916 00007C26 52                  <2> 	push edx
  9917 00007C27 50                  <2> 	push eax
  9918 00007C28 31C0                <2> 	xor eax, eax
  9919 00007C2A 6689C8              <2> 	mov ax, cx
  9920 00007C2D F7E3                <2> 	mul ebx
  9921 00007C2F 01C7                <2> 	add edi, eax
  9922 00007C31 58                  <2> 	pop eax
  9923 00007C32 5A                  <2> 	pop edx
  9924                              <2> vesaposloopdn:
  9925 00007C33 01D7                <2> 	add edi, edx
  9926 00007C35 BE[86920000]        <2> 	mov esi, fonts
  9927                              <2> findfontvesa:
  9928 00007C3A 663D0A00            <2> 	cmp ax, 10
  9929 00007C3E 0F84EB000000        <2> 	je near nwlinevesa
  9930 00007C44 C1E004              <2> 	shl eax, 4
  9931 00007C47 01C6                <2> 	add esi, eax
  9932 00007C49 C1E804              <2> 	shr eax, 4
  9933 00007C4C 81FE[86920300]      <2> 	cmp esi, fontend
  9934 00007C52 0F83AB000000        <2> 	jae near donefontvesa
  9935 00007C58 4E                  <2> 	dec esi
  9936                              <2> foundfontvesa:
  9937 00007C59 46                  <2> 	inc esi
  9938 00007C5A 803D[06830000]01    <2> 	cmp byte [savefonton], 1
  9939 00007C61 0F84EA000000        <2> 	je near vesafontsaver
  9940 00007C67 30C9                <2> 	xor cl, cl
  9941 00007C69 8A06                <2> 	mov al, [esi]
  9942 00007C6B 668B15[4D5C0000]    <2> 	mov dx, [resolutionx2]
  9943 00007C72 662B15[9B7B0000]    <2> 	sub dx, [posxvesa]
  9944 00007C79 6681FA1000          <2> 	cmp dx, 16
  9945 00007C7E 7708                <2> 	ja paintfontvesa
  9946 00007C80 D0EA                <2> 	shr dl, 1
  9947 00007C82 8815[2E7D0000]      <2> 	mov [charwidth], dl
  9948                              <2> paintfontvesa:
  9949 00007C88 B201                <2> 	mov dl, 1
  9950 00007C8A 20C2                <2> 	and dl, al
  9951 00007C8C 803D[05830000]01    <2> 	cmp byte [showcursorfonton], 1
  9952 00007C93 0F842E000000        <2> 	je near nodelpaintedfont
  9953 00007C99 803D[05830000]02    <2> 	cmp byte [showcursorfonton], 2
  9954 00007CA0 0F8511000000        <2> 	jne near noswitchcursorfonton
  9955 00007CA6 80FA00              <2> 	cmp dl, 0
  9956 00007CA9 0F8420000000        <2> 	je near nopixelset
  9957 00007CAF 66892F              <2> 	mov [edi], bp
  9958 00007CB2 E918000000          <2> 	jmp nopixelset
  9959                              <2> noswitchcursorfonton:
  9960 00007CB7 3215[07830000]      <2> 	xor dl, [mouseselecton]
  9961 00007CBD 668B1D[C5740000]    <2> 	mov bx, [background]
  9962 00007CC4 66891F              <2> 	mov [edi], bx
  9963                              <2> nodelpaintedfont:
  9964 00007CC7 80FA00              <2> 	cmp dl, 0
  9965 00007CCA 7403                <2> 	je nopixelset
  9966 00007CCC 66892F              <2> 	mov [edi], bp
  9967                              <2> nopixelset:
  9968 00007CCF 81C702000000        <2> 	add edi, 2
  9969 00007CD5 D0C0                <2> 	rol al, 1
  9970 00007CD7 FEC1                <2> 	inc cl
  9971 00007CD9 3A0D[2E7D0000]      <2> 	cmp cl, [charwidth]
  9972 00007CDF 72A7                <2> 	jb paintfontvesa
  9973 00007CE1 FEC5                <2> 	inc ch
  9974 00007CE3 31D2                <2> 	xor edx, edx
  9975 00007CE5 668B15[4D5C0000]    <2> 	mov dx, [resolutionx2]
  9976 00007CEC 01D7                <2> 	add edi, edx
  9977 00007CEE 31D2                <2> 	xor edx, edx
  9978 00007CF0 8A15[2E7D0000]      <2> 	mov dl, [charwidth]
  9979 00007CF6 00D2                <2> 	add dl, dl
  9980 00007CF8 29D7                <2> 	sub edi, edx
  9981 00007CFA 80FD10              <2> 	cmp ch, 16
  9982 00007CFD 0F8256FFFFFF        <2> 	jb foundfontvesa
  9983                              <2> donefontvesa:
  9984 00007D03 C605[2E7D0000]08    <2> 	mov byte [charwidth], 8
  9985 00007D0A 668B15[9B7B0000]    <2> 	mov dx, [posxvesa]
  9986 00007D11 8A1D[2E7D0000]      <2> 	mov bl, [charwidth]
  9987 00007D17 30FF                <2> 	xor bh, bh
  9988 00007D19 6601DA              <2> 	add dx, bx
  9989 00007D1C 6689EB              <2> 	mov bx, bp
  9990 00007D1F 668B0D[9D7B0000]    <2> 	mov cx, [posyvesa]
  9991 00007D26 883D[06830000]      <2> 	mov [savefonton], bh
  9992 00007D2C 5D                  <2> 	pop ebp
  9993 00007D2D C3                  <2> 	ret
  9994 00007D2E 08                  <2> charwidth db 8
  9995                              <2> nwlinevesa:
  9996 00007D2F 6631D2              <2> 	xor dx, dx
  9997 00007D32 668915[9B7B0000]    <2> 	mov [posxvesa], dx
  9998 00007D39 668B0D[9D7B0000]    <2> 	mov cx, [posyvesa]
  9999 00007D40 6681C11000          <2> 	add cx, 16
 10000 00007D45 66890D[9D7B0000]    <2> 	mov [posyvesa], cx
 10001 00007D4C E9B2FFFFFF          <2> 	jmp donefontvesa
 10002                              <2> vesafontsaver:
 10003 00007D51 30C0                <2> 	xor al, al
 10004 00007D53 30C9                <2> 	xor cl, cl
 10005                              <2> vesafontsaver2:
 10006 00007D55 66392F              <2> 	cmp [edi], bp
 10007 00007D58 742F                <2> 	je colorfontmatch
 10008                              <2> donecolormatch:
 10009 00007D5A 81C702000000        <2> 	add edi, 2
 10010 00007D60 D0C0                <2> 	rol al, 1
 10011 00007D62 FEC1                <2> 	inc cl
 10012 00007D64 80F908              <2> 	cmp cl, 8
 10013 00007D67 72EC                <2> 	jb vesafontsaver2
 10014 00007D69 8806                <2> 	mov [esi], al
 10015 00007D6B 46                  <2> 	inc esi
 10016 00007D6C FEC5                <2> 	inc ch
 10017 00007D6E 31D2                <2> 	xor edx, edx
 10018 00007D70 668B15[4D5C0000]    <2> 	mov dx, [resolutionx2]
 10019 00007D77 01D7                <2> 	add edi, edx
 10020 00007D79 81EF10000000        <2> 	sub edi, 16
 10021 00007D7F 80FD10              <2> 	cmp ch, 16
 10022 00007D82 72CD                <2> 	jb vesafontsaver
 10023 00007D84 E97AFFFFFF          <2> 	jmp donefontvesa
 10024                              <2> colorfontmatch:
 10025 00007D89 0401                <2> 	add al, 1
 10026 00007D8B E9CAFFFFFF          <2> 	jmp donecolormatch
 10027                              <1> %include "source/gui/window.asm"
 10028 00007D90 0000                <2> winvcopystx dw 0
 10029 00007D92 0000                <2> winvcopysty dw 0
 10030 00007D94 0000                <2> winvcopydx dw 0
 10031 00007D96 0000                <2> winvcopycx dw 0
 10032 00007D98 FFFF0000            <2> windowcolor dw 0xFFFF,0
 10033 00007D9C 00000000            <2> windowbufloc: dd 0
 10034 00007DA0 00000000            <2> windowvideobuf dd 0
 10035 00007DA4 00000000            <2> windowvideobuf2 dd 0
 10036 00007DA8 00000000            <2> windowinfobuf dd 0
 10037 00007DAC 0000                <2> termcol dw 0
 10038 00007DAE 00000000            <2> wincopyendpos dd 0
 10039                              <2> 
 10040                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
 10041 00007DB2 C605[0A240000]01    <2> 		mov byte [termguion], 1
 10042 00007DB9 6681C11000          <2> 		add cx, 16
 10043 00007DBE 668915[907D0000]    <2> 		mov [winvcopystx], dx
 10044 00007DC5 66890D[927D0000]    <2> 		mov [winvcopysty], cx
 10045 00007DCC 8935[A87D0000]      <2> 		mov [windowinfobuf], esi
 10046 00007DD2 668B16              <2> 		mov dx, [esi]
 10047 00007DD5 668B4E02            <2> 		mov cx, [esi + 2]
 10048 00007DD9 31C0                <2> 		xor eax, eax
 10049 00007DDB 31DB                <2> 		xor ebx, ebx
 10050 00007DDD 6689D0              <2> 		mov ax, dx
 10051 00007DE0 6689CB              <2> 		mov bx, cx
 10052 00007DE3 66C1E803            <2> 		shr ax, 3
 10053 00007DE7 66C1EB04            <2> 		shr bx, 4
 10054 00007DEB 66A3[AC7D0000]      <2> 		mov [termcol], ax
 10055 00007DF1 A2[0B260000]        <2> 		mov [charxy], al
 10056 00007DF6 881D[0C260000]      <2> 		mov [charxy + 1], bl
 10057 00007DFC 8B7E04              <2> 		mov edi, [esi + 4]
 10058 00007DFF 893D[987D0000]      <2> 		mov [windowcolor], edi
 10059 00007E05 8B7E0C              <2> 		mov edi, [esi + 12]
 10060 00007E08 893D[A47D0000]      <2> 		mov [windowvideobuf2], edi
 10061 00007E0E 8B7E08              <2> 		mov edi, [esi + 8]
 10062 00007E11 893D[A07D0000]      <2> 		mov [windowvideobuf], edi
 10063 00007E17 81FB00000000        <2> 		cmp ebx, 0
 10064 00007E1D 0F84C1040000        <2> 		je near donewincopynow
 10065                              <2> 	findendposwin:
 10066 00007E23 C1E002              <2> 		shl eax, 2
 10067 00007E26 31D2                <2> 		xor edx, edx
 10068 00007E28 F7E3                <2> 		mul ebx
 10069 00007E2A 01C7                <2> 		add edi, eax
 10070 00007E2C 893D[AE7D0000]      <2> 		mov [wincopyendpos], edi
 10071 00007E32 31FF                <2> 		xor edi, edi
 10072 00007E34 6631C0              <2> 		xor ax, ax
 10073 00007E37 6631DB              <2> 		xor bx, bx
 10074 00007E3A 6601D2              <2> 		add dx, dx
 10075 00007E3D 668915[947D0000]    <2> 		mov [winvcopydx], dx
 10076 00007E44 66890D[967D0000]    <2> 		mov [winvcopycx], cx
 10077 00007E4B 668B0D[927D0000]    <2> 		mov cx, [winvcopysty]
 10078 00007E52 6681E91000          <2> 		sub cx, 16
 10079 00007E57 668B15[907D0000]    <2> 		mov dx, [winvcopystx]
 10080 00007E5E C605[0B240000]00    <2> 		mov byte [termcopyon], 0
 10081 00007E65 B403                <2> 		mov ah, 3
 10082 00007E67 E81F0A0000          <2> 		call graphicsadd
 10083                              <2> 	showwindow2:
 10084 00007E6C 6681C11000          <2> 		add cx, 16
 10085 00007E71 668915[907D0000]    <2> 		mov [winvcopystx], dx
 10086 00007E78 66890D[927D0000]    <2> 		mov [winvcopysty], cx
 10087 00007E7F 668B16              <2> 		mov dx, [esi]
 10088 00007E82 668B4E02            <2> 		mov cx, [esi + 2]
 10089 00007E86 6601D2              <2> 		add dx, dx
 10090 00007E89 668915[947D0000]    <2> 		mov [winvcopydx], dx
 10091 00007E90 66890D[967D0000]    <2> 		mov [winvcopycx], cx
 10092 00007E97 E818000000          <2> 		call reloadwindowtitle
 10093 00007E9C 803D[72880000]01    <2> 		cmp byte [windrag], 1
 10094 00007EA3 0F834A040000        <2> 		jae near forgetresetstuff
 10095 00007EA9 8B3D[9C7D0000]      <2> 		mov edi, [windowbufloc]
 10096 00007EAF E96E020000          <2> 		jmp windowvideocopyset
 10097                              <2> 		
 10098                              <2> 	reloadwindowtitle:
 10099 00007EB4 8B3D[9C7D0000]      <2> 		mov edi, [windowbufloc]
 10100 00007EBA 31D2                <2> 		xor edx, edx
 10101 00007EBC 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
 10102 00007EC3 C1E204              <2> 		shl edx, 4
 10103 00007EC6 29D7                <2> 		sub edi, edx
 10104 00007EC8 803D[0B240000]00    <2> 		cmp byte [termcopyon], 0
 10105 00007ECF 7532                <2> 		jne nocleartitlebarpos
 10106 00007ED1 8B3D[755B0000]      <2> 		mov edi, [physbaseptr]
 10107 00007ED7 31D2                <2> 		xor edx, edx
 10108 00007ED9 668B15[907D0000]    <2> 		mov dx, [winvcopystx]
 10109 00007EE0 01D7                <2> 		add edi, edx
 10110 00007EE2 31C9                <2> 		xor ecx, ecx
 10111 00007EE4 668B0D[927D0000]    <2> 		mov cx, [winvcopysty]
 10112 00007EEB 6681E91000          <2> 		sub cx, 16
 10113 00007EF0 6681F90000          <2> 		cmp cx, 0
 10114 00007EF5 740C                <2> 		je nocleartitlebarpos
 10115                              <2> 	cleartitlebarpos:
 10116 00007EF7 31C0                <2> 		xor eax, eax
 10117 00007EF9 66A1[4D5C0000]      <2> 		mov ax, [resolutionx2]
 10118 00007EFF F7E1                <2> 		mul ecx
 10119 00007F01 01C7                <2> 		add edi, eax
 10120                              <2> 	nocleartitlebarpos:
 10121 00007F03 66B91000            <2> 		mov cx, 16
 10122 00007F07 668B15[947D0000]    <2> 		mov dx, [winvcopydx]
 10123 00007F0E 6681F90000          <2> 		cmp cx, 0
 10124 00007F13 0F8448000000        <2> 		je near canceltitlebarput
 10125 00007F19 6681FA0000          <2> 		cmp dx, 0
 10126 00007F1E 0F843D000000        <2> 		je near canceltitlebarput
 10127                              <2> 	titlebarput:
 10128 00007F24 66A1[987D0000]      <2> 		mov ax, [windowcolor]
 10129 00007F2A 668907              <2> 		mov [edi], ax
 10130 00007F2D 6681EA0200          <2> 		sub dx, 2
 10131 00007F32 81C702000000        <2> 		add edi, 2
 10132 00007F38 6681FA0000          <2> 		cmp dx, 0
 10133 00007F3D 75E5                <2> 		jne titlebarput
 10134 00007F3F 31D2                <2> 		xor edx, edx
 10135 00007F41 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
 10136 00007F48 6649                <2> 		dec cx
 10137 00007F4A 662B15[947D0000]    <2> 		sub dx, [winvcopydx]
 10138 00007F51 01D7                <2> 		add edi, edx
 10139 00007F53 668B15[947D0000]    <2> 		mov dx, [winvcopydx]
 10140 00007F5A 6681F90000          <2> 		cmp cx, 0
 10141 00007F5F 75C3                <2> 		jne titlebarput
 10142                              <2> 	canceltitlebarput:
 10143 00007F61 893D[9C7D0000]      <2> 		mov [windowbufloc], edi
 10144 00007F67 803D[0B240000]02    <2> 		cmp byte [termcopyon], 2
 10145 00007F6E 0F841C010000        <2> 		je near winvcpst
 10146 00007F74 668B1D[C5740000]    <2> 		mov bx, [background]
 10147 00007F7B 6653                <2> 		push bx
 10148 00007F7D 6631DB              <2> 		xor bx, bx
 10149 00007F80 66891D[C5740000]    <2> 		mov [background], bx
 10150 00007F87 6631C0              <2> 		xor ax, ax
 10151 00007F8A 81C610000000        <2> 		add esi, 16
 10152 00007F90 668B15[907D0000]    <2> 		mov dx, [winvcopystx]
 10153 00007F97 668B0D[927D0000]    <2> 		mov cx, [winvcopysty]
 10154 00007F9E 6681E91000          <2> 		sub cx, 16
 10155 00007FA3 668B1D[987D0000]    <2> 		mov bx, [windowcolor]
 10156 00007FAA C605[07830000]01    <2> 		mov byte [mouseselecton], 1
 10157 00007FB1 E876FBFFFF          <2> 		call showstring2	;Show window title
 10158 00007FB6 8B35[1A2D0000]      <2> 		mov esi, [usercache]
 10159 00007FBC 6681C21000          <2> 		add dx, 16
 10160 00007FC1 C605[07830000]01    <2> 		mov byte [mouseselecton], 1
 10161 00007FC8 E85FFBFFFF          <2> 		call showstring2	;Show user name
 10162 00007FCD BE[F78F0000]        <2> 		mov esi, computer
 10163 00007FD2 C605[07830000]01    <2> 		mov byte [mouseselecton], 1
 10164 00007FD9 E84EFBFFFF          <2> 		call showstring2	;Show computer name
 10165 00007FDE 66B85800            <2> 		mov ax, "X"
 10166 00007FE2 66BB00F8            <2> 		mov bx, 1111100000000000b
 10167 00007FE6 668B15[907D0000]    <2> 		mov dx, [winvcopystx]
 10168 00007FED 668B0D[927D0000]    <2> 		mov cx, [winvcopysty]
 10169 00007FF4 6681E91000          <2> 		sub cx, 16
 10170 00007FF9 6681EA1000          <2> 		sub dx, 16
 10171 00007FFE 660315[947D0000]    <2> 		add dx, [winvcopydx]
 10172 00008005 C605[07830000]01    <2> 		mov byte [mouseselecton], 1
 10173 0000800C 663B15[4D5C0000]    <2> 		cmp dx, [resolutionx2]
 10174 00008013 7305                <2> 		jae .nox
 10175 00008015 E88EFBFFFF          <2> 		call showfontvesa
 10176                              <2> .nox:
 10177 0000801A 668B1D[C5740000]    <2> 		mov bx, [background]
 10178 00008021 6681EA1800          <2> 		sub dx, 24
 10179 00008026 66B82B00            <2> 		mov ax, "+"
 10180 0000802A 66BBE007            <2> 		mov bx, 0000011111100000b
 10181 0000802E C605[07830000]01    <2> 		mov byte [mouseselecton], 1
 10182 00008035 663B15[4D5C0000]    <2> 		cmp dx, [resolutionx2]
 10183 0000803C 7305                <2> 		jae .noplus
 10184 0000803E E865FBFFFF          <2> 		call showfontvesa
 10185                              <2> .noplus:
 10186 00008043 6681EA1800          <2> 		sub dx, 24
 10187 00008048 66B82D00            <2> 		mov ax, "-"
 10188 0000804C 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10189 00008050 C605[07830000]01    <2> 		mov byte [mouseselecton], 1
 10190 00008057 663B15[4D5C0000]    <2> 		cmp dx, [resolutionx2]
 10191 0000805E 7305                <2> 		jae .nominus
 10192 00008060 E843FBFFFF          <2> 		call showfontvesa
 10193                              <2> .nominus:
 10194 00008065 6681EA1800          <2> 		sub dx, 24
 10195 0000806A 66B83F00            <2> 		mov ax, "?"
 10196 0000806E 66BB1F00            <2> 		mov bx, 0000000000011111b
 10197 00008072 C605[07830000]01    <2> 		mov byte [mouseselecton], 1
 10198 00008079 663B15[4D5C0000]    <2> 		cmp dx, [resolutionx2]
 10199 00008080 7305                <2> 		jae .noquestion
 10200 00008082 E821FBFFFF          <2> 		call showfontvesa
 10201                              <2> .noquestion:
 10202 00008087 665B                <2> 		pop bx
 10203 00008089 66891D[C5740000]    <2> 		mov [background], bx
 10204                              <2> 	winvcpst:
 10205 00008090 C3                  <2> 		ret
 10206                              <2> 
 10207                              <2> 	windowvideocopy:
 10208 00008091 8B35[A87D0000]      <2> 		mov esi, [windowinfobuf]
 10209 00008097 668B16              <2> 		mov dx, [esi]
 10210 0000809A 668B4E02            <2> 		mov cx, [esi + 2]
 10211 0000809E 8B7E04              <2> 		mov edi, [esi + 4]
 10212 000080A1 893D[987D0000]      <2> 		mov [windowcolor], edi
 10213 000080A7 8B7E08              <2> 		mov edi, [esi + 8]
 10214 000080AA 8B5E0C              <2> 		mov ebx, [esi + 12]
 10215 000080AD 893D[A07D0000]      <2> 		mov [windowvideobuf], edi
 10216 000080B3 891D[A47D0000]      <2> 		mov [windowvideobuf2], ebx
 10217 000080B9 31C0                <2> 		xor eax, eax
 10218 000080BB 31DB                <2> 		xor ebx, ebx
 10219 000080BD 6689D0              <2> 		mov ax, dx
 10220 000080C0 6689CB              <2> 		mov bx, cx
 10221 000080C3 66C1E803            <2> 		shr ax, 3
 10222 000080C7 66C1EB04            <2> 		shr bx, 4
 10223 000080CB 66A3[AC7D0000]      <2> 		mov [termcol], ax
 10224 000080D1 A2[0B260000]        <2> 		mov [charxy], al
 10225 000080D6 881D[0C260000]      <2> 		mov [charxy + 1], bl
 10226 000080DC 8B3D[9C7D0000]      <2> 		mov edi, [windowbufloc]
 10227 000080E2 3B3D[755B0000]      <2> 		cmp edi, [physbaseptr]
 10228 000080E8 0F8334000000        <2> 		jae near windowvideocopyset
 10229 000080EE 31C9                <2> 		xor ecx, ecx
 10230 000080F0 31D2                <2> 		xor edx, edx
 10231 000080F2 668B15[907D0000]    <2> 		mov dx, [winvcopystx]
 10232 000080F9 668B0D[927D0000]    <2> 		mov cx, [winvcopysty]
 10233 00008100 8B3D[755B0000]      <2> 		mov edi, [physbaseptr]
 10234 00008106 01D7                <2> 		add edi, edx
 10235 00008108 81F900000000        <2> 		cmp ecx, 0
 10236 0000810E 7412                <2> 		je windowvideocopyset
 10237                              <2> 	yrescopylp:
 10238 00008110 31C0                <2> 		xor eax, eax
 10239 00008112 66A1[4D5C0000]      <2> 		mov ax, [resolutionx2]
 10240 00008118 F7E1                <2> 		mul ecx
 10241 0000811A 01C7                <2> 		add edi, eax
 10242 0000811C 893D[9C7D0000]      <2> 		mov [windowbufloc], edi
 10243                              <2> 	windowvideocopyset:
 10244 00008122 6631C9              <2> 		xor cx, cx
 10245 00008125 6649                <2> 		dec cx
 10246 00008127 66890D[FB820000]    <2> 		mov [charposline], cx
 10247 0000812E 89FE                <2> 		mov esi, edi
 10248 00008130 81EE10000000        <2> 		sub esi, 16
 10249 00008136 31D2                <2> 		xor edx, edx
 10250 00008138 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
 10251 0000813F C1E204              <2> 		shl edx, 4
 10252 00008142 01D6                <2> 		add esi, edx
 10253 00008144 8B3D[A07D0000]      <2> 		mov edi, [windowvideobuf]
 10254 0000814A 81EF04000000        <2> 		sub edi, 4
 10255 00008150 893D[FD820000]      <2> 		mov [charposvbuf], edi
 10256 00008156 E97C000000          <2> 		jmp nextcharwin
 10257                              <2> 	win.write:	;adjusted this to use alpha
 10258                              <2> 				;5R, 6G, 5B
 10259                              <2> %ifdef gui.alphablending
 10260                              <2> 		push esi
 10261                              <2> 		push bx
 10262                              <2> 		push cx
 10263                              <2> 		push dx
 10264                              <2> %ifdef gui.background
 10265                              <2> 		mov esi, edi
 10266                              <2> 		sub esi, [physbaseptr]
 10267                              <2> 		add esi, [backgroundimage]
 10268                              <2> 		cmp dword [backgroundimage], 0
 10269                              <2> 		jne .red
 10270                              <2> %endif
 10271                              <2> 		mov esi, background
 10272                              <2> 	.red:
 10273                              <2> 		mov cx, [esi]
 10274                              <2> 		shr cx, 11
 10275                              <2> 		mov bx, ax
 10276                              <2> 		shr bx, 11
 10277                              <2> 		add cx, bx
 10278                              <2> 		add cx, bx
 10279                              <2> 		add cx, bx
 10280                              <2> 		shr cx, 2
 10281                              <2> 		shl cx, 11
 10282                              <2> 		mov dx, cx
 10283                              <2> 	.green:
 10284                              <2> 		mov cx, [esi]
 10285                              <2> 		shl cx, 5
 10286                              <2> 		shr cx, 10
 10287                              <2> 		mov bx, ax
 10288                              <2> 		shl bx, 5
 10289                              <2> 		shr bx, 10
 10290                              <2> 		add cx, bx
 10291                              <2> 		add cx, bx
 10292                              <2> 		add cx, bx
 10293                              <2> 		shr cx, 2
 10294                              <2> 		shl cx, 5
 10295                              <2> 		add dx, cx
 10296                              <2> 	.blue:
 10297                              <2> 		mov cx, [esi]
 10298                              <2> 		shl cx, 11
 10299                              <2> 		shr cx, 11
 10300                              <2> 		mov bx, ax
 10301                              <2> 		shl bx, 11
 10302                              <2> 		shr bx, 11
 10303                              <2> 		add cx, bx
 10304                              <2> 		add cx, bx
 10305                              <2> 		add cx, bx
 10306                              <2> 		shr cx, 2
 10307                              <2> 		add dx, cx
 10308                              <2> 		mov [edi], dx
 10309                              <2> 		pop dx
 10310                              <2> 		pop cx
 10311                              <2> 		pop bx
 10312                              <2> 		pop esi
 10313                              <2> %else
 10314 0000815B 668907              <2> 		mov [edi], ax
 10315                              <2> %endif
 10316 0000815E C3                  <2> 		ret
 10317                              <2> 	copywindow:
 10318 0000815F B201                <2> 		mov dl, 1
 10319 00008161 D0C6                <2> 		rol dh, 1
 10320 00008163 20F2                <2> 		and dl, dh
 10321 00008165 66813D[997B0000]80- <2> 		cmp word [colorcache], 0x80
 10322 0000816D 00                  <2>
 10323 0000816E 7320                <2> 		jae switchwincolors
 10324 00008170 66A1[9A7D0000]      <2> 		mov ax, [windowcolor + 2]
 10325 00008176 E8E0FFFFFF          <2> 		call win.write
 10326 0000817B 80FA00              <2> 		cmp dl, 0
 10327 0000817E 742B                <2> 		je nowritewin
 10328 00008180 66A1[987D0000]      <2> 		mov ax, [windowcolor]
 10329 00008186 E8D0FFFFFF          <2> 		call win.write
 10330 0000818B E91B000000          <2> 		jmp nowritewin
 10331                              <2> 	switchwincolors:
 10332 00008190 66A1[987D0000]      <2> 		mov ax, [windowcolor]
 10333 00008196 E8C0FFFFFF          <2> 		call win.write
 10334 0000819B 80FA00              <2> 		cmp dl, 0
 10335 0000819E 740B                <2> 		je nowritewin
 10336 000081A0 66A1[9A7D0000]      <2> 		mov ax, [windowcolor + 2]
 10337 000081A6 E8B0FFFFFF          <2> 		call win.write
 10338                              <2> 	nowritewin:
 10339 000081AB 81C702000000        <2> 		add edi, 2
 10340 000081B1 FEC1                <2> 		inc cl
 10341 000081B3 80F908              <2> 		cmp cl, 8
 10342 000081B6 75A7                <2> 		jne copywindow
 10343 000081B8 43                  <2> 		inc ebx
 10344 000081B9 30C9                <2> 		xor cl, cl
 10345 000081BB 31D2                <2> 		xor edx, edx
 10346 000081BD 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
 10347 000081C4 01D6                <2> 		add esi, edx
 10348 000081C6 89F7                <2> 		mov edi, esi
 10349 000081C8 8AB3[86920000]      <2> 		mov dh, [fonts + ebx]
 10350 000081CE D0CE                <2> 		ror dh, 1
 10351 000081D0 FEC5                <2> 		inc ch
 10352 000081D2 80FD10              <2> 		cmp ch, 16
 10353 000081D5 7588                <2> 		jne copywindow
 10354                              <2> 	nextcharwin:
 10355 000081D7 6631C9              <2> 		xor cx, cx
 10356 000081DA 8B3D[FD820000]      <2> 		mov edi, [charposvbuf]
 10357 000081E0 81C704000000        <2> 		add edi, 4
 10358 000081E6 3B3D[AE7D0000]      <2> 		cmp edi, [wincopyendpos]
 10359 000081EC 0F83F2000000        <2> 		jae near donewincopynow
 10360 000081F2 668B5F02            <2> 		mov bx, [edi + 2]
 10361 000081F6 6681FB0000          <2> 		cmp bx, 0
 10362 000081FB 7508                <2> 		jne nofixcolorwin
 10363 000081FD 66BB0700            <2> 		mov bx, 7
 10364 00008201 66895F02            <2> 		mov [edi + 2], bx
 10365                              <2> 	nofixcolorwin:
 10366 00008205 66891D[997B0000]    <2> 		mov [colorcache], bx
 10367 0000820C 8B1F                <2> 		mov ebx, [edi]
 10368 0000820E 893D[FD820000]      <2> 		mov [charposvbuf], edi
 10369 00008214 813D[A47D0000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10370 0000821C 0000                <2>
 10371 0000821E 7455                <2> 		je noskipcharcopy
 10372 00008220 2B3D[A07D0000]      <2> 		sub edi, [windowvideobuf]
 10373 00008226 033D[A47D0000]      <2> 		add edi, [windowvideobuf2]
 10374 0000822C 8B07                <2> 		mov eax, [edi]
 10375 0000822E 39D8                <2> 		cmp eax, ebx
 10376 00008230 7543                <2> 		jne noskipcharcopy
 10377                              <2> 	skipcharcopy:
 10378 00008232 81C610000000        <2> 		add esi, 16
 10379 00008238 668B0D[FB820000]    <2> 		mov cx, [charposline]
 10380 0000823F 6641                <2> 		inc cx
 10381 00008241 66890D[FB820000]    <2> 		mov [charposline], cx
 10382 00008248 663B0D[AC7D0000]    <2> 		cmp cx, [termcol]
 10383 0000824F 7286                <2> 		jb nextcharwin
 10384 00008251 6631C9              <2> 		xor cx, cx
 10385 00008254 66890D[FB820000]    <2> 		mov [charposline], cx
 10386 0000825B 31D2                <2> 		xor edx, edx
 10387 0000825D 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
 10388 00008264 C1E204              <2> 		shl edx, 4
 10389 00008267 662B15[947D0000]    <2> 		sub dx, [winvcopydx]
 10390 0000826E 01D6                <2> 		add esi, edx
 10391 00008270 E962FFFFFF          <2> 		jmp nextcharwin
 10392                              <2> 	noskipcharcopy:
 10393 00008275 891F                <2> 		mov [edi], ebx
 10394 00008277 8B3D[FD820000]      <2> 		mov edi, [charposvbuf]
 10395 0000827D C1E310              <2> 		shl ebx, 16
 10396 00008280 C1EB0C              <2> 		shr ebx, 12
 10397 00008283 31D2                <2> 		xor edx, edx
 10398 00008285 668B15[4D5C0000]    <2> 		mov dx, [resolutionx2]
 10399 0000828C C1E204              <2> 		shl edx, 4
 10400 0000828F 29D6                <2> 		sub esi, edx
 10401 00008291 81C610000000        <2> 		add esi, 16
 10402 00008297 89F7                <2> 		mov edi, esi
 10403 00008299 668B0D[FB820000]    <2> 		mov cx, [charposline]
 10404 000082A0 6641                <2> 		inc cx
 10405 000082A2 663B0D[AC7D0000]    <2> 		cmp cx, [termcol]
 10406 000082A9 7317                <2> 		jae fixwindowcopy
 10407 000082AB 66890D[FB820000]    <2> 		mov [charposline], cx
 10408 000082B2 6631C9              <2> 		xor cx, cx
 10409 000082B5 8AB3[86920000]      <2> 		mov dh, [fonts + ebx]
 10410 000082BB D0CE                <2> 		ror dh, 1
 10411 000082BD E99DFEFFFF          <2> 		jmp copywindow
 10412                              <2> fixwindowcopy:
 10413 000082C2 6631C9              <2> 		xor cx, cx
 10414 000082C5 66890D[FB820000]    <2> 		mov [charposline], cx
 10415 000082CC 662B15[947D0000]    <2> 		sub dx, [winvcopydx]
 10416 000082D3 01D6                <2> 		add esi, edx
 10417 000082D5 89F7                <2> 		mov edi, esi
 10418 000082D7 8AB3[86920000]      <2> 		mov dh, [fonts + ebx]
 10419 000082DD D0CE                <2> 		ror dh, 1
 10420 000082DF E97BFEFFFF          <2> 		jmp copywindow
 10421                              <2> donewincopynow:
 10422 000082E4 803D[0B240000]01    <2> 		cmp byte [termcopyon], 1
 10423 000082EB 7506                <2> 		jne forgetresetstuff
 10424 000082ED E806A7FFFF          <2> 		call switchtermcursor
 10425 000082F2 61                  <2> 		popa
 10426                              <2> forgetresetstuff:
 10427 000082F3 C605[0B240000]00    <2> 		mov byte [termcopyon], 0
 10428 000082FA C3                  <2> 		ret
 10429                              <2> 		
 10430 000082FB 0000                <2> charposline dw 0
 10431 000082FD 00000000            <2> charposvbuf dw 0,0
 10432                              <1> 				
 10433 00008301 00                  <1> copygui db 0
 10434 00008302 00                  <1> graphicsset db 0
 10435 00008303 0000                <1> graphicspos db 0,0
 10436 00008305 00                  <1> showcursorfonton db 0
 10437 00008306 00                  <1> savefonton db 0
 10438 00008307 00                  <1> mouseselecton db 0
 10439                              <1> 
 10440 00008308 00                  <1> pbutton db 0
 10441 00008309 00                  <1> pLBUTTON db 0
 10442 0000830A 00                  <1> pRBUTTON db 0
 10443 0000830B 00000000            <1> dragging dw 0,0
 10444 0000830F 0000000000000000    <1> lastpos dw 0,0,0,0
 10445 00008317 00000000            <1> colorbuf dw 0,0
 10446                              <1> 	
 10447                              <1> 	clickicon:
 10448 0000831B B001                <1> 		mov al, 1
 10449 0000831D A2[08830000]        <1> 		mov [pbutton], al
 10450 00008322 A0[09830000]        <1> 		mov al, [pLBUTTON]
 10451 00008327 2205[545F0000]      <1> 		and al, [LBUTTON]
 10452 0000832D 8A25[0A830000]      <1> 		mov ah, [pRBUTTON]
 10453 00008333 2225[555F0000]      <1> 		and ah, [RBUTTON]
 10454 00008339 08E0                <1> 		or al, ah
 10455 0000833B 3C00                <1> 		cmp al, 0
 10456 0000833D 741B                <1> 		je nodragclick
 10457 0000833F 813D[0B830000]0100- <1> 		cmp dword [dragging], 1
 10458 00008347 0000                <1>
 10459 00008349 732F                <1> 		jae dragclick
 10460 0000834B C705[0B830000]0100- <1> 		mov dword [dragging], 1
 10461 00008353 0000                <1>
 10462 00008355 E920000000          <1> 		jmp dragclick
 10463                              <1> 	nodragclick:
 10464 0000835A 31C0                <1> 		xor eax, eax
 10465 0000835C A3[0B830000]        <1> 		mov dword [dragging], eax
 10466 00008361 A2[08830000]        <1> 		mov [pbutton], al
 10467 00008366 A0[545F0000]        <1> 		mov al, [LBUTTON]
 10468 0000836B A2[09830000]        <1> 		mov [pLBUTTON], al
 10469 00008370 A0[555F0000]        <1> 		mov al, [RBUTTON]
 10470 00008375 A2[0A830000]        <1> 		mov [pRBUTTON], al
 10471                              <1> 	dragclick:
 10472 0000837A 6631C0              <1> 		xor ax, ax
 10473 0000837D BE[9DD20300]        <1> 		mov esi, graphicstable
 10474 00008382 C705[618B0000]0000- <1> 		mov dword [codepointer], 0
 10475 0000838A 0000                <1>
 10476                              <1> 	clicon2:
 10477 0000838C 31D2                <1> 		xor edx, edx
 10478 0000838E 31C9                <1> 		xor ecx, ecx
 10479 00008390 66813E0100          <1> 		cmp word [esi], 1
 10480 00008395 0F841B000000        <1> 		je near iconselect
 10481 0000839B 66813E0200          <1> 		cmp word [esi], 2
 10482 000083A0 0F8472010000        <1> 		je near textselected
 10483 000083A6 66813E0300          <1> 		cmp word [esi], 3
 10484 000083AB 0F84CA020000        <1> 		je near windowselect
 10485 000083B1 E913040000          <1> 		jmp nexticonsel
 10486                              <1> 	iconselect:
 10487 000083B6 668B5606            <1> 		mov dx, [esi + 6]
 10488 000083BA 6689D0              <1> 		mov ax, dx
 10489 000083BD 668B4E08            <1> 		mov cx, [esi + 8]
 10490 000083C1 6689CB              <1> 		mov bx, cx
 10491 000083C4 6681C32000          <1> 		add bx, 32
 10492 000083C9 6601D0              <1> 		add ax, dx
 10493 000083CC 813D[0B830000]0100- <1> 		cmp dword [dragging], 1
 10494 000083D4 0000                <1>
 10495 000083D6 746F                <1> 		je dragicon
 10496 000083D8 813D[0B830000]0000- <1> 		cmp dword [dragging], 0
 10497 000083E0 0000                <1>
 10498 000083E2 7411                <1> 		je nodragiconcheck
 10499 000083E4 3935[0B830000]      <1> 		cmp dword [dragging], esi
 10500 000083EA 0F85D9030000        <1> 		jne near nexticonsel
 10501 000083F0 E952000000          <1> 		jmp dragicon
 10502                              <1> 	nodragiconcheck:
 10503 000083F5 663905[435E0000]    <1> 		cmp [mousecursorposition], ax
 10504 000083FC 0F82C7030000        <1> 		jb near nexticonsel
 10505 00008402 66054000            <1> 		add ax, 64
 10506 00008406 663905[435E0000]    <1> 		cmp [mousecursorposition], ax
 10507 0000840D 0F87B6030000        <1> 		ja near nexticonsel
 10508 00008413 6629D0              <1> 		sub ax, dx
 10509 00008416 66390D[455E0000]    <1> 		cmp [mousecursorposition + 2], cx
 10510 0000841D 0F82A6030000        <1> 		jb near nexticonsel
 10511 00008423 66391D[455E0000]    <1> 		cmp [mousecursorposition + 2], bx
 10512 0000842A 0F8799030000        <1> 		ja near nexticonsel
 10513 00008430 668B460A            <1> 		mov ax, [esi + 10]
 10514 00008434 66250100            <1> 		and ax, 1
 10515 00008438 663D0100            <1> 		cmp ax, 1
 10516 0000843C 0F84B6000000        <1> 		je near unselecticon
 10517 00008442 E98D000000          <1> 		jmp nodragicon
 10518                              <1> 	dragicon:
 10519 00008447 663905[3F5E0000]    <1> 		cmp [lastmouseposition], ax
 10520 0000844E 0F8275030000        <1> 		jb near nexticonsel
 10521 00008454 66054000            <1> 		add ax, 64
 10522 00008458 663905[3F5E0000]    <1> 		cmp [lastmouseposition], ax
 10523 0000845F 0F8764030000        <1> 		ja near nexticonsel
 10524 00008465 6629D0              <1> 		sub ax, dx
 10525 00008468 66390D[415E0000]    <1> 		cmp [lastmouseposition + 2], cx
 10526 0000846F 0F8254030000        <1> 		jb near nexticonsel
 10527 00008475 66391D[415E0000]    <1> 		cmp [lastmouseposition + 2], bx
 10528 0000847C 0F8747030000        <1> 		ja near nexticonsel
 10529 00008482 668B460A            <1> 		mov ax, [esi + 10]
 10530 00008486 2410                <1> 		and al, 00010000b
 10531 00008488 3C10                <1> 		cmp al, 00010000b
 10532 0000848A 7448                <1> 		je nodragicon
 10533 0000848C 8935[0B830000]      <1> 		mov [dragging], esi
 10534 00008492 66D1E2              <1> 		shl dx, 1
 10535 00008495 662B15[3F5E0000]    <1> 		sub dx, [lastmouseposition]
 10536 0000849C 660315[435E0000]    <1> 		add dx, [mousecursorposition]
 10537 000084A3 66D1EA              <1> 		shr dx, 1
 10538 000084A6 66030D[455E0000]    <1> 		add cx, [mousecursorposition + 2]
 10539 000084AD 662B0D[415E0000]    <1> 		sub cx, [lastmouseposition + 2]
 10540 000084B4 663B15[4D5C0000]    <1> 		cmp dx, [resolutionx2]
 10541 000084BB 7607                <1> 		jbe chkyresdrgicn
 10542 000084BD 668B15[435E0000]    <1> 		mov dx, [mousecursorposition]
 10543                              <1> 	chkyresdrgicn:
 10544 000084C4 663B0D[615B0000]    <1> 		cmp cx, [resolutiony]
 10545 000084CB 7607                <1> 		jbe nodragicon
 10546 000084CD 668B0D[455E0000]    <1> 		mov cx, [mousecursorposition + 2]
 10547                              <1> 	nodragicon:
 10548 000084D4 66814E0A0100        <1> 		or word [esi + 10], 1
 10549 000084DA 8B5E0C              <1> 		mov ebx, [esi + 12]
 10550 000084DD 668B460A            <1> 		mov ax, [esi + 10]
 10551 000084E1 8B7602              <1> 		mov esi, [esi + 2]
 10552 000084E4 C705[618B0000]0000- <1> 		mov dword [codepointer], 0
 10553 000084EC 0000                <1>
 10554 000084EE E885EDFFFF          <1> 		call showicon
 10555 000084F3 E9EA020000          <1> 		jmp doneiconsel
 10556                              <1> 	unselecticon:
 10557 000084F8 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10558 000084FE 8B5E0C              <1> 		mov ebx, [esi + 12]
 10559 00008501 668B460A            <1> 		mov ax, [esi + 10]
 10560 00008505 8B7602              <1> 		mov esi, [esi + 2]
 10561 00008508 891D[618B0000]      <1> 		mov [codepointer], ebx
 10562 0000850E E865EDFFFF          <1> 		call showicon
 10563 00008513 E9CA020000          <1> 		jmp doneiconsel
 10564                              <1> 	textselected:
 10565 00008518 8B5E02              <1> 		mov ebx, [esi + 2]
 10566 0000851B 668B5606            <1> 		mov dx, [esi + 6]
 10567 0000851F 6689D0              <1> 		mov ax, dx
 10568 00008522 668B4E08            <1> 		mov cx, [esi + 8]
 10569                              <1> 	lengthtesttext:
 10570 00008526 803B00              <1> 		cmp byte [ebx], 0
 10571 00008529 740A                <1> 		je donetesttextlength
 10572 0000852B 43                  <1> 		inc ebx
 10573 0000852C 66051000            <1> 		add ax, 16
 10574 00008530 E9F1FFFFFF          <1> 		jmp lengthtesttext
 10575                              <1> 	donetesttextlength:
 10576 00008535 6689CB              <1> 		mov bx, cx
 10577 00008538 6681C30F00          <1> 		add bx, 15
 10578 0000853D 813D[0B830000]0100- <1> 		cmp dword [dragging], 1
 10579 00008545 0000                <1>
 10580 00008547 7468                <1> 		je dragtext
 10581 00008549 813D[0B830000]0000- <1> 		cmp dword [dragging], 0
 10582 00008551 0000                <1>
 10583 00008553 7411                <1> 		je nodragtextcheck
 10584 00008555 3935[0B830000]      <1> 		cmp dword [dragging], esi
 10585 0000855B 0F8568020000        <1> 		jne near nexticonsel
 10586 00008561 E94B000000          <1> 		jmp dragtext
 10587                              <1> 	nodragtextcheck:
 10588 00008566 663915[435E0000]    <1> 		cmp [mousecursorposition], dx
 10589 0000856D 0F8256020000        <1> 		jb near nexticonsel
 10590 00008573 663905[435E0000]    <1> 		cmp [mousecursorposition], ax
 10591 0000857A 0F8749020000        <1> 		ja near nexticonsel
 10592 00008580 66390D[455E0000]    <1> 		cmp [mousecursorposition + 2], cx
 10593 00008587 0F823C020000        <1> 		jb near nexticonsel
 10594 0000858D 66391D[455E0000]    <1> 		cmp [mousecursorposition + 2], bx
 10595 00008594 0F872F020000        <1> 		ja near nexticonsel
 10596 0000859A 668B460A            <1> 		mov ax, [esi + 10]
 10597 0000859E 66250100            <1> 		and ax, 1
 10598 000085A2 663D0100            <1> 		cmp ax, 1
 10599 000085A6 0F84AB000000        <1> 		je near unselecttext
 10600 000085AC E986000000          <1> 		jmp nodragtext
 10601                              <1> 	dragtext:
 10602 000085B1 663915[3F5E0000]    <1> 		cmp [lastmouseposition], dx
 10603 000085B8 0F820B020000        <1> 		jb near nexticonsel
 10604 000085BE 663905[3F5E0000]    <1> 		cmp [lastmouseposition], ax
 10605 000085C5 0F87FE010000        <1> 		ja near nexticonsel
 10606 000085CB 66390D[415E0000]    <1> 		cmp [lastmouseposition + 2], cx
 10607 000085D2 0F82F1010000        <1> 		jb near nexticonsel
 10608 000085D8 66391D[415E0000]    <1> 		cmp [lastmouseposition + 2], bx
 10609 000085DF 0F87E4010000        <1> 		ja near nexticonsel
 10610 000085E5 668B460A            <1> 		mov ax, [esi + 10]
 10611 000085E9 2410                <1> 		and al, 00010000b
 10612 000085EB 663D1000            <1> 		cmp ax, 00010000b
 10613 000085EF 0F8442000000        <1> 		je near nodragtext
 10614 000085F5 8935[0B830000]      <1> 		mov [dragging], esi
 10615 000085FB 662B15[3F5E0000]    <1> 		sub dx, [lastmouseposition]
 10616 00008602 660315[435E0000]    <1> 		add dx, [mousecursorposition]
 10617 00008609 66030D[455E0000]    <1> 		add cx, [mousecursorposition + 2]
 10618 00008610 662B0D[415E0000]    <1> 		sub cx, [lastmouseposition + 2]
 10619 00008617 663B15[4D5C0000]    <1> 		cmp dx, [resolutionx2]
 10620 0000861E 7607                <1> 		jbe chkyresdrgtxt
 10621 00008620 668B15[435E0000]    <1> 		mov dx, [mousecursorposition]
 10622                              <1> 	chkyresdrgtxt:
 10623 00008627 663B0D[615B0000]    <1> 		cmp cx, [resolutiony]
 10624 0000862E 7607                <1> 		jbe nodragtext
 10625 00008630 668B0D[455E0000]    <1> 		mov cx, [mousecursorposition + 2]
 10626                              <1> 	nodragtext:
 10627 00008637 66814E0A0100        <1> 		or word [esi + 10], 1
 10628 0000863D 8B5E0C              <1> 		mov ebx, [esi + 12]
 10629 00008640 891D[618B0000]      <1> 		mov [codepointer], ebx
 10630 00008646 668B460A            <1> 		mov ax, [esi + 10]
 10631 0000864A 8B7602              <1> 		mov esi, [esi + 2]
 10632 0000864D E8C7F4FFFF          <1> 		call showstring
 10633 00008652 E98B010000          <1> 		jmp doneiconsel
 10634                              <1> 	unselecttext:
 10635 00008657 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10636 0000865D 8B5E0C              <1> 		mov ebx, [esi + 12]
 10637 00008660 668B460A            <1> 		mov ax, [esi + 10]
 10638 00008664 8B7602              <1> 		mov esi, [esi + 2]
 10639 00008667 C705[618B0000]0000- <1> 		mov dword [codepointer], 0
 10640 0000866F 0000                <1>
 10641 00008671 E8A3F4FFFF          <1> 		call showstring
 10642 00008676 E967010000          <1> 		jmp doneiconsel
 10643                              <1> windowselect:
 10644 0000867B 8B7E02              <1> 		mov edi, [esi + 2]
 10645 0000867E 668B5606            <1> 		mov dx, [esi + 6]
 10646 00008682 6689D0              <1> 		mov ax, dx
 10647 00008685 668B4E08            <1> 		mov cx, [esi + 8]
 10648 00008689 6689CB              <1> 		mov bx, cx
 10649 0000868C 6681C31000          <1> 		add bx, 16
 10650 00008691 813D[0B830000]0100- <1> 		cmp dword [dragging], 1
 10651 00008699 0000                <1>
 10652 0000869B 746D                <1> 		je dragwin
 10653 0000869D 813D[0B830000]0000- <1> 		cmp dword [dragging], 0
 10654 000086A5 0000                <1>
 10655 000086A7 7411                <1> 		je nodragwincheck
 10656 000086A9 3935[0B830000]      <1> 		cmp dword [dragging], esi
 10657 000086AF 0F8514010000        <1> 		jne near nexticonsel
 10658 000086B5 E950000000          <1> 		jmp dragwin
 10659                              <1> 	nodragwincheck:
 10660 000086BA 663905[435E0000]    <1> 		cmp [mousecursorposition], ax
 10661 000086C1 0F8202010000        <1> 		jb near nexticonsel
 10662 000086C7 660307              <1> 		add ax, [edi]
 10663 000086CA 660307              <1> 		add ax, [edi]
 10664 000086CD 663905[435E0000]    <1> 		cmp [mousecursorposition], ax
 10665 000086D4 0F87EF000000        <1> 		ja near nexticonsel
 10666 000086DA 66390D[455E0000]    <1> 		cmp [mousecursorposition + 2], cx
 10667 000086E1 0F82E2000000        <1> 		jb near nexticonsel
 10668 000086E7 66391D[455E0000]    <1> 		cmp [mousecursorposition + 2], bx
 10669 000086EE 0F87D5000000        <1> 		ja near nexticonsel
 10670 000086F4 662D1400            <1> 		sub ax, 20
 10671 000086F8 663905[435E0000]    <1> 		cmp [mousecursorposition], ax
 10672 000086FF 0F87A4000000        <1> 		ja near killwin
 10673 00008705 E98B000000          <1> 		jmp nodragwin
 10674                              <1> 	dragwin:
 10675 0000870A 663905[3F5E0000]    <1> 		cmp [lastmouseposition], ax
 10676 00008711 0F82B2000000        <1> 		jb near nexticonsel
 10677 00008717 660307              <1> 		add ax, [edi]
 10678 0000871A 660307              <1> 		add ax, [edi]
 10679 0000871D 663905[3F5E0000]    <1> 		cmp [lastmouseposition], ax
 10680 00008724 0F879F000000        <1> 		ja near nexticonsel
 10681 0000872A 66390D[415E0000]    <1> 		cmp [lastmouseposition + 2], cx
 10682 00008731 0F8292000000        <1> 		jb near nexticonsel
 10683 00008737 66391D[415E0000]    <1> 		cmp [lastmouseposition + 2], bx
 10684 0000873E 0F8785000000        <1> 		ja near nexticonsel
 10685 00008744 8935[0B830000]      <1> 		mov [dragging], esi
 10686 0000874A 803D[72880000]01    <1> 		cmp byte [windrag], 1
 10687 00008751 7706                <1> 		ja .nochangewindrag
 10688 00008753 FE05[72880000]      <1> 		inc byte [windrag]
 10689                              <1> 	.nochangewindrag:
 10690 00008759 662B15[3F5E0000]    <1> 		sub dx, [lastmouseposition]
 10691 00008760 660315[435E0000]    <1> 		add dx, [mousecursorposition]
 10692 00008767 66030D[455E0000]    <1> 		add cx, [mousecursorposition + 2]
 10693 0000876E 662B0D[415E0000]    <1> 		sub cx, [lastmouseposition + 2]
 10694 00008775 663B15[4D5C0000]    <1> 		cmp dx, [resolutionx2]
 10695 0000877C 7607                <1> 		jbe chkyresdrgwin
 10696 0000877E 668B15[435E0000]    <1> 		mov dx, [mousecursorposition]
 10697                              <1> 	chkyresdrgwin:
 10698 00008785 663B0D[615B0000]    <1> 		cmp cx, [resolutiony]
 10699 0000878C 7607                <1> 		jbe nodragwin
 10700 0000878E 668B0D[455E0000]    <1> 		mov cx, [mousecursorposition + 2]
 10701                              <1> 	nodragwin:
 10702 00008795 8B5E0C              <1> 		mov ebx, [esi + 12]
 10703 00008798 668B460A            <1> 		mov ax, [esi + 10]
 10704 0000879C 8B7602              <1> 		mov esi, [esi + 2]
 10705 0000879F E80EF6FFFF          <1> 		call showwindow
 10706 000087A4 E939000000          <1> 		jmp doneiconsel
 10707                              <1> 	killwin:
 10708 000087A9 66C7060000          <1> 		mov word [esi], 0
 10709 000087AE C605[0A240000]00    <1> 		mov byte [termguion], 0
 10710 000087B5 E8BFECFFFF          <1> 		call guiclear
 10711 000087BA E80AEDFFFF          <1> 		call reloadallgraphics
 10712 000087BF E851EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10713 000087C4 E92AE6FFFF          <1> 		jmp guistart
 10714                              <1> 	nexticonsel:
 10715 000087C9 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10716 000087CF 81C610000000        <1> 		add esi, 16
 10717 000087D5 81FE[9DD40300]      <1> 		cmp esi, graphicstableend
 10718 000087DB 7305                <1> 		jae doneiconsel
 10719 000087DD E9AAFBFFFF          <1> 		jmp clicon2
 10720                              <1> 	doneiconsel:
 10721 000087E2 813D[0B830000]0100- <1> 		cmp dword [dragging], 1
 10722 000087EA 0000                <1>
 10723 000087EC 731A                <1> 		jae doneiconsel2
 10724 000087EE A2[72880000]        <1> 		mov [windrag], al
 10725 000087F3 813D[618B0000]0000- <1> 		cmp dword [codepointer], 0
 10726 000087FB 0000                <1>
 10727 000087FD 7409                <1> 		je doneiconsel2
 10728 000087FF 8B1D[618B0000]      <1> 		mov ebx, [codepointer]
 10729 00008805 FFD3                <1> 		call ebx
 10730 00008807 C3                  <1> 		ret
 10731                              <1> 	doneiconsel2:
 10732 00008808 A0[545F0000]        <1> 		mov al, [LBUTTON]
 10733 0000880D A2[09830000]        <1> 		mov [pLBUTTON], al
 10734 00008812 A0[555F0000]        <1> 		mov al, [RBUTTON]
 10735 00008817 A2[0A830000]        <1> 		mov [pRBUTTON], al
 10736 0000881C 813D[0B830000]0100- <1> 		cmp dword [dragging], 1
 10737 00008824 0000                <1>
 10738 00008826 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10739 0000882C E8E4E9FFFF          <1> 		call switchmousepos2
 10740 00008831 803D[72880000]01    <1> 		cmp byte [windrag], 1
 10741 00008838 7305                <1> 		jae noclearcursorcl
 10742 0000883A E81EE9FFFF          <1> 		call clearmousecursor
 10743                              <1> noclearcursorcl:
 10744 0000883F E885ECFFFF          <1> 		call reloadallgraphics
 10745                              <1> noreloadgraphicsclick:
 10746 00008844 30E4                <1> 		xor ah, ah
 10747 00008846 31C9                <1> 		xor ecx, ecx
 10748 00008848 31D2                <1> 		xor edx, edx
 10749 0000884A B001                <1> 		mov al, 1
 10750 0000884C 668B15[435E0000]    <1> 		mov dx, [mousecursorposition]
 10751 00008853 668B0D[455E0000]    <1> 		mov cx, [mousecursorposition + 2]
 10752 0000885A 66BBE738            <1> 		mov bx, 0011100011100111b
 10753 0000885E C605[05830000]01    <1> 		mov byte [showcursorfonton], 1
 10754 00008865 E83EF3FFFF          <1> 		call showfontvesa
 10755 0000886A C605[05830000]00    <1> 		mov byte [showcursorfonton], 0
 10756 00008871 C3                  <1> 		ret
 10757 00008872 00                  <1> windrag db 0
 10758 00008873 00000000            <1> lastdrag dw 0,0
 10759 00008877 00000000            <1> grpctblpos dw 0,0
 10760                              <1> 
 10761                              <1> 
 10762                              <1> 
 10763 0000887B 00<rept>            <1> grphbuf times 16 db 0
 10764                              <1> 	graphicsadd:
 10765 0000888B BF[9DD20300]        <1> 		mov edi, graphicstable
 10766                              <1> 	shwgrph1:
 10767 00008890 397702              <1> 		cmp dword [edi + 2], esi
 10768 00008893 7417                <1> 		je showgraphicsreplace2
 10769 00008895 81C710000000        <1> 		add edi, 16
 10770 0000889B 81FF[9DD40300]      <1> 		cmp edi, graphicstableend
 10771 000088A1 0F833A020000        <1> 		jae near showgraphicsnew
 10772 000088A7 E9E4FFFFFF          <1> 		jmp shwgrph1
 10773                              <1> 	showgraphicsreplace2:
 10774 000088AC 8935[7D880000]      <1> 		mov [grphbuf + 2], esi
 10775 000088B2 668915[81880000]    <1> 		mov [grphbuf + 6], dx
 10776 000088B9 66890D[83880000]    <1> 		mov [grphbuf + 8], cx
 10777 000088C0 891D[87880000]      <1> 		mov [grphbuf + 12], ebx
 10778 000088C6 30FF                <1> 		xor bh, bh
 10779 000088C8 88E3                <1> 		mov bl, ah
 10780 000088CA 30E4                <1> 		xor ah, ah
 10781 000088CC 66A3[85880000]      <1> 		mov [grphbuf + 10], ax	
 10782 000088D2 66891D[7B880000]    <1> 		mov [grphbuf], bx
 10783 000088D9 66A1[7B880000]      <1> 		mov ax, [grphbuf]
 10784 000088DF 663D0100            <1> 		cmp ax, 1
 10785 000088E3 0F8419000000        <1> 		je near replaceicon
 10786 000088E9 663D0200            <1> 		cmp ax, 2
 10787 000088ED 0F8493000000        <1> 		je near replacestring
 10788 000088F3 663D0300            <1> 		cmp ax, 3
 10789 000088F7 0F840F010000        <1> 		je near replacewindow
 10790 000088FD E9BC010000          <1> 		jmp showgraphicsreplace
 10791                              <1> 	replaceicon:
 10792 00008902 893D[0F830000]      <1> 		mov [lastpos], edi
 10793 00008908 8935[13830000]      <1> 		mov [lastpos + 4], esi
 10794 0000890E 8B7702              <1> 		mov esi, [edi + 2]
 10795 00008911 668B5F0C            <1> 		mov bx, [edi + 12]
 10796 00008915 668B5706            <1> 		mov dx, [edi + 6]
 10797 00008919 668B4F08            <1> 		mov cx, [edi + 8]
 10798 0000891D 668B06              <1> 		mov ax, [esi]
 10799 00008920 66A3[17830000]      <1> 		mov [colorbuf], ax
 10800 00008926 66A1[C5740000]      <1> 		mov ax, [background]
 10801 0000892C 668906              <1> 		mov [esi], ax
 10802 0000892F 8B5F0C              <1> 		mov ebx, [edi + 12]
 10803 00008932 668B470A            <1> 		mov ax, [edi + 10]
 10804 00008936 2401                <1> 		and al, 1
 10805 00008938 A2[658B0000]        <1> 		mov [iconselected], al
 10806 0000893D 668B470A            <1> 		mov ax, [edi + 10]
 10807 00008941 E845E9FFFF          <1> 		call showicon2
 10808 00008946 8B3D[0F830000]      <1> 		mov edi, [lastpos]
 10809 0000894C 8B7702              <1> 		mov esi, [edi + 2]
 10810 0000894F 66A1[17830000]      <1> 		mov ax, [colorbuf]
 10811 00008955 668906              <1> 		mov [esi], ax
 10812 00008958 8B35[13830000]      <1> 		mov esi, [lastpos + 4]
 10813 0000895E 668B15[81880000]    <1> 		mov dx, [grphbuf + 6]
 10814 00008965 668B0D[83880000]    <1> 		mov cx, [grphbuf + 8]
 10815 0000896C 668B1D[7B880000]    <1> 		mov bx, [grphbuf]
 10816 00008973 66A1[85880000]      <1> 		mov ax, [grphbuf + 10]
 10817 00008979 88DC                <1> 		mov ah, bl
 10818 0000897B 8B1D[87880000]      <1> 		mov ebx, [grphbuf + 12]
 10819 00008981 E938010000          <1> 		jmp showgraphicsreplace
 10820                              <1> 	replacestring:
 10821 00008986 893D[0F830000]      <1> 		mov [lastpos], edi
 10822 0000898C 8935[13830000]      <1> 		mov [lastpos + 4], esi
 10823 00008992 8B5F0C              <1> 		mov ebx, [edi + 12]
 10824 00008995 8B7702              <1> 		mov esi, [edi + 2]
 10825 00008998 668B5706            <1> 		mov dx, [edi + 6]
 10826 0000899C 668B4F08            <1> 		mov cx, [edi + 8]
 10827 000089A0 66A1[977B0000]      <1> 		mov ax, [colorfont2]
 10828 000089A6 66A3[17830000]      <1> 		mov [colorbuf], ax
 10829 000089AC 66A1[C5740000]      <1> 		mov ax, [background]
 10830 000089B2 66A3[977B0000]      <1> 		mov [colorfont2], ax		
 10831 000089B8 8B5F0C              <1> 		mov ebx, [edi + 12]
 10832 000089BB 668B470A            <1> 		mov ax, [edi + 10]
 10833 000089BF 2401                <1> 		and al, 1
 10834 000089C1 A2[07830000]        <1> 		mov [mouseselecton], al
 10835 000089C6 668B470A            <1> 		mov ax, [edi + 10]
 10836 000089CA E85DF1FFFF          <1> 		call showstring2
 10837 000089CF 66A1[17830000]      <1> 		mov ax, [colorbuf]
 10838 000089D5 66A3[977B0000]      <1> 		mov [colorfont2], ax
 10839 000089DB 8B3D[0F830000]      <1> 		mov edi, [lastpos]
 10840 000089E1 8B7702              <1> 		mov esi, [edi + 2]
 10841 000089E4 668B15[81880000]    <1> 		mov dx, [grphbuf + 6]
 10842 000089EB 668B0D[83880000]    <1> 		mov cx, [grphbuf + 8]
 10843 000089F2 668B1D[7B880000]    <1> 		mov bx, [grphbuf]
 10844 000089F9 66A1[85880000]      <1> 		mov ax, [grphbuf + 10]
 10845 000089FF 88DC                <1> 		mov ah, bl
 10846 00008A01 8B1D[87880000]      <1> 		mov ebx, [grphbuf + 12]
 10847 00008A07 E9B2000000          <1> 		jmp showgraphicsreplace
 10848                              <1> 	replacewindow:
 10849 00008A0C 893D[0F830000]      <1> 		mov [lastpos], edi
 10850 00008A12 8935[13830000]      <1> 		mov [lastpos + 4], esi
 10851 00008A18 8B7702              <1> 		mov esi, [edi + 2]
 10852 00008A1B 8B3D[9C7D0000]      <1> 		mov edi, [windowbufloc]
 10853 00008A21 31D2                <1> 		xor edx, edx
 10854 00008A23 668B15[4D5C0000]    <1> 		mov dx, [resolutionx2]
 10855 00008A2A C1E204              <1> 		shl edx, 4
 10856 00008A2D 29D7                <1> 		sub edi, edx
 10857 00008A2F 31D2                <1> 		xor edx, edx
 10858 00008A31 668B16              <1> 		mov dx, [esi]
 10859 00008A34 660316              <1> 		add dx, [esi]
 10860 00008A37 668B4E02            <1> 		mov cx, [esi + 2]
 10861 00008A3B 6681C11000          <1> 		add cx, 16
 10862 00008A40 66A1[C5740000]      <1> 		mov ax, [background]
 10863 00008A46 803D[72880000]01    <1> 		cmp byte [windrag], 1
 10864 00008A4D 7604                <1> 		jbe clearwindow
 10865 00008A4F 662B4E02            <1> 		sub cx, [esi + 2]
 10866                              <1> 	clearwindow:
 10867                              <1> 		%ifdef gui.background
 10868                              <1> 			cmp dword [backgroundimage], 0
 10869                              <1> 			je .noback
 10870                              <1> 			push esi
 10871                              <1> 			mov esi, [backgroundimage]
 10872                              <1> 			sub edi, [physbaseptr]
 10873                              <1> 			add esi, edi
 10874                              <1> 			add edi, [physbaseptr]
 10875                              <1> 			mov ax, [esi]
 10876                              <1> 			pop esi
 10877                              <1> 		.noback:
 10878                              <1> 		%endif
 10879 00008A53 668907              <1> 		mov [edi], ax
 10880 00008A56 81C702000000        <1> 		add edi, 2
 10881 00008A5C 81EA02000000        <1> 		sub edx, 2
 10882 00008A62 81FA00000000        <1> 		cmp edx, 0
 10883 00008A68 75E9                <1> 		jne clearwindow
 10884 00008A6A 6649                <1> 		dec cx
 10885 00008A6C 668B15[4D5C0000]    <1> 		mov dx, [resolutionx2]
 10886 00008A73 662B16              <1> 		sub dx, [esi]
 10887 00008A76 662B16              <1> 		sub dx, [esi]
 10888 00008A79 01D7                <1> 		add edi, edx
 10889 00008A7B 668B16              <1> 		mov dx, [esi]
 10890 00008A7E 660316              <1> 		add dx, [esi]
 10891 00008A81 6681F90000          <1> 		cmp cx, 0
 10892 00008A86 75CB                <1> 		jne clearwindow
 10893                              <1> 	endwindowclear:
 10894 00008A88 C605[0B240000]00    <1> 		mov byte [termcopyon], 0
 10895 00008A8F 8B3D[0F830000]      <1> 		mov edi, [lastpos]
 10896 00008A95 8B35[7D880000]      <1> 		mov esi, [grphbuf + 2]
 10897 00008A9B 668B15[81880000]    <1> 		mov dx, [grphbuf + 6]
 10898 00008AA2 668B0D[83880000]    <1> 		mov cx, [grphbuf + 8]
 10899 00008AA9 668B1D[7B880000]    <1> 		mov bx, [grphbuf]
 10900 00008AB0 66A1[85880000]      <1> 		mov ax, [grphbuf + 10]
 10901 00008AB6 88DC                <1> 		mov ah, bl
 10902 00008AB8 8B1D[87880000]      <1> 		mov ebx, [grphbuf + 12]
 10903                              <1> 	showgraphicsreplace:
 10904 00008ABE 897702              <1> 		mov [edi + 2], esi
 10905 00008AC1 66895706            <1> 		mov [edi + 6], dx
 10906 00008AC5 66894F08            <1> 		mov [edi + 8], cx
 10907 00008AC9 895F0C              <1> 		mov [edi + 12], ebx
 10908 00008ACC 30FF                <1> 		xor bh, bh
 10909 00008ACE 88E3                <1> 		mov bl, ah
 10910 00008AD0 30E4                <1> 		xor ah, ah
 10911 00008AD2 6689470A            <1> 		mov [edi + 10], ax
 10912 00008AD6 66891F              <1> 		mov [edi], bx
 10913 00008AD9 8B5F0C              <1> 		mov ebx, [edi + 12]
 10914 00008ADC 668B470A            <1> 		mov ax, [edi + 10]
 10915 00008AE0 C3                  <1> 		ret
 10916                              <1> 	showgraphicsnew:
 10917 00008AE1 BF[9DD20300]        <1> 		mov edi, graphicstable
 10918                              <1> 	shwgrph2:
 10919 00008AE6 66813F0000          <1> 		cmp word [edi], 0
 10920 00008AEB 74D1                <1> 		je showgraphicsreplace
 10921 00008AED 81C710000000        <1> 		add edi, 16
 10922 00008AF3 81FF[9DD40300]      <1> 		cmp edi, graphicstableend
 10923 00008AF9 72EB                <1> 		jb shwgrph2
 10924                              <1> 	showgraphicsdone:
 10925 00008AFB C3                  <1> 		ret
 10926                              <1> 	
 10927                              <1> putpixel: ;color in si, point is (dx,cx)
 10928                              <1> 		;destroys edi, ebx, eax
 10929 00008AFC 6650                <1> 	push ax
 10930 00008AFE 6653                <1> 	push bx
 10931 00008B00 31C0                <1> 	xor eax, eax
 10932 00008B02 31DB                <1> 	xor ebx, ebx
 10933 00008B04 31FF                <1> 	xor edi, edi
 10934 00008B06 668B1D[615B0000]    <1> 	mov bx, [resolutiony]
 10935 00008B0D 66A1[5F5B0000]      <1> 	mov ax, [resolutionx]
 10936 00008B13 6639C2              <1> 	cmp dx, ax
 10937 00008B16 7720                <1> 	ja .doneput
 10938 00008B18 66D1E0              <1> 	shl ax, 1
 10939 00008B1B 6639D9              <1> 	cmp cx, bx
 10940 00008B1E 7718                <1> 	ja .doneput
 10941 00008B20 6689CB              <1> 	mov bx, cx
 10942 00008B23 52                  <1> 	push edx
 10943 00008B24 F7E3                <1> 	mul ebx
 10944 00008B26 5A                  <1> 	pop edx
 10945 00008B27 6601D7              <1> 	add di, dx
 10946 00008B2A 6601D7              <1> 	add di, dx
 10947 00008B2D 01C7                <1> 	add edi, eax
 10948 00008B2F 033D[755B0000]      <1> 	add edi, [physbaseptr]
 10949 00008B35 668937              <1> 	mov [edi], si
 10950                              <1> .doneput:
 10951 00008B38 665B                <1> 	pop bx
 10952 00008B3A 6658                <1> 	pop ax
 10953 00008B3C C3                  <1> 	ret
 10954                              <1> 	
 10955                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10956 00008B3D 31FF                <1> 	xor edi, edi
 10957 00008B3F 31C0                <1> 	xor eax, eax
 10958 00008B41 31DB                <1> 	xor ebx, ebx
 10959 00008B43 668B1D[4D5C0000]    <1> 	mov bx, [resolutionx2]
 10960 00008B4A 6689D7              <1> 	mov di, dx
 10961 00008B4D 6601D7              <1> 	add di, dx
 10962 00008B50 6689C8              <1> 	mov ax, cx
 10963 00008B53 F7E3                <1> 	mul ebx
 10964 00008B55 01C7                <1> 	add edi, eax
 10965 00008B57 033D[755B0000]      <1> 	add edi, [physbaseptr]
 10966 00008B5D C3                  <1> 	ret
 10967                              <1> 
 10968 00008B5E 00                  <1> 	mouseon db 0
 10969 00008B5F 0000                <1> 	icon dw 0	;pointer to icon
 10970 00008B61 00000000            <1> 	codepointer dd 0 ;pointer to code
 10971 00008B65 00                  <1> 	iconselected db 0
 10972                                  %endif
 10973                                  %ifdef network.included
 10974                                  	%include "source/network.asm"
 10975                              <1> network.init:
 10976                              <1> %ifdef rtl8139.included
 10977                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10978                              <1> %endif
 10979                              <1> %ifdef rtl8169.included
 10980                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10981                              <1> %endif
 10982                              <1> %ifdef ne2000.included
 10983                              <1> 	%include "source/drivers/network/ne2000.asm"
 10984                              <2> ne2000:
 10985 00008B66 E805000000          <2> 	call .init
 10986 00008B6B E93C030000          <2> 	jmp .end
 10987                              <2> 
 10988                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10989                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10990                              <2> ;0	CR		CR		CR		CR		CR		CR
 10991                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10992                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10993                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10994                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10995                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10996                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10997                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10998                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10999                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 11000                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 11001                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 11002                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 11003                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 11004                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 11005                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 11006                              <2> .CR equ 0
 11007                              <2> 	.CR.STP	equ 1		;Stop
 11008                              <2> 	.CR.STA equ 2		;Start
 11009                              <2> 	.CR.TXP equ 4		;Transmit
 11010                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 11011                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 11012                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 11013                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 11014                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 11015                              <2> .PSTART equ 1
 11016                              <2> .PSTOP equ 2
 11017                              <2> .BNRY equ 3
 11018                              <2> .ISR equ 7
 11019                              <2> 	.ISR.PRX equ 1		;Packet Received
 11020                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 11021                              <2> 	.ISR.RXE equ 4		;Receive Error
 11022                              <2> 	.ISR.TXE equ 8		;Transmission Error
 11023                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 11024                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 11025                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 11026                              <2> 	.ISR.RST equ 0x80	;Reset status
 11027                              <2> .RSAR0 equ 8
 11028                              <2> .RSAR1 equ 9
 11029                              <2> .RBCR0 equ 0xA
 11030                              <2> .RBCR1 equ 0xB
 11031                              <2> .RCR equ 0xC
 11032                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 11033                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 11034                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 11035                              <2> 	.RCR.AM equ 8		;Accept Multicast
 11036                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 11037                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 11038                              <2> .DCR equ 0xE
 11039                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 11040                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 11041                              <2> 	.DCR.LAS equ 4		;Long Address Select
 11042                              <2> 	.DCR.LS equ 8		;Loopback Select
 11043                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 11044                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 11045                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 11046                              <2> .ASIC equ 0x10
 11047                              <2> .RESET equ 0x1F
 11048                              <2> 
 11049                              <2> .init:
 11050 00008B70 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 11051 00008B75 31C0                <2> 	xor eax, eax
 11052 00008B77 A2[C1680000]        <2> 	mov [pcifunction], al
 11053 00008B7C A2[BF680000]        <2> 	mov [pcibus], al
 11054 00008B81 A2[C0680000]        <2> 	mov [pcidevice], al
 11055 00008B86 B002                <2> 	mov al, 2 ;type code
 11056 00008B88 A2[56690000]        <2> 	mov [pcitype], al
 11057 00008B8D B8EC102980          <2> 	mov eax, 0x802910EC
 11058 00008B92 A3[C4680000]        <2> 	mov [pcidevid], eax
 11059 00008B97 E83CDDFFFF          <2> 	call getpciport
 11060 00008B9C 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 11061 00008BA2 7501                <2> 	jne .good0
 11062 00008BA4 C3                  <2> 	ret
 11063                              <2> .good0:
 11064 00008BA5 8915[6F8E0000]      <2> 	mov [.basenicaddr], edx
 11065 00008BAB 89D1                <2> 	mov ecx, edx
 11066                              <2> .test:
 11067 00008BAD E854000000          <2> 	call .reset
 11068 00008BB2 E87B000000          <2> 	call .stop
 11069 00008BB7 89CA                <2> 	mov edx, ecx
 11070 00008BB9 B9FF000000          <2> 	mov ecx, 0xFF
 11071 00008BBE E2FE                <2> 	loop $ ;wait for ~100 us
 11072 00008BC0 89D1                <2> 	mov ecx, edx
 11073 00008BC2 EC                  <2> 	in al, dx
 11074 00008BC3 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 11075 00008BC5 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 11076 00008BC7 7410                <2> 	je .good1
 11077 00008BC9 89CA                <2> 	mov edx, ecx
 11078 00008BCB 81C207000000        <2> 	add edx, .ISR
 11079 00008BD1 EC                  <2> 	in al, dx
 11080 00008BD2 2480                <2> 	and al, .ISR.RST
 11081 00008BD4 3C80                <2> 	cmp al, .ISR.RST
 11082 00008BD6 7401                <2> 	je .good1
 11083 00008BD8 C3                  <2> 	ret
 11084                              <2> .good1:
 11085 00008BD9 E877A6FFFF          <2> call showhex	;for debugging, please remove
 11086 00008BDE E85B000000          <2> 	call .setup
 11087 00008BE3 E86D030000          <2> call showmac
 11088 00008BE8 BE[748E0000]        <2> mov esi, .name
 11089 00008BED E87191FFFF          <2> call print
 11090 00008BF2 BE[7C8E0000]        <2> mov esi, .initmsg
 11091 00008BF7 E86791FFFF          <2> call print
 11092 00008BFC C605[738E0000]01    <2> 	mov byte [.nicconfig], 1
 11093 00008C03 31DB                <2> 	xor ebx, ebx
 11094 00008C05 C3                  <2> 	ret
 11095                              <2> .reset:
 11096 00008C06 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11097 00008C0C 81C21F000000        <2> 	add edx, .RESET
 11098 00008C12 EC                  <2> 	in al, dx
 11099 00008C13 EE                  <2> 	out dx, al ;write its contents to itself
 11100 00008C14 C3                  <2> 	ret
 11101                              <2> .page:
 11102 00008C15 66C1E00E            <2> 	shl ax, 14
 11103 00008C19 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11104 00008C1F EC                  <2> 	in al, dx
 11105 00008C20 243F                <2> 	and al, 00111111b
 11106 00008C22 08E0                <2> 	or al, ah
 11107 00008C24 EE                  <2> 	out dx, al
 11108 00008C25 C3                  <2> 	ret
 11109                              <2> .start:
 11110 00008C26 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11111 00008C2C B020                <2> 	mov al, .CR.RD2
 11112 00008C2E B002                <2> 	mov al, .CR.STA
 11113 00008C30 EE                  <2> 	out dx, al
 11114 00008C31 C3                  <2> 	ret
 11115                              <2> .stop:
 11116 00008C32 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11117 00008C38 B020                <2> 	mov al, .CR.RD2
 11118 00008C3A 0C01                <2> 	or al, .CR.STP
 11119 00008C3C EE                  <2> 	out dx, al
 11120 00008C3D C3                  <2> 	ret
 11121                              <2> .setup:
 11122 00008C3E E8EFFFFFFF          <2> 	call .stop
 11123 00008C43 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11124 00008C49 81C20E000000        <2> 	add edx, .DCR
 11125 00008C4F B040                <2> 	mov al, .DCR.FT1
 11126 00008C51 0C01                <2> 	or al, .DCR.WTS
 11127 00008C53 0C08                <2> 	or al, .DCR.LS
 11128 00008C55 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 11129 00008C56 E8B9000000          <2> 	call .getmac
 11130 00008C5B E8D2FFFFFF          <2> 	call .stop
 11131 00008C60 30C0                <2> 	xor al, al
 11132 00008C62 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11133 00008C68 81C20A000000        <2> 	add edx, .RBCR0
 11134 00008C6E EE                  <2> 	out dx, al
 11135 00008C6F 6642                <2> 	inc dx
 11136 00008C71 EE                  <2> 	out dx, al ;Clear byte count
 11137 00008C72 B800400000          <2> 	mov eax, 16*1024
 11138 00008C77 A3[8E8E0000]        <2> 	mov [.ringstart], eax
 11139 00008C7C C1E808              <2> 	shr eax, 8
 11140 00008C7F 66A3[8A8E0000]      <2> 	mov [.pagestart], ax
 11141 00008C85 0534000000          <2> 	add eax, 64-2*6
 11142 00008C8A A3[8C8E0000]        <2> 	mov [.pageend], eax
 11143 00008C8F C1E008              <2> 	shl eax, 8
 11144 00008C92 66A3[928E0000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 11145 00008C98 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11146 00008C9E 81C201000000        <2> 	add edx, .PSTART
 11147 00008CA4 A0[8A8E0000]        <2> 	mov al, [.pagestart]
 11148 00008CA9 EE                  <2> 	out dx, al
 11149 00008CAA A0[8C8E0000]        <2> 	mov al, [.pageend]
 11150 00008CAF 6642                <2> 	inc dx
 11151 00008CB1 EE                  <2> 	out dx, al
 11152 00008CB2 A0[8A8E0000]        <2> 	mov al, [.pagestart]
 11153 00008CB7 6642                <2> 	inc dx
 11154 00008CB9 EE                  <2> 	out dx, al
 11155 00008CBA E873FFFFFF          <2> 	call .stop
 11156                              <2> ;INSERT INTERRUPT ENABLE HERE
 11157 00008CBF B001                <2> 	mov al, 1
 11158 00008CC1 E84FFFFFFF          <2> 	call .page
 11159 00008CC6 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11160 00008CCC BF[9C8E0000]        <2> 	mov edi, .rom
 11161                              <2> .copymactocard:
 11162 00008CD1 42                  <2> 	inc edx
 11163 00008CD2 6E                  <2> 	outsb
 11164 00008CD3 81C702000000        <2> 	add edi, 2
 11165 00008CD9 81FA06000000        <2> 	cmp edx, 6
 11166 00008CDF 76F0                <2> 	jbe .copymactocard
 11167 00008CE1 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11168 00008CE7 81C207000000        <2> 	add edx, 7
 11169 00008CED A0[8A8E0000]        <2> 	mov al, [.pagestart]
 11170 00008CF2 FEC0                <2> 	inc al
 11171 00008CF4 EE                  <2> 	out dx, al ;set page in CURR register
 11172                              <2> ;INSERT MULTICAST INIT HERE
 11173 00008CF5 E838FFFFFF          <2> 	call .stop
 11174 00008CFA 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11175 00008D00 81C20C000000        <2> 	add edx, .RCR
 11176 00008D06 B004                <2> 	mov al, .RCR.AB
 11177 00008D08 EE                  <2> 	out dx, al ;accept broadcast
 11178 00008D09 6642                <2> 	inc dx
 11179 00008D0B 30C0                <2> 	xor al, al
 11180 00008D0D EE                  <2> 	out dx, al ;stop loopback
 11181 00008D0E E813FFFFFF          <2> 	call .start
 11182 00008D13 C3                  <2> 	ret
 11183                              <2> .getmac:
 11184 00008D14 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11185 00008D1A B020                <2> 	mov al, 0x20
 11186 00008D1C 0C02                <2> 	or al, 2
 11187 00008D1E EE                  <2> 	out dx, al	;set STA and RD2 bits
 11188 00008D1F 6681C20A00          <2> 	add dx, .RBCR0
 11189 00008D24 B010                <2> 	mov al, 16
 11190 00008D26 EE                  <2> 	out dx, al
 11191 00008D27 6642                <2> 	inc dx
 11192 00008D29 30C0                <2> 	xor al, al
 11193 00008D2B EE                  <2> 	out dx, al
 11194 00008D2C 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11195 00008D32 6681C20800          <2> 	add dx, .RSAR0
 11196 00008D37 EE                  <2> 	out dx, al
 11197 00008D38 6642                <2> 	inc dx
 11198 00008D3A EE                  <2> 	out dx, al
 11199 00008D3B 668B15[6F8E0000]    <2> 	mov dx, [.basenicaddr]
 11200 00008D42 B008                <2> 	mov al, 8
 11201 00008D44 0C02                <2> 	or al, 2
 11202 00008D46 EE                  <2> 	out dx, al
 11203 00008D47 668B15[6F8E0000]    <2> 	mov dx, [.basenicaddr]
 11204 00008D4E 6681C21000          <2> 	add dx, .ASIC
 11205 00008D53 B908000000          <2> 	mov ecx, 8
 11206 00008D58 BF[9C8E0000]        <2> 	mov edi, .rom
 11207 00008D5D F3666D              <2> 	rep insw
 11208                              <2> .copymac:
 11209 00008D60 BF[9C8E0000]        <2> 	mov edi, .rom
 11210 00008D65 BE[968E0000]        <2> 	mov esi, .mac
 11211 00008D6A B906000000          <2> 	mov ecx, 6
 11212                              <2> .lpmac:
 11213 00008D6F 8A07                <2> 	mov al, [edi]
 11214 00008D71 8806                <2> 	mov [esi], al
 11215 00008D73 81C702000000        <2> 	add edi, 2
 11216 00008D79 46                  <2> 	inc esi
 11217 00008D7A E2F3                <2> 	loop .lpmac
 11218 00008D7C B9[968E0000]        <2> 	mov ecx, .mac
 11219 00008D81 C3                  <2> 	ret
 11220                              <2> .sendpacket:
 11221 00008D82 803D[738E0000]00    <2> 	cmp byte [.nicconfig], 0
 11222 00008D89 7512                <2> 	jne .sendit
 11223 00008D8B 56                  <2> 	push esi
 11224 00008D8C 57                  <2> 	push edi
 11225 00008D8D E8DEFDFFFF          <2> 	call .init
 11226 00008D92 5F                  <2> 	pop edi
 11227 00008D93 5E                  <2> 	pop esi
 11228 00008D94 81FB00000000        <2> 	cmp ebx, 0
 11229 00008D9A 7401                <2> 	je .sendit
 11230 00008D9C C3                  <2> 	ret
 11231                              <2> .sendit: ;packet start in edi, end in esi
 11232 00008D9D 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 11233                              <2> 	;now the packet start is in esi, end in edi
 11234 00008D9F 8B0D[968E0000]      <2> 	mov ecx, [.mac]
 11235 00008DA5 894E06              <2> 	mov [esi + 6], ecx
 11236 00008DA8 668B0D[9A8E0000]    <2> 	mov cx, [.mac + 4]
 11237 00008DAF 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 11238 00008DB3 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11239 00008DB9 B020                <2> 	mov al, .CR.RD2
 11240 00008DBB 0C02                <2> 	or al, .CR.STA
 11241 00008DBD EE                  <2> 	out dx, al ;set RD2 and STA
 11242 00008DBE 81C207000000        <2> 	add edx, .ISR ; ISR
 11243 00008DC4 B040                <2> 	mov al, .ISR.RDC
 11244 00008DC6 EE                  <2> 	out dx, al ;set RDC flag
 11245 00008DC7 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11246 00008DCD 6681C20A00          <2> 	add dx, .RBCR0
 11247 00008DD2 89F8                <2> 	mov eax, edi
 11248 00008DD4 29F0                <2> 	sub eax, esi
 11249 00008DD6 BB01000000          <2> 	mov ebx, 1
 11250 00008DDB 21C3                <2> 	and ebx, eax
 11251 00008DDD 81FB01000000        <2> 	cmp ebx, 1
 11252 00008DE3 7501                <2> 	jne .nofixword
 11253 00008DE5 40                  <2> 	inc eax
 11254                              <2> .nofixword:
 11255 00008DE6 89C1                <2> 	mov ecx, eax ;save length in ecx
 11256 00008DE8 EE                  <2> 	out dx, al
 11257 00008DE9 86C4                <2> 	xchg al, ah
 11258 00008DEB 6642                <2> 	inc dx
 11259 00008DED EE                  <2> 	out dx, al ;send size
 11260 00008DEE 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11261 00008DF4 6681C20800          <2> 	add dx, .RSAR0
 11262 00008DF9 66A1[8A8E0000]      <2> 	mov ax, [.pagestart]
 11263 00008DFF C1E008              <2> 	shl eax, 8
 11264 00008E02 EE                  <2> 	out dx, al
 11265 00008E03 86C4                <2> 	xchg al, ah
 11266 00008E05 6642                <2> 	inc dx
 11267 00008E07 EE                  <2> 	out dx, al ;send address in NIC memory
 11268 00008E08 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11269 00008E0E B010                <2> 	mov al, .CR.RD1
 11270 00008E10 0C02                <2> 	or al, .CR.STA
 11271 00008E12 EE                  <2> 	out dx, al ;set RD and STA
 11272 00008E13 89CB                <2> 	mov ebx, ecx ;save length in ebx
 11273 00008E15 D1E9                <2> 	shr ecx, 1
 11274 00008E17 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11275 00008E1D 6681C21000          <2> 	add dx, 0x10
 11276 00008E22 F3666F              <2> 	rep outsw ;Send the packet data
 11277 00008E25 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11278 00008E2B 6681C20700          <2> 	add dx, .ISR
 11279                              <2> .chkcopylp:
 11280 00008E30 B440                <2> 	mov ah, .ISR.RDC
 11281 00008E32 EC                  <2> 	in al, dx
 11282 00008E33 20C4                <2> 	and ah, al
 11283 00008E35 80FC40              <2> 	cmp ah, 0x40
 11284 00008E38 75F6                <2> 	jne .chkcopylp	
 11285 00008E3A 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11286 00008E40 6681C20400          <2> 	add dx, 4
 11287 00008E45 A0[8A8E0000]        <2> 	mov al, [.pagestart]
 11288 00008E4A EE                  <2> 	out dx, al ;send start address in pages
 11289 00008E4B 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11290 00008E51 81C205000000        <2> 	add edx, 0x5
 11291 00008E57 89D8                <2> 	mov eax, ebx
 11292 00008E59 EE                  <2> 	out dx, al
 11293 00008E5A 86C4                <2> 	xchg al, ah
 11294 00008E5C 6642                <2> 	inc dx
 11295 00008E5E EE                  <2> 	out dx, al ;send length
 11296 00008E5F 8B15[6F8E0000]      <2> 	mov edx, [.basenicaddr]
 11297 00008E65 B020                <2> 	mov al, 0x20
 11298 00008E67 0C04                <2> 	or al, 4
 11299 00008E69 0C02                <2> 	or al, 2
 11300 00008E6B EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 11301 00008E6C 31DB                <2> 	xor ebx, ebx
 11302 00008E6E C3                  <2> 	ret
 11303 00008E6F 00000000            <2> .basenicaddr dd 0
 11304 00008E73 00                  <2> .nicconfig db 0
 11305 00008E74 4E45323030302000    <2> .name db "NE2000 ",0
 11306 00008E7C 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 11307 00008E85 65642E0A00          <2>
 11308                              <2> align 2, nop
 11309 00008E8A 0000                <2> .pagestart dw 0
 11310 00008E8C 0000                <2> .pageend dw 0
 11311 00008E8E 00000000            <2> .ringstart dd 0
 11312 00008E92 00000000            <2> .ringend dd 0
 11313 00008E96 000000000000        <2> .mac db 0,0,0,0,0,0
 11314 00008E9C 00<rept>            <2> .rom times 16 db 0
 11315                              <2> 
 11316                              <2> .end:
 11317                              <1> %endif
 11318                              <1> %ifdef i8254x.included
 11319                              <1> 	%include "source/drivers/network/i8254x.asm"
 11320                              <1> %endif
 11321 00008EAC C3                  <1> 	ret
 11322                              <1> 
 11323                              <1> sendpacket: ;packet start in edi, end in esi
 11324                              <1> 	%ifdef rtl8139.included
 11325                              <1> 		push edi
 11326                              <1> 		push esi
 11327                              <1> 		call rtl8139.sendpacket
 11328                              <1> 		pop esi
 11329                              <1> 		pop edi
 11330                              <1> 	%endif
 11331                              <1> 	%ifdef rtl8169.included
 11332                              <1> 		push edi
 11333                              <1> 		push esi
 11334                              <1> 		call rtl8169.sendpacket
 11335                              <1> 		pop esi
 11336                              <1> 		pop edi
 11337                              <1> 	%endif
 11338                              <1> 	%ifdef ne2000.included
 11339 00008EAD 57                  <1> 		push edi
 11340 00008EAE 56                  <1> 		push esi
 11341 00008EAF E8CEFEFFFF          <1> 		call ne2000.sendpacket
 11342 00008EB4 5E                  <1> 		pop esi
 11343 00008EB5 5F                  <1> 		pop edi
 11344                              <1> 	%endif
 11345                              <1> 	%ifdef i8254x.included
 11346                              <1> 		call i8254x.sendpacket
 11347                              <1> 	%endif
 11348 00008EB6 C3                  <1> 	ret
 11349                              <1> 
 11350                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 11351 00008EB7 31C0                <1> 	xor eax, eax
 11352 00008EB9 31DB                <1> 	xor ebx, ebx
 11353 00008EBB 31C9                <1> 	xor ecx, ecx
 11354                              <1> .lp:
 11355 00008EBD 8A07                <1> 	mov al, [edi]
 11356 00008EBF 8A6701              <1> 	mov ah, [edi + 1]
 11357 00008EC2 01C3                <1> 	add ebx, eax
 11358 00008EC4 81C702000000        <1> 	add edi, 2
 11359 00008ECA 39F7                <1> 	cmp edi, esi
 11360 00008ECC 72EF                <1> 	jb .lp
 11361 00008ECE 66B9FFFF            <1> 	mov cx, 0xFFFF
 11362 00008ED2 6689D8              <1> 	mov ax, bx
 11363 00008ED5 C1EB10              <1> 	shr ebx, 16
 11364 00008ED8 6601D8              <1> 	add ax, bx
 11365 00008EDB 6629C1              <1> 	sub cx, ax
 11366 00008EDE C3                  <1> 	ret
 11367                              <1> 	
 11368                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 11369 00008EDF 31DB                <1> 	xor ebx, ebx
 11370 00008EE1 31C9                <1> 	xor ecx, ecx
 11371 00008EE3 31D2                <1> 	xor edx, edx
 11372                              <1> .mlp:
 11373 00008EE5 89F7                <1> 	mov edi, esi
 11374 00008EE7 4F                  <1> 	dec edi
 11375                              <1> .lp:
 11376 00008EE8 47                  <1> 	inc edi
 11377 00008EE9 8A07                <1> 	mov al, [edi]
 11378 00008EEB 3C20                <1> 	cmp al, " "
 11379 00008EED 7408                <1> 	je .dnlp
 11380 00008EEF 3C00                <1> 	cmp al, 0
 11381 00008EF1 7404                <1> 	je .dnlp
 11382 00008EF3 3C2E                <1> 	cmp al, "."
 11383 00008EF5 75F1                <1> 	jne .lp
 11384                              <1> .dnlp:
 11385 00008EF7 30C0                <1> 	xor al, al
 11386 00008EF9 8807                <1> 	mov [edi], al
 11387 00008EFB 53                  <1> 	push ebx
 11388 00008EFC 56                  <1> 	push esi
 11389 00008EFD 57                  <1> 	push edi
 11390 00008EFE 31FF                <1> 	xor edi, edi
 11391 00008F00 E8E9A4FFFF          <1> 	call cnvrttxt
 11392 00008F05 5E                  <1> 	pop esi
 11393 00008F06 5F                  <1> 	pop edi ;i intentionally switch them
 11394 00008F07 5B                  <1> 	pop ebx
 11395 00008F08 46                  <1> 	inc esi
 11396 00008F09 BF[218F0000]        <1> 	mov edi, ipstr
 11397 00008F0E 880C1F              <1> 	mov [edi + ebx], cl
 11398 00008F11 43                  <1> 	inc ebx
 11399 00008F12 81FB04000000        <1> 	cmp ebx, 4
 11400 00008F18 72CB                <1> 	jb .mlp
 11401 00008F1A 8B0D[218F0000]      <1> 	mov ecx, [ipstr]
 11402 00008F20 C3                  <1> 	ret
 11403 00008F21 00000000            <1> ipstr dd 0
 11404                              <1> showip: 	;put the ip address in ecx
 11405 00008F25 89C8                <1> 	mov eax, ecx
 11406 00008F27 30DB                <1> 	xor bl, bl
 11407                              <1> .lp:
 11408 00008F29 31C9                <1> 	xor ecx, ecx
 11409 00008F2B 88C1                <1> 	mov cl, al
 11410 00008F2D E8DEA3FFFF          <1> 	call showdec
 11411 00008F32 C1E808              <1> 	shr eax, 8
 11412 00008F35 FEC3                <1> 	inc bl
 11413 00008F37 80FB04              <1> 	cmp bl, 4
 11414 00008F3A 7315                <1> 	jae .done
 11415 00008F3C 50                  <1> 	push eax
 11416 00008F3D 6653                <1> 	push bx
 11417 00008F3F BE[528F0000]        <1> 	mov esi, .dot
 11418 00008F44 E81A8EFFFF          <1> 	call print
 11419 00008F49 665B                <1> 	pop bx
 11420 00008F4B 58                  <1> 	pop eax
 11421 00008F4C E9D8FFFFFF          <1> 	jmp .lp
 11422                              <1> .done:
 11423 00008F51 C3                  <1> 	ret
 11424 00008F52 082E00              <1> .dot db 8,".",0
 11425                              <1> showmac:	;mac begins in [ecx]
 11426 00008F55 BE[A58F0000]        <1> 	mov esi, macprint
 11427 00008F5A 89CF                <1> 	mov edi, ecx
 11428 00008F5C 81C106000000        <1> 	add ecx, 6
 11429                              <1> showmacloop:
 11430 00008F62 8A07                <1> 	mov al, [edi]
 11431 00008F64 8A27                <1> 	mov ah, [edi]
 11432 00008F66 C0E804              <1> 	shr al, 4
 11433 00008F69 C0E404              <1> 	shl ah, 4
 11434 00008F6C C0EC04              <1> 	shr ah, 4
 11435 00008F6F 0430                <1> 	add al, 48
 11436 00008F71 3C39                <1> 	cmp al, "9"
 11437 00008F73 7606                <1> 	jbe .goodal
 11438 00008F75 2C30                <1> 	sub al, 48
 11439 00008F77 2C0A                <1> 	sub al, 0xA
 11440 00008F79 0441                <1> 	add al, "A"
 11441                              <1> .goodal:
 11442 00008F7B 80C430              <1> 	add ah, 48
 11443 00008F7E 80FC39              <1> 	cmp ah, "9"
 11444 00008F81 7609                <1> 	jbe .goodah
 11445 00008F83 80EC30              <1> 	sub ah, 48
 11446 00008F86 80EC0A              <1> 	sub ah, 0xA
 11447 00008F89 80C441              <1> 	add ah, "A"
 11448                              <1> .goodah:
 11449 00008F8C 668906              <1> 	mov [esi], ax
 11450 00008F8F 81C603000000        <1> 	add esi, 3
 11451 00008F95 47                  <1> 	inc edi
 11452 00008F96 39CF                <1> 	cmp edi, ecx
 11453 00008F98 72C8                <1> 	jb showmacloop
 11454 00008F9A BE[A58F0000]        <1> 	mov esi, macprint
 11455 00008F9F E8BF8DFFFF          <1> 	call print
 11456 00008FA4 C3                  <1> 	ret
 11457                              <1> 	
 11458 00008FA5 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 11459 00008FAE 30303A30303A303020- <1>
 11460 00008FB7 00                  <1>
 11461 00008FB8 00000000            <1> ethernetend dw 0,0
 11462 00008FBC C0A80002            <1> sysip db 192,168,0,2
 11463 00008FC0 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 11464                                  %endif
 11465                                      %include "source/data.asm"
 11466 00008FC6 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 11467 00008FCE 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 11468 00008FD6 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 11469 00008FDF 6E640A00            <1>
 11470 00008FE3 757365726E616D653A- <1> 	userask db	"username:",0
 11471 00008FEC 00                  <1>
 11472 00008FED 70617373776F72643A- <1> 	pwdask	db	"password:",0
 11473 00008FF6 00                  <1>
 11474 00008FF7 40                  <1> 	computer db	"@"
 11475                              <1> %ifdef io.serial
 11476                              <1> 	computername db	"SollerOS.",io.serial," ",0
 11477                              <1> %else
 11478 00008FF8 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 11479 00009001 00                  <1>
 11480                              <1> %endif
 11481 00009002 5D242000            <1> 	endprompt db "]$ ",0
 11482 00009006 0D                  <1> 	crlf 	db	13
 11483 00009007 0A00                <1> 	line	db	10,0
 11484                              <1> 	userlst:
 11485 00009009 726F6F7400          <1> 			db "root",0
 11486 0000900E 617765736F6D65706F- <1> 			db "awesomepower",0
 11487 00009017 77657200            <1>
 11488 0000901B 7573657200          <1> 			db "user",0
 11489 00009020 70617373776F726400  <1> 			db "password",0
 11490 00009029 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 11491 0000902B 00                  <1> 			db 0
 11492                              <1> 	userlstend:
 11493                              <1> 	
 11494 0000902C 00                  <1> 	guion db 0
 11495 0000902D 00                  <1> 	DriveNumber db 0
 11496 0000902E 00000000            <1> 	lbaad dd 0
 11497 00009032 0000000000000000    <1> 	initialtsc dd 0,0
 11498 0000903A 0000000000000000    <1> 	lasttsc dd 0,0
 11499 00009042 00<rept>            <1> 	memlistbuf times 576 db 0
 11500 00009282 00000000            <1> 	memlistend: dd 0
 11501                              <1> %ifdef io.serial
 11502                              <1> %else
 11503                              <1> fonts:
 11504                              <1> %ifdef font.unicode
 11505 00009286 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 11506                              <1> %else
 11507                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 11508                              <1> %endif
 11509                              <1> fontend:
 11510                              <1> %endif
 11511                              <1> osend:	;this is the end of the operating system's space on disk
 11512                                  %ifdef disk.none
 11513                                  	diskfileindex:
 11514                                  	enddiskfileindex:
 11515                                      %include "source/bss.asm"
 11516                                  %else
 11517                                      %include "build/fileindex.asm"
 11518                              <1> diskfileindex:
 11519 00039286 5F696D672E62696E00  <1> db "_img.bin",0
 11520 0003928F CA010000            <1> dd (f0-$$)/512
 11521 00039293 0C000000            <1> dd (f1-f0)/512
 11522 00039297 626F6F742E736800    <1> db "boot.sh",0
 11523 0003929F D6010000            <1> dd (f1-$$)/512
 11524 000392A3 01000000            <1> dd (f2-f1)/512
 11525 000392A7 646F73746573742E63- <1> db "dostest.com",0
 11526 000392B0 6F6D00              <1>
 11527 000392B3 D7010000            <1> dd (f2-$$)/512
 11528 000392B7 01000000            <1> dd (f3-f2)/512
 11529 000392BB 6578656300          <1> db "exec",0
 11530 000392C0 D8010000            <1> dd (f3-$$)/512
 11531 000392C4 01000000            <1> dd (f4-f3)/512
 11532 000392C8 66696E616C636F756E- <1> db "finalcount.sn",0
 11533 000392D1 742E736E00          <1>
 11534 000392D6 D9010000            <1> dd (f4-$$)/512
 11535 000392DA 01000000            <1> dd (f5-f4)/512
 11536 000392DE 666F726B00          <1> db "fork",0
 11537 000392E3 DA010000            <1> dd (f5-$$)/512
 11538 000392E7 01000000            <1> dd (f6-f5)/512
 11539 000392EB 6775697465737400    <1> db "guitest",0
 11540 000392F3 DB010000            <1> dd (f6-$$)/512
 11541 000392F7 03000000            <1> dd (f7-f6)/512
 11542 000392FB 696E7400            <1> db "int",0
 11543 000392FF DE010000            <1> dd (f7-$$)/512
 11544 00039303 01000000            <1> dd (f8-f7)/512
 11545 00039307 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11546 00039310 2E736E00            <1>
 11547 00039314 DF010000            <1> dd (f8-$$)/512
 11548 00039318 01000000            <1> dd (f9-f8)/512
 11549 0003931C 6D6172696F2E736E00  <1> db "mario.sn",0
 11550 00039325 E0010000            <1> dd (f9-$$)/512
 11551 00039329 01000000            <1> dd (f10-f9)/512
 11552 0003932D 736F6E676F74696D65- <1> db "songotime.sn",0
 11553 00039336 2E736E00            <1>
 11554 0003933A E1010000            <1> dd (f10-$$)/512
 11555 0003933E 01000000            <1> dd (f11-f10)/512
 11556 00039342 73736500            <1> db "sse",0
 11557 00039346 E2010000            <1> dd (f11-$$)/512
 11558 0003934A 02000000            <1> dd (f12-f11)/512
 11559 0003934E 74656C7900          <1> db "tely",0
 11560 00039353 E4010000            <1> dd (f12-$$)/512
 11561 00039357 01000000            <1> dd (f13-f12)/512
 11562 0003935B 756E667300          <1> db "unfs",0
 11563 00039360 E5010000            <1> dd (f13-$$)/512
 11564 00039364 02000000            <1> dd (f14-f13)/512
 11565                              <1> enddiskfileindex:
 11566                              <1> 
 11567                                      %include "source/bss.asm"
 11568 00039368 00<rept>            <1> align 512, db 0
 11569                              <1> bssstart equ $
 11570                              <1> bsscopy equ $
 11571                              <1> initialstack equ bsscopy
 11572                              <1> stackend equ initialstack + 8192
 11573                              <1> sigtable equ stackend + 4
 11574                              <1> fileindex equ sigtable + 4
 11575                              <1> fileindexend equ fileindex + 1024
 11576                              <1> previousstack equ fileindexend
 11577                              <1> lastfolderloc equ previousstack + 4
 11578                              <1> currentfolderloc equ lastfolderloc + 4
 11579                              <1> currentfolder equ currentfolderloc + 4
 11580                              <1> currentfolderend equ currentfolder + 512
 11581                              <1> uid equ currentfolderend
 11582                              <1> ranboot equ uid + 4
 11583                              <1> IFON equ ranboot + 1
 11584                              <1> IFTRUE equ IFON + 1
 11585                              <1> BATCHPOS equ IFTRUE + 100
 11586                              <1> BATCHISON equ BATCHPOS + 4
 11587                              <1> LOOPON equ BATCHISON + 1
 11588                              <1> LOOPPOS	equ LOOPON + 1
 11589                              <1> variables equ LOOPPOS + 4
 11590                              <1> varend equ variables + 4096
 11591                              <1> buftxt2 equ varend
 11592                              <1> buftxt equ buftxt2 + 1024
 11593                              <1> buftxtend equ buftxt + 1024
 11594                              <1> buf2 equ buftxtend
 11595                              <1> numbuf equ buf2 + 20
 11596                              <1> %ifdef io.serial
 11597                              <1> 	lastcommandpos equ numbuf + 1
 11598                              <1> %else
 11599                              <1> 	%ifdef gui.included
 11600                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11601                              <1> 		graphicstableend equ graphicstable + 200h
 11602                              <1> 		%ifdef gui.background
 11603                              <1> 			backgroundbuffer equ graphicstableend
 11604                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11605                              <1> 			mousecolorbuf equ backgroundbufferend
 11606                              <1> 		%else
 11607                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11608                              <1> 		%endif
 11609                              <1> 		mcolorend equ mousecolorbuf + 256
 11610                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11611                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11612                              <1> 		videobuf2 equ videobufend
 11613                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11614                              <1> 	%else
 11615                              <1> 		videobuf equ numbuf + 1
 11616                              <1> 		videobufend equ videobuf + 80*30*4
 11617                              <1> 		videobuf2 equ videobufend
 11618                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11619                              <1> 	%endif
 11620                              <1> 	lastcommandpos: equ videobuf2end
 11621                              <1> %endif
 11622                              <1> 	commandbufpos: equ lastcommandpos + 4
 11623                              <1> 	commandlistentries: equ commandbufpos + 4
 11624                              <1> 	commandsentered: equ commandlistentries + 4
 11625                              <1> 	commandbuf: equ commandsentered + 4
 11626                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11627                              <1> %ifdef network.included
 11628                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11629                              <1> 	rbuffend equ rbuffstart + 8212
 11630                              <1> %else
 11631                              <1> 	rbuffstart equ commandbufend
 11632                              <1> 	rbuffend equ commandbufend
 11633                              <1> %endif
 11634                              <1> %ifdef threads.included
 11635                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11636                              <1> 	threadlistend: equ threadlist + 1024*4
 11637                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11638                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 11639                              <1> 	bssend equ stack1 + 1024*2048
 11640                              <1> %else
 11641                              <1> 	bssend equ rbuffend
 11642                              <1> %endif
 11643                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11644                                      %include "build/files.asm"
 11645                              <1> align 512,db 0
 11646                              <1> f0:
 11647 00039400 <incbin>            <1> incbin "included/_img.bin"
 11648                              <1> align 512,db 0
 11649                              <1> f1:
 11650 0003AC00 <incbin>            <1> incbin "included/boot.sh"
 11651 0003AD18 00<rept>            <1> align 512,db 0
 11652                              <1> f2:
 11653 0003AE00 <incbin>            <1> incbin "included/dostest.com"
 11654 0003AF31 00<rept>            <1> align 512,db 0
 11655                              <1> f3:
 11656 0003B000 <incbin>            <1> incbin "included/exec"
 11657 0003B0E9 00<rept>            <1> align 512,db 0
 11658                              <1> f4:
 11659 0003B200 <incbin>            <1> incbin "included/finalcount.sn"
 11660 0003B302 00<rept>            <1> align 512,db 0
 11661                              <1> f5:
 11662 0003B400 <incbin>            <1> incbin "included/fork"
 11663 0003B561 00<rept>            <1> align 512,db 0
 11664                              <1> f6:
 11665 0003B600 <incbin>            <1> incbin "included/guitest"
 11666 0003BA3D 00<rept>            <1> align 512,db 0
 11667                              <1> f7:
 11668 0003BC00 <incbin>            <1> incbin "included/int"
 11669 0003BDB2 00<rept>            <1> align 512,db 0
 11670                              <1> f8:
 11671 0003BE00 <incbin>            <1> incbin "included/lostwoods.sn"
 11672 0003BEAE 00<rept>            <1> align 512,db 0
 11673                              <1> f9:
 11674 0003C000 <incbin>            <1> incbin "included/mario.sn"
 11675 0003C03A 00<rept>            <1> align 512,db 0
 11676                              <1> f10:
 11677 0003C200 <incbin>            <1> incbin "included/songotime.sn"
 11678 0003C24A 00<rept>            <1> align 512,db 0
 11679                              <1> f11:
 11680 0003C400 <incbin>            <1> incbin "included/sse"
 11681 0003C69A 00<rept>            <1> align 512,db 0
 11682                              <1> f12:
 11683 0003C800 <incbin>            <1> incbin "included/tely"
 11684 0003C9C6 00<rept>            <1> align 512,db 0
 11685                              <1> f13:
 11686 0003CA00 <incbin>            <1> incbin "included/unfs"
 11687                              <1> align 512,db 0
 11688                              <1> f14:
 11689                                  %endif
