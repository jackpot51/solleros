     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> %define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> %define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 FD000000            <1> dd 253	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[DDFB]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[DEFB]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[DCFB]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[E2FB]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[22FE]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[E2FB]          <1> 	sub di, memlistbuf
   177 00000075 893E[22FE]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[7E03]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[8603]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[8003]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[8803]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[8303]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[8B03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[22FE0000]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[7603]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[7803]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[7B03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[8E03]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[9603]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[9E03]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[A603]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[9003]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[9803]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[A003]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[A803]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[9303]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[9B03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[A303]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[AB03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[AE03]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[B603]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[B003]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[B803]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[B303]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[BB03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[64030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[5A03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[BC030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[6003]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[5803]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[5E03]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[22FE0000]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[C20D0100]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E8A45F0000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[701E1300]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[22FE0000]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[E2FB0000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[22FE0000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[47570000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[47570000]      <1> 	mov [physbaseptr], edi
   337 00000237 E9E8640000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E996280000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[334E0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9BC000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E886000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F8483580000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[1F670000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F840A640000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[1F670000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F8486000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F8579000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E96E000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[220E0100]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[220E0100]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[C20D0100]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E915290000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000031C E92E000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487                              <1> 	cli
   488                              <1> 	pusha
   489                              <1> 	cmp byte [SoundBlaster], 1
   490                              <1> 	je near sblaster.cont
   491                              <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000321 50                  <1> 	push eax
   496 00000322 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 00000327 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 0000032D 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000332 720B                <1> 	jb nonanosecondrollover
   500 00000334 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000033A 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 0000033F A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000344 58                  <1> 	pop eax
   515 00000345 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000346 61                  <1> 	popa
   519                              <1> handled3:
   520 00000347 FB                  <1> 	sti
   521                              <1> handled:
   522 00000348 50                  <1> 	push eax
   523 00000349 B020                <1> 	mov al, 0x20
   524 0000034B E620                <1> 	out 0x20, al
   525 0000034D 58                  <1> 	pop eax
   526 0000034E CF                  <1> 	iret
   527                              <1> handled4:
   528 0000034F 50                  <1> 	push eax
   529 00000350 B020                <1> 	mov al, 0x20
   530 00000352 E6A0                <1> 	out 0xA0, al
   531 00000354 E620                <1> 	out 0x20, al
   532 00000356 58                  <1> 	pop eax
   533 00000357 CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 00000358 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000035A 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 0000035E FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000360 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000364 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000366 0000                <1> 	dw 0			; base 15:0
   547 00000368 00                  <1> 	db 0			; base 23:16
   548 00000369 00                  <1> 	db 0			; type
   549 0000036A 00                  <1> 	db 0			; limit 19:16, flags
   550 0000036B 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 0000036C FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 0000036E 0000                <1> 	dw 0			; base for this one is always 0
   555 00000370 00                  <1> 	db 0
   556 00000371 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 00000372 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 00000373 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 00000374 0200                <1> gdts:	dw 2;(stackend)/4096
   561 00000376 0000                <1> 	dw 0
   562 00000378 00                  <1> 	db 0
   563 00000379 92                  <1> 	db 0x92
   564 0000037A CF                  <1> 	db 0xCF
   565 0000037B 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 0000037C FFFF                <1> gdt2:	dw 0xFFFF
   569 0000037E 0000                <1> 	dw 0			; (base gets set above)
   570 00000380 00                  <1> 	db 0
   571 00000381 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 00000382 CF                  <1> 	db 0xCF
   573 00000383 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 00000384 FFFF                <1> gdt3:	dw 0xFFFF
   577 00000386 0000                <1> 	dw 0			; (base gets set above)
   578 00000388 00                  <1> 	db 0
   579 00000389 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 0000038A CF                  <1> 	db 0xCF
   581 0000038B 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 0000038C FFFF                <1> gdt4:	dw 0xFFFF
   584 0000038E 0000                <1> 	dw 0			; (base gets set above)
   585 00000390 00                  <1> 	db 0
   586 00000391 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 00000392 CF                  <1> 	db 0xCF
   588 00000393 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 00000394 FFFF                <1> gdt5:	dw 0xFFFF
   592 00000396 0000                <1> 	dw 0			; (base gets set above)
   593 00000398 00                  <1> 	db 0
   594 00000399 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 0000039A CF                  <1> 	db 0xCF
   596 0000039B 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 0000039C FFFF                <1> gdtv8086: dw 0xFFFF
   599 0000039E 0000                <1> 	dw 0
   600 000003A0 00                  <1> 	db 0
   601 000003A1 9A                  <1> 	db 0x9A
   602 000003A2 8F                  <1> 	db 0x8F
   603 000003A3 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003A4 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003A6 0000                <1> 	dw 0
   607 000003A8 00                  <1> 	db 0
   608 000003A9 92                  <1> 	db 0x92
   609 000003AA 8F                  <1> 	db 0x8F
   610 000003AB 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003AC 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003AE 0000                <1> 	dw 0
   614 000003B0 00                  <1> 	db 0
   615 000003B1 9A                  <1> 	db 0x9A
   616 000003B2 8F                  <1> 	db 0x8F ;16 bit
   617 000003B3 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003B4 0001                <1> gdtdos2:	dw 256
   620 000003B6 0000                <1> 	dw 0
   621 000003B8 00                  <1> 	db 0
   622 000003B9 92                  <1> 	db 0x92
   623 000003BA 8F                  <1> 	db 0x8F ;16 bit
   624 000003BB 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003BC [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003C4 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003CC [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003D4 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003DC [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003E4 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003EC [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003F4 [310D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003FC [3D0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000404 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000040C [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000414 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000041C [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000424 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000042C [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000434 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000043C [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000444 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000044C [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000454 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000045C [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000464 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000046C [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000474 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000047C [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000484 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000048C [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000494 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000049C [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004A4 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004AC [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004B4 [510E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004BC [9D29]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004C4 [A129]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004CC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004D4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004DC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004E4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004EC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 000004F4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 000004FC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000504 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000050C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000514 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000051C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000524 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000052C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000534 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 0000053C [D01B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000544 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000054C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000554 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000055C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000564 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000056C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000574 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000057C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000584 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000058C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000594 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000059C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005A4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005AC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005B4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005BC [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005C4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005CC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005D4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005DC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786 000005E4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 000005EC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 000005F4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 000005FC [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000604 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 0000060C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000614 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 0000061C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000624 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 0000062C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000634 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 0000063C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000644 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000064C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000654 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000065C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000664 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000066C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000674 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000067C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000684 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000068C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000694 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000069C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000704 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000070C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000714 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000071C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000724 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000072C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000734 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000073C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000744 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000074C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000754 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000075C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000764 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000076C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000774 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000077C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000784 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000078C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000794 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000079C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000804 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000080C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000814 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000081C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000824 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000082C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000834 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000083C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000844 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000084C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000854 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000085C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000864 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000086C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000874 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000087C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000884 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000088C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000894 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000089C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000904 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000090C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000914 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000091C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000924 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000092C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000934 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000093C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000944 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000094C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000954 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000095C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000964 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000096C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000974 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000097C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000984 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000098C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000994 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000099C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000ABC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AC4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000ACC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AD4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ADC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AE4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000AEC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AF4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000AFC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BBC FA                  <1> 	cli
  1343 00000BBD A3[CF0C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BC2 891D[CB0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BC8 8925[BD0C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BCE BB[C70C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BD3 8B03                <1> 	mov eax, [ebx]
  1350 00000BD5 658903              <1> 	mov [gs:ebx], eax
  1351 00000BD8 81C304000000        <1> 	add ebx, 4
  1352 00000BDE 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1353 00000BE4 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000BE6 EA[ED0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000BED B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000BF0 8ED8                <1> 	mov ds, ax
  1361 00000BF2 8EC0                <1> 	mov es, ax
  1362 00000BF4 8EE0                <1> 	mov fs, ax
  1363 00000BF6 8EE8                <1> 	mov gs, ax
  1364 00000BF8 8ED0                <1> 	mov ss, ax
  1365 00000BFA 66BC[C20D0100]      <1> 	mov esp, stackend
  1366 00000C00 0F20C0              <1> 	mov eax, cr0
  1367 00000C03 66A3[C70C]          <1> 	mov [cr0old], eax
  1368 00000C07 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C0D 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C10 EA[150C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C15 8CC8                <1> 	mov ax, cs
  1374 00000C17 8ED8                <1> 	mov ds, ax
  1375 00000C19 8EC0                <1> 	mov es, ax
  1376 00000C1B 8EE0                <1> 	mov fs, ax
  1377 00000C1D 8EE8                <1> 	mov gs, ax
  1378 00000C1F 8ED0                <1> 	mov ss, ax
  1379 00000C21 BC[C20D]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C24 B011                <1> 	mov al, 0x11
  1382 00000C26 E620                <1> 	out 0x20, al
  1383 00000C28 E6A0                <1> 	out 0xA0, al
  1384 00000C2A B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C2C E621                <1> 	out 0x21, al
  1386 00000C2E B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C30 E6A1                <1> 	out 0xA1, al
  1388 00000C32 B004                <1> 	mov al, 4
  1389 00000C34 E621                <1> 	out 0x21, al
  1390 00000C36 B002                <1> 	mov al, 2
  1391 00000C38 E6A1                <1> 	out 0xA1, al
  1392 00000C3A B001                <1> 	mov al, 0x1
  1393 00000C3C E621                <1> 	out 0x21, al
  1394 00000C3E B001                <1> 	mov al, 0x1
  1395 00000C40 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C42 0F011E[C10C]        <1> 	lidt [idt_real]
  1398 00000C47 FB                  <1> 	sti
  1399                              <1> 
  1400 00000C48 66A1[CF0C]          <1> 	mov eax, [realmodeeax]
  1401 00000C4C 668B1E[CB0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C51 FF16[D70C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C55 66A3[CF0C]          <1> 	mov [realmodeeax], eax
  1406 00000C59 66891E[CB0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C5E FA                  <1> 	cli
  1409 00000C5F 0F0116[5803]        <1> 	lgdt [gdtr]
  1410 00000C64 0F011E[5E03]        <1> 	lidt [idtr]
  1411 00000C69 0F20C0              <1> 	mov eax, cr0
  1412 00000C6C 0C01                <1> 	or al, 1
  1413 00000C6E 0F22C0              <1> 	mov cr0,eax
  1414 00000C71 EA[760C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000C76 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000C7A 8ED8                <1> 	mov ds, ax
  1420 00000C7C 8EC0                <1> 	mov es, ax
  1421 00000C7E 8EE0                <1> 	mov fs, ax
  1422 00000C80 8ED0                <1> 	mov ss, ax
  1423 00000C82 8B25[BD0C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000C88 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000C8C 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000C8E BB[C70C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000C93 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000C96 8903                <1> 	mov [ebx], eax
  1431 00000C98 81C304000000        <1> 	add ebx, 4
  1432 00000C9E 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CA4 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CA6 E8C7540000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CAB FB                  <1> 	sti
  1437 00000CAC A1[CF0C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CB1 8B1D[CB0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CB7 FF25[D30C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CBD 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CC1 FF03                <1> 	dw 0x3FF
  1444 00000CC3 00000000            <1> 	dd 0
  1445 00000CC7 00000000            <1> cr0old dd 0
  1446 00000CCB 00000000            <1> realmodeebx dd 0
  1447 00000CCF 00000000            <1> realmodeeax dd 0
  1448 00000CD3 00000000            <1> realmodereturn dd 0
  1449 00000CD7 0000                <1> realmodeptr dw 0
  1450 00000CD9 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000CDD C605[8F110000]00    <2>  mov byte [intprob], i
  1462 00000CE4 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000CE9 C605[8F110000]01    <2>  mov byte [intprob], i
  1465 00000CF0 E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000CF5 C605[8F110000]02    <2>  mov byte [intprob], i
  1468 00000CFC E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D01 C605[8F110000]03    <2>  mov byte [intprob], i
  1471 00000D08 E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D0D C605[8F110000]04    <2>  mov byte [intprob], i
  1474 00000D14 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D19 C605[8F110000]05    <2>  mov byte [intprob], i
  1477 00000D20 E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D25 C605[8F110000]06    <2>  mov byte [intprob], i
  1480 00000D2C E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D31 C605[8F110000]07    <2>  mov byte [intprob], i
  1483 00000D38 E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D3D C605[8F110000]08    <2>  mov byte [intprob], i
  1486 00000D44 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D49 C605[8F110000]09    <2>  mov byte [intprob], i
  1489 00000D50 E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D55 C605[8F110000]0A    <2>  mov byte [intprob], i
  1492 00000D5C E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D61 C605[8F110000]0B    <2>  mov byte [intprob], i
  1495 00000D68 E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D6D C605[8F110000]0C    <2>  mov byte [intprob], i
  1498 00000D74 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000D79 C605[8F110000]0D    <2>  mov byte [intprob], i
  1501 00000D80 E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000D85 C605[8F110000]0E    <2>  mov byte [intprob], i
  1504 00000D8C E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000D91 C605[8F110000]0F    <2>  mov byte [intprob], i
  1507 00000D98 E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000D9D C605[8F110000]10    <2>  mov byte [intprob], i
  1510 00000DA4 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DA9 C605[8F110000]11    <2>  mov byte [intprob], i
  1513 00000DB0 E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DB5 C605[8F110000]12    <2>  mov byte [intprob], i
  1516 00000DBC E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DC1 C605[8F110000]13    <2>  mov byte [intprob], i
  1519 00000DC8 E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DCD C605[8F110000]14    <2>  mov byte [intprob], i
  1522 00000DD4 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000DD9 C605[8F110000]15    <2>  mov byte [intprob], i
  1525 00000DE0 E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000DE5 C605[8F110000]16    <2>  mov byte [intprob], i
  1528 00000DEC E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000DF1 C605[8F110000]17    <2>  mov byte [intprob], i
  1531 00000DF8 E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000DFD C605[8F110000]18    <2>  mov byte [intprob], i
  1534 00000E04 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E09 C605[8F110000]19    <2>  mov byte [intprob], i
  1537 00000E10 E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E15 C605[8F110000]1A    <2>  mov byte [intprob], i
  1540 00000E1C E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E21 C605[8F110000]1B    <2>  mov byte [intprob], i
  1543 00000E28 E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E2D C605[8F110000]1C    <2>  mov byte [intprob], i
  1546 00000E34 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E39 C605[8F110000]1D    <2>  mov byte [intprob], i
  1549 00000E40 E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E45 C605[8F110000]1E    <2>  mov byte [intprob], i
  1552 00000E4C E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E51 C605[8F110000]1F    <2>  mov byte [intprob], i
  1555 00000E58 E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E5D FA                  <1> 	cli
  1559 00000E5E 1E                  <1> 	push ds
  1560 00000E5F 06                  <1> 	push es
  1561 00000E60 0FA0                <1> 	push fs
  1562 00000E62 0FA8                <1> 	push gs
  1563 00000E64 16                  <1> 	push ss
  1564 00000E65 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E66 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
  1567 00000E6D 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000E73 66C705[89110000]08- <1> 	mov word [locunhandy], 8
  1569 00000E7B 00                  <1>
  1570 00000E7C 66C705[8B110000]08- <1> 	mov word [locunhandx], 8
  1571 00000E84 00                  <1>
  1572 00000E85 668B1D[056E0000]    <1> 	mov bx, [background]
  1573 00000E8C 66891D[8D110000]    <1> 	mov [backgroundcache], bx
  1574 00000E93 C605[23580000]01    <1> 	mov byte [mousedisabled],1
  1575 00000E9A 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000E9E 66891D[056E0000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000EA5 89E6                <1> 	mov esi, esp
  1580 00000EA7 8935[7D110000]      <1> 	mov [espfirst], esi
  1581 00000EAD 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EB3 8935[79110000]      <1> 	mov [esploc], esi
  1583 00000EB9 BE[9E110000]        <1> 	mov esi, unhandmsg
  1584 00000EBE 8935[81110000]      <1> 	mov [esiloc], esi
  1585 00000EC4 31C9                <1> 	xor ecx, ecx
  1586 00000EC6 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1587 00000ECC BB[6D150000]        <1> 	mov ebx, errortypes
  1588 00000ED1 C1E102              <1> 	shl ecx, 2
  1589 00000ED4 01CB                <1> 	add ebx, ecx
  1590 00000ED6 81FB[AD150000]      <1> 	cmp ebx, errortypesend
  1591 00000EDC 7205                <1> 	jb gooderrortype
  1592 00000EDE BB[AD150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000EE3 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000EE5 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
  1597 00000EEC 0F842D000000        <1> 	je near errortext
  1598 00000EF2 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1599 00000EF9 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1600 00000F00 66B80100            <1> 	mov ax, 1
  1601 00000F04 6631DB              <1> 	xor bx, bx
  1602 00000F07 E84E650000          <1> 	call showstring2
  1603 00000F0C 66890D[89110000]    <1> 	mov [locunhandy], cx
  1604 00000F13 668915[8B110000]    <1> 	mov [locunhandx], dx
  1605 00000F1A E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F1F E8020E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F24 31C9                <1> 	xor ecx, ecx
  1611 00000F26 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1612 00000F2C E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F31 8B35[79110000]      <1> 	mov esi, [esploc]
  1615 00000F37 39E6                <1> 	cmp esi, esp
  1616 00000F39 7216                <1> 	jb donedump
  1617 00000F3B 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F3E 81EE04000000        <1> 	sub esi, 4
  1619 00000F44 8935[79110000]      <1> 	mov [esploc], esi
  1620 00000F4A E8C3010000          <1> 	call expdump
  1621 00000F4F EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F51 0F20C1              <1> 	mov ecx, cr0
  1624 00000F54 E8B9010000          <1> 	call expdump
  1625 00000F59 0F20D1              <1> 	mov ecx, cr2
  1626 00000F5C E8B1010000          <1> 	call expdump
  1627 00000F61 0F20D9              <1> 	mov ecx, cr3
  1628 00000F64 E8A9010000          <1> 	call expdump
  1629 00000F69 0F20E1              <1> 	mov ecx, cr4
  1630 00000F6C E8A1010000          <1> 	call expdump
  1631 00000F71 0F00C9              <1> 	str ecx
  1632 00000F74 E899010000          <1> 	call expdump
  1633 00000F79 0F010D[98110000]    <1> 	sidt [igdtcache]
  1634 00000F80 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000F86 E887010000          <1> 	call expdump
  1636 00000F8B 0F0105[98110000]    <1> 	sgdt [igdtcache]
  1637 00000F92 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000F98 E875010000          <1> 	call expdump
  1639 00000F9D 0F00C1              <1> 	sldt ecx
  1640 00000FA0 E86D010000          <1> 	call expdump
  1641 00000FA5 8B35[79110000]      <1> 	mov esi, [esploc]
  1642 00000FAB 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FB0 81C710000000        <1> 	add edi, 16
  1644 00000FB6 893D[94110000]      <1> 	mov [codelocend], edi
  1645 00000FBC 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FC2 893D[90110000]      <1> 	mov [codeloc], edi
  1648 00000FC8 8B0F                <1> 	mov ecx, [edi]
  1649 00000FCA E843010000          <1> 	call expdump
  1650 00000FCF 8B3D[90110000]      <1> 	mov edi, [codeloc]
  1651 00000FD5 81C704000000        <1> 	add edi, 4
  1652 00000FDB 3B3D[94110000]      <1> 	cmp edi, [codelocend]
  1653 00000FE1 72DF                <1> 	jb dumpcodeloop
  1654 00000FE3 BE[A3100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00000FE8 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
  1657 00000FEF 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 00000FF1 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1660 00000FF8 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1661 00000FFF 66B80100            <1> 	mov ax, 1
  1662 00001003 6631DB              <1> 	xor bx, bx
  1663 00001006 E84F640000          <1> 	call showstring2
  1664 0000100B E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 00001010 E8110D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001015 30C0                <1> 	xor al, al
  1670 00001017 E8E6120000          <1> 	call rdcharint
  1671 0000101C 803D[8F110000]03    <1> 	cmp byte [intprob], 3
  1672 00001023 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001025 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
  1675 0000102C 7427                <1> 	je nodebuggui
  1676 0000102E 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1677 00001035 66891D[056E0000]    <1> 	mov [background], bx
  1678 0000103C 6631DB              <1> 	xor bx, bx
  1679 0000103F C605[23580000]00    <1> 	mov byte [mousedisabled], 0
  1680 00001046 E86E5D0000          <1> 	call guiclear
  1681 0000104B E8B95D0000          <1> 	call reloadallgraphics
  1682 00001050 E803180000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001055 8B35[7D110000]      <1> 	mov esi, [espfirst]
  1686 0000105B 89F4                <1> 	mov esp, esi
  1687 0000105D 61                  <1> 	popad
  1688 0000105E 17                  <1> 	pop ss
  1689 0000105F 0FA9                <1> 	pop gs
  1690 00001061 0FA1                <1> 	pop fs
  1691 00001063 07                  <1> 	pop es
  1692 00001064 1F                  <1> 	pop ds
  1693 00001065 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 00001066 61                  <1> 	popad
  1696 00001067 17                  <1> 	pop ss
  1697 00001068 0FA9                <1> 	pop gs
  1698 0000106A 0FA1                <1> 	pop fs
  1699 0000106C 07                  <1> 	pop es
  1700 0000106D 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 0000106E 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
  1703 00001075 7427                <1> 	je returnunhandgui
  1704 00001077 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1705 0000107E 66891D[056E0000]    <1> 	mov [background], bx
  1706 00001085 6631DB              <1> 	xor bx, bx
  1707 00001088 C605[23580000]00    <1> 	mov byte [mousedisabled], 0
  1708 0000108F E8255D0000          <1> 	call guiclear
  1709 00001094 E8705D0000          <1> 	call reloadallgraphics
  1710 00001099 E8BA170000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 0000109E E9F91B0000          <1> 	jmp nwcmd
  1714 000010A3 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010AC 737420616E79207072- <1>
  1716 000010B5 6F626C656D7320696E- <1>
  1717 000010BE 207468652049737375- <1>
  1718 000010C7 65732073656374696F- <1>
  1719 000010D0 6E20617420736F6C6C- <1>
  1720 000010D9 65726F732E676F6F67- <1>
  1721 000010E2 6C65636F64652E636F- <1>
  1722 000010EB 6D0A                <1>
  1723 000010ED 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 000010F6 206B657920746F2072- <1>
  1725 000010FF 657475726E20746F20- <1>
  1726 00001108 536F6C6C65724F530A- <1>
  1727 00001111 00                  <1>
  1728                              <1> expdump:
  1729 00001112 8B35[81110000]      <1> 	mov esi, [esiloc]
  1730 00001118 89F7                <1> 	mov edi, esi
  1731 0000111A 81C70F000000        <1> 	add edi, 15
  1732 00001120 81C604000000        <1> 	add esi, 4
  1733 00001126 893D[81110000]      <1> 	mov [esiloc], edi
  1734 0000112C 81EF03000000        <1> 	sub edi, 3
  1735 00001132 E8CC1F0000          <1> 	call converthex
  1736 00001137 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 0000113D 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
  1739 00001144 0F8429000000        <1> 	je near expdumptext
  1740 0000114A 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1741 00001151 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1742 00001158 66B80100            <1> 	mov ax, 1
  1743 0000115C 6631DB              <1> 	xor bx, bx
  1744 0000115F E8F6620000          <1> 	call showstring2
  1745 00001164 66890D[89110000]    <1> 	mov [locunhandy], cx
  1746 0000116B 668915[8B110000]    <1> 	mov [locunhandx], dx
  1747 00001172 C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 00001173 E8AE0B0000          <1> 	call print
  1751 00001178 C3                  <1> 	ret
  1752 00001179 00000000            <1> esploc dd 0
  1753 0000117D 00000000            <1> espfirst dd 0
  1754 00001181 00000000            <1> esiloc dd 0
  1755 00001185 00000000            <1> esiregbuf dd 0
  1756 00001189 0100                <1> locunhandy dw 1
  1757 0000118B 0100                <1> locunhandx dw 1
  1758 0000118D 0000                <1> backgroundcache dw 0
  1759 0000118F 00                  <1> intprob db 0
  1760 00001190 00000000            <1> codeloc dd 0
  1761 00001194 00000000            <1> codelocend dd 0
  1762 00001198 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 0000119E 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011A7 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011AD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011B6 303030202000<rept>  <1>
  1769 00001216 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 0000121F 303030FF0A00        <1>
  1771 00001225 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 0000122E 303030202000<rept>  <1>
  1773 0000128E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 00001297 303030FF0A00        <1>
  1775 0000129D FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012A6 303030202000<rept>  <1>
  1777 00001306 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 0000130F 303030FF0A00        <1>
  1779 00001315 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 0000131E 303030202000<rept>  <1>
  1781 0000137E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 00001387 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 0000138D 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 00001396 303030202000        <1>
  1786 0000139C 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013A5 303030202000        <1>
  1788 000013AB 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013B4 303030FF0A00        <1>
  1790 000013BA 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013C3 303030202000        <1>
  1792 000013C9 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 000013D2 303030202000        <1>
  1794 000013D8 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 000013E1 303030202000        <1>
  1796 000013E7 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 000013F0 303030202000        <1>
  1798 000013F6 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 000013FF 303030FF0A00        <1>
  1800 00001405 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 0000140E 303030202000        <1>
  1802 00001414 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 0000141D 303030202000        <1>
  1804 00001423 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 0000142C 303030202000        <1>
  1806 00001432 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 0000143B 303030FF0A00        <1>
  1808 00001441 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 0000144A 303030202000        <1>
  1810 00001450 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 00001459 303030202000        <1>
  1812 0000145F 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 00001468 303030202000        <1>
  1814 0000146E 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 00001477 303030FF0A00        <1>
  1816 0000147D 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 00001486 303030202000        <1>
  1818 0000148C 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 00001495 303030202000        <1>
  1820 0000149B 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014A4 303030202000        <1>
  1822 000014AA 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014B3 303030FF0A00        <1>
  1824 000014B9 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014C2 303030202000        <1>
  1826 000014C8 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 000014D1 303030202000        <1>
  1828 000014D7 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 000014E0 303030202000        <1>
  1830 000014E6 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 000014EF 303030FF0A00        <1>
  1832 000014F5 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 000014FE 303030202000<rept>  <1>
  1834 00001513 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 0000151C 30303020FF00        <1>
  1836 00001522 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 0000152B 3030305D2000        <1>
  1838 00001531 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 0000153A 303030202000<rept>  <1>
  1840 0000155E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 00001567 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 0000156D [B1150000]          <1> 			dd err0
  1846 00001571 [15160000]          <1> 			dd err1
  1847 00001575 [76160000]          <1> 			dd err2
  1848 00001579 [CB160000]          <1> 			dd err3
  1849 0000157D [2F170000]          <1> 			dd err4
  1850 00001581 [81170000]          <1> 			dd err5
  1851 00001585 [EB170000]          <1> 			dd err6
  1852 00001589 [53180000]          <1> 			dd err7
  1853 0000158D [9D180000]          <1> 			dd err8
  1854 00001591 [FA180000]          <1> 			dd err9
  1855 00001595 [53190000]          <1> 			dd err10
  1856 00001599 [9E190000]          <1> 			dd err11
  1857 0000159D [EE190000]          <1> 			dd err12
  1858 000015A1 [471A0000]          <1> 			dd err13
  1859 000015A5 [AA1A0000]          <1> 			dd err14
  1860 000015A9 [E61A0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015AD [711B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015B1 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015BA 6279207A65726F3A0A  <1>
  1866 000015C3 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1867 000015CC 6C79206C696D2061F6- <1>
  1868 000015D5 78203D20EC20776865- <1>
  1869 000015DE 6E206120697320616E- <1>
  1870 000015E7 79207265616C206E75- <1>
  1871 000015F0 6D6265722E20486170- <1>
  1872 000015F9 707920456173746572- <1>
  1873 00001602 210A                <1>
  1874 00001604 202020202020202020- <1> 		db "            x",26,"0",10,0
  1875 0000160D 202020781A300A00    <1>
  1876                              <1> 		
  1877 00001615 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1878 0000161E 65702F427265616B70- <1>
  1879 00001627 6F696E743A0A        <1>
  1880 0000162D 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1881 00001636 696E74206661756C74- <1>
  1882 0000163F 2C20627265616B706F- <1>
  1883 00001648 696E7420747261702C- <1>
  1884 00001651 206F722073696E676C- <1>
  1885 0000165A 652D73746570207472- <1>
  1886 00001663 617020776173207472- <1>
  1887 0000166C 696767657265642E0A- <1>
  1888 00001675 00                  <1>
  1889                              <1> 		
  1890 00001676 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1891 0000167F 6C6520696E74657272- <1>
  1892 00001688 7570743A0A          <1>
  1893 0000168D 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1894 00001696 6520696E7465727275- <1>
  1895 0000169F 707420776173207472- <1>
  1896 000016A8 696767657265642074- <1>
  1897 000016B1 68617420636F756C64- <1>
  1898 000016BA 206E6F74206265206D- <1>
  1899 000016C3 61736B65642E0A00    <1>
  1900                              <1> 		
  1901 000016CB 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1902 000016D4 743A0A              <1>
  1903 000016D7 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1904 000016E0 727275707420697320- <1>
  1905 000016E9 7573656420696E2070- <1>
  1906 000016F2 726F6772616D732074- <1>
  1907 000016FB 6F2073686F77207468- <1>
  1908 00001704 6520737461636B2061- <1>
  1909 0000170D 6E6420726567697374- <1>
  1910 00001716 65727320616E642063- <1>
  1911 0000171F 616E2062650A        <1>
  1912 00001725 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1913 0000172E 00                  <1>
  1914                              <1> 		
  1915 0000172F 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1916 00001738 0A                  <1>
  1917 00001739 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1918 00001742 73736F722072616E20- <1>
  1919 0000174B 696E746F20616E2049- <1>
  1920 00001754 4E544F20696E737472- <1>
  1921 0000175D 756374696F6E207769- <1>
  1922 00001766 746820746865206F76- <1>
  1923 0000176F 6572666C6F7720666C- <1>
  1924 00001778 6167207365742E0A00  <1>
  1925                              <1> 		
  1926 00001781 426F756E6473206368- <1> err5	db "Bounds check:",10
  1927 0000178A 65636B3A0A          <1>
  1928 0000178F 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1929 00001798 73736F72207265626F- <1>
  1930 000017A1 756E6465642066726F- <1>
  1931 000017AA 6D206120424F554E44- <1>
  1932 000017B3 20696E737472756374- <1>
  1933 000017BC 696F6E2072756E206F- <1>
  1934 000017C5 6E20616E206F706572- <1>
  1935 000017CE 616E64207468617420- <1>
  1936 000017D7 776173206F75740A    <1>
  1937 000017DF 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1938 000017E8 2E0A00              <1>
  1939                              <1> 		
  1940 000017EB 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1941 000017F4 70636F64653A0A      <1>
  1942 000017FB 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1943 00001804 73736F722068617320- <1>
  1944 0000180D 6E6F20696465612077- <1>
  1945 00001816 686174206974207761- <1>
  1946 0000181F 7320747279696E6720- <1>
  1947 00001828 746F20657865637574- <1>
  1948 00001831 652E20446F6E277420- <1>
  1949 0000183A 72756E205353453420- <1>
  1950 00001843 636F64650A          <1>
  1951 00001848 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1952 00001851 0A00                <1>
  1953                              <1> 		
  1954 00001853 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1955 0000185C 6F72206E6F74206176- <1>
  1956 00001865 61696C61626C653A0A  <1>
  1957 0000186E 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1958 00001877 206B6E6F7720746865- <1>
  1959 00001880 7920646F6E2774206D- <1>
  1960 00001889 616B652074686F7365- <1>
  1961 00001892 20616E796D6F726521- <1>
  1962 0000189B 0A00                <1>
  1963                              <1> 		
  1964 0000189D 446F75626C65206661- <1> err8	db "Double fault:",10
  1965 000018A6 756C743A0A          <1>
  1966 000018AB 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1967 000018B4 74696F6E2068616E64- <1>
  1968 000018BD 6C657220636F756C64- <1>
  1969 000018C6 206E6F742068616E64- <1>
  1970 000018CF 6C6520746861742069- <1>
  1971 000018D8 7420636F756C64206E- <1>
  1972 000018E1 6F742068616E646C65- <1>
  1973 000018EA 20616E206578636570- <1>
  1974 000018F3 74696F6E2E0A00      <1>
  1975                              <1> 		
  1976 000018FA 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1977 00001903 6F72207365676D656E- <1>
  1978 0000190C 74206F76657272756E- <1>
  1979 00001915 3A0A00              <1>
  1980 00001918 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1981 00001921 722068617070656E73- <1>
  1982 0000192A 20696E206D6F646572- <1>
  1983 00001933 6E20636F6D70757465- <1>
  1984 0000193C 72732C20616E64206E- <1>
  1985 00001945 657665722073686F75- <1>
  1986 0000194E 6C642E0A00          <1>
  1987                              <1> 
  1988 00001953 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1989 0000195C 53533A0A            <1>
  1990 00001960 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1991 00001969 686174207761732073- <1>
  1992 00001972 776974636865642074- <1>
  1993 0000197B 6F20697320696E7661- <1>
  1994 00001984 6C69642E204E6F7468- <1>
  1995 0000198D 696E672066756E6E79- <1>
  1996 00001996 20686572652E0A00    <1>
  1997                              <1> 		
  1998 0000199E 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1999 000019A7 6F742070726573656E- <1>
  2000 000019B0 743A0A              <1>
  2001 000019B3 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2002 000019BC 6E7420626974206F66- <1>
  2003 000019C5 20746865207365676D- <1>
  2004 000019CE 656E74206465736372- <1>
  2005 000019D7 6970746F7220697320- <1>
  2006 000019E0 73657420746F207A65- <1>
  2007 000019E9 726F2E0A00          <1>
  2008                              <1> 		
  2009 000019EE 537461636B20657863- <1> err12	db "Stack exception:",10
  2010 000019F7 657074696F6E3A0A    <1>
  2011 000019FF 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2012 00001A08 7363726970746F7220- <1>
  2013 00001A11 697320696E76616C69- <1>
  2014 00001A1A 64206F72206E6F7420- <1>
  2015 00001A23 70726573656E74206F- <1>
  2016 00001A2C 7220697473206C696D- <1>
  2017 00001A35 697420697320746F6F- <1>
  2018 00001A3E 20736D616C6C2E0A00  <1>
  2019                              <1> 		
  2020 00001A47 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2021 00001A50 726F74656374696F6E- <1>
  2022 00001A59 2076696F6C6174696F- <1>
  2023 00001A62 6E3A0A              <1>
  2024 00001A65 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2025 00001A6E 746564207468652063- <1>
  2026 00001A77 6F6D70757465722E20- <1>
  2027 00001A80 537465702061776179- <1>
  2028 00001A89 20736C6F776C792E20- <1>
  2029 00001A92 546865204642492069- <1>
  2030 00001A9B 73206F6E2069747320- <1>
  2031 00001AA4 7761792E0A00        <1>
  2032                              <1> 		
  2033 00001AAA 50616765206661756C- <1> err14	db "Page fault:",10
  2034 00001AB3 743A0A              <1>
  2035 00001AB6 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2036 00001ABF 746861742077617320- <1>
  2037 00001AC8 726571756573746564- <1>
  2038 00001AD1 20776173206E6F7420- <1>
  2039 00001ADA 617661696C61626C65- <1>
  2040 00001AE3 2E0A00              <1>
  2041                              <1> 		
  2042 00001AE6 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2043 00001AEF 666F7220506C616E20- <1>
  2044 00001AF8 523A0A              <1>
  2045 00001AFB 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2046 00001B04 727275707420697320- <1>
  2047 00001B0D 726573657276656420- <1>
  2048 00001B16 666F72207573616765- <1>
  2049 00001B1F 206F6E6C7920627920- <1>
  2050 00001B28 746865206D696C6974- <1>
  2051 00001B31 617279207768656E20- <1>
  2052 00001B3A 6974206973206E6563- <1>
  2053 00001B43 6573736172790A      <1>
  2054 00001B4A 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2055 00001B53 746520612066756C6C- <1>
  2056 00001B5C 2D7363616C6520636F- <1>
  2057 00001B65 757020642782746174- <1>
  2058 00001B6E 2E0A00              <1>
  2059                              <1> 		
  2060 00001B71 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2061 00001B7A 68656C6C206A757374- <1>
  2062 00001B83 2068617070656E6564- <1>
  2063 00001B8C 3F2049732065766572- <1>
  2064 00001B95 796F6E65206F6B6179- <1>
  2065 00001B9E 3F2048617264206472- <1>
  2066 00001BA7 6976653F2056696465- <1>
  2067 00001BB0 6F20636172643F0A    <1>
  2068 00001BB8 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2069 00001BC1 726520796F75207468- <1>
  2070 00001BCA 6572653F0A00        <1>
  2071                              <1> %else
  2072                              <1> unhand:	
  2073                              <1> 	%assign i 0
  2074                              <1> 	%rep 32
  2075                              <1> 	mov byte [intprob], i
  2076                              <1> 	jmp unhand2
  2077                              <1> 	%assign i i+1
  2078                              <1> 	%endrep
  2079                              <1> unhand2:
  2080                              <1> 	cmp byte [intprob], 3
  2081                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2082                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2083                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2084                              <1> 	mov bl, [intprob]
  2085                              <1> 	jmp exitprog
  2086                              <1> intprob db 0
  2087                              <1> %endif
  2088                                      %include "source/ints.asm"
  2089                              <1> newints:	;for great justice
  2090 00001BD0 80FC00              <1> 	cmp ah, 0
  2091 00001BD3 0F849A000000        <1> 	je near exitprog   ;kills app
  2092 00001BD9 80FC01              <1> 	cmp ah, 1
  2093 00001BDC 0F8419010000        <1> 	je near prntstr  ;print string
  2094 00001BE2 80FC02              <1> 	cmp ah, 2
  2095 00001BE5 0F84B1010000        <1> 	je near readstr	;read string
  2096 00001BEB 80FC03              <1> 	cmp ah, 3
  2097 00001BEE 0F84D1010000        <1> 	je near clearscrn	;clear screen
  2098 00001BF4 80FC04              <1> 	cmp ah, 4
  2099 00001BF7 0F8446020000        <1> 	je near prntreadstr	;read and print string
  2100 00001BFD 80FC05              <1> 	cmp ah, 5
  2101 00001C00 0F84F0060000        <1> 	je near readchar	;get char
  2102 00001C06 80FC06              <1> 	cmp ah, 6
  2103 00001C09 0F8457070000        <1> 	je near prntchar	;print char
  2104 00001C0F 80FC07              <1> 	cmp ah, 7
  2105 00001C12 0F8470090000        <1> 	je near openfile	;read file
  2106                              <1> ;	cmp ah, 8
  2107                              <1> ;	je near closefile	;close file
  2108 00001C18 80FC09              <1> 	cmp ah, 9
  2109 00001C1B 0F8471090000        <1> 	je near num2str	;convert number to string
  2110 00001C21 80FC0A              <1> 	cmp ah, 10
  2111 00001C24 0F8480090000        <1> 	je near str2num	;convert string to number
  2112                              <1> %ifdef threads.included
  2113 00001C2A 80FC0B              <1> 	cmp ah, 11
  2114 00001C2D 0F8483090000        <1> 	je near forkthread	;create thread
  2115                              <1> %endif
  2116 00001C33 80FC0C              <1> 	cmp ah, 12
  2117 00001C36 0F84510A0000        <1> 	je near gettime	;get time
  2118 00001C3C 80FC0D              <1> 	cmp ah, 13
  2119 00001C3F 0F845D0A0000        <1> 	je near settime	;set time
  2120 00001C45 80FC0E              <1> 	cmp ah, 14
  2121 00001C48 0F84640A0000        <1> 	je near runcmd	;run program
  2122 00001C4E 80FC0F              <1> 	cmp ah, 15
  2123 00001C51 0F84700A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2124 00001C57 80FC10              <1> 	cmp ah, 16
  2125 00001C5A 0F84920A0000        <1> 	je near hooksig	;hook code to a signal
  2126                              <1> %ifdef gui.included
  2127 00001C60 80FC11              <1> 	cmp ah, 17
  2128 00001C63 0F84990A0000        <1> 	je near guiint	;GUI operations
  2129                              <1> %endif
  2130                              <1> %ifdef sound.included
  2131                              <1> 	cmp ah, 18
  2132                              <1> 	je near soundint	;sound operations
  2133                              <1> %endif
  2134                              <1> %ifdef network.included
  2135 00001C69 80FC13              <1> 	cmp ah, 19
  2136 00001C6C 0F84E10B0000        <1> 	je near netint	;networking operations
  2137                              <1> %endif
  2138 00001C72 CF                  <1> 	iret
  2139                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2140                              <2> exitprog:
  2141 00001C73 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2142 00001C77 8ED8                <2> 	mov ds, ax
  2143 00001C79 8EC0                <2> 	mov es, ax
  2144 00001C7B 8EE0                <2> 	mov fs, ax
  2145 00001C7D 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2146 00001C81 8EE8                <2> 	mov gs, ax
  2147 00001C83 C705[20670000]0000- <2> 	mov dword [currentthread], 0
  2148 00001C8B 0000                <2>
  2149 00001C8D C705[1B670000]0400- <2> 	mov dword [lastthread], 4
  2150 00001C95 0000                <2>
  2151 00001C97 C605[1F670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2152 00001C9E 8B25[26120100]      <2> 	mov esp, [previousstack] ;and this
  2153 00001CA4 81FB00000000        <2> 	cmp ebx, 0
  2154 00001CAA 0F8501000000        <2> 	jne near .error
  2155 00001CB0 C3                  <2> 	ret
  2156                              <2> .error:
  2157 00001CB1 89D9                <2> 	mov ecx, ebx
  2158 00001CB3 B006                <2> 	mov al, 6
  2159 00001CB5 A2[61310000]        <2> 	mov [firsthexshown], al
  2160 00001CBA 51                  <2> 	push ecx
  2161 00001CBB BE[D61C0000]        <2> 	mov esi, .msg1
  2162 00001CC0 E855000000          <2> 	call printhighlight
  2163 00001CC5 59                  <2> 	pop ecx
  2164 00001CC6 E8AB140000          <2> 	call showhex
  2165 00001CCB BE[EB1C0000]        <2> 	mov esi, .msg2
  2166 00001CD0 E845000000          <2> 	call printhighlight
  2167 00001CD5 C3                  <2> 	ret
  2168                              <2> 	
  2169 00001CD6 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2170 00001CDF 7461747573206F6620- <2>
  2171 00001CE8 307800              <2>
  2172 00001CEB 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2173 00001CF4 726E65642E0A00      <2>
  2174                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2175                              <2> prntstr:
  2176 00001CFB 30E4                <2> xor ah, ah
  2177 00001CFD E82B000000          <2> call printint
  2178 00001D02 E9A1E5FFFF          <2> jmp timerinterrupt
  2179                              <2> 
  2180                              <2> 	printquiet:
  2181 00001D07 6631C0              <2> 		xor ax, ax
  2182 00001D0A 66A3[9A1D0000]      <2> 		mov [endkeyprint], ax
  2183 00001D10 66BB0700            <2> 		mov bx, 7
  2184 00001D14 E82D000000          <2> 		call printint.b
  2185 00001D19 C3                  <2> 		ret
  2186                              <2> 
  2187                              <2> 	printhighlight:
  2188 00001D1A 6631C0              <2> 		xor ax, ax
  2189 00001D1D 66BBF000            <2> 		mov bx, 0xF0
  2190 00001D21 E907000000          <2> 		jmp printint
  2191                              <2> 
  2192                              <2>     print:
  2193 00001D26 6631C0              <2> 		xor ax, ax
  2194 00001D29 66BB0700            <2> 		mov bx, 7
  2195                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2196 00001D2D 56                  <2> 		push esi
  2197 00001D2E 66A3[9A1D0000]      <2> 		mov [endkeyprint], ax
  2198 00001D34 E80D000000          <2> 		call .b
  2199 00001D39 89F1                <2> 		mov ecx, esi
  2200 00001D3B 5F                  <2> 		pop edi
  2201 00001D3C 29F9                <2> 		sub ecx, edi
  2202 00001D3E 51                  <2> 		push ecx
  2203 00001D3F E8140B0000          <2> 		call termcopy
  2204 00001D44 59                  <2> 		pop ecx
  2205 00001D45 C3                  <2> 		ret
  2206                              <2> 	.b:	
  2207 00001D46 53                  <2> 		push ebx
  2208 00001D47 31C0                <2> 		xor eax, eax
  2209 00001D49 8A06                <2> 		mov al, [esi]
  2210 00001D4B 3CFF                <2> 		cmp al, 0xFF
  2211 00001D4D 7438                <2> 		je .doneutf
  2212 00001D4F 3CC0                <2> 		cmp al, 0xC0
  2213 00001D51 7234                <2> 		jb .doneutf
  2214 00001D53 3CE0                <2> 		cmp al, 0xE0
  2215 00001D55 721D                <2> 		jb .two
  2216 00001D57 46                  <2> 		inc esi
  2217 00001D58 668B0E              <2> 		mov cx, [esi]
  2218 00001D5B 46                  <2> 		inc esi
  2219 00001D5C C0E004              <2> 		shl al, 4
  2220 00001D5F 66C1E102            <2> 		shl cx, 2
  2221 00001D63 C0ED02              <2> 		shr ch, 2
  2222 00001D66 66C1E902            <2> 		shr cx, 2
  2223 00001D6A 08C5                <2> 		or ch, al
  2224 00001D6C 6689C8              <2> 		mov ax, cx
  2225 00001D6F E913000000          <2> 		jmp .doneutf
  2226                              <2> 	.two:
  2227 00001D74 8A2E                <2> 		mov ch, [esi]
  2228 00001D76 46                  <2> 		inc esi
  2229 00001D77 8A0E                <2> 		mov cl, [esi]
  2230 00001D79 66C1E102            <2> 		shl cx, 2
  2231 00001D7D C0ED02              <2> 		shr ch, 2
  2232 00001D80 66C1E902            <2> 		shr cx, 2
  2233 00001D84 6689C8              <2> 		mov ax, cx
  2234                              <2> 	.doneutf:
  2235 00001D87 5B                  <2> 		pop ebx
  2236 00001D88 663B05[9A1D0000]    <2> 		cmp ax, [endkeyprint]
  2237 00001D8F 7408                <2> 		je .done
  2238 00001D91 E8F9050000          <2> 		call prcharq
  2239 00001D96 46                  <2> 		inc esi
  2240 00001D97 EBAD                <2> 		jmp .b
  2241                              <2> 	.done:
  2242 00001D99 C3                  <2> 		ret
  2243                              <2> 
  2244 00001D9A 0000                <2> endkeyprint dw 0
  2245                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2246                              <2> readstr:
  2247 00001D9C E805000000          <2> call readint
  2248 00001DA1 E902E5FFFF          <2> jmp timerinterrupt
  2249                              <2> 
  2250                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2251 00001DA6 89C3                <2> 		mov ebx, eax
  2252                              <2> 	.b:
  2253 00001DA8 53                  <2> 		push ebx
  2254 00001DA9 57                  <2> 		push edi
  2255 00001DAA 56                  <2> 		push esi
  2256 00001DAB 30C0                <2> 		xor al, al
  2257 00001DAD E850050000          <2> 		call rdcharint
  2258 00001DB2 5E                  <2> 		pop esi
  2259 00001DB3 8806                <2> 		mov [esi], al
  2260 00001DB5 46                  <2> 		inc esi
  2261 00001DB6 5F                  <2> 		pop edi
  2262 00001DB7 5B                  <2> 		pop ebx
  2263 00001DB8 39FE                <2> 		cmp esi, edi
  2264 00001DBA 7304                <2> 		jae .done
  2265 00001DBC 38D8                <2> 		cmp al, bl
  2266 00001DBE 75E8                <2> 		jne .b
  2267                              <2> 	.done:
  2268 00001DC0 4E                  <2> 		dec esi
  2269 00001DC1 C60600              <2> 		mov byte [esi], 0
  2270 00001DC4 C3                  <2> 		ret
  2271                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2272                              <2> clearscrn:
  2273 00001DC5 E805000000          <2> call clear
  2274 00001DCA E9D9E4FFFF          <2> jmp timerinterrupt
  2275                              <2> %ifdef io.serial
  2276                              <2> clear:
  2277                              <2> 	ret
  2278                              <2> %else
  2279                              <2> clear:
  2280 00001DCF 668B0D[82250000]    <2> 		mov cx, [charxy]
  2281 00001DD6 BF[BC2F0100]        <2> 		mov edi, videobuf
  2282 00001DDB 31C0                <2> 		xor eax, eax
  2283 00001DDD A3[78250000]        <2> 		mov [linebeginpos], eax
  2284 00001DE2 A3[7C250000]        <2> 		mov [videobufpos], eax
  2285 00001DE7 6631D2              <2> 		xor dx, dx
  2286 00001DEA 66A3[80250000]      <2> 		mov [charpos], ax
  2287 00001DF0 66B80700            <2> 		mov ax, 7
  2288 00001DF4 C1E010              <2> 		shl eax, 16
  2289                              <2> 	clearb:
  2290 00001DF7 8907                <2> 		mov [edi], eax
  2291 00001DF9 81C704000000        <2> 		add edi, 4
  2292 00001DFF FEC9                <2> 		dec cl
  2293 00001E01 80F900              <2> 		cmp cl, 0
  2294 00001E04 75F1                <2> 		jne clearb
  2295 00001E06 8A0D[82250000]      <2> 		mov cl, [charxy]
  2296 00001E0C FECD                <2> 		dec ch
  2297 00001E0E 80FD00              <2> 		cmp ch, 0
  2298 00001E11 75E4                <2> 		jne clearb
  2299                              <2> 	cleardouble:
  2300 00001E13 BF[04050200]        <2> 		mov edi, videobuf2
  2301 00001E18 668B0D[82250000]    <2> 		mov cx, [charxy]
  2302 00001E1F 31C0                <2> 		xor eax, eax
  2303                              <2> 	clearc:
  2304 00001E21 8907                <2> 		mov [edi], eax
  2305 00001E23 81C704000000        <2> 		add edi, 4
  2306 00001E29 FEC9                <2> 		dec cl
  2307 00001E2B 80F900              <2> 		cmp cl, 0
  2308 00001E2E 75F1                <2> 		jne clearc
  2309 00001E30 8A0D[82250000]      <2> 		mov cl, [charxy]
  2310 00001E36 FECD                <2> 		dec ch
  2311 00001E38 80FD00              <2> 		cmp ch, 0
  2312 00001E3B 75E4                <2> 		jne clearc
  2313 00001E3D E8160A0000          <2> 		call termcopy
  2314 00001E42 C3                  <2> 		ret
  2315                              <2> %endif
  2316                              <2> 		
  2317                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2318                              <2> prntreadstr:
  2319 00001E43 E80B000000          <2> call rdprint
  2320 00001E48 E95BE4FFFF          <2> jmp timerinterrupt
  2321                              <2> 
  2322                              <2> readline:
  2323 00001E4D B00A                <2>   mov al, 10
  2324 00001E4F 66BB0700            <2>   mov bx, 7
  2325                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2326 00001E53 E80F000000          <2> 	call rdprintdos
  2327 00001E58 50                  <2> 	push eax
  2328 00001E59 A0[E2220000]        <2> 	mov al, [endkeyrdpr]
  2329 00001E5E 30E4                <2> 	xor ah, ah
  2330 00001E60 E817050000          <2> 	call prcharint
  2331 00001E65 58                  <2> 	pop eax
  2332 00001E66 C3                  <2> 	ret
  2333                              <2> 
  2334                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2335 00001E67 8935[EB220000]      <2> 		mov [buftxtloc], esi
  2336 00001E6D A2[E2220000]        <2> 		mov [endkeyrdpr], al
  2337 00001E72 66891D[E3220000]    <2> 		mov [modkeyrdpr], bx
  2338 00001E79 8935[E5220000]      <2> 		mov [firstesirdpr], esi
  2339 00001E7F 893D[EF220000]      <2> 		mov [endbufferrdpr], edi
  2340 00001E85 8B3D[58DA0200]      <2> 		mov edi, [commandsentered]
  2341 00001E8B 893D[54DA0200]      <2> 		mov [commandlistentries], edi
  2342                              <2> 	rdprintb:
  2343 00001E91 56                  <2> 		push esi
  2344 00001E92 B001                <2> 		mov al, 1
  2345 00001E94 E869040000          <2> 		call rdcharint
  2346 00001E99 8A25[62230000]      <2> 		mov ah, [lastkey + 2]
  2347 00001E9F 88E1                <2> 		mov cl, ah
  2348 00001EA1 5E                  <2> 		pop esi
  2349                              <2> %ifdef io.serial
  2350                              <2> 		cmp ah, 0x41
  2351                              <2> 		je near rdprup
  2352                              <2> 		cmp ah, 0x42
  2353                              <2> 		je near rdprdown
  2354                              <2> 		cmp ah, 0x43
  2355                              <2> 		je near rdprright
  2356                              <2> 		cmp ah, 0x44
  2357                              <2> 		je near rdprleft
  2358                              <2> 		cmp ah, 0x31
  2359                              <2> 		je near rdprhome
  2360                              <2> 		cmp ah, 0x48
  2361                              <2> 		je near rdprhome
  2362                              <2> 		cmp ah, 0x46
  2363                              <2> 		je near rdprend
  2364                              <2> 		cmp ah, 0x33
  2365                              <2> 		je near rdprdel
  2366                              <2> 		cmp ah, 0x34
  2367                              <2> 		je near rdprend
  2368                              <2> %else
  2369 00001EA2 803D[DB5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2370 00001EA9 753F                <2> 		jne notspecialrdprnt
  2371 00001EAB 80FC53              <2> 		cmp ah, 0x53
  2372 00001EAE 0F84B1030000        <2> 		je near rdprdel
  2373 00001EB4 80FC47              <2> 		cmp ah, 0x47
  2374 00001EB7 0F847E010000        <2> 		je near rdprhome
  2375 00001EBD 80FC4F              <2> 		cmp ah, 0x4F
  2376 00001EC0 0F8494010000        <2> 		je near rdprend
  2377 00001EC6 80FC50              <2> 		cmp ah, 0x50
  2378 00001EC9 0F8424020000        <2> 		je near rdprdown
  2379 00001ECF 80FC4D              <2> 		cmp ah, 0x4D
  2380 00001ED2 0F84C1010000        <2> 		je near rdprright
  2381 00001ED8 80FC4B              <2> 		cmp ah, 0x4B
  2382 00001EDB 0F8496010000        <2> 		je near rdprleft
  2383 00001EE1 80FC48              <2> 		cmp ah, 0x48
  2384 00001EE4 0F844C020000        <2> 		je near rdprup
  2385                              <2> 	notspecialrdprnt:
  2386                              <2> %endif
  2387 00001EEA 66A1[60230000]      <2> 		mov ax, [lastkey]
  2388 00001EF0 663D0800            <2> 		cmp ax, 8
  2389 00001EF4 0F8486030000        <2> 		je near rdprbscheck
  2390 00001EFA 663D0000            <2> 		cmp ax, 0
  2391 00001EFE 7491                <2> 		je rdprintb
  2392 00001F00 80F900              <2> 		cmp cl, 0
  2393 00001F03 748C                <2> 		je rdprintb
  2394 00001F05 663D8000            <2> 		cmp ax, 0x80
  2395 00001F09 7257                <2> 		jb .normal
  2396 00001F0B 663D0008            <2> 		cmp ax, 0x800
  2397 00001F0F 7321                <2> 		jae .three
  2398 00001F11 46                  <2> 		inc esi
  2399 00001F12 3B35[EF220000]      <2> 		cmp esi, [endbufferrdpr]
  2400 00001F18 0F83DA000000        <2> 		jae near donerdprinc
  2401 00001F1E 66C1E002            <2> 		shl ax, 2
  2402 00001F22 C0E802              <2> 		shr al, 2
  2403 00001F25 0C80                <2> 		or al, 10000000b
  2404 00001F27 80CCC0              <2> 		or ah, 11000000b
  2405 00001F2A 8866FF              <2> 		mov [esi - 1], ah
  2406 00001F2D E930000000          <2> 		jmp .normal
  2407                              <2> .three:	
  2408 00001F32 81C602000000        <2> 		add esi, 2
  2409 00001F38 3B35[EF220000]      <2> 		cmp esi, [endbufferrdpr]
  2410 00001F3E 0F83B4000000        <2> 		jae near donerdprinc
  2411 00001F44 88E1                <2> 		mov cl, ah
  2412 00001F46 C0E904              <2> 		shr cl, 4
  2413 00001F49 80C9E0              <2> 		or cl, 11100000b
  2414 00001F4C 884EFE              <2> 		mov [esi - 2], cl
  2415 00001F4F 66C1E004            <2> 		shl ax, 4
  2416 00001F53 66C1E802            <2> 		shr ax, 2
  2417 00001F57 80CC80              <2> 		or ah, 10000000b
  2418 00001F5A C0E802              <2> 		shr al, 2
  2419 00001F5D 0C80                <2> 		or al, 10000000b
  2420 00001F5F 8866FF              <2> 		mov [esi - 1], ah
  2421                              <2> .normal:
  2422 00001F62 8806                <2> 		mov [esi], al
  2423 00001F64 46                  <2> 		inc esi
  2424 00001F65 66A1[60230000]      <2> 		mov ax, [lastkey]
  2425                              <2> 	bscheckequal:
  2426 00001F6B 668B1D[E3220000]    <2> 		mov bx, [modkeyrdpr]
  2427 00001F72 803D[EA220000]00    <2> 		cmp byte [txtmask], 0
  2428 00001F79 7407                <2> 		je nomasktxt
  2429 00001F7B 30E4                <2> 		xor ah, ah
  2430 00001F7D A0[EA220000]        <2> 		mov al, [txtmask]
  2431                              <2> 	nomasktxt:
  2432 00001F82 56                  <2> 		push esi
  2433 00001F83 66A3[E0220000]      <2> 		mov [axcache], ax
  2434 00001F89 8A25[E2220000]      <2> 		mov ah, [endkeyrdpr]
  2435 00001F8F 38E0                <2> 		cmp al, ah
  2436 00001F91 7434                <2> 		je nobackprintbuftxt2
  2437 00001F93 E8E4030000          <2> 		call prcharint
  2438 00001F98 BE[A6240100]        <2> 		mov esi, buftxt2
  2439 00001F9D E865FDFFFF          <2> 		call printquiet
  2440 00001FA2 66B82000            <2> 		mov ax, " "
  2441 00001FA6 E8E4030000          <2> 		call prcharq
  2442 00001FAB 66B80800            <2> 		mov ax, 8
  2443 00001FAF 81FE[A6240100]      <2> 		cmp esi, buftxt2
  2444 00001FB5 7410                <2> 		je nobackprintbuftxt2
  2445                              <2> 	backprintbuftxt2:
  2446 00001FB7 30E4                <2> 		xor ah, ah
  2447 00001FB9 E8D1030000          <2> 		call prcharq
  2448 00001FBE 4E                  <2> 		dec esi
  2449 00001FBF 81FE[A6240100]      <2> 		cmp esi, buftxt2
  2450 00001FC5 77F0                <2> 		ja backprintbuftxt2
  2451                              <2> 	nobackprintbuftxt2:
  2452 00001FC7 3C0A                <2> 		cmp al, 10
  2453 00001FC9 7407                <2> 		je nonobackprint
  2454 00001FCB 30E4                <2> 		xor ah, ah
  2455 00001FCD E8AA030000          <2> 		call prcharint
  2456                              <2> 	nonobackprint:
  2457 00001FD2 5E                  <2> 		pop esi
  2458 00001FD3 3B35[EF220000]      <2> 		cmp esi, [endbufferrdpr]
  2459 00001FD9 0F8319000000        <2> 		jae near donerdprinc
  2460 00001FDF 66A1[E0220000]      <2> 		mov ax, [axcache]
  2461 00001FE5 8A25[E2220000]      <2> 		mov ah, [endkeyrdpr]
  2462 00001FEB 38E0                <2> 		cmp al, ah
  2463 00001FED 0F859EFEFFFF        <2> 		jne rdprintb
  2464 00001FF3 E901000000          <2> 		jmp donerdprint
  2465                              <2> 	donerdprinc:
  2466 00001FF8 46                  <2> 		inc esi
  2467                              <2> 	donerdprint:
  2468 00001FF9 4E                  <2> 		dec esi
  2469 00001FFA BF[A6240100]        <2> 		mov edi, buftxt2
  2470                              <2> 	copylaterstuff:
  2471 00001FFF 8A07                <2> 		mov al, [edi]
  2472 00002001 3C00                <2> 		cmp al, 0
  2473 00002003 7406                <2> 		je nocopylaterstuff
  2474 00002005 8806                <2> 		mov [esi], al
  2475 00002007 47                  <2> 		inc edi
  2476 00002008 46                  <2> 		inc esi
  2477 00002009 EBF4                <2> 		jmp copylaterstuff
  2478                              <2> 	nocopylaterstuff:
  2479 0000200B C60600              <2> 		mov byte [esi], 0
  2480 0000200E E80B000000          <2> 		call clearbuftxt2
  2481 00002013 89F1                <2> 		mov ecx, esi
  2482 00002015 8B3D[E5220000]      <2> 		mov edi, [firstesirdpr]
  2483 0000201B 29F9                <2> 		sub ecx, edi
  2484 0000201D C3                  <2> 		ret
  2485                              <2> 	
  2486                              <2> 	clearbuftxt2:
  2487 0000201E 30C0                <2> 		xor al, al
  2488 00002020 BF[A6240100]        <2> 		mov edi, buftxt2
  2489                              <2> 	clearbuftxt2lp:
  2490 00002025 8807                <2> 		mov [edi], al
  2491 00002027 47                  <2> 		inc edi
  2492 00002028 81FF[A6280100]      <2> 		cmp edi, buftxt
  2493 0000202E 75F5                <2> 		jne clearbuftxt2lp
  2494 00002030 C3                  <2> 		ret
  2495                              <2> 	
  2496                              <2> 	rdprintb2:
  2497 00002031 E822080000          <2> 		call termcopy
  2498 00002036 E956FEFFFF          <2> 		jmp rdprintb
  2499                              <2> 	
  2500                              <2> 	rdprhome:
  2501 0000203B 3B35[EB220000]      <2> 		cmp esi, [buftxtloc]
  2502 00002041 0F84EAFFFFFF        <2> 		je near rdprintb2
  2503 00002047 BF[A6240100]        <2> 		mov edi, buftxt2
  2504 0000204C 8A07                <2> 		mov al, [edi]
  2505 0000204E E85F020000          <2> 		call shiftbuftxt2
  2506 00002053 E837030000          <2> 		call prcharq
  2507 00002058 EBE1                <2> 		jmp rdprhome
  2508                              <2> 		
  2509                              <2> 	rdprend:
  2510 0000205A BF[A6240100]        <2> 		mov edi, buftxt2
  2511 0000205F 8A07                <2> 		mov al, [edi]
  2512 00002061 3C00                <2> 		cmp al, 0
  2513 00002063 0F84C8FFFFFF        <2> 		je near rdprintb2
  2514 00002069 8806                <2> 		mov [esi], al
  2515 0000206B E849000000          <2> 		call shiftbuftxt2lft
  2516 00002070 E81A030000          <2> 		call prcharq
  2517 00002075 EBE3                <2> 		jmp rdprend
  2518                              <2> 	
  2519                              <2> 	rdprleft:
  2520 00002077 3B35[EB220000]      <2> 		cmp esi, [buftxtloc]
  2521 0000207D 0F840EFEFFFF        <2> 		je near rdprintb
  2522 00002083 BF[A6240100]        <2> 		mov edi, buftxt2
  2523 00002088 8A07                <2> 		mov al, [edi]
  2524 0000208A E823020000          <2> 		call shiftbuftxt2
  2525 0000208F E8E8020000          <2> 		call prcharint
  2526 00002094 E9F8FDFFFF          <2> 		jmp rdprintb
  2527                              <2> 		
  2528                              <2> 	rdprright:
  2529 00002099 BF[A6240100]        <2> 		mov edi, buftxt2
  2530 0000209E 8A07                <2> 		mov al, [edi]
  2531 000020A0 3C00                <2> 		cmp al, 0
  2532 000020A2 0F84E9FDFFFF        <2> 		je near rdprintb
  2533 000020A8 8806                <2> 		mov [esi], al
  2534 000020AA E80A000000          <2> 		call shiftbuftxt2lft
  2535 000020AF E8C8020000          <2> 		call prcharint
  2536 000020B4 E9D8FDFFFF          <2> 		jmp rdprintb
  2537                              <2> 		
  2538                              <2> 	shiftbuftxt2lft:
  2539 000020B9 55                  <2> 		push ebp
  2540 000020BA 89FD                <2> 		mov ebp, edi
  2541                              <2> 	.lp:
  2542 000020BC 3C00                <2> 		cmp al, 0
  2543 000020BE 7408                <2> 		je noshiftbuftxt2lft
  2544 000020C0 47                  <2> 		inc edi
  2545 000020C1 8A07                <2> 		mov al, [edi]
  2546 000020C3 8847FF              <2> 		mov [edi - 1], al
  2547 000020C6 EBF4                <2> 		jmp .lp
  2548                              <2> 	noshiftbuftxt2lft:
  2549 000020C8 8A4500              <2> 		mov al, [ebp]
  2550 000020CB 5D                  <2> 		pop ebp
  2551 000020CC 3CC0                <2> 		cmp al, 0xC0
  2552 000020CE 7304                <2> 		jae .nofix
  2553 000020D0 3C80                <2> 		cmp al, 0x80
  2554 000020D2 73E5                <2> 		jae shiftbuftxt2lft
  2555                              <2> 	.nofix:
  2556 000020D4 8A06                <2> 		mov al, [esi]
  2557 000020D6 30E4                <2> 		xor ah, ah
  2558 000020D8 46                  <2> 		inc esi
  2559 000020D9 668B1D[E3220000]    <2> 		mov bx, [modkeyrdpr]
  2560 000020E0 C3                  <2> 		ret
  2561                              <2> 		
  2562                              <2> 	rdprdownbck:
  2563 000020E1 FECC                <2> 		dec ah
  2564 000020E3 8825[E9220000]      <2> 		mov [commandedit], ah
  2565 000020E9 E88D000000          <2> 		call rdprbckspc
  2566 000020EE E99EFDFFFF          <2> 		jmp rdprintb
  2567                              <2> 	
  2568                              <2> 	rdprdown:
  2569 000020F3 8A25[E9220000]      <2> 		mov ah, [commandedit]
  2570 000020F9 80FC01              <2> 		cmp ah, 1
  2571 000020FC 0F868FFDFFFF        <2> 		jbe near rdprintb
  2572 00002102 8B3D[58DA0200]      <2> 		mov edi, [commandsentered]
  2573 00002108 3B3D[54DA0200]      <2> 		cmp edi, [commandlistentries]
  2574 0000210E 7618                <2> 		jbe .nofix
  2575 00002110 8105[54DA0200]0200- <2> 		add dword [commandlistentries], 2
  2576 00002118 0000                <2>
  2577 0000211A 3B3D[54DA0200]      <2> 		cmp edi, [commandlistentries]
  2578 00002120 7706                <2> 		ja .nofix
  2579 00002122 893D[54DA0200]      <2> 		mov [commandlistentries], edi
  2580                              <2> 	.nofix:
  2581 00002128 80FC02              <2> 		cmp ah, 2
  2582 0000212B 74B4                <2> 		je rdprdownbck
  2583 0000212D 80EC02              <2> 		sub ah, 2
  2584 00002130 8825[E9220000]      <2> 		mov [commandedit], ah
  2585                              <2> 		
  2586                              <2> 	rdprup:
  2587 00002136 3805[E9220000]      <2> 		cmp [commandedit], al
  2588 0000213C 0F844FFDFFFF        <2> 		je near rdprintb
  2589 00002142 813D[54DA0200]0000- <2> 		cmp dword [commandlistentries], 0
  2590 0000214A 0000                <2>
  2591 0000214C 0F843FFDFFFF        <2> 		je near rdprintb
  2592 00002152 FF0D[54DA0200]      <2> 		dec dword [commandlistentries]
  2593                              <2> 	.lp:
  2594 00002158 BF[A6240100]        <2> 		mov edi, buftxt2
  2595 0000215D 8A07                <2> 		mov al, [edi]
  2596 0000215F 3C00                <2> 		cmp al, 0
  2597 00002161 740E                <2> 		je .start
  2598 00002163 8806                <2> 		mov [esi], al
  2599 00002165 E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2600 0000216A E820020000          <2> 		call prcharq
  2601 0000216F EBE7                <2> 		jmp .lp
  2602                              <2> 	.start:
  2603 00002171 E805000000          <2> 		call rdprbckspc
  2604 00002176 E948000000          <2> 		jmp getcurrentcommandstr
  2605                              <2> 	rdprbckspc:
  2606 0000217B 3B35[EB220000]      <2> 		cmp esi, [buftxtloc]
  2607 00002181 7432                <2> 		je nordprupbck
  2608                              <2> 	rdprupbckspclp:
  2609 00002183 66B80800            <2> 		mov ax, 8
  2610 00002187 668B1D[E3220000]    <2> 		mov bx, [modkeyrdpr]
  2611 0000218E E8FC010000          <2> 		call prcharq
  2612 00002193 66B82000            <2> 		mov ax, ' '
  2613 00002197 E8F3010000          <2> 		call prcharq
  2614 0000219C 66B80800            <2> 		mov ax, 8
  2615 000021A0 E8EA010000          <2> 		call prcharq
  2616 000021A5 4E                  <2> 		dec esi
  2617 000021A6 3B35[EB220000]      <2> 		cmp esi, [buftxtloc]
  2618 000021AC 7402                <2> 		je nordprupbck2
  2619 000021AE EBD3                <2> 		jmp rdprupbckspclp
  2620                              <2> 	nordprupbck2:
  2621 000021B0 E8A3060000          <2> 		call termcopy
  2622                              <2> 	nordprupbck:
  2623 000021B5 8B3D[50DA0200]      <2> 		mov edi, [commandbufpos]
  2624 000021BB 81C7[5CDA0200]      <2> 		add edi, commandbuf
  2625 000021C1 4F                  <2> 		dec edi
  2626 000021C2 C3                  <2> 		ret
  2627                              <2> 	getcurrentcommandstr:
  2628 000021C3 8A25[E9220000]      <2> 		mov ah, [commandedit]
  2629 000021C9 FE05[E9220000]      <2> 		inc byte [commandedit]
  2630                              <2> 	getccmdlp:
  2631 000021CF 4F                  <2> 		dec edi
  2632 000021D0 8A07                <2> 		mov al, [edi]
  2633 000021D2 81FF[5CDA0200]      <2> 		cmp edi, commandbuf
  2634 000021D8 7231                <2> 		jb getcmdresetcommandbuf
  2635 000021DA 81EF[5CDA0200]      <2> 		sub edi, commandbuf
  2636 000021E0 3B3D[50DA0200]      <2> 		cmp edi, [commandbufpos]
  2637 000021E6 0F84A5FCFFFF        <2> 		je near rdprintb
  2638 000021EC 81C7[5CDA0200]      <2> 		add edi, commandbuf
  2639 000021F2 3C00                <2> 		cmp al, 0
  2640 000021F4 75D9                <2> 		jne getccmdlp
  2641 000021F6 FECC                <2> 		dec ah
  2642 000021F8 80FC00              <2> 		cmp ah, 0
  2643 000021FB 77D2                <2> 		ja getccmdlp
  2644 000021FD 47                  <2> 		inc edi
  2645 000021FE 81FF[5CEA0200]      <2> 		cmp edi, commandbufend
  2646 00002204 770D                <2> 		ja fixcmdbufb4morerdpr
  2647 00002206 E915000000          <2> 		jmp morerdprup
  2648                              <2> 	getcmdresetcommandbuf:
  2649 0000220B BF[5CEA0200]        <2> 		mov edi, commandbufend
  2650 00002210 47                  <2> 		inc edi
  2651 00002211 EBBC                <2> 		jmp getccmdlp
  2652                              <2> 	fixcmdbufb4morerdpr:
  2653 00002213 4F                  <2> 		dec edi
  2654 00002214 81EF[5CEA0200]      <2> 		sub edi, commandbufend
  2655 0000221A 81C7[5CDA0200]      <2> 		add edi, commandbuf
  2656                              <2> 	morerdprup:
  2657 00002220 8A07                <2> 		mov al, [edi]
  2658 00002222 47                  <2> 		inc edi
  2659 00002223 81EF[5CDA0200]      <2> 		sub edi, commandbuf
  2660 00002229 3C00                <2> 		cmp al, 0
  2661 0000222B 0F8400FEFFFF        <2> 		je near rdprintb2
  2662 00002231 3B3D[50DA0200]      <2> 		cmp edi, [commandbufpos]
  2663 00002237 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2664 0000223D 81C7[5CDA0200]      <2> 		add edi, commandbuf
  2665 00002243 8806                <2> 		mov [esi], al
  2666 00002245 46                  <2> 		inc esi
  2667 00002246 57                  <2> 		push edi
  2668 00002247 668B1D[E3220000]    <2> 		mov bx, [modkeyrdpr]
  2669 0000224E 30E4                <2> 		xor ah, ah
  2670 00002250 E83A010000          <2> 		call prcharq
  2671 00002255 5F                  <2> 		pop edi
  2672 00002256 81FF[5CEA0200]      <2> 		cmp edi, commandbufend
  2673 0000225C 76C2                <2> 		jbe morerdprup
  2674 0000225E BF[5CDA0200]        <2> 		mov edi, commandbuf
  2675 00002263 EBBB                <2> 		jmp morerdprup
  2676                              <2> 		
  2677                              <2> 	rdprdel:
  2678 00002265 BF[A6240100]        <2> 		mov edi, buftxt2
  2679 0000226A 8A07                <2> 		mov al, [edi]
  2680 0000226C 3C00                <2> 		cmp al, 0
  2681 0000226E 0F841DFCFFFF        <2> 		je near rdprintb
  2682 00002274 8806                <2> 		mov [esi], al
  2683 00002276 E83EFEFFFF          <2> 		call shiftbuftxt2lft
  2684 0000227B E80F010000          <2> 		call prcharq
  2685                              <2> 		
  2686                              <2> 	rdprbscheck:
  2687 00002280 3B35[E5220000]      <2> 		cmp esi, [firstesirdpr]
  2688 00002286 0F8605FCFFFF        <2> 		jbe near rdprintb
  2689                              <2> 	goodbscheck:
  2690 0000228C 4E                  <2> 		dec esi
  2691 0000228D 8A46FF              <2> 		mov al, [esi - 1]
  2692 00002290 C60600              <2> 		mov byte [esi], 0
  2693 00002293 3CC0                <2> 		cmp al, 0xC0
  2694 00002295 7309                <2> 		jae .onemore
  2695 00002297 3C80                <2> 		cmp al, 0x80
  2696 00002299 73F1                <2> 		jae goodbscheck
  2697 0000229B E904000000          <2> 		jmp .nomore
  2698                              <2> 	.onemore:
  2699 000022A0 4E                  <2> 		dec esi
  2700 000022A1 C60600              <2> 		mov byte [esi], 0		
  2701                              <2> 	.nomore:
  2702 000022A4 668B1D[E3220000]    <2> 		mov bx, [modkeyrdpr]
  2703 000022AB B008                <2> 		mov al, 8
  2704 000022AD E9B9FCFFFF          <2> 		jmp bscheckequal
  2705                              <2> 		
  2706                              <2> 	shiftbuftxt2:
  2707 000022B2 55                  <2> 		push ebp
  2708 000022B3 89FD                <2> 		mov ebp, edi
  2709                              <2> 	.lp
  2710 000022B5 3C00                <2> 		cmp al, 0
  2711 000022B7 7409                <2> 		je noshiftbuftxt2
  2712 000022B9 47                  <2> 		inc edi
  2713 000022BA 8A27                <2> 		mov ah, [edi]
  2714 000022BC 8807                <2> 		mov [edi], al
  2715 000022BE 88E0                <2> 		mov al, ah
  2716 000022C0 EBF3                <2> 		jmp .lp
  2717                              <2> 	noshiftbuftxt2:
  2718 000022C2 8A4500              <2> 		mov al, [ebp]
  2719 000022C5 5D                  <2> 		pop ebp
  2720 000022C6 3CC0                <2> 		cmp al, 0xC0
  2721 000022C8 7304                <2> 		jae .nofix
  2722 000022CA 3C80                <2> 		cmp al, 0x80
  2723 000022CC 73E4                <2> 		jae shiftbuftxt2
  2724                              <2> 	.nofix:
  2725 000022CE BF[A6240100]        <2> 		mov edi, buftxt2
  2726 000022D3 4E                  <2> 		dec esi
  2727 000022D4 8A06                <2> 		mov al, [esi]
  2728 000022D6 8807                <2> 		mov [edi], al
  2729 000022D8 C60600              <2> 		mov byte [esi], 0
  2730 000022DB 66B80800            <2> 		mov ax, 8
  2731 000022DF C3                  <2> 		ret
  2732                              <2> 		
  2733 000022E0 0000                <2> axcache dw 0
  2734 000022E2 00                  <2> endkeyrdpr db 0
  2735 000022E3 0000                <2> modkeyrdpr dw 0
  2736 000022E5 00000000            <2> firstesirdpr dd 0
  2737 000022E9 00                  <2> commandedit db 0
  2738 000022EA 00                  <2> txtmask db 0
  2739 000022EB 00000000            <2> buftxtloc dd 0
  2740 000022EF 00000000            <2> endbufferrdpr dd 0
  2741 000022F3 082000              <2> backcursor db 8," ",0
  2742                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2743                              <2> readchar:
  2744 000022F6 E807000000          <2> 	call rdcharint
  2745 000022FB E9A8DFFFFF          <2> 	jmp timerinterrupt
  2746                              <2> getchar:
  2747 00002300 30C0                <2> 	xor al, al
  2748                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2749 00002302 66C705[64230000]01- <2> 		mov word [trans], 1
  2750 0000230A 00                  <2>
  2751 0000230B 3C00                <2> 		cmp al, 0
  2752 0000230D 7509                <2> 		jne transcheck
  2753 0000230F 66C705[64230000]00- <2> 		mov word [trans], 0
  2754 00002317 00                  <2>
  2755                              <2> 	transcheck:
  2756                              <2> 	%ifdef io.serial
  2757                              <2> 		call serial.receive
  2758                              <2> 		xor ah, ah
  2759                              <2> 		cmp al, 13
  2760                              <2> 		je rdenter
  2761                              <2> 	%else
  2762 00002318 E8E0380000          <2> 		call getkey
  2763 0000231D 66A1[62230000]      <2> 		mov ax, [lastkey + 2]
  2764 00002323 663D1C00            <2> 		cmp ax, 0x1C
  2765 00002327 7425                <2> 		je rdenter
  2766                              <2> 	%endif
  2767 00002329 66A1[60230000]      <2> 		mov ax, [lastkey]
  2768 0000232F 668B1D[64230000]    <2> 		mov bx, [trans]
  2769 00002336 803D[DB5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2770 0000233D 7500                <2> 		jne nospecialtrans
  2771                              <2> 	nospecialtrans:
  2772 0000233F 6609C3              <2> 		or bx, ax
  2773 00002342 6681FB0000          <2> 		cmp bx, 0
  2774 00002347 74CF                <2> 		je transcheck
  2775 00002349 E90C000000          <2> 		jmp rdend
  2776                              <2> 	rdenter:
  2777 0000234E C1E010              <2> 		shl eax, 16
  2778 00002351 66B80A00            <2> 		mov ax, 10
  2779 00002355 A3[60230000]        <2> 		mov [lastkey], eax
  2780                              <2> 	rdend:
  2781 0000235A A1[60230000]        <2> 		mov eax, [lastkey]
  2782 0000235F C3                  <2> 		ret
  2783                              <2> 		
  2784 00002360 00000000            <2> lastkey dd 0
  2785 00002364 0000                <2> trans dw 0
  2786                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2787                              <2> prntchar:
  2788 00002366 30E4                <2> 	xor ah, ah
  2789                              <2> %ifdef io.serial
  2790                              <2> 	call prcharint
  2791                              <2> 	jmp timerinterrupt
  2792                              <2> prcharint:	
  2793                              <2> prcharq:
  2794                              <2> 	call serial.send
  2795                              <2> 	ret
  2796                              <2> %else
  2797 00002368 38FB                <2> cmp bl, bh
  2798 0000236A 740A                <2> je prchar.notimer
  2799 0000236C E80B000000          <2> call prcharint
  2800 00002371 E932DFFFFF          <2> jmp timerinterrupt
  2801                              <2> prchar.notimer:
  2802 00002376 E814000000          <2> 	call prcharq
  2803 0000237B CF                  <2> 	iret
  2804                              <2> 	
  2805                              <2> prcharint:	;print char, char in ax, modifier in bx, if bl = bh  then termcopy will not happen, will run termcopy if called as is
  2806 0000237C 30E4                <2> xor ah, ah
  2807 0000237E 38FB                <2> 	cmp bl, bh
  2808 00002380 740D                <2> 	je prcharq
  2809 00002382 E808000000          <2> 	call prcharq
  2810 00002387 E8CC040000          <2> 	call termcopy
  2811 0000238C C3                  <2> 	ret
  2812 0000238D 00                  <2> termguion db 0
  2813 0000238E 00                  <2> termcopyon db 0
  2814                              <2> prcharq:
  2815 0000238F C1E310              <2> 	shl ebx, 16
  2816 00002392 6689C3              <2> 	mov bx, ax
  2817 00002395 89D8                <2> 	mov eax, ebx
  2818 00002397 A3[84250000]        <2> 	mov [charbuf], eax
  2819 0000239C 8B1D[7C250000]      <2> 	mov ebx, [videobufpos]
  2820 000023A2 BF[BC2F0100]        <2> 	mov edi, videobuf
  2821 000023A7 01DF                <2> 	add edi, ebx
  2822 000023A9 A1[63280000]        <2> 	mov eax, [removedvideo]
  2823 000023AE 8907                <2> 	mov [edi], eax
  2824 000023B0 A1[84250000]        <2> 	mov eax, [charbuf]
  2825 000023B5 31D2                <2> 	xor edx, edx
  2826 000023B7 668B15[80250000]    <2> 	mov dx, [charpos]
  2827 000023BE 31C9                <2> 	xor ecx, ecx
  2828 000023C0 668B0D[82250000]    <2> 	mov cx, [charxy]
  2829 000023C7 663D0900            <2> 	cmp ax, 9
  2830 000023CB 0F8479000000        <2> 	je near prtab
  2831 000023D1 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2832 000023D5 0F849C000000        <2> 	je near prcr
  2833 000023DB 663D0A00            <2> 	cmp ax, 10
  2834 000023DF 0F84E5000000        <2> 	je near prnlcr
  2835 000023E5 663D0800            <2> 	cmp ax, 8
  2836 000023E9 0F8499000000        <2> 	je near prbs
  2837 000023EF 663DFF00            <2> 	cmp ax, 255		;null character
  2838 000023F3 0F8424000000        <2> 	je near donescr
  2839 000023F9 663D0407            <2> 	cmp ax, (fontend - fonts)/16
  2840 000023FD 0F8341000000        <2> 	jae near prnofont
  2841                              <2> donepr:
  2842 00002403 8907                <2> 	mov [edi], eax
  2843 00002405 81C704000000        <2> 	add edi, 4
  2844 0000240B FEC2                <2> 	inc dl
  2845                              <2> donecrnl:
  2846 0000240D 38CA                <2> 	cmp dl, cl
  2847 0000240F 0F83D9000000        <2> 	jae near preol
  2848                              <2> doneeol:
  2849 00002415 38EE                <2> 	cmp dh, ch
  2850 00002417 0F83EE000000        <2> 	jae near prscr	
  2851                              <2> donescr:
  2852 0000241D 89FB                <2> 	mov ebx, edi
  2853 0000241F 8B07                <2> 	mov eax, [edi]
  2854 00002421 A3[63280000]        <2> 	mov [removedvideo], eax
  2855 00002426 81EB[BC2F0100]      <2> 	sub ebx, videobuf
  2856 0000242C 891D[7C250000]      <2> 	mov [videobufpos], ebx
  2857 00002432 668915[80250000]    <2> 	mov [charpos], dx
  2858 00002439 A1[84250000]        <2> 	mov eax, [charbuf]
  2859 0000243E 89C3                <2> 	mov ebx, eax
  2860 00002440 C1EB10              <2> 	shr ebx, 16
  2861 00002443 C3                  <2> 	ret
  2862                              <2> 	
  2863                              <2> 	prnofont:
  2864 00002444 66B80200            <2> 		mov ax, 2
  2865 00002448 EBB9                <2> 		jmp donepr
  2866                              <2> 	prtab:
  2867 0000244A 8B1D[78250000]      <2> 		mov ebx, [linebeginpos]
  2868 00002450 81EF[BC2F0100]      <2> 		sub edi, videobuf
  2869 00002456 29DF                <2> 		sub edi, ebx
  2870 00002458 C1EF05              <2> 		shr edi, 5
  2871 0000245B C1E705              <2> 		shl edi, 5
  2872 0000245E 81C720000000        <2> 		add edi, 32
  2873 00002464 C0EA03              <2> 		shr dl, 3
  2874 00002467 C0E203              <2> 		shl dl, 3
  2875 0000246A 80C208              <2> 		add dl, 8
  2876 0000246D 81C7[BC2F0100]      <2> 		add edi, videobuf
  2877 00002473 01DF                <2> 		add edi, ebx
  2878 00002475 EB96                <2> 		jmp donecrnl
  2879                              <2> 	
  2880                              <2> 	prcr:
  2881 00002477 30D2                <2> 		xor dl, dl
  2882 00002479 BF[BC2F0100]        <2> 		mov edi, videobuf
  2883 0000247E 8B1D[78250000]      <2> 		mov ebx, [linebeginpos]
  2884 00002484 01DF                <2> 		add edi, ebx
  2885 00002486 EB85                <2> 		jmp donecrnl
  2886                              <2> 			
  2887                              <2> 	prbs:
  2888 00002488 8B1D[78250000]      <2> 		mov ebx, [linebeginpos]
  2889 0000248E 80FA00              <2> 		cmp dl, 0
  2890 00002491 7415                <2> 		je prbackline
  2891                              <2> 	prnobmr:
  2892 00002493 891D[78250000]      <2> 		mov [linebeginpos], ebx
  2893 00002499 FECA                <2> 		dec dl
  2894 0000249B 31C0                <2> 		xor eax, eax
  2895 0000249D 81EF04000000        <2> 		sub edi, 4
  2896 000024A3 E965FFFFFF          <2> 		jmp donecrnl
  2897                              <2> 	prbackline:
  2898 000024A8 6631DB              <2> 		xor bx, bx
  2899 000024AB 88CA                <2> 		mov dl, cl
  2900 000024AD 80FE00              <2> 		cmp dh, 0
  2901 000024B0 74E1                <2> 		je prnobmr
  2902 000024B2 8B1D[78250000]      <2> 		mov ebx, [linebeginpos]
  2903 000024B8 6651                <2> 		push cx
  2904 000024BA 31C9                <2> 		xor ecx, ecx
  2905 000024BC 8A0C24              <2> 		mov cl, [esp]
  2906 000024BF C1E102              <2> 		shl ecx, 2
  2907 000024C2 29CB                <2> 		sub ebx, ecx
  2908 000024C4 6659                <2> 		pop cx
  2909 000024C6 FECE                <2> 		dec dh
  2910 000024C8 EBC9                <2> 		jmp prnobmr
  2911                              <2> 		
  2912                              <2> 	prnlcr:
  2913 000024CA FEC6                <2> 		inc dh
  2914 000024CC 31DB                <2> 		xor ebx, ebx
  2915 000024CE 30D2                <2> 		xor dl, dl
  2916 000024D0 88CB                <2> 		mov bl, cl
  2917 000024D2 66C1E302            <2> 		shl bx, 2
  2918 000024D6 BF[BC2F0100]        <2> 		mov edi, videobuf
  2919 000024DB 031D[78250000]      <2> 		add ebx, [linebeginpos]
  2920 000024E1 891D[78250000]      <2> 		mov [linebeginpos], ebx
  2921 000024E7 01DF                <2> 		add edi, ebx
  2922 000024E9 E91FFFFFFF          <2> 		jmp donecrnl
  2923                              <2> 		
  2924                              <2> 	preol:
  2925 000024EE 30D2                <2> 		xor dl, dl
  2926 000024F0 FEC6                <2> 		inc dh
  2927 000024F2 31DB                <2> 		xor ebx, ebx
  2928 000024F4 88CB                <2> 		mov bl, cl
  2929 000024F6 66C1E302            <2> 		shl bx, 2
  2930 000024FA 031D[78250000]      <2> 		add ebx, [linebeginpos]
  2931 00002500 891D[78250000]      <2> 		mov [linebeginpos], ebx
  2932 00002506 E90AFFFFFF          <2> 		jmp doneeol
  2933                              <2> 	prscr:
  2934 0000250B FECE                <2> 		dec dh
  2935 0000250D BF[BC2F0100]        <2> 		mov edi, videobuf
  2936 00002512 31DB                <2> 		xor ebx, ebx
  2937 00002514 88CB                <2> 		mov bl, cl
  2938 00002516 66C1E302            <2> 		shl bx, 2
  2939 0000251A 01FB                <2> 		add ebx, edi
  2940                              <2> 	intscrollloop:
  2941 0000251C 8B03                <2> 		mov eax, [ebx]
  2942 0000251E 8907                <2> 		mov [edi], eax
  2943 00002520 81C704000000        <2> 		add edi, 4
  2944 00002526 81C304000000        <2> 		add ebx, 4
  2945 0000252C FEC9                <2> 		dec cl
  2946 0000252E 80F900              <2> 		cmp cl, 0
  2947 00002531 75E9                <2> 		jne intscrollloop
  2948 00002533 8A0D[82250000]      <2> 		mov cl, [charxy]
  2949 00002539 FECD                <2> 		dec ch
  2950 0000253B 80FD01              <2> 		cmp ch, 1
  2951 0000253E 77DC                <2> 		ja intscrollloop
  2952 00002540 31C0                <2> 		xor eax, eax
  2953 00002542 81EF[BC2F0100]      <2> 		sub edi, videobuf
  2954 00002548 893D[78250000]      <2> 		mov [linebeginpos], edi
  2955 0000254E 81C7[BC2F0100]      <2> 		add edi, videobuf
  2956 00002554 89FB                <2> 		mov ebx, edi
  2957                              <2> 	intloopclear:
  2958 00002556 8903                <2> 		mov [ebx], eax
  2959 00002558 81C304000000        <2> 		add ebx, 4
  2960 0000255E FEC9                <2> 		dec cl
  2961 00002560 80F900              <2> 		cmp cl, 0
  2962 00002563 75F1                <2> 		jne intloopclear
  2963 00002565 FECD                <2> 		dec ch
  2964 00002567 80FD00              <2> 		cmp ch, 0
  2965 0000256A 75EA                <2> 		jne intloopclear
  2966 0000256C 668B0D[82250000]    <2> 		mov cx, [charxy]
  2967 00002573 E9A5FEFFFF          <2> 		jmp donescr
  2968                              <2> 		
  2969 00002578 00000000            <2> linebeginpos dd 0
  2970 0000257C 00000000            <2> videobufpos: dd 0
  2971 00002580 0000                <2> charpos db 0,0
  2972 00002582 501E                <2> charxy db 80,30
  2973 00002584 00000000            <2> charbuf dd 0
  2974                              <2> %endif
  2975                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2976                              <2> openfile:
  2977 00002588 E8F33F0000          <2> 	call loadfile
  2978 0000258D E916DDFFFF          <2> 	jmp timerinterrupt
  2979                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2980                              <2> num2str:
  2981 00002592 3C00                <2> 	cmp al, 0
  2982 00002594 750A                <2> 	jne num2strb
  2983 00002596 E8A50C0000          <2> 	call showdec
  2984 0000259B E908DDFFFF          <2> 	jmp timerinterrupt
  2985                              <2> num2strb:
  2986 000025A0 E8D10B0000          <2> 	call showhex
  2987 000025A5 E9FEDCFFFF          <2> 	jmp timerinterrupt
  2988                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2989                              <2> str2num:
  2990 000025AA 89F7                <2> 	mov edi, esi
  2991 000025AC E8710D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2992 000025B1 E9F2DCFFFF          <2> 	jmp timerinterrupt
  2993                              <2> 	
  2994                              <1> %ifdef threads.included
  2995                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2996                              <2> forkthread:
  2997                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  2998                              <2> 			;returns the PID of the new fork in ebx
  2999                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3000 000025B6 FA                  <2> 	cli
  3001 000025B7 60                  <2> 	pushad
  3002 000025B8 8925[85260000]      <2> 	mov [.espold], esp
  3003 000025BE C605[1F670000]01    <2> 	mov byte [threadson], 1
  3004 000025C5 8B1D[20670000]      <2> 	mov ebx, [currentthread]
  3005 000025CB C1E302              <2> 	shl ebx, 2
  3006 000025CE 89A3[700A0300]      <2> 	mov [threadlist + ebx], esp
  3007 000025D4 C1EB02              <2> 	shr ebx, 2
  3008 000025D7 81FB00000000        <2> 	cmp ebx, 0
  3009 000025DD 750C                <2> 	jne .simplestack
  3010 000025DF BB[C20D0100]        <2> 	mov ebx, stackend
  3011 000025E4 29E3                <2> 	sub ebx, esp
  3012 000025E6 E90B000000          <2> 	jmp .stackcalcdone
  3013                              <2> .simplestack:
  3014 000025EB C1E30A              <2> 	shl ebx, 10
  3015 000025EE 81C3[701E0300]      <2> 	add ebx, stack1
  3016 000025F4 29E3                <2> 	sub ebx, esp
  3017                              <2> .stackcalcdone:
  3018 000025F6 29DC                <2> 	sub esp, ebx
  3019 000025F8 81C4[701E0300]      <2> 	add esp, stack1
  3020 000025FE 8B1D[1B670000]      <2> 	mov ebx, [lastthread]
  3021 00002604 C1E308              <2> 	shl ebx, 8
  3022 00002607 01DC                <2> 	add esp, ebx
  3023 00002609 891D[89260000]      <2> 	mov [.stackend], ebx
  3024                              <2> 
  3025 0000260F 89E5                <2> 	mov ebp, esp
  3026 00002611 8B25[85260000]      <2> 	mov esp, [.espold]
  3027                              <2> 
  3028 00002617 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3029 0000261A 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3030                              <2> 
  3031 0000261E 31DB                <2> 	xor ebx, ebx
  3032                              <2> .stackcopy:
  3033 00002620 668B041C            <2> 	mov ax, [esp + ebx]
  3034 00002624 6689441D00          <2> 	mov [ebp + ebx], ax
  3035 00002629 81C302000000        <2> 	add ebx, 2
  3036 0000262F 3B1D[89260000]      <2> 	cmp ebx, [.stackend]
  3037 00002635 72E9                <2> 	jb .stackcopy
  3038                              <2> 
  3039 00002637 31C0                <2> 	xor eax, eax
  3040 00002639 668CC8              <2> 	mov ax, cs
  3041 0000263C 89C2                <2> 	mov edx, eax
  3042 0000263E 8B4C2428            <2> 	mov ecx, [esp + 40]
  3043 00002642 81C900020000        <2> 	or ecx, 0x200
  3044                              <2> 	
  3045 00002648 81FE00000000        <2> 	cmp esi, 0
  3046 0000264E 7504                <2> 	jne .nochangestack
  3047 00002650 8B742420            <2> 	mov esi, [esp + 32]
  3048                              <2> .nochangestack:
  3049 00002654 89F0                <2> 	mov eax, esi
  3050 00002656 89EC                <2> 	mov esp, ebp
  3051                              <2> 
  3052 00002658 89442420            <2> 	mov [esp + 32], eax
  3053 0000265C 89542424            <2> 	mov [esp + 36], edx
  3054 00002660 894C2428            <2> 	mov [esp + 40], ecx
  3055                              <2> 
  3056 00002664 8B1D[1B670000]      <2> 	mov ebx, [lastthread]
  3057 0000266A 89A3[700A0300]      <2> 	mov [threadlist + ebx], esp
  3058 00002670 81C304000000        <2> 	add ebx, 4
  3059 00002676 891D[1B670000]      <2> 	mov [lastthread], ebx
  3060 0000267C 8B25[85260000]      <2> 	mov esp, [.espold]
  3061 00002682 61                  <2> 	popad
  3062 00002683 FB                  <2> 	sti
  3063 00002684 CF                  <2> 	iret
  3064                              <2> 
  3065 00002685 00000000            <2> .espold dd 0
  3066 00002689 00000000            <2> .stackend dd 0
  3067                              <1> %endif
  3068                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3069                              <2> gettime:
  3070 0000268D A1[60020000]        <2> 	mov eax, [timeseconds]
  3071 00002692 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  3072 00002698 89D9                <2> 	mov ecx, ebx
  3073 0000269A C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3074 0000269D E906DCFFFF          <2> 	jmp timerinterrupt
  3075                              <1> 	%include 'source/interrupts/13_settime.asm'
  3076                              <2> settime:
  3077 000026A2 A3[60020000]        <2> 	mov [timeseconds], eax
  3078 000026A7 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  3079 000026AD E9F6DBFFFF          <2> 	jmp timerinterrupt
  3080                              <2> 	
  3081                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3082                              <2> runcmd:
  3083 000026B2 BF[A6280100]        <2> 	mov edi, buftxt
  3084                              <2> cpcmd:
  3085 000026B7 8A06                <2> 	mov al, [esi]
  3086 000026B9 8807                <2> 	mov [edi], al
  3087 000026BB 46                  <2> 	inc esi
  3088 000026BC 47                  <2> 	inc edi
  3089 000026BD 3C00                <2> 	cmp al, 0
  3090 000026BF 75F6                <2> 	jne cpcmd
  3091 000026C1 E8B3070000          <2> 	call run
  3092 000026C6 CF                  <2> 	iret
  3093                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3094                              <2> proginfo:
  3095                              <2> 	;mov ebx, variables
  3096 000026C7 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  3097 000026CD 89F7                <2> 	mov edi, esi
  3098 000026CF 31C9                <2> 	xor ecx, ecx
  3099                              <2> getcommandzeroes:
  3100 000026D1 8A07                <2> 	mov al, [edi]
  3101 000026D3 47                  <2> 	inc edi
  3102 000026D4 3C3B                <2> 	cmp al, ';'
  3103 000026D6 740B                <2> 	je nomorezeroes
  3104 000026D8 3C00                <2> 	cmp al, 0
  3105 000026DA 7407                <2> 	je nomorezeroes
  3106 000026DC 3C20                <2> 	cmp al, ' '
  3107 000026DE 75F1                <2> 	jne getcommandzeroes
  3108 000026E0 41                  <2> 	inc ecx
  3109 000026E1 EBEE                <2> 	jmp getcommandzeroes
  3110                              <2> nomorezeroes:
  3111 000026E3 41                  <2> 	inc ecx
  3112 000026E4 4F                  <2> 	dec edi
  3113 000026E5 8B1D[32140100]      <2> 	mov ebx, [uid]
  3114 000026EB 8B15[20670000]      <2> 	mov edx, [currentthread]
  3115 000026F1 CF                  <2> 	iret
  3116                              <2> 	
  3117                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3118                              <2> hooksig: ;hook code in ESI to signal in AL
  3119 000026F2 3C00                <2> 	cmp al, 0
  3120 000026F4 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3121                              <2> ;	xor ebx, ebx
  3122                              <2> ;	mov bl, al
  3123                              <2> ;	shl bl, 2
  3124 000026F6 BF[220E0100]        <2> 	mov edi, sigtable
  3125 000026FB 8937                <2> 	mov [edi], esi
  3126                              <2> .quit:
  3127 000026FD E9A6DBFFFF          <2> 	jmp timerinterrupt
  3128                              <1> %ifdef gui.included
  3129                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3130                              <2> guiint:
  3131 00002702 3CFD                <2> 	cmp al, 253
  3132 00002704 0F8473000000        <2> 	je near .getinfo
  3133 0000270A 803D[DCFB0000]01    <2> 	cmp byte [guion], 1
  3134 00002711 0F8550000000        <2> 	jne near .nogui
  3135 00002717 3C00                <2> 	cmp al, 0
  3136 00002719 0F844D000000        <2> 	je near .clear
  3137 0000271F 3C01                <2> 	cmp al, 1
  3138 00002721 0F84AB000000        <2> 	je near .putpixel
  3139 00002727 3C02                <2> 	cmp al, 2
  3140 00002729 0F84B0000000        <2> 	je near .drawtext
  3141 0000272F 3C03                <2> 	cmp al, 3
  3142 00002731 0F84C3000000        <2> 	je near .drawline
  3143 00002737 3C04                <2> 	cmp al, 4
  3144 00002739 0F84CE000000        <2> 	je near .drawcircle
  3145 0000273F 3C05                <2> 	cmp al, 5
  3146 00002741 0F84D6000000        <2> 	je near .fillcircle
  3147 00002747 3C06                <2> 	cmp al, 6
  3148 00002749 0F84DE000000        <2> 	je near .drawsquare
  3149 0000274F 3C07                <2> 	cmp al, 7
  3150 00002751 0F84E9000000        <2> 	je near .fillsquare
  3151 00002757 3CFE                <2> 	cmp al, 254
  3152 00002759 0F8449000000        <2> 	je near .setinfo
  3153 0000275F 3CFF                <2> 	cmp al, 255
  3154 00002761 0F8446000000        <2> 	je near .reset
  3155                              <2> .nogui:
  3156 00002767 E93CDBFFFF          <2> 	jmp timerinterrupt
  3157                              <2> 
  3158                              <2> .clear:		;color in bx
  3159 0000276C 66891D[056E0000]    <2> 	mov [background], bx
  3160                              <2> %ifdef gui.background
  3161                              <2> 	mov ebx, [backgroundimage]
  3162                              <2> 	cmp ebx, 0
  3163                              <2> 	je .clearit
  3164                              <2> 	mov dword [backgroundimage], 0
  3165                              <2> 	mov [.bgi], ebx
  3166                              <2> .clearit:
  3167                              <2> %endif
  3168 00002773 E841460000          <2> 	call guiclear
  3169 00002778 E92BDBFFFF          <2> 	jmp timerinterrupt
  3170                              <2> 	
  3171                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3172 0000277D 6631DB              <2> 	xor bx, bx
  3173 00002780 6631C9              <2> 	xor cx, cx
  3174 00002783 6631D2              <2> 	xor dx, dx
  3175 00002786 381D[DCFB0000]      <2> 	cmp [guion], bl
  3176 0000278C 74D9                <2> 	je .nogui
  3177 0000278E 668B1D[056E0000]    <2> 	mov bx, [background]
  3178 00002795 668B15[31570000]    <2> 	mov dx, [resolutionx]
  3179 0000279C 668B0D[33570000]    <2> 	mov cx, [resolutiony]
  3180 000027A3 E900DBFFFF          <2> 	jmp timerinterrupt
  3181                              <2> 	
  3182                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3183 000027A8 E9FBDAFFFF          <2> 	jmp timerinterrupt
  3184                              <2> .reset:		;resets the screen to the original settings
  3185 000027AD 66BBCF7B            <2> 	mov bx, background.original
  3186 000027B1 66891D[056E0000]    <2> 	mov [background], bx
  3187 000027B8 66BBFFFF            <2> 	mov bx, 0xFFFF
  3188 000027BC 66891D[C0740000]    <2> 	mov [colorfont2], bx
  3189                              <2> %ifdef gui.background
  3190                              <2> 	mov ebx, [backgroundimage]
  3191                              <2> 	cmp ebx, 0
  3192                              <2> 	jne .resetit
  3193                              <2> 	mov ebx, [.bgi]
  3194                              <2> 	mov [backgroundimage], ebx
  3195                              <2> .resetit:
  3196                              <2> %endif
  3197 000027C3 E8F1450000          <2> 	call guiclear
  3198 000027C8 E83C460000          <2> 	call reloadallgraphics
  3199 000027CD E9D6DAFFFF          <2> 	jmp timerinterrupt
  3200                              <2> 
  3201                              <2> %ifdef gui.background
  3202                              <2> 	.bgi dd 0
  3203                              <2> %endif
  3204                              <2> 	
  3205                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3206 000027D2 6689DE              <2> 	mov si, bx
  3207 000027D5 E83C5C0000          <2> 	call putpixel
  3208 000027DA E9C9DAFFFF          <2> 	jmp timerinterrupt
  3209                              <2> 
  3210                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3211 000027DF 66D1E2              <2> 	shl dx, 1
  3212 000027E2 66891D[C0740000]    <2> 	mov [colorfont2], bx
  3213 000027E9 66893D[056E0000]    <2> 	mov [background], di
  3214 000027F0 E8654C0000          <2> 	call showstring2
  3215 000027F5 E9AEDAFFFF          <2> 	jmp timerinterrupt
  3216                              <2> 
  3217                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3218 000027FA 6689F0              <2> 	mov ax, si
  3219 000027FD 6689DE              <2> 	mov si, bx
  3220 00002800 6689FB              <2> 	mov bx, di
  3221 00002803 E885440000          <2> 	call drawline
  3222 00002808 E99BDAFFFF          <2> 	jmp timerinterrupt
  3223                              <2> 
  3224                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3225 0000280D 6689F0              <2> 	mov ax, si
  3226 00002810 6689DE              <2> 	mov si, bx
  3227 00002813 E8FE3F0000          <2> 	call drawcircle
  3228 00002818 E98BDAFFFF          <2> 	jmp timerinterrupt
  3229                              <2> 
  3230                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3231 0000281D 6689F0              <2> 	mov ax, si
  3232 00002820 6689DE              <2> 	mov si, bx
  3233 00002823 E800410000          <2> 	call fillcircle
  3234 00002828 E97BDAFFFF          <2> 	jmp timerinterrupt
  3235                              <2> 	
  3236                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3237 0000282D 6689F0              <2> 	mov ax, si
  3238 00002830 6689DE              <2> 	mov si, bx
  3239 00002833 6689FB              <2> 	mov bx, di
  3240 00002836 E89E460000          <2> 	call drawsquare
  3241 0000283B E968DAFFFF          <2> 	jmp timerinterrupt
  3242                              <2> 
  3243                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3244 00002840 6689F0              <2> 	mov ax, si
  3245 00002843 6689DE              <2> 	mov si, bx
  3246 00002846 6689FB              <2> 	mov bx, di
  3247 00002849 E800470000          <2> 	call fillsquare
  3248 0000284E E955DAFFFF          <2> 	jmp timerinterrupt
  3249                              <1> %endif
  3250                              <1> %ifdef sound.included
  3251                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3252                              <1> %endif
  3253                              <1> %ifdef network.included
  3254                              <1> 	%include 'source/interrupts/19_netint.asm'
  3255                              <2> netint:
  3256 00002853 E950DAFFFF          <2> 	jmp timerinterrupt
  3257                              <1> %endif
  3258                              <1> 
  3259                              <1> termcopy:
  3260                              <1> %ifdef io.serial
  3261                              <1> 	ret
  3262                              <1> %else
  3263                              <1> %ifdef terminal.vsync
  3264                              <1> 	mov byte [termcopyneeded], 1
  3265                              <1> 	ret
  3266                              <1> %else
  3267 00002858 E80A000000          <1> 	call newtermcopy
  3268 0000285D C3                  <1> 	ret
  3269                              <1> %endif
  3270 0000285E 00                  <1> 	termcopyneeded db 0
  3271 0000285F 00000000            <1> 	termcursorpos dd 0
  3272 00002863 00000000            <1> 	removedvideo dd 0
  3273                              <1> newtermcopy:
  3274 00002867 60                  <1> 	pusha
  3275 00002868 BF[BC2F0100]        <1> 	mov edi, videobuf
  3276 0000286D 31DB                <1> 	xor ebx, ebx
  3277 0000286F 881D[5E280000]      <1> 	mov [termcopyneeded], bl
  3278 00002875 8B1D[7C250000]      <1> 	mov ebx, [videobufpos]
  3279 0000287B 01DF                <1> 	add edi, ebx
  3280 0000287D 893D[5F280000]      <1> 	mov [termcursorpos], edi
  3281 00002883 E8E2000000          <1> 	call switchtermcursor
  3282 00002888 803D[DCFB0000]00    <1> 	cmp byte [guion], 0
  3283 0000288F 0F8420000000        <1> 	je near nowincopy
  3284                              <1> %ifdef gui.included
  3285 00002895 C605[277C0000]00    <1> 	mov byte [mouseselecton], 0
  3286 0000289C C605[8E230000]01    <1> 	mov byte [termcopyon], 1
  3287 000028A3 803D[8D230000]01    <1> 	cmp byte [termguion], 1
  3288 000028AA 0F8401510000        <1> 	je near windowvideocopy
  3289                              <1> %endif
  3290 000028B0 E9AE000000          <1> 	jmp nocopytermatall
  3291                              <1> nowincopy:
  3292 000028B5 BE00000A00          <1> 	mov esi, 0xA0000
  3293 000028BA A1[41020000]        <1> 	mov eax, [basecache]
  3294 000028BF C1E004              <1> 	shl eax, 4
  3295 000028C2 29C6                <1> 	sub esi, eax
  3296 000028C4 BF[BC2F0100]        <1> 	mov edi, videobuf
  3297 000028C9 31C9                <1> 	xor ecx, ecx
  3298 000028CB 668B0D[82250000]    <1> 	mov cx, [charxy]
  3299                              <1> nowincopy2:
  3300 000028D2 8B07                <1> 	mov eax, [edi]
  3301 000028D4 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3302 000028DA 8B1F                <1> 	mov ebx, [edi]
  3303 000028DC 8907                <1> 	mov [edi], eax
  3304 000028DE 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3305 000028E4 81C702000000        <1> 	add edi, 2
  3306 000028EA 39D8                <1> 	cmp eax, ebx
  3307 000028EC 744B                <1> 	je nopresentwinfont
  3308 000028EE 81EF02000000        <1> 	sub edi, 2
  3309 000028F4 BD[9C890000]        <1> 	mov ebp, fonts
  3310 000028F9 31C0                <1> 	xor eax, eax
  3311 000028FB 668B07              <1> 	mov ax, [edi]
  3312 000028FE C1E004              <1> 	shl eax, 4
  3313 00002901 01C5                <1> 	add ebp, eax
  3314 00002903 81C702000000        <1> 	add edi, 2
  3315 00002909 668B1F              <1> 	mov bx, [edi]
  3316 0000290C 31D2                <1> 	xor edx, edx
  3317 0000290E 8A15[82250000]      <1> 	mov dl, [charxy]
  3318 00002914 C1C110              <1> 	rol ecx, 16
  3319 00002917 B110                <1> 	mov cl, 16
  3320                              <1> nowinfont:
  3321 00002919 8A4500              <1> 	mov al, [ebp]
  3322 0000291C D0C8                <1> 	ror al, 1
  3323 0000291E 80FB80              <1> 	cmp bl, 0x80
  3324 00002921 7202                <1> 	jb notnotfont
  3325 00002923 F6D0                <1> 	not al
  3326                              <1> notnotfont:
  3327 00002925 8806                <1> 	mov [esi], al
  3328 00002927 01D6                <1> 	add esi, edx
  3329 00002929 45                  <1> 	inc ebp
  3330 0000292A FEC9                <1> 	dec cl
  3331 0000292C 80F900              <1> 	cmp cl, 0
  3332 0000292F 75E8                <1> 	jne nowinfont
  3333 00002931 C1E204              <1> 	shl edx, 4
  3334 00002934 29D6                <1> 	sub esi, edx
  3335 00002936 C1C110              <1> 	rol ecx, 16
  3336                              <1> nopresentwinfont:
  3337 00002939 81C702000000        <1> 	add edi, 2
  3338 0000293F 46                  <1> 	inc esi
  3339 00002940 FEC9                <1> 	dec cl
  3340 00002942 80F900              <1> 	cmp cl, 0
  3341 00002945 758B                <1> 	jne nowincopy2
  3342 00002947 8A0D[82250000]      <1> 	mov cl, [charxy]
  3343 0000294D 31D2                <1> 	xor edx, edx
  3344 0000294F 88CA                <1> 	mov dl, cl
  3345 00002951 29D6                <1> 	sub esi, edx
  3346 00002953 C1E204              <1> 	shl edx, 4
  3347 00002956 01D6                <1> 	add esi, edx
  3348 00002958 FECD                <1> 	dec ch
  3349 0000295A 80FD00              <1> 	cmp ch, 0
  3350 0000295D 0F856FFFFFFF        <1> 	jne nowincopy2
  3351                              <1> nocopytermatall:
  3352 00002963 E802000000          <1> 	call switchtermcursor
  3353 00002968 61                  <1> 	popa
  3354 00002969 C3                  <1> 	ret
  3355                              <1> 	
  3356                              <1> switchtermcursor:
  3357 0000296A 8B3D[5F280000]      <1> 	mov edi, [termcursorpos]
  3358 00002970 668B4702            <1> 	mov ax, [edi + 2]
  3359 00002974 668B1F              <1> 	mov bx, [edi]
  3360 00002977 663D8000            <1> 	cmp ax, 0x80
  3361 0000297B 7209                <1> 	jb movlargecursorterm
  3362 0000297D 66B80700            <1> 	mov ax, 7
  3363 00002981 E904000000          <1> 	jmp movedcursorterm
  3364                              <1> movlargecursorterm:
  3365 00002986 66B8F000            <1> 	mov ax, 0xF0
  3366                              <1> movedcursorterm:
  3367 0000298A 66894702            <1> 	mov [edi + 2], ax
  3368 0000298E 6681FB0000          <1> 	cmp bx, 0
  3369 00002993 7507                <1> 	jne fixednocursorterm
  3370 00002995 66BB2000            <1> 	mov bx, ' '
  3371 00002999 66891F              <1> 	mov [edi], bx
  3372                              <1> fixednocursorterm:
  3373 0000299C C3                  <1> 	ret
  3374                              <1> %endif
  3375                                      %include "source/dosints.asm"
  3376                              <1> int20h:
  3377 0000299D 66B8004C            <1> mov ax, 0x4C00
  3378                              <1> int21h:
  3379                              <1> dostosolleros:
  3380 000029A1 6650                <1> 	push ax
  3381 000029A3 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3382 000029A7 8ED8                <1> 	mov ds, ax
  3383 000029A9 8EC0                <1> 	mov es, ax
  3384 000029AB 8EE0                <1> 	mov fs, ax
  3385 000029AD 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3386 000029B1 8EE8                <1> 	mov gs, ax
  3387 000029B3 6658                <1> 	pop ax
  3388 000029B5 9C                  <1> 	pushf
  3389 000029B6 60                  <1> 	pusha
  3390 000029B7 80FC01              <1> 	cmp ah, 1
  3391 000029BA 0F8449000000        <1> 	je near dosgchar
  3392 000029C0 80FC02              <1> 	cmp ah, 2
  3393 000029C3 0F8447000000        <1> 	je near doswchar
  3394 000029C9 80FC09              <1> 	cmp ah, 9
  3395 000029CC 0F8449000000        <1> 	je near dosprintstr
  3396 000029D2 80FC0A              <1> 	cmp ah, 0xA
  3397 000029D5 0F8456000000        <1> 	je near dosgetstr
  3398 000029DB 80FC2B              <1> 	cmp ah, 0x2B
  3399 000029DE 0F8492000000        <1> 	je near dosgetdate
  3400 000029E4 80FC2C              <1> 	cmp ah, 0x2C
  3401 000029E7 0F84AC000000        <1> 	je near dosgettime
  3402 000029ED 80FC4C              <1> 	cmp ah, 0x4C
  3403 000029F0 0F84C1000000        <1> 	je near dosexit
  3404                              <1> backtodos:
  3405 000029F6 61                  <1> 	popa
  3406 000029F7 9D                  <1> 	popf
  3407 000029F8 6650                <1> 	push ax
  3408 000029FA 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3409 000029FE 8ED8                <1> 	mov ds, ax
  3410 00002A00 8EC0                <1> 	mov es, ax
  3411 00002A02 8EE0                <1> 	mov fs, ax
  3412 00002A04 8EE8                <1> 	mov gs, ax
  3413 00002A06 6658                <1> 	pop ax
  3414 00002A08 CF                  <1> 	iret
  3415                              <1> 
  3416                              <1> dosgchar:
  3417 00002A09 E8F2F8FFFF          <1> 	call getchar
  3418 00002A0E EBE6                <1> 	jmp backtodos
  3419                              <1> 	
  3420                              <1> doswchar:
  3421 00002A10 88D0                <1> 	mov al, dl
  3422 00002A12 B307                <1> 	mov bl, 7
  3423 00002A14 E863F9FFFF          <1> 	call prcharint
  3424 00002A19 EBDB                <1> 	jmp backtodos
  3425                              <1> 	
  3426                              <1> dosprintstr:
  3427 00002A1B 31F6                <1> 	xor esi, esi
  3428 00002A1D 6689D6              <1> 	mov si, dx
  3429 00002A20 81C600004000        <1> 	add esi, dosprogloc
  3430 00002A26 B024                <1> 	mov al, "$"
  3431 00002A28 B307                <1> 	mov bl, 7
  3432 00002A2A E8FEF2FFFF          <1> 	call printint
  3433 00002A2F EBC5                <1> 	jmp backtodos
  3434                              <1> 	
  3435                              <1> dosgetstr:
  3436 00002A31 31F6                <1> 	xor esi, esi
  3437 00002A33 6689D6              <1> 	mov si, dx
  3438 00002A36 81C600004000        <1> 	add esi, dosprogloc
  3439 00002A3C B900000000          <1> 	mov ecx, 0
  3440 00002A41 8A0E                <1> 	mov cl, [esi]
  3441 00002A43 81C602000000        <1> 	add esi, 2
  3442 00002A49 89F7                <1> 	mov edi, esi
  3443 00002A4B 8935[722A0000]      <1> 	mov [stringstart], esi
  3444 00002A51 01CF                <1> 	add edi, ecx
  3445 00002A53 B00A                <1> 	mov al, 10
  3446 00002A55 B307                <1> 	mov bl, 7
  3447 00002A57 E80BF4FFFF          <1> 	call rdprintdos
  3448 00002A5C 89F1                <1> 	mov ecx, esi
  3449 00002A5E 2B0D[722A0000]      <1> 	sub ecx, [stringstart]
  3450 00002A64 8B35[722A0000]      <1> 	mov esi, [stringstart]
  3451 00002A6A 884EFF              <1> 	mov [esi - 1], cl
  3452 00002A6D 884EFE              <1> 	mov [esi - 2], cl
  3453 00002A70 EB84                <1> 	jmp backtodos
  3454 00002A72 00000000            <1> stringstart dd 0
  3455                              <1> 
  3456                              <1> dosgetdate:
  3457 00002A76 E8BC250000          <1> 	call time
  3458 00002A7B 8A0D[FF510000]      <1> 	mov cl, [RTCtimeYear]
  3459 00002A81 B500                <1> 	mov ch, 0
  3460 00002A83 6681C1D007          <1> 	add cx, 2000
  3461 00002A88 8A35[FE510000]      <1> 	mov dh, [RTCtimeMonth]
  3462 00002A8E 8A15[FD510000]      <1> 	mov dl, [RTCtimeDay]
  3463 00002A94 E95DFFFFFF          <1> 	jmp backtodos
  3464                              <1> 
  3465                              <1> dosgettime:
  3466 00002A99 E899250000          <1> 	call time
  3467 00002A9E 8A2D[FC510000]      <1> 	mov ch, [RTCtimeHour]
  3468 00002AA4 8A0D[FB510000]      <1> 	mov cl, [RTCtimeMinute]
  3469 00002AAA 8A35[FA510000]      <1> 	mov dh, [RTCtimeSecond]
  3470 00002AB0 B200                <1> 	mov dl, 0
  3471 00002AB2 E93FFFFFFF          <1> 	jmp backtodos
  3472                              <1> 	
  3473                              <1> dosexit:
  3474 00002AB7 BE[77890000]        <1> 	mov esi, line
  3475 00002ABC E865F2FFFF          <1> 	call print
  3476 00002AC1 61                  <1> 	popa
  3477 00002AC2 9D                  <1> 	popf
  3478 00002AC3 8B25[26120100]      <1> 	mov esp, [previousstack]
  3479 00002AC9 31DB                <1> 	xor ebx, ebx
  3480 00002ACB 88C3                <1> 	mov bl, al
  3481 00002ACD 80FB00              <1> 	cmp bl, 0
  3482 00002AD0 0F85DBF1FFFF        <1> 	jne near exitprog.error
  3483 00002AD6 C3                  <1> 	ret
  3484                                      %include "source/solleros.asm"
  3485                              <1> 	;SOLLEROS.ASM
  3486                              <1> os:
  3487                              <1> setdefenv:
  3488 00002AD7 B02F                <1> 	mov al, '/'
  3489 00002AD9 A2[32120100]        <1> 	mov [currentfolder], al
  3490 00002ADE B801000000          <1> 	mov eax, 1
  3491 00002AE3 A3[2E120100]        <1> 	mov [currentfolderloc], eax
  3492 00002AE8 E8E2F2FFFF          <1> 	call clear
  3493                              <1> 	
  3494                              <1> bootfilecheck:
  3495 00002AED 803D[36140100]01    <1> 	cmp byte [ranboot], 1
  3496 00002AF4 0F8421000000        <1> 	je near nobootfile
  3497                              <1> 	%ifdef hardware.automatic
  3498 00002AFA E854360000          <1> 		call initializelater ;Initialize components that have debug messages
  3499                              <1> 	%endif
  3500 00002AFF BF[36890000]        <1> 	mov edi, bootfilename
  3501 00002B04 BE00004000          <1> 	mov esi, 0x400000
  3502 00002B09 E8723A0000          <1> 	call loadfile
  3503 00002B0E 81FA00000000        <1> 	cmp edx, 0
  3504 00002B14 7505                <1> 	jne nobootfile
  3505 00002B16 E8B20D0000          <1> 	call progbatchfound
  3506                              <1> nobootfile:	
  3507 00002B1B C605[36140100]01    <1> 	mov byte [ranboot], 1
  3508                              <1> 
  3509 00002B22 BE[03000000]        <1> 	mov esi, signature
  3510                              <1> .sigcopyloop:	;this prevents an odd error
  3511 00002B27 658A06              <1> 	mov al, [gs:esi]
  3512 00002B2A 8806                <1> 	mov [esi], al
  3513 00002B2C 46                  <1> 	inc esi
  3514 00002B2D 81FE[1D000000]      <1> 	cmp esi, signatureend
  3515 00002B33 72F2                <1> 	jb .sigcopyloop
  3516                              <1> 	
  3517 00002B35 BE[03000000]        <1> 	mov esi, signature
  3518 00002B3A E8E7F1FFFF          <1> 	call print
  3519 00002B3F 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3520 00002B45 E8F6060000          <1> 	call showdec
  3521 00002B4A BE[77890000]        <1> 	mov esi, line
  3522 00002B4F E8D2F1FFFF          <1> 	call print
  3523 00002B54 BE[53890000]        <1> 	mov esi, userask
  3524 00002B59 E8C8F1FFFF          <1> 	call print
  3525                              <1> usercheck:
  3526 00002B5E BE[A6280100]        <1> 	mov esi, buftxt
  3527 00002B63 BF[A62C0100]        <1> 	mov edi, buftxtend
  3528 00002B68 B00A                <1> 	mov al, 10
  3529 00002B6A E8E4F2FFFF          <1> 	call rdprint
  3530 00002B6F 56                  <1> 	push esi
  3531 00002B70 BE[5D890000]        <1> 	mov esi, pwdask
  3532 00002B75 E8ACF1FFFF          <1> 	call print
  3533 00002B7A 5E                  <1> 	pop esi
  3534 00002B7B 46                  <1> 	inc esi
  3535 00002B7C 8935[712C0000]      <1> 	mov [esipass], esi
  3536                              <1> passcheck:
  3537 00002B82 E879F7FFFF          <1> 	call getchar
  3538 00002B87 3C0A                <1> 	cmp al, 10
  3539 00002B89 0F8438000000        <1> 	je near gotpass
  3540 00002B8F 3C08                <1> 	cmp al, 8
  3541 00002B91 0F8412000000        <1> 	je near backpass
  3542 00002B97 8806                <1> 	mov [esi], al
  3543 00002B99 46                  <1> 	inc esi
  3544 00002B9A 30E4                <1> 	xor ah, ah
  3545 00002B9C B02A                <1> 	mov al, "*"
  3546 00002B9E E8D9F7FFFF          <1> 	call prcharint
  3547 00002BA3 EBDD                <1> 	jmp passcheck
  3548 00002BA5 08200800            <1> backcursor2 db 8," ",8,0
  3549                              <1> backpass:
  3550 00002BA9 3B35[712C0000]      <1> 	cmp esi, [esipass]
  3551 00002BAF 0F84CDFFFFFF        <1> 	je near passcheck
  3552 00002BB5 4E                  <1> 	dec esi
  3553 00002BB6 C60600              <1> 	mov byte [esi], 0
  3554 00002BB9 56                  <1> 	push esi
  3555 00002BBA BE[A52B0000]        <1> 	mov esi, backcursor2
  3556 00002BBF E862F1FFFF          <1> 	call print
  3557 00002BC4 5E                  <1> 	pop esi
  3558 00002BC5 EBBB                <1> 	jmp passcheck
  3559                              <1> gotpass:
  3560 00002BC7 B00A                <1> 	mov al, 10
  3561 00002BC9 E8AEF7FFFF          <1> 	call prcharint
  3562 00002BCE 30C0                <1> 	xor al, al
  3563 00002BD0 31C9                <1> 	xor ecx, ecx
  3564 00002BD2 8806                <1> 	mov [esi], al
  3565 00002BD4 BB[79890000]        <1> 	mov ebx, userlst
  3566                              <1> userfind:
  3567 00002BD9 BE[A6280100]        <1> 	mov esi, buftxt
  3568 00002BDE 8A06                <1> 	mov al, [esi]
  3569 00002BE0 3C00                <1> 	cmp al, 0
  3570 00002BE2 0F84EFFEFFFF        <1> 	je near os
  3571 00002BE8 891D[752C0000]      <1> 	mov [usercache], ebx
  3572 00002BEE E860030000          <1> 	call tester
  3573 00002BF3 3C01                <1> 	cmp al, 1
  3574 00002BF5 7416                <1> 	je pwdtest
  3575 00002BF7 41                  <1> 	inc ecx
  3576                              <1> nxtuser:
  3577 00002BF8 8A03                <1> 	mov al, [ebx]
  3578 00002BFA 43                  <1> 	inc ebx
  3579 00002BFB 3C00                <1> 	cmp al, 0
  3580 00002BFD 75F9                <1> 	jne nxtuser
  3581 00002BFF 81FB[9C890000]      <1> 	cmp ebx, userlstend
  3582 00002C05 0F83CCFEFFFF        <1> 	jae near os
  3583 00002C0B EBCC                <1> 	jmp userfind
  3584                              <1> pwdtest:
  3585 00002C0D 46                  <1> 	inc esi
  3586 00002C0E 43                  <1> 	inc ebx
  3587 00002C0F E83F030000          <1> 	call tester
  3588 00002C14 3C01                <1> 	cmp al, 1
  3589 00002C16 7402                <1> 	je pwdrgt
  3590 00002C18 EBDE                <1> 	jmp nxtuser
  3591                              <1> pwdrgt:
  3592 00002C1A D1E9                <1> 	shr ecx, 1
  3593 00002C1C 890D[32140100]      <1> 	mov [uid], ecx
  3594 00002C22 E8A8F1FFFF          <1> 	call clear
  3595 00002C27 31C9                <1> 	xor ecx, ecx
  3596 00002C29 41                  <1> 	inc ecx
  3597 00002C2A 890D[50DA0200]      <1> 	mov [commandbufpos], ecx
  3598                              <1> returnfromexp:
  3599 00002C30 66B90002            <1> 	mov cx, 200h
  3600 00002C34 BE[A6280100]        <1> 	mov esi, buftxt
  3601 00002C39 8935[4F2F0000]      <1> 	mov [currentcommandloc], esi
  3602 00002C3F E825000000          <1> 	call bufclr
  3603                              <1> clearolddata:
  3604 00002C44 31C0                <1> 	xor eax, eax
  3605 00002C46 A2[37140100]        <1> 	mov [IFON], al
  3606 00002C4B A2[38140100]        <1> 	mov [IFTRUE], al
  3607 00002C50 A2[A0140100]        <1> 	mov [BATCHISON], al
  3608 00002C55 A3[9C140100]        <1> 	mov [BATCHPOS], eax
  3609 00002C5A A2[A1140100]        <1> 	mov [LOOPON], al
  3610 00002C5F A3[A2140100]        <1> 	mov [LOOPPOS], eax
  3611 00002C64 E933000000          <1> 	jmp nwcmd
  3612                              <1> bufclr:	
  3613 00002C69 30C0                <1> 	xor al, al
  3614 00002C6B 8806                <1> 	mov [esi], al
  3615 00002C6D 46                  <1> 	inc esi
  3616 00002C6E E2F9                <1> 	loop bufclr
  3617 00002C70 C3                  <1> 	ret
  3618                              <1> 
  3619 00002C71 00000000            <1> esipass dd 0
  3620 00002C75 [79890000]          <1> usercache dd userlst
  3621                              <1> 	
  3622                              <1> buftxtclear:
  3623 00002C79 30C0                <1> 	xor al, al
  3624 00002C7B BE[A6280100]        <1> 	mov esi, buftxt
  3625 00002C80 81FE[A62C0100]      <1> clearbuftxt: cmp esi, buf2
  3626 00002C86 730E                <1> 	jae retbufclr
  3627 00002C88 8806                <1> 	mov [esi], al
  3628 00002C8A 46                  <1> 	inc esi
  3629 00002C8B EBF3                <1> 	jmp clearbuftxt
  3630                              <1> 
  3631 00002C8D 39DE                <1> clearitbuf: cmp esi, ebx
  3632 00002C8F 7305                <1> 	jae retbufclr
  3633 00002C91 8806                <1> 	mov [esi], al
  3634 00002C93 46                  <1> 	inc esi
  3635 00002C94 EBF7                <1> 	jmp clearitbuf
  3636 00002C96 C3                  <1> retbufclr: ret
  3637                              <1> 
  3638 00002C97 E900000000          <1> full:	jmp nwcmd
  3639                              <1> 
  3640                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3641                              <1> nwcmd:
  3642 00002C9C FB                  <1> 	sti
  3643 00002C9D 31C0                <1> 	xor eax, eax
  3644 00002C9F 3905[712E0000]      <1> 	cmp [nextcommandloc], eax
  3645 00002CA5 7413                <1> 	je nomultiplecommand
  3646 00002CA7 8B35[712E0000]      <1> 	mov esi, [nextcommandloc]
  3647 00002CAD 8935[752E0000]      <1> 	mov [thiscommandloc], esi
  3648 00002CB3 E8C6010000          <1> 	call fixvariables
  3649 00002CB8 EBE2                <1> 	jmp nwcmd
  3650                              <1> nomultiplecommand:
  3651 00002CBA A3[752E0000]        <1> 	mov [thiscommandloc], eax
  3652 00002CBF 3805[1F670000]      <1> 	cmp [threadson], al
  3653 00002CC5 7405                <1> 	je noclinwcmd
  3654 00002CC7 A2[1F670000]        <1> 	mov [threadson], al
  3655                              <1> noclinwcmd:
  3656 00002CCC B001                <1> 	mov al, 1
  3657 00002CCE 3805[A0140100]      <1> 	cmp [BATCHISON], al
  3658 00002CD4 7501                <1> 	jne cancel
  3659 00002CD6 C3                  <1> 	ret
  3660 00002CD7 30C0                <1> cancel:	xor al, al
  3661 00002CD9 A2[37140100]        <1> 	mov [IFON], al
  3662 00002CDE A2[A0140100]        <1> 	mov [BATCHISON], al
  3663 00002CE3 B05B                <1> 	mov al, '['
  3664 00002CE5 66BB0700            <1> 	mov bx, 7
  3665 00002CE9 E8A1F6FFFF          <1> 	call prcharq
  3666 00002CEE 8B35[752C0000]      <1> 	mov esi, [usercache]
  3667 00002CF4 E80EF0FFFF          <1> 	call printquiet
  3668 00002CF9 BE[67890000]        <1> 	mov esi, computer
  3669 00002CFE E804F0FFFF          <1> 	call printquiet
  3670 00002D03 BE[32120100]        <1> 	mov esi, currentfolder
  3671 00002D08 0335[2A120100]      <1> 	add esi, [lastfolderloc]
  3672 00002D0E E8F4EFFFFF          <1> 	call printquiet
  3673 00002D13 BE[72890000]        <1> 	mov esi, endprompt
  3674 00002D18 E809F0FFFF          <1> 	call print
  3675 00002D1D E857FFFFFF          <1> 	call buftxtclear
  3676 00002D22 BE[A6280100]        <1> 	mov esi, buftxt
  3677 00002D27 C605[E9220000]01    <1> 	mov byte [commandedit], 1
  3678 00002D2E B00A                <1> 	mov al, 10
  3679 00002D30 66BB0700            <1> 	mov bx, 7
  3680 00002D34 BF[A62C0100]        <1> 	mov edi, buftxtend
  3681 00002D39 E815F1FFFF          <1> 	call rdprint
  3682 00002D3E C605[E9220000]00    <1> 	mov byte [commandedit], 0
  3683 00002D45 803D[A6280100]00    <1> 	cmp byte [buftxt], 0
  3684 00002D4C 0F844AFFFFFF        <1> 	je near nwcmd
  3685 00002D52 8B35[50DA0200]      <1> gotcmd:	mov esi, [commandbufpos]
  3686 00002D58 8935[4CDA0200]      <1> 	mov [lastcommandpos], esi
  3687 00002D5E FF05[58DA0200]      <1> 	inc dword [commandsentered]
  3688 00002D64 BF[A6280100]        <1> 	mov edi, buftxt
  3689 00002D69 81C6[5CDA0200]      <1> 	add esi, commandbuf
  3690 00002D6F 81FE[5CEA0200]      <1> 	cmp esi, commandbufend
  3691 00002D75 7605                <1> 	jbe copycommand
  3692 00002D77 BE[5CDA0200]        <1> 	mov esi, commandbuf
  3693                              <1> copycommand:
  3694 00002D7C 8A07                <1> 	mov al, [edi]
  3695 00002D7E 8806                <1> 	mov [esi], al
  3696 00002D80 47                  <1> 	inc edi
  3697 00002D81 46                  <1> 	inc esi
  3698 00002D82 3C00                <1> 	cmp al, 0
  3699 00002D84 740F                <1> 	je donecopy
  3700 00002D86 81FE[5CEA0200]      <1> 	cmp esi, commandbufend
  3701 00002D8C 76EE                <1> 	jbe copycommand
  3702 00002D8E BE[5CDA0200]        <1> 	mov esi, commandbuf
  3703 00002D93 EBE7                <1> 	jmp copycommand
  3704                              <1> donecopy:
  3705 00002D95 81EE[5CDA0200]      <1> 	sub esi, commandbuf
  3706 00002D9B 8935[50DA0200]      <1> 	mov [commandbufpos], esi
  3707 00002DA1 E8D3000000          <1> 	call run
  3708 00002DA6 E9F1FEFFFF          <1> 	jmp nwcmd
  3709                              <1> 
  3710 00002DAB E8C9FEFFFF          <1> input:	call buftxtclear
  3711 00002DB0 BE[A6280100]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3712 00002DB5 BF[A62C0100]        <1> 	mov edi, buftxtend
  3713 00002DBA B00A                <1> stdin:	mov al, 10
  3714 00002DBC B307                <1> 	mov bl, 7
  3715 00002DBE E890F0FFFF          <1> 	call rdprint
  3716 00002DC3 C3                  <1> 	ret
  3717                              <1> 
  3718                              <1> replacevariable:
  3719 00002DC4 8A4601              <1> 	mov al, [esi + 1]
  3720 00002DC7 C64601FF            <1> 	mov byte [esi + 1], 255
  3721 00002DCB 3C24                <1> 	cmp al, "$"
  3722 00002DCD 0F84AB000000        <1> 	je near fixvariables
  3723 00002DD3 884601              <1> 	mov [esi + 1], al
  3724 00002DD6 56                  <1> 	push esi
  3725 00002DD7 81EE[A6280100]      <1> 	sub esi, buftxt
  3726 00002DDD 89F7                <1> 	mov edi, esi
  3727 00002DDF 81C6[A6280100]      <1> 	add esi, buftxt
  3728 00002DE5 47                  <1> 	inc edi
  3729 00002DE6 BB[A6140100]        <1> 	mov ebx, variables
  3730 00002DEB E834150000          <1> 	call nxtvrech
  3731 00002DF0 89F7                <1> 	mov edi, esi
  3732 00002DF2 31DB                <1> 	xor ebx, ebx
  3733 00002DF4 4E                  <1> 	dec esi
  3734                              <1> findvarname:
  3735 00002DF5 4E                  <1> 	dec esi
  3736 00002DF6 8A06                <1> 	mov al, [esi]
  3737 00002DF8 43                  <1> 	inc ebx
  3738 00002DF9 3C04                <1> 	cmp al, 4
  3739 00002DFB 75F8                <1> 	jne findvarname
  3740 00002DFD 5E                  <1> 	pop esi
  3741                              <1> replacevarloop:
  3742 00002DFE 8A07                <1> 	mov al, [edi]
  3743 00002E00 3C00                <1> 	cmp al, 0
  3744 00002E02 0F8413000000        <1> 	je near compressbuftxt
  3745 00002E08 81FB00000000        <1> 	cmp ebx, 0
  3746 00002E0E 0F8416000000        <1> 	je near expandbuftxt
  3747 00002E14 8806                <1> 	mov [esi], al
  3748 00002E16 4B                  <1> 	dec ebx
  3749 00002E17 46                  <1> 	inc esi
  3750 00002E18 47                  <1> 	inc edi
  3751 00002E19 EBE3                <1> 	jmp replacevarloop
  3752                              <1> compressbuftxt:
  3753 00002E1B 8A041E              <1> 	mov al, [esi + ebx]
  3754 00002E1E 8806                <1> 	mov [esi], al
  3755 00002E20 46                  <1> 	inc esi
  3756 00002E21 3C00                <1> 	cmp al, 0
  3757 00002E23 75F6                <1> 	jne compressbuftxt
  3758 00002E25 E954000000          <1> 	jmp fixvariables
  3759                              <1> expandbuftxt:
  3760 00002E2A 89F1                <1> 	mov ecx, esi
  3761 00002E2C 8A26                <1> 	mov ah, [esi]
  3762                              <1> expandbuftxtlp:
  3763 00002E2E 8A1E                <1> 	mov bl, [esi]
  3764 00002E30 46                  <1> 	inc esi
  3765 00002E31 8A3E                <1> 	mov bh, [esi]
  3766 00002E33 8826                <1> 	mov [esi], ah
  3767 00002E35 88FC                <1> 	mov ah, bh
  3768 00002E37 80FB00              <1> 	cmp bl, 0
  3769 00002E3A 75F2                <1> 	jne expandbuftxtlp
  3770 00002E3C 89CE                <1> 	mov esi, ecx
  3771 00002E3E 8806                <1> 	mov [esi], al
  3772 00002E40 47                  <1> 	inc edi
  3773 00002E41 8A07                <1> 	mov al, [edi]
  3774 00002E43 3C00                <1> 	cmp al, 0
  3775 00002E45 0F8433000000        <1> 	je near fixvariables
  3776 00002E4B 46                  <1> 	inc esi
  3777 00002E4C EBDC                <1> 	jmp expandbuftxt
  3778                              <1> multipleprogline:
  3779 00002E4E 30E4                <1> 	xor ah, ah
  3780 00002E50 8826                <1> 	mov [esi], ah
  3781 00002E52 46                  <1> 	inc esi
  3782 00002E53 8935[712E0000]      <1> 	mov [nextcommandloc], esi
  3783 00002E59 E93E000000          <1> 	jmp donefixvariables
  3784                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3785 00002E5E 46                  <1> 	inc esi
  3786 00002E5F 8A06                <1> 	mov al, [esi]
  3787 00002E61 C606FF              <1> 	mov byte [esi], 255
  3788 00002E64 3C23                <1> 	cmp al, '#'
  3789 00002E66 7416                <1> 	je fixvariables
  3790 00002E68 4E                  <1> 	dec esi
  3791 00002E69 C60600              <1> 	mov byte [esi], 0
  3792 00002E6C E90D000000          <1> 	jmp fixvariables
  3793                              <1> 	
  3794 00002E71 00000000            <1> nextcommandloc dd 0
  3795 00002E75 00000000            <1> thiscommandloc dd 0	
  3796                              <1> run:
  3797 00002E79 BE[A6280100]        <1> 	mov esi, buftxt
  3798 00002E7E 46                  <1> fixvariables:	inc esi
  3799 00002E7F 8A06                <1> 	mov al, [esi]
  3800 00002E81 3C23                <1> 	cmp al, '#'	;inline comment
  3801 00002E83 74D9                <1> 	je inlinecomment
  3802 00002E85 3C24                <1> 	cmp al, '$' ;variable
  3803 00002E87 0F8437FFFFFF        <1> 	je near replacevariable
  3804 00002E8D 3C3B                <1> 	cmp al, ';' ;program list
  3805 00002E8F 74BD                <1> 	je multipleprogline
  3806 00002E91 3C00                <1> 	cmp al, 0
  3807 00002E93 75E9                <1> 	jne fixvariables
  3808 00002E95 31C0                <1> 	xor eax, eax
  3809 00002E97 A3[712E0000]        <1> 	mov [nextcommandloc], eax
  3810                              <1> donefixvariables:
  3811 00002E9C 803D[3A340000]00    <1> 	cmp byte [indexdone], 0
  3812 00002EA3 7505                <1> 	jne progtest
  3813 00002EA5 E8FB040000          <1> 	call indexfiles
  3814                              <1> progtest:
  3815 00002EAA 31C0                <1> 	xor eax, eax
  3816 00002EAC BB[260E0100]        <1> 	mov ebx, fileindex
  3817 00002EB1 668B03              <1> prgnxt:	mov ax, [ebx]
  3818 00002EB4 B1FF                <1> 	mov cl, 255
  3819 00002EB6 B52C                <1> 	mov ch, 44
  3820 00002EB8 6639C8              <1> 	cmp ax, cx
  3821 00002EBB 740B                <1> 	je fndprg
  3822 00002EBD 43                  <1> 	inc ebx
  3823 00002EBE 81FB[26120100]      <1> 	cmp ebx, fileindexend
  3824 00002EC4 735D                <1> 	jae prgnf
  3825 00002EC6 EBE9                <1> 	jmp prgnxt
  3826 00002EC8 81C302000000        <1> fndprg: add ebx, 2
  3827 00002ECE 31C9                <1> 	xor ecx, ecx
  3828 00002ED0 BE[A6280100]        <1> 	mov esi, buftxt
  3829 00002ED5 390D[752E0000]      <1> 	cmp [thiscommandloc], ecx
  3830 00002EDB 7406                <1> 	je noprgtstmultiple
  3831 00002EDD 8B35[752E0000]      <1> 	mov esi, [thiscommandloc]
  3832                              <1> noprgtstmultiple:
  3833 00002EE3 E8A6000000          <1> 	call cndtest
  3834 00002EE8 3C01                <1> 	cmp al, 1
  3835 00002EEA 7302                <1> 	jae prggood
  3836 00002EEC EBC3                <1> 	jmp prgnxt
  3837 00002EEE 81FB[26120100]      <1> prggood: cmp ebx, fileindexend
  3838 00002EF4 7358                <1> 	jae prgdn
  3839 00002EF6 31C0                <1> 	xor eax, eax
  3840 00002EF8 BE[A6280100]        <1> 	mov esi, buftxt
  3841 00002EFD 3905[752E0000]      <1> 	cmp [thiscommandloc], eax
  3842 00002F03 7406                <1> 	je noprggoodmul
  3843 00002F05 8B35[752E0000]      <1> 	mov esi, [thiscommandloc]
  3844                              <1> noprggoodmul:
  3845 00002F0B 8935[4F2F0000]      <1> 	mov [currentcommandloc], esi
  3846 00002F11 81C303000000        <1> 	add ebx, 3
  3847 00002F17 8B3B                <1> 	mov edi, [ebx]
  3848 00002F19 C605[1F670000]02    <1> 	mov byte [threadson], 2
  3849 00002F20 FFD7                <1> 	call edi
  3850 00002F22 C3                  <1> 	ret
  3851                              <1> prgnf:	
  3852 00002F23 8B35[4F2F0000]      <1> 	mov esi, [currentcommandloc]
  3853 00002F29 8A06                <1> 	mov al, [esi]
  3854 00002F2B 3C00                <1> 	cmp al, 0
  3855 00002F2D 741F                <1> 	je prgdn
  3856 00002F2F BE[3E890000]        <1> 	mov esi, notfound1
  3857 00002F34 E8EDEDFFFF          <1> 	call print
  3858 00002F39 8B35[4F2F0000]      <1> 	mov esi, [currentcommandloc]
  3859 00002F3F E8E2EDFFFF          <1> 	call print
  3860 00002F44 BE[46890000]        <1> 	mov esi, notfound2
  3861 00002F49 E8D8EDFFFF          <1> 	call print
  3862 00002F4E C3                  <1> prgdn:	ret
  3863                              <1> 
  3864 00002F4F 00000000            <1> currentcommandloc dd 0
  3865                              <1> 
  3866                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3867 00002F53 6631C0              <1> 	xor ax, ax
  3868 00002F56 8A06                <1> retest:	mov al, [esi]
  3869 00002F58 8A23                <1> 	mov ah, [ebx]
  3870 00002F5A 3C00                <1> 	cmp al, 0
  3871 00002F5C 7408                <1> 	je testtrue
  3872 00002F5E 38E0                <1> 	cmp al, ah
  3873 00002F60 750C                <1> 	jne testfalse
  3874 00002F62 43                  <1> 	inc ebx
  3875 00002F63 46                  <1> 	inc esi
  3876 00002F64 EBF0                <1> 	jmp retest
  3877                              <1> testtrue:
  3878 00002F66 80FC00              <1> 	cmp ah, 0
  3879 00002F69 7503                <1> 	jne testfalse
  3880 00002F6B B001                <1> 	mov al, 1
  3881 00002F6D C3                  <1> 	ret
  3882                              <1> testfalse:
  3883 00002F6E 30C0                <1> 	xor al, al
  3884 00002F70 C3                  <1> 	ret
  3885                              <1> 
  3886                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3887 00002F71 30C0                <1> 	xor al, al
  3888                              <1> opretest:
  3889 00002F73 8A06                <1> 	mov al, [esi]
  3890 00002F75 8A23                <1> 	mov ah, [ebx]
  3891 00002F77 38E0                <1> 	cmp al, ah
  3892 00002F79 7510                <1> 	jne optestfalse
  3893 00002F7B 80FC00              <1> 	cmp ah, 0
  3894 00002F7E 7404                <1> 	je optesttrue
  3895 00002F80 43                  <1> 	inc ebx
  3896 00002F81 46                  <1> 	inc esi
  3897 00002F82 EBEF                <1> 	jmp opretest
  3898                              <1> optesttrue:
  3899 00002F84 3C00                <1> 	cmp al, 0
  3900 00002F86 7503                <1> 	jne optestfalse
  3901 00002F88 B001                <1> 	mov al, 1
  3902 00002F8A C3                  <1> 	ret
  3903                              <1> optestfalse:
  3904 00002F8B 30C0                <1> 	xor al, al
  3905 00002F8D C3                  <1> 	ret
  3906                              <1> 
  3907                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3908 00002F8E 30C0                <1> 	xor al, al
  3909 00002F90 8A06                <1> cndretest:	mov al, [esi]
  3910 00002F92 8A23                <1> 	mov ah, [ebx]
  3911 00002F94 38CC                <1> 	cmp ah, cl
  3912 00002F96 7408                <1> 	je cndtesttrue
  3913 00002F98 38E0                <1> 	cmp al, ah
  3914 00002F9A 750B                <1> 	jne cndtestfalse
  3915 00002F9C 43                  <1> 	inc ebx
  3916 00002F9D 46                  <1> 	inc esi
  3917 00002F9E EBF0                <1> 	jmp cndretest
  3918                              <1> cndtesttrue:
  3919 00002FA0 38C8                <1> 	cmp al, cl
  3920 00002FA2 7506                <1> 	jne cndtestalmost
  3921 00002FA4 B001                <1> 	mov al, 1
  3922 00002FA6 C3                  <1> 	ret
  3923                              <1> cndtestfalse:
  3924 00002FA7 30C0                <1> 	xor al, al
  3925 00002FA9 C3                  <1> 	ret
  3926                              <1> cndtestalmost:
  3927 00002FAA B002                <1> 	mov al, 2
  3928 00002FAC C3                  <1> 	ret
  3929                              <1> 	
  3930                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3931                              <1> 		                ;ends if array seperator is found backwards after 0
  3932                              <1> 	arnxt:	      
  3933 00002FAD 88E8                <1> 		mov al, ch
  3934 00002FAF 88CC                <1> 		mov ah, cl        
  3935 00002FB1 663906              <1> 		cmp [esi], ax
  3936 00002FB4 744D                <1> 		je ardn
  3937 00002FB6 66390E              <1> 		cmp [esi], cx
  3938 00002FB9 7407                <1> 		je arfnd
  3939 00002FBB 46                  <1> 		inc esi
  3940 00002FBC 39DE                <1> 		cmp esi, ebx
  3941 00002FBE 7343                <1> 		jae ardn
  3942 00002FC0 EBEB                <1> 		jmp arnxt
  3943 00002FC2 81C602000000        <1> 	arfnd: add esi, 2
  3944 00002FC8 891D[04300000]      <1> 		mov [arbx], ebx
  3945 00002FCE 890D[08300000]      <1> 		mov [arcx], ecx
  3946 00002FD4 E84DEDFFFF          <1> 		call print
  3947 00002FD9 8935[0A300000]      <1> 		mov [arsi], esi
  3948 00002FDF BE[77890000]        <1> 		mov esi, line
  3949 00002FE4 E83DEDFFFF          <1> 		call print
  3950 00002FE9 8B1D[04300000]      <1> 		mov ebx, [arbx]
  3951 00002FEF 668B0D[08300000]    <1> 		mov cx, [arcx]
  3952 00002FF6 8B35[0A300000]      <1> 		mov esi, [arsi]
  3953 00002FFC 46                  <1> 		inc esi
  3954 00002FFD 39DE                <1> 		cmp esi, ebx
  3955 00002FFF 7302                <1> 		jae ardn
  3956 00003001 EBAA                <1> 		jmp arnxt
  3957 00003003 C3                  <1> 	ardn:	ret
  3958 00003004 00000000            <1> arbx:	dw 0,0
  3959 00003008 0000                <1> arcx:	db 0,0
  3960 0000300A 00000000            <1> arsi:	dw 0,0
  3961                              <1> 
  3962                              <1> clearbuffer:
  3963 0000300E BE[A62C0100]        <1> 	mov esi, buf2
  3964 00003013 B030                <1> 	mov al, '0'
  3965 00003015 81FE[BA2C0100]      <1> clearbuf: cmp esi, numbuf
  3966 0000301B 7305                <1> 	jae doneclearbuff
  3967 0000301D 8806                <1> 	mov [esi], al
  3968 0000301F 46                  <1> 	inc esi
  3969 00003020 EBF3                <1> 	jmp clearbuf
  3970                              <1> doneclearbuff: 
  3971 00003022 C3                  <1> 		ret
  3972                              <1> 
  3973                              <1> convert:
  3974 00003023 4E                  <1> 	dec esi
  3975 00003024 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3976                              <1> .lp:
  3977 00003026 89DE                <1> 	mov esi, ebx
  3978 00003028 81EE09000000        <1> 	sub esi, 9
  3979 0000302E 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3980 00003034 720A                <1> 	jb .8
  3981 00003036 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3982 0000303C FE06                <1> 	inc byte [esi]
  3983 0000303E EBE6                <1> 	jmp .lp
  3984 00003040 46                  <1> .8:	inc esi
  3985 00003041 81F900E1F505        <1> 	cmp ecx, 100000000
  3986 00003047 720A                <1> 	jb .7
  3987 00003049 81E900E1F505        <1> 	sub ecx, 100000000
  3988 0000304F FE06                <1> 	inc byte [esi]
  3989 00003051 EBD3                <1> 	jmp .lp
  3990 00003053 46                  <1> .7:	inc esi
  3991 00003054 81F980969800        <1> 	cmp ecx, 10000000
  3992 0000305A 720A                <1> 	jb .6
  3993 0000305C 81E980969800        <1> 	sub ecx, 10000000
  3994 00003062 FE06                <1> 	inc byte [esi]
  3995 00003064 EBC0                <1> 	jmp .lp
  3996 00003066 46                  <1> .6:	inc esi
  3997 00003067 81F940420F00        <1> 	cmp ecx, 1000000
  3998 0000306D 720A                <1> 	jb .5
  3999 0000306F 81E940420F00        <1> 	sub ecx, 1000000
  4000 00003075 FE06                <1> 	inc byte [esi]
  4001 00003077 EBAD                <1> 	jmp .lp
  4002 00003079 46                  <1> .5:	inc esi
  4003 0000307A 81F9A0860100        <1> 	cmp ecx, 100000
  4004 00003080 720A                <1> 	jb .4
  4005 00003082 81E9A0860100        <1> 	sub ecx, 100000
  4006 00003088 FE06                <1> 	inc byte [esi]
  4007 0000308A EB9A                <1> 	jmp .lp
  4008 0000308C 46                  <1> .4:	inc esi
  4009 0000308D 81F910270000        <1> 	cmp ecx, 10000
  4010 00003093 720A                <1> 	jb .3
  4011 00003095 81E910270000        <1> 	sub ecx, 10000
  4012 0000309B FE06                <1> 	inc byte [esi]
  4013 0000309D EB87                <1> 	jmp .lp
  4014 0000309F 46                  <1> .3:	inc esi
  4015 000030A0 81F9E8030000        <1> 	cmp ecx, 1000
  4016 000030A6 720D                <1> 	jb .2
  4017 000030A8 81E9E8030000        <1> 	sub ecx, 1000
  4018 000030AE FE06                <1> 	inc byte [esi]
  4019 000030B0 E971FFFFFF          <1> 	jmp .lp
  4020 000030B5 46                  <1> .2:	inc esi
  4021 000030B6 81F964000000        <1> 	cmp ecx, 100
  4022 000030BC 720D                <1> 	jb .1
  4023 000030BE 81E964000000        <1> 	sub ecx, 100
  4024 000030C4 FE06                <1> 	inc byte [esi]
  4025 000030C6 E95BFFFFFF          <1> 	jmp .lp
  4026 000030CB 46                  <1> .1:	inc esi
  4027 000030CC 81F90A000000        <1> 	cmp ecx, 10
  4028 000030D2 720D                <1> 	jb .0
  4029 000030D4 81E90A000000        <1> 	sub ecx, 10
  4030 000030DA FE06                <1> 	inc byte [esi]
  4031 000030DC E945FFFFFF          <1> 	jmp .lp
  4032 000030E1 46                  <1> .0:	inc esi
  4033 000030E2 81F901000000        <1> 	cmp ecx, 1
  4034 000030E8 720D                <1> 	jb .dn
  4035 000030EA 81E901000000        <1> 	sub ecx, 1
  4036 000030F0 FE06                <1> 	inc byte [esi]
  4037 000030F2 E92FFFFFFF          <1> 	jmp .lp
  4038                              <1> .dn:
  4039 000030F7 C3                  <1> 	ret
  4040                              <1> 
  4041                              <1> 	
  4042                              <1> 
  4043 000030F8 00<rept>            <1> hexnumber times 8 db 0
  4044 00003100 202000              <1> hexnumberend db "  ",0
  4045                              <1> 
  4046                              <1> converthex:
  4047                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4048 00003103 56                  <1> 	push esi
  4049 00003104 B030                <1> 	mov al, "0"
  4050 00003106 39FE                <1> .clearlp: cmp esi, edi
  4051 00003108 7305                <1> 	jae .doneclear
  4052 0000310A 8806                <1> 	mov [esi], al
  4053 0000310C 46                  <1> 	inc esi
  4054 0000310D EBF7                <1> 	jmp .clearlp
  4055                              <1> .doneclear:
  4056 0000310F 81EE02000000        <1> 	sub esi, 2
  4057 00003115 89C8                <1> 	mov eax, ecx
  4058                              <1> .loop:
  4059 00003117 30FF                <1> 	xor bh, bh
  4060 00003119 88C3                <1> 	mov bl, al
  4061 0000311B 66C1E304            <1> 	shl bx, 4
  4062 0000311F C0EB04              <1> 	shr bl, 4
  4063 00003122 86DF                <1> 	xchg bl, bh ;they are backwards
  4064 00003124 80C330              <1> 	add bl, 48
  4065 00003127 80FB39              <1> 	cmp bl, "9"
  4066 0000312A 7609                <1> 	jbe .goodbl
  4067 0000312C 80EB30              <1> 	sub bl, 48
  4068 0000312F 80EB0A              <1> 	sub bl, 0xA
  4069 00003132 80C341              <1> 	add bl, "A"
  4070                              <1> .goodbl:
  4071 00003135 80C730              <1> 	add bh, 48
  4072 00003138 80FF39              <1> 	cmp bh, "9"
  4073 0000313B 7609                <1> 	jbe .goodbh
  4074 0000313D 80EF30              <1> 	sub bh, 48
  4075 00003140 80EF0A              <1> 	sub bh, 0xA
  4076 00003143 80C741              <1> 	add bh, "A"
  4077                              <1> .goodbh:
  4078 00003146 C1E808              <1> 	shr eax, 8
  4079 00003149 66891E              <1> 	mov [esi], bx
  4080 0000314C 81EE02000000        <1> 	sub esi, 2
  4081 00003152 3B3424              <1> 	cmp esi, [esp]
  4082 00003155 7207                <1> 	jb .done
  4083 00003157 3D00000000          <1> 	cmp eax, 0
  4084 0000315C 75B9                <1> 	jne .loop
  4085                              <1> .done:
  4086 0000315E 5E                  <1> 	pop esi
  4087 0000315F C3                  <1> 	ret
  4088                              <1> 	
  4089                              <1> 	
  4090 00003160 00                  <1> smallhex db 0
  4091 00003161 01                  <1> firsthexshown db 1
  4092                              <1> showhexsmall:
  4093 00003162 C605[60310000]01    <1> 	mov byte [smallhex], 1
  4094 00003169 E808000000          <1> 	call showhex
  4095 0000316E C605[60310000]00    <1> 	mov byte [smallhex], 0
  4096 00003175 C3                  <1> 	ret
  4097                              <1> showhex:
  4098 00003176 60                  <1> 	pusha
  4099 00003177 BE[F8300000]        <1> 	mov esi, hexnumber
  4100 0000317C BF[00310000]        <1> 	mov edi, hexnumberend
  4101 00003181 E87DFFFFFF          <1> 	call converthex
  4102 00003186 803D[61310000]01    <1> 	cmp byte [firsthexshown], 1
  4103 0000318D 7503                <1> 	jne .show
  4104 0000318F 6631D2              <1> 	xor dx, dx
  4105                              <1> .show:
  4106 00003192 803D[61310000]03    <1> 	cmp byte [firsthexshown], 3
  4107 00003199 750A                <1> 	jne .nonewhexline
  4108 0000319B BE[77890000]        <1> 	mov esi, line
  4109 000031A0 E881EBFFFF          <1> 	call print
  4110                              <1> .nonewhexline:
  4111 000031A5 803D[61310000]04    <1> 	cmp byte [firsthexshown], 4
  4112 000031AC 7527                <1> 	jne .notab
  4113 000031AE B1A0                <1> 	mov cl, 160
  4114 000031B0 28D1                <1> 	sub cl, dl
  4115 000031B2 C0E905              <1> 	shr cl, 5
  4116 000031B5 C0E105              <1> 	shl cl, 5
  4117 000031B8 80F900              <1> 	cmp cl, 0
  4118 000031BB 750F                <1> 	jne .nonewline
  4119 000031BD BE[77890000]        <1> 	mov esi, line
  4120 000031C2 E85FEBFFFF          <1> 	call print
  4121 000031C7 E909000000          <1> 	jmp .notab
  4122                              <1> .nonewline:
  4123 000031CC 80C20F              <1> 	add dl, 15
  4124 000031CF C0EA04              <1> 	shr dl, 4
  4125 000031D2 C0E204              <1> 	shl dl, 4
  4126                              <1> .notab:
  4127 000031D5 BE[F8300000]        <1> 	mov esi, hexnumber
  4128 000031DA 803D[60310000]01    <1> 	cmp byte [smallhex],1
  4129 000031E1 7506                <1> 	jne .nosmall
  4130 000031E3 81C606000000        <1> 	add esi, 6
  4131                              <1> .nosmall:
  4132 000031E9 803D[61310000]05    <1> 	cmp byte [firsthexshown], 5
  4133 000031F0 750A                <1> 	jne .noquiet
  4134 000031F2 E810EBFFFF          <1> 	call printquiet
  4135 000031F7 E918000000          <1> 	jmp .donequiet
  4136                              <1> .noquiet:
  4137 000031FC 803D[61310000]06    <1> 	cmp byte [firsthexshown], 6
  4138 00003203 750A                <1> 	jne .normal
  4139 00003205 E810EBFFFF          <1> 	call printhighlight
  4140 0000320A E905000000          <1> 	jmp .donequiet
  4141                              <1> .normal:
  4142 0000320F E812EBFFFF          <1> 	call print
  4143                              <1> .donequiet:
  4144 00003214 803D[61310000]02    <1> 	cmp byte [firsthexshown], 2
  4145 0000321B 750A                <1> 	jne .shown
  4146 0000321D BE[77890000]        <1> 	mov esi, line
  4147 00003222 E8FFEAFFFF          <1> 	call print
  4148                              <1> .shown:
  4149 00003227 C605[61310000]00    <1> 	mov byte [firsthexshown], 0
  4150 0000322E 61                  <1> 	popa
  4151 0000322F C3                  <1> 	ret
  4152                              <1> 
  4153                              <1> 
  4154 00003230 303030303030303030- <1> decnumber db "00000000000000"
  4155 00003239 3030303030          <1>
  4156 0000323E 2000                <1> decnumberend: db " ",0
  4157                              <1> 
  4158                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4159 00003240 60                  <1> 	pusha
  4160 00003241 BF[30320000]        <1> 	mov edi, decnumber
  4161 00003246 BE[3E320000]        <1> 	mov esi, decnumberend
  4162                              <1> .clear:
  4163 0000324B C60730              <1> 	mov byte [edi], '0'
  4164 0000324E 47                  <1> 	inc edi
  4165 0000324F 39F7                <1> 	cmp edi, esi
  4166 00003251 72F8                <1> 	jb .clear
  4167 00003253 BF[30320000]        <1> 	mov edi, decnumber
  4168 00003258 E8C6FDFFFF          <1> 	call convert
  4169 0000325D 803D[61310000]01    <1> 	cmp byte [firsthexshown], 1
  4170 00003264 7503                <1> 	jne .show
  4171 00003266 6631D2              <1> 	xor dx, dx
  4172                              <1> .show:
  4173 00003269 803D[61310000]03    <1> 	cmp byte [firsthexshown], 3
  4174 00003270 750A                <1> 	jne .nonewdecline
  4175 00003272 BE[77890000]        <1> 	mov esi, line
  4176 00003277 E8AAEAFFFF          <1> 	call print
  4177                              <1> .nonewdecline:
  4178 0000327C 803D[61310000]04    <1> 	cmp byte [firsthexshown], 4
  4179 00003283 7527                <1> 	jne .notab
  4180 00003285 B1A0                <1> 	mov cl, 160
  4181 00003287 28D1                <1> 	sub cl, dl
  4182 00003289 C0E905              <1> 	shr cl, 5
  4183 0000328C C0E105              <1> 	shl cl, 5
  4184 0000328F 80F900              <1> 	cmp cl, 0
  4185 00003292 750F                <1> 	jne .nonewline
  4186 00003294 BE[77890000]        <1> 	mov esi, line
  4187 00003299 E888EAFFFF          <1> 	call print
  4188 0000329E E909000000          <1> 	jmp .notab
  4189                              <1> .nonewline:
  4190 000032A3 80C20F              <1> 	add dl, 15
  4191 000032A6 C0EA04              <1> 	shr dl, 4
  4192 000032A9 C0E204              <1> 	shl dl, 4
  4193                              <1> .notab:
  4194 000032AC BE[30320000]        <1> 	mov esi, decnumber
  4195 000032B1 4E                  <1> 	dec esi
  4196                              <1> .sifind:
  4197 000032B2 46                  <1> 	inc esi
  4198 000032B3 803E30              <1> 	cmp byte [esi], '0'
  4199 000032B6 74FA                <1> 	je .sifind
  4200 000032B8 E869EAFFFF          <1> 	call print
  4201 000032BD 803D[61310000]02    <1> 	cmp byte [firsthexshown], 2
  4202 000032C4 750A                <1> 	jne .shown
  4203 000032C6 BE[77890000]        <1> 	mov esi, line
  4204 000032CB E856EAFFFF          <1> 	call print
  4205                              <1> .shown:
  4206 000032D0 C605[61310000]00    <1> 	mov byte [firsthexshown], 0
  4207 000032D7 61                  <1> 	popa
  4208 000032D8 C3                  <1> 	ret
  4209                              <1> 	
  4210                              <1> cnvrthextxt:
  4211 000032D9 31C9                <1> 	xor ecx, ecx
  4212 000032DB 31C0                <1> 	xor eax, eax
  4213 000032DD 31D2                <1> 	xor edx, edx
  4214 000032DF 31DB                <1> 	xor ebx, ebx
  4215 000032E1 4E                  <1> 	dec esi
  4216                              <1> .end:
  4217 000032E2 46                  <1> 	inc esi
  4218 000032E3 8A06                <1> 	mov al, [esi]
  4219 000032E5 3C00                <1> 	cmp al, 0
  4220 000032E7 75F9                <1> 	jne .end
  4221                              <1> .loop:
  4222 000032E9 4E                  <1> 	dec esi
  4223 000032EA 8A06                <1> 	mov al, [esi]
  4224 000032EC 3C41                <1> 	cmp al, "A"
  4225 000032EE 7328                <1> 	jae .char
  4226 000032F0 2C30                <1> 	sub al, 48
  4227 000032F2 3C10                <1> 	cmp al, 16
  4228 000032F4 7721                <1> 	ja .done
  4229                              <1> .donechar:
  4230 000032F6 81FA00000000        <1> 	cmp edx, 0
  4231 000032FC 740E                <1> 	je .noshl
  4232 000032FE 89D3                <1> 	mov ebx, edx
  4233                              <1> .shl:
  4234 00003300 C1E004              <1> 	shl eax, 4
  4235 00003303 4B                  <1> 	dec ebx
  4236 00003304 81FB00000000        <1> 	cmp ebx, 0
  4237 0000330A 75F4                <1> 	jne .shl
  4238                              <1> .noshl:
  4239 0000330C 42                  <1> 	inc edx
  4240 0000330D 01C1                <1> 	add ecx, eax
  4241 0000330F 81FA08000000        <1> 	cmp edx, 8
  4242 00003315 72D2                <1> 	jb .loop
  4243                              <1> .done:
  4244 00003317 C3                  <1> 	ret
  4245                              <1> .char:
  4246 00003318 3C46                <1> 	cmp al, "F"
  4247 0000331A 77FB                <1> 	ja .done
  4248 0000331C 2C41                <1> 	sub al, "A"
  4249 0000331E 040A                <1> 	add al, 0xA
  4250 00003320 EBD4                <1> 	jmp .donechar
  4251                              <1> 	
  4252                              <1> 	
  4253                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4254 00003322 31C9                <1> 	xor ecx, ecx
  4255 00003324 31C0                <1> 	xor eax, eax
  4256 00003326 31D2                <1> 	xor edx, edx
  4257 00003328 31DB                <1> 	xor ebx, ebx
  4258 0000332A 4E                  <1> 	dec esi
  4259                              <1> .lp:
  4260 0000332B 46                  <1> 	inc esi
  4261 0000332C 8A06                <1> 	mov al, [esi]
  4262 0000332E 3C00                <1> 	cmp al, 0
  4263 00003330 75F9                <1> 	jne .lp
  4264 00003332 4E                  <1> 	dec esi
  4265 00003333 8A06                <1> 	mov al, [esi]
  4266 00003335 3C2E                <1> 	cmp al, '.'
  4267 00003337 7503                <1> 	jne .dot
  4268 00003339 46                  <1> 	inc esi
  4269 0000333A EBEF                <1> 	jmp .lp
  4270                              <1> .dot:
  4271 0000333C 3C20                <1> 	cmp al, ' '
  4272 0000333E 7404                <1> 	je .zero
  4273 00003340 3C30                <1> 	cmp al, '0'
  4274 00003342 7504                <1> 	jne .txtlp
  4275                              <1> .zero: 
  4276 00003344 39FE                <1> 		cmp esi, edi
  4277 00003346 7458                <1> 		je .done
  4278                              <1> .txtlp:
  4279 00003348 31C0                <1> 	xor eax, eax
  4280 0000334A 8A06                <1> 	mov al, [esi]
  4281 0000334C 3C3D                <1> 	cmp al, '='
  4282 0000334E 7450                <1> 	je .done
  4283 00003350 3C30                <1> 	cmp al, 48
  4284 00003352 724C                <1> 	jb .done
  4285 00003354 3C23                <1> 	cmp al, '#'
  4286 00003356 7448                <1> 	je .done
  4287 00003358 39FE                <1> 	cmp esi, edi
  4288 0000335A 7244                <1> 	jb .done
  4289 0000335C 81F900000000        <1> 	cmp ecx, 0
  4290 00003362 7708                <1> 	ja .exp
  4291 00003364 2C30                <1> .noexp:	sub al, 48
  4292 00003366 01C2                <1> 	add edx, eax
  4293 00003368 4E                  <1> 	dec esi
  4294 00003369 41                  <1> 	inc ecx
  4295 0000336A EBDC                <1> 	jmp .txtlp
  4296 0000336C 81F900000000        <1> .exp:	cmp ecx, 0
  4297 00003372 74F0                <1> 	je .noexp
  4298 00003374 2C30                <1> 	sub al, 48
  4299 00003376 51                  <1> 	push ecx
  4300 00003377 89C3                <1> .expmul:	mov ebx, eax
  4301 00003379 01D8                <1> 	add eax, ebx
  4302 0000337B 01D8                <1> 	add eax, ebx
  4303 0000337D 01D8                <1> 	add eax, ebx
  4304 0000337F 01D8                <1> 	add eax, ebx
  4305 00003381 01D8                <1> 	add eax, ebx
  4306 00003383 01D8                <1> 	add eax, ebx
  4307 00003385 01D8                <1> 	add eax, ebx
  4308 00003387 01D8                <1> 	add eax, ebx
  4309 00003389 01D8                <1> 	add eax, ebx
  4310 0000338B 81E901000000        <1> 	sub ecx, 1
  4311 00003391 81F900000000        <1> 	cmp ecx, 0
  4312 00003397 77DE                <1> 	ja .expmul
  4313 00003399 01C2                <1> 	add edx, eax
  4314 0000339B 59                  <1> 	pop ecx
  4315 0000339C 4E                  <1> 	dec esi
  4316 0000339D 41                  <1> 	inc ecx
  4317 0000339E EBA8                <1> 	jmp .txtlp
  4318 000033A0 89D1                <1> .done: mov ecx, edx
  4319 000033A2 C3                  <1> 	ret
  4320                                      %include "source/programs.asm"
  4321 000033A3 FF2C                <1> filetypes db 255,44
  4322                              <1> progstart:		;programs start here
  4323                              <1> indexfiles:
  4324 000033A5 BE[A5330000]        <1> 	mov esi, progstart
  4325 000033AA BB[260E0100]        <1> 	mov ebx, fileindex
  4326 000033AF BF[A5330000]        <1> 	mov edi, progstart
  4327 000033B4 81EF02000000        <1> 	sub edi, 2
  4328                              <1> indexloop:
  4329 000033BA 668B0E              <1> 	mov cx, [esi]
  4330                              <1> 	indexloop2:
  4331 000033BD 663B0F              <1> 		cmp cx, [edi]
  4332 000033C0 7424                <1> 		je indexloop2done
  4333 000033C2 81EF02000000        <1> 		sub edi, 2
  4334 000033C8 81FF[A3330000]      <1> 		cmp edi, filetypes
  4335 000033CE 73ED                <1> 		jae indexloop2
  4336 000033D0 BF[A5330000]        <1> 	mov edi, progstart
  4337 000033D5 81EF02000000        <1> 	sub edi, 2
  4338 000033DB 46                  <1> 	inc esi
  4339 000033DC 81FE[41530000]      <1> 	cmp esi, batchprogend
  4340 000033E2 734E                <1> 	jae indexloopdone
  4341 000033E4 EBD4                <1> 	jmp indexloop
  4342                              <1> indexloop2done:
  4343 000033E6 66890B              <1> 	mov [ebx], cx
  4344 000033E9 81C302000000        <1> 	add ebx, 2
  4345 000033EF 81C602000000        <1> 	add esi, 2
  4346                              <1> 	nameindex:
  4347 000033F5 8A0E                <1> 		mov cl, [esi]
  4348 000033F7 80F900              <1> 		cmp cl, 0
  4349 000033FA 7406                <1> 		je nameindexdone
  4350 000033FC 880B                <1> 		mov [ebx], cl
  4351 000033FE 46                  <1> 		inc esi
  4352 000033FF 43                  <1> 		inc ebx
  4353 00003400 EBF3                <1> 		jmp nameindex
  4354                              <1> 	nameindexdone:
  4355 00003402 43                  <1> 		inc ebx
  4356 00003403 66C7030000          <1> 		mov word [ebx], 0
  4357 00003408 81C302000000        <1> 		add ebx, 2
  4358 0000340E 46                  <1> 		inc esi
  4359 0000340F 8933                <1> 		mov [ebx], esi
  4360 00003411 81C304000000        <1> 		add ebx, 4
  4361 00003417 66C7030000          <1> 		mov word [ebx], 0
  4362 0000341C 81C302000000        <1> 		add ebx, 2
  4363 00003422 81FB[26120100]      <1> 		cmp ebx, fileindexend
  4364 00003428 7308                <1> 		jae indexloopdone
  4365 0000342A 81C601000000        <1> 		add esi, 1
  4366 00003430 EB88                <1> 		jmp indexloop
  4367 00003432 C605[3A340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4368 00003439 C3                  <1> 		ret
  4369 0000343A 00                  <1> indexdone db 0
  4370                              <1> %include 'source/programs/_comment.asm' ;#
  4371 0000343B FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4372 0000343F C3                  <2> 	ret 
  4373                              <1> %include 'source/programs/_math.asm' ;!
  4374 00003440 FF2C2100            <2> db 255,44,"!",0
  4375                              <2> 	num:	
  4376 00003444 E8C5FBFFFF          <2> 		call clearbuffer
  4377 00003449 C605[CA360000]00    <2> 		mov byte [decimal], 0
  4378 00003450 C605[CB360000]00    <2> 		mov byte [decimal2], 0
  4379 00003457 8B35[4F2F0000]      <2> 		mov esi, [currentcommandloc]
  4380 0000345D 31C0                <2> 		xor eax, eax
  4381 0000345F 31C9                <2> 		xor ecx, ecx
  4382 00003461 31DB                <2> 		xor ebx, ebx
  4383 00003463 8A06                <2> 	num2:	mov al, [esi]
  4384 00003465 3C2B                <2> 		cmp al, '+'
  4385 00003467 741B                <2> 		je operatorfound
  4386 00003469 3C2D                <2> 		cmp al, '-'
  4387 0000346B 7417                <2> 		je operatorfound
  4388 0000346D 3C2A                <2> 		cmp al, '*'
  4389 0000346F 7413                <2> 		je operatorfound
  4390 00003471 3C2F                <2> 		cmp al, '/'
  4391 00003473 740F                <2> 		je operatorfound
  4392 00003475 3C5E                <2> 		cmp al, '^'
  4393 00003477 740B                <2> 		je operatorfound
  4394 00003479 46                  <2> 		inc esi
  4395 0000347A 3C00                <2> 		cmp al, 0
  4396 0000347C 0F841AF8FFFF        <2> 		je near nwcmd
  4397 00003482 EBDF                <2> 		jmp num2
  4398 00003484 50                  <2> 	operatorfound: push eax
  4399 00003485 30E4                <2> 		xor ah, ah
  4400 00003487 8826                <2> 		mov [esi], ah
  4401 00003489 89F7                <2> 		mov edi, esi
  4402 0000348B 46                  <2> 		inc esi
  4403 0000348C 8A06                <2> 		mov al, [esi]
  4404 0000348E 3C25                <2> 		cmp al, '%'
  4405 00003490 0F8462000000        <2> 		je near resultnum1
  4406                              <2> 	varnum2: 
  4407 00003496 57                  <2> 		push edi
  4408 00003497 E8A4000000          <2> 		call checkdecimal
  4409 0000349C 5F                  <2> 		pop edi
  4410 0000349D E880FEFFFF          <2> 		call cnvrttxt
  4411                              <2> 	vrnm2:
  4412 000034A2 89CB                <2> 		mov ebx, ecx
  4413 000034A4 53                  <2> 		push ebx
  4414 000034A5 E864FBFFFF          <2> 		call clearbuffer
  4415 000034AA 8B35[4F2F0000]      <2> 		mov esi, [currentcommandloc]
  4416 000034B0 89F7                <2> 		mov edi, esi
  4417 000034B2 46                  <2> 		inc esi
  4418 000034B3 8A06                <2> 		mov al, [esi]
  4419 000034B5 3C25                <2> 		cmp al, '%'
  4420 000034B7 0F844F000000        <2> 		je near resultnum2
  4421                              <2> 	varnum4: 
  4422 000034BD 57                  <2> 		push edi
  4423 000034BE E869000000          <2> 		call checkdecimal2
  4424 000034C3 5F                  <2> 		pop edi
  4425 000034C4 E859FEFFFF          <2> 		call cnvrttxt
  4426                              <2> 	vrnm4:
  4427 000034C9 5B                  <2> 		pop ebx
  4428 000034CA 58                  <2> 		pop eax
  4429 000034CB 3C2B                <2> 		cmp al, '+'
  4430 000034CD 0F849B000000        <2> 		je near plusnum
  4431 000034D3 3C2D                <2> 		cmp al, '-'
  4432 000034D5 0F849F000000        <2> 		je near subnum
  4433 000034DB 3C2A                <2> 		cmp al, '*'
  4434 000034DD 0F84A3000000        <2> 		je near mulnum
  4435 000034E3 3C2F                <2> 		cmp al, '/'
  4436 000034E5 0F84B1000000        <2> 		je near divnum
  4437 000034EB 3C5E                <2> 		cmp al, '^'
  4438 000034ED 0F84CE000000        <2> 		je near expnum
  4439 000034F3 E9A4F7FFFF          <2> 		jmp nwcmd
  4440                              <2> 	resultnum1:
  4441 000034F8 8A0D[CC360000]      <2> 		mov cl, [decimalresult]
  4442 000034FE 880D[CA360000]      <2> 		mov [decimal], cl
  4443 00003504 8B0D[CD360000]      <2> 		mov ecx, [result]
  4444 0000350A EB96                <2> 		jmp vrnm2
  4445                              <2> 	resultnum2:
  4446 0000350C 8A0D[CA360000]      <2> 		mov cl, [decimal]
  4447 00003512 880D[CB360000]      <2> 		mov [decimal2], cl
  4448 00003518 8A0D[CC360000]      <2> 		mov cl, [decimalresult]
  4449 0000351E 880D[CA360000]      <2> 		mov [decimal], cl
  4450 00003524 8B0D[CD360000]      <2> 		mov ecx, [result]
  4451 0000352A EB9D                <2> 		jmp vrnm4
  4452                              <2> 	checkdecimal2:
  4453 0000352C 8A25[CA360000]      <2> 		mov ah, [decimal]
  4454 00003532 8825[CB360000]      <2> 		mov [decimal2], ah
  4455 00003538 30E4                <2> 		xor ah, ah
  4456 0000353A 8825[CA360000]      <2> 		mov [decimal], ah
  4457                              <2> 	checkdecimal:
  4458 00003540 89F7                <2> 		mov edi, esi
  4459                              <2> 	chkdec1:
  4460 00003542 8A07                <2> 		mov al, [edi]
  4461 00003544 3C2E                <2> 		cmp al, '.'
  4462 00003546 0F840B000000        <2> 		je near fnddec
  4463 0000354C 3C00                <2> 		cmp al, 0
  4464 0000354E 0F8419000000        <2> 		je near nodecimal
  4465 00003554 47                  <2> 		inc edi
  4466 00003555 EBEB                <2> 		jmp chkdec1
  4467                              <2> 	fnddec:
  4468 00003557 8A4701              <2> 		mov al, [edi + 1]
  4469 0000355A 8807                <2> 		mov [edi], al
  4470 0000355C 3C00                <2> 		cmp al, 0
  4471 0000355E 0F8409000000        <2> 		je near nodecimal
  4472 00003564 FE05[CA360000]      <2> 		inc byte [decimal]
  4473 0000356A 47                  <2> 		inc edi
  4474 0000356B EBEA                <2> 		jmp fnddec
  4475                              <2> 	nodecimal:
  4476 0000356D C3                  <2> 		ret
  4477                              <2> 	plusnum:
  4478 0000356E E815010000          <2> 		call decaddfix
  4479 00003573 01D9                <2> 		add ecx, ebx
  4480 00003575 E98A000000          <2> 		jmp retnum
  4481                              <2> 	subnum:
  4482 0000357A E809010000          <2> 		call decaddfix
  4483 0000357F 29D9                <2> 		sub ecx, ebx
  4484 00003581 E97E000000          <2> 		jmp retnum
  4485                              <2> 	mulnum:
  4486 00003586 A0[CB360000]        <2> 		mov al, [decimal2]
  4487 0000358B 0005[CA360000]      <2> 		add [decimal], al
  4488 00003591 89C8                <2> 		mov eax, ecx
  4489 00003593 F7E3                <2> 		mul ebx
  4490 00003595 89C1                <2> 		mov ecx, eax
  4491 00003597 E968000000          <2> 		jmp retnum
  4492                              <2> 	divnum:
  4493 0000359C E8E7000000          <2> 		call decaddfix
  4494 000035A1 30C0                <2> 		xor al, al
  4495 000035A3 A2[CA360000]        <2> 		mov [decimal], al
  4496 000035A8 31D2                <2> 		xor edx, edx
  4497 000035AA 89C8                <2> 		mov eax, ecx
  4498 000035AC 81FB00000000        <2> 		cmp ebx, 0
  4499 000035B2 0F844C000000        <2> 		je near retnum
  4500 000035B8 F7F3                <2> 		div ebx
  4501 000035BA 89C1                <2> 		mov ecx, eax
  4502 000035BC E943000000          <2> 		jmp retnum
  4503                              <2> 	expnum:
  4504 000035C1 8A15[CA360000]      <2> 		mov dl, [decimal]
  4505 000035C7 8815[CB360000]      <2> 		mov [decimal2], dl
  4506 000035CD 31D2                <2> 		xor edx, edx
  4507 000035CF 89C8                <2> 		mov eax, ecx
  4508 000035D1 89D9                <2> 		mov ecx, ebx
  4509 000035D3 89C3                <2> 		mov ebx, eax
  4510 000035D5 81F900000000        <2> 		cmp ecx, 0
  4511 000035DB 7422                <2> 		je noexpnum
  4512 000035DD 49                  <2> 		dec ecx
  4513 000035DE 81F900000000        <2> 		cmp ecx, 0
  4514 000035E4 7412                <2> 		je noexpnumlp
  4515 000035E6 F7E3                <2> 	expnumlp: mul ebx
  4516 000035E8 8A15[CB360000]      <2> 		mov dl, [decimal2]
  4517 000035EE 0015[CA360000]      <2> 		add [decimal], dl
  4518 000035F4 31D2                <2> 		xor edx, edx
  4519 000035F6 E2EE                <2> 		loop expnumlp
  4520                              <2> 	noexpnumlp:
  4521 000035F8 89C1                <2> 		mov ecx, eax
  4522 000035FA E905000000          <2> 		jmp retnum
  4523                              <2> 	noexpnum:
  4524 000035FF B901000000          <2> 		mov ecx, 1
  4525                              <2> 	retnum: 
  4526 00003604 BE[BA2C0100]        <2> 		mov esi, numbuf
  4527 00003609 890D[CD360000]      <2> 		mov [result], ecx
  4528 0000360F E80FFAFFFF          <2> 		call convert
  4529 00003614 BE[BA2C0100]        <2> 		mov esi, numbuf
  4530 00003619 8A25[CA360000]      <2> 		mov ah, [decimal]
  4531 0000361F 8825[CC360000]      <2> 		mov [decimalresult], ah
  4532 00003625 80FC00              <2> 		cmp ah, 0
  4533 00003628 0F8425000000        <2> 		je near noputdecimal
  4534                              <2> 	putdecimal:
  4535 0000362E 4E                  <2> 		dec esi
  4536 0000362F FECC                <2> 		dec ah
  4537 00003631 80FC00              <2> 		cmp ah, 0
  4538 00003634 0F87F4FFFFFF        <2> 		ja near putdecimal
  4539 0000363A 4E                  <2> 		dec esi
  4540 0000363B 8A06                <2> 		mov al, [esi]
  4541 0000363D C6062E              <2> 		mov byte [esi], '.'
  4542                              <2> 	decputloop:
  4543 00003640 4E                  <2> 		dec esi
  4544 00003641 8A26                <2> 		mov ah, [esi]
  4545 00003643 8806                <2> 		mov [esi], al
  4546 00003645 88E0                <2> 		mov al, ah
  4547 00003647 81FE[A62C0100]      <2> 		cmp esi, buf2
  4548 0000364D 0F87EDFFFFFF        <2> 		ja near decputloop
  4549                              <2> 	noputdecimal:
  4550 00003653 BE[A62C0100]        <2> 		mov esi, buf2
  4551 00003658 E809000000          <2> 		call chkadd
  4552 0000365D E93AF6FFFF          <2> 		jmp nwcmd
  4553 00003662 00000000            <2> edxnumbuf dw 0,0
  4554 00003666 8A06                <2> 	chkadd: mov al, [esi]
  4555 00003668 3C30                <2> 		cmp al, '0'
  4556 0000366A 750C                <2> 		jne dnadd
  4557 0000366C 46                  <2> 		inc esi
  4558 0000366D 81FE[BA2C0100]      <2> 		cmp esi, numbuf
  4559 00003673 7402                <2> 		je dnaddm1
  4560 00003675 EBEF                <2> 		jmp chkadd
  4561 00003677 4E                  <2> 	dnaddm1: dec esi
  4562 00003678 E8A9E6FFFF          <2> 	dnadd:	call print
  4563 0000367D BE[77890000]        <2> 		mov esi, line
  4564 00003682 E89FE6FFFF          <2> 		call print
  4565 00003687 C3                  <2> 		ret
  4566                              <2> 		
  4567                              <2> 	decaddfix:
  4568 00003688 A0[CB360000]        <2> 		mov al, [decimal2]
  4569 0000368D 8A25[CA360000]      <2> 		mov ah, [decimal]
  4570 00003693 38E0                <2> 		cmp al, ah
  4571 00003695 7432                <2> 		je gooddecadd
  4572 00003697 38E0                <2> 		cmp al, ah
  4573 00003699 721A                <2> 		jb lowdecadd
  4574                              <2> 	highdecadd:
  4575 0000369B FEC4                <2> 		inc ah
  4576 0000369D 89CA                <2> 		mov edx, ecx
  4577 0000369F C1E103              <2> 		shl ecx, 3
  4578 000036A2 01D1                <2> 		add ecx, edx
  4579 000036A4 01D1                <2> 		add ecx, edx
  4580 000036A6 38E0                <2> 		cmp al, ah
  4581 000036A8 77F1                <2> 		ja highdecadd
  4582 000036AA 8825[CA360000]      <2> 		mov [decimal], ah
  4583 000036B0 E914000000          <2> 		jmp gooddecadd
  4584                              <2> 	lowdecadd:
  4585 000036B5 FEC0                <2> 		inc al
  4586 000036B7 89DA                <2> 		mov edx, ebx
  4587 000036B9 C1E303              <2> 		shl ebx, 3
  4588 000036BC 01D3                <2> 		add ebx, edx
  4589 000036BE 01D3                <2> 		add ebx, edx
  4590 000036C0 38E0                <2> 		cmp al, ah
  4591 000036C2 72F1                <2> 		jb lowdecadd
  4592 000036C4 A2[CA360000]        <2> 		mov [decimal], al
  4593                              <2> 	gooddecadd:
  4594 000036C9 C3                  <2> 		ret
  4595                              <2> 		
  4596 000036CA 00                  <2> decimal db 0
  4597 000036CB 00                  <2> decimal2 db 0
  4598 000036CC 00                  <2> decimalresult db 0
  4599 000036CD 00000000            <2> result dd 0
  4600                              <1> %include 'source/programs/_variables.asm' ;% and $
  4601 000036D1 FF2C2500            <2> db 255,44,"%",0
  4602                              <2> 	ans:
  4603 000036D5 BE[A62C0100]        <2> 		mov esi, buf2
  4604 000036DA E887FFFFFF          <2> 		call chkadd
  4605 000036DF C3                  <2> 		ret
  4606                              <2> 		
  4607 000036E0 FF2C2400            <2> db 255,44,"$",0
  4608 000036E4 8B35[4F2F0000]      <2> var: mov esi, [currentcommandloc]
  4609 000036EA BB[A6140100]        <2> 	mov ebx, variables
  4610 000036EF 8A06                <2> lkeq:	mov al, [esi]
  4611 000036F1 3C3D                <2> 	cmp al, '='
  4612 000036F3 741B                <2> 	je eqfnd	;is there an '=' sign?
  4613 000036F5 3C00                <2> 	cmp al, 0
  4614 000036F7 7403                <2> 	je echovars
  4615 000036F9 46                  <2> 	inc esi
  4616 000036FA EBF3                <2> 	jmp lkeq
  4617 000036FC BE[A6140100]        <2> echovars: mov esi, variables
  4618 00003701 BB[A6240100]        <2> 	mov ebx, varend
  4619 00003706 B105                <2> 	mov cl, 5
  4620 00003708 B504                <2> 	mov ch, 4
  4621 0000370A E89EF8FFFF          <2> 	call array
  4622 0000370F C3                  <2> 	ret
  4623 00003710 46                  <2> eqfnd:	inc esi
  4624 00003711 8A06                <2> 	mov al, [esi]
  4625 00003713 3C00                <2> 	cmp al, 0
  4626 00003715 7410                <2> 	je readvar
  4627 00003717 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  4628 0000371D BB[A6140100]        <2> 	mov ebx, variables
  4629 00003722 E919000000          <2> 	jmp seek
  4630                              <2> readvar:
  4631 00003727 B00A                <2> 	mov al, 10
  4632 00003729 66BB0700            <2> 	mov bx, 7
  4633 0000372D C605[E9220000]00    <2> 	mov byte [commandedit], 0
  4634 00003734 BF[A62C0100]        <2> 	mov edi, buftxtend
  4635 00003739 E815E7FFFF          <2> 	call rdprint
  4636 0000373E EBA4                <2> 	jmp var
  4637 00003740 668B03              <2> seek:	mov ax, [ebx]
  4638 00003743 B105                <2> 	mov cl, 5
  4639 00003745 B504                <2> 	mov ch, 4
  4640 00003747 663D0000            <2> 	cmp ax, 0
  4641 0000374B 0F845B000000        <2> 	je near save
  4642 00003751 6639C8              <2> 	cmp ax, cx
  4643 00003754 7403                <2> 	je skfnd
  4644 00003756 43                  <2> 	inc ebx
  4645 00003757 EBE7                <2> 	jmp seek
  4646 00003759 8B35[4F2F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4647 0000375F 46                  <2> 	inc esi
  4648 00003760 81C302000000        <2> 	add ebx, 2
  4649 00003766 89DF                <2> 	mov edi, ebx
  4650 00003768 B13D                <2> 	mov cl, '='
  4651 0000376A E81FF8FFFF          <2> 	call cndtest
  4652 0000376F 3C01                <2> 	cmp al, 1	
  4653 00003771 7418                <2> 	je varfnd
  4654 00003773 89FB                <2> 	mov ebx, edi
  4655 00003775 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  4656 0000377B 668B03              <2> 	mov ax, [ebx]
  4657 0000377E 663D0000            <2> 	cmp ax, 0
  4658 00003782 0F8424000000        <2> 	je near save
  4659 00003788 43                  <2> 	inc ebx
  4660 00003789 EBB5                <2> 	jmp seek
  4661 0000378B 8A03                <2> varfnd:	mov al, [ebx]
  4662 0000378D 3C04                <2> 	cmp al, 4
  4663 0000378F 7404                <2> 	je save2
  4664 00003791 4B                  <2> 	dec ebx
  4665 00003792 4E                  <2> 	dec esi
  4666 00003793 EBF6                <2> 	jmp varfnd
  4667 00003795 4B                  <2> save2:	dec ebx
  4668 00003796 4E                  <2> 	dec esi
  4669 00003797 8A03                <2> 	mov al, [ebx]
  4670 00003799 3C05                <2> 	cmp al, 5
  4671 0000379B 7402                <2> 	je remove
  4672 0000379D EBEC                <2> 	jmp varfnd
  4673 0000379F 8A03                <2> remove: mov al, [ebx]
  4674 000037A1 3C00                <2> 	cmp al, 0
  4675 000037A3 749B                <2> 	je seek
  4676 000037A5 30C0                <2> 	xor al, al
  4677 000037A7 8803                <2> 	mov [ebx], al
  4678 000037A9 43                  <2> 	inc ebx
  4679 000037AA EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4680 000037AC 8B35[4F2F0000]      <2> save:	mov esi, [currentcommandloc]
  4681 000037B2 43                  <2> 	inc ebx
  4682 000037B3 B005                <2> 	mov al, 5
  4683 000037B5 B404                <2> 	mov ah, 4
  4684 000037B7 668903              <2> 	mov [ebx], ax
  4685 000037BA 43                  <2> 	inc ebx
  4686 000037BB 43                  <2> svhere:	inc ebx
  4687 000037BC 46                  <2> 	inc esi
  4688 000037BD 8A06                <2> 	mov al, [esi]
  4689 000037BF 3C00                <2> 	cmp al, 0
  4690 000037C1 0F844A000000        <2> 	je near svdone
  4691 000037C7 3C25                <2> 	cmp al, '%'
  4692 000037C9 7404                <2> 	je ans2
  4693 000037CB 8803                <2> 	mov [ebx], al	
  4694 000037CD EBEC                <2> 	jmp svhere
  4695 000037CF 56                  <2> ans2:	push esi
  4696 000037D0 BE[A62C0100]        <2> 	mov esi, buf2
  4697 000037D5 E823000000          <2> 	call ansfnd
  4698 000037DA E803000000          <2> 	call anscp
  4699 000037DF 5E                  <2> 	pop esi
  4700 000037E0 EBD9                <2> 	jmp svhere
  4701 000037E2 8A06                <2> anscp:	mov al, [esi]
  4702 000037E4 8803                <2> 	mov [ebx], al
  4703 000037E6 81FE[BA2C0100]      <2> 	cmp esi, numbuf
  4704 000037EC 74CD                <2> 	je svhere
  4705 000037EE 3C00                <2> 	cmp al, 0
  4706 000037F0 74C9                <2> 	je svhere
  4707 000037F2 43                  <2> 	inc ebx
  4708 000037F3 46                  <2> 	inc esi
  4709 000037F4 EBEC                <2> 	jmp anscp
  4710 000037F6 5E                  <2> ansnf:	pop esi
  4711 000037F7 8A06                <2> 	mov al, [esi]
  4712 000037F9 8803                <2> 	mov [ebx], al
  4713 000037FB EBBE                <2> 	jmp svhere
  4714 000037FD 46                  <2> ansfnd:	inc esi
  4715 000037FE 81FE[B92C0100]      <2> 	cmp esi, numbuf - 1
  4716 00003804 740A                <2> 	je fndans
  4717 00003806 8A06                <2> 	mov al, [esi]
  4718 00003808 3C00                <2> 	cmp al, 0
  4719 0000380A 74EA                <2> 	je ansnf
  4720 0000380C 3C30                <2> 	cmp al, '0'
  4721 0000380E 74ED                <2> 	je ansfnd
  4722                              <2> fndans:
  4723 00003810 C3                  <2> 	ret
  4724 00003811 30C0                <2> svdone:	xor al, al
  4725 00003813 8803                <2> 	mov [ebx], al
  4726 00003815 C3                  <2> 	ret
  4727                              <1> %include 'source/programs/_run.asm' ;./
  4728                              <2> 
  4729 00003816 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4730 0000381A FF2C2E2F00          <2> 	db 255,44,"./",0
  4731                              <2> rundiskprog:
  4732 0000381F 8B3D[4F2F0000]      <2> 	mov edi, [currentcommandloc]
  4733 00003825 81C702000000        <2> 	add edi, 2
  4734 0000382B BE00004000          <2> 	mov esi, 0x400000
  4735 00003830 E84B2D0000          <2> 	call loadfile
  4736 00003835 81FA94010000        <2> 	cmp edx, 404
  4737 0000383B 746A                <2> 	je noprogfound
  4738 0000383D BB00004000          <2> 	mov ebx, 0x400000
  4739 00003842 A1[16380000]        <2> 	mov eax, [elfstart]
  4740 00003847 3903                <2> 	cmp [ebx], eax
  4741 00003849 0F8437000000        <2> 	je near runelf
  4742 0000384F 66813B4558          <2> 	cmp word [ebx], "EX"
  4743 00003854 7577                <2> 	jne progbatchfound
  4744 00003856 81C302000000        <2> 	add ebx, 2
  4745 0000385C 8B3D[4F2F0000]      <2> 	mov edi, [currentcommandloc]
  4746 00003862 81C702000000        <2> 	add edi, 2
  4747                              <2> findspaceprog:
  4748 00003868 8A07                <2> 	mov al, [edi]
  4749 0000386A 47                  <2> 	inc edi
  4750 0000386B 3C20                <2> 	cmp al, " "
  4751 0000386D 75F9                <2> 	jne findspaceprog
  4752                              <2> findnonspaceprog:
  4753 0000386F 8A07                <2> 	mov al, [edi]
  4754 00003871 47                  <2> 	inc edi
  4755 00003872 3C20                <2> 	cmp al, " "
  4756 00003874 74F9                <2> 	je findnonspaceprog
  4757 00003876 4F                  <2> 	dec edi
  4758 00003877 8925[26120100]      <2> 	mov [previousstack], esp
  4759 0000387D FFD3                <2> 	call ebx
  4760 0000387F 8B25[26120100]      <2> 	mov esp, [previousstack]
  4761 00003885 C3                  <2> 	ret
  4762                              <2> runelf:
  4763 00003886 8B3D[4F2F0000]      <2> 	mov edi, [currentcommandloc]
  4764 0000388C 81C702000000        <2> 	add edi, 2
  4765 00003892 81C380000000        <2> 	add ebx, 0x80
  4766 00003898 8925[26120100]      <2> 	mov [previousstack], esp
  4767 0000389E FFD3                <2> 	call ebx
  4768 000038A0 8B25[26120100]      <2> 	mov esp, [previousstack]
  4769 000038A6 C3                  <2> 	ret
  4770                              <2> noprogfound:
  4771 000038A7 BE[3E890000]        <2> 	mov esi, notfound1
  4772 000038AC E875E4FFFF          <2> 	call print
  4773 000038B1 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  4774 000038B7 81C602000000        <2> 	add esi, 2
  4775 000038BD E864E4FFFF          <2> 	call print
  4776 000038C2 BE[46890000]        <2> 	mov esi, notfound2
  4777 000038C7 E85AE4FFFF          <2> 	call print
  4778 000038CC C3                  <2> 	ret
  4779                              <2> progbatchfound:
  4780 000038CD BF00004000          <2> 		mov edi, 0x400000
  4781 000038D2 C605[A0140100]01    <2> 		mov byte [BATCHISON], 1
  4782                              <2> 	batchrunloop:
  4783 000038D9 E89BF3FFFF          <2> 		call buftxtclear
  4784 000038DE BE[A6280100]        <2> 		mov esi, buftxt
  4785 000038E3 8935[4F2F0000]      <2> 		mov [currentcommandloc], esi
  4786                              <2> 	batchrunloop2:
  4787 000038E9 B10A                <2> 		mov cl, 10
  4788 000038EB B50D                <2> 		mov ch, 13
  4789 000038ED 380F                <2> 		cmp [edi], cl
  4790 000038EF 0F8419000000        <2> 		je near nxtbatchrunline
  4791 000038F5 382F                <2> 		cmp [edi], ch
  4792 000038F7 0F8411000000        <2> 		je near nxtbatchrunline
  4793 000038FD 803F00              <2> 		cmp byte [edi], 0
  4794 00003900 0F8408000000        <2> 		je near nxtbatchrunline
  4795 00003906 8A07                <2> 		mov al, [edi]
  4796 00003908 8806                <2> 		mov [esi], al
  4797 0000390A 46                  <2> 		inc esi
  4798 0000390B 47                  <2> 		inc edi
  4799 0000390C EBDB                <2> 		jmp batchrunloop2
  4800                              <2> 	nxtbatchrunline:
  4801 0000390E 47                  <2> 		inc edi
  4802 0000390F 380F                <2> 		cmp [edi], cl
  4803 00003911 74FB                <2> 		je nxtbatchrunline
  4804 00003913 382F                <2> 		cmp [edi], ch
  4805 00003915 74F7                <2> 		je nxtbatchrunline
  4806 00003917 893D[75390000]      <2> 		mov [batchedi], edi
  4807 0000391D 893D[9C140100]      <2> 		mov [BATCHPOS], edi
  4808 00003923 C60600              <2> 		mov byte [esi], 0
  4809 00003926 BE[A6280100]        <2> 		mov esi, buftxt
  4810 0000392B 803E00              <2> 		cmp byte [esi], 0
  4811 0000392E 0F8439000000        <2> 		je near nobatchfoundrun
  4812 00003934 31DB                <2> 		xor ebx, ebx
  4813 00003936 8A1D[37140100]      <2> 		mov bl, [IFON]
  4814 0000393C 80FB00              <2> 		cmp bl, 0
  4815 0000393F 0F8534000000        <2> 		jne near iftestbatch
  4816                              <2> 	doneiftest:
  4817 00003945 803D[4B3A0000]00    <2> 		cmp byte [runnextline], 0
  4818 0000394C 0F8405000000        <2> 		je near noruniftest
  4819 00003952 E822F5FFFF          <2> 		call run
  4820                              <2> 	noruniftest:
  4821 00003957 C605[4B3A0000]01    <2> 		mov byte [runnextline], 1
  4822 0000395E 8B3D[75390000]      <2> 		mov edi, [batchedi]
  4823 00003964 803F00              <2> 		cmp byte [edi], 0
  4824 00003967 0F856CFFFFFF        <2> 		jne near batchrunloop
  4825                              <2> 	nobatchfoundrun:
  4826 0000396D C605[A0140100]00    <2> 		mov byte [BATCHISON], 0
  4827 00003974 C3                  <2> 		ret
  4828                              <2> 	
  4829 00003975 00000000            <2> batchedi dd 0	
  4830                              <2> 	
  4831                              <2> 	iftestbatch:
  4832 00003979 BE[38140100]        <2> 		mov esi, IFTRUE
  4833 0000397E 01DE                <2> 		add esi, ebx
  4834 00003980 803E00              <2> 		cmp byte [esi], 0
  4835 00003983 0F85BCFFFFFF        <2> 		jne near doneiftest
  4836 00003989 881D[4C3A0000]      <2> 		mov [iffalsebuf], bl
  4837 0000398F 803D[A1140100]01    <2> 		cmp byte [LOOPON], 1
  4838 00003996 0F8513000000        <2> 		jne near fifindbatch
  4839 0000399C E938FFFFFF          <2> 		jmp batchrunloop
  4840                              <2> 	elsetestbatch:
  4841 000039A1 C60601              <2> 		mov byte [esi], 1
  4842 000039A4 81C705000000        <2> 		add edi, 5
  4843 000039AA E92AFFFFFF          <2> 		jmp batchrunloop
  4844                              <2> 	fifindbatch:
  4845 000039AF 66B96966            <2> 		mov cx, "if"
  4846 000039B3 66B86669            <2> 		mov ax, "fi"
  4847 000039B7 663907              <2> 		cmp [edi], ax
  4848 000039BA 0F8424000000        <2> 		je near fifoundbatch
  4849 000039C0 66390F              <2> 		cmp [edi], cx
  4850 000039C3 0F8465000000        <2> 		je near iffoundbatch
  4851 000039C9 803F00              <2> 		cmp byte [edi], 0
  4852 000039CC 0F8412000000        <2> 		je near fifoundbatch
  4853 000039D2 B8656C7365          <2> 		mov eax, "else"
  4854 000039D7 3907                <2> 		cmp [edi], eax
  4855 000039D9 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4856 000039DF E973FFFFFF          <2> 		jmp noruniftest
  4857                              <2> 	fifoundbatch:
  4858 000039E4 81C702000000        <2> 		add edi, 2
  4859 000039EA B00A                <2> 		mov al, 10
  4860 000039EC 3807                <2> 		cmp [edi], al
  4861 000039EE 0F840B000000        <2> 		je near goodfibatch
  4862 000039F4 803F00              <2> 		cmp byte [edi], 0
  4863 000039F7 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4864 000039FD EBB0                <2> 		jmp fifindbatch
  4865                              <2> 	goodfibatch:
  4866 000039FF B001                <2> 		mov al, 1
  4867 00003A01 2805[37140100]      <2> 		sub [IFON], al 
  4868 00003A07 A0[37140100]        <2> 		mov al, [IFON]
  4869 00003A0C 8A1D[4C3A0000]      <2> 		mov bl, [iffalsebuf]
  4870 00003A12 38D8                <2> 		cmp al, bl
  4871 00003A14 7799                <2> 		ja fifindbatch
  4872 00003A16 8B35[4F2F0000]      <2> 		mov esi, [currentcommandloc]
  4873 00003A1C 81EF02000000        <2> 		sub edi, 2
  4874 00003A22 C605[4B3A0000]00    <2> 		mov byte [runnextline], 0
  4875 00003A29 E9ABFEFFFF          <2> 		jmp batchrunloop
  4876                              <2> 	iffoundbatch:
  4877 00003A2E B020                <2> 		mov al, ' '
  4878 00003A30 81C702000000        <2> 		add edi, 2
  4879 00003A36 3807                <2> 		cmp [edi], al
  4880 00003A38 0F8571FFFFFF        <2> 		jne near fifindbatch
  4881 00003A3E B001                <2> 		mov al, 1
  4882 00003A40 0005[37140100]      <2> 		add [IFON], al
  4883 00003A46 E964FFFFFF          <2> 		jmp fifindbatch
  4884                              <2> 		
  4885                              <2> 		
  4886 00003A4B 01                  <2> runnextline db 1
  4887 00003A4C 00                  <2> iffalsebuf db 0
  4888 00003A4D C3                  <2> notbatch: ret 
  4889                              <1> %ifdef network.included
  4890                              <1> 	%include 'source/programs/arp.asm'
  4891 00003A4E FF2C61727000        <2> db 255,44,"arp",0
  4892                              <2> 	;ARP TESTING
  4893                              <2> arptest:
  4894 00003A54 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  4895 00003A5A 81C604000000        <2> 	add esi, 4
  4896 00003A60 E8DE4D0000          <2> 	call strtoip
  4897 00003A65 890D[0C3B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4898 00003A6B E8194E0000          <2> 	call showip
  4899 00003A70 803D[103B0000]01    <2> 	cmp byte [arpconfig], 1
  4900 00003A77 7405                <2> 	je arptest2
  4901 00003A79 E841000000          <2> 	call arpinit
  4902                              <2> arptest2:	;try to reach 192.168.0.1
  4903 00003A7E 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  4904 00003A84 668B1D[34890000]    <2> 	mov bx, [sysmac + 4]
  4905 00003A8B 890D[EC3A0000]      <2> 	mov [sourcemac], ecx
  4906 00003A91 66891D[F03A0000]    <2> 	mov [sourcemac + 4],bx
  4907 00003A98 890D[FC3A0000]      <2> 	mov [arpsenderinfo], ecx
  4908 00003A9E 66891D[003B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4909 00003AA5 BF[E63A0000]        <2> 	mov edi, frame
  4910 00003AAA BE[103B0000]        <2> 	mov esi, framend
  4911 00003AAF E85D4D0000          <2> 	call sendpacket
  4912 00003AB4 BE[77890000]        <2> 	mov esi, line
  4913 00003AB9 E868E2FFFF          <2> 	call print
  4914 00003ABE C3                  <2> 	ret
  4915                              <2> 	
  4916                              <2> arpinit:
  4917 00003ABF BE[113B0000]        <2> 	mov esi, arptable
  4918 00003AC4 BF[30890000]        <2> 	mov edi, sysmac
  4919 00003AC9 BB[2C890000]        <2> 	mov ebx, sysip
  4920 00003ACE 8B0F                <2> 	mov ecx, [edi]
  4921 00003AD0 890E                <2> 	mov [esi], ecx
  4922 00003AD2 668B4F04            <2> 	mov cx, [edi + 4]
  4923 00003AD6 894E04              <2> 	mov [esi + 4], ecx
  4924 00003AD9 8B0B                <2> 	mov ecx, [ebx]
  4925 00003ADB 894E06              <2> 	mov [esi + 6], ecx
  4926 00003ADE C605[103B0000]01    <2> 	mov byte [arpconfig], 1
  4927 00003AE5 C3                  <2> 	ret
  4928                              <2> 	
  4929                              <2> ;example frame
  4930                              <2> frame:
  4931 00003AE6 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4932 00003AEC 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4933 00003AF2 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4934                              <2> 	;;example packet
  4935 00003AF4 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4936 00003AF6 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4937 00003AF8 0604                <2> 					db 6,4			;length of mac, length of ip
  4938 00003AFA 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4939 00003AFC 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4940 00003B02 C0A80073            <2> 					db 192,168,0,115		;ip
  4941 00003B06 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4942 00003B0C C0A80000            <2> 					db 192,168,0,0			;ip
  4943                              <2> framend:
  4944                              <2> 
  4945 00003B10 00                  <2> arpconfig db 0
  4946                              <2> arptable:	;;mac,ip
  4947 00003B11 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4948 00003B1A 00<rept>            <2>
  4949                              <2> arptableend:	
  4950                              <1> %endif
  4951                              <1> %include 'source/programs/batch.asm'
  4952 00003B75 FF2C626174636800    <2> db 255,44,"batch",0
  4953                              <2> 	batchst: 
  4954 00003B7D 8B3D[4F2F0000]      <2> 		mov edi, [currentcommandloc]
  4955 00003B83 81C706000000        <2> 		add edi, 6
  4956 00003B89 803F00              <2> 		cmp byte [edi], 0
  4957 00003B8C 0F846D000000        <2> 		je near nonamefound
  4958 00003B92 BE00004000          <2> 		mov esi, 0x400000
  4959 00003B97 E8E4290000          <2> 		call loadfile
  4960 00003B9C 89D0                <2> 		mov eax, edx
  4961 00003B9E 3D94010000          <2> 		cmp eax, 404
  4962 00003BA3 7465                <2> 		je goodbatchname
  4963 00003BA5 BE[B03B0000]        <2> 		mov esi, badbatchname
  4964 00003BAA E877E1FFFF          <2> 		call print
  4965 00003BAF C3                  <2> 		ret
  4966 00003BB0 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4967 00003BB9 20616C726561647920- <2>
  4968 00003BC2 657869737473210A00  <2>
  4969 00003BCB 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4970 00003BD4 746F20747970652061- <2>
  4971 00003BDD 206E616D6520616674- <2>
  4972 00003BE6 65722074686520636F- <2>
  4973 00003BEF 6D6D616E642E0A00    <2>
  4974 00003BF7 00000000            <2> 		esicache3 dd 0
  4975 00003BFB 00000000            <2> 		esicache2 dd 0
  4976                              <2> 	nonamefound:
  4977 00003BFF BE[CB3B0000]        <2> 		mov esi, namenotfoundbatch
  4978 00003C04 E81DE1FFFF          <2> 		call print
  4979 00003C09 C3                  <2> 		ret
  4980                              <2> 	goodbatchname:
  4981 00003C0A BE00004000          <2> 		mov esi, 0x400000
  4982                              <2> 	batchcreate:
  4983 00003C0F 8935[F73B0000]      <2> 		mov [esicache3], esi
  4984 00003C15 BF00008000          <2> 		mov edi, 0x800000
  4985 00003C1A B00A                <2> 		mov al, 10
  4986 00003C1C B307                <2> 		mov bl, 7
  4987 00003C1E B404                <2> 		mov ah, 4
  4988 00003C20 CD30                <2> 		int 30h
  4989 00003C22 8935[FB3B0000]      <2> 		mov [esicache2], esi
  4990 00003C28 8A0E                <2> 		mov cl, [esi]
  4991 00003C2A 8B35[F73B0000]      <2> 		mov esi, [esicache3]
  4992 00003C30 BB[643C0000]        <2> 		mov ebx, exitword
  4993 00003C35 E854F3FFFF          <2> 		call cndtest
  4994 00003C3A 3C01                <2> 		cmp al, 1
  4995 00003C3C 7411                <2> 		je endbatchcreate
  4996 00003C3E 3C02                <2> 		cmp al, 2
  4997 00003C40 740D                <2> 		je endbatchcreate
  4998 00003C42 8B35[FB3B0000]      <2> 		mov esi, [esicache2]
  4999 00003C48 B00A                <2> 		mov al, 10
  5000 00003C4A 8806                <2> 		mov [esi], al
  5001 00003C4C 46                  <2> 		inc esi
  5002 00003C4D EBC0                <2> 		jmp batchcreate
  5003                              <2> 	endbatchcreate:
  5004 00003C4F 8B35[F73B0000]      <2> 		mov esi, [esicache3]
  5005 00003C55 31C0                <2> 		xor eax, eax
  5006 00003C57 8806                <2> 		mov [esi], al
  5007 00003C59 BE00004000          <2> 		mov esi, 0x400000
  5008 00003C5E E8C3E0FFFF          <2> 		call print
  5009 00003C63 C3                  <2> 		ret
  5010                              <2> 	
  5011 00003C64 5C7800              <2> 	exitword db "\x",0
  5012 00003C67 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5013 00003C70 6F20657869742E0A00  <2>
  5014                              <1> %ifdef gui.background
  5015                              <1> 	%include 'source/programs/background.asm'
  5016                              <1> %endif
  5017                              <1> %include 'source/programs/beep.asm'
  5018 00003C79 FF2C6265657000      <2> 	db 255,44,"beep",0
  5019                              <2> beep:
  5020 00003C80 B8[A53C0000]        <2> 	mov eax, beepstart
  5021 00003C85 A3[6B020000]        <2> 	mov [soundpos], eax
  5022 00003C8A B8[A93C0000]        <2> 	mov eax, beepend
  5023 00003C8F A3[6F020000]        <2> 	mov [soundendpos], eax
  5024 00003C94 C605[68020000]01    <2> 	mov byte [soundon], 1
  5025                              <2> waitforsoundendbeep:
  5026 00003C9B A0[68020000]        <2> 	mov al, [soundon]
  5027 00003CA0 3C00                <2> 	cmp al, 0
  5028 00003CA2 75F7                <2> 	jne waitforsoundendbeep
  5029 00003CA4 C3                  <2> 	ret
  5030                              <2> 	
  5031                              <2> beepstart:
  5032 00003CA5 3200D111            <2> 	dw 50, 4561
  5033                              <2> beepend:
  5034                              <1> %include 'source/programs/cd.asm'
  5035 00003CA9 FF2C636400          <2> db 255,44,"cd",0
  5036                              <2> cd:
  5037 00003CAE 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  5038 00003CB4 81C603000000        <2> 	add esi, 3
  5039 00003CBA 8B3D[2E120100]      <2> 	mov edi, [currentfolderloc]
  5040 00003CC0 893D[2A120100]      <2> 	mov [lastfolderloc], edi
  5041 00003CC6 81C7[32120100]      <2> 	add edi, currentfolder
  5042 00003CCC 4F                  <2> 	dec edi
  5043 00003CCD 66813E2E2E          <2> 	cmp word [esi], ".."
  5044 00003CD2 742A                <2> 	je .moveup
  5045 00003CD4 47                  <2> 	inc edi
  5046                              <2> .movedown:
  5047 00003CD5 8A06                <2> 	mov al, [esi]
  5048 00003CD7 8807                <2> 	mov [edi], al
  5049 00003CD9 47                  <2> 	inc edi
  5050 00003CDA 46                  <2> 	inc esi
  5051 00003CDB 3C00                <2> 	cmp al, 0
  5052 00003CDD 740A                <2> 	je .donecd
  5053 00003CDF 81FF[32140100]      <2> 	cmp edi, currentfolderend
  5054 00003CE5 72EE                <2> 	jb .movedown
  5055 00003CE7 30C0                <2> 	xor al, al
  5056                              <2> .donecd:
  5057 00003CE9 4F                  <2> 	dec edi
  5058 00003CEA C6072F              <2> 	mov byte [edi], '/'
  5059 00003CED 47                  <2> 	inc edi
  5060 00003CEE C60700              <2> 	mov byte [edi], 0
  5061 00003CF1 81EF[32120100]      <2> 	sub edi, currentfolder
  5062 00003CF7 893D[2E120100]      <2> 	mov [currentfolderloc], edi
  5063 00003CFD C3                  <2> 	ret
  5064                              <2> .moveup:
  5065 00003CFE 31C0                <2> 	xor eax, eax
  5066 00003D00 A3[2A120100]        <2> 	mov [lastfolderloc], eax
  5067                              <2> .moveuploop:
  5068 00003D05 4F                  <2> 	dec edi
  5069 00003D06 8A07                <2> 	mov al, [edi]
  5070 00003D08 81FF[32120100]      <2> 	cmp edi, currentfolder
  5071 00003D0E 763B                <2> 	jbe .moveupover
  5072 00003D10 3C2F                <2> 	cmp al, '/'
  5073 00003D12 75F1                <2> 	jne .moveuploop
  5074 00003D14 C6072F              <2> 	mov byte [edi], '/'
  5075 00003D17 47                  <2> 	inc edi
  5076 00003D18 C60700              <2> 	mov byte [edi], 0
  5077 00003D1B 81EF[32120100]      <2> 	sub edi, currentfolder
  5078 00003D21 893D[2E120100]      <2> 	mov [currentfolderloc], edi
  5079 00003D27 81C7[32120100]      <2> 	add edi, currentfolder
  5080 00003D2D 4F                  <2> 	dec edi
  5081                              <2> .lastfolder:
  5082 00003D2E 4F                  <2> 	dec edi
  5083 00003D2F 8A07                <2> 	mov al, [edi]
  5084 00003D31 81FF[32120100]      <2> 	cmp edi, currentfolder
  5085 00003D37 7604                <2> 	jbe .donemoveup
  5086 00003D39 3C2F                <2> 	cmp al, '/'
  5087 00003D3B 75F1                <2> 	jne .lastfolder
  5088                              <2> .donemoveup:
  5089 00003D3D 47                  <2> 	inc edi
  5090 00003D3E 81EF[32120100]      <2> 	sub edi, currentfolder
  5091 00003D44 893D[2A120100]      <2> 	mov [lastfolderloc], edi
  5092 00003D4A C3                  <2> 	ret
  5093                              <2> .moveupover:
  5094 00003D4B BF[32120100]        <2> 	mov edi, currentfolder
  5095 00003D50 C6072F              <2> 	mov byte [edi], '/'
  5096 00003D53 47                  <2> 	inc edi
  5097 00003D54 C60700              <2> 	mov byte [edi], 0
  5098 00003D57 31C0                <2> 	xor eax, eax
  5099 00003D59 A3[2A120100]        <2> 	mov [lastfolderloc], eax
  5100 00003D5E 40                  <2> 	inc eax
  5101 00003D5F A3[2E120100]        <2> 	mov [currentfolderloc], eax
  5102 00003D64 C3                  <2> 	ret
  5103                              <1> %include 'source/programs/charmap.asm'
  5104 00003D65 00                  <2> charmapnum db 0
  5105 00003D66 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5106 00003D6F 00                  <2>
  5107 00003D70 66BB0700            <2> 	mov bx, 7
  5108 00003D74 66B82000            <2> 	mov ax, " "
  5109 00003D78 C605[653D0000]00    <2> 	mov byte [charmapnum], 0
  5110 00003D7F E80BE6FFFF          <2> 	call prcharq
  5111 00003D84 E806E6FFFF          <2> 	call prcharq
  5112 00003D89 E801E6FFFF          <2> 	call prcharq
  5113 00003D8E E8FCE5FFFF          <2> 	call prcharq
  5114 00003D93 66B83000            <2> 	mov ax, "0"
  5115                              <2> charmapnumprnt:
  5116 00003D97 E8F3E5FFFF          <2> 	call prcharq
  5117 00003D9C 6640                <2> 	inc ax
  5118 00003D9E 6650                <2> 	push ax
  5119 00003DA0 66B82000            <2> 	mov ax, " "
  5120 00003DA4 E8E6E5FFFF          <2> 	call prcharq
  5121 00003DA9 6658                <2> 	pop ax
  5122 00003DAB 663D3900            <2> 	cmp ax, "9"
  5123 00003DAF 76E6                <2> 	jbe charmapnumprnt
  5124 00003DB1 66B84100            <2> 	mov ax, "A"
  5125                              <2> charmapnumprnt2:
  5126 00003DB5 E8D5E5FFFF          <2> 	call prcharq
  5127 00003DBA 6640                <2> 	inc ax
  5128 00003DBC 6650                <2> 	push ax
  5129 00003DBE 66B82000            <2> 	mov ax, " "
  5130 00003DC2 E8C8E5FFFF          <2> 	call prcharq
  5131 00003DC7 6658                <2> 	pop ax
  5132 00003DC9 663D4700            <2> 	cmp ax, "G"
  5133 00003DCD 72E6                <2> 	jb charmapnumprnt2
  5134                              <2> 	
  5135 00003DCF BE[77890000]        <2> 	mov esi, line
  5136 00003DD4 E82EDFFFFF          <2> 	call printquiet
  5137 00003DD9 6631C0              <2> 	xor ax, ax
  5138 00003DDC 6689C1              <2> 	mov cx, ax
  5139 00003DDF E87EF3FFFF          <2> 	call showhexsmall
  5140 00003DE4 E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5141                              <2> charmapcopy:
  5142 00003DE9 6640                <2> 	inc ax
  5143 00003DEB 6650                <2> 	push ax
  5144 00003DED 663D0800            <2> 	cmp ax, 8
  5145 00003DF1 7466                <2> 	je charmapnocopy
  5146 00003DF3 663D0900            <2> 	cmp ax, 9
  5147 00003DF7 7460                <2> 	je charmapnocopy
  5148 00003DF9 663D0A00            <2> 	cmp ax, 10
  5149 00003DFD 745A                <2> 	je charmapnocopy
  5150 00003DFF 663D0D00            <2> 	cmp ax, 13
  5151 00003E03 7454                <2> 	je charmapnocopy
  5152 00003E05 663DFF00            <2> 	cmp ax, 255
  5153 00003E09 744E                <2> 	je charmapnocopy
  5154 00003E0B 663D0001            <2> 	cmp ax, 256
  5155 00003E0F 7443                <2> 	je nomorecharmap
  5156 00003E11 E879E5FFFF          <2> 	call prcharq
  5157 00003E16 66B82000            <2> 	mov ax, " "
  5158 00003E1A E870E5FFFF          <2> 	call prcharq
  5159 00003E1F 6658                <2> 	pop ax
  5160                              <2> charmapcopycheck:
  5161 00003E21 FE05[653D0000]      <2> 	inc byte [charmapnum]
  5162 00003E27 803D[653D0000]10    <2> 	cmp byte [charmapnum], 16
  5163 00003E2E 72B9                <2> 	jb charmapcopy
  5164 00003E30 6650                <2> 	push ax
  5165 00003E32 BE[77890000]        <2> 	mov esi, line
  5166 00003E37 E8CBDEFFFF          <2> 	call printquiet
  5167 00003E3C 6658                <2> 	pop ax
  5168 00003E3E 3CFF                <2> 	cmp al, 255
  5169 00003E40 7412                <2> 	je nomorecharmap
  5170 00003E42 88C1                <2> 	mov cl, al
  5171 00003E44 FEC1                <2> 	inc cl
  5172 00003E46 E817F3FFFF          <2> 	call showhexsmall
  5173 00003E4B C605[653D0000]00    <2> 	mov byte [charmapnum], 0
  5174 00003E52 EB95                <2> 	jmp charmapcopy
  5175                              <2> nomorecharmap:
  5176 00003E54 E943EEFFFF          <2> 	jmp nwcmd
  5177                              <2> charmapnocopy:
  5178 00003E59 6650                <2> 	push ax
  5179 00003E5B 66B82000            <2> 	mov ax, " "
  5180 00003E5F E82BE5FFFF          <2> 	call prcharq
  5181 00003E64 E826E5FFFF          <2> 	call prcharq
  5182 00003E69 6658                <2> 	pop ax
  5183 00003E6B EBB4                <2> 	jmp charmapcopycheck
  5184                              <1> %ifdef gui.included
  5185                              <1> 	%include 'source/programs/circle.asm'
  5186 00003E6D FF2C636972636C6500  <2> db 255,44,"circle",0
  5187                              <2> circle:
  5188 00003E76 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  5189 00003E7C 81C607000000        <2> 	add esi, 7
  5190 00003E82 66B91000            <2> 	mov cx, 16
  5191 00003E86 30C0                <2> 	xor al, al
  5192 00003E88 3806                <2> 	cmp [esi], al
  5193 00003E8A 7405                <2> 	je .nocmdline
  5194 00003E8C E891F4FFFF          <2> 	call cnvrttxt
  5195                              <2> .nocmdline:
  5196 00003E91 E8C5080000          <2> 	call linetester.stime
  5197 00003E96 E857000000          <2> 	call fcircle.nocmdline
  5198 00003E9B E8D3080000          <2> 	call linetester.etime
  5199 00003EA0 53                  <2> 	push ebx
  5200 00003EA1 57                  <2> 	push edi
  5201 00003EA2 E859E4FFFF          <2> 	call getchar
  5202 00003EA7 59                  <2> 	pop ecx
  5203 00003EA8 E893F3FFFF          <2> 	call showdec
  5204 00003EAD BE[01480000]        <2> 	mov esi, linetester.msgcircle
  5205 00003EB2 E850DEFFFF          <2> 	call printquiet
  5206 00003EB7 59                  <2> 	pop ecx
  5207 00003EB8 E883F3FFFF          <2> 	call showdec
  5208 00003EBD BE[18480000]        <2> 	mov esi, linetester.msgtime
  5209 00003EC2 E840DEFFFF          <2> 	call printquiet
  5210 00003EC7 E83D2F0000          <2> 	call reloadallgraphics
  5211 00003ECC C3                  <2> 	ret
  5212                              <2> 	
  5213 00003ECD FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5214 00003ED6 00                  <2>
  5215                              <2> fcircle:	
  5216 00003ED7 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  5217 00003EDD 81C608000000        <2> 	add esi, 8
  5218 00003EE3 66B91000            <2> 	mov cx, 16
  5219 00003EE7 30C0                <2> 	xor al, al
  5220 00003EE9 3806                <2> 	cmp [esi], al
  5221 00003EEB 7405                <2> 	je .nocmdline
  5222 00003EED E830F4FFFF          <2> 	call cnvrttxt
  5223                              <2> .nocmdline:
  5224 00003EF2 6689C8              <2> 	mov ax, cx
  5225 00003EF5 66D1E1              <2> 	shl cx, 1
  5226 00003EF8 6689CA              <2> 	mov dx, cx
  5227 00003EFB 663B15[31570000]    <2> 	cmp dx, [resolutionx]
  5228 00003F02 731B                <2> 	jae .done
  5229 00003F04 663B0D[33570000]    <2> 	cmp cx, [resolutiony]
  5230 00003F0B 7312                <2> 	jae .done
  5231 00003F0D 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5232 00003F14 31FF                <2> 	xor edi, edi
  5233 00003F16 803D[DCFB0000]01    <2> 	cmp byte [guion], 1
  5234 00003F1D 7401                <2> 	je .lp
  5235 00003F1F C3                  <2> .done ret
  5236                              <2> .lp:
  5237 00003F20 6629C2              <2> 	sub dx, ax
  5238 00003F23 6629C1              <2> 	sub cx, ax
  5239 00003F26 60                  <2> 	pusha
  5240 00003F27 E8FC290000          <2> 	call fillcircle
  5241 00003F2C 61                  <2> 	popa
  5242 00003F2D 47                  <2> 	inc edi
  5243 00003F2E 660335[64020000]    <2> 	add si, [timenanoseconds]
  5244 00003F35 6601C2              <2> 	add dx, ax
  5245 00003F38 6601C2              <2> 	add dx, ax
  5246 00003F3B 6601C2              <2> 	add dx, ax
  5247 00003F3E 6601C1              <2> 	add cx, ax
  5248 00003F41 663B15[31570000]    <2> 	cmp dx, [resolutionx]
  5249 00003F48 72D6                <2> 	jb .lp
  5250 00003F4A 6689C2              <2> 	mov dx, ax
  5251 00003F4D 6601C2              <2> 	add dx, ax
  5252 00003F50 6601C1              <2> 	add cx, ax
  5253 00003F53 6601C1              <2> 	add cx, ax
  5254 00003F56 663B0D[33570000]    <2> 	cmp cx, [resolutiony]
  5255 00003F5D 72C1                <2> 	jb .lp
  5256 00003F5F C3                  <2> 	ret
  5257                              <1> %endif
  5258                              <1> %include 'source/programs/clear.asm'
  5259 00003F60 FF2C636C65617200    <2> db 255,44,"clear",0
  5260 00003F68 E862DEFFFF          <2> 		call clear
  5261 00003F6D C3                  <2> 		ret 
  5262                              <1> %include 'source/programs/cpuid.asm'
  5263 00003F6E FF2C637075696400    <2> db 255,44,"cpuid",0
  5264 00003F76 31C0                <2> 	xor eax, eax
  5265 00003F78 0FA2                <2> 	cpuid
  5266 00003F7A 891D[CB3F0000]      <2> 	mov [cpuidbuf], ebx
  5267 00003F80 8915[CF3F0000]      <2> 	mov [cpuidbuf + 4], edx
  5268 00003F86 890D[D33F0000]      <2> 	mov [cpuidbuf + 8], ecx
  5269 00003F8C BE[CB3F0000]        <2> 	mov esi, cpuidbuf
  5270 00003F91 E890DDFFFF          <2> 	call print
  5271 00003F96 BE[77890000]        <2> 	mov esi, line
  5272 00003F9B E886DDFFFF          <2> 	call print
  5273 00003FA0 B801000000          <2> 	mov eax, 1
  5274 00003FA5 0FA2                <2> 	cpuid
  5275 00003FA7 89C1                <2> 	mov ecx, eax
  5276 00003FA9 C605[61310000]02    <2> 	mov byte [firsthexshown], 2
  5277 00003FB0 E8C1F1FFFF          <2> 	call showhex
  5278 00003FB5 B808000080          <2> 	mov eax, 0x80000008
  5279 00003FBA 0FA2                <2> 	cpuid
  5280 00003FBC 89C1                <2> 	mov ecx, eax
  5281 00003FBE C605[61310000]02    <2> 	mov byte [firsthexshown], 2
  5282 00003FC5 E8ACF1FFFF          <2> 	call showhex
  5283 00003FCA C3                  <2> 	ret
  5284                              <2> 	
  5285 00003FCB 00<rept>            <2> cpuidbuf times 13 db 0
  5286                              <2> cpuidvendorend:
  5287                              <1> %ifdef network.included
  5288                              <1> 	%include 'source/programs/dhcp.asm'
  5289 00003FD8 FF2C6468637000      <2> db 255,44,"dhcp",0
  5290                              <2> dhcp:
  5291 00003FDF BE[9F400000]        <2> 	mov esi, .dhcp.mac
  5292 00003FE4 BB[7F410000]        <2> 	mov ebx, .dhcp.option.mac
  5293 00003FE9 BF[5F400000]        <2> 	mov edi, .mac
  5294 00003FEE 31C9                <2> 	xor ecx, ecx
  5295 00003FF0 66890D[71400000]    <2> 	mov [.ip.checksum], cx
  5296 00003FF7 66890D[81400000]    <2> 	mov [.udp.checksum], cx
  5297 00003FFE 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  5298 00004004 890B                <2> 	mov [ebx], ecx
  5299 00004006 890F                <2> 	mov [edi], ecx
  5300 00004008 890E                <2> 	mov [esi], ecx
  5301 0000400A 668B0D[34890000]    <2> 	mov cx, [sysmac + 4]
  5302 00004011 66894B04            <2> 	mov [ebx + 4], cx
  5303 00004015 66894E04            <2> 	mov [esi + 4], cx
  5304 00004019 66894F04            <2> 	mov [edi + 4], cx
  5305 0000401D BF[67400000]        <2> 	mov edi, .ip.header
  5306 00004022 BE[7B400000]        <2> 	mov esi, .ip.headerend
  5307 00004027 E8EF470000          <2> 	call getchecksum
  5308 0000402C 66890D[71400000]    <2> 	mov [.ip.checksum], cx
  5309 00004033 BF[7B400000]        <2> 	mov edi, .udp.header
  5310 00004038 BE[96410000]        <2> 	mov esi, .udp.end
  5311 0000403D E8D9470000          <2> 	call getchecksum
  5312 00004042 66890D[81400000]    <2> 	mov [.udp.checksum], cx
  5313 00004049 BF[59400000]        <2> 	mov edi, .frame
  5314 0000404E BE[96410000]        <2> 	mov esi, .udp.end
  5315 00004053 E8B9470000          <2> 	call sendpacket
  5316 00004058 C3                  <2> 	ret
  5317                              <2> .frame:
  5318 00004059 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5319 0000405F 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5320 00004065 0800                <2> 	db 8,0
  5321                              <2> .ip.header:
  5322 00004067 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5323 00004068 00                  <2> 	db 0
  5324 00004069 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5325 0000406B 0000                <2> 	dw 0
  5326 0000406D 0000                <2> 	dw 0
  5327 0000406F 80                  <2> 	db 0x80
  5328 00004070 11                  <2> 	db 17
  5329 00004071 0000                <2> .ip.checksum dw 0
  5330 00004073 00000000            <2> 	db 0,0,0,0
  5331 00004077 FFFFFFFF            <2> 	db 255,255,255,255	
  5332                              <2> .ip.headerend:
  5333                              <2> .udp.header:
  5334 0000407B 0044                <2> 	db 0,68	;source port
  5335 0000407D 0043                <2> 	db 0,67 ;destination port
  5336 0000407F 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5337 00004081 0000                <2> .udp.checksum dw 0
  5338                              <2> .udp.headerend:
  5339                              <2> .dhcp.data:
  5340 00004083 01                  <2> 	db 1	;message type
  5341 00004084 01                  <2> 	db 1	;hardware type
  5342 00004085 06                  <2> 	db 6	;hardware address length
  5343 00004086 00                  <2> 	db 0	;hops
  5344 00004087 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5345 0000408B 0000                <2> 	db 0,0	;seconds elapsed
  5346 0000408D 0000                <2> 	db 0,0	;flags
  5347 0000408F 00000000            <2> 	db 0,0,0,0	;client ip address
  5348 00004093 00000000            <2> 	db 0,0,0,0	;your ip address
  5349 00004097 00000000            <2> 	db 0,0,0,0	;server ip address
  5350 0000409B 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5351 0000409F 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5352 000040A5 00<rept>            <2> 	times 10 db 0	;padding
  5353 000040AF 00<rept>            <2> 	times 64 db 0	;server host name
  5354 000040EF 00<rept>            <2> 	times 128 db 0	;boot file name
  5355 0000416F 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5356                              <2> .dhcp.option.type:
  5357 00004173 350103              <2> 	db 53,1,3	;DHCP Request
  5358 00004176 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5359 0000417C 3D07                <2> 	db 61,7 ;client id(mac)
  5360 0000417E 01                  <2> 	db 1	;Type=Ethernet
  5361 0000417F 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5362 00004185 0C08                <2> 	db 12,8 ;host name
  5363 00004187 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5364 0000418F 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5365 00004195 FF                  <2> 	db 0xFF	;end DHCP options
  5366                              <2> .dhcp.end:
  5367                              <2> .udp.end:
  5368                              <2> 	
  5369                              <1> %endif
  5370                              <1> %ifdef disk.none
  5371                              <1> %else
  5372                              <1> 	%include 'source/programs/dos.asm'
  5373 00004196 FF2C646F7300        <2> db 255,44,"dos",0
  5374                              <2> dosrunner:
  5375 0000419C 8925[26120100]      <2> 	mov [previousstack], esp
  5376 000041A2 8B3D[4F2F0000]      <2> 	mov edi, [currentcommandloc]
  5377 000041A8 81C704000000        <2> 	add edi, 4
  5378 000041AE BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5379 000041B3 E8C8230000          <2> 	call loadfile
  5380 000041B8 8B3D[4F2F0000]      <2> 	mov edi, [currentcommandloc]
  5381 000041BE 81C704000000        <2> 	add edi, 4
  5382 000041C4 81FA94010000        <2> 	cmp edx, 404
  5383 000041CA 0F845E000000        <2> 	je near .noprogfound
  5384 000041D0 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5385 000041D5 31C9                <2> 	xor ecx, ecx
  5386                              <2> .findparams:
  5387 000041D7 47                  <2> 	inc edi
  5388 000041D8 8A07                <2> 	mov al, [edi]
  5389 000041DA 3C20                <2> 	cmp al, " "
  5390 000041DC 75F9                <2> 	jne .findparams
  5391                              <2> .copyparams:
  5392 000041DE 8A07                <2> 	mov al, [edi]
  5393 000041E0 8803                <2> 	mov [ebx], al
  5394 000041E2 43                  <2> 	inc ebx
  5395 000041E3 47                  <2> 	inc edi
  5396 000041E4 41                  <2> 	inc ecx
  5397 000041E5 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5398 000041EB 7304                <2> 	jae .nomoreparams
  5399 000041ED 3C00                <2> 	cmp al, 0
  5400 000041EF 75ED                <2> 	jne .copyparams
  5401                              <2> .nomoreparams:
  5402 000041F1 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5403 000041F7 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5404 000041FB 8ED8                <2> 	mov ds, ax
  5405 000041FD 8EC0                <2> 	mov es, ax
  5406 000041FF 8EE0                <2> 	mov fs, ax
  5407 00004201 8EE8                <2> 	mov gs, ax
  5408 00004203 31C0                <2> 	xor eax, eax
  5409 00004205 31DB                <2> 	xor ebx, ebx
  5410 00004207 31C9                <2> 	xor ecx, ecx
  5411 00004209 31D2                <2> 	xor edx, edx
  5412 0000420B 31FF                <2> 	xor edi, edi
  5413 0000420D 31F6                <2> 	xor esi, esi
  5414 0000420F 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5415 00004216 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5416 0000421A 6689DA              <2> 	mov dx, bx
  5417 0000421D 8EC3                <2> 	mov es, bx
  5418 0000421F 8EE3                <2> 	mov fs, bx
  5419 00004221 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5420 00004225 8EEB                <2> 	mov gs, bx
  5421 00004227 8B25[26120100]      <2> 	mov esp, [previousstack]
  5422 0000422D C3                  <2> 	ret
  5423                              <2> .noprogfound:
  5424 0000422E BE[3E890000]        <2> 	mov esi, notfound1
  5425 00004233 E8EEDAFFFF          <2> 	call print
  5426 00004238 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  5427 0000423E 81C604000000        <2> 	add esi, 4
  5428 00004244 E8DDDAFFFF          <2> 	call print
  5429 00004249 BE[46890000]        <2> 	mov esi, notfound2
  5430 0000424E E8D3DAFFFF          <2> 	call print
  5431 00004253 C3                  <2> 	ret
  5432                              <2> 	
  5433                              <1> %endif
  5434                              <1> %include 'source/programs/dump.asm'
  5435 00004254 FF2C64756D7000      <2> db 255,44,"dump",0
  5436 0000425B 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  5437 00004261 81C605000000        <2> 	add esi, 5
  5438 00004267 31C9                <2> 	xor ecx, ecx
  5439 00004269 66B83078            <2> 	mov ax, "0x"
  5440 0000426D 663906              <2> 	cmp [esi], ax
  5441 00004270 740A                <2> 	je dumphexin
  5442 00004272 E8ABF0FFFF          <2> 	call cnvrttxt
  5443 00004277 E910000000          <2> 	jmp dumphexnow
  5444                              <2> dumphexin:
  5445 0000427C 81C602000000        <2> 	add esi, 2
  5446 00004282 E852F0FFFF          <2> 	call cnvrthextxt
  5447 00004287 E900000000          <2> 	jmp dumphexnow
  5448                              <2> dumphexnow:
  5449 0000428C 89CF                <2> 	mov edi, ecx
  5450 0000428E 89FE                <2> 	mov esi, edi
  5451 00004290 81C680030000        <2> 	add esi, 896
  5452                              <2> dumphexloop:
  5453 00004296 8B0F                <2> 	mov ecx, [edi]
  5454 00004298 C605[61310000]05    <2> 	mov byte [firsthexshown],5
  5455 0000429F E8D2EEFFFF          <2> 	call showhex
  5456 000042A4 81C704000000        <2> 	add edi, 4
  5457 000042AA 39F7                <2> 	cmp edi, esi
  5458 000042AC 72E8                <2> 	jb dumphexloop
  5459 000042AE E8A5E5FFFF          <2> 	call termcopy
  5460 000042B3 C3                  <2> 	ret 
  5461                              <1> %include 'source/programs/echo.asm'
  5462                              <2> 
  5463 000042B4 FF2C6563686F00      <2> db 255,44,"echo",0
  5464                              <2> 	echoprog:
  5465 000042BB 8B35[4F2F0000]      <2> 		mov esi, [currentcommandloc]
  5466 000042C1 81C605000000        <2> 		add esi, 5
  5467 000042C7 8A06                <2> 		mov al, [esi]
  5468 000042C9 E858DAFFFF          <2> 		call print
  5469 000042CE BE[77890000]        <2> 		mov esi, line
  5470 000042D3 E84EDAFFFF          <2> 		call print
  5471 000042D8 C3                  <2> 		ret
  5472 000042D9 BB[A6140100]        <2> 	echovr:	mov ebx, variables
  5473 000042DE BF06000000          <2> 		mov edi, 6
  5474 000042E3 E83C000000          <2> 		call nxtvrech
  5475 000042E8 E954000000          <2> 		jmp prntvr2
  5476 000042ED B13D                <2> 	echvar:	mov cl, '='
  5477 000042EF 43                  <2> 		inc ebx
  5478 000042F0 8A03                <2> 		mov al, [ebx]
  5479 000042F2 3C00                <2> 		cmp al, 0
  5480 000042F4 742E                <2> 		je nxtvrech
  5481 000042F6 3C3D                <2> 		cmp al, '='
  5482 000042F8 7422                <2> 		je nxtvrechb1
  5483 000042FA 8B35[4F2F0000]      <2> 		mov esi, [currentcommandloc]
  5484 00004300 01FE                <2> 		add esi, edi
  5485 00004302 E887ECFFFF          <2> 		call cndtest
  5486 00004307 3C02                <2> 		cmp al, 2
  5487 00004309 7432                <2> 		je prntvr
  5488 0000430B 3C01                <2> 		cmp al, 1
  5489 0000430D 742E                <2> 		je prntvr
  5490 0000430F 8B35[4F2F0000]      <2> 		mov esi, [currentcommandloc]
  5491 00004315 01FE                <2> 		add esi, edi
  5492 00004317 E908000000          <2> 		jmp nxtvrech
  5493                              <2> 	nxtvrechb1:
  5494 0000431C 81EB02000000        <2> 		sub ebx, 2
  5495 00004322 EBC9                <2> 		jmp echvar
  5496 00004324 8A03                <2> 	nxtvrech: mov al, [ebx]
  5497 00004326 3C05                <2> 		cmp al, 5
  5498 00004328 740A                <2> 		je nxtvrec2
  5499 0000432A 43                  <2> 		inc ebx
  5500 0000432B 81FB[A6240100]      <2> 		cmp ebx, varend
  5501 00004331 72F1                <2> 		jb nxtvrech
  5502 00004333 C3                  <2> 		ret
  5503 00004334 43                  <2> 	nxtvrec2: inc ebx
  5504 00004335 8A03                <2> 		mov al, [ebx]
  5505 00004337 3C04                <2> 		cmp al, 4
  5506 00004339 74B2                <2> 		je echvar
  5507 0000433B EBE7                <2> 		jmp nxtvrech
  5508 0000433D 43                  <2> 	prntvr: inc ebx
  5509 0000433E 89DE                <2> 		mov esi, ebx
  5510 00004340 C3                  <2> 		ret
  5511 00004341 E8E0D9FFFF          <2> 	prntvr2: call print
  5512 00004346 BE[77890000]        <2> 		mov esi, line
  5513 0000434B E8D6D9FFFF          <2> 		call print
  5514 00004350 C3                  <2> 		ret 
  5515                              <1> %include 'source/programs/else.asm'
  5516 00004351 FF2C656C736500      <2> 	db 255,44,"else",0
  5517 00004358 31C0                <2> elsecmd:	xor eax, eax
  5518 0000435A 3805[A0140100]      <2> 	cmp [BATCHISON], al
  5519 00004360 0F84E7F6FFFF        <2> 	je near notbatch
  5520 00004366 A0[37140100]        <2> 	mov al, [IFON]
  5521 0000436B BE[38140100]        <2> 	mov esi, IFTRUE
  5522 00004370 01C6                <2> 	add esi, eax
  5523 00004372 8A06                <2> 	mov al, [esi]
  5524 00004374 3401                <2> 	xor al, 1
  5525 00004376 8806                <2> 	mov [esi], al
  5526 00004378 C3                  <2> 	ret 
  5527                              <1> %include 'source/programs/exit.asm'
  5528 00004379 FF2C6578697400      <2> db 255,44,"exit",0
  5529 00004380 803D[36140100]01    <2> 	cmp byte [ranboot], 1
  5530 00004387 0F84A3E8FFFF        <2> 	je near returnfromexp
  5531 0000438D E989E7FFFF          <2> 	jmp nobootfile
  5532                              <1> %include 'source/programs/fi.asm'
  5533 00004392 FF2C666900          <2> 	db 255,44,"fi",0
  5534 00004397 30C0                <2> 	xor al, al
  5535 00004399 3805[A0140100]      <2> 	cmp [BATCHISON], al
  5536 0000439F 0F84A8F6FFFF        <2> 	je near notbatch
  5537 000043A5 B001                <2> fi:	mov al, 1
  5538 000043A7 2805[37140100]      <2> 	sub [IFON],al
  5539 000043AD C3                  <2> 	ret 
  5540                              <1> %ifdef gui.included
  5541                              <1> 	%include 'source/programs/gui.asm'
  5542 000043AE FF2C67756900        <2> db 255,44,"gui",0
  5543                              <2> guiswitcher:
  5544 000043B4 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  5545 000043BA 81C604000000        <2> 	add esi, 4
  5546 000043C0 31C9                <2> 	xor ecx, ecx
  5547 000043C2 803E00              <2> 	cmp byte [esi], 0
  5548 000043C5 740A                <2> 	je .nomodepref
  5549 000043C7 E80DEFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5550 000043CC E907000000          <2> 	jmp .modepref
  5551                              <2> .nomodepref:
  5552 000043D1 51                  <2> 	push ecx
  5553 000043D2 E8F8D9FFFF          <2> 	call clear
  5554 000043D7 59                  <2> 	pop ecx
  5555                              <2> .modepref:
  5556 000043D8 66BB[4153]          <2> 	mov bx, guiswitch
  5557 000043DC 66891D[D70C0000]    <2> 	mov [realmodeptr], bx
  5558 000043E3 BB[F3430000]        <2> 	mov ebx, guiswitchret
  5559 000043E8 891D[D30C0000]      <2> 	mov [realmodereturn], ebx
  5560 000043EE E9C9C7FFFF          <2> 	jmp realmode
  5561                              <2> guiswitchret:
  5562 000043F3 65803D[DCFB0000]01  <2> 	cmp byte [gs:guion], 1
  5563 000043FB 7401                <2> 	je .cont
  5564 000043FD C3                  <2> 	ret
  5565                              <2> .cont:
  5566 000043FE BF[1F550000]        <2> 	mov edi, VBEMODEBLOCK
  5567                              <2> .loop:
  5568 00004403 658B07              <2> 	mov eax, [gs:edi]
  5569 00004406 8907                <2> 	mov [edi], eax
  5570 00004408 47                  <2> 	inc edi
  5571 00004409 81FF[23580000]      <2> 	cmp edi, VBEEND
  5572 0000440F 72F2                <2> 	jb .loop
  5573 00004411 A1[47570000]        <2> 	mov eax, [physbaseptr]
  5574 00004416 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5575 0000441C C1E304              <2> 	shl ebx, 4
  5576 0000441F 29D8                <2> 	sub eax, ebx
  5577 00004421 A3[47570000]        <2> 	mov [physbaseptr], eax
  5578 00004426 C605[8D230000]00    <2> 	mov byte [termguion], 0
  5579 0000442D BE[BB2C0100]        <2> 	mov esi, graphicstable
  5580 00004432 30C0                <2> 	xor al, al
  5581                              <2> .clear:
  5582 00004434 8806                <2> 	mov [esi], al
  5583 00004436 46                  <2> 	inc esi
  5584 00004437 81FE[BB2E0100]      <2> 	cmp esi, graphicstableend
  5585 0000443D 72F5                <2> 	jb .clear
  5586 0000443F E85E2B0000          <2> 	call guisetup
  5587                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5588 00004444 668B15[31570000]    <2> 	mov dx, [resolutionx]
  5589 0000444B 668B0D[33570000]    <2> 	mov cx, [resolutiony]
  5590 00004452 6689D3              <2> 	mov bx, dx
  5591 00004455 6689C8              <2> 	mov ax, cx
  5592 00004458 66D1EB              <2> 	shr bx, 1
  5593 0000445B 66D1E8              <2> 	shr ax, 1
  5594 0000445E 6689DA              <2> 	mov dx, bx
  5595 00004461 66D1EA              <2> 	shr dx, 1
  5596 00004464 6689C1              <2> 	mov cx, ax
  5597 00004467 66D1E9              <2> 	shr cx, 1
  5598 0000446A 6601D3              <2> 	add bx, dx
  5599 0000446D 6601C8              <2> 	add ax, cx
  5600 00004470 66D1E9              <2> 	shr cx, 1
  5601 00004473 66C1EB03            <2> 	shr bx, 3
  5602 00004477 66C1E303            <2> 	shl bx, 3
  5603 0000447B 66C1E804            <2> 	shr ax, 4
  5604 0000447F 66C1E004            <2> 	shl ax, 4
  5605 00004483 66891D[A7710000]    <2> 	mov [termwindow], bx
  5606 0000448A 66A3[A9710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5607 00004490 BE[A7710000]        <2> 	mov esi, termwindow
  5608 00004495 31DB                <2> 	xor ebx, ebx
  5609 00004497 6631C0              <2> 	xor ax, ax
  5610 0000449A E833320000          <2> 	call showwindow
  5611 0000449F E880130000          <2> 	call cursorgui
  5612 000044A4 E826D9FFFF          <2> 	call clear
  5613 000044A9 C3                  <2> 	ret
  5614                              <2> 	
  5615                              <1> %endif
  5616                              <1> %include 'source/programs/help.asm'
  5617 000044AA FF2C68656C7000      <2> db 255,44,"help",0
  5618                              <2> lscmd:	
  5619 000044B1 B00D                <2> 		mov al, 13
  5620 000044B3 E8D7DEFFFF          <2> 		call prcharq
  5621 000044B8 BE[A5330000]        <2> 		mov esi, progstart
  5622 000044BD BB[41530000]        <2> 		mov ebx, progend
  5623 000044C2 BE[260E0100]        <2> dir:	mov esi, fileindex
  5624 000044C7 8A06                <2> 	dirnxt:	mov al, [esi]
  5625 000044C9 30E4                <2> 		xor ah, ah
  5626 000044CB 3CFF                <2> 		cmp al, 255
  5627 000044CD 7415                <2> 		je dirfnd
  5628 000044CF 46                  <2> 		inc esi
  5629 000044D0 81FE[26120100]      <2> 		cmp esi,  fileindexend
  5630 000044D6 7339                <2> 		jae dirdn
  5631 000044D8 EBED                <2> 		jmp dirnxt
  5632                              <2> 	dirfnd3:
  5633 000044DA 46                  <2> 		inc esi
  5634 000044DB 81FE[26120100]      <2> 		cmp esi, fileindexend
  5635 000044E1 76E4                <2> 		jbe dirnxt
  5636 000044E3 4E                  <2> 		dec esi
  5637 000044E4 46                  <2> 	dirfnd:	inc esi
  5638 000044E5 8A06                <2> 		mov al, [esi]
  5639 000044E7 30E4                <2> 		xor ah, ah
  5640 000044E9 3C2C                <2> 		cmp al, 44
  5641 000044EB 740B                <2> 		je dirfnd2
  5642 000044ED 46                  <2> 		inc esi
  5643 000044EE 81FE[26120100]      <2> 		cmp esi,  fileindexend
  5644 000044F4 731B                <2> 		jae dirdn
  5645 000044F6 EBCF                <2> 		jmp dirnxt
  5646 000044F8 46                  <2> 	dirfnd2: inc esi
  5647 000044F9 E809D8FFFF          <2> 		call printquiet
  5648 000044FE 56                  <2> 		push esi
  5649 000044FF B009                <2> 		mov al, 9
  5650 00004501 E889DEFFFF          <2> 		call prcharq
  5651 00004506 5E                  <2> 		pop esi
  5652 00004507 81FE[26120100]      <2> 		cmp esi,  fileindexend
  5653 0000450D 7302                <2> 		jae dirdn
  5654 0000450F EBB6                <2> 		jmp dirnxt
  5655 00004511 BE[77890000]        <2> 	dirdn:	mov esi, line
  5656 00004516 E80BD8FFFF          <2> 			call print
  5657 0000451B C3                  <2> 			ret
  5658 0000451C 00                  <2> currentdir db 0
  5659                              <1> %include 'source/programs/if.asm'
  5660 0000451D FF2C696600          <2> 	db 255,44,"if",0
  5661 00004522 30C0                <2> ifcmd:	xor al, al
  5662 00004524 3805[A0140100]      <2> 	cmp [BATCHISON], al
  5663 0000452A 0F841DF5FFFF        <2> 	je near notbatch
  5664 00004530 8B1D[4F2F0000]      <2> 	mov ebx, [currentcommandloc]
  5665 00004536 81C303000000        <2> 	add ebx, 3
  5666 0000453C 89DE                <2> 	mov esi, ebx
  5667 0000453E 8A06                <2> chkeqsn: mov al, [esi]
  5668 00004540 3C00                <2> 	cmp al, 0
  5669 00004542 0F8405F5FFFF        <2> 	je near notbatch
  5670 00004548 3C3D                <2> 	cmp al, '='
  5671 0000454A 0F8403000000        <2> 	je near chkeqdn
  5672 00004550 46                  <2> 	inc esi
  5673 00004551 EBEB                <2> 	jmp chkeqsn
  5674 00004553 B000                <2> chkeqdn: mov al, 0 
  5675 00004555 8806                <2> 	mov [esi], al
  5676 00004557 46                  <2> 	inc esi
  5677 00004558 E8F6E9FFFF          <2> 	call tester
  5678 0000455D 3C01                <2> 	cmp al, 1
  5679 0000455F 0F8405000000        <2> 	je near trueif
  5680 00004565 E91C000000          <2> 	jmp falseif
  5681 0000456A 31C0                <2> trueif:	xor eax, eax
  5682 0000456C A0[37140100]        <2> 	mov al, [IFON]
  5683 00004571 FEC0                <2> 	inc al
  5684 00004573 A2[37140100]        <2> 	mov [IFON], al
  5685 00004578 30E4                <2> 	xor ah, ah
  5686 0000457A BE[38140100]        <2> 	mov esi, IFTRUE
  5687 0000457F 01C6                <2> 	add esi, eax
  5688 00004581 B401                <2> 	mov ah, 1
  5689 00004583 8826                <2> 	mov [esi], ah
  5690 00004585 C3                  <2> 	ret 
  5691 00004586 31C0                <2> falseif: xor eax, eax
  5692 00004588 A0[37140100]        <2> 	mov al, [IFON]
  5693 0000458D FEC0                <2> 	inc al
  5694 0000458F A2[37140100]        <2> 	mov [IFON], al
  5695 00004594 30E4                <2> 	xor ah, ah
  5696 00004596 BE[38140100]        <2> 	mov esi, IFTRUE
  5697 0000459B 01C6                <2> 	add esi, eax
  5698 0000459D 30E4                <2> 	xor ah, ah
  5699 0000459F 8826                <2> 	mov [esi], ah
  5700 000045A1 C3                  <2> 	ret 
  5701                              <1> %ifdef network.included
  5702                              <1> 	%include 'source/programs/ipconfig.asm'
  5703 000045A2 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5704 000045AB 6700                <2>
  5705                              <2> ifconfig:
  5706 000045AD 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  5707 000045B3 81C609000000        <2> 	add esi, 9
  5708 000045B9 803E00              <2> 	cmp byte [esi], 0
  5709 000045BC 740B                <2> 	je .noip
  5710 000045BE E880420000          <2> 	call strtoip
  5711 000045C3 890D[2C890000]      <2> 	mov [sysip], ecx
  5712                              <2> .noip:
  5713                              <2> %ifdef ne2000.included
  5714                              <2> 	cmp byte [ne2000.nicconfig], 1
  5715                              <2> 	jne .none2000
  5716                              <2> 	mov esi, ne2000.name
  5717                              <2> 	call print
  5718                              <2> 	mov ecx, ne2000.mac
  5719                              <2> 	call showmac
  5720                              <2> 	mov esi, line
  5721                              <2> 	call print
  5722                              <2> .none2000:
  5723                              <2> %endif
  5724                              <2> %ifdef rtl8139.included
  5725                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5726                              <2> 	jne .nortl8139
  5727                              <2> 	mov esi, rtl8139.name
  5728                              <2> 	call print
  5729                              <2> 	mov ecx, rtl8139.mac
  5730                              <2> 	call showmac
  5731                              <2> 	mov esi, line
  5732                              <2> 	call print
  5733                              <2> .nortl8139:
  5734                              <2> %endif
  5735                              <2> %ifdef rtl8169.included
  5736 000045C9 803D[64860000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5737 000045D0 751E                <2> 	jne .nortl8169
  5738 000045D2 BE[6B860000]        <2> 	mov esi, rtl8169.name
  5739 000045D7 E84AD7FFFF          <2> 	call print
  5740 000045DC B9[65860000]        <2> 	mov ecx, rtl8169.mac
  5741 000045E1 E8DF420000          <2> 	call showmac
  5742 000045E6 BE[77890000]        <2> 	mov esi, line
  5743 000045EB E836D7FFFF          <2> 	call print
  5744                              <2> .nortl8169:
  5745                              <2> %endif
  5746                              <2> %ifdef i8254x.included
  5747                              <2> 	cmp byte [i8254x.nicconfig], 1
  5748                              <2> 	jne .noi8254x
  5749                              <2> 	mov esi, i8254x.name
  5750                              <2> 	call print
  5751                              <2> 	mov ecx, i8254x.mac
  5752                              <2> 	call showmac
  5753                              <2> 	mov esi, line
  5754                              <2> 	call print
  5755                              <2> .noi8254x:
  5756                              <2> %endif
  5757 000045F0 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  5758 000045F6 E88E420000          <2> 	call showip
  5759 000045FB BE[77890000]        <2> 	mov esi, line
  5760 00004600 E821D7FFFF          <2> 	call print
  5761 00004605 C3                  <2> 	ret
  5762                              <2> 	
  5763                              <1> %endif
  5764                              <1> %include 'source/programs/keycode.asm'
  5765 00004606 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5766 0000460F 00                  <2>
  5767                              <2> keycode:
  5768 00004610 66C705[64230000]00- <2> 	mov word [trans], 0
  5769 00004618 00                  <2>
  5770 00004619 C605[1F670000]00    <2> 	mov byte [threadson], 0
  5771                              <2> %ifdef io.serial
  5772                              <2> .noserial:
  5773                              <2> 	hlt
  5774                              <2> 	mov dx, [serial.address]
  5775                              <2> 	in al, dx
  5776                              <2> 	cmp al, 0
  5777                              <2> 	je .noserial
  5778                              <2> 	mov cl, al
  5779                              <2> 	call showhexsmall
  5780                              <2> 	cmp al, 0x1B
  5781                              <2> 	jne .noserial
  5782                              <2> 	in al, dx
  5783                              <2> 	mov cl, al
  5784                              <2> 	call showhexsmall
  5785                              <2> 	cmp cl, 0x5B
  5786                              <2> 	je .noserial
  5787                              <2> 	ret
  5788                              <2> %else
  5789 00004620 E8D8150000          <2> 	call getkey
  5790 00004625 31C0                <2> 	xor eax, eax
  5791 00004627 31C9                <2> 	xor ecx, ecx
  5792 00004629 8A0D[DB5B0000]      <2> 	mov cl, [specialkey]
  5793 0000462F 80F900              <2> 	cmp cl, 0
  5794 00004632 0F8405000000        <2> 	je near .nospecialkeycode
  5795 00004638 E825EBFFFF          <2> 	call showhexsmall
  5796                              <2> .nospecialkeycode:
  5797 0000463D 668B0D[62230000]    <2> 	mov cx, [lastkey + 2]
  5798 00004644 E819EBFFFF          <2> 	call showhexsmall
  5799 00004649 80F901              <2> 	cmp cl, 1
  5800 0000464C 75C2                <2> 	jne keycode
  5801 0000464E C3                  <2> 	ret
  5802                              <2> %endif
  5803                              <1> %ifdef gui.included
  5804                              <1> 	%include 'source/programs/line.asm'
  5805 0000464F FF2C6C696E6500      <2> db 255,44,"line",0
  5806                              <2> linetester:
  5807 00004656 803D[DCFB0000]00    <2> 	cmp byte [guion], 0
  5808 0000465D 0F841B000000        <2> 	je near .done
  5809 00004663 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5810 0000466A BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5811 0000466F E868000000          <2> 	call .circletest
  5812 00004674 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5813 00004679 E801000000          <2> 	call .linetest
  5814                              <2> .done:
  5815 0000467E C3                  <2> 	ret
  5816                              <2> 
  5817                              <2> .linetest:
  5818 0000467F 53                  <2> 	push ebx
  5819 00004680 E8D6000000          <2> 	call .stime
  5820 00004685 5B                  <2> 	pop ebx
  5821 00004686 31FF                <2> 	xor edi, edi
  5822                              <2> .ltlp:
  5823 00004688 53                  <2> 	push ebx
  5824 00004689 E81C010000          <2> 	call .st
  5825 0000468E 66F7D6              <2> 	not si
  5826 00004691 E814010000          <2> 	call .st
  5827 00004696 5B                  <2> 	pop ebx
  5828 00004697 66F7D6              <2> 	not si
  5829 0000469A 660335[64020000]    <2> 	add si, [timenanoseconds]
  5830 000046A1 4B                  <2> 	dec ebx
  5831 000046A2 81FB00000000        <2> 	cmp ebx, 0
  5832 000046A8 77DE                <2> 	ja .ltlp
  5833 000046AA E8C4000000          <2> 	call .etime
  5834 000046AF 53                  <2> 	push ebx	
  5835 000046B0 57                  <2> 	push edi
  5836 000046B1 E803270000          <2> 	call guiclear
  5837 000046B6 E84E270000          <2> 	call reloadallgraphics
  5838 000046BB 59                  <2> 	pop ecx
  5839 000046BC E87FEBFFFF          <2> 	call showdec
  5840 000046C1 BE[EC470000]        <2> 	mov esi, .msg
  5841 000046C6 E85BD6FFFF          <2> 	call print
  5842 000046CB 59                  <2> 	pop ecx
  5843 000046CC E86FEBFFFF          <2> 	call showdec
  5844 000046D1 BE[18480000]        <2> 	mov esi, .msgtime
  5845 000046D6 E84BD6FFFF          <2> 	call print
  5846 000046DB C3                  <2> 	ret
  5847                              <2> 	
  5848                              <2> .circletest:
  5849 000046DC 53                  <2> 	push ebx
  5850 000046DD E879000000          <2> 	call .stime
  5851 000046E2 5B                  <2> 	pop ebx
  5852 000046E3 31FF                <2> 	xor edi, edi
  5853                              <2> .ctlp:
  5854 000046E5 53                  <2> 	push ebx
  5855 000046E6 668B0D[33570000]    <2> 	mov cx, [resolutiony]
  5856 000046ED 66D1E9              <2> 	shr cx, 1
  5857 000046F0 668B15[31570000]    <2> 	mov dx, [resolutionx]
  5858 000046F7 66D1EA              <2> 	shr dx, 1
  5859 000046FA 6689C8              <2> 	mov ax, cx
  5860                              <2> .circle:
  5861 000046FD 60                  <2> 	pusha
  5862 000046FE E813210000          <2> 	call drawcircle
  5863 00004703 61                  <2> 	popa
  5864 00004704 6648                <2> 	dec ax
  5865 00004706 47                  <2> 	inc edi
  5866 00004707 663D0100            <2> 	cmp ax, 1
  5867 0000470B 77F0                <2> 	ja .circle
  5868 0000470D 66F7D6              <2> 	not si
  5869                              <2> .circle2:
  5870 00004710 60                  <2> 	pusha
  5871 00004711 E800210000          <2> 	call drawcircle
  5872 00004716 61                  <2> 	popa
  5873 00004717 47                  <2> 	inc edi
  5874 00004718 6640                <2> 	inc ax
  5875 0000471A 6639C8              <2> 	cmp ax, cx
  5876 0000471D 76F1                <2> 	jbe .circle2
  5877 0000471F 5B                  <2> 	pop ebx
  5878 00004720 66F7D6              <2> 	not si
  5879 00004723 660335[64020000]    <2> 	add si, [timenanoseconds]
  5880 0000472A 4B                  <2> 	dec ebx
  5881 0000472B 81FB00000000        <2> 	cmp ebx, 0
  5882 00004731 77B2                <2> 	ja .ctlp
  5883 00004733 E83B000000          <2> 	call .etime
  5884 00004738 53                  <2> 	push ebx
  5885 00004739 57                  <2> 	push edi
  5886 0000473A 59                  <2> 	pop ecx
  5887 0000473B E800EBFFFF          <2> 	call showdec
  5888 00004740 BE[01480000]        <2> 	mov esi, .msgcircle
  5889 00004745 E8DCD5FFFF          <2> 	call print
  5890 0000474A 59                  <2> 	pop ecx
  5891 0000474B E8F0EAFFFF          <2> 	call showdec
  5892 00004750 BE[18480000]        <2> 	mov esi, .msgtime
  5893 00004755 E8CCD5FFFF          <2> 	call print
  5894 0000475A C3                  <2> 	ret
  5895                              <2> 	
  5896                              <2> .stime:
  5897 0000475B F4                  <2> 	hlt
  5898 0000475C A1[60020000]        <2> 	mov eax, [timeseconds]
  5899 00004761 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5900 00004767 A3[27480000]        <2> 	mov [.time], eax
  5901 0000476C 891D[2B480000]      <2> 	mov [.time + 4], ebx
  5902 00004772 C3                  <2> 	ret
  5903                              <2> 	
  5904                              <2> .etime:
  5905 00004773 A1[60020000]        <2> 	mov eax, [timeseconds]
  5906 00004778 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5907 0000477E 8B0D[27480000]      <2> 	mov ecx, [.time]
  5908 00004784 8B15[2B480000]      <2> 	mov edx, [.time + 4]
  5909 0000478A C1EA0A              <2> 	shr edx, 10
  5910 0000478D C1EB0A              <2> 	shr ebx, 10
  5911 00004790 29C8                <2> 	sub eax, ecx
  5912 00004792 3D00000000          <2> 	cmp eax, 0
  5913 00004797 740E                <2> 	je .notclp
  5914                              <2> .tclp:
  5915 00004799 81C340420F00        <2> 	add ebx, 1000000
  5916 0000479F 48                  <2> 	dec eax
  5917 000047A0 3D00000000          <2> 	cmp eax, 0
  5918 000047A5 75F2                <2> 	jne .tclp
  5919                              <2> .notclp:
  5920 000047A7 29D3                <2> 	sub ebx, edx
  5921 000047A9 C3                  <2> 	ret
  5922                              <2> 	
  5923                              <2> .st:
  5924 000047AA 6631C0              <2> 	xor ax, ax
  5925 000047AD 6631DB              <2> 	xor bx, bx
  5926 000047B0 668B0D[33570000]    <2> 	mov cx, [resolutiony]
  5927 000047B7 668B15[31570000]    <2> 	mov dx, [resolutionx]
  5928                              <2> .lp:
  5929 000047BE 60                  <2> 	pusha
  5930 000047BF E8C9240000          <2> 	call drawline
  5931 000047C4 61                  <2> 	popa
  5932                              <2> .noswitch:
  5933 000047C5 47                  <2> 	inc edi
  5934 000047C6 6643                <2> 	inc bx
  5935 000047C8 664A                <2> 	dec dx
  5936 000047CA 6681FB0000          <2> 	cmp bx, 0
  5937 000047CF 74ED                <2> 	je .lp
  5938 000047D1 6681FA0000          <2> 	cmp dx, 0
  5939 000047D6 75E6                <2> 	jne .lp
  5940                              <2> .lp2:
  5941 000047D8 60                  <2> 	pusha
  5942 000047D9 E8AF240000          <2> 	call drawline
  5943 000047DE 61                  <2> 	popa
  5944 000047DF 47                  <2> 	inc edi
  5945 000047E0 6640                <2> 	inc ax
  5946 000047E2 6649                <2> 	dec cx
  5947 000047E4 6681F90000          <2> 	cmp cx, 0
  5948 000047E9 75ED                <2> 	jne .lp2
  5949 000047EB C3                  <2> 	ret
  5950                              <2> 	
  5951 000047EC 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5952 000047F5 6520647261776E2069- <2>
  5953 000047FE 6E2000              <2>
  5954 00004801 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5955 0000480A 65726520647261776E- <2>
  5956 00004813 20696E2000          <2>
  5957 00004818 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5958 00004821 6E64732E0A00        <2>
  5959 00004827 0000000000000000    <2> .time dd 0,0	
  5960                              <1> %endif
  5961                              <1> %include 'source/programs/logout.asm'
  5962 0000482F FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5963 00004838 E99AE2FFFF          <2> 	jmp os
  5964                              <1> %include 'source/programs/loop.asm'
  5965 0000483D FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5966 00004844 803D[A1140100]00    <2> 	cmp byte [LOOPON], 0
  5967 0000484B 0F8501000000        <2> 	jne near filoop
  5968 00004851 C3                  <2> 	ret
  5969 00004852 8B35[A2140100]      <2> filoop: mov esi, [LOOPPOS]
  5970 00004858 FE0D[37140100]      <2> 	dec byte [IFON]
  5971 0000485E C605[A1140100]00    <2> 	mov byte [LOOPON], 0
  5972 00004865 8935[9C140100]      <2> 	mov [BATCHPOS], esi
  5973 0000486B 8935[75390000]      <2> 	mov [batchedi], esi
  5974 00004871 C3                  <2> 	ret 
  5975                              <1> %ifdef disk.none
  5976                              <1> %else
  5977                              <1> 	%include 'source/programs/ls.asm'
  5978 00004872 FF2C6C7300          <2> db 255,44,"ls",0
  5979 00004877 BE[DCF90000]        <2> 		mov esi, diskfileindex
  5980                              <2> 	diskindexdir:
  5981 0000487C 803E5F              <2> 		cmp byte [esi], '_'
  5982 0000487F 7440                <2> 		je nextdiskindexdir
  5983 00004881 E881D4FFFF          <2> 		call printquiet
  5984 00004886 56                  <2> 		push esi
  5985 00004887 BE[E1480000]        <2> 		mov esi, disktab
  5986 0000488C E876D4FFFF          <2> 		call printquiet
  5987 00004891 5E                  <2> 		pop esi
  5988 00004892 8B4E05              <2> 		mov ecx, [esi + 5]
  5989 00004895 C605[61310000]05    <2> 		mov byte [firsthexshown], 5
  5990 0000489C E89FE9FFFF          <2> 		call showdec
  5991 000048A1 56                  <2> 		push esi
  5992 000048A2 BE[77890000]        <2> 		mov esi, line
  5993 000048A7 E85BD4FFFF          <2> 		call printquiet
  5994 000048AC 5E                  <2> 		pop esi
  5995 000048AD 81C609000000        <2> 		add esi, 9
  5996 000048B3 81FE[DAFB0000]      <2> 		cmp esi, enddiskfileindex
  5997 000048B9 72C1                <2> 		jb diskindexdir
  5998 000048BB E898DFFFFF          <2> 		call termcopy
  5999 000048C0 C3                  <2> 		ret
  6000                              <2> 	nextdiskindexdir:
  6001 000048C1 46                  <2> 		inc esi
  6002 000048C2 803E00              <2> 		cmp byte [esi], 0
  6003 000048C5 75FA                <2> 		jne nextdiskindexdir
  6004 000048C7 81C609000000        <2> 		add esi, 9
  6005 000048CD 81FE[DAFB0000]      <2> 		cmp esi, enddiskfileindex
  6006 000048D3 72A7                <2> 		jb diskindexdir
  6007 000048D5 E87EDFFFFF          <2> 		call termcopy
  6008 000048DA C3                  <2> 		ret
  6009                              <2> 		
  6010 000048DB 4469736B2000        <2> 		diskmsg db "Disk ",0
  6011 000048E1 0D09090900          <2> 		disktab db 13,9,9,9,0
  6012                              <1> %endif
  6013                              <1> %include 'source/programs/memory.asm'
  6014 000048E6 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6015 000048EF BE[E2FB0000]        <2> 	mov esi, memlistbuf
  6016 000048F4 31FF                <2> 	xor edi, edi
  6017 000048F6 668B3D[22FE0000]    <2> 	mov di, [memlistend]
  6018 000048FD 01F7                <2> 	add edi, esi
  6019                              <2> printmemmap:
  6020 000048FF 8B0E                <2> 	mov ecx, [esi]
  6021 00004901 E870E8FFFF          <2> 	call showhex
  6022 00004906 81C608000000        <2> 	add esi, 8
  6023 0000490C 8B0E                <2> 	mov ecx, [esi]
  6024 0000490E E863E8FFFF          <2> 	call showhex
  6025 00004913 81C608000000        <2> 	add esi, 8
  6026 00004919 8B0E                <2> 	mov ecx, [esi]
  6027 0000491B E856E8FFFF          <2> 	call showhex
  6028 00004920 81C608000000        <2> 	add esi, 8
  6029 00004926 57                  <2> 	push edi
  6030 00004927 56                  <2> 	push esi
  6031 00004928 BE[77890000]        <2> 	mov esi, line
  6032 0000492D E8F4D3FFFF          <2> 	call print
  6033 00004932 5E                  <2> 	pop esi
  6034 00004933 5F                  <2> 	pop edi
  6035 00004934 39FE                <2> 	cmp esi, edi
  6036 00004936 72C7                <2> 	jb printmemmap
  6037 00004938 C3                  <2> 	ret
  6038                              <2> 	
  6039                              <1> %include 'source/programs/pci.asm'
  6040 00004939 FF2C70636900        <2> db 255,44,"pci",0
  6041 0000493F E807190000          <2> 	call pcidump
  6042 00004944 C3                  <2> 	ret 
  6043                              <1> %ifdef network.included
  6044                              <1> 	%include 'source/programs/ping.asm'
  6045 00004945 FF2C70696E6700      <2> db 255,44,"ping",0
  6046                              <2> ping:
  6047 0000494C 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  6048 00004952 81C605000000        <2> 	add esi, 5
  6049 00004958 E8E63E0000          <2> 	call strtoip
  6050 0000495D 890D[E8490000]      <2> 	mov [.destip], ecx
  6051 00004963 E8213F0000          <2> 	call showip
  6052 00004968 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  6053 0000496E 890D[E4490000]      <2> 	mov [.sourceip]. ecx
  6054 00004974 31C0                <2> 	xor eax, eax
  6055 00004976 31DB                <2> 	xor ebx, ebx
  6056 00004978 66A3[E2490000]      <2> 	mov [.checksum], ax
  6057 0000497E 66A3[EE490000]      <2> 	mov [.icmpchecksum], ax
  6058 00004984 BF[D8490000]        <2> 	mov edi, .header
  6059 00004989 BE[EC490000]        <2> 	mov esi, .headerend
  6060 0000498E E8883E0000          <2> 	call getchecksum
  6061 00004993 66890D[E2490000]    <2> 	mov [.checksum], cx
  6062 0000499A BF[EC490000]        <2> 	mov edi, .icmp
  6063 0000499F BE[144A0000]        <2> 	mov esi, .packetend
  6064 000049A4 E8723E0000          <2> 	call getchecksum
  6065 000049A9 66890D[EE490000]    <2> 	mov [.icmpchecksum], cx
  6066 000049B0 BF[CA490000]        <2> 	mov edi, .packet
  6067 000049B5 BE[144A0000]        <2> 	mov esi, .packetend
  6068 000049BA E8523E0000          <2> 	call sendpacket
  6069 000049BF BE[77890000]        <2> 	mov esi, line
  6070 000049C4 E85DD3FFFF          <2> 	call print
  6071 000049C9 C3                  <2> 	ret
  6072                              <2> 	
  6073                              <2> 	
  6074                              <2> 	
  6075                              <2> .packet:
  6076 000049CA FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6077 000049D0 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6078 000049D6 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6079                              <2> .header:
  6080 000049D8 45                  <2> .version	db 0x45
  6081 000049D9 00                  <2> .services	db 0
  6082 000049DA 003C                <2> .length	db 0,0x3C
  6083 000049DC 0000                <2> .id		dw 0
  6084 000049DE 00                  <2> .flags	db 0
  6085 000049DF 00                  <2> .fragment db 0
  6086 000049E0 80                  <2> .ttl	db 128
  6087 000049E1 01                  <2> .protocol db 1 ;ICMP
  6088 000049E2 0000                <2> .checksum dw 0
  6089 000049E4 00000000            <2> .sourceip dd 0
  6090 000049E8 00000000            <2> .destip dd 0
  6091                              <2> .headerend:
  6092                              <2> .icmp:
  6093 000049EC 08                  <2> .icmptype db 8 ;Ping request
  6094 000049ED 00                  <2> .icmpcode db 0
  6095 000049EE 0000                <2> .icmpchecksum dw 0
  6096 000049F0 0001                <2> .icmpid db 0,1
  6097 000049F2 0000                <2> .sequence dw 0
  6098 000049F4 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6099 000049FD 6A6B6C6D6E6F707172- <2>
  6100 00004A06 737475767761626364- <2>
  6101 00004A0F 6566676869          <2>
  6102                              <2> .packetend:
  6103                              <1> %endif
  6104                              <1> %ifdef disk.none
  6105                              <1> %else
  6106                              <1> 	%include 'source/programs/play.asm'
  6107 00004A14 FF2C706C61796100    <2> db 255,44,"playa",0
  6108 00004A1C 8B3D[4F2F0000]      <2> 	mov edi, [currentcommandloc]
  6109 00004A22 81C706000000        <2> 	add edi, 6
  6110 00004A28 E827000000          <2> 	call playasync
  6111 00004A2D C3                  <2> 	ret
  6112 00004A2E FF2C706C617900      <2> db 255,44,"play",0
  6113                              <2> play:
  6114 00004A35 8B3D[4F2F0000]      <2> 	mov edi, [currentcommandloc]
  6115 00004A3B 81C705000000        <2> 	add edi, 5
  6116 00004A41 E80E000000          <2> 	call playasync
  6117                              <2> .waitforsound:
  6118                              <2> %ifdef sound.included
  6119                              <2> 	mov eax, [Length0]
  6120                              <2> 	or ax, [Length1]
  6121                              <2> %endif
  6122 00004A46 0A05[68020000]      <2> 	or al, [soundon]
  6123 00004A4C 3D00000000          <2> 	cmp eax, 0
  6124 00004A51 75F3                <2> 	jne .waitforsound
  6125 00004A53 C3                  <2> 	ret
  6126                              <2> playasync:
  6127 00004A54 BE0000C000          <2> 	mov esi, 0xC00000
  6128 00004A59 E8221B0000          <2> 	call loadfile
  6129 00004A5E 81FA94010000        <2> 	cmp edx, 404
  6130 00004A64 743F                <2> 	je nosoundfound
  6131 00004A66 BB0000C000          <2> 	mov ebx, 0xC00000
  6132 00004A6B 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6133 00004A72 0F845A000000        <2> 	je near wave_player
  6134 00004A78 66813B534E          <2> 	cmp word [ebx], "SN"
  6135 00004A7D 7526                <2> 	jne nosoundfound
  6136 00004A7F 81C306000000        <2> 	add ebx, 6
  6137 00004A85 891D[6B020000]      <2> 	mov [soundpos], ebx
  6138 00004A8B 035BFC              <2> 	add ebx, [ebx - 4]
  6139 00004A8E 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6140 00004A94 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6141 00004A9C 00                  <2>
  6142 00004A9D C605[68020000]01    <2> 	mov byte [soundon], 1
  6143 00004AA4 C3                  <2> 	ret
  6144                              <2> nosoundfound:
  6145 00004AA5 BE[CB4A0000]        <2> 	mov esi, notfoundsound
  6146 00004AAA E877D2FFFF          <2> 	call print
  6147 00004AAF 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  6148 00004AB5 81C605000000        <2> 	add esi, 5
  6149 00004ABB E866D2FFFF          <2> 	call print
  6150 00004AC0 BE[46890000]        <2> 	mov esi, notfound2
  6151 00004AC5 E85CD2FFFF          <2> 	call print
  6152 00004ACA C3                  <2> 	ret
  6153 00004ACB 706C61793A2000      <2> notfoundsound db "play: ",0
  6154                              <2> 
  6155                              <2> %ifdef sound.included
  6156                              <2> sbplay:
  6157                              <2> 		mov esi, 0xC00000
  6158                              <2> 		mov ebx, esi
  6159                              <2> 		add esi, WAVSTART
  6160                              <2> 		sub edi, esi
  6161                              <2> 		mov [Length1], di
  6162                              <2> 		shr edi, 15
  6163                              <2> 		mov [Length0], edi
  6164                              <2> 		mov ecx, [ebx + 24]
  6165                              <2> 		mov [Freq], ecx
  6166                              <2> 		xor eax, eax
  6167                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  6168                              <2> 		add edx, WAVSTART
  6169                              <2> 		add	eax, edx
  6170                              <2> 		mov esi, eax
  6171                              <2> 		xor ecx, ecx
  6172                              <2> 		xor ebx, ebx
  6173                              <2> 		mov [SegLoc], bx
  6174                              <2> 		add ebx, 0x80000
  6175                              <2> 		mov cx, 0xFFFF
  6176                              <2> 		cmp di, 0
  6177                              <2> 		jne .autoinit
  6178                              <2> 		mov cx, [Length1]
  6179                              <2> 		mov byte [OddLength], 1
  6180                              <2> 		cmp cx, 32768
  6181                              <2> 		jae .autoinit
  6182                              <2> 		mov byte [OddLength], 0
  6183                              <2> 		shl cx, 1
  6184                              <2> 		inc edi
  6185                              <2> .autoinit:
  6186                              <2> 		dec edi
  6187                              <2> 		mov [Length0], edi
  6188                              <2> 		mov [Length1], cx
  6189                              <2> 		shr cx, 1
  6190                              <2> 		inc cx
  6191                              <2> 		add eax, ecx
  6192                              <2> 		mov [NextMemLoc], eax
  6193                              <2> 		mov	[MemLoc], esi
  6194                              <2> 		call DMACopy
  6195                              <2> 		xor ebx, ebx
  6196                              <2> 		mov bx, [SegLoc]
  6197                              <2> 		xor ecx, ecx
  6198                              <2> 		mov cx, [Length1]
  6199                              <2> 		shr cx, 1
  6200                              <2> 		inc cx
  6201                              <2> 		add ebx, ecx
  6202                              <2> 		mov [SegLoc], bx
  6203                              <2> 		add ebx, 0x80000
  6204                              <2> 		mov esi, [NextMemLoc]
  6205                              <2> 		mov eax, esi
  6206                              <2> 		add eax, ecx
  6207                              <2> 		mov [NextMemLoc], eax
  6208                              <2> 		mov	[MemLoc], esi
  6209                              <2> 		call DMACopy
  6210                              <2> 		call DMAPlay
  6211                              <2> 		call PlayDSP
  6212                              <2> 		ret
  6213                              <2> WAVSTART equ 64;44
  6214                              <2> wave_player:
  6215                              <2> 	cmp byte [SoundBlaster], 1
  6216                              <2> 	je near sbplay
  6217                              <2> 	mov esi, nosoundblaster
  6218                              <2> 	call print
  6219                              <2> 	ret
  6220                              <2> %else
  6221                              <2> 	wave_player:
  6222 00004AD2 BE[DD4A0000]        <2> 		mov esi, nosoundblaster
  6223 00004AD7 E84AD2FFFF          <2> 		call print
  6224 00004ADC C3                  <2> 		ret
  6225                              <2> %endif
  6226 00004ADD 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6227 00004AE6 426C61737465722064- <2>
  6228 00004AEF 657465637465642E0A- <2>
  6229 00004AF8 00                  <2>
  6230                              <1> %endif
  6231                              <1> %include 'source/programs/pwd.asm'
  6232 00004AF9 FF2C70776400        <2> db 255,44,"pwd",0
  6233 00004AFF BE[32120100]        <2> 	mov esi, currentfolder
  6234 00004B04 E8FED1FFFF          <2> 	call printquiet
  6235 00004B09 BE[77890000]        <2> 	mov esi, line
  6236 00004B0E E813D2FFFF          <2> 	call print
  6237 00004B13 C3                  <2> 	ret
  6238                              <2> 	
  6239                              <1> %include 'source/programs/reboot.asm'
  6240 00004B14 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6241 00004B1D 0F011D[274B0000]    <2> 		lidt [idtreboot]
  6242 00004B24 CD00                <2> 		int 0
  6243 00004B26 F4                  <2> 		hlt
  6244                              <2> 	
  6245 00004B27 0000                <2> 	idtreboot dw 0
  6246 00004B29 00000000            <2> 			  dd 0
  6247                              <2> 
  6248                              <2> 	coldboot:
  6249 00004B2D 66B84000            <2> 		MOV AX, 0040h
  6250 00004B31 8EC0                <2> 		MOV ES, AX
  6251 00004B33 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6252 00004B3C 00                  <2>
  6253 00004B3D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6254 00004B44 CF                  <2> 		IRET
  6255                              <2> 
  6256                              <2> 	warmboot:
  6257 00004B45 66B84000            <2> 		MOV AX, 0040h
  6258 00004B49 8EC0                <2> 		MOV ES, AX
  6259 00004B4B 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6260 00004B54 12                  <2>
  6261 00004B55 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6262 00004B5C CF                  <2> 		IRET
  6263                              <2> 		
  6264                              <1> %include 'source/programs/reg.asm'
  6265 00004B5D FF2C72656700        <2> db 255,44,"reg",0
  6266 00004B63 CD03                <2> 	int 3
  6267 00004B65 C3                  <2> 	ret 
  6268                              <1> %ifdef disk.none
  6269                              <1> %else
  6270                              <1> 	%include 'source/programs/show.asm'
  6271                              <2> %ifdef gui.included
  6272 00004B66 FF2C73686F776700    <2> db 255,44,"showg",0
  6273 00004B6E 8B3D[4F2F0000]      <2> 		mov edi, [currentcommandloc]
  6274 00004B74 81C706000000        <2> 		add edi, 6
  6275 00004B7A BE00008000          <2> 		mov esi, 0x800000
  6276 00004B7F E8FC190000          <2> 		call loadfile
  6277 00004B84 BE00008000          <2> 		mov esi, 0x800000
  6278 00004B89 6631C9              <2> 		xor cx, cx
  6279 00004B8C 6631D2              <2> 		xor dx, dx
  6280 00004B8F E8C6280000          <2> 		call showstring2
  6281 00004B94 C3                  <2> 		ret
  6282                              <2> %endif
  6283 00004B95 FF2C73686F7700      <2> db 255,44,"show",0
  6284                              <2> showprog:
  6285 00004B9C 8B3D[4F2F0000]      <2> 		mov edi, [currentcommandloc]
  6286 00004BA2 81C705000000        <2> 		add edi, 5
  6287 00004BA8 BE00004000          <2> 		mov esi, 0x400000
  6288 00004BAD 803F26              <2> 		cmp byte [edi], '&'
  6289 00004BB0 741B                <2> 		je .nullfile
  6290 00004BB2 BE00008000          <2> 		mov esi, 0x800000
  6291 00004BB7 E8C4190000          <2> 		call loadfile
  6292 00004BBC 81FA94010000        <2> 		cmp edx, 404
  6293 00004BC2 0F8483000000        <2> 		je near filenotfound
  6294 00004BC8 BE00008000          <2> 		mov esi, 0x800000
  6295                              <2> .nullfile:
  6296                              <2> %ifdef gui.included
  6297 00004BCD 66813E424D          <2> 		cmp word [esi], "BM"
  6298 00004BD2 7410                <2> 		je bmpfound
  6299                              <2> %endif
  6300 00004BD4 E84DD1FFFF          <2> 		call print
  6301 00004BD9 BE[77890000]        <2> 		mov esi, line
  6302 00004BDE E843D1FFFF          <2> 		call print
  6303 00004BE3 C3                  <2> 		ret
  6304                              <2> %ifdef gui.included
  6305                              <2> bmpfound:
  6306 00004BE4 803D[DCFB0000]00    <2> 		cmp byte [guion], 0
  6307 00004BEB 0F8428000000        <2> 		je near noguibmp
  6308 00004BF1 BE00008000          <2> 		mov esi, 0x800000
  6309 00004BF6 31C9                <2> 		xor ecx, ecx
  6310 00004BF8 31D2                <2> 		xor edx, edx
  6311 00004BFA 31C0                <2> 		xor eax, eax
  6312 00004BFC 31DB                <2> 		xor ebx, ebx
  6313 00004BFE E8411B0000          <2> 		call showbmp
  6314 00004C03 30C0                <2> 		xor al, al
  6315 00004C05 B405                <2> 		mov ah, 5
  6316 00004C07 CD30                <2> 		int 30h
  6317 00004C09 E8AB210000          <2> 		call guiclear
  6318 00004C0E E88A1E0000          <2> 		call clearmousecursor
  6319 00004C13 E8F1210000          <2> 		call reloadallgraphics
  6320 00004C18 C3                  <2> 		ret
  6321                              <2> noguibmp:
  6322 00004C19 BE[244C0000]        <2> 		mov esi, warnguimsg
  6323 00004C1E E803D1FFFF          <2> 		call print
  6324 00004C23 C3                  <2> 		ret
  6325 00004C24 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6326 00004C2D 6E6F7420626520646F- <2>
  6327 00004C36 6E6520776974686F75- <2>
  6328 00004C3F 742074686520475549- <2>
  6329 00004C48 2E0A00              <2>
  6330                              <2> %endif
  6331                              <2> 
  6332                              <2> filenotfound:
  6333 00004C4B BE[7E4C0000]        <2> 		mov esi, filenf
  6334 00004C50 E8D1D0FFFF          <2> 		call print
  6335 00004C55 8B35[4F2F0000]      <2> 		mov esi, [currentcommandloc]
  6336                              <2> findfilenotfoundzero:
  6337 00004C5B 8A06                <2> 		mov al, [esi]
  6338 00004C5D 46                  <2> 		inc esi
  6339 00004C5E 3C00                <2> 		cmp al, 0
  6340 00004C60 7411                <2> 		je nofilenamenotfound
  6341 00004C62 81FE[A62C0100]      <2> 		cmp esi, buftxtend
  6342 00004C68 7309                <2> 		jae nofilenamenotfound
  6343 00004C6A 3C20                <2> 		cmp al, " "
  6344 00004C6C 75ED                <2> 		jne findfilenotfoundzero
  6345 00004C6E E8B3D0FFFF          <2> 		call print
  6346                              <2> nofilenamenotfound:
  6347 00004C73 BE[894C0000]        <2> 		mov esi, filenf2
  6348 00004C78 E8A9D0FFFF          <2> 		call print
  6349 00004C7D C3                  <2> 		ret
  6350 00004C7E 5468652066696C6520- <2> filenf db "The file ",34,0
  6351 00004C87 2200                <2>
  6352 00004C89 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6353 00004C92 6F7420626520666F75- <2>
  6354 00004C9B 6E642E0A00          <2>
  6355                              <1> %endif
  6356                              <1> %include 'source/programs/shush.asm'
  6357 00004CA0 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6358                              <2> shushprog:
  6359                              <2> %ifdef gui.included
  6360 00004CA8 803D[DCFB0000]00    <2> 	cmp byte [guion], 0
  6361 00004CAF 0F84B9000000        <2> 	je near .noswitchsize
  6362 00004CB5 8B35[4F2F0000]      <2> 	mov esi, [currentcommandloc]
  6363 00004CBB 81C606000000        <2> 	add esi, 6
  6364 00004CC1 56                  <2> 	push esi
  6365 00004CC2 4E                  <2> 	dec esi
  6366                              <2> .findspace:
  6367 00004CC3 46                  <2> 	inc esi
  6368 00004CC4 8A06                <2> 	mov al, [esi]
  6369 00004CC6 3C00                <2> 	cmp al, 0
  6370 00004CC8 0F84A0000000        <2> 	je near .noswitchsize
  6371 00004CCE 3C58                <2> 	cmp al, "X"
  6372 00004CD0 7408                <2> 	je .donefind
  6373 00004CD2 3C78                <2> 	cmp al, "x"
  6374 00004CD4 7404                <2> 	je .donefind
  6375 00004CD6 3C20                <2> 	cmp al, " "
  6376 00004CD8 75E9                <2> 	jne .findspace
  6377                              <2> .donefind:
  6378 00004CDA 30C0                <2> 	xor al, al
  6379 00004CDC 8806                <2> 	mov [esi], al
  6380 00004CDE 46                  <2> 	inc esi
  6381 00004CDF 89F7                <2> 	mov edi, esi
  6382 00004CE1 E83CE6FFFF          <2> 	call cnvrttxt
  6383 00004CE6 89C8                <2> 	mov eax, ecx
  6384 00004CE8 5E                  <2> 	pop esi
  6385 00004CE9 50                  <2> 	push eax
  6386 00004CEA 89F7                <2> 	mov edi, esi
  6387 00004CEC E831E6FFFF          <2> 	call cnvrttxt
  6388 00004CF1 89CB                <2> 	mov ebx, ecx
  6389 00004CF3 58                  <2> 	pop eax	
  6390 00004CF4 6681FB0000          <2> 	cmp bx, 0
  6391 00004CF9 0F846F000000        <2> 	je near .noswitchsize
  6392 00004CFF 663D0000            <2> 	cmp ax, 0
  6393 00004D03 0F8465000000        <2> 	je near .noswitchsize
  6394 00004D09 66C1E303            <2> 	shl bx, 3
  6395 00004D0D 66C1E004            <2> 	shl ax, 4
  6396 00004D11 663B1D[31570000]    <2> 	cmp bx, [resolutionx]
  6397 00004D18 7607                <2> 	jbe .nofixx
  6398 00004D1A 668B1D[31570000]    <2> 	mov bx, [resolutionx]
  6399                              <2> .nofixx:
  6400 00004D21 66051000            <2> 	add ax, 16
  6401 00004D25 663B05[33570000]    <2> 	cmp ax, [resolutiony]
  6402 00004D2C 7606                <2> 	jbe .nofixy
  6403 00004D2E 66A1[33570000]      <2> 	mov ax, [resolutiony]
  6404                              <2> .nofixy:
  6405 00004D34 662D1000            <2> 	sub ax, 16
  6406 00004D38 6631C9              <2> 	xor cx, cx
  6407 00004D3B 6631D2              <2> 	xor dx, dx
  6408 00004D3E 66891D[A7710000]    <2> 	mov [termwindow], bx
  6409 00004D45 66A3[A9710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6410 00004D4B BE[A7710000]        <2> 	mov esi, termwindow
  6411 00004D50 31DB                <2> 	xor ebx, ebx
  6412 00004D52 6631C0              <2> 	xor ax, ax
  6413 00004D55 E878290000          <2> 	call showwindow
  6414 00004D5A E85A200000          <2> 	call guiclear
  6415 00004D5F E86BD0FFFF          <2> 	call clear
  6416 00004D64 E8A0200000          <2> 	call reloadallgraphics
  6417 00004D69 E8E71D0000          <2> 	call switchmousepos2
  6418                              <2> .noswitchsize:
  6419                              <2> %endif
  6420 00004D6E BE[794D0000]        <2> 	mov esi, shushmsg
  6421 00004D73 E8AECFFFFF          <2> 	call print
  6422 00004D78 C3                  <2> 	ret
  6423 00004D79 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6424 00004D82 6F2074686520536F6C- <2>
  6425 00004D8B 6C65724F5320486172- <2>
  6426 00004D94 646C7920556E69782D- <2>
  6427 00004D9D 436F6D70617469626C- <2>
  6428 00004DA6 65205368656C6C210A- <2>
  6429 00004DAF 00                  <2>
  6430                              <1> %include 'source/programs/system.asm'
  6431 00004DB0 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6432 00004DB9 BE[B64E0000]        <2> 	mov esi, kernelinfomsg
  6433 00004DBE E844CFFFFF          <2> 	call printquiet
  6434 00004DC3 B9[DCF90000]        <2> 	mov ecx, osend
  6435 00004DC8 E873E4FFFF          <2> 	call showdec
  6436 00004DCD BE[CB4E0000]        <2> 	mov esi, diskbytemsg
  6437 00004DD2 E830CFFFFF          <2> 	call printquiet
  6438 00004DD7 B9[DCF90000]        <2> 	mov ecx, osend
  6439 00004DDC 81C1[5CEA0200]      <2> 	add ecx, commandbufend
  6440 00004DE2 81E9[DCFB0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6441 00004DE8 E853E4FFFF          <2> 	call showdec
  6442 00004DED BE[E24E0000]        <2> 	mov esi, membytemsg
  6443 00004DF2 E810CFFFFF          <2> 	call printquiet
  6444 00004DF7 BE[2D4F0000]        <2> 	mov esi, endofmemmsg
  6445 00004DFC E806CFFFFF          <2> 	call printquiet
  6446 00004E01 B9[701E1300]        <2> 	mov ecx, bssend
  6447 00004E06 E86BE3FFFF          <2> 	call showhex
  6448 00004E0B BE[FB4E0000]        <2> 	mov esi, systeminfomsg
  6449 00004E10 E8F2CEFFFF          <2> 	call printquiet
  6450                              <2> getcpuspeed:
  6451 00004E15 B8FE000000          <2> 	mov eax, 0xFE
  6452 00004E1A E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6453 00004E1C B020                <2> 	mov al, 0x20
  6454 00004E1E E620                <2> 	out 0x20, al
  6455 00004E20 F4                  <2> 	hlt
  6456 00004E21 0F31                <2> 	rdtsc
  6457 00004E23 89D6                <2> 	mov esi, edx
  6458 00004E25 89C7                <2> 	mov edi, eax
  6459 00004E27 31C0                <2> 	xor eax, eax
  6460 00004E29 C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6461                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6462 00004E30 40                  <2> 	inc eax
  6463 00004E31 EBFD                <2> 	jmp cpuspeedloop
  6464                              <2> cpuspeedloopend:
  6465 00004E33 0F31                <2> 	rdtsc
  6466 00004E35 29F8                <2> 	sub eax, edi
  6467 00004E37 29F2                <2> 	sub edx, esi
  6468 00004E39 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6469 00004E3F A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6470 00004E44 31C0                <2> 	xor eax, eax
  6471 00004E46 E621                <2> 	out 0x21, al
  6472 00004E48 B020                <2> 	mov al, 0x20
  6473 00004E4A E620                <2> 	out 0x20, al
  6474 00004E4C 31D2                <2> 	xor edx, edx
  6475 00004E4E 31C0                <2> 	xor eax, eax
  6476 00004E50 A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6477 00004E55 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6478                              <2> 				;result by 2
  6479 00004E57 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6480 00004E5D C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6481 00004E60 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6482 00004E62 89C1                <2> 	mov ecx, eax
  6483 00004E64 E8D7E3FFFF          <2> 	call showdec
  6484 00004E69 BE[114F0000]        <2> 	mov esi, cpuspeedmsg
  6485 00004E6E E894CEFFFF          <2> 	call printquiet
  6486 00004E73 31D2                <2> 	xor edx, edx
  6487 00004E75 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6488 00004E7A 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6489 00004E80 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6490 00004E86 C1EB0A              <2> 	shr ebx, 10
  6491 00004E89 F7F3                <2> 	div ebx
  6492 00004E8B 89C1                <2> 	mov ecx, eax
  6493 00004E8D E8AEE3FFFF          <2> 	call showdec
  6494 00004E92 BE[174F0000]        <2> 	mov esi, cpuclockmsg
  6495 00004E97 E86BCEFFFF          <2> 	call printquiet
  6496 00004E9C 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6497 00004EA2 C1E914              <2> 	shr ecx, 20
  6498 00004EA5 41                  <2> 	inc ecx	;the reading is one MB behind
  6499 00004EA6 E895E3FFFF          <2> 	call showdec
  6500 00004EAB BE[1C4F0000]        <2> 	mov esi, memoryspacemsg
  6501 00004EB0 E871CEFFFF          <2> 	call print
  6502                              <2> %ifdef sound.included
  6503                              <2> 	cmp byte [SoundBlaster], 0
  6504                              <2> 	je .nosb
  6505                              <2> 	mov esi, soundblastermsg
  6506                              <2> 	call print
  6507                              <2> .nosb:
  6508                              <2> %endif
  6509 00004EB5 C3                  <2> 	ret
  6510                              <2> 
  6511 00004EB6 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6512 00004EBF 666F726D6174696F6E- <2>
  6513 00004EC8 3A0A00              <2>
  6514 00004ECB 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6515 00004ED4 6B2053706163652055- <2>
  6516 00004EDD 7365640A00          <2>
  6517 00004EE2 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6518 00004EEB 6F7279205370616365- <2>
  6519 00004EF4 20557365640A00      <2>
  6520 00004EFB 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6521 00004F04 6E666F726D6174696F- <2>
  6522 00004F0D 6E3A0A00            <2>
  6523                              <2> %ifdef sound.included
  6524                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6525                              <2> %endif
  6526 00004F11 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6527 00004F17 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6528 00004F1C 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6529 00004F25 2053706163650A00    <2>
  6530 00004F2D 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6531 00004F36 6D6F72792053706163- <2>
  6532 00004F3F 653A20307800        <2>
  6533                              <1> %include 'source/programs/time.asm'
  6534 00004F45 082E30303030303030- <2> timenscache db 8,".000000000"
  6535 00004F4E 3030                <2>
  6536 00004F50 200A00              <2> timenscacheend: db " ",10,0
  6537 00004F53 00                  <2> istimeset db 0
  6538 00004F54 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6539 00004F5D 2063757272656E7420- <2>
  6540 00004F66 554E49582074696D65- <2>
  6541 00004F6F 3A0A00              <2>
  6542 00004F72 00<rept>            <2> timeinputbuffer times 12 db 0
  6543 00004F7E 00                  <2> timeinputbend: db 0
  6544                              <2> 
  6545 00004F7F FF2C74696D6500      <2> db 255,44,"time",0
  6546 00004F86 803D[534F0000]00    <2> 	cmp byte [istimeset], 0
  6547 00004F8D 753A                <2> 	jne timeisset
  6548 00004F8F BE[544F0000]        <2> 	mov esi, settimemsg
  6549 00004F94 E88DCDFFFF          <2> 	call print
  6550 00004F99 BE[724F0000]        <2> 	mov esi, timeinputbuffer
  6551 00004F9E BF[7E4F0000]        <2> 	mov edi, timeinputbend
  6552 00004FA3 E8A5CEFFFF          <2> 	call readline
  6553 00004FA8 BE[724F0000]        <2> 	mov esi, timeinputbuffer
  6554 00004FAD 31FF                <2> 	xor edi, edi
  6555 00004FAF E86EE3FFFF          <2> 	call cnvrttxt
  6556 00004FB4 890D[60020000]      <2> 	mov [timeseconds], ecx
  6557 00004FBA 31C9                <2> 	xor ecx, ecx
  6558 00004FBC 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6559 00004FC2 C605[534F0000]01    <2> 	mov byte [istimeset], 1
  6560                              <2> timeisset:
  6561 00004FC9 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6562 00004FCF E86CE2FFFF          <2> 	call showdec
  6563                              <2> 	
  6564 00004FD4 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6565 00004FDA BE[454F0000]        <2> 	mov esi, timenscache
  6566 00004FDF C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6567 00004FE6 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6568 00004FED C6460A30            <2> 	mov byte [esi + 10], "0"
  6569 00004FF1 BE[504F0000]        <2> 	mov esi, timenscacheend
  6570 00004FF6 E828E0FFFF          <2> 	call convert
  6571 00004FFB BE[454F0000]        <2> 	mov esi, timenscache
  6572 00005000 E802CDFFFF          <2> 	call printquiet
  6573                              <2> 	
  6574 00005005 E82D000000          <2> 	call time
  6575 0000500A BE[03520000]        <2> 	mov esi, timeshow
  6576 0000500F E8F3CCFFFF          <2> 	call printquiet
  6577 00005014 BE[77890000]        <2> 	mov esi, line
  6578 00005019 E8E9CCFFFF          <2> 	call printquiet
  6579 0000501E BE[0C520000]        <2> 	mov esi, dateshow
  6580 00005023 E8DFCCFFFF          <2> 	call printquiet
  6581 00005028 BE[77890000]        <2> 	mov esi, line
  6582 0000502D E8D5CCFFFF          <2> 	call printquiet
  6583 00005032 E9BC000000          <2> 	jmp findday
  6584                              <2> time:
  6585 00005037 E84F010000          <2> 	call tstackput1
  6586 0000503C B00A                <2> 	mov al,10			;Get RTC register A
  6587 0000503E E879010000          <2> 	call tget1
  6588 00005043 A880                <2> 	test al,0x80			;Is update in progress?
  6589 00005045 75F0                <2> 	jne time				; yes, wait
  6590                              <2> 
  6591 00005047 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6592 00005049 E86E010000          <2> 	call tget1
  6593 0000504E A2[FA510000]        <2> 	mov [RTCtimeSecond],al
  6594                              <2> 
  6595 00005053 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6596 00005055 E862010000          <2> 	call tget1
  6597 0000505A A2[FB510000]        <2> 	mov [RTCtimeMinute],al
  6598                              <2> 
  6599 0000505F B004                <2> 	mov al,0x04			;Get hours (see notes)
  6600 00005061 E856010000          <2> 	call tget1
  6601 00005066 A2[FC510000]        <2> 	mov [RTCtimeHour],al
  6602                              <2> 
  6603 0000506B B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6604 0000506D E84A010000          <2> 	call tget1
  6605 00005072 A2[FD510000]        <2> 	mov [RTCtimeDay],al
  6606                              <2> 
  6607 00005077 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6608 00005079 E83E010000          <2> 	call tget1
  6609 0000507E A2[FE510000]        <2> 	mov [RTCtimeMonth],al
  6610                              <2> 
  6611 00005083 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6612 00005085 E832010000          <2> 	call tget1
  6613 0000508A A2[FF510000]        <2> 	mov [RTCtimeYear],al
  6614                              <2> 	
  6615 0000508F BE[03520000]        <2> 	mov esi, timeshow
  6616 00005094 8A2D[FC510000]      <2> 	mov ch, [RTCtimeHour]
  6617 0000509A E828010000          <2> 	call tput1
  6618 0000509F 8A2D[FB510000]      <2> 	mov ch, [RTCtimeMinute]
  6619 000050A5 E81D010000          <2> 	call tput1
  6620 000050AA 8A2D[FA510000]      <2> 	mov ch, [RTCtimeSecond]
  6621 000050B0 E812010000          <2> 	call tput1
  6622 000050B5 BE[0C520000]        <2> 	mov esi, dateshow
  6623 000050BA 8A2D[FE510000]      <2> 	mov ch, [RTCtimeMonth]
  6624 000050C0 E802010000          <2> 	call tput1
  6625 000050C5 8A2D[FD510000]      <2> 	mov ch, [RTCtimeDay]
  6626 000050CB E8F7000000          <2> 	call tput1
  6627 000050D0 B520                <2> 	mov ch, 0x20
  6628 000050D2 E8F0000000          <2> 	call tput1
  6629 000050D7 4E                  <2> 	dec esi
  6630 000050D8 8A2D[FF510000]      <2> 	mov ch, [RTCtimeYear]
  6631 000050DE E8E4000000          <2> 	call tput1
  6632 000050E3 E8BD000000          <2> 	call tstackget1
  6633 000050E8 C3                  <2> 	ret
  6634 000050E9 BE[03520000]        <2> 	mov esi, timeshow
  6635 000050EE E833CCFFFF          <2> 	call print
  6636                              <2> ;;get day of week
  6637                              <2> ;;add these:
  6638                              <2> ;;century value
  6639                              <2> ;;last 2 digits of year
  6640                              <2> ;;last 2 digits of year right shifted twice
  6641                              <2> ;;month table value
  6642                              <2> ;;day of the month
  6643                              <2> ;;divide these by 7
  6644                              <2> ;;the remainder is the day
  6645                              <2> findday:
  6646 000050F3 31C0                <2> 	xor eax, eax
  6647                              <2> ;;first convert the values from BCD to hex
  6648 000050F5 A0[FD510000]        <2> 	mov al, [RTCtimeDay]
  6649 000050FA E873000000          <2> 	call converttohex
  6650 000050FF 8825[00520000]      <2> 	mov [dayhex], ah
  6651 00005105 A0[FE510000]        <2> 	mov al, [RTCtimeMonth]
  6652 0000510A E863000000          <2> 	call converttohex
  6653 0000510F 8825[01520000]      <2> 	mov [monthhex], ah
  6654 00005115 A0[FF510000]        <2> 	mov al, [RTCtimeYear]
  6655 0000511A E853000000          <2> 	call converttohex
  6656 0000511F 8825[02520000]      <2> 	mov [yearhex], ah
  6657 00005125 31C0                <2> 	xor eax, eax
  6658 00005127 A0[02520000]        <2> 	mov al, [yearhex]
  6659 0000512C C0E802              <2> 	shr al, 2
  6660 0000512F 0205[02520000]      <2> 	add al, [yearhex]
  6661 00005135 0506000000          <2> 	add eax, 6
  6662 0000513A 31DB                <2> 	xor ebx, ebx
  6663 0000513C 8A1D[01520000]      <2> 	mov bl, [monthhex]
  6664 00005142 FECB                <2> 	dec bl
  6665 00005144 81C3[21520000]      <2> 	add ebx, month
  6666 0000514A 31C9                <2> 	xor ecx, ecx
  6667 0000514C 8A0B                <2> 	mov cl, [ebx]
  6668 0000514E 01C8                <2> 	add eax, ecx
  6669 00005150 8A0D[00520000]      <2> 	mov cl, [dayhex]
  6670 00005156 01C8                <2> 	add eax, ecx
  6671 00005158 66BB0700            <2> 	mov bx, 7
  6672 0000515C 31D2                <2> 	xor edx, edx
  6673 0000515E 66F7F3              <2> 	div bx
  6674 00005161 C1E202              <2> 	shl edx, 2
  6675 00005164 81C2[2D520000]      <2> 	add edx, day
  6676 0000516A 8B32                <2> 	mov esi, [edx]
  6677 0000516C E8B5CBFFFF          <2> 	call print
  6678 00005171 C3                  <2> 	ret
  6679                              <2> 	
  6680                              <2> converttohex:
  6681 00005172 88C4                <2> 	mov ah, al
  6682 00005174 C0E804              <2> 	shr al, 4
  6683 00005177 C0E404              <2> 	shl ah, 4
  6684 0000517A C0EC04              <2> 	shr ah, 4
  6685 0000517D 3C00                <2> 	cmp al, 0
  6686 0000517F 7409                <2> 	je noconverttohex
  6687                              <2> converttohexlp:
  6688 00005181 80C40A              <2> 	add ah, 10
  6689 00005184 FEC8                <2> 	dec al
  6690 00005186 3C00                <2> 	cmp al, 0
  6691 00005188 75F7                <2> 	jne converttohexlp
  6692                              <2> noconverttohex:
  6693 0000518A C3                  <2> 	ret
  6694                              <2> 	
  6695                              <2> tstackput1:
  6696 0000518B 8935[F6510000]      <2> 	mov [tstack + 20], esi
  6697 00005191 BE[E2510000]        <2> 	mov esi, tstack
  6698 00005196 8906                <2> 	mov [esi], eax
  6699 00005198 895E04              <2> 	mov [esi + 4], ebx
  6700 0000519B 894E08              <2> 	mov [esi + 8], ecx
  6701 0000519E 89560C              <2> 	mov [esi + 12], edx
  6702 000051A1 897E10              <2> 	mov [esi + 16], edi
  6703 000051A4 C3                  <2> 	ret
  6704                              <2> 	
  6705                              <2> tstackget1:
  6706 000051A5 BE[E2510000]        <2> 	mov esi, tstack
  6707 000051AA 8B06                <2> 	mov eax, [esi]
  6708 000051AC 8B5E04              <2> 	mov ebx, [esi + 4]
  6709 000051AF 8B4E08              <2> 	mov ecx, [esi + 8]
  6710 000051B2 8B560C              <2> 	mov edx, [esi + 12]
  6711 000051B5 8B7E10              <2> 	mov edi, [esi + 16]
  6712 000051B8 8B7614              <2> 	mov esi, [esi + 20]
  6713 000051BB C3                  <2> 	ret
  6714                              <2> 	
  6715                              <2> tget1:
  6716 000051BC 66BA7000            <2> 	mov dx, 0x70
  6717 000051C0 EE                  <2> 	out dx, al
  6718 000051C1 6642                <2> 	inc dx
  6719 000051C3 EC                  <2> 	in al, dx
  6720 000051C4 664A                <2> 	dec dx
  6721 000051C6 C3                  <2> 	ret
  6722                              <2> 	
  6723                              <2> tput1:
  6724 000051C7 66C1E904            <2> 	shr cx, 4
  6725 000051CB B030                <2> 	mov al, 48
  6726 000051CD 00E8                <2> 	add al, ch
  6727 000051CF 8806                <2> 	mov [esi], al
  6728 000051D1 46                  <2> 	inc esi
  6729 000051D2 B030                <2> 	mov al, 48
  6730 000051D4 C0E904              <2> 	shr cl, 4
  6731 000051D7 00C8                <2> 	add al, cl
  6732 000051D9 8806                <2> 	mov [esi], al
  6733 000051DB 81C602000000        <2> 	add esi, 2
  6734 000051E1 C3                  <2> 	ret
  6735                              <2> 		
  6736 000051E2 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6737 000051EB 000000000000000000- <2>
  6738 000051F4 000000000000        <2>
  6739 000051FA 00                  <2> 	RTCtimeSecond db 0
  6740 000051FB 00                  <2> 	RTCtimeMinute db 0
  6741 000051FC 00                  <2> 	RTCtimeHour db 0
  6742 000051FD 00                  <2> 	RTCtimeDay db 0
  6743 000051FE 00                  <2> 	RTCtimeMonth db 0
  6744 000051FF 00                  <2> 	RTCtimeYear db 0
  6745 00005200 00                  <2> 	dayhex db 0
  6746 00005201 00                  <2> 	monthhex db 0
  6747 00005202 00                  <2> 	yearhex db 0
  6748 00005203 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6749 0000520C 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6750 00005215 302000              <2>
  6751                              <2> 	oldcentury:	;;from 1700 to 1900
  6752 00005218 040200              <2> 	db 4,2,0
  6753                              <2> 	century:	;;from 2000 to 2500
  6754 0000521B 060402000604        <2> 	db 6,4,2,0,6,4
  6755                              <2> 	month:
  6756 00005221 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6757 0000522A 000305              <2>
  6758                              <2> 	day:
  6759 0000522D [49520000]          <2> 	dd sunday
  6760 00005231 [51520000]          <2> 	dd monday
  6761 00005235 [59520000]          <2> 	dd tuesday
  6762 00005239 [62520000]          <2> 	dd wednesday
  6763 0000523D [6D520000]          <2> 	dd thursday
  6764 00005241 [77520000]          <2> 	dd friday
  6765 00005245 [7F520000]          <2> 	dd saturday
  6766                              <2> sunday:
  6767 00005249 53756E6461790A00    <2> 	db "Sunday",10,0
  6768                              <2> monday:
  6769 00005251 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6770                              <2> tuesday:
  6771 00005259 547565736461790A00  <2> 	db "Tuesday",10,0
  6772                              <2> wednesday:
  6773 00005262 5765646E6573646179- <2> 	db "Wednesday",10,0
  6774 0000526B 0A00                <2>
  6775                              <2> thursday:
  6776 0000526D 54687572736461790A- <2> 	db "Thursday",10,0
  6777 00005276 00                  <2>
  6778                              <2> friday:
  6779 00005277 4672696461790A00    <2> 	db "Friday",10,0
  6780                              <2> saturday:
  6781 0000527F 53617475726461790A- <2> 	db "Saturday",10,0
  6782 00005288 00                  <2>
  6783                              <1> %include 'source/programs/turnoff.asm'
  6784 00005289 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6785 00005292 00                  <2>
  6786                              <2> 	turnoff:
  6787 00005293 66BB[AE52]          <2> 			mov bx, shutdown
  6788 00005297 66891D[D70C0000]    <2> 			mov [realmodeptr], bx
  6789 0000529E BB[D8520000]        <2> 			mov ebx, halt
  6790 000052A3 891D[D30C0000]      <2> 			mov [realmodereturn], ebx
  6791 000052A9 E90EB9FFFF          <2> 			jmp realmode
  6792                              <2> 
  6793                              <2> [BITS 16]
  6794                              <2> 		shutdown:
  6795 000052AE B453                <2> 			mov ah, 0x53
  6796 000052B0 B004                <2> 			mov al, 4
  6797 000052B2 31DB                <2> 			xor bx, bx
  6798 000052B4 CD15                <2> 			int 0x15
  6799                              <2> 			
  6800 000052B6 B453                <2> 			mov ah, 0x53
  6801 000052B8 B001                <2> 			mov al, 1
  6802 000052BA 31DB                <2> 			xor bx, bx
  6803 000052BC CD15                <2> 			int 0x15
  6804                              <2> 			
  6805 000052BE B453                <2> 			mov ah, 0x53
  6806 000052C0 B008                <2> 			mov al, 8
  6807 000052C2 BB0100              <2> 			mov bx, 1
  6808 000052C5 B90100              <2> 			mov cx, 1
  6809 000052C8 CD15                <2> 			int 0x15
  6810                              <2> 			
  6811 000052CA B453                <2> 			mov ah, 0x53
  6812 000052CC B007                <2> 			mov al, 7
  6813 000052CE BB0100              <2> 			mov bx, 1
  6814 000052D1 B90300              <2> 			mov cx, 3
  6815 000052D4 CD15                <2> 			int 0x15
  6816 000052D6 EBFE                <2> 			jmp $
  6817                              <2> 			[BITS 32]
  6818 000052D8 EBFE                <2> halt: jmp $
  6819                              <1> %include 'source/programs/wait.asm'
  6820 000052DA FF2C7761697400      <2> db 255,44,"wait",0
  6821                              <2> waitkey:
  6822 000052E1 E81AD0FFFF          <2> 		call getchar
  6823 000052E6 C3                  <2> 		ret
  6824                              <1> %include 'source/programs/while.asm'
  6825 000052E7 FF2C7768696C6500    <2> db 255,44,"while",0
  6826 000052EF 30C0                <2> whilecmd:  xor al, al
  6827 000052F1 3805[A0140100]      <2> 	cmp [BATCHISON], al
  6828 000052F7 0F8450E7FFFF        <2> 	je near notbatch
  6829 000052FD 8B35[9C140100]      <2> 	mov esi, [BATCHPOS]
  6830 00005303 81EE02000000        <2> 	sub esi, 2
  6831 00005309 4E                  <2> whilefnd: dec esi
  6832 0000530A 8A06                <2> 	mov al, [esi]
  6833 0000530C 3C0A                <2> 	cmp al, 10
  6834 0000530E 0F840A000000        <2> 	je near whilefnd2
  6835 00005314 3C00                <2> 	cmp al, 0
  6836 00005316 0F8402000000        <2> 	je near whilefnd2
  6837 0000531C EBEB                <2> 	jmp whilefnd
  6838                              <2> whilefnd2:
  6839 0000531E 46                  <2> 	inc esi
  6840 0000531F 8935[A2140100]      <2> 	mov [LOOPPOS], esi
  6841 00005325 C605[A1140100]01    <2> 	mov BYTE [LOOPON], 1
  6842 0000532C BE[A6280100]        <2> 	mov esi, buftxt
  6843 00005331 BB[A6280100]        <2> 	mov ebx, buftxt
  6844 00005336 81C306000000        <2> 	add ebx, 6
  6845 0000533C E9FDF1FFFF          <2> 	jmp chkeqsn
  6846                              <1> progend:		;programs end here	
  6847                              <1> batchprogend:
  6848                                  	%include "source/hardware.asm"
  6849                              <1> %ifdef gui.included
  6850                              <1> 	%include "source/drivers/video/vesa.asm"
  6851                              <2> [BITS 16]
  6852                              <2> guiswitch:
  6853 00005341 81F90000            <2> 	cmp cx, 0
  6854 00005345 750B                <2> 	jne guiswitchdefnum
  6855 00005347 B81200              <2> 	mov ax, 12h
  6856 0000534A 31DB                <2> 	xor bx, bx
  6857 0000534C CD10                <2> 	int 10h
  6858 0000534E E85100              <2> 	call guiloadagain
  6859                              <2> guiswitchnocando:
  6860 00005351 C3                  <2> 	ret	;return without switching as mode number is bad
  6861                              <2> guiswitchdefnum:	;switch to a defined mode number
  6862 00005352 B8004F              <2> 	mov ax, 0x4F00
  6863 00005355 BF[1F55]            <2> 	mov di, VBEMODEBLOCK
  6864 00005358 CD10                <2> 	int 10h
  6865 0000535A BE[4155]            <2> 	mov si, reserved
  6866 0000535D 81EE0200            <2> 	sub si, 2
  6867                              <2> .loop:
  6868 00005361 81C60200            <2> 	add si, 2
  6869 00005365 81FE[1F56]          <2> 	cmp si, oemdata
  6870 00005369 74E6                <2> 	je guiswitchnocando
  6871 0000536B 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6872 0000536F 74E0                <2> 	je guiswitchnocando
  6873 00005371 390C                <2> 	cmp [si], cx
  6874 00005373 75EC                <2> 	jne .loop
  6875 00005375 8936[7954]          <2> 	mov [videomodecache], si
  6876 00005379 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6877 0000537D B8014F              <2> 	mov ax, 0x4F01
  6878 00005380 BF[1F57]            <2> 	mov di, VBEMODEINFOBLOCK
  6879 00005383 890E[7754]          <2> 	mov [vesamode], cx
  6880 00005387 CD10                <2> 	int 10h
  6881 00005389 E9CB00              <2> 	jmp selectedvesa
  6882                              <2> guiload:
  6883 0000538C BE[F754]            <2> 	mov si, bootmsg
  6884 0000538F E8E8AC              <2> 	call printrm
  6885 00005392 31C0                <2> 	xor ax, ax
  6886 00005394 CD16                <2> 	int 16h
  6887 00005396 3C79                <2> 	cmp al, "y"
  6888 00005398 0F8598AC            <2> 	jne near vgaset
  6889 0000539C BE[7689]            <2> 	mov si, crlf
  6890 0000539F E8D8AC              <2> 	call printrm
  6891                              <2> guiloadagain:
  6892 000053A2 B8004F              <2> 	mov ax, 04F00h
  6893 000053A5 BF[1F55]            <2> 	mov di, VBEMODEBLOCK
  6894 000053A8 CD10                <2> 	int 10h
  6895 000053AA BE[4155]            <2> 	mov si, reserved
  6896 000053AD 81EE0200            <2> 	sub si, 2
  6897                              <2> findvideomodes:
  6898 000053B1 81C60200            <2> 	add si, 2
  6899 000053B5 8B0C                <2> 	mov cx, [si]
  6900 000053B7 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6901 000053BB 0F840A00            <2> 	je near nextvmode
  6902 000053BF 81FE[1F56]          <2> 	cmp si, oemdata
  6903 000053C3 0F836DAC            <2> 	jae near vgaset	;;kill if no valid list is found
  6904 000053C7 EBE8                <2> 	jmp findvideomodes 	
  6905                              <2> ;;debug,shows vmodes available
  6906                              <2> nextvmode:
  6907 000053C9 81EE0200            <2> 	sub si, 2
  6908 000053CD 81FE[4155]          <2> 	cmp si, reserved
  6909 000053D1 0F82CDFF            <2> 	jb near guiloadagain
  6910 000053D5 8B0C                <2> 	mov cx, [si]
  6911 000053D7 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6912 000053DB 0F84EAFF            <2> 	je near nextvmode
  6913 000053DF 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6914 000053E3 B8014F              <2> 	mov ax, 04F01h
  6915 000053E6 BF[1F57]            <2> 	mov di, VBEMODEINFOBLOCK
  6916 000053E9 890E[7754]          <2> 	mov [vesamode], cx
  6917 000053ED CD10                <2> 	int 10h
  6918 000053EF A0[3857]            <2> 	mov al, [bitsperpixel]
  6919 000053F2 3C10                <2> 	cmp al, 16
  6920 000053F4 75D3                <2> 	jne nextvmode
  6921 000053F6 8936[7954]          <2> 	mov [videomodecache], si
  6922 000053FA 84E4                <2> 	test ah, ah
  6923 000053FC 0F842200            <2> 	jz near setvesamode
  6924 00005400 EBC7                <2> 	jmp nextvmode
  6925 00005402 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6926 0000540B 20766964656F206D6F- <2>
  6927 00005414 6465204F4B3F28792F- <2>
  6928 0000541D 6E290D0A00          <2>
  6929                              <2> setvesamode:
  6930 00005422 8B0E[3157]          <2> 	mov cx, [resolutionx]
  6931 00005426 E85900              <2> 	call decshow
  6932 00005429 B078                <2> 	mov al, "x"
  6933 0000542B E8C100              <2> 	call char
  6934 0000542E 8B0E[3357]          <2> 	mov cx, [resolutiony]
  6935 00005432 E84D00              <2> 	call decshow
  6936 00005435 B040                <2> 	mov al, "@"
  6937 00005437 E8B500              <2> 	call char
  6938 0000543A 31C9                <2> 	xor cx, cx
  6939 0000543C 8A0E[3857]          <2> 	mov cl, [bitsperpixel]
  6940 00005440 E83F00              <2> 	call decshow
  6941 00005443 BE[0254]            <2> 	mov si, isthisvideook
  6942 00005446 E831AC              <2> 	call printrm
  6943 00005449 31C0                <2> 	xor ax, ax
  6944 0000544B CD16                <2> 	int 16h
  6945 0000544D 8B36[7954]          <2> 	mov si, [videomodecache]
  6946 00005451 3C79                <2> 	cmp al, "y"
  6947 00005453 0F8572FF            <2> 	jne near nextvmode
  6948                              <2> selectedvesa:
  6949 00005457 8B16[3157]          <2> 	mov dx, [resolutionx]
  6950 0000545B 01D2                <2> 	add dx, dx
  6951 0000545D 8916[1F58]          <2> 	mov [resolutionx2], dx
  6952 00005461 31D2                <2> 	xor dx, dx
  6953 00005463 31C9                <2> 	xor cx, cx
  6954 00005465 B8024F              <2> 	mov ax, 04F02h
  6955 00005468 8B1E[7754]          <2> 	mov bx, [vesamode]
  6956 0000546C CD10                <2> 	int 10h		;;enter VESA mode
  6957 0000546E C606[DCFB]01        <2> 	mov byte [guion], 1
  6958 00005473 E8CEAB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6959 00005476 C3                  <2> 	ret
  6960                              <2> 	
  6961 00005477 0000                <2> vesamode dw 0
  6962 00005479 0000                <2> videomodecache dw 0
  6963                              <2> 
  6964 0000547B 0000000000          <2> dcnm db 0,0,0,0,0
  6965 00005480 0000                <2> dcnmend db 0,0
  6966                              <2> 
  6967                              <2> 
  6968                              <2> decshow:
  6969 00005482 BE[7B54]            <2> 	mov si, dcnm
  6970                              <2> decclear:
  6971 00005485 B030                <2> 	mov al, "0"
  6972 00005487 8804                <2> 	mov [si], al
  6973 00005489 46                  <2> 	inc si
  6974 0000548A 81FE[8054]          <2> 	cmp si, dcnmend
  6975 0000548E 76F5                <2> 	jbe decclear
  6976 00005490 4E                  <2> 	dec si
  6977 00005491 E81500              <2> 	call convertrm
  6978 00005494 BE[7B54]            <2> 	mov si, dcnm
  6979                              <2> dectst:
  6980 00005497 8A04                <2> 	mov al, [si]
  6981 00005499 46                  <2> 	inc si
  6982 0000549A 81FE[8054]          <2> 	cmp si, dcnmend
  6983 0000549E 7704                <2> 	ja dectstend
  6984 000054A0 3C30                <2> 	cmp al, "0"
  6985 000054A2 76F3                <2> 	jbe dectst
  6986                              <2> dectstend:
  6987 000054A4 4E                  <2> 	dec si
  6988 000054A5 E8D2AB              <2> 	call printrm
  6989 000054A8 C3                  <2> 	ret
  6990                              <2> 	
  6991                              <2> 	
  6992                              <2> convertrm:
  6993 000054A9 4E                  <2> 	dec si
  6994 000054AA 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6995                              <2> cnvrtrm:
  6996 000054AC 89DE                <2> 	mov si, bx
  6997 000054AE 81EE0300            <2> 	sub si, 3
  6998 000054B2 46                  <2> ten3rm:	inc si
  6999 000054B3 81F9E803            <2> 	cmp cx, 1000
  7000 000054B7 7208                <2> 	jb ten2rm
  7001 000054B9 81E9E803            <2> 	sub cx, 1000
  7002 000054BD FE04                <2> 	inc byte [si]
  7003 000054BF EBEB                <2> 	jmp cnvrtrm
  7004 000054C1 46                  <2> ten2rm:	inc si
  7005 000054C2 81F96400            <2> 	cmp cx, 100
  7006 000054C6 7208                <2> 	jb ten1rm
  7007 000054C8 81E96400            <2> 	sub cx, 100
  7008 000054CC FE04                <2> 	inc byte [si]
  7009 000054CE EBDC                <2> 	jmp cnvrtrm
  7010 000054D0 46                  <2> ten1rm:	inc si
  7011 000054D1 81F90A00            <2> 	cmp cx, 10
  7012 000054D5 7208                <2> 	jb ten0rm
  7013 000054D7 81E90A00            <2> 	sub cx, 10
  7014 000054DB FE04                <2> 	inc byte [si]
  7015 000054DD EBCD                <2> 	jmp cnvrtrm
  7016 000054DF 46                  <2> ten0rm:	inc si
  7017 000054E0 81F90100            <2> 	cmp cx, 1
  7018 000054E4 7208                <2> 	jb tendnrm
  7019 000054E6 81E90100            <2> 	sub cx, 1
  7020 000054EA FE04                <2> 	inc byte [si]
  7021 000054EC EBBE                <2> 	jmp cnvrtrm
  7022                              <2> tendnrm:
  7023 000054EE C3                  <2> 	ret
  7024                              <2> 
  7025                              <2>     char: 		    ;char must be in al
  7026 000054EF BB0700              <2>        mov bx, 07
  7027 000054F2 B40E                <2> 	   mov ah, 0Eh
  7028 000054F4 CD10                <2> 	   int 10h
  7029 000054F6 C3                  <2> 	   ret
  7030                              <2> 
  7031 000054F7 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7032 00005500 20746865204755493F- <2>
  7033 00005509 28792F6E2900        <2>
  7034                              <2> 
  7035                              <2> 
  7036                              <2> mcursor:
  7037 0000550F 01                  <2> 	db	00000001b
  7038 00005510 81                  <2> 	db	10000001b
  7039 00005511 C1                  <2> 	db	11000001b
  7040 00005512 E1                  <2> 	db	11100001b
  7041 00005513 F1                  <2> 	db	11110001b
  7042 00005514 F9                  <2> 	db	11111001b
  7043 00005515 FD                  <2> 	db	11111101b
  7044 00005516 FF                  <2> 	db	11111111b
  7045 00005517 F9                  <2> 	db	11111001b
  7046 00005518 B9                  <2> 	db	10111001b
  7047 00005519 39                  <2> 	db	00111001b
  7048 0000551A 1C                  <2> 	db	00011100b
  7049 0000551B 1C                  <2> 	db	00011100b
  7050 0000551C 0E                  <2> 	db	00001110b
  7051 0000551D 0E                  <2> 	db	00001110b
  7052 0000551E 0C                  <2> 	db	00001100b
  7053                              <2> mcursorend:
  7054                              <2> 
  7055                              <2> 
  7056                              <2> VBEMODEBLOCK:
  7057 0000551F 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7058 00005523 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7059 00005525 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7060 00005529 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7061 0000552D 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7062 00005531 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7063 00005533 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7064 00005535 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7065 00005539 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7066 0000553D 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7067 00005541 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7068 0000561F 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7069                              <2> 
  7070                              <2> VBEMODEINFOBLOCK:
  7071                              <2> ;Mandatory information for all VBE revision
  7072 0000571F 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7073 00005721 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7074 00005722 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7075 00005723 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7076 00005725 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7077 00005727 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7078 00005729 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7079 0000572B 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7080 0000572F 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7081                              <2> 
  7082                              <2> ;Mandatory information for VBE 1.2 and above
  7083 00005731 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7084 00005733 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7085 00005735 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7086 00005736 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7087 00005737 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7088 00005738 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7089 00005739 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7090 0000573A 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7091 0000573B 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7092 0000573C 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7093 0000573D 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7094                              <2> 
  7095                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7096 0000573E 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7097 0000573F 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7098 00005740 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7099 00005741 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7100 00005742 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7101 00005743 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7102 00005744 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7103 00005745 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7104 00005746 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7105                              <2> 
  7106                              <2> ;Mandatory information for VBE 2.0 and above
  7107 00005747 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7108 0000574B 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7109 0000574F 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7110 00005751 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7111                              <2> 
  7112 0000581F 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7113                              <2> VBEEND:
  7114                              <2> [BITS 32]
  7115                              <1> 	%include "source/drivers/input/mouse.asm"
  7116 00005823 00                  <2> mousedisabled db 0
  7117                              <2> 	
  7118                              <2> 	cursorgui:
  7119 00005824 803D[78840000]01    <2> 		cmp byte [mouseon], 1
  7120 0000582B 0F8432000000        <2> 		je near mousedaemon
  7121 00005831 803D[DCFB0000]00    <2> 		cmp byte [guion], 0
  7122 00005838 0F84D2040000        <2> 		je near entdown
  7123                              <2> 	initmouse:
  7124 0000583E 803D[DCFB0000]00    <2> 		cmp byte [guion], 0
  7125 00005845 7405                <2> 		je noswmsposinit
  7126 00005847 E809130000          <2> 		call switchmousepos2
  7127                              <2> 	noswmsposinit:
  7128 0000584C E85D020000          <2> 	  	call PS2SET
  7129 00005851 E886020000          <2> 		call ACTMOUS
  7130 00005856 C605[78840000]01    <2> 		mov byte [mouseon],1
  7131 0000585D E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7132                              <2> 		;call GETB
  7133                              <2> 				;;If the bytes are mixed up,
  7134                              <2> 				;;remove this line or add another of this line.
  7135                              <2> 	nomouse:
  7136 00005862 C3                  <2> 		ret
  7137                              <2> 		
  7138                              <2> 	mousedaemon:
  7139 00005863 803D[78840000]01    <2> 		cmp byte [mouseon], 1
  7140 0000586A 75D2                <2> 		jne initmouse
  7141 0000586C E464                <2> 		in al, 64h ; Status
  7142 0000586E A820                <2> 		test al, 20h ; PS2-Mouse?
  7143 00005870 0F8502000000        <2> 		jnz near moused
  7144 00005876 F4                  <2> 		hlt
  7145 00005877 C3                  <2> 		ret
  7146                              <2> 	moused:
  7147 00005878 803D[23580000]01    <2> 		cmp byte [mousedisabled], 1
  7148 0000587F 74E1                <2> 		je nomouse
  7149 00005881 E87B020000          <2> 		  call GETB
  7150 00005886 88C3                <2> 		  mov  bl, al
  7151 00005888 80E301              <2> 		  and  bl, 1
  7152 0000588B 881D[265B0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7153 00005891 88C3                <2> 		  mov  bl, al
  7154 00005893 80E302              <2> 		  and  bl, 2
  7155 00005896 D0EB                <2> 		  shr  bl, 1
  7156 00005898 881D[275B0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7157 0000589E 88C3                <2> 		  mov  bl, al
  7158 000058A0 80E304              <2> 		  and  bl, 4
  7159 000058A3 C0EB02              <2> 		  shr  bl, 2
  7160 000058A6 881D[285B0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7161 000058AC E850020000          <2> 		  call GETB
  7162 000058B1 A2[295B0000]        <2> 		  mov  BYTE [XCOORD], al
  7163 000058B6 E846020000          <2> 		  call GETB
  7164 000058BB A2[2A5B0000]        <2> 		  mov  BYTE [YCOORD], al
  7165                              <2> 
  7166                              <2> 	showpixelcursor:
  7167 000058C0 668B15[155A0000]    <2> 		mov dx, [mousecursorposition]
  7168 000058C7 668B0D[175A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7169 000058CE 668915[115A0000]    <2> 		mov [lastmouseposition], dx
  7170 000058D5 66890D[135A0000]    <2> 		mov [lastmouseposition + 2], cx
  7171 000058DC A0[295B0000]        <2> 		mov al, [XCOORD]
  7172 000058E1 3C80                <2> 		cmp al, 128
  7173 000058E3 730C                <2> 		jae subxcoord
  7174 000058E5 00C0                <2> 		add al, al
  7175 000058E7 30E4                <2> 		xor ah, ah
  7176 000058E9 6601C2              <2> 		add dx, ax
  7177 000058EC E90B000000          <2> 		jmp subxcoorddn
  7178                              <2> 	subxcoord:
  7179 000058F1 00C0                <2> 		add al, al
  7180 000058F3 30DB                <2> 		xor bl, bl
  7181 000058F5 28C3                <2> 		sub bl, al
  7182 000058F7 30FF                <2> 		xor bh, bh
  7183 000058F9 6629DA              <2> 		sub dx, bx
  7184                              <2> 	subxcoorddn:
  7185 000058FC 8A1D[2A5B0000]      <2> 		mov bl, [YCOORD]
  7186 00005902 30C0                <2> 		xor al, al
  7187 00005904 28D8                <2> 		sub al, bl
  7188 00005906 3C80                <2> 		cmp al, 128
  7189 00005908 730A                <2> 		jae subycoord
  7190 0000590A 30E4                <2> 		xor ah, ah
  7191 0000590C 6601C1              <2> 		add cx, ax
  7192 0000590F E909000000          <2> 		jmp subycoorddn
  7193                              <2> 	subycoord:
  7194 00005914 30DB                <2> 		xor bl, bl
  7195 00005916 28C3                <2> 		sub bl, al
  7196 00005918 30FF                <2> 		xor bh, bh
  7197 0000591A 6629D9              <2> 		sub cx, bx
  7198                              <2> 	subycoorddn:
  7199 0000591D 6681FA204E          <2> 		cmp dx, 20000
  7200 00005922 7603                <2> 		jbe nooriginx2
  7201 00005924 6631D2              <2> 		xor dx, dx
  7202                              <2> 	nooriginx2:
  7203 00005927 6681F9204E          <2> 		cmp cx, 20000
  7204 0000592C 7603                <2> 		jbe nooriginy2
  7205 0000592E 6631C9              <2> 		xor cx, cx
  7206                              <2> 	nooriginy2:
  7207 00005931 6681FA0000          <2> 		cmp dx, 0
  7208 00005936 7415                <2> 		je nofixxcolumn2
  7209 00005938 663B15[1F580000]    <2> 		cmp dx, [resolutionx2]
  7210 0000593F 720C                <2> 		jb nofixxcolumn2
  7211 00005941 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  7212 00005948 6681EA0200          <2> 		sub dx, 2
  7213                              <2> 	nofixxcolumn2:
  7214 0000594D 6681F90000          <2> 		cmp cx, 0
  7215 00005952 7415                <2> 		je nofixyrow2
  7216 00005954 663B0D[33570000]    <2> 		cmp cx, [resolutiony]
  7217 0000595B 720C                <2> 		jb nofixyrow2
  7218 0000595D 668B0D[33570000]    <2> 		mov cx, [resolutiony]
  7219 00005964 6681E90100          <2> 		sub cx, 1
  7220                              <2> 	nofixyrow2:
  7221 00005969 668915[155A0000]    <2> 		mov [mousecursorposition], dx
  7222 00005970 66890D[175A0000]    <2> 		mov [mousecursorposition + 2], cx
  7223 00005977 803D[DCFB0000]00    <2> 		cmp byte [guion], 0
  7224 0000597E 0F8495000000        <2> 		je near termmouse
  7225 00005984 E86C110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7226 00005989 803D[265B0000]01    <2> 		cmp byte [LBUTTON], 1
  7227 00005990 0F84A5220000        <2> 		je near clickicon
  7228 00005996 803D[275B0000]01    <2> 		cmp byte [RBUTTON], 1
  7229 0000599D 0F8498220000        <2> 		je near clickicon
  7230 000059A3 A0[287C0000]        <2> 		mov al, [pbutton]
  7231 000059A8 C705[2B7C0000]0000- <2> 		mov dword [dragging], 0
  7232 000059B0 0000                <2>
  7233 000059B2 3C00                <2> 		cmp al, 0
  7234 000059B4 740F                <2> 		je nopreviousbutton
  7235 000059B6 E8E2100000          <2> 		call clearmousecursor
  7236 000059BB E849140000          <2> 		call reloadallgraphics
  7237                              <2> 	windowtermcopyend:
  7238 000059C0 E890110000          <2> 		call switchmousepos2
  7239                              <2> 	nopreviousbutton:
  7240 000059C5 30C0                <2> 		xor al, al
  7241 000059C7 A2[287C0000]        <2> 		mov [pbutton], al
  7242 000059CC A2[8F810000]        <2> 		mov [windrag], al
  7243 000059D1 A0[265B0000]        <2> 		mov al, [LBUTTON]
  7244 000059D6 A2[297C0000]        <2> 		mov [pLBUTTON], al
  7245 000059DB A0[275B0000]        <2> 		mov al, [RBUTTON]
  7246 000059E0 A2[2A7C0000]        <2> 		mov [pRBUTTON], al
  7247 000059E5 31D2                <2> 		xor edx, edx
  7248 000059E7 668B15[155A0000]    <2> 		mov dx, [mousecursorposition]
  7249 000059EE 668B0D[175A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7250 000059F5 66BB18C7            <2> 		mov bx, 1100011100011000b
  7251 000059F9 66B80100            <2> 		mov ax, 1
  7252 000059FD C605[257C0000]01    <2> 		mov byte [showcursorfonton], 1
  7253 00005A04 E8C81A0000          <2> 		call showfontvesa
  7254 00005A09 C605[257C0000]00    <2> 		mov byte [showcursorfonton], 0
  7255 00005A10 C3                  <2> 		ret
  7256                              <2> 
  7257 00005A11 00000000            <2> lastmouseposition dw 0,0
  7258 00005A15 00000000            <2> mousecursorposition dw 0,0	
  7259                              <2> 
  7260                              <2> termmouse:
  7261 00005A19 BE[BC2F0100]        <2> 		mov esi, videobuf
  7262 00005A1E 31D2                <2> 		xor edx, edx
  7263 00005A20 668B15[115A0000]    <2> 		mov dx, [lastmouseposition]
  7264 00005A27 668B0D[135A0000]    <2> 		mov cx, [lastmouseposition + 2]
  7265 00005A2E 66A1[AC5A0000]      <2> 		mov ax, [cursorcache]
  7266 00005A34 663D0000            <2> 		cmp ax, 0
  7267 00005A38 7425                <2> 		je nocopycursorcache
  7268 00005A3A 66C1E104            <2> 		shl cx, 4
  7269 00005A3E 66C1E203            <2> 		shl dx, 3
  7270 00005A42 01D6                <2> 		add esi, edx
  7271 00005A44 6631D2              <2> 		xor dx, dx
  7272 00005A47 8A15[82250000]      <2> 		mov dl, [charxy]
  7273 00005A4D 6641                <2> 		inc cx
  7274                              <2> termmousecplp1:
  7275 00005A4F 01D6                <2> 		add esi, edx
  7276 00005A51 6649                <2> 		dec cx
  7277 00005A53 6681F90000          <2> 		cmp cx, 0
  7278 00005A58 75F5                <2> 		jne termmousecplp1
  7279 00005A5A 29D6                <2> 		sub esi, edx
  7280 00005A5C 668906              <2> 		mov [esi], ax
  7281                              <2> nocopycursorcache:
  7282 00005A5F BE[BC2F0100]        <2> 		mov esi, videobuf
  7283 00005A64 31D2                <2> 		xor edx, edx
  7284 00005A66 668B15[155A0000]    <2> 		mov dx, [mousecursorposition]
  7285 00005A6D 668B0D[175A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7286 00005A74 66C1E104            <2> 		shl cx, 4
  7287 00005A78 66C1E203            <2> 		shl dx, 3
  7288 00005A7C 01D6                <2> 		add esi, edx
  7289 00005A7E 6631D2              <2> 		xor dx, dx
  7290 00005A81 8A15[82250000]      <2> 		mov dl, [charxy]
  7291 00005A87 6641                <2> 		inc cx
  7292                              <2> termmousecplp2:
  7293 00005A89 01D6                <2> 		add esi, edx
  7294 00005A8B 6649                <2> 		dec cx
  7295 00005A8D 6681F90000          <2> 		cmp cx, 0
  7296 00005A92 75F5                <2> 		jne termmousecplp2
  7297 00005A94 29D6                <2> 		sub esi, edx
  7298 00005A96 668B06              <2> 		mov ax, [esi]
  7299 00005A99 66A3[AC5A0000]      <2> 		mov [cursorcache], ax
  7300 00005A9F B080                <2> 		mov al, 128
  7301 00005AA1 B407                <2> 		mov ah, 7
  7302 00005AA3 668906              <2> 		mov [esi], ax
  7303 00005AA6 E8ADCDFFFF          <2> 		call termcopy
  7304 00005AAB C3                  <2> 		ret
  7305 00005AAC 0000                <2> cursorcache db 0,0
  7306                              <2> 
  7307                              <2> PS2SET:
  7308 00005AAE B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7309 00005AB0 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7310 00005AB2 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7311 00005AB7 C3                  <2> ret
  7312                              <2> 
  7313                              <2> CHKPRT:
  7314 00005AB8 66B96400            <2>   mov  cx, 100
  7315                              <2>  .again:
  7316 00005ABC E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7317 00005ABE A802                <2>   test al, 2		; Check if input buffer is empty
  7318 00005AC0 7402                <2>   je .go
  7319 00005AC2 E2F8                <2>   loop .again
  7320                              <2>  .go:
  7321 00005AC4 C3                  <2> ret
  7322                              <2> 
  7323                              <2> WMOUS:
  7324 00005AC5 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7325 00005AC7 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7326 00005AC9 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7327 00005ACE C3                  <2> ret
  7328                              <2> 
  7329                              <2> MBUFFUL:
  7330 00005ACF 66B96400            <2>   mov cx, 100
  7331                              <2>  .mn:
  7332 00005AD3 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7333 00005AD5 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7334 00005AD7 7402                <2>   jz  .mnn
  7335 00005AD9 E2F8                <2>   loop .mn
  7336                              <2>  .mnn:
  7337 00005ADB C3                  <2> ret
  7338                              <2> 
  7339                              <2> 
  7340                              <2> ACTMOUS:
  7341 00005ADC E8E4FFFFFF          <2>   call WMOUS
  7342 00005AE1 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7343 00005AE3 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7344 00005AE5 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7345 00005AEA E801000000          <2>   call CHKMOUS		; check if a byte is available
  7346 00005AEF C3                  <2> ret
  7347                              <2> 
  7348                              <2> CHKMOUS:
  7349 00005AF0 B300                <2>   mov  bl, 0
  7350 00005AF2 66B96400            <2>   mov cx, 100
  7351                              <2>  .vrd:
  7352 00005AF6 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7353 00005AF8 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7354 00005AFA 7504                <2>   jnz .yy
  7355 00005AFC E2F8                <2>   loop .vrd
  7356 00005AFE B301                <2>   mov  bl, 1
  7357                              <2>  .yy:
  7358 00005B00 C3                  <2> ret
  7359                              <2> 
  7360                              <2> GETB:
  7361                              <2>  .cagain:
  7362 00005B01 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7363 00005B06 08DB                <2>   or bl, bl
  7364 00005B08 75F7                <2>   jnz .cagain
  7365 00005B0A B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7366 00005B0C E664                <2>   out  0x64, al		; write to keyboardcontroller
  7367 00005B0E E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7368 00005B13 6631C0              <2>   xor  ax, ax
  7369 00005B16 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7370 00005B18 88C2                <2>   mov  dl, al
  7371 00005B1A B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7372 00005B1C E664                <2>   out  0x64, al		; write to keyboardcontroller
  7373 00005B1E E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7374 00005B23 88D0                <2>   mov  al, dl
  7375 00005B25 C3                  <2> ret
  7376                              <2> 
  7377 00005B26 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7378 00005B27 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7379 00005B28 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7380 00005B29 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7381 00005B2A 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7382                              <1> %endif
  7383                              <1> %include "source/drivers/sound/pcspkr.asm"
  7384                              <2> ;PC Speaker Drivers
  7385                              <2> PCSpeakerRAW:
  7386 00005B2B 60                  <2> 	pusha
  7387                              <2> nosoundrep:
  7388 00005B2C 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7389 00005B32 31C9                <2> 	xor ecx, ecx
  7390 00005B34 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7391 00005B3B 6681F90000          <2> 	cmp cx, 0
  7392 00005B40 0F8548000000        <2> 	jne near donesetpitch
  7393 00005B46 668B0E              <2> 	mov cx, [esi]
  7394 00005B49 668B5E02            <2> 	mov bx, [esi + 2]
  7395 00005B4D 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7396 00005B54 81C604000000        <2> 	add esi, 4
  7397 00005B5A 8935[6B020000]      <2> 	mov [soundpos], esi
  7398 00005B60 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7399 00005B66 7735                <2> 	ja stopsound
  7400 00005B68 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7401 00005B70 00                  <2>
  7402 00005B71 74B9                <2> 	je nosoundrep
  7403 00005B73 6681FB0000          <2> 	cmp bx, 0
  7404 00005B78 740F                <2> 	je nosoundplay
  7405 00005B7A E840000000          <2> 	call setpitch
  7406 00005B7F E849000000          <2> 	call startsound
  7407 00005B84 E905000000          <2> 	jmp donesetpitch
  7408                              <2> nosoundplay:
  7409 00005B89 E846000000          <2> 	call killsound
  7410                              <2> donesetpitch:
  7411 00005B8E 6649                <2> 	dec cx
  7412 00005B90 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7413 00005B97 61                  <2> 	popa
  7414 00005B98 E90BA7FFFF          <2> 	jmp timerinterrupt
  7415                              <2> stopsound:
  7416 00005B9D 31C0                <2> 	xor eax, eax
  7417 00005B9F 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7418 00005BA5 A2[68020000]        <2> 	mov [soundon], al
  7419 00005BAA A3[6B020000]        <2> 	mov [soundpos], eax
  7420 00005BAF A3[6F020000]        <2> 	mov [soundendpos], eax
  7421 00005BB4 E81B000000          <2> 	call killsound
  7422 00005BB9 61                  <2> 	popa
  7423 00005BBA E9E9A6FFFF          <2> 	jmp timerinterrupt
  7424                              <2> 
  7425                              <2> 
  7426                              <2> setpitch:
  7427 00005BBF B0B6                <2> 	mov al, 0xB6
  7428 00005BC1 E643                <2> 	out 0x43, al
  7429 00005BC3 6689D8              <2> 	mov ax, bx
  7430 00005BC6 E642                <2> 	out 0x42, al
  7431 00005BC8 88E0                <2> 	mov al, ah
  7432 00005BCA E642                <2> 	out 0x42, al
  7433 00005BCC C3                  <2> 	ret
  7434                              <2> startsound:
  7435 00005BCD E461                <2> 	in al, 0x61
  7436 00005BCF 0C03                <2> 	or al, 3
  7437 00005BD1 E661                <2> 	out 0x61, al
  7438 00005BD3 C3                  <2> 	ret
  7439                              <2> killsound:
  7440 00005BD4 E461                <2> 	in al, 0x61
  7441 00005BD6 24FC                <2> 	and al, 0xFC
  7442 00005BD8 E661                <2> 	out 0x61, al
  7443 00005BDA C3                  <2> 	ret
  7444                              <2> 	
  7445                              <1> %ifdef sound.included
  7446                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7447                              <1> %endif
  7448                              <1> %ifdef io.serial
  7449                              <1> 	%include "source/drivers/input/serial.asm"
  7450                              <1> %else
  7451                              <1> 	%include "source/drivers/input/keyboard.asm"
  7452 00005BDB 00                  <2> specialkey db 0
  7453                              <2> ;charregion db 0
  7454                              <2> waitforinput:		;this is basically the idle process
  7455                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7456                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7457 00005BDC 6631C0              <2> 	xor ax, ax
  7458 00005BDF A0[1F670000]        <2> 	mov al, [threadson]
  7459 00005BE4 8825[1F670000]      <2> 	mov [threadson], ah
  7460 00005BEA FB                  <2> 	sti
  7461 00005BEB F4                  <2> 	hlt
  7462 00005BEC A2[1F670000]        <2> 	mov [threadson], al
  7463 00005BF1 66813D[64230000]00- <2> 	cmp word [trans], 0
  7464 00005BF9 00                  <2>
  7465 00005BFA 7401                <2> 	je getkey
  7466 00005BFC C3                  <2> 	ret
  7467                              <2> getkey:
  7468 00005BFD 31C0                <2> 		xor eax, eax
  7469 00005BFF A2[DB5B0000]        <2> 		mov [specialkey], al
  7470 00005C04 A3[60230000]        <2> 		mov [lastkey], eax
  7471 00005C09 E464                <2> 		in al, 64h ; Status
  7472                              <2> 	%ifdef gui.included
  7473 00005C0B A820                <2> 		test al, 20h ; PS2-Mouse?
  7474 00005C0D 0F8565FCFFFF        <2> 		jnz near moused
  7475                              <2> 	%endif
  7476 00005C13 A801                <2> 		test al, 1 
  7477 00005C15 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7478                              <2> 	calckey:
  7479 00005C17 E460                <2> 		in al, 60h
  7480 00005C19 30E4                <2> 		xor ah, ah
  7481 00005C1B 6689C3              <2> 		mov bx, ax
  7482 00005C1E 66A3[62230000]      <2> 		mov [lastkey + 2], ax
  7483 00005C24 BF[B35D0000]        <2> 		mov edi, scancode
  7484                              <2> 	searchscan: 
  7485 00005C29 80FB3A              <2> 		cmp bl, 3Ah
  7486 00005C2C 7314                <2> 		jae scanother
  7487 00005C2E C1E004              <2> 		shl eax, 4
  7488 00005C31 01C7                <2> 		add edi, eax
  7489 00005C33 668B07              <2> 		mov ax, [edi]
  7490 00005C36 663D0000            <2> 		cmp ax, 0
  7491 00005C3A 7406                <2> 		je scanother
  7492 00005C3C E9D0000000          <2> 		jmp scanfound
  7493 00005C41 00                  <2> uppercase db 0
  7494                              <2> scanother:
  7495 00005C42 6631C0              <2> 		xor ax, ax
  7496 00005C45 66A3[60230000]      <2> 		mov [lastkey], ax
  7497 00005C4B 80FBE0              <2> 		cmp bl, 0E0h
  7498 00005C4E 0F8477000000        <2> 		je near getkeyspecial
  7499 00005C54 803D[DB5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7500 00005C5B 7525                <2> 		jne nospecialkey
  7501 00005C5D 80FB38              <2> 		cmp bl, 38h
  7502 00005C60 0F849A000000        <2> 		je near alton
  7503 00005C66 80FBB8              <2> 		cmp bl, 0B8h
  7504 00005C69 0F8499000000        <2> 		je near altoff
  7505 00005C6F 80FB1D              <2> 		cmp bl, 1Dh
  7506 00005C72 0F8478000000        <2> 		je near ctron
  7507 00005C78 80FB9D              <2> 		cmp bl, 9Dh
  7508 00005C7B 0F8477000000        <2> 		je near ctroff
  7509 00005C81 C3                  <2> 		ret
  7510                              <2> nospecialkey:
  7511 00005C82 80FB2A              <2> 		cmp bl, 2Ah
  7512 00005C85 0F8455000000        <2> 		je near shifton
  7513 00005C8B 80FB36              <2> 		cmp bl, 36h
  7514 00005C8E 0F844C000000        <2> 		je near shifton
  7515 00005C94 80FB1C              <2> 		cmp bl, 1Ch
  7516 00005C97 0F8473000000        <2> 		je near entdown
  7517 00005C9D 80FBAA              <2> 		cmp bl, 0AAh
  7518 00005CA0 0F8442000000        <2> 		je near shiftoff
  7519 00005CA6 80FBB6              <2> 		cmp bl, 0B6h
  7520 00005CA9 0F8439000000        <2> 		je near shiftoff
  7521 00005CAF 80FB3A              <2> 		cmp bl, 3Ah
  7522 00005CB2 0F84A7000000        <2> 		je near capslock
  7523 00005CB8 80FB45              <2> 		cmp bl, 0x45
  7524 00005CBB 0F84AF000000        <2> 		je near numlock
  7525 00005CC1 80FB46              <2> 		cmp bl, 0x46
  7526 00005CC4 0F84BE000000        <2> 		je near scrolllock
  7527 00005CCA C3                  <2> 		ret
  7528                              <2> 	getkeyspecial:
  7529 00005CCB C605[DB5B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7530 00005CD2 E940FFFFFF          <2> 		jmp calckey
  7531                              <2> 	shift:
  7532 00005CD7 A0[415C0000]        <2> 		mov al, [uppercase]
  7533 00005CDC 3C01                <2> 		cmp al, 1
  7534 00005CDE 7308                <2> 		jae shiftoff
  7535                              <2> 	shifton:
  7536 00005CE0 C605[415C0000]01    <2> 		mov byte [uppercase], 1
  7537 00005CE7 C3                  <2> 		ret
  7538                              <2> 	shiftoff:
  7539 00005CE8 C605[415C0000]00    <2> 		mov byte [uppercase], 0
  7540 00005CEF C3                  <2> 		ret
  7541                              <2> 	ctron:
  7542 00005CF0 C605[5E5D0000]01    <2> 		mov byte [ctrkey], 1
  7543 00005CF7 C3                  <2> 		ret
  7544                              <2> 	ctroff:
  7545 00005CF8 C605[5E5D0000]00    <2> 		mov byte [ctrkey], 0
  7546 00005CFF C3                  <2> 		ret
  7547                              <2> 	alton:
  7548 00005D00 C605[5D5D0000]01    <2> 		mov byte [altkey], 1
  7549 00005D07 C3                  <2> 		ret
  7550                              <2> 	altoff:
  7551 00005D08 C605[5D5D0000]00    <2> 		mov byte [altkey], 0
  7552 00005D0F C3                  <2> 		ret
  7553                              <2> 	entdown:
  7554 00005D10 C3                  <2> 		ret
  7555                              <2> scanfound:
  7556 00005D11 81C708000000        <2> 		add edi, 8
  7557 00005D17 803D[5E5D0000]01    <2> 		cmp byte [ctrkey], 1
  7558 00005D1E 7306                <2> 		jae ctrlin
  7559 00005D20 81EF08000000        <2> 		sub edi, 8
  7560                              <2> 	ctrlin:
  7561 00005D26 81C704000000        <2> 		add edi, 4
  7562 00005D2C 803D[5D5D0000]01    <2> 		cmp byte [altkey], 1
  7563 00005D33 7306                <2> 		jae altin
  7564 00005D35 81EF04000000        <2> 		sub edi, 4
  7565                              <2> 	altin:
  7566 00005D3B 81C702000000        <2> 		add edi, 2
  7567 00005D41 803D[415C0000]01    <2> 		cmp byte [uppercase], 1
  7568 00005D48 7306                <2> 		jae uppercaseon
  7569 00005D4A 81EF02000000        <2> 		sub edi, 2
  7570                              <2> 	uppercaseon:
  7571 00005D50 668B07              <2> 		mov ax,[edi]
  7572 00005D53 66A3[60230000]      <2> 		mov [lastkey], ax
  7573 00005D59 C3                  <2> 		ret
  7574                              <2> 		
  7575 00005D5A 00                  <2> keyboardstatus db 0
  7576 00005D5B 00                  <2> numlockstatus db 0
  7577 00005D5C 00                  <2> scrolllockstatus db 0
  7578 00005D5D 00                  <2> altkey db 0
  7579 00005D5E 00                  <2> ctrkey db 0
  7580                              <2> 	capslock:
  7581 00005D5F 8035[5A5D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7582 00005D66 E835000000          <2> 		call updatekblights
  7583 00005D6B E967FFFFFF          <2> 		jmp shift
  7584                              <2> 		
  7585                              <2> 	numlock:
  7586 00005D70 8035[5A5D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7587 00005D77 8035[5B5D0000]01    <2> 		xor byte [numlockstatus], 1
  7588 00005D7E E81D000000          <2> 		call updatekblights
  7589 00005D83 E975FEFFFF          <2> 		jmp getkey
  7590                              <2> 	
  7591                              <2> 	scrolllock:
  7592 00005D88 8035[5A5D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7593 00005D8F 8035[5C5D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7594 00005D96 E805000000          <2> 		call updatekblights
  7595 00005D9B E95DFEFFFF          <2> 		jmp getkey
  7596                              <2> 		
  7597                              <2> 	updatekblights:
  7598 00005DA0 B0ED                <2> 		mov al, 0xED
  7599 00005DA2 66BA6000            <2> 		mov dx, 0x60
  7600 00005DA6 EE                  <2> 		out dx, al
  7601                              <2> 	chkkbdack:
  7602 00005DA7 EC                  <2> 		in al, dx
  7603 00005DA8 3CFA                <2> 		cmp al, 0xFA
  7604 00005DAA 75FB                <2> 		jne chkkbdack
  7605 00005DAC A0[5A5D0000]        <2> 		mov al, [keyboardstatus]
  7606 00005DB1 EE                  <2> 		out dx, al
  7607 00005DB2 C3                  <2> 		ret
  7608                              <2> 		
  7609                              <2> scancode:
  7610                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7611 00005DB3 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7612 00005DBC 00000000000000      <2>
  7613 00005DC3 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7614 00005DCC 00000000000000      <2>
  7615 00005DD3 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7616 00005DDC 00000000000000      <2>
  7617 00005DE3 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7618 00005DEC 00000000000000      <2>
  7619 00005DF3 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7620 00005DFC 00000000000000      <2>
  7621 00005E03 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7622 00005E0C 00000000000000      <2>
  7623 00005E13 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7624 00005E1C 00000000000000      <2>
  7625 00005E23 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7626 00005E2C 00000000000000      <2>
  7627 00005E33 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7628 00005E3C 00000000000000      <2>
  7629 00005E43 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7630 00005E4C 00000000000000      <2>
  7631 00005E53 390028000000000000- <2> 	dw '9','(',0,0,0,0,0,0
  7632 00005E5C 00000000000000      <2>
  7633 00005E63 300029000000000000- <2> 	dw '0',')',0,0,0,0,0,0
  7634 00005E6C 00000000000000      <2>
  7635 00005E73 2D005F009D00F10000- <2> 	dw '-','_',0x9D,0xF1,0,0,0,0
  7636 00005E7C 00000000000000      <2>
  7637 00005E83 3D002B00F700F60000- <2> 	dw '=','+',0xF7,0xF6,0,0,0,0
  7638 00005E8C 00000000000000      <2>
  7639 00005E93 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7640 00005E9C 00000000000000      <2>
  7641 00005EA3 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7642 00005EAC 00000000000000      <2>
  7643 00005EB3 7100510084008E0000- <2> 	dw 'q','Q',0x84,0x8E,0,0,0,0
  7644 00005EBC 00000000000000      <2>
  7645 00005EC3 7700570086008F0000- <2> 	dw 'w','W',0x86,0x8F,0,0,0,0
  7646 00005ECC 00000000000000      <2>
  7647 00005ED3 6500450082009000EE- <2> 	dw 'e','E',0x82,0x90,0xEE,'E',0,0
  7648 00005EDC 00450000000000      <2>
  7649 00005EE3 7200520089008A0070- <2> 	dw 'r','R',0x89,0x8A,'p','P',0,0
  7650 00005EEB 00500000000000      <2>
  7651 00005EF3 7400540081009A00E7- <2> 	dw 't','T',0x81,0x9A,0xE7,'T',0,0
  7652 00005EFC 00540000000000      <2>
  7653 00005F03 790059009800000075- <2> 	dw 'y','Y',0x98,0,'u','Y',0,0
  7654 00005F0B 00590000000000      <2>
  7655 00005F13 75005500A300970000- <2> 	dw 'u','U',0xA3,0x97,0,0,0,0
  7656 00005F1C 00000000000000      <2>
  7657 00005F23 69004900A1008D0069- <2> 	dw 'i','I',0xA1,0x8D,'i','I',0,0
  7658 00005F2B 00490000000000      <2>
  7659 00005F33 6F004F00A200950077- <2> 	dw 'o','O',0xA2,0x95,'w',0xEA,0,0
  7660 00005F3B 00EA0000000000      <2>
  7661 00005F43 7000500094009900E3- <2> 	dw 'p','P',0x94,0x99,0xE3,0xEF,0,0
  7662 00005F4C 00EF0000000000      <2>
  7663 00005F53 5B007B00F400000000- <2> 	dw '[','{',0xF4,0,0,0,0,0
  7664 00005F5C 00000000000000      <2>
  7665 00005F63 5D007D00F500000000- <2> 	dw ']','}',0xF5,0,0,0,0,0
  7666 00005F6C 00000000000000      <2>
  7667 00005F73 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7668 00005F7C 00000000000000      <2>
  7669 00005F83 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7670 00005F8C 00000000000000      <2>
  7671 00005F93 61004100A0008500E0- <2> 	dw 'a','A',0xA0,133,224,'A',0,0
  7672 00005F9C 00410000000000      <2>
  7673 00005FA3 7300530015000000E5- <2> 	dw 's','S',21,0,229,228,0,0
  7674 00005FAC 00E40000000000      <2>
  7675 00005FB3 64004400F8000000EB- <2> 	dw 'd','D',0xF8,0,235,127,0,0
  7676 00005FBC 007F0000000000      <2>
  7677 00005FC3 660046009F000C00ED- <2> 	dw 'f','F',159,0xC,237,232,0,0
  7678 00005FCC 00E80000000000      <2>
  7679 00005FD3 670047000000000079- <2> 	dw 'g','G',0,0,'y',226,0,0
  7680 00005FDB 00E20000000000      <2>
  7681 00005FE3 68004800000000006E- <2> 	dw 'h','H',0,0,'n','H',0,0
  7682 00005FEB 00480000000000      <2>
  7683 00005FF3 6A004A000000000000- <2> 	dw 'j','J',0,0,0,0,0,0
  7684 00005FFC 00000000000000      <2>
  7685 00006003 6B004B00000000006B- <2> 	dw 'k','K',0,0,'k','K',0,0
  7686 0000600B 004B0000000000      <2>
  7687 00006013 6C004C0000000000E9- <2> 	dw 'l','L',0,0,233,233,0,0
  7688 0000601C 00E90000000000      <2>
  7689 00006023 3B003A001400DC0000- <2> 	dw ';',':',20,0xDC,0,0,0,0
  7690 0000602C 00000000000000      <2>
  7691 00006033 270022000000000000- <2> 	dw 27h,22h,0,0,0,0,0,0
  7692 0000603C 00000000000000      <2>
  7693 00006043 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0,0
  7694 0000604C 00000000000000      <2>
  7695 00006053 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7696 0000605C 00000000000000      <2>
  7697 00006063 5C007C00AA00B30000- <2> 	dw 92,'|',170,179,0,0,0,0
  7698 0000606C 00000000000000      <2>
  7699 00006073 7A005A00910092007A- <2> 	dw 'z','Z',145,146,'z','Z',0,0
  7700 0000607B 005A0000000000      <2>
  7701 00006083 780058000000000000- <2> 	dw 'x','X',0,0,0,240,0,0
  7702 0000608C 00F00000000000      <2>
  7703 00006093 630043008700800000- <2> 	dw 'c','C',135,128,0,0,0,0
  7704 0000609C 00000000000000      <2>
  7705 000060A3 760056000000000000- <2> 	dw 'v','V',0,0,0,0,0,0
  7706 000060AC 00000000000000      <2>
  7707 000060B3 6200420000000000E1- <2> 	dw 'b','B',0,0,225,'B',0,0
  7708 000060BC 00420000000000      <2>
  7709 000060C3 6E004E00A400A50076- <2> 	dw 'n','N',0xA4,0xA5,'v','N',0,0
  7710 000060CB 004E0000000000      <2>
  7711 000060D3 6D004D000E000B00E6- <2> 	dw 'm','M',0xE,0xB,230,'M',0,0
  7712 000060DC 004D0000000000      <2>
  7713 000060E3 2C003C00F300AE0000- <2> 	dw ',','<',0xF3,174,0,0,0,0
  7714 000060EC 00000000000000      <2>
  7715 000060F3 2E003E00F200AF0000- <2> 	dw '.','>',0xF2,175,0,0,0,0
  7716 000060FC 00000000000000      <2>
  7717 00006103 2F003F00A800000000- <2> 	dw '/','?',0xA8,0,0,0,0,0
  7718 0000610C 00000000000000      <2>
  7719 00006113 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7720 0000611C 00000000000000      <2>
  7721 00006123 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7722 0000612C 00000000000000      <2>
  7723 00006133 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7724 0000613C 00000000000000      <2>
  7725 00006143 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7726 0000614C 00000000000000      <2>
  7727                              <2> noscan:
  7728                              <2> 
  7729                              <1> %endif
  7730                              <1> ;drivers will soon be handled intelligently
  7731                              <1> ;every driver's source will be scanned for a .init function
  7732                              <1> ;that will be called and if it returns 0
  7733                              <1> ;the hardware was found and the driver initialized properly
  7734                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7735                              <1> 	%ifdef sound.included
  7736                              <1> 		call sblaster.init
  7737                              <1> 	%endif
  7738                              <1> 	%ifdef network.included
  7739 00006153 E828230000          <1> 		call network.init
  7740                              <1> 	%endif
  7741 00006158 C3                  <1> 	ret
  7742                              <1> initialize:
  7743                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7744 00006159 E814000000          <1> 	call .pic
  7745                              <1> %ifdef terminal.vsync
  7746                              <1> 	call .rtc
  7747                              <1> %endif
  7748 0000615E E871000000          <1> 	call .pit
  7749 00006163 E893000000          <1> 	call .fpu
  7750 00006168 E8A4000000          <1> 	call .sse
  7751 0000616D 31C0                <1> 	xor eax, eax
  7752 0000616F 31C9                <1> 	xor ecx, ecx
  7753                              <1> %ifdef io.serial
  7754                              <1> 	call serial.init
  7755                              <1> %endif
  7756 00006171 C3                  <1> 	ret
  7757                              <1> 	
  7758                              <1> .pic:
  7759 00006172 B011                <1> 	mov al, 0x11
  7760 00006174 E620                <1> 	out 0x20, al
  7761 00006176 E6A0                <1> 	out 0xA0, al
  7762 00006178 B040                <1> 	mov al, 0x40	;interrupt for master
  7763 0000617A E621                <1> 	out 0x21, al
  7764 0000617C B048                <1> 	mov al, 0x48	;interrupt for slave
  7765 0000617E E6A1                <1> 	out 0xA1, al
  7766 00006180 B004                <1> 	mov al, 4
  7767 00006182 E621                <1> 	out 0x21, al
  7768 00006184 B002                <1> 	mov al, 2
  7769 00006186 E6A1                <1> 	out 0xA1, al
  7770 00006188 B001                <1> 	mov al, 0x1
  7771 0000618A E621                <1> 	out 0x21, al
  7772 0000618C B001                <1> 	mov al, 0x1
  7773 0000618E E6A1                <1> 	out 0xA1, al
  7774                              <1> 	;masks are set to zero so as not to mask
  7775 00006190 30C0                <1> 	xor al, al
  7776 00006192 E621                <1> 	out 0x21, al
  7777 00006194 30C0                <1> 	xor al, al
  7778 00006196 E6A1                <1> 	out 0xA1, al
  7779 00006198 B020                <1> 	mov al, 0x20
  7780 0000619A E6A0                <1> 	out 0xA0, al
  7781 0000619C E620                <1> 	out 0x20, al
  7782 0000619E C3                  <1> 	ret
  7783                              <1> .rtc:
  7784 0000619F B008                <1> 	mov al, 0x8
  7785 000061A1 88C4                <1> 	mov ah, al
  7786 000061A3 66BA7000            <1> 	mov dx, 0x70
  7787 000061A7 EE                  <1> 	out dx, al
  7788 000061A8 6642                <1> 	inc dx
  7789 000061AA EC                  <1> 	in al, dx
  7790 000061AB 86C4                <1> 	xchg al, ah
  7791 000061AD 664A                <1> 	dec dx
  7792 000061AF EE                  <1> 	out dx, al
  7793 000061B0 6642                <1> 	inc dx
  7794 000061B2 86C4                <1> 	xchg al, ah
  7795 000061B4 0C40                <1> 	or al, 0x40
  7796 000061B6 EE                  <1> 	out dx, al
  7797                              <1> 	
  7798 000061B7 B00A                <1> 	mov al, 0xA
  7799 000061B9 664A                <1> 	dec dx
  7800 000061BB EE                  <1> 	out dx, al
  7801 000061BC 86C4                <1> 	xchg al, ah
  7802 000061BE 6642                <1> 	inc dx
  7803 000061C0 EC                  <1> 	in al, dx
  7804 000061C1 24F0                <1> 	and al, 0xF0
  7805 000061C3 0A05[1B030000]      <1> 	or al, [rtcrate]
  7806 000061C9 86C4                <1> 	xchg al, ah
  7807 000061CB 664A                <1> 	dec dx
  7808 000061CD EE                  <1> 	out dx, al
  7809 000061CE 6642                <1> 	inc dx
  7810 000061D0 86C4                <1> 	xchg al, ah
  7811 000061D2 EE                  <1> 	out dx, al
  7812 000061D3 C3                  <1> 	ret
  7813                              <1> 	
  7814                              <1> .pit:
  7815                              <1> 	;initialize the PIT
  7816 000061D4 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7817 000061DA E640                <1> 	out 0x40, al
  7818 000061DC 66C1C008            <1> 	rol ax, 8
  7819 000061E0 E640                <1> 	out 0x40, al
  7820                              <1> 	;enable rtc interrupt
  7821 000061E2 B00B                <1> 	mov al, 0xB
  7822 000061E4 E670                <1> 	out 0x70, al
  7823 000061E6 66C1C008            <1> 	rol ax, 8
  7824 000061EA E471                <1> 	in al, 0x71
  7825 000061EC 66C1C008            <1> 	rol ax, 8
  7826 000061F0 E670                <1> 	out 0x70, al
  7827 000061F2 66C1C008            <1> 	rol ax, 8
  7828 000061F6 0C40                <1> 	or al, 0x40
  7829 000061F8 E671                <1> 	out 0x71, al
  7830 000061FA C3                  <1> 	ret
  7831                              <1> .fpu:
  7832                              <1> 	;And now to initialize the fpu
  7833 000061FB 0F20E0              <1> 	mov eax, cr4
  7834 000061FE 0D00020000          <1> 	or eax, 0x200
  7835 00006203 0F22E0              <1> 	mov cr4, eax
  7836 00006206 B87F0B0000          <1> 	mov eax, 0xB7F
  7837 0000620B 50                  <1> 	push eax
  7838 0000620C D92C24              <1> 	fldcw [esp]
  7839 0000620F 58                  <1> 	pop eax
  7840 00006210 C3                  <1> 	ret
  7841                              <1> 	
  7842                              <1> .sse:
  7843 00006211 0F20C0              <1> 	mov eax, cr0
  7844 00006214 24FB                <1> 	and al, 11111011b
  7845 00006216 0C02                <1> 	or al, 00000010b
  7846 00006218 0F22C0              <1> 	mov cr0, eax
  7847 0000621B 0F20E0              <1> 	mov eax, cr4
  7848 0000621E 660D0006            <1> 	or ax, 0000011000000000b
  7849 00006222 0F22E0              <1> 	mov cr4, eax
  7850 00006225 C3                  <1> 	ret
  7851                                      %include "source/pci.asm"
  7852 00006226 00                  <1> pcibus		db 0
  7853 00006227 00                  <1> pcidevice	db 0
  7854 00006228 00                  <1> pcifunction	db 0
  7855 00006229 00                  <1> pciregister	db 0
  7856 0000622A 00                  <1> pcireqtype	db 0
  7857 0000622B 00000000            <1> pcidevid	dd 0
  7858 0000622F FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7859                              <1> getpcimem:
  7860 00006233 B002                <1> 	mov al, 2
  7861 00006235 A2[2A620000]        <1> 	mov [pcireqtype], al
  7862 0000623A E922000000          <1> 	jmp searchpci
  7863                              <1> getpciport:
  7864 0000623F B001                <1> 	mov al, 1
  7865 00006241 A2[2A620000]        <1> 	mov [pcireqtype], al
  7866 00006246 E916000000          <1> 	jmp searchpci
  7867                              <1> pcidump:
  7868 0000624B 31C0                <1> 	xor eax, eax
  7869 0000624D A2[28620000]        <1> 	mov [pcifunction], al
  7870 00006252 A2[26620000]        <1> 	mov [pcibus], al
  7871 00006257 A2[27620000]        <1> 	mov [pcidevice], al
  7872 0000625C A2[2A620000]        <1> 	mov [pcireqtype], al
  7873                              <1> searchpci:		;;return in ebx, start X in pciX
  7874 00006261 30C0                <1> 	xor al, al
  7875 00006263 A2[29620000]        <1> 	mov [pciregister], al
  7876 00006268 E81D020000          <1> 	call getpciaddr
  7877 0000626D BAF80C0000          <1> 	mov edx, 0xCF8
  7878 00006272 EF                  <1> 	out dx, eax	;;request pci config
  7879 00006273 BAFC0C0000          <1> 	mov edx, 0xCFC
  7880 00006278 ED                  <1> 	in eax, dx 	;;read in pci config
  7881 00006279 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7882 0000627E 0F8237000000        <1> 	jb near checkpcidevice
  7883                              <1> searchpciret:
  7884                              <1> nextpcidevice:
  7885 00006284 30C0                <1> 	xor al, al
  7886 00006286 A2[28620000]        <1> 	mov [pcifunction], al
  7887 0000628B A0[27620000]        <1> 	mov al, [pcidevice]
  7888 00006290 3C1F                <1> 	cmp al, 11111b
  7889 00006292 0F8300010000        <1> 	jae near nextpcibus
  7890 00006298 FEC0                <1> 	inc al
  7891 0000629A A2[27620000]        <1> 	mov [pcidevice], al
  7892 0000629F EBC0                <1> 	jmp searchpci
  7893 000062A1 A0[28620000]        <1> 	mov al, [pcifunction]
  7894 000062A6 3C07                <1> 	cmp al, 111b
  7895 000062A8 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7896 000062AE FEC0                <1> 	inc al
  7897 000062B0 A2[28620000]        <1> 	mov [pcifunction], al
  7898 000062B5 EBAA                <1> 	jmp searchpci
  7899 000062B7 00000000            <1> pcitype: db 0,0,0,0
  7900                              <1> checkpcidevice:
  7901 000062BB 31C0                <1> 	xor eax, eax
  7902 000062BD 3905[2B620000]      <1> 	cmp [pcidevid], eax
  7903 000062C3 0F8430000000        <1> 	je near .good
  7904 000062C9 A2[29620000]        <1> 	mov [pciregister], al	;device id, vendor id
  7905 000062CE E8B7010000          <1> 	call getpciaddr
  7906 000062D3 BAF80C0000          <1> 	mov edx, 0xCF8
  7907 000062D8 EF                  <1> 	out dx, eax
  7908 000062D9 BAFC0C0000          <1> 	mov edx, 0xCFC
  7909 000062DE ED                  <1> 	in eax, dx
  7910 000062DF 2305[2F620000]      <1> 	and eax, [pcidevidmask]
  7911 000062E5 8B1D[2B620000]      <1> 	mov ebx, [pcidevid]
  7912 000062EB 231D[2F620000]      <1> 	and ebx, [pcidevidmask]
  7913 000062F1 39D8                <1> 	cmp eax, ebx
  7914 000062F3 0F858BFFFFFF        <1> 	jne near searchpciret
  7915                              <1> .good:
  7916 000062F9 30C0                <1> 	xor al, al
  7917 000062FB 3805[2A620000]      <1> 	cmp [pcireqtype], al
  7918 00006301 0F842C000000        <1> 	je near dumppcidevice
  7919 00006307 B008                <1> 	mov al, 0x08
  7920 00006309 A2[29620000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7921 0000630E E877010000          <1> 	call getpciaddr
  7922 00006313 BAF80C0000          <1> 	mov edx, 0xCF8
  7923 00006318 EF                  <1> 	out dx, eax
  7924 00006319 BAFC0C0000          <1> 	mov edx, 0xCFC
  7925 0000631E ED                  <1> 	in eax, dx
  7926 0000631F C1C008              <1> 	rol eax, 8
  7927 00006322 3A05[B7620000]      <1> 	cmp al, [pcitype]
  7928 00006328 0F84A0000000        <1> 	je near foundpciaddr
  7929 0000632E E951FFFFFF          <1> 	jmp searchpciret
  7930                              <1> dumppcidevice:
  7931 00006333 30C0                <1> 	xor al, al
  7932 00006335 A2[29620000]        <1> 	mov [pciregister], al
  7933 0000633A E84B010000          <1> 	call getpciaddr
  7934 0000633F 89C1                <1> 	mov ecx, eax
  7935 00006341 C605[61310000]05    <1> 	mov byte [firsthexshown], 5
  7936 00006348 E829CEFFFF          <1> 	call showhex
  7937                              <1> dumppcidevicelp:
  7938 0000634D A2[29620000]        <1> 	mov [pciregister], al
  7939 00006352 E833010000          <1> 	call getpciaddr
  7940 00006357 BAF80C0000          <1> 	mov edx, 0xCF8
  7941 0000635C EF                  <1> 	out dx, eax
  7942 0000635D BAFC0C0000          <1> 	mov edx, 0xCFC
  7943 00006362 ED                  <1> 	in eax, dx
  7944 00006363 89C1                <1> 	mov ecx, eax
  7945 00006365 A0[29620000]        <1> 	mov al, [pciregister]
  7946 0000636A 0404                <1> 	add al, 4
  7947 0000636C C605[61310000]05    <1> 	mov byte [firsthexshown], 5
  7948 00006373 E8FECDFFFF          <1> 	call showhex
  7949 00006378 3C3C                <1> 	cmp al, 0x3C
  7950 0000637A 72D1                <1> 	jb dumppcidevicelp
  7951                              <1> dumppcidn:
  7952                              <1> %ifdef io.serial
  7953                              <1> 	mov esi, line
  7954                              <1> 	call print
  7955                              <1> %else
  7956 0000637C 803D[80250000]00    <1> 	cmp byte [charpos], 0
  7957 00006383 0F84FBFEFFFF        <1> 	je near searchpciret
  7958 00006389 BE[77890000]        <1> 	mov esi, line
  7959 0000638E E893B9FFFF          <1> 	call print
  7960                              <1> %endif
  7961 00006393 E9ECFEFFFF          <1> 	jmp searchpciret
  7962                              <1> nextpcibus:
  7963 00006398 30C0                <1> 	xor al, al
  7964 0000639A A2[27620000]        <1> 	mov [pcidevice], al
  7965 0000639F A0[26620000]        <1> 	mov al, [pcibus]
  7966 000063A4 3C7F                <1> 	cmp al, 1111111b
  7967 000063A6 730C                <1> 	jae donesearchpci
  7968 000063A8 FEC0                <1> 	inc al
  7969 000063AA A2[26620000]        <1> 	mov [pcibus], al
  7970 000063AF E9ADFEFFFF          <1> 	jmp searchpci
  7971                              <1> donesearchpci:
  7972 000063B4 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7973 000063B9 31D2                <1> 	xor edx, edx
  7974 000063BB 8815[B7620000]      <1> 	mov [pcitype], dl
  7975 000063C1 8915[2B620000]      <1> 	mov [pcidevid], edx
  7976 000063C7 891D[2F620000]      <1> 	mov [pcidevidmask], ebx
  7977 000063CD C3                  <1> 	ret
  7978                              <1> foundpciaddr:
  7979 000063CE B010                <1> 	mov al, 0x10
  7980 000063D0 A2[29620000]        <1> 	mov [pciregister], al
  7981 000063D5 803D[2A620000]02    <1> 	cmp byte [pcireqtype], 2
  7982 000063DC 7443                <1> 	je findpcimemaddr
  7983                              <1> findpciioaddr:
  7984 000063DE E8A7000000          <1> 	call getpciaddr
  7985 000063E3 BAF80C0000          <1> 	mov edx, 0xCF8
  7986 000063E8 EF                  <1> 	out dx, eax
  7987 000063E9 BAFC0C0000          <1> 	mov edx, 0xCFC
  7988 000063EE ED                  <1> 	in eax, dx
  7989 000063EF 89C3                <1> 	mov ebx, eax
  7990 000063F1 81E301000000        <1> 	and ebx, 1
  7991 000063F7 81FB00000000        <1> 	cmp ebx, 0
  7992 000063FD 0F846E000000        <1> 	je near notpciioaddr
  7993 00006403 2D01000000          <1> 	sub eax, 1
  7994 00006408 89C2                <1> 	mov edx, eax
  7995 0000640A 31DB                <1> 	xor ebx, ebx
  7996 0000640C 4B                  <1> 	dec ebx
  7997 0000640D 891D[2F620000]      <1> 	mov [pcidevidmask], ebx
  7998 00006413 43                  <1> 	inc ebx
  7999 00006414 881D[B7620000]      <1> 	mov [pcitype], bl
  8000 0000641A 891D[2B620000]      <1> 	mov [pcidevid], ebx
  8001 00006420 C3                  <1> 	ret
  8002                              <1> findpcimemaddr:
  8003 00006421 E864000000          <1> 	call getpciaddr
  8004 00006426 BAF80C0000          <1> 	mov edx, 0xCF8
  8005 0000642B EF                  <1> 	out dx, eax
  8006 0000642C BAFC0C0000          <1> 	mov edx, 0xCFC
  8007 00006431 ED                  <1> 	in eax, dx
  8008 00006432 89C3                <1> 	mov ebx, eax
  8009 00006434 81E301000000        <1> 	and ebx, 1
  8010 0000643A 81FB01000000        <1> 	cmp ebx, 1
  8011 00006440 0F842B000000        <1> 	je near notpciioaddr
  8012 00006446 C1E804              <1> 	shr eax, 4
  8013 00006449 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8014 0000644C 89C2                <1> 	mov edx, eax
  8015 0000644E 50                  <1> 	push eax
  8016 0000644F A1[41020000]        <1> 	mov eax, [basecache]
  8017 00006454 C1E004              <1> 	shl eax, 4
  8018 00006457 29C2                <1> 	sub edx, eax
  8019 00006459 58                  <1> 	pop eax
  8020 0000645A 31DB                <1> 	xor ebx, ebx
  8021 0000645C 4B                  <1> 	dec ebx
  8022 0000645D 891D[2F620000]      <1> 	mov [pcidevidmask], ebx
  8023 00006463 43                  <1> 	inc ebx
  8024 00006464 881D[B7620000]      <1> 	mov [pcitype], bl
  8025 0000646A 891D[2B620000]      <1> 	mov [pcidevid], ebx
  8026 00006470 C3                  <1> 	ret
  8027                              <1> notpciioaddr:
  8028 00006471 A0[29620000]        <1> 	mov al, [pciregister]
  8029 00006476 0404                <1> 	add al, 4
  8030 00006478 3C28                <1> 	cmp al, 0x28
  8031 0000647A 0F8704FEFFFF        <1> 	ja near searchpciret
  8032 00006480 A2[29620000]        <1> 	mov [pciregister], al
  8033 00006485 E954FFFFFF          <1> 	jmp findpciioaddr
  8034                              <1> getpciaddr:		;;puts it in eax and ebx
  8035 0000648A 31C0                <1> 			xor eax, eax
  8036 0000648C BB00000080          <1> 			mov ebx, 0x80000000
  8037 00006491 A0[26620000]        <1> 			mov al, [pcibus]
  8038 00006496 C1E010              <1> 			shl eax, 16
  8039 00006499 01C3                <1> 			add ebx, eax
  8040 0000649B 31C0                <1> 			xor eax, eax
  8041 0000649D A0[27620000]        <1> 			mov al, [pcidevice]
  8042 000064A2 C1E00B              <1> 			shl eax, 11
  8043 000064A5 01C3                <1> 			add ebx, eax
  8044 000064A7 31C0                <1> 			xor eax, eax
  8045 000064A9 A0[28620000]        <1> 			mov al, [pcifunction]
  8046 000064AE C1E008              <1> 			shl eax, 8
  8047 000064B1 01C3                <1> 			add ebx, eax
  8048 000064B3 31C0                <1> 			xor eax, eax
  8049 000064B5 A0[29620000]        <1> 			mov al, [pciregister]
  8050 000064BA 01C3                <1> 			add ebx, eax
  8051 000064BC 89D8                <1> 			mov eax, ebx
  8052 000064BE C3                  <1> 			ret
  8053                                      %include "source/disk.asm"
  8054                              <1> %ifdef disk.real
  8055                              <1> 	%include "source/drivers/disk/realmode.asm"
  8056                              <2> diskr:
  8057                              <2> 			;read from disk using real mode-it does not work with large files
  8058                              <2> 			;sector count in cl
  8059                              <2> 			;disk number in ch
  8060                              <2> 			;48 bit address with last 32 bits in ebx
  8061                              <2> 			;buffer in esi
  8062                              <2> 			;puts end of buffer in edi and end lba address in edx
  8063 000064BF 880D[EC640000]      <2> 	mov [sdlength], cl
  8064 000064C5 891D[ED640000]      <2> 	mov [sdaddress], ebx
  8065 000064CB 8935[4B660000]      <2> 	mov [oldesireal], esi
  8066 000064D1 66BE[F164]          <2> 	mov si, readdiskreal
  8067 000064D5 668935[D70C0000]    <2> 	mov [realmodeptr], si
  8068 000064DC BE[2D650000]        <2> 	mov esi, backfromrealread
  8069 000064E1 8935[D30C0000]      <2> 	mov [realmodereturn], esi
  8070 000064E7 E9D0A6FFFF          <2> 	jmp realmode
  8071 000064EC 00                  <2> sdlength db 0
  8072 000064ED 00000000            <2> sdaddress dd 0
  8073                              <2> 
  8074                              <2> [BITS 16]
  8075                              <2> readdiskreal:
  8076 000064F1 C706[1D65]1000      <2> 	mov word [dlen], 0x10
  8077 000064F7 C706[2165]0000      <2> 	mov word [daddress], 0
  8078 000064FD C706[2365]0001      <2> 	mov word [dsegm], 0x100
  8079 00006503 66891E[2565]        <2> 	mov [dlbaad], ebx
  8080 00006508 880E[1F65]          <2> 	mov [dreadlen], cl
  8081                              <2> ReadHardDisk:
  8082 0000650C BE[1D65]            <2> 	mov si, diskaddresspacket
  8083 0000650F 31C0                <2> 	xor ax, ax
  8084 00006511 B442                <2> 	mov ah, 0x42
  8085 00006513 8A16[1C65]          <2> 	mov dl, [dnumber]
  8086 00006517 CD13                <2> 	int 0x13
  8087 00006519 72F1                <2> 	jc ReadHardDisk
  8088 0000651B C3                  <2> 	ret
  8089                              <2> 
  8090 0000651C 80                  <2> dnumber db 0x80
  8091                              <2> diskaddresspacket:
  8092 0000651D 10                  <2> dlen:	db 0x10 ;size of packet
  8093 0000651E 00                  <2> 		db 0
  8094 0000651F 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8095 00006521 0000                <2> daddress:	dw 0	;address 0
  8096 00006523 0001                <2> dsegm:		dw 0x100	;segment
  8097                              <2> 		;start with known value for hd
  8098                              <2> dlbaad:
  8099 00006525 00000000            <2> 	dd 0	;lba address
  8100 00006529 00000000            <2> 	dd 0
  8101                              <2> [BITS 32]
  8102                              <2> backfromrealread:
  8103 0000652D 8B35[4B660000]      <2> 	mov esi, [oldesireal]
  8104 00006533 8B1D[ED640000]      <2> 	mov ebx, [sdaddress]
  8105 00006539 31C9                <2> 	xor ecx, ecx
  8106 0000653B 8A0D[EC640000]      <2> 	mov cl, [sdlength]
  8107 00006541 01CB                <2> 	add ebx, ecx
  8108 00006543 66B80800            <2> 	mov ax, LINEAR_SEL
  8109 00006547 8EE0                <2> 	mov fs, ax
  8110 00006549 BF00100000          <2> 	mov edi, 0x1000
  8111 0000654E B200                <2> 	mov dl, 0
  8112 00006550 D0E1                <2> 	shl cl, 1
  8113                              <2> copyfromrmodedisk:
  8114 00006552 648A07              <2> 	mov al, [fs:edi]
  8115 00006555 8806                <2> 	mov [esi], al
  8116 00006557 47                  <2> 	inc edi
  8117 00006558 46                  <2> 	inc esi
  8118 00006559 FECA                <2> 	dec dl
  8119 0000655B 80FA00              <2> 	cmp dl, 0
  8120 0000655E 75F2                <2> 	jne copyfromrmodedisk
  8121 00006560 FEC9                <2> 	dec cl
  8122 00006562 B200                <2> 	mov dl, 0
  8123 00006564 80F900              <2> 	cmp cl, 0
  8124 00006567 75E9                <2> 	jne copyfromrmodedisk
  8125 00006569 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8126 0000656D 8EE0                <2> 	mov fs, ax
  8127 0000656F 89F7                <2> 	mov edi, esi
  8128 00006571 8B35[4B660000]      <2> 	mov esi, [oldesireal]
  8129 00006577 89DA                <2> 	mov edx, ebx
  8130 00006579 8B1D[ED640000]      <2> 	mov ebx, [sdaddress]
  8131 0000657F C3                  <2> 	ret
  8132                              <2> 	
  8133                              <1> %else
  8134                              <1> 	%ifdef disk.protected
  8135                              <1> 		%include "source/drivers/disk/pata.asm"
  8136                              <1> 	%endif
  8137                              <1> %endif
  8138                              <1> %ifdef disk.none
  8139                              <1> loadfile:	xor edx, edx
  8140                              <1> 			cmp byte [edi], '&'
  8141                              <1> 			je .ret
  8142                              <1> 			mov edx, 404	;no files are found except &
  8143                              <1> 		.ret:
  8144                              <1> 			ret
  8145                              <1> %else
  8146                              <1> ;This loads files using the methods in the loaded driver
  8147                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8148                              <1> 			;returns with err code in edx and file end in edi
  8149 00006580 803F00              <1> 	cmp byte [edi], 0
  8150 00006583 0F8448000000        <1> 	je near nofileload
  8151 00006589 89FA                <1> 	mov edx, edi
  8152 0000658B BB[DCF90000]        <1> 	mov ebx, diskfileindex
  8153                              <1> nextnamechar:
  8154 00006590 8A07                <1> 	mov al, [edi]
  8155 00006592 3C26                <1> 	cmp al, '&'
  8156 00006594 7440                <1> 	je nullfile
  8157 00006596 8A23                <1> 	mov ah, [ebx]
  8158 00006598 47                  <1> 	inc edi
  8159 00006599 43                  <1> 	inc ebx
  8160 0000659A 88C1                <1> 	mov cl, al
  8161 0000659C 08E1                <1> 	or cl, ah
  8162 0000659E 80F900              <1> 	cmp cl, 0
  8163 000065A1 744E                <1> 	je equalfilenames
  8164 000065A3 80F920              <1> 	cmp cl, ' '
  8165 000065A6 7449                <1> 	je equalfilenames
  8166 000065A8 3C2A                <1> 	cmp al, '*'
  8167 000065AA 742B                <1> 	je equalfilenames2
  8168 000065AC 80FC00              <1> 	cmp ah, 0
  8169 000065AF 7410                <1> 	je nextfilename
  8170 000065B1 3C00                <1> 	cmp al, 0
  8171 000065B3 7404                <1> 	je getebxzero
  8172 000065B5 38E0                <1> 	cmp al, ah
  8173 000065B7 74D7                <1> 	je nextnamechar
  8174                              <1> getebxzero:
  8175 000065B9 8A23                <1> 	mov ah, [ebx]
  8176 000065BB 43                  <1> 	inc ebx
  8177 000065BC 80FC00              <1> 	cmp ah, 0
  8178 000065BF 75F8                <1> 	jne getebxzero
  8179                              <1> nextfilename:
  8180 000065C1 81C308000000        <1> 	add ebx, 8		;next descriptor
  8181 000065C7 89D7                <1> 	mov edi, edx
  8182 000065C9 81FB[DAFB0000]      <1> 	cmp ebx, enddiskfileindex
  8183 000065CF 72BF                <1> 	jb nextnamechar
  8184                              <1> nofileload:
  8185 000065D1 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8186                              <1> nullfile:
  8187 000065D6 C3                  <1> 	ret
  8188                              <1> equalfilenames2:
  8189 000065D7 81EB02000000        <1> 	sub ebx, 2
  8190                              <1> eqfilefind:
  8191 000065DD 43                  <1> 	inc ebx
  8192 000065DE 81FB[DAFB0000]      <1> 	cmp ebx, enddiskfileindex
  8193 000065E4 0F83E7FFFFFF        <1> 	jae near nofileload
  8194 000065EA 8A03                <1> 	mov al, [ebx]
  8195 000065EC 3C00                <1> 	cmp al, 0
  8196 000065EE 75ED                <1> 	jne eqfilefind
  8197 000065F0 43                  <1> 	inc ebx
  8198                              <1> equalfilenames:
  8199 000065F1 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8200 000065F4 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8201 000065F6 031D[DEFB0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8202 000065FC 31C9                <1> 	xor ecx, ecx
  8203 000065FE 88C1                <1> 	mov cl, al			;get excess number of sectors
  8204 00006600 C0E102              <1> 	shl cl, 2
  8205 00006603 C0E902              <1> 	shr cl, 2			;cut off at 64
  8206 00006606 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8207 00006608 B500                <1> 	mov ch, 0			;drive 0
  8208 0000660A C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8209                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8210 0000660D A3[4F660000]        <1> 	mov [filetracks], eax
  8211 00006612 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8212 00006614 89DA                <1> 	mov edx, ebx
  8213 00006616 80F900              <1> 	cmp cl, 0
  8214 00006619 7405                <1> 	je copytracksforfile
  8215 0000661B E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8216                              <1> copytracksforfile:
  8217 00006620 A1[4F660000]        <1> 	mov eax, [filetracks]
  8218 00006625 3D00000000          <1> 	cmp eax, 0
  8219 0000662A 7419                <1> 	je donecopyfile
  8220 0000662C 48                  <1> 	dec eax
  8221 0000662D A3[4F660000]        <1> 	mov [filetracks], eax
  8222 00006632 89D3                <1> 	mov ebx, edx	;get end lba
  8223 00006634 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8224 00006636 8A2D[DDFB0000]      <1> 	mov ch, [DriveNumber]
  8225 0000663C 89FE                <1> 	mov esi, edi	;reset buffer
  8226 0000663E E87CFEFFFF          <1> 	call diskr
  8227 00006643 EBDB                <1> 	jmp copytracksforfile
  8228                              <1> donecopyfile:
  8229 00006645 BA00000000          <1> 	mov edx, 0	;no error
  8230 0000664A C3                  <1> 	ret
  8231                              <1> 
  8232 0000664B 00000000            <1> oldesireal dd 0
  8233 0000664F 00000000            <1> filetracks dd 0
  8234 00006653 00                  <1> lbad1 db 0
  8235 00006654 00                  <1> lbad2 db 0
  8236 00006655 00                  <1> lbad3 db 0
  8237 00006656 00                  <1> lbad4 db 0
  8238 00006657 00                  <1> lbad5 db 0
  8239 00006658 00                  <1> lbad6 db 0
  8240 00006659 6400                <1> segments dw 100
  8241                              <1> %endif
  8242                                      %include "source/threads.asm"
  8243                              <1> %ifdef threads.included	
  8244                              <1> nwcmdst:
  8245 0000665B 31C0                <1> 	xor eax, eax
  8246 0000665D BC[C20D0100]        <1> 	mov esp, stackend
  8247 00006662 A2[1F670000]        <1> 	mov [threadson], al
  8248 00006667 A3[20670000]        <1> 	mov [currentthread], eax
  8249 0000666C 0504000000          <1> 	add eax, 4
  8250 00006671 A3[1B670000]        <1> 	mov [lastthread], eax
  8251 00006676 FB                  <1> 	sti
  8252 00006677 E920C6FFFF          <1> 	jmp nwcmd
  8253                              <1> 
  8254                              <1> nomorethreadspace:
  8255 0000667C BE[92660000]        <1> 	mov esi, nmts
  8256 00006681 E8A0B6FFFF          <1> 	call print
  8257 00006686 C605[1F670000]00    <1> 	mov byte [threadson], 0
  8258 0000668D E90AC6FFFF          <1> 	jmp nwcmd
  8259 00006692 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8260 0000669B 6572666C6F770A00    <1>
  8261                              <1> 
  8262                              <1> nomorestackspace:
  8263 000066A3 BE[AF660000]        <1> 	mov esi, nmss
  8264 000066A8 E879B6FFFF          <1> 	call print
  8265 000066AD EBAC                <1> 	jmp nwcmdst
  8266 000066AF 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8267 000066B8 72666C6F770A00      <1>
  8268                              <1> 	
  8269                              <1> threadswitch:
  8270 000066BF FA                  <1> 	cli
  8271 000066C0 60                  <1> 	pushad
  8272 000066C1 BF[700A0300]        <1> 	mov edi, threadlist
  8273 000066C6 A1[20670000]        <1> 	mov eax, [currentthread]
  8274 000066CB 40                  <1> 	inc eax
  8275 000066CC A3[20670000]        <1> 	mov [currentthread], eax
  8276 000066D1 6648                <1> 	dec ax
  8277 000066D3 C1E002              <1> 	shl eax, 2
  8278 000066D6 01C7                <1> 	add edi, eax
  8279 000066D8 8927                <1> 	mov [edi], esp
  8280 000066DA 81C704000000        <1> 	add edi, 4
  8281 000066E0 81FF[701A0300]      <1> 	cmp edi, threadlistend
  8282 000066E6 0F830D000000        <1> 	jae near nookespthread
  8283 000066EC 8B07                <1> 	mov eax, [edi]
  8284 000066EE 3D00000000          <1> 	cmp eax, 0
  8285 000066F3 0F8519000000        <1> 	jne near okespthread
  8286                              <1> nookespthread:
  8287 000066F9 BF[700A0300]        <1> 	mov edi, threadlist
  8288 000066FE 31C0                <1> 	xor eax, eax
  8289 00006700 A3[20670000]        <1> 	mov [currentthread], eax
  8290 00006705 8B07                <1> 	mov eax, [edi]
  8291 00006707 3D00000000          <1> 	cmp eax, 0
  8292 0000670C 0F8449FFFFFF        <1> 	je near nwcmdst
  8293                              <1> okespthread:
  8294 00006712 89C4                <1> 	mov esp, eax
  8295 00006714 B020                <1> 	mov al, 0x20
  8296 00006716 E620                <1> 	out 0x20, al
  8297 00006718 61                  <1> 	popad
  8298 00006719 FB                  <1> 	sti
  8299 0000671A CF                  <1> 	iret
  8300                              <1> 
  8301                              <1> %endif
  8302 0000671B 04000000            <1> 	lastthread dd 4
  8303 0000671F 00                  <1> 	threadson db 0
  8304 00006720 00000000            <1> 	currentthread dd 0
  8305                                  %ifdef gui.included
  8306                                      %include "source/gui/gui.asm"
  8307                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8308 00006724 31C0                <1> 	xor eax, eax
  8309 00006726 31DB                <1> 	xor ebx, ebx
  8310 00006728 31C9                <1> 	xor ecx, ecx
  8311 0000672A 31D2                <1> 	xor edx, edx
  8312 0000672C E871080000          <1> 	call guisetup
  8313                              <1> guiloop:
  8314 00006731 E8EEF0FFFF          <1> 	call cursorgui
  8315                              <1> guistart:
  8316 00006736 E8C2F4FFFF          <1> 	call getkey
  8317 0000673B C605[217C0000]00    <1> 	mov byte [copygui], 0
  8318 00006742 EBF2                <1> 	jmp guistart
  8319                              <1> 
  8320                              <1> %include "source/gui/bmp.asm"
  8321                              <2> showbmp:
  8322 00006744 668B06              <2> 	mov ax, [esi]
  8323 00006747 663D424D            <2> 	cmp ax, "BM"
  8324 0000674B 0F85BB000000        <2> 	jne near endedbmp
  8325 00006751 8B3D[47570000]      <2> 	mov edi, [physbaseptr]
  8326 00006757 6689D0              <2> 	mov ax, dx
  8327 0000675A 6689CB              <2> 	mov bx, cx
  8328 0000675D 31C9                <2> 	xor ecx, ecx
  8329 0000675F 31D2                <2> 	xor edx, edx
  8330 00006761 6689D9              <2> 	mov cx, bx
  8331 00006764 6689C2              <2> 	mov dx, ax
  8332 00006767 01D7                <2> 	add edi, edx
  8333 00006769 01D7                <2> 	add edi, edx
  8334 0000676B 31D2                <2> 	xor edx, edx
  8335 0000676D 668B15[1F580000]    <2> 	mov dx, [resolutionx2]
  8336 00006774 034E16              <2> 	add ecx, [esi + 22]
  8337                              <2> bmplocloop:
  8338 00006777 52                  <2> 	push edx
  8339 00006778 31C0                <2> 	xor eax, eax
  8340 0000677A 6689D0              <2> 	mov ax, dx
  8341 0000677D F7E1                <2> 	mul ecx
  8342 0000677F 5A                  <2> 	pop edx
  8343 00006780 663B0D[33570000]    <2> 	cmp cx, [resolutiony]
  8344 00006787 7609                <2> 	jbe .nofixy
  8345 00006789 31C9                <2> 	xor ecx, ecx
  8346 0000678B 668B0D[33570000]    <2> 	mov cx, [resolutiony]
  8347                              <2> .nofixy:
  8348 00006792 01C7                <2> 	add edi, eax
  8349 00006794 8B5612              <2> 	mov edx, [esi + 18]
  8350 00006797 8B4E16              <2> 	mov ecx, [esi + 22]
  8351 0000679A 8B460A              <2> 	mov eax, [esi + 10]
  8352 0000679D 8B5E02              <2> 	mov ebx, [esi + 2]
  8353 000067A0 01F3                <2> 	add ebx, esi
  8354 000067A2 891D[12680000]      <2> 	mov [bmpend], ebx
  8355 000067A8 89D3                <2> 	mov ebx, edx
  8356 000067AA 01C6                <2> 	add esi, eax
  8357                              <2> ldxbmp2:
  8358 000067AC 31D2                <2> 	xor edx, edx
  8359 000067AE 668B15[31570000]    <2> 	mov dx, [resolutionx]
  8360 000067B5 39D3                <2> 	cmp ebx, edx
  8361 000067B7 7702                <2> 	ja ldxbmp
  8362 000067B9 89DA                <2> 	mov edx, ebx
  8363                              <2> ldxbmp:
  8364 000067BB 668B06              <2> 	mov ax, [esi]
  8365 000067BE 668907              <2> 	mov [edi], ax
  8366 000067C1 81C702000000        <2> 	add edi, 2
  8367 000067C7 81C602000000        <2> 	add esi, 2
  8368 000067CD 3B35[12680000]      <2> 	cmp esi, [bmpend]
  8369 000067D3 7737                <2> 	ja endedbmp
  8370 000067D5 4A                  <2> 	dec edx
  8371 000067D6 81FA00000000        <2> 	cmp edx, 0
  8372 000067DC 77DD                <2> 	ja ldxbmp
  8373 000067DE 31D2                <2> 	xor edx, edx
  8374 000067E0 668B15[31570000]    <2> 	mov dx, [resolutionx]
  8375 000067E7 39D3                <2> 	cmp ebx, edx
  8376 000067E9 7610                <2> 	jbe .notover
  8377                              <2> .over:
  8378 000067EB 01DE                <2> 	add esi, ebx
  8379 000067ED 01DE                <2> 	add esi, ebx
  8380 000067EF 29D6                <2> 	sub esi, edx
  8381 000067F1 29D6                <2> 	sub esi, edx
  8382 000067F3 01DF                <2> 	add edi, ebx
  8383 000067F5 01DF                <2> 	add edi, ebx
  8384 000067F7 29D7                <2> 	sub edi, edx
  8385 000067F9 29D7                <2> 	sub edi, edx
  8386                              <2> .notover:
  8387 000067FB 29DF                <2> 	sub edi, ebx
  8388 000067FD 29DF                <2> 	sub edi, ebx
  8389 000067FF 29D7                <2> 	sub edi, edx
  8390 00006801 29D7                <2> 	sub edi, edx
  8391 00006803 49                  <2> 	dec ecx
  8392 00006804 81F900000000        <2> 	cmp ecx, 0
  8393 0000680A 77A0                <2> 	ja ldxbmp2
  8394                              <2> endedbmp:
  8395 0000680C E844030000          <2> 	call switchmousepos2
  8396 00006811 C3                  <2> 	ret
  8397                              <2> 	
  8398 00006812 00000000            <2> 	bmpend dd 0
  8399                              <1> %include "source/gui/circle.asm"
  8400                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8401 00006816 55                  <2> 	push ebp
  8402 00006817 663D0000            <2> 	cmp ax, 0
  8403 0000681B 770A                <2> 	ja .nozerocircle
  8404 0000681D E8F41B0000          <2> 	call putpixel	;the easiest circle ever
  8405 00006822 E9F7000000          <2> 	jmp .done
  8406                              <2> .nozerocircle:
  8407 00006827 6689F5              <2> 	mov bp, si
  8408 0000682A 6650                <2> 	push ax
  8409 0000682C E8261C0000          <2> 	call getpixelmem
  8410 00006831 31C0                <2> 	xor eax, eax
  8411 00006833 6658                <2> 	pop ax
  8412 00006835 BE01000000          <2> 	mov esi, 1
  8413 0000683A 29C6                <2> 	sub esi, eax
  8414 0000683C 89C1                <2> 	mov ecx, eax
  8415 0000683E 31C0                <2> 	xor eax, eax
  8416 00006840 66A1[1F580000]      <2> 	mov ax, [resolutionx2]
  8417 00006846 F7E1                <2> 	mul ecx
  8418 00006848 50                  <2> 	push eax
  8419 00006849 31D2                <2> 	xor edx, edx
  8420 0000684B 01C7                <2> 	add edi, eax
  8421 0000684D 66892F              <2> 	mov [edi], bp
  8422 00006850 29C7                <2> 	sub edi, eax
  8423 00006852 29C7                <2> 	sub edi, eax
  8424 00006854 66892F              <2> 	mov [edi], bp
  8425 00006857 01C7                <2> 	add edi, eax
  8426 00006859 D1E1                <2> 	shl ecx, 1
  8427 0000685B 01CF                <2> 	add edi, ecx
  8428 0000685D 66892F              <2> 	mov [edi], bp
  8429 00006860 D1E1                <2> 	shl ecx, 1
  8430 00006862 29CF                <2> 	sub edi, ecx
  8431 00006864 66892F              <2> 	mov [edi], bp
  8432 00006867 D1E9                <2> 	shr ecx, 1
  8433 00006869 01CF                <2> 	add edi, ecx
  8434 0000686B D1E9                <2> 	shr ecx, 1
  8435 0000686D B802000000          <2> 	mov eax, 2
  8436 00006872 F7E1                <2> 	mul ecx
  8437 00006874 48                  <2> 	dec eax
  8438 00006875 F7D0                <2> 	not eax ;make it negative
  8439 00006877 A3[24690000]        <2> 	mov [.ddF_y], eax
  8440 0000687C 58                  <2> 	pop eax
  8441 0000687D BB01000000          <2> 	mov ebx, 1
  8442 00006882 891D[20690000]      <2> 	mov [.ddF_x], ebx
  8443 00006888 4B                  <2> 	dec ebx
  8444 00006889 31D2                <2> 	xor edx, edx
  8445 0000688B E904000000          <2> 	jmp .lp
  8446                              <2> .lpb:
  8447 00006890 D1EA                <2> 	shr edx, 1
  8448 00006892 D1E9                <2> 	shr ecx, 1
  8449                              <2> .lp:	;it starts this with the center in edi
  8450                              <2> 		;color in bp
  8451                              <2> 		;ddF_x in memory
  8452                              <2> 		;x*resolutionx2 in ebx
  8453                              <2> 		;x in edx
  8454                              <2> 		;ddF_y in memory
  8455                              <2> 		;y*resolutionx2 in eax
  8456                              <2> 		;f in esi
  8457                              <2> 		;y in ecx
  8458 00006894 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8459 0000689A 7717                <2> 	ja	.noddF_y
  8460 0000689C 49                  <2> 	dec ecx
  8461 0000689D 2B05[1F580000]      <2> 	sub eax, [resolutionx2]
  8462 000068A3 8105[24690000]0200- <2> 	add dword [.ddF_y], 2
  8463 000068AB 0000                <2>
  8464 000068AD 0335[24690000]      <2> 	add esi, [.ddF_y]
  8465                              <2> .noddF_y:
  8466 000068B3 42                  <2> 	inc edx
  8467 000068B4 031D[1F580000]      <2> 	add ebx, [resolutionx2]
  8468 000068BA 8105[20690000]0200- <2> 	add dword [.ddF_x], 2
  8469 000068C2 0000                <2>
  8470 000068C4 0335[20690000]      <2> 	add esi, [.ddF_x]
  8471                              <2> 
  8472 000068CA D1E2                <2> 	shl edx, 1
  8473 000068CC D1E1                <2> 	shl ecx, 1
  8474 000068CE 01D7                <2> 	add edi, edx
  8475 000068D0 01C7                <2> 	add edi, eax
  8476 000068D2 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8477 000068D5 D1E2                <2> 	shl edx, 1
  8478 000068D7 29D7                <2> 	sub edi, edx
  8479 000068D9 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8480 000068DC D1E0                <2> 	shl eax, 1
  8481 000068DE 29C7                <2> 	sub edi, eax
  8482 000068E0 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8483 000068E3 01D7                <2> 	add edi, edx
  8484 000068E5 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8485 000068E8 D1E8                <2> 	shr eax, 1
  8486 000068EA D1EA                <2> 	shr edx, 1
  8487 000068EC 01C7                <2> 	add edi, eax
  8488 000068EE 29D7                <2> 	sub edi, edx
  8489                              <2> 
  8490 000068F0 39D1                <2> 	cmp ecx, edx
  8491 000068F2 749C                <2> 	je .lpb
  8492                              <2> 
  8493 000068F4 01DF                <2> 	add edi, ebx
  8494 000068F6 01CF                <2> 	add edi, ecx
  8495 000068F8 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8496 000068FB D1E1                <2> 	shl ecx, 1
  8497 000068FD 29CF                <2> 	sub edi, ecx
  8498 000068FF 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8499 00006902 D1E3                <2> 	shl ebx, 1
  8500 00006904 29DF                <2> 	sub edi, ebx
  8501 00006906 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8502 00006909 01CF                <2> 	add edi, ecx
  8503 0000690B 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8504 0000690E D1EB                <2> 	shr ebx, 1
  8505 00006910 D1E9                <2> 	shr ecx, 1
  8506 00006912 01DF                <2> 	add edi, ebx
  8507 00006914 29CF                <2> 	sub edi, ecx
  8508 00006916 39CA                <2> 	cmp edx, ecx
  8509 00006918 0F8272FFFFFF        <2> 	jb .lpb
  8510                              <2> .done:
  8511 0000691E 5D                  <2> 	pop ebp
  8512 0000691F C3                  <2> 	ret
  8513                              <2> 	
  8514 00006920 00000000            <2> .ddF_x dd 0
  8515 00006924 00000000            <2> .ddF_y dd 0
  8516                              <2> 
  8517                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8518 00006928 55                  <2> 	push ebp
  8519 00006929 663D0000            <2> 	cmp ax, 0
  8520 0000692D 770A                <2> 	ja .nozerocircle
  8521 0000692F E8E21A0000          <2> 	call putpixel	;the easiest circle ever
  8522 00006934 E95A010000          <2> 	jmp .done
  8523                              <2> .nozerocircle:
  8524 00006939 6689F5              <2> 	mov bp, si
  8525 0000693C 6650                <2> 	push ax
  8526 0000693E E8141B0000          <2> 	call getpixelmem
  8527 00006943 31C0                <2> 	xor eax, eax
  8528 00006945 6658                <2> 	pop ax
  8529 00006947 BE01000000          <2> 	mov esi, 1
  8530 0000694C 29C6                <2> 	sub esi, eax
  8531 0000694E 89C1                <2> 	mov ecx, eax
  8532 00006950 31C0                <2> 	xor eax, eax
  8533 00006952 66A1[1F580000]      <2> 	mov ax, [resolutionx2]
  8534 00006958 F7E1                <2> 	mul ecx
  8535 0000695A 50                  <2> 	push eax
  8536 0000695B 31D2                <2> 	xor edx, edx
  8537 0000695D 01C7                <2> 	add edi, eax
  8538 0000695F 66892F              <2> 	mov [edi], bp
  8539 00006962 29C7                <2> 	sub edi, eax
  8540 00006964 29C7                <2> 	sub edi, eax
  8541 00006966 66892F              <2> 	mov [edi], bp
  8542 00006969 01C7                <2> 	add edi, eax
  8543 0000696B D1E1                <2> 	shl ecx, 1
  8544 0000696D 01CF                <2> 	add edi, ecx
  8545 0000696F 51                  <2> 	push ecx
  8546                              <2> .s0:
  8547 00006970 66892F              <2> 	mov [edi], bp
  8548 00006973 81EF02000000        <2> 	sub edi, 2
  8549 00006979 49                  <2> 	dec ecx
  8550 0000697A 81F900000000        <2> 	cmp ecx, 0
  8551 00006980 75EE                <2> 	jne .s0
  8552 00006982 66892F              <2> 	mov [edi], bp
  8553 00006985 59                  <2> 	pop ecx
  8554 00006986 01CF                <2> 	add edi, ecx
  8555 00006988 D1E9                <2> 	shr ecx, 1
  8556 0000698A B802000000          <2> 	mov eax, 2
  8557 0000698F F7E1                <2> 	mul ecx
  8558 00006991 48                  <2> 	dec eax
  8559 00006992 F7D0                <2> 	not eax ;make it negative
  8560 00006994 A3[996A0000]        <2> 	mov [.ddF_y], eax
  8561 00006999 58                  <2> 	pop eax
  8562 0000699A BB01000000          <2> 	mov ebx, 1
  8563 0000699F 891D[956A0000]      <2> 	mov [.ddF_x], ebx
  8564 000069A5 4B                  <2> 	dec ebx
  8565 000069A6 31D2                <2> 	xor edx, edx
  8566 000069A8 E904000000          <2> 	jmp .lp
  8567                              <2> .lpb:
  8568 000069AD D1EA                <2> 	shr edx, 1
  8569 000069AF D1E9                <2> 	shr ecx, 1
  8570                              <2> .lp:	;it starts this with the center in edi
  8571                              <2> 		;color in bp
  8572                              <2> 		;ddF_x in memory
  8573                              <2> 		;x*resolutionx2 in ebx
  8574                              <2> 		;x in edx
  8575                              <2> 		;ddF_y in memory
  8576                              <2> 		;y*resolutionx2 in eax
  8577                              <2> 		;f in esi
  8578                              <2> 		;y in ecx
  8579 000069B1 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8580 000069B7 7717                <2> 	ja	.noddF_y
  8581 000069B9 49                  <2> 	dec ecx
  8582 000069BA 2B05[1F580000]      <2> 	sub eax, [resolutionx2]
  8583 000069C0 8105[996A0000]0200- <2> 	add dword [.ddF_y], 2
  8584 000069C8 0000                <2>
  8585 000069CA 0335[996A0000]      <2> 	add esi, [.ddF_y]
  8586                              <2> .noddF_y:
  8587 000069D0 42                  <2> 	inc edx
  8588 000069D1 031D[1F580000]      <2> 	add ebx, [resolutionx2]
  8589 000069D7 8105[956A0000]0200- <2> 	add dword [.ddF_x], 2
  8590 000069DF 0000                <2>
  8591 000069E1 0335[956A0000]      <2> 	add esi, [.ddF_x]
  8592                              <2> 
  8593 000069E7 D1E2                <2> 	shl edx, 1
  8594 000069E9 D1E1                <2> 	shl ecx, 1
  8595 000069EB 52                  <2> 	push edx
  8596 000069EC 29D7                <2> 	sub edi, edx
  8597 000069EE 01C7                <2> 	add edi, eax
  8598 000069F0 81FA00000000        <2> 	cmp edx, 0
  8599 000069F6 7412                <2> 	je .nos1
  8600                              <2> .s1:
  8601 000069F8 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8602 000069FB 81C702000000        <2> 	add edi, 2
  8603 00006A01 4A                  <2> 	dec edx
  8604 00006A02 81FA00000000        <2> 	cmp edx, 0
  8605 00006A08 75EE                <2> 	jne .s1
  8606                              <2> .nos1:
  8607 00006A0A 66892F              <2> 	mov [edi], bp
  8608 00006A0D 5A                  <2> 	pop edx
  8609 00006A0E 52                  <2> 	push edx
  8610 00006A0F 29C7                <2> 	sub edi, eax
  8611 00006A11 29C7                <2> 	sub edi, eax
  8612 00006A13 81FA00000000        <2> 	cmp edx, 0
  8613 00006A19 7412                <2> 	je .nos2
  8614                              <2> .s2:
  8615 00006A1B 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8616 00006A1E 81EF02000000        <2> 	sub edi, 2
  8617 00006A24 4A                  <2> 	dec edx
  8618 00006A25 81FA00000000        <2> 	cmp edx, 0
  8619 00006A2B 75EE                <2> 	jne .s2
  8620                              <2> .nos2:
  8621 00006A2D 66892F              <2> 	mov [edi], bp
  8622 00006A30 5A                  <2> 	pop edx
  8623 00006A31 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8624 00006A33 01D7                <2> 	add edi, edx
  8625                              <2> 
  8626 00006A35 39D1                <2> 	cmp ecx, edx
  8627 00006A37 0F8470FFFFFF        <2> 	je .lpb
  8628                              <2> 
  8629 00006A3D 51                  <2> 	push ecx
  8630 00006A3E 01DF                <2> 	add edi, ebx
  8631 00006A40 29CF                <2> 	sub edi, ecx
  8632 00006A42 81F900000000        <2> 	cmp ecx, 0
  8633 00006A48 7412                <2> 	je .nos3
  8634                              <2> .s3:
  8635 00006A4A 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8636 00006A4D 81C702000000        <2> 	add edi, 2
  8637 00006A53 49                  <2> 	dec ecx
  8638 00006A54 81F900000000        <2> 	cmp ecx, 0
  8639 00006A5A 75EE                <2> 	jne .s3
  8640                              <2> .nos3:
  8641 00006A5C 66892F              <2> 	mov [edi], bp
  8642 00006A5F 59                  <2> 	pop ecx
  8643 00006A60 51                  <2> 	push ecx
  8644 00006A61 29DF                <2> 	sub edi, ebx
  8645 00006A63 29DF                <2> 	sub edi, ebx
  8646 00006A65 81F900000000        <2> 	cmp ecx, 0
  8647 00006A6B 7412                <2> 	je .nos4
  8648                              <2> .s4:
  8649 00006A6D 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8650 00006A70 81EF02000000        <2> 	sub edi, 2
  8651 00006A76 49                  <2> 	dec ecx
  8652 00006A77 81F900000000        <2> 	cmp ecx, 0
  8653 00006A7D 75EE                <2> 	jne .s4
  8654                              <2> .nos4:
  8655 00006A7F 66892F              <2> 	mov [edi], bp
  8656 00006A82 59                  <2> 	pop ecx
  8657 00006A83 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8658 00006A85 01CF                <2> 	add edi, ecx
  8659                              <2> 
  8660 00006A87 D1EA                <2> 	shr edx, 1
  8661 00006A89 D1E9                <2> 	shr ecx, 1
  8662 00006A8B 39CA                <2> 	cmp edx, ecx
  8663 00006A8D 0F821EFFFFFF        <2> 	jb .lp
  8664                              <2> .done:
  8665 00006A93 5D                  <2> 	pop ebp
  8666 00006A94 C3                  <2> 	ret
  8667                              <2> 	
  8668 00006A95 00000000            <2> .ddF_x dd 0
  8669 00006A99 00000000            <2> .ddF_y dd 0
  8670                              <1> %include "source/gui/cursor.asm"
  8671                              <2> clearmousecursor:
  8672 00006A9D BE[056E0000]        <2> 		mov esi, background
  8673 00006AA2 8B3D[47570000]      <2> 		mov edi, [physbaseptr]
  8674 00006AA8 31D2                <2> 		xor edx, edx
  8675 00006AAA 31C9                <2> 		xor ecx, ecx
  8676 00006AAC 668B15[115A0000]    <2> 		mov dx, [lastmouseposition]
  8677 00006AB3 668B0D[135A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8678 00006ABA 01D7                <2> 		add edi, edx
  8679 00006ABC 31D2                <2> 		xor edx, edx
  8680 00006ABE 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  8681 00006AC5 81F900000000        <2> 		cmp ecx, 0
  8682 00006ACB 7408                <2> 		je .nomul
  8683 00006ACD 52                  <2> 		push edx
  8684 00006ACE 89D0                <2> 		mov eax, edx
  8685 00006AD0 F7E1                <2> 		mul ecx
  8686 00006AD2 01C7                <2> 		add edi, eax
  8687 00006AD4 5A                  <2> 		pop edx
  8688                              <2> .nomul:
  8689                              <2> %ifdef 	gui.background
  8690                              <2> 		cmp dword [backgroundimage], 0
  8691                              <2> 		je .noyclr
  8692                              <2> 		mov esi, [backgroundimage]
  8693                              <2> 		sub edi, [physbaseptr]
  8694                              <2> 		add esi, edi
  8695                              <2> 		add edi, [physbaseptr]
  8696                              <2> .backlp:
  8697                              <2> 		xor ebx, ebx
  8698                              <2> .noyback:
  8699                              <2> 		mov eax, [esi + ebx]
  8700                              <2> 		mov [edi + ebx], eax
  8701                              <2> 		add ebx, 4
  8702                              <2> 		cmp ebx, 16
  8703                              <2> 		jne .noyback
  8704                              <2> 		add edi, edx
  8705                              <2> 		add esi, edx
  8706                              <2> 		inc cx
  8707                              <2> 		cmp cx, 16
  8708                              <2> 		jb .backlp
  8709                              <2> 		ret
  8710                              <2> %endif
  8711                              <2> .noyclr:
  8712 00006AD5 668B06              <2> 		mov ax, [esi]
  8713 00006AD8 C1C010              <2> 		rol eax, 16
  8714 00006ADB 668B06              <2> 		mov ax, [esi]
  8715 00006ADE 8907                <2> 		mov [edi], eax
  8716 00006AE0 894704              <2> 		mov [edi + 4], eax
  8717 00006AE3 894708              <2> 		mov [edi + 8], eax
  8718 00006AE6 89470C              <2> 		mov [edi + 12], eax
  8719 00006AE9 01D7                <2> 		add edi, edx
  8720 00006AEB 6641                <2> 		inc cx
  8721 00006AED 6681F91000          <2> 		cmp cx, 16
  8722 00006AF2 72E1                <2> 		jb .noyclr
  8723 00006AF4 C3                  <2> 		ret
  8724                              <2> 
  8725                              <2> switchmousepos:		;;switch were the mouse is located
  8726 00006AF5 BE[BB2E0100]        <2> 		mov esi, mousecolorbuf
  8727 00006AFA 8B3D[47570000]      <2> 		mov edi, [physbaseptr]
  8728 00006B00 31D2                <2> 		xor edx, edx
  8729 00006B02 31C9                <2> 		xor ecx, ecx
  8730 00006B04 668B15[115A0000]    <2> 		mov dx, [lastmouseposition]
  8731 00006B0B 668B0D[135A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8732 00006B12 01D7                <2> 		add edi, edx
  8733 00006B14 31D2                <2> 		xor edx, edx
  8734 00006B16 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  8735 00006B1D 6681F90000          <2> 		cmp cx, 0
  8736 00006B22 740B                <2> 		je noswmsy
  8737 00006B24 01D7                <2> swmsy:		add edi, edx
  8738 00006B26 6649                <2> 		dec cx
  8739 00006B28 6681F90000          <2> 		cmp cx, 0
  8740 00006B2D 75F5                <2> 		jne swmsy
  8741 00006B2F 8B06                <2> noswmsy:	mov eax, [esi]
  8742 00006B31 8B5E04              <2> 		mov ebx, [esi + 4]
  8743 00006B34 8907                <2> 		mov [edi], eax
  8744 00006B36 895F04              <2> 		mov [edi + 4], ebx
  8745 00006B39 8B4608              <2> 		mov eax, [esi + 8]
  8746 00006B3C 8B5E0C              <2> 		mov ebx, [esi + 12]
  8747 00006B3F 894708              <2> 		mov [edi + 8], eax
  8748 00006B42 895F0C              <2> 		mov [edi + 12], ebx
  8749 00006B45 01D7                <2> 		add edi, edx
  8750 00006B47 81C610000000        <2> 		add esi, 16
  8751 00006B4D 81FE[BB2F0100]      <2> 		cmp esi, mcolorend
  8752 00006B53 72DA                <2> 		jb noswmsy
  8753                              <2> 		
  8754                              <2> switchmousepos2:
  8755 00006B55 BE[BB2E0100]        <2> 		mov esi, mousecolorbuf
  8756 00006B5A 8B3D[47570000]      <2> 		mov edi, [physbaseptr]
  8757 00006B60 31D2                <2> 		xor edx, edx
  8758 00006B62 31C9                <2> 		xor ecx, ecx
  8759 00006B64 668B15[155A0000]    <2> 		mov dx, [mousecursorposition]
  8760 00006B6B 668B0D[175A0000]    <2> 		mov cx, [mousecursorposition + 2]
  8761 00006B72 01D7                <2> 		add edi, edx
  8762 00006B74 31D2                <2> 		xor edx, edx
  8763 00006B76 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  8764 00006B7D 6681F90000          <2> 		cmp cx, 0
  8765 00006B82 740B                <2> 		je noswmsy2
  8766 00006B84 01D7                <2> swmsy2:		add edi, edx
  8767 00006B86 6649                <2> 		dec cx
  8768 00006B88 6681F90000          <2> 		cmp cx, 0
  8769 00006B8D 75F5                <2> 		jne swmsy2
  8770 00006B8F 8B07                <2> noswmsy2:	mov eax, [edi]
  8771 00006B91 8B5F04              <2> 		mov ebx, [edi + 4]
  8772 00006B94 8906                <2> 		mov [esi], eax
  8773 00006B96 895E04              <2> 		mov [esi + 4], ebx
  8774 00006B99 8B4708              <2> 		mov eax, [edi + 8]
  8775 00006B9C 8B5F0C              <2> 		mov ebx, [edi + 12]
  8776 00006B9F 894608              <2> 		mov [esi + 8], eax
  8777 00006BA2 895E0C              <2> 		mov [esi + 12], ebx
  8778 00006BA5 01D7                <2> 		add edi, edx
  8779 00006BA7 81C610000000        <2> 		add esi, 16
  8780 00006BAD 81FE[BB2F0100]      <2> 		cmp esi, mcolorend
  8781 00006BB3 72DA                <2> 		jb noswmsy2
  8782 00006BB5 C3                  <2> 		ret
  8783                              <2> 		
  8784                              <1> %include "source/gui/icon.asm"
  8785 00006BB6 0000                <2> iconcolor dw 0
  8786                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8787 00006BB8 A2[7F840000]        <2> 		mov [iconselected], al
  8788 00006BBD 8025[7F840000]01    <2> 		and byte [iconselected], 1
  8789 00006BC4 B401                <2> 		mov ah, 1
  8790 00006BC6 E8DD150000          <2> 		call graphicsadd
  8791                              <2> 	showicon2:
  8792 00006BCB 8B3D[47570000]      <2> 		mov edi, [physbaseptr]
  8793 00006BD1 6601D2              <2> 		add dx, dx
  8794 00006BD4 663B15[1F580000]    <2> 		cmp dx, [resolutionx2]
  8795 00006BDB 720C                <2> 		jb screenxgood
  8796 00006BDD 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  8797 00006BE4 6681EA4000          <2> 		sub dx, 64
  8798                              <2> 	screenxgood:
  8799 00006BE9 6681F90000          <2> 		cmp cx, 0
  8800 00006BEE 742B                <2> 		je noscreenygoodchk
  8801 00006BF0 663B0D[33570000]    <2> 		cmp cx, [resolutiony]
  8802 00006BF7 720C                <2> 		jb screenygood
  8803 00006BF9 668B0D[33570000]    <2> 		mov cx, [resolutiony]
  8804 00006C00 6681E92000          <2> 		sub cx, 32
  8805                              <2> 	screenygood:
  8806 00006C05 50                  <2> 		push eax
  8807 00006C06 52                  <2> 		push edx
  8808 00006C07 31C0                <2> 		xor eax, eax
  8809 00006C09 31DB                <2> 		xor ebx, ebx
  8810 00006C0B 668B1D[1F580000]    <2> 		mov bx, [resolutionx2]
  8811 00006C12 6689C8              <2> 		mov ax, cx
  8812 00006C15 F7E3                <2> 		mul ebx
  8813 00006C17 01C7                <2> 		add edi, eax
  8814 00006C19 5A                  <2> 		pop edx
  8815 00006C1A 58                  <2> 		pop eax
  8816                              <2> 	noscreenygoodchk:
  8817 00006C1B 31DB                <2> 		xor ebx, ebx
  8818 00006C1D 6689D3              <2> 		mov bx, dx
  8819 00006C20 01DF                <2> 		add edi, ebx
  8820 00006C22 6631C9              <2> 		xor cx, cx
  8821 00006C25 668B06              <2> 		mov ax, [esi]
  8822 00006C28 81C602000000        <2> 		add esi, 2
  8823 00006C2E 66A3[B66B0000]      <2> 		mov [iconcolor], ax
  8824                              <2> 	writeicon:
  8825 00006C34 8B06                <2> 		mov eax, [esi]
  8826 00006C36 D1C0                <2> 		rol eax, 1
  8827 00006C38 30C9                <2> 		xor cl, cl
  8828                              <2> 	writeiconline:
  8829 00006C3A B201                <2> 		mov dl, 1
  8830 00006C3C 20C2                <2> 		and dl, al
  8831 00006C3E 3215[7F840000]      <2> 		xor dl, [iconselected]
  8832 00006C44 668B1D[056E0000]    <2> 		mov bx, [background]
  8833 00006C4B 66891F              <2> 		mov [edi], bx
  8834 00006C4E 80FA00              <2> 		cmp dl, 0
  8835 00006C51 740A                <2> 		je noiconline
  8836 00006C53 668B15[B66B0000]    <2> 		mov dx, [iconcolor]
  8837 00006C5A 668917              <2> 		mov [edi], dx
  8838                              <2> 	noiconline:
  8839 00006C5D 81C702000000        <2> 		add edi, 2
  8840 00006C63 D1C0                <2> 		rol eax, 1
  8841 00006C65 FEC1                <2> 		inc cl
  8842 00006C67 80F920              <2> 		cmp cl, 32
  8843 00006C6A 72CE                <2> 		jb writeiconline
  8844 00006C6C 81C604000000        <2> 		add esi, 4
  8845 00006C72 FEC5                <2> 		inc ch
  8846 00006C74 31D2                <2> 		xor edx, edx
  8847 00006C76 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  8848 00006C7D 01D7                <2> 		add edi, edx
  8849 00006C7F 81EF40000000        <2> 		sub edi, 64
  8850 00006C85 80FD20              <2> 		cmp ch, 32
  8851 00006C88 72AA                <2> 		jb writeicon
  8852 00006C8A 31C0                <2> 		xor eax, eax
  8853 00006C8C C3                  <2> 		ret
  8854                              <1> %include "source/gui/line.asm"
  8855                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8856 00006C8D 668935[AF6D0000]    <2> 	mov [.color], si
  8857 00006C94 C605[B16D0000]00    <2> 	mov byte [.steep], 0
  8858 00006C9B C605[B26D0000]00    <2> 	mov byte [.yreversed], 0
  8859 00006CA2 E907000000          <2> 	jmp .notsteep
  8860                              <2> .steeploop:
  8861 00006CA7 C605[B16D0000]01    <2> 	mov byte [.steep], 1
  8862                              <2> .notsteep:
  8863 00006CAE 31FF                <2> 	xor edi, edi
  8864 00006CB0 31F6                <2> 	xor esi, esi
  8865 00006CB2 6639DA              <2> 	cmp dx, bx
  8866 00006CB5 7705                <2> 	ja .noreversex
  8867 00006CB7 6687D3              <2> 	xchg dx, bx
  8868 00006CBA 6691                <2> 	xchg cx, ax
  8869                              <2> .noreversex:
  8870 00006CBC 6689D7              <2> 	mov di, dx
  8871 00006CBF 6629DF              <2> 	sub di, bx
  8872                              <2> 	
  8873 00006CC2 6639C1              <2> 	cmp cx, ax
  8874 00006CC5 720B                <2> 	jb .reversey
  8875 00006CC7 6689CE              <2> 	mov si, cx
  8876 00006CCA 6629C6              <2> 	sub si, ax
  8877 00006CCD E90D000000          <2> 	jmp .normal
  8878                              <2> .reversey:
  8879 00006CD2 C605[B26D0000]02    <2> 	mov byte [.yreversed], 2
  8880 00006CD9 6689C6              <2> 	mov si, ax
  8881 00006CDC 6629CE              <2> 	sub si, cx	
  8882                              <2> .normal:
  8883 00006CDF 6687CA              <2> 	xchg cx, dx
  8884 00006CE2 6693                <2> 	xchg ax, bx
  8885 00006CE4 6639FE              <2> 	cmp si, di
  8886 00006CE7 77BE                <2> 	ja .steeploop
  8887 00006CE9 6687CA              <2> 	xchg cx, dx
  8888 00006CEC 6693                <2> 	xchg ax, bx
  8889                              <2> 	
  8890 00006CEE 6691                <2> 	xchg ax, cx
  8891 00006CF0 6687DA              <2> 	xchg bx, dx
  8892 00006CF3 66893D[B56D0000]    <2> 	mov [.xdelta], di
  8893 00006CFA 668935[B76D0000]    <2> 	mov [.ydelta], si
  8894 00006D01 668B35[AF6D0000]    <2> 	mov si, [.color]
  8895 00006D08 66891D[B36D0000]    <2> 	mov [.endline], bx
  8896 00006D0F 6652                <2> 	push dx
  8897 00006D11 6651                <2> 	push cx
  8898 00006D13 6687CA              <2> 	xchg cx, dx
  8899 00006D16 803D[B16D0000]01    <2> 	cmp byte [.steep], 1
  8900 00006D1D 7403                <2> 	je .xchg
  8901 00006D1F 6687D1              <2> 	xchg dx, cx
  8902                              <2> .xchg:
  8903 00006D22 E830170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8904 00006D27 6659                <2> 	pop cx
  8905 00006D29 665A                <2> 	pop dx
  8906 00006D2B 31C0                <2> 	xor eax, eax
  8907 00006D2D 66A1[B56D0000]      <2> 	mov ax, [.xdelta]
  8908 00006D33 66D1E8              <2> 	shr ax, 1
  8909 00006D36 8A0D[B16D0000]      <2> 	mov cl, [.steep]
  8910 00006D3C 0A0D[B26D0000]      <2> 	or cl, [.yreversed]
  8911 00006D42 55                  <2> 	push ebp
  8912 00006D43 668B2D[B36D0000]    <2> 	mov bp, [.endline]
  8913 00006D4A 6629D5              <2> 	sub bp, dx
  8914 00006D4D 668B15[B76D0000]    <2> 	mov dx, [.ydelta]
  8915                              <2> .lp:
  8916 00006D54 668937              <2> 	mov [edi], si
  8917 00006D57 6639D0              <2> 	cmp ax, dx
  8918 00006D5A 7332                <2> 	jae .noaddx
  8919 00006D5C F6C102              <2> 	test cl, 2
  8920 00006D5F 7414                <2> 	jz .nodecy
  8921 00006D61 F6C101              <2> 	test cl, 1
  8922 00006D64 7509                <2> 	jnz .steepy
  8923 00006D66 29DF                <2> 	sub edi, ebx
  8924 00006D68 29DF                <2> 	sub edi, ebx
  8925 00006D6A E906000000          <2> 	jmp .nodecy
  8926                              <2> .steepy:
  8927 00006D6F 81EF04000000        <2> 	sub edi, 4
  8928                              <2> .nodecy:
  8929 00006D75 660305[B56D0000]    <2> 	add ax, [.xdelta]
  8930 00006D7C F6C101              <2> 	test cl, 1
  8931 00006D7F 7507                <2> 	jnz .steepx
  8932 00006D81 01DF                <2> 	add edi, ebx
  8933 00006D83 E906000000          <2> 	jmp .noaddx
  8934                              <2> .steepx:
  8935 00006D88 81C702000000        <2> 	add edi, 2
  8936                              <2> .noaddx:
  8937 00006D8E 6629D0              <2> 	sub ax, dx
  8938 00006D91 664D                <2> 	dec bp
  8939 00006D93 81C702000000        <2> 	add edi, 2
  8940 00006D99 F6C101              <2> 	test cl, 1
  8941 00006D9C 7408                <2> 	jz .nosteepx
  8942 00006D9E 81EF02000000        <2> 	sub edi, 2
  8943 00006DA4 01DF                <2> 	add edi, ebx
  8944                              <2> .nosteepx:
  8945 00006DA6 6681FD0000          <2> 	cmp bp, 0
  8946 00006DAB 75A7                <2> 	jne .lp
  8947                              <2> .done:
  8948 00006DAD 5D                  <2> 	pop ebp
  8949 00006DAE C3                  <2> 	ret
  8950                              <2> 	
  8951 00006DAF 0000                <2> .color dw 0
  8952 00006DB1 00                  <2> .steep db 0
  8953 00006DB2 00                  <2> .yreversed db 0
  8954 00006DB3 0000                <2> .endline dw 0
  8955 00006DB5 0000                <2> .xdelta dw 0
  8956 00006DB7 0000                <2> .ydelta dw 0
  8957                              <1> %include "source/gui/refresh.asm"
  8958                              <2> guiclear:
  8959 00006DB9 8B3D[47570000]      <2> 	mov edi, [physbaseptr]
  8960 00006DBF 668B15[31570000]    <2> 	mov dx, [resolutionx]
  8961 00006DC6 668B0D[33570000]    <2> 	mov cx, [resolutiony]
  8962 00006DCD 668B1D[056E0000]    <2> 	mov bx, [background]
  8963 00006DD4 66891D[076E0000]    <2> 	mov [background + 2], bx
  8964                              <2> %ifdef gui.background
  8965                              <2> 	cmp dword [backgroundimage], 0
  8966                              <2> 	je guiclear.noback
  8967                              <2> 		mov esi, [backgroundimage]
  8968                              <2> 	.lp:
  8969                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8970                              <2> 		;movdqa [edi], xmm0
  8971                              <2> 		;add esi, 16
  8972                              <2> 		;add edi, 16
  8973                              <2> 		;sub dx, 8
  8974                              <2> 		mov eax, [esi]
  8975                              <2> 		mov [edi], eax
  8976                              <2> 		add esi, 4
  8977                              <2> 		add edi, 4
  8978                              <2> 		sub dx, 2
  8979                              <2> 		cmp dx, 0
  8980                              <2> 		ja .lp
  8981                              <2> 		dec cx
  8982                              <2> 		mov dx, [resolutionx]
  8983                              <2> 		cmp cx, 0
  8984                              <2> 		ja .lp
  8985                              <2> 		ret
  8986                              <2> 	backgroundimage dd 0
  8987                              <2> %endif
  8988                              <2> guiclear.noback:
  8989 00006DDB A1[056E0000]        <2> 	mov eax, [background]
  8990                              <2> guiclearloop:
  8991 00006DE0 8907                <2> 	mov [edi], eax
  8992 00006DE2 81C704000000        <2> 	add edi, 4
  8993 00006DE8 6681EA0200          <2> 	sub dx, 2
  8994 00006DED 6681FA0000          <2> 	cmp dx, 0
  8995 00006DF2 77EC                <2> 	ja guiclearloop
  8996 00006DF4 6649                <2> 	dec cx
  8997 00006DF6 668B15[31570000]    <2> 	mov dx, [resolutionx]
  8998 00006DFD 6681F90000          <2> 	cmp cx, 0
  8999 00006E02 77DC                <2> 	ja guiclearloop
  9000 00006E04 C3                  <2> 	ret
  9001                              <2> 
  9002 00006E05 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9003                              <2> 	.original equ 0111101111001111b
  9004                              <2> 
  9005                              <2> reloadallgraphics:
  9006 00006E09 BF[BB2C0100]        <2> 		mov edi, graphicstable
  9007                              <2> reloadgraphicsloop:
  9008 00006E0E 8B7702              <2> 		mov esi, [edi + 2]
  9009 00006E11 668B5706            <2> 		mov dx, [edi + 6]
  9010 00006E15 668B4F08            <2> 		mov cx, [edi + 8]
  9011 00006E19 668B07              <2> 		mov ax, [edi]
  9012 00006E1C 668B5F0A            <2> 		mov bx, [edi + 10]
  9013 00006E20 893D[94810000]      <2> 		mov [grpctblpos], edi
  9014 00006E26 3B3D[2B7C0000]      <2> 		cmp edi, [dragging]
  9015 00006E2C 741E                <2> 		je loadedgraphic
  9016 00006E2E 663D0100            <2> 		cmp ax, 1
  9017 00006E32 0F8436000000        <2> 		je near icongraphic
  9018 00006E38 663D0200            <2> 		cmp ax, 2
  9019 00006E3C 0F843C000000        <2> 		je near stringgraphic
  9020 00006E42 663D0300            <2> 		cmp ax, 3
  9021 00006E46 0F8416000000        <2> 		je near windowgraphic
  9022 00006E4C 8B3D[94810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9023 00006E52 81C710000000        <2> 		add edi, 16
  9024 00006E58 81FF[BB2E0100]      <2> 		cmp edi, graphicstableend
  9025 00006E5E 732E                <2> 		jae donereloadgraphics
  9026 00006E60 EBAC                <2> 		jmp reloadgraphicsloop
  9027                              <2> windowgraphic:
  9028 00006E62 E825090000          <2> 		call showwindow2
  9029 00006E67 E8A7AFFFFF          <2> 		call cleardouble
  9030 00006E6C EBDE                <2> 		jmp loadedgraphic
  9031 00006E6E 80E301              <2> icongraphic:	and bl, 1
  9032 00006E71 881D[7F840000]      <2> 		mov [iconselected], bl
  9033 00006E77 E84FFDFFFF          <2> 		call showicon2
  9034 00006E7C EBCE                <2> 		jmp loadedgraphic
  9035 00006E7E 80E301              <2> stringgraphic:  and bl, 1
  9036 00006E81 881D[277C0000]      <2> 		mov [mouseselecton], bl
  9037 00006E87 E8CE050000          <2> 		call showstring2
  9038 00006E8C EBBE                <2> 		jmp loadedgraphic
  9039                              <2> donereloadgraphics:
  9040 00006E8E 8B3D[2B7C0000]      <2> 		mov edi, [dragging]
  9041 00006E94 81FF[BB2C0100]      <2> 		cmp edi, graphicstable
  9042 00006E9A 7226                <2> 		jb notcorrectdrag
  9043 00006E9C 668B07              <2> 		mov ax, [edi]
  9044 00006E9F 8B7702              <2> 		mov esi, [edi + 2]
  9045 00006EA2 668B5706            <2> 		mov dx, [edi + 6]
  9046 00006EA6 668B4F08            <2> 		mov cx, [edi + 8]
  9047 00006EAA 668B5F0A            <2> 		mov bx, [edi + 10]
  9048 00006EAE 663D0100            <2> 		cmp ax, 1
  9049 00006EB2 750F                <2> 		jne noticondragging
  9050 00006EB4 80E301              <2> 		and bl, 1
  9051 00006EB7 881D[7F840000]      <2> 		mov [iconselected], bl
  9052 00006EBD E809FDFFFF          <2> 		call showicon2
  9053                              <2> notcorrectdrag:
  9054 00006EC2 C3                  <2> 		ret
  9055                              <2> 
  9056                              <2> 	noticondragging:
  9057 00006EC3 663D0200            <2> 		cmp ax, 2
  9058 00006EC7 75F9                <2> 		jne notcorrectdrag
  9059 00006EC9 80E301              <2> 		and bl, 1
  9060 00006ECC 881D[277C0000]      <2> 		mov [mouseselecton], bl
  9061 00006ED2 E883050000          <2> 		call showstring2
  9062 00006ED7 EBE9                <2> 		jmp notcorrectdrag
  9063                              <1> %include "source/gui/square.asm"
  9064                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9065 00006ED9 6639D3              <2> 	cmp bx, dx
  9066 00006EDC 7303                <2> 	jae .noxchgx
  9067 00006EDE 6687DA              <2> 	xchg bx, dx
  9068                              <2> .noxchgx:
  9069 00006EE1 6639C8              <2> 	cmp ax, cx
  9070 00006EE4 7302                <2> 	jae .noxchgy
  9071 00006EE6 6691                <2> 	xchg ax, cx
  9072                              <2> .noxchgy:
  9073 00006EE8 6650                <2> 	push ax
  9074 00006EEA 6653                <2> 	push bx
  9075 00006EEC 6652                <2> 	push dx
  9076 00006EEE E864150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9077 00006EF3 31D2                <2> 	xor edx, edx
  9078 00006EF5 665A                <2> 	pop dx
  9079 00006EF7 31DB                <2> 	xor ebx, ebx
  9080 00006EF9 665B                <2> 	pop bx
  9081 00006EFB 6658                <2> 	pop ax
  9082                              <2> .lp0:
  9083 00006EFD 6652                <2> 	push dx
  9084                              <2> .lp:
  9085 00006EFF 668937              <2> 	mov [edi], si
  9086 00006F02 81C702000000        <2> 	add edi, 2
  9087 00006F08 6642                <2> 	inc dx
  9088 00006F0A 6639DA              <2> 	cmp dx, bx
  9089 00006F0D 76F0                <2> 	jbe .lp
  9090 00006F0F 665A                <2> 	pop dx
  9091 00006F11 81EF02000000        <2> 	sub edi, 2
  9092 00006F17 29DF                <2> 	sub edi, ebx
  9093 00006F19 29DF                <2> 	sub edi, ebx
  9094 00006F1B 01D7                <2> 	add edi, edx
  9095 00006F1D 01D7                <2> 	add edi, edx
  9096 00006F1F 033D[1F580000]      <2> 	add edi, [resolutionx2]
  9097 00006F25 6641                <2> 	inc cx
  9098 00006F27 6639C1              <2> 	cmp cx, ax
  9099 00006F2A 7203                <2> 	jb .lp2
  9100 00006F2C 74CF                <2> 	je .lp0
  9101 00006F2E C3                  <2> 	ret
  9102                              <2> .lp2:
  9103 00006F2F 57                  <2> 	push edi
  9104 00006F30 668937              <2> 	mov [edi], si
  9105 00006F33 29D7                <2> 	sub edi, edx
  9106 00006F35 29D7                <2> 	sub edi, edx
  9107 00006F37 01DF                <2> 	add edi, ebx
  9108 00006F39 01DF                <2> 	add edi, ebx
  9109 00006F3B 668937              <2> 	mov [edi], si
  9110 00006F3E 5F                  <2> 	pop edi
  9111 00006F3F 033D[1F580000]      <2> 	add edi, [resolutionx2]
  9112 00006F45 6641                <2> 	inc cx
  9113 00006F47 6639C1              <2> 	cmp cx, ax
  9114 00006F4A 72E3                <2> 	jb .lp2
  9115 00006F4C EBAF                <2> 	jmp .lp0
  9116                              <2> 
  9117                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9118 00006F4E 6639D3              <2> 	cmp bx, dx
  9119 00006F51 7303                <2> 	jae .noxchgx
  9120 00006F53 6687DA              <2> 	xchg bx, dx
  9121                              <2> .noxchgx:
  9122 00006F56 6639C8              <2> 	cmp ax, cx
  9123 00006F59 7302                <2> 	jae .noxchgy
  9124 00006F5B 6691                <2> 	xchg ax, cx
  9125                              <2> .noxchgy:
  9126 00006F5D 6650                <2> 	push ax
  9127 00006F5F 6653                <2> 	push bx
  9128 00006F61 6652                <2> 	push dx
  9129 00006F63 E8EF140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9130 00006F68 31D2                <2> 	xor edx, edx
  9131 00006F6A 665A                <2> 	pop dx
  9132 00006F6C 31DB                <2> 	xor ebx, ebx
  9133 00006F6E 665B                <2> 	pop bx
  9134 00006F70 6658                <2> 	pop ax
  9135                              <2> .lp2
  9136 00006F72 6652                <2> 	push dx
  9137                              <2> .lp:
  9138 00006F74 668937              <2> 	mov [edi], si
  9139 00006F77 81C702000000        <2> 	add edi, 2
  9140 00006F7D 6642                <2> 	inc dx
  9141 00006F7F 6639DA              <2> 	cmp dx, bx
  9142 00006F82 76F0                <2> 	jbe .lp
  9143 00006F84 665A                <2> 	pop dx
  9144 00006F86 81EF02000000        <2> 	sub edi, 2
  9145 00006F8C 29DF                <2> 	sub edi, ebx
  9146 00006F8E 29DF                <2> 	sub edi, ebx
  9147 00006F90 01D7                <2> 	add edi, edx
  9148 00006F92 01D7                <2> 	add edi, edx
  9149 00006F94 033D[1F580000]      <2> 	add edi, [resolutionx2]
  9150 00006F9A 6641                <2> 	inc cx
  9151 00006F9C 6639C1              <2> 	cmp cx, ax
  9152 00006F9F 76D1                <2> 	jbe .lp2
  9153 00006FA1 C3                  <2> 	ret
  9154                              <1> %include "source/gui/startup.asm"
  9155                              <2> guisetup:
  9156                              <2> 	%ifdef gui.background
  9157                              <2> 	xor ebx, ebx
  9158                              <2> 	mov [backgroundimage], ebx
  9159                              <2> 	%endif
  9160 00006FA2 E812FEFFFF          <2> 	call guiclear
  9161 00006FA7 C605[DCFB0000]01    <2> 	mov byte [guion], 1
  9162 00006FAE C605[277C0000]00    <2> 	mov byte [mouseselecton], 0
  9163 00006FB5 31C0                <2> 	xor eax, eax
  9164 00006FB7 31DB                <2> 	xor ebx, ebx
  9165 00006FB9 31C9                <2> 	xor ecx, ecx
  9166 00006FBB 31D2                <2> 	xor edx, edx
  9167                              <2> 	
  9168 00006FBD BE[7F710000]        <2> 	mov esi, pacmsg
  9169 00006FC2 30E4                <2> 	xor ah, ah
  9170 00006FC4 B010                <2> 	mov al, 00010000b
  9171 00006FC6 31DB                <2> 	xor ebx, ebx
  9172 00006FC8 66B99000            <2> 	mov cx, 144
  9173 00006FCC 66BA0400            <2> 	mov dx, 4
  9174 00006FD0 E872040000          <2> 	call showstring
  9175                              <2> 	
  9176 00006FD5 BE[BD710000]        <2> 	mov esi, interneticon
  9177 00006FDA 30E4                <2> 	xor ah, ah
  9178 00006FDC B010                <2> 	mov al, 00010000b
  9179 00006FDE BB[A8700000]        <2> 	mov ebx, noie
  9180 00006FE3 66B91800            <2> 	mov cx, 24
  9181 00006FE7 66BA0400            <2> 	mov dx, 4
  9182 00006FEB E8C8FBFFFF          <2> 	call showicon
  9183                              <2> 	
  9184 00006FF0 BE[3F720000]        <2> 	mov esi, wordicon
  9185 00006FF5 30E4                <2> 	xor ah, ah
  9186 00006FF7 B010                <2> 	mov al, 00010000b
  9187 00006FF9 31DB                <2> 	xor ebx, ebx
  9188 00006FFB 66B91800            <2> 	mov cx, 24
  9189 00006FFF 66BA3000            <2> 	mov dx, 48
  9190 00007003 E8B0FBFFFF          <2> 	call showicon
  9191                              <2> 	
  9192 00007008 BE[C1720000]        <2> 	mov esi, pacmanpellet
  9193 0000700D 30E4                <2> 	xor ah, ah
  9194 0000700F B010                <2> 	mov al, 00010000b
  9195 00007011 31DB                <2> 	xor ebx, ebx
  9196 00007013 66B94000            <2> 	mov cx, 64
  9197 00007017 66BA0400            <2> 	mov dx, 4
  9198 0000701B E898FBFFFF          <2> 	call showicon
  9199                              <2> 	
  9200 00007020 BE[C5730000]        <2> 	mov esi, pacman
  9201 00007025 30E4                <2> 	xor ah, ah
  9202 00007027 B010                <2> 	mov al, 00010000b
  9203 00007029 BB[91700000]        <2> 	mov ebx, pacmannomnom
  9204 0000702E 66B94000            <2> 	mov cx, 64
  9205 00007032 66BA3000            <2> 	mov dx, 48
  9206 00007036 E87DFBFFFF          <2> 	call showicon
  9207                              <2> 	
  9208 0000703B BE[43730000]        <2> 	mov esi, ghostie
  9209 00007040 30E4                <2> 	xor ah, ah
  9210 00007042 B010                <2> 	mov al, 00010000b
  9211 00007044 BB[7A700000]        <2> 	mov ebx, boo
  9212 00007049 66B96C00            <2> 	mov cx, 108
  9213 0000704D 66BA0400            <2> 	mov dx, 4
  9214 00007051 E862FBFFFF          <2> 	call showicon
  9215                              <2> 	
  9216 00007056 BE[61710000]        <2> 	mov esi, start
  9217 0000705B 668B0D[33570000]    <2> 	mov cx, [resolutiony]
  9218 00007062 6681E91000          <2> 	sub cx, 16
  9219 00007067 66BA0200            <2> 	mov dx, 2
  9220 0000706B 30E4                <2> 	xor ah, ah
  9221 0000706D B010                <2> 	mov al, 00010000b
  9222 0000706F BB[1D710000]        <2> 	mov ebx, winblows
  9223 00007074 E8CE030000          <2> 	call showstring
  9224                              <2> 
  9225                              <2> %ifdef gui.time	
  9226                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9227                              <2> %endif
  9228 00007079 C3                  <2> 	ret
  9229                              <2> 
  9230                              <2> 	boo:
  9231 0000707A BE[7A710000]        <2> 		mov esi, boomsg
  9232 0000707F 66BA6400            <2> 		mov dx, 100
  9233 00007083 66B94001            <2> 		mov cx, 320
  9234 00007087 31DB                <2> 		xor ebx, ebx
  9235 00007089 6631C0              <2> 		xor ax, ax
  9236 0000708C E9B6030000          <2> 		jmp showstring
  9237                              <2> 
  9238                              <2> 	pacmannomnom:
  9239 00007091 BE[98710000]        <2> 		mov esi, pacnom
  9240 00007096 66BA8200            <2> 		mov dx, 130
  9241 0000709A 66B93C00            <2> 		mov cx, 60
  9242 0000709E 31DB                <2> 		xor ebx, ebx
  9243 000070A0 6631C0              <2> 		xor ax, ax
  9244 000070A3 E99F030000          <2> 		jmp showstring	
  9245                              <2> 	
  9246                              <2> 	noie:
  9247 000070A8 66C705[A7710000]80- <2> 		mov word [termwindow], 640
  9248 000070B0 02                  <2>
  9249 000070B1 66C705[A9710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9250 000070B9 01                  <2>
  9251 000070BA BE[A7710000]        <2> 		mov esi, termwindow
  9252 000070BF 66BA1000            <2> 		mov dx, 16
  9253 000070C3 66B91000            <2> 		mov cx, 16
  9254 000070C7 31DB                <2> 		xor ebx, ebx
  9255 000070C9 6631C0              <2> 		xor ax, ax
  9256 000070CC E801060000          <2> 		call showwindow
  9257 000070D1 E901BAFFFF          <2> 		jmp os
  9258                              <2> 
  9259                              <2> 	gotomenuboot:
  9260 000070D6 31D2                <2> 		xor edx, edx
  9261 000070D8 31C9                <2> 		xor ecx, ecx
  9262 000070DA 668B15[31570000]    <2> 		mov dx, [resolutionx]
  9263 000070E1 668B0D[33570000]    <2> 		mov cx, [resolutiony]
  9264 000070E8 66C1E904            <2> 		shr cx, 4
  9265 000070EC 6681E90100          <2> 		sub cx, 1
  9266 000070F1 66C1E104            <2> 		shl cx, 4
  9267 000070F5 668915[A7710000]    <2> 		mov [termwindow], dx
  9268 000070FC 66890D[A9710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9269 00007103 BE[A7710000]        <2> 		mov esi, termwindow
  9270 00007108 6631D2              <2> 		xor dx, dx
  9271 0000710B 6631C9              <2> 		xor cx, cx
  9272 0000710E 31DB                <2> 		xor ebx, ebx
  9273 00007110 6631C0              <2> 		xor ax, ax
  9274 00007113 E8BA050000          <2> 		call showwindow
  9275 00007118 E9BAB9FFFF          <2> 		jmp os
  9276                              <2> 
  9277                              <2> 	winblows:
  9278 0000711D BE[70710000]        <2> 		mov esi, turnoffmsg
  9279 00007122 BB[93520000]        <2> 		mov ebx, turnoff
  9280 00007127 668B0D[33570000]    <2> 		mov cx, [resolutiony]
  9281 0000712E 6681E92000          <2> 		sub cx, 32
  9282 00007133 6631D2              <2> 		xor dx, dx
  9283 00007136 30E4                <2> 		xor ah, ah
  9284 00007138 B010                <2> 		mov al, 00010000b
  9285 0000713A E808030000          <2> 		call showstring
  9286 0000713F BE[67710000]        <2> 		mov esi, gotomenu
  9287 00007144 668B0D[33570000]    <2> 		mov cx, [resolutiony]
  9288 0000714B 6681E93000          <2> 		sub cx, 48
  9289 00007150 6631D2              <2> 		xor dx, dx
  9290 00007153 30E4                <2> 		xor ah, ah
  9291 00007155 B010                <2> 		mov al, 00010000b
  9292 00007157 BB[D6700000]        <2> 		mov ebx, gotomenuboot
  9293 0000715C E9E6020000          <2> 		jmp showstring
  9294                              <2> 		
  9295                              <2> 
  9296 00007161 737461727400        <2> 	start	db "start",0
  9297 00007167 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9298 00007170 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9299 00007179 00                  <2>
  9300 0000717A 426F6F2100          <2> 	boomsg db "Boo!",0
  9301 0000717F 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9302 00007188 73206561737920746F- <2>
  9303 00007191 20647261772E00      <2>
  9304 00007198 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9305 000071A1 6D206E6F6D00        <2>
  9306                              <2> 
  9307 000071A7 20035802            <2> 	termwindow:	dw 800,600	;window size
  9308 000071AB FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9309 000071AF [BC2F0100]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9310 000071B3 [04050200]          <2>
  9311 000071B7 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9312                              <2> 	
  9313 000071B7 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9314 000071B7 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9315 000071B7 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9316 000071B7 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9317 000071B7 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9318                              <2> 
  9319                              <2> %ifdef gui.time
  9320                              <2> guitime:
  9321                              <2> 		call time	;get rtc in timeshow & dateshow
  9322                              <2> 		xor ebx, ebx
  9323                              <2> 		mov dx, [resolutionx2]
  9324                              <2> 		xor cx, cx
  9325                              <2> 		sub dx, 304
  9326                              <2> 		mov esi, dateshow
  9327                              <2> 		mov al, 00010001b
  9328                              <2> 		call showstring
  9329                              <2> 		mov esi, timeshow
  9330                              <2> 		xor ebx, ebx
  9331                              <2> 		mov al, 00010001b
  9332                              <2> 		call showstring
  9333                              <2> 		ret
  9334                              <2> %endif
  9335                              <1> %include "source/gui/text.asm"
  9336                              <2> 	showstring:
  9337 00007447 A2[277C0000]        <2> 		mov [mouseselecton], al
  9338 0000744C 8025[277C0000]01    <2> 		and byte [mouseselecton], 1
  9339 00007453 B402                <2> 		mov ah, 2
  9340 00007455 E84E0D0000          <2> 		call graphicsadd
  9341                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9342 0000745A 30E4                <2> 		xor ah, ah
  9343 0000745C 8A06                <2> 		mov al, [esi]
  9344 0000745E 3CC0                <2> 		cmp al, 0xC0
  9345 00007460 7234                <2> 		jb .doneutf
  9346 00007462 3CE0                <2> 		cmp al, 0xE0
  9347 00007464 721D                <2> 		jb .two
  9348 00007466 46                  <2> 		inc esi
  9349 00007467 668B1E              <2> 		mov bx, [esi]
  9350 0000746A 46                  <2> 		inc esi
  9351 0000746B C0E004              <2> 		shl al, 4
  9352 0000746E 66C1E302            <2> 		shl bx, 2
  9353 00007472 C0EF02              <2> 		shr bh, 2
  9354 00007475 66C1EB02            <2> 		shr bx, 2
  9355 00007479 08C7                <2> 		or bh, al
  9356 0000747B 6689D8              <2> 		mov ax, bx
  9357 0000747E E913000000          <2> 		jmp .doneutf
  9358                              <2> 	.two:
  9359 00007483 8A3E                <2> 		mov bh, [esi]
  9360 00007485 46                  <2> 		inc esi
  9361 00007486 8A1E                <2> 		mov bl, [esi]
  9362 00007488 66C1E302            <2> 		shl bx, 2
  9363 0000748C C0EF02              <2> 		shr bh, 2
  9364 0000748F 66C1EB02            <2> 		shr bx, 2
  9365 00007493 6689D8              <2> 		mov ax, bx
  9366                              <2> 	.doneutf:
  9367 00007496 3C00                <2> 		cmp al, 0
  9368 00007498 741E                <2> 		je doneshowstring
  9369 0000749A 46                  <2> 		inc esi
  9370 0000749B 3CFF                <2> 		cmp al, 255
  9371 0000749D 74BB                <2> 		je showstring2
  9372 0000749F 56                  <2> 		push esi
  9373 000074A0 668B1D[C0740000]    <2> 		mov bx, [colorfont2]
  9374 000074A7 E825000000          <2> 		call showfontvesa
  9375 000074AC 3C0A                <2> 		cmp al, 10
  9376 000074AE 7405                <2> 		je noproceedshst
  9377 000074B0 6681C20800          <2> 		add dx, 8
  9378                              <2> 	noproceedshst:
  9379 000074B5 5E                  <2> 		pop esi
  9380 000074B6 EBA2                <2> 		jmp showstring2
  9381                              <2> 	doneshowstring:
  9382 000074B8 C605[277C0000]00    <2> 		mov byte [mouseselecton], 0
  9383 000074BF C3                  <2> 		ret
  9384                              <2> 
  9385 000074C0 FFFF                <2> colorfont2 dw 0xFFFF
  9386 000074C2 00                  <2> colorcache db 0
  9387                              <2> 
  9388 000074C3 02                  <2> resolutionbytes db 2
  9389 000074C4 0000                <2> posxvesa dw 0
  9390 000074C6 0000                <2> posyvesa dw 0
  9391 000074C8 FFFF                <2> colorfont dw 0xFFFF
  9392                              <2> savefontvesa:		;same rules as showfontvesa
  9393 000074CA C605[267C0000]01    <2> 	mov byte [savefonton], 1
  9394                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9395 000074D1 663DFF00            <2> 	cmp ax, 255
  9396 000074D5 7501                <2> 	jne nostopshowfont
  9397 000074D7 C3                  <2> 	ret
  9398                              <2> nostopshowfont:
  9399 000074D8 55                  <2> 	push ebp
  9400 000074D9 66890D[C6740000]    <2> 	mov [posyvesa], cx
  9401 000074E0 663D0A00            <2> 	cmp ax, 10
  9402 000074E4 0F8424000000        <2> 	je near goodvesafontx
  9403 000074EA 31C9                <2> 	xor ecx, ecx
  9404 000074EC 668B0D[1F580000]    <2> 	mov cx, [resolutionx2]
  9405 000074F3 6639CA              <2> 	cmp dx, cx
  9406 000074F6 7616                <2> 	jbe goodvesafontx
  9407 000074F8 6631D2              <2> 	xor dx, dx
  9408 000074FB 668B0D[C6740000]    <2> 	mov cx, [posyvesa]
  9409 00007502 6681C11000          <2> 	add cx, 16
  9410 00007507 66890D[C6740000]    <2> 	mov [posyvesa], cx
  9411                              <2> goodvesafontx:
  9412 0000750E 668B0D[C6740000]    <2> 	mov cx, [posyvesa]
  9413 00007515 668915[C4740000]    <2> 	mov [posxvesa], dx
  9414 0000751C 8B3D[47570000]      <2> 	mov edi, [physbaseptr]
  9415 00007522 66891D[C8740000]    <2> 	mov [colorfont], bx
  9416 00007529 668B2D[C8740000]    <2> 	mov bp, [colorfont]
  9417 00007530 31DB                <2> 	xor ebx, ebx
  9418 00007532 6689C3              <2> 	mov bx, ax
  9419 00007535 31C0                <2> 	xor eax, eax
  9420 00007537 6689D8              <2> 	mov ax, bx
  9421 0000753A 6689D3              <2> 	mov bx, dx
  9422 0000753D 89DA                <2> 	mov edx, ebx
  9423 0000753F 31DB                <2> 	xor ebx, ebx
  9424 00007541 6681F90000          <2> 	cmp cx, 0
  9425 00007546 7414                <2> 	je vesaposloopdn
  9426 00007548 668B1D[1F580000]    <2> 	mov bx, [resolutionx2]
  9427                              <2> vesaposloop:
  9428 0000754F 52                  <2> 	push edx
  9429 00007550 50                  <2> 	push eax
  9430 00007551 31C0                <2> 	xor eax, eax
  9431 00007553 6689C8              <2> 	mov ax, cx
  9432 00007556 F7E3                <2> 	mul ebx
  9433 00007558 01C7                <2> 	add edi, eax
  9434 0000755A 58                  <2> 	pop eax
  9435 0000755B 5A                  <2> 	pop edx
  9436                              <2> vesaposloopdn:
  9437 0000755C 01D7                <2> 	add edi, edx
  9438 0000755E BE[9C890000]        <2> 	mov esi, fonts
  9439                              <2> findfontvesa:
  9440 00007563 663D0A00            <2> 	cmp ax, 10
  9441 00007567 0F84EB000000        <2> 	je near nwlinevesa
  9442 0000756D C1E004              <2> 	shl eax, 4
  9443 00007570 01C6                <2> 	add esi, eax
  9444 00007572 C1E804              <2> 	shr eax, 4
  9445 00007575 81FE[DCF90000]      <2> 	cmp esi, fontend
  9446 0000757B 0F83AB000000        <2> 	jae near donefontvesa
  9447 00007581 4E                  <2> 	dec esi
  9448                              <2> foundfontvesa:
  9449 00007582 46                  <2> 	inc esi
  9450 00007583 803D[267C0000]01    <2> 	cmp byte [savefonton], 1
  9451 0000758A 0F84E7000000        <2> 	je near vesafontsaver
  9452 00007590 30C9                <2> 	xor cl, cl
  9453 00007592 8A06                <2> 	mov al, [esi]
  9454 00007594 668B15[1F580000]    <2> 	mov dx, [resolutionx2]
  9455 0000759B 662B15[C4740000]    <2> 	sub dx, [posxvesa]
  9456 000075A2 6681FA1000          <2> 	cmp dx, 16
  9457 000075A7 7708                <2> 	ja paintfontvesa
  9458 000075A9 D0EA                <2> 	shr dl, 1
  9459 000075AB 8815[57760000]      <2> 	mov [charwidth], dl
  9460                              <2> paintfontvesa:
  9461 000075B1 B201                <2> 	mov dl, 1
  9462 000075B3 20C2                <2> 	and dl, al
  9463 000075B5 803D[257C0000]01    <2> 	cmp byte [showcursorfonton], 1
  9464 000075BC 0F842E000000        <2> 	je near nodelpaintedfont
  9465 000075C2 803D[257C0000]02    <2> 	cmp byte [showcursorfonton], 2
  9466 000075C9 0F8511000000        <2> 	jne near noswitchcursorfonton
  9467 000075CF 80FA00              <2> 	cmp dl, 0
  9468 000075D2 0F8420000000        <2> 	je near nopixelset
  9469 000075D8 66892F              <2> 	mov [edi], bp
  9470 000075DB E918000000          <2> 	jmp nopixelset
  9471                              <2> noswitchcursorfonton:
  9472 000075E0 3215[277C0000]      <2> 	xor dl, [mouseselecton]
  9473 000075E6 668B1D[056E0000]    <2> 	mov bx, [background]
  9474 000075ED 66891F              <2> 	mov [edi], bx
  9475                              <2> nodelpaintedfont:
  9476 000075F0 80FA00              <2> 	cmp dl, 0
  9477 000075F3 7403                <2> 	je nopixelset
  9478 000075F5 66892F              <2> 	mov [edi], bp
  9479                              <2> nopixelset:
  9480 000075F8 81C702000000        <2> 	add edi, 2
  9481 000075FE D0C0                <2> 	rol al, 1
  9482 00007600 FEC1                <2> 	inc cl
  9483 00007602 3A0D[57760000]      <2> 	cmp cl, [charwidth]
  9484 00007608 72A7                <2> 	jb paintfontvesa
  9485 0000760A FEC5                <2> 	inc ch
  9486 0000760C 31D2                <2> 	xor edx, edx
  9487 0000760E 668B15[1F580000]    <2> 	mov dx, [resolutionx2]
  9488 00007615 01D7                <2> 	add edi, edx
  9489 00007617 31D2                <2> 	xor edx, edx
  9490 00007619 8A15[57760000]      <2> 	mov dl, [charwidth]
  9491 0000761F 00D2                <2> 	add dl, dl
  9492 00007621 29D7                <2> 	sub edi, edx
  9493 00007623 80FD10              <2> 	cmp ch, 16
  9494 00007626 0F8256FFFFFF        <2> 	jb foundfontvesa
  9495                              <2> donefontvesa:
  9496 0000762C C605[57760000]08    <2> 	mov byte [charwidth], 8
  9497 00007633 668B15[C4740000]    <2> 	mov dx, [posxvesa]
  9498 0000763A 8A1D[57760000]      <2> 	mov bl, [charwidth]
  9499 00007640 30FF                <2> 	xor bh, bh
  9500 00007642 6601DA              <2> 	add dx, bx
  9501 00007645 6689EB              <2> 	mov bx, bp
  9502 00007648 668B0D[C6740000]    <2> 	mov cx, [posyvesa]
  9503 0000764F 883D[267C0000]      <2> 	mov [savefonton], bh
  9504 00007655 5D                  <2> 	pop ebp
  9505 00007656 C3                  <2> 	ret
  9506 00007657 08                  <2> charwidth db 8
  9507                              <2> nwlinevesa:
  9508 00007658 6631D2              <2> 	xor dx, dx
  9509 0000765B 668915[C4740000]    <2> 	mov [posxvesa], dx
  9510 00007662 668B0D[C6740000]    <2> 	mov cx, [posyvesa]
  9511 00007669 6681C11000          <2> 	add cx, 16
  9512 0000766E 66890D[C6740000]    <2> 	mov [posyvesa], cx
  9513 00007675 EBB5                <2> 	jmp donefontvesa
  9514                              <2> vesafontsaver:
  9515 00007677 30C0                <2> 	xor al, al
  9516 00007679 30C9                <2> 	xor cl, cl
  9517                              <2> vesafontsaver2:
  9518 0000767B 66392F              <2> 	cmp [edi], bp
  9519 0000767E 742C                <2> 	je colorfontmatch
  9520                              <2> donecolormatch:
  9521 00007680 81C702000000        <2> 	add edi, 2
  9522 00007686 D0C0                <2> 	rol al, 1
  9523 00007688 FEC1                <2> 	inc cl
  9524 0000768A 80F908              <2> 	cmp cl, 8
  9525 0000768D 72EC                <2> 	jb vesafontsaver2
  9526 0000768F 8806                <2> 	mov [esi], al
  9527 00007691 46                  <2> 	inc esi
  9528 00007692 FEC5                <2> 	inc ch
  9529 00007694 31D2                <2> 	xor edx, edx
  9530 00007696 668B15[1F580000]    <2> 	mov dx, [resolutionx2]
  9531 0000769D 01D7                <2> 	add edi, edx
  9532 0000769F 81EF10000000        <2> 	sub edi, 16
  9533 000076A5 80FD10              <2> 	cmp ch, 16
  9534 000076A8 72CD                <2> 	jb vesafontsaver
  9535 000076AA EB80                <2> 	jmp donefontvesa
  9536                              <2> colorfontmatch:
  9537 000076AC 0401                <2> 	add al, 1
  9538 000076AE EBD0                <2> 	jmp donecolormatch
  9539                              <1> %include "source/gui/window.asm"
  9540 000076B0 0000                <2> winvcopystx dw 0
  9541 000076B2 0000                <2> winvcopysty dw 0
  9542 000076B4 0000                <2> winvcopydx dw 0
  9543 000076B6 0000                <2> winvcopycx dw 0
  9544 000076B8 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9545 000076BC 00000000            <2> windowbufloc: dd 0
  9546 000076C0 00000000            <2> windowvideobuf dd 0
  9547 000076C4 00000000            <2> windowvideobuf2 dd 0
  9548 000076C8 00000000            <2> windowinfobuf dd 0
  9549 000076CC 0000                <2> termcol dw 0
  9550 000076CE 00000000            <2> wincopyendpos dd 0
  9551                              <2> 
  9552                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9553 000076D2 C605[8D230000]01    <2> 		mov byte [termguion], 1
  9554 000076D9 6681C11000          <2> 		add cx, 16
  9555 000076DE 668915[B0760000]    <2> 		mov [winvcopystx], dx
  9556 000076E5 66890D[B2760000]    <2> 		mov [winvcopysty], cx
  9557 000076EC 8935[C8760000]      <2> 		mov [windowinfobuf], esi
  9558 000076F2 668B16              <2> 		mov dx, [esi]
  9559 000076F5 668B4E02            <2> 		mov cx, [esi + 2]
  9560 000076F9 31C0                <2> 		xor eax, eax
  9561 000076FB 31DB                <2> 		xor ebx, ebx
  9562 000076FD 6689D0              <2> 		mov ax, dx
  9563 00007700 6689CB              <2> 		mov bx, cx
  9564 00007703 66C1E803            <2> 		shr ax, 3
  9565 00007707 66C1EB04            <2> 		shr bx, 4
  9566 0000770B 66A3[CC760000]      <2> 		mov [termcol], ax
  9567 00007711 A2[82250000]        <2> 		mov [charxy], al
  9568 00007716 881D[83250000]      <2> 		mov [charxy + 1], bl
  9569 0000771C 8B7E04              <2> 		mov edi, [esi + 4]
  9570 0000771F 893D[B8760000]      <2> 		mov [windowcolor], edi
  9571 00007725 8B7E0C              <2> 		mov edi, [esi + 12]
  9572 00007728 893D[C4760000]      <2> 		mov [windowvideobuf2], edi
  9573 0000772E 8B7E08              <2> 		mov edi, [esi + 8]
  9574 00007731 893D[C0760000]      <2> 		mov [windowvideobuf], edi
  9575 00007737 81FB00000000        <2> 		cmp ebx, 0
  9576 0000773D 0F84C1040000        <2> 		je near donewincopynow
  9577                              <2> 	findendposwin:
  9578 00007743 C1E002              <2> 		shl eax, 2
  9579 00007746 31D2                <2> 		xor edx, edx
  9580 00007748 F7E3                <2> 		mul ebx
  9581 0000774A 01C7                <2> 		add edi, eax
  9582 0000774C 893D[CE760000]      <2> 		mov [wincopyendpos], edi
  9583 00007752 31FF                <2> 		xor edi, edi
  9584 00007754 6631C0              <2> 		xor ax, ax
  9585 00007757 6631DB              <2> 		xor bx, bx
  9586 0000775A 6601D2              <2> 		add dx, dx
  9587 0000775D 668915[B4760000]    <2> 		mov [winvcopydx], dx
  9588 00007764 66890D[B6760000]    <2> 		mov [winvcopycx], cx
  9589 0000776B 668B0D[B2760000]    <2> 		mov cx, [winvcopysty]
  9590 00007772 6681E91000          <2> 		sub cx, 16
  9591 00007777 668B15[B0760000]    <2> 		mov dx, [winvcopystx]
  9592 0000777E C605[8E230000]00    <2> 		mov byte [termcopyon], 0
  9593 00007785 B403                <2> 		mov ah, 3
  9594 00007787 E81C0A0000          <2> 		call graphicsadd
  9595                              <2> 	showwindow2:
  9596 0000778C 6681C11000          <2> 		add cx, 16
  9597 00007791 668915[B0760000]    <2> 		mov [winvcopystx], dx
  9598 00007798 66890D[B2760000]    <2> 		mov [winvcopysty], cx
  9599 0000779F 668B16              <2> 		mov dx, [esi]
  9600 000077A2 668B4E02            <2> 		mov cx, [esi + 2]
  9601 000077A6 6601D2              <2> 		add dx, dx
  9602 000077A9 668915[B4760000]    <2> 		mov [winvcopydx], dx
  9603 000077B0 66890D[B6760000]    <2> 		mov [winvcopycx], cx
  9604 000077B7 E818000000          <2> 		call reloadwindowtitle
  9605 000077BC 803D[8F810000]01    <2> 		cmp byte [windrag], 1
  9606 000077C3 0F834A040000        <2> 		jae near forgetresetstuff
  9607 000077C9 8B3D[BC760000]      <2> 		mov edi, [windowbufloc]
  9608 000077CF E96E020000          <2> 		jmp windowvideocopyset
  9609                              <2> 		
  9610                              <2> 	reloadwindowtitle:
  9611 000077D4 8B3D[BC760000]      <2> 		mov edi, [windowbufloc]
  9612 000077DA 31D2                <2> 		xor edx, edx
  9613 000077DC 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  9614 000077E3 C1E204              <2> 		shl edx, 4
  9615 000077E6 29D7                <2> 		sub edi, edx
  9616 000077E8 803D[8E230000]00    <2> 		cmp byte [termcopyon], 0
  9617 000077EF 7532                <2> 		jne nocleartitlebarpos
  9618 000077F1 8B3D[47570000]      <2> 		mov edi, [physbaseptr]
  9619 000077F7 31D2                <2> 		xor edx, edx
  9620 000077F9 668B15[B0760000]    <2> 		mov dx, [winvcopystx]
  9621 00007800 01D7                <2> 		add edi, edx
  9622 00007802 31C9                <2> 		xor ecx, ecx
  9623 00007804 668B0D[B2760000]    <2> 		mov cx, [winvcopysty]
  9624 0000780B 6681E91000          <2> 		sub cx, 16
  9625 00007810 6681F90000          <2> 		cmp cx, 0
  9626 00007815 740C                <2> 		je nocleartitlebarpos
  9627                              <2> 	cleartitlebarpos:
  9628 00007817 31C0                <2> 		xor eax, eax
  9629 00007819 66A1[1F580000]      <2> 		mov ax, [resolutionx2]
  9630 0000781F F7E1                <2> 		mul ecx
  9631 00007821 01C7                <2> 		add edi, eax
  9632                              <2> 	nocleartitlebarpos:
  9633 00007823 66B91000            <2> 		mov cx, 16
  9634 00007827 668B15[B4760000]    <2> 		mov dx, [winvcopydx]
  9635 0000782E 6681F90000          <2> 		cmp cx, 0
  9636 00007833 0F8448000000        <2> 		je near canceltitlebarput
  9637 00007839 6681FA0000          <2> 		cmp dx, 0
  9638 0000783E 0F843D000000        <2> 		je near canceltitlebarput
  9639                              <2> 	titlebarput:
  9640 00007844 66A1[B8760000]      <2> 		mov ax, [windowcolor]
  9641 0000784A 668907              <2> 		mov [edi], ax
  9642 0000784D 6681EA0200          <2> 		sub dx, 2
  9643 00007852 81C702000000        <2> 		add edi, 2
  9644 00007858 6681FA0000          <2> 		cmp dx, 0
  9645 0000785D 75E5                <2> 		jne titlebarput
  9646 0000785F 31D2                <2> 		xor edx, edx
  9647 00007861 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  9648 00007868 6649                <2> 		dec cx
  9649 0000786A 662B15[B4760000]    <2> 		sub dx, [winvcopydx]
  9650 00007871 01D7                <2> 		add edi, edx
  9651 00007873 668B15[B4760000]    <2> 		mov dx, [winvcopydx]
  9652 0000787A 6681F90000          <2> 		cmp cx, 0
  9653 0000787F 75C3                <2> 		jne titlebarput
  9654                              <2> 	canceltitlebarput:
  9655 00007881 893D[BC760000]      <2> 		mov [windowbufloc], edi
  9656 00007887 803D[8E230000]02    <2> 		cmp byte [termcopyon], 2
  9657 0000788E 0F841C010000        <2> 		je near winvcpst
  9658 00007894 668B1D[056E0000]    <2> 		mov bx, [background]
  9659 0000789B 6653                <2> 		push bx
  9660 0000789D 6631DB              <2> 		xor bx, bx
  9661 000078A0 66891D[056E0000]    <2> 		mov [background], bx
  9662 000078A7 6631C0              <2> 		xor ax, ax
  9663 000078AA 81C610000000        <2> 		add esi, 16
  9664 000078B0 668B15[B0760000]    <2> 		mov dx, [winvcopystx]
  9665 000078B7 668B0D[B2760000]    <2> 		mov cx, [winvcopysty]
  9666 000078BE 6681E91000          <2> 		sub cx, 16
  9667 000078C3 668B1D[B8760000]    <2> 		mov bx, [windowcolor]
  9668 000078CA C605[277C0000]01    <2> 		mov byte [mouseselecton], 1
  9669 000078D1 E884FBFFFF          <2> 		call showstring2	;Show window title
  9670 000078D6 8B35[752C0000]      <2> 		mov esi, [usercache]
  9671 000078DC 6681C21000          <2> 		add dx, 16
  9672 000078E1 C605[277C0000]01    <2> 		mov byte [mouseselecton], 1
  9673 000078E8 E86DFBFFFF          <2> 		call showstring2	;Show user name
  9674 000078ED BE[67890000]        <2> 		mov esi, computer
  9675 000078F2 C605[277C0000]01    <2> 		mov byte [mouseselecton], 1
  9676 000078F9 E85CFBFFFF          <2> 		call showstring2	;Show computer name
  9677 000078FE 66B85800            <2> 		mov ax, "X"
  9678 00007902 66BB00F8            <2> 		mov bx, 1111100000000000b
  9679 00007906 668B15[B0760000]    <2> 		mov dx, [winvcopystx]
  9680 0000790D 668B0D[B2760000]    <2> 		mov cx, [winvcopysty]
  9681 00007914 6681E91000          <2> 		sub cx, 16
  9682 00007919 6681EA1000          <2> 		sub dx, 16
  9683 0000791E 660315[B4760000]    <2> 		add dx, [winvcopydx]
  9684 00007925 C605[277C0000]01    <2> 		mov byte [mouseselecton], 1
  9685 0000792C 663B15[1F580000]    <2> 		cmp dx, [resolutionx2]
  9686 00007933 7305                <2> 		jae .nox
  9687 00007935 E897FBFFFF          <2> 		call showfontvesa
  9688                              <2> .nox:
  9689 0000793A 668B1D[056E0000]    <2> 		mov bx, [background]
  9690 00007941 6681EA1800          <2> 		sub dx, 24
  9691 00007946 66B82B00            <2> 		mov ax, "+"
  9692 0000794A 66BBE007            <2> 		mov bx, 0000011111100000b
  9693 0000794E C605[277C0000]01    <2> 		mov byte [mouseselecton], 1
  9694 00007955 663B15[1F580000]    <2> 		cmp dx, [resolutionx2]
  9695 0000795C 7305                <2> 		jae .noplus
  9696 0000795E E86EFBFFFF          <2> 		call showfontvesa
  9697                              <2> .noplus:
  9698 00007963 6681EA1800          <2> 		sub dx, 24
  9699 00007968 66B82D00            <2> 		mov ax, "-"
  9700 0000796C 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9701 00007970 C605[277C0000]01    <2> 		mov byte [mouseselecton], 1
  9702 00007977 663B15[1F580000]    <2> 		cmp dx, [resolutionx2]
  9703 0000797E 7305                <2> 		jae .nominus
  9704 00007980 E84CFBFFFF          <2> 		call showfontvesa
  9705                              <2> .nominus:
  9706 00007985 6681EA1800          <2> 		sub dx, 24
  9707 0000798A 66B83F00            <2> 		mov ax, "?"
  9708 0000798E 66BB1F00            <2> 		mov bx, 0000000000011111b
  9709 00007992 C605[277C0000]01    <2> 		mov byte [mouseselecton], 1
  9710 00007999 663B15[1F580000]    <2> 		cmp dx, [resolutionx2]
  9711 000079A0 7305                <2> 		jae .noquestion
  9712 000079A2 E82AFBFFFF          <2> 		call showfontvesa
  9713                              <2> .noquestion:
  9714 000079A7 665B                <2> 		pop bx
  9715 000079A9 66891D[056E0000]    <2> 		mov [background], bx
  9716                              <2> 	winvcpst:
  9717 000079B0 C3                  <2> 		ret
  9718                              <2> 
  9719                              <2> 	windowvideocopy:
  9720 000079B1 8B35[C8760000]      <2> 		mov esi, [windowinfobuf]
  9721 000079B7 668B16              <2> 		mov dx, [esi]
  9722 000079BA 668B4E02            <2> 		mov cx, [esi + 2]
  9723 000079BE 8B7E04              <2> 		mov edi, [esi + 4]
  9724 000079C1 893D[B8760000]      <2> 		mov [windowcolor], edi
  9725 000079C7 8B7E08              <2> 		mov edi, [esi + 8]
  9726 000079CA 8B5E0C              <2> 		mov ebx, [esi + 12]
  9727 000079CD 893D[C0760000]      <2> 		mov [windowvideobuf], edi
  9728 000079D3 891D[C4760000]      <2> 		mov [windowvideobuf2], ebx
  9729 000079D9 31C0                <2> 		xor eax, eax
  9730 000079DB 31DB                <2> 		xor ebx, ebx
  9731 000079DD 6689D0              <2> 		mov ax, dx
  9732 000079E0 6689CB              <2> 		mov bx, cx
  9733 000079E3 66C1E803            <2> 		shr ax, 3
  9734 000079E7 66C1EB04            <2> 		shr bx, 4
  9735 000079EB 66A3[CC760000]      <2> 		mov [termcol], ax
  9736 000079F1 A2[82250000]        <2> 		mov [charxy], al
  9737 000079F6 881D[83250000]      <2> 		mov [charxy + 1], bl
  9738 000079FC 8B3D[BC760000]      <2> 		mov edi, [windowbufloc]
  9739 00007A02 3B3D[47570000]      <2> 		cmp edi, [physbaseptr]
  9740 00007A08 0F8334000000        <2> 		jae near windowvideocopyset
  9741 00007A0E 31C9                <2> 		xor ecx, ecx
  9742 00007A10 31D2                <2> 		xor edx, edx
  9743 00007A12 668B15[B0760000]    <2> 		mov dx, [winvcopystx]
  9744 00007A19 668B0D[B2760000]    <2> 		mov cx, [winvcopysty]
  9745 00007A20 8B3D[47570000]      <2> 		mov edi, [physbaseptr]
  9746 00007A26 01D7                <2> 		add edi, edx
  9747 00007A28 81F900000000        <2> 		cmp ecx, 0
  9748 00007A2E 7412                <2> 		je windowvideocopyset
  9749                              <2> 	yrescopylp:
  9750 00007A30 31C0                <2> 		xor eax, eax
  9751 00007A32 66A1[1F580000]      <2> 		mov ax, [resolutionx2]
  9752 00007A38 F7E1                <2> 		mul ecx
  9753 00007A3A 01C7                <2> 		add edi, eax
  9754 00007A3C 893D[BC760000]      <2> 		mov [windowbufloc], edi
  9755                              <2> 	windowvideocopyset:
  9756 00007A42 6631C9              <2> 		xor cx, cx
  9757 00007A45 6649                <2> 		dec cx
  9758 00007A47 66890D[1B7C0000]    <2> 		mov [charposline], cx
  9759 00007A4E 89FE                <2> 		mov esi, edi
  9760 00007A50 81EE10000000        <2> 		sub esi, 16
  9761 00007A56 31D2                <2> 		xor edx, edx
  9762 00007A58 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  9763 00007A5F C1E204              <2> 		shl edx, 4
  9764 00007A62 01D6                <2> 		add esi, edx
  9765 00007A64 8B3D[C0760000]      <2> 		mov edi, [windowvideobuf]
  9766 00007A6A 81EF04000000        <2> 		sub edi, 4
  9767 00007A70 893D[1D7C0000]      <2> 		mov [charposvbuf], edi
  9768 00007A76 E97C000000          <2> 		jmp nextcharwin
  9769                              <2> 	win.write:	;adjusted this to use alpha
  9770                              <2> 				;5R, 6G, 5B
  9771                              <2> %ifdef gui.alphablending
  9772                              <2> 		push esi
  9773                              <2> 		push bx
  9774                              <2> 		push cx
  9775                              <2> 		push dx
  9776                              <2> %ifdef gui.background
  9777                              <2> 		mov esi, edi
  9778                              <2> 		sub esi, [physbaseptr]
  9779                              <2> 		add esi, [backgroundimage]
  9780                              <2> 		cmp dword [backgroundimage], 0
  9781                              <2> 		jne .red
  9782                              <2> %endif
  9783                              <2> 		mov esi, background
  9784                              <2> 	.red:
  9785                              <2> 		mov cx, [esi]
  9786                              <2> 		shr cx, 11
  9787                              <2> 		mov bx, ax
  9788                              <2> 		shr bx, 11
  9789                              <2> 		add cx, bx
  9790                              <2> 		add cx, bx
  9791                              <2> 		add cx, bx
  9792                              <2> 		shr cx, 2
  9793                              <2> 		shl cx, 11
  9794                              <2> 		mov dx, cx
  9795                              <2> 	.green:
  9796                              <2> 		mov cx, [esi]
  9797                              <2> 		shl cx, 5
  9798                              <2> 		shr cx, 10
  9799                              <2> 		mov bx, ax
  9800                              <2> 		shl bx, 5
  9801                              <2> 		shr bx, 10
  9802                              <2> 		add cx, bx
  9803                              <2> 		add cx, bx
  9804                              <2> 		add cx, bx
  9805                              <2> 		shr cx, 2
  9806                              <2> 		shl cx, 5
  9807                              <2> 		add dx, cx
  9808                              <2> 	.blue:
  9809                              <2> 		mov cx, [esi]
  9810                              <2> 		shl cx, 11
  9811                              <2> 		shr cx, 11
  9812                              <2> 		mov bx, ax
  9813                              <2> 		shl bx, 11
  9814                              <2> 		shr bx, 11
  9815                              <2> 		add cx, bx
  9816                              <2> 		add cx, bx
  9817                              <2> 		add cx, bx
  9818                              <2> 		shr cx, 2
  9819                              <2> 		add dx, cx
  9820                              <2> 		mov [edi], dx
  9821                              <2> 		pop dx
  9822                              <2> 		pop cx
  9823                              <2> 		pop bx
  9824                              <2> 		pop esi
  9825                              <2> %else
  9826 00007A7B 668907              <2> 		mov [edi], ax
  9827                              <2> %endif
  9828 00007A7E C3                  <2> 		ret
  9829                              <2> 	copywindow:
  9830 00007A7F B201                <2> 		mov dl, 1
  9831 00007A81 D0C6                <2> 		rol dh, 1
  9832 00007A83 20F2                <2> 		and dl, dh
  9833 00007A85 66813D[C2740000]80- <2> 		cmp word [colorcache], 0x80
  9834 00007A8D 00                  <2>
  9835 00007A8E 7320                <2> 		jae switchwincolors
  9836 00007A90 66A1[BA760000]      <2> 		mov ax, [windowcolor + 2]
  9837 00007A96 E8E0FFFFFF          <2> 		call win.write
  9838 00007A9B 80FA00              <2> 		cmp dl, 0
  9839 00007A9E 742B                <2> 		je nowritewin
  9840 00007AA0 66A1[B8760000]      <2> 		mov ax, [windowcolor]
  9841 00007AA6 E8D0FFFFFF          <2> 		call win.write
  9842 00007AAB E91B000000          <2> 		jmp nowritewin
  9843                              <2> 	switchwincolors:
  9844 00007AB0 66A1[B8760000]      <2> 		mov ax, [windowcolor]
  9845 00007AB6 E8C0FFFFFF          <2> 		call win.write
  9846 00007ABB 80FA00              <2> 		cmp dl, 0
  9847 00007ABE 740B                <2> 		je nowritewin
  9848 00007AC0 66A1[BA760000]      <2> 		mov ax, [windowcolor + 2]
  9849 00007AC6 E8B0FFFFFF          <2> 		call win.write
  9850                              <2> 	nowritewin:
  9851 00007ACB 81C702000000        <2> 		add edi, 2
  9852 00007AD1 FEC1                <2> 		inc cl
  9853 00007AD3 80F908              <2> 		cmp cl, 8
  9854 00007AD6 75A7                <2> 		jne copywindow
  9855 00007AD8 43                  <2> 		inc ebx
  9856 00007AD9 30C9                <2> 		xor cl, cl
  9857 00007ADB 31D2                <2> 		xor edx, edx
  9858 00007ADD 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  9859 00007AE4 01D6                <2> 		add esi, edx
  9860 00007AE6 89F7                <2> 		mov edi, esi
  9861 00007AE8 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9862 00007AEE D0CE                <2> 		ror dh, 1
  9863 00007AF0 FEC5                <2> 		inc ch
  9864 00007AF2 80FD10              <2> 		cmp ch, 16
  9865 00007AF5 7588                <2> 		jne copywindow
  9866                              <2> 	nextcharwin:
  9867 00007AF7 6631C9              <2> 		xor cx, cx
  9868 00007AFA 8B3D[1D7C0000]      <2> 		mov edi, [charposvbuf]
  9869 00007B00 81C704000000        <2> 		add edi, 4
  9870 00007B06 3B3D[CE760000]      <2> 		cmp edi, [wincopyendpos]
  9871 00007B0C 0F83F2000000        <2> 		jae near donewincopynow
  9872 00007B12 668B5F02            <2> 		mov bx, [edi + 2]
  9873 00007B16 6681FB0000          <2> 		cmp bx, 0
  9874 00007B1B 7508                <2> 		jne nofixcolorwin
  9875 00007B1D 66BB0700            <2> 		mov bx, 7
  9876 00007B21 66895F02            <2> 		mov [edi + 2], bx
  9877                              <2> 	nofixcolorwin:
  9878 00007B25 66891D[C2740000]    <2> 		mov [colorcache], bx
  9879 00007B2C 8B1F                <2> 		mov ebx, [edi]
  9880 00007B2E 893D[1D7C0000]      <2> 		mov [charposvbuf], edi
  9881 00007B34 813D[C4760000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9882 00007B3C 0000                <2>
  9883 00007B3E 7455                <2> 		je noskipcharcopy
  9884 00007B40 2B3D[C0760000]      <2> 		sub edi, [windowvideobuf]
  9885 00007B46 033D[C4760000]      <2> 		add edi, [windowvideobuf2]
  9886 00007B4C 8B07                <2> 		mov eax, [edi]
  9887 00007B4E 39D8                <2> 		cmp eax, ebx
  9888 00007B50 7543                <2> 		jne noskipcharcopy
  9889                              <2> 	skipcharcopy:
  9890 00007B52 81C610000000        <2> 		add esi, 16
  9891 00007B58 668B0D[1B7C0000]    <2> 		mov cx, [charposline]
  9892 00007B5F 6641                <2> 		inc cx
  9893 00007B61 66890D[1B7C0000]    <2> 		mov [charposline], cx
  9894 00007B68 663B0D[CC760000]    <2> 		cmp cx, [termcol]
  9895 00007B6F 7286                <2> 		jb nextcharwin
  9896 00007B71 6631C9              <2> 		xor cx, cx
  9897 00007B74 66890D[1B7C0000]    <2> 		mov [charposline], cx
  9898 00007B7B 31D2                <2> 		xor edx, edx
  9899 00007B7D 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  9900 00007B84 C1E204              <2> 		shl edx, 4
  9901 00007B87 662B15[B4760000]    <2> 		sub dx, [winvcopydx]
  9902 00007B8E 01D6                <2> 		add esi, edx
  9903 00007B90 E962FFFFFF          <2> 		jmp nextcharwin
  9904                              <2> 	noskipcharcopy:
  9905 00007B95 891F                <2> 		mov [edi], ebx
  9906 00007B97 8B3D[1D7C0000]      <2> 		mov edi, [charposvbuf]
  9907 00007B9D C1E310              <2> 		shl ebx, 16
  9908 00007BA0 C1EB0C              <2> 		shr ebx, 12
  9909 00007BA3 31D2                <2> 		xor edx, edx
  9910 00007BA5 668B15[1F580000]    <2> 		mov dx, [resolutionx2]
  9911 00007BAC C1E204              <2> 		shl edx, 4
  9912 00007BAF 29D6                <2> 		sub esi, edx
  9913 00007BB1 81C610000000        <2> 		add esi, 16
  9914 00007BB7 89F7                <2> 		mov edi, esi
  9915 00007BB9 668B0D[1B7C0000]    <2> 		mov cx, [charposline]
  9916 00007BC0 6641                <2> 		inc cx
  9917 00007BC2 663B0D[CC760000]    <2> 		cmp cx, [termcol]
  9918 00007BC9 7317                <2> 		jae fixwindowcopy
  9919 00007BCB 66890D[1B7C0000]    <2> 		mov [charposline], cx
  9920 00007BD2 6631C9              <2> 		xor cx, cx
  9921 00007BD5 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9922 00007BDB D0CE                <2> 		ror dh, 1
  9923 00007BDD E99DFEFFFF          <2> 		jmp copywindow
  9924                              <2> fixwindowcopy:
  9925 00007BE2 6631C9              <2> 		xor cx, cx
  9926 00007BE5 66890D[1B7C0000]    <2> 		mov [charposline], cx
  9927 00007BEC 662B15[B4760000]    <2> 		sub dx, [winvcopydx]
  9928 00007BF3 01D6                <2> 		add esi, edx
  9929 00007BF5 89F7                <2> 		mov edi, esi
  9930 00007BF7 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9931 00007BFD D0CE                <2> 		ror dh, 1
  9932 00007BFF E97BFEFFFF          <2> 		jmp copywindow
  9933                              <2> donewincopynow:
  9934 00007C04 803D[8E230000]01    <2> 		cmp byte [termcopyon], 1
  9935 00007C0B 7506                <2> 		jne forgetresetstuff
  9936 00007C0D E858ADFFFF          <2> 		call switchtermcursor
  9937 00007C12 61                  <2> 		popa
  9938                              <2> forgetresetstuff:
  9939 00007C13 C605[8E230000]00    <2> 		mov byte [termcopyon], 0
  9940 00007C1A C3                  <2> 		ret
  9941                              <2> 		
  9942 00007C1B 0000                <2> charposline dw 0
  9943 00007C1D 00000000            <2> charposvbuf dw 0,0
  9944                              <1> 				
  9945 00007C21 00                  <1> copygui db 0
  9946 00007C22 00                  <1> graphicsset db 0
  9947 00007C23 0000                <1> graphicspos db 0,0
  9948 00007C25 00                  <1> showcursorfonton db 0
  9949 00007C26 00                  <1> savefonton db 0
  9950 00007C27 00                  <1> mouseselecton db 0
  9951                              <1> 
  9952 00007C28 00                  <1> pbutton db 0
  9953 00007C29 00                  <1> pLBUTTON db 0
  9954 00007C2A 00                  <1> pRBUTTON db 0
  9955 00007C2B 00000000            <1> dragging dw 0,0
  9956 00007C2F 0000000000000000    <1> lastpos dw 0,0,0,0
  9957 00007C37 00000000            <1> colorbuf dw 0,0
  9958                              <1> 	
  9959                              <1> 	clickicon:
  9960 00007C3B B001                <1> 		mov al, 1
  9961 00007C3D A2[287C0000]        <1> 		mov [pbutton], al
  9962 00007C42 A0[297C0000]        <1> 		mov al, [pLBUTTON]
  9963 00007C47 2205[265B0000]      <1> 		and al, [LBUTTON]
  9964 00007C4D 8A25[2A7C0000]      <1> 		mov ah, [pRBUTTON]
  9965 00007C53 2225[275B0000]      <1> 		and ah, [RBUTTON]
  9966 00007C59 08E0                <1> 		or al, ah
  9967 00007C5B 3C00                <1> 		cmp al, 0
  9968 00007C5D 741B                <1> 		je nodragclick
  9969 00007C5F 813D[2B7C0000]0100- <1> 		cmp dword [dragging], 1
  9970 00007C67 0000                <1>
  9971 00007C69 732F                <1> 		jae dragclick
  9972 00007C6B C705[2B7C0000]0100- <1> 		mov dword [dragging], 1
  9973 00007C73 0000                <1>
  9974 00007C75 E920000000          <1> 		jmp dragclick
  9975                              <1> 	nodragclick:
  9976 00007C7A 31C0                <1> 		xor eax, eax
  9977 00007C7C A3[2B7C0000]        <1> 		mov dword [dragging], eax
  9978 00007C81 A2[287C0000]        <1> 		mov [pbutton], al
  9979 00007C86 A0[265B0000]        <1> 		mov al, [LBUTTON]
  9980 00007C8B A2[297C0000]        <1> 		mov [pLBUTTON], al
  9981 00007C90 A0[275B0000]        <1> 		mov al, [RBUTTON]
  9982 00007C95 A2[2A7C0000]        <1> 		mov [pRBUTTON], al
  9983                              <1> 	dragclick:
  9984 00007C9A 6631C0              <1> 		xor ax, ax
  9985 00007C9D BE[BB2C0100]        <1> 		mov esi, graphicstable
  9986 00007CA2 C705[7B840000]0000- <1> 		mov dword [codepointer], 0
  9987 00007CAA 0000                <1>
  9988                              <1> 	clicon2:
  9989 00007CAC 31D2                <1> 		xor edx, edx
  9990 00007CAE 31C9                <1> 		xor ecx, ecx
  9991 00007CB0 66813E0100          <1> 		cmp word [esi], 1
  9992 00007CB5 0F841B000000        <1> 		je near iconselect
  9993 00007CBB 66813E0200          <1> 		cmp word [esi], 2
  9994 00007CC0 0F8472010000        <1> 		je near textselected
  9995 00007CC6 66813E0300          <1> 		cmp word [esi], 3
  9996 00007CCB 0F84C7020000        <1> 		je near windowselect
  9997 00007CD1 E910040000          <1> 		jmp nexticonsel
  9998                              <1> 	iconselect:
  9999 00007CD6 668B5606            <1> 		mov dx, [esi + 6]
 10000 00007CDA 6689D0              <1> 		mov ax, dx
 10001 00007CDD 668B4E08            <1> 		mov cx, [esi + 8]
 10002 00007CE1 6689CB              <1> 		mov bx, cx
 10003 00007CE4 6681C32000          <1> 		add bx, 32
 10004 00007CE9 6601D0              <1> 		add ax, dx
 10005 00007CEC 813D[2B7C0000]0100- <1> 		cmp dword [dragging], 1
 10006 00007CF4 0000                <1>
 10007 00007CF6 746F                <1> 		je dragicon
 10008 00007CF8 813D[2B7C0000]0000- <1> 		cmp dword [dragging], 0
 10009 00007D00 0000                <1>
 10010 00007D02 7411                <1> 		je nodragiconcheck
 10011 00007D04 3935[2B7C0000]      <1> 		cmp dword [dragging], esi
 10012 00007D0A 0F85D6030000        <1> 		jne near nexticonsel
 10013 00007D10 E952000000          <1> 		jmp dragicon
 10014                              <1> 	nodragiconcheck:
 10015 00007D15 663905[155A0000]    <1> 		cmp [mousecursorposition], ax
 10016 00007D1C 0F82C4030000        <1> 		jb near nexticonsel
 10017 00007D22 66054000            <1> 		add ax, 64
 10018 00007D26 663905[155A0000]    <1> 		cmp [mousecursorposition], ax
 10019 00007D2D 0F87B3030000        <1> 		ja near nexticonsel
 10020 00007D33 6629D0              <1> 		sub ax, dx
 10021 00007D36 66390D[175A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10022 00007D3D 0F82A3030000        <1> 		jb near nexticonsel
 10023 00007D43 66391D[175A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10024 00007D4A 0F8796030000        <1> 		ja near nexticonsel
 10025 00007D50 668B460A            <1> 		mov ax, [esi + 10]
 10026 00007D54 66250100            <1> 		and ax, 1
 10027 00007D58 663D0100            <1> 		cmp ax, 1
 10028 00007D5C 0F84B6000000        <1> 		je near unselecticon
 10029 00007D62 E98D000000          <1> 		jmp nodragicon
 10030                              <1> 	dragicon:
 10031 00007D67 663905[115A0000]    <1> 		cmp [lastmouseposition], ax
 10032 00007D6E 0F8272030000        <1> 		jb near nexticonsel
 10033 00007D74 66054000            <1> 		add ax, 64
 10034 00007D78 663905[115A0000]    <1> 		cmp [lastmouseposition], ax
 10035 00007D7F 0F8761030000        <1> 		ja near nexticonsel
 10036 00007D85 6629D0              <1> 		sub ax, dx
 10037 00007D88 66390D[135A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10038 00007D8F 0F8251030000        <1> 		jb near nexticonsel
 10039 00007D95 66391D[135A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10040 00007D9C 0F8744030000        <1> 		ja near nexticonsel
 10041 00007DA2 668B460A            <1> 		mov ax, [esi + 10]
 10042 00007DA6 2410                <1> 		and al, 00010000b
 10043 00007DA8 3C10                <1> 		cmp al, 00010000b
 10044 00007DAA 7448                <1> 		je nodragicon
 10045 00007DAC 8935[2B7C0000]      <1> 		mov [dragging], esi
 10046 00007DB2 66D1E2              <1> 		shl dx, 1
 10047 00007DB5 662B15[115A0000]    <1> 		sub dx, [lastmouseposition]
 10048 00007DBC 660315[155A0000]    <1> 		add dx, [mousecursorposition]
 10049 00007DC3 66D1EA              <1> 		shr dx, 1
 10050 00007DC6 66030D[175A0000]    <1> 		add cx, [mousecursorposition + 2]
 10051 00007DCD 662B0D[135A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10052 00007DD4 663B15[1F580000]    <1> 		cmp dx, [resolutionx2]
 10053 00007DDB 7607                <1> 		jbe chkyresdrgicn
 10054 00007DDD 668B15[155A0000]    <1> 		mov dx, [mousecursorposition]
 10055                              <1> 	chkyresdrgicn:
 10056 00007DE4 663B0D[33570000]    <1> 		cmp cx, [resolutiony]
 10057 00007DEB 7607                <1> 		jbe nodragicon
 10058 00007DED 668B0D[175A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10059                              <1> 	nodragicon:
 10060 00007DF4 66814E0A0100        <1> 		or word [esi + 10], 1
 10061 00007DFA 8B5E0C              <1> 		mov ebx, [esi + 12]
 10062 00007DFD 668B460A            <1> 		mov ax, [esi + 10]
 10063 00007E01 8B7602              <1> 		mov esi, [esi + 2]
 10064 00007E04 C705[7B840000]0000- <1> 		mov dword [codepointer], 0
 10065 00007E0C 0000                <1>
 10066 00007E0E E8A5EDFFFF          <1> 		call showicon
 10067 00007E13 E9E7020000          <1> 		jmp doneiconsel
 10068                              <1> 	unselecticon:
 10069 00007E18 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10070 00007E1E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10071 00007E21 668B460A            <1> 		mov ax, [esi + 10]
 10072 00007E25 8B7602              <1> 		mov esi, [esi + 2]
 10073 00007E28 891D[7B840000]      <1> 		mov [codepointer], ebx
 10074 00007E2E E885EDFFFF          <1> 		call showicon
 10075 00007E33 E9C7020000          <1> 		jmp doneiconsel
 10076                              <1> 	textselected:
 10077 00007E38 8B5E02              <1> 		mov ebx, [esi + 2]
 10078 00007E3B 668B5606            <1> 		mov dx, [esi + 6]
 10079 00007E3F 6689D0              <1> 		mov ax, dx
 10080 00007E42 668B4E08            <1> 		mov cx, [esi + 8]
 10081                              <1> 	lengthtesttext:
 10082 00007E46 803B00              <1> 		cmp byte [ebx], 0
 10083 00007E49 7407                <1> 		je donetesttextlength
 10084 00007E4B 43                  <1> 		inc ebx
 10085 00007E4C 66051000            <1> 		add ax, 16
 10086 00007E50 EBF4                <1> 		jmp lengthtesttext
 10087                              <1> 	donetesttextlength:
 10088 00007E52 6689CB              <1> 		mov bx, cx
 10089 00007E55 6681C30F00          <1> 		add bx, 15
 10090 00007E5A 813D[2B7C0000]0100- <1> 		cmp dword [dragging], 1
 10091 00007E62 0000                <1>
 10092 00007E64 7468                <1> 		je dragtext
 10093 00007E66 813D[2B7C0000]0000- <1> 		cmp dword [dragging], 0
 10094 00007E6E 0000                <1>
 10095 00007E70 7411                <1> 		je nodragtextcheck
 10096 00007E72 3935[2B7C0000]      <1> 		cmp dword [dragging], esi
 10097 00007E78 0F8568020000        <1> 		jne near nexticonsel
 10098 00007E7E E94B000000          <1> 		jmp dragtext
 10099                              <1> 	nodragtextcheck:
 10100 00007E83 663915[155A0000]    <1> 		cmp [mousecursorposition], dx
 10101 00007E8A 0F8256020000        <1> 		jb near nexticonsel
 10102 00007E90 663905[155A0000]    <1> 		cmp [mousecursorposition], ax
 10103 00007E97 0F8749020000        <1> 		ja near nexticonsel
 10104 00007E9D 66390D[175A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10105 00007EA4 0F823C020000        <1> 		jb near nexticonsel
 10106 00007EAA 66391D[175A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10107 00007EB1 0F872F020000        <1> 		ja near nexticonsel
 10108 00007EB7 668B460A            <1> 		mov ax, [esi + 10]
 10109 00007EBB 66250100            <1> 		and ax, 1
 10110 00007EBF 663D0100            <1> 		cmp ax, 1
 10111 00007EC3 0F84AB000000        <1> 		je near unselecttext
 10112 00007EC9 E986000000          <1> 		jmp nodragtext
 10113                              <1> 	dragtext:
 10114 00007ECE 663915[115A0000]    <1> 		cmp [lastmouseposition], dx
 10115 00007ED5 0F820B020000        <1> 		jb near nexticonsel
 10116 00007EDB 663905[115A0000]    <1> 		cmp [lastmouseposition], ax
 10117 00007EE2 0F87FE010000        <1> 		ja near nexticonsel
 10118 00007EE8 66390D[135A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10119 00007EEF 0F82F1010000        <1> 		jb near nexticonsel
 10120 00007EF5 66391D[135A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10121 00007EFC 0F87E4010000        <1> 		ja near nexticonsel
 10122 00007F02 668B460A            <1> 		mov ax, [esi + 10]
 10123 00007F06 2410                <1> 		and al, 00010000b
 10124 00007F08 663D1000            <1> 		cmp ax, 00010000b
 10125 00007F0C 0F8442000000        <1> 		je near nodragtext
 10126 00007F12 8935[2B7C0000]      <1> 		mov [dragging], esi
 10127 00007F18 662B15[115A0000]    <1> 		sub dx, [lastmouseposition]
 10128 00007F1F 660315[155A0000]    <1> 		add dx, [mousecursorposition]
 10129 00007F26 66030D[175A0000]    <1> 		add cx, [mousecursorposition + 2]
 10130 00007F2D 662B0D[135A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10131 00007F34 663B15[1F580000]    <1> 		cmp dx, [resolutionx2]
 10132 00007F3B 7607                <1> 		jbe chkyresdrgtxt
 10133 00007F3D 668B15[155A0000]    <1> 		mov dx, [mousecursorposition]
 10134                              <1> 	chkyresdrgtxt:
 10135 00007F44 663B0D[33570000]    <1> 		cmp cx, [resolutiony]
 10136 00007F4B 7607                <1> 		jbe nodragtext
 10137 00007F4D 668B0D[175A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10138                              <1> 	nodragtext:
 10139 00007F54 66814E0A0100        <1> 		or word [esi + 10], 1
 10140 00007F5A 8B5E0C              <1> 		mov ebx, [esi + 12]
 10141 00007F5D 891D[7B840000]      <1> 		mov [codepointer], ebx
 10142 00007F63 668B460A            <1> 		mov ax, [esi + 10]
 10143 00007F67 8B7602              <1> 		mov esi, [esi + 2]
 10144 00007F6A E8D8F4FFFF          <1> 		call showstring
 10145 00007F6F E98B010000          <1> 		jmp doneiconsel
 10146                              <1> 	unselecttext:
 10147 00007F74 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10148 00007F7A 8B5E0C              <1> 		mov ebx, [esi + 12]
 10149 00007F7D 668B460A            <1> 		mov ax, [esi + 10]
 10150 00007F81 8B7602              <1> 		mov esi, [esi + 2]
 10151 00007F84 C705[7B840000]0000- <1> 		mov dword [codepointer], 0
 10152 00007F8C 0000                <1>
 10153 00007F8E E8B4F4FFFF          <1> 		call showstring
 10154 00007F93 E967010000          <1> 		jmp doneiconsel
 10155                              <1> windowselect:
 10156 00007F98 8B7E02              <1> 		mov edi, [esi + 2]
 10157 00007F9B 668B5606            <1> 		mov dx, [esi + 6]
 10158 00007F9F 6689D0              <1> 		mov ax, dx
 10159 00007FA2 668B4E08            <1> 		mov cx, [esi + 8]
 10160 00007FA6 6689CB              <1> 		mov bx, cx
 10161 00007FA9 6681C31000          <1> 		add bx, 16
 10162 00007FAE 813D[2B7C0000]0100- <1> 		cmp dword [dragging], 1
 10163 00007FB6 0000                <1>
 10164 00007FB8 746D                <1> 		je dragwin
 10165 00007FBA 813D[2B7C0000]0000- <1> 		cmp dword [dragging], 0
 10166 00007FC2 0000                <1>
 10167 00007FC4 7411                <1> 		je nodragwincheck
 10168 00007FC6 3935[2B7C0000]      <1> 		cmp dword [dragging], esi
 10169 00007FCC 0F8514010000        <1> 		jne near nexticonsel
 10170 00007FD2 E950000000          <1> 		jmp dragwin
 10171                              <1> 	nodragwincheck:
 10172 00007FD7 663905[155A0000]    <1> 		cmp [mousecursorposition], ax
 10173 00007FDE 0F8202010000        <1> 		jb near nexticonsel
 10174 00007FE4 660307              <1> 		add ax, [edi]
 10175 00007FE7 660307              <1> 		add ax, [edi]
 10176 00007FEA 663905[155A0000]    <1> 		cmp [mousecursorposition], ax
 10177 00007FF1 0F87EF000000        <1> 		ja near nexticonsel
 10178 00007FF7 66390D[175A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10179 00007FFE 0F82E2000000        <1> 		jb near nexticonsel
 10180 00008004 66391D[175A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10181 0000800B 0F87D5000000        <1> 		ja near nexticonsel
 10182 00008011 662D1400            <1> 		sub ax, 20
 10183 00008015 663905[155A0000]    <1> 		cmp [mousecursorposition], ax
 10184 0000801C 0F87A4000000        <1> 		ja near killwin
 10185 00008022 E98B000000          <1> 		jmp nodragwin
 10186                              <1> 	dragwin:
 10187 00008027 663905[115A0000]    <1> 		cmp [lastmouseposition], ax
 10188 0000802E 0F82B2000000        <1> 		jb near nexticonsel
 10189 00008034 660307              <1> 		add ax, [edi]
 10190 00008037 660307              <1> 		add ax, [edi]
 10191 0000803A 663905[115A0000]    <1> 		cmp [lastmouseposition], ax
 10192 00008041 0F879F000000        <1> 		ja near nexticonsel
 10193 00008047 66390D[135A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10194 0000804E 0F8292000000        <1> 		jb near nexticonsel
 10195 00008054 66391D[135A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10196 0000805B 0F8785000000        <1> 		ja near nexticonsel
 10197 00008061 8935[2B7C0000]      <1> 		mov [dragging], esi
 10198 00008067 803D[8F810000]01    <1> 		cmp byte [windrag], 1
 10199 0000806E 7706                <1> 		ja .nochangewindrag
 10200 00008070 FE05[8F810000]      <1> 		inc byte [windrag]
 10201                              <1> 	.nochangewindrag:
 10202 00008076 662B15[115A0000]    <1> 		sub dx, [lastmouseposition]
 10203 0000807D 660315[155A0000]    <1> 		add dx, [mousecursorposition]
 10204 00008084 66030D[175A0000]    <1> 		add cx, [mousecursorposition + 2]
 10205 0000808B 662B0D[135A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10206 00008092 663B15[1F580000]    <1> 		cmp dx, [resolutionx2]
 10207 00008099 7607                <1> 		jbe chkyresdrgwin
 10208 0000809B 668B15[155A0000]    <1> 		mov dx, [mousecursorposition]
 10209                              <1> 	chkyresdrgwin:
 10210 000080A2 663B0D[33570000]    <1> 		cmp cx, [resolutiony]
 10211 000080A9 7607                <1> 		jbe nodragwin
 10212 000080AB 668B0D[175A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10213                              <1> 	nodragwin:
 10214 000080B2 8B5E0C              <1> 		mov ebx, [esi + 12]
 10215 000080B5 668B460A            <1> 		mov ax, [esi + 10]
 10216 000080B9 8B7602              <1> 		mov esi, [esi + 2]
 10217 000080BC E811F6FFFF          <1> 		call showwindow
 10218 000080C1 E939000000          <1> 		jmp doneiconsel
 10219                              <1> 	killwin:
 10220 000080C6 66C7060000          <1> 		mov word [esi], 0
 10221 000080CB C605[8D230000]00    <1> 		mov byte [termguion], 0
 10222 000080D2 E8E2ECFFFF          <1> 		call guiclear
 10223 000080D7 E82DEDFFFF          <1> 		call reloadallgraphics
 10224 000080DC E874EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10225 000080E1 E950E6FFFF          <1> 		jmp guistart
 10226                              <1> 	nexticonsel:
 10227 000080E6 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10228 000080EC 81C610000000        <1> 		add esi, 16
 10229 000080F2 81FE[BB2E0100]      <1> 		cmp esi, graphicstableend
 10230 000080F8 7305                <1> 		jae doneiconsel
 10231 000080FA E9ADFBFFFF          <1> 		jmp clicon2
 10232                              <1> 	doneiconsel:
 10233 000080FF 813D[2B7C0000]0100- <1> 		cmp dword [dragging], 1
 10234 00008107 0000                <1>
 10235 00008109 731A                <1> 		jae doneiconsel2
 10236 0000810B A2[8F810000]        <1> 		mov [windrag], al
 10237 00008110 813D[7B840000]0000- <1> 		cmp dword [codepointer], 0
 10238 00008118 0000                <1>
 10239 0000811A 7409                <1> 		je doneiconsel2
 10240 0000811C 8B1D[7B840000]      <1> 		mov ebx, [codepointer]
 10241 00008122 FFD3                <1> 		call ebx
 10242 00008124 C3                  <1> 		ret
 10243                              <1> 	doneiconsel2:
 10244 00008125 A0[265B0000]        <1> 		mov al, [LBUTTON]
 10245 0000812A A2[297C0000]        <1> 		mov [pLBUTTON], al
 10246 0000812F A0[275B0000]        <1> 		mov al, [RBUTTON]
 10247 00008134 A2[2A7C0000]        <1> 		mov [pRBUTTON], al
 10248 00008139 813D[2B7C0000]0100- <1> 		cmp dword [dragging], 1
 10249 00008141 0000                <1>
 10250 00008143 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10251 00008149 E807EAFFFF          <1> 		call switchmousepos2
 10252 0000814E 803D[8F810000]01    <1> 		cmp byte [windrag], 1
 10253 00008155 7305                <1> 		jae noclearcursorcl
 10254 00008157 E841E9FFFF          <1> 		call clearmousecursor
 10255                              <1> noclearcursorcl:
 10256 0000815C E8A8ECFFFF          <1> 		call reloadallgraphics
 10257                              <1> noreloadgraphicsclick:
 10258 00008161 30E4                <1> 		xor ah, ah
 10259 00008163 31C9                <1> 		xor ecx, ecx
 10260 00008165 31D2                <1> 		xor edx, edx
 10261 00008167 B001                <1> 		mov al, 1
 10262 00008169 668B15[155A0000]    <1> 		mov dx, [mousecursorposition]
 10263 00008170 668B0D[175A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10264 00008177 66BBE738            <1> 		mov bx, 0011100011100111b
 10265 0000817B C605[257C0000]01    <1> 		mov byte [showcursorfonton], 1
 10266 00008182 E84AF3FFFF          <1> 		call showfontvesa
 10267 00008187 C605[257C0000]00    <1> 		mov byte [showcursorfonton], 0
 10268 0000818E C3                  <1> 		ret
 10269 0000818F 00                  <1> windrag db 0
 10270 00008190 00000000            <1> lastdrag dw 0,0
 10271 00008194 00000000            <1> grpctblpos dw 0,0
 10272                              <1> 
 10273                              <1> 
 10274                              <1> 
 10275 00008198 00<rept>            <1> grphbuf times 16 db 0
 10276                              <1> 	graphicsadd:
 10277 000081A8 BF[BB2C0100]        <1> 		mov edi, graphicstable
 10278                              <1> 	shwgrph1:
 10279 000081AD 397702              <1> 		cmp dword [edi + 2], esi
 10280 000081B0 7414                <1> 		je showgraphicsreplace2
 10281 000081B2 81C710000000        <1> 		add edi, 16
 10282 000081B8 81FF[BB2E0100]      <1> 		cmp edi, graphicstableend
 10283 000081BE 0F8337020000        <1> 		jae near showgraphicsnew
 10284 000081C4 EBE7                <1> 		jmp shwgrph1
 10285                              <1> 	showgraphicsreplace2:
 10286 000081C6 8935[9A810000]      <1> 		mov [grphbuf + 2], esi
 10287 000081CC 668915[9E810000]    <1> 		mov [grphbuf + 6], dx
 10288 000081D3 66890D[A0810000]    <1> 		mov [grphbuf + 8], cx
 10289 000081DA 891D[A4810000]      <1> 		mov [grphbuf + 12], ebx
 10290 000081E0 30FF                <1> 		xor bh, bh
 10291 000081E2 88E3                <1> 		mov bl, ah
 10292 000081E4 30E4                <1> 		xor ah, ah
 10293 000081E6 66A3[A2810000]      <1> 		mov [grphbuf + 10], ax	
 10294 000081EC 66891D[98810000]    <1> 		mov [grphbuf], bx
 10295 000081F3 66A1[98810000]      <1> 		mov ax, [grphbuf]
 10296 000081F9 663D0100            <1> 		cmp ax, 1
 10297 000081FD 0F8419000000        <1> 		je near replaceicon
 10298 00008203 663D0200            <1> 		cmp ax, 2
 10299 00008207 0F8493000000        <1> 		je near replacestring
 10300 0000820D 663D0300            <1> 		cmp ax, 3
 10301 00008211 0F840F010000        <1> 		je near replacewindow
 10302 00008217 E9BC010000          <1> 		jmp showgraphicsreplace
 10303                              <1> 	replaceicon:
 10304 0000821C 893D[2F7C0000]      <1> 		mov [lastpos], edi
 10305 00008222 8935[337C0000]      <1> 		mov [lastpos + 4], esi
 10306 00008228 8B7702              <1> 		mov esi, [edi + 2]
 10307 0000822B 668B5F0C            <1> 		mov bx, [edi + 12]
 10308 0000822F 668B5706            <1> 		mov dx, [edi + 6]
 10309 00008233 668B4F08            <1> 		mov cx, [edi + 8]
 10310 00008237 668B06              <1> 		mov ax, [esi]
 10311 0000823A 66A3[377C0000]      <1> 		mov [colorbuf], ax
 10312 00008240 66A1[056E0000]      <1> 		mov ax, [background]
 10313 00008246 668906              <1> 		mov [esi], ax
 10314 00008249 8B5F0C              <1> 		mov ebx, [edi + 12]
 10315 0000824C 668B470A            <1> 		mov ax, [edi + 10]
 10316 00008250 2401                <1> 		and al, 1
 10317 00008252 A2[7F840000]        <1> 		mov [iconselected], al
 10318 00008257 668B470A            <1> 		mov ax, [edi + 10]
 10319 0000825B E86BE9FFFF          <1> 		call showicon2
 10320 00008260 8B3D[2F7C0000]      <1> 		mov edi, [lastpos]
 10321 00008266 8B7702              <1> 		mov esi, [edi + 2]
 10322 00008269 66A1[377C0000]      <1> 		mov ax, [colorbuf]
 10323 0000826F 668906              <1> 		mov [esi], ax
 10324 00008272 8B35[337C0000]      <1> 		mov esi, [lastpos + 4]
 10325 00008278 668B15[9E810000]    <1> 		mov dx, [grphbuf + 6]
 10326 0000827F 668B0D[A0810000]    <1> 		mov cx, [grphbuf + 8]
 10327 00008286 668B1D[98810000]    <1> 		mov bx, [grphbuf]
 10328 0000828D 66A1[A2810000]      <1> 		mov ax, [grphbuf + 10]
 10329 00008293 88DC                <1> 		mov ah, bl
 10330 00008295 8B1D[A4810000]      <1> 		mov ebx, [grphbuf + 12]
 10331 0000829B E938010000          <1> 		jmp showgraphicsreplace
 10332                              <1> 	replacestring:
 10333 000082A0 893D[2F7C0000]      <1> 		mov [lastpos], edi
 10334 000082A6 8935[337C0000]      <1> 		mov [lastpos + 4], esi
 10335 000082AC 8B5F0C              <1> 		mov ebx, [edi + 12]
 10336 000082AF 8B7702              <1> 		mov esi, [edi + 2]
 10337 000082B2 668B5706            <1> 		mov dx, [edi + 6]
 10338 000082B6 668B4F08            <1> 		mov cx, [edi + 8]
 10339 000082BA 66A1[C0740000]      <1> 		mov ax, [colorfont2]
 10340 000082C0 66A3[377C0000]      <1> 		mov [colorbuf], ax
 10341 000082C6 66A1[056E0000]      <1> 		mov ax, [background]
 10342 000082CC 66A3[C0740000]      <1> 		mov [colorfont2], ax		
 10343 000082D2 8B5F0C              <1> 		mov ebx, [edi + 12]
 10344 000082D5 668B470A            <1> 		mov ax, [edi + 10]
 10345 000082D9 2401                <1> 		and al, 1
 10346 000082DB A2[277C0000]        <1> 		mov [mouseselecton], al
 10347 000082E0 668B470A            <1> 		mov ax, [edi + 10]
 10348 000082E4 E871F1FFFF          <1> 		call showstring2
 10349 000082E9 66A1[377C0000]      <1> 		mov ax, [colorbuf]
 10350 000082EF 66A3[C0740000]      <1> 		mov [colorfont2], ax
 10351 000082F5 8B3D[2F7C0000]      <1> 		mov edi, [lastpos]
 10352 000082FB 8B7702              <1> 		mov esi, [edi + 2]
 10353 000082FE 668B15[9E810000]    <1> 		mov dx, [grphbuf + 6]
 10354 00008305 668B0D[A0810000]    <1> 		mov cx, [grphbuf + 8]
 10355 0000830C 668B1D[98810000]    <1> 		mov bx, [grphbuf]
 10356 00008313 66A1[A2810000]      <1> 		mov ax, [grphbuf + 10]
 10357 00008319 88DC                <1> 		mov ah, bl
 10358 0000831B 8B1D[A4810000]      <1> 		mov ebx, [grphbuf + 12]
 10359 00008321 E9B2000000          <1> 		jmp showgraphicsreplace
 10360                              <1> 	replacewindow:
 10361 00008326 893D[2F7C0000]      <1> 		mov [lastpos], edi
 10362 0000832C 8935[337C0000]      <1> 		mov [lastpos + 4], esi
 10363 00008332 8B7702              <1> 		mov esi, [edi + 2]
 10364 00008335 8B3D[BC760000]      <1> 		mov edi, [windowbufloc]
 10365 0000833B 31D2                <1> 		xor edx, edx
 10366 0000833D 668B15[1F580000]    <1> 		mov dx, [resolutionx2]
 10367 00008344 C1E204              <1> 		shl edx, 4
 10368 00008347 29D7                <1> 		sub edi, edx
 10369 00008349 31D2                <1> 		xor edx, edx
 10370 0000834B 668B16              <1> 		mov dx, [esi]
 10371 0000834E 660316              <1> 		add dx, [esi]
 10372 00008351 668B4E02            <1> 		mov cx, [esi + 2]
 10373 00008355 6681C11000          <1> 		add cx, 16
 10374 0000835A 66A1[056E0000]      <1> 		mov ax, [background]
 10375 00008360 803D[8F810000]01    <1> 		cmp byte [windrag], 1
 10376 00008367 7604                <1> 		jbe clearwindow
 10377 00008369 662B4E02            <1> 		sub cx, [esi + 2]
 10378                              <1> 	clearwindow:
 10379                              <1> 		%ifdef gui.background
 10380                              <1> 			cmp dword [backgroundimage], 0
 10381                              <1> 			je .noback
 10382                              <1> 			push esi
 10383                              <1> 			mov esi, [backgroundimage]
 10384                              <1> 			sub edi, [physbaseptr]
 10385                              <1> 			add esi, edi
 10386                              <1> 			add edi, [physbaseptr]
 10387                              <1> 			mov ax, [esi]
 10388                              <1> 			pop esi
 10389                              <1> 		.noback:
 10390                              <1> 		%endif
 10391 0000836D 668907              <1> 		mov [edi], ax
 10392 00008370 81C702000000        <1> 		add edi, 2
 10393 00008376 81EA02000000        <1> 		sub edx, 2
 10394 0000837C 81FA00000000        <1> 		cmp edx, 0
 10395 00008382 75E9                <1> 		jne clearwindow
 10396 00008384 6649                <1> 		dec cx
 10397 00008386 668B15[1F580000]    <1> 		mov dx, [resolutionx2]
 10398 0000838D 662B16              <1> 		sub dx, [esi]
 10399 00008390 662B16              <1> 		sub dx, [esi]
 10400 00008393 01D7                <1> 		add edi, edx
 10401 00008395 668B16              <1> 		mov dx, [esi]
 10402 00008398 660316              <1> 		add dx, [esi]
 10403 0000839B 6681F90000          <1> 		cmp cx, 0
 10404 000083A0 75CB                <1> 		jne clearwindow
 10405                              <1> 	endwindowclear:
 10406 000083A2 C605[8E230000]00    <1> 		mov byte [termcopyon], 0
 10407 000083A9 8B3D[2F7C0000]      <1> 		mov edi, [lastpos]
 10408 000083AF 8B35[9A810000]      <1> 		mov esi, [grphbuf + 2]
 10409 000083B5 668B15[9E810000]    <1> 		mov dx, [grphbuf + 6]
 10410 000083BC 668B0D[A0810000]    <1> 		mov cx, [grphbuf + 8]
 10411 000083C3 668B1D[98810000]    <1> 		mov bx, [grphbuf]
 10412 000083CA 66A1[A2810000]      <1> 		mov ax, [grphbuf + 10]
 10413 000083D0 88DC                <1> 		mov ah, bl
 10414 000083D2 8B1D[A4810000]      <1> 		mov ebx, [grphbuf + 12]
 10415                              <1> 	showgraphicsreplace:
 10416 000083D8 897702              <1> 		mov [edi + 2], esi
 10417 000083DB 66895706            <1> 		mov [edi + 6], dx
 10418 000083DF 66894F08            <1> 		mov [edi + 8], cx
 10419 000083E3 895F0C              <1> 		mov [edi + 12], ebx
 10420 000083E6 30FF                <1> 		xor bh, bh
 10421 000083E8 88E3                <1> 		mov bl, ah
 10422 000083EA 30E4                <1> 		xor ah, ah
 10423 000083EC 6689470A            <1> 		mov [edi + 10], ax
 10424 000083F0 66891F              <1> 		mov [edi], bx
 10425 000083F3 8B5F0C              <1> 		mov ebx, [edi + 12]
 10426 000083F6 668B470A            <1> 		mov ax, [edi + 10]
 10427 000083FA C3                  <1> 		ret
 10428                              <1> 	showgraphicsnew:
 10429 000083FB BF[BB2C0100]        <1> 		mov edi, graphicstable
 10430                              <1> 	shwgrph2:
 10431 00008400 66813F0000          <1> 		cmp word [edi], 0
 10432 00008405 74D1                <1> 		je showgraphicsreplace
 10433 00008407 81C710000000        <1> 		add edi, 16
 10434 0000840D 81FF[BB2E0100]      <1> 		cmp edi, graphicstableend
 10435 00008413 72EB                <1> 		jb shwgrph2
 10436                              <1> 	showgraphicsdone:
 10437 00008415 C3                  <1> 		ret
 10438                              <1> 	
 10439                              <1> putpixel: ;color in si, point is (dx,cx)
 10440                              <1> 		;destroys edi, ebx, eax
 10441 00008416 6650                <1> 	push ax
 10442 00008418 6653                <1> 	push bx
 10443 0000841A 31C0                <1> 	xor eax, eax
 10444 0000841C 31DB                <1> 	xor ebx, ebx
 10445 0000841E 31FF                <1> 	xor edi, edi
 10446 00008420 668B1D[33570000]    <1> 	mov bx, [resolutiony]
 10447 00008427 66A1[31570000]      <1> 	mov ax, [resolutionx]
 10448 0000842D 6639C2              <1> 	cmp dx, ax
 10449 00008430 7720                <1> 	ja .doneput
 10450 00008432 66D1E0              <1> 	shl ax, 1
 10451 00008435 6639D9              <1> 	cmp cx, bx
 10452 00008438 7718                <1> 	ja .doneput
 10453 0000843A 6689CB              <1> 	mov bx, cx
 10454 0000843D 52                  <1> 	push edx
 10455 0000843E F7E3                <1> 	mul ebx
 10456 00008440 5A                  <1> 	pop edx
 10457 00008441 6601D7              <1> 	add di, dx
 10458 00008444 6601D7              <1> 	add di, dx
 10459 00008447 01C7                <1> 	add edi, eax
 10460 00008449 033D[47570000]      <1> 	add edi, [physbaseptr]
 10461 0000844F 668937              <1> 	mov [edi], si
 10462                              <1> .doneput:
 10463 00008452 665B                <1> 	pop bx
 10464 00008454 6658                <1> 	pop ax
 10465 00008456 C3                  <1> 	ret
 10466                              <1> 	
 10467                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10468 00008457 31FF                <1> 	xor edi, edi
 10469 00008459 31C0                <1> 	xor eax, eax
 10470 0000845B 31DB                <1> 	xor ebx, ebx
 10471 0000845D 668B1D[1F580000]    <1> 	mov bx, [resolutionx2]
 10472 00008464 6689D7              <1> 	mov di, dx
 10473 00008467 6601D7              <1> 	add di, dx
 10474 0000846A 6689C8              <1> 	mov ax, cx
 10475 0000846D F7E3                <1> 	mul ebx
 10476 0000846F 01C7                <1> 	add edi, eax
 10477 00008471 033D[47570000]      <1> 	add edi, [physbaseptr]
 10478 00008477 C3                  <1> 	ret
 10479                              <1> 
 10480 00008478 00                  <1> 	mouseon db 0
 10481 00008479 0000                <1> 	icon dw 0	;pointer to icon
 10482 0000847B 00000000            <1> 	codepointer dd 0 ;pointer to code
 10483 0000847F 00                  <1> 	iconselected db 0
 10484                                  %endif
 10485                                  %ifdef network.included
 10486                                  	%include "source/network.asm"
 10487                              <1> network.init:
 10488                              <1> %ifdef rtl8139.included
 10489                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10490                              <1> %endif
 10491                              <1> %ifdef rtl8169.included
 10492                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10493                              <2> ;RTL8169 NIC DRIVER
 10494                              <2> rtl8169:
 10495 00008480 E805000000          <2> 	call .init
 10496 00008485 E986030000          <2> 	jmp .end
 10497                              <2> 
 10498                              <2> ;REGISTERS
 10499                              <2> .CMD equ 0x37
 10500                              <2> .TXPOLL equ 0x38
 10501                              <2> .TCR equ 0x40
 10502                              <2> .RCR equ 0x44
 10503                              <2> .IMR equ 0x3C
 10504                              <2> .ISR equ 0x3E
 10505                              <2> .LOCK equ 0x50
 10506                              <2> .CONFIG1 equ 0x52
 10507                              <2> .TDSAR equ 0x20
 10508                              <2> .RDSAR equ 0xE4
 10509                              <2> .MAXRX equ 0xDA
 10510                              <2> .MAXTX equ 0xEC
 10511                              <2> ;IMPORTANT VALUES
 10512                              <2> .OWN equ 0x80000000
 10513                              <2> .EOR equ 0x40000000
 10514                              <2> .POLLING equ 0x40
 10515                              <2> ;CODE
 10516                              <2> .init:	;should find card, get mac, and initialize card
 10517 0000848A 31C0                <2> 	xor eax, eax
 10518 0000848C A2[28620000]        <2> 	mov [pcifunction], al
 10519 00008491 A2[26620000]        <2> 	mov [pcibus], al
 10520 00008496 A2[27620000]        <2> 	mov [pcidevice], al
 10521 0000849B B002                <2> 	mov al, 0x02 ;type code
 10522 0000849D A2[B7620000]        <2> 	mov [pcitype], al
 10523 000084A2 B8EC106981          <2> 	mov eax, 0x816910EC
 10524 000084A7 A3[2B620000]        <2> 	mov [pcidevid], eax
 10525 000084AC BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10526 000084B1 891D[2F620000]      <2> 	mov [pcidevidmask], ebx
 10527 000084B7 E883DDFFFF          <2> 	call getpciport
 10528 000084BC 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10529 000084C2 7501                <2> 	jne .initnic
 10530 000084C4 C3                  <2> 	ret
 10531                              <2> .initnic:
 10532 000084C5 8915[60860000]      <2> 	mov [.basenicaddr], edx
 10533 000084CB 89D1                <2> 	mov ecx, edx
 10534 000084CD E8A4ACFFFF          <2> 	call showhex	;for debugging, please remove
 10535 000084D2 BE[5CEA0200]        <2> 	mov esi, rbuffstart
 10536 000084D7 B900200000          <2> 	mov ecx, 8192
 10537 000084DC 31C0                <2> 	xor eax, eax
 10538                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10539 000084DE 8806                <2> 	mov [esi], al
 10540 000084E0 46                  <2> 	inc esi
 10541 000084E1 6649                <2> 	dec cx
 10542 000084E3 6681F90000          <2> 	cmp cx, 0
 10543 000084E8 75F4                <2> 	jne .clearrbuff
 10544                              <2> .findmac:
 10545 000084EA 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10546 000084F0 BF[65860000]        <2> 	mov edi, .mac
 10547 000084F5 B906000000          <2> 	mov ecx, 6
 10548                              <2> .macputloop:
 10549 000084FA EC                  <2> 	in al, dx
 10550 000084FB 8807                <2> 	mov [edi], al
 10551 000084FD 47                  <2> 	inc edi
 10552 000084FE 42                  <2> 	inc edx
 10553 000084FF 49                  <2> 	dec ecx
 10554 00008500 75F8                <2> 	jnz .macputloop
 10555 00008502 B9[65860000]        <2> 	mov ecx, .mac
 10556 00008507 E8B9030000          <2> 	call showmac
 10557 0000850C E817000000          <2> 	call .resetnic
 10558 00008511 BE[6B860000]        <2> 	mov esi, .name
 10559 00008516 E80B98FFFF          <2> 	call print
 10560 0000851B BE[74860000]        <2> 	mov esi, .initmsg
 10561 00008520 E80198FFFF          <2> 	call print
 10562 00008525 31DB                <2> 	xor ebx, ebx
 10563 00008527 C3                  <2> 	ret
 10564                              <2> .resetnic:
 10565 00008528 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10566 0000852E 81C237000000        <2> 	add edx, .CMD
 10567 00008534 B010                <2> 	mov al, 0x10
 10568 00008536 EE                  <2> 	out dx, al	;Reset
 10569                              <2> .resetnicwait:
 10570 00008537 EC                  <2> 	in al, dx
 10571 00008538 A810                <2> 	test al, 0x10
 10572 0000853A 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10573 00008540 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10574 00008546 81C250000000        <2> 	add edx, .LOCK
 10575 0000854C B0C0                <2> 	mov al, 0xC0
 10576 0000854E EE                  <2> 	out dx, al	;unlock config registers
 10577 0000854F 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10578 00008555 81C244000000        <2> 	add edx, .RCR
 10579 0000855B B80FE70000          <2> 	mov eax, 0x0000E70F
 10580 00008560 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10581 00008561 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10582 00008567 81C240000000        <2> 	add edx, .TCR
 10583 0000856D B800070003          <2> 	mov eax, 0x03000700
 10584 00008572 EF                  <2> 	out dx, eax	;set up tcr
 10585 00008573 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10586 00008579 81C2DA000000        <2> 	add edx, .MAXRX
 10587 0000857F 66B8FF1F            <2> 	mov ax, 0x1FFF
 10588 00008583 66EF                <2> 	out dx, ax	;setup max rx size
 10589 00008585 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10590 0000858B 81C2EC000000        <2> 	add edx, .MAXTX
 10591 00008591 B03B                <2> 	mov al, 0x3B
 10592 00008593 EE                  <2> 	out dx, al	;setup max tx size
 10593 00008594 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10594 0000859A 81C220000000        <2> 	add edx, .TDSAR
 10595 000085A0 A1[41020000]        <2> 	mov eax, [basecache]
 10596 000085A5 C1E004              <2> 	shl eax, 4
 10597 000085A8 05[00870000]        <2> 	add eax, .txdesc
 10598 000085AD EF                  <2> 	out dx, eax
 10599 000085AE 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10600 000085B4 81C2E4000000        <2> 	add edx, .RDSAR
 10601 000085BA A1[41020000]        <2> 	mov eax, [basecache]
 10602 000085BF C1E004              <2> 	shl eax, 4
 10603 000085C2 05[00880000]        <2> 	add eax, .rxdesc
 10604 000085C7 EF                  <2> 	out dx, eax
 10605 000085C8 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10606 000085CE 81C237000000        <2> 	add edx, .CMD
 10607 000085D4 B00C                <2> 	mov al, 0x0C
 10608 000085D6 EE                  <2> 	out dx, al	;use transmit and receive
 10609 000085D7 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10610 000085DD 81C250000000        <2> 	add edx, .LOCK
 10611 000085E3 30C0                <2> 	xor al, al
 10612 000085E5 EE                  <2> 	out dx, al
 10613 000085E6 C605[64860000]01    <2> 	mov byte [.nicconfig], 1
 10614 000085ED C3                  <2> 	ret
 10615                              <2> 	
 10616                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10617 000085EE 803D[64860000]01    <2> 	cmp byte [.nicconfig], 1
 10618 000085F5 7412                <2> 	je .sendcachedata
 10619 000085F7 56                  <2> 	push esi
 10620 000085F8 57                  <2> 	push edi
 10621 000085F9 E88CFEFFFF          <2> 	call .init
 10622 000085FE 5F                  <2> 	pop edi
 10623 000085FF 5E                  <2> 	pop esi
 10624 00008600 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10625 00008606 75E6                <2> 	jne .sendpacket
 10626 00008608 C3                  <2> 	ret
 10627                              <2> .sendcachedata:
 10628 00008609 8B0D[65860000]      <2> 	mov ecx, [.mac]
 10629 0000860F 894F06              <2> 	mov [edi + 6], ecx
 10630 00008612 668B0D[69860000]    <2> 	mov cx, [.mac + 4]
 10631 00008619 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10632 0000861D A1[41020000]        <2> 	mov eax, [basecache]
 10633 00008622 C1E004              <2> 	shl eax, 4
 10634 00008625 01F8                <2> 	add eax, edi
 10635 00008627 A3[08870000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10636 0000862C 29FE                <2> 	sub esi, edi
 10637 0000862E 668935[00870000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10638 00008635 810D[00870000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10639 0000863D 0080                <2>
 10640 0000863F 8B15[60860000]      <2> 	mov edx, [.basenicaddr]
 10641 00008645 81C238000000        <2> 	add edx, .TXPOLL
 10642 0000864B B040                <2> 	mov al, .POLLING
 10643 0000864D EE                  <2> 	out dx, al	;set up TX Polling
 10644                              <2> .sendloop:
 10645 0000864E A1[00870000]        <2> 	mov eax, [.txdesc]
 10646 00008653 2500000080          <2> 	and eax, .OWN
 10647 00008658 3D00000080          <2> 	cmp eax, .OWN
 10648 0000865D 74EF                <2> 	je .sendloop
 10649 0000865F C3                  <2> 	ret
 10650                              <2> 	
 10651 00008660 00000000            <2> .basenicaddr dd 0
 10652 00008664 00                  <2> .nicconfig db 0
 10653 00008665 000000000000        <2> .mac db 0,0,0,0,0,0
 10654 0000866B 52544C383136392000  <2> .name db "RTL8169 ",0
 10655 00008674 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10656 0000867D 65640A00            <2>
 10657 00008681 90<rept>            <2> align 256, nop
 10658                              <2> .txdesc:
 10659 00008700 00000040            <2> 	dd .EOR	;command
 10660 00008704 00000000            <2> 	dd 0	;vlan
 10661 00008708 00000000            <2> 	dd 0	;low buf
 10662 0000870C 00000000            <2> 	dd 0	;high buf
 10663 00008710 90<rept>            <2> align 256, nop
 10664                              <2> .rxdesc:
 10665 00008800 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10666 00008804 00000000            <2> 	dd 0	;vlan
 10667 00008808 [5CEA0200]          <2> 	dd rbuffstart	;low buf
 10668 0000880C 00000000            <2> 	dd 0	;high buf
 10669                              <2> .end:
 10670                              <1> %endif
 10671                              <1> %ifdef ne2000.included
 10672                              <1> 	%include "source/drivers/network/ne2000.asm"
 10673                              <1> %endif
 10674                              <1> %ifdef i8254x.included
 10675                              <1> 	%include "source/drivers/network/i8254x.asm"
 10676                              <1> %endif
 10677 00008810 C3                  <1> 	ret
 10678                              <1> 
 10679                              <1> sendpacket: ;packet start in edi, end in esi
 10680                              <1> 	%ifdef rtl8139.included
 10681                              <1> 		push edi
 10682                              <1> 		push esi
 10683                              <1> 		call rtl8139.sendpacket
 10684                              <1> 		pop esi
 10685                              <1> 		pop edi
 10686                              <1> 	%endif
 10687                              <1> 	%ifdef rtl8169.included
 10688 00008811 57                  <1> 		push edi
 10689 00008812 56                  <1> 		push esi
 10690 00008813 E8D6FDFFFF          <1> 		call rtl8169.sendpacket
 10691 00008818 5E                  <1> 		pop esi
 10692 00008819 5F                  <1> 		pop edi
 10693                              <1> 	%endif
 10694                              <1> 	%ifdef ne2000.included
 10695                              <1> 		push edi
 10696                              <1> 		push esi
 10697                              <1> 		call ne2000.sendpacket
 10698                              <1> 		pop esi
 10699                              <1> 		pop edi
 10700                              <1> 	%endif
 10701                              <1> 	%ifdef i8254x.included
 10702                              <1> 		call i8254x.sendpacket
 10703                              <1> 	%endif
 10704 0000881A C3                  <1> 	ret
 10705                              <1> 
 10706                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10707 0000881B 31C0                <1> 	xor eax, eax
 10708 0000881D 31DB                <1> 	xor ebx, ebx
 10709 0000881F 31C9                <1> 	xor ecx, ecx
 10710                              <1> .lp:
 10711 00008821 8A07                <1> 	mov al, [edi]
 10712 00008823 8A6701              <1> 	mov ah, [edi + 1]
 10713 00008826 01C3                <1> 	add ebx, eax
 10714 00008828 81C702000000        <1> 	add edi, 2
 10715 0000882E 39F7                <1> 	cmp edi, esi
 10716 00008830 72EF                <1> 	jb .lp
 10717 00008832 66B9FFFF            <1> 	mov cx, 0xFFFF
 10718 00008836 6689D8              <1> 	mov ax, bx
 10719 00008839 C1EB10              <1> 	shr ebx, 16
 10720 0000883C 6601D8              <1> 	add ax, bx
 10721 0000883F 6629C1              <1> 	sub cx, ax
 10722 00008842 C3                  <1> 	ret
 10723                              <1> 	
 10724                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10725 00008843 31DB                <1> 	xor ebx, ebx
 10726 00008845 31C9                <1> 	xor ecx, ecx
 10727 00008847 31D2                <1> 	xor edx, edx
 10728                              <1> .mlp:
 10729 00008849 89F7                <1> 	mov edi, esi
 10730 0000884B 4F                  <1> 	dec edi
 10731                              <1> .lp:
 10732 0000884C 47                  <1> 	inc edi
 10733 0000884D 8A07                <1> 	mov al, [edi]
 10734 0000884F 3C20                <1> 	cmp al, " "
 10735 00008851 7408                <1> 	je .dnlp
 10736 00008853 3C00                <1> 	cmp al, 0
 10737 00008855 7404                <1> 	je .dnlp
 10738 00008857 3C2E                <1> 	cmp al, "."
 10739 00008859 75F1                <1> 	jne .lp
 10740                              <1> .dnlp:
 10741 0000885B 30C0                <1> 	xor al, al
 10742 0000885D 8807                <1> 	mov [edi], al
 10743 0000885F 53                  <1> 	push ebx
 10744 00008860 56                  <1> 	push esi
 10745 00008861 57                  <1> 	push edi
 10746 00008862 31FF                <1> 	xor edi, edi
 10747 00008864 E8B9AAFFFF          <1> 	call cnvrttxt
 10748 00008869 5E                  <1> 	pop esi
 10749 0000886A 5F                  <1> 	pop edi ;i intentionally switch them
 10750 0000886B 5B                  <1> 	pop ebx
 10751 0000886C 46                  <1> 	inc esi
 10752 0000886D BF[85880000]        <1> 	mov edi, ipstr
 10753 00008872 880C1F              <1> 	mov [edi + ebx], cl
 10754 00008875 43                  <1> 	inc ebx
 10755 00008876 81FB04000000        <1> 	cmp ebx, 4
 10756 0000887C 72CB                <1> 	jb .mlp
 10757 0000887E 8B0D[85880000]      <1> 	mov ecx, [ipstr]
 10758 00008884 C3                  <1> 	ret
 10759 00008885 00000000            <1> ipstr dd 0
 10760                              <1> showip: 	;put the ip address in ecx
 10761 00008889 89C8                <1> 	mov eax, ecx
 10762 0000888B 30DB                <1> 	xor bl, bl
 10763                              <1> .lp:
 10764 0000888D 3C00                <1> 	cmp al, 0
 10765 0000888F 750B                <1> 	jne .nozeroprint
 10766 00008891 B030                <1> 	mov al, "0"
 10767 00008893 50                  <1> 	push eax
 10768 00008894 E8F69AFFFF          <1> 	call prcharq
 10769 00008899 58                  <1> 	pop eax
 10770 0000889A 30C0                <1> 	xor al, al
 10771                              <1> .nozeroprint:
 10772 0000889C 31C9                <1> 	xor ecx, ecx
 10773 0000889E 88C1                <1> 	mov cl, al
 10774 000088A0 E89BA9FFFF          <1> 	call showdec
 10775 000088A5 C1E808              <1> 	shr eax, 8
 10776 000088A8 FEC3                <1> 	inc bl
 10777 000088AA 80FB04              <1> 	cmp bl, 4
 10778 000088AD 7312                <1> 	jae .done
 10779 000088AF 50                  <1> 	push eax
 10780 000088B0 6653                <1> 	push bx
 10781 000088B2 BE[C2880000]        <1> 	mov esi, .dot
 10782 000088B7 E86A94FFFF          <1> 	call print
 10783 000088BC 665B                <1> 	pop bx
 10784 000088BE 58                  <1> 	pop eax
 10785 000088BF EBCC                <1> 	jmp .lp
 10786                              <1> .done:
 10787 000088C1 C3                  <1> 	ret
 10788 000088C2 082E00              <1> .dot db 8,".",0
 10789                              <1> showmac:	;mac begins in [ecx]
 10790 000088C5 BE[15890000]        <1> 	mov esi, macprint
 10791 000088CA 89CF                <1> 	mov edi, ecx
 10792 000088CC 81C106000000        <1> 	add ecx, 6
 10793                              <1> showmacloop:
 10794 000088D2 8A07                <1> 	mov al, [edi]
 10795 000088D4 8A27                <1> 	mov ah, [edi]
 10796 000088D6 C0E804              <1> 	shr al, 4
 10797 000088D9 C0E404              <1> 	shl ah, 4
 10798 000088DC C0EC04              <1> 	shr ah, 4
 10799 000088DF 0430                <1> 	add al, 48
 10800 000088E1 3C39                <1> 	cmp al, "9"
 10801 000088E3 7606                <1> 	jbe .goodal
 10802 000088E5 2C30                <1> 	sub al, 48
 10803 000088E7 2C0A                <1> 	sub al, 0xA
 10804 000088E9 0441                <1> 	add al, "A"
 10805                              <1> .goodal:
 10806 000088EB 80C430              <1> 	add ah, 48
 10807 000088EE 80FC39              <1> 	cmp ah, "9"
 10808 000088F1 7609                <1> 	jbe .goodah
 10809 000088F3 80EC30              <1> 	sub ah, 48
 10810 000088F6 80EC0A              <1> 	sub ah, 0xA
 10811 000088F9 80C441              <1> 	add ah, "A"
 10812                              <1> .goodah:
 10813 000088FC 668906              <1> 	mov [esi], ax
 10814 000088FF 81C603000000        <1> 	add esi, 3
 10815 00008905 47                  <1> 	inc edi
 10816 00008906 39CF                <1> 	cmp edi, ecx
 10817 00008908 72C8                <1> 	jb showmacloop
 10818 0000890A BE[15890000]        <1> 	mov esi, macprint
 10819 0000890F E81294FFFF          <1> 	call print
 10820 00008914 C3                  <1> 	ret
 10821                              <1> 	
 10822 00008915 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10823 0000891E 30303A30303A303020- <1>
 10824 00008927 00                  <1>
 10825 00008928 00000000            <1> ethernetend dw 0,0
 10826 0000892C C0A80002            <1> sysip db 192,168,0,2
 10827 00008930 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10828                                  %endif
 10829                                      %include "source/data.asm"
 10830 00008936 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10831 0000893E 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10832 00008946 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10833 0000894F 6E640A00            <1>
 10834 00008953 757365726E616D653A- <1> 	userask db "username:",0
 10835 0000895C 00                  <1>
 10836 0000895D 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10837 00008966 00                  <1>
 10838 00008967 40                  <1> 	computer db "@"
 10839                              <1> %ifdef io.serial
 10840                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10841                              <1> %else
 10842 00008968 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10843 00008971 00                  <1>
 10844                              <1> %endif
 10845 00008972 5D242000            <1> 	endprompt db "]$ ",0
 10846 00008976 0D                  <1> 	crlf 	db  13
 10847 00008977 0A00                <1> 	line	db	10,0
 10848                              <1> 	userlst:
 10849 00008979 726F6F7400          <1> 			db "root",0
 10850 0000897E 617765736F6D65706F- <1> 			db "awesomepower",0
 10851 00008987 77657200            <1>
 10852 0000898B 7573657200          <1> 			db "user",0
 10853 00008990 70617373776F726400  <1> 			db "password",0
 10854 00008999 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10855 0000899B 00                  <1> 			db 0
 10856                              <1> 	userlstend:
 10857                              <1> 	
 10858                              <1> %ifdef io.serial
 10859                              <1> %else
 10860 0000899B <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 10861                              <1> fontend:
 10862                              <1> %endif
 10863                              <1> osend:	;this is the end of the operating system's space on disk
 10864                                  %ifdef disk.none
 10865                                  	diskfileindex:
 10866                                  	enddiskfileindex:
 10867                                  	align 512, db 0
 10868                                      %include "source/bss.asm"
 10869                                  %else
 10870                                      %include "build/fileindex.asm"
 10871                              <1> diskfileindex:
 10872 0000F9DC 617267746573742E65- <1> db "argtest.elf",0
 10873 0000F9E5 6C6600              <1>
 10874 0000F9E8 7E000000            <1> dd (f0-$$)/512
 10875 0000F9EC 06010000            <1> dd (f1-f0)/512
 10876 0000F9F0 6261636B67726F756E- <1> db "background.bmp",0
 10877 0000F9F9 642E626D7000        <1>
 10878 0000F9FF 84010000            <1> dd (f1-$$)/512
 10879 0000FA03 01140000            <1> dd (f2-f1)/512
 10880 0000FA07 626F6F742E736800    <1> db "boot.sh",0
 10881 0000FA0F 85150000            <1> dd (f2-$$)/512
 10882 0000FA13 01000000            <1> dd (f3-f2)/512
 10883 0000FA17 63686172746573742E- <1> db "chartest.elf",0
 10884 0000FA20 656C6600            <1>
 10885 0000FA24 86150000            <1> dd (f3-$$)/512
 10886 0000FA28 26010000            <1> dd (f4-f3)/512
 10887 0000FA2C 646F73746573742E63- <1> db "dostest.com",0
 10888 0000FA35 6F6D00              <1>
 10889 0000FA38 AC160000            <1> dd (f4-$$)/512
 10890 0000FA3C 01000000            <1> dd (f5-f4)/512
 10891 0000FA40 6578656300          <1> db "exec",0
 10892 0000FA45 AD160000            <1> dd (f5-$$)/512
 10893 0000FA49 01000000            <1> dd (f6-f5)/512
 10894 0000FA4D 66696E616C636F756E- <1> db "finalcount.sn",0
 10895 0000FA56 742E736E00          <1>
 10896 0000FA5B AE160000            <1> dd (f6-$$)/512
 10897 0000FA5F 01000000            <1> dd (f7-f6)/512
 10898 0000FA63 666F726B00          <1> db "fork",0
 10899 0000FA68 AF160000            <1> dd (f7-$$)/512
 10900 0000FA6C 01000000            <1> dd (f8-f7)/512
 10901 0000FA70 677261766974792E65- <1> db "gravity.elf",0
 10902 0000FA79 6C6600              <1>
 10903 0000FA7C B0160000            <1> dd (f8-$$)/512
 10904 0000FA80 E0000000            <1> dd (f9-f8)/512
 10905 0000FA84 6775697465737400    <1> db "guitest",0
 10906 0000FA8C 90170000            <1> dd (f9-$$)/512
 10907 0000FA90 03000000            <1> dd (f10-f9)/512
 10908 0000FA94 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10909 0000FA9D 642E656C6600        <1>
 10910 0000FAA3 93170000            <1> dd (f10-$$)/512
 10911 0000FAA7 D6010000            <1> dd (f11-f10)/512
 10912 0000FAAB 696E7400            <1> db "int",0
 10913 0000FAAF 69190000            <1> dd (f11-$$)/512
 10914 0000FAB3 01000000            <1> dd (f12-f11)/512
 10915 0000FAB7 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10916 0000FAC0 2E736E00            <1>
 10917 0000FAC4 6A190000            <1> dd (f12-$$)/512
 10918 0000FAC8 01000000            <1> dd (f13-f12)/512
 10919 0000FACC 6D6172696F2E736E00  <1> db "mario.sn",0
 10920 0000FAD5 6B190000            <1> dd (f13-$$)/512
 10921 0000FAD9 01000000            <1> dd (f14-f13)/512
 10922 0000FADD 6D6F6D656E742E7761- <1> db "moment.wav",0
 10923 0000FAE6 7600                <1>
 10924 0000FAE8 6C190000            <1> dd (f14-$$)/512
 10925 0000FAEC 34040000            <1> dd (f15-f14)/512
 10926 0000FAF0 70692E656C6600      <1> db "pi.elf",0
 10927 0000FAF7 A01D0000            <1> dd (f15-$$)/512
 10928 0000FAFB 1F010000            <1> dd (f16-f15)/512
 10929 0000FAFF 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10930 0000FB08 626D7000            <1>
 10931 0000FB0C BF1E0000            <1> dd (f16-$$)/512
 10932 0000FB10 B0020000            <1> dd (f17-f16)/512
 10933 0000FB14 736F6C6C65726F732E- <1> db "solleros.txt",0
 10934 0000FB1D 74787400            <1>
 10935 0000FB21 6F210000            <1> dd (f17-$$)/512
 10936 0000FB25 01000000            <1> dd (f18-f17)/512
 10937 0000FB29 736F6E676F74696D65- <1> db "songotime.sn",0
 10938 0000FB32 2E736E00            <1>
 10939 0000FB36 70210000            <1> dd (f18-$$)/512
 10940 0000FB3A 01000000            <1> dd (f19-f18)/512
 10941 0000FB3E 73736500            <1> db "sse",0
 10942 0000FB42 71210000            <1> dd (f19-$$)/512
 10943 0000FB46 02000000            <1> dd (f20-f19)/512
 10944 0000FB4A 737464696F74657374- <1> db "stdiotest.elf",0
 10945 0000FB53 2E656C6600          <1>
 10946 0000FB58 73210000            <1> dd (f20-$$)/512
 10947 0000FB5C 27010000            <1> dd (f21-f20)/512
 10948 0000FB60 74656C7900          <1> db "tely",0
 10949 0000FB65 9A220000            <1> dd (f21-$$)/512
 10950 0000FB69 01000000            <1> dd (f22-f21)/512
 10951 0000FB6D 74696D65746573742E- <1> db "timetest.elf",0
 10952 0000FB76 656C6600            <1>
 10953 0000FB7A 9B220000            <1> dd (f22-$$)/512
 10954 0000FB7E 04010000            <1> dd (f23-f22)/512
 10955 0000FB82 7475746F7269616C2E- <1> db "tutorial.sh",0
 10956 0000FB8B 736800              <1>
 10957 0000FB8E 9F230000            <1> dd (f23-$$)/512
 10958 0000FB92 03000000            <1> dd (f24-f23)/512
 10959 0000FB96 756E667300          <1> db "unfs",0
 10960 0000FB9B A2230000            <1> dd (f24-$$)/512
 10961 0000FB9F 02000000            <1> dd (f25-f24)/512
 10962 0000FBA3 7574662D382E747874- <1> db "utf-8.txt",0
 10963 0000FBAC 00                  <1>
 10964 0000FBAD A4230000            <1> dd (f25-$$)/512
 10965 0000FBB1 01000000            <1> dd (f26-f25)/512
 10966 0000FBB5 766963746F72792E77- <1> db "victory.wav",0
 10967 0000FBBE 617600              <1>
 10968 0000FBC1 A5230000            <1> dd (f26-$$)/512
 10969 0000FBC5 16000000            <1> dd (f27-f26)/512
 10970 0000FBC9 5F696D672E62696E00  <1> db "_img.bin",0
 10971 0000FBD2 BB230000            <1> dd (f27-$$)/512
 10972 0000FBD6 D7020000            <1> dd (f28-f27)/512
 10973                              <1> enddiskfileindex:
 10974                              <1> 
 10975                                      %include "source/bss.asm"
 10976 0000FBDA 90<rept>            <1> align 4, nop
 10977                              <1> bssstart: equ $
 10978                              <1> guion equ bssstart
 10979                              <1> DriveNumber equ guion + 1
 10980                              <1> lbaad equ DriveNumber + 1
 10981                              <1> memlistbuf equ lbaad + 4
 10982                              <1> memlistend equ memlistbuf + 576
 10983                              <1> bsscopy equ memlistend
 10984                              <1> initialstack equ bsscopy
 10985                              <1> stackend equ initialstack + 4000
 10986                              <1> sigtable equ stackend + 96
 10987                              <1> fileindex: equ sigtable + 4
 10988                              <1> fileindexend: equ fileindex + 1024
 10989                              <1> previousstack equ fileindexend
 10990                              <1> lastfolderloc equ previousstack + 4
 10991                              <1> currentfolderloc equ lastfolderloc + 4
 10992                              <1> currentfolder equ currentfolderloc + 4
 10993                              <1> currentfolderend equ currentfolder + 512
 10994                              <1> uid equ currentfolderend
 10995                              <1> ranboot equ uid + 4
 10996                              <1> IFON equ ranboot + 1
 10997                              <1> IFTRUE equ IFON + 1
 10998                              <1> BATCHPOS equ IFTRUE + 100
 10999                              <1> BATCHISON equ BATCHPOS + 4
 11000                              <1> LOOPON equ BATCHISON + 1
 11001                              <1> LOOPPOS	equ LOOPON + 1
 11002                              <1> variables: equ LOOPPOS + 4
 11003                              <1> varend: equ variables + 4096
 11004                              <1> buftxt2: equ varend
 11005                              <1> buftxt: equ buftxt2 + 1024
 11006                              <1> buftxtend: equ buftxt + 1024
 11007                              <1> buf2: equ buftxtend
 11008                              <1> numbuf: equ buf2 + 20
 11009                              <1> %ifdef io.serial
 11010                              <1> 	lastcommandpos equ numbuf + 1
 11011                              <1> %else
 11012                              <1> 	%ifdef gui.included
 11013                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11014                              <1> 		graphicstableend equ graphicstable + 200h
 11015                              <1> 		%ifdef gui.background
 11016                              <1> 			backgroundbuffer equ graphicstableend
 11017                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11018                              <1> 			mousecolorbuf equ backgroundbufferend
 11019                              <1> 		%else
 11020                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11021                              <1> 		%endif
 11022                              <1> 		mcolorend equ mousecolorbuf + 256
 11023                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11024                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11025                              <1> 		videobuf2 equ videobufend
 11026                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11027                              <1> 	%else
 11028                              <1> 		videobuf equ numbuf + 1
 11029                              <1> 		videobufend equ videobuf + 80*30*4
 11030                              <1> 		videobuf2 equ videobufend
 11031                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11032                              <1> 	%endif
 11033                              <1> 	lastcommandpos: equ videobuf2end
 11034                              <1> %endif
 11035                              <1> 	commandbufpos: equ lastcommandpos + 4
 11036                              <1> 	commandlistentries: equ commandbufpos + 4
 11037                              <1> 	commandsentered: equ commandlistentries + 4
 11038                              <1> 	commandbuf: equ commandsentered + 4
 11039                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11040                              <1> %ifdef network.included
 11041                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11042                              <1> 	rbuffend equ rbuffstart + 8212
 11043                              <1> %else
 11044                              <1> 	rbuffstart equ commandbufend
 11045                              <1> 	rbuffend equ commandbufend
 11046                              <1> %endif
 11047                              <1> %ifdef threads.included
 11048                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11049                              <1> 	threadlistend: equ threadlist + 1024*4
 11050                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11051                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11052                              <1> 	bssend equ stack1 + 1024*1024
 11053                              <1> %else
 11054                              <1> 	bssend equ rbuffend
 11055                              <1> %endif
 11056                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11057                                      %include "build/files.asm"
 11058 0000FBDC 00<rept>            <1> align 512,db 0
 11059                              <1> f0:
 11060 0000FBDC <incbin>            <1> incbin "included/argtest.elf"
 11061 000306F2 00<rept>            <1> align 512,db 0
 11062                              <1> f1:
 11063 000306F2 <incbin>            <1> incbin "included/background.bmp"
 11064 002B0846 00<rept>            <1> align 512,db 0
 11065                              <1> f2:
 11066 002B0846 <incbin>            <1> incbin "included/boot.sh"
 11067 002B0AFD 00<rept>            <1> align 512,db 0
 11068                              <1> f3:
 11069 002B0AFD <incbin>            <1> incbin "included/chartest.elf"
 11070 002D56DB 00<rept>            <1> align 512,db 0
 11071                              <1> f4:
 11072 002D56DB <incbin>            <1> incbin "included/dostest.com"
 11073 002D5931 00<rept>            <1> align 512,db 0
 11074                              <1> f5:
 11075 002D5931 <incbin>            <1> incbin "included/exec"
 11076 002D5AE1 00<rept>            <1> align 512,db 0
 11077                              <1> f6:
 11078 002D5AE1 <incbin>            <1> incbin "included/finalcount.sn"
 11079 002D5D02 00<rept>            <1> align 512,db 0
 11080                              <1> f7:
 11081 002D5D02 <incbin>            <1> incbin "included/fork"
 11082 002D5F58 00<rept>            <1> align 512,db 0
 11083                              <1> f8:
 11084 002D5F58 <incbin>            <1> incbin "included/gravity.elf"
 11085 002F1ED9 00<rept>            <1> align 512,db 0
 11086                              <1> f9:
 11087 002F1ED9 <incbin>            <1> incbin "included/guitest"
 11088 002F242B 00<rept>            <1> align 512,db 0
 11089                              <1> f10:
 11090 002F242B <incbin>            <1> incbin "included/helloworld.elf"
 11091 0032D1E3 00<rept>            <1> align 512,db 0
 11092                              <1> f11:
 11093 0032D1E3 <incbin>            <1> incbin "included/int"
 11094 0032D3AF 00<rept>            <1> align 512,db 0
 11095                              <1> f12:
 11096 0032D3AF <incbin>            <1> incbin "included/lostwoods.sn"
 11097 0032D456 00<rept>            <1> align 512,db 0
 11098                              <1> f13:
 11099 0032D456 <incbin>            <1> incbin "included/mario.sn"
 11100 0032D63A 00<rept>            <1> align 512,db 0
 11101                              <1> f14:
 11102 0032D63A <incbin>            <1> incbin "included/moment.wav"
 11103 003B3E1A 00<rept>            <1> align 512,db 0
 11104                              <1> f15:
 11105 003B3E1A <incbin>            <1> incbin "included/pi.elf"
 11106 003D7D31 00<rept>            <1> align 512,db 0
 11107                              <1> f16:
 11108 003D7D31 <incbin>            <1> incbin "included/solleros.bmp"
 11109 0042DDE6 00<rept>            <1> align 512,db 0
 11110                              <1> f17:
 11111 0042DDE6 <incbin>            <1> incbin "included/solleros.txt"
 11112 0042DF74 00<rept>            <1> align 512,db 0
 11113                              <1> f18:
 11114 0042DF74 <incbin>            <1> incbin "included/songotime.sn"
 11115 0042E04A 00<rept>            <1> align 512,db 0
 11116                              <1> f19:
 11117 0042E04A <incbin>            <1> incbin "included/sse"
 11118 0042E4A8 00<rept>            <1> align 512,db 0
 11119                              <1> f20:
 11120 0042E4A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11121 00453243 00<rept>            <1> align 512,db 0
 11122                              <1> f21:
 11123 00453243 <incbin>            <1> incbin "included/tely"
 11124 004535BA 00<rept>            <1> align 512,db 0
 11125                              <1> f22:
 11126 004535BA <incbin>            <1> incbin "included/timetest.elf"
 11127 00473C3D 00<rept>            <1> align 512,db 0
 11128                              <1> f23:
 11129 00473C3D <incbin>            <1> incbin "included/tutorial.sh"
 11130 00474352 00<rept>            <1> align 512,db 0
 11131                              <1> f24:
 11132 00474352 <incbin>            <1> incbin "included/unfs"
 11133                              <1> align 512,db 0
 11134                              <1> f25:
 11135 00474352 <incbin>            <1> incbin "included/utf-8.txt"
 11136 0047492F 00<rept>            <1> align 512,db 0
 11137                              <1> f26:
 11138 0047492F <incbin>            <1> incbin "included/victory.wav"
 11139 00477548 00<rept>            <1> align 512,db 0
 11140                              <1> f27:
 11141 00477548 <incbin>            <1> incbin "included/_img.bin"
 11142                              <1> align 512,db 0
 11143                              <1> f28:
 11144                                  %endif
