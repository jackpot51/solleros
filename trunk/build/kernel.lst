     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> %define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> header:
   126 00000000 EB12                <1> 	jmp short boot
   127                              <1> signature:
   128 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   129 0000000B 00                  <1>
   130 0000000C 12010000            <1> dd 274	;version number
   131                              <1> signatureend:
   132 00000010 00660300                	dd bsscopy - header ;size of kernel data on disk
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1> boot:
   136 00000014 8CC8                <1> 	mov ax, cs
   137 00000016 8ED8                <1> 	mov ds, ax
   138 00000018 8EC0                <1> 	mov es, ax
   139 0000001A 8ED0                <1> 	mov ss, ax
   140 0000001C 0F31                <1> 	rdtsc
   141 0000001E 66A3[D561]          <1> 	mov [initialtsc], eax
   142 00000022 668916[D961]        <1> 	mov [initialtsc + 4], edx
   143 00000027 66A3[DD61]          <1> 	mov [lasttsc], eax
   144 0000002B 668916[E161]        <1> 	mov [lasttsc + 4], edx
   145 00000030 880E[D061]          <1> 	mov [DriveNumber], cl
   146 00000034 66891E[D161]        <1> 	mov [lbaad], ebx
   147                              <1> %ifdef io.serial
   148                              <1> 	call getmemorysize
   149                              <1> 	mov si, serialmsg
   150                              <1> 	call printrm
   151                              <1> 	jmp pmode
   152                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   153                              <1> %else
   154 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   155 0000003C E95300              <1> 	jmp pmode
   156                              <1> %endif
   157                              <1> 	
   158                              <1> vgaset:
   159 0000003F B81200              <1> 	mov ax, 12h
   160 00000042 31DB                <1> 	xor bx, bx
   161 00000044 CD10                <1> 	int 10h
   162 00000046 C606[CF61]00        <1> 	mov byte [guion], 0
   163 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   164 0000004E C3                  <1> 	ret
   165                              <1> 
   166                              <1> getmemorysize:
   167 0000004F BF[E561]            <1> 	mov di, memlistbuf
   168 00000052 6631DB              <1> 	xor ebx, ebx
   169                              <1> getmemsizeloop:
   170 00000055 66B820E80000        <1> 	mov eax, 0xE820
   171 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   172 00000061 66B918000000        <1> 	mov ecx, 24
   173 00000067 CD15                <1> 	int 0x15
   174 00000069 81C71800            <1> 	add di, 24
   175 0000006D 81FF[2564]          <1> 	cmp di, memlistend
   176 00000071 7305                <1> 	jae nomoregetmemsize
   177 00000073 6685DB              <1> 	test ebx, ebx
   178 00000076 75DD                <1> 	jnz getmemsizeloop
   179                              <1> nomoregetmemsize:
   180 00000078 81EF[E561]          <1> 	sub di, memlistbuf
   181 0000007C 893E[2564]          <1> 	mov [memlistend], di
   182 00000080 C3                  <1> 	ret
   183                              <1> 	
   184                              <1> printrm:			; 'si' comes in with string address
   185 00000081 BB0700              <1>     mov bx,07		; write to display
   186 00000084 B40E                <1>     mov ah,0Eh		; screen function
   187 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   188 00000088 84C0                <1>     test al,al		; look for terminator 
   189 0000008A 7405                <1>     jz .done	; zero byte at end of string
   190 0000008C CD10                <1>     int 10h		; write character to screen.    
   191 0000008E 46                  <1> 	inc si	     	; move to next character
   192 0000008F EBF5                <1>     jmp .lp		; loop
   193 00000091 C3                  <1> .done: ret
   194                                      %include "source/pmode.asm"
   195                              <1> [BITS 16]
   196                              <1> 
   197                              <1> pmode:
   198 00000092 6631C0              <1> 	xor eax, eax
   199 00000095 6631DB              <1> 	xor ebx, ebx
   200 00000098 6631C9              <1> 	xor ecx, ecx
   201 0000009B 6631D2              <1> 	xor edx, edx
   202 0000009E 6631F6              <1> 	xor esi, esi
   203 000000A1 6631FF              <1> 	xor edi, edi
   204 000000A4 BA9200              <1> 	mov dx, 0x92
   205 000000A7 EC                  <1> 	in al, dx	;A20
   206 000000A8 0C02                <1> 	or al, 2
   207 000000AA EE                  <1> 	out dx, al
   208 000000AB 8CCB                <1> 	mov bx,cs		; EBX=segment
   209 000000AD 66C1E304            <1> 	shl ebx,4		;	<< 4
   210 000000B1 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   211 000000B4 A3[7E03]            <1> 	mov [gdt2 + 2],ax
   212 000000B7 A3[8603]            <1> 	mov [gdt3 + 2],ax
   213 000000BA 66C1E810            <1> 	shr eax,16
   214 000000BE A2[8003]            <1> 	mov [gdt2 + 4],al
   215 000000C1 A2[8803]            <1> 	mov [gdt3 + 4],al
   216 000000C4 8826[8303]          <1> 	mov [gdt2 + 7],ah
   217 000000C8 8826[8B03]          <1> 	mov [gdt3 + 7],ah
   218                              <1> 
   219 000000CC 66B8[00660300]      <1> 	mov eax, initialstack
   220 000000D2 660306[2602]        <1> 	add eax, [newcodecache]
   221 000000D7 A3[7603]            <1> 	mov [gdts + 2],ax
   222 000000DA 66C1E810            <1> 	shr eax, 16
   223 000000DE A2[7803]            <1> 	mov [gdts + 4],al
   224 000000E1 8826[7B03]          <1> 	mov [gdts + 7], ah
   225                              <1> 	
   226 000000E5 66A1[2602]          <1> 	mov eax, [newcodecache]
   227 000000E9 A3[8E03]            <1> 	mov [gdt4 + 2],ax
   228 000000EC A3[9603]            <1> 	mov [gdt5 + 2],ax
   229 000000EF A3[9E03]            <1> 	mov [gdtv8086 + 2], ax
   230 000000F2 A3[A603]            <1> 	mov [gdtv80862 + 2], ax
   231 000000F5 66C1E810            <1> 	shr eax,16
   232 000000F9 A2[9003]            <1> 	mov [gdt4 + 4],al
   233 000000FC A2[9803]            <1> 	mov [gdt5 + 4],al
   234 000000FF A2[A003]            <1> 	mov [gdtv8086 + 4],al
   235 00000102 A2[A803]            <1> 	mov [gdtv80862 + 4],al
   236 00000105 8826[9303]          <1> 	mov [gdt4 + 7],ah
   237 00000109 8826[9B03]          <1> 	mov [gdt5 + 7],ah
   238 0000010D 8826[A303]          <1> 	mov [gdtv8086 + 7],ah
   239 00000111 8826[AB03]          <1> 	mov [gdtv80862 + 7],ah
   240                              <1> 	
   241 00000115 66B800004000        <1> 	mov eax, dosprogloc
   242 0000011B 660306[2602]        <1> 	add eax, [newcodecache]
   243 00000120 A3[AE03]            <1> 	mov [gdtdos + 2],ax
   244 00000123 A3[B603]            <1> 	mov [gdtdos2 + 2],ax
   245 00000126 66C1E810            <1> 	shr eax,16
   246 0000012A A2[B003]            <1> 	mov [gdtdos + 4],al
   247 0000012D A2[B803]            <1> 	mov [gdtdos2 + 4],al
   248 00000130 8826[B303]          <1> 	mov [gdtdos + 7],ah
   249 00000134 8826[BB03]          <1> 	mov [gdtdos2 + 7],ah
   250                              <1> 	
   251                              <1> ; fix up gdt and idt
   252 00000138 67668D83[64030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   253 00000140 66A3[5A03]          <1> 	mov [gdtr + 2],eax
   254 00000144 67668D83[BC030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   255 0000014C 66A3[6003]          <1> 	mov [idtr + 2],eax
   256 00000150 FA                  <1> 	cli
   257 00000151 0F0116[5803]        <1> 	lgdt [gdtr]
   258 00000156 0F011E[5E03]        <1> 	lidt [idtr]
   259 0000015B 6631DB              <1> 	xor ebx, ebx
   260 0000015E 8CDB                <1> 	mov bx, ds
   261 00000160 66891E[2202]        <1> 	mov [basecache], ebx
   262 00000165 0F20C0              <1> 	mov eax,cr0
   263 00000168 0C01                <1> 	or al,1
   264 0000016A 0F22C0              <1> 	mov cr0,eax
   265 0000016D EA[7201]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   266                              <1> [BITS 32]
   267                              <1> do_pm:
   268 00000172 31C0                <1> 	xor eax, eax
   269 00000174 66B82000            <1> 	mov ax, SYS_DATA_SEL
   270 00000178 8ED8                <1> 	mov ds, ax
   271 0000017A 8EC0                <1> 	mov es, ax
   272 0000017C 8EE0                <1> 	mov fs, ax
   273 0000017E 66B83000            <1> 	mov ax, NEW_DATA_SEL
   274 00000182 8EE8                <1> 	mov gs, ax
   275                              <1> 	
   276                              <1> copykernel:
   277 00000184 648B06              <1> 	mov eax, [fs:esi]
   278 00000187 658906              <1> 	mov [gs:esi], eax
   279 0000018A 81C604000000        <1> 	add esi, 4
   280 00000190 81FE[00660300]      <1> 	cmp esi, bsscopy
   281 00000196 72EC                <1> 	jb copykernel
   282 00000198 EA[9F010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   283                              <1> 	
   284                              <1> done_copy:
   285 0000019F 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   286 000001A3 8ED8                <1> 	mov ds, ax
   287 000001A5 8EC0                <1> 	mov es, ax
   288 000001A7 8EE0                <1> 	mov fs, ax
   289                              <1> 	;mov ax, STACK_SEL
   290 000001A9 8ED0                <1> 	mov ss, ax
   291 000001AB BC[00860300]        <1> 	mov esp, stackend
   292 000001B0 66B82000            <1> 	mov ax, SYS_DATA_SEL
   293 000001B4 8EE8                <1> 	mov gs, ax
   294                              <1> 	
   295 000001B6 E849550000          <1> 	call initialize	;initialize drivers
   296                              <1> 	
   297 000001BB A1[26020000]        <1> 	mov eax, [newcodecache]
   298 000001C0 C1E804              <1> 	shr eax, 4
   299 000001C3 A3[22020000]        <1> 	mov [basecache], eax
   300                              <1> 	
   301 000001C8 BE[C1331400]        <1> 	mov esi, bssend
   302 000001CD 31C0                <1> 	xor eax, eax
   303                              <1> clearkernelbuffers:
   304 000001CF 8906                <1> 	mov [esi], eax
   305 000001D1 81EE04000000        <1> 	sub esi, 4
   306 000001D7 81FE[00660300]      <1> 	cmp esi, bsscopy
   307 000001DD 77F0                <1> 	ja clearkernelbuffers
   308 000001DF FB                  <1> 	sti
   309                              <1> 
   310                              <1> getmemoryspace:
   311 000001E0 BE[E5610000]        <1> 	mov esi, memlistbuf
   312 000001E5 31FF                <1> 	xor edi, edi
   313 000001E7 668B3D[25640000]    <1> 	mov di, [memlistend]
   314 000001EE 01F7                <1> 	add edi, esi
   315 000001F0 31C0                <1> 	xor eax, eax
   316                              <1> memoryspaceaddition:
   317 000001F2 39FE                <1> 	cmp esi, edi
   318 000001F4 7322                <1> 	jae finishedmemspacecalc
   319 000001F6 81C608000000        <1> 	add esi, 8
   320 000001FC 8B0E                <1> 	mov ecx, [esi]
   321 000001FE 81C608000000        <1> 	add esi, 8
   322 00000204 8B1E                <1> 	mov ebx, [esi]
   323 00000206 81C608000000        <1> 	add esi, 8
   324 0000020C 81FB01000000        <1> 	cmp ebx, 1
   325 00000212 75DE                <1> 	jne memoryspaceaddition
   326 00000214 01C8                <1> 	add eax, ecx
   327 00000216 EBDA                <1> 	jmp memoryspaceaddition
   328                              <1> finishedmemspacecalc:
   329 00000218 A3[37020000]        <1> 	mov [memoryspace], eax
   330                              <1> %ifdef gui.included
   331                              <1> 	cmp byte [guion], 0
   332                              <1> 	je normalstartup
   333                              <1> 	mov ebx, [basecache]
   334                              <1> 	shl ebx, 4
   335                              <1> 	mov edi, [physbaseptr]
   336                              <1> 	sub edi, ebx
   337                              <1> 	mov [physbaseptr], edi
   338                              <1> 	jmp guiboot
   339                              <1> %endif
   340                              <1> normalstartup:
   341 0000021D E945260000          <1> 	jmp os
   342                              <1> 	
   343 00000222 00000000            <1> basecache dd 0
   344 00000226 00001000            <1> newcodecache dd 0x100000
   345                              <1> 
   346 0000022A 00                  <1> testingcpuspeed db 0
   347 0000022B 00000000            <1> cpuspeedperint dd 0
   348 0000022F 0000000000000000    <1> cpuclocksperint dd 0,0
   349 00000237 00000000            <1> memoryspace dd 0
   350 0000023B 7D0A                <1> pitdiv dw 2685
   351 0000023D 2E562200            <1> timeinterval dd 2250286
   352                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   353                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   354                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   355                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   356                              <1> ;div=55483 is 46500044.000006ns
   357                              <1> ;use one of those values for the minimum error
   358                              <1> 
   359 00000241 00                  <1> ticks db 0
   360 00000242 00000000            <1> timeseconds dd 0
   361 00000246 00000000            <1> timenanoseconds dd 0
   362 0000024A 00                  <1> soundon db 0
   363 0000024B 0000                <1> soundrepititions dw 0
   364 0000024D 00000000            <1> soundpos dd 0
   365 00000251 00000000            <1> soundendpos dd 0
   366                              <1> 
   367                              <1> cpuspeedend:
   368 00000255 C605[2A020000]00    <1> 	mov byte [testingcpuspeed], 0
   369 0000025C A3[2B020000]        <1> 	mov [cpuspeedperint], eax
   370 00000261 B8[1B4C0000]        <1> 	mov eax, cpuspeedloopend
   371 00000266 890424              <1> 	mov [esp], eax
   372 00000269 E9DA000000          <1> 	jmp handled
   373                              <1> 
   374                              <1> pitinterrupt: ;this controls threading
   375 0000026E 803D[2A020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   376 00000275 74DE                <1> 	je cpuspeedend
   377                              <1> 
   378 00000277 E8A6000000          <1> 	call timekeeper ;this updates the internal time
   379                              <1> 	
   380 0000027C 803D[4A020000]01    <1> 	cmp byte [soundon], 1
   381 00000283 0F840F4C0000        <1> 	je near PCSpeakerRAW
   382                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   383                              <1> %ifdef threads.included
   384 00000289 803D[065D0000]01    <1> 	cmp byte [threadson], 1
   385 00000290 0F84105A0000        <1> 	je near threadswitch
   386                              <1> %endif
   387                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   388 00000296 803D[065D0000]00    <1> 	cmp byte [threadson], 0
   389 0000029D 0F84A5000000        <1> 	je near handled
   390                              <1> %ifdef io.serial
   391                              <1> 	jmp handled
   392                              <1> %else
   393 000002A3 FE05[41020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   394 000002A9 0F8599000000        <1> 	jnz near handled
   395                              <1> 	
   396 000002AF 60                  <1> 	pusha
   397 000002B0 E464                <1> 	in al, 64h
   398 000002B2 A820                <1> 	test al, 20h
   399 000002B4 0F858D000000        <1> 	jnz near handled2
   400 000002BA E460                <1> 	in al, 60h
   401 000002BC 3C01                <1> 	cmp al, 1		;escape
   402 000002BE 7405                <1> 	je userint
   403 000002C0 E982000000          <1> 	jmp handled2
   404                              <1> ;	cmp al, 0x57
   405                              <1> ;	jne near handled2
   406                              <1> ;pauseint:	;F11 pauses
   407                              <1> ;	in al, 64h
   408                              <1> ;	test al, 20h
   409                              <1> ;	jnz pauseint
   410                              <1> ;	in al, 60h
   411                              <1> ;	cmp al, 0xD7
   412                              <1> ;	jne pauseint
   413                              <1> ;	mov esi, pausemsg
   414                              <1> ;	call print
   415                              <1> ;pauselp:
   416                              <1> ;	in al, 64h
   417                              <1> ;	test al, 20h
   418                              <1> ;	jnz pauselp
   419                              <1> ;	in al, 60h
   420                              <1> ;	cmp al, 0x57
   421                              <1> ;	je near handled2
   422                              <1> ;	jmp pauselp
   423                              <1> ;pausemsg db "Paused",10,0
   424                              <1> userint:
   425 000002C5 31C0                <1> 	xor eax, eax
   426 000002C7 3905[04860300]      <1> 	cmp [sigtable], eax
   427 000002CD 7410                <1> 	je .nosighook
   428 000002CF 8B1D[04860300]      <1> 	mov ebx, [sigtable]
   429 000002D5 895C2420            <1> 	mov [esp + 32], ebx
   430                              <1> ;	mov [sigtable], eax
   431 000002D9 B020                <1> 	mov al, 0x20
   432 000002DB E620                <1> 	out 0x20, al
   433 000002DD 61                  <1> 	popa
   434 000002DE CF                  <1> 	iret
   435                              <1> .nosighook:
   436                              <1> 		;UNMASK ALL INTS
   437 000002DF E621                <1> 	out 0x21, al
   438 000002E1 E6A1                <1> 	out 0xA1, al
   439 000002E3 B020                <1> 	mov al, 0x20
   440 000002E5 E6A0                <1> 	out 0xA0, al
   441 000002E7 E620                <1> 	out 0x20, al
   442                              <1> 		;RESET PIT DIVISOR
   443 000002E9 66A1[3B020000]      <1> 	mov ax, [pitdiv]
   444 000002EF E640                <1> 	out 0x40, al
   445 000002F1 66C1C008            <1> 	rol ax, 8
   446 000002F5 E640                <1> 	out 0x40, al
   447                              <1> 		;RESET PIC
   448 000002F7 B020                <1> 	mov al, 0x20
   449 000002F9 E620                <1> 	out 0x20, al
   450 000002FB 61                  <1> 	popa
   451 000002FC 5D                  <1> 	pop ebp
   452 000002FD 5D                  <1> 	pop ebp
   453 000002FE 9D                  <1> 	popf
   454 000002FF BC[00860300]        <1> 	mov esp, stackend ;reset stack
   455 00000304 E9B2260000          <1> 	jmp returnfromexp
   456                              <1> %endif
   457 00000309 0A                  <1> rtcrate db 10
   458                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   459                              <1> %ifdef io.serial
   460                              <1> %else
   461                              <1> %ifdef terminal.vsync
   462                              <1> 	cmp byte [termcopyneeded], 0
   463                              <1> 	je .nocopy
   464                              <1> 	call newtermcopy
   465                              <1> .nocopy
   466                              <1> 	push eax
   467                              <1> 	mov al, 0xC
   468                              <1> 	out 0x70, al
   469                              <1> 	in al, 0x71
   470                              <1> 	pop eax
   471                              <1> %endif
   472                              <1> %endif
   473 0000030A E940000000          <1> 	jmp handledboth
   474                              <1> %ifdef rtl8139.included
   475                              <1> rtl8139.irq:
   476                              <1> 	push edx
   477                              <1> 	push eax
   478                              <1> 	mov edx, [rtl8139.basenicaddr]
   479                              <1> 	add edx, rtl8139.ISR
   480                              <1> 	xor eax, eax
   481                              <1> 	in ax, dx
   482                              <1> 	out dx, ax
   483                              <1> 	pop eax
   484                              <1> 	pop edx
   485                              <1> 	jmp handledboth
   486                              <1> %endif
   487                              <1> %ifdef sound.included
   488                              <1> sblaster.irq:
   489 0000030F 60                  <1> 	pusha
   490 00000310 803D[88510000]01    <1> 	cmp byte [SoundBlaster], 1
   491 00000317 0F84654C0000        <1> 	je near sblaster.cont
   492 0000031D E925000000          <1> 	jmp handled2
   493                              <1> %endif
   494                              <1> 	
   495                              <1> timekeeper:
   496 00000322 50                  <1> 	push eax
   497 00000323 A1[46020000]        <1> 	mov eax, [timenanoseconds]
   498 00000328 0305[3D020000]      <1> 	add eax, [timeinterval]
   499 0000032E 3D00CA9A3B          <1> 	cmp eax, 1000000000
   500 00000333 720B                <1> 	jb nonanosecondrollover
   501 00000335 FF05[42020000]      <1> 	inc dword [timeseconds]
   502 0000033B 2D00CA9A3B          <1> 	sub eax, 1000000000
   503                              <1> 	%ifdef gui.time
   504                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   505                              <1> 		cmp byte [guion], 1
   506                              <1> 		jne nonanosecondrollover
   507                              <1> 		cmp dword [dragging], 0
   508                              <1> 		jne nonanosecondrollover
   509                              <1> 		pusha
   510                              <1> 		call guitime
   511                              <1> 		popa
   512                              <1> 	%endif
   513                              <1> nonanosecondrollover:
   514 00000340 A3[46020000]        <1> 	mov [timenanoseconds], eax
   515 00000345 58                  <1> 	pop eax
   516 00000346 C3                  <1> 	ret
   517                              <1> 	
   518                              <1> handled2:
   519 00000347 61                  <1> 	popa
   520                              <1> handled:
   521 00000348 50                  <1> 	push eax
   522 00000349 B020                <1> 	mov al, 0x20
   523 0000034B E620                <1> 	out 0x20, al
   524 0000034D 58                  <1> 	pop eax
   525 0000034E CF                  <1> 	iret
   526                              <1> handledboth:
   527 0000034F 50                  <1> 	push eax
   528 00000350 B020                <1> 	mov al, 0x20
   529 00000352 E6A0                <1> 	out 0xA0, al
   530 00000354 E620                <1> 	out 0x20, al
   531 00000356 58                  <1> 	pop eax
   532 00000357 CF                  <1> 	iret
   533                              <1> 	
   534                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   535 00000358 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   536 0000035A 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   537                              <1> 
   538 0000035E FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   539 00000360 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   540                              <1> 
   541                              <1> 
   542 00000364 0000                <1> gdt:	dw 0			; limit 15:0
   543 00000366 0000                <1> 	dw 0			; base 15:0
   544 00000368 00                  <1> 	db 0			; base 23:16
   545 00000369 00                  <1> 	db 0			; type
   546 0000036A 00                  <1> 	db 0			; limit 19:16, flags
   547 0000036B 00                  <1> 	db 0			; base 31:24
   548                              <1> ; linear data segment descriptor
   549                              <1> LINEAR_SEL	equ	$-gdt
   550 0000036C FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   551 0000036E 0000                <1> 	dw 0			; base for this one is always 0
   552 00000370 00                  <1> 	db 0
   553 00000371 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   554 00000372 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   555 00000373 00                  <1> 	db 0
   556                              <1> STACK_SEL	equ $-gdt
   557 00000374 0200                <1> gdts:	dw 2;(stackend)/4096
   558 00000376 0000                <1> 	dw 0
   559 00000378 00                  <1> 	db 0
   560 00000379 92                  <1> 	db 0x92
   561 0000037A CF                  <1> 	db 0xCF
   562 0000037B 00                  <1> 	db 0
   563                              <1> ; code segment descriptor
   564                              <1> SYS_CODE_SEL	equ	$-gdt
   565 0000037C FFFF                <1> gdt2:	dw 0xFFFF
   566 0000037E 0000                <1> 	dw 0			; (base gets set above)
   567 00000380 00                  <1> 	db 0
   568 00000381 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   569 00000382 CF                  <1> 	db 0xCF
   570 00000383 00                  <1> 	db 0
   571                              <1> ; data segment descriptor
   572                              <1> SYS_DATA_SEL	equ	$-gdt
   573 00000384 FFFF                <1> gdt3:	dw 0xFFFF
   574 00000386 0000                <1> 	dw 0			; (base gets set above)
   575 00000388 00                  <1> 	db 0
   576 00000389 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   577 0000038A CF                  <1> 	db 0xCF
   578 0000038B 00                  <1> 	db 0
   579                              <1> NEW_CODE_SEL	equ	$-gdt
   580 0000038C FFFF                <1> gdt4:	dw 0xFFFF
   581 0000038E 0000                <1> 	dw 0			; (base gets set above)
   582 00000390 00                  <1> 	db 0
   583 00000391 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   584 00000392 CF                  <1> 	db 0xCF
   585 00000393 00                  <1> 	db 0
   586                              <1> ; data segment descriptor
   587                              <1> NEW_DATA_SEL	equ	$-gdt
   588 00000394 FFFF                <1> gdt5:	dw 0xFFFF
   589 00000396 0000                <1> 	dw 0			; (base gets set above)
   590 00000398 00                  <1> 	db 0
   591 00000399 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   592 0000039A CF                  <1> 	db 0xCF
   593 0000039B 00                  <1> 	db 0
   594                              <1> V8086_CODE_SEL	equ $-gdt
   595 0000039C FFFF                <1> gdtv8086: dw 0xFFFF
   596 0000039E 0000                <1> 	dw 0
   597 000003A0 00                  <1> 	db 0
   598 000003A1 9A                  <1> 	db 0x9A
   599 000003A2 8F                  <1> 	db 0x8F
   600 000003A3 00                  <1> 	db 0
   601                              <1> V8086_DATA_SEL	equ $-gdt
   602 000003A4 FFFF                <1> gdtv80862: dw 0xFFFF
   603 000003A6 0000                <1> 	dw 0
   604 000003A8 00                  <1> 	db 0
   605 000003A9 92                  <1> 	db 0x92
   606 000003AA 8F                  <1> 	db 0x8F
   607 000003AB 00                  <1> 	db 0
   608                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   609 000003AC 0001                <1> gdtdos:	dw 256	;give it 1 MB
   610 000003AE 0000                <1> 	dw 0
   611 000003B0 00                  <1> 	db 0
   612 000003B1 9A                  <1> 	db 0x9A
   613 000003B2 8F                  <1> 	db 0x8F ;16 bit
   614 000003B3 00                  <1> 	db 0
   615                              <1> DOS_DATA_SEL 	equ $-gdt
   616 000003B4 0001                <1> gdtdos2:	dw 256
   617 000003B6 0000                <1> 	dw 0
   618 000003B8 00                  <1> 	db 0
   619 000003B9 92                  <1> 	db 0x92
   620 000003BA 8F                  <1> 	db 0x8F ;16 bit
   621 000003BB 00                  <1> 	db 0
   622                              <1> gdt_end:
   623                              <1> 
   624                              <1> ;	interrupt descriptor table (IDT)
   625                              <1> ; 32 reserved interrupts:
   626                              <1> idt:	
   627                              <1> %assign i 0
   628                              <1> %rep    8
   629                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   630                              <1> %assign i i+1
   631                              <1> %endrep
   632 000003BC [D40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <2> %assign i i+1
   634 000003C4 [E00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   635                              <2> %assign i i+1
   636 000003CC [EC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003D4 [F80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003DC [040D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003E4 [100D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003EC [1C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003F4 [280D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003FC [340D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   649                              <1> %assign i 9
   650                              <1> %rep    23
   651                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   652                              <1> %assign i i+1
   653                              <1> %endrep
   654 00000404 [400D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   655                              <2> %assign i i+1
   656 0000040C [4C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   657                              <2> %assign i i+1
   658 00000414 [580D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000041C [640D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000424 [700D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000042C [7C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000434 [880D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000043C [940D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000444 [A00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000044C [AC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000454 [B80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000045C [C40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000464 [D00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000046C [DC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000474 [E80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000047C [F40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000484 [000E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000048C [0C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000494 [180E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000049C [240E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 000004A4 [300E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 000004AC [3C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004B4 [480E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004BC [2927]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   701 000004C4 [2D27]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   702                              <1> %assign i 0x22
   703                              <1> %rep 14
   704                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   705                              <1> %assign i +1
   706                              <1> %endrep
   707 000004CC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i +1
   709 000004D4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   710                              <2> %assign i +1
   711 000004DC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004E4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004EC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004F4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004FC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000504 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 0000050C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000514 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000051C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000524 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000052C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000534 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735                              <1> ;INT 30h for os use and 3rd party use:
   736 0000053C [9C1A]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   737                              <1> %assign i 0x31
   738                              <1> %rep 15
   739                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <1> %assign i +1
   741                              <1> %endrep
   742 00000544 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   743                              <2> %assign i +1
   744 0000054C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   745                              <2> %assign i +1
   746 00000554 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000055C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000564 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000056C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000574 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000057C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000584 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000058C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000594 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000059C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 000005A4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005AC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005B4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772                              <1> ;and here we are at 0x40
   773                              <1> ;here are all the irq's
   774 000005BC [6E02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   775 000005C4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   776 000005CC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   777 000005D4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   778 000005DC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   779                              <1> 	%ifdef sound.included
   780 000005E4 [0F03]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   781                              <1> 	%else
   782                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   783                              <1> 	%endif
   784 000005EC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   785 000005F4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   786 000005FC [0A03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   787 00000604 [4F03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   788 0000060C [4F03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   789                              <1> 	%ifdef rtl8139.included
   790                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   791                              <1> 	%else
   792 00000614 [4F03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   793                              <1> 	%endif
   794 0000061C [4F03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   795 00000624 [4F03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   796 0000062C [4F03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   797 00000634 [4F03]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   798                              <1> ;This brings me up to 0x50
   799                              <1> %assign i 0x50
   800                              <1> %rep 176
   801                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   803                              <1> %assign i +1
   804                              <1> %endrep
   805 0000063C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <2> 
   807                              <2> %assign i +1
   808 00000644 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 0000064C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 00000654 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 0000065C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 00000664 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 0000066C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 00000674 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 0000067C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 00000684 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 0000068C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 00000694 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 0000069C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 000006A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 000006AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 000006B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 000006BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 000006C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 000006CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 000006D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 000006DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 000006E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 000006EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 000006F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 000006FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 00000704 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 0000070C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 00000714 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 0000071C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 00000724 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 0000072C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 00000734 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 0000073C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 00000744 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 0000074C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 00000754 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 0000075C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 00000764 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 0000076C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 00000774 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 0000077C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 00000784 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 0000078C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 00000794 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 0000079C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 000007A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 000007AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 000007B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 000007BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 000007C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 000007CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 000007D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 000007DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 000007E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 000007EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 000007F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 000007FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 00000804 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 0000080C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 00000814 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 0000081C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 00000824 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 0000082C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 00000834 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 0000083C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 00000844 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 0000084C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 00000854 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 0000085C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 00000864 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 0000086C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 00000874 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 0000087C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 00000884 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 0000088C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 00000894 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 0000089C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 000008A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 000008AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 000008B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 000008BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 000008C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 000008CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 000008D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 000008DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 000008E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 000008EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 000008F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 000008FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 00000904 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 0000090C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 00000914 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 0000091C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 00000924 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 0000092C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 00000934 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 0000093C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000944 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 0000094C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000954 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 0000095C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000964 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 0000096C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000974 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 0000097C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000984 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 0000098C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000994 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 0000099C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 000009A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 000009AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 000009B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 000009BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 000009C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 000009CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 000009D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 000009DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 000009E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 000009EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 000009F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 000009FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 00000A04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 00000A0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000A14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000A1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000A24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000A2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000A34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000A3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000A44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000A4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000A54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000A5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000A64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000A6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000A74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000A7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000A84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000A8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000A94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000A9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000AA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000AAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000AB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000ABC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000AC4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000ACC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000AD4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000ADC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000AE4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000AEC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000AF4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000AFC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000B04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000B0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000B14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000B1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000B24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279 00000B2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1280                              <2> 
  1281                              <2> %assign i +1
  1282 00000B34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1283                              <2> 
  1284                              <2> %assign i +1
  1285 00000B3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1286                              <2> 
  1287                              <2> %assign i +1
  1288 00000B44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1289                              <2> 
  1290                              <2> %assign i +1
  1291 00000B4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1292                              <2> 
  1293                              <2> %assign i +1
  1294 00000B54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1295                              <2> 
  1296                              <2> %assign i +1
  1297 00000B5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1298                              <2> 
  1299                              <2> %assign i +1
  1300 00000B64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1301                              <2> 
  1302                              <2> %assign i +1
  1303 00000B6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1304                              <2> 
  1305                              <2> %assign i +1
  1306 00000B74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1307                              <2> 
  1308                              <2> %assign i +1
  1309 00000B7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1310                              <2> 
  1311                              <2> %assign i +1
  1312 00000B84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1313                              <2> 
  1314                              <2> %assign i +1
  1315 00000B8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1316                              <2> 
  1317                              <2> %assign i +1
  1318 00000B94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1319                              <2> 
  1320                              <2> %assign i +1
  1321 00000B9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1322                              <2> 
  1323                              <2> %assign i +1
  1324 00000BA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1325                              <2> 
  1326                              <2> %assign i +1
  1327 00000BAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1328                              <2> 
  1329                              <2> %assign i +1
  1330 00000BB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1331                              <2> 
  1332                              <2> %assign i +1
  1333                              <1> idt_end:
  1334                                  	%include "source/realmode.asm"
  1335                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1336                              <1> 
  1337 00000BBC FA                  <1> 	cli
  1338 00000BBD A3[CA0C0000]        <1> 	mov [realmodeeax], eax
  1339 00000BC2 891D[C60C0000]      <1> 	mov [realmodeebx], ebx
  1340 00000BC8 8925[B80C0000]      <1> 	mov [pmodeesp], esp
  1341                              <1> 
  1342 00000BCE BB[C20C0000]        <1> 	mov ebx, cr0old
  1343                              <1> rmcopytofirstmbyte:
  1344 00000BD3 8B03                <1> 	mov eax, [ebx]
  1345 00000BD5 658903              <1> 	mov [gs:ebx], eax
  1346 00000BD8 81C304000000        <1> 	add ebx, 4
  1347 00000BDE 81FB[CE0C0000]      <1> 	cmp ebx, realmodeptr
  1348 00000BE4 76ED                <1> 	jbe rmcopytofirstmbyte
  1349                              <1> 
  1350 00000BE6 EA[ED0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1351                              <1> 
  1352                              <1> [BITS 16]
  1353                              <1> protected16bit:
  1354 00000BED B84000              <1> 	mov ax, V8086_DATA_SEL
  1355 00000BF0 8ED8                <1> 	mov ds, ax
  1356 00000BF2 8EC0                <1> 	mov es, ax
  1357 00000BF4 8EE0                <1> 	mov fs, ax
  1358 00000BF6 8EE8                <1> 	mov gs, ax
  1359 00000BF8 8ED0                <1> 	mov ss, ax
  1360 00000BFA 66BC[00860300]      <1> 	mov esp, stackend
  1361 00000C00 0F20C0              <1> 	mov eax, cr0
  1362 00000C03 66A3[C20C]          <1> 	mov [cr0old], eax
  1363 00000C07 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1364 00000C0D 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1365 00000C10 EA[150C]0010        <1> 	jmp 0x1000:inrealmode
  1366                              <1> 
  1367                              <1> inrealmode:
  1368 00000C15 8CC8                <1> 	mov ax, cs
  1369 00000C17 8ED8                <1> 	mov ds, ax
  1370 00000C19 8EC0                <1> 	mov es, ax
  1371 00000C1B 8EE0                <1> 	mov fs, ax
  1372 00000C1D 8EE8                <1> 	mov gs, ax
  1373 00000C1F 8ED0                <1> 	mov ss, ax
  1374 00000C21 BC[0086]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1375                              <1> 	
  1376 00000C24 B011                <1> 	mov al, 0x11
  1377 00000C26 E620                <1> 	out 0x20, al
  1378 00000C28 E6A0                <1> 	out 0xA0, al
  1379 00000C2A B008                <1> 	mov al, 0x8		;interrupt for master
  1380 00000C2C E621                <1> 	out 0x21, al
  1381 00000C2E B070                <1> 	mov al, 0x70	;interrupt for slave
  1382 00000C30 E6A1                <1> 	out 0xA1, al
  1383 00000C32 B004                <1> 	mov al, 4
  1384 00000C34 E621                <1> 	out 0x21, al
  1385 00000C36 B002                <1> 	mov al, 2
  1386 00000C38 E6A1                <1> 	out 0xA1, al
  1387 00000C3A B001                <1> 	mov al, 0x1
  1388 00000C3C E621                <1> 	out 0x21, al
  1389 00000C3E B001                <1> 	mov al, 0x1
  1390 00000C40 E6A1                <1> 	out 0xA1, al
  1391                              <1> 	
  1392 00000C42 0F011E[BC0C]        <1> 	lidt [idt_real]
  1393 00000C47 FB                  <1> 	sti
  1394                              <1> 
  1395 00000C48 66A1[CA0C]          <1> 	mov eax, [realmodeeax]
  1396 00000C4C 668B1E[C60C]        <1> 	mov ebx, [realmodeebx]
  1397                              <1> 
  1398 00000C51 FF16[CE0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1399                              <1> 
  1400 00000C55 66A3[CA0C]          <1> 	mov [realmodeeax], eax
  1401 00000C59 66891E[C60C]        <1> 	mov [realmodeebx], ebx
  1402                              <1> 
  1403 00000C5E FA                  <1> 	cli
  1404 00000C5F 0F0116[5803]        <1> 	lgdt [gdtr]
  1405 00000C64 0F011E[5E03]        <1> 	lidt [idtr]
  1406 00000C69 0F20C0              <1> 	mov eax, cr0
  1407 00000C6C 0C01                <1> 	or al, 1
  1408 00000C6E 0F22C0              <1> 	mov cr0,eax
  1409 00000C71 EA[760C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1410                              <1> 
  1411                              <1> [BITS 32]
  1412                              <1> returntopmode:
  1413 00000C76 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1414 00000C7A 8ED8                <1> 	mov ds, ax
  1415 00000C7C 8EC0                <1> 	mov es, ax
  1416 00000C7E 8EE0                <1> 	mov fs, ax
  1417 00000C80 8ED0                <1> 	mov ss, ax
  1418 00000C82 8B25[B80C0000]      <1> 	mov esp, [pmodeesp]
  1419 00000C88 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1420 00000C8C 8EE8                <1> 	mov gs, ax
  1421                              <1> 
  1422 00000C8E BB[C20C0000]        <1> 	mov ebx, cr0old
  1423                              <1> rmcopyfromfirstmbyte:
  1424 00000C93 658B03              <1> 	mov eax, [gs:ebx]
  1425 00000C96 8903                <1> 	mov [ebx], eax
  1426 00000C98 81C304000000        <1> 	add ebx, 4
  1427 00000C9E 81FB[CE0C0000]      <1> 	cmp ebx, realmodeptr
  1428 00000CA4 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1429                              <1> 
  1430 00000CA6 E8974A0000          <1> 	call initialize.pic ;reset irq's and masks
  1431 00000CAB FB                  <1> 	sti
  1432 00000CAC A1[CA0C0000]        <1> 	mov eax, [realmodeeax]
  1433 00000CB1 8B1D[C60C0000]      <1> 	mov ebx, [realmodeebx]
  1434 00000CB7 C3                  <1> 	ret
  1435                              <1> 	
  1436 00000CB8 00000000            <1> pmodeesp dd 0
  1437                              <1> idt_real:
  1438 00000CBC FF03                <1> 	dw 0x3FF
  1439 00000CBE 00000000            <1> 	dd 0
  1440 00000CC2 00000000            <1> cr0old dd 0
  1441 00000CC6 00000000            <1> realmodeebx dd 0
  1442 00000CCA 00000000            <1> realmodeeax dd 0
  1443 00000CCE 0000                <1> realmodeptr dw 0
  1444 00000CD0 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1445                                  [BITS 32]
  1446                                      %include "source/exception.asm"
  1447                              <1> %ifdef exceptions.included
  1448                              <1> unhand:	
  1449                              <1> 	%assign i 0
  1450                              <1> 	%rep 32
  1451                              <1> 	mov byte [intprob], i
  1452                              <1> 	jmp unhand2
  1453                              <1> 	%assign i i+1
  1454                              <1> 	%endrep
  1455 00000CD4 C605[55100000]00    <2>  mov byte [intprob], i
  1456 00000CDB E974010000          <2>  jmp unhand2
  1457                              <2>  %assign i i+1
  1458 00000CE0 C605[55100000]01    <2>  mov byte [intprob], i
  1459 00000CE7 E968010000          <2>  jmp unhand2
  1460                              <2>  %assign i i+1
  1461 00000CEC C605[55100000]02    <2>  mov byte [intprob], i
  1462 00000CF3 E95C010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000CF8 C605[55100000]03    <2>  mov byte [intprob], i
  1465 00000CFF E950010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000D04 C605[55100000]04    <2>  mov byte [intprob], i
  1468 00000D0B E944010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D10 C605[55100000]05    <2>  mov byte [intprob], i
  1471 00000D17 E938010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D1C C605[55100000]06    <2>  mov byte [intprob], i
  1474 00000D23 E92C010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D28 C605[55100000]07    <2>  mov byte [intprob], i
  1477 00000D2F E920010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D34 C605[55100000]08    <2>  mov byte [intprob], i
  1480 00000D3B E914010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D40 C605[55100000]09    <2>  mov byte [intprob], i
  1483 00000D47 E908010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D4C C605[55100000]0A    <2>  mov byte [intprob], i
  1486 00000D53 E9FC000000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D58 C605[55100000]0B    <2>  mov byte [intprob], i
  1489 00000D5F E9F0000000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D64 C605[55100000]0C    <2>  mov byte [intprob], i
  1492 00000D6B E9E4000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D70 C605[55100000]0D    <2>  mov byte [intprob], i
  1495 00000D77 E9D8000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D7C C605[55100000]0E    <2>  mov byte [intprob], i
  1498 00000D83 E9CC000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000D88 C605[55100000]0F    <2>  mov byte [intprob], i
  1501 00000D8F E9C0000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000D94 C605[55100000]10    <2>  mov byte [intprob], i
  1504 00000D9B E9B4000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000DA0 C605[55100000]11    <2>  mov byte [intprob], i
  1507 00000DA7 E9A8000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000DAC C605[55100000]12    <2>  mov byte [intprob], i
  1510 00000DB3 E99C000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DB8 C605[55100000]13    <2>  mov byte [intprob], i
  1513 00000DBF E990000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DC4 C605[55100000]14    <2>  mov byte [intprob], i
  1516 00000DCB E984000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DD0 C605[55100000]15    <2>  mov byte [intprob], i
  1519 00000DD7 E978000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DDC C605[55100000]16    <2>  mov byte [intprob], i
  1522 00000DE3 E96C000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000DE8 C605[55100000]17    <2>  mov byte [intprob], i
  1525 00000DEF E960000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000DF4 C605[55100000]18    <2>  mov byte [intprob], i
  1528 00000DFB E954000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000E00 C605[55100000]19    <2>  mov byte [intprob], i
  1531 00000E07 E948000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000E0C C605[55100000]1A    <2>  mov byte [intprob], i
  1534 00000E13 E93C000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E18 C605[55100000]1B    <2>  mov byte [intprob], i
  1537 00000E1F E930000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E24 C605[55100000]1C    <2>  mov byte [intprob], i
  1540 00000E2B E924000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E30 C605[55100000]1D    <2>  mov byte [intprob], i
  1543 00000E37 E918000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E3C C605[55100000]1E    <2>  mov byte [intprob], i
  1546 00000E43 E90C000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E48 C605[55100000]1F    <2>  mov byte [intprob], i
  1549 00000E4F E900000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551                              <1> unhand2:
  1552 00000E54 FA                  <1> 	cli
  1553 00000E55 1E                  <1> 	push ds
  1554 00000E56 06                  <1> 	push es
  1555 00000E57 0FA0                <1> 	push fs
  1556 00000E59 0FA8                <1> 	push gs
  1557 00000E5B 16                  <1> 	push ss
  1558 00000E5C 60                  <1> 	pushad
  1559                              <1> %ifdef gui.included
  1560                              <1> 	cmp byte [guion], 0
  1561                              <1> 	je near noguiunhandstuff
  1562                              <1> 	mov word [locunhandy], 8
  1563                              <1> 	mov word [locunhandx], 8
  1564                              <1> 	mov bx, [background]
  1565                              <1> 	mov [backgroundcache], bx
  1566                              <1> 	mov byte [mousedisabled],1
  1567                              <1> 	mov bx, 1111100000000000b
  1568                              <1> 	mov [background], bx
  1569                              <1> noguiunhandstuff:
  1570                              <1> %endif
  1571 00000E5D 89E6                <1> 	mov esi, esp
  1572 00000E5F 8935[43100000]      <1> 	mov [espfirst], esi
  1573 00000E65 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1574 00000E6B 8935[3F100000]      <1> 	mov [esploc], esi
  1575 00000E71 BE[64100000]        <1> 	mov esi, unhandmsg
  1576 00000E76 8935[47100000]      <1> 	mov [esiloc], esi
  1577 00000E7C 31C9                <1> 	xor ecx, ecx
  1578 00000E7E 8A0D[55100000]      <1> 	mov cl, [intprob]
  1579 00000E84 BB[33140000]        <1> 	mov ebx, errortypes
  1580 00000E89 C1E102              <1> 	shl ecx, 2
  1581 00000E8C 01CB                <1> 	add ebx, ecx
  1582 00000E8E 81FB[73140000]      <1> 	cmp ebx, errortypesend
  1583 00000E94 7205                <1> 	jb gooderrortype
  1584 00000E96 BB[73140000]        <1> 	mov ebx, errortypesend
  1585                              <1> gooderrortype:
  1586 00000E9B 8B33                <1> 	mov esi, [ebx]
  1587                              <1> %ifdef gui.included
  1588                              <1> 	cmp byte [guion], 0
  1589                              <1> 	je near errortext
  1590                              <1> 	mov cx, [locunhandy]
  1591                              <1> 	mov dx, [locunhandx]
  1592                              <1> 	mov ax, 1
  1593                              <1> 	xor bx, bx
  1594                              <1> 	call showstring2
  1595                              <1> 	mov [locunhandy], cx
  1596                              <1> 	mov [locunhandx], dx
  1597                              <1> 	jmp errortextdone
  1598                              <1> %endif
  1599                              <1> errortext:
  1600 00000E9D E8550D0000          <1> 	call print		;get the error message and print it
  1601                              <1> errortextdone:
  1602 00000EA2 31C9                <1> 	xor ecx, ecx
  1603 00000EA4 8A0D[55100000]      <1> 	mov cl, [intprob]
  1604 00000EAA E85F010000          <1> 	call expdump
  1605                              <1> dumpstack:
  1606 00000EAF 8B35[3F100000]      <1> 	mov esi, [esploc]
  1607 00000EB5 39E6                <1> 	cmp esi, esp
  1608 00000EB7 7216                <1> 	jb donedump
  1609 00000EB9 368B0E              <1> 	mov ecx, [ss:esi]
  1610 00000EBC 81EE04000000        <1> 	sub esi, 4
  1611 00000EC2 8935[3F100000]      <1> 	mov [esploc], esi
  1612 00000EC8 E841010000          <1> 	call expdump
  1613 00000ECD EBE0                <1> 	jmp dumpstack
  1614                              <1> donedump:
  1615 00000ECF 0F20C1              <1> 	mov ecx, cr0
  1616 00000ED2 E837010000          <1> 	call expdump
  1617 00000ED7 0F20D1              <1> 	mov ecx, cr2
  1618 00000EDA E82F010000          <1> 	call expdump
  1619 00000EDF 0F20D9              <1> 	mov ecx, cr3
  1620 00000EE2 E827010000          <1> 	call expdump
  1621 00000EE7 0F20E1              <1> 	mov ecx, cr4
  1622 00000EEA E81F010000          <1> 	call expdump
  1623 00000EEF 0F00C9              <1> 	str ecx
  1624 00000EF2 E817010000          <1> 	call expdump
  1625 00000EF7 0F010D[5E100000]    <1> 	sidt [igdtcache]
  1626 00000EFE 8B0D[60100000]      <1> 	mov ecx, [igdtcache + 2]
  1627 00000F04 E805010000          <1> 	call expdump
  1628 00000F09 0F0105[5E100000]    <1> 	sgdt [igdtcache]
  1629 00000F10 8B0D[60100000]      <1> 	mov ecx, [igdtcache + 2]
  1630 00000F16 E8F3000000          <1> 	call expdump
  1631 00000F1B 0F00C1              <1> 	sldt ecx
  1632 00000F1E E8EB000000          <1> 	call expdump
  1633 00000F23 8B35[3F100000]      <1> 	mov esi, [esploc]
  1634 00000F29 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1635 00000F2E 81C710000000        <1> 	add edi, 16
  1636 00000F34 893D[5A100000]      <1> 	mov [codelocend], edi
  1637 00000F3A 81EF20000000        <1> 	sub edi, 32
  1638                              <1> dumpcodeloop:
  1639 00000F40 893D[56100000]      <1> 	mov [codeloc], edi
  1640 00000F46 8B0F                <1> 	mov ecx, [edi]
  1641 00000F48 E8C1000000          <1> 	call expdump
  1642 00000F4D 8B3D[56100000]      <1> 	mov edi, [codeloc]
  1643 00000F53 81C704000000        <1> 	add edi, 4
  1644 00000F59 3B3D[5A100000]      <1> 	cmp edi, [codelocend]
  1645 00000F5F 72DF                <1> 	jb dumpcodeloop
  1646 00000F61 BE[9F0F0000]        <1> 	mov esi, backtoosmsg
  1647                              <1> %ifdef gui.included
  1648                              <1> 	cmp byte [guion], 0
  1649                              <1> 	je backtomsg
  1650                              <1> guibacktomsg:
  1651                              <1> 	mov dx, [locunhandx]
  1652                              <1> 	mov cx, [locunhandy]
  1653                              <1> 	mov ax, 1
  1654                              <1> 	xor bx, bx
  1655                              <1> 	call showstring2
  1656                              <1> 	jmp backtomsgdone
  1657                              <1> backtomsg:
  1658                              <1> %endif
  1659 00000F66 E88C0C0000          <1> 	call print
  1660                              <1> backtomsgdone:
  1661 00000F6B 30C0                <1> 	xor al, al
  1662 00000F6D E87F120000          <1> 	call rdcharint
  1663 00000F72 803D[55100000]03    <1> 	cmp byte [intprob], 3
  1664 00000F79 7511                <1> 	jne nodebugint
  1665                              <1> %ifdef gui.included
  1666                              <1> 	cmp byte [guion], 0
  1667                              <1> 	je nodebuggui
  1668                              <1> 	mov bx, [backgroundcache]
  1669                              <1> 	mov [background], bx
  1670                              <1> 	xor bx, bx
  1671                              <1> 	mov byte [mousedisabled], 0
  1672                              <1> 	call guiclear
  1673                              <1> 	call reloadallgraphics
  1674                              <1> 	call termcopy
  1675                              <1> nodebuggui:
  1676                              <1> %endif
  1677 00000F7B 8B35[43100000]      <1> 	mov esi, [espfirst]
  1678 00000F81 89F4                <1> 	mov esp, esi
  1679 00000F83 61                  <1> 	popad
  1680 00000F84 17                  <1> 	pop ss
  1681 00000F85 0FA9                <1> 	pop gs
  1682 00000F87 0FA1                <1> 	pop fs
  1683 00000F89 07                  <1> 	pop es
  1684 00000F8A 1F                  <1> 	pop ds
  1685 00000F8B CF                  <1> 	iret
  1686                              <1> nodebugint:
  1687 00000F8C 61                  <1> 	popad
  1688 00000F8D 17                  <1> 	pop ss
  1689 00000F8E 0FA9                <1> 	pop gs
  1690 00000F90 0FA1                <1> 	pop fs
  1691 00000F92 07                  <1> 	pop es
  1692 00000F93 1F                  <1> 	pop ds
  1693 00000F94 81C408000000        <1> 	add esp, 8
  1694                              <1> ;	popf ;pop the cs segment selector into eflags
  1695                              <1> ;	popf ;then pop the flags
  1696                              <1> %ifdef gui.included
  1697                              <1> 	cmp byte [guion], 0
  1698                              <1> 	je returnunhandgui
  1699                              <1> 	mov bx, [backgroundcache]
  1700                              <1> 	mov [background], bx
  1701                              <1> 	xor bx, bx
  1702                              <1> 	mov byte [mousedisabled], 0
  1703                              <1> 	call guiclear
  1704                              <1> 	call reloadallgraphics
  1705                              <1> 	call termcopy
  1706                              <1> %endif
  1707                              <1> returnunhandgui:
  1708 00000F9A E9881A0000          <1> 	jmp nwcmd
  1709 00000F9F 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1710 00000FA8 737420616E79207072- <1>
  1711 00000FB1 6F626C656D7320696E- <1>
  1712 00000FBA 207468652049737375- <1>
  1713 00000FC3 65732073656374696F- <1>
  1714 00000FCC 6E20617420736F6C6C- <1>
  1715 00000FD5 65726F732E676F6F67- <1>
  1716 00000FDE 6C65636F64652E636F- <1>
  1717 00000FE7 6D0A                <1>
  1718 00000FE9 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1719 00000FF2 206B657920746F2072- <1>
  1720 00000FFB 657475726E20746F20- <1>
  1721 00001004 536F6C6C65724F530A- <1>
  1722 0000100D 00                  <1>
  1723                              <1> expdump:
  1724 0000100E 8B35[47100000]      <1> 	mov esi, [esiloc]
  1725 00001014 89F7                <1> 	mov edi, esi
  1726 00001016 81C70F000000        <1> 	add edi, 15
  1727 0000101C 81C604000000        <1> 	add esi, 4
  1728 00001022 893D[47100000]      <1> 	mov [esiloc], edi
  1729 00001028 81EF03000000        <1> 	sub edi, 3
  1730 0000102E E8561E0000          <1> 	call converthex
  1731 00001033 81EE04000000        <1> 	sub esi, 4
  1732                              <1> %ifdef gui.included
  1733                              <1> 	cmp byte [guion], 0
  1734                              <1> 	je near expdumptext
  1735                              <1> 	mov cx, [locunhandy]
  1736                              <1> 	mov dx, [locunhandx]
  1737                              <1> 	mov ax, 1
  1738                              <1> 	xor bx, bx
  1739                              <1> 	call showstring2
  1740                              <1> 	mov [locunhandy], cx
  1741                              <1> 	mov [locunhandx], dx
  1742                              <1> 	ret
  1743                              <1> %endif
  1744                              <1> expdumptext:
  1745 00001039 E8B90B0000          <1> 	call print
  1746 0000103E C3                  <1> 	ret
  1747 0000103F 00000000            <1> esploc dd 0
  1748 00001043 00000000            <1> espfirst dd 0
  1749 00001047 00000000            <1> esiloc dd 0
  1750 0000104B 00000000            <1> esiregbuf dd 0
  1751 0000104F 0100                <1> locunhandy dw 1
  1752 00001051 0100                <1> locunhandx dw 1
  1753 00001053 0000                <1> backgroundcache dw 0
  1754 00001055 00                  <1> intprob db 0
  1755 00001056 00000000            <1> codeloc dd 0
  1756 0000105A 00000000            <1> codelocend dd 0
  1757 0000105E 000000000000        <1> igdtcache dw 0,0,0
  1758                              <1> 	unhandmsg:	
  1759 00001064 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1760 0000106D 303030FF0A00        <1>
  1761                              <1> unhndrg:
  1762 00001073 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1763 0000107C 303030202000<rept>  <1>
  1764 000010DC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1765 000010E5 303030FF0A00        <1>
  1766 000010EB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1767 000010F4 303030202000<rept>  <1>
  1768 00001154 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1769 0000115D 303030FF0A00        <1>
  1770 00001163 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1771 0000116C 303030202000<rept>  <1>
  1772 000011CC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1773 000011D5 303030FF0A00        <1>
  1774 000011DB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1775 000011E4 303030202000<rept>  <1>
  1776 00001244 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1777 0000124D 303030FF0A00        <1>
  1778                              <1> unhandregs:
  1779 00001253 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1780 0000125C 303030202000        <1>
  1781 00001262 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1782 0000126B 303030202000        <1>
  1783 00001271 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1784 0000127A 303030FF0A00        <1>
  1785 00001280 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1786 00001289 303030202000        <1>
  1787 0000128F 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1788 00001298 303030202000        <1>
  1789 0000129E 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1790 000012A7 303030202000        <1>
  1791 000012AD 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1792 000012B6 303030202000        <1>
  1793 000012BC 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1794 000012C5 303030FF0A00        <1>
  1795 000012CB 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1796 000012D4 303030202000        <1>
  1797 000012DA 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1798 000012E3 303030202000        <1>
  1799 000012E9 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1800 000012F2 303030202000        <1>
  1801 000012F8 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1802 00001301 303030FF0A00        <1>
  1803 00001307 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1804 00001310 303030202000        <1>
  1805 00001316 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1806 0000131F 303030202000        <1>
  1807 00001325 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1808 0000132E 303030202000        <1>
  1809 00001334 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1810 0000133D 303030FF0A00        <1>
  1811 00001343 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1812 0000134C 303030202000        <1>
  1813 00001352 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1814 0000135B 303030202000        <1>
  1815 00001361 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1816 0000136A 303030202000        <1>
  1817 00001370 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1818 00001379 303030FF0A00        <1>
  1819 0000137F 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1820 00001388 303030202000        <1>
  1821 0000138E 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1822 00001397 303030202000        <1>
  1823 0000139D 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1824 000013A6 303030202000        <1>
  1825 000013AC 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1826 000013B5 303030FF0A00        <1>
  1827 000013BB FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1828 000013C4 303030202000<rept>  <1>
  1829 000013D9 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1830 000013E2 30303020FF00        <1>
  1831 000013E8 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1832 000013F1 3030305D2000        <1>
  1833 000013F7 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1834 00001400 303030202000<rept>  <1>
  1835 00001424 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1836 0000142D 303030FF0A00        <1>
  1837                              <1> unhandmsgend:
  1838                              <1> 
  1839                              <1> errortypes:
  1840 00001433 [77140000]          <1> 			dd err0
  1841 00001437 [E0140000]          <1> 			dd err1
  1842 0000143B [41150000]          <1> 			dd err2
  1843 0000143F [96150000]          <1> 			dd err3
  1844 00001443 [FA150000]          <1> 			dd err4
  1845 00001447 [4C160000]          <1> 			dd err5
  1846 0000144B [B6160000]          <1> 			dd err6
  1847 0000144F [1E170000]          <1> 			dd err7
  1848 00001453 [68170000]          <1> 			dd err8
  1849 00001457 [C5170000]          <1> 			dd err9
  1850 0000145B [1E180000]          <1> 			dd err10
  1851 0000145F [69180000]          <1> 			dd err11
  1852 00001463 [B9180000]          <1> 			dd err12
  1853 00001467 [12190000]          <1> 			dd err13
  1854 0000146B [75190000]          <1> 			dd err14
  1855 0000146F [B1190000]          <1> 			dd err15
  1856                              <1> errortypesend:
  1857 00001473 [3D1A0000]          <1> 			dd unknownerror
  1858                              <1> 			
  1859 00001477 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1860 00001480 6279207A65726F3A0A  <1>
  1861 00001489 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1862 00001492 6C79206C696D2061C3- <1>
  1863 0000149B B778203D20E2889E20- <1>
  1864 000014A4 7768656E2061206973- <1>
  1865 000014AD 20616E79207265616C- <1>
  1866 000014B6 206E756D6265722E20- <1>
  1867 000014BF 486170707920456173- <1>
  1868 000014C8 746572210A          <1>
  1869 000014CD 202020202020202020- <1> 		db "            x→0",10,0
  1870 000014D6 20202078E28692300A- <1>
  1871 000014DF 00                  <1>
  1872                              <1> 		
  1873 000014E0 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1874 000014E9 65702F427265616B70- <1>
  1875 000014F2 6F696E743A0A        <1>
  1876 000014F8 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1877 00001501 696E74206661756C74- <1>
  1878 0000150A 2C20627265616B706F- <1>
  1879 00001513 696E7420747261702C- <1>
  1880 0000151C 206F722073696E676C- <1>
  1881 00001525 652D73746570207472- <1>
  1882 0000152E 617020776173207472- <1>
  1883 00001537 696767657265642E0A- <1>
  1884 00001540 00                  <1>
  1885                              <1> 		
  1886 00001541 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1887 0000154A 6C6520696E74657272- <1>
  1888 00001553 7570743A0A          <1>
  1889 00001558 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1890 00001561 6520696E7465727275- <1>
  1891 0000156A 707420776173207472- <1>
  1892 00001573 696767657265642074- <1>
  1893 0000157C 68617420636F756C64- <1>
  1894 00001585 206E6F74206265206D- <1>
  1895 0000158E 61736B65642E0A00    <1>
  1896                              <1> 		
  1897 00001596 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1898 0000159F 743A0A              <1>
  1899 000015A2 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1900 000015AB 727275707420697320- <1>
  1901 000015B4 7573656420696E2070- <1>
  1902 000015BD 726F6772616D732074- <1>
  1903 000015C6 6F2073686F77207468- <1>
  1904 000015CF 6520737461636B2061- <1>
  1905 000015D8 6E6420726567697374- <1>
  1906 000015E1 65727320616E642063- <1>
  1907 000015EA 616E2062650A        <1>
  1908 000015F0 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1909 000015F9 00                  <1>
  1910                              <1> 		
  1911 000015FA 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1912 00001603 0A                  <1>
  1913 00001604 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1914 0000160D 73736F722072616E20- <1>
  1915 00001616 696E746F20616E2049- <1>
  1916 0000161F 4E544F20696E737472- <1>
  1917 00001628 756374696F6E207769- <1>
  1918 00001631 746820746865206F76- <1>
  1919 0000163A 6572666C6F7720666C- <1>
  1920 00001643 6167207365742E0A00  <1>
  1921                              <1> 		
  1922 0000164C 426F756E6473206368- <1> err5	db "Bounds check:",10
  1923 00001655 65636B3A0A          <1>
  1924 0000165A 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1925 00001663 73736F72207265626F- <1>
  1926 0000166C 756E6465642066726F- <1>
  1927 00001675 6D206120424F554E44- <1>
  1928 0000167E 20696E737472756374- <1>
  1929 00001687 696F6E2072756E206F- <1>
  1930 00001690 6E20616E206F706572- <1>
  1931 00001699 616E64207468617420- <1>
  1932 000016A2 776173206F75740A    <1>
  1933 000016AA 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1934 000016B3 2E0A00              <1>
  1935                              <1> 		
  1936 000016B6 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1937 000016BF 70636F64653A0A      <1>
  1938 000016C6 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1939 000016CF 73736F722068617320- <1>
  1940 000016D8 6E6F20696465612077- <1>
  1941 000016E1 686174206974207761- <1>
  1942 000016EA 7320747279696E6720- <1>
  1943 000016F3 746F20657865637574- <1>
  1944 000016FC 652E20446F6E277420- <1>
  1945 00001705 72756E205353453420- <1>
  1946 0000170E 636F64650A          <1>
  1947 00001713 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1948 0000171C 0A00                <1>
  1949                              <1> 		
  1950 0000171E 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1951 00001727 6F72206E6F74206176- <1>
  1952 00001730 61696C61626C653A0A  <1>
  1953 00001739 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1954 00001742 206B6E6F7720746865- <1>
  1955 0000174B 7920646F6E2774206D- <1>
  1956 00001754 616B652074686F7365- <1>
  1957 0000175D 20616E796D6F726521- <1>
  1958 00001766 0A00                <1>
  1959                              <1> 		
  1960 00001768 446F75626C65206661- <1> err8	db "Double fault:",10
  1961 00001771 756C743A0A          <1>
  1962 00001776 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1963 0000177F 74696F6E2068616E64- <1>
  1964 00001788 6C657220636F756C64- <1>
  1965 00001791 206E6F742068616E64- <1>
  1966 0000179A 6C6520746861742069- <1>
  1967 000017A3 7420636F756C64206E- <1>
  1968 000017AC 6F742068616E646C65- <1>
  1969 000017B5 20616E206578636570- <1>
  1970 000017BE 74696F6E2E0A00      <1>
  1971                              <1> 		
  1972 000017C5 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1973 000017CE 6F72207365676D656E- <1>
  1974 000017D7 74206F76657272756E- <1>
  1975 000017E0 3A0A00              <1>
  1976 000017E3 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1977 000017EC 722068617070656E73- <1>
  1978 000017F5 20696E206D6F646572- <1>
  1979 000017FE 6E20636F6D70757465- <1>
  1980 00001807 72732C20616E64206E- <1>
  1981 00001810 657665722073686F75- <1>
  1982 00001819 6C642E0A00          <1>
  1983                              <1> 
  1984 0000181E 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1985 00001827 53533A0A            <1>
  1986 0000182B 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1987 00001834 686174207761732073- <1>
  1988 0000183D 776974636865642074- <1>
  1989 00001846 6F20697320696E7661- <1>
  1990 0000184F 6C69642E204E6F7468- <1>
  1991 00001858 696E672066756E6E79- <1>
  1992 00001861 20686572652E0A00    <1>
  1993                              <1> 		
  1994 00001869 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1995 00001872 6F742070726573656E- <1>
  1996 0000187B 743A0A              <1>
  1997 0000187E 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1998 00001887 6E7420626974206F66- <1>
  1999 00001890 20746865207365676D- <1>
  2000 00001899 656E74206465736372- <1>
  2001 000018A2 6970746F7220697320- <1>
  2002 000018AB 73657420746F207A65- <1>
  2003 000018B4 726F2E0A00          <1>
  2004                              <1> 		
  2005 000018B9 537461636B20657863- <1> err12	db "Stack exception:",10
  2006 000018C2 657074696F6E3A0A    <1>
  2007 000018CA 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2008 000018D3 7363726970746F7220- <1>
  2009 000018DC 697320696E76616C69- <1>
  2010 000018E5 64206F72206E6F7420- <1>
  2011 000018EE 70726573656E74206F- <1>
  2012 000018F7 7220697473206C696D- <1>
  2013 00001900 697420697320746F6F- <1>
  2014 00001909 20736D616C6C2E0A00  <1>
  2015                              <1> 		
  2016 00001912 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2017 0000191B 726F74656374696F6E- <1>
  2018 00001924 2076696F6C6174696F- <1>
  2019 0000192D 6E3A0A              <1>
  2020 00001930 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2021 00001939 746564207468652063- <1>
  2022 00001942 6F6D70757465722E20- <1>
  2023 0000194B 537465702061776179- <1>
  2024 00001954 20736C6F776C792E20- <1>
  2025 0000195D 546865204642492069- <1>
  2026 00001966 73206F6E2069747320- <1>
  2027 0000196F 7761792E0A00        <1>
  2028                              <1> 		
  2029 00001975 50616765206661756C- <1> err14	db "Page fault:",10
  2030 0000197E 743A0A              <1>
  2031 00001981 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2032 0000198A 746861742077617320- <1>
  2033 00001993 726571756573746564- <1>
  2034 0000199C 20776173206E6F7420- <1>
  2035 000019A5 617661696C61626C65- <1>
  2036 000019AE 2E0A00              <1>
  2037                              <1> 		
  2038 000019B1 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2039 000019BA 666F7220506C616E20- <1>
  2040 000019C3 523A0A              <1>
  2041 000019C6 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2042 000019CF 727275707420697320- <1>
  2043 000019D8 726573657276656420- <1>
  2044 000019E1 666F72207573616765- <1>
  2045 000019EA 206F6E6C7920627920- <1>
  2046 000019F3 746865206D696C6974- <1>
  2047 000019FC 617279207768656E20- <1>
  2048 00001A05 6974206973206E6563- <1>
  2049 00001A0E 6573736172790A      <1>
  2050 00001A15 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2051 00001A1E 746520612066756C6C- <1>
  2052 00001A27 2D7363616C6520636F- <1>
  2053 00001A30 7570206427C3A97461- <1>
  2054 00001A39 742E0A00            <1>
  2055                              <1> 		
  2056 00001A3D 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2057 00001A46 68656C6C206A757374- <1>
  2058 00001A4F 2068617070656E6564- <1>
  2059 00001A58 3F2049732065766572- <1>
  2060 00001A61 796F6E65206F6B6179- <1>
  2061 00001A6A 3F2048617264206472- <1>
  2062 00001A73 6976653F2056696465- <1>
  2063 00001A7C 6F20636172643F0A    <1>
  2064 00001A84 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2065 00001A8D 726520796F75207468- <1>
  2066 00001A96 6572653F0A00        <1>
  2067                              <1> %else
  2068                              <1> unhand:	
  2069                              <1> 	%assign i 0
  2070                              <1> 	%rep 32
  2071                              <1> 	mov byte [intprob], i
  2072                              <1> 	jmp unhand2
  2073                              <1> 	%assign i i+1
  2074                              <1> 	%endrep
  2075                              <1> unhand2:
  2076                              <1> 	cmp byte [intprob], 3
  2077                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2078                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2079                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2080                              <1> 	mov bl, [intprob]
  2081                              <1> 	jmp exitprog
  2082                              <1> intprob db 0
  2083                              <1> %endif
  2084                                      %include "source/ints.asm"
  2085                              <1> int30h:	;for great justice
  2086 00001A9C 80FC00              <1> 	cmp ah, 0
  2087 00001A9F 0F849A000000        <1> 	je near exitprog   ;kills app
  2088 00001AA5 80FC01              <1> 	cmp ah, 1
  2089 00001AA8 0F8419010000        <1> 	je near prntstr  ;print string
  2090 00001AAE 80FC02              <1> 	cmp ah, 2
  2091 00001AB1 0F84B9010000        <1> 	je near readstr	;read string
  2092 00001AB7 80FC03              <1> 	cmp ah, 3
  2093 00001ABA 0F84D9010000        <1> 	je near clearscrn	;clear screen
  2094 00001AC0 80FC04              <1> 	cmp ah, 4
  2095 00001AC3 0F844E020000        <1> 	je near prntreadstr	;read and print string
  2096 00001AC9 80FC05              <1> 	cmp ah, 5
  2097 00001ACC 0F8413070000        <1> 	je near readchar	;get char
  2098 00001AD2 80FC06              <1> 	cmp ah, 6
  2099 00001AD5 0F847A070000        <1> 	je near prntchar	;print char
  2100 00001ADB 80FC07              <1> 	cmp ah, 7
  2101 00001ADE 0F8497090000        <1> 	je near openfile	;read file
  2102                              <1> ;	cmp ah, 8
  2103                              <1> ;	je near closefile	;close file
  2104 00001AE4 80FC09              <1> 	cmp ah, 9
  2105 00001AE7 0F8498090000        <1> 	je near num2str	;convert number to string
  2106 00001AED 80FC0A              <1> 	cmp ah, 10
  2107 00001AF0 0F84A7090000        <1> 	je near str2num	;convert string to number
  2108                              <1> %ifdef threads.included
  2109 00001AF6 80FC0B              <1> 	cmp ah, 11
  2110 00001AF9 0F84AA090000        <1> 	je near forkthread	;create thread
  2111                              <1> %endif
  2112 00001AFF 80FC0C              <1> 	cmp ah, 12
  2113 00001B02 0F84780A0000        <1> 	je near gettime	;get time
  2114 00001B08 80FC0D              <1> 	cmp ah, 13
  2115 00001B0B 0F84840A0000        <1> 	je near settime	;set time
  2116 00001B11 80FC0E              <1> 	cmp ah, 14
  2117 00001B14 0F848B0A0000        <1> 	je near runcmd	;run program
  2118 00001B1A 80FC0F              <1> 	cmp ah, 15
  2119 00001B1D 0F84970A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2120 00001B23 80FC10              <1> 	cmp ah, 16
  2121 00001B26 0F84B90A0000        <1> 	je near hooksig	;hook code to a signal
  2122                              <1> %ifdef gui.included
  2123                              <1> 	cmp ah, 17
  2124                              <1> 	je near guiint	;GUI operations
  2125                              <1> %endif
  2126                              <1> %ifdef sound.included
  2127 00001B2C 80FC12              <1> 	cmp ah, 18
  2128 00001B2F 0F84C00A0000        <1> 	je near soundint	;sound operations
  2129                              <1> %endif
  2130                              <1> %ifdef network.included
  2131 00001B35 80FC13              <1> 	cmp ah, 19
  2132 00001B38 0F84BC0A0000        <1> 	je near netint	;networking operations
  2133                              <1> %endif
  2134 00001B3E CF                  <1> 	iret
  2135                              <1> 
  2136                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2137                              <2> exitprog:
  2138 00001B3F 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2139 00001B43 8ED8                <2> 	mov ds, ax
  2140 00001B45 8EC0                <2> 	mov es, ax
  2141 00001B47 8EE0                <2> 	mov fs, ax
  2142 00001B49 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2143 00001B4D 8EE8                <2> 	mov gs, ax
  2144 00001B4F C705[075D0000]0000- <2> 	mov dword [currentthread], 0
  2145 00001B57 0000                <2>
  2146 00001B59 C705[025D0000]0400- <2> 	mov dword [lastthread], 4
  2147 00001B61 0000                <2>
  2148 00001B63 C605[065D0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2149 00001B6A 8B25[088A0300]      <2> 	mov esp, [previousstack] ;and this
  2150 00001B70 81FB00000000        <2> 	cmp ebx, 0
  2151 00001B76 0F8501000000        <2> 	jne near .error
  2152 00001B7C C3                  <2> 	ret
  2153                              <2> .error:
  2154 00001B7D 89D9                <2> 	mov ecx, ebx
  2155 00001B7F B006                <2> 	mov al, 6
  2156 00001B81 A2[E72E0000]        <2> 	mov [firsthexshown], al
  2157 00001B86 51                  <2> 	push ecx
  2158 00001B87 BE[A21B0000]        <2> 	mov esi, .msg1
  2159 00001B8C E855000000          <2> 	call printhighlight
  2160 00001B91 59                  <2> 	pop ecx
  2161 00001B92 E865130000          <2> 	call showhex
  2162 00001B97 BE[B71B0000]        <2> 	mov esi, .msg2
  2163 00001B9C E845000000          <2> 	call printhighlight
  2164 00001BA1 C3                  <2> 	ret
  2165                              <2> 	
  2166 00001BA2 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2167 00001BAB 7461747573206F6620- <2>
  2168 00001BB4 307800              <2>
  2169 00001BB7 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2170 00001BC0 726E65642E0A00      <2>
  2171                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2172                              <2> prntstr:
  2173 00001BC7 30E4                <2> xor ah, ah
  2174 00001BC9 E830000000          <2> call printint
  2175 00001BCE E9B6E6FFFF          <2> jmp timerinterrupt
  2176                              <2> 
  2177                              <2> 	printquiet:
  2178 00001BD3 6631C0              <2> 		xor ax, ax
  2179 00001BD6 66A3[6E1C0000]      <2> 		mov [endkeyprint], ax
  2180 00001BDC 66BB0700            <2> 		mov bx, 7
  2181 00001BE0 E832000000          <2> 		call printint.b
  2182 00001BE5 C3                  <2> 		ret
  2183                              <2> 
  2184                              <2> 	printhighlight:
  2185 00001BE6 6631C0              <2> 		xor ax, ax
  2186 00001BE9 66BBF000            <2> 		mov bx, 0xF0
  2187 00001BED E90C000000          <2> 		jmp printint
  2188                              <2> 
  2189                              <2> 	printline:
  2190 00001BF2 BE[AA610000]        <2> 		mov esi, line
  2191                              <2>     print:
  2192 00001BF7 6631C0              <2> 		xor ax, ax
  2193 00001BFA 66BB0700            <2> 		mov bx, 7
  2194                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2195 00001BFE 56                  <2> 		push esi
  2196 00001BFF 66A3[6E1C0000]      <2> 		mov [endkeyprint], ax
  2197 00001C05 E80D000000          <2> 		call .b
  2198 00001C0A 89F1                <2> 		mov ecx, esi
  2199 00001C0C 5F                  <2> 		pop edi
  2200 00001C0D 29F9                <2> 		sub ecx, edi
  2201 00001C0F 51                  <2> 		push ecx
  2202 00001C10 E8EA090000          <2> 		call termcopy
  2203 00001C15 59                  <2> 		pop ecx
  2204 00001C16 C3                  <2> 		ret
  2205                              <2> 	.b:	
  2206 00001C17 53                  <2> 		push ebx
  2207 00001C18 31C0                <2> 		xor eax, eax
  2208 00001C1A 8A06                <2> 		mov al, [esi]
  2209 00001C1C 3CFF                <2> 		cmp al, 0xFF
  2210 00001C1E 7435                <2> 		je .doneutf
  2211 00001C20 3CC0                <2> 		cmp al, 0xC0
  2212 00001C22 7231                <2> 		jb .doneutf
  2213 00001C24 3CE0                <2> 		cmp al, 0xE0
  2214 00001C26 721A                <2> 		jb .two
  2215 00001C28 46                  <2> 		inc esi
  2216 00001C29 8A2E                <2> 		mov ch, [esi]
  2217 00001C2B 46                  <2> 		inc esi
  2218 00001C2C 8A0E                <2> 		mov cl, [esi]
  2219 00001C2E C0E004              <2> 		shl al, 4
  2220 00001C31 C0E102              <2> 		shl cl, 2
  2221 00001C34 66C1E902            <2> 		shr cx, 2
  2222 00001C38 08C5                <2> 		or ch, al
  2223 00001C3A 6689C8              <2> 		mov ax, cx
  2224 00001C3D E913000000          <2> 		jmp .doneutf
  2225                              <2> 	.two:
  2226 00001C42 8A2E                <2> 		mov ch, [esi]
  2227 00001C44 46                  <2> 		inc esi
  2228 00001C45 8A0E                <2> 		mov cl, [esi]
  2229 00001C47 66C1E102            <2> 		shl cx, 2
  2230 00001C4B C0ED02              <2> 		shr ch, 2
  2231 00001C4E 66C1E902            <2> 		shr cx, 2
  2232 00001C52 6689C8              <2> 		mov ax, cx
  2233                              <2> 	.doneutf:
  2234 00001C55 5B                  <2> 		pop ebx
  2235 00001C56 663B05[6E1C0000]    <2> 		cmp ax, [endkeyprint]
  2236 00001C5D 740E                <2> 		je .done
  2237 00001C5F 663DFFFE            <2> 		cmp ax, 0xFEFF
  2238 00001C63 7405                <2> 		je .noprint
  2239 00001C65 E818060000          <2> 		call prcharq
  2240                              <2> 	.noprint:
  2241 00001C6A 46                  <2> 		inc esi
  2242 00001C6B EBAA                <2> 		jmp .b
  2243                              <2> 	.done:
  2244 00001C6D C3                  <2> 		ret
  2245                              <2> 
  2246 00001C6E 0000                <2> endkeyprint dw 0
  2247                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2248                              <2> readstr:
  2249 00001C70 E805000000          <2> call readint
  2250 00001C75 E90FE6FFFF          <2> jmp timerinterrupt
  2251                              <2> 
  2252                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2253 00001C7A 89C3                <2> 		mov ebx, eax
  2254                              <2> 	.b:
  2255 00001C7C 53                  <2> 		push ebx
  2256 00001C7D 57                  <2> 		push edi
  2257 00001C7E 56                  <2> 		push esi
  2258 00001C7F 30C0                <2> 		xor al, al
  2259 00001C81 E86B050000          <2> 		call rdcharint
  2260 00001C86 5E                  <2> 		pop esi
  2261 00001C87 8806                <2> 		mov [esi], al
  2262 00001C89 46                  <2> 		inc esi
  2263 00001C8A 5F                  <2> 		pop edi
  2264 00001C8B 5B                  <2> 		pop ebx
  2265 00001C8C 39FE                <2> 		cmp esi, edi
  2266 00001C8E 7304                <2> 		jae .done
  2267 00001C90 38D8                <2> 		cmp al, bl
  2268 00001C92 75E8                <2> 		jne .b
  2269                              <2> 	.done:
  2270 00001C94 4E                  <2> 		dec esi
  2271 00001C95 C60600              <2> 		mov byte [esi], 0
  2272 00001C98 C3                  <2> 		ret
  2273                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2274                              <2> clearscrn:
  2275 00001C99 E805000000          <2> call clear
  2276 00001C9E E9E6E5FFFF          <2> jmp timerinterrupt
  2277                              <2> %ifdef io.serial
  2278                              <2> clear:
  2279                              <2> 	ret
  2280                              <2> %else
  2281                              <2> clear:
  2282 00001CA3 668B0D[75240000]    <2> 		mov cx, [charxy]
  2283 00001CAA BF[9DA40300]        <2> 		mov edi, videobuf
  2284 00001CAF 31C0                <2> 		xor eax, eax
  2285 00001CB1 A3[6B240000]        <2> 		mov [linebeginpos], eax
  2286 00001CB6 A3[6F240000]        <2> 		mov [videobufpos], eax
  2287 00001CBB 6631D2              <2> 		xor dx, dx
  2288 00001CBE 66A3[73240000]      <2> 		mov [charpos], ax
  2289 00001CC4 66B80700            <2> 		mov ax, 7
  2290 00001CC8 C1E010              <2> 		shl eax, 16
  2291                              <2> 	clearb:
  2292 00001CCB 8907                <2> 		mov [edi], eax
  2293 00001CCD 81C704000000        <2> 		add edi, 4
  2294 00001CD3 FEC9                <2> 		dec cl
  2295 00001CD5 80F900              <2> 		cmp cl, 0
  2296 00001CD8 75F1                <2> 		jne clearb
  2297 00001CDA 8A0D[75240000]      <2> 		mov cl, [charxy]
  2298 00001CE0 FECD                <2> 		dec ch
  2299 00001CE2 80FD00              <2> 		cmp ch, 0
  2300 00001CE5 75E4                <2> 		jne clearb
  2301                              <2> 	cleardouble:
  2302 00001CE7 BF[1DCA0300]        <2> 		mov edi, videobuf2
  2303 00001CEC 668B0D[75240000]    <2> 		mov cx, [charxy]
  2304 00001CF3 31C0                <2> 		xor eax, eax
  2305                              <2> 	clearc:
  2306 00001CF5 8907                <2> 		mov [edi], eax
  2307 00001CF7 81C704000000        <2> 		add edi, 4
  2308 00001CFD FEC9                <2> 		dec cl
  2309 00001CFF 80F900              <2> 		cmp cl, 0
  2310 00001D02 75F1                <2> 		jne clearc
  2311 00001D04 8A0D[75240000]      <2> 		mov cl, [charxy]
  2312 00001D0A FECD                <2> 		dec ch
  2313 00001D0C 80FD00              <2> 		cmp ch, 0
  2314 00001D0F 75E4                <2> 		jne clearc
  2315 00001D11 E8E9080000          <2> 		call termcopy
  2316 00001D16 C3                  <2> 		ret
  2317                              <2> %endif
  2318                              <2> 		
  2319                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2320                              <2> prntreadstr:
  2321 00001D17 E80B000000          <2> call rdprint
  2322 00001D1C E968E5FFFF          <2> jmp timerinterrupt
  2323                              <2> 
  2324                              <2> readline:
  2325 00001D21 B00A                <2>   mov al, 10
  2326 00001D23 66BB0700            <2>   mov bx, 7
  2327                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2328 00001D27 E80F000000          <2> 	call rdprintdos
  2329 00001D2C 50                  <2> 	push eax
  2330 00001D2D A0[D0210000]        <2> 	mov al, [endkeyrdpr]
  2331 00001D32 30E4                <2> 	xor ah, ah
  2332 00001D34 E832050000          <2> 	call prcharint
  2333 00001D39 58                  <2> 	pop eax
  2334 00001D3A C3                  <2> 	ret
  2335                              <2> 
  2336                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2337 00001D3B 8935[DA210000]      <2> 		mov [buftxtloc], esi
  2338 00001D41 A2[D0210000]        <2> 		mov [endkeyrdpr], al
  2339 00001D46 66891D[D2210000]    <2> 		mov [modkeyrdpr], bx
  2340 00001D4D 8935[D4210000]      <2> 		mov [firstesirdpr], esi
  2341 00001D53 893D[DE210000]      <2> 		mov [endbufferrdpr], edi
  2342 00001D59 8B3D[A9EF0300]      <2> 		mov edi, [commandsentered]
  2343 00001D5F 893D[A5EF0300]      <2> 		mov [commandlistentries], edi
  2344                              <2> 	rdprintb:
  2345 00001D65 56                  <2> 		push esi
  2346 00001D66 B001                <2> 		mov al, 1
  2347 00001D68 E884040000          <2> 		call rdcharint
  2348 00001D6D 8A25[51220000]      <2> 		mov ah, [lastkey + 2]
  2349 00001D73 88E1                <2> 		mov cl, ah
  2350 00001D75 5E                  <2> 		pop esi
  2351                              <2> %ifdef io.serial
  2352                              <2> 		cmp ah, 0x41
  2353                              <2> 		je near rdprup
  2354                              <2> 		cmp ah, 0x42
  2355                              <2> 		je near rdprdown
  2356                              <2> 		cmp ah, 0x43
  2357                              <2> 		je near rdprright
  2358                              <2> 		cmp ah, 0x44
  2359                              <2> 		je near rdprleft
  2360                              <2> 		cmp ah, 0x31
  2361                              <2> 		je near rdprhome
  2362                              <2> 		cmp ah, 0x48
  2363                              <2> 		je near rdprhome
  2364                              <2> 		cmp ah, 0x46
  2365                              <2> 		je near rdprend
  2366                              <2> 		cmp ah, 0x33
  2367                              <2> 		je near rdprdel
  2368                              <2> 		cmp ah, 0x34
  2369                              <2> 		je near rdprend
  2370                              <2> %else
  2371 00001D76 803D[89510000]E0    <2> 		cmp byte [specialkey], 0xE0
  2372 00001D7D 753F                <2> 		jne notspecialrdprnt
  2373 00001D7F 80FC53              <2> 		cmp ah, 0x53
  2374 00001D82 0F84B1030000        <2> 		je near rdprdel
  2375 00001D88 80FC47              <2> 		cmp ah, 0x47
  2376 00001D8B 0F847E010000        <2> 		je near rdprhome
  2377 00001D91 80FC4F              <2> 		cmp ah, 0x4F
  2378 00001D94 0F8494010000        <2> 		je near rdprend
  2379 00001D9A 80FC50              <2> 		cmp ah, 0x50
  2380 00001D9D 0F8424020000        <2> 		je near rdprdown
  2381 00001DA3 80FC4D              <2> 		cmp ah, 0x4D
  2382 00001DA6 0F84C1010000        <2> 		je near rdprright
  2383 00001DAC 80FC4B              <2> 		cmp ah, 0x4B
  2384 00001DAF 0F8496010000        <2> 		je near rdprleft
  2385 00001DB5 80FC48              <2> 		cmp ah, 0x48
  2386 00001DB8 0F844C020000        <2> 		je near rdprup
  2387                              <2> 	notspecialrdprnt:
  2388                              <2> %endif
  2389 00001DBE 66A1[4F220000]      <2> 		mov ax, [lastkey]
  2390 00001DC4 663D0800            <2> 		cmp ax, 8
  2391 00001DC8 0F84A0030000        <2> 		je near rdprbscheck
  2392 00001DCE 663D0000            <2> 		cmp ax, 0
  2393 00001DD2 7491                <2> 		je rdprintb
  2394 00001DD4 80F900              <2> 		cmp cl, 0
  2395 00001DD7 748C                <2> 		je rdprintb
  2396 00001DD9 663D8000            <2> 		cmp ax, 0x80
  2397 00001DDD 7257                <2> 		jb .normal
  2398 00001DDF 663D0008            <2> 		cmp ax, 0x800
  2399 00001DE3 7321                <2> 		jae .three
  2400 00001DE5 46                  <2> 		inc esi
  2401 00001DE6 3B35[DE210000]      <2> 		cmp esi, [endbufferrdpr]
  2402 00001DEC 0F83DA000000        <2> 		jae near donerdprinc
  2403 00001DF2 66C1E002            <2> 		shl ax, 2
  2404 00001DF6 C0E802              <2> 		shr al, 2
  2405 00001DF9 0C80                <2> 		or al, 10000000b
  2406 00001DFB 80CCC0              <2> 		or ah, 11000000b
  2407 00001DFE 8866FF              <2> 		mov [esi - 1], ah
  2408 00001E01 E930000000          <2> 		jmp .normal
  2409                              <2> .three:	
  2410 00001E06 81C602000000        <2> 		add esi, 2
  2411 00001E0C 3B35[DE210000]      <2> 		cmp esi, [endbufferrdpr]
  2412 00001E12 0F83B4000000        <2> 		jae near donerdprinc
  2413 00001E18 88E1                <2> 		mov cl, ah
  2414 00001E1A C0E904              <2> 		shr cl, 4
  2415 00001E1D 80C9E0              <2> 		or cl, 11100000b
  2416 00001E20 884EFE              <2> 		mov [esi - 2], cl
  2417 00001E23 66C1E004            <2> 		shl ax, 4
  2418 00001E27 66C1E802            <2> 		shr ax, 2
  2419 00001E2B 80CC80              <2> 		or ah, 10000000b
  2420 00001E2E C0E802              <2> 		shr al, 2
  2421 00001E31 0C80                <2> 		or al, 10000000b
  2422 00001E33 8866FF              <2> 		mov [esi - 1], ah
  2423                              <2> .normal:
  2424 00001E36 8806                <2> 		mov [esi], al
  2425 00001E38 46                  <2> 		inc esi
  2426 00001E39 66A1[4F220000]      <2> 		mov ax, [lastkey]
  2427                              <2> 	bscheckequal:
  2428 00001E3F 668B1D[D2210000]    <2> 		mov bx, [modkeyrdpr]
  2429 00001E46 803D[D9210000]00    <2> 		cmp byte [txtmask], 0
  2430 00001E4D 7407                <2> 		je nomasktxt
  2431 00001E4F 30E4                <2> 		xor ah, ah
  2432 00001E51 A0[D9210000]        <2> 		mov al, [txtmask]
  2433                              <2> 	nomasktxt:
  2434 00001E56 56                  <2> 		push esi
  2435 00001E57 66A3[CE210000]      <2> 		mov [axcache], ax
  2436 00001E5D 668B1D[D0210000]    <2> 		mov bx, [endkeyrdpr]
  2437 00001E64 6639D8              <2> 		cmp ax, bx
  2438 00001E67 7432                <2> 		je nobackprintbuftxt2
  2439 00001E69 E8FD030000          <2> 		call prcharint
  2440 00001E6E BE[889C0300]        <2> 		mov esi, buftxt2
  2441 00001E73 E85BFDFFFF          <2> 		call printquiet
  2442 00001E78 66B82000            <2> 		mov ax, " "
  2443 00001E7C E801040000          <2> 		call prcharq
  2444 00001E81 66B80800            <2> 		mov ax, 8
  2445 00001E85 81FE[889C0300]      <2> 		cmp esi, buftxt2
  2446 00001E8B 740E                <2> 		je nobackprintbuftxt2
  2447                              <2> 	backprintbuftxt2:
  2448 00001E8D E8F0030000          <2> 		call prcharq
  2449 00001E92 4E                  <2> 		dec esi
  2450 00001E93 81FE[889C0300]      <2> 		cmp esi, buftxt2
  2451 00001E99 77F2                <2> 		ja backprintbuftxt2
  2452                              <2> 	nobackprintbuftxt2:
  2453 00001E9B 663D0A00            <2> 		cmp ax, 10
  2454 00001E9F 7405                <2> 		je nonobackprint
  2455 00001EA1 E8C5030000          <2> 		call prcharint
  2456                              <2> 	nonobackprint:
  2457 00001EA6 5E                  <2> 		pop esi
  2458 00001EA7 3B35[DE210000]      <2> 		cmp esi, [endbufferrdpr]
  2459 00001EAD 0F8319000000        <2> 		jae near donerdprinc
  2460 00001EB3 66A1[CE210000]      <2> 		mov ax, [axcache]
  2461 00001EB9 8A25[D0210000]      <2> 		mov ah, [endkeyrdpr]
  2462 00001EBF 38E0                <2> 		cmp al, ah
  2463 00001EC1 0F859EFEFFFF        <2> 		jne rdprintb
  2464 00001EC7 E901000000          <2> 		jmp donerdprint
  2465                              <2> 	donerdprinc:
  2466 00001ECC 46                  <2> 		inc esi
  2467                              <2> 	donerdprint:
  2468 00001ECD 4E                  <2> 		dec esi
  2469 00001ECE BF[889C0300]        <2> 		mov edi, buftxt2
  2470                              <2> 	copylaterstuff:
  2471 00001ED3 8A07                <2> 		mov al, [edi]
  2472 00001ED5 3C00                <2> 		cmp al, 0
  2473 00001ED7 7406                <2> 		je nocopylaterstuff
  2474 00001ED9 8806                <2> 		mov [esi], al
  2475 00001EDB 47                  <2> 		inc edi
  2476 00001EDC 46                  <2> 		inc esi
  2477 00001EDD EBF4                <2> 		jmp copylaterstuff
  2478                              <2> 	nocopylaterstuff:
  2479 00001EDF C60600              <2> 		mov byte [esi], 0
  2480 00001EE2 E80B000000          <2> 		call clearbuftxt2
  2481 00001EE7 89F1                <2> 		mov ecx, esi
  2482 00001EE9 8B3D[D4210000]      <2> 		mov edi, [firstesirdpr]
  2483 00001EEF 29F9                <2> 		sub ecx, edi
  2484 00001EF1 C3                  <2> 		ret
  2485                              <2> 	
  2486                              <2> 	clearbuftxt2:
  2487 00001EF2 30C0                <2> 		xor al, al
  2488 00001EF4 BF[889C0300]        <2> 		mov edi, buftxt2
  2489                              <2> 	clearbuftxt2lp:
  2490 00001EF9 8807                <2> 		mov [edi], al
  2491 00001EFB 47                  <2> 		inc edi
  2492 00001EFC 81FF[88A00300]      <2> 		cmp edi, buftxt
  2493 00001F02 75F5                <2> 		jne clearbuftxt2lp
  2494 00001F04 C3                  <2> 		ret
  2495                              <2> 	
  2496                              <2> 	rdprintb2:
  2497 00001F05 E8F5060000          <2> 		call termcopy
  2498 00001F0A E956FEFFFF          <2> 		jmp rdprintb
  2499                              <2> 	
  2500                              <2> 	rdprhome:
  2501 00001F0F 3B35[DA210000]      <2> 		cmp esi, [buftxtloc]
  2502 00001F15 0F84EAFFFFFF        <2> 		je near rdprintb2
  2503 00001F1B BF[889C0300]        <2> 		mov edi, buftxt2
  2504 00001F20 8A07                <2> 		mov al, [edi]
  2505 00001F22 E879020000          <2> 		call shiftbuftxt2
  2506 00001F27 E856030000          <2> 		call prcharq
  2507 00001F2C EBE1                <2> 		jmp rdprhome
  2508                              <2> 		
  2509                              <2> 	rdprend:
  2510 00001F2E BF[889C0300]        <2> 		mov edi, buftxt2
  2511 00001F33 8A07                <2> 		mov al, [edi]
  2512 00001F35 3C00                <2> 		cmp al, 0
  2513 00001F37 0F84C8FFFFFF        <2> 		je near rdprintb2
  2514 00001F3D 8806                <2> 		mov [esi], al
  2515 00001F3F E849000000          <2> 		call shiftbuftxt2lft
  2516 00001F44 E839030000          <2> 		call prcharq
  2517 00001F49 EBE3                <2> 		jmp rdprend
  2518                              <2> 	
  2519                              <2> 	rdprleft:
  2520 00001F4B 3B35[DA210000]      <2> 		cmp esi, [buftxtloc]
  2521 00001F51 0F840EFEFFFF        <2> 		je near rdprintb
  2522 00001F57 BF[889C0300]        <2> 		mov edi, buftxt2
  2523 00001F5C 8A07                <2> 		mov al, [edi]
  2524 00001F5E E83D020000          <2> 		call shiftbuftxt2
  2525 00001F63 E803030000          <2> 		call prcharint
  2526 00001F68 E9F8FDFFFF          <2> 		jmp rdprintb
  2527                              <2> 		
  2528                              <2> 	rdprright:
  2529 00001F6D BF[889C0300]        <2> 		mov edi, buftxt2
  2530 00001F72 8A07                <2> 		mov al, [edi]
  2531 00001F74 3C00                <2> 		cmp al, 0
  2532 00001F76 0F84E9FDFFFF        <2> 		je near rdprintb
  2533 00001F7C 8806                <2> 		mov [esi], al
  2534 00001F7E E80A000000          <2> 		call shiftbuftxt2lft
  2535 00001F83 E8E3020000          <2> 		call prcharint
  2536 00001F88 E9D8FDFFFF          <2> 		jmp rdprintb
  2537                              <2> 		
  2538                              <2> 	shiftbuftxt2lft:
  2539 00001F8D 55                  <2> 		push ebp
  2540 00001F8E 89FD                <2> 		mov ebp, edi
  2541                              <2> 	.lp:
  2542 00001F90 3C00                <2> 		cmp al, 0
  2543 00001F92 7408                <2> 		je noshiftbuftxt2lft
  2544 00001F94 47                  <2> 		inc edi
  2545 00001F95 8A07                <2> 		mov al, [edi]
  2546 00001F97 8847FF              <2> 		mov [edi - 1], al
  2547 00001F9A EBF4                <2> 		jmp .lp
  2548                              <2> 	noshiftbuftxt2lft:
  2549 00001F9C 8A4500              <2> 		mov al, [ebp]
  2550 00001F9F 5D                  <2> 		pop ebp
  2551 00001FA0 3CC0                <2> 		cmp al, 0xC0
  2552 00001FA2 7304                <2> 		jae .nofix
  2553 00001FA4 3C80                <2> 		cmp al, 0x80
  2554 00001FA6 73E5                <2> 		jae shiftbuftxt2lft
  2555                              <2> 	.nofix:
  2556 00001FA8 8A06                <2> 		mov al, [esi]
  2557 00001FAA 30E4                <2> 		xor ah, ah
  2558 00001FAC 46                  <2> 		inc esi
  2559 00001FAD 668B1D[D2210000]    <2> 		mov bx, [modkeyrdpr]
  2560 00001FB4 C3                  <2> 		ret
  2561                              <2> 		
  2562                              <2> 	rdprdownbck:
  2563 00001FB5 FECC                <2> 		dec ah
  2564 00001FB7 8825[D8210000]      <2> 		mov [commandedit], ah
  2565 00001FBD E88D000000          <2> 		call rdprbckspc
  2566 00001FC2 E99EFDFFFF          <2> 		jmp rdprintb
  2567                              <2> 	
  2568                              <2> 	rdprdown:
  2569 00001FC7 8A25[D8210000]      <2> 		mov ah, [commandedit]
  2570 00001FCD 80FC01              <2> 		cmp ah, 1
  2571 00001FD0 0F868FFDFFFF        <2> 		jbe near rdprintb
  2572 00001FD6 8B3D[A9EF0300]      <2> 		mov edi, [commandsentered]
  2573 00001FDC 3B3D[A5EF0300]      <2> 		cmp edi, [commandlistentries]
  2574 00001FE2 7618                <2> 		jbe .nofix
  2575 00001FE4 8105[A5EF0300]0200- <2> 		add dword [commandlistentries], 2
  2576 00001FEC 0000                <2>
  2577 00001FEE 3B3D[A5EF0300]      <2> 		cmp edi, [commandlistentries]
  2578 00001FF4 7706                <2> 		ja .nofix
  2579 00001FF6 893D[A5EF0300]      <2> 		mov [commandlistentries], edi
  2580                              <2> 	.nofix:
  2581 00001FFC 80FC02              <2> 		cmp ah, 2
  2582 00001FFF 74B4                <2> 		je rdprdownbck
  2583 00002001 80EC02              <2> 		sub ah, 2
  2584 00002004 8825[D8210000]      <2> 		mov [commandedit], ah
  2585                              <2> 		
  2586                              <2> 	rdprup:
  2587 0000200A 3805[D8210000]      <2> 		cmp [commandedit], al
  2588 00002010 0F844FFDFFFF        <2> 		je near rdprintb
  2589 00002016 813D[A5EF0300]0000- <2> 		cmp dword [commandlistentries], 0
  2590 0000201E 0000                <2>
  2591 00002020 0F843FFDFFFF        <2> 		je near rdprintb
  2592 00002026 FF0D[A5EF0300]      <2> 		dec dword [commandlistentries]
  2593                              <2> 	.lp:
  2594 0000202C BF[889C0300]        <2> 		mov edi, buftxt2
  2595 00002031 8A07                <2> 		mov al, [edi]
  2596 00002033 3C00                <2> 		cmp al, 0
  2597 00002035 740E                <2> 		je .start
  2598 00002037 8806                <2> 		mov [esi], al
  2599 00002039 E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2600 0000203E E83F020000          <2> 		call prcharq
  2601 00002043 EBE7                <2> 		jmp .lp
  2602                              <2> 	.start:
  2603 00002045 E805000000          <2> 		call rdprbckspc
  2604 0000204A E948000000          <2> 		jmp getcurrentcommandstr
  2605                              <2> 	rdprbckspc:
  2606 0000204F 3B35[DA210000]      <2> 		cmp esi, [buftxtloc]
  2607 00002055 7432                <2> 		je nordprupbck
  2608                              <2> 	rdprupbckspclp:
  2609 00002057 66B80800            <2> 		mov ax, 8
  2610 0000205B 668B1D[D2210000]    <2> 		mov bx, [modkeyrdpr]
  2611 00002062 E81B020000          <2> 		call prcharq
  2612 00002067 66B82000            <2> 		mov ax, ' '
  2613 0000206B E812020000          <2> 		call prcharq
  2614 00002070 66B80800            <2> 		mov ax, 8
  2615 00002074 E809020000          <2> 		call prcharq
  2616 00002079 4E                  <2> 		dec esi
  2617 0000207A 3B35[DA210000]      <2> 		cmp esi, [buftxtloc]
  2618 00002080 7402                <2> 		je nordprupbck2
  2619 00002082 EBD3                <2> 		jmp rdprupbckspclp
  2620                              <2> 	nordprupbck2:
  2621 00002084 E876050000          <2> 		call termcopy
  2622                              <2> 	nordprupbck:
  2623 00002089 8B3D[A1EF0300]      <2> 		mov edi, [commandbufpos]
  2624 0000208F 81C7[ADEF0300]      <2> 		add edi, commandbuf
  2625 00002095 4F                  <2> 		dec edi
  2626 00002096 C3                  <2> 		ret
  2627                              <2> 	getcurrentcommandstr:
  2628 00002097 8A25[D8210000]      <2> 		mov ah, [commandedit]
  2629 0000209D FE05[D8210000]      <2> 		inc byte [commandedit]
  2630                              <2> 	getccmdlp:
  2631 000020A3 4F                  <2> 		dec edi
  2632 000020A4 8A07                <2> 		mov al, [edi]
  2633 000020A6 81FF[ADEF0300]      <2> 		cmp edi, commandbuf
  2634 000020AC 7231                <2> 		jb getcmdresetcommandbuf
  2635 000020AE 81EF[ADEF0300]      <2> 		sub edi, commandbuf
  2636 000020B4 3B3D[A1EF0300]      <2> 		cmp edi, [commandbufpos]
  2637 000020BA 0F84A5FCFFFF        <2> 		je near rdprintb
  2638 000020C0 81C7[ADEF0300]      <2> 		add edi, commandbuf
  2639 000020C6 3C00                <2> 		cmp al, 0
  2640 000020C8 75D9                <2> 		jne getccmdlp
  2641 000020CA FECC                <2> 		dec ah
  2642 000020CC 80FC00              <2> 		cmp ah, 0
  2643 000020CF 77D2                <2> 		ja getccmdlp
  2644 000020D1 47                  <2> 		inc edi
  2645 000020D2 81FF[ADFF0300]      <2> 		cmp edi, commandbufend
  2646 000020D8 770D                <2> 		ja fixcmdbufb4morerdpr
  2647 000020DA E915000000          <2> 		jmp morerdprup
  2648                              <2> 	getcmdresetcommandbuf:
  2649 000020DF BF[ADFF0300]        <2> 		mov edi, commandbufend
  2650 000020E4 47                  <2> 		inc edi
  2651 000020E5 EBBC                <2> 		jmp getccmdlp
  2652                              <2> 	fixcmdbufb4morerdpr:
  2653 000020E7 4F                  <2> 		dec edi
  2654 000020E8 81EF[ADFF0300]      <2> 		sub edi, commandbufend
  2655 000020EE 81C7[ADEF0300]      <2> 		add edi, commandbuf
  2656                              <2> 	morerdprup:
  2657 000020F4 8A07                <2> 		mov al, [edi]
  2658 000020F6 47                  <2> 		inc edi
  2659 000020F7 81EF[ADEF0300]      <2> 		sub edi, commandbuf
  2660 000020FD 3C00                <2> 		cmp al, 0
  2661 000020FF 0F8400FEFFFF        <2> 		je near rdprintb2
  2662 00002105 3B3D[A1EF0300]      <2> 		cmp edi, [commandbufpos]
  2663 0000210B 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2664 00002111 81C7[ADEF0300]      <2> 		add edi, commandbuf
  2665 00002117 8806                <2> 		mov [esi], al
  2666 00002119 46                  <2> 		inc esi
  2667 0000211A 57                  <2> 		push edi
  2668 0000211B 668B1D[D2210000]    <2> 		mov bx, [modkeyrdpr]
  2669 00002122 30E4                <2> 		xor ah, ah
  2670 00002124 E859010000          <2> 		call prcharq
  2671 00002129 5F                  <2> 		pop edi
  2672 0000212A 81FF[ADFF0300]      <2> 		cmp edi, commandbufend
  2673 00002130 76C2                <2> 		jbe morerdprup
  2674 00002132 BF[ADEF0300]        <2> 		mov edi, commandbuf
  2675 00002137 EBBB                <2> 		jmp morerdprup
  2676                              <2> 
  2677                              <2> 	rdprdel:
  2678 00002139 BF[889C0300]        <2> 		mov edi, buftxt2
  2679 0000213E 8A07                <2> 		mov al, [edi]
  2680 00002140 3C00                <2> 		cmp al, 0
  2681 00002142 0F841DFCFFFF        <2> 		je near rdprintb
  2682 00002148 8806                <2> 		mov [esi], al
  2683 0000214A 3C80                <2> 		cmp al, 0x80
  2684 0000214C 7216                <2> 		jb .fn
  2685                              <2> 	.lp:
  2686 0000214E 46                  <2> 		inc esi
  2687 0000214F 47                  <2> 		inc edi
  2688 00002150 8A07                <2> 		mov al, [edi]
  2689 00002152 3C00                <2> 		cmp al, 0
  2690 00002154 0F840BFCFFFF        <2> 		je near rdprintb
  2691 0000215A 8806                <2> 		mov [esi], al
  2692 0000215C 3C80                <2> 		cmp al, 0x80
  2693 0000215E 7204                <2> 		jb .fn
  2694 00002160 3CC0                <2> 		cmp al, 0xC0
  2695 00002162 72EA                <2> 		jb .lp
  2696                              <2> 	.fn:
  2697 00002164 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2698 00002169 E814010000          <2> 		call prcharq
  2699                              <2> 		
  2700                              <2> 	rdprbscheck:
  2701 0000216E 3B35[D4210000]      <2> 		cmp esi, [firstesirdpr]
  2702 00002174 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2703                              <2> 	goodbscheck:
  2704 0000217A 4E                  <2> 		dec esi
  2705 0000217B 8A46FF              <2> 		mov al, [esi - 1]
  2706 0000217E C60600              <2> 		mov byte [esi], 0
  2707 00002181 3CC0                <2> 		cmp al, 0xC0
  2708 00002183 7309                <2> 		jae .onemore
  2709 00002185 3C80                <2> 		cmp al, 0x80
  2710 00002187 73F1                <2> 		jae goodbscheck
  2711 00002189 E904000000          <2> 		jmp .nomore
  2712                              <2> 	.onemore:
  2713 0000218E 4E                  <2> 		dec esi
  2714 0000218F C60600              <2> 		mov byte [esi], 0		
  2715                              <2> 	.nomore:
  2716 00002192 668B1D[D2210000]    <2> 		mov bx, [modkeyrdpr]
  2717 00002199 B008                <2> 		mov al, 8
  2718 0000219B E99FFCFFFF          <2> 		jmp bscheckequal
  2719                              <2> 		
  2720                              <2> 	shiftbuftxt2:
  2721 000021A0 55                  <2> 		push ebp
  2722 000021A1 89FD                <2> 		mov ebp, edi
  2723                              <2> 	.lp:
  2724 000021A3 3C00                <2> 		cmp al, 0
  2725 000021A5 7409                <2> 		je noshiftbuftxt2
  2726 000021A7 47                  <2> 		inc edi
  2727 000021A8 8A27                <2> 		mov ah, [edi]
  2728 000021AA 8807                <2> 		mov [edi], al
  2729 000021AC 88E0                <2> 		mov al, ah
  2730 000021AE EBF3                <2> 		jmp .lp
  2731                              <2> 	noshiftbuftxt2:
  2732 000021B0 8A4500              <2> 		mov al, [ebp]
  2733 000021B3 5D                  <2> 		pop ebp
  2734 000021B4 3CC0                <2> 		cmp al, 0xC0
  2735 000021B6 7304                <2> 		jae .nofix
  2736 000021B8 3C80                <2> 		cmp al, 0x80
  2737 000021BA 73E4                <2> 		jae shiftbuftxt2
  2738                              <2> 	.nofix:
  2739 000021BC BF[889C0300]        <2> 		mov edi, buftxt2
  2740 000021C1 4E                  <2> 		dec esi
  2741 000021C2 8A06                <2> 		mov al, [esi]
  2742 000021C4 8807                <2> 		mov [edi], al
  2743 000021C6 C60600              <2> 		mov byte [esi], 0
  2744 000021C9 66B80800            <2> 		mov ax, 8
  2745 000021CD C3                  <2> 		ret
  2746                              <2> 		
  2747 000021CE 0000                <2> axcache dw 0
  2748 000021D0 0000                <2> endkeyrdpr dw 0
  2749 000021D2 0000                <2> modkeyrdpr dw 0
  2750 000021D4 00000000            <2> firstesirdpr dd 0
  2751 000021D8 00                  <2> commandedit db 0
  2752 000021D9 00                  <2> txtmask db 0
  2753 000021DA 00000000            <2> buftxtloc dd 0
  2754 000021DE 00000000            <2> endbufferrdpr dd 0
  2755 000021E2 082000              <2> backcursor db 8," ",0
  2756                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2757                              <2> readchar:
  2758 000021E5 E807000000          <2> 	call rdcharint
  2759 000021EA E99AE0FFFF          <2> 	jmp timerinterrupt
  2760                              <2> getchar:
  2761 000021EF 30C0                <2> 	xor al, al
  2762                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2763 000021F1 66C705[53220000]01- <2> 		mov word [trans], 1
  2764 000021F9 00                  <2>
  2765 000021FA 3C00                <2> 		cmp al, 0
  2766 000021FC 7509                <2> 		jne transcheck
  2767 000021FE 66C705[53220000]00- <2> 		mov word [trans], 0
  2768 00002206 00                  <2>
  2769                              <2> 	transcheck:
  2770                              <2> 	%ifdef io.serial
  2771                              <2> 		call serial.receive
  2772                              <2> 		xor ah, ah
  2773                              <2> 		cmp al, 13
  2774                              <2> 		je rdenter
  2775                              <2> 	%else
  2776 00002207 E89F2F0000          <2> 		call getkey
  2777 0000220C 66A1[51220000]      <2> 		mov ax, [lastkey + 2]
  2778 00002212 663D1C00            <2> 		cmp ax, 0x1C
  2779 00002216 7425                <2> 		je rdenter
  2780                              <2> 	%endif
  2781 00002218 66A1[4F220000]      <2> 		mov ax, [lastkey]
  2782 0000221E 668B1D[53220000]    <2> 		mov bx, [trans]
  2783 00002225 803D[89510000]E0    <2> 		cmp byte [specialkey], 0xE0
  2784 0000222C 7500                <2> 		jne nospecialtrans
  2785                              <2> 	nospecialtrans:
  2786 0000222E 6609C3              <2> 		or bx, ax
  2787 00002231 6681FB0000          <2> 		cmp bx, 0
  2788 00002236 74CF                <2> 		je transcheck
  2789 00002238 E90C000000          <2> 		jmp rdend
  2790                              <2> 	rdenter:
  2791 0000223D C1E010              <2> 		shl eax, 16
  2792 00002240 66B80A00            <2> 		mov ax, 10
  2793 00002244 A3[4F220000]        <2> 		mov [lastkey], eax
  2794                              <2> 	rdend:
  2795 00002249 A1[4F220000]        <2> 		mov eax, [lastkey]
  2796 0000224E C3                  <2> 		ret
  2797                              <2> 		
  2798 0000224F 00000000            <2> lastkey dd 0
  2799 00002253 0000                <2> trans dw 0
  2800                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2801                              <2> prntchar:
  2802 00002255 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2803                              <2> %ifdef io.serial
  2804                              <2> 	call prcharint
  2805                              <2> 	jmp timerinterrupt
  2806                              <2> prcharint:	
  2807                              <2> prcharq:
  2808                              <2> 	call serial.send
  2809                              <2> 	ret
  2810                              <2> %else
  2811 00002257 38FB                <2> cmp bl, bh
  2812 00002259 740A                <2> je prchar.notimer
  2813 0000225B E80B000000          <2> call prcharint
  2814 00002260 E924E0FFFF          <2> jmp timerinterrupt
  2815                              <2> prchar.notimer:
  2816 00002265 E818000000          <2> 	call prcharq
  2817 0000226A CF                  <2> 	iret
  2818                              <2> 	
  2819                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2820 0000226B 663DFFFE            <2> 	cmp ax, 0xFEFF
  2821 0000226F 740E                <2> 	je .ret
  2822 00002271 39C1                <2> 	cmp ecx, eax
  2823 00002273 740D                <2> 	je prcharq
  2824 00002275 E808000000          <2> 	call prcharq
  2825 0000227A E880030000          <2> 	call termcopy
  2826                              <2> .ret:
  2827 0000227F C3                  <2> 	ret
  2828 00002280 00                  <2> termguion db 0
  2829 00002281 00                  <2> termcopyon db 0
  2830                              <2> prcharq:
  2831 00002282 C1E310              <2> 	shl ebx, 16
  2832 00002285 6689C3              <2> 	mov bx, ax
  2833 00002288 89D8                <2> 	mov eax, ebx
  2834 0000228A A3[77240000]        <2> 	mov [charbuf], eax
  2835 0000228F 8B1D[6F240000]      <2> 	mov ebx, [videobufpos]
  2836 00002295 BF[9DA40300]        <2> 	mov edi, videobuf
  2837 0000229A 01DF                <2> 	add edi, ebx
  2838 0000229C A1[0A260000]        <2> 	mov eax, [removedvideo]
  2839 000022A1 8907                <2> 	mov [edi], eax
  2840 000022A3 A1[77240000]        <2> 	mov eax, [charbuf]
  2841 000022A8 31D2                <2> 	xor edx, edx
  2842 000022AA 668B15[73240000]    <2> 	mov dx, [charpos]
  2843 000022B1 31C9                <2> 	xor ecx, ecx
  2844 000022B3 668B0D[75240000]    <2> 	mov cx, [charxy]
  2845 000022BA 663D0900            <2> 	cmp ax, 9
  2846 000022BE 0F8479000000        <2> 	je near prtab
  2847 000022C4 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2848 000022C8 0F849C000000        <2> 	je near prcr
  2849 000022CE 663D0A00            <2> 	cmp ax, 10
  2850 000022D2 0F84E5000000        <2> 	je near prnlcr
  2851 000022D8 663D0800            <2> 	cmp ax, 8
  2852 000022DC 0F8499000000        <2> 	je near prbs
  2853 000022E2 663DFF00            <2> 	cmp ax, 255		;null character
  2854 000022E6 0F8424000000        <2> 	je near donescr
  2855 000022EC 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2856 000022F0 0F8341000000        <2> 	jae near prnofont
  2857                              <2> donepr:
  2858 000022F6 8907                <2> 	mov [edi], eax
  2859 000022F8 81C704000000        <2> 	add edi, 4
  2860 000022FE FEC2                <2> 	inc dl
  2861                              <2> donecrnl:
  2862 00002300 38CA                <2> 	cmp dl, cl
  2863 00002302 0F83D9000000        <2> 	jae near preol
  2864                              <2> doneeol:
  2865 00002308 38EE                <2> 	cmp dh, ch
  2866 0000230A 0F83EE000000        <2> 	jae near prscr	
  2867                              <2> donescr:
  2868 00002310 89FB                <2> 	mov ebx, edi
  2869 00002312 8B07                <2> 	mov eax, [edi]
  2870 00002314 A3[0A260000]        <2> 	mov [removedvideo], eax
  2871 00002319 81EB[9DA40300]      <2> 	sub ebx, videobuf
  2872 0000231F 891D[6F240000]      <2> 	mov [videobufpos], ebx
  2873 00002325 668915[73240000]    <2> 	mov [charpos], dx
  2874 0000232C A1[77240000]        <2> 	mov eax, [charbuf]
  2875 00002331 89C3                <2> 	mov ebx, eax
  2876 00002333 C1EB10              <2> 	shr ebx, 16
  2877 00002336 C3                  <2> 	ret
  2878                              <2> 	
  2879                              <2> 	prnofont:
  2880 00002337 66B80200            <2> 		mov ax, 2
  2881 0000233B EBB9                <2> 		jmp donepr
  2882                              <2> 	prtab:
  2883 0000233D 8B1D[6B240000]      <2> 		mov ebx, [linebeginpos]
  2884 00002343 81EF[9DA40300]      <2> 		sub edi, videobuf
  2885 00002349 29DF                <2> 		sub edi, ebx
  2886 0000234B C1EF05              <2> 		shr edi, 5
  2887 0000234E C1E705              <2> 		shl edi, 5
  2888 00002351 81C720000000        <2> 		add edi, 32
  2889 00002357 C0EA03              <2> 		shr dl, 3
  2890 0000235A C0E203              <2> 		shl dl, 3
  2891 0000235D 80C208              <2> 		add dl, 8
  2892 00002360 81C7[9DA40300]      <2> 		add edi, videobuf
  2893 00002366 01DF                <2> 		add edi, ebx
  2894 00002368 EB96                <2> 		jmp donecrnl
  2895                              <2> 	
  2896                              <2> 	prcr:
  2897 0000236A 30D2                <2> 		xor dl, dl
  2898 0000236C BF[9DA40300]        <2> 		mov edi, videobuf
  2899 00002371 8B1D[6B240000]      <2> 		mov ebx, [linebeginpos]
  2900 00002377 01DF                <2> 		add edi, ebx
  2901 00002379 EB85                <2> 		jmp donecrnl
  2902                              <2> 			
  2903                              <2> 	prbs:
  2904 0000237B 8B1D[6B240000]      <2> 		mov ebx, [linebeginpos]
  2905 00002381 80FA00              <2> 		cmp dl, 0
  2906 00002384 7415                <2> 		je prbackline
  2907                              <2> 	prnobmr:
  2908 00002386 891D[6B240000]      <2> 		mov [linebeginpos], ebx
  2909 0000238C FECA                <2> 		dec dl
  2910 0000238E 31C0                <2> 		xor eax, eax
  2911 00002390 81EF04000000        <2> 		sub edi, 4
  2912 00002396 E965FFFFFF          <2> 		jmp donecrnl
  2913                              <2> 	prbackline:
  2914 0000239B 6631DB              <2> 		xor bx, bx
  2915 0000239E 88CA                <2> 		mov dl, cl
  2916 000023A0 80FE00              <2> 		cmp dh, 0
  2917 000023A3 74E1                <2> 		je prnobmr
  2918 000023A5 8B1D[6B240000]      <2> 		mov ebx, [linebeginpos]
  2919 000023AB 6651                <2> 		push cx
  2920 000023AD 31C9                <2> 		xor ecx, ecx
  2921 000023AF 8A0C24              <2> 		mov cl, [esp]
  2922 000023B2 C1E102              <2> 		shl ecx, 2
  2923 000023B5 29CB                <2> 		sub ebx, ecx
  2924 000023B7 6659                <2> 		pop cx
  2925 000023B9 FECE                <2> 		dec dh
  2926 000023BB EBC9                <2> 		jmp prnobmr
  2927                              <2> 		
  2928                              <2> 	prnlcr:
  2929 000023BD FEC6                <2> 		inc dh
  2930 000023BF 31DB                <2> 		xor ebx, ebx
  2931 000023C1 30D2                <2> 		xor dl, dl
  2932 000023C3 88CB                <2> 		mov bl, cl
  2933 000023C5 66C1E302            <2> 		shl bx, 2
  2934 000023C9 BF[9DA40300]        <2> 		mov edi, videobuf
  2935 000023CE 031D[6B240000]      <2> 		add ebx, [linebeginpos]
  2936 000023D4 891D[6B240000]      <2> 		mov [linebeginpos], ebx
  2937 000023DA 01DF                <2> 		add edi, ebx
  2938 000023DC E91FFFFFFF          <2> 		jmp donecrnl
  2939                              <2> 		
  2940                              <2> 	preol:
  2941 000023E1 30D2                <2> 		xor dl, dl
  2942 000023E3 FEC6                <2> 		inc dh
  2943 000023E5 31DB                <2> 		xor ebx, ebx
  2944 000023E7 88CB                <2> 		mov bl, cl
  2945 000023E9 66C1E302            <2> 		shl bx, 2
  2946 000023ED 031D[6B240000]      <2> 		add ebx, [linebeginpos]
  2947 000023F3 891D[6B240000]      <2> 		mov [linebeginpos], ebx
  2948 000023F9 E90AFFFFFF          <2> 		jmp doneeol
  2949                              <2> 	prscr:
  2950 000023FE FECE                <2> 		dec dh
  2951 00002400 BF[9DA40300]        <2> 		mov edi, videobuf
  2952 00002405 31DB                <2> 		xor ebx, ebx
  2953 00002407 88CB                <2> 		mov bl, cl
  2954 00002409 66C1E302            <2> 		shl bx, 2
  2955 0000240D 01FB                <2> 		add ebx, edi
  2956                              <2> 	intscrollloop:
  2957 0000240F 8B03                <2> 		mov eax, [ebx]
  2958 00002411 8907                <2> 		mov [edi], eax
  2959 00002413 81C704000000        <2> 		add edi, 4
  2960 00002419 81C304000000        <2> 		add ebx, 4
  2961 0000241F FEC9                <2> 		dec cl
  2962 00002421 80F900              <2> 		cmp cl, 0
  2963 00002424 75E9                <2> 		jne intscrollloop
  2964 00002426 8A0D[75240000]      <2> 		mov cl, [charxy]
  2965 0000242C FECD                <2> 		dec ch
  2966 0000242E 80FD01              <2> 		cmp ch, 1
  2967 00002431 77DC                <2> 		ja intscrollloop
  2968 00002433 31C0                <2> 		xor eax, eax
  2969 00002435 81EF[9DA40300]      <2> 		sub edi, videobuf
  2970 0000243B 893D[6B240000]      <2> 		mov [linebeginpos], edi
  2971 00002441 81C7[9DA40300]      <2> 		add edi, videobuf
  2972 00002447 89FB                <2> 		mov ebx, edi
  2973                              <2> 	intloopclear:
  2974 00002449 8903                <2> 		mov [ebx], eax
  2975 0000244B 81C304000000        <2> 		add ebx, 4
  2976 00002451 FEC9                <2> 		dec cl
  2977 00002453 80F900              <2> 		cmp cl, 0
  2978 00002456 75F1                <2> 		jne intloopclear
  2979 00002458 FECD                <2> 		dec ch
  2980 0000245A 80FD00              <2> 		cmp ch, 0
  2981 0000245D 75EA                <2> 		jne intloopclear
  2982 0000245F 668B0D[75240000]    <2> 		mov cx, [charxy]
  2983 00002466 E9A5FEFFFF          <2> 		jmp donescr
  2984                              <2> 		
  2985 0000246B 00000000            <2> linebeginpos dd 0
  2986 0000246F 00000000            <2> videobufpos: dd 0
  2987 00002473 0000                <2> charpos db 0,0
  2988 00002475 501E                <2> charxy db 80,30
  2989 00002477 00000000            <2> charbuf dd 0
  2990                              <2> %endif
  2991                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2992                              <2> openfile:
  2993 0000247B E8CA360000          <2> 	call loadfile
  2994 00002480 E904DEFFFF          <2> 	jmp timerinterrupt
  2995                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2996                              <2> num2str:
  2997 00002485 3C00                <2> 	cmp al, 0
  2998 00002487 750A                <2> 	jne num2strb
  2999 00002489 E8290B0000          <2> 	call showdec
  3000 0000248E E9F6DDFFFF          <2> 	jmp timerinterrupt
  3001                              <2> num2strb:
  3002 00002493 E8640A0000          <2> 	call showhex
  3003 00002498 E9ECDDFFFF          <2> 	jmp timerinterrupt
  3004                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3005                              <2> str2num:
  3006 0000249D 89F7                <2> 	mov edi, esi
  3007 0000249F E8EE0B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3008 000024A4 E9E0DDFFFF          <2> 	jmp timerinterrupt
  3009                              <2> 	
  3010                              <1> %ifdef threads.included
  3011                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3012                              <2> forkthread:
  3013                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3014                              <2> 			;returns the PID of the new fork in ebx
  3015                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3016 000024A9 FA                  <2> 	cli
  3017 000024AA 60                  <2> 	pushad
  3018 000024AB 8925[78250000]      <2> 	mov [.espold], esp
  3019 000024B1 C605[065D0000]01    <2> 	mov byte [threadson], 1
  3020 000024B8 8B1D[075D0000]      <2> 	mov ebx, [currentthread]
  3021 000024BE C1E302              <2> 	shl ebx, 2
  3022 000024C1 89A3[C11F0400]      <2> 	mov [threadlist + ebx], esp
  3023 000024C7 C1EB02              <2> 	shr ebx, 2
  3024 000024CA 81FB00000000        <2> 	cmp ebx, 0
  3025 000024D0 750C                <2> 	jne .simplestack
  3026 000024D2 BB[00860300]        <2> 	mov ebx, stackend
  3027 000024D7 29E3                <2> 	sub ebx, esp
  3028 000024D9 E90B000000          <2> 	jmp .stackcalcdone
  3029                              <2> .simplestack:
  3030 000024DE C1E30A              <2> 	shl ebx, 10
  3031 000024E1 81C3[C1330400]      <2> 	add ebx, stack1
  3032 000024E7 29E3                <2> 	sub ebx, esp
  3033                              <2> .stackcalcdone:
  3034 000024E9 29DC                <2> 	sub esp, ebx
  3035 000024EB 81C4[C1330400]      <2> 	add esp, stack1
  3036 000024F1 8B1D[025D0000]      <2> 	mov ebx, [lastthread]
  3037 000024F7 C1E308              <2> 	shl ebx, 8
  3038 000024FA 01DC                <2> 	add esp, ebx
  3039 000024FC 891D[7C250000]      <2> 	mov [.stackend], ebx
  3040                              <2> 
  3041 00002502 89E5                <2> 	mov ebp, esp
  3042 00002504 8B25[78250000]      <2> 	mov esp, [.espold]
  3043                              <2> 
  3044 0000250A C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3045 0000250D 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3046                              <2> 
  3047 00002511 31DB                <2> 	xor ebx, ebx
  3048                              <2> .stackcopy:
  3049 00002513 668B041C            <2> 	mov ax, [esp + ebx]
  3050 00002517 6689441D00          <2> 	mov [ebp + ebx], ax
  3051 0000251C 81C302000000        <2> 	add ebx, 2
  3052 00002522 3B1D[7C250000]      <2> 	cmp ebx, [.stackend]
  3053 00002528 72E9                <2> 	jb .stackcopy
  3054                              <2> 
  3055 0000252A 31C0                <2> 	xor eax, eax
  3056 0000252C 668CC8              <2> 	mov ax, cs
  3057 0000252F 89C2                <2> 	mov edx, eax
  3058 00002531 8B4C2428            <2> 	mov ecx, [esp + 40]
  3059 00002535 81C900020000        <2> 	or ecx, 0x200
  3060                              <2> 	
  3061 0000253B 81FE00000000        <2> 	cmp esi, 0
  3062 00002541 7504                <2> 	jne .nochangestack
  3063 00002543 8B742420            <2> 	mov esi, [esp + 32]
  3064                              <2> .nochangestack:
  3065 00002547 89F0                <2> 	mov eax, esi
  3066 00002549 89EC                <2> 	mov esp, ebp
  3067                              <2> 
  3068 0000254B 89442420            <2> 	mov [esp + 32], eax
  3069 0000254F 89542424            <2> 	mov [esp + 36], edx
  3070 00002553 894C2428            <2> 	mov [esp + 40], ecx
  3071                              <2> 
  3072 00002557 8B1D[025D0000]      <2> 	mov ebx, [lastthread]
  3073 0000255D 89A3[C11F0400]      <2> 	mov [threadlist + ebx], esp
  3074 00002563 81C304000000        <2> 	add ebx, 4
  3075 00002569 891D[025D0000]      <2> 	mov [lastthread], ebx
  3076 0000256F 8B25[78250000]      <2> 	mov esp, [.espold]
  3077 00002575 61                  <2> 	popad
  3078 00002576 FB                  <2> 	sti
  3079 00002577 CF                  <2> 	iret
  3080                              <2> 
  3081 00002578 00000000            <2> .espold dd 0
  3082 0000257C 00000000            <2> .stackend dd 0
  3083                              <1> %endif
  3084                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3085                              <2> gettime:
  3086 00002580 A1[42020000]        <2> 	mov eax, [timeseconds]
  3087 00002585 8B1D[46020000]      <2> 	mov ebx, [timenanoseconds]
  3088 0000258B 89D9                <2> 	mov ecx, ebx
  3089 0000258D C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3090 00002590 E9F4DCFFFF          <2> 	jmp timerinterrupt
  3091                              <1> 	%include 'source/interrupts/13_settime.asm'
  3092                              <2> settime:
  3093 00002595 A3[42020000]        <2> 	mov [timeseconds], eax
  3094 0000259A 891D[46020000]      <2> 	mov [timenanoseconds], ebx
  3095 000025A0 E9E4DCFFFF          <2> 	jmp timerinterrupt
  3096                              <2> 	
  3097                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3098                              <2> runcmd:
  3099 000025A5 BF[88A00300]        <2> 	mov edi, buftxt
  3100                              <2> cpcmd:
  3101 000025AA 8A06                <2> 	mov al, [esi]
  3102 000025AC 8807                <2> 	mov [edi], al
  3103 000025AE 46                  <2> 	inc esi
  3104 000025AF 47                  <2> 	inc edi
  3105 000025B0 3C00                <2> 	cmp al, 0
  3106 000025B2 75F6                <2> 	jne cpcmd
  3107 000025B4 E84B060000          <2> 	call run
  3108 000025B9 CF                  <2> 	iret
  3109                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3110                              <2> proginfo:
  3111                              <2> 	;mov ebx, variables
  3112 000025BA 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  3113 000025C0 89F7                <2> 	mov edi, esi
  3114 000025C2 31C9                <2> 	xor ecx, ecx
  3115                              <2> getcommandzeroes:
  3116 000025C4 8A07                <2> 	mov al, [edi]
  3117 000025C6 47                  <2> 	inc edi
  3118 000025C7 3C3B                <2> 	cmp al, ';'
  3119 000025C9 740B                <2> 	je nomorezeroes
  3120 000025CB 3C00                <2> 	cmp al, 0
  3121 000025CD 7407                <2> 	je nomorezeroes
  3122 000025CF 3C20                <2> 	cmp al, ' '
  3123 000025D1 75F1                <2> 	jne getcommandzeroes
  3124 000025D3 41                  <2> 	inc ecx
  3125 000025D4 EBEE                <2> 	jmp getcommandzeroes
  3126                              <2> nomorezeroes:
  3127 000025D6 41                  <2> 	inc ecx
  3128 000025D7 4F                  <2> 	dec edi
  3129 000025D8 8B1D[148C0300]      <2> 	mov ebx, [uid]
  3130 000025DE 8B15[075D0000]      <2> 	mov edx, [currentthread]
  3131 000025E4 CF                  <2> 	iret
  3132                              <2> 	
  3133                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3134                              <2> hooksig: ;hook code in ESI to signal in AL
  3135 000025E5 3C00                <2> 	cmp al, 0
  3136 000025E7 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3137                              <2> ;	xor ebx, ebx
  3138                              <2> ;	mov bl, al
  3139                              <2> ;	shl bl, 2
  3140 000025E9 BF[04860300]        <2> 	mov edi, sigtable
  3141 000025EE 8937                <2> 	mov [edi], esi
  3142                              <2> .quit:
  3143 000025F0 E994DCFFFF          <2> 	jmp timerinterrupt
  3144                              <1> %ifdef gui.included
  3145                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3146                              <1> %endif
  3147                              <1> %ifdef sound.included
  3148                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3149                              <2> soundint:
  3150 000025F5 E98FDCFFFF          <2> 	jmp timerinterrupt
  3151                              <1> %endif
  3152                              <1> %ifdef network.included
  3153                              <1> 	%include 'source/interrupts/19_netint.asm'
  3154                              <2> netint:
  3155 000025FA E98ADCFFFF          <2> 	jmp timerinterrupt
  3156                              <1> %endif
  3157                              <1> 
  3158                              <1> termcopy:
  3159                              <1> %ifdef io.serial
  3160                              <1> 	ret
  3161                              <1> %else
  3162                              <1> %ifdef terminal.vsync
  3163                              <1> 	mov byte [termcopyneeded], 1
  3164                              <1> 	ret
  3165                              <1> %else
  3166 000025FF E80A000000          <1> 	call newtermcopy
  3167 00002604 C3                  <1> 	ret
  3168                              <1> %endif
  3169 00002605 00                  <1> 	termcopyneeded db 0
  3170 00002606 00000000            <1> 	termcursorpos dd 0
  3171 0000260A 00000000            <1> 	removedvideo dd 0
  3172                              <1> newtermcopy:
  3173 0000260E 60                  <1> 	pusha
  3174 0000260F BF[9DA40300]        <1> 	mov edi, videobuf
  3175 00002614 31DB                <1> 	xor ebx, ebx
  3176 00002616 881D[05260000]      <1> 	mov [termcopyneeded], bl
  3177 0000261C 8B1D[6F240000]      <1> 	mov ebx, [videobufpos]
  3178 00002622 01DF                <1> 	add edi, ebx
  3179 00002624 893D[06260000]      <1> 	mov [termcursorpos], edi
  3180 0000262A E8C7000000          <1> 	call switchtermcursor
  3181 0000262F 803D[CF610000]00    <1> 	cmp byte [guion], 0
  3182 00002636 0F8405000000        <1> 	je near nowincopy
  3183                              <1> %ifdef gui.included
  3184                              <1> 	mov byte [mouseselecton], 0
  3185                              <1> 	mov byte [termcopyon], 1
  3186                              <1> 	cmp byte [termguion], 1
  3187                              <1> 	je near windowvideocopy
  3188                              <1> %endif
  3189 0000263C E9AE000000          <1> 	jmp nocopytermatall
  3190                              <1> nowincopy:
  3191 00002641 BE00000A00          <1> 	mov esi, 0xA0000
  3192 00002646 A1[22020000]        <1> 	mov eax, [basecache]
  3193 0000264B C1E004              <1> 	shl eax, 4
  3194 0000264E 29C6                <1> 	sub esi, eax
  3195 00002650 BF[9DA40300]        <1> 	mov edi, videobuf
  3196 00002655 31C9                <1> 	xor ecx, ecx
  3197 00002657 668B0D[75240000]    <1> 	mov cx, [charxy]
  3198                              <1> nowincopy2:
  3199 0000265E 8B07                <1> 	mov eax, [edi]
  3200 00002660 81C780250000        <1> 	add edi, (videobuf2 - videobuf)
  3201 00002666 8B1F                <1> 	mov ebx, [edi]
  3202 00002668 8907                <1> 	mov [edi], eax
  3203 0000266A 81EF80250000        <1> 	sub edi, (videobuf2 - videobuf)
  3204 00002670 81C702000000        <1> 	add edi, 2
  3205 00002676 39D8                <1> 	cmp eax, ebx
  3206 00002678 744B                <1> 	je nopresentwinfont
  3207 0000267A 81EF02000000        <1> 	sub edi, 2
  3208 00002680 BD[29640000]        <1> 	mov ebp, fonts
  3209 00002685 31C0                <1> 	xor eax, eax
  3210 00002687 668B07              <1> 	mov ax, [edi]
  3211 0000268A C1E004              <1> 	shl eax, 4
  3212 0000268D 01C5                <1> 	add ebp, eax
  3213 0000268F 81C702000000        <1> 	add edi, 2
  3214 00002695 668B1F              <1> 	mov bx, [edi]
  3215 00002698 31D2                <1> 	xor edx, edx
  3216 0000269A 8A15[75240000]      <1> 	mov dl, [charxy]
  3217 000026A0 C1C110              <1> 	rol ecx, 16
  3218 000026A3 B110                <1> 	mov cl, 16
  3219                              <1> nowinfont:
  3220 000026A5 8A4500              <1> 	mov al, [ebp]
  3221 000026A8 D0C8                <1> 	ror al, 1
  3222 000026AA 80FB80              <1> 	cmp bl, 0x80
  3223 000026AD 7202                <1> 	jb notnotfont
  3224 000026AF F6D0                <1> 	not al
  3225                              <1> notnotfont:
  3226 000026B1 8806                <1> 	mov [esi], al
  3227 000026B3 01D6                <1> 	add esi, edx
  3228 000026B5 45                  <1> 	inc ebp
  3229 000026B6 FEC9                <1> 	dec cl
  3230 000026B8 80F900              <1> 	cmp cl, 0
  3231 000026BB 75E8                <1> 	jne nowinfont
  3232 000026BD C1E204              <1> 	shl edx, 4
  3233 000026C0 29D6                <1> 	sub esi, edx
  3234 000026C2 C1C110              <1> 	rol ecx, 16
  3235                              <1> nopresentwinfont:
  3236 000026C5 81C702000000        <1> 	add edi, 2
  3237 000026CB 46                  <1> 	inc esi
  3238 000026CC FEC9                <1> 	dec cl
  3239 000026CE 80F900              <1> 	cmp cl, 0
  3240 000026D1 758B                <1> 	jne nowincopy2
  3241 000026D3 8A0D[75240000]      <1> 	mov cl, [charxy]
  3242 000026D9 31D2                <1> 	xor edx, edx
  3243 000026DB 88CA                <1> 	mov dl, cl
  3244 000026DD 29D6                <1> 	sub esi, edx
  3245 000026DF C1E204              <1> 	shl edx, 4
  3246 000026E2 01D6                <1> 	add esi, edx
  3247 000026E4 FECD                <1> 	dec ch
  3248 000026E6 80FD00              <1> 	cmp ch, 0
  3249 000026E9 0F856FFFFFFF        <1> 	jne nowincopy2
  3250                              <1> nocopytermatall:
  3251 000026EF E802000000          <1> 	call switchtermcursor
  3252 000026F4 61                  <1> 	popa
  3253 000026F5 C3                  <1> 	ret
  3254                              <1> 	
  3255                              <1> switchtermcursor:
  3256 000026F6 8B3D[06260000]      <1> 	mov edi, [termcursorpos]
  3257 000026FC 668B4702            <1> 	mov ax, [edi + 2]
  3258 00002700 668B1F              <1> 	mov bx, [edi]
  3259 00002703 663D8000            <1> 	cmp ax, 0x80
  3260 00002707 7209                <1> 	jb movlargecursorterm
  3261 00002709 66B80700            <1> 	mov ax, 7
  3262 0000270D E904000000          <1> 	jmp movedcursorterm
  3263                              <1> movlargecursorterm:
  3264 00002712 66B8F000            <1> 	mov ax, 0xF0
  3265                              <1> movedcursorterm:
  3266 00002716 66894702            <1> 	mov [edi + 2], ax
  3267 0000271A 6681FB0000          <1> 	cmp bx, 0
  3268 0000271F 7507                <1> 	jne fixednocursorterm
  3269 00002721 66BB2000            <1> 	mov bx, ' '
  3270 00002725 66891F              <1> 	mov [edi], bx
  3271                              <1> fixednocursorterm:
  3272 00002728 C3                  <1> 	ret
  3273                              <1> %endif
  3274                                      %include "source/dosints.asm"
  3275                              <1> int20h:
  3276 00002729 66B8004C            <1> mov ax, 0x4C00
  3277                              <1> int21h:
  3278                              <1> dostosolleros:
  3279 0000272D 6650                <1> 	push ax
  3280 0000272F 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3281 00002733 8ED8                <1> 	mov ds, ax
  3282 00002735 8EC0                <1> 	mov es, ax
  3283 00002737 8EE0                <1> 	mov fs, ax
  3284 00002739 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3285 0000273D 8EE8                <1> 	mov gs, ax
  3286 0000273F 6658                <1> 	pop ax
  3287 00002741 9C                  <1> 	pushf
  3288 00002742 60                  <1> 	pusha
  3289 00002743 80FC01              <1> 	cmp ah, 1
  3290 00002746 0F8449000000        <1> 	je near dosgchar
  3291 0000274C 80FC02              <1> 	cmp ah, 2
  3292 0000274F 0F8447000000        <1> 	je near doswchar
  3293 00002755 80FC09              <1> 	cmp ah, 9
  3294 00002758 0F844B000000        <1> 	je near dosprintstr
  3295 0000275E 80FC0A              <1> 	cmp ah, 0xA
  3296 00002761 0F845A000000        <1> 	je near dosgetstr
  3297 00002767 80FC2B              <1> 	cmp ah, 0x2B
  3298 0000276A 0F8496000000        <1> 	je near dosgetdate
  3299 00002770 80FC2C              <1> 	cmp ah, 0x2C
  3300 00002773 0F84B0000000        <1> 	je near dosgettime
  3301 00002779 80FC4C              <1> 	cmp ah, 0x4C
  3302 0000277C 0F84C5000000        <1> 	je near dosexit
  3303                              <1> backtodos:
  3304 00002782 61                  <1> 	popa
  3305 00002783 9D                  <1> 	popf
  3306 00002784 6650                <1> 	push ax
  3307 00002786 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3308 0000278A 8ED8                <1> 	mov ds, ax
  3309 0000278C 8EC0                <1> 	mov es, ax
  3310 0000278E 8EE0                <1> 	mov fs, ax
  3311 00002790 8EE8                <1> 	mov gs, ax
  3312 00002792 6658                <1> 	pop ax
  3313 00002794 CF                  <1> 	iret
  3314                              <1> 
  3315                              <1> dosgchar:
  3316 00002795 E855FAFFFF          <1> 	call getchar
  3317 0000279A EBE6                <1> 	jmp backtodos
  3318                              <1> 	
  3319                              <1> doswchar:
  3320 0000279C 88D0                <1> 	mov al, dl
  3321 0000279E 30E4                <1> 	xor ah, ah
  3322 000027A0 B307                <1> 	mov bl, 7
  3323 000027A2 E8C4FAFFFF          <1> 	call prcharint
  3324 000027A7 EBD9                <1> 	jmp backtodos
  3325                              <1> 	
  3326                              <1> dosprintstr:
  3327 000027A9 31F6                <1> 	xor esi, esi
  3328 000027AB 6689D6              <1> 	mov si, dx
  3329 000027AE 81C600004000        <1> 	add esi, dosprogloc
  3330 000027B4 66B82400            <1> 	mov ax, "$"
  3331 000027B8 B307                <1> 	mov bl, 7
  3332 000027BA E83FF4FFFF          <1> 	call printint
  3333 000027BF EBC1                <1> 	jmp backtodos
  3334                              <1> 	
  3335                              <1> dosgetstr:
  3336 000027C1 31F6                <1> 	xor esi, esi
  3337 000027C3 6689D6              <1> 	mov si, dx
  3338 000027C6 81C600004000        <1> 	add esi, dosprogloc
  3339 000027CC B900000000          <1> 	mov ecx, 0
  3340 000027D1 8A0E                <1> 	mov cl, [esi]
  3341 000027D3 81C602000000        <1> 	add esi, 2
  3342 000027D9 89F7                <1> 	mov edi, esi
  3343 000027DB 8935[02280000]      <1> 	mov [stringstart], esi
  3344 000027E1 01CF                <1> 	add edi, ecx
  3345 000027E3 B00A                <1> 	mov al, 10
  3346 000027E5 B307                <1> 	mov bl, 7
  3347 000027E7 E84FF5FFFF          <1> 	call rdprintdos
  3348 000027EC 89F1                <1> 	mov ecx, esi
  3349 000027EE 2B0D[02280000]      <1> 	sub ecx, [stringstart]
  3350 000027F4 8B35[02280000]      <1> 	mov esi, [stringstart]
  3351 000027FA 884EFF              <1> 	mov [esi - 1], cl
  3352 000027FD 884EFE              <1> 	mov [esi - 2], cl
  3353 00002800 EB80                <1> 	jmp backtodos
  3354 00002802 00000000            <1> stringstart dd 0
  3355                              <1> 
  3356                              <1> dosgetdate:
  3357 00002806 E87A150000          <1> 	call time
  3358 0000280B 8A0D[99400000]      <1> 	mov cl, [RTCtimeYear]
  3359 00002811 B500                <1> 	mov ch, 0
  3360 00002813 6681C1D007          <1> 	add cx, 2000
  3361 00002818 8A35[98400000]      <1> 	mov dh, [RTCtimeMonth]
  3362 0000281E 8A15[97400000]      <1> 	mov dl, [RTCtimeDay]
  3363 00002824 E959FFFFFF          <1> 	jmp backtodos
  3364                              <1> 
  3365                              <1> dosgettime:
  3366 00002829 E857150000          <1> 	call time
  3367 0000282E 8A2D[96400000]      <1> 	mov ch, [RTCtimeHour]
  3368 00002834 8A0D[95400000]      <1> 	mov cl, [RTCtimeMinute]
  3369 0000283A 8A35[94400000]      <1> 	mov dh, [RTCtimeSecond]
  3370 00002840 B200                <1> 	mov dl, 0
  3371 00002842 E93BFFFFFF          <1> 	jmp backtodos
  3372                              <1> 	
  3373                              <1> dosexit:
  3374 00002847 BE[AA610000]        <1> 	mov esi, line
  3375 0000284C E8A6F3FFFF          <1> 	call print
  3376 00002851 61                  <1> 	popa
  3377 00002852 9D                  <1> 	popf
  3378 00002853 8B25[088A0300]      <1> 	mov esp, [previousstack]
  3379 00002859 31DB                <1> 	xor ebx, ebx
  3380 0000285B 88C3                <1> 	mov bl, al
  3381 0000285D 80FB00              <1> 	cmp bl, 0
  3382 00002860 0F8517F3FFFF        <1> 	jne near exitprog.error
  3383 00002866 C3                  <1> 	ret
  3384                                      %include "source/shush.asm"
  3385                              <1> os:
  3386                              <1> setdefenv:
  3387 00002867 C605[148A0300]2F    <1> 	mov byte [currentfolder], '/'
  3388 0000286E C705[108A0300]0100- <1> 	mov dword [currentfolderloc], 1
  3389 00002876 0000                <1>
  3390 00002878 E826F4FFFF          <1> 	call clear
  3391                              <1> 	
  3392                              <1> bootfilecheck:
  3393 0000287D 803D[188C0300]01    <1> 	cmp byte [ranboot], 1
  3394 00002884 0F8421000000        <1> 	je near nobootfile
  3395                              <1> 	%ifdef hardware.automatic
  3396 0000288A E86A2E0000          <1> 		call initializelater ;Initialize components that have debug messages
  3397                              <1> 	%endif
  3398                              <1> 	%ifdef disk.none
  3399                              <1> 	%else
  3400 0000288F BF[69610000]        <1> 		mov edi, bootfilename
  3401 00002894 BE00004000          <1> 		mov esi, 0x400000
  3402 00002899 E8AC320000          <1> 		call loadfile
  3403 0000289E 81FA00000000        <1> 		cmp edx, 0
  3404 000028A4 7505                <1> 		jne nobootfile
  3405 000028A6 E8BA0D0000          <1> 		call progbatchfound
  3406                              <1> 	%endif
  3407                              <1> nobootfile:	
  3408 000028AB C605[188C0300]01    <1> 	mov byte [ranboot], 1
  3409                              <1> 
  3410 000028B2 BE[02000000]        <1> 	mov esi, signature
  3411                              <1> .sigcopyloop:	;this prevents an odd error
  3412 000028B7 658A06              <1> 	mov al, [gs:esi]
  3413 000028BA 8806                <1> 	mov [esi], al
  3414 000028BC 46                  <1> 	inc esi
  3415 000028BD 81FE[10000000]      <1> 	cmp esi, signatureend
  3416 000028C3 72F2                <1> 	jb .sigcopyloop
  3417                              <1> 	
  3418 000028C5 BE[02000000]        <1> 	mov esi, signature
  3419 000028CA E828F3FFFF          <1> 	call print
  3420 000028CF 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3421 000028D5 E8DD060000          <1> 	call showdec
  3422 000028DA E813F3FFFF          <1> 	call printline
  3423 000028DF BE[86610000]        <1> 	mov esi, userask
  3424 000028E4 E80EF3FFFF          <1> 	call print
  3425                              <1> 
  3426                              <1> usercheck:
  3427 000028E9 BE[88A00300]        <1> 	mov esi, buftxt
  3428 000028EE BF[88A40300]        <1> 	mov edi, buftxtend
  3429 000028F3 B00A                <1> 	mov al, 10
  3430 000028F5 E82DF4FFFF          <1> 	call rdprint
  3431 000028FA 56                  <1> 	push esi
  3432 000028FB BE[90610000]        <1> 	mov esi, pwdask
  3433 00002900 E8F2F2FFFF          <1> 	call print
  3434 00002905 5E                  <1> 	pop esi
  3435 00002906 46                  <1> 	inc esi
  3436 00002907 8935[FC290000]      <1> 	mov [esipass], esi
  3437                              <1> passcheck:
  3438 0000290D E8DDF8FFFF          <1> 	call getchar
  3439 00002912 3C0A                <1> 	cmp al, 10
  3440 00002914 0F8438000000        <1> 	je near gotpass
  3441 0000291A 3C08                <1> 	cmp al, 8
  3442 0000291C 0F8412000000        <1> 	je near backpass
  3443 00002922 8806                <1> 	mov [esi], al
  3444 00002924 46                  <1> 	inc esi
  3445 00002925 30E4                <1> 	xor ah, ah
  3446 00002927 B02A                <1> 	mov al, "*"
  3447 00002929 E83DF9FFFF          <1> 	call prcharint
  3448 0000292E EBDD                <1> 	jmp passcheck
  3449 00002930 08200800            <1> backcursor2 db 8," ",8,0
  3450                              <1> backpass:
  3451 00002934 3B35[FC290000]      <1> 	cmp esi, [esipass]
  3452 0000293A 0F84CDFFFFFF        <1> 	je near passcheck
  3453 00002940 4E                  <1> 	dec esi
  3454 00002941 C60600              <1> 	mov byte [esi], 0
  3455 00002944 56                  <1> 	push esi
  3456 00002945 BE[30290000]        <1> 	mov esi, backcursor2
  3457 0000294A E8A8F2FFFF          <1> 	call print
  3458 0000294F 5E                  <1> 	pop esi
  3459 00002950 EBBB                <1> 	jmp passcheck
  3460                              <1> gotpass:
  3461 00002952 B00A                <1> 	mov al, 10
  3462 00002954 E812F9FFFF          <1> 	call prcharint
  3463 00002959 30C0                <1> 	xor al, al
  3464 0000295B 31C9                <1> 	xor ecx, ecx
  3465 0000295D 8806                <1> 	mov [esi], al
  3466 0000295F BB[AC610000]        <1> 	mov ebx, userlst
  3467                              <1> userfind:
  3468 00002964 BE[88A00300]        <1> 	mov esi, buftxt
  3469 00002969 8A06                <1> 	mov al, [esi]
  3470 0000296B 3C00                <1> 	cmp al, 0
  3471 0000296D 0F84F4FEFFFF        <1> 	je near os
  3472 00002973 891D[002A0000]      <1> 	mov [usercache], ebx
  3473 00002979 E860030000          <1> 	call tester
  3474 0000297E 3C01                <1> 	cmp al, 1
  3475 00002980 7416                <1> 	je pwdtest
  3476 00002982 41                  <1> 	inc ecx
  3477                              <1> nxtuser:
  3478 00002983 8A03                <1> 	mov al, [ebx]
  3479 00002985 43                  <1> 	inc ebx
  3480 00002986 3C00                <1> 	cmp al, 0
  3481 00002988 75F9                <1> 	jne nxtuser
  3482 0000298A 81FB[CF610000]      <1> 	cmp ebx, userlstend
  3483 00002990 0F83D1FEFFFF        <1> 	jae near os
  3484 00002996 EBCC                <1> 	jmp userfind
  3485                              <1> pwdtest:
  3486 00002998 46                  <1> 	inc esi
  3487 00002999 43                  <1> 	inc ebx
  3488 0000299A E83F030000          <1> 	call tester
  3489 0000299F 3C01                <1> 	cmp al, 1
  3490 000029A1 7402                <1> 	je pwdrgt
  3491 000029A3 EBDE                <1> 	jmp nxtuser
  3492                              <1> pwdrgt:
  3493 000029A5 D1E9                <1> 	shr ecx, 1
  3494 000029A7 890D[148C0300]      <1> 	mov [uid], ecx
  3495 000029AD E8F1F2FFFF          <1> 	call clear
  3496 000029B2 31C9                <1> 	xor ecx, ecx
  3497 000029B4 41                  <1> 	inc ecx
  3498 000029B5 890D[A1EF0300]      <1> 	mov [commandbufpos], ecx
  3499                              <1> returnfromexp:
  3500 000029BB 66B90002            <1> 	mov cx, 200h
  3501 000029BF BE[88A00300]        <1> 	mov esi, buftxt
  3502 000029C4 8935[DA2C0000]      <1> 	mov [currentcommandloc], esi
  3503 000029CA E825000000          <1> 	call bufclr
  3504                              <1> clearolddata:
  3505 000029CF 31C0                <1> 	xor eax, eax
  3506 000029D1 A2[198C0300]        <1> 	mov [IFON], al
  3507 000029D6 A2[1A8C0300]        <1> 	mov [IFTRUE], al
  3508 000029DB A2[828C0300]        <1> 	mov [BATCHISON], al
  3509 000029E0 A3[7E8C0300]        <1> 	mov [BATCHPOS], eax
  3510 000029E5 A2[838C0300]        <1> 	mov [LOOPON], al
  3511 000029EA A3[848C0300]        <1> 	mov [LOOPPOS], eax
  3512 000029EF E933000000          <1> 	jmp nwcmd
  3513                              <1> bufclr:	
  3514 000029F4 30C0                <1> 	xor al, al
  3515 000029F6 8806                <1> 	mov [esi], al
  3516 000029F8 46                  <1> 	inc esi
  3517 000029F9 E2F9                <1> 	loop bufclr
  3518 000029FB C3                  <1> 	ret
  3519                              <1> 
  3520 000029FC 00000000            <1> esipass dd 0
  3521 00002A00 [AC610000]          <1> usercache dd userlst
  3522                              <1> 	
  3523                              <1> buftxtclear:
  3524 00002A04 30C0                <1> 	xor al, al
  3525 00002A06 BE[88A00300]        <1> 	mov esi, buftxt
  3526 00002A0B 81FE[88A40300]      <1> clearbuftxt: cmp esi, buf2
  3527 00002A11 730E                <1> 	jae retbufclr
  3528 00002A13 8806                <1> 	mov [esi], al
  3529 00002A15 46                  <1> 	inc esi
  3530 00002A16 EBF3                <1> 	jmp clearbuftxt
  3531                              <1> 
  3532 00002A18 39DE                <1> clearitbuf: cmp esi, ebx
  3533 00002A1A 7305                <1> 	jae retbufclr
  3534 00002A1C 8806                <1> 	mov [esi], al
  3535 00002A1E 46                  <1> 	inc esi
  3536 00002A1F EBF7                <1> 	jmp clearitbuf
  3537 00002A21 C3                  <1> retbufclr: ret
  3538                              <1> 
  3539 00002A22 E900000000          <1> full:	jmp nwcmd
  3540                              <1> 
  3541                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3542                              <1> nwcmd:
  3543 00002A27 FB                  <1> 	sti
  3544 00002A28 31C0                <1> 	xor eax, eax
  3545 00002A2A 3905[FC2B0000]      <1> 	cmp [nextcommandloc], eax
  3546 00002A30 7413                <1> 	je nomultiplecommand
  3547 00002A32 8B35[FC2B0000]      <1> 	mov esi, [nextcommandloc]
  3548 00002A38 8935[002C0000]      <1> 	mov [thiscommandloc], esi
  3549 00002A3E E8C6010000          <1> 	call fixvariables
  3550 00002A43 EBE2                <1> 	jmp nwcmd
  3551                              <1> nomultiplecommand:
  3552 00002A45 A3[002C0000]        <1> 	mov [thiscommandloc], eax
  3553 00002A4A 3805[065D0000]      <1> 	cmp [threadson], al
  3554 00002A50 7405                <1> 	je noclinwcmd
  3555 00002A52 A2[065D0000]        <1> 	mov [threadson], al
  3556                              <1> noclinwcmd:
  3557 00002A57 B001                <1> 	mov al, 1
  3558 00002A59 3805[828C0300]      <1> 	cmp [BATCHISON], al
  3559 00002A5F 7501                <1> 	jne cancel
  3560 00002A61 C3                  <1> 	ret
  3561 00002A62 30C0                <1> cancel:	xor al, al
  3562 00002A64 A2[198C0300]        <1> 	mov [IFON], al
  3563 00002A69 A2[828C0300]        <1> 	mov [BATCHISON], al
  3564 00002A6E B05B                <1> 	mov al, '['
  3565 00002A70 66BB0700            <1> 	mov bx, 7
  3566 00002A74 E809F8FFFF          <1> 	call prcharq
  3567 00002A79 8B35[002A0000]      <1> 	mov esi, [usercache]
  3568 00002A7F E84FF1FFFF          <1> 	call printquiet
  3569 00002A84 BE[9A610000]        <1> 	mov esi, computer
  3570 00002A89 E845F1FFFF          <1> 	call printquiet
  3571 00002A8E BE[148A0300]        <1> 	mov esi, currentfolder
  3572 00002A93 0335[0C8A0300]      <1> 	add esi, [lastfolderloc]
  3573 00002A99 E835F1FFFF          <1> 	call printquiet
  3574 00002A9E BE[A5610000]        <1> 	mov esi, endprompt
  3575 00002AA3 E84FF1FFFF          <1> 	call print
  3576 00002AA8 E857FFFFFF          <1> 	call buftxtclear
  3577 00002AAD BE[88A00300]        <1> 	mov esi, buftxt
  3578 00002AB2 C605[D8210000]01    <1> 	mov byte [commandedit], 1
  3579 00002AB9 B00A                <1> 	mov al, 10
  3580 00002ABB 66BB0700            <1> 	mov bx, 7
  3581 00002ABF BF[88A40300]        <1> 	mov edi, buftxtend
  3582 00002AC4 E85EF2FFFF          <1> 	call rdprint
  3583 00002AC9 C605[D8210000]00    <1> 	mov byte [commandedit], 0
  3584 00002AD0 803D[88A00300]00    <1> 	cmp byte [buftxt], 0
  3585 00002AD7 0F844AFFFFFF        <1> 	je near nwcmd
  3586 00002ADD 8B35[A1EF0300]      <1> gotcmd:	mov esi, [commandbufpos]
  3587 00002AE3 8935[9DEF0300]      <1> 	mov [lastcommandpos], esi
  3588 00002AE9 FF05[A9EF0300]      <1> 	inc dword [commandsentered]
  3589 00002AEF BF[88A00300]        <1> 	mov edi, buftxt
  3590 00002AF4 81C6[ADEF0300]      <1> 	add esi, commandbuf
  3591 00002AFA 81FE[ADFF0300]      <1> 	cmp esi, commandbufend
  3592 00002B00 7605                <1> 	jbe copycommand
  3593 00002B02 BE[ADEF0300]        <1> 	mov esi, commandbuf
  3594                              <1> copycommand:
  3595 00002B07 8A07                <1> 	mov al, [edi]
  3596 00002B09 8806                <1> 	mov [esi], al
  3597 00002B0B 47                  <1> 	inc edi
  3598 00002B0C 46                  <1> 	inc esi
  3599 00002B0D 3C00                <1> 	cmp al, 0
  3600 00002B0F 740F                <1> 	je donecopy
  3601 00002B11 81FE[ADFF0300]      <1> 	cmp esi, commandbufend
  3602 00002B17 76EE                <1> 	jbe copycommand
  3603 00002B19 BE[ADEF0300]        <1> 	mov esi, commandbuf
  3604 00002B1E EBE7                <1> 	jmp copycommand
  3605                              <1> donecopy:
  3606 00002B20 81EE[ADEF0300]      <1> 	sub esi, commandbuf
  3607 00002B26 8935[A1EF0300]      <1> 	mov [commandbufpos], esi
  3608 00002B2C E8D3000000          <1> 	call run
  3609 00002B31 E9F1FEFFFF          <1> 	jmp nwcmd
  3610                              <1> 
  3611 00002B36 E8C9FEFFFF          <1> input:	call buftxtclear
  3612 00002B3B BE[88A00300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3613 00002B40 BF[88A40300]        <1> 	mov edi, buftxtend
  3614 00002B45 B00A                <1> stdin:	mov al, 10
  3615 00002B47 B307                <1> 	mov bl, 7
  3616 00002B49 E8D9F1FFFF          <1> 	call rdprint
  3617 00002B4E C3                  <1> 	ret
  3618                              <1> 
  3619                              <1> replacevariable:
  3620 00002B4F 8A4601              <1> 	mov al, [esi + 1]
  3621 00002B52 C64601FF            <1> 	mov byte [esi + 1], 255
  3622 00002B56 3C24                <1> 	cmp al, "$"
  3623 00002B58 0F84AB000000        <1> 	je near fixvariables
  3624 00002B5E 884601              <1> 	mov [esi + 1], al
  3625 00002B61 56                  <1> 	push esi
  3626 00002B62 81EE[88A00300]      <1> 	sub esi, buftxt
  3627 00002B68 89F7                <1> 	mov edi, esi
  3628 00002B6A 81C6[88A00300]      <1> 	add esi, buftxt
  3629 00002B70 47                  <1> 	inc edi
  3630 00002B71 BB[888C0300]        <1> 	mov ebx, variables
  3631 00002B76 E8EF180000          <1> 	call nxtvrech
  3632 00002B7B 89F7                <1> 	mov edi, esi
  3633 00002B7D 31DB                <1> 	xor ebx, ebx
  3634 00002B7F 4E                  <1> 	dec esi
  3635                              <1> findvarname:
  3636 00002B80 4E                  <1> 	dec esi
  3637 00002B81 8A06                <1> 	mov al, [esi]
  3638 00002B83 43                  <1> 	inc ebx
  3639 00002B84 3C04                <1> 	cmp al, 4
  3640 00002B86 75F8                <1> 	jne findvarname
  3641 00002B88 5E                  <1> 	pop esi
  3642                              <1> replacevarloop:
  3643 00002B89 8A07                <1> 	mov al, [edi]
  3644 00002B8B 3C00                <1> 	cmp al, 0
  3645 00002B8D 0F8413000000        <1> 	je near compressbuftxt
  3646 00002B93 81FB00000000        <1> 	cmp ebx, 0
  3647 00002B99 0F8416000000        <1> 	je near expandbuftxt
  3648 00002B9F 8806                <1> 	mov [esi], al
  3649 00002BA1 4B                  <1> 	dec ebx
  3650 00002BA2 46                  <1> 	inc esi
  3651 00002BA3 47                  <1> 	inc edi
  3652 00002BA4 EBE3                <1> 	jmp replacevarloop
  3653                              <1> compressbuftxt:
  3654 00002BA6 8A041E              <1> 	mov al, [esi + ebx]
  3655 00002BA9 8806                <1> 	mov [esi], al
  3656 00002BAB 46                  <1> 	inc esi
  3657 00002BAC 3C00                <1> 	cmp al, 0
  3658 00002BAE 75F6                <1> 	jne compressbuftxt
  3659 00002BB0 E954000000          <1> 	jmp fixvariables
  3660                              <1> expandbuftxt:
  3661 00002BB5 89F1                <1> 	mov ecx, esi
  3662 00002BB7 8A26                <1> 	mov ah, [esi]
  3663                              <1> expandbuftxtlp:
  3664 00002BB9 8A1E                <1> 	mov bl, [esi]
  3665 00002BBB 46                  <1> 	inc esi
  3666 00002BBC 8A3E                <1> 	mov bh, [esi]
  3667 00002BBE 8826                <1> 	mov [esi], ah
  3668 00002BC0 88FC                <1> 	mov ah, bh
  3669 00002BC2 80FB00              <1> 	cmp bl, 0
  3670 00002BC5 75F2                <1> 	jne expandbuftxtlp
  3671 00002BC7 89CE                <1> 	mov esi, ecx
  3672 00002BC9 8806                <1> 	mov [esi], al
  3673 00002BCB 47                  <1> 	inc edi
  3674 00002BCC 8A07                <1> 	mov al, [edi]
  3675 00002BCE 3C00                <1> 	cmp al, 0
  3676 00002BD0 0F8433000000        <1> 	je near fixvariables
  3677 00002BD6 46                  <1> 	inc esi
  3678 00002BD7 EBDC                <1> 	jmp expandbuftxt
  3679                              <1> multipleprogline:
  3680 00002BD9 30E4                <1> 	xor ah, ah
  3681 00002BDB 8826                <1> 	mov [esi], ah
  3682 00002BDD 46                  <1> 	inc esi
  3683 00002BDE 8935[FC2B0000]      <1> 	mov [nextcommandloc], esi
  3684 00002BE4 E93E000000          <1> 	jmp donefixvariables
  3685                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3686 00002BE9 46                  <1> 	inc esi
  3687 00002BEA 8A06                <1> 	mov al, [esi]
  3688 00002BEC C606FF              <1> 	mov byte [esi], 255
  3689 00002BEF 3C23                <1> 	cmp al, '#'
  3690 00002BF1 7416                <1> 	je fixvariables
  3691 00002BF3 4E                  <1> 	dec esi
  3692 00002BF4 C60600              <1> 	mov byte [esi], 0
  3693 00002BF7 E90D000000          <1> 	jmp fixvariables
  3694                              <1> 	
  3695 00002BFC 00000000            <1> nextcommandloc dd 0
  3696 00002C00 00000000            <1> thiscommandloc dd 0	
  3697                              <1> run:
  3698 00002C04 BE[88A00300]        <1> 	mov esi, buftxt
  3699                              <1> fixvariables:
  3700 00002C09 46                  <1> 	inc esi
  3701 00002C0A 8A06                <1> 	mov al, [esi]
  3702 00002C0C 3C23                <1> 	cmp al, '#'	;inline comment
  3703 00002C0E 74D9                <1> 	je inlinecomment
  3704 00002C10 3C24                <1> 	cmp al, '$' ;variable
  3705 00002C12 0F8437FFFFFF        <1> 	je near replacevariable
  3706 00002C18 3C3B                <1> 	cmp al, ';' ;program list
  3707 00002C1A 74BD                <1> 	je multipleprogline
  3708 00002C1C 3C00                <1> 	cmp al, 0
  3709 00002C1E 75E9                <1> 	jne fixvariables
  3710 00002C20 31C0                <1> 	xor eax, eax
  3711 00002C22 A3[FC2B0000]        <1> 	mov [nextcommandloc], eax
  3712                              <1> donefixvariables:
  3713 00002C27 803D[E4310000]00    <1> 	cmp byte [indexdone], 0
  3714 00002C2E 7505                <1> 	jne progtest
  3715 00002C30 E81A050000          <1> 	call indexfiles
  3716                              <1> progtest:
  3717 00002C35 31C0                <1> 	xor eax, eax
  3718 00002C37 BB[08860300]        <1> 	mov ebx, fileindex
  3719 00002C3C 668B03              <1> prgnxt:	mov ax, [ebx]
  3720 00002C3F B1FF                <1> 	mov cl, 255
  3721 00002C41 B52C                <1> 	mov ch, 44
  3722 00002C43 6639C8              <1> 	cmp ax, cx
  3723 00002C46 740B                <1> 	je fndprg
  3724 00002C48 43                  <1> 	inc ebx
  3725 00002C49 81FB[088A0300]      <1> 	cmp ebx, fileindexend
  3726 00002C4F 735D                <1> 	jae prgnf
  3727 00002C51 EBE9                <1> 	jmp prgnxt
  3728 00002C53 81C302000000        <1> fndprg: add ebx, 2
  3729 00002C59 31C9                <1> 	xor ecx, ecx
  3730 00002C5B BE[88A00300]        <1> 	mov esi, buftxt
  3731 00002C60 390D[002C0000]      <1> 	cmp [thiscommandloc], ecx
  3732 00002C66 7406                <1> 	je noprgtstmultiple
  3733 00002C68 8B35[002C0000]      <1> 	mov esi, [thiscommandloc]
  3734                              <1> noprgtstmultiple:
  3735 00002C6E E8A6000000          <1> 	call cndtest
  3736 00002C73 3C01                <1> 	cmp al, 1
  3737 00002C75 7302                <1> 	jae prggood
  3738 00002C77 EBC3                <1> 	jmp prgnxt
  3739 00002C79 81FB[088A0300]      <1> prggood: cmp ebx, fileindexend
  3740 00002C7F 7358                <1> 	jae prgdn
  3741 00002C81 31C0                <1> 	xor eax, eax
  3742 00002C83 BE[88A00300]        <1> 	mov esi, buftxt
  3743 00002C88 3905[002C0000]      <1> 	cmp [thiscommandloc], eax
  3744 00002C8E 7406                <1> 	je noprggoodmul
  3745 00002C90 8B35[002C0000]      <1> 	mov esi, [thiscommandloc]
  3746                              <1> noprggoodmul:
  3747 00002C96 8935[DA2C0000]      <1> 	mov [currentcommandloc], esi
  3748 00002C9C 81C303000000        <1> 	add ebx, 3
  3749 00002CA2 8B3B                <1> 	mov edi, [ebx]
  3750 00002CA4 C605[065D0000]02    <1> 	mov byte [threadson], 2
  3751 00002CAB FFD7                <1> 	call edi
  3752 00002CAD C3                  <1> 	ret
  3753                              <1> prgnf:	
  3754 00002CAE 8B35[DA2C0000]      <1> 	mov esi, [currentcommandloc]
  3755 00002CB4 8A06                <1> 	mov al, [esi]
  3756 00002CB6 3C00                <1> 	cmp al, 0
  3757 00002CB8 741F                <1> 	je prgdn
  3758 00002CBA BE[71610000]        <1> 	mov esi, notfound1
  3759 00002CBF E833EFFFFF          <1> 	call print
  3760 00002CC4 8B35[DA2C0000]      <1> 	mov esi, [currentcommandloc]
  3761 00002CCA E828EFFFFF          <1> 	call print
  3762 00002CCF BE[79610000]        <1> 	mov esi, notfound2
  3763 00002CD4 E81EEFFFFF          <1> 	call print
  3764 00002CD9 C3                  <1> prgdn:	ret
  3765                              <1> 
  3766 00002CDA 00000000            <1> currentcommandloc dd 0
  3767                              <1> 
  3768                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3769 00002CDE 6631C0              <1> 	xor ax, ax
  3770 00002CE1 8A06                <1> retest:	mov al, [esi]
  3771 00002CE3 8A23                <1> 	mov ah, [ebx]
  3772 00002CE5 3C00                <1> 	cmp al, 0
  3773 00002CE7 7408                <1> 	je testtrue
  3774 00002CE9 38E0                <1> 	cmp al, ah
  3775 00002CEB 750C                <1> 	jne testfalse
  3776 00002CED 43                  <1> 	inc ebx
  3777 00002CEE 46                  <1> 	inc esi
  3778 00002CEF EBF0                <1> 	jmp retest
  3779                              <1> testtrue:
  3780 00002CF1 80FC00              <1> 	cmp ah, 0
  3781 00002CF4 7503                <1> 	jne testfalse
  3782 00002CF6 B001                <1> 	mov al, 1
  3783 00002CF8 C3                  <1> 	ret
  3784                              <1> testfalse:
  3785 00002CF9 30C0                <1> 	xor al, al
  3786 00002CFB C3                  <1> 	ret
  3787                              <1> 
  3788                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3789 00002CFC 30C0                <1> 	xor al, al
  3790                              <1> opretest:
  3791 00002CFE 8A06                <1> 	mov al, [esi]
  3792 00002D00 8A23                <1> 	mov ah, [ebx]
  3793 00002D02 38E0                <1> 	cmp al, ah
  3794 00002D04 7510                <1> 	jne optestfalse
  3795 00002D06 80FC00              <1> 	cmp ah, 0
  3796 00002D09 7404                <1> 	je optesttrue
  3797 00002D0B 43                  <1> 	inc ebx
  3798 00002D0C 46                  <1> 	inc esi
  3799 00002D0D EBEF                <1> 	jmp opretest
  3800                              <1> optesttrue:
  3801 00002D0F 3C00                <1> 	cmp al, 0
  3802 00002D11 7503                <1> 	jne optestfalse
  3803 00002D13 B001                <1> 	mov al, 1
  3804 00002D15 C3                  <1> 	ret
  3805                              <1> optestfalse:
  3806 00002D16 30C0                <1> 	xor al, al
  3807 00002D18 C3                  <1> 	ret
  3808                              <1> 
  3809                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3810 00002D19 30C0                <1> 	xor al, al
  3811 00002D1B 8A06                <1> cndretest:	mov al, [esi]
  3812 00002D1D 8A23                <1> 	mov ah, [ebx]
  3813 00002D1F 38CC                <1> 	cmp ah, cl
  3814 00002D21 7408                <1> 	je cndtesttrue
  3815 00002D23 38E0                <1> 	cmp al, ah
  3816 00002D25 750B                <1> 	jne cndtestfalse
  3817 00002D27 43                  <1> 	inc ebx
  3818 00002D28 46                  <1> 	inc esi
  3819 00002D29 EBF0                <1> 	jmp cndretest
  3820                              <1> cndtesttrue:
  3821 00002D2B 38C8                <1> 	cmp al, cl
  3822 00002D2D 7506                <1> 	jne cndtestalmost
  3823 00002D2F B001                <1> 	mov al, 1
  3824 00002D31 C3                  <1> 	ret
  3825                              <1> cndtestfalse:
  3826 00002D32 30C0                <1> 	xor al, al
  3827 00002D34 C3                  <1> 	ret
  3828                              <1> cndtestalmost:
  3829 00002D35 B002                <1> 	mov al, 2
  3830 00002D37 C3                  <1> 	ret
  3831                              <1> 	
  3832                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3833                              <1> 		                ;ends if array seperator is found backwards after 0
  3834                              <1> 	arnxt:	      
  3835 00002D38 88E8                <1> 		mov al, ch
  3836 00002D3A 88CC                <1> 		mov ah, cl        
  3837 00002D3C 663906              <1> 		cmp [esi], ax
  3838 00002D3F 7448                <1> 		je ardn
  3839 00002D41 66390E              <1> 		cmp [esi], cx
  3840 00002D44 7407                <1> 		je arfnd
  3841 00002D46 46                  <1> 		inc esi
  3842 00002D47 39DE                <1> 		cmp esi, ebx
  3843 00002D49 733E                <1> 		jae ardn
  3844 00002D4B EBEB                <1> 		jmp arnxt
  3845 00002D4D 81C602000000        <1> 	arfnd: add esi, 2
  3846 00002D53 891D[8A2D0000]      <1> 		mov [arbx], ebx
  3847 00002D59 890D[8E2D0000]      <1> 		mov [arcx], ecx
  3848 00002D5F E893EEFFFF          <1> 		call print
  3849 00002D64 8935[902D0000]      <1> 		mov [arsi], esi
  3850 00002D6A E883EEFFFF          <1> 		call printline
  3851 00002D6F 8B1D[8A2D0000]      <1> 		mov ebx, [arbx]
  3852 00002D75 668B0D[8E2D0000]    <1> 		mov cx, [arcx]
  3853 00002D7C 8B35[902D0000]      <1> 		mov esi, [arsi]
  3854 00002D82 46                  <1> 		inc esi
  3855 00002D83 39DE                <1> 		cmp esi, ebx
  3856 00002D85 7302                <1> 		jae ardn
  3857 00002D87 EBAF                <1> 		jmp arnxt
  3858 00002D89 C3                  <1> 	ardn:	ret
  3859 00002D8A 00000000            <1> arbx:	dw 0,0
  3860 00002D8E 0000                <1> arcx:	db 0,0
  3861 00002D90 00000000            <1> arsi:	dw 0,0
  3862                              <1> 
  3863                              <1> clearbuffer:
  3864 00002D94 BE[88A40300]        <1> 	mov esi, buf2
  3865 00002D99 B030                <1> 	mov al, '0'
  3866 00002D9B 81FE[9CA40300]      <1> clearbuf: cmp esi, numbuf
  3867 00002DA1 7305                <1> 	jae doneclearbuff
  3868 00002DA3 8806                <1> 	mov [esi], al
  3869 00002DA5 46                  <1> 	inc esi
  3870 00002DA6 EBF3                <1> 	jmp clearbuf
  3871                              <1> doneclearbuff: 
  3872 00002DA8 C3                  <1> 		ret
  3873                              <1> 
  3874                              <1> convert:
  3875 00002DA9 4E                  <1> 	dec esi
  3876 00002DAA 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3877                              <1> .lp:
  3878 00002DAC 89DE                <1> 	mov esi, ebx
  3879 00002DAE 81EE09000000        <1> 	sub esi, 9
  3880 00002DB4 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3881 00002DBA 720A                <1> 	jb .8
  3882 00002DBC 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3883 00002DC2 FE06                <1> 	inc byte [esi]
  3884 00002DC4 EBE6                <1> 	jmp .lp
  3885 00002DC6 46                  <1> .8:	inc esi
  3886 00002DC7 81F900E1F505        <1> 	cmp ecx, 100000000
  3887 00002DCD 720A                <1> 	jb .7
  3888 00002DCF 81E900E1F505        <1> 	sub ecx, 100000000
  3889 00002DD5 FE06                <1> 	inc byte [esi]
  3890 00002DD7 EBD3                <1> 	jmp .lp
  3891 00002DD9 46                  <1> .7:	inc esi
  3892 00002DDA 81F980969800        <1> 	cmp ecx, 10000000
  3893 00002DE0 720A                <1> 	jb .6
  3894 00002DE2 81E980969800        <1> 	sub ecx, 10000000
  3895 00002DE8 FE06                <1> 	inc byte [esi]
  3896 00002DEA EBC0                <1> 	jmp .lp
  3897 00002DEC 46                  <1> .6:	inc esi
  3898 00002DED 81F940420F00        <1> 	cmp ecx, 1000000
  3899 00002DF3 720A                <1> 	jb .5
  3900 00002DF5 81E940420F00        <1> 	sub ecx, 1000000
  3901 00002DFB FE06                <1> 	inc byte [esi]
  3902 00002DFD EBAD                <1> 	jmp .lp
  3903 00002DFF 46                  <1> .5:	inc esi
  3904 00002E00 81F9A0860100        <1> 	cmp ecx, 100000
  3905 00002E06 720A                <1> 	jb .4
  3906 00002E08 81E9A0860100        <1> 	sub ecx, 100000
  3907 00002E0E FE06                <1> 	inc byte [esi]
  3908 00002E10 EB9A                <1> 	jmp .lp
  3909 00002E12 46                  <1> .4:	inc esi
  3910 00002E13 81F910270000        <1> 	cmp ecx, 10000
  3911 00002E19 720A                <1> 	jb .3
  3912 00002E1B 81E910270000        <1> 	sub ecx, 10000
  3913 00002E21 FE06                <1> 	inc byte [esi]
  3914 00002E23 EB87                <1> 	jmp .lp
  3915 00002E25 46                  <1> .3:	inc esi
  3916 00002E26 81F9E8030000        <1> 	cmp ecx, 1000
  3917 00002E2C 720D                <1> 	jb .2
  3918 00002E2E 81E9E8030000        <1> 	sub ecx, 1000
  3919 00002E34 FE06                <1> 	inc byte [esi]
  3920 00002E36 E971FFFFFF          <1> 	jmp .lp
  3921 00002E3B 46                  <1> .2:	inc esi
  3922 00002E3C 81F964000000        <1> 	cmp ecx, 100
  3923 00002E42 720D                <1> 	jb .1
  3924 00002E44 81E964000000        <1> 	sub ecx, 100
  3925 00002E4A FE06                <1> 	inc byte [esi]
  3926 00002E4C E95BFFFFFF          <1> 	jmp .lp
  3927 00002E51 46                  <1> .1:	inc esi
  3928 00002E52 81F90A000000        <1> 	cmp ecx, 10
  3929 00002E58 720D                <1> 	jb .0
  3930 00002E5A 81E90A000000        <1> 	sub ecx, 10
  3931 00002E60 FE06                <1> 	inc byte [esi]
  3932 00002E62 E945FFFFFF          <1> 	jmp .lp
  3933 00002E67 46                  <1> .0:	inc esi
  3934 00002E68 81F901000000        <1> 	cmp ecx, 1
  3935 00002E6E 720D                <1> 	jb .dn
  3936 00002E70 81E901000000        <1> 	sub ecx, 1
  3937 00002E76 FE06                <1> 	inc byte [esi]
  3938 00002E78 E92FFFFFFF          <1> 	jmp .lp
  3939                              <1> .dn:
  3940 00002E7D C3                  <1> 	ret
  3941                              <1> 
  3942                              <1> 	
  3943                              <1> 
  3944 00002E7E 00<rept>            <1> hexnumber times 8 db 0
  3945 00002E86 202000              <1> hexnumberend db "  ",0
  3946                              <1> 
  3947                              <1> converthex:
  3948                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3949 00002E89 56                  <1> 	push esi
  3950 00002E8A B030                <1> 	mov al, "0"
  3951 00002E8C 39FE                <1> .clearlp: cmp esi, edi
  3952 00002E8E 7305                <1> 	jae .doneclear
  3953 00002E90 8806                <1> 	mov [esi], al
  3954 00002E92 46                  <1> 	inc esi
  3955 00002E93 EBF7                <1> 	jmp .clearlp
  3956                              <1> .doneclear:
  3957 00002E95 81EE02000000        <1> 	sub esi, 2
  3958 00002E9B 89C8                <1> 	mov eax, ecx
  3959                              <1> .loop:
  3960 00002E9D 30FF                <1> 	xor bh, bh
  3961 00002E9F 88C3                <1> 	mov bl, al
  3962 00002EA1 66C1E304            <1> 	shl bx, 4
  3963 00002EA5 C0EB04              <1> 	shr bl, 4
  3964 00002EA8 86DF                <1> 	xchg bl, bh ;they are backwards
  3965 00002EAA 80C330              <1> 	add bl, 48
  3966 00002EAD 80FB39              <1> 	cmp bl, "9"
  3967 00002EB0 7609                <1> 	jbe .goodbl
  3968 00002EB2 80EB30              <1> 	sub bl, 48
  3969 00002EB5 80EB0A              <1> 	sub bl, 0xA
  3970 00002EB8 80C341              <1> 	add bl, "A"
  3971                              <1> .goodbl:
  3972 00002EBB 80C730              <1> 	add bh, 48
  3973 00002EBE 80FF39              <1> 	cmp bh, "9"
  3974 00002EC1 7609                <1> 	jbe .goodbh
  3975 00002EC3 80EF30              <1> 	sub bh, 48
  3976 00002EC6 80EF0A              <1> 	sub bh, 0xA
  3977 00002EC9 80C741              <1> 	add bh, "A"
  3978                              <1> .goodbh:
  3979 00002ECC C1E808              <1> 	shr eax, 8
  3980 00002ECF 66891E              <1> 	mov [esi], bx
  3981 00002ED2 81EE02000000        <1> 	sub esi, 2
  3982 00002ED8 3B3424              <1> 	cmp esi, [esp]
  3983 00002EDB 7207                <1> 	jb .done
  3984 00002EDD 3D00000000          <1> 	cmp eax, 0
  3985 00002EE2 75B9                <1> 	jne .loop
  3986                              <1> .done:
  3987 00002EE4 5E                  <1> 	pop esi
  3988 00002EE5 C3                  <1> 	ret
  3989                              <1> 	
  3990                              <1> 	
  3991 00002EE6 00                  <1> smallhex db 0
  3992 00002EE7 01                  <1> firsthexshown db 1
  3993                              <1> showhexsmall:
  3994 00002EE8 C605[E62E0000]01    <1> 	mov byte [smallhex], 1
  3995 00002EEF E808000000          <1> 	call showhex
  3996 00002EF4 C605[E62E0000]00    <1> 	mov byte [smallhex], 0
  3997 00002EFB C3                  <1> 	ret
  3998                              <1> showhex:
  3999 00002EFC 60                  <1> 	pusha
  4000 00002EFD BE[7E2E0000]        <1> 	mov esi, hexnumber
  4001 00002F02 BF[862E0000]        <1> 	mov edi, hexnumberend
  4002 00002F07 E87DFFFFFF          <1> 	call converthex
  4003 00002F0C 803D[E72E0000]01    <1> 	cmp byte [firsthexshown], 1
  4004 00002F13 7503                <1> 	jne .show
  4005 00002F15 6631D2              <1> 	xor dx, dx
  4006                              <1> .show:
  4007 00002F18 803D[E72E0000]03    <1> 	cmp byte [firsthexshown], 3
  4008 00002F1F 7505                <1> 	jne .nonewhexline
  4009 00002F21 E8CCECFFFF          <1> 	call printline
  4010                              <1> .nonewhexline:
  4011 00002F26 803D[E72E0000]04    <1> 	cmp byte [firsthexshown], 4
  4012 00002F2D 7522                <1> 	jne .notab
  4013 00002F2F B1A0                <1> 	mov cl, 160
  4014 00002F31 28D1                <1> 	sub cl, dl
  4015 00002F33 C0E905              <1> 	shr cl, 5
  4016 00002F36 C0E105              <1> 	shl cl, 5
  4017 00002F39 80F900              <1> 	cmp cl, 0
  4018 00002F3C 750A                <1> 	jne .nonewline
  4019 00002F3E E8AFECFFFF          <1> 	call printline
  4020 00002F43 E909000000          <1> 	jmp .notab
  4021                              <1> .nonewline:
  4022 00002F48 80C20F              <1> 	add dl, 15
  4023 00002F4B C0EA04              <1> 	shr dl, 4
  4024 00002F4E C0E204              <1> 	shl dl, 4
  4025                              <1> .notab:
  4026 00002F51 BE[7E2E0000]        <1> 	mov esi, hexnumber
  4027 00002F56 803D[E62E0000]01    <1> 	cmp byte [smallhex],1
  4028 00002F5D 7506                <1> 	jne .nosmall
  4029 00002F5F 81C606000000        <1> 	add esi, 6
  4030                              <1> .nosmall:
  4031 00002F65 803D[E72E0000]05    <1> 	cmp byte [firsthexshown], 5
  4032 00002F6C 750A                <1> 	jne .noquiet
  4033 00002F6E E860ECFFFF          <1> 	call printquiet
  4034 00002F73 E918000000          <1> 	jmp .donequiet
  4035                              <1> .noquiet:
  4036 00002F78 803D[E72E0000]06    <1> 	cmp byte [firsthexshown], 6
  4037 00002F7F 750A                <1> 	jne .normal
  4038 00002F81 E860ECFFFF          <1> 	call printhighlight
  4039 00002F86 E905000000          <1> 	jmp .donequiet
  4040                              <1> .normal:
  4041 00002F8B E867ECFFFF          <1> 	call print
  4042                              <1> .donequiet:
  4043 00002F90 803D[E72E0000]02    <1> 	cmp byte [firsthexshown], 2
  4044 00002F97 7505                <1> 	jne .shown
  4045 00002F99 E854ECFFFF          <1> 	call printline
  4046                              <1> .shown:
  4047 00002F9E C605[E72E0000]00    <1> 	mov byte [firsthexshown], 0
  4048 00002FA5 61                  <1> 	popa
  4049 00002FA6 C3                  <1> 	ret
  4050                              <1> 
  4051                              <1> 
  4052 00002FA7 303030303030303030- <1> decnumber db "00000000000000"
  4053 00002FB0 3030303030          <1>
  4054 00002FB5 2000                <1> decnumberend: db " ",0
  4055                              <1> 
  4056                              <1> showdec: ;same as showhex, just uses decimal conversion
  4057 00002FB7 60                  <1> 	pusha
  4058 00002FB8 BF[A72F0000]        <1> 	mov edi, decnumber
  4059 00002FBD BE[B52F0000]        <1> 	mov esi, decnumberend
  4060                              <1> .clear:
  4061 00002FC2 C60730              <1> 	mov byte [edi], '0'
  4062 00002FC5 47                  <1> 	inc edi
  4063 00002FC6 39F7                <1> 	cmp edi, esi
  4064 00002FC8 72F8                <1> 	jb .clear
  4065 00002FCA BF[A72F0000]        <1> 	mov edi, decnumber
  4066 00002FCF E8D5FDFFFF          <1> 	call convert
  4067 00002FD4 803D[E72E0000]01    <1> 	cmp byte [firsthexshown], 1
  4068 00002FDB 7503                <1> 	jne .show
  4069 00002FDD 6631D2              <1> 	xor dx, dx
  4070                              <1> .show:
  4071 00002FE0 803D[E72E0000]03    <1> 	cmp byte [firsthexshown], 3
  4072 00002FE7 7505                <1> 	jne .nonewdecline
  4073 00002FE9 E804ECFFFF          <1> 	call printline
  4074                              <1> .nonewdecline:
  4075 00002FEE 803D[E72E0000]04    <1> 	cmp byte [firsthexshown], 4
  4076 00002FF5 7522                <1> 	jne .notab
  4077 00002FF7 B1A0                <1> 	mov cl, 160
  4078 00002FF9 28D1                <1> 	sub cl, dl
  4079 00002FFB C0E905              <1> 	shr cl, 5
  4080 00002FFE C0E105              <1> 	shl cl, 5
  4081 00003001 80F900              <1> 	cmp cl, 0
  4082 00003004 750A                <1> 	jne .nonewline
  4083 00003006 E8E7EBFFFF          <1> 	call printline
  4084 0000300B E909000000          <1> 	jmp .notab
  4085                              <1> .nonewline:
  4086 00003010 80C20F              <1> 	add dl, 15
  4087 00003013 C0EA04              <1> 	shr dl, 4
  4088 00003016 C0E204              <1> 	shl dl, 4
  4089                              <1> .notab:
  4090 00003019 BE[A72F0000]        <1> 	mov esi, decnumber
  4091 0000301E 4E                  <1> 	dec esi
  4092                              <1> .sifind:
  4093 0000301F 46                  <1> 	inc esi
  4094 00003020 81FE[B42F0000]      <1> 	cmp esi, decnumberend - 1
  4095 00003026 7305                <1> 	jae .nosifind
  4096 00003028 803E30              <1> 	cmp byte [esi], '0'
  4097 0000302B 74F2                <1> 	je .sifind
  4098                              <1> .nosifind:
  4099 0000302D E8C5EBFFFF          <1> 	call print
  4100 00003032 803D[E72E0000]02    <1> 	cmp byte [firsthexshown], 2
  4101 00003039 7505                <1> 	jne .shown
  4102 0000303B E8B2EBFFFF          <1> 	call printline
  4103                              <1> .shown:
  4104 00003040 C605[E72E0000]00    <1> 	mov byte [firsthexshown], 0
  4105 00003047 61                  <1> 	popa
  4106 00003048 C3                  <1> 	ret
  4107                              <1> 	
  4108                              <1> cnvrthextxt:
  4109 00003049 31C9                <1> 	xor ecx, ecx
  4110 0000304B 31C0                <1> 	xor eax, eax
  4111 0000304D 31D2                <1> 	xor edx, edx
  4112 0000304F 31DB                <1> 	xor ebx, ebx
  4113 00003051 4E                  <1> 	dec esi
  4114                              <1> .end:
  4115 00003052 46                  <1> 	inc esi
  4116 00003053 8A06                <1> 	mov al, [esi]
  4117 00003055 3C00                <1> 	cmp al, 0
  4118 00003057 75F9                <1> 	jne .end
  4119                              <1> .loop:
  4120 00003059 4E                  <1> 	dec esi
  4121 0000305A 8A06                <1> 	mov al, [esi]
  4122 0000305C 3C41                <1> 	cmp al, "A"
  4123 0000305E 7328                <1> 	jae .char
  4124 00003060 2C30                <1> 	sub al, 48
  4125 00003062 3C10                <1> 	cmp al, 16
  4126 00003064 7721                <1> 	ja .done
  4127                              <1> .donechar:
  4128 00003066 81FA00000000        <1> 	cmp edx, 0
  4129 0000306C 740E                <1> 	je .noshl
  4130 0000306E 89D3                <1> 	mov ebx, edx
  4131                              <1> .shl:
  4132 00003070 C1E004              <1> 	shl eax, 4
  4133 00003073 4B                  <1> 	dec ebx
  4134 00003074 81FB00000000        <1> 	cmp ebx, 0
  4135 0000307A 75F4                <1> 	jne .shl
  4136                              <1> .noshl:
  4137 0000307C 42                  <1> 	inc edx
  4138 0000307D 01C1                <1> 	add ecx, eax
  4139 0000307F 81FA08000000        <1> 	cmp edx, 8
  4140 00003085 72D2                <1> 	jb .loop
  4141                              <1> .done:
  4142 00003087 C3                  <1> 	ret
  4143                              <1> .char:
  4144 00003088 3C46                <1> 	cmp al, "F"
  4145 0000308A 77FB                <1> 	ja .done
  4146 0000308C 2C41                <1> 	sub al, "A"
  4147 0000308E 040A                <1> 	add al, 0xA
  4148 00003090 EBD4                <1> 	jmp .donechar
  4149                              <1> 	
  4150                              <1> 	
  4151                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4152 00003092 31C9                <1> 	xor ecx, ecx
  4153 00003094 31C0                <1> 	xor eax, eax
  4154 00003096 31D2                <1> 	xor edx, edx
  4155 00003098 31DB                <1> 	xor ebx, ebx
  4156 0000309A 4E                  <1> 	dec esi
  4157                              <1> .lp:
  4158 0000309B 46                  <1> 	inc esi
  4159 0000309C 8A06                <1> 	mov al, [esi]
  4160 0000309E 3C00                <1> 	cmp al, 0
  4161 000030A0 75F9                <1> 	jne .lp
  4162 000030A2 4E                  <1> 	dec esi
  4163 000030A3 8A06                <1> 	mov al, [esi]
  4164 000030A5 3C2E                <1> 	cmp al, '.'
  4165 000030A7 7503                <1> 	jne .dot
  4166 000030A9 46                  <1> 	inc esi
  4167 000030AA EBEF                <1> 	jmp .lp
  4168                              <1> .dot:
  4169 000030AC 3C20                <1> 	cmp al, ' '
  4170 000030AE 7404                <1> 	je .zero
  4171 000030B0 3C30                <1> 	cmp al, '0'
  4172 000030B2 7504                <1> 	jne .txtlp
  4173                              <1> .zero: 
  4174 000030B4 39FE                <1> 		cmp esi, edi
  4175 000030B6 7441                <1> 		je .done
  4176                              <1> .txtlp:
  4177 000030B8 31C0                <1> 	xor eax, eax
  4178 000030BA 8A06                <1> 	mov al, [esi]
  4179 000030BC 3C3D                <1> 	cmp al, '='
  4180 000030BE 7439                <1> 	je .done
  4181 000030C0 3C30                <1> 	cmp al, 48
  4182 000030C2 7235                <1> 	jb .done
  4183 000030C4 3C23                <1> 	cmp al, '#'
  4184 000030C6 7431                <1> 	je .done
  4185 000030C8 39FE                <1> 	cmp esi, edi
  4186 000030CA 722D                <1> 	jb .done
  4187 000030CC 81F900000000        <1> 	cmp ecx, 0
  4188 000030D2 7708                <1> 	ja .exp
  4189 000030D4 2C30                <1> .noexp:	sub al, 48
  4190 000030D6 01C2                <1> 	add edx, eax
  4191 000030D8 4E                  <1> 	dec esi
  4192 000030D9 41                  <1> 	inc ecx
  4193 000030DA EBDC                <1> 	jmp .txtlp
  4194 000030DC 81F900000000        <1> .exp:	cmp ecx, 0
  4195 000030E2 74F0                <1> 	je .noexp
  4196 000030E4 2C30                <1> 	sub al, 48
  4197 000030E6 51                  <1> 	push ecx
  4198                              <1> .expmul:
  4199 000030E7 89C3                <1> 	mov ebx, eax
  4200 000030E9 01D8                <1> 	add eax, ebx
  4201 000030EB C1E303              <1> 	shl ebx, 3
  4202 000030EE 01D8                <1> 	add eax, ebx
  4203 000030F0 E2F5                <1> 	loop .expmul
  4204 000030F2 01C2                <1> 	add edx, eax
  4205 000030F4 59                  <1> 	pop ecx
  4206 000030F5 4E                  <1> 	dec esi
  4207 000030F6 41                  <1> 	inc ecx
  4208 000030F7 EBBF                <1> 	jmp .txtlp
  4209 000030F9 89D1                <1> .done: mov ecx, edx
  4210 000030FB C3                  <1> 	ret
  4211                              <1> 
  4212                              <1> benchmarki: ;output number of clocks since initial value
  4213 000030FC 0F31                <1> 	rdtsc
  4214 000030FE 8B1D[D5610000]      <1> 	mov ebx, [initialtsc]
  4215 00003104 8B0D[D9610000]      <1> 	mov ecx, [initialtsc + 4]
  4216 0000310A E90E000000          <1> 	jmp benchmarkl.calc
  4217                              <1> 
  4218                              <1> benchmarkl: ;output number of clocks since last benchmark
  4219 0000310F 0F31                <1> 	rdtsc
  4220 00003111 8B1D[DD610000]      <1> 	mov ebx, [lasttsc]
  4221 00003117 8B0D[E1610000]      <1> 	mov ecx, [lasttsc + 4]
  4222                              <1> .calc:
  4223 0000311D 29D8                <1> 	sub eax, ebx
  4224 0000311F 7701                <1> 	ja .noover
  4225 00003121 4A                  <1> 	dec edx
  4226                              <1> .noover:
  4227 00003122 29CA                <1> 	sub edx, ecx
  4228 00003124 8B0C24              <1> 	mov ecx, [esp]
  4229 00003127 E8D0FDFFFF          <1> 	call showhex
  4230 0000312C 89D1                <1> 	mov ecx, edx
  4231 0000312E E8C9FDFFFF          <1> 	call showhex
  4232 00003133 89C1                <1> 	mov ecx, eax
  4233 00003135 E8C2FDFFFF          <1> 	call showhex
  4234 0000313A E8B3EAFFFF          <1> 	call printline
  4235 0000313F 0F31                <1> 	rdtsc
  4236 00003141 A3[DD610000]        <1> 	mov [lasttsc], eax
  4237 00003146 8915[E1610000]      <1> 	mov [lasttsc + 4], edx
  4238 0000314C C3                  <1> 	ret
  4239                                      %include "source/programs.asm"
  4240 0000314D FF2C                <1> filetypes db 255,44
  4241                              <1> progstart:		;programs start here
  4242                              <1> indexfiles:
  4243 0000314F BE[4F310000]        <1> 	mov esi, progstart
  4244 00003154 BB[08860300]        <1> 	mov ebx, fileindex
  4245 00003159 BF[4F310000]        <1> 	mov edi, progstart
  4246 0000315E 81EF02000000        <1> 	sub edi, 2
  4247                              <1> indexloop:
  4248 00003164 668B0E              <1> 	mov cx, [esi]
  4249                              <1> 	indexloop2:
  4250 00003167 663B0F              <1> 		cmp cx, [edi]
  4251 0000316A 7424                <1> 		je indexloop2done
  4252 0000316C 81EF02000000        <1> 		sub edi, 2
  4253 00003172 81FF[4D310000]      <1> 		cmp edi, filetypes
  4254 00003178 73ED                <1> 		jae indexloop2
  4255 0000317A BF[4F310000]        <1> 	mov edi, progstart
  4256 0000317F 81EF02000000        <1> 	sub edi, 2
  4257 00003185 46                  <1> 	inc esi
  4258 00003186 81FE[984E0000]      <1> 	cmp esi, batchprogend
  4259 0000318C 734E                <1> 	jae indexloopdone
  4260 0000318E EBD4                <1> 	jmp indexloop
  4261                              <1> indexloop2done:
  4262 00003190 66890B              <1> 	mov [ebx], cx
  4263 00003193 81C302000000        <1> 	add ebx, 2
  4264 00003199 81C602000000        <1> 	add esi, 2
  4265                              <1> 	nameindex:
  4266 0000319F 8A0E                <1> 		mov cl, [esi]
  4267 000031A1 80F900              <1> 		cmp cl, 0
  4268 000031A4 7406                <1> 		je nameindexdone
  4269 000031A6 880B                <1> 		mov [ebx], cl
  4270 000031A8 46                  <1> 		inc esi
  4271 000031A9 43                  <1> 		inc ebx
  4272 000031AA EBF3                <1> 		jmp nameindex
  4273                              <1> 	nameindexdone:
  4274 000031AC 43                  <1> 		inc ebx
  4275 000031AD 66C7030000          <1> 		mov word [ebx], 0
  4276 000031B2 81C302000000        <1> 		add ebx, 2
  4277 000031B8 46                  <1> 		inc esi
  4278 000031B9 8933                <1> 		mov [ebx], esi
  4279 000031BB 81C304000000        <1> 		add ebx, 4
  4280 000031C1 66C7030000          <1> 		mov word [ebx], 0
  4281 000031C6 81C302000000        <1> 		add ebx, 2
  4282 000031CC 81FB[088A0300]      <1> 		cmp ebx, fileindexend
  4283 000031D2 7308                <1> 		jae indexloopdone
  4284 000031D4 81C601000000        <1> 		add esi, 1
  4285 000031DA EB88                <1> 		jmp indexloop
  4286 000031DC C605[E4310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4287 000031E3 C3                  <1> 		ret
  4288 000031E4 00                  <1> indexdone db 0
  4289                              <1> %include 'source/programs/_comment.asm' ;#
  4290 000031E5 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4291 000031E9 C3                  <2> 	ret 
  4292                              <1> %include 'source/programs/_math.asm' ;!
  4293 000031EA FF2C2100            <2> db 255,44,"!",0
  4294                              <2> 	num:	
  4295 000031EE E8A1FBFFFF          <2> 		call clearbuffer
  4296 000031F3 C605[62340000]00    <2> 		mov byte [decimal], 0
  4297 000031FA C605[63340000]00    <2> 		mov byte [decimal2], 0
  4298 00003201 8B35[DA2C0000]      <2> 		mov esi, [currentcommandloc]
  4299 00003207 31C0                <2> 		xor eax, eax
  4300 00003209 31C9                <2> 		xor ecx, ecx
  4301 0000320B 31DB                <2> 		xor ebx, ebx
  4302 0000320D 8A06                <2> 	num2:	mov al, [esi]
  4303 0000320F 3C2B                <2> 		cmp al, '+'
  4304 00003211 7416                <2> 		je operatorfound
  4305 00003213 3C2D                <2> 		cmp al, '-'
  4306 00003215 7412                <2> 		je operatorfound
  4307 00003217 3C2A                <2> 		cmp al, '*'
  4308 00003219 740E                <2> 		je operatorfound
  4309 0000321B 3C2F                <2> 		cmp al, '/'
  4310 0000321D 740A                <2> 		je operatorfound
  4311 0000321F 3C5E                <2> 		cmp al, '^'
  4312 00003221 7406                <2> 		je operatorfound
  4313 00003223 46                  <2> 		inc esi
  4314 00003224 84C0                <2> 		test al, al
  4315 00003226 75E5                <2> 		jnz num2
  4316 00003228 C3                  <2> 		ret
  4317 00003229 50                  <2> 	operatorfound: push eax
  4318 0000322A 30E4                <2> 		xor ah, ah
  4319 0000322C 8826                <2> 		mov [esi], ah
  4320 0000322E 89F7                <2> 		mov edi, esi
  4321 00003230 46                  <2> 		inc esi
  4322 00003231 8A06                <2> 		mov al, [esi]
  4323 00003233 3C25                <2> 		cmp al, '%'
  4324 00003235 0F845E000000        <2> 		je near resultnum1
  4325                              <2> 	varnum2: 
  4326 0000323B 57                  <2> 		push edi
  4327 0000323C E8A0000000          <2> 		call checkdecimal
  4328 00003241 5F                  <2> 		pop edi
  4329 00003242 E84BFEFFFF          <2> 		call cnvrttxt
  4330                              <2> 	vrnm2:
  4331 00003247 89CB                <2> 		mov ebx, ecx
  4332 00003249 53                  <2> 		push ebx
  4333 0000324A E845FBFFFF          <2> 		call clearbuffer
  4334 0000324F 8B35[DA2C0000]      <2> 		mov esi, [currentcommandloc]
  4335 00003255 89F7                <2> 		mov edi, esi
  4336 00003257 46                  <2> 		inc esi
  4337 00003258 8A06                <2> 		mov al, [esi]
  4338 0000325A 3C25                <2> 		cmp al, '%'
  4339 0000325C 0F844B000000        <2> 		je near resultnum2
  4340                              <2> 	varnum4: 
  4341 00003262 57                  <2> 		push edi
  4342 00003263 E865000000          <2> 		call checkdecimal2
  4343 00003268 5F                  <2> 		pop edi
  4344 00003269 E824FEFFFF          <2> 		call cnvrttxt
  4345                              <2> 	vrnm4:
  4346 0000326E 5B                  <2> 		pop ebx
  4347 0000326F 58                  <2> 		pop eax
  4348 00003270 3C2B                <2> 		cmp al, '+'
  4349 00003272 0F8497000000        <2> 		je near plusnum
  4350 00003278 3C2D                <2> 		cmp al, '-'
  4351 0000327A 0F849B000000        <2> 		je near subnum
  4352 00003280 3C2A                <2> 		cmp al, '*'
  4353 00003282 0F849F000000        <2> 		je near mulnum
  4354 00003288 3C2F                <2> 		cmp al, '/'
  4355 0000328A 0F84AD000000        <2> 		je near divnum
  4356 00003290 3C5E                <2> 		cmp al, '^'
  4357 00003292 0F84CA000000        <2> 		je near expnum
  4358 00003298 C3                  <2> 		ret
  4359                              <2> 	resultnum1:
  4360 00003299 8A0D[64340000]      <2> 		mov cl, [decimalresult]
  4361 0000329F 880D[62340000]      <2> 		mov [decimal], cl
  4362 000032A5 8B0D[65340000]      <2> 		mov ecx, [result]
  4363 000032AB EB9A                <2> 		jmp vrnm2
  4364                              <2> 	resultnum2:
  4365 000032AD 8A0D[62340000]      <2> 		mov cl, [decimal]
  4366 000032B3 880D[63340000]      <2> 		mov [decimal2], cl
  4367 000032B9 8A0D[64340000]      <2> 		mov cl, [decimalresult]
  4368 000032BF 880D[62340000]      <2> 		mov [decimal], cl
  4369 000032C5 8B0D[65340000]      <2> 		mov ecx, [result]
  4370 000032CB EBA1                <2> 		jmp vrnm4
  4371                              <2> 	checkdecimal2:
  4372 000032CD 8A25[62340000]      <2> 		mov ah, [decimal]
  4373 000032D3 8825[63340000]      <2> 		mov [decimal2], ah
  4374 000032D9 30E4                <2> 		xor ah, ah
  4375 000032DB 8825[62340000]      <2> 		mov [decimal], ah
  4376                              <2> 	checkdecimal:
  4377 000032E1 89F7                <2> 		mov edi, esi
  4378                              <2> 	chkdec1:
  4379 000032E3 8A07                <2> 		mov al, [edi]
  4380 000032E5 3C2E                <2> 		cmp al, '.'
  4381 000032E7 0F840B000000        <2> 		je near fnddec
  4382 000032ED 3C00                <2> 		cmp al, 0
  4383 000032EF 0F8419000000        <2> 		je near nodecimal
  4384 000032F5 47                  <2> 		inc edi
  4385 000032F6 EBEB                <2> 		jmp chkdec1
  4386                              <2> 	fnddec:
  4387 000032F8 8A4701              <2> 		mov al, [edi + 1]
  4388 000032FB 8807                <2> 		mov [edi], al
  4389 000032FD 3C00                <2> 		cmp al, 0
  4390 000032FF 0F8409000000        <2> 		je near nodecimal
  4391 00003305 FE05[62340000]      <2> 		inc byte [decimal]
  4392 0000330B 47                  <2> 		inc edi
  4393 0000330C EBEA                <2> 		jmp fnddec
  4394                              <2> 	nodecimal:
  4395 0000330E C3                  <2> 		ret
  4396                              <2> 	plusnum:
  4397 0000330F E80C010000          <2> 		call decaddfix
  4398 00003314 01D9                <2> 		add ecx, ebx
  4399 00003316 E98A000000          <2> 		jmp retnum
  4400                              <2> 	subnum:
  4401 0000331B E800010000          <2> 		call decaddfix
  4402 00003320 29D9                <2> 		sub ecx, ebx
  4403 00003322 E97E000000          <2> 		jmp retnum
  4404                              <2> 	mulnum:
  4405 00003327 A0[63340000]        <2> 		mov al, [decimal2]
  4406 0000332C 0005[62340000]      <2> 		add [decimal], al
  4407 00003332 89C8                <2> 		mov eax, ecx
  4408 00003334 F7E3                <2> 		mul ebx
  4409 00003336 89C1                <2> 		mov ecx, eax
  4410 00003338 E968000000          <2> 		jmp retnum
  4411                              <2> 	divnum:
  4412 0000333D E8DE000000          <2> 		call decaddfix
  4413 00003342 30C0                <2> 		xor al, al
  4414 00003344 A2[62340000]        <2> 		mov [decimal], al
  4415 00003349 31D2                <2> 		xor edx, edx
  4416 0000334B 89C8                <2> 		mov eax, ecx
  4417 0000334D 81FB00000000        <2> 		cmp ebx, 0
  4418 00003353 0F844C000000        <2> 		je near retnum
  4419 00003359 F7F3                <2> 		div ebx
  4420 0000335B 89C1                <2> 		mov ecx, eax
  4421 0000335D E943000000          <2> 		jmp retnum
  4422                              <2> 	expnum:
  4423 00003362 8A15[62340000]      <2> 		mov dl, [decimal]
  4424 00003368 8815[63340000]      <2> 		mov [decimal2], dl
  4425 0000336E 31D2                <2> 		xor edx, edx
  4426 00003370 89C8                <2> 		mov eax, ecx
  4427 00003372 89D9                <2> 		mov ecx, ebx
  4428 00003374 89C3                <2> 		mov ebx, eax
  4429 00003376 81F900000000        <2> 		cmp ecx, 0
  4430 0000337C 7422                <2> 		je noexpnum
  4431 0000337E 49                  <2> 		dec ecx
  4432 0000337F 81F900000000        <2> 		cmp ecx, 0
  4433 00003385 7412                <2> 		je noexpnumlp
  4434 00003387 F7E3                <2> 	expnumlp: mul ebx
  4435 00003389 8A15[63340000]      <2> 		mov dl, [decimal2]
  4436 0000338F 0015[62340000]      <2> 		add [decimal], dl
  4437 00003395 31D2                <2> 		xor edx, edx
  4438 00003397 E2EE                <2> 		loop expnumlp
  4439                              <2> 	noexpnumlp:
  4440 00003399 89C1                <2> 		mov ecx, eax
  4441 0000339B E905000000          <2> 		jmp retnum
  4442                              <2> 	noexpnum:
  4443 000033A0 B901000000          <2> 		mov ecx, 1
  4444                              <2> 	retnum: 
  4445 000033A5 BE[9CA40300]        <2> 		mov esi, numbuf
  4446 000033AA 890D[65340000]      <2> 		mov [result], ecx
  4447 000033B0 E8F4F9FFFF          <2> 		call convert
  4448 000033B5 BE[9CA40300]        <2> 		mov esi, numbuf
  4449 000033BA 8A25[62340000]      <2> 		mov ah, [decimal]
  4450 000033C0 8825[64340000]      <2> 		mov [decimalresult], ah
  4451 000033C6 80FC00              <2> 		cmp ah, 0
  4452 000033C9 0F8425000000        <2> 		je near noputdecimal
  4453                              <2> 	putdecimal:
  4454 000033CF 4E                  <2> 		dec esi
  4455 000033D0 FECC                <2> 		dec ah
  4456 000033D2 80FC00              <2> 		cmp ah, 0
  4457 000033D5 0F87F4FFFFFF        <2> 		ja near putdecimal
  4458 000033DB 4E                  <2> 		dec esi
  4459 000033DC 8A06                <2> 		mov al, [esi]
  4460 000033DE C6062E              <2> 		mov byte [esi], '.'
  4461                              <2> 	decputloop:
  4462 000033E1 4E                  <2> 		dec esi
  4463 000033E2 8A26                <2> 		mov ah, [esi]
  4464 000033E4 8806                <2> 		mov [esi], al
  4465 000033E6 88E0                <2> 		mov al, ah
  4466 000033E8 81FE[88A40300]      <2> 		cmp esi, buf2
  4467 000033EE 0F87EDFFFFFF        <2> 		ja near decputloop
  4468                              <2> 	noputdecimal:
  4469 000033F4 BE[88A40300]        <2> 		mov esi, buf2
  4470 000033F9 E805000000          <2> 		call chkadd
  4471 000033FE C3                  <2> 		ret
  4472 000033FF 00000000            <2> edxnumbuf dw 0,0
  4473 00003403 8A06                <2> 	chkadd: mov al, [esi]
  4474 00003405 3C30                <2> 		cmp al, '0'
  4475 00003407 750C                <2> 		jne dnadd
  4476 00003409 46                  <2> 		inc esi
  4477 0000340A 81FE[9CA40300]      <2> 		cmp esi, numbuf
  4478 00003410 7402                <2> 		je dnaddm1
  4479 00003412 EBEF                <2> 		jmp chkadd
  4480 00003414 4E                  <2> 	dnaddm1: dec esi
  4481 00003415 E8DDE7FFFF          <2> 	dnadd:	call print
  4482 0000341A E8D3E7FFFF          <2> 		call printline
  4483 0000341F C3                  <2> 		ret
  4484                              <2> 		
  4485                              <2> 	decaddfix:
  4486 00003420 A0[63340000]        <2> 		mov al, [decimal2]
  4487 00003425 8A25[62340000]      <2> 		mov ah, [decimal]
  4488 0000342B 38E0                <2> 		cmp al, ah
  4489 0000342D 7432                <2> 		je gooddecadd
  4490 0000342F 38E0                <2> 		cmp al, ah
  4491 00003431 721A                <2> 		jb lowdecadd
  4492                              <2> 	highdecadd:
  4493 00003433 FEC4                <2> 		inc ah
  4494 00003435 89CA                <2> 		mov edx, ecx
  4495 00003437 C1E103              <2> 		shl ecx, 3
  4496 0000343A 01D1                <2> 		add ecx, edx
  4497 0000343C 01D1                <2> 		add ecx, edx
  4498 0000343E 38E0                <2> 		cmp al, ah
  4499 00003440 77F1                <2> 		ja highdecadd
  4500 00003442 8825[62340000]      <2> 		mov [decimal], ah
  4501 00003448 E914000000          <2> 		jmp gooddecadd
  4502                              <2> 	lowdecadd:
  4503 0000344D FEC0                <2> 		inc al
  4504 0000344F 89DA                <2> 		mov edx, ebx
  4505 00003451 C1E303              <2> 		shl ebx, 3
  4506 00003454 01D3                <2> 		add ebx, edx
  4507 00003456 01D3                <2> 		add ebx, edx
  4508 00003458 38E0                <2> 		cmp al, ah
  4509 0000345A 72F1                <2> 		jb lowdecadd
  4510 0000345C A2[62340000]        <2> 		mov [decimal], al
  4511                              <2> 	gooddecadd:
  4512 00003461 C3                  <2> 		ret
  4513                              <2> 		
  4514 00003462 00                  <2> decimal db 0
  4515 00003463 00                  <2> decimal2 db 0
  4516 00003464 00                  <2> decimalresult db 0
  4517 00003465 00000000            <2> result dd 0
  4518                              <1> %include 'source/programs/_variables.asm' ;% and $
  4519 00003469 FF2C2500            <2> db 255,44,"%",0
  4520                              <2> 	ans:
  4521 0000346D BE[88A40300]        <2> 		mov esi, buf2
  4522 00003472 E88CFFFFFF          <2> 		call chkadd
  4523 00003477 C3                  <2> 		ret
  4524                              <2> 		
  4525 00003478 FF2C2400            <2> db 255,44,"$",0
  4526 0000347C 8B35[DA2C0000]      <2> var: mov esi, [currentcommandloc]
  4527 00003482 BB[888C0300]        <2> 	mov ebx, variables
  4528 00003487 8A06                <2> lkeq:	mov al, [esi]
  4529 00003489 3C3D                <2> 	cmp al, '='
  4530 0000348B 741B                <2> 	je eqfnd	;is there an '=' sign?
  4531 0000348D 3C00                <2> 	cmp al, 0
  4532 0000348F 7403                <2> 	je echovars
  4533 00003491 46                  <2> 	inc esi
  4534 00003492 EBF3                <2> 	jmp lkeq
  4535 00003494 BE[888C0300]        <2> echovars: mov esi, variables
  4536 00003499 BB[889C0300]        <2> 	mov ebx, varend
  4537 0000349E B105                <2> 	mov cl, 5
  4538 000034A0 B504                <2> 	mov ch, 4
  4539 000034A2 E891F8FFFF          <2> 	call array
  4540 000034A7 C3                  <2> 	ret
  4541 000034A8 46                  <2> eqfnd:	inc esi
  4542 000034A9 8A06                <2> 	mov al, [esi]
  4543 000034AB 3C00                <2> 	cmp al, 0
  4544 000034AD 7410                <2> 	je readvar
  4545 000034AF 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  4546 000034B5 BB[888C0300]        <2> 	mov ebx, variables
  4547 000034BA E919000000          <2> 	jmp seek
  4548                              <2> readvar:
  4549 000034BF B00A                <2> 	mov al, 10
  4550 000034C1 66BB0700            <2> 	mov bx, 7
  4551 000034C5 C605[D8210000]00    <2> 	mov byte [commandedit], 0
  4552 000034CC BF[88A40300]        <2> 	mov edi, buftxtend
  4553 000034D1 E851E8FFFF          <2> 	call rdprint
  4554 000034D6 EBA4                <2> 	jmp var
  4555 000034D8 668B03              <2> seek:	mov ax, [ebx]
  4556 000034DB B105                <2> 	mov cl, 5
  4557 000034DD B504                <2> 	mov ch, 4
  4558 000034DF 663D0000            <2> 	cmp ax, 0
  4559 000034E3 0F845B000000        <2> 	je near save
  4560 000034E9 6639C8              <2> 	cmp ax, cx
  4561 000034EC 7403                <2> 	je skfnd
  4562 000034EE 43                  <2> 	inc ebx
  4563 000034EF EBE7                <2> 	jmp seek
  4564 000034F1 8B35[DA2C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4565 000034F7 46                  <2> 	inc esi
  4566 000034F8 81C302000000        <2> 	add ebx, 2
  4567 000034FE 89DF                <2> 	mov edi, ebx
  4568 00003500 B13D                <2> 	mov cl, '='
  4569 00003502 E812F8FFFF          <2> 	call cndtest
  4570 00003507 3C01                <2> 	cmp al, 1	
  4571 00003509 7418                <2> 	je varfnd
  4572 0000350B 89FB                <2> 	mov ebx, edi
  4573 0000350D 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  4574 00003513 668B03              <2> 	mov ax, [ebx]
  4575 00003516 663D0000            <2> 	cmp ax, 0
  4576 0000351A 0F8424000000        <2> 	je near save
  4577 00003520 43                  <2> 	inc ebx
  4578 00003521 EBB5                <2> 	jmp seek
  4579 00003523 8A03                <2> varfnd:	mov al, [ebx]
  4580 00003525 3C04                <2> 	cmp al, 4
  4581 00003527 7404                <2> 	je save2
  4582 00003529 4B                  <2> 	dec ebx
  4583 0000352A 4E                  <2> 	dec esi
  4584 0000352B EBF6                <2> 	jmp varfnd
  4585 0000352D 4B                  <2> save2:	dec ebx
  4586 0000352E 4E                  <2> 	dec esi
  4587 0000352F 8A03                <2> 	mov al, [ebx]
  4588 00003531 3C05                <2> 	cmp al, 5
  4589 00003533 7402                <2> 	je remove
  4590 00003535 EBEC                <2> 	jmp varfnd
  4591 00003537 8A03                <2> remove: mov al, [ebx]
  4592 00003539 3C00                <2> 	cmp al, 0
  4593 0000353B 749B                <2> 	je seek
  4594 0000353D 30C0                <2> 	xor al, al
  4595 0000353F 8803                <2> 	mov [ebx], al
  4596 00003541 43                  <2> 	inc ebx
  4597 00003542 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4598 00003544 8B35[DA2C0000]      <2> save:	mov esi, [currentcommandloc]
  4599 0000354A 43                  <2> 	inc ebx
  4600 0000354B B005                <2> 	mov al, 5
  4601 0000354D B404                <2> 	mov ah, 4
  4602 0000354F 668903              <2> 	mov [ebx], ax
  4603 00003552 43                  <2> 	inc ebx
  4604 00003553 43                  <2> svhere:	inc ebx
  4605 00003554 46                  <2> 	inc esi
  4606 00003555 8A06                <2> 	mov al, [esi]
  4607 00003557 3C00                <2> 	cmp al, 0
  4608 00003559 0F844A000000        <2> 	je near svdone
  4609 0000355F 3C25                <2> 	cmp al, '%'
  4610 00003561 7404                <2> 	je ans2
  4611 00003563 8803                <2> 	mov [ebx], al	
  4612 00003565 EBEC                <2> 	jmp svhere
  4613 00003567 56                  <2> ans2:	push esi
  4614 00003568 BE[88A40300]        <2> 	mov esi, buf2
  4615 0000356D E823000000          <2> 	call ansfnd
  4616 00003572 E803000000          <2> 	call anscp
  4617 00003577 5E                  <2> 	pop esi
  4618 00003578 EBD9                <2> 	jmp svhere
  4619 0000357A 8A06                <2> anscp:	mov al, [esi]
  4620 0000357C 8803                <2> 	mov [ebx], al
  4621 0000357E 81FE[9CA40300]      <2> 	cmp esi, numbuf
  4622 00003584 74CD                <2> 	je svhere
  4623 00003586 3C00                <2> 	cmp al, 0
  4624 00003588 74C9                <2> 	je svhere
  4625 0000358A 43                  <2> 	inc ebx
  4626 0000358B 46                  <2> 	inc esi
  4627 0000358C EBEC                <2> 	jmp anscp
  4628 0000358E 5E                  <2> ansnf:	pop esi
  4629 0000358F 8A06                <2> 	mov al, [esi]
  4630 00003591 8803                <2> 	mov [ebx], al
  4631 00003593 EBBE                <2> 	jmp svhere
  4632 00003595 46                  <2> ansfnd:	inc esi
  4633 00003596 81FE[9BA40300]      <2> 	cmp esi, numbuf - 1
  4634 0000359C 740A                <2> 	je fndans
  4635 0000359E 8A06                <2> 	mov al, [esi]
  4636 000035A0 3C00                <2> 	cmp al, 0
  4637 000035A2 74EA                <2> 	je ansnf
  4638 000035A4 3C30                <2> 	cmp al, '0'
  4639 000035A6 74ED                <2> 	je ansfnd
  4640                              <2> fndans:
  4641 000035A8 C3                  <2> 	ret
  4642 000035A9 30C0                <2> svdone:	xor al, al
  4643 000035AB 8803                <2> 	mov [ebx], al
  4644 000035AD C3                  <2> 	ret
  4645                              <1> %include 'source/programs/_run.asm' ;./
  4646                              <2> 
  4647 000035AE 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4648 000035B2 FF2C2E2F00          <2> 	db 255,44,"./",0
  4649                              <2> rundiskprog:
  4650 000035B7 8B3D[DA2C0000]      <2> 	mov edi, [currentcommandloc]
  4651 000035BD 81C702000000        <2> 	add edi, 2
  4652 000035C3 BE00004000          <2> 	mov esi, 0x400000
  4653 000035C8 E87D250000          <2> 	call loadfile
  4654 000035CD 81FA94010000        <2> 	cmp edx, 404
  4655 000035D3 746A                <2> 	je noprogfound
  4656 000035D5 BB00004000          <2> 	mov ebx, 0x400000
  4657 000035DA A1[AE350000]        <2> 	mov eax, [elfstart]
  4658 000035DF 3903                <2> 	cmp [ebx], eax
  4659 000035E1 0F8437000000        <2> 	je near runelf
  4660 000035E7 66813B4558          <2> 	cmp word [ebx], "EX"
  4661 000035EC 7577                <2> 	jne progbatchfound
  4662 000035EE 81C302000000        <2> 	add ebx, 2
  4663 000035F4 8B3D[DA2C0000]      <2> 	mov edi, [currentcommandloc]
  4664 000035FA 81C702000000        <2> 	add edi, 2
  4665                              <2> findspaceprog:
  4666 00003600 8A07                <2> 	mov al, [edi]
  4667 00003602 47                  <2> 	inc edi
  4668 00003603 3C20                <2> 	cmp al, " "
  4669 00003605 75F9                <2> 	jne findspaceprog
  4670                              <2> findnonspaceprog:
  4671 00003607 8A07                <2> 	mov al, [edi]
  4672 00003609 47                  <2> 	inc edi
  4673 0000360A 3C20                <2> 	cmp al, " "
  4674 0000360C 74F9                <2> 	je findnonspaceprog
  4675 0000360E 4F                  <2> 	dec edi
  4676 0000360F 8925[088A0300]      <2> 	mov [previousstack], esp
  4677 00003615 FFD3                <2> 	call ebx
  4678 00003617 8B25[088A0300]      <2> 	mov esp, [previousstack]
  4679 0000361D C3                  <2> 	ret
  4680                              <2> runelf:
  4681 0000361E 8B3D[DA2C0000]      <2> 	mov edi, [currentcommandloc]
  4682 00003624 81C702000000        <2> 	add edi, 2
  4683 0000362A 81C380000000        <2> 	add ebx, 0x80
  4684 00003630 8925[088A0300]      <2> 	mov [previousstack], esp
  4685 00003636 FFD3                <2> 	call ebx
  4686 00003638 8B25[088A0300]      <2> 	mov esp, [previousstack]
  4687 0000363E C3                  <2> 	ret
  4688                              <2> noprogfound:
  4689 0000363F BE[71610000]        <2> 	mov esi, notfound1
  4690 00003644 E8AEE5FFFF          <2> 	call print
  4691 00003649 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  4692 0000364F 81C602000000        <2> 	add esi, 2
  4693 00003655 E89DE5FFFF          <2> 	call print
  4694 0000365A BE[79610000]        <2> 	mov esi, notfound2
  4695 0000365F E893E5FFFF          <2> 	call print
  4696 00003664 C3                  <2> 	ret
  4697                              <2> progbatchfound:
  4698 00003665 BF00004000          <2> 		mov edi, 0x400000
  4699 0000366A C605[828C0300]01    <2> 		mov byte [BATCHISON], 1
  4700                              <2> 	batchrunloop:
  4701 00003671 E88EF3FFFF          <2> 		call buftxtclear
  4702 00003676 BE[88A00300]        <2> 		mov esi, buftxt
  4703 0000367B 8935[DA2C0000]      <2> 		mov [currentcommandloc], esi
  4704                              <2> 	batchrunloop2:
  4705 00003681 B10A                <2> 		mov cl, 10
  4706 00003683 B50D                <2> 		mov ch, 13
  4707 00003685 380F                <2> 		cmp [edi], cl
  4708 00003687 0F8419000000        <2> 		je near nxtbatchrunline
  4709 0000368D 382F                <2> 		cmp [edi], ch
  4710 0000368F 0F8411000000        <2> 		je near nxtbatchrunline
  4711 00003695 803F00              <2> 		cmp byte [edi], 0
  4712 00003698 0F8408000000        <2> 		je near nxtbatchrunline
  4713 0000369E 8A07                <2> 		mov al, [edi]
  4714 000036A0 8806                <2> 		mov [esi], al
  4715 000036A2 46                  <2> 		inc esi
  4716 000036A3 47                  <2> 		inc edi
  4717 000036A4 EBDB                <2> 		jmp batchrunloop2
  4718                              <2> 	nxtbatchrunline:
  4719 000036A6 47                  <2> 		inc edi
  4720 000036A7 380F                <2> 		cmp [edi], cl
  4721 000036A9 74FB                <2> 		je nxtbatchrunline
  4722 000036AB 382F                <2> 		cmp [edi], ch
  4723 000036AD 74F7                <2> 		je nxtbatchrunline
  4724 000036AF 893D[0D370000]      <2> 		mov [batchedi], edi
  4725 000036B5 893D[7E8C0300]      <2> 		mov [BATCHPOS], edi
  4726 000036BB C60600              <2> 		mov byte [esi], 0
  4727 000036BE BE[88A00300]        <2> 		mov esi, buftxt
  4728 000036C3 803E00              <2> 		cmp byte [esi], 0
  4729 000036C6 0F8439000000        <2> 		je near nobatchfoundrun
  4730 000036CC 31DB                <2> 		xor ebx, ebx
  4731 000036CE 8A1D[198C0300]      <2> 		mov bl, [IFON]
  4732 000036D4 80FB00              <2> 		cmp bl, 0
  4733 000036D7 0F8534000000        <2> 		jne near iftestbatch
  4734                              <2> 	doneiftest:
  4735 000036DD 803D[E3370000]00    <2> 		cmp byte [runnextline], 0
  4736 000036E4 0F8405000000        <2> 		je near noruniftest
  4737 000036EA E815F5FFFF          <2> 		call run
  4738                              <2> 	noruniftest:
  4739 000036EF C605[E3370000]01    <2> 		mov byte [runnextline], 1
  4740 000036F6 8B3D[0D370000]      <2> 		mov edi, [batchedi]
  4741 000036FC 803F00              <2> 		cmp byte [edi], 0
  4742 000036FF 0F856CFFFFFF        <2> 		jne near batchrunloop
  4743                              <2> 	nobatchfoundrun:
  4744 00003705 C605[828C0300]00    <2> 		mov byte [BATCHISON], 0
  4745 0000370C C3                  <2> 		ret
  4746                              <2> 	
  4747 0000370D 00000000            <2> batchedi dd 0	
  4748                              <2> 	
  4749                              <2> 	iftestbatch:
  4750 00003711 BE[1A8C0300]        <2> 		mov esi, IFTRUE
  4751 00003716 01DE                <2> 		add esi, ebx
  4752 00003718 803E00              <2> 		cmp byte [esi], 0
  4753 0000371B 0F85BCFFFFFF        <2> 		jne near doneiftest
  4754 00003721 881D[E4370000]      <2> 		mov [iffalsebuf], bl
  4755 00003727 803D[838C0300]01    <2> 		cmp byte [LOOPON], 1
  4756 0000372E 0F8513000000        <2> 		jne near fifindbatch
  4757 00003734 E938FFFFFF          <2> 		jmp batchrunloop
  4758                              <2> 	elsetestbatch:
  4759 00003739 C60601              <2> 		mov byte [esi], 1
  4760 0000373C 81C705000000        <2> 		add edi, 5
  4761 00003742 E92AFFFFFF          <2> 		jmp batchrunloop
  4762                              <2> 	fifindbatch:
  4763 00003747 66B96966            <2> 		mov cx, "if"
  4764 0000374B 66B86669            <2> 		mov ax, "fi"
  4765 0000374F 663907              <2> 		cmp [edi], ax
  4766 00003752 0F8424000000        <2> 		je near fifoundbatch
  4767 00003758 66390F              <2> 		cmp [edi], cx
  4768 0000375B 0F8465000000        <2> 		je near iffoundbatch
  4769 00003761 803F00              <2> 		cmp byte [edi], 0
  4770 00003764 0F8412000000        <2> 		je near fifoundbatch
  4771 0000376A B8656C7365          <2> 		mov eax, "else"
  4772 0000376F 3907                <2> 		cmp [edi], eax
  4773 00003771 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4774 00003777 E973FFFFFF          <2> 		jmp noruniftest
  4775                              <2> 	fifoundbatch:
  4776 0000377C 81C702000000        <2> 		add edi, 2
  4777 00003782 B00A                <2> 		mov al, 10
  4778 00003784 3807                <2> 		cmp [edi], al
  4779 00003786 0F840B000000        <2> 		je near goodfibatch
  4780 0000378C 803F00              <2> 		cmp byte [edi], 0
  4781 0000378F 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4782 00003795 EBB0                <2> 		jmp fifindbatch
  4783                              <2> 	goodfibatch:
  4784 00003797 B001                <2> 		mov al, 1
  4785 00003799 2805[198C0300]      <2> 		sub [IFON], al 
  4786 0000379F A0[198C0300]        <2> 		mov al, [IFON]
  4787 000037A4 8A1D[E4370000]      <2> 		mov bl, [iffalsebuf]
  4788 000037AA 38D8                <2> 		cmp al, bl
  4789 000037AC 7799                <2> 		ja fifindbatch
  4790 000037AE 8B35[DA2C0000]      <2> 		mov esi, [currentcommandloc]
  4791 000037B4 81EF02000000        <2> 		sub edi, 2
  4792 000037BA C605[E3370000]00    <2> 		mov byte [runnextline], 0
  4793 000037C1 E9ABFEFFFF          <2> 		jmp batchrunloop
  4794                              <2> 	iffoundbatch:
  4795 000037C6 B020                <2> 		mov al, ' '
  4796 000037C8 81C702000000        <2> 		add edi, 2
  4797 000037CE 3807                <2> 		cmp [edi], al
  4798 000037D0 0F8571FFFFFF        <2> 		jne near fifindbatch
  4799 000037D6 B001                <2> 		mov al, 1
  4800 000037D8 0005[198C0300]      <2> 		add [IFON], al
  4801 000037DE E964FFFFFF          <2> 		jmp fifindbatch
  4802                              <2> 		
  4803                              <2> 		
  4804 000037E3 01                  <2> runnextline db 1
  4805 000037E4 00                  <2> iffalsebuf db 0
  4806 000037E5 C3                  <2> notbatch: ret 
  4807                              <1> %ifdef network.included
  4808                              <1> 	%include 'source/programs/arp.asm'
  4809 000037E6 FF2C61727000        <2> db 255,44,"arp",0
  4810                              <2> 	;ARP TESTING
  4811                              <2> arptest:
  4812 000037EC 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  4813 000037F2 81C604000000        <2> 	add esi, 4
  4814 000037F8 E888280000          <2> 	call strtoip
  4815 000037FD 890D[A4380000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4816 00003803 E8C3280000          <2> 	call showip
  4817 00003808 803D[A8380000]01    <2> 	cmp byte [arpconfig], 1
  4818 0000380F 7405                <2> 	je arptest2
  4819 00003811 E841000000          <2> 	call arpinit
  4820                              <2> arptest2:	;try to reach 192.168.0.1
  4821 00003816 8B0D[63610000]      <2> 	mov ecx, [sysmac]
  4822 0000381C 668B1D[67610000]    <2> 	mov bx, [sysmac + 4]
  4823 00003823 890D[84380000]      <2> 	mov [sourcemac], ecx
  4824 00003829 66891D[88380000]    <2> 	mov [sourcemac + 4],bx
  4825 00003830 890D[94380000]      <2> 	mov [arpsenderinfo], ecx
  4826 00003836 66891D[98380000]    <2> 	mov [arpsenderinfo + 4], bx
  4827 0000383D BF[7E380000]        <2> 	mov edi, frame
  4828 00003842 BE[A8380000]        <2> 	mov esi, framend
  4829 00003847 E807280000          <2> 	call sendpacket
  4830 0000384C BE[AA610000]        <2> 	mov esi, line
  4831 00003851 E8A1E3FFFF          <2> 	call print
  4832 00003856 C3                  <2> 	ret
  4833                              <2> 	
  4834                              <2> arpinit:
  4835 00003857 BE[A9380000]        <2> 	mov esi, arptable
  4836 0000385C BF[63610000]        <2> 	mov edi, sysmac
  4837 00003861 BB[5F610000]        <2> 	mov ebx, sysip
  4838 00003866 8B0F                <2> 	mov ecx, [edi]
  4839 00003868 890E                <2> 	mov [esi], ecx
  4840 0000386A 668B4F04            <2> 	mov cx, [edi + 4]
  4841 0000386E 894E04              <2> 	mov [esi + 4], ecx
  4842 00003871 8B0B                <2> 	mov ecx, [ebx]
  4843 00003873 894E06              <2> 	mov [esi + 6], ecx
  4844 00003876 C605[A8380000]01    <2> 	mov byte [arpconfig], 1
  4845 0000387D C3                  <2> 	ret
  4846                              <2> 	
  4847                              <2> ;example frame
  4848                              <2> frame:
  4849 0000387E FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4850 00003884 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4851 0000388A 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4852                              <2> 	;example packet
  4853 0000388C 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4854 0000388E 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4855 00003890 0604                <2> 					db 6,4			;length of mac, length of ip
  4856 00003892 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4857 00003894 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4858 0000389A C0A80073            <2> 					db 192,168,0,115		;ip
  4859 0000389E 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4860 000038A4 C0A80000            <2> 					db 192,168,0,0			;ip
  4861                              <2> framend:
  4862                              <2> 
  4863 000038A8 00                  <2> arpconfig db 0
  4864                              <2> arptable:	;mac,ip
  4865 000038A9 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4866 000038B2 00<rept>            <2>
  4867                              <2> arptableend:	
  4868                              <1> %endif
  4869                              <1> %include 'source/programs/batch.asm'
  4870 0000390D FF2C626174636800    <2> db 255,44,"batch",0
  4871                              <2> 	batchst: 
  4872 00003915 8B3D[DA2C0000]      <2> 		mov edi, [currentcommandloc]
  4873 0000391B 81C706000000        <2> 		add edi, 6
  4874 00003921 803F00              <2> 		cmp byte [edi], 0
  4875 00003924 0F846D000000        <2> 		je near nonamefound
  4876 0000392A BE00004000          <2> 		mov esi, 0x400000
  4877 0000392F E816220000          <2> 		call loadfile
  4878 00003934 89D0                <2> 		mov eax, edx
  4879 00003936 3D94010000          <2> 		cmp eax, 404
  4880 0000393B 7465                <2> 		je goodbatchname
  4881 0000393D BE[48390000]        <2> 		mov esi, badbatchname
  4882 00003942 E8B0E2FFFF          <2> 		call print
  4883 00003947 C3                  <2> 		ret
  4884 00003948 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4885 00003951 20616C726561647920- <2>
  4886 0000395A 657869737473210A00  <2>
  4887 00003963 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4888 0000396C 746F20747970652061- <2>
  4889 00003975 206E616D6520616674- <2>
  4890 0000397E 65722074686520636F- <2>
  4891 00003987 6D6D616E642E0A00    <2>
  4892 0000398F 00000000            <2> 		esicache3 dd 0
  4893 00003993 00000000            <2> 		esicache2 dd 0
  4894                              <2> 	nonamefound:
  4895 00003997 BE[63390000]        <2> 		mov esi, namenotfoundbatch
  4896 0000399C E856E2FFFF          <2> 		call print
  4897 000039A1 C3                  <2> 		ret
  4898                              <2> 	goodbatchname:
  4899 000039A2 BE00004000          <2> 		mov esi, 0x400000
  4900                              <2> 	batchcreate:
  4901 000039A7 8935[8F390000]      <2> 		mov [esicache3], esi
  4902 000039AD BF00008000          <2> 		mov edi, 0x800000
  4903 000039B2 B00A                <2> 		mov al, 10
  4904 000039B4 B307                <2> 		mov bl, 7
  4905 000039B6 B404                <2> 		mov ah, 4
  4906 000039B8 CD30                <2> 		int 30h
  4907 000039BA 8935[93390000]      <2> 		mov [esicache2], esi
  4908 000039C0 8A0E                <2> 		mov cl, [esi]
  4909 000039C2 8B35[8F390000]      <2> 		mov esi, [esicache3]
  4910 000039C8 BB[FC390000]        <2> 		mov ebx, exitword
  4911 000039CD E847F3FFFF          <2> 		call cndtest
  4912 000039D2 3C01                <2> 		cmp al, 1
  4913 000039D4 7411                <2> 		je endbatchcreate
  4914 000039D6 3C02                <2> 		cmp al, 2
  4915 000039D8 740D                <2> 		je endbatchcreate
  4916 000039DA 8B35[93390000]      <2> 		mov esi, [esicache2]
  4917 000039E0 B00A                <2> 		mov al, 10
  4918 000039E2 8806                <2> 		mov [esi], al
  4919 000039E4 46                  <2> 		inc esi
  4920 000039E5 EBC0                <2> 		jmp batchcreate
  4921                              <2> 	endbatchcreate:
  4922 000039E7 8B35[8F390000]      <2> 		mov esi, [esicache3]
  4923 000039ED 31C0                <2> 		xor eax, eax
  4924 000039EF 8806                <2> 		mov [esi], al
  4925 000039F1 BE00004000          <2> 		mov esi, 0x400000
  4926 000039F6 E8FCE1FFFF          <2> 		call print
  4927 000039FB C3                  <2> 		ret
  4928                              <2> 	
  4929 000039FC 5C7800              <2> 	exitword db "\x",0
  4930 000039FF 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4931 00003A08 6F20657869742E0A00  <2>
  4932                              <1> %ifdef gui.background
  4933                              <1> 	%include 'source/programs/background.asm'
  4934                              <1> %endif
  4935                              <1> %include 'source/programs/beep.asm'
  4936 00003A11 FF2C6265657000      <2> 	db 255,44,"beep",0
  4937                              <2> beep:
  4938 00003A18 B8[3D3A0000]        <2> 	mov eax, beepstart
  4939 00003A1D A3[4D020000]        <2> 	mov [soundpos], eax
  4940 00003A22 B8[413A0000]        <2> 	mov eax, beepend
  4941 00003A27 A3[51020000]        <2> 	mov [soundendpos], eax
  4942 00003A2C C605[4A020000]01    <2> 	mov byte [soundon], 1
  4943                              <2> waitforsoundendbeep:
  4944 00003A33 A0[4A020000]        <2> 	mov al, [soundon]
  4945 00003A38 3C00                <2> 	cmp al, 0
  4946 00003A3A 75F7                <2> 	jne waitforsoundendbeep
  4947 00003A3C C3                  <2> 	ret
  4948                              <2> 	
  4949                              <2> beepstart:
  4950 00003A3D 3200D111            <2> 	dw 50, 4561
  4951                              <2> beepend:
  4952                              <1> %ifdef dos.compatible
  4953                              <1> %else
  4954                              <1> 	%include 'source/programs/boot.asm'
  4955 00003A41 FF2C626F6F7400      <2> db 255,44,"boot",0
  4956                              <2> quickboot:
  4957                              <2> 	;load and jump to the bootloader
  4958                              <2> 	; mov ecx, 1
  4959                              <2> 	; xor ebx, ebx
  4960                              <2> 	; mov esi, 0x400000
  4961                              <2> 	; call diskr
  4962                              <2> 	; mov ax, LINEAR_SEL
  4963                              <2> 	; mov fs, ax
  4964                              <2> 	; mov esi, 0x400000
  4965                              <2> 	; mov edi, 0x7C00
  4966                              <2> 	; xor ebx, ebx
  4967                              <2> ; .lp:
  4968                              <2> 	; mov ecx, [esi+ebx]
  4969                              <2> 	; mov [fs:edi+ebx], ecx
  4970                              <2> 	; add ebx, 4
  4971                              <2> 	; cmp ebx, 512
  4972                              <2> 	; jb .lp
  4973 00003A48 66BB[583A]          <2> 	mov bx, bootload
  4974 00003A4C 66891D[CE0C0000]    <2> 	mov [realmodeptr], bx
  4975 00003A53 E964D1FFFF          <2> 	jmp realmode
  4976                              <2> [BITS 16]
  4977                              <2> bootload:
  4978 00003A58 B80300              <2> 	mov ax, 3
  4979 00003A5B 31DB                <2> 	xor bx, bx
  4980 00003A5D CD10                <2> 	int 10h
  4981 00003A5F EA007C0000          <2> 	jmp 0:0x7C00
  4982                              <2> [BITS 32]
  4983                              <1> %endif
  4984                              <1> %include 'source/programs/cd.asm'
  4985 00003A64 FF2C636400          <2> db 255,44,"cd",0
  4986                              <2> cd:
  4987 00003A69 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  4988 00003A6F 81C603000000        <2> 	add esi, 3
  4989 00003A75 8B3D[108A0300]      <2> 	mov edi, [currentfolderloc]
  4990 00003A7B 893D[0C8A0300]      <2> 	mov [lastfolderloc], edi
  4991 00003A81 81C7[148A0300]      <2> 	add edi, currentfolder
  4992 00003A87 4F                  <2> 	dec edi
  4993 00003A88 66813E2E2E          <2> 	cmp word [esi], ".."
  4994 00003A8D 742A                <2> 	je .moveup
  4995 00003A8F 47                  <2> 	inc edi
  4996                              <2> .movedown:
  4997 00003A90 8A06                <2> 	mov al, [esi]
  4998 00003A92 8807                <2> 	mov [edi], al
  4999 00003A94 47                  <2> 	inc edi
  5000 00003A95 46                  <2> 	inc esi
  5001 00003A96 3C00                <2> 	cmp al, 0
  5002 00003A98 740A                <2> 	je .donecd
  5003 00003A9A 81FF[148C0300]      <2> 	cmp edi, currentfolderend
  5004 00003AA0 72EE                <2> 	jb .movedown
  5005 00003AA2 30C0                <2> 	xor al, al
  5006                              <2> .donecd:
  5007 00003AA4 4F                  <2> 	dec edi
  5008 00003AA5 C6072F              <2> 	mov byte [edi], '/'
  5009 00003AA8 47                  <2> 	inc edi
  5010 00003AA9 C60700              <2> 	mov byte [edi], 0
  5011 00003AAC 81EF[148A0300]      <2> 	sub edi, currentfolder
  5012 00003AB2 893D[108A0300]      <2> 	mov [currentfolderloc], edi
  5013 00003AB8 C3                  <2> 	ret
  5014                              <2> .moveup:
  5015 00003AB9 31C0                <2> 	xor eax, eax
  5016 00003ABB A3[0C8A0300]        <2> 	mov [lastfolderloc], eax
  5017                              <2> .moveuploop:
  5018 00003AC0 4F                  <2> 	dec edi
  5019 00003AC1 8A07                <2> 	mov al, [edi]
  5020 00003AC3 81FF[148A0300]      <2> 	cmp edi, currentfolder
  5021 00003AC9 763B                <2> 	jbe .moveupover
  5022 00003ACB 3C2F                <2> 	cmp al, '/'
  5023 00003ACD 75F1                <2> 	jne .moveuploop
  5024 00003ACF C6072F              <2> 	mov byte [edi], '/'
  5025 00003AD2 47                  <2> 	inc edi
  5026 00003AD3 C60700              <2> 	mov byte [edi], 0
  5027 00003AD6 81EF[148A0300]      <2> 	sub edi, currentfolder
  5028 00003ADC 893D[108A0300]      <2> 	mov [currentfolderloc], edi
  5029 00003AE2 81C7[148A0300]      <2> 	add edi, currentfolder
  5030 00003AE8 4F                  <2> 	dec edi
  5031                              <2> .lastfolder:
  5032 00003AE9 4F                  <2> 	dec edi
  5033 00003AEA 8A07                <2> 	mov al, [edi]
  5034 00003AEC 81FF[148A0300]      <2> 	cmp edi, currentfolder
  5035 00003AF2 7604                <2> 	jbe .donemoveup
  5036 00003AF4 3C2F                <2> 	cmp al, '/'
  5037 00003AF6 75F1                <2> 	jne .lastfolder
  5038                              <2> .donemoveup:
  5039 00003AF8 47                  <2> 	inc edi
  5040 00003AF9 81EF[148A0300]      <2> 	sub edi, currentfolder
  5041 00003AFF 893D[0C8A0300]      <2> 	mov [lastfolderloc], edi
  5042 00003B05 C3                  <2> 	ret
  5043                              <2> .moveupover:
  5044 00003B06 BF[148A0300]        <2> 	mov edi, currentfolder
  5045 00003B0B C6072F              <2> 	mov byte [edi], '/'
  5046 00003B0E 47                  <2> 	inc edi
  5047 00003B0F C60700              <2> 	mov byte [edi], 0
  5048 00003B12 31C0                <2> 	xor eax, eax
  5049 00003B14 A3[0C8A0300]        <2> 	mov [lastfolderloc], eax
  5050 00003B19 40                  <2> 	inc eax
  5051 00003B1A A3[108A0300]        <2> 	mov [currentfolderloc], eax
  5052 00003B1F C3                  <2> 	ret
  5053                              <1> %include 'source/programs/charmap.asm'
  5054 00003B20 00                  <2> charmapnum db 0
  5055 00003B21 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5056 00003B2A 00                  <2>
  5057 00003B2B 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  5058 00003B31 81C608000000        <2> 	add esi, 8
  5059 00003B37 803E00              <2> 	cmp byte [esi], 0
  5060 00003B3A 7412                <2> 	je .nospecific
  5061 00003B3C E808F5FFFF          <2> 	call cnvrthextxt
  5062 00003B41 6689C8              <2> 	mov ax, cx
  5063 00003B44 66BB0700            <2> 	mov bx, 7
  5064 00003B48 E835E7FFFF          <2> 	call prcharq
  5065 00003B4D C3                  <2> 	ret
  5066                              <2> .nospecific:
  5067 00003B4E 66BB0700            <2> 	mov bx, 7
  5068 00003B52 66B82000            <2> 	mov ax, " "
  5069 00003B56 C605[203B0000]00    <2> 	mov byte [charmapnum], 0
  5070 00003B5D E820E7FFFF          <2> 	call prcharq
  5071 00003B62 E81BE7FFFF          <2> 	call prcharq
  5072 00003B67 E816E7FFFF          <2> 	call prcharq
  5073 00003B6C E811E7FFFF          <2> 	call prcharq
  5074 00003B71 66B83000            <2> 	mov ax, "0"
  5075                              <2> charmapnumprnt:
  5076 00003B75 E808E7FFFF          <2> 	call prcharq
  5077 00003B7A 6640                <2> 	inc ax
  5078 00003B7C 6650                <2> 	push ax
  5079 00003B7E 66B82000            <2> 	mov ax, " "
  5080 00003B82 E8FBE6FFFF          <2> 	call prcharq
  5081 00003B87 6658                <2> 	pop ax
  5082 00003B89 663D3900            <2> 	cmp ax, "9"
  5083 00003B8D 76E6                <2> 	jbe charmapnumprnt
  5084 00003B8F 66B84100            <2> 	mov ax, "A"
  5085                              <2> charmapnumprnt2:
  5086 00003B93 E8EAE6FFFF          <2> 	call prcharq
  5087 00003B98 6640                <2> 	inc ax
  5088 00003B9A 6650                <2> 	push ax
  5089 00003B9C 66B82000            <2> 	mov ax, " "
  5090 00003BA0 E8DDE6FFFF          <2> 	call prcharq
  5091 00003BA5 6658                <2> 	pop ax
  5092 00003BA7 663D4700            <2> 	cmp ax, "G"
  5093 00003BAB 72E6                <2> 	jb charmapnumprnt2
  5094                              <2> 	
  5095 00003BAD BE[AA610000]        <2> 	mov esi, line
  5096 00003BB2 E81CE0FFFF          <2> 	call printquiet
  5097 00003BB7 6631C0              <2> 	xor ax, ax
  5098 00003BBA 6689C1              <2> 	mov cx, ax
  5099 00003BBD E826F3FFFF          <2> 	call showhexsmall
  5100 00003BC2 E96C000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5101                              <2> charmapcopy:
  5102 00003BC7 6640                <2> 	inc ax
  5103 00003BC9 663D0800            <2> 	cmp ax, 8
  5104 00003BCD 7464                <2> 	je charmapnocopy
  5105 00003BCF 663D0900            <2> 	cmp ax, 9
  5106 00003BD3 745E                <2> 	je charmapnocopy
  5107 00003BD5 663D0A00            <2> 	cmp ax, 10
  5108 00003BD9 7458                <2> 	je charmapnocopy
  5109 00003BDB 663D0D00            <2> 	cmp ax, 13
  5110 00003BDF 7452                <2> 	je charmapnocopy
  5111 00003BE1 663DFF00            <2> 	cmp ax, 255
  5112 00003BE5 744C                <2> 	je charmapnocopy
  5113 00003BE7 663D0001            <2> 	cmp ax, 256
  5114 00003BEB 7445                <2> 	je nomorecharmap
  5115 00003BED 6650                <2> 	push ax
  5116 00003BEF E88EE6FFFF          <2> 	call prcharq
  5117 00003BF4 66B82000            <2> 	mov ax, " "
  5118 00003BF8 E885E6FFFF          <2> 	call prcharq
  5119 00003BFD 6658                <2> 	pop ax
  5120                              <2> charmapcopycheck:
  5121 00003BFF FE05[203B0000]      <2> 	inc byte [charmapnum]
  5122 00003C05 803D[203B0000]10    <2> 	cmp byte [charmapnum], 16
  5123 00003C0C 72B9                <2> 	jb charmapcopy
  5124 00003C0E 6650                <2> 	push ax
  5125 00003C10 BE[AA610000]        <2> 	mov esi, line
  5126 00003C15 E8B9DFFFFF          <2> 	call printquiet
  5127 00003C1A 6658                <2> 	pop ax
  5128 00003C1C 3CFF                <2> 	cmp al, 255
  5129 00003C1E 7412                <2> 	je nomorecharmap
  5130 00003C20 88C1                <2> 	mov cl, al
  5131 00003C22 FEC1                <2> 	inc cl
  5132 00003C24 E8BFF2FFFF          <2> 	call showhexsmall
  5133 00003C29 C605[203B0000]00    <2> 	mov byte [charmapnum], 0
  5134 00003C30 EB95                <2> 	jmp charmapcopy
  5135                              <2> nomorecharmap:
  5136 00003C32 C3                  <2> 	ret
  5137                              <2> charmapnocopy:
  5138 00003C33 6650                <2> 	push ax
  5139 00003C35 66B82000            <2> 	mov ax, " "
  5140 00003C39 E844E6FFFF          <2> 	call prcharq
  5141 00003C3E E83FE6FFFF          <2> 	call prcharq
  5142 00003C43 6658                <2> 	pop ax
  5143 00003C45 EBB8                <2> 	jmp charmapcopycheck
  5144                              <1> %ifdef gui.included
  5145                              <1> 	%include 'source/programs/circle.asm'
  5146                              <1> %endif
  5147                              <1> %include 'source/programs/clear.asm'
  5148 00003C47 FF2C636C65617200    <2> db 255,44,"clear",0
  5149 00003C4F E84FE0FFFF          <2> 		call clear
  5150 00003C54 C3                  <2> 		ret 
  5151                              <1> %include 'source/programs/cpuid.asm'
  5152 00003C55 FF2C637075696400    <2> db 255,44,"cpuid",0
  5153 00003C5D 31C0                <2> 	xor eax, eax
  5154 00003C5F 0FA2                <2> 	cpuid
  5155 00003C61 891D[B23C0000]      <2> 	mov [cpuidbuf], ebx
  5156 00003C67 8915[B63C0000]      <2> 	mov [cpuidbuf + 4], edx
  5157 00003C6D 890D[BA3C0000]      <2> 	mov [cpuidbuf + 8], ecx
  5158 00003C73 BE[B23C0000]        <2> 	mov esi, cpuidbuf
  5159 00003C78 E87ADFFFFF          <2> 	call print
  5160 00003C7D BE[AA610000]        <2> 	mov esi, line
  5161 00003C82 E870DFFFFF          <2> 	call print
  5162 00003C87 B801000000          <2> 	mov eax, 1
  5163 00003C8C 0FA2                <2> 	cpuid
  5164 00003C8E 89C1                <2> 	mov ecx, eax
  5165 00003C90 C605[E72E0000]02    <2> 	mov byte [firsthexshown], 2
  5166 00003C97 E860F2FFFF          <2> 	call showhex
  5167 00003C9C B808000080          <2> 	mov eax, 0x80000008
  5168 00003CA1 0FA2                <2> 	cpuid
  5169 00003CA3 89C1                <2> 	mov ecx, eax
  5170 00003CA5 C605[E72E0000]02    <2> 	mov byte [firsthexshown], 2
  5171 00003CAC E84BF2FFFF          <2> 	call showhex
  5172 00003CB1 C3                  <2> 	ret
  5173                              <2> 	
  5174 00003CB2 00<rept>            <2> cpuidbuf times 13 db 0
  5175                              <2> cpuidvendorend:
  5176                              <1> %include 'source/programs/date.asm'
  5177 00003CBF 082E30303030303030- <2> timenscache db 8,".000000000"
  5178 00003CC8 3030                <2>
  5179 00003CCA 200A00              <2> timenscacheend: db " ",10,0
  5180 00003CCD 00                  <2> istimeset db 0
  5181 00003CCE 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5182 00003CD7 2063757272656E7420- <2>
  5183 00003CE0 554E49582074696D65- <2>
  5184 00003CE9 3A0A00              <2>
  5185 00003CEC 00<rept>            <2> timeinputbuffer times 12 db 0
  5186 00003CF8 00                  <2> timeinputbend: db 0
  5187                              <2> 
  5188 00003CF9 FF2C6461746500      <2> db 255,44,"date",0
  5189                              <2> 	;cmp byte [istimeset], 0
  5190                              <2> 	;jne timeisset
  5191 00003D00 E880000000          <2> 	call time
  5192 00003D05 E828020000          <2> 	call timeconvert	
  5193                              <2> 	; mov esi, settimemsg
  5194                              <2> 	; call print
  5195                              <2> 	; mov esi, timeinputbuffer
  5196                              <2> 	; mov edi, timeinputbend
  5197                              <2> 	; call readline
  5198                              <2> 	; mov esi, timeinputbuffer
  5199                              <2> 	; xor edi, edi
  5200                              <2> 	; call cnvrttxt
  5201 00003D0A 890D[42020000]      <2> 	mov [timeseconds], ecx
  5202                              <2> 	;xor ecx, ecx
  5203                              <2> 	;mov [timenanoseconds], ecx
  5204 00003D10 C605[CD3C0000]01    <2> 	mov byte [istimeset], 1
  5205                              <2> timeisset:
  5206 00003D17 8B0D[42020000]      <2> 	mov ecx, [timeseconds]
  5207 00003D1D E895F2FFFF          <2> 	call showdec
  5208                              <2> 	
  5209 00003D22 8B0D[46020000]      <2> 	mov ecx, [timenanoseconds]
  5210 00003D28 BE[BF3C0000]        <2> 	mov esi, timenscache
  5211 00003D2D C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5212 00003D34 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5213 00003D3B C6460A30            <2> 	mov byte [esi + 10], "0"
  5214 00003D3F BE[CA3C0000]        <2> 	mov esi, timenscacheend
  5215 00003D44 E860F0FFFF          <2> 	call convert
  5216 00003D49 BE[BF3C0000]        <2> 	mov esi, timenscache
  5217 00003D4E E880DEFFFF          <2> 	call printquiet
  5218                              <2> 	
  5219 00003D53 E82D000000          <2> 	call time
  5220 00003D58 BE[9D400000]        <2> 	mov esi, timeshow
  5221 00003D5D E871DEFFFF          <2> 	call printquiet
  5222 00003D62 BE[AA610000]        <2> 	mov esi, line
  5223 00003D67 E867DEFFFF          <2> 	call printquiet
  5224 00003D6C BE[A6400000]        <2> 	mov esi, dateshow
  5225 00003D71 E85DDEFFFF          <2> 	call printquiet
  5226 00003D76 BE[AA610000]        <2> 	mov esi, line
  5227 00003D7B E853DEFFFF          <2> 	call printquiet
  5228 00003D80 E9BE000000          <2> 	jmp findday
  5229                              <2> time:
  5230 00003D85 E851010000          <2> 	call tstackput1
  5231 00003D8A B00A                <2> 	mov al,10			;Get RTC register A
  5232 00003D8C E87B010000          <2> 	call tget1
  5233 00003D91 A880                <2> 	test al,0x80			;Is update in progress?
  5234 00003D93 75F0                <2> 	jne time				; yes, wait
  5235                              <2> 
  5236 00003D95 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5237 00003D97 E870010000          <2> 	call tget1
  5238 00003D9C A2[94400000]        <2> 	mov [RTCtimeSecond],al
  5239                              <2> 
  5240 00003DA1 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5241 00003DA3 E864010000          <2> 	call tget1
  5242 00003DA8 A2[95400000]        <2> 	mov [RTCtimeMinute],al
  5243                              <2> 
  5244 00003DAD B004                <2> 	mov al,0x04			;Get hours (see notes)
  5245 00003DAF E858010000          <2> 	call tget1
  5246 00003DB4 A2[96400000]        <2> 	mov [RTCtimeHour],al
  5247                              <2> 
  5248 00003DB9 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5249 00003DBB E84C010000          <2> 	call tget1
  5250 00003DC0 A2[97400000]        <2> 	mov [RTCtimeDay],al
  5251                              <2> 
  5252 00003DC5 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5253 00003DC7 E840010000          <2> 	call tget1
  5254 00003DCC 241F                <2> 	and al, 11111b
  5255 00003DCE A2[98400000]        <2> 	mov [RTCtimeMonth],al
  5256                              <2> 
  5257 00003DD3 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5258 00003DD5 E832010000          <2> 	call tget1
  5259 00003DDA A2[99400000]        <2> 	mov [RTCtimeYear],al
  5260                              <2> 	
  5261 00003DDF BE[9D400000]        <2> 	mov esi, timeshow
  5262 00003DE4 8A2D[96400000]      <2> 	mov ch, [RTCtimeHour]
  5263 00003DEA E828010000          <2> 	call tput1
  5264 00003DEF 8A2D[95400000]      <2> 	mov ch, [RTCtimeMinute]
  5265 00003DF5 E81D010000          <2> 	call tput1
  5266 00003DFA 8A2D[94400000]      <2> 	mov ch, [RTCtimeSecond]
  5267 00003E00 E812010000          <2> 	call tput1
  5268 00003E05 BE[A6400000]        <2> 	mov esi, dateshow
  5269 00003E0A 8A2D[98400000]      <2> 	mov ch, [RTCtimeMonth]
  5270 00003E10 E802010000          <2> 	call tput1
  5271 00003E15 8A2D[97400000]      <2> 	mov ch, [RTCtimeDay]
  5272 00003E1B E8F7000000          <2> 	call tput1
  5273 00003E20 B520                <2> 	mov ch, 0x20
  5274 00003E22 E8F0000000          <2> 	call tput1
  5275 00003E27 4E                  <2> 	dec esi
  5276 00003E28 8A2D[99400000]      <2> 	mov ch, [RTCtimeYear]
  5277 00003E2E E8E4000000          <2> 	call tput1
  5278 00003E33 E8BD000000          <2> 	call tstackget1
  5279 00003E38 C3                  <2> 	ret
  5280 00003E39 BE[9D400000]        <2> 	mov esi, timeshow
  5281 00003E3E E8B4DDFFFF          <2> 	call print
  5282                              <2> ;get day of week
  5283                              <2> ;add these:
  5284                              <2> ;century value
  5285                              <2> ;last 2 digits of year
  5286                              <2> ;last 2 digits of year right shifted twice
  5287                              <2> ;month table value
  5288                              <2> ;day of the month
  5289                              <2> ;divide these by 7
  5290                              <2> ;the remainder is the day
  5291                              <2> findday:
  5292 00003E43 31C0                <2> 	xor eax, eax
  5293                              <2> ;first convert the values from BCD to hex
  5294 00003E45 A0[97400000]        <2> 	mov al, [RTCtimeDay]
  5295 00003E4A E873000000          <2> 	call converttohex
  5296 00003E4F 8825[9A400000]      <2> 	mov [dayhex], ah
  5297 00003E55 A0[98400000]        <2> 	mov al, [RTCtimeMonth]
  5298 00003E5A E863000000          <2> 	call converttohex
  5299 00003E5F 8825[9B400000]      <2> 	mov [monthhex], ah
  5300 00003E65 A0[99400000]        <2> 	mov al, [RTCtimeYear]
  5301 00003E6A E853000000          <2> 	call converttohex
  5302 00003E6F 8825[9C400000]      <2> 	mov [yearhex], ah
  5303 00003E75 31C0                <2> 	xor eax, eax
  5304 00003E77 A0[9C400000]        <2> 	mov al, [yearhex]
  5305 00003E7C C0E802              <2> 	shr al, 2
  5306 00003E7F 0205[9C400000]      <2> 	add al, [yearhex]
  5307 00003E85 0506000000          <2> 	add eax, 6
  5308 00003E8A 31DB                <2> 	xor ebx, ebx
  5309 00003E8C 8A1D[9B400000]      <2> 	mov bl, [monthhex]
  5310 00003E92 FECB                <2> 	dec bl
  5311 00003E94 81C3[BB400000]      <2> 	add ebx, month
  5312 00003E9A 31C9                <2> 	xor ecx, ecx
  5313 00003E9C 8A0B                <2> 	mov cl, [ebx]
  5314 00003E9E 01C8                <2> 	add eax, ecx
  5315 00003EA0 8A0D[9A400000]      <2> 	mov cl, [dayhex]
  5316 00003EA6 01C8                <2> 	add eax, ecx
  5317 00003EA8 66BB0700            <2> 	mov bx, 7
  5318 00003EAC 31D2                <2> 	xor edx, edx
  5319 00003EAE 66F7F3              <2> 	div bx
  5320 00003EB1 C1E202              <2> 	shl edx, 2
  5321 00003EB4 81C2[C7400000]      <2> 	add edx, day
  5322 00003EBA 8B32                <2> 	mov esi, [edx]
  5323 00003EBC E836DDFFFF          <2> 	call print
  5324 00003EC1 C3                  <2> 	ret
  5325                              <2> 	
  5326                              <2> converttohex:
  5327 00003EC2 88C4                <2> 	mov ah, al
  5328 00003EC4 C0E804              <2> 	shr al, 4
  5329 00003EC7 C0E404              <2> 	shl ah, 4
  5330 00003ECA C0EC04              <2> 	shr ah, 4
  5331 00003ECD 3C00                <2> 	cmp al, 0
  5332 00003ECF 7409                <2> 	je noconverttohex
  5333                              <2> converttohexlp:
  5334 00003ED1 80C40A              <2> 	add ah, 10
  5335 00003ED4 FEC8                <2> 	dec al
  5336 00003ED6 3C00                <2> 	cmp al, 0
  5337 00003ED8 75F7                <2> 	jne converttohexlp
  5338                              <2> noconverttohex:
  5339 00003EDA C3                  <2> 	ret
  5340                              <2> 	
  5341                              <2> tstackput1:
  5342 00003EDB 8935[90400000]      <2> 	mov [tstack + 20], esi
  5343 00003EE1 BE[7C400000]        <2> 	mov esi, tstack
  5344 00003EE6 8906                <2> 	mov [esi], eax
  5345 00003EE8 895E04              <2> 	mov [esi + 4], ebx
  5346 00003EEB 894E08              <2> 	mov [esi + 8], ecx
  5347 00003EEE 89560C              <2> 	mov [esi + 12], edx
  5348 00003EF1 897E10              <2> 	mov [esi + 16], edi
  5349 00003EF4 C3                  <2> 	ret
  5350                              <2> 	
  5351                              <2> tstackget1:
  5352 00003EF5 BE[7C400000]        <2> 	mov esi, tstack
  5353 00003EFA 8B06                <2> 	mov eax, [esi]
  5354 00003EFC 8B5E04              <2> 	mov ebx, [esi + 4]
  5355 00003EFF 8B4E08              <2> 	mov ecx, [esi + 8]
  5356 00003F02 8B560C              <2> 	mov edx, [esi + 12]
  5357 00003F05 8B7E10              <2> 	mov edi, [esi + 16]
  5358 00003F08 8B7614              <2> 	mov esi, [esi + 20]
  5359 00003F0B C3                  <2> 	ret
  5360                              <2> 	
  5361                              <2> tget1:
  5362 00003F0C 66BA7000            <2> 	mov dx, 0x70
  5363 00003F10 EE                  <2> 	out dx, al
  5364 00003F11 6642                <2> 	inc dx
  5365 00003F13 EC                  <2> 	in al, dx
  5366 00003F14 664A                <2> 	dec dx
  5367 00003F16 C3                  <2> 	ret
  5368                              <2> 	
  5369                              <2> tput1:
  5370 00003F17 66C1E904            <2> 	shr cx, 4
  5371 00003F1B B030                <2> 	mov al, 48
  5372 00003F1D 00E8                <2> 	add al, ch
  5373 00003F1F 8806                <2> 	mov [esi], al
  5374 00003F21 46                  <2> 	inc esi
  5375 00003F22 B030                <2> 	mov al, 48
  5376 00003F24 C0E904              <2> 	shr cl, 4
  5377 00003F27 00C8                <2> 	add al, cl
  5378 00003F29 8806                <2> 	mov [esi], al
  5379 00003F2B 81C602000000        <2> 	add esi, 2
  5380 00003F31 C3                  <2> 	ret
  5381                              <2> 	
  5382                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5383 00003F32 31DB                <2> 	xor ebx, ebx
  5384 00003F34 31C9                <2> 	xor ecx, ecx
  5385 00003F36 31FF                <2> 	xor edi, edi
  5386 00003F38 31F6                <2> 	xor esi, esi
  5387                              <2> 	
  5388 00003F3A A0[94400000]        <2> 	mov al, [RTCtimeSecond]
  5389 00003F3F E87EFFFFFF          <2> 	call converttohex
  5390 00003F44 88E1                <2> 	mov cl, ah
  5391                              <2> 	
  5392 00003F46 A0[95400000]        <2> 	mov al, [RTCtimeMinute]
  5393 00003F4B E872FFFFFF          <2> 	call converttohex
  5394 00003F50 88E3                <2> 	mov bl, ah
  5395 00003F52 B83C000000          <2> 	mov eax, 60
  5396 00003F57 31D2                <2> 	xor edx, edx
  5397 00003F59 F7E3                <2> 	mul ebx
  5398 00003F5B 01C1                <2> 	add ecx, eax
  5399                              <2> 	
  5400 00003F5D A0[96400000]        <2> 	mov al, [RTCtimeHour]
  5401 00003F62 E85BFFFFFF          <2> 	call converttohex
  5402 00003F67 88E3                <2> 	mov bl, ah
  5403 00003F69 B8100E0000          <2> 	mov eax, 3600
  5404 00003F6E 31D2                <2> 	xor edx, edx
  5405 00003F70 F7E3                <2> 	mul ebx
  5406 00003F72 01C1                <2> 	add ecx, eax
  5407                              <2> 		
  5408 00003F74 31C0                <2> 	xor eax, eax
  5409 00003F76 A0[99400000]        <2> 	mov al, [RTCtimeYear]
  5410 00003F7B E842FFFFFF          <2> 	call converttohex
  5411 00003F80 6689C6              <2> 	mov si, ax
  5412 00003F83 66C1EE08            <2> 	shr si, 8
  5413 00003F87 6681FE4600          <2> 	cmp si, 70
  5414 00003F8C 7705                <2> 	ja .no100
  5415 00003F8E 6681C66400          <2> 	add si, 100
  5416                              <2> .no100:
  5417 00003F93 6681C66C07          <2> 	add si, 1900
  5418                              <2> 	
  5419 00003F98 BB[6E400000]        <2> 	mov ebx, .month
  5420 00003F9D A0[97400000]        <2> 	mov al, [RTCtimeDay]
  5421 00003FA2 E81BFFFFFF          <2> 	call converttohex
  5422 00003FA7 88E0                <2> 	mov al, ah
  5423 00003FA9 FEC8                <2> 	dec al
  5424 00003FAB 31D2                <2> 	xor edx, edx
  5425 00003FAD 88C2                <2> 	mov dl, al
  5426 00003FAF A0[98400000]        <2> 	mov al, [RTCtimeMonth]
  5427 00003FB4 E809FFFFFF          <2> 	call converttohex
  5428 00003FB9 88D0                <2> 	mov al, dl
  5429 00003FBB 88E2                <2> 	mov dl, ah
  5430 00003FBD 30E4                <2> 	xor ah, ah
  5431 00003FBF 6689D5              <2> 	mov bp, dx
  5432                              <2> 	
  5433 00003FC2 6689F7              <2> 	mov di, si
  5434 00003FC5 66C1EF02            <2> 	shr di, 2
  5435 00003FC9 66C1E702            <2> 	shl di, 2
  5436 00003FCD C605[6F400000]1C    <2> 	mov byte [.month + 1], 28
  5437 00003FD4 6639F7              <2> 	cmp di, si
  5438 00003FD7 7506                <2> 	jne .nofebmod
  5439 00003FD9 FE05[6F400000]      <2> 	inc byte [.month + 1]
  5440                              <2> .nofebmod:
  5441 00003FDF 664D                <2> 	dec bp
  5442 00003FE1 6681FD0000          <2> 	cmp bp, 0
  5443 00003FE6 7407                <2> 	je .ylp
  5444 00003FE8 8A13                <2> 	mov dl, [ebx]
  5445 00003FEA 01D0                <2> 	add eax, edx
  5446 00003FEC 43                  <2> 	inc ebx
  5447 00003FED EBF0                <2> 	jmp .nofebmod
  5448                              <2> 	
  5449                              <2> .ylp:
  5450 00003FEF 6689F7              <2> 	mov di, si
  5451 00003FF2 66C1EF02            <2> 	shr di, 2
  5452 00003FF6 66C1E702            <2> 	shl di, 2
  5453 00003FFA 81C18033E101        <2> 	add ecx, 31536000
  5454 00004000 6639F7              <2> 	cmp di, si
  5455 00004003 7506                <2> 	jne .noymod
  5456 00004005 81C180510100        <2> 	add ecx, 86400
  5457                              <2> .noymod:
  5458 0000400B 664E                <2> 	dec si
  5459 0000400D 6681FEB207          <2> 	cmp si, 1970
  5460 00004012 77DB                <2> 	ja .ylp
  5461                              <2> 	
  5462 00004014 BB80510100          <2> 	mov ebx, 86400
  5463 00004019 31D2                <2> 	xor edx, edx
  5464 0000401B F7E3                <2> 	mul ebx
  5465 0000401D 01C1                <2> 	add ecx, eax
  5466                              <2> 	
  5467 0000401F 31DB                <2> 	xor ebx, ebx
  5468 00004021 31D2                <2> 	xor edx, edx
  5469 00004023 B8100E0000          <2> 	mov eax, 3600
  5470 00004028 8A3D[7A400000]      <2> 	mov bh, [timezoneh]
  5471 0000402E 80FF80              <2> 	cmp bh, 128
  5472 00004031 720D                <2> 	jb .posh
  5473 00004033 28FB                <2> 	sub bl, bh
  5474 00004035 30FF                <2> 	xor bh, bh
  5475 00004037 F7E3                <2> 	mul ebx
  5476 00004039 01C1                <2> 	add ecx, eax
  5477 0000403B E906000000          <2> 	jmp .doneth
  5478                              <2> .posh:
  5479 00004040 86DF                <2> 	xchg bl, bh
  5480 00004042 F7E3                <2> 	mul ebx
  5481 00004044 29C1                <2> 	sub ecx, eax
  5482                              <2> .doneth:
  5483                              <2> 
  5484 00004046 31DB                <2> 	xor ebx, ebx	
  5485 00004048 31D2                <2> 	xor edx, edx
  5486 0000404A B83C000000          <2> 	mov eax, 60
  5487 0000404F 8A3D[7B400000]      <2> 	mov bh, [timezonem]
  5488 00004055 80FF80              <2> 	cmp bh, 128
  5489 00004058 720D                <2> 	jb .posm
  5490 0000405A 28FB                <2> 	sub bl, bh
  5491 0000405C 30FF                <2> 	xor bh, bh
  5492 0000405E F7E3                <2> 	mul ebx
  5493 00004060 01C1                <2> 	add ecx, eax
  5494 00004062 E906000000          <2> 	jmp .donetm
  5495                              <2> .posm:
  5496 00004067 86DF                <2> 	xchg bl, bh
  5497 00004069 F7E3                <2> 	mul ebx
  5498 0000406B 29C1                <2> 	sub ecx, eax
  5499                              <2> .donetm:
  5500                              <2> 
  5501 0000406D C3                  <2> 	ret
  5502                              <2> 	
  5503                              <2> 
  5504 0000406E 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5505 00004077 1F1E1F              <2>
  5506                              <2> 
  5507 0000407A FA                  <2> 	timezoneh db -6
  5508 0000407B 00                  <2> 	timezonem db 0
  5509 0000407C 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5510 00004085 000000000000000000- <2>
  5511 0000408E 000000000000        <2>
  5512 00004094 00                  <2> 	RTCtimeSecond db 0
  5513 00004095 00                  <2> 	RTCtimeMinute db 0
  5514 00004096 00                  <2> 	RTCtimeHour db 0
  5515 00004097 00                  <2> 	RTCtimeDay db 0
  5516 00004098 00                  <2> 	RTCtimeMonth db 0
  5517 00004099 00                  <2> 	RTCtimeYear db 0
  5518 0000409A 00                  <2> 	dayhex db 0
  5519 0000409B 00                  <2> 	monthhex db 0
  5520 0000409C 00                  <2> 	yearhex db 0
  5521 0000409D 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5522 000040A6 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5523 000040AF 302000              <2>
  5524                              <2> 	oldcentury:	;from 1700 to 1900
  5525 000040B2 040200              <2> 	db 4,2,0
  5526                              <2> 	century:	;from 2000 to 2500
  5527 000040B5 060402000604        <2> 	db 6,4,2,0,6,4
  5528                              <2> 	month:
  5529 000040BB 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5530 000040C4 000305              <2>
  5531                              <2> 	day:
  5532 000040C7 [E3400000]          <2> 	dd sunday
  5533 000040CB [EB400000]          <2> 	dd monday
  5534 000040CF [F3400000]          <2> 	dd tuesday
  5535 000040D3 [FC400000]          <2> 	dd wednesday
  5536 000040D7 [07410000]          <2> 	dd thursday
  5537 000040DB [11410000]          <2> 	dd friday
  5538 000040DF [19410000]          <2> 	dd saturday
  5539                              <2> sunday:
  5540 000040E3 53756E6461790A00    <2> 	db "Sunday",10,0
  5541                              <2> monday:
  5542 000040EB 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5543                              <2> tuesday:
  5544 000040F3 547565736461790A00  <2> 	db "Tuesday",10,0
  5545                              <2> wednesday:
  5546 000040FC 5765646E6573646179- <2> 	db "Wednesday",10,0
  5547 00004105 0A00                <2>
  5548                              <2> thursday:
  5549 00004107 54687572736461790A- <2> 	db "Thursday",10,0
  5550 00004110 00                  <2>
  5551                              <2> friday:
  5552 00004111 4672696461790A00    <2> 	db "Friday",10,0
  5553                              <2> saturday:
  5554 00004119 53617475726461790A- <2> 	db "Saturday",10,0
  5555 00004122 00                  <2>
  5556                              <1> %ifdef network.included
  5557                              <1> 	%include 'source/programs/dhcp.asm'
  5558 00004123 FF2C6468637000      <2> db 255,44,"dhcp",0
  5559                              <2> dhcp:
  5560 0000412A BE[EA410000]        <2> 	mov esi, .dhcp.mac
  5561 0000412F BB[CA420000]        <2> 	mov ebx, .dhcp.option.mac
  5562 00004134 BF[AA410000]        <2> 	mov edi, .mac
  5563 00004139 31C9                <2> 	xor ecx, ecx
  5564 0000413B 66890D[BC410000]    <2> 	mov [.ip.checksum], cx
  5565 00004142 66890D[CC410000]    <2> 	mov [.udp.checksum], cx
  5566 00004149 8B0D[63610000]      <2> 	mov ecx, [sysmac]
  5567 0000414F 890B                <2> 	mov [ebx], ecx
  5568 00004151 890F                <2> 	mov [edi], ecx
  5569 00004153 890E                <2> 	mov [esi], ecx
  5570 00004155 668B0D[67610000]    <2> 	mov cx, [sysmac + 4]
  5571 0000415C 66894B04            <2> 	mov [ebx + 4], cx
  5572 00004160 66894E04            <2> 	mov [esi + 4], cx
  5573 00004164 66894F04            <2> 	mov [edi + 4], cx
  5574 00004168 BF[B2410000]        <2> 	mov edi, .ip.header
  5575 0000416D BE[C6410000]        <2> 	mov esi, .ip.headerend
  5576 00004172 E8E61E0000          <2> 	call getchecksum
  5577 00004177 66890D[BC410000]    <2> 	mov [.ip.checksum], cx
  5578 0000417E BF[C6410000]        <2> 	mov edi, .udp.header
  5579 00004183 BE[E1420000]        <2> 	mov esi, .udp.end
  5580 00004188 E8D01E0000          <2> 	call getchecksum
  5581 0000418D 66890D[CC410000]    <2> 	mov [.udp.checksum], cx
  5582 00004194 BF[A4410000]        <2> 	mov edi, .frame
  5583 00004199 BE[E1420000]        <2> 	mov esi, .udp.end
  5584 0000419E E8B01E0000          <2> 	call sendpacket
  5585 000041A3 C3                  <2> 	ret
  5586                              <2> .frame:
  5587 000041A4 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5588 000041AA 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5589 000041B0 0800                <2> 	db 8,0
  5590                              <2> .ip.header:
  5591 000041B2 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5592 000041B3 00                  <2> 	db 0
  5593 000041B4 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5594 000041B6 0000                <2> 	dw 0
  5595 000041B8 0000                <2> 	dw 0
  5596 000041BA 80                  <2> 	db 0x80
  5597 000041BB 11                  <2> 	db 17
  5598 000041BC 0000                <2> .ip.checksum dw 0
  5599 000041BE 00000000            <2> 	db 0,0,0,0
  5600 000041C2 FFFFFFFF            <2> 	db 255,255,255,255	
  5601                              <2> .ip.headerend:
  5602                              <2> .udp.header:
  5603 000041C6 0044                <2> 	db 0,68	;source port
  5604 000041C8 0043                <2> 	db 0,67 ;destination port
  5605 000041CA 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5606 000041CC 0000                <2> .udp.checksum dw 0
  5607                              <2> .udp.headerend:
  5608                              <2> .dhcp.data:
  5609 000041CE 01                  <2> 	db 1	;message type
  5610 000041CF 01                  <2> 	db 1	;hardware type
  5611 000041D0 06                  <2> 	db 6	;hardware address length
  5612 000041D1 00                  <2> 	db 0	;hops
  5613 000041D2 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5614 000041D6 0000                <2> 	db 0,0	;seconds elapsed
  5615 000041D8 0000                <2> 	db 0,0	;flags
  5616 000041DA 00000000            <2> 	db 0,0,0,0	;client ip address
  5617 000041DE 00000000            <2> 	db 0,0,0,0	;your ip address
  5618 000041E2 00000000            <2> 	db 0,0,0,0	;server ip address
  5619 000041E6 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5620 000041EA 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5621 000041F0 00<rept>            <2> 	times 10 db 0	;padding
  5622 000041FA 00<rept>            <2> 	times 64 db 0	;server host name
  5623 0000423A 00<rept>            <2> 	times 128 db 0	;boot file name
  5624 000042BA 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5625                              <2> .dhcp.option.type:
  5626 000042BE 350103              <2> 	db 53,1,3	;DHCP Request
  5627 000042C1 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5628 000042C7 3D07                <2> 	db 61,7 ;client id(mac)
  5629 000042C9 01                  <2> 	db 1	;Type=Ethernet
  5630 000042CA 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5631 000042D0 0C08                <2> 	db 12,8 ;host name
  5632 000042D2 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5633 000042DA 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5634 000042E0 FF                  <2> 	db 0xFF	;end DHCP options
  5635                              <2> .dhcp.end:
  5636                              <2> .udp.end:
  5637                              <2> 	
  5638                              <1> %endif
  5639                              <1> %ifdef disk.none
  5640                              <1> %else
  5641                              <1> 	%include 'source/programs/dos.asm'
  5642 000042E1 FF2C646F7300        <2> db 255,44,"dos",0
  5643                              <2> dosrunner:
  5644 000042E7 8925[088A0300]      <2> 	mov [previousstack], esp
  5645 000042ED 8B3D[DA2C0000]      <2> 	mov edi, [currentcommandloc]
  5646 000042F3 81C704000000        <2> 	add edi, 4
  5647 000042F9 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5648 000042FE E847180000          <2> 	call loadfile
  5649 00004303 8B3D[DA2C0000]      <2> 	mov edi, [currentcommandloc]
  5650 00004309 81C704000000        <2> 	add edi, 4
  5651 0000430F 81FA94010000        <2> 	cmp edx, 404
  5652 00004315 0F845E000000        <2> 	je near .noprogfound
  5653 0000431B BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5654 00004320 31C9                <2> 	xor ecx, ecx
  5655                              <2> .findparams:
  5656 00004322 47                  <2> 	inc edi
  5657 00004323 8A07                <2> 	mov al, [edi]
  5658 00004325 3C20                <2> 	cmp al, " "
  5659 00004327 75F9                <2> 	jne .findparams
  5660                              <2> .copyparams:
  5661 00004329 8A07                <2> 	mov al, [edi]
  5662 0000432B 8803                <2> 	mov [ebx], al
  5663 0000432D 43                  <2> 	inc ebx
  5664 0000432E 47                  <2> 	inc edi
  5665 0000432F 41                  <2> 	inc ecx
  5666 00004330 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5667 00004336 7304                <2> 	jae .nomoreparams
  5668 00004338 3C00                <2> 	cmp al, 0
  5669 0000433A 75ED                <2> 	jne .copyparams
  5670                              <2> .nomoreparams:
  5671 0000433C 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5672 00004342 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5673 00004346 8ED8                <2> 	mov ds, ax
  5674 00004348 8EC0                <2> 	mov es, ax
  5675 0000434A 8EE0                <2> 	mov fs, ax
  5676 0000434C 8EE8                <2> 	mov gs, ax
  5677 0000434E 31C0                <2> 	xor eax, eax
  5678 00004350 31DB                <2> 	xor ebx, ebx
  5679 00004352 31C9                <2> 	xor ecx, ecx
  5680 00004354 31D2                <2> 	xor edx, edx
  5681 00004356 31FF                <2> 	xor edi, edi
  5682 00004358 31F6                <2> 	xor esi, esi
  5683 0000435A 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5684 00004361 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5685 00004365 6689DA              <2> 	mov dx, bx
  5686 00004368 8EC3                <2> 	mov es, bx
  5687 0000436A 8EE3                <2> 	mov fs, bx
  5688 0000436C 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5689 00004370 8EEB                <2> 	mov gs, bx
  5690 00004372 8B25[088A0300]      <2> 	mov esp, [previousstack]
  5691 00004378 C3                  <2> 	ret
  5692                              <2> .noprogfound:
  5693 00004379 BE[71610000]        <2> 	mov esi, notfound1
  5694 0000437E E874D8FFFF          <2> 	call print
  5695 00004383 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  5696 00004389 81C604000000        <2> 	add esi, 4
  5697 0000438F E863D8FFFF          <2> 	call print
  5698 00004394 BE[79610000]        <2> 	mov esi, notfound2
  5699 00004399 E859D8FFFF          <2> 	call print
  5700 0000439E C3                  <2> 	ret
  5701                              <2> 	
  5702                              <1> %endif
  5703                              <1> %include 'source/programs/dump.asm'
  5704 0000439F FF2C64756D7000      <2> db 255,44,"dump",0
  5705 000043A6 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  5706 000043AC 81C605000000        <2> 	add esi, 5
  5707 000043B2 31C9                <2> 	xor ecx, ecx
  5708 000043B4 66B83078            <2> 	mov ax, "0x"
  5709 000043B8 663906              <2> 	cmp [esi], ax
  5710 000043BB 740A                <2> 	je dumphexin
  5711 000043BD E8D0ECFFFF          <2> 	call cnvrttxt
  5712 000043C2 E910000000          <2> 	jmp dumphexnow
  5713                              <2> dumphexin:
  5714 000043C7 81C602000000        <2> 	add esi, 2
  5715 000043CD E877ECFFFF          <2> 	call cnvrthextxt
  5716 000043D2 E900000000          <2> 	jmp dumphexnow
  5717                              <2> dumphexnow:
  5718 000043D7 89CF                <2> 	mov edi, ecx
  5719 000043D9 89FE                <2> 	mov esi, edi
  5720 000043DB 81C680030000        <2> 	add esi, 896
  5721                              <2> dumphexloop:
  5722 000043E1 8B0F                <2> 	mov ecx, [edi]
  5723 000043E3 C605[E72E0000]05    <2> 	mov byte [firsthexshown],5
  5724 000043EA E80DEBFFFF          <2> 	call showhex
  5725 000043EF 81C704000000        <2> 	add edi, 4
  5726 000043F5 39F7                <2> 	cmp edi, esi
  5727 000043F7 72E8                <2> 	jb dumphexloop
  5728 000043F9 E801E2FFFF          <2> 	call termcopy
  5729 000043FE C3                  <2> 	ret 
  5730                              <1> %include 'source/programs/echo.asm'
  5731                              <2> 
  5732 000043FF FF2C6563686F00      <2> db 255,44,"echo",0
  5733                              <2> 	echoprog:
  5734 00004406 8B35[DA2C0000]      <2> 		mov esi, [currentcommandloc]
  5735 0000440C 81C605000000        <2> 		add esi, 5
  5736 00004412 8A06                <2> 		mov al, [esi]
  5737 00004414 E8BAD7FFFF          <2> 		call printquiet
  5738 00004419 E8D4D7FFFF          <2> 		call printline
  5739 0000441E C3                  <2> 		ret
  5740 0000441F BB[888C0300]        <2> 	echovr:	mov ebx, variables
  5741 00004424 BF06000000          <2> 		mov edi, 6
  5742 00004429 E83C000000          <2> 		call nxtvrech
  5743 0000442E E954000000          <2> 		jmp prntvr2
  5744 00004433 B13D                <2> 	echvar:	mov cl, '='
  5745 00004435 43                  <2> 		inc ebx
  5746 00004436 8A03                <2> 		mov al, [ebx]
  5747 00004438 3C00                <2> 		cmp al, 0
  5748 0000443A 742E                <2> 		je nxtvrech
  5749 0000443C 3C3D                <2> 		cmp al, '='
  5750 0000443E 7422                <2> 		je nxtvrechb1
  5751 00004440 8B35[DA2C0000]      <2> 		mov esi, [currentcommandloc]
  5752 00004446 01FE                <2> 		add esi, edi
  5753 00004448 E8CCE8FFFF          <2> 		call cndtest
  5754 0000444D 3C02                <2> 		cmp al, 2
  5755 0000444F 7432                <2> 		je prntvr
  5756 00004451 3C01                <2> 		cmp al, 1
  5757 00004453 742E                <2> 		je prntvr
  5758 00004455 8B35[DA2C0000]      <2> 		mov esi, [currentcommandloc]
  5759 0000445B 01FE                <2> 		add esi, edi
  5760 0000445D E908000000          <2> 		jmp nxtvrech
  5761                              <2> 	nxtvrechb1:
  5762 00004462 81EB02000000        <2> 		sub ebx, 2
  5763 00004468 EBC9                <2> 		jmp echvar
  5764 0000446A 8A03                <2> 	nxtvrech: mov al, [ebx]
  5765 0000446C 3C05                <2> 		cmp al, 5
  5766 0000446E 740A                <2> 		je nxtvrec2
  5767 00004470 43                  <2> 		inc ebx
  5768 00004471 81FB[889C0300]      <2> 		cmp ebx, varend
  5769 00004477 72F1                <2> 		jb nxtvrech
  5770 00004479 C3                  <2> 		ret
  5771 0000447A 43                  <2> 	nxtvrec2: inc ebx
  5772 0000447B 8A03                <2> 		mov al, [ebx]
  5773 0000447D 3C04                <2> 		cmp al, 4
  5774 0000447F 74B2                <2> 		je echvar
  5775 00004481 EBE7                <2> 		jmp nxtvrech
  5776 00004483 43                  <2> 	prntvr: inc ebx
  5777 00004484 89DE                <2> 		mov esi, ebx
  5778 00004486 C3                  <2> 		ret
  5779 00004487 E86BD7FFFF          <2> 	prntvr2: call print
  5780 0000448C BE[AA610000]        <2> 		mov esi, line
  5781 00004491 E861D7FFFF          <2> 		call print
  5782 00004496 C3                  <2> 		ret 
  5783                              <1> %include 'source/programs/else.asm'
  5784 00004497 FF2C656C736500      <2> 	db 255,44,"else",0
  5785 0000449E 31C0                <2> elsecmd:	xor eax, eax
  5786 000044A0 3805[828C0300]      <2> 	cmp [BATCHISON], al
  5787 000044A6 0F8439F3FFFF        <2> 	je near notbatch
  5788 000044AC A0[198C0300]        <2> 	mov al, [IFON]
  5789 000044B1 BE[1A8C0300]        <2> 	mov esi, IFTRUE
  5790 000044B6 01C6                <2> 	add esi, eax
  5791 000044B8 8A06                <2> 	mov al, [esi]
  5792 000044BA 3401                <2> 	xor al, 1
  5793 000044BC 8806                <2> 	mov [esi], al
  5794 000044BE C3                  <2> 	ret 
  5795                              <1> %include 'source/programs/exit.asm'
  5796 000044BF FF2C6578697400      <2> db 255,44,"exit",0
  5797 000044C6 803D[188C0300]01    <2> 	cmp byte [ranboot], 1
  5798 000044CD 0F84E8E4FFFF        <2> 	je near returnfromexp
  5799 000044D3 E9D3E3FFFF          <2> 	jmp nobootfile
  5800                              <1> %include 'source/programs/fi.asm'
  5801 000044D8 FF2C666900          <2> 	db 255,44,"fi",0
  5802 000044DD 30C0                <2> 	xor al, al
  5803 000044DF 3805[828C0300]      <2> 	cmp [BATCHISON], al
  5804 000044E5 0F84FAF2FFFF        <2> 	je near notbatch
  5805 000044EB B001                <2> fi:	mov al, 1
  5806 000044ED 2805[198C0300]      <2> 	sub [IFON],al
  5807 000044F3 C3                  <2> 	ret 
  5808                              <1> %ifdef gui.included
  5809                              <1> 	%include 'source/programs/gui.asm'
  5810                              <1> %endif
  5811                              <1> %include 'source/programs/help.asm'
  5812 000044F4 FF2C68656C7000      <2> db 255,44,"help",0
  5813                              <2> lscmd:	
  5814 000044FB B00D                <2> 		mov al, 13
  5815 000044FD E880DDFFFF          <2> 		call prcharq
  5816 00004502 BE[4F310000]        <2> 		mov esi, progstart
  5817 00004507 BB[984E0000]        <2> 		mov ebx, progend
  5818 0000450C BE[08860300]        <2> dir:	mov esi, fileindex
  5819 00004511 8A06                <2> 	dirnxt:	mov al, [esi]
  5820 00004513 30E4                <2> 		xor ah, ah
  5821 00004515 3CFF                <2> 		cmp al, 255
  5822 00004517 7415                <2> 		je dirfnd
  5823 00004519 46                  <2> 		inc esi
  5824 0000451A 81FE[088A0300]      <2> 		cmp esi,  fileindexend
  5825 00004520 7339                <2> 		jae dirdn
  5826 00004522 EBED                <2> 		jmp dirnxt
  5827                              <2> 	dirfnd3:
  5828 00004524 46                  <2> 		inc esi
  5829 00004525 81FE[088A0300]      <2> 		cmp esi, fileindexend
  5830 0000452B 76E4                <2> 		jbe dirnxt
  5831 0000452D 4E                  <2> 		dec esi
  5832 0000452E 46                  <2> 	dirfnd:	inc esi
  5833 0000452F 8A06                <2> 		mov al, [esi]
  5834 00004531 30E4                <2> 		xor ah, ah
  5835 00004533 3C2C                <2> 		cmp al, 44
  5836 00004535 740B                <2> 		je dirfnd2
  5837 00004537 46                  <2> 		inc esi
  5838 00004538 81FE[088A0300]      <2> 		cmp esi,  fileindexend
  5839 0000453E 731B                <2> 		jae dirdn
  5840 00004540 EBCF                <2> 		jmp dirnxt
  5841 00004542 46                  <2> 	dirfnd2: inc esi
  5842 00004543 E88BD6FFFF          <2> 		call printquiet
  5843 00004548 56                  <2> 		push esi
  5844 00004549 B009                <2> 		mov al, 9
  5845 0000454B E832DDFFFF          <2> 		call prcharq
  5846 00004550 5E                  <2> 		pop esi
  5847 00004551 81FE[088A0300]      <2> 		cmp esi,  fileindexend
  5848 00004557 7302                <2> 		jae dirdn
  5849 00004559 EBB6                <2> 		jmp dirnxt
  5850 0000455B BE[AA610000]        <2> 	dirdn:	mov esi, line
  5851 00004560 E892D6FFFF          <2> 			call print
  5852 00004565 C3                  <2> 			ret
  5853 00004566 00                  <2> currentdir db 0
  5854                              <1> %include 'source/programs/if.asm'
  5855 00004567 FF2C696600          <2> 	db 255,44,"if",0
  5856 0000456C 30C0                <2> ifcmd:	xor al, al
  5857 0000456E 3805[828C0300]      <2> 	cmp [BATCHISON], al
  5858 00004574 0F846BF2FFFF        <2> 	je near notbatch
  5859 0000457A 8B1D[DA2C0000]      <2> 	mov ebx, [currentcommandloc]
  5860 00004580 81C303000000        <2> 	add ebx, 3
  5861 00004586 89DE                <2> 	mov esi, ebx
  5862 00004588 8A06                <2> chkeqsn: mov al, [esi]
  5863 0000458A 3C00                <2> 	cmp al, 0
  5864 0000458C 0F8453F2FFFF        <2> 	je near notbatch
  5865 00004592 3C3D                <2> 	cmp al, '='
  5866 00004594 0F8403000000        <2> 	je near chkeqdn
  5867 0000459A 46                  <2> 	inc esi
  5868 0000459B EBEB                <2> 	jmp chkeqsn
  5869 0000459D B000                <2> chkeqdn: mov al, 0 
  5870 0000459F 8806                <2> 	mov [esi], al
  5871 000045A1 46                  <2> 	inc esi
  5872 000045A2 E837E7FFFF          <2> 	call tester
  5873 000045A7 3C01                <2> 	cmp al, 1
  5874 000045A9 0F8405000000        <2> 	je near trueif
  5875 000045AF E91C000000          <2> 	jmp falseif
  5876 000045B4 31C0                <2> trueif:	xor eax, eax
  5877 000045B6 A0[198C0300]        <2> 	mov al, [IFON]
  5878 000045BB FEC0                <2> 	inc al
  5879 000045BD A2[198C0300]        <2> 	mov [IFON], al
  5880 000045C2 30E4                <2> 	xor ah, ah
  5881 000045C4 BE[1A8C0300]        <2> 	mov esi, IFTRUE
  5882 000045C9 01C6                <2> 	add esi, eax
  5883 000045CB B401                <2> 	mov ah, 1
  5884 000045CD 8826                <2> 	mov [esi], ah
  5885 000045CF C3                  <2> 	ret 
  5886 000045D0 31C0                <2> falseif: xor eax, eax
  5887 000045D2 A0[198C0300]        <2> 	mov al, [IFON]
  5888 000045D7 FEC0                <2> 	inc al
  5889 000045D9 A2[198C0300]        <2> 	mov [IFON], al
  5890 000045DE 30E4                <2> 	xor ah, ah
  5891 000045E0 BE[1A8C0300]        <2> 	mov esi, IFTRUE
  5892 000045E5 01C6                <2> 	add esi, eax
  5893 000045E7 30E4                <2> 	xor ah, ah
  5894 000045E9 8826                <2> 	mov [esi], ah
  5895 000045EB C3                  <2> 	ret 
  5896                              <1> %ifdef network.included
  5897                              <1> 	%include 'source/programs/ipconfig.asm'
  5898 000045EC FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5899 000045F5 6700                <2>
  5900                              <2> ifconfig:
  5901 000045F7 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  5902 000045FD 81C609000000        <2> 	add esi, 9
  5903 00004603 803E00              <2> 	cmp byte [esi], 0
  5904 00004606 740B                <2> 	je .noip
  5905 00004608 E8781A0000          <2> 	call strtoip
  5906 0000460D 890D[5F610000]      <2> 	mov [sysip], ecx
  5907                              <2> .noip:
  5908                              <2> %ifdef ne2000.included
  5909 00004613 803D[18600000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5910 0000461A 7519                <2> 	jne .none2000
  5911 0000461C BE[19600000]        <2> 	mov esi, ne2000.name
  5912 00004621 E8D1D5FFFF          <2> 	call print
  5913 00004626 B9[3C600000]        <2> 	mov ecx, ne2000.mac
  5914 0000462B E8C81A0000          <2> 	call showmac
  5915 00004630 E8BDD5FFFF          <2> 	call printline
  5916                              <2> .none2000:
  5917                              <2> %endif
  5918                              <2> %ifdef rtl8139.included
  5919                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5920                              <2> 	jne .nortl8139
  5921                              <2> 	mov esi, rtl8139.name
  5922                              <2> 	call print
  5923                              <2> 	mov ecx, rtl8139.mac
  5924                              <2> 	call showmac
  5925                              <2> 	call printline
  5926                              <2> .nortl8139:
  5927                              <2> %endif
  5928                              <2> %ifdef rtl8169.included
  5929                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5930                              <2> 	jne .nortl8169
  5931                              <2> 	mov esi, rtl8169.name
  5932                              <2> 	call print
  5933                              <2> 	mov ecx, rtl8169.mac
  5934                              <2> 	call showmac
  5935                              <2> 	call printline
  5936                              <2> .nortl8169:
  5937                              <2> %endif
  5938                              <2> %ifdef i8254x.included
  5939                              <2> 	cmp byte [i8254x.nicconfig], 1
  5940                              <2> 	jne .noi8254x
  5941                              <2> 	mov esi, i8254x.name
  5942                              <2> 	call print
  5943                              <2> 	mov ecx, i8254x.mac
  5944                              <2> 	call showmac
  5945                              <2> 	call printline
  5946                              <2> .noi8254x:
  5947                              <2> %endif
  5948 00004635 8B0D[5F610000]      <2> 	mov ecx, [sysip]
  5949 0000463B E88B1A0000          <2> 	call showip
  5950 00004640 E8ADD5FFFF          <2> 	call printline
  5951 00004645 C3                  <2> 	ret
  5952                              <2> 	
  5953                              <1> %endif
  5954                              <1> %include 'source/programs/keycode.asm'
  5955 00004646 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5956 0000464F 00                  <2>
  5957                              <2> keycode:
  5958 00004650 66C705[53220000]00- <2> 	mov word [trans], 0
  5959 00004658 00                  <2>
  5960 00004659 C605[065D0000]00    <2> 	mov byte [threadson], 0
  5961                              <2> %ifdef io.serial
  5962                              <2> .noserial:
  5963                              <2> 	hlt
  5964                              <2> 	mov dx, [serial.address]
  5965                              <2> 	in al, dx
  5966                              <2> 	cmp al, 0
  5967                              <2> 	je .noserial
  5968                              <2> 	mov cl, al
  5969                              <2> 	call showhexsmall
  5970                              <2> 	cmp al, 0x1B
  5971                              <2> 	jne .noserial
  5972                              <2> 	in al, dx
  5973                              <2> 	mov cl, al
  5974                              <2> 	call showhexsmall
  5975                              <2> 	cmp cl, 0x5B
  5976                              <2> 	je .noserial
  5977                              <2> 	ret
  5978                              <2> %else
  5979 00004660 E8460B0000          <2> 	call getkey
  5980 00004665 31C0                <2> 	xor eax, eax
  5981 00004667 31C9                <2> 	xor ecx, ecx
  5982 00004669 8A0D[89510000]      <2> 	mov cl, [specialkey]
  5983 0000466F 80F900              <2> 	cmp cl, 0
  5984 00004672 0F8405000000        <2> 	je near .nospecialkeycode
  5985 00004678 E86BE8FFFF          <2> 	call showhexsmall
  5986                              <2> .nospecialkeycode:
  5987 0000467D 668B0D[51220000]    <2> 	mov cx, [lastkey + 2]
  5988 00004684 E85FE8FFFF          <2> 	call showhexsmall
  5989 00004689 80F901              <2> 	cmp cl, 1
  5990 0000468C 75C2                <2> 	jne keycode
  5991 0000468E C3                  <2> 	ret
  5992                              <2> %endif
  5993                              <1> %ifdef gui.included
  5994                              <1> 	%include 'source/programs/line.asm'
  5995                              <1> %endif
  5996                              <1> %include 'source/programs/logout.asm'
  5997 0000468F FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5998 00004698 E9CAE1FFFF          <2> 	jmp os
  5999                              <1> %include 'source/programs/loop.asm'
  6000 0000469D FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6001 000046A4 803D[838C0300]00    <2> 	cmp byte [LOOPON], 0
  6002 000046AB 0F8501000000        <2> 	jne near filoop
  6003 000046B1 C3                  <2> 	ret
  6004 000046B2 8B35[848C0300]      <2> filoop: mov esi, [LOOPPOS]
  6005 000046B8 FE0D[198C0300]      <2> 	dec byte [IFON]
  6006 000046BE C605[838C0300]00    <2> 	mov byte [LOOPON], 0
  6007 000046C5 8935[7E8C0300]      <2> 	mov [BATCHPOS], esi
  6008 000046CB 8935[0D370000]      <2> 	mov [batchedi], esi
  6009 000046D1 C3                  <2> 	ret 
  6010                              <1> %ifdef disk.none
  6011                              <1> %else
  6012                              <1> 	%include 'source/programs/ls.asm'
  6013 000046D2 FF2C6C7300          <2> db 255,44,"ls",0
  6014 000046D7 BE[29640300]        <2> 		mov esi, diskfileindex
  6015                              <2> 	diskindexdir:
  6016 000046DC 803E5F              <2> 		cmp byte [esi], '_'
  6017 000046DF 7440                <2> 		je nextdiskindexdir
  6018 000046E1 E8EDD4FFFF          <2> 		call printquiet
  6019 000046E6 56                  <2> 		push esi
  6020 000046E7 BE[41470000]        <2> 		mov esi, disktab
  6021 000046EC E8E2D4FFFF          <2> 		call printquiet
  6022 000046F1 5E                  <2> 		pop esi
  6023 000046F2 8B4E05              <2> 		mov ecx, [esi + 5]
  6024 000046F5 C605[E72E0000]05    <2> 		mov byte [firsthexshown], 5
  6025 000046FC E8B6E8FFFF          <2> 		call showdec
  6026 00004701 56                  <2> 		push esi
  6027 00004702 BE[AA610000]        <2> 		mov esi, line
  6028 00004707 E8C7D4FFFF          <2> 		call printquiet
  6029 0000470C 5E                  <2> 		pop esi
  6030 0000470D 81C609000000        <2> 		add esi, 9
  6031 00004713 81FE[0B650300]      <2> 		cmp esi, enddiskfileindex
  6032 00004719 72C1                <2> 		jb diskindexdir
  6033 0000471B E8DFDEFFFF          <2> 		call termcopy
  6034 00004720 C3                  <2> 		ret
  6035                              <2> 	nextdiskindexdir:
  6036 00004721 46                  <2> 		inc esi
  6037 00004722 803E00              <2> 		cmp byte [esi], 0
  6038 00004725 75FA                <2> 		jne nextdiskindexdir
  6039 00004727 81C609000000        <2> 		add esi, 9
  6040 0000472D 81FE[0B650300]      <2> 		cmp esi, enddiskfileindex
  6041 00004733 72A7                <2> 		jb diskindexdir
  6042 00004735 E8C5DEFFFF          <2> 		call termcopy
  6043 0000473A C3                  <2> 		ret
  6044                              <2> 		
  6045 0000473B 4469736B2000        <2> 		diskmsg db "Disk ",0
  6046 00004741 0D09090900          <2> 		disktab db 13,9,9,9,0
  6047                              <1> %endif
  6048                              <1> %include 'source/programs/memory.asm'
  6049 00004746 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6050 0000474F BE[E5610000]        <2> 	mov esi, memlistbuf
  6051 00004754 31FF                <2> 	xor edi, edi
  6052 00004756 668B3D[25640000]    <2> 	mov di, [memlistend]
  6053 0000475D 01F7                <2> 	add edi, esi
  6054                              <2> printmemmap:
  6055 0000475F 8B0E                <2> 	mov ecx, [esi]
  6056 00004761 E896E7FFFF          <2> 	call showhex
  6057 00004766 81C608000000        <2> 	add esi, 8
  6058 0000476C 8B0E                <2> 	mov ecx, [esi]
  6059 0000476E E889E7FFFF          <2> 	call showhex
  6060 00004773 81C608000000        <2> 	add esi, 8
  6061 00004779 8B0E                <2> 	mov ecx, [esi]
  6062 0000477B E87CE7FFFF          <2> 	call showhex
  6063 00004780 81C608000000        <2> 	add esi, 8
  6064 00004786 57                  <2> 	push edi
  6065 00004787 56                  <2> 	push esi
  6066 00004788 E865D4FFFF          <2> 	call printline
  6067 0000478D 5E                  <2> 	pop esi
  6068 0000478E 5F                  <2> 	pop edi
  6069 0000478F 39FE                <2> 	cmp esi, edi
  6070 00004791 72CC                <2> 	jb printmemmap
  6071 00004793 C3                  <2> 	ret
  6072                              <2> 	
  6073                              <1> %include 'source/programs/pci.asm'
  6074 00004794 FF2C70636900        <2> db 255,44,"pci",0
  6075 0000479A E87C100000          <2> 	call pcidump
  6076 0000479F C3                  <2> 	ret 
  6077                              <1> %ifdef network.included
  6078                              <1> 	%include 'source/programs/ping.asm'
  6079 000047A0 FF2C70696E6700      <2> db 255,44,"ping",0
  6080                              <2> ping:
  6081 000047A7 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  6082 000047AD 81C605000000        <2> 	add esi, 5
  6083 000047B3 E8CD180000          <2> 	call strtoip
  6084 000047B8 890D[3E480000]      <2> 	mov [.destip], ecx
  6085 000047BE E808190000          <2> 	call showip
  6086 000047C3 8B0D[5F610000]      <2> 	mov ecx, [sysip]
  6087 000047C9 890D[3A480000]      <2> 	mov [.sourceip]. ecx
  6088 000047CF 31C0                <2> 	xor eax, eax
  6089 000047D1 31DB                <2> 	xor ebx, ebx
  6090 000047D3 66A3[38480000]      <2> 	mov [.checksum], ax
  6091 000047D9 66A3[44480000]      <2> 	mov [.icmpchecksum], ax
  6092 000047DF BF[2E480000]        <2> 	mov edi, .header
  6093 000047E4 BE[42480000]        <2> 	mov esi, .headerend
  6094 000047E9 E86F180000          <2> 	call getchecksum
  6095 000047EE 66890D[38480000]    <2> 	mov [.checksum], cx
  6096 000047F5 BF[42480000]        <2> 	mov edi, .icmp
  6097 000047FA BE[6A480000]        <2> 	mov esi, .packetend
  6098 000047FF E859180000          <2> 	call getchecksum
  6099 00004804 66890D[44480000]    <2> 	mov [.icmpchecksum], cx
  6100 0000480B BF[20480000]        <2> 	mov edi, .packet
  6101 00004810 BE[6A480000]        <2> 	mov esi, .packetend
  6102 00004815 E839180000          <2> 	call sendpacket
  6103 0000481A E8D3D3FFFF          <2> 	call printline
  6104 0000481F C3                  <2> 	ret
  6105                              <2> 	
  6106                              <2> 	
  6107                              <2> 	
  6108                              <2> .packet:
  6109 00004820 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6110 00004826 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6111 0000482C 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6112                              <2> .header:
  6113 0000482E 45                  <2> .version	db 0x45
  6114 0000482F 00                  <2> .services	db 0
  6115 00004830 003C                <2> .length	db 0,0x3C
  6116 00004832 0000                <2> .id		dw 0
  6117 00004834 00                  <2> .flags	db 0
  6118 00004835 00                  <2> .fragment db 0
  6119 00004836 80                  <2> .ttl	db 128
  6120 00004837 01                  <2> .protocol db 1 ;ICMP
  6121 00004838 0000                <2> .checksum dw 0
  6122 0000483A 00000000            <2> .sourceip dd 0
  6123 0000483E 00000000            <2> .destip dd 0
  6124                              <2> .headerend:
  6125                              <2> .icmp:
  6126 00004842 08                  <2> .icmptype db 8 ;Ping request
  6127 00004843 00                  <2> .icmpcode db 0
  6128 00004844 0000                <2> .icmpchecksum dw 0
  6129 00004846 0001                <2> .icmpid db 0,1
  6130 00004848 0000                <2> .sequence dw 0
  6131 0000484A 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6132 00004853 6A6B6C6D6E6F707172- <2>
  6133 0000485C 737475767761626364- <2>
  6134 00004865 6566676869          <2>
  6135                              <2> .packetend:
  6136                              <1> %endif
  6137                              <1> %ifdef disk.none
  6138                              <1> %else
  6139                              <1> 	%include 'source/programs/play.asm'
  6140 0000486A FF2C706C61796100    <2> db 255,44,"playa",0
  6141 00004872 8B3D[DA2C0000]      <2> 	mov edi, [currentcommandloc]
  6142 00004878 81C706000000        <2> 	add edi, 6
  6143 0000487E E834000000          <2> 	call playasync
  6144 00004883 C3                  <2> 	ret
  6145 00004884 FF2C706C617900      <2> db 255,44,"play",0
  6146                              <2> play:
  6147 0000488B 8B3D[DA2C0000]      <2> 	mov edi, [currentcommandloc]
  6148 00004891 81C705000000        <2> 	add edi, 5
  6149 00004897 E81B000000          <2> 	call playasync
  6150                              <2> .waitforsound:
  6151 0000489C F4                  <2> 	hlt
  6152                              <2> %ifdef sound.included
  6153 0000489D A1[73510000]        <2> 	mov eax, [Length0]
  6154 000048A2 660B05[77510000]    <2> 	or ax, [Length1]
  6155                              <2> %endif
  6156 000048A9 0A05[4A020000]      <2> 	or al, [soundon]
  6157 000048AF 3D00000000          <2> 	cmp eax, 0
  6158 000048B4 75E6                <2> 	jne .waitforsound
  6159 000048B6 C3                  <2> 	ret
  6160                              <2> playasync:
  6161 000048B7 BE0000C000          <2> 	mov esi, 0xC00000
  6162 000048BC E889120000          <2> 	call loadfile
  6163 000048C1 81FA94010000        <2> 	cmp edx, 404
  6164 000048C7 743F                <2> 	je nosoundfound
  6165 000048C9 BB0000C000          <2> 	mov ebx, 0xC00000
  6166 000048CE 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6167 000048D5 0F843F010000        <2> 	je near wave_player
  6168 000048DB 66813B534E          <2> 	cmp word [ebx], "SN"
  6169 000048E0 7526                <2> 	jne nosoundfound
  6170 000048E2 81C306000000        <2> 	add ebx, 6
  6171 000048E8 891D[4D020000]      <2> 	mov [soundpos], ebx
  6172 000048EE 035BFC              <2> 	add ebx, [ebx - 4]
  6173 000048F1 891D[51020000]      <2> 	mov [soundendpos], ebx
  6174 000048F7 66C705[4B020000]00- <2> 	mov word [soundrepititions], 0
  6175 000048FF 00                  <2>
  6176 00004900 C605[4A020000]01    <2> 	mov byte [soundon], 1
  6177 00004907 C3                  <2> 	ret
  6178                              <2> nosoundfound:
  6179 00004908 BE[2E490000]        <2> 	mov esi, notfoundsound
  6180 0000490D E8E5D2FFFF          <2> 	call print
  6181 00004912 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  6182 00004918 81C605000000        <2> 	add esi, 5
  6183 0000491E E8D4D2FFFF          <2> 	call print
  6184 00004923 BE[79610000]        <2> 	mov esi, notfound2
  6185 00004928 E8CAD2FFFF          <2> 	call print
  6186 0000492D C3                  <2> 	ret
  6187 0000492E 706C61793A2000      <2> notfoundsound db "play: ",0
  6188                              <2> 
  6189                              <2> %ifdef sound.included
  6190                              <2> sbplay:
  6191 00004935 BE0000C000          <2> 		mov esi, 0xC00000
  6192 0000493A 89F3                <2> 		mov ebx, esi
  6193 0000493C 81C62C000000        <2> 		add esi, WAVSTART
  6194 00004942 29F7                <2> 		sub edi, esi
  6195 00004944 66893D[77510000]    <2> 		mov [Length1], di
  6196 0000494B C1EF0F              <2> 		shr edi, 15
  6197 0000494E 893D[73510000]      <2> 		mov [Length0], edi
  6198 00004954 8B4B18              <2> 		mov ecx, [ebx + 24]
  6199 00004957 890D[84510000]      <2> 		mov [Freq], ecx
  6200 0000495D 31C0                <2> 		xor eax, eax
  6201 0000495F BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6202 00004964 81C22C000000        <2> 		add edx, WAVSTART
  6203 0000496A 01D0                <2> 		add	eax, edx
  6204 0000496C 89C6                <2> 		mov esi, eax
  6205 0000496E 31C9                <2> 		xor ecx, ecx
  6206 00004970 31DB                <2> 		xor ebx, ebx
  6207 00004972 66891D[81510000]    <2> 		mov [SegLoc], bx
  6208 00004979 81C300000800        <2> 		add ebx, 0x80000
  6209 0000497F 66B9FFFF            <2> 		mov cx, 0xFFFF
  6210 00004983 6681FF0000          <2> 		cmp di, 0
  6211 00004988 7520                <2> 		jne .autoinit
  6212 0000498A 668B0D[77510000]    <2> 		mov cx, [Length1]
  6213 00004991 C605[72510000]01    <2> 		mov byte [OddLength], 1
  6214 00004998 6681F90080          <2> 		cmp cx, 32768
  6215 0000499D 730B                <2> 		jae .autoinit
  6216 0000499F C605[72510000]00    <2> 		mov byte [OddLength], 0
  6217 000049A6 66D1E1              <2> 		shl cx, 1
  6218 000049A9 47                  <2> 		inc edi
  6219                              <2> .autoinit:
  6220 000049AA 4F                  <2> 		dec edi
  6221 000049AB 893D[73510000]      <2> 		mov [Length0], edi
  6222 000049B1 66890D[77510000]    <2> 		mov [Length1], cx
  6223 000049B8 66D1E9              <2> 		shr cx, 1
  6224 000049BB 6641                <2> 		inc cx
  6225 000049BD 01C8                <2> 		add eax, ecx
  6226 000049BF A3[79510000]        <2> 		mov [NextMemLoc], eax
  6227 000049C4 8935[7D510000]      <2> 		mov	[MemLoc], esi
  6228 000049CA E849060000          <2> 		call DMACopy
  6229 000049CF 31DB                <2> 		xor ebx, ebx
  6230 000049D1 668B1D[81510000]    <2> 		mov bx, [SegLoc]
  6231 000049D8 31C9                <2> 		xor ecx, ecx
  6232 000049DA 668B0D[77510000]    <2> 		mov cx, [Length1]
  6233 000049E1 66D1E9              <2> 		shr cx, 1
  6234 000049E4 6641                <2> 		inc cx
  6235 000049E6 01CB                <2> 		add ebx, ecx
  6236 000049E8 66891D[81510000]    <2> 		mov [SegLoc], bx
  6237 000049EF 81C300000800        <2> 		add ebx, 0x80000
  6238 000049F5 8B35[79510000]      <2> 		mov esi, [NextMemLoc]
  6239 000049FB 89F0                <2> 		mov eax, esi
  6240 000049FD 01C8                <2> 		add eax, ecx
  6241 000049FF A3[79510000]        <2> 		mov [NextMemLoc], eax
  6242 00004A04 8935[7D510000]      <2> 		mov	[MemLoc], esi
  6243 00004A0A E809060000          <2> 		call DMACopy
  6244 00004A0F E827060000          <2> 		call DMAPlay
  6245 00004A14 E8B1060000          <2> 		call PlayDSP
  6246 00004A19 C3                  <2> 		ret
  6247                              <2> WAVSTART equ 44
  6248                              <2> wave_player:
  6249 00004A1A 803D[88510000]01    <2> 	cmp byte [SoundBlaster], 1
  6250 00004A21 0F840EFFFFFF        <2> 	je near sbplay
  6251 00004A27 BE[324A0000]        <2> 	mov esi, nosoundblaster
  6252 00004A2C E8C6D1FFFF          <2> 	call print
  6253 00004A31 C3                  <2> 	ret
  6254                              <2> %else
  6255                              <2> 	wave_player:
  6256                              <2> 		mov esi, nosoundblaster
  6257                              <2> 		call print
  6258                              <2> 		ret
  6259                              <2> %endif
  6260 00004A32 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6261 00004A3B 426C61737465722064- <2>
  6262 00004A44 657465637465642E0A- <2>
  6263 00004A4D 00                  <2>
  6264                              <1> %endif
  6265                              <1> %include 'source/programs/pwd.asm'
  6266 00004A4E FF2C70776400        <2> db 255,44,"pwd",0
  6267 00004A54 BE[148A0300]        <2> 	mov esi, currentfolder
  6268 00004A59 E875D1FFFF          <2> 	call printquiet
  6269 00004A5E E88FD1FFFF          <2> 	call printline
  6270 00004A63 C3                  <2> 	ret
  6271                              <2> 	
  6272                              <1> %include 'source/programs/reboot.asm'
  6273 00004A64 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6274 00004A6D 0F011D[774A0000]    <2> 		lidt [idtreboot]
  6275 00004A74 CD00                <2> 		int 0
  6276 00004A76 F4                  <2> 		hlt
  6277                              <2> 	
  6278 00004A77 0000                <2> 	idtreboot dw 0
  6279 00004A79 00000000            <2> 			  dd 0
  6280                              <2> 
  6281                              <2> 	coldboot:
  6282 00004A7D 66B84000            <2> 		MOV AX, 0040h
  6283 00004A81 8EC0                <2> 		MOV ES, AX
  6284 00004A83 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6285 00004A8C 00                  <2>
  6286 00004A8D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6287 00004A94 CF                  <2> 		IRET
  6288                              <2> 
  6289                              <2> 	warmboot:
  6290 00004A95 66B84000            <2> 		MOV AX, 0040h
  6291 00004A99 8EC0                <2> 		MOV ES, AX
  6292 00004A9B 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6293 00004AA4 12                  <2>
  6294 00004AA5 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6295 00004AAC CF                  <2> 		IRET
  6296                              <2> 		
  6297                              <1> %include 'source/programs/reg.asm'
  6298 00004AAD FF2C72656700        <2> db 255,44,"reg",0
  6299 00004AB3 CD03                <2> 	int 3
  6300 00004AB5 C3                  <2> 	ret 
  6301                              <1> %ifdef disk.none
  6302                              <1> %else
  6303                              <1> 	%include 'source/programs/show.asm'
  6304 00004AB6 FF2C73686F7700      <2> db 255,44,"show",0
  6305                              <2> showprog:
  6306 00004ABD 8B3D[DA2C0000]      <2> 		mov edi, [currentcommandloc]
  6307 00004AC3 81C705000000        <2> 		add edi, 5
  6308 00004AC9 BE00004000          <2> 		mov esi, 0x400000
  6309 00004ACE 803F26              <2> 		cmp byte [edi], '&'
  6310 00004AD1 741B                <2> 		je .nullfile
  6311 00004AD3 BE00008000          <2> 		mov esi, 0x800000
  6312 00004AD8 E86D100000          <2> 		call loadfile
  6313 00004ADD 81FA94010000        <2> 		cmp edx, 404
  6314 00004AE3 0F8410000000        <2> 		je near filenotfound
  6315 00004AE9 BE00008000          <2> 		mov esi, 0x800000
  6316                              <2> .nullfile:
  6317                              <2> %ifdef gui.included
  6318                              <2> 		cmp word [esi], "BM"
  6319                              <2> 		je bmpfound
  6320                              <2> %endif
  6321 00004AEE E804D1FFFF          <2> 		call print
  6322 00004AF3 E8FAD0FFFF          <2> 		call printline
  6323 00004AF8 C3                  <2> 		ret
  6324                              <2> %ifdef gui.included
  6325                              <2> bmpfound:
  6326                              <2> 		cmp byte [guion], 0
  6327                              <2> 		je near noguibmp
  6328                              <2> 		mov esi, 0x800000
  6329                              <2> 		xor ecx, ecx
  6330                              <2> 		xor edx, edx
  6331                              <2> 		xor eax, eax
  6332                              <2> 		xor ebx, ebx
  6333                              <2> 		call showbmp
  6334                              <2> 		xor al, al
  6335                              <2> 		mov ah, 5
  6336                              <2> 		int 30h
  6337                              <2> 		call guiclear
  6338                              <2> 		call clearmousecursor
  6339                              <2> 		call reloadallgraphics
  6340                              <2> 		ret
  6341                              <2> noguibmp:
  6342                              <2> 		mov esi, warnguimsg
  6343                              <2> 		call print
  6344                              <2> 		ret
  6345                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  6346                              <2> %endif
  6347                              <2> 
  6348                              <2> filenotfound:
  6349 00004AF9 BE[2C4B0000]        <2> 		mov esi, filenf
  6350 00004AFE E8F4D0FFFF          <2> 		call print
  6351 00004B03 8B35[DA2C0000]      <2> 		mov esi, [currentcommandloc]
  6352                              <2> findfilenotfoundzero:
  6353 00004B09 8A06                <2> 		mov al, [esi]
  6354 00004B0B 46                  <2> 		inc esi
  6355 00004B0C 3C00                <2> 		cmp al, 0
  6356 00004B0E 7411                <2> 		je nofilenamenotfound
  6357 00004B10 81FE[88A40300]      <2> 		cmp esi, buftxtend
  6358 00004B16 7309                <2> 		jae nofilenamenotfound
  6359 00004B18 3C20                <2> 		cmp al, " "
  6360 00004B1A 75ED                <2> 		jne findfilenotfoundzero
  6361 00004B1C E8D6D0FFFF          <2> 		call print
  6362                              <2> nofilenamenotfound:
  6363 00004B21 BE[374B0000]        <2> 		mov esi, filenf2
  6364 00004B26 E8CCD0FFFF          <2> 		call print
  6365 00004B2B C3                  <2> 		ret
  6366 00004B2C 5468652066696C6520- <2> filenf db "The file ",34,0
  6367 00004B35 2200                <2>
  6368 00004B37 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6369 00004B40 6F7420626520666F75- <2>
  6370 00004B49 6E642E0A00          <2>
  6371                              <1> %endif
  6372                              <1> %include 'source/programs/shush.asm'
  6373 00004B4E FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6374                              <2> shushprog:
  6375                              <2> %ifdef gui.included
  6376                              <2> 	cmp byte [guion], 0
  6377                              <2> 	je near .noswitchsize
  6378                              <2> 	mov esi, [currentcommandloc]
  6379                              <2> 	add esi, 6
  6380                              <2> 	push esi
  6381                              <2> 	dec esi
  6382                              <2> .findspace:
  6383                              <2> 	inc esi
  6384                              <2> 	mov al, [esi]
  6385                              <2> 	cmp al, 0
  6386                              <2> 	je near .noswitchsize
  6387                              <2> 	cmp al, "X"
  6388                              <2> 	je .donefind
  6389                              <2> 	cmp al, "x"
  6390                              <2> 	je .donefind
  6391                              <2> 	cmp al, " "
  6392                              <2> 	jne .findspace
  6393                              <2> .donefind:
  6394                              <2> 	xor al, al
  6395                              <2> 	mov [esi], al
  6396                              <2> 	inc esi
  6397                              <2> 	mov edi, esi
  6398                              <2> 	call cnvrttxt
  6399                              <2> 	mov eax, ecx
  6400                              <2> 	pop esi
  6401                              <2> 	push eax
  6402                              <2> 	mov edi, esi
  6403                              <2> 	call cnvrttxt
  6404                              <2> 	mov ebx, ecx
  6405                              <2> 	pop eax	
  6406                              <2> 	cmp bx, 0
  6407                              <2> 	je near .noswitchsize
  6408                              <2> 	cmp ax, 0
  6409                              <2> 	je near .noswitchsize
  6410                              <2> 	shl bx, 3
  6411                              <2> 	shl ax, 4
  6412                              <2> 	cmp bx, [resolutionx]
  6413                              <2> 	jbe .nofixx
  6414                              <2> 	mov bx, [resolutionx]
  6415                              <2> .nofixx:
  6416                              <2> 	add ax, 16
  6417                              <2> 	cmp ax, [resolutiony]
  6418                              <2> 	jbe .nofixy
  6419                              <2> 	mov ax, [resolutiony]
  6420                              <2> .nofixy:
  6421                              <2> 	sub ax, 16
  6422                              <2> 	xor cx, cx
  6423                              <2> 	xor dx, dx
  6424                              <2> 	mov [termwindow], bx
  6425                              <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6426                              <2> 	mov esi, termwindow
  6427                              <2> 	xor ebx, ebx
  6428                              <2> 	xor ax, ax
  6429                              <2> 	call showwindow
  6430                              <2> 	call guiclear
  6431                              <2> 	call clear
  6432                              <2> 	call reloadallgraphics
  6433                              <2> 	call switchmousepos2
  6434                              <2> .noswitchsize:
  6435                              <2> %endif
  6436 00004B56 BE[614B0000]        <2> 	mov esi, shushmsg
  6437 00004B5B E897D0FFFF          <2> 	call print
  6438 00004B60 C3                  <2> 	ret
  6439 00004B61 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6440 00004B6A 6F2074686520536F6C- <2>
  6441 00004B73 6C65724F5320486172- <2>
  6442 00004B7C 646C7920556E69782D- <2>
  6443 00004B85 436F6D70617469626C- <2>
  6444 00004B8E 65205368656C6C210A- <2>
  6445 00004B97 00                  <2>
  6446                              <1> %include 'source/programs/system.asm'
  6447 00004B98 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6448 00004BA1 BE[B14C0000]        <2> 	mov esi, kernelinfomsg
  6449 00004BA6 E828D0FFFF          <2> 	call printquiet
  6450 00004BAB B9[29640300]        <2> 	mov ecx, osend
  6451 00004BB0 E802E4FFFF          <2> 	call showdec
  6452 00004BB5 BE[C64C0000]        <2> 	mov esi, diskbytemsg
  6453 00004BBA E814D0FFFF          <2> 	call printquiet
  6454 00004BBF B9[29640300]        <2> 	mov ecx, osend
  6455 00004BC4 81C1[ADFF0300]      <2> 	add ecx, commandbufend
  6456 00004BCA 81E9[00660300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6457 00004BD0 E8E2E3FFFF          <2> 	call showdec
  6458 00004BD5 BE[DD4C0000]        <2> 	mov esi, membytemsg
  6459 00004BDA E8F4CFFFFF          <2> 	call printquiet
  6460 00004BDF BE[404D0000]        <2> 	mov esi, endofmemmsg
  6461 00004BE4 E8EACFFFFF          <2> 	call printquiet
  6462 00004BE9 B9[C1331400]        <2> 	mov ecx, bssend
  6463 00004BEE E809E3FFFF          <2> 	call showhex
  6464 00004BF3 BE[F64C0000]        <2> 	mov esi, systeminfomsg
  6465 00004BF8 E8D6CFFFFF          <2> 	call printquiet
  6466                              <2> getcpuspeed:
  6467 00004BFD B8FE000000          <2> 	mov eax, 0xFE
  6468 00004C02 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6469 00004C04 B020                <2> 	mov al, 0x20
  6470 00004C06 E620                <2> 	out 0x20, al
  6471 00004C08 F4                  <2> 	hlt
  6472 00004C09 0F31                <2> 	rdtsc
  6473 00004C0B 89D6                <2> 	mov esi, edx
  6474 00004C0D 89C7                <2> 	mov edi, eax
  6475 00004C0F 31C0                <2> 	xor eax, eax
  6476 00004C11 C605[2A020000]01    <2> 	mov byte [testingcpuspeed], 1
  6477                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6478 00004C18 40                  <2> 	inc eax
  6479 00004C19 EBFD                <2> 	jmp cpuspeedloop
  6480                              <2> cpuspeedloopend:
  6481 00004C1B 0F31                <2> 	rdtsc
  6482 00004C1D 29F8                <2> 	sub eax, edi
  6483 00004C1F 29F2                <2> 	sub edx, esi
  6484 00004C21 8915[33020000]      <2> 	mov [cpuclocksperint + 4], edx
  6485 00004C27 A3[2F020000]        <2> 	mov [cpuclocksperint], eax
  6486 00004C2C 31C0                <2> 	xor eax, eax
  6487 00004C2E E621                <2> 	out 0x21, al
  6488 00004C30 B020                <2> 	mov al, 0x20
  6489 00004C32 E620                <2> 	out 0x20, al
  6490 00004C34 31D2                <2> 	xor edx, edx
  6491 00004C36 31C0                <2> 	xor eax, eax
  6492 00004C38 A1[2B020000]        <2> 	mov eax, [cpuspeedperint]
  6493 00004C3D D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6494                              <2> 				;result by 2
  6495 00004C3F 8B1D[3D020000]      <2> 	mov ebx, [timeinterval]
  6496 00004C45 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6497 00004C48 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6498 00004C4A 89C1                <2> 	mov ecx, eax
  6499 00004C4C E866E3FFFF          <2> 	call showdec
  6500 00004C51 BE[244D0000]        <2> 	mov esi, cpuspeedmsg
  6501 00004C56 E878CFFFFF          <2> 	call printquiet
  6502 00004C5B 31D2                <2> 	xor edx, edx
  6503 00004C5D A1[2F020000]        <2> 	mov eax, [cpuclocksperint]
  6504 00004C62 8B15[33020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6505 00004C68 8B1D[3D020000]      <2> 	mov ebx, [timeinterval]
  6506 00004C6E C1EB0A              <2> 	shr ebx, 10
  6507 00004C71 F7F3                <2> 	div ebx
  6508 00004C73 89C1                <2> 	mov ecx, eax
  6509 00004C75 E83DE3FFFF          <2> 	call showdec
  6510 00004C7A BE[2A4D0000]        <2> 	mov esi, cpuclockmsg
  6511 00004C7F E84FCFFFFF          <2> 	call printquiet
  6512 00004C84 8B0D[37020000]      <2> 	mov ecx, [memoryspace]
  6513 00004C8A C1E914              <2> 	shr ecx, 20
  6514 00004C8D 41                  <2> 	inc ecx	;the reading is one MB behind
  6515 00004C8E E824E3FFFF          <2> 	call showdec
  6516 00004C93 BE[2F4D0000]        <2> 	mov esi, memoryspacemsg
  6517 00004C98 E85ACFFFFF          <2> 	call print
  6518                              <2> %ifdef sound.included
  6519 00004C9D 803D[88510000]00    <2> 	cmp byte [SoundBlaster], 0
  6520 00004CA4 740A                <2> 	je .nosb
  6521 00004CA6 BE[0C4D0000]        <2> 	mov esi, soundblastermsg
  6522 00004CAB E847CFFFFF          <2> 	call print
  6523                              <2> .nosb:
  6524                              <2> %endif
  6525 00004CB0 C3                  <2> 	ret
  6526                              <2> 
  6527 00004CB1 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6528 00004CBA 666F726D6174696F6E- <2>
  6529 00004CC3 3A0A00              <2>
  6530 00004CC6 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6531 00004CCF 6B2053706163652055- <2>
  6532 00004CD8 7365640A00          <2>
  6533 00004CDD 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6534 00004CE6 6F7279205370616365- <2>
  6535 00004CEF 20557365640A00      <2>
  6536 00004CF6 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6537 00004CFF 6E666F726D6174696F- <2>
  6538 00004D08 6E3A0A00            <2>
  6539                              <2> %ifdef sound.included
  6540 00004D0C 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6541 00004D15 746572204465746563- <2>
  6542 00004D1E 7465642E0A00        <2>
  6543                              <2> %endif
  6544 00004D24 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6545 00004D2A 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6546 00004D2F 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6547 00004D38 2053706163650A00    <2>
  6548 00004D40 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6549 00004D49 6D6F72792053706163- <2>
  6550 00004D52 653A20307800        <2>
  6551                              <1> %include 'source/programs/time.asm'
  6552 00004D58 FF2C74696D6500      <2> db 255,44,"time",0	
  6553                              <2> timer:
  6554 00004D5F 8B35[DA2C0000]      <2> 	mov esi, [currentcommandloc]
  6555 00004D65 81C604000000        <2> 	add esi, 4
  6556 00004D6B 803E00              <2> 	cmp byte [esi], 0
  6557 00004D6E 7477                <2> 	je .norun
  6558 00004D70 46                  <2> 	inc esi
  6559 00004D71 8B0D[42020000]      <2> 	mov ecx, [timeseconds]
  6560 00004D77 51                  <2> 	push ecx
  6561 00004D78 8B0D[46020000]      <2> 	mov ecx, [timenanoseconds]
  6562 00004D7E 51                  <2> 	push ecx
  6563 00004D7F BF[88A00300]        <2> 	mov edi, buftxt
  6564                              <2> .cpcmd:
  6565 00004D84 8A06                <2> 	mov al, [esi]
  6566 00004D86 8807                <2> 	mov [edi], al
  6567 00004D88 46                  <2> 	inc esi
  6568 00004D89 47                  <2> 	inc edi
  6569 00004D8A 3C00                <2> 	cmp al, 0
  6570 00004D8C 75F6                <2> 	jne .cpcmd
  6571 00004D8E E871DEFFFF          <2> 	call run
  6572 00004D93 5A                  <2> 	pop edx
  6573 00004D94 58                  <2> 	pop eax
  6574                              <2> 
  6575 00004D95 8B0D[42020000]      <2> 	mov ecx, [timeseconds]
  6576 00004D9B 29C1                <2> 	sub ecx, eax
  6577 00004D9D 8B1D[46020000]      <2> 	mov ebx, [timenanoseconds]
  6578 00004DA3 29D3                <2> 	sub ebx, edx
  6579 00004DA5 7307                <2> 	jae .nosign
  6580 00004DA7 81C300CA9A3B        <2> 	add ebx, 1000000000
  6581 00004DAD 49                  <2> 	dec ecx
  6582                              <2> .nosign:
  6583 00004DAE E804E2FFFF          <2> 	call showdec
  6584                              <2> 	
  6585 00004DB3 89D9                <2> 	mov ecx, ebx
  6586 00004DB5 BE[BF3C0000]        <2> 	mov esi, timenscache
  6587 00004DBA C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6588 00004DC1 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6589 00004DC8 C6460A30            <2> 	mov byte [esi + 10], "0"
  6590 00004DCC BE[CA3C0000]        <2> 	mov esi, timenscacheend
  6591 00004DD1 E8D3DFFFFF          <2> 	call convert
  6592 00004DD6 BE[BF3C0000]        <2> 	mov esi, timenscache
  6593 00004DDB E817CEFFFF          <2> 	call print
  6594 00004DE0 C605[BF3C0000]08    <2> 	mov byte [timenscache], 8
  6595                              <2> .norun:
  6596 00004DE7 C3                  <2> 	ret
  6597                              <2> 	
  6598                              <1> %include 'source/programs/turnoff.asm'
  6599 00004DE8 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6600 00004DF1 00                  <2>
  6601                              <2> 	turnoff:
  6602 00004DF2 66C705[CE0C0000]-   <2> 			mov word [realmodeptr], shutdown
  6603 00004DF9 [054E]              <2>
  6604 00004DFB BB[2F4E0000]        <2> 			mov ebx, halt
  6605 00004E00 E8B7BDFFFF          <2> 			call realmode
  6606                              <2> 
  6607                              <2> [BITS 16]
  6608                              <2> 		shutdown:
  6609 00004E05 B453                <2> 			mov ah, 0x53
  6610 00004E07 B004                <2> 			mov al, 4
  6611 00004E09 31DB                <2> 			xor bx, bx
  6612 00004E0B CD15                <2> 			int 0x15
  6613                              <2> 			
  6614 00004E0D B453                <2> 			mov ah, 0x53
  6615 00004E0F B001                <2> 			mov al, 1
  6616 00004E11 31DB                <2> 			xor bx, bx
  6617 00004E13 CD15                <2> 			int 0x15
  6618                              <2> 			
  6619 00004E15 B453                <2> 			mov ah, 0x53
  6620 00004E17 B008                <2> 			mov al, 8
  6621 00004E19 BB0100              <2> 			mov bx, 1
  6622 00004E1C B90100              <2> 			mov cx, 1
  6623 00004E1F CD15                <2> 			int 0x15
  6624                              <2> 			
  6625 00004E21 B453                <2> 			mov ah, 0x53
  6626 00004E23 B007                <2> 			mov al, 7
  6627 00004E25 BB0100              <2> 			mov bx, 1
  6628 00004E28 B90300              <2> 			mov cx, 3
  6629 00004E2B CD15                <2> 			int 0x15
  6630 00004E2D EBFE                <2> 			jmp $
  6631                              <2> 			[BITS 32]
  6632 00004E2F EBFE                <2> halt: jmp $
  6633                              <1> %include 'source/programs/wait.asm'
  6634 00004E31 FF2C7761697400      <2> db 255,44,"wait",0
  6635                              <2> waitkey:
  6636 00004E38 E8B2D3FFFF          <2> 		call getchar
  6637 00004E3D C3                  <2> 		ret
  6638                              <1> %include 'source/programs/while.asm'
  6639 00004E3E FF2C7768696C6500    <2> db 255,44,"while",0
  6640 00004E46 30C0                <2> whilecmd:  xor al, al
  6641 00004E48 3805[828C0300]      <2> 	cmp [BATCHISON], al
  6642 00004E4E 0F8491E9FFFF        <2> 	je near notbatch
  6643 00004E54 8B35[7E8C0300]      <2> 	mov esi, [BATCHPOS]
  6644 00004E5A 81EE02000000        <2> 	sub esi, 2
  6645 00004E60 4E                  <2> whilefnd: dec esi
  6646 00004E61 8A06                <2> 	mov al, [esi]
  6647 00004E63 3C0A                <2> 	cmp al, 10
  6648 00004E65 0F840A000000        <2> 	je near whilefnd2
  6649 00004E6B 3C00                <2> 	cmp al, 0
  6650 00004E6D 0F8402000000        <2> 	je near whilefnd2
  6651 00004E73 EBEB                <2> 	jmp whilefnd
  6652                              <2> whilefnd2:
  6653 00004E75 46                  <2> 	inc esi
  6654 00004E76 8935[848C0300]      <2> 	mov [LOOPPOS], esi
  6655 00004E7C C605[838C0300]01    <2> 	mov BYTE [LOOPON], 1
  6656 00004E83 BE[88A00300]        <2> 	mov esi, buftxt
  6657 00004E88 BB[88A00300]        <2> 	mov ebx, buftxt
  6658 00004E8D 81C306000000        <2> 	add ebx, 6
  6659 00004E93 E9F0F6FFFF          <2> 	jmp chkeqsn
  6660                              <1> progend:		;programs end here	
  6661                              <1> batchprogend:
  6662                                  	%include "source/hardware.asm"
  6663                              <1> %ifdef gui.included
  6664                              <1> 	%include "source/drivers/video/vesa.asm"
  6665                              <1> 	%include "source/drivers/input/mouse.asm"
  6666                              <1> %endif
  6667                              <1> %include "source/drivers/sound/pcspkr.asm"
  6668                              <2> ;PC Speaker Drivers
  6669                              <2> PCSpeakerRAW:
  6670 00004E98 60                  <2> 	pusha
  6671                              <2> nosoundrep:
  6672 00004E99 8B35[4D020000]      <2> 	mov esi, [soundpos]
  6673 00004E9F 31C9                <2> 	xor ecx, ecx
  6674 00004EA1 668B0D[4B020000]    <2> 	mov cx, [soundrepititions]
  6675 00004EA8 6681F90000          <2> 	cmp cx, 0
  6676 00004EAD 0F8548000000        <2> 	jne near donesetpitch
  6677 00004EB3 668B0E              <2> 	mov cx, [esi]
  6678 00004EB6 668B5E02            <2> 	mov bx, [esi + 2]
  6679 00004EBA 66890D[4B020000]    <2> 	mov [soundrepititions], cx
  6680 00004EC1 81C604000000        <2> 	add esi, 4
  6681 00004EC7 8935[4D020000]      <2> 	mov [soundpos], esi
  6682 00004ECD 3B35[51020000]      <2> 	cmp esi, [soundendpos]
  6683 00004ED3 7735                <2> 	ja stopsound
  6684 00004ED5 66813D[4B020000]00- <2> 	cmp word [soundrepititions], 0
  6685 00004EDD 00                  <2>
  6686 00004EDE 74B9                <2> 	je nosoundrep
  6687 00004EE0 6681FB0000          <2> 	cmp bx, 0
  6688 00004EE5 740F                <2> 	je nosoundplay
  6689 00004EE7 E840000000          <2> 	call setpitch
  6690 00004EEC E849000000          <2> 	call startsound
  6691 00004EF1 E905000000          <2> 	jmp donesetpitch
  6692                              <2> nosoundplay:
  6693 00004EF6 E846000000          <2> 	call killsound
  6694                              <2> donesetpitch:
  6695 00004EFB 6649                <2> 	dec cx
  6696 00004EFD 66890D[4B020000]    <2> 	mov [soundrepititions], cx
  6697 00004F04 61                  <2> 	popa
  6698 00004F05 E97FB3FFFF          <2> 	jmp timerinterrupt
  6699                              <2> stopsound:
  6700 00004F0A 31C0                <2> 	xor eax, eax
  6701 00004F0C 66A3[4B020000]      <2> 	mov [soundrepititions], ax
  6702 00004F12 A2[4A020000]        <2> 	mov [soundon], al
  6703 00004F17 A3[4D020000]        <2> 	mov [soundpos], eax
  6704 00004F1C A3[51020000]        <2> 	mov [soundendpos], eax
  6705 00004F21 E81B000000          <2> 	call killsound
  6706 00004F26 61                  <2> 	popa
  6707 00004F27 E95DB3FFFF          <2> 	jmp timerinterrupt
  6708                              <2> 
  6709                              <2> 
  6710                              <2> setpitch:
  6711 00004F2C B0B6                <2> 	mov al, 0xB6
  6712 00004F2E E643                <2> 	out 0x43, al
  6713 00004F30 6689D8              <2> 	mov ax, bx
  6714 00004F33 E642                <2> 	out 0x42, al
  6715 00004F35 88E0                <2> 	mov al, ah
  6716 00004F37 E642                <2> 	out 0x42, al
  6717 00004F39 C3                  <2> 	ret
  6718                              <2> startsound:
  6719 00004F3A E461                <2> 	in al, 0x61
  6720 00004F3C 0C03                <2> 	or al, 3
  6721 00004F3E E661                <2> 	out 0x61, al
  6722 00004F40 C3                  <2> 	ret
  6723                              <2> killsound:
  6724 00004F41 E461                <2> 	in al, 0x61
  6725 00004F43 24FC                <2> 	and al, 0xFC
  6726 00004F45 E661                <2> 	out 0x61, al
  6727 00004F47 C3                  <2> 	ret
  6728                              <2> 	
  6729                              <1> %ifdef sound.included
  6730                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6731                              <2> ;Sound Blaster Drivers
  6732                              <2> sblaster:
  6733                              <2> .init:
  6734 00004F48 E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6735 00004F4D A2[88510000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6736 00004F52 3C00                <2> 		cmp al, 0
  6737 00004F54 7418                <2> 		je .noinit
  6738 00004F56 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6739 00004F58 E805020000          <2> 		call WriteDSP
  6740 00004F5D B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6741 00004F5F E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6742 00004F64 BE[6F4F0000]        <2> 		mov esi, .initmsg
  6743 00004F69 E889CCFFFF          <2> 		call print
  6744                              <2> .noinit:
  6745 00004F6E C3                  <2> 		ret
  6746 00004F6F 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  6747 00004F78 69616C697A65642E0A- <2>
  6748 00004F81 00                  <2>
  6749                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  6750 00004F82 813D[73510000]0000- <2> 	cmp dword [Length0], 0
  6751 00004F8A 0000                <2>
  6752 00004F8C 0F8462000000        <2> 	je near .done
  6753 00004F92 FF0D[73510000]      <2> 	dec dword [Length0]
  6754 00004F98 E908000000          <2> 	jmp .notodd
  6755                              <2> .oddlength:
  6756 00004F9D 31C9                <2> 	xor ecx, ecx
  6757 00004F9F 880D[72510000]      <2> 	mov [OddLength], cl
  6758                              <2> .notodd:
  6759 00004FA5 8B35[79510000]      <2> 	mov esi, [NextMemLoc]
  6760 00004FAB 31C9                <2> 	xor ecx, ecx
  6761 00004FAD 668B0D[77510000]    <2> 	mov cx, [Length1]
  6762 00004FB4 D1E9                <2> 	shr ecx, 1
  6763 00004FB6 6641                <2> 	inc cx
  6764 00004FB8 31DB                <2> 	xor ebx, ebx
  6765 00004FBA 668B1D[81510000]    <2> 	mov bx, [SegLoc]
  6766 00004FC1 6601CB              <2> 	add bx, cx
  6767 00004FC4 66891D[81510000]    <2> 	mov [SegLoc], bx
  6768 00004FCB 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  6769 00004FD1 8935[7D510000]      <2> 	mov [MemLoc], esi
  6770 00004FD7 89C8                <2> 	mov eax, ecx
  6771 00004FD9 01F0                <2> 	add eax, esi
  6772 00004FDB A3[79510000]        <2> 	mov [NextMemLoc], eax
  6773 00004FE0 E833000000          <2> 	call DMACopy
  6774                              <2> 	;call DMAPlay
  6775 00004FE5 E8E0000000          <2> 	call PlayDSP
  6776 00004FEA 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6777 00004FEE EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6778 00004FEF E953B3FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6779                              <2> .done:
  6780 00004FF4 803D[72510000]01    <2> 	cmp byte [OddLength], 1
  6781 00004FFB 74A0                <2> 	je .oddlength
  6782 00004FFD 31C0                <2> 	xor eax, eax
  6783 00004FFF 66A3[77510000]      <2> 	mov [Length1], ax
  6784 00005005 66B8D000            <2> 	mov ax, 0xD0
  6785 00005009 E854010000          <2> 	call WriteDSP
  6786 0000500E 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6787 00005012 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6788 00005013 E92FB3FFFF          <2> 	jmp handled2
  6789                              <2> 	
  6790                              <2> DMACopy:
  6791 00005018 66B80800            <2> 		mov ax, LINEAR_SEL
  6792 0000501C 8EE0                <2> 		mov fs, ax
  6793 0000501E C1E902              <2> 		shr ecx, 2
  6794                              <2> .loop:
  6795 00005021 8B06                <2> 		mov eax, [esi]
  6796 00005023 648903              <2> 		mov [fs:ebx], eax
  6797 00005026 81C604000000        <2> 		add esi, 4
  6798 0000502C 81C304000000        <2> 		add ebx, 4
  6799 00005032 E2ED                <2> 		loop .loop
  6800 00005034 66B83000            <2> 		mov ax, NEW_DATA_SEL
  6801 00005038 8EE0                <2> 		mov fs, ax
  6802 0000503A C3                  <2> 		ret
  6803                              <2> 		
  6804                              <2> 
  6805                              <2> DMAPlay:    ;uses eax ebx edx
  6806 0000503B C605[83510000]00    <2> 		mov	byte [Page1],00h
  6807                              <2> 
  6808 00005042 B005                <2> 		mov	al,(Channel+4)
  6809 00005044 66BA0A00            <2> 		mov	dx,0Ah
  6810 00005048 EE                  <2> 		out	dx,al
  6811 00005049 30C0                <2> 		xor	al,al
  6812 0000504B 66BA0C00            <2> 		mov	dx,0Ch
  6813 0000504F EE                  <2> 		out	dx,al
  6814 00005050 B059                <2> 		mov	al,ModeReg
  6815 00005052 66BA0B00            <2> 		mov	dx,0Bh
  6816 00005056 EE                  <2> 		out	dx,al
  6817 00005057 B800000800          <2> 		mov	eax,0x80000
  6818 0000505C 66BA0200            <2> 		mov	dx,AddPort
  6819 00005060 EE                  <2> 		out	dx,al
  6820 00005061 86C4                <2> 		xchg al,ah
  6821 00005063 EE                  <2> 		out	dx,al
  6822 00005064 B800000800          <2> 		mov	eax,0x80000
  6823 00005069 89C2                <2> 		mov	edx,eax
  6824 0000506B 2500000100          <2> 		and	eax,65536
  6825 00005070 7406                <2> 		jz	MemLocN1
  6826 00005072 FE05[83510000]      <2> 		inc	byte [Page1]
  6827                              <2> MemLocN1:
  6828 00005078 89D0                <2> 		mov	eax,edx
  6829 0000507A 2500000200          <2> 		and	eax,131072
  6830 0000507F 7407                <2> 		jz	MemLocN2
  6831 00005081 8005[83510000]02    <2> 		add	byte [Page1],02
  6832                              <2> MemLocN2:
  6833 00005088 89D0                <2> 		mov	eax,edx
  6834 0000508A 2500000400          <2> 		and	eax,262144
  6835 0000508F 7407                <2> 		jz	MemLocN3
  6836 00005091 8005[83510000]04    <2> 		add	byte [Page1],04
  6837                              <2> MemLocN3:
  6838 00005098 89D0                <2> 		mov	eax,edx
  6839 0000509A 2500000800          <2> 		and	eax,524288
  6840 0000509F 7407                <2> 		jz	MemLocN4
  6841 000050A1 8005[83510000]08    <2> 		add	byte [Page1],08
  6842                              <2> MemLocN4:
  6843 000050A8 66BA8300            <2> 		mov	dx,PgPort
  6844 000050AC A0[83510000]        <2> 		mov	al,[Page1]
  6845 000050B1 EE                  <2> 		out	dx,al
  6846 000050B2 66BA0300            <2> 		mov	dx,LenPort
  6847 000050B6 66A1[77510000]      <2> 		mov	ax,[Length1]
  6848 000050BC 6648                <2> 		dec ax
  6849 000050BE EE                  <2> 		out	dx,al
  6850 000050BF 86C4                <2> 		xchg al,ah
  6851 000050C1 EE                  <2> 		out	dx,al
  6852 000050C2 66BA0A00            <2> 		mov	dx,0Ah
  6853 000050C6 B001                <2> 		mov	al,Channel
  6854 000050C8 EE                  <2> 		out	dx,al
  6855 000050C9 C3                  <2> 		ret
  6856                              <2> 		
  6857                              <2> PlayDSP:
  6858 000050CA B040                <2> 		mov	al,40h
  6859 000050CC E891000000          <2> 		call WriteDSP
  6860 000050D1 31D2                <2> 		xor	edx,edx
  6861 000050D3 B840420F00          <2> 		mov	eax,1000000
  6862 000050D8 8B1D[84510000]      <2> 		mov	ebx,[Freq]
  6863 000050DE 803D[71510000]00    <2> 		cmp byte [Stereo], 0
  6864 000050E5 7402                <2> 		je .nost
  6865 000050E7 D1E3                <2> 		shl ebx, 1
  6866                              <2> .nost:
  6867 000050E9 F7F3                <2> 		div	ebx
  6868 000050EB 89C3                <2> 		mov	ebx,eax
  6869 000050ED B800010000          <2> 		mov	eax,256
  6870 000050F2 29D8                <2> 		sub	eax,ebx
  6871 000050F4 E869000000          <2> 		call WriteDSP
  6872 000050F9 B014                <2> 		mov	al,14h	;write the mode
  6873 000050FB 803D[71510000]00    <2> 		cmp byte [Stereo], 0
  6874 00005102 7400                <2> 		je .nost2
  6875                              <2> 		
  6876                              <2> .nost2:
  6877 00005104 E859000000          <2> 		call WriteDSP
  6878 00005109 66A1[77510000]      <2> 		mov	ax,[Length1]
  6879 0000510F 66D1E8              <2> 		shr ax, 1
  6880 00005112 E84B000000          <2> 		call WriteDSP
  6881 00005117 86C4                <2> 		xchg al,ah
  6882 00005119 E844000000          <2> 		call WriteDSP
  6883 0000511E C3                  <2> 		ret
  6884                              <2> 
  6885                              <2> MstrVol:    ;uses ax dx
  6886 0000511F 6650                <2> 	   push ax
  6887 00005121 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6888 00005125 B022                <2> 	   mov	al,22h
  6889 00005127 EE                  <2> 	   out	dx,al
  6890 00005128 6658                <2> 	   pop	ax
  6891 0000512A 6642                <2> 	   inc	dx
  6892 0000512C EE                  <2> 	   out	dx,al
  6893 0000512D C3                  <2> 	   ret
  6894                              <2> 	   
  6895                              <2> ResetDSP:   ; uses cx dx
  6896 0000512E 66BA2602            <2> 			mov	dx,(BasePort+6)
  6897 00005132 B001                <2> 			mov	al,01
  6898 00005134 EE                  <2> 			out	dx,al
  6899 00005135 66B93200            <2> 			mov	cx,50
  6900 00005139 EC                  <2> WaitIt1:	in	al,dx
  6901 0000513A E2FD                <2> 			loop WaitIt1
  6902 0000513C 30C0                <2> 			xor	al,al
  6903 0000513E EE                  <2> 			out	dx,al
  6904 0000513F 66B93200            <2> 			mov	cx,50
  6905 00005143 EC                  <2> WaitIt2:	in	al,dx
  6906 00005144 E2FD                <2> 			loop WaitIt2
  6907 00005146 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6908 00005148 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6909 0000514C EC                  <2> 			in	al,dx
  6910 0000514D 2480                <2> 			and	al,80h
  6911 0000514F 3C80                <2> 			cmp	al,80h
  6912 00005151 750C                <2> 			jne	ResetErr
  6913 00005153 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6914 00005157 EC                  <2> 			in	al,dx
  6915 00005158 3CAA                <2> 			cmp	al,0AAh
  6916 0000515A 7503                <2> 			jne	ResetErr
  6917 0000515C B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6918 0000515E C3                  <2> 			ret
  6919 0000515F 30C0                <2> ResetErr:	xor al, al
  6920 00005161 C3                  <2> 			ret
  6921                              <2> 
  6922                              <2> WriteDSP:   ;uses ax dx
  6923 00005162 6650                <2> 		push ax
  6924 00005164 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6925 00005168 EC                  <2> WaitIt:	in	al,dx
  6926 00005169 2480                <2> 		and	al,80h
  6927 0000516B 75FB                <2> 		jnz	WaitIt
  6928 0000516D 6658                <2> 		pop	ax
  6929 0000516F EE                  <2> 		out	dx,al
  6930 00005170 C3                  <2> 		ret
  6931                              <2> 
  6932 00005171 00                  <2> Stereo db 0
  6933 00005172 00                  <2> OddLength db 0
  6934 00005173 00000000            <2> Length0 dd	0
  6935 00005177 0000                <2> Length1	dw  0
  6936 00005179 00000000            <2> NextMemLoc dd 0
  6937 0000517D 00000000            <2> MemLoc	dd  0
  6938 00005181 0000                <2> SegLoc  dw 0
  6939 00005183 00                  <2> Page1	db  0
  6940 00005184 00000000            <2> Freq	dd	0
  6941                              <2> PgPort	equ 83h
  6942                              <2> AddPort	equ 02h
  6943                              <2> LenPort	equ 03h
  6944                              <2> ModeReg	equ 59h
  6945                              <2> Channel	equ 01h
  6946                              <2> BasePort	equ 220h
  6947 00005188 00                  <2> SoundBlaster	db 0
  6948                              <1> %endif
  6949                              <1> %ifdef io.serial
  6950                              <1> 	%include "source/drivers/input/serial.asm"
  6951                              <1> %else
  6952                              <1> 	%include "source/drivers/input/keyboard.asm"
  6953 00005189 00                  <2> specialkey db 0
  6954                              <2> ;charregion db 0
  6955                              <2> waitforinput:		;this is basically the idle process
  6956                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  6957                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  6958 0000518A 6631C0              <2> 	xor ax, ax
  6959 0000518D A0[065D0000]        <2> 	mov al, [threadson]
  6960 00005192 8825[065D0000]      <2> 	mov [threadson], ah
  6961 00005198 FB                  <2> 	sti
  6962 00005199 F4                  <2> 	hlt
  6963 0000519A A2[065D0000]        <2> 	mov [threadson], al
  6964 0000519F 66813D[53220000]00- <2> 	cmp word [trans], 0
  6965 000051A7 00                  <2>
  6966 000051A8 7401                <2> 	je getkey
  6967 000051AA C3                  <2> 	ret
  6968                              <2> getkey:
  6969 000051AB 31C0                <2> 		xor eax, eax
  6970 000051AD A2[89510000]        <2> 		mov [specialkey], al
  6971 000051B2 A3[4F220000]        <2> 		mov [lastkey], eax
  6972 000051B7 E464                <2> 		in al, 64h ; Status
  6973                              <2> 	%ifdef gui.included
  6974                              <2> 		test al, 20h ; PS2-Mouse?
  6975                              <2> 		jnz near moused
  6976                              <2> 	%endif
  6977 000051B9 A801                <2> 		test al, 1 
  6978 000051BB 74CD                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6979                              <2> 	calckey:
  6980 000051BD E460                <2> 		in al, 60h
  6981 000051BF 30E4                <2> 		xor ah, ah
  6982 000051C1 6689C3              <2> 		mov bx, ax
  6983 000051C4 66A3[51220000]      <2> 		mov [lastkey + 2], ax
  6984 000051CA BF[59530000]        <2> 		mov edi, scancode
  6985                              <2> 	searchscan: 
  6986 000051CF 80FB3A              <2> 		cmp bl, 3Ah
  6987 000051D2 7314                <2> 		jae scanother
  6988 000051D4 C1E004              <2> 		shl eax, 4
  6989 000051D7 01C7                <2> 		add edi, eax
  6990 000051D9 668B07              <2> 		mov ax, [edi]
  6991 000051DC 663D0000            <2> 		cmp ax, 0
  6992 000051E0 7406                <2> 		je scanother
  6993 000051E2 E9D0000000          <2> 		jmp scanfound
  6994 000051E7 00                  <2> uppercase db 0
  6995                              <2> scanother:
  6996 000051E8 6631C0              <2> 		xor ax, ax
  6997 000051EB 66A3[4F220000]      <2> 		mov [lastkey], ax
  6998 000051F1 80FBE0              <2> 		cmp bl, 0E0h
  6999 000051F4 0F8477000000        <2> 		je near getkeyspecial
  7000 000051FA 803D[89510000]E0    <2> 		cmp byte [specialkey], 0xE0
  7001 00005201 7525                <2> 		jne nospecialkey
  7002 00005203 80FB38              <2> 		cmp bl, 38h
  7003 00005206 0F849A000000        <2> 		je near alton
  7004 0000520C 80FBB8              <2> 		cmp bl, 0B8h
  7005 0000520F 0F8499000000        <2> 		je near altoff
  7006 00005215 80FB1D              <2> 		cmp bl, 1Dh
  7007 00005218 0F8478000000        <2> 		je near ctron
  7008 0000521E 80FB9D              <2> 		cmp bl, 9Dh
  7009 00005221 0F8477000000        <2> 		je near ctroff
  7010 00005227 C3                  <2> 		ret
  7011                              <2> nospecialkey:
  7012 00005228 80FB2A              <2> 		cmp bl, 2Ah
  7013 0000522B 0F8455000000        <2> 		je near shifton
  7014 00005231 80FB36              <2> 		cmp bl, 36h
  7015 00005234 0F844C000000        <2> 		je near shifton
  7016 0000523A 80FB1C              <2> 		cmp bl, 1Ch
  7017 0000523D 0F8473000000        <2> 		je near entdown
  7018 00005243 80FBAA              <2> 		cmp bl, 0AAh
  7019 00005246 0F8442000000        <2> 		je near shiftoff
  7020 0000524C 80FBB6              <2> 		cmp bl, 0B6h
  7021 0000524F 0F8439000000        <2> 		je near shiftoff
  7022 00005255 80FB3A              <2> 		cmp bl, 3Ah
  7023 00005258 0F84A7000000        <2> 		je near capslock
  7024 0000525E 80FB45              <2> 		cmp bl, 0x45
  7025 00005261 0F84AF000000        <2> 		je near numlock
  7026 00005267 80FB46              <2> 		cmp bl, 0x46
  7027 0000526A 0F84BE000000        <2> 		je near scrolllock
  7028 00005270 C3                  <2> 		ret
  7029                              <2> 	getkeyspecial:
  7030 00005271 C605[89510000]E0    <2> 		mov byte [specialkey], 0xE0
  7031 00005278 E940FFFFFF          <2> 		jmp calckey
  7032                              <2> 	shift:
  7033 0000527D A0[E7510000]        <2> 		mov al, [uppercase]
  7034 00005282 3C01                <2> 		cmp al, 1
  7035 00005284 7308                <2> 		jae shiftoff
  7036                              <2> 	shifton:
  7037 00005286 C605[E7510000]01    <2> 		mov byte [uppercase], 1
  7038 0000528D C3                  <2> 		ret
  7039                              <2> 	shiftoff:
  7040 0000528E C605[E7510000]00    <2> 		mov byte [uppercase], 0
  7041 00005295 C3                  <2> 		ret
  7042                              <2> 	ctron:
  7043 00005296 C605[04530000]01    <2> 		mov byte [ctrkey], 1
  7044 0000529D C3                  <2> 		ret
  7045                              <2> 	ctroff:
  7046 0000529E C605[04530000]00    <2> 		mov byte [ctrkey], 0
  7047 000052A5 C3                  <2> 		ret
  7048                              <2> 	alton:
  7049 000052A6 C605[03530000]01    <2> 		mov byte [altkey], 1
  7050 000052AD C3                  <2> 		ret
  7051                              <2> 	altoff:
  7052 000052AE C605[03530000]00    <2> 		mov byte [altkey], 0
  7053 000052B5 C3                  <2> 		ret
  7054                              <2> 	entdown:
  7055 000052B6 C3                  <2> 		ret
  7056                              <2> scanfound:
  7057 000052B7 81C708000000        <2> 		add edi, 8
  7058 000052BD 803D[04530000]01    <2> 		cmp byte [ctrkey], 1
  7059 000052C4 7306                <2> 		jae ctrlin
  7060 000052C6 81EF08000000        <2> 		sub edi, 8
  7061                              <2> 	ctrlin:
  7062 000052CC 81C704000000        <2> 		add edi, 4
  7063 000052D2 803D[03530000]01    <2> 		cmp byte [altkey], 1
  7064 000052D9 7306                <2> 		jae altin
  7065 000052DB 81EF04000000        <2> 		sub edi, 4
  7066                              <2> 	altin:
  7067 000052E1 81C702000000        <2> 		add edi, 2
  7068 000052E7 803D[E7510000]01    <2> 		cmp byte [uppercase], 1
  7069 000052EE 7306                <2> 		jae uppercaseon
  7070 000052F0 81EF02000000        <2> 		sub edi, 2
  7071                              <2> 	uppercaseon:
  7072 000052F6 668B07              <2> 		mov ax,[edi]
  7073 000052F9 66A3[4F220000]      <2> 		mov [lastkey], ax
  7074 000052FF C3                  <2> 		ret
  7075                              <2> 		
  7076 00005300 00                  <2> keyboardstatus db 0
  7077 00005301 00                  <2> numlockstatus db 0
  7078 00005302 00                  <2> scrolllockstatus db 0
  7079 00005303 00                  <2> altkey db 0
  7080 00005304 00                  <2> ctrkey db 0
  7081                              <2> 	capslock:
  7082 00005305 8035[00530000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7083 0000530C E835000000          <2> 		call updatekblights
  7084 00005311 E967FFFFFF          <2> 		jmp shift
  7085                              <2> 		
  7086                              <2> 	numlock:
  7087 00005316 8035[00530000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7088 0000531D 8035[01530000]01    <2> 		xor byte [numlockstatus], 1
  7089 00005324 E81D000000          <2> 		call updatekblights
  7090 00005329 E97DFEFFFF          <2> 		jmp getkey
  7091                              <2> 	
  7092                              <2> 	scrolllock:
  7093 0000532E 8035[00530000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7094 00005335 8035[02530000]01    <2> 		xor byte [scrolllockstatus], 1
  7095 0000533C E805000000          <2> 		call updatekblights
  7096 00005341 E965FEFFFF          <2> 		jmp getkey
  7097                              <2> 		
  7098                              <2> 	updatekblights:
  7099 00005346 B0ED                <2> 		mov al, 0xED
  7100 00005348 66BA6000            <2> 		mov dx, 0x60
  7101 0000534C EE                  <2> 		out dx, al
  7102                              <2> 	chkkbdack:
  7103 0000534D EC                  <2> 		in al, dx
  7104 0000534E 3CFA                <2> 		cmp al, 0xFA
  7105 00005350 75FB                <2> 		jne chkkbdack
  7106 00005352 A0[00530000]        <2> 		mov al, [keyboardstatus]
  7107 00005357 EE                  <2> 		out dx, al
  7108 00005358 C3                  <2> 		ret
  7109                              <2> 		
  7110                              <2> scancode:
  7111                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7112 00005359 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7113 00005362 00000000000000      <2>
  7114 00005369 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7115 00005372 00000000000000      <2>
  7116 00005379 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7117 00005382 00000000000000      <2>
  7118 00005389 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7119 00005392 00000000000000      <2>
  7120 00005399 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7121 000053A2 00000000000000      <2>
  7122 000053A9 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7123 000053B2 00000000000000      <2>
  7124 000053B9 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7125 000053C2 00000000000000      <2>
  7126 000053C9 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7127 000053D2 00000000000000      <2>
  7128 000053D9 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7129 000053E2 00000000000000      <2>
  7130 000053E9 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7131 000053F2 00000000000000      <2>
  7132 000053F9 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7133 00005402 00000000000000      <2>
  7134 00005409 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7135 00005412 00000000000000      <2>
  7136 00005419 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7137 00005422 00000000000000      <2>
  7138 00005429 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7139 00005432 00000000000000      <2>
  7140 00005439 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7141 00005442 00000000000000      <2>
  7142 00005449 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7143 00005452 00000000000000      <2>
  7144 00005459 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7145 00005461 003A0039041904      <2>
  7146 00005469 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7147 00005472 03000046042604      <2>
  7148 00005479 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7149 00005482 03950343042304      <2>
  7150 00005489 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7151 00005492 03A1033A041A04      <2>
  7152 00005499 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7153 000054A2 03A40335041504      <2>
  7154 000054A9 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7155 000054B2 03A5033D041D04      <2>
  7156 000054B9 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7157 000054C2 03980333041304      <2>
  7158 000054C9 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7159 000054D2 03990348042804      <2>
  7160 000054D9 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7161 000054E2 039F0349042904      <2>
  7162 000054E9 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7163 000054F2 03A00337041704      <2>
  7164 000054F9 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7165 00005502 00000045042504      <2>
  7166 00005509 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7167 00005512 0000004A042A04      <2>
  7168 00005519 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7169 00005522 00000000000000      <2>
  7170 00005529 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7171 00005532 00000000000000      <2>
  7172 00005539 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7173 00005542 03910344042404      <2>
  7174 00005549 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7175 00005552 03A3034B042B04      <2>
  7176 00005559 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7177 00005562 03940332041204      <2>
  7178 00005569 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7179 00005572 03A60330041004      <2>
  7180 00005579 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7181 00005582 0393033F041F04      <2>
  7182 00005589 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7183 00005592 03970340042004      <2>
  7184 00005599 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7185 000055A2 039E033E041E04      <2>
  7186 000055A9 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7187 000055B2 039A033B041B04      <2>
  7188 000055B9 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7189 000055C2 039B0334041404      <2>
  7190 000055C9 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7191 000055D2 00000036041604      <2>
  7192 000055D9 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7193 000055E2 0000004D042D04      <2>
  7194 000055E9 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7195 000055F2 00000051040104      <2>
  7196 000055F9 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7197 00005602 00000000000000      <2>
  7198 00005609 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7199 00005612 0000002F005C00      <2>
  7200 00005619 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7201 00005622 0396034F042F04      <2>
  7202 00005629 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7203 00005632 03A70347042704      <2>
  7204 00005639 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7205 00005642 03A80341042104      <2>
  7206 00005649 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7207 00005652 03A9033C041C04      <2>
  7208 00005659 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7209 00005662 03920338041804      <2>
  7210 00005669 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7211 00005672 039D0342042204      <2>
  7212 00005679 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7213 00005682 039C034C042C04      <2>
  7214 00005689 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7215 00005692 00000031041104      <2>
  7216 00005699 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7217 000056A2 0000004E042E04      <2>
  7218 000056A9 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7219 000056B2 0000002E002C00      <2>
  7220 000056B9 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7221 000056C2 00000000000000      <2>
  7222 000056C9 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7223 000056D2 00000000000000      <2>
  7224 000056D9 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7225 000056E2 00000000000000      <2>
  7226 000056E9 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7227 000056F2 00000000000000      <2>
  7228                              <2> noscan:
  7229                              <2> 
  7230                              <1> %endif
  7231                              <1> ;drivers will soon be handled intelligently
  7232                              <1> ;every driver's source will be scanned for a .init function
  7233                              <1> ;that will be called and if it returns 0
  7234                              <1> ;the hardware was found and the driver initialized properly
  7235                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7236                              <1> 	%ifdef sound.included
  7237 000056F9 E84AF8FFFF          <1> 		call sblaster.init
  7238                              <1> 	%endif
  7239                              <1> 	%ifdef network.included
  7240 000056FE E808060000          <1> 		call network.init
  7241                              <1> 	%endif
  7242 00005703 C3                  <1> 	ret
  7243                              <1> initialize:
  7244                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7245 00005704 E839000000          <1> 	call .pic
  7246                              <1> %ifdef terminal.vsync
  7247                              <1> 	call .rtc
  7248                              <1> %endif
  7249 00005709 E896000000          <1> 	call .pit
  7250 0000570E E8B8000000          <1> 	call .fpu
  7251 00005713 E8C9000000          <1> 	call .sse
  7252 00005718 31C0                <1> 	xor eax, eax
  7253 0000571A 31C9                <1> 	xor ecx, ecx
  7254                              <1> %ifdef io.serial
  7255                              <1> 	call serial.init
  7256                              <1> %endif
  7257 0000571C E801000000          <1> 	call .time
  7258 00005721 C3                  <1> 	ret
  7259                              <1> 	
  7260                              <1> .time:
  7261 00005722 E85EE6FFFF          <1> 	call time
  7262 00005727 E806E8FFFF          <1> 	call timeconvert
  7263 0000572C 890D[42020000]      <1> 	mov [timeseconds], ecx
  7264 00005732 31C9                <1> 	xor ecx, ecx
  7265 00005734 890D[46020000]      <1> 	mov [timenanoseconds], ecx
  7266 0000573A C605[CD3C0000]01    <1> 	mov byte [istimeset], 1
  7267 00005741 C3                  <1> 	ret
  7268                              <1> 	
  7269                              <1> .pic:
  7270 00005742 B011                <1> 	mov al, 0x11
  7271 00005744 E620                <1> 	out 0x20, al
  7272 00005746 E6A0                <1> 	out 0xA0, al
  7273 00005748 B040                <1> 	mov al, 0x40	;interrupt for master
  7274 0000574A E621                <1> 	out 0x21, al
  7275 0000574C B048                <1> 	mov al, 0x48	;interrupt for slave
  7276 0000574E E6A1                <1> 	out 0xA1, al
  7277 00005750 B004                <1> 	mov al, 4
  7278 00005752 E621                <1> 	out 0x21, al
  7279 00005754 B002                <1> 	mov al, 2
  7280 00005756 E6A1                <1> 	out 0xA1, al
  7281 00005758 B001                <1> 	mov al, 0x1
  7282 0000575A E621                <1> 	out 0x21, al
  7283 0000575C B001                <1> 	mov al, 0x1
  7284 0000575E E6A1                <1> 	out 0xA1, al
  7285                              <1> 	;masks are set to zero so as not to mask
  7286 00005760 30C0                <1> 	xor al, al
  7287 00005762 E621                <1> 	out 0x21, al
  7288 00005764 30C0                <1> 	xor al, al
  7289 00005766 E6A1                <1> 	out 0xA1, al
  7290 00005768 B020                <1> 	mov al, 0x20
  7291 0000576A E6A0                <1> 	out 0xA0, al
  7292 0000576C E620                <1> 	out 0x20, al
  7293 0000576E C3                  <1> 	ret
  7294                              <1> .rtc:
  7295 0000576F B008                <1> 	mov al, 0x8
  7296 00005771 88C4                <1> 	mov ah, al
  7297 00005773 66BA7000            <1> 	mov dx, 0x70
  7298 00005777 EE                  <1> 	out dx, al
  7299 00005778 6642                <1> 	inc dx
  7300 0000577A EC                  <1> 	in al, dx
  7301 0000577B 86C4                <1> 	xchg al, ah
  7302 0000577D 664A                <1> 	dec dx
  7303 0000577F EE                  <1> 	out dx, al
  7304 00005780 6642                <1> 	inc dx
  7305 00005782 86C4                <1> 	xchg al, ah
  7306 00005784 0C40                <1> 	or al, 0x40
  7307 00005786 EE                  <1> 	out dx, al
  7308                              <1> 	
  7309 00005787 B00A                <1> 	mov al, 0xA
  7310 00005789 664A                <1> 	dec dx
  7311 0000578B EE                  <1> 	out dx, al
  7312 0000578C 86C4                <1> 	xchg al, ah
  7313 0000578E 6642                <1> 	inc dx
  7314 00005790 EC                  <1> 	in al, dx
  7315 00005791 24F0                <1> 	and al, 0xF0
  7316 00005793 0A05[09030000]      <1> 	or al, [rtcrate]
  7317 00005799 86C4                <1> 	xchg al, ah
  7318 0000579B 664A                <1> 	dec dx
  7319 0000579D EE                  <1> 	out dx, al
  7320 0000579E 6642                <1> 	inc dx
  7321 000057A0 86C4                <1> 	xchg al, ah
  7322 000057A2 EE                  <1> 	out dx, al
  7323 000057A3 C3                  <1> 	ret
  7324                              <1> 	
  7325                              <1> .pit:
  7326                              <1> 	;initialize the PIT
  7327 000057A4 66A1[3B020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7328 000057AA E640                <1> 	out 0x40, al
  7329 000057AC 66C1C008            <1> 	rol ax, 8
  7330 000057B0 E640                <1> 	out 0x40, al
  7331                              <1> 	;enable rtc interrupt
  7332 000057B2 B00B                <1> 	mov al, 0xB
  7333 000057B4 E670                <1> 	out 0x70, al
  7334 000057B6 66C1C008            <1> 	rol ax, 8
  7335 000057BA E471                <1> 	in al, 0x71
  7336 000057BC 66C1C008            <1> 	rol ax, 8
  7337 000057C0 E670                <1> 	out 0x70, al
  7338 000057C2 66C1C008            <1> 	rol ax, 8
  7339 000057C6 0C40                <1> 	or al, 0x40
  7340 000057C8 E671                <1> 	out 0x71, al
  7341 000057CA C3                  <1> 	ret
  7342                              <1> .fpu:
  7343                              <1> 	;And now to initialize the fpu
  7344 000057CB 0F20E0              <1> 	mov eax, cr4
  7345 000057CE 0D00020000          <1> 	or eax, 0x200
  7346 000057D3 0F22E0              <1> 	mov cr4, eax
  7347 000057D6 B87F0B0000          <1> 	mov eax, 0xB7F
  7348 000057DB 50                  <1> 	push eax
  7349 000057DC D92C24              <1> 	fldcw [esp]
  7350 000057DF 58                  <1> 	pop eax
  7351 000057E0 C3                  <1> 	ret
  7352                              <1> 	
  7353                              <1> .sse:
  7354 000057E1 0F20C0              <1> 	mov eax, cr0
  7355 000057E4 24FB                <1> 	and al, 11111011b
  7356 000057E6 0C02                <1> 	or al, 00000010b
  7357 000057E8 0F22C0              <1> 	mov cr0, eax
  7358 000057EB 0F20E0              <1> 	mov eax, cr4
  7359 000057EE 660D0006            <1> 	or ax, 0000011000000000b
  7360 000057F2 0F22E0              <1> 	mov cr4, eax
  7361 000057F5 C3                  <1> 	ret
  7362                                      %include "source/pci.asm"
  7363 000057F6 00                  <1> pcibus		db 0
  7364 000057F7 00                  <1> pcidevice	db 0
  7365 000057F8 00                  <1> pcifunction	db 0
  7366 000057F9 00                  <1> pciregister	db 0
  7367 000057FA 00                  <1> pcireqtype	db 0
  7368 000057FB 00000000            <1> pcidevid	dd 0
  7369 000057FF FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7370                              <1> getpcimem:
  7371 00005803 B002                <1> 	mov al, 2
  7372 00005805 A2[FA570000]        <1> 	mov [pcireqtype], al
  7373 0000580A E922000000          <1> 	jmp searchpci
  7374                              <1> getpciport:
  7375 0000580F B001                <1> 	mov al, 1
  7376 00005811 A2[FA570000]        <1> 	mov [pcireqtype], al
  7377 00005816 E916000000          <1> 	jmp searchpci
  7378                              <1> pcidump:
  7379 0000581B 31C0                <1> 	xor eax, eax
  7380 0000581D A2[F8570000]        <1> 	mov [pcifunction], al
  7381 00005822 A2[F6570000]        <1> 	mov [pcibus], al
  7382 00005827 A2[F7570000]        <1> 	mov [pcidevice], al
  7383 0000582C A2[FA570000]        <1> 	mov [pcireqtype], al
  7384                              <1> searchpci:		;return in ebx, start X in pciX
  7385 00005831 30C0                <1> 	xor al, al
  7386 00005833 A2[F9570000]        <1> 	mov [pciregister], al
  7387 00005838 E81D020000          <1> 	call getpciaddr
  7388 0000583D BAF80C0000          <1> 	mov edx, 0xCF8
  7389 00005842 EF                  <1> 	out dx, eax	;request pci config
  7390 00005843 BAFC0C0000          <1> 	mov edx, 0xCFC
  7391 00005848 ED                  <1> 	in eax, dx 	;read in pci config
  7392 00005849 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7393 0000584E 0F8237000000        <1> 	jb near checkpcidevice
  7394                              <1> searchpciret:
  7395                              <1> nextpcidevice:
  7396 00005854 30C0                <1> 	xor al, al
  7397 00005856 A2[F8570000]        <1> 	mov [pcifunction], al
  7398 0000585B A0[F7570000]        <1> 	mov al, [pcidevice]
  7399 00005860 3C1F                <1> 	cmp al, 11111b
  7400 00005862 0F8300010000        <1> 	jae near nextpcibus
  7401 00005868 FEC0                <1> 	inc al
  7402 0000586A A2[F7570000]        <1> 	mov [pcidevice], al
  7403 0000586F EBC0                <1> 	jmp searchpci
  7404 00005871 A0[F8570000]        <1> 	mov al, [pcifunction]
  7405 00005876 3C07                <1> 	cmp al, 111b
  7406 00005878 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7407 0000587E FEC0                <1> 	inc al
  7408 00005880 A2[F8570000]        <1> 	mov [pcifunction], al
  7409 00005885 EBAA                <1> 	jmp searchpci
  7410 00005887 00000000            <1> pcitype: db 0,0,0,0
  7411                              <1> checkpcidevice:
  7412 0000588B 31C0                <1> 	xor eax, eax
  7413 0000588D 3905[FB570000]      <1> 	cmp [pcidevid], eax
  7414 00005893 0F8430000000        <1> 	je near .good
  7415 00005899 A2[F9570000]        <1> 	mov [pciregister], al	;device id, vendor id
  7416 0000589E E8B7010000          <1> 	call getpciaddr
  7417 000058A3 BAF80C0000          <1> 	mov edx, 0xCF8
  7418 000058A8 EF                  <1> 	out dx, eax
  7419 000058A9 BAFC0C0000          <1> 	mov edx, 0xCFC
  7420 000058AE ED                  <1> 	in eax, dx
  7421 000058AF 2305[FF570000]      <1> 	and eax, [pcidevidmask]
  7422 000058B5 8B1D[FB570000]      <1> 	mov ebx, [pcidevid]
  7423 000058BB 231D[FF570000]      <1> 	and ebx, [pcidevidmask]
  7424 000058C1 39D8                <1> 	cmp eax, ebx
  7425 000058C3 0F858BFFFFFF        <1> 	jne near searchpciret
  7426                              <1> .good:
  7427 000058C9 30C0                <1> 	xor al, al
  7428 000058CB 3805[FA570000]      <1> 	cmp [pcireqtype], al
  7429 000058D1 0F842C000000        <1> 	je near dumppcidevice
  7430 000058D7 B008                <1> 	mov al, 0x08
  7431 000058D9 A2[F9570000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  7432 000058DE E877010000          <1> 	call getpciaddr
  7433 000058E3 BAF80C0000          <1> 	mov edx, 0xCF8
  7434 000058E8 EF                  <1> 	out dx, eax
  7435 000058E9 BAFC0C0000          <1> 	mov edx, 0xCFC
  7436 000058EE ED                  <1> 	in eax, dx
  7437 000058EF C1C008              <1> 	rol eax, 8
  7438 000058F2 3A05[87580000]      <1> 	cmp al, [pcitype]
  7439 000058F8 0F84A0000000        <1> 	je near foundpciaddr
  7440 000058FE E951FFFFFF          <1> 	jmp searchpciret
  7441                              <1> dumppcidevice:
  7442 00005903 30C0                <1> 	xor al, al
  7443 00005905 A2[F9570000]        <1> 	mov [pciregister], al
  7444 0000590A E84B010000          <1> 	call getpciaddr
  7445 0000590F 89C1                <1> 	mov ecx, eax
  7446 00005911 C605[E72E0000]05    <1> 	mov byte [firsthexshown], 5
  7447 00005918 E8DFD5FFFF          <1> 	call showhex
  7448                              <1> dumppcidevicelp:
  7449 0000591D A2[F9570000]        <1> 	mov [pciregister], al
  7450 00005922 E833010000          <1> 	call getpciaddr
  7451 00005927 BAF80C0000          <1> 	mov edx, 0xCF8
  7452 0000592C EF                  <1> 	out dx, eax
  7453 0000592D BAFC0C0000          <1> 	mov edx, 0xCFC
  7454 00005932 ED                  <1> 	in eax, dx
  7455 00005933 89C1                <1> 	mov ecx, eax
  7456 00005935 A0[F9570000]        <1> 	mov al, [pciregister]
  7457 0000593A 0404                <1> 	add al, 4
  7458 0000593C C605[E72E0000]05    <1> 	mov byte [firsthexshown], 5
  7459 00005943 E8B4D5FFFF          <1> 	call showhex
  7460 00005948 3C3C                <1> 	cmp al, 0x3C
  7461 0000594A 72D1                <1> 	jb dumppcidevicelp
  7462                              <1> dumppcidn:
  7463                              <1> %ifdef io.serial
  7464                              <1> 	mov esi, line
  7465                              <1> 	call print
  7466                              <1> %else
  7467 0000594C 803D[73240000]00    <1> 	cmp byte [charpos], 0
  7468 00005953 0F84FBFEFFFF        <1> 	je near searchpciret
  7469 00005959 BE[AA610000]        <1> 	mov esi, line
  7470 0000595E E894C2FFFF          <1> 	call print
  7471                              <1> %endif
  7472 00005963 E9ECFEFFFF          <1> 	jmp searchpciret
  7473                              <1> nextpcibus:
  7474 00005968 30C0                <1> 	xor al, al
  7475 0000596A A2[F7570000]        <1> 	mov [pcidevice], al
  7476 0000596F A0[F6570000]        <1> 	mov al, [pcibus]
  7477 00005974 3C7F                <1> 	cmp al, 1111111b
  7478 00005976 730C                <1> 	jae donesearchpci
  7479 00005978 FEC0                <1> 	inc al
  7480 0000597A A2[F6570000]        <1> 	mov [pcibus], al
  7481 0000597F E9ADFEFFFF          <1> 	jmp searchpci
  7482                              <1> donesearchpci:
  7483 00005984 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7484 00005989 31D2                <1> 	xor edx, edx
  7485 0000598B 8815[87580000]      <1> 	mov [pcitype], dl
  7486 00005991 8915[FB570000]      <1> 	mov [pcidevid], edx
  7487 00005997 891D[FF570000]      <1> 	mov [pcidevidmask], ebx
  7488 0000599D C3                  <1> 	ret
  7489                              <1> foundpciaddr:
  7490 0000599E B010                <1> 	mov al, 0x10
  7491 000059A0 A2[F9570000]        <1> 	mov [pciregister], al
  7492 000059A5 803D[FA570000]02    <1> 	cmp byte [pcireqtype], 2
  7493 000059AC 7443                <1> 	je findpcimemaddr
  7494                              <1> findpciioaddr:
  7495 000059AE E8A7000000          <1> 	call getpciaddr
  7496 000059B3 BAF80C0000          <1> 	mov edx, 0xCF8
  7497 000059B8 EF                  <1> 	out dx, eax
  7498 000059B9 BAFC0C0000          <1> 	mov edx, 0xCFC
  7499 000059BE ED                  <1> 	in eax, dx
  7500 000059BF 89C3                <1> 	mov ebx, eax
  7501 000059C1 81E301000000        <1> 	and ebx, 1
  7502 000059C7 81FB00000000        <1> 	cmp ebx, 0
  7503 000059CD 0F846E000000        <1> 	je near notpciioaddr
  7504 000059D3 2D01000000          <1> 	sub eax, 1
  7505 000059D8 89C2                <1> 	mov edx, eax
  7506 000059DA 31DB                <1> 	xor ebx, ebx
  7507 000059DC 4B                  <1> 	dec ebx
  7508 000059DD 891D[FF570000]      <1> 	mov [pcidevidmask], ebx
  7509 000059E3 43                  <1> 	inc ebx
  7510 000059E4 881D[87580000]      <1> 	mov [pcitype], bl
  7511 000059EA 891D[FB570000]      <1> 	mov [pcidevid], ebx
  7512 000059F0 C3                  <1> 	ret
  7513                              <1> findpcimemaddr:
  7514 000059F1 E864000000          <1> 	call getpciaddr
  7515 000059F6 BAF80C0000          <1> 	mov edx, 0xCF8
  7516 000059FB EF                  <1> 	out dx, eax
  7517 000059FC BAFC0C0000          <1> 	mov edx, 0xCFC
  7518 00005A01 ED                  <1> 	in eax, dx
  7519 00005A02 89C3                <1> 	mov ebx, eax
  7520 00005A04 81E301000000        <1> 	and ebx, 1
  7521 00005A0A 81FB01000000        <1> 	cmp ebx, 1
  7522 00005A10 0F842B000000        <1> 	je near notpciioaddr
  7523 00005A16 C1E804              <1> 	shr eax, 4
  7524 00005A19 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7525 00005A1C 89C2                <1> 	mov edx, eax
  7526 00005A1E 50                  <1> 	push eax
  7527 00005A1F A1[22020000]        <1> 	mov eax, [basecache]
  7528 00005A24 C1E004              <1> 	shl eax, 4
  7529 00005A27 29C2                <1> 	sub edx, eax
  7530 00005A29 58                  <1> 	pop eax
  7531 00005A2A 31DB                <1> 	xor ebx, ebx
  7532 00005A2C 4B                  <1> 	dec ebx
  7533 00005A2D 891D[FF570000]      <1> 	mov [pcidevidmask], ebx
  7534 00005A33 43                  <1> 	inc ebx
  7535 00005A34 881D[87580000]      <1> 	mov [pcitype], bl
  7536 00005A3A 891D[FB570000]      <1> 	mov [pcidevid], ebx
  7537 00005A40 C3                  <1> 	ret
  7538                              <1> notpciioaddr:
  7539 00005A41 A0[F9570000]        <1> 	mov al, [pciregister]
  7540 00005A46 0404                <1> 	add al, 4
  7541 00005A48 3C28                <1> 	cmp al, 0x28
  7542 00005A4A 0F8704FEFFFF        <1> 	ja near searchpciret
  7543 00005A50 A2[F9570000]        <1> 	mov [pciregister], al
  7544 00005A55 E954FFFFFF          <1> 	jmp findpciioaddr
  7545                              <1> getpciaddr:		;puts it in eax and ebx
  7546 00005A5A 31C0                <1> 			xor eax, eax
  7547 00005A5C BB00000080          <1> 			mov ebx, 0x80000000
  7548 00005A61 A0[F6570000]        <1> 			mov al, [pcibus]
  7549 00005A66 C1E010              <1> 			shl eax, 16
  7550 00005A69 01C3                <1> 			add ebx, eax
  7551 00005A6B 31C0                <1> 			xor eax, eax
  7552 00005A6D A0[F7570000]        <1> 			mov al, [pcidevice]
  7553 00005A72 C1E00B              <1> 			shl eax, 11
  7554 00005A75 01C3                <1> 			add ebx, eax
  7555 00005A77 31C0                <1> 			xor eax, eax
  7556 00005A79 A0[F8570000]        <1> 			mov al, [pcifunction]
  7557 00005A7E C1E008              <1> 			shl eax, 8
  7558 00005A81 01C3                <1> 			add ebx, eax
  7559 00005A83 31C0                <1> 			xor eax, eax
  7560 00005A85 A0[F9570000]        <1> 			mov al, [pciregister]
  7561 00005A8A 01C3                <1> 			add ebx, eax
  7562 00005A8C 89D8                <1> 			mov eax, ebx
  7563 00005A8E C3                  <1> 			ret
  7564                                      %include "source/disk.asm"
  7565                              <1> %ifdef disk.real
  7566                              <1> 	%include "source/drivers/disk/realmode.asm"
  7567                              <2> diskr:
  7568                              <2> 			;sector count in cl
  7569                              <2> 			;disk number in ch
  7570                              <2> 			;48 bit address with last 32 bits in ebx
  7571                              <2> 			;buffer in esi
  7572                              <2> 			;puts end of buffer in edi and end lba address in edx
  7573 00005A8F 880D[B65A0000]      <2> 	mov [sdlength], cl
  7574 00005A95 891D[B75A0000]      <2> 	mov [sdaddress], ebx
  7575 00005A9B 8935[325C0000]      <2> 	mov [oldesireal], esi
  7576 00005AA1 66BE[BB5A]          <2> 	mov si, readdiskreal
  7577 00005AA5 668935[CE0C0000]    <2> 	mov [realmodeptr], si
  7578 00005AAC E80BB1FFFF          <2> 	call realmode
  7579 00005AB1 E941000000          <2> 	jmp backfromrealread
  7580 00005AB6 00                  <2> sdlength db 0
  7581 00005AB7 00000000            <2> sdaddress dd 0
  7582                              <2> 
  7583                              <2> [BITS 16]
  7584                              <2> readdiskreal:
  7585 00005ABB C706[E75A]1000      <2> 	mov word [dlen], 0x10
  7586 00005AC1 C706[EB5A]0000      <2> 	mov word [daddress], 0
  7587 00005AC7 C706[ED5A]0001      <2> 	mov word [dsegm], 0x100
  7588 00005ACD 66891E[EF5A]        <2> 	mov [dlbaad], ebx
  7589 00005AD2 880E[E95A]          <2> 	mov [dreadlen], cl
  7590                              <2> ReadHardDisk:
  7591 00005AD6 BE[E75A]            <2> 	mov si, diskaddresspacket
  7592 00005AD9 31C0                <2> 	xor ax, ax
  7593 00005ADB B442                <2> 	mov ah, 0x42
  7594 00005ADD 8A16[E65A]          <2> 	mov dl, [dnumber]
  7595 00005AE1 CD13                <2> 	int 0x13
  7596 00005AE3 72F1                <2> 	jc ReadHardDisk
  7597 00005AE5 C3                  <2> 	ret
  7598                              <2> 
  7599 00005AE6 80                  <2> dnumber db 0x80
  7600                              <2> diskaddresspacket:
  7601 00005AE7 10                  <2> dlen:	db 0x10 ;size of packet
  7602 00005AE8 00                  <2> 		db 0
  7603 00005AE9 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7604 00005AEB 0000                <2> daddress:	dw 0	;address 0
  7605 00005AED 0001                <2> dsegm:		dw 0x100	;segment
  7606                              <2> 		;start with known value for hd
  7607                              <2> dlbaad:
  7608 00005AEF 00000000            <2> 	dd 0	;lba address
  7609 00005AF3 00000000            <2> 	dd 0
  7610                              <2> [BITS 32]
  7611                              <2> backfromrealread:
  7612 00005AF7 8B35[325C0000]      <2> 	mov esi, [oldesireal]
  7613 00005AFD 8B1D[B75A0000]      <2> 	mov ebx, [sdaddress]
  7614 00005B03 31C9                <2> 	xor ecx, ecx
  7615 00005B05 8A0D[B65A0000]      <2> 	mov cl, [sdlength]
  7616 00005B0B 01CB                <2> 	add ebx, ecx
  7617 00005B0D 66B80800            <2> 	mov ax, LINEAR_SEL
  7618 00005B11 8EE0                <2> 	mov fs, ax
  7619 00005B13 BF00100000          <2> 	mov edi, 0x1000
  7620 00005B18 B200                <2> 	mov dl, 0
  7621 00005B1A D0E1                <2> 	shl cl, 1
  7622                              <2> copyfromrmodedisk:
  7623 00005B1C 648A07              <2> 	mov al, [fs:edi]
  7624 00005B1F 8806                <2> 	mov [esi], al
  7625 00005B21 47                  <2> 	inc edi
  7626 00005B22 46                  <2> 	inc esi
  7627 00005B23 FECA                <2> 	dec dl
  7628 00005B25 80FA00              <2> 	cmp dl, 0
  7629 00005B28 75F2                <2> 	jne copyfromrmodedisk
  7630 00005B2A FEC9                <2> 	dec cl
  7631 00005B2C B200                <2> 	mov dl, 0
  7632 00005B2E 80F900              <2> 	cmp cl, 0
  7633 00005B31 75E9                <2> 	jne copyfromrmodedisk
  7634 00005B33 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7635 00005B37 8EE0                <2> 	mov fs, ax
  7636 00005B39 89F7                <2> 	mov edi, esi
  7637 00005B3B 8B35[325C0000]      <2> 	mov esi, [oldesireal]
  7638 00005B41 89DA                <2> 	mov edx, ebx
  7639 00005B43 8B1D[B75A0000]      <2> 	mov ebx, [sdaddress]
  7640 00005B49 C3                  <2> 	ret
  7641                              <2> 	
  7642                              <1> %else
  7643                              <1> 	%ifdef disk.protected
  7644                              <1> 		%include "source/drivers/disk/pata.asm"
  7645                              <1> 	%endif
  7646                              <1> %endif
  7647                              <1> %ifdef disk.none
  7648                              <1> loadfile:	xor edx, edx
  7649                              <1> 			cmp byte [edi], '&'
  7650                              <1> 			je .ret
  7651                              <1> 			mov edx, 404	;no files are found except &
  7652                              <1> 		.ret:
  7653                              <1> 			ret
  7654                              <1> %else
  7655                              <1> ;This loads files using the methods in the loaded driver
  7656                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7657                              <1> 			;returns with err code in edx and file end in edi
  7658 00005B4A 803F00              <1> 	cmp byte [edi], 0
  7659 00005B4D 0F8448000000        <1> 	je near nofileload
  7660 00005B53 89FA                <1> 	mov edx, edi
  7661 00005B55 BB[29640300]        <1> 	mov ebx, diskfileindex
  7662                              <1> nextnamechar:
  7663 00005B5A 8A07                <1> 	mov al, [edi]
  7664 00005B5C 3C26                <1> 	cmp al, '&'
  7665 00005B5E 7440                <1> 	je nullfile
  7666 00005B60 8A23                <1> 	mov ah, [ebx]
  7667 00005B62 47                  <1> 	inc edi
  7668 00005B63 43                  <1> 	inc ebx
  7669 00005B64 88C1                <1> 	mov cl, al
  7670 00005B66 08E1                <1> 	or cl, ah
  7671 00005B68 80F900              <1> 	cmp cl, 0
  7672 00005B6B 746B                <1> 	je equalfilenames
  7673 00005B6D 80F920              <1> 	cmp cl, ' '
  7674 00005B70 7466                <1> 	je equalfilenames
  7675 00005B72 3C2A                <1> 	cmp al, '*'
  7676 00005B74 742B                <1> 	je asteriskcheck
  7677 00005B76 80FC00              <1> 	cmp ah, 0
  7678 00005B79 7410                <1> 	je nextfilename
  7679 00005B7B 3C00                <1> 	cmp al, 0
  7680 00005B7D 7404                <1> 	je getebxzero
  7681 00005B7F 38E0                <1> 	cmp al, ah
  7682 00005B81 74D7                <1> 	je nextnamechar
  7683                              <1> getebxzero:
  7684 00005B83 8A23                <1> 	mov ah, [ebx]
  7685 00005B85 43                  <1> 	inc ebx
  7686 00005B86 80FC00              <1> 	cmp ah, 0
  7687 00005B89 75F8                <1> 	jne getebxzero
  7688                              <1> nextfilename:
  7689 00005B8B 81C308000000        <1> 	add ebx, 8		;next descriptor
  7690 00005B91 89D7                <1> 	mov edi, edx
  7691 00005B93 81FB[0B650300]      <1> 	cmp ebx, enddiskfileindex
  7692 00005B99 72BF                <1> 	jb nextnamechar
  7693                              <1> nofileload:
  7694 00005B9B BA94010000          <1> 	mov edx, 404	;indicate not found error
  7695                              <1> nullfile:
  7696 00005BA0 C3                  <1> 	ret
  7697                              <1> asteriskcheck:
  7698 00005BA1 4B                  <1> 	dec ebx
  7699 00005BA2 8A07                <1> 	mov al, [edi]
  7700 00005BA4 3C2A                <1> 	cmp al, '*'
  7701 00005BA6 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  7702 00005BA8 3C20                <1> 	cmp al, ' '
  7703 00005BAA 7412                <1> 	je equalfilenames2
  7704 00005BAC 3C00                <1> 	cmp al, 0
  7705 00005BAE 740E                <1> 	je equalfilenames2
  7706                              <1> .lp:
  7707 00005BB0 8A23                <1> 	mov ah, [ebx]
  7708 00005BB2 80FC00              <1> 	cmp ah, 0
  7709 00005BB5 74D4                <1> 	je nextfilename
  7710 00005BB7 38E0                <1> 	cmp al, ah
  7711 00005BB9 749F                <1> 	je nextnamechar
  7712 00005BBB 43                  <1> 	inc ebx
  7713 00005BBC EBF2                <1> 	jmp .lp
  7714                              <1> equalfilenames2:
  7715 00005BBE 81EB02000000        <1> 	sub ebx, 2
  7716                              <1> eqfilefind:
  7717 00005BC4 43                  <1> 	inc ebx
  7718 00005BC5 81FB[0B650300]      <1> 	cmp ebx, enddiskfileindex
  7719 00005BCB 0F83CAFFFFFF        <1> 	jae near nofileload
  7720 00005BD1 8A03                <1> 	mov al, [ebx]
  7721 00005BD3 3C00                <1> 	cmp al, 0
  7722 00005BD5 75ED                <1> 	jne eqfilefind
  7723 00005BD7 43                  <1> 	inc ebx
  7724                              <1> equalfilenames:
  7725 00005BD8 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7726 00005BDB 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7727 00005BDD 031D[D1610000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  7728 00005BE3 31C9                <1> 	xor ecx, ecx
  7729 00005BE5 88C1                <1> 	mov cl, al			;get excess number of sectors
  7730 00005BE7 C0E102              <1> 	shl cl, 2
  7731 00005BEA C0E902              <1> 	shr cl, 2			;cut off at 64
  7732 00005BED 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7733 00005BEF B500                <1> 	mov ch, 0			;drive 0
  7734 00005BF1 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7735                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7736 00005BF4 A3[365C0000]        <1> 	mov [filetracks], eax
  7737 00005BF9 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7738 00005BFB 89DA                <1> 	mov edx, ebx
  7739 00005BFD 80F900              <1> 	cmp cl, 0
  7740 00005C00 7405                <1> 	je copytracksforfile
  7741 00005C02 E888FEFFFF          <1> 	call diskr	;take care of excess sectors
  7742                              <1> copytracksforfile:
  7743 00005C07 A1[365C0000]        <1> 	mov eax, [filetracks]
  7744 00005C0C 3D00000000          <1> 	cmp eax, 0
  7745 00005C11 7419                <1> 	je donecopyfile
  7746 00005C13 48                  <1> 	dec eax
  7747 00005C14 A3[365C0000]        <1> 	mov [filetracks], eax
  7748 00005C19 89D3                <1> 	mov ebx, edx	;get end lba
  7749 00005C1B B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7750 00005C1D 8A2D[D0610000]      <1> 	mov ch, [DriveNumber]
  7751 00005C23 89FE                <1> 	mov esi, edi	;reset buffer
  7752 00005C25 E865FEFFFF          <1> 	call diskr
  7753 00005C2A EBDB                <1> 	jmp copytracksforfile
  7754                              <1> donecopyfile:
  7755 00005C2C BA00000000          <1> 	mov edx, 0	;no error
  7756 00005C31 C3                  <1> 	ret
  7757                              <1> 
  7758 00005C32 00000000            <1> oldesireal dd 0
  7759 00005C36 00000000            <1> filetracks dd 0
  7760 00005C3A 00                  <1> lbad1 db 0
  7761 00005C3B 00                  <1> lbad2 db 0
  7762 00005C3C 00                  <1> lbad3 db 0
  7763 00005C3D 00                  <1> lbad4 db 0
  7764 00005C3E 00                  <1> lbad5 db 0
  7765 00005C3F 00                  <1> lbad6 db 0
  7766 00005C40 6400                <1> segments dw 100
  7767                              <1> %endif
  7768                                      %include "source/threads.asm"
  7769                              <1> %ifdef threads.included	
  7770                              <1> nwcmdst:
  7771 00005C42 31C0                <1> 	xor eax, eax
  7772 00005C44 BC[00860300]        <1> 	mov esp, stackend
  7773 00005C49 A2[065D0000]        <1> 	mov [threadson], al
  7774 00005C4E A3[075D0000]        <1> 	mov [currentthread], eax
  7775 00005C53 0504000000          <1> 	add eax, 4
  7776 00005C58 A3[025D0000]        <1> 	mov [lastthread], eax
  7777 00005C5D FB                  <1> 	sti
  7778 00005C5E E9C4CDFFFF          <1> 	jmp nwcmd
  7779                              <1> 
  7780                              <1> nomorethreadspace:
  7781 00005C63 BE[795C0000]        <1> 	mov esi, nmts
  7782 00005C68 E88ABFFFFF          <1> 	call print
  7783 00005C6D C605[065D0000]00    <1> 	mov byte [threadson], 0
  7784 00005C74 E9AECDFFFF          <1> 	jmp nwcmd
  7785 00005C79 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7786 00005C82 6572666C6F770A00    <1>
  7787                              <1> 
  7788                              <1> nomorestackspace:
  7789 00005C8A BE[965C0000]        <1> 	mov esi, nmss
  7790 00005C8F E863BFFFFF          <1> 	call print
  7791 00005C94 EBAC                <1> 	jmp nwcmdst
  7792 00005C96 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7793 00005C9F 72666C6F770A00      <1>
  7794                              <1> 	
  7795                              <1> threadswitch:
  7796 00005CA6 FA                  <1> 	cli
  7797 00005CA7 60                  <1> 	pushad
  7798 00005CA8 BF[C11F0400]        <1> 	mov edi, threadlist
  7799 00005CAD A1[075D0000]        <1> 	mov eax, [currentthread]
  7800 00005CB2 40                  <1> 	inc eax
  7801 00005CB3 A3[075D0000]        <1> 	mov [currentthread], eax
  7802 00005CB8 6648                <1> 	dec ax
  7803 00005CBA C1E002              <1> 	shl eax, 2
  7804 00005CBD 01C7                <1> 	add edi, eax
  7805 00005CBF 8927                <1> 	mov [edi], esp
  7806 00005CC1 81C704000000        <1> 	add edi, 4
  7807 00005CC7 81FF[C12F0400]      <1> 	cmp edi, threadlistend
  7808 00005CCD 0F830D000000        <1> 	jae near nookespthread
  7809 00005CD3 8B07                <1> 	mov eax, [edi]
  7810 00005CD5 3D00000000          <1> 	cmp eax, 0
  7811 00005CDA 0F8519000000        <1> 	jne near okespthread
  7812                              <1> nookespthread:
  7813 00005CE0 BF[C11F0400]        <1> 	mov edi, threadlist
  7814 00005CE5 31C0                <1> 	xor eax, eax
  7815 00005CE7 A3[075D0000]        <1> 	mov [currentthread], eax
  7816 00005CEC 8B07                <1> 	mov eax, [edi]
  7817 00005CEE 3D00000000          <1> 	cmp eax, 0
  7818 00005CF3 0F8449FFFFFF        <1> 	je near nwcmdst
  7819                              <1> okespthread:
  7820 00005CF9 89C4                <1> 	mov esp, eax
  7821 00005CFB B020                <1> 	mov al, 0x20
  7822 00005CFD E620                <1> 	out 0x20, al
  7823 00005CFF 61                  <1> 	popad
  7824 00005D00 FB                  <1> 	sti
  7825 00005D01 CF                  <1> 	iret
  7826                              <1> 
  7827                              <1> %endif
  7828 00005D02 04000000            <1> 	lastthread dd 4
  7829 00005D06 00                  <1> 	threadson db 0
  7830 00005D07 00000000            <1> 	currentthread dd 0
  7831                                  %ifdef gui.included
  7832                                      %include "source/gui/gui.asm"
  7833                                  %endif
  7834                                  %ifdef network.included
  7835                                  	%include "source/network.asm"
  7836                              <1> network.init:
  7837                              <1> %ifdef rtl8139.included
  7838                              <1> 	%include "source/drivers/network/rtl8139.asm"
  7839                              <1> %endif
  7840                              <1> %ifdef rtl8169.included
  7841                              <1> 	%include "source/drivers/network/rtl8169.asm"
  7842                              <1> %endif
  7843                              <1> %ifdef ne2000.included
  7844                              <1> 	%include "source/drivers/network/ne2000.asm"
  7845                              <2> ne2000:
  7846 00005D0B E805000000          <2> 	call .init
  7847 00005D10 E93D030000          <2> 	jmp .end
  7848                              <2> 
  7849                              <2> ;	PAGE0			PAGE 1			PAGE 2
  7850                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  7851                              <2> ;0	CR		CR		CR		CR		CR		CR
  7852                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  7853                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  7854                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  7855                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  7856                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  7857                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  7858                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  7859                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  7860                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  7861                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  7862                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  7863                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  7864                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  7865                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  7866                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  7867                              <2> .CR equ 0
  7868                              <2> 	.CR.STP	equ 1		;Stop
  7869                              <2> 	.CR.STA equ 2		;Start
  7870                              <2> 	.CR.TXP equ 4		;Transmit
  7871                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  7872                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  7873                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  7874                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  7875                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  7876                              <2> .PSTART equ 1
  7877                              <2> .PSTOP equ 2
  7878                              <2> .BNRY equ 3
  7879                              <2> .ISR equ 7
  7880                              <2> 	.ISR.PRX equ 1		;Packet Received
  7881                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  7882                              <2> 	.ISR.RXE equ 4		;Receive Error
  7883                              <2> 	.ISR.TXE equ 8		;Transmission Error
  7884                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  7885                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  7886                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  7887                              <2> 	.ISR.RST equ 0x80	;Reset status
  7888                              <2> .RSAR0 equ 8
  7889                              <2> .RSAR1 equ 9
  7890                              <2> .RBCR0 equ 0xA
  7891                              <2> .RBCR1 equ 0xB
  7892                              <2> .RCR equ 0xC
  7893                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  7894                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  7895                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  7896                              <2> 	.RCR.AM equ 8		;Accept Multicast
  7897                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  7898                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  7899                              <2> .DCR equ 0xE
  7900                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  7901                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  7902                              <2> 	.DCR.LAS equ 4		;Long Address Select
  7903                              <2> 	.DCR.LS equ 8		;Loopback Select
  7904                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  7905                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  7906                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  7907                              <2> .ASIC equ 0x10
  7908                              <2> .RESET equ 0x1F
  7909                              <2> 
  7910                              <2> .init:
  7911 00005D15 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
  7912 00005D1A 31C0                <2> 	xor eax, eax
  7913 00005D1C A2[F8570000]        <2> 	mov [pcifunction], al
  7914 00005D21 A2[F6570000]        <2> 	mov [pcibus], al
  7915 00005D26 A2[F7570000]        <2> 	mov [pcidevice], al
  7916 00005D2B B002                <2> 	mov al, 2 ;type code
  7917 00005D2D A2[87580000]        <2> 	mov [pcitype], al
  7918 00005D32 B8EC102980          <2> 	mov eax, 0x802910EC
  7919 00005D37 A3[FB570000]        <2> 	mov [pcidevid], eax
  7920 00005D3C E8CEFAFFFF          <2> 	call getpciport
  7921 00005D41 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  7922 00005D47 7501                <2> 	jne .good0
  7923 00005D49 C3                  <2> 	ret
  7924                              <2> .good0:
  7925 00005D4A 8915[14600000]      <2> 	mov [.basenicaddr], edx
  7926 00005D50 89D1                <2> 	mov ecx, edx
  7927                              <2> .test:
  7928 00005D52 E854000000          <2> 	call .reset
  7929 00005D57 E87B000000          <2> 	call .stop
  7930 00005D5C 89CA                <2> 	mov edx, ecx
  7931 00005D5E B9FF000000          <2> 	mov ecx, 0xFF
  7932 00005D63 E2FE                <2> 	loop $ ;wait for ~100 us
  7933 00005D65 89D1                <2> 	mov ecx, edx
  7934 00005D67 EC                  <2> 	in al, dx
  7935 00005D68 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
  7936 00005D6A 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
  7937 00005D6C 7410                <2> 	je .good1
  7938 00005D6E 89CA                <2> 	mov edx, ecx
  7939 00005D70 81C207000000        <2> 	add edx, .ISR
  7940 00005D76 EC                  <2> 	in al, dx
  7941 00005D77 2480                <2> 	and al, .ISR.RST
  7942 00005D79 3C80                <2> 	cmp al, .ISR.RST
  7943 00005D7B 7401                <2> 	je .good1
  7944 00005D7D C3                  <2> 	ret
  7945                              <2> .good1:
  7946 00005D7E E879D1FFFF          <2> call showhex	;for debugging, please remove
  7947 00005D83 E85B000000          <2> 	call .setup
  7948 00005D88 E86B030000          <2> call showmac
  7949 00005D8D BE[19600000]        <2> mov esi, .name
  7950 00005D92 E860BEFFFF          <2> call print
  7951 00005D97 BE[21600000]        <2> mov esi, .initmsg
  7952 00005D9C E856BEFFFF          <2> call print
  7953 00005DA1 C605[18600000]01    <2> 	mov byte [.nicconfig], 1
  7954 00005DA8 31DB                <2> 	xor ebx, ebx
  7955 00005DAA C3                  <2> 	ret
  7956                              <2> .reset:
  7957 00005DAB 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  7958 00005DB1 81C21F000000        <2> 	add edx, .RESET
  7959 00005DB7 EC                  <2> 	in al, dx
  7960 00005DB8 EE                  <2> 	out dx, al ;write its contents to itself
  7961 00005DB9 C3                  <2> 	ret
  7962                              <2> .page:
  7963 00005DBA 66C1E00E            <2> 	shl ax, 14
  7964 00005DBE 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  7965 00005DC4 EC                  <2> 	in al, dx
  7966 00005DC5 243F                <2> 	and al, 00111111b
  7967 00005DC7 08E0                <2> 	or al, ah
  7968 00005DC9 EE                  <2> 	out dx, al
  7969 00005DCA C3                  <2> 	ret
  7970                              <2> .start:
  7971 00005DCB 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  7972 00005DD1 B020                <2> 	mov al, .CR.RD2
  7973 00005DD3 B002                <2> 	mov al, .CR.STA
  7974 00005DD5 EE                  <2> 	out dx, al
  7975 00005DD6 C3                  <2> 	ret
  7976                              <2> .stop:
  7977 00005DD7 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  7978 00005DDD B020                <2> 	mov al, .CR.RD2
  7979 00005DDF 0C01                <2> 	or al, .CR.STP
  7980 00005DE1 EE                  <2> 	out dx, al
  7981 00005DE2 C3                  <2> 	ret
  7982                              <2> .setup:
  7983 00005DE3 E8EFFFFFFF          <2> 	call .stop
  7984 00005DE8 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  7985 00005DEE 81C20E000000        <2> 	add edx, .DCR
  7986 00005DF4 B040                <2> 	mov al, .DCR.FT1
  7987 00005DF6 0C01                <2> 	or al, .DCR.WTS
  7988 00005DF8 0C08                <2> 	or al, .DCR.LS
  7989 00005DFA EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
  7990 00005DFB E8B9000000          <2> 	call .getmac
  7991 00005E00 E8D2FFFFFF          <2> 	call .stop
  7992 00005E05 30C0                <2> 	xor al, al
  7993 00005E07 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  7994 00005E0D 81C20A000000        <2> 	add edx, .RBCR0
  7995 00005E13 EE                  <2> 	out dx, al
  7996 00005E14 6642                <2> 	inc dx
  7997 00005E16 EE                  <2> 	out dx, al ;Clear byte count
  7998 00005E17 B800400000          <2> 	mov eax, 16*1024
  7999 00005E1C A3[34600000]        <2> 	mov [.ringstart], eax
  8000 00005E21 C1E808              <2> 	shr eax, 8
  8001 00005E24 66A3[30600000]      <2> 	mov [.pagestart], ax
  8002 00005E2A 0534000000          <2> 	add eax, 64-2*6
  8003 00005E2F A3[32600000]        <2> 	mov [.pageend], eax
  8004 00005E34 C1E008              <2> 	shl eax, 8
  8005 00005E37 66A3[38600000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
  8006 00005E3D 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8007 00005E43 81C201000000        <2> 	add edx, .PSTART
  8008 00005E49 A0[30600000]        <2> 	mov al, [.pagestart]
  8009 00005E4E EE                  <2> 	out dx, al
  8010 00005E4F A0[32600000]        <2> 	mov al, [.pageend]
  8011 00005E54 6642                <2> 	inc dx
  8012 00005E56 EE                  <2> 	out dx, al
  8013 00005E57 A0[30600000]        <2> 	mov al, [.pagestart]
  8014 00005E5C 6642                <2> 	inc dx
  8015 00005E5E EE                  <2> 	out dx, al
  8016 00005E5F E873FFFFFF          <2> 	call .stop
  8017                              <2> ;INSERT INTERRUPT ENABLE HERE
  8018 00005E64 B001                <2> 	mov al, 1
  8019 00005E66 E84FFFFFFF          <2> 	call .page
  8020 00005E6B 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8021 00005E71 BF[42600000]        <2> 	mov edi, .rom
  8022                              <2> .copymactocard:
  8023 00005E76 42                  <2> 	inc edx
  8024 00005E77 6E                  <2> 	outsb
  8025 00005E78 81C702000000        <2> 	add edi, 2
  8026 00005E7E 81FA06000000        <2> 	cmp edx, 6
  8027 00005E84 76F0                <2> 	jbe .copymactocard
  8028 00005E86 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8029 00005E8C 81C207000000        <2> 	add edx, 7
  8030 00005E92 A0[30600000]        <2> 	mov al, [.pagestart]
  8031 00005E97 FEC0                <2> 	inc al
  8032 00005E99 EE                  <2> 	out dx, al ;set page in CURR register
  8033                              <2> ;INSERT MULTICAST INIT HERE
  8034 00005E9A E838FFFFFF          <2> 	call .stop
  8035 00005E9F 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8036 00005EA5 81C20C000000        <2> 	add edx, .RCR
  8037 00005EAB B004                <2> 	mov al, .RCR.AB
  8038 00005EAD EE                  <2> 	out dx, al ;accept broadcast
  8039 00005EAE 6642                <2> 	inc dx
  8040 00005EB0 30C0                <2> 	xor al, al
  8041 00005EB2 EE                  <2> 	out dx, al ;stop loopback
  8042 00005EB3 E813FFFFFF          <2> 	call .start
  8043 00005EB8 C3                  <2> 	ret
  8044                              <2> .getmac:
  8045 00005EB9 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8046 00005EBF B020                <2> 	mov al, 0x20
  8047 00005EC1 0C02                <2> 	or al, 2
  8048 00005EC3 EE                  <2> 	out dx, al	;set STA and RD2 bits
  8049 00005EC4 6681C20A00          <2> 	add dx, .RBCR0
  8050 00005EC9 B010                <2> 	mov al, 16
  8051 00005ECB EE                  <2> 	out dx, al
  8052 00005ECC 6642                <2> 	inc dx
  8053 00005ECE 30C0                <2> 	xor al, al
  8054 00005ED0 EE                  <2> 	out dx, al
  8055 00005ED1 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8056 00005ED7 6681C20800          <2> 	add dx, .RSAR0
  8057 00005EDC EE                  <2> 	out dx, al
  8058 00005EDD 6642                <2> 	inc dx
  8059 00005EDF EE                  <2> 	out dx, al
  8060 00005EE0 668B15[14600000]    <2> 	mov dx, [.basenicaddr]
  8061 00005EE7 B008                <2> 	mov al, 8
  8062 00005EE9 0C02                <2> 	or al, 2
  8063 00005EEB EE                  <2> 	out dx, al
  8064 00005EEC 668B15[14600000]    <2> 	mov dx, [.basenicaddr]
  8065 00005EF3 6681C21000          <2> 	add dx, .ASIC
  8066 00005EF8 B908000000          <2> 	mov ecx, 8
  8067 00005EFD BF[42600000]        <2> 	mov edi, .rom
  8068 00005F02 F3666D              <2> 	rep insw
  8069                              <2> .copymac:
  8070 00005F05 BF[42600000]        <2> 	mov edi, .rom
  8071 00005F0A BE[3C600000]        <2> 	mov esi, .mac
  8072 00005F0F B906000000          <2> 	mov ecx, 6
  8073                              <2> .lpmac:
  8074 00005F14 8A07                <2> 	mov al, [edi]
  8075 00005F16 8806                <2> 	mov [esi], al
  8076 00005F18 81C702000000        <2> 	add edi, 2
  8077 00005F1E 46                  <2> 	inc esi
  8078 00005F1F E2F3                <2> 	loop .lpmac
  8079 00005F21 B9[3C600000]        <2> 	mov ecx, .mac
  8080 00005F26 C3                  <2> 	ret
  8081                              <2> .sendpacket:
  8082 00005F27 803D[18600000]00    <2> 	cmp byte [.nicconfig], 0
  8083 00005F2E 7512                <2> 	jne .sendit
  8084 00005F30 56                  <2> 	push esi
  8085 00005F31 57                  <2> 	push edi
  8086 00005F32 E8DEFDFFFF          <2> 	call .init
  8087 00005F37 5F                  <2> 	pop edi
  8088 00005F38 5E                  <2> 	pop esi
  8089 00005F39 81FB00000000        <2> 	cmp ebx, 0
  8090 00005F3F 7401                <2> 	je .sendit
  8091 00005F41 C3                  <2> 	ret
  8092                              <2> .sendit: ;packet start in edi, end in esi
  8093 00005F42 87F7                <2> 	xchg esi, edi ;this helps with the outsw
  8094                              <2> 	;now the packet start is in esi, end in edi
  8095 00005F44 8B0D[3C600000]      <2> 	mov ecx, [.mac]
  8096 00005F4A 894E06              <2> 	mov [esi + 6], ecx
  8097 00005F4D 668B0D[40600000]    <2> 	mov cx, [.mac + 4]
  8098 00005F54 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
  8099 00005F58 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8100 00005F5E B020                <2> 	mov al, .CR.RD2
  8101 00005F60 0C02                <2> 	or al, .CR.STA
  8102 00005F62 EE                  <2> 	out dx, al ;set RD2 and STA
  8103 00005F63 81C207000000        <2> 	add edx, .ISR ; ISR
  8104 00005F69 B040                <2> 	mov al, .ISR.RDC
  8105 00005F6B EE                  <2> 	out dx, al ;set RDC flag
  8106 00005F6C 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8107 00005F72 6681C20A00          <2> 	add dx, .RBCR0
  8108 00005F77 89F8                <2> 	mov eax, edi
  8109 00005F79 29F0                <2> 	sub eax, esi
  8110 00005F7B BB01000000          <2> 	mov ebx, 1
  8111 00005F80 21C3                <2> 	and ebx, eax
  8112 00005F82 81FB01000000        <2> 	cmp ebx, 1
  8113 00005F88 7501                <2> 	jne .nofixword
  8114 00005F8A 40                  <2> 	inc eax
  8115                              <2> .nofixword:
  8116 00005F8B 89C1                <2> 	mov ecx, eax ;save length in ecx
  8117 00005F8D EE                  <2> 	out dx, al
  8118 00005F8E 86C4                <2> 	xchg al, ah
  8119 00005F90 6642                <2> 	inc dx
  8120 00005F92 EE                  <2> 	out dx, al ;send size
  8121 00005F93 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8122 00005F99 6681C20800          <2> 	add dx, .RSAR0
  8123 00005F9E 66A1[30600000]      <2> 	mov ax, [.pagestart]
  8124 00005FA4 C1E008              <2> 	shl eax, 8
  8125 00005FA7 EE                  <2> 	out dx, al
  8126 00005FA8 86C4                <2> 	xchg al, ah
  8127 00005FAA 6642                <2> 	inc dx
  8128 00005FAC EE                  <2> 	out dx, al ;send address in NIC memory
  8129 00005FAD 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8130 00005FB3 B010                <2> 	mov al, .CR.RD1
  8131 00005FB5 0C02                <2> 	or al, .CR.STA
  8132 00005FB7 EE                  <2> 	out dx, al ;set RD and STA
  8133 00005FB8 89CB                <2> 	mov ebx, ecx ;save length in ebx
  8134 00005FBA D1E9                <2> 	shr ecx, 1
  8135 00005FBC 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8136 00005FC2 6681C21000          <2> 	add dx, 0x10
  8137 00005FC7 F3666F              <2> 	rep outsw ;Send the packet data
  8138 00005FCA 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8139 00005FD0 6681C20700          <2> 	add dx, .ISR
  8140                              <2> .chkcopylp:
  8141 00005FD5 B440                <2> 	mov ah, .ISR.RDC
  8142 00005FD7 EC                  <2> 	in al, dx
  8143 00005FD8 20C4                <2> 	and ah, al
  8144 00005FDA 80FC40              <2> 	cmp ah, 0x40
  8145 00005FDD 75F6                <2> 	jne .chkcopylp	
  8146 00005FDF 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8147 00005FE5 6681C20400          <2> 	add dx, 4
  8148 00005FEA A0[30600000]        <2> 	mov al, [.pagestart]
  8149 00005FEF EE                  <2> 	out dx, al ;send start address in pages
  8150 00005FF0 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8151 00005FF6 81C205000000        <2> 	add edx, 0x5
  8152 00005FFC 89D8                <2> 	mov eax, ebx
  8153 00005FFE EE                  <2> 	out dx, al
  8154 00005FFF 86C4                <2> 	xchg al, ah
  8155 00006001 6642                <2> 	inc dx
  8156 00006003 EE                  <2> 	out dx, al ;send length
  8157 00006004 8B15[14600000]      <2> 	mov edx, [.basenicaddr]
  8158 0000600A B020                <2> 	mov al, 0x20
  8159 0000600C 0C04                <2> 	or al, 4
  8160 0000600E 0C02                <2> 	or al, 2
  8161 00006010 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
  8162 00006011 31DB                <2> 	xor ebx, ebx
  8163 00006013 C3                  <2> 	ret
  8164 00006014 00000000            <2> .basenicaddr dd 0
  8165 00006018 00                  <2> .nicconfig db 0
  8166 00006019 4E45323030302000    <2> .name db "NE2000 ",0
  8167 00006021 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
  8168 0000602A 65642E0A00          <2>
  8169 0000602F 90                  <2> align 2, nop
  8170 00006030 0000                <2> .pagestart dw 0
  8171 00006032 0000                <2> .pageend dw 0
  8172 00006034 00000000            <2> .ringstart dd 0
  8173 00006038 00000000            <2> .ringend dd 0
  8174 0000603C 000000000000        <2> .mac db 0,0,0,0,0,0
  8175 00006042 00<rept>            <2> .rom times 16 db 0
  8176                              <2> 
  8177                              <2> .end:
  8178                              <1> %endif
  8179                              <1> %ifdef i8254x.included
  8180                              <1> 	%include "source/drivers/network/i8254x.asm"
  8181                              <1> %endif
  8182 00006052 C3                  <1> 	ret
  8183                              <1> 
  8184                              <1> sendpacket: ;packet start in edi, end in esi
  8185                              <1> 	%ifdef rtl8139.included
  8186                              <1> 		push edi
  8187                              <1> 		push esi
  8188                              <1> 		call rtl8139.sendpacket
  8189                              <1> 		pop esi
  8190                              <1> 		pop edi
  8191                              <1> 	%endif
  8192                              <1> 	%ifdef rtl8169.included
  8193                              <1> 		push edi
  8194                              <1> 		push esi
  8195                              <1> 		call rtl8169.sendpacket
  8196                              <1> 		pop esi
  8197                              <1> 		pop edi
  8198                              <1> 	%endif
  8199                              <1> 	%ifdef ne2000.included
  8200 00006053 57                  <1> 		push edi
  8201 00006054 56                  <1> 		push esi
  8202 00006055 E8CDFEFFFF          <1> 		call ne2000.sendpacket
  8203 0000605A 5E                  <1> 		pop esi
  8204 0000605B 5F                  <1> 		pop edi
  8205                              <1> 	%endif
  8206                              <1> 	%ifdef i8254x.included
  8207                              <1> 		call i8254x.sendpacket
  8208                              <1> 	%endif
  8209 0000605C C3                  <1> 	ret
  8210                              <1> 
  8211                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
  8212 0000605D 31C0                <1> 	xor eax, eax
  8213 0000605F 31DB                <1> 	xor ebx, ebx
  8214 00006061 31C9                <1> 	xor ecx, ecx
  8215                              <1> .lp:
  8216 00006063 8A07                <1> 	mov al, [edi]
  8217 00006065 8A6701              <1> 	mov ah, [edi + 1]
  8218 00006068 01C3                <1> 	add ebx, eax
  8219 0000606A 81C702000000        <1> 	add edi, 2
  8220 00006070 39F7                <1> 	cmp edi, esi
  8221 00006072 72EF                <1> 	jb .lp
  8222 00006074 66B9FFFF            <1> 	mov cx, 0xFFFF
  8223 00006078 6689D8              <1> 	mov ax, bx
  8224 0000607B C1EB10              <1> 	shr ebx, 16
  8225 0000607E 6601D8              <1> 	add ax, bx
  8226 00006081 6629C1              <1> 	sub cx, ax
  8227 00006084 C3                  <1> 	ret
  8228                              <1> 	
  8229                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
  8230 00006085 31DB                <1> 	xor ebx, ebx
  8231 00006087 31C9                <1> 	xor ecx, ecx
  8232 00006089 31D2                <1> 	xor edx, edx
  8233                              <1> .mlp:
  8234 0000608B 89F7                <1> 	mov edi, esi
  8235 0000608D 4F                  <1> 	dec edi
  8236                              <1> .lp:
  8237 0000608E 47                  <1> 	inc edi
  8238 0000608F 8A07                <1> 	mov al, [edi]
  8239 00006091 3C20                <1> 	cmp al, " "
  8240 00006093 7408                <1> 	je .dnlp
  8241 00006095 3C00                <1> 	cmp al, 0
  8242 00006097 7404                <1> 	je .dnlp
  8243 00006099 3C2E                <1> 	cmp al, "."
  8244 0000609B 75F1                <1> 	jne .lp
  8245                              <1> .dnlp:
  8246 0000609D 30C0                <1> 	xor al, al
  8247 0000609F 8807                <1> 	mov [edi], al
  8248 000060A1 53                  <1> 	push ebx
  8249 000060A2 56                  <1> 	push esi
  8250 000060A3 57                  <1> 	push edi
  8251 000060A4 31FF                <1> 	xor edi, edi
  8252 000060A6 E8E7CFFFFF          <1> 	call cnvrttxt
  8253 000060AB 5E                  <1> 	pop esi
  8254 000060AC 5F                  <1> 	pop edi ;i intentionally switch them
  8255 000060AD 5B                  <1> 	pop ebx
  8256 000060AE 46                  <1> 	inc esi
  8257 000060AF BF[C7600000]        <1> 	mov edi, ipstr
  8258 000060B4 880C1F              <1> 	mov [edi + ebx], cl
  8259 000060B7 43                  <1> 	inc ebx
  8260 000060B8 81FB04000000        <1> 	cmp ebx, 4
  8261 000060BE 72CB                <1> 	jb .mlp
  8262 000060C0 8B0D[C7600000]      <1> 	mov ecx, [ipstr]
  8263 000060C6 C3                  <1> 	ret
  8264 000060C7 00000000            <1> ipstr dd 0
  8265                              <1> showip: 	;put the ip address in ecx
  8266 000060CB 89C8                <1> 	mov eax, ecx
  8267 000060CD 30DB                <1> 	xor bl, bl
  8268                              <1> .lp:
  8269 000060CF 31C9                <1> 	xor ecx, ecx
  8270 000060D1 88C1                <1> 	mov cl, al
  8271 000060D3 E8DFCEFFFF          <1> 	call showdec
  8272 000060D8 C1E808              <1> 	shr eax, 8
  8273 000060DB FEC3                <1> 	inc bl
  8274 000060DD 80FB04              <1> 	cmp bl, 4
  8275 000060E0 7312                <1> 	jae .done
  8276 000060E2 50                  <1> 	push eax
  8277 000060E3 6653                <1> 	push bx
  8278 000060E5 BE[F5600000]        <1> 	mov esi, .dot
  8279 000060EA E808BBFFFF          <1> 	call print
  8280 000060EF 665B                <1> 	pop bx
  8281 000060F1 58                  <1> 	pop eax
  8282 000060F2 EBDB                <1> 	jmp .lp
  8283                              <1> .done:
  8284 000060F4 C3                  <1> 	ret
  8285 000060F5 082E00              <1> .dot db 8,".",0
  8286                              <1> showmac:	;mac begins in [ecx]
  8287 000060F8 BE[48610000]        <1> 	mov esi, macprint
  8288 000060FD 89CF                <1> 	mov edi, ecx
  8289 000060FF 81C106000000        <1> 	add ecx, 6
  8290                              <1> showmacloop:
  8291 00006105 8A07                <1> 	mov al, [edi]
  8292 00006107 8A27                <1> 	mov ah, [edi]
  8293 00006109 C0E804              <1> 	shr al, 4
  8294 0000610C C0E404              <1> 	shl ah, 4
  8295 0000610F C0EC04              <1> 	shr ah, 4
  8296 00006112 0430                <1> 	add al, 48
  8297 00006114 3C39                <1> 	cmp al, "9"
  8298 00006116 7606                <1> 	jbe .goodal
  8299 00006118 2C30                <1> 	sub al, 48
  8300 0000611A 2C0A                <1> 	sub al, 0xA
  8301 0000611C 0441                <1> 	add al, "A"
  8302                              <1> .goodal:
  8303 0000611E 80C430              <1> 	add ah, 48
  8304 00006121 80FC39              <1> 	cmp ah, "9"
  8305 00006124 7609                <1> 	jbe .goodah
  8306 00006126 80EC30              <1> 	sub ah, 48
  8307 00006129 80EC0A              <1> 	sub ah, 0xA
  8308 0000612C 80C441              <1> 	add ah, "A"
  8309                              <1> .goodah:
  8310 0000612F 668906              <1> 	mov [esi], ax
  8311 00006132 81C603000000        <1> 	add esi, 3
  8312 00006138 47                  <1> 	inc edi
  8313 00006139 39CF                <1> 	cmp edi, ecx
  8314 0000613B 72C8                <1> 	jb showmacloop
  8315 0000613D BE[48610000]        <1> 	mov esi, macprint
  8316 00006142 E8B0BAFFFF          <1> 	call print
  8317 00006147 C3                  <1> 	ret
  8318                              <1> 	
  8319 00006148 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
  8320 00006151 30303A30303A303020- <1>
  8321 0000615A 00                  <1>
  8322 0000615B 00000000            <1> ethernetend dw 0,0
  8323 0000615F C0A80002            <1> sysip db 192,168,0,2
  8324 00006163 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
  8325                                  %endif
  8326                                      %include "source/data.asm"
  8327 00006169 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8328 00006171 73687573683A2000    <1> 	notfound1 db "shush: ",0
  8329 00006179 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
  8330 00006182 6E640A00            <1>
  8331 00006186 757365726E616D653A- <1> 	userask db "username:",0
  8332 0000618F 00                  <1>
  8333 00006190 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8334 00006199 00                  <1>
  8335 0000619A 40                  <1> 	computer db "@"
  8336                              <1> %ifdef io.serial
  8337                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  8338                              <1> %else
  8339 0000619B 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  8340 000061A4 00                  <1>
  8341                              <1> %endif
  8342 000061A5 5D242000            <1> 	endprompt db "]$ ",0
  8343 000061A9 0D                  <1> 	crlf 	db  13
  8344 000061AA 0A00                <1> 	line	db	10,0
  8345                              <1> 	userlst:
  8346 000061AC 726F6F7400          <1> 			db "root",0
  8347 000061B1 617765736F6D65706F- <1> 			db "awesomepower",0
  8348 000061BA 77657200            <1>
  8349 000061BE 7573657200          <1> 			db "user",0
  8350 000061C3 70617373776F726400  <1> 			db "password",0
  8351 000061CC 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
  8352 000061CE 00                  <1> 			db 0
  8353                              <1> 	userlstend:
  8354                              <1> 	
  8355 000061CF 00                  <1> 	guion db 0
  8356 000061D0 00                  <1> 	DriveNumber db 0
  8357 000061D1 00000000            <1> 	lbaad dd 0
  8358 000061D5 0000000000000000    <1> 	initialtsc dd 0,0
  8359 000061DD 0000000000000000    <1> 	lasttsc dd 0,0
  8360 000061E5 00<rept>            <1> 	memlistbuf times 576 db 0
  8361 00006425 00000000            <1> 	memlistend: dd 0
  8362                              <1> %ifdef io.serial
  8363                              <1> %else
  8364 00006425 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
  8365                              <1> fontend:
  8366                              <1> %endif
  8367                              <1> osend:	;this is the end of the operating system's space on disk
  8368                                  %ifdef disk.none
  8369                                  	diskfileindex:
  8370                                  	enddiskfileindex:
  8371                                      %include "source/bss.asm"
  8372                                  %else
  8373                                      %include "build/fileindex.asm"
  8374                              <1> diskfileindex:
  8375 00036429 626F6F742E736800    <1> db "boot.sh",0
  8376 00036431 B3010000            <1> dd (f0-$$)/512
  8377 00036435 01000000            <1> dd (f1-f0)/512
  8378 00036439 646F73746573742E63- <1> db "dostest.com",0
  8379 00036442 6F6D00              <1>
  8380 00036445 B4010000            <1> dd (f1-$$)/512
  8381 00036449 01000000            <1> dd (f2-f1)/512
  8382 0003644D 6578656300          <1> db "exec",0
  8383 00036452 B5010000            <1> dd (f2-$$)/512
  8384 00036456 01000000            <1> dd (f3-f2)/512
  8385 0003645A 66696E616C636F756E- <1> db "finalcount.sn",0
  8386 00036463 742E736E00          <1>
  8387 00036468 B6010000            <1> dd (f3-$$)/512
  8388 0003646C 01000000            <1> dd (f4-f3)/512
  8389 00036470 666F726B00          <1> db "fork",0
  8390 00036475 B7010000            <1> dd (f4-$$)/512
  8391 00036479 01000000            <1> dd (f5-f4)/512
  8392 0003647D 6775697465737400    <1> db "guitest",0
  8393 00036485 B8010000            <1> dd (f5-$$)/512
  8394 00036489 03000000            <1> dd (f6-f5)/512
  8395 0003648D 696E7400            <1> db "int",0
  8396 00036491 BB010000            <1> dd (f6-$$)/512
  8397 00036495 01000000            <1> dd (f7-f6)/512
  8398 00036499 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
  8399 000364A2 2E736E00            <1>
  8400 000364A6 BC010000            <1> dd (f7-$$)/512
  8401 000364AA 01000000            <1> dd (f8-f7)/512
  8402 000364AE 6D6172696F2E736E00  <1> db "mario.sn",0
  8403 000364B7 BD010000            <1> dd (f8-$$)/512
  8404 000364BB 01000000            <1> dd (f9-f8)/512
  8405 000364BF 736F6E676F74696D65- <1> db "songotime.sn",0
  8406 000364C8 2E736E00            <1>
  8407 000364CC BE010000            <1> dd (f9-$$)/512
  8408 000364D0 01000000            <1> dd (f10-f9)/512
  8409 000364D4 73736500            <1> db "sse",0
  8410 000364D8 BF010000            <1> dd (f10-$$)/512
  8411 000364DC 02000000            <1> dd (f11-f10)/512
  8412 000364E0 74656C7900          <1> db "tely",0
  8413 000364E5 C1010000            <1> dd (f11-$$)/512
  8414 000364E9 01000000            <1> dd (f12-f11)/512
  8415 000364ED 756E667300          <1> db "unfs",0
  8416 000364F2 C2010000            <1> dd (f12-$$)/512
  8417 000364F6 02000000            <1> dd (f13-f12)/512
  8418 000364FA 5F696D672E62696E00  <1> db "_img.bin",0
  8419 00036503 C4010000            <1> dd (f13-$$)/512
  8420 00036507 0C000000            <1> dd (f14-f13)/512
  8421                              <1> enddiskfileindex:
  8422                              <1> 
  8423                                      %include "source/bss.asm"
  8424 0003650B 00<rept>            <1> align 512, db 0
  8425                              <1> bssstart equ $
  8426                              <1> bsscopy equ $
  8427                              <1> initialstack equ bsscopy
  8428                              <1> stackend equ initialstack + 8192
  8429                              <1> sigtable equ stackend + 4
  8430                              <1> fileindex equ sigtable + 4
  8431                              <1> fileindexend equ fileindex + 1024
  8432                              <1> previousstack equ fileindexend
  8433                              <1> lastfolderloc equ previousstack + 4
  8434                              <1> currentfolderloc equ lastfolderloc + 4
  8435                              <1> currentfolder equ currentfolderloc + 4
  8436                              <1> currentfolderend equ currentfolder + 512
  8437                              <1> uid equ currentfolderend
  8438                              <1> ranboot equ uid + 4
  8439                              <1> IFON equ ranboot + 1
  8440                              <1> IFTRUE equ IFON + 1
  8441                              <1> BATCHPOS equ IFTRUE + 100
  8442                              <1> BATCHISON equ BATCHPOS + 4
  8443                              <1> LOOPON equ BATCHISON + 1
  8444                              <1> LOOPPOS	equ LOOPON + 1
  8445                              <1> variables equ LOOPPOS + 4
  8446                              <1> varend equ variables + 4096
  8447                              <1> buftxt2 equ varend
  8448                              <1> buftxt equ buftxt2 + 1024
  8449                              <1> buftxtend equ buftxt + 1024
  8450                              <1> buf2 equ buftxtend
  8451                              <1> numbuf equ buf2 + 20
  8452                              <1> %ifdef io.serial
  8453                              <1> 	lastcommandpos equ numbuf + 1
  8454                              <1> %else
  8455                              <1> 	%ifdef gui.included
  8456                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8457                              <1> 		graphicstableend equ graphicstable + 200h
  8458                              <1> 		%ifdef gui.background
  8459                              <1> 			backgroundbuffer equ graphicstableend
  8460                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
  8461                              <1> 			mousecolorbuf equ backgroundbufferend
  8462                              <1> 		%else
  8463                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8464                              <1> 		%endif
  8465                              <1> 		mcolorend equ mousecolorbuf + 256
  8466                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  8467                              <1> 		videobufend	equ videobuf + 210*65*4;2
  8468                              <1> 		videobuf2 equ videobufend
  8469                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
  8470                              <1> 	%else
  8471                              <1> 		videobuf equ numbuf + 1
  8472                              <1> 		videobufend equ videobuf + 80*30*4
  8473                              <1> 		videobuf2 equ videobufend
  8474                              <1> 		videobuf2end equ videobuf2 + 80*30*4
  8475                              <1> 	%endif
  8476                              <1> 	lastcommandpos: equ videobuf2end
  8477                              <1> %endif
  8478                              <1> 	commandbufpos: equ lastcommandpos + 4
  8479                              <1> 	commandlistentries: equ commandbufpos + 4
  8480                              <1> 	commandsentered: equ commandlistentries + 4
  8481                              <1> 	commandbuf: equ commandsentered + 4
  8482                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8483                              <1> %ifdef network.included
  8484                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  8485                              <1> 	rbuffend equ rbuffstart + 8212
  8486                              <1> %else
  8487                              <1> 	rbuffstart equ commandbufend
  8488                              <1> 	rbuffend equ commandbufend
  8489                              <1> %endif
  8490                              <1> %ifdef threads.included
  8491                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  8492                              <1> 	threadlistend: equ threadlist + 1024*4
  8493                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  8494                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  8495                              <1> 	bssend equ stack1 + 1024*1024
  8496                              <1> %else
  8497                              <1> 	bssend equ rbuffend
  8498                              <1> %endif
  8499                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  8500                                      %include "build/files.asm"
  8501                              <1> align 512,db 0
  8502                              <1> f0:
  8503 0003650B <incbin>            <1> incbin "included/boot.sh"
  8504 00036718 00<rept>            <1> align 512,db 0
  8505                              <1> f1:
  8506 00036718 <incbin>            <1> incbin "included/dostest.com"
  8507 00036931 00<rept>            <1> align 512,db 0
  8508                              <1> f2:
  8509 00036931 <incbin>            <1> incbin "included/exec"
  8510 00036AE1 00<rept>            <1> align 512,db 0
  8511                              <1> f3:
  8512 00036AE1 <incbin>            <1> incbin "included/finalcount.sn"
  8513 00036D02 00<rept>            <1> align 512,db 0
  8514                              <1> f4:
  8515 00036D02 <incbin>            <1> incbin "included/fork"
  8516 00036F58 00<rept>            <1> align 512,db 0
  8517                              <1> f5:
  8518 00036F58 <incbin>            <1> incbin "included/guitest"
  8519 0003742B 00<rept>            <1> align 512,db 0
  8520                              <1> f6:
  8521 0003742B <incbin>            <1> incbin "included/int"
  8522 000377AF 00<rept>            <1> align 512,db 0
  8523                              <1> f7:
  8524 000377AF <incbin>            <1> incbin "included/lostwoods.sn"
  8525 000378AE 00<rept>            <1> align 512,db 0
  8526                              <1> f8:
  8527 000378AE <incbin>            <1> incbin "included/mario.sn"
  8528 00037A3A 00<rept>            <1> align 512,db 0
  8529                              <1> f9:
  8530 00037A3A <incbin>            <1> incbin "included/songotime.sn"
  8531 00037C4A 00<rept>            <1> align 512,db 0
  8532                              <1> f10:
  8533 00037C4A <incbin>            <1> incbin "included/sse"
  8534 000380A8 00<rept>            <1> align 512,db 0
  8535                              <1> f11:
  8536 000380A8 <incbin>            <1> incbin "included/tely"
  8537 000383BA 00<rept>            <1> align 512,db 0
  8538                              <1> f12:
  8539 000383BA <incbin>            <1> incbin "included/unfs"
  8540                              <1> align 512,db 0
  8541                              <1> f13:
  8542 000383BA <incbin>            <1> incbin "included/_img.bin"
  8543                              <1> align 512,db 0
  8544                              <1> f14:
  8545                                  %endif
