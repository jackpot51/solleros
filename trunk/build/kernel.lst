     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> ;%define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> ;%define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 008C0300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[7286]          <1> 	mov [initialtsc], eax
   146 00000022 668916[7686]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[7A86]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[7E86]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[6D86]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[6E86]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C E95300              <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003F B81200              <1> 	mov ax, 12h
   164 00000042 31DB                <1> 	xor bx, bx
   165 00000044 CD10                <1> 	int 10h
   166 00000046 C606[6C86]00        <1> 	mov byte [guion], 0
   167 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004E C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004F BF[8286]            <1> 	mov di, memlistbuf
   172 00000052 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000055 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000061 66B918000000        <1> 	mov ecx, 24
   177 00000067 CD15                <1> 	int 0x15
   178 00000069 81C71800            <1> 	add di, 24
   179 0000006D 81FF[C288]          <1> 	cmp di, memlistend
   180 00000071 7305                <1> 	jae nomoregetmemsize
   181 00000073 6685DB              <1> 	test ebx, ebx
   182 00000076 75DD                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000078 81EF[8286]          <1> 	sub di, memlistbuf
   185 0000007C 893E[C288]          <1> 	mov [memlistend], di
   186 00000080 C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 00000081 BB0700              <1>     mov bx,07		; write to display
   190 00000084 B40E                <1>     mov ah,0Eh		; screen function
   191 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000088 84C0                <1>     test al,al		; look for terminator 
   193 0000008A 7405                <1>     jz .done	; zero byte at end of string
   194 0000008C CD10                <1>     int 10h		; write character to screen.    
   195 0000008E 46                  <1> 	inc si	     	; move to next character
   196 0000008F EBF5                <1>     jmp .lp		; loop
   197 00000091 C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000092 6631C0              <1> 	xor eax, eax
   203 00000095 6631DB              <1> 	xor ebx, ebx
   204 00000098 6631C9              <1> 	xor ecx, ecx
   205 0000009B 6631D2              <1> 	xor edx, edx
   206 0000009E 6631F6              <1> 	xor esi, esi
   207 000000A1 6631FF              <1> 	xor edi, edi
   208 000000A4 BA9200              <1> 	mov dx, 0x92
   209 000000A7 EC                  <1> 	in al, dx	;A20
   210 000000A8 0C02                <1> 	or al, 2
   211 000000AA EE                  <1> 	out dx, al
   212 000000AB 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AD 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000B1 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B4 A3[9803]            <1> 	mov [gdt2 + 2],ax
   216 000000B7 A3[A003]            <1> 	mov [gdt3 + 2],ax
   217 000000BA 66C1E810            <1> 	shr eax,16
   218 000000BE A2[9A03]            <1> 	mov [gdt2 + 4],al
   219 000000C1 A2[A203]            <1> 	mov [gdt3 + 4],al
   220 000000C4 8826[9D03]          <1> 	mov [gdt2 + 7],ah
   221 000000C8 8826[A503]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CC 66B8[008C0300]      <1> 	mov eax, initialstack
   224 000000D2 660306[4B02]        <1> 	add eax, [newcodecache]
   225 000000D7 A3[9003]            <1> 	mov [gdts + 2],ax
   226 000000DA 66C1E810            <1> 	shr eax, 16
   227 000000DE A2[9203]            <1> 	mov [gdts + 4],al
   228 000000E1 8826[9503]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E5 66A1[4B02]          <1> 	mov eax, [newcodecache]
   231 000000E9 A3[A803]            <1> 	mov [gdt4 + 2],ax
   232 000000EC A3[B003]            <1> 	mov [gdt5 + 2],ax
   233 000000EF A3[B803]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F2 A3[C003]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F5 66C1E810            <1> 	shr eax,16
   236 000000F9 A2[AA03]            <1> 	mov [gdt4 + 4],al
   237 000000FC A2[B203]            <1> 	mov [gdt5 + 4],al
   238 000000FF A2[BA03]            <1> 	mov [gdtv8086 + 4],al
   239 00000102 A2[C203]            <1> 	mov [gdtv80862 + 4],al
   240 00000105 8826[AD03]          <1> 	mov [gdt4 + 7],ah
   241 00000109 8826[B503]          <1> 	mov [gdt5 + 7],ah
   242 0000010D 8826[BD03]          <1> 	mov [gdtv8086 + 7],ah
   243 00000111 8826[C503]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000115 66B800004000        <1> 	mov eax, dosprogloc
   246 0000011B 660306[4B02]        <1> 	add eax, [newcodecache]
   247 00000120 A3[C803]            <1> 	mov [gdtdos + 2],ax
   248 00000123 A3[D003]            <1> 	mov [gdtdos2 + 2],ax
   249 00000126 66C1E810            <1> 	shr eax,16
   250 0000012A A2[CA03]            <1> 	mov [gdtdos + 4],al
   251 0000012D A2[D203]            <1> 	mov [gdtdos2 + 4],al
   252 00000130 8826[CD03]          <1> 	mov [gdtdos + 7],ah
   253 00000134 8826[D503]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000138 67668D83[7E030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 00000140 66A3[7403]          <1> 	mov [gdtr + 2],eax
   258 00000144 67668D83[D6030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014C 66A3[7A03]          <1> 	mov [idtr + 2],eax
   260 00000150 FA                  <1> 	cli
   261 00000151 0F0116[7203]        <1> 	lgdt [gdtr]
   262 00000156 0F011E[7803]        <1> 	lidt [idtr]
   263 0000015B 6631DB              <1> 	xor ebx, ebx
   264 0000015E 8CDB                <1> 	mov bx, ds
   265 00000160 66891E[4702]        <1> 	mov [basecache], ebx
   266 00000165 0F20C0              <1> 	mov eax,cr0
   267 00000168 0C01                <1> 	or al,1
   268 0000016A 0F22C0              <1> 	mov cr0,eax
   269 0000016D EA[7201]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000172 31C0                <1> 	xor eax, eax
   273 00000174 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000178 8ED8                <1> 	mov ds, ax
   275 0000017A 8EC0                <1> 	mov es, ax
   276 0000017C 8EE0                <1> 	mov fs, ax
   277 0000017E 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000182 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000184 648B06              <1> 	mov eax, [fs:esi]
   282 00000187 658906              <1> 	mov [gs:esi], eax
   283 0000018A 81C604000000        <1> 	add esi, 4
   284 00000190 81FE[008C0300]      <1> 	cmp esi, bsscopy
   285 00000196 72EC                <1> 	jb copykernel
   286 00000198 EA[9F010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 0000019F 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 000001A3 8ED8                <1> 	mov ds, ax
   291 000001A5 8EC0                <1> 	mov es, ax
   292 000001A7 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001A9 8ED0                <1> 	mov ss, ax
   295 000001AB BC[00AC0300]        <1> 	mov esp, stackend
   296 000001B0 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001B4 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B6 E8E3600000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001BB A1[4B020000]        <1> 	mov eax, [newcodecache]
   302 000001C0 C1E804              <1> 	shr eax, 4
   303 000001C3 A3[47020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C8 BE[3CA02500]        <1> 	mov esi, bssend
   306 000001CD 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001CF 8906                <1> 	mov [esi], eax
   309 000001D1 81EE04000000        <1> 	sub esi, 4
   310 000001D7 81FE[008C0300]      <1> 	cmp esi, bsscopy
   311 000001DD 77F0                <1> 	ja clearkernelbuffers
   312 000001DF FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001E0 BE[82860000]        <1> 	mov esi, memlistbuf
   316 000001E5 31FF                <1> 	xor edi, edi
   317 000001E7 668B3D[C2880000]    <1> 	mov di, [memlistend]
   318 000001EE 01F7                <1> 	add edi, esi
   319 000001F0 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001F2 39FE                <1> 	cmp esi, edi
   322 000001F4 7322                <1> 	jae finishedmemspacecalc
   323 000001F6 81C608000000        <1> 	add esi, 8
   324 000001FC 8B0E                <1> 	mov ecx, [esi]
   325 000001FE 81C608000000        <1> 	add esi, 8
   326 00000204 8B1E                <1> 	mov ebx, [esi]
   327 00000206 81C608000000        <1> 	add esi, 8
   328 0000020C 81FB01000000        <1> 	cmp ebx, 1
   329 00000212 75DE                <1> 	jne memoryspaceaddition
   330 00000214 01C8                <1> 	add eax, ecx
   331 00000216 EBDA                <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 00000218 A3[5C020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 0000021D 803D[6C860000]00    <1> 	cmp byte [guion], 0
   336 00000224 741C                <1> 	je normalstartup
   337 00000226 8B1D[47020000]      <1> 	mov ebx, [basecache]
   338 0000022C C1E304              <1> 	shl ebx, 4
   339 0000022F 8B3D[49560000]      <1> 	mov edi, [physbaseptr]
   340 00000235 29DF                <1> 	sub edi, ebx
   341 00000237 893D[49560000]      <1> 	mov [physbaseptr], edi
   342 0000023D E961660000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 00000242 E9CF280000          <1> 	jmp os
   346                              <1> 	
   347 00000247 00000000            <1> basecache dd 0
   348 0000024B 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 0000024F 00                  <1> testingcpuspeed db 0
   351 00000250 00000000            <1> cpuspeedperint dd 0
   352 00000254 0000000000000000    <1> cpuclocksperint dd 0,0
   353 0000025C 00000000            <1> memoryspace dd 0
   354 00000260 7D0A                <1> pitdiv dw 2685
   355 00000262 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 00000266 00                  <1> ticks db 0
   364 00000267 00000000            <1> timeseconds dd 0
   365 0000026B 00000000            <1> timenanoseconds dd 0
   366 0000026F 00                  <1> soundon db 0
   367 00000270 0000                <1> soundrepititions dw 0
   368 00000272 00000000            <1> soundpos dd 0
   369 00000276 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 0000027A C605[4F020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000281 A3[50020000]        <1> 	mov [cpuspeedperint], eax
   374 00000286 B8[B84F0000]        <1> 	mov eax, cpuspeedloopend
   375 0000028B 890424              <1> 	mov [esp], eax
   376 0000028E E9CF000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000293 803D[4F020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 0000029A 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 0000029C E89B000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 000002A1 803D[6F020000]01    <1> 	cmp byte [soundon], 1
   385 000002A8 0F847F570000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 000002AE 803D[9E680000]01    <1> 	cmp byte [threadson], 1
   389 000002B5 0F8485650000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002BB 803D[9E680000]00    <1> 	cmp byte [threadson], 0
   393 000002C2 0F849A000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397                              <1> 	;inc byte [ticks] ;every 256 ticks, check for keys
   398                              <1> 	;jnz near handled
   399                              <1> 	
   400 000002C8 60                  <1> 	pusha
   401 000002C9 E464                <1> 	in al, 64h
   402 000002CB A820                <1> 	test al, 20h
   403 000002CD 0F858E000000        <1> 	jnz near handled2
   404 000002D3 E460                <1> 	in al, 60h
   405 000002D5 3C01                <1> 	cmp al, 1		;escape
   406 000002D7 7405                <1> 	je userint
   407 000002D9 E983000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002DE 31C0                <1> 	xor eax, eax
   430 000002E0 3905[04AC0300]      <1> 	cmp [sigtable], eax
   431 000002E6 7410                <1> 	je .nosighook
   432 000002E8 8B1D[04AC0300]      <1> 	mov ebx, [sigtable]
   433 000002EE 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 000002F2 B020                <1> 	mov al, 0x20
   436 000002F4 E620                <1> 	out 0x20, al
   437 000002F6 61                  <1> 	popa
   438 000002F7 CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 000002F8 E621                <1> 	out 0x21, al
   442 000002FA E6A1                <1> 	out 0xA1, al
   443 000002FC B020                <1> 	mov al, 0x20
   444 000002FE E6A0                <1> 	out 0xA0, al
   445 00000300 E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 00000302 66A1[60020000]      <1> 	mov ax, [pitdiv]
   448 00000308 E640                <1> 	out 0x40, al
   449 0000030A 66C1C008            <1> 	rol ax, 8
   450 0000030E E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 00000310 B020                <1> 	mov al, 0x20
   453 00000312 E620                <1> 	out 0x20, al
   454 00000314 61                  <1> 	popa
   455 00000315 CC                  <1> 	int3
   456 00000316 5D                  <1> 	pop ebp
   457 00000317 5D                  <1> 	pop ebp
   458 00000318 9D                  <1> 	popf
   459 00000319 BC[00AC0300]        <1> 	mov esp, stackend ;reset stack
   460 0000031E E947290000          <1> 	jmp returnfromexp
   461                              <1> %endif
   462 00000323 0A                  <1> rtcrate db 10
   463                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   464                              <1> %ifdef io.serial
   465                              <1> %else
   466                              <1> %ifdef terminal.vsync
   467                              <1> 	cmp byte [termcopyneeded], 0
   468                              <1> 	je .nocopy
   469                              <1> 	call newtermcopy
   470                              <1> .nocopy
   471                              <1> 	push eax
   472                              <1> 	mov al, 0xC
   473                              <1> 	out 0x70, al
   474                              <1> 	in al, 0x71
   475                              <1> 	pop eax
   476                              <1> %endif
   477                              <1> %endif
   478 00000324 E940000000          <1> 	jmp handledboth
   479                              <1> %ifdef rtl8139.included
   480                              <1> nextpacket dd rbuffstart
   481                              <1> rtl8139.irq:
   482                              <1> 	pusha
   483                              <1> 	mov dx, [rtl8139.basenicaddr]
   484                              <1> 	add dx, rtl8139.ISR
   485                              <1> 	xor eax, eax
   486                              <1> 	in ax, dx
   487                              <1> 	out dx, ax
   488                              <1> 	test ax, 1
   489                              <1> 	jz  near .norec
   490                              <1> 	mov esi, packetrecvmsg
   491                              <1> 	call print
   492                              <1> 	mov esi, [nextpacket]
   493                              <1> 	cmp esi, rbuffend
   494                              <1> 	jb .goodesi
   495                              <1> 	mov esi, rbuffstart
   496                              <1> .goodesi:
   497                              <1> 	mov ecx, esi
   498                              <1> 	sub ecx, rbuffstart
   499                              <1> 	call showhex
   500                              <1> 	mov ecx, [esi]
   501                              <1> 	test ecx, 1
   502                              <1> 	jz .notgood
   503                              <1> 	call showhex
   504                              <1> 	add esi, 4
   505                              <1> 	xor edi, edi
   506                              <1> 	mov di, [esi - 2]
   507                              <1> 	mov ecx, edi
   508                              <1> 	add edi, esi
   509                              <1> 	sub ecx, 4
   510                              <1> 	call showdec
   511                              <1> 
   512                              <1> 	mov ecx, edi
   513                              <1> 	sub ecx, rbuffstart
   514                              <1> 	add ecx, 3
   515                              <1> 	shr ecx, 2
   516                              <1> 	shl ecx, 2
   517                              <1> 	call showhex
   518                              <1> .notgood	
   519                              <1> 	mov  dx, [rtl8139.basenicaddr]
   520                              <1> 	add dx, rtl8139.CBR
   521                              <1> 	xor eax, eax
   522                              <1> 	in ax, dx
   523                              <1> 	mov ecx, eax
   524                              <1> 	call showhex
   525                              <1> 	
   526                              <1> 	mov dx, [rtl8139.basenicaddr]
   527                              <1> 	add dx, rtl8139.CAPR
   528                              <1> 	out dx, ax
   529                              <1> 	
   530                              <1> 	add eax, rbuffstart
   531                              <1> 	mov [nextpacket], eax
   532                              <1> 	
   533                              <1> ;	int3
   534                              <1> ;.lp:
   535                              <1> ;	mov cl, [esi]
   536                              <1> ;	call showhexsmall
   537                              <1> ;	inc esi
   538                              <1> ;	cmp esi, [nextpacket]
   539                              <1> ;	jb .lp
   540                              <1> ;	mov ecx, [esi]
   541                              <1> ;	call showhex
   542                              <1> ;	call printline
   543                              <1> .norec:
   544                              <1> 	popa
   545                              <1> 	jmp handledboth
   546                              <1> packetrecvmsg db 10,"Packet: ",0
   547                              <1> %endif
   548                              <1> %ifdef sound.included
   549                              <1> sblaster.irq:
   550 00000329 60                  <1> 	pusha
   551 0000032A 803D[1D5D0000]01    <1> 	cmp byte [SoundBlaster], 1
   552 00000331 0F84E0570000        <1> 	je near sblaster.cont
   553 00000337 E925000000          <1> 	jmp handled2
   554                              <1> %endif
   555                              <1> 	
   556                              <1> timekeeper:
   557 0000033C 50                  <1> 	push eax
   558 0000033D A1[6B020000]        <1> 	mov eax, [timenanoseconds]
   559 00000342 0305[62020000]      <1> 	add eax, [timeinterval]
   560 00000348 3D00CA9A3B          <1> 	cmp eax, 1000000000
   561 0000034D 720B                <1> 	jb nonanosecondrollover
   562 0000034F FF05[67020000]      <1> 	inc dword [timeseconds]
   563 00000355 2D00CA9A3B          <1> 	sub eax, 1000000000
   564                              <1> 	%ifdef gui.time
   565                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   566                              <1> 		cmp byte [guion], 1
   567                              <1> 		jne nonanosecondrollover
   568                              <1> 		cmp dword [dragging], 0
   569                              <1> 		jne nonanosecondrollover
   570                              <1> 		pusha
   571                              <1> 		call guitime
   572                              <1> 		popa
   573                              <1> 	%endif
   574                              <1> nonanosecondrollover:
   575 0000035A A3[6B020000]        <1> 	mov [timenanoseconds], eax
   576 0000035F 58                  <1> 	pop eax
   577 00000360 C3                  <1> 	ret
   578                              <1> 	
   579                              <1> handled2:
   580 00000361 61                  <1> 	popa
   581                              <1> handled:
   582 00000362 50                  <1> 	push eax
   583 00000363 B020                <1> 	mov al, 0x20
   584 00000365 E620                <1> 	out 0x20, al
   585 00000367 58                  <1> 	pop eax
   586 00000368 CF                  <1> 	iret
   587                              <1> handledboth:
   588 00000369 50                  <1> 	push eax
   589 0000036A B020                <1> 	mov al, 0x20
   590 0000036C E6A0                <1> 	out 0xA0, al
   591 0000036E E620                <1> 	out 0x20, al
   592 00000370 58                  <1> 	pop eax
   593 00000371 CF                  <1> 	iret
   594                              <1> 	
   595                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   596 00000372 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   597 00000374 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   598                              <1> 
   599 00000378 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   600 0000037A 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   601                              <1> 
   602                              <1> 
   603 0000037E 0000                <1> gdt:	dw 0			; limit 15:0
   604 00000380 0000                <1> 	dw 0			; base 15:0
   605 00000382 00                  <1> 	db 0			; base 23:16
   606 00000383 00                  <1> 	db 0			; type
   607 00000384 00                  <1> 	db 0			; limit 19:16, flags
   608 00000385 00                  <1> 	db 0			; base 31:24
   609                              <1> ; linear data segment descriptor
   610                              <1> LINEAR_SEL	equ	$-gdt
   611 00000386 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   612 00000388 0000                <1> 	dw 0			; base for this one is always 0
   613 0000038A 00                  <1> 	db 0
   614 0000038B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   615 0000038C CF                  <1> 	db 0xCF			; page-granular, 32-bit
   616 0000038D 00                  <1> 	db 0
   617                              <1> STACK_SEL	equ $-gdt
   618 0000038E 0200                <1> gdts:	dw 2;(stackend)/4096
   619 00000390 0000                <1> 	dw 0
   620 00000392 00                  <1> 	db 0
   621 00000393 92                  <1> 	db 0x92
   622 00000394 CF                  <1> 	db 0xCF
   623 00000395 00                  <1> 	db 0
   624                              <1> ; code segment descriptor
   625                              <1> SYS_CODE_SEL	equ	$-gdt
   626 00000396 FFFF                <1> gdt2:	dw 0xFFFF
   627 00000398 0000                <1> 	dw 0			; (base gets set above)
   628 0000039A 00                  <1> 	db 0
   629 0000039B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   630 0000039C CF                  <1> 	db 0xCF
   631 0000039D 00                  <1> 	db 0
   632                              <1> ; data segment descriptor
   633                              <1> SYS_DATA_SEL	equ	$-gdt
   634 0000039E FFFF                <1> gdt3:	dw 0xFFFF
   635 000003A0 0000                <1> 	dw 0			; (base gets set above)
   636 000003A2 00                  <1> 	db 0
   637 000003A3 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   638 000003A4 CF                  <1> 	db 0xCF
   639 000003A5 00                  <1> 	db 0
   640                              <1> NEW_CODE_SEL	equ	$-gdt
   641 000003A6 FFFF                <1> gdt4:	dw 0xFFFF
   642 000003A8 0000                <1> 	dw 0			; (base gets set above)
   643 000003AA 00                  <1> 	db 0
   644 000003AB 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   645 000003AC CF                  <1> 	db 0xCF
   646 000003AD 00                  <1> 	db 0
   647                              <1> ; data segment descriptor
   648                              <1> NEW_DATA_SEL	equ	$-gdt
   649 000003AE FFFF                <1> gdt5:	dw 0xFFFF
   650 000003B0 0000                <1> 	dw 0			; (base gets set above)
   651 000003B2 00                  <1> 	db 0
   652 000003B3 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   653 000003B4 CF                  <1> 	db 0xCF
   654 000003B5 00                  <1> 	db 0
   655                              <1> V8086_CODE_SEL	equ $-gdt
   656 000003B6 FFFF                <1> gdtv8086: dw 0xFFFF
   657 000003B8 0000                <1> 	dw 0
   658 000003BA 00                  <1> 	db 0
   659 000003BB 9A                  <1> 	db 0x9A
   660 000003BC 8F                  <1> 	db 0x8F
   661 000003BD 00                  <1> 	db 0
   662                              <1> V8086_DATA_SEL	equ $-gdt
   663 000003BE FFFF                <1> gdtv80862: dw 0xFFFF
   664 000003C0 0000                <1> 	dw 0
   665 000003C2 00                  <1> 	db 0
   666 000003C3 92                  <1> 	db 0x92
   667 000003C4 8F                  <1> 	db 0x8F
   668 000003C5 00                  <1> 	db 0
   669                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   670 000003C6 0001                <1> gdtdos:	dw 256	;give it 1 MB
   671 000003C8 0000                <1> 	dw 0
   672 000003CA 00                  <1> 	db 0
   673 000003CB 9A                  <1> 	db 0x9A
   674 000003CC 8F                  <1> 	db 0x8F ;16 bit
   675 000003CD 00                  <1> 	db 0
   676                              <1> DOS_DATA_SEL 	equ $-gdt
   677 000003CE 0001                <1> gdtdos2:	dw 256
   678 000003D0 0000                <1> 	dw 0
   679 000003D2 00                  <1> 	db 0
   680 000003D3 92                  <1> 	db 0x92
   681 000003D4 8F                  <1> 	db 0x8F ;16 bit
   682 000003D5 00                  <1> 	db 0
   683                              <1> gdt_end:
   684                              <1> 
   685                              <1> ;	interrupt descriptor table (IDT)
   686                              <1> ; 32 reserved interrupts:
   687                              <1> idt:	
   688                              <1> %assign i 0
   689                              <1> %rep    8
   690                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <1> %assign i i+1
   692                              <1> %endrep
   693 000003D6 [EE0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 000003DE [FA0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 000003E6 [060D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 000003EE [120D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 000003F6 [1E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 000003FE [2A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i i+1
   705 00000406 [360D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i i+1
   707 0000040E [420D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i i+1
   709 00000416 [4E0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   710                              <1> %assign i 9
   711                              <1> %rep    23
   712                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <1> %assign i i+1
   714                              <1> %endrep
   715 0000041E [5A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i i+1
   717 00000426 [660D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i i+1
   719 0000042E [720D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i i+1
   721 00000436 [7E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i i+1
   723 0000043E [8A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i i+1
   725 00000446 [960D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i i+1
   727 0000044E [A20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i i+1
   729 00000456 [AE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i i+1
   731 0000045E [BA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i i+1
   733 00000466 [C60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i i+1
   735 0000046E [D20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i i+1
   737 00000476 [DE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i i+1
   739 0000047E [EA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i i+1
   741 00000486 [F60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i i+1
   743 0000048E [020E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i i+1
   745 00000496 [0E0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i i+1
   747 0000049E [1A0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i i+1
   749 000004A6 [260E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i i+1
   751 000004AE [320E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i i+1
   753 000004B6 [3E0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i i+1
   755 000004BE [4A0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i i+1
   757 000004C6 [560E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i i+1
   759 000004CE [620E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i i+1
   761 000004D6 [D829]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   762 000004DE [DC29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   763                              <1> %assign i 0x22
   764                              <1> %rep 14
   765                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <1> %assign i +1
   767                              <1> %endrep
   768 000004E6 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000004EE [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000004F6 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000004FE [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 00000506 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 0000050E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 00000516 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 0000051E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 00000526 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 0000052E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788 00000536 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   789                              <2> %assign i +1
   790 0000053E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   791                              <2> %assign i +1
   792 00000546 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   793                              <2> %assign i +1
   794 0000054E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   795                              <2> %assign i +1
   796                              <1> ;INT 30h for os use and 3rd party use:
   797 00000556 [ED1B]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   798                              <1> %assign i 0x31
   799                              <1> %rep 15
   800                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   801                              <1> %assign i +1
   802                              <1> %endrep
   803 0000055E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   804                              <2> %assign i +1
   805 00000566 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   806                              <2> %assign i +1
   807 0000056E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   808                              <2> %assign i +1
   809 00000576 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   810                              <2> %assign i +1
   811 0000057E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   812                              <2> %assign i +1
   813 00000586 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   814                              <2> %assign i +1
   815 0000058E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   816                              <2> %assign i +1
   817 00000596 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   818                              <2> %assign i +1
   819 0000059E [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   820                              <2> %assign i +1
   821 000005A6 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   822                              <2> %assign i +1
   823 000005AE [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   824                              <2> %assign i +1
   825 000005B6 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   826                              <2> %assign i +1
   827 000005BE [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   828                              <2> %assign i +1
   829 000005C6 [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   830                              <2> %assign i +1
   831 000005CE [6203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   832                              <2> %assign i +1
   833                              <1> ;and here we are at 0x40
   834                              <1> ;here are all the irq's
   835 000005D6 [9302]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   836 000005DE [6203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   837 000005E6 [6203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   838 000005EE [6203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   839 000005F6 [6203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   840                              <1> 	%ifdef sound.included
   841 000005FE [2903]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   842                              <1> 	%else
   843                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   844                              <1> 	%endif
   845 00000606 [6203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   846 0000060E [6203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   847 00000616 [2403]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   848 0000061E [6903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   849 00000626 [6903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   850                              <1> 	%ifdef rtl8139.included
   851                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   852                              <1> 	%else
   853 0000062E [6903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   854                              <1> 	%endif
   855 00000636 [6903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   856 0000063E [6903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   857 00000646 [6903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   858 0000064E [6903]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   859                              <1> ;This brings me up to 0x50
   860                              <1> %assign i 0x50
   861                              <1> %rep 176
   862                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   864                              <1> %assign i +1
   865                              <1> %endrep
   866 00000656 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000065E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000666 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 0000066E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000676 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 0000067E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000686 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000068E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000696 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000069E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000006A6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000006AE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000006B6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000006BE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000006C6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000006CE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 000006D6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 000006DE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 000006E6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 000006EE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 000006F6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000006FE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000706 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000070E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000716 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000071E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000726 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000072E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000736 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000073E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000746 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000074E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000756 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000075E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000766 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 0000076E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000776 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 0000077E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000786 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000078E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000796 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000079E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000007A6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000007AE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000007B6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000007BE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000007C6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000007CE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 000007D6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 000007DE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 000007E6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 000007EE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 000007F6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000007FE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000806 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000080E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000816 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000081E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000826 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000082E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000836 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000083E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000846 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 0000084E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000856 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 0000085E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000866 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 0000086E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000876 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 0000087E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000886 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000088E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000896 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000089E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000008A6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000008AE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 000008B6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 000008BE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 000008C6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 000008CE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 000008D6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 000008DE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 000008E6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 000008EE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 000008F6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 000008FE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000906 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000090E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000916 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000091E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000926 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000092E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000936 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 0000093E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000946 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 0000094E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000956 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 0000095E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000966 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 0000096E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000976 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 0000097E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000986 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 0000098E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000996 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 0000099E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 000009A6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 000009AE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 000009B6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 000009BE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 000009C6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 000009CE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 000009D6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 000009DE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 000009E6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 000009EE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 000009F6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 000009FE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A06 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A0E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A16 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A1E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A26 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A2E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A36 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A3E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000A46 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000A4E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000A56 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000A5E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000A66 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000A6E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000A76 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000A7E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000A86 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000A8E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000A96 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000A9E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000AA6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000AAE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000AB6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000ABE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000AC6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000ACE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000AD6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000ADE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000AE6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000AEE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000AF6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000AFE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B06 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B0E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B16 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B1E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B26 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B2E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B36 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B3E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000B46 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000B4E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000B56 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349 00000B5E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1350                              <2> 
  1351                              <2> %assign i +1
  1352 00000B66 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1353                              <2> 
  1354                              <2> %assign i +1
  1355 00000B6E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1356                              <2> 
  1357                              <2> %assign i +1
  1358 00000B76 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1359                              <2> 
  1360                              <2> %assign i +1
  1361 00000B7E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1362                              <2> 
  1363                              <2> %assign i +1
  1364 00000B86 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1365                              <2> 
  1366                              <2> %assign i +1
  1367 00000B8E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1368                              <2> 
  1369                              <2> %assign i +1
  1370 00000B96 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1371                              <2> 
  1372                              <2> %assign i +1
  1373 00000B9E [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1374                              <2> 
  1375                              <2> %assign i +1
  1376 00000BA6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1377                              <2> 
  1378                              <2> %assign i +1
  1379 00000BAE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1380                              <2> 
  1381                              <2> %assign i +1
  1382 00000BB6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1383                              <2> 
  1384                              <2> %assign i +1
  1385 00000BBE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1386                              <2> 
  1387                              <2> %assign i +1
  1388 00000BC6 [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1389                              <2> 
  1390                              <2> %assign i +1
  1391 00000BCE [6203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1392                              <2> 
  1393                              <2> %assign i +1
  1394                              <1> idt_end:
  1395                                  	%include "source/realmode.asm"
  1396                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1397                              <1> 
  1398 00000BD6 FA                  <1> 	cli
  1399 00000BD7 A3[E40C0000]        <1> 	mov [realmodeeax], eax
  1400 00000BDC 891D[E00C0000]      <1> 	mov [realmodeebx], ebx
  1401 00000BE2 8925[D20C0000]      <1> 	mov [pmodeesp], esp
  1402                              <1> 
  1403 00000BE8 BB[DC0C0000]        <1> 	mov ebx, cr0old
  1404                              <1> rmcopytofirstmbyte:
  1405 00000BED 8B03                <1> 	mov eax, [ebx]
  1406 00000BEF 658903              <1> 	mov [gs:ebx], eax
  1407 00000BF2 81C304000000        <1> 	add ebx, 4
  1408 00000BF8 81FB[E80C0000]      <1> 	cmp ebx, realmodeptr
  1409 00000BFE 76ED                <1> 	jbe rmcopytofirstmbyte
  1410                              <1> 
  1411 00000C00 EA[070C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1412                              <1> 
  1413                              <1> [BITS 16]
  1414                              <1> protected16bit:
  1415 00000C07 B84000              <1> 	mov ax, V8086_DATA_SEL
  1416 00000C0A 8ED8                <1> 	mov ds, ax
  1417 00000C0C 8EC0                <1> 	mov es, ax
  1418 00000C0E 8EE0                <1> 	mov fs, ax
  1419 00000C10 8EE8                <1> 	mov gs, ax
  1420 00000C12 8ED0                <1> 	mov ss, ax
  1421 00000C14 66BC[00AC0300]      <1> 	mov esp, stackend
  1422 00000C1A 0F20C0              <1> 	mov eax, cr0
  1423 00000C1D 66A3[DC0C]          <1> 	mov [cr0old], eax
  1424 00000C21 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1425 00000C27 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1426 00000C2A EA[2F0C]0010        <1> 	jmp 0x1000:inrealmode
  1427                              <1> 
  1428                              <1> inrealmode:
  1429 00000C2F 8CC8                <1> 	mov ax, cs
  1430 00000C31 8ED8                <1> 	mov ds, ax
  1431 00000C33 8EC0                <1> 	mov es, ax
  1432 00000C35 8EE0                <1> 	mov fs, ax
  1433 00000C37 8EE8                <1> 	mov gs, ax
  1434 00000C39 8ED0                <1> 	mov ss, ax
  1435 00000C3B BC[00AC]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1436                              <1> 	
  1437 00000C3E B011                <1> 	mov al, 0x11
  1438 00000C40 E620                <1> 	out 0x20, al
  1439 00000C42 E6A0                <1> 	out 0xA0, al
  1440 00000C44 B008                <1> 	mov al, 0x8		;interrupt for master
  1441 00000C46 E621                <1> 	out 0x21, al
  1442 00000C48 B070                <1> 	mov al, 0x70	;interrupt for slave
  1443 00000C4A E6A1                <1> 	out 0xA1, al
  1444 00000C4C B004                <1> 	mov al, 4
  1445 00000C4E E621                <1> 	out 0x21, al
  1446 00000C50 B002                <1> 	mov al, 2
  1447 00000C52 E6A1                <1> 	out 0xA1, al
  1448 00000C54 B001                <1> 	mov al, 0x1
  1449 00000C56 E621                <1> 	out 0x21, al
  1450 00000C58 B001                <1> 	mov al, 0x1
  1451 00000C5A E6A1                <1> 	out 0xA1, al
  1452                              <1> 	
  1453 00000C5C 0F011E[D60C]        <1> 	lidt [idt_real]
  1454 00000C61 FB                  <1> 	sti
  1455                              <1> 
  1456 00000C62 66A1[E40C]          <1> 	mov eax, [realmodeeax]
  1457 00000C66 668B1E[E00C]        <1> 	mov ebx, [realmodeebx]
  1458                              <1> 
  1459 00000C6B FF16[E80C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1460                              <1> 
  1461 00000C6F 66A3[E40C]          <1> 	mov [realmodeeax], eax
  1462 00000C73 66891E[E00C]        <1> 	mov [realmodeebx], ebx
  1463                              <1> 
  1464 00000C78 FA                  <1> 	cli
  1465 00000C79 0F0116[7203]        <1> 	lgdt [gdtr]
  1466 00000C7E 0F011E[7803]        <1> 	lidt [idtr]
  1467 00000C83 0F20C0              <1> 	mov eax, cr0
  1468 00000C86 0C01                <1> 	or al, 1
  1469 00000C88 0F22C0              <1> 	mov cr0,eax
  1470 00000C8B EA[900C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1471                              <1> 
  1472                              <1> [BITS 32]
  1473                              <1> returntopmode:
  1474 00000C90 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1475 00000C94 8ED8                <1> 	mov ds, ax
  1476 00000C96 8EC0                <1> 	mov es, ax
  1477 00000C98 8EE0                <1> 	mov fs, ax
  1478 00000C9A 8ED0                <1> 	mov ss, ax
  1479 00000C9C 8B25[D20C0000]      <1> 	mov esp, [pmodeesp]
  1480 00000CA2 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1481 00000CA6 8EE8                <1> 	mov gs, ax
  1482                              <1> 
  1483 00000CA8 BB[DC0C0000]        <1> 	mov ebx, cr0old
  1484                              <1> rmcopyfromfirstmbyte:
  1485 00000CAD 658B03              <1> 	mov eax, [gs:ebx]
  1486 00000CB0 8903                <1> 	mov [ebx], eax
  1487 00000CB2 81C304000000        <1> 	add ebx, 4
  1488 00000CB8 81FB[E80C0000]      <1> 	cmp ebx, realmodeptr
  1489 00000CBE 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1490                              <1> 
  1491 00000CC0 E817560000          <1> 	call initialize.pic ;reset irq's and masks
  1492 00000CC5 FB                  <1> 	sti
  1493 00000CC6 A1[E40C0000]        <1> 	mov eax, [realmodeeax]
  1494 00000CCB 8B1D[E00C0000]      <1> 	mov ebx, [realmodeebx]
  1495 00000CD1 C3                  <1> 	ret
  1496                              <1> 	
  1497 00000CD2 00000000            <1> pmodeesp dd 0
  1498                              <1> idt_real:
  1499 00000CD6 FF03                <1> 	dw 0x3FF
  1500 00000CD8 00000000            <1> 	dd 0
  1501 00000CDC 00000000            <1> cr0old dd 0
  1502 00000CE0 00000000            <1> realmodeebx dd 0
  1503 00000CE4 00000000            <1> realmodeeax dd 0
  1504 00000CE8 0000                <1> realmodeptr dw 0
  1505 00000CEA 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1506                                  [BITS 32]
  1507                                      %include "source/exception.asm"
  1508                              <1> %ifdef exceptions.included
  1509                              <1> unhand:	
  1510                              <1> 	%assign i 0
  1511                              <1> 	%rep 32
  1512                              <1> 	mov byte [intprob], i
  1513                              <1> 	jmp unhand2
  1514                              <1> 	%assign i i+1
  1515                              <1> 	%endrep
  1516 00000CEE C605[A6110000]00    <2>  mov byte [intprob], i
  1517 00000CF5 E974010000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000CFA C605[A6110000]01    <2>  mov byte [intprob], i
  1520 00000D01 E968010000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000D06 C605[A6110000]02    <2>  mov byte [intprob], i
  1523 00000D0D E95C010000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000D12 C605[A6110000]03    <2>  mov byte [intprob], i
  1526 00000D19 E950010000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000D1E C605[A6110000]04    <2>  mov byte [intprob], i
  1529 00000D25 E944010000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000D2A C605[A6110000]05    <2>  mov byte [intprob], i
  1532 00000D31 E938010000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000D36 C605[A6110000]06    <2>  mov byte [intprob], i
  1535 00000D3D E92C010000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000D42 C605[A6110000]07    <2>  mov byte [intprob], i
  1538 00000D49 E920010000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000D4E C605[A6110000]08    <2>  mov byte [intprob], i
  1541 00000D55 E914010000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000D5A C605[A6110000]09    <2>  mov byte [intprob], i
  1544 00000D61 E908010000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000D66 C605[A6110000]0A    <2>  mov byte [intprob], i
  1547 00000D6D E9FC000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000D72 C605[A6110000]0B    <2>  mov byte [intprob], i
  1550 00000D79 E9F0000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000D7E C605[A6110000]0C    <2>  mov byte [intprob], i
  1553 00000D85 E9E4000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000D8A C605[A6110000]0D    <2>  mov byte [intprob], i
  1556 00000D91 E9D8000000          <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000D96 C605[A6110000]0E    <2>  mov byte [intprob], i
  1559 00000D9D E9CC000000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 00000DA2 C605[A6110000]0F    <2>  mov byte [intprob], i
  1562 00000DA9 E9C0000000          <2>  jmp unhand2
  1563                              <2>  %assign i i+1
  1564 00000DAE C605[A6110000]10    <2>  mov byte [intprob], i
  1565 00000DB5 E9B4000000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 00000DBA C605[A6110000]11    <2>  mov byte [intprob], i
  1568 00000DC1 E9A8000000          <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 00000DC6 C605[A6110000]12    <2>  mov byte [intprob], i
  1571 00000DCD E99C000000          <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 00000DD2 C605[A6110000]13    <2>  mov byte [intprob], i
  1574 00000DD9 E990000000          <2>  jmp unhand2
  1575                              <2>  %assign i i+1
  1576 00000DDE C605[A6110000]14    <2>  mov byte [intprob], i
  1577 00000DE5 E984000000          <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00000DEA C605[A6110000]15    <2>  mov byte [intprob], i
  1580 00000DF1 E978000000          <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00000DF6 C605[A6110000]16    <2>  mov byte [intprob], i
  1583 00000DFD E96C000000          <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 00000E02 C605[A6110000]17    <2>  mov byte [intprob], i
  1586 00000E09 E960000000          <2>  jmp unhand2
  1587                              <2>  %assign i i+1
  1588 00000E0E C605[A6110000]18    <2>  mov byte [intprob], i
  1589 00000E15 E954000000          <2>  jmp unhand2
  1590                              <2>  %assign i i+1
  1591 00000E1A C605[A6110000]19    <2>  mov byte [intprob], i
  1592 00000E21 E948000000          <2>  jmp unhand2
  1593                              <2>  %assign i i+1
  1594 00000E26 C605[A6110000]1A    <2>  mov byte [intprob], i
  1595 00000E2D E93C000000          <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 00000E32 C605[A6110000]1B    <2>  mov byte [intprob], i
  1598 00000E39 E930000000          <2>  jmp unhand2
  1599                              <2>  %assign i i+1
  1600 00000E3E C605[A6110000]1C    <2>  mov byte [intprob], i
  1601 00000E45 E924000000          <2>  jmp unhand2
  1602                              <2>  %assign i i+1
  1603 00000E4A C605[A6110000]1D    <2>  mov byte [intprob], i
  1604 00000E51 E918000000          <2>  jmp unhand2
  1605                              <2>  %assign i i+1
  1606 00000E56 C605[A6110000]1E    <2>  mov byte [intprob], i
  1607 00000E5D E90C000000          <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 00000E62 C605[A6110000]1F    <2>  mov byte [intprob], i
  1610 00000E69 E900000000          <2>  jmp unhand2
  1611                              <2>  %assign i i+1
  1612                              <1> unhand2:
  1613 00000E6E FA                  <1> 	cli
  1614 00000E6F 1E                  <1> 	push ds
  1615 00000E70 06                  <1> 	push es
  1616 00000E71 0FA0                <1> 	push fs
  1617 00000E73 0FA8                <1> 	push gs
  1618 00000E75 16                  <1> 	push ss
  1619 00000E76 60                  <1> 	pushad
  1620                              <1> %ifdef gui.included
  1621 00000E77 803D[6C860000]00    <1> 	cmp byte [guion], 0
  1622 00000E7E 0F8432000000        <1> 	je near noguiunhandstuff
  1623 00000E84 66C705[A0110000]08- <1> 	mov word [locunhandy], 8
  1624 00000E8C 00                  <1>
  1625 00000E8D 66C705[A2110000]08- <1> 	mov word [locunhandx], 8
  1626 00000E95 00                  <1>
  1627 00000E96 668B1D[846F0000]    <1> 	mov bx, [background]
  1628 00000E9D 66891D[A4110000]    <1> 	mov [backgroundcache], bx
  1629 00000EA4 C605[25570000]01    <1> 	mov byte [mousedisabled],1
  1630 00000EAB 66BB00F8            <1> 	mov bx, 1111100000000000b
  1631 00000EAF 66891D[846F0000]    <1> 	mov [background], bx
  1632                              <1> noguiunhandstuff:
  1633                              <1> %endif
  1634 00000EB6 89E6                <1> 	mov esi, esp
  1635 00000EB8 8935[94110000]      <1> 	mov [espfirst], esi
  1636 00000EBE 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1637 00000EC4 8935[90110000]      <1> 	mov [esploc], esi
  1638 00000ECA BE[B5110000]        <1> 	mov esi, unhandmsg
  1639 00000ECF 8935[98110000]      <1> 	mov [esiloc], esi
  1640 00000ED5 31C9                <1> 	xor ecx, ecx
  1641 00000ED7 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1642 00000EDD BB[84150000]        <1> 	mov ebx, errortypes
  1643 00000EE2 C1E102              <1> 	shl ecx, 2
  1644 00000EE5 01CB                <1> 	add ebx, ecx
  1645 00000EE7 81FB[C4150000]      <1> 	cmp ebx, errortypesend
  1646 00000EED 7205                <1> 	jb gooderrortype
  1647 00000EEF BB[C4150000]        <1> 	mov ebx, errortypesend
  1648                              <1> gooderrortype:
  1649 00000EF4 8B33                <1> 	mov esi, [ebx]
  1650                              <1> %ifdef gui.included
  1651 00000EF6 803D[6C860000]00    <1> 	cmp byte [guion], 0
  1652 00000EFD 0F842D000000        <1> 	je near errortext
  1653 00000F03 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1654 00000F0A 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1655 00000F11 66B80100            <1> 	mov ax, 1
  1656 00000F15 6631DB              <1> 	xor bx, bx
  1657 00000F18 E8BC660000          <1> 	call showstring2
  1658 00000F1D 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1659 00000F24 668915[A2110000]    <1> 	mov [locunhandx], dx
  1660 00000F2B E905000000          <1> 	jmp errortextdone
  1661                              <1> %endif
  1662                              <1> errortext:
  1663 00000F30 E8130E0000          <1> 	call print		;get the error message and print it
  1664                              <1> errortextdone:
  1665 00000F35 31C9                <1> 	xor ecx, ecx
  1666 00000F37 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1667 00000F3D E8E7010000          <1> 	call expdump
  1668                              <1> dumpstack:
  1669 00000F42 8B35[90110000]      <1> 	mov esi, [esploc]
  1670 00000F48 39E6                <1> 	cmp esi, esp
  1671 00000F4A 7216                <1> 	jb donedump
  1672 00000F4C 368B0E              <1> 	mov ecx, [ss:esi]
  1673 00000F4F 81EE04000000        <1> 	sub esi, 4
  1674 00000F55 8935[90110000]      <1> 	mov [esploc], esi
  1675 00000F5B E8C9010000          <1> 	call expdump
  1676 00000F60 EBE0                <1> 	jmp dumpstack
  1677                              <1> donedump:
  1678 00000F62 0F20C1              <1> 	mov ecx, cr0
  1679 00000F65 E8BF010000          <1> 	call expdump
  1680 00000F6A 0F20D1              <1> 	mov ecx, cr2
  1681 00000F6D E8B7010000          <1> 	call expdump
  1682 00000F72 0F20D9              <1> 	mov ecx, cr3
  1683 00000F75 E8AF010000          <1> 	call expdump
  1684 00000F7A 0F20E1              <1> 	mov ecx, cr4
  1685 00000F7D E8A7010000          <1> 	call expdump
  1686 00000F82 0F00C9              <1> 	str ecx
  1687 00000F85 E89F010000          <1> 	call expdump
  1688 00000F8A 0F010D[AF110000]    <1> 	sidt [igdtcache]
  1689 00000F91 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1690 00000F97 E88D010000          <1> 	call expdump
  1691 00000F9C 0F0105[AF110000]    <1> 	sgdt [igdtcache]
  1692 00000FA3 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1693 00000FA9 E87B010000          <1> 	call expdump
  1694 00000FAE 0F00C1              <1> 	sldt ecx
  1695 00000FB1 E873010000          <1> 	call expdump
  1696 00000FB6 8B35[90110000]      <1> 	mov esi, [esploc]
  1697 00000FBC 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1698 00000FC1 81C710000000        <1> 	add edi, 16
  1699 00000FC7 893D[AB110000]      <1> 	mov [codelocend], edi
  1700 00000FCD 81EF20000000        <1> 	sub edi, 32
  1701                              <1> dumpcodeloop:
  1702 00000FD3 893D[A7110000]      <1> 	mov [codeloc], edi
  1703 00000FD9 8B0F                <1> 	mov ecx, [edi]
  1704 00000FDB E849010000          <1> 	call expdump
  1705 00000FE0 8B3D[A7110000]      <1> 	mov edi, [codeloc]
  1706 00000FE6 81C704000000        <1> 	add edi, 4
  1707 00000FEC 3B3D[AB110000]      <1> 	cmp edi, [codelocend]
  1708 00000FF2 72DF                <1> 	jb dumpcodeloop
  1709 00000FF4 BE[BA100000]        <1> 	mov esi, backtoosmsg
  1710                              <1> %ifdef gui.included
  1711 00000FF9 803D[6C860000]00    <1> 	cmp byte [guion], 0
  1712 00001000 741F                <1> 	je backtomsg
  1713                              <1> guibacktomsg:
  1714 00001002 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1715 00001009 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1716 00001010 66B80100            <1> 	mov ax, 1
  1717 00001014 6631DB              <1> 	xor bx, bx
  1718 00001017 E8BD650000          <1> 	call showstring2
  1719 0000101C E905000000          <1> 	jmp backtomsgdone
  1720                              <1> backtomsg:
  1721                              <1> %endif
  1722 00001021 E8220D0000          <1> 	call print
  1723                              <1> backtomsgdone:
  1724 00001026 30C0                <1> 	xor al, al
  1725 00001028 E819130000          <1> 	call rdcharint
  1726 0000102D 803D[A6110000]03    <1> 	cmp byte [intprob], 3
  1727 00001034 7541                <1> 	jne nodebugint
  1728                              <1> %ifdef gui.included
  1729 00001036 803D[6C860000]00    <1> 	cmp byte [guion], 0
  1730 0000103D 7427                <1> 	je nodebuggui
  1731 0000103F 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1732 00001046 66891D[846F0000]    <1> 	mov [background], bx
  1733 0000104D 6631DB              <1> 	xor bx, bx
  1734 00001050 C605[25570000]00    <1> 	mov byte [mousedisabled], 0
  1735 00001057 E8DC5E0000          <1> 	call guiclear
  1736 0000105C E8275F0000          <1> 	call reloadallgraphics
  1737 00001061 E82D180000          <1> 	call termcopy
  1738                              <1> nodebuggui:
  1739                              <1> %endif
  1740 00001066 8B35[94110000]      <1> 	mov esi, [espfirst]
  1741 0000106C 89F4                <1> 	mov esp, esi
  1742 0000106E 61                  <1> 	popad
  1743 0000106F 17                  <1> 	pop ss
  1744 00001070 0FA9                <1> 	pop gs
  1745 00001072 0FA1                <1> 	pop fs
  1746 00001074 07                  <1> 	pop es
  1747 00001075 1F                  <1> 	pop ds
  1748 00001076 CF                  <1> 	iret
  1749                              <1> nodebugint:
  1750 00001077 61                  <1> 	popad
  1751 00001078 17                  <1> 	pop ss
  1752 00001079 0FA9                <1> 	pop gs
  1753 0000107B 0FA1                <1> 	pop fs
  1754 0000107D 07                  <1> 	pop es
  1755 0000107E 1F                  <1> 	pop ds
  1756 0000107F 81C408000000        <1> 	add esp, 8
  1757                              <1> ;	popf ;pop the cs segment selector into eflags
  1758                              <1> ;	popf ;then pop the flags
  1759                              <1> %ifdef gui.included
  1760 00001085 803D[6C860000]00    <1> 	cmp byte [guion], 0
  1761 0000108C 7427                <1> 	je returnunhandgui
  1762 0000108E 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1763 00001095 66891D[846F0000]    <1> 	mov [background], bx
  1764 0000109C 6631DB              <1> 	xor bx, bx
  1765 0000109F C605[25570000]00    <1> 	mov byte [mousedisabled], 0
  1766 000010A6 E88D5E0000          <1> 	call guiclear
  1767 000010AB E8D85E0000          <1> 	call reloadallgraphics
  1768 000010B0 E8DE170000          <1> 	call termcopy
  1769                              <1> %endif
  1770                              <1> returnunhandgui:
  1771 000010B5 E91C1C0000          <1> 	jmp nwcmd
  1772 000010BA 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1773 000010C3 737420616E79207072- <1>
  1774 000010CC 6F626C656D7320696E- <1>
  1775 000010D5 207468652049737375- <1>
  1776 000010DE 65732073656374696F- <1>
  1777 000010E7 6E20617420736F6C6C- <1>
  1778 000010F0 65726F732E676F6F67- <1>
  1779 000010F9 6C65636F64652E636F- <1>
  1780 00001102 6D0A                <1>
  1781 00001104 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1782 0000110D 206B657920746F2072- <1>
  1783 00001116 657475726E20746F20- <1>
  1784 0000111F 536F6C6C65724F530A- <1>
  1785 00001128 00                  <1>
  1786                              <1> expdump:
  1787 00001129 8B35[98110000]      <1> 	mov esi, [esiloc]
  1788 0000112F 89F7                <1> 	mov edi, esi
  1789 00001131 81C70F000000        <1> 	add edi, 15
  1790 00001137 81C604000000        <1> 	add esi, 4
  1791 0000113D 893D[98110000]      <1> 	mov [esiloc], edi
  1792 00001143 81EF03000000        <1> 	sub edi, 3
  1793 00001149 E8EA1F0000          <1> 	call converthex
  1794 0000114E 81EE04000000        <1> 	sub esi, 4
  1795                              <1> %ifdef gui.included
  1796 00001154 803D[6C860000]00    <1> 	cmp byte [guion], 0
  1797 0000115B 0F8429000000        <1> 	je near expdumptext
  1798 00001161 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1799 00001168 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1800 0000116F 66B80100            <1> 	mov ax, 1
  1801 00001173 6631DB              <1> 	xor bx, bx
  1802 00001176 E85E640000          <1> 	call showstring2
  1803 0000117B 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1804 00001182 668915[A2110000]    <1> 	mov [locunhandx], dx
  1805 00001189 C3                  <1> 	ret
  1806                              <1> %endif
  1807                              <1> expdumptext:
  1808 0000118A E8B90B0000          <1> 	call print
  1809 0000118F C3                  <1> 	ret
  1810 00001190 00000000            <1> esploc dd 0
  1811 00001194 00000000            <1> espfirst dd 0
  1812 00001198 00000000            <1> esiloc dd 0
  1813 0000119C 00000000            <1> esiregbuf dd 0
  1814 000011A0 0100                <1> locunhandy dw 1
  1815 000011A2 0100                <1> locunhandx dw 1
  1816 000011A4 0000                <1> backgroundcache dw 0
  1817 000011A6 00                  <1> intprob db 0
  1818 000011A7 00000000            <1> codeloc dd 0
  1819 000011AB 00000000            <1> codelocend dd 0
  1820 000011AF 000000000000        <1> igdtcache dw 0,0,0
  1821                              <1> 	unhandmsg:	
  1822 000011B5 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1823 000011BE 303030FF0A00        <1>
  1824                              <1> unhndrg:
  1825 000011C4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1826 000011CD 303030202000<rept>  <1>
  1827 0000122D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1828 00001236 303030FF0A00        <1>
  1829 0000123C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1830 00001245 303030202000<rept>  <1>
  1831 000012A5 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1832 000012AE 303030FF0A00        <1>
  1833 000012B4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1834 000012BD 303030202000<rept>  <1>
  1835 0000131D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1836 00001326 303030FF0A00        <1>
  1837 0000132C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1838 00001335 303030202000<rept>  <1>
  1839 00001395 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1840 0000139E 303030FF0A00        <1>
  1841                              <1> unhandregs:
  1842 000013A4 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1843 000013AD 303030202000        <1>
  1844 000013B3 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1845 000013BC 303030202000        <1>
  1846 000013C2 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1847 000013CB 303030FF0A00        <1>
  1848 000013D1 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1849 000013DA 303030202000        <1>
  1850 000013E0 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1851 000013E9 303030202000        <1>
  1852 000013EF 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1853 000013F8 303030202000        <1>
  1854 000013FE 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1855 00001407 303030202000        <1>
  1856 0000140D 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1857 00001416 303030FF0A00        <1>
  1858 0000141C 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1859 00001425 303030202000        <1>
  1860 0000142B 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1861 00001434 303030202000        <1>
  1862 0000143A 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1863 00001443 303030202000        <1>
  1864 00001449 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1865 00001452 303030FF0A00        <1>
  1866 00001458 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1867 00001461 303030202000        <1>
  1868 00001467 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1869 00001470 303030202000        <1>
  1870 00001476 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1871 0000147F 303030202000        <1>
  1872 00001485 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1873 0000148E 303030FF0A00        <1>
  1874 00001494 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1875 0000149D 303030202000        <1>
  1876 000014A3 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1877 000014AC 303030202000        <1>
  1878 000014B2 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1879 000014BB 303030202000        <1>
  1880 000014C1 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1881 000014CA 303030FF0A00        <1>
  1882 000014D0 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1883 000014D9 303030202000        <1>
  1884 000014DF 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1885 000014E8 303030202000        <1>
  1886 000014EE 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1887 000014F7 303030202000        <1>
  1888 000014FD 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1889 00001506 303030FF0A00        <1>
  1890 0000150C FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1891 00001515 303030202000<rept>  <1>
  1892 0000152A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1893 00001533 30303020FF00        <1>
  1894 00001539 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1895 00001542 3030305D2000        <1>
  1896 00001548 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1897 00001551 303030202000<rept>  <1>
  1898 00001575 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1899 0000157E 303030FF0A00        <1>
  1900                              <1> unhandmsgend:
  1901                              <1> 
  1902                              <1> errortypes:
  1903 00001584 [C8150000]          <1> 			dd err0
  1904 00001588 [31160000]          <1> 			dd err1
  1905 0000158C [92160000]          <1> 			dd err2
  1906 00001590 [E7160000]          <1> 			dd err3
  1907 00001594 [4B170000]          <1> 			dd err4
  1908 00001598 [9D170000]          <1> 			dd err5
  1909 0000159C [07180000]          <1> 			dd err6
  1910 000015A0 [6F180000]          <1> 			dd err7
  1911 000015A4 [B9180000]          <1> 			dd err8
  1912 000015A8 [16190000]          <1> 			dd err9
  1913 000015AC [6F190000]          <1> 			dd err10
  1914 000015B0 [BA190000]          <1> 			dd err11
  1915 000015B4 [0A1A0000]          <1> 			dd err12
  1916 000015B8 [631A0000]          <1> 			dd err13
  1917 000015BC [C61A0000]          <1> 			dd err14
  1918 000015C0 [021B0000]          <1> 			dd err15
  1919                              <1> errortypesend:
  1920 000015C4 [8E1B0000]          <1> 			dd unknownerror
  1921                              <1> 			
  1922 000015C8 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1923 000015D1 6279207A65726F3A0A  <1>
  1924 000015DA 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1925 000015E3 6C79206C696D2061C3- <1>
  1926 000015EC B778203D20E2889E20- <1>
  1927 000015F5 7768656E2061206973- <1>
  1928 000015FE 20616E79207265616C- <1>
  1929 00001607 206E756D6265722E20- <1>
  1930 00001610 486170707920456173- <1>
  1931 00001619 746572210A          <1>
  1932 0000161E 202020202020202020- <1> 		db "            x→0",10,0
  1933 00001627 20202078E28692300A- <1>
  1934 00001630 00                  <1>
  1935                              <1> 		
  1936 00001631 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1937 0000163A 65702F427265616B70- <1>
  1938 00001643 6F696E743A0A        <1>
  1939 00001649 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1940 00001652 696E74206661756C74- <1>
  1941 0000165B 2C20627265616B706F- <1>
  1942 00001664 696E7420747261702C- <1>
  1943 0000166D 206F722073696E676C- <1>
  1944 00001676 652D73746570207472- <1>
  1945 0000167F 617020776173207472- <1>
  1946 00001688 696767657265642E0A- <1>
  1947 00001691 00                  <1>
  1948                              <1> 		
  1949 00001692 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1950 0000169B 6C6520696E74657272- <1>
  1951 000016A4 7570743A0A          <1>
  1952 000016A9 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1953 000016B2 6520696E7465727275- <1>
  1954 000016BB 707420776173207472- <1>
  1955 000016C4 696767657265642074- <1>
  1956 000016CD 68617420636F756C64- <1>
  1957 000016D6 206E6F74206265206D- <1>
  1958 000016DF 61736B65642E0A00    <1>
  1959                              <1> 		
  1960 000016E7 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1961 000016F0 743A0A              <1>
  1962 000016F3 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1963 000016FC 727275707420697320- <1>
  1964 00001705 7573656420696E2070- <1>
  1965 0000170E 726F6772616D732074- <1>
  1966 00001717 6F2073686F77207468- <1>
  1967 00001720 6520737461636B2061- <1>
  1968 00001729 6E6420726567697374- <1>
  1969 00001732 65727320616E642063- <1>
  1970 0000173B 616E2062650A        <1>
  1971 00001741 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1972 0000174A 00                  <1>
  1973                              <1> 		
  1974 0000174B 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1975 00001754 0A                  <1>
  1976 00001755 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1977 0000175E 73736F722072616E20- <1>
  1978 00001767 696E746F20616E2049- <1>
  1979 00001770 4E544F20696E737472- <1>
  1980 00001779 756374696F6E207769- <1>
  1981 00001782 746820746865206F76- <1>
  1982 0000178B 6572666C6F7720666C- <1>
  1983 00001794 6167207365742E0A00  <1>
  1984                              <1> 		
  1985 0000179D 426F756E6473206368- <1> err5	db "Bounds check:",10
  1986 000017A6 65636B3A0A          <1>
  1987 000017AB 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1988 000017B4 73736F72207265626F- <1>
  1989 000017BD 756E6465642066726F- <1>
  1990 000017C6 6D206120424F554E44- <1>
  1991 000017CF 20696E737472756374- <1>
  1992 000017D8 696F6E2072756E206F- <1>
  1993 000017E1 6E20616E206F706572- <1>
  1994 000017EA 616E64207468617420- <1>
  1995 000017F3 776173206F75740A    <1>
  1996 000017FB 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1997 00001804 2E0A00              <1>
  1998                              <1> 		
  1999 00001807 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2000 00001810 70636F64653A0A      <1>
  2001 00001817 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2002 00001820 73736F722068617320- <1>
  2003 00001829 6E6F20696465612077- <1>
  2004 00001832 686174206974207761- <1>
  2005 0000183B 7320747279696E6720- <1>
  2006 00001844 746F20657865637574- <1>
  2007 0000184D 652E20446F6E277420- <1>
  2008 00001856 72756E205353453420- <1>
  2009 0000185F 636F64650A          <1>
  2010 00001864 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2011 0000186D 0A00                <1>
  2012                              <1> 		
  2013 0000186F 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2014 00001878 6F72206E6F74206176- <1>
  2015 00001881 61696C61626C653A0A  <1>
  2016 0000188A 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2017 00001893 206B6E6F7720746865- <1>
  2018 0000189C 7920646F6E2774206D- <1>
  2019 000018A5 616B652074686F7365- <1>
  2020 000018AE 20616E796D6F726521- <1>
  2021 000018B7 0A00                <1>
  2022                              <1> 		
  2023 000018B9 446F75626C65206661- <1> err8	db "Double fault:",10
  2024 000018C2 756C743A0A          <1>
  2025 000018C7 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2026 000018D0 74696F6E2068616E64- <1>
  2027 000018D9 6C657220636F756C64- <1>
  2028 000018E2 206E6F742068616E64- <1>
  2029 000018EB 6C6520746861742069- <1>
  2030 000018F4 7420636F756C64206E- <1>
  2031 000018FD 6F742068616E646C65- <1>
  2032 00001906 20616E206578636570- <1>
  2033 0000190F 74696F6E2E0A00      <1>
  2034                              <1> 		
  2035 00001916 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2036 0000191F 6F72207365676D656E- <1>
  2037 00001928 74206F76657272756E- <1>
  2038 00001931 3A0A00              <1>
  2039 00001934 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2040 0000193D 722068617070656E73- <1>
  2041 00001946 20696E206D6F646572- <1>
  2042 0000194F 6E20636F6D70757465- <1>
  2043 00001958 72732C20616E64206E- <1>
  2044 00001961 657665722073686F75- <1>
  2045 0000196A 6C642E0A00          <1>
  2046                              <1> 
  2047 0000196F 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2048 00001978 53533A0A            <1>
  2049 0000197C 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2050 00001985 686174207761732073- <1>
  2051 0000198E 776974636865642074- <1>
  2052 00001997 6F20697320696E7661- <1>
  2053 000019A0 6C69642E204E6F7468- <1>
  2054 000019A9 696E672066756E6E79- <1>
  2055 000019B2 20686572652E0A00    <1>
  2056                              <1> 		
  2057 000019BA 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2058 000019C3 6F742070726573656E- <1>
  2059 000019CC 743A0A              <1>
  2060 000019CF 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2061 000019D8 6E7420626974206F66- <1>
  2062 000019E1 20746865207365676D- <1>
  2063 000019EA 656E74206465736372- <1>
  2064 000019F3 6970746F7220697320- <1>
  2065 000019FC 73657420746F207A65- <1>
  2066 00001A05 726F2E0A00          <1>
  2067                              <1> 		
  2068 00001A0A 537461636B20657863- <1> err12	db "Stack exception:",10
  2069 00001A13 657074696F6E3A0A    <1>
  2070 00001A1B 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2071 00001A24 7363726970746F7220- <1>
  2072 00001A2D 697320696E76616C69- <1>
  2073 00001A36 64206F72206E6F7420- <1>
  2074 00001A3F 70726573656E74206F- <1>
  2075 00001A48 7220697473206C696D- <1>
  2076 00001A51 697420697320746F6F- <1>
  2077 00001A5A 20736D616C6C2E0A00  <1>
  2078                              <1> 		
  2079 00001A63 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2080 00001A6C 726F74656374696F6E- <1>
  2081 00001A75 2076696F6C6174696F- <1>
  2082 00001A7E 6E3A0A              <1>
  2083 00001A81 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2084 00001A8A 746564207468652063- <1>
  2085 00001A93 6F6D70757465722E20- <1>
  2086 00001A9C 537465702061776179- <1>
  2087 00001AA5 20736C6F776C792E20- <1>
  2088 00001AAE 546865204642492069- <1>
  2089 00001AB7 73206F6E2069747320- <1>
  2090 00001AC0 7761792E0A00        <1>
  2091                              <1> 		
  2092 00001AC6 50616765206661756C- <1> err14	db "Page fault:",10
  2093 00001ACF 743A0A              <1>
  2094 00001AD2 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2095 00001ADB 746861742077617320- <1>
  2096 00001AE4 726571756573746564- <1>
  2097 00001AED 20776173206E6F7420- <1>
  2098 00001AF6 617661696C61626C65- <1>
  2099 00001AFF 2E0A00              <1>
  2100                              <1> 		
  2101 00001B02 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2102 00001B0B 666F7220506C616E20- <1>
  2103 00001B14 523A0A              <1>
  2104 00001B17 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2105 00001B20 727275707420697320- <1>
  2106 00001B29 726573657276656420- <1>
  2107 00001B32 666F72207573616765- <1>
  2108 00001B3B 206F6E6C7920627920- <1>
  2109 00001B44 746865206D696C6974- <1>
  2110 00001B4D 617279207768656E20- <1>
  2111 00001B56 6974206973206E6563- <1>
  2112 00001B5F 6573736172790A      <1>
  2113 00001B66 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2114 00001B6F 746520612066756C6C- <1>
  2115 00001B78 2D7363616C6520636F- <1>
  2116 00001B81 7570206427C3A97461- <1>
  2117 00001B8A 742E0A00            <1>
  2118                              <1> 		
  2119 00001B8E 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2120 00001B97 68656C6C206A757374- <1>
  2121 00001BA0 2068617070656E6564- <1>
  2122 00001BA9 3F2049732065766572- <1>
  2123 00001BB2 796F6E65206F6B6179- <1>
  2124 00001BBB 3F2048617264206472- <1>
  2125 00001BC4 6976653F2056696465- <1>
  2126 00001BCD 6F20636172643F0A    <1>
  2127 00001BD5 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2128 00001BDE 726520796F75207468- <1>
  2129 00001BE7 6572653F0A00        <1>
  2130                              <1> %else
  2131                              <1> unhand:	
  2132                              <1> 	%assign i 0
  2133                              <1> 	%rep 32
  2134                              <1> 	mov byte [intprob], i
  2135                              <1> 	jmp unhand2
  2136                              <1> 	%assign i i+1
  2137                              <1> 	%endrep
  2138                              <1> unhand2:
  2139                              <1> 	cmp byte [intprob], 3
  2140                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2141                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2142                              <1> 					;CD is the machine instruction for interrupt
  2143                              <1> 					;DEAD shows that the program died because of the int
  2144                              <1> 	mov bl, [intprob]
  2145                              <1> 	jmp exitprog
  2146                              <1> intprob db 0
  2147                              <1> %endif
  2148                                      %include "source/ints.asm"
  2149                              <1> int30h:	;for great justice
  2150 00001BED 80FC00              <1> 	cmp ah, 0
  2151 00001BF0 0F849A000000        <1> 	je near exitprog   ;kills app
  2152 00001BF6 80FC01              <1> 	cmp ah, 1
  2153 00001BF9 0F8419010000        <1> 	je near prntstr  ;print string
  2154 00001BFF 80FC02              <1> 	cmp ah, 2
  2155 00001C02 0F84BD010000        <1> 	je near readstr	;read string
  2156 00001C08 80FC03              <1> 	cmp ah, 3
  2157 00001C0B 0F84DD010000        <1> 	je near clearscrn	;clear screen
  2158 00001C11 80FC04              <1> 	cmp ah, 4
  2159 00001C14 0F8452020000        <1> 	je near prntreadstr	;read and print string
  2160 00001C1A 80FC05              <1> 	cmp ah, 5
  2161 00001C1D 0F8417070000        <1> 	je near readchar	;get char
  2162 00001C23 80FC06              <1> 	cmp ah, 6
  2163 00001C26 0F847E070000        <1> 	je near prntchar	;print char
  2164 00001C2C 80FC07              <1> 	cmp ah, 7
  2165 00001C2F 0F8491090000        <1> 	je near openfile	;read file
  2166                              <1> ;	cmp ah, 8
  2167                              <1> ;	je near closefile	;close file
  2168 00001C35 80FC09              <1> 	cmp ah, 9
  2169 00001C38 0F8492090000        <1> 	je near num2str	;convert number to string
  2170 00001C3E 80FC0A              <1> 	cmp ah, 10
  2171 00001C41 0F84A1090000        <1> 	je near str2num	;convert string to number
  2172                              <1> %ifdef threads.included
  2173 00001C47 80FC0B              <1> 	cmp ah, 11
  2174 00001C4A 0F84A4090000        <1> 	je near forkthread	;create thread
  2175                              <1> %endif
  2176 00001C50 80FC0C              <1> 	cmp ah, 12
  2177 00001C53 0F84720A0000        <1> 	je near gettime	;get time
  2178 00001C59 80FC0D              <1> 	cmp ah, 13
  2179 00001C5C 0F847E0A0000        <1> 	je near settime	;set time
  2180 00001C62 80FC0E              <1> 	cmp ah, 14
  2181 00001C65 0F84850A0000        <1> 	je near runcmd	;run program
  2182 00001C6B 80FC0F              <1> 	cmp ah, 15
  2183 00001C6E 0F84910A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2184 00001C74 80FC10              <1> 	cmp ah, 16
  2185 00001C77 0F84B30A0000        <1> 	je near hooksig	;hook code to a signal
  2186                              <1> %ifdef gui.included
  2187 00001C7D 80FC11              <1> 	cmp ah, 17
  2188 00001C80 0F84BA0A0000        <1> 	je near guiint	;GUI operations
  2189                              <1> %endif
  2190                              <1> %ifdef sound.included
  2191 00001C86 80FC12              <1> 	cmp ah, 18
  2192 00001C89 0F84FF0B0000        <1> 	je near soundint	;sound operations
  2193                              <1> %endif
  2194                              <1> %ifdef network.included
  2195                              <1> 	cmp ah, 19
  2196                              <1> 	je near netint	;networking operations
  2197                              <1> %endif
  2198 00001C8F CF                  <1> 	iret
  2199                              <1> 
  2200                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2201                              <2> exitprog:
  2202 00001C90 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2203 00001C94 8ED8                <2> 	mov ds, ax
  2204 00001C96 8EC0                <2> 	mov es, ax
  2205 00001C98 8EE0                <2> 	mov fs, ax
  2206 00001C9A 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2207 00001C9E 8EE8                <2> 	mov gs, ax
  2208 00001CA0 C705[9F680000]0000- <2> 	mov dword [currentthread], 0
  2209 00001CA8 0000                <2>
  2210 00001CAA C705[9A680000]0400- <2> 	mov dword [lastthread], 4
  2211 00001CB2 0000                <2>
  2212 00001CB4 C605[9E680000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2213 00001CBB 8B25[08B00300]      <2> 	mov esp, [previousstack] ;and this
  2214 00001CC1 81FB00000000        <2> 	cmp ebx, 0
  2215 00001CC7 0F8501000000        <2> 	jne near .error
  2216 00001CCD C3                  <2> 	ret
  2217                              <2> .error:
  2218 00001CCE 89D9                <2> 	mov ecx, ebx
  2219 00001CD0 B006                <2> 	mov al, 6
  2220 00001CD2 A2[96310000]        <2> 	mov [firsthexshown], al
  2221 00001CD7 51                  <2> 	push ecx
  2222 00001CD8 BE[F31C0000]        <2> 	mov esi, .msg1
  2223 00001CDD E855000000          <2> 	call printhighlight
  2224 00001CE2 59                  <2> 	pop ecx
  2225 00001CE3 E8C3140000          <2> 	call showhex
  2226 00001CE8 BE[081D0000]        <2> 	mov esi, .msg2
  2227 00001CED E845000000          <2> 	call printhighlight
  2228 00001CF2 C3                  <2> 	ret
  2229                              <2> 	
  2230 00001CF3 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2231 00001CFC 7461747573206F6620- <2>
  2232 00001D05 307800              <2>
  2233 00001D08 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2234 00001D11 726E65642E0A00      <2>
  2235                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2236                              <2> prntstr:
  2237 00001D18 30E4                <2> xor ah, ah
  2238 00001D1A E830000000          <2> call printint
  2239 00001D1F E98AE5FFFF          <2> jmp timerinterrupt
  2240                              <2> 
  2241                              <2> 	printquiet:
  2242 00001D24 6631C0              <2> 		xor ax, ax
  2243 00001D27 66A3[C31D0000]      <2> 		mov [endkeyprint], ax
  2244 00001D2D 66BB0700            <2> 		mov bx, 7
  2245 00001D31 E832000000          <2> 		call printint.b
  2246 00001D36 C3                  <2> 		ret
  2247                              <2> 
  2248                              <2> 	printhighlight:
  2249 00001D37 6631C0              <2> 		xor ax, ax
  2250 00001D3A 66BBF000            <2> 		mov bx, 0xF0
  2251 00001D3E E90C000000          <2> 		jmp printint
  2252                              <2> 
  2253                              <2> 	printline:
  2254 00001D43 BE[47860000]        <2> 		mov esi, line
  2255                              <2>     print:
  2256 00001D48 6631C0              <2> 		xor ax, ax
  2257 00001D4B 66BB0700            <2> 		mov bx, 7
  2258                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2259 00001D4F 56                  <2> 		push esi
  2260 00001D50 66A3[C31D0000]      <2> 		mov [endkeyprint], ax
  2261 00001D56 E80D000000          <2> 		call .b
  2262 00001D5B 89F1                <2> 		mov ecx, esi
  2263 00001D5D 5F                  <2> 		pop edi
  2264 00001D5E 29F9                <2> 		sub ecx, edi
  2265 00001D60 51                  <2> 		push ecx
  2266 00001D61 E82D0B0000          <2> 		call termcopy
  2267 00001D66 59                  <2> 		pop ecx
  2268 00001D67 C3                  <2> 		ret
  2269                              <2> 	.b:	
  2270 00001D68 53                  <2> 		push ebx
  2271 00001D69 31C0                <2> 		xor eax, eax
  2272 00001D6B 8A06                <2> 		mov al, [esi]
  2273 00001D6D 3CFF                <2> 		cmp al, 0xFF
  2274 00001D6F 7204                <2> 		jb .goodutf
  2275 00001D71 5B                  <2> 		pop ebx
  2276 00001D72 46                  <2> 		inc esi
  2277 00001D73 EBF3                <2> 		jmp .b
  2278                              <2> 	.goodutf:
  2279 00001D75 3CC0                <2> 		cmp al, 0xC0
  2280 00001D77 7231                <2> 		jb .doneutf
  2281 00001D79 3CE0                <2> 		cmp al, 0xE0
  2282 00001D7B 721A                <2> 		jb .two
  2283 00001D7D 46                  <2> 		inc esi
  2284 00001D7E 8A2E                <2> 		mov ch, [esi]
  2285 00001D80 46                  <2> 		inc esi
  2286 00001D81 8A0E                <2> 		mov cl, [esi]
  2287 00001D83 C0E004              <2> 		shl al, 4
  2288 00001D86 C0E102              <2> 		shl cl, 2
  2289 00001D89 66C1E902            <2> 		shr cx, 2
  2290 00001D8D 08C5                <2> 		or ch, al
  2291 00001D8F 6689C8              <2> 		mov ax, cx
  2292 00001D92 E913000000          <2> 		jmp .doneutf
  2293                              <2> 	.two:
  2294 00001D97 8A2E                <2> 		mov ch, [esi]
  2295 00001D99 46                  <2> 		inc esi
  2296 00001D9A 8A0E                <2> 		mov cl, [esi]
  2297 00001D9C 66C1E102            <2> 		shl cx, 2
  2298 00001DA0 C0ED02              <2> 		shr ch, 2
  2299 00001DA3 66C1E902            <2> 		shr cx, 2
  2300 00001DA7 6689C8              <2> 		mov ax, cx
  2301                              <2> 	.doneutf:
  2302 00001DAA 5B                  <2> 		pop ebx
  2303 00001DAB 663B05[C31D0000]    <2> 		cmp ax, [endkeyprint]
  2304 00001DB2 740E                <2> 		je .done
  2305 00001DB4 663DFFFE            <2> 		cmp ax, 0xFEFF
  2306 00001DB8 7405                <2> 		je .noprint
  2307 00001DBA E818060000          <2> 		call prcharq
  2308                              <2> 	.noprint:
  2309 00001DBF 46                  <2> 		inc esi
  2310 00001DC0 EBA6                <2> 		jmp .b
  2311                              <2> 	.done:
  2312 00001DC2 C3                  <2> 		ret
  2313                              <2> 
  2314 00001DC3 0000                <2> endkeyprint dw 0
  2315                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2316                              <2> readstr:
  2317 00001DC5 E805000000          <2> call readint
  2318 00001DCA E9DFE4FFFF          <2> jmp timerinterrupt
  2319                              <2> 
  2320                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2321 00001DCF 89C3                <2> 		mov ebx, eax
  2322                              <2> 	.b:
  2323 00001DD1 53                  <2> 		push ebx
  2324 00001DD2 57                  <2> 		push edi
  2325 00001DD3 56                  <2> 		push esi
  2326 00001DD4 30C0                <2> 		xor al, al
  2327 00001DD6 E86B050000          <2> 		call rdcharint
  2328 00001DDB 5E                  <2> 		pop esi
  2329 00001DDC 8806                <2> 		mov [esi], al
  2330 00001DDE 46                  <2> 		inc esi
  2331 00001DDF 5F                  <2> 		pop edi
  2332 00001DE0 5B                  <2> 		pop ebx
  2333 00001DE1 39FE                <2> 		cmp esi, edi
  2334 00001DE3 7304                <2> 		jae .done
  2335 00001DE5 38D8                <2> 		cmp al, bl
  2336 00001DE7 75E8                <2> 		jne .b
  2337                              <2> 	.done:
  2338 00001DE9 4E                  <2> 		dec esi
  2339 00001DEA C60600              <2> 		mov byte [esi], 0
  2340 00001DED C3                  <2> 		ret
  2341                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2342                              <2> clearscrn:
  2343 00001DEE E805000000          <2> call clear
  2344 00001DF3 E9B6E4FFFF          <2> jmp timerinterrupt
  2345                              <2> %ifdef io.serial
  2346                              <2> clear:
  2347                              <2> 	mov esi, .str
  2348                              <2> 	call print
  2349                              <2> 	ret
  2350                              <2> .str db 27,"[2J",27,"[f",0
  2351                              <2> %else
  2352                              <2> clear:
  2353 00001DF8 668B0D[C0250000]    <2> 		mov cx, [charxy]
  2354 00001DFF BF[9CCD0300]        <2> 		mov edi, videobuf
  2355 00001E04 31C0                <2> 		xor eax, eax
  2356 00001E06 A3[B6250000]        <2> 		mov [linebeginpos], eax
  2357 00001E0B A3[BA250000]        <2> 		mov [videobufpos], eax
  2358 00001E10 6631D2              <2> 		xor dx, dx
  2359 00001E13 66A3[BE250000]      <2> 		mov [charpos], ax
  2360 00001E19 66B80700            <2> 		mov ax, 7
  2361 00001E1D C1E010              <2> 		shl eax, 16
  2362                              <2> 	clearb:
  2363 00001E20 8907                <2> 		mov [edi], eax
  2364 00001E22 81C704000000        <2> 		add edi, 4
  2365 00001E28 FEC9                <2> 		dec cl
  2366 00001E2A 80F900              <2> 		cmp cl, 0
  2367 00001E2D 75F1                <2> 		jne clearb
  2368 00001E2F 8A0D[C0250000]      <2> 		mov cl, [charxy]
  2369 00001E35 FECD                <2> 		dec ch
  2370 00001E37 80FD00              <2> 		cmp ch, 0
  2371 00001E3A 75E4                <2> 		jne clearb
  2372                              <2> 	cleardouble:
  2373 00001E3C BF[E4A20400]        <2> 		mov edi, videobuf2
  2374 00001E41 668B0D[C0250000]    <2> 		mov cx, [charxy]
  2375 00001E48 31C0                <2> 		xor eax, eax
  2376                              <2> 	clearc:
  2377 00001E4A 8907                <2> 		mov [edi], eax
  2378 00001E4C 81C704000000        <2> 		add edi, 4
  2379 00001E52 FEC9                <2> 		dec cl
  2380 00001E54 80F900              <2> 		cmp cl, 0
  2381 00001E57 75F1                <2> 		jne clearc
  2382 00001E59 8A0D[C0250000]      <2> 		mov cl, [charxy]
  2383 00001E5F FECD                <2> 		dec ch
  2384 00001E61 80FD00              <2> 		cmp ch, 0
  2385 00001E64 75E4                <2> 		jne clearc
  2386 00001E66 E8280A0000          <2> 		call termcopy
  2387 00001E6B C3                  <2> 		ret
  2388                              <2> %endif
  2389                              <2> 		
  2390                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2391                              <2> prntreadstr:
  2392 00001E6C E80B000000          <2> call rdprint
  2393 00001E71 E938E4FFFF          <2> jmp timerinterrupt
  2394                              <2> 
  2395                              <2> readline:
  2396 00001E76 B00A                <2>   mov al, 10
  2397 00001E78 66BB0700            <2>   mov bx, 7
  2398                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2399 00001E7C E80F000000          <2> 	call rdprintdos
  2400 00001E81 50                  <2> 	push eax
  2401 00001E82 A0[25230000]        <2> 	mov al, [endkeyrdpr]
  2402 00001E87 30E4                <2> 	xor ah, ah
  2403 00001E89 E832050000          <2> 	call prcharint
  2404 00001E8E 58                  <2> 	pop eax
  2405 00001E8F C3                  <2> 	ret
  2406                              <2> 
  2407                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2408 00001E90 8935[2F230000]      <2> 		mov [buftxtloc], esi
  2409 00001E96 A2[25230000]        <2> 		mov [endkeyrdpr], al
  2410 00001E9B 66891D[27230000]    <2> 		mov [modkeyrdpr], bx
  2411 00001EA2 8935[29230000]      <2> 		mov [firstesirdpr], esi
  2412 00001EA8 893D[33230000]      <2> 		mov [endbufferrdpr], edi
  2413 00001EAE 8B3D[38780500]      <2> 		mov edi, [commandsentered]
  2414 00001EB4 893D[34780500]      <2> 		mov [commandlistentries], edi
  2415                              <2> 	rdprintb:
  2416 00001EBA 56                  <2> 		push esi
  2417 00001EBB B001                <2> 		mov al, 1
  2418 00001EBD E884040000          <2> 		call rdcharint
  2419 00001EC2 8A25[A6230000]      <2> 		mov ah, [lastkey + 2]
  2420 00001EC8 88E1                <2> 		mov cl, ah
  2421 00001ECA 5E                  <2> 		pop esi
  2422                              <2> %ifdef io.serial
  2423                              <2> 		cmp ah, 0x41
  2424                              <2> 		je near rdprup
  2425                              <2> 		cmp ah, 0x42
  2426                              <2> 		je near rdprdown
  2427                              <2> 		cmp ah, 0x43
  2428                              <2> 		je near rdprright
  2429                              <2> 		cmp ah, 0x44
  2430                              <2> 		je near rdprleft
  2431                              <2> 		cmp ah, 0x31
  2432                              <2> 		je near rdprhome
  2433                              <2> 		cmp ah, 0x48
  2434                              <2> 		je near rdprhome
  2435                              <2> 		cmp ah, 0x46
  2436                              <2> 		je near rdprend
  2437                              <2> 		cmp ah, 0x33
  2438                              <2> 		je near rdprdel
  2439                              <2> 		cmp ah, 0x34
  2440                              <2> 		je near rdprend
  2441                              <2> %else
  2442 00001ECB 803D[1E5D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2443 00001ED2 753F                <2> 		jne notspecialrdprnt
  2444 00001ED4 80FC53              <2> 		cmp ah, 0x53
  2445 00001ED7 0F84B1030000        <2> 		je near rdprdel
  2446 00001EDD 80FC47              <2> 		cmp ah, 0x47
  2447 00001EE0 0F847E010000        <2> 		je near rdprhome
  2448 00001EE6 80FC4F              <2> 		cmp ah, 0x4F
  2449 00001EE9 0F8494010000        <2> 		je near rdprend
  2450 00001EEF 80FC50              <2> 		cmp ah, 0x50
  2451 00001EF2 0F8424020000        <2> 		je near rdprdown
  2452 00001EF8 80FC4D              <2> 		cmp ah, 0x4D
  2453 00001EFB 0F84C1010000        <2> 		je near rdprright
  2454 00001F01 80FC4B              <2> 		cmp ah, 0x4B
  2455 00001F04 0F8496010000        <2> 		je near rdprleft
  2456 00001F0A 80FC48              <2> 		cmp ah, 0x48
  2457 00001F0D 0F844C020000        <2> 		je near rdprup
  2458                              <2> 	notspecialrdprnt:
  2459                              <2> %endif
  2460 00001F13 66A1[A4230000]      <2> 		mov ax, [lastkey]
  2461 00001F19 663D0800            <2> 		cmp ax, 8
  2462 00001F1D 0F84A0030000        <2> 		je near rdprbscheck
  2463 00001F23 663D0000            <2> 		cmp ax, 0
  2464 00001F27 7491                <2> 		je rdprintb
  2465 00001F29 80F900              <2> 		cmp cl, 0
  2466 00001F2C 748C                <2> 		je rdprintb
  2467 00001F2E 663D8000            <2> 		cmp ax, 0x80
  2468 00001F32 7257                <2> 		jb .normal
  2469 00001F34 663D0008            <2> 		cmp ax, 0x800
  2470 00001F38 7321                <2> 		jae .three
  2471 00001F3A 46                  <2> 		inc esi
  2472 00001F3B 3B35[33230000]      <2> 		cmp esi, [endbufferrdpr]
  2473 00001F41 0F83DA000000        <2> 		jae near donerdprinc
  2474 00001F47 66C1E002            <2> 		shl ax, 2
  2475 00001F4B C0E802              <2> 		shr al, 2
  2476 00001F4E 0C80                <2> 		or al, 10000000b
  2477 00001F50 80CCC0              <2> 		or ah, 11000000b
  2478 00001F53 8866FF              <2> 		mov [esi - 1], ah
  2479 00001F56 E930000000          <2> 		jmp .normal
  2480                              <2> .three:	
  2481 00001F5B 81C602000000        <2> 		add esi, 2
  2482 00001F61 3B35[33230000]      <2> 		cmp esi, [endbufferrdpr]
  2483 00001F67 0F83B4000000        <2> 		jae near donerdprinc
  2484 00001F6D 88E1                <2> 		mov cl, ah
  2485 00001F6F C0E904              <2> 		shr cl, 4
  2486 00001F72 80C9E0              <2> 		or cl, 11100000b
  2487 00001F75 884EFE              <2> 		mov [esi - 2], cl
  2488 00001F78 66C1E004            <2> 		shl ax, 4
  2489 00001F7C 66C1E802            <2> 		shr ax, 2
  2490 00001F80 80CC80              <2> 		or ah, 10000000b
  2491 00001F83 C0E802              <2> 		shr al, 2
  2492 00001F86 0C80                <2> 		or al, 10000000b
  2493 00001F88 8866FF              <2> 		mov [esi - 1], ah
  2494                              <2> .normal:
  2495 00001F8B 8806                <2> 		mov [esi], al
  2496 00001F8D 46                  <2> 		inc esi
  2497 00001F8E 66A1[A4230000]      <2> 		mov ax, [lastkey]
  2498                              <2> 	bscheckequal:
  2499 00001F94 668B1D[27230000]    <2> 		mov bx, [modkeyrdpr]
  2500 00001F9B 803D[2E230000]00    <2> 		cmp byte [txtmask], 0
  2501 00001FA2 7407                <2> 		je nomasktxt
  2502 00001FA4 30E4                <2> 		xor ah, ah
  2503 00001FA6 A0[2E230000]        <2> 		mov al, [txtmask]
  2504                              <2> 	nomasktxt:
  2505 00001FAB 56                  <2> 		push esi
  2506 00001FAC 66A3[23230000]      <2> 		mov [axcache], ax
  2507 00001FB2 668B1D[25230000]    <2> 		mov bx, [endkeyrdpr]
  2508 00001FB9 6639D8              <2> 		cmp ax, bx
  2509 00001FBC 7432                <2> 		je nobackprintbuftxt2
  2510 00001FBE E8FD030000          <2> 		call prcharint
  2511 00001FC3 BE[88C20300]        <2> 		mov esi, buftxt2
  2512 00001FC8 E857FDFFFF          <2> 		call printquiet
  2513 00001FCD 66B82000            <2> 		mov ax, " "
  2514 00001FD1 E801040000          <2> 		call prcharq
  2515 00001FD6 66B80800            <2> 		mov ax, 8
  2516 00001FDA 81FE[88C20300]      <2> 		cmp esi, buftxt2
  2517 00001FE0 740E                <2> 		je nobackprintbuftxt2
  2518                              <2> 	backprintbuftxt2:
  2519 00001FE2 E8F0030000          <2> 		call prcharq
  2520 00001FE7 4E                  <2> 		dec esi
  2521 00001FE8 81FE[88C20300]      <2> 		cmp esi, buftxt2
  2522 00001FEE 77F2                <2> 		ja backprintbuftxt2
  2523                              <2> 	nobackprintbuftxt2:
  2524 00001FF0 663D0A00            <2> 		cmp ax, 10
  2525 00001FF4 7405                <2> 		je nonobackprint
  2526 00001FF6 E8C5030000          <2> 		call prcharint
  2527                              <2> 	nonobackprint:
  2528 00001FFB 5E                  <2> 		pop esi
  2529 00001FFC 3B35[33230000]      <2> 		cmp esi, [endbufferrdpr]
  2530 00002002 0F8319000000        <2> 		jae near donerdprinc
  2531 00002008 66A1[23230000]      <2> 		mov ax, [axcache]
  2532 0000200E 8A25[25230000]      <2> 		mov ah, [endkeyrdpr]
  2533 00002014 38E0                <2> 		cmp al, ah
  2534 00002016 0F859EFEFFFF        <2> 		jne rdprintb
  2535 0000201C E901000000          <2> 		jmp donerdprint
  2536                              <2> 	donerdprinc:
  2537 00002021 46                  <2> 		inc esi
  2538                              <2> 	donerdprint:
  2539 00002022 4E                  <2> 		dec esi
  2540 00002023 BF[88C20300]        <2> 		mov edi, buftxt2
  2541                              <2> 	copylaterstuff:
  2542 00002028 8A07                <2> 		mov al, [edi]
  2543 0000202A 3C00                <2> 		cmp al, 0
  2544 0000202C 7406                <2> 		je nocopylaterstuff
  2545 0000202E 8806                <2> 		mov [esi], al
  2546 00002030 47                  <2> 		inc edi
  2547 00002031 46                  <2> 		inc esi
  2548 00002032 EBF4                <2> 		jmp copylaterstuff
  2549                              <2> 	nocopylaterstuff:
  2550 00002034 C60600              <2> 		mov byte [esi], 0
  2551 00002037 E80B000000          <2> 		call clearbuftxt2
  2552 0000203C 89F1                <2> 		mov ecx, esi
  2553 0000203E 8B3D[29230000]      <2> 		mov edi, [firstesirdpr]
  2554 00002044 29F9                <2> 		sub ecx, edi
  2555 00002046 C3                  <2> 		ret
  2556                              <2> 	
  2557                              <2> 	clearbuftxt2:
  2558 00002047 30C0                <2> 		xor al, al
  2559 00002049 BF[88C20300]        <2> 		mov edi, buftxt2
  2560                              <2> 	clearbuftxt2lp:
  2561 0000204E 8807                <2> 		mov [edi], al
  2562 00002050 47                  <2> 		inc edi
  2563 00002051 81FF[88C60300]      <2> 		cmp edi, buftxt
  2564 00002057 75F5                <2> 		jne clearbuftxt2lp
  2565 00002059 C3                  <2> 		ret
  2566                              <2> 	
  2567                              <2> 	rdprintb2:
  2568 0000205A E834080000          <2> 		call termcopy
  2569 0000205F E956FEFFFF          <2> 		jmp rdprintb
  2570                              <2> 	
  2571                              <2> 	rdprhome:
  2572 00002064 3B35[2F230000]      <2> 		cmp esi, [buftxtloc]
  2573 0000206A 0F84EAFFFFFF        <2> 		je near rdprintb2
  2574 00002070 BF[88C20300]        <2> 		mov edi, buftxt2
  2575 00002075 8A07                <2> 		mov al, [edi]
  2576 00002077 E879020000          <2> 		call shiftbuftxt2
  2577 0000207C E856030000          <2> 		call prcharq
  2578 00002081 EBE1                <2> 		jmp rdprhome
  2579                              <2> 		
  2580                              <2> 	rdprend:
  2581 00002083 BF[88C20300]        <2> 		mov edi, buftxt2
  2582 00002088 8A07                <2> 		mov al, [edi]
  2583 0000208A 3C00                <2> 		cmp al, 0
  2584 0000208C 0F84C8FFFFFF        <2> 		je near rdprintb2
  2585 00002092 8806                <2> 		mov [esi], al
  2586 00002094 E849000000          <2> 		call shiftbuftxt2lft
  2587 00002099 E839030000          <2> 		call prcharq
  2588 0000209E EBE3                <2> 		jmp rdprend
  2589                              <2> 	
  2590                              <2> 	rdprleft:
  2591 000020A0 3B35[2F230000]      <2> 		cmp esi, [buftxtloc]
  2592 000020A6 0F840EFEFFFF        <2> 		je near rdprintb
  2593 000020AC BF[88C20300]        <2> 		mov edi, buftxt2
  2594 000020B1 8A07                <2> 		mov al, [edi]
  2595 000020B3 E83D020000          <2> 		call shiftbuftxt2
  2596 000020B8 E803030000          <2> 		call prcharint
  2597 000020BD E9F8FDFFFF          <2> 		jmp rdprintb
  2598                              <2> 		
  2599                              <2> 	rdprright:
  2600 000020C2 BF[88C20300]        <2> 		mov edi, buftxt2
  2601 000020C7 8A07                <2> 		mov al, [edi]
  2602 000020C9 3C00                <2> 		cmp al, 0
  2603 000020CB 0F84E9FDFFFF        <2> 		je near rdprintb
  2604 000020D1 8806                <2> 		mov [esi], al
  2605 000020D3 E80A000000          <2> 		call shiftbuftxt2lft
  2606 000020D8 E8E3020000          <2> 		call prcharint
  2607 000020DD E9D8FDFFFF          <2> 		jmp rdprintb
  2608                              <2> 		
  2609                              <2> 	shiftbuftxt2lft:
  2610 000020E2 55                  <2> 		push ebp
  2611 000020E3 89FD                <2> 		mov ebp, edi
  2612                              <2> 	.lp:
  2613 000020E5 3C00                <2> 		cmp al, 0
  2614 000020E7 7408                <2> 		je noshiftbuftxt2lft
  2615 000020E9 47                  <2> 		inc edi
  2616 000020EA 8A07                <2> 		mov al, [edi]
  2617 000020EC 8847FF              <2> 		mov [edi - 1], al
  2618 000020EF EBF4                <2> 		jmp .lp
  2619                              <2> 	noshiftbuftxt2lft:
  2620 000020F1 8A4500              <2> 		mov al, [ebp]
  2621 000020F4 5D                  <2> 		pop ebp
  2622 000020F5 3CC0                <2> 		cmp al, 0xC0
  2623 000020F7 7304                <2> 		jae .nofix
  2624 000020F9 3C80                <2> 		cmp al, 0x80
  2625 000020FB 73E5                <2> 		jae shiftbuftxt2lft
  2626                              <2> 	.nofix:
  2627 000020FD 8A06                <2> 		mov al, [esi]
  2628 000020FF 30E4                <2> 		xor ah, ah
  2629 00002101 46                  <2> 		inc esi
  2630 00002102 668B1D[27230000]    <2> 		mov bx, [modkeyrdpr]
  2631 00002109 C3                  <2> 		ret
  2632                              <2> 		
  2633                              <2> 	rdprdownbck:
  2634 0000210A FECC                <2> 		dec ah
  2635 0000210C 8825[2D230000]      <2> 		mov [commandedit], ah
  2636 00002112 E88D000000          <2> 		call rdprbckspc
  2637 00002117 E99EFDFFFF          <2> 		jmp rdprintb
  2638                              <2> 	
  2639                              <2> 	rdprdown:
  2640 0000211C 8A25[2D230000]      <2> 		mov ah, [commandedit]
  2641 00002122 80FC01              <2> 		cmp ah, 1
  2642 00002125 0F868FFDFFFF        <2> 		jbe near rdprintb
  2643 0000212B 8B3D[38780500]      <2> 		mov edi, [commandsentered]
  2644 00002131 3B3D[34780500]      <2> 		cmp edi, [commandlistentries]
  2645 00002137 7618                <2> 		jbe .nofix
  2646 00002139 8105[34780500]0200- <2> 		add dword [commandlistentries], 2
  2647 00002141 0000                <2>
  2648 00002143 3B3D[34780500]      <2> 		cmp edi, [commandlistentries]
  2649 00002149 7706                <2> 		ja .nofix
  2650 0000214B 893D[34780500]      <2> 		mov [commandlistentries], edi
  2651                              <2> 	.nofix:
  2652 00002151 80FC02              <2> 		cmp ah, 2
  2653 00002154 74B4                <2> 		je rdprdownbck
  2654 00002156 80EC02              <2> 		sub ah, 2
  2655 00002159 8825[2D230000]      <2> 		mov [commandedit], ah
  2656                              <2> 		
  2657                              <2> 	rdprup:
  2658 0000215F 3805[2D230000]      <2> 		cmp [commandedit], al
  2659 00002165 0F844FFDFFFF        <2> 		je near rdprintb
  2660 0000216B 813D[34780500]0000- <2> 		cmp dword [commandlistentries], 0
  2661 00002173 0000                <2>
  2662 00002175 0F843FFDFFFF        <2> 		je near rdprintb
  2663 0000217B FF0D[34780500]      <2> 		dec dword [commandlistentries]
  2664                              <2> 	.lp:
  2665 00002181 BF[88C20300]        <2> 		mov edi, buftxt2
  2666 00002186 8A07                <2> 		mov al, [edi]
  2667 00002188 3C00                <2> 		cmp al, 0
  2668 0000218A 740E                <2> 		je .start
  2669 0000218C 8806                <2> 		mov [esi], al
  2670 0000218E E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2671 00002193 E83F020000          <2> 		call prcharq
  2672 00002198 EBE7                <2> 		jmp .lp
  2673                              <2> 	.start:
  2674 0000219A E805000000          <2> 		call rdprbckspc
  2675 0000219F E948000000          <2> 		jmp getcurrentcommandstr
  2676                              <2> 	rdprbckspc:
  2677 000021A4 3B35[2F230000]      <2> 		cmp esi, [buftxtloc]
  2678 000021AA 7432                <2> 		je nordprupbck
  2679                              <2> 	rdprupbckspclp:
  2680 000021AC 66B80800            <2> 		mov ax, 8
  2681 000021B0 668B1D[27230000]    <2> 		mov bx, [modkeyrdpr]
  2682 000021B7 E81B020000          <2> 		call prcharq
  2683 000021BC 66B82000            <2> 		mov ax, ' '
  2684 000021C0 E812020000          <2> 		call prcharq
  2685 000021C5 66B80800            <2> 		mov ax, 8
  2686 000021C9 E809020000          <2> 		call prcharq
  2687 000021CE 4E                  <2> 		dec esi
  2688 000021CF 3B35[2F230000]      <2> 		cmp esi, [buftxtloc]
  2689 000021D5 7402                <2> 		je nordprupbck2
  2690 000021D7 EBD3                <2> 		jmp rdprupbckspclp
  2691                              <2> 	nordprupbck2:
  2692 000021D9 E8B5060000          <2> 		call termcopy
  2693                              <2> 	nordprupbck:
  2694 000021DE 8B3D[30780500]      <2> 		mov edi, [commandbufpos]
  2695 000021E4 81C7[3C780500]      <2> 		add edi, commandbuf
  2696 000021EA 4F                  <2> 		dec edi
  2697 000021EB C3                  <2> 		ret
  2698                              <2> 	getcurrentcommandstr:
  2699 000021EC 8A25[2D230000]      <2> 		mov ah, [commandedit]
  2700 000021F2 FE05[2D230000]      <2> 		inc byte [commandedit]
  2701                              <2> 	getccmdlp:
  2702 000021F8 4F                  <2> 		dec edi
  2703 000021F9 8A07                <2> 		mov al, [edi]
  2704 000021FB 81FF[3C780500]      <2> 		cmp edi, commandbuf
  2705 00002201 7231                <2> 		jb getcmdresetcommandbuf
  2706 00002203 81EF[3C780500]      <2> 		sub edi, commandbuf
  2707 00002209 3B3D[30780500]      <2> 		cmp edi, [commandbufpos]
  2708 0000220F 0F84A5FCFFFF        <2> 		je near rdprintb
  2709 00002215 81C7[3C780500]      <2> 		add edi, commandbuf
  2710 0000221B 3C00                <2> 		cmp al, 0
  2711 0000221D 75D9                <2> 		jne getccmdlp
  2712 0000221F FECC                <2> 		dec ah
  2713 00002221 80FC00              <2> 		cmp ah, 0
  2714 00002224 77D2                <2> 		ja getccmdlp
  2715 00002226 47                  <2> 		inc edi
  2716 00002227 81FF[3C880500]      <2> 		cmp edi, commandbufend
  2717 0000222D 770D                <2> 		ja fixcmdbufb4morerdpr
  2718 0000222F E915000000          <2> 		jmp morerdprup
  2719                              <2> 	getcmdresetcommandbuf:
  2720 00002234 BF[3C880500]        <2> 		mov edi, commandbufend
  2721 00002239 47                  <2> 		inc edi
  2722 0000223A EBBC                <2> 		jmp getccmdlp
  2723                              <2> 	fixcmdbufb4morerdpr:
  2724 0000223C 4F                  <2> 		dec edi
  2725 0000223D 81EF[3C880500]      <2> 		sub edi, commandbufend
  2726 00002243 81C7[3C780500]      <2> 		add edi, commandbuf
  2727                              <2> 	morerdprup:
  2728 00002249 8A07                <2> 		mov al, [edi]
  2729 0000224B 47                  <2> 		inc edi
  2730 0000224C 81EF[3C780500]      <2> 		sub edi, commandbuf
  2731 00002252 3C00                <2> 		cmp al, 0
  2732 00002254 0F8400FEFFFF        <2> 		je near rdprintb2
  2733 0000225A 3B3D[30780500]      <2> 		cmp edi, [commandbufpos]
  2734 00002260 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2735 00002266 81C7[3C780500]      <2> 		add edi, commandbuf
  2736 0000226C 8806                <2> 		mov [esi], al
  2737 0000226E 46                  <2> 		inc esi
  2738 0000226F 57                  <2> 		push edi
  2739 00002270 668B1D[27230000]    <2> 		mov bx, [modkeyrdpr]
  2740 00002277 30E4                <2> 		xor ah, ah
  2741 00002279 E859010000          <2> 		call prcharq
  2742 0000227E 5F                  <2> 		pop edi
  2743 0000227F 81FF[3C880500]      <2> 		cmp edi, commandbufend
  2744 00002285 76C2                <2> 		jbe morerdprup
  2745 00002287 BF[3C780500]        <2> 		mov edi, commandbuf
  2746 0000228C EBBB                <2> 		jmp morerdprup
  2747                              <2> 
  2748                              <2> 	rdprdel:
  2749 0000228E BF[88C20300]        <2> 		mov edi, buftxt2
  2750 00002293 8A07                <2> 		mov al, [edi]
  2751 00002295 3C00                <2> 		cmp al, 0
  2752 00002297 0F841DFCFFFF        <2> 		je near rdprintb
  2753 0000229D 8806                <2> 		mov [esi], al
  2754 0000229F 3C80                <2> 		cmp al, 0x80
  2755 000022A1 7216                <2> 		jb .fn
  2756                              <2> 	.lp:
  2757 000022A3 46                  <2> 		inc esi
  2758 000022A4 47                  <2> 		inc edi
  2759 000022A5 8A07                <2> 		mov al, [edi]
  2760 000022A7 3C00                <2> 		cmp al, 0
  2761 000022A9 0F840BFCFFFF        <2> 		je near rdprintb
  2762 000022AF 8806                <2> 		mov [esi], al
  2763 000022B1 3C80                <2> 		cmp al, 0x80
  2764 000022B3 7204                <2> 		jb .fn
  2765 000022B5 3CC0                <2> 		cmp al, 0xC0
  2766 000022B7 72EA                <2> 		jb .lp
  2767                              <2> 	.fn:
  2768 000022B9 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2769 000022BE E814010000          <2> 		call prcharq
  2770                              <2> 		
  2771                              <2> 	rdprbscheck:
  2772 000022C3 3B35[29230000]      <2> 		cmp esi, [firstesirdpr]
  2773 000022C9 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2774                              <2> 	goodbscheck:
  2775 000022CF 4E                  <2> 		dec esi
  2776 000022D0 8A46FF              <2> 		mov al, [esi - 1]
  2777 000022D3 C60600              <2> 		mov byte [esi], 0
  2778 000022D6 3CC0                <2> 		cmp al, 0xC0
  2779 000022D8 7309                <2> 		jae .onemore
  2780 000022DA 3C80                <2> 		cmp al, 0x80
  2781 000022DC 73F1                <2> 		jae goodbscheck
  2782 000022DE E904000000          <2> 		jmp .nomore
  2783                              <2> 	.onemore:
  2784 000022E3 4E                  <2> 		dec esi
  2785 000022E4 C60600              <2> 		mov byte [esi], 0		
  2786                              <2> 	.nomore:
  2787 000022E7 668B1D[27230000]    <2> 		mov bx, [modkeyrdpr]
  2788 000022EE B008                <2> 		mov al, 8
  2789 000022F0 E99FFCFFFF          <2> 		jmp bscheckequal
  2790                              <2> 		
  2791                              <2> 	shiftbuftxt2:
  2792 000022F5 55                  <2> 		push ebp
  2793 000022F6 89FD                <2> 		mov ebp, edi
  2794                              <2> 	.lp:
  2795 000022F8 3C00                <2> 		cmp al, 0
  2796 000022FA 7409                <2> 		je noshiftbuftxt2
  2797 000022FC 47                  <2> 		inc edi
  2798 000022FD 8A27                <2> 		mov ah, [edi]
  2799 000022FF 8807                <2> 		mov [edi], al
  2800 00002301 88E0                <2> 		mov al, ah
  2801 00002303 EBF3                <2> 		jmp .lp
  2802                              <2> 	noshiftbuftxt2:
  2803 00002305 8A4500              <2> 		mov al, [ebp]
  2804 00002308 5D                  <2> 		pop ebp
  2805 00002309 3CC0                <2> 		cmp al, 0xC0
  2806 0000230B 7304                <2> 		jae .nofix
  2807 0000230D 3C80                <2> 		cmp al, 0x80
  2808 0000230F 73E4                <2> 		jae shiftbuftxt2
  2809                              <2> 	.nofix:
  2810 00002311 BF[88C20300]        <2> 		mov edi, buftxt2
  2811 00002316 4E                  <2> 		dec esi
  2812 00002317 8A06                <2> 		mov al, [esi]
  2813 00002319 8807                <2> 		mov [edi], al
  2814 0000231B C60600              <2> 		mov byte [esi], 0
  2815 0000231E 66B80800            <2> 		mov ax, 8
  2816 00002322 C3                  <2> 		ret
  2817                              <2> 		
  2818 00002323 0000                <2> axcache dw 0
  2819 00002325 0000                <2> endkeyrdpr dw 0
  2820 00002327 0000                <2> modkeyrdpr dw 0
  2821 00002329 00000000            <2> firstesirdpr dd 0
  2822 0000232D 00                  <2> commandedit db 0
  2823 0000232E 00                  <2> txtmask db 0
  2824 0000232F 00000000            <2> buftxtloc dd 0
  2825 00002333 00000000            <2> endbufferrdpr dd 0
  2826 00002337 082000              <2> backcursor db 8," ",0
  2827                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2828                              <2> readchar:
  2829 0000233A E807000000          <2> 	call rdcharint
  2830 0000233F E96ADFFFFF          <2> 	jmp timerinterrupt
  2831                              <2> getchar:
  2832 00002344 30C0                <2> 	xor al, al
  2833                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2834 00002346 66C705[A8230000]01- <2> 		mov word [trans], 1
  2835 0000234E 00                  <2>
  2836 0000234F 3C00                <2> 		cmp al, 0
  2837 00002351 7509                <2> 		jne transcheck
  2838 00002353 66C705[A8230000]00- <2> 		mov word [trans], 0
  2839 0000235B 00                  <2>
  2840                              <2> 	transcheck:
  2841                              <2> 	%ifdef io.serial
  2842                              <2> 		call serial.receive
  2843                              <2> 		xor ah, ah
  2844                              <2> 		cmp al, 13
  2845                              <2> 		je rdenter
  2846                              <2> 	%else
  2847 0000235C E8E1390000          <2> 		call getkey
  2848 00002361 66A1[A6230000]      <2> 		mov ax, [lastkey + 2]
  2849 00002367 663D1C00            <2> 		cmp ax, 0x1C
  2850 0000236B 7425                <2> 		je rdenter
  2851                              <2> 	%endif
  2852 0000236D 66A1[A4230000]      <2> 		mov ax, [lastkey]
  2853 00002373 668B1D[A8230000]    <2> 		mov bx, [trans]
  2854 0000237A 803D[1E5D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2855 00002381 7500                <2> 		jne nospecialtrans
  2856                              <2> 	nospecialtrans:
  2857 00002383 6609C3              <2> 		or bx, ax
  2858 00002386 6681FB0000          <2> 		cmp bx, 0
  2859 0000238B 74CF                <2> 		je transcheck
  2860 0000238D E90C000000          <2> 		jmp rdend
  2861                              <2> 	rdenter:
  2862 00002392 C1E010              <2> 		shl eax, 16
  2863 00002395 66B80A00            <2> 		mov ax, 10
  2864 00002399 A3[A4230000]        <2> 		mov [lastkey], eax
  2865                              <2> 	rdend:
  2866 0000239E A1[A4230000]        <2> 		mov eax, [lastkey]
  2867 000023A3 C3                  <2> 		ret
  2868                              <2> 		
  2869 000023A4 00000000            <2> lastkey dd 0
  2870 000023A8 0000                <2> trans dw 0
  2871                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2872                              <2> prntchar:
  2873 000023AA 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2874                              <2> %ifdef io.serial
  2875                              <2> 	call prcharint
  2876                              <2> 	jmp timerinterrupt
  2877                              <2> prcharint:	
  2878                              <2> prcharq:
  2879                              <2> 	call serial.send
  2880                              <2> 	ret
  2881                              <2> %else
  2882 000023AC 38FB                <2> cmp bl, bh
  2883 000023AE 740A                <2> je prchar.notimer
  2884 000023B0 E80B000000          <2> call prcharint
  2885 000023B5 E9F4DEFFFF          <2> jmp timerinterrupt
  2886                              <2> prchar.notimer:
  2887 000023BA E818000000          <2> 	call prcharq
  2888 000023BF CF                  <2> 	iret
  2889                              <2> 	
  2890                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2891 000023C0 663DFFFE            <2> 	cmp ax, 0xFEFF
  2892 000023C4 740E                <2> 	je .ret
  2893 000023C6 39C1                <2> 	cmp ecx, eax
  2894 000023C8 740D                <2> 	je prcharq
  2895 000023CA E808000000          <2> 	call prcharq
  2896 000023CF E8BF040000          <2> 	call termcopy
  2897                              <2> .ret:
  2898 000023D4 C3                  <2> 	ret
  2899 000023D5 00                  <2> termguion db 0
  2900 000023D6 00                  <2> termcopyon db 0
  2901                              <2> prcharq:
  2902 000023D7 C1E310              <2> 	shl ebx, 16
  2903 000023DA 6689C3              <2> 	mov bx, ax
  2904 000023DD 89D8                <2> 	mov eax, ebx
  2905 000023DF A3[C2250000]        <2> 	mov [charbuf], eax
  2906 000023E4 8B1D[BA250000]      <2> 	mov ebx, [videobufpos]
  2907 000023EA BF[9CCD0300]        <2> 	mov edi, videobuf
  2908 000023EF 01DF                <2> 	add edi, ebx
  2909 000023F1 A1[9E280000]        <2> 	mov eax, [removedvideo]
  2910 000023F6 8907                <2> 	mov [edi], eax
  2911 000023F8 A1[C2250000]        <2> 	mov eax, [charbuf]
  2912 000023FD 31D2                <2> 	xor edx, edx
  2913 000023FF 668B15[BE250000]    <2> 	mov dx, [charpos]
  2914 00002406 31C9                <2> 	xor ecx, ecx
  2915 00002408 668B0D[C0250000]    <2> 	mov cx, [charxy]
  2916 0000240F 663D0900            <2> 	cmp ax, 9
  2917 00002413 0F846F000000        <2> 	je near prtab
  2918 00002419 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2919 0000241D 0F8492000000        <2> 	je near prcr
  2920 00002423 663D0A00            <2> 	cmp ax, 10
  2921 00002427 0F84DB000000        <2> 	je near prnlcr
  2922 0000242D 663D0800            <2> 	cmp ax, 8
  2923 00002431 0F848F000000        <2> 	je near prbs
  2924 00002437 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2925 0000243B 0F8341000000        <2> 	jae near prnofont
  2926                              <2> donepr:
  2927 00002441 8907                <2> 	mov [edi], eax
  2928 00002443 81C704000000        <2> 	add edi, 4
  2929 00002449 FEC2                <2> 	inc dl
  2930                              <2> donecrnl:
  2931 0000244B 38CA                <2> 	cmp dl, cl
  2932 0000244D 0F83D9000000        <2> 	jae near preol
  2933                              <2> doneeol:
  2934 00002453 38EE                <2> 	cmp dh, ch
  2935 00002455 0F83EE000000        <2> 	jae near prscr	
  2936                              <2> donescr:
  2937 0000245B 89FB                <2> 	mov ebx, edi
  2938 0000245D 8B07                <2> 	mov eax, [edi]
  2939 0000245F A3[9E280000]        <2> 	mov [removedvideo], eax
  2940 00002464 81EB[9CCD0300]      <2> 	sub ebx, videobuf
  2941 0000246A 891D[BA250000]      <2> 	mov [videobufpos], ebx
  2942 00002470 668915[BE250000]    <2> 	mov [charpos], dx
  2943 00002477 A1[C2250000]        <2> 	mov eax, [charbuf]
  2944 0000247C 89C3                <2> 	mov ebx, eax
  2945 0000247E C1EB10              <2> 	shr ebx, 16
  2946 00002481 C3                  <2> 	ret
  2947                              <2> 	
  2948                              <2> 	prnofont:
  2949 00002482 66B80200            <2> 		mov ax, 2
  2950 00002486 EBB9                <2> 		jmp donepr
  2951                              <2> 	prtab:
  2952 00002488 8B1D[B6250000]      <2> 		mov ebx, [linebeginpos]
  2953 0000248E 81EF[9CCD0300]      <2> 		sub edi, videobuf
  2954 00002494 29DF                <2> 		sub edi, ebx
  2955 00002496 C1EF05              <2> 		shr edi, 5
  2956 00002499 C1E705              <2> 		shl edi, 5
  2957 0000249C 81C720000000        <2> 		add edi, 32
  2958 000024A2 C0EA03              <2> 		shr dl, 3
  2959 000024A5 C0E203              <2> 		shl dl, 3
  2960 000024A8 80C208              <2> 		add dl, 8
  2961 000024AB 81C7[9CCD0300]      <2> 		add edi, videobuf
  2962 000024B1 01DF                <2> 		add edi, ebx
  2963 000024B3 EB96                <2> 		jmp donecrnl
  2964                              <2> 	
  2965                              <2> 	prcr:
  2966 000024B5 30D2                <2> 		xor dl, dl
  2967 000024B7 BF[9CCD0300]        <2> 		mov edi, videobuf
  2968 000024BC 8B1D[B6250000]      <2> 		mov ebx, [linebeginpos]
  2969 000024C2 01DF                <2> 		add edi, ebx
  2970 000024C4 EB85                <2> 		jmp donecrnl
  2971                              <2> 			
  2972                              <2> 	prbs:
  2973 000024C6 8B1D[B6250000]      <2> 		mov ebx, [linebeginpos]
  2974 000024CC 80FA00              <2> 		cmp dl, 0
  2975 000024CF 7415                <2> 		je prbackline
  2976                              <2> 	prnobmr:
  2977 000024D1 891D[B6250000]      <2> 		mov [linebeginpos], ebx
  2978 000024D7 FECA                <2> 		dec dl
  2979 000024D9 31C0                <2> 		xor eax, eax
  2980 000024DB 81EF04000000        <2> 		sub edi, 4
  2981 000024E1 E965FFFFFF          <2> 		jmp donecrnl
  2982                              <2> 	prbackline:
  2983 000024E6 6631DB              <2> 		xor bx, bx
  2984 000024E9 88CA                <2> 		mov dl, cl
  2985 000024EB 80FE00              <2> 		cmp dh, 0
  2986 000024EE 74E1                <2> 		je prnobmr
  2987 000024F0 8B1D[B6250000]      <2> 		mov ebx, [linebeginpos]
  2988 000024F6 6651                <2> 		push cx
  2989 000024F8 31C9                <2> 		xor ecx, ecx
  2990 000024FA 8A0C24              <2> 		mov cl, [esp]
  2991 000024FD C1E102              <2> 		shl ecx, 2
  2992 00002500 29CB                <2> 		sub ebx, ecx
  2993 00002502 6659                <2> 		pop cx
  2994 00002504 FECE                <2> 		dec dh
  2995 00002506 EBC9                <2> 		jmp prnobmr
  2996                              <2> 		
  2997                              <2> 	prnlcr:
  2998 00002508 FEC6                <2> 		inc dh
  2999 0000250A 31DB                <2> 		xor ebx, ebx
  3000 0000250C 30D2                <2> 		xor dl, dl
  3001 0000250E 88CB                <2> 		mov bl, cl
  3002 00002510 66C1E302            <2> 		shl bx, 2
  3003 00002514 BF[9CCD0300]        <2> 		mov edi, videobuf
  3004 00002519 031D[B6250000]      <2> 		add ebx, [linebeginpos]
  3005 0000251F 891D[B6250000]      <2> 		mov [linebeginpos], ebx
  3006 00002525 01DF                <2> 		add edi, ebx
  3007 00002527 E91FFFFFFF          <2> 		jmp donecrnl
  3008                              <2> 		
  3009                              <2> 	preol:
  3010 0000252C 30D2                <2> 		xor dl, dl
  3011 0000252E FEC6                <2> 		inc dh
  3012 00002530 31DB                <2> 		xor ebx, ebx
  3013 00002532 88CB                <2> 		mov bl, cl
  3014 00002534 66C1E302            <2> 		shl bx, 2
  3015 00002538 031D[B6250000]      <2> 		add ebx, [linebeginpos]
  3016 0000253E 891D[B6250000]      <2> 		mov [linebeginpos], ebx
  3017 00002544 E90AFFFFFF          <2> 		jmp doneeol
  3018                              <2> 	prscr:
  3019 00002549 FECE                <2> 		dec dh
  3020 0000254B BF[9CCD0300]        <2> 		mov edi, videobuf
  3021 00002550 31DB                <2> 		xor ebx, ebx
  3022 00002552 88CB                <2> 		mov bl, cl
  3023 00002554 66C1E302            <2> 		shl bx, 2
  3024 00002558 01FB                <2> 		add ebx, edi
  3025                              <2> 	intscrollloop:
  3026 0000255A 8B03                <2> 		mov eax, [ebx]
  3027 0000255C 8907                <2> 		mov [edi], eax
  3028 0000255E 81C704000000        <2> 		add edi, 4
  3029 00002564 81C304000000        <2> 		add ebx, 4
  3030 0000256A FEC9                <2> 		dec cl
  3031 0000256C 80F900              <2> 		cmp cl, 0
  3032 0000256F 75E9                <2> 		jne intscrollloop
  3033 00002571 8A0D[C0250000]      <2> 		mov cl, [charxy]
  3034 00002577 FECD                <2> 		dec ch
  3035 00002579 80FD01              <2> 		cmp ch, 1
  3036 0000257C 77DC                <2> 		ja intscrollloop
  3037 0000257E 31C0                <2> 		xor eax, eax
  3038 00002580 81EF[9CCD0300]      <2> 		sub edi, videobuf
  3039 00002586 893D[B6250000]      <2> 		mov [linebeginpos], edi
  3040 0000258C 81C7[9CCD0300]      <2> 		add edi, videobuf
  3041 00002592 89FB                <2> 		mov ebx, edi
  3042                              <2> 	intloopclear:
  3043 00002594 8903                <2> 		mov [ebx], eax
  3044 00002596 81C304000000        <2> 		add ebx, 4
  3045 0000259C FEC9                <2> 		dec cl
  3046 0000259E 80F900              <2> 		cmp cl, 0
  3047 000025A1 75F1                <2> 		jne intloopclear
  3048 000025A3 FECD                <2> 		dec ch
  3049 000025A5 80FD00              <2> 		cmp ch, 0
  3050 000025A8 75EA                <2> 		jne intloopclear
  3051 000025AA 668B0D[C0250000]    <2> 		mov cx, [charxy]
  3052 000025B1 E9A5FEFFFF          <2> 		jmp donescr
  3053                              <2> 		
  3054 000025B6 00000000            <2> linebeginpos dd 0
  3055 000025BA 00000000            <2> videobufpos: dd 0
  3056 000025BE 0000                <2> charpos db 0,0
  3057 000025C0 501E                <2> charxy db 80,30
  3058 000025C2 00000000            <2> charbuf dd 0
  3059                              <2> %endif
  3060                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3061                              <2> openfile:
  3062 000025C6 E819410000          <2> 	call loadfile
  3063 000025CB E9DEDCFFFF          <2> 	jmp timerinterrupt
  3064                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3065                              <2> num2str:
  3066 000025D0 3C00                <2> 	cmp al, 0
  3067 000025D2 750A                <2> 	jne num2strb
  3068 000025D4 E88D0C0000          <2> 	call showdec
  3069 000025D9 E9D0DCFFFF          <2> 	jmp timerinterrupt
  3070                              <2> num2strb:
  3071 000025DE E8C80B0000          <2> 	call showhex
  3072 000025E3 E9C6DCFFFF          <2> 	jmp timerinterrupt
  3073                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3074                              <2> str2num:
  3075 000025E8 89F7                <2> 	mov edi, esi
  3076 000025EA E8520D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3077 000025EF E9BADCFFFF          <2> 	jmp timerinterrupt
  3078                              <2> 	
  3079                              <1> %ifdef threads.included
  3080                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3081                              <2> forkthread:
  3082                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3083                              <2> 			;returns the PID of the new fork in ebx
  3084                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3085 000025F4 FA                  <2> 	cli
  3086 000025F5 60                  <2> 	pushad
  3087 000025F6 8925[C3260000]      <2> 	mov [.espold], esp
  3088 000025FC C605[9E680000]01    <2> 	mov byte [threadson], 1
  3089 00002603 8B1D[9F680000]      <2> 	mov ebx, [currentthread]
  3090 00002609 C1E302              <2> 	shl ebx, 2
  3091 0000260C 89A3[3C880500]      <2> 	mov [threadlist + ebx], esp
  3092 00002612 C1EB02              <2> 	shr ebx, 2
  3093 00002615 81FB00000000        <2> 	cmp ebx, 0
  3094 0000261B 750C                <2> 	jne .simplestack
  3095 0000261D BB[00AC0300]        <2> 	mov ebx, stackend
  3096 00002622 29E3                <2> 	sub ebx, esp
  3097 00002624 E90B000000          <2> 	jmp .stackcalcdone
  3098                              <2> .simplestack:
  3099 00002629 C1E30A              <2> 	shl ebx, 10
  3100 0000262C 81C3[3CA00500]      <2> 	add ebx, stack1
  3101 00002632 29E3                <2> 	sub ebx, esp
  3102                              <2> .stackcalcdone:
  3103 00002634 29DC                <2> 	sub esp, ebx
  3104 00002636 81C4[3CA00500]      <2> 	add esp, stack1
  3105 0000263C 8B1D[9A680000]      <2> 	mov ebx, [lastthread]
  3106 00002642 C1E308              <2> 	shl ebx, 8
  3107 00002645 01DC                <2> 	add esp, ebx
  3108 00002647 891D[C7260000]      <2> 	mov [.stackend], ebx
  3109                              <2> 
  3110 0000264D 89E5                <2> 	mov ebp, esp
  3111 0000264F 8B25[C3260000]      <2> 	mov esp, [.espold]
  3112                              <2> 
  3113 00002655 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3114 00002658 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3115                              <2> 
  3116 0000265C 31DB                <2> 	xor ebx, ebx
  3117                              <2> .stackcopy:
  3118 0000265E 668B041C            <2> 	mov ax, [esp + ebx]
  3119 00002662 6689441D00          <2> 	mov [ebp + ebx], ax
  3120 00002667 81C302000000        <2> 	add ebx, 2
  3121 0000266D 3B1D[C7260000]      <2> 	cmp ebx, [.stackend]
  3122 00002673 72E9                <2> 	jb .stackcopy
  3123                              <2> 
  3124 00002675 31C0                <2> 	xor eax, eax
  3125 00002677 668CC8              <2> 	mov ax, cs
  3126 0000267A 89C2                <2> 	mov edx, eax
  3127 0000267C 8B4C2428            <2> 	mov ecx, [esp + 40]
  3128 00002680 81C900020000        <2> 	or ecx, 0x200
  3129                              <2> 	
  3130 00002686 81FE00000000        <2> 	cmp esi, 0
  3131 0000268C 7504                <2> 	jne .nochangestack
  3132 0000268E 8B742420            <2> 	mov esi, [esp + 32]
  3133                              <2> .nochangestack:
  3134 00002692 89F0                <2> 	mov eax, esi
  3135 00002694 89EC                <2> 	mov esp, ebp
  3136                              <2> 
  3137 00002696 89442420            <2> 	mov [esp + 32], eax
  3138 0000269A 89542424            <2> 	mov [esp + 36], edx
  3139 0000269E 894C2428            <2> 	mov [esp + 40], ecx
  3140                              <2> 
  3141 000026A2 8B1D[9A680000]      <2> 	mov ebx, [lastthread]
  3142 000026A8 89A3[3C880500]      <2> 	mov [threadlist + ebx], esp
  3143 000026AE 81C304000000        <2> 	add ebx, 4
  3144 000026B4 891D[9A680000]      <2> 	mov [lastthread], ebx
  3145 000026BA 8B25[C3260000]      <2> 	mov esp, [.espold]
  3146 000026C0 61                  <2> 	popad
  3147 000026C1 FB                  <2> 	sti
  3148 000026C2 CF                  <2> 	iret
  3149                              <2> 
  3150 000026C3 00000000            <2> .espold dd 0
  3151 000026C7 00000000            <2> .stackend dd 0
  3152                              <1> %endif
  3153                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3154                              <2> gettime:
  3155 000026CB A1[67020000]        <2> 	mov eax, [timeseconds]
  3156 000026D0 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  3157 000026D6 89D9                <2> 	mov ecx, ebx
  3158 000026D8 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3159 000026DB E9CEDBFFFF          <2> 	jmp timerinterrupt
  3160                              <1> 	%include 'source/interrupts/13_settime.asm'
  3161                              <2> settime:
  3162 000026E0 A3[67020000]        <2> 	mov [timeseconds], eax
  3163 000026E5 891D[6B020000]      <2> 	mov [timenanoseconds], ebx
  3164 000026EB E9BEDBFFFF          <2> 	jmp timerinterrupt
  3165                              <2> 	
  3166                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3167                              <2> runcmd:
  3168 000026F0 BF[88C60300]        <2> 	mov edi, buftxt
  3169                              <2> cpcmd:
  3170 000026F5 8A06                <2> 	mov al, [esi]
  3171 000026F7 8807                <2> 	mov [edi], al
  3172 000026F9 46                  <2> 	inc esi
  3173 000026FA 47                  <2> 	inc edi
  3174 000026FB 3C00                <2> 	cmp al, 0
  3175 000026FD 75F6                <2> 	jne cpcmd
  3176 000026FF E8AF070000          <2> 	call run
  3177 00002704 CF                  <2> 	iret
  3178                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3179                              <2> proginfo:
  3180                              <2> 	;mov ebx, variables
  3181 00002705 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  3182 0000270B 89F7                <2> 	mov edi, esi
  3183 0000270D 31C9                <2> 	xor ecx, ecx
  3184                              <2> getcommandzeroes:
  3185 0000270F 8A07                <2> 	mov al, [edi]
  3186 00002711 47                  <2> 	inc edi
  3187 00002712 3C3B                <2> 	cmp al, ';'
  3188 00002714 740B                <2> 	je nomorezeroes
  3189 00002716 3C00                <2> 	cmp al, 0
  3190 00002718 7407                <2> 	je nomorezeroes
  3191 0000271A 3C20                <2> 	cmp al, ' '
  3192 0000271C 75F1                <2> 	jne getcommandzeroes
  3193 0000271E 41                  <2> 	inc ecx
  3194 0000271F EBEE                <2> 	jmp getcommandzeroes
  3195                              <2> nomorezeroes:
  3196 00002721 41                  <2> 	inc ecx
  3197 00002722 4F                  <2> 	dec edi
  3198 00002723 8B1D[14B20300]      <2> 	mov ebx, [uid]
  3199 00002729 8B15[9F680000]      <2> 	mov edx, [currentthread]
  3200 0000272F CF                  <2> 	iret
  3201                              <2> 	
  3202                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3203                              <2> hooksig: ;hook code in ESI to signal in AL
  3204 00002730 3C00                <2> 	cmp al, 0
  3205 00002732 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3206                              <2> ;	xor ebx, ebx
  3207                              <2> ;	mov bl, al
  3208                              <2> ;	shl bl, 2
  3209 00002734 BF[04AC0300]        <2> 	mov edi, sigtable
  3210 00002739 8937                <2> 	mov [edi], esi
  3211                              <2> .quit:
  3212 0000273B E96EDBFFFF          <2> 	jmp timerinterrupt
  3213                              <1> %ifdef gui.included
  3214                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3215                              <2> guiint:
  3216 00002740 3CFD                <2> 	cmp al, 253
  3217 00002742 0F8473000000        <2> 	je near .getinfo
  3218 00002748 803D[6C860000]01    <2> 	cmp byte [guion], 1
  3219 0000274F 0F8550000000        <2> 	jne near .nogui
  3220 00002755 3C00                <2> 	cmp al, 0
  3221 00002757 0F844D000000        <2> 	je near .clear
  3222 0000275D 3C01                <2> 	cmp al, 1
  3223 0000275F 0F84A8000000        <2> 	je near .putpixel
  3224 00002765 3C02                <2> 	cmp al, 2
  3225 00002767 0F84AD000000        <2> 	je near .drawtext
  3226 0000276D 3C03                <2> 	cmp al, 3
  3227 0000276F 0F84C0000000        <2> 	je near .drawline
  3228 00002775 3C04                <2> 	cmp al, 4
  3229 00002777 0F84CB000000        <2> 	je near .drawcircle
  3230 0000277D 3C05                <2> 	cmp al, 5
  3231 0000277F 0F84D3000000        <2> 	je near .fillcircle
  3232 00002785 3C06                <2> 	cmp al, 6
  3233 00002787 0F84DB000000        <2> 	je near .drawsquare
  3234 0000278D 3C07                <2> 	cmp al, 7
  3235 0000278F 0F84E6000000        <2> 	je near .fillsquare
  3236 00002795 3CFE                <2> 	cmp al, 254
  3237 00002797 0F8446000000        <2> 	je near .setinfo
  3238 0000279D 3CFF                <2> 	cmp al, 255
  3239 0000279F 0F8443000000        <2> 	je near .reset
  3240                              <2> .nogui:
  3241 000027A5 E904DBFFFF          <2> 	jmp timerinterrupt
  3242                              <2> 
  3243                              <2> .clear:		;color in bx
  3244 000027AA 66891D[846F0000]    <2> 	mov [background], bx
  3245                              <2> %ifdef gui.background
  3246                              <2> 	mov ebx, [backgroundimage]
  3247                              <2> 	cmp ebx, 0
  3248                              <2> 	je .clearit
  3249                              <2> 	mov dword [backgroundimage], 0
  3250                              <2> 	mov [.bgi], ebx
  3251                              <2> .clearit:
  3252                              <2> %endif
  3253 000027B1 E882470000          <2> 	call guiclear
  3254 000027B6 E9F3DAFFFF          <2> 	jmp timerinterrupt
  3255                              <2> 	
  3256                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3257 000027BB 31DB                <2> 	xor ebx, ebx
  3258 000027BD 31C9                <2> 	xor ecx, ecx
  3259 000027BF 31D2                <2> 	xor edx, edx
  3260 000027C1 381D[6C860000]      <2> 	cmp [guion], bl
  3261 000027C7 74DC                <2> 	je .nogui
  3262 000027C9 668B1D[846F0000]    <2> 	mov bx, [background]
  3263 000027D0 668B15[33560000]    <2> 	mov dx, [resolutionx]
  3264 000027D7 668B0D[35560000]    <2> 	mov cx, [resolutiony]
  3265 000027DE E9CBDAFFFF          <2> 	jmp timerinterrupt
  3266                              <2> 	
  3267                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3268 000027E3 E9C6DAFFFF          <2> 	jmp timerinterrupt
  3269                              <2> .reset:		;resets the screen to the original settings
  3270 000027E8 66BBCF7B            <2> 	mov bx, background.original
  3271 000027EC 66891D[846F0000]    <2> 	mov [background], bx
  3272 000027F3 66BBFFFF            <2> 	mov bx, 0xFFFF
  3273 000027F7 66891D[46760000]    <2> 	mov [colorfont2], bx
  3274                              <2> %ifdef gui.background
  3275                              <2> 	mov ebx, [backgroundimage]
  3276                              <2> 	cmp ebx, 0
  3277                              <2> 	jne .resetit
  3278                              <2> 	mov ebx, [.bgi]
  3279                              <2> 	mov [backgroundimage], ebx
  3280                              <2> .resetit:
  3281                              <2> %endif
  3282 000027FE E835470000          <2> 	call guiclear
  3283 00002803 E880470000          <2> 	call reloadallgraphics
  3284 00002808 E9A1DAFFFF          <2> 	jmp timerinterrupt
  3285                              <2> 
  3286                              <2> %ifdef gui.background
  3287                              <2> 	.bgi dd 0
  3288                              <2> %endif
  3289                              <2> 	
  3290                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3291 0000280D 6689DE              <2> 	mov si, bx
  3292 00002810 E8875D0000          <2> 	call putpixel
  3293 00002815 E994DAFFFF          <2> 	jmp timerinterrupt
  3294                              <2> 
  3295                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3296 0000281A 66D1E2              <2> 	shl dx, 1
  3297 0000281D 66891D[46760000]    <2> 	mov [colorfont2], bx
  3298 00002824 66893D[846F0000]    <2> 	mov [background], di
  3299 0000282B E8A94D0000          <2> 	call showstring2
  3300 00002830 E979DAFFFF          <2> 	jmp timerinterrupt
  3301                              <2> 
  3302                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3303 00002835 6689F0              <2> 	mov ax, si
  3304 00002838 6689DE              <2> 	mov si, bx
  3305 0000283B 6689FB              <2> 	mov bx, di
  3306 0000283E E8C9450000          <2> 	call drawline
  3307 00002843 E966DAFFFF          <2> 	jmp timerinterrupt
  3308                              <2> 
  3309                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3310 00002848 6689F0              <2> 	mov ax, si
  3311 0000284B 6689DE              <2> 	mov si, bx
  3312 0000284E E842410000          <2> 	call drawcircle
  3313 00002853 E956DAFFFF          <2> 	jmp timerinterrupt
  3314                              <2> 
  3315                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3316 00002858 6689F0              <2> 	mov ax, si
  3317 0000285B 6689DE              <2> 	mov si, bx
  3318 0000285E E844420000          <2> 	call fillcircle
  3319 00002863 E946DAFFFF          <2> 	jmp timerinterrupt
  3320                              <2> 	
  3321                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3322 00002868 6689F0              <2> 	mov ax, si
  3323 0000286B 6689DE              <2> 	mov si, bx
  3324 0000286E 6689FB              <2> 	mov bx, di
  3325 00002871 E8E2470000          <2> 	call drawsquare
  3326 00002876 E933DAFFFF          <2> 	jmp timerinterrupt
  3327                              <2> 
  3328                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3329 0000287B 6689F0              <2> 	mov ax, si
  3330 0000287E 6689DE              <2> 	mov si, bx
  3331 00002881 6689FB              <2> 	mov bx, di
  3332 00002884 E844480000          <2> 	call fillsquare
  3333 00002889 E920DAFFFF          <2> 	jmp timerinterrupt
  3334                              <1> %endif
  3335                              <1> %ifdef sound.included
  3336                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3337                              <2> soundint:
  3338 0000288E E91BDAFFFF          <2> 	jmp timerinterrupt
  3339                              <1> %endif
  3340                              <1> %ifdef network.included
  3341                              <1> 	%include 'source/interrupts/19_netint.asm'
  3342                              <1> %endif
  3343                              <1> 
  3344                              <1> termcopy:
  3345                              <1> %ifdef io.serial
  3346                              <1> 	ret
  3347                              <1> %else
  3348                              <1> %ifdef terminal.vsync
  3349                              <1> 	mov byte [termcopyneeded], 1
  3350                              <1> 	ret
  3351                              <1> %else
  3352 00002893 E80A000000          <1> 	call newtermcopy
  3353 00002898 C3                  <1> 	ret
  3354                              <1> %endif
  3355 00002899 00                  <1> 	termcopyneeded db 0
  3356 0000289A 00000000            <1> 	termcursorpos dd 0
  3357 0000289E 00000000            <1> 	removedvideo dd 0
  3358                              <1> newtermcopy:
  3359 000028A2 60                  <1> 	pusha
  3360 000028A3 BF[9CCD0300]        <1> 	mov edi, videobuf
  3361 000028A8 31DB                <1> 	xor ebx, ebx
  3362 000028AA 881D[99280000]      <1> 	mov [termcopyneeded], bl
  3363 000028B0 8B1D[BA250000]      <1> 	mov ebx, [videobufpos]
  3364 000028B6 01DF                <1> 	add edi, ebx
  3365 000028B8 893D[9A280000]      <1> 	mov [termcursorpos], edi
  3366 000028BE E8E2000000          <1> 	call switchtermcursor
  3367 000028C3 803D[6C860000]00    <1> 	cmp byte [guion], 0
  3368 000028CA 0F8420000000        <1> 	je near nowincopy
  3369                              <1> %ifdef gui.included
  3370 000028D0 C605[AD7D0000]00    <1> 	mov byte [mouseselecton], 0
  3371 000028D7 C605[D6230000]01    <1> 	mov byte [termcopyon], 1
  3372 000028DE 803D[D5230000]01    <1> 	cmp byte [termguion], 1
  3373 000028E5 0F844C520000        <1> 	je near windowvideocopy
  3374                              <1> %endif
  3375 000028EB E9AE000000          <1> 	jmp nocopytermatall
  3376                              <1> nowincopy:
  3377 000028F0 BE00000A00          <1> 	mov esi, 0xA0000
  3378 000028F5 A1[47020000]        <1> 	mov eax, [basecache]
  3379 000028FA C1E004              <1> 	shl eax, 4
  3380 000028FD 29C6                <1> 	sub esi, eax
  3381 000028FF BF[9CCD0300]        <1> 	mov edi, videobuf
  3382 00002904 31C9                <1> 	xor ecx, ecx
  3383 00002906 668B0D[C0250000]    <1> 	mov cx, [charxy]
  3384                              <1> nowincopy2:
  3385 0000290D 8B07                <1> 	mov eax, [edi]
  3386 0000290F 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3387 00002915 8B1F                <1> 	mov ebx, [edi]
  3388 00002917 8907                <1> 	mov [edi], eax
  3389 00002919 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3390 0000291F 81C702000000        <1> 	add edi, 2
  3391 00002925 39D8                <1> 	cmp eax, ebx
  3392 00002927 744B                <1> 	je nopresentwinfont
  3393 00002929 81EF02000000        <1> 	sub edi, 2
  3394 0000292F BD[C6880000]        <1> 	mov ebp, fonts
  3395 00002934 31C0                <1> 	xor eax, eax
  3396 00002936 668B07              <1> 	mov ax, [edi]
  3397 00002939 C1E004              <1> 	shl eax, 4
  3398 0000293C 01C5                <1> 	add ebp, eax
  3399 0000293E 81C702000000        <1> 	add edi, 2
  3400 00002944 668B1F              <1> 	mov bx, [edi]
  3401 00002947 31D2                <1> 	xor edx, edx
  3402 00002949 8A15[C0250000]      <1> 	mov dl, [charxy]
  3403 0000294F C1C110              <1> 	rol ecx, 16
  3404 00002952 B110                <1> 	mov cl, 16
  3405                              <1> nowinfont:
  3406 00002954 8A4500              <1> 	mov al, [ebp]
  3407 00002957 D0C8                <1> 	ror al, 1
  3408 00002959 80FB80              <1> 	cmp bl, 0x80
  3409 0000295C 7202                <1> 	jb notnotfont
  3410 0000295E F6D0                <1> 	not al
  3411                              <1> notnotfont:
  3412 00002960 8806                <1> 	mov [esi], al
  3413 00002962 01D6                <1> 	add esi, edx
  3414 00002964 45                  <1> 	inc ebp
  3415 00002965 FEC9                <1> 	dec cl
  3416 00002967 80F900              <1> 	cmp cl, 0
  3417 0000296A 75E8                <1> 	jne nowinfont
  3418 0000296C C1E204              <1> 	shl edx, 4
  3419 0000296F 29D6                <1> 	sub esi, edx
  3420 00002971 C1C110              <1> 	rol ecx, 16
  3421                              <1> nopresentwinfont:
  3422 00002974 81C702000000        <1> 	add edi, 2
  3423 0000297A 46                  <1> 	inc esi
  3424 0000297B FEC9                <1> 	dec cl
  3425 0000297D 80F900              <1> 	cmp cl, 0
  3426 00002980 758B                <1> 	jne nowincopy2
  3427 00002982 8A0D[C0250000]      <1> 	mov cl, [charxy]
  3428 00002988 31D2                <1> 	xor edx, edx
  3429 0000298A 88CA                <1> 	mov dl, cl
  3430 0000298C 29D6                <1> 	sub esi, edx
  3431 0000298E C1E204              <1> 	shl edx, 4
  3432 00002991 01D6                <1> 	add esi, edx
  3433 00002993 FECD                <1> 	dec ch
  3434 00002995 80FD00              <1> 	cmp ch, 0
  3435 00002998 0F856FFFFFFF        <1> 	jne nowincopy2
  3436                              <1> nocopytermatall:
  3437 0000299E E802000000          <1> 	call switchtermcursor
  3438 000029A3 61                  <1> 	popa
  3439 000029A4 C3                  <1> 	ret
  3440                              <1> 	
  3441                              <1> switchtermcursor:
  3442 000029A5 8B3D[9A280000]      <1> 	mov edi, [termcursorpos]
  3443 000029AB 668B4702            <1> 	mov ax, [edi + 2]
  3444 000029AF 668B1F              <1> 	mov bx, [edi]
  3445 000029B2 663D8000            <1> 	cmp ax, 0x80
  3446 000029B6 7209                <1> 	jb movlargecursorterm
  3447 000029B8 66B80700            <1> 	mov ax, 7
  3448 000029BC E904000000          <1> 	jmp movedcursorterm
  3449                              <1> movlargecursorterm:
  3450 000029C1 66B8F000            <1> 	mov ax, 0xF0
  3451                              <1> movedcursorterm:
  3452 000029C5 66894702            <1> 	mov [edi + 2], ax
  3453 000029C9 6681FB0000          <1> 	cmp bx, 0
  3454 000029CE 7507                <1> 	jne fixednocursorterm
  3455 000029D0 66BB2000            <1> 	mov bx, ' '
  3456 000029D4 66891F              <1> 	mov [edi], bx
  3457                              <1> fixednocursorterm:
  3458 000029D7 C3                  <1> 	ret
  3459                              <1> %endif
  3460                                      %include "source/dosints.asm"
  3461                              <1> int20h:
  3462 000029D8 66B8004C            <1> mov ax, 0x4C00
  3463                              <1> int21h:
  3464                              <1> dostosolleros:
  3465 000029DC 6650                <1> 	push ax
  3466 000029DE 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3467 000029E2 8ED8                <1> 	mov ds, ax
  3468 000029E4 8EC0                <1> 	mov es, ax
  3469 000029E6 8EE0                <1> 	mov fs, ax
  3470 000029E8 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3471 000029EC 8EE8                <1> 	mov gs, ax
  3472 000029EE 6658                <1> 	pop ax
  3473 000029F0 9C                  <1> 	pushf
  3474 000029F1 60                  <1> 	pusha
  3475 000029F2 80FC01              <1> 	cmp ah, 1
  3476 000029F5 0F8449000000        <1> 	je near dosgchar
  3477 000029FB 80FC02              <1> 	cmp ah, 2
  3478 000029FE 0F8447000000        <1> 	je near doswchar
  3479 00002A04 80FC09              <1> 	cmp ah, 9
  3480 00002A07 0F844B000000        <1> 	je near dosprintstr
  3481 00002A0D 80FC0A              <1> 	cmp ah, 0xA
  3482 00002A10 0F845A000000        <1> 	je near dosgetstr
  3483 00002A16 80FC2B              <1> 	cmp ah, 0x2B
  3484 00002A19 0F8496000000        <1> 	je near dosgetdate
  3485 00002A1F 80FC2C              <1> 	cmp ah, 0x2C
  3486 00002A22 0F84B0000000        <1> 	je near dosgettime
  3487 00002A28 80FC4C              <1> 	cmp ah, 0x4C
  3488 00002A2B 0F84C5000000        <1> 	je near dosexit
  3489                              <1> backtodos:
  3490 00002A31 61                  <1> 	popa
  3491 00002A32 9D                  <1> 	popf
  3492 00002A33 6650                <1> 	push ax
  3493 00002A35 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3494 00002A39 8ED8                <1> 	mov ds, ax
  3495 00002A3B 8EC0                <1> 	mov es, ax
  3496 00002A3D 8EE0                <1> 	mov fs, ax
  3497 00002A3F 8EE8                <1> 	mov gs, ax
  3498 00002A41 6658                <1> 	pop ax
  3499 00002A43 CF                  <1> 	iret
  3500                              <1> 
  3501                              <1> dosgchar:
  3502 00002A44 E8FBF8FFFF          <1> 	call getchar
  3503 00002A49 EBE6                <1> 	jmp backtodos
  3504                              <1> 	
  3505                              <1> doswchar:
  3506 00002A4B 88D0                <1> 	mov al, dl
  3507 00002A4D 30E4                <1> 	xor ah, ah
  3508 00002A4F B307                <1> 	mov bl, 7
  3509 00002A51 E86AF9FFFF          <1> 	call prcharint
  3510 00002A56 EBD9                <1> 	jmp backtodos
  3511                              <1> 	
  3512                              <1> dosprintstr:
  3513 00002A58 31F6                <1> 	xor esi, esi
  3514 00002A5A 6689D6              <1> 	mov si, dx
  3515 00002A5D 81C600004000        <1> 	add esi, dosprogloc
  3516 00002A63 66B82400            <1> 	mov ax, "$"
  3517 00002A67 B307                <1> 	mov bl, 7
  3518 00002A69 E8E1F2FFFF          <1> 	call printint
  3519 00002A6E EBC1                <1> 	jmp backtodos
  3520                              <1> 	
  3521                              <1> dosgetstr:
  3522 00002A70 31F6                <1> 	xor esi, esi
  3523 00002A72 6689D6              <1> 	mov si, dx
  3524 00002A75 81C600004000        <1> 	add esi, dosprogloc
  3525 00002A7B B900000000          <1> 	mov ecx, 0
  3526 00002A80 8A0E                <1> 	mov cl, [esi]
  3527 00002A82 81C602000000        <1> 	add esi, 2
  3528 00002A88 89F7                <1> 	mov edi, esi
  3529 00002A8A 8935[B12A0000]      <1> 	mov [stringstart], esi
  3530 00002A90 01CF                <1> 	add edi, ecx
  3531 00002A92 B00A                <1> 	mov al, 10
  3532 00002A94 B307                <1> 	mov bl, 7
  3533 00002A96 E8F5F3FFFF          <1> 	call rdprintdos
  3534 00002A9B 89F1                <1> 	mov ecx, esi
  3535 00002A9D 2B0D[B12A0000]      <1> 	sub ecx, [stringstart]
  3536 00002AA3 8B35[B12A0000]      <1> 	mov esi, [stringstart]
  3537 00002AA9 884EFF              <1> 	mov [esi - 1], cl
  3538 00002AAC 884EFE              <1> 	mov [esi - 2], cl
  3539 00002AAF EB80                <1> 	jmp backtodos
  3540 00002AB1 00000000            <1> stringstart dd 0
  3541                              <1> 
  3542                              <1> dosgetdate:
  3543 00002AB5 E846150000          <1> 	call time
  3544 00002ABA 8A0D[14430000]      <1> 	mov cl, [RTCtimeYear]
  3545 00002AC0 B500                <1> 	mov ch, 0
  3546 00002AC2 6681C1D007          <1> 	add cx, 2000
  3547 00002AC7 8A35[13430000]      <1> 	mov dh, [RTCtimeMonth]
  3548 00002ACD 8A15[12430000]      <1> 	mov dl, [RTCtimeDay]
  3549 00002AD3 E959FFFFFF          <1> 	jmp backtodos
  3550                              <1> 
  3551                              <1> dosgettime:
  3552 00002AD8 E823150000          <1> 	call time
  3553 00002ADD 8A2D[11430000]      <1> 	mov ch, [RTCtimeHour]
  3554 00002AE3 8A0D[10430000]      <1> 	mov cl, [RTCtimeMinute]
  3555 00002AE9 8A35[0F430000]      <1> 	mov dh, [RTCtimeSecond]
  3556 00002AEF B200                <1> 	mov dl, 0
  3557 00002AF1 E93BFFFFFF          <1> 	jmp backtodos
  3558                              <1> 	
  3559                              <1> dosexit:
  3560 00002AF6 BE[47860000]        <1> 	mov esi, line
  3561 00002AFB E848F2FFFF          <1> 	call print
  3562 00002B00 61                  <1> 	popa
  3563 00002B01 9D                  <1> 	popf
  3564 00002B02 8B25[08B00300]      <1> 	mov esp, [previousstack]
  3565 00002B08 31DB                <1> 	xor ebx, ebx
  3566 00002B0A 88C3                <1> 	mov bl, al
  3567 00002B0C 80FB00              <1> 	cmp bl, 0
  3568 00002B0F 0F85B9F1FFFF        <1> 	jne near exitprog.error
  3569 00002B15 C3                  <1> 	ret
  3570                                      %include "source/shush.asm"
  3571                              <1> os:
  3572                              <1> setdefenv:
  3573 00002B16 C605[14B00300]2F    <1> 	mov byte [currentfolder], '/'
  3574 00002B1D C705[10B00300]0100- <1> 	mov dword [currentfolderloc], 1
  3575 00002B25 0000                <1>
  3576 00002B27 E8CCF2FFFF          <1> 	call clear
  3577                              <1> 	
  3578                              <1> bootfilecheck:
  3579 00002B2C 803D[18B20300]01    <1> 	cmp byte [ranboot], 1
  3580 00002B33 0F8421000000        <1> 	je near nobootfile
  3581                              <1> 	%ifdef hardware.automatic
  3582 00002B39 E85A370000          <1> 		call initializelater ;Initialize components that have debug messages
  3583                              <1> 	%endif
  3584                              <1> 	%ifdef disk.none
  3585                              <1> 	%else
  3586 00002B3E BF[06860000]        <1> 		mov edi, bootfilename
  3587 00002B43 BE00004000          <1> 		mov esi, 0x400000
  3588 00002B48 E8973B0000          <1> 		call loadfile
  3589 00002B4D 81FA00000000        <1> 		cmp edx, 0
  3590 00002B53 7505                <1> 		jne nobootfile
  3591 00002B55 E8BA0D0000          <1> 		call progbatchfound
  3592                              <1> 	%endif
  3593                              <1> nobootfile:	
  3594 00002B5A C605[18B20300]01    <1> 	mov byte [ranboot], 1
  3595                              <1> 
  3596 00002B61 BE[02000000]        <1> 	mov esi, signature
  3597                              <1> .sigcopyloop:	;this prevents an odd error
  3598 00002B66 658A06              <1> 	mov al, [gs:esi]
  3599 00002B69 8806                <1> 	mov [esi], al
  3600 00002B6B 46                  <1> 	inc esi
  3601 00002B6C 81FE[10000000]      <1> 	cmp esi, signatureend
  3602 00002B72 72F2                <1> 	jb .sigcopyloop
  3603                              <1> 	
  3604 00002B74 BE[02000000]        <1> 	mov esi, signature
  3605 00002B79 E8CAF1FFFF          <1> 	call print
  3606 00002B7E 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3607 00002B84 E8DD060000          <1> 	call showdec
  3608 00002B89 E8B5F1FFFF          <1> 	call printline
  3609 00002B8E BE[23860000]        <1> 	mov esi, userask
  3610 00002B93 E8B0F1FFFF          <1> 	call print
  3611                              <1> 
  3612                              <1> usercheck:
  3613 00002B98 BE[88C60300]        <1> 	mov esi, buftxt
  3614 00002B9D BF[88CA0300]        <1> 	mov edi, buftxtend
  3615 00002BA2 B00A                <1> 	mov al, 10
  3616 00002BA4 E8D3F2FFFF          <1> 	call rdprint
  3617 00002BA9 56                  <1> 	push esi
  3618 00002BAA BE[2D860000]        <1> 	mov esi, pwdask
  3619 00002BAF E894F1FFFF          <1> 	call print
  3620 00002BB4 5E                  <1> 	pop esi
  3621 00002BB5 46                  <1> 	inc esi
  3622 00002BB6 8935[AB2C0000]      <1> 	mov [esipass], esi
  3623                              <1> passcheck:
  3624 00002BBC E883F7FFFF          <1> 	call getchar
  3625 00002BC1 3C0A                <1> 	cmp al, 10
  3626 00002BC3 0F8438000000        <1> 	je near gotpass
  3627 00002BC9 3C08                <1> 	cmp al, 8
  3628 00002BCB 0F8412000000        <1> 	je near backpass
  3629 00002BD1 8806                <1> 	mov [esi], al
  3630 00002BD3 46                  <1> 	inc esi
  3631 00002BD4 30E4                <1> 	xor ah, ah
  3632 00002BD6 B02A                <1> 	mov al, "*"
  3633 00002BD8 E8E3F7FFFF          <1> 	call prcharint
  3634 00002BDD EBDD                <1> 	jmp passcheck
  3635 00002BDF 08200800            <1> backcursor2 db 8," ",8,0
  3636                              <1> backpass:
  3637 00002BE3 3B35[AB2C0000]      <1> 	cmp esi, [esipass]
  3638 00002BE9 0F84CDFFFFFF        <1> 	je near passcheck
  3639 00002BEF 4E                  <1> 	dec esi
  3640 00002BF0 C60600              <1> 	mov byte [esi], 0
  3641 00002BF3 56                  <1> 	push esi
  3642 00002BF4 BE[DF2B0000]        <1> 	mov esi, backcursor2
  3643 00002BF9 E84AF1FFFF          <1> 	call print
  3644 00002BFE 5E                  <1> 	pop esi
  3645 00002BFF EBBB                <1> 	jmp passcheck
  3646                              <1> gotpass:
  3647 00002C01 B00A                <1> 	mov al, 10
  3648 00002C03 E8B8F7FFFF          <1> 	call prcharint
  3649 00002C08 30C0                <1> 	xor al, al
  3650 00002C0A 31C9                <1> 	xor ecx, ecx
  3651 00002C0C 8806                <1> 	mov [esi], al
  3652 00002C0E BB[49860000]        <1> 	mov ebx, userlst
  3653                              <1> userfind:
  3654 00002C13 BE[88C60300]        <1> 	mov esi, buftxt
  3655 00002C18 8A06                <1> 	mov al, [esi]
  3656 00002C1A 3C00                <1> 	cmp al, 0
  3657 00002C1C 0F84F4FEFFFF        <1> 	je near os
  3658 00002C22 891D[AF2C0000]      <1> 	mov [usercache], ebx
  3659 00002C28 E860030000          <1> 	call tester
  3660 00002C2D 3C01                <1> 	cmp al, 1
  3661 00002C2F 7416                <1> 	je pwdtest
  3662 00002C31 41                  <1> 	inc ecx
  3663                              <1> nxtuser:
  3664 00002C32 8A03                <1> 	mov al, [ebx]
  3665 00002C34 43                  <1> 	inc ebx
  3666 00002C35 3C00                <1> 	cmp al, 0
  3667 00002C37 75F9                <1> 	jne nxtuser
  3668 00002C39 81FB[6C860000]      <1> 	cmp ebx, userlstend
  3669 00002C3F 0F83D1FEFFFF        <1> 	jae near os
  3670 00002C45 EBCC                <1> 	jmp userfind
  3671                              <1> pwdtest:
  3672 00002C47 46                  <1> 	inc esi
  3673 00002C48 43                  <1> 	inc ebx
  3674 00002C49 E83F030000          <1> 	call tester
  3675 00002C4E 3C01                <1> 	cmp al, 1
  3676 00002C50 7402                <1> 	je pwdrgt
  3677 00002C52 EBDE                <1> 	jmp nxtuser
  3678                              <1> pwdrgt:
  3679 00002C54 D1E9                <1> 	shr ecx, 1
  3680 00002C56 890D[14B20300]      <1> 	mov [uid], ecx
  3681 00002C5C E897F1FFFF          <1> 	call clear
  3682 00002C61 31C9                <1> 	xor ecx, ecx
  3683 00002C63 41                  <1> 	inc ecx
  3684 00002C64 890D[30780500]      <1> 	mov [commandbufpos], ecx
  3685                              <1> returnfromexp:
  3686 00002C6A 66B90002            <1> 	mov cx, 200h
  3687 00002C6E BE[88C60300]        <1> 	mov esi, buftxt
  3688 00002C73 8935[892F0000]      <1> 	mov [currentcommandloc], esi
  3689 00002C79 E825000000          <1> 	call bufclr
  3690                              <1> clearolddata:
  3691 00002C7E 31C0                <1> 	xor eax, eax
  3692 00002C80 A2[19B20300]        <1> 	mov [IFON], al
  3693 00002C85 A2[1AB20300]        <1> 	mov [IFTRUE], al
  3694 00002C8A A2[82B20300]        <1> 	mov [BATCHISON], al
  3695 00002C8F A3[7EB20300]        <1> 	mov [BATCHPOS], eax
  3696 00002C94 A2[83B20300]        <1> 	mov [LOOPON], al
  3697 00002C99 A3[84B20300]        <1> 	mov [LOOPPOS], eax
  3698 00002C9E E933000000          <1> 	jmp nwcmd
  3699                              <1> bufclr:	
  3700 00002CA3 30C0                <1> 	xor al, al
  3701 00002CA5 8806                <1> 	mov [esi], al
  3702 00002CA7 46                  <1> 	inc esi
  3703 00002CA8 E2F9                <1> 	loop bufclr
  3704 00002CAA C3                  <1> 	ret
  3705                              <1> 
  3706 00002CAB 00000000            <1> esipass dd 0
  3707 00002CAF [49860000]          <1> usercache dd userlst
  3708                              <1> 	
  3709                              <1> buftxtclear:
  3710 00002CB3 30C0                <1> 	xor al, al
  3711 00002CB5 BE[88C60300]        <1> 	mov esi, buftxt
  3712 00002CBA 81FE[88CA0300]      <1> clearbuftxt: cmp esi, buf2
  3713 00002CC0 730E                <1> 	jae retbufclr
  3714 00002CC2 8806                <1> 	mov [esi], al
  3715 00002CC4 46                  <1> 	inc esi
  3716 00002CC5 EBF3                <1> 	jmp clearbuftxt
  3717                              <1> 
  3718 00002CC7 39DE                <1> clearitbuf: cmp esi, ebx
  3719 00002CC9 7305                <1> 	jae retbufclr
  3720 00002CCB 8806                <1> 	mov [esi], al
  3721 00002CCD 46                  <1> 	inc esi
  3722 00002CCE EBF7                <1> 	jmp clearitbuf
  3723 00002CD0 C3                  <1> retbufclr: ret
  3724                              <1> 
  3725 00002CD1 E900000000          <1> full:	jmp nwcmd
  3726                              <1> 
  3727                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3728                              <1> nwcmd:
  3729 00002CD6 FB                  <1> 	sti
  3730 00002CD7 31C0                <1> 	xor eax, eax
  3731 00002CD9 3905[AB2E0000]      <1> 	cmp [nextcommandloc], eax
  3732 00002CDF 7413                <1> 	je nomultiplecommand
  3733 00002CE1 8B35[AB2E0000]      <1> 	mov esi, [nextcommandloc]
  3734 00002CE7 8935[AF2E0000]      <1> 	mov [thiscommandloc], esi
  3735 00002CED E8C6010000          <1> 	call fixvariables
  3736 00002CF2 EBE2                <1> 	jmp nwcmd
  3737                              <1> nomultiplecommand:
  3738 00002CF4 A3[AF2E0000]        <1> 	mov [thiscommandloc], eax
  3739 00002CF9 3805[9E680000]      <1> 	cmp [threadson], al
  3740 00002CFF 7405                <1> 	je noclinwcmd
  3741 00002D01 A2[9E680000]        <1> 	mov [threadson], al
  3742                              <1> noclinwcmd:
  3743 00002D06 B001                <1> 	mov al, 1
  3744 00002D08 3805[82B20300]      <1> 	cmp [BATCHISON], al
  3745 00002D0E 7501                <1> 	jne cancel
  3746 00002D10 C3                  <1> 	ret
  3747 00002D11 30C0                <1> cancel:	xor al, al
  3748 00002D13 A2[19B20300]        <1> 	mov [IFON], al
  3749 00002D18 A2[82B20300]        <1> 	mov [BATCHISON], al
  3750 00002D1D B05B                <1> 	mov al, '['
  3751 00002D1F 66BB0700            <1> 	mov bx, 7
  3752 00002D23 E8AFF6FFFF          <1> 	call prcharq
  3753 00002D28 8B35[AF2C0000]      <1> 	mov esi, [usercache]
  3754 00002D2E E8F1EFFFFF          <1> 	call printquiet
  3755 00002D33 BE[37860000]        <1> 	mov esi, computer
  3756 00002D38 E8E7EFFFFF          <1> 	call printquiet
  3757 00002D3D BE[14B00300]        <1> 	mov esi, currentfolder
  3758 00002D42 0335[0CB00300]      <1> 	add esi, [lastfolderloc]
  3759 00002D48 E8D7EFFFFF          <1> 	call printquiet
  3760 00002D4D BE[42860000]        <1> 	mov esi, endprompt
  3761 00002D52 E8F1EFFFFF          <1> 	call print
  3762 00002D57 E857FFFFFF          <1> 	call buftxtclear
  3763 00002D5C BE[88C60300]        <1> 	mov esi, buftxt
  3764 00002D61 C605[2D230000]01    <1> 	mov byte [commandedit], 1
  3765 00002D68 B00A                <1> 	mov al, 10
  3766 00002D6A 66BB0700            <1> 	mov bx, 7
  3767 00002D6E BF[88CA0300]        <1> 	mov edi, buftxtend
  3768 00002D73 E804F1FFFF          <1> 	call rdprint
  3769 00002D78 C605[2D230000]00    <1> 	mov byte [commandedit], 0
  3770 00002D7F 803D[88C60300]00    <1> 	cmp byte [buftxt], 0
  3771 00002D86 0F844AFFFFFF        <1> 	je near nwcmd
  3772 00002D8C 8B35[30780500]      <1> gotcmd:	mov esi, [commandbufpos]
  3773 00002D92 8935[2C780500]      <1> 	mov [lastcommandpos], esi
  3774 00002D98 FF05[38780500]      <1> 	inc dword [commandsentered]
  3775 00002D9E BF[88C60300]        <1> 	mov edi, buftxt
  3776 00002DA3 81C6[3C780500]      <1> 	add esi, commandbuf
  3777 00002DA9 81FE[3C880500]      <1> 	cmp esi, commandbufend
  3778 00002DAF 7605                <1> 	jbe copycommand
  3779 00002DB1 BE[3C780500]        <1> 	mov esi, commandbuf
  3780                              <1> copycommand:
  3781 00002DB6 8A07                <1> 	mov al, [edi]
  3782 00002DB8 8806                <1> 	mov [esi], al
  3783 00002DBA 47                  <1> 	inc edi
  3784 00002DBB 46                  <1> 	inc esi
  3785 00002DBC 3C00                <1> 	cmp al, 0
  3786 00002DBE 740F                <1> 	je donecopy
  3787 00002DC0 81FE[3C880500]      <1> 	cmp esi, commandbufend
  3788 00002DC6 76EE                <1> 	jbe copycommand
  3789 00002DC8 BE[3C780500]        <1> 	mov esi, commandbuf
  3790 00002DCD EBE7                <1> 	jmp copycommand
  3791                              <1> donecopy:
  3792 00002DCF 81EE[3C780500]      <1> 	sub esi, commandbuf
  3793 00002DD5 8935[30780500]      <1> 	mov [commandbufpos], esi
  3794 00002DDB E8D3000000          <1> 	call run
  3795 00002DE0 E9F1FEFFFF          <1> 	jmp nwcmd
  3796                              <1> 
  3797 00002DE5 E8C9FEFFFF          <1> input:	call buftxtclear
  3798 00002DEA BE[88C60300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3799 00002DEF BF[88CA0300]        <1> 	mov edi, buftxtend
  3800 00002DF4 B00A                <1> stdin:	mov al, 10
  3801 00002DF6 B307                <1> 	mov bl, 7
  3802 00002DF8 E87FF0FFFF          <1> 	call rdprint
  3803 00002DFD C3                  <1> 	ret
  3804                              <1> 
  3805                              <1> replacevariable:
  3806 00002DFE 8A4601              <1> 	mov al, [esi + 1]
  3807 00002E01 C64601FF            <1> 	mov byte [esi + 1], 255
  3808 00002E05 3C24                <1> 	cmp al, "$"
  3809 00002E07 0F84AB000000        <1> 	je near fixvariables
  3810 00002E0D 884601              <1> 	mov [esi + 1], al
  3811 00002E10 56                  <1> 	push esi
  3812 00002E11 81EE[88C60300]      <1> 	sub esi, buftxt
  3813 00002E17 89F7                <1> 	mov edi, esi
  3814 00002E19 81C6[88C60300]      <1> 	add esi, buftxt
  3815 00002E1F 47                  <1> 	inc edi
  3816 00002E20 BB[88B20300]        <1> 	mov ebx, variables
  3817 00002E25 E8FD160000          <1> 	call nxtvrech
  3818 00002E2A 89F7                <1> 	mov edi, esi
  3819 00002E2C 31DB                <1> 	xor ebx, ebx
  3820 00002E2E 4E                  <1> 	dec esi
  3821                              <1> findvarname:
  3822 00002E2F 4E                  <1> 	dec esi
  3823 00002E30 8A06                <1> 	mov al, [esi]
  3824 00002E32 43                  <1> 	inc ebx
  3825 00002E33 3C04                <1> 	cmp al, 4
  3826 00002E35 75F8                <1> 	jne findvarname
  3827 00002E37 5E                  <1> 	pop esi
  3828                              <1> replacevarloop:
  3829 00002E38 8A07                <1> 	mov al, [edi]
  3830 00002E3A 3C00                <1> 	cmp al, 0
  3831 00002E3C 0F8413000000        <1> 	je near compressbuftxt
  3832 00002E42 81FB00000000        <1> 	cmp ebx, 0
  3833 00002E48 0F8416000000        <1> 	je near expandbuftxt
  3834 00002E4E 8806                <1> 	mov [esi], al
  3835 00002E50 4B                  <1> 	dec ebx
  3836 00002E51 46                  <1> 	inc esi
  3837 00002E52 47                  <1> 	inc edi
  3838 00002E53 EBE3                <1> 	jmp replacevarloop
  3839                              <1> compressbuftxt:
  3840 00002E55 8A041E              <1> 	mov al, [esi + ebx]
  3841 00002E58 8806                <1> 	mov [esi], al
  3842 00002E5A 46                  <1> 	inc esi
  3843 00002E5B 3C00                <1> 	cmp al, 0
  3844 00002E5D 75F6                <1> 	jne compressbuftxt
  3845 00002E5F E954000000          <1> 	jmp fixvariables
  3846                              <1> expandbuftxt:
  3847 00002E64 89F1                <1> 	mov ecx, esi
  3848 00002E66 8A26                <1> 	mov ah, [esi]
  3849                              <1> expandbuftxtlp:
  3850 00002E68 8A1E                <1> 	mov bl, [esi]
  3851 00002E6A 46                  <1> 	inc esi
  3852 00002E6B 8A3E                <1> 	mov bh, [esi]
  3853 00002E6D 8826                <1> 	mov [esi], ah
  3854 00002E6F 88FC                <1> 	mov ah, bh
  3855 00002E71 80FB00              <1> 	cmp bl, 0
  3856 00002E74 75F2                <1> 	jne expandbuftxtlp
  3857 00002E76 89CE                <1> 	mov esi, ecx
  3858 00002E78 8806                <1> 	mov [esi], al
  3859 00002E7A 47                  <1> 	inc edi
  3860 00002E7B 8A07                <1> 	mov al, [edi]
  3861 00002E7D 3C00                <1> 	cmp al, 0
  3862 00002E7F 0F8433000000        <1> 	je near fixvariables
  3863 00002E85 46                  <1> 	inc esi
  3864 00002E86 EBDC                <1> 	jmp expandbuftxt
  3865                              <1> multipleprogline:
  3866 00002E88 30E4                <1> 	xor ah, ah
  3867 00002E8A 8826                <1> 	mov [esi], ah
  3868 00002E8C 46                  <1> 	inc esi
  3869 00002E8D 8935[AB2E0000]      <1> 	mov [nextcommandloc], esi
  3870 00002E93 E93E000000          <1> 	jmp donefixvariables
  3871                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3872 00002E98 46                  <1> 	inc esi
  3873 00002E99 8A06                <1> 	mov al, [esi]
  3874 00002E9B C606FF              <1> 	mov byte [esi], 255
  3875 00002E9E 3C23                <1> 	cmp al, '#'
  3876 00002EA0 7416                <1> 	je fixvariables
  3877 00002EA2 4E                  <1> 	dec esi
  3878 00002EA3 C60600              <1> 	mov byte [esi], 0
  3879 00002EA6 E90D000000          <1> 	jmp fixvariables
  3880                              <1> 	
  3881 00002EAB 00000000            <1> nextcommandloc dd 0
  3882 00002EAF 00000000            <1> thiscommandloc dd 0	
  3883                              <1> run:
  3884 00002EB3 BE[88C60300]        <1> 	mov esi, buftxt
  3885                              <1> fixvariables:
  3886 00002EB8 46                  <1> 	inc esi
  3887 00002EB9 8A06                <1> 	mov al, [esi]
  3888 00002EBB 3C23                <1> 	cmp al, '#'	;inline comment
  3889 00002EBD 74D9                <1> 	je inlinecomment
  3890 00002EBF 3C24                <1> 	cmp al, '$' ;variable
  3891 00002EC1 0F8437FFFFFF        <1> 	je near replacevariable
  3892 00002EC7 3C3B                <1> 	cmp al, ';' ;program list
  3893 00002EC9 74BD                <1> 	je multipleprogline
  3894 00002ECB 3C00                <1> 	cmp al, 0
  3895 00002ECD 75E9                <1> 	jne fixvariables
  3896 00002ECF 31C0                <1> 	xor eax, eax
  3897 00002ED1 A3[AB2E0000]        <1> 	mov [nextcommandloc], eax
  3898                              <1> donefixvariables:
  3899 00002ED6 803D[93340000]00    <1> 	cmp byte [indexdone], 0
  3900 00002EDD 7505                <1> 	jne progtest
  3901 00002EDF E81A050000          <1> 	call indexfiles
  3902                              <1> progtest:
  3903 00002EE4 31C0                <1> 	xor eax, eax
  3904 00002EE6 BB[08AC0300]        <1> 	mov ebx, fileindex
  3905 00002EEB 668B03              <1> prgnxt:	mov ax, [ebx]
  3906 00002EEE B1FF                <1> 	mov cl, 255
  3907 00002EF0 B52C                <1> 	mov ch, 44
  3908 00002EF2 6639C8              <1> 	cmp ax, cx
  3909 00002EF5 740B                <1> 	je fndprg
  3910 00002EF7 43                  <1> 	inc ebx
  3911 00002EF8 81FB[08B00300]      <1> 	cmp ebx, fileindexend
  3912 00002EFE 735D                <1> 	jae prgnf
  3913 00002F00 EBE9                <1> 	jmp prgnxt
  3914 00002F02 81C302000000        <1> fndprg: add ebx, 2
  3915 00002F08 31C9                <1> 	xor ecx, ecx
  3916 00002F0A BE[88C60300]        <1> 	mov esi, buftxt
  3917 00002F0F 390D[AF2E0000]      <1> 	cmp [thiscommandloc], ecx
  3918 00002F15 7406                <1> 	je noprgtstmultiple
  3919 00002F17 8B35[AF2E0000]      <1> 	mov esi, [thiscommandloc]
  3920                              <1> noprgtstmultiple:
  3921 00002F1D E8A6000000          <1> 	call cndtest
  3922 00002F22 3C01                <1> 	cmp al, 1
  3923 00002F24 7302                <1> 	jae prggood
  3924 00002F26 EBC3                <1> 	jmp prgnxt
  3925 00002F28 81FB[08B00300]      <1> prggood: cmp ebx, fileindexend
  3926 00002F2E 7358                <1> 	jae prgdn
  3927 00002F30 31C0                <1> 	xor eax, eax
  3928 00002F32 BE[88C60300]        <1> 	mov esi, buftxt
  3929 00002F37 3905[AF2E0000]      <1> 	cmp [thiscommandloc], eax
  3930 00002F3D 7406                <1> 	je noprggoodmul
  3931 00002F3F 8B35[AF2E0000]      <1> 	mov esi, [thiscommandloc]
  3932                              <1> noprggoodmul:
  3933 00002F45 8935[892F0000]      <1> 	mov [currentcommandloc], esi
  3934 00002F4B 81C303000000        <1> 	add ebx, 3
  3935 00002F51 8B3B                <1> 	mov edi, [ebx]
  3936 00002F53 C605[9E680000]02    <1> 	mov byte [threadson], 2
  3937 00002F5A FFD7                <1> 	call edi
  3938 00002F5C C3                  <1> 	ret
  3939                              <1> prgnf:	
  3940 00002F5D 8B35[892F0000]      <1> 	mov esi, [currentcommandloc]
  3941 00002F63 8A06                <1> 	mov al, [esi]
  3942 00002F65 3C00                <1> 	cmp al, 0
  3943 00002F67 741F                <1> 	je prgdn
  3944 00002F69 BE[0E860000]        <1> 	mov esi, notfound1
  3945 00002F6E E8D5EDFFFF          <1> 	call print
  3946 00002F73 8B35[892F0000]      <1> 	mov esi, [currentcommandloc]
  3947 00002F79 E8CAEDFFFF          <1> 	call print
  3948 00002F7E BE[16860000]        <1> 	mov esi, notfound2
  3949 00002F83 E8C0EDFFFF          <1> 	call print
  3950 00002F88 C3                  <1> prgdn:	ret
  3951                              <1> 
  3952 00002F89 00000000            <1> currentcommandloc dd 0
  3953                              <1> 
  3954                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3955 00002F8D 6631C0              <1> 	xor ax, ax
  3956 00002F90 8A06                <1> retest:	mov al, [esi]
  3957 00002F92 8A23                <1> 	mov ah, [ebx]
  3958 00002F94 3C00                <1> 	cmp al, 0
  3959 00002F96 7408                <1> 	je testtrue
  3960 00002F98 38E0                <1> 	cmp al, ah
  3961 00002F9A 750C                <1> 	jne testfalse
  3962 00002F9C 43                  <1> 	inc ebx
  3963 00002F9D 46                  <1> 	inc esi
  3964 00002F9E EBF0                <1> 	jmp retest
  3965                              <1> testtrue:
  3966 00002FA0 80FC00              <1> 	cmp ah, 0
  3967 00002FA3 7503                <1> 	jne testfalse
  3968 00002FA5 B001                <1> 	mov al, 1
  3969 00002FA7 C3                  <1> 	ret
  3970                              <1> testfalse:
  3971 00002FA8 30C0                <1> 	xor al, al
  3972 00002FAA C3                  <1> 	ret
  3973                              <1> 
  3974                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3975 00002FAB 30C0                <1> 	xor al, al
  3976                              <1> opretest:
  3977 00002FAD 8A06                <1> 	mov al, [esi]
  3978 00002FAF 8A23                <1> 	mov ah, [ebx]
  3979 00002FB1 38E0                <1> 	cmp al, ah
  3980 00002FB3 7510                <1> 	jne optestfalse
  3981 00002FB5 80FC00              <1> 	cmp ah, 0
  3982 00002FB8 7404                <1> 	je optesttrue
  3983 00002FBA 43                  <1> 	inc ebx
  3984 00002FBB 46                  <1> 	inc esi
  3985 00002FBC EBEF                <1> 	jmp opretest
  3986                              <1> optesttrue:
  3987 00002FBE 3C00                <1> 	cmp al, 0
  3988 00002FC0 7503                <1> 	jne optestfalse
  3989 00002FC2 B001                <1> 	mov al, 1
  3990 00002FC4 C3                  <1> 	ret
  3991                              <1> optestfalse:
  3992 00002FC5 30C0                <1> 	xor al, al
  3993 00002FC7 C3                  <1> 	ret
  3994                              <1> 
  3995                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3996 00002FC8 30C0                <1> 	xor al, al
  3997 00002FCA 8A06                <1> cndretest:	mov al, [esi]
  3998 00002FCC 8A23                <1> 	mov ah, [ebx]
  3999 00002FCE 38CC                <1> 	cmp ah, cl
  4000 00002FD0 7408                <1> 	je cndtesttrue
  4001 00002FD2 38E0                <1> 	cmp al, ah
  4002 00002FD4 750B                <1> 	jne cndtestfalse
  4003 00002FD6 43                  <1> 	inc ebx
  4004 00002FD7 46                  <1> 	inc esi
  4005 00002FD8 EBF0                <1> 	jmp cndretest
  4006                              <1> cndtesttrue:
  4007 00002FDA 38C8                <1> 	cmp al, cl
  4008 00002FDC 7506                <1> 	jne cndtestalmost
  4009 00002FDE B001                <1> 	mov al, 1
  4010 00002FE0 C3                  <1> 	ret
  4011                              <1> cndtestfalse:
  4012 00002FE1 30C0                <1> 	xor al, al
  4013 00002FE3 C3                  <1> 	ret
  4014                              <1> cndtestalmost:
  4015 00002FE4 B002                <1> 	mov al, 2
  4016 00002FE6 C3                  <1> 	ret
  4017                              <1> 	
  4018                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4019                              <1> 		                ;ends if array seperator is found backwards after 0
  4020                              <1> 	arnxt:	      
  4021 00002FE7 88E8                <1> 		mov al, ch
  4022 00002FE9 88CC                <1> 		mov ah, cl        
  4023 00002FEB 663906              <1> 		cmp [esi], ax
  4024 00002FEE 7448                <1> 		je ardn
  4025 00002FF0 66390E              <1> 		cmp [esi], cx
  4026 00002FF3 7407                <1> 		je arfnd
  4027 00002FF5 46                  <1> 		inc esi
  4028 00002FF6 39DE                <1> 		cmp esi, ebx
  4029 00002FF8 733E                <1> 		jae ardn
  4030 00002FFA EBEB                <1> 		jmp arnxt
  4031 00002FFC 81C602000000        <1> 	arfnd: add esi, 2
  4032 00003002 891D[39300000]      <1> 		mov [arbx], ebx
  4033 00003008 890D[3D300000]      <1> 		mov [arcx], ecx
  4034 0000300E E835EDFFFF          <1> 		call print
  4035 00003013 8935[3F300000]      <1> 		mov [arsi], esi
  4036 00003019 E825EDFFFF          <1> 		call printline
  4037 0000301E 8B1D[39300000]      <1> 		mov ebx, [arbx]
  4038 00003024 668B0D[3D300000]    <1> 		mov cx, [arcx]
  4039 0000302B 8B35[3F300000]      <1> 		mov esi, [arsi]
  4040 00003031 46                  <1> 		inc esi
  4041 00003032 39DE                <1> 		cmp esi, ebx
  4042 00003034 7302                <1> 		jae ardn
  4043 00003036 EBAF                <1> 		jmp arnxt
  4044 00003038 C3                  <1> 	ardn:	ret
  4045 00003039 00000000            <1> arbx:	dw 0,0
  4046 0000303D 0000                <1> arcx:	db 0,0
  4047 0000303F 00000000            <1> arsi:	dw 0,0
  4048                              <1> 
  4049                              <1> clearbuffer:
  4050 00003043 BE[88CA0300]        <1> 	mov esi, buf2
  4051 00003048 B030                <1> 	mov al, '0'
  4052 0000304A 81FE[9CCA0300]      <1> clearbuf: cmp esi, numbuf
  4053 00003050 7305                <1> 	jae doneclearbuff
  4054 00003052 8806                <1> 	mov [esi], al
  4055 00003054 46                  <1> 	inc esi
  4056 00003055 EBF3                <1> 	jmp clearbuf
  4057                              <1> doneclearbuff: 
  4058 00003057 C3                  <1> 		ret
  4059                              <1> 
  4060                              <1> convert:
  4061 00003058 4E                  <1> 	dec esi
  4062 00003059 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4063                              <1> .lp:
  4064 0000305B 89DE                <1> 	mov esi, ebx
  4065 0000305D 81EE09000000        <1> 	sub esi, 9
  4066 00003063 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4067 00003069 720A                <1> 	jb .8
  4068 0000306B 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4069 00003071 FE06                <1> 	inc byte [esi]
  4070 00003073 EBE6                <1> 	jmp .lp
  4071 00003075 46                  <1> .8:	inc esi
  4072 00003076 81F900E1F505        <1> 	cmp ecx, 100000000
  4073 0000307C 720A                <1> 	jb .7
  4074 0000307E 81E900E1F505        <1> 	sub ecx, 100000000
  4075 00003084 FE06                <1> 	inc byte [esi]
  4076 00003086 EBD3                <1> 	jmp .lp
  4077 00003088 46                  <1> .7:	inc esi
  4078 00003089 81F980969800        <1> 	cmp ecx, 10000000
  4079 0000308F 720A                <1> 	jb .6
  4080 00003091 81E980969800        <1> 	sub ecx, 10000000
  4081 00003097 FE06                <1> 	inc byte [esi]
  4082 00003099 EBC0                <1> 	jmp .lp
  4083 0000309B 46                  <1> .6:	inc esi
  4084 0000309C 81F940420F00        <1> 	cmp ecx, 1000000
  4085 000030A2 720A                <1> 	jb .5
  4086 000030A4 81E940420F00        <1> 	sub ecx, 1000000
  4087 000030AA FE06                <1> 	inc byte [esi]
  4088 000030AC EBAD                <1> 	jmp .lp
  4089 000030AE 46                  <1> .5:	inc esi
  4090 000030AF 81F9A0860100        <1> 	cmp ecx, 100000
  4091 000030B5 720A                <1> 	jb .4
  4092 000030B7 81E9A0860100        <1> 	sub ecx, 100000
  4093 000030BD FE06                <1> 	inc byte [esi]
  4094 000030BF EB9A                <1> 	jmp .lp
  4095 000030C1 46                  <1> .4:	inc esi
  4096 000030C2 81F910270000        <1> 	cmp ecx, 10000
  4097 000030C8 720A                <1> 	jb .3
  4098 000030CA 81E910270000        <1> 	sub ecx, 10000
  4099 000030D0 FE06                <1> 	inc byte [esi]
  4100 000030D2 EB87                <1> 	jmp .lp
  4101 000030D4 46                  <1> .3:	inc esi
  4102 000030D5 81F9E8030000        <1> 	cmp ecx, 1000
  4103 000030DB 720D                <1> 	jb .2
  4104 000030DD 81E9E8030000        <1> 	sub ecx, 1000
  4105 000030E3 FE06                <1> 	inc byte [esi]
  4106 000030E5 E971FFFFFF          <1> 	jmp .lp
  4107 000030EA 46                  <1> .2:	inc esi
  4108 000030EB 81F964000000        <1> 	cmp ecx, 100
  4109 000030F1 720D                <1> 	jb .1
  4110 000030F3 81E964000000        <1> 	sub ecx, 100
  4111 000030F9 FE06                <1> 	inc byte [esi]
  4112 000030FB E95BFFFFFF          <1> 	jmp .lp
  4113 00003100 46                  <1> .1:	inc esi
  4114 00003101 81F90A000000        <1> 	cmp ecx, 10
  4115 00003107 720D                <1> 	jb .0
  4116 00003109 81E90A000000        <1> 	sub ecx, 10
  4117 0000310F FE06                <1> 	inc byte [esi]
  4118 00003111 E945FFFFFF          <1> 	jmp .lp
  4119 00003116 46                  <1> .0:	inc esi
  4120 00003117 81F901000000        <1> 	cmp ecx, 1
  4121 0000311D 720D                <1> 	jb .dn
  4122 0000311F 81E901000000        <1> 	sub ecx, 1
  4123 00003125 FE06                <1> 	inc byte [esi]
  4124 00003127 E92FFFFFFF          <1> 	jmp .lp
  4125                              <1> .dn:
  4126 0000312C C3                  <1> 	ret
  4127                              <1> 
  4128                              <1> 	
  4129                              <1> 
  4130 0000312D 00<rept>            <1> hexnumber times 8 db 0
  4131 00003135 202000              <1> hexnumberend db "  ",0
  4132                              <1> 
  4133                              <1> converthex:
  4134                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4135 00003138 56                  <1> 	push esi
  4136 00003139 B030                <1> 	mov al, "0"
  4137 0000313B 39FE                <1> .clearlp: cmp esi, edi
  4138 0000313D 7305                <1> 	jae .doneclear
  4139 0000313F 8806                <1> 	mov [esi], al
  4140 00003141 46                  <1> 	inc esi
  4141 00003142 EBF7                <1> 	jmp .clearlp
  4142                              <1> .doneclear:
  4143 00003144 81EE02000000        <1> 	sub esi, 2
  4144 0000314A 89C8                <1> 	mov eax, ecx
  4145                              <1> .loop:
  4146 0000314C 30FF                <1> 	xor bh, bh
  4147 0000314E 88C3                <1> 	mov bl, al
  4148 00003150 66C1E304            <1> 	shl bx, 4
  4149 00003154 C0EB04              <1> 	shr bl, 4
  4150 00003157 86DF                <1> 	xchg bl, bh ;they are backwards
  4151 00003159 80C330              <1> 	add bl, 48
  4152 0000315C 80FB39              <1> 	cmp bl, "9"
  4153 0000315F 7609                <1> 	jbe .goodbl
  4154 00003161 80EB30              <1> 	sub bl, 48
  4155 00003164 80EB0A              <1> 	sub bl, 0xA
  4156 00003167 80C341              <1> 	add bl, "A"
  4157                              <1> .goodbl:
  4158 0000316A 80C730              <1> 	add bh, 48
  4159 0000316D 80FF39              <1> 	cmp bh, "9"
  4160 00003170 7609                <1> 	jbe .goodbh
  4161 00003172 80EF30              <1> 	sub bh, 48
  4162 00003175 80EF0A              <1> 	sub bh, 0xA
  4163 00003178 80C741              <1> 	add bh, "A"
  4164                              <1> .goodbh:
  4165 0000317B C1E808              <1> 	shr eax, 8
  4166 0000317E 66891E              <1> 	mov [esi], bx
  4167 00003181 81EE02000000        <1> 	sub esi, 2
  4168 00003187 3B3424              <1> 	cmp esi, [esp]
  4169 0000318A 7207                <1> 	jb .done
  4170 0000318C 3D00000000          <1> 	cmp eax, 0
  4171 00003191 75B9                <1> 	jne .loop
  4172                              <1> .done:
  4173 00003193 5E                  <1> 	pop esi
  4174 00003194 C3                  <1> 	ret
  4175                              <1> 	
  4176                              <1> 	
  4177 00003195 00                  <1> smallhex db 0
  4178 00003196 01                  <1> firsthexshown db 1
  4179                              <1> showhexsmall:
  4180 00003197 C605[95310000]01    <1> 	mov byte [smallhex], 1
  4181 0000319E E808000000          <1> 	call showhex
  4182 000031A3 C605[95310000]00    <1> 	mov byte [smallhex], 0
  4183 000031AA C3                  <1> 	ret
  4184                              <1> showhex:
  4185 000031AB 60                  <1> 	pusha
  4186 000031AC BE[2D310000]        <1> 	mov esi, hexnumber
  4187 000031B1 BF[35310000]        <1> 	mov edi, hexnumberend
  4188 000031B6 E87DFFFFFF          <1> 	call converthex
  4189 000031BB 803D[96310000]01    <1> 	cmp byte [firsthexshown], 1
  4190 000031C2 7503                <1> 	jne .show
  4191 000031C4 6631D2              <1> 	xor dx, dx
  4192                              <1> .show:
  4193 000031C7 803D[96310000]03    <1> 	cmp byte [firsthexshown], 3
  4194 000031CE 7505                <1> 	jne .nonewhexline
  4195 000031D0 E86EEBFFFF          <1> 	call printline
  4196                              <1> .nonewhexline:
  4197 000031D5 803D[96310000]04    <1> 	cmp byte [firsthexshown], 4
  4198 000031DC 7522                <1> 	jne .notab
  4199 000031DE B1A0                <1> 	mov cl, 160
  4200 000031E0 28D1                <1> 	sub cl, dl
  4201 000031E2 C0E905              <1> 	shr cl, 5
  4202 000031E5 C0E105              <1> 	shl cl, 5
  4203 000031E8 80F900              <1> 	cmp cl, 0
  4204 000031EB 750A                <1> 	jne .nonewline
  4205 000031ED E851EBFFFF          <1> 	call printline
  4206 000031F2 E909000000          <1> 	jmp .notab
  4207                              <1> .nonewline:
  4208 000031F7 80C20F              <1> 	add dl, 15
  4209 000031FA C0EA04              <1> 	shr dl, 4
  4210 000031FD C0E204              <1> 	shl dl, 4
  4211                              <1> .notab:
  4212 00003200 BE[2D310000]        <1> 	mov esi, hexnumber
  4213 00003205 803D[95310000]01    <1> 	cmp byte [smallhex],1
  4214 0000320C 7506                <1> 	jne .nosmall
  4215 0000320E 81C606000000        <1> 	add esi, 6
  4216                              <1> .nosmall:
  4217 00003214 803D[96310000]05    <1> 	cmp byte [firsthexshown], 5
  4218 0000321B 750A                <1> 	jne .noquiet
  4219 0000321D E802EBFFFF          <1> 	call printquiet
  4220 00003222 E918000000          <1> 	jmp .donequiet
  4221                              <1> .noquiet:
  4222 00003227 803D[96310000]06    <1> 	cmp byte [firsthexshown], 6
  4223 0000322E 750A                <1> 	jne .normal
  4224 00003230 E802EBFFFF          <1> 	call printhighlight
  4225 00003235 E905000000          <1> 	jmp .donequiet
  4226                              <1> .normal:
  4227 0000323A E809EBFFFF          <1> 	call print
  4228                              <1> .donequiet:
  4229 0000323F 803D[96310000]02    <1> 	cmp byte [firsthexshown], 2
  4230 00003246 7505                <1> 	jne .shown
  4231 00003248 E8F6EAFFFF          <1> 	call printline
  4232                              <1> .shown:
  4233 0000324D C605[96310000]00    <1> 	mov byte [firsthexshown], 0
  4234 00003254 61                  <1> 	popa
  4235 00003255 C3                  <1> 	ret
  4236                              <1> 
  4237                              <1> 
  4238 00003256 303030303030303030- <1> decnumber db "00000000000000"
  4239 0000325F 3030303030          <1>
  4240 00003264 2000                <1> decnumberend: db " ",0
  4241                              <1> 
  4242                              <1> showdec: ;same as showhex, just uses decimal conversion
  4243 00003266 60                  <1> 	pusha
  4244 00003267 BF[56320000]        <1> 	mov edi, decnumber
  4245 0000326C BE[64320000]        <1> 	mov esi, decnumberend
  4246                              <1> .clear:
  4247 00003271 C60730              <1> 	mov byte [edi], '0'
  4248 00003274 47                  <1> 	inc edi
  4249 00003275 39F7                <1> 	cmp edi, esi
  4250 00003277 72F8                <1> 	jb .clear
  4251 00003279 BF[56320000]        <1> 	mov edi, decnumber
  4252 0000327E E8D5FDFFFF          <1> 	call convert
  4253 00003283 803D[96310000]01    <1> 	cmp byte [firsthexshown], 1
  4254 0000328A 7503                <1> 	jne .show
  4255 0000328C 6631D2              <1> 	xor dx, dx
  4256                              <1> .show:
  4257 0000328F 803D[96310000]03    <1> 	cmp byte [firsthexshown], 3
  4258 00003296 7505                <1> 	jne .nonewdecline
  4259 00003298 E8A6EAFFFF          <1> 	call printline
  4260                              <1> .nonewdecline:
  4261 0000329D 803D[96310000]04    <1> 	cmp byte [firsthexshown], 4
  4262 000032A4 7522                <1> 	jne .notab
  4263 000032A6 B1A0                <1> 	mov cl, 160
  4264 000032A8 28D1                <1> 	sub cl, dl
  4265 000032AA C0E905              <1> 	shr cl, 5
  4266 000032AD C0E105              <1> 	shl cl, 5
  4267 000032B0 80F900              <1> 	cmp cl, 0
  4268 000032B3 750A                <1> 	jne .nonewline
  4269 000032B5 E889EAFFFF          <1> 	call printline
  4270 000032BA E909000000          <1> 	jmp .notab
  4271                              <1> .nonewline:
  4272 000032BF 80C20F              <1> 	add dl, 15
  4273 000032C2 C0EA04              <1> 	shr dl, 4
  4274 000032C5 C0E204              <1> 	shl dl, 4
  4275                              <1> .notab:
  4276 000032C8 BE[56320000]        <1> 	mov esi, decnumber
  4277 000032CD 4E                  <1> 	dec esi
  4278                              <1> .sifind:
  4279 000032CE 46                  <1> 	inc esi
  4280 000032CF 81FE[63320000]      <1> 	cmp esi, decnumberend - 1
  4281 000032D5 7305                <1> 	jae .nosifind
  4282 000032D7 803E30              <1> 	cmp byte [esi], '0'
  4283 000032DA 74F2                <1> 	je .sifind
  4284                              <1> .nosifind:
  4285 000032DC E867EAFFFF          <1> 	call print
  4286 000032E1 803D[96310000]02    <1> 	cmp byte [firsthexshown], 2
  4287 000032E8 7505                <1> 	jne .shown
  4288 000032EA E854EAFFFF          <1> 	call printline
  4289                              <1> .shown:
  4290 000032EF C605[96310000]00    <1> 	mov byte [firsthexshown], 0
  4291 000032F6 61                  <1> 	popa
  4292 000032F7 C3                  <1> 	ret
  4293                              <1> 	
  4294                              <1> cnvrthextxt:
  4295 000032F8 31C9                <1> 	xor ecx, ecx
  4296 000032FA 31C0                <1> 	xor eax, eax
  4297 000032FC 31D2                <1> 	xor edx, edx
  4298 000032FE 31DB                <1> 	xor ebx, ebx
  4299 00003300 4E                  <1> 	dec esi
  4300                              <1> .end:
  4301 00003301 46                  <1> 	inc esi
  4302 00003302 8A06                <1> 	mov al, [esi]
  4303 00003304 3C00                <1> 	cmp al, 0
  4304 00003306 75F9                <1> 	jne .end
  4305                              <1> .loop:
  4306 00003308 4E                  <1> 	dec esi
  4307 00003309 8A06                <1> 	mov al, [esi]
  4308 0000330B 3C41                <1> 	cmp al, "A"
  4309 0000330D 7328                <1> 	jae .char
  4310 0000330F 2C30                <1> 	sub al, 48
  4311 00003311 3C10                <1> 	cmp al, 16
  4312 00003313 7721                <1> 	ja .done
  4313                              <1> .donechar:
  4314 00003315 81FA00000000        <1> 	cmp edx, 0
  4315 0000331B 740E                <1> 	je .noshl
  4316 0000331D 89D3                <1> 	mov ebx, edx
  4317                              <1> .shl:
  4318 0000331F C1E004              <1> 	shl eax, 4
  4319 00003322 4B                  <1> 	dec ebx
  4320 00003323 81FB00000000        <1> 	cmp ebx, 0
  4321 00003329 75F4                <1> 	jne .shl
  4322                              <1> .noshl:
  4323 0000332B 42                  <1> 	inc edx
  4324 0000332C 01C1                <1> 	add ecx, eax
  4325 0000332E 81FA08000000        <1> 	cmp edx, 8
  4326 00003334 72D2                <1> 	jb .loop
  4327                              <1> .done:
  4328 00003336 C3                  <1> 	ret
  4329                              <1> .char:
  4330 00003337 3C46                <1> 	cmp al, "F"
  4331 00003339 77FB                <1> 	ja .done
  4332 0000333B 2C41                <1> 	sub al, "A"
  4333 0000333D 040A                <1> 	add al, 0xA
  4334 0000333F EBD4                <1> 	jmp .donechar
  4335                              <1> 	
  4336                              <1> 	
  4337                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4338 00003341 31C9                <1> 	xor ecx, ecx
  4339 00003343 31C0                <1> 	xor eax, eax
  4340 00003345 31D2                <1> 	xor edx, edx
  4341 00003347 31DB                <1> 	xor ebx, ebx
  4342 00003349 4E                  <1> 	dec esi
  4343                              <1> .lp:
  4344 0000334A 46                  <1> 	inc esi
  4345 0000334B 8A06                <1> 	mov al, [esi]
  4346 0000334D 3C00                <1> 	cmp al, 0
  4347 0000334F 75F9                <1> 	jne .lp
  4348 00003351 4E                  <1> 	dec esi
  4349 00003352 8A06                <1> 	mov al, [esi]
  4350 00003354 3C2E                <1> 	cmp al, '.'
  4351 00003356 7503                <1> 	jne .dot
  4352 00003358 46                  <1> 	inc esi
  4353 00003359 EBEF                <1> 	jmp .lp
  4354                              <1> .dot:
  4355 0000335B 3C20                <1> 	cmp al, ' '
  4356 0000335D 7404                <1> 	je .zero
  4357 0000335F 3C30                <1> 	cmp al, '0'
  4358 00003361 7504                <1> 	jne .txtlp
  4359                              <1> .zero: 
  4360 00003363 39FE                <1> 		cmp esi, edi
  4361 00003365 7441                <1> 		je .done
  4362                              <1> .txtlp:
  4363 00003367 31C0                <1> 	xor eax, eax
  4364 00003369 8A06                <1> 	mov al, [esi]
  4365 0000336B 3C3D                <1> 	cmp al, '='
  4366 0000336D 7439                <1> 	je .done
  4367 0000336F 3C30                <1> 	cmp al, 48
  4368 00003371 7235                <1> 	jb .done
  4369 00003373 3C23                <1> 	cmp al, '#'
  4370 00003375 7431                <1> 	je .done
  4371 00003377 39FE                <1> 	cmp esi, edi
  4372 00003379 722D                <1> 	jb .done
  4373 0000337B 81F900000000        <1> 	cmp ecx, 0
  4374 00003381 7708                <1> 	ja .exp
  4375 00003383 2C30                <1> .noexp:	sub al, 48
  4376 00003385 01C2                <1> 	add edx, eax
  4377 00003387 4E                  <1> 	dec esi
  4378 00003388 41                  <1> 	inc ecx
  4379 00003389 EBDC                <1> 	jmp .txtlp
  4380 0000338B 81F900000000        <1> .exp:	cmp ecx, 0
  4381 00003391 74F0                <1> 	je .noexp
  4382 00003393 2C30                <1> 	sub al, 48
  4383 00003395 51                  <1> 	push ecx
  4384                              <1> .expmul:
  4385 00003396 89C3                <1> 	mov ebx, eax
  4386 00003398 01D8                <1> 	add eax, ebx
  4387 0000339A C1E303              <1> 	shl ebx, 3
  4388 0000339D 01D8                <1> 	add eax, ebx
  4389 0000339F E2F5                <1> 	loop .expmul
  4390 000033A1 01C2                <1> 	add edx, eax
  4391 000033A3 59                  <1> 	pop ecx
  4392 000033A4 4E                  <1> 	dec esi
  4393 000033A5 41                  <1> 	inc ecx
  4394 000033A6 EBBF                <1> 	jmp .txtlp
  4395 000033A8 89D1                <1> .done: mov ecx, edx
  4396 000033AA C3                  <1> 	ret
  4397                              <1> 
  4398                              <1> benchmarki: ;output number of clocks since initial value
  4399 000033AB 0F31                <1> 	rdtsc
  4400 000033AD 8B1D[72860000]      <1> 	mov ebx, [initialtsc]
  4401 000033B3 8B0D[76860000]      <1> 	mov ecx, [initialtsc + 4]
  4402 000033B9 E90E000000          <1> 	jmp benchmarkl.calc
  4403                              <1> 
  4404                              <1> benchmarkl: ;output number of clocks since last benchmark
  4405 000033BE 0F31                <1> 	rdtsc
  4406 000033C0 8B1D[7A860000]      <1> 	mov ebx, [lasttsc]
  4407 000033C6 8B0D[7E860000]      <1> 	mov ecx, [lasttsc + 4]
  4408                              <1> .calc:
  4409 000033CC 29D8                <1> 	sub eax, ebx
  4410 000033CE 7701                <1> 	ja .noover
  4411 000033D0 4A                  <1> 	dec edx
  4412                              <1> .noover:
  4413 000033D1 29CA                <1> 	sub edx, ecx
  4414 000033D3 8B0C24              <1> 	mov ecx, [esp]
  4415 000033D6 E8D0FDFFFF          <1> 	call showhex
  4416 000033DB 89D1                <1> 	mov ecx, edx
  4417 000033DD E8C9FDFFFF          <1> 	call showhex
  4418 000033E2 89C1                <1> 	mov ecx, eax
  4419 000033E4 E8C2FDFFFF          <1> 	call showhex
  4420 000033E9 E855E9FFFF          <1> 	call printline
  4421 000033EE 0F31                <1> 	rdtsc
  4422 000033F0 A3[7A860000]        <1> 	mov [lasttsc], eax
  4423 000033F5 8915[7E860000]      <1> 	mov [lasttsc + 4], edx
  4424 000033FB C3                  <1> 	ret
  4425                                      %include "source/programs.asm"
  4426 000033FC FF2C                <1> filetypes db 255,44
  4427                              <1> progstart:		;programs start here
  4428                              <1> indexfiles:
  4429 000033FE BE[FE330000]        <1> 	mov esi, progstart
  4430 00003403 BB[08AC0300]        <1> 	mov ebx, fileindex
  4431 00003408 BF[FE330000]        <1> 	mov edi, progstart
  4432 0000340D 81EF02000000        <1> 	sub edi, 2
  4433                              <1> indexloop:
  4434 00003413 668B0E              <1> 	mov cx, [esi]
  4435                              <1> 	indexloop2:
  4436 00003416 663B0F              <1> 		cmp cx, [edi]
  4437 00003419 7424                <1> 		je indexloop2done
  4438 0000341B 81EF02000000        <1> 		sub edi, 2
  4439 00003421 81FF[FC330000]      <1> 		cmp edi, filetypes
  4440 00003427 73ED                <1> 		jae indexloop2
  4441 00003429 BF[FE330000]        <1> 	mov edi, progstart
  4442 0000342E 81EF02000000        <1> 	sub edi, 2
  4443 00003434 46                  <1> 	inc esi
  4444 00003435 81FE[35520000]      <1> 	cmp esi, batchprogend
  4445 0000343B 734E                <1> 	jae indexloopdone
  4446 0000343D EBD4                <1> 	jmp indexloop
  4447                              <1> indexloop2done:
  4448 0000343F 66890B              <1> 	mov [ebx], cx
  4449 00003442 81C302000000        <1> 	add ebx, 2
  4450 00003448 81C602000000        <1> 	add esi, 2
  4451                              <1> 	nameindex:
  4452 0000344E 8A0E                <1> 		mov cl, [esi]
  4453 00003450 80F900              <1> 		cmp cl, 0
  4454 00003453 7406                <1> 		je nameindexdone
  4455 00003455 880B                <1> 		mov [ebx], cl
  4456 00003457 46                  <1> 		inc esi
  4457 00003458 43                  <1> 		inc ebx
  4458 00003459 EBF3                <1> 		jmp nameindex
  4459                              <1> 	nameindexdone:
  4460 0000345B 43                  <1> 		inc ebx
  4461 0000345C 66C7030000          <1> 		mov word [ebx], 0
  4462 00003461 81C302000000        <1> 		add ebx, 2
  4463 00003467 46                  <1> 		inc esi
  4464 00003468 8933                <1> 		mov [ebx], esi
  4465 0000346A 81C304000000        <1> 		add ebx, 4
  4466 00003470 66C7030000          <1> 		mov word [ebx], 0
  4467 00003475 81C302000000        <1> 		add ebx, 2
  4468 0000347B 81FB[08B00300]      <1> 		cmp ebx, fileindexend
  4469 00003481 7308                <1> 		jae indexloopdone
  4470 00003483 81C601000000        <1> 		add esi, 1
  4471 00003489 EB88                <1> 		jmp indexloop
  4472 0000348B C605[93340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4473 00003492 C3                  <1> 		ret
  4474 00003493 00                  <1> indexdone db 0
  4475                              <1> %include 'source/programs/_comment.asm' ;#
  4476 00003494 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4477 00003498 C3                  <2> 	ret 
  4478                              <1> %include 'source/programs/_math.asm' ;!
  4479 00003499 FF2C2100            <2> db 255,44,"!",0
  4480                              <2> 	num:	
  4481 0000349D E8A1FBFFFF          <2> 		call clearbuffer
  4482 000034A2 C605[11370000]00    <2> 		mov byte [decimal], 0
  4483 000034A9 C605[12370000]00    <2> 		mov byte [decimal2], 0
  4484 000034B0 8B35[892F0000]      <2> 		mov esi, [currentcommandloc]
  4485 000034B6 31C0                <2> 		xor eax, eax
  4486 000034B8 31C9                <2> 		xor ecx, ecx
  4487 000034BA 31DB                <2> 		xor ebx, ebx
  4488 000034BC 8A06                <2> 	num2:	mov al, [esi]
  4489 000034BE 3C2B                <2> 		cmp al, '+'
  4490 000034C0 7416                <2> 		je operatorfound
  4491 000034C2 3C2D                <2> 		cmp al, '-'
  4492 000034C4 7412                <2> 		je operatorfound
  4493 000034C6 3C2A                <2> 		cmp al, '*'
  4494 000034C8 740E                <2> 		je operatorfound
  4495 000034CA 3C2F                <2> 		cmp al, '/'
  4496 000034CC 740A                <2> 		je operatorfound
  4497 000034CE 3C5E                <2> 		cmp al, '^'
  4498 000034D0 7406                <2> 		je operatorfound
  4499 000034D2 46                  <2> 		inc esi
  4500 000034D3 84C0                <2> 		test al, al
  4501 000034D5 75E5                <2> 		jnz num2
  4502 000034D7 C3                  <2> 		ret
  4503 000034D8 50                  <2> 	operatorfound: push eax
  4504 000034D9 30E4                <2> 		xor ah, ah
  4505 000034DB 8826                <2> 		mov [esi], ah
  4506 000034DD 89F7                <2> 		mov edi, esi
  4507 000034DF 46                  <2> 		inc esi
  4508 000034E0 8A06                <2> 		mov al, [esi]
  4509 000034E2 3C25                <2> 		cmp al, '%'
  4510 000034E4 0F845E000000        <2> 		je near resultnum1
  4511                              <2> 	varnum2: 
  4512 000034EA 57                  <2> 		push edi
  4513 000034EB E8A0000000          <2> 		call checkdecimal
  4514 000034F0 5F                  <2> 		pop edi
  4515 000034F1 E84BFEFFFF          <2> 		call cnvrttxt
  4516                              <2> 	vrnm2:
  4517 000034F6 89CB                <2> 		mov ebx, ecx
  4518 000034F8 53                  <2> 		push ebx
  4519 000034F9 E845FBFFFF          <2> 		call clearbuffer
  4520 000034FE 8B35[892F0000]      <2> 		mov esi, [currentcommandloc]
  4521 00003504 89F7                <2> 		mov edi, esi
  4522 00003506 46                  <2> 		inc esi
  4523 00003507 8A06                <2> 		mov al, [esi]
  4524 00003509 3C25                <2> 		cmp al, '%'
  4525 0000350B 0F844B000000        <2> 		je near resultnum2
  4526                              <2> 	varnum4: 
  4527 00003511 57                  <2> 		push edi
  4528 00003512 E865000000          <2> 		call checkdecimal2
  4529 00003517 5F                  <2> 		pop edi
  4530 00003518 E824FEFFFF          <2> 		call cnvrttxt
  4531                              <2> 	vrnm4:
  4532 0000351D 5B                  <2> 		pop ebx
  4533 0000351E 58                  <2> 		pop eax
  4534 0000351F 3C2B                <2> 		cmp al, '+'
  4535 00003521 0F8497000000        <2> 		je near plusnum
  4536 00003527 3C2D                <2> 		cmp al, '-'
  4537 00003529 0F849B000000        <2> 		je near subnum
  4538 0000352F 3C2A                <2> 		cmp al, '*'
  4539 00003531 0F849F000000        <2> 		je near mulnum
  4540 00003537 3C2F                <2> 		cmp al, '/'
  4541 00003539 0F84AD000000        <2> 		je near divnum
  4542 0000353F 3C5E                <2> 		cmp al, '^'
  4543 00003541 0F84CA000000        <2> 		je near expnum
  4544 00003547 C3                  <2> 		ret
  4545                              <2> 	resultnum1:
  4546 00003548 8A0D[13370000]      <2> 		mov cl, [decimalresult]
  4547 0000354E 880D[11370000]      <2> 		mov [decimal], cl
  4548 00003554 8B0D[14370000]      <2> 		mov ecx, [result]
  4549 0000355A EB9A                <2> 		jmp vrnm2
  4550                              <2> 	resultnum2:
  4551 0000355C 8A0D[11370000]      <2> 		mov cl, [decimal]
  4552 00003562 880D[12370000]      <2> 		mov [decimal2], cl
  4553 00003568 8A0D[13370000]      <2> 		mov cl, [decimalresult]
  4554 0000356E 880D[11370000]      <2> 		mov [decimal], cl
  4555 00003574 8B0D[14370000]      <2> 		mov ecx, [result]
  4556 0000357A EBA1                <2> 		jmp vrnm4
  4557                              <2> 	checkdecimal2:
  4558 0000357C 8A25[11370000]      <2> 		mov ah, [decimal]
  4559 00003582 8825[12370000]      <2> 		mov [decimal2], ah
  4560 00003588 30E4                <2> 		xor ah, ah
  4561 0000358A 8825[11370000]      <2> 		mov [decimal], ah
  4562                              <2> 	checkdecimal:
  4563 00003590 89F7                <2> 		mov edi, esi
  4564                              <2> 	chkdec1:
  4565 00003592 8A07                <2> 		mov al, [edi]
  4566 00003594 3C2E                <2> 		cmp al, '.'
  4567 00003596 0F840B000000        <2> 		je near fnddec
  4568 0000359C 3C00                <2> 		cmp al, 0
  4569 0000359E 0F8419000000        <2> 		je near nodecimal
  4570 000035A4 47                  <2> 		inc edi
  4571 000035A5 EBEB                <2> 		jmp chkdec1
  4572                              <2> 	fnddec:
  4573 000035A7 8A4701              <2> 		mov al, [edi + 1]
  4574 000035AA 8807                <2> 		mov [edi], al
  4575 000035AC 3C00                <2> 		cmp al, 0
  4576 000035AE 0F8409000000        <2> 		je near nodecimal
  4577 000035B4 FE05[11370000]      <2> 		inc byte [decimal]
  4578 000035BA 47                  <2> 		inc edi
  4579 000035BB EBEA                <2> 		jmp fnddec
  4580                              <2> 	nodecimal:
  4581 000035BD C3                  <2> 		ret
  4582                              <2> 	plusnum:
  4583 000035BE E80C010000          <2> 		call decaddfix
  4584 000035C3 01D9                <2> 		add ecx, ebx
  4585 000035C5 E98A000000          <2> 		jmp retnum
  4586                              <2> 	subnum:
  4587 000035CA E800010000          <2> 		call decaddfix
  4588 000035CF 29D9                <2> 		sub ecx, ebx
  4589 000035D1 E97E000000          <2> 		jmp retnum
  4590                              <2> 	mulnum:
  4591 000035D6 A0[12370000]        <2> 		mov al, [decimal2]
  4592 000035DB 0005[11370000]      <2> 		add [decimal], al
  4593 000035E1 89C8                <2> 		mov eax, ecx
  4594 000035E3 F7E3                <2> 		mul ebx
  4595 000035E5 89C1                <2> 		mov ecx, eax
  4596 000035E7 E968000000          <2> 		jmp retnum
  4597                              <2> 	divnum:
  4598 000035EC E8DE000000          <2> 		call decaddfix
  4599 000035F1 30C0                <2> 		xor al, al
  4600 000035F3 A2[11370000]        <2> 		mov [decimal], al
  4601 000035F8 31D2                <2> 		xor edx, edx
  4602 000035FA 89C8                <2> 		mov eax, ecx
  4603 000035FC 81FB00000000        <2> 		cmp ebx, 0
  4604 00003602 0F844C000000        <2> 		je near retnum
  4605 00003608 F7F3                <2> 		div ebx
  4606 0000360A 89C1                <2> 		mov ecx, eax
  4607 0000360C E943000000          <2> 		jmp retnum
  4608                              <2> 	expnum:
  4609 00003611 8A15[11370000]      <2> 		mov dl, [decimal]
  4610 00003617 8815[12370000]      <2> 		mov [decimal2], dl
  4611 0000361D 31D2                <2> 		xor edx, edx
  4612 0000361F 89C8                <2> 		mov eax, ecx
  4613 00003621 89D9                <2> 		mov ecx, ebx
  4614 00003623 89C3                <2> 		mov ebx, eax
  4615 00003625 81F900000000        <2> 		cmp ecx, 0
  4616 0000362B 7422                <2> 		je noexpnum
  4617 0000362D 49                  <2> 		dec ecx
  4618 0000362E 81F900000000        <2> 		cmp ecx, 0
  4619 00003634 7412                <2> 		je noexpnumlp
  4620 00003636 F7E3                <2> 	expnumlp: mul ebx
  4621 00003638 8A15[12370000]      <2> 		mov dl, [decimal2]
  4622 0000363E 0015[11370000]      <2> 		add [decimal], dl
  4623 00003644 31D2                <2> 		xor edx, edx
  4624 00003646 E2EE                <2> 		loop expnumlp
  4625                              <2> 	noexpnumlp:
  4626 00003648 89C1                <2> 		mov ecx, eax
  4627 0000364A E905000000          <2> 		jmp retnum
  4628                              <2> 	noexpnum:
  4629 0000364F B901000000          <2> 		mov ecx, 1
  4630                              <2> 	retnum: 
  4631 00003654 BE[9CCA0300]        <2> 		mov esi, numbuf
  4632 00003659 890D[14370000]      <2> 		mov [result], ecx
  4633 0000365F E8F4F9FFFF          <2> 		call convert
  4634 00003664 BE[9CCA0300]        <2> 		mov esi, numbuf
  4635 00003669 8A25[11370000]      <2> 		mov ah, [decimal]
  4636 0000366F 8825[13370000]      <2> 		mov [decimalresult], ah
  4637 00003675 80FC00              <2> 		cmp ah, 0
  4638 00003678 0F8425000000        <2> 		je near noputdecimal
  4639                              <2> 	putdecimal:
  4640 0000367E 4E                  <2> 		dec esi
  4641 0000367F FECC                <2> 		dec ah
  4642 00003681 80FC00              <2> 		cmp ah, 0
  4643 00003684 0F87F4FFFFFF        <2> 		ja near putdecimal
  4644 0000368A 4E                  <2> 		dec esi
  4645 0000368B 8A06                <2> 		mov al, [esi]
  4646 0000368D C6062E              <2> 		mov byte [esi], '.'
  4647                              <2> 	decputloop:
  4648 00003690 4E                  <2> 		dec esi
  4649 00003691 8A26                <2> 		mov ah, [esi]
  4650 00003693 8806                <2> 		mov [esi], al
  4651 00003695 88E0                <2> 		mov al, ah
  4652 00003697 81FE[88CA0300]      <2> 		cmp esi, buf2
  4653 0000369D 0F87EDFFFFFF        <2> 		ja near decputloop
  4654                              <2> 	noputdecimal:
  4655 000036A3 BE[88CA0300]        <2> 		mov esi, buf2
  4656 000036A8 E805000000          <2> 		call chkadd
  4657 000036AD C3                  <2> 		ret
  4658 000036AE 00000000            <2> edxnumbuf dw 0,0
  4659 000036B2 8A06                <2> 	chkadd: mov al, [esi]
  4660 000036B4 3C30                <2> 		cmp al, '0'
  4661 000036B6 750C                <2> 		jne dnadd
  4662 000036B8 46                  <2> 		inc esi
  4663 000036B9 81FE[9CCA0300]      <2> 		cmp esi, numbuf
  4664 000036BF 7402                <2> 		je dnaddm1
  4665 000036C1 EBEF                <2> 		jmp chkadd
  4666 000036C3 4E                  <2> 	dnaddm1: dec esi
  4667 000036C4 E87FE6FFFF          <2> 	dnadd:	call print
  4668 000036C9 E875E6FFFF          <2> 		call printline
  4669 000036CE C3                  <2> 		ret
  4670                              <2> 		
  4671                              <2> 	decaddfix:
  4672 000036CF A0[12370000]        <2> 		mov al, [decimal2]
  4673 000036D4 8A25[11370000]      <2> 		mov ah, [decimal]
  4674 000036DA 38E0                <2> 		cmp al, ah
  4675 000036DC 7432                <2> 		je gooddecadd
  4676 000036DE 38E0                <2> 		cmp al, ah
  4677 000036E0 721A                <2> 		jb lowdecadd
  4678                              <2> 	highdecadd:
  4679 000036E2 FEC4                <2> 		inc ah
  4680 000036E4 89CA                <2> 		mov edx, ecx
  4681 000036E6 C1E103              <2> 		shl ecx, 3
  4682 000036E9 01D1                <2> 		add ecx, edx
  4683 000036EB 01D1                <2> 		add ecx, edx
  4684 000036ED 38E0                <2> 		cmp al, ah
  4685 000036EF 77F1                <2> 		ja highdecadd
  4686 000036F1 8825[11370000]      <2> 		mov [decimal], ah
  4687 000036F7 E914000000          <2> 		jmp gooddecadd
  4688                              <2> 	lowdecadd:
  4689 000036FC FEC0                <2> 		inc al
  4690 000036FE 89DA                <2> 		mov edx, ebx
  4691 00003700 C1E303              <2> 		shl ebx, 3
  4692 00003703 01D3                <2> 		add ebx, edx
  4693 00003705 01D3                <2> 		add ebx, edx
  4694 00003707 38E0                <2> 		cmp al, ah
  4695 00003709 72F1                <2> 		jb lowdecadd
  4696 0000370B A2[11370000]        <2> 		mov [decimal], al
  4697                              <2> 	gooddecadd:
  4698 00003710 C3                  <2> 		ret
  4699                              <2> 		
  4700 00003711 00                  <2> decimal db 0
  4701 00003712 00                  <2> decimal2 db 0
  4702 00003713 00                  <2> decimalresult db 0
  4703 00003714 00000000            <2> result dd 0
  4704                              <1> %include 'source/programs/_variables.asm' ;% and $
  4705 00003718 FF2C2500            <2> db 255,44,"%",0
  4706                              <2> 	ans:
  4707 0000371C BE[88CA0300]        <2> 		mov esi, buf2
  4708 00003721 E88CFFFFFF          <2> 		call chkadd
  4709 00003726 C3                  <2> 		ret
  4710                              <2> 		
  4711 00003727 FF2C2400            <2> db 255,44,"$",0
  4712 0000372B 8B35[892F0000]      <2> var: mov esi, [currentcommandloc]
  4713 00003731 BB[88B20300]        <2> 	mov ebx, variables
  4714 00003736 8A06                <2> lkeq:	mov al, [esi]
  4715 00003738 3C3D                <2> 	cmp al, '='
  4716 0000373A 741B                <2> 	je eqfnd	;is there an '=' sign?
  4717 0000373C 3C00                <2> 	cmp al, 0
  4718 0000373E 7403                <2> 	je echovars
  4719 00003740 46                  <2> 	inc esi
  4720 00003741 EBF3                <2> 	jmp lkeq
  4721 00003743 BE[88B20300]        <2> echovars: mov esi, variables
  4722 00003748 BB[88C20300]        <2> 	mov ebx, varend
  4723 0000374D B105                <2> 	mov cl, 5
  4724 0000374F B504                <2> 	mov ch, 4
  4725 00003751 E891F8FFFF          <2> 	call array
  4726 00003756 C3                  <2> 	ret
  4727 00003757 46                  <2> eqfnd:	inc esi
  4728 00003758 8A06                <2> 	mov al, [esi]
  4729 0000375A 3C00                <2> 	cmp al, 0
  4730 0000375C 7410                <2> 	je readvar
  4731 0000375E 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  4732 00003764 BB[88B20300]        <2> 	mov ebx, variables
  4733 00003769 E919000000          <2> 	jmp seek
  4734                              <2> readvar:
  4735 0000376E B00A                <2> 	mov al, 10
  4736 00003770 66BB0700            <2> 	mov bx, 7
  4737 00003774 C605[2D230000]00    <2> 	mov byte [commandedit], 0
  4738 0000377B BF[88CA0300]        <2> 	mov edi, buftxtend
  4739 00003780 E8F7E6FFFF          <2> 	call rdprint
  4740 00003785 EBA4                <2> 	jmp var
  4741 00003787 668B03              <2> seek:	mov ax, [ebx]
  4742 0000378A B105                <2> 	mov cl, 5
  4743 0000378C B504                <2> 	mov ch, 4
  4744 0000378E 663D0000            <2> 	cmp ax, 0
  4745 00003792 0F845B000000        <2> 	je near save
  4746 00003798 6639C8              <2> 	cmp ax, cx
  4747 0000379B 7403                <2> 	je skfnd
  4748 0000379D 43                  <2> 	inc ebx
  4749 0000379E EBE7                <2> 	jmp seek
  4750 000037A0 8B35[892F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4751 000037A6 46                  <2> 	inc esi
  4752 000037A7 81C302000000        <2> 	add ebx, 2
  4753 000037AD 89DF                <2> 	mov edi, ebx
  4754 000037AF B13D                <2> 	mov cl, '='
  4755 000037B1 E812F8FFFF          <2> 	call cndtest
  4756 000037B6 3C01                <2> 	cmp al, 1	
  4757 000037B8 7418                <2> 	je varfnd
  4758 000037BA 89FB                <2> 	mov ebx, edi
  4759 000037BC 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  4760 000037C2 668B03              <2> 	mov ax, [ebx]
  4761 000037C5 663D0000            <2> 	cmp ax, 0
  4762 000037C9 0F8424000000        <2> 	je near save
  4763 000037CF 43                  <2> 	inc ebx
  4764 000037D0 EBB5                <2> 	jmp seek
  4765 000037D2 8A03                <2> varfnd:	mov al, [ebx]
  4766 000037D4 3C04                <2> 	cmp al, 4
  4767 000037D6 7404                <2> 	je save2
  4768 000037D8 4B                  <2> 	dec ebx
  4769 000037D9 4E                  <2> 	dec esi
  4770 000037DA EBF6                <2> 	jmp varfnd
  4771 000037DC 4B                  <2> save2:	dec ebx
  4772 000037DD 4E                  <2> 	dec esi
  4773 000037DE 8A03                <2> 	mov al, [ebx]
  4774 000037E0 3C05                <2> 	cmp al, 5
  4775 000037E2 7402                <2> 	je remove
  4776 000037E4 EBEC                <2> 	jmp varfnd
  4777 000037E6 8A03                <2> remove: mov al, [ebx]
  4778 000037E8 3C00                <2> 	cmp al, 0
  4779 000037EA 749B                <2> 	je seek
  4780 000037EC 30C0                <2> 	xor al, al
  4781 000037EE 8803                <2> 	mov [ebx], al
  4782 000037F0 43                  <2> 	inc ebx
  4783 000037F1 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4784 000037F3 8B35[892F0000]      <2> save:	mov esi, [currentcommandloc]
  4785 000037F9 43                  <2> 	inc ebx
  4786 000037FA B005                <2> 	mov al, 5
  4787 000037FC B404                <2> 	mov ah, 4
  4788 000037FE 668903              <2> 	mov [ebx], ax
  4789 00003801 43                  <2> 	inc ebx
  4790 00003802 43                  <2> svhere:	inc ebx
  4791 00003803 46                  <2> 	inc esi
  4792 00003804 8A06                <2> 	mov al, [esi]
  4793 00003806 3C00                <2> 	cmp al, 0
  4794 00003808 0F844A000000        <2> 	je near svdone
  4795 0000380E 3C25                <2> 	cmp al, '%'
  4796 00003810 7404                <2> 	je ans2
  4797 00003812 8803                <2> 	mov [ebx], al	
  4798 00003814 EBEC                <2> 	jmp svhere
  4799 00003816 56                  <2> ans2:	push esi
  4800 00003817 BE[88CA0300]        <2> 	mov esi, buf2
  4801 0000381C E823000000          <2> 	call ansfnd
  4802 00003821 E803000000          <2> 	call anscp
  4803 00003826 5E                  <2> 	pop esi
  4804 00003827 EBD9                <2> 	jmp svhere
  4805 00003829 8A06                <2> anscp:	mov al, [esi]
  4806 0000382B 8803                <2> 	mov [ebx], al
  4807 0000382D 81FE[9CCA0300]      <2> 	cmp esi, numbuf
  4808 00003833 74CD                <2> 	je svhere
  4809 00003835 3C00                <2> 	cmp al, 0
  4810 00003837 74C9                <2> 	je svhere
  4811 00003839 43                  <2> 	inc ebx
  4812 0000383A 46                  <2> 	inc esi
  4813 0000383B EBEC                <2> 	jmp anscp
  4814 0000383D 5E                  <2> ansnf:	pop esi
  4815 0000383E 8A06                <2> 	mov al, [esi]
  4816 00003840 8803                <2> 	mov [ebx], al
  4817 00003842 EBBE                <2> 	jmp svhere
  4818 00003844 46                  <2> ansfnd:	inc esi
  4819 00003845 81FE[9BCA0300]      <2> 	cmp esi, numbuf - 1
  4820 0000384B 740A                <2> 	je fndans
  4821 0000384D 8A06                <2> 	mov al, [esi]
  4822 0000384F 3C00                <2> 	cmp al, 0
  4823 00003851 74EA                <2> 	je ansnf
  4824 00003853 3C30                <2> 	cmp al, '0'
  4825 00003855 74ED                <2> 	je ansfnd
  4826                              <2> fndans:
  4827 00003857 C3                  <2> 	ret
  4828 00003858 30C0                <2> svdone:	xor al, al
  4829 0000385A 8803                <2> 	mov [ebx], al
  4830 0000385C C3                  <2> 	ret
  4831                              <1> %include 'source/programs/_run.asm' ;./
  4832 0000385D 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4833 00003861 FF2C2E2F00          <2> 	db 255,44,"./",0
  4834                              <2> rundiskprog:
  4835 00003866 8B3D[892F0000]      <2> 	mov edi, [currentcommandloc]
  4836 0000386C 81C702000000        <2> 	add edi, 2
  4837 00003872 BE00004000          <2> 	mov esi, 0x400000
  4838 00003877 E8682E0000          <2> 	call loadfile
  4839 0000387C 81FA94010000        <2> 	cmp edx, 404
  4840 00003882 746A                <2> 	je noprogfound
  4841 00003884 BB00004000          <2> 	mov ebx, 0x400000
  4842 00003889 A1[5D380000]        <2> 	mov eax, [elfstart]
  4843 0000388E 3903                <2> 	cmp [ebx], eax
  4844 00003890 0F8437000000        <2> 	je near runelf
  4845 00003896 66813B4558          <2> 	cmp word [ebx], "EX"
  4846 0000389B 7577                <2> 	jne progbatchfound
  4847 0000389D 81C302000000        <2> 	add ebx, 2
  4848 000038A3 8B3D[892F0000]      <2> 	mov edi, [currentcommandloc]
  4849 000038A9 81C702000000        <2> 	add edi, 2
  4850                              <2> findspaceprog:
  4851 000038AF 8A07                <2> 	mov al, [edi]
  4852 000038B1 47                  <2> 	inc edi
  4853 000038B2 3C20                <2> 	cmp al, " "
  4854 000038B4 75F9                <2> 	jne findspaceprog
  4855                              <2> findnonspaceprog:
  4856 000038B6 8A07                <2> 	mov al, [edi]
  4857 000038B8 47                  <2> 	inc edi
  4858 000038B9 3C20                <2> 	cmp al, " "
  4859 000038BB 74F9                <2> 	je findnonspaceprog
  4860 000038BD 4F                  <2> 	dec edi
  4861 000038BE 8925[08B00300]      <2> 	mov [previousstack], esp
  4862 000038C4 FFD3                <2> 	call ebx
  4863 000038C6 8B25[08B00300]      <2> 	mov esp, [previousstack]
  4864 000038CC C3                  <2> 	ret
  4865                              <2> runelf:
  4866 000038CD 8B3D[892F0000]      <2> 	mov edi, [currentcommandloc]
  4867 000038D3 81C702000000        <2> 	add edi, 2
  4868 000038D9 81C380000000        <2> 	add ebx, 0x80
  4869 000038DF 8925[08B00300]      <2> 	mov [previousstack], esp
  4870 000038E5 FFD3                <2> 	call ebx
  4871 000038E7 8B25[08B00300]      <2> 	mov esp, [previousstack]
  4872 000038ED C3                  <2> 	ret
  4873                              <2> noprogfound:
  4874 000038EE BE[0E860000]        <2> 	mov esi, notfound1
  4875 000038F3 E850E4FFFF          <2> 	call print
  4876 000038F8 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  4877 000038FE 81C602000000        <2> 	add esi, 2
  4878 00003904 E83FE4FFFF          <2> 	call print
  4879 00003909 BE[16860000]        <2> 	mov esi, notfound2
  4880 0000390E E835E4FFFF          <2> 	call print
  4881 00003913 C3                  <2> 	ret
  4882                              <2> progbatchfound:
  4883 00003914 BF00004000          <2> 		mov edi, 0x400000
  4884 00003919 C605[82B20300]01    <2> 		mov byte [BATCHISON], 1
  4885                              <2> 	batchrunloop:
  4886 00003920 E88EF3FFFF          <2> 		call buftxtclear
  4887 00003925 BE[88C60300]        <2> 		mov esi, buftxt
  4888 0000392A 8935[892F0000]      <2> 		mov [currentcommandloc], esi
  4889                              <2> 	batchrunloop2:
  4890 00003930 B10A                <2> 		mov cl, 10
  4891 00003932 B50D                <2> 		mov ch, 13
  4892 00003934 380F                <2> 		cmp [edi], cl
  4893 00003936 0F8419000000        <2> 		je near nxtbatchrunline
  4894 0000393C 382F                <2> 		cmp [edi], ch
  4895 0000393E 0F8411000000        <2> 		je near nxtbatchrunline
  4896 00003944 803F00              <2> 		cmp byte [edi], 0
  4897 00003947 0F8408000000        <2> 		je near nxtbatchrunline
  4898 0000394D 8A07                <2> 		mov al, [edi]
  4899 0000394F 8806                <2> 		mov [esi], al
  4900 00003951 46                  <2> 		inc esi
  4901 00003952 47                  <2> 		inc edi
  4902 00003953 EBDB                <2> 		jmp batchrunloop2
  4903                              <2> 	nxtbatchrunline:
  4904 00003955 47                  <2> 		inc edi
  4905 00003956 380F                <2> 		cmp [edi], cl
  4906 00003958 74FB                <2> 		je nxtbatchrunline
  4907 0000395A 382F                <2> 		cmp [edi], ch
  4908 0000395C 74F7                <2> 		je nxtbatchrunline
  4909 0000395E 893D[BC390000]      <2> 		mov [batchedi], edi
  4910 00003964 893D[7EB20300]      <2> 		mov [BATCHPOS], edi
  4911 0000396A C60600              <2> 		mov byte [esi], 0
  4912 0000396D BE[88C60300]        <2> 		mov esi, buftxt
  4913 00003972 803E00              <2> 		cmp byte [esi], 0
  4914 00003975 0F8439000000        <2> 		je near nobatchfoundrun
  4915 0000397B 31DB                <2> 		xor ebx, ebx
  4916 0000397D 8A1D[19B20300]      <2> 		mov bl, [IFON]
  4917 00003983 80FB00              <2> 		cmp bl, 0
  4918 00003986 0F8534000000        <2> 		jne near iftestbatch
  4919                              <2> 	doneiftest:
  4920 0000398C 803D[923A0000]00    <2> 		cmp byte [runnextline], 0
  4921 00003993 0F8405000000        <2> 		je near noruniftest
  4922 00003999 E815F5FFFF          <2> 		call run
  4923                              <2> 	noruniftest:
  4924 0000399E C605[923A0000]01    <2> 		mov byte [runnextline], 1
  4925 000039A5 8B3D[BC390000]      <2> 		mov edi, [batchedi]
  4926 000039AB 803F00              <2> 		cmp byte [edi], 0
  4927 000039AE 0F856CFFFFFF        <2> 		jne near batchrunloop
  4928                              <2> 	nobatchfoundrun:
  4929 000039B4 C605[82B20300]00    <2> 		mov byte [BATCHISON], 0
  4930 000039BB C3                  <2> 		ret
  4931                              <2> 	
  4932 000039BC 00000000            <2> batchedi dd 0	
  4933                              <2> 	
  4934                              <2> 	iftestbatch:
  4935 000039C0 BE[1AB20300]        <2> 		mov esi, IFTRUE
  4936 000039C5 01DE                <2> 		add esi, ebx
  4937 000039C7 803E00              <2> 		cmp byte [esi], 0
  4938 000039CA 0F85BCFFFFFF        <2> 		jne near doneiftest
  4939 000039D0 881D[933A0000]      <2> 		mov [iffalsebuf], bl
  4940 000039D6 803D[83B20300]01    <2> 		cmp byte [LOOPON], 1
  4941 000039DD 0F8513000000        <2> 		jne near fifindbatch
  4942 000039E3 E938FFFFFF          <2> 		jmp batchrunloop
  4943                              <2> 	elsetestbatch:
  4944 000039E8 C60601              <2> 		mov byte [esi], 1
  4945 000039EB 81C705000000        <2> 		add edi, 5
  4946 000039F1 E92AFFFFFF          <2> 		jmp batchrunloop
  4947                              <2> 	fifindbatch:
  4948 000039F6 66B96966            <2> 		mov cx, "if"
  4949 000039FA 66B86669            <2> 		mov ax, "fi"
  4950 000039FE 663907              <2> 		cmp [edi], ax
  4951 00003A01 0F8424000000        <2> 		je near fifoundbatch
  4952 00003A07 66390F              <2> 		cmp [edi], cx
  4953 00003A0A 0F8465000000        <2> 		je near iffoundbatch
  4954 00003A10 803F00              <2> 		cmp byte [edi], 0
  4955 00003A13 0F8412000000        <2> 		je near fifoundbatch
  4956 00003A19 B8656C7365          <2> 		mov eax, "else"
  4957 00003A1E 3907                <2> 		cmp [edi], eax
  4958 00003A20 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4959 00003A26 E973FFFFFF          <2> 		jmp noruniftest
  4960                              <2> 	fifoundbatch:
  4961 00003A2B 81C702000000        <2> 		add edi, 2
  4962 00003A31 B00A                <2> 		mov al, 10
  4963 00003A33 3807                <2> 		cmp [edi], al
  4964 00003A35 0F840B000000        <2> 		je near goodfibatch
  4965 00003A3B 803F00              <2> 		cmp byte [edi], 0
  4966 00003A3E 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4967 00003A44 EBB0                <2> 		jmp fifindbatch
  4968                              <2> 	goodfibatch:
  4969 00003A46 B001                <2> 		mov al, 1
  4970 00003A48 2805[19B20300]      <2> 		sub [IFON], al 
  4971 00003A4E A0[19B20300]        <2> 		mov al, [IFON]
  4972 00003A53 8A1D[933A0000]      <2> 		mov bl, [iffalsebuf]
  4973 00003A59 38D8                <2> 		cmp al, bl
  4974 00003A5B 7799                <2> 		ja fifindbatch
  4975 00003A5D 8B35[892F0000]      <2> 		mov esi, [currentcommandloc]
  4976 00003A63 81EF02000000        <2> 		sub edi, 2
  4977 00003A69 C605[923A0000]00    <2> 		mov byte [runnextline], 0
  4978 00003A70 E9ABFEFFFF          <2> 		jmp batchrunloop
  4979                              <2> 	iffoundbatch:
  4980 00003A75 B020                <2> 		mov al, ' '
  4981 00003A77 81C702000000        <2> 		add edi, 2
  4982 00003A7D 3807                <2> 		cmp [edi], al
  4983 00003A7F 0F8571FFFFFF        <2> 		jne near fifindbatch
  4984 00003A85 B001                <2> 		mov al, 1
  4985 00003A87 0005[19B20300]      <2> 		add [IFON], al
  4986 00003A8D E964FFFFFF          <2> 		jmp fifindbatch
  4987                              <2> 		
  4988                              <2> 		
  4989 00003A92 01                  <2> runnextline db 1
  4990 00003A93 00                  <2> iffalsebuf db 0
  4991 00003A94 C3                  <2> notbatch: ret 
  4992                              <1> %ifdef network.included
  4993                              <1> 	%include 'source/programs/arp.asm'
  4994                              <1> %endif
  4995                              <1> %include 'source/programs/batch.asm'
  4996 00003A95 FF2C626174636800    <2> db 255,44,"batch",0
  4997                              <2> 	batchst: 
  4998 00003A9D 8B3D[892F0000]      <2> 		mov edi, [currentcommandloc]
  4999 00003AA3 81C706000000        <2> 		add edi, 6
  5000 00003AA9 803F00              <2> 		cmp byte [edi], 0
  5001 00003AAC 0F846D000000        <2> 		je near nonamefound
  5002 00003AB2 BE00004000          <2> 		mov esi, 0x400000
  5003 00003AB7 E8282C0000          <2> 		call loadfile
  5004 00003ABC 89D0                <2> 		mov eax, edx
  5005 00003ABE 3D94010000          <2> 		cmp eax, 404
  5006 00003AC3 7465                <2> 		je goodbatchname
  5007 00003AC5 BE[D03A0000]        <2> 		mov esi, badbatchname
  5008 00003ACA E879E2FFFF          <2> 		call print
  5009 00003ACF C3                  <2> 		ret
  5010 00003AD0 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5011 00003AD9 20616C726561647920- <2>
  5012 00003AE2 657869737473210A00  <2>
  5013 00003AEB 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5014 00003AF4 746F20747970652061- <2>
  5015 00003AFD 206E616D6520616674- <2>
  5016 00003B06 65722074686520636F- <2>
  5017 00003B0F 6D6D616E642E0A00    <2>
  5018 00003B17 00000000            <2> 		esicache3 dd 0
  5019 00003B1B 00000000            <2> 		esicache2 dd 0
  5020                              <2> 	nonamefound:
  5021 00003B1F BE[EB3A0000]        <2> 		mov esi, namenotfoundbatch
  5022 00003B24 E81FE2FFFF          <2> 		call print
  5023 00003B29 C3                  <2> 		ret
  5024                              <2> 	goodbatchname:
  5025 00003B2A BE00004000          <2> 		mov esi, 0x400000
  5026                              <2> 	batchcreate:
  5027 00003B2F 8935[173B0000]      <2> 		mov [esicache3], esi
  5028 00003B35 BF00008000          <2> 		mov edi, 0x800000
  5029 00003B3A B00A                <2> 		mov al, 10
  5030 00003B3C B307                <2> 		mov bl, 7
  5031 00003B3E B404                <2> 		mov ah, 4
  5032 00003B40 CD30                <2> 		int 30h
  5033 00003B42 8935[1B3B0000]      <2> 		mov [esicache2], esi
  5034 00003B48 8A0E                <2> 		mov cl, [esi]
  5035 00003B4A 8B35[173B0000]      <2> 		mov esi, [esicache3]
  5036 00003B50 BB[843B0000]        <2> 		mov ebx, exitword
  5037 00003B55 E86EF4FFFF          <2> 		call cndtest
  5038 00003B5A 3C01                <2> 		cmp al, 1
  5039 00003B5C 7411                <2> 		je endbatchcreate
  5040 00003B5E 3C02                <2> 		cmp al, 2
  5041 00003B60 740D                <2> 		je endbatchcreate
  5042 00003B62 8B35[1B3B0000]      <2> 		mov esi, [esicache2]
  5043 00003B68 B00A                <2> 		mov al, 10
  5044 00003B6A 8806                <2> 		mov [esi], al
  5045 00003B6C 46                  <2> 		inc esi
  5046 00003B6D EBC0                <2> 		jmp batchcreate
  5047                              <2> 	endbatchcreate:
  5048 00003B6F 8B35[173B0000]      <2> 		mov esi, [esicache3]
  5049 00003B75 31C0                <2> 		xor eax, eax
  5050 00003B77 8806                <2> 		mov [esi], al
  5051 00003B79 BE00004000          <2> 		mov esi, 0x400000
  5052 00003B7E E8C5E1FFFF          <2> 		call print
  5053 00003B83 C3                  <2> 		ret
  5054                              <2> 	
  5055 00003B84 5C7800              <2> 	exitword db "\x",0
  5056 00003B87 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5057 00003B90 6F20657869742E0A00  <2>
  5058                              <1> %ifdef gui.background
  5059                              <1> 	%include 'source/programs/background.asm'
  5060                              <1> %endif
  5061                              <1> %include 'source/programs/beep.asm'
  5062 00003B99 FF2C6265657000      <2> 	db 255,44,"beep",0
  5063                              <2> beep:
  5064 00003BA0 B8[C53B0000]        <2> 	mov eax, beepstart
  5065 00003BA5 A3[72020000]        <2> 	mov [soundpos], eax
  5066 00003BAA B8[C93B0000]        <2> 	mov eax, beepend
  5067 00003BAF A3[76020000]        <2> 	mov [soundendpos], eax
  5068 00003BB4 C605[6F020000]01    <2> 	mov byte [soundon], 1
  5069                              <2> waitforsoundendbeep:
  5070 00003BBB A0[6F020000]        <2> 	mov al, [soundon]
  5071 00003BC0 3C00                <2> 	cmp al, 0
  5072 00003BC2 75F7                <2> 	jne waitforsoundendbeep
  5073 00003BC4 C3                  <2> 	ret
  5074                              <2> 	
  5075                              <2> beepstart:
  5076 00003BC5 3200D111            <2> 	dw 50, 4561
  5077                              <2> beepend:
  5078                              <1> %ifdef dos.compatible
  5079                              <1> %else
  5080                              <1> 	%include 'source/programs/boot.asm'
  5081 00003BC9 FF2C626F6F7400      <2> db 255,44,"boot",0
  5082                              <2> quickboot:
  5083                              <2> 	;load and jump to the bootloader
  5084                              <2> 	; mov ecx, 1
  5085                              <2> 	; xor ebx, ebx
  5086                              <2> 	; mov esi, 0x400000
  5087                              <2> 	; call diskr
  5088                              <2> 	; mov ax, LINEAR_SEL
  5089                              <2> 	; mov fs, ax
  5090                              <2> 	; mov esi, 0x400000
  5091                              <2> 	; mov edi, 0x7C00
  5092                              <2> 	; xor ebx, ebx
  5093                              <2> ; .lp:
  5094                              <2> 	; mov ecx, [esi+ebx]
  5095                              <2> 	; mov [fs:edi+ebx], ecx
  5096                              <2> 	; add ebx, 4
  5097                              <2> 	; cmp ebx, 512
  5098                              <2> 	; jb .lp
  5099 00003BD0 66BB[E03B]          <2> 	mov bx, bootload
  5100 00003BD4 66891D[E80C0000]    <2> 	mov [realmodeptr], bx
  5101 00003BDB E9F6CFFFFF          <2> 	jmp realmode
  5102                              <2> [BITS 16]
  5103                              <2> bootload:
  5104 00003BE0 B80300              <2> 	mov ax, 3
  5105 00003BE3 31DB                <2> 	xor bx, bx
  5106 00003BE5 CD10                <2> 	int 10h
  5107 00003BE7 EA007C0000          <2> 	jmp 0:0x7C00
  5108                              <2> [BITS 32]
  5109                              <1> %endif
  5110                              <1> %include 'source/programs/cd.asm'
  5111 00003BEC FF2C636400          <2> db 255,44,"cd",0
  5112                              <2> cd:
  5113 00003BF1 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  5114 00003BF7 81C603000000        <2> 	add esi, 3
  5115 00003BFD 8B3D[10B00300]      <2> 	mov edi, [currentfolderloc]
  5116 00003C03 893D[0CB00300]      <2> 	mov [lastfolderloc], edi
  5117 00003C09 81C7[14B00300]      <2> 	add edi, currentfolder
  5118 00003C0F 4F                  <2> 	dec edi
  5119 00003C10 66813E2E2E          <2> 	cmp word [esi], ".."
  5120 00003C15 742A                <2> 	je .moveup
  5121 00003C17 47                  <2> 	inc edi
  5122                              <2> .movedown:
  5123 00003C18 8A06                <2> 	mov al, [esi]
  5124 00003C1A 8807                <2> 	mov [edi], al
  5125 00003C1C 47                  <2> 	inc edi
  5126 00003C1D 46                  <2> 	inc esi
  5127 00003C1E 3C00                <2> 	cmp al, 0
  5128 00003C20 740A                <2> 	je .donecd
  5129 00003C22 81FF[14B20300]      <2> 	cmp edi, currentfolderend
  5130 00003C28 72EE                <2> 	jb .movedown
  5131 00003C2A 30C0                <2> 	xor al, al
  5132                              <2> .donecd:
  5133 00003C2C 4F                  <2> 	dec edi
  5134 00003C2D C6072F              <2> 	mov byte [edi], '/'
  5135 00003C30 47                  <2> 	inc edi
  5136 00003C31 C60700              <2> 	mov byte [edi], 0
  5137 00003C34 81EF[14B00300]      <2> 	sub edi, currentfolder
  5138 00003C3A 893D[10B00300]      <2> 	mov [currentfolderloc], edi
  5139 00003C40 C3                  <2> 	ret
  5140                              <2> .moveup:
  5141 00003C41 31C0                <2> 	xor eax, eax
  5142 00003C43 A3[0CB00300]        <2> 	mov [lastfolderloc], eax
  5143                              <2> .moveuploop:
  5144 00003C48 4F                  <2> 	dec edi
  5145 00003C49 8A07                <2> 	mov al, [edi]
  5146 00003C4B 81FF[14B00300]      <2> 	cmp edi, currentfolder
  5147 00003C51 763B                <2> 	jbe .moveupover
  5148 00003C53 3C2F                <2> 	cmp al, '/'
  5149 00003C55 75F1                <2> 	jne .moveuploop
  5150 00003C57 C6072F              <2> 	mov byte [edi], '/'
  5151 00003C5A 47                  <2> 	inc edi
  5152 00003C5B C60700              <2> 	mov byte [edi], 0
  5153 00003C5E 81EF[14B00300]      <2> 	sub edi, currentfolder
  5154 00003C64 893D[10B00300]      <2> 	mov [currentfolderloc], edi
  5155 00003C6A 81C7[14B00300]      <2> 	add edi, currentfolder
  5156 00003C70 4F                  <2> 	dec edi
  5157                              <2> .lastfolder:
  5158 00003C71 4F                  <2> 	dec edi
  5159 00003C72 8A07                <2> 	mov al, [edi]
  5160 00003C74 81FF[14B00300]      <2> 	cmp edi, currentfolder
  5161 00003C7A 7604                <2> 	jbe .donemoveup
  5162 00003C7C 3C2F                <2> 	cmp al, '/'
  5163 00003C7E 75F1                <2> 	jne .lastfolder
  5164                              <2> .donemoveup:
  5165 00003C80 47                  <2> 	inc edi
  5166 00003C81 81EF[14B00300]      <2> 	sub edi, currentfolder
  5167 00003C87 893D[0CB00300]      <2> 	mov [lastfolderloc], edi
  5168 00003C8D C3                  <2> 	ret
  5169                              <2> .moveupover:
  5170 00003C8E BF[14B00300]        <2> 	mov edi, currentfolder
  5171 00003C93 C6072F              <2> 	mov byte [edi], '/'
  5172 00003C96 47                  <2> 	inc edi
  5173 00003C97 C60700              <2> 	mov byte [edi], 0
  5174 00003C9A 31C0                <2> 	xor eax, eax
  5175 00003C9C A3[0CB00300]        <2> 	mov [lastfolderloc], eax
  5176 00003CA1 40                  <2> 	inc eax
  5177 00003CA2 A3[10B00300]        <2> 	mov [currentfolderloc], eax
  5178 00003CA7 C3                  <2> 	ret
  5179                              <1> %include 'source/programs/charmap.asm'
  5180 00003CA8 00                  <2> charmapnum db 0
  5181 00003CA9 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5182 00003CB2 00                  <2>
  5183 00003CB3 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  5184 00003CB9 81C608000000        <2> 	add esi, 8
  5185 00003CBF 803E00              <2> 	cmp byte [esi], 0
  5186 00003CC2 7412                <2> 	je .nospecific
  5187 00003CC4 E82FF6FFFF          <2> 	call cnvrthextxt
  5188 00003CC9 6689C8              <2> 	mov ax, cx
  5189 00003CCC 66BB0700            <2> 	mov bx, 7
  5190 00003CD0 E802E7FFFF          <2> 	call prcharq
  5191 00003CD5 C3                  <2> 	ret
  5192                              <2> .nospecific:
  5193 00003CD6 66BB0700            <2> 	mov bx, 7
  5194 00003CDA 66B82000            <2> 	mov ax, " "
  5195 00003CDE C605[A83C0000]00    <2> 	mov byte [charmapnum], 0
  5196 00003CE5 E8EDE6FFFF          <2> 	call prcharq
  5197 00003CEA E8E8E6FFFF          <2> 	call prcharq
  5198 00003CEF E8E3E6FFFF          <2> 	call prcharq
  5199 00003CF4 E8DEE6FFFF          <2> 	call prcharq
  5200 00003CF9 66B83000            <2> 	mov ax, "0"
  5201                              <2> charmapnumprnt:
  5202 00003CFD E8D5E6FFFF          <2> 	call prcharq
  5203 00003D02 6640                <2> 	inc ax
  5204 00003D04 6650                <2> 	push ax
  5205 00003D06 66B82000            <2> 	mov ax, " "
  5206 00003D0A E8C8E6FFFF          <2> 	call prcharq
  5207 00003D0F 6658                <2> 	pop ax
  5208 00003D11 663D3900            <2> 	cmp ax, "9"
  5209 00003D15 76E6                <2> 	jbe charmapnumprnt
  5210 00003D17 66B84100            <2> 	mov ax, "A"
  5211                              <2> charmapnumprnt2:
  5212 00003D1B E8B7E6FFFF          <2> 	call prcharq
  5213 00003D20 6640                <2> 	inc ax
  5214 00003D22 6650                <2> 	push ax
  5215 00003D24 66B82000            <2> 	mov ax, " "
  5216 00003D28 E8AAE6FFFF          <2> 	call prcharq
  5217 00003D2D 6658                <2> 	pop ax
  5218 00003D2F 663D4700            <2> 	cmp ax, "G"
  5219 00003D33 72E6                <2> 	jb charmapnumprnt2
  5220                              <2> 	
  5221 00003D35 BE[47860000]        <2> 	mov esi, line
  5222 00003D3A E8E5DFFFFF          <2> 	call printquiet
  5223 00003D3F 6631C0              <2> 	xor ax, ax
  5224 00003D42 6689C1              <2> 	mov cx, ax
  5225 00003D45 E84DF4FFFF          <2> 	call showhexsmall
  5226 00003D4A E96C000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5227                              <2> charmapcopy:
  5228 00003D4F 6640                <2> 	inc ax
  5229 00003D51 663D0800            <2> 	cmp ax, 8
  5230 00003D55 7464                <2> 	je charmapnocopy
  5231 00003D57 663D0900            <2> 	cmp ax, 9
  5232 00003D5B 745E                <2> 	je charmapnocopy
  5233 00003D5D 663D0A00            <2> 	cmp ax, 10
  5234 00003D61 7458                <2> 	je charmapnocopy
  5235 00003D63 663D0D00            <2> 	cmp ax, 13
  5236 00003D67 7452                <2> 	je charmapnocopy
  5237 00003D69 663DFF00            <2> 	cmp ax, 255
  5238 00003D6D 744C                <2> 	je charmapnocopy
  5239 00003D6F 663D0001            <2> 	cmp ax, 256
  5240 00003D73 7445                <2> 	je nomorecharmap
  5241 00003D75 6650                <2> 	push ax
  5242 00003D77 E85BE6FFFF          <2> 	call prcharq
  5243 00003D7C 66B82000            <2> 	mov ax, " "
  5244 00003D80 E852E6FFFF          <2> 	call prcharq
  5245 00003D85 6658                <2> 	pop ax
  5246                              <2> charmapcopycheck:
  5247 00003D87 FE05[A83C0000]      <2> 	inc byte [charmapnum]
  5248 00003D8D 803D[A83C0000]10    <2> 	cmp byte [charmapnum], 16
  5249 00003D94 72B9                <2> 	jb charmapcopy
  5250 00003D96 6650                <2> 	push ax
  5251 00003D98 BE[47860000]        <2> 	mov esi, line
  5252 00003D9D E882DFFFFF          <2> 	call printquiet
  5253 00003DA2 6658                <2> 	pop ax
  5254 00003DA4 3CFF                <2> 	cmp al, 255
  5255 00003DA6 7412                <2> 	je nomorecharmap
  5256 00003DA8 88C1                <2> 	mov cl, al
  5257 00003DAA FEC1                <2> 	inc cl
  5258 00003DAC E8E6F3FFFF          <2> 	call showhexsmall
  5259 00003DB1 C605[A83C0000]00    <2> 	mov byte [charmapnum], 0
  5260 00003DB8 EB95                <2> 	jmp charmapcopy
  5261                              <2> nomorecharmap:
  5262 00003DBA C3                  <2> 	ret
  5263                              <2> charmapnocopy:
  5264 00003DBB 6650                <2> 	push ax
  5265 00003DBD 66B82000            <2> 	mov ax, " "
  5266 00003DC1 E811E6FFFF          <2> 	call prcharq
  5267 00003DC6 E80CE6FFFF          <2> 	call prcharq
  5268 00003DCB 6658                <2> 	pop ax
  5269 00003DCD EBB8                <2> 	jmp charmapcopycheck
  5270                              <1> %ifdef gui.included
  5271                              <1> 	%include 'source/programs/circle.asm'
  5272 00003DCF FF2C636972636C6500  <2> db 255,44,"circle",0
  5273                              <2> circle:
  5274 00003DD8 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  5275 00003DDE 81C607000000        <2> 	add esi, 7
  5276 00003DE4 66B91000            <2> 	mov cx, 16
  5277 00003DE8 30C0                <2> 	xor al, al
  5278 00003DEA 3806                <2> 	cmp [esi], al
  5279 00003DEC 7405                <2> 	je .nocmdline
  5280 00003DEE E84EF5FFFF          <2> 	call cnvrttxt
  5281                              <2> .nocmdline:
  5282 00003DF3 E8F50A0000          <2> 	call linetester.stime
  5283 00003DF8 E857000000          <2> 	call fcircle.nocmdline
  5284 00003DFD E8030B0000          <2> 	call linetester.etime
  5285 00003E02 53                  <2> 	push ebx
  5286 00003E03 57                  <2> 	push edi
  5287 00003E04 E83BE5FFFF          <2> 	call getchar
  5288 00003E09 59                  <2> 	pop ecx
  5289 00003E0A E857F4FFFF          <2> 	call showdec
  5290 00003E0F BE[93490000]        <2> 	mov esi, linetester.msgcircle
  5291 00003E14 E80BDFFFFF          <2> 	call printquiet
  5292 00003E19 59                  <2> 	pop ecx
  5293 00003E1A E847F4FFFF          <2> 	call showdec
  5294 00003E1F BE[AA490000]        <2> 	mov esi, linetester.msgtime
  5295 00003E24 E8FBDEFFFF          <2> 	call printquiet
  5296 00003E29 E85A310000          <2> 	call reloadallgraphics
  5297 00003E2E C3                  <2> 	ret
  5298                              <2> 	
  5299 00003E2F FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5300 00003E38 00                  <2>
  5301                              <2> fcircle:	
  5302 00003E39 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  5303 00003E3F 81C608000000        <2> 	add esi, 8
  5304 00003E45 66B91000            <2> 	mov cx, 16
  5305 00003E49 30C0                <2> 	xor al, al
  5306 00003E4B 3806                <2> 	cmp [esi], al
  5307 00003E4D 7405                <2> 	je .nocmdline
  5308 00003E4F E8EDF4FFFF          <2> 	call cnvrttxt
  5309                              <2> .nocmdline:
  5310 00003E54 6689C8              <2> 	mov ax, cx
  5311 00003E57 66D1E1              <2> 	shl cx, 1
  5312 00003E5A 6689CA              <2> 	mov dx, cx
  5313 00003E5D 663B15[33560000]    <2> 	cmp dx, [resolutionx]
  5314 00003E64 731B                <2> 	jae .done
  5315 00003E66 663B0D[35560000]    <2> 	cmp cx, [resolutiony]
  5316 00003E6D 7312                <2> 	jae .done
  5317 00003E6F 668B35[6D020000]    <2> 	mov si, [timenanoseconds + 2]
  5318 00003E76 31FF                <2> 	xor edi, edi
  5319 00003E78 803D[6C860000]01    <2> 	cmp byte [guion], 1
  5320 00003E7F 7401                <2> 	je .lp
  5321 00003E81 C3                  <2> .done ret
  5322                              <2> .lp:
  5323 00003E82 6629C2              <2> 	sub dx, ax
  5324 00003E85 6629C1              <2> 	sub cx, ax
  5325 00003E88 60                  <2> 	pusha
  5326 00003E89 E8192C0000          <2> 	call fillcircle
  5327 00003E8E 61                  <2> 	popa
  5328 00003E8F 47                  <2> 	inc edi
  5329 00003E90 660335[6B020000]    <2> 	add si, [timenanoseconds]
  5330 00003E97 6601C2              <2> 	add dx, ax
  5331 00003E9A 6601C2              <2> 	add dx, ax
  5332 00003E9D 6601C2              <2> 	add dx, ax
  5333 00003EA0 6601C1              <2> 	add cx, ax
  5334 00003EA3 663B15[33560000]    <2> 	cmp dx, [resolutionx]
  5335 00003EAA 72D6                <2> 	jb .lp
  5336 00003EAC 6689C2              <2> 	mov dx, ax
  5337 00003EAF 6601C2              <2> 	add dx, ax
  5338 00003EB2 6601C1              <2> 	add cx, ax
  5339 00003EB5 6601C1              <2> 	add cx, ax
  5340 00003EB8 663B0D[35560000]    <2> 	cmp cx, [resolutiony]
  5341 00003EBF 72C1                <2> 	jb .lp
  5342 00003EC1 C3                  <2> 	ret
  5343                              <1> %endif
  5344                              <1> %include 'source/programs/clear.asm'
  5345 00003EC2 FF2C636C65617200    <2> db 255,44,"clear",0
  5346 00003ECA E829DFFFFF          <2> 		call clear
  5347 00003ECF C3                  <2> 		ret 
  5348                              <1> %include 'source/programs/cpuid.asm'
  5349 00003ED0 FF2C637075696400    <2> db 255,44,"cpuid",0
  5350 00003ED8 31C0                <2> 	xor eax, eax
  5351 00003EDA 0FA2                <2> 	cpuid
  5352 00003EDC 891D[2D3F0000]      <2> 	mov [cpuidbuf], ebx
  5353 00003EE2 8915[313F0000]      <2> 	mov [cpuidbuf + 4], edx
  5354 00003EE8 890D[353F0000]      <2> 	mov [cpuidbuf + 8], ecx
  5355 00003EEE BE[2D3F0000]        <2> 	mov esi, cpuidbuf
  5356 00003EF3 E850DEFFFF          <2> 	call print
  5357 00003EF8 BE[47860000]        <2> 	mov esi, line
  5358 00003EFD E846DEFFFF          <2> 	call print
  5359 00003F02 B801000000          <2> 	mov eax, 1
  5360 00003F07 0FA2                <2> 	cpuid
  5361 00003F09 89C1                <2> 	mov ecx, eax
  5362 00003F0B C605[96310000]02    <2> 	mov byte [firsthexshown], 2
  5363 00003F12 E894F2FFFF          <2> 	call showhex
  5364 00003F17 B808000080          <2> 	mov eax, 0x80000008
  5365 00003F1C 0FA2                <2> 	cpuid
  5366 00003F1E 89C1                <2> 	mov ecx, eax
  5367 00003F20 C605[96310000]02    <2> 	mov byte [firsthexshown], 2
  5368 00003F27 E87FF2FFFF          <2> 	call showhex
  5369 00003F2C C3                  <2> 	ret
  5370                              <2> 	
  5371 00003F2D 00<rept>            <2> cpuidbuf times 13 db 0
  5372                              <2> cpuidvendorend:
  5373                              <1> %include 'source/programs/date.asm'
  5374 00003F3A 082E30303030303030- <2> timenscache db 8,".000000000"
  5375 00003F43 3030                <2>
  5376 00003F45 200A00              <2> timenscacheend: db " ",10,0
  5377 00003F48 00                  <2> istimeset db 0
  5378 00003F49 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5379 00003F52 2063757272656E7420- <2>
  5380 00003F5B 554E49582074696D65- <2>
  5381 00003F64 3A0A00              <2>
  5382 00003F67 00<rept>            <2> timeinputbuffer times 12 db 0
  5383 00003F73 00                  <2> timeinputbend: db 0
  5384                              <2> 
  5385 00003F74 FF2C6461746500      <2> db 255,44,"date",0
  5386                              <2> 	;cmp byte [istimeset], 0
  5387                              <2> 	;jne timeisset
  5388 00003F7B E880000000          <2> 	call time
  5389 00003F80 E828020000          <2> 	call timeconvert	
  5390                              <2> 	; mov esi, settimemsg
  5391                              <2> 	; call print
  5392                              <2> 	; mov esi, timeinputbuffer
  5393                              <2> 	; mov edi, timeinputbend
  5394                              <2> 	; call readline
  5395                              <2> 	; mov esi, timeinputbuffer
  5396                              <2> 	; xor edi, edi
  5397                              <2> 	; call cnvrttxt
  5398 00003F85 890D[67020000]      <2> 	mov [timeseconds], ecx
  5399                              <2> 	;xor ecx, ecx
  5400                              <2> 	;mov [timenanoseconds], ecx
  5401 00003F8B C605[483F0000]01    <2> 	mov byte [istimeset], 1
  5402                              <2> timeisset:
  5403 00003F92 8B0D[67020000]      <2> 	mov ecx, [timeseconds]
  5404 00003F98 E8C9F2FFFF          <2> 	call showdec
  5405                              <2> 	
  5406 00003F9D 8B0D[6B020000]      <2> 	mov ecx, [timenanoseconds]
  5407 00003FA3 BE[3A3F0000]        <2> 	mov esi, timenscache
  5408 00003FA8 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5409 00003FAF C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5410 00003FB6 C6460A30            <2> 	mov byte [esi + 10], "0"
  5411 00003FBA BE[453F0000]        <2> 	mov esi, timenscacheend
  5412 00003FBF E894F0FFFF          <2> 	call convert
  5413 00003FC4 BE[3A3F0000]        <2> 	mov esi, timenscache
  5414 00003FC9 E856DDFFFF          <2> 	call printquiet
  5415                              <2> 	
  5416 00003FCE E82D000000          <2> 	call time
  5417 00003FD3 BE[18430000]        <2> 	mov esi, timeshow
  5418 00003FD8 E847DDFFFF          <2> 	call printquiet
  5419 00003FDD BE[47860000]        <2> 	mov esi, line
  5420 00003FE2 E83DDDFFFF          <2> 	call printquiet
  5421 00003FE7 BE[21430000]        <2> 	mov esi, dateshow
  5422 00003FEC E833DDFFFF          <2> 	call printquiet
  5423 00003FF1 BE[47860000]        <2> 	mov esi, line
  5424 00003FF6 E829DDFFFF          <2> 	call printquiet
  5425 00003FFB E9BE000000          <2> 	jmp findday
  5426                              <2> time:
  5427 00004000 E851010000          <2> 	call tstackput1
  5428 00004005 B00A                <2> 	mov al,10			;Get RTC register A
  5429 00004007 E87B010000          <2> 	call tget1
  5430 0000400C A880                <2> 	test al,0x80			;Is update in progress?
  5431 0000400E 75F0                <2> 	jne time				; yes, wait
  5432                              <2> 
  5433 00004010 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5434 00004012 E870010000          <2> 	call tget1
  5435 00004017 A2[0F430000]        <2> 	mov [RTCtimeSecond],al
  5436                              <2> 
  5437 0000401C B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5438 0000401E E864010000          <2> 	call tget1
  5439 00004023 A2[10430000]        <2> 	mov [RTCtimeMinute],al
  5440                              <2> 
  5441 00004028 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5442 0000402A E858010000          <2> 	call tget1
  5443 0000402F A2[11430000]        <2> 	mov [RTCtimeHour],al
  5444                              <2> 
  5445 00004034 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5446 00004036 E84C010000          <2> 	call tget1
  5447 0000403B A2[12430000]        <2> 	mov [RTCtimeDay],al
  5448                              <2> 
  5449 00004040 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5450 00004042 E840010000          <2> 	call tget1
  5451 00004047 241F                <2> 	and al, 11111b
  5452 00004049 A2[13430000]        <2> 	mov [RTCtimeMonth],al
  5453                              <2> 
  5454 0000404E B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5455 00004050 E832010000          <2> 	call tget1
  5456 00004055 A2[14430000]        <2> 	mov [RTCtimeYear],al
  5457                              <2> 	
  5458 0000405A BE[18430000]        <2> 	mov esi, timeshow
  5459 0000405F 8A2D[11430000]      <2> 	mov ch, [RTCtimeHour]
  5460 00004065 E828010000          <2> 	call tput1
  5461 0000406A 8A2D[10430000]      <2> 	mov ch, [RTCtimeMinute]
  5462 00004070 E81D010000          <2> 	call tput1
  5463 00004075 8A2D[0F430000]      <2> 	mov ch, [RTCtimeSecond]
  5464 0000407B E812010000          <2> 	call tput1
  5465 00004080 BE[21430000]        <2> 	mov esi, dateshow
  5466 00004085 8A2D[13430000]      <2> 	mov ch, [RTCtimeMonth]
  5467 0000408B E802010000          <2> 	call tput1
  5468 00004090 8A2D[12430000]      <2> 	mov ch, [RTCtimeDay]
  5469 00004096 E8F7000000          <2> 	call tput1
  5470 0000409B B520                <2> 	mov ch, 0x20
  5471 0000409D E8F0000000          <2> 	call tput1
  5472 000040A2 4E                  <2> 	dec esi
  5473 000040A3 8A2D[14430000]      <2> 	mov ch, [RTCtimeYear]
  5474 000040A9 E8E4000000          <2> 	call tput1
  5475 000040AE E8BD000000          <2> 	call tstackget1
  5476 000040B3 C3                  <2> 	ret
  5477 000040B4 BE[18430000]        <2> 	mov esi, timeshow
  5478 000040B9 E88ADCFFFF          <2> 	call print
  5479                              <2> ;get day of week
  5480                              <2> ;add these:
  5481                              <2> ;century value
  5482                              <2> ;last 2 digits of year
  5483                              <2> ;last 2 digits of year right shifted twice
  5484                              <2> ;month table value
  5485                              <2> ;day of the month
  5486                              <2> ;divide these by 7
  5487                              <2> ;the remainder is the day
  5488                              <2> findday:
  5489 000040BE 31C0                <2> 	xor eax, eax
  5490                              <2> ;first convert the values from BCD to hex
  5491 000040C0 A0[12430000]        <2> 	mov al, [RTCtimeDay]
  5492 000040C5 E873000000          <2> 	call converttohex
  5493 000040CA 8825[15430000]      <2> 	mov [dayhex], ah
  5494 000040D0 A0[13430000]        <2> 	mov al, [RTCtimeMonth]
  5495 000040D5 E863000000          <2> 	call converttohex
  5496 000040DA 8825[16430000]      <2> 	mov [monthhex], ah
  5497 000040E0 A0[14430000]        <2> 	mov al, [RTCtimeYear]
  5498 000040E5 E853000000          <2> 	call converttohex
  5499 000040EA 8825[17430000]      <2> 	mov [yearhex], ah
  5500 000040F0 31C0                <2> 	xor eax, eax
  5501 000040F2 A0[17430000]        <2> 	mov al, [yearhex]
  5502 000040F7 C0E802              <2> 	shr al, 2
  5503 000040FA 0205[17430000]      <2> 	add al, [yearhex]
  5504 00004100 0506000000          <2> 	add eax, 6
  5505 00004105 31DB                <2> 	xor ebx, ebx
  5506 00004107 8A1D[16430000]      <2> 	mov bl, [monthhex]
  5507 0000410D FECB                <2> 	dec bl
  5508 0000410F 81C3[36430000]      <2> 	add ebx, month
  5509 00004115 31C9                <2> 	xor ecx, ecx
  5510 00004117 8A0B                <2> 	mov cl, [ebx]
  5511 00004119 01C8                <2> 	add eax, ecx
  5512 0000411B 8A0D[15430000]      <2> 	mov cl, [dayhex]
  5513 00004121 01C8                <2> 	add eax, ecx
  5514 00004123 66BB0700            <2> 	mov bx, 7
  5515 00004127 31D2                <2> 	xor edx, edx
  5516 00004129 66F7F3              <2> 	div bx
  5517 0000412C C1E202              <2> 	shl edx, 2
  5518 0000412F 81C2[42430000]      <2> 	add edx, day
  5519 00004135 8B32                <2> 	mov esi, [edx]
  5520 00004137 E80CDCFFFF          <2> 	call print
  5521 0000413C C3                  <2> 	ret
  5522                              <2> 	
  5523                              <2> converttohex:
  5524 0000413D 88C4                <2> 	mov ah, al
  5525 0000413F C0E804              <2> 	shr al, 4
  5526 00004142 C0E404              <2> 	shl ah, 4
  5527 00004145 C0EC04              <2> 	shr ah, 4
  5528 00004148 3C00                <2> 	cmp al, 0
  5529 0000414A 7409                <2> 	je noconverttohex
  5530                              <2> converttohexlp:
  5531 0000414C 80C40A              <2> 	add ah, 10
  5532 0000414F FEC8                <2> 	dec al
  5533 00004151 3C00                <2> 	cmp al, 0
  5534 00004153 75F7                <2> 	jne converttohexlp
  5535                              <2> noconverttohex:
  5536 00004155 C3                  <2> 	ret
  5537                              <2> 	
  5538                              <2> tstackput1:
  5539 00004156 8935[0B430000]      <2> 	mov [tstack + 20], esi
  5540 0000415C BE[F7420000]        <2> 	mov esi, tstack
  5541 00004161 8906                <2> 	mov [esi], eax
  5542 00004163 895E04              <2> 	mov [esi + 4], ebx
  5543 00004166 894E08              <2> 	mov [esi + 8], ecx
  5544 00004169 89560C              <2> 	mov [esi + 12], edx
  5545 0000416C 897E10              <2> 	mov [esi + 16], edi
  5546 0000416F C3                  <2> 	ret
  5547                              <2> 	
  5548                              <2> tstackget1:
  5549 00004170 BE[F7420000]        <2> 	mov esi, tstack
  5550 00004175 8B06                <2> 	mov eax, [esi]
  5551 00004177 8B5E04              <2> 	mov ebx, [esi + 4]
  5552 0000417A 8B4E08              <2> 	mov ecx, [esi + 8]
  5553 0000417D 8B560C              <2> 	mov edx, [esi + 12]
  5554 00004180 8B7E10              <2> 	mov edi, [esi + 16]
  5555 00004183 8B7614              <2> 	mov esi, [esi + 20]
  5556 00004186 C3                  <2> 	ret
  5557                              <2> 	
  5558                              <2> tget1:
  5559 00004187 66BA7000            <2> 	mov dx, 0x70
  5560 0000418B EE                  <2> 	out dx, al
  5561 0000418C 6642                <2> 	inc dx
  5562 0000418E EC                  <2> 	in al, dx
  5563 0000418F 664A                <2> 	dec dx
  5564 00004191 C3                  <2> 	ret
  5565                              <2> 	
  5566                              <2> tput1:
  5567 00004192 66C1E904            <2> 	shr cx, 4
  5568 00004196 B030                <2> 	mov al, 48
  5569 00004198 00E8                <2> 	add al, ch
  5570 0000419A 8806                <2> 	mov [esi], al
  5571 0000419C 46                  <2> 	inc esi
  5572 0000419D B030                <2> 	mov al, 48
  5573 0000419F C0E904              <2> 	shr cl, 4
  5574 000041A2 00C8                <2> 	add al, cl
  5575 000041A4 8806                <2> 	mov [esi], al
  5576 000041A6 81C602000000        <2> 	add esi, 2
  5577 000041AC C3                  <2> 	ret
  5578                              <2> 	
  5579                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5580 000041AD 31DB                <2> 	xor ebx, ebx
  5581 000041AF 31C9                <2> 	xor ecx, ecx
  5582 000041B1 31FF                <2> 	xor edi, edi
  5583 000041B3 31F6                <2> 	xor esi, esi
  5584                              <2> 	
  5585 000041B5 A0[0F430000]        <2> 	mov al, [RTCtimeSecond]
  5586 000041BA E87EFFFFFF          <2> 	call converttohex
  5587 000041BF 88E1                <2> 	mov cl, ah
  5588                              <2> 	
  5589 000041C1 A0[10430000]        <2> 	mov al, [RTCtimeMinute]
  5590 000041C6 E872FFFFFF          <2> 	call converttohex
  5591 000041CB 88E3                <2> 	mov bl, ah
  5592 000041CD B83C000000          <2> 	mov eax, 60
  5593 000041D2 31D2                <2> 	xor edx, edx
  5594 000041D4 F7E3                <2> 	mul ebx
  5595 000041D6 01C1                <2> 	add ecx, eax
  5596                              <2> 	
  5597 000041D8 A0[11430000]        <2> 	mov al, [RTCtimeHour]
  5598 000041DD E85BFFFFFF          <2> 	call converttohex
  5599 000041E2 88E3                <2> 	mov bl, ah
  5600 000041E4 B8100E0000          <2> 	mov eax, 3600
  5601 000041E9 31D2                <2> 	xor edx, edx
  5602 000041EB F7E3                <2> 	mul ebx
  5603 000041ED 01C1                <2> 	add ecx, eax
  5604                              <2> 		
  5605 000041EF 31C0                <2> 	xor eax, eax
  5606 000041F1 A0[14430000]        <2> 	mov al, [RTCtimeYear]
  5607 000041F6 E842FFFFFF          <2> 	call converttohex
  5608 000041FB 6689C6              <2> 	mov si, ax
  5609 000041FE 66C1EE08            <2> 	shr si, 8
  5610 00004202 6681FE4600          <2> 	cmp si, 70
  5611 00004207 7705                <2> 	ja .no100
  5612 00004209 6681C66400          <2> 	add si, 100
  5613                              <2> .no100:
  5614 0000420E 6681C66C07          <2> 	add si, 1900
  5615                              <2> 	
  5616 00004213 BB[E9420000]        <2> 	mov ebx, .month
  5617 00004218 A0[12430000]        <2> 	mov al, [RTCtimeDay]
  5618 0000421D E81BFFFFFF          <2> 	call converttohex
  5619 00004222 88E0                <2> 	mov al, ah
  5620 00004224 FEC8                <2> 	dec al
  5621 00004226 31D2                <2> 	xor edx, edx
  5622 00004228 88C2                <2> 	mov dl, al
  5623 0000422A A0[13430000]        <2> 	mov al, [RTCtimeMonth]
  5624 0000422F E809FFFFFF          <2> 	call converttohex
  5625 00004234 88D0                <2> 	mov al, dl
  5626 00004236 88E2                <2> 	mov dl, ah
  5627 00004238 30E4                <2> 	xor ah, ah
  5628 0000423A 6689D5              <2> 	mov bp, dx
  5629                              <2> 	
  5630 0000423D 6689F7              <2> 	mov di, si
  5631 00004240 66C1EF02            <2> 	shr di, 2
  5632 00004244 66C1E702            <2> 	shl di, 2
  5633 00004248 C605[EA420000]1C    <2> 	mov byte [.month + 1], 28
  5634 0000424F 6639F7              <2> 	cmp di, si
  5635 00004252 7506                <2> 	jne .nofebmod
  5636 00004254 FE05[EA420000]      <2> 	inc byte [.month + 1]
  5637                              <2> .nofebmod:
  5638 0000425A 664D                <2> 	dec bp
  5639 0000425C 6681FD0000          <2> 	cmp bp, 0
  5640 00004261 7407                <2> 	je .ylp
  5641 00004263 8A13                <2> 	mov dl, [ebx]
  5642 00004265 01D0                <2> 	add eax, edx
  5643 00004267 43                  <2> 	inc ebx
  5644 00004268 EBF0                <2> 	jmp .nofebmod
  5645                              <2> 	
  5646                              <2> .ylp:
  5647 0000426A 6689F7              <2> 	mov di, si
  5648 0000426D 66C1EF02            <2> 	shr di, 2
  5649 00004271 66C1E702            <2> 	shl di, 2
  5650 00004275 81C18033E101        <2> 	add ecx, 31536000
  5651 0000427B 6639F7              <2> 	cmp di, si
  5652 0000427E 7506                <2> 	jne .noymod
  5653 00004280 81C180510100        <2> 	add ecx, 86400
  5654                              <2> .noymod:
  5655 00004286 664E                <2> 	dec si
  5656 00004288 6681FEB207          <2> 	cmp si, 1970
  5657 0000428D 77DB                <2> 	ja .ylp
  5658                              <2> 	
  5659 0000428F BB80510100          <2> 	mov ebx, 86400
  5660 00004294 31D2                <2> 	xor edx, edx
  5661 00004296 F7E3                <2> 	mul ebx
  5662 00004298 01C1                <2> 	add ecx, eax
  5663                              <2> 	
  5664 0000429A 31DB                <2> 	xor ebx, ebx
  5665 0000429C 31D2                <2> 	xor edx, edx
  5666 0000429E B8100E0000          <2> 	mov eax, 3600
  5667 000042A3 8A3D[F5420000]      <2> 	mov bh, [timezoneh]
  5668 000042A9 80FF80              <2> 	cmp bh, 128
  5669 000042AC 720D                <2> 	jb .posh
  5670 000042AE 28FB                <2> 	sub bl, bh
  5671 000042B0 30FF                <2> 	xor bh, bh
  5672 000042B2 F7E3                <2> 	mul ebx
  5673 000042B4 01C1                <2> 	add ecx, eax
  5674 000042B6 E906000000          <2> 	jmp .doneth
  5675                              <2> .posh:
  5676 000042BB 86DF                <2> 	xchg bl, bh
  5677 000042BD F7E3                <2> 	mul ebx
  5678 000042BF 29C1                <2> 	sub ecx, eax
  5679                              <2> .doneth:
  5680                              <2> 
  5681 000042C1 31DB                <2> 	xor ebx, ebx	
  5682 000042C3 31D2                <2> 	xor edx, edx
  5683 000042C5 B83C000000          <2> 	mov eax, 60
  5684 000042CA 8A3D[F6420000]      <2> 	mov bh, [timezonem]
  5685 000042D0 80FF80              <2> 	cmp bh, 128
  5686 000042D3 720D                <2> 	jb .posm
  5687 000042D5 28FB                <2> 	sub bl, bh
  5688 000042D7 30FF                <2> 	xor bh, bh
  5689 000042D9 F7E3                <2> 	mul ebx
  5690 000042DB 01C1                <2> 	add ecx, eax
  5691 000042DD E906000000          <2> 	jmp .donetm
  5692                              <2> .posm:
  5693 000042E2 86DF                <2> 	xchg bl, bh
  5694 000042E4 F7E3                <2> 	mul ebx
  5695 000042E6 29C1                <2> 	sub ecx, eax
  5696                              <2> .donetm:
  5697                              <2> 
  5698 000042E8 C3                  <2> 	ret
  5699                              <2> 	
  5700                              <2> 
  5701 000042E9 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5702 000042F2 1F1E1F              <2>
  5703                              <2> 
  5704 000042F5 FA                  <2> 	timezoneh db -6
  5705 000042F6 00                  <2> 	timezonem db 0
  5706 000042F7 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5707 00004300 000000000000000000- <2>
  5708 00004309 000000000000        <2>
  5709 0000430F 00                  <2> 	RTCtimeSecond db 0
  5710 00004310 00                  <2> 	RTCtimeMinute db 0
  5711 00004311 00                  <2> 	RTCtimeHour db 0
  5712 00004312 00                  <2> 	RTCtimeDay db 0
  5713 00004313 00                  <2> 	RTCtimeMonth db 0
  5714 00004314 00                  <2> 	RTCtimeYear db 0
  5715 00004315 00                  <2> 	dayhex db 0
  5716 00004316 00                  <2> 	monthhex db 0
  5717 00004317 00                  <2> 	yearhex db 0
  5718 00004318 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5719 00004321 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5720 0000432A 302000              <2>
  5721                              <2> 	oldcentury:	;from 1700 to 1900
  5722 0000432D 040200              <2> 	db 4,2,0
  5723                              <2> 	century:	;from 2000 to 2500
  5724 00004330 060402000604        <2> 	db 6,4,2,0,6,4
  5725                              <2> 	month:
  5726 00004336 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5727 0000433F 000305              <2>
  5728                              <2> 	day:
  5729 00004342 [5E430000]          <2> 	dd sunday
  5730 00004346 [66430000]          <2> 	dd monday
  5731 0000434A [6E430000]          <2> 	dd tuesday
  5732 0000434E [77430000]          <2> 	dd wednesday
  5733 00004352 [82430000]          <2> 	dd thursday
  5734 00004356 [8C430000]          <2> 	dd friday
  5735 0000435A [94430000]          <2> 	dd saturday
  5736                              <2> sunday:
  5737 0000435E 53756E6461790A00    <2> 	db "Sunday",10,0
  5738                              <2> monday:
  5739 00004366 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5740                              <2> tuesday:
  5741 0000436E 547565736461790A00  <2> 	db "Tuesday",10,0
  5742                              <2> wednesday:
  5743 00004377 5765646E6573646179- <2> 	db "Wednesday",10,0
  5744 00004380 0A00                <2>
  5745                              <2> thursday:
  5746 00004382 54687572736461790A- <2> 	db "Thursday",10,0
  5747 0000438B 00                  <2>
  5748                              <2> friday:
  5749 0000438C 4672696461790A00    <2> 	db "Friday",10,0
  5750                              <2> saturday:
  5751 00004394 53617475726461790A- <2> 	db "Saturday",10,0
  5752 0000439D 00                  <2>
  5753                              <1> %ifdef network.included
  5754                              <1> 	%include 'source/programs/dhcp.asm'
  5755                              <1> %endif
  5756                              <1> %ifdef disk.none
  5757                              <1> %else
  5758                              <1> 	%include 'source/programs/dos.asm'
  5759 0000439E FF2C646F7300        <2> db 255,44,"dos",0
  5760                              <2> dosrunner:
  5761 000043A4 8925[08B00300]      <2> 	mov [previousstack], esp
  5762 000043AA 8B3D[892F0000]      <2> 	mov edi, [currentcommandloc]
  5763 000043B0 81C704000000        <2> 	add edi, 4
  5764 000043B6 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5765 000043BB E824230000          <2> 	call loadfile
  5766 000043C0 8B3D[892F0000]      <2> 	mov edi, [currentcommandloc]
  5767 000043C6 81C704000000        <2> 	add edi, 4
  5768 000043CC 81FA94010000        <2> 	cmp edx, 404
  5769 000043D2 0F845E000000        <2> 	je near .noprogfound
  5770 000043D8 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5771 000043DD 31C9                <2> 	xor ecx, ecx
  5772                              <2> .findparams:
  5773 000043DF 47                  <2> 	inc edi
  5774 000043E0 8A07                <2> 	mov al, [edi]
  5775 000043E2 3C20                <2> 	cmp al, " "
  5776 000043E4 75F9                <2> 	jne .findparams
  5777                              <2> .copyparams:
  5778 000043E6 8A07                <2> 	mov al, [edi]
  5779 000043E8 8803                <2> 	mov [ebx], al
  5780 000043EA 43                  <2> 	inc ebx
  5781 000043EB 47                  <2> 	inc edi
  5782 000043EC 41                  <2> 	inc ecx
  5783 000043ED 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5784 000043F3 7304                <2> 	jae .nomoreparams
  5785 000043F5 3C00                <2> 	cmp al, 0
  5786 000043F7 75ED                <2> 	jne .copyparams
  5787                              <2> .nomoreparams:
  5788 000043F9 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5789 000043FF 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5790 00004403 8ED8                <2> 	mov ds, ax
  5791 00004405 8EC0                <2> 	mov es, ax
  5792 00004407 8EE0                <2> 	mov fs, ax
  5793 00004409 8EE8                <2> 	mov gs, ax
  5794 0000440B 31C0                <2> 	xor eax, eax
  5795 0000440D 31DB                <2> 	xor ebx, ebx
  5796 0000440F 31C9                <2> 	xor ecx, ecx
  5797 00004411 31D2                <2> 	xor edx, edx
  5798 00004413 31FF                <2> 	xor edi, edi
  5799 00004415 31F6                <2> 	xor esi, esi
  5800 00004417 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5801 0000441E 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5802 00004422 6689DA              <2> 	mov dx, bx
  5803 00004425 8EC3                <2> 	mov es, bx
  5804 00004427 8EE3                <2> 	mov fs, bx
  5805 00004429 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5806 0000442D 8EEB                <2> 	mov gs, bx
  5807 0000442F 8B25[08B00300]      <2> 	mov esp, [previousstack]
  5808 00004435 C3                  <2> 	ret
  5809                              <2> .noprogfound:
  5810 00004436 BE[0E860000]        <2> 	mov esi, notfound1
  5811 0000443B E808D9FFFF          <2> 	call print
  5812 00004440 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  5813 00004446 81C604000000        <2> 	add esi, 4
  5814 0000444C E8F7D8FFFF          <2> 	call print
  5815 00004451 BE[16860000]        <2> 	mov esi, notfound2
  5816 00004456 E8EDD8FFFF          <2> 	call print
  5817 0000445B C3                  <2> 	ret
  5818                              <2> 	
  5819                              <1> %endif
  5820                              <1> %include 'source/programs/dump.asm'
  5821 0000445C FF2C64756D7000      <2> db 255,44,"dump",0
  5822 00004463 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  5823 00004469 81C605000000        <2> 	add esi, 5
  5824 0000446F 31C9                <2> 	xor ecx, ecx
  5825 00004471 66B83078            <2> 	mov ax, "0x"
  5826 00004475 663906              <2> 	cmp [esi], ax
  5827 00004478 740A                <2> 	je dumphexin
  5828 0000447A E8C2EEFFFF          <2> 	call cnvrttxt
  5829 0000447F E910000000          <2> 	jmp dumphexnow
  5830                              <2> dumphexin:
  5831 00004484 81C602000000        <2> 	add esi, 2
  5832 0000448A E869EEFFFF          <2> 	call cnvrthextxt
  5833 0000448F E900000000          <2> 	jmp dumphexnow
  5834                              <2> dumphexnow:
  5835 00004494 89CF                <2> 	mov edi, ecx
  5836 00004496 89FE                <2> 	mov esi, edi
  5837 00004498 81C680030000        <2> 	add esi, 896
  5838                              <2> dumphexloop:
  5839 0000449E 8B0F                <2> 	mov ecx, [edi]
  5840 000044A0 C605[96310000]05    <2> 	mov byte [firsthexshown],5
  5841 000044A7 E8FFECFFFF          <2> 	call showhex
  5842 000044AC 81C704000000        <2> 	add edi, 4
  5843 000044B2 39F7                <2> 	cmp edi, esi
  5844 000044B4 72E8                <2> 	jb dumphexloop
  5845 000044B6 E8D8E3FFFF          <2> 	call termcopy
  5846 000044BB C3                  <2> 	ret 
  5847                              <1> %include 'source/programs/echo.asm'
  5848 000044BC FF2C6563686F00      <2> db 255,44,"echo",0
  5849                              <2> 	echoprog:
  5850 000044C3 8B35[892F0000]      <2> 		mov esi, [currentcommandloc]
  5851 000044C9 81C605000000        <2> 		add esi, 5
  5852 000044CF 8A06                <2> 		mov al, [esi]
  5853 000044D1 E84ED8FFFF          <2> 		call printquiet
  5854 000044D6 E868D8FFFF          <2> 		call printline
  5855 000044DB C3                  <2> 		ret
  5856 000044DC BB[88B20300]        <2> 	echovr:	mov ebx, variables
  5857 000044E1 BF06000000          <2> 		mov edi, 6
  5858 000044E6 E83C000000          <2> 		call nxtvrech
  5859 000044EB E954000000          <2> 		jmp prntvr2
  5860 000044F0 B13D                <2> 	echvar:	mov cl, '='
  5861 000044F2 43                  <2> 		inc ebx
  5862 000044F3 8A03                <2> 		mov al, [ebx]
  5863 000044F5 3C00                <2> 		cmp al, 0
  5864 000044F7 742E                <2> 		je nxtvrech
  5865 000044F9 3C3D                <2> 		cmp al, '='
  5866 000044FB 7422                <2> 		je nxtvrechb1
  5867 000044FD 8B35[892F0000]      <2> 		mov esi, [currentcommandloc]
  5868 00004503 01FE                <2> 		add esi, edi
  5869 00004505 E8BEEAFFFF          <2> 		call cndtest
  5870 0000450A 3C02                <2> 		cmp al, 2
  5871 0000450C 7432                <2> 		je prntvr
  5872 0000450E 3C01                <2> 		cmp al, 1
  5873 00004510 742E                <2> 		je prntvr
  5874 00004512 8B35[892F0000]      <2> 		mov esi, [currentcommandloc]
  5875 00004518 01FE                <2> 		add esi, edi
  5876 0000451A E908000000          <2> 		jmp nxtvrech
  5877                              <2> 	nxtvrechb1:
  5878 0000451F 81EB02000000        <2> 		sub ebx, 2
  5879 00004525 EBC9                <2> 		jmp echvar
  5880 00004527 8A03                <2> 	nxtvrech: mov al, [ebx]
  5881 00004529 3C05                <2> 		cmp al, 5
  5882 0000452B 740A                <2> 		je nxtvrec2
  5883 0000452D 43                  <2> 		inc ebx
  5884 0000452E 81FB[88C20300]      <2> 		cmp ebx, varend
  5885 00004534 72F1                <2> 		jb nxtvrech
  5886 00004536 C3                  <2> 		ret
  5887 00004537 43                  <2> 	nxtvrec2: inc ebx
  5888 00004538 8A03                <2> 		mov al, [ebx]
  5889 0000453A 3C04                <2> 		cmp al, 4
  5890 0000453C 74B2                <2> 		je echvar
  5891 0000453E EBE7                <2> 		jmp nxtvrech
  5892 00004540 43                  <2> 	prntvr: inc ebx
  5893 00004541 89DE                <2> 		mov esi, ebx
  5894 00004543 C3                  <2> 		ret
  5895 00004544 E8FFD7FFFF          <2> 	prntvr2: call print
  5896 00004549 BE[47860000]        <2> 		mov esi, line
  5897 0000454E E8F5D7FFFF          <2> 		call print
  5898 00004553 C3                  <2> 		ret 
  5899                              <1> %include 'source/programs/else.asm'
  5900 00004554 FF2C656C736500      <2> 	db 255,44,"else",0
  5901 0000455B 31C0                <2> elsecmd:	xor eax, eax
  5902 0000455D 3805[82B20300]      <2> 	cmp [BATCHISON], al
  5903 00004563 0F842BF5FFFF        <2> 	je near notbatch
  5904 00004569 A0[19B20300]        <2> 	mov al, [IFON]
  5905 0000456E BE[1AB20300]        <2> 	mov esi, IFTRUE
  5906 00004573 01C6                <2> 	add esi, eax
  5907 00004575 8A06                <2> 	mov al, [esi]
  5908 00004577 3401                <2> 	xor al, 1
  5909 00004579 8806                <2> 	mov [esi], al
  5910 0000457B C3                  <2> 	ret 
  5911                              <1> %include 'source/programs/exit.asm'
  5912 0000457C FF2C6578697400      <2> db 255,44,"exit",0
  5913 00004583 803D[18B20300]01    <2> 	cmp byte [ranboot], 1
  5914 0000458A 0F84DAE6FFFF        <2> 	je near returnfromexp
  5915 00004590 E9C5E5FFFF          <2> 	jmp nobootfile
  5916                              <1> %include 'source/programs/fi.asm'
  5917 00004595 FF2C666900          <2> 	db 255,44,"fi",0
  5918 0000459A 30C0                <2> 	xor al, al
  5919 0000459C 3805[82B20300]      <2> 	cmp [BATCHISON], al
  5920 000045A2 0F84ECF4FFFF        <2> 	je near notbatch
  5921 000045A8 B001                <2> fi:	mov al, 1
  5922 000045AA 2805[19B20300]      <2> 	sub [IFON],al
  5923 000045B0 C3                  <2> 	ret 
  5924                              <1> %ifdef gui.included
  5925                              <1> 	%include 'source/programs/gui.asm'
  5926 000045B1 FF2C67756900        <2> db 255,44,"gui",0
  5927                              <2> guiswitcher:
  5928 000045B7 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  5929 000045BD 81C604000000        <2> 	add esi, 4
  5930 000045C3 31C9                <2> 	xor ecx, ecx
  5931 000045C5 803E00              <2> 	cmp byte [esi], 0
  5932 000045C8 740A                <2> 	je .nomodepref
  5933 000045CA E829EDFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5934 000045CF E907000000          <2> 	jmp .modepref
  5935                              <2> .nomodepref:
  5936 000045D4 51                  <2> 	push ecx
  5937 000045D5 E81ED8FFFF          <2> 	call clear
  5938 000045DA 59                  <2> 	pop ecx
  5939                              <2> .modepref:
  5940 000045DB 66C705[E80C0000]-   <2> 	mov word [realmodeptr], guiswitch
  5941 000045E2 [3552]              <2>
  5942 000045E4 E8EDC5FFFF          <2> 	call realmode
  5943                              <2> guiswitchret:
  5944 000045E9 65803D[6C860000]01  <2> 	cmp byte [gs:guion], 1
  5945 000045F1 7401                <2> 	je .cont
  5946 000045F3 C3                  <2> 	ret
  5947                              <2> .cont:
  5948 000045F4 BF[21540000]        <2> 	mov edi, VBEMODEBLOCK
  5949                              <2> .loop:
  5950 000045F9 658B07              <2> 	mov eax, [gs:edi]
  5951 000045FC 8907                <2> 	mov [edi], eax
  5952 000045FE 47                  <2> 	inc edi
  5953 000045FF 81FF[25570000]      <2> 	cmp edi, VBEEND
  5954 00004605 72F2                <2> 	jb .loop
  5955 00004607 A1[49560000]        <2> 	mov eax, [physbaseptr]
  5956 0000460C 8B1D[47020000]      <2> 	mov ebx, [basecache]
  5957 00004612 C1E304              <2> 	shl ebx, 4
  5958 00004615 29D8                <2> 	sub eax, ebx
  5959 00004617 A3[49560000]        <2> 	mov [physbaseptr], eax
  5960 0000461C C605[D5230000]00    <2> 	mov byte [termguion], 0
  5961 00004623 BE[9CCA0300]        <2> 	mov esi, graphicstable
  5962 00004628 30C0                <2> 	xor al, al
  5963                              <2> .clear:
  5964 0000462A 8806                <2> 	mov [esi], al
  5965 0000462C 46                  <2> 	inc esi
  5966 0000462D 81FE[9CCC0300]      <2> 	cmp esi, graphicstableend
  5967 00004633 72F5                <2> 	jb .clear
  5968 00004635 E8E72A0000          <2> 	call guisetup
  5969                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5970 0000463A 668B15[33560000]    <2> 	mov dx, [resolutionx]
  5971 00004641 668B0D[35560000]    <2> 	mov cx, [resolutiony]
  5972 00004648 6689D3              <2> 	mov bx, dx
  5973 0000464B 6689C8              <2> 	mov ax, cx
  5974 0000464E 66D1EB              <2> 	shr bx, 1
  5975 00004651 66D1E8              <2> 	shr ax, 1
  5976 00004654 6689DA              <2> 	mov dx, bx
  5977 00004657 66D1EA              <2> 	shr dx, 1
  5978 0000465A 6689C1              <2> 	mov cx, ax
  5979 0000465D 66D1E9              <2> 	shr cx, 1
  5980 00004660 6601D3              <2> 	add bx, dx
  5981 00004663 6601C8              <2> 	add ax, cx
  5982 00004666 66D1E9              <2> 	shr cx, 1
  5983 00004669 66C1EB03            <2> 	shr bx, 3
  5984 0000466D 66C1E303            <2> 	shl bx, 3
  5985 00004671 66C1E804            <2> 	shr ax, 4
  5986 00004675 66C1E004            <2> 	shl ax, 4
  5987 00004679 66891D[26730000]    <2> 	mov [termwindow], bx
  5988 00004680 66A3[28730000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5989 00004686 BE[26730000]        <2> 	mov esi, termwindow
  5990 0000468B 31DB                <2> 	xor ebx, ebx
  5991 0000468D 6631C0              <2> 	xor ax, ax
  5992 00004690 E8C3310000          <2> 	call showwindow
  5993 00004695 E88C100000          <2> 	call cursorgui
  5994 0000469A E859D7FFFF          <2> 	call clear
  5995 0000469F C3                  <2> 	ret
  5996                              <2> 	
  5997                              <1> %endif
  5998                              <1> %include 'source/programs/help.asm'
  5999 000046A0 FF2C68656C7000      <2> db 255,44,"help",0
  6000                              <2> lscmd:	
  6001 000046A7 B00D                <2> 		mov al, 13
  6002 000046A9 E829DDFFFF          <2> 		call prcharq
  6003 000046AE BE[FE330000]        <2> 		mov esi, progstart
  6004 000046B3 BB[35520000]        <2> 		mov ebx, progend
  6005 000046B8 BE[08AC0300]        <2> dir:	mov esi, fileindex
  6006 000046BD 8A06                <2> 	dirnxt:	mov al, [esi]
  6007 000046BF 30E4                <2> 		xor ah, ah
  6008 000046C1 3CFF                <2> 		cmp al, 255
  6009 000046C3 7415                <2> 		je dirfnd
  6010 000046C5 46                  <2> 		inc esi
  6011 000046C6 81FE[08B00300]      <2> 		cmp esi,  fileindexend
  6012 000046CC 7339                <2> 		jae dirdn
  6013 000046CE EBED                <2> 		jmp dirnxt
  6014                              <2> 	dirfnd3:
  6015 000046D0 46                  <2> 		inc esi
  6016 000046D1 81FE[08B00300]      <2> 		cmp esi, fileindexend
  6017 000046D7 76E4                <2> 		jbe dirnxt
  6018 000046D9 4E                  <2> 		dec esi
  6019 000046DA 46                  <2> 	dirfnd:	inc esi
  6020 000046DB 8A06                <2> 		mov al, [esi]
  6021 000046DD 30E4                <2> 		xor ah, ah
  6022 000046DF 3C2C                <2> 		cmp al, 44
  6023 000046E1 740B                <2> 		je dirfnd2
  6024 000046E3 46                  <2> 		inc esi
  6025 000046E4 81FE[08B00300]      <2> 		cmp esi,  fileindexend
  6026 000046EA 731B                <2> 		jae dirdn
  6027 000046EC EBCF                <2> 		jmp dirnxt
  6028 000046EE 46                  <2> 	dirfnd2: inc esi
  6029 000046EF E830D6FFFF          <2> 		call printquiet
  6030 000046F4 56                  <2> 		push esi
  6031 000046F5 B009                <2> 		mov al, 9
  6032 000046F7 E8DBDCFFFF          <2> 		call prcharq
  6033 000046FC 5E                  <2> 		pop esi
  6034 000046FD 81FE[08B00300]      <2> 		cmp esi,  fileindexend
  6035 00004703 7302                <2> 		jae dirdn
  6036 00004705 EBB6                <2> 		jmp dirnxt
  6037 00004707 BE[47860000]        <2> 	dirdn:	mov esi, line
  6038 0000470C E837D6FFFF          <2> 			call print
  6039 00004711 C3                  <2> 			ret
  6040 00004712 00                  <2> currentdir db 0
  6041                              <1> %include 'source/programs/if.asm'
  6042 00004713 FF2C696600          <2> 	db 255,44,"if",0
  6043 00004718 30C0                <2> ifcmd:	xor al, al
  6044 0000471A 3805[82B20300]      <2> 	cmp [BATCHISON], al
  6045 00004720 0F846EF3FFFF        <2> 	je near notbatch
  6046 00004726 8B1D[892F0000]      <2> 	mov ebx, [currentcommandloc]
  6047 0000472C 81C303000000        <2> 	add ebx, 3
  6048 00004732 89DE                <2> 	mov esi, ebx
  6049 00004734 8A06                <2> chkeqsn: mov al, [esi]
  6050 00004736 3C00                <2> 	cmp al, 0
  6051 00004738 0F8456F3FFFF        <2> 	je near notbatch
  6052 0000473E 3C3D                <2> 	cmp al, '='
  6053 00004740 0F8403000000        <2> 	je near chkeqdn
  6054 00004746 46                  <2> 	inc esi
  6055 00004747 EBEB                <2> 	jmp chkeqsn
  6056 00004749 B000                <2> chkeqdn: mov al, 0 
  6057 0000474B 8806                <2> 	mov [esi], al
  6058 0000474D 46                  <2> 	inc esi
  6059 0000474E E83AE8FFFF          <2> 	call tester
  6060 00004753 3C01                <2> 	cmp al, 1
  6061 00004755 0F8405000000        <2> 	je near trueif
  6062 0000475B E91C000000          <2> 	jmp falseif
  6063 00004760 31C0                <2> trueif:	xor eax, eax
  6064 00004762 A0[19B20300]        <2> 	mov al, [IFON]
  6065 00004767 FEC0                <2> 	inc al
  6066 00004769 A2[19B20300]        <2> 	mov [IFON], al
  6067 0000476E 30E4                <2> 	xor ah, ah
  6068 00004770 BE[1AB20300]        <2> 	mov esi, IFTRUE
  6069 00004775 01C6                <2> 	add esi, eax
  6070 00004777 B401                <2> 	mov ah, 1
  6071 00004779 8826                <2> 	mov [esi], ah
  6072 0000477B C3                  <2> 	ret 
  6073 0000477C 31C0                <2> falseif: xor eax, eax
  6074 0000477E A0[19B20300]        <2> 	mov al, [IFON]
  6075 00004783 FEC0                <2> 	inc al
  6076 00004785 A2[19B20300]        <2> 	mov [IFON], al
  6077 0000478A 30E4                <2> 	xor ah, ah
  6078 0000478C BE[1AB20300]        <2> 	mov esi, IFTRUE
  6079 00004791 01C6                <2> 	add esi, eax
  6080 00004793 30E4                <2> 	xor ah, ah
  6081 00004795 8826                <2> 	mov [esi], ah
  6082 00004797 C3                  <2> 	ret 
  6083                              <1> %ifdef network.included
  6084                              <1> 	%include 'source/programs/ipconfig.asm'
  6085                              <1> %endif
  6086                              <1> %include 'source/programs/keycode.asm'
  6087 00004798 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6088 000047A1 00                  <2>
  6089                              <2> keycode:
  6090 000047A2 66C705[A8230000]00- <2> 	mov word [trans], 0
  6091 000047AA 00                  <2>
  6092 000047AB C605[9E680000]00    <2> 	mov byte [threadson], 0
  6093                              <2> %ifdef io.serial
  6094                              <2> .noserial:
  6095                              <2> 	hlt
  6096                              <2> 	mov dx, [serial.address]
  6097                              <2> 	in al, dx
  6098                              <2> 	cmp al, 0
  6099                              <2> 	je .noserial
  6100                              <2> 	mov cl, al
  6101                              <2> 	call showhexsmall
  6102                              <2> 	cmp al, 0x1B
  6103                              <2> 	jne .noserial
  6104                              <2> 	in al, dx
  6105                              <2> 	mov cl, al
  6106                              <2> 	call showhexsmall
  6107                              <2> 	cmp cl, 0x5B
  6108                              <2> 	je .noserial
  6109                              <2> 	ret
  6110                              <2> %else
  6111 000047B2 E88B150000          <2> 	call getkey
  6112 000047B7 31C0                <2> 	xor eax, eax
  6113 000047B9 31C9                <2> 	xor ecx, ecx
  6114 000047BB 8A0D[1E5D0000]      <2> 	mov cl, [specialkey]
  6115 000047C1 80F900              <2> 	cmp cl, 0
  6116 000047C4 0F8405000000        <2> 	je near .nospecialkeycode
  6117 000047CA E8C8E9FFFF          <2> 	call showhexsmall
  6118                              <2> .nospecialkeycode:
  6119 000047CF 668B0D[A6230000]    <2> 	mov cx, [lastkey + 2]
  6120 000047D6 E8BCE9FFFF          <2> 	call showhexsmall
  6121 000047DB 80F901              <2> 	cmp cl, 1
  6122 000047DE 75C2                <2> 	jne keycode
  6123 000047E0 C3                  <2> 	ret
  6124                              <2> %endif
  6125                              <1> %ifdef gui.included
  6126                              <1> 	%include 'source/programs/line.asm'
  6127 000047E1 FF2C6C696E6500      <2> db 255,44,"line",0
  6128                              <2> linetester:
  6129 000047E8 803D[6C860000]00    <2> 	cmp byte [guion], 0
  6130 000047EF 0F841B000000        <2> 	je near .done
  6131 000047F5 668B35[6D020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6132 000047FC BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6133 00004801 E868000000          <2> 	call .circletest
  6134 00004806 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6135 0000480B E801000000          <2> 	call .linetest
  6136                              <2> .done:
  6137 00004810 C3                  <2> 	ret
  6138                              <2> 
  6139                              <2> .linetest:
  6140 00004811 53                  <2> 	push ebx
  6141 00004812 E8D6000000          <2> 	call .stime
  6142 00004817 5B                  <2> 	pop ebx
  6143 00004818 31FF                <2> 	xor edi, edi
  6144                              <2> .ltlp:
  6145 0000481A 53                  <2> 	push ebx
  6146 0000481B E81C010000          <2> 	call .st
  6147 00004820 66F7D6              <2> 	not si
  6148 00004823 E814010000          <2> 	call .st
  6149 00004828 5B                  <2> 	pop ebx
  6150 00004829 66F7D6              <2> 	not si
  6151 0000482C 660335[6B020000]    <2> 	add si, [timenanoseconds]
  6152 00004833 4B                  <2> 	dec ebx
  6153 00004834 81FB00000000        <2> 	cmp ebx, 0
  6154 0000483A 77DE                <2> 	ja .ltlp
  6155 0000483C E8C4000000          <2> 	call .etime
  6156 00004841 53                  <2> 	push ebx	
  6157 00004842 57                  <2> 	push edi
  6158 00004843 E8F0260000          <2> 	call guiclear
  6159 00004848 E83B270000          <2> 	call reloadallgraphics
  6160 0000484D 59                  <2> 	pop ecx
  6161 0000484E E813EAFFFF          <2> 	call showdec
  6162 00004853 BE[7E490000]        <2> 	mov esi, .msg
  6163 00004858 E8EBD4FFFF          <2> 	call print
  6164 0000485D 59                  <2> 	pop ecx
  6165 0000485E E803EAFFFF          <2> 	call showdec
  6166 00004863 BE[AA490000]        <2> 	mov esi, .msgtime
  6167 00004868 E8DBD4FFFF          <2> 	call print
  6168 0000486D C3                  <2> 	ret
  6169                              <2> 	
  6170                              <2> .circletest:
  6171 0000486E 53                  <2> 	push ebx
  6172 0000486F E879000000          <2> 	call .stime
  6173 00004874 5B                  <2> 	pop ebx
  6174 00004875 31FF                <2> 	xor edi, edi
  6175                              <2> .ctlp:
  6176 00004877 53                  <2> 	push ebx
  6177 00004878 668B0D[35560000]    <2> 	mov cx, [resolutiony]
  6178 0000487F 66D1E9              <2> 	shr cx, 1
  6179 00004882 668B15[33560000]    <2> 	mov dx, [resolutionx]
  6180 00004889 66D1EA              <2> 	shr dx, 1
  6181 0000488C 6689C8              <2> 	mov ax, cx
  6182                              <2> .circle:
  6183 0000488F 60                  <2> 	pusha
  6184 00004890 E800210000          <2> 	call drawcircle
  6185 00004895 61                  <2> 	popa
  6186 00004896 6648                <2> 	dec ax
  6187 00004898 47                  <2> 	inc edi
  6188 00004899 663D0100            <2> 	cmp ax, 1
  6189 0000489D 77F0                <2> 	ja .circle
  6190 0000489F 66F7D6              <2> 	not si
  6191                              <2> .circle2:
  6192 000048A2 60                  <2> 	pusha
  6193 000048A3 E8ED200000          <2> 	call drawcircle
  6194 000048A8 61                  <2> 	popa
  6195 000048A9 47                  <2> 	inc edi
  6196 000048AA 6640                <2> 	inc ax
  6197 000048AC 6639C8              <2> 	cmp ax, cx
  6198 000048AF 76F1                <2> 	jbe .circle2
  6199 000048B1 5B                  <2> 	pop ebx
  6200 000048B2 66F7D6              <2> 	not si
  6201 000048B5 660335[6B020000]    <2> 	add si, [timenanoseconds]
  6202 000048BC 4B                  <2> 	dec ebx
  6203 000048BD 81FB00000000        <2> 	cmp ebx, 0
  6204 000048C3 77B2                <2> 	ja .ctlp
  6205 000048C5 E83B000000          <2> 	call .etime
  6206 000048CA 53                  <2> 	push ebx
  6207 000048CB 57                  <2> 	push edi
  6208 000048CC 59                  <2> 	pop ecx
  6209 000048CD E894E9FFFF          <2> 	call showdec
  6210 000048D2 BE[93490000]        <2> 	mov esi, .msgcircle
  6211 000048D7 E86CD4FFFF          <2> 	call print
  6212 000048DC 59                  <2> 	pop ecx
  6213 000048DD E884E9FFFF          <2> 	call showdec
  6214 000048E2 BE[AA490000]        <2> 	mov esi, .msgtime
  6215 000048E7 E85CD4FFFF          <2> 	call print
  6216 000048EC C3                  <2> 	ret
  6217                              <2> 	
  6218                              <2> .stime:
  6219 000048ED F4                  <2> 	hlt
  6220 000048EE A1[67020000]        <2> 	mov eax, [timeseconds]
  6221 000048F3 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  6222 000048F9 A3[B9490000]        <2> 	mov [.time], eax
  6223 000048FE 891D[BD490000]      <2> 	mov [.time + 4], ebx
  6224 00004904 C3                  <2> 	ret
  6225                              <2> 	
  6226                              <2> .etime:
  6227 00004905 A1[67020000]        <2> 	mov eax, [timeseconds]
  6228 0000490A 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  6229 00004910 8B0D[B9490000]      <2> 	mov ecx, [.time]
  6230 00004916 8B15[BD490000]      <2> 	mov edx, [.time + 4]
  6231 0000491C C1EA0A              <2> 	shr edx, 10
  6232 0000491F C1EB0A              <2> 	shr ebx, 10
  6233 00004922 29C8                <2> 	sub eax, ecx
  6234 00004924 3D00000000          <2> 	cmp eax, 0
  6235 00004929 740E                <2> 	je .notclp
  6236                              <2> .tclp:
  6237 0000492B 81C340420F00        <2> 	add ebx, 1000000
  6238 00004931 48                  <2> 	dec eax
  6239 00004932 3D00000000          <2> 	cmp eax, 0
  6240 00004937 75F2                <2> 	jne .tclp
  6241                              <2> .notclp:
  6242 00004939 29D3                <2> 	sub ebx, edx
  6243 0000493B C3                  <2> 	ret
  6244                              <2> 	
  6245                              <2> .st:
  6246 0000493C 6631C0              <2> 	xor ax, ax
  6247 0000493F 6631DB              <2> 	xor bx, bx
  6248 00004942 668B0D[35560000]    <2> 	mov cx, [resolutiony]
  6249 00004949 668B15[33560000]    <2> 	mov dx, [resolutionx]
  6250                              <2> .lp:
  6251 00004950 60                  <2> 	pusha
  6252 00004951 E8B6240000          <2> 	call drawline
  6253 00004956 61                  <2> 	popa
  6254                              <2> .noswitch:
  6255 00004957 47                  <2> 	inc edi
  6256 00004958 6643                <2> 	inc bx
  6257 0000495A 664A                <2> 	dec dx
  6258 0000495C 6681FB0000          <2> 	cmp bx, 0
  6259 00004961 74ED                <2> 	je .lp
  6260 00004963 6681FA0000          <2> 	cmp dx, 0
  6261 00004968 75E6                <2> 	jne .lp
  6262                              <2> .lp2:
  6263 0000496A 60                  <2> 	pusha
  6264 0000496B E89C240000          <2> 	call drawline
  6265 00004970 61                  <2> 	popa
  6266 00004971 47                  <2> 	inc edi
  6267 00004972 6640                <2> 	inc ax
  6268 00004974 6649                <2> 	dec cx
  6269 00004976 6681F90000          <2> 	cmp cx, 0
  6270 0000497B 75ED                <2> 	jne .lp2
  6271 0000497D C3                  <2> 	ret
  6272                              <2> 	
  6273 0000497E 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6274 00004987 6520647261776E2069- <2>
  6275 00004990 6E2000              <2>
  6276 00004993 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6277 0000499C 65726520647261776E- <2>
  6278 000049A5 20696E2000          <2>
  6279 000049AA 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6280 000049B3 6E64732E0A00        <2>
  6281 000049B9 0000000000000000    <2> .time dd 0,0	
  6282                              <1> %endif
  6283                              <1> %include 'source/programs/logout.asm'
  6284 000049C1 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6285 000049CA E947E1FFFF          <2> 	jmp os
  6286                              <1> %include 'source/programs/loop.asm'
  6287 000049CF FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6288 000049D6 803D[83B20300]00    <2> 	cmp byte [LOOPON], 0
  6289 000049DD 0F8501000000        <2> 	jne near filoop
  6290 000049E3 C3                  <2> 	ret
  6291 000049E4 8B35[84B20300]      <2> filoop: mov esi, [LOOPPOS]
  6292 000049EA FE0D[19B20300]      <2> 	dec byte [IFON]
  6293 000049F0 C605[83B20300]00    <2> 	mov byte [LOOPON], 0
  6294 000049F7 8935[7EB20300]      <2> 	mov [BATCHPOS], esi
  6295 000049FD 8935[BC390000]      <2> 	mov [batchedi], esi
  6296 00004A03 C3                  <2> 	ret 
  6297                              <1> %ifdef disk.none
  6298                              <1> %else
  6299                              <1> 	%include 'source/programs/ls.asm'
  6300 00004A04 FF2C6C7300          <2> db 255,44,"ls",0
  6301 00004A09 BE[C6880300]        <2> 		mov esi, diskfileindex
  6302                              <2> 	diskindexdir:
  6303 00004A0E 803E5F              <2> 		cmp byte [esi], '_'
  6304 00004A11 7440                <2> 		je nextdiskindexdir
  6305 00004A13 E80CD3FFFF          <2> 		call printquiet
  6306 00004A18 56                  <2> 		push esi
  6307 00004A19 BE[734A0000]        <2> 		mov esi, disktab
  6308 00004A1E E801D3FFFF          <2> 		call printquiet
  6309 00004A23 5E                  <2> 		pop esi
  6310 00004A24 8B4E05              <2> 		mov ecx, [esi + 5]
  6311 00004A27 C605[96310000]05    <2> 		mov byte [firsthexshown], 5
  6312 00004A2E E833E8FFFF          <2> 		call showdec
  6313 00004A33 56                  <2> 		push esi
  6314 00004A34 BE[47860000]        <2> 		mov esi, line
  6315 00004A39 E8E6D2FFFF          <2> 		call printquiet
  6316 00004A3E 5E                  <2> 		pop esi
  6317 00004A3F 81C609000000        <2> 		add esi, 9
  6318 00004A45 81FE[0A8A0300]      <2> 		cmp esi, enddiskfileindex
  6319 00004A4B 72C1                <2> 		jb diskindexdir
  6320 00004A4D E841DEFFFF          <2> 		call termcopy
  6321 00004A52 C3                  <2> 		ret
  6322                              <2> 	nextdiskindexdir:
  6323 00004A53 46                  <2> 		inc esi
  6324 00004A54 803E00              <2> 		cmp byte [esi], 0
  6325 00004A57 75FA                <2> 		jne nextdiskindexdir
  6326 00004A59 81C609000000        <2> 		add esi, 9
  6327 00004A5F 81FE[0A8A0300]      <2> 		cmp esi, enddiskfileindex
  6328 00004A65 72A7                <2> 		jb diskindexdir
  6329 00004A67 E827DEFFFF          <2> 		call termcopy
  6330 00004A6C C3                  <2> 		ret
  6331                              <2> 		
  6332 00004A6D 4469736B2000        <2> 		diskmsg db "Disk ",0
  6333 00004A73 0D09090900          <2> 		disktab db 13,9,9,9,0
  6334                              <1> %endif
  6335                              <1> %include 'source/programs/memory.asm'
  6336 00004A78 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6337 00004A81 BE[82860000]        <2> 	mov esi, memlistbuf
  6338 00004A86 31FF                <2> 	xor edi, edi
  6339 00004A88 668B3D[C2880000]    <2> 	mov di, [memlistend]
  6340 00004A8F 01F7                <2> 	add edi, esi
  6341                              <2> printmemmap:
  6342 00004A91 8B0E                <2> 	mov ecx, [esi]
  6343 00004A93 E813E7FFFF          <2> 	call showhex
  6344 00004A98 81C608000000        <2> 	add esi, 8
  6345 00004A9E 8B0E                <2> 	mov ecx, [esi]
  6346 00004AA0 E806E7FFFF          <2> 	call showhex
  6347 00004AA5 81C608000000        <2> 	add esi, 8
  6348 00004AAB 8B0E                <2> 	mov ecx, [esi]
  6349 00004AAD E8F9E6FFFF          <2> 	call showhex
  6350 00004AB2 81C608000000        <2> 	add esi, 8
  6351 00004AB8 57                  <2> 	push edi
  6352 00004AB9 56                  <2> 	push esi
  6353 00004ABA E884D2FFFF          <2> 	call printline
  6354 00004ABF 5E                  <2> 	pop esi
  6355 00004AC0 5F                  <2> 	pop edi
  6356 00004AC1 39FE                <2> 	cmp esi, edi
  6357 00004AC3 72CC                <2> 	jb printmemmap
  6358 00004AC5 C3                  <2> 	ret
  6359                              <2> 	
  6360                              <1> %include 'source/programs/pci.asm'
  6361 00004AC6 FF2C70636900        <2> db 255,44,"pci",0
  6362 00004ACC E8E4180000          <2> 	call pcidump
  6363 00004AD1 C3                  <2> 	ret 
  6364                              <1> %ifdef network.included
  6365                              <1> 	%include 'source/programs/ping.asm'
  6366                              <1> %endif
  6367                              <1> %ifdef disk.none
  6368                              <1> %else
  6369                              <1> 	%include 'source/programs/play.asm'
  6370 00004AD2 FF2C706C61796100    <2> db 255,44,"playa",0
  6371 00004ADA 8B3D[892F0000]      <2> 	mov edi, [currentcommandloc]
  6372 00004AE0 81C706000000        <2> 	add edi, 6
  6373 00004AE6 E835000000          <2> 	call playasync
  6374 00004AEB C3                  <2> 	ret
  6375 00004AEC FF2C706C61792000    <2> db 255,44,"play ",0
  6376                              <2> play:
  6377 00004AF4 8B3D[892F0000]      <2> 	mov edi, [currentcommandloc]
  6378 00004AFA 81C705000000        <2> 	add edi, 5
  6379 00004B00 E81B000000          <2> 	call playasync
  6380                              <2> .waitforsound:
  6381 00004B05 F4                  <2> 	hlt
  6382                              <2> %ifdef sound.included
  6383 00004B06 A1[085D0000]        <2> 	mov eax, [Length0]
  6384 00004B0B 660B05[0C5D0000]    <2> 	or ax, [Length1]
  6385                              <2> %endif
  6386 00004B12 0A05[6F020000]      <2> 	or al, [soundon]
  6387 00004B18 3D00000000          <2> 	cmp eax, 0
  6388 00004B1D 75E6                <2> 	jne .waitforsound
  6389 00004B1F C3                  <2> 	ret
  6390                              <2> playasync:
  6391 00004B20 BE0000C000          <2> 	mov esi, 0xC00000
  6392 00004B25 E8BA1B0000          <2> 	call loadfile
  6393 00004B2A 81FA94010000        <2> 	cmp edx, 404
  6394 00004B30 743F                <2> 	je nosoundfound
  6395 00004B32 BB0000C000          <2> 	mov ebx, 0xC00000
  6396 00004B37 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6397 00004B3E 0F843F010000        <2> 	je near wave_player
  6398 00004B44 66813B534E          <2> 	cmp word [ebx], "SN"
  6399 00004B49 7526                <2> 	jne nosoundfound
  6400 00004B4B 81C306000000        <2> 	add ebx, 6
  6401 00004B51 891D[72020000]      <2> 	mov [soundpos], ebx
  6402 00004B57 035BFC              <2> 	add ebx, [ebx - 4]
  6403 00004B5A 891D[76020000]      <2> 	mov [soundendpos], ebx
  6404 00004B60 66C705[70020000]00- <2> 	mov word [soundrepititions], 0
  6405 00004B68 00                  <2>
  6406 00004B69 C605[6F020000]01    <2> 	mov byte [soundon], 1
  6407 00004B70 C3                  <2> 	ret
  6408                              <2> nosoundfound:
  6409 00004B71 BE[974B0000]        <2> 	mov esi, notfoundsound
  6410 00004B76 E8CDD1FFFF          <2> 	call print
  6411 00004B7B 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  6412 00004B81 81C605000000        <2> 	add esi, 5
  6413 00004B87 E8BCD1FFFF          <2> 	call print
  6414 00004B8C BE[16860000]        <2> 	mov esi, notfound2
  6415 00004B91 E8B2D1FFFF          <2> 	call print
  6416 00004B96 C3                  <2> 	ret
  6417 00004B97 706C61793A2000      <2> notfoundsound db "play: ",0
  6418                              <2> 
  6419                              <2> %ifdef sound.included
  6420                              <2> sbplay:
  6421 00004B9E BE0000C000          <2> 		mov esi, 0xC00000
  6422 00004BA3 89F3                <2> 		mov ebx, esi
  6423 00004BA5 81C62C000000        <2> 		add esi, WAVSTART
  6424 00004BAB 29F7                <2> 		sub edi, esi
  6425 00004BAD 66893D[0C5D0000]    <2> 		mov [Length1], di
  6426 00004BB4 C1EF0F              <2> 		shr edi, 15
  6427 00004BB7 893D[085D0000]      <2> 		mov [Length0], edi
  6428 00004BBD 8B4B18              <2> 		mov ecx, [ebx + 24]
  6429 00004BC0 890D[195D0000]      <2> 		mov [Freq], ecx
  6430 00004BC6 31C0                <2> 		xor eax, eax
  6431 00004BC8 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6432 00004BCD 81C22C000000        <2> 		add edx, WAVSTART
  6433 00004BD3 01D0                <2> 		add	eax, edx
  6434 00004BD5 89C6                <2> 		mov esi, eax
  6435 00004BD7 31C9                <2> 		xor ecx, ecx
  6436 00004BD9 31DB                <2> 		xor ebx, ebx
  6437 00004BDB 66891D[165D0000]    <2> 		mov [SegLoc], bx
  6438 00004BE2 81C300000800        <2> 		add ebx, 0x80000
  6439 00004BE8 66B9FFFF            <2> 		mov cx, 0xFFFF
  6440 00004BEC 6681FF0000          <2> 		cmp di, 0
  6441 00004BF1 7520                <2> 		jne .autoinit
  6442 00004BF3 668B0D[0C5D0000]    <2> 		mov cx, [Length1]
  6443 00004BFA C605[075D0000]01    <2> 		mov byte [OddLength], 1
  6444 00004C01 6681F90080          <2> 		cmp cx, 32768
  6445 00004C06 730B                <2> 		jae .autoinit
  6446 00004C08 C605[075D0000]00    <2> 		mov byte [OddLength], 0
  6447 00004C0F 66D1E1              <2> 		shl cx, 1
  6448 00004C12 47                  <2> 		inc edi
  6449                              <2> .autoinit:
  6450 00004C13 4F                  <2> 		dec edi
  6451 00004C14 893D[085D0000]      <2> 		mov [Length0], edi
  6452 00004C1A 66890D[0C5D0000]    <2> 		mov [Length1], cx
  6453 00004C21 66D1E9              <2> 		shr cx, 1
  6454 00004C24 6641                <2> 		inc cx
  6455 00004C26 01C8                <2> 		add eax, ecx
  6456 00004C28 A3[0E5D0000]        <2> 		mov [NextMemLoc], eax
  6457 00004C2D 8935[125D0000]      <2> 		mov	[MemLoc], esi
  6458 00004C33 E8750F0000          <2> 		call DMACopy
  6459 00004C38 31DB                <2> 		xor ebx, ebx
  6460 00004C3A 668B1D[165D0000]    <2> 		mov bx, [SegLoc]
  6461 00004C41 31C9                <2> 		xor ecx, ecx
  6462 00004C43 668B0D[0C5D0000]    <2> 		mov cx, [Length1]
  6463 00004C4A 66D1E9              <2> 		shr cx, 1
  6464 00004C4D 6641                <2> 		inc cx
  6465 00004C4F 01CB                <2> 		add ebx, ecx
  6466 00004C51 66891D[165D0000]    <2> 		mov [SegLoc], bx
  6467 00004C58 81C300000800        <2> 		add ebx, 0x80000
  6468 00004C5E 8B35[0E5D0000]      <2> 		mov esi, [NextMemLoc]
  6469 00004C64 89F0                <2> 		mov eax, esi
  6470 00004C66 01C8                <2> 		add eax, ecx
  6471 00004C68 A3[0E5D0000]        <2> 		mov [NextMemLoc], eax
  6472 00004C6D 8935[125D0000]      <2> 		mov	[MemLoc], esi
  6473 00004C73 E8350F0000          <2> 		call DMACopy
  6474 00004C78 E8530F0000          <2> 		call DMAPlay
  6475 00004C7D E8DD0F0000          <2> 		call PlayDSP
  6476 00004C82 C3                  <2> 		ret
  6477                              <2> WAVSTART equ 44
  6478                              <2> wave_player:
  6479 00004C83 803D[1D5D0000]01    <2> 	cmp byte [SoundBlaster], 1
  6480 00004C8A 0F840EFFFFFF        <2> 	je near sbplay
  6481 00004C90 BE[9B4C0000]        <2> 	mov esi, nosoundblaster
  6482 00004C95 E8AED0FFFF          <2> 	call print
  6483 00004C9A C3                  <2> 	ret
  6484                              <2> %else
  6485                              <2> 	wave_player:
  6486                              <2> 		mov esi, nosoundblaster
  6487                              <2> 		call print
  6488                              <2> 		ret
  6489                              <2> %endif
  6490 00004C9B 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6491 00004CA4 426C61737465722064- <2>
  6492 00004CAD 657465637465642E0A- <2>
  6493 00004CB6 00                  <2>
  6494                              <1> %endif
  6495                              <1> %include 'source/programs/pwd.asm'
  6496 00004CB7 FF2C70776400        <2> db 255,44,"pwd",0
  6497 00004CBD BE[14B00300]        <2> 	mov esi, currentfolder
  6498 00004CC2 E85DD0FFFF          <2> 	call printquiet
  6499 00004CC7 E877D0FFFF          <2> 	call printline
  6500 00004CCC C3                  <2> 	ret
  6501                              <2> 	
  6502                              <1> %include 'source/programs/reboot.asm'
  6503 00004CCD FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6504 00004CD6 0F011D[E04C0000]    <2> 		lidt [idtreboot]
  6505 00004CDD CD00                <2> 		int 0
  6506 00004CDF F4                  <2> 		hlt
  6507                              <2> 	
  6508 00004CE0 0000                <2> 	idtreboot dw 0
  6509 00004CE2 00000000            <2> 			  dd 0
  6510                              <2> 
  6511                              <2> 	coldboot:
  6512 00004CE6 66B84000            <2> 		MOV AX, 0040h
  6513 00004CEA 8EC0                <2> 		MOV ES, AX
  6514 00004CEC 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6515 00004CF5 00                  <2>
  6516 00004CF6 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6517 00004CFD CF                  <2> 		IRET
  6518                              <2> 
  6519                              <2> 	warmboot:
  6520 00004CFE 66B84000            <2> 		MOV AX, 0040h
  6521 00004D02 8EC0                <2> 		MOV ES, AX
  6522 00004D04 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6523 00004D0D 12                  <2>
  6524 00004D0E EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6525 00004D15 CF                  <2> 		IRET
  6526                              <2> 		
  6527                              <1> %include 'source/programs/reg.asm'
  6528 00004D16 FF2C72656700        <2> db 255,44,"reg",0
  6529 00004D1C CD03                <2> 	int 3
  6530 00004D1E C3                  <2> 	ret 
  6531                              <1> %ifdef disk.none
  6532                              <1> %else
  6533                              <1> 	%include 'source/programs/show.asm'
  6534 00004D1F FF2C73686F7700      <2> db 255,44,"show",0
  6535                              <2> showprog:
  6536 00004D26 8B3D[892F0000]      <2> 		mov edi, [currentcommandloc]
  6537 00004D2C 81C705000000        <2> 		add edi, 5
  6538 00004D32 BE00004000          <2> 		mov esi, 0x400000
  6539 00004D37 803F26              <2> 		cmp byte [edi], '&'
  6540 00004D3A 741B                <2> 		je .nullfile
  6541 00004D3C BE00008000          <2> 		mov esi, 0x800000
  6542 00004D41 E89E190000          <2> 		call loadfile
  6543 00004D46 81FA94010000        <2> 		cmp edx, 404
  6544 00004D4C 0F847E000000        <2> 		je near filenotfound
  6545 00004D52 BE00008000          <2> 		mov esi, 0x800000
  6546                              <2> .nullfile:
  6547                              <2> %ifdef gui.included
  6548 00004D57 66813E424D          <2> 		cmp word [esi], "BM"
  6549 00004D5C 740B                <2> 		je bmpfound
  6550                              <2> %endif
  6551 00004D5E E8E5CFFFFF          <2> 		call print
  6552 00004D63 E8DBCFFFFF          <2> 		call printline
  6553 00004D68 C3                  <2> 		ret
  6554                              <2> %ifdef gui.included
  6555                              <2> bmpfound:
  6556 00004D69 803D[6C860000]00    <2> 		cmp byte [guion], 0
  6557 00004D70 0F8428000000        <2> 		je near noguibmp
  6558 00004D76 BE00008000          <2> 		mov esi, 0x800000
  6559 00004D7B 31C9                <2> 		xor ecx, ecx
  6560 00004D7D 31D2                <2> 		xor edx, edx
  6561 00004D7F 31C0                <2> 		xor eax, eax
  6562 00004D81 31DB                <2> 		xor ebx, ebx
  6563 00004D83 E83B1B0000          <2> 		call showbmp
  6564 00004D88 30C0                <2> 		xor al, al
  6565 00004D8A B405                <2> 		mov ah, 5
  6566 00004D8C CD30                <2> 		int 30h
  6567 00004D8E E8A5210000          <2> 		call guiclear
  6568 00004D93 E8841E0000          <2> 		call clearmousecursor
  6569 00004D98 E8EB210000          <2> 		call reloadallgraphics
  6570 00004D9D C3                  <2> 		ret
  6571                              <2> noguibmp:
  6572 00004D9E BE[A94D0000]        <2> 		mov esi, warnguimsg
  6573 00004DA3 E8A0CFFFFF          <2> 		call print
  6574 00004DA8 C3                  <2> 		ret
  6575 00004DA9 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6576 00004DB2 6E6F7420626520646F- <2>
  6577 00004DBB 6E6520776974686F75- <2>
  6578 00004DC4 742074686520475549- <2>
  6579 00004DCD 2E0A00              <2>
  6580                              <2> %endif
  6581                              <2> 
  6582                              <2> filenotfound:
  6583 00004DD0 BE[034E0000]        <2> 		mov esi, filenf
  6584 00004DD5 E86ECFFFFF          <2> 		call print
  6585 00004DDA 8B35[892F0000]      <2> 		mov esi, [currentcommandloc]
  6586                              <2> findfilenotfoundzero:
  6587 00004DE0 8A06                <2> 		mov al, [esi]
  6588 00004DE2 46                  <2> 		inc esi
  6589 00004DE3 3C00                <2> 		cmp al, 0
  6590 00004DE5 7411                <2> 		je nofilenamenotfound
  6591 00004DE7 81FE[88CA0300]      <2> 		cmp esi, buftxtend
  6592 00004DED 7309                <2> 		jae nofilenamenotfound
  6593 00004DEF 3C20                <2> 		cmp al, " "
  6594 00004DF1 75ED                <2> 		jne findfilenotfoundzero
  6595 00004DF3 E850CFFFFF          <2> 		call print
  6596                              <2> nofilenamenotfound:
  6597 00004DF8 BE[0E4E0000]        <2> 		mov esi, filenf2
  6598 00004DFD E846CFFFFF          <2> 		call print
  6599 00004E02 C3                  <2> 		ret
  6600 00004E03 5468652066696C6520- <2> filenf db "The file ",34,0
  6601 00004E0C 2200                <2>
  6602 00004E0E 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6603 00004E17 6F7420626520666F75- <2>
  6604 00004E20 6E642E0A00          <2>
  6605                              <1> %endif
  6606                              <1> %include 'source/programs/shush.asm'
  6607 00004E25 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6608                              <2> shushprog:
  6609                              <2> %ifdef gui.included
  6610 00004E2D 803D[6C860000]00    <2> 	cmp byte [guion], 0
  6611 00004E34 0F84B9000000        <2> 	je near .noswitchsize
  6612 00004E3A 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  6613 00004E40 81C606000000        <2> 	add esi, 6
  6614 00004E46 56                  <2> 	push esi
  6615 00004E47 4E                  <2> 	dec esi
  6616                              <2> .findspace:
  6617 00004E48 46                  <2> 	inc esi
  6618 00004E49 8A06                <2> 	mov al, [esi]
  6619 00004E4B 3C00                <2> 	cmp al, 0
  6620 00004E4D 0F84A0000000        <2> 	je near .noswitchsize
  6621 00004E53 3C58                <2> 	cmp al, "X"
  6622 00004E55 7408                <2> 	je .donefind
  6623 00004E57 3C78                <2> 	cmp al, "x"
  6624 00004E59 7404                <2> 	je .donefind
  6625 00004E5B 3C20                <2> 	cmp al, " "
  6626 00004E5D 75E9                <2> 	jne .findspace
  6627                              <2> .donefind:
  6628 00004E5F 30C0                <2> 	xor al, al
  6629 00004E61 8806                <2> 	mov [esi], al
  6630 00004E63 46                  <2> 	inc esi
  6631 00004E64 89F7                <2> 	mov edi, esi
  6632 00004E66 E8D6E4FFFF          <2> 	call cnvrttxt
  6633 00004E6B 89C8                <2> 	mov eax, ecx
  6634 00004E6D 5E                  <2> 	pop esi
  6635 00004E6E 50                  <2> 	push eax
  6636 00004E6F 89F7                <2> 	mov edi, esi
  6637 00004E71 E8CBE4FFFF          <2> 	call cnvrttxt
  6638 00004E76 89CB                <2> 	mov ebx, ecx
  6639 00004E78 58                  <2> 	pop eax	
  6640 00004E79 6681FB0000          <2> 	cmp bx, 0
  6641 00004E7E 0F846F000000        <2> 	je near .noswitchsize
  6642 00004E84 663D0000            <2> 	cmp ax, 0
  6643 00004E88 0F8465000000        <2> 	je near .noswitchsize
  6644 00004E8E 66C1E303            <2> 	shl bx, 3
  6645 00004E92 66C1E004            <2> 	shl ax, 4
  6646 00004E96 663B1D[33560000]    <2> 	cmp bx, [resolutionx]
  6647 00004E9D 7607                <2> 	jbe .nofixx
  6648 00004E9F 668B1D[33560000]    <2> 	mov bx, [resolutionx]
  6649                              <2> .nofixx:
  6650 00004EA6 66051000            <2> 	add ax, 16
  6651 00004EAA 663B05[35560000]    <2> 	cmp ax, [resolutiony]
  6652 00004EB1 7606                <2> 	jbe .nofixy
  6653 00004EB3 66A1[35560000]      <2> 	mov ax, [resolutiony]
  6654                              <2> .nofixy:
  6655 00004EB9 662D1000            <2> 	sub ax, 16
  6656 00004EBD 6631C9              <2> 	xor cx, cx
  6657 00004EC0 6631D2              <2> 	xor dx, dx
  6658 00004EC3 66891D[26730000]    <2> 	mov [termwindow], bx
  6659 00004ECA 66A3[28730000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6660 00004ED0 BE[26730000]        <2> 	mov esi, termwindow
  6661 00004ED5 31DB                <2> 	xor ebx, ebx
  6662 00004ED7 6631C0              <2> 	xor ax, ax
  6663 00004EDA E879290000          <2> 	call showwindow
  6664 00004EDF E854200000          <2> 	call guiclear
  6665 00004EE4 E80FCFFFFF          <2> 	call clear
  6666 00004EE9 E89A200000          <2> 	call reloadallgraphics
  6667 00004EEE E8E11D0000          <2> 	call switchmousepos2
  6668                              <2> .noswitchsize:
  6669                              <2> %endif
  6670 00004EF3 BE[FE4E0000]        <2> 	mov esi, shushmsg
  6671 00004EF8 E84BCEFFFF          <2> 	call print
  6672 00004EFD C3                  <2> 	ret
  6673 00004EFE 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6674 00004F07 6F2074686520536F6C- <2>
  6675 00004F10 6C65724F5320486172- <2>
  6676 00004F19 646C7920556E69782D- <2>
  6677 00004F22 436F6D70617469626C- <2>
  6678 00004F2B 65205368656C6C210A- <2>
  6679 00004F34 00                  <2>
  6680                              <1> %include 'source/programs/system.asm'
  6681 00004F35 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6682 00004F3E BE[4E500000]        <2> 	mov esi, kernelinfomsg
  6683 00004F43 E8DCCDFFFF          <2> 	call printquiet
  6684 00004F48 B9[C6880300]        <2> 	mov ecx, osend
  6685 00004F4D E814E3FFFF          <2> 	call showdec
  6686 00004F52 BE[63500000]        <2> 	mov esi, diskbytemsg
  6687 00004F57 E8C8CDFFFF          <2> 	call printquiet
  6688 00004F5C B9[C6880300]        <2> 	mov ecx, osend
  6689 00004F61 81C1[3C880500]      <2> 	add ecx, commandbufend
  6690 00004F67 81E9[008C0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6691 00004F6D E8F4E2FFFF          <2> 	call showdec
  6692 00004F72 BE[7A500000]        <2> 	mov esi, membytemsg
  6693 00004F77 E8A8CDFFFF          <2> 	call printquiet
  6694 00004F7C BE[DD500000]        <2> 	mov esi, endofmemmsg
  6695 00004F81 E89ECDFFFF          <2> 	call printquiet
  6696 00004F86 B9[3CA02500]        <2> 	mov ecx, bssend
  6697 00004F8B E81BE2FFFF          <2> 	call showhex
  6698 00004F90 BE[93500000]        <2> 	mov esi, systeminfomsg
  6699 00004F95 E88ACDFFFF          <2> 	call printquiet
  6700                              <2> getcpuspeed:
  6701 00004F9A B8FE000000          <2> 	mov eax, 0xFE
  6702 00004F9F E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6703 00004FA1 B020                <2> 	mov al, 0x20
  6704 00004FA3 E620                <2> 	out 0x20, al
  6705 00004FA5 F4                  <2> 	hlt
  6706 00004FA6 0F31                <2> 	rdtsc
  6707 00004FA8 89D6                <2> 	mov esi, edx
  6708 00004FAA 89C7                <2> 	mov edi, eax
  6709 00004FAC 31C0                <2> 	xor eax, eax
  6710 00004FAE C605[4F020000]01    <2> 	mov byte [testingcpuspeed], 1
  6711                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6712 00004FB5 40                  <2> 	inc eax
  6713 00004FB6 EBFD                <2> 	jmp cpuspeedloop
  6714                              <2> cpuspeedloopend:
  6715 00004FB8 0F31                <2> 	rdtsc
  6716 00004FBA 29F8                <2> 	sub eax, edi
  6717 00004FBC 29F2                <2> 	sub edx, esi
  6718 00004FBE 8915[58020000]      <2> 	mov [cpuclocksperint + 4], edx
  6719 00004FC4 A3[54020000]        <2> 	mov [cpuclocksperint], eax
  6720 00004FC9 31C0                <2> 	xor eax, eax
  6721 00004FCB E621                <2> 	out 0x21, al
  6722 00004FCD B020                <2> 	mov al, 0x20
  6723 00004FCF E620                <2> 	out 0x20, al
  6724 00004FD1 31D2                <2> 	xor edx, edx
  6725 00004FD3 31C0                <2> 	xor eax, eax
  6726 00004FD5 A1[50020000]        <2> 	mov eax, [cpuspeedperint]
  6727 00004FDA D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6728                              <2> 				;result by 2
  6729 00004FDC 8B1D[62020000]      <2> 	mov ebx, [timeinterval]
  6730 00004FE2 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6731 00004FE5 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6732 00004FE7 89C1                <2> 	mov ecx, eax
  6733 00004FE9 E878E2FFFF          <2> 	call showdec
  6734 00004FEE BE[C1500000]        <2> 	mov esi, cpuspeedmsg
  6735 00004FF3 E82CCDFFFF          <2> 	call printquiet
  6736 00004FF8 31D2                <2> 	xor edx, edx
  6737 00004FFA A1[54020000]        <2> 	mov eax, [cpuclocksperint]
  6738 00004FFF 8B15[58020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6739 00005005 8B1D[62020000]      <2> 	mov ebx, [timeinterval]
  6740 0000500B C1EB0A              <2> 	shr ebx, 10
  6741 0000500E F7F3                <2> 	div ebx
  6742 00005010 89C1                <2> 	mov ecx, eax
  6743 00005012 E84FE2FFFF          <2> 	call showdec
  6744 00005017 BE[C7500000]        <2> 	mov esi, cpuclockmsg
  6745 0000501C E803CDFFFF          <2> 	call printquiet
  6746 00005021 8B0D[5C020000]      <2> 	mov ecx, [memoryspace]
  6747 00005027 C1E914              <2> 	shr ecx, 20
  6748 0000502A 41                  <2> 	inc ecx	;the reading is one MB behind
  6749 0000502B E836E2FFFF          <2> 	call showdec
  6750 00005030 BE[CC500000]        <2> 	mov esi, memoryspacemsg
  6751 00005035 E80ECDFFFF          <2> 	call print
  6752                              <2> %ifdef sound.included
  6753 0000503A 803D[1D5D0000]00    <2> 	cmp byte [SoundBlaster], 0
  6754 00005041 740A                <2> 	je .nosb
  6755 00005043 BE[A9500000]        <2> 	mov esi, soundblastermsg
  6756 00005048 E8FBCCFFFF          <2> 	call print
  6757                              <2> .nosb:
  6758                              <2> %endif
  6759 0000504D C3                  <2> 	ret
  6760                              <2> 
  6761 0000504E 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6762 00005057 666F726D6174696F6E- <2>
  6763 00005060 3A0A00              <2>
  6764 00005063 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6765 0000506C 6B2053706163652055- <2>
  6766 00005075 7365640A00          <2>
  6767 0000507A 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6768 00005083 6F7279205370616365- <2>
  6769 0000508C 20557365640A00      <2>
  6770 00005093 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6771 0000509C 6E666F726D6174696F- <2>
  6772 000050A5 6E3A0A00            <2>
  6773                              <2> %ifdef sound.included
  6774 000050A9 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6775 000050B2 746572204465746563- <2>
  6776 000050BB 7465642E0A00        <2>
  6777                              <2> %endif
  6778 000050C1 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6779 000050C7 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6780 000050CC 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6781 000050D5 2053706163650A00    <2>
  6782 000050DD 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6783 000050E6 6D6F72792053706163- <2>
  6784 000050EF 653A20307800        <2>
  6785                              <1> %include 'source/programs/time.asm'
  6786 000050F5 FF2C74696D6500      <2> db 255,44,"time",0	
  6787                              <2> timer:
  6788 000050FC 8B35[892F0000]      <2> 	mov esi, [currentcommandloc]
  6789 00005102 81C604000000        <2> 	add esi, 4
  6790 00005108 803E00              <2> 	cmp byte [esi], 0
  6791 0000510B 7477                <2> 	je .norun
  6792 0000510D 46                  <2> 	inc esi
  6793 0000510E 8B0D[67020000]      <2> 	mov ecx, [timeseconds]
  6794 00005114 51                  <2> 	push ecx
  6795 00005115 8B0D[6B020000]      <2> 	mov ecx, [timenanoseconds]
  6796 0000511B 51                  <2> 	push ecx
  6797 0000511C BF[88C60300]        <2> 	mov edi, buftxt
  6798                              <2> .cpcmd:
  6799 00005121 8A06                <2> 	mov al, [esi]
  6800 00005123 8807                <2> 	mov [edi], al
  6801 00005125 46                  <2> 	inc esi
  6802 00005126 47                  <2> 	inc edi
  6803 00005127 3C00                <2> 	cmp al, 0
  6804 00005129 75F6                <2> 	jne .cpcmd
  6805 0000512B E883DDFFFF          <2> 	call run
  6806 00005130 5A                  <2> 	pop edx
  6807 00005131 58                  <2> 	pop eax
  6808                              <2> 
  6809 00005132 8B0D[67020000]      <2> 	mov ecx, [timeseconds]
  6810 00005138 29C1                <2> 	sub ecx, eax
  6811 0000513A 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  6812 00005140 29D3                <2> 	sub ebx, edx
  6813 00005142 7307                <2> 	jae .nosign
  6814 00005144 81C300CA9A3B        <2> 	add ebx, 1000000000
  6815 0000514A 49                  <2> 	dec ecx
  6816                              <2> .nosign:
  6817 0000514B E816E1FFFF          <2> 	call showdec
  6818                              <2> 	
  6819 00005150 89D9                <2> 	mov ecx, ebx
  6820 00005152 BE[3A3F0000]        <2> 	mov esi, timenscache
  6821 00005157 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6822 0000515E C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6823 00005165 C6460A30            <2> 	mov byte [esi + 10], "0"
  6824 00005169 BE[453F0000]        <2> 	mov esi, timenscacheend
  6825 0000516E E8E5DEFFFF          <2> 	call convert
  6826 00005173 BE[3A3F0000]        <2> 	mov esi, timenscache
  6827 00005178 E8CBCBFFFF          <2> 	call print
  6828 0000517D C605[3A3F0000]08    <2> 	mov byte [timenscache], 8
  6829                              <2> .norun:
  6830 00005184 C3                  <2> 	ret
  6831                              <2> 	
  6832                              <1> %include 'source/programs/turnoff.asm'
  6833 00005185 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6834 0000518E 00                  <2>
  6835                              <2> 	turnoff:
  6836 0000518F 66C705[E80C0000]-   <2> 			mov word [realmodeptr], shutdown
  6837 00005196 [A251]              <2>
  6838 00005198 BB[CC510000]        <2> 			mov ebx, halt
  6839 0000519D E834BAFFFF          <2> 			call realmode
  6840                              <2> 
  6841                              <2> [BITS 16]
  6842                              <2> 		shutdown:
  6843 000051A2 B453                <2> 			mov ah, 0x53
  6844 000051A4 B004                <2> 			mov al, 4
  6845 000051A6 31DB                <2> 			xor bx, bx
  6846 000051A8 CD15                <2> 			int 0x15
  6847                              <2> 			
  6848 000051AA B453                <2> 			mov ah, 0x53
  6849 000051AC B001                <2> 			mov al, 1
  6850 000051AE 31DB                <2> 			xor bx, bx
  6851 000051B0 CD15                <2> 			int 0x15
  6852                              <2> 			
  6853 000051B2 B453                <2> 			mov ah, 0x53
  6854 000051B4 B008                <2> 			mov al, 8
  6855 000051B6 BB0100              <2> 			mov bx, 1
  6856 000051B9 B90100              <2> 			mov cx, 1
  6857 000051BC CD15                <2> 			int 0x15
  6858                              <2> 			
  6859 000051BE B453                <2> 			mov ah, 0x53
  6860 000051C0 B007                <2> 			mov al, 7
  6861 000051C2 BB0100              <2> 			mov bx, 1
  6862 000051C5 B90300              <2> 			mov cx, 3
  6863 000051C8 CD15                <2> 			int 0x15
  6864 000051CA EBFE                <2> 			jmp $
  6865                              <2> 			[BITS 32]
  6866 000051CC EBFE                <2> halt: jmp $
  6867                              <1> %include 'source/programs/wait.asm'
  6868 000051CE FF2C7761697400      <2> db 255,44,"wait",0
  6869                              <2> waitkey:
  6870 000051D5 E86AD1FFFF          <2> 		call getchar
  6871 000051DA C3                  <2> 		ret
  6872                              <1> %include 'source/programs/while.asm'
  6873 000051DB FF2C7768696C6500    <2> db 255,44,"while",0
  6874 000051E3 30C0                <2> whilecmd:  xor al, al
  6875 000051E5 3805[82B20300]      <2> 	cmp [BATCHISON], al
  6876 000051EB 0F84A3E8FFFF        <2> 	je near notbatch
  6877 000051F1 8B35[7EB20300]      <2> 	mov esi, [BATCHPOS]
  6878 000051F7 81EE02000000        <2> 	sub esi, 2
  6879 000051FD 4E                  <2> whilefnd: dec esi
  6880 000051FE 8A06                <2> 	mov al, [esi]
  6881 00005200 3C0A                <2> 	cmp al, 10
  6882 00005202 0F840A000000        <2> 	je near whilefnd2
  6883 00005208 3C00                <2> 	cmp al, 0
  6884 0000520A 0F8402000000        <2> 	je near whilefnd2
  6885 00005210 EBEB                <2> 	jmp whilefnd
  6886                              <2> whilefnd2:
  6887 00005212 46                  <2> 	inc esi
  6888 00005213 8935[84B20300]      <2> 	mov [LOOPPOS], esi
  6889 00005219 C605[83B20300]01    <2> 	mov BYTE [LOOPON], 1
  6890 00005220 BE[88C60300]        <2> 	mov esi, buftxt
  6891 00005225 BB[88C60300]        <2> 	mov ebx, buftxt
  6892 0000522A 81C306000000        <2> 	add ebx, 6
  6893 00005230 E9FFF4FFFF          <2> 	jmp chkeqsn
  6894                              <1> progend:		;programs end here	
  6895                              <1> batchprogend:
  6896                                  	%include "source/hardware.asm"
  6897                              <1> %ifdef gui.included
  6898                              <1> 	%include "source/drivers/video/vesa.asm"
  6899                              <2> [BITS 16]
  6900                              <2> guiswitch:
  6901 00005235 81F90000            <2> 	cmp cx, 0
  6902 00005239 750B                <2> 	jne guiswitchdefnum
  6903 0000523B B81200              <2> 	mov ax, 12h
  6904 0000523E 31DB                <2> 	xor bx, bx
  6905 00005240 CD10                <2> 	int 10h
  6906 00005242 E85100              <2> 	call guiloadagain
  6907                              <2> guiswitchnocando:
  6908 00005245 C3                  <2> 	ret	;return without switching as mode number is bad
  6909                              <2> guiswitchdefnum:	;switch to a defined mode number
  6910 00005246 B8004F              <2> 	mov ax, 0x4F00
  6911 00005249 BF[2154]            <2> 	mov di, VBEMODEBLOCK
  6912 0000524C CD10                <2> 	int 10h
  6913 0000524E BE[4354]            <2> 	mov si, reserved
  6914 00005251 81EE0200            <2> 	sub si, 2
  6915                              <2> .loop:
  6916 00005255 81C60200            <2> 	add si, 2
  6917 00005259 81FE[2155]          <2> 	cmp si, oemdata
  6918 0000525D 74E6                <2> 	je guiswitchnocando
  6919 0000525F 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6920 00005263 74E0                <2> 	je guiswitchnocando
  6921 00005265 390C                <2> 	cmp [si], cx
  6922 00005267 75EC                <2> 	jne .loop
  6923 00005269 8936[7B53]          <2> 	mov [videomodecache], si
  6924 0000526D 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6925 00005271 B8014F              <2> 	mov ax, 0x4F01
  6926 00005274 BF[2156]            <2> 	mov di, VBEMODEINFOBLOCK
  6927 00005277 890E[7953]          <2> 	mov [vesamode], cx
  6928 0000527B CD10                <2> 	int 10h
  6929 0000527D E9D900              <2> 	jmp selectedvesa
  6930                              <2> guiload:
  6931 00005280 BE[F953]            <2> 	mov si, bootmsg
  6932 00005283 E8FBAD              <2> 	call printrm
  6933 00005286 31C0                <2> 	xor ax, ax
  6934 00005288 CD16                <2> 	int 16h
  6935 0000528A 3C79                <2> 	cmp al, "y"
  6936 0000528C 0F85AFAD            <2> 	jne near vgaset
  6937 00005290 BE[4686]            <2> 	mov si, crlf
  6938 00005293 E8EBAD              <2> 	call printrm
  6939                              <2> guiloadagain:
  6940 00005296 B8004F              <2> 	mov ax, 04F00h
  6941 00005299 BF[2154]            <2> 	mov di, VBEMODEBLOCK
  6942 0000529C CD10                <2> 	int 10h
  6943 0000529E BE[4354]            <2> 	mov si, reserved
  6944 000052A1 81EE0200            <2> 	sub si, 2
  6945                              <2> findvideomodes:
  6946 000052A5 81C60200            <2> 	add si, 2
  6947 000052A9 8B0C                <2> 	mov cx, [si]
  6948 000052AB 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6949 000052AF 0F840A00            <2> 	je near nextvmode
  6950 000052B3 81FE[2155]          <2> 	cmp si, oemdata
  6951 000052B7 0F8384AD            <2> 	jae near vgaset	;kill if no valid list is found
  6952 000052BB EBE8                <2> 	jmp findvideomodes 	
  6953                              <2> ;debug,shows vmodes available
  6954                              <2> nextvmode:
  6955 000052BD 81EE0200            <2> 	sub si, 2
  6956 000052C1 81FE[4354]          <2> 	cmp si, reserved
  6957 000052C5 0F82CDFF            <2> 	jb near guiloadagain
  6958 000052C9 8B0C                <2> 	mov cx, [si]
  6959 000052CB 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6960 000052CF 0F84EAFF            <2> 	je near nextvmode
  6961 000052D3 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  6962 000052D7 B8014F              <2> 	mov ax, 04F01h
  6963 000052DA BF[2156]            <2> 	mov di, VBEMODEINFOBLOCK
  6964 000052DD 890E[7953]          <2> 	mov [vesamode], cx
  6965 000052E1 CD10                <2> 	int 10h
  6966 000052E3 A0[3A56]            <2> 	mov al, [bitsperpixel]
  6967 000052E6 3C10                <2> 	cmp al, 16
  6968 000052E8 75D3                <2> 	jne nextvmode
  6969 000052EA 8936[7B53]          <2> 	mov [videomodecache], si
  6970 000052EE 84E4                <2> 	test ah, ah
  6971 000052F0 0F842200            <2> 	jz near setvesamode
  6972 000052F4 EBC7                <2> 	jmp nextvmode
  6973 000052F6 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6974 000052FF 20766964656F206D6F- <2>
  6975 00005308 6465204F4B3F28792F- <2>
  6976 00005311 6E290D0A00          <2>
  6977                              <2> setvesamode:
  6978 00005316 8B36[7B53]          <2> 	mov si, [videomodecache]
  6979 0000531A 8B0C                <2> 	mov cx, [si]
  6980 0000531C E86500              <2> 	call decshow
  6981 0000531F B03A                <2> 	mov al, ':'
  6982 00005321 E8CD00              <2> 	call char
  6983 00005324 8B0E[3356]          <2> 	mov cx, [resolutionx]
  6984 00005328 E85900              <2> 	call decshow
  6985 0000532B B078                <2> 	mov al, "x"
  6986 0000532D E8C100              <2> 	call char
  6987 00005330 8B0E[3556]          <2> 	mov cx, [resolutiony]
  6988 00005334 E84D00              <2> 	call decshow
  6989 00005337 B040                <2> 	mov al, "@"
  6990 00005339 E8B500              <2> 	call char
  6991 0000533C 31C9                <2> 	xor cx, cx
  6992 0000533E 8A0E[3A56]          <2> 	mov cl, [bitsperpixel]
  6993 00005342 E83F00              <2> 	call decshow
  6994 00005345 BE[F652]            <2> 	mov si, isthisvideook
  6995 00005348 E836AD              <2> 	call printrm
  6996 0000534B 31C0                <2> 	xor ax, ax
  6997 0000534D CD16                <2> 	int 16h
  6998 0000534F 8B36[7B53]          <2> 	mov si, [videomodecache]
  6999 00005353 3C79                <2> 	cmp al, "y"
  7000 00005355 0F8564FF            <2> 	jne near nextvmode
  7001                              <2> selectedvesa:
  7002 00005359 8B16[3356]          <2> 	mov dx, [resolutionx]
  7003 0000535D 01D2                <2> 	add dx, dx
  7004 0000535F 8916[2157]          <2> 	mov [resolutionx2], dx
  7005 00005363 31D2                <2> 	xor dx, dx
  7006 00005365 31C9                <2> 	xor cx, cx
  7007 00005367 B8024F              <2> 	mov ax, 04F02h
  7008 0000536A 8B1E[7953]          <2> 	mov bx, [vesamode]
  7009 0000536E CD10                <2> 	int 10h		;enter VESA mode
  7010 00005370 C606[6C86]01        <2> 	mov byte [guion], 1
  7011 00005375 E8D7AC              <2> 	call getmemorysize;get the memory map after the video is initialized
  7012 00005378 C3                  <2> 	ret
  7013                              <2> 	
  7014 00005379 0000                <2> vesamode dw 0
  7015 0000537B 0000                <2> videomodecache dw 0
  7016                              <2> 
  7017 0000537D 0000000000          <2> dcnm db 0,0,0,0,0
  7018 00005382 0000                <2> dcnmend db 0,0
  7019                              <2> 
  7020                              <2> 
  7021                              <2> decshow:
  7022 00005384 BE[7D53]            <2> 	mov si, dcnm
  7023                              <2> decclear:
  7024 00005387 B030                <2> 	mov al, "0"
  7025 00005389 8804                <2> 	mov [si], al
  7026 0000538B 46                  <2> 	inc si
  7027 0000538C 81FE[8253]          <2> 	cmp si, dcnmend
  7028 00005390 76F5                <2> 	jbe decclear
  7029 00005392 4E                  <2> 	dec si
  7030 00005393 E81500              <2> 	call convertrm
  7031 00005396 BE[7D53]            <2> 	mov si, dcnm
  7032                              <2> dectst:
  7033 00005399 8A04                <2> 	mov al, [si]
  7034 0000539B 46                  <2> 	inc si
  7035 0000539C 81FE[8253]          <2> 	cmp si, dcnmend
  7036 000053A0 7704                <2> 	ja dectstend
  7037 000053A2 3C30                <2> 	cmp al, "0"
  7038 000053A4 76F3                <2> 	jbe dectst
  7039                              <2> dectstend:
  7040 000053A6 4E                  <2> 	dec si
  7041 000053A7 E8D7AC              <2> 	call printrm
  7042 000053AA C3                  <2> 	ret
  7043                              <2> 	
  7044                              <2> 	
  7045                              <2> convertrm:
  7046 000053AB 4E                  <2> 	dec si
  7047 000053AC 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7048                              <2> cnvrtrm:
  7049 000053AE 89DE                <2> 	mov si, bx
  7050 000053B0 81EE0300            <2> 	sub si, 3
  7051 000053B4 46                  <2> ten3rm:	inc si
  7052 000053B5 81F9E803            <2> 	cmp cx, 1000
  7053 000053B9 7208                <2> 	jb ten2rm
  7054 000053BB 81E9E803            <2> 	sub cx, 1000
  7055 000053BF FE04                <2> 	inc byte [si]
  7056 000053C1 EBEB                <2> 	jmp cnvrtrm
  7057 000053C3 46                  <2> ten2rm:	inc si
  7058 000053C4 81F96400            <2> 	cmp cx, 100
  7059 000053C8 7208                <2> 	jb ten1rm
  7060 000053CA 81E96400            <2> 	sub cx, 100
  7061 000053CE FE04                <2> 	inc byte [si]
  7062 000053D0 EBDC                <2> 	jmp cnvrtrm
  7063 000053D2 46                  <2> ten1rm:	inc si
  7064 000053D3 81F90A00            <2> 	cmp cx, 10
  7065 000053D7 7208                <2> 	jb ten0rm
  7066 000053D9 81E90A00            <2> 	sub cx, 10
  7067 000053DD FE04                <2> 	inc byte [si]
  7068 000053DF EBCD                <2> 	jmp cnvrtrm
  7069 000053E1 46                  <2> ten0rm:	inc si
  7070 000053E2 81F90100            <2> 	cmp cx, 1
  7071 000053E6 7208                <2> 	jb tendnrm
  7072 000053E8 81E90100            <2> 	sub cx, 1
  7073 000053EC FE04                <2> 	inc byte [si]
  7074 000053EE EBBE                <2> 	jmp cnvrtrm
  7075                              <2> tendnrm:
  7076 000053F0 C3                  <2> 	ret
  7077                              <2> 
  7078                              <2>     char: 		    ;char must be in al
  7079 000053F1 BB0700              <2>        mov bx, 07
  7080 000053F4 B40E                <2> 	   mov ah, 0Eh
  7081 000053F6 CD10                <2> 	   int 10h
  7082 000053F8 C3                  <2> 	   ret
  7083                              <2> 
  7084 000053F9 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7085 00005402 20746865204755493F- <2>
  7086 0000540B 28792F6E2900        <2>
  7087                              <2> 
  7088                              <2> 
  7089                              <2> mcursor:
  7090 00005411 01                  <2> 	db	00000001b
  7091 00005412 81                  <2> 	db	10000001b
  7092 00005413 C1                  <2> 	db	11000001b
  7093 00005414 E1                  <2> 	db	11100001b
  7094 00005415 F1                  <2> 	db	11110001b
  7095 00005416 F9                  <2> 	db	11111001b
  7096 00005417 FD                  <2> 	db	11111101b
  7097 00005418 FF                  <2> 	db	11111111b
  7098 00005419 F9                  <2> 	db	11111001b
  7099 0000541A B9                  <2> 	db	10111001b
  7100 0000541B 39                  <2> 	db	00111001b
  7101 0000541C 1C                  <2> 	db	00011100b
  7102 0000541D 1C                  <2> 	db	00011100b
  7103 0000541E 0E                  <2> 	db	00001110b
  7104 0000541F 0E                  <2> 	db	00001110b
  7105 00005420 0C                  <2> 	db	00001100b
  7106                              <2> mcursorend:
  7107                              <2> 
  7108                              <2> 
  7109                              <2> VBEMODEBLOCK:
  7110 00005421 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7111 00005425 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7112 00005427 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7113 0000542B 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7114 0000542F 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7115 00005433 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7116 00005435 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7117 00005437 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7118 0000543B 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7119 0000543F 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7120 00005443 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7121 00005521 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7122                              <2> 
  7123                              <2> VBEMODEINFOBLOCK:
  7124                              <2> ;Mandatory information for all VBE revision
  7125 00005621 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7126 00005623 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7127 00005624 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7128 00005625 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7129 00005627 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7130 00005629 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7131 0000562B 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7132 0000562D 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7133 00005631 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7134                              <2> 
  7135                              <2> ;Mandatory information for VBE 1.2 and above
  7136 00005633 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7137 00005635 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7138 00005637 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7139 00005638 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7140 00005639 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7141 0000563A 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7142 0000563B 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7143 0000563C 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7144 0000563D 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7145 0000563E 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7146 0000563F 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7147                              <2> 
  7148                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7149 00005640 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7150 00005641 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7151 00005642 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7152 00005643 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7153 00005644 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7154 00005645 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7155 00005646 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7156 00005647 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7157 00005648 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7158                              <2> 
  7159                              <2> ;Mandatory information for VBE 2.0 and above
  7160 00005649 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7161 0000564D 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7162 00005651 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7163 00005653 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7164                              <2> 
  7165 00005721 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7166                              <2> VBEEND:
  7167                              <2> [BITS 32]
  7168                              <1> 	%include "source/drivers/input/mouse.asm"
  7169 00005725 00                  <2> mousedisabled db 0
  7170                              <2> 	
  7171                              <2> 	cursorgui:
  7172 00005726 803D[FE850000]01    <2> 		cmp byte [mouseon], 1
  7173 0000572D 0F8432000000        <2> 		je near mousedaemon
  7174 00005733 803D[6C860000]00    <2> 		cmp byte [guion], 0
  7175 0000573A 0F8415070000        <2> 		je near entdown
  7176                              <2> 	initmouse:
  7177 00005740 803D[6C860000]00    <2> 		cmp byte [guion], 0
  7178 00005747 7405                <2> 		je noswmsposinit
  7179 00005749 E886150000          <2> 		call switchmousepos2
  7180                              <2> 	noswmsposinit:
  7181 0000574E E85D020000          <2> 	  	call PS2SET
  7182 00005753 E886020000          <2> 		call ACTMOUS
  7183 00005758 C605[FE850000]01    <2> 		mov byte [mouseon],1
  7184 0000575F E89F020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7185                              <2> 		;call GETB
  7186                              <2> 				;if the bytes are mixed up,
  7187                              <2> 				;remove this line or add another of this line.
  7188                              <2> 	nomouse:
  7189 00005764 C3                  <2> 		ret
  7190                              <2> 		
  7191                              <2> 	mousedaemon:
  7192 00005765 803D[FE850000]01    <2> 		cmp byte [mouseon], 1
  7193 0000576C 75D2                <2> 		jne initmouse
  7194 0000576E E464                <2> 		in al, 64h ; Status
  7195 00005770 A820                <2> 		test al, 20h ; PS2-Mouse?
  7196 00005772 0F8502000000        <2> 		jnz near moused
  7197 00005778 F4                  <2> 		hlt
  7198 00005779 C3                  <2> 		ret
  7199                              <2> 	moused:
  7200 0000577A 803D[25570000]01    <2> 		cmp byte [mousedisabled], 1
  7201 00005781 74E1                <2> 		je nomouse
  7202 00005783 E87B020000          <2> 		  call GETB
  7203 00005788 88C3                <2> 		  mov  bl, al
  7204 0000578A 80E301              <2> 		  and  bl, 1
  7205 0000578D 881D[285A0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7206 00005793 88C3                <2> 		  mov  bl, al
  7207 00005795 80E302              <2> 		  and  bl, 2
  7208 00005798 D0EB                <2> 		  shr  bl, 1
  7209 0000579A 881D[295A0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7210 000057A0 88C3                <2> 		  mov  bl, al
  7211 000057A2 80E304              <2> 		  and  bl, 4
  7212 000057A5 C0EB02              <2> 		  shr  bl, 2
  7213 000057A8 881D[2A5A0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7214 000057AE E850020000          <2> 		  call GETB
  7215 000057B3 A2[2B5A0000]        <2> 		  mov  BYTE [XCOORD], al
  7216 000057B8 E846020000          <2> 		  call GETB
  7217 000057BD A2[2C5A0000]        <2> 		  mov  BYTE [YCOORD], al
  7218                              <2> 
  7219                              <2> 	showpixelcursor:
  7220 000057C2 668B15[17590000]    <2> 		mov dx, [mousecursorposition]
  7221 000057C9 668B0D[19590000]    <2> 		mov cx, [mousecursorposition + 2]
  7222 000057D0 668915[13590000]    <2> 		mov [lastmouseposition], dx
  7223 000057D7 66890D[15590000]    <2> 		mov [lastmouseposition + 2], cx
  7224 000057DE A0[2B5A0000]        <2> 		mov al, [XCOORD]
  7225 000057E3 3C80                <2> 		cmp al, 128
  7226 000057E5 730C                <2> 		jae subxcoord
  7227 000057E7 00C0                <2> 		add al, al
  7228 000057E9 30E4                <2> 		xor ah, ah
  7229 000057EB 6601C2              <2> 		add dx, ax
  7230 000057EE E90B000000          <2> 		jmp subxcoorddn
  7231                              <2> 	subxcoord:
  7232 000057F3 00C0                <2> 		add al, al
  7233 000057F5 30DB                <2> 		xor bl, bl
  7234 000057F7 28C3                <2> 		sub bl, al
  7235 000057F9 30FF                <2> 		xor bh, bh
  7236 000057FB 6629DA              <2> 		sub dx, bx
  7237                              <2> 	subxcoorddn:
  7238 000057FE 8A1D[2C5A0000]      <2> 		mov bl, [YCOORD]
  7239 00005804 30C0                <2> 		xor al, al
  7240 00005806 28D8                <2> 		sub al, bl
  7241 00005808 3C80                <2> 		cmp al, 128
  7242 0000580A 730A                <2> 		jae subycoord
  7243 0000580C 30E4                <2> 		xor ah, ah
  7244 0000580E 6601C1              <2> 		add cx, ax
  7245 00005811 E909000000          <2> 		jmp subycoorddn
  7246                              <2> 	subycoord:
  7247 00005816 30DB                <2> 		xor bl, bl
  7248 00005818 28C3                <2> 		sub bl, al
  7249 0000581A 30FF                <2> 		xor bh, bh
  7250 0000581C 6629D9              <2> 		sub cx, bx
  7251                              <2> 	subycoorddn:
  7252 0000581F 6681FA204E          <2> 		cmp dx, 20000
  7253 00005824 7603                <2> 		jbe nooriginx2
  7254 00005826 6631D2              <2> 		xor dx, dx
  7255                              <2> 	nooriginx2:
  7256 00005829 6681F9204E          <2> 		cmp cx, 20000
  7257 0000582E 7603                <2> 		jbe nooriginy2
  7258 00005830 6631C9              <2> 		xor cx, cx
  7259                              <2> 	nooriginy2:
  7260 00005833 6681FA0000          <2> 		cmp dx, 0
  7261 00005838 7415                <2> 		je nofixxcolumn2
  7262 0000583A 663B15[21570000]    <2> 		cmp dx, [resolutionx2]
  7263 00005841 720C                <2> 		jb nofixxcolumn2
  7264 00005843 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  7265 0000584A 6681EA0200          <2> 		sub dx, 2
  7266                              <2> 	nofixxcolumn2:
  7267 0000584F 6681F90000          <2> 		cmp cx, 0
  7268 00005854 7415                <2> 		je nofixyrow2
  7269 00005856 663B0D[35560000]    <2> 		cmp cx, [resolutiony]
  7270 0000585D 720C                <2> 		jb nofixyrow2
  7271 0000585F 668B0D[35560000]    <2> 		mov cx, [resolutiony]
  7272 00005866 6681E90100          <2> 		sub cx, 1
  7273                              <2> 	nofixyrow2:
  7274 0000586B 668915[17590000]    <2> 		mov [mousecursorposition], dx
  7275 00005872 66890D[19590000]    <2> 		mov [mousecursorposition + 2], cx
  7276 00005879 803D[6C860000]00    <2> 		cmp byte [guion], 0
  7277 00005880 0F8495000000        <2> 		je near termmouse
  7278 00005886 E8E9130000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7279 0000588B 803D[285A0000]01    <2> 		cmp byte [LBUTTON], 1
  7280 00005892 0F8429250000        <2> 		je near clickicon
  7281 00005898 803D[295A0000]01    <2> 		cmp byte [RBUTTON], 1
  7282 0000589F 0F841C250000        <2> 		je near clickicon
  7283 000058A5 A0[AE7D0000]        <2> 		mov al, [pbutton]
  7284 000058AA C705[B17D0000]0000- <2> 		mov dword [dragging], 0
  7285 000058B2 0000                <2>
  7286 000058B4 3C00                <2> 		cmp al, 0
  7287 000058B6 740F                <2> 		je nopreviousbutton
  7288 000058B8 E85F130000          <2> 		call clearmousecursor
  7289 000058BD E8C6160000          <2> 		call reloadallgraphics
  7290                              <2> 	windowtermcopyend:
  7291 000058C2 E80D140000          <2> 		call switchmousepos2
  7292                              <2> 	nopreviousbutton:
  7293 000058C7 30C0                <2> 		xor al, al
  7294 000058C9 A2[AE7D0000]        <2> 		mov [pbutton], al
  7295 000058CE A2[15830000]        <2> 		mov [windrag], al
  7296 000058D3 A0[285A0000]        <2> 		mov al, [LBUTTON]
  7297 000058D8 A2[AF7D0000]        <2> 		mov [pLBUTTON], al
  7298 000058DD A0[295A0000]        <2> 		mov al, [RBUTTON]
  7299 000058E2 A2[B07D0000]        <2> 		mov [pRBUTTON], al
  7300 000058E7 31D2                <2> 		xor edx, edx
  7301 000058E9 668B15[17590000]    <2> 		mov dx, [mousecursorposition]
  7302 000058F0 668B0D[19590000]    <2> 		mov cx, [mousecursorposition + 2]
  7303 000058F7 66BB18C7            <2> 		mov bx, 1100011100011000b
  7304 000058FB 66B80100            <2> 		mov ax, 1
  7305 000058FF C605[AB7D0000]01    <2> 		mov byte [showcursorfonton], 1
  7306 00005906 E84C1D0000          <2> 		call showfontvesa
  7307 0000590B C605[AB7D0000]00    <2> 		mov byte [showcursorfonton], 0
  7308 00005912 C3                  <2> 		ret
  7309                              <2> 
  7310 00005913 00000000            <2> lastmouseposition dw 0,0
  7311 00005917 00000000            <2> mousecursorposition dw 0,0	
  7312                              <2> 
  7313                              <2> termmouse:
  7314 0000591B BE[9CCD0300]        <2> 		mov esi, videobuf
  7315 00005920 31D2                <2> 		xor edx, edx
  7316 00005922 668B15[13590000]    <2> 		mov dx, [lastmouseposition]
  7317 00005929 668B0D[15590000]    <2> 		mov cx, [lastmouseposition + 2]
  7318 00005930 66A1[AE590000]      <2> 		mov ax, [cursorcache]
  7319 00005936 663D0000            <2> 		cmp ax, 0
  7320 0000593A 7425                <2> 		je nocopycursorcache
  7321 0000593C 66C1E104            <2> 		shl cx, 4
  7322 00005940 66C1E203            <2> 		shl dx, 3
  7323 00005944 01D6                <2> 		add esi, edx
  7324 00005946 6631D2              <2> 		xor dx, dx
  7325 00005949 8A15[C0250000]      <2> 		mov dl, [charxy]
  7326 0000594F 6641                <2> 		inc cx
  7327                              <2> termmousecplp1:
  7328 00005951 01D6                <2> 		add esi, edx
  7329 00005953 6649                <2> 		dec cx
  7330 00005955 6681F90000          <2> 		cmp cx, 0
  7331 0000595A 75F5                <2> 		jne termmousecplp1
  7332 0000595C 29D6                <2> 		sub esi, edx
  7333 0000595E 668906              <2> 		mov [esi], ax
  7334                              <2> nocopycursorcache:
  7335 00005961 BE[9CCD0300]        <2> 		mov esi, videobuf
  7336 00005966 31D2                <2> 		xor edx, edx
  7337 00005968 668B15[17590000]    <2> 		mov dx, [mousecursorposition]
  7338 0000596F 668B0D[19590000]    <2> 		mov cx, [mousecursorposition + 2]
  7339 00005976 66C1E104            <2> 		shl cx, 4
  7340 0000597A 66C1E203            <2> 		shl dx, 3
  7341 0000597E 01D6                <2> 		add esi, edx
  7342 00005980 6631D2              <2> 		xor dx, dx
  7343 00005983 8A15[C0250000]      <2> 		mov dl, [charxy]
  7344 00005989 6641                <2> 		inc cx
  7345                              <2> termmousecplp2:
  7346 0000598B 01D6                <2> 		add esi, edx
  7347 0000598D 6649                <2> 		dec cx
  7348 0000598F 6681F90000          <2> 		cmp cx, 0
  7349 00005994 75F5                <2> 		jne termmousecplp2
  7350 00005996 29D6                <2> 		sub esi, edx
  7351 00005998 668B06              <2> 		mov ax, [esi]
  7352 0000599B 66A3[AE590000]      <2> 		mov [cursorcache], ax
  7353 000059A1 B080                <2> 		mov al, 128
  7354 000059A3 B407                <2> 		mov ah, 7
  7355 000059A5 668906              <2> 		mov [esi], ax
  7356 000059A8 E8E6CEFFFF          <2> 		call termcopy
  7357 000059AD C3                  <2> 		ret
  7358 000059AE 0000                <2> cursorcache db 0,0
  7359                              <2> 
  7360                              <2> PS2SET:
  7361 000059B0 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7362 000059B2 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7363 000059B4 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7364 000059B9 C3                  <2> ret
  7365                              <2> 
  7366                              <2> CHKPRT:
  7367 000059BA 66B96400            <2>   mov  cx, 100
  7368                              <2>  .again:
  7369 000059BE E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7370 000059C0 A802                <2>   test al, 2		; Check if input buffer is empty
  7371 000059C2 7402                <2>   je .go
  7372 000059C4 E2F8                <2>   loop .again
  7373                              <2>  .go:
  7374 000059C6 C3                  <2> ret
  7375                              <2> 
  7376                              <2> WMOUS:
  7377 000059C7 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7378 000059C9 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7379 000059CB E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7380 000059D0 C3                  <2> ret
  7381                              <2> 
  7382                              <2> MBUFFUL:
  7383 000059D1 66B96400            <2>   mov cx, 100
  7384                              <2>  .mn:
  7385 000059D5 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7386 000059D7 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7387 000059D9 7402                <2>   jz  .mnn
  7388 000059DB E2F8                <2>   loop .mn
  7389                              <2>  .mnn:
  7390 000059DD C3                  <2> ret
  7391                              <2> 
  7392                              <2> 
  7393                              <2> ACTMOUS:
  7394 000059DE E8E4FFFFFF          <2>   call WMOUS
  7395 000059E3 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7396 000059E5 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7397 000059E7 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7398 000059EC E801000000          <2>   call CHKMOUS		; check if a byte is available
  7399 000059F1 C3                  <2> ret
  7400                              <2> 
  7401                              <2> CHKMOUS:
  7402 000059F2 B300                <2>   mov  bl, 0
  7403 000059F4 66B96400            <2>   mov cx, 100
  7404                              <2>  .vrd:
  7405 000059F8 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7406 000059FA A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7407 000059FC 7504                <2>   jnz .yy
  7408 000059FE E2F8                <2>   loop .vrd
  7409 00005A00 B301                <2>   mov  bl, 1
  7410                              <2>  .yy:
  7411 00005A02 C3                  <2> ret
  7412                              <2> 
  7413                              <2> GETB:
  7414                              <2>  .cagain:
  7415 00005A03 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7416 00005A08 08DB                <2>   or bl, bl
  7417 00005A0A 75F7                <2>   jnz .cagain
  7418 00005A0C B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7419 00005A0E E664                <2>   out  0x64, al		; write to keyboardcontroller
  7420 00005A10 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7421 00005A15 6631C0              <2>   xor  ax, ax
  7422 00005A18 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7423 00005A1A 88C2                <2>   mov  dl, al
  7424 00005A1C B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7425 00005A1E E664                <2>   out  0x64, al		; write to keyboardcontroller
  7426 00005A20 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7427 00005A25 88D0                <2>   mov  al, dl
  7428 00005A27 C3                  <2> ret
  7429                              <2> 
  7430 00005A28 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7431 00005A29 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7432 00005A2A 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7433 00005A2B 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7434 00005A2C 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7435                              <1> %endif
  7436                              <1> %include "source/drivers/sound/pcspkr.asm"
  7437                              <2> ;PC Speaker Drivers
  7438                              <2> PCSpeakerRAW:
  7439 00005A2D 60                  <2> 	pusha
  7440                              <2> nosoundrep:
  7441 00005A2E 8B35[72020000]      <2> 	mov esi, [soundpos]
  7442 00005A34 31C9                <2> 	xor ecx, ecx
  7443 00005A36 668B0D[70020000]    <2> 	mov cx, [soundrepititions]
  7444 00005A3D 6681F90000          <2> 	cmp cx, 0
  7445 00005A42 0F8548000000        <2> 	jne near donesetpitch
  7446 00005A48 668B0E              <2> 	mov cx, [esi]
  7447 00005A4B 668B5E02            <2> 	mov bx, [esi + 2]
  7448 00005A4F 66890D[70020000]    <2> 	mov [soundrepititions], cx
  7449 00005A56 81C604000000        <2> 	add esi, 4
  7450 00005A5C 8935[72020000]      <2> 	mov [soundpos], esi
  7451 00005A62 3B35[76020000]      <2> 	cmp esi, [soundendpos]
  7452 00005A68 7735                <2> 	ja stopsound
  7453 00005A6A 66813D[70020000]00- <2> 	cmp word [soundrepititions], 0
  7454 00005A72 00                  <2>
  7455 00005A73 74B9                <2> 	je nosoundrep
  7456 00005A75 6681FB0000          <2> 	cmp bx, 0
  7457 00005A7A 740F                <2> 	je nosoundplay
  7458 00005A7C E840000000          <2> 	call setpitch
  7459 00005A81 E849000000          <2> 	call startsound
  7460 00005A86 E905000000          <2> 	jmp donesetpitch
  7461                              <2> nosoundplay:
  7462 00005A8B E846000000          <2> 	call killsound
  7463                              <2> donesetpitch:
  7464 00005A90 6649                <2> 	dec cx
  7465 00005A92 66890D[70020000]    <2> 	mov [soundrepititions], cx
  7466 00005A99 61                  <2> 	popa
  7467 00005A9A E90FA8FFFF          <2> 	jmp timerinterrupt
  7468                              <2> stopsound:
  7469 00005A9F 31C0                <2> 	xor eax, eax
  7470 00005AA1 66A3[70020000]      <2> 	mov [soundrepititions], ax
  7471 00005AA7 A2[6F020000]        <2> 	mov [soundon], al
  7472 00005AAC A3[72020000]        <2> 	mov [soundpos], eax
  7473 00005AB1 A3[76020000]        <2> 	mov [soundendpos], eax
  7474 00005AB6 E81B000000          <2> 	call killsound
  7475 00005ABB 61                  <2> 	popa
  7476 00005ABC E9EDA7FFFF          <2> 	jmp timerinterrupt
  7477                              <2> 
  7478                              <2> 
  7479                              <2> setpitch:
  7480 00005AC1 B0B6                <2> 	mov al, 0xB6
  7481 00005AC3 E643                <2> 	out 0x43, al
  7482 00005AC5 6689D8              <2> 	mov ax, bx
  7483 00005AC8 E642                <2> 	out 0x42, al
  7484 00005ACA 88E0                <2> 	mov al, ah
  7485 00005ACC E642                <2> 	out 0x42, al
  7486 00005ACE C3                  <2> 	ret
  7487                              <2> startsound:
  7488 00005ACF E461                <2> 	in al, 0x61
  7489 00005AD1 0C03                <2> 	or al, 3
  7490 00005AD3 E661                <2> 	out 0x61, al
  7491 00005AD5 C3                  <2> 	ret
  7492                              <2> killsound:
  7493 00005AD6 E461                <2> 	in al, 0x61
  7494 00005AD8 24FC                <2> 	and al, 0xFC
  7495 00005ADA E661                <2> 	out 0x61, al
  7496 00005ADC C3                  <2> 	ret
  7497                              <2> 	
  7498                              <1> %ifdef sound.included
  7499                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7500                              <2> ;Sound Blaster Drivers
  7501                              <2> sblaster:
  7502                              <2> .init:
  7503 00005ADD E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7504 00005AE2 A2[1D5D0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7505 00005AE7 3C00                <2> 		cmp al, 0
  7506 00005AE9 7418                <2> 		je .noinit
  7507 00005AEB B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7508 00005AED E805020000          <2> 		call WriteDSP
  7509 00005AF2 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7510 00005AF4 E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7511 00005AF9 BE[045B0000]        <2> 		mov esi, .initmsg
  7512 00005AFE E845C2FFFF          <2> 		call print
  7513                              <2> .noinit:
  7514 00005B03 C3                  <2> 		ret
  7515 00005B04 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7516 00005B0D 69616C697A65642E0A- <2>
  7517 00005B16 00                  <2>
  7518                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7519 00005B17 813D[085D0000]0000- <2> 	cmp dword [Length0], 0
  7520 00005B1F 0000                <2>
  7521 00005B21 0F8462000000        <2> 	je near .done
  7522 00005B27 FF0D[085D0000]      <2> 	dec dword [Length0]
  7523 00005B2D E908000000          <2> 	jmp .notodd
  7524                              <2> .oddlength:
  7525 00005B32 31C9                <2> 	xor ecx, ecx
  7526 00005B34 880D[075D0000]      <2> 	mov [OddLength], cl
  7527                              <2> .notodd:
  7528 00005B3A 8B35[0E5D0000]      <2> 	mov esi, [NextMemLoc]
  7529 00005B40 31C9                <2> 	xor ecx, ecx
  7530 00005B42 668B0D[0C5D0000]    <2> 	mov cx, [Length1]
  7531 00005B49 D1E9                <2> 	shr ecx, 1
  7532 00005B4B 6641                <2> 	inc cx
  7533 00005B4D 31DB                <2> 	xor ebx, ebx
  7534 00005B4F 668B1D[165D0000]    <2> 	mov bx, [SegLoc]
  7535 00005B56 6601CB              <2> 	add bx, cx
  7536 00005B59 66891D[165D0000]    <2> 	mov [SegLoc], bx
  7537 00005B60 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7538 00005B66 8935[125D0000]      <2> 	mov [MemLoc], esi
  7539 00005B6C 89C8                <2> 	mov eax, ecx
  7540 00005B6E 01F0                <2> 	add eax, esi
  7541 00005B70 A3[0E5D0000]        <2> 	mov [NextMemLoc], eax
  7542 00005B75 E833000000          <2> 	call DMACopy
  7543                              <2> 	;call DMAPlay
  7544 00005B7A E8E0000000          <2> 	call PlayDSP
  7545 00005B7F 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7546 00005B83 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7547 00005B84 E9D8A7FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7548                              <2> .done:
  7549 00005B89 803D[075D0000]01    <2> 	cmp byte [OddLength], 1
  7550 00005B90 74A0                <2> 	je .oddlength
  7551 00005B92 31C0                <2> 	xor eax, eax
  7552 00005B94 66A3[0C5D0000]      <2> 	mov [Length1], ax
  7553 00005B9A 66B8D000            <2> 	mov ax, 0xD0
  7554 00005B9E E854010000          <2> 	call WriteDSP
  7555 00005BA3 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7556 00005BA7 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7557 00005BA8 E9B4A7FFFF          <2> 	jmp handled2
  7558                              <2> 	
  7559                              <2> DMACopy:
  7560 00005BAD 66B80800            <2> 		mov ax, LINEAR_SEL
  7561 00005BB1 8EE0                <2> 		mov fs, ax
  7562 00005BB3 C1E902              <2> 		shr ecx, 2
  7563                              <2> .loop:
  7564 00005BB6 8B06                <2> 		mov eax, [esi]
  7565 00005BB8 648903              <2> 		mov [fs:ebx], eax
  7566 00005BBB 81C604000000        <2> 		add esi, 4
  7567 00005BC1 81C304000000        <2> 		add ebx, 4
  7568 00005BC7 E2ED                <2> 		loop .loop
  7569 00005BC9 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7570 00005BCD 8EE0                <2> 		mov fs, ax
  7571 00005BCF C3                  <2> 		ret
  7572                              <2> 		
  7573                              <2> 
  7574                              <2> DMAPlay:    ;uses eax ebx edx
  7575 00005BD0 C605[185D0000]00    <2> 		mov	byte [Page1],00h
  7576                              <2> 
  7577 00005BD7 B005                <2> 		mov	al,(Channel+4)
  7578 00005BD9 66BA0A00            <2> 		mov	dx,0Ah
  7579 00005BDD EE                  <2> 		out	dx,al
  7580 00005BDE 30C0                <2> 		xor	al,al
  7581 00005BE0 66BA0C00            <2> 		mov	dx,0Ch
  7582 00005BE4 EE                  <2> 		out	dx,al
  7583 00005BE5 B059                <2> 		mov	al,ModeReg
  7584 00005BE7 66BA0B00            <2> 		mov	dx,0Bh
  7585 00005BEB EE                  <2> 		out	dx,al
  7586 00005BEC B800000800          <2> 		mov	eax,0x80000
  7587 00005BF1 66BA0200            <2> 		mov	dx,AddPort
  7588 00005BF5 EE                  <2> 		out	dx,al
  7589 00005BF6 86C4                <2> 		xchg al,ah
  7590 00005BF8 EE                  <2> 		out	dx,al
  7591 00005BF9 B800000800          <2> 		mov	eax,0x80000
  7592 00005BFE 89C2                <2> 		mov	edx,eax
  7593 00005C00 2500000100          <2> 		and	eax,65536
  7594 00005C05 7406                <2> 		jz	MemLocN1
  7595 00005C07 FE05[185D0000]      <2> 		inc	byte [Page1]
  7596                              <2> MemLocN1:
  7597 00005C0D 89D0                <2> 		mov	eax,edx
  7598 00005C0F 2500000200          <2> 		and	eax,131072
  7599 00005C14 7407                <2> 		jz	MemLocN2
  7600 00005C16 8005[185D0000]02    <2> 		add	byte [Page1],02
  7601                              <2> MemLocN2:
  7602 00005C1D 89D0                <2> 		mov	eax,edx
  7603 00005C1F 2500000400          <2> 		and	eax,262144
  7604 00005C24 7407                <2> 		jz	MemLocN3
  7605 00005C26 8005[185D0000]04    <2> 		add	byte [Page1],04
  7606                              <2> MemLocN3:
  7607 00005C2D 89D0                <2> 		mov	eax,edx
  7608 00005C2F 2500000800          <2> 		and	eax,524288
  7609 00005C34 7407                <2> 		jz	MemLocN4
  7610 00005C36 8005[185D0000]08    <2> 		add	byte [Page1],08
  7611                              <2> MemLocN4:
  7612 00005C3D 66BA8300            <2> 		mov	dx,PgPort
  7613 00005C41 A0[185D0000]        <2> 		mov	al,[Page1]
  7614 00005C46 EE                  <2> 		out	dx,al
  7615 00005C47 66BA0300            <2> 		mov	dx,LenPort
  7616 00005C4B 66A1[0C5D0000]      <2> 		mov	ax,[Length1]
  7617 00005C51 6648                <2> 		dec ax
  7618 00005C53 EE                  <2> 		out	dx,al
  7619 00005C54 86C4                <2> 		xchg al,ah
  7620 00005C56 EE                  <2> 		out	dx,al
  7621 00005C57 66BA0A00            <2> 		mov	dx,0Ah
  7622 00005C5B B001                <2> 		mov	al,Channel
  7623 00005C5D EE                  <2> 		out	dx,al
  7624 00005C5E C3                  <2> 		ret
  7625                              <2> 		
  7626                              <2> PlayDSP:
  7627 00005C5F B040                <2> 		mov	al,40h
  7628 00005C61 E891000000          <2> 		call WriteDSP
  7629 00005C66 31D2                <2> 		xor	edx,edx
  7630 00005C68 B840420F00          <2> 		mov	eax,1000000
  7631 00005C6D 8B1D[195D0000]      <2> 		mov	ebx,[Freq]
  7632 00005C73 803D[065D0000]00    <2> 		cmp byte [Stereo], 0
  7633 00005C7A 7402                <2> 		je .nost
  7634 00005C7C D1E3                <2> 		shl ebx, 1
  7635                              <2> .nost:
  7636 00005C7E F7F3                <2> 		div	ebx
  7637 00005C80 89C3                <2> 		mov	ebx,eax
  7638 00005C82 B800010000          <2> 		mov	eax,256
  7639 00005C87 29D8                <2> 		sub	eax,ebx
  7640 00005C89 E869000000          <2> 		call WriteDSP
  7641 00005C8E B014                <2> 		mov	al,14h	;write the mode
  7642 00005C90 803D[065D0000]00    <2> 		cmp byte [Stereo], 0
  7643 00005C97 7400                <2> 		je .nost2
  7644                              <2> 		
  7645                              <2> .nost2:
  7646 00005C99 E859000000          <2> 		call WriteDSP
  7647 00005C9E 66A1[0C5D0000]      <2> 		mov	ax,[Length1]
  7648 00005CA4 66D1E8              <2> 		shr ax, 1
  7649 00005CA7 E84B000000          <2> 		call WriteDSP
  7650 00005CAC 86C4                <2> 		xchg al,ah
  7651 00005CAE E844000000          <2> 		call WriteDSP
  7652 00005CB3 C3                  <2> 		ret
  7653                              <2> 
  7654                              <2> MstrVol:    ;uses ax dx
  7655 00005CB4 6650                <2> 	   push ax
  7656 00005CB6 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7657 00005CBA B022                <2> 	   mov	al,22h
  7658 00005CBC EE                  <2> 	   out	dx,al
  7659 00005CBD 6658                <2> 	   pop	ax
  7660 00005CBF 6642                <2> 	   inc	dx
  7661 00005CC1 EE                  <2> 	   out	dx,al
  7662 00005CC2 C3                  <2> 	   ret
  7663                              <2> 	   
  7664                              <2> ResetDSP:   ; uses cx dx
  7665 00005CC3 66BA2602            <2> 			mov	dx,(BasePort+6)
  7666 00005CC7 B001                <2> 			mov	al,01
  7667 00005CC9 EE                  <2> 			out	dx,al
  7668 00005CCA 66B93200            <2> 			mov	cx,50
  7669 00005CCE EC                  <2> WaitIt1:	in	al,dx
  7670 00005CCF E2FD                <2> 			loop WaitIt1
  7671 00005CD1 30C0                <2> 			xor	al,al
  7672 00005CD3 EE                  <2> 			out	dx,al
  7673 00005CD4 66B93200            <2> 			mov	cx,50
  7674 00005CD8 EC                  <2> WaitIt2:	in	al,dx
  7675 00005CD9 E2FD                <2> 			loop WaitIt2
  7676 00005CDB B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7677 00005CDD 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7678 00005CE1 EC                  <2> 			in	al,dx
  7679 00005CE2 2480                <2> 			and	al,80h
  7680 00005CE4 3C80                <2> 			cmp	al,80h
  7681 00005CE6 750C                <2> 			jne	ResetErr
  7682 00005CE8 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7683 00005CEC EC                  <2> 			in	al,dx
  7684 00005CED 3CAA                <2> 			cmp	al,0AAh
  7685 00005CEF 7503                <2> 			jne	ResetErr
  7686 00005CF1 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7687 00005CF3 C3                  <2> 			ret
  7688 00005CF4 30C0                <2> ResetErr:	xor al, al
  7689 00005CF6 C3                  <2> 			ret
  7690                              <2> 
  7691                              <2> WriteDSP:   ;uses ax dx
  7692 00005CF7 6650                <2> 		push ax
  7693 00005CF9 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7694 00005CFD EC                  <2> WaitIt:	in	al,dx
  7695 00005CFE 2480                <2> 		and	al,80h
  7696 00005D00 75FB                <2> 		jnz	WaitIt
  7697 00005D02 6658                <2> 		pop	ax
  7698 00005D04 EE                  <2> 		out	dx,al
  7699 00005D05 C3                  <2> 		ret
  7700                              <2> 
  7701 00005D06 00                  <2> Stereo db 0
  7702 00005D07 00                  <2> OddLength db 0
  7703 00005D08 00000000            <2> Length0 dd	0
  7704 00005D0C 0000                <2> Length1	dw  0
  7705 00005D0E 00000000            <2> NextMemLoc dd 0
  7706 00005D12 00000000            <2> MemLoc	dd  0
  7707 00005D16 0000                <2> SegLoc  dw 0
  7708 00005D18 00                  <2> Page1	db  0
  7709 00005D19 00000000            <2> Freq	dd	0
  7710                              <2> PgPort	equ 83h
  7711                              <2> AddPort	equ 02h
  7712                              <2> LenPort	equ 03h
  7713                              <2> ModeReg	equ 59h
  7714                              <2> Channel	equ 01h
  7715                              <2> BasePort	equ 220h
  7716 00005D1D 00                  <2> SoundBlaster	db 0
  7717                              <1> %endif
  7718                              <1> %ifdef io.serial
  7719                              <1> 	%include "source/drivers/input/serial.asm"
  7720                              <1> %else
  7721                              <1> 	%include "source/drivers/input/keyboard.asm"
  7722 00005D1E 00                  <2> specialkey db 0
  7723                              <2> ;charregion db 0
  7724                              <2> waitforinput:		;this is basically the idle process
  7725                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7726                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7727 00005D1F 6631C0              <2> 	xor ax, ax
  7728 00005D22 A0[9E680000]        <2> 	mov al, [threadson]
  7729 00005D27 8825[9E680000]      <2> 	mov [threadson], ah
  7730 00005D2D 9C                  <2> 	pushf
  7731 00005D2E FB                  <2> 	sti
  7732 00005D2F F4                  <2> 	hlt
  7733 00005D30 9D                  <2> 	popf
  7734 00005D31 A2[9E680000]        <2> 	mov [threadson], al
  7735 00005D36 66813D[A8230000]00- <2> 	cmp word [trans], 0
  7736 00005D3E 00                  <2>
  7737 00005D3F 7401                <2> 	je getkey
  7738 00005D41 C3                  <2> 	ret
  7739                              <2> getkey:
  7740 00005D42 31C0                <2> 		xor eax, eax
  7741 00005D44 A2[1E5D0000]        <2> 		mov [specialkey], al
  7742 00005D49 A3[A4230000]        <2> 		mov [lastkey], eax
  7743 00005D4E E464                <2> 		in al, 64h ; Status
  7744                              <2> 	%ifdef gui.included
  7745 00005D50 A820                <2> 		test al, 20h ; PS2-Mouse?
  7746 00005D52 0F8522FAFFFF        <2> 		jnz near moused
  7747                              <2> 	%endif
  7748 00005D58 A801                <2> 		test al, 1 
  7749 00005D5A 74C3                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7750                              <2> 	calckey:
  7751 00005D5C E460                <2> 		in al, 60h
  7752 00005D5E 30E4                <2> 		xor ah, ah
  7753 00005D60 6689C3              <2> 		mov bx, ax
  7754 00005D63 66A3[A6230000]      <2> 		mov [lastkey + 2], ax
  7755 00005D69 BF[F85E0000]        <2> 		mov edi, scancode
  7756                              <2> 	searchscan: 
  7757 00005D6E 80FB3A              <2> 		cmp bl, 3Ah
  7758 00005D71 7314                <2> 		jae scanother
  7759 00005D73 C1E004              <2> 		shl eax, 4
  7760 00005D76 01C7                <2> 		add edi, eax
  7761 00005D78 668B07              <2> 		mov ax, [edi]
  7762 00005D7B 663D0000            <2> 		cmp ax, 0
  7763 00005D7F 7406                <2> 		je scanother
  7764 00005D81 E9D0000000          <2> 		jmp scanfound
  7765 00005D86 00                  <2> uppercase db 0
  7766                              <2> scanother:
  7767 00005D87 6631C0              <2> 		xor ax, ax
  7768 00005D8A 66A3[A4230000]      <2> 		mov [lastkey], ax
  7769 00005D90 80FBE0              <2> 		cmp bl, 0E0h
  7770 00005D93 0F8477000000        <2> 		je near getkeyspecial
  7771 00005D99 803D[1E5D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7772 00005DA0 7525                <2> 		jne nospecialkey
  7773 00005DA2 80FB38              <2> 		cmp bl, 38h
  7774 00005DA5 0F849A000000        <2> 		je near alton
  7775 00005DAB 80FBB8              <2> 		cmp bl, 0B8h
  7776 00005DAE 0F8499000000        <2> 		je near altoff
  7777 00005DB4 80FB1D              <2> 		cmp bl, 1Dh
  7778 00005DB7 0F8478000000        <2> 		je near ctron
  7779 00005DBD 80FB9D              <2> 		cmp bl, 9Dh
  7780 00005DC0 0F8477000000        <2> 		je near ctroff
  7781 00005DC6 C3                  <2> 		ret
  7782                              <2> nospecialkey:
  7783 00005DC7 80FB2A              <2> 		cmp bl, 2Ah
  7784 00005DCA 0F8455000000        <2> 		je near shifton
  7785 00005DD0 80FB36              <2> 		cmp bl, 36h
  7786 00005DD3 0F844C000000        <2> 		je near shifton
  7787 00005DD9 80FB1C              <2> 		cmp bl, 1Ch
  7788 00005DDC 0F8473000000        <2> 		je near entdown
  7789 00005DE2 80FBAA              <2> 		cmp bl, 0AAh
  7790 00005DE5 0F8442000000        <2> 		je near shiftoff
  7791 00005DEB 80FBB6              <2> 		cmp bl, 0B6h
  7792 00005DEE 0F8439000000        <2> 		je near shiftoff
  7793 00005DF4 80FB3A              <2> 		cmp bl, 3Ah
  7794 00005DF7 0F84A7000000        <2> 		je near capslock
  7795 00005DFD 80FB45              <2> 		cmp bl, 0x45
  7796 00005E00 0F84AF000000        <2> 		je near numlock
  7797 00005E06 80FB46              <2> 		cmp bl, 0x46
  7798 00005E09 0F84BE000000        <2> 		je near scrolllock
  7799 00005E0F C3                  <2> 		ret
  7800                              <2> 	getkeyspecial:
  7801 00005E10 C605[1E5D0000]E0    <2> 		mov byte [specialkey], 0xE0
  7802 00005E17 E940FFFFFF          <2> 		jmp calckey
  7803                              <2> 	shift:
  7804 00005E1C A0[865D0000]        <2> 		mov al, [uppercase]
  7805 00005E21 3C01                <2> 		cmp al, 1
  7806 00005E23 7308                <2> 		jae shiftoff
  7807                              <2> 	shifton:
  7808 00005E25 C605[865D0000]01    <2> 		mov byte [uppercase], 1
  7809 00005E2C C3                  <2> 		ret
  7810                              <2> 	shiftoff:
  7811 00005E2D C605[865D0000]00    <2> 		mov byte [uppercase], 0
  7812 00005E34 C3                  <2> 		ret
  7813                              <2> 	ctron:
  7814 00005E35 C605[A35E0000]01    <2> 		mov byte [ctrkey], 1
  7815 00005E3C C3                  <2> 		ret
  7816                              <2> 	ctroff:
  7817 00005E3D C605[A35E0000]00    <2> 		mov byte [ctrkey], 0
  7818 00005E44 C3                  <2> 		ret
  7819                              <2> 	alton:
  7820 00005E45 C605[A25E0000]01    <2> 		mov byte [altkey], 1
  7821 00005E4C C3                  <2> 		ret
  7822                              <2> 	altoff:
  7823 00005E4D C605[A25E0000]00    <2> 		mov byte [altkey], 0
  7824 00005E54 C3                  <2> 		ret
  7825                              <2> 	entdown:
  7826 00005E55 C3                  <2> 		ret
  7827                              <2> scanfound:
  7828 00005E56 81C708000000        <2> 		add edi, 8
  7829 00005E5C 803D[A35E0000]01    <2> 		cmp byte [ctrkey], 1
  7830 00005E63 7306                <2> 		jae ctrlin
  7831 00005E65 81EF08000000        <2> 		sub edi, 8
  7832                              <2> 	ctrlin:
  7833 00005E6B 81C704000000        <2> 		add edi, 4
  7834 00005E71 803D[A25E0000]01    <2> 		cmp byte [altkey], 1
  7835 00005E78 7306                <2> 		jae altin
  7836 00005E7A 81EF04000000        <2> 		sub edi, 4
  7837                              <2> 	altin:
  7838 00005E80 81C702000000        <2> 		add edi, 2
  7839 00005E86 803D[865D0000]01    <2> 		cmp byte [uppercase], 1
  7840 00005E8D 7306                <2> 		jae uppercaseon
  7841 00005E8F 81EF02000000        <2> 		sub edi, 2
  7842                              <2> 	uppercaseon:
  7843 00005E95 668B07              <2> 		mov ax,[edi]
  7844 00005E98 66A3[A4230000]      <2> 		mov [lastkey], ax
  7845 00005E9E C3                  <2> 		ret
  7846                              <2> 		
  7847 00005E9F 00                  <2> keyboardstatus db 0
  7848 00005EA0 00                  <2> numlockstatus db 0
  7849 00005EA1 00                  <2> scrolllockstatus db 0
  7850 00005EA2 00                  <2> altkey db 0
  7851 00005EA3 00                  <2> ctrkey db 0
  7852                              <2> 	capslock:
  7853 00005EA4 8035[9F5E0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7854 00005EAB E835000000          <2> 		call updatekblights
  7855 00005EB0 E967FFFFFF          <2> 		jmp shift
  7856                              <2> 		
  7857                              <2> 	numlock:
  7858 00005EB5 8035[9F5E0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7859 00005EBC 8035[A05E0000]01    <2> 		xor byte [numlockstatus], 1
  7860 00005EC3 E81D000000          <2> 		call updatekblights
  7861 00005EC8 E975FEFFFF          <2> 		jmp getkey
  7862                              <2> 	
  7863                              <2> 	scrolllock:
  7864 00005ECD 8035[9F5E0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7865 00005ED4 8035[A15E0000]01    <2> 		xor byte [scrolllockstatus], 1
  7866 00005EDB E805000000          <2> 		call updatekblights
  7867 00005EE0 E95DFEFFFF          <2> 		jmp getkey
  7868                              <2> 		
  7869                              <2> 	updatekblights:
  7870 00005EE5 B0ED                <2> 		mov al, 0xED
  7871 00005EE7 66BA6000            <2> 		mov dx, 0x60
  7872 00005EEB EE                  <2> 		out dx, al
  7873                              <2> 	chkkbdack:
  7874 00005EEC EC                  <2> 		in al, dx
  7875 00005EED 3CFA                <2> 		cmp al, 0xFA
  7876 00005EEF 75FB                <2> 		jne chkkbdack
  7877 00005EF1 A0[9F5E0000]        <2> 		mov al, [keyboardstatus]
  7878 00005EF6 EE                  <2> 		out dx, al
  7879 00005EF7 C3                  <2> 		ret
  7880                              <2> 		
  7881                              <2> scancode:
  7882                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7883 00005EF8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7884 00005F01 00000000000000      <2>
  7885 00005F08 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7886 00005F11 00000000000000      <2>
  7887 00005F18 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7888 00005F21 00000000000000      <2>
  7889 00005F28 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7890 00005F31 00000000000000      <2>
  7891 00005F38 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7892 00005F41 00000000000000      <2>
  7893 00005F48 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7894 00005F51 00000000000000      <2>
  7895 00005F58 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7896 00005F61 00000000000000      <2>
  7897 00005F68 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7898 00005F71 00000000000000      <2>
  7899 00005F78 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7900 00005F81 00000000000000      <2>
  7901 00005F88 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7902 00005F91 00000000000000      <2>
  7903 00005F98 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7904 00005FA1 00000000000000      <2>
  7905 00005FA8 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7906 00005FB1 00000000000000      <2>
  7907 00005FB8 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7908 00005FC1 00000000000000      <2>
  7909 00005FC8 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7910 00005FD1 00000000000000      <2>
  7911 00005FD8 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7912 00005FE1 00000000000000      <2>
  7913 00005FE8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7914 00005FF1 00000000000000      <2>
  7915 00005FF8 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7916 00006000 003A0039041904      <2>
  7917 00006008 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7918 00006011 03000046042604      <2>
  7919 00006018 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7920 00006021 03950343042304      <2>
  7921 00006028 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7922 00006031 03A1033A041A04      <2>
  7923 00006038 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7924 00006041 03A40335041504      <2>
  7925 00006048 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7926 00006051 03A5033D041D04      <2>
  7927 00006058 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7928 00006061 03980333041304      <2>
  7929 00006068 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7930 00006071 03990348042804      <2>
  7931 00006078 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7932 00006081 039F0349042904      <2>
  7933 00006088 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7934 00006091 03A00337041704      <2>
  7935 00006098 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7936 000060A1 00000045042504      <2>
  7937 000060A8 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7938 000060B1 0000004A042A04      <2>
  7939 000060B8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7940 000060C1 00000000000000      <2>
  7941 000060C8 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7942 000060D1 00000000000000      <2>
  7943 000060D8 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7944 000060E1 03910344042404      <2>
  7945 000060E8 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7946 000060F1 03A3034B042B04      <2>
  7947 000060F8 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7948 00006101 03940332041204      <2>
  7949 00006108 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7950 00006111 03A60330041004      <2>
  7951 00006118 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7952 00006121 0393033F041F04      <2>
  7953 00006128 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7954 00006131 03970340042004      <2>
  7955 00006138 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7956 00006141 039E033E041E04      <2>
  7957 00006148 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7958 00006151 039A033B041B04      <2>
  7959 00006158 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7960 00006161 039B0334041404      <2>
  7961 00006168 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7962 00006171 00000036041604      <2>
  7963 00006178 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7964 00006181 0000004D042D04      <2>
  7965 00006188 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7966 00006191 00000051040104      <2>
  7967 00006198 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7968 000061A1 00000000000000      <2>
  7969 000061A8 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7970 000061B1 0000002F005C00      <2>
  7971 000061B8 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7972 000061C1 0396034F042F04      <2>
  7973 000061C8 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7974 000061D1 03A70347042704      <2>
  7975 000061D8 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7976 000061E1 03A80341042104      <2>
  7977 000061E8 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7978 000061F1 03A9033C041C04      <2>
  7979 000061F8 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7980 00006201 03920338041804      <2>
  7981 00006208 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7982 00006211 039D0342042204      <2>
  7983 00006218 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7984 00006221 039C034C042C04      <2>
  7985 00006228 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7986 00006231 00000031041104      <2>
  7987 00006238 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7988 00006241 0000004E042E04      <2>
  7989 00006248 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7990 00006251 0000002E002C00      <2>
  7991 00006258 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7992 00006261 00000000000000      <2>
  7993 00006268 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7994 00006271 00000000000000      <2>
  7995 00006278 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7996 00006281 00000000000000      <2>
  7997 00006288 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7998 00006291 00000000000000      <2>
  7999                              <2> noscan:
  8000                              <2> 
  8001                              <1> %endif
  8002                              <1> ;drivers will soon be handled intelligently
  8003                              <1> ;every driver's source will be scanned for a .init function
  8004                              <1> ;that will be called and if it returns 0
  8005                              <1> ;the hardware was found and the driver initialized properly
  8006                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8007                              <1> 	%ifdef sound.included
  8008 00006298 E840F8FFFF          <1> 		call sblaster.init
  8009                              <1> 	%endif
  8010                              <1> 	%ifdef network.included
  8011                              <1> 		call network.init
  8012                              <1> 	%endif
  8013 0000629D C3                  <1> 	ret
  8014                              <1> initialize:
  8015                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8016 0000629E E839000000          <1> 	call .pic
  8017                              <1> %ifdef terminal.vsync
  8018                              <1> 	call .rtc
  8019                              <1> %endif
  8020 000062A3 E896000000          <1> 	call .pit
  8021 000062A8 E8B8000000          <1> 	call .fpu
  8022 000062AD E8C9000000          <1> 	call .sse
  8023 000062B2 31C0                <1> 	xor eax, eax
  8024 000062B4 31C9                <1> 	xor ecx, ecx
  8025                              <1> %ifdef io.serial
  8026                              <1> 	call serial.init
  8027                              <1> %endif
  8028 000062B6 E801000000          <1> 	call .time
  8029 000062BB C3                  <1> 	ret
  8030                              <1> 	
  8031                              <1> .time:
  8032 000062BC E83FDDFFFF          <1> 	call time
  8033 000062C1 E8E7DEFFFF          <1> 	call timeconvert
  8034 000062C6 890D[67020000]      <1> 	mov [timeseconds], ecx
  8035 000062CC 31C9                <1> 	xor ecx, ecx
  8036 000062CE 890D[6B020000]      <1> 	mov [timenanoseconds], ecx
  8037 000062D4 C605[483F0000]01    <1> 	mov byte [istimeset], 1
  8038 000062DB C3                  <1> 	ret
  8039                              <1> 	
  8040                              <1> .pic:
  8041 000062DC B011                <1> 	mov al, 0x11
  8042 000062DE E620                <1> 	out 0x20, al
  8043 000062E0 E6A0                <1> 	out 0xA0, al
  8044 000062E2 B040                <1> 	mov al, 0x40	;interrupt for master
  8045 000062E4 E621                <1> 	out 0x21, al
  8046 000062E6 B048                <1> 	mov al, 0x48	;interrupt for slave
  8047 000062E8 E6A1                <1> 	out 0xA1, al
  8048 000062EA B004                <1> 	mov al, 4
  8049 000062EC E621                <1> 	out 0x21, al
  8050 000062EE B002                <1> 	mov al, 2
  8051 000062F0 E6A1                <1> 	out 0xA1, al
  8052 000062F2 B001                <1> 	mov al, 0x1
  8053 000062F4 E621                <1> 	out 0x21, al
  8054 000062F6 B001                <1> 	mov al, 0x1
  8055 000062F8 E6A1                <1> 	out 0xA1, al
  8056                              <1> 	;masks are set to zero so as not to mask
  8057 000062FA 30C0                <1> 	xor al, al
  8058 000062FC E621                <1> 	out 0x21, al
  8059 000062FE 30C0                <1> 	xor al, al
  8060 00006300 E6A1                <1> 	out 0xA1, al
  8061 00006302 B020                <1> 	mov al, 0x20
  8062 00006304 E6A0                <1> 	out 0xA0, al
  8063 00006306 E620                <1> 	out 0x20, al
  8064 00006308 C3                  <1> 	ret
  8065                              <1> .rtc:
  8066 00006309 B008                <1> 	mov al, 0x8
  8067 0000630B 88C4                <1> 	mov ah, al
  8068 0000630D 66BA7000            <1> 	mov dx, 0x70
  8069 00006311 EE                  <1> 	out dx, al
  8070 00006312 6642                <1> 	inc dx
  8071 00006314 EC                  <1> 	in al, dx
  8072 00006315 86C4                <1> 	xchg al, ah
  8073 00006317 664A                <1> 	dec dx
  8074 00006319 EE                  <1> 	out dx, al
  8075 0000631A 6642                <1> 	inc dx
  8076 0000631C 86C4                <1> 	xchg al, ah
  8077 0000631E 0C40                <1> 	or al, 0x40
  8078 00006320 EE                  <1> 	out dx, al
  8079                              <1> 	
  8080 00006321 B00A                <1> 	mov al, 0xA
  8081 00006323 664A                <1> 	dec dx
  8082 00006325 EE                  <1> 	out dx, al
  8083 00006326 86C4                <1> 	xchg al, ah
  8084 00006328 6642                <1> 	inc dx
  8085 0000632A EC                  <1> 	in al, dx
  8086 0000632B 24F0                <1> 	and al, 0xF0
  8087 0000632D 0A05[23030000]      <1> 	or al, [rtcrate]
  8088 00006333 86C4                <1> 	xchg al, ah
  8089 00006335 664A                <1> 	dec dx
  8090 00006337 EE                  <1> 	out dx, al
  8091 00006338 6642                <1> 	inc dx
  8092 0000633A 86C4                <1> 	xchg al, ah
  8093 0000633C EE                  <1> 	out dx, al
  8094 0000633D C3                  <1> 	ret
  8095                              <1> 	
  8096                              <1> .pit:
  8097                              <1> 	;initialize the PIT
  8098 0000633E 66A1[60020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8099 00006344 E640                <1> 	out 0x40, al
  8100 00006346 66C1C008            <1> 	rol ax, 8
  8101 0000634A E640                <1> 	out 0x40, al
  8102                              <1> 	;enable rtc interrupt
  8103 0000634C B00B                <1> 	mov al, 0xB
  8104 0000634E E670                <1> 	out 0x70, al
  8105 00006350 66C1C008            <1> 	rol ax, 8
  8106 00006354 E471                <1> 	in al, 0x71
  8107 00006356 66C1C008            <1> 	rol ax, 8
  8108 0000635A E670                <1> 	out 0x70, al
  8109 0000635C 66C1C008            <1> 	rol ax, 8
  8110 00006360 0C40                <1> 	or al, 0x40
  8111 00006362 E671                <1> 	out 0x71, al
  8112 00006364 C3                  <1> 	ret
  8113                              <1> .fpu:
  8114                              <1> 	;And now to initialize the fpu
  8115 00006365 0F20E0              <1> 	mov eax, cr4
  8116 00006368 0D00020000          <1> 	or eax, 0x200
  8117 0000636D 0F22E0              <1> 	mov cr4, eax
  8118 00006370 B87F0B0000          <1> 	mov eax, 0xB7F
  8119 00006375 50                  <1> 	push eax
  8120 00006376 D92C24              <1> 	fldcw [esp]
  8121 00006379 58                  <1> 	pop eax
  8122 0000637A C3                  <1> 	ret
  8123                              <1> 	
  8124                              <1> .sse:
  8125 0000637B 0F20C0              <1> 	mov eax, cr0
  8126 0000637E 24FB                <1> 	and al, 11111011b
  8127 00006380 0C02                <1> 	or al, 00000010b
  8128 00006382 0F22C0              <1> 	mov cr0, eax
  8129 00006385 0F20E0              <1> 	mov eax, cr4
  8130 00006388 660D0006            <1> 	or ax, 0000011000000000b
  8131 0000638C 0F22E0              <1> 	mov cr4, eax
  8132 0000638F C3                  <1> 	ret
  8133                                      %include "source/pci.asm"
  8134 00006390 00                  <1> pcibus		db 0
  8135 00006391 00                  <1> pcidevice	db 0
  8136 00006392 00                  <1> pcifunction	db 0
  8137 00006393 00                  <1> pciregister	db 0
  8138 00006394 00                  <1> pcireqtype	db 0
  8139 00006395 00000000            <1> pcidevid	dd 0
  8140 00006399 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8141                              <1> getpcimem:
  8142 0000639D B002                <1> 	mov al, 2
  8143 0000639F A2[94630000]        <1> 	mov [pcireqtype], al
  8144 000063A4 E922000000          <1> 	jmp searchpci
  8145                              <1> getpciport:
  8146 000063A9 B001                <1> 	mov al, 1
  8147 000063AB A2[94630000]        <1> 	mov [pcireqtype], al
  8148 000063B0 E916000000          <1> 	jmp searchpci
  8149                              <1> pcidump:
  8150 000063B5 31C0                <1> 	xor eax, eax
  8151 000063B7 A2[92630000]        <1> 	mov [pcifunction], al
  8152 000063BC A2[90630000]        <1> 	mov [pcibus], al
  8153 000063C1 A2[91630000]        <1> 	mov [pcidevice], al
  8154 000063C6 A2[94630000]        <1> 	mov [pcireqtype], al
  8155                              <1> searchpci:		;return in ebx, start X in pciX
  8156 000063CB 30C0                <1> 	xor al, al
  8157 000063CD A2[93630000]        <1> 	mov [pciregister], al
  8158 000063D2 E81D020000          <1> 	call getpciaddr
  8159 000063D7 BAF80C0000          <1> 	mov edx, 0xCF8
  8160 000063DC EF                  <1> 	out dx, eax	;request pci config
  8161 000063DD BAFC0C0000          <1> 	mov edx, 0xCFC
  8162 000063E2 ED                  <1> 	in eax, dx 	;read in pci config
  8163 000063E3 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8164 000063E8 0F8237000000        <1> 	jb near checkpcidevice
  8165                              <1> searchpciret:
  8166                              <1> nextpcidevice:
  8167 000063EE 30C0                <1> 	xor al, al
  8168 000063F0 A2[92630000]        <1> 	mov [pcifunction], al
  8169 000063F5 A0[91630000]        <1> 	mov al, [pcidevice]
  8170 000063FA 3C1F                <1> 	cmp al, 11111b
  8171 000063FC 0F8300010000        <1> 	jae near nextpcibus
  8172 00006402 FEC0                <1> 	inc al
  8173 00006404 A2[91630000]        <1> 	mov [pcidevice], al
  8174 00006409 EBC0                <1> 	jmp searchpci
  8175 0000640B A0[92630000]        <1> 	mov al, [pcifunction]
  8176 00006410 3C07                <1> 	cmp al, 111b
  8177 00006412 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8178 00006418 FEC0                <1> 	inc al
  8179 0000641A A2[92630000]        <1> 	mov [pcifunction], al
  8180 0000641F EBAA                <1> 	jmp searchpci
  8181 00006421 00000000            <1> pcitype: db 0,0,0,0
  8182                              <1> checkpcidevice:
  8183 00006425 31C0                <1> 	xor eax, eax
  8184 00006427 3905[95630000]      <1> 	cmp [pcidevid], eax
  8185 0000642D 0F8430000000        <1> 	je near .good
  8186 00006433 A2[93630000]        <1> 	mov [pciregister], al	;device id, vendor id
  8187 00006438 E8B7010000          <1> 	call getpciaddr
  8188 0000643D BAF80C0000          <1> 	mov edx, 0xCF8
  8189 00006442 EF                  <1> 	out dx, eax
  8190 00006443 BAFC0C0000          <1> 	mov edx, 0xCFC
  8191 00006448 ED                  <1> 	in eax, dx
  8192 00006449 2305[99630000]      <1> 	and eax, [pcidevidmask]
  8193 0000644F 8B1D[95630000]      <1> 	mov ebx, [pcidevid]
  8194 00006455 231D[99630000]      <1> 	and ebx, [pcidevidmask]
  8195 0000645B 39D8                <1> 	cmp eax, ebx
  8196 0000645D 0F858BFFFFFF        <1> 	jne near searchpciret
  8197                              <1> .good:
  8198 00006463 30C0                <1> 	xor al, al
  8199 00006465 3805[94630000]      <1> 	cmp [pcireqtype], al
  8200 0000646B 0F842C000000        <1> 	je near dumppcidevice
  8201 00006471 B008                <1> 	mov al, 0x08
  8202 00006473 A2[93630000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8203 00006478 E877010000          <1> 	call getpciaddr
  8204 0000647D BAF80C0000          <1> 	mov edx, 0xCF8
  8205 00006482 EF                  <1> 	out dx, eax
  8206 00006483 BAFC0C0000          <1> 	mov edx, 0xCFC
  8207 00006488 ED                  <1> 	in eax, dx
  8208 00006489 C1C008              <1> 	rol eax, 8
  8209 0000648C 3A05[21640000]      <1> 	cmp al, [pcitype]
  8210 00006492 0F84A0000000        <1> 	je near foundpciaddr
  8211 00006498 E951FFFFFF          <1> 	jmp searchpciret
  8212                              <1> dumppcidevice:
  8213 0000649D 30C0                <1> 	xor al, al
  8214 0000649F A2[93630000]        <1> 	mov [pciregister], al
  8215 000064A4 E84B010000          <1> 	call getpciaddr
  8216 000064A9 89C1                <1> 	mov ecx, eax
  8217 000064AB C605[96310000]05    <1> 	mov byte [firsthexshown], 5
  8218 000064B2 E8F4CCFFFF          <1> 	call showhex
  8219                              <1> dumppcidevicelp:
  8220 000064B7 A2[93630000]        <1> 	mov [pciregister], al
  8221 000064BC E833010000          <1> 	call getpciaddr
  8222 000064C1 BAF80C0000          <1> 	mov edx, 0xCF8
  8223 000064C6 EF                  <1> 	out dx, eax
  8224 000064C7 BAFC0C0000          <1> 	mov edx, 0xCFC
  8225 000064CC ED                  <1> 	in eax, dx
  8226 000064CD 89C1                <1> 	mov ecx, eax
  8227 000064CF A0[93630000]        <1> 	mov al, [pciregister]
  8228 000064D4 0404                <1> 	add al, 4
  8229 000064D6 C605[96310000]05    <1> 	mov byte [firsthexshown], 5
  8230 000064DD E8C9CCFFFF          <1> 	call showhex
  8231 000064E2 3C3C                <1> 	cmp al, 0x3C
  8232 000064E4 72D1                <1> 	jb dumppcidevicelp
  8233                              <1> dumppcidn:
  8234                              <1> %ifdef io.serial
  8235                              <1> 	mov esi, line
  8236                              <1> 	call print
  8237                              <1> %else
  8238 000064E6 803D[BE250000]00    <1> 	cmp byte [charpos], 0
  8239 000064ED 0F84FBFEFFFF        <1> 	je near searchpciret
  8240 000064F3 BE[47860000]        <1> 	mov esi, line
  8241 000064F8 E84BB8FFFF          <1> 	call print
  8242                              <1> %endif
  8243 000064FD E9ECFEFFFF          <1> 	jmp searchpciret
  8244                              <1> nextpcibus:
  8245 00006502 30C0                <1> 	xor al, al
  8246 00006504 A2[91630000]        <1> 	mov [pcidevice], al
  8247 00006509 A0[90630000]        <1> 	mov al, [pcibus]
  8248 0000650E 3C7F                <1> 	cmp al, 1111111b
  8249 00006510 730C                <1> 	jae donesearchpci
  8250 00006512 FEC0                <1> 	inc al
  8251 00006514 A2[90630000]        <1> 	mov [pcibus], al
  8252 00006519 E9ADFEFFFF          <1> 	jmp searchpci
  8253                              <1> donesearchpci:
  8254 0000651E BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8255 00006523 31D2                <1> 	xor edx, edx
  8256 00006525 8815[21640000]      <1> 	mov [pcitype], dl
  8257 0000652B 8915[95630000]      <1> 	mov [pcidevid], edx
  8258 00006531 891D[99630000]      <1> 	mov [pcidevidmask], ebx
  8259 00006537 C3                  <1> 	ret
  8260                              <1> foundpciaddr:
  8261 00006538 B010                <1> 	mov al, 0x10
  8262 0000653A A2[93630000]        <1> 	mov [pciregister], al
  8263 0000653F 803D[94630000]02    <1> 	cmp byte [pcireqtype], 2
  8264 00006546 7443                <1> 	je findpcimemaddr
  8265                              <1> findpciioaddr:
  8266 00006548 E8A7000000          <1> 	call getpciaddr
  8267 0000654D BAF80C0000          <1> 	mov edx, 0xCF8
  8268 00006552 EF                  <1> 	out dx, eax
  8269 00006553 BAFC0C0000          <1> 	mov edx, 0xCFC
  8270 00006558 ED                  <1> 	in eax, dx
  8271 00006559 89C3                <1> 	mov ebx, eax
  8272 0000655B 81E301000000        <1> 	and ebx, 1
  8273 00006561 81FB00000000        <1> 	cmp ebx, 0
  8274 00006567 0F846E000000        <1> 	je near notpciioaddr
  8275 0000656D 2D01000000          <1> 	sub eax, 1
  8276 00006572 89C2                <1> 	mov edx, eax
  8277 00006574 31DB                <1> 	xor ebx, ebx
  8278 00006576 4B                  <1> 	dec ebx
  8279 00006577 891D[99630000]      <1> 	mov [pcidevidmask], ebx
  8280 0000657D 43                  <1> 	inc ebx
  8281 0000657E 881D[21640000]      <1> 	mov [pcitype], bl
  8282 00006584 891D[95630000]      <1> 	mov [pcidevid], ebx
  8283 0000658A C3                  <1> 	ret
  8284                              <1> findpcimemaddr:
  8285 0000658B E864000000          <1> 	call getpciaddr
  8286 00006590 BAF80C0000          <1> 	mov edx, 0xCF8
  8287 00006595 EF                  <1> 	out dx, eax
  8288 00006596 BAFC0C0000          <1> 	mov edx, 0xCFC
  8289 0000659B ED                  <1> 	in eax, dx
  8290 0000659C 89C3                <1> 	mov ebx, eax
  8291 0000659E 81E301000000        <1> 	and ebx, 1
  8292 000065A4 81FB01000000        <1> 	cmp ebx, 1
  8293 000065AA 0F842B000000        <1> 	je near notpciioaddr
  8294 000065B0 C1E804              <1> 	shr eax, 4
  8295 000065B3 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8296 000065B6 89C2                <1> 	mov edx, eax
  8297 000065B8 50                  <1> 	push eax
  8298 000065B9 A1[47020000]        <1> 	mov eax, [basecache]
  8299 000065BE C1E004              <1> 	shl eax, 4
  8300 000065C1 29C2                <1> 	sub edx, eax
  8301 000065C3 58                  <1> 	pop eax
  8302 000065C4 31DB                <1> 	xor ebx, ebx
  8303 000065C6 4B                  <1> 	dec ebx
  8304 000065C7 891D[99630000]      <1> 	mov [pcidevidmask], ebx
  8305 000065CD 43                  <1> 	inc ebx
  8306 000065CE 881D[21640000]      <1> 	mov [pcitype], bl
  8307 000065D4 891D[95630000]      <1> 	mov [pcidevid], ebx
  8308 000065DA C3                  <1> 	ret
  8309                              <1> notpciioaddr:
  8310 000065DB A0[93630000]        <1> 	mov al, [pciregister]
  8311 000065E0 0404                <1> 	add al, 4
  8312 000065E2 3C28                <1> 	cmp al, 0x28
  8313 000065E4 0F8704FEFFFF        <1> 	ja near searchpciret
  8314 000065EA A2[93630000]        <1> 	mov [pciregister], al
  8315 000065EF E954FFFFFF          <1> 	jmp findpciioaddr
  8316                              <1> getpciaddr:		;puts it in eax and ebx
  8317 000065F4 31C0                <1> 			xor eax, eax
  8318 000065F6 BB00000080          <1> 			mov ebx, 0x80000000
  8319 000065FB A0[90630000]        <1> 			mov al, [pcibus]
  8320 00006600 C1E010              <1> 			shl eax, 16
  8321 00006603 01C3                <1> 			add ebx, eax
  8322 00006605 31C0                <1> 			xor eax, eax
  8323 00006607 A0[91630000]        <1> 			mov al, [pcidevice]
  8324 0000660C C1E00B              <1> 			shl eax, 11
  8325 0000660F 01C3                <1> 			add ebx, eax
  8326 00006611 31C0                <1> 			xor eax, eax
  8327 00006613 A0[92630000]        <1> 			mov al, [pcifunction]
  8328 00006618 C1E008              <1> 			shl eax, 8
  8329 0000661B 01C3                <1> 			add ebx, eax
  8330 0000661D 31C0                <1> 			xor eax, eax
  8331 0000661F A0[93630000]        <1> 			mov al, [pciregister]
  8332 00006624 01C3                <1> 			add ebx, eax
  8333 00006626 89D8                <1> 			mov eax, ebx
  8334 00006628 C3                  <1> 			ret
  8335                                      %include "source/disk.asm"
  8336                              <1> %ifdef disk.real
  8337                              <1> 	%include "source/drivers/disk/realmode.asm"
  8338                              <2> diskr:
  8339                              <2> 			;sector count in cl
  8340                              <2> 			;disk number in ch
  8341                              <2> 			;48 bit address with last 32 bits in ebx
  8342                              <2> 			;buffer in esi
  8343                              <2> 			;puts end of buffer in edi and end lba address in edx
  8344 00006629 880D[50660000]      <2> 	mov [sdlength], cl
  8345 0000662F 891D[51660000]      <2> 	mov [sdaddress], ebx
  8346 00006635 8935[CC670000]      <2> 	mov [oldesireal], esi
  8347 0000663B 66BE[5566]          <2> 	mov si, readdiskreal
  8348 0000663F 668935[E80C0000]    <2> 	mov [realmodeptr], si
  8349 00006646 E88BA5FFFF          <2> 	call realmode
  8350 0000664B E941000000          <2> 	jmp backfromrealread
  8351 00006650 00                  <2> sdlength db 0
  8352 00006651 00000000            <2> sdaddress dd 0
  8353                              <2> 
  8354                              <2> [BITS 16]
  8355                              <2> readdiskreal:
  8356 00006655 C706[8166]1000      <2> 	mov word [dlen], 0x10
  8357 0000665B C706[8566]0000      <2> 	mov word [daddress], 0
  8358 00006661 C706[8766]0001      <2> 	mov word [dsegm], 0x100
  8359 00006667 66891E[8966]        <2> 	mov [dlbaad], ebx
  8360 0000666C 880E[8366]          <2> 	mov [dreadlen], cl
  8361                              <2> ReadHardDisk:
  8362 00006670 BE[8166]            <2> 	mov si, diskaddresspacket
  8363 00006673 31C0                <2> 	xor ax, ax
  8364 00006675 B442                <2> 	mov ah, 0x42
  8365 00006677 8A16[8066]          <2> 	mov dl, [dnumber]
  8366 0000667B CD13                <2> 	int 0x13
  8367 0000667D 72F1                <2> 	jc ReadHardDisk
  8368 0000667F C3                  <2> 	ret
  8369                              <2> 
  8370 00006680 80                  <2> dnumber db 0x80
  8371                              <2> diskaddresspacket:
  8372 00006681 10                  <2> dlen:	db 0x10 ;size of packet
  8373 00006682 00                  <2> 		db 0
  8374 00006683 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8375 00006685 0000                <2> daddress:	dw 0	;address 0
  8376 00006687 0001                <2> dsegm:		dw 0x100	;segment
  8377                              <2> 		;start with known value for hd
  8378                              <2> dlbaad:
  8379 00006689 00000000            <2> 	dd 0	;lba address
  8380 0000668D 00000000            <2> 	dd 0
  8381                              <2> [BITS 32]
  8382                              <2> backfromrealread:
  8383 00006691 8B35[CC670000]      <2> 	mov esi, [oldesireal]
  8384 00006697 8B1D[51660000]      <2> 	mov ebx, [sdaddress]
  8385 0000669D 31C9                <2> 	xor ecx, ecx
  8386 0000669F 8A0D[50660000]      <2> 	mov cl, [sdlength]
  8387 000066A5 01CB                <2> 	add ebx, ecx
  8388 000066A7 66B80800            <2> 	mov ax, LINEAR_SEL
  8389 000066AB 8EE0                <2> 	mov fs, ax
  8390 000066AD BF00100000          <2> 	mov edi, 0x1000
  8391 000066B2 B200                <2> 	mov dl, 0
  8392 000066B4 D0E1                <2> 	shl cl, 1
  8393                              <2> copyfromrmodedisk:
  8394 000066B6 648A07              <2> 	mov al, [fs:edi]
  8395 000066B9 8806                <2> 	mov [esi], al
  8396 000066BB 47                  <2> 	inc edi
  8397 000066BC 46                  <2> 	inc esi
  8398 000066BD FECA                <2> 	dec dl
  8399 000066BF 80FA00              <2> 	cmp dl, 0
  8400 000066C2 75F2                <2> 	jne copyfromrmodedisk
  8401 000066C4 FEC9                <2> 	dec cl
  8402 000066C6 B200                <2> 	mov dl, 0
  8403 000066C8 80F900              <2> 	cmp cl, 0
  8404 000066CB 75E9                <2> 	jne copyfromrmodedisk
  8405 000066CD 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8406 000066D1 8EE0                <2> 	mov fs, ax
  8407 000066D3 89F7                <2> 	mov edi, esi
  8408 000066D5 8B35[CC670000]      <2> 	mov esi, [oldesireal]
  8409 000066DB 89DA                <2> 	mov edx, ebx
  8410 000066DD 8B1D[51660000]      <2> 	mov ebx, [sdaddress]
  8411 000066E3 C3                  <2> 	ret
  8412                              <2> 	
  8413                              <1> %else
  8414                              <1> 	%ifdef disk.protected
  8415                              <1> 		%include "source/drivers/disk/pata.asm"
  8416                              <1> 	%endif
  8417                              <1> %endif
  8418                              <1> %ifdef disk.none
  8419                              <1> loadfile:	xor edx, edx
  8420                              <1> 			cmp byte [edi], '&'
  8421                              <1> 			je .ret
  8422                              <1> 			mov edx, 404	;no files are found except &
  8423                              <1> 		.ret:
  8424                              <1> 			ret
  8425                              <1> %else
  8426                              <1> ;This loads files using the methods in the loaded driver
  8427                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8428                              <1> 			;returns with err code in edx and file end in edi
  8429 000066E4 803F00              <1> 	cmp byte [edi], 0
  8430 000066E7 0F8448000000        <1> 	je near nofileload
  8431 000066ED 89FA                <1> 	mov edx, edi
  8432 000066EF BB[C6880300]        <1> 	mov ebx, diskfileindex
  8433                              <1> nextnamechar:
  8434 000066F4 8A07                <1> 	mov al, [edi]
  8435 000066F6 3C26                <1> 	cmp al, '&'
  8436 000066F8 7440                <1> 	je nullfile
  8437 000066FA 8A23                <1> 	mov ah, [ebx]
  8438 000066FC 47                  <1> 	inc edi
  8439 000066FD 43                  <1> 	inc ebx
  8440 000066FE 88C1                <1> 	mov cl, al
  8441 00006700 08E1                <1> 	or cl, ah
  8442 00006702 80F900              <1> 	cmp cl, 0
  8443 00006705 746B                <1> 	je equalfilenames
  8444 00006707 80F920              <1> 	cmp cl, ' '
  8445 0000670A 7466                <1> 	je equalfilenames
  8446 0000670C 3C2A                <1> 	cmp al, '*'
  8447 0000670E 742B                <1> 	je asteriskcheck
  8448 00006710 80FC00              <1> 	cmp ah, 0
  8449 00006713 7410                <1> 	je nextfilename
  8450 00006715 3C00                <1> 	cmp al, 0
  8451 00006717 7404                <1> 	je getebxzero
  8452 00006719 38E0                <1> 	cmp al, ah
  8453 0000671B 74D7                <1> 	je nextnamechar
  8454                              <1> getebxzero:
  8455 0000671D 8A23                <1> 	mov ah, [ebx]
  8456 0000671F 43                  <1> 	inc ebx
  8457 00006720 80FC00              <1> 	cmp ah, 0
  8458 00006723 75F8                <1> 	jne getebxzero
  8459                              <1> nextfilename:
  8460 00006725 81C308000000        <1> 	add ebx, 8		;next descriptor
  8461 0000672B 89D7                <1> 	mov edi, edx
  8462 0000672D 81FB[0A8A0300]      <1> 	cmp ebx, enddiskfileindex
  8463 00006733 72BF                <1> 	jb nextnamechar
  8464                              <1> nofileload:
  8465 00006735 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8466                              <1> nullfile:
  8467 0000673A C3                  <1> 	ret
  8468                              <1> asteriskcheck:
  8469 0000673B 4B                  <1> 	dec ebx
  8470 0000673C 8A07                <1> 	mov al, [edi]
  8471 0000673E 3C2A                <1> 	cmp al, '*'
  8472 00006740 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8473 00006742 3C20                <1> 	cmp al, ' '
  8474 00006744 7412                <1> 	je equalfilenames2
  8475 00006746 3C00                <1> 	cmp al, 0
  8476 00006748 740E                <1> 	je equalfilenames2
  8477                              <1> .lp:
  8478 0000674A 8A23                <1> 	mov ah, [ebx]
  8479 0000674C 80FC00              <1> 	cmp ah, 0
  8480 0000674F 74D4                <1> 	je nextfilename
  8481 00006751 38E0                <1> 	cmp al, ah
  8482 00006753 749F                <1> 	je nextnamechar
  8483 00006755 43                  <1> 	inc ebx
  8484 00006756 EBF2                <1> 	jmp .lp
  8485                              <1> equalfilenames2:
  8486 00006758 81EB02000000        <1> 	sub ebx, 2
  8487                              <1> eqfilefind:
  8488 0000675E 43                  <1> 	inc ebx
  8489 0000675F 81FB[0A8A0300]      <1> 	cmp ebx, enddiskfileindex
  8490 00006765 0F83CAFFFFFF        <1> 	jae near nofileload
  8491 0000676B 8A03                <1> 	mov al, [ebx]
  8492 0000676D 3C00                <1> 	cmp al, 0
  8493 0000676F 75ED                <1> 	jne eqfilefind
  8494 00006771 43                  <1> 	inc ebx
  8495                              <1> equalfilenames:
  8496 00006772 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8497 00006775 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8498 00006777 031D[6E860000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8499 0000677D 31C9                <1> 	xor ecx, ecx
  8500 0000677F 88C1                <1> 	mov cl, al			;get excess number of sectors
  8501 00006781 C0E102              <1> 	shl cl, 2
  8502 00006784 C0E902              <1> 	shr cl, 2			;cut off at 64
  8503 00006787 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8504 00006789 B500                <1> 	mov ch, 0			;drive 0
  8505 0000678B C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8506                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8507 0000678E A3[D0670000]        <1> 	mov [filetracks], eax
  8508 00006793 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8509 00006795 89DA                <1> 	mov edx, ebx
  8510 00006797 80F900              <1> 	cmp cl, 0
  8511 0000679A 7405                <1> 	je copytracksforfile
  8512 0000679C E888FEFFFF          <1> 	call diskr	;take care of excess sectors
  8513                              <1> copytracksforfile:
  8514 000067A1 A1[D0670000]        <1> 	mov eax, [filetracks]
  8515 000067A6 3D00000000          <1> 	cmp eax, 0
  8516 000067AB 7419                <1> 	je donecopyfile
  8517 000067AD 48                  <1> 	dec eax
  8518 000067AE A3[D0670000]        <1> 	mov [filetracks], eax
  8519 000067B3 89D3                <1> 	mov ebx, edx	;get end lba
  8520 000067B5 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8521 000067B7 8A2D[6D860000]      <1> 	mov ch, [DriveNumber]
  8522 000067BD 89FE                <1> 	mov esi, edi	;reset buffer
  8523 000067BF E865FEFFFF          <1> 	call diskr
  8524 000067C4 EBDB                <1> 	jmp copytracksforfile
  8525                              <1> donecopyfile:
  8526 000067C6 BA00000000          <1> 	mov edx, 0	;no error
  8527 000067CB C3                  <1> 	ret
  8528                              <1> 
  8529 000067CC 00000000            <1> oldesireal dd 0
  8530 000067D0 00000000            <1> filetracks dd 0
  8531 000067D4 00                  <1> lbad1 db 0
  8532 000067D5 00                  <1> lbad2 db 0
  8533 000067D6 00                  <1> lbad3 db 0
  8534 000067D7 00                  <1> lbad4 db 0
  8535 000067D8 00                  <1> lbad5 db 0
  8536 000067D9 00                  <1> lbad6 db 0
  8537 000067DA 6400                <1> segments dw 100
  8538                              <1> %endif
  8539                                      %include "source/threads.asm"
  8540                              <1> %ifdef threads.included	
  8541                              <1> nwcmdst:
  8542 000067DC 31C0                <1> 	xor eax, eax
  8543 000067DE BC[00AC0300]        <1> 	mov esp, stackend
  8544 000067E3 A2[9E680000]        <1> 	mov [threadson], al
  8545 000067E8 A3[9F680000]        <1> 	mov [currentthread], eax
  8546 000067ED 0504000000          <1> 	add eax, 4
  8547 000067F2 A3[9A680000]        <1> 	mov [lastthread], eax
  8548 000067F7 FB                  <1> 	sti
  8549 000067F8 E9D9C4FFFF          <1> 	jmp nwcmd
  8550                              <1> 
  8551                              <1> nomorethreadspace:
  8552 000067FD BE[13680000]        <1> 	mov esi, nmts
  8553 00006802 E841B5FFFF          <1> 	call print
  8554 00006807 C605[9E680000]00    <1> 	mov byte [threadson], 0
  8555 0000680E E9C3C4FFFF          <1> 	jmp nwcmd
  8556 00006813 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8557 0000681C 6572666C6F770A00    <1>
  8558                              <1> 
  8559                              <1> nomorestackspace:
  8560 00006824 BE[30680000]        <1> 	mov esi, nmss
  8561 00006829 E81AB5FFFF          <1> 	call print
  8562 0000682E EBAC                <1> 	jmp nwcmdst
  8563 00006830 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8564 00006839 72666C6F770A00      <1>
  8565                              <1> 	
  8566                              <1> threadswitch:
  8567 00006840 60                  <1> 	pushad 
  8568 00006841 BF[3C880500]        <1> 	mov edi, threadlist
  8569 00006846 A1[9F680000]        <1> 	mov eax, [currentthread]
  8570 0000684B 40                  <1> 	inc eax
  8571 0000684C A3[9F680000]        <1> 	mov [currentthread], eax
  8572 00006851 6648                <1> 	dec ax
  8573 00006853 C1E002              <1> 	shl eax, 2
  8574 00006856 01C7                <1> 	add edi, eax
  8575 00006858 8927                <1> 	mov [edi], esp
  8576 0000685A 81C704000000        <1> 	add edi, 4
  8577 00006860 81FF[3C980500]      <1> 	cmp edi, threadlistend
  8578 00006866 0F830D000000        <1> 	jae near nookespthread
  8579 0000686C 8B07                <1> 	mov eax, [edi]
  8580 0000686E 3D00000000          <1> 	cmp eax, 0
  8581 00006873 0F8519000000        <1> 	jne near okespthread
  8582                              <1> nookespthread:
  8583 00006879 BF[3C880500]        <1> 	mov edi, threadlist
  8584 0000687E 31C0                <1> 	xor eax, eax
  8585 00006880 A3[9F680000]        <1> 	mov [currentthread], eax
  8586 00006885 8B07                <1> 	mov eax, [edi]
  8587 00006887 3D00000000          <1> 	cmp eax, 0
  8588 0000688C 0F844AFFFFFF        <1> 	je near nwcmdst
  8589                              <1> okespthread:
  8590 00006892 89C4                <1> 	mov esp, eax
  8591 00006894 B020                <1> 	mov al, 0x20
  8592 00006896 E620                <1> 	out 0x20, al
  8593 00006898 61                  <1> 	popad
  8594 00006899 CF                  <1> 	iret
  8595                              <1> 
  8596                              <1> %endif
  8597 0000689A 04000000            <1> 	lastthread dd 4
  8598 0000689E 00                  <1> 	threadson db 0
  8599 0000689F 00000000            <1> 	currentthread dd 0
  8600                                  %ifdef gui.included
  8601                                      %include "source/gui/gui.asm"
  8602                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8603 000068A3 31C0                <1> 	xor eax, eax
  8604 000068A5 31DB                <1> 	xor ebx, ebx
  8605 000068A7 31C9                <1> 	xor ecx, ecx
  8606 000068A9 31D2                <1> 	xor edx, edx
  8607 000068AB E871080000          <1> 	call guisetup
  8608                              <1> guiloop:
  8609 000068B0 E871EEFFFF          <1> 	call cursorgui
  8610                              <1> guistart:
  8611 000068B5 E888F4FFFF          <1> 	call getkey
  8612 000068BA C605[A77D0000]00    <1> 	mov byte [copygui], 0
  8613 000068C1 EBF2                <1> 	jmp guistart
  8614                              <1> 
  8615                              <1> %include "source/gui/bmp.asm"
  8616                              <2> showbmp:
  8617 000068C3 668B06              <2> 	mov ax, [esi]
  8618 000068C6 663D424D            <2> 	cmp ax, "BM"
  8619 000068CA 0F85BB000000        <2> 	jne near endedbmp
  8620 000068D0 8B3D[49560000]      <2> 	mov edi, [physbaseptr]
  8621 000068D6 6689D0              <2> 	mov ax, dx
  8622 000068D9 6689CB              <2> 	mov bx, cx
  8623 000068DC 31C9                <2> 	xor ecx, ecx
  8624 000068DE 31D2                <2> 	xor edx, edx
  8625 000068E0 6689D9              <2> 	mov cx, bx
  8626 000068E3 6689C2              <2> 	mov dx, ax
  8627 000068E6 01D7                <2> 	add edi, edx
  8628 000068E8 01D7                <2> 	add edi, edx
  8629 000068EA 31D2                <2> 	xor edx, edx
  8630 000068EC 668B15[21570000]    <2> 	mov dx, [resolutionx2]
  8631 000068F3 034E16              <2> 	add ecx, [esi + 22]
  8632                              <2> bmplocloop:
  8633 000068F6 52                  <2> 	push edx
  8634 000068F7 31C0                <2> 	xor eax, eax
  8635 000068F9 6689D0              <2> 	mov ax, dx
  8636 000068FC F7E1                <2> 	mul ecx
  8637 000068FE 5A                  <2> 	pop edx
  8638 000068FF 663B0D[35560000]    <2> 	cmp cx, [resolutiony]
  8639 00006906 7609                <2> 	jbe .nofixy
  8640 00006908 31C9                <2> 	xor ecx, ecx
  8641 0000690A 668B0D[35560000]    <2> 	mov cx, [resolutiony]
  8642                              <2> .nofixy:
  8643 00006911 01C7                <2> 	add edi, eax
  8644 00006913 8B5612              <2> 	mov edx, [esi + 18]
  8645 00006916 8B4E16              <2> 	mov ecx, [esi + 22]
  8646 00006919 8B460A              <2> 	mov eax, [esi + 10]
  8647 0000691C 8B5E02              <2> 	mov ebx, [esi + 2]
  8648 0000691F 01F3                <2> 	add ebx, esi
  8649 00006921 891D[91690000]      <2> 	mov [bmpend], ebx
  8650 00006927 89D3                <2> 	mov ebx, edx
  8651 00006929 01C6                <2> 	add esi, eax
  8652                              <2> ldxbmp2:
  8653 0000692B 31D2                <2> 	xor edx, edx
  8654 0000692D 668B15[33560000]    <2> 	mov dx, [resolutionx]
  8655 00006934 39D3                <2> 	cmp ebx, edx
  8656 00006936 7702                <2> 	ja ldxbmp
  8657 00006938 89DA                <2> 	mov edx, ebx
  8658                              <2> ldxbmp:
  8659 0000693A 668B06              <2> 	mov ax, [esi]
  8660 0000693D 668907              <2> 	mov [edi], ax
  8661 00006940 81C702000000        <2> 	add edi, 2
  8662 00006946 81C602000000        <2> 	add esi, 2
  8663 0000694C 3B35[91690000]      <2> 	cmp esi, [bmpend]
  8664 00006952 7737                <2> 	ja endedbmp
  8665 00006954 4A                  <2> 	dec edx
  8666 00006955 81FA00000000        <2> 	cmp edx, 0
  8667 0000695B 77DD                <2> 	ja ldxbmp
  8668 0000695D 31D2                <2> 	xor edx, edx
  8669 0000695F 668B15[33560000]    <2> 	mov dx, [resolutionx]
  8670 00006966 39D3                <2> 	cmp ebx, edx
  8671 00006968 7610                <2> 	jbe .notover
  8672                              <2> .over:
  8673 0000696A 01DE                <2> 	add esi, ebx
  8674 0000696C 01DE                <2> 	add esi, ebx
  8675 0000696E 29D6                <2> 	sub esi, edx
  8676 00006970 29D6                <2> 	sub esi, edx
  8677 00006972 01DF                <2> 	add edi, ebx
  8678 00006974 01DF                <2> 	add edi, ebx
  8679 00006976 29D7                <2> 	sub edi, edx
  8680 00006978 29D7                <2> 	sub edi, edx
  8681                              <2> .notover:
  8682 0000697A 29DF                <2> 	sub edi, ebx
  8683 0000697C 29DF                <2> 	sub edi, ebx
  8684 0000697E 29D7                <2> 	sub edi, edx
  8685 00006980 29D7                <2> 	sub edi, edx
  8686 00006982 49                  <2> 	dec ecx
  8687 00006983 81F900000000        <2> 	cmp ecx, 0
  8688 00006989 77A0                <2> 	ja ldxbmp2
  8689                              <2> endedbmp:
  8690 0000698B E844030000          <2> 	call switchmousepos2
  8691 00006990 C3                  <2> 	ret
  8692                              <2> 	
  8693 00006991 00000000            <2> 	bmpend dd 0
  8694                              <1> %include "source/gui/circle.asm"
  8695                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8696 00006995 55                  <2> 	push ebp
  8697 00006996 663D0000            <2> 	cmp ax, 0
  8698 0000699A 770A                <2> 	ja .nozerocircle
  8699 0000699C E8FB1B0000          <2> 	call putpixel	;the easiest circle ever
  8700 000069A1 E9F7000000          <2> 	jmp .done
  8701                              <2> .nozerocircle:
  8702 000069A6 6689F5              <2> 	mov bp, si
  8703 000069A9 6650                <2> 	push ax
  8704 000069AB E82D1C0000          <2> 	call getpixelmem
  8705 000069B0 31C0                <2> 	xor eax, eax
  8706 000069B2 6658                <2> 	pop ax
  8707 000069B4 BE01000000          <2> 	mov esi, 1
  8708 000069B9 29C6                <2> 	sub esi, eax
  8709 000069BB 89C1                <2> 	mov ecx, eax
  8710 000069BD 31C0                <2> 	xor eax, eax
  8711 000069BF 66A1[21570000]      <2> 	mov ax, [resolutionx2]
  8712 000069C5 F7E1                <2> 	mul ecx
  8713 000069C7 50                  <2> 	push eax
  8714 000069C8 31D2                <2> 	xor edx, edx
  8715 000069CA 01C7                <2> 	add edi, eax
  8716 000069CC 66892F              <2> 	mov [edi], bp
  8717 000069CF 29C7                <2> 	sub edi, eax
  8718 000069D1 29C7                <2> 	sub edi, eax
  8719 000069D3 66892F              <2> 	mov [edi], bp
  8720 000069D6 01C7                <2> 	add edi, eax
  8721 000069D8 D1E1                <2> 	shl ecx, 1
  8722 000069DA 01CF                <2> 	add edi, ecx
  8723 000069DC 66892F              <2> 	mov [edi], bp
  8724 000069DF D1E1                <2> 	shl ecx, 1
  8725 000069E1 29CF                <2> 	sub edi, ecx
  8726 000069E3 66892F              <2> 	mov [edi], bp
  8727 000069E6 D1E9                <2> 	shr ecx, 1
  8728 000069E8 01CF                <2> 	add edi, ecx
  8729 000069EA D1E9                <2> 	shr ecx, 1
  8730 000069EC B802000000          <2> 	mov eax, 2
  8731 000069F1 F7E1                <2> 	mul ecx
  8732 000069F3 48                  <2> 	dec eax
  8733 000069F4 F7D0                <2> 	not eax ;make it negative
  8734 000069F6 A3[A36A0000]        <2> 	mov [.ddF_y], eax
  8735 000069FB 58                  <2> 	pop eax
  8736 000069FC BB01000000          <2> 	mov ebx, 1
  8737 00006A01 891D[9F6A0000]      <2> 	mov [.ddF_x], ebx
  8738 00006A07 4B                  <2> 	dec ebx
  8739 00006A08 31D2                <2> 	xor edx, edx
  8740 00006A0A E904000000          <2> 	jmp .lp
  8741                              <2> .lpb:
  8742 00006A0F D1EA                <2> 	shr edx, 1
  8743 00006A11 D1E9                <2> 	shr ecx, 1
  8744                              <2> .lp:	;it starts this with the center in edi
  8745                              <2> 		;color in bp
  8746                              <2> 		;ddF_x in memory
  8747                              <2> 		;x*resolutionx2 in ebx
  8748                              <2> 		;x in edx
  8749                              <2> 		;ddF_y in memory
  8750                              <2> 		;y*resolutionx2 in eax
  8751                              <2> 		;f in esi
  8752                              <2> 		;y in ecx
  8753 00006A13 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8754 00006A19 7717                <2> 	ja	.noddF_y
  8755 00006A1B 49                  <2> 	dec ecx
  8756 00006A1C 2B05[21570000]      <2> 	sub eax, [resolutionx2]
  8757 00006A22 8105[A36A0000]0200- <2> 	add dword [.ddF_y], 2
  8758 00006A2A 0000                <2>
  8759 00006A2C 0335[A36A0000]      <2> 	add esi, [.ddF_y]
  8760                              <2> .noddF_y:
  8761 00006A32 42                  <2> 	inc edx
  8762 00006A33 031D[21570000]      <2> 	add ebx, [resolutionx2]
  8763 00006A39 8105[9F6A0000]0200- <2> 	add dword [.ddF_x], 2
  8764 00006A41 0000                <2>
  8765 00006A43 0335[9F6A0000]      <2> 	add esi, [.ddF_x]
  8766                              <2> 
  8767 00006A49 D1E2                <2> 	shl edx, 1
  8768 00006A4B D1E1                <2> 	shl ecx, 1
  8769 00006A4D 01D7                <2> 	add edi, edx
  8770 00006A4F 01C7                <2> 	add edi, eax
  8771 00006A51 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8772 00006A54 D1E2                <2> 	shl edx, 1
  8773 00006A56 29D7                <2> 	sub edi, edx
  8774 00006A58 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8775 00006A5B D1E0                <2> 	shl eax, 1
  8776 00006A5D 29C7                <2> 	sub edi, eax
  8777 00006A5F 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8778 00006A62 01D7                <2> 	add edi, edx
  8779 00006A64 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8780 00006A67 D1E8                <2> 	shr eax, 1
  8781 00006A69 D1EA                <2> 	shr edx, 1
  8782 00006A6B 01C7                <2> 	add edi, eax
  8783 00006A6D 29D7                <2> 	sub edi, edx
  8784                              <2> 
  8785 00006A6F 39D1                <2> 	cmp ecx, edx
  8786 00006A71 749C                <2> 	je .lpb
  8787                              <2> 
  8788 00006A73 01DF                <2> 	add edi, ebx
  8789 00006A75 01CF                <2> 	add edi, ecx
  8790 00006A77 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8791 00006A7A D1E1                <2> 	shl ecx, 1
  8792 00006A7C 29CF                <2> 	sub edi, ecx
  8793 00006A7E 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8794 00006A81 D1E3                <2> 	shl ebx, 1
  8795 00006A83 29DF                <2> 	sub edi, ebx
  8796 00006A85 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8797 00006A88 01CF                <2> 	add edi, ecx
  8798 00006A8A 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8799 00006A8D D1EB                <2> 	shr ebx, 1
  8800 00006A8F D1E9                <2> 	shr ecx, 1
  8801 00006A91 01DF                <2> 	add edi, ebx
  8802 00006A93 29CF                <2> 	sub edi, ecx
  8803 00006A95 39CA                <2> 	cmp edx, ecx
  8804 00006A97 0F8272FFFFFF        <2> 	jb .lpb
  8805                              <2> .done:
  8806 00006A9D 5D                  <2> 	pop ebp
  8807 00006A9E C3                  <2> 	ret
  8808                              <2> 	
  8809 00006A9F 00000000            <2> .ddF_x dd 0
  8810 00006AA3 00000000            <2> .ddF_y dd 0
  8811                              <2> 
  8812                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8813 00006AA7 55                  <2> 	push ebp
  8814 00006AA8 663D0000            <2> 	cmp ax, 0
  8815 00006AAC 770A                <2> 	ja .nozerocircle
  8816 00006AAE E8E91A0000          <2> 	call putpixel	;the easiest circle ever
  8817 00006AB3 E95A010000          <2> 	jmp .done
  8818                              <2> .nozerocircle:
  8819 00006AB8 6689F5              <2> 	mov bp, si
  8820 00006ABB 6650                <2> 	push ax
  8821 00006ABD E81B1B0000          <2> 	call getpixelmem
  8822 00006AC2 31C0                <2> 	xor eax, eax
  8823 00006AC4 6658                <2> 	pop ax
  8824 00006AC6 BE01000000          <2> 	mov esi, 1
  8825 00006ACB 29C6                <2> 	sub esi, eax
  8826 00006ACD 89C1                <2> 	mov ecx, eax
  8827 00006ACF 31C0                <2> 	xor eax, eax
  8828 00006AD1 66A1[21570000]      <2> 	mov ax, [resolutionx2]
  8829 00006AD7 F7E1                <2> 	mul ecx
  8830 00006AD9 50                  <2> 	push eax
  8831 00006ADA 31D2                <2> 	xor edx, edx
  8832 00006ADC 01C7                <2> 	add edi, eax
  8833 00006ADE 66892F              <2> 	mov [edi], bp
  8834 00006AE1 29C7                <2> 	sub edi, eax
  8835 00006AE3 29C7                <2> 	sub edi, eax
  8836 00006AE5 66892F              <2> 	mov [edi], bp
  8837 00006AE8 01C7                <2> 	add edi, eax
  8838 00006AEA D1E1                <2> 	shl ecx, 1
  8839 00006AEC 01CF                <2> 	add edi, ecx
  8840 00006AEE 51                  <2> 	push ecx
  8841                              <2> .s0:
  8842 00006AEF 66892F              <2> 	mov [edi], bp
  8843 00006AF2 81EF02000000        <2> 	sub edi, 2
  8844 00006AF8 49                  <2> 	dec ecx
  8845 00006AF9 81F900000000        <2> 	cmp ecx, 0
  8846 00006AFF 75EE                <2> 	jne .s0
  8847 00006B01 66892F              <2> 	mov [edi], bp
  8848 00006B04 59                  <2> 	pop ecx
  8849 00006B05 01CF                <2> 	add edi, ecx
  8850 00006B07 D1E9                <2> 	shr ecx, 1
  8851 00006B09 B802000000          <2> 	mov eax, 2
  8852 00006B0E F7E1                <2> 	mul ecx
  8853 00006B10 48                  <2> 	dec eax
  8854 00006B11 F7D0                <2> 	not eax ;make it negative
  8855 00006B13 A3[186C0000]        <2> 	mov [.ddF_y], eax
  8856 00006B18 58                  <2> 	pop eax
  8857 00006B19 BB01000000          <2> 	mov ebx, 1
  8858 00006B1E 891D[146C0000]      <2> 	mov [.ddF_x], ebx
  8859 00006B24 4B                  <2> 	dec ebx
  8860 00006B25 31D2                <2> 	xor edx, edx
  8861 00006B27 E904000000          <2> 	jmp .lp
  8862                              <2> .lpb:
  8863 00006B2C D1EA                <2> 	shr edx, 1
  8864 00006B2E D1E9                <2> 	shr ecx, 1
  8865                              <2> .lp:	;it starts this with the center in edi
  8866                              <2> 		;color in bp
  8867                              <2> 		;ddF_x in memory
  8868                              <2> 		;x*resolutionx2 in ebx
  8869                              <2> 		;x in edx
  8870                              <2> 		;ddF_y in memory
  8871                              <2> 		;y*resolutionx2 in eax
  8872                              <2> 		;f in esi
  8873                              <2> 		;y in ecx
  8874 00006B30 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8875 00006B36 7717                <2> 	ja	.noddF_y
  8876 00006B38 49                  <2> 	dec ecx
  8877 00006B39 2B05[21570000]      <2> 	sub eax, [resolutionx2]
  8878 00006B3F 8105[186C0000]0200- <2> 	add dword [.ddF_y], 2
  8879 00006B47 0000                <2>
  8880 00006B49 0335[186C0000]      <2> 	add esi, [.ddF_y]
  8881                              <2> .noddF_y:
  8882 00006B4F 42                  <2> 	inc edx
  8883 00006B50 031D[21570000]      <2> 	add ebx, [resolutionx2]
  8884 00006B56 8105[146C0000]0200- <2> 	add dword [.ddF_x], 2
  8885 00006B5E 0000                <2>
  8886 00006B60 0335[146C0000]      <2> 	add esi, [.ddF_x]
  8887                              <2> 
  8888 00006B66 D1E2                <2> 	shl edx, 1
  8889 00006B68 D1E1                <2> 	shl ecx, 1
  8890 00006B6A 52                  <2> 	push edx
  8891 00006B6B 29D7                <2> 	sub edi, edx
  8892 00006B6D 01C7                <2> 	add edi, eax
  8893 00006B6F 81FA00000000        <2> 	cmp edx, 0
  8894 00006B75 7412                <2> 	je .nos1
  8895                              <2> .s1:
  8896 00006B77 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8897 00006B7A 81C702000000        <2> 	add edi, 2
  8898 00006B80 4A                  <2> 	dec edx
  8899 00006B81 81FA00000000        <2> 	cmp edx, 0
  8900 00006B87 75EE                <2> 	jne .s1
  8901                              <2> .nos1:
  8902 00006B89 66892F              <2> 	mov [edi], bp
  8903 00006B8C 5A                  <2> 	pop edx
  8904 00006B8D 52                  <2> 	push edx
  8905 00006B8E 29C7                <2> 	sub edi, eax
  8906 00006B90 29C7                <2> 	sub edi, eax
  8907 00006B92 81FA00000000        <2> 	cmp edx, 0
  8908 00006B98 7412                <2> 	je .nos2
  8909                              <2> .s2:
  8910 00006B9A 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8911 00006B9D 81EF02000000        <2> 	sub edi, 2
  8912 00006BA3 4A                  <2> 	dec edx
  8913 00006BA4 81FA00000000        <2> 	cmp edx, 0
  8914 00006BAA 75EE                <2> 	jne .s2
  8915                              <2> .nos2:
  8916 00006BAC 66892F              <2> 	mov [edi], bp
  8917 00006BAF 5A                  <2> 	pop edx
  8918 00006BB0 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8919 00006BB2 01D7                <2> 	add edi, edx
  8920                              <2> 
  8921 00006BB4 39D1                <2> 	cmp ecx, edx
  8922 00006BB6 0F8470FFFFFF        <2> 	je .lpb
  8923                              <2> 
  8924 00006BBC 51                  <2> 	push ecx
  8925 00006BBD 01DF                <2> 	add edi, ebx
  8926 00006BBF 29CF                <2> 	sub edi, ecx
  8927 00006BC1 81F900000000        <2> 	cmp ecx, 0
  8928 00006BC7 7412                <2> 	je .nos3
  8929                              <2> .s3:
  8930 00006BC9 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8931 00006BCC 81C702000000        <2> 	add edi, 2
  8932 00006BD2 49                  <2> 	dec ecx
  8933 00006BD3 81F900000000        <2> 	cmp ecx, 0
  8934 00006BD9 75EE                <2> 	jne .s3
  8935                              <2> .nos3:
  8936 00006BDB 66892F              <2> 	mov [edi], bp
  8937 00006BDE 59                  <2> 	pop ecx
  8938 00006BDF 51                  <2> 	push ecx
  8939 00006BE0 29DF                <2> 	sub edi, ebx
  8940 00006BE2 29DF                <2> 	sub edi, ebx
  8941 00006BE4 81F900000000        <2> 	cmp ecx, 0
  8942 00006BEA 7412                <2> 	je .nos4
  8943                              <2> .s4:
  8944 00006BEC 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8945 00006BEF 81EF02000000        <2> 	sub edi, 2
  8946 00006BF5 49                  <2> 	dec ecx
  8947 00006BF6 81F900000000        <2> 	cmp ecx, 0
  8948 00006BFC 75EE                <2> 	jne .s4
  8949                              <2> .nos4:
  8950 00006BFE 66892F              <2> 	mov [edi], bp
  8951 00006C01 59                  <2> 	pop ecx
  8952 00006C02 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8953 00006C04 01CF                <2> 	add edi, ecx
  8954                              <2> 
  8955 00006C06 D1EA                <2> 	shr edx, 1
  8956 00006C08 D1E9                <2> 	shr ecx, 1
  8957 00006C0A 39CA                <2> 	cmp edx, ecx
  8958 00006C0C 0F821EFFFFFF        <2> 	jb .lp
  8959                              <2> .done:
  8960 00006C12 5D                  <2> 	pop ebp
  8961 00006C13 C3                  <2> 	ret
  8962                              <2> 	
  8963 00006C14 00000000            <2> .ddF_x dd 0
  8964 00006C18 00000000            <2> .ddF_y dd 0
  8965                              <1> %include "source/gui/cursor.asm"
  8966                              <2> clearmousecursor:
  8967 00006C1C BE[846F0000]        <2> 		mov esi, background
  8968 00006C21 8B3D[49560000]      <2> 		mov edi, [physbaseptr]
  8969 00006C27 31D2                <2> 		xor edx, edx
  8970 00006C29 31C9                <2> 		xor ecx, ecx
  8971 00006C2B 668B15[13590000]    <2> 		mov dx, [lastmouseposition]
  8972 00006C32 668B0D[15590000]    <2> 		mov cx, [lastmouseposition + 2]
  8973 00006C39 01D7                <2> 		add edi, edx
  8974 00006C3B 31D2                <2> 		xor edx, edx
  8975 00006C3D 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  8976 00006C44 81F900000000        <2> 		cmp ecx, 0
  8977 00006C4A 7408                <2> 		je .nomul
  8978 00006C4C 52                  <2> 		push edx
  8979 00006C4D 89D0                <2> 		mov eax, edx
  8980 00006C4F F7E1                <2> 		mul ecx
  8981 00006C51 01C7                <2> 		add edi, eax
  8982 00006C53 5A                  <2> 		pop edx
  8983                              <2> .nomul:
  8984                              <2> %ifdef 	gui.background
  8985                              <2> 		cmp dword [backgroundimage], 0
  8986                              <2> 		je .noyclr
  8987                              <2> 		mov esi, [backgroundimage]
  8988                              <2> 		sub edi, [physbaseptr]
  8989                              <2> 		add esi, edi
  8990                              <2> 		add edi, [physbaseptr]
  8991                              <2> .backlp:
  8992                              <2> 		xor ebx, ebx
  8993                              <2> .noyback:
  8994                              <2> 		mov eax, [esi + ebx]
  8995                              <2> 		mov [edi + ebx], eax
  8996                              <2> 		add ebx, 4
  8997                              <2> 		cmp ebx, 16
  8998                              <2> 		jne .noyback
  8999                              <2> 		add edi, edx
  9000                              <2> 		add esi, edx
  9001                              <2> 		inc cx
  9002                              <2> 		cmp cx, 16
  9003                              <2> 		jb .backlp
  9004                              <2> 		ret
  9005                              <2> %endif
  9006                              <2> .noyclr:
  9007 00006C54 668B06              <2> 		mov ax, [esi]
  9008 00006C57 C1C010              <2> 		rol eax, 16
  9009 00006C5A 668B06              <2> 		mov ax, [esi]
  9010 00006C5D 8907                <2> 		mov [edi], eax
  9011 00006C5F 894704              <2> 		mov [edi + 4], eax
  9012 00006C62 894708              <2> 		mov [edi + 8], eax
  9013 00006C65 89470C              <2> 		mov [edi + 12], eax
  9014 00006C68 01D7                <2> 		add edi, edx
  9015 00006C6A 6641                <2> 		inc cx
  9016 00006C6C 6681F91000          <2> 		cmp cx, 16
  9017 00006C71 72E1                <2> 		jb .noyclr
  9018 00006C73 C3                  <2> 		ret
  9019                              <2> 
  9020                              <2> switchmousepos:		;;switch were the mouse is located
  9021 00006C74 BE[9CCC0300]        <2> 		mov esi, mousecolorbuf
  9022 00006C79 8B3D[49560000]      <2> 		mov edi, [physbaseptr]
  9023 00006C7F 31D2                <2> 		xor edx, edx
  9024 00006C81 31C9                <2> 		xor ecx, ecx
  9025 00006C83 668B15[13590000]    <2> 		mov dx, [lastmouseposition]
  9026 00006C8A 668B0D[15590000]    <2> 		mov cx, [lastmouseposition + 2]
  9027 00006C91 01D7                <2> 		add edi, edx
  9028 00006C93 31D2                <2> 		xor edx, edx
  9029 00006C95 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  9030 00006C9C 6681F90000          <2> 		cmp cx, 0
  9031 00006CA1 740B                <2> 		je noswmsy
  9032 00006CA3 01D7                <2> swmsy:		add edi, edx
  9033 00006CA5 6649                <2> 		dec cx
  9034 00006CA7 6681F90000          <2> 		cmp cx, 0
  9035 00006CAC 75F5                <2> 		jne swmsy
  9036 00006CAE 8B06                <2> noswmsy:	mov eax, [esi]
  9037 00006CB0 8B5E04              <2> 		mov ebx, [esi + 4]
  9038 00006CB3 8907                <2> 		mov [edi], eax
  9039 00006CB5 895F04              <2> 		mov [edi + 4], ebx
  9040 00006CB8 8B4608              <2> 		mov eax, [esi + 8]
  9041 00006CBB 8B5E0C              <2> 		mov ebx, [esi + 12]
  9042 00006CBE 894708              <2> 		mov [edi + 8], eax
  9043 00006CC1 895F0C              <2> 		mov [edi + 12], ebx
  9044 00006CC4 01D7                <2> 		add edi, edx
  9045 00006CC6 81C610000000        <2> 		add esi, 16
  9046 00006CCC 81FE[9CCD0300]      <2> 		cmp esi, mcolorend
  9047 00006CD2 72DA                <2> 		jb noswmsy
  9048                              <2> 		
  9049                              <2> switchmousepos2:
  9050 00006CD4 BE[9CCC0300]        <2> 		mov esi, mousecolorbuf
  9051 00006CD9 8B3D[49560000]      <2> 		mov edi, [physbaseptr]
  9052 00006CDF 31D2                <2> 		xor edx, edx
  9053 00006CE1 31C9                <2> 		xor ecx, ecx
  9054 00006CE3 668B15[17590000]    <2> 		mov dx, [mousecursorposition]
  9055 00006CEA 668B0D[19590000]    <2> 		mov cx, [mousecursorposition + 2]
  9056 00006CF1 01D7                <2> 		add edi, edx
  9057 00006CF3 31D2                <2> 		xor edx, edx
  9058 00006CF5 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  9059 00006CFC 6681F90000          <2> 		cmp cx, 0
  9060 00006D01 740B                <2> 		je noswmsy2
  9061 00006D03 01D7                <2> swmsy2:		add edi, edx
  9062 00006D05 6649                <2> 		dec cx
  9063 00006D07 6681F90000          <2> 		cmp cx, 0
  9064 00006D0C 75F5                <2> 		jne swmsy2
  9065 00006D0E 8B07                <2> noswmsy2:	mov eax, [edi]
  9066 00006D10 8B5F04              <2> 		mov ebx, [edi + 4]
  9067 00006D13 8906                <2> 		mov [esi], eax
  9068 00006D15 895E04              <2> 		mov [esi + 4], ebx
  9069 00006D18 8B4708              <2> 		mov eax, [edi + 8]
  9070 00006D1B 8B5F0C              <2> 		mov ebx, [edi + 12]
  9071 00006D1E 894608              <2> 		mov [esi + 8], eax
  9072 00006D21 895E0C              <2> 		mov [esi + 12], ebx
  9073 00006D24 01D7                <2> 		add edi, edx
  9074 00006D26 81C610000000        <2> 		add esi, 16
  9075 00006D2C 81FE[9CCD0300]      <2> 		cmp esi, mcolorend
  9076 00006D32 72DA                <2> 		jb noswmsy2
  9077 00006D34 C3                  <2> 		ret
  9078                              <2> 		
  9079                              <1> %include "source/gui/icon.asm"
  9080 00006D35 0000                <2> iconcolor dw 0
  9081                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9082 00006D37 A2[05860000]        <2> 		mov [iconselected], al
  9083 00006D3C 8025[05860000]01    <2> 		and byte [iconselected], 1
  9084 00006D43 B401                <2> 		mov ah, 1
  9085 00006D45 E8E4150000          <2> 		call graphicsadd
  9086                              <2> 	showicon2:
  9087 00006D4A 8B3D[49560000]      <2> 		mov edi, [physbaseptr]
  9088 00006D50 6601D2              <2> 		add dx, dx
  9089 00006D53 663B15[21570000]    <2> 		cmp dx, [resolutionx2]
  9090 00006D5A 720C                <2> 		jb screenxgood
  9091 00006D5C 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  9092 00006D63 6681EA4000          <2> 		sub dx, 64
  9093                              <2> 	screenxgood:
  9094 00006D68 6681F90000          <2> 		cmp cx, 0
  9095 00006D6D 742B                <2> 		je noscreenygoodchk
  9096 00006D6F 663B0D[35560000]    <2> 		cmp cx, [resolutiony]
  9097 00006D76 720C                <2> 		jb screenygood
  9098 00006D78 668B0D[35560000]    <2> 		mov cx, [resolutiony]
  9099 00006D7F 6681E92000          <2> 		sub cx, 32
  9100                              <2> 	screenygood:
  9101 00006D84 50                  <2> 		push eax
  9102 00006D85 52                  <2> 		push edx
  9103 00006D86 31C0                <2> 		xor eax, eax
  9104 00006D88 31DB                <2> 		xor ebx, ebx
  9105 00006D8A 668B1D[21570000]    <2> 		mov bx, [resolutionx2]
  9106 00006D91 6689C8              <2> 		mov ax, cx
  9107 00006D94 F7E3                <2> 		mul ebx
  9108 00006D96 01C7                <2> 		add edi, eax
  9109 00006D98 5A                  <2> 		pop edx
  9110 00006D99 58                  <2> 		pop eax
  9111                              <2> 	noscreenygoodchk:
  9112 00006D9A 31DB                <2> 		xor ebx, ebx
  9113 00006D9C 6689D3              <2> 		mov bx, dx
  9114 00006D9F 01DF                <2> 		add edi, ebx
  9115 00006DA1 6631C9              <2> 		xor cx, cx
  9116 00006DA4 668B06              <2> 		mov ax, [esi]
  9117 00006DA7 81C602000000        <2> 		add esi, 2
  9118 00006DAD 66A3[356D0000]      <2> 		mov [iconcolor], ax
  9119                              <2> 	writeicon:
  9120 00006DB3 8B06                <2> 		mov eax, [esi]
  9121 00006DB5 D1C0                <2> 		rol eax, 1
  9122 00006DB7 30C9                <2> 		xor cl, cl
  9123                              <2> 	writeiconline:
  9124 00006DB9 B201                <2> 		mov dl, 1
  9125 00006DBB 20C2                <2> 		and dl, al
  9126 00006DBD 3215[05860000]      <2> 		xor dl, [iconselected]
  9127 00006DC3 668B1D[846F0000]    <2> 		mov bx, [background]
  9128 00006DCA 66891F              <2> 		mov [edi], bx
  9129 00006DCD 80FA00              <2> 		cmp dl, 0
  9130 00006DD0 740A                <2> 		je noiconline
  9131 00006DD2 668B15[356D0000]    <2> 		mov dx, [iconcolor]
  9132 00006DD9 668917              <2> 		mov [edi], dx
  9133                              <2> 	noiconline:
  9134 00006DDC 81C702000000        <2> 		add edi, 2
  9135 00006DE2 D1C0                <2> 		rol eax, 1
  9136 00006DE4 FEC1                <2> 		inc cl
  9137 00006DE6 80F920              <2> 		cmp cl, 32
  9138 00006DE9 72CE                <2> 		jb writeiconline
  9139 00006DEB 81C604000000        <2> 		add esi, 4
  9140 00006DF1 FEC5                <2> 		inc ch
  9141 00006DF3 31D2                <2> 		xor edx, edx
  9142 00006DF5 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  9143 00006DFC 01D7                <2> 		add edi, edx
  9144 00006DFE 81EF40000000        <2> 		sub edi, 64
  9145 00006E04 80FD20              <2> 		cmp ch, 32
  9146 00006E07 72AA                <2> 		jb writeicon
  9147 00006E09 31C0                <2> 		xor eax, eax
  9148 00006E0B C3                  <2> 		ret
  9149                              <1> %include "source/gui/line.asm"
  9150                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9151 00006E0C 668935[2E6F0000]    <2> 	mov [.color], si
  9152 00006E13 C605[306F0000]00    <2> 	mov byte [.steep], 0
  9153 00006E1A C605[316F0000]00    <2> 	mov byte [.yreversed], 0
  9154 00006E21 E907000000          <2> 	jmp .notsteep
  9155                              <2> .steeploop:
  9156 00006E26 C605[306F0000]01    <2> 	mov byte [.steep], 1
  9157                              <2> .notsteep:
  9158 00006E2D 31FF                <2> 	xor edi, edi
  9159 00006E2F 31F6                <2> 	xor esi, esi
  9160 00006E31 6639DA              <2> 	cmp dx, bx
  9161 00006E34 7705                <2> 	ja .noreversex
  9162 00006E36 6687D3              <2> 	xchg dx, bx
  9163 00006E39 6691                <2> 	xchg cx, ax
  9164                              <2> .noreversex:
  9165 00006E3B 6689D7              <2> 	mov di, dx
  9166 00006E3E 6629DF              <2> 	sub di, bx
  9167                              <2> 	
  9168 00006E41 6639C1              <2> 	cmp cx, ax
  9169 00006E44 720B                <2> 	jb .reversey
  9170 00006E46 6689CE              <2> 	mov si, cx
  9171 00006E49 6629C6              <2> 	sub si, ax
  9172 00006E4C E90D000000          <2> 	jmp .normal
  9173                              <2> .reversey:
  9174 00006E51 C605[316F0000]02    <2> 	mov byte [.yreversed], 2
  9175 00006E58 6689C6              <2> 	mov si, ax
  9176 00006E5B 6629CE              <2> 	sub si, cx	
  9177                              <2> .normal:
  9178 00006E5E 6687CA              <2> 	xchg cx, dx
  9179 00006E61 6693                <2> 	xchg ax, bx
  9180 00006E63 6639FE              <2> 	cmp si, di
  9181 00006E66 77BE                <2> 	ja .steeploop
  9182 00006E68 6687CA              <2> 	xchg cx, dx
  9183 00006E6B 6693                <2> 	xchg ax, bx
  9184                              <2> 	
  9185 00006E6D 6691                <2> 	xchg ax, cx
  9186 00006E6F 6687DA              <2> 	xchg bx, dx
  9187 00006E72 66893D[346F0000]    <2> 	mov [.xdelta], di
  9188 00006E79 668935[366F0000]    <2> 	mov [.ydelta], si
  9189 00006E80 668B35[2E6F0000]    <2> 	mov si, [.color]
  9190 00006E87 66891D[326F0000]    <2> 	mov [.endline], bx
  9191 00006E8E 6652                <2> 	push dx
  9192 00006E90 6651                <2> 	push cx
  9193 00006E92 6687CA              <2> 	xchg cx, dx
  9194 00006E95 803D[306F0000]01    <2> 	cmp byte [.steep], 1
  9195 00006E9C 7403                <2> 	je .xchg
  9196 00006E9E 6687D1              <2> 	xchg dx, cx
  9197                              <2> .xchg:
  9198 00006EA1 E837170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9199 00006EA6 6659                <2> 	pop cx
  9200 00006EA8 665A                <2> 	pop dx
  9201 00006EAA 31C0                <2> 	xor eax, eax
  9202 00006EAC 66A1[346F0000]      <2> 	mov ax, [.xdelta]
  9203 00006EB2 66D1E8              <2> 	shr ax, 1
  9204 00006EB5 8A0D[306F0000]      <2> 	mov cl, [.steep]
  9205 00006EBB 0A0D[316F0000]      <2> 	or cl, [.yreversed]
  9206 00006EC1 55                  <2> 	push ebp
  9207 00006EC2 668B2D[326F0000]    <2> 	mov bp, [.endline]
  9208 00006EC9 6629D5              <2> 	sub bp, dx
  9209 00006ECC 668B15[366F0000]    <2> 	mov dx, [.ydelta]
  9210                              <2> .lp:
  9211 00006ED3 668937              <2> 	mov [edi], si
  9212 00006ED6 6639D0              <2> 	cmp ax, dx
  9213 00006ED9 7332                <2> 	jae .noaddx
  9214 00006EDB F6C102              <2> 	test cl, 2
  9215 00006EDE 7414                <2> 	jz .nodecy
  9216 00006EE0 F6C101              <2> 	test cl, 1
  9217 00006EE3 7509                <2> 	jnz .steepy
  9218 00006EE5 29DF                <2> 	sub edi, ebx
  9219 00006EE7 29DF                <2> 	sub edi, ebx
  9220 00006EE9 E906000000          <2> 	jmp .nodecy
  9221                              <2> .steepy:
  9222 00006EEE 81EF04000000        <2> 	sub edi, 4
  9223                              <2> .nodecy:
  9224 00006EF4 660305[346F0000]    <2> 	add ax, [.xdelta]
  9225 00006EFB F6C101              <2> 	test cl, 1
  9226 00006EFE 7507                <2> 	jnz .steepx
  9227 00006F00 01DF                <2> 	add edi, ebx
  9228 00006F02 E906000000          <2> 	jmp .noaddx
  9229                              <2> .steepx:
  9230 00006F07 81C702000000        <2> 	add edi, 2
  9231                              <2> .noaddx:
  9232 00006F0D 6629D0              <2> 	sub ax, dx
  9233 00006F10 664D                <2> 	dec bp
  9234 00006F12 81C702000000        <2> 	add edi, 2
  9235 00006F18 F6C101              <2> 	test cl, 1
  9236 00006F1B 7408                <2> 	jz .nosteepx
  9237 00006F1D 81EF02000000        <2> 	sub edi, 2
  9238 00006F23 01DF                <2> 	add edi, ebx
  9239                              <2> .nosteepx:
  9240 00006F25 6681FD0000          <2> 	cmp bp, 0
  9241 00006F2A 75A7                <2> 	jne .lp
  9242                              <2> .done:
  9243 00006F2C 5D                  <2> 	pop ebp
  9244 00006F2D C3                  <2> 	ret
  9245                              <2> 	
  9246 00006F2E 0000                <2> .color dw 0
  9247 00006F30 00                  <2> .steep db 0
  9248 00006F31 00                  <2> .yreversed db 0
  9249 00006F32 0000                <2> .endline dw 0
  9250 00006F34 0000                <2> .xdelta dw 0
  9251 00006F36 0000                <2> .ydelta dw 0
  9252                              <1> %include "source/gui/refresh.asm"
  9253                              <2> guiclear:
  9254 00006F38 8B3D[49560000]      <2> 	mov edi, [physbaseptr]
  9255 00006F3E 668B15[33560000]    <2> 	mov dx, [resolutionx]
  9256 00006F45 668B0D[35560000]    <2> 	mov cx, [resolutiony]
  9257 00006F4C 668B1D[846F0000]    <2> 	mov bx, [background]
  9258 00006F53 66891D[866F0000]    <2> 	mov [background + 2], bx
  9259                              <2> %ifdef gui.background
  9260                              <2> 	cmp dword [backgroundimage], 0
  9261                              <2> 	je guiclear.noback
  9262                              <2> 		mov esi, [backgroundimage]
  9263                              <2> 	.lp:
  9264                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9265                              <2> 		;movdqa [edi], xmm0
  9266                              <2> 		;add esi, 16
  9267                              <2> 		;add edi, 16
  9268                              <2> 		;sub dx, 8
  9269                              <2> 		mov eax, [esi]
  9270                              <2> 		mov [edi], eax
  9271                              <2> 		add esi, 4
  9272                              <2> 		add edi, 4
  9273                              <2> 		sub dx, 2
  9274                              <2> 		cmp dx, 0
  9275                              <2> 		ja .lp
  9276                              <2> 		dec cx
  9277                              <2> 		mov dx, [resolutionx]
  9278                              <2> 		cmp cx, 0
  9279                              <2> 		ja .lp
  9280                              <2> 		ret
  9281                              <2> 	backgroundimage dd 0
  9282                              <2> %endif
  9283                              <2> guiclear.noback:
  9284 00006F5A A1[846F0000]        <2> 	mov eax, [background]
  9285                              <2> guiclearloop:
  9286 00006F5F 8907                <2> 	mov [edi], eax
  9287 00006F61 81C704000000        <2> 	add edi, 4
  9288 00006F67 6681EA0200          <2> 	sub dx, 2
  9289 00006F6C 6681FA0000          <2> 	cmp dx, 0
  9290 00006F71 77EC                <2> 	ja guiclearloop
  9291 00006F73 6649                <2> 	dec cx
  9292 00006F75 668B15[33560000]    <2> 	mov dx, [resolutionx]
  9293 00006F7C 6681F90000          <2> 	cmp cx, 0
  9294 00006F81 77DC                <2> 	ja guiclearloop
  9295 00006F83 C3                  <2> 	ret
  9296                              <2> 
  9297 00006F84 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9298                              <2> 	.original equ 0111101111001111b
  9299                              <2> 
  9300                              <2> reloadallgraphics:
  9301 00006F88 BF[9CCA0300]        <2> 		mov edi, graphicstable
  9302                              <2> reloadgraphicsloop:
  9303 00006F8D 8B7702              <2> 		mov esi, [edi + 2]
  9304 00006F90 668B5706            <2> 		mov dx, [edi + 6]
  9305 00006F94 668B4F08            <2> 		mov cx, [edi + 8]
  9306 00006F98 668B07              <2> 		mov ax, [edi]
  9307 00006F9B 668B5F0A            <2> 		mov bx, [edi + 10]
  9308 00006F9F 893D[1A830000]      <2> 		mov [grpctblpos], edi
  9309 00006FA5 3B3D[B17D0000]      <2> 		cmp edi, [dragging]
  9310 00006FAB 741E                <2> 		je loadedgraphic
  9311 00006FAD 663D0100            <2> 		cmp ax, 1
  9312 00006FB1 0F8436000000        <2> 		je near icongraphic
  9313 00006FB7 663D0200            <2> 		cmp ax, 2
  9314 00006FBB 0F843C000000        <2> 		je near stringgraphic
  9315 00006FC1 663D0300            <2> 		cmp ax, 3
  9316 00006FC5 0F8416000000        <2> 		je near windowgraphic
  9317 00006FCB 8B3D[1A830000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9318 00006FD1 81C710000000        <2> 		add edi, 16
  9319 00006FD7 81FF[9CCC0300]      <2> 		cmp edi, graphicstableend
  9320 00006FDD 732E                <2> 		jae donereloadgraphics
  9321 00006FDF EBAC                <2> 		jmp reloadgraphicsloop
  9322                              <2> windowgraphic:
  9323 00006FE1 E82C090000          <2> 		call showwindow2
  9324 00006FE6 E851AEFFFF          <2> 		call cleardouble
  9325 00006FEB EBDE                <2> 		jmp loadedgraphic
  9326 00006FED 80E301              <2> icongraphic:	and bl, 1
  9327 00006FF0 881D[05860000]      <2> 		mov [iconselected], bl
  9328 00006FF6 E84FFDFFFF          <2> 		call showicon2
  9329 00006FFB EBCE                <2> 		jmp loadedgraphic
  9330 00006FFD 80E301              <2> stringgraphic:  and bl, 1
  9331 00007000 881D[AD7D0000]      <2> 		mov [mouseselecton], bl
  9332 00007006 E8CE050000          <2> 		call showstring2
  9333 0000700B EBBE                <2> 		jmp loadedgraphic
  9334                              <2> donereloadgraphics:
  9335 0000700D 8B3D[B17D0000]      <2> 		mov edi, [dragging]
  9336 00007013 81FF[9CCA0300]      <2> 		cmp edi, graphicstable
  9337 00007019 7226                <2> 		jb notcorrectdrag
  9338 0000701B 668B07              <2> 		mov ax, [edi]
  9339 0000701E 8B7702              <2> 		mov esi, [edi + 2]
  9340 00007021 668B5706            <2> 		mov dx, [edi + 6]
  9341 00007025 668B4F08            <2> 		mov cx, [edi + 8]
  9342 00007029 668B5F0A            <2> 		mov bx, [edi + 10]
  9343 0000702D 663D0100            <2> 		cmp ax, 1
  9344 00007031 750F                <2> 		jne noticondragging
  9345 00007033 80E301              <2> 		and bl, 1
  9346 00007036 881D[05860000]      <2> 		mov [iconselected], bl
  9347 0000703C E809FDFFFF          <2> 		call showicon2
  9348                              <2> notcorrectdrag:
  9349 00007041 C3                  <2> 		ret
  9350                              <2> 
  9351                              <2> 	noticondragging:
  9352 00007042 663D0200            <2> 		cmp ax, 2
  9353 00007046 75F9                <2> 		jne notcorrectdrag
  9354 00007048 80E301              <2> 		and bl, 1
  9355 0000704B 881D[AD7D0000]      <2> 		mov [mouseselecton], bl
  9356 00007051 E883050000          <2> 		call showstring2
  9357 00007056 EBE9                <2> 		jmp notcorrectdrag
  9358                              <1> %include "source/gui/square.asm"
  9359                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9360 00007058 6639D3              <2> 	cmp bx, dx
  9361 0000705B 7303                <2> 	jae .noxchgx
  9362 0000705D 6687DA              <2> 	xchg bx, dx
  9363                              <2> .noxchgx:
  9364 00007060 6639C8              <2> 	cmp ax, cx
  9365 00007063 7302                <2> 	jae .noxchgy
  9366 00007065 6691                <2> 	xchg ax, cx
  9367                              <2> .noxchgy:
  9368 00007067 6650                <2> 	push ax
  9369 00007069 6653                <2> 	push bx
  9370 0000706B 6652                <2> 	push dx
  9371 0000706D E86B150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9372 00007072 31D2                <2> 	xor edx, edx
  9373 00007074 665A                <2> 	pop dx
  9374 00007076 31DB                <2> 	xor ebx, ebx
  9375 00007078 665B                <2> 	pop bx
  9376 0000707A 6658                <2> 	pop ax
  9377                              <2> .lp0:
  9378 0000707C 6652                <2> 	push dx
  9379                              <2> .lp:
  9380 0000707E 668937              <2> 	mov [edi], si
  9381 00007081 81C702000000        <2> 	add edi, 2
  9382 00007087 6642                <2> 	inc dx
  9383 00007089 6639DA              <2> 	cmp dx, bx
  9384 0000708C 76F0                <2> 	jbe .lp
  9385 0000708E 665A                <2> 	pop dx
  9386 00007090 81EF02000000        <2> 	sub edi, 2
  9387 00007096 29DF                <2> 	sub edi, ebx
  9388 00007098 29DF                <2> 	sub edi, ebx
  9389 0000709A 01D7                <2> 	add edi, edx
  9390 0000709C 01D7                <2> 	add edi, edx
  9391 0000709E 033D[21570000]      <2> 	add edi, [resolutionx2]
  9392 000070A4 6641                <2> 	inc cx
  9393 000070A6 6639C1              <2> 	cmp cx, ax
  9394 000070A9 7203                <2> 	jb .lp2
  9395 000070AB 74CF                <2> 	je .lp0
  9396 000070AD C3                  <2> 	ret
  9397                              <2> .lp2:
  9398 000070AE 57                  <2> 	push edi
  9399 000070AF 668937              <2> 	mov [edi], si
  9400 000070B2 29D7                <2> 	sub edi, edx
  9401 000070B4 29D7                <2> 	sub edi, edx
  9402 000070B6 01DF                <2> 	add edi, ebx
  9403 000070B8 01DF                <2> 	add edi, ebx
  9404 000070BA 668937              <2> 	mov [edi], si
  9405 000070BD 5F                  <2> 	pop edi
  9406 000070BE 033D[21570000]      <2> 	add edi, [resolutionx2]
  9407 000070C4 6641                <2> 	inc cx
  9408 000070C6 6639C1              <2> 	cmp cx, ax
  9409 000070C9 72E3                <2> 	jb .lp2
  9410 000070CB EBAF                <2> 	jmp .lp0
  9411                              <2> 
  9412                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9413 000070CD 6639D3              <2> 	cmp bx, dx
  9414 000070D0 7303                <2> 	jae .noxchgx
  9415 000070D2 6687DA              <2> 	xchg bx, dx
  9416                              <2> .noxchgx:
  9417 000070D5 6639C8              <2> 	cmp ax, cx
  9418 000070D8 7302                <2> 	jae .noxchgy
  9419 000070DA 6691                <2> 	xchg ax, cx
  9420                              <2> .noxchgy:
  9421 000070DC 6650                <2> 	push ax
  9422 000070DE 6653                <2> 	push bx
  9423 000070E0 6652                <2> 	push dx
  9424 000070E2 E8F6140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9425 000070E7 31D2                <2> 	xor edx, edx
  9426 000070E9 665A                <2> 	pop dx
  9427 000070EB 31DB                <2> 	xor ebx, ebx
  9428 000070ED 665B                <2> 	pop bx
  9429 000070EF 6658                <2> 	pop ax
  9430                              <2> .lp2:
  9431 000070F1 6652                <2> 	push dx
  9432                              <2> .lp:
  9433 000070F3 668937              <2> 	mov [edi], si
  9434 000070F6 81C702000000        <2> 	add edi, 2
  9435 000070FC 6642                <2> 	inc dx
  9436 000070FE 6639DA              <2> 	cmp dx, bx
  9437 00007101 76F0                <2> 	jbe .lp
  9438 00007103 665A                <2> 	pop dx
  9439 00007105 81EF02000000        <2> 	sub edi, 2
  9440 0000710B 29DF                <2> 	sub edi, ebx
  9441 0000710D 29DF                <2> 	sub edi, ebx
  9442 0000710F 01D7                <2> 	add edi, edx
  9443 00007111 01D7                <2> 	add edi, edx
  9444 00007113 033D[21570000]      <2> 	add edi, [resolutionx2]
  9445 00007119 6641                <2> 	inc cx
  9446 0000711B 6639C1              <2> 	cmp cx, ax
  9447 0000711E 76D1                <2> 	jbe .lp2
  9448 00007120 C3                  <2> 	ret
  9449                              <1> %include "source/gui/startup.asm"
  9450                              <2> guisetup:
  9451                              <2> 	%ifdef gui.background
  9452                              <2> 	xor ebx, ebx
  9453                              <2> 	mov [backgroundimage], ebx
  9454                              <2> 	%endif
  9455 00007121 E812FEFFFF          <2> 	call guiclear
  9456 00007126 C605[6C860000]01    <2> 	mov byte [guion], 1
  9457 0000712D C605[AD7D0000]00    <2> 	mov byte [mouseselecton], 0
  9458 00007134 31C0                <2> 	xor eax, eax
  9459 00007136 31DB                <2> 	xor ebx, ebx
  9460 00007138 31C9                <2> 	xor ecx, ecx
  9461 0000713A 31D2                <2> 	xor edx, edx
  9462                              <2> 	
  9463 0000713C BE[FE720000]        <2> 	mov esi, pacmsg
  9464 00007141 30E4                <2> 	xor ah, ah
  9465 00007143 B010                <2> 	mov al, 00010000b
  9466 00007145 31DB                <2> 	xor ebx, ebx
  9467 00007147 66B99000            <2> 	mov cx, 144
  9468 0000714B 66BA0400            <2> 	mov dx, 4
  9469 0000714F E872040000          <2> 	call showstring
  9470                              <2> 	
  9471 00007154 BE[3C730000]        <2> 	mov esi, interneticon
  9472 00007159 30E4                <2> 	xor ah, ah
  9473 0000715B B010                <2> 	mov al, 00010000b
  9474 0000715D BB[27720000]        <2> 	mov ebx, noie
  9475 00007162 66B91800            <2> 	mov cx, 24
  9476 00007166 66BA0400            <2> 	mov dx, 4
  9477 0000716A E8C8FBFFFF          <2> 	call showicon
  9478                              <2> 	
  9479 0000716F BE[BE730000]        <2> 	mov esi, wordicon
  9480 00007174 30E4                <2> 	xor ah, ah
  9481 00007176 B010                <2> 	mov al, 00010000b
  9482 00007178 31DB                <2> 	xor ebx, ebx
  9483 0000717A 66B91800            <2> 	mov cx, 24
  9484 0000717E 66BA3000            <2> 	mov dx, 48
  9485 00007182 E8B0FBFFFF          <2> 	call showicon
  9486                              <2> 	
  9487 00007187 BE[40740000]        <2> 	mov esi, pacmanpellet
  9488 0000718C 30E4                <2> 	xor ah, ah
  9489 0000718E B010                <2> 	mov al, 00010000b
  9490 00007190 31DB                <2> 	xor ebx, ebx
  9491 00007192 66B94000            <2> 	mov cx, 64
  9492 00007196 66BA0400            <2> 	mov dx, 4
  9493 0000719A E898FBFFFF          <2> 	call showicon
  9494                              <2> 	
  9495 0000719F BE[44750000]        <2> 	mov esi, pacman
  9496 000071A4 30E4                <2> 	xor ah, ah
  9497 000071A6 B010                <2> 	mov al, 00010000b
  9498 000071A8 BB[10720000]        <2> 	mov ebx, pacmannomnom
  9499 000071AD 66B94000            <2> 	mov cx, 64
  9500 000071B1 66BA3000            <2> 	mov dx, 48
  9501 000071B5 E87DFBFFFF          <2> 	call showicon
  9502                              <2> 	
  9503 000071BA BE[C2740000]        <2> 	mov esi, ghostie
  9504 000071BF 30E4                <2> 	xor ah, ah
  9505 000071C1 B010                <2> 	mov al, 00010000b
  9506 000071C3 BB[F9710000]        <2> 	mov ebx, boo
  9507 000071C8 66B96C00            <2> 	mov cx, 108
  9508 000071CC 66BA0400            <2> 	mov dx, 4
  9509 000071D0 E862FBFFFF          <2> 	call showicon
  9510                              <2> 	
  9511 000071D5 BE[E0720000]        <2> 	mov esi, start
  9512 000071DA 668B0D[35560000]    <2> 	mov cx, [resolutiony]
  9513 000071E1 6681E91000          <2> 	sub cx, 16
  9514 000071E6 66BA0200            <2> 	mov dx, 2
  9515 000071EA 30E4                <2> 	xor ah, ah
  9516 000071EC B010                <2> 	mov al, 00010000b
  9517 000071EE BB[9C720000]        <2> 	mov ebx, winblows
  9518 000071F3 E8CE030000          <2> 	call showstring
  9519                              <2> 
  9520                              <2> %ifdef gui.time	
  9521                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9522                              <2> %endif
  9523 000071F8 C3                  <2> 	ret
  9524                              <2> 
  9525                              <2> 	boo:
  9526 000071F9 BE[F9720000]        <2> 		mov esi, boomsg
  9527 000071FE 66BA6400            <2> 		mov dx, 100
  9528 00007202 66B94001            <2> 		mov cx, 320
  9529 00007206 31DB                <2> 		xor ebx, ebx
  9530 00007208 6631C0              <2> 		xor ax, ax
  9531 0000720B E9B6030000          <2> 		jmp showstring
  9532                              <2> 
  9533                              <2> 	pacmannomnom:
  9534 00007210 BE[17730000]        <2> 		mov esi, pacnom
  9535 00007215 66BA8200            <2> 		mov dx, 130
  9536 00007219 66B93C00            <2> 		mov cx, 60
  9537 0000721D 31DB                <2> 		xor ebx, ebx
  9538 0000721F 6631C0              <2> 		xor ax, ax
  9539 00007222 E99F030000          <2> 		jmp showstring	
  9540                              <2> 	
  9541                              <2> 	noie:
  9542 00007227 66C705[26730000]80- <2> 		mov word [termwindow], 640
  9543 0000722F 02                  <2>
  9544 00007230 66C705[28730000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9545 00007238 01                  <2>
  9546 00007239 BE[26730000]        <2> 		mov esi, termwindow
  9547 0000723E 66BA1000            <2> 		mov dx, 16
  9548 00007242 66B91000            <2> 		mov cx, 16
  9549 00007246 31DB                <2> 		xor ebx, ebx
  9550 00007248 6631C0              <2> 		xor ax, ax
  9551 0000724B E808060000          <2> 		call showwindow
  9552 00007250 E9C1B8FFFF          <2> 		jmp os
  9553                              <2> 
  9554                              <2> 	gotomenuboot:
  9555 00007255 31D2                <2> 		xor edx, edx
  9556 00007257 31C9                <2> 		xor ecx, ecx
  9557 00007259 668B15[33560000]    <2> 		mov dx, [resolutionx]
  9558 00007260 668B0D[35560000]    <2> 		mov cx, [resolutiony]
  9559 00007267 66C1E904            <2> 		shr cx, 4
  9560 0000726B 6681E90100          <2> 		sub cx, 1
  9561 00007270 66C1E104            <2> 		shl cx, 4
  9562 00007274 668915[26730000]    <2> 		mov [termwindow], dx
  9563 0000727B 66890D[28730000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9564 00007282 BE[26730000]        <2> 		mov esi, termwindow
  9565 00007287 6631D2              <2> 		xor dx, dx
  9566 0000728A 6631C9              <2> 		xor cx, cx
  9567 0000728D 31DB                <2> 		xor ebx, ebx
  9568 0000728F 6631C0              <2> 		xor ax, ax
  9569 00007292 E8C1050000          <2> 		call showwindow
  9570 00007297 E97AB8FFFF          <2> 		jmp os
  9571                              <2> 
  9572                              <2> 	winblows:
  9573 0000729C BE[EF720000]        <2> 		mov esi, turnoffmsg
  9574 000072A1 BB[8F510000]        <2> 		mov ebx, turnoff
  9575 000072A6 668B0D[35560000]    <2> 		mov cx, [resolutiony]
  9576 000072AD 6681E92000          <2> 		sub cx, 32
  9577 000072B2 6631D2              <2> 		xor dx, dx
  9578 000072B5 30E4                <2> 		xor ah, ah
  9579 000072B7 B010                <2> 		mov al, 00010000b
  9580 000072B9 E808030000          <2> 		call showstring
  9581 000072BE BE[E6720000]        <2> 		mov esi, gotomenu
  9582 000072C3 668B0D[35560000]    <2> 		mov cx, [resolutiony]
  9583 000072CA 6681E93000          <2> 		sub cx, 48
  9584 000072CF 6631D2              <2> 		xor dx, dx
  9585 000072D2 30E4                <2> 		xor ah, ah
  9586 000072D4 B010                <2> 		mov al, 00010000b
  9587 000072D6 BB[55720000]        <2> 		mov ebx, gotomenuboot
  9588 000072DB E9E6020000          <2> 		jmp showstring
  9589                              <2> 		
  9590                              <2> 
  9591 000072E0 737461727400        <2> 	start	db "start",0
  9592 000072E6 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9593 000072EF 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9594 000072F8 00                  <2>
  9595 000072F9 426F6F2100          <2> 	boomsg db "Boo!",0
  9596 000072FE 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9597 00007307 73206561737920746F- <2>
  9598 00007310 20647261772E00      <2>
  9599 00007317 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9600 00007320 6D206E6F6D00        <2>
  9601                              <2> 
  9602 00007326 20035802            <2> 	termwindow:	dw 800,600	;window size
  9603 0000732A FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9604 0000732E [9CCD0300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9605 00007332 [E4A20400]          <2>
  9606 00007336 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9607                              <2> 	
  9608 00007336 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9609 00007336 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9610 00007336 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9611 00007336 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9612 00007336 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9613                              <2> 
  9614                              <2> %ifdef gui.time
  9615                              <2> guitime:
  9616                              <2> 		call time	;get rtc in timeshow & dateshow
  9617                              <2> 		xor ebx, ebx
  9618                              <2> 		mov dx, [resolutionx2]
  9619                              <2> 		xor cx, cx
  9620                              <2> 		sub dx, 304
  9621                              <2> 		mov esi, dateshow
  9622                              <2> 		mov al, 00010001b
  9623                              <2> 		call showstring
  9624                              <2> 		mov esi, timeshow
  9625                              <2> 		xor ebx, ebx
  9626                              <2> 		mov al, 00010001b
  9627                              <2> 		call showstring
  9628                              <2> 		ret
  9629                              <2> %endif
  9630                              <1> %include "source/gui/text.asm"
  9631                              <2> 	showstring:
  9632 000075C6 A2[AD7D0000]        <2> 		mov [mouseselecton], al
  9633 000075CB 8025[AD7D0000]01    <2> 		and byte [mouseselecton], 1
  9634 000075D2 B402                <2> 		mov ah, 2
  9635 000075D4 E8550D0000          <2> 		call graphicsadd
  9636                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9637 000075D9 30E4                <2> 		xor ah, ah
  9638 000075DB 8A06                <2> 		mov al, [esi]
  9639 000075DD 3CFF                <2> 		cmp al, 0xFF
  9640 000075DF 7503                <2> 		jne .notnull
  9641 000075E1 46                  <2> 		inc esi
  9642 000075E2 EBF5                <2> 		jmp showstring2
  9643                              <2> .notnull:
  9644 000075E4 3CC0                <2> 		cmp al, 0xC0
  9645 000075E6 7234                <2> 		jb .doneutf
  9646 000075E8 3CE0                <2> 		cmp al, 0xE0
  9647 000075EA 721D                <2> 		jb .two
  9648 000075EC 46                  <2> 		inc esi
  9649 000075ED 668B1E              <2> 		mov bx, [esi]
  9650 000075F0 46                  <2> 		inc esi
  9651 000075F1 C0E004              <2> 		shl al, 4
  9652 000075F4 66C1E302            <2> 		shl bx, 2
  9653 000075F8 C0EF02              <2> 		shr bh, 2
  9654 000075FB 66C1EB02            <2> 		shr bx, 2
  9655 000075FF 08C7                <2> 		or bh, al
  9656 00007601 6689D8              <2> 		mov ax, bx
  9657 00007604 E913000000          <2> 		jmp .doneutf
  9658                              <2> 	.two:
  9659 00007609 8A3E                <2> 		mov bh, [esi]
  9660 0000760B 46                  <2> 		inc esi
  9661 0000760C 8A1E                <2> 		mov bl, [esi]
  9662 0000760E 66C1E302            <2> 		shl bx, 2
  9663 00007612 C0EF02              <2> 		shr bh, 2
  9664 00007615 66C1EB02            <2> 		shr bx, 2
  9665 00007619 6689D8              <2> 		mov ax, bx
  9666                              <2> 	.doneutf:
  9667 0000761C 663D0000            <2> 		cmp ax, 0
  9668 00007620 741C                <2> 		je doneshowstring
  9669 00007622 46                  <2> 		inc esi
  9670 00007623 56                  <2> 		push esi
  9671 00007624 668B1D[46760000]    <2> 		mov bx, [colorfont2]
  9672 0000762B E827000000          <2> 		call showfontvesa
  9673 00007630 663D0A00            <2> 		cmp ax, 10
  9674 00007634 7405                <2> 		je noproceedshst
  9675 00007636 6681C20800          <2> 		add dx, 8
  9676                              <2> 	noproceedshst:
  9677 0000763B 5E                  <2> 		pop esi
  9678 0000763C EB9B                <2> 		jmp showstring2
  9679                              <2> 	doneshowstring:
  9680 0000763E C605[AD7D0000]00    <2> 		mov byte [mouseselecton], 0
  9681 00007645 C3                  <2> 		ret
  9682                              <2> 
  9683 00007646 FFFF                <2> colorfont2 dw 0xFFFF
  9684 00007648 00                  <2> colorcache db 0
  9685                              <2> 
  9686 00007649 02                  <2> resolutionbytes db 2
  9687 0000764A 0000                <2> posxvesa dw 0
  9688 0000764C 0000                <2> posyvesa dw 0
  9689 0000764E FFFF                <2> colorfont dw 0xFFFF
  9690                              <2> savefontvesa:		;same rules as showfontvesa
  9691 00007650 C605[AC7D0000]01    <2> 	mov byte [savefonton], 1
  9692                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9693 00007657 663DFF00            <2> 	cmp ax, 255
  9694 0000765B 7501                <2> 	jne nostopshowfont
  9695 0000765D C3                  <2> 	ret
  9696                              <2> nostopshowfont:
  9697 0000765E 55                  <2> 	push ebp
  9698 0000765F 66890D[4C760000]    <2> 	mov [posyvesa], cx
  9699 00007666 663D0A00            <2> 	cmp ax, 10
  9700 0000766A 0F8424000000        <2> 	je near goodvesafontx
  9701 00007670 31C9                <2> 	xor ecx, ecx
  9702 00007672 668B0D[21570000]    <2> 	mov cx, [resolutionx2]
  9703 00007679 6639CA              <2> 	cmp dx, cx
  9704 0000767C 7616                <2> 	jbe goodvesafontx
  9705 0000767E 6631D2              <2> 	xor dx, dx
  9706 00007681 668B0D[4C760000]    <2> 	mov cx, [posyvesa]
  9707 00007688 6681C11000          <2> 	add cx, 16
  9708 0000768D 66890D[4C760000]    <2> 	mov [posyvesa], cx
  9709                              <2> goodvesafontx:
  9710 00007694 668B0D[4C760000]    <2> 	mov cx, [posyvesa]
  9711 0000769B 668915[4A760000]    <2> 	mov [posxvesa], dx
  9712 000076A2 8B3D[49560000]      <2> 	mov edi, [physbaseptr]
  9713 000076A8 66891D[4E760000]    <2> 	mov [colorfont], bx
  9714 000076AF 668B2D[4E760000]    <2> 	mov bp, [colorfont]
  9715 000076B6 31DB                <2> 	xor ebx, ebx
  9716 000076B8 6689C3              <2> 	mov bx, ax
  9717 000076BB 31C0                <2> 	xor eax, eax
  9718 000076BD 6689D8              <2> 	mov ax, bx
  9719 000076C0 6689D3              <2> 	mov bx, dx
  9720 000076C3 89DA                <2> 	mov edx, ebx
  9721 000076C5 31DB                <2> 	xor ebx, ebx
  9722 000076C7 6681F90000          <2> 	cmp cx, 0
  9723 000076CC 7414                <2> 	je vesaposloopdn
  9724 000076CE 668B1D[21570000]    <2> 	mov bx, [resolutionx2]
  9725                              <2> vesaposloop:
  9726 000076D5 52                  <2> 	push edx
  9727 000076D6 50                  <2> 	push eax
  9728 000076D7 31C0                <2> 	xor eax, eax
  9729 000076D9 6689C8              <2> 	mov ax, cx
  9730 000076DC F7E3                <2> 	mul ebx
  9731 000076DE 01C7                <2> 	add edi, eax
  9732 000076E0 58                  <2> 	pop eax
  9733 000076E1 5A                  <2> 	pop edx
  9734                              <2> vesaposloopdn:
  9735 000076E2 01D7                <2> 	add edi, edx
  9736 000076E4 BE[C6880000]        <2> 	mov esi, fonts
  9737                              <2> findfontvesa:
  9738 000076E9 663D0A00            <2> 	cmp ax, 10
  9739 000076ED 0F84EB000000        <2> 	je near nwlinevesa
  9740 000076F3 C1E004              <2> 	shl eax, 4
  9741 000076F6 01C6                <2> 	add esi, eax
  9742 000076F8 C1E804              <2> 	shr eax, 4
  9743 000076FB 81FE[C6880300]      <2> 	cmp esi, fontend
  9744 00007701 0F83AB000000        <2> 	jae near donefontvesa
  9745 00007707 4E                  <2> 	dec esi
  9746                              <2> foundfontvesa:
  9747 00007708 46                  <2> 	inc esi
  9748 00007709 803D[AC7D0000]01    <2> 	cmp byte [savefonton], 1
  9749 00007710 0F84E7000000        <2> 	je near vesafontsaver
  9750 00007716 30C9                <2> 	xor cl, cl
  9751 00007718 8A06                <2> 	mov al, [esi]
  9752 0000771A 668B15[21570000]    <2> 	mov dx, [resolutionx2]
  9753 00007721 662B15[4A760000]    <2> 	sub dx, [posxvesa]
  9754 00007728 6681FA1000          <2> 	cmp dx, 16
  9755 0000772D 7708                <2> 	ja paintfontvesa
  9756 0000772F D0EA                <2> 	shr dl, 1
  9757 00007731 8815[DD770000]      <2> 	mov [charwidth], dl
  9758                              <2> paintfontvesa:
  9759 00007737 B201                <2> 	mov dl, 1
  9760 00007739 20C2                <2> 	and dl, al
  9761 0000773B 803D[AB7D0000]01    <2> 	cmp byte [showcursorfonton], 1
  9762 00007742 0F842E000000        <2> 	je near nodelpaintedfont
  9763 00007748 803D[AB7D0000]02    <2> 	cmp byte [showcursorfonton], 2
  9764 0000774F 0F8511000000        <2> 	jne near noswitchcursorfonton
  9765 00007755 80FA00              <2> 	cmp dl, 0
  9766 00007758 0F8420000000        <2> 	je near nopixelset
  9767 0000775E 66892F              <2> 	mov [edi], bp
  9768 00007761 E918000000          <2> 	jmp nopixelset
  9769                              <2> noswitchcursorfonton:
  9770 00007766 3215[AD7D0000]      <2> 	xor dl, [mouseselecton]
  9771 0000776C 668B1D[846F0000]    <2> 	mov bx, [background]
  9772 00007773 66891F              <2> 	mov [edi], bx
  9773                              <2> nodelpaintedfont:
  9774 00007776 80FA00              <2> 	cmp dl, 0
  9775 00007779 7403                <2> 	je nopixelset
  9776 0000777B 66892F              <2> 	mov [edi], bp
  9777                              <2> nopixelset:
  9778 0000777E 81C702000000        <2> 	add edi, 2
  9779 00007784 D0C0                <2> 	rol al, 1
  9780 00007786 FEC1                <2> 	inc cl
  9781 00007788 3A0D[DD770000]      <2> 	cmp cl, [charwidth]
  9782 0000778E 72A7                <2> 	jb paintfontvesa
  9783 00007790 FEC5                <2> 	inc ch
  9784 00007792 31D2                <2> 	xor edx, edx
  9785 00007794 668B15[21570000]    <2> 	mov dx, [resolutionx2]
  9786 0000779B 01D7                <2> 	add edi, edx
  9787 0000779D 31D2                <2> 	xor edx, edx
  9788 0000779F 8A15[DD770000]      <2> 	mov dl, [charwidth]
  9789 000077A5 00D2                <2> 	add dl, dl
  9790 000077A7 29D7                <2> 	sub edi, edx
  9791 000077A9 80FD10              <2> 	cmp ch, 16
  9792 000077AC 0F8256FFFFFF        <2> 	jb foundfontvesa
  9793                              <2> donefontvesa:
  9794 000077B2 C605[DD770000]08    <2> 	mov byte [charwidth], 8
  9795 000077B9 668B15[4A760000]    <2> 	mov dx, [posxvesa]
  9796 000077C0 8A1D[DD770000]      <2> 	mov bl, [charwidth]
  9797 000077C6 30FF                <2> 	xor bh, bh
  9798 000077C8 6601DA              <2> 	add dx, bx
  9799 000077CB 6689EB              <2> 	mov bx, bp
  9800 000077CE 668B0D[4C760000]    <2> 	mov cx, [posyvesa]
  9801 000077D5 883D[AC7D0000]      <2> 	mov [savefonton], bh
  9802 000077DB 5D                  <2> 	pop ebp
  9803 000077DC C3                  <2> 	ret
  9804 000077DD 08                  <2> charwidth db 8
  9805                              <2> nwlinevesa:
  9806 000077DE 6631D2              <2> 	xor dx, dx
  9807 000077E1 668915[4A760000]    <2> 	mov [posxvesa], dx
  9808 000077E8 668B0D[4C760000]    <2> 	mov cx, [posyvesa]
  9809 000077EF 6681C11000          <2> 	add cx, 16
  9810 000077F4 66890D[4C760000]    <2> 	mov [posyvesa], cx
  9811 000077FB EBB5                <2> 	jmp donefontvesa
  9812                              <2> vesafontsaver:
  9813 000077FD 30C0                <2> 	xor al, al
  9814 000077FF 30C9                <2> 	xor cl, cl
  9815                              <2> vesafontsaver2:
  9816 00007801 66392F              <2> 	cmp [edi], bp
  9817 00007804 742C                <2> 	je colorfontmatch
  9818                              <2> donecolormatch:
  9819 00007806 81C702000000        <2> 	add edi, 2
  9820 0000780C D0C0                <2> 	rol al, 1
  9821 0000780E FEC1                <2> 	inc cl
  9822 00007810 80F908              <2> 	cmp cl, 8
  9823 00007813 72EC                <2> 	jb vesafontsaver2
  9824 00007815 8806                <2> 	mov [esi], al
  9825 00007817 46                  <2> 	inc esi
  9826 00007818 FEC5                <2> 	inc ch
  9827 0000781A 31D2                <2> 	xor edx, edx
  9828 0000781C 668B15[21570000]    <2> 	mov dx, [resolutionx2]
  9829 00007823 01D7                <2> 	add edi, edx
  9830 00007825 81EF10000000        <2> 	sub edi, 16
  9831 0000782B 80FD10              <2> 	cmp ch, 16
  9832 0000782E 72CD                <2> 	jb vesafontsaver
  9833 00007830 EB80                <2> 	jmp donefontvesa
  9834                              <2> colorfontmatch:
  9835 00007832 0401                <2> 	add al, 1
  9836 00007834 EBD0                <2> 	jmp donecolormatch
  9837                              <1> %include "source/gui/window.asm"
  9838 00007836 0000                <2> winvcopystx dw 0
  9839 00007838 0000                <2> winvcopysty dw 0
  9840 0000783A 0000                <2> winvcopydx dw 0
  9841 0000783C 0000                <2> winvcopycx dw 0
  9842 0000783E FFFF0000            <2> windowcolor dw 0xFFFF,0
  9843 00007842 00000000            <2> windowbufloc: dd 0
  9844 00007846 00000000            <2> windowvideobuf dd 0
  9845 0000784A 00000000            <2> windowvideobuf2 dd 0
  9846 0000784E 00000000            <2> windowinfobuf dd 0
  9847 00007852 0000                <2> termcol dw 0
  9848 00007854 00000000            <2> wincopyendpos dd 0
  9849                              <2> 
  9850                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9851 00007858 C605[D5230000]01    <2> 		mov byte [termguion], 1
  9852 0000785F 6681C11000          <2> 		add cx, 16
  9853 00007864 668915[36780000]    <2> 		mov [winvcopystx], dx
  9854 0000786B 66890D[38780000]    <2> 		mov [winvcopysty], cx
  9855 00007872 8935[4E780000]      <2> 		mov [windowinfobuf], esi
  9856 00007878 668B16              <2> 		mov dx, [esi]
  9857 0000787B 668B4E02            <2> 		mov cx, [esi + 2]
  9858 0000787F 31C0                <2> 		xor eax, eax
  9859 00007881 31DB                <2> 		xor ebx, ebx
  9860 00007883 6689D0              <2> 		mov ax, dx
  9861 00007886 6689CB              <2> 		mov bx, cx
  9862 00007889 66C1E803            <2> 		shr ax, 3
  9863 0000788D 66C1EB04            <2> 		shr bx, 4
  9864 00007891 66A3[52780000]      <2> 		mov [termcol], ax
  9865 00007897 A2[C0250000]        <2> 		mov [charxy], al
  9866 0000789C 881D[C1250000]      <2> 		mov [charxy + 1], bl
  9867 000078A2 8B7E04              <2> 		mov edi, [esi + 4]
  9868 000078A5 893D[3E780000]      <2> 		mov [windowcolor], edi
  9869 000078AB 8B7E0C              <2> 		mov edi, [esi + 12]
  9870 000078AE 893D[4A780000]      <2> 		mov [windowvideobuf2], edi
  9871 000078B4 8B7E08              <2> 		mov edi, [esi + 8]
  9872 000078B7 893D[46780000]      <2> 		mov [windowvideobuf], edi
  9873 000078BD 81FB00000000        <2> 		cmp ebx, 0
  9874 000078C3 0F84C1040000        <2> 		je near donewincopynow
  9875                              <2> 	findendposwin:
  9876 000078C9 C1E002              <2> 		shl eax, 2
  9877 000078CC 31D2                <2> 		xor edx, edx
  9878 000078CE F7E3                <2> 		mul ebx
  9879 000078D0 01C7                <2> 		add edi, eax
  9880 000078D2 893D[54780000]      <2> 		mov [wincopyendpos], edi
  9881 000078D8 31FF                <2> 		xor edi, edi
  9882 000078DA 6631C0              <2> 		xor ax, ax
  9883 000078DD 6631DB              <2> 		xor bx, bx
  9884 000078E0 6601D2              <2> 		add dx, dx
  9885 000078E3 668915[3A780000]    <2> 		mov [winvcopydx], dx
  9886 000078EA 66890D[3C780000]    <2> 		mov [winvcopycx], cx
  9887 000078F1 668B0D[38780000]    <2> 		mov cx, [winvcopysty]
  9888 000078F8 6681E91000          <2> 		sub cx, 16
  9889 000078FD 668B15[36780000]    <2> 		mov dx, [winvcopystx]
  9890 00007904 C605[D6230000]00    <2> 		mov byte [termcopyon], 0
  9891 0000790B B403                <2> 		mov ah, 3
  9892 0000790D E81C0A0000          <2> 		call graphicsadd
  9893                              <2> 	showwindow2:
  9894 00007912 6681C11000          <2> 		add cx, 16
  9895 00007917 668915[36780000]    <2> 		mov [winvcopystx], dx
  9896 0000791E 66890D[38780000]    <2> 		mov [winvcopysty], cx
  9897 00007925 668B16              <2> 		mov dx, [esi]
  9898 00007928 668B4E02            <2> 		mov cx, [esi + 2]
  9899 0000792C 6601D2              <2> 		add dx, dx
  9900 0000792F 668915[3A780000]    <2> 		mov [winvcopydx], dx
  9901 00007936 66890D[3C780000]    <2> 		mov [winvcopycx], cx
  9902 0000793D E818000000          <2> 		call reloadwindowtitle
  9903 00007942 803D[15830000]01    <2> 		cmp byte [windrag], 1
  9904 00007949 0F834A040000        <2> 		jae near forgetresetstuff
  9905 0000794F 8B3D[42780000]      <2> 		mov edi, [windowbufloc]
  9906 00007955 E96E020000          <2> 		jmp windowvideocopyset
  9907                              <2> 		
  9908                              <2> 	reloadwindowtitle:
  9909 0000795A 8B3D[42780000]      <2> 		mov edi, [windowbufloc]
  9910 00007960 31D2                <2> 		xor edx, edx
  9911 00007962 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  9912 00007969 C1E204              <2> 		shl edx, 4
  9913 0000796C 29D7                <2> 		sub edi, edx
  9914 0000796E 803D[D6230000]00    <2> 		cmp byte [termcopyon], 0
  9915 00007975 7532                <2> 		jne nocleartitlebarpos
  9916 00007977 8B3D[49560000]      <2> 		mov edi, [physbaseptr]
  9917 0000797D 31D2                <2> 		xor edx, edx
  9918 0000797F 668B15[36780000]    <2> 		mov dx, [winvcopystx]
  9919 00007986 01D7                <2> 		add edi, edx
  9920 00007988 31C9                <2> 		xor ecx, ecx
  9921 0000798A 668B0D[38780000]    <2> 		mov cx, [winvcopysty]
  9922 00007991 6681E91000          <2> 		sub cx, 16
  9923 00007996 6681F90000          <2> 		cmp cx, 0
  9924 0000799B 740C                <2> 		je nocleartitlebarpos
  9925                              <2> 	cleartitlebarpos:
  9926 0000799D 31C0                <2> 		xor eax, eax
  9927 0000799F 66A1[21570000]      <2> 		mov ax, [resolutionx2]
  9928 000079A5 F7E1                <2> 		mul ecx
  9929 000079A7 01C7                <2> 		add edi, eax
  9930                              <2> 	nocleartitlebarpos:
  9931 000079A9 66B91000            <2> 		mov cx, 16
  9932 000079AD 668B15[3A780000]    <2> 		mov dx, [winvcopydx]
  9933 000079B4 6681F90000          <2> 		cmp cx, 0
  9934 000079B9 0F8448000000        <2> 		je near canceltitlebarput
  9935 000079BF 6681FA0000          <2> 		cmp dx, 0
  9936 000079C4 0F843D000000        <2> 		je near canceltitlebarput
  9937                              <2> 	titlebarput:
  9938 000079CA 66A1[3E780000]      <2> 		mov ax, [windowcolor]
  9939 000079D0 668907              <2> 		mov [edi], ax
  9940 000079D3 6681EA0200          <2> 		sub dx, 2
  9941 000079D8 81C702000000        <2> 		add edi, 2
  9942 000079DE 6681FA0000          <2> 		cmp dx, 0
  9943 000079E3 75E5                <2> 		jne titlebarput
  9944 000079E5 31D2                <2> 		xor edx, edx
  9945 000079E7 668B15[21570000]    <2> 		mov dx, [resolutionx2]
  9946 000079EE 6649                <2> 		dec cx
  9947 000079F0 662B15[3A780000]    <2> 		sub dx, [winvcopydx]
  9948 000079F7 01D7                <2> 		add edi, edx
  9949 000079F9 668B15[3A780000]    <2> 		mov dx, [winvcopydx]
  9950 00007A00 6681F90000          <2> 		cmp cx, 0
  9951 00007A05 75C3                <2> 		jne titlebarput
  9952                              <2> 	canceltitlebarput:
  9953 00007A07 893D[42780000]      <2> 		mov [windowbufloc], edi
  9954 00007A0D 803D[D6230000]02    <2> 		cmp byte [termcopyon], 2
  9955 00007A14 0F841C010000        <2> 		je near winvcpst
  9956 00007A1A 668B1D[846F0000]    <2> 		mov bx, [background]
  9957 00007A21 6653                <2> 		push bx
  9958 00007A23 6631DB              <2> 		xor bx, bx
  9959 00007A26 66891D[846F0000]    <2> 		mov [background], bx
  9960 00007A2D 6631C0              <2> 		xor ax, ax
  9961 00007A30 81C610000000        <2> 		add esi, 16
  9962 00007A36 668B15[36780000]    <2> 		mov dx, [winvcopystx]
  9963 00007A3D 668B0D[38780000]    <2> 		mov cx, [winvcopysty]
  9964 00007A44 6681E91000          <2> 		sub cx, 16
  9965 00007A49 668B1D[3E780000]    <2> 		mov bx, [windowcolor]
  9966 00007A50 C605[AD7D0000]01    <2> 		mov byte [mouseselecton], 1
  9967 00007A57 E87DFBFFFF          <2> 		call showstring2	;Show window title
  9968 00007A5C 8B35[AF2C0000]      <2> 		mov esi, [usercache]
  9969 00007A62 6681C21000          <2> 		add dx, 16
  9970 00007A67 C605[AD7D0000]01    <2> 		mov byte [mouseselecton], 1
  9971 00007A6E E866FBFFFF          <2> 		call showstring2	;Show user name
  9972 00007A73 BE[37860000]        <2> 		mov esi, computer
  9973 00007A78 C605[AD7D0000]01    <2> 		mov byte [mouseselecton], 1
  9974 00007A7F E855FBFFFF          <2> 		call showstring2	;Show computer name
  9975 00007A84 66B85800            <2> 		mov ax, "X"
  9976 00007A88 66BB00F8            <2> 		mov bx, 1111100000000000b
  9977 00007A8C 668B15[36780000]    <2> 		mov dx, [winvcopystx]
  9978 00007A93 668B0D[38780000]    <2> 		mov cx, [winvcopysty]
  9979 00007A9A 6681E91000          <2> 		sub cx, 16
  9980 00007A9F 6681EA1000          <2> 		sub dx, 16
  9981 00007AA4 660315[3A780000]    <2> 		add dx, [winvcopydx]
  9982 00007AAB C605[AD7D0000]01    <2> 		mov byte [mouseselecton], 1
  9983 00007AB2 663B15[21570000]    <2> 		cmp dx, [resolutionx2]
  9984 00007AB9 7305                <2> 		jae .nox
  9985 00007ABB E897FBFFFF          <2> 		call showfontvesa
  9986                              <2> .nox:
  9987 00007AC0 668B1D[846F0000]    <2> 		mov bx, [background]
  9988 00007AC7 6681EA1800          <2> 		sub dx, 24
  9989 00007ACC 66B82B00            <2> 		mov ax, "+"
  9990 00007AD0 66BBE007            <2> 		mov bx, 0000011111100000b
  9991 00007AD4 C605[AD7D0000]01    <2> 		mov byte [mouseselecton], 1
  9992 00007ADB 663B15[21570000]    <2> 		cmp dx, [resolutionx2]
  9993 00007AE2 7305                <2> 		jae .noplus
  9994 00007AE4 E86EFBFFFF          <2> 		call showfontvesa
  9995                              <2> .noplus:
  9996 00007AE9 6681EA1800          <2> 		sub dx, 24
  9997 00007AEE 66B82D00            <2> 		mov ax, "-"
  9998 00007AF2 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9999 00007AF6 C605[AD7D0000]01    <2> 		mov byte [mouseselecton], 1
 10000 00007AFD 663B15[21570000]    <2> 		cmp dx, [resolutionx2]
 10001 00007B04 7305                <2> 		jae .nominus
 10002 00007B06 E84CFBFFFF          <2> 		call showfontvesa
 10003                              <2> .nominus:
 10004 00007B0B 6681EA1800          <2> 		sub dx, 24
 10005 00007B10 66B83F00            <2> 		mov ax, "?"
 10006 00007B14 66BB1F00            <2> 		mov bx, 0000000000011111b
 10007 00007B18 C605[AD7D0000]01    <2> 		mov byte [mouseselecton], 1
 10008 00007B1F 663B15[21570000]    <2> 		cmp dx, [resolutionx2]
 10009 00007B26 7305                <2> 		jae .noquestion
 10010 00007B28 E82AFBFFFF          <2> 		call showfontvesa
 10011                              <2> .noquestion:
 10012 00007B2D 665B                <2> 		pop bx
 10013 00007B2F 66891D[846F0000]    <2> 		mov [background], bx
 10014                              <2> 	winvcpst:
 10015 00007B36 C3                  <2> 		ret
 10016                              <2> 
 10017                              <2> 	windowvideocopy:
 10018 00007B37 8B35[4E780000]      <2> 		mov esi, [windowinfobuf]
 10019 00007B3D 668B16              <2> 		mov dx, [esi]
 10020 00007B40 668B4E02            <2> 		mov cx, [esi + 2]
 10021 00007B44 8B7E04              <2> 		mov edi, [esi + 4]
 10022 00007B47 893D[3E780000]      <2> 		mov [windowcolor], edi
 10023 00007B4D 8B7E08              <2> 		mov edi, [esi + 8]
 10024 00007B50 8B5E0C              <2> 		mov ebx, [esi + 12]
 10025 00007B53 893D[46780000]      <2> 		mov [windowvideobuf], edi
 10026 00007B59 891D[4A780000]      <2> 		mov [windowvideobuf2], ebx
 10027 00007B5F 31C0                <2> 		xor eax, eax
 10028 00007B61 31DB                <2> 		xor ebx, ebx
 10029 00007B63 6689D0              <2> 		mov ax, dx
 10030 00007B66 6689CB              <2> 		mov bx, cx
 10031 00007B69 66C1E803            <2> 		shr ax, 3
 10032 00007B6D 66C1EB04            <2> 		shr bx, 4
 10033 00007B71 66A3[52780000]      <2> 		mov [termcol], ax
 10034 00007B77 A2[C0250000]        <2> 		mov [charxy], al
 10035 00007B7C 881D[C1250000]      <2> 		mov [charxy + 1], bl
 10036 00007B82 8B3D[42780000]      <2> 		mov edi, [windowbufloc]
 10037 00007B88 3B3D[49560000]      <2> 		cmp edi, [physbaseptr]
 10038 00007B8E 0F8334000000        <2> 		jae near windowvideocopyset
 10039 00007B94 31C9                <2> 		xor ecx, ecx
 10040 00007B96 31D2                <2> 		xor edx, edx
 10041 00007B98 668B15[36780000]    <2> 		mov dx, [winvcopystx]
 10042 00007B9F 668B0D[38780000]    <2> 		mov cx, [winvcopysty]
 10043 00007BA6 8B3D[49560000]      <2> 		mov edi, [physbaseptr]
 10044 00007BAC 01D7                <2> 		add edi, edx
 10045 00007BAE 81F900000000        <2> 		cmp ecx, 0
 10046 00007BB4 7412                <2> 		je windowvideocopyset
 10047                              <2> 	yrescopylp:
 10048 00007BB6 31C0                <2> 		xor eax, eax
 10049 00007BB8 66A1[21570000]      <2> 		mov ax, [resolutionx2]
 10050 00007BBE F7E1                <2> 		mul ecx
 10051 00007BC0 01C7                <2> 		add edi, eax
 10052 00007BC2 893D[42780000]      <2> 		mov [windowbufloc], edi
 10053                              <2> 	windowvideocopyset:
 10054 00007BC8 6631C9              <2> 		xor cx, cx
 10055 00007BCB 6649                <2> 		dec cx
 10056 00007BCD 66890D[A17D0000]    <2> 		mov [charposline], cx
 10057 00007BD4 89FE                <2> 		mov esi, edi
 10058 00007BD6 81EE10000000        <2> 		sub esi, 16
 10059 00007BDC 31D2                <2> 		xor edx, edx
 10060 00007BDE 668B15[21570000]    <2> 		mov dx, [resolutionx2]
 10061 00007BE5 C1E204              <2> 		shl edx, 4
 10062 00007BE8 01D6                <2> 		add esi, edx
 10063 00007BEA 8B3D[46780000]      <2> 		mov edi, [windowvideobuf]
 10064 00007BF0 81EF04000000        <2> 		sub edi, 4
 10065 00007BF6 893D[A37D0000]      <2> 		mov [charposvbuf], edi
 10066 00007BFC E97C000000          <2> 		jmp nextcharwin
 10067                              <2> 	win.write:	;adjusted this to use alpha
 10068                              <2> 				;5R, 6G, 5B
 10069                              <2> %ifdef gui.alphablending
 10070                              <2> 		push esi
 10071                              <2> 		push bx
 10072                              <2> 		push cx
 10073                              <2> 		push dx
 10074                              <2> %ifdef gui.background
 10075                              <2> 		mov esi, edi
 10076                              <2> 		sub esi, [physbaseptr]
 10077                              <2> 		add esi, [backgroundimage]
 10078                              <2> 		cmp dword [backgroundimage], 0
 10079                              <2> 		jne .red
 10080                              <2> %endif
 10081                              <2> 		mov esi, background
 10082                              <2> 	.red:
 10083                              <2> 		mov cx, [esi]
 10084                              <2> 		shr cx, 11
 10085                              <2> 		mov bx, ax
 10086                              <2> 		shr bx, 11
 10087                              <2> 		add cx, bx
 10088                              <2> 		add cx, bx
 10089                              <2> 		add cx, bx
 10090                              <2> 		shr cx, 2
 10091                              <2> 		shl cx, 11
 10092                              <2> 		mov dx, cx
 10093                              <2> 	.green:
 10094                              <2> 		mov cx, [esi]
 10095                              <2> 		shl cx, 5
 10096                              <2> 		shr cx, 10
 10097                              <2> 		mov bx, ax
 10098                              <2> 		shl bx, 5
 10099                              <2> 		shr bx, 10
 10100                              <2> 		add cx, bx
 10101                              <2> 		add cx, bx
 10102                              <2> 		add cx, bx
 10103                              <2> 		shr cx, 2
 10104                              <2> 		shl cx, 5
 10105                              <2> 		add dx, cx
 10106                              <2> 	.blue:
 10107                              <2> 		mov cx, [esi]
 10108                              <2> 		shl cx, 11
 10109                              <2> 		shr cx, 11
 10110                              <2> 		mov bx, ax
 10111                              <2> 		shl bx, 11
 10112                              <2> 		shr bx, 11
 10113                              <2> 		add cx, bx
 10114                              <2> 		add cx, bx
 10115                              <2> 		add cx, bx
 10116                              <2> 		shr cx, 2
 10117                              <2> 		add dx, cx
 10118                              <2> 		mov [edi], dx
 10119                              <2> 		pop dx
 10120                              <2> 		pop cx
 10121                              <2> 		pop bx
 10122                              <2> 		pop esi
 10123                              <2> %else
 10124 00007C01 668907              <2> 		mov [edi], ax
 10125                              <2> %endif
 10126 00007C04 C3                  <2> 		ret
 10127                              <2> 	copywindow:
 10128 00007C05 B201                <2> 		mov dl, 1
 10129 00007C07 D0C6                <2> 		rol dh, 1
 10130 00007C09 20F2                <2> 		and dl, dh
 10131 00007C0B 66813D[48760000]80- <2> 		cmp word [colorcache], 0x80
 10132 00007C13 00                  <2>
 10133 00007C14 7320                <2> 		jae switchwincolors
 10134 00007C16 66A1[40780000]      <2> 		mov ax, [windowcolor + 2]
 10135 00007C1C E8E0FFFFFF          <2> 		call win.write
 10136 00007C21 80FA00              <2> 		cmp dl, 0
 10137 00007C24 742B                <2> 		je nowritewin
 10138 00007C26 66A1[3E780000]      <2> 		mov ax, [windowcolor]
 10139 00007C2C E8D0FFFFFF          <2> 		call win.write
 10140 00007C31 E91B000000          <2> 		jmp nowritewin
 10141                              <2> 	switchwincolors:
 10142 00007C36 66A1[3E780000]      <2> 		mov ax, [windowcolor]
 10143 00007C3C E8C0FFFFFF          <2> 		call win.write
 10144 00007C41 80FA00              <2> 		cmp dl, 0
 10145 00007C44 740B                <2> 		je nowritewin
 10146 00007C46 66A1[40780000]      <2> 		mov ax, [windowcolor + 2]
 10147 00007C4C E8B0FFFFFF          <2> 		call win.write
 10148                              <2> 	nowritewin:
 10149 00007C51 81C702000000        <2> 		add edi, 2
 10150 00007C57 FEC1                <2> 		inc cl
 10151 00007C59 80F908              <2> 		cmp cl, 8
 10152 00007C5C 75A7                <2> 		jne copywindow
 10153 00007C5E 43                  <2> 		inc ebx
 10154 00007C5F 30C9                <2> 		xor cl, cl
 10155 00007C61 31D2                <2> 		xor edx, edx
 10156 00007C63 668B15[21570000]    <2> 		mov dx, [resolutionx2]
 10157 00007C6A 01D6                <2> 		add esi, edx
 10158 00007C6C 89F7                <2> 		mov edi, esi
 10159 00007C6E 8AB3[C6880000]      <2> 		mov dh, [fonts + ebx]
 10160 00007C74 D0CE                <2> 		ror dh, 1
 10161 00007C76 FEC5                <2> 		inc ch
 10162 00007C78 80FD10              <2> 		cmp ch, 16
 10163 00007C7B 7588                <2> 		jne copywindow
 10164                              <2> 	nextcharwin:
 10165 00007C7D 6631C9              <2> 		xor cx, cx
 10166 00007C80 8B3D[A37D0000]      <2> 		mov edi, [charposvbuf]
 10167 00007C86 81C704000000        <2> 		add edi, 4
 10168 00007C8C 3B3D[54780000]      <2> 		cmp edi, [wincopyendpos]
 10169 00007C92 0F83F2000000        <2> 		jae near donewincopynow
 10170 00007C98 668B5F02            <2> 		mov bx, [edi + 2]
 10171 00007C9C 6681FB0000          <2> 		cmp bx, 0
 10172 00007CA1 7508                <2> 		jne nofixcolorwin
 10173 00007CA3 66BB0700            <2> 		mov bx, 7
 10174 00007CA7 66895F02            <2> 		mov [edi + 2], bx
 10175                              <2> 	nofixcolorwin:
 10176 00007CAB 66891D[48760000]    <2> 		mov [colorcache], bx
 10177 00007CB2 8B1F                <2> 		mov ebx, [edi]
 10178 00007CB4 893D[A37D0000]      <2> 		mov [charposvbuf], edi
 10179 00007CBA 813D[4A780000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10180 00007CC2 0000                <2>
 10181 00007CC4 7455                <2> 		je noskipcharcopy
 10182 00007CC6 2B3D[46780000]      <2> 		sub edi, [windowvideobuf]
 10183 00007CCC 033D[4A780000]      <2> 		add edi, [windowvideobuf2]
 10184 00007CD2 8B07                <2> 		mov eax, [edi]
 10185 00007CD4 39D8                <2> 		cmp eax, ebx
 10186 00007CD6 7543                <2> 		jne noskipcharcopy
 10187                              <2> 	skipcharcopy:
 10188 00007CD8 81C610000000        <2> 		add esi, 16
 10189 00007CDE 668B0D[A17D0000]    <2> 		mov cx, [charposline]
 10190 00007CE5 6641                <2> 		inc cx
 10191 00007CE7 66890D[A17D0000]    <2> 		mov [charposline], cx
 10192 00007CEE 663B0D[52780000]    <2> 		cmp cx, [termcol]
 10193 00007CF5 7286                <2> 		jb nextcharwin
 10194 00007CF7 6631C9              <2> 		xor cx, cx
 10195 00007CFA 66890D[A17D0000]    <2> 		mov [charposline], cx
 10196 00007D01 31D2                <2> 		xor edx, edx
 10197 00007D03 668B15[21570000]    <2> 		mov dx, [resolutionx2]
 10198 00007D0A C1E204              <2> 		shl edx, 4
 10199 00007D0D 662B15[3A780000]    <2> 		sub dx, [winvcopydx]
 10200 00007D14 01D6                <2> 		add esi, edx
 10201 00007D16 E962FFFFFF          <2> 		jmp nextcharwin
 10202                              <2> 	noskipcharcopy:
 10203 00007D1B 891F                <2> 		mov [edi], ebx
 10204 00007D1D 8B3D[A37D0000]      <2> 		mov edi, [charposvbuf]
 10205 00007D23 C1E310              <2> 		shl ebx, 16
 10206 00007D26 C1EB0C              <2> 		shr ebx, 12
 10207 00007D29 31D2                <2> 		xor edx, edx
 10208 00007D2B 668B15[21570000]    <2> 		mov dx, [resolutionx2]
 10209 00007D32 C1E204              <2> 		shl edx, 4
 10210 00007D35 29D6                <2> 		sub esi, edx
 10211 00007D37 81C610000000        <2> 		add esi, 16
 10212 00007D3D 89F7                <2> 		mov edi, esi
 10213 00007D3F 668B0D[A17D0000]    <2> 		mov cx, [charposline]
 10214 00007D46 6641                <2> 		inc cx
 10215 00007D48 663B0D[52780000]    <2> 		cmp cx, [termcol]
 10216 00007D4F 7317                <2> 		jae fixwindowcopy
 10217 00007D51 66890D[A17D0000]    <2> 		mov [charposline], cx
 10218 00007D58 6631C9              <2> 		xor cx, cx
 10219 00007D5B 8AB3[C6880000]      <2> 		mov dh, [fonts + ebx]
 10220 00007D61 D0CE                <2> 		ror dh, 1
 10221 00007D63 E99DFEFFFF          <2> 		jmp copywindow
 10222                              <2> fixwindowcopy:
 10223 00007D68 6631C9              <2> 		xor cx, cx
 10224 00007D6B 66890D[A17D0000]    <2> 		mov [charposline], cx
 10225 00007D72 662B15[3A780000]    <2> 		sub dx, [winvcopydx]
 10226 00007D79 01D6                <2> 		add esi, edx
 10227 00007D7B 89F7                <2> 		mov edi, esi
 10228 00007D7D 8AB3[C6880000]      <2> 		mov dh, [fonts + ebx]
 10229 00007D83 D0CE                <2> 		ror dh, 1
 10230 00007D85 E97BFEFFFF          <2> 		jmp copywindow
 10231                              <2> donewincopynow:
 10232 00007D8A 803D[D6230000]01    <2> 		cmp byte [termcopyon], 1
 10233 00007D91 7506                <2> 		jne forgetresetstuff
 10234 00007D93 E80DACFFFF          <2> 		call switchtermcursor
 10235 00007D98 61                  <2> 		popa
 10236                              <2> forgetresetstuff:
 10237 00007D99 C605[D6230000]00    <2> 		mov byte [termcopyon], 0
 10238 00007DA0 C3                  <2> 		ret
 10239                              <2> 		
 10240 00007DA1 0000                <2> charposline dw 0
 10241 00007DA3 00000000            <2> charposvbuf dw 0,0
 10242                              <1> 				
 10243 00007DA7 00                  <1> copygui db 0
 10244 00007DA8 00                  <1> graphicsset db 0
 10245 00007DA9 0000                <1> graphicspos db 0,0
 10246 00007DAB 00                  <1> showcursorfonton db 0
 10247 00007DAC 00                  <1> savefonton db 0
 10248 00007DAD 00                  <1> mouseselecton db 0
 10249                              <1> 
 10250 00007DAE 00                  <1> pbutton db 0
 10251 00007DAF 00                  <1> pLBUTTON db 0
 10252 00007DB0 00                  <1> pRBUTTON db 0
 10253 00007DB1 00000000            <1> dragging dw 0,0
 10254 00007DB5 0000000000000000    <1> lastpos dw 0,0,0,0
 10255 00007DBD 00000000            <1> colorbuf dw 0,0
 10256                              <1> 	
 10257                              <1> 	clickicon:
 10258 00007DC1 B001                <1> 		mov al, 1
 10259 00007DC3 A2[AE7D0000]        <1> 		mov [pbutton], al
 10260 00007DC8 A0[AF7D0000]        <1> 		mov al, [pLBUTTON]
 10261 00007DCD 2205[285A0000]      <1> 		and al, [LBUTTON]
 10262 00007DD3 8A25[B07D0000]      <1> 		mov ah, [pRBUTTON]
 10263 00007DD9 2225[295A0000]      <1> 		and ah, [RBUTTON]
 10264 00007DDF 08E0                <1> 		or al, ah
 10265 00007DE1 3C00                <1> 		cmp al, 0
 10266 00007DE3 741B                <1> 		je nodragclick
 10267 00007DE5 813D[B17D0000]0100- <1> 		cmp dword [dragging], 1
 10268 00007DED 0000                <1>
 10269 00007DEF 732F                <1> 		jae dragclick
 10270 00007DF1 C705[B17D0000]0100- <1> 		mov dword [dragging], 1
 10271 00007DF9 0000                <1>
 10272 00007DFB E920000000          <1> 		jmp dragclick
 10273                              <1> 	nodragclick:
 10274 00007E00 31C0                <1> 		xor eax, eax
 10275 00007E02 A3[B17D0000]        <1> 		mov dword [dragging], eax
 10276 00007E07 A2[AE7D0000]        <1> 		mov [pbutton], al
 10277 00007E0C A0[285A0000]        <1> 		mov al, [LBUTTON]
 10278 00007E11 A2[AF7D0000]        <1> 		mov [pLBUTTON], al
 10279 00007E16 A0[295A0000]        <1> 		mov al, [RBUTTON]
 10280 00007E1B A2[B07D0000]        <1> 		mov [pRBUTTON], al
 10281                              <1> 	dragclick:
 10282 00007E20 6631C0              <1> 		xor ax, ax
 10283 00007E23 BE[9CCA0300]        <1> 		mov esi, graphicstable
 10284 00007E28 C705[01860000]0000- <1> 		mov dword [codepointer], 0
 10285 00007E30 0000                <1>
 10286                              <1> 	clicon2:
 10287 00007E32 31D2                <1> 		xor edx, edx
 10288 00007E34 31C9                <1> 		xor ecx, ecx
 10289 00007E36 66813E0100          <1> 		cmp word [esi], 1
 10290 00007E3B 0F841B000000        <1> 		je near iconselect
 10291 00007E41 66813E0200          <1> 		cmp word [esi], 2
 10292 00007E46 0F8472010000        <1> 		je near textselected
 10293 00007E4C 66813E0300          <1> 		cmp word [esi], 3
 10294 00007E51 0F84C7020000        <1> 		je near windowselect
 10295 00007E57 E910040000          <1> 		jmp nexticonsel
 10296                              <1> 	iconselect:
 10297 00007E5C 668B5606            <1> 		mov dx, [esi + 6]
 10298 00007E60 6689D0              <1> 		mov ax, dx
 10299 00007E63 668B4E08            <1> 		mov cx, [esi + 8]
 10300 00007E67 6689CB              <1> 		mov bx, cx
 10301 00007E6A 6681C32000          <1> 		add bx, 32
 10302 00007E6F 6601D0              <1> 		add ax, dx
 10303 00007E72 813D[B17D0000]0100- <1> 		cmp dword [dragging], 1
 10304 00007E7A 0000                <1>
 10305 00007E7C 746F                <1> 		je dragicon
 10306 00007E7E 813D[B17D0000]0000- <1> 		cmp dword [dragging], 0
 10307 00007E86 0000                <1>
 10308 00007E88 7411                <1> 		je nodragiconcheck
 10309 00007E8A 3935[B17D0000]      <1> 		cmp dword [dragging], esi
 10310 00007E90 0F85D6030000        <1> 		jne near nexticonsel
 10311 00007E96 E952000000          <1> 		jmp dragicon
 10312                              <1> 	nodragiconcheck:
 10313 00007E9B 663905[17590000]    <1> 		cmp [mousecursorposition], ax
 10314 00007EA2 0F82C4030000        <1> 		jb near nexticonsel
 10315 00007EA8 66054000            <1> 		add ax, 64
 10316 00007EAC 663905[17590000]    <1> 		cmp [mousecursorposition], ax
 10317 00007EB3 0F87B3030000        <1> 		ja near nexticonsel
 10318 00007EB9 6629D0              <1> 		sub ax, dx
 10319 00007EBC 66390D[19590000]    <1> 		cmp [mousecursorposition + 2], cx
 10320 00007EC3 0F82A3030000        <1> 		jb near nexticonsel
 10321 00007EC9 66391D[19590000]    <1> 		cmp [mousecursorposition + 2], bx
 10322 00007ED0 0F8796030000        <1> 		ja near nexticonsel
 10323 00007ED6 668B460A            <1> 		mov ax, [esi + 10]
 10324 00007EDA 66250100            <1> 		and ax, 1
 10325 00007EDE 663D0100            <1> 		cmp ax, 1
 10326 00007EE2 0F84B6000000        <1> 		je near unselecticon
 10327 00007EE8 E98D000000          <1> 		jmp nodragicon
 10328                              <1> 	dragicon:
 10329 00007EED 663905[13590000]    <1> 		cmp [lastmouseposition], ax
 10330 00007EF4 0F8272030000        <1> 		jb near nexticonsel
 10331 00007EFA 66054000            <1> 		add ax, 64
 10332 00007EFE 663905[13590000]    <1> 		cmp [lastmouseposition], ax
 10333 00007F05 0F8761030000        <1> 		ja near nexticonsel
 10334 00007F0B 6629D0              <1> 		sub ax, dx
 10335 00007F0E 66390D[15590000]    <1> 		cmp [lastmouseposition + 2], cx
 10336 00007F15 0F8251030000        <1> 		jb near nexticonsel
 10337 00007F1B 66391D[15590000]    <1> 		cmp [lastmouseposition + 2], bx
 10338 00007F22 0F8744030000        <1> 		ja near nexticonsel
 10339 00007F28 668B460A            <1> 		mov ax, [esi + 10]
 10340 00007F2C 2410                <1> 		and al, 00010000b
 10341 00007F2E 3C10                <1> 		cmp al, 00010000b
 10342 00007F30 7448                <1> 		je nodragicon
 10343 00007F32 8935[B17D0000]      <1> 		mov [dragging], esi
 10344 00007F38 66D1E2              <1> 		shl dx, 1
 10345 00007F3B 662B15[13590000]    <1> 		sub dx, [lastmouseposition]
 10346 00007F42 660315[17590000]    <1> 		add dx, [mousecursorposition]
 10347 00007F49 66D1EA              <1> 		shr dx, 1
 10348 00007F4C 66030D[19590000]    <1> 		add cx, [mousecursorposition + 2]
 10349 00007F53 662B0D[15590000]    <1> 		sub cx, [lastmouseposition + 2]
 10350 00007F5A 663B15[21570000]    <1> 		cmp dx, [resolutionx2]
 10351 00007F61 7607                <1> 		jbe chkyresdrgicn
 10352 00007F63 668B15[17590000]    <1> 		mov dx, [mousecursorposition]
 10353                              <1> 	chkyresdrgicn:
 10354 00007F6A 663B0D[35560000]    <1> 		cmp cx, [resolutiony]
 10355 00007F71 7607                <1> 		jbe nodragicon
 10356 00007F73 668B0D[19590000]    <1> 		mov cx, [mousecursorposition + 2]
 10357                              <1> 	nodragicon:
 10358 00007F7A 66814E0A0100        <1> 		or word [esi + 10], 1
 10359 00007F80 8B5E0C              <1> 		mov ebx, [esi + 12]
 10360 00007F83 668B460A            <1> 		mov ax, [esi + 10]
 10361 00007F87 8B7602              <1> 		mov esi, [esi + 2]
 10362 00007F8A C705[01860000]0000- <1> 		mov dword [codepointer], 0
 10363 00007F92 0000                <1>
 10364 00007F94 E89EEDFFFF          <1> 		call showicon
 10365 00007F99 E9E7020000          <1> 		jmp doneiconsel
 10366                              <1> 	unselecticon:
 10367 00007F9E 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10368 00007FA4 8B5E0C              <1> 		mov ebx, [esi + 12]
 10369 00007FA7 668B460A            <1> 		mov ax, [esi + 10]
 10370 00007FAB 8B7602              <1> 		mov esi, [esi + 2]
 10371 00007FAE 891D[01860000]      <1> 		mov [codepointer], ebx
 10372 00007FB4 E87EEDFFFF          <1> 		call showicon
 10373 00007FB9 E9C7020000          <1> 		jmp doneiconsel
 10374                              <1> 	textselected:
 10375 00007FBE 8B5E02              <1> 		mov ebx, [esi + 2]
 10376 00007FC1 668B5606            <1> 		mov dx, [esi + 6]
 10377 00007FC5 6689D0              <1> 		mov ax, dx
 10378 00007FC8 668B4E08            <1> 		mov cx, [esi + 8]
 10379                              <1> 	lengthtesttext:
 10380 00007FCC 803B00              <1> 		cmp byte [ebx], 0
 10381 00007FCF 7407                <1> 		je donetesttextlength
 10382 00007FD1 43                  <1> 		inc ebx
 10383 00007FD2 66051000            <1> 		add ax, 16
 10384 00007FD6 EBF4                <1> 		jmp lengthtesttext
 10385                              <1> 	donetesttextlength:
 10386 00007FD8 6689CB              <1> 		mov bx, cx
 10387 00007FDB 6681C30F00          <1> 		add bx, 15
 10388 00007FE0 813D[B17D0000]0100- <1> 		cmp dword [dragging], 1
 10389 00007FE8 0000                <1>
 10390 00007FEA 7468                <1> 		je dragtext
 10391 00007FEC 813D[B17D0000]0000- <1> 		cmp dword [dragging], 0
 10392 00007FF4 0000                <1>
 10393 00007FF6 7411                <1> 		je nodragtextcheck
 10394 00007FF8 3935[B17D0000]      <1> 		cmp dword [dragging], esi
 10395 00007FFE 0F8568020000        <1> 		jne near nexticonsel
 10396 00008004 E94B000000          <1> 		jmp dragtext
 10397                              <1> 	nodragtextcheck:
 10398 00008009 663915[17590000]    <1> 		cmp [mousecursorposition], dx
 10399 00008010 0F8256020000        <1> 		jb near nexticonsel
 10400 00008016 663905[17590000]    <1> 		cmp [mousecursorposition], ax
 10401 0000801D 0F8749020000        <1> 		ja near nexticonsel
 10402 00008023 66390D[19590000]    <1> 		cmp [mousecursorposition + 2], cx
 10403 0000802A 0F823C020000        <1> 		jb near nexticonsel
 10404 00008030 66391D[19590000]    <1> 		cmp [mousecursorposition + 2], bx
 10405 00008037 0F872F020000        <1> 		ja near nexticonsel
 10406 0000803D 668B460A            <1> 		mov ax, [esi + 10]
 10407 00008041 66250100            <1> 		and ax, 1
 10408 00008045 663D0100            <1> 		cmp ax, 1
 10409 00008049 0F84AB000000        <1> 		je near unselecttext
 10410 0000804F E986000000          <1> 		jmp nodragtext
 10411                              <1> 	dragtext:
 10412 00008054 663915[13590000]    <1> 		cmp [lastmouseposition], dx
 10413 0000805B 0F820B020000        <1> 		jb near nexticonsel
 10414 00008061 663905[13590000]    <1> 		cmp [lastmouseposition], ax
 10415 00008068 0F87FE010000        <1> 		ja near nexticonsel
 10416 0000806E 66390D[15590000]    <1> 		cmp [lastmouseposition + 2], cx
 10417 00008075 0F82F1010000        <1> 		jb near nexticonsel
 10418 0000807B 66391D[15590000]    <1> 		cmp [lastmouseposition + 2], bx
 10419 00008082 0F87E4010000        <1> 		ja near nexticonsel
 10420 00008088 668B460A            <1> 		mov ax, [esi + 10]
 10421 0000808C 2410                <1> 		and al, 00010000b
 10422 0000808E 663D1000            <1> 		cmp ax, 00010000b
 10423 00008092 0F8442000000        <1> 		je near nodragtext
 10424 00008098 8935[B17D0000]      <1> 		mov [dragging], esi
 10425 0000809E 662B15[13590000]    <1> 		sub dx, [lastmouseposition]
 10426 000080A5 660315[17590000]    <1> 		add dx, [mousecursorposition]
 10427 000080AC 66030D[19590000]    <1> 		add cx, [mousecursorposition + 2]
 10428 000080B3 662B0D[15590000]    <1> 		sub cx, [lastmouseposition + 2]
 10429 000080BA 663B15[21570000]    <1> 		cmp dx, [resolutionx2]
 10430 000080C1 7607                <1> 		jbe chkyresdrgtxt
 10431 000080C3 668B15[17590000]    <1> 		mov dx, [mousecursorposition]
 10432                              <1> 	chkyresdrgtxt:
 10433 000080CA 663B0D[35560000]    <1> 		cmp cx, [resolutiony]
 10434 000080D1 7607                <1> 		jbe nodragtext
 10435 000080D3 668B0D[19590000]    <1> 		mov cx, [mousecursorposition + 2]
 10436                              <1> 	nodragtext:
 10437 000080DA 66814E0A0100        <1> 		or word [esi + 10], 1
 10438 000080E0 8B5E0C              <1> 		mov ebx, [esi + 12]
 10439 000080E3 891D[01860000]      <1> 		mov [codepointer], ebx
 10440 000080E9 668B460A            <1> 		mov ax, [esi + 10]
 10441 000080ED 8B7602              <1> 		mov esi, [esi + 2]
 10442 000080F0 E8D1F4FFFF          <1> 		call showstring
 10443 000080F5 E98B010000          <1> 		jmp doneiconsel
 10444                              <1> 	unselecttext:
 10445 000080FA 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10446 00008100 8B5E0C              <1> 		mov ebx, [esi + 12]
 10447 00008103 668B460A            <1> 		mov ax, [esi + 10]
 10448 00008107 8B7602              <1> 		mov esi, [esi + 2]
 10449 0000810A C705[01860000]0000- <1> 		mov dword [codepointer], 0
 10450 00008112 0000                <1>
 10451 00008114 E8ADF4FFFF          <1> 		call showstring
 10452 00008119 E967010000          <1> 		jmp doneiconsel
 10453                              <1> windowselect:
 10454 0000811E 8B7E02              <1> 		mov edi, [esi + 2]
 10455 00008121 668B5606            <1> 		mov dx, [esi + 6]
 10456 00008125 6689D0              <1> 		mov ax, dx
 10457 00008128 668B4E08            <1> 		mov cx, [esi + 8]
 10458 0000812C 6689CB              <1> 		mov bx, cx
 10459 0000812F 6681C31000          <1> 		add bx, 16
 10460 00008134 813D[B17D0000]0100- <1> 		cmp dword [dragging], 1
 10461 0000813C 0000                <1>
 10462 0000813E 746D                <1> 		je dragwin
 10463 00008140 813D[B17D0000]0000- <1> 		cmp dword [dragging], 0
 10464 00008148 0000                <1>
 10465 0000814A 7411                <1> 		je nodragwincheck
 10466 0000814C 3935[B17D0000]      <1> 		cmp dword [dragging], esi
 10467 00008152 0F8514010000        <1> 		jne near nexticonsel
 10468 00008158 E950000000          <1> 		jmp dragwin
 10469                              <1> 	nodragwincheck:
 10470 0000815D 663905[17590000]    <1> 		cmp [mousecursorposition], ax
 10471 00008164 0F8202010000        <1> 		jb near nexticonsel
 10472 0000816A 660307              <1> 		add ax, [edi]
 10473 0000816D 660307              <1> 		add ax, [edi]
 10474 00008170 663905[17590000]    <1> 		cmp [mousecursorposition], ax
 10475 00008177 0F87EF000000        <1> 		ja near nexticonsel
 10476 0000817D 66390D[19590000]    <1> 		cmp [mousecursorposition + 2], cx
 10477 00008184 0F82E2000000        <1> 		jb near nexticonsel
 10478 0000818A 66391D[19590000]    <1> 		cmp [mousecursorposition + 2], bx
 10479 00008191 0F87D5000000        <1> 		ja near nexticonsel
 10480 00008197 662D1400            <1> 		sub ax, 20
 10481 0000819B 663905[17590000]    <1> 		cmp [mousecursorposition], ax
 10482 000081A2 0F87A4000000        <1> 		ja near killwin
 10483 000081A8 E98B000000          <1> 		jmp nodragwin
 10484                              <1> 	dragwin:
 10485 000081AD 663905[13590000]    <1> 		cmp [lastmouseposition], ax
 10486 000081B4 0F82B2000000        <1> 		jb near nexticonsel
 10487 000081BA 660307              <1> 		add ax, [edi]
 10488 000081BD 660307              <1> 		add ax, [edi]
 10489 000081C0 663905[13590000]    <1> 		cmp [lastmouseposition], ax
 10490 000081C7 0F879F000000        <1> 		ja near nexticonsel
 10491 000081CD 66390D[15590000]    <1> 		cmp [lastmouseposition + 2], cx
 10492 000081D4 0F8292000000        <1> 		jb near nexticonsel
 10493 000081DA 66391D[15590000]    <1> 		cmp [lastmouseposition + 2], bx
 10494 000081E1 0F8785000000        <1> 		ja near nexticonsel
 10495 000081E7 8935[B17D0000]      <1> 		mov [dragging], esi
 10496 000081ED 803D[15830000]01    <1> 		cmp byte [windrag], 1
 10497 000081F4 7706                <1> 		ja .nochangewindrag
 10498 000081F6 FE05[15830000]      <1> 		inc byte [windrag]
 10499                              <1> 	.nochangewindrag:
 10500 000081FC 662B15[13590000]    <1> 		sub dx, [lastmouseposition]
 10501 00008203 660315[17590000]    <1> 		add dx, [mousecursorposition]
 10502 0000820A 66030D[19590000]    <1> 		add cx, [mousecursorposition + 2]
 10503 00008211 662B0D[15590000]    <1> 		sub cx, [lastmouseposition + 2]
 10504 00008218 663B15[21570000]    <1> 		cmp dx, [resolutionx2]
 10505 0000821F 7607                <1> 		jbe chkyresdrgwin
 10506 00008221 668B15[17590000]    <1> 		mov dx, [mousecursorposition]
 10507                              <1> 	chkyresdrgwin:
 10508 00008228 663B0D[35560000]    <1> 		cmp cx, [resolutiony]
 10509 0000822F 7607                <1> 		jbe nodragwin
 10510 00008231 668B0D[19590000]    <1> 		mov cx, [mousecursorposition + 2]
 10511                              <1> 	nodragwin:
 10512 00008238 8B5E0C              <1> 		mov ebx, [esi + 12]
 10513 0000823B 668B460A            <1> 		mov ax, [esi + 10]
 10514 0000823F 8B7602              <1> 		mov esi, [esi + 2]
 10515 00008242 E811F6FFFF          <1> 		call showwindow
 10516 00008247 E939000000          <1> 		jmp doneiconsel
 10517                              <1> 	killwin:
 10518 0000824C 66C7060000          <1> 		mov word [esi], 0
 10519 00008251 C605[D5230000]00    <1> 		mov byte [termguion], 0
 10520 00008258 E8DBECFFFF          <1> 		call guiclear
 10521 0000825D E826EDFFFF          <1> 		call reloadallgraphics
 10522 00008262 E86DEAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10523 00008267 E949E6FFFF          <1> 		jmp guistart
 10524                              <1> 	nexticonsel:
 10525 0000826C 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10526 00008272 81C610000000        <1> 		add esi, 16
 10527 00008278 81FE[9CCC0300]      <1> 		cmp esi, graphicstableend
 10528 0000827E 7305                <1> 		jae doneiconsel
 10529 00008280 E9ADFBFFFF          <1> 		jmp clicon2
 10530                              <1> 	doneiconsel:
 10531 00008285 813D[B17D0000]0100- <1> 		cmp dword [dragging], 1
 10532 0000828D 0000                <1>
 10533 0000828F 731A                <1> 		jae doneiconsel2
 10534 00008291 A2[15830000]        <1> 		mov [windrag], al
 10535 00008296 813D[01860000]0000- <1> 		cmp dword [codepointer], 0
 10536 0000829E 0000                <1>
 10537 000082A0 7409                <1> 		je doneiconsel2
 10538 000082A2 8B1D[01860000]      <1> 		mov ebx, [codepointer]
 10539 000082A8 FFD3                <1> 		call ebx
 10540 000082AA C3                  <1> 		ret
 10541                              <1> 	doneiconsel2:
 10542 000082AB A0[285A0000]        <1> 		mov al, [LBUTTON]
 10543 000082B0 A2[AF7D0000]        <1> 		mov [pLBUTTON], al
 10544 000082B5 A0[295A0000]        <1> 		mov al, [RBUTTON]
 10545 000082BA A2[B07D0000]        <1> 		mov [pRBUTTON], al
 10546 000082BF 813D[B17D0000]0100- <1> 		cmp dword [dragging], 1
 10547 000082C7 0000                <1>
 10548 000082C9 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10549 000082CF E800EAFFFF          <1> 		call switchmousepos2
 10550 000082D4 803D[15830000]01    <1> 		cmp byte [windrag], 1
 10551 000082DB 7305                <1> 		jae noclearcursorcl
 10552 000082DD E83AE9FFFF          <1> 		call clearmousecursor
 10553                              <1> noclearcursorcl:
 10554 000082E2 E8A1ECFFFF          <1> 		call reloadallgraphics
 10555                              <1> noreloadgraphicsclick:
 10556 000082E7 30E4                <1> 		xor ah, ah
 10557 000082E9 31C9                <1> 		xor ecx, ecx
 10558 000082EB 31D2                <1> 		xor edx, edx
 10559 000082ED B001                <1> 		mov al, 1
 10560 000082EF 668B15[17590000]    <1> 		mov dx, [mousecursorposition]
 10561 000082F6 668B0D[19590000]    <1> 		mov cx, [mousecursorposition + 2]
 10562 000082FD 66BBE738            <1> 		mov bx, 0011100011100111b
 10563 00008301 C605[AB7D0000]01    <1> 		mov byte [showcursorfonton], 1
 10564 00008308 E84AF3FFFF          <1> 		call showfontvesa
 10565 0000830D C605[AB7D0000]00    <1> 		mov byte [showcursorfonton], 0
 10566 00008314 C3                  <1> 		ret
 10567 00008315 00                  <1> windrag db 0
 10568 00008316 00000000            <1> lastdrag dw 0,0
 10569 0000831A 00000000            <1> grpctblpos dw 0,0
 10570                              <1> 
 10571                              <1> 
 10572                              <1> 
 10573 0000831E 00<rept>            <1> grphbuf times 16 db 0
 10574                              <1> 	graphicsadd:
 10575 0000832E BF[9CCA0300]        <1> 		mov edi, graphicstable
 10576                              <1> 	shwgrph1:
 10577 00008333 397702              <1> 		cmp dword [edi + 2], esi
 10578 00008336 7414                <1> 		je showgraphicsreplace2
 10579 00008338 81C710000000        <1> 		add edi, 16
 10580 0000833E 81FF[9CCC0300]      <1> 		cmp edi, graphicstableend
 10581 00008344 0F8337020000        <1> 		jae near showgraphicsnew
 10582 0000834A EBE7                <1> 		jmp shwgrph1
 10583                              <1> 	showgraphicsreplace2:
 10584 0000834C 8935[20830000]      <1> 		mov [grphbuf + 2], esi
 10585 00008352 668915[24830000]    <1> 		mov [grphbuf + 6], dx
 10586 00008359 66890D[26830000]    <1> 		mov [grphbuf + 8], cx
 10587 00008360 891D[2A830000]      <1> 		mov [grphbuf + 12], ebx
 10588 00008366 30FF                <1> 		xor bh, bh
 10589 00008368 88E3                <1> 		mov bl, ah
 10590 0000836A 30E4                <1> 		xor ah, ah
 10591 0000836C 66A3[28830000]      <1> 		mov [grphbuf + 10], ax	
 10592 00008372 66891D[1E830000]    <1> 		mov [grphbuf], bx
 10593 00008379 66A1[1E830000]      <1> 		mov ax, [grphbuf]
 10594 0000837F 663D0100            <1> 		cmp ax, 1
 10595 00008383 0F8419000000        <1> 		je near replaceicon
 10596 00008389 663D0200            <1> 		cmp ax, 2
 10597 0000838D 0F8493000000        <1> 		je near replacestring
 10598 00008393 663D0300            <1> 		cmp ax, 3
 10599 00008397 0F840F010000        <1> 		je near replacewindow
 10600 0000839D E9BC010000          <1> 		jmp showgraphicsreplace
 10601                              <1> 	replaceicon:
 10602 000083A2 893D[B57D0000]      <1> 		mov [lastpos], edi
 10603 000083A8 8935[B97D0000]      <1> 		mov [lastpos + 4], esi
 10604 000083AE 8B7702              <1> 		mov esi, [edi + 2]
 10605 000083B1 668B5F0C            <1> 		mov bx, [edi + 12]
 10606 000083B5 668B5706            <1> 		mov dx, [edi + 6]
 10607 000083B9 668B4F08            <1> 		mov cx, [edi + 8]
 10608 000083BD 668B06              <1> 		mov ax, [esi]
 10609 000083C0 66A3[BD7D0000]      <1> 		mov [colorbuf], ax
 10610 000083C6 66A1[846F0000]      <1> 		mov ax, [background]
 10611 000083CC 668906              <1> 		mov [esi], ax
 10612 000083CF 8B5F0C              <1> 		mov ebx, [edi + 12]
 10613 000083D2 668B470A            <1> 		mov ax, [edi + 10]
 10614 000083D6 2401                <1> 		and al, 1
 10615 000083D8 A2[05860000]        <1> 		mov [iconselected], al
 10616 000083DD 668B470A            <1> 		mov ax, [edi + 10]
 10617 000083E1 E864E9FFFF          <1> 		call showicon2
 10618 000083E6 8B3D[B57D0000]      <1> 		mov edi, [lastpos]
 10619 000083EC 8B7702              <1> 		mov esi, [edi + 2]
 10620 000083EF 66A1[BD7D0000]      <1> 		mov ax, [colorbuf]
 10621 000083F5 668906              <1> 		mov [esi], ax
 10622 000083F8 8B35[B97D0000]      <1> 		mov esi, [lastpos + 4]
 10623 000083FE 668B15[24830000]    <1> 		mov dx, [grphbuf + 6]
 10624 00008405 668B0D[26830000]    <1> 		mov cx, [grphbuf + 8]
 10625 0000840C 668B1D[1E830000]    <1> 		mov bx, [grphbuf]
 10626 00008413 66A1[28830000]      <1> 		mov ax, [grphbuf + 10]
 10627 00008419 88DC                <1> 		mov ah, bl
 10628 0000841B 8B1D[2A830000]      <1> 		mov ebx, [grphbuf + 12]
 10629 00008421 E938010000          <1> 		jmp showgraphicsreplace
 10630                              <1> 	replacestring:
 10631 00008426 893D[B57D0000]      <1> 		mov [lastpos], edi
 10632 0000842C 8935[B97D0000]      <1> 		mov [lastpos + 4], esi
 10633 00008432 8B5F0C              <1> 		mov ebx, [edi + 12]
 10634 00008435 8B7702              <1> 		mov esi, [edi + 2]
 10635 00008438 668B5706            <1> 		mov dx, [edi + 6]
 10636 0000843C 668B4F08            <1> 		mov cx, [edi + 8]
 10637 00008440 66A1[46760000]      <1> 		mov ax, [colorfont2]
 10638 00008446 66A3[BD7D0000]      <1> 		mov [colorbuf], ax
 10639 0000844C 66A1[846F0000]      <1> 		mov ax, [background]
 10640 00008452 66A3[46760000]      <1> 		mov [colorfont2], ax		
 10641 00008458 8B5F0C              <1> 		mov ebx, [edi + 12]
 10642 0000845B 668B470A            <1> 		mov ax, [edi + 10]
 10643 0000845F 2401                <1> 		and al, 1
 10644 00008461 A2[AD7D0000]        <1> 		mov [mouseselecton], al
 10645 00008466 668B470A            <1> 		mov ax, [edi + 10]
 10646 0000846A E86AF1FFFF          <1> 		call showstring2
 10647 0000846F 66A1[BD7D0000]      <1> 		mov ax, [colorbuf]
 10648 00008475 66A3[46760000]      <1> 		mov [colorfont2], ax
 10649 0000847B 8B3D[B57D0000]      <1> 		mov edi, [lastpos]
 10650 00008481 8B7702              <1> 		mov esi, [edi + 2]
 10651 00008484 668B15[24830000]    <1> 		mov dx, [grphbuf + 6]
 10652 0000848B 668B0D[26830000]    <1> 		mov cx, [grphbuf + 8]
 10653 00008492 668B1D[1E830000]    <1> 		mov bx, [grphbuf]
 10654 00008499 66A1[28830000]      <1> 		mov ax, [grphbuf + 10]
 10655 0000849F 88DC                <1> 		mov ah, bl
 10656 000084A1 8B1D[2A830000]      <1> 		mov ebx, [grphbuf + 12]
 10657 000084A7 E9B2000000          <1> 		jmp showgraphicsreplace
 10658                              <1> 	replacewindow:
 10659 000084AC 893D[B57D0000]      <1> 		mov [lastpos], edi
 10660 000084B2 8935[B97D0000]      <1> 		mov [lastpos + 4], esi
 10661 000084B8 8B7702              <1> 		mov esi, [edi + 2]
 10662 000084BB 8B3D[42780000]      <1> 		mov edi, [windowbufloc]
 10663 000084C1 31D2                <1> 		xor edx, edx
 10664 000084C3 668B15[21570000]    <1> 		mov dx, [resolutionx2]
 10665 000084CA C1E204              <1> 		shl edx, 4
 10666 000084CD 29D7                <1> 		sub edi, edx
 10667 000084CF 31D2                <1> 		xor edx, edx
 10668 000084D1 668B16              <1> 		mov dx, [esi]
 10669 000084D4 660316              <1> 		add dx, [esi]
 10670 000084D7 668B4E02            <1> 		mov cx, [esi + 2]
 10671 000084DB 6681C11000          <1> 		add cx, 16
 10672 000084E0 66A1[846F0000]      <1> 		mov ax, [background]
 10673 000084E6 803D[15830000]01    <1> 		cmp byte [windrag], 1
 10674 000084ED 7604                <1> 		jbe clearwindow
 10675 000084EF 662B4E02            <1> 		sub cx, [esi + 2]
 10676                              <1> 	clearwindow:
 10677                              <1> 		%ifdef gui.background
 10678                              <1> 			cmp dword [backgroundimage], 0
 10679                              <1> 			je .noback
 10680                              <1> 			push esi
 10681                              <1> 			mov esi, [backgroundimage]
 10682                              <1> 			sub edi, [physbaseptr]
 10683                              <1> 			add esi, edi
 10684                              <1> 			add edi, [physbaseptr]
 10685                              <1> 			mov ax, [esi]
 10686                              <1> 			pop esi
 10687                              <1> 		.noback:
 10688                              <1> 		%endif
 10689 000084F3 668907              <1> 		mov [edi], ax
 10690 000084F6 81C702000000        <1> 		add edi, 2
 10691 000084FC 81EA02000000        <1> 		sub edx, 2
 10692 00008502 81FA00000000        <1> 		cmp edx, 0
 10693 00008508 75E9                <1> 		jne clearwindow
 10694 0000850A 6649                <1> 		dec cx
 10695 0000850C 668B15[21570000]    <1> 		mov dx, [resolutionx2]
 10696 00008513 662B16              <1> 		sub dx, [esi]
 10697 00008516 662B16              <1> 		sub dx, [esi]
 10698 00008519 01D7                <1> 		add edi, edx
 10699 0000851B 668B16              <1> 		mov dx, [esi]
 10700 0000851E 660316              <1> 		add dx, [esi]
 10701 00008521 6681F90000          <1> 		cmp cx, 0
 10702 00008526 75CB                <1> 		jne clearwindow
 10703                              <1> 	endwindowclear:
 10704 00008528 C605[D6230000]00    <1> 		mov byte [termcopyon], 0
 10705 0000852F 8B3D[B57D0000]      <1> 		mov edi, [lastpos]
 10706 00008535 8B35[20830000]      <1> 		mov esi, [grphbuf + 2]
 10707 0000853B 668B15[24830000]    <1> 		mov dx, [grphbuf + 6]
 10708 00008542 668B0D[26830000]    <1> 		mov cx, [grphbuf + 8]
 10709 00008549 668B1D[1E830000]    <1> 		mov bx, [grphbuf]
 10710 00008550 66A1[28830000]      <1> 		mov ax, [grphbuf + 10]
 10711 00008556 88DC                <1> 		mov ah, bl
 10712 00008558 8B1D[2A830000]      <1> 		mov ebx, [grphbuf + 12]
 10713                              <1> 	showgraphicsreplace:
 10714 0000855E 897702              <1> 		mov [edi + 2], esi
 10715 00008561 66895706            <1> 		mov [edi + 6], dx
 10716 00008565 66894F08            <1> 		mov [edi + 8], cx
 10717 00008569 895F0C              <1> 		mov [edi + 12], ebx
 10718 0000856C 30FF                <1> 		xor bh, bh
 10719 0000856E 88E3                <1> 		mov bl, ah
 10720 00008570 30E4                <1> 		xor ah, ah
 10721 00008572 6689470A            <1> 		mov [edi + 10], ax
 10722 00008576 66891F              <1> 		mov [edi], bx
 10723 00008579 8B5F0C              <1> 		mov ebx, [edi + 12]
 10724 0000857C 668B470A            <1> 		mov ax, [edi + 10]
 10725 00008580 C3                  <1> 		ret
 10726                              <1> 	showgraphicsnew:
 10727 00008581 BF[9CCA0300]        <1> 		mov edi, graphicstable
 10728                              <1> 	shwgrph2:
 10729 00008586 66813F0000          <1> 		cmp word [edi], 0
 10730 0000858B 74D1                <1> 		je showgraphicsreplace
 10731 0000858D 81C710000000        <1> 		add edi, 16
 10732 00008593 81FF[9CCC0300]      <1> 		cmp edi, graphicstableend
 10733 00008599 72EB                <1> 		jb shwgrph2
 10734                              <1> 	showgraphicsdone:
 10735 0000859B C3                  <1> 		ret
 10736                              <1> 	
 10737                              <1> putpixel: ;color in si, point is (dx,cx)
 10738                              <1> 		;destroys edi, ebx, eax
 10739 0000859C 6650                <1> 	push ax
 10740 0000859E 6653                <1> 	push bx
 10741 000085A0 31C0                <1> 	xor eax, eax
 10742 000085A2 31DB                <1> 	xor ebx, ebx
 10743 000085A4 31FF                <1> 	xor edi, edi
 10744 000085A6 668B1D[35560000]    <1> 	mov bx, [resolutiony]
 10745 000085AD 66A1[33560000]      <1> 	mov ax, [resolutionx]
 10746 000085B3 6639C2              <1> 	cmp dx, ax
 10747 000085B6 7720                <1> 	ja .doneput
 10748 000085B8 66D1E0              <1> 	shl ax, 1
 10749 000085BB 6639D9              <1> 	cmp cx, bx
 10750 000085BE 7718                <1> 	ja .doneput
 10751 000085C0 6689CB              <1> 	mov bx, cx
 10752 000085C3 52                  <1> 	push edx
 10753 000085C4 F7E3                <1> 	mul ebx
 10754 000085C6 5A                  <1> 	pop edx
 10755 000085C7 6601D7              <1> 	add di, dx
 10756 000085CA 6601D7              <1> 	add di, dx
 10757 000085CD 01C7                <1> 	add edi, eax
 10758 000085CF 033D[49560000]      <1> 	add edi, [physbaseptr]
 10759 000085D5 668937              <1> 	mov [edi], si
 10760                              <1> .doneput:
 10761 000085D8 665B                <1> 	pop bx
 10762 000085DA 6658                <1> 	pop ax
 10763 000085DC C3                  <1> 	ret
 10764                              <1> 	
 10765                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10766 000085DD 31FF                <1> 	xor edi, edi
 10767 000085DF 31C0                <1> 	xor eax, eax
 10768 000085E1 31DB                <1> 	xor ebx, ebx
 10769 000085E3 668B1D[21570000]    <1> 	mov bx, [resolutionx2]
 10770 000085EA 6689D7              <1> 	mov di, dx
 10771 000085ED 6601D7              <1> 	add di, dx
 10772 000085F0 6689C8              <1> 	mov ax, cx
 10773 000085F3 F7E3                <1> 	mul ebx
 10774 000085F5 01C7                <1> 	add edi, eax
 10775 000085F7 033D[49560000]      <1> 	add edi, [physbaseptr]
 10776 000085FD C3                  <1> 	ret
 10777                              <1> 
 10778 000085FE 00                  <1> 	mouseon db 0
 10779 000085FF 0000                <1> 	icon dw 0	;pointer to icon
 10780 00008601 00000000            <1> 	codepointer dd 0 ;pointer to code
 10781 00008605 00                  <1> 	iconselected db 0
 10782                                  %endif
 10783                                  %ifdef network.included
 10784                                  	%include "source/network.asm"
 10785                                  %endif
 10786                                      %include "source/data.asm"
 10787 00008606 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 10788 0000860E 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 10789 00008616 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 10790 0000861F 6E640A00            <1>
 10791 00008623 757365726E616D653A- <1> 	userask db	"username:",0
 10792 0000862C 00                  <1>
 10793 0000862D 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10794 00008636 00                  <1>
 10795 00008637 40                  <1> 	computer db	"@"
 10796                              <1> %ifdef io.serial
 10797                              <1> 	computername db	"SollerOS.",io.serial," ",0
 10798                              <1> %else
 10799 00008638 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 10800 00008641 00                  <1>
 10801                              <1> %endif
 10802 00008642 5D242000            <1> 	endprompt db "]$ ",0
 10803 00008646 0D                  <1> 	crlf 	db	13
 10804 00008647 0A00                <1> 	line	db	10,0
 10805                              <1> 	userlst:
 10806 00008649 726F6F7400          <1> 			db "root",0
 10807 0000864E 617765736F6D65706F- <1> 			db "awesomepower",0
 10808 00008657 77657200            <1>
 10809 0000865B 7573657200          <1> 			db "user",0
 10810 00008660 70617373776F726400  <1> 			db "password",0
 10811 00008669 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 10812 0000866B 00                  <1> 			db 0
 10813                              <1> 	userlstend:
 10814                              <1> 	
 10815 0000866C 00                  <1> 	guion db 0
 10816 0000866D 00                  <1> 	DriveNumber db 0
 10817 0000866E 00000000            <1> 	lbaad dd 0
 10818 00008672 0000000000000000    <1> 	initialtsc dd 0,0
 10819 0000867A 0000000000000000    <1> 	lasttsc dd 0,0
 10820 00008682 00<rept>            <1> 	memlistbuf times 576 db 0
 10821 000088C2 00000000            <1> 	memlistend: dd 0
 10822                              <1> %ifdef io.serial
 10823                              <1> %else
 10824                              <1> fonts:
 10825                              <1> %ifdef font.unicode
 10826 000088C2 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 10827                              <1> %else
 10828                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 10829                              <1> %endif
 10830                              <1> fontend:
 10831                              <1> %endif
 10832                              <1> osend:	;this is the end of the operating system's space on disk
 10833                                  %ifdef disk.none
 10834                                  	diskfileindex:
 10835                                  	enddiskfileindex:
 10836                                      %include "source/bss.asm"
 10837                                  %else
 10838                                      %include "build/fileindex.asm"
 10839                              <1> diskfileindex:
 10840 000388C6 33642E656C6600      <1> db "3d.elf",0
 10841 000388CD C6010000            <1> dd (f0-$$)/512
 10842 000388D1 37000000            <1> dd (f1-f0)/512
 10843 000388D5 61737465726F696473- <1> db "asteroids.elf",0
 10844 000388DE 2E656C6600          <1>
 10845 000388E3 FD010000            <1> dd (f1-$$)/512
 10846 000388E7 27000000            <1> dd (f2-f1)/512
 10847 000388EB 626F6F742E736800    <1> db "boot.sh",0
 10848 000388F3 24020000            <1> dd (f2-$$)/512
 10849 000388F7 01000000            <1> dd (f3-f2)/512
 10850 000388FB 646F73746573742E63- <1> db "dostest.com",0
 10851 00038904 6F6D00              <1>
 10852 00038907 25020000            <1> dd (f3-$$)/512
 10853 0003890B 01000000            <1> dd (f4-f3)/512
 10854 0003890F 6578656300          <1> db "exec",0
 10855 00038914 26020000            <1> dd (f4-$$)/512
 10856 00038918 01000000            <1> dd (f5-f4)/512
 10857 0003891C 66696E616C636F756E- <1> db "finalcount.sn",0
 10858 00038925 742E736E00          <1>
 10859 0003892A 27020000            <1> dd (f5-$$)/512
 10860 0003892E 01000000            <1> dd (f6-f5)/512
 10861 00038932 666F726B00          <1> db "fork",0
 10862 00038937 28020000            <1> dd (f6-$$)/512
 10863 0003893B 01000000            <1> dd (f7-f6)/512
 10864 0003893F 677261766974792E65- <1> db "gravity.elf",0
 10865 00038948 6C6600              <1>
 10866 0003894B 29020000            <1> dd (f7-$$)/512
 10867 0003894F 5E000000            <1> dd (f8-f7)/512
 10868 00038953 6775697465737400    <1> db "guitest",0
 10869 0003895B 87020000            <1> dd (f8-$$)/512
 10870 0003895F 03000000            <1> dd (f9-f8)/512
 10871 00038963 696E7400            <1> db "int",0
 10872 00038967 8A020000            <1> dd (f9-$$)/512
 10873 0003896B 01000000            <1> dd (f10-f9)/512
 10874 0003896F 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10875 00038978 2E736E00            <1>
 10876 0003897C 8B020000            <1> dd (f10-$$)/512
 10877 00038980 01000000            <1> dd (f11-f10)/512
 10878 00038984 6D6172696F2E736E00  <1> db "mario.sn",0
 10879 0003898D 8C020000            <1> dd (f11-$$)/512
 10880 00038991 01000000            <1> dd (f12-f11)/512
 10881 00038995 72617974726163652E- <1> db "raytrace.elf",0
 10882 0003899E 656C6600            <1>
 10883 000389A2 8D020000            <1> dd (f12-$$)/512
 10884 000389A6 1E000000            <1> dd (f13-f12)/512
 10885 000389AA 736F6E676F74696D65- <1> db "songotime.sn",0
 10886 000389B3 2E736E00            <1>
 10887 000389B7 AB020000            <1> dd (f13-$$)/512
 10888 000389BB 01000000            <1> dd (f14-f13)/512
 10889 000389BF 73736500            <1> db "sse",0
 10890 000389C3 AC020000            <1> dd (f14-$$)/512
 10891 000389C7 02000000            <1> dd (f15-f14)/512
 10892 000389CB 74656C7900          <1> db "tely",0
 10893 000389D0 AE020000            <1> dd (f15-$$)/512
 10894 000389D4 01000000            <1> dd (f16-f15)/512
 10895 000389D8 756E667300          <1> db "unfs",0
 10896 000389DD AF020000            <1> dd (f16-$$)/512
 10897 000389E1 02000000            <1> dd (f17-f16)/512
 10898 000389E5 766963746F72792E77- <1> db "victory.wav",0
 10899 000389EE 617600              <1>
 10900 000389F1 B1020000            <1> dd (f17-$$)/512
 10901 000389F5 16000000            <1> dd (f18-f17)/512
 10902 000389F9 5F696D672E62696E00  <1> db "_img.bin",0
 10903 00038A02 C7020000            <1> dd (f18-$$)/512
 10904 00038A06 0C000000            <1> dd (f19-f18)/512
 10905                              <1> enddiskfileindex:
 10906                              <1> 
 10907                                      %include "source/bss.asm"
 10908 00038A0A 00<rept>            <1> align 512, db 0
 10909                              <1> bssstart equ $
 10910                              <1> bsscopy equ $
 10911                              <1> initialstack equ bsscopy
 10912                              <1> stackend equ initialstack + 8192
 10913                              <1> sigtable equ stackend + 4
 10914                              <1> fileindex equ sigtable + 4
 10915                              <1> fileindexend equ fileindex + 1024
 10916                              <1> previousstack equ fileindexend
 10917                              <1> lastfolderloc equ previousstack + 4
 10918                              <1> currentfolderloc equ lastfolderloc + 4
 10919                              <1> currentfolder equ currentfolderloc + 4
 10920                              <1> currentfolderend equ currentfolder + 512
 10921                              <1> uid equ currentfolderend
 10922                              <1> ranboot equ uid + 4
 10923                              <1> IFON equ ranboot + 1
 10924                              <1> IFTRUE equ IFON + 1
 10925                              <1> BATCHPOS equ IFTRUE + 100
 10926                              <1> BATCHISON equ BATCHPOS + 4
 10927                              <1> LOOPON equ BATCHISON + 1
 10928                              <1> LOOPPOS	equ LOOPON + 1
 10929                              <1> variables equ LOOPPOS + 4
 10930                              <1> varend equ variables + 4096
 10931                              <1> buftxt2 equ varend
 10932                              <1> buftxt equ buftxt2 + 1024
 10933                              <1> buftxtend equ buftxt + 1024
 10934                              <1> buf2 equ buftxtend
 10935                              <1> numbuf equ buf2 + 20
 10936                              <1> %ifdef io.serial
 10937                              <1> 	lastcommandpos equ numbuf
 10938                              <1> %else
 10939                              <1> 	%ifdef gui.included
 10940                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10941                              <1> 		graphicstableend equ graphicstable + 512
 10942                              <1> 		%ifdef gui.background
 10943                              <1> 			backgroundbuffer equ graphicstableend
 10944                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10945                              <1> 			mousecolorbuf equ backgroundbufferend
 10946                              <1> 		%else
 10947                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10948                              <1> 		%endif
 10949                              <1> 		mcolorend equ mousecolorbuf + 256
 10950                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 10951                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10952                              <1> 		videobuf2 equ videobufend
 10953                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10954                              <1> 	%else
 10955                              <1> 		videobuf equ numbuf
 10956                              <1> 		videobufend equ videobuf + 80*30*4
 10957                              <1> 		videobuf2 equ videobufend
 10958                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10959                              <1> 	%endif
 10960                              <1> 	lastcommandpos: equ videobuf2end
 10961                              <1> %endif
 10962                              <1> 	commandbufpos: equ lastcommandpos + 4
 10963                              <1> 	commandlistentries: equ commandbufpos + 4
 10964                              <1> 	commandsentered: equ commandlistentries + 4
 10965                              <1> 	commandbuf: equ commandsentered + 4
 10966                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10967                              <1> %ifdef network.included
 10968                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10969                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 10970                              <1> 	rbuffoverflow equ rbuffend + 1500
 10971                              <1> %else
 10972                              <1> 	rbuffstart equ commandbufend
 10973                              <1> 	rbuffend equ commandbufend
 10974                              <1> %endif
 10975                              <1> %ifdef threads.included
 10976                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 10977                              <1> 	threadlistend: equ threadlist + 1024*4
 10978                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10979                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 10980                              <1> 	bssend equ stack1 + 1024*2048
 10981                              <1> %else
 10982                              <1> 	bssend equ rbuffend
 10983                              <1> %endif
 10984                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10985                                      %include "build/files.asm"
 10986                              <1> align 512,db 0
 10987                              <1> f0:
 10988 00038A0A <incbin>            <1> incbin "included/3d.elf"
 10989 0003F9C0 00<rept>            <1> align 512,db 0
 10990                              <1> f1:
 10991 0003F9C0 <incbin>            <1> incbin "included/asteroids.elf"
 10992 00044640 00<rept>            <1> align 512,db 0
 10993                              <1> f2:
 10994 00044640 <incbin>            <1> incbin "included/boot.sh"
 10995 00044918 00<rept>            <1> align 512,db 0
 10996                              <1> f3:
 10997 00044918 <incbin>            <1> incbin "included/dostest.com"
 10998 00044B31 00<rept>            <1> align 512,db 0
 10999                              <1> f4:
 11000 00044B31 <incbin>            <1> incbin "included/exec"
 11001 00044CED 00<rept>            <1> align 512,db 0
 11002                              <1> f5:
 11003 00044CED <incbin>            <1> incbin "included/finalcount.sn"
 11004 00044F02 00<rept>            <1> align 512,db 0
 11005                              <1> f6:
 11006 00044F02 <incbin>            <1> incbin "included/fork"
 11007 00045158 00<rept>            <1> align 512,db 0
 11008                              <1> f7:
 11009 00045158 <incbin>            <1> incbin "included/gravity.elf"
 11010 00050D90 00<rept>            <1> align 512,db 0
 11011                              <1> f8:
 11012 00050D90 <incbin>            <1> incbin "included/guitest"
 11013 0005123A 00<rept>            <1> align 512,db 0
 11014                              <1> f9:
 11015 0005123A <incbin>            <1> incbin "included/int"
 11016 000515AF 00<rept>            <1> align 512,db 0
 11017                              <1> f10:
 11018 000515AF <incbin>            <1> incbin "included/lostwoods.sn"
 11019 000516AE 00<rept>            <1> align 512,db 0
 11020                              <1> f11:
 11021 000516AE <incbin>            <1> incbin "included/mario.sn"
 11022 0005183A 00<rept>            <1> align 512,db 0
 11023                              <1> f12:
 11024 0005183A <incbin>            <1> incbin "included/raytrace.elf"
 11025 00055520 00<rept>            <1> align 512,db 0
 11026                              <1> f13:
 11027 00055520 <incbin>            <1> incbin "included/songotime.sn"
 11028 0005564A 00<rept>            <1> align 512,db 0
 11029                              <1> f14:
 11030 0005564A <incbin>            <1> incbin "included/sse"
 11031 00055A9A 00<rept>            <1> align 512,db 0
 11032                              <1> f15:
 11033 00055A9A <incbin>            <1> incbin "included/tely"
 11034 00055DBA 00<rept>            <1> align 512,db 0
 11035                              <1> f16:
 11036 00055DBA <incbin>            <1> incbin "included/unfs"
 11037                              <1> align 512,db 0
 11038                              <1> f17:
 11039 00055DBA <incbin>            <1> incbin "included/victory.wav"
 11040 00058D48 00<rept>            <1> align 512,db 0
 11041                              <1> f18:
 11042 00058D48 <incbin>            <1> incbin "included/_img.bin"
 11043                              <1> align 512,db 0
 11044                              <1> f19:
 11045                                  %endif
