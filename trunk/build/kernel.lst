     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> %define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> %define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> %define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> %define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define system.simple 
    65                              <1> ;The smallest possible system, overrides all options
    66                              <1> 
    67                              <1> ;FIX DEPENDANCIES
    68                              <1> %ifdef gui.included
    69                              <1> 	%undef io.serial
    70                              <1> %else
    71                              <1> 	%undef gui.alphablending
    72                              <1> 	%undef gui.background
    73                              <1> %endif
    74                              <1> %ifdef disk.protected
    75                              <1> 	%undef disk.real
    76                              <1> %endif
    77                              <1> %ifdef network.included
    78                              <1> %else
    79                              <1> 	%undef i8254x.included
    80                              <1> 	%undef ne2000.included
    81                              <1> 	%undef rtl8139.included
    82                              <1> 	%undef rtl8169.included
    83                              <1> %endif
    84                              <1> %ifdef system.simple
    85                              <1> 	%define io.serial "1"
    86                              <1> 	%define disk.real
    87                              <1> 	%undef gui.included
    88                              <1> 	%undef gui.alphablending
    89                              <1> 	%undef gui.background
    90                              <1> 	%undef terminal.vsync
    91                              <1> 	%undef hardware.automatic
    92                              <1> 	%undef threads.included
    93                              <1> 	%undef exceptions.included
    94                              <1> 	%undef disk.protected
    95                              <1> 	%undef sound.included
    96                              <1> 	%undef network.included
    97                              <1> 	%undef rtl8139.included
    98                              <1> 	%undef rtl8169.included
    99                              <1> 	%undef ne2000.included
   100                              <1> 	%undef i8254x.included
   101                              <1> 	%undef sector.debug
   102                              <1> %endif
   103                                  [BITS 16]
   104                                      %include "source/boot.asm"
   105                              <1>     ; MENU.ASM
   106                              <1> %include 'source/signature.asm'
   107                              <2> signature:
   108 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
   109 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
   110 00000011 696C642000          <2>
   111 00000016 EF000000            <2> dd 239	;version number
   112                              <2> signatureend:
   113                              <1> boot:
   114 0000001A 8CC8                <1> 	mov ax, cs
   115 0000001C 8ED8                <1> 	mov ds, ax
   116 0000001E 8EC0                <1> 	mov es, ax
   117 00000020 8ED0                <1> 	mov ss, ax
   118 00000022 880E[49A2]          <1> 	mov [DriveNumber], cl
   119 00000026 668916[4AA2]        <1> 	mov [lbaad], edx
   120                              <1> %ifdef io.serial
   121                              <1> 	call getmemorysize
   122                              <1> 	mov si, serialmsg
   123                              <1> 	call printrm
   124                              <1> 	jmp pmode
   125                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   126                              <1> %else
   127 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   128 0000002E E95700              <1> 	jmp pmode
   129                              <1> %endif
   130                              <1> 	
   131                              <1> vgaset:
   132 00000031 B81200              <1> 	mov ax, 12h
   133 00000034 31DB                <1> 	xor bx, bx
   134 00000036 CD10                <1> 	int 10h
   135 00000038 C606[48A2]00        <1> 	mov byte [guion], 0
   136 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   137 00000040 C3                  <1> 	ret
   138                              <1> 
   139                              <1> getmemorysize:
   140 00000041 BF[4EA2]            <1> 	mov di, memlistbuf
   141 00000044 6631DB              <1> 	xor ebx, ebx
   142                              <1> getmemsizeloop:
   143 00000047 66B820E80000        <1> 	mov eax, 0xE820
   144 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   145 00000053 66B918000000        <1> 	mov ecx, 24
   146 00000059 CD15                <1> 	int 0x15
   147 0000005B 81C71800            <1> 	add di, 24
   148 0000005F 81FF[8EA4]          <1> 	cmp di, memlistend
   149 00000063 7309                <1> 	jae nomoregetmemsize
   150 00000065 6681FB00000000      <1> 	cmp ebx, 0
   151 0000006C 75D9                <1> 	jne getmemsizeloop
   152                              <1> nomoregetmemsize:
   153 0000006E 81EF[4EA2]          <1> 	sub di, memlistbuf
   154 00000072 893E[8EA4]          <1> 	mov [memlistend], di
   155 00000076 C3                  <1> 	ret
   156                              <1> 	
   157                              <1> printrm:			; 'si' comes in with string address
   158 00000077 BB0700              <1>     mov bx,07		; write to display
   159 0000007A B40E                <1>     mov ah,0Eh		; screen function
   160 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   161 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   162 00000080 7405                <1>     je .done		; zero byte at end of string
   163 00000082 CD10                <1>     int 10h		; write character to screen.    
   164 00000084 46                  <1> 	inc si	     	; move to next character
   165 00000085 EBF5                <1>     jmp .lp		; loop
   166 00000087 C3                  <1> .done: ret
   167                                      %include "source/pmode.asm"
   168                              <1> [BITS 16]
   169                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   170                              <1> ;	16-bit real mode
   171                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   172                              <1> 
   173                              <1> pmode:
   174 00000088 6631C0              <1> 	xor eax, eax
   175 0000008B 6631DB              <1> 	xor ebx, ebx
   176 0000008E 6631C9              <1> 	xor ecx, ecx
   177 00000091 6631D2              <1> 	xor edx, edx
   178 00000094 6631F6              <1> 	xor esi, esi
   179 00000097 6631FF              <1> 	xor edi, edi
   180 0000009A BA9200              <1> 	mov dx, 0x92
   181 0000009D EC                  <1> 	in al, dx	;;A20
   182 0000009E 0C02                <1> 	or al, 2
   183 000000A0 EE                  <1> 	out dx, al
   184 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   185 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   186 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   187 000000AB A3[AC03]            <1> 	mov [gdt2 + 2],ax
   188 000000AE A3[B403]            <1> 	mov [gdt3 + 2],ax
   189 000000B1 66C1E810            <1> 	shr eax,16
   190 000000B5 A2[AE03]            <1> 	mov [gdt2 + 4],al
   191 000000B8 A2[B603]            <1> 	mov [gdt3 + 4],al
   192 000000BB 8826[B103]          <1> 	mov [gdt2 + 7],ah
   193 000000BF 8826[B903]          <1> 	mov [gdt3 + 7],ah
   194                              <1> 
   195 000000C3 66B8[8EA40000]      <1> 	mov eax, initialstack
   196 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   197 000000CE A3[A403]            <1> 	mov [gdts + 2],ax
   198 000000D1 66C1E810            <1> 	shr eax, 16
   199 000000D5 A2[A603]            <1> 	mov [gdts + 4],al
   200 000000D8 8826[A903]          <1> 	mov [gdts + 7], ah
   201                              <1> 	
   202 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   203 000000E0 A3[BC03]            <1> 	mov [gdt4 + 2],ax
   204 000000E3 A3[C403]            <1> 	mov [gdt5 + 2],ax
   205 000000E6 A3[CC03]            <1> 	mov [gdtv8086 + 2], ax
   206 000000E9 A3[D403]            <1> 	mov [gdtv80862 + 2], ax
   207 000000EC 66C1E810            <1> 	shr eax,16
   208 000000F0 A2[BE03]            <1> 	mov [gdt4 + 4],al
   209 000000F3 A2[C603]            <1> 	mov [gdt5 + 4],al
   210 000000F6 A2[CE03]            <1> 	mov [gdtv8086 + 4],al
   211 000000F9 A2[D603]            <1> 	mov [gdtv80862 + 4],al
   212 000000FC 8826[C103]          <1> 	mov [gdt4 + 7],ah
   213 00000100 8826[C903]          <1> 	mov [gdt5 + 7],ah
   214 00000104 8826[D103]          <1> 	mov [gdtv8086 + 7],ah
   215 00000108 8826[D903]          <1> 	mov [gdtv80862 + 7],ah
   216                              <1> 	
   217 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   218 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   219 00000117 A3[DC03]            <1> 	mov [gdtdos + 2],ax
   220 0000011A A3[E403]            <1> 	mov [gdtdos2 + 2],ax
   221 0000011D 66C1E810            <1> 	shr eax,16
   222 00000121 A2[DE03]            <1> 	mov [gdtdos + 4],al
   223 00000124 A2[E603]            <1> 	mov [gdtdos2 + 4],al
   224 00000127 8826[E103]          <1> 	mov [gdtdos + 7],ah
   225 0000012B 8826[E903]          <1> 	mov [gdtdos2 + 7],ah
   226                              <1> 	
   227                              <1> ; fix up gdt and idt
   228 0000012F 67668D83[92030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   229 00000137 66A3[8803]          <1> 	mov [gdtr + 2],eax
   230 0000013B 67668D83[EA030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   231 00000143 66A3[8E03]          <1> 	mov [idtr + 2],eax
   232 00000147 FA                  <1> 	cli
   233 00000148 0F0116[8603]        <1> 	lgdt [gdtr]
   234 0000014D 0F011E[8C03]        <1> 	lidt [idtr]
   235 00000152 6631DB              <1> 	xor ebx, ebx
   236 00000155 8CDB                <1> 	mov bx, ds
   237 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   238 0000015C 0F20C0              <1> 	mov eax,cr0
   239 0000015F 0C01                <1> 	or al,1
   240 00000161 0F22C0              <1> 	mov cr0,eax
   241 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   242                              <1> [BITS 32]
   243                              <1> do_pm:
   244 00000169 31C0                <1> 	xor eax, eax
   245 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   246 0000016F 8ED8                <1> 	mov ds, ax
   247 00000171 8EC0                <1> 	mov es, ax
   248 00000173 8EE0                <1> 	mov fs, ax
   249 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   250 00000179 8EE8                <1> 	mov gs, ax
   251                              <1> 	
   252                              <1> copykernel:
   253 0000017B 648B06              <1> 	mov eax, [fs:esi]
   254 0000017E 658906              <1> 	mov [gs:esi], eax
   255 00000181 81C604000000        <1> 	add esi, 4
   256 00000187 81FE[8EA40000]      <1> 	cmp esi, bsscopy
   257 0000018D 72EC                <1> 	jb copykernel
   258 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   259                              <1> 	
   260                              <1> done_copy:
   261 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   262 0000019A 8ED8                <1> 	mov ds, ax
   263 0000019C 8EC0                <1> 	mov es, ax
   264 0000019E 8EE0                <1> 	mov fs, ax
   265                              <1> 	;mov ax, STACK_SEL
   266 000001A0 8ED0                <1> 	mov ss, ax
   267 000001A2 BC[2EB40000]        <1> 	mov esp, stackend
   268 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 000001AB 8EE8                <1> 	mov gs, ax
   270                              <1> 	
   271 000001AD E85E5F0000          <1> 	call initialize	;initialize drivers
   272                              <1> 	
   273 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   274 000001B7 C1E804              <1> 	shr eax, 4
   275 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   276                              <1> 	
   277 000001BF BE[94EF1100]        <1> 	mov esi, bssend
   278 000001C4 31C0                <1> 	xor eax, eax
   279                              <1> clearkernelbuffers:
   280 000001C6 8906                <1> 	mov [esi], eax
   281 000001C8 81EE04000000        <1> 	sub esi, 4
   282 000001CE 81FE[8EA40000]      <1> 	cmp esi, bsscopy
   283 000001D4 77F0                <1> 	ja clearkernelbuffers
   284 000001D6 FB                  <1> 	sti
   285                              <1> 
   286                              <1> getmemoryspace:
   287 000001D7 BE[4EA20000]        <1> 	mov esi, memlistbuf
   288 000001DC 31FF                <1> 	xor edi, edi
   289 000001DE 668B3D[8EA40000]    <1> 	mov di, [memlistend]
   290 000001E5 01F7                <1> 	add edi, esi
   291 000001E7 31C0                <1> 	xor eax, eax
   292                              <1> memoryspaceaddition:
   293 000001E9 39FE                <1> 	cmp esi, edi
   294 000001EB 7322                <1> 	jae finishedmemspacecalc
   295 000001ED 81C608000000        <1> 	add esi, 8
   296 000001F3 8B0E                <1> 	mov ecx, [esi]
   297 000001F5 81C608000000        <1> 	add esi, 8
   298 000001FB 8B1E                <1> 	mov ebx, [esi]
   299 000001FD 81C608000000        <1> 	add esi, 8
   300 00000203 81FB01000000        <1> 	cmp ebx, 1
   301 00000209 75DE                <1> 	jne memoryspaceaddition
   302 0000020B 01C8                <1> 	add eax, ecx
   303 0000020D EBDA                <1> 	jmp memoryspaceaddition
   304                              <1> finishedmemspacecalc:
   305 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   306                              <1> %ifdef gui.included
   307 00000214 803D[48A20000]00    <1> 	cmp byte [guion], 0
   308 0000021B 741C                <1> 	je normalstartup
   309 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   310 00000223 C1E304              <1> 	shl ebx, 4
   311 00000226 8B3D[FC560000]      <1> 	mov edi, [physbaseptr]
   312 0000022C 29DF                <1> 	sub edi, ebx
   313 0000022E 893D[FC560000]      <1> 	mov [physbaseptr], edi
   314 00000234 E99C640000          <1> 	jmp guiboot
   315                              <1> %endif
   316                              <1> normalstartup:
   317 00000239 E926270000          <1> 	jmp os
   318                              <1> 	
   319 0000023E 00000000            <1> basecache dd 0
   320 00000242 00001000            <1> newcodecache dd 0x100000
   321                              <1> 
   322 00000246 00                  <1> testingcpuspeed db 0
   323 00000247 00000000            <1> cpuspeedperint dd 0
   324 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   325 00000253 00000000            <1> memoryspace dd 0
   326 00000257 7D0A                <1> pitdiv dw 2685
   327 00000259 2E562200            <1> timeinterval dd 2250286
   328 0000025D 00000000            <1> timeseconds dd 0
   329 00000261 00000000            <1> timenanoseconds dd 0
   330 00000265 00                  <1> soundon db 0
   331 00000266 0000                <1> soundrepititions dw 0
   332 00000268 00000000            <1> soundpos dd 0
   333 0000026C 00000000            <1> soundendpos dd 0
   334                              <1> 
   335                              <1> cpuspeedend:
   336 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   337 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   338 0000027C B8[BD4D0000]        <1> 	mov eax, cpuspeedloopend
   339 00000281 890424              <1> 	mov [esp], eax
   340 00000284 E9ED000000          <1> 	jmp handled
   341                              <1> 
   342                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   343                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   344                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   345                              <1> 
   346                              <1> pitinterrupt: ;this controls threading
   347 00000289 FA                  <1> 	cli
   348 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   349 00000291 74DD                <1> 	je cpuspeedend
   350                              <1> 		
   351 00000293 E8B7000000          <1> 	call timekeeper ;this updates the internal time
   352                              <1> 	
   353 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   354 0000029F 0F843B580000        <1> 	je near PCSpeakerRAW
   355                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   356                              <1> %ifdef threads.included
   357 000002A5 803D[D0660000]01    <1> 	cmp byte [threadson], 1
   358 000002AC 0F84BE630000        <1> 	je near threadswitch
   359                              <1> %endif
   360                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   361 000002B2 803D[D0660000]00    <1> 	cmp byte [threadson], 0
   362 000002B9 0F84B7000000        <1> 	je near handled
   363                              <1> %ifdef io.serial
   364                              <1> 	jmp handled
   365                              <1> %else
   366 000002BF 60                  <1> 	pusha
   367 000002C0 E464                <1> 	in al, 64h
   368 000002C2 A820                <1> 	test al, 20h
   369 000002C4 0F85AA000000        <1> 	jnz near handled2
   370 000002CA E460                <1> 	in al, 60h
   371 000002CC 3C01                <1> 	cmp al, 1		;escape
   372 000002CE 7405                <1> 	je userint
   373 000002D0 E99F000000          <1> 	jmp handled2
   374                              <1> ;	cmp al, 0x57
   375                              <1> ;	jne near handled2
   376                              <1> ;pauseint:	;F11 pauses
   377                              <1> ;	in al, 64h
   378                              <1> ;	test al, 20h
   379                              <1> ;	jnz pauseint
   380                              <1> ;	in al, 60h
   381                              <1> ;	cmp al, 0xD7
   382                              <1> ;	jne pauseint
   383                              <1> ;	mov esi, pausemsg
   384                              <1> ;	call print
   385                              <1> ;	cli
   386                              <1> ;pauselp:
   387                              <1> ;	nop
   388                              <1> ;	in al, 64h
   389                              <1> ;	test al, 20h
   390                              <1> ;	jnz pauselp
   391                              <1> ;	in al, 60h
   392                              <1> ;	cmp al, 0x57
   393                              <1> ;	je near handled2
   394                              <1> ;	jmp pauselp
   395                              <1> ;pausemsg db "Paused",10,0
   396                              <1> userint:
   397 000002D5 31C0                <1> 	xor eax, eax
   398 000002D7 3905[8EB40000]      <1> 	cmp [sigtable], eax
   399 000002DD 7411                <1> 	je .nosighook
   400 000002DF 8B1D[8EB40000]      <1> 	mov ebx, [sigtable]
   401 000002E5 895C2420            <1> 	mov [esp + 32], ebx
   402                              <1> ;	mov [sigtable], eax
   403 000002E9 B020                <1> 	mov al, 0x20
   404 000002EB E620                <1> 	out 0x20, al
   405 000002ED 61                  <1> 	popa
   406 000002EE FB                  <1> 	sti
   407 000002EF CF                  <1> 	iret
   408                              <1> .nosighook:
   409                              <1> 		;UNMASK ALL INTS
   410 000002F0 E621                <1> 	out 0x21, al
   411 000002F2 E6A1                <1> 	out 0xA1, al
   412 000002F4 B020                <1> 	mov al, 0x20
   413 000002F6 E6A0                <1> 	out 0xA0, al
   414 000002F8 E620                <1> 	out 0x20, al
   415                              <1> 		;RESET PIT DIVISOR
   416 000002FA 66A1[57020000]      <1> 	mov ax, [pitdiv]
   417 00000300 E640                <1> 	out 0x40, al
   418 00000302 66C1C008            <1> 	rol ax, 8
   419 00000306 E640                <1> 	out 0x40, al
   420                              <1> 		;RESET PIC
   421 00000308 B020                <1> 	mov al, 0x20
   422 0000030A E620                <1> 	out 0x20, al
   423 0000030C 61                  <1> 	popa
   424 0000030D FB                  <1> 	sti
   425 0000030E BC[2EB40000]        <1> 	mov esp, stackend ;reset stack
   426 00000313 E9A3270000          <1> 	jmp returnfromexp
   427                              <1> %endif
   428 00000318 0A                  <1> rtcrate db 10
   429                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   430                              <1> %ifdef io.serial
   431                              <1> %else
   432                              <1> %ifdef terminal.vsync
   433                              <1> 	cli
   434                              <1> 	cmp byte [termcopyneeded], 0
   435                              <1> 	je .nocopy
   436                              <1> 	call newtermcopy
   437                              <1> .nocopy
   438                              <1> 	push eax
   439                              <1> 	mov al, 0xC
   440                              <1> 	out 0x70, al
   441                              <1> 	in al, 0x71
   442                              <1> 	pop eax
   443                              <1> 	sti
   444                              <1> %endif
   445                              <1> %endif
   446 00000319 E95F000000          <1> 	jmp handled4
   447                              <1> %ifdef rtl8139.included
   448                              <1> rtl8139.irq:
   449 0000031E FA                  <1> 	cli
   450 0000031F 52                  <1> 	push edx
   451 00000320 50                  <1> 	push eax
   452 00000321 8B15[F7840000]      <1> 	mov edx, [rtl8139.basenicaddr]
   453 00000327 81C23E000000        <1> 	add edx, rtl8139.ISR
   454 0000032D 31C0                <1> 	xor eax, eax
   455 0000032F 66ED                <1> 	in ax, dx
   456 00000331 66EF                <1> 	out dx, ax
   457 00000333 58                  <1> 	pop eax
   458 00000334 5A                  <1> 	pop edx
   459 00000335 FB                  <1> 	sti
   460 00000336 E942000000          <1> 	jmp handled4
   461                              <1> %endif
   462                              <1> %ifdef sound.included
   463                              <1> sblaster.irq:
   464 0000033B FA                  <1> 	cli
   465 0000033C 60                  <1> 	pusha
   466 0000033D 803D[C65D0000]01    <1> 	cmp byte [SoundBlaster], 1
   467 00000344 0F8487580000        <1> 	je near sblaster.cont
   468 0000034A E925000000          <1> 	jmp handled2
   469                              <1> %endif
   470                              <1> 	
   471                              <1> timekeeper:
   472 0000034F 50                  <1> 	push eax
   473 00000350 A1[61020000]        <1> 	mov eax, [timenanoseconds]
   474 00000355 0305[59020000]      <1> 	add eax, [timeinterval]
   475 0000035B 3D00CA9A3B          <1> 	cmp eax, 1000000000
   476 00000360 720B                <1> 	jb nonanosecondrollover
   477 00000362 FF05[5D020000]      <1> 	inc dword [timeseconds]
   478 00000368 2D00CA9A3B          <1> 	sub eax, 1000000000
   479                              <1> 	%ifdef gui.time
   480                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   481                              <1> 		cmp byte [guion], 1
   482                              <1> 		jne nonanosecondrollover
   483                              <1> 		cmp dword [dragging], 0
   484                              <1> 		jne nonanosecondrollover
   485                              <1> 		pusha
   486                              <1> 		call guitime
   487                              <1> 		popa
   488                              <1> 	%endif
   489                              <1> nonanosecondrollover:
   490 0000036D A3[61020000]        <1> 	mov [timenanoseconds], eax
   491 00000372 58                  <1> 	pop eax
   492 00000373 C3                  <1> 	ret
   493                              <1> 	
   494                              <1> handled2:
   495 00000374 61                  <1> 	popa
   496                              <1> handled3:
   497 00000375 FB                  <1> 	sti
   498                              <1> handled:
   499 00000376 50                  <1> 	push eax
   500 00000377 B020                <1> 	mov al, 0x20
   501 00000379 E620                <1> 	out 0x20, al
   502 0000037B 58                  <1> 	pop eax
   503 0000037C CF                  <1> 	iret
   504                              <1> handled4:
   505 0000037D 50                  <1> 	push eax
   506 0000037E B020                <1> 	mov al, 0x20
   507 00000380 E6A0                <1> 	out 0xA0, al
   508 00000382 E620                <1> 	out 0x20, al
   509 00000384 58                  <1> 	pop eax
   510 00000385 CF                  <1> 	iret
   511                              <1> [BITS 16]
   512                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   513                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   514                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   515 00000386 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   516 00000388 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   517                              <1> 
   518 0000038C FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   519 0000038E 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   520                              <1> 
   521                              <1> 
   522 00000392 0000                <1> gdt:	dw 0			; limit 15:0
   523 00000394 0000                <1> 	dw 0			; base 15:0
   524 00000396 00                  <1> 	db 0			; base 23:16
   525 00000397 00                  <1> 	db 0			; type
   526 00000398 00                  <1> 	db 0			; limit 19:16, flags
   527 00000399 00                  <1> 	db 0			; base 31:24
   528                              <1> ; linear data segment descriptor
   529                              <1> LINEAR_SEL	equ	$-gdt
   530 0000039A FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   531 0000039C 0000                <1> 	dw 0			; base for this one is always 0
   532 0000039E 00                  <1> 	db 0
   533 0000039F 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   534 000003A0 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   535 000003A1 00                  <1> 	db 0
   536                              <1> STACK_SEL	equ $-gdt
   537 000003A2 0200                <1> gdts:	dw 2;(stackend)/4096
   538 000003A4 0000                <1> 	dw 0
   539 000003A6 00                  <1> 	db 0
   540 000003A7 92                  <1> 	db 0x92
   541 000003A8 CF                  <1> 	db 0xCF
   542 000003A9 00                  <1> 	db 0
   543                              <1> ; code segment descriptor
   544                              <1> SYS_CODE_SEL	equ	$-gdt
   545 000003AA FFFF                <1> gdt2:	dw 0xFFFF
   546 000003AC 0000                <1> 	dw 0			; (base gets set above)
   547 000003AE 00                  <1> 	db 0
   548 000003AF 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   549 000003B0 CF                  <1> 	db 0xCF
   550 000003B1 00                  <1> 	db 0
   551                              <1> ; data segment descriptor
   552                              <1> SYS_DATA_SEL	equ	$-gdt
   553 000003B2 FFFF                <1> gdt3:	dw 0xFFFF
   554 000003B4 0000                <1> 	dw 0			; (base gets set above)
   555 000003B6 00                  <1> 	db 0
   556 000003B7 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 000003B8 CF                  <1> 	db 0xCF
   558 000003B9 00                  <1> 	db 0
   559                              <1> NEW_CODE_SEL	equ	$-gdt
   560 000003BA FFFF                <1> gdt4:	dw 0xFFFF
   561 000003BC 0000                <1> 	dw 0			; (base gets set above)
   562 000003BE 00                  <1> 	db 0
   563 000003BF 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   564 000003C0 CF                  <1> 	db 0xCF
   565 000003C1 00                  <1> 	db 0
   566                              <1> ; data segment descriptor
   567                              <1> NEW_DATA_SEL	equ	$-gdt
   568 000003C2 FFFF                <1> gdt5:	dw 0xFFFF
   569 000003C4 0000                <1> 	dw 0			; (base gets set above)
   570 000003C6 00                  <1> 	db 0
   571 000003C7 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   572 000003C8 CF                  <1> 	db 0xCF
   573 000003C9 00                  <1> 	db 0
   574                              <1> V8086_CODE_SEL	equ $-gdt
   575 000003CA FFFF                <1> gdtv8086: dw 0xFFFF
   576 000003CC 0000                <1> 	dw 0
   577 000003CE 00                  <1> 	db 0
   578 000003CF 9A                  <1> 	db 0x9A
   579 000003D0 8F                  <1> 	db 0x8F
   580 000003D1 00                  <1> 	db 0
   581                              <1> V8086_DATA_SEL	equ $-gdt
   582 000003D2 FFFF                <1> gdtv80862: dw 0xFFFF
   583 000003D4 0000                <1> 	dw 0
   584 000003D6 00                  <1> 	db 0
   585 000003D7 92                  <1> 	db 0x92
   586 000003D8 8F                  <1> 	db 0x8F
   587 000003D9 00                  <1> 	db 0
   588                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   589 000003DA 0001                <1> gdtdos:	dw 256	;give it 1 MB
   590 000003DC 0000                <1> 	dw 0
   591 000003DE 00                  <1> 	db 0
   592 000003DF 9A                  <1> 	db 0x9A
   593 000003E0 8F                  <1> 	db 0x8F ;16 bit
   594 000003E1 00                  <1> 	db 0
   595                              <1> DOS_DATA_SEL 	equ $-gdt
   596 000003E2 0001                <1> gdtdos2:	dw 256
   597 000003E4 0000                <1> 	dw 0
   598 000003E6 00                  <1> 	db 0
   599 000003E7 92                  <1> 	db 0x92
   600 000003E8 8F                  <1> 	db 0x8F ;16 bit
   601 000003E9 00                  <1> 	db 0
   602                              <1> gdt_end:
   603                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   604                              <1> ;	interrupt descriptor table (IDT)
   605                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   606                              <1> ; 32 reserved interrupts:
   607                              <1> idt:	
   608                              <1> %assign i 0
   609                              <1> %rep    8
   610                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <1> %assign i i+1
   612                              <1> %endrep
   613 000003EA [0B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   614                              <2> %assign i i+1
   615 000003F2 [170D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   616                              <2> %assign i i+1
   617 000003FA [230D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   618                              <2> %assign i i+1
   619 00000402 [2F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   620                              <2> %assign i i+1
   621 0000040A [3B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   622                              <2> %assign i i+1
   623 00000412 [470D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   624                              <2> %assign i i+1
   625 0000041A [530D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   626                              <2> %assign i i+1
   627 00000422 [5F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   628                              <2> %assign i i+1
   629 0000042A [6B0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   630                              <1> %assign i 9
   631                              <1> %rep    23
   632                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <1> %assign i i+1
   634                              <1> %endrep
   635 00000432 [770D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i i+1
   637 0000043A [830D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i i+1
   639 00000442 [8F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i i+1
   641 0000044A [9B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i i+1
   643 00000452 [A70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i i+1
   645 0000045A [B30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i i+1
   647 00000462 [BF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i i+1
   649 0000046A [CB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i i+1
   651 00000472 [D70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i i+1
   653 0000047A [E30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i i+1
   655 00000482 [EF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i i+1
   657 0000048A [FB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i i+1
   659 00000492 [070E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i i+1
   661 0000049A [130E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i i+1
   663 000004A2 [1F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i i+1
   665 000004AA [2B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i i+1
   667 000004B2 [370E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i i+1
   669 000004BA [430E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i i+1
   671 000004C2 [4F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i i+1
   673 000004CA [5B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i i+1
   675 000004D2 [670E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i i+1
   677 000004DA [730E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i i+1
   679 000004E2 [7F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i i+1
   681 000004EA [2A28]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   682 000004F2 [2E28]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   683                              <1> %assign i 0x22
   684                              <1> %rep 14
   685                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   686                              <1> %assign i +1
   687                              <1> %endrep
   688 000004FA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690 00000502 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 0000050A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 00000512 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 0000051A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698 00000522 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i +1
   700 0000052A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i +1
   702 00000532 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i +1
   704 0000053A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i +1
   706 00000542 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i +1
   708 0000054A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i +1
   710 00000552 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 0000055A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 00000562 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716                              <1> ;INT 30h for os use and 3rd party use:
   717 0000056A [FE1B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   718                              <1> %assign i 0x31
   719                              <1> %rep 15
   720                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <1> %assign i +1
   722                              <1> %endrep
   723 00000572 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 0000057A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 00000582 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 0000058A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 00000592 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 0000059A [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 000005A2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 000005AA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739 000005B2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i +1
   741 000005BA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i +1
   743 000005C2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i +1
   745 000005CA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 000005D2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 000005DA [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751 000005E2 [7603]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i +1
   753                              <1> ;and here we are at 0x40
   754                              <1> ;here are all the irq's
   755 000005EA [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   756 000005F2 [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   757 000005FA [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   758 00000602 [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   759 0000060A [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   760                              <1> 	%ifdef sound.included
   761 00000612 [3B03]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   762                              <1> 	%else
   763                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   764                              <1> 	%endif
   765 0000061A [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   766 00000622 [7603]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   767 0000062A [1903]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   768 00000632 [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   769 0000063A [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   770                              <1> 	%ifdef rtl8139.included
   771 00000642 [1E03]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   772                              <1> 	%else
   773                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   774                              <1> 	%endif
   775 0000064A [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   776 00000652 [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   777 0000065A [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   778 00000662 [7D03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   779                              <1> ;This brings me up to 0x50
   780                              <1> %assign i 0x50
   781                              <1> %rep 176
   782                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   783                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   784                              <1> %assign i +1
   785                              <1> %endrep
   786 0000066A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 00000672 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 0000067A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 00000682 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 0000068A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 00000692 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 0000069A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000006A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000006AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000006B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000006BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000006C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000006CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000006D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000006DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000006E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 000006EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 000006F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 000006FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000702 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 0000070A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000712 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 0000071A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000722 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 0000072A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000732 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 0000073A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000742 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 0000074A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000752 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 0000075A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 00000762 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 0000076A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 00000772 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 0000077A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000782 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 0000078A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 00000792 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 0000079A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000007A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000007AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000007B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000007BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000007C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000007CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000007D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000007DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000007E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 000007EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 000007F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 000007FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000802 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 0000080A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000812 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 0000081A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000822 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 0000082A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000832 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 0000083A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000842 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 0000084A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000852 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 0000085A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 00000862 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 0000086A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 00000872 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 0000087A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000882 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 0000088A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 00000892 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 0000089A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000008A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000008AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000008B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000008BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000008C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000008CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000008D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000008DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000008E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 000008EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 000008F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 000008FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000902 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 0000090A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000912 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 0000091A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000922 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 0000092A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000932 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 0000093A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000942 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 0000094A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000952 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 0000095A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000962 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 0000096A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000972 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 0000097A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000982 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 0000098A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000992 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 0000099A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 000009A2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 000009AA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 000009B2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 000009BA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 000009C2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 000009CA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 000009D2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 000009DA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 000009E2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 000009EA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 000009F2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 000009FA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000A02 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000A0A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000A12 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000A1A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000A22 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000A2A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000A32 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000A3A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000A42 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000A4A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000A52 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000A5A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000A62 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000A6A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000A72 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000A7A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000A82 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000A8A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000A92 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000A9A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000AA2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000AAA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000AB2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000ABA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000AC2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000ACA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000AD2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000ADA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000AE2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000AEA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000AF2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000AFA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000B02 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000B0A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000B12 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000B1A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000B22 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000B2A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000B32 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000B3A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000B42 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000B4A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000B52 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000B5A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000B62 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000B6A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000B72 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000B7A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000B82 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000B8A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281 00000B92 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1282                              <2> 
  1283                              <2> %assign i +1
  1284 00000B9A [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1285                              <2> 
  1286                              <2> %assign i +1
  1287 00000BA2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1288                              <2> 
  1289                              <2> %assign i +1
  1290 00000BAA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1291                              <2> 
  1292                              <2> %assign i +1
  1293 00000BB2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1294                              <2> 
  1295                              <2> %assign i +1
  1296 00000BBA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1297                              <2> 
  1298                              <2> %assign i +1
  1299 00000BC2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1300                              <2> 
  1301                              <2> %assign i +1
  1302 00000BCA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1303                              <2> 
  1304                              <2> %assign i +1
  1305 00000BD2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1306                              <2> 
  1307                              <2> %assign i +1
  1308 00000BDA [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1309                              <2> 
  1310                              <2> %assign i +1
  1311 00000BE2 [7603]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1312                              <2> 
  1313                              <2> %assign i +1
  1314                              <1> idt_end:
  1315                              <1> [BITS 32]
  1316                                  	%include "source/realmode.asm"
  1317                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1318                              <1> 			;and the return address is in realmodereturn
  1319 00000BEA FA                  <1> 	cli
  1320 00000BEB A3[FD0C0000]        <1> 	mov [realmodeeax], eax
  1321 00000BF0 891D[F90C0000]      <1> 	mov [realmodeebx], ebx
  1322 00000BF6 8925[EB0C0000]      <1> 	mov [pmodeesp], esp
  1323                              <1> 
  1324 00000BFC BB[F50C0000]        <1> 	mov ebx, cr0old
  1325                              <1> rmcopytofirstmbyte:
  1326 00000C01 8B03                <1> 	mov eax, [ebx]
  1327 00000C03 658903              <1> 	mov [gs:ebx], eax
  1328 00000C06 81C304000000        <1> 	add ebx, 4
  1329 00000C0C 81FB[050D0000]      <1> 	cmp ebx, realmodeptr
  1330 00000C12 76ED                <1> 	jbe rmcopytofirstmbyte
  1331                              <1> 
  1332 00000C14 EA[1B0C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1333                              <1> 
  1334                              <1> [BITS 16]
  1335                              <1> protected16bit:
  1336 00000C1B B84000              <1> 	mov ax, V8086_DATA_SEL
  1337 00000C1E 8ED8                <1> 	mov ds, ax
  1338 00000C20 8EC0                <1> 	mov es, ax
  1339 00000C22 8EE0                <1> 	mov fs, ax
  1340 00000C24 8EE8                <1> 	mov gs, ax
  1341 00000C26 8ED0                <1> 	mov ss, ax
  1342 00000C28 66BC[2EB40000]      <1> 	mov esp, stackend
  1343 00000C2E 0F20C0              <1> 	mov eax, cr0
  1344 00000C31 66A3[F50C]          <1> 	mov [cr0old], eax
  1345 00000C35 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1346 00000C3B 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1347 00000C3E EA[430C]0010        <1> 	jmp 0x1000:inrealmode
  1348                              <1> 
  1349                              <1> inrealmode:
  1350 00000C43 8CC8                <1> 	mov ax, cs
  1351 00000C45 8ED8                <1> 	mov ds, ax
  1352 00000C47 8EC0                <1> 	mov es, ax
  1353 00000C49 8EE0                <1> 	mov fs, ax
  1354 00000C4B 8EE8                <1> 	mov gs, ax
  1355 00000C4D 8ED0                <1> 	mov ss, ax
  1356 00000C4F BC[2EB4]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1357                              <1> 	
  1358 00000C52 B011                <1> 	mov al, 0x11
  1359 00000C54 E620                <1> 	out 0x20, al
  1360 00000C56 E6A0                <1> 	out 0xA0, al
  1361 00000C58 B008                <1> 	mov al, 0x8		;interrupt for master
  1362 00000C5A E621                <1> 	out 0x21, al
  1363 00000C5C B070                <1> 	mov al, 0x70	;interrupt for slave
  1364 00000C5E E6A1                <1> 	out 0xA1, al
  1365 00000C60 B004                <1> 	mov al, 4
  1366 00000C62 E621                <1> 	out 0x21, al
  1367 00000C64 B002                <1> 	mov al, 2
  1368 00000C66 E6A1                <1> 	out 0xA1, al
  1369 00000C68 B001                <1> 	mov al, 0x1
  1370 00000C6A E621                <1> 	out 0x21, al
  1371 00000C6C B001                <1> 	mov al, 0x1
  1372 00000C6E E6A1                <1> 	out 0xA1, al
  1373                              <1> 	
  1374 00000C70 0F011E[EF0C]        <1> 	lidt [idt_real]
  1375 00000C75 FB                  <1> 	sti
  1376                              <1> 
  1377 00000C76 66A1[FD0C]          <1> 	mov eax, [realmodeeax]
  1378 00000C7A 668B1E[F90C]        <1> 	mov ebx, [realmodeebx]
  1379                              <1> 
  1380 00000C7F FF16[050D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1381                              <1> 
  1382 00000C83 66A3[FD0C]          <1> 	mov [realmodeeax], eax
  1383 00000C87 66891E[F90C]        <1> 	mov [realmodeebx], ebx
  1384                              <1> 
  1385 00000C8C FA                  <1> 	cli
  1386 00000C8D 0F0116[8603]        <1> 	lgdt [gdtr]
  1387 00000C92 0F011E[8C03]        <1> 	lidt [idtr]
  1388 00000C97 0F20C0              <1> 	mov eax, cr0
  1389 00000C9A 0C01                <1> 	or al, 1
  1390 00000C9C 0F22C0              <1> 	mov cr0,eax
  1391 00000C9F EA[A40C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1392                              <1> 
  1393                              <1> [BITS 32]
  1394                              <1> returntopmode:
  1395 00000CA4 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1396 00000CA8 8ED8                <1> 	mov ds, ax
  1397 00000CAA 8EC0                <1> 	mov es, ax
  1398 00000CAC 8EE0                <1> 	mov fs, ax
  1399 00000CAE 8ED0                <1> 	mov ss, ax
  1400 00000CB0 8B25[EB0C0000]      <1> 	mov esp, [pmodeesp]
  1401 00000CB6 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1402 00000CBA 8EE8                <1> 	mov gs, ax
  1403                              <1> 
  1404 00000CBC BB[F50C0000]        <1> 	mov ebx, cr0old
  1405                              <1> rmcopyfromfirstmbyte:
  1406 00000CC1 658B03              <1> 	mov eax, [gs:ebx]
  1407 00000CC4 8903                <1> 	mov [ebx], eax
  1408 00000CC6 81C304000000        <1> 	add ebx, 4
  1409 00000CCC 81FB[050D0000]      <1> 	cmp ebx, realmodeptr
  1410 00000CD2 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1411                              <1> 
  1412 00000CD4 E850540000          <1> 	call initialize.pic ;reset irq's and masks
  1413 00000CD9 FB                  <1> 	sti
  1414 00000CDA A1[FD0C0000]        <1> 	mov eax, [realmodeeax]
  1415 00000CDF 8B1D[F90C0000]      <1> 	mov ebx, [realmodeebx]
  1416 00000CE5 FF25[010D0000]      <1> 	jmp dword [realmodereturn]
  1417                              <1> 	
  1418 00000CEB 00000000            <1> pmodeesp dd 0
  1419                              <1> idt_real:
  1420 00000CEF FF03                <1> 	dw 0x3FF
  1421 00000CF1 00000000            <1> 	dd 0
  1422 00000CF5 00000000            <1> cr0old dd 0
  1423 00000CF9 00000000            <1> realmodeebx dd 0
  1424 00000CFD 00000000            <1> realmodeeax dd 0
  1425 00000D01 00000000            <1> realmodereturn dd 0
  1426 00000D05 0000                <1> realmodeptr dw 0
  1427 00000D07 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1428                                  [BITS 32]
  1429                                      %include "source/exception.asm"
  1430                              <1> %ifdef exceptions.included
  1431                              <1> unhand:	
  1432                              <1> 	%assign i 0
  1433                              <1> 	%rep 32
  1434                              <1> 	mov byte [intprob], i
  1435                              <1> 	jmp unhand2
  1436                              <1> 	%assign i i+1
  1437                              <1> 	%endrep
  1438 00000D0B C605[BD110000]00    <2>  mov byte [intprob], i
  1439 00000D12 E974010000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00000D17 C605[BD110000]01    <2>  mov byte [intprob], i
  1442 00000D1E E968010000          <2>  jmp unhand2
  1443                              <2>  %assign i i+1
  1444 00000D23 C605[BD110000]02    <2>  mov byte [intprob], i
  1445 00000D2A E95C010000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000D2F C605[BD110000]03    <2>  mov byte [intprob], i
  1448 00000D36 E950010000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000D3B C605[BD110000]04    <2>  mov byte [intprob], i
  1451 00000D42 E944010000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00000D47 C605[BD110000]05    <2>  mov byte [intprob], i
  1454 00000D4E E938010000          <2>  jmp unhand2
  1455                              <2>  %assign i i+1
  1456 00000D53 C605[BD110000]06    <2>  mov byte [intprob], i
  1457 00000D5A E92C010000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000D5F C605[BD110000]07    <2>  mov byte [intprob], i
  1460 00000D66 E920010000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000D6B C605[BD110000]08    <2>  mov byte [intprob], i
  1463 00000D72 E914010000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000D77 C605[BD110000]09    <2>  mov byte [intprob], i
  1466 00000D7E E908010000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000D83 C605[BD110000]0A    <2>  mov byte [intprob], i
  1469 00000D8A E9FC000000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000D8F C605[BD110000]0B    <2>  mov byte [intprob], i
  1472 00000D96 E9F0000000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000D9B C605[BD110000]0C    <2>  mov byte [intprob], i
  1475 00000DA2 E9E4000000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000DA7 C605[BD110000]0D    <2>  mov byte [intprob], i
  1478 00000DAE E9D8000000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000DB3 C605[BD110000]0E    <2>  mov byte [intprob], i
  1481 00000DBA E9CC000000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000DBF C605[BD110000]0F    <2>  mov byte [intprob], i
  1484 00000DC6 E9C0000000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000DCB C605[BD110000]10    <2>  mov byte [intprob], i
  1487 00000DD2 E9B4000000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000DD7 C605[BD110000]11    <2>  mov byte [intprob], i
  1490 00000DDE E9A8000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000DE3 C605[BD110000]12    <2>  mov byte [intprob], i
  1493 00000DEA E99C000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000DEF C605[BD110000]13    <2>  mov byte [intprob], i
  1496 00000DF6 E990000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000DFB C605[BD110000]14    <2>  mov byte [intprob], i
  1499 00000E02 E984000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00000E07 C605[BD110000]15    <2>  mov byte [intprob], i
  1502 00000E0E E978000000          <2>  jmp unhand2
  1503                              <2>  %assign i i+1
  1504 00000E13 C605[BD110000]16    <2>  mov byte [intprob], i
  1505 00000E1A E96C000000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000E1F C605[BD110000]17    <2>  mov byte [intprob], i
  1508 00000E26 E960000000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000E2B C605[BD110000]18    <2>  mov byte [intprob], i
  1511 00000E32 E954000000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00000E37 C605[BD110000]19    <2>  mov byte [intprob], i
  1514 00000E3E E948000000          <2>  jmp unhand2
  1515                              <2>  %assign i i+1
  1516 00000E43 C605[BD110000]1A    <2>  mov byte [intprob], i
  1517 00000E4A E93C000000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000E4F C605[BD110000]1B    <2>  mov byte [intprob], i
  1520 00000E56 E930000000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000E5B C605[BD110000]1C    <2>  mov byte [intprob], i
  1523 00000E62 E924000000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000E67 C605[BD110000]1D    <2>  mov byte [intprob], i
  1526 00000E6E E918000000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000E73 C605[BD110000]1E    <2>  mov byte [intprob], i
  1529 00000E7A E90C000000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000E7F C605[BD110000]1F    <2>  mov byte [intprob], i
  1532 00000E86 E900000000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534                              <1> unhand2:
  1535 00000E8B FA                  <1> 	cli
  1536 00000E8C 1E                  <1> 	push ds
  1537 00000E8D 06                  <1> 	push es
  1538 00000E8E 0FA0                <1> 	push fs
  1539 00000E90 0FA8                <1> 	push gs
  1540 00000E92 16                  <1> 	push ss
  1541 00000E93 60                  <1> 	pushad
  1542                              <1> %ifdef gui.included
  1543 00000E94 803D[48A20000]00    <1> 	cmp byte [guion], 0
  1544 00000E9B 0F8432000000        <1> 	je near noguiunhandstuff
  1545 00000EA1 66C705[B7110000]08- <1> 	mov word [locunhandy], 8
  1546 00000EA9 00                  <1>
  1547 00000EAA 66C705[B9110000]08- <1> 	mov word [locunhandx], 8
  1548 00000EB2 00                  <1>
  1549 00000EB3 668B1D[B66D0000]    <1> 	mov bx, [background]
  1550 00000EBA 66891D[BB110000]    <1> 	mov [backgroundcache], bx
  1551 00000EC1 C605[D8570000]01    <1> 	mov byte [mousedisabled],1
  1552 00000EC8 66BB00F8            <1> 	mov bx, 1111100000000000b
  1553 00000ECC 66891D[B66D0000]    <1> 	mov [background], bx
  1554                              <1> noguiunhandstuff:
  1555                              <1> %endif
  1556 00000ED3 89E6                <1> 	mov esi, esp
  1557 00000ED5 8935[AB110000]      <1> 	mov [espfirst], esi
  1558 00000EDB 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1559 00000EE1 8935[A7110000]      <1> 	mov [esploc], esi
  1560 00000EE7 BE[CC110000]        <1> 	mov esi, unhandmsg
  1561 00000EEC 8935[AF110000]      <1> 	mov [esiloc], esi
  1562 00000EF2 31C9                <1> 	xor ecx, ecx
  1563 00000EF4 8A0D[BD110000]      <1> 	mov cl, [intprob]
  1564 00000EFA BB[9B150000]        <1> 	mov ebx, errortypes
  1565 00000EFF C1E102              <1> 	shl ecx, 2
  1566 00000F02 01CB                <1> 	add ebx, ecx
  1567 00000F04 81FB[DB150000]      <1> 	cmp ebx, errortypesend
  1568 00000F0A 7205                <1> 	jb gooderrortype
  1569 00000F0C BB[DB150000]        <1> 	mov ebx, errortypesend
  1570                              <1> gooderrortype:
  1571 00000F11 8B33                <1> 	mov esi, [ebx]
  1572                              <1> %ifdef gui.included
  1573 00000F13 803D[48A20000]00    <1> 	cmp byte [guion], 0
  1574 00000F1A 0F842D000000        <1> 	je near errortext
  1575 00000F20 668B0D[B7110000]    <1> 	mov cx, [locunhandy]
  1576 00000F27 668B15[B9110000]    <1> 	mov dx, [locunhandx]
  1577 00000F2E 66B80100            <1> 	mov ax, 1
  1578 00000F32 6631DB              <1> 	xor bx, bx
  1579 00000F35 E808640000          <1> 	call showstring2
  1580 00000F3A 66890D[B7110000]    <1> 	mov [locunhandy], cx
  1581 00000F41 668915[B9110000]    <1> 	mov [locunhandx], dx
  1582 00000F48 E905000000          <1> 	jmp errortextdone
  1583                              <1> %endif
  1584                              <1> errortext:
  1585 00000F4D E8080E0000          <1> 	call print		;;get the error message and print it
  1586                              <1> errortextdone:
  1587 00000F52 31C9                <1> 	xor ecx, ecx
  1588 00000F54 8A0D[BD110000]      <1> 	mov cl, [intprob]
  1589 00000F5A E8E1010000          <1> 	call expdump
  1590                              <1> dumpstack:
  1591 00000F5F 8B35[A7110000]      <1> 	mov esi, [esploc]
  1592 00000F65 39E6                <1> 	cmp esi, esp
  1593 00000F67 7216                <1> 	jb donedump
  1594 00000F69 368B0E              <1> 	mov ecx, [ss:esi]
  1595 00000F6C 81EE04000000        <1> 	sub esi, 4
  1596 00000F72 8935[A7110000]      <1> 	mov [esploc], esi
  1597 00000F78 E8C3010000          <1> 	call expdump
  1598 00000F7D EBE0                <1> 	jmp dumpstack
  1599                              <1> donedump:
  1600 00000F7F 0F20C1              <1> 	mov ecx, cr0
  1601 00000F82 E8B9010000          <1> 	call expdump
  1602 00000F87 0F20D1              <1> 	mov ecx, cr2
  1603 00000F8A E8B1010000          <1> 	call expdump
  1604 00000F8F 0F20D9              <1> 	mov ecx, cr3
  1605 00000F92 E8A9010000          <1> 	call expdump
  1606 00000F97 0F20E1              <1> 	mov ecx, cr4
  1607 00000F9A E8A1010000          <1> 	call expdump
  1608 00000F9F 0F00C9              <1> 	str ecx
  1609 00000FA2 E899010000          <1> 	call expdump
  1610 00000FA7 0F010D[C6110000]    <1> 	sidt [igdtcache]
  1611 00000FAE 8B0D[C8110000]      <1> 	mov ecx, [igdtcache + 2]
  1612 00000FB4 E887010000          <1> 	call expdump
  1613 00000FB9 0F0105[C6110000]    <1> 	sgdt [igdtcache]
  1614 00000FC0 8B0D[C8110000]      <1> 	mov ecx, [igdtcache + 2]
  1615 00000FC6 E875010000          <1> 	call expdump
  1616 00000FCB 0F00C1              <1> 	sldt ecx
  1617 00000FCE E86D010000          <1> 	call expdump
  1618 00000FD3 8B35[A7110000]      <1> 	mov esi, [esploc]
  1619 00000FD9 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1620 00000FDE 81C710000000        <1> 	add edi, 16
  1621 00000FE4 893D[C2110000]      <1> 	mov [codelocend], edi
  1622 00000FEA 81EF20000000        <1> 	sub edi, 32
  1623                              <1> dumpcodeloop:
  1624 00000FF0 893D[BE110000]      <1> 	mov [codeloc], edi
  1625 00000FF6 8B0F                <1> 	mov ecx, [edi]
  1626 00000FF8 E843010000          <1> 	call expdump
  1627 00000FFD 8B3D[BE110000]      <1> 	mov edi, [codeloc]
  1628 00001003 81C704000000        <1> 	add edi, 4
  1629 00001009 3B3D[C2110000]      <1> 	cmp edi, [codelocend]
  1630 0000100F 72DF                <1> 	jb dumpcodeloop
  1631 00001011 BE[D1100000]        <1> 	mov esi, backtoosmsg
  1632                              <1> %ifdef gui.included
  1633 00001016 803D[48A20000]00    <1> 	cmp byte [guion], 0
  1634 0000101D 741F                <1> 	je backtomsg
  1635                              <1> guibacktomsg:
  1636 0000101F 668B15[B9110000]    <1> 	mov dx, [locunhandx]
  1637 00001026 668B0D[B7110000]    <1> 	mov cx, [locunhandy]
  1638 0000102D 66B80100            <1> 	mov ax, 1
  1639 00001031 6631DB              <1> 	xor bx, bx
  1640 00001034 E809630000          <1> 	call showstring2
  1641 00001039 E905000000          <1> 	jmp backtomsgdone
  1642                              <1> backtomsg:
  1643                              <1> %endif
  1644 0000103E E8170D0000          <1> 	call print
  1645                              <1> backtomsgdone:
  1646 00001043 30C0                <1> 	xor al, al
  1647 00001045 E8E0110000          <1> 	call rdcharint
  1648 0000104A 803D[BD110000]03    <1> 	cmp byte [intprob], 3
  1649 00001051 7541                <1> 	jne nodebugint
  1650                              <1> %ifdef gui.included
  1651 00001053 803D[48A20000]00    <1> 	cmp byte [guion], 0
  1652 0000105A 7427                <1> 	je nodebuggui
  1653 0000105C 668B1D[BB110000]    <1> 	mov bx, [backgroundcache]
  1654 00001063 66891D[B66D0000]    <1> 	mov [background], bx
  1655 0000106A 6631DB              <1> 	xor bx, bx
  1656 0000106D C605[D8570000]00    <1> 	mov byte [mousedisabled], 0
  1657 00001074 E8F15C0000          <1> 	call guiclear
  1658 00001079 E83C5D0000          <1> 	call reloadallgraphics
  1659 0000107E E889160000          <1> 	call termcopy
  1660                              <1> nodebuggui:
  1661                              <1> %endif
  1662 00001083 8B35[AB110000]      <1> 	mov esi, [espfirst]
  1663 00001089 89F4                <1> 	mov esp, esi
  1664 0000108B 61                  <1> 	popad
  1665 0000108C 17                  <1> 	pop ss
  1666 0000108D 0FA9                <1> 	pop gs
  1667 0000108F 0FA1                <1> 	pop fs
  1668 00001091 07                  <1> 	pop es
  1669 00001092 1F                  <1> 	pop ds
  1670 00001093 CF                  <1> 	iret
  1671                              <1> nodebugint:
  1672 00001094 61                  <1> 	popad
  1673 00001095 17                  <1> 	pop ss
  1674 00001096 0FA9                <1> 	pop gs
  1675 00001098 0FA1                <1> 	pop fs
  1676 0000109A 07                  <1> 	pop es
  1677 0000109B 1F                  <1> 	pop ds
  1678                              <1> %ifdef gui.included
  1679 0000109C 803D[48A20000]00    <1> 	cmp byte [guion], 0
  1680 000010A3 7427                <1> 	je returnunhandgui
  1681 000010A5 668B1D[BB110000]    <1> 	mov bx, [backgroundcache]
  1682 000010AC 66891D[B66D0000]    <1> 	mov [background], bx
  1683 000010B3 6631DB              <1> 	xor bx, bx
  1684 000010B6 C605[D8570000]00    <1> 	mov byte [mousedisabled], 0
  1685 000010BD E8A85C0000          <1> 	call guiclear
  1686 000010C2 E8F35C0000          <1> 	call reloadallgraphics
  1687 000010C7 E840160000          <1> 	call termcopy
  1688                              <1> %endif
  1689                              <1> returnunhandgui:
  1690 000010CC E9561A0000          <1> 	jmp nwcmd
  1691 000010D1 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1692 000010DA 737420616E79207072- <1>
  1693 000010E3 6F626C656D7320696E- <1>
  1694 000010EC 207468652049737375- <1>
  1695 000010F5 65732073656374696F- <1>
  1696 000010FE 6E20617420736F6C6C- <1>
  1697 00001107 65726F732E676F6F67- <1>
  1698 00001110 6C65636F64652E636F- <1>
  1699 00001119 6D0A                <1>
  1700 0000111B 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1701 00001124 206B657920746F2072- <1>
  1702 0000112D 657475726E20746F20- <1>
  1703 00001136 536F6C6C65724F530A- <1>
  1704 0000113F 00                  <1>
  1705                              <1> expdump:
  1706 00001140 8B35[AF110000]      <1> 	mov esi, [esiloc]
  1707 00001146 89F7                <1> 	mov edi, esi
  1708 00001148 81C70F000000        <1> 	add edi, 15
  1709 0000114E 81C604000000        <1> 	add esi, 4
  1710 00001154 893D[AF110000]      <1> 	mov [esiloc], edi
  1711 0000115A 81EF03000000        <1> 	sub edi, 3
  1712 00001160 E8291E0000          <1> 	call converthex
  1713 00001165 81EE04000000        <1> 	sub esi, 4
  1714                              <1> %ifdef gui.included
  1715 0000116B 803D[48A20000]00    <1> 	cmp byte [guion], 0
  1716 00001172 0F8429000000        <1> 	je near expdumptext
  1717 00001178 668B0D[B7110000]    <1> 	mov cx, [locunhandy]
  1718 0000117F 668B15[B9110000]    <1> 	mov dx, [locunhandx]
  1719 00001186 66B80100            <1> 	mov ax, 1
  1720 0000118A 6631DB              <1> 	xor bx, bx
  1721 0000118D E8B0610000          <1> 	call showstring2
  1722 00001192 66890D[B7110000]    <1> 	mov [locunhandy], cx
  1723 00001199 668915[B9110000]    <1> 	mov [locunhandx], dx
  1724 000011A0 C3                  <1> 	ret
  1725                              <1> %endif
  1726                              <1> expdumptext:
  1727 000011A1 E8B40B0000          <1> 	call print
  1728 000011A6 C3                  <1> 	ret
  1729 000011A7 00000000            <1> esploc dd 0
  1730 000011AB 00000000            <1> espfirst dd 0
  1731 000011AF 00000000            <1> esiloc dd 0
  1732 000011B3 00000000            <1> esiregbuf dd 0
  1733 000011B7 0100                <1> locunhandy dw 1
  1734 000011B9 0100                <1> locunhandx dw 1
  1735 000011BB 0000                <1> backgroundcache dw 0
  1736 000011BD 00                  <1> intprob db 0
  1737 000011BE 00000000            <1> codeloc dd 0
  1738 000011C2 00000000            <1> codelocend dd 0
  1739 000011C6 000000000000        <1> igdtcache dw 0,0,0
  1740                              <1> 	unhandmsg:	
  1741 000011CC 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1742 000011D5 303030FF0A00        <1>
  1743                              <1> unhndrg:
  1744 000011DB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1745 000011E4 303030202000<rept>  <1>
  1746 00001244 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1747 0000124D 303030FF0A00        <1>
  1748 00001253 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1749 0000125C 303030202000<rept>  <1>
  1750 000012BC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1751 000012C5 303030FF0A00        <1>
  1752 000012CB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1753 000012D4 303030202000<rept>  <1>
  1754 00001334 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1755 0000133D 303030FF0A00        <1>
  1756 00001343 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1757 0000134C 303030202000<rept>  <1>
  1758 000013AC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1759 000013B5 303030FF0A00        <1>
  1760                              <1> unhandregs:
  1761 000013BB 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1762 000013C4 303030202000        <1>
  1763 000013CA 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1764 000013D3 303030202000        <1>
  1765 000013D9 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1766 000013E2 303030FF0A00        <1>
  1767 000013E8 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1768 000013F1 303030202000        <1>
  1769 000013F7 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1770 00001400 303030202000        <1>
  1771 00001406 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1772 0000140F 303030202000        <1>
  1773 00001415 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1774 0000141E 303030202000        <1>
  1775 00001424 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1776 0000142D 303030FF0A00        <1>
  1777 00001433 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1778 0000143C 303030202000        <1>
  1779 00001442 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1780 0000144B 303030202000        <1>
  1781 00001451 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1782 0000145A 303030202000        <1>
  1783 00001460 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1784 00001469 303030FF0A00        <1>
  1785 0000146F 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1786 00001478 303030202000        <1>
  1787 0000147E 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1788 00001487 303030202000        <1>
  1789 0000148D 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1790 00001496 303030202000        <1>
  1791 0000149C 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1792 000014A5 303030FF0A00        <1>
  1793 000014AB 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1794 000014B4 303030202000        <1>
  1795 000014BA 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1796 000014C3 303030202000        <1>
  1797 000014C9 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1798 000014D2 303030202000        <1>
  1799 000014D8 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1800 000014E1 303030FF0A00        <1>
  1801 000014E7 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1802 000014F0 303030202000        <1>
  1803 000014F6 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1804 000014FF 303030202000        <1>
  1805 00001505 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1806 0000150E 303030202000        <1>
  1807 00001514 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1808 0000151D 303030FF0A00        <1>
  1809 00001523 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1810 0000152C 303030202000<rept>  <1>
  1811 00001541 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1812 0000154A 30303020FF00        <1>
  1813 00001550 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1814 00001559 3030305D2000        <1>
  1815 0000155F FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1816 00001568 303030202000<rept>  <1>
  1817 0000158C FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1818 00001595 303030FF0A00        <1>
  1819                              <1> unhandmsgend:
  1820                              <1> 
  1821                              <1> errortypes:
  1822 0000159B [DF150000]          <1> 			dd err0
  1823 0000159F [43160000]          <1> 			dd err1
  1824 000015A3 [A4160000]          <1> 			dd err2
  1825 000015A7 [F9160000]          <1> 			dd err3
  1826 000015AB [5D170000]          <1> 			dd err4
  1827 000015AF [AF170000]          <1> 			dd err5
  1828 000015B3 [19180000]          <1> 			dd err6
  1829 000015B7 [81180000]          <1> 			dd err7
  1830 000015BB [CB180000]          <1> 			dd err8
  1831 000015BF [28190000]          <1> 			dd err9
  1832 000015C3 [81190000]          <1> 			dd err10
  1833 000015C7 [CC190000]          <1> 			dd err11
  1834 000015CB [1C1A0000]          <1> 			dd err12
  1835 000015CF [751A0000]          <1> 			dd err13
  1836 000015D3 [D81A0000]          <1> 			dd err14
  1837 000015D7 [141B0000]          <1> 			dd err15
  1838                              <1> errortypesend:
  1839 000015DB [9F1B0000]          <1> 			dd unknownerror
  1840                              <1> 			
  1841 000015DF 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1842 000015E8 6279207A65726F3A0A  <1>
  1843 000015F1 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1844 000015FA 6C79206C696D2061F6- <1>
  1845 00001603 78203D20EC20776865- <1>
  1846 0000160C 6E206120697320616E- <1>
  1847 00001615 79207265616C206E75- <1>
  1848 0000161E 6D6265722E20486170- <1>
  1849 00001627 707920456173746572- <1>
  1850 00001630 210A                <1>
  1851 00001632 202020202020202020- <1> 		db "            x",26,"0",10,0
  1852 0000163B 202020781A300A00    <1>
  1853                              <1> 		
  1854 00001643 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1855 0000164C 65702F427265616B70- <1>
  1856 00001655 6F696E743A0A        <1>
  1857 0000165B 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1858 00001664 696E74206661756C74- <1>
  1859 0000166D 2C20627265616B706F- <1>
  1860 00001676 696E7420747261702C- <1>
  1861 0000167F 206F722073696E676C- <1>
  1862 00001688 652D73746570207472- <1>
  1863 00001691 617020776173207472- <1>
  1864 0000169A 696767657265642E0A- <1>
  1865 000016A3 00                  <1>
  1866                              <1> 		
  1867 000016A4 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1868 000016AD 6C6520696E74657272- <1>
  1869 000016B6 7570743A0A          <1>
  1870 000016BB 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1871 000016C4 6520696E7465727275- <1>
  1872 000016CD 707420776173207472- <1>
  1873 000016D6 696767657265642074- <1>
  1874 000016DF 68617420636F756C64- <1>
  1875 000016E8 206E6F74206265206D- <1>
  1876 000016F1 61736B65642E0A00    <1>
  1877                              <1> 		
  1878 000016F9 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1879 00001702 743A0A              <1>
  1880 00001705 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1881 0000170E 727275707420697320- <1>
  1882 00001717 7573656420696E2070- <1>
  1883 00001720 726F6772616D732074- <1>
  1884 00001729 6F2073686F77207468- <1>
  1885 00001732 6520737461636B2061- <1>
  1886 0000173B 6E6420726567697374- <1>
  1887 00001744 65727320616E642063- <1>
  1888 0000174D 616E2062650A        <1>
  1889 00001753 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1890 0000175C 00                  <1>
  1891                              <1> 		
  1892 0000175D 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1893 00001766 0A                  <1>
  1894 00001767 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1895 00001770 73736F722072616E20- <1>
  1896 00001779 696E746F20616E2049- <1>
  1897 00001782 4E544F20696E737472- <1>
  1898 0000178B 756374696F6E207769- <1>
  1899 00001794 746820746865206F76- <1>
  1900 0000179D 6572666C6F7720666C- <1>
  1901 000017A6 6167207365742E0A00  <1>
  1902                              <1> 		
  1903 000017AF 426F756E6473206368- <1> err5	db "Bounds check:",10
  1904 000017B8 65636B3A0A          <1>
  1905 000017BD 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1906 000017C6 73736F72207265626F- <1>
  1907 000017CF 756E6465642066726F- <1>
  1908 000017D8 6D206120424F554E44- <1>
  1909 000017E1 20696E737472756374- <1>
  1910 000017EA 696F6E2072756E206F- <1>
  1911 000017F3 6E20616E206F706572- <1>
  1912 000017FC 616E64207468617420- <1>
  1913 00001805 776173206F75740A    <1>
  1914 0000180D 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1915 00001816 2E0A00              <1>
  1916                              <1> 		
  1917 00001819 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1918 00001822 70636F64653A0A      <1>
  1919 00001829 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1920 00001832 73736F722068617320- <1>
  1921 0000183B 6E6F20696465612077- <1>
  1922 00001844 686174206974207761- <1>
  1923 0000184D 7320747279696E6720- <1>
  1924 00001856 746F20657865637574- <1>
  1925 0000185F 652E20446F6E277420- <1>
  1926 00001868 72756E205353453420- <1>
  1927 00001871 636F64650A          <1>
  1928 00001876 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1929 0000187F 0A00                <1>
  1930                              <1> 		
  1931 00001881 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1932 0000188A 6F72206E6F74206176- <1>
  1933 00001893 61696C61626C653A0A  <1>
  1934 0000189C 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1935 000018A5 206B6E6F7720746865- <1>
  1936 000018AE 7920646F6E2774206D- <1>
  1937 000018B7 616B652074686F7365- <1>
  1938 000018C0 20616E796D6F726521- <1>
  1939 000018C9 0A00                <1>
  1940                              <1> 		
  1941 000018CB 446F75626C65206661- <1> err8	db "Double fault:",10
  1942 000018D4 756C743A0A          <1>
  1943 000018D9 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1944 000018E2 74696F6E2068616E64- <1>
  1945 000018EB 6C657220636F756C64- <1>
  1946 000018F4 206E6F742068616E64- <1>
  1947 000018FD 6C6520746861742069- <1>
  1948 00001906 7420636F756C64206E- <1>
  1949 0000190F 6F742068616E646C65- <1>
  1950 00001918 20616E206578636570- <1>
  1951 00001921 74696F6E2E0A00      <1>
  1952                              <1> 		
  1953 00001928 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1954 00001931 6F72207365676D656E- <1>
  1955 0000193A 74206F76657272756E- <1>
  1956 00001943 3A0A00              <1>
  1957 00001946 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1958 0000194F 722068617070656E73- <1>
  1959 00001958 20696E206D6F646572- <1>
  1960 00001961 6E20636F6D70757465- <1>
  1961 0000196A 72732C20616E64206E- <1>
  1962 00001973 657665722073686F75- <1>
  1963 0000197C 6C642E0A00          <1>
  1964                              <1> 
  1965 00001981 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1966 0000198A 53533A0A            <1>
  1967 0000198E 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1968 00001997 686174207761732073- <1>
  1969 000019A0 776974636865642074- <1>
  1970 000019A9 6F20697320696E7661- <1>
  1971 000019B2 6C69642E204E6F7468- <1>
  1972 000019BB 696E672066756E6E79- <1>
  1973 000019C4 20686572652E0A00    <1>
  1974                              <1> 		
  1975 000019CC 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1976 000019D5 6F742070726573656E- <1>
  1977 000019DE 743A0A              <1>
  1978 000019E1 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1979 000019EA 6E7420626974206F66- <1>
  1980 000019F3 20746865207365676D- <1>
  1981 000019FC 656E74206465736372- <1>
  1982 00001A05 6970746F7220697320- <1>
  1983 00001A0E 73657420746F207A65- <1>
  1984 00001A17 726F2E0A00          <1>
  1985                              <1> 		
  1986 00001A1C 537461636B20657863- <1> err12	db "Stack exception:",10
  1987 00001A25 657074696F6E3A0A    <1>
  1988 00001A2D 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1989 00001A36 7363726970746F7220- <1>
  1990 00001A3F 697320696E76616C69- <1>
  1991 00001A48 64206F72206E6F7420- <1>
  1992 00001A51 70726573656E74206F- <1>
  1993 00001A5A 7220697473206C696D- <1>
  1994 00001A63 697420697320746F6F- <1>
  1995 00001A6C 20736D616C6C2E0A00  <1>
  1996                              <1> 		
  1997 00001A75 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1998 00001A7E 726F74656374696F6E- <1>
  1999 00001A87 2076696F6C6174696F- <1>
  2000 00001A90 6E3A0A              <1>
  2001 00001A93 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2002 00001A9C 746564207468652063- <1>
  2003 00001AA5 6F6D70757465722E20- <1>
  2004 00001AAE 537465702061776179- <1>
  2005 00001AB7 20736C6F776C792E20- <1>
  2006 00001AC0 546865204642492069- <1>
  2007 00001AC9 73206F6E2069747320- <1>
  2008 00001AD2 7761792E0A00        <1>
  2009                              <1> 		
  2010 00001AD8 50616765206661756C- <1> err14	db "Page fault:",10
  2011 00001AE1 743A0A              <1>
  2012 00001AE4 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2013 00001AED 746861742077617320- <1>
  2014 00001AF6 726571756573746564- <1>
  2015 00001AFF 20776173206E6F7420- <1>
  2016 00001B08 617661696C61626C65- <1>
  2017 00001B11 2E0A00              <1>
  2018                              <1> 		
  2019 00001B14 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2020 00001B1D 666F7220506C616E20- <1>
  2021 00001B26 523A0A              <1>
  2022 00001B29 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2023 00001B32 727275707420697320- <1>
  2024 00001B3B 726573657276656420- <1>
  2025 00001B44 666F72207573616765- <1>
  2026 00001B4D 206F6E6C7920627920- <1>
  2027 00001B56 746865206D696C6974- <1>
  2028 00001B5F 617279207768656E20- <1>
  2029 00001B68 6974206973206E6563- <1>
  2030 00001B71 6573736172790A      <1>
  2031 00001B78 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2032 00001B81 746520612066756C6C- <1>
  2033 00001B8A 2D7363616C6520636F- <1>
  2034 00001B93 757020642782746174- <1>
  2035 00001B9C 2E0A00              <1>
  2036                              <1> 		
  2037 00001B9F 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2038 00001BA8 68656C6C206A757374- <1>
  2039 00001BB1 2068617070656E6564- <1>
  2040 00001BBA 3F2049732065766572- <1>
  2041 00001BC3 796F6E65206F6B6179- <1>
  2042 00001BCC 3F2048617264206472- <1>
  2043 00001BD5 6976653F2056696465- <1>
  2044 00001BDE 6F20636172643F0A    <1>
  2045 00001BE6 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2046 00001BEF 726520796F75207468- <1>
  2047 00001BF8 6572653F0A00        <1>
  2048                              <1> %else
  2049                              <1> unhand:	
  2050                              <1> 	%assign i 0
  2051                              <1> 	%rep 32
  2052                              <1> 	mov byte [intprob], i
  2053                              <1> 	jmp unhand2
  2054                              <1> 	%assign i i+1
  2055                              <1> 	%endrep
  2056                              <1> unhand2:
  2057                              <1> 	cmp byte [intprob], 3
  2058                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2059                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2060                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2061                              <1> 	mov bl, [intprob]
  2062                              <1> 	jmp exitprog
  2063                              <1> intprob db 0
  2064                              <1> %endif
  2065                                      %include "source/ints.asm"
  2066                              <1> newints:	;for great justice
  2067 00001BFE 80FC00              <1> 	cmp ah, 0
  2068 00001C01 0F84A3000000        <1> 	je near exitprog   ;kills app
  2069 00001C07 80FC01              <1> 	cmp ah, 1
  2070 00001C0A 0F8422010000        <1> 	je near prntstr  ;print string
  2071 00001C10 80FC02              <1> 	cmp ah, 2
  2072 00001C13 0F8474010000        <1> 	je near readstr	;read string
  2073 00001C19 80FC03              <1> 	cmp ah, 3
  2074 00001C1C 0F8494010000        <1> 	je near clearscrn	;clear screen
  2075 00001C22 80FC04              <1> 	cmp ah, 4
  2076 00001C25 0F8406020000        <1> 	je near prntreadstr	;read and print string
  2077 00001C2B 80FC05              <1> 	cmp ah, 5
  2078 00001C2E 0F84EA050000        <1> 	je near readchar	;get char
  2079 00001C34 80FC06              <1> 	cmp ah, 6
  2080 00001C37 0F843C060000        <1> 	je near prntchar	;print char
  2081 00001C3D 80FC07              <1> 	cmp ah, 7
  2082 00001C40 0F8434080000        <1> 	je near openfile	;read file
  2083                              <1> ;	cmp ah, 8
  2084                              <1> ;	je near closefile	;close file
  2085 00001C46 80FC09              <1> 	cmp ah, 9
  2086 00001C49 0F8435080000        <1> 	je near num2str	;convert number to string
  2087 00001C4F 80FC0A              <1> 	cmp ah, 10
  2088 00001C52 0F8444080000        <1> 	je near str2num	;convert string to number
  2089                              <1> %ifdef threads.included
  2090 00001C58 80FC0B              <1> 	cmp ah, 11
  2091 00001C5B 0F8447080000        <1> 	je near forkthread	;create thread
  2092                              <1> %endif
  2093 00001C61 80FC0C              <1> 	cmp ah, 12
  2094 00001C64 0F8415090000        <1> 	je near gettime	;get time
  2095 00001C6A 80FC0D              <1> 	cmp ah, 13
  2096 00001C6D 0F8421090000        <1> 	je near settime	;set time
  2097 00001C73 80FC0E              <1> 	cmp ah, 14
  2098 00001C76 0F8428090000        <1> 	je near runcmd	;run program
  2099 00001C7C 80FC0F              <1> 	cmp ah, 15
  2100 00001C7F 0F8434090000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2101 00001C85 80FC10              <1> 	cmp ah, 16
  2102 00001C88 0F8456090000        <1> 	je near hooksig	;hook code to a signal
  2103                              <1> %ifdef gui.included
  2104 00001C8E 80FC11              <1> 	cmp ah, 17
  2105 00001C91 0F845D090000        <1> 	je near guiint	;GUI operations
  2106                              <1> %endif
  2107                              <1> %ifdef sound.included
  2108 00001C97 80FC12              <1> 	cmp ah, 18
  2109 00001C9A 0F8454090000        <1> 	je near guiint	;sound operations
  2110                              <1> %endif
  2111                              <1> %ifdef network.included
  2112 00001CA0 80FC13              <1> 	cmp ah, 19
  2113 00001CA3 0F845E0A0000        <1> 	je near netint	;networking operations
  2114                              <1> %endif
  2115 00001CA9 CF                  <1> 	iret
  2116                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2117                              <2> exitprog:
  2118 00001CAA 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2119 00001CAE 8ED8                <2> 	mov ds, ax
  2120 00001CB0 8EC0                <2> 	mov es, ax
  2121 00001CB2 8EE0                <2> 	mov fs, ax
  2122 00001CB4 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2123 00001CB8 8EE8                <2> 	mov gs, ax
  2124 00001CBA C705[D1660000]0000- <2> 	mov dword [currentthread], 0
  2125 00001CC2 0000                <2>
  2126 00001CC4 C705[CC660000]0400- <2> 	mov dword [lastthread], 4
  2127 00001CCC 0000                <2>
  2128 00001CCE C605[D0660000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2129 00001CD5 8B25[92B80000]      <2> 	mov esp, [previousstack] ;and this
  2130 00001CDB 81FB00000000        <2> 	cmp ebx, 0
  2131 00001CE1 0F8501000000        <2> 	jne near .error
  2132 00001CE7 C3                  <2> 	ret
  2133                              <2> .error:
  2134 00001CE8 89D9                <2> 	mov ecx, ebx
  2135 00001CEA B006                <2> 	mov al, 6
  2136 00001CEC A2[EC2F0000]        <2> 	mov [firsthexshown], al
  2137 00001CF1 51                  <2> 	push ecx
  2138 00001CF2 BE[0D1D0000]        <2> 	mov esi, .msg1
  2139 00001CF7 E840000000          <2> 	call printhighlight
  2140 00001CFC 59                  <2> 	pop ecx
  2141 00001CFD E8FF120000          <2> 	call showhex
  2142 00001D02 BE[221D0000]        <2> 	mov esi, .msg2
  2143 00001D07 E830000000          <2> 	call printhighlight
  2144 00001D0C C3                  <2> 	ret
  2145                              <2> 	
  2146 00001D0D 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2147 00001D16 7461747573206F6620- <2>
  2148 00001D1F 307800              <2>
  2149 00001D22 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2150 00001D2B 726E65642E0A00      <2>
  2151                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2152                              <2> prntstr:
  2153 00001D32 E82A000000          <2> call printint
  2154 00001D37 E969E5FFFF          <2> jmp timerinterrupt
  2155                              <2> 
  2156                              <2> 	printhighlight:
  2157 00001D3C 6631C0              <2> 		xor ax, ax
  2158 00001D3F 66BBF000            <2> 		mov bx, 0xF0
  2159 00001D43 E919000000          <2> 		jmp printint
  2160                              <2> 	printquiet:
  2161 00001D48 6631C0              <2> 		xor ax, ax
  2162 00001D4B A2[8C1D0000]        <2> 		mov [endkeyprint], al
  2163 00001D50 66BB0700            <2> 		mov bx, 7
  2164 00001D54 E820000000          <2> 		call printint.b
  2165 00001D59 C3                  <2> 		ret
  2166                              <2>     print:
  2167 00001D5A 6631C0              <2> 		xor ax, ax
  2168 00001D5D 66BB0700            <2> 		mov bx, 7
  2169                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2170 00001D61 56                  <2> 		push esi
  2171 00001D62 A2[8C1D0000]        <2> 		mov [endkeyprint], al
  2172 00001D67 E80D000000          <2> 		call .b
  2173 00001D6C 89F1                <2> 		mov ecx, esi
  2174 00001D6E 5F                  <2> 		pop edi
  2175 00001D6F 29F9                <2> 		sub ecx, edi
  2176 00001D71 51                  <2> 		push ecx
  2177 00001D72 E895090000          <2> 		call termcopy
  2178 00001D77 59                  <2> 		pop ecx
  2179 00001D78 C3                  <2> 		ret
  2180                              <2> 	.b:
  2181 00001D79 8A06                <2> 		mov al, [esi]
  2182 00001D7B 3A05[8C1D0000]      <2> 		cmp al, [endkeyprint]
  2183 00001D81 7408                <2> 		je .done
  2184 00001D83 E816050000          <2> 		call prcharq
  2185 00001D88 46                  <2> 		inc esi
  2186 00001D89 EBEE                <2> 		jmp .b
  2187                              <2> 	.done:
  2188 00001D8B C3                  <2> 		ret
  2189                              <2> 
  2190 00001D8C 00                  <2> endkeyprint db 0
  2191                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2192                              <2> readstr:
  2193 00001D8D E805000000          <2> call readint
  2194 00001D92 E90EE5FFFF          <2> jmp timerinterrupt
  2195                              <2> 
  2196                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2197 00001D97 89C3                <2> 		mov ebx, eax
  2198                              <2> 	.b:
  2199 00001D99 53                  <2> 		push ebx
  2200 00001D9A 57                  <2> 		push edi
  2201 00001D9B 56                  <2> 		push esi
  2202 00001D9C 30C0                <2> 		xor al, al
  2203 00001D9E E887040000          <2> 		call rdcharint
  2204 00001DA3 5E                  <2> 		pop esi
  2205 00001DA4 8806                <2> 		mov [esi], al
  2206 00001DA6 46                  <2> 		inc esi
  2207 00001DA7 5F                  <2> 		pop edi
  2208 00001DA8 5B                  <2> 		pop ebx
  2209 00001DA9 39FE                <2> 		cmp esi, edi
  2210 00001DAB 7304                <2> 		jae .done
  2211 00001DAD 38D8                <2> 		cmp al, bl
  2212 00001DAF 75E8                <2> 		jne .b
  2213                              <2> 	.done:
  2214 00001DB1 4E                  <2> 		dec esi
  2215 00001DB2 C60600              <2> 		mov byte [esi], 0
  2216 00001DB5 C3                  <2> 		ret
  2217                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2218                              <2> clearscrn:
  2219 00001DB6 E805000000          <2> call clear
  2220 00001DBB E9E5E4FFFF          <2> jmp timerinterrupt
  2221                              <2> %ifdef io.serial
  2222                              <2> clear:
  2223                              <2> 	ret
  2224                              <2> %else
  2225                              <2> clear:		
  2226 00001DC0 668B0D[76240000]    <2> 		mov cx, [charxy]
  2227 00001DC7 BF[28D60000]        <2> 		mov edi, videobuf
  2228 00001DCC 31C0                <2> 		xor eax, eax
  2229 00001DCE A3[6C240000]        <2> 		mov [linebeginpos], eax
  2230 00001DD3 A3[70240000]        <2> 		mov [videobufpos], eax
  2231 00001DD8 6631D2              <2> 		xor dx, dx
  2232 00001DDB 66A3[74240000]      <2> 		mov [charpos], ax
  2233 00001DE1 B407                <2> 		mov ah, 7
  2234                              <2> 	clearb:
  2235 00001DE3 668907              <2> 		mov [edi], ax
  2236 00001DE6 81C702000000        <2> 		add edi, 2
  2237 00001DEC FEC9                <2> 		dec cl
  2238 00001DEE 80F900              <2> 		cmp cl, 0
  2239 00001DF1 75F0                <2> 		jne clearb
  2240 00001DF3 8A0D[76240000]      <2> 		mov cl, [charxy]
  2241 00001DF9 FECD                <2> 		dec ch
  2242 00001DFB 80FD00              <2> 		cmp ch, 0
  2243 00001DFE 75E3                <2> 		jne clearb
  2244                              <2> 	cleardouble:
  2245 00001E00 BF[CC400100]        <2> 		mov edi, videobuf2
  2246 00001E05 668B0D[76240000]    <2> 		mov cx, [charxy]
  2247 00001E0C 31C0                <2> 		xor eax, eax
  2248                              <2> 	clearc:
  2249 00001E0E 668907              <2> 		mov [edi], ax
  2250 00001E11 81C702000000        <2> 		add edi, 2
  2251 00001E17 FEC9                <2> 		dec cl
  2252 00001E19 80F900              <2> 		cmp cl, 0
  2253 00001E1C 75F0                <2> 		jne clearc
  2254 00001E1E 8A0D[76240000]      <2> 		mov cl, [charxy]
  2255 00001E24 FECD                <2> 		dec ch
  2256 00001E26 80FD00              <2> 		cmp ch, 0
  2257 00001E29 75E3                <2> 		jne clearc
  2258 00001E2B E8DC080000          <2> 		call termcopy
  2259 00001E30 C3                  <2> 		ret
  2260                              <2> %endif
  2261                              <2> 		
  2262                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2263                              <2> prntreadstr:
  2264 00001E31 E809000000          <2> call rdprint
  2265 00001E36 E96AE4FFFF          <2> jmp timerinterrupt
  2266                              <2> 
  2267                              <2> readline:
  2268 00001E3B B00A                <2>   mov al, 10
  2269 00001E3D B307                <2>   mov bl, 7
  2270                              <2> rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2271 00001E3F E80D000000          <2> 	call rdprintdos
  2272 00001E44 50                  <2> 	push eax
  2273 00001E45 A0[0B220000]        <2> 	mov al, [endkeyrdpr]
  2274 00001E4A E83E040000          <2> 	call prcharint
  2275 00001E4F 58                  <2> 	pop eax
  2276 00001E50 C3                  <2> 	ret
  2277                              <2> 
  2278                              <2> 	rdprintdos:
  2279 00001E51 8935[13220000]      <2> 		mov [buftxtloc], esi
  2280 00001E57 A2[0B220000]        <2> 		mov [endkeyrdpr], al
  2281 00001E5C 881D[0C220000]      <2> 		mov [modkeyrdpr], bl
  2282 00001E62 8935[0D220000]      <2> 		mov [firstesirdpr], esi
  2283 00001E68 893D[17220000]      <2> 		mov [endbufferrdpr], edi
  2284 00001E6E 8B3D[7CAB0100]      <2> 		mov edi, [commandsentered]
  2285 00001E74 893D[78AB0100]      <2> 		mov [commandlistentries], edi
  2286                              <2> 	rdprintb:
  2287 00001E7A 56                  <2> 		push esi
  2288 00001E7B B001                <2> 		mov al, 1
  2289 00001E7D E8A8030000          <2> 		call rdcharint
  2290 00001E82 5E                  <2> 		pop esi
  2291                              <2> %ifdef io.serial
  2292                              <2> 		cmp ah, 0x41
  2293                              <2> 		je near rdprup
  2294                              <2> 		cmp ah, 0x42
  2295                              <2> 		je near rdprdown
  2296                              <2> 		cmp ah, 0x43
  2297                              <2> 		je near rdprright
  2298                              <2> 		cmp ah, 0x44
  2299                              <2> 		je near rdprleft
  2300                              <2> 		cmp ah, 0x31
  2301                              <2> 		je near rdprhome
  2302                              <2> 		cmp ah, 0x48
  2303                              <2> 		je near rdprhome
  2304                              <2> 		cmp ah, 0x46
  2305                              <2> 		je near rdprend
  2306                              <2> 		cmp ah, 0x33
  2307                              <2> 		je near rdprdel
  2308                              <2> 		cmp ah, 0x34
  2309                              <2> 		je near rdprend
  2310                              <2> %else
  2311 00001E83 803D[C75D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2312 00001E8A 751B                <2> 		jne notspecialrdprnt
  2313 00001E8C 80FC53              <2> 		cmp ah, 0x53
  2314 00001E8F 0F841E030000        <2> 		je near rdprdel
  2315 00001E95 80FC47              <2> 		cmp ah, 0x47
  2316 00001E98 0F8407010000        <2> 		je near rdprhome
  2317 00001E9E 80FC4F              <2> 		cmp ah, 0x4F
  2318 00001EA1 0F841D010000        <2> 		je near rdprend
  2319                              <2> 	notspecialrdprnt:
  2320 00001EA7 80FC50              <2> 		cmp ah, 0x50
  2321 00001EAA 0F849B010000        <2> 		je near rdprdown
  2322 00001EB0 80FC4D              <2> 		cmp ah, 0x4D
  2323 00001EB3 0F844A010000        <2> 		je near rdprright
  2324 00001EB9 80FC4B              <2> 		cmp ah, 0x4B
  2325 00001EBC 0F841F010000        <2> 		je near rdprleft
  2326 00001EC2 80FC48              <2> 		cmp ah, 0x48
  2327 00001EC5 0F84C3010000        <2> 		je near rdprup
  2328                              <2> %endif
  2329 00001ECB 3C08                <2> 		cmp al, 8
  2330 00001ECD 0F84FB020000        <2> 		je near rdprbscheck
  2331 00001ED3 3C00                <2> 		cmp al, 0
  2332 00001ED5 74A3                <2> 		je rdprintb
  2333 00001ED7 80FC00              <2> 		cmp ah, 0
  2334 00001EDA 749E                <2> 		je rdprintb
  2335 00001EDC 8806                <2> 		mov [esi], al
  2336 00001EDE 46                  <2> 		inc esi
  2337                              <2> 	bscheckequal:
  2338 00001EDF 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2339 00001EE5 8A3D[12220000]      <2> 		mov bh, [txtmask]
  2340 00001EEB 80FF00              <2> 		cmp bh, 0
  2341 00001EEE 7404                <2> 		je nomasktxt
  2342 00001EF0 88F8                <2> 		mov al, bh
  2343 00001EF2 30FF                <2> 		xor bh, bh
  2344                              <2> 	nomasktxt:
  2345 00001EF4 56                  <2> 		push esi
  2346 00001EF5 66A3[09220000]      <2> 		mov [axcache], ax
  2347 00001EFB 8A25[0B220000]      <2> 		mov ah, [endkeyrdpr]
  2348 00001F01 38E0                <2> 		cmp al, ah
  2349 00001F03 742E                <2> 		je nobackprintbuftxt2
  2350 00001F05 E883030000          <2> 		call prcharint
  2351 00001F0A BE[12CB0000]        <2> 		mov esi, buftxt2
  2352 00001F0F E834FEFFFF          <2> 		call printquiet
  2353 00001F14 B020                <2> 		mov al, " "
  2354 00001F16 E883030000          <2> 		call prcharq
  2355 00001F1B B008                <2> 		mov al, 8
  2356 00001F1D 81FE[12CB0000]      <2> 		cmp esi, buftxt2
  2357 00001F23 740E                <2> 		je nobackprintbuftxt2
  2358                              <2> 	backprintbuftxt2:
  2359 00001F25 E874030000          <2> 		call prcharq
  2360 00001F2A 4E                  <2> 		dec esi
  2361 00001F2B 81FE[12CB0000]      <2> 		cmp esi, buftxt2
  2362 00001F31 77F2                <2> 		ja backprintbuftxt2
  2363                              <2> 	nobackprintbuftxt2:
  2364 00001F33 3C0A                <2> 		cmp al, 10
  2365 00001F35 7405                <2> 		je nonobackprint
  2366 00001F37 E851030000          <2> 		call prcharint
  2367                              <2> 	nonobackprint:
  2368 00001F3C 5E                  <2> 		pop esi
  2369 00001F3D 3B35[17220000]      <2> 		cmp esi, [endbufferrdpr]
  2370 00001F43 0F8319000000        <2> 		jae near donerdprinc
  2371 00001F49 66A1[09220000]      <2> 		mov ax, [axcache]
  2372 00001F4F 8A25[0B220000]      <2> 		mov ah, [endkeyrdpr]
  2373 00001F55 38E0                <2> 		cmp al, ah
  2374 00001F57 0F851DFFFFFF        <2> 		jne rdprintb
  2375 00001F5D E901000000          <2> 		jmp donerdprint
  2376                              <2> 	donerdprinc:
  2377 00001F62 46                  <2> 		inc esi
  2378                              <2> 	donerdprint:
  2379 00001F63 4E                  <2> 		dec esi
  2380 00001F64 BF[12CB0000]        <2> 		mov edi, buftxt2
  2381                              <2> 	copylaterstuff:
  2382 00001F69 8A07                <2> 		mov al, [edi]
  2383 00001F6B 3C00                <2> 		cmp al, 0
  2384 00001F6D 7406                <2> 		je nocopylaterstuff
  2385 00001F6F 8806                <2> 		mov [esi], al
  2386 00001F71 47                  <2> 		inc edi
  2387 00001F72 46                  <2> 		inc esi
  2388 00001F73 EBF4                <2> 		jmp copylaterstuff
  2389                              <2> 	nocopylaterstuff:
  2390 00001F75 C60600              <2> 		mov byte [esi], 0
  2391 00001F78 E80B000000          <2> 		call clearbuftxt2
  2392 00001F7D 89F1                <2> 		mov ecx, esi
  2393 00001F7F 8B3D[0D220000]      <2> 		mov edi, [firstesirdpr]
  2394 00001F85 29F9                <2> 		sub ecx, edi
  2395 00001F87 C3                  <2> 		ret
  2396                              <2> 	
  2397                              <2> 	clearbuftxt2:
  2398 00001F88 30C0                <2> 		xor al, al
  2399 00001F8A BF[12CB0000]        <2> 		mov edi, buftxt2
  2400                              <2> 	clearbuftxt2lp:
  2401 00001F8F 8807                <2> 		mov [edi], al
  2402 00001F91 47                  <2> 		inc edi
  2403 00001F92 81FF[12CF0000]      <2> 		cmp edi, buftxt
  2404 00001F98 75F5                <2> 		jne clearbuftxt2lp
  2405 00001F9A C3                  <2> 		ret
  2406                              <2> 	
  2407                              <2> 	rdprintb2:
  2408 00001F9B E86C070000          <2> 		call termcopy
  2409 00001FA0 E9D5FEFFFF          <2> 		jmp rdprintb
  2410                              <2> 	
  2411                              <2> 	rdprhome:
  2412 00001FA5 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2413 00001FAB 0F84EAFFFFFF        <2> 		je near rdprintb2
  2414 00001FB1 BF[12CB0000]        <2> 		mov edi, buftxt2
  2415 00001FB6 8A07                <2> 		mov al, [edi]
  2416 00001FB8 E82F020000          <2> 		call shiftbuftxt2
  2417 00001FBD E8DC020000          <2> 		call prcharq
  2418 00001FC2 EBE1                <2> 		jmp rdprhome
  2419                              <2> 		
  2420                              <2> 	rdprend:
  2421 00001FC4 BF[12CB0000]        <2> 		mov edi, buftxt2
  2422 00001FC9 8A07                <2> 		mov al, [edi]
  2423 00001FCB 3C00                <2> 		cmp al, 0
  2424 00001FCD 0F84C8FFFFFF        <2> 		je near rdprintb2
  2425 00001FD3 8806                <2> 		mov [esi], al
  2426 00001FD5 E849000000          <2> 		call shiftbuftxt2lft
  2427 00001FDA E8BF020000          <2> 		call prcharq
  2428 00001FDF EBE3                <2> 		jmp rdprend
  2429                              <2> 	
  2430                              <2> 	rdprleft:
  2431 00001FE1 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2432 00001FE7 0F848DFEFFFF        <2> 		je near rdprintb
  2433 00001FED BF[12CB0000]        <2> 		mov edi, buftxt2
  2434 00001FF2 8A07                <2> 		mov al, [edi]
  2435 00001FF4 E8F3010000          <2> 		call shiftbuftxt2
  2436 00001FF9 E88F020000          <2> 		call prcharint
  2437 00001FFE E977FEFFFF          <2> 		jmp rdprintb
  2438                              <2> 		
  2439                              <2> 	rdprright:
  2440 00002003 BF[12CB0000]        <2> 		mov edi, buftxt2
  2441 00002008 8A07                <2> 		mov al, [edi]
  2442 0000200A 3C00                <2> 		cmp al, 0
  2443 0000200C 0F8468FEFFFF        <2> 		je near rdprintb
  2444 00002012 8806                <2> 		mov [esi], al
  2445 00002014 E80A000000          <2> 		call shiftbuftxt2lft
  2446 00002019 E86F020000          <2> 		call prcharint
  2447 0000201E E957FEFFFF          <2> 		jmp rdprintb
  2448                              <2> 	shiftbuftxt2lft:
  2449 00002023 3C00                <2> 		cmp al, 0
  2450 00002025 7408                <2> 		je noshiftbuftxt2lft
  2451 00002027 47                  <2> 		inc edi
  2452 00002028 8A07                <2> 		mov al, [edi]
  2453 0000202A 8847FF              <2> 		mov [edi - 1], al
  2454 0000202D EBF4                <2> 		jmp shiftbuftxt2lft
  2455                              <2> 	noshiftbuftxt2lft:
  2456 0000202F 8A06                <2> 		mov al, [esi]
  2457 00002031 46                  <2> 		inc esi
  2458 00002032 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2459 00002038 C3                  <2> 		ret
  2460                              <2> 		
  2461                              <2> 	rdprdownbck:
  2462 00002039 FECC                <2> 		dec ah
  2463 0000203B 8825[11220000]      <2> 		mov [commandedit], ah
  2464 00002041 E88D000000          <2> 		call rdprbckspc
  2465 00002046 E92FFEFFFF          <2> 		jmp rdprintb
  2466                              <2> 	
  2467                              <2> 	rdprdown:
  2468 0000204B 8A25[11220000]      <2> 		mov ah, [commandedit]
  2469 00002051 80FC01              <2> 		cmp ah, 1
  2470 00002054 0F8620FEFFFF        <2> 		jbe near rdprintb
  2471 0000205A 8B3D[7CAB0100]      <2> 		mov edi, [commandsentered]
  2472 00002060 3B3D[78AB0100]      <2> 		cmp edi, [commandlistentries]
  2473 00002066 7618                <2> 		jbe .nofix
  2474 00002068 8105[78AB0100]0200- <2> 		add dword [commandlistentries], 2
  2475 00002070 0000                <2>
  2476 00002072 3B3D[78AB0100]      <2> 		cmp edi, [commandlistentries]
  2477 00002078 7706                <2> 		ja .nofix
  2478 0000207A 893D[78AB0100]      <2> 		mov [commandlistentries], edi
  2479                              <2> 	.nofix:
  2480 00002080 80FC02              <2> 		cmp ah, 2
  2481 00002083 74B4                <2> 		je rdprdownbck
  2482 00002085 80EC02              <2> 		sub ah, 2
  2483 00002088 8825[11220000]      <2> 		mov [commandedit], ah
  2484                              <2> 		
  2485                              <2> 	rdprup:
  2486 0000208E 3805[11220000]      <2> 		cmp [commandedit], al
  2487 00002094 0F84E0FDFFFF        <2> 		je near rdprintb
  2488 0000209A 813D[78AB0100]0000- <2> 		cmp dword [commandlistentries], 0
  2489 000020A2 0000                <2>
  2490 000020A4 0F84D0FDFFFF        <2> 		je near rdprintb
  2491 000020AA FF0D[78AB0100]      <2> 		dec dword [commandlistentries]
  2492                              <2> 	.lp:
  2493 000020B0 BF[12CB0000]        <2> 		mov edi, buftxt2
  2494 000020B5 8A07                <2> 		mov al, [edi]
  2495 000020B7 3C00                <2> 		cmp al, 0
  2496 000020B9 740E                <2> 		je .start
  2497 000020BB 8806                <2> 		mov [esi], al
  2498 000020BD E861FFFFFF          <2> 		call shiftbuftxt2lft
  2499 000020C2 E8D7010000          <2> 		call prcharq
  2500 000020C7 EBE7                <2> 		jmp .lp
  2501                              <2> 	.start:
  2502 000020C9 E805000000          <2> 		call rdprbckspc
  2503 000020CE E941000000          <2> 		jmp getcurrentcommandstr
  2504                              <2> 	rdprbckspc:
  2505 000020D3 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2506 000020D9 742B                <2> 		je nordprupbck
  2507                              <2> 	rdprupbckspclp:
  2508 000020DB B008                <2> 		mov al, 8
  2509 000020DD 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2510 000020E3 E8B6010000          <2> 		call prcharq
  2511 000020E8 B020                <2> 		mov al, ' '
  2512 000020EA E8AF010000          <2> 		call prcharq
  2513 000020EF B008                <2> 		mov al, 8
  2514 000020F1 E8A8010000          <2> 		call prcharq
  2515 000020F6 4E                  <2> 		dec esi
  2516 000020F7 3B35[13220000]      <2> 		cmp esi, [buftxtloc]
  2517 000020FD 7402                <2> 		je nordprupbck2
  2518 000020FF EBDA                <2> 		jmp rdprupbckspclp
  2519                              <2> 	nordprupbck2:
  2520 00002101 E806060000          <2> 		call termcopy
  2521                              <2> 	nordprupbck:
  2522 00002106 8B3D[74AB0100]      <2> 		mov edi, [commandbufpos]
  2523 0000210C 81C7[80AB0100]      <2> 		add edi, commandbuf
  2524 00002112 4F                  <2> 		dec edi
  2525 00002113 C3                  <2> 		ret
  2526                              <2> 	getcurrentcommandstr:
  2527 00002114 8A25[11220000]      <2> 		mov ah, [commandedit]
  2528 0000211A FE05[11220000]      <2> 		inc byte [commandedit]
  2529                              <2> 	getccmdlp:
  2530 00002120 4F                  <2> 		dec edi
  2531 00002121 8A07                <2> 		mov al, [edi]
  2532 00002123 81FF[80AB0100]      <2> 		cmp edi, commandbuf
  2533 00002129 7231                <2> 		jb getcmdresetcommandbuf
  2534 0000212B 81EF[80AB0100]      <2> 		sub edi, commandbuf
  2535 00002131 3B3D[74AB0100]      <2> 		cmp edi, [commandbufpos]
  2536 00002137 0F843DFDFFFF        <2> 		je near rdprintb
  2537 0000213D 81C7[80AB0100]      <2> 		add edi, commandbuf
  2538 00002143 3C00                <2> 		cmp al, 0
  2539 00002145 75D9                <2> 		jne getccmdlp
  2540 00002147 FECC                <2> 		dec ah
  2541 00002149 80FC00              <2> 		cmp ah, 0
  2542 0000214C 77D2                <2> 		ja getccmdlp
  2543 0000214E 47                  <2> 		inc edi
  2544 0000214F 81FF[80BB0100]      <2> 		cmp edi, commandbufend
  2545 00002155 770D                <2> 		ja fixcmdbufb4morerdpr
  2546 00002157 E915000000          <2> 		jmp morerdprup
  2547                              <2> 	getcmdresetcommandbuf:
  2548 0000215C BF[80BB0100]        <2> 		mov edi, commandbufend
  2549 00002161 47                  <2> 		inc edi
  2550 00002162 EBBC                <2> 		jmp getccmdlp
  2551                              <2> 	fixcmdbufb4morerdpr:
  2552 00002164 4F                  <2> 		dec edi
  2553 00002165 81EF[80BB0100]      <2> 		sub edi, commandbufend
  2554 0000216B 81C7[80AB0100]      <2> 		add edi, commandbuf
  2555                              <2> 	morerdprup:
  2556 00002171 8A07                <2> 		mov al, [edi]
  2557 00002173 47                  <2> 		inc edi
  2558 00002174 81EF[80AB0100]      <2> 		sub edi, commandbuf
  2559 0000217A 3C00                <2> 		cmp al, 0
  2560 0000217C 0F8419FEFFFF        <2> 		je near rdprintb2
  2561 00002182 3B3D[74AB0100]      <2> 		cmp edi, [commandbufpos]
  2562 00002188 0F830DFEFFFF        <2> 		jae near rdprintb2
  2563 0000218E 81C7[80AB0100]      <2> 		add edi, commandbuf
  2564 00002194 8806                <2> 		mov [esi], al
  2565 00002196 46                  <2> 		inc esi
  2566 00002197 57                  <2> 		push edi
  2567 00002198 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2568 0000219E E8FB000000          <2> 		call prcharq
  2569 000021A3 5F                  <2> 		pop edi
  2570 000021A4 81FF[80BB0100]      <2> 		cmp edi, commandbufend
  2571 000021AA 76C5                <2> 		jbe morerdprup
  2572 000021AC BF[80AB0100]        <2> 		mov edi, commandbuf
  2573 000021B1 EBBE                <2> 		jmp morerdprup
  2574                              <2> 		
  2575                              <2> 	rdprdel:
  2576 000021B3 BF[12CB0000]        <2> 		mov edi, buftxt2
  2577 000021B8 8A07                <2> 		mov al, [edi]
  2578 000021BA 3C00                <2> 		cmp al, 0
  2579 000021BC 0F84B8FCFFFF        <2> 		je near rdprintb
  2580 000021C2 8806                <2> 		mov [esi], al
  2581 000021C4 E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2582 000021C9 E8D0000000          <2> 		call prcharq
  2583                              <2> 		
  2584                              <2> 	rdprbscheck:
  2585 000021CE 3B35[0D220000]      <2> 		cmp esi, [firstesirdpr]
  2586 000021D4 7705                <2> 		ja goodbscheck
  2587 000021D6 E99FFCFFFF          <2> 		jmp rdprintb
  2588                              <2> 	goodbscheck:
  2589 000021DB 4E                  <2> 		dec esi
  2590 000021DC C60600              <2> 		mov byte [esi], 0
  2591 000021DF 8A1D[0C220000]      <2> 		mov bl, [modkeyrdpr]
  2592 000021E5 B008                <2> 		mov al, 8
  2593 000021E7 E9F3FCFFFF          <2> 		jmp bscheckequal
  2594                              <2> 		
  2595                              <2> 	shiftbuftxt2:
  2596 000021EC 3C00                <2> 		cmp al, 0
  2597 000021EE 7409                <2> 		je noshiftbuftxt2
  2598 000021F0 47                  <2> 		inc edi
  2599 000021F1 8A27                <2> 		mov ah, [edi]
  2600 000021F3 8807                <2> 		mov [edi], al
  2601 000021F5 88E0                <2> 		mov al, ah
  2602 000021F7 EBF3                <2> 		jmp shiftbuftxt2
  2603                              <2> 	noshiftbuftxt2:
  2604 000021F9 BF[12CB0000]        <2> 		mov edi, buftxt2
  2605 000021FE 4E                  <2> 		dec esi
  2606 000021FF 8A06                <2> 		mov al, [esi]
  2607 00002201 8807                <2> 		mov [edi], al
  2608 00002203 C60600              <2> 		mov byte [esi], 0
  2609 00002206 B008                <2> 		mov al, 8
  2610 00002208 C3                  <2> 		ret
  2611                              <2> 		
  2612 00002209 0000                <2> axcache dw 0
  2613 0000220B 00                  <2> endkeyrdpr db 0
  2614 0000220C 00                  <2> modkeyrdpr db 0
  2615 0000220D 00000000            <2> firstesirdpr dd 0
  2616 00002211 00                  <2> commandedit db 0
  2617 00002212 00                  <2> txtmask db 0
  2618 00002213 00000000            <2> buftxtloc dd 0
  2619 00002217 00000000            <2> endbufferrdpr dd 0
  2620 0000221B 082000              <2> backcursor db 8," ",0
  2621                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2622                              <2> readchar:
  2623 0000221E E807000000          <2> 	call rdcharint
  2624 00002223 E97DE0FFFF          <2> 	jmp timerinterrupt
  2625                              <2> getchar:
  2626 00002228 30C0                <2> 	xor al, al
  2627                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2628 0000222A C605[78220000]01    <2> 		mov byte [trans], 1
  2629 00002231 3C00                <2> 		cmp al, 0
  2630 00002233 7507                <2> 		jne transcheck
  2631 00002235 C605[78220000]00    <2> 		mov byte [trans], 0
  2632                              <2> 	transcheck:
  2633                              <2> 	%ifdef io.serial
  2634                              <2> 		call serial.receive
  2635                              <2> 		cmp al, 13
  2636                              <2> 		je rdenter
  2637                              <2> 	%else
  2638 0000223C E8A63B0000          <2> 		call getkey
  2639 00002241 66A1[76220000]      <2> 		mov ax, [lastkey]
  2640 00002247 80FC1C              <2> 		cmp ah, 0x1C
  2641 0000224A 741F                <2> 		je rdenter
  2642                              <2> 	%endif
  2643 0000224C 8A3D[78220000]      <2> 		mov bh, [trans]
  2644 00002252 803D[C75D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2645 00002259 7504                <2> 		jne nospecialtrans
  2646 0000225B 88C3                <2> 		mov bl, al
  2647 0000225D 30C0                <2> 		xor al, al
  2648                              <2> 	nospecialtrans:
  2649 0000225F 08C7                <2> 		or bh, al
  2650 00002261 80FF00              <2> 		cmp bh, 0
  2651 00002264 74D6                <2> 		je transcheck
  2652 00002266 E90A000000          <2> 		jmp rdend
  2653                              <2> 	rdenter:
  2654 0000226B B41C                <2> 		mov ah, 0x1C
  2655 0000226D B00A                <2> 		mov al, 10
  2656 0000226F 66A3[76220000]      <2> 		mov [lastkey], ax
  2657                              <2> 	rdend:
  2658 00002275 C3                  <2> 		ret
  2659                              <2> 		
  2660 00002276 0000                <2> lastkey db 0,0
  2661 00002278 00                  <2> trans db 0
  2662                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2663                              <2> prntchar:
  2664                              <2> %ifdef io.serial
  2665                              <2> 	cmp bl, bh
  2666                              <2> 	call prcharint
  2667                              <2> 	jmp timerinterrupt
  2668                              <2> prcharint:	
  2669                              <2> prcharq:
  2670                              <2> 	call serial.send
  2671                              <2> 	ret
  2672                              <2> %else
  2673 00002279 38FB                <2> cmp bl, bh
  2674 0000227B 740A                <2> je prchar.notimer
  2675 0000227D E80B000000          <2> call prcharint
  2676 00002282 E91EE0FFFF          <2> jmp timerinterrupt
  2677                              <2> prchar.notimer:
  2678 00002287 E812000000          <2> 	call prcharq
  2679 0000228C CF                  <2> 	iret
  2680                              <2> 	
  2681                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2682 0000228D 38FB                <2> 	cmp bl, bh
  2683 0000228F 740D                <2> 	je prcharq
  2684 00002291 E808000000          <2> 	call prcharq
  2685 00002296 E871040000          <2> 	call termcopy
  2686 0000229B C3                  <2> 	ret
  2687 0000229C 00                  <2> termguion db 0
  2688 0000229D 00                  <2> termcopyon db 0
  2689                              <2> prcharq:
  2690 0000229E 88DC                <2> 	mov ah, bl
  2691 000022A0 66A3[78240000]      <2> 	mov [charbuf], ax
  2692 000022A6 8B1D[70240000]      <2> 	mov ebx, [videobufpos]
  2693 000022AC BF[28D60000]        <2> 	mov edi, videobuf
  2694 000022B1 01DF                <2> 	add edi, ebx
  2695 000022B3 66A1[17270000]      <2> 	mov ax, [removedvideo]
  2696 000022B9 668907              <2> 	mov [edi], ax
  2697 000022BC 66A1[78240000]      <2> 	mov ax, [charbuf]
  2698 000022C2 31D2                <2> 	xor edx, edx
  2699 000022C4 668B15[74240000]    <2> 	mov dx, [charpos]
  2700 000022CB 31C9                <2> 	xor ecx, ecx
  2701 000022CD 668B0D[76240000]    <2> 	mov cx, [charxy]
  2702 000022D4 3C09                <2> 	cmp al, 9
  2703 000022D6 0F8462000000        <2> 	je near prtab
  2704 000022DC 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2705 000022DE 0F8487000000        <2> 	je near prcr
  2706 000022E4 3C0A                <2> 	cmp al, 10
  2707 000022E6 0F84D1000000        <2> 	je near prnlcr
  2708 000022EC 3C08                <2> 	cmp al, 8
  2709 000022EE 0F8488000000        <2> 	je near prbs
  2710 000022F4 3CFF                <2> 	cmp al, 255		;;null character
  2711 000022F6 0F841B000000        <2> 	je near donescr
  2712 000022FC 668907              <2> 	mov [edi], ax
  2713 000022FF 81C702000000        <2> 	add edi, 2
  2714 00002305 FEC2                <2> 	inc dl
  2715                              <2> donecrnl:
  2716 00002307 38CA                <2> 	cmp dl, cl
  2717 00002309 0F83D1000000        <2> 	jae near preol
  2718                              <2> doneeol:
  2719 0000230F 38EE                <2> 	cmp dh, ch
  2720 00002311 0F83E5000000        <2> 	jae near prscr	
  2721                              <2> donescr:
  2722 00002317 89FB                <2> 	mov ebx, edi
  2723 00002319 668B07              <2> 	mov ax, [edi]
  2724 0000231C 66A3[17270000]      <2> 	mov [removedvideo], ax
  2725 00002322 81EB[28D60000]      <2> 	sub ebx, videobuf
  2726 00002328 891D[70240000]      <2> 	mov [videobufpos], ebx
  2727 0000232E 668915[74240000]    <2> 	mov [charpos], dx
  2728 00002335 66A1[78240000]      <2> 	mov ax, [charbuf]
  2729 0000233B 88E3                <2> 	mov bl, ah
  2730 0000233D C3                  <2> 	ret
  2731                              <2> 	
  2732                              <2> 	prtab:
  2733 0000233E 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2734 00002344 81EF[28D60000]      <2> 		sub edi, videobuf
  2735 0000234A 29DF                <2> 		sub edi, ebx
  2736 0000234C C1EF04              <2> 		shr edi, 4
  2737 0000234F C1E704              <2> 		shl edi, 4
  2738 00002352 81C710000000        <2> 		add edi, 16
  2739 00002358 C0EA03              <2> 		shr dl, 3
  2740 0000235B C0E203              <2> 		shl dl, 3
  2741 0000235E 80C208              <2> 		add dl, 8
  2742 00002361 81C7[28D60000]      <2> 		add edi, videobuf
  2743 00002367 01DF                <2> 		add edi, ebx
  2744 00002369 EB9C                <2> 		jmp donecrnl
  2745                              <2> 	
  2746                              <2> 	prcr:
  2747 0000236B 30D2                <2> 		xor dl, dl
  2748 0000236D BF[28D60000]        <2> 		mov edi, videobuf
  2749 00002372 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2750 00002378 01DF                <2> 		add edi, ebx
  2751 0000237A EB8B                <2> 		jmp donecrnl
  2752                              <2> 			
  2753                              <2> 	prbs:
  2754 0000237C 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2755 00002382 80FA00              <2> 		cmp dl, 0
  2756 00002385 7416                <2> 		je prbackline
  2757                              <2> 	prnobmr:
  2758 00002387 891D[6C240000]      <2> 		mov [linebeginpos], ebx
  2759 0000238D FECA                <2> 		dec dl
  2760 0000238F 6631C0              <2> 		xor ax, ax
  2761 00002392 81EF02000000        <2> 		sub edi, 2
  2762 00002398 E96AFFFFFF          <2> 		jmp donecrnl
  2763                              <2> 	prbackline:
  2764 0000239D 6631DB              <2> 		xor bx, bx
  2765 000023A0 88CA                <2> 		mov dl, cl
  2766 000023A2 80FE00              <2> 		cmp dh, 0
  2767 000023A5 74E0                <2> 		je prnobmr
  2768 000023A7 8B1D[6C240000]      <2> 		mov ebx, [linebeginpos]
  2769 000023AD 6651                <2> 		push cx
  2770 000023AF 30ED                <2> 		xor ch, ch
  2771 000023B1 6629CB              <2> 		sub bx, cx
  2772 000023B4 6629CB              <2> 		sub bx, cx
  2773 000023B7 6659                <2> 		pop cx
  2774 000023B9 FECE                <2> 		dec dh
  2775 000023BB EBCA                <2> 		jmp prnobmr
  2776                              <2> 		
  2777                              <2> 	prnlcr:
  2778 000023BD FEC6                <2> 		inc dh
  2779 000023BF 31DB                <2> 		xor ebx, ebx
  2780 000023C1 30D2                <2> 		xor dl, dl
  2781 000023C3 88CB                <2> 		mov bl, cl
  2782 000023C5 66D1E3              <2> 		shl bx, 1
  2783 000023C8 BF[28D60000]        <2> 		mov edi, videobuf
  2784 000023CD 031D[6C240000]      <2> 		add ebx, [linebeginpos]
  2785 000023D3 891D[6C240000]      <2> 		mov [linebeginpos], ebx
  2786 000023D9 01DF                <2> 		add edi, ebx
  2787 000023DB E927FFFFFF          <2> 		jmp donecrnl
  2788                              <2> 		
  2789                              <2> 	preol:
  2790 000023E0 30D2                <2> 		xor dl, dl
  2791 000023E2 FEC6                <2> 		inc dh
  2792 000023E4 31DB                <2> 		xor ebx, ebx
  2793 000023E6 88CB                <2> 		mov bl, cl
  2794 000023E8 66D1E3              <2> 		shl bx, 1
  2795 000023EB 031D[6C240000]      <2> 		add ebx, [linebeginpos]
  2796 000023F1 891D[6C240000]      <2> 		mov [linebeginpos], ebx
  2797 000023F7 E913FFFFFF          <2> 		jmp doneeol
  2798                              <2> 	prscr:
  2799 000023FC FECE                <2> 		dec dh
  2800 000023FE BF[28D60000]        <2> 		mov edi, videobuf
  2801 00002403 31DB                <2> 		xor ebx, ebx
  2802 00002405 88CB                <2> 		mov bl, cl
  2803 00002407 66D1E3              <2> 		shl bx, 1
  2804 0000240A 01FB                <2> 		add ebx, edi
  2805                              <2> 	intscrollloop:
  2806 0000240C 668B03              <2> 		mov ax, [ebx]
  2807 0000240F 668907              <2> 		mov [edi], ax
  2808 00002412 81C702000000        <2> 		add edi, 2
  2809 00002418 81C302000000        <2> 		add ebx, 2
  2810 0000241E FEC9                <2> 		dec cl
  2811 00002420 80F900              <2> 		cmp cl, 0
  2812 00002423 75E7                <2> 		jne intscrollloop
  2813 00002425 8A0D[76240000]      <2> 		mov cl, [charxy]
  2814 0000242B FECD                <2> 		dec ch
  2815 0000242D 80FD01              <2> 		cmp ch, 1
  2816 00002430 77DA                <2> 		ja intscrollloop
  2817 00002432 6631C0              <2> 		xor ax, ax
  2818 00002435 81EF[28D60000]      <2> 		sub edi, videobuf
  2819 0000243B 893D[6C240000]      <2> 		mov [linebeginpos], edi
  2820 00002441 81C7[28D60000]      <2> 		add edi, videobuf
  2821 00002447 89FB                <2> 		mov ebx, edi
  2822                              <2> 	intloopclear:
  2823 00002449 668903              <2> 		mov [ebx], ax
  2824 0000244C 81C302000000        <2> 		add ebx, 2
  2825 00002452 FEC9                <2> 		dec cl
  2826 00002454 80F900              <2> 		cmp cl, 0
  2827 00002457 75F0                <2> 		jne intloopclear
  2828 00002459 FECD                <2> 		dec ch
  2829 0000245B 80FD00              <2> 		cmp ch, 0
  2830 0000245E 75E9                <2> 		jne intloopclear
  2831 00002460 668B0D[76240000]    <2> 		mov cx, [charxy]
  2832 00002467 E9ABFEFFFF          <2> 		jmp donescr
  2833                              <2> 		
  2834 0000246C 00000000            <2> linebeginpos dd 0
  2835 00002470 00000000            <2> videobufpos: dd 0
  2836 00002474 0000                <2> charpos db 0,0
  2837 00002476 501E                <2> charxy db 80,30
  2838 00002478 0000                <2> charbuf dw 0
  2839                              <2> %endif
  2840                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2841                              <2> openfile:
  2842 0000247A E8B2400000          <2> 	call loadfile
  2843 0000247F E921DEFFFF          <2> 	jmp timerinterrupt
  2844                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2845                              <2> num2str:
  2846 00002484 3C00                <2> 	cmp al, 0
  2847 00002486 750A                <2> 	jne num2strb
  2848 00002488 E83E0C0000          <2> 	call showdec
  2849 0000248D E913DEFFFF          <2> 	jmp timerinterrupt
  2850                              <2> num2strb:
  2851 00002492 E86A0B0000          <2> 	call showhex
  2852 00002497 E909DEFFFF          <2> 	jmp timerinterrupt
  2853                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2854                              <2> str2num:
  2855 0000249C 89F7                <2> 	mov edi, esi
  2856 0000249E E80A0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2857 000024A3 E9FDDDFFFF          <2> 	jmp timerinterrupt
  2858                              <2> 	
  2859                              <1> %ifdef threads.included
  2860                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2861                              <2> forkthread:
  2862                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  2863                              <2> 			;returns the PID of the new fork in ebx
  2864                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2865 000024A8 FA                  <2> 	cli
  2866 000024A9 60                  <2> 	pushad
  2867 000024AA 8925[77250000]      <2> 	mov [.espold], esp
  2868 000024B0 C605[D0660000]01    <2> 	mov byte [threadson], 1
  2869 000024B7 8B1D[D1660000]      <2> 	mov ebx, [currentthread]
  2870 000024BD C1E302              <2> 	shl ebx, 2
  2871 000024C0 89A3[94DB0100]      <2> 	mov [threadlist + ebx], esp
  2872 000024C6 C1EB02              <2> 	shr ebx, 2
  2873 000024C9 81FB00000000        <2> 	cmp ebx, 0
  2874 000024CF 750C                <2> 	jne .simplestack
  2875 000024D1 BB[2EB40000]        <2> 	mov ebx, stackend
  2876 000024D6 29E3                <2> 	sub ebx, esp
  2877 000024D8 E90B000000          <2> 	jmp .stackcalcdone
  2878                              <2> .simplestack:
  2879 000024DD C1E30A              <2> 	shl ebx, 10
  2880 000024E0 81C3[94EF0100]      <2> 	add ebx, stack1
  2881 000024E6 29E3                <2> 	sub ebx, esp
  2882                              <2> .stackcalcdone:
  2883 000024E8 29DC                <2> 	sub esp, ebx
  2884 000024EA 81C4[94EF0100]      <2> 	add esp, stack1
  2885 000024F0 8B1D[CC660000]      <2> 	mov ebx, [lastthread]
  2886 000024F6 C1E308              <2> 	shl ebx, 8
  2887 000024F9 01DC                <2> 	add esp, ebx
  2888 000024FB 891D[7B250000]      <2> 	mov [.stackend], ebx
  2889                              <2> 
  2890 00002501 89E5                <2> 	mov ebp, esp
  2891 00002503 8B25[77250000]      <2> 	mov esp, [.espold]
  2892                              <2> 
  2893 00002509 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2894 0000250C 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2895                              <2> 
  2896 00002510 31DB                <2> 	xor ebx, ebx
  2897                              <2> .stackcopy:
  2898 00002512 668B041C            <2> 	mov ax, [esp + ebx]
  2899 00002516 6689441D00          <2> 	mov [ebp + ebx], ax
  2900 0000251B 81C302000000        <2> 	add ebx, 2
  2901 00002521 3B1D[7B250000]      <2> 	cmp ebx, [.stackend]
  2902 00002527 72E9                <2> 	jb .stackcopy
  2903                              <2> 
  2904 00002529 31C0                <2> 	xor eax, eax
  2905 0000252B 668CC8              <2> 	mov ax, cs
  2906 0000252E 89C2                <2> 	mov edx, eax
  2907 00002530 8B4C2428            <2> 	mov ecx, [esp + 40]
  2908 00002534 81C900020000        <2> 	or ecx, 0x200
  2909                              <2> 	
  2910 0000253A 81FE00000000        <2> 	cmp esi, 0
  2911 00002540 7504                <2> 	jne .nochangestack
  2912 00002542 8B742420            <2> 	mov esi, [esp + 32]
  2913                              <2> .nochangestack:
  2914 00002546 89F0                <2> 	mov eax, esi
  2915 00002548 89EC                <2> 	mov esp, ebp
  2916                              <2> 
  2917 0000254A 89442420            <2> 	mov [esp + 32], eax
  2918 0000254E 89542424            <2> 	mov [esp + 36], edx
  2919 00002552 894C2428            <2> 	mov [esp + 40], ecx
  2920                              <2> 
  2921 00002556 8B1D[CC660000]      <2> 	mov ebx, [lastthread]
  2922 0000255C 89A3[94DB0100]      <2> 	mov [threadlist + ebx], esp
  2923 00002562 81C304000000        <2> 	add ebx, 4
  2924 00002568 891D[CC660000]      <2> 	mov [lastthread], ebx
  2925 0000256E 8B25[77250000]      <2> 	mov esp, [.espold]
  2926 00002574 61                  <2> 	popad
  2927 00002575 FB                  <2> 	sti
  2928 00002576 CF                  <2> 	iret
  2929                              <2> 
  2930 00002577 00000000            <2> .espold dd 0
  2931 0000257B 00000000            <2> .stackend dd 0
  2932                              <1> %endif
  2933                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2934                              <2> gettime:
  2935 0000257F A1[5D020000]        <2> 	mov eax, [timeseconds]
  2936 00002584 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2937 0000258A 89D9                <2> 	mov ecx, ebx
  2938 0000258C C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2939 0000258F E911DDFFFF          <2> 	jmp timerinterrupt
  2940                              <1> 	%include 'source/interrupts/13_settime.asm'
  2941                              <2> settime:
  2942 00002594 A3[5D020000]        <2> 	mov [timeseconds], eax
  2943 00002599 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2944 0000259F E901DDFFFF          <2> 	jmp timerinterrupt
  2945                              <2> 	
  2946                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2947                              <2> runcmd:
  2948 000025A4 BF[12CF0000]        <2> 	mov edi, buftxt
  2949                              <2> cpcmd:
  2950 000025A9 8A06                <2> 	mov al, [esi]
  2951 000025AB 8807                <2> 	mov [edi], al
  2952 000025AD 46                  <2> 	inc esi
  2953 000025AE 47                  <2> 	inc edi
  2954 000025AF 3C00                <2> 	cmp al, 0
  2955 000025B1 75F6                <2> 	jne cpcmd
  2956 000025B3 E84C070000          <2> 	call run
  2957 000025B8 CF                  <2> 	iret
  2958                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2959                              <2> proginfo:
  2960                              <2> 	;mov ebx, variables
  2961 000025B9 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  2962 000025BF 89F7                <2> 	mov edi, esi
  2963 000025C1 31C9                <2> 	xor ecx, ecx
  2964                              <2> getcommandzeroes:
  2965 000025C3 8A07                <2> 	mov al, [edi]
  2966 000025C5 47                  <2> 	inc edi
  2967 000025C6 3C3B                <2> 	cmp al, ';'
  2968 000025C8 740B                <2> 	je nomorezeroes
  2969 000025CA 3C00                <2> 	cmp al, 0
  2970 000025CC 7407                <2> 	je nomorezeroes
  2971 000025CE 3C20                <2> 	cmp al, ' '
  2972 000025D0 75F1                <2> 	jne getcommandzeroes
  2973 000025D2 41                  <2> 	inc ecx
  2974 000025D3 EBEE                <2> 	jmp getcommandzeroes
  2975                              <2> nomorezeroes:
  2976 000025D5 41                  <2> 	inc ecx
  2977 000025D6 4F                  <2> 	dec edi
  2978 000025D7 8B1D[9EBA0000]      <2> 	mov ebx, [uid]
  2979 000025DD 8B15[D1660000]      <2> 	mov edx, [currentthread]
  2980 000025E3 CF                  <2> 	iret
  2981                              <2> 	
  2982                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  2983                              <2> hooksig: ;hook code in ESI to signal in AL
  2984 000025E4 3C00                <2> 	cmp al, 0
  2985 000025E6 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  2986                              <2> ;	xor ebx, ebx
  2987                              <2> ;	mov bl, al
  2988                              <2> ;	shl bl, 2
  2989 000025E8 BF[8EB40000]        <2> 	mov edi, sigtable
  2990 000025ED 8937                <2> 	mov [edi], esi
  2991                              <2> .quit:
  2992 000025EF E9B1DCFFFF          <2> 	jmp timerinterrupt
  2993                              <1> %ifdef gui.included
  2994                              <1> 	%include 'source/interrupts/17_guiint.asm'
  2995                              <2> guiint:
  2996 000025F4 3CFD                <2> 	cmp al, 253
  2997 000025F6 745F                <2> 	je .getinfo
  2998 000025F8 803D[48A20000]01    <2> 	cmp byte [guion], 1
  2999 000025FF 7540                <2> 	jne .nogui
  3000 00002601 3C00                <2> 	cmp al, 0
  3001 00002603 0F843D000000        <2> 	je near .clear
  3002 00002609 3C01                <2> 	cmp al, 1
  3003 0000260B 0F8496000000        <2> 	je near .putpixel
  3004 00002611 3C02                <2> 	cmp al, 2
  3005 00002613 0F849B000000        <2> 	je near .drawtext
  3006 00002619 3C03                <2> 	cmp al, 3
  3007 0000261B 0F84AE000000        <2> 	je near .drawline
  3008 00002621 3C04                <2> 	cmp al, 4
  3009 00002623 0F84B9000000        <2> 	je near .drawcircle
  3010 00002629 3C05                <2> 	cmp al, 5
  3011 0000262B 0F84C1000000        <2> 	je near .fillcircle
  3012 00002631 3CFE                <2> 	cmp al, 254
  3013 00002633 0F8449000000        <2> 	je near .setinfo
  3014 00002639 3CFF                <2> 	cmp al, 255
  3015 0000263B 0F8441000000        <2> 	je near .reset
  3016                              <2> .nogui:
  3017 00002641 E95FDCFFFF          <2> 	jmp timerinterrupt
  3018                              <2> 
  3019                              <2> .clear:		;color in bx
  3020 00002646 66891D[B66D0000]    <2> 	mov [background], bx
  3021                              <2> %ifdef gui.background
  3022                              <2> 	mov ebx, [backgroundimage]
  3023                              <2> 	cmp ebx, 0
  3024                              <2> 	je .clearit
  3025                              <2> 	mov dword [backgroundimage], 0
  3026                              <2> 	mov [.bgi], ebx
  3027                              <2> .clearit:
  3028                              <2> %endif
  3029 0000264D E818470000          <2> 	call guiclear
  3030 00002652 E94EDCFFFF          <2> 	jmp timerinterrupt
  3031                              <2> 	
  3032                              <2> .getinfo:		;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3033 00002657 6631DB              <2> 	xor bx, bx
  3034 0000265A 6631C9              <2> 	xor cx, cx
  3035 0000265D 6631D2              <2> 	xor dx, dx
  3036 00002660 381D[48A20000]      <2> 	cmp [guion], bl
  3037 00002666 74D9                <2> 	je .nogui
  3038 00002668 668B1D[B66D0000]    <2> 	mov bx, [background]
  3039 0000266F 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  3040 00002676 668B0D[E8560000]    <2> 	mov cx, [resolutiony]
  3041 0000267D E923DCFFFF          <2> 	jmp timerinterrupt
  3042                              <2> 	
  3043                              <2> .setinfo:
  3044                              <2> 	
  3045                              <2> .reset:		;resets the screen to the original settings
  3046 00002682 66BBCF7B            <2> 	mov bx, background.original
  3047 00002686 66891D[B66D0000]    <2> 	mov [background], bx
  3048 0000268D 66BBFFFF            <2> 	mov bx, 0xFFFF
  3049 00002691 66891D[70730000]    <2> 	mov [colorfont2], bx
  3050                              <2> %ifdef gui.background
  3051                              <2> 	mov ebx, [backgroundimage]
  3052                              <2> 	cmp ebx, 0
  3053                              <2> 	jne .resetit
  3054                              <2> 	mov ebx, [.bgi]
  3055                              <2> 	mov [backgroundimage], ebx
  3056                              <2> .resetit:
  3057                              <2> %endif
  3058 00002698 E8CD460000          <2> 	call guiclear
  3059 0000269D E818470000          <2> 	call reloadallgraphics
  3060 000026A2 E9FEDBFFFF          <2> 	jmp timerinterrupt
  3061                              <2> 
  3062                              <2> %ifdef gui.background
  3063                              <2> 	.bgi dd 0
  3064                              <2> %endif
  3065                              <2> 	
  3066                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3067 000026A7 6689DE              <2> 	mov si, bx
  3068 000026AA E8275C0000          <2> 	call putpixel
  3069 000026AF E9F1DBFFFF          <2> 	jmp timerinterrupt
  3070                              <2> 
  3071                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3072 000026B4 66D1E2              <2> 	shl dx, 1
  3073 000026B7 66891D[70730000]    <2> 	mov [colorfont2], bx
  3074 000026BE 66893D[B66D0000]    <2> 	mov [background], di
  3075 000026C5 E8784C0000          <2> 	call showstring2
  3076 000026CA E9D6DBFFFF          <2> 	jmp timerinterrupt
  3077                              <2> 
  3078                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3079 000026CF 6689F0              <2> 	mov ax, si
  3080 000026D2 6689DE              <2> 	mov si, bx
  3081 000026D5 6689FB              <2> 	mov bx, di
  3082 000026D8 E861450000          <2> 	call drawline
  3083 000026DD E9C3DBFFFF          <2> 	jmp timerinterrupt
  3084                              <2> 
  3085                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3086 000026E2 6689F0              <2> 	mov ax, si
  3087 000026E5 6689DE              <2> 	mov si, bx
  3088 000026E8 E8DA400000          <2> 	call drawcircle
  3089 000026ED E9B3DBFFFF          <2> 	jmp timerinterrupt
  3090                              <2> 
  3091                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3092 000026F2 6689F0              <2> 	mov ax, si
  3093 000026F5 6689DE              <2> 	mov si, bx
  3094 000026F8 E8DC410000          <2> 	call fillcircle
  3095 000026FD E9A3DBFFFF          <2> 	jmp timerinterrupt
  3096                              <2> 	
  3097                              <1> %endif
  3098                              <1> %ifdef gui.included
  3099                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3100                              <2> soundint:
  3101 00002702 E99EDBFFFF          <2> 	jmp timerinterrupt
  3102                              <1> %endif
  3103                              <1> %ifdef network.included
  3104                              <1> 	%include 'source/interrupts/19_netint.asm'
  3105                              <2> netint:
  3106 00002707 E999DBFFFF          <2> 	jmp timerinterrupt
  3107                              <1> %endif
  3108                              <1> 
  3109                              <1> termcopy:
  3110                              <1> %ifdef io.serial
  3111                              <1> 	ret
  3112                              <1> %else
  3113                              <1> %ifdef terminal.vsync
  3114                              <1> 	mov byte [termcopyneeded], 1
  3115                              <1> 	ret
  3116                              <1> %else
  3117 0000270C E808000000          <1> 	call newtermcopy
  3118 00002711 C3                  <1> 	ret
  3119                              <1> %endif
  3120 00002712 00                  <1> 	termcopyneeded db 0
  3121 00002713 00000000            <1> 	termcursorpos dd 0
  3122 00002717 0000                <1> 	removedvideo dw 0
  3123                              <1> newtermcopy:
  3124 00002719 60                  <1> 	pusha
  3125 0000271A BF[28D60000]        <1> 	mov edi, videobuf
  3126 0000271F 31DB                <1> 	xor ebx, ebx
  3127 00002721 881D[12270000]      <1> 	mov [termcopyneeded], bl
  3128 00002727 8B1D[70240000]      <1> 	mov ebx, [videobufpos]
  3129 0000272D 01DF                <1> 	add edi, ebx
  3130 0000272F 893D[13270000]      <1> 	mov [termcursorpos], edi
  3131 00002735 E8CB000000          <1> 	call switchtermcursor
  3132 0000273A 803D[48A20000]00    <1> 	cmp byte [guion], 0
  3133 00002741 0F8420000000        <1> 	je near nowincopy
  3134                              <1> %ifdef gui.included
  3135 00002747 C605[E77A0000]00    <1> 	mov byte [mouseselecton], 0
  3136 0000274E C605[9D220000]01    <1> 	mov byte [termcopyon], 1
  3137 00002755 803D[9C220000]01    <1> 	cmp byte [termguion], 1
  3138 0000275C 0F8413510000        <1> 	je near windowvideocopy
  3139                              <1> %endif
  3140 00002762 E997000000          <1> 	jmp nocopytermatall
  3141                              <1> nowincopy:
  3142 00002767 BE00000A00          <1> 	mov esi, 0xA0000
  3143 0000276C A1[3E020000]        <1> 	mov eax, [basecache]
  3144 00002771 C1E004              <1> 	shl eax, 4
  3145 00002774 29C6                <1> 	sub esi, eax
  3146 00002776 BF[28D60000]        <1> 	mov edi, videobuf
  3147 0000277B 31C9                <1> 	xor ecx, ecx
  3148 0000277D 668B0D[76240000]    <1> 	mov cx, [charxy]
  3149                              <1> nowincopy2:
  3150 00002784 668B07              <1> 	mov ax, [edi]
  3151 00002787 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  3152 0000278D 668B1F              <1> 	mov bx, [edi]
  3153 00002790 668907              <1> 	mov [edi], ax
  3154 00002793 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  3155 00002799 47                  <1> 	inc edi
  3156 0000279A 6639D8              <1> 	cmp ax, bx
  3157 0000279D 743E                <1> 	je nopresentwinfont
  3158 0000279F 4F                  <1> 	dec edi
  3159 000027A0 BB[83900000]        <1> 	mov ebx, fonts
  3160 000027A5 31C0                <1> 	xor eax, eax
  3161 000027A7 8A07                <1> 	mov al, [edi]
  3162 000027A9 C1E004              <1> 	shl eax, 4
  3163 000027AC 01C3                <1> 	add ebx, eax
  3164 000027AE 47                  <1> 	inc edi
  3165 000027AF 8A27                <1> 	mov ah, [edi]
  3166 000027B1 31D2                <1> 	xor edx, edx
  3167 000027B3 8A15[76240000]      <1> 	mov dl, [charxy]
  3168 000027B9 C1C110              <1> 	rol ecx, 16
  3169 000027BC B110                <1> 	mov cl, 16
  3170                              <1> nowinfont:
  3171 000027BE 8A03                <1> 	mov al, [ebx]
  3172 000027C0 D0C8                <1> 	ror al, 1
  3173 000027C2 80FC07              <1> 	cmp ah, 7
  3174 000027C5 7602                <1> 	jbe notnotfont
  3175 000027C7 F6D0                <1> 	not al
  3176                              <1> notnotfont:
  3177 000027C9 8806                <1> 	mov [esi], al
  3178 000027CB 01D6                <1> 	add esi, edx
  3179 000027CD 43                  <1> 	inc ebx
  3180 000027CE FEC9                <1> 	dec cl
  3181 000027D0 80F900              <1> 	cmp cl, 0
  3182 000027D3 75E9                <1> 	jne nowinfont
  3183 000027D5 C1E204              <1> 	shl edx, 4
  3184 000027D8 29D6                <1> 	sub esi, edx
  3185 000027DA C1C110              <1> 	rol ecx, 16
  3186                              <1> nopresentwinfont:
  3187 000027DD 47                  <1> 	inc edi
  3188 000027DE 46                  <1> 	inc esi
  3189 000027DF FEC9                <1> 	dec cl
  3190 000027E1 80F900              <1> 	cmp cl, 0
  3191 000027E4 759E                <1> 	jne nowincopy2
  3192 000027E6 8A0D[76240000]      <1> 	mov cl, [charxy]
  3193 000027EC 31D2                <1> 	xor edx, edx
  3194 000027EE 88CA                <1> 	mov dl, cl
  3195 000027F0 29D6                <1> 	sub esi, edx
  3196 000027F2 C1E204              <1> 	shl edx, 4
  3197 000027F5 01D6                <1> 	add esi, edx
  3198 000027F7 FECD                <1> 	dec ch
  3199 000027F9 80FD00              <1> 	cmp ch, 0
  3200 000027FC 7586                <1> 	jne nowincopy2
  3201                              <1> nocopytermatall:
  3202 000027FE E802000000          <1> 	call switchtermcursor
  3203 00002803 61                  <1> 	popa
  3204 00002804 C3                  <1> 	ret
  3205                              <1> 	
  3206                              <1> switchtermcursor:
  3207 00002805 8B3D[13270000]      <1> 	mov edi, [termcursorpos]
  3208 0000280B 8A4701              <1> 	mov al, [edi + 1]
  3209 0000280E 8A27                <1> 	mov ah, [edi]
  3210 00002810 3C07                <1> 	cmp al, 7
  3211 00002812 7607                <1> 	jbe movlargecursorterm
  3212 00002814 B007                <1> 	mov al, 7
  3213 00002816 E902000000          <1> 	jmp movedcursorterm
  3214                              <1> movlargecursorterm:
  3215 0000281B B0F0                <1> 	mov al, 0xF0
  3216                              <1> movedcursorterm:
  3217 0000281D 884701              <1> 	mov [edi + 1], al
  3218 00002820 80FC00              <1> 	cmp ah, 0
  3219 00002823 7504                <1> 	jne fixednocursorterm
  3220 00002825 B420                <1> 	mov ah, " "
  3221 00002827 8827                <1> 	mov [edi], ah
  3222                              <1> fixednocursorterm:
  3223 00002829 C3                  <1> 	ret
  3224                              <1> %endif
  3225                                      %include "source/dosints.asm"
  3226                              <1> int20h:
  3227 0000282A 66B8004C            <1> mov ax, 0x4C00
  3228                              <1> int21h:
  3229                              <1> dostosolleros:
  3230 0000282E 6650                <1> 	push ax
  3231 00002830 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3232 00002834 8ED8                <1> 	mov ds, ax
  3233 00002836 8EC0                <1> 	mov es, ax
  3234 00002838 8EE0                <1> 	mov fs, ax
  3235 0000283A 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3236 0000283E 8EE8                <1> 	mov gs, ax
  3237 00002840 6658                <1> 	pop ax
  3238 00002842 9C                  <1> 	pushf
  3239 00002843 60                  <1> 	pusha
  3240 00002844 80FC01              <1> 	cmp ah, 1
  3241 00002847 0F8449000000        <1> 	je near dosgchar
  3242 0000284D 80FC02              <1> 	cmp ah, 2
  3243 00002850 0F8447000000        <1> 	je near doswchar
  3244 00002856 80FC09              <1> 	cmp ah, 9
  3245 00002859 0F8449000000        <1> 	je near dosprintstr
  3246 0000285F 80FC0A              <1> 	cmp ah, 0xA
  3247 00002862 0F8456000000        <1> 	je near dosgetstr
  3248 00002868 80FC2B              <1> 	cmp ah, 0x2B
  3249 0000286B 0F8492000000        <1> 	je near dosgetdate
  3250 00002871 80FC2C              <1> 	cmp ah, 0x2C
  3251 00002874 0F84AC000000        <1> 	je near dosgettime
  3252 0000287A 80FC4C              <1> 	cmp ah, 0x4C
  3253 0000287D 0F84C1000000        <1> 	je near dosexit
  3254                              <1> backtodos:
  3255 00002883 61                  <1> 	popa
  3256 00002884 9D                  <1> 	popf
  3257 00002885 6650                <1> 	push ax
  3258 00002887 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3259 0000288B 8ED8                <1> 	mov ds, ax
  3260 0000288D 8EC0                <1> 	mov es, ax
  3261 0000288F 8EE0                <1> 	mov fs, ax
  3262 00002891 8EE8                <1> 	mov gs, ax
  3263 00002893 6658                <1> 	pop ax
  3264 00002895 CF                  <1> 	iret
  3265                              <1> 
  3266                              <1> dosgchar:
  3267 00002896 E88DF9FFFF          <1> 	call getchar
  3268 0000289B EBE6                <1> 	jmp backtodos
  3269                              <1> 	
  3270                              <1> doswchar:
  3271 0000289D 88D0                <1> 	mov al, dl
  3272 0000289F B307                <1> 	mov bl, 7
  3273 000028A1 E8E7F9FFFF          <1> 	call prcharint
  3274 000028A6 EBDB                <1> 	jmp backtodos
  3275                              <1> 	
  3276                              <1> dosprintstr:
  3277 000028A8 31F6                <1> 	xor esi, esi
  3278 000028AA 6689D6              <1> 	mov si, dx
  3279 000028AD 81C600004000        <1> 	add esi, dosprogloc
  3280 000028B3 B024                <1> 	mov al, "$"
  3281 000028B5 B307                <1> 	mov bl, 7
  3282 000028B7 E8A5F4FFFF          <1> 	call printint
  3283 000028BC EBC5                <1> 	jmp backtodos
  3284                              <1> 	
  3285                              <1> dosgetstr:
  3286 000028BE 31F6                <1> 	xor esi, esi
  3287 000028C0 6689D6              <1> 	mov si, dx
  3288 000028C3 81C600004000        <1> 	add esi, dosprogloc
  3289 000028C9 B900000000          <1> 	mov ecx, 0
  3290 000028CE 8A0E                <1> 	mov cl, [esi]
  3291 000028D0 81C602000000        <1> 	add esi, 2
  3292 000028D6 89F7                <1> 	mov edi, esi
  3293 000028D8 8935[FF280000]      <1> 	mov [stringstart], esi
  3294 000028DE 01CF                <1> 	add edi, ecx
  3295 000028E0 B00A                <1> 	mov al, 10
  3296 000028E2 B307                <1> 	mov bl, 7
  3297 000028E4 E868F5FFFF          <1> 	call rdprintdos
  3298 000028E9 89F1                <1> 	mov ecx, esi
  3299 000028EB 2B0D[FF280000]      <1> 	sub ecx, [stringstart]
  3300 000028F1 8B35[FF280000]      <1> 	mov esi, [stringstart]
  3301 000028F7 884EFF              <1> 	mov [esi - 1], cl
  3302 000028FA 884EFE              <1> 	mov [esi - 2], cl
  3303 000028FD EB84                <1> 	jmp backtodos
  3304 000028FF 00000000            <1> stringstart dd 0
  3305                              <1> 
  3306                              <1> dosgetdate:
  3307 00002903 E8E4260000          <1> 	call time
  3308 00002908 8A0D[B4510000]      <1> 	mov cl, [RTCtimeYear]
  3309 0000290E B500                <1> 	mov ch, 0
  3310 00002910 6681C1D007          <1> 	add cx, 2000
  3311 00002915 8A35[B3510000]      <1> 	mov dh, [RTCtimeMonth]
  3312 0000291B 8A15[B2510000]      <1> 	mov dl, [RTCtimeDay]
  3313 00002921 E95DFFFFFF          <1> 	jmp backtodos
  3314                              <1> 
  3315                              <1> dosgettime:
  3316 00002926 E8C1260000          <1> 	call time
  3317 0000292B 8A2D[B1510000]      <1> 	mov ch, [RTCtimeHour]
  3318 00002931 8A0D[B0510000]      <1> 	mov cl, [RTCtimeMinute]
  3319 00002937 8A35[AF510000]      <1> 	mov dh, [RTCtimeSecond]
  3320 0000293D B200                <1> 	mov dl, 0
  3321 0000293F E93FFFFFFF          <1> 	jmp backtodos
  3322                              <1> 	
  3323                              <1> dosexit:
  3324 00002944 BE[5E900000]        <1> 	mov esi, line
  3325 00002949 E80CF4FFFF          <1> 	call print
  3326 0000294E 61                  <1> 	popa
  3327 0000294F 9D                  <1> 	popf
  3328 00002950 8B25[92B80000]      <1> 	mov esp, [previousstack]
  3329 00002956 31DB                <1> 	xor ebx, ebx
  3330 00002958 88C3                <1> 	mov bl, al
  3331 0000295A 80FB00              <1> 	cmp bl, 0
  3332 0000295D 0F8585F3FFFF        <1> 	jne near exitprog.error
  3333 00002963 C3                  <1> 	ret
  3334                                      %include "source/solleros.asm"
  3335                              <1> 	;SOLLEROS.ASM
  3336                              <1> os:
  3337                              <1> setdefenv:
  3338 00002964 B02F                <1> 	mov al, '/'
  3339 00002966 A2[9EB80000]        <1> 	mov [currentfolder], al
  3340 0000296B B801000000          <1> 	mov eax, 1
  3341 00002970 A3[9AB80000]        <1> 	mov [currentfolderloc], eax
  3342 00002975 E846F4FFFF          <1> 	call clear
  3343                              <1> 	
  3344                              <1> bootfilecheck:
  3345 0000297A 803D[A2BA0000]01    <1> 	cmp byte [ranboot], 1
  3346 00002981 0F8421000000        <1> 	je near nobootfile
  3347                              <1> 	%ifdef hardware.automatic
  3348 00002987 E879370000          <1> 		call initializelater ;Initialize components that have debug messages
  3349                              <1> 	%endif
  3350 0000298C BF[1D900000]        <1> 	mov edi, bootfilename
  3351 00002991 BE00004000          <1> 	mov esi, 0x400000
  3352 00002996 E8963B0000          <1> 	call loadfile
  3353 0000299B 81FA00000000        <1> 	cmp edx, 0
  3354 000029A1 7505                <1> 	jne nobootfile
  3355 000029A3 E8B00D0000          <1> 	call progbatchfound
  3356                              <1> nobootfile:	
  3357 000029A8 C605[A2BA0000]01    <1> 	mov byte [ranboot], 1
  3358                              <1> 
  3359 000029AF BE[00000000]        <1> 	mov esi, signature
  3360                              <1> .sigcopyloop:	;this prevents an odd error
  3361 000029B4 658A06              <1> 	mov al, [gs:esi]
  3362 000029B7 8806                <1> 	mov [esi], al
  3363 000029B9 46                  <1> 	inc esi
  3364 000029BA 81FE[1A000000]      <1> 	cmp esi, signatureend
  3365 000029C0 72F2                <1> 	jb .sigcopyloop
  3366                              <1> 	
  3367 000029C2 BE[00000000]        <1> 	mov esi, signature
  3368 000029C7 E88EF3FFFF          <1> 	call print
  3369 000029CC 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3370 000029D2 E8F4060000          <1> 	call showdec
  3371 000029D7 BE[5E900000]        <1> 	mov esi, line
  3372 000029DC E879F3FFFF          <1> 	call print
  3373 000029E1 BE[3A900000]        <1> 	mov esi, userask
  3374 000029E6 E86FF3FFFF          <1> 	call print
  3375                              <1> usercheck:
  3376 000029EB BE[12CF0000]        <1> 	mov esi, buftxt
  3377 000029F0 BF[12D30000]        <1> 	mov edi, buftxtend
  3378 000029F5 B00A                <1> 	mov al, 10
  3379 000029F7 E843F4FFFF          <1> 	call rdprint
  3380 000029FC 56                  <1> 	push esi
  3381 000029FD BE[44900000]        <1> 	mov esi, pwdask
  3382 00002A02 E853F3FFFF          <1> 	call print
  3383 00002A07 5E                  <1> 	pop esi
  3384 00002A08 46                  <1> 	inc esi
  3385 00002A09 8935[FC2A0000]      <1> 	mov [esipass], esi
  3386                              <1> passcheck:
  3387 00002A0F E814F8FFFF          <1> 	call getchar
  3388 00002A14 3C0A                <1> 	cmp al, 10
  3389 00002A16 0F8436000000        <1> 	je near gotpass
  3390 00002A1C 3C08                <1> 	cmp al, 8
  3391 00002A1E 0F8410000000        <1> 	je near backpass
  3392 00002A24 8806                <1> 	mov [esi], al
  3393 00002A26 46                  <1> 	inc esi
  3394 00002A27 B02A                <1> 	mov al, "*"
  3395 00002A29 E85FF8FFFF          <1> 	call prcharint
  3396 00002A2E EBDF                <1> 	jmp passcheck
  3397 00002A30 08200800            <1> backcursor2 db 8," ",8,0
  3398                              <1> backpass:
  3399 00002A34 3B35[FC2A0000]      <1> 	cmp esi, [esipass]
  3400 00002A3A 0F84CFFFFFFF        <1> 	je near passcheck
  3401 00002A40 4E                  <1> 	dec esi
  3402 00002A41 C60600              <1> 	mov byte [esi], 0
  3403 00002A44 56                  <1> 	push esi
  3404 00002A45 BE[302A0000]        <1> 	mov esi, backcursor2
  3405 00002A4A E80BF3FFFF          <1> 	call print
  3406 00002A4F 5E                  <1> 	pop esi
  3407 00002A50 EBBD                <1> 	jmp passcheck
  3408                              <1> gotpass:
  3409 00002A52 B00A                <1> 	mov al, 10
  3410 00002A54 E834F8FFFF          <1> 	call prcharint
  3411 00002A59 30C0                <1> 	xor al, al
  3412 00002A5B 31C9                <1> 	xor ecx, ecx
  3413 00002A5D 8806                <1> 	mov [esi], al
  3414 00002A5F BB[60900000]        <1> 	mov ebx, userlst
  3415                              <1> userfind:
  3416 00002A64 BE[12CF0000]        <1> 	mov esi, buftxt
  3417 00002A69 8A06                <1> 	mov al, [esi]
  3418 00002A6B 3C00                <1> 	cmp al, 0
  3419 00002A6D 0F84F1FEFFFF        <1> 	je near os
  3420 00002A73 891D[002B0000]      <1> 	mov [usercache], ebx
  3421 00002A79 E860030000          <1> 	call tester
  3422 00002A7E 3C01                <1> 	cmp al, 1
  3423 00002A80 7416                <1> 	je pwdtest
  3424 00002A82 41                  <1> 	inc ecx
  3425                              <1> nxtuser:
  3426 00002A83 8A03                <1> 	mov al, [ebx]
  3427 00002A85 43                  <1> 	inc ebx
  3428 00002A86 3C00                <1> 	cmp al, 0
  3429 00002A88 75F9                <1> 	jne nxtuser
  3430 00002A8A 81FB[83900000]      <1> 	cmp ebx, userlstend
  3431 00002A90 0F83CEFEFFFF        <1> 	jae near os
  3432 00002A96 EBCC                <1> 	jmp userfind
  3433                              <1> pwdtest:
  3434 00002A98 46                  <1> 	inc esi
  3435 00002A99 43                  <1> 	inc ebx
  3436 00002A9A E83F030000          <1> 	call tester
  3437 00002A9F 3C01                <1> 	cmp al, 1
  3438 00002AA1 7402                <1> 	je pwdrgt
  3439 00002AA3 EBDE                <1> 	jmp nxtuser
  3440                              <1> pwdrgt:
  3441 00002AA5 D1E9                <1> 	shr ecx, 1
  3442 00002AA7 890D[9EBA0000]      <1> 	mov [uid], ecx
  3443 00002AAD E80EF3FFFF          <1> 	call clear
  3444 00002AB2 31C9                <1> 	xor ecx, ecx
  3445 00002AB4 41                  <1> 	inc ecx
  3446 00002AB5 890D[74AB0100]      <1> 	mov [commandbufpos], ecx
  3447                              <1> returnfromexp:
  3448 00002ABB 66B90002            <1> 	mov cx, 200h
  3449 00002ABF BE[12CF0000]        <1> 	mov esi, buftxt
  3450 00002AC4 8935[DA2D0000]      <1> 	mov [currentcommandloc], esi
  3451 00002ACA E825000000          <1> 	call bufclr
  3452                              <1> clearolddata:
  3453 00002ACF 31C0                <1> 	xor eax, eax
  3454 00002AD1 A2[A3BA0000]        <1> 	mov [IFON], al
  3455 00002AD6 A2[A4BA0000]        <1> 	mov [IFTRUE], al
  3456 00002ADB A2[0CBB0000]        <1> 	mov [BATCHISON], al
  3457 00002AE0 A3[08BB0000]        <1> 	mov [BATCHPOS], eax
  3458 00002AE5 A2[0DBB0000]        <1> 	mov [LOOPON], al
  3459 00002AEA A3[0EBB0000]        <1> 	mov [LOOPPOS], eax
  3460 00002AEF E933000000          <1> 	jmp nwcmd
  3461                              <1> bufclr:	
  3462 00002AF4 30C0                <1> 	xor al, al
  3463 00002AF6 8806                <1> 	mov [esi], al
  3464 00002AF8 46                  <1> 	inc esi
  3465 00002AF9 E2F9                <1> 	loop bufclr
  3466 00002AFB C3                  <1> 	ret
  3467                              <1> 
  3468 00002AFC 00000000            <1> esipass dd 0
  3469 00002B00 [60900000]          <1> usercache dd userlst
  3470                              <1> 	
  3471                              <1> buftxtclear:
  3472 00002B04 30C0                <1> 	xor al, al
  3473 00002B06 BE[12CF0000]        <1> 	mov esi, buftxt
  3474 00002B0B 81FE[12D30000]      <1> clearbuftxt: cmp esi, buf2
  3475 00002B11 730E                <1> 	jae retbufclr
  3476 00002B13 8806                <1> 	mov [esi], al
  3477 00002B15 46                  <1> 	inc esi
  3478 00002B16 EBF3                <1> 	jmp clearbuftxt
  3479                              <1> 
  3480 00002B18 39DE                <1> clearitbuf: cmp esi, ebx
  3481 00002B1A 7305                <1> 	jae retbufclr
  3482 00002B1C 8806                <1> 	mov [esi], al
  3483 00002B1E 46                  <1> 	inc esi
  3484 00002B1F EBF7                <1> 	jmp clearitbuf
  3485 00002B21 C3                  <1> retbufclr: ret
  3486                              <1> 
  3487 00002B22 E900000000          <1> full:	jmp nwcmd
  3488                              <1> 
  3489                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3490                              <1> nwcmd:
  3491 00002B27 FB                  <1> 	sti
  3492 00002B28 31C0                <1> 	xor eax, eax
  3493 00002B2A 3905[FC2C0000]      <1> 	cmp [nextcommandloc], eax
  3494 00002B30 7413                <1> 	je nomultiplecommand
  3495 00002B32 8B35[FC2C0000]      <1> 	mov esi, [nextcommandloc]
  3496 00002B38 8935[002D0000]      <1> 	mov [thiscommandloc], esi
  3497 00002B3E E8C6010000          <1> 	call fixvariables
  3498 00002B43 EBE2                <1> 	jmp nwcmd
  3499                              <1> nomultiplecommand:
  3500 00002B45 A3[002D0000]        <1> 	mov [thiscommandloc], eax
  3501 00002B4A 3805[D0660000]      <1> 	cmp [threadson], al
  3502 00002B50 7405                <1> 	je noclinwcmd
  3503 00002B52 A2[D0660000]        <1> 	mov [threadson], al
  3504                              <1> noclinwcmd:
  3505 00002B57 B001                <1> 	mov al, 1
  3506 00002B59 3805[0CBB0000]      <1> 	cmp [BATCHISON], al
  3507 00002B5F 7501                <1> 	jne cancel
  3508 00002B61 C3                  <1> 	ret
  3509 00002B62 30C0                <1> cancel:	xor al, al
  3510 00002B64 A2[A3BA0000]        <1> 	mov [IFON], al
  3511 00002B69 A2[0CBB0000]        <1> 	mov [BATCHISON], al
  3512 00002B6E B05B                <1> 	mov al, '['
  3513 00002B70 66BB0700            <1> 	mov bx, 7
  3514 00002B74 E825F7FFFF          <1> 	call prcharq
  3515 00002B79 8B35[002B0000]      <1> 	mov esi, [usercache]
  3516 00002B7F E8C4F1FFFF          <1> 	call printquiet
  3517 00002B84 BE[4E900000]        <1> 	mov esi, computer
  3518 00002B89 E8BAF1FFFF          <1> 	call printquiet
  3519 00002B8E BE[9EB80000]        <1> 	mov esi, currentfolder
  3520 00002B93 0335[96B80000]      <1> 	add esi, [lastfolderloc]
  3521 00002B99 E8AAF1FFFF          <1> 	call printquiet
  3522 00002B9E BE[59900000]        <1> 	mov esi, endprompt
  3523 00002BA3 E8B2F1FFFF          <1> 	call print
  3524 00002BA8 E857FFFFFF          <1> 	call buftxtclear
  3525 00002BAD BE[12CF0000]        <1> 	mov esi, buftxt
  3526 00002BB2 C605[11220000]01    <1> 	mov byte [commandedit], 1
  3527 00002BB9 B00A                <1> 	mov al, 10
  3528 00002BBB 66BB0700            <1> 	mov bx, 7
  3529 00002BBF BF[12D30000]        <1> 	mov edi, buftxtend
  3530 00002BC4 E876F2FFFF          <1> 	call rdprint
  3531 00002BC9 C605[11220000]00    <1> 	mov byte [commandedit], 0
  3532 00002BD0 803D[12CF0000]00    <1> 	cmp byte [buftxt], 0
  3533 00002BD7 0F844AFFFFFF        <1> 	je near nwcmd
  3534 00002BDD 8B35[74AB0100]      <1> gotcmd:	mov esi, [commandbufpos]
  3535 00002BE3 8935[70AB0100]      <1> 	mov [lastcommandpos], esi
  3536 00002BE9 FF05[7CAB0100]      <1> 	inc dword [commandsentered]
  3537 00002BEF BF[12CF0000]        <1> 	mov edi, buftxt
  3538 00002BF4 81C6[80AB0100]      <1> 	add esi, commandbuf
  3539 00002BFA 81FE[80BB0100]      <1> 	cmp esi, commandbufend
  3540 00002C00 7605                <1> 	jbe copycommand
  3541 00002C02 BE[80AB0100]        <1> 	mov esi, commandbuf
  3542                              <1> copycommand:
  3543 00002C07 8A07                <1> 	mov al, [edi]
  3544 00002C09 8806                <1> 	mov [esi], al
  3545 00002C0B 47                  <1> 	inc edi
  3546 00002C0C 46                  <1> 	inc esi
  3547 00002C0D 3C00                <1> 	cmp al, 0
  3548 00002C0F 740F                <1> 	je donecopy
  3549 00002C11 81FE[80BB0100]      <1> 	cmp esi, commandbufend
  3550 00002C17 76EE                <1> 	jbe copycommand
  3551 00002C19 BE[80AB0100]        <1> 	mov esi, commandbuf
  3552 00002C1E EBE7                <1> 	jmp copycommand
  3553                              <1> donecopy:
  3554 00002C20 81EE[80AB0100]      <1> 	sub esi, commandbuf
  3555 00002C26 8935[74AB0100]      <1> 	mov [commandbufpos], esi
  3556 00002C2C E8D3000000          <1> 	call run
  3557 00002C31 E9F1FEFFFF          <1> 	jmp nwcmd
  3558                              <1> 
  3559 00002C36 E8C9FEFFFF          <1> input:	call buftxtclear
  3560 00002C3B BE[12CF0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3561 00002C40 BF[12D30000]        <1> 	mov edi, buftxtend
  3562 00002C45 B00A                <1> stdin:	mov al, 10
  3563 00002C47 B307                <1> 	mov bl, 7
  3564 00002C49 E8F1F1FFFF          <1> 	call rdprint
  3565 00002C4E C3                  <1> 	ret
  3566                              <1> 
  3567                              <1> replacevariable:
  3568 00002C4F 8A4601              <1> 	mov al, [esi + 1]
  3569 00002C52 C64601FF            <1> 	mov byte [esi + 1], 255
  3570 00002C56 3C24                <1> 	cmp al, "$"
  3571 00002C58 0F84AB000000        <1> 	je near fixvariables
  3572 00002C5E 884601              <1> 	mov [esi + 1], al
  3573 00002C61 56                  <1> 	push esi
  3574 00002C62 81EE[12CF0000]      <1> 	sub esi, buftxt
  3575 00002C68 89F7                <1> 	mov edi, esi
  3576 00002C6A 81C6[12CF0000]      <1> 	add esi, buftxt
  3577 00002C70 47                  <1> 	inc edi
  3578 00002C71 BB[12BB0000]        <1> 	mov ebx, variables
  3579 00002C76 E800150000          <1> 	call nxtvrech
  3580 00002C7B 89F7                <1> 	mov edi, esi
  3581 00002C7D 31DB                <1> 	xor ebx, ebx
  3582 00002C7F 4E                  <1> 	dec esi
  3583                              <1> findvarname:
  3584 00002C80 4E                  <1> 	dec esi
  3585 00002C81 8A06                <1> 	mov al, [esi]
  3586 00002C83 43                  <1> 	inc ebx
  3587 00002C84 3C04                <1> 	cmp al, 4
  3588 00002C86 75F8                <1> 	jne findvarname
  3589 00002C88 5E                  <1> 	pop esi
  3590                              <1> replacevarloop:
  3591 00002C89 8A07                <1> 	mov al, [edi]
  3592 00002C8B 3C00                <1> 	cmp al, 0
  3593 00002C8D 0F8413000000        <1> 	je near compressbuftxt
  3594 00002C93 81FB00000000        <1> 	cmp ebx, 0
  3595 00002C99 0F8416000000        <1> 	je near expandbuftxt
  3596 00002C9F 8806                <1> 	mov [esi], al
  3597 00002CA1 4B                  <1> 	dec ebx
  3598 00002CA2 46                  <1> 	inc esi
  3599 00002CA3 47                  <1> 	inc edi
  3600 00002CA4 EBE3                <1> 	jmp replacevarloop
  3601                              <1> compressbuftxt:
  3602 00002CA6 8A041E              <1> 	mov al, [esi + ebx]
  3603 00002CA9 8806                <1> 	mov [esi], al
  3604 00002CAB 46                  <1> 	inc esi
  3605 00002CAC 3C00                <1> 	cmp al, 0
  3606 00002CAE 75F6                <1> 	jne compressbuftxt
  3607 00002CB0 E954000000          <1> 	jmp fixvariables
  3608                              <1> expandbuftxt:
  3609 00002CB5 89F1                <1> 	mov ecx, esi
  3610 00002CB7 8A26                <1> 	mov ah, [esi]
  3611                              <1> expandbuftxtlp:
  3612 00002CB9 8A1E                <1> 	mov bl, [esi]
  3613 00002CBB 46                  <1> 	inc esi
  3614 00002CBC 8A3E                <1> 	mov bh, [esi]
  3615 00002CBE 8826                <1> 	mov [esi], ah
  3616 00002CC0 88FC                <1> 	mov ah, bh
  3617 00002CC2 80FB00              <1> 	cmp bl, 0
  3618 00002CC5 75F2                <1> 	jne expandbuftxtlp
  3619 00002CC7 89CE                <1> 	mov esi, ecx
  3620 00002CC9 8806                <1> 	mov [esi], al
  3621 00002CCB 47                  <1> 	inc edi
  3622 00002CCC 8A07                <1> 	mov al, [edi]
  3623 00002CCE 3C00                <1> 	cmp al, 0
  3624 00002CD0 0F8433000000        <1> 	je near fixvariables
  3625 00002CD6 46                  <1> 	inc esi
  3626 00002CD7 EBDC                <1> 	jmp expandbuftxt
  3627                              <1> multipleprogline:
  3628 00002CD9 30E4                <1> 	xor ah, ah
  3629 00002CDB 8826                <1> 	mov [esi], ah
  3630 00002CDD 46                  <1> 	inc esi
  3631 00002CDE 8935[FC2C0000]      <1> 	mov [nextcommandloc], esi
  3632 00002CE4 E93E000000          <1> 	jmp donefixvariables
  3633                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3634 00002CE9 46                  <1> 	inc esi
  3635 00002CEA 8A06                <1> 	mov al, [esi]
  3636 00002CEC C606FF              <1> 	mov byte [esi], 255
  3637 00002CEF 3C23                <1> 	cmp al, '#'
  3638 00002CF1 7416                <1> 	je fixvariables
  3639 00002CF3 4E                  <1> 	dec esi
  3640 00002CF4 C60600              <1> 	mov byte [esi], 0
  3641 00002CF7 E90D000000          <1> 	jmp fixvariables
  3642                              <1> 	
  3643 00002CFC 00000000            <1> nextcommandloc dd 0
  3644 00002D00 00000000            <1> thiscommandloc dd 0	
  3645                              <1> run:
  3646 00002D04 BE[12CF0000]        <1> 	mov esi, buftxt
  3647 00002D09 46                  <1> fixvariables:	inc esi
  3648 00002D0A 8A06                <1> 	mov al, [esi]
  3649 00002D0C 3C23                <1> 	cmp al, '#'	;inline comment
  3650 00002D0E 74D9                <1> 	je inlinecomment
  3651 00002D10 3C24                <1> 	cmp al, '$' ;variable
  3652 00002D12 0F8437FFFFFF        <1> 	je near replacevariable
  3653 00002D18 3C3B                <1> 	cmp al, ';' ;program list
  3654 00002D1A 74BD                <1> 	je multipleprogline
  3655 00002D1C 3C00                <1> 	cmp al, 0
  3656 00002D1E 75E9                <1> 	jne fixvariables
  3657 00002D20 31C0                <1> 	xor eax, eax
  3658 00002D22 A3[FC2C0000]        <1> 	mov [nextcommandloc], eax
  3659                              <1> donefixvariables:
  3660 00002D27 803D[C5320000]00    <1> 	cmp byte [indexdone], 0
  3661 00002D2E 7505                <1> 	jne progtest
  3662 00002D30 E8FB040000          <1> 	call indexfiles
  3663                              <1> progtest:
  3664 00002D35 31C0                <1> 	xor eax, eax
  3665 00002D37 BB[92B40000]        <1> 	mov ebx, fileindex
  3666 00002D3C 668B03              <1> prgnxt:	mov ax, [ebx]
  3667 00002D3F B1FF                <1> 	mov cl, 255
  3668 00002D41 B52C                <1> 	mov ch, 44
  3669 00002D43 6639C8              <1> 	cmp ax, cx
  3670 00002D46 740B                <1> 	je fndprg
  3671 00002D48 43                  <1> 	inc ebx
  3672 00002D49 81FB[92B80000]      <1> 	cmp ebx, fileindexend
  3673 00002D4F 735D                <1> 	jae prgnf
  3674 00002D51 EBE9                <1> 	jmp prgnxt
  3675 00002D53 81C302000000        <1> fndprg: add ebx, 2
  3676 00002D59 31C9                <1> 	xor ecx, ecx
  3677 00002D5B BE[12CF0000]        <1> 	mov esi, buftxt
  3678 00002D60 390D[002D0000]      <1> 	cmp [thiscommandloc], ecx
  3679 00002D66 7406                <1> 	je noprgtstmultiple
  3680 00002D68 8B35[002D0000]      <1> 	mov esi, [thiscommandloc]
  3681                              <1> noprgtstmultiple:
  3682 00002D6E E8A6000000          <1> 	call cndtest
  3683 00002D73 3C01                <1> 	cmp al, 1
  3684 00002D75 7302                <1> 	jae prggood
  3685 00002D77 EBC3                <1> 	jmp prgnxt
  3686 00002D79 81FB[92B80000]      <1> prggood: cmp ebx, fileindexend
  3687 00002D7F 7358                <1> 	jae prgdn
  3688 00002D81 31C0                <1> 	xor eax, eax
  3689 00002D83 BE[12CF0000]        <1> 	mov esi, buftxt
  3690 00002D88 3905[002D0000]      <1> 	cmp [thiscommandloc], eax
  3691 00002D8E 7406                <1> 	je noprggoodmul
  3692 00002D90 8B35[002D0000]      <1> 	mov esi, [thiscommandloc]
  3693                              <1> noprggoodmul:
  3694 00002D96 8935[DA2D0000]      <1> 	mov [currentcommandloc], esi
  3695 00002D9C 81C303000000        <1> 	add ebx, 3
  3696 00002DA2 8B3B                <1> 	mov edi, [ebx]
  3697 00002DA4 C605[D0660000]02    <1> 	mov byte [threadson], 2
  3698 00002DAB FFD7                <1> 	call edi
  3699 00002DAD C3                  <1> 	ret
  3700                              <1> prgnf:	
  3701 00002DAE 8B35[DA2D0000]      <1> 	mov esi, [currentcommandloc]
  3702 00002DB4 8A06                <1> 	mov al, [esi]
  3703 00002DB6 3C00                <1> 	cmp al, 0
  3704 00002DB8 741F                <1> 	je prgdn
  3705 00002DBA BE[25900000]        <1> 	mov esi, notfound1
  3706 00002DBF E896EFFFFF          <1> 	call print
  3707 00002DC4 8B35[DA2D0000]      <1> 	mov esi, [currentcommandloc]
  3708 00002DCA E88BEFFFFF          <1> 	call print
  3709 00002DCF BE[2D900000]        <1> 	mov esi, notfound2
  3710 00002DD4 E881EFFFFF          <1> 	call print
  3711 00002DD9 C3                  <1> prgdn:	ret
  3712                              <1> 
  3713 00002DDA 00000000            <1> currentcommandloc dd 0
  3714                              <1> 
  3715                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3716 00002DDE 6631C0              <1> 	xor ax, ax
  3717 00002DE1 8A06                <1> retest:	mov al, [esi]
  3718 00002DE3 8A23                <1> 	mov ah, [ebx]
  3719 00002DE5 3C00                <1> 	cmp al, 0
  3720 00002DE7 7408                <1> 	je testtrue
  3721 00002DE9 38E0                <1> 	cmp al, ah
  3722 00002DEB 750C                <1> 	jne testfalse
  3723 00002DED 43                  <1> 	inc ebx
  3724 00002DEE 46                  <1> 	inc esi
  3725 00002DEF EBF0                <1> 	jmp retest
  3726                              <1> testtrue:
  3727 00002DF1 80FC00              <1> 	cmp ah, 0
  3728 00002DF4 7503                <1> 	jne testfalse
  3729 00002DF6 B001                <1> 	mov al, 1
  3730 00002DF8 C3                  <1> 	ret
  3731                              <1> testfalse:
  3732 00002DF9 30C0                <1> 	xor al, al
  3733 00002DFB C3                  <1> 	ret
  3734                              <1> 
  3735                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3736 00002DFC 30C0                <1> 	xor al, al
  3737                              <1> opretest:
  3738 00002DFE 8A06                <1> 	mov al, [esi]
  3739 00002E00 8A23                <1> 	mov ah, [ebx]
  3740 00002E02 38E0                <1> 	cmp al, ah
  3741 00002E04 7510                <1> 	jne optestfalse
  3742 00002E06 80FC00              <1> 	cmp ah, 0
  3743 00002E09 7404                <1> 	je optesttrue
  3744 00002E0B 43                  <1> 	inc ebx
  3745 00002E0C 46                  <1> 	inc esi
  3746 00002E0D EBEF                <1> 	jmp opretest
  3747                              <1> optesttrue:
  3748 00002E0F 3C00                <1> 	cmp al, 0
  3749 00002E11 7503                <1> 	jne optestfalse
  3750 00002E13 B001                <1> 	mov al, 1
  3751 00002E15 C3                  <1> 	ret
  3752                              <1> optestfalse:
  3753 00002E16 30C0                <1> 	xor al, al
  3754 00002E18 C3                  <1> 	ret
  3755                              <1> 
  3756                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3757 00002E19 30C0                <1> 	xor al, al
  3758 00002E1B 8A06                <1> cndretest:	mov al, [esi]
  3759 00002E1D 8A23                <1> 	mov ah, [ebx]
  3760 00002E1F 38CC                <1> 	cmp ah, cl
  3761 00002E21 7408                <1> 	je cndtesttrue
  3762 00002E23 38E0                <1> 	cmp al, ah
  3763 00002E25 750B                <1> 	jne cndtestfalse
  3764 00002E27 43                  <1> 	inc ebx
  3765 00002E28 46                  <1> 	inc esi
  3766 00002E29 EBF0                <1> 	jmp cndretest
  3767                              <1> cndtesttrue:
  3768 00002E2B 38C8                <1> 	cmp al, cl
  3769 00002E2D 7506                <1> 	jne cndtestalmost
  3770 00002E2F B001                <1> 	mov al, 1
  3771 00002E31 C3                  <1> 	ret
  3772                              <1> cndtestfalse:
  3773 00002E32 30C0                <1> 	xor al, al
  3774 00002E34 C3                  <1> 	ret
  3775                              <1> cndtestalmost:
  3776 00002E35 B002                <1> 	mov al, 2
  3777 00002E37 C3                  <1> 	ret
  3778                              <1> 	
  3779                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3780                              <1> 		                ;ends if array seperator is found backwards after 0
  3781                              <1> 	arnxt:	      
  3782 00002E38 88E8                <1> 		mov al, ch
  3783 00002E3A 88CC                <1> 		mov ah, cl        
  3784 00002E3C 663906              <1> 		cmp [esi], ax
  3785 00002E3F 744D                <1> 		je ardn
  3786 00002E41 66390E              <1> 		cmp [esi], cx
  3787 00002E44 7407                <1> 		je arfnd
  3788 00002E46 46                  <1> 		inc esi
  3789 00002E47 39DE                <1> 		cmp esi, ebx
  3790 00002E49 7343                <1> 		jae ardn
  3791 00002E4B EBEB                <1> 		jmp arnxt
  3792 00002E4D 81C602000000        <1> 	arfnd: add esi, 2
  3793 00002E53 891D[8F2E0000]      <1> 		mov [arbx], ebx
  3794 00002E59 890D[932E0000]      <1> 		mov [arcx], ecx
  3795 00002E5F E8F6EEFFFF          <1> 		call print
  3796 00002E64 8935[952E0000]      <1> 		mov [arsi], esi
  3797 00002E6A BE[5E900000]        <1> 		mov esi, line
  3798 00002E6F E8E6EEFFFF          <1> 		call print
  3799 00002E74 8B1D[8F2E0000]      <1> 		mov ebx, [arbx]
  3800 00002E7A 668B0D[932E0000]    <1> 		mov cx, [arcx]
  3801 00002E81 8B35[952E0000]      <1> 		mov esi, [arsi]
  3802 00002E87 46                  <1> 		inc esi
  3803 00002E88 39DE                <1> 		cmp esi, ebx
  3804 00002E8A 7302                <1> 		jae ardn
  3805 00002E8C EBAA                <1> 		jmp arnxt
  3806 00002E8E C3                  <1> 	ardn:	ret
  3807 00002E8F 00000000            <1> arbx:	dw 0,0
  3808 00002E93 0000                <1> arcx:	db 0,0
  3809 00002E95 00000000            <1> arsi:	dw 0,0
  3810                              <1> 
  3811                              <1> clearbuffer:
  3812 00002E99 BE[12D30000]        <1> 	mov esi, buf2
  3813 00002E9E B030                <1> 	mov al, '0'
  3814 00002EA0 81FE[26D30000]      <1> clearbuf: cmp esi, numbuf
  3815 00002EA6 7305                <1> 	jae doneclearbuff
  3816 00002EA8 8806                <1> 	mov [esi], al
  3817 00002EAA 46                  <1> 	inc esi
  3818 00002EAB EBF3                <1> 	jmp clearbuf
  3819                              <1> doneclearbuff: 
  3820 00002EAD C3                  <1> 		ret
  3821                              <1> 
  3822                              <1> convert:
  3823 00002EAE 4E                  <1> 	dec esi
  3824 00002EAF 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3825                              <1> .lp:
  3826 00002EB1 89DE                <1> 	mov esi, ebx
  3827 00002EB3 81EE09000000        <1> 	sub esi, 9
  3828 00002EB9 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3829 00002EBF 720A                <1> 	jb .8
  3830 00002EC1 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3831 00002EC7 FE06                <1> 	inc byte [esi]
  3832 00002EC9 EBE6                <1> 	jmp .lp
  3833 00002ECB 46                  <1> .8:	inc esi
  3834 00002ECC 81F900E1F505        <1> 	cmp ecx, 100000000
  3835 00002ED2 720A                <1> 	jb .7
  3836 00002ED4 81E900E1F505        <1> 	sub ecx, 100000000
  3837 00002EDA FE06                <1> 	inc byte [esi]
  3838 00002EDC EBD3                <1> 	jmp .lp
  3839 00002EDE 46                  <1> .7:	inc esi
  3840 00002EDF 81F980969800        <1> 	cmp ecx, 10000000
  3841 00002EE5 720A                <1> 	jb .6
  3842 00002EE7 81E980969800        <1> 	sub ecx, 10000000
  3843 00002EED FE06                <1> 	inc byte [esi]
  3844 00002EEF EBC0                <1> 	jmp .lp
  3845 00002EF1 46                  <1> .6:	inc esi
  3846 00002EF2 81F940420F00        <1> 	cmp ecx, 1000000
  3847 00002EF8 720A                <1> 	jb .5
  3848 00002EFA 81E940420F00        <1> 	sub ecx, 1000000
  3849 00002F00 FE06                <1> 	inc byte [esi]
  3850 00002F02 EBAD                <1> 	jmp .lp
  3851 00002F04 46                  <1> .5:	inc esi
  3852 00002F05 81F9A0860100        <1> 	cmp ecx, 100000
  3853 00002F0B 720A                <1> 	jb .4
  3854 00002F0D 81E9A0860100        <1> 	sub ecx, 100000
  3855 00002F13 FE06                <1> 	inc byte [esi]
  3856 00002F15 EB9A                <1> 	jmp .lp
  3857 00002F17 46                  <1> .4:	inc esi
  3858 00002F18 81F910270000        <1> 	cmp ecx, 10000
  3859 00002F1E 720A                <1> 	jb .3
  3860 00002F20 81E910270000        <1> 	sub ecx, 10000
  3861 00002F26 FE06                <1> 	inc byte [esi]
  3862 00002F28 EB87                <1> 	jmp .lp
  3863 00002F2A 46                  <1> .3:	inc esi
  3864 00002F2B 81F9E8030000        <1> 	cmp ecx, 1000
  3865 00002F31 720D                <1> 	jb .2
  3866 00002F33 81E9E8030000        <1> 	sub ecx, 1000
  3867 00002F39 FE06                <1> 	inc byte [esi]
  3868 00002F3B E971FFFFFF          <1> 	jmp .lp
  3869 00002F40 46                  <1> .2:	inc esi
  3870 00002F41 81F964000000        <1> 	cmp ecx, 100
  3871 00002F47 720D                <1> 	jb .1
  3872 00002F49 81E964000000        <1> 	sub ecx, 100
  3873 00002F4F FE06                <1> 	inc byte [esi]
  3874 00002F51 E95BFFFFFF          <1> 	jmp .lp
  3875 00002F56 46                  <1> .1:	inc esi
  3876 00002F57 81F90A000000        <1> 	cmp ecx, 10
  3877 00002F5D 720D                <1> 	jb .0
  3878 00002F5F 81E90A000000        <1> 	sub ecx, 10
  3879 00002F65 FE06                <1> 	inc byte [esi]
  3880 00002F67 E945FFFFFF          <1> 	jmp .lp
  3881 00002F6C 46                  <1> .0:	inc esi
  3882 00002F6D 81F901000000        <1> 	cmp ecx, 1
  3883 00002F73 720D                <1> 	jb .dn
  3884 00002F75 81E901000000        <1> 	sub ecx, 1
  3885 00002F7B FE06                <1> 	inc byte [esi]
  3886 00002F7D E92FFFFFFF          <1> 	jmp .lp
  3887                              <1> .dn:
  3888 00002F82 C3                  <1> 	ret
  3889                              <1> 
  3890                              <1> 	
  3891                              <1> 
  3892 00002F83 00<rept>            <1> hexnumber times 8 db 0
  3893 00002F8B 202000              <1> hexnumberend db "  ",0
  3894                              <1> 
  3895                              <1> converthex:
  3896                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3897 00002F8E 56                  <1> 	push esi
  3898 00002F8F B030                <1> 	mov al, "0"
  3899 00002F91 39FE                <1> .clearlp: cmp esi, edi
  3900 00002F93 7305                <1> 	jae .doneclear
  3901 00002F95 8806                <1> 	mov [esi], al
  3902 00002F97 46                  <1> 	inc esi
  3903 00002F98 EBF7                <1> 	jmp .clearlp
  3904                              <1> .doneclear:
  3905 00002F9A 81EE02000000        <1> 	sub esi, 2
  3906 00002FA0 89C8                <1> 	mov eax, ecx
  3907                              <1> .loop:
  3908 00002FA2 30FF                <1> 	xor bh, bh
  3909 00002FA4 88C3                <1> 	mov bl, al
  3910 00002FA6 66C1E304            <1> 	shl bx, 4
  3911 00002FAA C0EB04              <1> 	shr bl, 4
  3912 00002FAD 86DF                <1> 	xchg bl, bh ;they are backwards
  3913 00002FAF 80C330              <1> 	add bl, 48
  3914 00002FB2 80FB39              <1> 	cmp bl, "9"
  3915 00002FB5 7609                <1> 	jbe .goodbl
  3916 00002FB7 80EB30              <1> 	sub bl, 48
  3917 00002FBA 80EB0A              <1> 	sub bl, 0xA
  3918 00002FBD 80C341              <1> 	add bl, "A"
  3919                              <1> .goodbl:
  3920 00002FC0 80C730              <1> 	add bh, 48
  3921 00002FC3 80FF39              <1> 	cmp bh, "9"
  3922 00002FC6 7609                <1> 	jbe .goodbh
  3923 00002FC8 80EF30              <1> 	sub bh, 48
  3924 00002FCB 80EF0A              <1> 	sub bh, 0xA
  3925 00002FCE 80C741              <1> 	add bh, "A"
  3926                              <1> .goodbh:
  3927 00002FD1 C1E808              <1> 	shr eax, 8
  3928 00002FD4 66891E              <1> 	mov [esi], bx
  3929 00002FD7 81EE02000000        <1> 	sub esi, 2
  3930 00002FDD 3B3424              <1> 	cmp esi, [esp]
  3931 00002FE0 7207                <1> 	jb .done
  3932 00002FE2 3D00000000          <1> 	cmp eax, 0
  3933 00002FE7 75B9                <1> 	jne .loop
  3934                              <1> .done:
  3935 00002FE9 5E                  <1> 	pop esi
  3936 00002FEA C3                  <1> 	ret
  3937                              <1> 	
  3938                              <1> 	
  3939 00002FEB 00                  <1> smallhex db 0
  3940 00002FEC 01                  <1> firsthexshown db 1
  3941                              <1> showhexsmall:
  3942 00002FED C605[EB2F0000]01    <1> 	mov byte [smallhex], 1
  3943 00002FF4 E808000000          <1> 	call showhex
  3944 00002FF9 C605[EB2F0000]00    <1> 	mov byte [smallhex], 0
  3945 00003000 C3                  <1> 	ret
  3946                              <1> showhex:
  3947 00003001 60                  <1> 	pusha
  3948 00003002 BE[832F0000]        <1> 	mov esi, hexnumber
  3949 00003007 BF[8B2F0000]        <1> 	mov edi, hexnumberend
  3950 0000300C E87DFFFFFF          <1> 	call converthex
  3951 00003011 803D[EC2F0000]01    <1> 	cmp byte [firsthexshown], 1
  3952 00003018 7503                <1> 	jne .show
  3953 0000301A 6631D2              <1> 	xor dx, dx
  3954                              <1> .show:
  3955 0000301D 803D[EC2F0000]03    <1> 	cmp byte [firsthexshown], 3
  3956 00003024 750A                <1> 	jne .nonewhexline
  3957 00003026 BE[5E900000]        <1> 	mov esi, line
  3958 0000302B E82AEDFFFF          <1> 	call print
  3959                              <1> .nonewhexline:
  3960 00003030 803D[EC2F0000]04    <1> 	cmp byte [firsthexshown], 4
  3961 00003037 7527                <1> 	jne .notab
  3962 00003039 B1A0                <1> 	mov cl, 160
  3963 0000303B 28D1                <1> 	sub cl, dl
  3964 0000303D C0E905              <1> 	shr cl, 5
  3965 00003040 C0E105              <1> 	shl cl, 5
  3966 00003043 80F900              <1> 	cmp cl, 0
  3967 00003046 750F                <1> 	jne .nonewline
  3968 00003048 BE[5E900000]        <1> 	mov esi, line
  3969 0000304D E808EDFFFF          <1> 	call print
  3970 00003052 E909000000          <1> 	jmp .notab
  3971                              <1> .nonewline:
  3972 00003057 80C20F              <1> 	add dl, 15
  3973 0000305A C0EA04              <1> 	shr dl, 4
  3974 0000305D C0E204              <1> 	shl dl, 4
  3975                              <1> .notab:
  3976 00003060 BE[832F0000]        <1> 	mov esi, hexnumber
  3977 00003065 803D[EB2F0000]01    <1> 	cmp byte [smallhex],1
  3978 0000306C 7506                <1> 	jne .nosmall
  3979 0000306E 81C606000000        <1> 	add esi, 6
  3980                              <1> .nosmall:
  3981 00003074 803D[EC2F0000]05    <1> 	cmp byte [firsthexshown], 5
  3982 0000307B 750A                <1> 	jne .noquiet
  3983 0000307D E8C6ECFFFF          <1> 	call printquiet
  3984 00003082 E918000000          <1> 	jmp .donequiet
  3985                              <1> .noquiet:
  3986 00003087 803D[EC2F0000]06    <1> 	cmp byte [firsthexshown], 6
  3987 0000308E 750A                <1> 	jne .normal
  3988 00003090 E8A7ECFFFF          <1> 	call printhighlight
  3989 00003095 E905000000          <1> 	jmp .donequiet
  3990                              <1> .normal:
  3991 0000309A E8BBECFFFF          <1> 	call print
  3992                              <1> .donequiet:
  3993 0000309F 803D[EC2F0000]02    <1> 	cmp byte [firsthexshown], 2
  3994 000030A6 750A                <1> 	jne .shown
  3995 000030A8 BE[5E900000]        <1> 	mov esi, line
  3996 000030AD E8A8ECFFFF          <1> 	call print
  3997                              <1> .shown:
  3998 000030B2 C605[EC2F0000]00    <1> 	mov byte [firsthexshown], 0
  3999 000030B9 61                  <1> 	popa
  4000 000030BA C3                  <1> 	ret
  4001                              <1> 
  4002                              <1> 
  4003 000030BB 303030303030303030- <1> decnumber db "00000000000000"
  4004 000030C4 3030303030          <1>
  4005 000030C9 2000                <1> decnumberend: db " ",0
  4006                              <1> 
  4007                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4008 000030CB 60                  <1> 	pusha
  4009 000030CC BF[BB300000]        <1> 	mov edi, decnumber
  4010 000030D1 BE[C9300000]        <1> 	mov esi, decnumberend
  4011                              <1> .clear:
  4012 000030D6 C60730              <1> 	mov byte [edi], '0'
  4013 000030D9 47                  <1> 	inc edi
  4014 000030DA 39F7                <1> 	cmp edi, esi
  4015 000030DC 72F8                <1> 	jb .clear
  4016 000030DE BF[BB300000]        <1> 	mov edi, decnumber
  4017 000030E3 E8C6FDFFFF          <1> 	call convert
  4018 000030E8 803D[EC2F0000]01    <1> 	cmp byte [firsthexshown], 1
  4019 000030EF 7503                <1> 	jne .show
  4020 000030F1 6631D2              <1> 	xor dx, dx
  4021                              <1> .show:
  4022 000030F4 803D[EC2F0000]03    <1> 	cmp byte [firsthexshown], 3
  4023 000030FB 750A                <1> 	jne .nonewdecline
  4024 000030FD BE[5E900000]        <1> 	mov esi, line
  4025 00003102 E853ECFFFF          <1> 	call print
  4026                              <1> .nonewdecline:
  4027 00003107 803D[EC2F0000]04    <1> 	cmp byte [firsthexshown], 4
  4028 0000310E 7527                <1> 	jne .notab
  4029 00003110 B1A0                <1> 	mov cl, 160
  4030 00003112 28D1                <1> 	sub cl, dl
  4031 00003114 C0E905              <1> 	shr cl, 5
  4032 00003117 C0E105              <1> 	shl cl, 5
  4033 0000311A 80F900              <1> 	cmp cl, 0
  4034 0000311D 750F                <1> 	jne .nonewline
  4035 0000311F BE[5E900000]        <1> 	mov esi, line
  4036 00003124 E831ECFFFF          <1> 	call print
  4037 00003129 E909000000          <1> 	jmp .notab
  4038                              <1> .nonewline:
  4039 0000312E 80C20F              <1> 	add dl, 15
  4040 00003131 C0EA04              <1> 	shr dl, 4
  4041 00003134 C0E204              <1> 	shl dl, 4
  4042                              <1> .notab:
  4043 00003137 BE[BB300000]        <1> 	mov esi, decnumber
  4044 0000313C 4E                  <1> 	dec esi
  4045                              <1> .sifind:
  4046 0000313D 46                  <1> 	inc esi
  4047 0000313E 803E30              <1> 	cmp byte [esi], '0'
  4048 00003141 74FA                <1> 	je .sifind
  4049 00003143 E812ECFFFF          <1> 	call print
  4050 00003148 803D[EC2F0000]02    <1> 	cmp byte [firsthexshown], 2
  4051 0000314F 750A                <1> 	jne .shown
  4052 00003151 BE[5E900000]        <1> 	mov esi, line
  4053 00003156 E8FFEBFFFF          <1> 	call print
  4054                              <1> .shown:
  4055 0000315B C605[EC2F0000]00    <1> 	mov byte [firsthexshown], 0
  4056 00003162 61                  <1> 	popa
  4057 00003163 C3                  <1> 	ret
  4058                              <1> 	
  4059                              <1> cnvrthextxt:
  4060 00003164 31C9                <1> 	xor ecx, ecx
  4061 00003166 31C0                <1> 	xor eax, eax
  4062 00003168 31D2                <1> 	xor edx, edx
  4063 0000316A 31DB                <1> 	xor ebx, ebx
  4064 0000316C 4E                  <1> 	dec esi
  4065                              <1> .end:
  4066 0000316D 46                  <1> 	inc esi
  4067 0000316E 8A06                <1> 	mov al, [esi]
  4068 00003170 3C00                <1> 	cmp al, 0
  4069 00003172 75F9                <1> 	jne .end
  4070                              <1> .loop:
  4071 00003174 4E                  <1> 	dec esi
  4072 00003175 8A06                <1> 	mov al, [esi]
  4073 00003177 3C41                <1> 	cmp al, "A"
  4074 00003179 7328                <1> 	jae .char
  4075 0000317B 2C30                <1> 	sub al, 48
  4076 0000317D 3C10                <1> 	cmp al, 16
  4077 0000317F 7721                <1> 	ja .done
  4078                              <1> .donechar:
  4079 00003181 81FA00000000        <1> 	cmp edx, 0
  4080 00003187 740E                <1> 	je .noshl
  4081 00003189 89D3                <1> 	mov ebx, edx
  4082                              <1> .shl:
  4083 0000318B C1E004              <1> 	shl eax, 4
  4084 0000318E 4B                  <1> 	dec ebx
  4085 0000318F 81FB00000000        <1> 	cmp ebx, 0
  4086 00003195 75F4                <1> 	jne .shl
  4087                              <1> .noshl:
  4088 00003197 42                  <1> 	inc edx
  4089 00003198 01C1                <1> 	add ecx, eax
  4090 0000319A 81FA08000000        <1> 	cmp edx, 8
  4091 000031A0 72D2                <1> 	jb .loop
  4092                              <1> .done:
  4093 000031A2 C3                  <1> 	ret
  4094                              <1> .char:
  4095 000031A3 3C46                <1> 	cmp al, "F"
  4096 000031A5 77FB                <1> 	ja .done
  4097 000031A7 2C41                <1> 	sub al, "A"
  4098 000031A9 040A                <1> 	add al, 0xA
  4099 000031AB EBD4                <1> 	jmp .donechar
  4100                              <1> 	
  4101                              <1> 	
  4102                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4103 000031AD 31C9                <1> 	xor ecx, ecx
  4104 000031AF 31C0                <1> 	xor eax, eax
  4105 000031B1 31D2                <1> 	xor edx, edx
  4106 000031B3 31DB                <1> 	xor ebx, ebx
  4107 000031B5 4E                  <1> 	dec esi
  4108                              <1> .lp:
  4109 000031B6 46                  <1> 	inc esi
  4110 000031B7 8A06                <1> 	mov al, [esi]
  4111 000031B9 3C00                <1> 	cmp al, 0
  4112 000031BB 75F9                <1> 	jne .lp
  4113 000031BD 4E                  <1> 	dec esi
  4114 000031BE 8A06                <1> 	mov al, [esi]
  4115 000031C0 3C2E                <1> 	cmp al, '.'
  4116 000031C2 7503                <1> 	jne .dot
  4117 000031C4 46                  <1> 	inc esi
  4118 000031C5 EBEF                <1> 	jmp .lp
  4119                              <1> .dot:
  4120 000031C7 3C20                <1> 	cmp al, ' '
  4121 000031C9 7404                <1> 	je .zero
  4122 000031CB 3C30                <1> 	cmp al, '0'
  4123 000031CD 7504                <1> 	jne .txtlp
  4124                              <1> .zero: 
  4125 000031CF 39FE                <1> 		cmp esi, edi
  4126 000031D1 7458                <1> 		je .done
  4127                              <1> .txtlp:
  4128 000031D3 31C0                <1> 	xor eax, eax
  4129 000031D5 8A06                <1> 	mov al, [esi]
  4130 000031D7 3C3D                <1> 	cmp al, '='
  4131 000031D9 7450                <1> 	je .done
  4132 000031DB 3C30                <1> 	cmp al, 48
  4133 000031DD 724C                <1> 	jb .done
  4134 000031DF 3C23                <1> 	cmp al, '#'
  4135 000031E1 7448                <1> 	je .done
  4136 000031E3 39FE                <1> 	cmp esi, edi
  4137 000031E5 7244                <1> 	jb .done
  4138 000031E7 81F900000000        <1> 	cmp ecx, 0
  4139 000031ED 7708                <1> 	ja .exp
  4140 000031EF 2C30                <1> .noexp:	sub al, 48
  4141 000031F1 01C2                <1> 	add edx, eax
  4142 000031F3 4E                  <1> 	dec esi
  4143 000031F4 41                  <1> 	inc ecx
  4144 000031F5 EBDC                <1> 	jmp .txtlp
  4145 000031F7 81F900000000        <1> .exp:	cmp ecx, 0
  4146 000031FD 74F0                <1> 	je .noexp
  4147 000031FF 2C30                <1> 	sub al, 48
  4148 00003201 51                  <1> 	push ecx
  4149 00003202 89C3                <1> .expmul:	mov ebx, eax
  4150 00003204 01D8                <1> 	add eax, ebx
  4151 00003206 01D8                <1> 	add eax, ebx
  4152 00003208 01D8                <1> 	add eax, ebx
  4153 0000320A 01D8                <1> 	add eax, ebx
  4154 0000320C 01D8                <1> 	add eax, ebx
  4155 0000320E 01D8                <1> 	add eax, ebx
  4156 00003210 01D8                <1> 	add eax, ebx
  4157 00003212 01D8                <1> 	add eax, ebx
  4158 00003214 01D8                <1> 	add eax, ebx
  4159 00003216 81E901000000        <1> 	sub ecx, 1
  4160 0000321C 81F900000000        <1> 	cmp ecx, 0
  4161 00003222 77DE                <1> 	ja .expmul
  4162 00003224 01C2                <1> 	add edx, eax
  4163 00003226 59                  <1> 	pop ecx
  4164 00003227 4E                  <1> 	dec esi
  4165 00003228 41                  <1> 	inc ecx
  4166 00003229 EBA8                <1> 	jmp .txtlp
  4167 0000322B 89D1                <1> .done: mov ecx, edx
  4168 0000322D C3                  <1> 	ret
  4169                                      %include "source/programs.asm"
  4170 0000322E FF2C                <1> filetypes db 255,44
  4171                              <1> progstart:		;programs start here
  4172                              <1> indexfiles:
  4173 00003230 BE[30320000]        <1> 	mov esi, progstart
  4174 00003235 BB[92B40000]        <1> 	mov ebx, fileindex
  4175 0000323A BF[30320000]        <1> 	mov edi, progstart
  4176 0000323F 81EF02000000        <1> 	sub edi, 2
  4177                              <1> indexloop:
  4178 00003245 668B0E              <1> 	mov cx, [esi]
  4179                              <1> 	indexloop2:
  4180 00003248 663B0F              <1> 		cmp cx, [edi]
  4181 0000324B 7424                <1> 		je indexloop2done
  4182 0000324D 81EF02000000        <1> 		sub edi, 2
  4183 00003253 81FF[2E320000]      <1> 		cmp edi, filetypes
  4184 00003259 73ED                <1> 		jae indexloop2
  4185 0000325B BF[30320000]        <1> 	mov edi, progstart
  4186 00003260 81EF02000000        <1> 	sub edi, 2
  4187 00003266 46                  <1> 	inc esi
  4188 00003267 81FE[F6520000]      <1> 	cmp esi, batchprogend
  4189 0000326D 734E                <1> 	jae indexloopdone
  4190 0000326F EBD4                <1> 	jmp indexloop
  4191                              <1> indexloop2done:
  4192 00003271 66890B              <1> 	mov [ebx], cx
  4193 00003274 81C302000000        <1> 	add ebx, 2
  4194 0000327A 81C602000000        <1> 	add esi, 2
  4195                              <1> 	nameindex:
  4196 00003280 8A0E                <1> 		mov cl, [esi]
  4197 00003282 80F900              <1> 		cmp cl, 0
  4198 00003285 7406                <1> 		je nameindexdone
  4199 00003287 880B                <1> 		mov [ebx], cl
  4200 00003289 46                  <1> 		inc esi
  4201 0000328A 43                  <1> 		inc ebx
  4202 0000328B EBF3                <1> 		jmp nameindex
  4203                              <1> 	nameindexdone:
  4204 0000328D 43                  <1> 		inc ebx
  4205 0000328E 66C7030000          <1> 		mov word [ebx], 0
  4206 00003293 81C302000000        <1> 		add ebx, 2
  4207 00003299 46                  <1> 		inc esi
  4208 0000329A 8933                <1> 		mov [ebx], esi
  4209 0000329C 81C304000000        <1> 		add ebx, 4
  4210 000032A2 66C7030000          <1> 		mov word [ebx], 0
  4211 000032A7 81C302000000        <1> 		add ebx, 2
  4212 000032AD 81FB[92B80000]      <1> 		cmp ebx, fileindexend
  4213 000032B3 7308                <1> 		jae indexloopdone
  4214 000032B5 81C601000000        <1> 		add esi, 1
  4215 000032BB EB88                <1> 		jmp indexloop
  4216 000032BD C605[C5320000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4217 000032C4 C3                  <1> 		ret
  4218 000032C5 00                  <1> indexdone db 0
  4219                              <1> %include 'source/programs/_comment.asm' ;#
  4220 000032C6 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4221 000032CA C3                  <2> 	ret 
  4222                              <1> %include 'source/programs/_math.asm' ;!
  4223 000032CB FF2C2100            <2> db 255,44,"!",0
  4224                              <2> 	num:	
  4225 000032CF E8C5FBFFFF          <2> 		call clearbuffer
  4226 000032D4 C605[55350000]00    <2> 		mov byte [decimal], 0
  4227 000032DB C605[56350000]00    <2> 		mov byte [decimal2], 0
  4228 000032E2 8B35[DA2D0000]      <2> 		mov esi, [currentcommandloc]
  4229 000032E8 31C0                <2> 		xor eax, eax
  4230 000032EA 31C9                <2> 		xor ecx, ecx
  4231 000032EC 31DB                <2> 		xor ebx, ebx
  4232 000032EE 8A06                <2> 	num2:	mov al, [esi]
  4233 000032F0 3C2B                <2> 		cmp al, '+'
  4234 000032F2 741B                <2> 		je operatorfound
  4235 000032F4 3C2D                <2> 		cmp al, '-'
  4236 000032F6 7417                <2> 		je operatorfound
  4237 000032F8 3C2A                <2> 		cmp al, '*'
  4238 000032FA 7413                <2> 		je operatorfound
  4239 000032FC 3C2F                <2> 		cmp al, '/'
  4240 000032FE 740F                <2> 		je operatorfound
  4241 00003300 3C5E                <2> 		cmp al, '^'
  4242 00003302 740B                <2> 		je operatorfound
  4243 00003304 46                  <2> 		inc esi
  4244 00003305 3C00                <2> 		cmp al, 0
  4245 00003307 0F841AF8FFFF        <2> 		je near nwcmd
  4246 0000330D EBDF                <2> 		jmp num2
  4247 0000330F 50                  <2> 	operatorfound: push eax
  4248 00003310 30E4                <2> 		xor ah, ah
  4249 00003312 8826                <2> 		mov [esi], ah
  4250 00003314 89F7                <2> 		mov edi, esi
  4251 00003316 46                  <2> 		inc esi
  4252 00003317 8A06                <2> 		mov al, [esi]
  4253 00003319 3C25                <2> 		cmp al, '%'
  4254 0000331B 0F8462000000        <2> 		je near resultnum1
  4255                              <2> 	varnum2: 
  4256 00003321 57                  <2> 		push edi
  4257 00003322 E8A4000000          <2> 		call checkdecimal
  4258 00003327 5F                  <2> 		pop edi
  4259 00003328 E880FEFFFF          <2> 		call cnvrttxt
  4260                              <2> 	vrnm2:
  4261 0000332D 89CB                <2> 		mov ebx, ecx
  4262 0000332F 53                  <2> 		push ebx
  4263 00003330 E864FBFFFF          <2> 		call clearbuffer
  4264 00003335 8B35[DA2D0000]      <2> 		mov esi, [currentcommandloc]
  4265 0000333B 89F7                <2> 		mov edi, esi
  4266 0000333D 46                  <2> 		inc esi
  4267 0000333E 8A06                <2> 		mov al, [esi]
  4268 00003340 3C25                <2> 		cmp al, '%'
  4269 00003342 0F844F000000        <2> 		je near resultnum2
  4270                              <2> 	varnum4: 
  4271 00003348 57                  <2> 		push edi
  4272 00003349 E869000000          <2> 		call checkdecimal2
  4273 0000334E 5F                  <2> 		pop edi
  4274 0000334F E859FEFFFF          <2> 		call cnvrttxt
  4275                              <2> 	vrnm4:
  4276 00003354 5B                  <2> 		pop ebx
  4277 00003355 58                  <2> 		pop eax
  4278 00003356 3C2B                <2> 		cmp al, '+'
  4279 00003358 0F849B000000        <2> 		je near plusnum
  4280 0000335E 3C2D                <2> 		cmp al, '-'
  4281 00003360 0F849F000000        <2> 		je near subnum
  4282 00003366 3C2A                <2> 		cmp al, '*'
  4283 00003368 0F84A3000000        <2> 		je near mulnum
  4284 0000336E 3C2F                <2> 		cmp al, '/'
  4285 00003370 0F84B1000000        <2> 		je near divnum
  4286 00003376 3C5E                <2> 		cmp al, '^'
  4287 00003378 0F84CE000000        <2> 		je near expnum
  4288 0000337E E9A4F7FFFF          <2> 		jmp nwcmd
  4289                              <2> 	resultnum1:
  4290 00003383 8A0D[57350000]      <2> 		mov cl, [decimalresult]
  4291 00003389 880D[55350000]      <2> 		mov [decimal], cl
  4292 0000338F 8B0D[58350000]      <2> 		mov ecx, [result]
  4293 00003395 EB96                <2> 		jmp vrnm2
  4294                              <2> 	resultnum2:
  4295 00003397 8A0D[55350000]      <2> 		mov cl, [decimal]
  4296 0000339D 880D[56350000]      <2> 		mov [decimal2], cl
  4297 000033A3 8A0D[57350000]      <2> 		mov cl, [decimalresult]
  4298 000033A9 880D[55350000]      <2> 		mov [decimal], cl
  4299 000033AF 8B0D[58350000]      <2> 		mov ecx, [result]
  4300 000033B5 EB9D                <2> 		jmp vrnm4
  4301                              <2> 	checkdecimal2:
  4302 000033B7 8A25[55350000]      <2> 		mov ah, [decimal]
  4303 000033BD 8825[56350000]      <2> 		mov [decimal2], ah
  4304 000033C3 30E4                <2> 		xor ah, ah
  4305 000033C5 8825[55350000]      <2> 		mov [decimal], ah
  4306                              <2> 	checkdecimal:
  4307 000033CB 89F7                <2> 		mov edi, esi
  4308                              <2> 	chkdec1:
  4309 000033CD 8A07                <2> 		mov al, [edi]
  4310 000033CF 3C2E                <2> 		cmp al, '.'
  4311 000033D1 0F840B000000        <2> 		je near fnddec
  4312 000033D7 3C00                <2> 		cmp al, 0
  4313 000033D9 0F8419000000        <2> 		je near nodecimal
  4314 000033DF 47                  <2> 		inc edi
  4315 000033E0 EBEB                <2> 		jmp chkdec1
  4316                              <2> 	fnddec:
  4317 000033E2 8A4701              <2> 		mov al, [edi + 1]
  4318 000033E5 8807                <2> 		mov [edi], al
  4319 000033E7 3C00                <2> 		cmp al, 0
  4320 000033E9 0F8409000000        <2> 		je near nodecimal
  4321 000033EF FE05[55350000]      <2> 		inc byte [decimal]
  4322 000033F5 47                  <2> 		inc edi
  4323 000033F6 EBEA                <2> 		jmp fnddec
  4324                              <2> 	nodecimal:
  4325 000033F8 C3                  <2> 		ret
  4326                              <2> 	plusnum:
  4327 000033F9 E815010000          <2> 		call decaddfix
  4328 000033FE 01D9                <2> 		add ecx, ebx
  4329 00003400 E98A000000          <2> 		jmp retnum
  4330                              <2> 	subnum:
  4331 00003405 E809010000          <2> 		call decaddfix
  4332 0000340A 29D9                <2> 		sub ecx, ebx
  4333 0000340C E97E000000          <2> 		jmp retnum
  4334                              <2> 	mulnum:
  4335 00003411 A0[56350000]        <2> 		mov al, [decimal2]
  4336 00003416 0005[55350000]      <2> 		add [decimal], al
  4337 0000341C 89C8                <2> 		mov eax, ecx
  4338 0000341E F7E3                <2> 		mul ebx
  4339 00003420 89C1                <2> 		mov ecx, eax
  4340 00003422 E968000000          <2> 		jmp retnum
  4341                              <2> 	divnum:
  4342 00003427 E8E7000000          <2> 		call decaddfix
  4343 0000342C 30C0                <2> 		xor al, al
  4344 0000342E A2[55350000]        <2> 		mov [decimal], al
  4345 00003433 31D2                <2> 		xor edx, edx
  4346 00003435 89C8                <2> 		mov eax, ecx
  4347 00003437 81FB00000000        <2> 		cmp ebx, 0
  4348 0000343D 0F844C000000        <2> 		je near retnum
  4349 00003443 F7F3                <2> 		div ebx
  4350 00003445 89C1                <2> 		mov ecx, eax
  4351 00003447 E943000000          <2> 		jmp retnum
  4352                              <2> 	expnum:
  4353 0000344C 8A15[55350000]      <2> 		mov dl, [decimal]
  4354 00003452 8815[56350000]      <2> 		mov [decimal2], dl
  4355 00003458 31D2                <2> 		xor edx, edx
  4356 0000345A 89C8                <2> 		mov eax, ecx
  4357 0000345C 89D9                <2> 		mov ecx, ebx
  4358 0000345E 89C3                <2> 		mov ebx, eax
  4359 00003460 81F900000000        <2> 		cmp ecx, 0
  4360 00003466 7422                <2> 		je noexpnum
  4361 00003468 49                  <2> 		dec ecx
  4362 00003469 81F900000000        <2> 		cmp ecx, 0
  4363 0000346F 7412                <2> 		je noexpnumlp
  4364 00003471 F7E3                <2> 	expnumlp: mul ebx
  4365 00003473 8A15[56350000]      <2> 		mov dl, [decimal2]
  4366 00003479 0015[55350000]      <2> 		add [decimal], dl
  4367 0000347F 31D2                <2> 		xor edx, edx
  4368 00003481 E2EE                <2> 		loop expnumlp
  4369                              <2> 	noexpnumlp:
  4370 00003483 89C1                <2> 		mov ecx, eax
  4371 00003485 E905000000          <2> 		jmp retnum
  4372                              <2> 	noexpnum:
  4373 0000348A B901000000          <2> 		mov ecx, 1
  4374                              <2> 	retnum: 
  4375 0000348F BE[26D30000]        <2> 		mov esi, numbuf
  4376 00003494 890D[58350000]      <2> 		mov [result], ecx
  4377 0000349A E80FFAFFFF          <2> 		call convert
  4378 0000349F BE[26D30000]        <2> 		mov esi, numbuf
  4379 000034A4 8A25[55350000]      <2> 		mov ah, [decimal]
  4380 000034AA 8825[57350000]      <2> 		mov [decimalresult], ah
  4381 000034B0 80FC00              <2> 		cmp ah, 0
  4382 000034B3 0F8425000000        <2> 		je near noputdecimal
  4383                              <2> 	putdecimal:
  4384 000034B9 4E                  <2> 		dec esi
  4385 000034BA FECC                <2> 		dec ah
  4386 000034BC 80FC00              <2> 		cmp ah, 0
  4387 000034BF 0F87F4FFFFFF        <2> 		ja near putdecimal
  4388 000034C5 4E                  <2> 		dec esi
  4389 000034C6 8A06                <2> 		mov al, [esi]
  4390 000034C8 C6062E              <2> 		mov byte [esi], '.'
  4391                              <2> 	decputloop:
  4392 000034CB 4E                  <2> 		dec esi
  4393 000034CC 8A26                <2> 		mov ah, [esi]
  4394 000034CE 8806                <2> 		mov [esi], al
  4395 000034D0 88E0                <2> 		mov al, ah
  4396 000034D2 81FE[12D30000]      <2> 		cmp esi, buf2
  4397 000034D8 0F87EDFFFFFF        <2> 		ja near decputloop
  4398                              <2> 	noputdecimal:
  4399 000034DE BE[12D30000]        <2> 		mov esi, buf2
  4400 000034E3 E809000000          <2> 		call chkadd
  4401 000034E8 E93AF6FFFF          <2> 		jmp nwcmd
  4402 000034ED 00000000            <2> edxnumbuf dw 0,0
  4403 000034F1 8A06                <2> 	chkadd: mov al, [esi]
  4404 000034F3 3C30                <2> 		cmp al, '0'
  4405 000034F5 750C                <2> 		jne dnadd
  4406 000034F7 46                  <2> 		inc esi
  4407 000034F8 81FE[26D30000]      <2> 		cmp esi, numbuf
  4408 000034FE 7402                <2> 		je dnaddm1
  4409 00003500 EBEF                <2> 		jmp chkadd
  4410 00003502 4E                  <2> 	dnaddm1: dec esi
  4411 00003503 E852E8FFFF          <2> 	dnadd:	call print
  4412 00003508 BE[5E900000]        <2> 		mov esi, line
  4413 0000350D E848E8FFFF          <2> 		call print
  4414 00003512 C3                  <2> 		ret
  4415                              <2> 		
  4416                              <2> 	decaddfix:
  4417 00003513 A0[56350000]        <2> 		mov al, [decimal2]
  4418 00003518 8A25[55350000]      <2> 		mov ah, [decimal]
  4419 0000351E 38E0                <2> 		cmp al, ah
  4420 00003520 7432                <2> 		je gooddecadd
  4421 00003522 38E0                <2> 		cmp al, ah
  4422 00003524 721A                <2> 		jb lowdecadd
  4423                              <2> 	highdecadd:
  4424 00003526 FEC4                <2> 		inc ah
  4425 00003528 89CA                <2> 		mov edx, ecx
  4426 0000352A C1E103              <2> 		shl ecx, 3
  4427 0000352D 01D1                <2> 		add ecx, edx
  4428 0000352F 01D1                <2> 		add ecx, edx
  4429 00003531 38E0                <2> 		cmp al, ah
  4430 00003533 77F1                <2> 		ja highdecadd
  4431 00003535 8825[55350000]      <2> 		mov [decimal], ah
  4432 0000353B E914000000          <2> 		jmp gooddecadd
  4433                              <2> 	lowdecadd:
  4434 00003540 FEC0                <2> 		inc al
  4435 00003542 89DA                <2> 		mov edx, ebx
  4436 00003544 C1E303              <2> 		shl ebx, 3
  4437 00003547 01D3                <2> 		add ebx, edx
  4438 00003549 01D3                <2> 		add ebx, edx
  4439 0000354B 38E0                <2> 		cmp al, ah
  4440 0000354D 72F1                <2> 		jb lowdecadd
  4441 0000354F A2[55350000]        <2> 		mov [decimal], al
  4442                              <2> 	gooddecadd:
  4443 00003554 C3                  <2> 		ret
  4444                              <2> 		
  4445 00003555 00                  <2> decimal db 0
  4446 00003556 00                  <2> decimal2 db 0
  4447 00003557 00                  <2> decimalresult db 0
  4448 00003558 00000000            <2> result dd 0
  4449                              <1> %include 'source/programs/_variables.asm' ;% and $
  4450 0000355C FF2C2500            <2> db 255,44,"%",0
  4451                              <2> 	ans:
  4452 00003560 BE[12D30000]        <2> 		mov esi, buf2
  4453 00003565 E887FFFFFF          <2> 		call chkadd
  4454 0000356A C3                  <2> 		ret
  4455                              <2> 		
  4456 0000356B FF2C2400            <2> db 255,44,"$",0
  4457 0000356F 8B35[DA2D0000]      <2> var: mov esi, [currentcommandloc]
  4458 00003575 BB[12BB0000]        <2> 	mov ebx, variables
  4459 0000357A 8A06                <2> lkeq:	mov al, [esi]
  4460 0000357C 3C3D                <2> 	cmp al, '='
  4461 0000357E 741B                <2> 	je eqfnd	;is there an '=' sign?
  4462 00003580 3C00                <2> 	cmp al, 0
  4463 00003582 7403                <2> 	je echovars
  4464 00003584 46                  <2> 	inc esi
  4465 00003585 EBF3                <2> 	jmp lkeq
  4466 00003587 BE[12BB0000]        <2> echovars: mov esi, variables
  4467 0000358C BB[12CB0000]        <2> 	mov ebx, varend
  4468 00003591 B105                <2> 	mov cl, 5
  4469 00003593 B504                <2> 	mov ch, 4
  4470 00003595 E89EF8FFFF          <2> 	call array
  4471 0000359A C3                  <2> 	ret
  4472 0000359B 46                  <2> eqfnd:	inc esi
  4473 0000359C 8A06                <2> 	mov al, [esi]
  4474 0000359E 3C00                <2> 	cmp al, 0
  4475 000035A0 7410                <2> 	je readvar
  4476 000035A2 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  4477 000035A8 BB[12BB0000]        <2> 	mov ebx, variables
  4478 000035AD E919000000          <2> 	jmp seek
  4479                              <2> readvar:
  4480 000035B2 B00A                <2> 	mov al, 10
  4481 000035B4 66BB0700            <2> 	mov bx, 7
  4482 000035B8 C605[11220000]00    <2> 	mov byte [commandedit], 0
  4483 000035BF BF[12D30000]        <2> 	mov edi, buftxtend
  4484 000035C4 E876E8FFFF          <2> 	call rdprint
  4485 000035C9 EBA4                <2> 	jmp var
  4486 000035CB 668B03              <2> seek:	mov ax, [ebx]
  4487 000035CE B105                <2> 	mov cl, 5
  4488 000035D0 B504                <2> 	mov ch, 4
  4489 000035D2 663D0000            <2> 	cmp ax, 0
  4490 000035D6 0F845B000000        <2> 	je near save
  4491 000035DC 6639C8              <2> 	cmp ax, cx
  4492 000035DF 7403                <2> 	je skfnd
  4493 000035E1 43                  <2> 	inc ebx
  4494 000035E2 EBE7                <2> 	jmp seek
  4495 000035E4 8B35[DA2D0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4496 000035EA 46                  <2> 	inc esi
  4497 000035EB 81C302000000        <2> 	add ebx, 2
  4498 000035F1 89DF                <2> 	mov edi, ebx
  4499 000035F3 B13D                <2> 	mov cl, '='
  4500 000035F5 E81FF8FFFF          <2> 	call cndtest
  4501 000035FA 3C01                <2> 	cmp al, 1	
  4502 000035FC 7418                <2> 	je varfnd
  4503 000035FE 89FB                <2> 	mov ebx, edi
  4504 00003600 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  4505 00003606 668B03              <2> 	mov ax, [ebx]
  4506 00003609 663D0000            <2> 	cmp ax, 0
  4507 0000360D 0F8424000000        <2> 	je near save
  4508 00003613 43                  <2> 	inc ebx
  4509 00003614 EBB5                <2> 	jmp seek
  4510 00003616 8A03                <2> varfnd:	mov al, [ebx]
  4511 00003618 3C04                <2> 	cmp al, 4
  4512 0000361A 7404                <2> 	je save2
  4513 0000361C 4B                  <2> 	dec ebx
  4514 0000361D 4E                  <2> 	dec esi
  4515 0000361E EBF6                <2> 	jmp varfnd
  4516 00003620 4B                  <2> save2:	dec ebx
  4517 00003621 4E                  <2> 	dec esi
  4518 00003622 8A03                <2> 	mov al, [ebx]
  4519 00003624 3C05                <2> 	cmp al, 5
  4520 00003626 7402                <2> 	je remove
  4521 00003628 EBEC                <2> 	jmp varfnd
  4522 0000362A 8A03                <2> remove: mov al, [ebx]
  4523 0000362C 3C00                <2> 	cmp al, 0
  4524 0000362E 749B                <2> 	je seek
  4525 00003630 30C0                <2> 	xor al, al
  4526 00003632 8803                <2> 	mov [ebx], al
  4527 00003634 43                  <2> 	inc ebx
  4528 00003635 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4529 00003637 8B35[DA2D0000]      <2> save:	mov esi, [currentcommandloc]
  4530 0000363D 43                  <2> 	inc ebx
  4531 0000363E B005                <2> 	mov al, 5
  4532 00003640 B404                <2> 	mov ah, 4
  4533 00003642 668903              <2> 	mov [ebx], ax
  4534 00003645 43                  <2> 	inc ebx
  4535 00003646 43                  <2> svhere:	inc ebx
  4536 00003647 46                  <2> 	inc esi
  4537 00003648 8A06                <2> 	mov al, [esi]
  4538 0000364A 3C00                <2> 	cmp al, 0
  4539 0000364C 0F844A000000        <2> 	je near svdone
  4540 00003652 3C25                <2> 	cmp al, '%'
  4541 00003654 7404                <2> 	je ans2
  4542 00003656 8803                <2> 	mov [ebx], al	
  4543 00003658 EBEC                <2> 	jmp svhere
  4544 0000365A 56                  <2> ans2:	push esi
  4545 0000365B BE[12D30000]        <2> 	mov esi, buf2
  4546 00003660 E823000000          <2> 	call ansfnd
  4547 00003665 E803000000          <2> 	call anscp
  4548 0000366A 5E                  <2> 	pop esi
  4549 0000366B EBD9                <2> 	jmp svhere
  4550 0000366D 8A06                <2> anscp:	mov al, [esi]
  4551 0000366F 8803                <2> 	mov [ebx], al
  4552 00003671 81FE[26D30000]      <2> 	cmp esi, numbuf
  4553 00003677 74CD                <2> 	je svhere
  4554 00003679 3C00                <2> 	cmp al, 0
  4555 0000367B 74C9                <2> 	je svhere
  4556 0000367D 43                  <2> 	inc ebx
  4557 0000367E 46                  <2> 	inc esi
  4558 0000367F EBEC                <2> 	jmp anscp
  4559 00003681 5E                  <2> ansnf:	pop esi
  4560 00003682 8A06                <2> 	mov al, [esi]
  4561 00003684 8803                <2> 	mov [ebx], al
  4562 00003686 EBBE                <2> 	jmp svhere
  4563 00003688 46                  <2> ansfnd:	inc esi
  4564 00003689 81FE[25D30000]      <2> 	cmp esi, numbuf - 1
  4565 0000368F 740A                <2> 	je fndans
  4566 00003691 8A06                <2> 	mov al, [esi]
  4567 00003693 3C00                <2> 	cmp al, 0
  4568 00003695 74EA                <2> 	je ansnf
  4569 00003697 3C30                <2> 	cmp al, '0'
  4570 00003699 74ED                <2> 	je ansfnd
  4571                              <2> fndans:
  4572 0000369B C3                  <2> 	ret
  4573 0000369C 30C0                <2> svdone:	xor al, al
  4574 0000369E 8803                <2> 	mov [ebx], al
  4575 000036A0 C3                  <2> 	ret
  4576                              <1> %include 'source/programs/_run.asm' ;./
  4577                              <2> 
  4578 000036A1 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4579 000036A5 FF2C2E2F00          <2> 	db 255,44,"./",0
  4580                              <2> rundiskprog:
  4581 000036AA 8B3D[DA2D0000]      <2> 	mov edi, [currentcommandloc]
  4582 000036B0 81C702000000        <2> 	add edi, 2
  4583 000036B6 BE00004000          <2> 	mov esi, 0x400000
  4584 000036BB E8712E0000          <2> 	call loadfile
  4585 000036C0 81FA94010000        <2> 	cmp edx, 404
  4586 000036C6 746A                <2> 	je noprogfound
  4587 000036C8 BB00004000          <2> 	mov ebx, 0x400000
  4588 000036CD A1[A1360000]        <2> 	mov eax, [elfstart]
  4589 000036D2 3903                <2> 	cmp [ebx], eax
  4590 000036D4 0F8437000000        <2> 	je near runelf
  4591 000036DA 66813B4558          <2> 	cmp word [ebx], "EX"
  4592 000036DF 7577                <2> 	jne progbatchfound
  4593 000036E1 81C302000000        <2> 	add ebx, 2
  4594 000036E7 8B3D[DA2D0000]      <2> 	mov edi, [currentcommandloc]
  4595 000036ED 81C702000000        <2> 	add edi, 2
  4596                              <2> findspaceprog:
  4597 000036F3 8A07                <2> 	mov al, [edi]
  4598 000036F5 47                  <2> 	inc edi
  4599 000036F6 3C20                <2> 	cmp al, " "
  4600 000036F8 75F9                <2> 	jne findspaceprog
  4601                              <2> findnonspaceprog:
  4602 000036FA 8A07                <2> 	mov al, [edi]
  4603 000036FC 47                  <2> 	inc edi
  4604 000036FD 3C20                <2> 	cmp al, " "
  4605 000036FF 74F9                <2> 	je findnonspaceprog
  4606 00003701 4F                  <2> 	dec edi
  4607 00003702 8925[92B80000]      <2> 	mov [previousstack], esp
  4608 00003708 FFD3                <2> 	call ebx
  4609 0000370A 8B25[92B80000]      <2> 	mov esp, [previousstack]
  4610 00003710 C3                  <2> 	ret
  4611                              <2> runelf:
  4612 00003711 8B3D[DA2D0000]      <2> 	mov edi, [currentcommandloc]
  4613 00003717 81C702000000        <2> 	add edi, 2
  4614 0000371D 81C380000000        <2> 	add ebx, 0x80
  4615 00003723 8925[92B80000]      <2> 	mov [previousstack], esp
  4616 00003729 FFD3                <2> 	call ebx
  4617 0000372B 8B25[92B80000]      <2> 	mov esp, [previousstack]
  4618 00003731 C3                  <2> 	ret
  4619                              <2> noprogfound:
  4620 00003732 BE[25900000]        <2> 	mov esi, notfound1
  4621 00003737 E81EE6FFFF          <2> 	call print
  4622 0000373C 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  4623 00003742 81C602000000        <2> 	add esi, 2
  4624 00003748 E80DE6FFFF          <2> 	call print
  4625 0000374D BE[2D900000]        <2> 	mov esi, notfound2
  4626 00003752 E803E6FFFF          <2> 	call print
  4627 00003757 C3                  <2> 	ret
  4628                              <2> progbatchfound:
  4629 00003758 BF00004000          <2> 		mov edi, 0x400000
  4630 0000375D C605[0CBB0000]01    <2> 		mov byte [BATCHISON], 1
  4631                              <2> 	batchrunloop:
  4632 00003764 E89BF3FFFF          <2> 		call buftxtclear
  4633 00003769 BE[12CF0000]        <2> 		mov esi, buftxt
  4634 0000376E 8935[DA2D0000]      <2> 		mov [currentcommandloc], esi
  4635                              <2> 	batchrunloop2:
  4636 00003774 B10A                <2> 		mov cl, 10
  4637 00003776 B50D                <2> 		mov ch, 13
  4638 00003778 380F                <2> 		cmp [edi], cl
  4639 0000377A 0F8419000000        <2> 		je near nxtbatchrunline
  4640 00003780 382F                <2> 		cmp [edi], ch
  4641 00003782 0F8411000000        <2> 		je near nxtbatchrunline
  4642 00003788 803F00              <2> 		cmp byte [edi], 0
  4643 0000378B 0F8408000000        <2> 		je near nxtbatchrunline
  4644 00003791 8A07                <2> 		mov al, [edi]
  4645 00003793 8806                <2> 		mov [esi], al
  4646 00003795 46                  <2> 		inc esi
  4647 00003796 47                  <2> 		inc edi
  4648 00003797 EBDB                <2> 		jmp batchrunloop2
  4649                              <2> 	nxtbatchrunline:
  4650 00003799 47                  <2> 		inc edi
  4651 0000379A 380F                <2> 		cmp [edi], cl
  4652 0000379C 74FB                <2> 		je nxtbatchrunline
  4653 0000379E 382F                <2> 		cmp [edi], ch
  4654 000037A0 74F7                <2> 		je nxtbatchrunline
  4655 000037A2 893D[00380000]      <2> 		mov [batchedi], edi
  4656 000037A8 893D[08BB0000]      <2> 		mov [BATCHPOS], edi
  4657 000037AE C60600              <2> 		mov byte [esi], 0
  4658 000037B1 BE[12CF0000]        <2> 		mov esi, buftxt
  4659 000037B6 803E00              <2> 		cmp byte [esi], 0
  4660 000037B9 0F8439000000        <2> 		je near nobatchfoundrun
  4661 000037BF 31DB                <2> 		xor ebx, ebx
  4662 000037C1 8A1D[A3BA0000]      <2> 		mov bl, [IFON]
  4663 000037C7 80FB00              <2> 		cmp bl, 0
  4664 000037CA 0F8534000000        <2> 		jne near iftestbatch
  4665                              <2> 	doneiftest:
  4666 000037D0 803D[D6380000]00    <2> 		cmp byte [runnextline], 0
  4667 000037D7 0F8405000000        <2> 		je near noruniftest
  4668 000037DD E822F5FFFF          <2> 		call run
  4669                              <2> 	noruniftest:
  4670 000037E2 C605[D6380000]01    <2> 		mov byte [runnextline], 1
  4671 000037E9 8B3D[00380000]      <2> 		mov edi, [batchedi]
  4672 000037EF 803F00              <2> 		cmp byte [edi], 0
  4673 000037F2 0F856CFFFFFF        <2> 		jne near batchrunloop
  4674                              <2> 	nobatchfoundrun:
  4675 000037F8 C605[0CBB0000]00    <2> 		mov byte [BATCHISON], 0
  4676 000037FF C3                  <2> 		ret
  4677                              <2> 	
  4678 00003800 00000000            <2> batchedi dd 0	
  4679                              <2> 	
  4680                              <2> 	iftestbatch:
  4681 00003804 BE[A4BA0000]        <2> 		mov esi, IFTRUE
  4682 00003809 01DE                <2> 		add esi, ebx
  4683 0000380B 803E00              <2> 		cmp byte [esi], 0
  4684 0000380E 0F85BCFFFFFF        <2> 		jne near doneiftest
  4685 00003814 881D[D7380000]      <2> 		mov [iffalsebuf], bl
  4686 0000381A 803D[0DBB0000]01    <2> 		cmp byte [LOOPON], 1
  4687 00003821 0F8513000000        <2> 		jne near fifindbatch
  4688 00003827 E938FFFFFF          <2> 		jmp batchrunloop
  4689                              <2> 	elsetestbatch:
  4690 0000382C C60601              <2> 		mov byte [esi], 1
  4691 0000382F 81C705000000        <2> 		add edi, 5
  4692 00003835 E92AFFFFFF          <2> 		jmp batchrunloop
  4693                              <2> 	fifindbatch:
  4694 0000383A 66B96966            <2> 		mov cx, "if"
  4695 0000383E 66B86669            <2> 		mov ax, "fi"
  4696 00003842 663907              <2> 		cmp [edi], ax
  4697 00003845 0F8424000000        <2> 		je near fifoundbatch
  4698 0000384B 66390F              <2> 		cmp [edi], cx
  4699 0000384E 0F8465000000        <2> 		je near iffoundbatch
  4700 00003854 803F00              <2> 		cmp byte [edi], 0
  4701 00003857 0F8412000000        <2> 		je near fifoundbatch
  4702 0000385D B8656C7365          <2> 		mov eax, "else"
  4703 00003862 3907                <2> 		cmp [edi], eax
  4704 00003864 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4705 0000386A E973FFFFFF          <2> 		jmp noruniftest
  4706                              <2> 	fifoundbatch:
  4707 0000386F 81C702000000        <2> 		add edi, 2
  4708 00003875 B00A                <2> 		mov al, 10
  4709 00003877 3807                <2> 		cmp [edi], al
  4710 00003879 0F840B000000        <2> 		je near goodfibatch
  4711 0000387F 803F00              <2> 		cmp byte [edi], 0
  4712 00003882 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4713 00003888 EBB0                <2> 		jmp fifindbatch
  4714                              <2> 	goodfibatch:
  4715 0000388A B001                <2> 		mov al, 1
  4716 0000388C 2805[A3BA0000]      <2> 		sub [IFON], al 
  4717 00003892 A0[A3BA0000]        <2> 		mov al, [IFON]
  4718 00003897 8A1D[D7380000]      <2> 		mov bl, [iffalsebuf]
  4719 0000389D 38D8                <2> 		cmp al, bl
  4720 0000389F 7799                <2> 		ja fifindbatch
  4721 000038A1 8B35[DA2D0000]      <2> 		mov esi, [currentcommandloc]
  4722 000038A7 81EF02000000        <2> 		sub edi, 2
  4723 000038AD C605[D6380000]00    <2> 		mov byte [runnextline], 0
  4724 000038B4 E9ABFEFFFF          <2> 		jmp batchrunloop
  4725                              <2> 	iffoundbatch:
  4726 000038B9 B020                <2> 		mov al, ' '
  4727 000038BB 81C702000000        <2> 		add edi, 2
  4728 000038C1 3807                <2> 		cmp [edi], al
  4729 000038C3 0F8571FFFFFF        <2> 		jne near fifindbatch
  4730 000038C9 B001                <2> 		mov al, 1
  4731 000038CB 0005[A3BA0000]      <2> 		add [IFON], al
  4732 000038D1 E964FFFFFF          <2> 		jmp fifindbatch
  4733                              <2> 		
  4734                              <2> 		
  4735 000038D6 01                  <2> runnextline db 1
  4736 000038D7 00                  <2> iffalsebuf db 0
  4737                              <2> 
  4738 000038D8 C3                  <2> notbatch: ret 
  4739                              <1> %ifdef network.included
  4740                              <1> 	%include 'source/programs/arp.asm'
  4741 000038D9 FF2C61727000        <2> db 255,44,"arp",0
  4742                              <2> 	;ARP TESTING
  4743                              <2> arptest:
  4744 000038DF 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  4745 000038E5 81C604000000        <2> 	add esi, 4
  4746 000038EB E83A560000          <2> 	call strtoip
  4747 000038F0 890D[97390000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4748 000038F6 E875560000          <2> 	call showip
  4749 000038FB 803D[9B390000]01    <2> 	cmp byte [arpconfig], 1
  4750 00003902 7405                <2> 	je arptest2
  4751 00003904 E841000000          <2> 	call arpinit
  4752                              <2> arptest2:	;try to reach 192.168.0.1
  4753 00003909 8B0D[17900000]      <2> 	mov ecx, [sysmac]
  4754 0000390F 668B1D[1B900000]    <2> 	mov bx, [sysmac + 4]
  4755 00003916 890D[77390000]      <2> 	mov [sourcemac], ecx
  4756 0000391C 66891D[7B390000]    <2> 	mov [sourcemac + 4],bx
  4757 00003923 890D[87390000]      <2> 	mov [arpsenderinfo], ecx
  4758 00003929 66891D[8B390000]    <2> 	mov [arpsenderinfo + 4], bx
  4759 00003930 BF[71390000]        <2> 	mov edi, frame
  4760 00003935 BE[9B390000]        <2> 	mov esi, framend
  4761 0000393A E8A2550000          <2> 	call sendpacket
  4762 0000393F BE[5E900000]        <2> 	mov esi, line
  4763 00003944 E811E4FFFF          <2> 	call print
  4764 00003949 C3                  <2> 	ret
  4765                              <2> 	
  4766                              <2> arpinit:
  4767 0000394A BE[9C390000]        <2> 	mov esi, arptable
  4768 0000394F BF[17900000]        <2> 	mov edi, sysmac
  4769 00003954 BB[13900000]        <2> 	mov ebx, sysip
  4770 00003959 8B0F                <2> 	mov ecx, [edi]
  4771 0000395B 890E                <2> 	mov [esi], ecx
  4772 0000395D 668B4F04            <2> 	mov cx, [edi + 4]
  4773 00003961 894E04              <2> 	mov [esi + 4], ecx
  4774 00003964 8B0B                <2> 	mov ecx, [ebx]
  4775 00003966 894E06              <2> 	mov [esi + 6], ecx
  4776 00003969 C605[9B390000]01    <2> 	mov byte [arpconfig], 1
  4777 00003970 C3                  <2> 	ret
  4778                              <2> 	
  4779                              <2> ;example frame
  4780                              <2> frame:
  4781 00003971 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4782 00003977 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4783 0000397D 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4784                              <2> 	;;example packet
  4785 0000397F 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4786 00003981 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4787 00003983 0604                <2> 					db 6,4			;length of mac, length of ip
  4788 00003985 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4789 00003987 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4790 0000398D C0A80073            <2> 					db 192,168,0,115		;ip
  4791 00003991 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4792 00003997 C0A80000            <2> 					db 192,168,0,0			;ip
  4793                              <2> framend:
  4794                              <2> 
  4795 0000399B 00                  <2> arpconfig db 0
  4796                              <2> arptable:	;;mac,ip
  4797 0000399C 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4798 000039A5 00<rept>            <2>
  4799                              <2> arptableend:	
  4800                              <1> %endif
  4801                              <1> %include 'source/programs/batch.asm'
  4802 00003A00 FF2C626174636800    <2> db 255,44,"batch",0
  4803                              <2> 	batchst: 
  4804 00003A08 8B3D[DA2D0000]      <2> 		mov edi, [currentcommandloc]
  4805 00003A0E 81C706000000        <2> 		add edi, 6
  4806 00003A14 803F00              <2> 		cmp byte [edi], 0
  4807 00003A17 0F846D000000        <2> 		je near nonamefound
  4808 00003A1D BE00004000          <2> 		mov esi, 0x400000
  4809 00003A22 E80A2B0000          <2> 		call loadfile
  4810 00003A27 89D0                <2> 		mov eax, edx
  4811 00003A29 3D94010000          <2> 		cmp eax, 404
  4812 00003A2E 7465                <2> 		je goodbatchname
  4813 00003A30 BE[3B3A0000]        <2> 		mov esi, badbatchname
  4814 00003A35 E820E3FFFF          <2> 		call print
  4815 00003A3A C3                  <2> 		ret
  4816 00003A3B 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4817 00003A44 20616C726561647920- <2>
  4818 00003A4D 657869737473210A00  <2>
  4819 00003A56 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4820 00003A5F 746F20747970652061- <2>
  4821 00003A68 206E616D6520616674- <2>
  4822 00003A71 65722074686520636F- <2>
  4823 00003A7A 6D6D616E642E0A00    <2>
  4824 00003A82 00000000            <2> 		esicache3 dd 0
  4825 00003A86 00000000            <2> 		esicache2 dd 0
  4826                              <2> 	nonamefound:
  4827 00003A8A BE[563A0000]        <2> 		mov esi, namenotfoundbatch
  4828 00003A8F E8C6E2FFFF          <2> 		call print
  4829 00003A94 C3                  <2> 		ret
  4830                              <2> 	goodbatchname:
  4831 00003A95 BE00004000          <2> 		mov esi, 0x400000
  4832                              <2> 	batchcreate:
  4833 00003A9A 8935[823A0000]      <2> 		mov [esicache3], esi
  4834 00003AA0 BF00008000          <2> 		mov edi, 0x800000
  4835 00003AA5 B00A                <2> 		mov al, 10
  4836 00003AA7 B307                <2> 		mov bl, 7
  4837 00003AA9 B404                <2> 		mov ah, 4
  4838 00003AAB CD30                <2> 		int 30h
  4839 00003AAD 8935[863A0000]      <2> 		mov [esicache2], esi
  4840 00003AB3 8A0E                <2> 		mov cl, [esi]
  4841 00003AB5 8B35[823A0000]      <2> 		mov esi, [esicache3]
  4842 00003ABB BB[EF3A0000]        <2> 		mov ebx, exitword
  4843 00003AC0 E854F3FFFF          <2> 		call cndtest
  4844 00003AC5 3C01                <2> 		cmp al, 1
  4845 00003AC7 7411                <2> 		je endbatchcreate
  4846 00003AC9 3C02                <2> 		cmp al, 2
  4847 00003ACB 740D                <2> 		je endbatchcreate
  4848 00003ACD 8B35[863A0000]      <2> 		mov esi, [esicache2]
  4849 00003AD3 B00A                <2> 		mov al, 10
  4850 00003AD5 8806                <2> 		mov [esi], al
  4851 00003AD7 46                  <2> 		inc esi
  4852 00003AD8 EBC0                <2> 		jmp batchcreate
  4853                              <2> 	endbatchcreate:
  4854 00003ADA 8B35[823A0000]      <2> 		mov esi, [esicache3]
  4855 00003AE0 31C0                <2> 		xor eax, eax
  4856 00003AE2 8806                <2> 		mov [esi], al
  4857 00003AE4 BE00004000          <2> 		mov esi, 0x400000
  4858 00003AE9 E86CE2FFFF          <2> 		call print
  4859 00003AEE C3                  <2> 		ret
  4860                              <2> 	
  4861 00003AEF 5C7800              <2> 	exitword db "\x",0
  4862 00003AF2 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4863 00003AFB 6F20657869742E0A00  <2>
  4864                              <1> %ifdef gui.background
  4865                              <1> 	%include 'source/programs/background.asm'
  4866                              <1> %endif
  4867                              <1> %include 'source/programs/beep.asm'
  4868 00003B04 FF2C6265657000      <2> 	db 255,44,"beep",0
  4869                              <2> beep:
  4870 00003B0B B8[303B0000]        <2> 	mov eax, beepstart
  4871 00003B10 A3[68020000]        <2> 	mov [soundpos], eax
  4872 00003B15 B8[343B0000]        <2> 	mov eax, beepend
  4873 00003B1A A3[6C020000]        <2> 	mov [soundendpos], eax
  4874 00003B1F C605[65020000]01    <2> 	mov byte [soundon], 1
  4875                              <2> waitforsoundendbeep:
  4876 00003B26 A0[65020000]        <2> 	mov al, [soundon]
  4877 00003B2B 3C00                <2> 	cmp al, 0
  4878 00003B2D 75F7                <2> 	jne waitforsoundendbeep
  4879 00003B2F C3                  <2> 	ret
  4880                              <2> 	
  4881                              <2> beepstart:
  4882 00003B30 3200D111            <2> 	dw 50, 4561
  4883                              <2> beepend:
  4884                              <1> %include 'source/programs/cd.asm'
  4885 00003B34 FF2C636400          <2> db 255,44,"cd",0
  4886                              <2> cd:
  4887 00003B39 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  4888 00003B3F 81C603000000        <2> 	add esi, 3
  4889 00003B45 8B3D[9AB80000]      <2> 	mov edi, [currentfolderloc]
  4890 00003B4B 893D[96B80000]      <2> 	mov [lastfolderloc], edi
  4891 00003B51 81C7[9EB80000]      <2> 	add edi, currentfolder
  4892 00003B57 4F                  <2> 	dec edi
  4893 00003B58 66813E2E2E          <2> 	cmp word [esi], ".."
  4894 00003B5D 742A                <2> 	je .moveup
  4895 00003B5F 47                  <2> 	inc edi
  4896                              <2> .movedown:
  4897 00003B60 8A06                <2> 	mov al, [esi]
  4898 00003B62 8807                <2> 	mov [edi], al
  4899 00003B64 47                  <2> 	inc edi
  4900 00003B65 46                  <2> 	inc esi
  4901 00003B66 3C00                <2> 	cmp al, 0
  4902 00003B68 740A                <2> 	je .donecd
  4903 00003B6A 81FF[9EBA0000]      <2> 	cmp edi, currentfolderend
  4904 00003B70 72EE                <2> 	jb .movedown
  4905 00003B72 30C0                <2> 	xor al, al
  4906                              <2> .donecd:
  4907 00003B74 4F                  <2> 	dec edi
  4908 00003B75 C6072F              <2> 	mov byte [edi], '/'
  4909 00003B78 47                  <2> 	inc edi
  4910 00003B79 C60700              <2> 	mov byte [edi], 0
  4911 00003B7C 81EF[9EB80000]      <2> 	sub edi, currentfolder
  4912 00003B82 893D[9AB80000]      <2> 	mov [currentfolderloc], edi
  4913 00003B88 C3                  <2> 	ret
  4914                              <2> .moveup:
  4915 00003B89 31C0                <2> 	xor eax, eax
  4916 00003B8B A3[96B80000]        <2> 	mov [lastfolderloc], eax
  4917                              <2> .moveuploop:
  4918 00003B90 4F                  <2> 	dec edi
  4919 00003B91 8A07                <2> 	mov al, [edi]
  4920 00003B93 81FF[9EB80000]      <2> 	cmp edi, currentfolder
  4921 00003B99 763B                <2> 	jbe .moveupover
  4922 00003B9B 3C2F                <2> 	cmp al, '/'
  4923 00003B9D 75F1                <2> 	jne .moveuploop
  4924 00003B9F C6072F              <2> 	mov byte [edi], '/'
  4925 00003BA2 47                  <2> 	inc edi
  4926 00003BA3 C60700              <2> 	mov byte [edi], 0
  4927 00003BA6 81EF[9EB80000]      <2> 	sub edi, currentfolder
  4928 00003BAC 893D[9AB80000]      <2> 	mov [currentfolderloc], edi
  4929 00003BB2 81C7[9EB80000]      <2> 	add edi, currentfolder
  4930 00003BB8 4F                  <2> 	dec edi
  4931                              <2> .lastfolder:
  4932 00003BB9 4F                  <2> 	dec edi
  4933 00003BBA 8A07                <2> 	mov al, [edi]
  4934 00003BBC 81FF[9EB80000]      <2> 	cmp edi, currentfolder
  4935 00003BC2 7604                <2> 	jbe .donemoveup
  4936 00003BC4 3C2F                <2> 	cmp al, '/'
  4937 00003BC6 75F1                <2> 	jne .lastfolder
  4938                              <2> .donemoveup:
  4939 00003BC8 47                  <2> 	inc edi
  4940 00003BC9 81EF[9EB80000]      <2> 	sub edi, currentfolder
  4941 00003BCF 893D[96B80000]      <2> 	mov [lastfolderloc], edi
  4942 00003BD5 C3                  <2> 	ret
  4943                              <2> .moveupover:
  4944 00003BD6 BF[9EB80000]        <2> 	mov edi, currentfolder
  4945 00003BDB C6072F              <2> 	mov byte [edi], '/'
  4946 00003BDE 47                  <2> 	inc edi
  4947 00003BDF C60700              <2> 	mov byte [edi], 0
  4948 00003BE2 31C0                <2> 	xor eax, eax
  4949 00003BE4 A3[96B80000]        <2> 	mov [lastfolderloc], eax
  4950 00003BE9 40                  <2> 	inc eax
  4951 00003BEA A3[9AB80000]        <2> 	mov [currentfolderloc], eax
  4952 00003BEF C3                  <2> 	ret
  4953                              <1> %include 'source/programs/charmap.asm'
  4954 00003BF0 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4955 00003BF9 00                  <2>
  4956 00003BFA 66BB0700            <2> 	mov bx, 7
  4957 00003BFE B020                <2> 	mov al, " "
  4958 00003C00 E899E6FFFF          <2> 	call prcharq
  4959 00003C05 E894E6FFFF          <2> 	call prcharq
  4960 00003C0A E88FE6FFFF          <2> 	call prcharq
  4961 00003C0F E88AE6FFFF          <2> 	call prcharq
  4962 00003C14 B030                <2> 	mov al, "0"
  4963                              <2> charmapnumprnt:
  4964 00003C16 E883E6FFFF          <2> 	call prcharq
  4965 00003C1B FEC0                <2> 	inc al
  4966 00003C1D 6650                <2> 	push ax
  4967 00003C1F B020                <2> 	mov al, " "
  4968 00003C21 E878E6FFFF          <2> 	call prcharq
  4969 00003C26 6658                <2> 	pop ax
  4970 00003C28 3C39                <2> 	cmp al, "9"
  4971 00003C2A 76EA                <2> 	jbe charmapnumprnt
  4972 00003C2C B041                <2> 	mov al, "A"
  4973                              <2> charmapnumprnt2:
  4974 00003C2E E86BE6FFFF          <2> 	call prcharq
  4975 00003C33 FEC0                <2> 	inc al
  4976 00003C35 6650                <2> 	push ax
  4977 00003C37 B020                <2> 	mov al, " "
  4978 00003C39 E860E6FFFF          <2> 	call prcharq
  4979 00003C3E 6658                <2> 	pop ax
  4980 00003C40 3C47                <2> 	cmp al, "G"
  4981 00003C42 72EA                <2> 	jb charmapnumprnt2
  4982                              <2> 	
  4983 00003C44 BE[5E900000]        <2> 	mov esi, line
  4984 00003C49 E8FAE0FFFF          <2> 	call printquiet
  4985 00003C4E 6631C0              <2> 	xor ax, ax
  4986 00003C51 88C1                <2> 	mov cl, al
  4987 00003C53 E895F3FFFF          <2> 	call showhexsmall
  4988 00003C58 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4989                              <2> charmapcopy:
  4990 00003C5D FEC0                <2> 	inc al
  4991 00003C5F 6650                <2> 	push ax
  4992 00003C61 3C08                <2> 	cmp al, 8
  4993 00003C63 744D                <2> 	je charmapnocopy
  4994 00003C65 3C09                <2> 	cmp al, 9
  4995 00003C67 7449                <2> 	je charmapnocopy
  4996 00003C69 3C0A                <2> 	cmp al, 10
  4997 00003C6B 7445                <2> 	je charmapnocopy
  4998 00003C6D 3C0D                <2> 	cmp al, 13
  4999 00003C6F 7441                <2> 	je charmapnocopy
  5000 00003C71 3CFF                <2> 	cmp al, 255
  5001 00003C73 743D                <2> 	je charmapnocopy
  5002 00003C75 3C00                <2> 	cmp al, 0
  5003 00003C77 7434                <2> 	je nomorecharmap
  5004 00003C79 E820E6FFFF          <2> 	call prcharq
  5005 00003C7E B020                <2> 	mov al, " "
  5006 00003C80 E819E6FFFF          <2> 	call prcharq
  5007 00003C85 6658                <2> 	pop ax
  5008                              <2> charmapcopycheck:
  5009 00003C87 FEC4                <2> 	inc ah
  5010 00003C89 80FC10              <2> 	cmp ah, 16
  5011 00003C8C 72CF                <2> 	jb charmapcopy
  5012 00003C8E 6650                <2> 	push ax
  5013 00003C90 BE[5E900000]        <2> 	mov esi, line
  5014 00003C95 E8AEE0FFFF          <2> 	call printquiet
  5015 00003C9A 6658                <2> 	pop ax
  5016 00003C9C 3CFF                <2> 	cmp al, 255
  5017 00003C9E 740D                <2> 	je nomorecharmap
  5018 00003CA0 88C1                <2> 	mov cl, al
  5019 00003CA2 FEC1                <2> 	inc cl
  5020 00003CA4 E844F3FFFF          <2> 	call showhexsmall
  5021 00003CA9 30E4                <2> 	xor ah, ah
  5022 00003CAB EBB0                <2> 	jmp charmapcopy
  5023                              <2> nomorecharmap:
  5024 00003CAD E975EEFFFF          <2> 	jmp nwcmd
  5025                              <2> charmapnocopy:
  5026 00003CB2 6650                <2> 	push ax
  5027 00003CB4 B020                <2> 	mov al, " "
  5028 00003CB6 E8E3E5FFFF          <2> 	call prcharq
  5029 00003CBB E8DEE5FFFF          <2> 	call prcharq
  5030 00003CC0 6658                <2> 	pop ax
  5031 00003CC2 EBC3                <2> 	jmp charmapcopycheck
  5032                              <1> %ifdef gui.included
  5033                              <1> 	%include 'source/programs/circle.asm'
  5034 00003CC4 FF2C636972636C6500  <2> db 255,44,"circle",0
  5035                              <2> circle:
  5036 00003CCD 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5037 00003CD3 81C607000000        <2> 	add esi, 7
  5038 00003CD9 66B91000            <2> 	mov cx, 16
  5039 00003CDD 30C0                <2> 	xor al, al
  5040 00003CDF 3806                <2> 	cmp [esi], al
  5041 00003CE1 7405                <2> 	je .nocmdline
  5042 00003CE3 E8C5F4FFFF          <2> 	call cnvrttxt
  5043                              <2> .nocmdline:
  5044 00003CE8 E833090000          <2> 	call linetester.stime
  5045 00003CED E857000000          <2> 	call fcircle.nocmdline
  5046 00003CF2 E841090000          <2> 	call linetester.etime
  5047 00003CF7 53                  <2> 	push ebx
  5048 00003CF8 57                  <2> 	push edi
  5049 00003CF9 E82AE5FFFF          <2> 	call getchar
  5050 00003CFE 59                  <2> 	pop ecx
  5051 00003CFF E8C7F3FFFF          <2> 	call showdec
  5052 00003D04 BE[C6460000]        <2> 	mov esi, linetester.msgcircle
  5053 00003D09 E83AE0FFFF          <2> 	call printquiet
  5054 00003D0E 59                  <2> 	pop ecx
  5055 00003D0F E8B7F3FFFF          <2> 	call showdec
  5056 00003D14 BE[DD460000]        <2> 	mov esi, linetester.msgtime
  5057 00003D19 E82AE0FFFF          <2> 	call printquiet
  5058 00003D1E E897300000          <2> 	call reloadallgraphics
  5059 00003D23 C3                  <2> 	ret
  5060                              <2> 	
  5061 00003D24 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5062 00003D2D 00                  <2>
  5063                              <2> fcircle:	
  5064 00003D2E 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5065 00003D34 81C608000000        <2> 	add esi, 8
  5066 00003D3A 66B91000            <2> 	mov cx, 16
  5067 00003D3E 30C0                <2> 	xor al, al
  5068 00003D40 3806                <2> 	cmp [esi], al
  5069 00003D42 7405                <2> 	je .nocmdline
  5070 00003D44 E864F4FFFF          <2> 	call cnvrttxt
  5071                              <2> .nocmdline:
  5072 00003D49 6689C8              <2> 	mov ax, cx
  5073 00003D4C 66D1E1              <2> 	shl cx, 1
  5074 00003D4F 6689CA              <2> 	mov dx, cx
  5075 00003D52 663B15[E6560000]    <2> 	cmp dx, [resolutionx]
  5076 00003D59 731B                <2> 	jae .done
  5077 00003D5B 663B0D[E8560000]    <2> 	cmp cx, [resolutiony]
  5078 00003D62 7312                <2> 	jae .done
  5079 00003D64 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2]
  5080 00003D6B 31FF                <2> 	xor edi, edi
  5081 00003D6D 803D[48A20000]01    <2> 	cmp byte [guion], 1
  5082 00003D74 7401                <2> 	je .lp
  5083 00003D76 C3                  <2> .done ret
  5084                              <2> .lp:
  5085 00003D77 6629C2              <2> 	sub dx, ax
  5086 00003D7A 6629C1              <2> 	sub cx, ax
  5087 00003D7D 60                  <2> 	pusha
  5088 00003D7E E8562B0000          <2> 	call fillcircle
  5089 00003D83 61                  <2> 	popa
  5090 00003D84 47                  <2> 	inc edi
  5091 00003D85 660335[61020000]    <2> 	add si, [timenanoseconds]
  5092 00003D8C 6601C2              <2> 	add dx, ax
  5093 00003D8F 6601C2              <2> 	add dx, ax
  5094 00003D92 6601C2              <2> 	add dx, ax
  5095 00003D95 6601C1              <2> 	add cx, ax
  5096 00003D98 663B15[E6560000]    <2> 	cmp dx, [resolutionx]
  5097 00003D9F 72D6                <2> 	jb .lp
  5098 00003DA1 6689C2              <2> 	mov dx, ax
  5099 00003DA4 6601C2              <2> 	add dx, ax
  5100 00003DA7 6601C1              <2> 	add cx, ax
  5101 00003DAA 6601C1              <2> 	add cx, ax
  5102 00003DAD 663B0D[E8560000]    <2> 	cmp cx, [resolutiony]
  5103 00003DB4 72C1                <2> 	jb .lp
  5104 00003DB6 C3                  <2> 	ret
  5105                              <1> %endif
  5106                              <1> %include 'source/programs/clear.asm'
  5107 00003DB7 FF2C636C65617200    <2> db 255,44,"clear",0
  5108 00003DBF E8FCDFFFFF          <2> 		call clear
  5109 00003DC4 C3                  <2> 		ret 
  5110                              <1> %include 'source/programs/cpuid.asm'
  5111 00003DC5 FF2C637075696400    <2> db 255,44,"cpuid",0
  5112 00003DCD 31C0                <2> 	xor eax, eax
  5113 00003DCF 0FA2                <2> 	cpuid
  5114 00003DD1 891D[223E0000]      <2> 	mov [cpuidbuf], ebx
  5115 00003DD7 8915[263E0000]      <2> 	mov [cpuidbuf + 4], edx
  5116 00003DDD 890D[2A3E0000]      <2> 	mov [cpuidbuf + 8], ecx
  5117 00003DE3 BE[223E0000]        <2> 	mov esi, cpuidbuf
  5118 00003DE8 E86DDFFFFF          <2> 	call print
  5119 00003DED BE[5E900000]        <2> 	mov esi, line
  5120 00003DF2 E863DFFFFF          <2> 	call print
  5121 00003DF7 B801000000          <2> 	mov eax, 1
  5122 00003DFC 0FA2                <2> 	cpuid
  5123 00003DFE 89C1                <2> 	mov ecx, eax
  5124 00003E00 C605[EC2F0000]02    <2> 	mov byte [firsthexshown], 2
  5125 00003E07 E8F5F1FFFF          <2> 	call showhex
  5126 00003E0C B808000080          <2> 	mov eax, 0x80000008
  5127 00003E11 0FA2                <2> 	cpuid
  5128 00003E13 89C1                <2> 	mov ecx, eax
  5129 00003E15 C605[EC2F0000]02    <2> 	mov byte [firsthexshown], 2
  5130 00003E1C E8E0F1FFFF          <2> 	call showhex
  5131 00003E21 C3                  <2> 	ret
  5132                              <2> 	
  5133 00003E22 00<rept>            <2> cpuidbuf times 13 db 0
  5134                              <2> cpuidvendorend:
  5135                              <1> %ifdef network.included
  5136                              <1> 	%include 'source/programs/dhcp.asm'
  5137 00003E2F FF2C6468637000      <2> db 255,44,"dhcp",0
  5138                              <2> dhcp:
  5139 00003E36 BE[F63E0000]        <2> 	mov esi, .dhcp.mac
  5140 00003E3B BB[D63F0000]        <2> 	mov ebx, .dhcp.option.mac
  5141 00003E40 BF[B63E0000]        <2> 	mov edi, .mac
  5142 00003E45 31C9                <2> 	xor ecx, ecx
  5143 00003E47 66890D[C83E0000]    <2> 	mov [.ip.checksum], cx
  5144 00003E4E 66890D[D83E0000]    <2> 	mov [.udp.checksum], cx
  5145 00003E55 8B0D[17900000]      <2> 	mov ecx, [sysmac]
  5146 00003E5B 890B                <2> 	mov [ebx], ecx
  5147 00003E5D 890F                <2> 	mov [edi], ecx
  5148 00003E5F 890E                <2> 	mov [esi], ecx
  5149 00003E61 668B0D[1B900000]    <2> 	mov cx, [sysmac + 4]
  5150 00003E68 66894B04            <2> 	mov [ebx + 4], cx
  5151 00003E6C 66894E04            <2> 	mov [esi + 4], cx
  5152 00003E70 66894F04            <2> 	mov [edi + 4], cx
  5153 00003E74 BF[BE3E0000]        <2> 	mov edi, .ip.header
  5154 00003E79 BE[D23E0000]        <2> 	mov esi, .ip.headerend
  5155 00003E7E E87F500000          <2> 	call getchecksum
  5156 00003E83 66890D[C83E0000]    <2> 	mov [.ip.checksum], cx
  5157 00003E8A BF[D23E0000]        <2> 	mov edi, .udp.header
  5158 00003E8F BE[ED3F0000]        <2> 	mov esi, .udp.end
  5159 00003E94 E869500000          <2> 	call getchecksum
  5160 00003E99 66890D[D83E0000]    <2> 	mov [.udp.checksum], cx
  5161 00003EA0 BF[B03E0000]        <2> 	mov edi, .frame
  5162 00003EA5 BE[ED3F0000]        <2> 	mov esi, .udp.end
  5163 00003EAA E832500000          <2> 	call sendpacket
  5164 00003EAF C3                  <2> 	ret
  5165                              <2> .frame:
  5166 00003EB0 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5167 00003EB6 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5168 00003EBC 0800                <2> 	db 8,0
  5169                              <2> .ip.header:
  5170 00003EBE 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5171 00003EBF 00                  <2> 	db 0
  5172 00003EC0 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5173 00003EC2 0000                <2> 	dw 0
  5174 00003EC4 0000                <2> 	dw 0
  5175 00003EC6 80                  <2> 	db 0x80
  5176 00003EC7 11                  <2> 	db 17
  5177 00003EC8 0000                <2> .ip.checksum dw 0
  5178 00003ECA 00000000            <2> 	db 0,0,0,0
  5179 00003ECE FFFFFFFF            <2> 	db 255,255,255,255	
  5180                              <2> .ip.headerend:
  5181                              <2> .udp.header:
  5182 00003ED2 0044                <2> 	db 0,68	;source port
  5183 00003ED4 0043                <2> 	db 0,67 ;destination port
  5184 00003ED6 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5185 00003ED8 0000                <2> .udp.checksum dw 0
  5186                              <2> .udp.headerend:
  5187                              <2> .dhcp.data:
  5188 00003EDA 01                  <2> 	db 1	;message type
  5189 00003EDB 01                  <2> 	db 1	;hardware type
  5190 00003EDC 06                  <2> 	db 6	;hardware address length
  5191 00003EDD 00                  <2> 	db 0	;hops
  5192 00003EDE EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5193 00003EE2 0000                <2> 	db 0,0	;seconds elapsed
  5194 00003EE4 0000                <2> 	db 0,0	;flags
  5195 00003EE6 00000000            <2> 	db 0,0,0,0	;client ip address
  5196 00003EEA 00000000            <2> 	db 0,0,0,0	;your ip address
  5197 00003EEE 00000000            <2> 	db 0,0,0,0	;server ip address
  5198 00003EF2 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5199 00003EF6 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5200 00003EFC 00<rept>            <2> 	times 10 db 0	;padding
  5201 00003F06 00<rept>            <2> 	times 64 db 0	;server host name
  5202 00003F46 00<rept>            <2> 	times 128 db 0	;boot file name
  5203 00003FC6 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5204                              <2> .dhcp.option.type:
  5205 00003FCA 350103              <2> 	db 53,1,3	;DHCP Request
  5206 00003FCD 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5207 00003FD3 3D07                <2> 	db 61,7 ;client id(mac)
  5208 00003FD5 01                  <2> 	db 1	;Type=Ethernet
  5209 00003FD6 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5210 00003FDC 0C08                <2> 	db 12,8 ;host name
  5211 00003FDE 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5212 00003FE6 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5213 00003FEC FF                  <2> 	db 0xFF	;end DHCP options
  5214                              <2> .dhcp.end:
  5215                              <2> .udp.end:
  5216                              <2> 	
  5217                              <1> %endif
  5218                              <1> %include 'source/programs/dos.asm'
  5219 00003FED FF2C646F7300        <2> db 255,44,"dos",0
  5220                              <2> dosrunner:
  5221 00003FF3 8925[92B80000]      <2> 	mov [previousstack], esp
  5222 00003FF9 8B3D[DA2D0000]      <2> 	mov edi, [currentcommandloc]
  5223 00003FFF 81C704000000        <2> 	add edi, 4
  5224 00004005 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5225 0000400A E822250000          <2> 	call loadfile
  5226 0000400F 8B3D[DA2D0000]      <2> 	mov edi, [currentcommandloc]
  5227 00004015 81C704000000        <2> 	add edi, 4
  5228 0000401B 81FA94010000        <2> 	cmp edx, 404
  5229 00004021 0F845E000000        <2> 	je near .noprogfound
  5230 00004027 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5231 0000402C 31C9                <2> 	xor ecx, ecx
  5232                              <2> .findparams:
  5233 0000402E 47                  <2> 	inc edi
  5234 0000402F 8A07                <2> 	mov al, [edi]
  5235 00004031 3C20                <2> 	cmp al, " "
  5236 00004033 75F9                <2> 	jne .findparams
  5237                              <2> .copyparams:
  5238 00004035 8A07                <2> 	mov al, [edi]
  5239 00004037 8803                <2> 	mov [ebx], al
  5240 00004039 43                  <2> 	inc ebx
  5241 0000403A 47                  <2> 	inc edi
  5242 0000403B 41                  <2> 	inc ecx
  5243 0000403C 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5244 00004042 7304                <2> 	jae .nomoreparams
  5245 00004044 3C00                <2> 	cmp al, 0
  5246 00004046 75ED                <2> 	jne .copyparams
  5247                              <2> .nomoreparams:
  5248 00004048 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5249 0000404E 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5250 00004052 8ED8                <2> 	mov ds, ax
  5251 00004054 8EC0                <2> 	mov es, ax
  5252 00004056 8EE0                <2> 	mov fs, ax
  5253 00004058 8EE8                <2> 	mov gs, ax
  5254 0000405A 31C0                <2> 	xor eax, eax
  5255 0000405C 31DB                <2> 	xor ebx, ebx
  5256 0000405E 31C9                <2> 	xor ecx, ecx
  5257 00004060 31D2                <2> 	xor edx, edx
  5258 00004062 31FF                <2> 	xor edi, edi
  5259 00004064 31F6                <2> 	xor esi, esi
  5260 00004066 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5261 0000406D 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5262 00004071 6689DA              <2> 	mov dx, bx
  5263 00004074 8EC3                <2> 	mov es, bx
  5264 00004076 8EE3                <2> 	mov fs, bx
  5265 00004078 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5266 0000407C 8EEB                <2> 	mov gs, bx
  5267 0000407E 8B25[92B80000]      <2> 	mov esp, [previousstack]
  5268 00004084 C3                  <2> 	ret
  5269                              <2> .noprogfound:
  5270 00004085 BE[25900000]        <2> 	mov esi, notfound1
  5271 0000408A E8CBDCFFFF          <2> 	call print
  5272 0000408F 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5273 00004095 81C604000000        <2> 	add esi, 4
  5274 0000409B E8BADCFFFF          <2> 	call print
  5275 000040A0 BE[2D900000]        <2> 	mov esi, notfound2
  5276 000040A5 E8B0DCFFFF          <2> 	call print
  5277 000040AA C3                  <2> 	ret
  5278                              <2> 	
  5279                              <1> %include 'source/programs/dump.asm'
  5280 000040AB FF2C64756D7000      <2> db 255,44,"dump",0
  5281 000040B2 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5282 000040B8 81C605000000        <2> 	add esi, 5
  5283 000040BE 31C9                <2> 	xor ecx, ecx
  5284 000040C0 66B83078            <2> 	mov ax, "0x"
  5285 000040C4 663906              <2> 	cmp [esi], ax
  5286 000040C7 740A                <2> 	je dumphexin
  5287 000040C9 E8DFF0FFFF          <2> 	call cnvrttxt
  5288 000040CE E910000000          <2> 	jmp dumphexnow
  5289                              <2> dumphexin:
  5290 000040D3 81C602000000        <2> 	add esi, 2
  5291 000040D9 E886F0FFFF          <2> 	call cnvrthextxt
  5292 000040DE E900000000          <2> 	jmp dumphexnow
  5293                              <2> dumphexnow:
  5294 000040E3 89CF                <2> 	mov edi, ecx
  5295 000040E5 89FE                <2> 	mov esi, edi
  5296 000040E7 81C680030000        <2> 	add esi, 896
  5297                              <2> dumphexloop:
  5298 000040ED 8B0F                <2> 	mov ecx, [edi]
  5299 000040EF C605[EC2F0000]05    <2> 	mov byte [firsthexshown],5
  5300 000040F6 E806EFFFFF          <2> 	call showhex
  5301 000040FB 81C704000000        <2> 	add edi, 4
  5302 00004101 39F7                <2> 	cmp edi, esi
  5303 00004103 72E8                <2> 	jb dumphexloop
  5304 00004105 E802E6FFFF          <2> 	call termcopy
  5305 0000410A C3                  <2> 	ret 
  5306                              <1> %include 'source/programs/echo.asm'
  5307                              <2> 
  5308 0000410B FF2C6563686F00      <2> db 255,44,"echo",0
  5309                              <2> 	echoprog:
  5310 00004112 8B35[DA2D0000]      <2> 		mov esi, [currentcommandloc]
  5311 00004118 81C605000000        <2> 		add esi, 5
  5312 0000411E 8A06                <2> 		mov al, [esi]
  5313 00004120 E835DCFFFF          <2> 		call print
  5314 00004125 BE[5E900000]        <2> 		mov esi, line
  5315 0000412A E82BDCFFFF          <2> 		call print
  5316 0000412F C3                  <2> 		ret
  5317 00004130 BB[12BB0000]        <2> 	echovr:	mov ebx, variables
  5318 00004135 BF06000000          <2> 		mov edi, 6
  5319 0000413A E83C000000          <2> 		call nxtvrech
  5320 0000413F E954000000          <2> 		jmp prntvr2
  5321 00004144 B13D                <2> 	echvar:	mov cl, '='
  5322 00004146 43                  <2> 		inc ebx
  5323 00004147 8A03                <2> 		mov al, [ebx]
  5324 00004149 3C00                <2> 		cmp al, 0
  5325 0000414B 742E                <2> 		je nxtvrech
  5326 0000414D 3C3D                <2> 		cmp al, '='
  5327 0000414F 7422                <2> 		je nxtvrechb1
  5328 00004151 8B35[DA2D0000]      <2> 		mov esi, [currentcommandloc]
  5329 00004157 01FE                <2> 		add esi, edi
  5330 00004159 E8BBECFFFF          <2> 		call cndtest
  5331 0000415E 3C02                <2> 		cmp al, 2
  5332 00004160 7432                <2> 		je prntvr
  5333 00004162 3C01                <2> 		cmp al, 1
  5334 00004164 742E                <2> 		je prntvr
  5335 00004166 8B35[DA2D0000]      <2> 		mov esi, [currentcommandloc]
  5336 0000416C 01FE                <2> 		add esi, edi
  5337 0000416E E908000000          <2> 		jmp nxtvrech
  5338                              <2> 	nxtvrechb1:
  5339 00004173 81EB02000000        <2> 		sub ebx, 2
  5340 00004179 EBC9                <2> 		jmp echvar
  5341 0000417B 8A03                <2> 	nxtvrech: mov al, [ebx]
  5342 0000417D 3C05                <2> 		cmp al, 5
  5343 0000417F 740A                <2> 		je nxtvrec2
  5344 00004181 43                  <2> 		inc ebx
  5345 00004182 81FB[12CB0000]      <2> 		cmp ebx, varend
  5346 00004188 72F1                <2> 		jb nxtvrech
  5347 0000418A C3                  <2> 		ret
  5348 0000418B 43                  <2> 	nxtvrec2: inc ebx
  5349 0000418C 8A03                <2> 		mov al, [ebx]
  5350 0000418E 3C04                <2> 		cmp al, 4
  5351 00004190 74B2                <2> 		je echvar
  5352 00004192 EBE7                <2> 		jmp nxtvrech
  5353 00004194 43                  <2> 	prntvr: inc ebx
  5354 00004195 89DE                <2> 		mov esi, ebx
  5355 00004197 C3                  <2> 		ret
  5356 00004198 E8BDDBFFFF          <2> 	prntvr2: call print
  5357 0000419D BE[5E900000]        <2> 		mov esi, line
  5358 000041A2 E8B3DBFFFF          <2> 		call print
  5359 000041A7 C3                  <2> 		ret 
  5360                              <1> %include 'source/programs/else.asm'
  5361 000041A8 FF2C656C736500      <2> 	db 255,44,"else",0
  5362 000041AF 31C0                <2> elsecmd:	xor eax, eax
  5363 000041B1 3805[0CBB0000]      <2> 	cmp [BATCHISON], al
  5364 000041B7 0F841BF7FFFF        <2> 	je near notbatch
  5365 000041BD A0[A3BA0000]        <2> 	mov al, [IFON]
  5366 000041C2 BE[A4BA0000]        <2> 	mov esi, IFTRUE
  5367 000041C7 01C6                <2> 	add esi, eax
  5368 000041C9 8A06                <2> 	mov al, [esi]
  5369 000041CB 3401                <2> 	xor al, 1
  5370 000041CD 8806                <2> 	mov [esi], al
  5371 000041CF C3                  <2> 	ret 
  5372                              <1> %include 'source/programs/exit.asm'
  5373 000041D0 FF2C6578697400      <2> db 255,44,"exit",0
  5374 000041D7 803D[A2BA0000]01    <2> 	cmp byte [ranboot], 1
  5375 000041DE 0F84D7E8FFFF        <2> 	je near returnfromexp
  5376 000041E4 E9BFE7FFFF          <2> 	jmp nobootfile
  5377                              <1> %include 'source/programs/fi.asm'
  5378 000041E9 FF2C666900          <2> 	db 255,44,"fi",0
  5379 000041EE 30C0                <2> 	xor al, al
  5380 000041F0 3805[0CBB0000]      <2> 	cmp [BATCHISON], al
  5381 000041F6 0F84DCF6FFFF        <2> 	je near notbatch
  5382 000041FC B001                <2> fi:	mov al, 1
  5383 000041FE 2805[A3BA0000]      <2> 	sub [IFON],al
  5384 00004204 C3                  <2> 	ret 
  5385                              <1> %ifdef gui.included
  5386                              <1> 	%include 'source/programs/gui.asm'
  5387 00004205 FF2C67756900        <2> db 255,44,"gui",0
  5388                              <2> guiswitcher:
  5389 0000420B 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5390 00004211 81C604000000        <2> 	add esi, 4
  5391 00004217 31C9                <2> 	xor ecx, ecx
  5392 00004219 803E00              <2> 	cmp byte [esi], 0
  5393 0000421C 740A                <2> 	je .nomodepref
  5394 0000421E E841EFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5395 00004223 E907000000          <2> 	jmp .modepref
  5396                              <2> .nomodepref:
  5397 00004228 51                  <2> 	push ecx
  5398 00004229 E892DBFFFF          <2> 	call clear
  5399 0000422E 59                  <2> 	pop ecx
  5400                              <2> .modepref:
  5401 0000422F 66BB[F652]          <2> 	mov bx, guiswitch
  5402 00004233 66891D[050D0000]    <2> 	mov [realmodeptr], bx
  5403 0000423A BB[4A420000]        <2> 	mov ebx, guiswitchret
  5404 0000423F 891D[010D0000]      <2> 	mov [realmodereturn], ebx
  5405 00004245 E9A0C9FFFF          <2> 	jmp realmode
  5406                              <2> guiswitchret:
  5407 0000424A 65803D[48A20000]01  <2> 	cmp byte [gs:guion], 1
  5408 00004252 7401                <2> 	je .cont
  5409 00004254 C3                  <2> 	ret
  5410                              <2> .cont:
  5411 00004255 BF[D4540000]        <2> 	mov edi, VBEMODEBLOCK
  5412                              <2> .loop:
  5413 0000425A 658B07              <2> 	mov eax, [gs:edi]
  5414 0000425D 8907                <2> 	mov [edi], eax
  5415 0000425F 47                  <2> 	inc edi
  5416 00004260 81FF[D8570000]      <2> 	cmp edi, VBEEND
  5417 00004266 72F2                <2> 	jb .loop
  5418 00004268 A1[FC560000]        <2> 	mov eax, [physbaseptr]
  5419 0000426D 2D00001000          <2> 	sub eax, 0x100000
  5420 00004272 A3[FC560000]        <2> 	mov [physbaseptr], eax
  5421 00004277 C605[9C220000]00    <2> 	mov byte [termguion], 0
  5422 0000427E BE[27D30000]        <2> 	mov esi, graphicstable
  5423 00004283 30C0                <2> 	xor al, al
  5424                              <2> .clear:
  5425 00004285 8806                <2> 	mov [esi], al
  5426 00004287 46                  <2> 	inc esi
  5427 00004288 81FE[27D50000]      <2> 	cmp esi, graphicstableend
  5428 0000428E 72F5                <2> 	jb .clear
  5429 00004290 E8F52B0000          <2> 	call guisetup
  5430                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5431 00004295 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  5432 0000429C 668B0D[E8560000]    <2> 	mov cx, [resolutiony]
  5433 000042A3 6689D3              <2> 	mov bx, dx
  5434 000042A6 6689C8              <2> 	mov ax, cx
  5435 000042A9 66D1EB              <2> 	shr bx, 1
  5436 000042AC 66D1E8              <2> 	shr ax, 1
  5437 000042AF 6689DA              <2> 	mov dx, bx
  5438 000042B2 66D1EA              <2> 	shr dx, 1
  5439 000042B5 6689C1              <2> 	mov cx, ax
  5440 000042B8 66D1E9              <2> 	shr cx, 1
  5441 000042BB 6601D3              <2> 	add bx, dx
  5442 000042BE 6601C8              <2> 	add ax, cx
  5443 000042C1 66D1E9              <2> 	shr cx, 1
  5444 000042C4 66C1EB03            <2> 	shr bx, 3
  5445 000042C8 66C1E303            <2> 	shl bx, 3
  5446 000042CC 66C1E804            <2> 	shr ax, 4
  5447 000042D0 66C1E004            <2> 	shl ax, 4
  5448 000042D4 66891D[8F700000]    <2> 	mov [termwindow], bx
  5449 000042DB 66A3[91700000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5450 000042E1 BE[8F700000]        <2> 	mov esi, termwindow
  5451 000042E6 31DB                <2> 	xor ebx, ebx
  5452 000042E8 6631C0              <2> 	xor ax, ax
  5453 000042EB E8A8320000          <2> 	call showwindow
  5454 000042F0 E8E4140000          <2> 	call cursorgui
  5455 000042F5 E8C6DAFFFF          <2> 	call clear
  5456 000042FA C3                  <2> 	ret
  5457                              <2> 	
  5458                              <1> %endif
  5459                              <1> %include 'source/programs/help.asm'
  5460 000042FB FF2C68656C7000      <2> db 255,44,"help",0
  5461                              <2> lscmd:	
  5462 00004302 B00D                <2> 		mov al, 13
  5463 00004304 E895DFFFFF          <2> 		call prcharq
  5464 00004309 BE[30320000]        <2> 		mov esi, progstart
  5465 0000430E BB[F6520000]        <2> 		mov ebx, progend
  5466 00004313 BE[92B40000]        <2> dir:	mov esi, fileindex
  5467 00004318 8A06                <2> 	dirnxt:	mov al, [esi]
  5468 0000431A 30E4                <2> 		xor ah, ah
  5469 0000431C 3CFF                <2> 		cmp al, 255
  5470 0000431E 7415                <2> 		je dirfnd
  5471 00004320 46                  <2> 		inc esi
  5472 00004321 81FE[92B80000]      <2> 		cmp esi,  fileindexend
  5473 00004327 7339                <2> 		jae dirdn
  5474 00004329 EBED                <2> 		jmp dirnxt
  5475                              <2> 	dirfnd3:
  5476 0000432B 46                  <2> 		inc esi
  5477 0000432C 81FE[92B80000]      <2> 		cmp esi, fileindexend
  5478 00004332 76E4                <2> 		jbe dirnxt
  5479 00004334 4E                  <2> 		dec esi
  5480 00004335 46                  <2> 	dirfnd:	inc esi
  5481 00004336 8A06                <2> 		mov al, [esi]
  5482 00004338 30E4                <2> 		xor ah, ah
  5483 0000433A 3C2C                <2> 		cmp al, 44
  5484 0000433C 740B                <2> 		je dirfnd2
  5485 0000433E 46                  <2> 		inc esi
  5486 0000433F 81FE[92B80000]      <2> 		cmp esi,  fileindexend
  5487 00004345 731B                <2> 		jae dirdn
  5488 00004347 EBCF                <2> 		jmp dirnxt
  5489 00004349 46                  <2> 	dirfnd2: inc esi
  5490 0000434A E8F9D9FFFF          <2> 		call printquiet
  5491 0000434F 56                  <2> 		push esi
  5492 00004350 B009                <2> 		mov al, 9
  5493 00004352 E847DFFFFF          <2> 		call prcharq
  5494 00004357 5E                  <2> 		pop esi
  5495 00004358 81FE[92B80000]      <2> 		cmp esi,  fileindexend
  5496 0000435E 7302                <2> 		jae dirdn
  5497 00004360 EBB6                <2> 		jmp dirnxt
  5498 00004362 BE[5E900000]        <2> 	dirdn:	mov esi, line
  5499 00004367 E8EED9FFFF          <2> 			call print
  5500 0000436C C3                  <2> 			ret
  5501 0000436D 00                  <2> currentdir db 0
  5502                              <1> %include 'source/programs/if.asm'
  5503 0000436E FF2C696600          <2> 	db 255,44,"if",0
  5504 00004373 30C0                <2> ifcmd:	xor al, al
  5505 00004375 3805[0CBB0000]      <2> 	cmp [BATCHISON], al
  5506 0000437B 0F8457F5FFFF        <2> 	je near notbatch
  5507 00004381 8B1D[DA2D0000]      <2> 	mov ebx, [currentcommandloc]
  5508 00004387 81C303000000        <2> 	add ebx, 3
  5509 0000438D 89DE                <2> 	mov esi, ebx
  5510 0000438F 8A06                <2> chkeqsn: mov al, [esi]
  5511 00004391 3C00                <2> 	cmp al, 0
  5512 00004393 0F843FF5FFFF        <2> 	je near notbatch
  5513 00004399 3C3D                <2> 	cmp al, '='
  5514 0000439B 0F8403000000        <2> 	je near chkeqdn
  5515 000043A1 46                  <2> 	inc esi
  5516 000043A2 EBEB                <2> 	jmp chkeqsn
  5517 000043A4 B000                <2> chkeqdn: mov al, 0 
  5518 000043A6 8806                <2> 	mov [esi], al
  5519 000043A8 46                  <2> 	inc esi
  5520 000043A9 E830EAFFFF          <2> 	call tester
  5521 000043AE 3C01                <2> 	cmp al, 1
  5522 000043B0 0F8405000000        <2> 	je near trueif
  5523 000043B6 E91C000000          <2> 	jmp falseif
  5524 000043BB 31C0                <2> trueif:	xor eax, eax
  5525 000043BD A0[A3BA0000]        <2> 	mov al, [IFON]
  5526 000043C2 FEC0                <2> 	inc al
  5527 000043C4 A2[A3BA0000]        <2> 	mov [IFON], al
  5528 000043C9 30E4                <2> 	xor ah, ah
  5529 000043CB BE[A4BA0000]        <2> 	mov esi, IFTRUE
  5530 000043D0 01C6                <2> 	add esi, eax
  5531 000043D2 B401                <2> 	mov ah, 1
  5532 000043D4 8826                <2> 	mov [esi], ah
  5533 000043D6 C3                  <2> 	ret 
  5534 000043D7 31C0                <2> falseif: xor eax, eax
  5535 000043D9 A0[A3BA0000]        <2> 	mov al, [IFON]
  5536 000043DE FEC0                <2> 	inc al
  5537 000043E0 A2[A3BA0000]        <2> 	mov [IFON], al
  5538 000043E5 30E4                <2> 	xor ah, ah
  5539 000043E7 BE[A4BA0000]        <2> 	mov esi, IFTRUE
  5540 000043EC 01C6                <2> 	add esi, eax
  5541 000043EE 30E4                <2> 	xor ah, ah
  5542 000043F0 8826                <2> 	mov [esi], ah
  5543 000043F2 C3                  <2> 	ret 
  5544                              <1> %ifdef network.included
  5545                              <1> 	%include 'source/programs/ipconfig.asm'
  5546 000043F3 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5547 000043FC 6700                <2>
  5548                              <2> ifconfig:
  5549 000043FE 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5550 00004404 81C609000000        <2> 	add esi, 9
  5551 0000440A 803E00              <2> 	cmp byte [esi], 0
  5552 0000440D 740B                <2> 	je .noip
  5553 0000440F E8164B0000          <2> 	call strtoip
  5554 00004414 890D[13900000]      <2> 	mov [sysip], ecx
  5555                              <2> .noip:
  5556                              <2> %ifdef ne2000.included
  5557 0000441A 803D[1D8C0000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5558 00004421 751E                <2> 	jne .none2000
  5559 00004423 BE[1E8C0000]        <2> 	mov esi, ne2000.name
  5560 00004428 E82DD9FFFF          <2> 	call print
  5561 0000442D B9[408C0000]        <2> 	mov ecx, ne2000.mac
  5562 00004432 E8754B0000          <2> 	call showmac
  5563 00004437 BE[5E900000]        <2> 	mov esi, line
  5564 0000443C E819D9FFFF          <2> 	call print
  5565                              <2> .none2000:
  5566                              <2> %endif
  5567                              <2> %ifdef rtl8139.included
  5568 00004441 803D[FB840000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5569 00004448 751E                <2> 	jne .nortl8139
  5570 0000444A BE[02850000]        <2> 	mov esi, rtl8139.name
  5571 0000444F E806D9FFFF          <2> 	call print
  5572 00004454 B9[FC840000]        <2> 	mov ecx, rtl8139.mac
  5573 00004459 E84E4B0000          <2> 	call showmac
  5574 0000445E BE[5E900000]        <2> 	mov esi, line
  5575 00004463 E8F2D8FFFF          <2> 	call print
  5576                              <2> .nortl8139:
  5577                              <2> %endif
  5578                              <2> %ifdef rtl8169.included
  5579 00004468 803D[FC860000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5580 0000446F 751E                <2> 	jne .nortl8169
  5581 00004471 BE[03870000]        <2> 	mov esi, rtl8169.name
  5582 00004476 E8DFD8FFFF          <2> 	call print
  5583 0000447B B9[FD860000]        <2> 	mov ecx, rtl8169.mac
  5584 00004480 E8274B0000          <2> 	call showmac
  5585 00004485 BE[5E900000]        <2> 	mov esi, line
  5586 0000448A E8CBD8FFFF          <2> 	call print
  5587                              <2> .nortl8169:
  5588                              <2> %endif
  5589                              <2> %ifdef i8254x.included
  5590 0000448F 803D[398E0000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5591 00004496 751E                <2> 	jne .noi8254x
  5592 00004498 BE[408E0000]        <2> 	mov esi, i8254x.name
  5593 0000449D E8B8D8FFFF          <2> 	call print
  5594 000044A2 B9[3A8E0000]        <2> 	mov ecx, i8254x.mac
  5595 000044A7 E8004B0000          <2> 	call showmac
  5596 000044AC BE[5E900000]        <2> 	mov esi, line
  5597 000044B1 E8A4D8FFFF          <2> 	call print
  5598                              <2> .noi8254x:
  5599                              <2> %endif
  5600 000044B6 8B0D[13900000]      <2> 	mov ecx, [sysip]
  5601 000044BC E8AF4A0000          <2> 	call showip
  5602 000044C1 BE[5E900000]        <2> 	mov esi, line
  5603 000044C6 E88FD8FFFF          <2> 	call print
  5604 000044CB C3                  <2> 	ret
  5605                              <2> 	
  5606                              <1> %endif
  5607                              <1> %include 'source/programs/keycode.asm'
  5608 000044CC FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5609 000044D5 00                  <2>
  5610                              <2> keycode:
  5611 000044D6 C605[78220000]00    <2> 	mov byte [trans], 0
  5612 000044DD C605[D0660000]00    <2> 	mov byte [threadson], 0
  5613                              <2> %ifdef io.serial
  5614                              <2> .noserial:
  5615                              <2> 	hlt
  5616                              <2> 	mov dx, [serial.address]
  5617                              <2> 	in al, dx
  5618                              <2> 	cmp al, 0
  5619                              <2> 	je .noserial
  5620                              <2> 	mov cl, al
  5621                              <2> 	call showhexsmall
  5622                              <2> 	cmp al, 0x1B
  5623                              <2> 	jne .noserial
  5624                              <2> 	in al, dx
  5625                              <2> 	mov cl, al
  5626                              <2> 	call showhexsmall
  5627                              <2> 	cmp cl, 0x5B
  5628                              <2> 	je .noserial
  5629                              <2> 	ret
  5630                              <2> %else
  5631 000044E4 E8FE180000          <2> 	call getkey
  5632 000044E9 31C0                <2> 	xor eax, eax
  5633 000044EB 31C9                <2> 	xor ecx, ecx
  5634 000044ED 8A0D[C75D0000]      <2> 	mov cl, [specialkey]
  5635 000044F3 80F900              <2> 	cmp cl, 0
  5636 000044F6 0F8405000000        <2> 	je near .nospecialkeycode
  5637 000044FC E8ECEAFFFF          <2> 	call showhexsmall
  5638                              <2> .nospecialkeycode:
  5639 00004501 66A1[76220000]      <2> 	mov ax, [lastkey]
  5640 00004507 88E1                <2> 	mov cl, ah
  5641 00004509 E8DFEAFFFF          <2> 	call showhexsmall
  5642 0000450E 80FC01              <2> 	cmp ah, 1
  5643 00004511 75C3                <2> 	jne keycode
  5644 00004513 C3                  <2> 	ret
  5645                              <2> %endif
  5646                              <1> %ifdef gui.included
  5647                              <1> 	%include 'source/programs/line.asm'
  5648 00004514 FF2C6C696E6500      <2> db 255,44,"line",0
  5649                              <2> linetester:
  5650 0000451B 803D[48A20000]00    <2> 	cmp byte [guion], 0
  5651 00004522 0F841B000000        <2> 	je near .done
  5652 00004528 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5653 0000452F BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5654 00004534 E868000000          <2> 	call .circletest
  5655 00004539 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5656 0000453E E801000000          <2> 	call .linetest
  5657                              <2> .done:
  5658 00004543 C3                  <2> 	ret
  5659                              <2> 
  5660                              <2> .linetest:
  5661 00004544 53                  <2> 	push ebx
  5662 00004545 E8D6000000          <2> 	call .stime
  5663 0000454A 5B                  <2> 	pop ebx
  5664 0000454B 31FF                <2> 	xor edi, edi
  5665                              <2> .ltlp:
  5666 0000454D 53                  <2> 	push ebx
  5667 0000454E E81C010000          <2> 	call .st
  5668 00004553 66F7D6              <2> 	not si
  5669 00004556 E814010000          <2> 	call .st
  5670 0000455B 5B                  <2> 	pop ebx
  5671 0000455C 66F7D6              <2> 	not si
  5672 0000455F 660335[61020000]    <2> 	add si, [timenanoseconds]
  5673 00004566 4B                  <2> 	dec ebx
  5674 00004567 81FB00000000        <2> 	cmp ebx, 0
  5675 0000456D 77DE                <2> 	ja .ltlp
  5676 0000456F E8C4000000          <2> 	call .etime
  5677 00004574 53                  <2> 	push ebx	
  5678 00004575 57                  <2> 	push edi
  5679 00004576 E8EF270000          <2> 	call guiclear
  5680 0000457B E83A280000          <2> 	call reloadallgraphics
  5681 00004580 59                  <2> 	pop ecx
  5682 00004581 E845EBFFFF          <2> 	call showdec
  5683 00004586 BE[B1460000]        <2> 	mov esi, .msg
  5684 0000458B E8CAD7FFFF          <2> 	call print
  5685 00004590 59                  <2> 	pop ecx
  5686 00004591 E835EBFFFF          <2> 	call showdec
  5687 00004596 BE[DD460000]        <2> 	mov esi, .msgtime
  5688 0000459B E8BAD7FFFF          <2> 	call print
  5689 000045A0 C3                  <2> 	ret
  5690                              <2> 	
  5691                              <2> .circletest:
  5692 000045A1 53                  <2> 	push ebx
  5693 000045A2 E879000000          <2> 	call .stime
  5694 000045A7 5B                  <2> 	pop ebx
  5695 000045A8 31FF                <2> 	xor edi, edi
  5696                              <2> .ctlp:
  5697 000045AA 53                  <2> 	push ebx
  5698 000045AB 668B0D[E8560000]    <2> 	mov cx, [resolutiony]
  5699 000045B2 66D1E9              <2> 	shr cx, 1
  5700 000045B5 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  5701 000045BC 66D1EA              <2> 	shr dx, 1
  5702 000045BF 6689C8              <2> 	mov ax, cx
  5703                              <2> .circle:
  5704 000045C2 60                  <2> 	pusha
  5705 000045C3 E8FF210000          <2> 	call drawcircle
  5706 000045C8 61                  <2> 	popa
  5707 000045C9 6648                <2> 	dec ax
  5708 000045CB 47                  <2> 	inc edi
  5709 000045CC 663D0100            <2> 	cmp ax, 1
  5710 000045D0 77F0                <2> 	ja .circle
  5711 000045D2 66F7D6              <2> 	not si
  5712                              <2> .circle2:
  5713 000045D5 60                  <2> 	pusha
  5714 000045D6 E8EC210000          <2> 	call drawcircle
  5715 000045DB 61                  <2> 	popa
  5716 000045DC 47                  <2> 	inc edi
  5717 000045DD 6640                <2> 	inc ax
  5718 000045DF 6639C8              <2> 	cmp ax, cx
  5719 000045E2 76F1                <2> 	jbe .circle2
  5720 000045E4 5B                  <2> 	pop ebx
  5721 000045E5 66F7D6              <2> 	not si
  5722 000045E8 660335[61020000]    <2> 	add si, [timenanoseconds]
  5723 000045EF 4B                  <2> 	dec ebx
  5724 000045F0 81FB00000000        <2> 	cmp ebx, 0
  5725 000045F6 77B2                <2> 	ja .ctlp
  5726 000045F8 E83B000000          <2> 	call .etime
  5727 000045FD 53                  <2> 	push ebx
  5728 000045FE 57                  <2> 	push edi
  5729 000045FF 59                  <2> 	pop ecx
  5730 00004600 E8C6EAFFFF          <2> 	call showdec
  5731 00004605 BE[C6460000]        <2> 	mov esi, .msgcircle
  5732 0000460A E84BD7FFFF          <2> 	call print
  5733 0000460F 59                  <2> 	pop ecx
  5734 00004610 E8B6EAFFFF          <2> 	call showdec
  5735 00004615 BE[DD460000]        <2> 	mov esi, .msgtime
  5736 0000461A E83BD7FFFF          <2> 	call print
  5737 0000461F C3                  <2> 	ret
  5738                              <2> 	
  5739                              <2> .stime:
  5740 00004620 F4                  <2> 	hlt
  5741 00004621 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5742 00004626 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5743 0000462C A3[EC460000]        <2> 	mov [.time], eax
  5744 00004631 891D[F0460000]      <2> 	mov [.time + 4], ebx
  5745 00004637 C3                  <2> 	ret
  5746                              <2> 	
  5747                              <2> .etime:
  5748 00004638 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5749 0000463D 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5750 00004643 8B0D[EC460000]      <2> 	mov ecx, [.time]
  5751 00004649 8B15[F0460000]      <2> 	mov edx, [.time + 4]
  5752 0000464F C1EA0A              <2> 	shr edx, 10
  5753 00004652 C1EB0A              <2> 	shr ebx, 10
  5754 00004655 29C8                <2> 	sub eax, ecx
  5755 00004657 3D00000000          <2> 	cmp eax, 0
  5756 0000465C 740E                <2> 	je .notclp
  5757                              <2> .tclp:
  5758 0000465E 81C340420F00        <2> 	add ebx, 1000000
  5759 00004664 48                  <2> 	dec eax
  5760 00004665 3D00000000          <2> 	cmp eax, 0
  5761 0000466A 75F2                <2> 	jne .tclp
  5762                              <2> .notclp:
  5763 0000466C 29D3                <2> 	sub ebx, edx
  5764 0000466E C3                  <2> 	ret
  5765                              <2> 	
  5766                              <2> .st:
  5767 0000466F 6631C0              <2> 	xor ax, ax
  5768 00004672 6631DB              <2> 	xor bx, bx
  5769 00004675 668B0D[E8560000]    <2> 	mov cx, [resolutiony]
  5770 0000467C 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  5771                              <2> .lp:
  5772 00004683 60                  <2> 	pusha
  5773 00004684 E8B5250000          <2> 	call drawline
  5774 00004689 61                  <2> 	popa
  5775                              <2> .noswitch:
  5776 0000468A 47                  <2> 	inc edi
  5777 0000468B 6643                <2> 	inc bx
  5778 0000468D 664A                <2> 	dec dx
  5779 0000468F 6681FB0000          <2> 	cmp bx, 0
  5780 00004694 74ED                <2> 	je .lp
  5781 00004696 6681FA0000          <2> 	cmp dx, 0
  5782 0000469B 75E6                <2> 	jne .lp
  5783                              <2> .lp2:
  5784 0000469D 60                  <2> 	pusha
  5785 0000469E E89B250000          <2> 	call drawline
  5786 000046A3 61                  <2> 	popa
  5787 000046A4 47                  <2> 	inc edi
  5788 000046A5 6640                <2> 	inc ax
  5789 000046A7 6649                <2> 	dec cx
  5790 000046A9 6681F90000          <2> 	cmp cx, 0
  5791 000046AE 75ED                <2> 	jne .lp2
  5792 000046B0 C3                  <2> 	ret
  5793                              <2> 	
  5794 000046B1 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5795 000046BA 6520647261776E2069- <2>
  5796 000046C3 6E2000              <2>
  5797 000046C6 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5798 000046CF 65726520647261776E- <2>
  5799 000046D8 20696E2000          <2>
  5800 000046DD 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5801 000046E6 6E64732E0A00        <2>
  5802 000046EC 0000000000000000    <2> .time dd 0,0	
  5803                              <1> %endif
  5804                              <1> %include 'source/programs/logout.asm'
  5805 000046F4 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5806 000046FD E962E2FFFF          <2> 	jmp os
  5807                              <1> %include 'source/programs/loop.asm'
  5808 00004702 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5809 00004709 803D[0DBB0000]00    <2> 	cmp byte [LOOPON], 0
  5810 00004710 0F8501000000        <2> 	jne near filoop
  5811 00004716 C3                  <2> 	ret
  5812 00004717 8B35[0EBB0000]      <2> filoop: mov esi, [LOOPPOS]
  5813 0000471D FE0D[A3BA0000]      <2> 	dec byte [IFON]
  5814 00004723 C605[0DBB0000]00    <2> 	mov byte [LOOPON], 0
  5815 0000472A 8935[08BB0000]      <2> 	mov [BATCHPOS], esi
  5816 00004730 8935[00380000]      <2> 	mov [batchedi], esi
  5817 00004736 C3                  <2> 	ret 
  5818                              <1> %include 'source/programs/ls.asm'
  5819 00004737 FF2C6C7300          <2> db 255,44,"ls",0
  5820 0000473C BE[83A00000]        <2> 		mov esi, diskfileindex
  5821                              <2> 	diskindexdir:
  5822 00004741 803E5F              <2> 		cmp byte [esi], '_'
  5823 00004744 7440                <2> 		je nextdiskindexdir
  5824 00004746 E8FDD5FFFF          <2> 		call printquiet
  5825 0000474B 56                  <2> 		push esi
  5826 0000474C BE[A6470000]        <2> 		mov esi, disktab
  5827 00004751 E8F2D5FFFF          <2> 		call printquiet
  5828 00004756 5E                  <2> 		pop esi
  5829 00004757 8B4E05              <2> 		mov ecx, [esi + 5]
  5830 0000475A C605[EC2F0000]05    <2> 		mov byte [firsthexshown], 5
  5831 00004761 E865E9FFFF          <2> 		call showdec
  5832 00004766 56                  <2> 		push esi
  5833 00004767 BE[5E900000]        <2> 		mov esi, line
  5834 0000476C E8D7D5FFFF          <2> 		call printquiet
  5835 00004771 5E                  <2> 		pop esi
  5836 00004772 81C609000000        <2> 		add esi, 9
  5837 00004778 81FE[48A20000]      <2> 		cmp esi, enddiskfileindex
  5838 0000477E 72C1                <2> 		jb diskindexdir
  5839 00004780 E887DFFFFF          <2> 		call termcopy
  5840 00004785 C3                  <2> 		ret
  5841                              <2> 	nextdiskindexdir:
  5842 00004786 46                  <2> 		inc esi
  5843 00004787 803E00              <2> 		cmp byte [esi], 0
  5844 0000478A 75FA                <2> 		jne nextdiskindexdir
  5845 0000478C 81C609000000        <2> 		add esi, 9
  5846 00004792 81FE[48A20000]      <2> 		cmp esi, enddiskfileindex
  5847 00004798 72A7                <2> 		jb diskindexdir
  5848 0000479A E86DDFFFFF          <2> 		call termcopy
  5849 0000479F C3                  <2> 		ret
  5850                              <2> 		
  5851 000047A0 4469736B2000        <2> 		diskmsg db "Disk ",0
  5852 000047A6 0D09090900          <2> 		disktab db 13,9,9,9,0
  5853                              <1> %include 'source/programs/memory.asm'
  5854 000047AB FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5855 000047B4 BE[4EA20000]        <2> 	mov esi, memlistbuf
  5856 000047B9 31FF                <2> 	xor edi, edi
  5857 000047BB 668B3D[8EA40000]    <2> 	mov di, [memlistend]
  5858 000047C2 01F7                <2> 	add edi, esi
  5859                              <2> printmemmap:
  5860 000047C4 8B0E                <2> 	mov ecx, [esi]
  5861 000047C6 E836E8FFFF          <2> 	call showhex
  5862 000047CB 81C608000000        <2> 	add esi, 8
  5863 000047D1 8B0E                <2> 	mov ecx, [esi]
  5864 000047D3 E829E8FFFF          <2> 	call showhex
  5865 000047D8 81C608000000        <2> 	add esi, 8
  5866 000047DE 8B0E                <2> 	mov ecx, [esi]
  5867 000047E0 E81CE8FFFF          <2> 	call showhex
  5868 000047E5 81C608000000        <2> 	add esi, 8
  5869 000047EB 57                  <2> 	push edi
  5870 000047EC 56                  <2> 	push esi
  5871 000047ED BE[5E900000]        <2> 	mov esi, line
  5872 000047F2 E863D5FFFF          <2> 	call print
  5873 000047F7 5E                  <2> 	pop esi
  5874 000047F8 5F                  <2> 	pop edi
  5875 000047F9 39FE                <2> 	cmp esi, edi
  5876 000047FB 72C7                <2> 	jb printmemmap
  5877 000047FD C3                  <2> 	ret
  5878                              <2> 	
  5879                              <1> %include 'source/programs/pci.asm'
  5880 000047FE FF2C70636900        <2> db 255,44,"pci",0
  5881 00004804 E8F9190000          <2> 	call pcidump
  5882 00004809 C3                  <2> 	ret 
  5883                              <1> %ifdef network.included
  5884                              <1> 	%include 'source/programs/ping.asm'
  5885 0000480A FF2C70696E6700      <2> db 255,44,"ping",0
  5886                              <2> ping:
  5887 00004811 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5888 00004817 81C605000000        <2> 	add esi, 5
  5889 0000481D E808470000          <2> 	call strtoip
  5890 00004822 890D[AD480000]      <2> 	mov [.destip], ecx
  5891 00004828 E843470000          <2> 	call showip
  5892 0000482D 8B0D[13900000]      <2> 	mov ecx, [sysip]
  5893 00004833 890D[A9480000]      <2> 	mov [.sourceip]. ecx
  5894 00004839 31C0                <2> 	xor eax, eax
  5895 0000483B 31DB                <2> 	xor ebx, ebx
  5896 0000483D 66A3[A7480000]      <2> 	mov [.checksum], ax
  5897 00004843 66A3[B3480000]      <2> 	mov [.icmpchecksum], ax
  5898 00004849 BF[9D480000]        <2> 	mov edi, .header
  5899 0000484E BE[B1480000]        <2> 	mov esi, .headerend
  5900 00004853 E8AA460000          <2> 	call getchecksum
  5901 00004858 66890D[A7480000]    <2> 	mov [.checksum], cx
  5902 0000485F BF[B1480000]        <2> 	mov edi, .icmp
  5903 00004864 BE[D9480000]        <2> 	mov esi, .packetend
  5904 00004869 E894460000          <2> 	call getchecksum
  5905 0000486E 66890D[B3480000]    <2> 	mov [.icmpchecksum], cx
  5906 00004875 BF[8F480000]        <2> 	mov edi, .packet
  5907 0000487A BE[D9480000]        <2> 	mov esi, .packetend
  5908 0000487F E85D460000          <2> 	call sendpacket
  5909 00004884 BE[5E900000]        <2> 	mov esi, line
  5910 00004889 E8CCD4FFFF          <2> 	call print
  5911 0000488E C3                  <2> 	ret
  5912                              <2> 	
  5913                              <2> 	
  5914                              <2> 	
  5915                              <2> .packet:
  5916 0000488F FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5917 00004895 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5918 0000489B 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5919                              <2> .header:
  5920 0000489D 45                  <2> .version	db 0x45
  5921 0000489E 00                  <2> .services	db 0
  5922 0000489F 003C                <2> .length	db 0,0x3C
  5923 000048A1 0000                <2> .id		dw 0
  5924 000048A3 00                  <2> .flags	db 0
  5925 000048A4 00                  <2> .fragment db 0
  5926 000048A5 80                  <2> .ttl	db 128
  5927 000048A6 01                  <2> .protocol db 1 ;ICMP
  5928 000048A7 0000                <2> .checksum dw 0
  5929 000048A9 00000000            <2> .sourceip dd 0
  5930 000048AD 00000000            <2> .destip dd 0
  5931                              <2> .headerend:
  5932                              <2> .icmp:
  5933 000048B1 08                  <2> .icmptype db 8 ;Ping request
  5934 000048B2 00                  <2> .icmpcode db 0
  5935 000048B3 0000                <2> .icmpchecksum dw 0
  5936 000048B5 0001                <2> .icmpid db 0,1
  5937 000048B7 0000                <2> .sequence dw 0
  5938 000048B9 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5939 000048C2 6A6B6C6D6E6F707172- <2>
  5940 000048CB 737475767761626364- <2>
  5941 000048D4 6566676869          <2>
  5942                              <2> .packetend:
  5943                              <1> %endif
  5944                              <1> %include 'source/programs/play.asm'
  5945 000048D9 FF2C706C61796100    <2> db 255,44,"playa",0
  5946 000048E1 8B3D[DA2D0000]      <2> 	mov edi, [currentcommandloc]
  5947 000048E7 81C706000000        <2> 	add edi, 6
  5948 000048ED E833000000          <2> 	call playasync
  5949 000048F2 C3                  <2> 	ret
  5950 000048F3 FF2C706C617900      <2> db 255,44,"play",0
  5951                              <2> play:
  5952 000048FA 8B3D[DA2D0000]      <2> 	mov edi, [currentcommandloc]
  5953 00004900 81C705000000        <2> 	add edi, 5
  5954 00004906 E81A000000          <2> 	call playasync
  5955                              <2> .waitforsound:
  5956                              <2> %ifdef sound.included
  5957 0000490B A1[B05D0000]        <2> 	mov eax, [Length0]
  5958 00004910 660B05[B45D0000]    <2> 	or ax, [Length1]
  5959                              <2> %endif
  5960 00004917 0A05[65020000]      <2> 	or al, [soundon]
  5961 0000491D 3D00000000          <2> 	cmp eax, 0
  5962 00004922 75E7                <2> 	jne .waitforsound
  5963 00004924 C3                  <2> 	ret
  5964                              <2> playasync:
  5965 00004925 BE0000C000          <2> 	mov esi, 0xC00000
  5966 0000492A E8021C0000          <2> 	call loadfile
  5967 0000492F 81FA94010000        <2> 	cmp edx, 404
  5968 00004935 743F                <2> 	je nosoundfound
  5969 00004937 BB0000C000          <2> 	mov ebx, 0xC00000
  5970 0000493C 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5971 00004943 0F843F010000        <2> 	je near wave_player
  5972 00004949 66813B534E          <2> 	cmp word [ebx], "SN"
  5973 0000494E 7526                <2> 	jne nosoundfound
  5974 00004950 81C306000000        <2> 	add ebx, 6
  5975 00004956 891D[68020000]      <2> 	mov [soundpos], ebx
  5976 0000495C 035BFC              <2> 	add ebx, [ebx - 4]
  5977 0000495F 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5978 00004965 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5979 0000496D 00                  <2>
  5980 0000496E C605[65020000]01    <2> 	mov byte [soundon], 1
  5981 00004975 C3                  <2> 	ret
  5982                              <2> nosoundfound:
  5983 00004976 BE[9C490000]        <2> 	mov esi, notfoundsound
  5984 0000497B E8DAD3FFFF          <2> 	call print
  5985 00004980 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  5986 00004986 81C605000000        <2> 	add esi, 5
  5987 0000498C E8C9D3FFFF          <2> 	call print
  5988 00004991 BE[2D900000]        <2> 	mov esi, notfound2
  5989 00004996 E8BFD3FFFF          <2> 	call print
  5990 0000499B C3                  <2> 	ret
  5991 0000499C 706C61793A2000      <2> notfoundsound db "play: ",0
  5992                              <2> 
  5993                              <2> %ifdef sound.included
  5994                              <2> sbplay:
  5995 000049A3 BE0000C000          <2> 		mov esi, 0xC00000
  5996 000049A8 89F3                <2> 		mov ebx, esi
  5997 000049AA 81C640000000        <2> 		add esi, WAVSTART
  5998 000049B0 29F7                <2> 		sub edi, esi
  5999 000049B2 66893D[B45D0000]    <2> 		mov [Length1], di
  6000 000049B9 C1EF0F              <2> 		shr edi, 15
  6001 000049BC 893D[B05D0000]      <2> 		mov [Length0], edi
  6002 000049C2 8B4B18              <2> 		mov ecx, [ebx + 24]
  6003 000049C5 890D[C15D0000]      <2> 		mov [Freq], ecx
  6004 000049CB 31C0                <2> 		xor eax, eax
  6005 000049CD BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6006 000049D2 81C240000000        <2> 		add edx, WAVSTART
  6007 000049D8 01D0                <2> 		add	eax, edx
  6008 000049DA 89C6                <2> 		mov esi, eax
  6009 000049DC 31C9                <2> 		xor ecx, ecx
  6010 000049DE 31DB                <2> 		xor ebx, ebx
  6011 000049E0 66891D[BE5D0000]    <2> 		mov [SegLoc], bx
  6012 000049E7 81C300000800        <2> 		add ebx, 0x80000
  6013 000049ED 66B9FFFF            <2> 		mov cx, 0xFFFF
  6014 000049F1 6681FF0000          <2> 		cmp di, 0
  6015 000049F6 7520                <2> 		jne .autoinit
  6016 000049F8 668B0D[B45D0000]    <2> 		mov cx, [Length1]
  6017 000049FF C605[AF5D0000]01    <2> 		mov byte [OddLength], 1
  6018 00004A06 6681F90080          <2> 		cmp cx, 32768
  6019 00004A0B 730B                <2> 		jae .autoinit
  6020 00004A0D C605[AF5D0000]00    <2> 		mov byte [OddLength], 0
  6021 00004A14 66D1E1              <2> 		shl cx, 1
  6022 00004A17 47                  <2> 		inc edi
  6023                              <2> .autoinit:
  6024 00004A18 4F                  <2> 		dec edi
  6025 00004A19 893D[B05D0000]      <2> 		mov [Length0], edi
  6026 00004A1F 66890D[B45D0000]    <2> 		mov [Length1], cx
  6027 00004A26 66D1E9              <2> 		shr cx, 1
  6028 00004A29 6641                <2> 		inc cx
  6029 00004A2B 01C8                <2> 		add eax, ecx
  6030 00004A2D A3[B65D0000]        <2> 		mov [NextMemLoc], eax
  6031 00004A32 8935[BA5D0000]      <2> 		mov	[MemLoc], esi
  6032 00004A38 E82A120000          <2> 		call DMACopy
  6033 00004A3D 31DB                <2> 		xor ebx, ebx
  6034 00004A3F 668B1D[BE5D0000]    <2> 		mov bx, [SegLoc]
  6035 00004A46 31C9                <2> 		xor ecx, ecx
  6036 00004A48 668B0D[B45D0000]    <2> 		mov cx, [Length1]
  6037 00004A4F 66D1E9              <2> 		shr cx, 1
  6038 00004A52 6641                <2> 		inc cx
  6039 00004A54 01CB                <2> 		add ebx, ecx
  6040 00004A56 66891D[BE5D0000]    <2> 		mov [SegLoc], bx
  6041 00004A5D 81C300000800        <2> 		add ebx, 0x80000
  6042 00004A63 8B35[B65D0000]      <2> 		mov esi, [NextMemLoc]
  6043 00004A69 89F0                <2> 		mov eax, esi
  6044 00004A6B 01C8                <2> 		add eax, ecx
  6045 00004A6D A3[B65D0000]        <2> 		mov [NextMemLoc], eax
  6046 00004A72 8935[BA5D0000]      <2> 		mov	[MemLoc], esi
  6047 00004A78 E8EA110000          <2> 		call DMACopy
  6048 00004A7D E808120000          <2> 		call DMAPlay
  6049 00004A82 E892120000          <2> 		call PlayDSP
  6050 00004A87 C3                  <2> 		ret
  6051                              <2> WAVSTART equ 64;44
  6052                              <2> wave_player:
  6053 00004A88 803D[C65D0000]01    <2> 	cmp byte [SoundBlaster], 1
  6054 00004A8F 0F840EFFFFFF        <2> 	je near sbplay
  6055 00004A95 BE[A04A0000]        <2> 	mov esi, nosoundblaster
  6056 00004A9A E8BBD2FFFF          <2> 	call print
  6057 00004A9F C3                  <2> 	ret
  6058                              <2> %else
  6059                              <2> 	wave_player:
  6060                              <2> 		mov esi, nosoundblaster
  6061                              <2> 		call print
  6062                              <2> 		ret
  6063                              <2> %endif
  6064 00004AA0 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6065 00004AA9 426C61737465722064- <2>
  6066 00004AB2 657465637465642E0A- <2>
  6067 00004ABB 00                  <2>
  6068                              <1> %include 'source/programs/pwd.asm'
  6069 00004ABC FF2C70776400        <2> db 255,44,"pwd",0
  6070 00004AC2 BE[9EB80000]        <2> 	mov esi, currentfolder
  6071 00004AC7 E87CD2FFFF          <2> 	call printquiet
  6072 00004ACC BE[5E900000]        <2> 	mov esi, line
  6073 00004AD1 E884D2FFFF          <2> 	call print
  6074 00004AD6 C3                  <2> 	ret
  6075                              <2> 	
  6076                              <1> %include 'source/programs/reboot.asm'
  6077 00004AD7 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6078 00004AE0 0F011D[EA4A0000]    <2> 		lidt [idtreboot]
  6079 00004AE7 CD00                <2> 		int 0
  6080 00004AE9 F4                  <2> 		hlt
  6081                              <2> 	
  6082 00004AEA 0000                <2> 	idtreboot dw 0
  6083 00004AEC 00000000            <2> 			  dd 0
  6084                              <2> 
  6085                              <2> 	coldboot:
  6086 00004AF0 66B84000            <2> 		MOV AX, 0040h
  6087 00004AF4 8EC0                <2> 		MOV ES, AX
  6088 00004AF6 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6089 00004AFF 00                  <2>
  6090 00004B00 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6091 00004B07 CF                  <2> 		IRET
  6092                              <2> 
  6093                              <2> 	warmboot:
  6094 00004B08 66B84000            <2> 		MOV AX, 0040h
  6095 00004B0C 8EC0                <2> 		MOV ES, AX
  6096 00004B0E 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6097 00004B17 12                  <2>
  6098 00004B18 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6099 00004B1F CF                  <2> 		IRET
  6100                              <2> 		
  6101                              <1> %include 'source/programs/reg.asm'
  6102 00004B20 FF2C72656700        <2> db 255,44,"reg",0
  6103 00004B26 CD03                <2> 	int 3
  6104 00004B28 C3                  <2> 	ret 
  6105                              <1> %include 'source/programs/show.asm'
  6106 00004B29 FF2C73686F7700      <2> db 255,44,"show",0
  6107 00004B30 8B3D[DA2D0000]      <2> 		mov edi, [currentcommandloc]
  6108 00004B36 81C705000000        <2> 		add edi, 5
  6109 00004B3C BE00008000          <2> 		mov esi, 0x800000
  6110 00004B41 E8EB190000          <2> 		call loadfile
  6111 00004B46 81FA94010000        <2> 		cmp edx, 404
  6112 00004B4C 0F8483000000        <2> 		je near filenotfound
  6113 00004B52 BE00008000          <2> 		mov esi, 0x800000
  6114                              <2> %ifdef gui.included
  6115 00004B57 66813E424D          <2> 		cmp word [esi], "BM"
  6116 00004B5C 7410                <2> 		je bmpfound
  6117                              <2> %endif
  6118 00004B5E E8F7D1FFFF          <2> 		call print
  6119 00004B63 BE[5E900000]        <2> 		mov esi, line
  6120 00004B68 E8EDD1FFFF          <2> 		call print
  6121 00004B6D C3                  <2> 		ret
  6122                              <2> %ifdef gui.included
  6123                              <2> bmpfound:
  6124 00004B6E 803D[48A20000]00    <2> 		cmp byte [guion], 0
  6125 00004B75 0F8428000000        <2> 		je near noguibmp
  6126 00004B7B BE00008000          <2> 		mov esi, 0x800000
  6127 00004B80 31C9                <2> 		xor ecx, ecx
  6128 00004B82 31D2                <2> 		xor edx, edx
  6129 00004B84 31C0                <2> 		xor eax, eax
  6130 00004B86 31DB                <2> 		xor ebx, ebx
  6131 00004B88 E8681B0000          <2> 		call showbmp
  6132 00004B8D 30C0                <2> 		xor al, al
  6133 00004B8F B405                <2> 		mov ah, 5
  6134 00004B91 CD30                <2> 		int 30h
  6135 00004B93 E8D2210000          <2> 		call guiclear
  6136 00004B98 E8B11E0000          <2> 		call clearmousecursor
  6137 00004B9D E818220000          <2> 		call reloadallgraphics
  6138 00004BA2 C3                  <2> 		ret
  6139                              <2> noguibmp:
  6140 00004BA3 BE[AE4B0000]        <2> 		mov esi, warnguimsg
  6141 00004BA8 E8ADD1FFFF          <2> 		call print
  6142 00004BAD C3                  <2> 		ret
  6143 00004BAE 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6144 00004BB7 6E6F7420626520646F- <2>
  6145 00004BC0 6E6520776974686F75- <2>
  6146 00004BC9 742074686520475549- <2>
  6147 00004BD2 2E0A00              <2>
  6148                              <2> %endif
  6149                              <2> 
  6150                              <2> filenotfound:
  6151 00004BD5 BE[084C0000]        <2> 		mov esi, filenf
  6152 00004BDA E87BD1FFFF          <2> 		call print
  6153 00004BDF 8B35[DA2D0000]      <2> 		mov esi, [currentcommandloc]
  6154                              <2> findfilenotfoundzero:
  6155 00004BE5 8A06                <2> 		mov al, [esi]
  6156 00004BE7 46                  <2> 		inc esi
  6157 00004BE8 3C00                <2> 		cmp al, 0
  6158 00004BEA 7411                <2> 		je nofilenamenotfound
  6159 00004BEC 81FE[12D30000]      <2> 		cmp esi, buftxtend
  6160 00004BF2 7309                <2> 		jae nofilenamenotfound
  6161 00004BF4 3C20                <2> 		cmp al, " "
  6162 00004BF6 75ED                <2> 		jne findfilenotfoundzero
  6163 00004BF8 E85DD1FFFF          <2> 		call print
  6164                              <2> nofilenamenotfound:
  6165 00004BFD BE[134C0000]        <2> 		mov esi, filenf2
  6166 00004C02 E853D1FFFF          <2> 		call print
  6167 00004C07 C3                  <2> 		ret
  6168 00004C08 5468652066696C6520- <2> filenf db "The file ",34,0
  6169 00004C11 2200                <2>
  6170 00004C13 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6171 00004C1C 6F7420626520666F75- <2>
  6172 00004C25 6E642E0A00          <2>
  6173                              <1> %include 'source/programs/shush.asm'
  6174 00004C2A FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6175                              <2> shushprog:
  6176                              <2> %ifdef gui.included
  6177 00004C32 803D[48A20000]00    <2> 	cmp byte [guion], 0
  6178 00004C39 0F84B9000000        <2> 	je near .noswitchsize
  6179 00004C3F 8B35[DA2D0000]      <2> 	mov esi, [currentcommandloc]
  6180 00004C45 81C606000000        <2> 	add esi, 6
  6181 00004C4B 56                  <2> 	push esi
  6182 00004C4C 4E                  <2> 	dec esi
  6183                              <2> .findspace:
  6184 00004C4D 46                  <2> 	inc esi
  6185 00004C4E 8A06                <2> 	mov al, [esi]
  6186 00004C50 3C00                <2> 	cmp al, 0
  6187 00004C52 0F84A0000000        <2> 	je near .noswitchsize
  6188 00004C58 3C58                <2> 	cmp al, "X"
  6189 00004C5A 7408                <2> 	je .donefind
  6190 00004C5C 3C78                <2> 	cmp al, "x"
  6191 00004C5E 7404                <2> 	je .donefind
  6192 00004C60 3C20                <2> 	cmp al, " "
  6193 00004C62 75E9                <2> 	jne .findspace
  6194                              <2> .donefind:
  6195 00004C64 30C0                <2> 	xor al, al
  6196 00004C66 8806                <2> 	mov [esi], al
  6197 00004C68 46                  <2> 	inc esi
  6198 00004C69 89F7                <2> 	mov edi, esi
  6199 00004C6B E83DE5FFFF          <2> 	call cnvrttxt
  6200 00004C70 89C8                <2> 	mov eax, ecx
  6201 00004C72 5E                  <2> 	pop esi
  6202 00004C73 50                  <2> 	push eax
  6203 00004C74 89F7                <2> 	mov edi, esi
  6204 00004C76 E832E5FFFF          <2> 	call cnvrttxt
  6205 00004C7B 89CB                <2> 	mov ebx, ecx
  6206 00004C7D 58                  <2> 	pop eax	
  6207 00004C7E 6681FB0000          <2> 	cmp bx, 0
  6208 00004C83 0F846F000000        <2> 	je near .noswitchsize
  6209 00004C89 663D0000            <2> 	cmp ax, 0
  6210 00004C8D 0F8465000000        <2> 	je near .noswitchsize
  6211 00004C93 66C1E303            <2> 	shl bx, 3
  6212 00004C97 66C1E004            <2> 	shl ax, 4
  6213 00004C9B 663B1D[E6560000]    <2> 	cmp bx, [resolutionx]
  6214 00004CA2 7607                <2> 	jbe .nofixx
  6215 00004CA4 668B1D[E6560000]    <2> 	mov bx, [resolutionx]
  6216                              <2> .nofixx:
  6217 00004CAB 66051000            <2> 	add ax, 16
  6218 00004CAF 663B05[E8560000]    <2> 	cmp ax, [resolutiony]
  6219 00004CB6 7606                <2> 	jbe .nofixy
  6220 00004CB8 66A1[E8560000]      <2> 	mov ax, [resolutiony]
  6221                              <2> .nofixy:
  6222 00004CBE 662D1000            <2> 	sub ax, 16
  6223 00004CC2 6631C9              <2> 	xor cx, cx
  6224 00004CC5 6631D2              <2> 	xor dx, dx
  6225 00004CC8 66891D[8F700000]    <2> 	mov [termwindow], bx
  6226 00004CCF 66A3[91700000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6227 00004CD5 BE[8F700000]        <2> 	mov esi, termwindow
  6228 00004CDA 31DB                <2> 	xor ebx, ebx
  6229 00004CDC 6631C0              <2> 	xor ax, ax
  6230 00004CDF E8B4280000          <2> 	call showwindow
  6231 00004CE4 E881200000          <2> 	call guiclear
  6232 00004CE9 E8D2D0FFFF          <2> 	call clear
  6233 00004CEE E8C7200000          <2> 	call reloadallgraphics
  6234 00004CF3 E80E1E0000          <2> 	call switchmousepos2
  6235                              <2> .noswitchsize:
  6236                              <2> %endif
  6237 00004CF8 BE[034D0000]        <2> 	mov esi, shushmsg
  6238 00004CFD E858D0FFFF          <2> 	call print
  6239 00004D02 C3                  <2> 	ret
  6240 00004D03 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6241 00004D0C 6F2074686520536F6C- <2>
  6242 00004D15 6C65724F5320486172- <2>
  6243 00004D1E 646C7920556E69782D- <2>
  6244 00004D27 436F6D70617469626C- <2>
  6245 00004D30 65205368656C6C210A- <2>
  6246 00004D39 00                  <2>
  6247                              <1> %include 'source/programs/system.asm'
  6248 00004D3A FF2C73797374656D00  <2> 	db 255,44,"system",0
  6249 00004D43 BE[534E0000]        <2> 	mov esi, kernelinfomsg
  6250 00004D48 E8FBCFFFFF          <2> 	call printquiet
  6251 00004D4D B9[83A00000]        <2> 	mov ecx, osend
  6252 00004D52 E874E3FFFF          <2> 	call showdec
  6253 00004D57 BE[684E0000]        <2> 	mov esi, diskbytemsg
  6254 00004D5C E8E7CFFFFF          <2> 	call printquiet
  6255 00004D61 B9[83A00000]        <2> 	mov ecx, osend
  6256 00004D66 81C1[80BB0100]      <2> 	add ecx, commandbufend
  6257 00004D6C 81E9[48A20000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6258 00004D72 E854E3FFFF          <2> 	call showdec
  6259 00004D77 BE[7F4E0000]        <2> 	mov esi, membytemsg
  6260 00004D7C E8C7CFFFFF          <2> 	call printquiet
  6261 00004D81 BE[E24E0000]        <2> 	mov esi, endofmemmsg
  6262 00004D86 E8BDCFFFFF          <2> 	call printquiet
  6263 00004D8B B9[94EF1100]        <2> 	mov ecx, bssend
  6264 00004D90 E86CE2FFFF          <2> 	call showhex
  6265 00004D95 BE[984E0000]        <2> 	mov esi, systeminfomsg
  6266 00004D9A E8A9CFFFFF          <2> 	call printquiet
  6267                              <2> getcpuspeed:
  6268 00004D9F B8FE000000          <2> 	mov eax, 0xFE
  6269 00004DA4 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6270 00004DA6 B020                <2> 	mov al, 0x20
  6271 00004DA8 E620                <2> 	out 0x20, al
  6272 00004DAA F4                  <2> 	hlt
  6273 00004DAB 0F31                <2> 	rdtsc
  6274 00004DAD 89D6                <2> 	mov esi, edx
  6275 00004DAF 89C7                <2> 	mov edi, eax
  6276 00004DB1 31C0                <2> 	xor eax, eax
  6277 00004DB3 C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  6278                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6279 00004DBA 40                  <2> 	inc eax
  6280 00004DBB EBFD                <2> 	jmp cpuspeedloop
  6281                              <2> cpuspeedloopend:
  6282 00004DBD 0F31                <2> 	rdtsc
  6283 00004DBF 29F8                <2> 	sub eax, edi
  6284 00004DC1 29F2                <2> 	sub edx, esi
  6285 00004DC3 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  6286 00004DC9 A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  6287 00004DCE 31C0                <2> 	xor eax, eax
  6288 00004DD0 E621                <2> 	out 0x21, al
  6289 00004DD2 B020                <2> 	mov al, 0x20
  6290 00004DD4 E620                <2> 	out 0x20, al
  6291 00004DD6 31D2                <2> 	xor edx, edx
  6292 00004DD8 31C0                <2> 	xor eax, eax
  6293 00004DDA A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  6294 00004DDF D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6295                              <2> 				;result by 2
  6296 00004DE1 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6297 00004DE7 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6298 00004DEA F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6299 00004DEC 89C1                <2> 	mov ecx, eax
  6300 00004DEE E8D8E2FFFF          <2> 	call showdec
  6301 00004DF3 BE[C64E0000]        <2> 	mov esi, cpuspeedmsg
  6302 00004DF8 E84BCFFFFF          <2> 	call printquiet
  6303 00004DFD 31D2                <2> 	xor edx, edx
  6304 00004DFF A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  6305 00004E04 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6306 00004E0A 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6307 00004E10 C1EB0A              <2> 	shr ebx, 10
  6308 00004E13 F7F3                <2> 	div ebx
  6309 00004E15 89C1                <2> 	mov ecx, eax
  6310 00004E17 E8AFE2FFFF          <2> 	call showdec
  6311 00004E1C BE[CC4E0000]        <2> 	mov esi, cpuclockmsg
  6312 00004E21 E822CFFFFF          <2> 	call printquiet
  6313 00004E26 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  6314 00004E2C C1E914              <2> 	shr ecx, 20
  6315 00004E2F 41                  <2> 	inc ecx	;the reading is one MB behind
  6316 00004E30 E896E2FFFF          <2> 	call showdec
  6317 00004E35 BE[D14E0000]        <2> 	mov esi, memoryspacemsg
  6318 00004E3A E81BCFFFFF          <2> 	call print
  6319                              <2> %ifdef sound.included
  6320 00004E3F 803D[C65D0000]00    <2> 	cmp byte [SoundBlaster], 0
  6321 00004E46 740A                <2> 	je .nosb
  6322 00004E48 BE[AE4E0000]        <2> 	mov esi, soundblastermsg
  6323 00004E4D E808CFFFFF          <2> 	call print
  6324                              <2> .nosb:
  6325                              <2> %endif
  6326 00004E52 C3                  <2> 	ret
  6327                              <2> 
  6328 00004E53 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6329 00004E5C 666F726D6174696F6E- <2>
  6330 00004E65 3A0A00              <2>
  6331 00004E68 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6332 00004E71 6B2053706163652055- <2>
  6333 00004E7A 7365640A00          <2>
  6334 00004E7F 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6335 00004E88 6F7279205370616365- <2>
  6336 00004E91 20557365640A00      <2>
  6337 00004E98 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6338 00004EA1 6E666F726D6174696F- <2>
  6339 00004EAA 6E3A0A00            <2>
  6340                              <2> %ifdef sound.included
  6341 00004EAE 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6342 00004EB7 746572204465746563- <2>
  6343 00004EC0 7465642E0A00        <2>
  6344                              <2> %endif
  6345 00004EC6 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6346 00004ECC 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6347 00004ED1 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6348 00004EDA 2053706163650A00    <2>
  6349 00004EE2 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6350 00004EEB 6D6F72792053706163- <2>
  6351 00004EF4 653A20307800        <2>
  6352                              <1> %include 'source/programs/time.asm'
  6353 00004EFA 082E30303030303030- <2> timenscache db 8,".000000000"
  6354 00004F03 3030                <2>
  6355 00004F05 200A00              <2> timenscacheend: db " ",10,0
  6356 00004F08 00                  <2> istimeset db 0
  6357 00004F09 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6358 00004F12 2063757272656E7420- <2>
  6359 00004F1B 554E49582074696D65- <2>
  6360 00004F24 3A0A00              <2>
  6361 00004F27 00<rept>            <2> timeinputbuffer times 12 db 0
  6362 00004F33 00                  <2> timeinputbend: db 0
  6363                              <2> 
  6364 00004F34 FF2C74696D6500      <2> db 255,44,"time",0
  6365 00004F3B 803D[084F0000]00    <2> 	cmp byte [istimeset], 0
  6366 00004F42 753A                <2> 	jne timeisset
  6367 00004F44 BE[094F0000]        <2> 	mov esi, settimemsg
  6368 00004F49 E80CCEFFFF          <2> 	call print
  6369 00004F4E BE[274F0000]        <2> 	mov esi, timeinputbuffer
  6370 00004F53 BF[334F0000]        <2> 	mov edi, timeinputbend
  6371 00004F58 E8DECEFFFF          <2> 	call readline
  6372 00004F5D BE[274F0000]        <2> 	mov esi, timeinputbuffer
  6373 00004F62 31FF                <2> 	xor edi, edi
  6374 00004F64 E844E2FFFF          <2> 	call cnvrttxt
  6375 00004F69 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6376 00004F6F 31C9                <2> 	xor ecx, ecx
  6377 00004F71 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6378 00004F77 C605[084F0000]01    <2> 	mov byte [istimeset], 1
  6379                              <2> timeisset:
  6380 00004F7E 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6381 00004F84 E842E1FFFF          <2> 	call showdec
  6382                              <2> 	
  6383 00004F89 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6384 00004F8F BE[FA4E0000]        <2> 	mov esi, timenscache
  6385 00004F94 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6386 00004F9B C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6387 00004FA2 C6460A30            <2> 	mov byte [esi + 10], "0"
  6388 00004FA6 BE[054F0000]        <2> 	mov esi, timenscacheend
  6389 00004FAB E8FEDEFFFF          <2> 	call convert
  6390 00004FB0 BE[FA4E0000]        <2> 	mov esi, timenscache
  6391 00004FB5 E88ECDFFFF          <2> 	call printquiet
  6392                              <2> 	
  6393 00004FBA E82D000000          <2> 	call time
  6394 00004FBF BE[B8510000]        <2> 	mov esi, timeshow
  6395 00004FC4 E87FCDFFFF          <2> 	call printquiet
  6396 00004FC9 BE[5E900000]        <2> 	mov esi, line
  6397 00004FCE E875CDFFFF          <2> 	call printquiet
  6398 00004FD3 BE[C1510000]        <2> 	mov esi, dateshow
  6399 00004FD8 E86BCDFFFF          <2> 	call printquiet
  6400 00004FDD BE[5E900000]        <2> 	mov esi, line
  6401 00004FE2 E861CDFFFF          <2> 	call printquiet
  6402 00004FE7 E9BC000000          <2> 	jmp findday
  6403                              <2> time:
  6404 00004FEC E84F010000          <2> 	call tstackput1
  6405 00004FF1 B00A                <2> 	mov al,10			;Get RTC register A
  6406 00004FF3 E879010000          <2> 	call tget1
  6407 00004FF8 A880                <2> 	test al,0x80			;Is update in progress?
  6408 00004FFA 75F0                <2> 	jne time				; yes, wait
  6409                              <2> 
  6410 00004FFC B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6411 00004FFE E86E010000          <2> 	call tget1
  6412 00005003 A2[AF510000]        <2> 	mov [RTCtimeSecond],al
  6413                              <2> 
  6414 00005008 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6415 0000500A E862010000          <2> 	call tget1
  6416 0000500F A2[B0510000]        <2> 	mov [RTCtimeMinute],al
  6417                              <2> 
  6418 00005014 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6419 00005016 E856010000          <2> 	call tget1
  6420 0000501B A2[B1510000]        <2> 	mov [RTCtimeHour],al
  6421                              <2> 
  6422 00005020 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6423 00005022 E84A010000          <2> 	call tget1
  6424 00005027 A2[B2510000]        <2> 	mov [RTCtimeDay],al
  6425                              <2> 
  6426 0000502C B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6427 0000502E E83E010000          <2> 	call tget1
  6428 00005033 A2[B3510000]        <2> 	mov [RTCtimeMonth],al
  6429                              <2> 
  6430 00005038 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6431 0000503A E832010000          <2> 	call tget1
  6432 0000503F A2[B4510000]        <2> 	mov [RTCtimeYear],al
  6433                              <2> 	
  6434 00005044 BE[B8510000]        <2> 	mov esi, timeshow
  6435 00005049 8A2D[B1510000]      <2> 	mov ch, [RTCtimeHour]
  6436 0000504F E828010000          <2> 	call tput1
  6437 00005054 8A2D[B0510000]      <2> 	mov ch, [RTCtimeMinute]
  6438 0000505A E81D010000          <2> 	call tput1
  6439 0000505F 8A2D[AF510000]      <2> 	mov ch, [RTCtimeSecond]
  6440 00005065 E812010000          <2> 	call tput1
  6441 0000506A BE[C1510000]        <2> 	mov esi, dateshow
  6442 0000506F 8A2D[B3510000]      <2> 	mov ch, [RTCtimeMonth]
  6443 00005075 E802010000          <2> 	call tput1
  6444 0000507A 8A2D[B2510000]      <2> 	mov ch, [RTCtimeDay]
  6445 00005080 E8F7000000          <2> 	call tput1
  6446 00005085 B520                <2> 	mov ch, 0x20
  6447 00005087 E8F0000000          <2> 	call tput1
  6448 0000508C 4E                  <2> 	dec esi
  6449 0000508D 8A2D[B4510000]      <2> 	mov ch, [RTCtimeYear]
  6450 00005093 E8E4000000          <2> 	call tput1
  6451 00005098 E8BD000000          <2> 	call tstackget1
  6452 0000509D C3                  <2> 	ret
  6453 0000509E BE[B8510000]        <2> 	mov esi, timeshow
  6454 000050A3 E8B2CCFFFF          <2> 	call print
  6455                              <2> ;;get day of week
  6456                              <2> ;;add these:
  6457                              <2> ;;century value
  6458                              <2> ;;last 2 digits of year
  6459                              <2> ;;last 2 digits of year right shifted twice
  6460                              <2> ;;month table value
  6461                              <2> ;;day of the month
  6462                              <2> ;;divide these by 7
  6463                              <2> ;;the remainder is the day
  6464                              <2> findday:
  6465 000050A8 31C0                <2> 	xor eax, eax
  6466                              <2> ;;first convert the values from BCD to hex
  6467 000050AA A0[B2510000]        <2> 	mov al, [RTCtimeDay]
  6468 000050AF E873000000          <2> 	call converttohex
  6469 000050B4 8825[B5510000]      <2> 	mov [dayhex], ah
  6470 000050BA A0[B3510000]        <2> 	mov al, [RTCtimeMonth]
  6471 000050BF E863000000          <2> 	call converttohex
  6472 000050C4 8825[B6510000]      <2> 	mov [monthhex], ah
  6473 000050CA A0[B4510000]        <2> 	mov al, [RTCtimeYear]
  6474 000050CF E853000000          <2> 	call converttohex
  6475 000050D4 8825[B7510000]      <2> 	mov [yearhex], ah
  6476 000050DA 31C0                <2> 	xor eax, eax
  6477 000050DC A0[B7510000]        <2> 	mov al, [yearhex]
  6478 000050E1 C0E802              <2> 	shr al, 2
  6479 000050E4 0205[B7510000]      <2> 	add al, [yearhex]
  6480 000050EA 0506000000          <2> 	add eax, 6
  6481 000050EF 31DB                <2> 	xor ebx, ebx
  6482 000050F1 8A1D[B6510000]      <2> 	mov bl, [monthhex]
  6483 000050F7 FECB                <2> 	dec bl
  6484 000050F9 81C3[D6510000]      <2> 	add ebx, month
  6485 000050FF 31C9                <2> 	xor ecx, ecx
  6486 00005101 8A0B                <2> 	mov cl, [ebx]
  6487 00005103 01C8                <2> 	add eax, ecx
  6488 00005105 8A0D[B5510000]      <2> 	mov cl, [dayhex]
  6489 0000510B 01C8                <2> 	add eax, ecx
  6490 0000510D 66BB0700            <2> 	mov bx, 7
  6491 00005111 31D2                <2> 	xor edx, edx
  6492 00005113 66F7F3              <2> 	div bx
  6493 00005116 C1E202              <2> 	shl edx, 2
  6494 00005119 81C2[E2510000]      <2> 	add edx, day
  6495 0000511F 8B32                <2> 	mov esi, [edx]
  6496 00005121 E834CCFFFF          <2> 	call print
  6497 00005126 C3                  <2> 	ret
  6498                              <2> 	
  6499                              <2> converttohex:
  6500 00005127 88C4                <2> 	mov ah, al
  6501 00005129 C0E804              <2> 	shr al, 4
  6502 0000512C C0E404              <2> 	shl ah, 4
  6503 0000512F C0EC04              <2> 	shr ah, 4
  6504 00005132 3C00                <2> 	cmp al, 0
  6505 00005134 7409                <2> 	je noconverttohex
  6506                              <2> converttohexlp:
  6507 00005136 80C40A              <2> 	add ah, 10
  6508 00005139 FEC8                <2> 	dec al
  6509 0000513B 3C00                <2> 	cmp al, 0
  6510 0000513D 75F7                <2> 	jne converttohexlp
  6511                              <2> noconverttohex:
  6512 0000513F C3                  <2> 	ret
  6513                              <2> 	
  6514                              <2> tstackput1:
  6515 00005140 8935[AB510000]      <2> 	mov [tstack + 20], esi
  6516 00005146 BE[97510000]        <2> 	mov esi, tstack
  6517 0000514B 8906                <2> 	mov [esi], eax
  6518 0000514D 895E04              <2> 	mov [esi + 4], ebx
  6519 00005150 894E08              <2> 	mov [esi + 8], ecx
  6520 00005153 89560C              <2> 	mov [esi + 12], edx
  6521 00005156 897E10              <2> 	mov [esi + 16], edi
  6522 00005159 C3                  <2> 	ret
  6523                              <2> 	
  6524                              <2> tstackget1:
  6525 0000515A BE[97510000]        <2> 	mov esi, tstack
  6526 0000515F 8B06                <2> 	mov eax, [esi]
  6527 00005161 8B5E04              <2> 	mov ebx, [esi + 4]
  6528 00005164 8B4E08              <2> 	mov ecx, [esi + 8]
  6529 00005167 8B560C              <2> 	mov edx, [esi + 12]
  6530 0000516A 8B7E10              <2> 	mov edi, [esi + 16]
  6531 0000516D 8B7614              <2> 	mov esi, [esi + 20]
  6532 00005170 C3                  <2> 	ret
  6533                              <2> 	
  6534                              <2> tget1:
  6535 00005171 66BA7000            <2> 	mov dx, 0x70
  6536 00005175 EE                  <2> 	out dx, al
  6537 00005176 6642                <2> 	inc dx
  6538 00005178 EC                  <2> 	in al, dx
  6539 00005179 664A                <2> 	dec dx
  6540 0000517B C3                  <2> 	ret
  6541                              <2> 	
  6542                              <2> tput1:
  6543 0000517C 66C1E904            <2> 	shr cx, 4
  6544 00005180 B030                <2> 	mov al, 48
  6545 00005182 00E8                <2> 	add al, ch
  6546 00005184 8806                <2> 	mov [esi], al
  6547 00005186 46                  <2> 	inc esi
  6548 00005187 B030                <2> 	mov al, 48
  6549 00005189 C0E904              <2> 	shr cl, 4
  6550 0000518C 00C8                <2> 	add al, cl
  6551 0000518E 8806                <2> 	mov [esi], al
  6552 00005190 81C602000000        <2> 	add esi, 2
  6553 00005196 C3                  <2> 	ret
  6554                              <2> 		
  6555 00005197 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6556 000051A0 000000000000000000- <2>
  6557 000051A9 000000000000        <2>
  6558 000051AF 00                  <2> 	RTCtimeSecond db 0
  6559 000051B0 00                  <2> 	RTCtimeMinute db 0
  6560 000051B1 00                  <2> 	RTCtimeHour db 0
  6561 000051B2 00                  <2> 	RTCtimeDay db 0
  6562 000051B3 00                  <2> 	RTCtimeMonth db 0
  6563 000051B4 00                  <2> 	RTCtimeYear db 0
  6564 000051B5 00                  <2> 	dayhex db 0
  6565 000051B6 00                  <2> 	monthhex db 0
  6566 000051B7 00                  <2> 	yearhex db 0
  6567 000051B8 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6568 000051C1 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6569 000051CA 302000              <2>
  6570                              <2> 	oldcentury:	;;from 1700 to 1900
  6571 000051CD 040200              <2> 	db 4,2,0
  6572                              <2> 	century:	;;from 2000 to 2500
  6573 000051D0 060402000604        <2> 	db 6,4,2,0,6,4
  6574                              <2> 	month:
  6575 000051D6 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6576 000051DF 000305              <2>
  6577                              <2> 	day:
  6578 000051E2 [FE510000]          <2> 	dd sunday
  6579 000051E6 [06520000]          <2> 	dd monday
  6580 000051EA [0E520000]          <2> 	dd tuesday
  6581 000051EE [17520000]          <2> 	dd wednesday
  6582 000051F2 [22520000]          <2> 	dd thursday
  6583 000051F6 [2C520000]          <2> 	dd friday
  6584 000051FA [34520000]          <2> 	dd saturday
  6585                              <2> sunday:
  6586 000051FE 53756E6461790A00    <2> 	db "Sunday",10,0
  6587                              <2> monday:
  6588 00005206 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6589                              <2> tuesday:
  6590 0000520E 547565736461790A00  <2> 	db "Tuesday",10,0
  6591                              <2> wednesday:
  6592 00005217 5765646E6573646179- <2> 	db "Wednesday",10,0
  6593 00005220 0A00                <2>
  6594                              <2> thursday:
  6595 00005222 54687572736461790A- <2> 	db "Thursday",10,0
  6596 0000522B 00                  <2>
  6597                              <2> friday:
  6598 0000522C 4672696461790A00    <2> 	db "Friday",10,0
  6599                              <2> saturday:
  6600 00005234 53617475726461790A- <2> 	db "Saturday",10,0
  6601 0000523D 00                  <2>
  6602                              <1> %include 'source/programs/turnoff.asm'
  6603 0000523E FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6604 00005247 00                  <2>
  6605                              <2> 	turnoff:
  6606 00005248 66BB[6352]          <2> 			mov bx, shutdown
  6607 0000524C 66891D[050D0000]    <2> 			mov [realmodeptr], bx
  6608 00005253 BB[8D520000]        <2> 			mov ebx, halt
  6609 00005258 891D[010D0000]      <2> 			mov [realmodereturn], ebx
  6610 0000525E E987B9FFFF          <2> 			jmp realmode
  6611                              <2> 
  6612                              <2> [BITS 16]
  6613                              <2> 		shutdown:
  6614 00005263 B453                <2> 			mov ah, 0x53
  6615 00005265 B004                <2> 			mov al, 4
  6616 00005267 31DB                <2> 			xor bx, bx
  6617 00005269 CD15                <2> 			int 0x15
  6618                              <2> 			
  6619 0000526B B453                <2> 			mov ah, 0x53
  6620 0000526D B001                <2> 			mov al, 1
  6621 0000526F 31DB                <2> 			xor bx, bx
  6622 00005271 CD15                <2> 			int 0x15
  6623                              <2> 			
  6624 00005273 B453                <2> 			mov ah, 0x53
  6625 00005275 B008                <2> 			mov al, 8
  6626 00005277 BB0100              <2> 			mov bx, 1
  6627 0000527A B90100              <2> 			mov cx, 1
  6628 0000527D CD15                <2> 			int 0x15
  6629                              <2> 			
  6630 0000527F B453                <2> 			mov ah, 0x53
  6631 00005281 B007                <2> 			mov al, 7
  6632 00005283 BB0100              <2> 			mov bx, 1
  6633 00005286 B90300              <2> 			mov cx, 3
  6634 00005289 CD15                <2> 			int 0x15
  6635 0000528B EBFE                <2> 			jmp $
  6636                              <2> 			[BITS 32]
  6637 0000528D EBFE                <2> halt: jmp $
  6638                              <1> %include 'source/programs/wait.asm'
  6639 0000528F FF2C7761697400      <2> db 255,44,"wait",0
  6640                              <2> waitkey:
  6641 00005296 E88DCFFFFF          <2> 		call getchar
  6642 0000529B C3                  <2> 		ret
  6643                              <1> %include 'source/programs/while.asm'
  6644 0000529C FF2C7768696C6500    <2> db 255,44,"while",0
  6645 000052A4 30C0                <2> whilecmd:  xor al, al
  6646 000052A6 3805[0CBB0000]      <2> 	cmp [BATCHISON], al
  6647 000052AC 0F8426E6FFFF        <2> 	je near notbatch
  6648 000052B2 8B35[08BB0000]      <2> 	mov esi, [BATCHPOS]
  6649 000052B8 81EE02000000        <2> 	sub esi, 2
  6650 000052BE 4E                  <2> whilefnd: dec esi
  6651 000052BF 8A06                <2> 	mov al, [esi]
  6652 000052C1 3C0A                <2> 	cmp al, 10
  6653 000052C3 0F840A000000        <2> 	je near whilefnd2
  6654 000052C9 3C00                <2> 	cmp al, 0
  6655 000052CB 0F8402000000        <2> 	je near whilefnd2
  6656 000052D1 EBEB                <2> 	jmp whilefnd
  6657                              <2> whilefnd2:
  6658 000052D3 46                  <2> 	inc esi
  6659 000052D4 8935[0EBB0000]      <2> 	mov [LOOPPOS], esi
  6660 000052DA C605[0DBB0000]01    <2> 	mov BYTE [LOOPON], 1
  6661 000052E1 BE[12CF0000]        <2> 	mov esi, buftxt
  6662 000052E6 BB[12CF0000]        <2> 	mov ebx, buftxt
  6663 000052EB 81C306000000        <2> 	add ebx, 6
  6664 000052F1 E999F0FFFF          <2> 	jmp chkeqsn
  6665                              <1> progend:		;programs end here	
  6666                              <1> batchprogend:
  6667                                  	%include "source/hardware.asm"
  6668                              <1> %ifdef gui.included
  6669                              <1> 	%include "source/drivers/video/vesa.asm"
  6670                              <2> [BITS 16]
  6671                              <2> guiswitch:
  6672 000052F6 81F90000            <2> 	cmp cx, 0
  6673 000052FA 750B                <2> 	jne guiswitchdefnum
  6674 000052FC B81200              <2> 	mov ax, 12h
  6675 000052FF 31DB                <2> 	xor bx, bx
  6676 00005301 CD10                <2> 	int 10h
  6677 00005303 E85100              <2> 	call guiloadagain
  6678                              <2> guiswitchnocando:
  6679 00005306 C3                  <2> 	ret	;return without switching as mode number is bad
  6680                              <2> guiswitchdefnum:	;switch to a defined mode number
  6681 00005307 B8004F              <2> 	mov ax, 0x4F00
  6682 0000530A BF[D454]            <2> 	mov di, VBEMODEBLOCK
  6683 0000530D CD10                <2> 	int 10h
  6684 0000530F BE[F654]            <2> 	mov si, reserved
  6685 00005312 81EE0200            <2> 	sub si, 2
  6686                              <2> .loop:
  6687 00005316 81C60200            <2> 	add si, 2
  6688 0000531A 81FE[D455]          <2> 	cmp si, oemdata
  6689 0000531E 74E6                <2> 	je guiswitchnocando
  6690 00005320 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6691 00005324 74E0                <2> 	je guiswitchnocando
  6692 00005326 390C                <2> 	cmp [si], cx
  6693 00005328 75EC                <2> 	jne .loop
  6694 0000532A 8936[2E54]          <2> 	mov [videomodecache], si
  6695 0000532E 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6696 00005332 B8014F              <2> 	mov ax, 0x4F01
  6697 00005335 BF[D456]            <2> 	mov di, VBEMODEINFOBLOCK
  6698 00005338 890E[2C54]          <2> 	mov [vesamode], cx
  6699 0000533C CD10                <2> 	int 10h
  6700 0000533E E9CB00              <2> 	jmp selectedvesa
  6701                              <2> guiload:
  6702 00005341 BE[AC54]            <2> 	mov si, bootmsg
  6703 00005344 E830AD              <2> 	call printrm
  6704 00005347 31C0                <2> 	xor ax, ax
  6705 00005349 CD16                <2> 	int 16h
  6706 0000534B 3C79                <2> 	cmp al, "y"
  6707 0000534D 0F85E0AC            <2> 	jne near vgaset
  6708 00005351 BE[5D90]            <2> 	mov si, crlf
  6709 00005354 E820AD              <2> 	call printrm
  6710                              <2> guiloadagain:
  6711 00005357 B8004F              <2> 	mov ax, 04F00h
  6712 0000535A BF[D454]            <2> 	mov di, VBEMODEBLOCK
  6713 0000535D CD10                <2> 	int 10h
  6714 0000535F BE[F654]            <2> 	mov si, reserved
  6715 00005362 81EE0200            <2> 	sub si, 2
  6716                              <2> findvideomodes:
  6717 00005366 81C60200            <2> 	add si, 2
  6718 0000536A 8B0C                <2> 	mov cx, [si]
  6719 0000536C 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6720 00005370 0F840A00            <2> 	je near nextvmode
  6721 00005374 81FE[D455]          <2> 	cmp si, oemdata
  6722 00005378 0F83B5AC            <2> 	jae near vgaset	;;kill if no valid list is found
  6723 0000537C EBE8                <2> 	jmp findvideomodes 	
  6724                              <2> ;;debug,shows vmodes available
  6725                              <2> nextvmode:
  6726 0000537E 81EE0200            <2> 	sub si, 2
  6727 00005382 81FE[F654]          <2> 	cmp si, reserved
  6728 00005386 0F82CDFF            <2> 	jb near guiloadagain
  6729 0000538A 8B0C                <2> 	mov cx, [si]
  6730 0000538C 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6731 00005390 0F84EAFF            <2> 	je near nextvmode
  6732 00005394 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6733 00005398 B8014F              <2> 	mov ax, 04F01h
  6734 0000539B BF[D456]            <2> 	mov di, VBEMODEINFOBLOCK
  6735 0000539E 890E[2C54]          <2> 	mov [vesamode], cx
  6736 000053A2 CD10                <2> 	int 10h
  6737 000053A4 A0[ED56]            <2> 	mov al, [bitsperpixel]
  6738 000053A7 3C10                <2> 	cmp al, 16
  6739 000053A9 75D3                <2> 	jne nextvmode
  6740 000053AB 8936[2E54]          <2> 	mov [videomodecache], si
  6741 000053AF 84E4                <2> 	test ah, ah
  6742 000053B1 0F842200            <2> 	jz near setvesamode
  6743 000053B5 EBC7                <2> 	jmp nextvmode
  6744 000053B7 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6745 000053C0 20766964656F206D6F- <2>
  6746 000053C9 6465204F4B3F28792F- <2>
  6747 000053D2 6E290D0A00          <2>
  6748                              <2> setvesamode:
  6749 000053D7 8B0E[E656]          <2> 	mov cx, [resolutionx]
  6750 000053DB E85900              <2> 	call decshow
  6751 000053DE B078                <2> 	mov al, "x"
  6752 000053E0 E8C100              <2> 	call char
  6753 000053E3 8B0E[E856]          <2> 	mov cx, [resolutiony]
  6754 000053E7 E84D00              <2> 	call decshow
  6755 000053EA B040                <2> 	mov al, "@"
  6756 000053EC E8B500              <2> 	call char
  6757 000053EF 31C9                <2> 	xor cx, cx
  6758 000053F1 8A0E[ED56]          <2> 	mov cl, [bitsperpixel]
  6759 000053F5 E83F00              <2> 	call decshow
  6760 000053F8 BE[B753]            <2> 	mov si, isthisvideook
  6761 000053FB E879AC              <2> 	call printrm
  6762 000053FE 31C0                <2> 	xor ax, ax
  6763 00005400 CD16                <2> 	int 16h
  6764 00005402 8B36[2E54]          <2> 	mov si, [videomodecache]
  6765 00005406 3C79                <2> 	cmp al, "y"
  6766 00005408 0F8572FF            <2> 	jne near nextvmode
  6767                              <2> selectedvesa:
  6768 0000540C 8B16[E656]          <2> 	mov dx, [resolutionx]
  6769 00005410 01D2                <2> 	add dx, dx
  6770 00005412 8916[D457]          <2> 	mov [resolutionx2], dx
  6771 00005416 31D2                <2> 	xor dx, dx
  6772 00005418 31C9                <2> 	xor cx, cx
  6773 0000541A B8024F              <2> 	mov ax, 04F02h
  6774 0000541D 8B1E[2C54]          <2> 	mov bx, [vesamode]
  6775 00005421 CD10                <2> 	int 10h		;;enter VESA mode
  6776 00005423 C606[48A2]01        <2> 	mov byte [guion], 1
  6777 00005428 E816AC              <2> 	call getmemorysize;get the memory map after the video is initialized
  6778 0000542B C3                  <2> 	ret
  6779                              <2> 	
  6780 0000542C 0000                <2> vesamode dw 0
  6781 0000542E 0000                <2> videomodecache dw 0
  6782                              <2> 
  6783 00005430 0000000000          <2> dcnm db 0,0,0,0,0
  6784 00005435 0000                <2> dcnmend db 0,0
  6785                              <2> 
  6786                              <2> 
  6787                              <2> decshow:
  6788 00005437 BE[3054]            <2> 	mov si, dcnm
  6789                              <2> decclear:
  6790 0000543A B030                <2> 	mov al, "0"
  6791 0000543C 8804                <2> 	mov [si], al
  6792 0000543E 46                  <2> 	inc si
  6793 0000543F 81FE[3554]          <2> 	cmp si, dcnmend
  6794 00005443 76F5                <2> 	jbe decclear
  6795 00005445 4E                  <2> 	dec si
  6796 00005446 E81500              <2> 	call convertrm
  6797 00005449 BE[3054]            <2> 	mov si, dcnm
  6798                              <2> dectst:
  6799 0000544C 8A04                <2> 	mov al, [si]
  6800 0000544E 46                  <2> 	inc si
  6801 0000544F 81FE[3554]          <2> 	cmp si, dcnmend
  6802 00005453 7704                <2> 	ja dectstend
  6803 00005455 3C30                <2> 	cmp al, "0"
  6804 00005457 76F3                <2> 	jbe dectst
  6805                              <2> dectstend:
  6806 00005459 4E                  <2> 	dec si
  6807 0000545A E81AAC              <2> 	call printrm
  6808 0000545D C3                  <2> 	ret
  6809                              <2> 	
  6810                              <2> 	
  6811                              <2> convertrm:
  6812 0000545E 4E                  <2> 	dec si
  6813 0000545F 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6814                              <2> cnvrtrm:
  6815 00005461 89DE                <2> 	mov si, bx
  6816 00005463 81EE0300            <2> 	sub si, 3
  6817 00005467 46                  <2> ten3rm:	inc si
  6818 00005468 81F9E803            <2> 	cmp cx, 1000
  6819 0000546C 7208                <2> 	jb ten2rm
  6820 0000546E 81E9E803            <2> 	sub cx, 1000
  6821 00005472 FE04                <2> 	inc byte [si]
  6822 00005474 EBEB                <2> 	jmp cnvrtrm
  6823 00005476 46                  <2> ten2rm:	inc si
  6824 00005477 81F96400            <2> 	cmp cx, 100
  6825 0000547B 7208                <2> 	jb ten1rm
  6826 0000547D 81E96400            <2> 	sub cx, 100
  6827 00005481 FE04                <2> 	inc byte [si]
  6828 00005483 EBDC                <2> 	jmp cnvrtrm
  6829 00005485 46                  <2> ten1rm:	inc si
  6830 00005486 81F90A00            <2> 	cmp cx, 10
  6831 0000548A 7208                <2> 	jb ten0rm
  6832 0000548C 81E90A00            <2> 	sub cx, 10
  6833 00005490 FE04                <2> 	inc byte [si]
  6834 00005492 EBCD                <2> 	jmp cnvrtrm
  6835 00005494 46                  <2> ten0rm:	inc si
  6836 00005495 81F90100            <2> 	cmp cx, 1
  6837 00005499 7208                <2> 	jb tendnrm
  6838 0000549B 81E90100            <2> 	sub cx, 1
  6839 0000549F FE04                <2> 	inc byte [si]
  6840 000054A1 EBBE                <2> 	jmp cnvrtrm
  6841                              <2> tendnrm:
  6842 000054A3 C3                  <2> 	ret
  6843                              <2> 
  6844                              <2>     char: 		    ;char must be in al
  6845 000054A4 BB0700              <2>        mov bx, 07
  6846 000054A7 B40E                <2> 	   mov ah, 0Eh
  6847 000054A9 CD10                <2> 	   int 10h
  6848 000054AB C3                  <2> 	   ret
  6849                              <2> 
  6850 000054AC 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6851 000054B5 20746865204755493F- <2>
  6852 000054BE 28792F6E2900        <2>
  6853                              <2> 
  6854                              <2> 
  6855                              <2> mcursor:
  6856 000054C4 01                  <2> 	db	00000001b
  6857 000054C5 81                  <2> 	db	10000001b
  6858 000054C6 C1                  <2> 	db	11000001b
  6859 000054C7 E1                  <2> 	db	11100001b
  6860 000054C8 F1                  <2> 	db	11110001b
  6861 000054C9 F9                  <2> 	db	11111001b
  6862 000054CA FD                  <2> 	db	11111101b
  6863 000054CB FF                  <2> 	db	11111111b
  6864 000054CC F9                  <2> 	db	11111001b
  6865 000054CD B9                  <2> 	db	10111001b
  6866 000054CE 39                  <2> 	db	00111001b
  6867 000054CF 1C                  <2> 	db	00011100b
  6868 000054D0 1C                  <2> 	db	00011100b
  6869 000054D1 0E                  <2> 	db	00001110b
  6870 000054D2 0E                  <2> 	db	00001110b
  6871 000054D3 0C                  <2> 	db	00001100b
  6872                              <2> mcursorend:
  6873                              <2> 
  6874                              <2> 
  6875                              <2> VBEMODEBLOCK:
  6876 000054D4 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6877 000054D8 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6878 000054DA 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6879 000054DE 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6880 000054E2 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6881 000054E6 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6882 000054E8 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6883 000054EA 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6884 000054EE 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6885 000054F2 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6886 000054F6 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6887 000055D4 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6888                              <2> 
  6889                              <2> VBEMODEINFOBLOCK:
  6890                              <2> ;Mandatory information for all VBE revision
  6891 000056D4 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6892 000056D6 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6893 000056D7 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6894 000056D8 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6895 000056DA 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6896 000056DC 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6897 000056DE 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6898 000056E0 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6899 000056E4 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6900                              <2> 
  6901                              <2> ;Mandatory information for VBE 1.2 and above
  6902 000056E6 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6903 000056E8 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6904 000056EA 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6905 000056EB 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6906 000056EC 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6907 000056ED 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6908 000056EE 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6909 000056EF 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6910 000056F0 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6911 000056F1 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6912 000056F2 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6913                              <2> 
  6914                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6915 000056F3 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6916 000056F4 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6917 000056F5 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6918 000056F6 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6919 000056F7 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6920 000056F8 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6921 000056F9 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6922 000056FA 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6923 000056FB 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6924                              <2> 
  6925                              <2> ;Mandatory information for VBE 2.0 and above
  6926 000056FC 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6927 00005700 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6928 00005704 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6929 00005706 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6930                              <2> 
  6931 000057D4 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6932                              <2> VBEEND:
  6933                              <2> [BITS 32]
  6934                              <1> 	%include "source/drivers/input/mouse.asm"
  6935 000057D8 00                  <2> mousedisabled db 0
  6936                              <2> 	
  6937                              <2> 	cursorgui:
  6938 000057D9 803D[38830000]01    <2> 		cmp byte [mouseon], 1
  6939 000057E0 0F8432000000        <2> 		je near mousedaemon
  6940 000057E6 803D[48A20000]00    <2> 		cmp byte [guion], 0
  6941 000057ED 0F8415070000        <2> 		je near entdown
  6942                              <2> 	initmouse:
  6943 000057F3 803D[48A20000]00    <2> 		cmp byte [guion], 0
  6944 000057FA 7405                <2> 		je noswmsposinit
  6945 000057FC E805130000          <2> 		call switchmousepos2
  6946                              <2> 	noswmsposinit:
  6947 00005801 E85D020000          <2> 	  	call PS2SET
  6948 00005806 E886020000          <2> 		call ACTMOUS
  6949 0000580B C605[38830000]01    <2> 		mov byte [mouseon],1
  6950 00005812 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6951                              <2> 		;call GETB
  6952                              <2> 				;;If the bytes are mixed up,
  6953                              <2> 				;;remove this line or add another of this line.
  6954                              <2> 	nomouse:
  6955 00005817 C3                  <2> 		ret
  6956                              <2> 		
  6957                              <2> 	mousedaemon:
  6958 00005818 803D[38830000]01    <2> 		cmp byte [mouseon], 1
  6959 0000581F 75D2                <2> 		jne initmouse
  6960 00005821 E464                <2> 		in al, 64h ; Status
  6961 00005823 A820                <2> 		test al, 20h ; PS2-Mouse?
  6962 00005825 0F8502000000        <2> 		jnz near moused
  6963 0000582B F4                  <2> 		hlt
  6964 0000582C C3                  <2> 		ret
  6965                              <2> 	moused:
  6966 0000582D 803D[D8570000]01    <2> 		cmp byte [mousedisabled], 1
  6967 00005834 74E1                <2> 		je nomouse
  6968 00005836 E87B020000          <2> 		  call GETB
  6969 0000583B 88C3                <2> 		  mov  bl, al
  6970 0000583D 80E301              <2> 		  and  bl, 1
  6971 00005840 881D[DB5A0000]      <2> 		  mov  BYTE [LBUTTON], bl
  6972 00005846 88C3                <2> 		  mov  bl, al
  6973 00005848 80E302              <2> 		  and  bl, 2
  6974 0000584B D0EB                <2> 		  shr  bl, 1
  6975 0000584D 881D[DC5A0000]      <2> 		  mov  BYTE [RBUTTON], bl
  6976 00005853 88C3                <2> 		  mov  bl, al
  6977 00005855 80E304              <2> 		  and  bl, 4
  6978 00005858 C0EB02              <2> 		  shr  bl, 2
  6979 0000585B 881D[DD5A0000]      <2> 		  mov  BYTE [MBUTTON], bl
  6980 00005861 E850020000          <2> 		  call GETB
  6981 00005866 A2[DE5A0000]        <2> 		  mov  BYTE [XCOORD], al
  6982 0000586B E846020000          <2> 		  call GETB
  6983 00005870 A2[DF5A0000]        <2> 		  mov  BYTE [YCOORD], al
  6984                              <2> 
  6985                              <2> 	showpixelcursor:
  6986 00005875 668B15[CA590000]    <2> 		mov dx, [mousecursorposition]
  6987 0000587C 668B0D[CC590000]    <2> 		mov cx, [mousecursorposition + 2]
  6988 00005883 668915[C6590000]    <2> 		mov [lastmouseposition], dx
  6989 0000588A 66890D[C8590000]    <2> 		mov [lastmouseposition + 2], cx
  6990 00005891 A0[DE5A0000]        <2> 		mov al, [XCOORD]
  6991 00005896 3C80                <2> 		cmp al, 128
  6992 00005898 730C                <2> 		jae subxcoord
  6993 0000589A 00C0                <2> 		add al, al
  6994 0000589C 30E4                <2> 		xor ah, ah
  6995 0000589E 6601C2              <2> 		add dx, ax
  6996 000058A1 E90B000000          <2> 		jmp subxcoorddn
  6997                              <2> 	subxcoord:
  6998 000058A6 00C0                <2> 		add al, al
  6999 000058A8 30DB                <2> 		xor bl, bl
  7000 000058AA 28C3                <2> 		sub bl, al
  7001 000058AC 30FF                <2> 		xor bh, bh
  7002 000058AE 6629DA              <2> 		sub dx, bx
  7003                              <2> 	subxcoorddn:
  7004 000058B1 8A1D[DF5A0000]      <2> 		mov bl, [YCOORD]
  7005 000058B7 30C0                <2> 		xor al, al
  7006 000058B9 28D8                <2> 		sub al, bl
  7007 000058BB 3C80                <2> 		cmp al, 128
  7008 000058BD 730A                <2> 		jae subycoord
  7009 000058BF 30E4                <2> 		xor ah, ah
  7010 000058C1 6601C1              <2> 		add cx, ax
  7011 000058C4 E909000000          <2> 		jmp subycoorddn
  7012                              <2> 	subycoord:
  7013 000058C9 30DB                <2> 		xor bl, bl
  7014 000058CB 28C3                <2> 		sub bl, al
  7015 000058CD 30FF                <2> 		xor bh, bh
  7016 000058CF 6629D9              <2> 		sub cx, bx
  7017                              <2> 	subycoorddn:
  7018 000058D2 6681FA204E          <2> 		cmp dx, 20000
  7019 000058D7 7603                <2> 		jbe nooriginx2
  7020 000058D9 6631D2              <2> 		xor dx, dx
  7021                              <2> 	nooriginx2:
  7022 000058DC 6681F9204E          <2> 		cmp cx, 20000
  7023 000058E1 7603                <2> 		jbe nooriginy2
  7024 000058E3 6631C9              <2> 		xor cx, cx
  7025                              <2> 	nooriginy2:
  7026 000058E6 6681FA0000          <2> 		cmp dx, 0
  7027 000058EB 7415                <2> 		je nofixxcolumn2
  7028 000058ED 663B15[D4570000]    <2> 		cmp dx, [resolutionx2]
  7029 000058F4 720C                <2> 		jb nofixxcolumn2
  7030 000058F6 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  7031 000058FD 6681EA0200          <2> 		sub dx, 2
  7032                              <2> 	nofixxcolumn2:
  7033 00005902 6681F90000          <2> 		cmp cx, 0
  7034 00005907 7415                <2> 		je nofixyrow2
  7035 00005909 663B0D[E8560000]    <2> 		cmp cx, [resolutiony]
  7036 00005910 720C                <2> 		jb nofixyrow2
  7037 00005912 668B0D[E8560000]    <2> 		mov cx, [resolutiony]
  7038 00005919 6681E90100          <2> 		sub cx, 1
  7039                              <2> 	nofixyrow2:
  7040 0000591E 668915[CA590000]    <2> 		mov [mousecursorposition], dx
  7041 00005925 66890D[CC590000]    <2> 		mov [mousecursorposition + 2], cx
  7042 0000592C 803D[48A20000]00    <2> 		cmp byte [guion], 0
  7043 00005933 0F8495000000        <2> 		je near termmouse
  7044 00005939 E868110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7045 0000593E 803D[DB5A0000]01    <2> 		cmp byte [LBUTTON], 1
  7046 00005945 0F84B0210000        <2> 		je near clickicon
  7047 0000594B 803D[DC5A0000]01    <2> 		cmp byte [RBUTTON], 1
  7048 00005952 0F84A3210000        <2> 		je near clickicon
  7049 00005958 A0[E87A0000]        <2> 		mov al, [pbutton]
  7050 0000595D C705[EB7A0000]0000- <2> 		mov dword [dragging], 0
  7051 00005965 0000                <2>
  7052 00005967 3C00                <2> 		cmp al, 0
  7053 00005969 740F                <2> 		je nopreviousbutton
  7054 0000596B E8DE100000          <2> 		call clearmousecursor
  7055 00005970 E845140000          <2> 		call reloadallgraphics
  7056                              <2> 	windowtermcopyend:
  7057 00005975 E88C110000          <2> 		call switchmousepos2
  7058                              <2> 	nopreviousbutton:
  7059 0000597A 30C0                <2> 		xor al, al
  7060 0000597C A2[E87A0000]        <2> 		mov [pbutton], al
  7061 00005981 A2[4F800000]        <2> 		mov [windrag], al
  7062 00005986 A0[DB5A0000]        <2> 		mov al, [LBUTTON]
  7063 0000598B A2[E97A0000]        <2> 		mov [pLBUTTON], al
  7064 00005990 A0[DC5A0000]        <2> 		mov al, [RBUTTON]
  7065 00005995 A2[EA7A0000]        <2> 		mov [pRBUTTON], al
  7066 0000599A 31D2                <2> 		xor edx, edx
  7067 0000599C 668B15[CA590000]    <2> 		mov dx, [mousecursorposition]
  7068 000059A3 668B0D[CC590000]    <2> 		mov cx, [mousecursorposition + 2]
  7069 000059AA 66BB18C7            <2> 		mov bx, 1100011100011000b
  7070 000059AE 30E4                <2> 		xor ah, ah
  7071 000059B0 B0FE                <2> 		mov al, 254
  7072 000059B2 C605[E57A0000]01    <2> 		mov byte [showcursorfonton], 1
  7073 000059B9 E8C3190000          <2> 		call showfontvesa
  7074 000059BE C605[E57A0000]00    <2> 		mov byte [showcursorfonton], 0
  7075 000059C5 C3                  <2> 		ret
  7076                              <2> 
  7077 000059C6 00000000            <2> lastmouseposition dw 0,0
  7078 000059CA 00000000            <2> mousecursorposition dw 0,0	
  7079                              <2> 
  7080                              <2> termmouse:
  7081 000059CE BE[28D60000]        <2> 		mov esi, videobuf
  7082 000059D3 31D2                <2> 		xor edx, edx
  7083 000059D5 668B15[C6590000]    <2> 		mov dx, [lastmouseposition]
  7084 000059DC 668B0D[C8590000]    <2> 		mov cx, [lastmouseposition + 2]
  7085 000059E3 66A1[615A0000]      <2> 		mov ax, [cursorcache]
  7086 000059E9 663D0000            <2> 		cmp ax, 0
  7087 000059ED 7425                <2> 		je nocopycursorcache
  7088 000059EF 66C1E104            <2> 		shl cx, 4
  7089 000059F3 66C1E203            <2> 		shl dx, 3
  7090 000059F7 01D6                <2> 		add esi, edx
  7091 000059F9 6631D2              <2> 		xor dx, dx
  7092 000059FC 8A15[76240000]      <2> 		mov dl, [charxy]
  7093 00005A02 6641                <2> 		inc cx
  7094                              <2> termmousecplp1:
  7095 00005A04 01D6                <2> 		add esi, edx
  7096 00005A06 6649                <2> 		dec cx
  7097 00005A08 6681F90000          <2> 		cmp cx, 0
  7098 00005A0D 75F5                <2> 		jne termmousecplp1
  7099 00005A0F 29D6                <2> 		sub esi, edx
  7100 00005A11 668906              <2> 		mov [esi], ax
  7101                              <2> nocopycursorcache:
  7102 00005A14 BE[28D60000]        <2> 		mov esi, videobuf
  7103 00005A19 31D2                <2> 		xor edx, edx
  7104 00005A1B 668B15[CA590000]    <2> 		mov dx, [mousecursorposition]
  7105 00005A22 668B0D[CC590000]    <2> 		mov cx, [mousecursorposition + 2]
  7106 00005A29 66C1E104            <2> 		shl cx, 4
  7107 00005A2D 66C1E203            <2> 		shl dx, 3
  7108 00005A31 01D6                <2> 		add esi, edx
  7109 00005A33 6631D2              <2> 		xor dx, dx
  7110 00005A36 8A15[76240000]      <2> 		mov dl, [charxy]
  7111 00005A3C 6641                <2> 		inc cx
  7112                              <2> termmousecplp2:
  7113 00005A3E 01D6                <2> 		add esi, edx
  7114 00005A40 6649                <2> 		dec cx
  7115 00005A42 6681F90000          <2> 		cmp cx, 0
  7116 00005A47 75F5                <2> 		jne termmousecplp2
  7117 00005A49 29D6                <2> 		sub esi, edx
  7118 00005A4B 668B06              <2> 		mov ax, [esi]
  7119 00005A4E 66A3[615A0000]      <2> 		mov [cursorcache], ax
  7120 00005A54 B080                <2> 		mov al, 128
  7121 00005A56 B407                <2> 		mov ah, 7
  7122 00005A58 668906              <2> 		mov [esi], ax
  7123 00005A5B E8ACCCFFFF          <2> 		call termcopy
  7124 00005A60 C3                  <2> 		ret
  7125 00005A61 0000                <2> cursorcache db 0,0
  7126                              <2> 
  7127                              <2> PS2SET:
  7128 00005A63 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7129 00005A65 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7130 00005A67 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7131 00005A6C C3                  <2> ret
  7132                              <2> 
  7133                              <2> CHKPRT:
  7134 00005A6D 66B96400            <2>   mov  cx, 100
  7135                              <2>  .again:
  7136 00005A71 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7137 00005A73 A802                <2>   test al, 2		; Check if input buffer is empty
  7138 00005A75 7402                <2>   je .go
  7139 00005A77 E2F8                <2>   loop .again
  7140                              <2>  .go:
  7141 00005A79 C3                  <2> ret
  7142                              <2> 
  7143                              <2> WMOUS:
  7144 00005A7A B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7145 00005A7C E664                <2>   out  0x64, al		; write to keyboardcontroller
  7146 00005A7E E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7147 00005A83 C3                  <2> ret
  7148                              <2> 
  7149                              <2> MBUFFUL:
  7150 00005A84 66B96400            <2>   mov cx, 100
  7151                              <2>  .mn:
  7152 00005A88 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7153 00005A8A A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7154 00005A8C 7402                <2>   jz  .mnn
  7155 00005A8E E2F8                <2>   loop .mn
  7156                              <2>  .mnn:
  7157 00005A90 C3                  <2> ret
  7158                              <2> 
  7159                              <2> 
  7160                              <2> ACTMOUS:
  7161 00005A91 E8E4FFFFFF          <2>   call WMOUS
  7162 00005A96 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7163 00005A98 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7164 00005A9A E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7165 00005A9F E801000000          <2>   call CHKMOUS		; check if a byte is available
  7166 00005AA4 C3                  <2> ret
  7167                              <2> 
  7168                              <2> CHKMOUS:
  7169 00005AA5 B300                <2>   mov  bl, 0
  7170 00005AA7 66B96400            <2>   mov cx, 100
  7171                              <2>  .vrd:
  7172 00005AAB E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7173 00005AAD A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7174 00005AAF 7504                <2>   jnz .yy
  7175 00005AB1 E2F8                <2>   loop .vrd
  7176 00005AB3 B301                <2>   mov  bl, 1
  7177                              <2>  .yy:
  7178 00005AB5 C3                  <2> ret
  7179                              <2> 
  7180                              <2> GETB:
  7181                              <2>  .cagain:
  7182 00005AB6 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7183 00005ABB 08DB                <2>   or bl, bl
  7184 00005ABD 75F7                <2>   jnz .cagain
  7185 00005ABF B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7186 00005AC1 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7187 00005AC3 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7188 00005AC8 6631C0              <2>   xor  ax, ax
  7189 00005ACB E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7190 00005ACD 88C2                <2>   mov  dl, al
  7191 00005ACF B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7192 00005AD1 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7193 00005AD3 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7194 00005AD8 88D0                <2>   mov  al, dl
  7195 00005ADA C3                  <2> ret
  7196                              <2> 
  7197 00005ADB 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7198 00005ADC 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7199 00005ADD 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7200 00005ADE 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7201 00005ADF 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7202                              <1> %endif
  7203                              <1> %include "source/drivers/sound/pcspkr.asm"
  7204                              <2> ;PC Speaker Drivers
  7205                              <2> PCSpeakerRAW:
  7206 00005AE0 60                  <2> 	pusha
  7207                              <2> nosoundrep:
  7208 00005AE1 8B35[68020000]      <2> 	mov esi, [soundpos]
  7209 00005AE7 31C9                <2> 	xor ecx, ecx
  7210 00005AE9 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  7211 00005AF0 6681F90000          <2> 	cmp cx, 0
  7212 00005AF5 0F8548000000        <2> 	jne near donesetpitch
  7213 00005AFB 668B0E              <2> 	mov cx, [esi]
  7214 00005AFE 668B5E02            <2> 	mov bx, [esi + 2]
  7215 00005B02 66890D[66020000]    <2> 	mov [soundrepititions], cx
  7216 00005B09 81C604000000        <2> 	add esi, 4
  7217 00005B0F 8935[68020000]      <2> 	mov [soundpos], esi
  7218 00005B15 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  7219 00005B1B 7735                <2> 	ja stopsound
  7220 00005B1D 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  7221 00005B25 00                  <2>
  7222 00005B26 74B9                <2> 	je nosoundrep
  7223 00005B28 6681FB0000          <2> 	cmp bx, 0
  7224 00005B2D 740F                <2> 	je nosoundplay
  7225 00005B2F E840000000          <2> 	call setpitch
  7226 00005B34 E849000000          <2> 	call startsound
  7227 00005B39 E905000000          <2> 	jmp donesetpitch
  7228                              <2> nosoundplay:
  7229 00005B3E E846000000          <2> 	call killsound
  7230                              <2> donesetpitch:
  7231 00005B43 6649                <2> 	dec cx
  7232 00005B45 66890D[66020000]    <2> 	mov [soundrepititions], cx
  7233 00005B4C 61                  <2> 	popa
  7234 00005B4D E953A7FFFF          <2> 	jmp timerinterrupt
  7235                              <2> stopsound:
  7236 00005B52 31C0                <2> 	xor eax, eax
  7237 00005B54 66A3[66020000]      <2> 	mov [soundrepititions], ax
  7238 00005B5A A2[65020000]        <2> 	mov [soundon], al
  7239 00005B5F A3[68020000]        <2> 	mov [soundpos], eax
  7240 00005B64 A3[6C020000]        <2> 	mov [soundendpos], eax
  7241 00005B69 E81B000000          <2> 	call killsound
  7242 00005B6E 61                  <2> 	popa
  7243 00005B6F E931A7FFFF          <2> 	jmp timerinterrupt
  7244                              <2> 
  7245                              <2> 
  7246                              <2> setpitch:
  7247 00005B74 B0B6                <2> 	mov al, 0xB6
  7248 00005B76 E643                <2> 	out 0x43, al
  7249 00005B78 6689D8              <2> 	mov ax, bx
  7250 00005B7B E642                <2> 	out 0x42, al
  7251 00005B7D 88E0                <2> 	mov al, ah
  7252 00005B7F E642                <2> 	out 0x42, al
  7253 00005B81 C3                  <2> 	ret
  7254                              <2> startsound:
  7255 00005B82 E461                <2> 	in al, 0x61
  7256 00005B84 0C03                <2> 	or al, 3
  7257 00005B86 E661                <2> 	out 0x61, al
  7258 00005B88 C3                  <2> 	ret
  7259                              <2> killsound:
  7260 00005B89 E461                <2> 	in al, 0x61
  7261 00005B8B 24FC                <2> 	and al, 0xFC
  7262 00005B8D E661                <2> 	out 0x61, al
  7263 00005B8F C3                  <2> 	ret
  7264                              <2> 	
  7265                              <1> %ifdef sound.included
  7266                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7267                              <2> ;Sound Blaster Drivers
  7268                              <2> sblaster:
  7269                              <2> .init:
  7270 00005B90 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7271 00005B95 A2[C65D0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7272 00005B9A 3C00                <2> 		cmp al, 0
  7273 00005B9C 7418                <2> 		je .noinit
  7274 00005B9E B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7275 00005BA0 E8FB010000          <2> 		call WriteDSP
  7276 00005BA5 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7277 00005BA7 E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7278 00005BAC BE[B75B0000]        <2> 		mov esi, .initmsg
  7279 00005BB1 E8A4C1FFFF          <2> 		call print
  7280                              <2> .noinit:
  7281 00005BB6 C3                  <2> 		ret
  7282 00005BB7 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7283 00005BC0 74657220496E697469- <2>
  7284 00005BC9 616C697A65640A00    <2>
  7285                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7286 00005BD1 813D[B05D0000]0000- <2> 	cmp dword [Length0], 0
  7287 00005BD9 0000                <2>
  7288 00005BDB 0F8462000000        <2> 	je near .done
  7289 00005BE1 FF0D[B05D0000]      <2> 	dec dword [Length0]
  7290 00005BE7 E908000000          <2> 	jmp .notodd
  7291                              <2> .oddlength:
  7292 00005BEC 31C9                <2> 	xor ecx, ecx
  7293 00005BEE 880D[AF5D0000]      <2> 	mov [OddLength], cl
  7294                              <2> .notodd:
  7295 00005BF4 8B35[B65D0000]      <2> 	mov esi, [NextMemLoc]
  7296 00005BFA 31C9                <2> 	xor ecx, ecx
  7297 00005BFC 668B0D[B45D0000]    <2> 	mov cx, [Length1]
  7298 00005C03 D1E9                <2> 	shr ecx, 1
  7299 00005C05 6641                <2> 	inc cx
  7300 00005C07 31DB                <2> 	xor ebx, ebx
  7301 00005C09 668B1D[BE5D0000]    <2> 	mov bx, [SegLoc]
  7302 00005C10 6601CB              <2> 	add bx, cx
  7303 00005C13 66891D[BE5D0000]    <2> 	mov [SegLoc], bx
  7304 00005C1A 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7305 00005C20 8935[BA5D0000]      <2> 	mov [MemLoc], esi
  7306 00005C26 89C8                <2> 	mov eax, ecx
  7307 00005C28 01F0                <2> 	add eax, esi
  7308 00005C2A A3[B65D0000]        <2> 	mov [NextMemLoc], eax
  7309 00005C2F E833000000          <2> 	call DMACopy
  7310                              <2> 	;call DMAPlay
  7311 00005C34 E8E0000000          <2> 	call PlayDSP
  7312 00005C39 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7313 00005C3D EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7314 00005C3E E931A7FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7315                              <2> .done:
  7316 00005C43 803D[AF5D0000]01    <2> 	cmp byte [OddLength], 1
  7317 00005C4A 74A0                <2> 	je .oddlength
  7318 00005C4C 31C0                <2> 	xor eax, eax
  7319 00005C4E 66A3[B45D0000]      <2> 	mov [Length1], ax
  7320 00005C54 66B8D000            <2> 	mov ax, 0xD0
  7321 00005C58 E843010000          <2> 	call WriteDSP
  7322 00005C5D 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7323 00005C61 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7324 00005C62 E90DA7FFFF          <2> 	jmp handled2
  7325                              <2> 	
  7326                              <2> DMACopy:
  7327 00005C67 66B80800            <2> 		mov ax, LINEAR_SEL
  7328 00005C6B 8EE0                <2> 		mov fs, ax
  7329 00005C6D C1E902              <2> 		shr ecx, 2
  7330                              <2> .loop:
  7331 00005C70 8B06                <2> 		mov eax, [esi]
  7332 00005C72 648903              <2> 		mov [fs:ebx], eax
  7333 00005C75 81C604000000        <2> 		add esi, 4
  7334 00005C7B 81C304000000        <2> 		add ebx, 4
  7335 00005C81 E2ED                <2> 		loop .loop
  7336 00005C83 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7337 00005C87 8EE0                <2> 		mov fs, ax
  7338 00005C89 C3                  <2> 		ret
  7339                              <2> 		
  7340                              <2> 
  7341                              <2> DMAPlay:    ;uses eax ebx edx
  7342 00005C8A C605[C05D0000]00    <2> 		mov	byte [Page1],00h
  7343                              <2> 
  7344 00005C91 B005                <2> 		mov	al,(Channel+4)
  7345 00005C93 66BA0A00            <2> 		mov	dx,0Ah
  7346 00005C97 EE                  <2> 		out	dx,al
  7347 00005C98 30C0                <2> 		xor	al,al
  7348 00005C9A 66BA0C00            <2> 		mov	dx,0Ch
  7349 00005C9E EE                  <2> 		out	dx,al
  7350 00005C9F B059                <2> 		mov	al,ModeReg
  7351 00005CA1 66BA0B00            <2> 		mov	dx,0Bh
  7352 00005CA5 EE                  <2> 		out	dx,al
  7353 00005CA6 B800000800          <2> 		mov	eax,0x80000
  7354 00005CAB 66BA0200            <2> 		mov	dx,AddPort
  7355 00005CAF EE                  <2> 		out	dx,al
  7356 00005CB0 86C4                <2> 		xchg al,ah
  7357 00005CB2 EE                  <2> 		out	dx,al
  7358 00005CB3 B800000800          <2> 		mov	eax,0x80000
  7359 00005CB8 89C2                <2> 		mov	edx,eax
  7360 00005CBA 2500000100          <2> 		and	eax,65536
  7361 00005CBF 7406                <2> 		jz	MemLocN1
  7362 00005CC1 FE05[C05D0000]      <2> 		inc	byte [Page1]
  7363                              <2> MemLocN1:
  7364 00005CC7 89D0                <2> 		mov	eax,edx
  7365 00005CC9 2500000200          <2> 		and	eax,131072
  7366 00005CCE 7407                <2> 		jz	MemLocN2
  7367 00005CD0 8005[C05D0000]02    <2> 		add	byte [Page1],02
  7368                              <2> MemLocN2:
  7369 00005CD7 89D0                <2> 		mov	eax,edx
  7370 00005CD9 2500000400          <2> 		and	eax,262144
  7371 00005CDE 7407                <2> 		jz	MemLocN3
  7372 00005CE0 8005[C05D0000]04    <2> 		add	byte [Page1],04
  7373                              <2> MemLocN3:
  7374 00005CE7 89D0                <2> 		mov	eax,edx
  7375 00005CE9 2500000800          <2> 		and	eax,524288
  7376 00005CEE 7407                <2> 		jz	MemLocN4
  7377 00005CF0 8005[C05D0000]08    <2> 		add	byte [Page1],08
  7378                              <2> MemLocN4:
  7379 00005CF7 66BA8300            <2> 		mov	dx,PgPort
  7380 00005CFB A0[C05D0000]        <2> 		mov	al,[Page1]
  7381 00005D00 EE                  <2> 		out	dx,al
  7382 00005D01 66BA0300            <2> 		mov	dx,LenPort
  7383 00005D05 66A1[B45D0000]      <2> 		mov	ax,[Length1]
  7384 00005D0B 6648                <2> 		dec ax
  7385 00005D0D EE                  <2> 		out	dx,al
  7386 00005D0E 86C4                <2> 		xchg al,ah
  7387 00005D10 EE                  <2> 		out	dx,al
  7388 00005D11 66BA0A00            <2> 		mov	dx,0Ah
  7389 00005D15 B001                <2> 		mov	al,Channel
  7390 00005D17 EE                  <2> 		out	dx,al
  7391 00005D18 C3                  <2> 		ret
  7392                              <2> 		
  7393                              <2> PlayDSP:
  7394 00005D19 B040                <2> 		mov	al,40h
  7395 00005D1B E880000000          <2> 		call WriteDSP
  7396 00005D20 31D2                <2> 		xor	edx,edx
  7397 00005D22 B840420F00          <2> 		mov	eax,1000000
  7398 00005D27 8B1D[C15D0000]      <2> 		mov	ebx,[Freq]
  7399 00005D2D F7F3                <2> 		div	ebx
  7400 00005D2F 89C3                <2> 		mov	ebx,eax
  7401 00005D31 B800010000          <2> 		mov	eax,256
  7402 00005D36 29D8                <2> 		sub	eax,ebx
  7403 00005D38 E863000000          <2> 		call WriteDSP
  7404 00005D3D A0[C55D0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7405 00005D42 E859000000          <2> 		call WriteDSP
  7406 00005D47 66A1[B45D0000]      <2> 		mov	ax,[Length1]
  7407 00005D4D 66D1E8              <2> 		shr ax, 1
  7408 00005D50 E84B000000          <2> 		call WriteDSP
  7409 00005D55 86C4                <2> 		xchg al,ah
  7410 00005D57 E844000000          <2> 		call WriteDSP
  7411 00005D5C C3                  <2> 		ret
  7412                              <2> 
  7413                              <2> MstrVol:    ;uses ax dx
  7414 00005D5D 6650                <2> 	   push ax
  7415 00005D5F 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7416 00005D63 B022                <2> 	   mov	al,22h
  7417 00005D65 EE                  <2> 	   out	dx,al
  7418 00005D66 6658                <2> 	   pop	ax
  7419 00005D68 6642                <2> 	   inc	dx
  7420 00005D6A EE                  <2> 	   out	dx,al
  7421 00005D6B C3                  <2> 	   ret
  7422                              <2> 	   
  7423                              <2> ResetDSP:   ; uses cx dx
  7424 00005D6C 66BA2602            <2> 			mov	dx,(BasePort+6)
  7425 00005D70 B001                <2> 			mov	al,01
  7426 00005D72 EE                  <2> 			out	dx,al
  7427 00005D73 66B93200            <2> 			mov	cx,50
  7428 00005D77 EC                  <2> WaitIt1:	in	al,dx
  7429 00005D78 E2FD                <2> 			loop WaitIt1
  7430 00005D7A 30C0                <2> 			xor	al,al
  7431 00005D7C EE                  <2> 			out	dx,al
  7432 00005D7D 66B93200            <2> 			mov	cx,50
  7433 00005D81 EC                  <2> WaitIt2:	in	al,dx
  7434 00005D82 E2FD                <2> 			loop WaitIt2
  7435 00005D84 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7436 00005D86 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7437 00005D8A EC                  <2> 			in	al,dx
  7438 00005D8B 2480                <2> 			and	al,80h
  7439 00005D8D 3C80                <2> 			cmp	al,80h
  7440 00005D8F 750C                <2> 			jne	ResetErr
  7441 00005D91 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7442 00005D95 EC                  <2> 			in	al,dx
  7443 00005D96 3CAA                <2> 			cmp	al,0AAh
  7444 00005D98 7503                <2> 			jne	ResetErr
  7445 00005D9A B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7446 00005D9C C3                  <2> 			ret
  7447 00005D9D 30C0                <2> ResetErr:	xor al, al
  7448 00005D9F C3                  <2> 			ret
  7449                              <2> 
  7450                              <2> WriteDSP:   ;uses ax dx
  7451 00005DA0 6650                <2> 		push ax
  7452 00005DA2 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7453 00005DA6 EC                  <2> WaitIt:	in	al,dx
  7454 00005DA7 2480                <2> 		and	al,80h
  7455 00005DA9 75FB                <2> 		jnz	WaitIt
  7456 00005DAB 6658                <2> 		pop	ax
  7457 00005DAD EE                  <2> 		out	dx,al
  7458 00005DAE C3                  <2> 		ret
  7459                              <2> 
  7460 00005DAF 00                  <2> OddLength db 0
  7461 00005DB0 00000000            <2> Length0 dd	0
  7462 00005DB4 0000                <2> Length1	dw  0
  7463 00005DB6 00000000            <2> NextMemLoc dd 0
  7464 00005DBA 00000000            <2> MemLoc	dd  0
  7465 00005DBE 0000                <2> SegLoc  dw 0
  7466 00005DC0 00                  <2> Page1	db  0
  7467 00005DC1 00000000            <2> Freq	dd	0
  7468 00005DC5 14                  <2> WAVEMode db 14h
  7469                              <2> PgPort	equ 83h
  7470                              <2> AddPort	equ 02h
  7471                              <2> LenPort	equ 03h
  7472                              <2> ModeReg	equ 59h
  7473                              <2> Channel	equ 01h
  7474                              <2> BasePort	equ 220h
  7475 00005DC6 00                  <2> SoundBlaster	db 0
  7476                              <1> %endif
  7477                              <1> %ifdef io.serial
  7478                              <1> 	%include "source/drivers/input/serial.asm"
  7479                              <1> %else
  7480                              <1> 	%include "source/drivers/input/keyboard.asm"
  7481 00005DC7 00                  <2> specialkey db 0
  7482 00005DC8 00                  <2> charregion db 0
  7483                              <2> waitforinput:		;;this is basically the idle process
  7484                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7485                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7486 00005DC9 6631C0              <2> 	xor ax, ax
  7487 00005DCC A0[D0660000]        <2> 	mov al, [threadson]
  7488 00005DD1 8825[D0660000]      <2> 	mov [threadson], ah
  7489 00005DD7 FB                  <2> 	sti
  7490 00005DD8 F4                  <2> 	hlt
  7491 00005DD9 A2[D0660000]        <2> 	mov [threadson], al
  7492 00005DDE 3A25[78220000]      <2> 	cmp ah, [trans]
  7493 00005DE4 7401                <2> 	je getkey
  7494 00005DE6 C3                  <2> 	ret
  7495                              <2> getkey:
  7496 00005DE7 31C0                <2> 		xor eax, eax
  7497 00005DE9 A2[C75D0000]        <2> 		mov [specialkey], al
  7498 00005DEE 66A3[76220000]      <2> 		mov [lastkey], ax
  7499 00005DF4 E464                <2> 		in al, 64h ; Status
  7500                              <2> 	%ifdef gui.included
  7501 00005DF6 A820                <2> 		test al, 20h ; PS2-Mouse?
  7502 00005DF8 0F852FFAFFFF        <2> 		jnz near moused
  7503                              <2> 	%endif
  7504 00005DFE A801                <2> 		test al, 1 
  7505 00005E00 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7506                              <2> 	calckey:
  7507 00005E02 E460                <2> 		in al, 60h
  7508 00005E04 88C4                <2> 		mov ah, al
  7509 00005E06 30C0                <2> 		xor al, al
  7510 00005E08 8825[77220000]      <2> 		mov [lastkey + 1], ah
  7511 00005E0E 88E0                <2> 		mov al, ah
  7512 00005E10 BF[A95F0000]        <2> 		mov edi, scancode
  7513                              <2> 	searchscan: 
  7514 00005E15 3C3A                <2> 		cmp al, 3Ah
  7515 00005E17 731A                <2> 		jae scanother
  7516 00005E19 30E4                <2> 		xor ah, ah
  7517 00005E1B C0E002              <2> 		shl al, 2
  7518 00005E1E 01C7                <2> 		add edi, eax
  7519 00005E20 D0E8                <2> 		shr al, 1
  7520 00005E22 01C7                <2> 		add edi, eax
  7521 00005E24 D0E8                <2> 		shr al, 1
  7522 00005E26 8A27                <2> 		mov ah, [edi]
  7523 00005E28 80FC00              <2> 		cmp ah, 0
  7524 00005E2B 7406                <2> 		je scanother
  7525 00005E2D E9D7000000          <2> 		jmp scanfound
  7526 00005E32 00                  <2> uppercase db 0
  7527                              <2> scanother:
  7528 00005E33 88C4                <2> 		mov ah, al
  7529 00005E35 30C0                <2> 		xor al, al
  7530 00005E37 66A3[76220000]      <2> 		mov [lastkey], ax
  7531 00005E3D 80FCE0              <2> 		cmp ah, 0E0h
  7532 00005E40 0F847D000000        <2> 		je near getkeyspecial
  7533 00005E46 803D[C75D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7534 00005E4D 752B                <2> 		jne nospecialkey
  7535 00005E4F 80FC38              <2> 		cmp ah, 38h
  7536 00005E52 0F84A0000000        <2> 		je near alton
  7537 00005E58 80FCB8              <2> 		cmp ah, 0B8h
  7538 00005E5B 0F849F000000        <2> 		je near altoff
  7539 00005E61 80FC1D              <2> 		cmp ah, 1Dh
  7540 00005E64 0F847E000000        <2> 		je near ctron
  7541 00005E6A 80FC9D              <2> 		cmp ah, 9Dh
  7542 00005E6D 0F847D000000        <2> 		je near ctroff
  7543 00005E73 66A3[76220000]      <2> 		mov [lastkey], ax
  7544 00005E79 C3                  <2> 		ret
  7545                              <2> nospecialkey:
  7546 00005E7A 80FC2A              <2> 		cmp ah, 2Ah
  7547 00005E7D 0F8455000000        <2> 		je near shifton
  7548 00005E83 80FC36              <2> 		cmp ah, 36h
  7549 00005E86 0F844C000000        <2> 		je near shifton
  7550 00005E8C 80FC1C              <2> 		cmp ah, 1Ch
  7551 00005E8F 0F8473000000        <2> 		je near entdown
  7552 00005E95 80FCAA              <2> 		cmp ah, 0AAh
  7553 00005E98 0F8442000000        <2> 		je near shiftoff
  7554 00005E9E 80FCB6              <2> 		cmp ah, 0B6h
  7555 00005EA1 0F8439000000        <2> 		je near shiftoff
  7556 00005EA7 80FC3A              <2> 		cmp ah, 3Ah
  7557 00005EAA 0F84A5000000        <2> 		je near capslock
  7558 00005EB0 80FC45              <2> 		cmp ah, 0x45
  7559 00005EB3 0F84AD000000        <2> 		je near numlock
  7560 00005EB9 80FC46              <2> 		cmp ah, 0x46
  7561 00005EBC 0F84BC000000        <2> 		je near scrolllock
  7562 00005EC2 C3                  <2> 		ret
  7563                              <2> 	getkeyspecial:
  7564 00005EC3 C605[C75D0000]E0    <2> 		mov byte [specialkey], 0xE0
  7565 00005ECA E933FFFFFF          <2> 		jmp calckey
  7566                              <2> 	shift:
  7567 00005ECF A0[325E0000]        <2> 		mov al, [uppercase]
  7568 00005ED4 3C01                <2> 		cmp al, 1
  7569 00005ED6 7308                <2> 		jae shiftoff
  7570                              <2> 	shifton:
  7571 00005ED8 C605[325E0000]01    <2> 		mov byte [uppercase], 1
  7572 00005EDF C3                  <2> 		ret
  7573                              <2> 	shiftoff:
  7574 00005EE0 C605[325E0000]00    <2> 		mov byte [uppercase], 0
  7575 00005EE7 C3                  <2> 		ret
  7576                              <2> 	ctron:
  7577 00005EE8 C605[545F0000]01    <2> 		mov byte [ctrkey], 1
  7578 00005EEF C3                  <2> 		ret
  7579                              <2> 	ctroff:
  7580 00005EF0 C605[545F0000]00    <2> 		mov byte [ctrkey], 0
  7581 00005EF7 C3                  <2> 		ret
  7582                              <2> 	alton:
  7583 00005EF8 C605[535F0000]01    <2> 		mov byte [altkey], 1
  7584 00005EFF C3                  <2> 		ret
  7585                              <2> 	altoff:
  7586 00005F00 C605[535F0000]00    <2> 		mov byte [altkey], 0
  7587 00005F07 C3                  <2> 		ret
  7588                              <2> 	entdown:
  7589 00005F08 C3                  <2> 		ret
  7590                              <2> 	scanfound:
  7591 00005F09 81C704000000        <2> 		add edi, 4
  7592 00005F0F 803D[545F0000]01    <2> 		cmp byte [ctrkey], 1
  7593 00005F16 731B                <2> 		jae altin
  7594 00005F18 81EF04000000        <2> 		sub edi, 4
  7595 00005F1E 81C702000000        <2> 		add edi, 2
  7596 00005F24 803D[535F0000]01    <2> 		cmp byte [altkey], 1
  7597 00005F2B 7306                <2> 		jae altin
  7598 00005F2D 81EF02000000        <2> 		sub edi, 2
  7599                              <2> altin:
  7600 00005F33 81C701000000        <2> 		add edi, 1
  7601 00005F39 803D[325E0000]01    <2> 		cmp byte [uppercase], 1
  7602 00005F40 7306                <2> 		jae uppercaseon
  7603 00005F42 81EF01000000        <2> 		sub edi, 1
  7604                              <2> uppercaseon:
  7605 00005F48 8A07                <2> 		mov al,[edi]
  7606 00005F4A A2[76220000]        <2> 		mov [lastkey], al
  7607 00005F4F C3                  <2> 		ret
  7608                              <2> 		
  7609 00005F50 00                  <2> keyboardstatus db 0
  7610 00005F51 00                  <2> numlockstatus db 0
  7611 00005F52 00                  <2> scrolllockstatus db 0
  7612 00005F53 00                  <2> altkey db 0
  7613 00005F54 00                  <2> ctrkey db 0
  7614                              <2> 	capslock:
  7615 00005F55 8035[505F0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7616 00005F5C E835000000          <2> 		call updatekblights
  7617 00005F61 E969FFFFFF          <2> 		jmp shift
  7618                              <2> 		
  7619                              <2> 	numlock:
  7620 00005F66 8035[505F0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7621 00005F6D 8035[515F0000]01    <2> 		xor byte [numlockstatus], 1
  7622 00005F74 E81D000000          <2> 		call updatekblights
  7623 00005F79 E969FEFFFF          <2> 		jmp getkey
  7624                              <2> 	
  7625                              <2> 	scrolllock:
  7626 00005F7E 8035[505F0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7627 00005F85 8035[525F0000]01    <2> 		xor byte [scrolllockstatus], 1
  7628 00005F8C E805000000          <2> 		call updatekblights
  7629 00005F91 E951FEFFFF          <2> 		jmp getkey
  7630                              <2> 		
  7631                              <2> 	updatekblights:
  7632 00005F96 B0ED                <2> 		mov al, 0xED
  7633 00005F98 66BA6000            <2> 		mov dx, 0x60
  7634 00005F9C EE                  <2> 		out dx, al
  7635                              <2> 	chkkbdack:
  7636 00005F9D EC                  <2> 		in al, dx
  7637 00005F9E 3CFA                <2> 		cmp al, 0xFA
  7638 00005FA0 75FB                <2> 		jne chkkbdack
  7639 00005FA2 A0[505F0000]        <2> 		mov al, [keyboardstatus]
  7640 00005FA7 EE                  <2> 		out dx, al
  7641 00005FA8 C3                  <2> 		ret
  7642                              <2> 		
  7643                              <2> scancode:
  7644                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY
  7645 00005FA9 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7646 00005FAF 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7647 00005FB5 3121AD130000        <2> 	db '1','!',0xAD,0x13,0,0	;2h
  7648 00005FBB 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7649 00005FC1 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7650 00005FC7 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7651 00005FCD 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7652 00005FD3 365EACFC0000        <2> 	db '6','^',0xAC,0xFC,0,0	;7h
  7653 00005FD9 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7654 00005FDF 382AEC070000        <2> 	db '8','*',0xEC,0x7,0,0		;9h
  7655 00005FE5 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7656 00005FEB 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7657 00005FF1 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7658 00005FF7 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7659 00005FFD 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7660 00006003 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7661 00006009 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7662 0000600F 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7663 00006015 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7664 0000601B 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7665 00006021 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7666 00006027 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7667 0000602D 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7668 00006033 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7669 00006039 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7670 0000603F 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7671 00006045 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7672 0000604B 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7673 00006051 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7674 00006057 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7675 0000605D 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7676 00006063 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7677 00006069 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7678 0000606F 66469F0CEDE8        <2> 	db 'f','F',159,0xC,237,232	;21h
  7679 00006075 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7680 0000607B 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7681 00006081 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7682 00006087 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7683 0000608D 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7684 00006093 3B3A14DC0000        <2> 	db ';',':',20,0xDC,0,0			;27h
  7685 00006099 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7686 0000609F 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7687 000060A5 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7688 000060AB 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7689 000060B1 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7690 000060B7 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7691 000060BD 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7692 000060C3 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7693 000060C9 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7694 000060CF 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7695 000060D5 6D4D0E0BE64D        <2> 	db 'm','M',0xE,0xB,230,'M'		;32h
  7696 000060DB 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7697 000060E1 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7698 000060E7 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7699 000060ED 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7700 000060F3 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7701 000060F9 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7702 000060FF 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7703                              <2> noscan:
  7704                              <2> 
  7705                              <1> %endif
  7706                              <1> ;drivers will soon be handled intelligently
  7707                              <1> ;every driver's source will be scanned for a .init function
  7708                              <1> ;that will be called and if it returns 0
  7709                              <1> ;the hardware was found and the driver initialized properly
  7710                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7711                              <1> 	%ifdef sound.included
  7712 00006105 E886FAFFFF          <1> 		call sblaster.init
  7713                              <1> 	%endif
  7714                              <1> 	%ifdef network.included
  7715 0000610A E831220000          <1> 		call network.init
  7716                              <1> 	%endif
  7717 0000610F C3                  <1> 	ret
  7718                              <1> initialize:
  7719                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7720 00006110 E814000000          <1> 	call .pic
  7721                              <1> %ifdef terminal.vsync
  7722                              <1> 	call .rtc
  7723                              <1> %endif
  7724 00006115 E871000000          <1> 	call .pit
  7725 0000611A E893000000          <1> 	call .fpu
  7726 0000611F E8A4000000          <1> 	call .sse
  7727 00006124 31C0                <1> 	xor eax, eax
  7728 00006126 31C9                <1> 	xor ecx, ecx
  7729                              <1> %ifdef io.serial
  7730                              <1> 	call serial.init
  7731                              <1> %endif
  7732 00006128 C3                  <1> 	ret
  7733                              <1> 	
  7734                              <1> .pic:
  7735 00006129 B011                <1> 	mov al, 0x11
  7736 0000612B E620                <1> 	out 0x20, al
  7737 0000612D E6A0                <1> 	out 0xA0, al
  7738 0000612F B040                <1> 	mov al, 0x40	;interrupt for master
  7739 00006131 E621                <1> 	out 0x21, al
  7740 00006133 B048                <1> 	mov al, 0x48	;interrupt for slave
  7741 00006135 E6A1                <1> 	out 0xA1, al
  7742 00006137 B004                <1> 	mov al, 4
  7743 00006139 E621                <1> 	out 0x21, al
  7744 0000613B B002                <1> 	mov al, 2
  7745 0000613D E6A1                <1> 	out 0xA1, al
  7746 0000613F B001                <1> 	mov al, 0x1
  7747 00006141 E621                <1> 	out 0x21, al
  7748 00006143 B001                <1> 	mov al, 0x1
  7749 00006145 E6A1                <1> 	out 0xA1, al
  7750                              <1> 	;masks are set to zero so as not to mask
  7751 00006147 30C0                <1> 	xor al, al
  7752 00006149 E621                <1> 	out 0x21, al
  7753 0000614B 30C0                <1> 	xor al, al
  7754 0000614D E6A1                <1> 	out 0xA1, al
  7755 0000614F B020                <1> 	mov al, 0x20
  7756 00006151 E6A0                <1> 	out 0xA0, al
  7757 00006153 E620                <1> 	out 0x20, al
  7758 00006155 C3                  <1> 	ret
  7759                              <1> .rtc:
  7760 00006156 B008                <1> 	mov al, 0x8
  7761 00006158 88C4                <1> 	mov ah, al
  7762 0000615A 66BA7000            <1> 	mov dx, 0x70
  7763 0000615E EE                  <1> 	out dx, al
  7764 0000615F 6642                <1> 	inc dx
  7765 00006161 EC                  <1> 	in al, dx
  7766 00006162 86C4                <1> 	xchg al, ah
  7767 00006164 664A                <1> 	dec dx
  7768 00006166 EE                  <1> 	out dx, al
  7769 00006167 6642                <1> 	inc dx
  7770 00006169 86C4                <1> 	xchg al, ah
  7771 0000616B 0C40                <1> 	or al, 0x40
  7772 0000616D EE                  <1> 	out dx, al
  7773                              <1> 	
  7774 0000616E B00A                <1> 	mov al, 0xA
  7775 00006170 664A                <1> 	dec dx
  7776 00006172 EE                  <1> 	out dx, al
  7777 00006173 86C4                <1> 	xchg al, ah
  7778 00006175 6642                <1> 	inc dx
  7779 00006177 EC                  <1> 	in al, dx
  7780 00006178 24F0                <1> 	and al, 0xF0
  7781 0000617A 0A05[18030000]      <1> 	or al, [rtcrate]
  7782 00006180 86C4                <1> 	xchg al, ah
  7783 00006182 664A                <1> 	dec dx
  7784 00006184 EE                  <1> 	out dx, al
  7785 00006185 6642                <1> 	inc dx
  7786 00006187 86C4                <1> 	xchg al, ah
  7787 00006189 EE                  <1> 	out dx, al
  7788 0000618A C3                  <1> 	ret
  7789                              <1> 	
  7790                              <1> .pit:
  7791                              <1> 	;initialize the PIT
  7792 0000618B 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7793 00006191 E640                <1> 	out 0x40, al
  7794 00006193 66C1C008            <1> 	rol ax, 8
  7795 00006197 E640                <1> 	out 0x40, al
  7796                              <1> 	;enable rtc interrupt
  7797 00006199 B00B                <1> 	mov al, 0xB
  7798 0000619B E670                <1> 	out 0x70, al
  7799 0000619D 66C1C008            <1> 	rol ax, 8
  7800 000061A1 E471                <1> 	in al, 0x71
  7801 000061A3 66C1C008            <1> 	rol ax, 8
  7802 000061A7 E670                <1> 	out 0x70, al
  7803 000061A9 66C1C008            <1> 	rol ax, 8
  7804 000061AD 0C40                <1> 	or al, 0x40
  7805 000061AF E671                <1> 	out 0x71, al
  7806 000061B1 C3                  <1> 	ret
  7807                              <1> .fpu:
  7808                              <1> 	;And now to initialize the fpu
  7809 000061B2 0F20E0              <1> 	mov eax, cr4
  7810 000061B5 0D00020000          <1> 	or eax, 0x200
  7811 000061BA 0F22E0              <1> 	mov cr4, eax
  7812 000061BD B87F0B0000          <1> 	mov eax, 0xB7F
  7813 000061C2 50                  <1> 	push eax
  7814 000061C3 D92C24              <1> 	fldcw [esp]
  7815 000061C6 58                  <1> 	pop eax
  7816 000061C7 C3                  <1> 	ret
  7817                              <1> 	
  7818                              <1> .sse:
  7819 000061C8 0F20C0              <1> 	mov eax, cr0
  7820 000061CB 24FB                <1> 	and al, 11111011b
  7821 000061CD 0C02                <1> 	or al, 00000010b
  7822 000061CF 0F22C0              <1> 	mov cr0, eax
  7823 000061D2 0F20E0              <1> 	mov eax, cr4
  7824 000061D5 660D0006            <1> 	or ax, 0000011000000000b
  7825 000061D9 0F22E0              <1> 	mov cr4, eax
  7826 000061DC C3                  <1> 	ret
  7827                                      %include "source/pci.asm"
  7828 000061DD 00                  <1> pcibus		db 0
  7829 000061DE 00                  <1> pcidevice	db 0
  7830 000061DF 00                  <1> pcifunction	db 0
  7831 000061E0 00                  <1> pciregister	db 0
  7832 000061E1 00                  <1> pcireqtype	db 0
  7833 000061E2 00000000            <1> pcidevid	dd 0
  7834 000061E6 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7835                              <1> getpcimem:
  7836 000061EA B002                <1> 	mov al, 2
  7837 000061EC A2[E1610000]        <1> 	mov [pcireqtype], al
  7838 000061F1 E922000000          <1> 	jmp searchpci
  7839                              <1> getpciport:
  7840 000061F6 B001                <1> 	mov al, 1
  7841 000061F8 A2[E1610000]        <1> 	mov [pcireqtype], al
  7842 000061FD E916000000          <1> 	jmp searchpci
  7843                              <1> pcidump:
  7844 00006202 31C0                <1> 	xor eax, eax
  7845 00006204 A2[DF610000]        <1> 	mov [pcifunction], al
  7846 00006209 A2[DD610000]        <1> 	mov [pcibus], al
  7847 0000620E A2[DE610000]        <1> 	mov [pcidevice], al
  7848 00006213 A2[E1610000]        <1> 	mov [pcireqtype], al
  7849                              <1> searchpci:		;;return in ebx, start X in pciX
  7850 00006218 30C0                <1> 	xor al, al
  7851 0000621A A2[E0610000]        <1> 	mov [pciregister], al
  7852 0000621F E817020000          <1> 	call getpciaddr
  7853 00006224 BAF80C0000          <1> 	mov edx, 0xCF8
  7854 00006229 EF                  <1> 	out dx, eax	;;request pci config
  7855 0000622A BAFC0C0000          <1> 	mov edx, 0xCFC
  7856 0000622F ED                  <1> 	in eax, dx 	;;read in pci config
  7857 00006230 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7858 00006235 0F8237000000        <1> 	jb near checkpcidevice
  7859                              <1> searchpciret:
  7860                              <1> nextpcidevice:
  7861 0000623B 30C0                <1> 	xor al, al
  7862 0000623D A2[DF610000]        <1> 	mov [pcifunction], al
  7863 00006242 A0[DE610000]        <1> 	mov al, [pcidevice]
  7864 00006247 3C1F                <1> 	cmp al, 11111b
  7865 00006249 0F8300010000        <1> 	jae near nextpcibus
  7866 0000624F FEC0                <1> 	inc al
  7867 00006251 A2[DE610000]        <1> 	mov [pcidevice], al
  7868 00006256 EBC0                <1> 	jmp searchpci
  7869 00006258 A0[DF610000]        <1> 	mov al, [pcifunction]
  7870 0000625D 3C07                <1> 	cmp al, 111b
  7871 0000625F 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7872 00006265 FEC0                <1> 	inc al
  7873 00006267 A2[DF610000]        <1> 	mov [pcifunction], al
  7874 0000626C EBAA                <1> 	jmp searchpci
  7875 0000626E 00000000            <1> pcitype: db 0,0,0,0
  7876                              <1> checkpcidevice:
  7877 00006272 31C0                <1> 	xor eax, eax
  7878 00006274 3905[E2610000]      <1> 	cmp [pcidevid], eax
  7879 0000627A 0F8430000000        <1> 	je near .good
  7880 00006280 A2[E0610000]        <1> 	mov [pciregister], al	;device id, vendor id
  7881 00006285 E8B1010000          <1> 	call getpciaddr
  7882 0000628A BAF80C0000          <1> 	mov edx, 0xCF8
  7883 0000628F EF                  <1> 	out dx, eax
  7884 00006290 BAFC0C0000          <1> 	mov edx, 0xCFC
  7885 00006295 ED                  <1> 	in eax, dx
  7886 00006296 2305[E6610000]      <1> 	and eax, [pcidevidmask]
  7887 0000629C 8B1D[E2610000]      <1> 	mov ebx, [pcidevid]
  7888 000062A2 231D[E6610000]      <1> 	and ebx, [pcidevidmask]
  7889 000062A8 39D8                <1> 	cmp eax, ebx
  7890 000062AA 0F858BFFFFFF        <1> 	jne near searchpciret
  7891                              <1> .good:
  7892 000062B0 30C0                <1> 	xor al, al
  7893 000062B2 3805[E1610000]      <1> 	cmp [pcireqtype], al
  7894 000062B8 0F842C000000        <1> 	je near dumppcidevice
  7895 000062BE B008                <1> 	mov al, 0x08
  7896 000062C0 A2[E0610000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7897 000062C5 E871010000          <1> 	call getpciaddr
  7898 000062CA BAF80C0000          <1> 	mov edx, 0xCF8
  7899 000062CF EF                  <1> 	out dx, eax
  7900 000062D0 BAFC0C0000          <1> 	mov edx, 0xCFC
  7901 000062D5 ED                  <1> 	in eax, dx
  7902 000062D6 C1C008              <1> 	rol eax, 8
  7903 000062D9 3A05[6E620000]      <1> 	cmp al, [pcitype]
  7904 000062DF 0F84A0000000        <1> 	je near foundpciaddr
  7905 000062E5 E951FFFFFF          <1> 	jmp searchpciret
  7906                              <1> dumppcidevice:
  7907 000062EA 30C0                <1> 	xor al, al
  7908 000062EC A2[E0610000]        <1> 	mov [pciregister], al
  7909 000062F1 E845010000          <1> 	call getpciaddr
  7910 000062F6 89C1                <1> 	mov ecx, eax
  7911 000062F8 C605[EC2F0000]05    <1> 	mov byte [firsthexshown], 5
  7912 000062FF E8FDCCFFFF          <1> 	call showhex
  7913                              <1> dumppcidevicelp:
  7914 00006304 A2[E0610000]        <1> 	mov [pciregister], al
  7915 00006309 E82D010000          <1> 	call getpciaddr
  7916 0000630E BAF80C0000          <1> 	mov edx, 0xCF8
  7917 00006313 EF                  <1> 	out dx, eax
  7918 00006314 BAFC0C0000          <1> 	mov edx, 0xCFC
  7919 00006319 ED                  <1> 	in eax, dx
  7920 0000631A 89C1                <1> 	mov ecx, eax
  7921 0000631C A0[E0610000]        <1> 	mov al, [pciregister]
  7922 00006321 0404                <1> 	add al, 4
  7923 00006323 C605[EC2F0000]05    <1> 	mov byte [firsthexshown], 5
  7924 0000632A E8D2CCFFFF          <1> 	call showhex
  7925 0000632F 3C3C                <1> 	cmp al, 0x3C
  7926 00006331 72D1                <1> 	jb dumppcidevicelp
  7927                              <1> dumppcidn:
  7928                              <1> %ifdef io.serial
  7929                              <1> 	mov esi, line
  7930                              <1> 	call print
  7931                              <1> %else
  7932 00006333 803D[74240000]00    <1> 	cmp byte [charpos], 0
  7933 0000633A 0F84FBFEFFFF        <1> 	je near searchpciret
  7934 00006340 BE[5E900000]        <1> 	mov esi, line
  7935 00006345 E810BAFFFF          <1> 	call print
  7936                              <1> %endif
  7937 0000634A E9ECFEFFFF          <1> 	jmp searchpciret
  7938                              <1> nextpcibus:
  7939 0000634F 30C0                <1> 	xor al, al
  7940 00006351 A2[DE610000]        <1> 	mov [pcidevice], al
  7941 00006356 A0[DD610000]        <1> 	mov al, [pcibus]
  7942 0000635B 3C7F                <1> 	cmp al, 1111111b
  7943 0000635D 730C                <1> 	jae donesearchpci
  7944 0000635F FEC0                <1> 	inc al
  7945 00006361 A2[DD610000]        <1> 	mov [pcibus], al
  7946 00006366 E9ADFEFFFF          <1> 	jmp searchpci
  7947                              <1> donesearchpci:
  7948 0000636B BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7949 00006370 31D2                <1> 	xor edx, edx
  7950 00006372 8815[6E620000]      <1> 	mov [pcitype], dl
  7951 00006378 8915[E2610000]      <1> 	mov [pcidevid], edx
  7952 0000637E 891D[E6610000]      <1> 	mov [pcidevidmask], ebx
  7953 00006384 C3                  <1> 	ret
  7954                              <1> foundpciaddr:
  7955 00006385 B010                <1> 	mov al, 0x10
  7956 00006387 A2[E0610000]        <1> 	mov [pciregister], al
  7957 0000638C 803D[E1610000]02    <1> 	cmp byte [pcireqtype], 2
  7958 00006393 7443                <1> 	je findpcimemaddr
  7959                              <1> findpciioaddr:
  7960 00006395 E8A1000000          <1> 	call getpciaddr
  7961 0000639A BAF80C0000          <1> 	mov edx, 0xCF8
  7962 0000639F EF                  <1> 	out dx, eax
  7963 000063A0 BAFC0C0000          <1> 	mov edx, 0xCFC
  7964 000063A5 ED                  <1> 	in eax, dx
  7965 000063A6 89C3                <1> 	mov ebx, eax
  7966 000063A8 81E301000000        <1> 	and ebx, 1
  7967 000063AE 81FB00000000        <1> 	cmp ebx, 0
  7968 000063B4 0F8468000000        <1> 	je near notpciioaddr
  7969 000063BA 2D01000000          <1> 	sub eax, 1
  7970 000063BF 89C2                <1> 	mov edx, eax
  7971 000063C1 31DB                <1> 	xor ebx, ebx
  7972 000063C3 4B                  <1> 	dec ebx
  7973 000063C4 891D[E6610000]      <1> 	mov [pcidevidmask], ebx
  7974 000063CA 43                  <1> 	inc ebx
  7975 000063CB 881D[6E620000]      <1> 	mov [pcitype], bl
  7976 000063D1 891D[E2610000]      <1> 	mov [pcidevid], ebx
  7977 000063D7 C3                  <1> 	ret
  7978                              <1> findpcimemaddr:
  7979 000063D8 E85E000000          <1> 	call getpciaddr
  7980 000063DD BAF80C0000          <1> 	mov edx, 0xCF8
  7981 000063E2 EF                  <1> 	out dx, eax
  7982 000063E3 BAFC0C0000          <1> 	mov edx, 0xCFC
  7983 000063E8 ED                  <1> 	in eax, dx
  7984 000063E9 89C3                <1> 	mov ebx, eax
  7985 000063EB 81E301000000        <1> 	and ebx, 1
  7986 000063F1 81FB01000000        <1> 	cmp ebx, 1
  7987 000063F7 0F8425000000        <1> 	je near notpciioaddr
  7988 000063FD 89C2                <1> 	mov edx, eax
  7989 000063FF 50                  <1> 	push eax
  7990 00006400 A1[3E020000]        <1> 	mov eax, [basecache]
  7991 00006405 C1E004              <1> 	shl eax, 4
  7992 00006408 29C2                <1> 	sub edx, eax
  7993 0000640A 58                  <1> 	pop eax
  7994 0000640B 31DB                <1> 	xor ebx, ebx
  7995 0000640D 4B                  <1> 	dec ebx
  7996 0000640E 891D[E6610000]      <1> 	mov [pcidevidmask], ebx
  7997 00006414 43                  <1> 	inc ebx
  7998 00006415 881D[6E620000]      <1> 	mov [pcitype], bl
  7999 0000641B 891D[E2610000]      <1> 	mov [pcidevid], ebx
  8000 00006421 C3                  <1> 	ret
  8001                              <1> notpciioaddr:
  8002 00006422 A0[E0610000]        <1> 	mov al, [pciregister]
  8003 00006427 0404                <1> 	add al, 4
  8004 00006429 3C28                <1> 	cmp al, 0x28
  8005 0000642B 0F870AFEFFFF        <1> 	ja near searchpciret
  8006 00006431 A2[E0610000]        <1> 	mov [pciregister], al
  8007 00006436 E95AFFFFFF          <1> 	jmp findpciioaddr
  8008                              <1> getpciaddr:		;;puts it in eax and ebx
  8009 0000643B 31C0                <1> 			xor eax, eax
  8010 0000643D BB00000080          <1> 			mov ebx, 0x80000000
  8011 00006442 A0[DD610000]        <1> 			mov al, [pcibus]
  8012 00006447 C1E010              <1> 			shl eax, 16
  8013 0000644A 01C3                <1> 			add ebx, eax
  8014 0000644C 31C0                <1> 			xor eax, eax
  8015 0000644E A0[DE610000]        <1> 			mov al, [pcidevice]
  8016 00006453 C1E00B              <1> 			shl eax, 11
  8017 00006456 01C3                <1> 			add ebx, eax
  8018 00006458 31C0                <1> 			xor eax, eax
  8019 0000645A A0[DF610000]        <1> 			mov al, [pcifunction]
  8020 0000645F C1E008              <1> 			shl eax, 8
  8021 00006462 01C3                <1> 			add ebx, eax
  8022 00006464 31C0                <1> 			xor eax, eax
  8023 00006466 A0[E0610000]        <1> 			mov al, [pciregister]
  8024 0000646B 01C3                <1> 			add ebx, eax
  8025 0000646D 89D8                <1> 			mov eax, ebx
  8026 0000646F C3                  <1> 			ret
  8027                                      %include "source/disk.asm"
  8028                              <1> ;This loads files using the methods in the loaded driver
  8029                              <1> %ifdef disk.real
  8030                              <1> %include "source/drivers/disk/realmode.asm"
  8031                              <2> diskr:
  8032                              <2> 			;read from disk using real mode-it does not work with large files
  8033                              <2> 			;sector count in cl
  8034                              <2> 			;disk number in ch
  8035                              <2> 			;48 bit address with last 32 bits in ebx
  8036                              <2> 			;buffer in esi
  8037                              <2> 			;puts end of buffer in edi and end lba address in edx
  8038 00006470 880D[9D640000]      <2> 	mov [sdlength], cl
  8039 00006476 891D[9E640000]      <2> 	mov [sdaddress], ebx
  8040 0000647C 8935[FC650000]      <2> 	mov [oldesireal], esi
  8041 00006482 66BE[A264]          <2> 	mov si, readdiskreal
  8042 00006486 668935[050D0000]    <2> 	mov [realmodeptr], si
  8043 0000648D BE[DE640000]        <2> 	mov esi, backfromrealread
  8044 00006492 8935[010D0000]      <2> 	mov [realmodereturn], esi
  8045 00006498 E94DA7FFFF          <2> 	jmp realmode
  8046 0000649D 00                  <2> sdlength db 0
  8047 0000649E 00000000            <2> sdaddress dd 0
  8048                              <2> 
  8049                              <2> [BITS 16]
  8050                              <2> readdiskreal:
  8051 000064A2 C706[CE64]1000      <2> 	mov word [dlen], 0x10
  8052 000064A8 C706[D264]0000      <2> 	mov word [daddress], 0
  8053 000064AE C706[D464]0001      <2> 	mov word [dsegm], 0x100
  8054 000064B4 66891E[D664]        <2> 	mov [dlbaad], ebx
  8055 000064B9 880E[D064]          <2> 	mov [dreadlen], cl
  8056                              <2> ReadHardDisk:
  8057 000064BD BE[CE64]            <2> 	mov si, diskaddresspacket
  8058 000064C0 31C0                <2> 	xor ax, ax
  8059 000064C2 B442                <2> 	mov ah, 0x42
  8060 000064C4 8A16[CD64]          <2> 	mov dl, [dnumber]
  8061 000064C8 CD13                <2> 	int 0x13
  8062 000064CA 72F1                <2> 	jc ReadHardDisk
  8063 000064CC C3                  <2> 	ret
  8064                              <2> 
  8065 000064CD 80                  <2> dnumber db 0x80
  8066                              <2> diskaddresspacket:
  8067 000064CE 10                  <2> dlen:	db 0x10 ;size of packet
  8068 000064CF 00                  <2> 		db 0
  8069 000064D0 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8070 000064D2 0000                <2> daddress:	dw 0x0	;address 0
  8071 000064D4 0001                <2> dsegm:		dw 0x100	;segment
  8072                              <2> 		;start with known value for hd
  8073                              <2> dlbaad:
  8074 000064D6 00000000            <2> 	dd 0	;lba address
  8075 000064DA 00000000            <2> 	dd 0
  8076                              <2> [BITS 32]
  8077                              <2> backfromrealread:
  8078 000064DE 8B35[FC650000]      <2> 	mov esi, [oldesireal]
  8079 000064E4 8B1D[9E640000]      <2> 	mov ebx, [sdaddress]
  8080 000064EA 31C9                <2> 	xor ecx, ecx
  8081 000064EC 8A0D[9D640000]      <2> 	mov cl, [sdlength]
  8082 000064F2 01CB                <2> 	add ebx, ecx
  8083 000064F4 66B80800            <2> 	mov ax, LINEAR_SEL
  8084 000064F8 8EE0                <2> 	mov fs, ax
  8085 000064FA BF00100000          <2> 	mov edi, 0x1000
  8086 000064FF B200                <2> 	mov dl, 0
  8087 00006501 D0E1                <2> 	shl cl, 1
  8088                              <2> copyfromrmodedisk:
  8089 00006503 648A07              <2> 	mov al, [fs:edi]
  8090 00006506 8806                <2> 	mov [esi], al
  8091 00006508 47                  <2> 	inc edi
  8092 00006509 46                  <2> 	inc esi
  8093 0000650A FECA                <2> 	dec dl
  8094 0000650C 80FA00              <2> 	cmp dl, 0
  8095 0000650F 75F2                <2> 	jne copyfromrmodedisk
  8096 00006511 FEC9                <2> 	dec cl
  8097 00006513 B200                <2> 	mov dl, 0
  8098 00006515 80F900              <2> 	cmp cl, 0
  8099 00006518 75E9                <2> 	jne copyfromrmodedisk
  8100 0000651A 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8101 0000651E 8EE0                <2> 	mov fs, ax
  8102 00006520 89F7                <2> 	mov edi, esi
  8103 00006522 8B35[FC650000]      <2> 	mov esi, [oldesireal]
  8104 00006528 89DA                <2> 	mov edx, ebx
  8105 0000652A 8B1D[9E640000]      <2> 	mov ebx, [sdaddress]
  8106 00006530 C3                  <2> 	ret
  8107                              <2> 	
  8108                              <1> %else
  8109                              <1> 	%ifdef disk.protected
  8110                              <1> 	%include "source/drivers/disk/pata.asm"
  8111                              <1> 	%endif
  8112                              <1> %endif
  8113                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8114                              <1> 			;returns with err code in edx and file end in edi
  8115 00006531 803F00              <1> 	cmp byte [edi], 0
  8116 00006534 0F8448000000        <1> 	je near nofileload
  8117 0000653A 89FA                <1> 	mov edx, edi
  8118 0000653C BB[83A00000]        <1> 	mov ebx, diskfileindex
  8119                              <1> nextnamechar:
  8120 00006541 8A07                <1> 	mov al, [edi]
  8121 00006543 3C26                <1> 	cmp al, '&'
  8122 00006545 7440                <1> 	je nullfile
  8123 00006547 8A23                <1> 	mov ah, [ebx]
  8124 00006549 47                  <1> 	inc edi
  8125 0000654A 43                  <1> 	inc ebx
  8126 0000654B 88C1                <1> 	mov cl, al
  8127 0000654D 08E1                <1> 	or cl, ah
  8128 0000654F 80F900              <1> 	cmp cl, 0
  8129 00006552 744E                <1> 	je equalfilenames
  8130 00006554 80F920              <1> 	cmp cl, ' '
  8131 00006557 7449                <1> 	je equalfilenames
  8132 00006559 3C2A                <1> 	cmp al, '*'
  8133 0000655B 742B                <1> 	je equalfilenames2
  8134 0000655D 80FC00              <1> 	cmp ah, 0
  8135 00006560 7410                <1> 	je nextfilename
  8136 00006562 3C00                <1> 	cmp al, 0
  8137 00006564 7404                <1> 	je getebxzero
  8138 00006566 38E0                <1> 	cmp al, ah
  8139 00006568 74D7                <1> 	je nextnamechar
  8140                              <1> getebxzero:
  8141 0000656A 8A23                <1> 	mov ah, [ebx]
  8142 0000656C 43                  <1> 	inc ebx
  8143 0000656D 80FC00              <1> 	cmp ah, 0
  8144 00006570 75F8                <1> 	jne getebxzero
  8145                              <1> nextfilename:
  8146 00006572 81C308000000        <1> 	add ebx, 8		;next descriptor
  8147 00006578 89D7                <1> 	mov edi, edx
  8148 0000657A 81FB[48A20000]      <1> 	cmp ebx, enddiskfileindex
  8149 00006580 72BF                <1> 	jb nextnamechar
  8150                              <1> nofileload:
  8151 00006582 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8152                              <1> nullfile:
  8153 00006587 C3                  <1> 	ret
  8154                              <1> equalfilenames2:
  8155 00006588 81EB02000000        <1> 	sub ebx, 2
  8156                              <1> eqfilefind:
  8157 0000658E 43                  <1> 	inc ebx
  8158 0000658F 81FB[48A20000]      <1> 	cmp ebx, enddiskfileindex
  8159 00006595 0F83E7FFFFFF        <1> 	jae near nofileload
  8160 0000659B 8A03                <1> 	mov al, [ebx]
  8161 0000659D 3C00                <1> 	cmp al, 0
  8162 0000659F 75ED                <1> 	jne eqfilefind
  8163 000065A1 43                  <1> 	inc ebx
  8164                              <1> equalfilenames:
  8165 000065A2 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8166 000065A5 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8167 000065A7 031D[4AA20000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  8168 000065AD 31C9                <1> 	xor ecx, ecx
  8169 000065AF 88C1                <1> 	mov cl, al			;get excess number of sectors
  8170 000065B1 C0E102              <1> 	shl cl, 2
  8171 000065B4 C0E902              <1> 	shr cl, 2			;cut off at 64
  8172 000065B7 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8173 000065B9 B500                <1> 	mov ch, 0			;drive 0
  8174 000065BB C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8175                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8176 000065BE A3[00660000]        <1> 	mov [filetracks], eax
  8177 000065C3 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8178 000065C5 89DA                <1> 	mov edx, ebx
  8179 000065C7 80F900              <1> 	cmp cl, 0
  8180 000065CA 7405                <1> 	je copytracksforfile
  8181 000065CC E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8182                              <1> copytracksforfile:
  8183 000065D1 A1[00660000]        <1> 	mov eax, [filetracks]
  8184 000065D6 3D00000000          <1> 	cmp eax, 0
  8185 000065DB 7419                <1> 	je donecopyfile
  8186 000065DD 48                  <1> 	dec eax
  8187 000065DE A3[00660000]        <1> 	mov [filetracks], eax
  8188 000065E3 89D3                <1> 	mov ebx, edx	;get end lba
  8189 000065E5 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8190 000065E7 8A2D[49A20000]      <1> 	mov ch, [DriveNumber]
  8191 000065ED 89FE                <1> 	mov esi, edi	;reset buffer
  8192 000065EF E87CFEFFFF          <1> 	call diskr
  8193 000065F4 EBDB                <1> 	jmp copytracksforfile
  8194                              <1> donecopyfile:
  8195 000065F6 BA00000000          <1> 	mov edx, 0	;no error
  8196 000065FB C3                  <1> 	ret
  8197                              <1> 
  8198 000065FC 00000000            <1> oldesireal dd 0
  8199 00006600 00000000            <1> filetracks dd 0
  8200 00006604 00                  <1> lbad1 db 0
  8201 00006605 00                  <1> lbad2 db 0
  8202 00006606 00                  <1> lbad3 db 0
  8203 00006607 00                  <1> lbad4 db 0
  8204 00006608 00                  <1> lbad5 db 0
  8205 00006609 00                  <1> lbad6 db 0
  8206 0000660A 6400                <1> segments dw 100
  8207                              <1> 
  8208                              <1> 
  8209                              <1> 	
  8210                                      %include "source/threads.asm"
  8211                              <1> %ifdef threads.included	
  8212                              <1> nwcmdst:
  8213 0000660C 31C0                <1> 	xor eax, eax
  8214 0000660E BC[2EB40000]        <1> 	mov esp, stackend
  8215 00006613 A2[D0660000]        <1> 	mov [threadson], al
  8216 00006618 A3[D1660000]        <1> 	mov [currentthread], eax
  8217 0000661D 0504000000          <1> 	add eax, 4
  8218 00006622 A3[CC660000]        <1> 	mov [lastthread], eax
  8219 00006627 FB                  <1> 	sti
  8220 00006628 E9FAC4FFFF          <1> 	jmp nwcmd
  8221                              <1> 
  8222                              <1> nomorethreadspace:
  8223 0000662D BE[43660000]        <1> 	mov esi, nmts
  8224 00006632 E823B7FFFF          <1> 	call print
  8225 00006637 C605[D0660000]00    <1> 	mov byte [threadson], 0
  8226 0000663E E9E4C4FFFF          <1> 	jmp nwcmd
  8227 00006643 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8228 0000664C 6572666C6F770A00    <1>
  8229                              <1> 
  8230                              <1> nomorestackspace:
  8231 00006654 BE[60660000]        <1> 	mov esi, nmss
  8232 00006659 E8FCB6FFFF          <1> 	call print
  8233 0000665E EBAC                <1> 	jmp nwcmdst
  8234 00006660 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8235 00006669 72666C6F770A00      <1>
  8236                              <1> 	
  8237                              <1> threadswitch:
  8238 00006670 FA                  <1> 	cli
  8239 00006671 60                  <1> 	pushad
  8240 00006672 BF[94DB0100]        <1> 	mov edi, threadlist
  8241 00006677 A1[D1660000]        <1> 	mov eax, [currentthread]
  8242 0000667C 40                  <1> 	inc eax
  8243 0000667D A3[D1660000]        <1> 	mov [currentthread], eax
  8244 00006682 6648                <1> 	dec ax
  8245 00006684 C1E002              <1> 	shl eax, 2
  8246 00006687 01C7                <1> 	add edi, eax
  8247 00006689 8927                <1> 	mov [edi], esp
  8248 0000668B 81C704000000        <1> 	add edi, 4
  8249 00006691 81FF[94EB0100]      <1> 	cmp edi, threadlistend
  8250 00006697 0F830D000000        <1> 	jae near nookespthread
  8251 0000669D 8B07                <1> 	mov eax, [edi]
  8252 0000669F 3D00000000          <1> 	cmp eax, 0
  8253 000066A4 0F8519000000        <1> 	jne near okespthread
  8254                              <1> nookespthread:
  8255 000066AA BF[94DB0100]        <1> 	mov edi, threadlist
  8256 000066AF 31C0                <1> 	xor eax, eax
  8257 000066B1 A3[D1660000]        <1> 	mov [currentthread], eax
  8258 000066B6 8B07                <1> 	mov eax, [edi]
  8259 000066B8 3D00000000          <1> 	cmp eax, 0
  8260 000066BD 0F8449FFFFFF        <1> 	je near nwcmdst
  8261                              <1> okespthread:
  8262 000066C3 89C4                <1> 	mov esp, eax
  8263 000066C5 B020                <1> 	mov al, 0x20
  8264 000066C7 E620                <1> 	out 0x20, al
  8265 000066C9 61                  <1> 	popad
  8266 000066CA FB                  <1> 	sti
  8267 000066CB CF                  <1> 	iret
  8268                              <1> 
  8269                              <1> %endif
  8270 000066CC 04000000            <1> 	lastthread dd 4
  8271 000066D0 00                  <1> 	threadson db 0
  8272 000066D1 00000000            <1> 	currentthread dd 0
  8273                                  %ifdef gui.included
  8274                                      %include "source/gui/gui.asm"
  8275                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8276 000066D5 31C0                <1> 	xor eax, eax
  8277 000066D7 31DB                <1> 	xor ebx, ebx
  8278 000066D9 31C9                <1> 	xor ecx, ecx
  8279 000066DB 31D2                <1> 	xor edx, edx
  8280 000066DD E8A8070000          <1> 	call guisetup
  8281                              <1> guiloop:
  8282 000066E2 E8F2F0FFFF          <1> 	call cursorgui
  8283                              <1> guistart:
  8284 000066E7 E8FBF6FFFF          <1> 	call getkey
  8285 000066EC C605[E17A0000]00    <1> 	mov byte [copygui], 0
  8286 000066F3 EBF2                <1> 	jmp guistart
  8287                              <1> 
  8288                              <1> %include "source/gui/bmp.asm"
  8289                              <2> showbmp:
  8290 000066F5 668B06              <2> 	mov ax, [esi]
  8291 000066F8 663D424D            <2> 	cmp ax, "BM"
  8292 000066FC 0F85BB000000        <2> 	jne near endedbmp
  8293 00006702 8B3D[FC560000]      <2> 	mov edi, [physbaseptr]
  8294 00006708 6689D0              <2> 	mov ax, dx
  8295 0000670B 6689CB              <2> 	mov bx, cx
  8296 0000670E 31C9                <2> 	xor ecx, ecx
  8297 00006710 31D2                <2> 	xor edx, edx
  8298 00006712 6689D9              <2> 	mov cx, bx
  8299 00006715 6689C2              <2> 	mov dx, ax
  8300 00006718 01D7                <2> 	add edi, edx
  8301 0000671A 01D7                <2> 	add edi, edx
  8302 0000671C 31D2                <2> 	xor edx, edx
  8303 0000671E 668B15[D4570000]    <2> 	mov dx, [resolutionx2]
  8304 00006725 034E16              <2> 	add ecx, [esi + 22]
  8305                              <2> bmplocloop:
  8306 00006728 52                  <2> 	push edx
  8307 00006729 31C0                <2> 	xor eax, eax
  8308 0000672B 6689D0              <2> 	mov ax, dx
  8309 0000672E F7E1                <2> 	mul ecx
  8310 00006730 5A                  <2> 	pop edx
  8311 00006731 663B0D[E8560000]    <2> 	cmp cx, [resolutiony]
  8312 00006738 7609                <2> 	jbe .nofixy
  8313 0000673A 31C9                <2> 	xor ecx, ecx
  8314 0000673C 668B0D[E8560000]    <2> 	mov cx, [resolutiony]
  8315                              <2> .nofixy:
  8316 00006743 01C7                <2> 	add edi, eax
  8317 00006745 8B5612              <2> 	mov edx, [esi + 18]
  8318 00006748 8B4E16              <2> 	mov ecx, [esi + 22]
  8319 0000674B 8B460A              <2> 	mov eax, [esi + 10]
  8320 0000674E 8B5E02              <2> 	mov ebx, [esi + 2]
  8321 00006751 01F3                <2> 	add ebx, esi
  8322 00006753 891D[C3670000]      <2> 	mov [bmpend], ebx
  8323 00006759 89D3                <2> 	mov ebx, edx
  8324 0000675B 01C6                <2> 	add esi, eax
  8325                              <2> ldxbmp2:
  8326 0000675D 31D2                <2> 	xor edx, edx
  8327 0000675F 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  8328 00006766 39D3                <2> 	cmp ebx, edx
  8329 00006768 7702                <2> 	ja ldxbmp
  8330 0000676A 89DA                <2> 	mov edx, ebx
  8331                              <2> ldxbmp:
  8332 0000676C 668B06              <2> 	mov ax, [esi]
  8333 0000676F 668907              <2> 	mov [edi], ax
  8334 00006772 81C702000000        <2> 	add edi, 2
  8335 00006778 81C602000000        <2> 	add esi, 2
  8336 0000677E 3B35[C3670000]      <2> 	cmp esi, [bmpend]
  8337 00006784 7737                <2> 	ja endedbmp
  8338 00006786 4A                  <2> 	dec edx
  8339 00006787 81FA00000000        <2> 	cmp edx, 0
  8340 0000678D 77DD                <2> 	ja ldxbmp
  8341 0000678F 31D2                <2> 	xor edx, edx
  8342 00006791 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  8343 00006798 39D3                <2> 	cmp ebx, edx
  8344 0000679A 7610                <2> 	jbe .notover
  8345                              <2> .over:
  8346 0000679C 01DE                <2> 	add esi, ebx
  8347 0000679E 01DE                <2> 	add esi, ebx
  8348 000067A0 29D6                <2> 	sub esi, edx
  8349 000067A2 29D6                <2> 	sub esi, edx
  8350 000067A4 01DF                <2> 	add edi, ebx
  8351 000067A6 01DF                <2> 	add edi, ebx
  8352 000067A8 29D7                <2> 	sub edi, edx
  8353 000067AA 29D7                <2> 	sub edi, edx
  8354                              <2> .notover:
  8355 000067AC 29DF                <2> 	sub edi, ebx
  8356 000067AE 29DF                <2> 	sub edi, ebx
  8357 000067B0 29D7                <2> 	sub edi, edx
  8358 000067B2 29D7                <2> 	sub edi, edx
  8359 000067B4 49                  <2> 	dec ecx
  8360 000067B5 81F900000000        <2> 	cmp ecx, 0
  8361 000067BB 77A0                <2> 	ja ldxbmp2
  8362                              <2> endedbmp:
  8363 000067BD E844030000          <2> 	call switchmousepos2
  8364 000067C2 C3                  <2> 	ret
  8365                              <2> 	
  8366 000067C3 00000000            <2> 	bmpend dd 0
  8367                              <1> %include "source/gui/circle.asm"
  8368                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8369 000067C7 55                  <2> 	push ebp
  8370 000067C8 663D0000            <2> 	cmp ax, 0
  8371 000067CC 770A                <2> 	ja .nozerocircle
  8372 000067CE E8031B0000          <2> 	call putpixel	;the easiest circle ever
  8373 000067D3 E9F7000000          <2> 	jmp .done
  8374                              <2> .nozerocircle:
  8375 000067D8 6689F5              <2> 	mov bp, si
  8376 000067DB 6650                <2> 	push ax
  8377 000067DD E8351B0000          <2> 	call getpixelmem
  8378 000067E2 31C0                <2> 	xor eax, eax
  8379 000067E4 6658                <2> 	pop ax
  8380 000067E6 BE01000000          <2> 	mov esi, 1
  8381 000067EB 29C6                <2> 	sub esi, eax
  8382 000067ED 89C1                <2> 	mov ecx, eax
  8383 000067EF 31C0                <2> 	xor eax, eax
  8384 000067F1 66A1[D4570000]      <2> 	mov ax, [resolutionx2]
  8385 000067F7 F7E1                <2> 	mul ecx
  8386 000067F9 50                  <2> 	push eax
  8387 000067FA 31D2                <2> 	xor edx, edx
  8388 000067FC 01C7                <2> 	add edi, eax
  8389 000067FE 66892F              <2> 	mov [edi], bp
  8390 00006801 29C7                <2> 	sub edi, eax
  8391 00006803 29C7                <2> 	sub edi, eax
  8392 00006805 66892F              <2> 	mov [edi], bp
  8393 00006808 01C7                <2> 	add edi, eax
  8394 0000680A D1E1                <2> 	shl ecx, 1
  8395 0000680C 01CF                <2> 	add edi, ecx
  8396 0000680E 66892F              <2> 	mov [edi], bp
  8397 00006811 D1E1                <2> 	shl ecx, 1
  8398 00006813 29CF                <2> 	sub edi, ecx
  8399 00006815 66892F              <2> 	mov [edi], bp
  8400 00006818 D1E9                <2> 	shr ecx, 1
  8401 0000681A 01CF                <2> 	add edi, ecx
  8402 0000681C D1E9                <2> 	shr ecx, 1
  8403 0000681E B802000000          <2> 	mov eax, 2
  8404 00006823 F7E1                <2> 	mul ecx
  8405 00006825 48                  <2> 	dec eax
  8406 00006826 F7D0                <2> 	not eax ;make it negative
  8407 00006828 A3[D5680000]        <2> 	mov [.ddF_y], eax
  8408 0000682D 58                  <2> 	pop eax
  8409 0000682E BB01000000          <2> 	mov ebx, 1
  8410 00006833 891D[D1680000]      <2> 	mov [.ddF_x], ebx
  8411 00006839 4B                  <2> 	dec ebx
  8412 0000683A 31D2                <2> 	xor edx, edx
  8413 0000683C E904000000          <2> 	jmp .lp
  8414                              <2> .lpb:
  8415 00006841 D1EA                <2> 	shr edx, 1
  8416 00006843 D1E9                <2> 	shr ecx, 1
  8417                              <2> .lp:	;it starts this with the center in edi
  8418                              <2> 		;color in bp
  8419                              <2> 		;ddF_x in memory
  8420                              <2> 		;x*resolutionx2 in ebx
  8421                              <2> 		;x in edx
  8422                              <2> 		;ddF_y in memory
  8423                              <2> 		;y*resolutionx2 in eax
  8424                              <2> 		;f in esi
  8425                              <2> 		;y in ecx
  8426 00006845 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8427 0000684B 7717                <2> 	ja	.noddF_y
  8428 0000684D 49                  <2> 	dec ecx
  8429 0000684E 2B05[D4570000]      <2> 	sub eax, [resolutionx2]
  8430 00006854 8105[D5680000]0200- <2> 	add dword [.ddF_y], 2
  8431 0000685C 0000                <2>
  8432 0000685E 0335[D5680000]      <2> 	add esi, [.ddF_y]
  8433                              <2> .noddF_y:
  8434 00006864 42                  <2> 	inc edx
  8435 00006865 031D[D4570000]      <2> 	add ebx, [resolutionx2]
  8436 0000686B 8105[D1680000]0200- <2> 	add dword [.ddF_x], 2
  8437 00006873 0000                <2>
  8438 00006875 0335[D1680000]      <2> 	add esi, [.ddF_x]
  8439                              <2> 
  8440 0000687B D1E2                <2> 	shl edx, 1
  8441 0000687D D1E1                <2> 	shl ecx, 1
  8442 0000687F 01D7                <2> 	add edi, edx
  8443 00006881 01C7                <2> 	add edi, eax
  8444 00006883 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8445 00006886 D1E2                <2> 	shl edx, 1
  8446 00006888 29D7                <2> 	sub edi, edx
  8447 0000688A 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8448 0000688D D1E0                <2> 	shl eax, 1
  8449 0000688F 29C7                <2> 	sub edi, eax
  8450 00006891 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8451 00006894 01D7                <2> 	add edi, edx
  8452 00006896 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8453 00006899 D1E8                <2> 	shr eax, 1
  8454 0000689B D1EA                <2> 	shr edx, 1
  8455 0000689D 01C7                <2> 	add edi, eax
  8456 0000689F 29D7                <2> 	sub edi, edx
  8457                              <2> 
  8458 000068A1 39D1                <2> 	cmp ecx, edx
  8459 000068A3 749C                <2> 	je .lpb
  8460                              <2> 
  8461 000068A5 01DF                <2> 	add edi, ebx
  8462 000068A7 01CF                <2> 	add edi, ecx
  8463 000068A9 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8464 000068AC D1E1                <2> 	shl ecx, 1
  8465 000068AE 29CF                <2> 	sub edi, ecx
  8466 000068B0 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8467 000068B3 D1E3                <2> 	shl ebx, 1
  8468 000068B5 29DF                <2> 	sub edi, ebx
  8469 000068B7 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8470 000068BA 01CF                <2> 	add edi, ecx
  8471 000068BC 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8472 000068BF D1EB                <2> 	shr ebx, 1
  8473 000068C1 D1E9                <2> 	shr ecx, 1
  8474 000068C3 01DF                <2> 	add edi, ebx
  8475 000068C5 29CF                <2> 	sub edi, ecx
  8476 000068C7 39CA                <2> 	cmp edx, ecx
  8477 000068C9 0F8272FFFFFF        <2> 	jb .lpb
  8478                              <2> .done:
  8479 000068CF 5D                  <2> 	pop ebp
  8480 000068D0 C3                  <2> 	ret
  8481                              <2> 	
  8482 000068D1 00000000            <2> .ddF_x dd 0
  8483 000068D5 00000000            <2> .ddF_y dd 0
  8484                              <2> 
  8485                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8486 000068D9 55                  <2> 	push ebp
  8487 000068DA 663D0000            <2> 	cmp ax, 0
  8488 000068DE 770A                <2> 	ja .nozerocircle
  8489 000068E0 E8F1190000          <2> 	call putpixel	;the easiest circle ever
  8490 000068E5 E95A010000          <2> 	jmp .done
  8491                              <2> .nozerocircle:
  8492 000068EA 6689F5              <2> 	mov bp, si
  8493 000068ED 6650                <2> 	push ax
  8494 000068EF E8231A0000          <2> 	call getpixelmem
  8495 000068F4 31C0                <2> 	xor eax, eax
  8496 000068F6 6658                <2> 	pop ax
  8497 000068F8 BE01000000          <2> 	mov esi, 1
  8498 000068FD 29C6                <2> 	sub esi, eax
  8499 000068FF 89C1                <2> 	mov ecx, eax
  8500 00006901 31C0                <2> 	xor eax, eax
  8501 00006903 66A1[D4570000]      <2> 	mov ax, [resolutionx2]
  8502 00006909 F7E1                <2> 	mul ecx
  8503 0000690B 50                  <2> 	push eax
  8504 0000690C 31D2                <2> 	xor edx, edx
  8505 0000690E 01C7                <2> 	add edi, eax
  8506 00006910 66892F              <2> 	mov [edi], bp
  8507 00006913 29C7                <2> 	sub edi, eax
  8508 00006915 29C7                <2> 	sub edi, eax
  8509 00006917 66892F              <2> 	mov [edi], bp
  8510 0000691A 01C7                <2> 	add edi, eax
  8511 0000691C D1E1                <2> 	shl ecx, 1
  8512 0000691E 01CF                <2> 	add edi, ecx
  8513 00006920 51                  <2> 	push ecx
  8514                              <2> .s0:
  8515 00006921 66892F              <2> 	mov [edi], bp
  8516 00006924 81EF02000000        <2> 	sub edi, 2
  8517 0000692A 49                  <2> 	dec ecx
  8518 0000692B 81F900000000        <2> 	cmp ecx, 0
  8519 00006931 75EE                <2> 	jne .s0
  8520 00006933 66892F              <2> 	mov [edi], bp
  8521 00006936 59                  <2> 	pop ecx
  8522 00006937 01CF                <2> 	add edi, ecx
  8523 00006939 D1E9                <2> 	shr ecx, 1
  8524 0000693B B802000000          <2> 	mov eax, 2
  8525 00006940 F7E1                <2> 	mul ecx
  8526 00006942 48                  <2> 	dec eax
  8527 00006943 F7D0                <2> 	not eax ;make it negative
  8528 00006945 A3[4A6A0000]        <2> 	mov [.ddF_y], eax
  8529 0000694A 58                  <2> 	pop eax
  8530 0000694B BB01000000          <2> 	mov ebx, 1
  8531 00006950 891D[466A0000]      <2> 	mov [.ddF_x], ebx
  8532 00006956 4B                  <2> 	dec ebx
  8533 00006957 31D2                <2> 	xor edx, edx
  8534 00006959 E904000000          <2> 	jmp .lp
  8535                              <2> .lpb:
  8536 0000695E D1EA                <2> 	shr edx, 1
  8537 00006960 D1E9                <2> 	shr ecx, 1
  8538                              <2> .lp:	;it starts this with the center in edi
  8539                              <2> 		;color in bp
  8540                              <2> 		;ddF_x in memory
  8541                              <2> 		;x*resolutionx2 in ebx
  8542                              <2> 		;x in edx
  8543                              <2> 		;ddF_y in memory
  8544                              <2> 		;y*resolutionx2 in eax
  8545                              <2> 		;f in esi
  8546                              <2> 		;y in ecx
  8547 00006962 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8548 00006968 7717                <2> 	ja	.noddF_y
  8549 0000696A 49                  <2> 	dec ecx
  8550 0000696B 2B05[D4570000]      <2> 	sub eax, [resolutionx2]
  8551 00006971 8105[4A6A0000]0200- <2> 	add dword [.ddF_y], 2
  8552 00006979 0000                <2>
  8553 0000697B 0335[4A6A0000]      <2> 	add esi, [.ddF_y]
  8554                              <2> .noddF_y:
  8555 00006981 42                  <2> 	inc edx
  8556 00006982 031D[D4570000]      <2> 	add ebx, [resolutionx2]
  8557 00006988 8105[466A0000]0200- <2> 	add dword [.ddF_x], 2
  8558 00006990 0000                <2>
  8559 00006992 0335[466A0000]      <2> 	add esi, [.ddF_x]
  8560                              <2> 
  8561 00006998 D1E2                <2> 	shl edx, 1
  8562 0000699A D1E1                <2> 	shl ecx, 1
  8563 0000699C 52                  <2> 	push edx
  8564 0000699D 29D7                <2> 	sub edi, edx
  8565 0000699F 01C7                <2> 	add edi, eax
  8566 000069A1 81FA00000000        <2> 	cmp edx, 0
  8567 000069A7 7412                <2> 	je .nos1
  8568                              <2> .s1:
  8569 000069A9 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8570 000069AC 81C702000000        <2> 	add edi, 2
  8571 000069B2 4A                  <2> 	dec edx
  8572 000069B3 81FA00000000        <2> 	cmp edx, 0
  8573 000069B9 75EE                <2> 	jne .s1
  8574                              <2> .nos1:
  8575 000069BB 66892F              <2> 	mov [edi], bp
  8576 000069BE 5A                  <2> 	pop edx
  8577 000069BF 52                  <2> 	push edx
  8578 000069C0 29C7                <2> 	sub edi, eax
  8579 000069C2 29C7                <2> 	sub edi, eax
  8580 000069C4 81FA00000000        <2> 	cmp edx, 0
  8581 000069CA 7412                <2> 	je .nos2
  8582                              <2> .s2:
  8583 000069CC 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8584 000069CF 81EF02000000        <2> 	sub edi, 2
  8585 000069D5 4A                  <2> 	dec edx
  8586 000069D6 81FA00000000        <2> 	cmp edx, 0
  8587 000069DC 75EE                <2> 	jne .s2
  8588                              <2> .nos2:
  8589 000069DE 66892F              <2> 	mov [edi], bp
  8590 000069E1 5A                  <2> 	pop edx
  8591 000069E2 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8592 000069E4 01D7                <2> 	add edi, edx
  8593                              <2> 
  8594 000069E6 39D1                <2> 	cmp ecx, edx
  8595 000069E8 0F8470FFFFFF        <2> 	je .lpb
  8596                              <2> 
  8597 000069EE 51                  <2> 	push ecx
  8598 000069EF 01DF                <2> 	add edi, ebx
  8599 000069F1 29CF                <2> 	sub edi, ecx
  8600 000069F3 81F900000000        <2> 	cmp ecx, 0
  8601 000069F9 7412                <2> 	je .nos3
  8602                              <2> .s3:
  8603 000069FB 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8604 000069FE 81C702000000        <2> 	add edi, 2
  8605 00006A04 49                  <2> 	dec ecx
  8606 00006A05 81F900000000        <2> 	cmp ecx, 0
  8607 00006A0B 75EE                <2> 	jne .s3
  8608                              <2> .nos3:
  8609 00006A0D 66892F              <2> 	mov [edi], bp
  8610 00006A10 59                  <2> 	pop ecx
  8611 00006A11 51                  <2> 	push ecx
  8612 00006A12 29DF                <2> 	sub edi, ebx
  8613 00006A14 29DF                <2> 	sub edi, ebx
  8614 00006A16 81F900000000        <2> 	cmp ecx, 0
  8615 00006A1C 7412                <2> 	je .nos4
  8616                              <2> .s4:
  8617 00006A1E 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8618 00006A21 81EF02000000        <2> 	sub edi, 2
  8619 00006A27 49                  <2> 	dec ecx
  8620 00006A28 81F900000000        <2> 	cmp ecx, 0
  8621 00006A2E 75EE                <2> 	jne .s4
  8622                              <2> .nos4:
  8623 00006A30 66892F              <2> 	mov [edi], bp
  8624 00006A33 59                  <2> 	pop ecx
  8625 00006A34 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8626 00006A36 01CF                <2> 	add edi, ecx
  8627                              <2> 
  8628 00006A38 D1EA                <2> 	shr edx, 1
  8629 00006A3A D1E9                <2> 	shr ecx, 1
  8630 00006A3C 39CA                <2> 	cmp edx, ecx
  8631 00006A3E 0F821EFFFFFF        <2> 	jb .lp
  8632                              <2> .done:
  8633 00006A44 5D                  <2> 	pop ebp
  8634 00006A45 C3                  <2> 	ret
  8635                              <2> 	
  8636 00006A46 00000000            <2> .ddF_x dd 0
  8637 00006A4A 00000000            <2> .ddF_y dd 0
  8638                              <1> %include "source/gui/cursor.asm"
  8639                              <2> clearmousecursor:
  8640 00006A4E BE[B66D0000]        <2> 		mov esi, background
  8641 00006A53 8B3D[FC560000]      <2> 		mov edi, [physbaseptr]
  8642 00006A59 31D2                <2> 		xor edx, edx
  8643 00006A5B 31C9                <2> 		xor ecx, ecx
  8644 00006A5D 668B15[C6590000]    <2> 		mov dx, [lastmouseposition]
  8645 00006A64 668B0D[C8590000]    <2> 		mov cx, [lastmouseposition + 2]
  8646 00006A6B 01D7                <2> 		add edi, edx
  8647 00006A6D 31D2                <2> 		xor edx, edx
  8648 00006A6F 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  8649 00006A76 81F900000000        <2> 		cmp ecx, 0
  8650 00006A7C 7408                <2> 		je .nomul
  8651 00006A7E 52                  <2> 		push edx
  8652 00006A7F 89D0                <2> 		mov eax, edx
  8653 00006A81 F7E1                <2> 		mul ecx
  8654 00006A83 01C7                <2> 		add edi, eax
  8655 00006A85 5A                  <2> 		pop edx
  8656                              <2> .nomul:
  8657                              <2> %ifdef 	gui.background
  8658                              <2> 		cmp dword [backgroundimage], 0
  8659                              <2> 		je .noyclr
  8660                              <2> 		mov esi, [backgroundimage]
  8661                              <2> 		sub edi, [physbaseptr]
  8662                              <2> 		add esi, edi
  8663                              <2> 		add edi, [physbaseptr]
  8664                              <2> .backlp:
  8665                              <2> 		xor ebx, ebx
  8666                              <2> .noyback:
  8667                              <2> 		mov eax, [esi + ebx]
  8668                              <2> 		mov [edi + ebx], eax
  8669                              <2> 		add ebx, 4
  8670                              <2> 		cmp ebx, 16
  8671                              <2> 		jne .noyback
  8672                              <2> 		add edi, edx
  8673                              <2> 		add esi, edx
  8674                              <2> 		inc cx
  8675                              <2> 		cmp cx, 16
  8676                              <2> 		jb .backlp
  8677                              <2> 		ret
  8678                              <2> %endif
  8679                              <2> .noyclr:
  8680 00006A86 668B06              <2> 		mov ax, [esi]
  8681 00006A89 C1C010              <2> 		rol eax, 16
  8682 00006A8C 668B06              <2> 		mov ax, [esi]
  8683 00006A8F 8907                <2> 		mov [edi], eax
  8684 00006A91 894704              <2> 		mov [edi + 4], eax
  8685 00006A94 894708              <2> 		mov [edi + 8], eax
  8686 00006A97 89470C              <2> 		mov [edi + 12], eax
  8687 00006A9A 01D7                <2> 		add edi, edx
  8688 00006A9C 6641                <2> 		inc cx
  8689 00006A9E 6681F91000          <2> 		cmp cx, 16
  8690 00006AA3 72E1                <2> 		jb .noyclr
  8691 00006AA5 C3                  <2> 		ret
  8692                              <2> 
  8693                              <2> switchmousepos:		;;switch were the mouse is located
  8694 00006AA6 BE[27D50000]        <2> 		mov esi, mousecolorbuf
  8695 00006AAB 8B3D[FC560000]      <2> 		mov edi, [physbaseptr]
  8696 00006AB1 31D2                <2> 		xor edx, edx
  8697 00006AB3 31C9                <2> 		xor ecx, ecx
  8698 00006AB5 668B15[C6590000]    <2> 		mov dx, [lastmouseposition]
  8699 00006ABC 668B0D[C8590000]    <2> 		mov cx, [lastmouseposition + 2]
  8700 00006AC3 01D7                <2> 		add edi, edx
  8701 00006AC5 31D2                <2> 		xor edx, edx
  8702 00006AC7 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  8703 00006ACE 6681F90000          <2> 		cmp cx, 0
  8704 00006AD3 740B                <2> 		je noswmsy
  8705 00006AD5 01D7                <2> swmsy:		add edi, edx
  8706 00006AD7 6649                <2> 		dec cx
  8707 00006AD9 6681F90000          <2> 		cmp cx, 0
  8708 00006ADE 75F5                <2> 		jne swmsy
  8709 00006AE0 8B06                <2> noswmsy:	mov eax, [esi]
  8710 00006AE2 8B5E04              <2> 		mov ebx, [esi + 4]
  8711 00006AE5 8907                <2> 		mov [edi], eax
  8712 00006AE7 895F04              <2> 		mov [edi + 4], ebx
  8713 00006AEA 8B4608              <2> 		mov eax, [esi + 8]
  8714 00006AED 8B5E0C              <2> 		mov ebx, [esi + 12]
  8715 00006AF0 894708              <2> 		mov [edi + 8], eax
  8716 00006AF3 895F0C              <2> 		mov [edi + 12], ebx
  8717 00006AF6 01D7                <2> 		add edi, edx
  8718 00006AF8 81C610000000        <2> 		add esi, 16
  8719 00006AFE 81FE[27D60000]      <2> 		cmp esi, mcolorend
  8720 00006B04 72DA                <2> 		jb noswmsy
  8721                              <2> 		
  8722                              <2> switchmousepos2:
  8723 00006B06 BE[27D50000]        <2> 		mov esi, mousecolorbuf
  8724 00006B0B 8B3D[FC560000]      <2> 		mov edi, [physbaseptr]
  8725 00006B11 31D2                <2> 		xor edx, edx
  8726 00006B13 31C9                <2> 		xor ecx, ecx
  8727 00006B15 668B15[CA590000]    <2> 		mov dx, [mousecursorposition]
  8728 00006B1C 668B0D[CC590000]    <2> 		mov cx, [mousecursorposition + 2]
  8729 00006B23 01D7                <2> 		add edi, edx
  8730 00006B25 31D2                <2> 		xor edx, edx
  8731 00006B27 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  8732 00006B2E 6681F90000          <2> 		cmp cx, 0
  8733 00006B33 740B                <2> 		je noswmsy2
  8734 00006B35 01D7                <2> swmsy2:		add edi, edx
  8735 00006B37 6649                <2> 		dec cx
  8736 00006B39 6681F90000          <2> 		cmp cx, 0
  8737 00006B3E 75F5                <2> 		jne swmsy2
  8738 00006B40 8B07                <2> noswmsy2:	mov eax, [edi]
  8739 00006B42 8B5F04              <2> 		mov ebx, [edi + 4]
  8740 00006B45 8906                <2> 		mov [esi], eax
  8741 00006B47 895E04              <2> 		mov [esi + 4], ebx
  8742 00006B4A 8B4708              <2> 		mov eax, [edi + 8]
  8743 00006B4D 8B5F0C              <2> 		mov ebx, [edi + 12]
  8744 00006B50 894608              <2> 		mov [esi + 8], eax
  8745 00006B53 895E0C              <2> 		mov [esi + 12], ebx
  8746 00006B56 01D7                <2> 		add edi, edx
  8747 00006B58 81C610000000        <2> 		add esi, 16
  8748 00006B5E 81FE[27D60000]      <2> 		cmp esi, mcolorend
  8749 00006B64 72DA                <2> 		jb noswmsy2
  8750 00006B66 C3                  <2> 		ret
  8751                              <2> 		
  8752                              <1> %include "source/gui/icon.asm"
  8753 00006B67 0000                <2> iconcolor dw 0
  8754                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8755 00006B69 A2[3F830000]        <2> 		mov [iconselected], al
  8756 00006B6E 8025[3F830000]01    <2> 		and byte [iconselected], 1
  8757 00006B75 B401                <2> 		mov ah, 1
  8758 00006B77 E8EC140000          <2> 		call graphicsadd
  8759                              <2> 	showicon2:
  8760 00006B7C 8B3D[FC560000]      <2> 		mov edi, [physbaseptr]
  8761 00006B82 6601D2              <2> 		add dx, dx
  8762 00006B85 663B15[D4570000]    <2> 		cmp dx, [resolutionx2]
  8763 00006B8C 720C                <2> 		jb screenxgood
  8764 00006B8E 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  8765 00006B95 6681EA4000          <2> 		sub dx, 64
  8766                              <2> 	screenxgood:
  8767 00006B9A 6681F90000          <2> 		cmp cx, 0
  8768 00006B9F 742B                <2> 		je noscreenygoodchk
  8769 00006BA1 663B0D[E8560000]    <2> 		cmp cx, [resolutiony]
  8770 00006BA8 720C                <2> 		jb screenygood
  8771 00006BAA 668B0D[E8560000]    <2> 		mov cx, [resolutiony]
  8772 00006BB1 6681E92000          <2> 		sub cx, 32
  8773                              <2> 	screenygood:
  8774 00006BB6 50                  <2> 		push eax
  8775 00006BB7 52                  <2> 		push edx
  8776 00006BB8 31C0                <2> 		xor eax, eax
  8777 00006BBA 31DB                <2> 		xor ebx, ebx
  8778 00006BBC 668B1D[D4570000]    <2> 		mov bx, [resolutionx2]
  8779 00006BC3 6689C8              <2> 		mov ax, cx
  8780 00006BC6 F7E3                <2> 		mul ebx
  8781 00006BC8 01C7                <2> 		add edi, eax
  8782 00006BCA 5A                  <2> 		pop edx
  8783 00006BCB 58                  <2> 		pop eax
  8784                              <2> 	noscreenygoodchk:
  8785 00006BCC 31DB                <2> 		xor ebx, ebx
  8786 00006BCE 6689D3              <2> 		mov bx, dx
  8787 00006BD1 01DF                <2> 		add edi, ebx
  8788 00006BD3 6631C9              <2> 		xor cx, cx
  8789 00006BD6 668B06              <2> 		mov ax, [esi]
  8790 00006BD9 81C602000000        <2> 		add esi, 2
  8791 00006BDF 66A3[676B0000]      <2> 		mov [iconcolor], ax
  8792                              <2> 	writeicon:
  8793 00006BE5 8B06                <2> 		mov eax, [esi]
  8794 00006BE7 D1C0                <2> 		rol eax, 1
  8795 00006BE9 30C9                <2> 		xor cl, cl
  8796                              <2> 	writeiconline:
  8797 00006BEB B201                <2> 		mov dl, 1
  8798 00006BED 20C2                <2> 		and dl, al
  8799 00006BEF 3215[3F830000]      <2> 		xor dl, [iconselected]
  8800 00006BF5 668B1D[B66D0000]    <2> 		mov bx, [background]
  8801 00006BFC 66891F              <2> 		mov [edi], bx
  8802 00006BFF 80FA00              <2> 		cmp dl, 0
  8803 00006C02 740A                <2> 		je noiconline
  8804 00006C04 668B15[676B0000]    <2> 		mov dx, [iconcolor]
  8805 00006C0B 668917              <2> 		mov [edi], dx
  8806                              <2> 	noiconline:
  8807 00006C0E 81C702000000        <2> 		add edi, 2
  8808 00006C14 D1C0                <2> 		rol eax, 1
  8809 00006C16 FEC1                <2> 		inc cl
  8810 00006C18 80F920              <2> 		cmp cl, 32
  8811 00006C1B 72CE                <2> 		jb writeiconline
  8812 00006C1D 81C604000000        <2> 		add esi, 4
  8813 00006C23 FEC5                <2> 		inc ch
  8814 00006C25 31D2                <2> 		xor edx, edx
  8815 00006C27 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  8816 00006C2E 01D7                <2> 		add edi, edx
  8817 00006C30 81EF40000000        <2> 		sub edi, 64
  8818 00006C36 80FD20              <2> 		cmp ch, 32
  8819 00006C39 72AA                <2> 		jb writeicon
  8820 00006C3B 31C0                <2> 		xor eax, eax
  8821 00006C3D C3                  <2> 		ret
  8822                              <1> %include "source/gui/line.asm"
  8823                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8824 00006C3E 668935[606D0000]    <2> 	mov [.color], si
  8825 00006C45 C605[626D0000]00    <2> 	mov byte [.steep], 0
  8826 00006C4C C605[636D0000]00    <2> 	mov byte [.yreversed], 0
  8827 00006C53 E907000000          <2> 	jmp .notsteep
  8828                              <2> .steeploop:
  8829 00006C58 C605[626D0000]01    <2> 	mov byte [.steep], 1
  8830                              <2> .notsteep:
  8831 00006C5F 31FF                <2> 	xor edi, edi
  8832 00006C61 31F6                <2> 	xor esi, esi
  8833 00006C63 6639DA              <2> 	cmp dx, bx
  8834 00006C66 7705                <2> 	ja .noreversex
  8835 00006C68 6687D3              <2> 	xchg dx, bx
  8836 00006C6B 6691                <2> 	xchg cx, ax
  8837                              <2> .noreversex:
  8838 00006C6D 6689D7              <2> 	mov di, dx
  8839 00006C70 6629DF              <2> 	sub di, bx
  8840                              <2> 	
  8841 00006C73 6639C1              <2> 	cmp cx, ax
  8842 00006C76 720B                <2> 	jb .reversey
  8843 00006C78 6689CE              <2> 	mov si, cx
  8844 00006C7B 6629C6              <2> 	sub si, ax
  8845 00006C7E E90D000000          <2> 	jmp .normal
  8846                              <2> .reversey:
  8847 00006C83 C605[636D0000]02    <2> 	mov byte [.yreversed], 2
  8848 00006C8A 6689C6              <2> 	mov si, ax
  8849 00006C8D 6629CE              <2> 	sub si, cx	
  8850                              <2> .normal:
  8851 00006C90 6687CA              <2> 	xchg cx, dx
  8852 00006C93 6693                <2> 	xchg ax, bx
  8853 00006C95 6639FE              <2> 	cmp si, di
  8854 00006C98 77BE                <2> 	ja .steeploop
  8855 00006C9A 6687CA              <2> 	xchg cx, dx
  8856 00006C9D 6693                <2> 	xchg ax, bx
  8857                              <2> 	
  8858 00006C9F 6691                <2> 	xchg ax, cx
  8859 00006CA1 6687DA              <2> 	xchg bx, dx
  8860 00006CA4 66893D[666D0000]    <2> 	mov [.xdelta], di
  8861 00006CAB 668935[686D0000]    <2> 	mov [.ydelta], si
  8862 00006CB2 668B35[606D0000]    <2> 	mov si, [.color]
  8863 00006CB9 66891D[646D0000]    <2> 	mov [.endline], bx
  8864 00006CC0 6652                <2> 	push dx
  8865 00006CC2 6651                <2> 	push cx
  8866 00006CC4 6687CA              <2> 	xchg cx, dx
  8867 00006CC7 803D[626D0000]01    <2> 	cmp byte [.steep], 1
  8868 00006CCE 7403                <2> 	je .xchg
  8869 00006CD0 6687D1              <2> 	xchg dx, cx
  8870                              <2> .xchg:
  8871 00006CD3 E83F160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8872 00006CD8 6659                <2> 	pop cx
  8873 00006CDA 665A                <2> 	pop dx
  8874 00006CDC 31C0                <2> 	xor eax, eax
  8875 00006CDE 66A1[666D0000]      <2> 	mov ax, [.xdelta]
  8876 00006CE4 66D1E8              <2> 	shr ax, 1
  8877 00006CE7 8A0D[626D0000]      <2> 	mov cl, [.steep]
  8878 00006CED 0A0D[636D0000]      <2> 	or cl, [.yreversed]
  8879 00006CF3 55                  <2> 	push ebp
  8880 00006CF4 668B2D[646D0000]    <2> 	mov bp, [.endline]
  8881 00006CFB 6629D5              <2> 	sub bp, dx
  8882 00006CFE 668B15[686D0000]    <2> 	mov dx, [.ydelta]
  8883                              <2> .lp:
  8884 00006D05 668937              <2> 	mov [edi], si
  8885 00006D08 6639D0              <2> 	cmp ax, dx
  8886 00006D0B 7332                <2> 	jae .noaddx
  8887 00006D0D F6C102              <2> 	test cl, 2
  8888 00006D10 7414                <2> 	jz .nodecy
  8889 00006D12 F6C101              <2> 	test cl, 1
  8890 00006D15 7509                <2> 	jnz .steepy
  8891 00006D17 29DF                <2> 	sub edi, ebx
  8892 00006D19 29DF                <2> 	sub edi, ebx
  8893 00006D1B E906000000          <2> 	jmp .nodecy
  8894                              <2> .steepy:
  8895 00006D20 81EF04000000        <2> 	sub edi, 4
  8896                              <2> .nodecy:
  8897 00006D26 660305[666D0000]    <2> 	add ax, [.xdelta]
  8898 00006D2D F6C101              <2> 	test cl, 1
  8899 00006D30 7507                <2> 	jnz .steepx
  8900 00006D32 01DF                <2> 	add edi, ebx
  8901 00006D34 E906000000          <2> 	jmp .noaddx
  8902                              <2> .steepx:
  8903 00006D39 81C702000000        <2> 	add edi, 2
  8904                              <2> .noaddx:
  8905 00006D3F 6629D0              <2> 	sub ax, dx
  8906 00006D42 664D                <2> 	dec bp
  8907 00006D44 81C702000000        <2> 	add edi, 2
  8908 00006D4A F6C101              <2> 	test cl, 1
  8909 00006D4D 7408                <2> 	jz .nosteepx
  8910 00006D4F 81EF02000000        <2> 	sub edi, 2
  8911 00006D55 01DF                <2> 	add edi, ebx
  8912                              <2> .nosteepx:
  8913 00006D57 6681FD0000          <2> 	cmp bp, 0
  8914 00006D5C 75A7                <2> 	jne .lp
  8915                              <2> .done:
  8916 00006D5E 5D                  <2> 	pop ebp
  8917 00006D5F C3                  <2> 	ret
  8918                              <2> 	
  8919 00006D60 0000                <2> .color dw 0
  8920 00006D62 00                  <2> .steep db 0
  8921 00006D63 00                  <2> .yreversed db 0
  8922 00006D64 0000                <2> .endline dw 0
  8923 00006D66 0000                <2> .xdelta dw 0
  8924 00006D68 0000                <2> .ydelta dw 0
  8925                              <1> %include "source/gui/refresh.asm"
  8926                              <2> guiclear:
  8927 00006D6A 8B3D[FC560000]      <2> 	mov edi, [physbaseptr]
  8928 00006D70 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  8929 00006D77 668B0D[E8560000]    <2> 	mov cx, [resolutiony]
  8930 00006D7E 668B1D[B66D0000]    <2> 	mov bx, [background]
  8931 00006D85 66891D[B86D0000]    <2> 	mov [background + 2], bx
  8932                              <2> %ifdef gui.background
  8933                              <2> 	cmp dword [backgroundimage], 0
  8934                              <2> 	je guiclear.noback
  8935                              <2> 		mov esi, [backgroundimage]
  8936                              <2> 	.lp:
  8937                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8938                              <2> 		;movdqa [edi], xmm0
  8939                              <2> 		;add esi, 16
  8940                              <2> 		;add edi, 16
  8941                              <2> 		;sub dx, 8
  8942                              <2> 		mov eax, [esi]
  8943                              <2> 		mov [edi], eax
  8944                              <2> 		add esi, 4
  8945                              <2> 		add edi, 4
  8946                              <2> 		sub dx, 2
  8947                              <2> 		cmp dx, 0
  8948                              <2> 		ja .lp
  8949                              <2> 		dec cx
  8950                              <2> 		mov dx, [resolutionx]
  8951                              <2> 		cmp cx, 0
  8952                              <2> 		ja .lp
  8953                              <2> 		ret
  8954                              <2> 	backgroundimage dd 0
  8955                              <2> %endif
  8956                              <2> guiclear.noback:
  8957 00006D8C A1[B66D0000]        <2> 	mov eax, [background]
  8958                              <2> guiclearloop:
  8959 00006D91 8907                <2> 	mov [edi], eax
  8960 00006D93 81C704000000        <2> 	add edi, 4
  8961 00006D99 6681EA0200          <2> 	sub dx, 2
  8962 00006D9E 6681FA0000          <2> 	cmp dx, 0
  8963 00006DA3 77EC                <2> 	ja guiclearloop
  8964 00006DA5 6649                <2> 	dec cx
  8965 00006DA7 668B15[E6560000]    <2> 	mov dx, [resolutionx]
  8966 00006DAE 6681F90000          <2> 	cmp cx, 0
  8967 00006DB3 77DC                <2> 	ja guiclearloop
  8968 00006DB5 C3                  <2> 	ret
  8969                              <2> 
  8970 00006DB6 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8971                              <2> 	.original equ 0111101111001111b
  8972                              <2> 
  8973                              <2> reloadallgraphics:
  8974 00006DBA BF[27D30000]        <2> 		mov edi, graphicstable
  8975                              <2> reloadgraphicsloop:
  8976 00006DBF 8B7702              <2> 		mov esi, [edi + 2]
  8977 00006DC2 668B5706            <2> 		mov dx, [edi + 6]
  8978 00006DC6 668B4F08            <2> 		mov cx, [edi + 8]
  8979 00006DCA 668B07              <2> 		mov ax, [edi]
  8980 00006DCD 668B5F0A            <2> 		mov bx, [edi + 10]
  8981 00006DD1 893D[54800000]      <2> 		mov [grpctblpos], edi
  8982 00006DD7 3B3D[EB7A0000]      <2> 		cmp edi, [dragging]
  8983 00006DDD 741E                <2> 		je loadedgraphic
  8984 00006DDF 663D0100            <2> 		cmp ax, 1
  8985 00006DE3 0F8436000000        <2> 		je near icongraphic
  8986 00006DE9 663D0200            <2> 		cmp ax, 2
  8987 00006DED 0F843C000000        <2> 		je near stringgraphic
  8988 00006DF3 663D0300            <2> 		cmp ax, 3
  8989 00006DF7 0F8416000000        <2> 		je near windowgraphic
  8990 00006DFD 8B3D[54800000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8991 00006E03 81C710000000        <2> 		add edi, 16
  8992 00006E09 81FF[27D50000]      <2> 		cmp edi, graphicstableend
  8993 00006E0F 732E                <2> 		jae donereloadgraphics
  8994 00006E11 EBAC                <2> 		jmp reloadgraphicsloop
  8995                              <2> windowgraphic:
  8996 00006E13 E83E080000          <2> 		call showwindow2
  8997 00006E18 E8E3AFFFFF          <2> 		call cleardouble
  8998 00006E1D EBDE                <2> 		jmp loadedgraphic
  8999 00006E1F 80E301              <2> icongraphic:	and bl, 1
  9000 00006E22 881D[3F830000]      <2> 		mov [iconselected], bl
  9001 00006E28 E84FFDFFFF          <2> 		call showicon2
  9002 00006E2D EBCE                <2> 		jmp loadedgraphic
  9003 00006E2F 80E301              <2> stringgraphic:  and bl, 1
  9004 00006E32 881D[E77A0000]      <2> 		mov [mouseselecton], bl
  9005 00006E38 E805050000          <2> 		call showstring2
  9006 00006E3D EBBE                <2> 		jmp loadedgraphic
  9007                              <2> donereloadgraphics:
  9008 00006E3F 8B3D[EB7A0000]      <2> 		mov edi, [dragging]
  9009 00006E45 81FF[27D30000]      <2> 		cmp edi, graphicstable
  9010 00006E4B 7226                <2> 		jb notcorrectdrag
  9011 00006E4D 668B07              <2> 		mov ax, [edi]
  9012 00006E50 8B7702              <2> 		mov esi, [edi + 2]
  9013 00006E53 668B5706            <2> 		mov dx, [edi + 6]
  9014 00006E57 668B4F08            <2> 		mov cx, [edi + 8]
  9015 00006E5B 668B5F0A            <2> 		mov bx, [edi + 10]
  9016 00006E5F 663D0100            <2> 		cmp ax, 1
  9017 00006E63 750F                <2> 		jne noticondragging
  9018 00006E65 80E301              <2> 		and bl, 1
  9019 00006E68 881D[3F830000]      <2> 		mov [iconselected], bl
  9020 00006E6E E809FDFFFF          <2> 		call showicon2
  9021                              <2> notcorrectdrag:
  9022 00006E73 C3                  <2> 		ret
  9023                              <2> 
  9024                              <2> 	noticondragging:
  9025 00006E74 663D0200            <2> 		cmp ax, 2
  9026 00006E78 75F9                <2> 		jne notcorrectdrag
  9027 00006E7A 80E301              <2> 		and bl, 1
  9028 00006E7D 881D[E77A0000]      <2> 		mov [mouseselecton], bl
  9029 00006E83 E8BA040000          <2> 		call showstring2
  9030 00006E88 EBE9                <2> 		jmp notcorrectdrag
  9031                              <1> %include "source/gui/startup.asm"
  9032                              <2> guisetup:
  9033                              <2> 	%ifdef gui.background
  9034                              <2> 	xor ebx, ebx
  9035                              <2> 	mov [backgroundimage], ebx
  9036                              <2> 	%endif
  9037 00006E8A E8DBFEFFFF          <2> 	call guiclear
  9038 00006E8F C605[48A20000]01    <2> 	mov byte [guion], 1
  9039 00006E96 C605[E77A0000]00    <2> 	mov byte [mouseselecton], 0
  9040 00006E9D 31C0                <2> 	xor eax, eax
  9041 00006E9F 31DB                <2> 	xor ebx, ebx
  9042 00006EA1 31C9                <2> 	xor ecx, ecx
  9043 00006EA3 31D2                <2> 	xor edx, edx
  9044                              <2> 	
  9045 00006EA5 BE[67700000]        <2> 	mov esi, pacmsg
  9046 00006EAA 30E4                <2> 	xor ah, ah
  9047 00006EAC B010                <2> 	mov al, 00010000b
  9048 00006EAE 31DB                <2> 	xor ebx, ebx
  9049 00006EB0 66B99000            <2> 	mov cx, 144
  9050 00006EB4 66BA0400            <2> 	mov dx, 4
  9051 00006EB8 E872040000          <2> 	call showstring
  9052                              <2> 	
  9053 00006EBD BE[A5700000]        <2> 	mov esi, interneticon
  9054 00006EC2 30E4                <2> 	xor ah, ah
  9055 00006EC4 B010                <2> 	mov al, 00010000b
  9056 00006EC6 BB[906F0000]        <2> 	mov ebx, noie
  9057 00006ECB 66B91800            <2> 	mov cx, 24
  9058 00006ECF 66BA0400            <2> 	mov dx, 4
  9059 00006ED3 E891FCFFFF          <2> 	call showicon
  9060                              <2> 	
  9061 00006ED8 BE[27710000]        <2> 	mov esi, wordicon
  9062 00006EDD 30E4                <2> 	xor ah, ah
  9063 00006EDF B010                <2> 	mov al, 00010000b
  9064 00006EE1 31DB                <2> 	xor ebx, ebx
  9065 00006EE3 66B91800            <2> 	mov cx, 24
  9066 00006EE7 66BA3000            <2> 	mov dx, 48
  9067 00006EEB E879FCFFFF          <2> 	call showicon
  9068                              <2> 	
  9069 00006EF0 BE[A9710000]        <2> 	mov esi, pacmanpellet
  9070 00006EF5 30E4                <2> 	xor ah, ah
  9071 00006EF7 B010                <2> 	mov al, 00010000b
  9072 00006EF9 31DB                <2> 	xor ebx, ebx
  9073 00006EFB 66B94000            <2> 	mov cx, 64
  9074 00006EFF 66BA0400            <2> 	mov dx, 4
  9075 00006F03 E861FCFFFF          <2> 	call showicon
  9076                              <2> 	
  9077 00006F08 BE[AD720000]        <2> 	mov esi, pacman
  9078 00006F0D 30E4                <2> 	xor ah, ah
  9079 00006F0F B010                <2> 	mov al, 00010000b
  9080 00006F11 BB[796F0000]        <2> 	mov ebx, pacmannomnom
  9081 00006F16 66B94000            <2> 	mov cx, 64
  9082 00006F1A 66BA3000            <2> 	mov dx, 48
  9083 00006F1E E846FCFFFF          <2> 	call showicon
  9084                              <2> 	
  9085 00006F23 BE[2B720000]        <2> 	mov esi, ghostie
  9086 00006F28 30E4                <2> 	xor ah, ah
  9087 00006F2A B010                <2> 	mov al, 00010000b
  9088 00006F2C BB[626F0000]        <2> 	mov ebx, boo
  9089 00006F31 66B96C00            <2> 	mov cx, 108
  9090 00006F35 66BA0400            <2> 	mov dx, 4
  9091 00006F39 E82BFCFFFF          <2> 	call showicon
  9092                              <2> 	
  9093 00006F3E BE[49700000]        <2> 	mov esi, start
  9094 00006F43 668B0D[E8560000]    <2> 	mov cx, [resolutiony]
  9095 00006F4A 6681E91000          <2> 	sub cx, 16
  9096 00006F4F 66BA0200            <2> 	mov dx, 2
  9097 00006F53 30E4                <2> 	xor ah, ah
  9098 00006F55 B010                <2> 	mov al, 00010000b
  9099 00006F57 BB[05700000]        <2> 	mov ebx, winblows
  9100 00006F5C E8CE030000          <2> 	call showstring
  9101                              <2> 
  9102                              <2> %ifdef gui.time	
  9103                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9104                              <2> %endif
  9105 00006F61 C3                  <2> 	ret
  9106                              <2> 
  9107                              <2> 	boo:
  9108 00006F62 BE[62700000]        <2> 		mov esi, boomsg
  9109 00006F67 66BA6400            <2> 		mov dx, 100
  9110 00006F6B 66B94001            <2> 		mov cx, 320
  9111 00006F6F 31DB                <2> 		xor ebx, ebx
  9112 00006F71 6631C0              <2> 		xor ax, ax
  9113 00006F74 E9B6030000          <2> 		jmp showstring
  9114                              <2> 
  9115                              <2> 	pacmannomnom:
  9116 00006F79 BE[80700000]        <2> 		mov esi, pacnom
  9117 00006F7E 66BA8200            <2> 		mov dx, 130
  9118 00006F82 66B93C00            <2> 		mov cx, 60
  9119 00006F86 31DB                <2> 		xor ebx, ebx
  9120 00006F88 6631C0              <2> 		xor ax, ax
  9121 00006F8B E99F030000          <2> 		jmp showstring	
  9122                              <2> 	
  9123                              <2> 	noie:
  9124 00006F90 66C705[8F700000]80- <2> 		mov word [termwindow], 640
  9125 00006F98 02                  <2>
  9126 00006F99 66C705[91700000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9127 00006FA1 01                  <2>
  9128 00006FA2 BE[8F700000]        <2> 		mov esi, termwindow
  9129 00006FA7 66BA1000            <2> 		mov dx, 16
  9130 00006FAB 66B91000            <2> 		mov cx, 16
  9131 00006FAF 31DB                <2> 		xor ebx, ebx
  9132 00006FB1 6631C0              <2> 		xor ax, ax
  9133 00006FB4 E8DF050000          <2> 		call showwindow
  9134 00006FB9 E9A6B9FFFF          <2> 		jmp os
  9135                              <2> 
  9136                              <2> 	gotomenuboot:
  9137 00006FBE 31D2                <2> 		xor edx, edx
  9138 00006FC0 31C9                <2> 		xor ecx, ecx
  9139 00006FC2 668B15[E6560000]    <2> 		mov dx, [resolutionx]
  9140 00006FC9 668B0D[E8560000]    <2> 		mov cx, [resolutiony]
  9141 00006FD0 66C1E904            <2> 		shr cx, 4
  9142 00006FD4 6681E90100          <2> 		sub cx, 1
  9143 00006FD9 66C1E104            <2> 		shl cx, 4
  9144 00006FDD 668915[8F700000]    <2> 		mov [termwindow], dx
  9145 00006FE4 66890D[91700000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9146 00006FEB BE[8F700000]        <2> 		mov esi, termwindow
  9147 00006FF0 6631D2              <2> 		xor dx, dx
  9148 00006FF3 6631C9              <2> 		xor cx, cx
  9149 00006FF6 31DB                <2> 		xor ebx, ebx
  9150 00006FF8 6631C0              <2> 		xor ax, ax
  9151 00006FFB E898050000          <2> 		call showwindow
  9152 00007000 E95FB9FFFF          <2> 		jmp os
  9153                              <2> 
  9154                              <2> 	winblows:
  9155 00007005 BE[58700000]        <2> 		mov esi, turnoffmsg
  9156 0000700A BB[48520000]        <2> 		mov ebx, turnoff
  9157 0000700F 668B0D[E8560000]    <2> 		mov cx, [resolutiony]
  9158 00007016 6681E92000          <2> 		sub cx, 32
  9159 0000701B 6631D2              <2> 		xor dx, dx
  9160 0000701E 30E4                <2> 		xor ah, ah
  9161 00007020 B010                <2> 		mov al, 00010000b
  9162 00007022 E808030000          <2> 		call showstring
  9163 00007027 BE[4F700000]        <2> 		mov esi, gotomenu
  9164 0000702C 668B0D[E8560000]    <2> 		mov cx, [resolutiony]
  9165 00007033 6681E93000          <2> 		sub cx, 48
  9166 00007038 6631D2              <2> 		xor dx, dx
  9167 0000703B 30E4                <2> 		xor ah, ah
  9168 0000703D B010                <2> 		mov al, 00010000b
  9169 0000703F BB[BE6F0000]        <2> 		mov ebx, gotomenuboot
  9170 00007044 E9E6020000          <2> 		jmp showstring
  9171                              <2> 		
  9172                              <2> 
  9173 00007049 737461727400        <2> 	start	db "start",0
  9174 0000704F 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9175 00007058 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9176 00007061 00                  <2>
  9177 00007062 426F6F2100          <2> 	boomsg db "Boo!",0
  9178 00007067 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9179 00007070 73206561737920746F- <2>
  9180 00007079 20647261772E00      <2>
  9181 00007080 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9182 00007089 6D206E6F6D00        <2>
  9183                              <2> 
  9184 0000708F 20035802            <2> 	termwindow:	dw 800,600	;window size
  9185 00007093 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9186 00007097 [28D60000]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9187 0000709B [CC400100]          <2>
  9188 0000709F 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9189                              <2> 	
  9190 0000709F <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9191 0000709F <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9192 0000709F <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9193 0000709F <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9194 0000709F <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9195                              <2> 
  9196                              <2> %ifdef gui.time
  9197                              <2> guitime:
  9198                              <2> 		call time	;get rtc in timeshow & dateshow
  9199                              <2> 		xor ebx, ebx
  9200                              <2> 		mov dx, [resolutionx2]
  9201                              <2> 		xor cx, cx
  9202                              <2> 		sub dx, 304
  9203                              <2> 		mov esi, dateshow
  9204                              <2> 		mov al, 00010001b
  9205                              <2> 		call showstring
  9206                              <2> 		mov esi, timeshow
  9207                              <2> 		xor ebx, ebx
  9208                              <2> 		mov al, 00010001b
  9209                              <2> 		call showstring
  9210                              <2> 		ret
  9211                              <2> %endif
  9212                              <1> %include "source/gui/text.asm"
  9213                              <2> 	showstring:
  9214 0000732F A2[E77A0000]        <2> 		mov [mouseselecton], al
  9215 00007334 8025[E77A0000]01    <2> 		and byte [mouseselecton], 1
  9216 0000733B B402                <2> 		mov ah, 2
  9217 0000733D E8260D0000          <2> 		call graphicsadd
  9218                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9219 00007342 30E4                <2> 		xor ah, ah
  9220 00007344 8A06                <2> 		mov al, [esi]
  9221 00007346 3C00                <2> 		cmp al, 0
  9222 00007348 741E                <2> 		je doneshowstring
  9223 0000734A 46                  <2> 		inc esi
  9224 0000734B 3CFF                <2> 		cmp al, 255
  9225 0000734D 74F3                <2> 		je showstring2
  9226 0000734F 56                  <2> 		push esi
  9227 00007350 668B1D[70730000]    <2> 		mov bx, [colorfont2]
  9228 00007357 E825000000          <2> 		call showfontvesa
  9229 0000735C 3C0A                <2> 		cmp al, 10
  9230 0000735E 7405                <2> 		je noproceedshst
  9231 00007360 6681C20800          <2> 		add dx, 8
  9232                              <2> 	noproceedshst:
  9233 00007365 5E                  <2> 		pop esi
  9234 00007366 EBDA                <2> 		jmp showstring2
  9235                              <2> 	doneshowstring:
  9236 00007368 C605[E77A0000]00    <2> 		mov byte [mouseselecton], 0
  9237 0000736F C3                  <2> 		ret
  9238                              <2> 
  9239 00007370 FFFF                <2> colorfont2 dw 0xFFFF
  9240 00007372 00                  <2> colorcache db 0
  9241                              <2> 
  9242 00007373 02                  <2> resolutionbytes db 2
  9243 00007374 0000                <2> posxvesa dw 0
  9244 00007376 0000                <2> posyvesa dw 0
  9245 00007378 FFFF                <2> colorfont dw 0xFFFF
  9246                              <2> savefontvesa:		;;same rules as showfontvesa
  9247 0000737A C605[E67A0000]01    <2> 	mov byte [savefonton], 1
  9248                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  9249 00007381 3CFF                <2> 	cmp al, 255
  9250 00007383 7501                <2> 	jne nostopshowfont
  9251 00007385 C3                  <2> 	ret
  9252                              <2> nostopshowfont:
  9253 00007386 66890D[76730000]    <2> 	mov [posyvesa], cx
  9254 0000738D 3C0A                <2> 	cmp al, 10
  9255 0000738F 0F8424000000        <2> 	je near goodvesafontx
  9256 00007395 31C9                <2> 	xor ecx, ecx
  9257 00007397 668B0D[D4570000]    <2> 	mov cx, [resolutionx2]
  9258 0000739E 6639CA              <2> 	cmp dx, cx
  9259 000073A1 7616                <2> 	jbe goodvesafontx
  9260 000073A3 6631D2              <2> 	xor dx, dx
  9261 000073A6 668B0D[76730000]    <2> 	mov cx, [posyvesa]
  9262 000073AD 6681C11000          <2> 	add cx, 16
  9263 000073B2 66890D[76730000]    <2> 	mov [posyvesa], cx
  9264                              <2> goodvesafontx:
  9265 000073B9 668B0D[76730000]    <2> 	mov cx, [posyvesa]
  9266 000073C0 668915[74730000]    <2> 	mov [posxvesa], dx
  9267 000073C7 8B3D[FC560000]      <2> 	mov edi, [physbaseptr]
  9268 000073CD 66891D[78730000]    <2> 	mov [colorfont], bx
  9269 000073D4 31DB                <2> 	xor ebx, ebx
  9270 000073D6 88C3                <2> 	mov bl, al
  9271 000073D8 31C0                <2> 	xor eax, eax
  9272 000073DA 88D8                <2> 	mov al, bl
  9273 000073DC 6689D3              <2> 	mov bx, dx
  9274 000073DF 89DA                <2> 	mov edx, ebx
  9275 000073E1 31DB                <2> 	xor ebx, ebx
  9276 000073E3 6681F90000          <2> 	cmp cx, 0
  9277 000073E8 7414                <2> 	je vesaposloopdn
  9278 000073EA 668B1D[D4570000]    <2> 	mov bx, [resolutionx2]
  9279                              <2> vesaposloop:
  9280 000073F1 52                  <2> 	push edx
  9281 000073F2 50                  <2> 	push eax
  9282 000073F3 31C0                <2> 	xor eax, eax
  9283 000073F5 6689C8              <2> 	mov ax, cx
  9284 000073F8 F7E3                <2> 	mul ebx
  9285 000073FA 01C7                <2> 	add edi, eax
  9286 000073FC 58                  <2> 	pop eax
  9287 000073FD 5A                  <2> 	pop edx
  9288                              <2> vesaposloopdn:
  9289 000073FE 01D7                <2> 	add edi, edx
  9290 00007400 BE[83900000]        <2> 	mov esi, fonts
  9291                              <2> findfontvesa:
  9292 00007405 30E4                <2> 	xor ah, ah
  9293 00007407 3C0A                <2> 	cmp al, 10
  9294 00007409 0F84FE000000        <2> 	je near nwlinevesa
  9295 0000740F C1E004              <2> 	shl eax, 4
  9296 00007412 01C6                <2> 	add esi, eax
  9297 00007414 C1E804              <2> 	shr eax, 4
  9298 00007417 81FE[83A00000]      <2> 	cmp esi, fontend
  9299 0000741D 0F83B9000000        <2> 	jae near donefontvesa
  9300 00007423 4E                  <2> 	dec esi
  9301                              <2> foundfontvesa:
  9302 00007424 46                  <2> 	inc esi
  9303 00007425 803D[E67A0000]01    <2> 	cmp byte [savefonton], 1
  9304 0000742C 0F8401010000        <2> 	je near vesafontsaver
  9305 00007432 30C9                <2> 	xor cl, cl
  9306 00007434 8A06                <2> 	mov al, [esi]
  9307 00007436 668B15[D4570000]    <2> 	mov dx, [resolutionx2]
  9308 0000743D 662B15[74730000]    <2> 	sub dx, [posxvesa]
  9309 00007444 6681FA1000          <2> 	cmp dx, 16
  9310 00007449 7708                <2> 	ja paintfontvesa
  9311 0000744B D0EA                <2> 	shr dl, 1
  9312 0000744D 8815[0C750000]      <2> 	mov [charwidth], dl
  9313                              <2> paintfontvesa:
  9314 00007453 B201                <2> 	mov dl, 1
  9315 00007455 20C2                <2> 	and dl, al
  9316 00007457 803D[E57A0000]01    <2> 	cmp byte [showcursorfonton], 1
  9317 0000745E 0F8435000000        <2> 	je near nodelpaintedfont
  9318 00007464 803D[E57A0000]02    <2> 	cmp byte [showcursorfonton], 2
  9319 0000746B 0F8518000000        <2> 	jne near noswitchcursorfonton
  9320 00007471 80FA00              <2> 	cmp dl, 0
  9321 00007474 0F842E000000        <2> 	je near nopixelset
  9322 0000747A 668B1D[78730000]    <2> 	mov bx, [colorfont]
  9323 00007481 66891F              <2> 	mov [edi], bx
  9324 00007484 E91F000000          <2> 	jmp nopixelset
  9325                              <2> noswitchcursorfonton:
  9326 00007489 3215[E77A0000]      <2> 	xor dl, [mouseselecton]
  9327 0000748F 668B1D[B66D0000]    <2> 	mov bx, [background]
  9328 00007496 66891F              <2> 	mov [edi], bx
  9329                              <2> nodelpaintedfont:
  9330 00007499 80FA00              <2> 	cmp dl, 0
  9331 0000749C 740A                <2> 	je nopixelset
  9332 0000749E 668B15[78730000]    <2> 	mov dx, [colorfont]
  9333 000074A5 668917              <2> 	mov [edi], dx
  9334                              <2> nopixelset:
  9335 000074A8 81C702000000        <2> 	add edi, 2
  9336 000074AE D0C0                <2> 	rol al, 1
  9337 000074B0 FEC1                <2> 	inc cl
  9338 000074B2 3A0D[0C750000]      <2> 	cmp cl, [charwidth]
  9339 000074B8 7299                <2> 	jb paintfontvesa
  9340 000074BA FEC5                <2> 	inc ch
  9341 000074BC 31D2                <2> 	xor edx, edx
  9342 000074BE 668B15[D4570000]    <2> 	mov dx, [resolutionx2]
  9343 000074C5 01D7                <2> 	add edi, edx
  9344 000074C7 31D2                <2> 	xor edx, edx
  9345 000074C9 8A15[0C750000]      <2> 	mov dl, [charwidth]
  9346 000074CF 00D2                <2> 	add dl, dl
  9347 000074D1 29D7                <2> 	sub edi, edx
  9348 000074D3 80FD10              <2> 	cmp ch, 16
  9349 000074D6 0F8248FFFFFF        <2> 	jb foundfontvesa
  9350                              <2> donefontvesa:
  9351 000074DC B208                <2> 	mov dl, 8
  9352 000074DE 8815[0C750000]      <2> 	mov [charwidth], dl
  9353 000074E4 668B15[74730000]    <2> 	mov dx, [posxvesa]
  9354 000074EB 8A1D[0C750000]      <2> 	mov bl, [charwidth]
  9355 000074F1 30FF                <2> 	xor bh, bh
  9356 000074F3 6601DA              <2> 	add dx, bx
  9357 000074F6 668B1D[78730000]    <2> 	mov bx, [colorfont]
  9358 000074FD 668B0D[76730000]    <2> 	mov cx, [posyvesa]
  9359 00007504 C605[E67A0000]00    <2> 	mov byte [savefonton], 0
  9360 0000750B C3                  <2> 	ret
  9361 0000750C 08                  <2> charwidth db 8
  9362                              <2> nwlinevesa:
  9363 0000750D 668B15[74730000]    <2> 	mov dx, [posxvesa]
  9364 00007514 6631D2              <2> 	xor dx, dx
  9365 00007517 668915[74730000]    <2> 	mov [posxvesa], dx
  9366 0000751E 668B0D[76730000]    <2> 	mov cx, [posyvesa]
  9367 00007525 6681C11000          <2> 	add cx, 16
  9368 0000752A 66890D[76730000]    <2> 	mov [posyvesa], cx
  9369 00007531 EBA9                <2> 	jmp donefontvesa
  9370                              <2> vesafontsaver:
  9371 00007533 30C0                <2> 	xor al, al
  9372 00007535 30C9                <2> 	xor cl, cl
  9373                              <2> vesafontsaver2:
  9374 00007537 668B17              <2> 	mov dx, [edi]
  9375 0000753A 663B15[78730000]    <2> 	cmp dx, [colorfont]
  9376 00007541 742F                <2> 	je colorfontmatch
  9377                              <2> donecolormatch:
  9378 00007543 81C702000000        <2> 	add edi, 2
  9379 00007549 D0C0                <2> 	rol al, 1
  9380 0000754B FEC1                <2> 	inc cl
  9381 0000754D 80F908              <2> 	cmp cl, 8
  9382 00007550 72E5                <2> 	jb vesafontsaver2
  9383 00007552 8806                <2> 	mov [esi], al
  9384 00007554 46                  <2> 	inc esi
  9385 00007555 FEC5                <2> 	inc ch
  9386 00007557 31D2                <2> 	xor edx, edx
  9387 00007559 668B15[D4570000]    <2> 	mov dx, [resolutionx2]
  9388 00007560 01D7                <2> 	add edi, edx
  9389 00007562 81EF10000000        <2> 	sub edi, 16
  9390 00007568 80FD10              <2> 	cmp ch, 16
  9391 0000756B 72C6                <2> 	jb vesafontsaver
  9392 0000756D E96AFFFFFF          <2> 	jmp donefontvesa
  9393                              <2> colorfontmatch:
  9394 00007572 0401                <2> 	add al, 1
  9395 00007574 EBCD                <2> 	jmp donecolormatch
  9396                              <1> %include "source/gui/window.asm"
  9397 00007576 0000                <2> winvcopystx dw 0
  9398 00007578 0000                <2> winvcopysty dw 0
  9399 0000757A 0000                <2> winvcopydx dw 0
  9400 0000757C 0000                <2> winvcopycx dw 0
  9401 0000757E FFFF0000            <2> windowcolor dw 0xFFFF,0
  9402 00007582 00000000            <2> windowbufloc: dd 0
  9403 00007586 00000000            <2> windowvideobuf dd 0
  9404 0000758A 00000000            <2> windowvideobuf2 dd 0
  9405 0000758E 00000000            <2> windowinfobuf dd 0
  9406 00007592 0000                <2> termcol dw 0
  9407 00007594 00000000            <2> wincopyendpos dd 0
  9408                              <2> 
  9409                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9410 00007598 C605[9C220000]01    <2> 		mov byte [termguion], 1
  9411 0000759F 6681C11000          <2> 		add cx, 16
  9412 000075A4 668915[76750000]    <2> 		mov [winvcopystx], dx
  9413 000075AB 66890D[78750000]    <2> 		mov [winvcopysty], cx
  9414 000075B2 8935[8E750000]      <2> 		mov [windowinfobuf], esi
  9415 000075B8 668B16              <2> 		mov dx, [esi]
  9416 000075BB 668B4E02            <2> 		mov cx, [esi + 2]
  9417 000075BF 31C0                <2> 		xor eax, eax
  9418 000075C1 31DB                <2> 		xor ebx, ebx
  9419 000075C3 6689D0              <2> 		mov ax, dx
  9420 000075C6 6689CB              <2> 		mov bx, cx
  9421 000075C9 66C1E803            <2> 		shr ax, 3
  9422 000075CD 66C1EB04            <2> 		shr bx, 4
  9423 000075D1 66A3[92750000]      <2> 		mov [termcol], ax
  9424 000075D7 A2[76240000]        <2> 		mov [charxy], al
  9425 000075DC 881D[77240000]      <2> 		mov [charxy + 1], bl
  9426 000075E2 8B7E04              <2> 		mov edi, [esi + 4]
  9427 000075E5 893D[7E750000]      <2> 		mov [windowcolor], edi
  9428 000075EB 8B7E0C              <2> 		mov edi, [esi + 12]
  9429 000075EE 893D[8A750000]      <2> 		mov [windowvideobuf2], edi
  9430 000075F4 8B7E08              <2> 		mov edi, [esi + 8]
  9431 000075F7 893D[86750000]      <2> 		mov [windowvideobuf], edi
  9432 000075FD 81FB00000000        <2> 		cmp ebx, 0
  9433 00007603 0F84BB040000        <2> 		je near donewincopynow
  9434                              <2> 	findendposwin:
  9435 00007609 01C7                <2> 		add edi, eax
  9436 0000760B 01C7                <2> 		add edi, eax
  9437 0000760D 4B                  <2> 		dec ebx
  9438 0000760E 81FB00000000        <2> 		cmp ebx, 0
  9439 00007614 77F3                <2> 		ja findendposwin
  9440 00007616 893D[94750000]      <2> 		mov [wincopyendpos], edi
  9441 0000761C 31FF                <2> 		xor edi, edi
  9442 0000761E 6631C0              <2> 		xor ax, ax
  9443 00007621 6631DB              <2> 		xor bx, bx
  9444 00007624 6601D2              <2> 		add dx, dx
  9445 00007627 668915[7A750000]    <2> 		mov [winvcopydx], dx
  9446 0000762E 66890D[7C750000]    <2> 		mov [winvcopycx], cx
  9447 00007635 668B0D[78750000]    <2> 		mov cx, [winvcopysty]
  9448 0000763C 6681E91000          <2> 		sub cx, 16
  9449 00007641 668B15[76750000]    <2> 		mov dx, [winvcopystx]
  9450 00007648 C605[9D220000]00    <2> 		mov byte [termcopyon], 0
  9451 0000764F B403                <2> 		mov ah, 3
  9452 00007651 E8120A0000          <2> 		call graphicsadd
  9453                              <2> 	showwindow2:
  9454 00007656 6681C11000          <2> 		add cx, 16
  9455 0000765B 668915[76750000]    <2> 		mov [winvcopystx], dx
  9456 00007662 66890D[78750000]    <2> 		mov [winvcopysty], cx
  9457 00007669 668B16              <2> 		mov dx, [esi]
  9458 0000766C 668B4E02            <2> 		mov cx, [esi + 2]
  9459 00007670 6601D2              <2> 		add dx, dx
  9460 00007673 668915[7A750000]    <2> 		mov [winvcopydx], dx
  9461 0000767A 66890D[7C750000]    <2> 		mov [winvcopycx], cx
  9462 00007681 E818000000          <2> 		call reloadwindowtitle
  9463 00007686 803D[4F800000]01    <2> 		cmp byte [windrag], 1
  9464 0000768D 0F8340040000        <2> 		jae near forgetresetstuff
  9465 00007693 8B3D[82750000]      <2> 		mov edi, [windowbufloc]
  9466 00007699 E968020000          <2> 		jmp windowvideocopyset
  9467                              <2> 		
  9468                              <2> 	reloadwindowtitle:
  9469 0000769E 8B3D[82750000]      <2> 		mov edi, [windowbufloc]
  9470 000076A4 31D2                <2> 		xor edx, edx
  9471 000076A6 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  9472 000076AD C1E204              <2> 		shl edx, 4
  9473 000076B0 29D7                <2> 		sub edi, edx
  9474 000076B2 803D[9D220000]00    <2> 		cmp byte [termcopyon], 0
  9475 000076B9 7532                <2> 		jne nocleartitlebarpos
  9476 000076BB 8B3D[FC560000]      <2> 		mov edi, [physbaseptr]
  9477 000076C1 31D2                <2> 		xor edx, edx
  9478 000076C3 668B15[76750000]    <2> 		mov dx, [winvcopystx]
  9479 000076CA 01D7                <2> 		add edi, edx
  9480 000076CC 31C9                <2> 		xor ecx, ecx
  9481 000076CE 668B0D[78750000]    <2> 		mov cx, [winvcopysty]
  9482 000076D5 6681E91000          <2> 		sub cx, 16
  9483 000076DA 6681F90000          <2> 		cmp cx, 0
  9484 000076DF 740C                <2> 		je nocleartitlebarpos
  9485                              <2> 	cleartitlebarpos:
  9486 000076E1 31C0                <2> 		xor eax, eax
  9487 000076E3 66A1[D4570000]      <2> 		mov ax, [resolutionx2]
  9488 000076E9 F7E1                <2> 		mul ecx
  9489 000076EB 01C7                <2> 		add edi, eax
  9490                              <2> 	nocleartitlebarpos:
  9491 000076ED 66B91000            <2> 		mov cx, 16
  9492 000076F1 668B15[7A750000]    <2> 		mov dx, [winvcopydx]
  9493 000076F8 6681F90000          <2> 		cmp cx, 0
  9494 000076FD 0F8448000000        <2> 		je near canceltitlebarput
  9495 00007703 6681FA0000          <2> 		cmp dx, 0
  9496 00007708 0F843D000000        <2> 		je near canceltitlebarput
  9497                              <2> 	titlebarput:
  9498 0000770E 66A1[7E750000]      <2> 		mov ax, [windowcolor]
  9499 00007714 668907              <2> 		mov [edi], ax
  9500 00007717 6681EA0200          <2> 		sub dx, 2
  9501 0000771C 81C702000000        <2> 		add edi, 2
  9502 00007722 6681FA0000          <2> 		cmp dx, 0
  9503 00007727 75E5                <2> 		jne titlebarput
  9504 00007729 31D2                <2> 		xor edx, edx
  9505 0000772B 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  9506 00007732 6649                <2> 		dec cx
  9507 00007734 662B15[7A750000]    <2> 		sub dx, [winvcopydx]
  9508 0000773B 01D7                <2> 		add edi, edx
  9509 0000773D 668B15[7A750000]    <2> 		mov dx, [winvcopydx]
  9510 00007744 6681F90000          <2> 		cmp cx, 0
  9511 00007749 75C3                <2> 		jne titlebarput
  9512                              <2> 	canceltitlebarput:
  9513 0000774B 893D[82750000]      <2> 		mov [windowbufloc], edi
  9514 00007751 803D[9D220000]02    <2> 		cmp byte [termcopyon], 2
  9515 00007758 0F8416010000        <2> 		je near winvcpst
  9516 0000775E 668B1D[B66D0000]    <2> 		mov bx, [background]
  9517 00007765 6653                <2> 		push bx
  9518                              <2> 		;mov bx, 1111111111111111b
  9519 00007767 6631DB              <2> 		xor bx, bx
  9520 0000776A 66891D[B66D0000]    <2> 		mov [background], bx
  9521 00007771 6631C0              <2> 		xor ax, ax
  9522 00007774 81C610000000        <2> 		add esi, 16
  9523 0000777A 668B15[76750000]    <2> 		mov dx, [winvcopystx]
  9524 00007781 668B0D[78750000]    <2> 		mov cx, [winvcopysty]
  9525 00007788 6681E91000          <2> 		sub cx, 16
  9526 0000778D 668B1D[7E750000]    <2> 		mov bx, [windowcolor]
  9527 00007794 C605[E77A0000]01    <2> 		mov byte [mouseselecton], 1
  9528 0000779B E8A2FBFFFF          <2> 		call showstring2	;Show window title
  9529 000077A0 8B35[002B0000]      <2> 		mov esi, [usercache]
  9530 000077A6 6681C21000          <2> 		add dx, 16
  9531 000077AB C605[E77A0000]01    <2> 		mov byte [mouseselecton], 1
  9532 000077B2 E88BFBFFFF          <2> 		call showstring2	;Show user name
  9533 000077B7 BE[4E900000]        <2> 		mov esi, computer
  9534 000077BC C605[E77A0000]01    <2> 		mov byte [mouseselecton], 1
  9535 000077C3 E87AFBFFFF          <2> 		call showstring2	;Show computer name
  9536 000077C8 B058                <2> 		mov al, "X"
  9537 000077CA 30E4                <2> 		xor ah, ah
  9538 000077CC 66BB00F8            <2> 		mov bx, 1111100000000000b
  9539 000077D0 668B15[76750000]    <2> 		mov dx, [winvcopystx]
  9540 000077D7 668B0D[78750000]    <2> 		mov cx, [winvcopysty]
  9541 000077DE 6681E91000          <2> 		sub cx, 16
  9542 000077E3 6681EA1000          <2> 		sub dx, 16
  9543 000077E8 660315[7A750000]    <2> 		add dx, [winvcopydx]
  9544 000077EF C605[E77A0000]01    <2> 		mov byte [mouseselecton], 1
  9545 000077F6 663B15[D4570000]    <2> 		cmp dx, [resolutionx2]
  9546 000077FD 7305                <2> 		jae .nox
  9547 000077FF E87DFBFFFF          <2> 		call showfontvesa
  9548                              <2> .nox:
  9549 00007804 668B1D[B66D0000]    <2> 		mov bx, [background]
  9550 0000780B 6681EA1800          <2> 		sub dx, 24
  9551 00007810 B02B                <2> 		mov al, "+"
  9552 00007812 66BBE007            <2> 		mov bx, 0000011111100000b
  9553 00007816 C605[E77A0000]01    <2> 		mov byte [mouseselecton], 1
  9554 0000781D 663B15[D4570000]    <2> 		cmp dx, [resolutionx2]
  9555 00007824 7305                <2> 		jae .noplus
  9556 00007826 E856FBFFFF          <2> 		call showfontvesa
  9557                              <2> .noplus:
  9558 0000782B 6681EA1800          <2> 		sub dx, 24
  9559 00007830 B02D                <2> 		mov al, "-"
  9560 00007832 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9561 00007836 C605[E77A0000]01    <2> 		mov byte [mouseselecton], 1
  9562 0000783D 663B15[D4570000]    <2> 		cmp dx, [resolutionx2]
  9563 00007844 7305                <2> 		jae .nominus
  9564 00007846 E836FBFFFF          <2> 		call showfontvesa
  9565                              <2> .nominus:
  9566 0000784B 6681EA1800          <2> 		sub dx, 24
  9567 00007850 B03F                <2> 		mov al, "?"
  9568 00007852 66BB1F00            <2> 		mov bx, 0000000000011111b
  9569 00007856 C605[E77A0000]01    <2> 		mov byte [mouseselecton], 1
  9570 0000785D 663B15[D4570000]    <2> 		cmp dx, [resolutionx2]
  9571 00007864 7305                <2> 		jae .noquestion
  9572 00007866 E816FBFFFF          <2> 		call showfontvesa
  9573                              <2> .noquestion:
  9574 0000786B 665B                <2> 		pop bx
  9575 0000786D 66891D[B66D0000]    <2> 		mov [background], bx
  9576                              <2> 	winvcpst:
  9577 00007874 C3                  <2> 		ret
  9578                              <2> 
  9579                              <2> 	windowvideocopy:
  9580 00007875 8B35[8E750000]      <2> 		mov esi, [windowinfobuf]
  9581 0000787B 668B16              <2> 		mov dx, [esi]
  9582 0000787E 668B4E02            <2> 		mov cx, [esi + 2]
  9583 00007882 8B7E04              <2> 		mov edi, [esi + 4]
  9584 00007885 893D[7E750000]      <2> 		mov [windowcolor], edi
  9585 0000788B 8B7E08              <2> 		mov edi, [esi + 8]
  9586 0000788E 8B5E0C              <2> 		mov ebx, [esi + 12]
  9587 00007891 893D[86750000]      <2> 		mov [windowvideobuf], edi
  9588 00007897 891D[8A750000]      <2> 		mov [windowvideobuf2], ebx
  9589 0000789D 31C0                <2> 		xor eax, eax
  9590 0000789F 31DB                <2> 		xor ebx, ebx
  9591 000078A1 6689D0              <2> 		mov ax, dx
  9592 000078A4 6689CB              <2> 		mov bx, cx
  9593 000078A7 66C1E803            <2> 		shr ax, 3
  9594 000078AB 66C1EB04            <2> 		shr bx, 4
  9595 000078AF 66A3[92750000]      <2> 		mov [termcol], ax
  9596 000078B5 A2[76240000]        <2> 		mov [charxy], al
  9597 000078BA 881D[77240000]      <2> 		mov [charxy + 1], bl
  9598 000078C0 8B3D[82750000]      <2> 		mov edi, [windowbufloc]
  9599 000078C6 3B3D[FC560000]      <2> 		cmp edi, [physbaseptr]
  9600 000078CC 0F8334000000        <2> 		jae near windowvideocopyset
  9601 000078D2 31C9                <2> 		xor ecx, ecx
  9602 000078D4 31D2                <2> 		xor edx, edx
  9603 000078D6 668B15[76750000]    <2> 		mov dx, [winvcopystx]
  9604 000078DD 668B0D[78750000]    <2> 		mov cx, [winvcopysty]
  9605 000078E4 8B3D[FC560000]      <2> 		mov edi, [physbaseptr]
  9606 000078EA 01D7                <2> 		add edi, edx
  9607 000078EC 81F900000000        <2> 		cmp ecx, 0
  9608 000078F2 7412                <2> 		je windowvideocopyset
  9609                              <2> 	yrescopylp:
  9610 000078F4 31C0                <2> 		xor eax, eax
  9611 000078F6 66A1[D4570000]      <2> 		mov ax, [resolutionx2]
  9612 000078FC F7E1                <2> 		mul ecx
  9613 000078FE 01C7                <2> 		add edi, eax
  9614 00007900 893D[82750000]      <2> 		mov [windowbufloc], edi
  9615                              <2> 	windowvideocopyset:
  9616 00007906 6631C9              <2> 		xor cx, cx
  9617 00007909 6649                <2> 		dec cx
  9618 0000790B 66890D[DB7A0000]    <2> 		mov [charposline], cx
  9619 00007912 89FE                <2> 		mov esi, edi
  9620 00007914 81EE10000000        <2> 		sub esi, 16
  9621 0000791A 31D2                <2> 		xor edx, edx
  9622 0000791C 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  9623 00007923 C1E204              <2> 		shl edx, 4
  9624 00007926 01D6                <2> 		add esi, edx
  9625 00007928 8B3D[86750000]      <2> 		mov edi, [windowvideobuf]
  9626 0000792E 81EF02000000        <2> 		sub edi, 2
  9627 00007934 893D[DD7A0000]      <2> 		mov [charposvbuf], edi
  9628 0000793A E97A000000          <2> 		jmp nextcharwin
  9629                              <2> 	win.write:	;adjusted this to use alpha
  9630                              <2> 				;5R, 6G, 5B
  9631                              <2> %ifdef gui.alphablending
  9632                              <2> 		push esi
  9633                              <2> 		push bx
  9634                              <2> 		push cx
  9635                              <2> 		push dx
  9636                              <2> %ifdef gui.background
  9637                              <2> 		mov esi, edi
  9638                              <2> 		sub esi, [physbaseptr]
  9639                              <2> 		add esi, [backgroundimage]
  9640                              <2> 		cmp dword [backgroundimage], 0
  9641                              <2> 		jne .red
  9642                              <2> %endif
  9643                              <2> 		mov esi, background
  9644                              <2> 	.red:
  9645                              <2> 		mov cx, [esi]
  9646                              <2> 		shr cx, 11
  9647                              <2> 		mov bx, ax
  9648                              <2> 		shr bx, 11
  9649                              <2> 		add cx, bx
  9650                              <2> 		add cx, bx
  9651                              <2> 		add cx, bx
  9652                              <2> 		shr cx, 2
  9653                              <2> 		shl cx, 11
  9654                              <2> 		mov dx, cx
  9655                              <2> 	.green:
  9656                              <2> 		mov cx, [esi]
  9657                              <2> 		shl cx, 5
  9658                              <2> 		shr cx, 10
  9659                              <2> 		mov bx, ax
  9660                              <2> 		shl bx, 5
  9661                              <2> 		shr bx, 10
  9662                              <2> 		add cx, bx
  9663                              <2> 		add cx, bx
  9664                              <2> 		add cx, bx
  9665                              <2> 		shr cx, 2
  9666                              <2> 		shl cx, 5
  9667                              <2> 		add dx, cx
  9668                              <2> 	.blue:
  9669                              <2> 		mov cx, [esi]
  9670                              <2> 		shl cx, 11
  9671                              <2> 		shr cx, 11
  9672                              <2> 		mov bx, ax
  9673                              <2> 		shl bx, 11
  9674                              <2> 		shr bx, 11
  9675                              <2> 		add cx, bx
  9676                              <2> 		add cx, bx
  9677                              <2> 		add cx, bx
  9678                              <2> 		shr cx, 2
  9679                              <2> 		add dx, cx
  9680                              <2> 		mov [edi], dx
  9681                              <2> 		pop dx
  9682                              <2> 		pop cx
  9683                              <2> 		pop bx
  9684                              <2> 		pop esi
  9685                              <2> %else
  9686 0000793F 668907              <2> 		mov [edi], ax
  9687                              <2> %endif
  9688 00007942 C3                  <2> 		ret
  9689                              <2> 	copywindow:
  9690 00007943 B201                <2> 		mov dl, 1
  9691 00007945 D0C6                <2> 		rol dh, 1
  9692 00007947 20F2                <2> 		and dl, dh
  9693 00007949 803D[72730000]10    <2> 		cmp byte [colorcache], 0x10
  9694 00007950 7320                <2> 		jae switchwincolors
  9695 00007952 66A1[80750000]      <2> 		mov ax, [windowcolor + 2]
  9696 00007958 E8E2FFFFFF          <2> 		call win.write
  9697 0000795D 80FA00              <2> 		cmp dl, 0
  9698 00007960 742B                <2> 		je nowritewin
  9699 00007962 66A1[7E750000]      <2> 		mov ax, [windowcolor]
  9700 00007968 E8D2FFFFFF          <2> 		call win.write
  9701 0000796D E91B000000          <2> 		jmp nowritewin
  9702                              <2> 	switchwincolors:
  9703 00007972 66A1[7E750000]      <2> 		mov ax, [windowcolor]
  9704 00007978 E8C2FFFFFF          <2> 		call win.write
  9705 0000797D 80FA00              <2> 		cmp dl, 0
  9706 00007980 740B                <2> 		je nowritewin
  9707 00007982 66A1[80750000]      <2> 		mov ax, [windowcolor + 2]
  9708 00007988 E8B2FFFFFF          <2> 		call win.write
  9709                              <2> 	nowritewin:
  9710 0000798D 81C702000000        <2> 		add edi, 2
  9711 00007993 FEC1                <2> 		inc cl
  9712 00007995 80F908              <2> 		cmp cl, 8
  9713 00007998 75A9                <2> 		jne copywindow
  9714 0000799A 6643                <2> 		inc bx
  9715 0000799C 30C9                <2> 		xor cl, cl
  9716 0000799E 31D2                <2> 		xor edx, edx
  9717 000079A0 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  9718 000079A7 01D6                <2> 		add esi, edx
  9719 000079A9 89F7                <2> 		mov edi, esi
  9720 000079AB 678AB7[8390]        <2> 		mov dh, [fonts + bx]
  9721 000079B0 D0CE                <2> 		ror dh, 1
  9722 000079B2 FEC5                <2> 		inc ch
  9723 000079B4 80FD10              <2> 		cmp ch, 16
  9724 000079B7 758A                <2> 		jne copywindow
  9725                              <2> 	nextcharwin:
  9726 000079B9 6631C9              <2> 		xor cx, cx
  9727 000079BC 8B3D[DD7A0000]      <2> 		mov edi, [charposvbuf]
  9728 000079C2 81C702000000        <2> 		add edi, 2
  9729 000079C8 3B3D[94750000]      <2> 		cmp edi, [wincopyendpos]
  9730 000079CE 0F83F0000000        <2> 		jae near donewincopynow
  9731 000079D4 8A7F01              <2> 		mov bh, [edi + 1]
  9732 000079D7 80FF00              <2> 		cmp bh, 0
  9733 000079DA 7505                <2> 		jne nofixcolorwin
  9734 000079DC B707                <2> 		mov bh, 7
  9735 000079DE 887F01              <2> 		mov [edi + 1], bh
  9736                              <2> 	nofixcolorwin:
  9737 000079E1 883D[72730000]      <2> 		mov [colorcache], bh
  9738 000079E7 8A1F                <2> 		mov bl, [edi]
  9739 000079E9 893D[DD7A0000]      <2> 		mov [charposvbuf], edi
  9740 000079EF 813D[8A750000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9741 000079F7 0000                <2>
  9742 000079F9 7459                <2> 		je noskipcharcopy
  9743 000079FB 2B3D[86750000]      <2> 		sub edi, [windowvideobuf]
  9744 00007A01 033D[8A750000]      <2> 		add edi, [windowvideobuf2]
  9745 00007A07 8A6701              <2> 		mov ah, [edi + 1]
  9746 00007A0A 8A07                <2> 		mov al, [edi]
  9747 00007A0C 6639D8              <2> 		cmp ax, bx
  9748 00007A0F 7543                <2> 		jne noskipcharcopy
  9749                              <2> 	skipcharcopy:
  9750 00007A11 81C610000000        <2> 		add esi, 16
  9751 00007A17 668B0D[DB7A0000]    <2> 		mov cx, [charposline]
  9752 00007A1E 6641                <2> 		inc cx
  9753 00007A20 66890D[DB7A0000]    <2> 		mov [charposline], cx
  9754 00007A27 663B0D[92750000]    <2> 		cmp cx, [termcol]
  9755 00007A2E 7289                <2> 		jb nextcharwin
  9756 00007A30 6631C9              <2> 		xor cx, cx
  9757 00007A33 66890D[DB7A0000]    <2> 		mov [charposline], cx
  9758 00007A3A 31D2                <2> 		xor edx, edx
  9759 00007A3C 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  9760 00007A43 C1E204              <2> 		shl edx, 4
  9761 00007A46 662B15[7A750000]    <2> 		sub dx, [winvcopydx]
  9762 00007A4D 01D6                <2> 		add esi, edx
  9763 00007A4F E965FFFFFF          <2> 		jmp nextcharwin
  9764                              <2> 	noskipcharcopy:
  9765 00007A54 881F                <2> 		mov [edi], bl
  9766 00007A56 887F01              <2> 		mov [edi + 1], bh
  9767 00007A59 8B3D[DD7A0000]      <2> 		mov edi, [charposvbuf]
  9768 00007A5F 30FF                <2> 		xor bh, bh
  9769 00007A61 66C1E304            <2> 		shl bx, 4
  9770 00007A65 31D2                <2> 		xor edx, edx
  9771 00007A67 668B15[D4570000]    <2> 		mov dx, [resolutionx2]
  9772 00007A6E C1E204              <2> 		shl edx, 4
  9773 00007A71 29D6                <2> 		sub esi, edx
  9774 00007A73 81C610000000        <2> 		add esi, 16
  9775 00007A79 89F7                <2> 		mov edi, esi
  9776 00007A7B 668B0D[DB7A0000]    <2> 		mov cx, [charposline]
  9777 00007A82 6641                <2> 		inc cx
  9778 00007A84 663B0D[92750000]    <2> 		cmp cx, [termcol]
  9779 00007A8B 7316                <2> 		jae fixwindowcopy
  9780 00007A8D 66890D[DB7A0000]    <2> 		mov [charposline], cx
  9781 00007A94 6631C9              <2> 		xor cx, cx
  9782 00007A97 678AB7[8390]        <2> 		mov dh, [fonts + bx]
  9783 00007A9C D0CE                <2> 		ror dh, 1
  9784 00007A9E E9A0FEFFFF          <2> 		jmp copywindow
  9785                              <2> fixwindowcopy:
  9786 00007AA3 6631C9              <2> 		xor cx, cx
  9787 00007AA6 66890D[DB7A0000]    <2> 		mov [charposline], cx
  9788 00007AAD 662B15[7A750000]    <2> 		sub dx, [winvcopydx]
  9789 00007AB4 01D6                <2> 		add esi, edx
  9790 00007AB6 89F7                <2> 		mov edi, esi
  9791 00007AB8 678AB7[8390]        <2> 		mov dh, [fonts + bx]
  9792 00007ABD D0CE                <2> 		ror dh, 1
  9793 00007ABF E97FFEFFFF          <2> 		jmp copywindow
  9794                              <2> donewincopynow:
  9795 00007AC4 803D[9D220000]01    <2> 		cmp byte [termcopyon], 1
  9796 00007ACB 7506                <2> 		jne forgetresetstuff
  9797 00007ACD E833ADFFFF          <2> 		call switchtermcursor
  9798 00007AD2 61                  <2> 		popa
  9799                              <2> forgetresetstuff:
  9800 00007AD3 C605[9D220000]00    <2> 		mov byte [termcopyon], 0
  9801 00007ADA C3                  <2> 		ret
  9802                              <2> 		
  9803 00007ADB 0000                <2> charposline dw 0
  9804 00007ADD 00000000            <2> charposvbuf dw 0,0
  9805                              <1> 				
  9806 00007AE1 00                  <1> copygui db 0
  9807 00007AE2 00                  <1> graphicsset db 0
  9808 00007AE3 0000                <1> graphicspos db 0,0
  9809 00007AE5 00                  <1> showcursorfonton db 0
  9810 00007AE6 00                  <1> savefonton db 0
  9811 00007AE7 00                  <1> mouseselecton db 0
  9812                              <1> 
  9813 00007AE8 00                  <1> pbutton db 0
  9814 00007AE9 00                  <1> pLBUTTON db 0
  9815 00007AEA 00                  <1> pRBUTTON db 0
  9816 00007AEB 00000000            <1> dragging dw 0,0
  9817 00007AEF 0000000000000000    <1> lastpos dw 0,0,0,0
  9818 00007AF7 00000000            <1> colorbuf dw 0,0
  9819                              <1> 	
  9820                              <1> 	clickicon:
  9821 00007AFB B001                <1> 		mov al, 1
  9822 00007AFD A2[E87A0000]        <1> 		mov [pbutton], al
  9823 00007B02 A0[E97A0000]        <1> 		mov al, [pLBUTTON]
  9824 00007B07 2205[DB5A0000]      <1> 		and al, [LBUTTON]
  9825 00007B0D 8A25[EA7A0000]      <1> 		mov ah, [pRBUTTON]
  9826 00007B13 2225[DC5A0000]      <1> 		and ah, [RBUTTON]
  9827 00007B19 08E0                <1> 		or al, ah
  9828 00007B1B 3C00                <1> 		cmp al, 0
  9829 00007B1D 741B                <1> 		je nodragclick
  9830 00007B1F 813D[EB7A0000]0100- <1> 		cmp dword [dragging], 1
  9831 00007B27 0000                <1>
  9832 00007B29 732F                <1> 		jae dragclick
  9833 00007B2B C705[EB7A0000]0100- <1> 		mov dword [dragging], 1
  9834 00007B33 0000                <1>
  9835 00007B35 E920000000          <1> 		jmp dragclick
  9836                              <1> 	nodragclick:
  9837 00007B3A 31C0                <1> 		xor eax, eax
  9838 00007B3C A3[EB7A0000]        <1> 		mov dword [dragging], eax
  9839 00007B41 A2[E87A0000]        <1> 		mov [pbutton], al
  9840 00007B46 A0[DB5A0000]        <1> 		mov al, [LBUTTON]
  9841 00007B4B A2[E97A0000]        <1> 		mov [pLBUTTON], al
  9842 00007B50 A0[DC5A0000]        <1> 		mov al, [RBUTTON]
  9843 00007B55 A2[EA7A0000]        <1> 		mov [pRBUTTON], al
  9844                              <1> 	dragclick:
  9845 00007B5A 6631C0              <1> 		xor ax, ax
  9846 00007B5D BE[27D30000]        <1> 		mov esi, graphicstable
  9847 00007B62 C705[3B830000]0000- <1> 		mov dword [codepointer], 0
  9848 00007B6A 0000                <1>
  9849                              <1> 	clicon2:
  9850 00007B6C 31D2                <1> 		xor edx, edx
  9851 00007B6E 31C9                <1> 		xor ecx, ecx
  9852 00007B70 66813E0100          <1> 		cmp word [esi], 1
  9853 00007B75 0F841B000000        <1> 		je near iconselect
  9854 00007B7B 66813E0200          <1> 		cmp word [esi], 2
  9855 00007B80 0F8472010000        <1> 		je near textselected
  9856 00007B86 66813E0300          <1> 		cmp word [esi], 3
  9857 00007B8B 0F84C7020000        <1> 		je near windowselect
  9858 00007B91 E910040000          <1> 		jmp nexticonsel
  9859                              <1> 	iconselect:
  9860 00007B96 668B5606            <1> 		mov dx, [esi + 6]
  9861 00007B9A 6689D0              <1> 		mov ax, dx
  9862 00007B9D 668B4E08            <1> 		mov cx, [esi + 8]
  9863 00007BA1 6689CB              <1> 		mov bx, cx
  9864 00007BA4 6681C32000          <1> 		add bx, 32
  9865 00007BA9 6601D0              <1> 		add ax, dx
  9866 00007BAC 813D[EB7A0000]0100- <1> 		cmp dword [dragging], 1
  9867 00007BB4 0000                <1>
  9868 00007BB6 746F                <1> 		je dragicon
  9869 00007BB8 813D[EB7A0000]0000- <1> 		cmp dword [dragging], 0
  9870 00007BC0 0000                <1>
  9871 00007BC2 7411                <1> 		je nodragiconcheck
  9872 00007BC4 3935[EB7A0000]      <1> 		cmp dword [dragging], esi
  9873 00007BCA 0F85D6030000        <1> 		jne near nexticonsel
  9874 00007BD0 E952000000          <1> 		jmp dragicon
  9875                              <1> 	nodragiconcheck:
  9876 00007BD5 663905[CA590000]    <1> 		cmp [mousecursorposition], ax
  9877 00007BDC 0F82C4030000        <1> 		jb near nexticonsel
  9878 00007BE2 66054000            <1> 		add ax, 64
  9879 00007BE6 663905[CA590000]    <1> 		cmp [mousecursorposition], ax
  9880 00007BED 0F87B3030000        <1> 		ja near nexticonsel
  9881 00007BF3 6629D0              <1> 		sub ax, dx
  9882 00007BF6 66390D[CC590000]    <1> 		cmp [mousecursorposition + 2], cx
  9883 00007BFD 0F82A3030000        <1> 		jb near nexticonsel
  9884 00007C03 66391D[CC590000]    <1> 		cmp [mousecursorposition + 2], bx
  9885 00007C0A 0F8796030000        <1> 		ja near nexticonsel
  9886 00007C10 668B460A            <1> 		mov ax, [esi + 10]
  9887 00007C14 66250100            <1> 		and ax, 1
  9888 00007C18 663D0100            <1> 		cmp ax, 1
  9889 00007C1C 0F84B6000000        <1> 		je near unselecticon
  9890 00007C22 E98D000000          <1> 		jmp nodragicon
  9891                              <1> 	dragicon:
  9892 00007C27 663905[C6590000]    <1> 		cmp [lastmouseposition], ax
  9893 00007C2E 0F8272030000        <1> 		jb near nexticonsel
  9894 00007C34 66054000            <1> 		add ax, 64
  9895 00007C38 663905[C6590000]    <1> 		cmp [lastmouseposition], ax
  9896 00007C3F 0F8761030000        <1> 		ja near nexticonsel
  9897 00007C45 6629D0              <1> 		sub ax, dx
  9898 00007C48 66390D[C8590000]    <1> 		cmp [lastmouseposition + 2], cx
  9899 00007C4F 0F8251030000        <1> 		jb near nexticonsel
  9900 00007C55 66391D[C8590000]    <1> 		cmp [lastmouseposition + 2], bx
  9901 00007C5C 0F8744030000        <1> 		ja near nexticonsel
  9902 00007C62 668B460A            <1> 		mov ax, [esi + 10]
  9903 00007C66 2410                <1> 		and al, 00010000b
  9904 00007C68 3C10                <1> 		cmp al, 00010000b
  9905 00007C6A 7448                <1> 		je nodragicon
  9906 00007C6C 8935[EB7A0000]      <1> 		mov [dragging], esi
  9907 00007C72 66D1E2              <1> 		shl dx, 1
  9908 00007C75 662B15[C6590000]    <1> 		sub dx, [lastmouseposition]
  9909 00007C7C 660315[CA590000]    <1> 		add dx, [mousecursorposition]
  9910 00007C83 66D1EA              <1> 		shr dx, 1
  9911 00007C86 66030D[CC590000]    <1> 		add cx, [mousecursorposition + 2]
  9912 00007C8D 662B0D[C8590000]    <1> 		sub cx, [lastmouseposition + 2]
  9913 00007C94 663B15[D4570000]    <1> 		cmp dx, [resolutionx2]
  9914 00007C9B 7607                <1> 		jbe chkyresdrgicn
  9915 00007C9D 668B15[CA590000]    <1> 		mov dx, [mousecursorposition]
  9916                              <1> 	chkyresdrgicn:
  9917 00007CA4 663B0D[E8560000]    <1> 		cmp cx, [resolutiony]
  9918 00007CAB 7607                <1> 		jbe nodragicon
  9919 00007CAD 668B0D[CC590000]    <1> 		mov cx, [mousecursorposition + 2]
  9920                              <1> 	nodragicon:
  9921 00007CB4 66814E0A0100        <1> 		or word [esi + 10], 1
  9922 00007CBA 8B5E0C              <1> 		mov ebx, [esi + 12]
  9923 00007CBD 668B460A            <1> 		mov ax, [esi + 10]
  9924 00007CC1 8B7602              <1> 		mov esi, [esi + 2]
  9925 00007CC4 C705[3B830000]0000- <1> 		mov dword [codepointer], 0
  9926 00007CCC 0000                <1>
  9927 00007CCE E896EEFFFF          <1> 		call showicon
  9928 00007CD3 E9E7020000          <1> 		jmp doneiconsel
  9929                              <1> 	unselecticon:
  9930 00007CD8 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9931 00007CDE 8B5E0C              <1> 		mov ebx, [esi + 12]
  9932 00007CE1 668B460A            <1> 		mov ax, [esi + 10]
  9933 00007CE5 8B7602              <1> 		mov esi, [esi + 2]
  9934 00007CE8 891D[3B830000]      <1> 		mov [codepointer], ebx
  9935 00007CEE E876EEFFFF          <1> 		call showicon
  9936 00007CF3 E9C7020000          <1> 		jmp doneiconsel
  9937                              <1> 	textselected:
  9938 00007CF8 8B5E02              <1> 		mov ebx, [esi + 2]
  9939 00007CFB 668B5606            <1> 		mov dx, [esi + 6]
  9940 00007CFF 6689D0              <1> 		mov ax, dx
  9941 00007D02 668B4E08            <1> 		mov cx, [esi + 8]
  9942                              <1> 	lengthtesttext:
  9943 00007D06 803B00              <1> 		cmp byte [ebx], 0
  9944 00007D09 7407                <1> 		je donetesttextlength
  9945 00007D0B 43                  <1> 		inc ebx
  9946 00007D0C 66051000            <1> 		add ax, 16
  9947 00007D10 EBF4                <1> 		jmp lengthtesttext
  9948                              <1> 	donetesttextlength:
  9949 00007D12 6689CB              <1> 		mov bx, cx
  9950 00007D15 6681C30F00          <1> 		add bx, 15
  9951 00007D1A 813D[EB7A0000]0100- <1> 		cmp dword [dragging], 1
  9952 00007D22 0000                <1>
  9953 00007D24 7468                <1> 		je dragtext
  9954 00007D26 813D[EB7A0000]0000- <1> 		cmp dword [dragging], 0
  9955 00007D2E 0000                <1>
  9956 00007D30 7411                <1> 		je nodragtextcheck
  9957 00007D32 3935[EB7A0000]      <1> 		cmp dword [dragging], esi
  9958 00007D38 0F8568020000        <1> 		jne near nexticonsel
  9959 00007D3E E94B000000          <1> 		jmp dragtext
  9960                              <1> 	nodragtextcheck:
  9961 00007D43 663915[CA590000]    <1> 		cmp [mousecursorposition], dx
  9962 00007D4A 0F8256020000        <1> 		jb near nexticonsel
  9963 00007D50 663905[CA590000]    <1> 		cmp [mousecursorposition], ax
  9964 00007D57 0F8749020000        <1> 		ja near nexticonsel
  9965 00007D5D 66390D[CC590000]    <1> 		cmp [mousecursorposition + 2], cx
  9966 00007D64 0F823C020000        <1> 		jb near nexticonsel
  9967 00007D6A 66391D[CC590000]    <1> 		cmp [mousecursorposition + 2], bx
  9968 00007D71 0F872F020000        <1> 		ja near nexticonsel
  9969 00007D77 668B460A            <1> 		mov ax, [esi + 10]
  9970 00007D7B 66250100            <1> 		and ax, 1
  9971 00007D7F 663D0100            <1> 		cmp ax, 1
  9972 00007D83 0F84AB000000        <1> 		je near unselecttext
  9973 00007D89 E986000000          <1> 		jmp nodragtext
  9974                              <1> 	dragtext:
  9975 00007D8E 663915[C6590000]    <1> 		cmp [lastmouseposition], dx
  9976 00007D95 0F820B020000        <1> 		jb near nexticonsel
  9977 00007D9B 663905[C6590000]    <1> 		cmp [lastmouseposition], ax
  9978 00007DA2 0F87FE010000        <1> 		ja near nexticonsel
  9979 00007DA8 66390D[C8590000]    <1> 		cmp [lastmouseposition + 2], cx
  9980 00007DAF 0F82F1010000        <1> 		jb near nexticonsel
  9981 00007DB5 66391D[C8590000]    <1> 		cmp [lastmouseposition + 2], bx
  9982 00007DBC 0F87E4010000        <1> 		ja near nexticonsel
  9983 00007DC2 668B460A            <1> 		mov ax, [esi + 10]
  9984 00007DC6 2410                <1> 		and al, 00010000b
  9985 00007DC8 663D1000            <1> 		cmp ax, 00010000b
  9986 00007DCC 0F8442000000        <1> 		je near nodragtext
  9987 00007DD2 8935[EB7A0000]      <1> 		mov [dragging], esi
  9988 00007DD8 662B15[C6590000]    <1> 		sub dx, [lastmouseposition]
  9989 00007DDF 660315[CA590000]    <1> 		add dx, [mousecursorposition]
  9990 00007DE6 66030D[CC590000]    <1> 		add cx, [mousecursorposition + 2]
  9991 00007DED 662B0D[C8590000]    <1> 		sub cx, [lastmouseposition + 2]
  9992 00007DF4 663B15[D4570000]    <1> 		cmp dx, [resolutionx2]
  9993 00007DFB 7607                <1> 		jbe chkyresdrgtxt
  9994 00007DFD 668B15[CA590000]    <1> 		mov dx, [mousecursorposition]
  9995                              <1> 	chkyresdrgtxt:
  9996 00007E04 663B0D[E8560000]    <1> 		cmp cx, [resolutiony]
  9997 00007E0B 7607                <1> 		jbe nodragtext
  9998 00007E0D 668B0D[CC590000]    <1> 		mov cx, [mousecursorposition + 2]
  9999                              <1> 	nodragtext:
 10000 00007E14 66814E0A0100        <1> 		or word [esi + 10], 1
 10001 00007E1A 8B5E0C              <1> 		mov ebx, [esi + 12]
 10002 00007E1D 891D[3B830000]      <1> 		mov [codepointer], ebx
 10003 00007E23 668B460A            <1> 		mov ax, [esi + 10]
 10004 00007E27 8B7602              <1> 		mov esi, [esi + 2]
 10005 00007E2A E800F5FFFF          <1> 		call showstring
 10006 00007E2F E98B010000          <1> 		jmp doneiconsel
 10007                              <1> 	unselecttext:
 10008 00007E34 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10009 00007E3A 8B5E0C              <1> 		mov ebx, [esi + 12]
 10010 00007E3D 668B460A            <1> 		mov ax, [esi + 10]
 10011 00007E41 8B7602              <1> 		mov esi, [esi + 2]
 10012 00007E44 C705[3B830000]0000- <1> 		mov dword [codepointer], 0
 10013 00007E4C 0000                <1>
 10014 00007E4E E8DCF4FFFF          <1> 		call showstring
 10015 00007E53 E967010000          <1> 		jmp doneiconsel
 10016                              <1> windowselect:
 10017 00007E58 8B7E02              <1> 		mov edi, [esi + 2]
 10018 00007E5B 668B5606            <1> 		mov dx, [esi + 6]
 10019 00007E5F 6689D0              <1> 		mov ax, dx
 10020 00007E62 668B4E08            <1> 		mov cx, [esi + 8]
 10021 00007E66 6689CB              <1> 		mov bx, cx
 10022 00007E69 6681C31000          <1> 		add bx, 16
 10023 00007E6E 813D[EB7A0000]0100- <1> 		cmp dword [dragging], 1
 10024 00007E76 0000                <1>
 10025 00007E78 746D                <1> 		je dragwin
 10026 00007E7A 813D[EB7A0000]0000- <1> 		cmp dword [dragging], 0
 10027 00007E82 0000                <1>
 10028 00007E84 7411                <1> 		je nodragwincheck
 10029 00007E86 3935[EB7A0000]      <1> 		cmp dword [dragging], esi
 10030 00007E8C 0F8514010000        <1> 		jne near nexticonsel
 10031 00007E92 E950000000          <1> 		jmp dragwin
 10032                              <1> 	nodragwincheck:
 10033 00007E97 663905[CA590000]    <1> 		cmp [mousecursorposition], ax
 10034 00007E9E 0F8202010000        <1> 		jb near nexticonsel
 10035 00007EA4 660307              <1> 		add ax, [edi]
 10036 00007EA7 660307              <1> 		add ax, [edi]
 10037 00007EAA 663905[CA590000]    <1> 		cmp [mousecursorposition], ax
 10038 00007EB1 0F87EF000000        <1> 		ja near nexticonsel
 10039 00007EB7 66390D[CC590000]    <1> 		cmp [mousecursorposition + 2], cx
 10040 00007EBE 0F82E2000000        <1> 		jb near nexticonsel
 10041 00007EC4 66391D[CC590000]    <1> 		cmp [mousecursorposition + 2], bx
 10042 00007ECB 0F87D5000000        <1> 		ja near nexticonsel
 10043 00007ED1 662D1400            <1> 		sub ax, 20
 10044 00007ED5 663905[CA590000]    <1> 		cmp [mousecursorposition], ax
 10045 00007EDC 0F87A4000000        <1> 		ja near killwin
 10046 00007EE2 E98B000000          <1> 		jmp nodragwin
 10047                              <1> 	dragwin:
 10048 00007EE7 663905[C6590000]    <1> 		cmp [lastmouseposition], ax
 10049 00007EEE 0F82B2000000        <1> 		jb near nexticonsel
 10050 00007EF4 660307              <1> 		add ax, [edi]
 10051 00007EF7 660307              <1> 		add ax, [edi]
 10052 00007EFA 663905[C6590000]    <1> 		cmp [lastmouseposition], ax
 10053 00007F01 0F879F000000        <1> 		ja near nexticonsel
 10054 00007F07 66390D[C8590000]    <1> 		cmp [lastmouseposition + 2], cx
 10055 00007F0E 0F8292000000        <1> 		jb near nexticonsel
 10056 00007F14 66391D[C8590000]    <1> 		cmp [lastmouseposition + 2], bx
 10057 00007F1B 0F8785000000        <1> 		ja near nexticonsel
 10058 00007F21 8935[EB7A0000]      <1> 		mov [dragging], esi
 10059 00007F27 803D[4F800000]01    <1> 		cmp byte [windrag], 1
 10060 00007F2E 7706                <1> 		ja .nochangewindrag
 10061 00007F30 FE05[4F800000]      <1> 		inc byte [windrag]
 10062                              <1> 	.nochangewindrag:
 10063 00007F36 662B15[C6590000]    <1> 		sub dx, [lastmouseposition]
 10064 00007F3D 660315[CA590000]    <1> 		add dx, [mousecursorposition]
 10065 00007F44 66030D[CC590000]    <1> 		add cx, [mousecursorposition + 2]
 10066 00007F4B 662B0D[C8590000]    <1> 		sub cx, [lastmouseposition + 2]
 10067 00007F52 663B15[D4570000]    <1> 		cmp dx, [resolutionx2]
 10068 00007F59 7607                <1> 		jbe chkyresdrgwin
 10069 00007F5B 668B15[CA590000]    <1> 		mov dx, [mousecursorposition]
 10070                              <1> 	chkyresdrgwin:
 10071 00007F62 663B0D[E8560000]    <1> 		cmp cx, [resolutiony]
 10072 00007F69 7607                <1> 		jbe nodragwin
 10073 00007F6B 668B0D[CC590000]    <1> 		mov cx, [mousecursorposition + 2]
 10074                              <1> 	nodragwin:
 10075 00007F72 8B5E0C              <1> 		mov ebx, [esi + 12]
 10076 00007F75 668B460A            <1> 		mov ax, [esi + 10]
 10077 00007F79 8B7602              <1> 		mov esi, [esi + 2]
 10078 00007F7C E817F6FFFF          <1> 		call showwindow
 10079 00007F81 E939000000          <1> 		jmp doneiconsel
 10080                              <1> 	killwin:
 10081 00007F86 66C7060000          <1> 		mov word [esi], 0
 10082 00007F8B C605[9C220000]00    <1> 		mov byte [termguion], 0
 10083 00007F92 E8D3EDFFFF          <1> 		call guiclear
 10084 00007F97 E81EEEFFFF          <1> 		call reloadallgraphics
 10085 00007F9C E865EBFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10086 00007FA1 E941E7FFFF          <1> 		jmp guistart
 10087                              <1> 	nexticonsel:
 10088 00007FA6 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10089 00007FAC 81C610000000        <1> 		add esi, 16
 10090 00007FB2 81FE[27D50000]      <1> 		cmp esi, graphicstableend
 10091 00007FB8 7305                <1> 		jae doneiconsel
 10092 00007FBA E9ADFBFFFF          <1> 		jmp clicon2
 10093                              <1> 	doneiconsel:
 10094 00007FBF 813D[EB7A0000]0100- <1> 		cmp dword [dragging], 1
 10095 00007FC7 0000                <1>
 10096 00007FC9 731A                <1> 		jae doneiconsel2
 10097 00007FCB A2[4F800000]        <1> 		mov [windrag], al
 10098 00007FD0 813D[3B830000]0000- <1> 		cmp dword [codepointer], 0
 10099 00007FD8 0000                <1>
 10100 00007FDA 7409                <1> 		je doneiconsel2
 10101 00007FDC 8B1D[3B830000]      <1> 		mov ebx, [codepointer]
 10102 00007FE2 FFD3                <1> 		call ebx
 10103 00007FE4 C3                  <1> 		ret
 10104                              <1> 	doneiconsel2:
 10105 00007FE5 A0[DB5A0000]        <1> 		mov al, [LBUTTON]
 10106 00007FEA A2[E97A0000]        <1> 		mov [pLBUTTON], al
 10107 00007FEF A0[DC5A0000]        <1> 		mov al, [RBUTTON]
 10108 00007FF4 A2[EA7A0000]        <1> 		mov [pRBUTTON], al
 10109 00007FF9 813D[EB7A0000]0100- <1> 		cmp dword [dragging], 1
 10110 00008001 0000                <1>
 10111 00008003 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10112 00008009 E8F8EAFFFF          <1> 		call switchmousepos2
 10113 0000800E 803D[4F800000]01    <1> 		cmp byte [windrag], 1
 10114 00008015 7305                <1> 		jae noclearcursorcl
 10115 00008017 E832EAFFFF          <1> 		call clearmousecursor
 10116                              <1> noclearcursorcl:
 10117 0000801C E899EDFFFF          <1> 		call reloadallgraphics
 10118                              <1> noreloadgraphicsclick:
 10119 00008021 30E4                <1> 		xor ah, ah
 10120 00008023 31C9                <1> 		xor ecx, ecx
 10121 00008025 31D2                <1> 		xor edx, edx
 10122 00008027 B0FE                <1> 		mov al, 254
 10123 00008029 668B15[CA590000]    <1> 		mov dx, [mousecursorposition]
 10124 00008030 668B0D[CC590000]    <1> 		mov cx, [mousecursorposition + 2]
 10125 00008037 66BBE738            <1> 		mov bx, 0011100011100111b
 10126 0000803B C605[E57A0000]01    <1> 		mov byte [showcursorfonton], 1
 10127 00008042 E83AF3FFFF          <1> 		call showfontvesa
 10128 00008047 C605[E57A0000]00    <1> 		mov byte [showcursorfonton], 0
 10129 0000804E C3                  <1> 		ret
 10130 0000804F 00                  <1> windrag db 0
 10131 00008050 00000000            <1> lastdrag dw 0,0
 10132 00008054 00000000            <1> grpctblpos dw 0,0
 10133                              <1> 
 10134                              <1> 
 10135                              <1> 
 10136 00008058 00<rept>            <1> grphbuf times 16 db 0
 10137                              <1> 	graphicsadd:
 10138 00008068 BF[27D30000]        <1> 		mov edi, graphicstable
 10139                              <1> 	shwgrph1:
 10140 0000806D 397702              <1> 		cmp dword [edi + 2], esi
 10141 00008070 7414                <1> 		je showgraphicsreplace2
 10142 00008072 81C710000000        <1> 		add edi, 16
 10143 00008078 81FF[27D50000]      <1> 		cmp edi, graphicstableend
 10144 0000807E 0F8337020000        <1> 		jae near showgraphicsnew
 10145 00008084 EBE7                <1> 		jmp shwgrph1
 10146                              <1> 	showgraphicsreplace2:
 10147 00008086 8935[5A800000]      <1> 		mov [grphbuf + 2], esi
 10148 0000808C 668915[5E800000]    <1> 		mov [grphbuf + 6], dx
 10149 00008093 66890D[60800000]    <1> 		mov [grphbuf + 8], cx
 10150 0000809A 891D[64800000]      <1> 		mov [grphbuf + 12], ebx
 10151 000080A0 30FF                <1> 		xor bh, bh
 10152 000080A2 88E3                <1> 		mov bl, ah
 10153 000080A4 30E4                <1> 		xor ah, ah
 10154 000080A6 66A3[62800000]      <1> 		mov [grphbuf + 10], ax	
 10155 000080AC 66891D[58800000]    <1> 		mov [grphbuf], bx
 10156 000080B3 66A1[58800000]      <1> 		mov ax, [grphbuf]
 10157 000080B9 663D0100            <1> 		cmp ax, 1
 10158 000080BD 0F8419000000        <1> 		je near replaceicon
 10159 000080C3 663D0200            <1> 		cmp ax, 2
 10160 000080C7 0F8493000000        <1> 		je near replacestring
 10161 000080CD 663D0300            <1> 		cmp ax, 3
 10162 000080D1 0F840F010000        <1> 		je near replacewindow
 10163 000080D7 E9BC010000          <1> 		jmp showgraphicsreplace
 10164                              <1> 	replaceicon:
 10165 000080DC 893D[EF7A0000]      <1> 		mov [lastpos], edi
 10166 000080E2 8935[F37A0000]      <1> 		mov [lastpos + 4], esi
 10167 000080E8 8B7702              <1> 		mov esi, [edi + 2]
 10168 000080EB 668B5F0C            <1> 		mov bx, [edi + 12]
 10169 000080EF 668B5706            <1> 		mov dx, [edi + 6]
 10170 000080F3 668B4F08            <1> 		mov cx, [edi + 8]
 10171 000080F7 668B06              <1> 		mov ax, [esi]
 10172 000080FA 66A3[F77A0000]      <1> 		mov [colorbuf], ax
 10173 00008100 66A1[B66D0000]      <1> 		mov ax, [background]
 10174 00008106 668906              <1> 		mov [esi], ax
 10175 00008109 8B5F0C              <1> 		mov ebx, [edi + 12]
 10176 0000810C 668B470A            <1> 		mov ax, [edi + 10]
 10177 00008110 2401                <1> 		and al, 1
 10178 00008112 A2[3F830000]        <1> 		mov [iconselected], al
 10179 00008117 668B470A            <1> 		mov ax, [edi + 10]
 10180 0000811B E85CEAFFFF          <1> 		call showicon2
 10181 00008120 8B3D[EF7A0000]      <1> 		mov edi, [lastpos]
 10182 00008126 8B7702              <1> 		mov esi, [edi + 2]
 10183 00008129 66A1[F77A0000]      <1> 		mov ax, [colorbuf]
 10184 0000812F 668906              <1> 		mov [esi], ax
 10185 00008132 8B35[F37A0000]      <1> 		mov esi, [lastpos + 4]
 10186 00008138 668B15[5E800000]    <1> 		mov dx, [grphbuf + 6]
 10187 0000813F 668B0D[60800000]    <1> 		mov cx, [grphbuf + 8]
 10188 00008146 668B1D[58800000]    <1> 		mov bx, [grphbuf]
 10189 0000814D 66A1[62800000]      <1> 		mov ax, [grphbuf + 10]
 10190 00008153 88DC                <1> 		mov ah, bl
 10191 00008155 8B1D[64800000]      <1> 		mov ebx, [grphbuf + 12]
 10192 0000815B E938010000          <1> 		jmp showgraphicsreplace
 10193                              <1> 	replacestring:
 10194 00008160 893D[EF7A0000]      <1> 		mov [lastpos], edi
 10195 00008166 8935[F37A0000]      <1> 		mov [lastpos + 4], esi
 10196 0000816C 8B5F0C              <1> 		mov ebx, [edi + 12]
 10197 0000816F 8B7702              <1> 		mov esi, [edi + 2]
 10198 00008172 668B5706            <1> 		mov dx, [edi + 6]
 10199 00008176 668B4F08            <1> 		mov cx, [edi + 8]
 10200 0000817A 66A1[70730000]      <1> 		mov ax, [colorfont2]
 10201 00008180 66A3[F77A0000]      <1> 		mov [colorbuf], ax
 10202 00008186 66A1[B66D0000]      <1> 		mov ax, [background]
 10203 0000818C 66A3[70730000]      <1> 		mov [colorfont2], ax		
 10204 00008192 8B5F0C              <1> 		mov ebx, [edi + 12]
 10205 00008195 668B470A            <1> 		mov ax, [edi + 10]
 10206 00008199 2401                <1> 		and al, 1
 10207 0000819B A2[E77A0000]        <1> 		mov [mouseselecton], al
 10208 000081A0 668B470A            <1> 		mov ax, [edi + 10]
 10209 000081A4 E899F1FFFF          <1> 		call showstring2
 10210 000081A9 66A1[F77A0000]      <1> 		mov ax, [colorbuf]
 10211 000081AF 66A3[70730000]      <1> 		mov [colorfont2], ax
 10212 000081B5 8B3D[EF7A0000]      <1> 		mov edi, [lastpos]
 10213 000081BB 8B7702              <1> 		mov esi, [edi + 2]
 10214 000081BE 668B15[5E800000]    <1> 		mov dx, [grphbuf + 6]
 10215 000081C5 668B0D[60800000]    <1> 		mov cx, [grphbuf + 8]
 10216 000081CC 668B1D[58800000]    <1> 		mov bx, [grphbuf]
 10217 000081D3 66A1[62800000]      <1> 		mov ax, [grphbuf + 10]
 10218 000081D9 88DC                <1> 		mov ah, bl
 10219 000081DB 8B1D[64800000]      <1> 		mov ebx, [grphbuf + 12]
 10220 000081E1 E9B2000000          <1> 		jmp showgraphicsreplace
 10221                              <1> 	replacewindow:
 10222 000081E6 893D[EF7A0000]      <1> 		mov [lastpos], edi
 10223 000081EC 8935[F37A0000]      <1> 		mov [lastpos + 4], esi
 10224 000081F2 8B7702              <1> 		mov esi, [edi + 2]
 10225 000081F5 8B3D[82750000]      <1> 		mov edi, [windowbufloc]
 10226 000081FB 31D2                <1> 		xor edx, edx
 10227 000081FD 668B15[D4570000]    <1> 		mov dx, [resolutionx2]
 10228 00008204 C1E204              <1> 		shl edx, 4
 10229 00008207 29D7                <1> 		sub edi, edx
 10230 00008209 31D2                <1> 		xor edx, edx
 10231 0000820B 668B16              <1> 		mov dx, [esi]
 10232 0000820E 660316              <1> 		add dx, [esi]
 10233 00008211 668B4E02            <1> 		mov cx, [esi + 2]
 10234 00008215 6681C11000          <1> 		add cx, 16
 10235 0000821A 66A1[B66D0000]      <1> 		mov ax, [background]
 10236 00008220 803D[4F800000]01    <1> 		cmp byte [windrag], 1
 10237 00008227 7604                <1> 		jbe clearwindow
 10238 00008229 662B4E02            <1> 		sub cx, [esi + 2]
 10239                              <1> 	clearwindow:
 10240                              <1> 		%ifdef gui.background
 10241                              <1> 			cmp dword [backgroundimage], 0
 10242                              <1> 			je .noback
 10243                              <1> 			push esi
 10244                              <1> 			mov esi, [backgroundimage]
 10245                              <1> 			sub edi, [physbaseptr]
 10246                              <1> 			add esi, edi
 10247                              <1> 			add edi, [physbaseptr]
 10248                              <1> 			mov ax, [esi]
 10249                              <1> 			pop esi
 10250                              <1> 		.noback:
 10251                              <1> 		%endif
 10252 0000822D 668907              <1> 		mov [edi], ax
 10253 00008230 81C702000000        <1> 		add edi, 2
 10254 00008236 81EA02000000        <1> 		sub edx, 2
 10255 0000823C 81FA00000000        <1> 		cmp edx, 0
 10256 00008242 75E9                <1> 		jne clearwindow
 10257 00008244 6649                <1> 		dec cx
 10258 00008246 668B15[D4570000]    <1> 		mov dx, [resolutionx2]
 10259 0000824D 662B16              <1> 		sub dx, [esi]
 10260 00008250 662B16              <1> 		sub dx, [esi]
 10261 00008253 01D7                <1> 		add edi, edx
 10262 00008255 668B16              <1> 		mov dx, [esi]
 10263 00008258 660316              <1> 		add dx, [esi]
 10264 0000825B 6681F90000          <1> 		cmp cx, 0
 10265 00008260 75CB                <1> 		jne clearwindow
 10266                              <1> 	endwindowclear:
 10267 00008262 C605[9D220000]00    <1> 		mov byte [termcopyon], 0
 10268 00008269 8B3D[EF7A0000]      <1> 		mov edi, [lastpos]
 10269 0000826F 8B35[5A800000]      <1> 		mov esi, [grphbuf + 2]
 10270 00008275 668B15[5E800000]    <1> 		mov dx, [grphbuf + 6]
 10271 0000827C 668B0D[60800000]    <1> 		mov cx, [grphbuf + 8]
 10272 00008283 668B1D[58800000]    <1> 		mov bx, [grphbuf]
 10273 0000828A 66A1[62800000]      <1> 		mov ax, [grphbuf + 10]
 10274 00008290 88DC                <1> 		mov ah, bl
 10275 00008292 8B1D[64800000]      <1> 		mov ebx, [grphbuf + 12]
 10276                              <1> 	showgraphicsreplace:
 10277 00008298 897702              <1> 		mov [edi + 2], esi
 10278 0000829B 66895706            <1> 		mov [edi + 6], dx
 10279 0000829F 66894F08            <1> 		mov [edi + 8], cx
 10280 000082A3 895F0C              <1> 		mov [edi + 12], ebx
 10281 000082A6 30FF                <1> 		xor bh, bh
 10282 000082A8 88E3                <1> 		mov bl, ah
 10283 000082AA 30E4                <1> 		xor ah, ah
 10284 000082AC 6689470A            <1> 		mov [edi + 10], ax
 10285 000082B0 66891F              <1> 		mov [edi], bx
 10286 000082B3 8B5F0C              <1> 		mov ebx, [edi + 12]
 10287 000082B6 668B470A            <1> 		mov ax, [edi + 10]
 10288 000082BA C3                  <1> 		ret
 10289                              <1> 	showgraphicsnew:
 10290 000082BB BF[27D30000]        <1> 		mov edi, graphicstable
 10291                              <1> 	shwgrph2:
 10292 000082C0 66813F0000          <1> 		cmp word [edi], 0
 10293 000082C5 74D1                <1> 		je showgraphicsreplace
 10294 000082C7 81C710000000        <1> 		add edi, 16
 10295 000082CD 81FF[27D50000]      <1> 		cmp edi, graphicstableend
 10296 000082D3 72EB                <1> 		jb shwgrph2
 10297                              <1> 	showgraphicsdone:
 10298 000082D5 C3                  <1> 		ret
 10299                              <1> 	
 10300                              <1> putpixel: ;color in si, point is (dx,cx)
 10301                              <1> 		;destroys edi, ebx, eax
 10302 000082D6 6650                <1> 	push ax
 10303 000082D8 6653                <1> 	push bx
 10304 000082DA 31C0                <1> 	xor eax, eax
 10305 000082DC 31DB                <1> 	xor ebx, ebx
 10306 000082DE 31FF                <1> 	xor edi, edi
 10307 000082E0 668B1D[E8560000]    <1> 	mov bx, [resolutiony]
 10308 000082E7 66A1[E6560000]      <1> 	mov ax, [resolutionx]
 10309 000082ED 6639C2              <1> 	cmp dx, ax
 10310 000082F0 7720                <1> 	ja .doneput
 10311 000082F2 66D1E0              <1> 	shl ax, 1
 10312 000082F5 6639D9              <1> 	cmp cx, bx
 10313 000082F8 7718                <1> 	ja .doneput
 10314 000082FA 6689CB              <1> 	mov bx, cx
 10315 000082FD 52                  <1> 	push edx
 10316 000082FE F7E3                <1> 	mul ebx
 10317 00008300 5A                  <1> 	pop edx
 10318 00008301 6601D7              <1> 	add di, dx
 10319 00008304 6601D7              <1> 	add di, dx
 10320 00008307 01C7                <1> 	add edi, eax
 10321 00008309 033D[FC560000]      <1> 	add edi, [physbaseptr]
 10322 0000830F 668937              <1> 	mov [edi], si
 10323                              <1> .doneput:
 10324 00008312 665B                <1> 	pop bx
 10325 00008314 6658                <1> 	pop ax
 10326 00008316 C3                  <1> 	ret
 10327                              <1> 	
 10328                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10329 00008317 31FF                <1> 	xor edi, edi
 10330 00008319 31C0                <1> 	xor eax, eax
 10331 0000831B 31DB                <1> 	xor ebx, ebx
 10332 0000831D 668B1D[D4570000]    <1> 	mov bx, [resolutionx2]
 10333 00008324 6689D7              <1> 	mov di, dx
 10334 00008327 6601D7              <1> 	add di, dx
 10335 0000832A 6689C8              <1> 	mov ax, cx
 10336 0000832D F7E3                <1> 	mul ebx
 10337 0000832F 01C7                <1> 	add edi, eax
 10338 00008331 033D[FC560000]      <1> 	add edi, [physbaseptr]
 10339 00008337 C3                  <1> 	ret
 10340                              <1> 
 10341 00008338 00                  <1> 	mouseon db 0
 10342 00008339 0000                <1> 	icon dw 0	;pointer to icon
 10343 0000833B 00000000            <1> 	codepointer dd 0 ;pointer to code
 10344 0000833F 00                  <1> 	iconselected db 0
 10345                                  %endif
 10346                                  %ifdef network.included
 10347                                  	%include "source/network.asm"
 10348                              <1> network.init:
 10349                              <1> %ifdef rtl8139.included
 10350                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10351                              <2> ;RTL8139 NIC DRIVER
 10352                              <2> rtl8139:
 10353 00008340 E805000000          <2> 	call .init
 10354 00008345 E9CE010000          <2> 	jmp .end
 10355                              <2> 
 10356                              <2> .RBSTART equ 0x30
 10357                              <2> .IMR equ 0x3C
 10358                              <2> .ISR equ 0x3E
 10359                              <2> .CMD equ 0x37
 10360                              <2> .RCR equ 0x44
 10361                              <2> .CONFIG1 equ 0x52
 10362                              <2> .TSD0 equ 0x10
 10363                              <2> .TSAD0 equ 0x20
 10364                              <2> .init:	;should find card, get mac, and initialize card
 10365 0000834A 31C0                <2> 	xor eax, eax
 10366 0000834C A2[DF610000]        <2> 	mov [pcifunction], al
 10367 00008351 A2[DD610000]        <2> 	mov [pcibus], al
 10368 00008356 A2[DE610000]        <2> 	mov [pcidevice], al
 10369 0000835B B002                <2> 	mov al, 0x02 ;type code
 10370 0000835D A2[6E620000]        <2> 	mov [pcitype], al
 10371 00008362 B8EC103981          <2> 	mov eax, 0x813910EC
 10372 00008367 A3[E2610000]        <2> 	mov [pcidevid], eax
 10373 0000836C E885DEFFFF          <2> 	call getpciport
 10374 00008371 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10375 00008377 7501                <2> 	jne .initnic
 10376 00008379 C3                  <2> 	ret
 10377                              <2> .initnic:
 10378 0000837A 8915[F7840000]      <2> 	mov [.basenicaddr], edx
 10379 00008380 89D1                <2> 	mov ecx, edx
 10380 00008382 E87AACFFFF          <2> 	call showhex	;for debugging, please remove
 10381 00008387 BE[80BB0100]        <2> 	mov esi, rbuffstart
 10382 0000838C B900200000          <2> 	mov ecx, 8192
 10383 00008391 31C0                <2> 	xor eax, eax
 10384                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10385 00008393 8806                <2> 	mov [esi], al
 10386 00008395 46                  <2> 	inc esi
 10387 00008396 6649                <2> 	dec cx
 10388 00008398 6681F90000          <2> 	cmp cx, 0
 10389 0000839D 75F4                <2> 	jne .clearrbuff
 10390                              <2> .findmac:
 10391 0000839F 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10392 000083A5 BF[FC840000]        <2> 	mov edi, .mac
 10393 000083AA B906000000          <2> 	mov ecx, 6
 10394                              <2> .macputloop:
 10395 000083AF EC                  <2> 	in al, dx
 10396 000083B0 8807                <2> 	mov [edi], al
 10397 000083B2 47                  <2> 	inc edi
 10398 000083B3 42                  <2> 	inc edx
 10399 000083B4 49                  <2> 	dec ecx
 10400 000083B5 75F8                <2> 	jnz .macputloop
 10401 000083B7 B9[FC840000]        <2> 	mov ecx, .mac
 10402 000083BC E8EB0B0000          <2> 	call showmac
 10403 000083C1 E817000000          <2> 	call .resetnic
 10404 000083C6 BE[02850000]        <2> 	mov esi, .name
 10405 000083CB E88A99FFFF          <2> 	call print
 10406 000083D0 BE[0B850000]        <2> 	mov esi, .initmsg
 10407 000083D5 E88099FFFF          <2> 	call print
 10408 000083DA 31DB                <2> 	xor ebx, ebx
 10409 000083DC C3                  <2> 	ret
 10410                              <2> .resetnic:
 10411 000083DD 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10412 000083E3 81C252000000        <2> 	add edx, .CONFIG1
 10413 000083E9 30C0                <2> 	xor al, al
 10414 000083EB EE                  <2> 	out dx, al	;WAKE UP!!!!
 10415 000083EC 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10416 000083F2 81C237000000        <2> 	add edx, .CMD
 10417 000083F8 B010                <2> 	mov al, 0x10
 10418 000083FA EE                  <2> 	out dx, al	;Reset
 10419                              <2> .resetnicwait:
 10420 000083FB EC                  <2> 	in al, dx
 10421 000083FC A810                <2> 	test al, 0x10
 10422 000083FE 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10423 00008404 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10424 0000840A 81C230000000        <2> 	add edx, .RBSTART
 10425 00008410 B8[80BB0100]        <2> 	mov eax, rbuffstart
 10426 00008415 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
 10427 0000841A EF                  <2> 	out dx, eax	;give nic receive buffer location
 10428 0000841B 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10429 00008421 81C23C000000        <2> 	add edx, .IMR
 10430                              <2> 	;in ax, dx
 10431 00008427 66B80500            <2> 	mov ax, 5
 10432 0000842B 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 10433 0000842D 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10434 00008433 81C244000000        <2> 	add edx, .RCR
 10435 00008439 B802000000          <2> 	mov eax, 000010b ;receive only physical matches
 10436 0000843E 0580000000          <2> 	add eax, 128 ;enable wrap option
 10437 00008443 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10438 00008444 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10439 0000844A 81C237000000        <2> 	add edx, .CMD
 10440 00008450 B00C                <2> 	mov al, 0x0C
 10441 00008452 EE                  <2> 	out dx, al	;use transmit and receive
 10442 00008453 C605[FB840000]01    <2> 	mov byte [.nicconfig], 1
 10443 0000845A C3                  <2> 	ret
 10444                              <2> 	
 10445                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10446 0000845B 56                  <2> 	push esi
 10447 0000845C 57                  <2> 	push edi
 10448 0000845D 803D[FB840000]01    <2> 	cmp byte [.nicconfig], 1
 10449 00008464 7410                <2> 	je .sendit
 10450 00008466 E8DFFEFFFF          <2> 	call .init
 10451 0000846B 5F                  <2> 	pop edi
 10452 0000846C 5E                  <2> 	pop esi
 10453 0000846D 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10454 00008473 75E6                <2> 	jne .sendpacket
 10455 00008475 C3                  <2> 	ret
 10456                              <2> .sendit:
 10457 00008476 E862FFFFFF          <2> 	call .resetnic
 10458 0000847B 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10459 00008481 81C220000000        <2> 	add edx, .TSAD0
 10460 00008487 5F                  <2> 	pop edi
 10461 00008488 8B0D[FC840000]      <2> 	mov ecx, [.mac]
 10462 0000848E 894F06              <2> 	mov [edi + 6], ecx
 10463 00008491 668B0D[00850000]    <2> 	mov cx, [.mac + 4]
 10464 00008498 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10465 0000849C A1[3E020000]        <2> 	mov eax, [basecache]
 10466 000084A1 C1E004              <2> 	shl eax, 4
 10467 000084A4 01F8                <2> 	add eax, edi
 10468 000084A6 EF                  <2> 	out dx, eax	;here's Johnny!
 10469 000084A7 5E                  <2> 	pop esi
 10470 000084A8 29FE                <2> 	sub esi, edi
 10471 000084AA 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10472 000084B0 81C210000000        <2> 	add edx, .TSD0
 10473 000084B6 ED                  <2> 	in eax, dx ;get tsd
 10474 000084B7 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
 10475 000084BC 01F0                <2> 	add eax, esi ;add length to tsd
 10476 000084BE 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
 10477 000084C3 EF                  <2> 	out dx, eax
 10478                              <2> .checknicownbit:
 10479 000084C4 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10480 000084CA 81C210000000        <2> 	add edx, .TSD0
 10481 000084D0 ED                  <2> 	in eax, dx
 10482 000084D1 2500200000          <2> 	and eax, 0x2000 ;check own bit
 10483 000084D6 3D00200000          <2> 	cmp eax, 0x2000
 10484 000084DB 75E7                <2> 	jne .checknicownbit
 10485                              <2> .checknictokbit:
 10486 000084DD 8B15[F7840000]      <2> 	mov edx, [.basenicaddr]
 10487 000084E3 81C210000000        <2> 	add edx, .TSD0
 10488 000084E9 ED                  <2> 	in eax, dx
 10489 000084EA 2500800000          <2> 	and eax, 0x8000	;check tok bit
 10490 000084EF 3D00800000          <2> 	cmp eax, 0x8000
 10491 000084F4 75E7                <2> 	jne .checknictokbit
 10492 000084F6 C3                  <2> 	ret
 10493 000084F7 00000000            <2> .basenicaddr dd 0
 10494 000084FB 00                  <2> .nicconfig db 0
 10495 000084FC 000000000000        <2> .mac db 0,0,0,0,0,0
 10496 00008502 52544C383133392000  <2> .name db "RTL8139 ",0
 10497 0000850B 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10498 00008514 65640A00            <2>
 10499                              <2> 
 10500                              <2> .end:
 10501                              <1> %endif
 10502                              <1> %ifdef rtl8169.included
 10503                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10504                              <2> ;RTL8169 NIC DRIVER
 10505                              <2> rtl8169:
 10506 00008518 E805000000          <2> 	call .init
 10507 0000851D E9EE030000          <2> 	jmp .end
 10508                              <2> 
 10509                              <2> ;REGISTERS
 10510                              <2> .CMD equ 0x37
 10511                              <2> .TXPOLL equ 0x38
 10512                              <2> .TCR equ 0x40
 10513                              <2> .RCR equ 0x44
 10514                              <2> .IMR equ 0x3C
 10515                              <2> .ISR equ 0x3E
 10516                              <2> .LOCK equ 0x50
 10517                              <2> .CONFIG1 equ 0x52
 10518                              <2> .TDSAR equ 0x20
 10519                              <2> .RDSAR equ 0xE4
 10520                              <2> .MAXRX equ 0xDA
 10521                              <2> .MAXTX equ 0xEC
 10522                              <2> ;IMPORTANT VALUES
 10523                              <2> .OWN equ 0x80000000
 10524                              <2> .EOR equ 0x40000000
 10525                              <2> .POLLING equ 0x40
 10526                              <2> ;CODE
 10527                              <2> .init:	;should find card, get mac, and initialize card
 10528 00008522 31C0                <2> 	xor eax, eax
 10529 00008524 A2[DF610000]        <2> 	mov [pcifunction], al
 10530 00008529 A2[DD610000]        <2> 	mov [pcibus], al
 10531 0000852E A2[DE610000]        <2> 	mov [pcidevice], al
 10532 00008533 B002                <2> 	mov al, 0x02 ;type code
 10533 00008535 A2[6E620000]        <2> 	mov [pcitype], al
 10534 0000853A B8EC106981          <2> 	mov eax, 0x816910EC
 10535 0000853F A3[E2610000]        <2> 	mov [pcidevid], eax
 10536 00008544 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10537 00008549 891D[E6610000]      <2> 	mov [pcidevidmask], ebx
 10538 0000854F E8A2DCFFFF          <2> 	call getpciport
 10539 00008554 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10540 0000855A 7501                <2> 	jne .initnic
 10541 0000855C C3                  <2> 	ret
 10542                              <2> .initnic:
 10543 0000855D 8915[F8860000]      <2> 	mov [.basenicaddr], edx
 10544 00008563 89D1                <2> 	mov ecx, edx
 10545 00008565 E897AAFFFF          <2> 	call showhex	;for debugging, please remove
 10546 0000856A BE[80BB0100]        <2> 	mov esi, rbuffstart
 10547 0000856F B900200000          <2> 	mov ecx, 8192
 10548 00008574 31C0                <2> 	xor eax, eax
 10549                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10550 00008576 8806                <2> 	mov [esi], al
 10551 00008578 46                  <2> 	inc esi
 10552 00008579 6649                <2> 	dec cx
 10553 0000857B 6681F90000          <2> 	cmp cx, 0
 10554 00008580 75F4                <2> 	jne .clearrbuff
 10555                              <2> .findmac:
 10556 00008582 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10557 00008588 BF[FD860000]        <2> 	mov edi, .mac
 10558 0000858D B906000000          <2> 	mov ecx, 6
 10559                              <2> .macputloop:
 10560 00008592 EC                  <2> 	in al, dx
 10561 00008593 8807                <2> 	mov [edi], al
 10562 00008595 47                  <2> 	inc edi
 10563 00008596 42                  <2> 	inc edx
 10564 00008597 49                  <2> 	dec ecx
 10565 00008598 75F8                <2> 	jnz .macputloop
 10566 0000859A B9[FD860000]        <2> 	mov ecx, .mac
 10567 0000859F E8080A0000          <2> 	call showmac
 10568 000085A4 E817000000          <2> 	call .resetnic
 10569 000085A9 BE[03870000]        <2> 	mov esi, .name
 10570 000085AE E8A797FFFF          <2> 	call print
 10571 000085B3 BE[0C870000]        <2> 	mov esi, .initmsg
 10572 000085B8 E89D97FFFF          <2> 	call print
 10573 000085BD 31DB                <2> 	xor ebx, ebx
 10574 000085BF C3                  <2> 	ret
 10575                              <2> .resetnic:
 10576 000085C0 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10577 000085C6 81C237000000        <2> 	add edx, .CMD
 10578 000085CC B010                <2> 	mov al, 0x10
 10579 000085CE EE                  <2> 	out dx, al	;Reset
 10580                              <2> .resetnicwait:
 10581 000085CF EC                  <2> 	in al, dx
 10582 000085D0 A810                <2> 	test al, 0x10
 10583 000085D2 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10584 000085D8 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10585 000085DE 81C250000000        <2> 	add edx, .LOCK
 10586 000085E4 B0C0                <2> 	mov al, 0xC0
 10587 000085E6 EE                  <2> 	out dx, al	;unlock config registers
 10588 000085E7 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10589 000085ED 81C244000000        <2> 	add edx, .RCR
 10590 000085F3 B80FE70000          <2> 	mov eax, 0x0000E70F
 10591 000085F8 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10592 000085F9 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10593 000085FF 81C240000000        <2> 	add edx, .TCR
 10594 00008605 B800070003          <2> 	mov eax, 0x03000700
 10595 0000860A EF                  <2> 	out dx, eax	;set up tcr
 10596 0000860B 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10597 00008611 81C2DA000000        <2> 	add edx, .MAXRX
 10598 00008617 66B8FF1F            <2> 	mov ax, 0x1FFF
 10599 0000861B 66EF                <2> 	out dx, ax	;setup max rx size
 10600 0000861D 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10601 00008623 81C2EC000000        <2> 	add edx, .MAXTX
 10602 00008629 B03B                <2> 	mov al, 0x3B
 10603 0000862B EE                  <2> 	out dx, al	;setup max tx size
 10604 0000862C 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10605 00008632 81C220000000        <2> 	add edx, .TDSAR
 10606 00008638 A1[3E020000]        <2> 	mov eax, [basecache]
 10607 0000863D C1E004              <2> 	shl eax, 4
 10608 00008640 05[00880000]        <2> 	add eax, .txdesc
 10609 00008645 EF                  <2> 	out dx, eax
 10610 00008646 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10611 0000864C 81C2E4000000        <2> 	add edx, .RDSAR
 10612 00008652 A1[3E020000]        <2> 	mov eax, [basecache]
 10613 00008657 C1E004              <2> 	shl eax, 4
 10614 0000865A 05[00890000]        <2> 	add eax, .rxdesc
 10615 0000865F EF                  <2> 	out dx, eax
 10616 00008660 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10617 00008666 81C237000000        <2> 	add edx, .CMD
 10618 0000866C B00C                <2> 	mov al, 0x0C
 10619 0000866E EE                  <2> 	out dx, al	;use transmit and receive
 10620 0000866F 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10621 00008675 81C250000000        <2> 	add edx, .LOCK
 10622 0000867B 30C0                <2> 	xor al, al
 10623 0000867D EE                  <2> 	out dx, al
 10624 0000867E C605[FC860000]01    <2> 	mov byte [.nicconfig], 1
 10625 00008685 C3                  <2> 	ret
 10626                              <2> 	
 10627                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10628 00008686 803D[FC860000]01    <2> 	cmp byte [.nicconfig], 1
 10629 0000868D 7412                <2> 	je .sendcachedata
 10630 0000868F 56                  <2> 	push esi
 10631 00008690 57                  <2> 	push edi
 10632 00008691 E88CFEFFFF          <2> 	call .init
 10633 00008696 5F                  <2> 	pop edi
 10634 00008697 5E                  <2> 	pop esi
 10635 00008698 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10636 0000869E 75E6                <2> 	jne .sendpacket
 10637 000086A0 C3                  <2> 	ret
 10638                              <2> .sendcachedata:
 10639 000086A1 8B0D[FD860000]      <2> 	mov ecx, [.mac]
 10640 000086A7 894F06              <2> 	mov [edi + 6], ecx
 10641 000086AA 668B0D[01870000]    <2> 	mov cx, [.mac + 4]
 10642 000086B1 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10643 000086B5 A1[3E020000]        <2> 	mov eax, [basecache]
 10644 000086BA C1E004              <2> 	shl eax, 4
 10645 000086BD 01F8                <2> 	add eax, edi
 10646 000086BF A3[08880000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10647 000086C4 29FE                <2> 	sub esi, edi
 10648 000086C6 668935[00880000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10649 000086CD 810D[00880000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10650 000086D5 0080                <2>
 10651 000086D7 8B15[F8860000]      <2> 	mov edx, [.basenicaddr]
 10652 000086DD 81C238000000        <2> 	add edx, .TXPOLL
 10653 000086E3 B040                <2> 	mov al, .POLLING
 10654 000086E5 EE                  <2> 	out dx, al	;set up TX Polling
 10655                              <2> .sendloop:
 10656 000086E6 A1[00880000]        <2> 	mov eax, [.txdesc]
 10657 000086EB 2500000080          <2> 	and eax, .OWN
 10658 000086F0 3D00000080          <2> 	cmp eax, .OWN
 10659 000086F5 74EF                <2> 	je .sendloop
 10660 000086F7 C3                  <2> 	ret
 10661                              <2> 	
 10662 000086F8 00000000            <2> .basenicaddr dd 0
 10663 000086FC 00                  <2> .nicconfig db 0
 10664 000086FD 000000000000        <2> .mac db 0,0,0,0,0,0
 10665 00008703 52544C383136392000  <2> .name db "RTL8169 ",0
 10666 0000870C 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10667 00008715 65640A00            <2>
 10668 00008719 90<rept>            <2> align 256, nop
 10669                              <2> .txdesc:
 10670 00008800 00000040            <2> 	dd .EOR	;command
 10671 00008804 00000000            <2> 	dd 0	;vlan
 10672 00008808 00000000            <2> 	dd 0	;low buf
 10673 0000880C 00000000            <2> 	dd 0	;high buf
 10674 00008810 90<rept>            <2> align 256, nop
 10675                              <2> .rxdesc:
 10676 00008900 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10677 00008904 00000000            <2> 	dd 0	;vlan
 10678 00008908 [80BB0100]          <2> 	dd rbuffstart	;low buf
 10679 0000890C 00000000            <2> 	dd 0	;high buf
 10680                              <2> .end:
 10681                              <1> %endif
 10682                              <1> %ifdef ne2000.included
 10683                              <1> 	%include "source/drivers/network/ne2000.asm"
 10684                              <2> ne2000:
 10685 00008910 E805000000          <2> 	call .init
 10686 00008915 E93C030000          <2> 	jmp .end
 10687                              <2> 
 10688                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10689                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10690                              <2> ;0	CR		CR		CR		CR		CR		CR
 10691                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10692                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10693                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10694                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10695                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10696                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10697                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10698                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10699                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10700                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10701                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10702                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10703                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10704                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10705                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10706                              <2> .CR equ 0
 10707                              <2> 	.CR.STP	equ 1		;Stop
 10708                              <2> 	.CR.STA equ 2		;Start
 10709                              <2> 	.CR.TXP equ 4		;Transmit
 10710                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10711                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10712                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10713                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10714                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10715                              <2> .PSTART equ 1
 10716                              <2> .PSTOP equ 2
 10717                              <2> .BNRY equ 3
 10718                              <2> .ISR equ 7
 10719                              <2> 	.ISR.PRX equ 1		;Packet Received
 10720                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10721                              <2> 	.ISR.RXE equ 4		;Receive Error
 10722                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10723                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10724                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10725                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10726                              <2> 	.ISR.RST equ 0x80	;Reset status
 10727                              <2> .RSAR0 equ 8
 10728                              <2> .RSAR1 equ 9
 10729                              <2> .RBCR0 equ 0xA
 10730                              <2> .RBCR1 equ 0xB
 10731                              <2> .RCR equ 0xC
 10732                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10733                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10734                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10735                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10736                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10737                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10738                              <2> .DCR equ 0xE
 10739                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10740                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10741                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10742                              <2> 	.DCR.LS equ 8		;Loopback Select
 10743                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10744                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10745                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10746                              <2> .ASIC equ 0x10
 10747                              <2> .RESET equ 0x1F
 10748                              <2> 
 10749                              <2> .init:
 10750 0000891A BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10751 0000891F 31C0                <2> 	xor eax, eax
 10752 00008921 A2[DF610000]        <2> 	mov [pcifunction], al
 10753 00008926 A2[DD610000]        <2> 	mov [pcibus], al
 10754 0000892B A2[DE610000]        <2> 	mov [pcidevice], al
 10755 00008930 B002                <2> 	mov al, 2 ;type code
 10756 00008932 A2[6E620000]        <2> 	mov [pcitype], al
 10757 00008937 B8EC102980          <2> 	mov eax, 0x802910EC
 10758 0000893C A3[E2610000]        <2> 	mov [pcidevid], eax
 10759 00008941 E8B0D8FFFF          <2> 	call getpciport
 10760 00008946 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10761 0000894C 7501                <2> 	jne .good0
 10762 0000894E C3                  <2> 	ret
 10763                              <2> .good0:
 10764 0000894F 8915[198C0000]      <2> 	mov [.basenicaddr], edx
 10765 00008955 89D1                <2> 	mov ecx, edx
 10766                              <2> .test:
 10767 00008957 E854000000          <2> 	call .reset
 10768 0000895C E87B000000          <2> 	call .stop
 10769 00008961 89CA                <2> 	mov edx, ecx
 10770 00008963 B9FF000000          <2> 	mov ecx, 0xFF
 10771 00008968 E2FE                <2> 	loop $ ;wait for ~100 us
 10772 0000896A 89D1                <2> 	mov ecx, edx
 10773 0000896C EC                  <2> 	in al, dx
 10774 0000896D 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10775 0000896F 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10776 00008971 7410                <2> 	je .good1
 10777 00008973 89CA                <2> 	mov edx, ecx
 10778 00008975 81C207000000        <2> 	add edx, .ISR
 10779 0000897B EC                  <2> 	in al, dx
 10780 0000897C 2480                <2> 	and al, .ISR.RST
 10781 0000897E 3C80                <2> 	cmp al, .ISR.RST
 10782 00008980 7401                <2> 	je .good1
 10783 00008982 C3                  <2> 	ret
 10784                              <2> .good1:
 10785 00008983 E879A6FFFF          <2> call showhex	;for debugging, please remove
 10786 00008988 E85B000000          <2> 	call .setup
 10787 0000898D E81A060000          <2> call showmac
 10788 00008992 BE[1E8C0000]        <2> mov esi, .name
 10789 00008997 E8BE93FFFF          <2> call print
 10790 0000899C BE[268C0000]        <2> mov esi, .initmsg
 10791 000089A1 E8B493FFFF          <2> call print
 10792 000089A6 C605[1D8C0000]01    <2> 	mov byte [.nicconfig], 1
 10793 000089AD 31DB                <2> 	xor ebx, ebx
 10794 000089AF C3                  <2> 	ret
 10795                              <2> .reset:
 10796 000089B0 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10797 000089B6 81C21F000000        <2> 	add edx, .RESET
 10798 000089BC EC                  <2> 	in al, dx
 10799 000089BD EE                  <2> 	out dx, al ;write its contents to itself
 10800 000089BE C3                  <2> 	ret
 10801                              <2> .page:
 10802 000089BF 66C1E00E            <2> 	shl ax, 14
 10803 000089C3 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10804 000089C9 EC                  <2> 	in al, dx
 10805 000089CA 243F                <2> 	and al, 00111111b
 10806 000089CC 08E0                <2> 	or al, ah
 10807 000089CE EE                  <2> 	out dx, al
 10808 000089CF C3                  <2> 	ret
 10809                              <2> .start:
 10810 000089D0 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10811 000089D6 B020                <2> 	mov al, .CR.RD2
 10812 000089D8 B002                <2> 	mov al, .CR.STA
 10813 000089DA EE                  <2> 	out dx, al
 10814 000089DB C3                  <2> 	ret
 10815                              <2> .stop:
 10816 000089DC 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10817 000089E2 B020                <2> 	mov al, .CR.RD2
 10818 000089E4 0C01                <2> 	or al, .CR.STP
 10819 000089E6 EE                  <2> 	out dx, al
 10820 000089E7 C3                  <2> 	ret
 10821                              <2> .setup:
 10822 000089E8 E8EFFFFFFF          <2> 	call .stop
 10823 000089ED 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10824 000089F3 81C20E000000        <2> 	add edx, .DCR
 10825 000089F9 B040                <2> 	mov al, .DCR.FT1
 10826 000089FB 0C01                <2> 	or al, .DCR.WTS
 10827 000089FD 0C08                <2> 	or al, .DCR.LS
 10828 000089FF EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10829 00008A00 E8B9000000          <2> 	call .getmac
 10830 00008A05 E8D2FFFFFF          <2> 	call .stop
 10831 00008A0A 30C0                <2> 	xor al, al
 10832 00008A0C 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10833 00008A12 81C20A000000        <2> 	add edx, .RBCR0
 10834 00008A18 EE                  <2> 	out dx, al
 10835 00008A19 6642                <2> 	inc dx
 10836 00008A1B EE                  <2> 	out dx, al ;Clear byte count
 10837 00008A1C B800400000          <2> 	mov eax, 16*1024
 10838 00008A21 A3[388C0000]        <2> 	mov [.ringstart], eax
 10839 00008A26 C1E808              <2> 	shr eax, 8
 10840 00008A29 66A3[348C0000]      <2> 	mov [.pagestart], ax
 10841 00008A2F 0534000000          <2> 	add eax, 64-2*6
 10842 00008A34 A3[368C0000]        <2> 	mov [.pageend], eax
 10843 00008A39 C1E008              <2> 	shl eax, 8
 10844 00008A3C 66A3[3C8C0000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10845 00008A42 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10846 00008A48 81C201000000        <2> 	add edx, .PSTART
 10847 00008A4E A0[348C0000]        <2> 	mov al, [.pagestart]
 10848 00008A53 EE                  <2> 	out dx, al
 10849 00008A54 A0[368C0000]        <2> 	mov al, [.pageend]
 10850 00008A59 6642                <2> 	inc dx
 10851 00008A5B EE                  <2> 	out dx, al
 10852 00008A5C A0[348C0000]        <2> 	mov al, [.pagestart]
 10853 00008A61 6642                <2> 	inc dx
 10854 00008A63 EE                  <2> 	out dx, al
 10855 00008A64 E873FFFFFF          <2> 	call .stop
 10856                              <2> ;INSERT INTERRUPT ENABLE HERE
 10857 00008A69 B001                <2> 	mov al, 1
 10858 00008A6B E84FFFFFFF          <2> 	call .page
 10859 00008A70 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10860 00008A76 BF[468C0000]        <2> 	mov edi, .rom
 10861                              <2> .copymactocard:
 10862 00008A7B 42                  <2> 	inc edx
 10863 00008A7C 6E                  <2> 	outsb
 10864 00008A7D 81C702000000        <2> 	add edi, 2
 10865 00008A83 81FA06000000        <2> 	cmp edx, 6
 10866 00008A89 76F0                <2> 	jbe .copymactocard
 10867 00008A8B 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10868 00008A91 81C207000000        <2> 	add edx, 7
 10869 00008A97 A0[348C0000]        <2> 	mov al, [.pagestart]
 10870 00008A9C FEC0                <2> 	inc al
 10871 00008A9E EE                  <2> 	out dx, al ;set page in CURR register
 10872                              <2> ;INSERT MULTICAST INIT HERE
 10873 00008A9F E838FFFFFF          <2> 	call .stop
 10874 00008AA4 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10875 00008AAA 81C20C000000        <2> 	add edx, .RCR
 10876 00008AB0 B004                <2> 	mov al, .RCR.AB
 10877 00008AB2 EE                  <2> 	out dx, al ;accept broadcast
 10878 00008AB3 6642                <2> 	inc dx
 10879 00008AB5 30C0                <2> 	xor al, al
 10880 00008AB7 EE                  <2> 	out dx, al ;stop loopback
 10881 00008AB8 E813FFFFFF          <2> 	call .start
 10882 00008ABD C3                  <2> 	ret
 10883                              <2> .getmac:
 10884 00008ABE 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10885 00008AC4 B020                <2> 	mov al, 0x20
 10886 00008AC6 0C02                <2> 	or al, 2
 10887 00008AC8 EE                  <2> 	out dx, al	;set STA and RD2 bits
 10888 00008AC9 6681C20A00          <2> 	add dx, .RBCR0
 10889 00008ACE B010                <2> 	mov al, 16
 10890 00008AD0 EE                  <2> 	out dx, al
 10891 00008AD1 6642                <2> 	inc dx
 10892 00008AD3 30C0                <2> 	xor al, al
 10893 00008AD5 EE                  <2> 	out dx, al
 10894 00008AD6 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10895 00008ADC 6681C20800          <2> 	add dx, .RSAR0
 10896 00008AE1 EE                  <2> 	out dx, al
 10897 00008AE2 6642                <2> 	inc dx
 10898 00008AE4 EE                  <2> 	out dx, al
 10899 00008AE5 668B15[198C0000]    <2> 	mov dx, [.basenicaddr]
 10900 00008AEC B008                <2> 	mov al, 8
 10901 00008AEE 0C02                <2> 	or al, 2
 10902 00008AF0 EE                  <2> 	out dx, al
 10903 00008AF1 668B15[198C0000]    <2> 	mov dx, [.basenicaddr]
 10904 00008AF8 6681C21000          <2> 	add dx, .ASIC
 10905 00008AFD B908000000          <2> 	mov ecx, 8
 10906 00008B02 BF[468C0000]        <2> 	mov edi, .rom
 10907 00008B07 F3666D              <2> 	rep insw
 10908                              <2> .copymac:
 10909 00008B0A BF[468C0000]        <2> 	mov edi, .rom
 10910 00008B0F BE[408C0000]        <2> 	mov esi, .mac
 10911 00008B14 B906000000          <2> 	mov ecx, 6
 10912                              <2> .lpmac:
 10913 00008B19 8A07                <2> 	mov al, [edi]
 10914 00008B1B 8806                <2> 	mov [esi], al
 10915 00008B1D 81C702000000        <2> 	add edi, 2
 10916 00008B23 46                  <2> 	inc esi
 10917 00008B24 E2F3                <2> 	loop .lpmac
 10918 00008B26 B9[408C0000]        <2> 	mov ecx, .mac
 10919 00008B2B C3                  <2> 	ret
 10920                              <2> .sendpacket:
 10921 00008B2C 803D[1D8C0000]00    <2> 	cmp byte [.nicconfig], 0
 10922 00008B33 7512                <2> 	jne .sendit
 10923 00008B35 56                  <2> 	push esi
 10924 00008B36 57                  <2> 	push edi
 10925 00008B37 E8DEFDFFFF          <2> 	call .init
 10926 00008B3C 5F                  <2> 	pop edi
 10927 00008B3D 5E                  <2> 	pop esi
 10928 00008B3E 81FB00000000        <2> 	cmp ebx, 0
 10929 00008B44 7401                <2> 	je .sendit
 10930 00008B46 C3                  <2> 	ret
 10931                              <2> .sendit: ;packet start in edi, end in esi
 10932 00008B47 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10933                              <2> 	;now the packet start is in esi, end in edi
 10934 00008B49 8B0D[408C0000]      <2> 	mov ecx, [.mac]
 10935 00008B4F 894E06              <2> 	mov [esi + 6], ecx
 10936 00008B52 668B0D[448C0000]    <2> 	mov cx, [.mac + 4]
 10937 00008B59 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10938 00008B5D 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10939 00008B63 B020                <2> 	mov al, .CR.RD2
 10940 00008B65 0C02                <2> 	or al, .CR.STA
 10941 00008B67 EE                  <2> 	out dx, al ;set RD2 and STA
 10942 00008B68 81C207000000        <2> 	add edx, .ISR ; ISR
 10943 00008B6E B040                <2> 	mov al, .ISR.RDC
 10944 00008B70 EE                  <2> 	out dx, al ;set RDC flag
 10945 00008B71 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10946 00008B77 6681C20A00          <2> 	add dx, .RBCR0
 10947 00008B7C 89F8                <2> 	mov eax, edi
 10948 00008B7E 29F0                <2> 	sub eax, esi
 10949 00008B80 BB01000000          <2> 	mov ebx, 1
 10950 00008B85 21C3                <2> 	and ebx, eax
 10951 00008B87 81FB01000000        <2> 	cmp ebx, 1
 10952 00008B8D 7501                <2> 	jne .nofixword
 10953 00008B8F 40                  <2> 	inc eax
 10954                              <2> .nofixword:
 10955 00008B90 89C1                <2> 	mov ecx, eax ;save length in ecx
 10956 00008B92 EE                  <2> 	out dx, al
 10957 00008B93 86C4                <2> 	xchg al, ah
 10958 00008B95 6642                <2> 	inc dx
 10959 00008B97 EE                  <2> 	out dx, al ;send size
 10960 00008B98 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10961 00008B9E 6681C20800          <2> 	add dx, .RSAR0
 10962 00008BA3 66A1[348C0000]      <2> 	mov ax, [.pagestart]
 10963 00008BA9 C1E008              <2> 	shl eax, 8
 10964 00008BAC EE                  <2> 	out dx, al
 10965 00008BAD 86C4                <2> 	xchg al, ah
 10966 00008BAF 6642                <2> 	inc dx
 10967 00008BB1 EE                  <2> 	out dx, al ;send address in NIC memory
 10968 00008BB2 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10969 00008BB8 B010                <2> 	mov al, .CR.RD1
 10970 00008BBA 0C02                <2> 	or al, .CR.STA
 10971 00008BBC EE                  <2> 	out dx, al ;set RD and STA
 10972 00008BBD 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10973 00008BBF D1E9                <2> 	shr ecx, 1
 10974 00008BC1 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10975 00008BC7 6681C21000          <2> 	add dx, 0x10
 10976 00008BCC F3666F              <2> 	rep outsw ;Send the packet data
 10977 00008BCF 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10978 00008BD5 6681C20700          <2> 	add dx, .ISR
 10979                              <2> .chkcopylp:
 10980 00008BDA B440                <2> 	mov ah, .ISR.RDC
 10981 00008BDC EC                  <2> 	in al, dx
 10982 00008BDD 20C4                <2> 	and ah, al
 10983 00008BDF 80FC40              <2> 	cmp ah, 0x40
 10984 00008BE2 75F6                <2> 	jne .chkcopylp	
 10985 00008BE4 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10986 00008BEA 6681C20400          <2> 	add dx, 4
 10987 00008BEF A0[348C0000]        <2> 	mov al, [.pagestart]
 10988 00008BF4 EE                  <2> 	out dx, al ;send start address in pages
 10989 00008BF5 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10990 00008BFB 81C205000000        <2> 	add edx, 0x5
 10991 00008C01 89D8                <2> 	mov eax, ebx
 10992 00008C03 EE                  <2> 	out dx, al
 10993 00008C04 86C4                <2> 	xchg al, ah
 10994 00008C06 6642                <2> 	inc dx
 10995 00008C08 EE                  <2> 	out dx, al ;send length
 10996 00008C09 8B15[198C0000]      <2> 	mov edx, [.basenicaddr]
 10997 00008C0F B020                <2> 	mov al, 0x20
 10998 00008C11 0C04                <2> 	or al, 4
 10999 00008C13 0C02                <2> 	or al, 2
 11000 00008C15 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 11001 00008C16 31DB                <2> 	xor ebx, ebx
 11002 00008C18 C3                  <2> 	ret
 11003 00008C19 00000000            <2> .basenicaddr dd 0
 11004 00008C1D 00                  <2> .nicconfig db 0
 11005 00008C1E 4E45323030302000    <2> .name db "NE2000 ",0
 11006 00008C26 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 11007 00008C2F 65642E0A00          <2>
 11008                              <2> align 2, nop
 11009 00008C34 0000                <2> .pagestart dw 0
 11010 00008C36 0000                <2> .pageend dw 0
 11011 00008C38 00000000            <2> .ringstart dd 0
 11012 00008C3C 00000000            <2> .ringend dd 0
 11013 00008C40 000000000000        <2> .mac db 0,0,0,0,0,0
 11014 00008C46 00<rept>            <2> .rom times 16 db 0
 11015                              <2> 
 11016                              <2> .end:
 11017                              <1> %endif
 11018                              <1> %ifdef i8254x.included
 11019                              <1> 	%include "source/drivers/network/i8254x.asm"
 11020                              <2> ;Intel 8254x NIC DRIVER
 11021                              <2> i8254x:
 11022 00008C56 E805000000          <2> 	call .init
 11023 00008C5B E980020000          <2> 	jmp .end
 11024                              <2> 
 11025                              <2> ;REGISTERS
 11026                              <2> .EEC equ 0x10
 11027                              <2> .EERD equ 0x14
 11028                              <2> .TCTL equ 0x400
 11029                              <2> .TIPG equ 0x410
 11030                              <2> .TDBAL equ 0x3800
 11031                              <2> .TDBAH equ 0x3804
 11032                              <2> .TDLEN equ 0x3808
 11033                              <2> .TDH equ 0x3810
 11034                              <2> .TDT equ 0x3818
 11035                              <2> .RAL equ 0x5400
 11036                              <2> .RAH equ 0x5404
 11037                              <2> ;CODE
 11038                              <2> .init:	;should find card, get mac, and initialize card
 11039 00008C60 31C0                <2> 	xor eax, eax
 11040 00008C62 A2[DF610000]        <2> 	mov [pcifunction], al
 11041 00008C67 A2[DD610000]        <2> 	mov [pcibus], al
 11042 00008C6C A2[DE610000]        <2> 	mov [pcidevice], al
 11043 00008C71 B002                <2> 	mov al, 0x02 ;type code
 11044 00008C73 A2[6E620000]        <2> 	mov [pcitype], al
 11045 00008C78 B886800010          <2> 	mov eax, 0x10008086
 11046 00008C7D A3[E2610000]        <2> 	mov [pcidevid], eax
 11047 00008C82 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 11048 00008C87 891D[E6610000]      <2> 	mov [pcidevidmask], ebx
 11049 00008C8D E858D5FFFF          <2> 	call getpcimem
 11050 00008C92 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 11051 00008C98 7501                <2> 	jne .initnic
 11052 00008C9A C3                  <2> 	ret
 11053                              <2> .initnic:
 11054 00008C9B 8915[358E0000]      <2> 	mov [.basenicaddr], edx
 11055 00008CA1 89D1                <2> 	mov ecx, edx
 11056 00008CA3 E859A3FFFF          <2> 	call showhex	;for debugging, please remove
 11057 00008CA8 BE[80BB0100]        <2> 	mov esi, rbuffstart
 11058 00008CAD B900200000          <2> 	mov ecx, 8192
 11059 00008CB2 31C0                <2> 	xor eax, eax
 11060                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 11061 00008CB4 8806                <2> 	mov [esi], al
 11062 00008CB6 46                  <2> 	inc esi
 11063 00008CB7 6649                <2> 	dec cx
 11064 00008CB9 6681F90000          <2> 	cmp cx, 0
 11065 00008CBE 75F4                <2> 	jne .clearrbuff
 11066                              <2> .findmac:
 11067 00008CC0 8B1D[358E0000]      <2> 	mov ebx, [.basenicaddr]
 11068                              <2> 	; Setup Control Register
 11069 00008CC6 B861030000          <2> 	mov eax, 0x361
 11070 00008CCB 8903                <2> 	mov [ebx], eax
 11071                              <2> 	; Setup Transmission Descriptors
 11072 00008CCD BF[608E0000]        <2> 	mov edi, .tdesc
 11073 00008CD2 A1[3E020000]        <2> 	mov eax, [basecache]
 11074 00008CD7 C1E004              <2> 	shl eax, 4
 11075 00008CDA 01F8                <2> 	add eax, edi
 11076 00008CDC 898300380000        <2> 	mov [ebx + .TDBAL], eax
 11077 00008CE2 31C0                <2> 	xor eax, eax
 11078 00008CE4 898310380000        <2> 	mov [ebx + .TDH], eax
 11079 00008CEA 898318380000        <2> 	mov [ebx + .TDT], eax
 11080 00008CF0 898304380000        <2> 	mov [ebx + .TDBAH], eax
 11081 00008CF6 66B88000            <2> 	mov ax, 128
 11082 00008CFA 898308380000        <2> 	mov [ebx + .TDLEN], eax
 11083 00008D00 B80A010401          <2> 	mov eax, 0x104010A
 11084 00008D05 898300040000        <2> 	mov [ebx + .TCTL], eax	;turn on transmission, set up other registers
 11085 00008D0B B80A285000          <2> 	mov eax, 0x50280A
 11086 00008D10 898310040000        <2> 	mov [ebx + .TIPG], eax	;setup TIPG
 11087                              <2> 	;Setup Receive Registers
 11088 00008D16 BF[3A8E0000]        <2> 	mov edi, .mac
 11089 00008D1B 81C300540000        <2> 	add ebx, .RAL
 11090 00008D21 31D2                <2> 	xor edx, edx
 11091 00008D23 B903000000          <2> 	mov ecx, 3
 11092                              <2> .macloop:
 11093 00008D28 E8BC000000          <2> 	call .eepromread
 11094 00008D2D 668907              <2> 	mov [edi], ax
 11095 00008D30 668903              <2> 	mov [ebx], ax
 11096 00008D33 42                  <2> 	inc edx
 11097 00008D34 81C302000000        <2> 	add ebx, 2
 11098 00008D3A 81C702000000        <2> 	add edi, 2
 11099 00008D40 E2E6                <2> 	loop .macloop
 11100 00008D42 66B80080            <2> 	mov ax, 0x8000
 11101 00008D46 668903              <2> 	mov [ebx], ax	;set address valid bit
 11102                              <2> 
 11103 00008D49 B9[3A8E0000]        <2> 	mov ecx, .mac
 11104 00008D4E E859020000          <2> 	call showmac
 11105 00008D53 BE[408E0000]        <2> 	mov esi, .name
 11106 00008D58 E8FD8FFFFF          <2> 	call print
 11107 00008D5D BE[488E0000]        <2> 	mov esi, .initmsg
 11108 00008D62 E8F38FFFFF          <2> 	call print
 11109 00008D67 C605[398E0000]01    <2> 	mov byte [.nicconfig], 1
 11110 00008D6E 31DB                <2> 	xor ebx, ebx
 11111 00008D70 C3                  <2> 	ret
 11112                              <2> 	
 11113                              <2> .sendpacket:
 11114 00008D71 803D[398E0000]00    <2> 	cmp byte [.nicconfig], 0
 11115 00008D78 7512                <2> 	jne .sendit
 11116 00008D7A 56                  <2> 	push esi
 11117 00008D7B 57                  <2> 	push edi
 11118 00008D7C E8DFFEFFFF          <2> 	call .init
 11119 00008D81 5F                  <2> 	pop edi
 11120 00008D82 5E                  <2> 	pop esi
 11121 00008D83 81FB00000000        <2> 	cmp ebx, 0
 11122 00008D89 7401                <2> 	je .sendit
 11123 00008D8B C3                  <2> 	ret
 11124                              <2> .sendit:	;packet start in edi, packet end in esi
 11125 00008D8C 8B0D[3A8E0000]      <2> 	mov ecx, [.mac]
 11126 00008D92 894F06              <2> 	mov [edi + 6], ecx
 11127 00008D95 668B0D[3E8E0000]    <2> 	mov cx, [.mac + 4]
 11128 00008D9C 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 11129 00008DA0 8B1D[358E0000]      <2> 	mov ebx, [.basenicaddr]
 11130 00008DA6 29FE                <2> 	sub esi, edi
 11131 00008DA8 A1[3E020000]        <2> 	mov eax, [basecache]
 11132 00008DAD C1E004              <2> 	shl eax, 4
 11133 00008DB0 01F8                <2> 	add eax, edi	;ALWAYS ADD THE VIRTUAL MEMORY OFFSET!
 11134 00008DB2 A3[608E0000]        <2> 	mov [.tdesc], eax	;Low Address
 11135 00008DB7 8935[688E0000]      <2> 	mov [.tdesc + 8], esi	;Length
 11136 00008DBD B8000B0000          <2> 	mov eax, 0xB00
 11137 00008DC2 A3[6A8E0000]        <2> 	mov [.tdesc + 10], eax	;Command
 11138 00008DC7 B810000000          <2> 	mov eax, 16
 11139 00008DCC 898318380000        <2> 	mov [ebx + .TDT], eax	;Trail of TDESC ring buffer
 11140                              <2> .checksta:
 11141 00008DD2 8B0D[6C8E0000]      <2> 	mov ecx, [.tdesc + 12]
 11142 00008DD8 81E101000000        <2> 	and ecx, 1
 11143 00008DDE 81F900000000        <2> 	cmp ecx, 0
 11144 00008DE4 74EC                <2> 	je .checksta
 11145 00008DE6 31DB                <2> 	xor ebx, ebx
 11146 00008DE8 C3                  <2> 	ret
 11147                              <2> 	
 11148                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 11149 00008DE9 8B35[358E0000]      <2> 	mov esi, [.basenicaddr]
 11150 00008DEF 8B4610              <2> 	mov eax, [esi + .EEC]
 11151 00008DF2 0D40000000          <2> 	or eax, 1000000b
 11152 00008DF7 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 11153                              <2> .waiteeprom:
 11154 00008DFA 8B4610              <2> 	mov eax, [esi + .EEC]
 11155 00008DFD 2580000000          <2> 	and eax, 10000000b
 11156 00008E02 3D80000000          <2> 	cmp eax, 10000000b
 11157 00008E07 75F1                <2> 	jne .waiteeprom
 11158 00008E09 8B4614              <2> 	mov eax, [esi + .EERD]
 11159 00008E0C 31C0                <2> 	xor eax, eax
 11160 00008E0E 88D4                <2> 	mov ah, dl 	;eeprom address
 11161 00008E10 0C01                <2> 	or al, 1	;start read
 11162 00008E12 894614              <2> 	mov [esi + .EERD], eax
 11163                              <2> .waiteepromread:
 11164 00008E15 8B4614              <2> 	mov eax, [esi + .EERD]
 11165 00008E18 2510000000          <2> 	and eax, 10000b
 11166 00008E1D 3D10000000          <2> 	cmp eax, 10000b
 11167 00008E22 75F1                <2> 	jne .waiteepromread
 11168 00008E24 8B4614              <2> 	mov eax, [esi + .EERD]
 11169 00008E27 668B4610            <2> 	mov ax, [esi + .EEC]
 11170 00008E2B 24BF                <2> 	and al, 10111111b
 11171 00008E2D 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 11172 00008E31 C1E810              <2> 	shr eax, 16	;AX has the requested word
 11173 00008E34 C3                  <2> 	ret
 11174                              <2> 
 11175 00008E35 00000000            <2> .basenicaddr dd 0
 11176 00008E39 00                  <2> .nicconfig db 0
 11177 00008E3A 000000000000        <2> .mac db 0,0,0,0,0,0
 11178 00008E40 4938323534582000    <2> .name db "I8254X ",0
 11179 00008E48 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 11180 00008E51 65640A00            <2>
 11181 00008E55 00<rept>            <2> align 16, db 0
 11182                              <2> .tdesc:
 11183 00008E60 00000000            <2> 	dd 0	;Address Low = 0
 11184 00008E64 00000000            <2> 	dd 0	;Address High = 4
 11185 00008E68 0000                <2> 	dw 0	;Length = 8
 11186 00008E6A 00                  <2> 	db 0	;CSO = 10
 11187 00008E6B 00                  <2> 	db 0	;CMD = 11
 11188 00008E6C 00                  <2> 	db 0	;STA, RSV = 12
 11189 00008E6D 00                  <2> 	db 0	;CSS = 13
 11190 00008E6E 0000                <2> 	dw 0	;Special = 14
 11191 00008E70 00<rept>            <2> times (128-16) db 0
 11192                              <2> .end:
 11193                              <1> %endif
 11194 00008EE0 C3                  <1> 	ret
 11195                              <1> 
 11196                              <1> sendpacket: ;packet start in edi, end in esi
 11197                              <1> 	%ifdef rtl8139.included
 11198 00008EE1 57                  <1> 		push edi
 11199 00008EE2 56                  <1> 		push esi
 11200 00008EE3 E873F5FFFF          <1> 		call rtl8139.sendpacket
 11201 00008EE8 5E                  <1> 		pop esi
 11202 00008EE9 5F                  <1> 		pop edi
 11203                              <1> 	%endif
 11204                              <1> 	%ifdef rtl8169.included
 11205 00008EEA 57                  <1> 		push edi
 11206 00008EEB 56                  <1> 		push esi
 11207 00008EEC E895F7FFFF          <1> 		call rtl8169.sendpacket
 11208 00008EF1 5E                  <1> 		pop esi
 11209 00008EF2 5F                  <1> 		pop edi
 11210                              <1> 	%endif
 11211                              <1> 	%ifdef ne2000.included
 11212 00008EF3 57                  <1> 		push edi
 11213 00008EF4 56                  <1> 		push esi
 11214 00008EF5 E832FCFFFF          <1> 		call ne2000.sendpacket
 11215 00008EFA 5E                  <1> 		pop esi
 11216 00008EFB 5F                  <1> 		pop edi
 11217                              <1> 	%endif
 11218                              <1> 	%ifdef i8254x.included
 11219 00008EFC E870FEFFFF          <1> 		call i8254x.sendpacket
 11220                              <1> 	%endif
 11221 00008F01 C3                  <1> 	ret
 11222                              <1> 
 11223                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 11224 00008F02 31C0                <1> 	xor eax, eax
 11225 00008F04 31DB                <1> 	xor ebx, ebx
 11226 00008F06 31C9                <1> 	xor ecx, ecx
 11227                              <1> .lp:
 11228 00008F08 8A07                <1> 	mov al, [edi]
 11229 00008F0A 8A6701              <1> 	mov ah, [edi + 1]
 11230 00008F0D 01C3                <1> 	add ebx, eax
 11231 00008F0F 81C702000000        <1> 	add edi, 2
 11232 00008F15 39F7                <1> 	cmp edi, esi
 11233 00008F17 72EF                <1> 	jb .lp
 11234 00008F19 66B9FFFF            <1> 	mov cx, 0xFFFF
 11235 00008F1D 6689D8              <1> 	mov ax, bx
 11236 00008F20 C1EB10              <1> 	shr ebx, 16
 11237 00008F23 6601D8              <1> 	add ax, bx
 11238 00008F26 6629C1              <1> 	sub cx, ax
 11239 00008F29 C3                  <1> 	ret
 11240                              <1> 	
 11241                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 11242 00008F2A 31DB                <1> 	xor ebx, ebx
 11243 00008F2C 31C9                <1> 	xor ecx, ecx
 11244 00008F2E 31D2                <1> 	xor edx, edx
 11245                              <1> .mlp:
 11246 00008F30 89F7                <1> 	mov edi, esi
 11247 00008F32 4F                  <1> 	dec edi
 11248                              <1> .lp:
 11249 00008F33 47                  <1> 	inc edi
 11250 00008F34 8A07                <1> 	mov al, [edi]
 11251 00008F36 3C20                <1> 	cmp al, " "
 11252 00008F38 7408                <1> 	je .dnlp
 11253 00008F3A 3C00                <1> 	cmp al, 0
 11254 00008F3C 7404                <1> 	je .dnlp
 11255 00008F3E 3C2E                <1> 	cmp al, "."
 11256 00008F40 75F1                <1> 	jne .lp
 11257                              <1> .dnlp:
 11258 00008F42 30C0                <1> 	xor al, al
 11259 00008F44 8807                <1> 	mov [edi], al
 11260 00008F46 53                  <1> 	push ebx
 11261 00008F47 56                  <1> 	push esi
 11262 00008F48 57                  <1> 	push edi
 11263 00008F49 31FF                <1> 	xor edi, edi
 11264 00008F4B E85DA2FFFF          <1> 	call cnvrttxt
 11265 00008F50 5E                  <1> 	pop esi
 11266 00008F51 5F                  <1> 	pop edi ;i intentionally switch them
 11267 00008F52 5B                  <1> 	pop ebx
 11268 00008F53 46                  <1> 	inc esi
 11269 00008F54 BF[6C8F0000]        <1> 	mov edi, ipstr
 11270 00008F59 880C1F              <1> 	mov [edi + ebx], cl
 11271 00008F5C 43                  <1> 	inc ebx
 11272 00008F5D 81FB04000000        <1> 	cmp ebx, 4
 11273 00008F63 72CB                <1> 	jb .mlp
 11274 00008F65 8B0D[6C8F0000]      <1> 	mov ecx, [ipstr]
 11275 00008F6B C3                  <1> 	ret
 11276 00008F6C 00000000            <1> ipstr dd 0
 11277                              <1> showip: 	;put the ip address in ecx
 11278 00008F70 89C8                <1> 	mov eax, ecx
 11279 00008F72 30DB                <1> 	xor bl, bl
 11280                              <1> .lp:
 11281 00008F74 3C00                <1> 	cmp al, 0
 11282 00008F76 750B                <1> 	jne .nozeroprint
 11283 00008F78 B030                <1> 	mov al, "0"
 11284 00008F7A 50                  <1> 	push eax
 11285 00008F7B E81E93FFFF          <1> 	call prcharq
 11286 00008F80 58                  <1> 	pop eax
 11287 00008F81 30C0                <1> 	xor al, al
 11288                              <1> .nozeroprint:
 11289 00008F83 31C9                <1> 	xor ecx, ecx
 11290 00008F85 88C1                <1> 	mov cl, al
 11291 00008F87 E83FA1FFFF          <1> 	call showdec
 11292 00008F8C C1E808              <1> 	shr eax, 8
 11293 00008F8F FEC3                <1> 	inc bl
 11294 00008F91 80FB04              <1> 	cmp bl, 4
 11295 00008F94 7312                <1> 	jae .done
 11296 00008F96 50                  <1> 	push eax
 11297 00008F97 6653                <1> 	push bx
 11298 00008F99 BE[A98F0000]        <1> 	mov esi, .dot
 11299 00008F9E E8B78DFFFF          <1> 	call print
 11300 00008FA3 665B                <1> 	pop bx
 11301 00008FA5 58                  <1> 	pop eax
 11302 00008FA6 EBCC                <1> 	jmp .lp
 11303                              <1> .done:
 11304 00008FA8 C3                  <1> 	ret
 11305 00008FA9 082E00              <1> .dot db 8,".",0
 11306                              <1> showmac:	;mac begins in [ecx]
 11307 00008FAC BE[FC8F0000]        <1> 	mov esi, macprint
 11308 00008FB1 89CF                <1> 	mov edi, ecx
 11309 00008FB3 81C106000000        <1> 	add ecx, 6
 11310                              <1> showmacloop:
 11311 00008FB9 8A07                <1> 	mov al, [edi]
 11312 00008FBB 8A27                <1> 	mov ah, [edi]
 11313 00008FBD C0E804              <1> 	shr al, 4
 11314 00008FC0 C0E404              <1> 	shl ah, 4
 11315 00008FC3 C0EC04              <1> 	shr ah, 4
 11316 00008FC6 0430                <1> 	add al, 48
 11317 00008FC8 3C39                <1> 	cmp al, "9"
 11318 00008FCA 7606                <1> 	jbe .goodal
 11319 00008FCC 2C30                <1> 	sub al, 48
 11320 00008FCE 2C0A                <1> 	sub al, 0xA
 11321 00008FD0 0441                <1> 	add al, "A"
 11322                              <1> .goodal:
 11323 00008FD2 80C430              <1> 	add ah, 48
 11324 00008FD5 80FC39              <1> 	cmp ah, "9"
 11325 00008FD8 7609                <1> 	jbe .goodah
 11326 00008FDA 80EC30              <1> 	sub ah, 48
 11327 00008FDD 80EC0A              <1> 	sub ah, 0xA
 11328 00008FE0 80C441              <1> 	add ah, "A"
 11329                              <1> .goodah:
 11330 00008FE3 668906              <1> 	mov [esi], ax
 11331 00008FE6 81C603000000        <1> 	add esi, 3
 11332 00008FEC 47                  <1> 	inc edi
 11333 00008FED 39CF                <1> 	cmp edi, ecx
 11334 00008FEF 72C8                <1> 	jb showmacloop
 11335 00008FF1 BE[FC8F0000]        <1> 	mov esi, macprint
 11336 00008FF6 E85F8DFFFF          <1> 	call print
 11337 00008FFB C3                  <1> 	ret
 11338                              <1> 	
 11339 00008FFC 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 11340 00009005 30303A30303A303020- <1>
 11341 0000900E 00                  <1>
 11342 0000900F 00000000            <1> ethernetend dw 0,0
 11343 00009013 C0A80002            <1> sysip db 192,168,0,2
 11344 00009017 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 11345                                  %endif
 11346                                      %include "source/data.asm"
 11347 0000901D 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 11348 00009025 73687573683A2000    <1> 	notfound1 db "shush: ",0
 11349 0000902D 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 11350 00009036 6E640A00            <1>
 11351 0000903A 757365726E616D653A- <1> 	userask db "username:",0
 11352 00009043 00                  <1>
 11353 00009044 70617373776F72643A- <1> 	pwdask	db	"password:",0
 11354 0000904D 00                  <1>
 11355 0000904E 40                  <1> 	computer db "@"
 11356                              <1> %ifdef io.serial
 11357                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 11358                              <1> %else
 11359 0000904F 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 11360 00009058 00                  <1>
 11361                              <1> %endif
 11362 00009059 5D242000            <1> 	endprompt db "]$ ",0
 11363 0000905D 0D                  <1> 	crlf 	db  13
 11364 0000905E 0A00                <1> 	line	db	10,0
 11365                              <1> 	userlst:
 11366 00009060 726F6F7400          <1> 			db "root",0
 11367 00009065 617765736F6D65706F- <1> 			db "awesomepower",0
 11368 0000906E 77657200            <1>
 11369 00009072 7573657200          <1> 			db "user",0
 11370 00009077 70617373776F726400  <1> 			db "password",0
 11371 00009080 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 11372 00009082 00                  <1> 			db 0
 11373                              <1> 	userlstend:
 11374                              <1> 	
 11375                              <1> %ifdef io.serial
 11376                              <1> %else
 11377 00009082 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 11378                              <1> fontend:
 11379                              <1> %endif
 11380                              <1> osend:	;this is the end of the operating system's space on disk
 11381                                      %include "build/fileindex.asm"
 11382                              <1> diskfileindex:
 11383 0000A083 617267746573742E65- <1> db "argtest.elf",0
 11384 0000A08C 6C6600              <1>
 11385 0000A08F 52000000            <1> dd (f0-$$)/512
 11386 0000A093 06010000            <1> dd (f1-f0)/512
 11387 0000A097 6261636B67726F756E- <1> db "background.bmp",0
 11388 0000A0A0 642E626D7000        <1>
 11389 0000A0A6 58010000            <1> dd (f1-$$)/512
 11390 0000A0AA 01140000            <1> dd (f2-f1)/512
 11391 0000A0AE 626F6F742E736800    <1> db "boot.sh",0
 11392 0000A0B6 59150000            <1> dd (f2-$$)/512
 11393 0000A0BA 01000000            <1> dd (f3-f2)/512
 11394 0000A0BE 63686172746573742E- <1> db "chartest.elf",0
 11395 0000A0C7 656C6600            <1>
 11396 0000A0CB 5A150000            <1> dd (f3-$$)/512
 11397 0000A0CF 26010000            <1> dd (f4-f3)/512
 11398 0000A0D3 646F73746573742E63- <1> db "dostest.com",0
 11399 0000A0DC 6F6D00              <1>
 11400 0000A0DF 80160000            <1> dd (f4-$$)/512
 11401 0000A0E3 01000000            <1> dd (f5-f4)/512
 11402 0000A0E7 6578656300          <1> db "exec",0
 11403 0000A0EC 81160000            <1> dd (f5-$$)/512
 11404 0000A0F0 01000000            <1> dd (f6-f5)/512
 11405 0000A0F4 66696E616C636F756E- <1> db "finalcount.sn",0
 11406 0000A0FD 742E736E00          <1>
 11407 0000A102 82160000            <1> dd (f6-$$)/512
 11408 0000A106 01000000            <1> dd (f7-f6)/512
 11409 0000A10A 666F726B00          <1> db "fork",0
 11410 0000A10F 83160000            <1> dd (f7-$$)/512
 11411 0000A113 01000000            <1> dd (f8-f7)/512
 11412 0000A117 6775697465737400    <1> db "guitest",0
 11413 0000A11F 84160000            <1> dd (f8-$$)/512
 11414 0000A123 03000000            <1> dd (f9-f8)/512
 11415 0000A127 68656C6C6F776F726C- <1> db "helloworld.elf",0
 11416 0000A130 642E656C6600        <1>
 11417 0000A136 87160000            <1> dd (f9-$$)/512
 11418 0000A13A D6010000            <1> dd (f10-f9)/512
 11419 0000A13E 696E7400            <1> db "int",0
 11420 0000A142 5D180000            <1> dd (f10-$$)/512
 11421 0000A146 01000000            <1> dd (f11-f10)/512
 11422 0000A14A 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11423 0000A153 2E736E00            <1>
 11424 0000A157 5E180000            <1> dd (f11-$$)/512
 11425 0000A15B 01000000            <1> dd (f12-f11)/512
 11426 0000A15F 6D6172696F2E736E00  <1> db "mario.sn",0
 11427 0000A168 5F180000            <1> dd (f12-$$)/512
 11428 0000A16C 01000000            <1> dd (f13-f12)/512
 11429 0000A170 70692E656C6600      <1> db "pi.elf",0
 11430 0000A177 60180000            <1> dd (f13-$$)/512
 11431 0000A17B 1F010000            <1> dd (f14-f13)/512
 11432 0000A17F 736F6C6C65726F732E- <1> db "solleros.bmp",0
 11433 0000A188 626D7000            <1>
 11434 0000A18C 7F190000            <1> dd (f14-$$)/512
 11435 0000A190 B0020000            <1> dd (f15-f14)/512
 11436 0000A194 736F6C6C65726F732E- <1> db "solleros.txt",0
 11437 0000A19D 74787400            <1>
 11438 0000A1A1 2F1C0000            <1> dd (f15-$$)/512
 11439 0000A1A5 01000000            <1> dd (f16-f15)/512
 11440 0000A1A9 736F6E676F74696D65- <1> db "songotime.sn",0
 11441 0000A1B2 2E736E00            <1>
 11442 0000A1B6 301C0000            <1> dd (f16-$$)/512
 11443 0000A1BA 01000000            <1> dd (f17-f16)/512
 11444 0000A1BE 73736500            <1> db "sse",0
 11445 0000A1C2 311C0000            <1> dd (f17-$$)/512
 11446 0000A1C6 02000000            <1> dd (f18-f17)/512
 11447 0000A1CA 737464696F74657374- <1> db "stdiotest.elf",0
 11448 0000A1D3 2E656C6600          <1>
 11449 0000A1D8 331C0000            <1> dd (f18-$$)/512
 11450 0000A1DC 27010000            <1> dd (f19-f18)/512
 11451 0000A1E0 74656C7900          <1> db "tely",0
 11452 0000A1E5 5A1D0000            <1> dd (f19-$$)/512
 11453 0000A1E9 01000000            <1> dd (f20-f19)/512
 11454 0000A1ED 74696D65746573742E- <1> db "timetest.elf",0
 11455 0000A1F6 656C6600            <1>
 11456 0000A1FA 5B1D0000            <1> dd (f20-$$)/512
 11457 0000A1FE 04010000            <1> dd (f21-f20)/512
 11458 0000A202 7475746F7269616C2E- <1> db "tutorial.sh",0
 11459 0000A20B 736800              <1>
 11460 0000A20E 5F1E0000            <1> dd (f21-$$)/512
 11461 0000A212 03000000            <1> dd (f22-f21)/512
 11462 0000A216 756E667300          <1> db "unfs",0
 11463 0000A21B 621E0000            <1> dd (f22-$$)/512
 11464 0000A21F 02000000            <1> dd (f23-f22)/512
 11465 0000A223 766963746F72792E77- <1> db "victory.wav",0
 11466 0000A22C 617600              <1>
 11467 0000A22F 641E0000            <1> dd (f23-$$)/512
 11468 0000A233 16000000            <1> dd (f24-f23)/512
 11469 0000A237 5F696D672E62696E00  <1> db "_img.bin",0
 11470 0000A240 7A1E0000            <1> dd (f24-$$)/512
 11471 0000A244 D7020000            <1> dd (f25-f24)/512
 11472                              <1> enddiskfileindex:
 11473                              <1> 
 11474                                      %include "source/bss.asm"
 11475                              <1> align 4, nop
 11476                              <1> bssstart: equ $
 11477                              <1> guion equ bssstart
 11478                              <1> DriveNumber equ guion + 1
 11479                              <1> lbaad equ DriveNumber + 1
 11480                              <1> memlistbuf equ lbaad + 4
 11481                              <1> memlistend equ memlistbuf + 576
 11482                              <1> bsscopy equ memlistend
 11483                              <1> initialstack equ bsscopy
 11484                              <1> stackend equ initialstack + 4000
 11485                              <1> sigtable equ stackend + 96
 11486                              <1> fileindex: equ sigtable + 4
 11487                              <1> fileindexend: equ fileindex + 1024
 11488                              <1> previousstack equ fileindexend
 11489                              <1> lastfolderloc equ previousstack + 4
 11490                              <1> currentfolderloc equ lastfolderloc + 4
 11491                              <1> currentfolder equ currentfolderloc + 4
 11492                              <1> currentfolderend equ currentfolder + 512
 11493                              <1> uid equ currentfolderend
 11494                              <1> ranboot equ uid + 4
 11495                              <1> IFON equ ranboot + 1
 11496                              <1> IFTRUE equ IFON + 1
 11497                              <1> BATCHPOS equ IFTRUE + 100
 11498                              <1> BATCHISON equ BATCHPOS + 4
 11499                              <1> LOOPON equ BATCHISON + 1
 11500                              <1> LOOPPOS	equ LOOPON + 1
 11501                              <1> variables: equ LOOPPOS + 4
 11502                              <1> varend: equ variables + 4096
 11503                              <1> buftxt2: equ varend
 11504                              <1> buftxt: equ buftxt2 + 1024
 11505                              <1> buftxtend: equ buftxt + 1024
 11506                              <1> buf2: equ buftxtend
 11507                              <1> numbuf: equ buf2 + 20
 11508                              <1> %ifdef io.serial
 11509                              <1> 	lastcommandpos equ numbuf + 1
 11510                              <1> %else
 11511                              <1> 	%ifdef gui.included
 11512                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11513                              <1> 		graphicstableend equ graphicstable + 200h
 11514                              <1> 		%ifdef gui.background
 11515                              <1> 			backgroundbuffer equ graphicstableend
 11516                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11517                              <1> 			mousecolorbuf equ backgroundbufferend
 11518                              <1> 		%else
 11519                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11520                              <1> 		%endif
 11521                              <1> 		mcolorend equ mousecolorbuf + 256
 11522                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11523                              <1> 		videobufend	equ videobuf + 210*65*2
 11524                              <1> 		videobuf2 equ videobufend
 11525                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 11526                              <1> 	%else
 11527                              <1> 		videobuf equ numbuf + 1
 11528                              <1> 		videobufend equ videobuf + 80*30*2
 11529                              <1> 		videobuf2 equ videobufend
 11530                              <1> 		videobuf2end equ videobuf2 + 80*30*2
 11531                              <1> 	%endif
 11532                              <1> 	lastcommandpos: equ videobuf2end
 11533                              <1> %endif
 11534                              <1> 	commandbufpos: equ lastcommandpos + 4
 11535                              <1> 	commandlistentries: equ commandbufpos + 4
 11536                              <1> 	commandsentered: equ commandlistentries + 4
 11537                              <1> 	commandbuf: equ commandsentered + 4
 11538                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11539                              <1> %ifdef network.included
 11540                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11541                              <1> 	rbuffend equ rbuffstart + 8212
 11542                              <1> %else
 11543                              <1> 	rbuffstart equ commandbufend
 11544                              <1> 	rbuffend equ commandbufend
 11545                              <1> %endif
 11546                              <1> %ifdef threads.included
 11547                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11548                              <1> 	threadlistend: equ threadlist + 1024*4
 11549                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11550                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11551                              <1> 	bssend equ stack1 + 1024*1024
 11552                              <1> %else
 11553                              <1> 	bssend equ rbuffend
 11554                              <1> %endif
 11555                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11556                                      %include "build/files.asm"
 11557 0000A248 00<rept>            <1> align 512,db 0
 11558                              <1> f0:
 11559 0000A248 <incbin>            <1> incbin "included/argtest.elf"
 11560 0002AEF2 00<rept>            <1> align 512,db 0
 11561                              <1> f1:
 11562 0002AEF2 <incbin>            <1> incbin "included/background.bmp"
 11563 002AB046 00<rept>            <1> align 512,db 0
 11564                              <1> f2:
 11565 002AB046 <incbin>            <1> incbin "included/boot.sh"
 11566 002AB2FE 00<rept>            <1> align 512,db 0
 11567                              <1> f3:
 11568 002AB2FE <incbin>            <1> incbin "included/chartest.elf"
 11569 002CFEDB 00<rept>            <1> align 512,db 0
 11570                              <1> f4:
 11571 002CFEDB <incbin>            <1> incbin "included/dostest.com"
 11572 002D0131 00<rept>            <1> align 512,db 0
 11573                              <1> f5:
 11574 002D0131 <incbin>            <1> incbin "included/exec"
 11575 002D02E9 00<rept>            <1> align 512,db 0
 11576                              <1> f6:
 11577 002D02E9 <incbin>            <1> incbin "included/finalcount.sn"
 11578 002D0502 00<rept>            <1> align 512,db 0
 11579                              <1> f7:
 11580 002D0502 <incbin>            <1> incbin "included/fork"
 11581 002D0761 00<rept>            <1> align 512,db 0
 11582                              <1> f8:
 11583 002D0761 <incbin>            <1> incbin "included/guitest"
 11584 002D0C2E 00<rept>            <1> align 512,db 0
 11585                              <1> f9:
 11586 002D0C2E <incbin>            <1> incbin "included/helloworld.elf"
 11587 0030B9E3 00<rept>            <1> align 512,db 0
 11588                              <1> f10:
 11589 0030B9E3 <incbin>            <1> incbin "included/int"
 11590 0030BBB2 00<rept>            <1> align 512,db 0
 11591                              <1> f11:
 11592 0030BBB2 <incbin>            <1> incbin "included/lostwoods.sn"
 11593 0030BC56 00<rept>            <1> align 512,db 0
 11594                              <1> f12:
 11595 0030BC56 <incbin>            <1> incbin "included/mario.sn"
 11596 0030BE3A 00<rept>            <1> align 512,db 0
 11597                              <1> f13:
 11598 0030BE3A <incbin>            <1> incbin "included/pi.elf"
 11599 0032FD31 00<rept>            <1> align 512,db 0
 11600                              <1> f14:
 11601 0032FD31 <incbin>            <1> incbin "included/solleros.bmp"
 11602 00385DE6 00<rept>            <1> align 512,db 0
 11603                              <1> f15:
 11604 00385DE6 <incbin>            <1> incbin "included/solleros.txt"
 11605 00385F74 00<rept>            <1> align 512,db 0
 11606                              <1> f16:
 11607 00385F74 <incbin>            <1> incbin "included/songotime.sn"
 11608 0038604A 00<rept>            <1> align 512,db 0
 11609                              <1> f17:
 11610 0038604A <incbin>            <1> incbin "included/sse"
 11611 003864A8 00<rept>            <1> align 512,db 0
 11612                              <1> f18:
 11613 003864A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11614 003AB243 00<rept>            <1> align 512,db 0
 11615                              <1> f19:
 11616 003AB243 <incbin>            <1> incbin "included/tely"
 11617 003AB5C6 00<rept>            <1> align 512,db 0
 11618                              <1> f20:
 11619 003AB5C6 <incbin>            <1> incbin "included/timetest.elf"
 11620 003CBC3D 00<rept>            <1> align 512,db 0
 11621                              <1> f21:
 11622 003CBC3D <incbin>            <1> incbin "included/tutorial.sh"
 11623 003CC352 00<rept>            <1> align 512,db 0
 11624                              <1> f22:
 11625 003CC352 <incbin>            <1> incbin "included/unfs"
 11626                              <1> align 512,db 0
 11627                              <1> f23:
 11628 003CC352 <incbin>            <1> incbin "included/victory.wav"
 11629 003CF348 00<rept>            <1> align 512,db 0
 11630                              <1> f24:
 11631 003CF348 <incbin>            <1> incbin "included/_img.bin"
 11632                              <1> align 512,db 0
 11633                              <1> f25:
