     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> ;%define terminal.vsync
    19                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    20                              <1> 
    21                              <1> %define hardware.automatic
    22                              <1> ;Automatically load the sound and network drivers.
    23                              <1> 
    24                              <1> %define threads.included
    25                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    26                              <1> 
    27                              <1> %define exceptions.included
    28                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    29                              <1> 
    30                              <1> ;%define disk.protected
    31                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    32                              <1> 
    33                              <1> %define disk.real
    34                              <1> ;Use real mode for disk access-this gives greater compatibility
    35                              <1> 
    36                              <1> ;%define sound.included
    37                              <1> ;This includes the sound drivers
    38                              <1> 
    39                              <1> %define network.included
    40                              <1> ;This includes the network stack
    41                              <1> %define rtl8169.included
    42                              <1> ;This includes the RTL8169 drivers
    43                              <1> 
    44                              <1> %define rtl8139.included
    45                              <1> ;This includes the RTL8139 drivers
    46                              <1> 
    47                              <1> %define ne2000.included
    48                              <1> ;This includes the ne2000 drivers
    49                              <1> 
    50                              <1> ;%define sector.debug
    51                              <1> ;Dump the contents of the first sector of SollerOS
    52                              <1> 
    53                              <1> ;%define system.simple 
    54                              <1> ;The smallest possible system, overrides all options
    55                              <1> 
    56                              <1> ;FIX DEPENDANCIES
    57                              <1> %ifdef gui.included
    58                              <1> 	%undef io.serial
    59                              <1> %else
    60                              <1> 	%undef gui.alphablending
    61                              <1> 	%undef gui.background
    62                              <1> %endif
    63                              <1> %ifdef disk.protected
    64                              <1> 	%undef disk.real
    65                              <1> %endif
    66                              <1> %ifdef network.included
    67                              <1> %else
    68                              <1> 	%undef ne2000.included
    69                              <1> 	%undef rtl8139.included
    70                              <1> 	%undef rtl8169.included
    71                              <1> %endif
    72                              <1> %ifdef system.simple
    73                              <1> 	%define io.serial "1"
    74                              <1> 	%define disk.real
    75                              <1> 	%undef gui.included
    76                              <1> 	%undef gui.alphablending
    77                              <1> 	%undef gui.background
    78                              <1> 	%undef terminal.vsync
    79                              <1> 	%undef hardware.automatic
    80                              <1> 	%undef threads.included
    81                              <1> 	%undef exceptions.included
    82                              <1> 	%undef disk.protected
    83                              <1> 	%undef sound.included
    84                              <1> 	%undef network.included
    85                              <1> 	%undef rtl8139.included
    86                              <1> 	%undef rtl8169.included
    87                              <1> 	%undef ne2000.included
    88                              <1> 	%undef sector.debug
    89                              <1> %endif
    90                                  [BITS 16]
    91                                      %include "source/boot.asm"
    92                              <1>     ; MENU.ASM
    93                              <1> %include 'source/signature.asm'
    94                              <2> signature:
    95 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    96 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    97 00000011 696C642000          <2>
    98 00000016 DF000000            <2> dd 223	;version number
    99                              <2> signatureend:
   100                              <1> menustart:	
   101 0000001A 8CC8                <1> 	mov ax, cs
   102 0000001C 8ED8                <1> 	mov ds, ax
   103 0000001E 8EC0                <1> 	mov es, ax
   104 00000020 8ED0                <1> 	mov ss, ax
   105 00000022 880E[A195]          <1> 	mov [DriveNumber], cl
   106 00000026 668916[A295]        <1> 	mov [lbaad], edx
   107                              <1> %ifdef io.serial
   108                              <1> 	call getmemorysize
   109                              <1> 	mov si, serialmsg
   110                              <1> 	call printrm
   111                              <1> 	jmp pmode
   112                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   113                              <1> %else
   114 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   115 0000002E E95700              <1> 	jmp pmode
   116                              <1> %endif
   117                              <1> 	
   118                              <1> vgaset:
   119 00000031 B81200              <1> 	mov ax, 12h
   120 00000034 31DB                <1> 	xor bx, bx
   121 00000036 CD10                <1> 	int 10h
   122 00000038 C606[A095]00        <1> 	mov byte [guion], 0
   123 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   124 00000040 C3                  <1> 	ret
   125                              <1> 
   126                              <1> getmemorysize:
   127 00000041 BF[A695]            <1> 	mov di, memlistbuf
   128 00000044 6631DB              <1> 	xor ebx, ebx
   129                              <1> getmemsizeloop:
   130 00000047 66B820E80000        <1> 	mov eax, 0xE820
   131 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   132 00000053 66B918000000        <1> 	mov ecx, 24
   133 00000059 CD15                <1> 	int 0x15
   134 0000005B 81C71800            <1> 	add di, 24
   135 0000005F 81FF[E697]          <1> 	cmp di, memlistend
   136 00000063 7309                <1> 	jae nomoregetmemsize
   137 00000065 6681FB00000000      <1> 	cmp ebx, 0
   138 0000006C 75D9                <1> 	jne getmemsizeloop
   139                              <1> nomoregetmemsize:
   140 0000006E 81EF[A695]          <1> 	sub di, memlistbuf
   141 00000072 893E[E697]          <1> 	mov [memlistend], di
   142 00000076 C3                  <1> 	ret
   143                              <1> 	
   144                              <1> printrm:			; 'si' comes in with string address
   145 00000077 BB0700              <1>     mov bx,07		; write to display
   146 0000007A B40E                <1>     mov ah,0Eh		; screen function
   147 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   148 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   149 00000080 7405                <1>     je .done		; zero byte at end of string
   150 00000082 CD10                <1>     int 10h		; write character to screen.    
   151 00000084 46                  <1> 	inc si	     	; move to next character
   152 00000085 EBF5                <1>     jmp .lp		; loop
   153 00000087 C3                  <1> .done: ret
   154                                      %include "source/pmode.asm"
   155                              <1> [BITS 16]
   156                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   157                              <1> ;	16-bit real mode
   158                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   159                              <1> 
   160                              <1> pmode:
   161 00000088 6631C0              <1> 	xor eax, eax
   162 0000008B 6631DB              <1> 	xor ebx, ebx
   163 0000008E 6631C9              <1> 	xor ecx, ecx
   164 00000091 6631D2              <1> 	xor edx, edx
   165 00000094 6631F6              <1> 	xor esi, esi
   166 00000097 6631FF              <1> 	xor edi, edi
   167 0000009A BA9200              <1> 	mov dx, 0x92
   168 0000009D EC                  <1> 	in al, dx	;;A20
   169 0000009E 0C02                <1> 	or al, 2
   170 000000A0 EE                  <1> 	out dx, al
   171 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   172 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   173 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   174 000000AB A3[8103]            <1> 	mov [gdt2 + 2],ax
   175 000000AE A3[8903]            <1> 	mov [gdt3 + 2],ax
   176 000000B1 66C1E810            <1> 	shr eax,16
   177 000000B5 A2[8303]            <1> 	mov [gdt2 + 4],al
   178 000000B8 A2[8B03]            <1> 	mov [gdt3 + 4],al
   179 000000BB 8826[8603]          <1> 	mov [gdt2 + 7],ah
   180 000000BF 8826[8E03]          <1> 	mov [gdt3 + 7],ah
   181                              <1> 
   182 000000C3 66B8[E6970000]      <1> 	mov eax, initialstack
   183 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   184 000000CE A3[7903]            <1> 	mov [gdts + 2],ax
   185 000000D1 66C1E810            <1> 	shr eax, 16
   186 000000D5 A2[7B03]            <1> 	mov [gdts + 4],al
   187 000000D8 8826[7E03]          <1> 	mov [gdts + 7], ah
   188                              <1> 	
   189 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   190 000000E0 A3[9103]            <1> 	mov [gdt4 + 2],ax
   191 000000E3 A3[9903]            <1> 	mov [gdt5 + 2],ax
   192 000000E6 A3[A103]            <1> 	mov [gdtv8086 + 2], ax
   193 000000E9 A3[A903]            <1> 	mov [gdtv80862 + 2], ax
   194 000000EC 66C1E810            <1> 	shr eax,16
   195 000000F0 A2[9303]            <1> 	mov [gdt4 + 4],al
   196 000000F3 A2[9B03]            <1> 	mov [gdt5 + 4],al
   197 000000F6 A2[A303]            <1> 	mov [gdtv8086 + 4],al
   198 000000F9 A2[AB03]            <1> 	mov [gdtv80862 + 4],al
   199 000000FC 8826[9603]          <1> 	mov [gdt4 + 7],ah
   200 00000100 8826[9E03]          <1> 	mov [gdt5 + 7],ah
   201 00000104 8826[A603]          <1> 	mov [gdtv8086 + 7],ah
   202 00000108 8826[AE03]          <1> 	mov [gdtv80862 + 7],ah
   203                              <1> 	
   204 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   205 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   206 00000117 A3[B103]            <1> 	mov [gdtdos + 2],ax
   207 0000011A A3[B903]            <1> 	mov [gdtdos2 + 2],ax
   208 0000011D 66C1E810            <1> 	shr eax,16
   209 00000121 A2[B303]            <1> 	mov [gdtdos + 4],al
   210 00000124 A2[BB03]            <1> 	mov [gdtdos2 + 4],al
   211 00000127 8826[B603]          <1> 	mov [gdtdos + 7],ah
   212 0000012B 8826[BE03]          <1> 	mov [gdtdos2 + 7],ah
   213                              <1> 	
   214                              <1> ; fix up gdt and idt
   215 0000012F 67668D83[67030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   216 00000137 66A3[5D03]          <1> 	mov [gdtr + 2],eax
   217 0000013B 67668D83[BF030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   218 00000143 66A3[6303]          <1> 	mov [idtr + 2],eax
   219 00000147 FA                  <1> 	cli
   220 00000148 0F0116[5B03]        <1> 	lgdt [gdtr]
   221 0000014D 0F011E[6103]        <1> 	lidt [idtr]
   222 00000152 6631DB              <1> 	xor ebx, ebx
   223 00000155 8CDB                <1> 	mov bx, ds
   224 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   225 0000015C 0F20C0              <1> 	mov eax,cr0
   226 0000015F 0C01                <1> 	or al,1
   227 00000161 0F22C0              <1> 	mov cr0,eax
   228 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   229                              <1> [BITS 32]
   230                              <1> do_pm:
   231 00000169 31C0                <1> 	xor eax, eax
   232 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   233 0000016F 8ED8                <1> 	mov ds, ax
   234 00000171 8EC0                <1> 	mov es, ax
   235 00000173 8EE0                <1> 	mov fs, ax
   236 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   237 00000179 8EE8                <1> 	mov gs, ax
   238                              <1> 	
   239                              <1> copykernel:
   240 0000017B 648B06              <1> 	mov eax, [fs:esi]
   241 0000017E 658906              <1> 	mov [gs:esi], eax
   242 00000181 81C604000000        <1> 	add esi, 4
   243 00000187 81FE[E6970000]      <1> 	cmp esi, bsscopy
   244 0000018D 72EC                <1> 	jb copykernel
   245 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   246                              <1> 	
   247                              <1> done_copy:
   248 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   249 0000019A 8ED8                <1> 	mov ds, ax
   250 0000019C 8EC0                <1> 	mov es, ax
   251 0000019E 8EE0                <1> 	mov fs, ax
   252                              <1> 	;mov ax, STACK_SEL
   253 000001A0 8ED0                <1> 	mov ss, ax
   254 000001A2 BC[86A70000]        <1> 	mov esp, stackend
   255 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   256 000001AB 8EE8                <1> 	mov gs, ax
   257                              <1> 	
   258 000001AD E8A7580000          <1> 	call initialize	;initialize drivers
   259                              <1> 	
   260 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   261 000001B7 C1E804              <1> 	shr eax, 4
   262 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   263                              <1> 	
   264 000001BF BE[E8E21100]        <1> 	mov esi, bssend
   265 000001C4 31C0                <1> 	xor eax, eax
   266                              <1> clearkernelbuffers:
   267 000001C6 8906                <1> 	mov [esi], eax
   268 000001C8 81EE04000000        <1> 	sub esi, 4
   269 000001CE 81FE[E6970000]      <1> 	cmp esi, bsscopy
   270 000001D4 77F0                <1> 	ja clearkernelbuffers
   271 000001D6 FB                  <1> 	sti
   272                              <1> 
   273                              <1> getmemoryspace:
   274 000001D7 BE[A6950000]        <1> 	mov esi, memlistbuf
   275 000001DC 31FF                <1> 	xor edi, edi
   276 000001DE 668B3D[E6970000]    <1> 	mov di, [memlistend]
   277 000001E5 01F7                <1> 	add edi, esi
   278 000001E7 31C0                <1> 	xor eax, eax
   279                              <1> memoryspaceaddition:
   280 000001E9 39FE                <1> 	cmp esi, edi
   281 000001EB 7322                <1> 	jae finishedmemspacecalc
   282 000001ED 81C608000000        <1> 	add esi, 8
   283 000001F3 8B0E                <1> 	mov ecx, [esi]
   284 000001F5 81C608000000        <1> 	add esi, 8
   285 000001FB 8B1E                <1> 	mov ebx, [esi]
   286 000001FD 81C608000000        <1> 	add esi, 8
   287 00000203 81FB01000000        <1> 	cmp ebx, 1
   288 00000209 75DE                <1> 	jne memoryspaceaddition
   289 0000020B 01C8                <1> 	add eax, ecx
   290 0000020D EBDA                <1> 	jmp memoryspaceaddition
   291                              <1> finishedmemspacecalc:
   292 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   293                              <1> %ifdef gui.included
   294 00000214 803D[A0950000]00    <1> 	cmp byte [guion], 0
   295 0000021B 741C                <1> 	je normalstartup
   296 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   297 00000223 C1E304              <1> 	shl ebx, 4
   298 00000226 8B3D[84520000]      <1> 	mov edi, [physbaseptr]
   299 0000022C 29DF                <1> 	sub edi, ebx
   300 0000022E 893D[84520000]      <1> 	mov [physbaseptr], edi
   301 00000234 E9835D0000          <1> 	jmp guiboot
   302                              <1> %endif
   303                              <1> normalstartup:
   304 00000239 E983250000          <1> 	jmp os
   305                              <1> 	
   306 0000023E 00000000            <1> basecache dd 0
   307 00000242 00001000            <1> newcodecache dd 0x100000
   308                              <1> 
   309 00000246 00                  <1> testingcpuspeed db 0
   310 00000247 00000000            <1> cpuspeedperint dd 0
   311 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   312 00000253 00000000            <1> memoryspace dd 0
   313 00000257 7D0A                <1> pitdiv dw 2685
   314 00000259 2E562200            <1> timeinterval dd 2250286
   315 0000025D 00000000            <1> timeseconds dd 0
   316 00000261 00000000            <1> timenanoseconds dd 0
   317 00000265 00                  <1> soundon db 0
   318 00000266 0000                <1> soundrepititions dw 0
   319 00000268 00000000            <1> soundpos dd 0
   320 0000026C 00000000            <1> soundendpos dd 0
   321                              <1> 
   322                              <1> cpuspeedend:
   323 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   324 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   325 0000027C B8[8E490000]        <1> 	mov eax, cpuspeedloopend
   326 00000281 890424              <1> 	mov [esp], eax
   327 00000284 E9C2000000          <1> 	jmp handled
   328                              <1> 
   329                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   330                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   331                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   332                              <1> 
   333                              <1> pitinterrupt: ;this controls threading
   334 00000289 FA                  <1> 	cli
   335 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   336 00000291 74DD                <1> 	je cpuspeedend
   337                              <1> 		
   338 00000293 E88C000000          <1> 	call timekeeper ;this updates the internal time
   339                              <1> 	
   340 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   341 0000029F 0F84C0530000        <1> 	je near PCSpeakerRAW
   342                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   343                              <1> %ifdef threads.included
   344 000002A5 803D[B75F0000]01    <1> 	cmp byte [threadson], 1
   345 000002AC 0F84A55C0000        <1> 	je near threadswitch
   346                              <1> %endif
   347                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   348 000002B2 803D[B75F0000]00    <1> 	cmp byte [threadson], 0
   349 000002B9 0F848C000000        <1> 	je near handled
   350                              <1> %ifdef io.serial
   351                              <1> 	jmp handled
   352                              <1> %else
   353 000002BF 60                  <1> 	pusha
   354 000002C0 E464                <1> 	in al, 64h
   355 000002C2 A820                <1> 	test al, 20h
   356 000002C4 0F857F000000        <1> 	jnz near handled2
   357 000002CA E460                <1> 	in al, 60h
   358 000002CC 3C01                <1> 	cmp al, 1		;escape
   359 000002CE 7405                <1> 	je userint
   360 000002D0 E974000000          <1> 	jmp handled2
   361                              <1> userint:
   362                              <1> 	;UNMASK ALL INTS
   363 000002D5 30C0                <1> 	xor al, al
   364 000002D7 E621                <1> 	out 0x21, al
   365 000002D9 30C0                <1> 	xor al, al
   366 000002DB E6A1                <1> 	out 0xA1, al
   367 000002DD B020                <1> 	mov al, 0x20
   368 000002DF E6A0                <1> 	out 0xA0, al
   369 000002E1 E620                <1> 	out 0x20, al
   370                              <1> 	;RESET PIT DIVISOR
   371 000002E3 66A1[57020000]      <1> 	mov ax, [pitdiv]
   372 000002E9 E640                <1> 	out 0x40, al
   373 000002EB 66C1C008            <1> 	rol ax, 8
   374 000002EF E640                <1> 	out 0x40, al
   375                              <1> 	;RESET PIC
   376 000002F1 B020                <1> 	mov al, 0x20
   377 000002F3 E620                <1> 	out 0x20, al
   378 000002F5 61                  <1> 	popa
   379 000002F6 FB                  <1> 	sti
   380 000002F7 BC[86A70000]        <1> 	mov esp, stackend ;reset stack
   381 000002FC E91B260000          <1> 	jmp returnfromexp
   382                              <1> %endif
   383 00000301 0A                  <1> rtcrate db 10
   384                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   385                              <1> %ifdef io.serial
   386                              <1> %else
   387                              <1> %ifdef terminal.vsync
   388                              <1> 	cli
   389                              <1> 	cmp byte [termcopyneeded], 0
   390                              <1> 	je .nocopy
   391                              <1> 	call newtermcopy
   392                              <1> .nocopy
   393                              <1> 	push eax
   394                              <1> 	mov al, 0xC
   395                              <1> 	out 0x70, al
   396                              <1> 	in al, 0x71
   397                              <1> 	pop eax
   398                              <1> 	sti
   399                              <1> %endif
   400                              <1> %endif
   401 00000302 E94B000000          <1> 	jmp handled4
   402                              <1> %ifdef rtl8139.included
   403                              <1> rtl8139.irq:
   404 00000307 FA                  <1> 	cli
   405 00000308 52                  <1> 	push edx
   406 00000309 50                  <1> 	push eax
   407 0000030A 8B15[7C7B0000]      <1> 	mov edx, [rtl8139.basenicaddr]
   408 00000310 81C23E000000        <1> 	add edx, rtl8139.ISR
   409 00000316 31C0                <1> 	xor eax, eax
   410 00000318 66ED                <1> 	in ax, dx
   411 0000031A 66EF                <1> 	out dx, ax
   412 0000031C 58                  <1> 	pop eax
   413 0000031D 5A                  <1> 	pop edx
   414 0000031E FB                  <1> 	sti
   415 0000031F E92E000000          <1> 	jmp handled4
   416                              <1> %endif
   417                              <1> %ifdef sound.included
   418                              <1> sblaster.irq:
   419                              <1> 	cli
   420                              <1> 	pusha
   421                              <1> 	cmp byte [SoundBlaster], 1
   422                              <1> 	je near sblaster.cont
   423                              <1> 	jmp handled2
   424                              <1> %endif
   425                              <1> 	
   426                              <1> timekeeper:
   427 00000324 50                  <1> 	push eax
   428 00000325 A1[61020000]        <1> 	mov eax, [timenanoseconds]
   429 0000032A 0305[59020000]      <1> 	add eax, [timeinterval]
   430 00000330 3D00CA9A3B          <1> 	cmp eax, 1000000000
   431 00000335 720B                <1> 	jb nonanosecondrollover
   432 00000337 FF05[5D020000]      <1> 	inc dword [timeseconds]
   433 0000033D 2D00CA9A3B          <1> 	sub eax, 1000000000
   434                              <1> nonanosecondrollover:
   435 00000342 A3[61020000]        <1> 	mov [timenanoseconds], eax
   436 00000347 58                  <1> 	pop eax
   437 00000348 C3                  <1> 	ret
   438                              <1> 	
   439                              <1> handled2:
   440 00000349 61                  <1> 	popa
   441                              <1> handled3:
   442 0000034A FB                  <1> 	sti
   443                              <1> handled:
   444 0000034B 50                  <1> 	push eax
   445 0000034C B020                <1> 	mov al, 0x20
   446 0000034E E620                <1> 	out 0x20, al
   447 00000350 58                  <1> 	pop eax
   448 00000351 CF                  <1> 	iret
   449                              <1> handled4:
   450 00000352 50                  <1> 	push eax
   451 00000353 B020                <1> 	mov al, 0x20
   452 00000355 E6A0                <1> 	out 0xA0, al
   453 00000357 E620                <1> 	out 0x20, al
   454 00000359 58                  <1> 	pop eax
   455 0000035A CF                  <1> 	iret
   456                              <1> [BITS 16]
   457                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   458                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   459                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   460 0000035B 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   461 0000035D 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   462                              <1> 
   463 00000361 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   464 00000363 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   465                              <1> 
   466                              <1> 
   467 00000367 0000                <1> gdt:	dw 0			; limit 15:0
   468 00000369 0000                <1> 	dw 0			; base 15:0
   469 0000036B 00                  <1> 	db 0			; base 23:16
   470 0000036C 00                  <1> 	db 0			; type
   471 0000036D 00                  <1> 	db 0			; limit 19:16, flags
   472 0000036E 00                  <1> 	db 0			; base 31:24
   473                              <1> ; linear data segment descriptor
   474                              <1> LINEAR_SEL	equ	$-gdt
   475 0000036F FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   476 00000371 0000                <1> 	dw 0			; base for this one is always 0
   477 00000373 00                  <1> 	db 0
   478 00000374 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   479 00000375 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   480 00000376 00                  <1> 	db 0
   481                              <1> STACK_SEL	equ $-gdt
   482 00000377 0200                <1> gdts:	dw 2;(stackend)/4096
   483 00000379 0000                <1> 	dw 0
   484 0000037B 00                  <1> 	db 0
   485 0000037C 92                  <1> 	db 0x92
   486 0000037D CF                  <1> 	db 0xCF
   487 0000037E 00                  <1> 	db 0
   488                              <1> ; code segment descriptor
   489                              <1> SYS_CODE_SEL	equ	$-gdt
   490 0000037F FFFF                <1> gdt2:	dw 0xFFFF
   491 00000381 0000                <1> 	dw 0			; (base gets set above)
   492 00000383 00                  <1> 	db 0
   493 00000384 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   494 00000385 CF                  <1> 	db 0xCF
   495 00000386 00                  <1> 	db 0
   496                              <1> ; data segment descriptor
   497                              <1> SYS_DATA_SEL	equ	$-gdt
   498 00000387 FFFF                <1> gdt3:	dw 0xFFFF
   499 00000389 0000                <1> 	dw 0			; (base gets set above)
   500 0000038B 00                  <1> 	db 0
   501 0000038C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   502 0000038D CF                  <1> 	db 0xCF
   503 0000038E 00                  <1> 	db 0
   504                              <1> NEW_CODE_SEL	equ	$-gdt
   505 0000038F FFFF                <1> gdt4:	dw 0xFFFF
   506 00000391 0000                <1> 	dw 0			; (base gets set above)
   507 00000393 00                  <1> 	db 0
   508 00000394 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   509 00000395 CF                  <1> 	db 0xCF
   510 00000396 00                  <1> 	db 0
   511                              <1> ; data segment descriptor
   512                              <1> NEW_DATA_SEL	equ	$-gdt
   513 00000397 FFFF                <1> gdt5:	dw 0xFFFF
   514 00000399 0000                <1> 	dw 0			; (base gets set above)
   515 0000039B 00                  <1> 	db 0
   516 0000039C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   517 0000039D CF                  <1> 	db 0xCF
   518 0000039E 00                  <1> 	db 0
   519                              <1> V8086_CODE_SEL	equ $-gdt
   520 0000039F FFFF                <1> gdtv8086: dw 0xFFFF
   521 000003A1 0000                <1> 	dw 0
   522 000003A3 00                  <1> 	db 0
   523 000003A4 9A                  <1> 	db 0x9A
   524 000003A5 8F                  <1> 	db 0x8F
   525 000003A6 00                  <1> 	db 0
   526                              <1> V8086_DATA_SEL	equ $-gdt
   527 000003A7 FFFF                <1> gdtv80862: dw 0xFFFF
   528 000003A9 0000                <1> 	dw 0
   529 000003AB 00                  <1> 	db 0
   530 000003AC 92                  <1> 	db 0x92
   531 000003AD 8F                  <1> 	db 0x8F
   532 000003AE 00                  <1> 	db 0
   533                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   534 000003AF 0001                <1> gdtdos:	dw 256	;give it 1 MB
   535 000003B1 0000                <1> 	dw 0
   536 000003B3 00                  <1> 	db 0
   537 000003B4 9A                  <1> 	db 0x9A
   538 000003B5 8F                  <1> 	db 0x8F ;16 bit
   539 000003B6 00                  <1> 	db 0
   540                              <1> DOS_DATA_SEL 	equ $-gdt
   541 000003B7 0001                <1> gdtdos2:	dw 256
   542 000003B9 0000                <1> 	dw 0
   543 000003BB 00                  <1> 	db 0
   544 000003BC 92                  <1> 	db 0x92
   545 000003BD 8F                  <1> 	db 0x8F ;16 bit
   546 000003BE 00                  <1> 	db 0
   547                              <1> gdt_end:
   548                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   549                              <1> ;	interrupt descriptor table (IDT)
   550                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   551                              <1> ; 32 reserved interrupts:
   552                              <1> idt:	
   553                              <1> %assign i 0
   554                              <1> %rep    8
   555                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   556                              <1> %assign i i+1
   557                              <1> %endrep
   558 000003BF [E00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i i+1
   560 000003C7 [EC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i i+1
   562 000003CF [F80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i i+1
   564 000003D7 [040D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i i+1
   566 000003DF [100D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i i+1
   568 000003E7 [1C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i i+1
   570 000003EF [280D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i i+1
   572 000003F7 [340D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i i+1
   574 000003FF [400D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   575                              <1> %assign i 9
   576                              <1> %rep    23
   577                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   578                              <1> %assign i i+1
   579                              <1> %endrep
   580 00000407 [4C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 0000040F [580D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 00000417 [640D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 0000041F [700D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 00000427 [7C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 0000042F [880D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000437 [940D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 0000043F [A00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 00000447 [AC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i i+1
   598 0000044F [B80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i i+1
   600 00000457 [C40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i i+1
   602 0000045F [D00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 00000467 [DC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 0000046F [E80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 00000477 [F40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 0000047F [000E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 00000487 [0C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 0000048F [180E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 00000497 [240E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 0000049F [300E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i i+1
   620 000004A7 [3C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i i+1
   622 000004AF [480E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i i+1
   624 000004B7 [540E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i i+1
   626 000004BF [9226]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   627 000004C7 [9626]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   628                              <1> %assign i 0x22
   629                              <1> %rep 14
   630                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   631                              <1> %assign i +1
   632                              <1> %endrep
   633 000004CF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   634                              <2> %assign i +1
   635 000004D7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i +1
   637 000004DF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i +1
   639 000004E7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i +1
   641 000004EF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i +1
   643 000004F7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i +1
   645 000004FF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i +1
   647 00000507 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i +1
   649 0000050F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i +1
   651 00000517 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i +1
   653 0000051F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i +1
   655 00000527 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 0000052F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 00000537 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661                              <1> ;INT 30h for os use and 3rd party use:
   662 0000053F [D31B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   663                              <1> %assign i 0x31
   664                              <1> %rep 15
   665                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   666                              <1> %assign i +1
   667                              <1> %endrep
   668 00000547 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i +1
   670 0000054F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i +1
   672 00000557 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i +1
   674 0000055F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i +1
   676 00000567 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i +1
   678 0000056F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i +1
   680 00000577 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i +1
   682 0000057F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i +1
   684 00000587 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i +1
   686 0000058F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i +1
   688 00000597 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690 0000059F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 000005A7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 000005AF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 000005B7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698                              <1> ;and here we are at 0x40
   699                              <1> ;here are all the irq's
   700 000005BF [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   701 000005C7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   702 000005CF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   703 000005D7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   704 000005DF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   705                              <1> 	%ifdef sound.included
   706                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   707                              <1> 	%else
   708 000005E7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   709                              <1> 	%endif
   710 000005EF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   711 000005F7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   712 000005FF [0203]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   713 00000607 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   714 0000060F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   715                              <1> 	%ifdef rtl8139.included
   716 00000617 [0703]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   717                              <1> 	%else
   718                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   719                              <1> 	%endif
   720 0000061F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   721 00000627 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   722 0000062F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   723 00000637 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   724                              <1> ;This brings me up to 0x50
   725                              <1> %assign i 0x50
   726                              <1> %rep 176
   727                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   728                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   729                              <1> %assign i +1
   730                              <1> %endrep
   731 0000063F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   732                              <2> 
   733                              <2> %assign i +1
   734 00000647 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   735                              <2> 
   736                              <2> %assign i +1
   737 0000064F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   738                              <2> 
   739                              <2> %assign i +1
   740 00000657 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   741                              <2> 
   742                              <2> %assign i +1
   743 0000065F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   744                              <2> 
   745                              <2> %assign i +1
   746 00000667 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   747                              <2> 
   748                              <2> %assign i +1
   749 0000066F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   750                              <2> 
   751                              <2> %assign i +1
   752 00000677 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   753                              <2> 
   754                              <2> %assign i +1
   755 0000067F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   756                              <2> 
   757                              <2> %assign i +1
   758 00000687 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   759                              <2> 
   760                              <2> %assign i +1
   761 0000068F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   762                              <2> 
   763                              <2> %assign i +1
   764 00000697 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   765                              <2> 
   766                              <2> %assign i +1
   767 0000069F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   768                              <2> 
   769                              <2> %assign i +1
   770 000006A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   771                              <2> 
   772                              <2> %assign i +1
   773 000006AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   774                              <2> 
   775                              <2> %assign i +1
   776 000006B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   777                              <2> 
   778                              <2> %assign i +1
   779 000006BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   780                              <2> 
   781                              <2> %assign i +1
   782 000006C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   783                              <2> 
   784                              <2> %assign i +1
   785 000006CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   786                              <2> 
   787                              <2> %assign i +1
   788 000006D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   789                              <2> 
   790                              <2> %assign i +1
   791 000006DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   792                              <2> 
   793                              <2> %assign i +1
   794 000006E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   795                              <2> 
   796                              <2> %assign i +1
   797 000006EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   798                              <2> 
   799                              <2> %assign i +1
   800 000006F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   801                              <2> 
   802                              <2> %assign i +1
   803 000006FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   804                              <2> 
   805                              <2> %assign i +1
   806 00000707 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   807                              <2> 
   808                              <2> %assign i +1
   809 0000070F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000717 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000071F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000727 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000072F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000737 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000073F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000747 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000074F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000757 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000075F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000767 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000076F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000777 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000077F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000787 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 0000078F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 00000797 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 0000079F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000007A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000007AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000007B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000007BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000007C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000007CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000007D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000007DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000007E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000007EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000007F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000007FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000807 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000080F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000817 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000081F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000827 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000082F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000837 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000083F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000847 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000084F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000857 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000085F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000867 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000086F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000877 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000087F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000887 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000088F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000897 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000089F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000008A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000008AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000008B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000008BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000008C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000008CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000008D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000008DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000008E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000008EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000008F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000008FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000907 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000090F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000917 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000091F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000927 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000092F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000937 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000093F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000947 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000094F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000957 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000095F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000967 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000096F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000977 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000097F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000987 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000098F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000997 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 0000099F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000009A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000009AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000009B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000009BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000009C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000009CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000009D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000009DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000009E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000009EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 000009F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 000009FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000A07 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000A0F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000A17 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000A1F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000A27 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000A2F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000A37 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000A3F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000A47 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000A4F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000A57 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000A5F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000A67 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000A6F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000A77 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 00000A7F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000A87 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 00000A8F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000A97 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 00000A9F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000AA7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000AAF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000AB7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000ABF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000AC7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000ACF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000AD7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000ADF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000AE7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000AEF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000AF7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000AFF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000B07 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000B0F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000B17 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000B1F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000B27 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000B2F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000B37 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000B3F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000B47 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000B4F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000B57 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000B5F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000B67 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000B6F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000B77 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000B7F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000B87 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000B8F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000B97 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000B9F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000BA7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000BAF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000BB7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259                              <1> idt_end:
  1260                              <1> [BITS 32]
  1261                                  	%include "source/realmode.asm"
  1262                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1263                              <1> 			;and the return address is in realmodereturn
  1264 00000BBF FA                  <1> 	cli
  1265 00000BC0 A3[D20C0000]        <1> 	mov [realmodeeax], eax
  1266 00000BC5 891D[CE0C0000]      <1> 	mov [realmodeebx], ebx
  1267 00000BCB 8925[C00C0000]      <1> 	mov [pmodeesp], esp
  1268                              <1> 
  1269 00000BD1 BB[CA0C0000]        <1> 	mov ebx, cr0old
  1270                              <1> rmcopytofirstmbyte:
  1271 00000BD6 8B03                <1> 	mov eax, [ebx]
  1272 00000BD8 658903              <1> 	mov [gs:ebx], eax
  1273 00000BDB 81C304000000        <1> 	add ebx, 4
  1274 00000BE1 81FB[DA0C0000]      <1> 	cmp ebx, realmodeptr
  1275 00000BE7 76ED                <1> 	jbe rmcopytofirstmbyte
  1276                              <1> 
  1277 00000BE9 EA[F00B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1278                              <1> 
  1279                              <1> [BITS 16]
  1280                              <1> protected16bit:
  1281 00000BF0 B84000              <1> 	mov ax, V8086_DATA_SEL
  1282 00000BF3 8ED8                <1> 	mov ds, ax
  1283 00000BF5 8EC0                <1> 	mov es, ax
  1284 00000BF7 8EE0                <1> 	mov fs, ax
  1285 00000BF9 8EE8                <1> 	mov gs, ax
  1286 00000BFB 8ED0                <1> 	mov ss, ax
  1287 00000BFD 66BC[86A70000]      <1> 	mov esp, stackend
  1288 00000C03 0F20C0              <1> 	mov eax, cr0
  1289 00000C06 66A3[CA0C]          <1> 	mov [cr0old], eax
  1290 00000C0A 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1291 00000C10 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1292 00000C13 EA[180C]0010        <1> 	jmp 0x1000:inrealmode
  1293                              <1> 
  1294                              <1> inrealmode:
  1295 00000C18 8CC8                <1> 	mov ax, cs
  1296 00000C1A 8ED8                <1> 	mov ds, ax
  1297 00000C1C 8EC0                <1> 	mov es, ax
  1298 00000C1E 8EE0                <1> 	mov fs, ax
  1299 00000C20 8EE8                <1> 	mov gs, ax
  1300 00000C22 8ED0                <1> 	mov ss, ax
  1301 00000C24 BC[86A7]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1302                              <1> 	
  1303 00000C27 B011                <1> 	mov al, 0x11
  1304 00000C29 E620                <1> 	out 0x20, al
  1305 00000C2B E6A0                <1> 	out 0xA0, al
  1306 00000C2D B008                <1> 	mov al, 0x8		;interrupt for master
  1307 00000C2F E621                <1> 	out 0x21, al
  1308 00000C31 B070                <1> 	mov al, 0x70	;interrupt for slave
  1309 00000C33 E6A1                <1> 	out 0xA1, al
  1310 00000C35 B004                <1> 	mov al, 4
  1311 00000C37 E621                <1> 	out 0x21, al
  1312 00000C39 B002                <1> 	mov al, 2
  1313 00000C3B E6A1                <1> 	out 0xA1, al
  1314 00000C3D B001                <1> 	mov al, 0x1
  1315 00000C3F E621                <1> 	out 0x21, al
  1316 00000C41 B001                <1> 	mov al, 0x1
  1317 00000C43 E6A1                <1> 	out 0xA1, al
  1318                              <1> 	
  1319 00000C45 0F011E[C40C]        <1> 	lidt [idt_real]
  1320 00000C4A FB                  <1> 	sti
  1321                              <1> 
  1322 00000C4B 66A1[D20C]          <1> 	mov eax, [realmodeeax]
  1323 00000C4F 668B1E[CE0C]        <1> 	mov ebx, [realmodeebx]
  1324                              <1> 
  1325 00000C54 FF16[DA0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1326                              <1> 
  1327 00000C58 66A3[D20C]          <1> 	mov [realmodeeax], eax
  1328 00000C5C 66891E[CE0C]        <1> 	mov [realmodeebx], ebx
  1329                              <1> 
  1330 00000C61 FA                  <1> 	cli
  1331 00000C62 0F0116[5B03]        <1> 	lgdt [gdtr]
  1332 00000C67 0F011E[6103]        <1> 	lidt [idtr]
  1333 00000C6C 0F20C0              <1> 	mov eax, cr0
  1334 00000C6F 0C01                <1> 	or al, 1
  1335 00000C71 0F22C0              <1> 	mov cr0,eax
  1336 00000C74 EA[790C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1337                              <1> 
  1338                              <1> [BITS 32]
  1339                              <1> returntopmode:
  1340 00000C79 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1341 00000C7D 8ED8                <1> 	mov ds, ax
  1342 00000C7F 8EC0                <1> 	mov es, ax
  1343 00000C81 8EE0                <1> 	mov fs, ax
  1344 00000C83 8ED0                <1> 	mov ss, ax
  1345 00000C85 8B25[C00C0000]      <1> 	mov esp, [pmodeesp]
  1346 00000C8B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1347 00000C8F 8EE8                <1> 	mov gs, ax
  1348                              <1> 
  1349 00000C91 BB[CA0C0000]        <1> 	mov ebx, cr0old
  1350                              <1> rmcopyfromfirstmbyte:
  1351 00000C96 658B03              <1> 	mov eax, [gs:ebx]
  1352 00000C99 8903                <1> 	mov [ebx], eax
  1353 00000C9B 81C304000000        <1> 	add ebx, 4
  1354 00000CA1 81FB[DA0C0000]      <1> 	cmp ebx, realmodeptr
  1355 00000CA7 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1356                              <1> 
  1357 00000CA9 E8C44D0000          <1> 	call initialize.pic ;reset irq's and masks
  1358 00000CAE FB                  <1> 	sti
  1359 00000CAF A1[D20C0000]        <1> 	mov eax, [realmodeeax]
  1360 00000CB4 8B1D[CE0C0000]      <1> 	mov ebx, [realmodeebx]
  1361 00000CBA FF25[D60C0000]      <1> 	jmp dword [realmodereturn]
  1362                              <1> 	
  1363 00000CC0 00000000            <1> pmodeesp dd 0
  1364                              <1> idt_real:
  1365 00000CC4 FF03                <1> 	dw 0x3FF
  1366 00000CC6 00000000            <1> 	dd 0
  1367 00000CCA 00000000            <1> cr0old dd 0
  1368 00000CCE 00000000            <1> realmodeebx dd 0
  1369 00000CD2 00000000            <1> realmodeeax dd 0
  1370 00000CD6 00000000            <1> realmodereturn dd 0
  1371 00000CDA 0000                <1> realmodeptr dw 0
  1372 00000CDC 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1373                                  [BITS 32]
  1374                                      %include "source/exception.asm"
  1375                              <1> %ifdef exceptions.included
  1376                              <1> unhand:	
  1377                              <1> 	%assign i 0
  1378                              <1> 	%rep 32
  1379                              <1> 	mov byte [intprob], i
  1380                              <1> 	jmp unhand2
  1381                              <1> 	%assign i i+1
  1382                              <1> 	%endrep
  1383 00000CE0 C605[92110000]00    <2>  mov byte [intprob], i
  1384 00000CE7 E974010000          <2>  jmp unhand2
  1385                              <2>  %assign i i+1
  1386 00000CEC C605[92110000]01    <2>  mov byte [intprob], i
  1387 00000CF3 E968010000          <2>  jmp unhand2
  1388                              <2>  %assign i i+1
  1389 00000CF8 C605[92110000]02    <2>  mov byte [intprob], i
  1390 00000CFF E95C010000          <2>  jmp unhand2
  1391                              <2>  %assign i i+1
  1392 00000D04 C605[92110000]03    <2>  mov byte [intprob], i
  1393 00000D0B E950010000          <2>  jmp unhand2
  1394                              <2>  %assign i i+1
  1395 00000D10 C605[92110000]04    <2>  mov byte [intprob], i
  1396 00000D17 E944010000          <2>  jmp unhand2
  1397                              <2>  %assign i i+1
  1398 00000D1C C605[92110000]05    <2>  mov byte [intprob], i
  1399 00000D23 E938010000          <2>  jmp unhand2
  1400                              <2>  %assign i i+1
  1401 00000D28 C605[92110000]06    <2>  mov byte [intprob], i
  1402 00000D2F E92C010000          <2>  jmp unhand2
  1403                              <2>  %assign i i+1
  1404 00000D34 C605[92110000]07    <2>  mov byte [intprob], i
  1405 00000D3B E920010000          <2>  jmp unhand2
  1406                              <2>  %assign i i+1
  1407 00000D40 C605[92110000]08    <2>  mov byte [intprob], i
  1408 00000D47 E914010000          <2>  jmp unhand2
  1409                              <2>  %assign i i+1
  1410 00000D4C C605[92110000]09    <2>  mov byte [intprob], i
  1411 00000D53 E908010000          <2>  jmp unhand2
  1412                              <2>  %assign i i+1
  1413 00000D58 C605[92110000]0A    <2>  mov byte [intprob], i
  1414 00000D5F E9FC000000          <2>  jmp unhand2
  1415                              <2>  %assign i i+1
  1416 00000D64 C605[92110000]0B    <2>  mov byte [intprob], i
  1417 00000D6B E9F0000000          <2>  jmp unhand2
  1418                              <2>  %assign i i+1
  1419 00000D70 C605[92110000]0C    <2>  mov byte [intprob], i
  1420 00000D77 E9E4000000          <2>  jmp unhand2
  1421                              <2>  %assign i i+1
  1422 00000D7C C605[92110000]0D    <2>  mov byte [intprob], i
  1423 00000D83 E9D8000000          <2>  jmp unhand2
  1424                              <2>  %assign i i+1
  1425 00000D88 C605[92110000]0E    <2>  mov byte [intprob], i
  1426 00000D8F E9CC000000          <2>  jmp unhand2
  1427                              <2>  %assign i i+1
  1428 00000D94 C605[92110000]0F    <2>  mov byte [intprob], i
  1429 00000D9B E9C0000000          <2>  jmp unhand2
  1430                              <2>  %assign i i+1
  1431 00000DA0 C605[92110000]10    <2>  mov byte [intprob], i
  1432 00000DA7 E9B4000000          <2>  jmp unhand2
  1433                              <2>  %assign i i+1
  1434 00000DAC C605[92110000]11    <2>  mov byte [intprob], i
  1435 00000DB3 E9A8000000          <2>  jmp unhand2
  1436                              <2>  %assign i i+1
  1437 00000DB8 C605[92110000]12    <2>  mov byte [intprob], i
  1438 00000DBF E99C000000          <2>  jmp unhand2
  1439                              <2>  %assign i i+1
  1440 00000DC4 C605[92110000]13    <2>  mov byte [intprob], i
  1441 00000DCB E990000000          <2>  jmp unhand2
  1442                              <2>  %assign i i+1
  1443 00000DD0 C605[92110000]14    <2>  mov byte [intprob], i
  1444 00000DD7 E984000000          <2>  jmp unhand2
  1445                              <2>  %assign i i+1
  1446 00000DDC C605[92110000]15    <2>  mov byte [intprob], i
  1447 00000DE3 E978000000          <2>  jmp unhand2
  1448                              <2>  %assign i i+1
  1449 00000DE8 C605[92110000]16    <2>  mov byte [intprob], i
  1450 00000DEF E96C000000          <2>  jmp unhand2
  1451                              <2>  %assign i i+1
  1452 00000DF4 C605[92110000]17    <2>  mov byte [intprob], i
  1453 00000DFB E960000000          <2>  jmp unhand2
  1454                              <2>  %assign i i+1
  1455 00000E00 C605[92110000]18    <2>  mov byte [intprob], i
  1456 00000E07 E954000000          <2>  jmp unhand2
  1457                              <2>  %assign i i+1
  1458 00000E0C C605[92110000]19    <2>  mov byte [intprob], i
  1459 00000E13 E948000000          <2>  jmp unhand2
  1460                              <2>  %assign i i+1
  1461 00000E18 C605[92110000]1A    <2>  mov byte [intprob], i
  1462 00000E1F E93C000000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000E24 C605[92110000]1B    <2>  mov byte [intprob], i
  1465 00000E2B E930000000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000E30 C605[92110000]1C    <2>  mov byte [intprob], i
  1468 00000E37 E924000000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000E3C C605[92110000]1D    <2>  mov byte [intprob], i
  1471 00000E43 E918000000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000E48 C605[92110000]1E    <2>  mov byte [intprob], i
  1474 00000E4F E90C000000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000E54 C605[92110000]1F    <2>  mov byte [intprob], i
  1477 00000E5B E900000000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479                              <1> unhand2:
  1480 00000E60 FA                  <1> 	cli
  1481 00000E61 1E                  <1> 	push ds
  1482 00000E62 06                  <1> 	push es
  1483 00000E63 0FA0                <1> 	push fs
  1484 00000E65 0FA8                <1> 	push gs
  1485 00000E67 16                  <1> 	push ss
  1486 00000E68 60                  <1> 	pushad
  1487                              <1> %ifdef gui.included
  1488 00000E69 803D[A0950000]00    <1> 	cmp byte [guion], 0
  1489 00000E70 0F8432000000        <1> 	je near noguiunhandstuff
  1490 00000E76 66C705[8C110000]08- <1> 	mov word [locunhandy], 8
  1491 00000E7E 00                  <1>
  1492 00000E7F 66C705[8E110000]08- <1> 	mov word [locunhandx], 8
  1493 00000E87 00                  <1>
  1494 00000E88 668B1D[15650000]    <1> 	mov bx, [background]
  1495 00000E8F 66891D[90110000]    <1> 	mov [backgroundcache], bx
  1496 00000E96 C605[60530000]01    <1> 	mov byte [mousedisabled],1
  1497 00000E9D 66BB00F8            <1> 	mov bx, 1111100000000000b
  1498 00000EA1 66891D[15650000]    <1> 	mov [background], bx
  1499                              <1> noguiunhandstuff:
  1500                              <1> %endif
  1501 00000EA8 89E6                <1> 	mov esi, esp
  1502 00000EAA 8935[80110000]      <1> 	mov [espfirst], esi
  1503 00000EB0 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1504 00000EB6 8935[7C110000]      <1> 	mov [esploc], esi
  1505 00000EBC BE[A1110000]        <1> 	mov esi, unhandmsg
  1506 00000EC1 8935[84110000]      <1> 	mov [esiloc], esi
  1507 00000EC7 31C9                <1> 	xor ecx, ecx
  1508 00000EC9 8A0D[92110000]      <1> 	mov cl, [intprob]
  1509 00000ECF BB[70150000]        <1> 	mov ebx, errortypes
  1510 00000ED4 C1E102              <1> 	shl ecx, 2
  1511 00000ED7 01CB                <1> 	add ebx, ecx
  1512 00000ED9 81FB[B0150000]      <1> 	cmp ebx, errortypesend
  1513 00000EDF 7205                <1> 	jb gooderrortype
  1514 00000EE1 BB[B0150000]        <1> 	mov ebx, errortypesend
  1515                              <1> gooderrortype:
  1516 00000EE6 8B33                <1> 	mov esi, [ebx]
  1517                              <1> %ifdef gui.included
  1518 00000EE8 803D[A0950000]00    <1> 	cmp byte [guion], 0
  1519 00000EEF 0F842D000000        <1> 	je near errortext
  1520 00000EF5 668B0D[8C110000]    <1> 	mov cx, [locunhandy]
  1521 00000EFC 668B15[8E110000]    <1> 	mov dx, [locunhandx]
  1522 00000F03 66B80100            <1> 	mov ax, 1
  1523 00000F07 6631DB              <1> 	xor bx, bx
  1524 00000F0A E8925B0000          <1> 	call showstring2
  1525 00000F0F 66890D[8C110000]    <1> 	mov [locunhandy], cx
  1526 00000F16 668915[8E110000]    <1> 	mov [locunhandx], dx
  1527 00000F1D E905000000          <1> 	jmp errortextdone
  1528                              <1> %endif
  1529                              <1> errortext:
  1530 00000F22 E8E40D0000          <1> 	call print		;;get the error message and print it
  1531                              <1> errortextdone:
  1532 00000F27 31C9                <1> 	xor ecx, ecx
  1533 00000F29 8A0D[92110000]      <1> 	mov cl, [intprob]
  1534 00000F2F E8E1010000          <1> 	call expdump
  1535                              <1> dumpstack:
  1536 00000F34 8B35[7C110000]      <1> 	mov esi, [esploc]
  1537 00000F3A 39E6                <1> 	cmp esi, esp
  1538 00000F3C 7216                <1> 	jb donedump
  1539 00000F3E 368B0E              <1> 	mov ecx, [ss:esi]
  1540 00000F41 81EE04000000        <1> 	sub esi, 4
  1541 00000F47 8935[7C110000]      <1> 	mov [esploc], esi
  1542 00000F4D E8C3010000          <1> 	call expdump
  1543 00000F52 EBE0                <1> 	jmp dumpstack
  1544                              <1> donedump:
  1545 00000F54 0F20C1              <1> 	mov ecx, cr0
  1546 00000F57 E8B9010000          <1> 	call expdump
  1547 00000F5C 0F20D1              <1> 	mov ecx, cr2
  1548 00000F5F E8B1010000          <1> 	call expdump
  1549 00000F64 0F20D9              <1> 	mov ecx, cr3
  1550 00000F67 E8A9010000          <1> 	call expdump
  1551 00000F6C 0F20E1              <1> 	mov ecx, cr4
  1552 00000F6F E8A1010000          <1> 	call expdump
  1553 00000F74 0F00C9              <1> 	str ecx
  1554 00000F77 E899010000          <1> 	call expdump
  1555 00000F7C 0F010D[9B110000]    <1> 	sidt [igdtcache]
  1556 00000F83 8B0D[9D110000]      <1> 	mov ecx, [igdtcache + 2]
  1557 00000F89 E887010000          <1> 	call expdump
  1558 00000F8E 0F0105[9B110000]    <1> 	sgdt [igdtcache]
  1559 00000F95 8B0D[9D110000]      <1> 	mov ecx, [igdtcache + 2]
  1560 00000F9B E875010000          <1> 	call expdump
  1561 00000FA0 0F00C1              <1> 	sldt ecx
  1562 00000FA3 E86D010000          <1> 	call expdump
  1563 00000FA8 8B35[7C110000]      <1> 	mov esi, [esploc]
  1564 00000FAE 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1565 00000FB3 81C710000000        <1> 	add edi, 16
  1566 00000FB9 893D[97110000]      <1> 	mov [codelocend], edi
  1567 00000FBF 81EF20000000        <1> 	sub edi, 32
  1568                              <1> dumpcodeloop:
  1569 00000FC5 893D[93110000]      <1> 	mov [codeloc], edi
  1570 00000FCB 8B0F                <1> 	mov ecx, [edi]
  1571 00000FCD E843010000          <1> 	call expdump
  1572 00000FD2 8B3D[93110000]      <1> 	mov edi, [codeloc]
  1573 00000FD8 81C704000000        <1> 	add edi, 4
  1574 00000FDE 3B3D[97110000]      <1> 	cmp edi, [codelocend]
  1575 00000FE4 72DF                <1> 	jb dumpcodeloop
  1576 00000FE6 BE[A6100000]        <1> 	mov esi, backtoosmsg
  1577                              <1> %ifdef gui.included
  1578 00000FEB 803D[A0950000]00    <1> 	cmp byte [guion], 0
  1579 00000FF2 741F                <1> 	je backtomsg
  1580                              <1> guibacktomsg:
  1581 00000FF4 668B15[8E110000]    <1> 	mov dx, [locunhandx]
  1582 00000FFB 668B0D[8C110000]    <1> 	mov cx, [locunhandy]
  1583 00001002 66B80100            <1> 	mov ax, 1
  1584 00001006 6631DB              <1> 	xor bx, bx
  1585 00001009 E8935A0000          <1> 	call showstring2
  1586 0000100E E905000000          <1> 	jmp backtomsgdone
  1587                              <1> backtomsg:
  1588                              <1> %endif
  1589 00001013 E8F30C0000          <1> 	call print
  1590                              <1> backtomsgdone:
  1591 00001018 30C0                <1> 	xor al, al
  1592 0000101A E8AD110000          <1> 	call rdcharint
  1593 0000101F 803D[92110000]03    <1> 	cmp byte [intprob], 3
  1594 00001026 7541                <1> 	jne nodebugint
  1595                              <1> %ifdef gui.included
  1596 00001028 803D[A0950000]00    <1> 	cmp byte [guion], 0
  1597 0000102F 7427                <1> 	je nodebuggui
  1598 00001031 668B1D[90110000]    <1> 	mov bx, [backgroundcache]
  1599 00001038 66891D[15650000]    <1> 	mov [background], bx
  1600 0000103F 6631DB              <1> 	xor bx, bx
  1601 00001042 C605[60530000]00    <1> 	mov byte [mousedisabled], 0
  1602 00001049 E889540000          <1> 	call guiclear
  1603 0000104E E8C6540000          <1> 	call reloadallgraphics
  1604 00001053 E81B150000          <1> 	call termcopy
  1605                              <1> nodebuggui:
  1606                              <1> %endif
  1607 00001058 8B35[80110000]      <1> 	mov esi, [espfirst]
  1608 0000105E 89F4                <1> 	mov esp, esi
  1609 00001060 61                  <1> 	popad
  1610 00001061 17                  <1> 	pop ss
  1611 00001062 0FA9                <1> 	pop gs
  1612 00001064 0FA1                <1> 	pop fs
  1613 00001066 07                  <1> 	pop es
  1614 00001067 1F                  <1> 	pop ds
  1615 00001068 CF                  <1> 	iret
  1616                              <1> nodebugint:
  1617 00001069 61                  <1> 	popad
  1618 0000106A 17                  <1> 	pop ss
  1619 0000106B 0FA9                <1> 	pop gs
  1620 0000106D 0FA1                <1> 	pop fs
  1621 0000106F 07                  <1> 	pop es
  1622 00001070 1F                  <1> 	pop ds
  1623                              <1> %ifdef gui.included
  1624 00001071 803D[A0950000]00    <1> 	cmp byte [guion], 0
  1625 00001078 7427                <1> 	je returnunhandgui
  1626 0000107A 668B1D[90110000]    <1> 	mov bx, [backgroundcache]
  1627 00001081 66891D[15650000]    <1> 	mov [background], bx
  1628 00001088 6631DB              <1> 	xor bx, bx
  1629 0000108B C605[60530000]00    <1> 	mov byte [mousedisabled], 0
  1630 00001092 E840540000          <1> 	call guiclear
  1631 00001097 E87D540000          <1> 	call reloadallgraphics
  1632 0000109C E8D2140000          <1> 	call termcopy
  1633                              <1> %endif
  1634                              <1> returnunhandgui:
  1635 000010A1 E9E2180000          <1> 	jmp nwcmd
  1636 000010A6 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1637 000010AF 737420616E79207072- <1>
  1638 000010B8 6F626C656D7320696E- <1>
  1639 000010C1 207468652049737375- <1>
  1640 000010CA 65732073656374696F- <1>
  1641 000010D3 6E20617420736F6C6C- <1>
  1642 000010DC 65726F732E676F6F67- <1>
  1643 000010E5 6C65636F64652E636F- <1>
  1644 000010EE 6D0A                <1>
  1645 000010F0 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1646 000010F9 206B657920746F2072- <1>
  1647 00001102 657475726E20746F20- <1>
  1648 0000110B 536F6C6C65724F530A- <1>
  1649 00001114 00                  <1>
  1650                              <1> expdump:
  1651 00001115 8B35[84110000]      <1> 	mov esi, [esiloc]
  1652 0000111B 89F7                <1> 	mov edi, esi
  1653 0000111D 81C70F000000        <1> 	add edi, 15
  1654 00001123 81C604000000        <1> 	add esi, 4
  1655 00001129 893D[84110000]      <1> 	mov [esiloc], edi
  1656 0000112F 81EF03000000        <1> 	sub edi, 3
  1657 00001135 E8B51C0000          <1> 	call converthex
  1658 0000113A 81EE04000000        <1> 	sub esi, 4
  1659                              <1> %ifdef gui.included
  1660 00001140 803D[A0950000]00    <1> 	cmp byte [guion], 0
  1661 00001147 0F8429000000        <1> 	je near expdumptext
  1662 0000114D 668B0D[8C110000]    <1> 	mov cx, [locunhandy]
  1663 00001154 668B15[8E110000]    <1> 	mov dx, [locunhandx]
  1664 0000115B 66B80100            <1> 	mov ax, 1
  1665 0000115F 6631DB              <1> 	xor bx, bx
  1666 00001162 E83A590000          <1> 	call showstring2
  1667 00001167 66890D[8C110000]    <1> 	mov [locunhandy], cx
  1668 0000116E 668915[8E110000]    <1> 	mov [locunhandx], dx
  1669 00001175 C3                  <1> 	ret
  1670                              <1> %endif
  1671                              <1> expdumptext:
  1672 00001176 E8900B0000          <1> 	call print
  1673 0000117B C3                  <1> 	ret
  1674 0000117C 00000000            <1> esploc dd 0
  1675 00001180 00000000            <1> espfirst dd 0
  1676 00001184 00000000            <1> esiloc dd 0
  1677 00001188 00000000            <1> esiregbuf dd 0
  1678 0000118C 0100                <1> locunhandy dw 1
  1679 0000118E 0100                <1> locunhandx dw 1
  1680 00001190 0000                <1> backgroundcache dw 0
  1681 00001192 00                  <1> intprob db 0
  1682 00001193 00000000            <1> codeloc dd 0
  1683 00001197 00000000            <1> codelocend dd 0
  1684 0000119B 000000000000        <1> igdtcache dw 0,0,0
  1685                              <1> 	unhandmsg:	
  1686 000011A1 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1687 000011AA 303030FF0A00        <1>
  1688                              <1> unhndrg:
  1689 000011B0 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1690 000011B9 303030202000<rept>  <1>
  1691 00001219 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1692 00001222 303030FF0A00        <1>
  1693 00001228 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1694 00001231 303030202000<rept>  <1>
  1695 00001291 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1696 0000129A 303030FF0A00        <1>
  1697 000012A0 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1698 000012A9 303030202000<rept>  <1>
  1699 00001309 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1700 00001312 303030FF0A00        <1>
  1701 00001318 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1702 00001321 303030202000<rept>  <1>
  1703 00001381 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1704 0000138A 303030FF0A00        <1>
  1705                              <1> unhandregs:
  1706 00001390 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1707 00001399 303030202000        <1>
  1708 0000139F 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1709 000013A8 303030202000        <1>
  1710 000013AE 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1711 000013B7 303030FF0A00        <1>
  1712 000013BD 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1713 000013C6 303030202000        <1>
  1714 000013CC 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1715 000013D5 303030202000        <1>
  1716 000013DB 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1717 000013E4 303030202000        <1>
  1718 000013EA 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1719 000013F3 303030202000        <1>
  1720 000013F9 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1721 00001402 303030FF0A00        <1>
  1722 00001408 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1723 00001411 303030202000        <1>
  1724 00001417 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1725 00001420 303030202000        <1>
  1726 00001426 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1727 0000142F 303030202000        <1>
  1728 00001435 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1729 0000143E 303030FF0A00        <1>
  1730 00001444 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1731 0000144D 303030202000        <1>
  1732 00001453 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1733 0000145C 303030202000        <1>
  1734 00001462 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1735 0000146B 303030202000        <1>
  1736 00001471 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1737 0000147A 303030FF0A00        <1>
  1738 00001480 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1739 00001489 303030202000        <1>
  1740 0000148F 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1741 00001498 303030202000        <1>
  1742 0000149E 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1743 000014A7 303030202000        <1>
  1744 000014AD 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1745 000014B6 303030FF0A00        <1>
  1746 000014BC 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1747 000014C5 303030202000        <1>
  1748 000014CB 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1749 000014D4 303030202000        <1>
  1750 000014DA 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1751 000014E3 303030202000        <1>
  1752 000014E9 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1753 000014F2 303030FF0A00        <1>
  1754 000014F8 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1755 00001501 303030202000<rept>  <1>
  1756 00001516 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1757 0000151F 30303020FF00        <1>
  1758 00001525 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1759 0000152E 3030305D2000        <1>
  1760 00001534 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1761 0000153D 303030202000<rept>  <1>
  1762 00001561 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1763 0000156A 303030FF0A00        <1>
  1764                              <1> unhandmsgend:
  1765                              <1> 
  1766                              <1> errortypes:
  1767 00001570 [B4150000]          <1> 			dd err0
  1768 00001574 [18160000]          <1> 			dd err1
  1769 00001578 [79160000]          <1> 			dd err2
  1770 0000157C [CE160000]          <1> 			dd err3
  1771 00001580 [32170000]          <1> 			dd err4
  1772 00001584 [84170000]          <1> 			dd err5
  1773 00001588 [EE170000]          <1> 			dd err6
  1774 0000158C [56180000]          <1> 			dd err7
  1775 00001590 [A0180000]          <1> 			dd err8
  1776 00001594 [FD180000]          <1> 			dd err9
  1777 00001598 [56190000]          <1> 			dd err10
  1778 0000159C [A1190000]          <1> 			dd err11
  1779 000015A0 [F1190000]          <1> 			dd err12
  1780 000015A4 [4A1A0000]          <1> 			dd err13
  1781 000015A8 [AD1A0000]          <1> 			dd err14
  1782 000015AC [E91A0000]          <1> 			dd err15
  1783                              <1> errortypesend:
  1784 000015B0 [741B0000]          <1> 			dd unknownerror
  1785                              <1> 			
  1786 000015B4 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1787 000015BD 6279207A65726F3A0A  <1>
  1788 000015C6 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1789 000015CF 6C79206C696D2061F6- <1>
  1790 000015D8 78203D20EC20776865- <1>
  1791 000015E1 6E206120697320616E- <1>
  1792 000015EA 79207265616C206E75- <1>
  1793 000015F3 6D6265722E20486170- <1>
  1794 000015FC 707920456173746572- <1>
  1795 00001605 210A                <1>
  1796 00001607 202020202020202020- <1> 		db "            x",26,"0",10,0
  1797 00001610 202020781A300A00    <1>
  1798                              <1> 		
  1799 00001618 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1800 00001621 65702F427265616B70- <1>
  1801 0000162A 6F696E743A0A        <1>
  1802 00001630 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1803 00001639 696E74206661756C74- <1>
  1804 00001642 2C20627265616B706F- <1>
  1805 0000164B 696E7420747261702C- <1>
  1806 00001654 206F722073696E676C- <1>
  1807 0000165D 652D73746570207472- <1>
  1808 00001666 617020776173207472- <1>
  1809 0000166F 696767657265642E0A- <1>
  1810 00001678 00                  <1>
  1811                              <1> 		
  1812 00001679 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1813 00001682 6C6520696E74657272- <1>
  1814 0000168B 7570743A0A          <1>
  1815 00001690 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1816 00001699 6520696E7465727275- <1>
  1817 000016A2 707420776173207472- <1>
  1818 000016AB 696767657265642074- <1>
  1819 000016B4 68617420636F756C64- <1>
  1820 000016BD 206E6F74206265206D- <1>
  1821 000016C6 61736B65642E0A00    <1>
  1822                              <1> 		
  1823 000016CE 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1824 000016D7 743A0A              <1>
  1825 000016DA 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1826 000016E3 727275707420697320- <1>
  1827 000016EC 7573656420696E2070- <1>
  1828 000016F5 726F6772616D732074- <1>
  1829 000016FE 6F2073686F77207468- <1>
  1830 00001707 6520737461636B2061- <1>
  1831 00001710 6E6420726567697374- <1>
  1832 00001719 65727320616E642063- <1>
  1833 00001722 616E2062650A        <1>
  1834 00001728 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1835 00001731 00                  <1>
  1836                              <1> 		
  1837 00001732 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1838 0000173B 0A                  <1>
  1839 0000173C 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1840 00001745 73736F722072616E20- <1>
  1841 0000174E 696E746F20616E2049- <1>
  1842 00001757 4E544F20696E737472- <1>
  1843 00001760 756374696F6E207769- <1>
  1844 00001769 746820746865206F76- <1>
  1845 00001772 6572666C6F7720666C- <1>
  1846 0000177B 6167207365742E0A00  <1>
  1847                              <1> 		
  1848 00001784 426F756E6473206368- <1> err5	db "Bounds check:",10
  1849 0000178D 65636B3A0A          <1>
  1850 00001792 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1851 0000179B 73736F72207265626F- <1>
  1852 000017A4 756E6465642066726F- <1>
  1853 000017AD 6D206120424F554E44- <1>
  1854 000017B6 20696E737472756374- <1>
  1855 000017BF 696F6E2072756E206F- <1>
  1856 000017C8 6E20616E206F706572- <1>
  1857 000017D1 616E64207468617420- <1>
  1858 000017DA 776173206F75740A    <1>
  1859 000017E2 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1860 000017EB 2E0A00              <1>
  1861                              <1> 		
  1862 000017EE 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1863 000017F7 70636F64653A0A      <1>
  1864 000017FE 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1865 00001807 73736F722068617320- <1>
  1866 00001810 6E6F20696465612077- <1>
  1867 00001819 686174206974207761- <1>
  1868 00001822 7320747279696E6720- <1>
  1869 0000182B 746F20657865637574- <1>
  1870 00001834 652E20446F6E277420- <1>
  1871 0000183D 72756E205353453420- <1>
  1872 00001846 636F64650A          <1>
  1873 0000184B 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1874 00001854 0A00                <1>
  1875                              <1> 		
  1876 00001856 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1877 0000185F 6F72206E6F74206176- <1>
  1878 00001868 61696C61626C653A0A  <1>
  1879 00001871 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1880 0000187A 206B6E6F7720746865- <1>
  1881 00001883 7920646F6E2774206D- <1>
  1882 0000188C 616B652074686F7365- <1>
  1883 00001895 20616E796D6F726521- <1>
  1884 0000189E 0A00                <1>
  1885                              <1> 		
  1886 000018A0 446F75626C65206661- <1> err8	db "Double fault:",10
  1887 000018A9 756C743A0A          <1>
  1888 000018AE 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1889 000018B7 74696F6E2068616E64- <1>
  1890 000018C0 6C657220636F756C64- <1>
  1891 000018C9 206E6F742068616E64- <1>
  1892 000018D2 6C6520746861742069- <1>
  1893 000018DB 7420636F756C64206E- <1>
  1894 000018E4 6F742068616E646C65- <1>
  1895 000018ED 20616E206578636570- <1>
  1896 000018F6 74696F6E2E0A00      <1>
  1897                              <1> 		
  1898 000018FD 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1899 00001906 6F72207365676D656E- <1>
  1900 0000190F 74206F76657272756E- <1>
  1901 00001918 3A0A00              <1>
  1902 0000191B 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1903 00001924 722068617070656E73- <1>
  1904 0000192D 20696E206D6F646572- <1>
  1905 00001936 6E20636F6D70757465- <1>
  1906 0000193F 72732C20616E64206E- <1>
  1907 00001948 657665722073686F75- <1>
  1908 00001951 6C642E0A00          <1>
  1909                              <1> 
  1910 00001956 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1911 0000195F 53533A0A            <1>
  1912 00001963 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1913 0000196C 686174207761732073- <1>
  1914 00001975 776974636865642074- <1>
  1915 0000197E 6F20697320696E7661- <1>
  1916 00001987 6C69642E204E6F7468- <1>
  1917 00001990 696E672066756E6E79- <1>
  1918 00001999 20686572652E0A00    <1>
  1919                              <1> 		
  1920 000019A1 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1921 000019AA 6F742070726573656E- <1>
  1922 000019B3 743A0A              <1>
  1923 000019B6 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1924 000019BF 6E7420626974206F66- <1>
  1925 000019C8 20746865207365676D- <1>
  1926 000019D1 656E74206465736372- <1>
  1927 000019DA 6970746F7220697320- <1>
  1928 000019E3 73657420746F207A65- <1>
  1929 000019EC 726F2E0A00          <1>
  1930                              <1> 		
  1931 000019F1 537461636B20657863- <1> err12	db "Stack exception:",10
  1932 000019FA 657074696F6E3A0A    <1>
  1933 00001A02 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1934 00001A0B 7363726970746F7220- <1>
  1935 00001A14 697320696E76616C69- <1>
  1936 00001A1D 64206F72206E6F7420- <1>
  1937 00001A26 70726573656E74206F- <1>
  1938 00001A2F 7220697473206C696D- <1>
  1939 00001A38 697420697320746F6F- <1>
  1940 00001A41 20736D616C6C2E0A00  <1>
  1941                              <1> 		
  1942 00001A4A 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1943 00001A53 726F74656374696F6E- <1>
  1944 00001A5C 2076696F6C6174696F- <1>
  1945 00001A65 6E3A0A              <1>
  1946 00001A68 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1947 00001A71 746564207468652063- <1>
  1948 00001A7A 6F6D70757465722E20- <1>
  1949 00001A83 537465702061776179- <1>
  1950 00001A8C 20736C6F776C792E20- <1>
  1951 00001A95 546865204642492069- <1>
  1952 00001A9E 73206F6E2069747320- <1>
  1953 00001AA7 7761792E0A00        <1>
  1954                              <1> 		
  1955 00001AAD 50616765206661756C- <1> err14	db "Page fault:",10
  1956 00001AB6 743A0A              <1>
  1957 00001AB9 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1958 00001AC2 746861742077617320- <1>
  1959 00001ACB 726571756573746564- <1>
  1960 00001AD4 20776173206E6F7420- <1>
  1961 00001ADD 617661696C61626C65- <1>
  1962 00001AE6 2E0A00              <1>
  1963                              <1> 		
  1964 00001AE9 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1965 00001AF2 666F7220506C616E20- <1>
  1966 00001AFB 523A0A              <1>
  1967 00001AFE 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1968 00001B07 727275707420697320- <1>
  1969 00001B10 726573657276656420- <1>
  1970 00001B19 666F72207573616765- <1>
  1971 00001B22 206F6E6C7920627920- <1>
  1972 00001B2B 746865206D696C6974- <1>
  1973 00001B34 617279207768656E20- <1>
  1974 00001B3D 6974206973206E6563- <1>
  1975 00001B46 6573736172790A      <1>
  1976 00001B4D 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1977 00001B56 746520612066756C6C- <1>
  1978 00001B5F 2D7363616C6520636F- <1>
  1979 00001B68 757020642782746174- <1>
  1980 00001B71 2E0A00              <1>
  1981                              <1> 		
  1982 00001B74 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1983 00001B7D 68656C6C206A757374- <1>
  1984 00001B86 2068617070656E6564- <1>
  1985 00001B8F 3F2049732065766572- <1>
  1986 00001B98 796F6E65206F6B6179- <1>
  1987 00001BA1 3F2048617264206472- <1>
  1988 00001BAA 6976653F2056696465- <1>
  1989 00001BB3 6F20636172643F0A    <1>
  1990 00001BBB 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1991 00001BC4 726520796F75207468- <1>
  1992 00001BCD 6572653F0A00        <1>
  1993                              <1> %else
  1994                              <1> unhand:	
  1995                              <1> 	%assign i 0
  1996                              <1> 	%rep 32
  1997                              <1> 	mov byte [intprob], i
  1998                              <1> 	jmp unhand2
  1999                              <1> 	%assign i i+1
  2000                              <1> 	%endrep
  2001                              <1> unhand2:
  2002                              <1> 	cmp byte [intprob], 3
  2003                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2004                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2005                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2006                              <1> 	mov bl, [intprob]
  2007                              <1> 	jmp exitprog
  2008                              <1> intprob db 0
  2009                              <1> %endif
  2010                                      %include "source/ints.asm"
  2011                              <1> newints:	;for great justice
  2012 00001BD3 80FC00              <1> 	cmp ah, 0
  2013 00001BD6 0F847F000000        <1> 	je near intx0   ;kills app
  2014 00001BDC 80FC01              <1> 	cmp ah, 1
  2015 00001BDF 0F84FE000000        <1> 	je near intx1   ;print string
  2016 00001BE5 80FC02              <1> 	cmp ah, 2
  2017 00001BE8 0F8450010000        <1> 	je near intx2	;read string
  2018 00001BEE 80FC03              <1> 	cmp ah, 3
  2019 00001BF1 0F8470010000        <1> 	je near intx3	;clear screen
  2020 00001BF7 80FC04              <1> 	cmp ah, 4
  2021 00001BFA 0F84E5010000        <1> 	je near intx4	;read and print string
  2022 00001C00 80FC05              <1> 	cmp ah, 5
  2023 00001C03 0F84B7050000        <1> 	je near intx5	;get char
  2024 00001C09 80FC06              <1> 	cmp ah, 6
  2025 00001C0C 0F8409060000        <1> 	je near intx6	;print char
  2026 00001C12 80FC07              <1> 	cmp ah, 7
  2027 00001C15 0F84EB070000        <1> 	je near intx7	;read file
  2028                              <1> ;	cmp ah, 8
  2029                              <1> ;	je near intx8	;write file
  2030 00001C1B 80FC09              <1> 	cmp ah, 9
  2031 00001C1E 0F84EC070000        <1> 	je near intx9	;convert number to string
  2032 00001C24 80FC0A              <1> 	cmp ah, 10
  2033 00001C27 0F84FB070000        <1> 	je near intx10	;convert string to number
  2034                              <1> %ifdef threads.included
  2035 00001C2D 80FC0B              <1> 	cmp ah, 11
  2036 00001C30 0F84FC070000        <1> 	je near intx11	;create thread
  2037                              <1> %endif
  2038 00001C36 80FC0C              <1> 	cmp ah, 12
  2039 00001C39 0F84CA080000        <1> 	je near intx12	;get time
  2040 00001C3F 80FC0D              <1> 	cmp ah, 13
  2041 00001C42 0F84D6080000        <1> 	je near intx13	;set time
  2042 00001C48 80FC0E              <1> 	cmp ah, 14
  2043 00001C4B 0F84DD080000        <1> 	je near intx14	;run program
  2044 00001C51 80FC0F              <1> 	cmp ah, 15
  2045 00001C54 0F84E9080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2046 00001C5A C3                  <1> 	ret
  2047                              <1> 	
  2048                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2049                              <1> intx0:
  2050                              <1> 	%include 'source/interrupts/0_exit.asm'
  2051                              <2> exitprog:
  2052 00001C5B 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2053 00001C5F 8ED8                <2> 	mov ds, ax
  2054 00001C61 8EC0                <2> 	mov es, ax
  2055 00001C63 8EE0                <2> 	mov fs, ax
  2056 00001C65 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2057 00001C69 8EE8                <2> 	mov gs, ax
  2058 00001C6B C705[B85F0000]0000- <2> 	mov dword [currentthread], 0
  2059 00001C73 0000                <2>
  2060 00001C75 C705[B35F0000]0400- <2> 	mov dword [lastthread], 4
  2061 00001C7D 0000                <2>
  2062 00001C7F C605[B75F0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2063 00001C86 8B25[E6AB0000]      <2> 	mov esp, [previousstack] ;and this
  2064 00001C8C 81FB00000000        <2> 	cmp ebx, 0
  2065 00001C92 0F8501000000        <2> 	jne near .error
  2066 00001C98 C3                  <2> 	ret
  2067                              <2> .error:
  2068 00001C99 89D9                <2> 	mov ecx, ebx
  2069 00001C9B B006                <2> 	mov al, 6
  2070 00001C9D A2[4D2E0000]        <2> 	mov [firsthexshown], al
  2071 00001CA2 51                  <2> 	push ecx
  2072 00001CA3 BE[BE1C0000]        <2> 	mov esi, .msg1
  2073 00001CA8 E840000000          <2> 	call printhighlight
  2074 00001CAD 59                  <2> 	pop ecx
  2075 00001CAE E8AF110000          <2> 	call showhex
  2076 00001CB3 BE[D31C0000]        <2> 	mov esi, .msg2
  2077 00001CB8 E830000000          <2> 	call printhighlight
  2078 00001CBD C3                  <2> 	ret
  2079                              <2> 	
  2080 00001CBE 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2081 00001CC7 7461747573206F6620- <2>
  2082 00001CD0 307800              <2>
  2083 00001CD3 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2084 00001CDC 726E65642E0A00      <2>
  2085                              <1> intx1:
  2086                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2087 00001CE3 E82A000000          <2> call printint
  2088 00001CE8 E9B8E5FFFF          <2> jmp timerinterrupt
  2089                              <2> 
  2090                              <2> 	printhighlight:
  2091 00001CED 6631C0              <2> 		xor ax, ax
  2092 00001CF0 66BBF000            <2> 		mov bx, 0xF0
  2093 00001CF4 E919000000          <2> 		jmp printint
  2094                              <2> 	printquiet:
  2095 00001CF9 6631C0              <2> 		xor ax, ax
  2096 00001CFC A2[3D1D0000]        <2> 		mov [endkeyprint], al
  2097 00001D01 66BB0700            <2> 		mov bx, 7
  2098 00001D05 E820000000          <2> 		call printint.b
  2099 00001D0A C3                  <2> 		ret
  2100                              <2>     print:
  2101 00001D0B 6631C0              <2> 		xor ax, ax
  2102 00001D0E 66BB0700            <2> 		mov bx, 7
  2103                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2104 00001D12 56                  <2> 		push esi
  2105 00001D13 A2[3D1D0000]        <2> 		mov [endkeyprint], al
  2106 00001D18 E80D000000          <2> 		call .b
  2107 00001D1D 89F1                <2> 		mov ecx, esi
  2108 00001D1F 5F                  <2> 		pop edi
  2109 00001D20 29F9                <2> 		sub ecx, edi
  2110 00001D22 51                  <2> 		push ecx
  2111 00001D23 E84B080000          <2> 		call termcopy
  2112 00001D28 59                  <2> 		pop ecx
  2113 00001D29 C3                  <2> 		ret
  2114                              <2> 	.b:
  2115 00001D2A 8A06                <2> 		mov al, [esi]
  2116 00001D2C 3A05[3D1D0000]      <2> 		cmp al, [endkeyprint]
  2117 00001D32 7408                <2> 		je .done
  2118 00001D34 E807050000          <2> 		call prcharq
  2119 00001D39 46                  <2> 		inc esi
  2120 00001D3A EBEE                <2> 		jmp .b
  2121                              <2> 	.done:
  2122 00001D3C C3                  <2> 		ret
  2123                              <2> 
  2124 00001D3D 00                  <2> endkeyprint db 0
  2125                              <1> intx2:
  2126                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2127 00001D3E E805000000          <2> call readint
  2128 00001D43 E95DE5FFFF          <2> jmp timerinterrupt
  2129                              <2> 
  2130                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2131 00001D48 89C3                <2> 		mov ebx, eax
  2132                              <2> 	.b:
  2133 00001D4A 53                  <2> 		push ebx
  2134 00001D4B 57                  <2> 		push edi
  2135 00001D4C 56                  <2> 		push esi
  2136 00001D4D 30C0                <2> 		xor al, al
  2137 00001D4F E878040000          <2> 		call rdcharint
  2138 00001D54 5E                  <2> 		pop esi
  2139 00001D55 8806                <2> 		mov [esi], al
  2140 00001D57 46                  <2> 		inc esi
  2141 00001D58 5F                  <2> 		pop edi
  2142 00001D59 5B                  <2> 		pop ebx
  2143 00001D5A 39FE                <2> 		cmp esi, edi
  2144 00001D5C 7304                <2> 		jae .done
  2145 00001D5E 38D8                <2> 		cmp al, bl
  2146 00001D60 75E8                <2> 		jne .b
  2147                              <2> 	.done:
  2148 00001D62 4E                  <2> 		dec esi
  2149 00001D63 C60600              <2> 		mov byte [esi], 0
  2150 00001D66 C3                  <2> 		ret
  2151                              <1> intx3:
  2152                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2153 00001D67 E805000000          <2> call clear
  2154 00001D6C E934E5FFFF          <2> jmp timerinterrupt
  2155                              <2> %ifdef io.serial
  2156                              <2> clear:
  2157                              <2> 	ret
  2158                              <2> %else
  2159                              <2> clear:		
  2160 00001D71 668B0D[02240000]    <2> 		mov cx, [charxy]
  2161 00001D78 BF[7CC90000]        <2> 		mov edi, videobuf
  2162 00001D7D 6631C0              <2> 		xor ax, ax
  2163 00001D80 66A3[FC230000]      <2> 		mov [linebeginpos], ax
  2164 00001D86 66A3[FE230000]      <2> 		mov [videobufpos], ax
  2165 00001D8C 6631D2              <2> 		xor dx, dx
  2166 00001D8F 66A3[00240000]      <2> 		mov [charpos], ax
  2167 00001D95 B407                <2> 		mov ah, 7
  2168                              <2> 	clearb:
  2169 00001D97 668907              <2> 		mov [edi], ax
  2170 00001D9A 81C702000000        <2> 		add edi, 2
  2171 00001DA0 FEC9                <2> 		dec cl
  2172 00001DA2 80F900              <2> 		cmp cl, 0
  2173 00001DA5 75F0                <2> 		jne clearb
  2174 00001DA7 8A0D[02240000]      <2> 		mov cl, [charxy]
  2175 00001DAD FECD                <2> 		dec ch
  2176 00001DAF 80FD00              <2> 		cmp ch, 0
  2177 00001DB2 75E3                <2> 		jne clearb
  2178                              <2> 	cleardouble:
  2179 00001DB4 BF[20340100]        <2> 		mov edi, videobuf2
  2180 00001DB9 668B0D[02240000]    <2> 		mov cx, [charxy]
  2181 00001DC0 31C0                <2> 		xor eax, eax
  2182                              <2> 	clearc:
  2183 00001DC2 668907              <2> 		mov [edi], ax
  2184 00001DC5 81C702000000        <2> 		add edi, 2
  2185 00001DCB FEC9                <2> 		dec cl
  2186 00001DCD 80F900              <2> 		cmp cl, 0
  2187 00001DD0 75F0                <2> 		jne clearc
  2188 00001DD2 8A0D[02240000]      <2> 		mov cl, [charxy]
  2189 00001DD8 FECD                <2> 		dec ch
  2190 00001DDA 80FD00              <2> 		cmp ch, 0
  2191 00001DDD 75E3                <2> 		jne clearc
  2192 00001DDF E88F070000          <2> 		call termcopy
  2193 00001DE4 C3                  <2> 		ret
  2194                              <2> %endif
  2195                              <2> 		
  2196                              <1> intx4:
  2197                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2198 00001DE5 E809000000          <2> call rdprint
  2199 00001DEA E9B6E4FFFF          <2> jmp timerinterrupt
  2200                              <2> 
  2201                              <2> readline:
  2202 00001DEF B00A                <2>   mov al, 10
  2203 00001DF1 B307                <2>   mov bl, 7
  2204                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2205 00001DF3 8935[B5210000]      <2> 		mov [buftxtloc], esi
  2206 00001DF9 A2[AD210000]        <2> 		mov [endkeyrdpr], al
  2207 00001DFE 881D[AE210000]      <2> 		mov [modkeyrdpr], bl
  2208 00001E04 8935[AF210000]      <2> 		mov [firstesirdpr], esi
  2209 00001E0A 893D[B9210000]      <2> 		mov [endbufferrdpr], edi
  2210 00001E10 8B3D[D09E0100]      <2> 		mov edi, [commandsentered]
  2211 00001E16 893D[CC9E0100]      <2> 		mov [commandlistentries], edi
  2212                              <2> 	rdprintb:
  2213 00001E1C 56                  <2> 		push esi
  2214 00001E1D B001                <2> 		mov al, 1
  2215 00001E1F E8A8030000          <2> 		call rdcharint
  2216 00001E24 5E                  <2> 		pop esi
  2217                              <2> %ifdef io.serial
  2218                              <2> 		cmp ah, 0x41
  2219                              <2> 		je near rdprup
  2220                              <2> 		cmp ah, 0x42
  2221                              <2> 		je near rdprdown
  2222                              <2> 		cmp ah, 0x43
  2223                              <2> 		je near rdprright
  2224                              <2> 		cmp ah, 0x44
  2225                              <2> 		je near rdprleft
  2226                              <2> 		cmp ah, 0x31
  2227                              <2> 		je near rdprhome
  2228                              <2> 		cmp ah, 0x48
  2229                              <2> 		je near rdprhome
  2230                              <2> 		cmp ah, 0x46
  2231                              <2> 		je near rdprend
  2232                              <2> 		cmp ah, 0x33
  2233                              <2> 		je near rdprdel
  2234                              <2> 		cmp ah, 0x34
  2235                              <2> 		je near rdprend
  2236                              <2> %else
  2237 00001E25 803D[15570000]E0    <2> 		cmp byte [specialkey], 0xE0
  2238 00001E2C 751B                <2> 		jne notspecialrdprnt
  2239 00001E2E 80FC53              <2> 		cmp ah, 0x53
  2240 00001E31 0F843B030000        <2> 		je near rdprdel
  2241 00001E37 80FC47              <2> 		cmp ah, 0x47
  2242 00001E3A 0F8407010000        <2> 		je near rdprhome
  2243 00001E40 80FC4F              <2> 		cmp ah, 0x4F
  2244 00001E43 0F841D010000        <2> 		je near rdprend
  2245                              <2> 	notspecialrdprnt:
  2246 00001E49 80FC50              <2> 		cmp ah, 0x50
  2247 00001E4C 0F84B8010000        <2> 		je near rdprdown
  2248 00001E52 80FC4D              <2> 		cmp ah, 0x4D
  2249 00001E55 0F8467010000        <2> 		je near rdprright
  2250 00001E5B 80FC4B              <2> 		cmp ah, 0x4B
  2251 00001E5E 0F841F010000        <2> 		je near rdprleft
  2252 00001E64 80FC48              <2> 		cmp ah, 0x48
  2253 00001E67 0F84E0010000        <2> 		je near rdprup
  2254                              <2> %endif
  2255 00001E6D 3C08                <2> 		cmp al, 8
  2256 00001E6F 0F8418030000        <2> 		je near rdprbscheck
  2257 00001E75 3C00                <2> 		cmp al, 0
  2258 00001E77 74A3                <2> 		je rdprintb
  2259 00001E79 80FC00              <2> 		cmp ah, 0
  2260 00001E7C 749E                <2> 		je rdprintb
  2261 00001E7E 8806                <2> 		mov [esi], al
  2262 00001E80 46                  <2> 		inc esi
  2263                              <2> 	bscheckequal:
  2264 00001E81 8A1D[AE210000]      <2> 		mov bl, [modkeyrdpr]
  2265 00001E87 8A3D[B4210000]      <2> 		mov bh, [txtmask]
  2266 00001E8D 80FF00              <2> 		cmp bh, 0
  2267 00001E90 7404                <2> 		je nomasktxt
  2268 00001E92 88F8                <2> 		mov al, bh
  2269 00001E94 30FF                <2> 		xor bh, bh
  2270                              <2> 	nomasktxt:
  2271 00001E96 E894030000          <2> 		call prcharint
  2272 00001E9B 56                  <2> 		push esi
  2273 00001E9C 66A3[AB210000]      <2> 		mov [axcache], ax
  2274 00001EA2 8A25[AD210000]      <2> 		mov ah, [endkeyrdpr]
  2275 00001EA8 38E0                <2> 		cmp al, ah
  2276 00001EAA 7429                <2> 		je nobackprintbuftxt2
  2277 00001EAC BE[66BE0000]        <2> 		mov esi, buftxt2
  2278 00001EB1 E843FEFFFF          <2> 		call printquiet
  2279 00001EB6 B020                <2> 		mov al, " "
  2280 00001EB8 E883030000          <2> 		call prcharq
  2281 00001EBD B008                <2> 		mov al, 8
  2282 00001EBF 81FE[66BE0000]      <2> 		cmp esi, buftxt2
  2283 00001EC5 740E                <2> 		je nobackprintbuftxt2
  2284                              <2> 	backprintbuftxt2:
  2285 00001EC7 E874030000          <2> 		call prcharq
  2286 00001ECC 4E                  <2> 		dec esi
  2287 00001ECD 81FE[66BE0000]      <2> 		cmp esi, buftxt2
  2288 00001ED3 77F2                <2> 		ja backprintbuftxt2
  2289                              <2> 	nobackprintbuftxt2:
  2290 00001ED5 3C0A                <2> 		cmp al, 10
  2291 00001ED7 7405                <2> 		je nonobackprint
  2292 00001ED9 E851030000          <2> 		call prcharint
  2293                              <2> 	nonobackprint:
  2294 00001EDE 5E                  <2> 		pop esi
  2295 00001EDF 3B35[B9210000]      <2> 		cmp esi, [endbufferrdpr]
  2296 00001EE5 0F8319000000        <2> 		jae near donerdprinc
  2297 00001EEB 66A1[AB210000]      <2> 		mov ax, [axcache]
  2298 00001EF1 8A25[AD210000]      <2> 		mov ah, [endkeyrdpr]
  2299 00001EF7 38E0                <2> 		cmp al, ah
  2300 00001EF9 0F851DFFFFFF        <2> 		jne rdprintb
  2301 00001EFF E901000000          <2> 		jmp donerdprint
  2302                              <2> 	donerdprinc:
  2303 00001F04 46                  <2> 		inc esi
  2304                              <2> 	donerdprint:
  2305 00001F05 4E                  <2> 		dec esi
  2306 00001F06 BF[66BE0000]        <2> 		mov edi, buftxt2
  2307                              <2> 	copylaterstuff:
  2308 00001F0B 8A07                <2> 		mov al, [edi]
  2309 00001F0D 3C00                <2> 		cmp al, 0
  2310 00001F0F 7406                <2> 		je nocopylaterstuff
  2311 00001F11 8806                <2> 		mov [esi], al
  2312 00001F13 47                  <2> 		inc edi
  2313 00001F14 46                  <2> 		inc esi
  2314 00001F15 EBF4                <2> 		jmp copylaterstuff
  2315                              <2> 	nocopylaterstuff:
  2316 00001F17 C60600              <2> 		mov byte [esi], 0
  2317 00001F1A E80B000000          <2> 		call clearbuftxt2
  2318 00001F1F 89F1                <2> 		mov ecx, esi
  2319 00001F21 8B3D[AF210000]      <2> 		mov edi, [firstesirdpr]
  2320 00001F27 29F9                <2> 		sub ecx, edi
  2321 00001F29 C3                  <2> 		ret
  2322                              <2> 	
  2323                              <2> 	clearbuftxt2:
  2324 00001F2A 30C0                <2> 		xor al, al
  2325 00001F2C BF[66BE0000]        <2> 		mov edi, buftxt2
  2326                              <2> 	clearbuftxt2lp:
  2327 00001F31 8807                <2> 		mov [edi], al
  2328 00001F33 47                  <2> 		inc edi
  2329 00001F34 81FF[66C20000]      <2> 		cmp edi, buftxt
  2330 00001F3A 75F5                <2> 		jne clearbuftxt2lp
  2331 00001F3C C3                  <2> 		ret
  2332                              <2> 	
  2333                              <2> 	rdprintb2:
  2334 00001F3D E831060000          <2> 		call termcopy
  2335 00001F42 E9D5FEFFFF          <2> 		jmp rdprintb
  2336                              <2> 	
  2337                              <2> 	rdprhome:
  2338 00001F47 3B35[B5210000]      <2> 		cmp esi, [buftxtloc]
  2339 00001F4D 0F84EAFFFFFF        <2> 		je near rdprintb2
  2340 00001F53 BF[66BE0000]        <2> 		mov edi, buftxt2
  2341 00001F58 8A07                <2> 		mov al, [edi]
  2342 00001F5A E846000000          <2> 		call shiftbuftxt2
  2343 00001F5F E8DC020000          <2> 		call prcharq
  2344 00001F64 EBE1                <2> 		jmp rdprhome
  2345                              <2> 		
  2346                              <2> 	rdprend:
  2347 00001F66 BF[66BE0000]        <2> 		mov edi, buftxt2
  2348 00001F6B 8A07                <2> 		mov al, [edi]
  2349 00001F6D 3C00                <2> 		cmp al, 0
  2350 00001F6F 0F84C8FFFFFF        <2> 		je near rdprintb2
  2351 00001F75 8806                <2> 		mov [esi], al
  2352 00001F77 E866000000          <2> 		call shiftbuftxt2lft
  2353 00001F7C E8BF020000          <2> 		call prcharq
  2354 00001F81 EBE3                <2> 		jmp rdprend
  2355                              <2> 	
  2356                              <2> 	rdprleft:
  2357 00001F83 3B35[B5210000]      <2> 		cmp esi, [buftxtloc]
  2358 00001F89 0F848DFEFFFF        <2> 		je near rdprintb
  2359 00001F8F BF[66BE0000]        <2> 		mov edi, buftxt2
  2360 00001F94 8A07                <2> 		mov al, [edi]
  2361 00001F96 E80A000000          <2> 		call shiftbuftxt2
  2362 00001F9B E88F020000          <2> 		call prcharint
  2363 00001FA0 E977FEFFFF          <2> 		jmp rdprintb
  2364                              <2> 	shiftbuftxt2:
  2365 00001FA5 3C00                <2> 		cmp al, 0
  2366 00001FA7 7409                <2> 		je noshiftbuftxt2
  2367 00001FA9 47                  <2> 		inc edi
  2368 00001FAA 8A27                <2> 		mov ah, [edi]
  2369 00001FAC 8807                <2> 		mov [edi], al
  2370 00001FAE 88E0                <2> 		mov al, ah
  2371 00001FB0 EBF3                <2> 		jmp shiftbuftxt2
  2372                              <2> 	noshiftbuftxt2:
  2373 00001FB2 BF[66BE0000]        <2> 		mov edi, buftxt2
  2374 00001FB7 4E                  <2> 		dec esi
  2375 00001FB8 8A06                <2> 		mov al, [esi]
  2376 00001FBA 8807                <2> 		mov [edi], al
  2377 00001FBC C60600              <2> 		mov byte [esi], 0
  2378 00001FBF B008                <2> 		mov al, 8
  2379 00001FC1 C3                  <2> 		ret
  2380                              <2> 		
  2381                              <2> 	rdprright:
  2382 00001FC2 BF[66BE0000]        <2> 		mov edi, buftxt2
  2383 00001FC7 8A07                <2> 		mov al, [edi]
  2384 00001FC9 3C00                <2> 		cmp al, 0
  2385 00001FCB 0F844BFEFFFF        <2> 		je near rdprintb
  2386 00001FD1 8806                <2> 		mov [esi], al
  2387 00001FD3 E80A000000          <2> 		call shiftbuftxt2lft
  2388 00001FD8 E852020000          <2> 		call prcharint
  2389 00001FDD E93AFEFFFF          <2> 		jmp rdprintb
  2390                              <2> 	shiftbuftxt2lft:
  2391 00001FE2 3C00                <2> 		cmp al, 0
  2392 00001FE4 7408                <2> 		je noshiftbuftxt2lft
  2393 00001FE6 47                  <2> 		inc edi
  2394 00001FE7 8A07                <2> 		mov al, [edi]
  2395 00001FE9 8847FF              <2> 		mov [edi - 1], al
  2396 00001FEC EBF4                <2> 		jmp shiftbuftxt2lft
  2397                              <2> 	noshiftbuftxt2lft:
  2398 00001FEE 8A06                <2> 		mov al, [esi]
  2399 00001FF0 46                  <2> 		inc esi
  2400 00001FF1 8A1D[AE210000]      <2> 		mov bl, [modkeyrdpr]
  2401 00001FF7 C3                  <2> 		ret
  2402                              <2> 		
  2403                              <2> 	rdprdownbck:
  2404 00001FF8 FECC                <2> 		dec ah
  2405 00001FFA 8825[B3210000]      <2> 		mov [commandedit], ah
  2406 00002000 E88D000000          <2> 		call rdprbckspc
  2407 00002005 E912FEFFFF          <2> 		jmp rdprintb
  2408                              <2> 	
  2409                              <2> 	rdprdown:
  2410 0000200A 8A25[B3210000]      <2> 		mov ah, [commandedit]
  2411 00002010 80FC01              <2> 		cmp ah, 1
  2412 00002013 0F8603FEFFFF        <2> 		jbe near rdprintb
  2413 00002019 8B3D[D09E0100]      <2> 		mov edi, [commandsentered]
  2414 0000201F 3B3D[CC9E0100]      <2> 		cmp edi, [commandlistentries]
  2415 00002025 7618                <2> 		jbe .nofix
  2416 00002027 8105[CC9E0100]0200- <2> 		add dword [commandlistentries], 2
  2417 0000202F 0000                <2>
  2418 00002031 3B3D[CC9E0100]      <2> 		cmp edi, [commandlistentries]
  2419 00002037 7706                <2> 		ja .nofix
  2420 00002039 893D[CC9E0100]      <2> 		mov [commandlistentries], edi
  2421                              <2> 	.nofix
  2422 0000203F 80FC02              <2> 		cmp ah, 2
  2423 00002042 74B4                <2> 		je rdprdownbck
  2424 00002044 80EC02              <2> 		sub ah, 2
  2425 00002047 8825[B3210000]      <2> 		mov [commandedit], ah
  2426                              <2> 		
  2427                              <2> 	rdprup:
  2428 0000204D 3805[B3210000]      <2> 		cmp [commandedit], al
  2429 00002053 0F84C3FDFFFF        <2> 		je near rdprintb
  2430 00002059 813D[CC9E0100]0000- <2> 		cmp dword [commandlistentries], 0
  2431 00002061 0000                <2>
  2432 00002063 0F84B3FDFFFF        <2> 		je near rdprintb
  2433 00002069 FF0D[CC9E0100]      <2> 		dec dword [commandlistentries]
  2434                              <2> 	.lp:
  2435 0000206F BF[66BE0000]        <2> 		mov edi, buftxt2
  2436 00002074 8A07                <2> 		mov al, [edi]
  2437 00002076 3C00                <2> 		cmp al, 0
  2438 00002078 740E                <2> 		je .start
  2439 0000207A 8806                <2> 		mov [esi], al
  2440 0000207C E861FFFFFF          <2> 		call shiftbuftxt2lft
  2441 00002081 E8BA010000          <2> 		call prcharq
  2442 00002086 EBE7                <2> 		jmp .lp
  2443                              <2> 	.start:
  2444 00002088 E805000000          <2> 		call rdprbckspc
  2445 0000208D E941000000          <2> 		jmp getcurrentcommandstr
  2446                              <2> 	rdprbckspc:
  2447 00002092 3B35[B5210000]      <2> 		cmp esi, [buftxtloc]
  2448 00002098 742B                <2> 		je nordprupbck
  2449                              <2> 	rdprupbckspclp:
  2450 0000209A B008                <2> 		mov al, 8
  2451 0000209C 8A1D[AE210000]      <2> 		mov bl, [modkeyrdpr]
  2452 000020A2 E899010000          <2> 		call prcharq
  2453 000020A7 B020                <2> 		mov al, ' '
  2454 000020A9 E892010000          <2> 		call prcharq
  2455 000020AE B008                <2> 		mov al, 8
  2456 000020B0 E88B010000          <2> 		call prcharq
  2457 000020B5 4E                  <2> 		dec esi
  2458 000020B6 3B35[B5210000]      <2> 		cmp esi, [buftxtloc]
  2459 000020BC 7402                <2> 		je nordprupbck2
  2460 000020BE EBDA                <2> 		jmp rdprupbckspclp
  2461                              <2> 	nordprupbck2:
  2462 000020C0 E8AE040000          <2> 		call termcopy
  2463                              <2> 	nordprupbck:
  2464 000020C5 8B3D[C89E0100]      <2> 		mov edi, [commandbufpos]
  2465 000020CB 81C7[D49E0100]      <2> 		add edi, commandbuf
  2466 000020D1 4F                  <2> 		dec edi
  2467 000020D2 C3                  <2> 		ret
  2468                              <2> 	getcurrentcommandstr:
  2469 000020D3 8A25[B3210000]      <2> 		mov ah, [commandedit]
  2470 000020D9 FE05[B3210000]      <2> 		inc byte [commandedit]
  2471                              <2> 	getccmdlp:
  2472 000020DF 4F                  <2> 		dec edi
  2473 000020E0 8A07                <2> 		mov al, [edi]
  2474 000020E2 81FF[D49E0100]      <2> 		cmp edi, commandbuf
  2475 000020E8 7231                <2> 		jb getcmdresetcommandbuf
  2476 000020EA 81EF[D49E0100]      <2> 		sub edi, commandbuf
  2477 000020F0 3B3D[C89E0100]      <2> 		cmp edi, [commandbufpos]
  2478 000020F6 0F8420FDFFFF        <2> 		je near rdprintb
  2479 000020FC 81C7[D49E0100]      <2> 		add edi, commandbuf
  2480 00002102 3C00                <2> 		cmp al, 0
  2481 00002104 75D9                <2> 		jne getccmdlp
  2482 00002106 FECC                <2> 		dec ah
  2483 00002108 80FC00              <2> 		cmp ah, 0
  2484 0000210B 77D2                <2> 		ja getccmdlp
  2485 0000210D 47                  <2> 		inc edi
  2486 0000210E 81FF[D4AE0100]      <2> 		cmp edi, commandbufend
  2487 00002114 770D                <2> 		ja fixcmdbufb4morerdpr
  2488 00002116 E915000000          <2> 		jmp morerdprup
  2489                              <2> 	getcmdresetcommandbuf:
  2490 0000211B BF[D4AE0100]        <2> 		mov edi, commandbufend
  2491 00002120 47                  <2> 		inc edi
  2492 00002121 EBBC                <2> 		jmp getccmdlp
  2493                              <2> 	fixcmdbufb4morerdpr:
  2494 00002123 4F                  <2> 		dec edi
  2495 00002124 81EF[D4AE0100]      <2> 		sub edi, commandbufend
  2496 0000212A 81C7[D49E0100]      <2> 		add edi, commandbuf
  2497                              <2> 	morerdprup:
  2498 00002130 8A07                <2> 		mov al, [edi]
  2499 00002132 47                  <2> 		inc edi
  2500 00002133 81EF[D49E0100]      <2> 		sub edi, commandbuf
  2501 00002139 3C00                <2> 		cmp al, 0
  2502 0000213B 0F84FCFDFFFF        <2> 		je near rdprintb2
  2503 00002141 3B3D[C89E0100]      <2> 		cmp edi, [commandbufpos]
  2504 00002147 0F83F0FDFFFF        <2> 		jae near rdprintb2
  2505 0000214D 81C7[D49E0100]      <2> 		add edi, commandbuf
  2506 00002153 8806                <2> 		mov [esi], al
  2507 00002155 46                  <2> 		inc esi
  2508 00002156 57                  <2> 		push edi
  2509 00002157 8A1D[AE210000]      <2> 		mov bl, [modkeyrdpr]
  2510 0000215D E8DE000000          <2> 		call prcharq
  2511 00002162 5F                  <2> 		pop edi
  2512 00002163 81FF[D4AE0100]      <2> 		cmp edi, commandbufend
  2513 00002169 76C5                <2> 		jbe morerdprup
  2514 0000216B BF[D49E0100]        <2> 		mov edi, commandbuf
  2515 00002170 EBBE                <2> 		jmp morerdprup
  2516                              <2> 		
  2517                              <2> 	rdprdel:
  2518 00002172 BF[66BE0000]        <2> 		mov edi, buftxt2
  2519 00002177 8A07                <2> 		mov al, [edi]
  2520 00002179 3C00                <2> 		cmp al, 0
  2521 0000217B 0F849BFCFFFF        <2> 		je near rdprintb
  2522 00002181 8806                <2> 		mov [esi], al
  2523 00002183 E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2524 00002188 E8B3000000          <2> 		call prcharq
  2525                              <2> 		
  2526                              <2> 	rdprbscheck:
  2527 0000218D 3B35[AF210000]      <2> 		cmp esi, [firstesirdpr]
  2528 00002193 7705                <2> 		ja goodbscheck
  2529 00002195 E982FCFFFF          <2> 		jmp rdprintb
  2530                              <2> 	goodbscheck:
  2531 0000219A 4E                  <2> 		dec esi
  2532 0000219B C60600              <2> 		mov byte [esi], 0
  2533 0000219E 8A1D[AE210000]      <2> 		mov bl, [modkeyrdpr]
  2534 000021A4 B008                <2> 		mov al, 8
  2535 000021A6 E9D6FCFFFF          <2> 		jmp bscheckequal
  2536                              <2> 		
  2537 000021AB 0000                <2> axcache dw 0
  2538 000021AD 00                  <2> endkeyrdpr db 0
  2539 000021AE 00                  <2> modkeyrdpr db 0
  2540 000021AF 00000000            <2> firstesirdpr dd 0
  2541 000021B3 00                  <2> commandedit db 0
  2542 000021B4 00                  <2> txtmask db 0
  2543 000021B5 00000000            <2> buftxtloc dd 0
  2544 000021B9 00000000            <2> endbufferrdpr dd 0
  2545 000021BD 082000              <2> backcursor db 8," ",0
  2546                              <1> intx5:
  2547                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2548 000021C0 E807000000          <2> 	call rdcharint
  2549 000021C5 E9DBE0FFFF          <2> 	jmp timerinterrupt
  2550                              <2> getchar:
  2551 000021CA 30C0                <2> 	xor al, al
  2552                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2553 000021CC C605[1A220000]01    <2> 		mov byte [trans], 1
  2554 000021D3 3C00                <2> 		cmp al, 0
  2555 000021D5 7507                <2> 		jne transcheck
  2556 000021D7 C605[1A220000]00    <2> 		mov byte [trans], 0
  2557                              <2> 	transcheck:
  2558                              <2> 	%ifdef io.serial
  2559                              <2> 		call serial.receive
  2560                              <2> 		cmp al, 13
  2561                              <2> 		je rdenter
  2562                              <2> 	%else
  2563 000021DE E852350000          <2> 		call getkey
  2564 000021E3 66A1[18220000]      <2> 		mov ax, [lastkey]
  2565 000021E9 80FC1C              <2> 		cmp ah, 0x1C
  2566 000021EC 741F                <2> 		je rdenter
  2567                              <2> 	%endif
  2568 000021EE 8A3D[1A220000]      <2> 		mov bh, [trans]
  2569 000021F4 803D[15570000]E0    <2> 		cmp byte [specialkey], 0xE0
  2570 000021FB 7504                <2> 		jne nospecialtrans
  2571 000021FD 88C3                <2> 		mov bl, al
  2572 000021FF 30C0                <2> 		xor al, al
  2573                              <2> 	nospecialtrans:
  2574 00002201 08C7                <2> 		or bh, al
  2575 00002203 80FF00              <2> 		cmp bh, 0
  2576 00002206 74D6                <2> 		je transcheck
  2577 00002208 E90A000000          <2> 		jmp rdend
  2578                              <2> 	rdenter:
  2579 0000220D B41C                <2> 		mov ah, 0x1C
  2580 0000220F B00A                <2> 		mov al, 10
  2581 00002211 66A3[18220000]      <2> 		mov [lastkey], ax
  2582                              <2> 	rdend:
  2583 00002217 C3                  <2> 		ret
  2584                              <2> 		
  2585 00002218 0000                <2> lastkey db 0,0
  2586 0000221A 00                  <2> trans db 0
  2587                              <1> intx6:
  2588                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2589                              <2> %ifdef io.serial
  2590                              <2> 	cmp bl, bh
  2591                              <2> 	call prcharint
  2592                              <2> 	jmp timerinterrupt
  2593                              <2> prcharint:	
  2594                              <2> prcharq:
  2595                              <2> 	call serial.send
  2596                              <2> 	ret
  2597                              <2> %else
  2598 0000221B 38FB                <2> cmp bl, bh
  2599 0000221D 740A                <2> je prchar.notimer
  2600 0000221F E80B000000          <2> call prcharint
  2601 00002224 E97CE0FFFF          <2> jmp timerinterrupt
  2602                              <2> prchar.notimer:
  2603 00002229 E812000000          <2> 	call prcharq
  2604 0000222E CF                  <2> 	iret
  2605                              <2> 	
  2606                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2607 0000222F 38FB                <2> 	cmp bl, bh
  2608 00002231 740D                <2> 	je prcharq
  2609 00002233 E808000000          <2> 	call prcharq
  2610 00002238 E836030000          <2> 	call termcopy
  2611 0000223D C3                  <2> 	ret
  2612 0000223E 00                  <2> termguion db 0
  2613 0000223F 00                  <2> termcopyon db 0
  2614                              <2> prcharq:
  2615 00002240 88DC                <2> 	mov ah, bl
  2616 00002242 66A3[04240000]      <2> 	mov [charbuf], ax
  2617 00002248 31DB                <2> 	xor ebx, ebx
  2618 0000224A 668B1D[FE230000]    <2> 	mov bx, [videobufpos]
  2619 00002251 BF[7CC90000]        <2> 	mov edi, videobuf
  2620 00002256 01DF                <2> 	add edi, ebx
  2621 00002258 66A1[7E250000]      <2> 	mov ax, [removedvideo]
  2622 0000225E 668907              <2> 	mov [edi], ax
  2623 00002261 66A1[04240000]      <2> 	mov ax, [charbuf]
  2624 00002267 31D2                <2> 	xor edx, edx
  2625 00002269 668B15[00240000]    <2> 	mov dx, [charpos]
  2626 00002270 31C9                <2> 	xor ecx, ecx
  2627 00002272 668B0D[02240000]    <2> 	mov cx, [charxy]
  2628 00002279 3C09                <2> 	cmp al, 9
  2629 0000227B 0F8463000000        <2> 	je near prtab
  2630 00002281 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2631 00002283 0F848B000000        <2> 	je near prcr
  2632 00002289 3C0A                <2> 	cmp al, 10
  2633 0000228B 0F84B7000000        <2> 	je near prnlcr
  2634 00002291 3C08                <2> 	cmp al, 8
  2635 00002293 0F848F000000        <2> 	je near prbs
  2636 00002299 3CFF                <2> 	cmp al, 255		;;null character
  2637 0000229B 0F841B000000        <2> 	je near donescr
  2638 000022A1 668907              <2> 	mov [edi], ax
  2639 000022A4 81C702000000        <2> 	add edi, 2
  2640 000022AA FEC2                <2> 	inc dl
  2641                              <2> donecrnl:
  2642 000022AC 38CA                <2> 	cmp dl, cl
  2643 000022AE 0F83B9000000        <2> 	jae near preol
  2644                              <2> doneeol:
  2645 000022B4 38EE                <2> 	cmp dh, ch
  2646 000022B6 0F83CF000000        <2> 	jae near prscr	
  2647                              <2> donescr:
  2648 000022BC 89FB                <2> 	mov ebx, edi
  2649 000022BE 668B07              <2> 	mov ax, [edi]
  2650 000022C1 66A3[7E250000]      <2> 	mov [removedvideo], ax
  2651 000022C7 81EB[7CC90000]      <2> 	sub ebx, videobuf
  2652 000022CD 66891D[FE230000]    <2> 	mov [videobufpos], bx
  2653 000022D4 668915[00240000]    <2> 	mov [charpos], dx
  2654 000022DB 66A1[04240000]      <2> 	mov ax, [charbuf]
  2655 000022E1 88E3                <2> 	mov bl, ah
  2656 000022E3 C3                  <2> 	ret
  2657                              <2> 	
  2658                              <2> 	prtab:
  2659 000022E4 31DB                <2> 		xor ebx, ebx
  2660 000022E6 668B1D[FC230000]    <2> 		mov bx, [linebeginpos]
  2661 000022ED 81EF[7CC90000]      <2> 		sub edi, videobuf
  2662 000022F3 29DF                <2> 		sub edi, ebx
  2663 000022F5 C1EF04              <2> 		shr edi, 4
  2664 000022F8 C1E704              <2> 		shl edi, 4
  2665 000022FB 81C710000000        <2> 		add edi, 16
  2666 00002301 C0EA03              <2> 		shr dl, 3
  2667 00002304 C0E203              <2> 		shl dl, 3
  2668 00002307 80C208              <2> 		add dl, 8
  2669 0000230A 81C7[7CC90000]      <2> 		add edi, videobuf
  2670 00002310 01DF                <2> 		add edi, ebx
  2671 00002312 EB98                <2> 		jmp donecrnl
  2672                              <2> 	
  2673                              <2> 	prcr:
  2674 00002314 30D2                <2> 		xor dl, dl
  2675 00002316 31DB                <2> 		xor ebx, ebx
  2676 00002318 BF[7CC90000]        <2> 		mov edi, videobuf
  2677 0000231D 668B1D[FC230000]    <2> 		mov bx, [linebeginpos]
  2678 00002324 01DF                <2> 		add edi, ebx
  2679 00002326 EB84                <2> 		jmp donecrnl
  2680                              <2> 			
  2681                              <2> 	prbs:
  2682 00002328 80FA00              <2> 		cmp dl, 0
  2683 0000232B 7410                <2> 		je prbackline
  2684                              <2> 	prnobmr:
  2685 0000232D FECA                <2> 		dec dl
  2686 0000232F 6631C0              <2> 		xor ax, ax
  2687 00002332 81EF02000000        <2> 		sub edi, 2
  2688 00002338 E96FFFFFFF          <2> 		jmp donecrnl
  2689                              <2> 	prbackline:
  2690 0000233D 88CA                <2> 		mov dl, cl
  2691 0000233F 80FE00              <2> 		cmp dh, 0
  2692 00002342 74E9                <2> 		je prnobmr
  2693 00002344 FECE                <2> 		dec dh
  2694 00002346 EBE5                <2> 		jmp prnobmr
  2695                              <2> 		
  2696                              <2> 	prnlcr:
  2697 00002348 FEC6                <2> 		inc dh
  2698 0000234A 31DB                <2> 		xor ebx, ebx
  2699 0000234C 30D2                <2> 		xor dl, dl
  2700 0000234E 88CB                <2> 		mov bl, cl
  2701 00002350 66D1E3              <2> 		shl bx, 1
  2702 00002353 BF[7CC90000]        <2> 		mov edi, videobuf
  2703 00002358 66031D[FC230000]    <2> 		add bx, [linebeginpos]
  2704 0000235F 66891D[FC230000]    <2> 		mov [linebeginpos], bx
  2705 00002366 01DF                <2> 		add edi, ebx
  2706 00002368 E93FFFFFFF          <2> 		jmp donecrnl
  2707                              <2> 		
  2708                              <2> 	preol:
  2709 0000236D 30D2                <2> 		xor dl, dl
  2710 0000236F FEC6                <2> 		inc dh
  2711 00002371 31DB                <2> 		xor ebx, ebx
  2712 00002373 88CB                <2> 		mov bl, cl
  2713 00002375 66D1E3              <2> 		shl bx, 1
  2714 00002378 66031D[FC230000]    <2> 		add bx, [linebeginpos]
  2715 0000237F 66891D[FC230000]    <2> 		mov [linebeginpos], bx
  2716 00002386 E929FFFFFF          <2> 		jmp doneeol
  2717                              <2> 	prscr:
  2718 0000238B FECE                <2> 		dec dh
  2719 0000238D BF[7CC90000]        <2> 		mov edi, videobuf
  2720 00002392 31DB                <2> 		xor ebx, ebx
  2721 00002394 88CB                <2> 		mov bl, cl
  2722 00002396 66D1E3              <2> 		shl bx, 1
  2723 00002399 01FB                <2> 		add ebx, edi
  2724                              <2> 	intscrollloop:
  2725 0000239B 668B03              <2> 		mov ax, [ebx]
  2726 0000239E 668907              <2> 		mov [edi], ax
  2727 000023A1 81C702000000        <2> 		add edi, 2
  2728 000023A7 81C302000000        <2> 		add ebx, 2
  2729 000023AD FEC9                <2> 		dec cl
  2730 000023AF 80F900              <2> 		cmp cl, 0
  2731 000023B2 75E7                <2> 		jne intscrollloop
  2732 000023B4 8A0D[02240000]      <2> 		mov cl, [charxy]
  2733 000023BA FECD                <2> 		dec ch
  2734 000023BC 80FD01              <2> 		cmp ch, 1
  2735 000023BF 77DA                <2> 		ja intscrollloop
  2736 000023C1 6631C0              <2> 		xor ax, ax
  2737 000023C4 81EF[7CC90000]      <2> 		sub edi, videobuf
  2738 000023CA 66893D[FC230000]    <2> 		mov [linebeginpos], di
  2739 000023D1 81C7[7CC90000]      <2> 		add edi, videobuf
  2740 000023D7 89FB                <2> 		mov ebx, edi
  2741                              <2> 	intloopclear:
  2742 000023D9 668903              <2> 		mov [ebx], ax
  2743 000023DC 81C302000000        <2> 		add ebx, 2
  2744 000023E2 FEC9                <2> 		dec cl
  2745 000023E4 80F900              <2> 		cmp cl, 0
  2746 000023E7 75F0                <2> 		jne intloopclear
  2747 000023E9 FECD                <2> 		dec ch
  2748 000023EB 80FD00              <2> 		cmp ch, 0
  2749 000023EE 75E9                <2> 		jne intloopclear
  2750 000023F0 668B0D[02240000]    <2> 		mov cx, [charxy]
  2751 000023F7 E9C0FEFFFF          <2> 		jmp donescr
  2752                              <2> 		
  2753 000023FC 0000                <2> linebeginpos dw 0
  2754 000023FE 0000                <2> videobufpos: dw 0
  2755 00002400 0000                <2> charpos db 0,0
  2756 00002402 501E                <2> charxy db 80,30
  2757 00002404 0000                <2> charbuf dw 0
  2758                              <2> %endif
  2759                              <1> intx7:
  2760                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2761 00002406 E80D3A0000          <2> 	call loadfile
  2762 0000240B E995DEFFFF          <2> 	jmp timerinterrupt
  2763                              <1> intx9:
  2764                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2765 00002410 3C00                <2> 	cmp al, 0
  2766 00002412 750A                <2> 	jne num2strb
  2767 00002414 E8130B0000          <2> 	call showdec
  2768 00002419 E987DEFFFF          <2> 	jmp timerinterrupt
  2769                              <2> num2strb:
  2770 0000241E E83F0A0000          <2> 	call showhex
  2771 00002423 E97DDEFFFF          <2> 	jmp timerinterrupt
  2772                              <1> intx10:
  2773                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2774 00002428 E8E10B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2775 0000242D E973DEFFFF          <2> 	jmp timerinterrupt
  2776                              <2> 	
  2777                              <1> %ifdef threads.included
  2778                              <1> intx11:
  2779                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2780                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2781                              <2> 			;returns the PID of the new fork in ebx
  2782                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2783 00002432 FA                  <2> 	cli
  2784 00002433 60                  <2> 	pushad
  2785 00002434 8925[01250000]      <2> 	mov [.espold], esp
  2786 0000243A C605[B75F0000]01    <2> 	mov byte [threadson], 1
  2787 00002441 8B1D[B85F0000]      <2> 	mov ebx, [currentthread]
  2788 00002447 C1E302              <2> 	shl ebx, 2
  2789 0000244A 89A3[E8CE0100]      <2> 	mov [threadlist + ebx], esp
  2790 00002450 C1EB02              <2> 	shr ebx, 2
  2791 00002453 81FB00000000        <2> 	cmp ebx, 0
  2792 00002459 750C                <2> 	jne .simplestack
  2793 0000245B BB[86A70000]        <2> 	mov ebx, stackend
  2794 00002460 29E3                <2> 	sub ebx, esp
  2795 00002462 E90B000000          <2> 	jmp .stackcalcdone
  2796                              <2> .simplestack:
  2797 00002467 C1E30A              <2> 	shl ebx, 10
  2798 0000246A 81C3[E8E20100]      <2> 	add ebx, stack1
  2799 00002470 29E3                <2> 	sub ebx, esp
  2800                              <2> .stackcalcdone:
  2801 00002472 29DC                <2> 	sub esp, ebx
  2802 00002474 81C4[E8E20100]      <2> 	add esp, stack1
  2803 0000247A 8B1D[B35F0000]      <2> 	mov ebx, [lastthread]
  2804 00002480 C1E308              <2> 	shl ebx, 8
  2805 00002483 01DC                <2> 	add esp, ebx
  2806 00002485 891D[05250000]      <2> 	mov [.stackend], ebx
  2807                              <2> 
  2808 0000248B 89E5                <2> 	mov ebp, esp
  2809 0000248D 8B25[01250000]      <2> 	mov esp, [.espold]
  2810                              <2> 
  2811 00002493 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2812 00002496 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2813                              <2> 
  2814 0000249A 31DB                <2> 	xor ebx, ebx
  2815                              <2> .stackcopy:
  2816 0000249C 668B041C            <2> 	mov ax, [esp + ebx]
  2817 000024A0 6689441D00          <2> 	mov [ebp + ebx], ax
  2818 000024A5 81C302000000        <2> 	add ebx, 2
  2819 000024AB 3B1D[05250000]      <2> 	cmp ebx, [.stackend]
  2820 000024B1 72E9                <2> 	jb .stackcopy
  2821                              <2> 
  2822 000024B3 31C0                <2> 	xor eax, eax
  2823 000024B5 668CC8              <2> 	mov ax, cs
  2824 000024B8 89C2                <2> 	mov edx, eax
  2825 000024BA 8B4C2428            <2> 	mov ecx, [esp + 40]
  2826 000024BE 81C900020000        <2> 	or ecx, 0x200
  2827                              <2> 	
  2828 000024C4 81FE00000000        <2> 	cmp esi, 0
  2829 000024CA 7504                <2> 	jne .nochangestack
  2830 000024CC 8B742420            <2> 	mov esi, [esp + 32]
  2831                              <2> .nochangestack:
  2832 000024D0 89F0                <2> 	mov eax, esi
  2833 000024D2 89EC                <2> 	mov esp, ebp
  2834                              <2> 
  2835 000024D4 89442420            <2> 	mov [esp + 32], eax
  2836 000024D8 89542424            <2> 	mov [esp + 36], edx
  2837 000024DC 894C2428            <2> 	mov [esp + 40], ecx
  2838                              <2> 
  2839 000024E0 8B1D[B35F0000]      <2> 	mov ebx, [lastthread]
  2840 000024E6 89A3[E8CE0100]      <2> 	mov [threadlist + ebx], esp
  2841 000024EC 81C304000000        <2> 	add ebx, 4
  2842 000024F2 891D[B35F0000]      <2> 	mov [lastthread], ebx
  2843 000024F8 8B25[01250000]      <2> 	mov esp, [.espold]
  2844 000024FE 61                  <2> 	popad
  2845 000024FF FB                  <2> 	sti
  2846 00002500 CF                  <2> 	iret
  2847                              <2> 
  2848 00002501 00000000            <2> .espold dd 0
  2849 00002505 00000000            <2> .stackend dd 0
  2850                              <1> %endif
  2851                              <1> intx12:
  2852                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2853 00002509 A1[5D020000]        <2> 	mov eax, [timeseconds]
  2854 0000250E 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2855 00002514 89D9                <2> 	mov ecx, ebx
  2856 00002516 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2857 00002519 E987DDFFFF          <2> 	jmp timerinterrupt
  2858                              <1> intx13:
  2859                              <1> 	%include 'source/interrupts/13_settime.asm'
  2860 0000251E A3[5D020000]        <2> 	mov [timeseconds], eax
  2861 00002523 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2862 00002529 E977DDFFFF          <2> 	jmp timerinterrupt
  2863                              <2> 	
  2864                              <1> intx14:
  2865                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2866 0000252E BF[66C20000]        <2> 	mov edi, buftxt
  2867                              <2> cpcmd:
  2868 00002533 8A06                <2> 	mov al, [esi]
  2869 00002535 8807                <2> 	mov [edi], al
  2870 00002537 46                  <2> 	inc esi
  2871 00002538 47                  <2> 	inc edi
  2872 00002539 3C00                <2> 	cmp al, 0
  2873 0000253B 75F6                <2> 	jne cpcmd
  2874 0000253D E823060000          <2> 	call run
  2875 00002542 CF                  <2> 	iret
  2876                              <1> intx15:
  2877                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2878 00002543 BB[66AE0000]        <2> 	mov ebx, variables
  2879 00002548 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  2880 0000254E 89F7                <2> 	mov edi, esi
  2881 00002550 31C9                <2> 	xor ecx, ecx
  2882                              <2> getcommandzeroes:
  2883 00002552 8A07                <2> 	mov al, [edi]
  2884 00002554 47                  <2> 	inc edi
  2885 00002555 3C3B                <2> 	cmp al, ';'
  2886 00002557 740B                <2> 	je nomorezeroes
  2887 00002559 3C00                <2> 	cmp al, 0
  2888 0000255B 7407                <2> 	je nomorezeroes
  2889 0000255D 3C20                <2> 	cmp al, ' '
  2890 0000255F 75F1                <2> 	jne getcommandzeroes
  2891 00002561 41                  <2> 	inc ecx
  2892 00002562 EBEE                <2> 	jmp getcommandzeroes
  2893                              <2> nomorezeroes:
  2894 00002564 41                  <2> 	inc ecx
  2895 00002565 4F                  <2> 	dec edi
  2896 00002566 8B1D[F2AD0000]      <2> 	mov ebx, [uid]
  2897 0000256C 8B15[B85F0000]      <2> 	mov edx, [currentthread]
  2898 00002572 CF                  <2> 	iret
  2899                              <2> 	
  2900                              <1> termcopy:
  2901                              <1> %ifdef io.serial
  2902                              <1> 	ret
  2903                              <1> %else
  2904                              <1> %ifdef terminal.vsync
  2905                              <1> 	mov byte [termcopyneeded], 1
  2906                              <1> 	ret
  2907                              <1> %else
  2908 00002573 E808000000          <1> 	call newtermcopy
  2909 00002578 C3                  <1> 	ret
  2910                              <1> %endif
  2911 00002579 00                  <1> 	termcopyneeded db 0
  2912 0000257A 00000000            <1> 	termcursorpos dd 0
  2913 0000257E 0000                <1> 	removedvideo dw 0
  2914                              <1> newtermcopy:
  2915 00002580 60                  <1> 	pusha
  2916 00002581 BF[7CC90000]        <1> 	mov edi, videobuf
  2917 00002586 31DB                <1> 	xor ebx, ebx
  2918 00002588 881D[79250000]      <1> 	mov [termcopyneeded], bl
  2919 0000258E 668B1D[FE230000]    <1> 	mov bx, [videobufpos]
  2920 00002595 01DF                <1> 	add edi, ebx
  2921 00002597 893D[7A250000]      <1> 	mov [termcursorpos], edi
  2922 0000259D E8CB000000          <1> 	call switchtermcursor
  2923 000025A2 803D[A0950000]00    <1> 	cmp byte [guion], 0
  2924 000025A9 0F8420000000        <1> 	je near nowincopy
  2925                              <1> %ifdef gui.included
  2926 000025AF C605[95710000]00    <1> 	mov byte [mouseselecton], 0
  2927 000025B6 C605[3F220000]01    <1> 	mov byte [termcopyon], 1
  2928 000025BD 803D[3E220000]01    <1> 	cmp byte [termguion], 1
  2929 000025C4 0F8459490000        <1> 	je near windowvideocopy
  2930                              <1> %endif
  2931 000025CA E997000000          <1> 	jmp nocopytermatall
  2932                              <1> nowincopy:
  2933 000025CF BE00000A00          <1> 	mov esi, 0xA0000
  2934 000025D4 A1[3E020000]        <1> 	mov eax, [basecache]
  2935 000025D9 C1E004              <1> 	shl eax, 4
  2936 000025DC 29C6                <1> 	sub esi, eax
  2937 000025DE BF[7CC90000]        <1> 	mov edi, videobuf
  2938 000025E3 31C9                <1> 	xor ecx, ecx
  2939 000025E5 668B0D[02240000]    <1> 	mov cx, [charxy]
  2940                              <1> nowincopy2:
  2941 000025EC 668B07              <1> 	mov ax, [edi]
  2942 000025EF 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2943 000025F5 668B1F              <1> 	mov bx, [edi]
  2944 000025F8 668907              <1> 	mov [edi], ax
  2945 000025FB 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2946 00002601 47                  <1> 	inc edi
  2947 00002602 6639D8              <1> 	cmp ax, bx
  2948 00002605 743E                <1> 	je nopresentwinfont
  2949 00002607 4F                  <1> 	dec edi
  2950 00002608 BB[F5830000]        <1> 	mov ebx, fonts
  2951 0000260D 31C0                <1> 	xor eax, eax
  2952 0000260F 8A07                <1> 	mov al, [edi]
  2953 00002611 C1E004              <1> 	shl eax, 4
  2954 00002614 01C3                <1> 	add ebx, eax
  2955 00002616 47                  <1> 	inc edi
  2956 00002617 8A27                <1> 	mov ah, [edi]
  2957 00002619 31D2                <1> 	xor edx, edx
  2958 0000261B 8A15[02240000]      <1> 	mov dl, [charxy]
  2959 00002621 C1C110              <1> 	rol ecx, 16
  2960 00002624 B110                <1> 	mov cl, 16
  2961                              <1> nowinfont:
  2962 00002626 8A03                <1> 	mov al, [ebx]
  2963 00002628 D0C8                <1> 	ror al, 1
  2964 0000262A 80FC07              <1> 	cmp ah, 7
  2965 0000262D 7602                <1> 	jbe notnotfont
  2966 0000262F F6D0                <1> 	not al
  2967                              <1> notnotfont:
  2968 00002631 8806                <1> 	mov [esi], al
  2969 00002633 01D6                <1> 	add esi, edx
  2970 00002635 43                  <1> 	inc ebx
  2971 00002636 FEC9                <1> 	dec cl
  2972 00002638 80F900              <1> 	cmp cl, 0
  2973 0000263B 75E9                <1> 	jne nowinfont
  2974 0000263D C1E204              <1> 	shl edx, 4
  2975 00002640 29D6                <1> 	sub esi, edx
  2976 00002642 C1C110              <1> 	rol ecx, 16
  2977                              <1> nopresentwinfont:
  2978 00002645 47                  <1> 	inc edi
  2979 00002646 46                  <1> 	inc esi
  2980 00002647 FEC9                <1> 	dec cl
  2981 00002649 80F900              <1> 	cmp cl, 0
  2982 0000264C 759E                <1> 	jne nowincopy2
  2983 0000264E 8A0D[02240000]      <1> 	mov cl, [charxy]
  2984 00002654 31D2                <1> 	xor edx, edx
  2985 00002656 88CA                <1> 	mov dl, cl
  2986 00002658 29D6                <1> 	sub esi, edx
  2987 0000265A C1E204              <1> 	shl edx, 4
  2988 0000265D 01D6                <1> 	add esi, edx
  2989 0000265F FECD                <1> 	dec ch
  2990 00002661 80FD00              <1> 	cmp ch, 0
  2991 00002664 7586                <1> 	jne nowincopy2
  2992                              <1> nocopytermatall:
  2993 00002666 E802000000          <1> 	call switchtermcursor
  2994 0000266B 61                  <1> 	popa
  2995 0000266C C3                  <1> 	ret
  2996                              <1> 	
  2997                              <1> switchtermcursor:
  2998 0000266D 8B3D[7A250000]      <1> 	mov edi, [termcursorpos]
  2999 00002673 8A4701              <1> 	mov al, [edi + 1]
  3000 00002676 8A27                <1> 	mov ah, [edi]
  3001 00002678 3C07                <1> 	cmp al, 7
  3002 0000267A 7607                <1> 	jbe movlargecursorterm
  3003 0000267C B007                <1> 	mov al, 7
  3004 0000267E E902000000          <1> 	jmp movedcursorterm
  3005                              <1> movlargecursorterm:
  3006 00002683 B0F0                <1> 	mov al, 0xF0
  3007                              <1> movedcursorterm:
  3008 00002685 884701              <1> 	mov [edi + 1], al
  3009 00002688 80FC00              <1> 	cmp ah, 0
  3010 0000268B 7504                <1> 	jne fixednocursorterm
  3011 0000268D B420                <1> 	mov ah, " "
  3012 0000268F 8827                <1> 	mov [edi], ah
  3013                              <1> fixednocursorterm:
  3014 00002691 C3                  <1> 	ret
  3015                              <1> %endif
  3016                                      %include "source/dosints.asm"
  3017                              <1> int20h:
  3018 00002692 66B8004C            <1> mov ax, 0x4C00
  3019                              <1> int21h:
  3020                              <1> dostosolleros:
  3021 00002696 6650                <1> 	push ax
  3022 00002698 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3023 0000269C 8ED8                <1> 	mov ds, ax
  3024 0000269E 8EC0                <1> 	mov es, ax
  3025 000026A0 8EE0                <1> 	mov fs, ax
  3026 000026A2 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3027 000026A6 8EE8                <1> 	mov gs, ax
  3028 000026A8 6658                <1> 	pop ax
  3029 000026AA 9C                  <1> 	pushf
  3030 000026AB 60                  <1> 	pusha
  3031 000026AC 80FC01              <1> 	cmp ah, 1
  3032 000026AF 0F8449000000        <1> 	je near dosgchar
  3033 000026B5 80FC02              <1> 	cmp ah, 2
  3034 000026B8 0F8447000000        <1> 	je near doswchar
  3035 000026BE 80FC09              <1> 	cmp ah, 9
  3036 000026C1 0F8449000000        <1> 	je near dosprintstr
  3037 000026C7 80FC0A              <1> 	cmp ah, 0xA
  3038 000026CA 0F8456000000        <1> 	je near dosgetstr
  3039 000026D0 80FC2B              <1> 	cmp ah, 0x2B
  3040 000026D3 0F8492000000        <1> 	je near dosgetdate
  3041 000026D9 80FC2C              <1> 	cmp ah, 0x2C
  3042 000026DC 0F84AC000000        <1> 	je near dosgettime
  3043 000026E2 80FC4C              <1> 	cmp ah, 0x4C
  3044 000026E5 0F84C1000000        <1> 	je near dosexit
  3045                              <1> backtodos:
  3046 000026EB 61                  <1> 	popa
  3047 000026EC 9D                  <1> 	popf
  3048 000026ED 6650                <1> 	push ax
  3049 000026EF 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3050 000026F3 8ED8                <1> 	mov ds, ax
  3051 000026F5 8EC0                <1> 	mov es, ax
  3052 000026F7 8EE0                <1> 	mov fs, ax
  3053 000026F9 8EE8                <1> 	mov gs, ax
  3054 000026FB 6658                <1> 	pop ax
  3055 000026FD CF                  <1> 	iret
  3056                              <1> 
  3057                              <1> dosgchar:
  3058 000026FE E8C7FAFFFF          <1> 	call getchar
  3059 00002703 EBE6                <1> 	jmp backtodos
  3060                              <1> 	
  3061                              <1> doswchar:
  3062 00002705 88D0                <1> 	mov al, dl
  3063 00002707 B307                <1> 	mov bl, 7
  3064 00002709 E821FBFFFF          <1> 	call prcharint
  3065 0000270E EBDB                <1> 	jmp backtodos
  3066                              <1> 	
  3067                              <1> dosprintstr:
  3068 00002710 31F6                <1> 	xor esi, esi
  3069 00002712 6689D6              <1> 	mov si, dx
  3070 00002715 81C600004000        <1> 	add esi, dosprogloc
  3071 0000271B B024                <1> 	mov al, "$"
  3072 0000271D B307                <1> 	mov bl, 7
  3073 0000271F E8EEF5FFFF          <1> 	call printint
  3074 00002724 EBC5                <1> 	jmp backtodos
  3075                              <1> 	
  3076                              <1> dosgetstr:
  3077 00002726 31F6                <1> 	xor esi, esi
  3078 00002728 6689D6              <1> 	mov si, dx
  3079 0000272B 81C600004000        <1> 	add esi, dosprogloc
  3080 00002731 B900000000          <1> 	mov ecx, 0
  3081 00002736 8A0E                <1> 	mov cl, [esi]
  3082 00002738 81C603000000        <1> 	add esi, 3
  3083 0000273E 89F7                <1> 	mov edi, esi
  3084 00002740 8935[67270000]      <1> 	mov [stringstart], esi
  3085 00002746 01CF                <1> 	add edi, ecx
  3086 00002748 B00A                <1> 	mov al, 10
  3087 0000274A B307                <1> 	mov bl, 7
  3088 0000274C E8A2F6FFFF          <1> 	call rdprint
  3089 00002751 89F1                <1> 	mov ecx, esi
  3090 00002753 2B0D[67270000]      <1> 	sub ecx, [stringstart]
  3091 00002759 8B35[67270000]      <1> 	mov esi, [stringstart]
  3092 0000275F 884EFF              <1> 	mov [esi - 1], cl
  3093 00002762 884EFE              <1> 	mov [esi - 2], cl
  3094 00002765 EB84                <1> 	jmp backtodos
  3095 00002767 00000000            <1> stringstart dd 0
  3096                              <1> 
  3097                              <1> dosgetdate:
  3098 0000276B E804240000          <1> 	call time
  3099 00002770 8A0D[3C4D0000]      <1> 	mov cl, [RTCtimeYear]
  3100 00002776 B500                <1> 	mov ch, 0
  3101 00002778 6681C1D007          <1> 	add cx, 2000
  3102 0000277D 8A35[3B4D0000]      <1> 	mov dh, [RTCtimeMonth]
  3103 00002783 8A15[3A4D0000]      <1> 	mov dl, [RTCtimeDay]
  3104 00002789 E95DFFFFFF          <1> 	jmp backtodos
  3105                              <1> 
  3106                              <1> dosgettime:
  3107 0000278E E8E1230000          <1> 	call time
  3108 00002793 8A2D[394D0000]      <1> 	mov ch, [RTCtimeHour]
  3109 00002799 8A0D[384D0000]      <1> 	mov cl, [RTCtimeMinute]
  3110 0000279F 8A35[374D0000]      <1> 	mov dh, [RTCtimeSecond]
  3111 000027A5 B200                <1> 	mov dl, 0
  3112 000027A7 E93FFFFFFF          <1> 	jmp backtodos
  3113                              <1> 	
  3114                              <1> dosexit:
  3115 000027AC 61                  <1> 	popa
  3116 000027AD 8B25[E6AB0000]      <1> 	mov esp, [previousstack]
  3117 000027B3 31DB                <1> 	xor ebx, ebx
  3118 000027B5 88C3                <1> 	mov bl, al
  3119 000027B7 80FB00              <1> 	cmp bl, 0
  3120 000027BA 0F85D9F4FFFF        <1> 	jne near exitprog.error
  3121 000027C0 C3                  <1> 	ret
  3122                                      %include "source/solleros.asm"
  3123                              <1> 	;SOLLEROS.ASM
  3124                              <1> os:
  3125                              <1> setdefenv:
  3126 000027C1 B02F                <1> 	mov al, '/'
  3127 000027C3 A2[F2AB0000]        <1> 	mov [currentfolder], al
  3128 000027C8 B801000000          <1> 	mov eax, 1
  3129 000027CD A3[EEAB0000]        <1> 	mov [currentfolderloc], eax
  3130 000027D2 E89AF5FFFF          <1> 	call clear
  3131                              <1> 	
  3132                              <1> bootfilecheck:
  3133 000027D7 803D[F6AD0000]01    <1> 	cmp byte [ranboot], 1
  3134 000027DE 0F8425000000        <1> 	je near nobootfile
  3135                              <1> 	%ifdef hardware.automatic
  3136 000027E4 E86A320000          <1> 		call initializelater ;Initialize components that have debug messages
  3137                              <1> 	%endif
  3138 000027E9 BF[8F830000]        <1> 	mov edi, bootfilename
  3139 000027EE BE00004000          <1> 	mov esi, 0x400000
  3140 000027F3 E820360000          <1> 	call loadfile
  3141 000027F8 81FA94010000        <1> 	cmp edx, 404
  3142 000027FE 0F8405000000        <1> 	je near nobootfile
  3143 00002804 E8B00D0000          <1> 	call progbatchfound
  3144                              <1> nobootfile:	
  3145 00002809 C605[F6AD0000]01    <1> 	mov byte [ranboot], 1
  3146                              <1> 
  3147 00002810 BE[00000000]        <1> 	mov esi, signature
  3148                              <1> .sigcopyloop:	;this prevents an odd error
  3149 00002815 658A06              <1> 	mov al, [gs:esi]
  3150 00002818 8806                <1> 	mov [esi], al
  3151 0000281A 46                  <1> 	inc esi
  3152 0000281B 81FE[1A000000]      <1> 	cmp esi, signatureend
  3153 00002821 72F2                <1> 	jb .sigcopyloop
  3154                              <1> 	
  3155 00002823 BE[00000000]        <1> 	mov esi, signature
  3156 00002828 E8DEF4FFFF          <1> 	call print
  3157 0000282D 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3158 00002833 E8F4060000          <1> 	call showdec
  3159 00002838 BE[D0830000]        <1> 	mov esi, line
  3160 0000283D E8C9F4FFFF          <1> 	call print
  3161 00002842 BE[AC830000]        <1> 	mov esi, userask
  3162 00002847 E8BFF4FFFF          <1> 	call print
  3163                              <1> usercheck:
  3164 0000284C BE[66C20000]        <1> 	mov esi, buftxt
  3165 00002851 BF[66C60000]        <1> 	mov edi, buftxtend
  3166 00002856 B00A                <1> 	mov al, 10
  3167 00002858 E896F5FFFF          <1> 	call rdprint
  3168 0000285D 56                  <1> 	push esi
  3169 0000285E BE[B6830000]        <1> 	mov esi, pwdask
  3170 00002863 E8A3F4FFFF          <1> 	call print
  3171 00002868 5E                  <1> 	pop esi
  3172 00002869 46                  <1> 	inc esi
  3173 0000286A 8935[5D290000]      <1> 	mov [esipass], esi
  3174                              <1> passcheck:
  3175 00002870 E855F9FFFF          <1> 	call getchar
  3176 00002875 3C0A                <1> 	cmp al, 10
  3177 00002877 0F8436000000        <1> 	je near gotpass
  3178 0000287D 3C08                <1> 	cmp al, 8
  3179 0000287F 0F8410000000        <1> 	je near backpass
  3180 00002885 8806                <1> 	mov [esi], al
  3181 00002887 46                  <1> 	inc esi
  3182 00002888 B02A                <1> 	mov al, '*'
  3183 0000288A E8A0F9FFFF          <1> 	call prcharint
  3184 0000288F EBDF                <1> 	jmp passcheck
  3185 00002891 08200800            <1> backcursor2 db 8," ",8,0
  3186                              <1> backpass:
  3187 00002895 3B35[5D290000]      <1> 	cmp esi, [esipass]
  3188 0000289B 0F84CFFFFFFF        <1> 	je near passcheck
  3189 000028A1 4E                  <1> 	dec esi
  3190 000028A2 C60600              <1> 	mov byte [esi], 0
  3191 000028A5 56                  <1> 	push esi
  3192 000028A6 BE[91280000]        <1> 	mov esi, backcursor2
  3193 000028AB E85BF4FFFF          <1> 	call print
  3194 000028B0 5E                  <1> 	pop esi
  3195 000028B1 EBBD                <1> 	jmp passcheck
  3196                              <1> gotpass:
  3197 000028B3 B00A                <1> 	mov al, 10
  3198 000028B5 E875F9FFFF          <1> 	call prcharint
  3199 000028BA 30C0                <1> 	xor al, al
  3200 000028BC 31C9                <1> 	xor ecx, ecx
  3201 000028BE 8806                <1> 	mov [esi], al
  3202 000028C0 BB[D2830000]        <1> 	mov ebx, userlst
  3203                              <1> userfind:
  3204 000028C5 BE[66C20000]        <1> 	mov esi, buftxt
  3205 000028CA 8A06                <1> 	mov al, [esi]
  3206 000028CC 3C00                <1> 	cmp al, 0
  3207 000028CE 0F84EDFEFFFF        <1> 	je near os
  3208 000028D4 891D[61290000]      <1> 	mov [usercache], ebx
  3209 000028DA E860030000          <1> 	call tester
  3210 000028DF 3C01                <1> 	cmp al, 1
  3211 000028E1 7416                <1> 	je pwdtest
  3212 000028E3 41                  <1> 	inc ecx
  3213                              <1> nxtuser:
  3214 000028E4 8A03                <1> 	mov al, [ebx]
  3215 000028E6 43                  <1> 	inc ebx
  3216 000028E7 3C00                <1> 	cmp al, 0
  3217 000028E9 75F9                <1> 	jne nxtuser
  3218 000028EB 81FB[F5830000]      <1> 	cmp ebx, userlstend
  3219 000028F1 0F83CAFEFFFF        <1> 	jae near os
  3220 000028F7 EBCC                <1> 	jmp userfind
  3221                              <1> pwdtest:
  3222 000028F9 46                  <1> 	inc esi
  3223 000028FA 43                  <1> 	inc ebx
  3224 000028FB E83F030000          <1> 	call tester
  3225 00002900 3C01                <1> 	cmp al, 1
  3226 00002902 7402                <1> 	je pwdrgt
  3227 00002904 EBDE                <1> 	jmp nxtuser
  3228                              <1> pwdrgt:
  3229 00002906 D1E9                <1> 	shr ecx, 1
  3230 00002908 890D[F2AD0000]      <1> 	mov [uid], ecx
  3231 0000290E E85EF4FFFF          <1> 	call clear
  3232 00002913 31C9                <1> 	xor ecx, ecx
  3233 00002915 41                  <1> 	inc ecx
  3234 00002916 890D[C89E0100]      <1> 	mov [commandbufpos], ecx
  3235                              <1> returnfromexp:
  3236 0000291C 66B90002            <1> 	mov cx, 200h
  3237 00002920 BE[66C20000]        <1> 	mov esi, buftxt
  3238 00002925 8935[3B2C0000]      <1> 	mov [currentcommandloc], esi
  3239 0000292B E825000000          <1> 	call bufclr
  3240                              <1> clearolddata:
  3241 00002930 31C0                <1> 	xor eax, eax
  3242 00002932 A2[F7AD0000]        <1> 	mov [IFON], al
  3243 00002937 A2[F8AD0000]        <1> 	mov [IFTRUE], al
  3244 0000293C A2[60AE0000]        <1> 	mov [BATCHISON], al
  3245 00002941 A3[5CAE0000]        <1> 	mov [BATCHPOS], eax
  3246 00002946 A2[61AE0000]        <1> 	mov [LOOPON], al
  3247 0000294B A3[62AE0000]        <1> 	mov [LOOPPOS], eax
  3248 00002950 E933000000          <1> 	jmp nwcmd
  3249                              <1> bufclr:	
  3250 00002955 30C0                <1> 	xor al, al
  3251 00002957 8806                <1> 	mov [esi], al
  3252 00002959 46                  <1> 	inc esi
  3253 0000295A E2F9                <1> 	loop bufclr
  3254 0000295C C3                  <1> 	ret
  3255                              <1> 
  3256 0000295D 00000000            <1> esipass dd 0
  3257 00002961 [D2830000]          <1> usercache dd userlst
  3258                              <1> 	
  3259                              <1> buftxtclear:
  3260 00002965 30C0                <1> 	xor al, al
  3261 00002967 BE[66C20000]        <1> 	mov esi, buftxt
  3262 0000296C 81FE[66C60000]      <1> clearbuftxt: cmp esi, buf2
  3263 00002972 730E                <1> 	jae retbufclr
  3264 00002974 8806                <1> 	mov [esi], al
  3265 00002976 46                  <1> 	inc esi
  3266 00002977 EBF3                <1> 	jmp clearbuftxt
  3267                              <1> 
  3268 00002979 39DE                <1> clearitbuf: cmp esi, ebx
  3269 0000297B 7305                <1> 	jae retbufclr
  3270 0000297D 8806                <1> 	mov [esi], al
  3271 0000297F 46                  <1> 	inc esi
  3272 00002980 EBF7                <1> 	jmp clearitbuf
  3273 00002982 C3                  <1> retbufclr: ret
  3274                              <1> 
  3275 00002983 E900000000          <1> full:	jmp nwcmd
  3276                              <1> 
  3277                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3278                              <1> nwcmd:
  3279 00002988 FB                  <1> 	sti
  3280 00002989 31C0                <1> 	xor eax, eax
  3281 0000298B 3905[5D2B0000]      <1> 	cmp [nextcommandloc], eax
  3282 00002991 7413                <1> 	je nomultiplecommand
  3283 00002993 8B35[5D2B0000]      <1> 	mov esi, [nextcommandloc]
  3284 00002999 8935[612B0000]      <1> 	mov [thiscommandloc], esi
  3285 0000299F E8C6010000          <1> 	call fixvariables
  3286 000029A4 EBE2                <1> 	jmp nwcmd
  3287                              <1> nomultiplecommand:
  3288 000029A6 A3[612B0000]        <1> 	mov [thiscommandloc], eax
  3289 000029AB 3805[B75F0000]      <1> 	cmp [threadson], al
  3290 000029B1 7405                <1> 	je noclinwcmd
  3291 000029B3 A2[B75F0000]        <1> 	mov [threadson], al
  3292                              <1> noclinwcmd:
  3293 000029B8 B001                <1> 	mov al, 1
  3294 000029BA 3805[60AE0000]      <1> 	cmp [BATCHISON], al
  3295 000029C0 7501                <1> 	jne cancel
  3296 000029C2 C3                  <1> 	ret
  3297 000029C3 30C0                <1> cancel:	xor al, al
  3298 000029C5 A2[F7AD0000]        <1> 	mov [IFON], al
  3299 000029CA A2[60AE0000]        <1> 	mov [BATCHISON], al
  3300 000029CF B05B                <1> 	mov al, '['
  3301 000029D1 66BB0700            <1> 	mov bx, 7
  3302 000029D5 E866F8FFFF          <1> 	call prcharq
  3303 000029DA 8B35[61290000]      <1> 	mov esi, [usercache]
  3304 000029E0 E814F3FFFF          <1> 	call printquiet
  3305 000029E5 BE[C0830000]        <1> 	mov esi, computer
  3306 000029EA E80AF3FFFF          <1> 	call printquiet
  3307 000029EF BE[F2AB0000]        <1> 	mov esi, currentfolder
  3308 000029F4 0335[EAAB0000]      <1> 	add esi, [lastfolderloc]
  3309 000029FA E8FAF2FFFF          <1> 	call printquiet
  3310 000029FF BE[CB830000]        <1> 	mov esi, endprompt
  3311 00002A04 E802F3FFFF          <1> 	call print
  3312 00002A09 E857FFFFFF          <1> 	call buftxtclear
  3313 00002A0E BE[66C20000]        <1> 	mov esi, buftxt
  3314 00002A13 C605[B3210000]01    <1> 	mov byte [commandedit], 1
  3315 00002A1A B00A                <1> 	mov al, 10
  3316 00002A1C 66BB0700            <1> 	mov bx, 7
  3317 00002A20 BF[66C60000]        <1> 	mov edi, buftxtend
  3318 00002A25 E8C9F3FFFF          <1> 	call rdprint
  3319 00002A2A C605[B3210000]00    <1> 	mov byte [commandedit], 0
  3320 00002A31 803D[66C20000]00    <1> 	cmp byte [buftxt], 0
  3321 00002A38 0F844AFFFFFF        <1> 	je near nwcmd
  3322 00002A3E 8B35[C89E0100]      <1> gotcmd:	mov esi, [commandbufpos]
  3323 00002A44 8935[C49E0100]      <1> 	mov [lastcommandpos], esi
  3324 00002A4A FF05[D09E0100]      <1> 	inc dword [commandsentered]
  3325 00002A50 BF[66C20000]        <1> 	mov edi, buftxt
  3326 00002A55 81C6[D49E0100]      <1> 	add esi, commandbuf
  3327 00002A5B 81FE[D4AE0100]      <1> 	cmp esi, commandbufend
  3328 00002A61 7605                <1> 	jbe copycommand
  3329 00002A63 BE[D49E0100]        <1> 	mov esi, commandbuf
  3330                              <1> copycommand:
  3331 00002A68 8A07                <1> 	mov al, [edi]
  3332 00002A6A 8806                <1> 	mov [esi], al
  3333 00002A6C 47                  <1> 	inc edi
  3334 00002A6D 46                  <1> 	inc esi
  3335 00002A6E 3C00                <1> 	cmp al, 0
  3336 00002A70 740F                <1> 	je donecopy
  3337 00002A72 81FE[D4AE0100]      <1> 	cmp esi, commandbufend
  3338 00002A78 76EE                <1> 	jbe copycommand
  3339 00002A7A BE[D49E0100]        <1> 	mov esi, commandbuf
  3340 00002A7F EBE7                <1> 	jmp copycommand
  3341                              <1> donecopy:
  3342 00002A81 81EE[D49E0100]      <1> 	sub esi, commandbuf
  3343 00002A87 8935[C89E0100]      <1> 	mov [commandbufpos], esi
  3344 00002A8D E8D3000000          <1> 	call run
  3345 00002A92 E9F1FEFFFF          <1> 	jmp nwcmd
  3346                              <1> 
  3347 00002A97 E8C9FEFFFF          <1> input:	call buftxtclear
  3348 00002A9C BE[66C20000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3349 00002AA1 BF[66C60000]        <1> 	mov edi, buftxtend
  3350 00002AA6 B00A                <1> stdin:	mov al, 10
  3351 00002AA8 B307                <1> 	mov bl, 7
  3352 00002AAA E844F3FFFF          <1> 	call rdprint
  3353 00002AAF C3                  <1> 	ret
  3354                              <1> 
  3355                              <1> replacevariable:
  3356 00002AB0 8A4601              <1> 	mov al, [esi + 1]
  3357 00002AB3 C64601FF            <1> 	mov byte [esi + 1], 255
  3358 00002AB7 3C24                <1> 	cmp al, "$"
  3359 00002AB9 0F84AB000000        <1> 	je near fixvariables
  3360 00002ABF 884601              <1> 	mov [esi + 1], al
  3361 00002AC2 56                  <1> 	push esi
  3362 00002AC3 81EE[66C20000]      <1> 	sub esi, buftxt
  3363 00002AC9 89F7                <1> 	mov edi, esi
  3364 00002ACB 81C6[66C20000]      <1> 	add esi, buftxt
  3365 00002AD1 47                  <1> 	inc edi
  3366 00002AD2 BB[66AE0000]        <1> 	mov ebx, variables
  3367 00002AD7 E89A130000          <1> 	call nxtvrech
  3368 00002ADC 89F7                <1> 	mov edi, esi
  3369 00002ADE 31DB                <1> 	xor ebx, ebx
  3370 00002AE0 4E                  <1> 	dec esi
  3371                              <1> findvarname:
  3372 00002AE1 4E                  <1> 	dec esi
  3373 00002AE2 8A06                <1> 	mov al, [esi]
  3374 00002AE4 43                  <1> 	inc ebx
  3375 00002AE5 3C04                <1> 	cmp al, 4
  3376 00002AE7 75F8                <1> 	jne findvarname
  3377 00002AE9 5E                  <1> 	pop esi
  3378                              <1> replacevarloop:
  3379 00002AEA 8A07                <1> 	mov al, [edi]
  3380 00002AEC 3C00                <1> 	cmp al, 0
  3381 00002AEE 0F8413000000        <1> 	je near compressbuftxt
  3382 00002AF4 81FB00000000        <1> 	cmp ebx, 0
  3383 00002AFA 0F8416000000        <1> 	je near expandbuftxt
  3384 00002B00 8806                <1> 	mov [esi], al
  3385 00002B02 4B                  <1> 	dec ebx
  3386 00002B03 46                  <1> 	inc esi
  3387 00002B04 47                  <1> 	inc edi
  3388 00002B05 EBE3                <1> 	jmp replacevarloop
  3389                              <1> compressbuftxt:
  3390 00002B07 8A041E              <1> 	mov al, [esi + ebx]
  3391 00002B0A 8806                <1> 	mov [esi], al
  3392 00002B0C 46                  <1> 	inc esi
  3393 00002B0D 3C00                <1> 	cmp al, 0
  3394 00002B0F 75F6                <1> 	jne compressbuftxt
  3395 00002B11 E954000000          <1> 	jmp fixvariables
  3396                              <1> expandbuftxt:
  3397 00002B16 89F1                <1> 	mov ecx, esi
  3398 00002B18 8A26                <1> 	mov ah, [esi]
  3399                              <1> expandbuftxtlp:
  3400 00002B1A 8A1E                <1> 	mov bl, [esi]
  3401 00002B1C 46                  <1> 	inc esi
  3402 00002B1D 8A3E                <1> 	mov bh, [esi]
  3403 00002B1F 8826                <1> 	mov [esi], ah
  3404 00002B21 88FC                <1> 	mov ah, bh
  3405 00002B23 80FB00              <1> 	cmp bl, 0
  3406 00002B26 75F2                <1> 	jne expandbuftxtlp
  3407 00002B28 89CE                <1> 	mov esi, ecx
  3408 00002B2A 8806                <1> 	mov [esi], al
  3409 00002B2C 47                  <1> 	inc edi
  3410 00002B2D 8A07                <1> 	mov al, [edi]
  3411 00002B2F 3C00                <1> 	cmp al, 0
  3412 00002B31 0F8433000000        <1> 	je near fixvariables
  3413 00002B37 46                  <1> 	inc esi
  3414 00002B38 EBDC                <1> 	jmp expandbuftxt
  3415                              <1> multipleprogline:
  3416 00002B3A 30E4                <1> 	xor ah, ah
  3417 00002B3C 8826                <1> 	mov [esi], ah
  3418 00002B3E 46                  <1> 	inc esi
  3419 00002B3F 8935[5D2B0000]      <1> 	mov [nextcommandloc], esi
  3420 00002B45 E93E000000          <1> 	jmp donefixvariables
  3421                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3422 00002B4A 46                  <1> 	inc esi
  3423 00002B4B 8A06                <1> 	mov al, [esi]
  3424 00002B4D C606FF              <1> 	mov byte [esi], 255
  3425 00002B50 3C23                <1> 	cmp al, '#'
  3426 00002B52 7416                <1> 	je fixvariables
  3427 00002B54 4E                  <1> 	dec esi
  3428 00002B55 C60600              <1> 	mov byte [esi], 0
  3429 00002B58 E90D000000          <1> 	jmp fixvariables
  3430                              <1> 	
  3431 00002B5D 00000000            <1> nextcommandloc dd 0
  3432 00002B61 00000000            <1> thiscommandloc dd 0	
  3433                              <1> run:
  3434 00002B65 BE[66C20000]        <1> 	mov esi, buftxt
  3435                              <1> fixvariables:
  3436 00002B6A 46                  <1> 	inc esi
  3437 00002B6B 8A06                <1> 	mov al, [esi]
  3438 00002B6D 3C23                <1> 	cmp al, '#'	;inline comment
  3439 00002B6F 74D9                <1> 	je inlinecomment
  3440 00002B71 3C24                <1> 	cmp al, '$' ;variable
  3441 00002B73 0F8437FFFFFF        <1> 	je near replacevariable
  3442 00002B79 3C3B                <1> 	cmp al, ';' ;program list
  3443 00002B7B 74BD                <1> 	je multipleprogline
  3444 00002B7D 3C00                <1> 	cmp al, 0
  3445 00002B7F 75E9                <1> 	jne fixvariables
  3446 00002B81 31C0                <1> 	xor eax, eax
  3447 00002B83 A3[5D2B0000]        <1> 	mov [nextcommandloc], eax
  3448                              <1> donefixvariables:
  3449 00002B88 803D[26310000]00    <1> 	cmp byte [indexdone], 0
  3450 00002B8F 7505                <1> 	jne progtest
  3451 00002B91 E8FB040000          <1> 	call indexfiles
  3452                              <1> progtest:
  3453 00002B96 31C0                <1> 	xor eax, eax
  3454 00002B98 BB[E6A70000]        <1> 	mov ebx, fileindex
  3455 00002B9D 668B03              <1> prgnxt:	mov ax, [ebx]
  3456 00002BA0 B1FF                <1> 	mov cl, 255
  3457 00002BA2 B52C                <1> 	mov ch, 44
  3458 00002BA4 6639C8              <1> 	cmp ax, cx
  3459 00002BA7 740B                <1> 	je fndprg
  3460 00002BA9 43                  <1> 	inc ebx
  3461 00002BAA 81FB[E6AB0000]      <1> 	cmp ebx, fileindexend
  3462 00002BB0 735D                <1> 	jae prgnf
  3463 00002BB2 EBE9                <1> 	jmp prgnxt
  3464 00002BB4 81C302000000        <1> fndprg: add ebx, 2
  3465 00002BBA 31C9                <1> 	xor ecx, ecx
  3466 00002BBC BE[66C20000]        <1> 	mov esi, buftxt
  3467 00002BC1 390D[612B0000]      <1> 	cmp [thiscommandloc], ecx
  3468 00002BC7 7406                <1> 	je noprgtstmultiple
  3469 00002BC9 8B35[612B0000]      <1> 	mov esi, [thiscommandloc]
  3470                              <1> noprgtstmultiple:
  3471 00002BCF E8A6000000          <1> 	call cndtest
  3472 00002BD4 3C01                <1> 	cmp al, 1
  3473 00002BD6 7302                <1> 	jae prggood
  3474 00002BD8 EBC3                <1> 	jmp prgnxt
  3475 00002BDA 81FB[E6AB0000]      <1> prggood: cmp ebx, fileindexend
  3476 00002BE0 7358                <1> 	jae prgdn
  3477 00002BE2 31C0                <1> 	xor eax, eax
  3478 00002BE4 BE[66C20000]        <1> 	mov esi, buftxt
  3479 00002BE9 3905[612B0000]      <1> 	cmp [thiscommandloc], eax
  3480 00002BEF 7406                <1> 	je noprggoodmul
  3481 00002BF1 8B35[612B0000]      <1> 	mov esi, [thiscommandloc]
  3482                              <1> noprggoodmul:
  3483 00002BF7 8935[3B2C0000]      <1> 	mov [currentcommandloc], esi
  3484 00002BFD 81C303000000        <1> 	add ebx, 3
  3485 00002C03 8B3B                <1> 	mov edi, [ebx]
  3486 00002C05 C605[B75F0000]02    <1> 	mov byte [threadson], 2
  3487 00002C0C FFD7                <1> 	call edi
  3488 00002C0E C3                  <1> 	ret
  3489                              <1> prgnf:	
  3490 00002C0F 8B35[3B2C0000]      <1> 	mov esi, [currentcommandloc]
  3491 00002C15 8A06                <1> 	mov al, [esi]
  3492 00002C17 3C00                <1> 	cmp al, 0
  3493 00002C19 741F                <1> 	je prgdn
  3494 00002C1B BE[97830000]        <1> 	mov esi, notfound1
  3495 00002C20 E8E6F0FFFF          <1> 	call print
  3496 00002C25 8B35[3B2C0000]      <1> 	mov esi, [currentcommandloc]
  3497 00002C2B E8DBF0FFFF          <1> 	call print
  3498 00002C30 BE[9F830000]        <1> 	mov esi, notfound2
  3499 00002C35 E8D1F0FFFF          <1> 	call print
  3500 00002C3A C3                  <1> prgdn:	ret
  3501                              <1> 
  3502 00002C3B 00000000            <1> currentcommandloc dd 0
  3503                              <1> 
  3504                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3505 00002C3F 6631C0              <1> 	xor ax, ax
  3506 00002C42 8A06                <1> retest:	mov al, [esi]
  3507 00002C44 8A23                <1> 	mov ah, [ebx]
  3508 00002C46 3C00                <1> 	cmp al, 0
  3509 00002C48 7408                <1> 	je testtrue
  3510 00002C4A 38E0                <1> 	cmp al, ah
  3511 00002C4C 750C                <1> 	jne testfalse
  3512 00002C4E 43                  <1> 	inc ebx
  3513 00002C4F 46                  <1> 	inc esi
  3514 00002C50 EBF0                <1> 	jmp retest
  3515                              <1> testtrue:
  3516 00002C52 80FC00              <1> 	cmp ah, 0
  3517 00002C55 7503                <1> 	jne testfalse
  3518 00002C57 B001                <1> 	mov al, 1
  3519 00002C59 C3                  <1> 	ret
  3520                              <1> testfalse:
  3521 00002C5A 30C0                <1> 	xor al, al
  3522 00002C5C C3                  <1> 	ret
  3523                              <1> 
  3524                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3525 00002C5D 30C0                <1> 	xor al, al
  3526                              <1> opretest:
  3527 00002C5F 8A06                <1> 	mov al, [esi]
  3528 00002C61 8A23                <1> 	mov ah, [ebx]
  3529 00002C63 38E0                <1> 	cmp al, ah
  3530 00002C65 7510                <1> 	jne optestfalse
  3531 00002C67 80FC00              <1> 	cmp ah, 0
  3532 00002C6A 7404                <1> 	je optesttrue
  3533 00002C6C 43                  <1> 	inc ebx
  3534 00002C6D 46                  <1> 	inc esi
  3535 00002C6E EBEF                <1> 	jmp opretest
  3536                              <1> optesttrue:
  3537 00002C70 3C00                <1> 	cmp al, 0
  3538 00002C72 7503                <1> 	jne optestfalse
  3539 00002C74 B001                <1> 	mov al, 1
  3540 00002C76 C3                  <1> 	ret
  3541                              <1> optestfalse:
  3542 00002C77 30C0                <1> 	xor al, al
  3543 00002C79 C3                  <1> 	ret
  3544                              <1> 
  3545                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3546 00002C7A 30C0                <1> 	xor al, al
  3547 00002C7C 8A06                <1> cndretest:	mov al, [esi]
  3548 00002C7E 8A23                <1> 	mov ah, [ebx]
  3549 00002C80 38CC                <1> 	cmp ah, cl
  3550 00002C82 7408                <1> 	je cndtesttrue
  3551 00002C84 38E0                <1> 	cmp al, ah
  3552 00002C86 750B                <1> 	jne cndtestfalse
  3553 00002C88 43                  <1> 	inc ebx
  3554 00002C89 46                  <1> 	inc esi
  3555 00002C8A EBF0                <1> 	jmp cndretest
  3556                              <1> cndtesttrue:
  3557 00002C8C 38C8                <1> 	cmp al, cl
  3558 00002C8E 7506                <1> 	jne cndtestalmost
  3559 00002C90 B001                <1> 	mov al, 1
  3560 00002C92 C3                  <1> 	ret
  3561                              <1> cndtestfalse:
  3562 00002C93 30C0                <1> 	xor al, al
  3563 00002C95 C3                  <1> 	ret
  3564                              <1> cndtestalmost:
  3565 00002C96 B002                <1> 	mov al, 2
  3566 00002C98 C3                  <1> 	ret
  3567                              <1> 	
  3568                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3569                              <1> 		                ;ends if array seperator is found backwards after 0
  3570                              <1> 	arnxt:	      
  3571 00002C99 88E8                <1> 		mov al, ch
  3572 00002C9B 88CC                <1> 		mov ah, cl        
  3573 00002C9D 663906              <1> 		cmp [esi], ax
  3574 00002CA0 744D                <1> 		je ardn
  3575 00002CA2 66390E              <1> 		cmp [esi], cx
  3576 00002CA5 7407                <1> 		je arfnd
  3577 00002CA7 46                  <1> 		inc esi
  3578 00002CA8 39DE                <1> 		cmp esi, ebx
  3579 00002CAA 7343                <1> 		jae ardn
  3580 00002CAC EBEB                <1> 		jmp arnxt
  3581 00002CAE 81C602000000        <1> 	arfnd: add esi, 2
  3582 00002CB4 891D[F02C0000]      <1> 		mov [arbx], ebx
  3583 00002CBA 890D[F42C0000]      <1> 		mov [arcx], ecx
  3584 00002CC0 E846F0FFFF          <1> 		call print
  3585 00002CC5 8935[F62C0000]      <1> 		mov [arsi], esi
  3586 00002CCB BE[D0830000]        <1> 		mov esi, line
  3587 00002CD0 E836F0FFFF          <1> 		call print
  3588 00002CD5 8B1D[F02C0000]      <1> 		mov ebx, [arbx]
  3589 00002CDB 668B0D[F42C0000]    <1> 		mov cx, [arcx]
  3590 00002CE2 8B35[F62C0000]      <1> 		mov esi, [arsi]
  3591 00002CE8 46                  <1> 		inc esi
  3592 00002CE9 39DE                <1> 		cmp esi, ebx
  3593 00002CEB 7302                <1> 		jae ardn
  3594 00002CED EBAA                <1> 		jmp arnxt
  3595 00002CEF C3                  <1> 	ardn:	ret
  3596 00002CF0 00000000            <1> arbx:	dw 0,0
  3597 00002CF4 0000                <1> arcx:	db 0,0
  3598 00002CF6 00000000            <1> arsi:	dw 0,0
  3599                              <1> 
  3600                              <1> clearbuffer:
  3601 00002CFA BE[66C60000]        <1> 	mov esi, buf2
  3602 00002CFF B030                <1> 	mov al, '0'
  3603 00002D01 81FE[7AC60000]      <1> clearbuf: cmp esi, numbuf
  3604 00002D07 7305                <1> 	jae doneclearbuff
  3605 00002D09 8806                <1> 	mov [esi], al
  3606 00002D0B 46                  <1> 	inc esi
  3607 00002D0C EBF3                <1> 	jmp clearbuf
  3608                              <1> doneclearbuff: 
  3609 00002D0E C3                  <1> 		ret
  3610                              <1> 
  3611                              <1> convert:
  3612 00002D0F 4E                  <1> 	dec esi
  3613 00002D10 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3614                              <1> .lp:
  3615 00002D12 89DE                <1> 	mov esi, ebx
  3616 00002D14 81EE09000000        <1> 	sub esi, 9
  3617 00002D1A 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3618 00002D20 720A                <1> 	jb .8
  3619 00002D22 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3620 00002D28 FE06                <1> 	inc byte [esi]
  3621 00002D2A EBE6                <1> 	jmp .lp
  3622 00002D2C 46                  <1> .8:	inc esi
  3623 00002D2D 81F900E1F505        <1> 	cmp ecx, 100000000
  3624 00002D33 720A                <1> 	jb .7
  3625 00002D35 81E900E1F505        <1> 	sub ecx, 100000000
  3626 00002D3B FE06                <1> 	inc byte [esi]
  3627 00002D3D EBD3                <1> 	jmp .lp
  3628 00002D3F 46                  <1> .7:	inc esi
  3629 00002D40 81F980969800        <1> 	cmp ecx, 10000000
  3630 00002D46 720A                <1> 	jb .6
  3631 00002D48 81E980969800        <1> 	sub ecx, 10000000
  3632 00002D4E FE06                <1> 	inc byte [esi]
  3633 00002D50 EBC0                <1> 	jmp .lp
  3634 00002D52 46                  <1> .6:	inc esi
  3635 00002D53 81F940420F00        <1> 	cmp ecx, 1000000
  3636 00002D59 720A                <1> 	jb .5
  3637 00002D5B 81E940420F00        <1> 	sub ecx, 1000000
  3638 00002D61 FE06                <1> 	inc byte [esi]
  3639 00002D63 EBAD                <1> 	jmp .lp
  3640 00002D65 46                  <1> .5:	inc esi
  3641 00002D66 81F9A0860100        <1> 	cmp ecx, 100000
  3642 00002D6C 720A                <1> 	jb .4
  3643 00002D6E 81E9A0860100        <1> 	sub ecx, 100000
  3644 00002D74 FE06                <1> 	inc byte [esi]
  3645 00002D76 EB9A                <1> 	jmp .lp
  3646 00002D78 46                  <1> .4:	inc esi
  3647 00002D79 81F910270000        <1> 	cmp ecx, 10000
  3648 00002D7F 720A                <1> 	jb .3
  3649 00002D81 81E910270000        <1> 	sub ecx, 10000
  3650 00002D87 FE06                <1> 	inc byte [esi]
  3651 00002D89 EB87                <1> 	jmp .lp
  3652 00002D8B 46                  <1> .3:	inc esi
  3653 00002D8C 81F9E8030000        <1> 	cmp ecx, 1000
  3654 00002D92 720D                <1> 	jb .2
  3655 00002D94 81E9E8030000        <1> 	sub ecx, 1000
  3656 00002D9A FE06                <1> 	inc byte [esi]
  3657 00002D9C E971FFFFFF          <1> 	jmp .lp
  3658 00002DA1 46                  <1> .2:	inc esi
  3659 00002DA2 81F964000000        <1> 	cmp ecx, 100
  3660 00002DA8 720D                <1> 	jb .1
  3661 00002DAA 81E964000000        <1> 	sub ecx, 100
  3662 00002DB0 FE06                <1> 	inc byte [esi]
  3663 00002DB2 E95BFFFFFF          <1> 	jmp .lp
  3664 00002DB7 46                  <1> .1:	inc esi
  3665 00002DB8 81F90A000000        <1> 	cmp ecx, 10
  3666 00002DBE 720D                <1> 	jb .0
  3667 00002DC0 81E90A000000        <1> 	sub ecx, 10
  3668 00002DC6 FE06                <1> 	inc byte [esi]
  3669 00002DC8 E945FFFFFF          <1> 	jmp .lp
  3670 00002DCD 46                  <1> .0:	inc esi
  3671 00002DCE 81F901000000        <1> 	cmp ecx, 1
  3672 00002DD4 720D                <1> 	jb .dn
  3673 00002DD6 81E901000000        <1> 	sub ecx, 1
  3674 00002DDC FE06                <1> 	inc byte [esi]
  3675 00002DDE E92FFFFFFF          <1> 	jmp .lp
  3676                              <1> .dn:
  3677 00002DE3 C3                  <1> 	ret
  3678                              <1> 
  3679                              <1> 	
  3680                              <1> 
  3681 00002DE4 00<rept>            <1> hexnumber times 8 db 0
  3682 00002DEC 202000              <1> hexnumberend db "  ",0
  3683                              <1> 
  3684                              <1> converthex:
  3685                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3686 00002DEF 56                  <1> 	push esi
  3687 00002DF0 B030                <1> 	mov al, "0"
  3688 00002DF2 39FE                <1> .clearlp: cmp esi, edi
  3689 00002DF4 7305                <1> 	jae .doneclear
  3690 00002DF6 8806                <1> 	mov [esi], al
  3691 00002DF8 46                  <1> 	inc esi
  3692 00002DF9 EBF7                <1> 	jmp .clearlp
  3693                              <1> .doneclear:
  3694 00002DFB 81EE02000000        <1> 	sub esi, 2
  3695 00002E01 89C8                <1> 	mov eax, ecx
  3696                              <1> .loop:
  3697 00002E03 30FF                <1> 	xor bh, bh
  3698 00002E05 88C3                <1> 	mov bl, al
  3699 00002E07 66C1E304            <1> 	shl bx, 4
  3700 00002E0B C0EB04              <1> 	shr bl, 4
  3701 00002E0E 86DF                <1> 	xchg bl, bh ;they are backwards
  3702 00002E10 80C330              <1> 	add bl, 48
  3703 00002E13 80FB39              <1> 	cmp bl, "9"
  3704 00002E16 7609                <1> 	jbe .goodbl
  3705 00002E18 80EB30              <1> 	sub bl, 48
  3706 00002E1B 80EB0A              <1> 	sub bl, 0xA
  3707 00002E1E 80C341              <1> 	add bl, "A"
  3708                              <1> .goodbl:
  3709 00002E21 80C730              <1> 	add bh, 48
  3710 00002E24 80FF39              <1> 	cmp bh, "9"
  3711 00002E27 7609                <1> 	jbe .goodbh
  3712 00002E29 80EF30              <1> 	sub bh, 48
  3713 00002E2C 80EF0A              <1> 	sub bh, 0xA
  3714 00002E2F 80C741              <1> 	add bh, "A"
  3715                              <1> .goodbh:
  3716 00002E32 C1E808              <1> 	shr eax, 8
  3717 00002E35 66891E              <1> 	mov [esi], bx
  3718 00002E38 81EE02000000        <1> 	sub esi, 2
  3719 00002E3E 3B3424              <1> 	cmp esi, [esp]
  3720 00002E41 7207                <1> 	jb .done
  3721 00002E43 3D00000000          <1> 	cmp eax, 0
  3722 00002E48 75B9                <1> 	jne .loop
  3723                              <1> .done:
  3724 00002E4A 5E                  <1> 	pop esi
  3725 00002E4B C3                  <1> 	ret
  3726                              <1> 	
  3727                              <1> 	
  3728 00002E4C 00                  <1> smallhex db 0
  3729 00002E4D 01                  <1> firsthexshown db 1
  3730                              <1> showhexsmall:
  3731 00002E4E C605[4C2E0000]01    <1> 	mov byte [smallhex], 1
  3732 00002E55 E808000000          <1> 	call showhex
  3733 00002E5A C605[4C2E0000]00    <1> 	mov byte [smallhex], 0
  3734 00002E61 C3                  <1> 	ret
  3735                              <1> showhex:
  3736 00002E62 60                  <1> 	pusha
  3737 00002E63 BE[E42D0000]        <1> 	mov esi, hexnumber
  3738 00002E68 BF[EC2D0000]        <1> 	mov edi, hexnumberend
  3739 00002E6D E87DFFFFFF          <1> 	call converthex
  3740 00002E72 803D[4D2E0000]01    <1> 	cmp byte [firsthexshown], 1
  3741 00002E79 7503                <1> 	jne .show
  3742 00002E7B 6631D2              <1> 	xor dx, dx
  3743                              <1> .show:
  3744 00002E7E 803D[4D2E0000]03    <1> 	cmp byte [firsthexshown], 3
  3745 00002E85 750A                <1> 	jne .nonewhexline
  3746 00002E87 BE[D0830000]        <1> 	mov esi, line
  3747 00002E8C E87AEEFFFF          <1> 	call print
  3748                              <1> .nonewhexline:
  3749 00002E91 803D[4D2E0000]04    <1> 	cmp byte [firsthexshown], 4
  3750 00002E98 7527                <1> 	jne .notab
  3751 00002E9A B1A0                <1> 	mov cl, 160
  3752 00002E9C 28D1                <1> 	sub cl, dl
  3753 00002E9E C0E905              <1> 	shr cl, 5
  3754 00002EA1 C0E105              <1> 	shl cl, 5
  3755 00002EA4 80F900              <1> 	cmp cl, 0
  3756 00002EA7 750F                <1> 	jne .nonewline
  3757 00002EA9 BE[D0830000]        <1> 	mov esi, line
  3758 00002EAE E858EEFFFF          <1> 	call print
  3759 00002EB3 E909000000          <1> 	jmp .notab
  3760                              <1> .nonewline:
  3761 00002EB8 80C20F              <1> 	add dl, 15
  3762 00002EBB C0EA04              <1> 	shr dl, 4
  3763 00002EBE C0E204              <1> 	shl dl, 4
  3764                              <1> .notab:
  3765 00002EC1 BE[E42D0000]        <1> 	mov esi, hexnumber
  3766 00002EC6 803D[4C2E0000]01    <1> 	cmp byte [smallhex],1
  3767 00002ECD 7506                <1> 	jne .nosmall
  3768 00002ECF 81C606000000        <1> 	add esi, 6
  3769                              <1> .nosmall:
  3770 00002ED5 803D[4D2E0000]05    <1> 	cmp byte [firsthexshown], 5
  3771 00002EDC 750A                <1> 	jne .noquiet
  3772 00002EDE E816EEFFFF          <1> 	call printquiet
  3773 00002EE3 E918000000          <1> 	jmp .donequiet
  3774                              <1> .noquiet:
  3775 00002EE8 803D[4D2E0000]06    <1> 	cmp byte [firsthexshown], 6
  3776 00002EEF 750A                <1> 	jne .normal
  3777 00002EF1 E8F7EDFFFF          <1> 	call printhighlight
  3778 00002EF6 E905000000          <1> 	jmp .donequiet
  3779                              <1> .normal:
  3780 00002EFB E80BEEFFFF          <1> 	call print
  3781                              <1> .donequiet:
  3782 00002F00 803D[4D2E0000]02    <1> 	cmp byte [firsthexshown], 2
  3783 00002F07 750A                <1> 	jne .shown
  3784 00002F09 BE[D0830000]        <1> 	mov esi, line
  3785 00002F0E E8F8EDFFFF          <1> 	call print
  3786                              <1> .shown:
  3787 00002F13 C605[4D2E0000]00    <1> 	mov byte [firsthexshown], 0
  3788 00002F1A 61                  <1> 	popa
  3789 00002F1B C3                  <1> 	ret
  3790                              <1> 
  3791                              <1> 
  3792 00002F1C 303030303030303030- <1> decnumber db "00000000000000"
  3793 00002F25 3030303030          <1>
  3794 00002F2A 2000                <1> decnumberend: db " ",0
  3795                              <1> 
  3796                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3797 00002F2C 60                  <1> 	pusha
  3798 00002F2D BF[1C2F0000]        <1> 	mov edi, decnumber
  3799 00002F32 BE[2A2F0000]        <1> 	mov esi, decnumberend
  3800                              <1> .clear:
  3801 00002F37 C60730              <1> 	mov byte [edi], '0'
  3802 00002F3A 47                  <1> 	inc edi
  3803 00002F3B 39F7                <1> 	cmp edi, esi
  3804 00002F3D 72F8                <1> 	jb .clear
  3805 00002F3F BF[1C2F0000]        <1> 	mov edi, decnumber
  3806 00002F44 E8C6FDFFFF          <1> 	call convert
  3807 00002F49 803D[4D2E0000]01    <1> 	cmp byte [firsthexshown], 1
  3808 00002F50 7503                <1> 	jne .show
  3809 00002F52 6631D2              <1> 	xor dx, dx
  3810                              <1> .show:
  3811 00002F55 803D[4D2E0000]03    <1> 	cmp byte [firsthexshown], 3
  3812 00002F5C 750A                <1> 	jne .nonewdecline
  3813 00002F5E BE[D0830000]        <1> 	mov esi, line
  3814 00002F63 E8A3EDFFFF          <1> 	call print
  3815                              <1> .nonewdecline:
  3816 00002F68 803D[4D2E0000]04    <1> 	cmp byte [firsthexshown], 4
  3817 00002F6F 7527                <1> 	jne .notab
  3818 00002F71 B1A0                <1> 	mov cl, 160
  3819 00002F73 28D1                <1> 	sub cl, dl
  3820 00002F75 C0E905              <1> 	shr cl, 5
  3821 00002F78 C0E105              <1> 	shl cl, 5
  3822 00002F7B 80F900              <1> 	cmp cl, 0
  3823 00002F7E 750F                <1> 	jne .nonewline
  3824 00002F80 BE[D0830000]        <1> 	mov esi, line
  3825 00002F85 E881EDFFFF          <1> 	call print
  3826 00002F8A E909000000          <1> 	jmp .notab
  3827                              <1> .nonewline:
  3828 00002F8F 80C20F              <1> 	add dl, 15
  3829 00002F92 C0EA04              <1> 	shr dl, 4
  3830 00002F95 C0E204              <1> 	shl dl, 4
  3831                              <1> .notab:
  3832 00002F98 BE[1C2F0000]        <1> 	mov esi, decnumber
  3833 00002F9D 4E                  <1> 	dec esi
  3834                              <1> .sifind:
  3835 00002F9E 46                  <1> 	inc esi
  3836 00002F9F 803E30              <1> 	cmp byte [esi], '0'
  3837 00002FA2 74FA                <1> 	je .sifind
  3838 00002FA4 E862EDFFFF          <1> 	call print
  3839 00002FA9 803D[4D2E0000]02    <1> 	cmp byte [firsthexshown], 2
  3840 00002FB0 750A                <1> 	jne .shown
  3841 00002FB2 BE[D0830000]        <1> 	mov esi, line
  3842 00002FB7 E84FEDFFFF          <1> 	call print
  3843                              <1> .shown:
  3844 00002FBC C605[4D2E0000]00    <1> 	mov byte [firsthexshown], 0
  3845 00002FC3 61                  <1> 	popa
  3846 00002FC4 C3                  <1> 	ret
  3847                              <1> 	
  3848                              <1> cnvrthextxt:
  3849 00002FC5 31C9                <1> 	xor ecx, ecx
  3850 00002FC7 31C0                <1> 	xor eax, eax
  3851 00002FC9 31D2                <1> 	xor edx, edx
  3852 00002FCB 31DB                <1> 	xor ebx, ebx
  3853 00002FCD 4E                  <1> 	dec esi
  3854                              <1> .end:
  3855 00002FCE 46                  <1> 	inc esi
  3856 00002FCF 8A06                <1> 	mov al, [esi]
  3857 00002FD1 3C00                <1> 	cmp al, 0
  3858 00002FD3 75F9                <1> 	jne .end
  3859                              <1> .loop:
  3860 00002FD5 4E                  <1> 	dec esi
  3861 00002FD6 8A06                <1> 	mov al, [esi]
  3862 00002FD8 3C41                <1> 	cmp al, "A"
  3863 00002FDA 7328                <1> 	jae .char
  3864 00002FDC 2C30                <1> 	sub al, 48
  3865 00002FDE 3C10                <1> 	cmp al, 16
  3866 00002FE0 7721                <1> 	ja .done
  3867                              <1> .donechar:
  3868 00002FE2 81FA00000000        <1> 	cmp edx, 0
  3869 00002FE8 740E                <1> 	je .noshl
  3870 00002FEA 89D3                <1> 	mov ebx, edx
  3871                              <1> .shl:
  3872 00002FEC C1E004              <1> 	shl eax, 4
  3873 00002FEF 4B                  <1> 	dec ebx
  3874 00002FF0 81FB00000000        <1> 	cmp ebx, 0
  3875 00002FF6 75F4                <1> 	jne .shl
  3876                              <1> .noshl:
  3877 00002FF8 42                  <1> 	inc edx
  3878 00002FF9 01C1                <1> 	add ecx, eax
  3879 00002FFB 81FA08000000        <1> 	cmp edx, 8
  3880 00003001 72D2                <1> 	jb .loop
  3881                              <1> .done:
  3882 00003003 C3                  <1> 	ret
  3883                              <1> .char:
  3884 00003004 3C46                <1> 	cmp al, "F"
  3885 00003006 77FB                <1> 	ja .done
  3886 00003008 2C41                <1> 	sub al, "A"
  3887 0000300A 040A                <1> 	add al, 0xA
  3888 0000300C EBD4                <1> 	jmp .donechar
  3889                              <1> 	
  3890                              <1> 	
  3891                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3892 0000300E 31C9                <1> 	xor ecx, ecx
  3893 00003010 31C0                <1> 	xor eax, eax
  3894 00003012 31D2                <1> 	xor edx, edx
  3895 00003014 31DB                <1> 	xor ebx, ebx
  3896 00003016 4E                  <1> 	dec esi
  3897                              <1> .lp:
  3898 00003017 46                  <1> 	inc esi
  3899 00003018 8A06                <1> 	mov al, [esi]
  3900 0000301A 3C00                <1> 	cmp al, 0
  3901 0000301C 75F9                <1> 	jne .lp
  3902 0000301E 4E                  <1> 	dec esi
  3903 0000301F 8A06                <1> 	mov al, [esi]
  3904 00003021 3C2E                <1> 	cmp al, '.'
  3905 00003023 7503                <1> 	jne .dot
  3906 00003025 46                  <1> 	inc esi
  3907 00003026 EBEF                <1> 	jmp .lp
  3908                              <1> .dot:
  3909 00003028 3C20                <1> 	cmp al, ' '
  3910 0000302A 7404                <1> 	je .zero
  3911 0000302C 3C30                <1> 	cmp al, '0'
  3912 0000302E 7504                <1> 	jne .txtlp
  3913                              <1> .zero: 
  3914 00003030 39FE                <1> 		cmp esi, edi
  3915 00003032 7458                <1> 		je .done
  3916                              <1> .txtlp:
  3917 00003034 31C0                <1> 	xor eax, eax
  3918 00003036 8A06                <1> 	mov al, [esi]
  3919 00003038 3C3D                <1> 	cmp al, '='
  3920 0000303A 7450                <1> 	je .done
  3921 0000303C 3C30                <1> 	cmp al, 48
  3922 0000303E 724C                <1> 	jb .done
  3923 00003040 3C23                <1> 	cmp al, '#'
  3924 00003042 7448                <1> 	je .done
  3925 00003044 39FE                <1> 	cmp esi, edi
  3926 00003046 7244                <1> 	jb .done
  3927 00003048 81F900000000        <1> 	cmp ecx, 0
  3928 0000304E 7708                <1> 	ja .exp
  3929 00003050 2C30                <1> .noexp:	sub al, 48
  3930 00003052 01C2                <1> 	add edx, eax
  3931 00003054 4E                  <1> 	dec esi
  3932 00003055 41                  <1> 	inc ecx
  3933 00003056 EBDC                <1> 	jmp .txtlp
  3934 00003058 81F900000000        <1> .exp:	cmp ecx, 0
  3935 0000305E 74F0                <1> 	je .noexp
  3936 00003060 2C30                <1> 	sub al, 48
  3937 00003062 51                  <1> 	push ecx
  3938 00003063 89C3                <1> .expmul:	mov ebx, eax
  3939 00003065 01D8                <1> 	add eax, ebx
  3940 00003067 01D8                <1> 	add eax, ebx
  3941 00003069 01D8                <1> 	add eax, ebx
  3942 0000306B 01D8                <1> 	add eax, ebx
  3943 0000306D 01D8                <1> 	add eax, ebx
  3944 0000306F 01D8                <1> 	add eax, ebx
  3945 00003071 01D8                <1> 	add eax, ebx
  3946 00003073 01D8                <1> 	add eax, ebx
  3947 00003075 01D8                <1> 	add eax, ebx
  3948 00003077 81E901000000        <1> 	sub ecx, 1
  3949 0000307D 81F900000000        <1> 	cmp ecx, 0
  3950 00003083 77DE                <1> 	ja .expmul
  3951 00003085 01C2                <1> 	add edx, eax
  3952 00003087 59                  <1> 	pop ecx
  3953 00003088 4E                  <1> 	dec esi
  3954 00003089 41                  <1> 	inc ecx
  3955 0000308A EBA8                <1> 	jmp .txtlp
  3956 0000308C 89D1                <1> .done: mov ecx, edx
  3957 0000308E C3                  <1> 	ret
  3958                                      %include "source/programs.asm"
  3959 0000308F FF2C                <1> filetypes db 255,44
  3960                              <1> progstart:		;programs start here
  3961                              <1> indexfiles:
  3962 00003091 BE[91300000]        <1> 	mov esi, progstart
  3963 00003096 BB[E6A70000]        <1> 	mov ebx, fileindex
  3964 0000309B BF[91300000]        <1> 	mov edi, progstart
  3965 000030A0 81EF02000000        <1> 	sub edi, 2
  3966                              <1> indexloop:
  3967 000030A6 668B0E              <1> 	mov cx, [esi]
  3968                              <1> 	indexloop2:
  3969 000030A9 663B0F              <1> 		cmp cx, [edi]
  3970 000030AC 7424                <1> 		je indexloop2done
  3971 000030AE 81EF02000000        <1> 		sub edi, 2
  3972 000030B4 81FF[8F300000]      <1> 		cmp edi, filetypes
  3973 000030BA 73ED                <1> 		jae indexloop2
  3974 000030BC BF[91300000]        <1> 	mov edi, progstart
  3975 000030C1 81EF02000000        <1> 	sub edi, 2
  3976 000030C7 46                  <1> 	inc esi
  3977 000030C8 81FE[7E4E0000]      <1> 	cmp esi, batchprogend
  3978 000030CE 734E                <1> 	jae indexloopdone
  3979 000030D0 EBD4                <1> 	jmp indexloop
  3980                              <1> indexloop2done:
  3981 000030D2 66890B              <1> 	mov [ebx], cx
  3982 000030D5 81C302000000        <1> 	add ebx, 2
  3983 000030DB 81C602000000        <1> 	add esi, 2
  3984                              <1> 	nameindex:
  3985 000030E1 8A0E                <1> 		mov cl, [esi]
  3986 000030E3 80F900              <1> 		cmp cl, 0
  3987 000030E6 7406                <1> 		je nameindexdone
  3988 000030E8 880B                <1> 		mov [ebx], cl
  3989 000030EA 46                  <1> 		inc esi
  3990 000030EB 43                  <1> 		inc ebx
  3991 000030EC EBF3                <1> 		jmp nameindex
  3992                              <1> 	nameindexdone:
  3993 000030EE 43                  <1> 		inc ebx
  3994 000030EF 66C7030000          <1> 		mov word [ebx], 0
  3995 000030F4 81C302000000        <1> 		add ebx, 2
  3996 000030FA 46                  <1> 		inc esi
  3997 000030FB 8933                <1> 		mov [ebx], esi
  3998 000030FD 81C304000000        <1> 		add ebx, 4
  3999 00003103 66C7030000          <1> 		mov word [ebx], 0
  4000 00003108 81C302000000        <1> 		add ebx, 2
  4001 0000310E 81FB[E6AB0000]      <1> 		cmp ebx, fileindexend
  4002 00003114 7308                <1> 		jae indexloopdone
  4003 00003116 81C601000000        <1> 		add esi, 1
  4004 0000311C EB88                <1> 		jmp indexloop
  4005 0000311E C605[26310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4006 00003125 C3                  <1> 		ret
  4007 00003126 00                  <1> indexdone db 0
  4008                              <1> %include 'source/programs/_comment.asm' ;#
  4009 00003127 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4010 0000312B C3                  <2> 	ret 
  4011                              <1> %include 'source/programs/_math.asm' ;!
  4012 0000312C FF2C2100            <2> db 255,44,"!",0
  4013                              <2> 	num:	
  4014 00003130 E8C5FBFFFF          <2> 		call clearbuffer
  4015 00003135 C605[B6330000]00    <2> 		mov byte [decimal], 0
  4016 0000313C C605[B7330000]00    <2> 		mov byte [decimal2], 0
  4017 00003143 8B35[3B2C0000]      <2> 		mov esi, [currentcommandloc]
  4018 00003149 31C0                <2> 		xor eax, eax
  4019 0000314B 31C9                <2> 		xor ecx, ecx
  4020 0000314D 31DB                <2> 		xor ebx, ebx
  4021 0000314F 8A06                <2> 	num2:	mov al, [esi]
  4022 00003151 3C2B                <2> 		cmp al, '+'
  4023 00003153 741B                <2> 		je operatorfound
  4024 00003155 3C2D                <2> 		cmp al, '-'
  4025 00003157 7417                <2> 		je operatorfound
  4026 00003159 3C2A                <2> 		cmp al, '*'
  4027 0000315B 7413                <2> 		je operatorfound
  4028 0000315D 3C2F                <2> 		cmp al, '/'
  4029 0000315F 740F                <2> 		je operatorfound
  4030 00003161 3C5E                <2> 		cmp al, '^'
  4031 00003163 740B                <2> 		je operatorfound
  4032 00003165 46                  <2> 		inc esi
  4033 00003166 3C00                <2> 		cmp al, 0
  4034 00003168 0F841AF8FFFF        <2> 		je near nwcmd
  4035 0000316E EBDF                <2> 		jmp num2
  4036 00003170 50                  <2> 	operatorfound: push eax
  4037 00003171 30E4                <2> 		xor ah, ah
  4038 00003173 8826                <2> 		mov [esi], ah
  4039 00003175 89F7                <2> 		mov edi, esi
  4040 00003177 46                  <2> 		inc esi
  4041 00003178 8A06                <2> 		mov al, [esi]
  4042 0000317A 3C25                <2> 		cmp al, '%'
  4043 0000317C 0F8462000000        <2> 		je near resultnum1
  4044                              <2> 	varnum2: 
  4045 00003182 57                  <2> 		push edi
  4046 00003183 E8A4000000          <2> 		call checkdecimal
  4047 00003188 5F                  <2> 		pop edi
  4048 00003189 E880FEFFFF          <2> 		call cnvrttxt
  4049                              <2> 	vrnm2:
  4050 0000318E 89CB                <2> 		mov ebx, ecx
  4051 00003190 53                  <2> 		push ebx
  4052 00003191 E864FBFFFF          <2> 		call clearbuffer
  4053 00003196 8B35[3B2C0000]      <2> 		mov esi, [currentcommandloc]
  4054 0000319C 89F7                <2> 		mov edi, esi
  4055 0000319E 46                  <2> 		inc esi
  4056 0000319F 8A06                <2> 		mov al, [esi]
  4057 000031A1 3C25                <2> 		cmp al, '%'
  4058 000031A3 0F844F000000        <2> 		je near resultnum2
  4059                              <2> 	varnum4: 
  4060 000031A9 57                  <2> 		push edi
  4061 000031AA E869000000          <2> 		call checkdecimal2
  4062 000031AF 5F                  <2> 		pop edi
  4063 000031B0 E859FEFFFF          <2> 		call cnvrttxt
  4064                              <2> 	vrnm4:
  4065 000031B5 5B                  <2> 		pop ebx
  4066 000031B6 58                  <2> 		pop eax
  4067 000031B7 3C2B                <2> 		cmp al, '+'
  4068 000031B9 0F849B000000        <2> 		je near plusnum
  4069 000031BF 3C2D                <2> 		cmp al, '-'
  4070 000031C1 0F849F000000        <2> 		je near subnum
  4071 000031C7 3C2A                <2> 		cmp al, '*'
  4072 000031C9 0F84A3000000        <2> 		je near mulnum
  4073 000031CF 3C2F                <2> 		cmp al, '/'
  4074 000031D1 0F84B1000000        <2> 		je near divnum
  4075 000031D7 3C5E                <2> 		cmp al, '^'
  4076 000031D9 0F84CE000000        <2> 		je near expnum
  4077 000031DF E9A4F7FFFF          <2> 		jmp nwcmd
  4078                              <2> 	resultnum1:
  4079 000031E4 8A0D[B8330000]      <2> 		mov cl, [decimalresult]
  4080 000031EA 880D[B6330000]      <2> 		mov [decimal], cl
  4081 000031F0 8B0D[B9330000]      <2> 		mov ecx, [result]
  4082 000031F6 EB96                <2> 		jmp vrnm2
  4083                              <2> 	resultnum2:
  4084 000031F8 8A0D[B6330000]      <2> 		mov cl, [decimal]
  4085 000031FE 880D[B7330000]      <2> 		mov [decimal2], cl
  4086 00003204 8A0D[B8330000]      <2> 		mov cl, [decimalresult]
  4087 0000320A 880D[B6330000]      <2> 		mov [decimal], cl
  4088 00003210 8B0D[B9330000]      <2> 		mov ecx, [result]
  4089 00003216 EB9D                <2> 		jmp vrnm4
  4090                              <2> 	checkdecimal2:
  4091 00003218 8A25[B6330000]      <2> 		mov ah, [decimal]
  4092 0000321E 8825[B7330000]      <2> 		mov [decimal2], ah
  4093 00003224 30E4                <2> 		xor ah, ah
  4094 00003226 8825[B6330000]      <2> 		mov [decimal], ah
  4095                              <2> 	checkdecimal:
  4096 0000322C 89F7                <2> 		mov edi, esi
  4097                              <2> 	chkdec1:
  4098 0000322E 8A07                <2> 		mov al, [edi]
  4099 00003230 3C2E                <2> 		cmp al, '.'
  4100 00003232 0F840B000000        <2> 		je near fnddec
  4101 00003238 3C00                <2> 		cmp al, 0
  4102 0000323A 0F8419000000        <2> 		je near nodecimal
  4103 00003240 47                  <2> 		inc edi
  4104 00003241 EBEB                <2> 		jmp chkdec1
  4105                              <2> 	fnddec:
  4106 00003243 8A4701              <2> 		mov al, [edi + 1]
  4107 00003246 8807                <2> 		mov [edi], al
  4108 00003248 3C00                <2> 		cmp al, 0
  4109 0000324A 0F8409000000        <2> 		je near nodecimal
  4110 00003250 FE05[B6330000]      <2> 		inc byte [decimal]
  4111 00003256 47                  <2> 		inc edi
  4112 00003257 EBEA                <2> 		jmp fnddec
  4113                              <2> 	nodecimal:
  4114 00003259 C3                  <2> 		ret
  4115                              <2> 	plusnum:
  4116 0000325A E815010000          <2> 		call decaddfix
  4117 0000325F 01D9                <2> 		add ecx, ebx
  4118 00003261 E98A000000          <2> 		jmp retnum
  4119                              <2> 	subnum:
  4120 00003266 E809010000          <2> 		call decaddfix
  4121 0000326B 29D9                <2> 		sub ecx, ebx
  4122 0000326D E97E000000          <2> 		jmp retnum
  4123                              <2> 	mulnum:
  4124 00003272 A0[B7330000]        <2> 		mov al, [decimal2]
  4125 00003277 0005[B6330000]      <2> 		add [decimal], al
  4126 0000327D 89C8                <2> 		mov eax, ecx
  4127 0000327F F7E3                <2> 		mul ebx
  4128 00003281 89C1                <2> 		mov ecx, eax
  4129 00003283 E968000000          <2> 		jmp retnum
  4130                              <2> 	divnum:
  4131 00003288 E8E7000000          <2> 		call decaddfix
  4132 0000328D 30C0                <2> 		xor al, al
  4133 0000328F A2[B6330000]        <2> 		mov [decimal], al
  4134 00003294 31D2                <2> 		xor edx, edx
  4135 00003296 89C8                <2> 		mov eax, ecx
  4136 00003298 81FB00000000        <2> 		cmp ebx, 0
  4137 0000329E 0F844C000000        <2> 		je near retnum
  4138 000032A4 F7F3                <2> 		div ebx
  4139 000032A6 89C1                <2> 		mov ecx, eax
  4140 000032A8 E943000000          <2> 		jmp retnum
  4141                              <2> 	expnum:
  4142 000032AD 8A15[B6330000]      <2> 		mov dl, [decimal]
  4143 000032B3 8815[B7330000]      <2> 		mov [decimal2], dl
  4144 000032B9 31D2                <2> 		xor edx, edx
  4145 000032BB 89C8                <2> 		mov eax, ecx
  4146 000032BD 89D9                <2> 		mov ecx, ebx
  4147 000032BF 89C3                <2> 		mov ebx, eax
  4148 000032C1 81F900000000        <2> 		cmp ecx, 0
  4149 000032C7 7422                <2> 		je noexpnum
  4150 000032C9 49                  <2> 		dec ecx
  4151 000032CA 81F900000000        <2> 		cmp ecx, 0
  4152 000032D0 7412                <2> 		je noexpnumlp
  4153 000032D2 F7E3                <2> 	expnumlp: mul ebx
  4154 000032D4 8A15[B7330000]      <2> 		mov dl, [decimal2]
  4155 000032DA 0015[B6330000]      <2> 		add [decimal], dl
  4156 000032E0 31D2                <2> 		xor edx, edx
  4157 000032E2 E2EE                <2> 		loop expnumlp
  4158                              <2> 	noexpnumlp:
  4159 000032E4 89C1                <2> 		mov ecx, eax
  4160 000032E6 E905000000          <2> 		jmp retnum
  4161                              <2> 	noexpnum:
  4162 000032EB B901000000          <2> 		mov ecx, 1
  4163                              <2> 	retnum: 
  4164 000032F0 BE[7AC60000]        <2> 		mov esi, numbuf
  4165 000032F5 890D[B9330000]      <2> 		mov [result], ecx
  4166 000032FB E80FFAFFFF          <2> 		call convert
  4167 00003300 BE[7AC60000]        <2> 		mov esi, numbuf
  4168 00003305 8A25[B6330000]      <2> 		mov ah, [decimal]
  4169 0000330B 8825[B8330000]      <2> 		mov [decimalresult], ah
  4170 00003311 80FC00              <2> 		cmp ah, 0
  4171 00003314 0F8425000000        <2> 		je near noputdecimal
  4172                              <2> 	putdecimal:
  4173 0000331A 4E                  <2> 		dec esi
  4174 0000331B FECC                <2> 		dec ah
  4175 0000331D 80FC00              <2> 		cmp ah, 0
  4176 00003320 0F87F4FFFFFF        <2> 		ja near putdecimal
  4177 00003326 4E                  <2> 		dec esi
  4178 00003327 8A06                <2> 		mov al, [esi]
  4179 00003329 C6062E              <2> 		mov byte [esi], '.'
  4180                              <2> 	decputloop:
  4181 0000332C 4E                  <2> 		dec esi
  4182 0000332D 8A26                <2> 		mov ah, [esi]
  4183 0000332F 8806                <2> 		mov [esi], al
  4184 00003331 88E0                <2> 		mov al, ah
  4185 00003333 81FE[66C60000]      <2> 		cmp esi, buf2
  4186 00003339 0F87EDFFFFFF        <2> 		ja near decputloop
  4187                              <2> 	noputdecimal:
  4188 0000333F BE[66C60000]        <2> 		mov esi, buf2
  4189 00003344 E809000000          <2> 		call chkadd
  4190 00003349 E93AF6FFFF          <2> 		jmp nwcmd
  4191 0000334E 00000000            <2> edxnumbuf dw 0,0
  4192 00003352 8A06                <2> 	chkadd: mov al, [esi]
  4193 00003354 3C30                <2> 		cmp al, '0'
  4194 00003356 750C                <2> 		jne dnadd
  4195 00003358 46                  <2> 		inc esi
  4196 00003359 81FE[7AC60000]      <2> 		cmp esi, numbuf
  4197 0000335F 7402                <2> 		je dnaddm1
  4198 00003361 EBEF                <2> 		jmp chkadd
  4199 00003363 4E                  <2> 	dnaddm1: dec esi
  4200 00003364 E8A2E9FFFF          <2> 	dnadd:	call print
  4201 00003369 BE[D0830000]        <2> 		mov esi, line
  4202 0000336E E898E9FFFF          <2> 		call print
  4203 00003373 C3                  <2> 		ret
  4204                              <2> 		
  4205                              <2> 	decaddfix:
  4206 00003374 A0[B7330000]        <2> 		mov al, [decimal2]
  4207 00003379 8A25[B6330000]      <2> 		mov ah, [decimal]
  4208 0000337F 38E0                <2> 		cmp al, ah
  4209 00003381 7432                <2> 		je gooddecadd
  4210 00003383 38E0                <2> 		cmp al, ah
  4211 00003385 721A                <2> 		jb lowdecadd
  4212                              <2> 	highdecadd:
  4213 00003387 FEC4                <2> 		inc ah
  4214 00003389 89CA                <2> 		mov edx, ecx
  4215 0000338B C1E103              <2> 		shl ecx, 3
  4216 0000338E 01D1                <2> 		add ecx, edx
  4217 00003390 01D1                <2> 		add ecx, edx
  4218 00003392 38E0                <2> 		cmp al, ah
  4219 00003394 77F1                <2> 		ja highdecadd
  4220 00003396 8825[B6330000]      <2> 		mov [decimal], ah
  4221 0000339C E914000000          <2> 		jmp gooddecadd
  4222                              <2> 	lowdecadd:
  4223 000033A1 FEC0                <2> 		inc al
  4224 000033A3 89DA                <2> 		mov edx, ebx
  4225 000033A5 C1E303              <2> 		shl ebx, 3
  4226 000033A8 01D3                <2> 		add ebx, edx
  4227 000033AA 01D3                <2> 		add ebx, edx
  4228 000033AC 38E0                <2> 		cmp al, ah
  4229 000033AE 72F1                <2> 		jb lowdecadd
  4230 000033B0 A2[B6330000]        <2> 		mov [decimal], al
  4231                              <2> 	gooddecadd:
  4232 000033B5 C3                  <2> 		ret
  4233                              <2> 		
  4234 000033B6 00                  <2> decimal db 0
  4235 000033B7 00                  <2> decimal2 db 0
  4236 000033B8 00                  <2> decimalresult db 0
  4237 000033B9 00000000            <2> result dd 0
  4238                              <1> %include 'source/programs/_variables.asm' ;% and $
  4239 000033BD FF2C2500            <2> db 255,44,"%",0
  4240                              <2> 	ans:
  4241 000033C1 BE[66C60000]        <2> 		mov esi, buf2
  4242 000033C6 E887FFFFFF          <2> 		call chkadd
  4243 000033CB C3                  <2> 		ret
  4244                              <2> 		
  4245 000033CC FF2C2400            <2> db 255,44,"$",0
  4246 000033D0 8B35[3B2C0000]      <2> var: mov esi, [currentcommandloc]
  4247 000033D6 BB[66AE0000]        <2> 	mov ebx, variables
  4248 000033DB 8A06                <2> lkeq:	mov al, [esi]
  4249 000033DD 3C3D                <2> 	cmp al, '='
  4250 000033DF 741B                <2> 	je eqfnd	;is there an '=' sign?
  4251 000033E1 3C00                <2> 	cmp al, 0
  4252 000033E3 7403                <2> 	je echovars
  4253 000033E5 46                  <2> 	inc esi
  4254 000033E6 EBF3                <2> 	jmp lkeq
  4255 000033E8 BE[66AE0000]        <2> echovars: mov esi, variables
  4256 000033ED BB[66BE0000]        <2> 	mov ebx, varend
  4257 000033F2 B105                <2> 	mov cl, 5
  4258 000033F4 B504                <2> 	mov ch, 4
  4259 000033F6 E89EF8FFFF          <2> 	call array
  4260 000033FB C3                  <2> 	ret
  4261 000033FC 46                  <2> eqfnd:	inc esi
  4262 000033FD 8A06                <2> 	mov al, [esi]
  4263 000033FF 3C00                <2> 	cmp al, 0
  4264 00003401 7410                <2> 	je readvar
  4265 00003403 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  4266 00003409 BB[66AE0000]        <2> 	mov ebx, variables
  4267 0000340E E919000000          <2> 	jmp seek
  4268                              <2> readvar:
  4269 00003413 B00A                <2> 	mov al, 10
  4270 00003415 66BB0700            <2> 	mov bx, 7
  4271 00003419 C605[B3210000]00    <2> 	mov byte [commandedit], 0
  4272 00003420 BF[66C60000]        <2> 	mov edi, buftxtend
  4273 00003425 E8C9E9FFFF          <2> 	call rdprint
  4274 0000342A EBA4                <2> 	jmp var
  4275 0000342C 668B03              <2> seek:	mov ax, [ebx]
  4276 0000342F B105                <2> 	mov cl, 5
  4277 00003431 B504                <2> 	mov ch, 4
  4278 00003433 663D0000            <2> 	cmp ax, 0
  4279 00003437 0F845B000000        <2> 	je near save
  4280 0000343D 6639C8              <2> 	cmp ax, cx
  4281 00003440 7403                <2> 	je skfnd
  4282 00003442 43                  <2> 	inc ebx
  4283 00003443 EBE7                <2> 	jmp seek
  4284 00003445 8B35[3B2C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4285 0000344B 46                  <2> 	inc esi
  4286 0000344C 81C302000000        <2> 	add ebx, 2
  4287 00003452 89DF                <2> 	mov edi, ebx
  4288 00003454 B13D                <2> 	mov cl, '='
  4289 00003456 E81FF8FFFF          <2> 	call cndtest
  4290 0000345B 3C01                <2> 	cmp al, 1	
  4291 0000345D 7418                <2> 	je varfnd
  4292 0000345F 89FB                <2> 	mov ebx, edi
  4293 00003461 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  4294 00003467 668B03              <2> 	mov ax, [ebx]
  4295 0000346A 663D0000            <2> 	cmp ax, 0
  4296 0000346E 0F8424000000        <2> 	je near save
  4297 00003474 43                  <2> 	inc ebx
  4298 00003475 EBB5                <2> 	jmp seek
  4299 00003477 8A03                <2> varfnd:	mov al, [ebx]
  4300 00003479 3C04                <2> 	cmp al, 4
  4301 0000347B 7404                <2> 	je save2
  4302 0000347D 4B                  <2> 	dec ebx
  4303 0000347E 4E                  <2> 	dec esi
  4304 0000347F EBF6                <2> 	jmp varfnd
  4305 00003481 4B                  <2> save2:	dec ebx
  4306 00003482 4E                  <2> 	dec esi
  4307 00003483 8A03                <2> 	mov al, [ebx]
  4308 00003485 3C05                <2> 	cmp al, 5
  4309 00003487 7402                <2> 	je remove
  4310 00003489 EBEC                <2> 	jmp varfnd
  4311 0000348B 8A03                <2> remove: mov al, [ebx]
  4312 0000348D 3C00                <2> 	cmp al, 0
  4313 0000348F 749B                <2> 	je seek
  4314 00003491 30C0                <2> 	xor al, al
  4315 00003493 8803                <2> 	mov [ebx], al
  4316 00003495 43                  <2> 	inc ebx
  4317 00003496 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4318 00003498 8B35[3B2C0000]      <2> save:	mov esi, [currentcommandloc]
  4319 0000349E 43                  <2> 	inc ebx
  4320 0000349F B005                <2> 	mov al, 5
  4321 000034A1 B404                <2> 	mov ah, 4
  4322 000034A3 668903              <2> 	mov [ebx], ax
  4323 000034A6 43                  <2> 	inc ebx
  4324 000034A7 43                  <2> svhere:	inc ebx
  4325 000034A8 46                  <2> 	inc esi
  4326 000034A9 8A06                <2> 	mov al, [esi]
  4327 000034AB 3C00                <2> 	cmp al, 0
  4328 000034AD 0F844A000000        <2> 	je near svdone
  4329 000034B3 3C25                <2> 	cmp al, '%'
  4330 000034B5 7404                <2> 	je ans2
  4331 000034B7 8803                <2> 	mov [ebx], al	
  4332 000034B9 EBEC                <2> 	jmp svhere
  4333 000034BB 56                  <2> ans2:	push esi
  4334 000034BC BE[66C60000]        <2> 	mov esi, buf2
  4335 000034C1 E823000000          <2> 	call ansfnd
  4336 000034C6 E803000000          <2> 	call anscp
  4337 000034CB 5E                  <2> 	pop esi
  4338 000034CC EBD9                <2> 	jmp svhere
  4339 000034CE 8A06                <2> anscp:	mov al, [esi]
  4340 000034D0 8803                <2> 	mov [ebx], al
  4341 000034D2 81FE[7AC60000]      <2> 	cmp esi, numbuf
  4342 000034D8 74CD                <2> 	je svhere
  4343 000034DA 3C00                <2> 	cmp al, 0
  4344 000034DC 74C9                <2> 	je svhere
  4345 000034DE 43                  <2> 	inc ebx
  4346 000034DF 46                  <2> 	inc esi
  4347 000034E0 EBEC                <2> 	jmp anscp
  4348 000034E2 5E                  <2> ansnf:	pop esi
  4349 000034E3 8A06                <2> 	mov al, [esi]
  4350 000034E5 8803                <2> 	mov [ebx], al
  4351 000034E7 EBBE                <2> 	jmp svhere
  4352 000034E9 46                  <2> ansfnd:	inc esi
  4353 000034EA 81FE[79C60000]      <2> 	cmp esi, numbuf - 1
  4354 000034F0 740A                <2> 	je fndans
  4355 000034F2 8A06                <2> 	mov al, [esi]
  4356 000034F4 3C00                <2> 	cmp al, 0
  4357 000034F6 74EA                <2> 	je ansnf
  4358 000034F8 3C30                <2> 	cmp al, '0'
  4359 000034FA 74ED                <2> 	je ansfnd
  4360                              <2> fndans:
  4361 000034FC C3                  <2> 	ret
  4362 000034FD 30C0                <2> svdone:	xor al, al
  4363 000034FF 8803                <2> 	mov [ebx], al
  4364 00003501 C3                  <2> 	ret
  4365                              <1> %include 'source/programs/_run.asm' ;./
  4366                              <2> 
  4367 00003502 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4368 00003506 FF2C2E2F00          <2> 	db 255,44,"./",0
  4369                              <2> rundiskprog:
  4370 0000350B 8B3D[3B2C0000]      <2> 	mov edi, [currentcommandloc]
  4371 00003511 81C702000000        <2> 	add edi, 2
  4372 00003517 BE00004000          <2> 	mov esi, 0x400000
  4373 0000351C E8F7280000          <2> 	call loadfile
  4374 00003521 81FA94010000        <2> 	cmp edx, 404
  4375 00003527 746A                <2> 	je noprogfound
  4376 00003529 BB00004000          <2> 	mov ebx, 0x400000
  4377 0000352E A1[02350000]        <2> 	mov eax, [elfstart]
  4378 00003533 3903                <2> 	cmp [ebx], eax
  4379 00003535 0F8437000000        <2> 	je near runelf
  4380 0000353B 66813B4558          <2> 	cmp word [ebx], "EX"
  4381 00003540 7577                <2> 	jne progbatchfound
  4382 00003542 81C302000000        <2> 	add ebx, 2
  4383 00003548 8B3D[3B2C0000]      <2> 	mov edi, [currentcommandloc]
  4384 0000354E 81C702000000        <2> 	add edi, 2
  4385                              <2> findspaceprog:
  4386 00003554 8A07                <2> 	mov al, [edi]
  4387 00003556 47                  <2> 	inc edi
  4388 00003557 3C20                <2> 	cmp al, " "
  4389 00003559 75F9                <2> 	jne findspaceprog
  4390                              <2> findnonspaceprog:
  4391 0000355B 8A07                <2> 	mov al, [edi]
  4392 0000355D 47                  <2> 	inc edi
  4393 0000355E 3C20                <2> 	cmp al, " "
  4394 00003560 74F9                <2> 	je findnonspaceprog
  4395 00003562 4F                  <2> 	dec edi
  4396 00003563 8925[E6AB0000]      <2> 	mov [previousstack], esp
  4397 00003569 FFD3                <2> 	call ebx
  4398 0000356B 8B25[E6AB0000]      <2> 	mov esp, [previousstack]
  4399 00003571 C3                  <2> 	ret
  4400                              <2> runelf:
  4401 00003572 8B3D[3B2C0000]      <2> 	mov edi, [currentcommandloc]
  4402 00003578 81C702000000        <2> 	add edi, 2
  4403 0000357E 81C380000000        <2> 	add ebx, 0x80
  4404 00003584 8925[E6AB0000]      <2> 	mov [previousstack], esp
  4405 0000358A FFD3                <2> 	call ebx
  4406 0000358C 8B25[E6AB0000]      <2> 	mov esp, [previousstack]
  4407 00003592 C3                  <2> 	ret
  4408                              <2> noprogfound:
  4409 00003593 BE[97830000]        <2> 	mov esi, notfound1
  4410 00003598 E86EE7FFFF          <2> 	call print
  4411 0000359D 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  4412 000035A3 81C602000000        <2> 	add esi, 2
  4413 000035A9 E85DE7FFFF          <2> 	call print
  4414 000035AE BE[9F830000]        <2> 	mov esi, notfound2
  4415 000035B3 E853E7FFFF          <2> 	call print
  4416 000035B8 C3                  <2> 	ret
  4417                              <2> progbatchfound:
  4418 000035B9 BF00004000          <2> 		mov edi, 0x400000
  4419 000035BE C605[60AE0000]01    <2> 		mov byte [BATCHISON], 1
  4420                              <2> 	batchrunloop:
  4421 000035C5 E89BF3FFFF          <2> 		call buftxtclear
  4422 000035CA BE[66C20000]        <2> 		mov esi, buftxt
  4423 000035CF 8935[3B2C0000]      <2> 		mov [currentcommandloc], esi
  4424                              <2> 	batchrunloop2:
  4425 000035D5 B10A                <2> 		mov cl, 10
  4426 000035D7 B50D                <2> 		mov ch, 13
  4427 000035D9 380F                <2> 		cmp [edi], cl
  4428 000035DB 0F8419000000        <2> 		je near nxtbatchrunline
  4429 000035E1 382F                <2> 		cmp [edi], ch
  4430 000035E3 0F8411000000        <2> 		je near nxtbatchrunline
  4431 000035E9 803F00              <2> 		cmp byte [edi], 0
  4432 000035EC 0F8408000000        <2> 		je near nxtbatchrunline
  4433 000035F2 8A07                <2> 		mov al, [edi]
  4434 000035F4 8806                <2> 		mov [esi], al
  4435 000035F6 46                  <2> 		inc esi
  4436 000035F7 47                  <2> 		inc edi
  4437 000035F8 EBDB                <2> 		jmp batchrunloop2
  4438                              <2> 	nxtbatchrunline:
  4439 000035FA 47                  <2> 		inc edi
  4440 000035FB 380F                <2> 		cmp [edi], cl
  4441 000035FD 74FB                <2> 		je nxtbatchrunline
  4442 000035FF 382F                <2> 		cmp [edi], ch
  4443 00003601 74F7                <2> 		je nxtbatchrunline
  4444 00003603 893D[61360000]      <2> 		mov [batchedi], edi
  4445 00003609 893D[5CAE0000]      <2> 		mov [BATCHPOS], edi
  4446 0000360F C60600              <2> 		mov byte [esi], 0
  4447 00003612 BE[66C20000]        <2> 		mov esi, buftxt
  4448 00003617 803E00              <2> 		cmp byte [esi], 0
  4449 0000361A 0F8439000000        <2> 		je near nobatchfoundrun
  4450 00003620 31DB                <2> 		xor ebx, ebx
  4451 00003622 8A1D[F7AD0000]      <2> 		mov bl, [IFON]
  4452 00003628 80FB00              <2> 		cmp bl, 0
  4453 0000362B 0F8534000000        <2> 		jne near iftestbatch
  4454                              <2> 	doneiftest:
  4455 00003631 803D[37370000]00    <2> 		cmp byte [runnextline], 0
  4456 00003638 0F8405000000        <2> 		je near noruniftest
  4457 0000363E E822F5FFFF          <2> 		call run
  4458                              <2> 	noruniftest:
  4459 00003643 C605[37370000]01    <2> 		mov byte [runnextline], 1
  4460 0000364A 8B3D[61360000]      <2> 		mov edi, [batchedi]
  4461 00003650 803F00              <2> 		cmp byte [edi], 0
  4462 00003653 0F856CFFFFFF        <2> 		jne near batchrunloop
  4463                              <2> 	nobatchfoundrun:
  4464 00003659 C605[60AE0000]00    <2> 		mov byte [BATCHISON], 0
  4465 00003660 C3                  <2> 		ret
  4466                              <2> 	
  4467 00003661 00000000            <2> batchedi dd 0	
  4468                              <2> 	
  4469                              <2> 	iftestbatch:
  4470 00003665 BE[F8AD0000]        <2> 		mov esi, IFTRUE
  4471 0000366A 01DE                <2> 		add esi, ebx
  4472 0000366C 803E00              <2> 		cmp byte [esi], 0
  4473 0000366F 0F85BCFFFFFF        <2> 		jne near doneiftest
  4474 00003675 881D[38370000]      <2> 		mov [iffalsebuf], bl
  4475 0000367B 803D[61AE0000]01    <2> 		cmp byte [LOOPON], 1
  4476 00003682 0F8513000000        <2> 		jne near fifindbatch
  4477 00003688 E938FFFFFF          <2> 		jmp batchrunloop
  4478                              <2> 	elsetestbatch:
  4479 0000368D C60601              <2> 		mov byte [esi], 1
  4480 00003690 81C705000000        <2> 		add edi, 5
  4481 00003696 E92AFFFFFF          <2> 		jmp batchrunloop
  4482                              <2> 	fifindbatch:
  4483 0000369B 66B96966            <2> 		mov cx, "if"
  4484 0000369F 66B86669            <2> 		mov ax, "fi"
  4485 000036A3 663907              <2> 		cmp [edi], ax
  4486 000036A6 0F8424000000        <2> 		je near fifoundbatch
  4487 000036AC 66390F              <2> 		cmp [edi], cx
  4488 000036AF 0F8465000000        <2> 		je near iffoundbatch
  4489 000036B5 803F00              <2> 		cmp byte [edi], 0
  4490 000036B8 0F8412000000        <2> 		je near fifoundbatch
  4491 000036BE B8656C7365          <2> 		mov eax, "else"
  4492 000036C3 3907                <2> 		cmp [edi], eax
  4493 000036C5 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4494 000036CB E973FFFFFF          <2> 		jmp noruniftest
  4495                              <2> 	fifoundbatch:
  4496 000036D0 81C702000000        <2> 		add edi, 2
  4497 000036D6 B00A                <2> 		mov al, 10
  4498 000036D8 3807                <2> 		cmp [edi], al
  4499 000036DA 0F840B000000        <2> 		je near goodfibatch
  4500 000036E0 803F00              <2> 		cmp byte [edi], 0
  4501 000036E3 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4502 000036E9 EBB0                <2> 		jmp fifindbatch
  4503                              <2> 	goodfibatch:
  4504 000036EB B001                <2> 		mov al, 1
  4505 000036ED 2805[F7AD0000]      <2> 		sub [IFON], al 
  4506 000036F3 A0[F7AD0000]        <2> 		mov al, [IFON]
  4507 000036F8 8A1D[38370000]      <2> 		mov bl, [iffalsebuf]
  4508 000036FE 38D8                <2> 		cmp al, bl
  4509 00003700 7799                <2> 		ja fifindbatch
  4510 00003702 8B35[3B2C0000]      <2> 		mov esi, [currentcommandloc]
  4511 00003708 81EF02000000        <2> 		sub edi, 2
  4512 0000370E C605[37370000]00    <2> 		mov byte [runnextline], 0
  4513 00003715 E9ABFEFFFF          <2> 		jmp batchrunloop
  4514                              <2> 	iffoundbatch:
  4515 0000371A B020                <2> 		mov al, ' '
  4516 0000371C 81C702000000        <2> 		add edi, 2
  4517 00003722 3807                <2> 		cmp [edi], al
  4518 00003724 0F8571FFFFFF        <2> 		jne near fifindbatch
  4519 0000372A B001                <2> 		mov al, 1
  4520 0000372C 0005[F7AD0000]      <2> 		add [IFON], al
  4521 00003732 E964FFFFFF          <2> 		jmp fifindbatch
  4522                              <2> 		
  4523                              <2> 		
  4524 00003737 01                  <2> runnextline db 1
  4525 00003738 00                  <2> iffalsebuf db 0
  4526                              <2> 
  4527 00003739 C3                  <2> notbatch: ret 
  4528                              <1> %ifdef network.included
  4529                              <1> 	%include 'source/programs/arp.asm'
  4530 0000373A FF2C61727000        <2> db 255,44,"arp",0
  4531                              <2> 	;ARP TESTING
  4532                              <2> arptest:
  4533 00003740 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  4534 00003746 81C604000000        <2> 	add esi, 4
  4535 0000374C E84B4B0000          <2> 	call strtoip
  4536 00003751 890D[F8370000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4537 00003757 E8864B0000          <2> 	call showip
  4538 0000375C 803D[FC370000]01    <2> 	cmp byte [arpconfig], 1
  4539 00003763 7405                <2> 	je arptest2
  4540 00003765 E841000000          <2> 	call arpinit
  4541                              <2> arptest2:	;try to reach 192.168.0.1
  4542 0000376A 8B0D[89830000]      <2> 	mov ecx, [sysmac]
  4543 00003770 668B1D[8D830000]    <2> 	mov bx, [sysmac + 4]
  4544 00003777 890D[D8370000]      <2> 	mov [sourcemac], ecx
  4545 0000377D 66891D[DC370000]    <2> 	mov [sourcemac + 4],bx
  4546 00003784 890D[E8370000]      <2> 	mov [arpsenderinfo], ecx
  4547 0000378A 66891D[EC370000]    <2> 	mov [arpsenderinfo + 4], bx
  4548 00003791 BF[D2370000]        <2> 	mov edi, frame
  4549 00003796 BE[FC370000]        <2> 	mov esi, framend
  4550 0000379B E8BC4A0000          <2> 	call sendpacket
  4551 000037A0 BE[D0830000]        <2> 	mov esi, line
  4552 000037A5 E861E5FFFF          <2> 	call print
  4553 000037AA C3                  <2> 	ret
  4554                              <2> 	
  4555                              <2> arpinit:
  4556 000037AB BE[FD370000]        <2> 	mov esi, arptable
  4557 000037B0 BF[89830000]        <2> 	mov edi, sysmac
  4558 000037B5 BB[85830000]        <2> 	mov ebx, sysip
  4559 000037BA 8B0F                <2> 	mov ecx, [edi]
  4560 000037BC 890E                <2> 	mov [esi], ecx
  4561 000037BE 668B4F04            <2> 	mov cx, [edi + 4]
  4562 000037C2 894E04              <2> 	mov [esi + 4], ecx
  4563 000037C5 8B0B                <2> 	mov ecx, [ebx]
  4564 000037C7 894E06              <2> 	mov [esi + 6], ecx
  4565 000037CA C605[FC370000]01    <2> 	mov byte [arpconfig], 1
  4566 000037D1 C3                  <2> 	ret
  4567                              <2> 	
  4568                              <2> ;example frame
  4569                              <2> frame:
  4570 000037D2 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4571 000037D8 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4572 000037DE 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4573                              <2> 	;;example packet
  4574 000037E0 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4575 000037E2 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4576 000037E4 0604                <2> 					db 6,4			;length of mac, length of ip
  4577 000037E6 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4578 000037E8 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4579 000037EE C0A80073            <2> 					db 192,168,0,115		;ip
  4580 000037F2 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4581 000037F8 C0A80000            <2> 					db 192,168,0,0			;ip
  4582                              <2> framend:
  4583                              <2> 
  4584 000037FC 00                  <2> arpconfig db 0
  4585                              <2> arptable:	;;mac,ip
  4586 000037FD 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4587 00003806 00<rept>            <2>
  4588                              <2> arptableend:	
  4589                              <1> %endif
  4590                              <1> %include 'source/programs/batch.asm'
  4591 00003861 FF2C626174636800    <2> db 255,44,"batch",0
  4592                              <2> 	batchst: 
  4593 00003869 8B3D[3B2C0000]      <2> 		mov edi, [currentcommandloc]
  4594 0000386F 81C706000000        <2> 		add edi, 6
  4595 00003875 803F00              <2> 		cmp byte [edi], 0
  4596 00003878 0F846D000000        <2> 		je near nonamefound
  4597 0000387E BE00004000          <2> 		mov esi, 0x400000
  4598 00003883 E890250000          <2> 		call loadfile
  4599 00003888 89D0                <2> 		mov eax, edx
  4600 0000388A 3D94010000          <2> 		cmp eax, 404
  4601 0000388F 7465                <2> 		je goodbatchname
  4602 00003891 BE[9C380000]        <2> 		mov esi, badbatchname
  4603 00003896 E870E4FFFF          <2> 		call print
  4604 0000389B C3                  <2> 		ret
  4605 0000389C 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4606 000038A5 20616C726561647920- <2>
  4607 000038AE 657869737473210A00  <2>
  4608 000038B7 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4609 000038C0 746F20747970652061- <2>
  4610 000038C9 206E616D6520616674- <2>
  4611 000038D2 65722074686520636F- <2>
  4612 000038DB 6D6D616E642E0A00    <2>
  4613 000038E3 00000000            <2> 		esicache3 dd 0
  4614 000038E7 00000000            <2> 		esicache2 dd 0
  4615                              <2> 	nonamefound:
  4616 000038EB BE[B7380000]        <2> 		mov esi, namenotfoundbatch
  4617 000038F0 E816E4FFFF          <2> 		call print
  4618 000038F5 C3                  <2> 		ret
  4619                              <2> 	goodbatchname:
  4620 000038F6 BE00004000          <2> 		mov esi, 0x400000
  4621                              <2> 	batchcreate:
  4622 000038FB 8935[E3380000]      <2> 		mov [esicache3], esi
  4623 00003901 BF00008000          <2> 		mov edi, 0x800000
  4624 00003906 B00A                <2> 		mov al, 10
  4625 00003908 B307                <2> 		mov bl, 7
  4626 0000390A B404                <2> 		mov ah, 4
  4627 0000390C CD30                <2> 		int 30h
  4628 0000390E 8935[E7380000]      <2> 		mov [esicache2], esi
  4629 00003914 8A0E                <2> 		mov cl, [esi]
  4630 00003916 8B35[E3380000]      <2> 		mov esi, [esicache3]
  4631 0000391C BB[50390000]        <2> 		mov ebx, exitword
  4632 00003921 E854F3FFFF          <2> 		call cndtest
  4633 00003926 3C01                <2> 		cmp al, 1
  4634 00003928 7411                <2> 		je endbatchcreate
  4635 0000392A 3C02                <2> 		cmp al, 2
  4636 0000392C 740D                <2> 		je endbatchcreate
  4637 0000392E 8B35[E7380000]      <2> 		mov esi, [esicache2]
  4638 00003934 B00A                <2> 		mov al, 10
  4639 00003936 8806                <2> 		mov [esi], al
  4640 00003938 46                  <2> 		inc esi
  4641 00003939 EBC0                <2> 		jmp batchcreate
  4642                              <2> 	endbatchcreate:
  4643 0000393B 8B35[E3380000]      <2> 		mov esi, [esicache3]
  4644 00003941 31C0                <2> 		xor eax, eax
  4645 00003943 8806                <2> 		mov [esi], al
  4646 00003945 BE00004000          <2> 		mov esi, 0x400000
  4647 0000394A E8BCE3FFFF          <2> 		call print
  4648 0000394F C3                  <2> 		ret
  4649                              <2> 	
  4650 00003950 5C7800              <2> 	exitword db "\x",0
  4651 00003953 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4652 0000395C 6F20657869742E0A00  <2>
  4653                              <1> %ifdef gui.background
  4654                              <1> 	%include 'source/programs/background.asm'
  4655                              <1> %endif
  4656                              <1> %include 'source/programs/beep.asm'
  4657 00003965 FF2C6265657000      <2> 	db 255,44,"beep",0
  4658                              <2> beep:
  4659 0000396C B8[91390000]        <2> 	mov eax, beepstart
  4660 00003971 A3[68020000]        <2> 	mov [soundpos], eax
  4661 00003976 B8[95390000]        <2> 	mov eax, beepend
  4662 0000397B A3[6C020000]        <2> 	mov [soundendpos], eax
  4663 00003980 C605[65020000]01    <2> 	mov byte [soundon], 1
  4664                              <2> waitforsoundendbeep:
  4665 00003987 A0[65020000]        <2> 	mov al, [soundon]
  4666 0000398C 3C00                <2> 	cmp al, 0
  4667 0000398E 75F7                <2> 	jne waitforsoundendbeep
  4668 00003990 C3                  <2> 	ret
  4669                              <2> 	
  4670                              <2> beepstart:
  4671 00003991 3200D111            <2> 	dw 50, 4561
  4672                              <2> beepend:
  4673                              <1> %include 'source/programs/cd.asm'
  4674 00003995 FF2C636400          <2> db 255,44,"cd",0
  4675                              <2> cd:
  4676 0000399A 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  4677 000039A0 81C603000000        <2> 	add esi, 3
  4678 000039A6 8B3D[EEAB0000]      <2> 	mov edi, [currentfolderloc]
  4679 000039AC 893D[EAAB0000]      <2> 	mov [lastfolderloc], edi
  4680 000039B2 81C7[F2AB0000]      <2> 	add edi, currentfolder
  4681                              <2> 	;cmp word [esi], ".."
  4682                              <2> 	;je .moveup
  4683                              <2> .movedown:
  4684 000039B8 8A06                <2> 	mov al, [esi]
  4685 000039BA 8807                <2> 	mov [edi], al
  4686 000039BC 47                  <2> 	inc edi
  4687 000039BD 46                  <2> 	inc esi
  4688 000039BE 3C00                <2> 	cmp al, 0
  4689 000039C0 740A                <2> 	je .donecd
  4690 000039C2 81FF[F2AD0000]      <2> 	cmp edi, currentfolderend
  4691 000039C8 72EE                <2> 	jb .movedown
  4692 000039CA 30C0                <2> 	xor al, al
  4693                              <2> .donecd:
  4694 000039CC 4F                  <2> 	dec edi
  4695 000039CD C6072F              <2> 	mov byte [edi], '/'
  4696 000039D0 47                  <2> 	inc edi
  4697 000039D1 81EF[F2AB0000]      <2> 	sub edi, currentfolder
  4698 000039D7 893D[EEAB0000]      <2> 	mov [currentfolderloc], edi
  4699 000039DD C3                  <2> 	ret
  4700                              <2> ;.moveup:
  4701                              <2> ;	ret
  4702                              <1> %include 'source/programs/charmap.asm'
  4703 000039DE FF2C636861726D6170- <2> db 255,44,"charmap",0
  4704 000039E7 00                  <2>
  4705 000039E8 66BB0700            <2> 	mov bx, 7
  4706 000039EC B020                <2> 	mov al, " "
  4707 000039EE E84DE8FFFF          <2> 	call prcharq
  4708 000039F3 E848E8FFFF          <2> 	call prcharq
  4709 000039F8 E843E8FFFF          <2> 	call prcharq
  4710 000039FD E83EE8FFFF          <2> 	call prcharq
  4711 00003A02 B030                <2> 	mov al, "0"
  4712                              <2> charmapnumprnt:
  4713 00003A04 E837E8FFFF          <2> 	call prcharq
  4714 00003A09 FEC0                <2> 	inc al
  4715 00003A0B 6650                <2> 	push ax
  4716 00003A0D B020                <2> 	mov al, " "
  4717 00003A0F E82CE8FFFF          <2> 	call prcharq
  4718 00003A14 6658                <2> 	pop ax
  4719 00003A16 3C39                <2> 	cmp al, "9"
  4720 00003A18 76EA                <2> 	jbe charmapnumprnt
  4721 00003A1A B041                <2> 	mov al, "A"
  4722                              <2> charmapnumprnt2:
  4723 00003A1C E81FE8FFFF          <2> 	call prcharq
  4724 00003A21 FEC0                <2> 	inc al
  4725 00003A23 6650                <2> 	push ax
  4726 00003A25 B020                <2> 	mov al, " "
  4727 00003A27 E814E8FFFF          <2> 	call prcharq
  4728 00003A2C 6658                <2> 	pop ax
  4729 00003A2E 3C47                <2> 	cmp al, "G"
  4730 00003A30 72EA                <2> 	jb charmapnumprnt2
  4731                              <2> 	
  4732 00003A32 BE[D0830000]        <2> 	mov esi, line
  4733 00003A37 E8BDE2FFFF          <2> 	call printquiet
  4734 00003A3C 6631C0              <2> 	xor ax, ax
  4735 00003A3F 88C1                <2> 	mov cl, al
  4736 00003A41 E808F4FFFF          <2> 	call showhexsmall
  4737 00003A46 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4738                              <2> charmapcopy:
  4739 00003A4B FEC0                <2> 	inc al
  4740 00003A4D 6650                <2> 	push ax
  4741 00003A4F 3C08                <2> 	cmp al, 8
  4742 00003A51 744D                <2> 	je charmapnocopy
  4743 00003A53 3C09                <2> 	cmp al, 9
  4744 00003A55 7449                <2> 	je charmapnocopy
  4745 00003A57 3C0A                <2> 	cmp al, 10
  4746 00003A59 7445                <2> 	je charmapnocopy
  4747 00003A5B 3C0D                <2> 	cmp al, 13
  4748 00003A5D 7441                <2> 	je charmapnocopy
  4749 00003A5F 3CFF                <2> 	cmp al, 255
  4750 00003A61 743D                <2> 	je charmapnocopy
  4751 00003A63 3C00                <2> 	cmp al, 0
  4752 00003A65 7434                <2> 	je nomorecharmap
  4753 00003A67 E8D4E7FFFF          <2> 	call prcharq
  4754 00003A6C B020                <2> 	mov al, " "
  4755 00003A6E E8CDE7FFFF          <2> 	call prcharq
  4756 00003A73 6658                <2> 	pop ax
  4757                              <2> charmapcopycheck:
  4758 00003A75 FEC4                <2> 	inc ah
  4759 00003A77 80FC10              <2> 	cmp ah, 16
  4760 00003A7A 72CF                <2> 	jb charmapcopy
  4761 00003A7C 6650                <2> 	push ax
  4762 00003A7E BE[D0830000]        <2> 	mov esi, line
  4763 00003A83 E871E2FFFF          <2> 	call printquiet
  4764 00003A88 6658                <2> 	pop ax
  4765 00003A8A 3CFF                <2> 	cmp al, 255
  4766 00003A8C 740D                <2> 	je nomorecharmap
  4767 00003A8E 88C1                <2> 	mov cl, al
  4768 00003A90 FEC1                <2> 	inc cl
  4769 00003A92 E8B7F3FFFF          <2> 	call showhexsmall
  4770 00003A97 30E4                <2> 	xor ah, ah
  4771 00003A99 EBB0                <2> 	jmp charmapcopy
  4772                              <2> nomorecharmap:
  4773 00003A9B E9E8EEFFFF          <2> 	jmp nwcmd
  4774                              <2> charmapnocopy:
  4775 00003AA0 6650                <2> 	push ax
  4776 00003AA2 B020                <2> 	mov al, " "
  4777 00003AA4 E897E7FFFF          <2> 	call prcharq
  4778 00003AA9 E892E7FFFF          <2> 	call prcharq
  4779 00003AAE 6658                <2> 	pop ax
  4780 00003AB0 EBC3                <2> 	jmp charmapcopycheck
  4781                              <1> %include 'source/programs/clear.asm'
  4782 00003AB2 FF2C636C65617200    <2> db 255,44,"clear",0
  4783 00003ABA E8B2E2FFFF          <2> 		call clear
  4784 00003ABF C3                  <2> 		ret 
  4785                              <1> %include 'source/programs/cpuid.asm'
  4786 00003AC0 FF2C637075696400    <2> db 255,44,"cpuid",0
  4787 00003AC8 31C0                <2> 	xor eax, eax
  4788 00003ACA 0FA2                <2> 	cpuid
  4789 00003ACC 891D[1D3B0000]      <2> 	mov [cpuidbuf], ebx
  4790 00003AD2 8915[213B0000]      <2> 	mov [cpuidbuf + 4], edx
  4791 00003AD8 890D[253B0000]      <2> 	mov [cpuidbuf + 8], ecx
  4792 00003ADE BE[1D3B0000]        <2> 	mov esi, cpuidbuf
  4793 00003AE3 E823E2FFFF          <2> 	call print
  4794 00003AE8 BE[D0830000]        <2> 	mov esi, line
  4795 00003AED E819E2FFFF          <2> 	call print
  4796 00003AF2 B801000000          <2> 	mov eax, 1
  4797 00003AF7 0FA2                <2> 	cpuid
  4798 00003AF9 89C1                <2> 	mov ecx, eax
  4799 00003AFB C605[4D2E0000]02    <2> 	mov byte [firsthexshown], 2
  4800 00003B02 E85BF3FFFF          <2> 	call showhex
  4801 00003B07 B808000080          <2> 	mov eax, 0x80000008
  4802 00003B0C 0FA2                <2> 	cpuid
  4803 00003B0E 89C1                <2> 	mov ecx, eax
  4804 00003B10 C605[4D2E0000]02    <2> 	mov byte [firsthexshown], 2
  4805 00003B17 E846F3FFFF          <2> 	call showhex
  4806 00003B1C C3                  <2> 	ret
  4807                              <2> 	
  4808 00003B1D 00<rept>            <2> cpuidbuf times 13 db 0
  4809                              <2> cpuidvendorend:
  4810                              <1> %ifdef network.included
  4811                              <1> 	%include 'source/programs/dhcp.asm'
  4812 00003B2A FF2C6468637000      <2> db 255,44,"dhcp",0
  4813                              <2> dhcp:
  4814 00003B31 BE[F13B0000]        <2> 	mov esi, .dhcp.mac
  4815 00003B36 BB[D13C0000]        <2> 	mov ebx, .dhcp.option.mac
  4816 00003B3B BF[B13B0000]        <2> 	mov edi, .mac
  4817 00003B40 31C9                <2> 	xor ecx, ecx
  4818 00003B42 66890D[C33B0000]    <2> 	mov [.ip.checksum], cx
  4819 00003B49 66890D[D33B0000]    <2> 	mov [.udp.checksum], cx
  4820 00003B50 8B0D[89830000]      <2> 	mov ecx, [sysmac]
  4821 00003B56 890B                <2> 	mov [ebx], ecx
  4822 00003B58 890F                <2> 	mov [edi], ecx
  4823 00003B5A 890E                <2> 	mov [esi], ecx
  4824 00003B5C 668B0D[8D830000]    <2> 	mov cx, [sysmac + 4]
  4825 00003B63 66894B04            <2> 	mov [ebx + 4], cx
  4826 00003B67 66894E04            <2> 	mov [esi + 4], cx
  4827 00003B6B 66894F04            <2> 	mov [edi + 4], cx
  4828 00003B6F BF[B93B0000]        <2> 	mov edi, .ip.header
  4829 00003B74 BE[CD3B0000]        <2> 	mov esi, .ip.headerend
  4830 00003B79 E8F6460000          <2> 	call getchecksum
  4831 00003B7E 66890D[C33B0000]    <2> 	mov [.ip.checksum], cx
  4832 00003B85 BF[CD3B0000]        <2> 	mov edi, .udp.header
  4833 00003B8A BE[E83C0000]        <2> 	mov esi, .udp.end
  4834 00003B8F E8E0460000          <2> 	call getchecksum
  4835 00003B94 66890D[D33B0000]    <2> 	mov [.udp.checksum], cx
  4836 00003B9B BF[AB3B0000]        <2> 	mov edi, .frame
  4837 00003BA0 BE[E83C0000]        <2> 	mov esi, .udp.end
  4838 00003BA5 E8B2460000          <2> 	call sendpacket
  4839 00003BAA C3                  <2> 	ret
  4840                              <2> .frame:
  4841 00003BAB FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4842 00003BB1 000000000000        <2> 	.mac db 0,0,0,0,0,0
  4843 00003BB7 0800                <2> 	db 8,0
  4844                              <2> .ip.header:
  4845 00003BB9 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  4846 00003BBA 00                  <2> 	db 0
  4847 00003BBB 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  4848 00003BBD 0000                <2> 	dw 0
  4849 00003BBF 0000                <2> 	dw 0
  4850 00003BC1 80                  <2> 	db 0x80
  4851 00003BC2 11                  <2> 	db 17
  4852 00003BC3 0000                <2> .ip.checksum dw 0
  4853 00003BC5 00000000            <2> 	db 0,0,0,0
  4854 00003BC9 FFFFFFFF            <2> 	db 255,255,255,255	
  4855                              <2> .ip.headerend
  4856                              <2> .udp.header
  4857 00003BCD 0044                <2> 	db 0,68	;source port
  4858 00003BCF 0043                <2> 	db 0,67 ;destination port
  4859 00003BD1 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  4860 00003BD3 0000                <2> .udp.checksum dw 0
  4861                              <2> .udp.headerend
  4862                              <2> .dhcp.data
  4863 00003BD5 01                  <2> 	db 1	;message type
  4864 00003BD6 01                  <2> 	db 1	;hardware type
  4865 00003BD7 06                  <2> 	db 6	;hardware address length
  4866 00003BD8 00                  <2> 	db 0	;hops
  4867 00003BD9 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  4868 00003BDD 0000                <2> 	db 0,0	;seconds elapsed
  4869 00003BDF 0000                <2> 	db 0,0	;flags
  4870 00003BE1 00000000            <2> 	db 0,0,0,0	;client ip address
  4871 00003BE5 00000000            <2> 	db 0,0,0,0	;your ip address
  4872 00003BE9 00000000            <2> 	db 0,0,0,0	;server ip address
  4873 00003BED 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  4874 00003BF1 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  4875 00003BF7 00<rept>            <2> 	times 10 db 0	;padding
  4876 00003C01 00<rept>            <2> 	times 64 db 0	;server host name
  4877 00003C41 00<rept>            <2> 	times 128 db 0	;boot file name
  4878 00003CC1 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  4879                              <2> .dhcp.option.type:
  4880 00003CC5 350103              <2> 	db 53,1,3	;DHCP Request
  4881 00003CC8 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  4882 00003CCE 3D07                <2> 	db 61,7 ;client id(mac)
  4883 00003CD0 01                  <2> 	db 1	;Type=Ethernet
  4884 00003CD1 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  4885 00003CD7 0C08                <2> 	db 12,8 ;host name
  4886 00003CD9 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  4887 00003CE1 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  4888 00003CE7 FF                  <2> 	db 0xFF	;end DHCP options
  4889                              <2> .dhcp.end
  4890                              <2> .udp.end
  4891                              <2> 	
  4892                              <1> %endif
  4893                              <1> %include 'source/programs/dos.asm'
  4894 00003CE8 FF2C646F7300        <2> db 255,44,"dos",0
  4895                              <2> dosrunner:
  4896 00003CEE 8925[E6AB0000]      <2> 	mov [previousstack], esp
  4897 00003CF4 8B3D[3B2C0000]      <2> 	mov edi, [currentcommandloc]
  4898 00003CFA 81C704000000        <2> 	add edi, 4
  4899 00003D00 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4900 00003D05 E80E210000          <2> 	call loadfile
  4901 00003D0A 8B3D[3B2C0000]      <2> 	mov edi, [currentcommandloc]
  4902 00003D10 81C704000000        <2> 	add edi, 4
  4903 00003D16 81FA94010000        <2> 	cmp edx, 404
  4904 00003D1C 0F845E000000        <2> 	je near .noprogfound
  4905 00003D22 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4906 00003D27 31C9                <2> 	xor ecx, ecx
  4907                              <2> .findparams:
  4908 00003D29 47                  <2> 	inc edi
  4909 00003D2A 8A07                <2> 	mov al, [edi]
  4910 00003D2C 3C20                <2> 	cmp al, " "
  4911 00003D2E 75F9                <2> 	jne .findparams
  4912                              <2> .copyparams:
  4913 00003D30 8A07                <2> 	mov al, [edi]
  4914 00003D32 8803                <2> 	mov [ebx], al
  4915 00003D34 43                  <2> 	inc ebx
  4916 00003D35 47                  <2> 	inc edi
  4917 00003D36 41                  <2> 	inc ecx
  4918 00003D37 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4919 00003D3D 7304                <2> 	jae .nomoreparams
  4920 00003D3F 3C00                <2> 	cmp al, 0
  4921 00003D41 75ED                <2> 	jne .copyparams
  4922                              <2> .nomoreparams:
  4923 00003D43 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4924 00003D49 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4925 00003D4D 8ED8                <2> 	mov ds, ax
  4926 00003D4F 8EC0                <2> 	mov es, ax
  4927 00003D51 8EE0                <2> 	mov fs, ax
  4928 00003D53 8EE8                <2> 	mov gs, ax
  4929 00003D55 31C0                <2> 	xor eax, eax
  4930 00003D57 31DB                <2> 	xor ebx, ebx
  4931 00003D59 31C9                <2> 	xor ecx, ecx
  4932 00003D5B 31D2                <2> 	xor edx, edx
  4933 00003D5D 31FF                <2> 	xor edi, edi
  4934 00003D5F 31F6                <2> 	xor esi, esi
  4935 00003D61 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4936 00003D68 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4937 00003D6C 6689DA              <2> 	mov dx, bx
  4938 00003D6F 8EC3                <2> 	mov es, bx
  4939 00003D71 8EE3                <2> 	mov fs, bx
  4940 00003D73 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4941 00003D77 8EEB                <2> 	mov gs, bx
  4942 00003D79 8B25[E6AB0000]      <2> 	mov esp, [previousstack]
  4943 00003D7F C3                  <2> 	ret
  4944                              <2> .noprogfound:
  4945 00003D80 BE[97830000]        <2> 	mov esi, notfound1
  4946 00003D85 E881DFFFFF          <2> 	call print
  4947 00003D8A 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  4948 00003D90 81C604000000        <2> 	add esi, 4
  4949 00003D96 E870DFFFFF          <2> 	call print
  4950 00003D9B BE[9F830000]        <2> 	mov esi, notfound2
  4951 00003DA0 E866DFFFFF          <2> 	call print
  4952 00003DA5 C3                  <2> 	ret
  4953                              <2> 	
  4954                              <1> %include 'source/programs/dump.asm'
  4955 00003DA6 FF2C64756D7000      <2> db 255,44,"dump",0
  4956 00003DAD 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  4957 00003DB3 81C605000000        <2> 	add esi, 5
  4958 00003DB9 31C9                <2> 	xor ecx, ecx
  4959 00003DBB 66B83078            <2> 	mov ax, "0x"
  4960 00003DBF 663906              <2> 	cmp [esi], ax
  4961 00003DC2 740A                <2> 	je dumphexin
  4962 00003DC4 E845F2FFFF          <2> 	call cnvrttxt
  4963 00003DC9 E910000000          <2> 	jmp dumphexnow
  4964                              <2> dumphexin:
  4965 00003DCE 81C602000000        <2> 	add esi, 2
  4966 00003DD4 E8ECF1FFFF          <2> 	call cnvrthextxt
  4967 00003DD9 E900000000          <2> 	jmp dumphexnow
  4968                              <2> dumphexnow:
  4969 00003DDE 89CF                <2> 	mov edi, ecx
  4970 00003DE0 89FE                <2> 	mov esi, edi
  4971 00003DE2 81C680030000        <2> 	add esi, 896
  4972                              <2> dumphexloop:
  4973 00003DE8 8B0F                <2> 	mov ecx, [edi]
  4974 00003DEA C605[4D2E0000]05    <2> 	mov byte [firsthexshown],5
  4975 00003DF1 E86CF0FFFF          <2> 	call showhex
  4976 00003DF6 81C704000000        <2> 	add edi, 4
  4977 00003DFC 39F7                <2> 	cmp edi, esi
  4978 00003DFE 72E8                <2> 	jb dumphexloop
  4979 00003E00 E86EE7FFFF          <2> 	call termcopy
  4980 00003E05 C3                  <2> 	ret 
  4981                              <1> %include 'source/programs/echo.asm'
  4982                              <2> 
  4983 00003E06 FF2C6563686F00      <2> db 255,44,"echo",0
  4984                              <2> 	echoprog:
  4985 00003E0D 8B35[3B2C0000]      <2> 		mov esi, [currentcommandloc]
  4986 00003E13 81C605000000        <2> 		add esi, 5
  4987 00003E19 8A06                <2> 		mov al, [esi]
  4988 00003E1B E8EBDEFFFF          <2> 		call print
  4989 00003E20 BE[D0830000]        <2> 		mov esi, line
  4990 00003E25 E8E1DEFFFF          <2> 		call print
  4991 00003E2A C3                  <2> 		ret
  4992 00003E2B BB[66AE0000]        <2> 	echovr:	mov ebx, variables
  4993 00003E30 BF06000000          <2> 		mov edi, 6
  4994 00003E35 E83C000000          <2> 		call nxtvrech
  4995 00003E3A E954000000          <2> 		jmp prntvr2
  4996 00003E3F B13D                <2> 	echvar:	mov cl, '='
  4997 00003E41 43                  <2> 		inc ebx
  4998 00003E42 8A03                <2> 		mov al, [ebx]
  4999 00003E44 3C00                <2> 		cmp al, 0
  5000 00003E46 742E                <2> 		je nxtvrech
  5001 00003E48 3C3D                <2> 		cmp al, '='
  5002 00003E4A 7422                <2> 		je nxtvrechb1
  5003 00003E4C 8B35[3B2C0000]      <2> 		mov esi, [currentcommandloc]
  5004 00003E52 01FE                <2> 		add esi, edi
  5005 00003E54 E821EEFFFF          <2> 		call cndtest
  5006 00003E59 3C02                <2> 		cmp al, 2
  5007 00003E5B 7432                <2> 		je prntvr
  5008 00003E5D 3C01                <2> 		cmp al, 1
  5009 00003E5F 742E                <2> 		je prntvr
  5010 00003E61 8B35[3B2C0000]      <2> 		mov esi, [currentcommandloc]
  5011 00003E67 01FE                <2> 		add esi, edi
  5012 00003E69 E908000000          <2> 		jmp nxtvrech
  5013                              <2> 	nxtvrechb1:
  5014 00003E6E 81EB02000000        <2> 		sub ebx, 2
  5015 00003E74 EBC9                <2> 		jmp echvar
  5016 00003E76 8A03                <2> 	nxtvrech: mov al, [ebx]
  5017 00003E78 3C05                <2> 		cmp al, 5
  5018 00003E7A 740A                <2> 		je nxtvrec2
  5019 00003E7C 43                  <2> 		inc ebx
  5020 00003E7D 81FB[66BE0000]      <2> 		cmp ebx, varend
  5021 00003E83 72F1                <2> 		jb nxtvrech
  5022 00003E85 C3                  <2> 		ret
  5023 00003E86 43                  <2> 	nxtvrec2: inc ebx
  5024 00003E87 8A03                <2> 		mov al, [ebx]
  5025 00003E89 3C04                <2> 		cmp al, 4
  5026 00003E8B 74B2                <2> 		je echvar
  5027 00003E8D EBE7                <2> 		jmp nxtvrech
  5028 00003E8F 43                  <2> 	prntvr: inc ebx
  5029 00003E90 89DE                <2> 		mov esi, ebx
  5030 00003E92 C3                  <2> 		ret
  5031 00003E93 E873DEFFFF          <2> 	prntvr2: call print
  5032 00003E98 BE[D0830000]        <2> 		mov esi, line
  5033 00003E9D E869DEFFFF          <2> 		call print
  5034 00003EA2 C3                  <2> 		ret 
  5035                              <1> %include 'source/programs/else.asm'
  5036 00003EA3 FF2C656C736500      <2> 	db 255,44,"else",0
  5037 00003EAA 31C0                <2> elsecmd:	xor eax, eax
  5038 00003EAC 3805[60AE0000]      <2> 	cmp [BATCHISON], al
  5039 00003EB2 0F8481F8FFFF        <2> 	je near notbatch
  5040 00003EB8 A0[F7AD0000]        <2> 	mov al, [IFON]
  5041 00003EBD BE[F8AD0000]        <2> 	mov esi, IFTRUE
  5042 00003EC2 01C6                <2> 	add esi, eax
  5043 00003EC4 8A06                <2> 	mov al, [esi]
  5044 00003EC6 3401                <2> 	xor al, 1
  5045 00003EC8 8806                <2> 	mov [esi], al
  5046 00003ECA C3                  <2> 	ret 
  5047                              <1> %include 'source/programs/exit.asm'
  5048 00003ECB FF2C6578697400      <2> db 255,44,"exit",0
  5049 00003ED2 803D[F6AD0000]01    <2> 	cmp byte [ranboot], 1
  5050 00003ED9 0F843DEAFFFF        <2> 	je near returnfromexp
  5051 00003EDF E925E9FFFF          <2> 	jmp nobootfile
  5052                              <1> %include 'source/programs/fi.asm'
  5053 00003EE4 FF2C666900          <2> 	db 255,44,"fi",0
  5054 00003EE9 30C0                <2> 	xor al, al
  5055 00003EEB 3805[60AE0000]      <2> 	cmp [BATCHISON], al
  5056 00003EF1 0F8442F8FFFF        <2> 	je near notbatch
  5057 00003EF7 B001                <2> fi:	mov al, 1
  5058 00003EF9 2805[F7AD0000]      <2> 	sub [IFON],al
  5059 00003EFF C3                  <2> 	ret 
  5060                              <1> %ifdef gui.included
  5061                              <1> 	%include 'source/programs/gui.asm'
  5062 00003F00 FF2C67756900        <2> db 255,44,"gui",0
  5063                              <2> guiswitcher:
  5064 00003F06 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  5065 00003F0C 81C604000000        <2> 	add esi, 4
  5066 00003F12 31C9                <2> 	xor ecx, ecx
  5067 00003F14 803E00              <2> 	cmp byte [esi], 0
  5068 00003F17 740A                <2> 	je .nomodepref
  5069 00003F19 E8A7F0FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5070 00003F1E E907000000          <2> 	jmp .modepref
  5071                              <2> .nomodepref:
  5072 00003F23 51                  <2> 	push ecx
  5073 00003F24 E848DEFFFF          <2> 	call clear
  5074 00003F29 59                  <2> 	pop ecx
  5075                              <2> .modepref:
  5076 00003F2A 66BB[7E4E]          <2> 	mov bx, guiswitch
  5077 00003F2E 66891D[DA0C0000]    <2> 	mov [realmodeptr], bx
  5078 00003F35 BB[453F0000]        <2> 	mov ebx, guiswitchret
  5079 00003F3A 891D[D60C0000]      <2> 	mov [realmodereturn], ebx
  5080 00003F40 E97ACCFFFF          <2> 	jmp realmode
  5081                              <2> guiswitchret:
  5082 00003F45 65803D[A0950000]01  <2> 	cmp byte [gs:guion], 1
  5083 00003F4D 7401                <2> 	je .cont
  5084 00003F4F C3                  <2> 	ret
  5085                              <2> .cont:
  5086 00003F50 BF[5C500000]        <2> 	mov edi, VBEMODEBLOCK
  5087                              <2> .loop:
  5088 00003F55 658B07              <2> 	mov eax, [gs:edi]
  5089 00003F58 8907                <2> 	mov [edi], eax
  5090 00003F5A 47                  <2> 	inc edi
  5091 00003F5B 81FF[60530000]      <2> 	cmp edi, VBEEND
  5092 00003F61 72F2                <2> 	jb .loop
  5093 00003F63 A1[84520000]        <2> 	mov eax, [physbaseptr]
  5094 00003F68 2D00001000          <2> 	sub eax, 0x100000
  5095 00003F6D A3[84520000]        <2> 	mov [physbaseptr], eax
  5096 00003F72 C605[3E220000]00    <2> 	mov byte [termguion], 0
  5097 00003F79 BE[7BC60000]        <2> 	mov esi, graphicstable
  5098 00003F7E 30C0                <2> 	xor al, al
  5099                              <2> .clear:
  5100 00003F80 8806                <2> 	mov [esi], al
  5101 00003F82 46                  <2> 	inc esi
  5102 00003F83 81FE[7BC80000]      <2> 	cmp esi, graphicstableend
  5103 00003F89 72F5                <2> 	jb .clear
  5104 00003F8B E859260000          <2> 	call guisetup
  5105                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5106 00003F90 668B15[6E520000]    <2> 	mov dx, [resolutionx]
  5107 00003F97 668B0D[70520000]    <2> 	mov cx, [resolutiony]
  5108 00003F9E 6689D3              <2> 	mov bx, dx
  5109 00003FA1 6689C8              <2> 	mov ax, cx
  5110 00003FA4 66D1EB              <2> 	shr bx, 1
  5111 00003FA7 66D1E8              <2> 	shr ax, 1
  5112 00003FAA 6689DA              <2> 	mov dx, bx
  5113 00003FAD 66D1EA              <2> 	shr dx, 1
  5114 00003FB0 6689C1              <2> 	mov cx, ax
  5115 00003FB3 66D1E9              <2> 	shr cx, 1
  5116 00003FB6 6601D3              <2> 	add bx, dx
  5117 00003FB9 6601C8              <2> 	add ax, cx
  5118 00003FBC 66D1E9              <2> 	shr cx, 1
  5119 00003FBF 66C1EB03            <2> 	shr bx, 3
  5120 00003FC3 66C1E303            <2> 	shl bx, 3
  5121 00003FC7 66C1E804            <2> 	shr ax, 4
  5122 00003FCB 66C1E004            <2> 	shl ax, 4
  5123 00003FCF 66891D[EE670000]    <2> 	mov [termwindow], bx
  5124 00003FD6 66A3[F0670000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5125 00003FDC BE[EE670000]        <2> 	mov esi, termwindow
  5126 00003FE1 31DB                <2> 	xor ebx, ebx
  5127 00003FE3 6631C0              <2> 	xor ax, ax
  5128 00003FE6 E80C2D0000          <2> 	call showwindow
  5129 00003FEB E871130000          <2> 	call cursorgui
  5130 00003FF0 E87CDDFFFF          <2> 	call clear
  5131 00003FF5 C3                  <2> 	ret
  5132                              <2> 	
  5133                              <1> %endif
  5134                              <1> %include 'source/programs/help.asm'
  5135 00003FF6 FF2C68656C7000      <2> db 255,44,"help",0
  5136                              <2> lscmd:	
  5137 00003FFD B00D                <2> 		mov al, 13
  5138 00003FFF E83CE2FFFF          <2> 		call prcharq
  5139 00004004 BE[91300000]        <2> 		mov esi, progstart
  5140 00004009 BB[7E4E0000]        <2> 		mov ebx, progend
  5141 0000400E BE[E6A70000]        <2> dir:	mov esi, fileindex
  5142 00004013 8A06                <2> 	dirnxt:	mov al, [esi]
  5143 00004015 30E4                <2> 		xor ah, ah
  5144 00004017 3CFF                <2> 		cmp al, 255
  5145 00004019 7415                <2> 		je dirfnd
  5146 0000401B 46                  <2> 		inc esi
  5147 0000401C 81FE[E6AB0000]      <2> 		cmp esi,  fileindexend
  5148 00004022 7339                <2> 		jae dirdn
  5149 00004024 EBED                <2> 		jmp dirnxt
  5150                              <2> 	dirfnd3:
  5151 00004026 46                  <2> 		inc esi
  5152 00004027 81FE[E6AB0000]      <2> 		cmp esi, fileindexend
  5153 0000402D 76E4                <2> 		jbe dirnxt
  5154 0000402F 4E                  <2> 		dec esi
  5155 00004030 46                  <2> 	dirfnd:	inc esi
  5156 00004031 8A06                <2> 		mov al, [esi]
  5157 00004033 30E4                <2> 		xor ah, ah
  5158 00004035 3C2C                <2> 		cmp al, 44
  5159 00004037 740B                <2> 		je dirfnd2
  5160 00004039 46                  <2> 		inc esi
  5161 0000403A 81FE[E6AB0000]      <2> 		cmp esi,  fileindexend
  5162 00004040 731B                <2> 		jae dirdn
  5163 00004042 EBCF                <2> 		jmp dirnxt
  5164 00004044 46                  <2> 	dirfnd2: inc esi
  5165 00004045 E8AFDCFFFF          <2> 		call printquiet
  5166 0000404A 56                  <2> 		push esi
  5167 0000404B B009                <2> 		mov al, 9
  5168 0000404D E8EEE1FFFF          <2> 		call prcharq
  5169 00004052 5E                  <2> 		pop esi
  5170 00004053 81FE[E6AB0000]      <2> 		cmp esi,  fileindexend
  5171 00004059 7302                <2> 		jae dirdn
  5172 0000405B EBB6                <2> 		jmp dirnxt
  5173 0000405D BE[D0830000]        <2> 	dirdn:	mov esi, line
  5174 00004062 E8A4DCFFFF          <2> 			call print
  5175 00004067 C3                  <2> 			ret
  5176 00004068 00                  <2> currentdir db 0
  5177                              <1> %include 'source/programs/if.asm'
  5178 00004069 FF2C696600          <2> 	db 255,44,"if",0
  5179 0000406E 30C0                <2> ifcmd:	xor al, al
  5180 00004070 3805[60AE0000]      <2> 	cmp [BATCHISON], al
  5181 00004076 0F84BDF6FFFF        <2> 	je near notbatch
  5182 0000407C 8B1D[3B2C0000]      <2> 	mov ebx, [currentcommandloc]
  5183 00004082 81C303000000        <2> 	add ebx, 3
  5184 00004088 89DE                <2> 	mov esi, ebx
  5185 0000408A 8A06                <2> chkeqsn: mov al, [esi]
  5186 0000408C 3C00                <2> 	cmp al, 0
  5187 0000408E 0F84A5F6FFFF        <2> 	je near notbatch
  5188 00004094 3C3D                <2> 	cmp al, '='
  5189 00004096 0F8403000000        <2> 	je near chkeqdn
  5190 0000409C 46                  <2> 	inc esi
  5191 0000409D EBEB                <2> 	jmp chkeqsn
  5192 0000409F B000                <2> chkeqdn: mov al, 0 
  5193 000040A1 8806                <2> 	mov [esi], al
  5194 000040A3 46                  <2> 	inc esi
  5195 000040A4 E896EBFFFF          <2> 	call tester
  5196 000040A9 3C01                <2> 	cmp al, 1
  5197 000040AB 0F8405000000        <2> 	je near trueif
  5198 000040B1 E91C000000          <2> 	jmp falseif
  5199 000040B6 31C0                <2> trueif:	xor eax, eax
  5200 000040B8 A0[F7AD0000]        <2> 	mov al, [IFON]
  5201 000040BD FEC0                <2> 	inc al
  5202 000040BF A2[F7AD0000]        <2> 	mov [IFON], al
  5203 000040C4 30E4                <2> 	xor ah, ah
  5204 000040C6 BE[F8AD0000]        <2> 	mov esi, IFTRUE
  5205 000040CB 01C6                <2> 	add esi, eax
  5206 000040CD B401                <2> 	mov ah, 1
  5207 000040CF 8826                <2> 	mov [esi], ah
  5208 000040D1 C3                  <2> 	ret 
  5209 000040D2 31C0                <2> falseif: xor eax, eax
  5210 000040D4 A0[F7AD0000]        <2> 	mov al, [IFON]
  5211 000040D9 FEC0                <2> 	inc al
  5212 000040DB A2[F7AD0000]        <2> 	mov [IFON], al
  5213 000040E0 30E4                <2> 	xor ah, ah
  5214 000040E2 BE[F8AD0000]        <2> 	mov esi, IFTRUE
  5215 000040E7 01C6                <2> 	add esi, eax
  5216 000040E9 30E4                <2> 	xor ah, ah
  5217 000040EB 8826                <2> 	mov [esi], ah
  5218 000040ED C3                  <2> 	ret 
  5219                              <1> %ifdef network.included
  5220                              <1> 	%include 'source/programs/ipconfig.asm'
  5221 000040EE FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5222 000040F7 6700                <2>
  5223                              <2> ifconfig:
  5224 000040F9 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  5225 000040FF 81C609000000        <2> 	add esi, 9
  5226 00004105 803E00              <2> 	cmp byte [esi], 0
  5227 00004108 740B                <2> 	je .noip
  5228 0000410A E88D410000          <2> 	call strtoip
  5229 0000410F 890D[85830000]      <2> 	mov [sysip], ecx
  5230                              <2> .noip:
  5231                              <2> %ifdef ne2000.included
  5232 00004115 803D[13820000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5233 0000411C 751E                <2> 	jne .none2000
  5234 0000411E BE[14820000]        <2> 	mov esi, ne2000.name
  5235 00004123 E8E3DBFFFF          <2> 	call print
  5236 00004128 B9[36820000]        <2> 	mov ecx, ne2000.mac
  5237 0000412D E8EC410000          <2> 	call showmac
  5238 00004132 BE[D0830000]        <2> 	mov esi, line
  5239 00004137 E8CFDBFFFF          <2> 	call print
  5240                              <2> .none2000:
  5241                              <2> %endif
  5242                              <2> %ifdef rtl8139.included
  5243 0000413C 803D[807B0000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5244 00004143 751E                <2> 	jne .nortl8139
  5245 00004145 BE[877B0000]        <2> 	mov esi, rtl8139.name
  5246 0000414A E8BCDBFFFF          <2> 	call print
  5247 0000414F B9[817B0000]        <2> 	mov ecx, rtl8139.mac
  5248 00004154 E8C5410000          <2> 	call showmac
  5249 00004159 BE[D0830000]        <2> 	mov esi, line
  5250 0000415E E8A8DBFFFF          <2> 	call print
  5251                              <2> .nortl8139:
  5252                              <2> %endif
  5253                              <2> %ifdef rtl8169.included
  5254 00004163 803D[657D0000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5255 0000416A 751E                <2> 	jne .nortl8169
  5256 0000416C BE[6C7D0000]        <2> 	mov esi, rtl8169.name
  5257 00004171 E895DBFFFF          <2> 	call print
  5258 00004176 B9[667D0000]        <2> 	mov ecx, rtl8169.mac
  5259 0000417B E89E410000          <2> 	call showmac
  5260 00004180 BE[D0830000]        <2> 	mov esi, line
  5261 00004185 E881DBFFFF          <2> 	call print
  5262                              <2> .nortl8169:
  5263                              <2> %endif
  5264 0000418A 8B0D[85830000]      <2> 	mov ecx, [sysip]
  5265 00004190 E84D410000          <2> 	call showip
  5266 00004195 BE[D0830000]        <2> 	mov esi, line
  5267 0000419A E86CDBFFFF          <2> 	call print
  5268 0000419F C3                  <2> 	ret
  5269                              <2> 	
  5270                              <1> %endif
  5271                              <1> %include 'source/programs/keycode.asm'
  5272 000041A0 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5273 000041A9 00                  <2>
  5274                              <2> keycode:
  5275 000041AA C605[1A220000]00    <2> 	mov byte [trans], 0
  5276 000041B1 C605[B75F0000]00    <2> 	mov byte [threadson], 0
  5277                              <2> %ifdef io.serial
  5278                              <2> .noserial:
  5279                              <2> 	hlt
  5280                              <2> 	mov dx, [serial.address]
  5281                              <2> 	in al, dx
  5282                              <2> 	cmp al, 0
  5283                              <2> 	je .noserial
  5284                              <2> 	mov cl, al
  5285                              <2> 	call showhexsmall
  5286                              <2> 	cmp al, 0x1B
  5287                              <2> 	jne .noserial
  5288                              <2> 	in al, dx
  5289                              <2> 	mov cl, al
  5290                              <2> 	call showhexsmall
  5291                              <2> 	cmp cl, 0x5B
  5292                              <2> 	je .noserial
  5293                              <2> 	ret
  5294                              <2> %else
  5295 000041B8 E878150000          <2> 	call getkey
  5296 000041BD 31C0                <2> 	xor eax, eax
  5297 000041BF 31C9                <2> 	xor ecx, ecx
  5298 000041C1 8A0D[15570000]      <2> 	mov cl, [specialkey]
  5299 000041C7 80F900              <2> 	cmp cl, 0
  5300 000041CA 0F8405000000        <2> 	je near .nospecialkeycode
  5301 000041D0 E879ECFFFF          <2> 	call showhexsmall
  5302                              <2> .nospecialkeycode:
  5303 000041D5 66A1[18220000]      <2> 	mov ax, [lastkey]
  5304 000041DB 88E1                <2> 	mov cl, ah
  5305 000041DD E86CECFFFF          <2> 	call showhexsmall
  5306 000041E2 80FC01              <2> 	cmp ah, 1
  5307 000041E5 75C3                <2> 	jne keycode
  5308 000041E7 C3                  <2> 	ret
  5309                              <2> %endif
  5310                              <1> %ifdef gui.included
  5311                              <1> 	%include 'source/programs/line.asm'
  5312 000041E8 FF2C6C696E6500      <2> db 255,44,"line",0
  5313                              <2> linetester:
  5314 000041EF 803D[A0950000]00    <2> 	cmp byte [guion], 0
  5315 000041F6 0F841B000000        <2> 	je near .done
  5316 000041FC 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5317 00004203 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode
  5318 00004208 E868000000          <2> 	call .circletest
  5319 0000420D BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines
  5320 00004212 E801000000          <2> 	call .linetest
  5321                              <2> .done:
  5322 00004217 C3                  <2> 	ret
  5323                              <2> 
  5324                              <2> .linetest:
  5325 00004218 53                  <2> 	push ebx
  5326 00004219 E8D6000000          <2> 	call .stime
  5327 0000421E 5B                  <2> 	pop ebx
  5328 0000421F 31FF                <2> 	xor edi, edi
  5329                              <2> .ltlp
  5330 00004221 53                  <2> 	push ebx
  5331 00004222 E81C010000          <2> 	call .st
  5332 00004227 66F7D6              <2> 	not si
  5333 0000422A E814010000          <2> 	call .st
  5334 0000422F 5B                  <2> 	pop ebx
  5335 00004230 66F7D6              <2> 	not si
  5336 00004233 660335[61020000]    <2> 	add si, [timenanoseconds]
  5337 0000423A 4B                  <2> 	dec ebx
  5338 0000423B 81FB00000000        <2> 	cmp ebx, 0
  5339 00004241 77DE                <2> 	ja .ltlp
  5340 00004243 E8C4000000          <2> 	call .etime
  5341 00004248 53                  <2> 	push ebx	
  5342 00004249 57                  <2> 	push edi
  5343 0000424A E888220000          <2> 	call guiclear
  5344 0000424F E8C5220000          <2> 	call reloadallgraphics
  5345 00004254 59                  <2> 	pop ecx
  5346 00004255 E8D2ECFFFF          <2> 	call showdec
  5347 0000425A BE[85430000]        <2> 	mov esi, .msg
  5348 0000425F E8A7DAFFFF          <2> 	call print
  5349 00004264 59                  <2> 	pop ecx
  5350 00004265 E8C2ECFFFF          <2> 	call showdec
  5351 0000426A BE[B1430000]        <2> 	mov esi, .msgtime
  5352 0000426F E897DAFFFF          <2> 	call print
  5353 00004274 C3                  <2> 	ret
  5354                              <2> 	
  5355                              <2> .circletest:
  5356 00004275 53                  <2> 	push ebx
  5357 00004276 E879000000          <2> 	call .stime
  5358 0000427B 5B                  <2> 	pop ebx
  5359 0000427C 31FF                <2> 	xor edi, edi
  5360                              <2> .ctlp:
  5361 0000427E 53                  <2> 	push ebx
  5362 0000427F 668B0D[70520000]    <2> 	mov cx, [resolutiony]
  5363 00004286 66D1E9              <2> 	shr cx, 1
  5364 00004289 668B15[6E520000]    <2> 	mov dx, [resolutionx]
  5365 00004290 66D1EA              <2> 	shr dx, 1
  5366 00004293 6689C8              <2> 	mov ax, cx
  5367                              <2> .circle:
  5368 00004296 60                  <2> 	pusha
  5369 00004297 E8121E0000          <2> 	call drawcircle
  5370 0000429C 61                  <2> 	popa
  5371 0000429D 6648                <2> 	dec ax
  5372 0000429F 47                  <2> 	inc edi
  5373 000042A0 663D0100            <2> 	cmp ax, 1
  5374 000042A4 77F0                <2> 	ja .circle
  5375 000042A6 66F7D6              <2> 	not si
  5376                              <2> .circle2:
  5377 000042A9 60                  <2> 	pusha
  5378 000042AA E8FF1D0000          <2> 	call drawcircle
  5379 000042AF 61                  <2> 	popa
  5380 000042B0 47                  <2> 	inc edi
  5381 000042B1 6640                <2> 	inc ax
  5382 000042B3 6639C8              <2> 	cmp ax, cx
  5383 000042B6 76F1                <2> 	jbe .circle2
  5384 000042B8 5B                  <2> 	pop ebx
  5385 000042B9 66F7D6              <2> 	not si
  5386 000042BC 660335[61020000]    <2> 	add si, [timenanoseconds]
  5387 000042C3 4B                  <2> 	dec ebx
  5388 000042C4 81FB00000000        <2> 	cmp ebx, 0
  5389 000042CA 77B2                <2> 	ja .ctlp
  5390 000042CC E83B000000          <2> 	call .etime
  5391 000042D1 53                  <2> 	push ebx
  5392 000042D2 57                  <2> 	push edi
  5393 000042D3 59                  <2> 	pop ecx
  5394 000042D4 E853ECFFFF          <2> 	call showdec
  5395 000042D9 BE[9A430000]        <2> 	mov esi, .msgcircle
  5396 000042DE E828DAFFFF          <2> 	call print
  5397 000042E3 59                  <2> 	pop ecx
  5398 000042E4 E843ECFFFF          <2> 	call showdec
  5399 000042E9 BE[B1430000]        <2> 	mov esi, .msgtime
  5400 000042EE E818DAFFFF          <2> 	call print
  5401 000042F3 C3                  <2> 	ret
  5402                              <2> 	
  5403                              <2> .stime:
  5404 000042F4 F4                  <2> 	hlt
  5405 000042F5 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5406 000042FA 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5407 00004300 A3[C0430000]        <2> 	mov [.time], eax
  5408 00004305 891D[C4430000]      <2> 	mov [.time + 4], ebx
  5409 0000430B C3                  <2> 	ret
  5410                              <2> 	
  5411                              <2> .etime:
  5412 0000430C A1[5D020000]        <2> 	mov eax, [timeseconds]
  5413 00004311 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5414 00004317 8B0D[C0430000]      <2> 	mov ecx, [.time]
  5415 0000431D 8B15[C4430000]      <2> 	mov edx, [.time + 4]
  5416 00004323 C1EA0A              <2> 	shr edx, 10
  5417 00004326 C1EB0A              <2> 	shr ebx, 10
  5418 00004329 29C8                <2> 	sub eax, ecx
  5419 0000432B 3D00000000          <2> 	cmp eax, 0
  5420 00004330 740E                <2> 	je .notclp
  5421                              <2> .tclp:
  5422 00004332 81C340420F00        <2> 	add ebx, 1000000
  5423 00004338 48                  <2> 	dec eax
  5424 00004339 3D00000000          <2> 	cmp eax, 0
  5425 0000433E 75F2                <2> 	jne .tclp
  5426                              <2> .notclp:
  5427 00004340 29D3                <2> 	sub ebx, edx
  5428 00004342 C3                  <2> 	ret
  5429                              <2> 	
  5430                              <2> .st:
  5431 00004343 6631C0              <2> 	xor ax, ax
  5432 00004346 6631DB              <2> 	xor bx, bx
  5433 00004349 668B0D[70520000]    <2> 	mov cx, [resolutiony]
  5434 00004350 668B15[6E520000]    <2> 	mov dx, [resolutionx]
  5435                              <2> .lp:
  5436 00004357 60                  <2> 	pusha
  5437 00004358 E84E200000          <2> 	call drawline
  5438 0000435D 61                  <2> 	popa
  5439                              <2> .noswitch
  5440 0000435E 47                  <2> 	inc edi
  5441 0000435F 6643                <2> 	inc bx
  5442 00004361 664A                <2> 	dec dx
  5443 00004363 6681FB0000          <2> 	cmp bx, 0
  5444 00004368 74ED                <2> 	je .lp
  5445 0000436A 6681FA0000          <2> 	cmp dx, 0
  5446 0000436F 75E6                <2> 	jne .lp
  5447                              <2> .lp2:
  5448 00004371 60                  <2> 	pusha
  5449 00004372 E834200000          <2> 	call drawline
  5450 00004377 61                  <2> 	popa
  5451 00004378 47                  <2> 	inc edi
  5452 00004379 6640                <2> 	inc ax
  5453 0000437B 6649                <2> 	dec cx
  5454 0000437D 6681F90000          <2> 	cmp cx, 0
  5455 00004382 75ED                <2> 	jne .lp2
  5456 00004384 C3                  <2> 	ret
  5457                              <2> 	
  5458 00004385 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5459 0000438E 6520647261776E2069- <2>
  5460 00004397 6E2000              <2>
  5461 0000439A 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5462 000043A3 65726520647261776E- <2>
  5463 000043AC 20696E2000          <2>
  5464 000043B1 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5465 000043BA 6E64732E0A00        <2>
  5466 000043C0 0000000000000000    <2> .time dd 0,0	
  5467                              <1> %endif
  5468                              <1> %include 'source/programs/logout.asm'
  5469 000043C8 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5470 000043D1 E9EBE3FFFF          <2> 	jmp os
  5471                              <1> %include 'source/programs/loop.asm'
  5472 000043D6 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5473 000043DD 803D[61AE0000]00    <2> 	cmp byte [LOOPON], 0
  5474 000043E4 0F8501000000        <2> 	jne near filoop
  5475 000043EA C3                  <2> 	ret
  5476 000043EB 8B35[62AE0000]      <2> filoop: mov esi, [LOOPPOS]
  5477 000043F1 FE0D[F7AD0000]      <2> 	dec byte [IFON]
  5478 000043F7 C605[61AE0000]00    <2> 	mov byte [LOOPON], 0
  5479 000043FE 8935[5CAE0000]      <2> 	mov [BATCHPOS], esi
  5480 00004404 8935[61360000]      <2> 	mov [batchedi], esi
  5481 0000440A C3                  <2> 	ret 
  5482                              <1> %include 'source/programs/ls.asm'
  5483 0000440B FF2C6C7300          <2> db 255,44,"ls",0
  5484 00004410 BE[F5930000]        <2> 		mov esi, diskfileindex
  5485                              <2> 	diskindexdir:
  5486 00004415 803E5F              <2> 		cmp byte [esi], '_'
  5487 00004418 7440                <2> 		je nextdiskindexdir
  5488 0000441A E8DAD8FFFF          <2> 		call printquiet
  5489 0000441F 56                  <2> 		push esi
  5490 00004420 BE[7A440000]        <2> 		mov esi, disktab
  5491 00004425 E8CFD8FFFF          <2> 		call printquiet
  5492 0000442A 5E                  <2> 		pop esi
  5493 0000442B 8B4E05              <2> 		mov ecx, [esi + 5]
  5494 0000442E C605[4D2E0000]05    <2> 		mov byte [firsthexshown], 5
  5495 00004435 E8F2EAFFFF          <2> 		call showdec
  5496 0000443A 56                  <2> 		push esi
  5497 0000443B BE[D0830000]        <2> 		mov esi, line
  5498 00004440 E8B4D8FFFF          <2> 		call printquiet
  5499 00004445 5E                  <2> 		pop esi
  5500 00004446 81C609000000        <2> 		add esi, 9
  5501 0000444C 81FE[9F950000]      <2> 		cmp esi, enddiskfileindex
  5502 00004452 72C1                <2> 		jb diskindexdir
  5503 00004454 E81AE1FFFF          <2> 		call termcopy
  5504 00004459 C3                  <2> 		ret
  5505                              <2> 	nextdiskindexdir:
  5506 0000445A 46                  <2> 		inc esi
  5507 0000445B 803E00              <2> 		cmp byte [esi], 0
  5508 0000445E 75FA                <2> 		jne nextdiskindexdir
  5509 00004460 81C609000000        <2> 		add esi, 9
  5510 00004466 81FE[9F950000]      <2> 		cmp esi, enddiskfileindex
  5511 0000446C 72A7                <2> 		jb diskindexdir
  5512 0000446E E800E1FFFF          <2> 		call termcopy
  5513 00004473 C3                  <2> 		ret
  5514                              <2> 		
  5515 00004474 4469736B2000        <2> 		diskmsg db "Disk ",0
  5516 0000447A 0D09090900          <2> 		disktab db 13,9,9,9,0
  5517                              <1> %include 'source/programs/memory.asm'
  5518 0000447F FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5519 00004488 BE[A6950000]        <2> 	mov esi, memlistbuf
  5520 0000448D 31FF                <2> 	xor edi, edi
  5521 0000448F 668B3D[E6970000]    <2> 	mov di, [memlistend]
  5522 00004496 01F7                <2> 	add edi, esi
  5523                              <2> printmemmap:
  5524 00004498 8B0E                <2> 	mov ecx, [esi]
  5525 0000449A E8C3E9FFFF          <2> 	call showhex
  5526 0000449F 81C608000000        <2> 	add esi, 8
  5527 000044A5 8B0E                <2> 	mov ecx, [esi]
  5528 000044A7 E8B6E9FFFF          <2> 	call showhex
  5529 000044AC 81C608000000        <2> 	add esi, 8
  5530 000044B2 8B0E                <2> 	mov ecx, [esi]
  5531 000044B4 E8A9E9FFFF          <2> 	call showhex
  5532 000044B9 81C608000000        <2> 	add esi, 8
  5533 000044BF 57                  <2> 	push edi
  5534 000044C0 56                  <2> 	push esi
  5535 000044C1 BE[D0830000]        <2> 	mov esi, line
  5536 000044C6 E840D8FFFF          <2> 	call print
  5537 000044CB 5E                  <2> 	pop esi
  5538 000044CC 5F                  <2> 	pop edi
  5539 000044CD 39FE                <2> 	cmp esi, edi
  5540 000044CF 72C7                <2> 	jb printmemmap
  5541 000044D1 C3                  <2> 	ret
  5542                              <2> 	
  5543                              <1> %include 'source/programs/pci.asm'
  5544 000044D2 FF2C70636900        <2> db 255,44,"pci",0
  5545 000044D8 E862160000          <2> 	call pcidump
  5546 000044DD C3                  <2> 	ret 
  5547                              <1> %ifdef network.included
  5548                              <1> 	%include 'source/programs/ping.asm'
  5549 000044DE FF2C70696E6700      <2> db 255,44,"ping",0
  5550                              <2> ping:
  5551 000044E5 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  5552 000044EB 81C605000000        <2> 	add esi, 5
  5553 000044F1 E8A63D0000          <2> 	call strtoip
  5554 000044F6 890D[81450000]      <2> 	mov [.destip], ecx
  5555 000044FC E8E13D0000          <2> 	call showip
  5556 00004501 8B0D[85830000]      <2> 	mov ecx, [sysip]
  5557 00004507 890D[7D450000]      <2> 	mov [.sourceip]. ecx
  5558 0000450D 31C0                <2> 	xor eax, eax
  5559 0000450F 31DB                <2> 	xor ebx, ebx
  5560 00004511 66A3[7B450000]      <2> 	mov [.checksum], ax
  5561 00004517 66A3[87450000]      <2> 	mov [.icmpchecksum], ax
  5562 0000451D BF[71450000]        <2> 	mov edi, .header
  5563 00004522 BE[85450000]        <2> 	mov esi, .headerend
  5564 00004527 E8483D0000          <2> 	call getchecksum
  5565 0000452C 66890D[7B450000]    <2> 	mov [.checksum], cx
  5566 00004533 BF[85450000]        <2> 	mov edi, .icmp
  5567 00004538 BE[AD450000]        <2> 	mov esi, .packetend
  5568 0000453D E8323D0000          <2> 	call getchecksum
  5569 00004542 66890D[87450000]    <2> 	mov [.icmpchecksum], cx
  5570 00004549 BF[63450000]        <2> 	mov edi, .packet
  5571 0000454E BE[AD450000]        <2> 	mov esi, .packetend
  5572 00004553 E8043D0000          <2> 	call sendpacket
  5573 00004558 BE[D0830000]        <2> 	mov esi, line
  5574 0000455D E8A9D7FFFF          <2> 	call print
  5575 00004562 C3                  <2> 	ret
  5576                              <2> 	
  5577                              <2> 	
  5578                              <2> 	
  5579                              <2> .packet:
  5580 00004563 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5581 00004569 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5582 0000456F 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5583                              <2> .header:
  5584 00004571 45                  <2> .version	db 0x45
  5585 00004572 00                  <2> .services	db 0
  5586 00004573 003C                <2> .length	db 0,0x3C
  5587 00004575 0000                <2> .id		dw 0
  5588 00004577 00                  <2> .flags	db 0
  5589 00004578 00                  <2> .fragment db 0
  5590 00004579 80                  <2> .ttl	db 128
  5591 0000457A 01                  <2> .protocol db 1 ;ICMP
  5592 0000457B 0000                <2> .checksum dw 0
  5593 0000457D 00000000            <2> .sourceip dd 0
  5594 00004581 00000000            <2> .destip dd 0
  5595                              <2> .headerend:
  5596                              <2> .icmp:
  5597 00004585 08                  <2> .icmptype db 8 ;Ping request
  5598 00004586 00                  <2> .icmpcode db 0
  5599 00004587 0000                <2> .icmpchecksum dw 0
  5600 00004589 0001                <2> .icmpid db 0,1
  5601 0000458B 0000                <2> .sequence dw 0
  5602 0000458D 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5603 00004596 6A6B6C6D6E6F707172- <2>
  5604 0000459F 737475767761626364- <2>
  5605 000045A8 6566676869          <2>
  5606                              <2> .packetend
  5607                              <1> %endif
  5608                              <1> %include 'source/programs/play.asm'
  5609 000045AD FF2C706C61796100    <2> db 255,44,"playa",0
  5610 000045B5 8B3D[3B2C0000]      <2> 	mov edi, [currentcommandloc]
  5611 000045BB 81C706000000        <2> 	add edi, 6
  5612 000045C1 E827000000          <2> 	call playasync
  5613 000045C6 C3                  <2> 	ret
  5614 000045C7 FF2C706C617900      <2> db 255,44,"play",0
  5615                              <2> play:
  5616 000045CE 8B3D[3B2C0000]      <2> 	mov edi, [currentcommandloc]
  5617 000045D4 81C705000000        <2> 	add edi, 5
  5618 000045DA E80E000000          <2> 	call playasync
  5619                              <2> .waitforsound:
  5620                              <2> %ifdef sound.included
  5621                              <2> 	mov eax, [Length0]
  5622                              <2> 	or ax, [Length1]
  5623                              <2> %endif
  5624 000045DF 0A05[65020000]      <2> 	or al, [soundon]
  5625 000045E5 3D00000000          <2> 	cmp eax, 0
  5626 000045EA 75F3                <2> 	jne .waitforsound
  5627 000045EC C3                  <2> 	ret
  5628                              <2> playasync:
  5629 000045ED BE0000C000          <2> 	mov esi, 0xC00000
  5630 000045F2 E821180000          <2> 	call loadfile
  5631 000045F7 81FA94010000        <2> 	cmp edx, 404
  5632 000045FD 743F                <2> 	je nosoundfound
  5633 000045FF BB0000C000          <2> 	mov ebx, 0xC00000
  5634 00004604 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5635 0000460B 0F845A000000        <2> 	je near wave_player
  5636 00004611 66813B534E          <2> 	cmp word [ebx], "SN"
  5637 00004616 7526                <2> 	jne nosoundfound
  5638 00004618 81C306000000        <2> 	add ebx, 6
  5639 0000461E 891D[68020000]      <2> 	mov [soundpos], ebx
  5640 00004624 035BFC              <2> 	add ebx, [ebx - 4]
  5641 00004627 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5642 0000462D 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5643 00004635 00                  <2>
  5644 00004636 C605[65020000]01    <2> 	mov byte [soundon], 1
  5645 0000463D C3                  <2> 	ret
  5646                              <2> nosoundfound:
  5647 0000463E BE[64460000]        <2> 	mov esi, notfoundsound
  5648 00004643 E8C3D6FFFF          <2> 	call print
  5649 00004648 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  5650 0000464E 81C605000000        <2> 	add esi, 5
  5651 00004654 E8B2D6FFFF          <2> 	call print
  5652 00004659 BE[9F830000]        <2> 	mov esi, notfound2
  5653 0000465E E8A8D6FFFF          <2> 	call print
  5654 00004663 C3                  <2> 	ret
  5655 00004664 706C61793A2000      <2> notfoundsound db "play: ",0
  5656                              <2> 
  5657                              <2> %ifdef sound.included
  5658                              <2> sbplay:
  5659                              <2> 		mov esi, 0xC00000
  5660                              <2> 		mov ebx, esi
  5661                              <2> 		add esi, WAVSTART
  5662                              <2> 		sub edi, esi
  5663                              <2> 		mov [Length1], di
  5664                              <2> 		shr edi, 15
  5665                              <2> 		mov [Length0], edi
  5666                              <2> 		mov ecx, [ebx + 24]
  5667                              <2> 		mov [Freq], ecx
  5668                              <2> 		xor eax, eax
  5669                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  5670                              <2> 		add edx, WAVSTART
  5671                              <2> 		add	eax, edx
  5672                              <2> 		mov esi, eax
  5673                              <2> 		xor ecx, ecx
  5674                              <2> 		xor ebx, ebx
  5675                              <2> 		mov [SegLoc], bx
  5676                              <2> 		add ebx, 0x80000
  5677                              <2> 		mov cx, 0xFFFF
  5678                              <2> 		cmp di, 0
  5679                              <2> 		jne .autoinit
  5680                              <2> 		mov cx, [Length1]
  5681                              <2> 		mov byte [OddLength], 1
  5682                              <2> 		cmp cx, 32768
  5683                              <2> 		jae .autoinit
  5684                              <2> 		mov byte [OddLength], 0
  5685                              <2> 		shl cx, 1
  5686                              <2> 		inc edi
  5687                              <2> .autoinit:
  5688                              <2> 		dec edi
  5689                              <2> 		mov [Length0], edi
  5690                              <2> 		mov [Length1], cx
  5691                              <2> 		shr cx, 1
  5692                              <2> 		inc cx
  5693                              <2> 		add eax, ecx
  5694                              <2> 		mov [NextMemLoc], eax
  5695                              <2> 		mov	[MemLoc], esi
  5696                              <2> 		call DMACopy
  5697                              <2> 		xor ebx, ebx
  5698                              <2> 		mov bx, [SegLoc]
  5699                              <2> 		xor ecx, ecx
  5700                              <2> 		mov cx, [Length1]
  5701                              <2> 		shr cx, 1
  5702                              <2> 		inc cx
  5703                              <2> 		add ebx, ecx
  5704                              <2> 		mov [SegLoc], bx
  5705                              <2> 		add ebx, 0x80000
  5706                              <2> 		mov esi, [NextMemLoc]
  5707                              <2> 		mov eax, esi
  5708                              <2> 		add eax, ecx
  5709                              <2> 		mov [NextMemLoc], eax
  5710                              <2> 		mov	[MemLoc], esi
  5711                              <2> 		call DMACopy
  5712                              <2> 		call DMAPlay
  5713                              <2> 		call PlayDSP
  5714                              <2> 		ret
  5715                              <2> WAVSTART equ 64;44
  5716                              <2> wave_player:
  5717                              <2> 	cmp byte [SoundBlaster], 1
  5718                              <2> 	je near sbplay
  5719                              <2> 	mov esi, nosoundblaster
  5720                              <2> 	call print
  5721                              <2> 	ret
  5722                              <2> %else
  5723                              <2> 	wave_player:
  5724 0000466B BE[76460000]        <2> 		mov esi, nosoundblaster
  5725 00004670 E896D6FFFF          <2> 		call print
  5726 00004675 C3                  <2> 		ret
  5727                              <2> %endif
  5728 00004676 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5729 0000467F 426C61737465722064- <2>
  5730 00004688 657465637465642E0A- <2>
  5731 00004691 00                  <2>
  5732                              <1> %include 'source/programs/pwd.asm'
  5733 00004692 FF2C70776400        <2> db 255,44,"pwd",0
  5734 00004698 BE[F2AB0000]        <2> 	mov esi, currentfolder
  5735 0000469D E857D6FFFF          <2> 	call printquiet
  5736 000046A2 BE[D0830000]        <2> 	mov esi, line
  5737 000046A7 E85FD6FFFF          <2> 	call print
  5738 000046AC C3                  <2> 	ret
  5739                              <2> 	
  5740                              <1> %include 'source/programs/reboot.asm'
  5741 000046AD FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5742 000046B6 0F011D[C0460000]    <2> 		lidt [idtreboot]
  5743 000046BD CD00                <2> 		int 0
  5744 000046BF F4                  <2> 		hlt
  5745                              <2> 	
  5746 000046C0 0000                <2> 	idtreboot dw 0
  5747 000046C2 00000000            <2> 			  dd 0
  5748                              <2> 
  5749                              <2> 	coldboot:
  5750 000046C6 66B84000            <2> 		MOV AX, 0040h
  5751 000046CA 8EC0                <2> 		MOV ES, AX
  5752 000046CC 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5753 000046D5 00                  <2>
  5754 000046D6 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5755 000046DD CF                  <2> 		IRET
  5756                              <2> 
  5757                              <2> 	warmboot:
  5758 000046DE 66B84000            <2> 		MOV AX, 0040h
  5759 000046E2 8EC0                <2> 		MOV ES, AX
  5760 000046E4 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5761 000046ED 12                  <2>
  5762 000046EE EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5763 000046F5 CF                  <2> 		IRET
  5764                              <2> 		
  5765                              <1> %include 'source/programs/reg.asm'
  5766 000046F6 FF2C72656700        <2> db 255,44,"reg",0
  5767 000046FC CD03                <2> 	int 3
  5768 000046FE C3                  <2> 	ret 
  5769                              <1> %include 'source/programs/show.asm'
  5770 000046FF FF2C73686F7700      <2> db 255,44,"show",0
  5771 00004706 8B3D[3B2C0000]      <2> 		mov edi, [currentcommandloc]
  5772 0000470C 81C705000000        <2> 		add edi, 5
  5773 00004712 BE00008000          <2> 		mov esi, 0x800000
  5774 00004717 E8FC160000          <2> 		call loadfile
  5775 0000471C 81FA94010000        <2> 		cmp edx, 404
  5776 00004722 0F8483000000        <2> 		je near filenotfound
  5777 00004728 BE00008000          <2> 		mov esi, 0x800000
  5778                              <2> %ifdef gui.included
  5779 0000472D 66813E424D          <2> 		cmp word [esi], "BM"
  5780 00004732 7410                <2> 		je bmpfound
  5781                              <2> %endif
  5782 00004734 E8D2D5FFFF          <2> 		call print
  5783 00004739 BE[D0830000]        <2> 		mov esi, line
  5784 0000473E E8C8D5FFFF          <2> 		call print
  5785 00004743 C3                  <2> 		ret
  5786                              <2> %ifdef gui.included
  5787                              <2> bmpfound:
  5788 00004744 803D[A0950000]00    <2> 		cmp byte [guion], 0
  5789 0000474B 0F8428000000        <2> 		je near noguibmp
  5790 00004751 BE00008000          <2> 		mov esi, 0x800000
  5791 00004756 31C9                <2> 		xor ecx, ecx
  5792 00004758 31D2                <2> 		xor edx, edx
  5793 0000475A 31C0                <2> 		xor eax, eax
  5794 0000475C 31DB                <2> 		xor ebx, ebx
  5795 0000475E E879180000          <2> 		call showbmp
  5796 00004763 30C0                <2> 		xor al, al
  5797 00004765 B405                <2> 		mov ah, 5
  5798 00004767 CD30                <2> 		int 30h
  5799 00004769 E8691D0000          <2> 		call guiclear
  5800 0000476E E8481A0000          <2> 		call clearmousecursor
  5801 00004773 E8A11D0000          <2> 		call reloadallgraphics
  5802 00004778 C3                  <2> 		ret
  5803                              <2> noguibmp:
  5804 00004779 BE[84470000]        <2> 		mov esi, warnguimsg
  5805 0000477E E888D5FFFF          <2> 		call print
  5806 00004783 C3                  <2> 		ret
  5807 00004784 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5808 0000478D 6E6F7420626520646F- <2>
  5809 00004796 6E6520776974686F75- <2>
  5810 0000479F 742074686520475549- <2>
  5811 000047A8 2E0A00              <2>
  5812                              <2> %endif
  5813                              <2> 
  5814                              <2> filenotfound:
  5815 000047AB BE[DE470000]        <2> 		mov esi, filenf
  5816 000047B0 E856D5FFFF          <2> 		call print
  5817 000047B5 8B35[3B2C0000]      <2> 		mov esi, [currentcommandloc]
  5818                              <2> findfilenotfoundzero:
  5819 000047BB 8A06                <2> 		mov al, [esi]
  5820 000047BD 46                  <2> 		inc esi
  5821 000047BE 3C00                <2> 		cmp al, 0
  5822 000047C0 7411                <2> 		je nofilenamenotfound
  5823 000047C2 81FE[66C60000]      <2> 		cmp esi, buftxtend
  5824 000047C8 7309                <2> 		jae nofilenamenotfound
  5825 000047CA 3C20                <2> 		cmp al, " "
  5826 000047CC 75ED                <2> 		jne findfilenotfoundzero
  5827 000047CE E838D5FFFF          <2> 		call print
  5828                              <2> nofilenamenotfound:
  5829 000047D3 BE[E9470000]        <2> 		mov esi, filenf2
  5830 000047D8 E82ED5FFFF          <2> 		call print
  5831 000047DD C3                  <2> 		ret
  5832 000047DE 5468652066696C6520- <2> filenf db "The file ",34,0
  5833 000047E7 2200                <2>
  5834 000047E9 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5835 000047F2 6F7420626520666F75- <2>
  5836 000047FB 6E642E0A00          <2>
  5837                              <1> %include 'source/programs/shush.asm'
  5838 00004800 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5839                              <2> shushprog:
  5840                              <2> %ifdef gui.included
  5841 00004808 803D[A0950000]00    <2> 	cmp byte [guion], 0
  5842 0000480F 0F84B4000000        <2> 	je near .noswitchsize
  5843 00004815 8B35[3B2C0000]      <2> 	mov esi, [currentcommandloc]
  5844 0000481B 81C606000000        <2> 	add esi, 6
  5845 00004821 56                  <2> 	push esi
  5846 00004822 4E                  <2> 	dec esi
  5847                              <2> .findspace:
  5848 00004823 46                  <2> 	inc esi
  5849 00004824 8A06                <2> 	mov al, [esi]
  5850 00004826 3C00                <2> 	cmp al, 0
  5851 00004828 0F849B000000        <2> 	je near .noswitchsize
  5852 0000482E 3C58                <2> 	cmp al, "X"
  5853 00004830 7408                <2> 	je .donefind
  5854 00004832 3C78                <2> 	cmp al, "x"
  5855 00004834 7404                <2> 	je .donefind
  5856 00004836 3C20                <2> 	cmp al, " "
  5857 00004838 75E9                <2> 	jne .findspace
  5858                              <2> .donefind:
  5859 0000483A 30C0                <2> 	xor al, al
  5860 0000483C 8806                <2> 	mov [esi], al
  5861 0000483E 46                  <2> 	inc esi
  5862 0000483F 89F7                <2> 	mov edi, esi
  5863 00004841 E8C8E7FFFF          <2> 	call cnvrttxt
  5864 00004846 89C8                <2> 	mov eax, ecx
  5865 00004848 5E                  <2> 	pop esi
  5866 00004849 50                  <2> 	push eax
  5867 0000484A 89F7                <2> 	mov edi, esi
  5868 0000484C E8BDE7FFFF          <2> 	call cnvrttxt
  5869 00004851 89CB                <2> 	mov ebx, ecx
  5870 00004853 58                  <2> 	pop eax	
  5871 00004854 6681FB0000          <2> 	cmp bx, 0
  5872 00004859 0F846A000000        <2> 	je near .noswitchsize
  5873 0000485F 663D0000            <2> 	cmp ax, 0
  5874 00004863 0F8460000000        <2> 	je near .noswitchsize
  5875 00004869 66C1E303            <2> 	shl bx, 3
  5876 0000486D 66C1E004            <2> 	shl ax, 4
  5877 00004871 663B1D[6E520000]    <2> 	cmp bx, [resolutionx]
  5878 00004878 7607                <2> 	jbe .nofixx
  5879 0000487A 668B1D[6E520000]    <2> 	mov bx, [resolutionx]
  5880                              <2> .nofixx:
  5881 00004881 66051000            <2> 	add ax, 16
  5882 00004885 663B05[70520000]    <2> 	cmp ax, [resolutiony]
  5883 0000488C 7606                <2> 	jbe .nofixy
  5884 0000488E 66A1[70520000]      <2> 	mov ax, [resolutiony]
  5885                              <2> .nofixy:
  5886 00004894 662D1000            <2> 	sub ax, 16
  5887 00004898 6631C9              <2> 	xor cx, cx
  5888 0000489B 6631D2              <2> 	xor dx, dx
  5889 0000489E 66891D[EE670000]    <2> 	mov [termwindow], bx
  5890 000048A5 66A3[F0670000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5891 000048AB BE[EE670000]        <2> 	mov esi, termwindow
  5892 000048B0 31DB                <2> 	xor ebx, ebx
  5893 000048B2 6631C0              <2> 	xor ax, ax
  5894 000048B5 E83D240000          <2> 	call showwindow
  5895 000048BA E8181C0000          <2> 	call guiclear
  5896 000048BF E8ADD4FFFF          <2> 	call clear
  5897 000048C4 E8501C0000          <2> 	call reloadallgraphics
  5898                              <2> .noswitchsize:
  5899                              <2> %endif
  5900 000048C9 BE[D4480000]        <2> 	mov esi, shushmsg
  5901 000048CE E838D4FFFF          <2> 	call print
  5902 000048D3 C3                  <2> 	ret
  5903 000048D4 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5904 000048DD 6F2074686520536F6C- <2>
  5905 000048E6 6C65724F5320486172- <2>
  5906 000048EF 646C7920556E69782D- <2>
  5907 000048F8 436F6D70617469626C- <2>
  5908 00004901 65205368656C6C210A- <2>
  5909 0000490A 00                  <2>
  5910                              <1> %include 'source/programs/system.asm'
  5911 0000490B FF2C73797374656D00  <2> 	db 255,44,"system",0
  5912 00004914 BE[114A0000]        <2> 	mov esi, kernelinfomsg
  5913 00004919 E8DBD3FFFF          <2> 	call printquiet
  5914 0000491E B9[F5930000]        <2> 	mov ecx, osend
  5915 00004923 E804E6FFFF          <2> 	call showdec
  5916 00004928 BE[264A0000]        <2> 	mov esi, diskbytemsg
  5917 0000492D E8C7D3FFFF          <2> 	call printquiet
  5918 00004932 B9[F5930000]        <2> 	mov ecx, osend
  5919 00004937 81C1[D4AE0100]      <2> 	add ecx, commandbufend
  5920 0000493D 81E9[A0950000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5921 00004943 E8E4E5FFFF          <2> 	call showdec
  5922 00004948 BE[3D4A0000]        <2> 	mov esi, membytemsg
  5923 0000494D E8A7D3FFFF          <2> 	call printquiet
  5924 00004952 BE[884A0000]        <2> 	mov esi, endofmemmsg
  5925 00004957 E89DD3FFFF          <2> 	call printquiet
  5926 0000495C B9[E8E21100]        <2> 	mov ecx, bssend
  5927 00004961 E8FCE4FFFF          <2> 	call showhex
  5928 00004966 BE[564A0000]        <2> 	mov esi, systeminfomsg
  5929 0000496B E889D3FFFF          <2> 	call printquiet
  5930                              <2> getcpuspeed:
  5931 00004970 B8FE000000          <2> 	mov eax, 0xFE
  5932 00004975 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5933 00004977 B020                <2> 	mov al, 0x20
  5934 00004979 E620                <2> 	out 0x20, al
  5935 0000497B F4                  <2> 	hlt
  5936 0000497C 0F31                <2> 	rdtsc
  5937 0000497E 89D6                <2> 	mov esi, edx
  5938 00004980 89C7                <2> 	mov edi, eax
  5939 00004982 31C0                <2> 	xor eax, eax
  5940 00004984 C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  5941                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5942 0000498B 40                  <2> 	inc eax
  5943 0000498C EBFD                <2> 	jmp cpuspeedloop
  5944                              <2> cpuspeedloopend:
  5945 0000498E 0F31                <2> 	rdtsc
  5946 00004990 29F8                <2> 	sub eax, edi
  5947 00004992 29F2                <2> 	sub edx, esi
  5948 00004994 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  5949 0000499A A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  5950 0000499F 31C0                <2> 	xor eax, eax
  5951 000049A1 E621                <2> 	out 0x21, al
  5952 000049A3 B020                <2> 	mov al, 0x20
  5953 000049A5 E620                <2> 	out 0x20, al
  5954 000049A7 31D2                <2> 	xor edx, edx
  5955 000049A9 31C0                <2> 	xor eax, eax
  5956 000049AB A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  5957 000049B0 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5958                              <2> 				;result by 2
  5959 000049B2 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  5960 000049B8 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5961 000049BB F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5962 000049BD 89C1                <2> 	mov ecx, eax
  5963 000049BF E868E5FFFF          <2> 	call showdec
  5964 000049C4 BE[6C4A0000]        <2> 	mov esi, cpuspeedmsg
  5965 000049C9 E82BD3FFFF          <2> 	call printquiet
  5966 000049CE 31D2                <2> 	xor edx, edx
  5967 000049D0 A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  5968 000049D5 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  5969 000049DB 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  5970 000049E1 C1EB0A              <2> 	shr ebx, 10
  5971 000049E4 F7F3                <2> 	div ebx
  5972 000049E6 89C1                <2> 	mov ecx, eax
  5973 000049E8 E83FE5FFFF          <2> 	call showdec
  5974 000049ED BE[724A0000]        <2> 	mov esi, cpuclockmsg
  5975 000049F2 E802D3FFFF          <2> 	call printquiet
  5976 000049F7 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  5977 000049FD C1E914              <2> 	shr ecx, 20
  5978 00004A00 41                  <2> 	inc ecx	;the reading is one MB behind
  5979 00004A01 E826E5FFFF          <2> 	call showdec
  5980 00004A06 BE[774A0000]        <2> 	mov esi, memoryspacemsg
  5981 00004A0B E8FBD2FFFF          <2> 	call print
  5982                              <2> %ifdef sound.included
  5983                              <2> 	cmp byte [SoundBlaster], 0
  5984                              <2> 	je .nosb
  5985                              <2> 	mov esi, soundblastermsg
  5986                              <2> 	call print
  5987                              <2> .nosb:
  5988                              <2> %endif
  5989 00004A10 C3                  <2> 	ret
  5990                              <2> 
  5991 00004A11 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  5992 00004A1A 666F726D6174696F6E- <2>
  5993 00004A23 3A0A00              <2>
  5994 00004A26 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5995 00004A2F 6B2053706163652055- <2>
  5996 00004A38 7365640A00          <2>
  5997 00004A3D 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  5998 00004A46 6F7279205370616365- <2>
  5999 00004A4F 20557365640A00      <2>
  6000 00004A56 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6001 00004A5F 6E666F726D6174696F- <2>
  6002 00004A68 6E3A0A00            <2>
  6003                              <2> %ifdef sound.included
  6004                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6005                              <2> %endif
  6006 00004A6C 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6007 00004A72 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6008 00004A77 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6009 00004A80 2053706163650A00    <2>
  6010 00004A88 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6011 00004A91 6D6F72792053706163- <2>
  6012 00004A9A 653A20307800        <2>
  6013                              <1> %include 'source/programs/time.asm'
  6014 00004AA0 082E30303030303030- <2> timenscache db 8,".000000000"
  6015 00004AA9 3030                <2>
  6016 00004AAB 200A00              <2> timenscacheend: db " ",10,0
  6017 00004AAE 00                  <2> istimeset db 0
  6018 00004AAF 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6019 00004AB8 2063757272656E7420- <2>
  6020 00004AC1 554E49582074696D65- <2>
  6021 00004ACA 3A0A00              <2>
  6022 00004ACD 00<rept>            <2> timeinputbuffer times 12 db 0
  6023 00004AD9 00                  <2> timeinputbend: db 0
  6024                              <2> 
  6025 00004ADA FF2C74696D6500      <2> db 255,44,"time",0
  6026 00004AE1 803D[AE4A0000]00    <2> 	cmp byte [istimeset], 0
  6027 00004AE8 753A                <2> 	jne timeisset
  6028 00004AEA BE[AF4A0000]        <2> 	mov esi, settimemsg
  6029 00004AEF E817D2FFFF          <2> 	call print
  6030 00004AF4 BE[CD4A0000]        <2> 	mov esi, timeinputbuffer
  6031 00004AF9 BF[D94A0000]        <2> 	mov edi, timeinputbend
  6032 00004AFE E8ECD2FFFF          <2> 	call readline
  6033 00004B03 BE[CD4A0000]        <2> 	mov esi, timeinputbuffer
  6034 00004B08 31FF                <2> 	xor edi, edi
  6035 00004B0A E8FFE4FFFF          <2> 	call cnvrttxt
  6036 00004B0F 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6037 00004B15 31C9                <2> 	xor ecx, ecx
  6038 00004B17 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6039 00004B1D C605[AE4A0000]01    <2> 	mov byte [istimeset], 1
  6040                              <2> timeisset:
  6041 00004B24 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6042 00004B2A E8FDE3FFFF          <2> 	call showdec
  6043                              <2> 	
  6044 00004B2F 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6045 00004B35 BE[A04A0000]        <2> 	mov esi, timenscache
  6046 00004B3A C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6047 00004B41 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6048 00004B48 C6460A30            <2> 	mov byte [esi + 10], "0"
  6049 00004B4C BE[AB4A0000]        <2> 	mov esi, timenscacheend
  6050 00004B51 E8B9E1FFFF          <2> 	call convert
  6051 00004B56 BE[A04A0000]        <2> 	mov esi, timenscache
  6052 00004B5B E8ABD1FFFF          <2> 	call print
  6053                              <2> 	
  6054 00004B60 E80F000000          <2> 	call time
  6055 00004B65 BE[404D0000]        <2> 	mov esi, timeshow
  6056 00004B6A E89CD1FFFF          <2> 	call print
  6057 00004B6F E9BC000000          <2> 	jmp findday
  6058                              <2> time:
  6059 00004B74 E84F010000          <2> 	call tstackput1
  6060 00004B79 B00A                <2> 	mov al,10			;Get RTC register A
  6061 00004B7B E879010000          <2> 	call tget1
  6062 00004B80 A880                <2> 	test al,0x80			;Is update in progress?
  6063 00004B82 75F0                <2> 	jne time				; yes, wait
  6064                              <2> 
  6065 00004B84 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6066 00004B86 E86E010000          <2> 	call tget1
  6067 00004B8B A2[374D0000]        <2> 	mov [RTCtimeSecond],al
  6068                              <2> 
  6069 00004B90 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6070 00004B92 E862010000          <2> 	call tget1
  6071 00004B97 A2[384D0000]        <2> 	mov [RTCtimeMinute],al
  6072                              <2> 
  6073 00004B9C B004                <2> 	mov al,0x04			;Get hours (see notes)
  6074 00004B9E E856010000          <2> 	call tget1
  6075 00004BA3 A2[394D0000]        <2> 	mov [RTCtimeHour],al
  6076                              <2> 
  6077 00004BA8 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6078 00004BAA E84A010000          <2> 	call tget1
  6079 00004BAF A2[3A4D0000]        <2> 	mov [RTCtimeDay],al
  6080                              <2> 
  6081 00004BB4 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6082 00004BB6 E83E010000          <2> 	call tget1
  6083 00004BBB A2[3B4D0000]        <2> 	mov [RTCtimeMonth],al
  6084                              <2> 
  6085 00004BC0 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6086 00004BC2 E832010000          <2> 	call tget1
  6087 00004BC7 A2[3C4D0000]        <2> 	mov [RTCtimeYear],al
  6088                              <2> 	
  6089 00004BCC BE[404D0000]        <2> 	mov esi, timeshow
  6090 00004BD1 8A2D[394D0000]      <2> 	mov ch, [RTCtimeHour]
  6091 00004BD7 E828010000          <2> 	call tput1
  6092 00004BDC 8A2D[384D0000]      <2> 	mov ch, [RTCtimeMinute]
  6093 00004BE2 E81D010000          <2> 	call tput1
  6094 00004BE7 8A2D[374D0000]      <2> 	mov ch, [RTCtimeSecond]
  6095 00004BED E812010000          <2> 	call tput1
  6096 00004BF2 BE[494D0000]        <2> 	mov esi, dateshow
  6097 00004BF7 8A2D[3B4D0000]      <2> 	mov ch, [RTCtimeMonth]
  6098 00004BFD E802010000          <2> 	call tput1
  6099 00004C02 8A2D[3A4D0000]      <2> 	mov ch, [RTCtimeDay]
  6100 00004C08 E8F7000000          <2> 	call tput1
  6101 00004C0D B520                <2> 	mov ch, 0x20
  6102 00004C0F E8F0000000          <2> 	call tput1
  6103 00004C14 4E                  <2> 	dec esi
  6104 00004C15 8A2D[3C4D0000]      <2> 	mov ch, [RTCtimeYear]
  6105 00004C1B E8E4000000          <2> 	call tput1
  6106 00004C20 E8BD000000          <2> 	call tstackget1
  6107 00004C25 C3                  <2> 	ret
  6108 00004C26 BE[404D0000]        <2> 	mov esi, timeshow
  6109 00004C2B E8DBD0FFFF          <2> 	call print
  6110                              <2> ;;get day of week
  6111                              <2> ;;add these:
  6112                              <2> ;;century value
  6113                              <2> ;;last 2 digits of year
  6114                              <2> ;;last 2 digits of year right shifted twice
  6115                              <2> ;;month table value
  6116                              <2> ;;day of the month
  6117                              <2> ;;divide these by 7
  6118                              <2> ;;the remainder is the day
  6119                              <2> findday:
  6120 00004C30 31C0                <2> 	xor eax, eax
  6121                              <2> ;;first convert the values from BCD to hex
  6122 00004C32 A0[3A4D0000]        <2> 	mov al, [RTCtimeDay]
  6123 00004C37 E873000000          <2> 	call converttohex
  6124 00004C3C 8825[3D4D0000]      <2> 	mov [dayhex], ah
  6125 00004C42 A0[3B4D0000]        <2> 	mov al, [RTCtimeMonth]
  6126 00004C47 E863000000          <2> 	call converttohex
  6127 00004C4C 8825[3E4D0000]      <2> 	mov [monthhex], ah
  6128 00004C52 A0[3C4D0000]        <2> 	mov al, [RTCtimeYear]
  6129 00004C57 E853000000          <2> 	call converttohex
  6130 00004C5C 8825[3F4D0000]      <2> 	mov [yearhex], ah
  6131 00004C62 31C0                <2> 	xor eax, eax
  6132 00004C64 A0[3F4D0000]        <2> 	mov al, [yearhex]
  6133 00004C69 C0E802              <2> 	shr al, 2
  6134 00004C6C 0205[3F4D0000]      <2> 	add al, [yearhex]
  6135 00004C72 0506000000          <2> 	add eax, 6
  6136 00004C77 31DB                <2> 	xor ebx, ebx
  6137 00004C79 8A1D[3E4D0000]      <2> 	mov bl, [monthhex]
  6138 00004C7F FECB                <2> 	dec bl
  6139 00004C81 81C3[5E4D0000]      <2> 	add ebx, month
  6140 00004C87 31C9                <2> 	xor ecx, ecx
  6141 00004C89 8A0B                <2> 	mov cl, [ebx]
  6142 00004C8B 01C8                <2> 	add eax, ecx
  6143 00004C8D 8A0D[3D4D0000]      <2> 	mov cl, [dayhex]
  6144 00004C93 01C8                <2> 	add eax, ecx
  6145 00004C95 66BB0700            <2> 	mov bx, 7
  6146 00004C99 31D2                <2> 	xor edx, edx
  6147 00004C9B 66F7F3              <2> 	div bx
  6148 00004C9E C1E202              <2> 	shl edx, 2
  6149 00004CA1 81C2[6A4D0000]      <2> 	add edx, day
  6150 00004CA7 8B32                <2> 	mov esi, [edx]
  6151 00004CA9 E85DD0FFFF          <2> 	call print
  6152 00004CAE C3                  <2> 	ret
  6153                              <2> 	
  6154                              <2> converttohex:
  6155 00004CAF 88C4                <2> 	mov ah, al
  6156 00004CB1 C0E804              <2> 	shr al, 4
  6157 00004CB4 C0E404              <2> 	shl ah, 4
  6158 00004CB7 C0EC04              <2> 	shr ah, 4
  6159 00004CBA 3C00                <2> 	cmp al, 0
  6160 00004CBC 7409                <2> 	je noconverttohex
  6161                              <2> converttohexlp:
  6162 00004CBE 80C40A              <2> 	add ah, 10
  6163 00004CC1 FEC8                <2> 	dec al
  6164 00004CC3 3C00                <2> 	cmp al, 0
  6165 00004CC5 75F7                <2> 	jne converttohexlp
  6166                              <2> noconverttohex:
  6167 00004CC7 C3                  <2> 	ret
  6168                              <2> 	
  6169                              <2> tstackput1:
  6170 00004CC8 8935[334D0000]      <2> 	mov [tstack + 20], esi
  6171 00004CCE BE[1F4D0000]        <2> 	mov esi, tstack
  6172 00004CD3 8906                <2> 	mov [esi], eax
  6173 00004CD5 895E04              <2> 	mov [esi + 4], ebx
  6174 00004CD8 894E08              <2> 	mov [esi + 8], ecx
  6175 00004CDB 89560C              <2> 	mov [esi + 12], edx
  6176 00004CDE 897E10              <2> 	mov [esi + 16], edi
  6177 00004CE1 C3                  <2> 	ret
  6178                              <2> 	
  6179                              <2> tstackget1:
  6180 00004CE2 BE[1F4D0000]        <2> 	mov esi, tstack
  6181 00004CE7 8B06                <2> 	mov eax, [esi]
  6182 00004CE9 8B5E04              <2> 	mov ebx, [esi + 4]
  6183 00004CEC 8B4E08              <2> 	mov ecx, [esi + 8]
  6184 00004CEF 8B560C              <2> 	mov edx, [esi + 12]
  6185 00004CF2 8B7E10              <2> 	mov edi, [esi + 16]
  6186 00004CF5 8B7614              <2> 	mov esi, [esi + 20]
  6187 00004CF8 C3                  <2> 	ret
  6188                              <2> 	
  6189                              <2> tget1:
  6190 00004CF9 66BA7000            <2> 	mov dx, 0x70
  6191 00004CFD EE                  <2> 	out dx, al
  6192 00004CFE 6642                <2> 	inc dx
  6193 00004D00 EC                  <2> 	in al, dx
  6194 00004D01 664A                <2> 	dec dx
  6195 00004D03 C3                  <2> 	ret
  6196                              <2> 	
  6197                              <2> tput1:
  6198 00004D04 66C1E904            <2> 	shr cx, 4
  6199 00004D08 B030                <2> 	mov al, 48
  6200 00004D0A 00E8                <2> 	add al, ch
  6201 00004D0C 8806                <2> 	mov [esi], al
  6202 00004D0E 46                  <2> 	inc esi
  6203 00004D0F B030                <2> 	mov al, 48
  6204 00004D11 C0E904              <2> 	shr cl, 4
  6205 00004D14 00C8                <2> 	add al, cl
  6206 00004D16 8806                <2> 	mov [esi], al
  6207 00004D18 81C602000000        <2> 	add esi, 2
  6208 00004D1E C3                  <2> 	ret
  6209                              <2> 		
  6210 00004D1F 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6211 00004D28 000000000000000000- <2>
  6212 00004D31 000000000000        <2>
  6213 00004D37 00                  <2> 	RTCtimeSecond db 0
  6214 00004D38 00                  <2> 	RTCtimeMinute db 0
  6215 00004D39 00                  <2> 	RTCtimeHour db 0
  6216 00004D3A 00                  <2> 	RTCtimeDay db 0
  6217 00004D3B 00                  <2> 	RTCtimeMonth db 0
  6218 00004D3C 00                  <2> 	RTCtimeYear db 0
  6219 00004D3D 00                  <2> 	dayhex db 0
  6220 00004D3E 00                  <2> 	monthhex db 0
  6221 00004D3F 00                  <2> 	yearhex db 0
  6222 00004D40 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  6223 00004D49 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  6224 00004D52 300A00              <2>
  6225                              <2> 	oldcentury:	;;from 1700 to 1900
  6226 00004D55 040200              <2> 	db 4,2,0
  6227                              <2> 	century:	;;from 2000 to 2500
  6228 00004D58 060402000604        <2> 	db 6,4,2,0,6,4
  6229                              <2> 	month:
  6230 00004D5E 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6231 00004D67 000305              <2>
  6232                              <2> 	day:
  6233 00004D6A [864D0000]          <2> 	dd sunday
  6234 00004D6E [8E4D0000]          <2> 	dd monday
  6235 00004D72 [964D0000]          <2> 	dd tuesday
  6236 00004D76 [9F4D0000]          <2> 	dd wednesday
  6237 00004D7A [AA4D0000]          <2> 	dd thursday
  6238 00004D7E [B44D0000]          <2> 	dd friday
  6239 00004D82 [BC4D0000]          <2> 	dd saturday
  6240                              <2> sunday:
  6241 00004D86 53756E6461790A00    <2> 	db "Sunday",10,0
  6242                              <2> monday:
  6243 00004D8E 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6244                              <2> tuesday:
  6245 00004D96 547565736461790A00  <2> 	db "Tuesday",10,0
  6246                              <2> wednesday:
  6247 00004D9F 5765646E6573646179- <2> 	db "Wednesday",10,0
  6248 00004DA8 0A00                <2>
  6249                              <2> thursday:
  6250 00004DAA 54687572736461790A- <2> 	db "Thursday",10,0
  6251 00004DB3 00                  <2>
  6252                              <2> friday:
  6253 00004DB4 4672696461790A00    <2> 	db "Friday",10,0
  6254                              <2> saturday:
  6255 00004DBC 53617475726461790A- <2> 	db "Saturday",10,0
  6256 00004DC5 00                  <2>
  6257                              <1> %include 'source/programs/turnoff.asm'
  6258 00004DC6 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6259 00004DCF 00                  <2>
  6260                              <2> 	turnoff:
  6261 00004DD0 66BB[EB4D]          <2> 			mov bx, shutdown
  6262 00004DD4 66891D[DA0C0000]    <2> 			mov [realmodeptr], bx
  6263 00004DDB BB[154E0000]        <2> 			mov ebx, halt
  6264 00004DE0 891D[D60C0000]      <2> 			mov [realmodereturn], ebx
  6265 00004DE6 E9D4BDFFFF          <2> 			jmp realmode
  6266                              <2> 
  6267                              <2> [BITS 16]
  6268                              <2> 		shutdown:
  6269 00004DEB B453                <2> 			mov ah, 0x53
  6270 00004DED B004                <2> 			mov al, 4
  6271 00004DEF 31DB                <2> 			xor bx, bx
  6272 00004DF1 CD15                <2> 			int 0x15
  6273                              <2> 			
  6274 00004DF3 B453                <2> 			mov ah, 0x53
  6275 00004DF5 B001                <2> 			mov al, 1
  6276 00004DF7 31DB                <2> 			xor bx, bx
  6277 00004DF9 CD15                <2> 			int 0x15
  6278                              <2> 			
  6279 00004DFB B453                <2> 			mov ah, 0x53
  6280 00004DFD B008                <2> 			mov al, 8
  6281 00004DFF BB0100              <2> 			mov bx, 1
  6282 00004E02 B90100              <2> 			mov cx, 1
  6283 00004E05 CD15                <2> 			int 0x15
  6284                              <2> 			
  6285 00004E07 B453                <2> 			mov ah, 0x53
  6286 00004E09 B007                <2> 			mov al, 7
  6287 00004E0B BB0100              <2> 			mov bx, 1
  6288 00004E0E B90300              <2> 			mov cx, 3
  6289 00004E11 CD15                <2> 			int 0x15
  6290 00004E13 EBFE                <2> 			jmp $
  6291                              <2> 			[BITS 32]
  6292 00004E15 EBFE                <2> halt: jmp $
  6293                              <1> %include 'source/programs/wait.asm'
  6294 00004E17 FF2C7761697400      <2> db 255,44,"wait",0
  6295                              <2> waitkey:
  6296 00004E1E E8A7D3FFFF          <2> 		call getchar
  6297 00004E23 C3                  <2> 		ret
  6298                              <1> %include 'source/programs/while.asm'
  6299 00004E24 FF2C7768696C6500    <2> db 255,44,"while",0
  6300 00004E2C 30C0                <2> whilecmd:  xor al, al
  6301 00004E2E 3805[60AE0000]      <2> 	cmp [BATCHISON], al
  6302 00004E34 0F84FFE8FFFF        <2> 	je near notbatch
  6303 00004E3A 8B35[5CAE0000]      <2> 	mov esi, [BATCHPOS]
  6304 00004E40 81EE02000000        <2> 	sub esi, 2
  6305 00004E46 4E                  <2> whilefnd: dec esi
  6306 00004E47 8A06                <2> 	mov al, [esi]
  6307 00004E49 3C0A                <2> 	cmp al, 10
  6308 00004E4B 0F840A000000        <2> 	je near whilefnd2
  6309 00004E51 3C00                <2> 	cmp al, 0
  6310 00004E53 0F8402000000        <2> 	je near whilefnd2
  6311 00004E59 EBEB                <2> 	jmp whilefnd
  6312                              <2> whilefnd2:
  6313 00004E5B 46                  <2> 	inc esi
  6314 00004E5C 8935[62AE0000]      <2> 	mov [LOOPPOS], esi
  6315 00004E62 C605[61AE0000]01    <2> 	mov BYTE [LOOPON], 1
  6316 00004E69 BE[66C20000]        <2> 	mov esi, buftxt
  6317 00004E6E BB[66C20000]        <2> 	mov ebx, buftxt
  6318 00004E73 81C306000000        <2> 	add ebx, 6
  6319 00004E79 E90CF2FFFF          <2> 	jmp chkeqsn
  6320                              <1> progend:		;programs end here	
  6321                              <1> batchprogend:
  6322                                  	%include "source/hardware.asm"
  6323                              <1> %ifdef gui.included
  6324                              <1> 	%include "source/drivers/video/vesa.asm"
  6325                              <2> [BITS 16]
  6326                              <2> guiswitch:
  6327 00004E7E 81F90000            <2> 	cmp cx, 0
  6328 00004E82 750B                <2> 	jne guiswitchdefnum
  6329 00004E84 B81200              <2> 	mov ax, 12h
  6330 00004E87 31DB                <2> 	xor bx, bx
  6331 00004E89 CD10                <2> 	int 10h
  6332 00004E8B E85100              <2> 	call guiloadagain
  6333                              <2> guiswitchnocando:
  6334 00004E8E C3                  <2> 	ret	;return without switching as mode number is bad
  6335                              <2> guiswitchdefnum:	;switch to a defined mode number
  6336 00004E8F B8004F              <2> 	mov ax, 0x4F00
  6337 00004E92 BF[5C50]            <2> 	mov di, VBEMODEBLOCK
  6338 00004E95 CD10                <2> 	int 10h
  6339 00004E97 BE[7E50]            <2> 	mov si, reserved
  6340 00004E9A 81EE0200            <2> 	sub si, 2
  6341                              <2> .loop:
  6342 00004E9E 81C60200            <2> 	add si, 2
  6343 00004EA2 81FE[5C51]          <2> 	cmp si, oemdata
  6344 00004EA6 74E6                <2> 	je guiswitchnocando
  6345 00004EA8 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6346 00004EAC 74E0                <2> 	je guiswitchnocando
  6347 00004EAE 390C                <2> 	cmp [si], cx
  6348 00004EB0 75EC                <2> 	jne .loop
  6349 00004EB2 8936[B64F]          <2> 	mov [videomodecache], si
  6350 00004EB6 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6351 00004EBA B8014F              <2> 	mov ax, 0x4F01
  6352 00004EBD BF[5C52]            <2> 	mov di, VBEMODEINFOBLOCK
  6353 00004EC0 890E[B44F]          <2> 	mov [vesamode], cx
  6354 00004EC4 CD10                <2> 	int 10h
  6355 00004EC6 E9CB00              <2> 	jmp selectedvesa
  6356                              <2> guiload:
  6357 00004EC9 BE[3450]            <2> 	mov si, bootmsg
  6358 00004ECC E8A8B1              <2> 	call printrm
  6359 00004ECF 31C0                <2> 	xor ax, ax
  6360 00004ED1 CD16                <2> 	int 16h
  6361 00004ED3 3C79                <2> 	cmp al, "y"
  6362 00004ED5 0F8558B1            <2> 	jne near vgaset
  6363 00004ED9 BE[CF83]            <2> 	mov si, crlf
  6364 00004EDC E898B1              <2> 	call printrm
  6365                              <2> guiloadagain:
  6366 00004EDF B8004F              <2> 	mov ax, 04F00h
  6367 00004EE2 BF[5C50]            <2> 	mov di, VBEMODEBLOCK
  6368 00004EE5 CD10                <2> 	int 10h
  6369 00004EE7 BE[7E50]            <2> 	mov si, reserved
  6370 00004EEA 81EE0200            <2> 	sub si, 2
  6371                              <2> findvideomodes:
  6372 00004EEE 81C60200            <2> 	add si, 2
  6373 00004EF2 8B0C                <2> 	mov cx, [si]
  6374 00004EF4 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6375 00004EF8 0F840A00            <2> 	je near nextvmode
  6376 00004EFC 81FE[5C51]          <2> 	cmp si, oemdata
  6377 00004F00 0F832DB1            <2> 	jae near vgaset	;;kill if no valid list is found
  6378 00004F04 EBE8                <2> 	jmp findvideomodes 	
  6379                              <2> ;;debug,shows vmodes available
  6380                              <2> nextvmode:
  6381 00004F06 81EE0200            <2> 	sub si, 2
  6382 00004F0A 81FE[7E50]          <2> 	cmp si, reserved
  6383 00004F0E 0F82CDFF            <2> 	jb near guiloadagain
  6384 00004F12 8B0C                <2> 	mov cx, [si]
  6385 00004F14 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6386 00004F18 0F84EAFF            <2> 	je near nextvmode
  6387 00004F1C 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6388 00004F20 B8014F              <2> 	mov ax, 04F01h
  6389 00004F23 BF[5C52]            <2> 	mov di, VBEMODEINFOBLOCK
  6390 00004F26 890E[B44F]          <2> 	mov [vesamode], cx
  6391 00004F2A CD10                <2> 	int 10h
  6392 00004F2C A0[7552]            <2> 	mov al, [bitsperpixel]
  6393 00004F2F 3C10                <2> 	cmp al, 16
  6394 00004F31 75D3                <2> 	jne nextvmode
  6395 00004F33 8936[B64F]          <2> 	mov [videomodecache], si
  6396 00004F37 84E4                <2> 	test ah, ah
  6397 00004F39 0F842200            <2> 	jz near setvesamode
  6398 00004F3D EBC7                <2> 	jmp nextvmode
  6399 00004F3F 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6400 00004F48 20766964656F206D6F- <2>
  6401 00004F51 6465204F4B3F28792F- <2>
  6402 00004F5A 6E290D0A00          <2>
  6403                              <2> setvesamode:
  6404 00004F5F 8B0E[6E52]          <2> 	mov cx, [resolutionx]
  6405 00004F63 E85900              <2> 	call decshow
  6406 00004F66 B078                <2> 	mov al, "x"
  6407 00004F68 E8C100              <2> 	call char
  6408 00004F6B 8B0E[7052]          <2> 	mov cx, [resolutiony]
  6409 00004F6F E84D00              <2> 	call decshow
  6410 00004F72 B040                <2> 	mov al, "@"
  6411 00004F74 E8B500              <2> 	call char
  6412 00004F77 31C9                <2> 	xor cx, cx
  6413 00004F79 8A0E[7552]          <2> 	mov cl, [bitsperpixel]
  6414 00004F7D E83F00              <2> 	call decshow
  6415 00004F80 BE[3F4F]            <2> 	mov si, isthisvideook
  6416 00004F83 E8F1B0              <2> 	call printrm
  6417 00004F86 31C0                <2> 	xor ax, ax
  6418 00004F88 CD16                <2> 	int 16h
  6419 00004F8A 8B36[B64F]          <2> 	mov si, [videomodecache]
  6420 00004F8E 3C79                <2> 	cmp al, "y"
  6421 00004F90 0F8572FF            <2> 	jne near nextvmode
  6422                              <2> selectedvesa:
  6423 00004F94 8B16[6E52]          <2> 	mov dx, [resolutionx]
  6424 00004F98 01D2                <2> 	add dx, dx
  6425 00004F9A 8916[5C53]          <2> 	mov [resolutionx2], dx
  6426 00004F9E 31D2                <2> 	xor dx, dx
  6427 00004FA0 31C9                <2> 	xor cx, cx
  6428 00004FA2 B8024F              <2> 	mov ax, 04F02h
  6429 00004FA5 8B1E[B44F]          <2> 	mov bx, [vesamode]
  6430 00004FA9 CD10                <2> 	int 10h		;;enter VESA mode
  6431 00004FAB C606[A095]01        <2> 	mov byte [guion], 1
  6432 00004FB0 E88EB0              <2> 	call getmemorysize;get the memory map after the video is initialized
  6433 00004FB3 C3                  <2> 	ret
  6434                              <2> 	
  6435 00004FB4 0000                <2> vesamode dw 0
  6436 00004FB6 0000                <2> videomodecache dw 0
  6437                              <2> 
  6438 00004FB8 0000000000          <2> dcnm db 0,0,0,0,0
  6439 00004FBD 0000                <2> dcnmend db 0,0
  6440                              <2> 
  6441                              <2> 
  6442                              <2> decshow:
  6443 00004FBF BE[B84F]            <2> 	mov si, dcnm
  6444                              <2> decclear:
  6445 00004FC2 B030                <2> 	mov al, "0"
  6446 00004FC4 8804                <2> 	mov [si], al
  6447 00004FC6 46                  <2> 	inc si
  6448 00004FC7 81FE[BD4F]          <2> 	cmp si, dcnmend
  6449 00004FCB 76F5                <2> 	jbe decclear
  6450 00004FCD 4E                  <2> 	dec si
  6451 00004FCE E81500              <2> 	call convertrm
  6452 00004FD1 BE[B84F]            <2> 	mov si, dcnm
  6453                              <2> dectst:
  6454 00004FD4 8A04                <2> 	mov al, [si]
  6455 00004FD6 46                  <2> 	inc si
  6456 00004FD7 81FE[BD4F]          <2> 	cmp si, dcnmend
  6457 00004FDB 7704                <2> 	ja dectstend
  6458 00004FDD 3C30                <2> 	cmp al, "0"
  6459 00004FDF 76F3                <2> 	jbe dectst
  6460                              <2> dectstend:
  6461 00004FE1 4E                  <2> 	dec si
  6462 00004FE2 E892B0              <2> 	call printrm
  6463 00004FE5 C3                  <2> 	ret
  6464                              <2> 	
  6465                              <2> 	
  6466                              <2> convertrm:
  6467 00004FE6 4E                  <2> 	dec si
  6468 00004FE7 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6469                              <2> cnvrtrm:
  6470 00004FE9 89DE                <2> 	mov si, bx
  6471 00004FEB 81EE0300            <2> 	sub si, 3
  6472 00004FEF 46                  <2> ten3rm:	inc si
  6473 00004FF0 81F9E803            <2> 	cmp cx, 1000
  6474 00004FF4 7208                <2> 	jb ten2rm
  6475 00004FF6 81E9E803            <2> 	sub cx, 1000
  6476 00004FFA FE04                <2> 	inc byte [si]
  6477 00004FFC EBEB                <2> 	jmp cnvrtrm
  6478 00004FFE 46                  <2> ten2rm:	inc si
  6479 00004FFF 81F96400            <2> 	cmp cx, 100
  6480 00005003 7208                <2> 	jb ten1rm
  6481 00005005 81E96400            <2> 	sub cx, 100
  6482 00005009 FE04                <2> 	inc byte [si]
  6483 0000500B EBDC                <2> 	jmp cnvrtrm
  6484 0000500D 46                  <2> ten1rm:	inc si
  6485 0000500E 81F90A00            <2> 	cmp cx, 10
  6486 00005012 7208                <2> 	jb ten0rm
  6487 00005014 81E90A00            <2> 	sub cx, 10
  6488 00005018 FE04                <2> 	inc byte [si]
  6489 0000501A EBCD                <2> 	jmp cnvrtrm
  6490 0000501C 46                  <2> ten0rm:	inc si
  6491 0000501D 81F90100            <2> 	cmp cx, 1
  6492 00005021 7208                <2> 	jb tendnrm
  6493 00005023 81E90100            <2> 	sub cx, 1
  6494 00005027 FE04                <2> 	inc byte [si]
  6495 00005029 EBBE                <2> 	jmp cnvrtrm
  6496                              <2> tendnrm:
  6497 0000502B C3                  <2> 	ret
  6498                              <2> 
  6499                              <2>     char: 		    ;char must be in al
  6500 0000502C BB0700              <2>        mov bx, 07
  6501 0000502F B40E                <2> 	   mov ah, 0Eh
  6502 00005031 CD10                <2> 	   int 10h
  6503 00005033 C3                  <2> 	   ret
  6504                              <2> 
  6505 00005034 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6506 0000503D 20746865204755493F- <2>
  6507 00005046 28792F6E2900        <2>
  6508                              <2> 
  6509                              <2> 
  6510                              <2> mcursor:
  6511 0000504C 01                  <2> 	db	00000001b
  6512 0000504D 81                  <2> 	db	10000001b
  6513 0000504E C1                  <2> 	db	11000001b
  6514 0000504F E1                  <2> 	db	11100001b
  6515 00005050 F1                  <2> 	db	11110001b
  6516 00005051 F9                  <2> 	db	11111001b
  6517 00005052 FD                  <2> 	db	11111101b
  6518 00005053 FF                  <2> 	db	11111111b
  6519 00005054 F9                  <2> 	db	11111001b
  6520 00005055 B9                  <2> 	db	10111001b
  6521 00005056 39                  <2> 	db	00111001b
  6522 00005057 1C                  <2> 	db	00011100b
  6523 00005058 1C                  <2> 	db	00011100b
  6524 00005059 0E                  <2> 	db	00001110b
  6525 0000505A 0E                  <2> 	db	00001110b
  6526 0000505B 0C                  <2> 	db	00001100b
  6527                              <2> mcursorend:
  6528                              <2> 
  6529                              <2> 
  6530                              <2> VBEMODEBLOCK:
  6531 0000505C 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6532 00005060 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6533 00005062 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6534 00005066 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6535 0000506A 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6536 0000506E 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6537 00005070 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6538 00005072 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6539 00005076 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6540 0000507A 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6541 0000507E 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6542 0000515C 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6543                              <2> 
  6544                              <2> VBEMODEINFOBLOCK:
  6545                              <2> ;Mandatory information for all VBE revision
  6546 0000525C 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6547 0000525E 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6548 0000525F 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6549 00005260 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6550 00005262 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6551 00005264 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6552 00005266 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6553 00005268 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6554 0000526C 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6555                              <2> 
  6556                              <2> ;Mandatory information for VBE 1.2 and above
  6557 0000526E 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6558 00005270 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6559 00005272 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6560 00005273 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6561 00005274 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6562 00005275 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6563 00005276 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6564 00005277 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6565 00005278 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6566 00005279 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6567 0000527A 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6568                              <2> 
  6569                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6570 0000527B 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6571 0000527C 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6572 0000527D 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6573 0000527E 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6574 0000527F 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6575 00005280 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6576 00005281 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6577 00005282 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6578 00005283 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6579                              <2> 
  6580                              <2> ;Mandatory information for VBE 2.0 and above
  6581 00005284 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6582 00005288 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6583 0000528C 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6584 0000528E 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6585                              <2> 
  6586 0000535C 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6587                              <2> VBEEND:
  6588                              <2> [BITS 32]
  6589                              <1> 	%include "source/drivers/input/mouse.asm"
  6590 00005360 00                  <2> mousedisabled db 0
  6591                              <2> 	
  6592                              <2> 	cursorgui:
  6593 00005361 803D[CA790000]01    <2> 		cmp byte [mouseon], 1
  6594 00005368 0F8432000000        <2> 		je near mousedaemon
  6595 0000536E 803D[A0950000]00    <2> 		cmp byte [guion], 0
  6596 00005375 0F84DB040000        <2> 		je near entdown
  6597                              <2> 	initmouse:
  6598 0000537B 803D[A0950000]00    <2> 		cmp byte [guion], 0
  6599 00005382 7405                <2> 		je noswmsposinit
  6600 00005384 E8EA0E0000          <2> 		call switchmousepos2
  6601                              <2> 	noswmsposinit:
  6602 00005389 E85A020000          <2> 	  	call PS2SET
  6603 0000538E E883020000          <2> 		call ACTMOUS
  6604 00005393 C605[CA790000]01    <2> 		mov byte [mouseon],1
  6605 0000539A E89C020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6606                              <2> 		;call GETB
  6607                              <2> 				;;If the bytes are mixed up,
  6608                              <2> 				;;remove this line or add another of this line.
  6609                              <2> 	nomouse:
  6610 0000539F C3                  <2> 		ret
  6611                              <2> 		
  6612                              <2> 	mousedaemon:
  6613 000053A0 803D[CA790000]01    <2> 		cmp byte [mouseon], 1
  6614 000053A7 75D2                <2> 		jne initmouse
  6615 000053A9 E464                <2> 		in al, 64h ; Status
  6616 000053AB A820                <2> 		test al, 20h ; PS2-Mouse?
  6617 000053AD 0F8502000000        <2> 		jnz near moused
  6618 000053B3 F4                  <2> 		hlt
  6619 000053B4 C3                  <2> 		ret
  6620                              <2> 	moused:
  6621 000053B5 803D[60530000]01    <2> 		cmp byte [mousedisabled], 1
  6622 000053BC 74E1                <2> 		je nomouse
  6623 000053BE E878020000          <2> 		  call GETB
  6624 000053C3 88C3                <2> 		  mov  bl, al
  6625 000053C5 80E301              <2> 		  and  bl, 1
  6626 000053C8 881D[60560000]      <2> 		  mov  BYTE [LBUTTON], bl
  6627 000053CE 88C3                <2> 		  mov  bl, al
  6628 000053D0 80E302              <2> 		  and  bl, 2
  6629 000053D3 D0EB                <2> 		  shr  bl, 1
  6630 000053D5 881D[61560000]      <2> 		  mov  BYTE [RBUTTON], bl
  6631 000053DB 88C3                <2> 		  mov  bl, al
  6632 000053DD 80E304              <2> 		  and  bl, 4
  6633 000053E0 C0EB02              <2> 		  shr  bl, 2
  6634 000053E3 881D[62560000]      <2> 		  mov  BYTE [MBUTTON], bl
  6635 000053E9 E84D020000          <2> 		  call GETB
  6636 000053EE A2[63560000]        <2> 		  mov  BYTE [XCOORD], al
  6637 000053F3 E843020000          <2> 		  call GETB
  6638 000053F8 A2[64560000]        <2> 		  mov  BYTE [YCOORD], al
  6639                              <2> 
  6640                              <2> 	showpixelcursor:
  6641 000053FD 668B15[4F550000]    <2> 		mov dx, [mousecursorposition]
  6642 00005404 668B0D[51550000]    <2> 		mov cx, [mousecursorposition + 2]
  6643 0000540B 668915[4B550000]    <2> 		mov [lastmouseposition], dx
  6644 00005412 66890D[4D550000]    <2> 		mov [lastmouseposition + 2], cx
  6645 00005419 A0[63560000]        <2> 		mov al, [XCOORD]
  6646 0000541E 3C80                <2> 		cmp al, 128
  6647 00005420 730C                <2> 		jae subxcoord
  6648 00005422 00C0                <2> 		add al, al
  6649 00005424 30E4                <2> 		xor ah, ah
  6650 00005426 6601C2              <2> 		add dx, ax
  6651 00005429 E90B000000          <2> 		jmp subxcoorddn
  6652                              <2> 	subxcoord:
  6653 0000542E 00C0                <2> 		add al, al
  6654 00005430 30DB                <2> 		xor bl, bl
  6655 00005432 28C3                <2> 		sub bl, al
  6656 00005434 30FF                <2> 		xor bh, bh
  6657 00005436 6629DA              <2> 		sub dx, bx
  6658                              <2> 	subxcoorddn:
  6659 00005439 8A1D[64560000]      <2> 		mov bl, [YCOORD]
  6660 0000543F 30C0                <2> 		xor al, al
  6661 00005441 28D8                <2> 		sub al, bl
  6662 00005443 3C80                <2> 		cmp al, 128
  6663 00005445 730A                <2> 		jae subycoord
  6664 00005447 30E4                <2> 		xor ah, ah
  6665 00005449 6601C1              <2> 		add cx, ax
  6666 0000544C E909000000          <2> 		jmp subycoorddn
  6667                              <2> 	subycoord:
  6668 00005451 30DB                <2> 		xor bl, bl
  6669 00005453 28C3                <2> 		sub bl, al
  6670 00005455 30FF                <2> 		xor bh, bh
  6671 00005457 6629D9              <2> 		sub cx, bx
  6672                              <2> 	subycoorddn:
  6673 0000545A 6681FA204E          <2> 		cmp dx, 20000
  6674 0000545F 7603                <2> 		jbe nooriginx2
  6675 00005461 6631D2              <2> 		xor dx, dx
  6676                              <2> 	nooriginx2:
  6677 00005464 6681F9204E          <2> 		cmp cx, 20000
  6678 00005469 7603                <2> 		jbe nooriginy2
  6679 0000546B 6631C9              <2> 		xor cx, cx
  6680                              <2> 	nooriginy2:
  6681 0000546E 6681FA0000          <2> 		cmp dx, 0
  6682 00005473 7415                <2> 		je nofixxcolumn2
  6683 00005475 663B15[5C530000]    <2> 		cmp dx, [resolutionx2]
  6684 0000547C 720C                <2> 		jb nofixxcolumn2
  6685 0000547E 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  6686 00005485 6681EA0200          <2> 		sub dx, 2
  6687                              <2> 	nofixxcolumn2:
  6688 0000548A 6681F90000          <2> 		cmp cx, 0
  6689 0000548F 7415                <2> 		je nofixyrow2
  6690 00005491 663B0D[70520000]    <2> 		cmp cx, [resolutiony]
  6691 00005498 720C                <2> 		jb nofixyrow2
  6692 0000549A 668B0D[70520000]    <2> 		mov cx, [resolutiony]
  6693 000054A1 6681E90100          <2> 		sub cx, 1
  6694                              <2> 	nofixyrow2:
  6695 000054A6 668915[4F550000]    <2> 		mov [mousecursorposition], dx
  6696 000054AD 66890D[51550000]    <2> 		mov [mousecursorposition + 2], cx
  6697 000054B4 803D[A0950000]00    <2> 		cmp byte [guion], 0
  6698 000054BB 0F8492000000        <2> 		je near termmouse
  6699 000054C1 E84D0D0000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6700 000054C6 803D[60560000]01    <2> 		cmp byte [LBUTTON], 1
  6701 000054CD 0F84D61C0000        <2> 		je near clickicon
  6702 000054D3 803D[61560000]01    <2> 		cmp byte [RBUTTON], 1
  6703 000054DA 0F84C91C0000        <2> 		je near clickicon
  6704 000054E0 A0[96710000]        <2> 		mov al, [pbutton]
  6705 000054E5 C705[99710000]0000- <2> 		mov dword [dragging], 0
  6706 000054ED 0000                <2>
  6707 000054EF 3C00                <2> 		cmp al, 0
  6708 000054F1 740F                <2> 		je nopreviousbutton
  6709 000054F3 E8C30C0000          <2> 		call clearmousecursor
  6710 000054F8 E81C100000          <2> 		call reloadallgraphics
  6711                              <2> 	windowtermcopyend:
  6712 000054FD E8710D0000          <2> 		call switchmousepos2
  6713                              <2> 	nopreviousbutton:
  6714 00005502 30C0                <2> 		xor al, al
  6715 00005504 A2[96710000]        <2> 		mov [pbutton], al
  6716 00005509 A0[60560000]        <2> 		mov al, [LBUTTON]
  6717 0000550E A2[97710000]        <2> 		mov [pLBUTTON], al
  6718 00005513 A0[61560000]        <2> 		mov al, [RBUTTON]
  6719 00005518 A2[98710000]        <2> 		mov [pRBUTTON], al
  6720 0000551D 31C9                <2> 		xor ecx, ecx
  6721 0000551F 31D2                <2> 		xor edx, edx
  6722 00005521 668B15[4F550000]    <2> 		mov dx, [mousecursorposition]
  6723 00005528 668B0D[51550000]    <2> 		mov cx, [mousecursorposition + 2]
  6724 0000552F 66BB18C7            <2> 		mov bx, 1100011100011000b
  6725 00005533 30E4                <2> 		xor ah, ah
  6726 00005535 B0FE                <2> 		mov al, 254
  6727 00005537 C605[93710000]01    <2> 		mov byte [showcursorfonton], 1
  6728 0000553E E89D150000          <2> 		call showfontvesa
  6729 00005543 C605[93710000]00    <2> 		mov byte [showcursorfonton], 0
  6730 0000554A C3                  <2> 		ret
  6731                              <2> 
  6732 0000554B 00000000            <2> lastmouseposition dw 0,0
  6733 0000554F 00000000            <2> mousecursorposition dw 0,0	
  6734                              <2> 
  6735                              <2> termmouse:
  6736 00005553 BE[7CC90000]        <2> 		mov esi, videobuf
  6737 00005558 31D2                <2> 		xor edx, edx
  6738 0000555A 668B15[4B550000]    <2> 		mov dx, [lastmouseposition]
  6739 00005561 668B0D[4D550000]    <2> 		mov cx, [lastmouseposition + 2]
  6740 00005568 66A1[E6550000]      <2> 		mov ax, [cursorcache]
  6741 0000556E 663D0000            <2> 		cmp ax, 0
  6742 00005572 7425                <2> 		je nocopycursorcache
  6743 00005574 66C1E104            <2> 		shl cx, 4
  6744 00005578 66C1E203            <2> 		shl dx, 3
  6745 0000557C 01D6                <2> 		add esi, edx
  6746 0000557E 6631D2              <2> 		xor dx, dx
  6747 00005581 8A15[02240000]      <2> 		mov dl, [charxy]
  6748 00005587 6641                <2> 		inc cx
  6749                              <2> termmousecplp1:
  6750 00005589 01D6                <2> 		add esi, edx
  6751 0000558B 6649                <2> 		dec cx
  6752 0000558D 6681F90000          <2> 		cmp cx, 0
  6753 00005592 75F5                <2> 		jne termmousecplp1
  6754 00005594 29D6                <2> 		sub esi, edx
  6755 00005596 668906              <2> 		mov [esi], ax
  6756                              <2> nocopycursorcache:
  6757 00005599 BE[7CC90000]        <2> 		mov esi, videobuf
  6758 0000559E 31D2                <2> 		xor edx, edx
  6759 000055A0 668B15[4F550000]    <2> 		mov dx, [mousecursorposition]
  6760 000055A7 668B0D[51550000]    <2> 		mov cx, [mousecursorposition + 2]
  6761 000055AE 66C1E104            <2> 		shl cx, 4
  6762 000055B2 66C1E203            <2> 		shl dx, 3
  6763 000055B6 01D6                <2> 		add esi, edx
  6764 000055B8 6631D2              <2> 		xor dx, dx
  6765 000055BB 8A15[02240000]      <2> 		mov dl, [charxy]
  6766 000055C1 6641                <2> 		inc cx
  6767                              <2> termmousecplp2:
  6768 000055C3 01D6                <2> 		add esi, edx
  6769 000055C5 6649                <2> 		dec cx
  6770 000055C7 6681F90000          <2> 		cmp cx, 0
  6771 000055CC 75F5                <2> 		jne termmousecplp2
  6772 000055CE 29D6                <2> 		sub esi, edx
  6773 000055D0 668B06              <2> 		mov ax, [esi]
  6774 000055D3 66A3[E6550000]      <2> 		mov [cursorcache], ax
  6775 000055D9 B080                <2> 		mov al, 128
  6776 000055DB B407                <2> 		mov ah, 7
  6777 000055DD 668906              <2> 		mov [esi], ax
  6778 000055E0 E88ECFFFFF          <2> 		call termcopy
  6779 000055E5 C3                  <2> 		ret
  6780 000055E6 0000                <2> cursorcache db 0,0
  6781                              <2> 
  6782                              <2> PS2SET:
  6783 000055E8 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6784 000055EA E664                <2>   out  0x64, al		; write to keyboardcontroller
  6785 000055EC E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6786 000055F1 C3                  <2> ret
  6787                              <2> 
  6788                              <2> CHKPRT:
  6789 000055F2 66B96400            <2>   mov  cx, 100
  6790                              <2>  .again:
  6791 000055F6 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6792 000055F8 A802                <2>   test al, 2		; Check if input buffer is empty
  6793 000055FA 7402                <2>   je .go
  6794 000055FC E2F8                <2>   loop .again
  6795                              <2>  .go:
  6796 000055FE C3                  <2> ret
  6797                              <2> 
  6798                              <2> WMOUS:
  6799 000055FF B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6800 00005601 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6801 00005603 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6802 00005608 C3                  <2> ret
  6803                              <2> 
  6804                              <2> MBUFFUL:
  6805 00005609 66B96400            <2>   mov cx, 100
  6806                              <2>  .mn:
  6807 0000560D E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6808 0000560F A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6809 00005611 7402                <2>   jz  .mnn
  6810 00005613 E2F8                <2>   loop .mn
  6811                              <2>  .mnn:
  6812 00005615 C3                  <2> ret
  6813                              <2> 
  6814                              <2> 
  6815                              <2> ACTMOUS:
  6816 00005616 E8E4FFFFFF          <2>   call WMOUS
  6817 0000561B B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6818 0000561D E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6819 0000561F E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6820 00005624 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6821 00005629 C3                  <2> ret
  6822                              <2> 
  6823                              <2> CHKMOUS:
  6824 0000562A B300                <2>   mov  bl, 0
  6825 0000562C 66B96400            <2>   mov cx, 100
  6826                              <2>  .vrd:
  6827 00005630 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6828 00005632 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6829 00005634 7504                <2>   jnz .yy
  6830 00005636 E2F8                <2>   loop .vrd
  6831 00005638 B301                <2>   mov  bl, 1
  6832                              <2>  .yy:
  6833 0000563A C3                  <2> ret
  6834                              <2> 
  6835                              <2> GETB:
  6836                              <2>  .cagain:
  6837 0000563B E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6838 00005640 08DB                <2>   or bl, bl
  6839 00005642 75F7                <2>   jnz .cagain
  6840 00005644 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6841 00005646 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6842 00005648 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6843 0000564D 6631C0              <2>   xor  ax, ax
  6844 00005650 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6845 00005652 88C2                <2>   mov  dl, al
  6846 00005654 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6847 00005656 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6848 00005658 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6849 0000565D 88D0                <2>   mov  al, dl
  6850 0000565F C3                  <2> ret
  6851                              <2> 
  6852 00005660 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6853 00005661 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6854 00005662 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6855 00005663 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6856 00005664 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6857                              <1> %endif
  6858                              <1> %include "source/drivers/sound/pcspkr.asm"
  6859                              <2> ;PC Speaker Drivers
  6860                              <2> PCSpeakerRAW:
  6861 00005665 60                  <2> 	pusha
  6862                              <2> nosoundrep:
  6863 00005666 8B35[68020000]      <2> 	mov esi, [soundpos]
  6864 0000566C 31C9                <2> 	xor ecx, ecx
  6865 0000566E 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  6866 00005675 6681F90000          <2> 	cmp cx, 0
  6867 0000567A 0F8548000000        <2> 	jne near donesetpitch
  6868 00005680 668B0E              <2> 	mov cx, [esi]
  6869 00005683 668B5E02            <2> 	mov bx, [esi + 2]
  6870 00005687 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6871 0000568E 81C604000000        <2> 	add esi, 4
  6872 00005694 8935[68020000]      <2> 	mov [soundpos], esi
  6873 0000569A 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  6874 000056A0 7735                <2> 	ja stopsound
  6875 000056A2 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  6876 000056AA 00                  <2>
  6877 000056AB 74B9                <2> 	je nosoundrep
  6878 000056AD 6681FB0000          <2> 	cmp bx, 0
  6879 000056B2 740F                <2> 	je nosoundplay
  6880 000056B4 E840000000          <2> 	call setpitch
  6881 000056B9 E849000000          <2> 	call startsound
  6882 000056BE E905000000          <2> 	jmp donesetpitch
  6883                              <2> nosoundplay:
  6884 000056C3 E846000000          <2> 	call killsound
  6885                              <2> donesetpitch:
  6886 000056C8 6649                <2> 	dec cx
  6887 000056CA 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6888 000056D1 61                  <2> 	popa
  6889 000056D2 E9CEABFFFF          <2> 	jmp timerinterrupt
  6890                              <2> stopsound:
  6891 000056D7 31C0                <2> 	xor eax, eax
  6892 000056D9 66A3[66020000]      <2> 	mov [soundrepititions], ax
  6893 000056DF A2[65020000]        <2> 	mov [soundon], al
  6894 000056E4 A3[68020000]        <2> 	mov [soundpos], eax
  6895 000056E9 A3[6C020000]        <2> 	mov [soundendpos], eax
  6896 000056EE E81B000000          <2> 	call killsound
  6897 000056F3 61                  <2> 	popa
  6898 000056F4 E9ACABFFFF          <2> 	jmp timerinterrupt
  6899                              <2> 
  6900                              <2> 
  6901                              <2> setpitch:
  6902 000056F9 B0B6                <2> 	mov al, 0xB6
  6903 000056FB E643                <2> 	out 0x43, al
  6904 000056FD 6689D8              <2> 	mov ax, bx
  6905 00005700 E642                <2> 	out 0x42, al
  6906 00005702 88E0                <2> 	mov al, ah
  6907 00005704 E642                <2> 	out 0x42, al
  6908 00005706 C3                  <2> 	ret
  6909                              <2> startsound:
  6910 00005707 E461                <2> 	in al, 0x61
  6911 00005709 0C03                <2> 	or al, 3
  6912 0000570B E661                <2> 	out 0x61, al
  6913 0000570D C3                  <2> 	ret
  6914                              <2> killsound:
  6915 0000570E E461                <2> 	in al, 0x61
  6916 00005710 24FC                <2> 	and al, 0xFC
  6917 00005712 E661                <2> 	out 0x61, al
  6918 00005714 C3                  <2> 	ret
  6919                              <2> 	
  6920                              <1> %ifdef sound.included
  6921                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6922                              <1> %endif
  6923                              <1> %ifdef io.serial
  6924                              <1> 	%include "source/drivers/input/serial.asm"
  6925                              <1> %else
  6926                              <1> 	%include "source/drivers/input/keyboard.asm"
  6927 00005715 00                  <2> specialkey db 0
  6928 00005716 00                  <2> charregion db 0
  6929                              <2> waitforinput:		;;this is basically the idle process
  6930                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6931                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6932 00005717 6631C0              <2> 	xor ax, ax
  6933 0000571A A0[B75F0000]        <2> 	mov al, [threadson]
  6934 0000571F 8825[B75F0000]      <2> 	mov [threadson], ah
  6935 00005725 FB                  <2> 	sti
  6936 00005726 F4                  <2> 	hlt
  6937 00005727 A2[B75F0000]        <2> 	mov [threadson], al
  6938 0000572C 3A25[1A220000]      <2> 	cmp ah, [trans]
  6939 00005732 7401                <2> 	je getkey
  6940 00005734 C3                  <2> 	ret
  6941                              <2> getkey:
  6942 00005735 31C0                <2> 		xor eax, eax
  6943 00005737 A2[15570000]        <2> 		mov [specialkey], al
  6944 0000573C 66A3[18220000]      <2> 		mov [lastkey], ax
  6945 00005742 E464                <2> 		in al, 64h ; Status
  6946                              <2> 	%ifdef gui.included
  6947 00005744 A820                <2> 		test al, 20h ; PS2-Mouse?
  6948 00005746 0F8569FCFFFF        <2> 		jnz near moused
  6949                              <2> 	%endif
  6950 0000574C A801                <2> 		test al, 1 
  6951 0000574E 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6952                              <2> 	calckey:
  6953 00005750 E460                <2> 		in al, 60h
  6954 00005752 88C4                <2> 		mov ah, al
  6955 00005754 30C0                <2> 		xor al, al
  6956 00005756 8825[19220000]      <2> 		mov [lastkey + 1], ah
  6957 0000575C 88E0                <2> 		mov al, ah
  6958 0000575E BF[F7580000]        <2> 		mov edi, scancode
  6959                              <2> 	searchscan: 
  6960 00005763 3C3A                <2> 		cmp al, 3Ah
  6961 00005765 731A                <2> 		jae scanother
  6962 00005767 30E4                <2> 		xor ah, ah
  6963 00005769 C0E002              <2> 		shl al, 2
  6964 0000576C 01C7                <2> 		add edi, eax
  6965 0000576E D0E8                <2> 		shr al, 1
  6966 00005770 01C7                <2> 		add edi, eax
  6967 00005772 D0E8                <2> 		shr al, 1
  6968 00005774 8A27                <2> 		mov ah, [edi]
  6969 00005776 80FC00              <2> 		cmp ah, 0
  6970 00005779 7406                <2> 		je scanother
  6971 0000577B E9D7000000          <2> 		jmp scanfound
  6972 00005780 00                  <2> uppercase db 0
  6973                              <2> scanother:
  6974 00005781 88C4                <2> 		mov ah, al
  6975 00005783 30C0                <2> 		xor al, al
  6976 00005785 66A3[18220000]      <2> 		mov [lastkey], ax
  6977 0000578B 80FCE0              <2> 		cmp ah, 0E0h
  6978 0000578E 0F847D000000        <2> 		je near getkeyspecial
  6979 00005794 803D[15570000]E0    <2> 		cmp byte [specialkey], 0xE0
  6980 0000579B 752B                <2> 		jne nospecialkey
  6981 0000579D 80FC38              <2> 		cmp ah, 38h
  6982 000057A0 0F84A0000000        <2> 		je near alton
  6983 000057A6 80FCB8              <2> 		cmp ah, 0B8h
  6984 000057A9 0F849F000000        <2> 		je near altoff
  6985 000057AF 80FC1D              <2> 		cmp ah, 1Dh
  6986 000057B2 0F847E000000        <2> 		je near ctron
  6987 000057B8 80FC9D              <2> 		cmp ah, 9Dh
  6988 000057BB 0F847D000000        <2> 		je near ctroff
  6989 000057C1 66A3[18220000]      <2> 		mov [lastkey], ax
  6990 000057C7 C3                  <2> 		ret
  6991                              <2> nospecialkey:
  6992 000057C8 80FC2A              <2> 		cmp ah, 2Ah
  6993 000057CB 0F8455000000        <2> 		je near shifton
  6994 000057D1 80FC36              <2> 		cmp ah, 36h
  6995 000057D4 0F844C000000        <2> 		je near shifton
  6996 000057DA 80FC1C              <2> 		cmp ah, 1Ch
  6997 000057DD 0F8473000000        <2> 		je near entdown
  6998 000057E3 80FCAA              <2> 		cmp ah, 0AAh
  6999 000057E6 0F8442000000        <2> 		je near shiftoff
  7000 000057EC 80FCB6              <2> 		cmp ah, 0B6h
  7001 000057EF 0F8439000000        <2> 		je near shiftoff
  7002 000057F5 80FC3A              <2> 		cmp ah, 3Ah
  7003 000057F8 0F84A5000000        <2> 		je near capslock
  7004 000057FE 80FC45              <2> 		cmp ah, 0x45
  7005 00005801 0F84AD000000        <2> 		je near numlock
  7006 00005807 80FC46              <2> 		cmp ah, 0x46
  7007 0000580A 0F84BC000000        <2> 		je near scrolllock
  7008 00005810 C3                  <2> 		ret
  7009                              <2> 	getkeyspecial:
  7010 00005811 C605[15570000]E0    <2> 		mov byte [specialkey], 0xE0
  7011 00005818 E933FFFFFF          <2> 		jmp calckey
  7012                              <2> 	shift:
  7013 0000581D A0[80570000]        <2> 		mov al, [uppercase]
  7014 00005822 3C01                <2> 		cmp al, 1
  7015 00005824 7308                <2> 		jae shiftoff
  7016                              <2> 	shifton:
  7017 00005826 C605[80570000]01    <2> 		mov byte [uppercase], 1
  7018 0000582D C3                  <2> 		ret
  7019                              <2> 	shiftoff:
  7020 0000582E C605[80570000]00    <2> 		mov byte [uppercase], 0
  7021 00005835 C3                  <2> 		ret
  7022                              <2> 	ctron:
  7023 00005836 C605[A2580000]01    <2> 		mov byte [ctrkey], 1
  7024 0000583D C3                  <2> 		ret
  7025                              <2> 	ctroff:
  7026 0000583E C605[A2580000]00    <2> 		mov byte [ctrkey], 0
  7027 00005845 C3                  <2> 		ret
  7028                              <2> 	alton:
  7029 00005846 C605[A1580000]01    <2> 		mov byte [altkey], 1
  7030 0000584D C3                  <2> 		ret
  7031                              <2> 	altoff:
  7032 0000584E C605[A1580000]00    <2> 		mov byte [altkey], 0
  7033 00005855 C3                  <2> 		ret
  7034                              <2> 	entdown:
  7035 00005856 C3                  <2> 		ret
  7036                              <2> 	scanfound:
  7037 00005857 81C704000000        <2> 		add edi, 4
  7038 0000585D 803D[A2580000]01    <2> 		cmp byte [ctrkey], 1
  7039 00005864 731B                <2> 		jae altin
  7040 00005866 81EF04000000        <2> 		sub edi, 4
  7041 0000586C 81C702000000        <2> 		add edi, 2
  7042 00005872 803D[A1580000]01    <2> 		cmp byte [altkey], 1
  7043 00005879 7306                <2> 		jae altin
  7044 0000587B 81EF02000000        <2> 		sub edi, 2
  7045                              <2> altin:
  7046 00005881 81C701000000        <2> 		add edi, 1
  7047 00005887 803D[80570000]01    <2> 		cmp byte [uppercase], 1
  7048 0000588E 7306                <2> 		jae uppercaseon
  7049 00005890 81EF01000000        <2> 		sub edi, 1
  7050                              <2> uppercaseon:
  7051 00005896 8A07                <2> 		mov al,[edi]
  7052 00005898 A2[18220000]        <2> 		mov [lastkey], al
  7053 0000589D C3                  <2> 		ret
  7054                              <2> 		
  7055 0000589E 00                  <2> keyboardstatus db 0
  7056 0000589F 00                  <2> numlockstatus db 0
  7057 000058A0 00                  <2> scrolllockstatus db 0
  7058 000058A1 00                  <2> altkey db 0
  7059 000058A2 00                  <2> ctrkey db 0
  7060                              <2> 	capslock:
  7061 000058A3 8035[9E580000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7062 000058AA E835000000          <2> 		call updatekblights
  7063 000058AF E969FFFFFF          <2> 		jmp shift
  7064                              <2> 		
  7065                              <2> 	numlock:
  7066 000058B4 8035[9E580000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7067 000058BB 8035[9F580000]01    <2> 		xor byte [numlockstatus], 1
  7068 000058C2 E81D000000          <2> 		call updatekblights
  7069 000058C7 E969FEFFFF          <2> 		jmp getkey
  7070                              <2> 	
  7071                              <2> 	scrolllock:
  7072 000058CC 8035[9E580000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7073 000058D3 8035[A0580000]01    <2> 		xor byte [scrolllockstatus], 1
  7074 000058DA E805000000          <2> 		call updatekblights
  7075 000058DF E951FEFFFF          <2> 		jmp getkey
  7076                              <2> 		
  7077                              <2> 	updatekblights:
  7078 000058E4 B0ED                <2> 		mov al, 0xED
  7079 000058E6 66BA6000            <2> 		mov dx, 0x60
  7080 000058EA EE                  <2> 		out dx, al
  7081                              <2> 	chkkbdack:
  7082 000058EB EC                  <2> 		in al, dx
  7083 000058EC 3CFA                <2> 		cmp al, 0xFA
  7084 000058EE 75FB                <2> 		jne chkkbdack
  7085 000058F0 A0[9E580000]        <2> 		mov al, [keyboardstatus]
  7086 000058F5 EE                  <2> 		out dx, al
  7087 000058F6 C3                  <2> 		ret
  7088                              <2> 		
  7089                              <2> scancode:
  7090 000058F7 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7091 000058FD 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7092 00005903 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  7093 00005909 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7094 0000590F 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7095 00005915 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7096 0000591B 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7097 00005921 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  7098 00005927 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7099 0000592D 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  7100 00005933 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7101 00005939 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7102 0000593F 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7103 00005945 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7104 0000594B 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7105 00005951 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7106 00005957 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7107 0000595D 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7108 00005963 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7109 00005969 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7110 0000596F 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7111 00005975 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7112 0000597B 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7113 00005981 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7114 00005987 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7115 0000598D 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7116 00005993 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7117 00005999 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7118 0000599F 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7119 000059A5 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7120 000059AB 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7121 000059B1 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7122 000059B7 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7123 000059BD 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  7124 000059C3 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7125 000059C9 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7126 000059CF 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7127 000059D5 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7128 000059DB 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7129 000059E1 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  7130 000059E7 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7131 000059ED 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7132 000059F3 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7133 000059F9 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7134 000059FF 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7135 00005A05 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7136 00005A0B 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7137 00005A11 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7138 00005A17 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7139 00005A1D 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7140 00005A23 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  7141 00005A29 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7142 00005A2F 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7143 00005A35 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7144 00005A3B 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7145 00005A41 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7146 00005A47 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7147 00005A4D 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7148                              <2> noscan:
  7149                              <2> 
  7150                              <1> %endif
  7151                              <1> ;drivers will soon be handled intelligently
  7152                              <1> ;every driver's source will be scanned for a .init function
  7153                              <1> ;that will be called and if it returns 0
  7154                              <1> ;the hardware was found and the driver initialized properly
  7155                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7156                              <1> 	%ifdef sound.included
  7157                              <1> 		call sblaster.init
  7158                              <1> 	%endif
  7159                              <1> 	%ifdef network.included
  7160 00005A53 E8F4270000          <1> 		call network.init
  7161                              <1> 	%endif
  7162 00005A58 C3                  <1> 	ret
  7163                              <1> initialize:
  7164                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7165 00005A59 E814000000          <1> 	call .pic
  7166                              <1> %ifdef terminal.vsync
  7167                              <1> 	call .rtc
  7168                              <1> %endif
  7169 00005A5E E871000000          <1> 	call .pit
  7170 00005A63 E893000000          <1> 	call .fpu
  7171 00005A68 E8A4000000          <1> 	call .sse
  7172 00005A6D 31C0                <1> 	xor eax, eax
  7173 00005A6F 31C9                <1> 	xor ecx, ecx
  7174                              <1> %ifdef io.serial
  7175                              <1> 	call serial.init
  7176                              <1> %endif
  7177 00005A71 C3                  <1> 	ret
  7178                              <1> 	
  7179                              <1> .pic:
  7180 00005A72 B011                <1> 	mov al, 0x11
  7181 00005A74 E620                <1> 	out 0x20, al
  7182 00005A76 E6A0                <1> 	out 0xA0, al
  7183 00005A78 B040                <1> 	mov al, 0x40	;interrupt for master
  7184 00005A7A E621                <1> 	out 0x21, al
  7185 00005A7C B048                <1> 	mov al, 0x48	;interrupt for slave
  7186 00005A7E E6A1                <1> 	out 0xA1, al
  7187 00005A80 B004                <1> 	mov al, 4
  7188 00005A82 E621                <1> 	out 0x21, al
  7189 00005A84 B002                <1> 	mov al, 2
  7190 00005A86 E6A1                <1> 	out 0xA1, al
  7191 00005A88 B001                <1> 	mov al, 0x1
  7192 00005A8A E621                <1> 	out 0x21, al
  7193 00005A8C B001                <1> 	mov al, 0x1
  7194 00005A8E E6A1                <1> 	out 0xA1, al
  7195                              <1> 	;masks are set to zero so as not to mask
  7196 00005A90 30C0                <1> 	xor al, al
  7197 00005A92 E621                <1> 	out 0x21, al
  7198 00005A94 30C0                <1> 	xor al, al
  7199 00005A96 E6A1                <1> 	out 0xA1, al
  7200 00005A98 B020                <1> 	mov al, 0x20
  7201 00005A9A E6A0                <1> 	out 0xA0, al
  7202 00005A9C E620                <1> 	out 0x20, al
  7203 00005A9E C3                  <1> 	ret
  7204                              <1> .rtc:
  7205 00005A9F B008                <1> 	mov al, 0x8
  7206 00005AA1 88C4                <1> 	mov ah, al
  7207 00005AA3 66BA7000            <1> 	mov dx, 0x70
  7208 00005AA7 EE                  <1> 	out dx, al
  7209 00005AA8 6642                <1> 	inc dx
  7210 00005AAA EC                  <1> 	in al, dx
  7211 00005AAB 86C4                <1> 	xchg al, ah
  7212 00005AAD 664A                <1> 	dec dx
  7213 00005AAF EE                  <1> 	out dx, al
  7214 00005AB0 6642                <1> 	inc dx
  7215 00005AB2 86C4                <1> 	xchg al, ah
  7216 00005AB4 0C40                <1> 	or al, 0x40
  7217 00005AB6 EE                  <1> 	out dx, al
  7218                              <1> 	
  7219 00005AB7 B00A                <1> 	mov al, 0xA
  7220 00005AB9 664A                <1> 	dec dx
  7221 00005ABB EE                  <1> 	out dx, al
  7222 00005ABC 86C4                <1> 	xchg al, ah
  7223 00005ABE 6642                <1> 	inc dx
  7224 00005AC0 EC                  <1> 	in al, dx
  7225 00005AC1 24F0                <1> 	and al, 0xF0
  7226 00005AC3 0A05[01030000]      <1> 	or al, [rtcrate]
  7227 00005AC9 86C4                <1> 	xchg al, ah
  7228 00005ACB 664A                <1> 	dec dx
  7229 00005ACD EE                  <1> 	out dx, al
  7230 00005ACE 6642                <1> 	inc dx
  7231 00005AD0 86C4                <1> 	xchg al, ah
  7232 00005AD2 EE                  <1> 	out dx, al
  7233 00005AD3 C3                  <1> 	ret
  7234                              <1> 	
  7235                              <1> .pit:
  7236                              <1> 	;initialize the PIT
  7237 00005AD4 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7238 00005ADA E640                <1> 	out 0x40, al
  7239 00005ADC 66C1C008            <1> 	rol ax, 8
  7240 00005AE0 E640                <1> 	out 0x40, al
  7241                              <1> 	;enable rtc interrupt
  7242 00005AE2 B00B                <1> 	mov al, 0xB
  7243 00005AE4 E670                <1> 	out 0x70, al
  7244 00005AE6 66C1C008            <1> 	rol ax, 8
  7245 00005AEA E471                <1> 	in al, 0x71
  7246 00005AEC 66C1C008            <1> 	rol ax, 8
  7247 00005AF0 E670                <1> 	out 0x70, al
  7248 00005AF2 66C1C008            <1> 	rol ax, 8
  7249 00005AF6 0C40                <1> 	or al, 0x40
  7250 00005AF8 E671                <1> 	out 0x71, al
  7251 00005AFA C3                  <1> 	ret
  7252                              <1> .fpu:
  7253                              <1> 	;And now to initialize the fpu
  7254 00005AFB 0F20E0              <1> 	mov eax, cr4
  7255 00005AFE 0D00020000          <1> 	or eax, 0x200
  7256 00005B03 0F22E0              <1> 	mov cr4, eax
  7257 00005B06 B87F0B0000          <1> 	mov eax, 0xB7F
  7258 00005B0B 50                  <1> 	push eax
  7259 00005B0C D92C24              <1> 	fldcw [esp]
  7260 00005B0F 58                  <1> 	pop eax
  7261 00005B10 C3                  <1> 	ret
  7262                              <1> 	
  7263                              <1> .sse:
  7264 00005B11 0F20C0              <1> 	mov eax, cr0
  7265 00005B14 24FB                <1> 	and al, 11111011b
  7266 00005B16 0C02                <1> 	or al, 00000010b
  7267 00005B18 0F22C0              <1> 	mov cr0, eax
  7268 00005B1B 0F20E0              <1> 	mov eax, cr4
  7269 00005B1E 660D0006            <1> 	or ax, 0000011000000000b
  7270 00005B22 0F22E0              <1> 	mov cr4, eax
  7271 00005B25 C3                  <1> 	ret
  7272                                      %include "source/pci.asm"
  7273 00005B26 00                  <1> pcibus		db 0
  7274 00005B27 00                  <1> pcidevice	db 0
  7275 00005B28 00                  <1> pcifunction	db 0
  7276 00005B29 00                  <1> pciregister	db 0
  7277 00005B2A 00                  <1> pcireqtype	db 0
  7278 00005B2B 00000000            <1> pcidevid	dd 0
  7279 00005B2F FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7280                              <1> 
  7281                              <1> getpciport:
  7282 00005B33 B001                <1> 	mov al, 1
  7283 00005B35 A2[2A5B0000]        <1> 	mov [pcireqtype], al
  7284 00005B3A E916000000          <1> 	jmp searchpci
  7285                              <1> pcidump:
  7286 00005B3F 31C0                <1> 	xor eax, eax
  7287 00005B41 A2[285B0000]        <1> 	mov [pcifunction], al
  7288 00005B46 A2[265B0000]        <1> 	mov [pcibus], al
  7289 00005B4B A2[275B0000]        <1> 	mov [pcidevice], al
  7290 00005B50 A2[2A5B0000]        <1> 	mov [pcireqtype], al
  7291                              <1> searchpci:		;;return in ebx, start X in pciX
  7292 00005B55 30C0                <1> 	xor al, al
  7293 00005B57 A2[295B0000]        <1> 	mov [pciregister], al
  7294 00005B5C E8C1010000          <1> 	call getpciaddr
  7295 00005B61 BAF80C0000          <1> 	mov edx, 0xCF8
  7296 00005B66 EF                  <1> 	out dx, eax	;;request pci config
  7297 00005B67 BAFC0C0000          <1> 	mov edx, 0xCFC
  7298 00005B6C ED                  <1> 	in eax, dx 	;;read in pci config
  7299 00005B6D 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7300 00005B72 0F8237000000        <1> 	jb near checkpcidevice
  7301                              <1> searchpciret:
  7302                              <1> nextpcidevice:
  7303 00005B78 30C0                <1> 	xor al, al
  7304 00005B7A A2[285B0000]        <1> 	mov [pcifunction], al
  7305 00005B7F A0[275B0000]        <1> 	mov al, [pcidevice]
  7306 00005B84 3C1F                <1> 	cmp al, 11111b
  7307 00005B86 0F8300010000        <1> 	jae near nextpcibus
  7308 00005B8C FEC0                <1> 	inc al
  7309 00005B8E A2[275B0000]        <1> 	mov [pcidevice], al
  7310 00005B93 EBC0                <1> 	jmp searchpci
  7311 00005B95 A0[285B0000]        <1> 	mov al, [pcifunction]
  7312 00005B9A 3C07                <1> 	cmp al, 111b
  7313 00005B9C 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7314 00005BA2 FEC0                <1> 	inc al
  7315 00005BA4 A2[285B0000]        <1> 	mov [pcifunction], al
  7316 00005BA9 EBAA                <1> 	jmp searchpci
  7317 00005BAB 00000000            <1> pcitype: db 0,0,0,0
  7318                              <1> checkpcidevice:
  7319 00005BAF 31C0                <1> 	xor eax, eax
  7320 00005BB1 3905[2B5B0000]      <1> 	cmp [pcidevid], eax
  7321 00005BB7 0F8430000000        <1> 	je near .good
  7322 00005BBD A2[295B0000]        <1> 	mov [pciregister], al	;device id, vendor id
  7323 00005BC2 E85B010000          <1> 	call getpciaddr
  7324 00005BC7 BAF80C0000          <1> 	mov edx, 0xCF8
  7325 00005BCC EF                  <1> 	out dx, eax
  7326 00005BCD BAFC0C0000          <1> 	mov edx, 0xCFC
  7327 00005BD2 ED                  <1> 	in eax, dx
  7328 00005BD3 2305[2F5B0000]      <1> 	and eax, [pcidevidmask]
  7329 00005BD9 8B1D[2B5B0000]      <1> 	mov ebx, [pcidevid]
  7330 00005BDF 231D[2F5B0000]      <1> 	and ebx, [pcidevidmask]
  7331 00005BE5 39D8                <1> 	cmp eax, ebx
  7332 00005BE7 0F858BFFFFFF        <1> 	jne near searchpciret
  7333                              <1> .good:
  7334 00005BED 30C0                <1> 	xor al, al
  7335 00005BEF 3805[2A5B0000]      <1> 	cmp [pcireqtype], al
  7336 00005BF5 0F842C000000        <1> 	je near dumppcidevice
  7337 00005BFB B008                <1> 	mov al, 0x08
  7338 00005BFD A2[295B0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7339 00005C02 E81B010000          <1> 	call getpciaddr
  7340 00005C07 BAF80C0000          <1> 	mov edx, 0xCF8
  7341 00005C0C EF                  <1> 	out dx, eax
  7342 00005C0D BAFC0C0000          <1> 	mov edx, 0xCFC
  7343 00005C12 ED                  <1> 	in eax, dx
  7344 00005C13 C1C008              <1> 	rol eax, 8
  7345 00005C16 3A05[AB5B0000]      <1> 	cmp al, [pcitype]
  7346 00005C1C 0F84A0000000        <1> 	je near foundpciaddr
  7347 00005C22 E951FFFFFF          <1> 	jmp searchpciret
  7348                              <1> dumppcidevice:
  7349 00005C27 30C0                <1> 	xor al, al
  7350 00005C29 A2[295B0000]        <1> 	mov [pciregister], al
  7351 00005C2E E8EF000000          <1> 	call getpciaddr
  7352 00005C33 89C1                <1> 	mov ecx, eax
  7353 00005C35 C605[4D2E0000]05    <1> 	mov byte [firsthexshown], 5
  7354 00005C3C E821D2FFFF          <1> 	call showhex
  7355                              <1> dumppcidevicelp:
  7356 00005C41 A2[295B0000]        <1> 	mov [pciregister], al
  7357 00005C46 E8D7000000          <1> 	call getpciaddr
  7358 00005C4B BAF80C0000          <1> 	mov edx, 0xCF8
  7359 00005C50 EF                  <1> 	out dx, eax
  7360 00005C51 BAFC0C0000          <1> 	mov edx, 0xCFC
  7361 00005C56 ED                  <1> 	in eax, dx
  7362 00005C57 89C1                <1> 	mov ecx, eax
  7363 00005C59 A0[295B0000]        <1> 	mov al, [pciregister]
  7364 00005C5E 0404                <1> 	add al, 4
  7365 00005C60 C605[4D2E0000]05    <1> 	mov byte [firsthexshown], 5
  7366 00005C67 E8F6D1FFFF          <1> 	call showhex
  7367 00005C6C 3C3C                <1> 	cmp al, 0x3C
  7368 00005C6E 72D1                <1> 	jb dumppcidevicelp
  7369                              <1> dumppcidn:
  7370                              <1> %ifdef io.serial
  7371                              <1> 	mov esi, line
  7372                              <1> 	call print
  7373                              <1> %else
  7374 00005C70 803D[00240000]00    <1> 	cmp byte [charpos], 0
  7375 00005C77 0F84FBFEFFFF        <1> 	je near searchpciret
  7376 00005C7D BE[D0830000]        <1> 	mov esi, line
  7377 00005C82 E884C0FFFF          <1> 	call print
  7378                              <1> %endif
  7379 00005C87 E9ECFEFFFF          <1> 	jmp searchpciret
  7380                              <1> nextpcibus:
  7381 00005C8C 30C0                <1> 	xor al, al
  7382 00005C8E A2[275B0000]        <1> 	mov [pcidevice], al
  7383 00005C93 A0[265B0000]        <1> 	mov al, [pcibus]
  7384 00005C98 3C7F                <1> 	cmp al, 1111111b
  7385 00005C9A 730C                <1> 	jae donesearchpci
  7386 00005C9C FEC0                <1> 	inc al
  7387 00005C9E A2[265B0000]        <1> 	mov [pcibus], al
  7388 00005CA3 E9ADFEFFFF          <1> 	jmp searchpci
  7389                              <1> donesearchpci:
  7390 00005CA8 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7391 00005CAD 31D2                <1> 	xor edx, edx
  7392 00005CAF 8815[AB5B0000]      <1> 	mov [pcitype], dl
  7393 00005CB5 8915[2B5B0000]      <1> 	mov [pcidevid], edx
  7394 00005CBB 891D[2F5B0000]      <1> 	mov [pcidevidmask], ebx
  7395 00005CC1 C3                  <1> 	ret
  7396                              <1> foundpciaddr:
  7397 00005CC2 B010                <1> 	mov al, 0x10
  7398 00005CC4 A2[295B0000]        <1> 	mov [pciregister], al
  7399                              <1> findpciioaddr:
  7400 00005CC9 E854000000          <1> 	call getpciaddr
  7401 00005CCE BAF80C0000          <1> 	mov edx, 0xCF8
  7402 00005CD3 EF                  <1> 	out dx, eax
  7403 00005CD4 BAFC0C0000          <1> 	mov edx, 0xCFC
  7404 00005CD9 ED                  <1> 	in eax, dx
  7405 00005CDA 89C3                <1> 	mov ebx, eax
  7406 00005CDC 81E301000000        <1> 	and ebx, 1
  7407 00005CE2 81FB00000000        <1> 	cmp ebx, 0
  7408 00005CE8 0F841E000000        <1> 	je near notpciioaddr
  7409 00005CEE 2D01000000          <1> 	sub eax, 1
  7410 00005CF3 89C2                <1> 	mov edx, eax
  7411 00005CF5 31DB                <1> 	xor ebx, ebx
  7412 00005CF7 4B                  <1> 	dec ebx
  7413 00005CF8 891D[2F5B0000]      <1> 	mov [pcidevidmask], ebx
  7414 00005CFE 43                  <1> 	inc ebx
  7415 00005CFF 881D[AB5B0000]      <1> 	mov [pcitype], bl
  7416 00005D05 891D[2B5B0000]      <1> 	mov [pcidevid], ebx
  7417 00005D0B C3                  <1> 	ret
  7418                              <1> notpciioaddr:
  7419 00005D0C A0[295B0000]        <1> 	mov al, [pciregister]
  7420 00005D11 0404                <1> 	add al, 4
  7421 00005D13 3C28                <1> 	cmp al, 0x28
  7422 00005D15 0F875DFEFFFF        <1> 	ja near searchpciret
  7423 00005D1B A2[295B0000]        <1> 	mov [pciregister], al
  7424 00005D20 EBA7                <1> 	jmp findpciioaddr
  7425                              <1> getpciaddr:		;;puts it in eax and ebx
  7426 00005D22 31C0                <1> 			xor eax, eax
  7427 00005D24 BB00000080          <1> 			mov ebx, 0x80000000
  7428 00005D29 A0[265B0000]        <1> 			mov al, [pcibus]
  7429 00005D2E C1E010              <1> 			shl eax, 16
  7430 00005D31 01C3                <1> 			add ebx, eax
  7431 00005D33 31C0                <1> 			xor eax, eax
  7432 00005D35 A0[275B0000]        <1> 			mov al, [pcidevice]
  7433 00005D3A C1E00B              <1> 			shl eax, 11
  7434 00005D3D 01C3                <1> 			add ebx, eax
  7435 00005D3F 31C0                <1> 			xor eax, eax
  7436 00005D41 A0[285B0000]        <1> 			mov al, [pcifunction]
  7437 00005D46 C1E008              <1> 			shl eax, 8
  7438 00005D49 01C3                <1> 			add ebx, eax
  7439 00005D4B 31C0                <1> 			xor eax, eax
  7440 00005D4D A0[295B0000]        <1> 			mov al, [pciregister]
  7441 00005D52 01C3                <1> 			add ebx, eax
  7442 00005D54 89D8                <1> 			mov eax, ebx
  7443 00005D56 C3                  <1> 			ret
  7444                                      %include "source/disk.asm"
  7445                              <1> ;This loads files using the methods in the loaded driver
  7446                              <1> %ifdef disk.real
  7447                              <1> %include "source/drivers/disk/realmode.asm"
  7448                              <2> diskr:
  7449                              <2> 			;read from disk using real mode-it does not work with large files
  7450                              <2> 			;sector count in cl
  7451                              <2> 			;disk number in ch
  7452                              <2> 			;48 bit address with last 32 bits in ebx
  7453                              <2> 			;buffer in esi
  7454                              <2> 			;puts end of buffer in edi and end lba address in edx
  7455 00005D57 880D[845D0000]      <2> 	mov [sdlength], cl
  7456 00005D5D 891D[855D0000]      <2> 	mov [sdaddress], ebx
  7457 00005D63 8935[E35E0000]      <2> 	mov [oldesireal], esi
  7458 00005D69 66BE[895D]          <2> 	mov si, readdiskreal
  7459 00005D6D 668935[DA0C0000]    <2> 	mov [realmodeptr], si
  7460 00005D74 BE[C55D0000]        <2> 	mov esi, backfromrealread
  7461 00005D79 8935[D60C0000]      <2> 	mov [realmodereturn], esi
  7462 00005D7F E93BAEFFFF          <2> 	jmp realmode
  7463 00005D84 00                  <2> sdlength db 0
  7464 00005D85 00000000            <2> sdaddress dd 0
  7465                              <2> 
  7466                              <2> [BITS 16]
  7467                              <2> readdiskreal:
  7468 00005D89 C706[B55D]1000      <2> 	mov word [dlen], 0x10
  7469 00005D8F C706[B95D]0000      <2> 	mov word [daddress], 0
  7470 00005D95 C706[BB5D]0001      <2> 	mov word [dsegm], 0x100
  7471 00005D9B 66891E[BD5D]        <2> 	mov [dlbaad], ebx
  7472 00005DA0 880E[B75D]          <2> 	mov [dreadlen], cl
  7473                              <2> ReadHardDisk:
  7474 00005DA4 BE[B55D]            <2> 	mov si, diskaddresspacket
  7475 00005DA7 31C0                <2> 	xor ax, ax
  7476 00005DA9 B442                <2> 	mov ah, 0x42
  7477 00005DAB 8A16[B45D]          <2> 	mov dl, [dnumber]
  7478 00005DAF CD13                <2> 	int 0x13
  7479 00005DB1 72F1                <2> 	jc ReadHardDisk
  7480 00005DB3 C3                  <2> 	ret
  7481                              <2> 
  7482 00005DB4 80                  <2> dnumber db 0x80
  7483                              <2> diskaddresspacket:
  7484 00005DB5 10                  <2> dlen:	db 0x10 ;size of packet
  7485 00005DB6 00                  <2> 		db 0
  7486 00005DB7 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7487 00005DB9 0000                <2> daddress:	dw 0x0	;address 0
  7488 00005DBB 0001                <2> dsegm:		dw 0x100	;segment
  7489                              <2> 		;start with known value for hd
  7490                              <2> dlbaad:
  7491 00005DBD 00000000            <2> 	dd 0	;lba address
  7492 00005DC1 00000000            <2> 	dd 0
  7493                              <2> [BITS 32]
  7494                              <2> backfromrealread:
  7495 00005DC5 8B35[E35E0000]      <2> 	mov esi, [oldesireal]
  7496 00005DCB 8B1D[855D0000]      <2> 	mov ebx, [sdaddress]
  7497 00005DD1 31C9                <2> 	xor ecx, ecx
  7498 00005DD3 8A0D[845D0000]      <2> 	mov cl, [sdlength]
  7499 00005DD9 01CB                <2> 	add ebx, ecx
  7500 00005DDB 66B80800            <2> 	mov ax, LINEAR_SEL
  7501 00005DDF 8EE0                <2> 	mov fs, ax
  7502 00005DE1 BF00100000          <2> 	mov edi, 0x1000
  7503 00005DE6 B200                <2> 	mov dl, 0
  7504 00005DE8 D0E1                <2> 	shl cl, 1
  7505                              <2> copyfromrmodedisk:
  7506 00005DEA 648A07              <2> 	mov al, [fs:edi]
  7507 00005DED 8806                <2> 	mov [esi], al
  7508 00005DEF 47                  <2> 	inc edi
  7509 00005DF0 46                  <2> 	inc esi
  7510 00005DF1 FECA                <2> 	dec dl
  7511 00005DF3 80FA00              <2> 	cmp dl, 0
  7512 00005DF6 75F2                <2> 	jne copyfromrmodedisk
  7513 00005DF8 FEC9                <2> 	dec cl
  7514 00005DFA B200                <2> 	mov dl, 0
  7515 00005DFC 80F900              <2> 	cmp cl, 0
  7516 00005DFF 75E9                <2> 	jne copyfromrmodedisk
  7517 00005E01 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7518 00005E05 8EE0                <2> 	mov fs, ax
  7519 00005E07 89F7                <2> 	mov edi, esi
  7520 00005E09 8B35[E35E0000]      <2> 	mov esi, [oldesireal]
  7521 00005E0F 89DA                <2> 	mov edx, ebx
  7522 00005E11 8B1D[855D0000]      <2> 	mov ebx, [sdaddress]
  7523 00005E17 C3                  <2> 	ret
  7524                              <2> 	
  7525                              <1> %else
  7526                              <1> 	%ifdef disk.protected
  7527                              <1> 	%include "source/drivers/disk/pata.asm"
  7528                              <1> 	%endif
  7529                              <1> %endif
  7530                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7531                              <1> 			;returns with err code in edx and file end in edi
  7532 00005E18 803F00              <1> 	cmp byte [edi], 0
  7533 00005E1B 0F8448000000        <1> 	je near nofileload
  7534 00005E21 89FA                <1> 	mov edx, edi
  7535 00005E23 BB[F5930000]        <1> 	mov ebx, diskfileindex
  7536                              <1> nextnamechar:
  7537 00005E28 8A07                <1> 	mov al, [edi]
  7538 00005E2A 3C26                <1> 	cmp al, '&'
  7539 00005E2C 7440                <1> 	je nullfile
  7540 00005E2E 8A23                <1> 	mov ah, [ebx]
  7541 00005E30 47                  <1> 	inc edi
  7542 00005E31 43                  <1> 	inc ebx
  7543 00005E32 88C1                <1> 	mov cl, al
  7544 00005E34 08E1                <1> 	or cl, ah
  7545 00005E36 80F900              <1> 	cmp cl, 0
  7546 00005E39 744E                <1> 	je equalfilenames
  7547 00005E3B 80F920              <1> 	cmp cl, ' '
  7548 00005E3E 7449                <1> 	je equalfilenames
  7549 00005E40 3C2A                <1> 	cmp al, '*'
  7550 00005E42 742B                <1> 	je equalfilenames2
  7551 00005E44 80FC00              <1> 	cmp ah, 0
  7552 00005E47 7410                <1> 	je nextfilename
  7553 00005E49 3C00                <1> 	cmp al, 0
  7554 00005E4B 7404                <1> 	je getebxzero
  7555 00005E4D 38E0                <1> 	cmp al, ah
  7556 00005E4F 74D7                <1> 	je nextnamechar
  7557                              <1> getebxzero:
  7558 00005E51 8A23                <1> 	mov ah, [ebx]
  7559 00005E53 43                  <1> 	inc ebx
  7560 00005E54 80FC00              <1> 	cmp ah, 0
  7561 00005E57 75F8                <1> 	jne getebxzero
  7562                              <1> nextfilename:
  7563 00005E59 81C308000000        <1> 	add ebx, 8		;next descriptor
  7564 00005E5F 89D7                <1> 	mov edi, edx
  7565 00005E61 81FB[9F950000]      <1> 	cmp ebx, enddiskfileindex
  7566 00005E67 72BF                <1> 	jb nextnamechar
  7567                              <1> nofileload:
  7568 00005E69 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7569                              <1> nullfile:
  7570 00005E6E C3                  <1> 	ret
  7571                              <1> equalfilenames2:
  7572 00005E6F 81EB02000000        <1> 	sub ebx, 2
  7573                              <1> eqfilefind:
  7574 00005E75 43                  <1> 	inc ebx
  7575 00005E76 81FB[9F950000]      <1> 	cmp ebx, enddiskfileindex
  7576 00005E7C 0F83E7FFFFFF        <1> 	jae near nofileload
  7577 00005E82 8A03                <1> 	mov al, [ebx]
  7578 00005E84 3C00                <1> 	cmp al, 0
  7579 00005E86 75ED                <1> 	jne eqfilefind
  7580 00005E88 43                  <1> 	inc ebx
  7581                              <1> equalfilenames:
  7582 00005E89 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7583 00005E8C 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7584 00005E8E 031D[A2950000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7585 00005E94 31C9                <1> 	xor ecx, ecx
  7586 00005E96 88C1                <1> 	mov cl, al			;get excess number of sectors
  7587 00005E98 C0E102              <1> 	shl cl, 2
  7588 00005E9B C0E902              <1> 	shr cl, 2			;cut off at 64
  7589 00005E9E 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7590 00005EA0 B500                <1> 	mov ch, 0			;drive 0
  7591 00005EA2 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7592                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7593 00005EA5 A3[E75E0000]        <1> 	mov [filetracks], eax
  7594 00005EAA 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7595 00005EAC 89DA                <1> 	mov edx, ebx
  7596 00005EAE 80F900              <1> 	cmp cl, 0
  7597 00005EB1 7405                <1> 	je copytracksforfile
  7598 00005EB3 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7599                              <1> copytracksforfile:
  7600 00005EB8 A1[E75E0000]        <1> 	mov eax, [filetracks]
  7601 00005EBD 3D00000000          <1> 	cmp eax, 0
  7602 00005EC2 7419                <1> 	je donecopyfile
  7603 00005EC4 48                  <1> 	dec eax
  7604 00005EC5 A3[E75E0000]        <1> 	mov [filetracks], eax
  7605 00005ECA 89D3                <1> 	mov ebx, edx	;get end lba
  7606 00005ECC B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7607 00005ECE 8A2D[A1950000]      <1> 	mov ch, [DriveNumber]
  7608 00005ED4 89FE                <1> 	mov esi, edi	;reset buffer
  7609 00005ED6 E87CFEFFFF          <1> 	call diskr
  7610 00005EDB EBDB                <1> 	jmp copytracksforfile
  7611                              <1> donecopyfile:
  7612 00005EDD BA00000000          <1> 	mov edx, 0	;no error
  7613 00005EE2 C3                  <1> 	ret
  7614                              <1> 
  7615 00005EE3 00000000            <1> oldesireal dd 0
  7616 00005EE7 00000000            <1> filetracks dd 0
  7617 00005EEB 00                  <1> lbad1 db 0
  7618 00005EEC 00                  <1> lbad2 db 0
  7619 00005EED 00                  <1> lbad3 db 0
  7620 00005EEE 00                  <1> lbad4 db 0
  7621 00005EEF 00                  <1> lbad5 db 0
  7622 00005EF0 00                  <1> lbad6 db 0
  7623 00005EF1 6400                <1> segments dw 100
  7624                              <1> 
  7625                              <1> 
  7626                              <1> 	
  7627                                      %include "source/threads.asm"
  7628                              <1> %ifdef threads.included	
  7629                              <1> nwcmdst:
  7630 00005EF3 31C0                <1> 	xor eax, eax
  7631 00005EF5 BC[86A70000]        <1> 	mov esp, stackend
  7632 00005EFA A2[B75F0000]        <1> 	mov [threadson], al
  7633 00005EFF A3[B85F0000]        <1> 	mov [currentthread], eax
  7634 00005F04 0504000000          <1> 	add eax, 4
  7635 00005F09 A3[B35F0000]        <1> 	mov [lastthread], eax
  7636 00005F0E FB                  <1> 	sti
  7637 00005F0F E974CAFFFF          <1> 	jmp nwcmd
  7638                              <1> 
  7639                              <1> nomorethreadspace:
  7640 00005F14 BE[2A5F0000]        <1> 	mov esi, nmts
  7641 00005F19 E8EDBDFFFF          <1> 	call print
  7642 00005F1E C605[B75F0000]00    <1> 	mov byte [threadson], 0
  7643 00005F25 E95ECAFFFF          <1> 	jmp nwcmd
  7644 00005F2A 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7645 00005F33 6572666C6F770A00    <1>
  7646                              <1> 
  7647                              <1> nomorestackspace:
  7648 00005F3B BE[475F0000]        <1> 	mov esi, nmss
  7649 00005F40 E8C6BDFFFF          <1> 	call print
  7650 00005F45 EBAC                <1> 	jmp nwcmdst
  7651 00005F47 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7652 00005F50 72666C6F770A00      <1>
  7653                              <1> 	
  7654                              <1> threadswitch:
  7655 00005F57 FA                  <1> 	cli
  7656 00005F58 60                  <1> 	pushad
  7657 00005F59 BF[E8CE0100]        <1> 	mov edi, threadlist
  7658 00005F5E A1[B85F0000]        <1> 	mov eax, [currentthread]
  7659 00005F63 40                  <1> 	inc eax
  7660 00005F64 A3[B85F0000]        <1> 	mov [currentthread], eax
  7661 00005F69 6648                <1> 	dec ax
  7662 00005F6B C1E002              <1> 	shl eax, 2
  7663 00005F6E 01C7                <1> 	add edi, eax
  7664 00005F70 8927                <1> 	mov [edi], esp
  7665 00005F72 81C704000000        <1> 	add edi, 4
  7666 00005F78 81FF[E8DE0100]      <1> 	cmp edi, threadlistend
  7667 00005F7E 0F830D000000        <1> 	jae near nookespthread
  7668 00005F84 8B07                <1> 	mov eax, [edi]
  7669 00005F86 3D00000000          <1> 	cmp eax, 0
  7670 00005F8B 0F8519000000        <1> 	jne near okespthread
  7671                              <1> nookespthread:
  7672 00005F91 BF[E8CE0100]        <1> 	mov edi, threadlist
  7673 00005F96 31C0                <1> 	xor eax, eax
  7674 00005F98 A3[B85F0000]        <1> 	mov [currentthread], eax
  7675 00005F9D 8B07                <1> 	mov eax, [edi]
  7676 00005F9F 3D00000000          <1> 	cmp eax, 0
  7677 00005FA4 0F8449FFFFFF        <1> 	je near nwcmdst
  7678                              <1> okespthread:
  7679 00005FAA 89C4                <1> 	mov esp, eax
  7680 00005FAC B020                <1> 	mov al, 0x20
  7681 00005FAE E620                <1> 	out 0x20, al
  7682 00005FB0 61                  <1> 	popad
  7683 00005FB1 FB                  <1> 	sti
  7684 00005FB2 CF                  <1> 	iret
  7685                              <1> 
  7686                              <1> %endif
  7687 00005FB3 04000000            <1> 	lastthread dd 4
  7688 00005FB7 00                  <1> 	threadson db 0
  7689 00005FB8 00000000            <1> 	currentthread dd 0
  7690                                  %ifdef gui.included
  7691                                      %include "source/gui/gui.asm"
  7692                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7693 00005FBC 31C0                <1> 	xor eax, eax
  7694 00005FBE 31DB                <1> 	xor ebx, ebx
  7695 00005FC0 31C9                <1> 	xor ecx, ecx
  7696 00005FC2 31D2                <1> 	xor edx, edx
  7697 00005FC4 E820060000          <1> 	call guisetup
  7698                              <1> guiloop:
  7699 00005FC9 E893F3FFFF          <1> 	call cursorgui
  7700                              <1> guistart:
  7701 00005FCE E862F7FFFF          <1> 	call getkey
  7702 00005FD3 C605[8F710000]00    <1> 	mov byte [copygui], 0
  7703 00005FDA EBF2                <1> 	jmp guistart
  7704                              <1> 	
  7705                              <1> %include "source/gui/bmp.asm"
  7706                              <2> 
  7707                              <2> showbmp:
  7708 00005FDC 668B06              <2> 	mov ax, [esi]
  7709 00005FDF 663D424D            <2> 	cmp ax, "BM"
  7710 00005FE3 0F85BB000000        <2> 	jne near endedbmp
  7711 00005FE9 8B3D[84520000]      <2> 	mov edi, [physbaseptr]
  7712 00005FEF 6689D0              <2> 	mov ax, dx
  7713 00005FF2 6689CB              <2> 	mov bx, cx
  7714 00005FF5 31C9                <2> 	xor ecx, ecx
  7715 00005FF7 31D2                <2> 	xor edx, edx
  7716 00005FF9 6689D9              <2> 	mov cx, bx
  7717 00005FFC 6689C2              <2> 	mov dx, ax
  7718 00005FFF 01D7                <2> 	add edi, edx
  7719 00006001 01D7                <2> 	add edi, edx
  7720 00006003 31D2                <2> 	xor edx, edx
  7721 00006005 668B15[5C530000]    <2> 	mov dx, [resolutionx2]
  7722 0000600C 034E16              <2> 	add ecx, [esi + 22]
  7723                              <2> bmplocloop:
  7724 0000600F 52                  <2> 	push edx
  7725 00006010 31C0                <2> 	xor eax, eax
  7726 00006012 6689D0              <2> 	mov ax, dx
  7727 00006015 F7E1                <2> 	mul ecx
  7728 00006017 5A                  <2> 	pop edx
  7729 00006018 663B0D[70520000]    <2> 	cmp cx, [resolutiony]
  7730 0000601F 7609                <2> 	jbe .nofixy
  7731 00006021 31C9                <2> 	xor ecx, ecx
  7732 00006023 668B0D[70520000]    <2> 	mov cx, [resolutiony]
  7733                              <2> .nofixy:
  7734 0000602A 01C7                <2> 	add edi, eax
  7735 0000602C 8B5612              <2> 	mov edx, [esi + 18]
  7736 0000602F 8B4E16              <2> 	mov ecx, [esi + 22]
  7737 00006032 8B460A              <2> 	mov eax, [esi + 10]
  7738 00006035 8B5E02              <2> 	mov ebx, [esi + 2]
  7739 00006038 01F3                <2> 	add ebx, esi
  7740 0000603A 891D[AA600000]      <2> 	mov [bmpend], ebx
  7741 00006040 89D3                <2> 	mov ebx, edx
  7742 00006042 01C6                <2> 	add esi, eax
  7743                              <2> ldxbmp2:
  7744 00006044 31D2                <2> 	xor edx, edx
  7745 00006046 668B15[6E520000]    <2> 	mov dx, [resolutionx]
  7746 0000604D 39D3                <2> 	cmp ebx, edx
  7747 0000604F 7702                <2> 	ja ldxbmp
  7748 00006051 89DA                <2> 	mov edx, ebx
  7749                              <2> ldxbmp:
  7750 00006053 668B06              <2> 	mov ax, [esi]
  7751 00006056 668907              <2> 	mov [edi], ax
  7752 00006059 81C702000000        <2> 	add edi, 2
  7753 0000605F 81C602000000        <2> 	add esi, 2
  7754 00006065 3B35[AA600000]      <2> 	cmp esi, [bmpend]
  7755 0000606B 7737                <2> 	ja endedbmp
  7756 0000606D 4A                  <2> 	dec edx
  7757 0000606E 81FA00000000        <2> 	cmp edx, 0
  7758 00006074 77DD                <2> 	ja ldxbmp
  7759 00006076 31D2                <2> 	xor edx, edx
  7760 00006078 668B15[6E520000]    <2> 	mov dx, [resolutionx]
  7761 0000607F 39D3                <2> 	cmp ebx, edx
  7762 00006081 7610                <2> 	jbe .notover
  7763                              <2> .over:
  7764 00006083 01DE                <2> 	add esi, ebx
  7765 00006085 01DE                <2> 	add esi, ebx
  7766 00006087 29D6                <2> 	sub esi, edx
  7767 00006089 29D6                <2> 	sub esi, edx
  7768 0000608B 01DF                <2> 	add edi, ebx
  7769 0000608D 01DF                <2> 	add edi, ebx
  7770 0000608F 29D7                <2> 	sub edi, edx
  7771 00006091 29D7                <2> 	sub edi, edx
  7772                              <2> .notover:
  7773 00006093 29DF                <2> 	sub edi, ebx
  7774 00006095 29DF                <2> 	sub edi, ebx
  7775 00006097 29D7                <2> 	sub edi, edx
  7776 00006099 29D7                <2> 	sub edi, edx
  7777 0000609B 49                  <2> 	dec ecx
  7778 0000609C 81F900000000        <2> 	cmp ecx, 0
  7779 000060A2 77A0                <2> 	ja ldxbmp2
  7780                              <2> endedbmp:
  7781 000060A4 E8CA010000          <2> 	call switchmousepos2
  7782 000060A9 C3                  <2> 	ret
  7783                              <2> 	
  7784 000060AA 00000000            <2> 	bmpend dd 0
  7785                              <1> %include "source/gui/circle.asm"
  7786                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  7787 000060AE 663D0000            <2> 	cmp ax, 0
  7788 000060B2 770A                <2> 	ja .nozerocircle
  7789 000060B4 E8AF180000          <2> 	call putpixel	;the easiest circle ever
  7790 000060B9 E9F4000000          <2> 	jmp .done
  7791                              <2> .nozerocircle
  7792 000060BE 55                  <2> 	push ebp
  7793 000060BF 6689F5              <2> 	mov bp, si
  7794 000060C2 6650                <2> 	push ax
  7795 000060C4 E8E0180000          <2> 	call getpixelmem
  7796 000060C9 31C0                <2> 	xor eax, eax
  7797 000060CB 6658                <2> 	pop ax
  7798 000060CD BE01000000          <2> 	mov esi, 1
  7799 000060D2 29C6                <2> 	sub esi, eax
  7800 000060D4 89C1                <2> 	mov ecx, eax
  7801 000060D6 31C0                <2> 	xor eax, eax
  7802 000060D8 66A1[5C530000]      <2> 	mov ax, [resolutionx2]
  7803 000060DE F7E1                <2> 	mul ecx
  7804 000060E0 50                  <2> 	push eax
  7805 000060E1 31D2                <2> 	xor edx, edx
  7806 000060E3 01C7                <2> 	add edi, eax
  7807 000060E5 66892F              <2> 	mov [edi], bp
  7808 000060E8 29C7                <2> 	sub edi, eax
  7809 000060EA 29C7                <2> 	sub edi, eax
  7810 000060EC 66892F              <2> 	mov [edi], bp
  7811 000060EF 01C7                <2> 	add edi, eax
  7812 000060F1 D1E1                <2> 	shl ecx, 1
  7813 000060F3 01CF                <2> 	add edi, ecx
  7814 000060F5 66892F              <2> 	mov [edi], bp
  7815 000060F8 D1E1                <2> 	shl ecx, 1
  7816 000060FA 29CF                <2> 	sub edi, ecx
  7817 000060FC 66892F              <2> 	mov [edi], bp
  7818 000060FF D1E9                <2> 	shr ecx, 1
  7819 00006101 01CF                <2> 	add edi, ecx
  7820 00006103 D1E9                <2> 	shr ecx, 1
  7821 00006105 B802000000          <2> 	mov eax, 2
  7822 0000610A F7E1                <2> 	mul ecx
  7823 0000610C 48                  <2> 	dec eax
  7824 0000610D F7D0                <2> 	not eax ;make it negative
  7825 0000610F A3[B7610000]        <2> 	mov [.ddF_y], eax
  7826 00006114 58                  <2> 	pop eax
  7827 00006115 BB01000000          <2> 	mov ebx, 1
  7828 0000611A 891D[B3610000]      <2> 	mov [.ddF_x], ebx
  7829 00006120 4B                  <2> 	dec ebx
  7830 00006121 31D2                <2> 	xor edx, edx
  7831                              <2> .lp:	;it starts this with the center in edi
  7832                              <2> 		;color in bp
  7833                              <2> 		;ddF_x in memor
  7834                              <2> 		;x*resolutionx2 in ebx
  7835                              <2> 		;x in edx
  7836                              <2> 		;ddF_y in memory
  7837                              <2> 		;y*resolutionx2 in eax
  7838                              <2> 		;f in esi
  7839                              <2> 		;y in ecx
  7840 00006123 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  7841 00006129 7717                <2> 	ja	.noddF_y
  7842 0000612B 49                  <2> 	dec ecx
  7843 0000612C 2B05[5C530000]      <2> 	sub eax, [resolutionx2]
  7844 00006132 8105[B7610000]0200- <2> 	add dword [.ddF_y], 2
  7845 0000613A 0000                <2>
  7846 0000613C 0335[B7610000]      <2> 	add esi, [.ddF_y]
  7847                              <2> .noddF_y:
  7848 00006142 42                  <2> 	inc edx
  7849 00006143 031D[5C530000]      <2> 	add ebx, [resolutionx2]
  7850 00006149 8105[B3610000]0200- <2> 	add dword [.ddF_x], 2
  7851 00006151 0000                <2>
  7852 00006153 0335[B3610000]      <2> 	add esi, [.ddF_x]
  7853                              <2> 
  7854 00006159 D1E2                <2> 	shl edx, 1
  7855 0000615B D1E1                <2> 	shl ecx, 1
  7856 0000615D 01D7                <2> 	add edi, edx
  7857 0000615F 01C7                <2> 	add edi, eax
  7858 00006161 66892F              <2> 	mov [edi], bp
  7859 00006164 D1E2                <2> 	shl edx, 1
  7860 00006166 29D7                <2> 	sub edi, edx
  7861 00006168 66892F              <2> 	mov [edi], bp
  7862 0000616B 01D7                <2> 	add edi, edx
  7863 0000616D D1E0                <2> 	shl eax, 1
  7864 0000616F 29C7                <2> 	sub edi, eax
  7865 00006171 66892F              <2> 	mov [edi], bp
  7866 00006174 29D7                <2> 	sub edi, edx
  7867 00006176 66892F              <2> 	mov [edi], bp
  7868 00006179 D1EA                <2> 	shr edx, 1
  7869 0000617B D1E8                <2> 	shr eax, 1
  7870 0000617D 01C7                <2> 	add edi, eax
  7871 0000617F 01D7                <2> 	add edi, edx
  7872                              <2> 	
  7873 00006181 01DF                <2> 	add edi, ebx
  7874 00006183 01CF                <2> 	add edi, ecx
  7875 00006185 66892F              <2> 	mov [edi], bp
  7876 00006188 D1E1                <2> 	shl ecx, 1
  7877 0000618A 29CF                <2> 	sub edi, ecx
  7878 0000618C 66892F              <2> 	mov [edi], bp
  7879 0000618F D1E3                <2> 	shl ebx, 1
  7880 00006191 29DF                <2> 	sub edi, ebx
  7881 00006193 01CF                <2> 	add edi, ecx
  7882 00006195 66892F              <2> 	mov [edi], bp
  7883 00006198 29CF                <2> 	sub edi, ecx
  7884 0000619A 66892F              <2> 	mov [edi], bp
  7885 0000619D D1EB                <2> 	shr ebx, 1
  7886 0000619F D1E9                <2> 	shr ecx, 1
  7887 000061A1 01DF                <2> 	add edi, ebx
  7888 000061A3 01CF                <2> 	add edi, ecx
  7889 000061A5 D1EA                <2> 	shr edx, 1
  7890 000061A7 D1E9                <2> 	shr ecx, 1
  7891 000061A9 39CA                <2> 	cmp edx, ecx
  7892 000061AB 0F8272FFFFFF        <2> 	jb .lp
  7893 000061B1 5D                  <2> 	pop ebp
  7894                              <2> .done:
  7895 000061B2 C3                  <2> 	ret
  7896                              <2> 	
  7897 000061B3 00000000            <2> .ddF_x dd 0
  7898 000061B7 00000000            <2> .ddF_y dd 0
  7899                              <1> %include "source/gui/cursor.asm"
  7900                              <2> clearmousecursor:
  7901 000061BB BE[15650000]        <2> 		mov esi, background
  7902 000061C0 8B3D[84520000]      <2> 		mov edi, [physbaseptr]
  7903 000061C6 31D2                <2> 		xor edx, edx
  7904 000061C8 31C9                <2> 		xor ecx, ecx
  7905 000061CA 668B15[4B550000]    <2> 		mov dx, [lastmouseposition]
  7906 000061D1 668B0D[4D550000]    <2> 		mov cx, [lastmouseposition + 2]
  7907 000061D8 01D7                <2> 		add edi, edx
  7908 000061DA 31D2                <2> 		xor edx, edx
  7909 000061DC 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  7910 000061E3 81F900000000        <2> 		cmp ecx, 0
  7911 000061E9 7408                <2> 		je .nomul
  7912 000061EB 52                  <2> 		push edx
  7913 000061EC 89D0                <2> 		mov eax, edx
  7914 000061EE F7E1                <2> 		mul ecx
  7915 000061F0 01C7                <2> 		add edi, eax
  7916 000061F2 5A                  <2> 		pop edx
  7917                              <2> .nomul:
  7918                              <2> %ifdef 	gui.background
  7919                              <2> 		cmp dword [backgroundimage], 0
  7920                              <2> 		je .noyclr
  7921                              <2> 		mov esi, [backgroundimage]
  7922                              <2> 		sub edi, [physbaseptr]
  7923                              <2> 		add esi, edi
  7924                              <2> 		add edi, [physbaseptr]
  7925                              <2> .backlp:
  7926                              <2> 		xor ebx, ebx
  7927                              <2> .noyback:
  7928                              <2> 		mov eax, [esi + ebx]
  7929                              <2> 		mov [edi + ebx], eax
  7930                              <2> 		add ebx, 4
  7931                              <2> 		cmp ebx, 16
  7932                              <2> 		jne .noyback
  7933                              <2> 		add edi, edx
  7934                              <2> 		add esi, edx
  7935                              <2> 		inc cx
  7936                              <2> 		cmp cx, 16
  7937                              <2> 		jb .backlp
  7938                              <2> 		ret
  7939                              <2> %endif
  7940                              <2> .noyclr:
  7941 000061F3 668B06              <2> 		mov ax, [esi]
  7942 000061F6 C1C010              <2> 		rol eax, 16
  7943 000061F9 668B06              <2> 		mov ax, [esi]
  7944 000061FC 8907                <2> 		mov [edi], eax
  7945 000061FE 894704              <2> 		mov [edi + 4], eax
  7946 00006201 894708              <2> 		mov [edi + 8], eax
  7947 00006204 89470C              <2> 		mov [edi + 12], eax
  7948 00006207 01D7                <2> 		add edi, edx
  7949 00006209 6641                <2> 		inc cx
  7950 0000620B 6681F91000          <2> 		cmp cx, 16
  7951 00006210 72E1                <2> 		jb .noyclr
  7952 00006212 C3                  <2> 		ret
  7953                              <2> 
  7954                              <2> switchmousepos:		;;switch were the mouse is located
  7955 00006213 BE[7BC80000]        <2> 		mov esi, mousecolorbuf
  7956 00006218 8B3D[84520000]      <2> 		mov edi, [physbaseptr]
  7957 0000621E 31D2                <2> 		xor edx, edx
  7958 00006220 31C9                <2> 		xor ecx, ecx
  7959 00006222 668B15[4B550000]    <2> 		mov dx, [lastmouseposition]
  7960 00006229 668B0D[4D550000]    <2> 		mov cx, [lastmouseposition + 2]
  7961 00006230 01D7                <2> 		add edi, edx
  7962 00006232 31D2                <2> 		xor edx, edx
  7963 00006234 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  7964 0000623B 6681F90000          <2> 		cmp cx, 0
  7965 00006240 740B                <2> 		je noswmsy
  7966 00006242 01D7                <2> swmsy:		add edi, edx
  7967 00006244 6649                <2> 		dec cx
  7968 00006246 6681F90000          <2> 		cmp cx, 0
  7969 0000624B 75F5                <2> 		jne swmsy
  7970 0000624D 8B06                <2> noswmsy:	mov eax, [esi]
  7971 0000624F 8B5E04              <2> 		mov ebx, [esi + 4]
  7972 00006252 8907                <2> 		mov [edi], eax
  7973 00006254 895F04              <2> 		mov [edi + 4], ebx
  7974 00006257 8B4608              <2> 		mov eax, [esi + 8]
  7975 0000625A 8B5E0C              <2> 		mov ebx, [esi + 12]
  7976 0000625D 894708              <2> 		mov [edi + 8], eax
  7977 00006260 895F0C              <2> 		mov [edi + 12], ebx
  7978 00006263 01D7                <2> 		add edi, edx
  7979 00006265 81C610000000        <2> 		add esi, 16
  7980 0000626B 81FE[7BC90000]      <2> 		cmp esi, mcolorend
  7981 00006271 72DA                <2> 		jb noswmsy
  7982                              <2> 		
  7983                              <2> switchmousepos2:
  7984 00006273 BE[7BC80000]        <2> 		mov esi, mousecolorbuf
  7985 00006278 8B3D[84520000]      <2> 		mov edi, [physbaseptr]
  7986 0000627E 31D2                <2> 		xor edx, edx
  7987 00006280 31C9                <2> 		xor ecx, ecx
  7988 00006282 668B15[4F550000]    <2> 		mov dx, [mousecursorposition]
  7989 00006289 668B0D[51550000]    <2> 		mov cx, [mousecursorposition + 2]
  7990 00006290 01D7                <2> 		add edi, edx
  7991 00006292 31D2                <2> 		xor edx, edx
  7992 00006294 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  7993 0000629B 6681F90000          <2> 		cmp cx, 0
  7994 000062A0 740B                <2> 		je noswmsy2
  7995 000062A2 01D7                <2> swmsy2:		add edi, edx
  7996 000062A4 6649                <2> 		dec cx
  7997 000062A6 6681F90000          <2> 		cmp cx, 0
  7998 000062AB 75F5                <2> 		jne swmsy2
  7999 000062AD 8B07                <2> noswmsy2:	mov eax, [edi]
  8000 000062AF 8B5F04              <2> 		mov ebx, [edi + 4]
  8001 000062B2 8906                <2> 		mov [esi], eax
  8002 000062B4 895E04              <2> 		mov [esi + 4], ebx
  8003 000062B7 8B4708              <2> 		mov eax, [edi + 8]
  8004 000062BA 8B5F0C              <2> 		mov ebx, [edi + 12]
  8005 000062BD 894608              <2> 		mov [esi + 8], eax
  8006 000062C0 895E0C              <2> 		mov [esi + 12], ebx
  8007 000062C3 01D7                <2> 		add edi, edx
  8008 000062C5 81C610000000        <2> 		add esi, 16
  8009 000062CB 81FE[7BC90000]      <2> 		cmp esi, mcolorend
  8010 000062D1 72DA                <2> 		jb noswmsy2
  8011 000062D3 C3                  <2> 		ret
  8012                              <2> 		
  8013                              <1> %include "source/gui/icon.asm"
  8014 000062D4 0000                <2> iconcolor dw 0
  8015                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8016 000062D6 A2[D1790000]        <2> 		mov [iconselected], al
  8017 000062DB 8025[D1790000]01    <2> 		and byte [iconselected], 1
  8018 000062E2 B401                <2> 		mov ah, 1
  8019 000062E4 E81E140000          <2> 		call graphicsadd
  8020                              <2> 	showicon2:
  8021 000062E9 8B3D[84520000]      <2> 		mov edi, [physbaseptr]
  8022 000062EF 6601D2              <2> 		add dx, dx
  8023 000062F2 663B15[5C530000]    <2> 		cmp dx, [resolutionx2]
  8024 000062F9 720C                <2> 		jb screenxgood
  8025 000062FB 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8026 00006302 6681EA4000          <2> 		sub dx, 64
  8027                              <2> 	screenxgood:
  8028 00006307 6681F90000          <2> 		cmp cx, 0
  8029 0000630C 742B                <2> 		je noscreenygoodchk
  8030 0000630E 663B0D[70520000]    <2> 		cmp cx, [resolutiony]
  8031 00006315 720C                <2> 		jb screenygood
  8032 00006317 668B0D[70520000]    <2> 		mov cx, [resolutiony]
  8033 0000631E 6681E92000          <2> 		sub cx, 32
  8034                              <2> 	screenygood:
  8035 00006323 50                  <2> 		push eax
  8036 00006324 52                  <2> 		push edx
  8037 00006325 31C0                <2> 		xor eax, eax
  8038 00006327 31DB                <2> 		xor ebx, ebx
  8039 00006329 668B1D[5C530000]    <2> 		mov bx, [resolutionx2]
  8040 00006330 6689C8              <2> 		mov ax, cx
  8041 00006333 F7E3                <2> 		mul ebx
  8042 00006335 01C7                <2> 		add edi, eax
  8043 00006337 5A                  <2> 		pop edx
  8044 00006338 58                  <2> 		pop eax
  8045                              <2> 	noscreenygoodchk:
  8046 00006339 31DB                <2> 		xor ebx, ebx
  8047 0000633B 6689D3              <2> 		mov bx, dx
  8048 0000633E 01DF                <2> 		add edi, ebx
  8049 00006340 6631C9              <2> 		xor cx, cx
  8050 00006343 668B06              <2> 		mov ax, [esi]
  8051 00006346 81C602000000        <2> 		add esi, 2
  8052 0000634C 66A3[D4620000]      <2> 		mov [iconcolor], ax
  8053                              <2> 	writeicon:
  8054 00006352 8B06                <2> 		mov eax, [esi]
  8055 00006354 D1C0                <2> 		rol eax, 1
  8056 00006356 30C9                <2> 		xor cl, cl
  8057                              <2> 	writeiconline:
  8058 00006358 B201                <2> 		mov dl, 1
  8059 0000635A 20C2                <2> 		and dl, al
  8060 0000635C 3215[D1790000]      <2> 		xor dl, [iconselected]
  8061 00006362 668B1D[15650000]    <2> 		mov bx, [background]
  8062 00006369 66891F              <2> 		mov [edi], bx
  8063 0000636C 80FA00              <2> 		cmp dl, 0
  8064 0000636F 740A                <2> 		je noiconline
  8065 00006371 668B15[D4620000]    <2> 		mov dx, [iconcolor]
  8066 00006378 668917              <2> 		mov [edi], dx
  8067                              <2> 	noiconline:
  8068 0000637B 81C702000000        <2> 		add edi, 2
  8069 00006381 D1C0                <2> 		rol eax, 1
  8070 00006383 FEC1                <2> 		inc cl
  8071 00006385 80F920              <2> 		cmp cl, 32
  8072 00006388 72CE                <2> 		jb writeiconline
  8073 0000638A 81C604000000        <2> 		add esi, 4
  8074 00006390 FEC5                <2> 		inc ch
  8075 00006392 31D2                <2> 		xor edx, edx
  8076 00006394 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8077 0000639B 01D7                <2> 		add edi, edx
  8078 0000639D 81EF40000000        <2> 		sub edi, 64
  8079 000063A3 80FD20              <2> 		cmp ch, 32
  8080 000063A6 72AA                <2> 		jb writeicon
  8081 000063A8 31C0                <2> 		xor eax, eax
  8082 000063AA C3                  <2> 		ret
  8083                              <1> %include "source/gui/line.asm"
  8084                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8085 000063AB 668935[CD640000]    <2> 	mov [.color], si
  8086 000063B2 C605[CF640000]00    <2> 	mov byte [.steep], 0
  8087 000063B9 C605[D0640000]00    <2> 	mov byte [.yreversed], 0
  8088 000063C0 E907000000          <2> 	jmp .notsteep
  8089                              <2> .steeploop:
  8090 000063C5 C605[CF640000]01    <2> 	mov byte [.steep], 1
  8091                              <2> .notsteep:
  8092 000063CC 31FF                <2> 	xor edi, edi
  8093 000063CE 31F6                <2> 	xor esi, esi
  8094 000063D0 6639DA              <2> 	cmp dx, bx
  8095 000063D3 7705                <2> 	ja .noreversex
  8096 000063D5 6687D3              <2> 	xchg dx, bx
  8097 000063D8 6691                <2> 	xchg cx, ax
  8098                              <2> .noreversex:
  8099 000063DA 6689D7              <2> 	mov di, dx
  8100 000063DD 6629DF              <2> 	sub di, bx
  8101                              <2> 	
  8102 000063E0 6639C1              <2> 	cmp cx, ax
  8103 000063E3 720B                <2> 	jb .reversey
  8104 000063E5 6689CE              <2> 	mov si, cx
  8105 000063E8 6629C6              <2> 	sub si, ax
  8106 000063EB E90D000000          <2> 	jmp .normal
  8107                              <2> .reversey:
  8108 000063F0 C605[D0640000]02    <2> 	mov byte [.yreversed], 2
  8109 000063F7 6689C6              <2> 	mov si, ax
  8110 000063FA 6629CE              <2> 	sub si, cx	
  8111                              <2> .normal:
  8112 000063FD 6687CA              <2> 	xchg cx, dx
  8113 00006400 6693                <2> 	xchg ax, bx
  8114 00006402 6639FE              <2> 	cmp si, di
  8115 00006405 77BE                <2> 	ja .steeploop
  8116 00006407 6687CA              <2> 	xchg cx, dx
  8117 0000640A 6693                <2> 	xchg ax, bx
  8118                              <2> 	
  8119 0000640C 6691                <2> 	xchg ax, cx
  8120 0000640E 6687DA              <2> 	xchg bx, dx
  8121 00006411 66893D[D3640000]    <2> 	mov [.xdelta], di
  8122 00006418 668935[D5640000]    <2> 	mov [.ydelta], si
  8123 0000641F 668B35[CD640000]    <2> 	mov si, [.color]
  8124 00006426 66891D[D1640000]    <2> 	mov [.endline], bx
  8125 0000642D 6652                <2> 	push dx
  8126 0000642F 6651                <2> 	push cx
  8127 00006431 6687CA              <2> 	xchg cx, dx
  8128 00006434 803D[CF640000]01    <2> 	cmp byte [.steep], 1
  8129 0000643B 7403                <2> 	je .xchg
  8130 0000643D 6687D1              <2> 	xchg dx, cx
  8131                              <2> .xchg:
  8132 00006440 E864150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8133 00006445 6659                <2> 	pop cx
  8134 00006447 665A                <2> 	pop dx
  8135 00006449 31C0                <2> 	xor eax, eax
  8136 0000644B 66A1[D3640000]      <2> 	mov ax, [.xdelta]
  8137 00006451 66D1E8              <2> 	shr ax, 1
  8138 00006454 8A0D[CF640000]      <2> 	mov cl, [.steep]
  8139 0000645A 0A0D[D0640000]      <2> 	or cl, [.yreversed]
  8140 00006460 55                  <2> 	push ebp
  8141 00006461 668B2D[D1640000]    <2> 	mov bp, [.endline]
  8142 00006468 6629D5              <2> 	sub bp, dx
  8143 0000646B 668B15[D5640000]    <2> 	mov dx, [.ydelta]
  8144                              <2> .lp:
  8145 00006472 668937              <2> 	mov [edi], si
  8146 00006475 6639D0              <2> 	cmp ax, dx
  8147 00006478 7332                <2> 	jae .noaddx
  8148 0000647A F6C102              <2> 	test cl, 2
  8149 0000647D 7414                <2> 	jz .nodecy
  8150 0000647F F6C101              <2> 	test cl, 1
  8151 00006482 7509                <2> 	jnz .steepy
  8152 00006484 29DF                <2> 	sub edi, ebx
  8153 00006486 29DF                <2> 	sub edi, ebx
  8154 00006488 E906000000          <2> 	jmp .nodecy
  8155                              <2> .steepy:
  8156 0000648D 81EF04000000        <2> 	sub edi, 4
  8157                              <2> .nodecy:
  8158 00006493 660305[D3640000]    <2> 	add ax, [.xdelta]
  8159 0000649A F6C101              <2> 	test cl, 1
  8160 0000649D 7507                <2> 	jnz .steepx
  8161 0000649F 01DF                <2> 	add edi, ebx
  8162 000064A1 E906000000          <2> 	jmp .noaddx
  8163                              <2> .steepx:
  8164 000064A6 81C702000000        <2> 	add edi, 2
  8165                              <2> .noaddx:
  8166 000064AC 6629D0              <2> 	sub ax, dx
  8167 000064AF 664D                <2> 	dec bp
  8168 000064B1 81C702000000        <2> 	add edi, 2
  8169 000064B7 F6C101              <2> 	test cl, 1
  8170 000064BA 7408                <2> 	jz .nosteepx
  8171 000064BC 81EF02000000        <2> 	sub edi, 2
  8172 000064C2 01DF                <2> 	add edi, ebx
  8173                              <2> .nosteepx:
  8174 000064C4 6681FD0000          <2> 	cmp bp, 0
  8175 000064C9 75A7                <2> 	jne .lp
  8176                              <2> .done:
  8177 000064CB 5D                  <2> 	pop ebp
  8178 000064CC C3                  <2> 	ret
  8179                              <2> 	
  8180 000064CD 0000                <2> .color dw 0
  8181 000064CF 00                  <2> .steep db 0
  8182 000064D0 00                  <2> .yreversed db 0
  8183 000064D1 0000                <2> .endline dw 0
  8184 000064D3 0000                <2> .xdelta dw 0
  8185 000064D5 0000                <2> .ydelta dw 0
  8186                              <1> %include "source/gui/refresh.asm"
  8187                              <2> guiclear:
  8188 000064D7 8B3D[84520000]      <2> 	mov edi, [physbaseptr]
  8189 000064DD 668B15[6E520000]    <2> 	mov dx, [resolutionx]
  8190 000064E4 668B0D[70520000]    <2> 	mov cx, [resolutiony]
  8191                              <2> %ifdef gui.background
  8192                              <2> 	cmp dword [backgroundimage], 0
  8193                              <2> 	je guiclear.noback
  8194                              <2> 		mov esi, [backgroundimage]
  8195                              <2> 	.lp:
  8196                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8197                              <2> 		;movdqa [edi], xmm0
  8198                              <2> 		;add esi, 16
  8199                              <2> 		;add edi, 16
  8200                              <2> 		;sub dx, 8
  8201                              <2> 		mov eax, [esi]
  8202                              <2> 		mov [edi], eax
  8203                              <2> 		add esi, 4
  8204                              <2> 		add edi, 4
  8205                              <2> 		sub dx, 2
  8206                              <2> 		cmp dx, 0
  8207                              <2> 		ja .lp
  8208                              <2> 		dec cx
  8209                              <2> 		mov dx, [resolutionx]
  8210                              <2> 		cmp cx, 0
  8211                              <2> 		ja .lp
  8212                              <2> 		ret
  8213                              <2> 	backgroundimage dd 0
  8214                              <2> %endif
  8215                              <2> guiclear.noback:
  8216 000064EB A1[15650000]        <2> 	mov eax, [background]
  8217                              <2> guiclearloop:
  8218 000064F0 8907                <2> 	mov [edi], eax
  8219 000064F2 81C704000000        <2> 	add edi, 4
  8220 000064F8 6681EA0200          <2> 	sub dx, 2
  8221 000064FD 6681FA0000          <2> 	cmp dx, 0
  8222 00006502 77EC                <2> 	ja guiclearloop
  8223 00006504 6649                <2> 	dec cx
  8224 00006506 668B15[6E520000]    <2> 	mov dx, [resolutionx]
  8225 0000650D 6681F90000          <2> 	cmp cx, 0
  8226 00006512 77DC                <2> 	ja guiclearloop
  8227 00006514 C3                  <2> 	ret
  8228                              <2> 
  8229 00006515 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8230                              <2> 
  8231                              <2> reloadallgraphics:
  8232 00006519 BF[7BC60000]        <2> 		mov edi, graphicstable
  8233                              <2> reloadgraphicsloop:
  8234 0000651E 8B7702              <2> 		mov esi, [edi + 2]
  8235 00006521 668B5706            <2> 		mov dx, [edi + 6]
  8236 00006525 668B4F08            <2> 		mov cx, [edi + 8]
  8237 00006529 668B07              <2> 		mov ax, [edi]
  8238 0000652C 668B5F0A            <2> 		mov bx, [edi + 10]
  8239 00006530 893D[F3760000]      <2> 		mov [grpctblpos], edi
  8240 00006536 3B3D[99710000]      <2> 		cmp edi, [dragging]
  8241 0000653C 741E                <2> 		je loadedgraphic
  8242 0000653E 663D0100            <2> 		cmp ax, 1
  8243 00006542 0F8436000000        <2> 		je near icongraphic
  8244 00006548 663D0200            <2> 		cmp ax, 2
  8245 0000654C 0F843C000000        <2> 		je near stringgraphic
  8246 00006552 663D0300            <2> 		cmp ax, 3
  8247 00006556 0F8416000000        <2> 		je near windowgraphic
  8248 0000655C 8B3D[F3760000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8249 00006562 81C710000000        <2> 		add edi, 16
  8250 00006568 81FF[7BC80000]      <2> 		cmp edi, graphicstableend
  8251 0000656E 732E                <2> 		jae donereloadgraphics
  8252 00006570 EBAC                <2> 		jmp reloadgraphicsloop
  8253                              <2> windowgraphic:
  8254 00006572 E83E080000          <2> 		call showwindow2
  8255 00006577 E838B8FFFF          <2> 		call cleardouble
  8256 0000657C EBDE                <2> 		jmp loadedgraphic
  8257 0000657E 80E301              <2> icongraphic:	and bl, 1
  8258 00006581 881D[D1790000]      <2> 		mov [iconselected], bl
  8259 00006587 E85DFDFFFF          <2> 		call showicon2
  8260 0000658C EBCE                <2> 		jmp loadedgraphic
  8261 0000658E 80E301              <2> stringgraphic:  and bl, 1
  8262 00006591 881D[95710000]      <2> 		mov [mouseselecton], bl
  8263 00006597 E805050000          <2> 		call showstring2
  8264 0000659C EBBE                <2> 		jmp loadedgraphic
  8265                              <2> donereloadgraphics:
  8266 0000659E 8B3D[99710000]      <2> 		mov edi, [dragging]
  8267 000065A4 81FF[7BC60000]      <2> 		cmp edi, graphicstable
  8268 000065AA 7226                <2> 		jb notcorrectdrag
  8269 000065AC 668B07              <2> 		mov ax, [edi]
  8270 000065AF 8B7702              <2> 		mov esi, [edi + 2]
  8271 000065B2 668B5706            <2> 		mov dx, [edi + 6]
  8272 000065B6 668B4F08            <2> 		mov cx, [edi + 8]
  8273 000065BA 668B5F0A            <2> 		mov bx, [edi + 10]
  8274 000065BE 663D0100            <2> 		cmp ax, 1
  8275 000065C2 750F                <2> 		jne noticondragging
  8276 000065C4 80E301              <2> 		and bl, 1
  8277 000065C7 881D[D1790000]      <2> 		mov [iconselected], bl
  8278 000065CD E817FDFFFF          <2> 		call showicon2
  8279                              <2> notcorrectdrag:
  8280 000065D2 C3                  <2> 		ret
  8281                              <2> 
  8282                              <2> 	noticondragging:
  8283 000065D3 663D0200            <2> 		cmp ax, 2
  8284 000065D7 75F9                <2> 		jne notcorrectdrag
  8285 000065D9 80E301              <2> 		and bl, 1
  8286 000065DC 881D[95710000]      <2> 		mov [mouseselecton], bl
  8287 000065E2 E8BA040000          <2> 		call showstring2
  8288 000065E7 EBE9                <2> 		jmp notcorrectdrag
  8289                              <1> %include "source/gui/startup.asm"
  8290                              <2> guisetup:
  8291                              <2> 	%ifdef gui.background
  8292                              <2> 	xor ebx, ebx
  8293                              <2> 	mov [backgroundimage], ebx
  8294                              <2> 	%endif
  8295 000065E9 E8E9FEFFFF          <2> 	call guiclear
  8296 000065EE C605[A0950000]01    <2> 	mov byte [guion], 1
  8297 000065F5 C605[95710000]00    <2> 	mov byte [mouseselecton], 0
  8298 000065FC 31C0                <2> 	xor eax, eax
  8299 000065FE 31DB                <2> 	xor ebx, ebx
  8300 00006600 31C9                <2> 	xor ecx, ecx
  8301 00006602 31D2                <2> 	xor edx, edx
  8302                              <2> 	
  8303 00006604 BE[C6670000]        <2> 	mov esi, pacmsg
  8304 00006609 30E4                <2> 	xor ah, ah
  8305 0000660B B010                <2> 	mov al, 00010000b
  8306 0000660D 31DB                <2> 	xor ebx, ebx
  8307 0000660F 66B99000            <2> 	mov cx, 144
  8308 00006613 66BA0400            <2> 	mov dx, 4
  8309 00006617 E872040000          <2> 	call showstring
  8310                              <2> 	
  8311 0000661C BE[04680000]        <2> 	mov esi, interneticon
  8312 00006621 30E4                <2> 	xor ah, ah
  8313 00006623 B010                <2> 	mov al, 00010000b
  8314 00006625 BB[EF660000]        <2> 	mov ebx, noie
  8315 0000662A 66B91800            <2> 	mov cx, 24
  8316 0000662E 66BA0400            <2> 	mov dx, 4
  8317 00006632 E89FFCFFFF          <2> 	call showicon
  8318                              <2> 	
  8319 00006637 BE[86680000]        <2> 	mov esi, wordicon
  8320 0000663C 30E4                <2> 	xor ah, ah
  8321 0000663E B010                <2> 	mov al, 00010000b
  8322 00006640 31DB                <2> 	xor ebx, ebx
  8323 00006642 66B91800            <2> 	mov cx, 24
  8324 00006646 66BA3000            <2> 	mov dx, 48
  8325 0000664A E887FCFFFF          <2> 	call showicon
  8326                              <2> 	
  8327 0000664F BE[08690000]        <2> 	mov esi, pacmanpellet
  8328 00006654 30E4                <2> 	xor ah, ah
  8329 00006656 B010                <2> 	mov al, 00010000b
  8330 00006658 31DB                <2> 	xor ebx, ebx
  8331 0000665A 66B94000            <2> 	mov cx, 64
  8332 0000665E 66BA0400            <2> 	mov dx, 4
  8333 00006662 E86FFCFFFF          <2> 	call showicon
  8334                              <2> 	
  8335 00006667 BE[0C6A0000]        <2> 	mov esi, pacman
  8336 0000666C 30E4                <2> 	xor ah, ah
  8337 0000666E B010                <2> 	mov al, 00010000b
  8338 00006670 BB[D8660000]        <2> 	mov ebx, pacmannomnom
  8339 00006675 66B94000            <2> 	mov cx, 64
  8340 00006679 66BA3000            <2> 	mov dx, 48
  8341 0000667D E854FCFFFF          <2> 	call showicon
  8342                              <2> 	
  8343 00006682 BE[8A690000]        <2> 	mov esi, ghostie
  8344 00006687 30E4                <2> 	xor ah, ah
  8345 00006689 B010                <2> 	mov al, 00010000b
  8346 0000668B BB[C1660000]        <2> 	mov ebx, boo
  8347 00006690 66B96C00            <2> 	mov cx, 108
  8348 00006694 66BA0400            <2> 	mov dx, 4
  8349 00006698 E839FCFFFF          <2> 	call showicon
  8350                              <2> 	
  8351 0000669D BE[A8670000]        <2> 	mov esi, start
  8352 000066A2 668B0D[70520000]    <2> 	mov cx, [resolutiony]
  8353 000066A9 6681E91000          <2> 	sub cx, 16
  8354 000066AE 66BA0200            <2> 	mov dx, 2
  8355 000066B2 30E4                <2> 	xor ah, ah
  8356 000066B4 B010                <2> 	mov al, 00010000b
  8357 000066B6 BB[64670000]        <2> 	mov ebx, winblows
  8358 000066BB E8CE030000          <2> 	call showstring
  8359 000066C0 C3                  <2> 	ret
  8360                              <2> 
  8361                              <2> 	boo:
  8362 000066C1 BE[C1670000]        <2> 		mov esi, boomsg
  8363 000066C6 66BA6400            <2> 		mov dx, 100
  8364 000066CA 66B94001            <2> 		mov cx, 320
  8365 000066CE 31DB                <2> 		xor ebx, ebx
  8366 000066D0 6631C0              <2> 		xor ax, ax
  8367 000066D3 E9B6030000          <2> 		jmp showstring
  8368                              <2> 
  8369                              <2> 	pacmannomnom:
  8370 000066D8 BE[DF670000]        <2> 		mov esi, pacnom
  8371 000066DD 66BA8200            <2> 		mov dx, 130
  8372 000066E1 66B93C00            <2> 		mov cx, 60
  8373 000066E5 31DB                <2> 		xor ebx, ebx
  8374 000066E7 6631C0              <2> 		xor ax, ax
  8375 000066EA E99F030000          <2> 		jmp showstring	
  8376                              <2> 	
  8377                              <2> 	noie:
  8378 000066EF 66C705[EE670000]80- <2> 		mov word [termwindow], 640
  8379 000066F7 02                  <2>
  8380 000066F8 66C705[F0670000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8381 00006700 01                  <2>
  8382 00006701 BE[EE670000]        <2> 		mov esi, termwindow
  8383 00006706 66BA1000            <2> 		mov dx, 16
  8384 0000670A 66B91000            <2> 		mov cx, 16
  8385 0000670E 31DB                <2> 		xor ebx, ebx
  8386 00006710 6631C0              <2> 		xor ax, ax
  8387 00006713 E8DF050000          <2> 		call showwindow
  8388 00006718 E9A4C0FFFF          <2> 		jmp os
  8389                              <2> 
  8390                              <2> 	gotomenuboot:
  8391 0000671D 31D2                <2> 		xor edx, edx
  8392 0000671F 31C9                <2> 		xor ecx, ecx
  8393 00006721 668B15[6E520000]    <2> 		mov dx, [resolutionx]
  8394 00006728 668B0D[70520000]    <2> 		mov cx, [resolutiony]
  8395 0000672F 66C1E904            <2> 		shr cx, 4
  8396 00006733 6681E90100          <2> 		sub cx, 1
  8397 00006738 66C1E104            <2> 		shl cx, 4
  8398 0000673C 668915[EE670000]    <2> 		mov [termwindow], dx
  8399 00006743 66890D[F0670000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8400 0000674A BE[EE670000]        <2> 		mov esi, termwindow
  8401 0000674F 6631D2              <2> 		xor dx, dx
  8402 00006752 6631C9              <2> 		xor cx, cx
  8403 00006755 31DB                <2> 		xor ebx, ebx
  8404 00006757 6631C0              <2> 		xor ax, ax
  8405 0000675A E898050000          <2> 		call showwindow
  8406 0000675F E95DC0FFFF          <2> 		jmp os
  8407                              <2> 
  8408                              <2> 	winblows:
  8409 00006764 BE[B7670000]        <2> 		mov esi, turnoffmsg
  8410 00006769 BB[D04D0000]        <2> 		mov ebx, turnoff
  8411 0000676E 668B0D[70520000]    <2> 		mov cx, [resolutiony]
  8412 00006775 6681E92000          <2> 		sub cx, 32
  8413 0000677A 6631D2              <2> 		xor dx, dx
  8414 0000677D 30E4                <2> 		xor ah, ah
  8415 0000677F B010                <2> 		mov al, 00010000b
  8416 00006781 E808030000          <2> 		call showstring
  8417 00006786 BE[AE670000]        <2> 		mov esi, gotomenu
  8418 0000678B 668B0D[70520000]    <2> 		mov cx, [resolutiony]
  8419 00006792 6681E93000          <2> 		sub cx, 48
  8420 00006797 6631D2              <2> 		xor dx, dx
  8421 0000679A 30E4                <2> 		xor ah, ah
  8422 0000679C B010                <2> 		mov al, 00010000b
  8423 0000679E BB[1D670000]        <2> 		mov ebx, gotomenuboot
  8424 000067A3 E9E6020000          <2> 		jmp showstring
  8425                              <2> 		
  8426                              <2> 
  8427 000067A8 737461727400        <2> 	start	db "start",0
  8428 000067AE 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8429 000067B7 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8430 000067C0 00                  <2>
  8431 000067C1 426F6F2100          <2> 	boomsg db "Boo!",0
  8432 000067C6 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8433 000067CF 73206561737920746F- <2>
  8434 000067D8 20647261772E00      <2>
  8435 000067DF 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8436 000067E8 6D206E6F6D00        <2>
  8437                              <2> 
  8438 000067EE 20035802            <2> 	termwindow:	dw 800,600	;window size
  8439 000067F2 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8440 000067F6 [7CC90000]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8441 000067FA [20340100]          <2>
  8442 000067FE 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8443                              <2> 	
  8444 000067FE <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8445 000067FE <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8446 000067FE <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8447 000067FE <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8448 000067FE <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8449                              <1> %include "source/gui/text.asm"
  8450                              <2> 	showstring:
  8451 00006A8E A2[95710000]        <2> 		mov [mouseselecton], al
  8452 00006A93 8025[95710000]01    <2> 		and byte [mouseselecton], 1
  8453 00006A9A B402                <2> 		mov ah, 2
  8454 00006A9C E8660C0000          <2> 		call graphicsadd
  8455                              <2> 	showstring2:
  8456 00006AA1 30E4                <2> 		xor ah, ah
  8457 00006AA3 8A06                <2> 		mov al, [esi]
  8458 00006AA5 3C00                <2> 		cmp al, 0
  8459 00006AA7 741E                <2> 		je doneshowstring
  8460 00006AA9 46                  <2> 		inc esi
  8461 00006AAA 3CFF                <2> 		cmp al, 255
  8462 00006AAC 74F3                <2> 		je showstring2
  8463 00006AAE 56                  <2> 		push esi
  8464 00006AAF 668B1D[CF6A0000]    <2> 		mov bx, [colorfont2]
  8465 00006AB6 E825000000          <2> 		call showfontvesa
  8466 00006ABB 3C0A                <2> 		cmp al, 10
  8467 00006ABD 7405                <2> 		je noproceedshst
  8468 00006ABF 6681C20800          <2> 		add dx, 8
  8469                              <2> 	noproceedshst:
  8470 00006AC4 5E                  <2> 		pop esi
  8471 00006AC5 EBDA                <2> 		jmp showstring2
  8472                              <2> 	doneshowstring:
  8473 00006AC7 C605[95710000]00    <2> 		mov byte [mouseselecton], 0
  8474 00006ACE C3                  <2> 		ret
  8475                              <2> 
  8476 00006ACF FFFF                <2> colorfont2 dw 0xFFFF
  8477 00006AD1 00                  <2> colorcache db 0
  8478                              <2> 
  8479 00006AD2 02                  <2> resolutionbytes db 2
  8480 00006AD3 0000                <2> posxvesa dw 0
  8481 00006AD5 0000                <2> posyvesa dw 0
  8482 00006AD7 FFFF                <2> colorfont dw 0xFFFF
  8483                              <2> savefontvesa:		;;same rules as showfontvesa
  8484 00006AD9 C605[94710000]01    <2> 	mov byte [savefonton], 1
  8485                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8486 00006AE0 3CFF                <2> 	cmp al, 255
  8487 00006AE2 7501                <2> 	jne nostopshowfont
  8488 00006AE4 C3                  <2> 	ret
  8489                              <2> nostopshowfont:
  8490 00006AE5 66890D[D56A0000]    <2> 	mov [posyvesa], cx
  8491 00006AEC 3C0A                <2> 	cmp al, 10
  8492 00006AEE 0F8424000000        <2> 	je near goodvesafontx
  8493 00006AF4 31C9                <2> 	xor ecx, ecx
  8494 00006AF6 668B0D[5C530000]    <2> 	mov cx, [resolutionx2]
  8495 00006AFD 6639CA              <2> 	cmp dx, cx
  8496 00006B00 7616                <2> 	jbe goodvesafontx
  8497 00006B02 6631D2              <2> 	xor dx, dx
  8498 00006B05 668B0D[D56A0000]    <2> 	mov cx, [posyvesa]
  8499 00006B0C 6681C11000          <2> 	add cx, 16
  8500 00006B11 66890D[D56A0000]    <2> 	mov [posyvesa], cx
  8501                              <2> goodvesafontx:
  8502 00006B18 668B0D[D56A0000]    <2> 	mov cx, [posyvesa]
  8503 00006B1F 668915[D36A0000]    <2> 	mov [posxvesa], dx
  8504 00006B26 8B3D[84520000]      <2> 	mov edi, [physbaseptr]
  8505 00006B2C 66891D[D76A0000]    <2> 	mov [colorfont], bx
  8506 00006B33 31DB                <2> 	xor ebx, ebx
  8507 00006B35 88C3                <2> 	mov bl, al
  8508 00006B37 31C0                <2> 	xor eax, eax
  8509 00006B39 88D8                <2> 	mov al, bl
  8510 00006B3B 6689D3              <2> 	mov bx, dx
  8511 00006B3E 89DA                <2> 	mov edx, ebx
  8512 00006B40 31DB                <2> 	xor ebx, ebx
  8513 00006B42 6681F90000          <2> 	cmp cx, 0
  8514 00006B47 7414                <2> 	je vesaposloopdn
  8515 00006B49 668B1D[5C530000]    <2> 	mov bx, [resolutionx2]
  8516                              <2> vesaposloop:
  8517 00006B50 52                  <2> 	push edx
  8518 00006B51 50                  <2> 	push eax
  8519 00006B52 31C0                <2> 	xor eax, eax
  8520 00006B54 6689C8              <2> 	mov ax, cx
  8521 00006B57 F7E3                <2> 	mul ebx
  8522 00006B59 01C7                <2> 	add edi, eax
  8523 00006B5B 58                  <2> 	pop eax
  8524 00006B5C 5A                  <2> 	pop edx
  8525                              <2> vesaposloopdn:
  8526 00006B5D 01D7                <2> 	add edi, edx
  8527 00006B5F BE[F5830000]        <2> 	mov esi, fonts
  8528                              <2> findfontvesa:
  8529 00006B64 30E4                <2> 	xor ah, ah
  8530 00006B66 3C0A                <2> 	cmp al, 10
  8531 00006B68 0F84FE000000        <2> 	je near nwlinevesa
  8532 00006B6E C1E004              <2> 	shl eax, 4
  8533 00006B71 01C6                <2> 	add esi, eax
  8534 00006B73 C1E804              <2> 	shr eax, 4
  8535 00006B76 81FE[F5930000]      <2> 	cmp esi, fontend
  8536 00006B7C 0F83B9000000        <2> 	jae near donefontvesa
  8537 00006B82 4E                  <2> 	dec esi
  8538                              <2> foundfontvesa:
  8539 00006B83 46                  <2> 	inc esi
  8540 00006B84 803D[94710000]01    <2> 	cmp byte [savefonton], 1
  8541 00006B8B 0F8401010000        <2> 	je near vesafontsaver
  8542 00006B91 30C9                <2> 	xor cl, cl
  8543 00006B93 8A06                <2> 	mov al, [esi]
  8544 00006B95 668B15[5C530000]    <2> 	mov dx, [resolutionx2]
  8545 00006B9C 662B15[D36A0000]    <2> 	sub dx, [posxvesa]
  8546 00006BA3 6681FA1000          <2> 	cmp dx, 16
  8547 00006BA8 7708                <2> 	ja paintfontvesa
  8548 00006BAA D0EA                <2> 	shr dl, 1
  8549 00006BAC 8815[6B6C0000]      <2> 	mov [charwidth], dl
  8550                              <2> paintfontvesa:
  8551 00006BB2 B201                <2> 	mov dl, 1
  8552 00006BB4 20C2                <2> 	and dl, al
  8553 00006BB6 803D[93710000]01    <2> 	cmp byte [showcursorfonton], 1
  8554 00006BBD 0F8435000000        <2> 	je near nodelpaintedfont
  8555 00006BC3 803D[93710000]02    <2> 	cmp byte [showcursorfonton], 2
  8556 00006BCA 0F8518000000        <2> 	jne near noswitchcursorfonton
  8557 00006BD0 80FA00              <2> 	cmp dl, 0
  8558 00006BD3 0F842E000000        <2> 	je near nopixelset
  8559 00006BD9 668B1D[D76A0000]    <2> 	mov bx, [colorfont]
  8560 00006BE0 66891F              <2> 	mov [edi], bx
  8561 00006BE3 E91F000000          <2> 	jmp nopixelset
  8562                              <2> noswitchcursorfonton:
  8563 00006BE8 3215[95710000]      <2> 	xor dl, [mouseselecton]
  8564 00006BEE 668B1D[15650000]    <2> 	mov bx, [background]
  8565 00006BF5 66891F              <2> 	mov [edi], bx
  8566                              <2> nodelpaintedfont:
  8567 00006BF8 80FA00              <2> 	cmp dl, 0
  8568 00006BFB 740A                <2> 	je nopixelset
  8569 00006BFD 668B15[D76A0000]    <2> 	mov dx, [colorfont]
  8570 00006C04 668917              <2> 	mov [edi], dx
  8571                              <2> nopixelset:
  8572 00006C07 81C702000000        <2> 	add edi, 2
  8573 00006C0D D0C0                <2> 	rol al, 1
  8574 00006C0F FEC1                <2> 	inc cl
  8575 00006C11 3A0D[6B6C0000]      <2> 	cmp cl, [charwidth]
  8576 00006C17 7299                <2> 	jb paintfontvesa
  8577 00006C19 FEC5                <2> 	inc ch
  8578 00006C1B 31D2                <2> 	xor edx, edx
  8579 00006C1D 668B15[5C530000]    <2> 	mov dx, [resolutionx2]
  8580 00006C24 01D7                <2> 	add edi, edx
  8581 00006C26 31D2                <2> 	xor edx, edx
  8582 00006C28 8A15[6B6C0000]      <2> 	mov dl, [charwidth]
  8583 00006C2E 00D2                <2> 	add dl, dl
  8584 00006C30 29D7                <2> 	sub edi, edx
  8585 00006C32 80FD10              <2> 	cmp ch, 16
  8586 00006C35 0F8248FFFFFF        <2> 	jb foundfontvesa
  8587                              <2> donefontvesa:
  8588 00006C3B B208                <2> 	mov dl, 8
  8589 00006C3D 8815[6B6C0000]      <2> 	mov [charwidth], dl
  8590 00006C43 668B15[D36A0000]    <2> 	mov dx, [posxvesa]
  8591 00006C4A 8A1D[6B6C0000]      <2> 	mov bl, [charwidth]
  8592 00006C50 30FF                <2> 	xor bh, bh
  8593 00006C52 6601DA              <2> 	add dx, bx
  8594 00006C55 668B1D[D76A0000]    <2> 	mov bx, [colorfont]
  8595 00006C5C 668B0D[D56A0000]    <2> 	mov cx, [posyvesa]
  8596 00006C63 C605[94710000]00    <2> 	mov byte [savefonton], 0
  8597 00006C6A C3                  <2> 	ret
  8598 00006C6B 08                  <2> charwidth db 8
  8599                              <2> nwlinevesa:
  8600 00006C6C 668B15[D36A0000]    <2> 	mov dx, [posxvesa]
  8601 00006C73 6631D2              <2> 	xor dx, dx
  8602 00006C76 668915[D36A0000]    <2> 	mov [posxvesa], dx
  8603 00006C7D 668B0D[D56A0000]    <2> 	mov cx, [posyvesa]
  8604 00006C84 6681C11000          <2> 	add cx, 16
  8605 00006C89 66890D[D56A0000]    <2> 	mov [posyvesa], cx
  8606 00006C90 EBA9                <2> 	jmp donefontvesa
  8607                              <2> vesafontsaver:
  8608 00006C92 30C0                <2> 	xor al, al
  8609 00006C94 30C9                <2> 	xor cl, cl
  8610                              <2> vesafontsaver2:
  8611 00006C96 668B17              <2> 	mov dx, [edi]
  8612 00006C99 663B15[D76A0000]    <2> 	cmp dx, [colorfont]
  8613 00006CA0 742F                <2> 	je colorfontmatch
  8614                              <2> donecolormatch:
  8615 00006CA2 81C702000000        <2> 	add edi, 2
  8616 00006CA8 D0C0                <2> 	rol al, 1
  8617 00006CAA FEC1                <2> 	inc cl
  8618 00006CAC 80F908              <2> 	cmp cl, 8
  8619 00006CAF 72E5                <2> 	jb vesafontsaver2
  8620 00006CB1 8806                <2> 	mov [esi], al
  8621 00006CB3 46                  <2> 	inc esi
  8622 00006CB4 FEC5                <2> 	inc ch
  8623 00006CB6 31D2                <2> 	xor edx, edx
  8624 00006CB8 668B15[5C530000]    <2> 	mov dx, [resolutionx2]
  8625 00006CBF 01D7                <2> 	add edi, edx
  8626 00006CC1 81EF10000000        <2> 	sub edi, 16
  8627 00006CC7 80FD10              <2> 	cmp ch, 16
  8628 00006CCA 72C6                <2> 	jb vesafontsaver
  8629 00006CCC E96AFFFFFF          <2> 	jmp donefontvesa
  8630                              <2> colorfontmatch:
  8631 00006CD1 0401                <2> 	add al, 1
  8632 00006CD3 EBCD                <2> 	jmp donecolormatch
  8633                              <1> %include "source/gui/window.asm"
  8634 00006CD5 0000                <2> winvcopystx dw 0
  8635 00006CD7 0000                <2> winvcopysty dw 0
  8636 00006CD9 0000                <2> winvcopydx dw 0
  8637 00006CDB 0000                <2> winvcopycx dw 0
  8638 00006CDD FFFF0000            <2> windowcolor dw 0xFFFF,0
  8639 00006CE1 00000000            <2> windowbufloc: dd 0
  8640 00006CE5 00000000            <2> windowvideobuf dd 0
  8641 00006CE9 00000000            <2> windowvideobuf2 dd 0
  8642 00006CED 00000000            <2> windowinfobuf dd 0
  8643 00006CF1 0000                <2> termcol dw 0
  8644 00006CF3 00000000            <2> wincopyendpos dd 0
  8645                              <2> 
  8646                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  8647 00006CF7 C605[3E220000]01    <2> 		mov byte [termguion], 1
  8648 00006CFE 6681C11000          <2> 		add cx, 16
  8649 00006D03 668915[D56C0000]    <2> 		mov [winvcopystx], dx
  8650 00006D0A 66890D[D76C0000]    <2> 		mov [winvcopysty], cx
  8651 00006D11 8935[ED6C0000]      <2> 		mov [windowinfobuf], esi
  8652 00006D17 668B16              <2> 		mov dx, [esi]
  8653 00006D1A 668B4E02            <2> 		mov cx, [esi + 2]
  8654 00006D1E 31C0                <2> 		xor eax, eax
  8655 00006D20 31DB                <2> 		xor ebx, ebx
  8656 00006D22 6689D0              <2> 		mov ax, dx
  8657 00006D25 6689CB              <2> 		mov bx, cx
  8658 00006D28 66C1E803            <2> 		shr ax, 3
  8659 00006D2C 66C1EB04            <2> 		shr bx, 4
  8660 00006D30 66A3[F16C0000]      <2> 		mov [termcol], ax
  8661 00006D36 A2[02240000]        <2> 		mov [charxy], al
  8662 00006D3B 881D[03240000]      <2> 		mov [charxy + 1], bl
  8663 00006D41 8B7E04              <2> 		mov edi, [esi + 4]
  8664 00006D44 893D[DD6C0000]      <2> 		mov [windowcolor], edi
  8665 00006D4A 8B7E0C              <2> 		mov edi, [esi + 12]
  8666 00006D4D 893D[E96C0000]      <2> 		mov [windowvideobuf2], edi
  8667 00006D53 8B7E08              <2> 		mov edi, [esi + 8]
  8668 00006D56 893D[E56C0000]      <2> 		mov [windowvideobuf], edi
  8669 00006D5C 81FB00000000        <2> 		cmp ebx, 0
  8670 00006D62 0F840A040000        <2> 		je near donewincopynow	;AAAAAAAAA!!!!!
  8671                              <2> 	findendposwin:
  8672 00006D68 01C7                <2> 		add edi, eax
  8673 00006D6A 01C7                <2> 		add edi, eax
  8674 00006D6C 4B                  <2> 		dec ebx
  8675 00006D6D 81FB00000000        <2> 		cmp ebx, 0
  8676 00006D73 77F3                <2> 		ja findendposwin
  8677 00006D75 893D[F36C0000]      <2> 		mov [wincopyendpos], edi
  8678 00006D7B 31FF                <2> 		xor edi, edi
  8679 00006D7D 6631C0              <2> 		xor ax, ax
  8680 00006D80 6631DB              <2> 		xor bx, bx
  8681 00006D83 6601D2              <2> 		add dx, dx
  8682 00006D86 668915[D96C0000]    <2> 		mov [winvcopydx], dx
  8683 00006D8D 66890D[DB6C0000]    <2> 		mov [winvcopycx], cx
  8684 00006D94 668B0D[D76C0000]    <2> 		mov cx, [winvcopysty]
  8685 00006D9B 6681E91000          <2> 		sub cx, 16
  8686 00006DA0 668B15[D56C0000]    <2> 		mov dx, [winvcopystx]
  8687 00006DA7 C605[3F220000]00    <2> 		mov byte [termcopyon], 0
  8688 00006DAE B403                <2> 		mov ah, 3
  8689 00006DB0 E852090000          <2> 		call graphicsadd
  8690                              <2> 	showwindow2:
  8691 00006DB5 6681C11000          <2> 		add cx, 16
  8692 00006DBA 668915[D56C0000]    <2> 		mov [winvcopystx], dx
  8693 00006DC1 66890D[D76C0000]    <2> 		mov [winvcopysty], cx
  8694 00006DC8 668B16              <2> 		mov dx, [esi]
  8695 00006DCB 668B4E02            <2> 		mov cx, [esi + 2]
  8696 00006DCF 6601D2              <2> 		add dx, dx
  8697 00006DD2 668915[D96C0000]    <2> 		mov [winvcopydx], dx
  8698 00006DD9 66890D[DB6C0000]    <2> 		mov [winvcopycx], cx
  8699 00006DE0 8B3D[E16C0000]      <2> 		mov edi, [windowbufloc]
  8700 00006DE6 31D2                <2> 		xor edx, edx
  8701 00006DE8 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8702 00006DEF C1E204              <2> 		shl edx, 4
  8703 00006DF2 29D7                <2> 		sub edi, edx
  8704 00006DF4 803D[3F220000]00    <2> 		cmp byte [termcopyon], 0
  8705 00006DFB 7538                <2> 		jne nocleartitlebarpos
  8706 00006DFD 8B3D[84520000]      <2> 		mov edi, [physbaseptr]
  8707 00006E03 31D2                <2> 		xor edx, edx
  8708 00006E05 668B15[D56C0000]    <2> 		mov dx, [winvcopystx]
  8709 00006E0C 01D7                <2> 		add edi, edx
  8710 00006E0E 668B0D[D76C0000]    <2> 		mov cx, [winvcopysty]
  8711 00006E15 6681E91000          <2> 		sub cx, 16
  8712 00006E1A 6681F90000          <2> 		cmp cx, 0
  8713 00006E1F 7414                <2> 		je nocleartitlebarpos
  8714                              <2> 	cleartitlebarpos:
  8715 00006E21 31D2                <2> 		xor edx, edx
  8716 00006E23 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8717 00006E2A 01D7                <2> 		add edi, edx
  8718 00006E2C 6649                <2> 		dec cx
  8719 00006E2E 6681F90000          <2> 		cmp cx, 0
  8720 00006E33 75EC                <2> 		jne cleartitlebarpos
  8721                              <2> 	nocleartitlebarpos:
  8722 00006E35 66B91000            <2> 		mov cx, 16
  8723 00006E39 668B15[D96C0000]    <2> 		mov dx, [winvcopydx]
  8724 00006E40 6681F90000          <2> 		cmp cx, 0
  8725 00006E45 0F8448000000        <2> 		je near canceltitlebarput
  8726 00006E4B 6681FA0000          <2> 		cmp dx, 0
  8727 00006E50 0F843D000000        <2> 		je near canceltitlebarput
  8728                              <2> 	titlebarput:
  8729 00006E56 66A1[DD6C0000]      <2> 		mov ax, [windowcolor]
  8730 00006E5C 668907              <2> 		mov [edi], ax
  8731 00006E5F 6681EA0200          <2> 		sub dx, 2
  8732 00006E64 81C702000000        <2> 		add edi, 2
  8733 00006E6A 6681FA0000          <2> 		cmp dx, 0
  8734 00006E6F 75E5                <2> 		jne titlebarput
  8735 00006E71 31D2                <2> 		xor edx, edx
  8736 00006E73 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8737 00006E7A 6649                <2> 		dec cx
  8738 00006E7C 662B15[D96C0000]    <2> 		sub dx, [winvcopydx]
  8739 00006E83 01D7                <2> 		add edi, edx
  8740 00006E85 668B15[D96C0000]    <2> 		mov dx, [winvcopydx]
  8741 00006E8C 6681F90000          <2> 		cmp cx, 0
  8742 00006E91 75C3                <2> 		jne titlebarput
  8743                              <2> 	canceltitlebarput:
  8744 00006E93 893D[E16C0000]      <2> 		mov [windowbufloc], edi
  8745 00006E99 803D[3F220000]02    <2> 		cmp byte [termcopyon], 2
  8746 00006EA0 0F8465000000        <2> 		je near winvcpst
  8747 00006EA6 6631C0              <2> 		xor ax, ax
  8748 00006EA9 81C610000000        <2> 		add esi, 16
  8749 00006EAF 668B15[D56C0000]    <2> 		mov dx, [winvcopystx]
  8750 00006EB6 668B0D[D76C0000]    <2> 		mov cx, [winvcopysty]
  8751 00006EBD 6681E91000          <2> 		sub cx, 16
  8752 00006EC2 668B1D[DD6C0000]    <2> 		mov bx, [windowcolor]
  8753 00006EC9 C605[95710000]01    <2> 		mov byte [mouseselecton], 1
  8754 00006ED0 E8CCFBFFFF          <2> 		call showstring2
  8755 00006ED5 B058                <2> 		mov al, "X"
  8756 00006ED7 30E4                <2> 		xor ah, ah
  8757 00006ED9 668B1D[DD6C0000]    <2> 		mov bx, [windowcolor]
  8758 00006EE0 668B15[D56C0000]    <2> 		mov dx, [winvcopystx]
  8759 00006EE7 668B0D[D76C0000]    <2> 		mov cx, [winvcopysty]
  8760 00006EEE 6681E91000          <2> 		sub cx, 16
  8761 00006EF3 6681EA1400          <2> 		sub dx, 20
  8762 00006EF8 660315[D96C0000]    <2> 		add dx, [winvcopydx]
  8763 00006EFF C605[95710000]01    <2> 		mov byte [mouseselecton], 1
  8764 00006F06 E8D5FBFFFF          <2> 		call showfontvesa
  8765                              <2> 	winvcpst:
  8766 00006F0B 803D[EE760000]01    <2> 		cmp byte [windrag], 1
  8767 00006F12 0F8469020000        <2> 		je near forgetresetstuff
  8768 00006F18 8B3D[E16C0000]      <2> 		mov edi, [windowbufloc]
  8769 00006F1E E991000000          <2> 		jmp windowvideocopyset
  8770                              <2> 
  8771                              <2> 	windowvideocopy:
  8772 00006F23 8B35[ED6C0000]      <2> 		mov esi, [windowinfobuf]
  8773 00006F29 668B16              <2> 		mov dx, [esi]
  8774 00006F2C 668B4E02            <2> 		mov cx, [esi + 2]
  8775 00006F30 8B7E04              <2> 		mov edi, [esi + 4]
  8776 00006F33 893D[DD6C0000]      <2> 		mov [windowcolor], edi
  8777 00006F39 8B7E08              <2> 		mov edi, [esi + 8]
  8778 00006F3C 8B5E0C              <2> 		mov ebx, [esi + 12]
  8779 00006F3F 893D[E56C0000]      <2> 		mov [windowvideobuf], edi
  8780 00006F45 891D[E96C0000]      <2> 		mov [windowvideobuf2], ebx
  8781 00006F4B 31C0                <2> 		xor eax, eax
  8782 00006F4D 31DB                <2> 		xor ebx, ebx
  8783 00006F4F 6689D0              <2> 		mov ax, dx
  8784 00006F52 6689CB              <2> 		mov bx, cx
  8785 00006F55 66C1E803            <2> 		shr ax, 3
  8786 00006F59 66C1EB04            <2> 		shr bx, 4
  8787 00006F5D 66A3[F16C0000]      <2> 		mov [termcol], ax
  8788 00006F63 A2[02240000]        <2> 		mov [charxy], al
  8789 00006F68 881D[03240000]      <2> 		mov [charxy + 1], bl
  8790 00006F6E 8B3D[E16C0000]      <2> 		mov edi, [windowbufloc]
  8791 00006F74 3B3D[84520000]      <2> 		cmp edi, [physbaseptr]
  8792 00006F7A 0F8334000000        <2> 		jae near windowvideocopyset
  8793 00006F80 31C9                <2> 		xor ecx, ecx
  8794 00006F82 31D2                <2> 		xor edx, edx
  8795 00006F84 668B15[D56C0000]    <2> 		mov dx, [winvcopystx]
  8796 00006F8B 668B0D[D76C0000]    <2> 		mov cx, [winvcopysty]
  8797 00006F92 8B3D[84520000]      <2> 		mov edi, [physbaseptr]
  8798 00006F98 01D7                <2> 		add edi, edx
  8799 00006F9A 81F900000000        <2> 		cmp ecx, 0
  8800 00006FA0 7412                <2> 		je windowvideocopyset
  8801                              <2> 	yrescopylp:
  8802 00006FA2 31C0                <2> 		xor eax, eax
  8803 00006FA4 66A1[5C530000]      <2> 		mov ax, [resolutionx2]
  8804 00006FAA F7E1                <2> 		mul ecx
  8805 00006FAC 01C7                <2> 		add edi, eax
  8806 00006FAE 893D[E16C0000]      <2> 		mov [windowbufloc], edi
  8807                              <2> 	windowvideocopyset:
  8808 00006FB4 6631C9              <2> 		xor cx, cx
  8809 00006FB7 6649                <2> 		dec cx
  8810 00006FB9 66890D[89710000]    <2> 		mov [charposline], cx
  8811 00006FC0 89FE                <2> 		mov esi, edi
  8812 00006FC2 81EE10000000        <2> 		sub esi, 16
  8813 00006FC8 31D2                <2> 		xor edx, edx
  8814 00006FCA 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8815 00006FD1 C1E204              <2> 		shl edx, 4
  8816 00006FD4 01D6                <2> 		add esi, edx
  8817 00006FD6 8B3D[E56C0000]      <2> 		mov edi, [windowvideobuf]
  8818 00006FDC 81EF02000000        <2> 		sub edi, 2
  8819 00006FE2 893D[8B710000]      <2> 		mov [charposvbuf], edi
  8820 00006FE8 E97A000000          <2> 		jmp nextcharwin
  8821                              <2> 	win.write:	;adjusted this to use alpha
  8822                              <2> 				;5R, 6G, 5B
  8823                              <2> %ifdef gui.alphablending
  8824                              <2> 		push esi
  8825                              <2> 		push bx
  8826                              <2> 		push cx
  8827                              <2> 		push dx
  8828                              <2> %ifdef gui.background
  8829                              <2> 		mov esi, edi
  8830                              <2> 		sub esi, [physbaseptr]
  8831                              <2> 		add esi, [backgroundimage]
  8832                              <2> 		cmp dword [backgroundimage], 0
  8833                              <2> 		jne .red
  8834                              <2> %endif
  8835                              <2> 		mov esi, background
  8836                              <2> 	.red:
  8837                              <2> 		mov cx, [esi]
  8838                              <2> 		shr cx, 11
  8839                              <2> 		mov bx, ax
  8840                              <2> 		shr bx, 11
  8841                              <2> 		add cx, bx
  8842                              <2> 		add cx, bx
  8843                              <2> 		add cx, bx
  8844                              <2> 		shr cx, 2
  8845                              <2> 		shl cx, 11
  8846                              <2> 		mov dx, cx
  8847                              <2> 	.green:
  8848                              <2> 		mov cx, [esi]
  8849                              <2> 		shl cx, 5
  8850                              <2> 		shr cx, 10
  8851                              <2> 		mov bx, ax
  8852                              <2> 		shl bx, 5
  8853                              <2> 		shr bx, 10
  8854                              <2> 		add cx, bx
  8855                              <2> 		add cx, bx
  8856                              <2> 		add cx, bx
  8857                              <2> 		shr cx, 2
  8858                              <2> 		shl cx, 5
  8859                              <2> 		add dx, cx
  8860                              <2> 	.blue:
  8861                              <2> 		mov cx, [esi]
  8862                              <2> 		shl cx, 11
  8863                              <2> 		shr cx, 11
  8864                              <2> 		mov bx, ax
  8865                              <2> 		shl bx, 11
  8866                              <2> 		shr bx, 11
  8867                              <2> 		add cx, bx
  8868                              <2> 		add cx, bx
  8869                              <2> 		add cx, bx
  8870                              <2> 		shr cx, 2
  8871                              <2> 		add dx, cx
  8872                              <2> 		mov [edi], dx
  8873                              <2> 		pop dx
  8874                              <2> 		pop cx
  8875                              <2> 		pop bx
  8876                              <2> 		pop esi
  8877                              <2> %else
  8878 00006FED 668907              <2> 		mov [edi], ax
  8879                              <2> %endif
  8880 00006FF0 C3                  <2> 		ret
  8881                              <2> 	copywindow:
  8882 00006FF1 B201                <2> 		mov dl, 1
  8883 00006FF3 D0C6                <2> 		rol dh, 1
  8884 00006FF5 20F2                <2> 		and dl, dh
  8885 00006FF7 803D[D16A0000]10    <2> 		cmp byte [colorcache], 0x10
  8886 00006FFE 7320                <2> 		jae switchwincolors
  8887 00007000 66A1[DF6C0000]      <2> 		mov ax, [windowcolor + 2]
  8888 00007006 E8E2FFFFFF          <2> 		call win.write
  8889 0000700B 80FA00              <2> 		cmp dl, 0
  8890 0000700E 742B                <2> 		je nowritewin
  8891 00007010 66A1[DD6C0000]      <2> 		mov ax, [windowcolor]
  8892 00007016 E8D2FFFFFF          <2> 		call win.write
  8893 0000701B E91B000000          <2> 		jmp nowritewin
  8894                              <2> 	switchwincolors:
  8895 00007020 66A1[DD6C0000]      <2> 		mov ax, [windowcolor]
  8896 00007026 E8C2FFFFFF          <2> 		call win.write
  8897 0000702B 80FA00              <2> 		cmp dl, 0
  8898 0000702E 740B                <2> 		je nowritewin
  8899 00007030 66A1[DF6C0000]      <2> 		mov ax, [windowcolor + 2]
  8900 00007036 E8B2FFFFFF          <2> 		call win.write
  8901                              <2> 	nowritewin:
  8902 0000703B 81C702000000        <2> 		add edi, 2
  8903 00007041 FEC1                <2> 		inc cl
  8904 00007043 80F908              <2> 		cmp cl, 8
  8905 00007046 75A9                <2> 		jne copywindow
  8906 00007048 6643                <2> 		inc bx
  8907 0000704A 30C9                <2> 		xor cl, cl
  8908 0000704C 31D2                <2> 		xor edx, edx
  8909 0000704E 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8910 00007055 01D6                <2> 		add esi, edx
  8911 00007057 89F7                <2> 		mov edi, esi
  8912 00007059 678AB7[F583]        <2> 		mov dh, [fonts + bx]
  8913 0000705E D0CE                <2> 		ror dh, 1
  8914 00007060 FEC5                <2> 		inc ch
  8915 00007062 80FD10              <2> 		cmp ch, 16
  8916 00007065 758A                <2> 		jne copywindow
  8917                              <2> 	nextcharwin:
  8918 00007067 6631C9              <2> 		xor cx, cx
  8919 0000706A 8B3D[8B710000]      <2> 		mov edi, [charposvbuf]
  8920 00007070 81C702000000        <2> 		add edi, 2
  8921 00007076 3B3D[F36C0000]      <2> 		cmp edi, [wincopyendpos]
  8922 0000707C 0F83F0000000        <2> 		jae near donewincopynow
  8923 00007082 8A7F01              <2> 		mov bh, [edi + 1]
  8924 00007085 80FF00              <2> 		cmp bh, 0
  8925 00007088 7505                <2> 		jne nofixcolorwin
  8926 0000708A B707                <2> 		mov bh, 7
  8927 0000708C 887F01              <2> 		mov [edi + 1], bh
  8928                              <2> 	nofixcolorwin:
  8929 0000708F 883D[D16A0000]      <2> 		mov [colorcache], bh
  8930 00007095 8A1F                <2> 		mov bl, [edi]
  8931 00007097 893D[8B710000]      <2> 		mov [charposvbuf], edi
  8932 0000709D 813D[E96C0000]0000- <2> 		cmp dword [windowvideobuf2], 0
  8933 000070A5 0000                <2>
  8934 000070A7 7459                <2> 		je noskipcharcopy
  8935 000070A9 2B3D[E56C0000]      <2> 		sub edi, [windowvideobuf]
  8936 000070AF 033D[E96C0000]      <2> 		add edi, [windowvideobuf2]
  8937 000070B5 8A6701              <2> 		mov ah, [edi + 1]
  8938 000070B8 8A07                <2> 		mov al, [edi]
  8939 000070BA 6639D8              <2> 		cmp ax, bx
  8940 000070BD 7543                <2> 		jne noskipcharcopy
  8941                              <2> 	skipcharcopy:
  8942 000070BF 81C610000000        <2> 		add esi, 16
  8943 000070C5 668B0D[89710000]    <2> 		mov cx, [charposline]
  8944 000070CC 6641                <2> 		inc cx
  8945 000070CE 66890D[89710000]    <2> 		mov [charposline], cx
  8946 000070D5 663B0D[F16C0000]    <2> 		cmp cx, [termcol]
  8947 000070DC 7289                <2> 		jb nextcharwin
  8948 000070DE 6631C9              <2> 		xor cx, cx
  8949 000070E1 66890D[89710000]    <2> 		mov [charposline], cx
  8950 000070E8 31D2                <2> 		xor edx, edx
  8951 000070EA 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8952 000070F1 C1E204              <2> 		shl edx, 4
  8953 000070F4 662B15[D96C0000]    <2> 		sub dx, [winvcopydx]
  8954 000070FB 01D6                <2> 		add esi, edx
  8955 000070FD E965FFFFFF          <2> 		jmp nextcharwin
  8956                              <2> 	noskipcharcopy:
  8957 00007102 881F                <2> 		mov [edi], bl
  8958 00007104 887F01              <2> 		mov [edi + 1], bh
  8959 00007107 8B3D[8B710000]      <2> 		mov edi, [charposvbuf]
  8960 0000710D 30FF                <2> 		xor bh, bh
  8961 0000710F 66C1E304            <2> 		shl bx, 4
  8962 00007113 31D2                <2> 		xor edx, edx
  8963 00007115 668B15[5C530000]    <2> 		mov dx, [resolutionx2]
  8964 0000711C C1E204              <2> 		shl edx, 4
  8965 0000711F 29D6                <2> 		sub esi, edx
  8966 00007121 81C610000000        <2> 		add esi, 16
  8967 00007127 89F7                <2> 		mov edi, esi
  8968 00007129 668B0D[89710000]    <2> 		mov cx, [charposline]
  8969 00007130 6641                <2> 		inc cx
  8970 00007132 663B0D[F16C0000]    <2> 		cmp cx, [termcol]
  8971 00007139 7316                <2> 		jae fixwindowcopy
  8972 0000713B 66890D[89710000]    <2> 		mov [charposline], cx
  8973 00007142 6631C9              <2> 		xor cx, cx
  8974 00007145 678AB7[F583]        <2> 		mov dh, [fonts + bx]
  8975 0000714A D0CE                <2> 		ror dh, 1
  8976 0000714C E9A0FEFFFF          <2> 		jmp copywindow
  8977                              <2> fixwindowcopy:
  8978 00007151 6631C9              <2> 		xor cx, cx
  8979 00007154 66890D[89710000]    <2> 		mov [charposline], cx
  8980 0000715B 662B15[D96C0000]    <2> 		sub dx, [winvcopydx]
  8981 00007162 01D6                <2> 		add esi, edx
  8982 00007164 89F7                <2> 		mov edi, esi
  8983 00007166 678AB7[F583]        <2> 		mov dh, [fonts + bx]
  8984 0000716B D0CE                <2> 		ror dh, 1
  8985 0000716D E97FFEFFFF          <2> 		jmp copywindow
  8986                              <2> donewincopynow:
  8987 00007172 803D[3F220000]01    <2> 		cmp byte [termcopyon], 1
  8988 00007179 7506                <2> 		jne forgetresetstuff
  8989 0000717B E8EDB4FFFF          <2> 		call switchtermcursor
  8990 00007180 61                  <2> 		popa
  8991                              <2> forgetresetstuff:
  8992 00007181 C605[3F220000]00    <2> 		mov byte [termcopyon], 0
  8993 00007188 C3                  <2> 		ret
  8994                              <2> 		
  8995 00007189 0000                <2> charposline dw 0
  8996 0000718B 00000000            <2> charposvbuf dw 0,0
  8997                              <1> 				
  8998 0000718F 00                  <1> copygui db 0
  8999 00007190 00                  <1> graphicsset db 0
  9000 00007191 0000                <1> graphicspos db 0,0
  9001 00007193 00                  <1> showcursorfonton db 0
  9002 00007194 00                  <1> savefonton db 0
  9003 00007195 00                  <1> mouseselecton db 0
  9004                              <1> 
  9005 00007196 00                  <1> pbutton db 0
  9006 00007197 00                  <1> pLBUTTON db 0
  9007 00007198 00                  <1> pRBUTTON db 0
  9008 00007199 00000000            <1> dragging dw 0,0
  9009 0000719D 0000000000000000    <1> lastpos dw 0,0,0,0
  9010 000071A5 00000000            <1> colorbuf dw 0,0
  9011                              <1> 	
  9012                              <1> 	clickicon:
  9013 000071A9 B001                <1> 		mov al, 1
  9014 000071AB A2[96710000]        <1> 		mov [pbutton], al
  9015 000071B0 A0[97710000]        <1> 		mov al, [pLBUTTON]
  9016 000071B5 2205[60560000]      <1> 		and al, [LBUTTON]
  9017 000071BB 8A25[98710000]      <1> 		mov ah, [pRBUTTON]
  9018 000071C1 2225[61560000]      <1> 		and ah, [RBUTTON]
  9019 000071C7 08E0                <1> 		or al, ah
  9020 000071C9 3C00                <1> 		cmp al, 0
  9021 000071CB 741B                <1> 		je nodragclick
  9022 000071CD 813D[99710000]0100- <1> 		cmp dword [dragging], 1
  9023 000071D5 0000                <1>
  9024 000071D7 732D                <1> 		jae dragclick
  9025 000071D9 C705[99710000]0100- <1> 		mov dword [dragging], 1
  9026 000071E1 0000                <1>
  9027 000071E3 E91E000000          <1> 		jmp dragclick
  9028                              <1> 	nodragclick:
  9029 000071E8 C705[99710000]0000- <1> 		mov dword [dragging], 0
  9030 000071F0 0000                <1>
  9031 000071F2 A0[60560000]        <1> 		mov al, [LBUTTON]
  9032 000071F7 A2[97710000]        <1> 		mov [pLBUTTON], al
  9033 000071FC A0[61560000]        <1> 		mov al, [RBUTTON]
  9034 00007201 A2[98710000]        <1> 		mov [pRBUTTON], al
  9035                              <1> 	dragclick:
  9036 00007206 6631C0              <1> 		xor ax, ax
  9037 00007209 BE[7BC60000]        <1> 		mov esi, graphicstable
  9038 0000720E C705[CD790000]0000- <1> 		mov dword [codepointer], 0
  9039 00007216 0000                <1>
  9040                              <1> 	clicon2:
  9041 00007218 31D2                <1> 		xor edx, edx
  9042 0000721A 31C9                <1> 		xor ecx, ecx
  9043 0000721C 66813E0100          <1> 		cmp word [esi], 1
  9044 00007221 0F841B000000        <1> 		je near iconselect
  9045 00007227 66813E0200          <1> 		cmp word [esi], 2
  9046 0000722C 0F8472010000        <1> 		je near textselected
  9047 00007232 66813E0300          <1> 		cmp word [esi], 3
  9048 00007237 0F84C7020000        <1> 		je near windowselect
  9049 0000723D E908040000          <1> 		jmp nexticonsel
  9050                              <1> 	iconselect:
  9051 00007242 668B5606            <1> 		mov dx, [esi + 6]
  9052 00007246 6689D0              <1> 		mov ax, dx
  9053 00007249 668B4E08            <1> 		mov cx, [esi + 8]
  9054 0000724D 6689CB              <1> 		mov bx, cx
  9055 00007250 6681C32000          <1> 		add bx, 32
  9056 00007255 6601D0              <1> 		add ax, dx
  9057 00007258 813D[99710000]0100- <1> 		cmp dword [dragging], 1
  9058 00007260 0000                <1>
  9059 00007262 746F                <1> 		je dragicon
  9060 00007264 813D[99710000]0000- <1> 		cmp dword [dragging], 0
  9061 0000726C 0000                <1>
  9062 0000726E 7411                <1> 		je nodragiconcheck
  9063 00007270 3935[99710000]      <1> 		cmp dword [dragging], esi
  9064 00007276 0F85CE030000        <1> 		jne near nexticonsel
  9065 0000727C E952000000          <1> 		jmp dragicon
  9066                              <1> 	nodragiconcheck:
  9067 00007281 663905[4F550000]    <1> 		cmp [mousecursorposition], ax
  9068 00007288 0F82BC030000        <1> 		jb near nexticonsel
  9069 0000728E 66054000            <1> 		add ax, 64
  9070 00007292 663905[4F550000]    <1> 		cmp [mousecursorposition], ax
  9071 00007299 0F87AB030000        <1> 		ja near nexticonsel
  9072 0000729F 6629D0              <1> 		sub ax, dx
  9073 000072A2 66390D[51550000]    <1> 		cmp [mousecursorposition + 2], cx
  9074 000072A9 0F829B030000        <1> 		jb near nexticonsel
  9075 000072AF 66391D[51550000]    <1> 		cmp [mousecursorposition + 2], bx
  9076 000072B6 0F878E030000        <1> 		ja near nexticonsel
  9077 000072BC 668B460A            <1> 		mov ax, [esi + 10]
  9078 000072C0 66250100            <1> 		and ax, 1
  9079 000072C4 663D0100            <1> 		cmp ax, 1
  9080 000072C8 0F84B6000000        <1> 		je near unselecticon
  9081 000072CE E98D000000          <1> 		jmp nodragicon
  9082                              <1> 	dragicon:
  9083 000072D3 663905[4B550000]    <1> 		cmp [lastmouseposition], ax
  9084 000072DA 0F826A030000        <1> 		jb near nexticonsel
  9085 000072E0 66054000            <1> 		add ax, 64
  9086 000072E4 663905[4B550000]    <1> 		cmp [lastmouseposition], ax
  9087 000072EB 0F8759030000        <1> 		ja near nexticonsel
  9088 000072F1 6629D0              <1> 		sub ax, dx
  9089 000072F4 66390D[4D550000]    <1> 		cmp [lastmouseposition + 2], cx
  9090 000072FB 0F8249030000        <1> 		jb near nexticonsel
  9091 00007301 66391D[4D550000]    <1> 		cmp [lastmouseposition + 2], bx
  9092 00007308 0F873C030000        <1> 		ja near nexticonsel
  9093 0000730E 668B460A            <1> 		mov ax, [esi + 10]
  9094 00007312 2410                <1> 		and al, 00010000b
  9095 00007314 3C10                <1> 		cmp al, 00010000b
  9096 00007316 7448                <1> 		je nodragicon
  9097 00007318 8935[99710000]      <1> 		mov [dragging], esi
  9098 0000731E 66D1E2              <1> 		shl dx, 1
  9099 00007321 662B15[4B550000]    <1> 		sub dx, [lastmouseposition]
  9100 00007328 660315[4F550000]    <1> 		add dx, [mousecursorposition]
  9101 0000732F 66D1EA              <1> 		shr dx, 1
  9102 00007332 66030D[51550000]    <1> 		add cx, [mousecursorposition + 2]
  9103 00007339 662B0D[4D550000]    <1> 		sub cx, [lastmouseposition + 2]
  9104 00007340 663B15[5C530000]    <1> 		cmp dx, [resolutionx2]
  9105 00007347 7607                <1> 		jbe chkyresdrgicn
  9106 00007349 668B15[4F550000]    <1> 		mov dx, [mousecursorposition]
  9107                              <1> 	chkyresdrgicn:
  9108 00007350 663B0D[70520000]    <1> 		cmp cx, [resolutiony]
  9109 00007357 7607                <1> 		jbe nodragicon
  9110 00007359 668B0D[51550000]    <1> 		mov cx, [mousecursorposition + 2]
  9111                              <1> 	nodragicon:
  9112 00007360 66814E0A0100        <1> 		or word [esi + 10], 1
  9113 00007366 8B5E0C              <1> 		mov ebx, [esi + 12]
  9114 00007369 668B460A            <1> 		mov ax, [esi + 10]
  9115 0000736D 8B7602              <1> 		mov esi, [esi + 2]
  9116 00007370 C705[CD790000]0000- <1> 		mov dword [codepointer], 0
  9117 00007378 0000                <1>
  9118 0000737A E857EFFFFF          <1> 		call showicon
  9119 0000737F E9DF020000          <1> 		jmp doneiconsel
  9120                              <1> 	unselecticon:
  9121 00007384 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9122 0000738A 8B5E0C              <1> 		mov ebx, [esi + 12]
  9123 0000738D 668B460A            <1> 		mov ax, [esi + 10]
  9124 00007391 8B7602              <1> 		mov esi, [esi + 2]
  9125 00007394 891D[CD790000]      <1> 		mov [codepointer], ebx
  9126 0000739A E837EFFFFF          <1> 		call showicon
  9127 0000739F E9BF020000          <1> 		jmp doneiconsel
  9128                              <1> 	textselected:
  9129 000073A4 8B5E02              <1> 		mov ebx, [esi + 2]
  9130 000073A7 668B5606            <1> 		mov dx, [esi + 6]
  9131 000073AB 6689D0              <1> 		mov ax, dx
  9132 000073AE 668B4E08            <1> 		mov cx, [esi + 8]
  9133                              <1> 	lengthtesttext:
  9134 000073B2 803B00              <1> 		cmp byte [ebx], 0
  9135 000073B5 7407                <1> 		je donetesttextlength
  9136 000073B7 43                  <1> 		inc ebx
  9137 000073B8 66051000            <1> 		add ax, 16
  9138 000073BC EBF4                <1> 		jmp lengthtesttext
  9139                              <1> 	donetesttextlength:
  9140 000073BE 6689CB              <1> 		mov bx, cx
  9141 000073C1 6681C30F00          <1> 		add bx, 15
  9142 000073C6 813D[99710000]0100- <1> 		cmp dword [dragging], 1
  9143 000073CE 0000                <1>
  9144 000073D0 7468                <1> 		je dragtext
  9145 000073D2 813D[99710000]0000- <1> 		cmp dword [dragging], 0
  9146 000073DA 0000                <1>
  9147 000073DC 7411                <1> 		je nodragtextcheck
  9148 000073DE 3935[99710000]      <1> 		cmp dword [dragging], esi
  9149 000073E4 0F8560020000        <1> 		jne near nexticonsel
  9150 000073EA E94B000000          <1> 		jmp dragtext
  9151                              <1> 	nodragtextcheck:
  9152 000073EF 663915[4F550000]    <1> 		cmp [mousecursorposition], dx
  9153 000073F6 0F824E020000        <1> 		jb near nexticonsel
  9154 000073FC 663905[4F550000]    <1> 		cmp [mousecursorposition], ax
  9155 00007403 0F8741020000        <1> 		ja near nexticonsel
  9156 00007409 66390D[51550000]    <1> 		cmp [mousecursorposition + 2], cx
  9157 00007410 0F8234020000        <1> 		jb near nexticonsel
  9158 00007416 66391D[51550000]    <1> 		cmp [mousecursorposition + 2], bx
  9159 0000741D 0F8727020000        <1> 		ja near nexticonsel
  9160 00007423 668B460A            <1> 		mov ax, [esi + 10]
  9161 00007427 66250100            <1> 		and ax, 1
  9162 0000742B 663D0100            <1> 		cmp ax, 1
  9163 0000742F 0F84AB000000        <1> 		je near unselecttext
  9164 00007435 E986000000          <1> 		jmp nodragtext
  9165                              <1> 	dragtext:
  9166 0000743A 663915[4B550000]    <1> 		cmp [lastmouseposition], dx
  9167 00007441 0F8203020000        <1> 		jb near nexticonsel
  9168 00007447 663905[4B550000]    <1> 		cmp [lastmouseposition], ax
  9169 0000744E 0F87F6010000        <1> 		ja near nexticonsel
  9170 00007454 66390D[4D550000]    <1> 		cmp [lastmouseposition + 2], cx
  9171 0000745B 0F82E9010000        <1> 		jb near nexticonsel
  9172 00007461 66391D[4D550000]    <1> 		cmp [lastmouseposition + 2], bx
  9173 00007468 0F87DC010000        <1> 		ja near nexticonsel
  9174 0000746E 668B460A            <1> 		mov ax, [esi + 10]
  9175 00007472 2410                <1> 		and al, 00010000b
  9176 00007474 663D1000            <1> 		cmp ax, 00010000b
  9177 00007478 0F8442000000        <1> 		je near nodragtext
  9178 0000747E 8935[99710000]      <1> 		mov [dragging], esi
  9179 00007484 662B15[4B550000]    <1> 		sub dx, [lastmouseposition]
  9180 0000748B 660315[4F550000]    <1> 		add dx, [mousecursorposition]
  9181 00007492 66030D[51550000]    <1> 		add cx, [mousecursorposition + 2]
  9182 00007499 662B0D[4D550000]    <1> 		sub cx, [lastmouseposition + 2]
  9183 000074A0 663B15[5C530000]    <1> 		cmp dx, [resolutionx2]
  9184 000074A7 7607                <1> 		jbe chkyresdrgtxt
  9185 000074A9 668B15[4F550000]    <1> 		mov dx, [mousecursorposition]
  9186                              <1> 	chkyresdrgtxt:
  9187 000074B0 663B0D[70520000]    <1> 		cmp cx, [resolutiony]
  9188 000074B7 7607                <1> 		jbe nodragtext
  9189 000074B9 668B0D[51550000]    <1> 		mov cx, [mousecursorposition + 2]
  9190                              <1> 	nodragtext:
  9191 000074C0 66814E0A0100        <1> 		or word [esi + 10], 1
  9192 000074C6 8B5E0C              <1> 		mov ebx, [esi + 12]
  9193 000074C9 891D[CD790000]      <1> 		mov [codepointer], ebx
  9194 000074CF 668B460A            <1> 		mov ax, [esi + 10]
  9195 000074D3 8B7602              <1> 		mov esi, [esi + 2]
  9196 000074D6 E8B3F5FFFF          <1> 		call showstring
  9197 000074DB E983010000          <1> 		jmp doneiconsel
  9198                              <1> 	unselecttext:
  9199 000074E0 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9200 000074E6 8B5E0C              <1> 		mov ebx, [esi + 12]
  9201 000074E9 668B460A            <1> 		mov ax, [esi + 10]
  9202 000074ED 8B7602              <1> 		mov esi, [esi + 2]
  9203 000074F0 C705[CD790000]0000- <1> 		mov dword [codepointer], 0
  9204 000074F8 0000                <1>
  9205 000074FA E88FF5FFFF          <1> 		call showstring
  9206 000074FF E95F010000          <1> 		jmp doneiconsel
  9207                              <1> windowselect:
  9208 00007504 8B7E02              <1> 		mov edi, [esi + 2]
  9209 00007507 668B5606            <1> 		mov dx, [esi + 6]
  9210 0000750B 6689D0              <1> 		mov ax, dx
  9211 0000750E 668B4E08            <1> 		mov cx, [esi + 8]
  9212 00007512 6689CB              <1> 		mov bx, cx
  9213 00007515 6681C31000          <1> 		add bx, 16
  9214 0000751A 813D[99710000]0100- <1> 		cmp dword [dragging], 1
  9215 00007522 0000                <1>
  9216 00007524 746D                <1> 		je dragwin
  9217 00007526 813D[99710000]0000- <1> 		cmp dword [dragging], 0
  9218 0000752E 0000                <1>
  9219 00007530 7411                <1> 		je nodragwincheck
  9220 00007532 3935[99710000]      <1> 		cmp dword [dragging], esi
  9221 00007538 0F850C010000        <1> 		jne near nexticonsel
  9222 0000753E E950000000          <1> 		jmp dragwin
  9223                              <1> 	nodragwincheck:
  9224 00007543 663905[4F550000]    <1> 		cmp [mousecursorposition], ax
  9225 0000754A 0F82FA000000        <1> 		jb near nexticonsel
  9226 00007550 660307              <1> 		add ax, [edi]
  9227 00007553 660307              <1> 		add ax, [edi]
  9228 00007556 663905[4F550000]    <1> 		cmp [mousecursorposition], ax
  9229 0000755D 0F87E7000000        <1> 		ja near nexticonsel
  9230 00007563 66390D[51550000]    <1> 		cmp [mousecursorposition + 2], cx
  9231 0000756A 0F82DA000000        <1> 		jb near nexticonsel
  9232 00007570 66391D[51550000]    <1> 		cmp [mousecursorposition + 2], bx
  9233 00007577 0F87CD000000        <1> 		ja near nexticonsel
  9234 0000757D 662D1400            <1> 		sub ax, 20
  9235 00007581 663905[4F550000]    <1> 		cmp [mousecursorposition], ax
  9236 00007588 0F879C000000        <1> 		ja near killwin
  9237 0000758E E983000000          <1> 		jmp nodragwin
  9238                              <1> 	dragwin:
  9239 00007593 C605[EE760000]01    <1> 		mov byte [windrag], 1
  9240 0000759A 663905[4B550000]    <1> 		cmp [lastmouseposition], ax
  9241 000075A1 0F82A3000000        <1> 		jb near nexticonsel
  9242 000075A7 660307              <1> 		add ax, [edi]
  9243 000075AA 660307              <1> 		add ax, [edi]
  9244 000075AD 663905[4B550000]    <1> 		cmp [lastmouseposition], ax
  9245 000075B4 0F8790000000        <1> 		ja near nexticonsel
  9246 000075BA 66390D[4D550000]    <1> 		cmp [lastmouseposition + 2], cx
  9247 000075C1 0F8283000000        <1> 		jb near nexticonsel
  9248 000075C7 66391D[4D550000]    <1> 		cmp [lastmouseposition + 2], bx
  9249 000075CE 0F8776000000        <1> 		ja near nexticonsel
  9250 000075D4 8935[99710000]      <1> 		mov [dragging], esi
  9251 000075DA 662B15[4B550000]    <1> 		sub dx, [lastmouseposition]
  9252 000075E1 660315[4F550000]    <1> 		add dx, [mousecursorposition]
  9253 000075E8 66030D[51550000]    <1> 		add cx, [mousecursorposition + 2]
  9254 000075EF 662B0D[4D550000]    <1> 		sub cx, [lastmouseposition + 2]
  9255 000075F6 663B15[5C530000]    <1> 		cmp dx, [resolutionx2]
  9256 000075FD 7607                <1> 		jbe chkyresdrgwin
  9257 000075FF 668B15[4F550000]    <1> 		mov dx, [mousecursorposition]
  9258                              <1> 	chkyresdrgwin:
  9259 00007606 663B0D[70520000]    <1> 		cmp cx, [resolutiony]
  9260 0000760D 7607                <1> 		jbe nodragwin
  9261 0000760F 668B0D[51550000]    <1> 		mov cx, [mousecursorposition + 2]
  9262                              <1> 	nodragwin:
  9263 00007616 8B5E0C              <1> 		mov ebx, [esi + 12]
  9264 00007619 668B460A            <1> 		mov ax, [esi + 10]
  9265 0000761D 8B7602              <1> 		mov esi, [esi + 2]
  9266 00007620 E8D2F6FFFF          <1> 		call showwindow
  9267 00007625 E939000000          <1> 		jmp doneiconsel
  9268                              <1> 	killwin:
  9269 0000762A 66C7060000          <1> 		mov word [esi], 0
  9270 0000762F C605[3E220000]00    <1> 		mov byte [termguion], 0
  9271 00007636 E89CEEFFFF          <1> 		call guiclear
  9272 0000763B E8D9EEFFFF          <1> 		call reloadallgraphics
  9273 00007640 E989E9FFFF          <1> 		jmp guistart
  9274 00007645 E93A000000          <1> 		jmp doneiconsel2
  9275                              <1> 	nexticonsel:
  9276 0000764A 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9277 00007650 81C610000000        <1> 		add esi, 16
  9278 00007656 81FE[7BC80000]      <1> 		cmp esi, graphicstableend
  9279 0000765C 7305                <1> 		jae doneiconsel
  9280 0000765E E9B5FBFFFF          <1> 		jmp clicon2
  9281                              <1> 	doneiconsel:
  9282 00007663 813D[99710000]0100- <1> 		cmp dword [dragging], 1
  9283 0000766B 0000                <1>
  9284 0000766D 7315                <1> 		jae doneiconsel2
  9285 0000766F 813D[CD790000]0000- <1> 		cmp dword [codepointer], 0
  9286 00007677 0000                <1>
  9287 00007679 7409                <1> 		je doneiconsel2
  9288 0000767B 8B1D[CD790000]      <1> 		mov ebx, [codepointer]
  9289 00007681 FFD3                <1> 		call ebx
  9290 00007683 C3                  <1> 		ret
  9291                              <1> 	doneiconsel2:
  9292 00007684 A0[60560000]        <1> 		mov al, [LBUTTON]
  9293 00007689 A2[97710000]        <1> 		mov [pLBUTTON], al
  9294 0000768E A0[61560000]        <1> 		mov al, [RBUTTON]
  9295 00007693 A2[98710000]        <1> 		mov [pRBUTTON], al
  9296 00007698 66813D[99710000]01- <1> 		cmp word [dragging], 1
  9297 000076A0 00                  <1>
  9298 000076A1 0F8613000000        <1> 		jbe near noreloadgraphicsclick
  9299 000076A7 803D[EE760000]01    <1> 		cmp byte [windrag], 1
  9300 000076AE 7405                <1> 		je noclearcursorcl
  9301 000076B0 E806EBFFFF          <1> 		call clearmousecursor
  9302                              <1> noclearcursorcl:
  9303 000076B5 E85FEEFFFF          <1> 		call reloadallgraphics
  9304                              <1> noreloadgraphicsclick:
  9305 000076BA 31C9                <1> 		xor ecx, ecx
  9306 000076BC 31D2                <1> 		xor edx, edx
  9307 000076BE 30E4                <1> 		xor ah, ah
  9308 000076C0 8825[EE760000]      <1> 		mov [windrag], ah
  9309 000076C6 B0FE                <1> 		mov al, 254
  9310 000076C8 668B15[4F550000]    <1> 		mov dx, [mousecursorposition]
  9311 000076CF 668B0D[51550000]    <1> 		mov cx, [mousecursorposition + 2]
  9312 000076D6 66BBE738            <1> 		mov bx, 0011100011100111b
  9313 000076DA C605[93710000]01    <1> 		mov byte [showcursorfonton], 1
  9314 000076E1 E8FAF3FFFF          <1> 		call showfontvesa
  9315 000076E6 C605[93710000]00    <1> 		mov byte [showcursorfonton], 0
  9316 000076ED C3                  <1> 		ret
  9317 000076EE 00                  <1> windrag db 0
  9318 000076EF 00000000            <1> lastdrag dw 0,0
  9319 000076F3 00000000            <1> grpctblpos dw 0,0
  9320                              <1> 
  9321                              <1> 
  9322                              <1> 
  9323 000076F7 00<rept>            <1> grphbuf times 16 db 0
  9324                              <1> 	graphicsadd:
  9325 00007707 BF[7BC60000]        <1> 		mov edi, graphicstable
  9326                              <1> 	shwgrph1:
  9327 0000770C 397702              <1> 		cmp dword [edi + 2], esi
  9328 0000770F 7414                <1> 		je showgraphicsreplace2
  9329 00007711 81C710000000        <1> 		add edi, 16
  9330 00007717 81FF[7BC80000]      <1> 		cmp edi, graphicstableend
  9331 0000771D 0F832A020000        <1> 		jae near showgraphicsnew
  9332 00007723 EBE7                <1> 		jmp shwgrph1
  9333                              <1> 	showgraphicsreplace2:
  9334 00007725 8935[F9760000]      <1> 		mov [grphbuf + 2], esi
  9335 0000772B 668915[FD760000]    <1> 		mov [grphbuf + 6], dx
  9336 00007732 66890D[FF760000]    <1> 		mov [grphbuf + 8], cx
  9337 00007739 891D[03770000]      <1> 		mov [grphbuf + 12], ebx
  9338 0000773F 30FF                <1> 		xor bh, bh
  9339 00007741 88E3                <1> 		mov bl, ah
  9340 00007743 30E4                <1> 		xor ah, ah
  9341 00007745 66A3[01770000]      <1> 		mov [grphbuf + 10], ax	
  9342 0000774B 66891D[F7760000]    <1> 		mov [grphbuf], bx
  9343 00007752 66A1[F7760000]      <1> 		mov ax, [grphbuf]
  9344 00007758 663D0100            <1> 		cmp ax, 1
  9345 0000775C 0F8419000000        <1> 		je near replaceicon
  9346 00007762 663D0200            <1> 		cmp ax, 2
  9347 00007766 0F8493000000        <1> 		je near replacestring
  9348 0000776C 663D0300            <1> 		cmp ax, 3
  9349 00007770 0F840F010000        <1> 		je near replacewindow
  9350 00007776 E9AF010000          <1> 		jmp showgraphicsreplace
  9351                              <1> 	replaceicon:
  9352 0000777B 893D[9D710000]      <1> 		mov [lastpos], edi
  9353 00007781 8935[A1710000]      <1> 		mov [lastpos + 4], esi
  9354 00007787 8B7702              <1> 		mov esi, [edi + 2]
  9355 0000778A 668B5F0C            <1> 		mov bx, [edi + 12]
  9356 0000778E 668B5706            <1> 		mov dx, [edi + 6]
  9357 00007792 668B4F08            <1> 		mov cx, [edi + 8]
  9358 00007796 668B06              <1> 		mov ax, [esi]
  9359 00007799 66A3[A5710000]      <1> 		mov [colorbuf], ax
  9360 0000779F 66A1[15650000]      <1> 		mov ax, [background]
  9361 000077A5 668906              <1> 		mov [esi], ax
  9362 000077A8 8B5F0C              <1> 		mov ebx, [edi + 12]
  9363 000077AB 668B470A            <1> 		mov ax, [edi + 10]
  9364 000077AF 2401                <1> 		and al, 1
  9365 000077B1 A2[D1790000]        <1> 		mov [iconselected], al
  9366 000077B6 668B470A            <1> 		mov ax, [edi + 10]
  9367 000077BA E82AEBFFFF          <1> 		call showicon2
  9368 000077BF 8B3D[9D710000]      <1> 		mov edi, [lastpos]
  9369 000077C5 8B7702              <1> 		mov esi, [edi + 2]
  9370 000077C8 66A1[A5710000]      <1> 		mov ax, [colorbuf]
  9371 000077CE 668906              <1> 		mov [esi], ax
  9372 000077D1 8B35[A1710000]      <1> 		mov esi, [lastpos + 4]
  9373 000077D7 668B15[FD760000]    <1> 		mov dx, [grphbuf + 6]
  9374 000077DE 668B0D[FF760000]    <1> 		mov cx, [grphbuf + 8]
  9375 000077E5 668B1D[F7760000]    <1> 		mov bx, [grphbuf]
  9376 000077EC 66A1[01770000]      <1> 		mov ax, [grphbuf + 10]
  9377 000077F2 88DC                <1> 		mov ah, bl
  9378 000077F4 8B1D[03770000]      <1> 		mov ebx, [grphbuf + 12]
  9379 000077FA E92B010000          <1> 		jmp showgraphicsreplace
  9380                              <1> 	replacestring:
  9381 000077FF 893D[9D710000]      <1> 		mov [lastpos], edi
  9382 00007805 8935[A1710000]      <1> 		mov [lastpos + 4], esi
  9383 0000780B 8B5F0C              <1> 		mov ebx, [edi + 12]
  9384 0000780E 8B7702              <1> 		mov esi, [edi + 2]
  9385 00007811 668B5706            <1> 		mov dx, [edi + 6]
  9386 00007815 668B4F08            <1> 		mov cx, [edi + 8]
  9387 00007819 66A1[CF6A0000]      <1> 		mov ax, [colorfont2]
  9388 0000781F 66A3[A5710000]      <1> 		mov [colorbuf], ax
  9389 00007825 66A1[15650000]      <1> 		mov ax, [background]
  9390 0000782B 66A3[CF6A0000]      <1> 		mov [colorfont2], ax		
  9391 00007831 8B5F0C              <1> 		mov ebx, [edi + 12]
  9392 00007834 668B470A            <1> 		mov ax, [edi + 10]
  9393 00007838 2401                <1> 		and al, 1
  9394 0000783A A2[95710000]        <1> 		mov [mouseselecton], al
  9395 0000783F 668B470A            <1> 		mov ax, [edi + 10]
  9396 00007843 E859F2FFFF          <1> 		call showstring2
  9397 00007848 66A1[A5710000]      <1> 		mov ax, [colorbuf]
  9398 0000784E 66A3[CF6A0000]      <1> 		mov [colorfont2], ax
  9399 00007854 8B3D[9D710000]      <1> 		mov edi, [lastpos]
  9400 0000785A 8B7702              <1> 		mov esi, [edi + 2]
  9401 0000785D 668B15[FD760000]    <1> 		mov dx, [grphbuf + 6]
  9402 00007864 668B0D[FF760000]    <1> 		mov cx, [grphbuf + 8]
  9403 0000786B 668B1D[F7760000]    <1> 		mov bx, [grphbuf]
  9404 00007872 66A1[01770000]      <1> 		mov ax, [grphbuf + 10]
  9405 00007878 88DC                <1> 		mov ah, bl
  9406 0000787A 8B1D[03770000]      <1> 		mov ebx, [grphbuf + 12]
  9407 00007880 E9A5000000          <1> 		jmp showgraphicsreplace
  9408                              <1> 	replacewindow:
  9409 00007885 893D[9D710000]      <1> 		mov [lastpos], edi
  9410 0000788B 8935[A1710000]      <1> 		mov [lastpos + 4], esi
  9411 00007891 8B7702              <1> 		mov esi, [edi + 2]
  9412 00007894 8B3D[E16C0000]      <1> 		mov edi, [windowbufloc]
  9413 0000789A 31D2                <1> 		xor edx, edx
  9414 0000789C 668B15[5C530000]    <1> 		mov dx, [resolutionx2]
  9415 000078A3 C1E204              <1> 		shl edx, 4
  9416 000078A6 29D7                <1> 		sub edi, edx
  9417 000078A8 31D2                <1> 		xor edx, edx
  9418 000078AA 668B16              <1> 		mov dx, [esi]
  9419 000078AD 660316              <1> 		add dx, [esi]
  9420 000078B0 668B4E02            <1> 		mov cx, [esi + 2]
  9421 000078B4 6681C11000          <1> 		add cx, 16
  9422 000078B9 66A1[15650000]      <1> 		mov ax, [background]
  9423                              <1> 	clearwindow:
  9424                              <1> 		%ifdef gui.background
  9425                              <1> 			cmp dword [backgroundimage], 0
  9426                              <1> 			je .noback
  9427                              <1> 			push esi
  9428                              <1> 			mov esi, [backgroundimage]
  9429                              <1> 			sub edi, [physbaseptr]
  9430                              <1> 			add esi, edi
  9431                              <1> 			add edi, [physbaseptr]
  9432                              <1> 			mov ax, [esi]
  9433                              <1> 			pop esi
  9434                              <1> 		.noback:
  9435                              <1> 		%endif
  9436 000078BF 668907              <1> 		mov [edi], ax
  9437 000078C2 81C702000000        <1> 		add edi, 2
  9438 000078C8 81EA02000000        <1> 		sub edx, 2
  9439 000078CE 81FA00000000        <1> 		cmp edx, 0
  9440 000078D4 75E9                <1> 		jne clearwindow
  9441 000078D6 6649                <1> 		dec cx
  9442 000078D8 668B15[5C530000]    <1> 		mov dx, [resolutionx2]
  9443 000078DF 662B16              <1> 		sub dx, [esi]
  9444 000078E2 662B16              <1> 		sub dx, [esi]
  9445 000078E5 01D7                <1> 		add edi, edx
  9446 000078E7 668B16              <1> 		mov dx, [esi]
  9447 000078EA 660316              <1> 		add dx, [esi]
  9448 000078ED 6681F90000          <1> 		cmp cx, 0
  9449 000078F2 75CB                <1> 		jne clearwindow
  9450 000078F4 C605[3F220000]00    <1> 		mov byte [termcopyon], 0
  9451 000078FB 8B3D[9D710000]      <1> 		mov edi, [lastpos]
  9452 00007901 8B35[F9760000]      <1> 		mov esi, [grphbuf + 2]
  9453 00007907 668B15[FD760000]    <1> 		mov dx, [grphbuf + 6]
  9454 0000790E 668B0D[FF760000]    <1> 		mov cx, [grphbuf + 8]
  9455 00007915 668B1D[F7760000]    <1> 		mov bx, [grphbuf]
  9456 0000791C 66A1[01770000]      <1> 		mov ax, [grphbuf + 10]
  9457 00007922 88DC                <1> 		mov ah, bl
  9458 00007924 8B1D[03770000]      <1> 		mov ebx, [grphbuf + 12]
  9459                              <1> 	showgraphicsreplace:
  9460 0000792A 897702              <1> 		mov [edi + 2], esi
  9461 0000792D 66895706            <1> 		mov [edi + 6], dx
  9462 00007931 66894F08            <1> 		mov [edi + 8], cx
  9463 00007935 895F0C              <1> 		mov [edi + 12], ebx
  9464 00007938 30FF                <1> 		xor bh, bh
  9465 0000793A 88E3                <1> 		mov bl, ah
  9466 0000793C 30E4                <1> 		xor ah, ah
  9467 0000793E 6689470A            <1> 		mov [edi + 10], ax
  9468 00007942 66891F              <1> 		mov [edi], bx
  9469 00007945 8B5F0C              <1> 		mov ebx, [edi + 12]
  9470 00007948 668B470A            <1> 		mov ax, [edi + 10]
  9471 0000794C C3                  <1> 		ret
  9472                              <1> 	showgraphicsnew:
  9473 0000794D BF[7BC60000]        <1> 		mov edi, graphicstable
  9474                              <1> 	shwgrph2:
  9475 00007952 66813F0000          <1> 		cmp word [edi], 0
  9476 00007957 74D1                <1> 		je showgraphicsreplace
  9477 00007959 81C710000000        <1> 		add edi, 16
  9478 0000795F 81FF[7BC80000]      <1> 		cmp edi, graphicstableend
  9479 00007965 72EB                <1> 		jb shwgrph2
  9480                              <1> 	showgraphicsdone:
  9481 00007967 C3                  <1> 		ret
  9482                              <1> 	
  9483                              <1> putpixel: ;color in si, point is (dx,cx)
  9484                              <1> 		;destroys edi, ebx, eax
  9485 00007968 6650                <1> 	push ax
  9486 0000796A 6653                <1> 	push bx
  9487 0000796C 31C0                <1> 	xor eax, eax
  9488 0000796E 31DB                <1> 	xor ebx, ebx
  9489 00007970 31FF                <1> 	xor edi, edi
  9490 00007972 668B1D[70520000]    <1> 	mov bx, [resolutiony]
  9491 00007979 66A1[6E520000]      <1> 	mov ax, [resolutionx]
  9492 0000797F 6639C2              <1> 	cmp dx, ax
  9493 00007982 7720                <1> 	ja .doneput
  9494 00007984 66D1E0              <1> 	shl ax, 1
  9495 00007987 6639D9              <1> 	cmp cx, bx
  9496 0000798A 7718                <1> 	ja .doneput
  9497 0000798C 6689CB              <1> 	mov bx, cx
  9498 0000798F 52                  <1> 	push edx
  9499 00007990 F7E3                <1> 	mul ebx
  9500 00007992 5A                  <1> 	pop edx
  9501 00007993 6601D7              <1> 	add di, dx
  9502 00007996 6601D7              <1> 	add di, dx
  9503 00007999 01C7                <1> 	add edi, eax
  9504 0000799B 033D[84520000]      <1> 	add edi, [physbaseptr]
  9505 000079A1 668937              <1> 	mov [edi], si
  9506                              <1> .doneput:
  9507 000079A4 665B                <1> 	pop bx
  9508 000079A6 6658                <1> 	pop ax
  9509 000079A8 C3                  <1> 	ret
  9510                              <1> 	
  9511                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
  9512 000079A9 31FF                <1> 	xor edi, edi
  9513 000079AB 31C0                <1> 	xor eax, eax
  9514 000079AD 31DB                <1> 	xor ebx, ebx
  9515 000079AF 668B1D[5C530000]    <1> 	mov bx, [resolutionx2]
  9516 000079B6 6689D7              <1> 	mov di, dx
  9517 000079B9 6601D7              <1> 	add di, dx
  9518 000079BC 6689C8              <1> 	mov ax, cx
  9519 000079BF F7E3                <1> 	mul ebx
  9520 000079C1 01C7                <1> 	add edi, eax
  9521 000079C3 033D[84520000]      <1> 	add edi, [physbaseptr]
  9522 000079C9 C3                  <1> 	ret
  9523                              <1> 
  9524 000079CA 00                  <1> 	mouseon db 0
  9525 000079CB 0000                <1> 	icon dw 0	;pointer to icon
  9526 000079CD 00000000            <1> 	codepointer dd 0 ;pointer to code
  9527 000079D1 00                  <1> 	iconselected db 0
  9528                                  %endif
  9529                                  %ifdef network.included
  9530                                  	%include "source/network.asm"
  9531                              <1> %ifdef rtl8139.included
  9532                              <1> 	%include "source/drivers/network/rtl8139.asm"
  9533                              <2> ;RTL8139 NIC DRIVER
  9534                              <2> rtl8139:
  9535                              <2> .RBSTART equ 0x30
  9536                              <2> .IMR equ 0x3C
  9537                              <2> .ISR equ 0x3E
  9538                              <2> .CMD equ 0x37
  9539                              <2> .RCR equ 0x44
  9540                              <2> .CONFIG1 equ 0x52
  9541                              <2> .TSD0 equ 0x10
  9542                              <2> .TSAD0 equ 0x20
  9543                              <2> .init:	;should find card, get mac, and initialize card
  9544 000079D2 31C0                <2> 	xor eax, eax
  9545 000079D4 A2[285B0000]        <2> 	mov [pcifunction], al
  9546 000079D9 A2[265B0000]        <2> 	mov [pcibus], al
  9547 000079DE A2[275B0000]        <2> 	mov [pcidevice], al
  9548 000079E3 B002                <2> 	mov al, 0x02 ;type code
  9549 000079E5 A2[AB5B0000]        <2> 	mov [pcitype], al
  9550 000079EA B8EC103981          <2> 	mov eax, 0x813910EC
  9551 000079EF A3[2B5B0000]        <2> 	mov [pcidevid], eax
  9552 000079F4 E83AE1FFFF          <2> 	call getpciport
  9553 000079F9 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9554 000079FF 7501                <2> 	jne .initnic
  9555 00007A01 C3                  <2> 	ret
  9556                              <2> .initnic:
  9557 00007A02 8915[7C7B0000]      <2> 	mov [.basenicaddr], edx
  9558 00007A08 89D1                <2> 	mov ecx, edx
  9559 00007A0A E853B4FFFF          <2> 	call showhex	;for debugging, please remove
  9560 00007A0F BE[D4AE0100]        <2> 	mov esi, rbuffstart
  9561 00007A14 B900200000          <2> 	mov ecx, 8192
  9562 00007A19 31C0                <2> 	xor eax, eax
  9563                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  9564 00007A1B 8806                <2> 	mov [esi], al
  9565 00007A1D 46                  <2> 	inc esi
  9566 00007A1E 6649                <2> 	dec cx
  9567 00007A20 6681F90000          <2> 	cmp cx, 0
  9568 00007A25 75F4                <2> 	jne .clearrbuff
  9569                              <2> .findmac:
  9570 00007A27 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9571 00007A2D BF[817B0000]        <2> 	mov edi, .mac
  9572 00007A32 B906000000          <2> 	mov ecx, 6
  9573                              <2> .macputloop:
  9574 00007A37 EC                  <2> 	in al, dx
  9575 00007A38 8807                <2> 	mov [edi], al
  9576 00007A3A 47                  <2> 	inc edi
  9577 00007A3B 42                  <2> 	inc edx
  9578 00007A3C 49                  <2> 	dec ecx
  9579 00007A3D 75F8                <2> 	jnz .macputloop
  9580 00007A3F B9[817B0000]        <2> 	mov ecx, .mac
  9581 00007A44 E8D5080000          <2> 	call showmac
  9582 00007A49 E817000000          <2> 	call .resetnic
  9583 00007A4E BE[877B0000]        <2> 	mov esi, .name
  9584 00007A53 E8B3A2FFFF          <2> 	call print
  9585 00007A58 BE[907B0000]        <2> 	mov esi, .initmsg
  9586 00007A5D E8A9A2FFFF          <2> 	call print
  9587 00007A62 31DB                <2> 	xor ebx, ebx
  9588 00007A64 C3                  <2> 	ret
  9589                              <2> .resetnic:
  9590 00007A65 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9591 00007A6B 81C252000000        <2> 	add edx, .CONFIG1
  9592 00007A71 30C0                <2> 	xor al, al
  9593 00007A73 EE                  <2> 	out dx, al	;WAKE UP!!!!
  9594 00007A74 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9595 00007A7A 81C237000000        <2> 	add edx, .CMD
  9596 00007A80 B010                <2> 	mov al, 0x10
  9597 00007A82 EE                  <2> 	out dx, al	;Reset
  9598                              <2> .resetnicwait:
  9599 00007A83 EC                  <2> 	in al, dx
  9600 00007A84 A810                <2> 	test al, 0x10
  9601 00007A86 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
  9602 00007A8C 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9603 00007A92 81C230000000        <2> 	add edx, .RBSTART
  9604 00007A98 B8[D4AE0100]        <2> 	mov eax, rbuffstart
  9605 00007A9D 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
  9606 00007AA2 EF                  <2> 	out dx, eax	;give nic receive buffer location
  9607 00007AA3 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9608 00007AA9 81C23C000000        <2> 	add edx, .IMR
  9609                              <2> 	;in ax, dx
  9610 00007AAF 66B80500            <2> 	mov ax, 5
  9611 00007AB3 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
  9612 00007AB5 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9613 00007ABB 81C244000000        <2> 	add edx, .RCR
  9614 00007AC1 B802000000          <2> 	mov eax, 000010b ;receive only physical matches
  9615 00007AC6 0580000000          <2> 	add eax, 128 ;enable wrap option
  9616 00007ACB EF                  <2> 	out dx, eax	;recieve packets from all matches
  9617 00007ACC 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9618 00007AD2 81C237000000        <2> 	add edx, .CMD
  9619 00007AD8 B00C                <2> 	mov al, 0x0C
  9620 00007ADA EE                  <2> 	out dx, al	;use transmit and receive
  9621 00007ADB C605[807B0000]01    <2> 	mov byte [.nicconfig], 1
  9622 00007AE2 C3                  <2> 	ret
  9623                              <2> 	
  9624                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  9625 00007AE3 56                  <2> 	push esi
  9626 00007AE4 57                  <2> 	push edi
  9627 00007AE5 803D[807B0000]01    <2> 	cmp byte [.nicconfig], 1
  9628 00007AEC 7410                <2> 	je .sendcachedata
  9629 00007AEE E8DFFEFFFF          <2> 	call .init
  9630 00007AF3 5F                  <2> 	pop edi
  9631 00007AF4 5E                  <2> 	pop esi
  9632 00007AF5 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9633 00007AFB 75E6                <2> 	jne .sendpacket
  9634 00007AFD C3                  <2> 	ret
  9635                              <2> .sendcachedata:
  9636 00007AFE E862FFFFFF          <2> 	call .resetnic
  9637 00007B03 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9638 00007B09 81C220000000        <2> 	add edx, .TSAD0
  9639 00007B0F 5F                  <2> 	pop edi
  9640 00007B10 8B0D[817B0000]      <2> 	mov ecx, [.mac]
  9641 00007B16 894F06              <2> 	mov [edi + 6], ecx
  9642 00007B19 668B0D[857B0000]    <2> 	mov cx, [.mac + 4]
  9643 00007B20 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
  9644 00007B24 89F8                <2> 	mov eax, edi
  9645 00007B26 0500001000          <2> 	add eax, 0x100000 ;base address
  9646 00007B2B EF                  <2> 	out dx, eax	;here's Johnny!
  9647 00007B2C 5E                  <2> 	pop esi
  9648 00007B2D 29FE                <2> 	sub esi, edi
  9649 00007B2F 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9650 00007B35 81C210000000        <2> 	add edx, .TSD0
  9651 00007B3B ED                  <2> 	in eax, dx ;get tsd
  9652 00007B3C 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
  9653 00007B41 01F0                <2> 	add eax, esi ;add length to tsd
  9654 00007B43 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
  9655 00007B48 EF                  <2> 	out dx, eax
  9656                              <2> .checknicownbit:
  9657 00007B49 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9658 00007B4F 81C210000000        <2> 	add edx, .TSD0
  9659 00007B55 ED                  <2> 	in eax, dx
  9660 00007B56 2500200000          <2> 	and eax, 0x2000 ;check own bit
  9661 00007B5B 3D00200000          <2> 	cmp eax, 0x2000
  9662 00007B60 75E7                <2> 	jne .checknicownbit
  9663                              <2> .checknictokbit:
  9664 00007B62 8B15[7C7B0000]      <2> 	mov edx, [.basenicaddr]
  9665 00007B68 81C210000000        <2> 	add edx, .TSD0
  9666 00007B6E ED                  <2> 	in eax, dx
  9667 00007B6F 2500800000          <2> 	and eax, 0x8000	;check tok bit
  9668 00007B74 3D00800000          <2> 	cmp eax, 0x8000
  9669 00007B79 75E7                <2> 	jne .checknictokbit
  9670 00007B7B C3                  <2> 	ret
  9671 00007B7C 00000000            <2> .basenicaddr dd 0
  9672 00007B80 00                  <2> .nicconfig db 0
  9673 00007B81 000000000000        <2> .mac db 0,0,0,0,0,0
  9674 00007B87 52544C383133392000  <2> .name db "RTL8139 ",0
  9675 00007B90 496E697469616C697A- <2> .initmsg db "Initialized",10,0
  9676 00007B99 65640A00            <2>
  9677                              <1> %endif
  9678                              <1> %ifdef rtl8169.included
  9679                              <1> 	%include "source/drivers/network/rtl8169.asm"
  9680                              <2> ;RTL8169 NIC DRIVER
  9681                              <2> rtl8169:
  9682                              <2> ;REGISTERS
  9683                              <2> .CMD equ 0x37
  9684                              <2> .TXPOLL equ 0x38
  9685                              <2> .TCR equ 0x40
  9686                              <2> .RCR equ 0x44
  9687                              <2> .IMR equ 0x3C
  9688                              <2> .ISR equ 0x3E
  9689                              <2> .LOCK equ 0x50
  9690                              <2> .CONFIG1 equ 0x52
  9691                              <2> .TDSAR equ 0x20
  9692                              <2> .RDSAR equ 0xE4
  9693                              <2> .MAXRX equ 0xDA
  9694                              <2> .MAXTX equ 0xEC
  9695                              <2> ;IMPORTANT VALUES
  9696                              <2> .OWN equ 0x80000000
  9697                              <2> .EOR equ 0x40000000
  9698                              <2> .POLLING equ 0x40
  9699                              <2> ;CODE
  9700                              <2> .init:	;should find card, get mac, and initialize card
  9701 00007B9D 31C0                <2> 	xor eax, eax
  9702 00007B9F A2[285B0000]        <2> 	mov [pcifunction], al
  9703 00007BA4 A2[265B0000]        <2> 	mov [pcibus], al
  9704 00007BA9 A2[275B0000]        <2> 	mov [pcidevice], al
  9705 00007BAE B002                <2> 	mov al, 0x02 ;type code
  9706 00007BB0 A2[AB5B0000]        <2> 	mov [pcitype], al
  9707 00007BB5 B8EC106981          <2> 	mov eax, 0x816910EC
  9708 00007BBA A3[2B5B0000]        <2> 	mov [pcidevid], eax
  9709 00007BBF BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
  9710 00007BC4 891D[2F5B0000]      <2> 	mov [pcidevidmask], ebx
  9711 00007BCA E864DFFFFF          <2> 	call getpciport
  9712 00007BCF 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9713 00007BD5 7501                <2> 	jne .initnic
  9714 00007BD7 C3                  <2> 	ret
  9715                              <2> .initnic:	;Here i tried the rtl8139 interface, fuck it
  9716 00007BD8 8915[617D0000]      <2> 	mov [.basenicaddr], edx
  9717 00007BDE 89D1                <2> 	mov ecx, edx
  9718 00007BE0 E87DB2FFFF          <2> 	call showhex	;for debugging, please remove
  9719 00007BE5 BE[D4AE0100]        <2> 	mov esi, rbuffstart
  9720 00007BEA B900200000          <2> 	mov ecx, 8192
  9721 00007BEF 31C0                <2> 	xor eax, eax
  9722                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  9723 00007BF1 8806                <2> 	mov [esi], al
  9724 00007BF3 46                  <2> 	inc esi
  9725 00007BF4 6649                <2> 	dec cx
  9726 00007BF6 6681F90000          <2> 	cmp cx, 0
  9727 00007BFB 75F4                <2> 	jne .clearrbuff
  9728                              <2> .findmac:
  9729 00007BFD 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9730 00007C03 BF[667D0000]        <2> 	mov edi, .mac
  9731 00007C08 B906000000          <2> 	mov ecx, 6
  9732                              <2> .macputloop:
  9733 00007C0D EC                  <2> 	in al, dx
  9734 00007C0E 8807                <2> 	mov [edi], al
  9735 00007C10 47                  <2> 	inc edi
  9736 00007C11 42                  <2> 	inc edx
  9737 00007C12 49                  <2> 	dec ecx
  9738 00007C13 75F8                <2> 	jnz .macputloop
  9739 00007C15 B9[667D0000]        <2> 	mov ecx, .mac
  9740 00007C1A E8FF060000          <2> 	call showmac
  9741 00007C1F E817000000          <2> 	call .resetnic
  9742 00007C24 BE[6C7D0000]        <2> 	mov esi, .name
  9743 00007C29 E8DDA0FFFF          <2> 	call print
  9744 00007C2E BE[757D0000]        <2> 	mov esi, .initmsg
  9745 00007C33 E8D3A0FFFF          <2> 	call print
  9746 00007C38 31DB                <2> 	xor ebx, ebx
  9747 00007C3A C3                  <2> 	ret
  9748                              <2> .resetnic:
  9749 00007C3B 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9750 00007C41 81C237000000        <2> 	add edx, .CMD
  9751 00007C47 B010                <2> 	mov al, 0x10
  9752 00007C49 EE                  <2> 	out dx, al	;Reset
  9753                              <2> .resetnicwait:
  9754 00007C4A EC                  <2> 	in al, dx
  9755 00007C4B A810                <2> 	test al, 0x10
  9756 00007C4D 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
  9757 00007C53 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9758 00007C59 81C250000000        <2> 	add edx, .LOCK
  9759 00007C5F B0C0                <2> 	mov al, 0xC0
  9760 00007C61 EE                  <2> 	out dx, al	;unlock config registers
  9761 00007C62 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9762 00007C68 81C244000000        <2> 	add edx, .RCR
  9763 00007C6E B80FE70000          <2> 	mov eax, 0x0000E70F
  9764 00007C73 EF                  <2> 	out dx, eax	;recieve packets from all matches
  9765 00007C74 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9766 00007C7A 81C240000000        <2> 	add edx, .TCR
  9767 00007C80 B800070003          <2> 	mov eax, 0x03000700
  9768 00007C85 EF                  <2> 	out dx, eax	;set up tcr
  9769 00007C86 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9770 00007C8C 81C2DA000000        <2> 	add edx, .MAXRX
  9771 00007C92 66B8FF1F            <2> 	mov ax, 0x1FFF
  9772 00007C96 66EF                <2> 	out dx, ax	;setup max rx size
  9773 00007C98 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9774 00007C9E 81C2EC000000        <2> 	add edx, .MAXTX
  9775 00007CA4 B03B                <2> 	mov al, 0x3B
  9776 00007CA6 EE                  <2> 	out dx, al	;setup max tx size
  9777 00007CA7 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9778 00007CAD 81C220000000        <2> 	add edx, .TDSAR
  9779 00007CB3 B8[007E0000]        <2> 	mov eax, .txdesc
  9780 00007CB8 EF                  <2> 	out dx, eax
  9781 00007CB9 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9782 00007CBF 81C2E4000000        <2> 	add edx, .RDSAR
  9783 00007CC5 B8[007F0000]        <2> 	mov eax, .rxdesc
  9784 00007CCA EF                  <2> 	out dx, eax
  9785 00007CCB 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9786 00007CD1 81C237000000        <2> 	add edx, .CMD
  9787 00007CD7 B00C                <2> 	mov al, 0x0C
  9788 00007CD9 EE                  <2> 	out dx, al	;use transmit and receive
  9789 00007CDA 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9790 00007CE0 81C250000000        <2> 	add edx, .LOCK
  9791 00007CE6 30C0                <2> 	xor al, al
  9792 00007CE8 EE                  <2> 	out dx, al
  9793 00007CE9 C605[657D0000]01    <2> 	mov byte [.nicconfig], 1
  9794 00007CF0 C3                  <2> 	ret
  9795                              <2> 	
  9796                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  9797 00007CF1 803D[657D0000]01    <2> 	cmp byte [.nicconfig], 1
  9798 00007CF8 7412                <2> 	je .sendcachedata
  9799 00007CFA 56                  <2> 	push esi
  9800 00007CFB 57                  <2> 	push edi
  9801 00007CFC E89CFEFFFF          <2> 	call .init
  9802 00007D01 5F                  <2> 	pop edi
  9803 00007D02 5E                  <2> 	pop esi
  9804 00007D03 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9805 00007D09 75E6                <2> 	jne .sendpacket
  9806 00007D0B C3                  <2> 	ret
  9807                              <2> .sendcachedata:
  9808 00007D0C 8B0D[667D0000]      <2> 	mov ecx, [.mac]
  9809 00007D12 894F06              <2> 	mov [edi + 6], ecx
  9810 00007D15 668B0D[6A7D0000]    <2> 	mov cx, [.mac + 4]
  9811 00007D1C 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
  9812 00007D20 893D[087E0000]      <2> 	mov [.txdesc + 8], edi	;put packet start in tx descriptor
  9813 00007D26 29FE                <2> 	sub esi, edi
  9814 00007D28 668935[007E0000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
  9815 00007D2F 810D[007E0000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
  9816 00007D37 0080                <2>
  9817 00007D39 8B15[617D0000]      <2> 	mov edx, [.basenicaddr]
  9818 00007D3F 81C238000000        <2> 	add edx, .TXPOLL
  9819 00007D45 B040                <2> 	mov al, .POLLING
  9820 00007D47 EE                  <2> 	out dx, al	;set up TX Polling
  9821                              <2> .sendloop:
  9822 00007D48 A1[007E0000]        <2> 	mov eax, [.txdesc]
  9823 00007D4D 89C1                <2> 	mov ecx, eax
  9824 00007D4F E80EB1FFFF          <2> 	call showhex
  9825 00007D54 E871A4FFFF          <2> 	call getchar
  9826 00007D59 A900000080          <2> 	test eax, .OWN
  9827 00007D5E 75E8                <2> 	jnz .sendloop
  9828 00007D60 C3                  <2> 	ret
  9829                              <2> 	
  9830 00007D61 00000000            <2> .basenicaddr dd 0
  9831 00007D65 00                  <2> .nicconfig db 0
  9832 00007D66 000000000000        <2> .mac db 0,0,0,0,0,0
  9833 00007D6C 52544C383136392000  <2> .name db "RTL8169 ",0
  9834 00007D75 496E697469616C697A- <2> .initmsg db "Initialized",10,0
  9835 00007D7E 65640A00            <2>
  9836 00007D82 90<rept>            <2> align 256, nop
  9837                              <2> .txdesc:
  9838 00007E00 00000040            <2> 	dd .EOR	;command
  9839 00007E04 00000000            <2> 	dd 0	;vlan
  9840 00007E08 00000000            <2> 	dd 0	;low buf
  9841 00007E0C 00000000            <2> 	dd 0	;high buf
  9842 00007E10 90<rept>            <2> align 256, nop
  9843                              <2> .rxdesc
  9844 00007F00 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
  9845 00007F04 00000000            <2> 	dd 0	;vlan
  9846 00007F08 [D4AE0100]          <2> 	dd rbuffstart	;low buf
  9847 00007F0C 00000000            <2> 	dd 0	;high buf
  9848                              <1> %endif
  9849                              <1> %ifdef ne2000.included
  9850                              <1> 	%include "source/drivers/network/ne2000.asm"
  9851                              <2> ne2000:
  9852                              <2> ;	PAGE0			PAGE 1			PAGE 2
  9853                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  9854                              <2> ;0	CR		CR		CR		CR		CR		CR
  9855                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  9856                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  9857                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  9858                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  9859                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  9860                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  9861                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  9862                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  9863                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  9864                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  9865                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  9866                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  9867                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  9868                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  9869                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  9870                              <2> .CR equ 0
  9871                              <2> 	.CR.STP	equ 1		;Stop
  9872                              <2> 	.CR.STA equ 2		;Start
  9873                              <2> 	.CR.TXP equ 4		;Transmit
  9874                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  9875                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  9876                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  9877                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  9878                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  9879                              <2> .PSTART equ 1
  9880                              <2> .PSTOP equ 2
  9881                              <2> .BNRY equ 3
  9882                              <2> .ISR equ 7
  9883                              <2> 	.ISR.PRX equ 1		;Packet Received
  9884                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  9885                              <2> 	.ISR.RXE equ 4		;Receive Error
  9886                              <2> 	.ISR.TXE equ 8		;Transmission Error
  9887                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  9888                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  9889                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  9890                              <2> 	.ISR.RST equ 0x80	;Reset status
  9891                              <2> .RSAR0 equ 8
  9892                              <2> .RSAR1 equ 9
  9893                              <2> .RBCR0 equ 0xA
  9894                              <2> .RBCR1 equ 0xB
  9895                              <2> .RCR equ 0xC
  9896                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  9897                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  9898                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  9899                              <2> 	.RCR.AM equ 8		;Accept Multicast
  9900                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  9901                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  9902                              <2> .DCR equ 0xE
  9903                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  9904                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  9905                              <2> 	.DCR.LAS equ 4		;Long Address Select
  9906                              <2> 	.DCR.LS equ 8		;Loopback Select
  9907                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  9908                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  9909                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  9910                              <2> .ASIC equ 0x10
  9911                              <2> .RESET equ 0x1F
  9912                              <2> 
  9913                              <2> .init:
  9914 00007F10 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
  9915 00007F15 31C0                <2> 	xor eax, eax
  9916 00007F17 A2[285B0000]        <2> 	mov [pcifunction], al
  9917 00007F1C A2[265B0000]        <2> 	mov [pcibus], al
  9918 00007F21 A2[275B0000]        <2> 	mov [pcidevice], al
  9919 00007F26 B002                <2> 	mov al, 2 ;type code
  9920 00007F28 A2[AB5B0000]        <2> 	mov [pcitype], al
  9921 00007F2D B8EC102980          <2> 	mov eax, 0x802910EC
  9922 00007F32 A3[2B5B0000]        <2> 	mov [pcidevid], eax
  9923 00007F37 E8F7DBFFFF          <2> 	call getpciport
  9924 00007F3C 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9925 00007F42 7501                <2> 	jne .good0
  9926 00007F44 C3                  <2> 	ret
  9927                              <2> .good0:
  9928 00007F45 8915[0F820000]      <2> 	mov [.basenicaddr], edx
  9929 00007F4B 89D1                <2> 	mov ecx, edx
  9930                              <2> .test:
  9931 00007F4D E854000000          <2> 	call .reset
  9932 00007F52 E87B000000          <2> 	call .stop
  9933 00007F57 89CA                <2> 	mov edx, ecx
  9934 00007F59 B9FF000000          <2> 	mov ecx, 0xFF
  9935 00007F5E E2FE                <2> 	loop $ ;wait for ~100 us
  9936 00007F60 89D1                <2> 	mov ecx, edx
  9937 00007F62 EC                  <2> 	in al, dx
  9938 00007F63 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
  9939 00007F65 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
  9940 00007F67 7410                <2> 	je .good1
  9941 00007F69 89CA                <2> 	mov edx, ecx
  9942 00007F6B 81C207000000        <2> 	add edx, .ISR
  9943 00007F71 EC                  <2> 	in al, dx
  9944 00007F72 2480                <2> 	and al, .ISR.RST
  9945 00007F74 3C80                <2> 	cmp al, .ISR.RST
  9946 00007F76 7401                <2> 	je .good1
  9947 00007F78 C3                  <2> 	ret
  9948                              <2> .good1:
  9949 00007F79 E8E4AEFFFF          <2> call showhex	;for debugging, please remove
  9950 00007F7E E85B000000          <2> 	call .setup
  9951 00007F83 E896030000          <2> call showmac
  9952 00007F88 BE[14820000]        <2> mov esi, .name
  9953 00007F8D E8799DFFFF          <2> call print
  9954 00007F92 BE[1C820000]        <2> mov esi, .initmsg
  9955 00007F97 E86F9DFFFF          <2> call print
  9956 00007F9C C605[13820000]01    <2> 	mov byte [.nicconfig], 1
  9957 00007FA3 31DB                <2> 	xor ebx, ebx
  9958 00007FA5 C3                  <2> 	ret
  9959                              <2> .reset:
  9960 00007FA6 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
  9961 00007FAC 81C21F000000        <2> 	add edx, .RESET
  9962 00007FB2 EC                  <2> 	in al, dx
  9963 00007FB3 EE                  <2> 	out dx, al ;write its contents to itself
  9964 00007FB4 C3                  <2> 	ret
  9965                              <2> .page:
  9966 00007FB5 66C1E00E            <2> 	shl ax, 14
  9967 00007FB9 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
  9968 00007FBF EC                  <2> 	in al, dx
  9969 00007FC0 243F                <2> 	and al, 00111111b
  9970 00007FC2 08E0                <2> 	or al, ah
  9971 00007FC4 EE                  <2> 	out dx, al
  9972 00007FC5 C3                  <2> 	ret
  9973                              <2> .start:
  9974 00007FC6 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
  9975 00007FCC B020                <2> 	mov al, .CR.RD2
  9976 00007FCE B002                <2> 	mov al, .CR.STA
  9977 00007FD0 EE                  <2> 	out dx, al
  9978 00007FD1 C3                  <2> 	ret
  9979                              <2> .stop:
  9980 00007FD2 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
  9981 00007FD8 B020                <2> 	mov al, .CR.RD2
  9982 00007FDA 0C01                <2> 	or al, .CR.STP
  9983 00007FDC EE                  <2> 	out dx, al
  9984 00007FDD C3                  <2> 	ret
  9985                              <2> .setup:
  9986 00007FDE E8EFFFFFFF          <2> 	call .stop
  9987 00007FE3 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
  9988 00007FE9 81C20E000000        <2> 	add edx, .DCR
  9989 00007FEF B040                <2> 	mov al, .DCR.FT1
  9990 00007FF1 0C01                <2> 	or al, .DCR.WTS
  9991 00007FF3 0C08                <2> 	or al, .DCR.LS
  9992 00007FF5 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
  9993 00007FF6 E8B9000000          <2> 	call .getmac
  9994 00007FFB E8D2FFFFFF          <2> 	call .stop
  9995 00008000 30C0                <2> 	xor al, al
  9996 00008002 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
  9997 00008008 81C20A000000        <2> 	add edx, .RBCR0
  9998 0000800E EE                  <2> 	out dx, al
  9999 0000800F 6642                <2> 	inc dx
 10000 00008011 EE                  <2> 	out dx, al ;Clear byte count
 10001 00008012 B800400000          <2> 	mov eax, 16*1024
 10002 00008017 A3[2E820000]        <2> 	mov [.ringstart], eax
 10003 0000801C C1E808              <2> 	shr eax, 8
 10004 0000801F 66A3[2A820000]      <2> 	mov [.pagestart], ax
 10005 00008025 0534000000          <2> 	add eax, 64-2*6
 10006 0000802A A3[2C820000]        <2> 	mov [.pageend], eax
 10007 0000802F C1E008              <2> 	shl eax, 8
 10008 00008032 66A3[32820000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10009 00008038 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10010 0000803E 81C201000000        <2> 	add edx, .PSTART
 10011 00008044 A0[2A820000]        <2> 	mov al, [.pagestart]
 10012 00008049 EE                  <2> 	out dx, al
 10013 0000804A A0[2C820000]        <2> 	mov al, [.pageend]
 10014 0000804F 6642                <2> 	inc dx
 10015 00008051 EE                  <2> 	out dx, al
 10016 00008052 A0[2A820000]        <2> 	mov al, [.pagestart]
 10017 00008057 6642                <2> 	inc dx
 10018 00008059 EE                  <2> 	out dx, al
 10019 0000805A E873FFFFFF          <2> 	call .stop
 10020                              <2> ;INSERT INTERRUPT ENABLE HERE
 10021 0000805F B001                <2> 	mov al, 1
 10022 00008061 E84FFFFFFF          <2> 	call .page
 10023 00008066 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10024 0000806C BF[3C820000]        <2> 	mov edi, .rom
 10025                              <2> .copymactocard:
 10026 00008071 42                  <2> 	inc edx
 10027 00008072 6E                  <2> 	outsb
 10028 00008073 81C702000000        <2> 	add edi, 2
 10029 00008079 81FA06000000        <2> 	cmp edx, 6
 10030 0000807F 76F0                <2> 	jbe .copymactocard
 10031 00008081 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10032 00008087 81C207000000        <2> 	add edx, 7
 10033 0000808D A0[2A820000]        <2> 	mov al, [.pagestart]
 10034 00008092 FEC0                <2> 	inc al
 10035 00008094 EE                  <2> 	out dx, al ;set page in CURR register
 10036                              <2> ;INSERT MULTICAST INIT HERE
 10037 00008095 E838FFFFFF          <2> 	call .stop
 10038 0000809A 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10039 000080A0 81C20C000000        <2> 	add edx, .RCR
 10040 000080A6 B004                <2> 	mov al, .RCR.AB
 10041 000080A8 EE                  <2> 	out dx, al ;accept broadcast
 10042 000080A9 6642                <2> 	inc dx
 10043 000080AB 30C0                <2> 	xor al, al
 10044 000080AD EE                  <2> 	out dx, al ;stop loopback
 10045 000080AE E813FFFFFF          <2> 	call .start
 10046 000080B3 C3                  <2> 	ret
 10047                              <2> .getmac:
 10048 000080B4 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10049 000080BA B020                <2> 	mov al, 0x20
 10050 000080BC 0C02                <2> 	or al, 2
 10051 000080BE EE                  <2> 	out dx, al	;set STA and RD2 bits
 10052 000080BF 6681C20A00          <2> 	add dx, .RBCR0
 10053 000080C4 B010                <2> 	mov al, 16
 10054 000080C6 EE                  <2> 	out dx, al
 10055 000080C7 6642                <2> 	inc dx
 10056 000080C9 30C0                <2> 	xor al, al
 10057 000080CB EE                  <2> 	out dx, al
 10058 000080CC 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10059 000080D2 6681C20800          <2> 	add dx, .RSAR0
 10060 000080D7 EE                  <2> 	out dx, al
 10061 000080D8 6642                <2> 	inc dx
 10062 000080DA EE                  <2> 	out dx, al
 10063 000080DB 668B15[0F820000]    <2> 	mov dx, [.basenicaddr]
 10064 000080E2 B008                <2> 	mov al, 8
 10065 000080E4 0C02                <2> 	or al, 2
 10066 000080E6 EE                  <2> 	out dx, al
 10067 000080E7 668B15[0F820000]    <2> 	mov dx, [.basenicaddr]
 10068 000080EE 6681C21000          <2> 	add dx, .ASIC
 10069 000080F3 B908000000          <2> 	mov ecx, 8
 10070 000080F8 BF[3C820000]        <2> 	mov edi, .rom
 10071 000080FD F3666D              <2> 	rep insw
 10072                              <2> .copymac:
 10073 00008100 BF[3C820000]        <2> 	mov edi, .rom
 10074 00008105 BE[36820000]        <2> 	mov esi, .mac
 10075 0000810A B906000000          <2> 	mov ecx, 6
 10076                              <2> .lpmac:
 10077 0000810F 8A07                <2> 	mov al, [edi]
 10078 00008111 8806                <2> 	mov [esi], al
 10079 00008113 81C702000000        <2> 	add edi, 2
 10080 00008119 46                  <2> 	inc esi
 10081 0000811A E2F3                <2> 	loop .lpmac
 10082 0000811C B9[36820000]        <2> 	mov ecx, .mac
 10083 00008121 C3                  <2> 	ret
 10084                              <2> .sendpacket:
 10085 00008122 803D[13820000]00    <2> 	cmp byte [.nicconfig], 0
 10086 00008129 7512                <2> 	jne .sendit
 10087 0000812B 56                  <2> 	push esi
 10088 0000812C 57                  <2> 	push edi
 10089 0000812D E8DEFDFFFF          <2> 	call .init
 10090 00008132 5F                  <2> 	pop edi
 10091 00008133 5E                  <2> 	pop esi
 10092 00008134 81FB00000000        <2> 	cmp ebx, 0
 10093 0000813A 7401                <2> 	je .sendit
 10094 0000813C C3                  <2> 	ret
 10095                              <2> .sendit: ;packet start in edi, end in esi
 10096 0000813D 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10097                              <2> 	;now the packet start is in esi, end in edi
 10098 0000813F 8B0D[36820000]      <2> 	mov ecx, [.mac]
 10099 00008145 894E06              <2> 	mov [esi + 6], ecx
 10100 00008148 668B0D[3A820000]    <2> 	mov cx, [.mac + 4]
 10101 0000814F 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10102 00008153 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10103 00008159 B020                <2> 	mov al, .CR.RD2
 10104 0000815B 0C02                <2> 	or al, .CR.STA
 10105 0000815D EE                  <2> 	out dx, al ;set RD2 and STA
 10106 0000815E 81C207000000        <2> 	add edx, .ISR ; ISR
 10107 00008164 B040                <2> 	mov al, .ISR.RDC
 10108 00008166 EE                  <2> 	out dx, al ;set RDC flag
 10109 00008167 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10110 0000816D 6681C20A00          <2> 	add dx, .RBCR0
 10111 00008172 89F8                <2> 	mov eax, edi
 10112 00008174 29F0                <2> 	sub eax, esi
 10113 00008176 BB01000000          <2> 	mov ebx, 1
 10114 0000817B 21C3                <2> 	and ebx, eax
 10115 0000817D 81FB01000000        <2> 	cmp ebx, 1
 10116 00008183 7501                <2> 	jne .nofixword
 10117 00008185 40                  <2> 	inc eax
 10118                              <2> .nofixword:
 10119 00008186 89C1                <2> 	mov ecx, eax ;save length in ecx
 10120 00008188 EE                  <2> 	out dx, al
 10121 00008189 86C4                <2> 	xchg al, ah
 10122 0000818B 6642                <2> 	inc dx
 10123 0000818D EE                  <2> 	out dx, al ;send size
 10124 0000818E 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10125 00008194 6681C20800          <2> 	add dx, .RSAR0
 10126 00008199 66A1[2A820000]      <2> 	mov ax, [.pagestart]
 10127 0000819F C1E008              <2> 	shl eax, 8
 10128 000081A2 EE                  <2> 	out dx, al
 10129 000081A3 86C4                <2> 	xchg al, ah
 10130 000081A5 6642                <2> 	inc dx
 10131 000081A7 EE                  <2> 	out dx, al ;send address in NIC memory
 10132 000081A8 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10133 000081AE B010                <2> 	mov al, .CR.RD1
 10134 000081B0 0C02                <2> 	or al, .CR.STA
 10135 000081B2 EE                  <2> 	out dx, al ;set RD and STA
 10136 000081B3 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10137 000081B5 D1E9                <2> 	shr ecx, 1
 10138 000081B7 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10139 000081BD 6681C21000          <2> 	add dx, 0x10
 10140 000081C2 F3666F              <2> 	rep outsw ;Send the packet data
 10141 000081C5 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10142 000081CB 6681C20700          <2> 	add dx, .ISR
 10143                              <2> .chkcopylp:
 10144 000081D0 B440                <2> 	mov ah, .ISR.RDC
 10145 000081D2 EC                  <2> 	in al, dx
 10146 000081D3 20C4                <2> 	and ah, al
 10147 000081D5 80FC40              <2> 	cmp ah, 0x40
 10148 000081D8 75F6                <2> 	jne .chkcopylp	
 10149 000081DA 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10150 000081E0 6681C20400          <2> 	add dx, 4
 10151 000081E5 A0[2A820000]        <2> 	mov al, [.pagestart]
 10152 000081EA EE                  <2> 	out dx, al ;send start address in pages
 10153 000081EB 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10154 000081F1 81C205000000        <2> 	add edx, 0x5
 10155 000081F7 89D8                <2> 	mov eax, ebx
 10156 000081F9 EE                  <2> 	out dx, al
 10157 000081FA 86C4                <2> 	xchg al, ah
 10158 000081FC 6642                <2> 	inc dx
 10159 000081FE EE                  <2> 	out dx, al ;send length
 10160 000081FF 8B15[0F820000]      <2> 	mov edx, [.basenicaddr]
 10161 00008205 B020                <2> 	mov al, 0x20
 10162 00008207 0C04                <2> 	or al, 4
 10163 00008209 0C02                <2> 	or al, 2
 10164 0000820B EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 10165 0000820C 31DB                <2> 	xor ebx, ebx
 10166 0000820E C3                  <2> 	ret
 10167 0000820F 00000000            <2> .basenicaddr dd 0
 10168 00008213 00                  <2> .nicconfig db 0
 10169 00008214 4E45323030302000    <2> .name db "NE2000 ",0
 10170 0000821C 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 10171 00008225 65642E0A00          <2>
 10172                              <2> align 2, nop
 10173 0000822A 0000                <2> .pagestart dw 0
 10174 0000822C 0000                <2> .pageend dw 0
 10175 0000822E 00000000            <2> .ringstart dd 0
 10176 00008232 00000000            <2> .ringend dd 0
 10177 00008236 000000000000        <2> .mac db 0,0,0,0,0,0
 10178 0000823C 00<rept>            <2> .rom times 16 db 0
 10179                              <1> %endif
 10180                              <1> network.init:
 10181                              <1> 	%ifdef rtl8139.included
 10182 0000824C E881F7FFFF          <1> 		call rtl8139.init
 10183                              <1> 	%endif
 10184                              <1> 	%ifdef rtl8169.included
 10185 00008251 E847F9FFFF          <1> 		call rtl8169.init
 10186                              <1> 	%endif
 10187                              <1> 	%ifdef ne2000.included
 10188 00008256 E8B5FCFFFF          <1> 		call ne2000.init
 10189                              <1> 	%endif
 10190 0000825B C3                  <1> 	ret
 10191                              <1> 
 10192                              <1> sendpacket: ;packet start in edi, end in esi
 10193                              <1> 	%ifdef rtl8139.included
 10194 0000825C 57                  <1> 		push edi
 10195 0000825D 56                  <1> 		push esi
 10196 0000825E E880F8FFFF          <1> 		call rtl8139.sendpacket
 10197 00008263 5E                  <1> 		pop esi
 10198 00008264 5F                  <1> 		pop edi
 10199                              <1> 	%endif
 10200                              <1> 	%ifdef rtl8169.included
 10201 00008265 57                  <1> 		push edi
 10202 00008266 56                  <1> 		push esi
 10203 00008267 E885FAFFFF          <1> 		call rtl8169.sendpacket
 10204 0000826C 5E                  <1> 		pop esi
 10205 0000826D 5F                  <1> 		pop edi
 10206                              <1> 	%endif
 10207                              <1> 	%ifdef ne2000.included
 10208 0000826E E8AFFEFFFF          <1> 		call ne2000.sendpacket
 10209                              <1> 	%endif
 10210 00008273 C3                  <1> 	ret
 10211                              <1> 
 10212                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10213 00008274 31C0                <1> 	xor eax, eax
 10214 00008276 31DB                <1> 	xor ebx, ebx
 10215 00008278 31C9                <1> 	xor ecx, ecx
 10216                              <1> .lp:
 10217 0000827A 8A07                <1> 	mov al, [edi]
 10218 0000827C 8A6701              <1> 	mov ah, [edi + 1]
 10219 0000827F 01C3                <1> 	add ebx, eax
 10220 00008281 81C702000000        <1> 	add edi, 2
 10221 00008287 39F7                <1> 	cmp edi, esi
 10222 00008289 72EF                <1> 	jb .lp
 10223 0000828B 66B9FFFF            <1> 	mov cx, 0xFFFF
 10224 0000828F 6689D8              <1> 	mov ax, bx
 10225 00008292 C1EB10              <1> 	shr ebx, 16
 10226 00008295 6601D8              <1> 	add ax, bx
 10227 00008298 6629C1              <1> 	sub cx, ax
 10228 0000829B C3                  <1> 	ret
 10229                              <1> 	
 10230                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10231 0000829C 31DB                <1> 	xor ebx, ebx
 10232 0000829E 31C9                <1> 	xor ecx, ecx
 10233 000082A0 31D2                <1> 	xor edx, edx
 10234                              <1> .mlp:
 10235 000082A2 89F7                <1> 	mov edi, esi
 10236 000082A4 4F                  <1> 	dec edi
 10237                              <1> .lp:
 10238 000082A5 47                  <1> 	inc edi
 10239 000082A6 8A07                <1> 	mov al, [edi]
 10240 000082A8 3C20                <1> 	cmp al, " "
 10241 000082AA 7408                <1> 	je .dnlp
 10242 000082AC 3C00                <1> 	cmp al, 0
 10243 000082AE 7404                <1> 	je .dnlp
 10244 000082B0 3C2E                <1> 	cmp al, "."
 10245 000082B2 75F1                <1> 	jne .lp
 10246                              <1> .dnlp:
 10247 000082B4 30C0                <1> 	xor al, al
 10248 000082B6 8807                <1> 	mov [edi], al
 10249 000082B8 53                  <1> 	push ebx
 10250 000082B9 56                  <1> 	push esi
 10251 000082BA 57                  <1> 	push edi
 10252 000082BB 31FF                <1> 	xor edi, edi
 10253 000082BD E84CADFFFF          <1> 	call cnvrttxt
 10254 000082C2 5E                  <1> 	pop esi
 10255 000082C3 5F                  <1> 	pop edi ;i intentionally switch them
 10256 000082C4 5B                  <1> 	pop ebx
 10257 000082C5 46                  <1> 	inc esi
 10258 000082C6 BF[DE820000]        <1> 	mov edi, ipstr
 10259 000082CB 880C1F              <1> 	mov [edi + ebx], cl
 10260 000082CE 43                  <1> 	inc ebx
 10261 000082CF 81FB04000000        <1> 	cmp ebx, 4
 10262 000082D5 72CB                <1> 	jb .mlp
 10263 000082D7 8B0D[DE820000]      <1> 	mov ecx, [ipstr]
 10264 000082DD C3                  <1> 	ret
 10265 000082DE 00000000            <1> ipstr dd 0
 10266                              <1> showip: 	;put the ip address in ecx
 10267 000082E2 89C8                <1> 	mov eax, ecx
 10268 000082E4 30DB                <1> 	xor bl, bl
 10269                              <1> .lp
 10270 000082E6 3C00                <1> 	cmp al, 0
 10271 000082E8 750B                <1> 	jne .nozeroprint
 10272 000082EA B030                <1> 	mov al, "0"
 10273 000082EC 50                  <1> 	push eax
 10274 000082ED E84E9FFFFF          <1> 	call prcharq
 10275 000082F2 58                  <1> 	pop eax
 10276 000082F3 30C0                <1> 	xor al, al
 10277                              <1> .nozeroprint:
 10278 000082F5 31C9                <1> 	xor ecx, ecx
 10279 000082F7 88C1                <1> 	mov cl, al
 10280 000082F9 E82EACFFFF          <1> 	call showdec
 10281 000082FE C1E808              <1> 	shr eax, 8
 10282 00008301 FEC3                <1> 	inc bl
 10283 00008303 80FB04              <1> 	cmp bl, 4
 10284 00008306 7312                <1> 	jae .done
 10285 00008308 50                  <1> 	push eax
 10286 00008309 6653                <1> 	push bx
 10287 0000830B BE[1B830000]        <1> 	mov esi, .dot
 10288 00008310 E8F699FFFF          <1> 	call print
 10289 00008315 665B                <1> 	pop bx
 10290 00008317 58                  <1> 	pop eax
 10291 00008318 EBCC                <1> 	jmp .lp
 10292                              <1> .done:
 10293 0000831A C3                  <1> 	ret
 10294 0000831B 082E00              <1> .dot db 8,".",0
 10295                              <1> showmac:	;mac begins in [ecx]
 10296 0000831E BE[6E830000]        <1> 	mov esi, macprint
 10297 00008323 89CF                <1> 	mov edi, ecx
 10298 00008325 81C106000000        <1> 	add ecx, 6
 10299                              <1> showmacloop:
 10300 0000832B 8A07                <1> 	mov al, [edi]
 10301 0000832D 8A27                <1> 	mov ah, [edi]
 10302 0000832F C0E804              <1> 	shr al, 4
 10303 00008332 C0E404              <1> 	shl ah, 4
 10304 00008335 C0EC04              <1> 	shr ah, 4
 10305 00008338 0430                <1> 	add al, 48
 10306 0000833A 3C39                <1> 	cmp al, "9"
 10307 0000833C 7606                <1> 	jbe .goodal
 10308 0000833E 2C30                <1> 	sub al, 48
 10309 00008340 2C0A                <1> 	sub al, 0xA
 10310 00008342 0441                <1> 	add al, "A"
 10311                              <1> .goodal:
 10312 00008344 80C430              <1> 	add ah, 48
 10313 00008347 80FC39              <1> 	cmp ah, "9"
 10314 0000834A 7609                <1> 	jbe .goodah
 10315 0000834C 80EC30              <1> 	sub ah, 48
 10316 0000834F 80EC0A              <1> 	sub ah, 0xA
 10317 00008352 80C441              <1> 	add ah, "A"
 10318                              <1> .goodah:
 10319 00008355 668906              <1> 	mov [esi], ax
 10320 00008358 81C603000000        <1> 	add esi, 3
 10321 0000835E 47                  <1> 	inc edi
 10322 0000835F 39CF                <1> 	cmp edi, ecx
 10323 00008361 72C8                <1> 	jb showmacloop
 10324 00008363 BE[6E830000]        <1> 	mov esi, macprint
 10325 00008368 E89E99FFFF          <1> 	call print
 10326 0000836D C3                  <1> 	ret
 10327                              <1> 	
 10328 0000836E 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10329 00008377 30303A30303A303020- <1>
 10330 00008380 00                  <1>
 10331 00008381 00000000            <1> ethernetend dw 0,0
 10332 00008385 C0A80002            <1> sysip db 192,168,0,2
 10333 00008389 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10334                                  %endif
 10335                                      %include "source/data.asm"
 10336 0000838F 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10337 00008397 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10338 0000839F 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10339 000083A8 6E640A00            <1>
 10340 000083AC 757365726E616D653A- <1> 	userask db "username:",0
 10341 000083B5 00                  <1>
 10342 000083B6 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10343 000083BF 00                  <1>
 10344 000083C0 40                  <1> 	computer db "@"
 10345                              <1> %ifdef io.serial
 10346                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10347                              <1> %else
 10348 000083C1 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10349 000083CA 00                  <1>
 10350                              <1> %endif
 10351 000083CB 5D242000            <1> 	endprompt db "]$ ",0
 10352 000083CF 0D                  <1> 	crlf 	db  13
 10353 000083D0 0A00                <1> 	line	db	10,0
 10354                              <1> 	userlst:
 10355 000083D2 726F6F7400          <1> 			db "root",0
 10356 000083D7 617765736F6D65706F- <1> 			db "awesomepower",0
 10357 000083E0 77657200            <1>
 10358 000083E4 7573657200          <1> 			db "user",0
 10359 000083E9 70617373776F726400  <1> 			db "password",0
 10360 000083F2 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10361 000083F4 00                  <1> 			db 0
 10362                              <1> 	userlstend:
 10363                              <1> 	
 10364                              <1> %ifdef io.serial
 10365                              <1> %else
 10366 000083F4 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 10367                              <1> fontend:
 10368                              <1> %endif
 10369                              <1> osend:	;this is the end of the operating system's space on disk
 10370                                      %include "build/fileindex.asm"
 10371                              <1> diskfileindex:
 10372 000093F5 617267746573742E65- <1> db "argtest.elf",0
 10373 000093FE 6C6600              <1>
 10374 00009401 4B000000            <1> dd (f0-$$)/512
 10375 00009405 06010000            <1> dd (f1-f0)/512
 10376 00009409 6261636B67726F756E- <1> db "background.bmp",0
 10377 00009412 642E626D7000        <1>
 10378 00009418 51010000            <1> dd (f1-$$)/512
 10379 0000941C 01140000            <1> dd (f2-f1)/512
 10380 00009420 626F6F742E736800    <1> db "boot.sh",0
 10381 00009428 52150000            <1> dd (f2-$$)/512
 10382 0000942C 01000000            <1> dd (f3-f2)/512
 10383 00009430 63686172746573742E- <1> db "chartest.elf",0
 10384 00009439 656C6600            <1>
 10385 0000943D 53150000            <1> dd (f3-$$)/512
 10386 00009441 26010000            <1> dd (f4-f3)/512
 10387 00009445 646F73746573742E63- <1> db "dostest.com",0
 10388 0000944E 6F6D00              <1>
 10389 00009451 79160000            <1> dd (f4-$$)/512
 10390 00009455 01000000            <1> dd (f5-f4)/512
 10391 00009459 6578656300          <1> db "exec",0
 10392 0000945E 7A160000            <1> dd (f5-$$)/512
 10393 00009462 01000000            <1> dd (f6-f5)/512
 10394 00009466 66696E616C636F756E- <1> db "finalcount.snd",0
 10395 0000946F 742E736E6400        <1>
 10396 00009475 7B160000            <1> dd (f6-$$)/512
 10397 00009479 01000000            <1> dd (f7-f6)/512
 10398 0000947D 666F726B00          <1> db "fork",0
 10399 00009482 7C160000            <1> dd (f7-$$)/512
 10400 00009486 01000000            <1> dd (f8-f7)/512
 10401 0000948A 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10402 00009493 642E656C6600        <1>
 10403 00009499 7D160000            <1> dd (f8-$$)/512
 10404 0000949D D6010000            <1> dd (f9-f8)/512
 10405 000094A1 696E7400            <1> db "int",0
 10406 000094A5 53180000            <1> dd (f9-$$)/512
 10407 000094A9 01000000            <1> dd (f10-f9)/512
 10408 000094AD 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
 10409 000094B6 2E736E6400          <1>
 10410 000094BB 54180000            <1> dd (f10-$$)/512
 10411 000094BF 01000000            <1> dd (f11-f10)/512
 10412 000094C3 6D6172696F2E736E64- <1> db "mario.snd",0
 10413 000094CC 00                  <1>
 10414 000094CD 55180000            <1> dd (f11-$$)/512
 10415 000094D1 01000000            <1> dd (f12-f11)/512
 10416 000094D5 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10417 000094DE 626D7000            <1>
 10418 000094E2 56180000            <1> dd (f12-$$)/512
 10419 000094E6 B0020000            <1> dd (f13-f12)/512
 10420 000094EA 736F6C6C65726F732E- <1> db "solleros.txt",0
 10421 000094F3 74787400            <1>
 10422 000094F7 061B0000            <1> dd (f13-$$)/512
 10423 000094FB 01000000            <1> dd (f14-f13)/512
 10424 000094FF 736F6E676F74696D65- <1> db "songotime.snd",0
 10425 00009508 2E736E6400          <1>
 10426 0000950D 071B0000            <1> dd (f14-$$)/512
 10427 00009511 01000000            <1> dd (f15-f14)/512
 10428 00009515 73736500            <1> db "sse",0
 10429 00009519 081B0000            <1> dd (f15-$$)/512
 10430 0000951D 02000000            <1> dd (f16-f15)/512
 10431 00009521 737464696F74657374- <1> db "stdiotest.elf",0
 10432 0000952A 2E656C6600          <1>
 10433 0000952F 0A1B0000            <1> dd (f16-$$)/512
 10434 00009533 27010000            <1> dd (f17-f16)/512
 10435 00009537 74656C7900          <1> db "tely",0
 10436 0000953C 311C0000            <1> dd (f17-$$)/512
 10437 00009540 01000000            <1> dd (f18-f17)/512
 10438 00009544 74696D65746573742E- <1> db "timetest.elf",0
 10439 0000954D 656C6600            <1>
 10440 00009551 321C0000            <1> dd (f18-$$)/512
 10441 00009555 04010000            <1> dd (f19-f18)/512
 10442 00009559 7475746F7269616C2E- <1> db "tutorial.sh",0
 10443 00009562 736800              <1>
 10444 00009565 361D0000            <1> dd (f19-$$)/512
 10445 00009569 03000000            <1> dd (f20-f19)/512
 10446 0000956D 756E667300          <1> db "unfs",0
 10447 00009572 391D0000            <1> dd (f20-$$)/512
 10448 00009576 02000000            <1> dd (f21-f20)/512
 10449 0000957A 766963746F72792E77- <1> db "victory.wav",0
 10450 00009583 617600              <1>
 10451 00009586 3B1D0000            <1> dd (f21-$$)/512
 10452 0000958A 16000000            <1> dd (f22-f21)/512
 10453 0000958E 5F696D672E62696E00  <1> db "_img.bin",0
 10454 00009597 511D0000            <1> dd (f22-$$)/512
 10455 0000959B D7020000            <1> dd (f23-f22)/512
 10456                              <1> enddiskfileindex:
 10457                              <1> 
 10458                                      %include "source/bss.asm"
 10459 0000959F 90                  <1> align 4, nop
 10460                              <1> bssstart: equ $
 10461                              <1> guion equ bssstart
 10462                              <1> DriveNumber equ guion + 1
 10463                              <1> lbaad equ DriveNumber + 1
 10464                              <1> memlistbuf equ lbaad + 4
 10465                              <1> memlistend equ memlistbuf + 576
 10466                              <1> bsscopy equ memlistend
 10467                              <1> initialstack equ bsscopy
 10468                              <1> stackend equ initialstack + 4000
 10469                              <1> fileindex: equ stackend + 96
 10470                              <1> fileindexend: equ fileindex + 1024
 10471                              <1> previousstack equ fileindexend
 10472                              <1> lastfolderloc equ previousstack + 4
 10473                              <1> currentfolderloc equ lastfolderloc + 4
 10474                              <1> currentfolder equ currentfolderloc + 4
 10475                              <1> currentfolderend equ currentfolder + 512
 10476                              <1> uid equ currentfolderend
 10477                              <1> ranboot equ uid + 4
 10478                              <1> IFON equ ranboot + 1
 10479                              <1> IFTRUE equ IFON + 1
 10480                              <1> BATCHPOS equ IFTRUE + 100
 10481                              <1> BATCHISON equ BATCHPOS + 4
 10482                              <1> LOOPON equ BATCHISON + 1
 10483                              <1> LOOPPOS	equ LOOPON + 1
 10484                              <1> variables: equ LOOPPOS + 4
 10485                              <1> varend: equ variables + 4096
 10486                              <1> buftxt2: equ varend
 10487                              <1> buftxt: equ buftxt2 + 1024
 10488                              <1> buftxtend: equ buftxt + 1024
 10489                              <1> buf2: equ buftxtend
 10490                              <1> numbuf: equ buf2 + 20
 10491                              <1> %ifdef io.serial
 10492                              <1> 	lastcommandpos equ numbuf + 1
 10493                              <1> %else
 10494                              <1> 	%ifdef gui.included
 10495                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10496                              <1> 		graphicstableend equ graphicstable + 200h
 10497                              <1> 		%ifdef gui.background
 10498                              <1> 			backgroundbuffer equ graphicstableend
 10499                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10500                              <1> 			mousecolorbuf equ backgroundbufferend
 10501                              <1> 		%else
 10502                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10503                              <1> 		%endif
 10504                              <1> 		mcolorend equ mousecolorbuf + 256
 10505                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 10506                              <1> 		videobufend	equ videobuf + 210*65*2
 10507                              <1> 		videobuf2 equ videobufend
 10508                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 10509                              <1> 	%else
 10510                              <1> 		videobuf equ numbuf + 1
 10511                              <1> 		videobufend equ videobuf + 80*30*2
 10512                              <1> 		videobuf2 equ videobufend
 10513                              <1> 		videobuf2end equ videobuf2 + 160*64*2
 10514                              <1> 	%endif
 10515                              <1> 	lastcommandpos: equ videobuf2end
 10516                              <1> %endif
 10517                              <1> 	commandbufpos: equ lastcommandpos + 4
 10518                              <1> 	commandlistentries: equ commandbufpos + 4
 10519                              <1> 	commandsentered: equ commandlistentries + 4
 10520                              <1> 	commandbuf: equ commandsentered + 4
 10521                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10522                              <1> %ifdef network.included
 10523                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10524                              <1> 	rbuffend equ rbuffstart + 8212
 10525                              <1> %else
 10526                              <1> 	rbuffstart equ commandbufend
 10527                              <1> 	rbuffend equ commandbufend
 10528                              <1> %endif
 10529                              <1> %ifdef threads.included
 10530                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 10531                              <1> 	threadlistend: equ threadlist + 1024*4
 10532                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10533                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 10534                              <1> 	bssend equ stack1 + 1024*1024
 10535                              <1> %else
 10536                              <1> 	bssend equ rbuffend
 10537                              <1> %endif
 10538                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10539                                      %include "build/files.asm"
 10540 000095A0 00<rept>            <1> align 512,db 0
 10541                              <1> f0:
 10542 000095A0 <incbin>            <1> incbin "included/argtest.elf"
 10543 0002A0F2 00<rept>            <1> align 512,db 0
 10544                              <1> f1:
 10545 0002A0F2 <incbin>            <1> incbin "included/background.bmp"
 10546 002AA246 00<rept>            <1> align 512,db 0
 10547                              <1> f2:
 10548 002AA246 <incbin>            <1> incbin "included/boot.sh"
 10549 002AA4C0 00<rept>            <1> align 512,db 0
 10550                              <1> f3:
 10551 002AA4C0 <incbin>            <1> incbin "included/chartest.elf"
 10552 002CF0DB 00<rept>            <1> align 512,db 0
 10553                              <1> f4:
 10554 002CF0DB <incbin>            <1> incbin "included/dostest.com"
 10555 002CF32B 00<rept>            <1> align 512,db 0
 10556                              <1> f5:
 10557 002CF32B <incbin>            <1> incbin "included/exec"
 10558 002CF4E9 00<rept>            <1> align 512,db 0
 10559                              <1> f6:
 10560 002CF4E9 <incbin>            <1> incbin "included/finalcount.snd"
 10561 002CF702 00<rept>            <1> align 512,db 0
 10562                              <1> f7:
 10563 002CF702 <incbin>            <1> incbin "included/fork"
 10564 002CF962 00<rept>            <1> align 512,db 0
 10565                              <1> f8:
 10566 002CF962 <incbin>            <1> incbin "included/helloworld.elf"
 10567 0030A5E3 00<rept>            <1> align 512,db 0
 10568                              <1> f9:
 10569 0030A5E3 <incbin>            <1> incbin "included/int"
 10570 0030A7A9 00<rept>            <1> align 512,db 0
 10571                              <1> f10:
 10572 0030A7A9 <incbin>            <1> incbin "included/lostwoods.snd"
 10573 0030A856 00<rept>            <1> align 512,db 0
 10574                              <1> f11:
 10575 0030A856 <incbin>            <1> incbin "included/mario.snd"
 10576 0030AA3A 00<rept>            <1> align 512,db 0
 10577                              <1> f12:
 10578 0030AA3A <incbin>            <1> incbin "included/solleros.bmp"
 10579 00360BE6 00<rept>            <1> align 512,db 0
 10580                              <1> f13:
 10581 00360BE6 <incbin>            <1> incbin "included/solleros.txt"
 10582 00360D74 00<rept>            <1> align 512,db 0
 10583                              <1> f14:
 10584 00360D74 <incbin>            <1> incbin "included/songotime.snd"
 10585 00360E4A 00<rept>            <1> align 512,db 0
 10586                              <1> f15:
 10587 00360E4A <incbin>            <1> incbin "included/sse"
 10588 003612A8 00<rept>            <1> align 512,db 0
 10589                              <1> f16:
 10590 003612A8 <incbin>            <1> incbin "included/stdiotest.elf"
 10591 00386043 00<rept>            <1> align 512,db 0
 10592                              <1> f17:
 10593 00386043 <incbin>            <1> incbin "included/tely"
 10594 003863C7 00<rept>            <1> align 512,db 0
 10595                              <1> f18:
 10596 003863C7 <incbin>            <1> incbin "included/timetest.elf"
 10597 003A6A3D 00<rept>            <1> align 512,db 0
 10598                              <1> f19:
 10599 003A6A3D <incbin>            <1> incbin "included/tutorial.sh"
 10600 003A7152 00<rept>            <1> align 512,db 0
 10601                              <1> f20:
 10602 003A7152 <incbin>            <1> incbin "included/unfs"
 10603                              <1> align 512,db 0
 10604                              <1> f21:
 10605 003A7152 <incbin>            <1> incbin "included/victory.wav"
 10606 003AA148 00<rept>            <1> align 512,db 0
 10607                              <1> f22:
 10608 003AA148 <incbin>            <1> incbin "included/_img.bin"
 10609                              <1> align 512,db 0
 10610                              <1> f23:
