     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> %define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 00010000            <1> dd 256	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[9D89]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[9E89]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[9C89]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[A289]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[E28B]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[A289]          <1> 	sub di, memlistbuf
   177 00000075 893E[E28B]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[7E03]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[8603]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[8003]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[8803]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[8303]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[8B03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[E48D0300]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[7603]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[7803]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[7B03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[8E03]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[9603]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[9E03]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[A603]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[9003]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[9803]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[A003]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[A803]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[9303]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[9B03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[A303]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[AB03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[AE03]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[B603]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[B003]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[B803]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[B303]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[BB03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[64030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[5A03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[BC030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[6003]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[5803]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[5E03]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[E48D0300]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[849D0300]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E8BF5F0000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[32AE1500]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[E48D0300]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[A2890000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[E28B0000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[9C890000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[62570000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[62570000]      <1> 	mov [physbaseptr], edi
   337 00000237 E903650000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E9BD280000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[4E4E0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9BC000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E886000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F849E580000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[3A670000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F8425640000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[3A670000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F8486000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F8579000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E96E000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[E49D0300]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[E49D0300]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[849D0300]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E93C290000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000031C E92E000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487                              <1> 	cli
   488                              <1> 	pusha
   489                              <1> 	cmp byte [SoundBlaster], 1
   490                              <1> 	je near sblaster.cont
   491                              <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000321 50                  <1> 	push eax
   496 00000322 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 00000327 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 0000032D 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000332 720B                <1> 	jb nonanosecondrollover
   500 00000334 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000033A 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 0000033F A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000344 58                  <1> 	pop eax
   515 00000345 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000346 61                  <1> 	popa
   519                              <1> handled3:
   520 00000347 FB                  <1> 	sti
   521                              <1> handled:
   522 00000348 50                  <1> 	push eax
   523 00000349 B020                <1> 	mov al, 0x20
   524 0000034B E620                <1> 	out 0x20, al
   525 0000034D 58                  <1> 	pop eax
   526 0000034E CF                  <1> 	iret
   527                              <1> handled4:
   528 0000034F 50                  <1> 	push eax
   529 00000350 B020                <1> 	mov al, 0x20
   530 00000352 E6A0                <1> 	out 0xA0, al
   531 00000354 E620                <1> 	out 0x20, al
   532 00000356 58                  <1> 	pop eax
   533 00000357 CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 00000358 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000035A 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 0000035E FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000360 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000364 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000366 0000                <1> 	dw 0			; base 15:0
   547 00000368 00                  <1> 	db 0			; base 23:16
   548 00000369 00                  <1> 	db 0			; type
   549 0000036A 00                  <1> 	db 0			; limit 19:16, flags
   550 0000036B 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 0000036C FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 0000036E 0000                <1> 	dw 0			; base for this one is always 0
   555 00000370 00                  <1> 	db 0
   556 00000371 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 00000372 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 00000373 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 00000374 0200                <1> gdts:	dw 2;(stackend)/4096
   561 00000376 0000                <1> 	dw 0
   562 00000378 00                  <1> 	db 0
   563 00000379 92                  <1> 	db 0x92
   564 0000037A CF                  <1> 	db 0xCF
   565 0000037B 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 0000037C FFFF                <1> gdt2:	dw 0xFFFF
   569 0000037E 0000                <1> 	dw 0			; (base gets set above)
   570 00000380 00                  <1> 	db 0
   571 00000381 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 00000382 CF                  <1> 	db 0xCF
   573 00000383 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 00000384 FFFF                <1> gdt3:	dw 0xFFFF
   577 00000386 0000                <1> 	dw 0			; (base gets set above)
   578 00000388 00                  <1> 	db 0
   579 00000389 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 0000038A CF                  <1> 	db 0xCF
   581 0000038B 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 0000038C FFFF                <1> gdt4:	dw 0xFFFF
   584 0000038E 0000                <1> 	dw 0			; (base gets set above)
   585 00000390 00                  <1> 	db 0
   586 00000391 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 00000392 CF                  <1> 	db 0xCF
   588 00000393 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 00000394 FFFF                <1> gdt5:	dw 0xFFFF
   592 00000396 0000                <1> 	dw 0			; (base gets set above)
   593 00000398 00                  <1> 	db 0
   594 00000399 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 0000039A CF                  <1> 	db 0xCF
   596 0000039B 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 0000039C FFFF                <1> gdtv8086: dw 0xFFFF
   599 0000039E 0000                <1> 	dw 0
   600 000003A0 00                  <1> 	db 0
   601 000003A1 9A                  <1> 	db 0x9A
   602 000003A2 8F                  <1> 	db 0x8F
   603 000003A3 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003A4 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003A6 0000                <1> 	dw 0
   607 000003A8 00                  <1> 	db 0
   608 000003A9 92                  <1> 	db 0x92
   609 000003AA 8F                  <1> 	db 0x8F
   610 000003AB 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003AC 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003AE 0000                <1> 	dw 0
   614 000003B0 00                  <1> 	db 0
   615 000003B1 9A                  <1> 	db 0x9A
   616 000003B2 8F                  <1> 	db 0x8F ;16 bit
   617 000003B3 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003B4 0001                <1> gdtdos2:	dw 256
   620 000003B6 0000                <1> 	dw 0
   621 000003B8 00                  <1> 	db 0
   622 000003B9 92                  <1> 	db 0x92
   623 000003BA 8F                  <1> 	db 0x8F ;16 bit
   624 000003BB 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003BC [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003C4 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003CC [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003D4 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003DC [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003E4 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003EC [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003F4 [310D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003FC [3D0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000404 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000040C [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000414 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000041C [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000424 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000042C [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000434 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000043C [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000444 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000044C [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000454 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000045C [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000464 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000046C [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000474 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000047C [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000484 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000048C [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000494 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000049C [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004A4 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004AC [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004B4 [510E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004BC [C429]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004C4 [C829]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004CC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004D4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004DC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004E4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004EC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 000004F4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 000004FC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000504 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000050C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000514 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000051C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000524 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000052C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000534 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 0000053C [D51B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000544 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000054C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000554 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000055C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000564 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000056C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000574 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000057C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000584 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000058C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000594 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000059C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005A4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005AC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005B4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005BC [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005C4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005CC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005D4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005DC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786 000005E4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 000005EC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 000005F4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 000005FC [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000604 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 0000060C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000614 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 0000061C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000624 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 0000062C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000634 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 0000063C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000644 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000064C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000654 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000065C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000664 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000066C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000674 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000067C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000684 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000068C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000694 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000069C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000704 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000070C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000714 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000071C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000724 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000072C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000734 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000073C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000744 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000074C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000754 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000075C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000764 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000076C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000774 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000077C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000784 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000078C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000794 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000079C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000804 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000080C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000814 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000081C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000824 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000082C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000834 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000083C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000844 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000084C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000854 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000085C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000864 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000086C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000874 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000087C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000884 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000088C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000894 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000089C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000904 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000090C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000914 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000091C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000924 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000092C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000934 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000093C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000944 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000094C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000954 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000095C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000964 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000096C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000974 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000097C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000984 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000098C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000994 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000099C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000ABC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AC4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000ACC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AD4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ADC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AE4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000AEC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AF4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000AFC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BBC FA                  <1> 	cli
  1343 00000BBD A3[CF0C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BC2 891D[CB0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BC8 8925[BD0C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BCE BB[C70C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BD3 8B03                <1> 	mov eax, [ebx]
  1350 00000BD5 658903              <1> 	mov [gs:ebx], eax
  1351 00000BD8 81C304000000        <1> 	add ebx, 4
  1352 00000BDE 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1353 00000BE4 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000BE6 EA[ED0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000BED B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000BF0 8ED8                <1> 	mov ds, ax
  1361 00000BF2 8EC0                <1> 	mov es, ax
  1362 00000BF4 8EE0                <1> 	mov fs, ax
  1363 00000BF6 8EE8                <1> 	mov gs, ax
  1364 00000BF8 8ED0                <1> 	mov ss, ax
  1365 00000BFA 66BC[849D0300]      <1> 	mov esp, stackend
  1366 00000C00 0F20C0              <1> 	mov eax, cr0
  1367 00000C03 66A3[C70C]          <1> 	mov [cr0old], eax
  1368 00000C07 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C0D 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C10 EA[150C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C15 8CC8                <1> 	mov ax, cs
  1374 00000C17 8ED8                <1> 	mov ds, ax
  1375 00000C19 8EC0                <1> 	mov es, ax
  1376 00000C1B 8EE0                <1> 	mov fs, ax
  1377 00000C1D 8EE8                <1> 	mov gs, ax
  1378 00000C1F 8ED0                <1> 	mov ss, ax
  1379 00000C21 BC[849D]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C24 B011                <1> 	mov al, 0x11
  1382 00000C26 E620                <1> 	out 0x20, al
  1383 00000C28 E6A0                <1> 	out 0xA0, al
  1384 00000C2A B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C2C E621                <1> 	out 0x21, al
  1386 00000C2E B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C30 E6A1                <1> 	out 0xA1, al
  1388 00000C32 B004                <1> 	mov al, 4
  1389 00000C34 E621                <1> 	out 0x21, al
  1390 00000C36 B002                <1> 	mov al, 2
  1391 00000C38 E6A1                <1> 	out 0xA1, al
  1392 00000C3A B001                <1> 	mov al, 0x1
  1393 00000C3C E621                <1> 	out 0x21, al
  1394 00000C3E B001                <1> 	mov al, 0x1
  1395 00000C40 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C42 0F011E[C10C]        <1> 	lidt [idt_real]
  1398 00000C47 FB                  <1> 	sti
  1399                              <1> 
  1400 00000C48 66A1[CF0C]          <1> 	mov eax, [realmodeeax]
  1401 00000C4C 668B1E[CB0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C51 FF16[D70C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C55 66A3[CF0C]          <1> 	mov [realmodeeax], eax
  1406 00000C59 66891E[CB0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C5E FA                  <1> 	cli
  1409 00000C5F 0F0116[5803]        <1> 	lgdt [gdtr]
  1410 00000C64 0F011E[5E03]        <1> 	lidt [idtr]
  1411 00000C69 0F20C0              <1> 	mov eax, cr0
  1412 00000C6C 0C01                <1> 	or al, 1
  1413 00000C6E 0F22C0              <1> 	mov cr0,eax
  1414 00000C71 EA[760C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000C76 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000C7A 8ED8                <1> 	mov ds, ax
  1420 00000C7C 8EC0                <1> 	mov es, ax
  1421 00000C7E 8EE0                <1> 	mov fs, ax
  1422 00000C80 8ED0                <1> 	mov ss, ax
  1423 00000C82 8B25[BD0C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000C88 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000C8C 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000C8E BB[C70C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000C93 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000C96 8903                <1> 	mov [ebx], eax
  1431 00000C98 81C304000000        <1> 	add ebx, 4
  1432 00000C9E 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CA4 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CA6 E8E2540000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CAB FB                  <1> 	sti
  1437 00000CAC A1[CF0C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CB1 8B1D[CB0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CB7 FF25[D30C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CBD 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CC1 FF03                <1> 	dw 0x3FF
  1444 00000CC3 00000000            <1> 	dd 0
  1445 00000CC7 00000000            <1> cr0old dd 0
  1446 00000CCB 00000000            <1> realmodeebx dd 0
  1447 00000CCF 00000000            <1> realmodeeax dd 0
  1448 00000CD3 00000000            <1> realmodereturn dd 0
  1449 00000CD7 0000                <1> realmodeptr dw 0
  1450 00000CD9 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000CDD C605[8F110000]00    <2>  mov byte [intprob], i
  1462 00000CE4 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000CE9 C605[8F110000]01    <2>  mov byte [intprob], i
  1465 00000CF0 E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000CF5 C605[8F110000]02    <2>  mov byte [intprob], i
  1468 00000CFC E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D01 C605[8F110000]03    <2>  mov byte [intprob], i
  1471 00000D08 E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D0D C605[8F110000]04    <2>  mov byte [intprob], i
  1474 00000D14 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D19 C605[8F110000]05    <2>  mov byte [intprob], i
  1477 00000D20 E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D25 C605[8F110000]06    <2>  mov byte [intprob], i
  1480 00000D2C E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D31 C605[8F110000]07    <2>  mov byte [intprob], i
  1483 00000D38 E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D3D C605[8F110000]08    <2>  mov byte [intprob], i
  1486 00000D44 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D49 C605[8F110000]09    <2>  mov byte [intprob], i
  1489 00000D50 E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D55 C605[8F110000]0A    <2>  mov byte [intprob], i
  1492 00000D5C E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D61 C605[8F110000]0B    <2>  mov byte [intprob], i
  1495 00000D68 E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D6D C605[8F110000]0C    <2>  mov byte [intprob], i
  1498 00000D74 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000D79 C605[8F110000]0D    <2>  mov byte [intprob], i
  1501 00000D80 E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000D85 C605[8F110000]0E    <2>  mov byte [intprob], i
  1504 00000D8C E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000D91 C605[8F110000]0F    <2>  mov byte [intprob], i
  1507 00000D98 E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000D9D C605[8F110000]10    <2>  mov byte [intprob], i
  1510 00000DA4 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DA9 C605[8F110000]11    <2>  mov byte [intprob], i
  1513 00000DB0 E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DB5 C605[8F110000]12    <2>  mov byte [intprob], i
  1516 00000DBC E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DC1 C605[8F110000]13    <2>  mov byte [intprob], i
  1519 00000DC8 E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DCD C605[8F110000]14    <2>  mov byte [intprob], i
  1522 00000DD4 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000DD9 C605[8F110000]15    <2>  mov byte [intprob], i
  1525 00000DE0 E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000DE5 C605[8F110000]16    <2>  mov byte [intprob], i
  1528 00000DEC E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000DF1 C605[8F110000]17    <2>  mov byte [intprob], i
  1531 00000DF8 E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000DFD C605[8F110000]18    <2>  mov byte [intprob], i
  1534 00000E04 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E09 C605[8F110000]19    <2>  mov byte [intprob], i
  1537 00000E10 E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E15 C605[8F110000]1A    <2>  mov byte [intprob], i
  1540 00000E1C E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E21 C605[8F110000]1B    <2>  mov byte [intprob], i
  1543 00000E28 E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E2D C605[8F110000]1C    <2>  mov byte [intprob], i
  1546 00000E34 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E39 C605[8F110000]1D    <2>  mov byte [intprob], i
  1549 00000E40 E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E45 C605[8F110000]1E    <2>  mov byte [intprob], i
  1552 00000E4C E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E51 C605[8F110000]1F    <2>  mov byte [intprob], i
  1555 00000E58 E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E5D FA                  <1> 	cli
  1559 00000E5E 1E                  <1> 	push ds
  1560 00000E5F 06                  <1> 	push es
  1561 00000E60 0FA0                <1> 	push fs
  1562 00000E62 0FA8                <1> 	push gs
  1563 00000E64 16                  <1> 	push ss
  1564 00000E65 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E66 803D[9C890000]00    <1> 	cmp byte [guion], 0
  1567 00000E6D 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000E73 66C705[89110000]08- <1> 	mov word [locunhandy], 8
  1569 00000E7B 00                  <1>
  1570 00000E7C 66C705[8B110000]08- <1> 	mov word [locunhandx], 8
  1571 00000E84 00                  <1>
  1572 00000E85 668B1D[206E0000]    <1> 	mov bx, [background]
  1573 00000E8C 66891D[8D110000]    <1> 	mov [backgroundcache], bx
  1574 00000E93 C605[3E580000]01    <1> 	mov byte [mousedisabled],1
  1575 00000E9A 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000E9E 66891D[206E0000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000EA5 89E6                <1> 	mov esi, esp
  1580 00000EA7 8935[7D110000]      <1> 	mov [espfirst], esi
  1581 00000EAD 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EB3 8935[79110000]      <1> 	mov [esploc], esi
  1583 00000EB9 BE[9E110000]        <1> 	mov esi, unhandmsg
  1584 00000EBE 8935[81110000]      <1> 	mov [esiloc], esi
  1585 00000EC4 31C9                <1> 	xor ecx, ecx
  1586 00000EC6 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1587 00000ECC BB[6D150000]        <1> 	mov ebx, errortypes
  1588 00000ED1 C1E102              <1> 	shl ecx, 2
  1589 00000ED4 01CB                <1> 	add ebx, ecx
  1590 00000ED6 81FB[AD150000]      <1> 	cmp ebx, errortypesend
  1591 00000EDC 7205                <1> 	jb gooderrortype
  1592 00000EDE BB[AD150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000EE3 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000EE5 803D[9C890000]00    <1> 	cmp byte [guion], 0
  1597 00000EEC 0F842D000000        <1> 	je near errortext
  1598 00000EF2 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1599 00000EF9 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1600 00000F00 66B80100            <1> 	mov ax, 1
  1601 00000F04 6631DB              <1> 	xor bx, bx
  1602 00000F07 E869650000          <1> 	call showstring2
  1603 00000F0C 66890D[89110000]    <1> 	mov [locunhandy], cx
  1604 00000F13 668915[8B110000]    <1> 	mov [locunhandx], dx
  1605 00000F1A E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F1F E8070E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F24 31C9                <1> 	xor ecx, ecx
  1611 00000F26 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1612 00000F2C E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F31 8B35[79110000]      <1> 	mov esi, [esploc]
  1615 00000F37 39E6                <1> 	cmp esi, esp
  1616 00000F39 7216                <1> 	jb donedump
  1617 00000F3B 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F3E 81EE04000000        <1> 	sub esi, 4
  1619 00000F44 8935[79110000]      <1> 	mov [esploc], esi
  1620 00000F4A E8C3010000          <1> 	call expdump
  1621 00000F4F EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F51 0F20C1              <1> 	mov ecx, cr0
  1624 00000F54 E8B9010000          <1> 	call expdump
  1625 00000F59 0F20D1              <1> 	mov ecx, cr2
  1626 00000F5C E8B1010000          <1> 	call expdump
  1627 00000F61 0F20D9              <1> 	mov ecx, cr3
  1628 00000F64 E8A9010000          <1> 	call expdump
  1629 00000F69 0F20E1              <1> 	mov ecx, cr4
  1630 00000F6C E8A1010000          <1> 	call expdump
  1631 00000F71 0F00C9              <1> 	str ecx
  1632 00000F74 E899010000          <1> 	call expdump
  1633 00000F79 0F010D[98110000]    <1> 	sidt [igdtcache]
  1634 00000F80 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000F86 E887010000          <1> 	call expdump
  1636 00000F8B 0F0105[98110000]    <1> 	sgdt [igdtcache]
  1637 00000F92 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000F98 E875010000          <1> 	call expdump
  1639 00000F9D 0F00C1              <1> 	sldt ecx
  1640 00000FA0 E86D010000          <1> 	call expdump
  1641 00000FA5 8B35[79110000]      <1> 	mov esi, [esploc]
  1642 00000FAB 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FB0 81C710000000        <1> 	add edi, 16
  1644 00000FB6 893D[94110000]      <1> 	mov [codelocend], edi
  1645 00000FBC 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FC2 893D[90110000]      <1> 	mov [codeloc], edi
  1648 00000FC8 8B0F                <1> 	mov ecx, [edi]
  1649 00000FCA E843010000          <1> 	call expdump
  1650 00000FCF 8B3D[90110000]      <1> 	mov edi, [codeloc]
  1651 00000FD5 81C704000000        <1> 	add edi, 4
  1652 00000FDB 3B3D[94110000]      <1> 	cmp edi, [codelocend]
  1653 00000FE1 72DF                <1> 	jb dumpcodeloop
  1654 00000FE3 BE[A3100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00000FE8 803D[9C890000]00    <1> 	cmp byte [guion], 0
  1657 00000FEF 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 00000FF1 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1660 00000FF8 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1661 00000FFF 66B80100            <1> 	mov ax, 1
  1662 00001003 6631DB              <1> 	xor bx, bx
  1663 00001006 E86A640000          <1> 	call showstring2
  1664 0000100B E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 00001010 E8160D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001015 30C0                <1> 	xor al, al
  1670 00001017 E80C130000          <1> 	call rdcharint
  1671 0000101C 803D[8F110000]03    <1> 	cmp byte [intprob], 3
  1672 00001023 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001025 803D[9C890000]00    <1> 	cmp byte [guion], 0
  1675 0000102C 7427                <1> 	je nodebuggui
  1676 0000102E 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1677 00001035 66891D[206E0000]    <1> 	mov [background], bx
  1678 0000103C 6631DB              <1> 	xor bx, bx
  1679 0000103F C605[3E580000]00    <1> 	mov byte [mousedisabled], 0
  1680 00001046 E8895D0000          <1> 	call guiclear
  1681 0000104B E8D45D0000          <1> 	call reloadallgraphics
  1682 00001050 E82A180000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001055 8B35[7D110000]      <1> 	mov esi, [espfirst]
  1686 0000105B 89F4                <1> 	mov esp, esi
  1687 0000105D 61                  <1> 	popad
  1688 0000105E 17                  <1> 	pop ss
  1689 0000105F 0FA9                <1> 	pop gs
  1690 00001061 0FA1                <1> 	pop fs
  1691 00001063 07                  <1> 	pop es
  1692 00001064 1F                  <1> 	pop ds
  1693 00001065 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 00001066 61                  <1> 	popad
  1696 00001067 17                  <1> 	pop ss
  1697 00001068 0FA9                <1> 	pop gs
  1698 0000106A 0FA1                <1> 	pop fs
  1699 0000106C 07                  <1> 	pop es
  1700 0000106D 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 0000106E 803D[9C890000]00    <1> 	cmp byte [guion], 0
  1703 00001075 7427                <1> 	je returnunhandgui
  1704 00001077 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1705 0000107E 66891D[206E0000]    <1> 	mov [background], bx
  1706 00001085 6631DB              <1> 	xor bx, bx
  1707 00001088 C605[3E580000]00    <1> 	mov byte [mousedisabled], 0
  1708 0000108F E8405D0000          <1> 	call guiclear
  1709 00001094 E88B5D0000          <1> 	call reloadallgraphics
  1710 00001099 E8E1170000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 0000109E E9201C0000          <1> 	jmp nwcmd
  1714 000010A3 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010AC 737420616E79207072- <1>
  1716 000010B5 6F626C656D7320696E- <1>
  1717 000010BE 207468652049737375- <1>
  1718 000010C7 65732073656374696F- <1>
  1719 000010D0 6E20617420736F6C6C- <1>
  1720 000010D9 65726F732E676F6F67- <1>
  1721 000010E2 6C65636F64652E636F- <1>
  1722 000010EB 6D0A                <1>
  1723 000010ED 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 000010F6 206B657920746F2072- <1>
  1725 000010FF 657475726E20746F20- <1>
  1726 00001108 536F6C6C65724F530A- <1>
  1727 00001111 00                  <1>
  1728                              <1> expdump:
  1729 00001112 8B35[81110000]      <1> 	mov esi, [esiloc]
  1730 00001118 89F7                <1> 	mov edi, esi
  1731 0000111A 81C70F000000        <1> 	add edi, 15
  1732 00001120 81C604000000        <1> 	add esi, 4
  1733 00001126 893D[81110000]      <1> 	mov [esiloc], edi
  1734 0000112C 81EF03000000        <1> 	sub edi, 3
  1735 00001132 E8F31F0000          <1> 	call converthex
  1736 00001137 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 0000113D 803D[9C890000]00    <1> 	cmp byte [guion], 0
  1739 00001144 0F8429000000        <1> 	je near expdumptext
  1740 0000114A 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1741 00001151 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1742 00001158 66B80100            <1> 	mov ax, 1
  1743 0000115C 6631DB              <1> 	xor bx, bx
  1744 0000115F E811630000          <1> 	call showstring2
  1745 00001164 66890D[89110000]    <1> 	mov [locunhandy], cx
  1746 0000116B 668915[8B110000]    <1> 	mov [locunhandx], dx
  1747 00001172 C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 00001173 E8B30B0000          <1> 	call print
  1751 00001178 C3                  <1> 	ret
  1752 00001179 00000000            <1> esploc dd 0
  1753 0000117D 00000000            <1> espfirst dd 0
  1754 00001181 00000000            <1> esiloc dd 0
  1755 00001185 00000000            <1> esiregbuf dd 0
  1756 00001189 0100                <1> locunhandy dw 1
  1757 0000118B 0100                <1> locunhandx dw 1
  1758 0000118D 0000                <1> backgroundcache dw 0
  1759 0000118F 00                  <1> intprob db 0
  1760 00001190 00000000            <1> codeloc dd 0
  1761 00001194 00000000            <1> codelocend dd 0
  1762 00001198 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 0000119E 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011A7 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011AD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011B6 303030202000<rept>  <1>
  1769 00001216 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 0000121F 303030FF0A00        <1>
  1771 00001225 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 0000122E 303030202000<rept>  <1>
  1773 0000128E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 00001297 303030FF0A00        <1>
  1775 0000129D FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012A6 303030202000<rept>  <1>
  1777 00001306 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 0000130F 303030FF0A00        <1>
  1779 00001315 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 0000131E 303030202000<rept>  <1>
  1781 0000137E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 00001387 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 0000138D 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 00001396 303030202000        <1>
  1786 0000139C 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013A5 303030202000        <1>
  1788 000013AB 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013B4 303030FF0A00        <1>
  1790 000013BA 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013C3 303030202000        <1>
  1792 000013C9 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 000013D2 303030202000        <1>
  1794 000013D8 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 000013E1 303030202000        <1>
  1796 000013E7 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 000013F0 303030202000        <1>
  1798 000013F6 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 000013FF 303030FF0A00        <1>
  1800 00001405 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 0000140E 303030202000        <1>
  1802 00001414 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 0000141D 303030202000        <1>
  1804 00001423 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 0000142C 303030202000        <1>
  1806 00001432 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 0000143B 303030FF0A00        <1>
  1808 00001441 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 0000144A 303030202000        <1>
  1810 00001450 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 00001459 303030202000        <1>
  1812 0000145F 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 00001468 303030202000        <1>
  1814 0000146E 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 00001477 303030FF0A00        <1>
  1816 0000147D 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 00001486 303030202000        <1>
  1818 0000148C 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 00001495 303030202000        <1>
  1820 0000149B 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014A4 303030202000        <1>
  1822 000014AA 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014B3 303030FF0A00        <1>
  1824 000014B9 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014C2 303030202000        <1>
  1826 000014C8 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 000014D1 303030202000        <1>
  1828 000014D7 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 000014E0 303030202000        <1>
  1830 000014E6 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 000014EF 303030FF0A00        <1>
  1832 000014F5 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 000014FE 303030202000<rept>  <1>
  1834 00001513 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 0000151C 30303020FF00        <1>
  1836 00001522 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 0000152B 3030305D2000        <1>
  1838 00001531 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 0000153A 303030202000<rept>  <1>
  1840 0000155E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 00001567 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 0000156D [B1150000]          <1> 			dd err0
  1846 00001571 [1A160000]          <1> 			dd err1
  1847 00001575 [7B160000]          <1> 			dd err2
  1848 00001579 [D0160000]          <1> 			dd err3
  1849 0000157D [34170000]          <1> 			dd err4
  1850 00001581 [86170000]          <1> 			dd err5
  1851 00001585 [F0170000]          <1> 			dd err6
  1852 00001589 [58180000]          <1> 			dd err7
  1853 0000158D [A2180000]          <1> 			dd err8
  1854 00001591 [FF180000]          <1> 			dd err9
  1855 00001595 [58190000]          <1> 			dd err10
  1856 00001599 [A3190000]          <1> 			dd err11
  1857 0000159D [F3190000]          <1> 			dd err12
  1858 000015A1 [4C1A0000]          <1> 			dd err13
  1859 000015A5 [AF1A0000]          <1> 			dd err14
  1860 000015A9 [EB1A0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015AD [761B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015B1 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015BA 6279207A65726F3A0A  <1>
  1866 000015C3 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1867 000015CC 6C79206C696D2061C3- <1>
  1868 000015D5 B778203D20E2889E20- <1>
  1869 000015DE 7768656E2061206973- <1>
  1870 000015E7 20616E79207265616C- <1>
  1871 000015F0 206E756D6265722E20- <1>
  1872 000015F9 486170707920456173- <1>
  1873 00001602 746572210A          <1>
  1874 00001607 202020202020202020- <1> 		db "            x→0",10,0
  1875 00001610 20202078E28692300A- <1>
  1876 00001619 00                  <1>
  1877                              <1> 		
  1878 0000161A 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1879 00001623 65702F427265616B70- <1>
  1880 0000162C 6F696E743A0A        <1>
  1881 00001632 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1882 0000163B 696E74206661756C74- <1>
  1883 00001644 2C20627265616B706F- <1>
  1884 0000164D 696E7420747261702C- <1>
  1885 00001656 206F722073696E676C- <1>
  1886 0000165F 652D73746570207472- <1>
  1887 00001668 617020776173207472- <1>
  1888 00001671 696767657265642E0A- <1>
  1889 0000167A 00                  <1>
  1890                              <1> 		
  1891 0000167B 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1892 00001684 6C6520696E74657272- <1>
  1893 0000168D 7570743A0A          <1>
  1894 00001692 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1895 0000169B 6520696E7465727275- <1>
  1896 000016A4 707420776173207472- <1>
  1897 000016AD 696767657265642074- <1>
  1898 000016B6 68617420636F756C64- <1>
  1899 000016BF 206E6F74206265206D- <1>
  1900 000016C8 61736B65642E0A00    <1>
  1901                              <1> 		
  1902 000016D0 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1903 000016D9 743A0A              <1>
  1904 000016DC 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1905 000016E5 727275707420697320- <1>
  1906 000016EE 7573656420696E2070- <1>
  1907 000016F7 726F6772616D732074- <1>
  1908 00001700 6F2073686F77207468- <1>
  1909 00001709 6520737461636B2061- <1>
  1910 00001712 6E6420726567697374- <1>
  1911 0000171B 65727320616E642063- <1>
  1912 00001724 616E2062650A        <1>
  1913 0000172A 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1914 00001733 00                  <1>
  1915                              <1> 		
  1916 00001734 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1917 0000173D 0A                  <1>
  1918 0000173E 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1919 00001747 73736F722072616E20- <1>
  1920 00001750 696E746F20616E2049- <1>
  1921 00001759 4E544F20696E737472- <1>
  1922 00001762 756374696F6E207769- <1>
  1923 0000176B 746820746865206F76- <1>
  1924 00001774 6572666C6F7720666C- <1>
  1925 0000177D 6167207365742E0A00  <1>
  1926                              <1> 		
  1927 00001786 426F756E6473206368- <1> err5	db "Bounds check:",10
  1928 0000178F 65636B3A0A          <1>
  1929 00001794 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1930 0000179D 73736F72207265626F- <1>
  1931 000017A6 756E6465642066726F- <1>
  1932 000017AF 6D206120424F554E44- <1>
  1933 000017B8 20696E737472756374- <1>
  1934 000017C1 696F6E2072756E206F- <1>
  1935 000017CA 6E20616E206F706572- <1>
  1936 000017D3 616E64207468617420- <1>
  1937 000017DC 776173206F75740A    <1>
  1938 000017E4 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1939 000017ED 2E0A00              <1>
  1940                              <1> 		
  1941 000017F0 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1942 000017F9 70636F64653A0A      <1>
  1943 00001800 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1944 00001809 73736F722068617320- <1>
  1945 00001812 6E6F20696465612077- <1>
  1946 0000181B 686174206974207761- <1>
  1947 00001824 7320747279696E6720- <1>
  1948 0000182D 746F20657865637574- <1>
  1949 00001836 652E20446F6E277420- <1>
  1950 0000183F 72756E205353453420- <1>
  1951 00001848 636F64650A          <1>
  1952 0000184D 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1953 00001856 0A00                <1>
  1954                              <1> 		
  1955 00001858 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1956 00001861 6F72206E6F74206176- <1>
  1957 0000186A 61696C61626C653A0A  <1>
  1958 00001873 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1959 0000187C 206B6E6F7720746865- <1>
  1960 00001885 7920646F6E2774206D- <1>
  1961 0000188E 616B652074686F7365- <1>
  1962 00001897 20616E796D6F726521- <1>
  1963 000018A0 0A00                <1>
  1964                              <1> 		
  1965 000018A2 446F75626C65206661- <1> err8	db "Double fault:",10
  1966 000018AB 756C743A0A          <1>
  1967 000018B0 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1968 000018B9 74696F6E2068616E64- <1>
  1969 000018C2 6C657220636F756C64- <1>
  1970 000018CB 206E6F742068616E64- <1>
  1971 000018D4 6C6520746861742069- <1>
  1972 000018DD 7420636F756C64206E- <1>
  1973 000018E6 6F742068616E646C65- <1>
  1974 000018EF 20616E206578636570- <1>
  1975 000018F8 74696F6E2E0A00      <1>
  1976                              <1> 		
  1977 000018FF 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1978 00001908 6F72207365676D656E- <1>
  1979 00001911 74206F76657272756E- <1>
  1980 0000191A 3A0A00              <1>
  1981 0000191D 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1982 00001926 722068617070656E73- <1>
  1983 0000192F 20696E206D6F646572- <1>
  1984 00001938 6E20636F6D70757465- <1>
  1985 00001941 72732C20616E64206E- <1>
  1986 0000194A 657665722073686F75- <1>
  1987 00001953 6C642E0A00          <1>
  1988                              <1> 
  1989 00001958 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1990 00001961 53533A0A            <1>
  1991 00001965 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1992 0000196E 686174207761732073- <1>
  1993 00001977 776974636865642074- <1>
  1994 00001980 6F20697320696E7661- <1>
  1995 00001989 6C69642E204E6F7468- <1>
  1996 00001992 696E672066756E6E79- <1>
  1997 0000199B 20686572652E0A00    <1>
  1998                              <1> 		
  1999 000019A3 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2000 000019AC 6F742070726573656E- <1>
  2001 000019B5 743A0A              <1>
  2002 000019B8 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2003 000019C1 6E7420626974206F66- <1>
  2004 000019CA 20746865207365676D- <1>
  2005 000019D3 656E74206465736372- <1>
  2006 000019DC 6970746F7220697320- <1>
  2007 000019E5 73657420746F207A65- <1>
  2008 000019EE 726F2E0A00          <1>
  2009                              <1> 		
  2010 000019F3 537461636B20657863- <1> err12	db "Stack exception:",10
  2011 000019FC 657074696F6E3A0A    <1>
  2012 00001A04 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2013 00001A0D 7363726970746F7220- <1>
  2014 00001A16 697320696E76616C69- <1>
  2015 00001A1F 64206F72206E6F7420- <1>
  2016 00001A28 70726573656E74206F- <1>
  2017 00001A31 7220697473206C696D- <1>
  2018 00001A3A 697420697320746F6F- <1>
  2019 00001A43 20736D616C6C2E0A00  <1>
  2020                              <1> 		
  2021 00001A4C 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2022 00001A55 726F74656374696F6E- <1>
  2023 00001A5E 2076696F6C6174696F- <1>
  2024 00001A67 6E3A0A              <1>
  2025 00001A6A 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2026 00001A73 746564207468652063- <1>
  2027 00001A7C 6F6D70757465722E20- <1>
  2028 00001A85 537465702061776179- <1>
  2029 00001A8E 20736C6F776C792E20- <1>
  2030 00001A97 546865204642492069- <1>
  2031 00001AA0 73206F6E2069747320- <1>
  2032 00001AA9 7761792E0A00        <1>
  2033                              <1> 		
  2034 00001AAF 50616765206661756C- <1> err14	db "Page fault:",10
  2035 00001AB8 743A0A              <1>
  2036 00001ABB 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2037 00001AC4 746861742077617320- <1>
  2038 00001ACD 726571756573746564- <1>
  2039 00001AD6 20776173206E6F7420- <1>
  2040 00001ADF 617661696C61626C65- <1>
  2041 00001AE8 2E0A00              <1>
  2042                              <1> 		
  2043 00001AEB 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2044 00001AF4 666F7220506C616E20- <1>
  2045 00001AFD 523A0A              <1>
  2046 00001B00 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2047 00001B09 727275707420697320- <1>
  2048 00001B12 726573657276656420- <1>
  2049 00001B1B 666F72207573616765- <1>
  2050 00001B24 206F6E6C7920627920- <1>
  2051 00001B2D 746865206D696C6974- <1>
  2052 00001B36 617279207768656E20- <1>
  2053 00001B3F 6974206973206E6563- <1>
  2054 00001B48 6573736172790A      <1>
  2055 00001B4F 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2056 00001B58 746520612066756C6C- <1>
  2057 00001B61 2D7363616C6520636F- <1>
  2058 00001B6A 757020642782746174- <1>
  2059 00001B73 2E0A00              <1>
  2060                              <1> 		
  2061 00001B76 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2062 00001B7F 68656C6C206A757374- <1>
  2063 00001B88 2068617070656E6564- <1>
  2064 00001B91 3F2049732065766572- <1>
  2065 00001B9A 796F6E65206F6B6179- <1>
  2066 00001BA3 3F2048617264206472- <1>
  2067 00001BAC 6976653F2056696465- <1>
  2068 00001BB5 6F20636172643F0A    <1>
  2069 00001BBD 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2070 00001BC6 726520796F75207468- <1>
  2071 00001BCF 6572653F0A00        <1>
  2072                              <1> %else
  2073                              <1> unhand:	
  2074                              <1> 	%assign i 0
  2075                              <1> 	%rep 32
  2076                              <1> 	mov byte [intprob], i
  2077                              <1> 	jmp unhand2
  2078                              <1> 	%assign i i+1
  2079                              <1> 	%endrep
  2080                              <1> unhand2:
  2081                              <1> 	cmp byte [intprob], 3
  2082                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2083                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2084                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2085                              <1> 	mov bl, [intprob]
  2086                              <1> 	jmp exitprog
  2087                              <1> intprob db 0
  2088                              <1> %endif
  2089                                      %include "source/ints.asm"
  2090                              <1> newints:	;for great justice
  2091 00001BD5 80FC00              <1> 	cmp ah, 0
  2092 00001BD8 0F849A000000        <1> 	je near exitprog   ;kills app
  2093 00001BDE 80FC01              <1> 	cmp ah, 1
  2094 00001BE1 0F8419010000        <1> 	je near prntstr  ;print string
  2095 00001BE7 80FC02              <1> 	cmp ah, 2
  2096 00001BEA 0F84B7010000        <1> 	je near readstr	;read string
  2097 00001BF0 80FC03              <1> 	cmp ah, 3
  2098 00001BF3 0F84D7010000        <1> 	je near clearscrn	;clear screen
  2099 00001BF9 80FC04              <1> 	cmp ah, 4
  2100 00001BFC 0F844C020000        <1> 	je near prntreadstr	;read and print string
  2101 00001C02 80FC05              <1> 	cmp ah, 5
  2102 00001C05 0F8411070000        <1> 	je near readchar	;get char
  2103 00001C0B 80FC06              <1> 	cmp ah, 6
  2104 00001C0E 0F8478070000        <1> 	je near prntchar	;print char
  2105 00001C14 80FC07              <1> 	cmp ah, 7
  2106 00001C17 0F8495090000        <1> 	je near openfile	;read file
  2107                              <1> ;	cmp ah, 8
  2108                              <1> ;	je near closefile	;close file
  2109 00001C1D 80FC09              <1> 	cmp ah, 9
  2110 00001C20 0F8496090000        <1> 	je near num2str	;convert number to string
  2111 00001C26 80FC0A              <1> 	cmp ah, 10
  2112 00001C29 0F84A5090000        <1> 	je near str2num	;convert string to number
  2113                              <1> %ifdef threads.included
  2114 00001C2F 80FC0B              <1> 	cmp ah, 11
  2115 00001C32 0F84A8090000        <1> 	je near forkthread	;create thread
  2116                              <1> %endif
  2117 00001C38 80FC0C              <1> 	cmp ah, 12
  2118 00001C3B 0F84760A0000        <1> 	je near gettime	;get time
  2119 00001C41 80FC0D              <1> 	cmp ah, 13
  2120 00001C44 0F84820A0000        <1> 	je near settime	;set time
  2121 00001C4A 80FC0E              <1> 	cmp ah, 14
  2122 00001C4D 0F84890A0000        <1> 	je near runcmd	;run program
  2123 00001C53 80FC0F              <1> 	cmp ah, 15
  2124 00001C56 0F84950A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2125 00001C5C 80FC10              <1> 	cmp ah, 16
  2126 00001C5F 0F84B70A0000        <1> 	je near hooksig	;hook code to a signal
  2127                              <1> %ifdef gui.included
  2128 00001C65 80FC11              <1> 	cmp ah, 17
  2129 00001C68 0F84BE0A0000        <1> 	je near guiint	;GUI operations
  2130                              <1> %endif
  2131                              <1> %ifdef sound.included
  2132                              <1> 	cmp ah, 18
  2133                              <1> 	je near soundint	;sound operations
  2134                              <1> %endif
  2135                              <1> %ifdef network.included
  2136 00001C6E 80FC13              <1> 	cmp ah, 19
  2137 00001C71 0F84030C0000        <1> 	je near netint	;networking operations
  2138                              <1> %endif
  2139 00001C77 CF                  <1> 	iret
  2140                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2141                              <2> exitprog:
  2142 00001C78 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2143 00001C7C 8ED8                <2> 	mov ds, ax
  2144 00001C7E 8EC0                <2> 	mov es, ax
  2145 00001C80 8EE0                <2> 	mov fs, ax
  2146 00001C82 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2147 00001C86 8EE8                <2> 	mov gs, ax
  2148 00001C88 C705[3B670000]0000- <2> 	mov dword [currentthread], 0
  2149 00001C90 0000                <2>
  2150 00001C92 C705[36670000]0400- <2> 	mov dword [lastthread], 4
  2151 00001C9A 0000                <2>
  2152 00001C9C C605[3A670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2153 00001CA3 8B25[E8A10300]      <2> 	mov esp, [previousstack] ;and this
  2154 00001CA9 81FB00000000        <2> 	cmp ebx, 0
  2155 00001CAF 0F8501000000        <2> 	jne near .error
  2156 00001CB5 C3                  <2> 	ret
  2157                              <2> .error:
  2158 00001CB6 89D9                <2> 	mov ecx, ebx
  2159 00001CB8 B006                <2> 	mov al, 6
  2160 00001CBA A2[88310000]        <2> 	mov [firsthexshown], al
  2161 00001CBF 51                  <2> 	push ecx
  2162 00001CC0 BE[DB1C0000]        <2> 	mov esi, .msg1
  2163 00001CC5 E855000000          <2> 	call printhighlight
  2164 00001CCA 59                  <2> 	pop ecx
  2165 00001CCB E8CD140000          <2> 	call showhex
  2166 00001CD0 BE[F01C0000]        <2> 	mov esi, .msg2
  2167 00001CD5 E845000000          <2> 	call printhighlight
  2168 00001CDA C3                  <2> 	ret
  2169                              <2> 	
  2170 00001CDB 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2171 00001CE4 7461747573206F6620- <2>
  2172 00001CED 307800              <2>
  2173 00001CF0 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2174 00001CF9 726E65642E0A00      <2>
  2175                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2176                              <2> prntstr:
  2177 00001D00 30E4                <2> xor ah, ah
  2178 00001D02 E82B000000          <2> call printint
  2179 00001D07 E99CE5FFFF          <2> jmp timerinterrupt
  2180                              <2> 
  2181                              <2> 	printquiet:
  2182 00001D0C 6631C0              <2> 		xor ax, ax
  2183 00001D0F 66A3[A51D0000]      <2> 		mov [endkeyprint], ax
  2184 00001D15 66BB0700            <2> 		mov bx, 7
  2185 00001D19 E82D000000          <2> 		call printint.b
  2186 00001D1E C3                  <2> 		ret
  2187                              <2> 
  2188                              <2> 	printhighlight:
  2189 00001D1F 6631C0              <2> 		xor ax, ax
  2190 00001D22 66BBF000            <2> 		mov bx, 0xF0
  2191 00001D26 E907000000          <2> 		jmp printint
  2192                              <2> 
  2193                              <2>     print:
  2194 00001D2B 6631C0              <2> 		xor ax, ax
  2195 00001D2E 66BB0700            <2> 		mov bx, 7
  2196                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2197 00001D32 56                  <2> 		push esi
  2198 00001D33 66A3[A51D0000]      <2> 		mov [endkeyprint], ax
  2199 00001D39 E80D000000          <2> 		call .b
  2200 00001D3E 89F1                <2> 		mov ecx, esi
  2201 00001D40 5F                  <2> 		pop edi
  2202 00001D41 29F9                <2> 		sub ecx, edi
  2203 00001D43 51                  <2> 		push ecx
  2204 00001D44 E8360B0000          <2> 		call termcopy
  2205 00001D49 59                  <2> 		pop ecx
  2206 00001D4A C3                  <2> 		ret
  2207                              <2> 	.b:	
  2208 00001D4B 53                  <2> 		push ebx
  2209 00001D4C 31C0                <2> 		xor eax, eax
  2210 00001D4E 8A06                <2> 		mov al, [esi]
  2211 00001D50 3CFF                <2> 		cmp al, 0xFF
  2212 00001D52 7438                <2> 		je .doneutf
  2213 00001D54 3CC0                <2> 		cmp al, 0xC0
  2214 00001D56 7234                <2> 		jb .doneutf
  2215 00001D58 3CE0                <2> 		cmp al, 0xE0
  2216 00001D5A 721D                <2> 		jb .two
  2217 00001D5C 46                  <2> 		inc esi
  2218 00001D5D 668B0E              <2> 		mov cx, [esi]
  2219 00001D60 46                  <2> 		inc esi
  2220 00001D61 C0E004              <2> 		shl al, 4
  2221 00001D64 66C1E102            <2> 		shl cx, 2
  2222 00001D68 C0ED02              <2> 		shr ch, 2
  2223 00001D6B 66C1E902            <2> 		shr cx, 2
  2224 00001D6F 08C5                <2> 		or ch, al
  2225 00001D71 6689C8              <2> 		mov ax, cx
  2226 00001D74 E913000000          <2> 		jmp .doneutf
  2227                              <2> 	.two:
  2228 00001D79 8A2E                <2> 		mov ch, [esi]
  2229 00001D7B 46                  <2> 		inc esi
  2230 00001D7C 8A0E                <2> 		mov cl, [esi]
  2231 00001D7E 66C1E102            <2> 		shl cx, 2
  2232 00001D82 C0ED02              <2> 		shr ch, 2
  2233 00001D85 66C1E902            <2> 		shr cx, 2
  2234 00001D89 6689C8              <2> 		mov ax, cx
  2235                              <2> 	.doneutf:
  2236 00001D8C 5B                  <2> 		pop ebx
  2237 00001D8D 663B05[A51D0000]    <2> 		cmp ax, [endkeyprint]
  2238 00001D94 740E                <2> 		je .done
  2239 00001D96 663DFFFE            <2> 		cmp ax, 0xFEFF
  2240 00001D9A 7405                <2> 		je .noprint
  2241 00001D9C E818060000          <2> 		call prcharq
  2242                              <2> 	.noprint:
  2243 00001DA1 46                  <2> 		inc esi
  2244 00001DA2 EBA7                <2> 		jmp .b
  2245                              <2> 	.done:
  2246 00001DA4 C3                  <2> 		ret
  2247                              <2> 
  2248 00001DA5 0000                <2> endkeyprint dw 0
  2249                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2250                              <2> readstr:
  2251 00001DA7 E805000000          <2> call readint
  2252 00001DAC E9F7E4FFFF          <2> jmp timerinterrupt
  2253                              <2> 
  2254                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2255 00001DB1 89C3                <2> 		mov ebx, eax
  2256                              <2> 	.b:
  2257 00001DB3 53                  <2> 		push ebx
  2258 00001DB4 57                  <2> 		push edi
  2259 00001DB5 56                  <2> 		push esi
  2260 00001DB6 30C0                <2> 		xor al, al
  2261 00001DB8 E86B050000          <2> 		call rdcharint
  2262 00001DBD 5E                  <2> 		pop esi
  2263 00001DBE 8806                <2> 		mov [esi], al
  2264 00001DC0 46                  <2> 		inc esi
  2265 00001DC1 5F                  <2> 		pop edi
  2266 00001DC2 5B                  <2> 		pop ebx
  2267 00001DC3 39FE                <2> 		cmp esi, edi
  2268 00001DC5 7304                <2> 		jae .done
  2269 00001DC7 38D8                <2> 		cmp al, bl
  2270 00001DC9 75E8                <2> 		jne .b
  2271                              <2> 	.done:
  2272 00001DCB 4E                  <2> 		dec esi
  2273 00001DCC C60600              <2> 		mov byte [esi], 0
  2274 00001DCF C3                  <2> 		ret
  2275                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2276                              <2> clearscrn:
  2277 00001DD0 E805000000          <2> call clear
  2278 00001DD5 E9CEE4FFFF          <2> jmp timerinterrupt
  2279                              <2> %ifdef io.serial
  2280                              <2> clear:
  2281                              <2> 	ret
  2282                              <2> %else
  2283                              <2> clear:
  2284 00001DDA 668B0D[AC250000]    <2> 		mov cx, [charxy]
  2285 00001DE1 BF[7EBF0300]        <2> 		mov edi, videobuf
  2286 00001DE6 31C0                <2> 		xor eax, eax
  2287 00001DE8 A3[A2250000]        <2> 		mov [linebeginpos], eax
  2288 00001DED A3[A6250000]        <2> 		mov [videobufpos], eax
  2289 00001DF2 6631D2              <2> 		xor dx, dx
  2290 00001DF5 66A3[AA250000]      <2> 		mov [charpos], ax
  2291 00001DFB 66B80700            <2> 		mov ax, 7
  2292 00001DFF C1E010              <2> 		shl eax, 16
  2293                              <2> 	clearb:
  2294 00001E02 8907                <2> 		mov [edi], eax
  2295 00001E04 81C704000000        <2> 		add edi, 4
  2296 00001E0A FEC9                <2> 		dec cl
  2297 00001E0C 80F900              <2> 		cmp cl, 0
  2298 00001E0F 75F1                <2> 		jne clearb
  2299 00001E11 8A0D[AC250000]      <2> 		mov cl, [charxy]
  2300 00001E17 FECD                <2> 		dec ch
  2301 00001E19 80FD00              <2> 		cmp ch, 0
  2302 00001E1C 75E4                <2> 		jne clearb
  2303                              <2> 	cleardouble:
  2304 00001E1E BF[C6940400]        <2> 		mov edi, videobuf2
  2305 00001E23 668B0D[AC250000]    <2> 		mov cx, [charxy]
  2306 00001E2A 31C0                <2> 		xor eax, eax
  2307                              <2> 	clearc:
  2308 00001E2C 8907                <2> 		mov [edi], eax
  2309 00001E2E 81C704000000        <2> 		add edi, 4
  2310 00001E34 FEC9                <2> 		dec cl
  2311 00001E36 80F900              <2> 		cmp cl, 0
  2312 00001E39 75F1                <2> 		jne clearc
  2313 00001E3B 8A0D[AC250000]      <2> 		mov cl, [charxy]
  2314 00001E41 FECD                <2> 		dec ch
  2315 00001E43 80FD00              <2> 		cmp ch, 0
  2316 00001E46 75E4                <2> 		jne clearc
  2317 00001E48 E8320A0000          <2> 		call termcopy
  2318 00001E4D C3                  <2> 		ret
  2319                              <2> %endif
  2320                              <2> 		
  2321                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2322                              <2> prntreadstr:
  2323 00001E4E E80B000000          <2> call rdprint
  2324 00001E53 E950E4FFFF          <2> jmp timerinterrupt
  2325                              <2> 
  2326                              <2> readline:
  2327 00001E58 B00A                <2>   mov al, 10
  2328 00001E5A 66BB0700            <2>   mov bx, 7
  2329                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2330 00001E5E E80F000000          <2> 	call rdprintdos
  2331 00001E63 50                  <2> 	push eax
  2332 00001E64 A0[07230000]        <2> 	mov al, [endkeyrdpr]
  2333 00001E69 30E4                <2> 	xor ah, ah
  2334 00001E6B E832050000          <2> 	call prcharint
  2335 00001E70 58                  <2> 	pop eax
  2336 00001E71 C3                  <2> 	ret
  2337                              <2> 
  2338                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2339 00001E72 8935[11230000]      <2> 		mov [buftxtloc], esi
  2340 00001E78 A2[07230000]        <2> 		mov [endkeyrdpr], al
  2341 00001E7D 66891D[09230000]    <2> 		mov [modkeyrdpr], bx
  2342 00001E84 8935[0B230000]      <2> 		mov [firstesirdpr], esi
  2343 00001E8A 893D[15230000]      <2> 		mov [endbufferrdpr], edi
  2344 00001E90 8B3D[1A6A0500]      <2> 		mov edi, [commandsentered]
  2345 00001E96 893D[166A0500]      <2> 		mov [commandlistentries], edi
  2346                              <2> 	rdprintb:
  2347 00001E9C 56                  <2> 		push esi
  2348 00001E9D B001                <2> 		mov al, 1
  2349 00001E9F E884040000          <2> 		call rdcharint
  2350 00001EA4 8A25[88230000]      <2> 		mov ah, [lastkey + 2]
  2351 00001EAA 88E1                <2> 		mov cl, ah
  2352 00001EAC 5E                  <2> 		pop esi
  2353                              <2> %ifdef io.serial
  2354                              <2> 		cmp ah, 0x41
  2355                              <2> 		je near rdprup
  2356                              <2> 		cmp ah, 0x42
  2357                              <2> 		je near rdprdown
  2358                              <2> 		cmp ah, 0x43
  2359                              <2> 		je near rdprright
  2360                              <2> 		cmp ah, 0x44
  2361                              <2> 		je near rdprleft
  2362                              <2> 		cmp ah, 0x31
  2363                              <2> 		je near rdprhome
  2364                              <2> 		cmp ah, 0x48
  2365                              <2> 		je near rdprhome
  2366                              <2> 		cmp ah, 0x46
  2367                              <2> 		je near rdprend
  2368                              <2> 		cmp ah, 0x33
  2369                              <2> 		je near rdprdel
  2370                              <2> 		cmp ah, 0x34
  2371                              <2> 		je near rdprend
  2372                              <2> %else
  2373 00001EAD 803D[F65B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2374 00001EB4 753F                <2> 		jne notspecialrdprnt
  2375 00001EB6 80FC53              <2> 		cmp ah, 0x53
  2376 00001EB9 0F84B1030000        <2> 		je near rdprdel
  2377 00001EBF 80FC47              <2> 		cmp ah, 0x47
  2378 00001EC2 0F847E010000        <2> 		je near rdprhome
  2379 00001EC8 80FC4F              <2> 		cmp ah, 0x4F
  2380 00001ECB 0F8494010000        <2> 		je near rdprend
  2381 00001ED1 80FC50              <2> 		cmp ah, 0x50
  2382 00001ED4 0F8424020000        <2> 		je near rdprdown
  2383 00001EDA 80FC4D              <2> 		cmp ah, 0x4D
  2384 00001EDD 0F84C1010000        <2> 		je near rdprright
  2385 00001EE3 80FC4B              <2> 		cmp ah, 0x4B
  2386 00001EE6 0F8496010000        <2> 		je near rdprleft
  2387 00001EEC 80FC48              <2> 		cmp ah, 0x48
  2388 00001EEF 0F844C020000        <2> 		je near rdprup
  2389                              <2> 	notspecialrdprnt:
  2390                              <2> %endif
  2391 00001EF5 66A1[86230000]      <2> 		mov ax, [lastkey]
  2392 00001EFB 663D0800            <2> 		cmp ax, 8
  2393 00001EFF 0F84A0030000        <2> 		je near rdprbscheck
  2394 00001F05 663D0000            <2> 		cmp ax, 0
  2395 00001F09 7491                <2> 		je rdprintb
  2396 00001F0B 80F900              <2> 		cmp cl, 0
  2397 00001F0E 748C                <2> 		je rdprintb
  2398 00001F10 663D8000            <2> 		cmp ax, 0x80
  2399 00001F14 7257                <2> 		jb .normal
  2400 00001F16 663D0008            <2> 		cmp ax, 0x800
  2401 00001F1A 7321                <2> 		jae .three
  2402 00001F1C 46                  <2> 		inc esi
  2403 00001F1D 3B35[15230000]      <2> 		cmp esi, [endbufferrdpr]
  2404 00001F23 0F83DA000000        <2> 		jae near donerdprinc
  2405 00001F29 66C1E002            <2> 		shl ax, 2
  2406 00001F2D C0E802              <2> 		shr al, 2
  2407 00001F30 0C80                <2> 		or al, 10000000b
  2408 00001F32 80CCC0              <2> 		or ah, 11000000b
  2409 00001F35 8866FF              <2> 		mov [esi - 1], ah
  2410 00001F38 E930000000          <2> 		jmp .normal
  2411                              <2> .three:	
  2412 00001F3D 81C602000000        <2> 		add esi, 2
  2413 00001F43 3B35[15230000]      <2> 		cmp esi, [endbufferrdpr]
  2414 00001F49 0F83B4000000        <2> 		jae near donerdprinc
  2415 00001F4F 88E1                <2> 		mov cl, ah
  2416 00001F51 C0E904              <2> 		shr cl, 4
  2417 00001F54 80C9E0              <2> 		or cl, 11100000b
  2418 00001F57 884EFE              <2> 		mov [esi - 2], cl
  2419 00001F5A 66C1E004            <2> 		shl ax, 4
  2420 00001F5E 66C1E802            <2> 		shr ax, 2
  2421 00001F62 80CC80              <2> 		or ah, 10000000b
  2422 00001F65 C0E802              <2> 		shr al, 2
  2423 00001F68 0C80                <2> 		or al, 10000000b
  2424 00001F6A 8866FF              <2> 		mov [esi - 1], ah
  2425                              <2> .normal:
  2426 00001F6D 8806                <2> 		mov [esi], al
  2427 00001F6F 46                  <2> 		inc esi
  2428 00001F70 66A1[86230000]      <2> 		mov ax, [lastkey]
  2429                              <2> 	bscheckequal:
  2430 00001F76 668B1D[09230000]    <2> 		mov bx, [modkeyrdpr]
  2431 00001F7D 803D[10230000]00    <2> 		cmp byte [txtmask], 0
  2432 00001F84 7407                <2> 		je nomasktxt
  2433 00001F86 30E4                <2> 		xor ah, ah
  2434 00001F88 A0[10230000]        <2> 		mov al, [txtmask]
  2435                              <2> 	nomasktxt:
  2436 00001F8D 56                  <2> 		push esi
  2437 00001F8E 66A3[05230000]      <2> 		mov [axcache], ax
  2438 00001F94 668B1D[07230000]    <2> 		mov bx, [endkeyrdpr]
  2439 00001F9B 6639D8              <2> 		cmp ax, bx
  2440 00001F9E 7432                <2> 		je nobackprintbuftxt2
  2441 00001FA0 E8FD030000          <2> 		call prcharint
  2442 00001FA5 BE[68B40300]        <2> 		mov esi, buftxt2
  2443 00001FAA E85DFDFFFF          <2> 		call printquiet
  2444 00001FAF 66B82000            <2> 		mov ax, " "
  2445 00001FB3 E801040000          <2> 		call prcharq
  2446 00001FB8 66B80800            <2> 		mov ax, 8
  2447 00001FBC 81FE[68B40300]      <2> 		cmp esi, buftxt2
  2448 00001FC2 740E                <2> 		je nobackprintbuftxt2
  2449                              <2> 	backprintbuftxt2:
  2450 00001FC4 E8F0030000          <2> 		call prcharq
  2451 00001FC9 4E                  <2> 		dec esi
  2452 00001FCA 81FE[68B40300]      <2> 		cmp esi, buftxt2
  2453 00001FD0 77F2                <2> 		ja backprintbuftxt2
  2454                              <2> 	nobackprintbuftxt2:
  2455 00001FD2 663D0A00            <2> 		cmp ax, 10
  2456 00001FD6 7405                <2> 		je nonobackprint
  2457 00001FD8 E8C5030000          <2> 		call prcharint
  2458                              <2> 	nonobackprint:
  2459 00001FDD 5E                  <2> 		pop esi
  2460 00001FDE 3B35[15230000]      <2> 		cmp esi, [endbufferrdpr]
  2461 00001FE4 0F8319000000        <2> 		jae near donerdprinc
  2462 00001FEA 66A1[05230000]      <2> 		mov ax, [axcache]
  2463 00001FF0 8A25[07230000]      <2> 		mov ah, [endkeyrdpr]
  2464 00001FF6 38E0                <2> 		cmp al, ah
  2465 00001FF8 0F859EFEFFFF        <2> 		jne rdprintb
  2466 00001FFE E901000000          <2> 		jmp donerdprint
  2467                              <2> 	donerdprinc:
  2468 00002003 46                  <2> 		inc esi
  2469                              <2> 	donerdprint:
  2470 00002004 4E                  <2> 		dec esi
  2471 00002005 BF[68B40300]        <2> 		mov edi, buftxt2
  2472                              <2> 	copylaterstuff:
  2473 0000200A 8A07                <2> 		mov al, [edi]
  2474 0000200C 3C00                <2> 		cmp al, 0
  2475 0000200E 7406                <2> 		je nocopylaterstuff
  2476 00002010 8806                <2> 		mov [esi], al
  2477 00002012 47                  <2> 		inc edi
  2478 00002013 46                  <2> 		inc esi
  2479 00002014 EBF4                <2> 		jmp copylaterstuff
  2480                              <2> 	nocopylaterstuff:
  2481 00002016 C60600              <2> 		mov byte [esi], 0
  2482 00002019 E80B000000          <2> 		call clearbuftxt2
  2483 0000201E 89F1                <2> 		mov ecx, esi
  2484 00002020 8B3D[0B230000]      <2> 		mov edi, [firstesirdpr]
  2485 00002026 29F9                <2> 		sub ecx, edi
  2486 00002028 C3                  <2> 		ret
  2487                              <2> 	
  2488                              <2> 	clearbuftxt2:
  2489 00002029 30C0                <2> 		xor al, al
  2490 0000202B BF[68B40300]        <2> 		mov edi, buftxt2
  2491                              <2> 	clearbuftxt2lp:
  2492 00002030 8807                <2> 		mov [edi], al
  2493 00002032 47                  <2> 		inc edi
  2494 00002033 81FF[68B80300]      <2> 		cmp edi, buftxt
  2495 00002039 75F5                <2> 		jne clearbuftxt2lp
  2496 0000203B C3                  <2> 		ret
  2497                              <2> 	
  2498                              <2> 	rdprintb2:
  2499 0000203C E83E080000          <2> 		call termcopy
  2500 00002041 E956FEFFFF          <2> 		jmp rdprintb
  2501                              <2> 	
  2502                              <2> 	rdprhome:
  2503 00002046 3B35[11230000]      <2> 		cmp esi, [buftxtloc]
  2504 0000204C 0F84EAFFFFFF        <2> 		je near rdprintb2
  2505 00002052 BF[68B40300]        <2> 		mov edi, buftxt2
  2506 00002057 8A07                <2> 		mov al, [edi]
  2507 00002059 E879020000          <2> 		call shiftbuftxt2
  2508 0000205E E856030000          <2> 		call prcharq
  2509 00002063 EBE1                <2> 		jmp rdprhome
  2510                              <2> 		
  2511                              <2> 	rdprend:
  2512 00002065 BF[68B40300]        <2> 		mov edi, buftxt2
  2513 0000206A 8A07                <2> 		mov al, [edi]
  2514 0000206C 3C00                <2> 		cmp al, 0
  2515 0000206E 0F84C8FFFFFF        <2> 		je near rdprintb2
  2516 00002074 8806                <2> 		mov [esi], al
  2517 00002076 E849000000          <2> 		call shiftbuftxt2lft
  2518 0000207B E839030000          <2> 		call prcharq
  2519 00002080 EBE3                <2> 		jmp rdprend
  2520                              <2> 	
  2521                              <2> 	rdprleft:
  2522 00002082 3B35[11230000]      <2> 		cmp esi, [buftxtloc]
  2523 00002088 0F840EFEFFFF        <2> 		je near rdprintb
  2524 0000208E BF[68B40300]        <2> 		mov edi, buftxt2
  2525 00002093 8A07                <2> 		mov al, [edi]
  2526 00002095 E83D020000          <2> 		call shiftbuftxt2
  2527 0000209A E803030000          <2> 		call prcharint
  2528 0000209F E9F8FDFFFF          <2> 		jmp rdprintb
  2529                              <2> 		
  2530                              <2> 	rdprright:
  2531 000020A4 BF[68B40300]        <2> 		mov edi, buftxt2
  2532 000020A9 8A07                <2> 		mov al, [edi]
  2533 000020AB 3C00                <2> 		cmp al, 0
  2534 000020AD 0F84E9FDFFFF        <2> 		je near rdprintb
  2535 000020B3 8806                <2> 		mov [esi], al
  2536 000020B5 E80A000000          <2> 		call shiftbuftxt2lft
  2537 000020BA E8E3020000          <2> 		call prcharint
  2538 000020BF E9D8FDFFFF          <2> 		jmp rdprintb
  2539                              <2> 		
  2540                              <2> 	shiftbuftxt2lft:
  2541 000020C4 55                  <2> 		push ebp
  2542 000020C5 89FD                <2> 		mov ebp, edi
  2543                              <2> 	.lp:
  2544 000020C7 3C00                <2> 		cmp al, 0
  2545 000020C9 7408                <2> 		je noshiftbuftxt2lft
  2546 000020CB 47                  <2> 		inc edi
  2547 000020CC 8A07                <2> 		mov al, [edi]
  2548 000020CE 8847FF              <2> 		mov [edi - 1], al
  2549 000020D1 EBF4                <2> 		jmp .lp
  2550                              <2> 	noshiftbuftxt2lft:
  2551 000020D3 8A4500              <2> 		mov al, [ebp]
  2552 000020D6 5D                  <2> 		pop ebp
  2553 000020D7 3CC0                <2> 		cmp al, 0xC0
  2554 000020D9 7304                <2> 		jae .nofix
  2555 000020DB 3C80                <2> 		cmp al, 0x80
  2556 000020DD 73E5                <2> 		jae shiftbuftxt2lft
  2557                              <2> 	.nofix:
  2558 000020DF 8A06                <2> 		mov al, [esi]
  2559 000020E1 30E4                <2> 		xor ah, ah
  2560 000020E3 46                  <2> 		inc esi
  2561 000020E4 668B1D[09230000]    <2> 		mov bx, [modkeyrdpr]
  2562 000020EB C3                  <2> 		ret
  2563                              <2> 		
  2564                              <2> 	rdprdownbck:
  2565 000020EC FECC                <2> 		dec ah
  2566 000020EE 8825[0F230000]      <2> 		mov [commandedit], ah
  2567 000020F4 E88D000000          <2> 		call rdprbckspc
  2568 000020F9 E99EFDFFFF          <2> 		jmp rdprintb
  2569                              <2> 	
  2570                              <2> 	rdprdown:
  2571 000020FE 8A25[0F230000]      <2> 		mov ah, [commandedit]
  2572 00002104 80FC01              <2> 		cmp ah, 1
  2573 00002107 0F868FFDFFFF        <2> 		jbe near rdprintb
  2574 0000210D 8B3D[1A6A0500]      <2> 		mov edi, [commandsentered]
  2575 00002113 3B3D[166A0500]      <2> 		cmp edi, [commandlistentries]
  2576 00002119 7618                <2> 		jbe .nofix
  2577 0000211B 8105[166A0500]0200- <2> 		add dword [commandlistentries], 2
  2578 00002123 0000                <2>
  2579 00002125 3B3D[166A0500]      <2> 		cmp edi, [commandlistentries]
  2580 0000212B 7706                <2> 		ja .nofix
  2581 0000212D 893D[166A0500]      <2> 		mov [commandlistentries], edi
  2582                              <2> 	.nofix:
  2583 00002133 80FC02              <2> 		cmp ah, 2
  2584 00002136 74B4                <2> 		je rdprdownbck
  2585 00002138 80EC02              <2> 		sub ah, 2
  2586 0000213B 8825[0F230000]      <2> 		mov [commandedit], ah
  2587                              <2> 		
  2588                              <2> 	rdprup:
  2589 00002141 3805[0F230000]      <2> 		cmp [commandedit], al
  2590 00002147 0F844FFDFFFF        <2> 		je near rdprintb
  2591 0000214D 813D[166A0500]0000- <2> 		cmp dword [commandlistentries], 0
  2592 00002155 0000                <2>
  2593 00002157 0F843FFDFFFF        <2> 		je near rdprintb
  2594 0000215D FF0D[166A0500]      <2> 		dec dword [commandlistentries]
  2595                              <2> 	.lp:
  2596 00002163 BF[68B40300]        <2> 		mov edi, buftxt2
  2597 00002168 8A07                <2> 		mov al, [edi]
  2598 0000216A 3C00                <2> 		cmp al, 0
  2599 0000216C 740E                <2> 		je .start
  2600 0000216E 8806                <2> 		mov [esi], al
  2601 00002170 E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2602 00002175 E83F020000          <2> 		call prcharq
  2603 0000217A EBE7                <2> 		jmp .lp
  2604                              <2> 	.start:
  2605 0000217C E805000000          <2> 		call rdprbckspc
  2606 00002181 E948000000          <2> 		jmp getcurrentcommandstr
  2607                              <2> 	rdprbckspc:
  2608 00002186 3B35[11230000]      <2> 		cmp esi, [buftxtloc]
  2609 0000218C 7432                <2> 		je nordprupbck
  2610                              <2> 	rdprupbckspclp:
  2611 0000218E 66B80800            <2> 		mov ax, 8
  2612 00002192 668B1D[09230000]    <2> 		mov bx, [modkeyrdpr]
  2613 00002199 E81B020000          <2> 		call prcharq
  2614 0000219E 66B82000            <2> 		mov ax, ' '
  2615 000021A2 E812020000          <2> 		call prcharq
  2616 000021A7 66B80800            <2> 		mov ax, 8
  2617 000021AB E809020000          <2> 		call prcharq
  2618 000021B0 4E                  <2> 		dec esi
  2619 000021B1 3B35[11230000]      <2> 		cmp esi, [buftxtloc]
  2620 000021B7 7402                <2> 		je nordprupbck2
  2621 000021B9 EBD3                <2> 		jmp rdprupbckspclp
  2622                              <2> 	nordprupbck2:
  2623 000021BB E8BF060000          <2> 		call termcopy
  2624                              <2> 	nordprupbck:
  2625 000021C0 8B3D[126A0500]      <2> 		mov edi, [commandbufpos]
  2626 000021C6 81C7[1E6A0500]      <2> 		add edi, commandbuf
  2627 000021CC 4F                  <2> 		dec edi
  2628 000021CD C3                  <2> 		ret
  2629                              <2> 	getcurrentcommandstr:
  2630 000021CE 8A25[0F230000]      <2> 		mov ah, [commandedit]
  2631 000021D4 FE05[0F230000]      <2> 		inc byte [commandedit]
  2632                              <2> 	getccmdlp:
  2633 000021DA 4F                  <2> 		dec edi
  2634 000021DB 8A07                <2> 		mov al, [edi]
  2635 000021DD 81FF[1E6A0500]      <2> 		cmp edi, commandbuf
  2636 000021E3 7231                <2> 		jb getcmdresetcommandbuf
  2637 000021E5 81EF[1E6A0500]      <2> 		sub edi, commandbuf
  2638 000021EB 3B3D[126A0500]      <2> 		cmp edi, [commandbufpos]
  2639 000021F1 0F84A5FCFFFF        <2> 		je near rdprintb
  2640 000021F7 81C7[1E6A0500]      <2> 		add edi, commandbuf
  2641 000021FD 3C00                <2> 		cmp al, 0
  2642 000021FF 75D9                <2> 		jne getccmdlp
  2643 00002201 FECC                <2> 		dec ah
  2644 00002203 80FC00              <2> 		cmp ah, 0
  2645 00002206 77D2                <2> 		ja getccmdlp
  2646 00002208 47                  <2> 		inc edi
  2647 00002209 81FF[1E7A0500]      <2> 		cmp edi, commandbufend
  2648 0000220F 770D                <2> 		ja fixcmdbufb4morerdpr
  2649 00002211 E915000000          <2> 		jmp morerdprup
  2650                              <2> 	getcmdresetcommandbuf:
  2651 00002216 BF[1E7A0500]        <2> 		mov edi, commandbufend
  2652 0000221B 47                  <2> 		inc edi
  2653 0000221C EBBC                <2> 		jmp getccmdlp
  2654                              <2> 	fixcmdbufb4morerdpr:
  2655 0000221E 4F                  <2> 		dec edi
  2656 0000221F 81EF[1E7A0500]      <2> 		sub edi, commandbufend
  2657 00002225 81C7[1E6A0500]      <2> 		add edi, commandbuf
  2658                              <2> 	morerdprup:
  2659 0000222B 8A07                <2> 		mov al, [edi]
  2660 0000222D 47                  <2> 		inc edi
  2661 0000222E 81EF[1E6A0500]      <2> 		sub edi, commandbuf
  2662 00002234 3C00                <2> 		cmp al, 0
  2663 00002236 0F8400FEFFFF        <2> 		je near rdprintb2
  2664 0000223C 3B3D[126A0500]      <2> 		cmp edi, [commandbufpos]
  2665 00002242 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2666 00002248 81C7[1E6A0500]      <2> 		add edi, commandbuf
  2667 0000224E 8806                <2> 		mov [esi], al
  2668 00002250 46                  <2> 		inc esi
  2669 00002251 57                  <2> 		push edi
  2670 00002252 668B1D[09230000]    <2> 		mov bx, [modkeyrdpr]
  2671 00002259 30E4                <2> 		xor ah, ah
  2672 0000225B E859010000          <2> 		call prcharq
  2673 00002260 5F                  <2> 		pop edi
  2674 00002261 81FF[1E7A0500]      <2> 		cmp edi, commandbufend
  2675 00002267 76C2                <2> 		jbe morerdprup
  2676 00002269 BF[1E6A0500]        <2> 		mov edi, commandbuf
  2677 0000226E EBBB                <2> 		jmp morerdprup
  2678                              <2> 
  2679                              <2> 	rdprdel:
  2680 00002270 BF[68B40300]        <2> 		mov edi, buftxt2
  2681 00002275 8A07                <2> 		mov al, [edi]
  2682 00002277 3C00                <2> 		cmp al, 0
  2683 00002279 0F841DFCFFFF        <2> 		je near rdprintb
  2684 0000227F 8806                <2> 		mov [esi], al
  2685 00002281 3C80                <2> 		cmp al, 0x80
  2686 00002283 7216                <2> 		jb .fn
  2687                              <2> 	.lp:
  2688 00002285 46                  <2> 		inc esi
  2689 00002286 47                  <2> 		inc edi
  2690 00002287 8A07                <2> 		mov al, [edi]
  2691 00002289 3C00                <2> 		cmp al, 0
  2692 0000228B 0F840BFCFFFF        <2> 		je near rdprintb
  2693 00002291 8806                <2> 		mov [esi], al
  2694 00002293 3C80                <2> 		cmp al, 0x80
  2695 00002295 7204                <2> 		jb .fn
  2696 00002297 3CC0                <2> 		cmp al, 0xC0
  2697 00002299 72EA                <2> 		jb .lp
  2698                              <2> 	.fn:
  2699 0000229B E824FEFFFF          <2> 		call shiftbuftxt2lft
  2700 000022A0 E814010000          <2> 		call prcharq
  2701                              <2> 		
  2702                              <2> 	rdprbscheck:
  2703 000022A5 3B35[0B230000]      <2> 		cmp esi, [firstesirdpr]
  2704 000022AB 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2705                              <2> 	goodbscheck:
  2706 000022B1 4E                  <2> 		dec esi
  2707 000022B2 8A46FF              <2> 		mov al, [esi - 1]
  2708 000022B5 C60600              <2> 		mov byte [esi], 0
  2709 000022B8 3CC0                <2> 		cmp al, 0xC0
  2710 000022BA 7309                <2> 		jae .onemore
  2711 000022BC 3C80                <2> 		cmp al, 0x80
  2712 000022BE 73F1                <2> 		jae goodbscheck
  2713 000022C0 E904000000          <2> 		jmp .nomore
  2714                              <2> 	.onemore:
  2715 000022C5 4E                  <2> 		dec esi
  2716 000022C6 C60600              <2> 		mov byte [esi], 0		
  2717                              <2> 	.nomore:
  2718 000022C9 668B1D[09230000]    <2> 		mov bx, [modkeyrdpr]
  2719 000022D0 B008                <2> 		mov al, 8
  2720 000022D2 E99FFCFFFF          <2> 		jmp bscheckequal
  2721                              <2> 		
  2722                              <2> 	shiftbuftxt2:
  2723 000022D7 55                  <2> 		push ebp
  2724 000022D8 89FD                <2> 		mov ebp, edi
  2725                              <2> 	.lp
  2726 000022DA 3C00                <2> 		cmp al, 0
  2727 000022DC 7409                <2> 		je noshiftbuftxt2
  2728 000022DE 47                  <2> 		inc edi
  2729 000022DF 8A27                <2> 		mov ah, [edi]
  2730 000022E1 8807                <2> 		mov [edi], al
  2731 000022E3 88E0                <2> 		mov al, ah
  2732 000022E5 EBF3                <2> 		jmp .lp
  2733                              <2> 	noshiftbuftxt2:
  2734 000022E7 8A4500              <2> 		mov al, [ebp]
  2735 000022EA 5D                  <2> 		pop ebp
  2736 000022EB 3CC0                <2> 		cmp al, 0xC0
  2737 000022ED 7304                <2> 		jae .nofix
  2738 000022EF 3C80                <2> 		cmp al, 0x80
  2739 000022F1 73E4                <2> 		jae shiftbuftxt2
  2740                              <2> 	.nofix:
  2741 000022F3 BF[68B40300]        <2> 		mov edi, buftxt2
  2742 000022F8 4E                  <2> 		dec esi
  2743 000022F9 8A06                <2> 		mov al, [esi]
  2744 000022FB 8807                <2> 		mov [edi], al
  2745 000022FD C60600              <2> 		mov byte [esi], 0
  2746 00002300 66B80800            <2> 		mov ax, 8
  2747 00002304 C3                  <2> 		ret
  2748                              <2> 		
  2749 00002305 0000                <2> axcache dw 0
  2750 00002307 0000                <2> endkeyrdpr dw 0
  2751 00002309 0000                <2> modkeyrdpr dw 0
  2752 0000230B 00000000            <2> firstesirdpr dd 0
  2753 0000230F 00                  <2> commandedit db 0
  2754 00002310 00                  <2> txtmask db 0
  2755 00002311 00000000            <2> buftxtloc dd 0
  2756 00002315 00000000            <2> endbufferrdpr dd 0
  2757 00002319 082000              <2> backcursor db 8," ",0
  2758                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2759                              <2> readchar:
  2760 0000231C E807000000          <2> 	call rdcharint
  2761 00002321 E982DFFFFF          <2> 	jmp timerinterrupt
  2762                              <2> getchar:
  2763 00002326 30C0                <2> 	xor al, al
  2764                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2765 00002328 66C705[8A230000]01- <2> 		mov word [trans], 1
  2766 00002330 00                  <2>
  2767 00002331 3C00                <2> 		cmp al, 0
  2768 00002333 7509                <2> 		jne transcheck
  2769 00002335 66C705[8A230000]00- <2> 		mov word [trans], 0
  2770 0000233D 00                  <2>
  2771                              <2> 	transcheck:
  2772                              <2> 	%ifdef io.serial
  2773                              <2> 		call serial.receive
  2774                              <2> 		xor ah, ah
  2775                              <2> 		cmp al, 13
  2776                              <2> 		je rdenter
  2777                              <2> 	%else
  2778 0000233E E8D5380000          <2> 		call getkey
  2779 00002343 66A1[88230000]      <2> 		mov ax, [lastkey + 2]
  2780 00002349 663D1C00            <2> 		cmp ax, 0x1C
  2781 0000234D 7425                <2> 		je rdenter
  2782                              <2> 	%endif
  2783 0000234F 66A1[86230000]      <2> 		mov ax, [lastkey]
  2784 00002355 668B1D[8A230000]    <2> 		mov bx, [trans]
  2785 0000235C 803D[F65B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2786 00002363 7500                <2> 		jne nospecialtrans
  2787                              <2> 	nospecialtrans:
  2788 00002365 6609C3              <2> 		or bx, ax
  2789 00002368 6681FB0000          <2> 		cmp bx, 0
  2790 0000236D 74CF                <2> 		je transcheck
  2791 0000236F E90C000000          <2> 		jmp rdend
  2792                              <2> 	rdenter:
  2793 00002374 C1E010              <2> 		shl eax, 16
  2794 00002377 66B80A00            <2> 		mov ax, 10
  2795 0000237B A3[86230000]        <2> 		mov [lastkey], eax
  2796                              <2> 	rdend:
  2797 00002380 A1[86230000]        <2> 		mov eax, [lastkey]
  2798 00002385 C3                  <2> 		ret
  2799                              <2> 		
  2800 00002386 00000000            <2> lastkey dd 0
  2801 0000238A 0000                <2> trans dw 0
  2802                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2803                              <2> prntchar:
  2804 0000238C 30E4                <2> 	xor ah, ah
  2805                              <2> %ifdef io.serial
  2806                              <2> 	call prcharint
  2807                              <2> 	jmp timerinterrupt
  2808                              <2> prcharint:	
  2809                              <2> prcharq:
  2810                              <2> 	call serial.send
  2811                              <2> 	ret
  2812                              <2> %else
  2813 0000238E 38FB                <2> cmp bl, bh
  2814 00002390 740A                <2> je prchar.notimer
  2815 00002392 E80B000000          <2> call prcharint
  2816 00002397 E90CDFFFFF          <2> jmp timerinterrupt
  2817                              <2> prchar.notimer:
  2818 0000239C E818000000          <2> 	call prcharq
  2819 000023A1 CF                  <2> 	iret
  2820                              <2> 	
  2821                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2822 000023A2 663DFFFE            <2> 	cmp ax, 0xFEFF
  2823 000023A6 740E                <2> 	je .ret
  2824 000023A8 39C1                <2> 	cmp ecx, eax
  2825 000023AA 740D                <2> 	je prcharq
  2826 000023AC E808000000          <2> 	call prcharq
  2827 000023B1 E8C9040000          <2> 	call termcopy
  2828                              <2> .ret:
  2829 000023B6 C3                  <2> 	ret
  2830 000023B7 00                  <2> termguion db 0
  2831 000023B8 00                  <2> termcopyon db 0
  2832                              <2> prcharq:
  2833 000023B9 C1E310              <2> 	shl ebx, 16
  2834 000023BC 6689C3              <2> 	mov bx, ax
  2835 000023BF 89D8                <2> 	mov eax, ebx
  2836 000023C1 A3[AE250000]        <2> 	mov [charbuf], eax
  2837 000023C6 8B1D[A6250000]      <2> 	mov ebx, [videobufpos]
  2838 000023CC BF[7EBF0300]        <2> 	mov edi, videobuf
  2839 000023D1 01DF                <2> 	add edi, ebx
  2840 000023D3 A1[8A280000]        <2> 	mov eax, [removedvideo]
  2841 000023D8 8907                <2> 	mov [edi], eax
  2842 000023DA A1[AE250000]        <2> 	mov eax, [charbuf]
  2843 000023DF 31D2                <2> 	xor edx, edx
  2844 000023E1 668B15[AA250000]    <2> 	mov dx, [charpos]
  2845 000023E8 31C9                <2> 	xor ecx, ecx
  2846 000023EA 668B0D[AC250000]    <2> 	mov cx, [charxy]
  2847 000023F1 663D0900            <2> 	cmp ax, 9
  2848 000023F5 0F8479000000        <2> 	je near prtab
  2849 000023FB 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2850 000023FF 0F849C000000        <2> 	je near prcr
  2851 00002405 663D0A00            <2> 	cmp ax, 10
  2852 00002409 0F84E5000000        <2> 	je near prnlcr
  2853 0000240F 663D0800            <2> 	cmp ax, 8
  2854 00002413 0F8499000000        <2> 	je near prbs
  2855 00002419 663DFF00            <2> 	cmp ax, 255		;null character
  2856 0000241D 0F8424000000        <2> 	je near donescr
  2857 00002423 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2858 00002427 0F8341000000        <2> 	jae near prnofont
  2859                              <2> donepr:
  2860 0000242D 8907                <2> 	mov [edi], eax
  2861 0000242F 81C704000000        <2> 	add edi, 4
  2862 00002435 FEC2                <2> 	inc dl
  2863                              <2> donecrnl:
  2864 00002437 38CA                <2> 	cmp dl, cl
  2865 00002439 0F83D9000000        <2> 	jae near preol
  2866                              <2> doneeol:
  2867 0000243F 38EE                <2> 	cmp dh, ch
  2868 00002441 0F83EE000000        <2> 	jae near prscr	
  2869                              <2> donescr:
  2870 00002447 89FB                <2> 	mov ebx, edi
  2871 00002449 8B07                <2> 	mov eax, [edi]
  2872 0000244B A3[8A280000]        <2> 	mov [removedvideo], eax
  2873 00002450 81EB[7EBF0300]      <2> 	sub ebx, videobuf
  2874 00002456 891D[A6250000]      <2> 	mov [videobufpos], ebx
  2875 0000245C 668915[AA250000]    <2> 	mov [charpos], dx
  2876 00002463 A1[AE250000]        <2> 	mov eax, [charbuf]
  2877 00002468 89C3                <2> 	mov ebx, eax
  2878 0000246A C1EB10              <2> 	shr ebx, 16
  2879 0000246D C3                  <2> 	ret
  2880                              <2> 	
  2881                              <2> 	prnofont:
  2882 0000246E 66B80200            <2> 		mov ax, 2
  2883 00002472 EBB9                <2> 		jmp donepr
  2884                              <2> 	prtab:
  2885 00002474 8B1D[A2250000]      <2> 		mov ebx, [linebeginpos]
  2886 0000247A 81EF[7EBF0300]      <2> 		sub edi, videobuf
  2887 00002480 29DF                <2> 		sub edi, ebx
  2888 00002482 C1EF05              <2> 		shr edi, 5
  2889 00002485 C1E705              <2> 		shl edi, 5
  2890 00002488 81C720000000        <2> 		add edi, 32
  2891 0000248E C0EA03              <2> 		shr dl, 3
  2892 00002491 C0E203              <2> 		shl dl, 3
  2893 00002494 80C208              <2> 		add dl, 8
  2894 00002497 81C7[7EBF0300]      <2> 		add edi, videobuf
  2895 0000249D 01DF                <2> 		add edi, ebx
  2896 0000249F EB96                <2> 		jmp donecrnl
  2897                              <2> 	
  2898                              <2> 	prcr:
  2899 000024A1 30D2                <2> 		xor dl, dl
  2900 000024A3 BF[7EBF0300]        <2> 		mov edi, videobuf
  2901 000024A8 8B1D[A2250000]      <2> 		mov ebx, [linebeginpos]
  2902 000024AE 01DF                <2> 		add edi, ebx
  2903 000024B0 EB85                <2> 		jmp donecrnl
  2904                              <2> 			
  2905                              <2> 	prbs:
  2906 000024B2 8B1D[A2250000]      <2> 		mov ebx, [linebeginpos]
  2907 000024B8 80FA00              <2> 		cmp dl, 0
  2908 000024BB 7415                <2> 		je prbackline
  2909                              <2> 	prnobmr:
  2910 000024BD 891D[A2250000]      <2> 		mov [linebeginpos], ebx
  2911 000024C3 FECA                <2> 		dec dl
  2912 000024C5 31C0                <2> 		xor eax, eax
  2913 000024C7 81EF04000000        <2> 		sub edi, 4
  2914 000024CD E965FFFFFF          <2> 		jmp donecrnl
  2915                              <2> 	prbackline:
  2916 000024D2 6631DB              <2> 		xor bx, bx
  2917 000024D5 88CA                <2> 		mov dl, cl
  2918 000024D7 80FE00              <2> 		cmp dh, 0
  2919 000024DA 74E1                <2> 		je prnobmr
  2920 000024DC 8B1D[A2250000]      <2> 		mov ebx, [linebeginpos]
  2921 000024E2 6651                <2> 		push cx
  2922 000024E4 31C9                <2> 		xor ecx, ecx
  2923 000024E6 8A0C24              <2> 		mov cl, [esp]
  2924 000024E9 C1E102              <2> 		shl ecx, 2
  2925 000024EC 29CB                <2> 		sub ebx, ecx
  2926 000024EE 6659                <2> 		pop cx
  2927 000024F0 FECE                <2> 		dec dh
  2928 000024F2 EBC9                <2> 		jmp prnobmr
  2929                              <2> 		
  2930                              <2> 	prnlcr:
  2931 000024F4 FEC6                <2> 		inc dh
  2932 000024F6 31DB                <2> 		xor ebx, ebx
  2933 000024F8 30D2                <2> 		xor dl, dl
  2934 000024FA 88CB                <2> 		mov bl, cl
  2935 000024FC 66C1E302            <2> 		shl bx, 2
  2936 00002500 BF[7EBF0300]        <2> 		mov edi, videobuf
  2937 00002505 031D[A2250000]      <2> 		add ebx, [linebeginpos]
  2938 0000250B 891D[A2250000]      <2> 		mov [linebeginpos], ebx
  2939 00002511 01DF                <2> 		add edi, ebx
  2940 00002513 E91FFFFFFF          <2> 		jmp donecrnl
  2941                              <2> 		
  2942                              <2> 	preol:
  2943 00002518 30D2                <2> 		xor dl, dl
  2944 0000251A FEC6                <2> 		inc dh
  2945 0000251C 31DB                <2> 		xor ebx, ebx
  2946 0000251E 88CB                <2> 		mov bl, cl
  2947 00002520 66C1E302            <2> 		shl bx, 2
  2948 00002524 031D[A2250000]      <2> 		add ebx, [linebeginpos]
  2949 0000252A 891D[A2250000]      <2> 		mov [linebeginpos], ebx
  2950 00002530 E90AFFFFFF          <2> 		jmp doneeol
  2951                              <2> 	prscr:
  2952 00002535 FECE                <2> 		dec dh
  2953 00002537 BF[7EBF0300]        <2> 		mov edi, videobuf
  2954 0000253C 31DB                <2> 		xor ebx, ebx
  2955 0000253E 88CB                <2> 		mov bl, cl
  2956 00002540 66C1E302            <2> 		shl bx, 2
  2957 00002544 01FB                <2> 		add ebx, edi
  2958                              <2> 	intscrollloop:
  2959 00002546 8B03                <2> 		mov eax, [ebx]
  2960 00002548 8907                <2> 		mov [edi], eax
  2961 0000254A 81C704000000        <2> 		add edi, 4
  2962 00002550 81C304000000        <2> 		add ebx, 4
  2963 00002556 FEC9                <2> 		dec cl
  2964 00002558 80F900              <2> 		cmp cl, 0
  2965 0000255B 75E9                <2> 		jne intscrollloop
  2966 0000255D 8A0D[AC250000]      <2> 		mov cl, [charxy]
  2967 00002563 FECD                <2> 		dec ch
  2968 00002565 80FD01              <2> 		cmp ch, 1
  2969 00002568 77DC                <2> 		ja intscrollloop
  2970 0000256A 31C0                <2> 		xor eax, eax
  2971 0000256C 81EF[7EBF0300]      <2> 		sub edi, videobuf
  2972 00002572 893D[A2250000]      <2> 		mov [linebeginpos], edi
  2973 00002578 81C7[7EBF0300]      <2> 		add edi, videobuf
  2974 0000257E 89FB                <2> 		mov ebx, edi
  2975                              <2> 	intloopclear:
  2976 00002580 8903                <2> 		mov [ebx], eax
  2977 00002582 81C304000000        <2> 		add ebx, 4
  2978 00002588 FEC9                <2> 		dec cl
  2979 0000258A 80F900              <2> 		cmp cl, 0
  2980 0000258D 75F1                <2> 		jne intloopclear
  2981 0000258F FECD                <2> 		dec ch
  2982 00002591 80FD00              <2> 		cmp ch, 0
  2983 00002594 75EA                <2> 		jne intloopclear
  2984 00002596 668B0D[AC250000]    <2> 		mov cx, [charxy]
  2985 0000259D E9A5FEFFFF          <2> 		jmp donescr
  2986                              <2> 		
  2987 000025A2 00000000            <2> linebeginpos dd 0
  2988 000025A6 00000000            <2> videobufpos: dd 0
  2989 000025AA 0000                <2> charpos db 0,0
  2990 000025AC 501E                <2> charxy db 80,30
  2991 000025AE 00000000            <2> charbuf dd 0
  2992                              <2> %endif
  2993                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2994                              <2> openfile:
  2995 000025B2 E8E43F0000          <2> 	call loadfile
  2996 000025B7 E9ECDCFFFF          <2> 	jmp timerinterrupt
  2997                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2998                              <2> num2str:
  2999 000025BC 3C00                <2> 	cmp al, 0
  3000 000025BE 750A                <2> 	jne num2strb
  3001 000025C0 E8A20C0000          <2> 	call showdec
  3002 000025C5 E9DEDCFFFF          <2> 	jmp timerinterrupt
  3003                              <2> num2strb:
  3004 000025CA E8CE0B0000          <2> 	call showhex
  3005 000025CF E9D4DCFFFF          <2> 	jmp timerinterrupt
  3006                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3007                              <2> str2num:
  3008 000025D4 89F7                <2> 	mov edi, esi
  3009 000025D6 E86E0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3010 000025DB E9C8DCFFFF          <2> 	jmp timerinterrupt
  3011                              <2> 	
  3012                              <1> %ifdef threads.included
  3013                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3014                              <2> forkthread:
  3015                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3016                              <2> 			;returns the PID of the new fork in ebx
  3017                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3018 000025E0 FA                  <2> 	cli
  3019 000025E1 60                  <2> 	pushad
  3020 000025E2 8925[AF260000]      <2> 	mov [.espold], esp
  3021 000025E8 C605[3A670000]01    <2> 	mov byte [threadson], 1
  3022 000025EF 8B1D[3B670000]      <2> 	mov ebx, [currentthread]
  3023 000025F5 C1E302              <2> 	shl ebx, 2
  3024 000025F8 89A3[329A0500]      <2> 	mov [threadlist + ebx], esp
  3025 000025FE C1EB02              <2> 	shr ebx, 2
  3026 00002601 81FB00000000        <2> 	cmp ebx, 0
  3027 00002607 750C                <2> 	jne .simplestack
  3028 00002609 BB[849D0300]        <2> 	mov ebx, stackend
  3029 0000260E 29E3                <2> 	sub ebx, esp
  3030 00002610 E90B000000          <2> 	jmp .stackcalcdone
  3031                              <2> .simplestack:
  3032 00002615 C1E30A              <2> 	shl ebx, 10
  3033 00002618 81C3[32AE0500]      <2> 	add ebx, stack1
  3034 0000261E 29E3                <2> 	sub ebx, esp
  3035                              <2> .stackcalcdone:
  3036 00002620 29DC                <2> 	sub esp, ebx
  3037 00002622 81C4[32AE0500]      <2> 	add esp, stack1
  3038 00002628 8B1D[36670000]      <2> 	mov ebx, [lastthread]
  3039 0000262E C1E308              <2> 	shl ebx, 8
  3040 00002631 01DC                <2> 	add esp, ebx
  3041 00002633 891D[B3260000]      <2> 	mov [.stackend], ebx
  3042                              <2> 
  3043 00002639 89E5                <2> 	mov ebp, esp
  3044 0000263B 8B25[AF260000]      <2> 	mov esp, [.espold]
  3045                              <2> 
  3046 00002641 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3047 00002644 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3048                              <2> 
  3049 00002648 31DB                <2> 	xor ebx, ebx
  3050                              <2> .stackcopy:
  3051 0000264A 668B041C            <2> 	mov ax, [esp + ebx]
  3052 0000264E 6689441D00          <2> 	mov [ebp + ebx], ax
  3053 00002653 81C302000000        <2> 	add ebx, 2
  3054 00002659 3B1D[B3260000]      <2> 	cmp ebx, [.stackend]
  3055 0000265F 72E9                <2> 	jb .stackcopy
  3056                              <2> 
  3057 00002661 31C0                <2> 	xor eax, eax
  3058 00002663 668CC8              <2> 	mov ax, cs
  3059 00002666 89C2                <2> 	mov edx, eax
  3060 00002668 8B4C2428            <2> 	mov ecx, [esp + 40]
  3061 0000266C 81C900020000        <2> 	or ecx, 0x200
  3062                              <2> 	
  3063 00002672 81FE00000000        <2> 	cmp esi, 0
  3064 00002678 7504                <2> 	jne .nochangestack
  3065 0000267A 8B742420            <2> 	mov esi, [esp + 32]
  3066                              <2> .nochangestack:
  3067 0000267E 89F0                <2> 	mov eax, esi
  3068 00002680 89EC                <2> 	mov esp, ebp
  3069                              <2> 
  3070 00002682 89442420            <2> 	mov [esp + 32], eax
  3071 00002686 89542424            <2> 	mov [esp + 36], edx
  3072 0000268A 894C2428            <2> 	mov [esp + 40], ecx
  3073                              <2> 
  3074 0000268E 8B1D[36670000]      <2> 	mov ebx, [lastthread]
  3075 00002694 89A3[329A0500]      <2> 	mov [threadlist + ebx], esp
  3076 0000269A 81C304000000        <2> 	add ebx, 4
  3077 000026A0 891D[36670000]      <2> 	mov [lastthread], ebx
  3078 000026A6 8B25[AF260000]      <2> 	mov esp, [.espold]
  3079 000026AC 61                  <2> 	popad
  3080 000026AD FB                  <2> 	sti
  3081 000026AE CF                  <2> 	iret
  3082                              <2> 
  3083 000026AF 00000000            <2> .espold dd 0
  3084 000026B3 00000000            <2> .stackend dd 0
  3085                              <1> %endif
  3086                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3087                              <2> gettime:
  3088 000026B7 A1[60020000]        <2> 	mov eax, [timeseconds]
  3089 000026BC 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  3090 000026C2 89D9                <2> 	mov ecx, ebx
  3091 000026C4 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3092 000026C7 E9DCDBFFFF          <2> 	jmp timerinterrupt
  3093                              <1> 	%include 'source/interrupts/13_settime.asm'
  3094                              <2> settime:
  3095 000026CC A3[60020000]        <2> 	mov [timeseconds], eax
  3096 000026D1 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  3097 000026D7 E9CCDBFFFF          <2> 	jmp timerinterrupt
  3098                              <2> 	
  3099                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3100                              <2> runcmd:
  3101 000026DC BF[68B80300]        <2> 	mov edi, buftxt
  3102                              <2> cpcmd:
  3103 000026E1 8A06                <2> 	mov al, [esi]
  3104 000026E3 8807                <2> 	mov [edi], al
  3105 000026E5 46                  <2> 	inc esi
  3106 000026E6 47                  <2> 	inc edi
  3107 000026E7 3C00                <2> 	cmp al, 0
  3108 000026E9 75F6                <2> 	jne cpcmd
  3109 000026EB E8B0070000          <2> 	call run
  3110 000026F0 CF                  <2> 	iret
  3111                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3112                              <2> proginfo:
  3113                              <2> 	;mov ebx, variables
  3114 000026F1 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  3115 000026F7 89F7                <2> 	mov edi, esi
  3116 000026F9 31C9                <2> 	xor ecx, ecx
  3117                              <2> getcommandzeroes:
  3118 000026FB 8A07                <2> 	mov al, [edi]
  3119 000026FD 47                  <2> 	inc edi
  3120 000026FE 3C3B                <2> 	cmp al, ';'
  3121 00002700 740B                <2> 	je nomorezeroes
  3122 00002702 3C00                <2> 	cmp al, 0
  3123 00002704 7407                <2> 	je nomorezeroes
  3124 00002706 3C20                <2> 	cmp al, ' '
  3125 00002708 75F1                <2> 	jne getcommandzeroes
  3126 0000270A 41                  <2> 	inc ecx
  3127 0000270B EBEE                <2> 	jmp getcommandzeroes
  3128                              <2> nomorezeroes:
  3129 0000270D 41                  <2> 	inc ecx
  3130 0000270E 4F                  <2> 	dec edi
  3131 0000270F 8B1D[F4A30300]      <2> 	mov ebx, [uid]
  3132 00002715 8B15[3B670000]      <2> 	mov edx, [currentthread]
  3133 0000271B CF                  <2> 	iret
  3134                              <2> 	
  3135                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3136                              <2> hooksig: ;hook code in ESI to signal in AL
  3137 0000271C 3C00                <2> 	cmp al, 0
  3138 0000271E 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3139                              <2> ;	xor ebx, ebx
  3140                              <2> ;	mov bl, al
  3141                              <2> ;	shl bl, 2
  3142 00002720 BF[E49D0300]        <2> 	mov edi, sigtable
  3143 00002725 8937                <2> 	mov [edi], esi
  3144                              <2> .quit:
  3145 00002727 E97CDBFFFF          <2> 	jmp timerinterrupt
  3146                              <1> %ifdef gui.included
  3147                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3148                              <2> guiint:
  3149 0000272C 3CFD                <2> 	cmp al, 253
  3150 0000272E 0F8473000000        <2> 	je near .getinfo
  3151 00002734 803D[9C890000]01    <2> 	cmp byte [guion], 1
  3152 0000273B 0F8550000000        <2> 	jne near .nogui
  3153 00002741 3C00                <2> 	cmp al, 0
  3154 00002743 0F844D000000        <2> 	je near .clear
  3155 00002749 3C01                <2> 	cmp al, 1
  3156 0000274B 0F84A8000000        <2> 	je near .putpixel
  3157 00002751 3C02                <2> 	cmp al, 2
  3158 00002753 0F84AD000000        <2> 	je near .drawtext
  3159 00002759 3C03                <2> 	cmp al, 3
  3160 0000275B 0F84C0000000        <2> 	je near .drawline
  3161 00002761 3C04                <2> 	cmp al, 4
  3162 00002763 0F84CB000000        <2> 	je near .drawcircle
  3163 00002769 3C05                <2> 	cmp al, 5
  3164 0000276B 0F84D3000000        <2> 	je near .fillcircle
  3165 00002771 3C06                <2> 	cmp al, 6
  3166 00002773 0F84DB000000        <2> 	je near .drawsquare
  3167 00002779 3C07                <2> 	cmp al, 7
  3168 0000277B 0F84E6000000        <2> 	je near .fillsquare
  3169 00002781 3CFE                <2> 	cmp al, 254
  3170 00002783 0F8446000000        <2> 	je near .setinfo
  3171 00002789 3CFF                <2> 	cmp al, 255
  3172 0000278B 0F8443000000        <2> 	je near .reset
  3173                              <2> .nogui:
  3174 00002791 E912DBFFFF          <2> 	jmp timerinterrupt
  3175                              <2> 
  3176                              <2> .clear:		;color in bx
  3177 00002796 66891D[206E0000]    <2> 	mov [background], bx
  3178                              <2> %ifdef gui.background
  3179                              <2> 	mov ebx, [backgroundimage]
  3180                              <2> 	cmp ebx, 0
  3181                              <2> 	je .clearit
  3182                              <2> 	mov dword [backgroundimage], 0
  3183                              <2> 	mov [.bgi], ebx
  3184                              <2> .clearit:
  3185                              <2> %endif
  3186 0000279D E832460000          <2> 	call guiclear
  3187 000027A2 E901DBFFFF          <2> 	jmp timerinterrupt
  3188                              <2> 	
  3189                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3190 000027A7 31DB                <2> 	xor ebx, ebx
  3191 000027A9 31C9                <2> 	xor ecx, ecx
  3192 000027AB 31D2                <2> 	xor edx, edx
  3193 000027AD 381D[9C890000]      <2> 	cmp [guion], bl
  3194 000027B3 74DC                <2> 	je .nogui
  3195 000027B5 668B1D[206E0000]    <2> 	mov bx, [background]
  3196 000027BC 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  3197 000027C3 668B0D[4E570000]    <2> 	mov cx, [resolutiony]
  3198 000027CA E9D9DAFFFF          <2> 	jmp timerinterrupt
  3199                              <2> 	
  3200                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3201 000027CF E9D4DAFFFF          <2> 	jmp timerinterrupt
  3202                              <2> .reset:		;resets the screen to the original settings
  3203 000027D4 66BBCF7B            <2> 	mov bx, background.original
  3204 000027D8 66891D[206E0000]    <2> 	mov [background], bx
  3205 000027DF 66BBFFFF            <2> 	mov bx, 0xFFFF
  3206 000027E3 66891D[DD740000]    <2> 	mov [colorfont2], bx
  3207                              <2> %ifdef gui.background
  3208                              <2> 	mov ebx, [backgroundimage]
  3209                              <2> 	cmp ebx, 0
  3210                              <2> 	jne .resetit
  3211                              <2> 	mov ebx, [.bgi]
  3212                              <2> 	mov [backgroundimage], ebx
  3213                              <2> .resetit:
  3214                              <2> %endif
  3215 000027EA E8E5450000          <2> 	call guiclear
  3216 000027EF E830460000          <2> 	call reloadallgraphics
  3217 000027F4 E9AFDAFFFF          <2> 	jmp timerinterrupt
  3218                              <2> 
  3219                              <2> %ifdef gui.background
  3220                              <2> 	.bgi dd 0
  3221                              <2> %endif
  3222                              <2> 	
  3223                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3224 000027F9 6689DE              <2> 	mov si, bx
  3225 000027FC E8325C0000          <2> 	call putpixel
  3226 00002801 E9A2DAFFFF          <2> 	jmp timerinterrupt
  3227                              <2> 
  3228                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3229 00002806 66D1E2              <2> 	shl dx, 1
  3230 00002809 66891D[DD740000]    <2> 	mov [colorfont2], bx
  3231 00002810 66893D[206E0000]    <2> 	mov [background], di
  3232 00002817 E8594C0000          <2> 	call showstring2
  3233 0000281C E987DAFFFF          <2> 	jmp timerinterrupt
  3234                              <2> 
  3235                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3236 00002821 6689F0              <2> 	mov ax, si
  3237 00002824 6689DE              <2> 	mov si, bx
  3238 00002827 6689FB              <2> 	mov bx, di
  3239 0000282A E879440000          <2> 	call drawline
  3240 0000282F E974DAFFFF          <2> 	jmp timerinterrupt
  3241                              <2> 
  3242                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3243 00002834 6689F0              <2> 	mov ax, si
  3244 00002837 6689DE              <2> 	mov si, bx
  3245 0000283A E8F23F0000          <2> 	call drawcircle
  3246 0000283F E964DAFFFF          <2> 	jmp timerinterrupt
  3247                              <2> 
  3248                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3249 00002844 6689F0              <2> 	mov ax, si
  3250 00002847 6689DE              <2> 	mov si, bx
  3251 0000284A E8F4400000          <2> 	call fillcircle
  3252 0000284F E954DAFFFF          <2> 	jmp timerinterrupt
  3253                              <2> 	
  3254                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3255 00002854 6689F0              <2> 	mov ax, si
  3256 00002857 6689DE              <2> 	mov si, bx
  3257 0000285A 6689FB              <2> 	mov bx, di
  3258 0000285D E892460000          <2> 	call drawsquare
  3259 00002862 E941DAFFFF          <2> 	jmp timerinterrupt
  3260                              <2> 
  3261                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3262 00002867 6689F0              <2> 	mov ax, si
  3263 0000286A 6689DE              <2> 	mov si, bx
  3264 0000286D 6689FB              <2> 	mov bx, di
  3265 00002870 E8F4460000          <2> 	call fillsquare
  3266 00002875 E92EDAFFFF          <2> 	jmp timerinterrupt
  3267                              <1> %endif
  3268                              <1> %ifdef sound.included
  3269                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3270                              <1> %endif
  3271                              <1> %ifdef network.included
  3272                              <1> 	%include 'source/interrupts/19_netint.asm'
  3273                              <2> netint:
  3274 0000287A E929DAFFFF          <2> 	jmp timerinterrupt
  3275                              <1> %endif
  3276                              <1> 
  3277                              <1> termcopy:
  3278                              <1> %ifdef io.serial
  3279                              <1> 	ret
  3280                              <1> %else
  3281                              <1> %ifdef terminal.vsync
  3282                              <1> 	mov byte [termcopyneeded], 1
  3283                              <1> 	ret
  3284                              <1> %else
  3285 0000287F E80A000000          <1> 	call newtermcopy
  3286 00002884 C3                  <1> 	ret
  3287                              <1> %endif
  3288 00002885 00                  <1> 	termcopyneeded db 0
  3289 00002886 00000000            <1> 	termcursorpos dd 0
  3290 0000288A 00000000            <1> 	removedvideo dd 0
  3291                              <1> newtermcopy:
  3292 0000288E 60                  <1> 	pusha
  3293 0000288F BF[7EBF0300]        <1> 	mov edi, videobuf
  3294 00002894 31DB                <1> 	xor ebx, ebx
  3295 00002896 881D[85280000]      <1> 	mov [termcopyneeded], bl
  3296 0000289C 8B1D[A6250000]      <1> 	mov ebx, [videobufpos]
  3297 000028A2 01DF                <1> 	add edi, ebx
  3298 000028A4 893D[86280000]      <1> 	mov [termcursorpos], edi
  3299 000028AA E8E2000000          <1> 	call switchtermcursor
  3300 000028AF 803D[9C890000]00    <1> 	cmp byte [guion], 0
  3301 000028B6 0F8420000000        <1> 	je near nowincopy
  3302                              <1> %ifdef gui.included
  3303 000028BC C605[447C0000]00    <1> 	mov byte [mouseselecton], 0
  3304 000028C3 C605[B8230000]01    <1> 	mov byte [termcopyon], 1
  3305 000028CA 803D[B7230000]01    <1> 	cmp byte [termguion], 1
  3306 000028D1 0F84F7500000        <1> 	je near windowvideocopy
  3307                              <1> %endif
  3308 000028D7 E9AE000000          <1> 	jmp nocopytermatall
  3309                              <1> nowincopy:
  3310 000028DC BE00000A00          <1> 	mov esi, 0xA0000
  3311 000028E1 A1[41020000]        <1> 	mov eax, [basecache]
  3312 000028E6 C1E004              <1> 	shl eax, 4
  3313 000028E9 29C6                <1> 	sub esi, eax
  3314 000028EB BF[7EBF0300]        <1> 	mov edi, videobuf
  3315 000028F0 31C9                <1> 	xor ecx, ecx
  3316 000028F2 668B0D[AC250000]    <1> 	mov cx, [charxy]
  3317                              <1> nowincopy2:
  3318 000028F9 8B07                <1> 	mov eax, [edi]
  3319 000028FB 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3320 00002901 8B1F                <1> 	mov ebx, [edi]
  3321 00002903 8907                <1> 	mov [edi], eax
  3322 00002905 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3323 0000290B 81C702000000        <1> 	add edi, 2
  3324 00002911 39D8                <1> 	cmp eax, ebx
  3325 00002913 744B                <1> 	je nopresentwinfont
  3326 00002915 81EF02000000        <1> 	sub edi, 2
  3327 0000291B BD[E68B0000]        <1> 	mov ebp, fonts
  3328 00002920 31C0                <1> 	xor eax, eax
  3329 00002922 668B07              <1> 	mov ax, [edi]
  3330 00002925 C1E004              <1> 	shl eax, 4
  3331 00002928 01C5                <1> 	add ebp, eax
  3332 0000292A 81C702000000        <1> 	add edi, 2
  3333 00002930 668B1F              <1> 	mov bx, [edi]
  3334 00002933 31D2                <1> 	xor edx, edx
  3335 00002935 8A15[AC250000]      <1> 	mov dl, [charxy]
  3336 0000293B C1C110              <1> 	rol ecx, 16
  3337 0000293E B110                <1> 	mov cl, 16
  3338                              <1> nowinfont:
  3339 00002940 8A4500              <1> 	mov al, [ebp]
  3340 00002943 D0C8                <1> 	ror al, 1
  3341 00002945 80FB80              <1> 	cmp bl, 0x80
  3342 00002948 7202                <1> 	jb notnotfont
  3343 0000294A F6D0                <1> 	not al
  3344                              <1> notnotfont:
  3345 0000294C 8806                <1> 	mov [esi], al
  3346 0000294E 01D6                <1> 	add esi, edx
  3347 00002950 45                  <1> 	inc ebp
  3348 00002951 FEC9                <1> 	dec cl
  3349 00002953 80F900              <1> 	cmp cl, 0
  3350 00002956 75E8                <1> 	jne nowinfont
  3351 00002958 C1E204              <1> 	shl edx, 4
  3352 0000295B 29D6                <1> 	sub esi, edx
  3353 0000295D C1C110              <1> 	rol ecx, 16
  3354                              <1> nopresentwinfont:
  3355 00002960 81C702000000        <1> 	add edi, 2
  3356 00002966 46                  <1> 	inc esi
  3357 00002967 FEC9                <1> 	dec cl
  3358 00002969 80F900              <1> 	cmp cl, 0
  3359 0000296C 758B                <1> 	jne nowincopy2
  3360 0000296E 8A0D[AC250000]      <1> 	mov cl, [charxy]
  3361 00002974 31D2                <1> 	xor edx, edx
  3362 00002976 88CA                <1> 	mov dl, cl
  3363 00002978 29D6                <1> 	sub esi, edx
  3364 0000297A C1E204              <1> 	shl edx, 4
  3365 0000297D 01D6                <1> 	add esi, edx
  3366 0000297F FECD                <1> 	dec ch
  3367 00002981 80FD00              <1> 	cmp ch, 0
  3368 00002984 0F856FFFFFFF        <1> 	jne nowincopy2
  3369                              <1> nocopytermatall:
  3370 0000298A E802000000          <1> 	call switchtermcursor
  3371 0000298F 61                  <1> 	popa
  3372 00002990 C3                  <1> 	ret
  3373                              <1> 	
  3374                              <1> switchtermcursor:
  3375 00002991 8B3D[86280000]      <1> 	mov edi, [termcursorpos]
  3376 00002997 668B4702            <1> 	mov ax, [edi + 2]
  3377 0000299B 668B1F              <1> 	mov bx, [edi]
  3378 0000299E 663D8000            <1> 	cmp ax, 0x80
  3379 000029A2 7209                <1> 	jb movlargecursorterm
  3380 000029A4 66B80700            <1> 	mov ax, 7
  3381 000029A8 E904000000          <1> 	jmp movedcursorterm
  3382                              <1> movlargecursorterm:
  3383 000029AD 66B8F000            <1> 	mov ax, 0xF0
  3384                              <1> movedcursorterm:
  3385 000029B1 66894702            <1> 	mov [edi + 2], ax
  3386 000029B5 6681FB0000          <1> 	cmp bx, 0
  3387 000029BA 7507                <1> 	jne fixednocursorterm
  3388 000029BC 66BB2000            <1> 	mov bx, ' '
  3389 000029C0 66891F              <1> 	mov [edi], bx
  3390                              <1> fixednocursorterm:
  3391 000029C3 C3                  <1> 	ret
  3392                              <1> %endif
  3393                                      %include "source/dosints.asm"
  3394                              <1> int20h:
  3395 000029C4 66B8004C            <1> mov ax, 0x4C00
  3396                              <1> int21h:
  3397                              <1> dostosolleros:
  3398 000029C8 6650                <1> 	push ax
  3399 000029CA 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3400 000029CE 8ED8                <1> 	mov ds, ax
  3401 000029D0 8EC0                <1> 	mov es, ax
  3402 000029D2 8EE0                <1> 	mov fs, ax
  3403 000029D4 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3404 000029D8 8EE8                <1> 	mov gs, ax
  3405 000029DA 6658                <1> 	pop ax
  3406 000029DC 9C                  <1> 	pushf
  3407 000029DD 60                  <1> 	pusha
  3408 000029DE 80FC01              <1> 	cmp ah, 1
  3409 000029E1 0F8449000000        <1> 	je near dosgchar
  3410 000029E7 80FC02              <1> 	cmp ah, 2
  3411 000029EA 0F8447000000        <1> 	je near doswchar
  3412 000029F0 80FC09              <1> 	cmp ah, 9
  3413 000029F3 0F8449000000        <1> 	je near dosprintstr
  3414 000029F9 80FC0A              <1> 	cmp ah, 0xA
  3415 000029FC 0F8456000000        <1> 	je near dosgetstr
  3416 00002A02 80FC2B              <1> 	cmp ah, 0x2B
  3417 00002A05 0F8492000000        <1> 	je near dosgetdate
  3418 00002A0B 80FC2C              <1> 	cmp ah, 0x2C
  3419 00002A0E 0F84AC000000        <1> 	je near dosgettime
  3420 00002A14 80FC4C              <1> 	cmp ah, 0x4C
  3421 00002A17 0F84C1000000        <1> 	je near dosexit
  3422                              <1> backtodos:
  3423 00002A1D 61                  <1> 	popa
  3424 00002A1E 9D                  <1> 	popf
  3425 00002A1F 6650                <1> 	push ax
  3426 00002A21 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3427 00002A25 8ED8                <1> 	mov ds, ax
  3428 00002A27 8EC0                <1> 	mov es, ax
  3429 00002A29 8EE0                <1> 	mov fs, ax
  3430 00002A2B 8EE8                <1> 	mov gs, ax
  3431 00002A2D 6658                <1> 	pop ax
  3432 00002A2F CF                  <1> 	iret
  3433                              <1> 
  3434                              <1> dosgchar:
  3435 00002A30 E8F1F8FFFF          <1> 	call getchar
  3436 00002A35 EBE6                <1> 	jmp backtodos
  3437                              <1> 	
  3438                              <1> doswchar:
  3439 00002A37 88D0                <1> 	mov al, dl
  3440 00002A39 B307                <1> 	mov bl, 7
  3441 00002A3B E862F9FFFF          <1> 	call prcharint
  3442 00002A40 EBDB                <1> 	jmp backtodos
  3443                              <1> 	
  3444                              <1> dosprintstr:
  3445 00002A42 31F6                <1> 	xor esi, esi
  3446 00002A44 6689D6              <1> 	mov si, dx
  3447 00002A47 81C600004000        <1> 	add esi, dosprogloc
  3448 00002A4D B024                <1> 	mov al, "$"
  3449 00002A4F B307                <1> 	mov bl, 7
  3450 00002A51 E8DCF2FFFF          <1> 	call printint
  3451 00002A56 EBC5                <1> 	jmp backtodos
  3452                              <1> 	
  3453                              <1> dosgetstr:
  3454 00002A58 31F6                <1> 	xor esi, esi
  3455 00002A5A 6689D6              <1> 	mov si, dx
  3456 00002A5D 81C600004000        <1> 	add esi, dosprogloc
  3457 00002A63 B900000000          <1> 	mov ecx, 0
  3458 00002A68 8A0E                <1> 	mov cl, [esi]
  3459 00002A6A 81C602000000        <1> 	add esi, 2
  3460 00002A70 89F7                <1> 	mov edi, esi
  3461 00002A72 8935[992A0000]      <1> 	mov [stringstart], esi
  3462 00002A78 01CF                <1> 	add edi, ecx
  3463 00002A7A B00A                <1> 	mov al, 10
  3464 00002A7C B307                <1> 	mov bl, 7
  3465 00002A7E E8EFF3FFFF          <1> 	call rdprintdos
  3466 00002A83 89F1                <1> 	mov ecx, esi
  3467 00002A85 2B0D[992A0000]      <1> 	sub ecx, [stringstart]
  3468 00002A8B 8B35[992A0000]      <1> 	mov esi, [stringstart]
  3469 00002A91 884EFF              <1> 	mov [esi - 1], cl
  3470 00002A94 884EFE              <1> 	mov [esi - 2], cl
  3471 00002A97 EB84                <1> 	jmp backtodos
  3472 00002A99 00000000            <1> stringstart dd 0
  3473                              <1> 
  3474                              <1> dosgetdate:
  3475 00002A9D E8B0250000          <1> 	call time
  3476 00002AA2 8A0D[1A520000]      <1> 	mov cl, [RTCtimeYear]
  3477 00002AA8 B500                <1> 	mov ch, 0
  3478 00002AAA 6681C1D007          <1> 	add cx, 2000
  3479 00002AAF 8A35[19520000]      <1> 	mov dh, [RTCtimeMonth]
  3480 00002AB5 8A15[18520000]      <1> 	mov dl, [RTCtimeDay]
  3481 00002ABB E95DFFFFFF          <1> 	jmp backtodos
  3482                              <1> 
  3483                              <1> dosgettime:
  3484 00002AC0 E88D250000          <1> 	call time
  3485 00002AC5 8A2D[17520000]      <1> 	mov ch, [RTCtimeHour]
  3486 00002ACB 8A0D[16520000]      <1> 	mov cl, [RTCtimeMinute]
  3487 00002AD1 8A35[15520000]      <1> 	mov dh, [RTCtimeSecond]
  3488 00002AD7 B200                <1> 	mov dl, 0
  3489 00002AD9 E93FFFFFFF          <1> 	jmp backtodos
  3490                              <1> 	
  3491                              <1> dosexit:
  3492 00002ADE BE[77890000]        <1> 	mov esi, line
  3493 00002AE3 E843F2FFFF          <1> 	call print
  3494 00002AE8 61                  <1> 	popa
  3495 00002AE9 9D                  <1> 	popf
  3496 00002AEA 8B25[E8A10300]      <1> 	mov esp, [previousstack]
  3497 00002AF0 31DB                <1> 	xor ebx, ebx
  3498 00002AF2 88C3                <1> 	mov bl, al
  3499 00002AF4 80FB00              <1> 	cmp bl, 0
  3500 00002AF7 0F85B9F1FFFF        <1> 	jne near exitprog.error
  3501 00002AFD C3                  <1> 	ret
  3502                                      %include "source/solleros.asm"
  3503                              <1> 	;SOLLEROS.ASM
  3504                              <1> os:
  3505                              <1> setdefenv:
  3506 00002AFE B02F                <1> 	mov al, '/'
  3507 00002B00 A2[F4A10300]        <1> 	mov [currentfolder], al
  3508 00002B05 B801000000          <1> 	mov eax, 1
  3509 00002B0A A3[F0A10300]        <1> 	mov [currentfolderloc], eax
  3510 00002B0F E8C6F2FFFF          <1> 	call clear
  3511                              <1> 	
  3512                              <1> bootfilecheck:
  3513 00002B14 803D[F8A30300]01    <1> 	cmp byte [ranboot], 1
  3514 00002B1B 0F8421000000        <1> 	je near nobootfile
  3515                              <1> 	%ifdef hardware.automatic
  3516 00002B21 E848360000          <1> 		call initializelater ;Initialize components that have debug messages
  3517                              <1> 	%endif
  3518 00002B26 BF[36890000]        <1> 	mov edi, bootfilename
  3519 00002B2B BE00004000          <1> 	mov esi, 0x400000
  3520 00002B30 E8663A0000          <1> 	call loadfile
  3521 00002B35 81FA00000000        <1> 	cmp edx, 0
  3522 00002B3B 7505                <1> 	jne nobootfile
  3523 00002B3D E8B20D0000          <1> 	call progbatchfound
  3524                              <1> nobootfile:	
  3525 00002B42 C605[F8A30300]01    <1> 	mov byte [ranboot], 1
  3526                              <1> 
  3527 00002B49 BE[03000000]        <1> 	mov esi, signature
  3528                              <1> .sigcopyloop:	;this prevents an odd error
  3529 00002B4E 658A06              <1> 	mov al, [gs:esi]
  3530 00002B51 8806                <1> 	mov [esi], al
  3531 00002B53 46                  <1> 	inc esi
  3532 00002B54 81FE[1D000000]      <1> 	cmp esi, signatureend
  3533 00002B5A 72F2                <1> 	jb .sigcopyloop
  3534                              <1> 	
  3535 00002B5C BE[03000000]        <1> 	mov esi, signature
  3536 00002B61 E8C5F1FFFF          <1> 	call print
  3537 00002B66 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3538 00002B6C E8F6060000          <1> 	call showdec
  3539 00002B71 BE[77890000]        <1> 	mov esi, line
  3540 00002B76 E8B0F1FFFF          <1> 	call print
  3541 00002B7B BE[53890000]        <1> 	mov esi, userask
  3542 00002B80 E8A6F1FFFF          <1> 	call print
  3543                              <1> usercheck:
  3544 00002B85 BE[68B80300]        <1> 	mov esi, buftxt
  3545 00002B8A BF[68BC0300]        <1> 	mov edi, buftxtend
  3546 00002B8F B00A                <1> 	mov al, 10
  3547 00002B91 E8C8F2FFFF          <1> 	call rdprint
  3548 00002B96 56                  <1> 	push esi
  3549 00002B97 BE[5D890000]        <1> 	mov esi, pwdask
  3550 00002B9C E88AF1FFFF          <1> 	call print
  3551 00002BA1 5E                  <1> 	pop esi
  3552 00002BA2 46                  <1> 	inc esi
  3553 00002BA3 8935[982C0000]      <1> 	mov [esipass], esi
  3554                              <1> passcheck:
  3555 00002BA9 E878F7FFFF          <1> 	call getchar
  3556 00002BAE 3C0A                <1> 	cmp al, 10
  3557 00002BB0 0F8438000000        <1> 	je near gotpass
  3558 00002BB6 3C08                <1> 	cmp al, 8
  3559 00002BB8 0F8412000000        <1> 	je near backpass
  3560 00002BBE 8806                <1> 	mov [esi], al
  3561 00002BC0 46                  <1> 	inc esi
  3562 00002BC1 30E4                <1> 	xor ah, ah
  3563 00002BC3 B02A                <1> 	mov al, "*"
  3564 00002BC5 E8D8F7FFFF          <1> 	call prcharint
  3565 00002BCA EBDD                <1> 	jmp passcheck
  3566 00002BCC 08200800            <1> backcursor2 db 8," ",8,0
  3567                              <1> backpass:
  3568 00002BD0 3B35[982C0000]      <1> 	cmp esi, [esipass]
  3569 00002BD6 0F84CDFFFFFF        <1> 	je near passcheck
  3570 00002BDC 4E                  <1> 	dec esi
  3571 00002BDD C60600              <1> 	mov byte [esi], 0
  3572 00002BE0 56                  <1> 	push esi
  3573 00002BE1 BE[CC2B0000]        <1> 	mov esi, backcursor2
  3574 00002BE6 E840F1FFFF          <1> 	call print
  3575 00002BEB 5E                  <1> 	pop esi
  3576 00002BEC EBBB                <1> 	jmp passcheck
  3577                              <1> gotpass:
  3578 00002BEE B00A                <1> 	mov al, 10
  3579 00002BF0 E8ADF7FFFF          <1> 	call prcharint
  3580 00002BF5 30C0                <1> 	xor al, al
  3581 00002BF7 31C9                <1> 	xor ecx, ecx
  3582 00002BF9 8806                <1> 	mov [esi], al
  3583 00002BFB BB[79890000]        <1> 	mov ebx, userlst
  3584                              <1> userfind:
  3585 00002C00 BE[68B80300]        <1> 	mov esi, buftxt
  3586 00002C05 8A06                <1> 	mov al, [esi]
  3587 00002C07 3C00                <1> 	cmp al, 0
  3588 00002C09 0F84EFFEFFFF        <1> 	je near os
  3589 00002C0F 891D[9C2C0000]      <1> 	mov [usercache], ebx
  3590 00002C15 E860030000          <1> 	call tester
  3591 00002C1A 3C01                <1> 	cmp al, 1
  3592 00002C1C 7416                <1> 	je pwdtest
  3593 00002C1E 41                  <1> 	inc ecx
  3594                              <1> nxtuser:
  3595 00002C1F 8A03                <1> 	mov al, [ebx]
  3596 00002C21 43                  <1> 	inc ebx
  3597 00002C22 3C00                <1> 	cmp al, 0
  3598 00002C24 75F9                <1> 	jne nxtuser
  3599 00002C26 81FB[9C890000]      <1> 	cmp ebx, userlstend
  3600 00002C2C 0F83CCFEFFFF        <1> 	jae near os
  3601 00002C32 EBCC                <1> 	jmp userfind
  3602                              <1> pwdtest:
  3603 00002C34 46                  <1> 	inc esi
  3604 00002C35 43                  <1> 	inc ebx
  3605 00002C36 E83F030000          <1> 	call tester
  3606 00002C3B 3C01                <1> 	cmp al, 1
  3607 00002C3D 7402                <1> 	je pwdrgt
  3608 00002C3F EBDE                <1> 	jmp nxtuser
  3609                              <1> pwdrgt:
  3610 00002C41 D1E9                <1> 	shr ecx, 1
  3611 00002C43 890D[F4A30300]      <1> 	mov [uid], ecx
  3612 00002C49 E88CF1FFFF          <1> 	call clear
  3613 00002C4E 31C9                <1> 	xor ecx, ecx
  3614 00002C50 41                  <1> 	inc ecx
  3615 00002C51 890D[126A0500]      <1> 	mov [commandbufpos], ecx
  3616                              <1> returnfromexp:
  3617 00002C57 66B90002            <1> 	mov cx, 200h
  3618 00002C5B BE[68B80300]        <1> 	mov esi, buftxt
  3619 00002C60 8935[762F0000]      <1> 	mov [currentcommandloc], esi
  3620 00002C66 E825000000          <1> 	call bufclr
  3621                              <1> clearolddata:
  3622 00002C6B 31C0                <1> 	xor eax, eax
  3623 00002C6D A2[F9A30300]        <1> 	mov [IFON], al
  3624 00002C72 A2[FAA30300]        <1> 	mov [IFTRUE], al
  3625 00002C77 A2[62A40300]        <1> 	mov [BATCHISON], al
  3626 00002C7C A3[5EA40300]        <1> 	mov [BATCHPOS], eax
  3627 00002C81 A2[63A40300]        <1> 	mov [LOOPON], al
  3628 00002C86 A3[64A40300]        <1> 	mov [LOOPPOS], eax
  3629 00002C8B E933000000          <1> 	jmp nwcmd
  3630                              <1> bufclr:	
  3631 00002C90 30C0                <1> 	xor al, al
  3632 00002C92 8806                <1> 	mov [esi], al
  3633 00002C94 46                  <1> 	inc esi
  3634 00002C95 E2F9                <1> 	loop bufclr
  3635 00002C97 C3                  <1> 	ret
  3636                              <1> 
  3637 00002C98 00000000            <1> esipass dd 0
  3638 00002C9C [79890000]          <1> usercache dd userlst
  3639                              <1> 	
  3640                              <1> buftxtclear:
  3641 00002CA0 30C0                <1> 	xor al, al
  3642 00002CA2 BE[68B80300]        <1> 	mov esi, buftxt
  3643 00002CA7 81FE[68BC0300]      <1> clearbuftxt: cmp esi, buf2
  3644 00002CAD 730E                <1> 	jae retbufclr
  3645 00002CAF 8806                <1> 	mov [esi], al
  3646 00002CB1 46                  <1> 	inc esi
  3647 00002CB2 EBF3                <1> 	jmp clearbuftxt
  3648                              <1> 
  3649 00002CB4 39DE                <1> clearitbuf: cmp esi, ebx
  3650 00002CB6 7305                <1> 	jae retbufclr
  3651 00002CB8 8806                <1> 	mov [esi], al
  3652 00002CBA 46                  <1> 	inc esi
  3653 00002CBB EBF7                <1> 	jmp clearitbuf
  3654 00002CBD C3                  <1> retbufclr: ret
  3655                              <1> 
  3656 00002CBE E900000000          <1> full:	jmp nwcmd
  3657                              <1> 
  3658                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3659                              <1> nwcmd:
  3660 00002CC3 FB                  <1> 	sti
  3661 00002CC4 31C0                <1> 	xor eax, eax
  3662 00002CC6 3905[982E0000]      <1> 	cmp [nextcommandloc], eax
  3663 00002CCC 7413                <1> 	je nomultiplecommand
  3664 00002CCE 8B35[982E0000]      <1> 	mov esi, [nextcommandloc]
  3665 00002CD4 8935[9C2E0000]      <1> 	mov [thiscommandloc], esi
  3666 00002CDA E8C6010000          <1> 	call fixvariables
  3667 00002CDF EBE2                <1> 	jmp nwcmd
  3668                              <1> nomultiplecommand:
  3669 00002CE1 A3[9C2E0000]        <1> 	mov [thiscommandloc], eax
  3670 00002CE6 3805[3A670000]      <1> 	cmp [threadson], al
  3671 00002CEC 7405                <1> 	je noclinwcmd
  3672 00002CEE A2[3A670000]        <1> 	mov [threadson], al
  3673                              <1> noclinwcmd:
  3674 00002CF3 B001                <1> 	mov al, 1
  3675 00002CF5 3805[62A40300]      <1> 	cmp [BATCHISON], al
  3676 00002CFB 7501                <1> 	jne cancel
  3677 00002CFD C3                  <1> 	ret
  3678 00002CFE 30C0                <1> cancel:	xor al, al
  3679 00002D00 A2[F9A30300]        <1> 	mov [IFON], al
  3680 00002D05 A2[62A40300]        <1> 	mov [BATCHISON], al
  3681 00002D0A B05B                <1> 	mov al, '['
  3682 00002D0C 66BB0700            <1> 	mov bx, 7
  3683 00002D10 E8A4F6FFFF          <1> 	call prcharq
  3684 00002D15 8B35[9C2C0000]      <1> 	mov esi, [usercache]
  3685 00002D1B E8ECEFFFFF          <1> 	call printquiet
  3686 00002D20 BE[67890000]        <1> 	mov esi, computer
  3687 00002D25 E8E2EFFFFF          <1> 	call printquiet
  3688 00002D2A BE[F4A10300]        <1> 	mov esi, currentfolder
  3689 00002D2F 0335[ECA10300]      <1> 	add esi, [lastfolderloc]
  3690 00002D35 E8D2EFFFFF          <1> 	call printquiet
  3691 00002D3A BE[72890000]        <1> 	mov esi, endprompt
  3692 00002D3F E8E7EFFFFF          <1> 	call print
  3693 00002D44 E857FFFFFF          <1> 	call buftxtclear
  3694 00002D49 BE[68B80300]        <1> 	mov esi, buftxt
  3695 00002D4E C605[0F230000]01    <1> 	mov byte [commandedit], 1
  3696 00002D55 B00A                <1> 	mov al, 10
  3697 00002D57 66BB0700            <1> 	mov bx, 7
  3698 00002D5B BF[68BC0300]        <1> 	mov edi, buftxtend
  3699 00002D60 E8F9F0FFFF          <1> 	call rdprint
  3700 00002D65 C605[0F230000]00    <1> 	mov byte [commandedit], 0
  3701 00002D6C 803D[68B80300]00    <1> 	cmp byte [buftxt], 0
  3702 00002D73 0F844AFFFFFF        <1> 	je near nwcmd
  3703 00002D79 8B35[126A0500]      <1> gotcmd:	mov esi, [commandbufpos]
  3704 00002D7F 8935[0E6A0500]      <1> 	mov [lastcommandpos], esi
  3705 00002D85 FF05[1A6A0500]      <1> 	inc dword [commandsentered]
  3706 00002D8B BF[68B80300]        <1> 	mov edi, buftxt
  3707 00002D90 81C6[1E6A0500]      <1> 	add esi, commandbuf
  3708 00002D96 81FE[1E7A0500]      <1> 	cmp esi, commandbufend
  3709 00002D9C 7605                <1> 	jbe copycommand
  3710 00002D9E BE[1E6A0500]        <1> 	mov esi, commandbuf
  3711                              <1> copycommand:
  3712 00002DA3 8A07                <1> 	mov al, [edi]
  3713 00002DA5 8806                <1> 	mov [esi], al
  3714 00002DA7 47                  <1> 	inc edi
  3715 00002DA8 46                  <1> 	inc esi
  3716 00002DA9 3C00                <1> 	cmp al, 0
  3717 00002DAB 740F                <1> 	je donecopy
  3718 00002DAD 81FE[1E7A0500]      <1> 	cmp esi, commandbufend
  3719 00002DB3 76EE                <1> 	jbe copycommand
  3720 00002DB5 BE[1E6A0500]        <1> 	mov esi, commandbuf
  3721 00002DBA EBE7                <1> 	jmp copycommand
  3722                              <1> donecopy:
  3723 00002DBC 81EE[1E6A0500]      <1> 	sub esi, commandbuf
  3724 00002DC2 8935[126A0500]      <1> 	mov [commandbufpos], esi
  3725 00002DC8 E8D3000000          <1> 	call run
  3726 00002DCD E9F1FEFFFF          <1> 	jmp nwcmd
  3727                              <1> 
  3728 00002DD2 E8C9FEFFFF          <1> input:	call buftxtclear
  3729 00002DD7 BE[68B80300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3730 00002DDC BF[68BC0300]        <1> 	mov edi, buftxtend
  3731 00002DE1 B00A                <1> stdin:	mov al, 10
  3732 00002DE3 B307                <1> 	mov bl, 7
  3733 00002DE5 E874F0FFFF          <1> 	call rdprint
  3734 00002DEA C3                  <1> 	ret
  3735                              <1> 
  3736                              <1> replacevariable:
  3737 00002DEB 8A4601              <1> 	mov al, [esi + 1]
  3738 00002DEE C64601FF            <1> 	mov byte [esi + 1], 255
  3739 00002DF2 3C24                <1> 	cmp al, "$"
  3740 00002DF4 0F84AB000000        <1> 	je near fixvariables
  3741 00002DFA 884601              <1> 	mov [esi + 1], al
  3742 00002DFD 56                  <1> 	push esi
  3743 00002DFE 81EE[68B80300]      <1> 	sub esi, buftxt
  3744 00002E04 89F7                <1> 	mov edi, esi
  3745 00002E06 81C6[68B80300]      <1> 	add esi, buftxt
  3746 00002E0C 47                  <1> 	inc edi
  3747 00002E0D BB[68A40300]        <1> 	mov ebx, variables
  3748 00002E12 E857150000          <1> 	call nxtvrech
  3749 00002E17 89F7                <1> 	mov edi, esi
  3750 00002E19 31DB                <1> 	xor ebx, ebx
  3751 00002E1B 4E                  <1> 	dec esi
  3752                              <1> findvarname:
  3753 00002E1C 4E                  <1> 	dec esi
  3754 00002E1D 8A06                <1> 	mov al, [esi]
  3755 00002E1F 43                  <1> 	inc ebx
  3756 00002E20 3C04                <1> 	cmp al, 4
  3757 00002E22 75F8                <1> 	jne findvarname
  3758 00002E24 5E                  <1> 	pop esi
  3759                              <1> replacevarloop:
  3760 00002E25 8A07                <1> 	mov al, [edi]
  3761 00002E27 3C00                <1> 	cmp al, 0
  3762 00002E29 0F8413000000        <1> 	je near compressbuftxt
  3763 00002E2F 81FB00000000        <1> 	cmp ebx, 0
  3764 00002E35 0F8416000000        <1> 	je near expandbuftxt
  3765 00002E3B 8806                <1> 	mov [esi], al
  3766 00002E3D 4B                  <1> 	dec ebx
  3767 00002E3E 46                  <1> 	inc esi
  3768 00002E3F 47                  <1> 	inc edi
  3769 00002E40 EBE3                <1> 	jmp replacevarloop
  3770                              <1> compressbuftxt:
  3771 00002E42 8A041E              <1> 	mov al, [esi + ebx]
  3772 00002E45 8806                <1> 	mov [esi], al
  3773 00002E47 46                  <1> 	inc esi
  3774 00002E48 3C00                <1> 	cmp al, 0
  3775 00002E4A 75F6                <1> 	jne compressbuftxt
  3776 00002E4C E954000000          <1> 	jmp fixvariables
  3777                              <1> expandbuftxt:
  3778 00002E51 89F1                <1> 	mov ecx, esi
  3779 00002E53 8A26                <1> 	mov ah, [esi]
  3780                              <1> expandbuftxtlp:
  3781 00002E55 8A1E                <1> 	mov bl, [esi]
  3782 00002E57 46                  <1> 	inc esi
  3783 00002E58 8A3E                <1> 	mov bh, [esi]
  3784 00002E5A 8826                <1> 	mov [esi], ah
  3785 00002E5C 88FC                <1> 	mov ah, bh
  3786 00002E5E 80FB00              <1> 	cmp bl, 0
  3787 00002E61 75F2                <1> 	jne expandbuftxtlp
  3788 00002E63 89CE                <1> 	mov esi, ecx
  3789 00002E65 8806                <1> 	mov [esi], al
  3790 00002E67 47                  <1> 	inc edi
  3791 00002E68 8A07                <1> 	mov al, [edi]
  3792 00002E6A 3C00                <1> 	cmp al, 0
  3793 00002E6C 0F8433000000        <1> 	je near fixvariables
  3794 00002E72 46                  <1> 	inc esi
  3795 00002E73 EBDC                <1> 	jmp expandbuftxt
  3796                              <1> multipleprogline:
  3797 00002E75 30E4                <1> 	xor ah, ah
  3798 00002E77 8826                <1> 	mov [esi], ah
  3799 00002E79 46                  <1> 	inc esi
  3800 00002E7A 8935[982E0000]      <1> 	mov [nextcommandloc], esi
  3801 00002E80 E93E000000          <1> 	jmp donefixvariables
  3802                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3803 00002E85 46                  <1> 	inc esi
  3804 00002E86 8A06                <1> 	mov al, [esi]
  3805 00002E88 C606FF              <1> 	mov byte [esi], 255
  3806 00002E8B 3C23                <1> 	cmp al, '#'
  3807 00002E8D 7416                <1> 	je fixvariables
  3808 00002E8F 4E                  <1> 	dec esi
  3809 00002E90 C60600              <1> 	mov byte [esi], 0
  3810 00002E93 E90D000000          <1> 	jmp fixvariables
  3811                              <1> 	
  3812 00002E98 00000000            <1> nextcommandloc dd 0
  3813 00002E9C 00000000            <1> thiscommandloc dd 0	
  3814                              <1> run:
  3815 00002EA0 BE[68B80300]        <1> 	mov esi, buftxt
  3816 00002EA5 46                  <1> fixvariables:	inc esi
  3817 00002EA6 8A06                <1> 	mov al, [esi]
  3818 00002EA8 3C23                <1> 	cmp al, '#'	;inline comment
  3819 00002EAA 74D9                <1> 	je inlinecomment
  3820 00002EAC 3C24                <1> 	cmp al, '$' ;variable
  3821 00002EAE 0F8437FFFFFF        <1> 	je near replacevariable
  3822 00002EB4 3C3B                <1> 	cmp al, ';' ;program list
  3823 00002EB6 74BD                <1> 	je multipleprogline
  3824 00002EB8 3C00                <1> 	cmp al, 0
  3825 00002EBA 75E9                <1> 	jne fixvariables
  3826 00002EBC 31C0                <1> 	xor eax, eax
  3827 00002EBE A3[982E0000]        <1> 	mov [nextcommandloc], eax
  3828                              <1> donefixvariables:
  3829 00002EC3 803D[61340000]00    <1> 	cmp byte [indexdone], 0
  3830 00002ECA 7505                <1> 	jne progtest
  3831 00002ECC E8FB040000          <1> 	call indexfiles
  3832                              <1> progtest:
  3833 00002ED1 31C0                <1> 	xor eax, eax
  3834 00002ED3 BB[E89D0300]        <1> 	mov ebx, fileindex
  3835 00002ED8 668B03              <1> prgnxt:	mov ax, [ebx]
  3836 00002EDB B1FF                <1> 	mov cl, 255
  3837 00002EDD B52C                <1> 	mov ch, 44
  3838 00002EDF 6639C8              <1> 	cmp ax, cx
  3839 00002EE2 740B                <1> 	je fndprg
  3840 00002EE4 43                  <1> 	inc ebx
  3841 00002EE5 81FB[E8A10300]      <1> 	cmp ebx, fileindexend
  3842 00002EEB 735D                <1> 	jae prgnf
  3843 00002EED EBE9                <1> 	jmp prgnxt
  3844 00002EEF 81C302000000        <1> fndprg: add ebx, 2
  3845 00002EF5 31C9                <1> 	xor ecx, ecx
  3846 00002EF7 BE[68B80300]        <1> 	mov esi, buftxt
  3847 00002EFC 390D[9C2E0000]      <1> 	cmp [thiscommandloc], ecx
  3848 00002F02 7406                <1> 	je noprgtstmultiple
  3849 00002F04 8B35[9C2E0000]      <1> 	mov esi, [thiscommandloc]
  3850                              <1> noprgtstmultiple:
  3851 00002F0A E8A6000000          <1> 	call cndtest
  3852 00002F0F 3C01                <1> 	cmp al, 1
  3853 00002F11 7302                <1> 	jae prggood
  3854 00002F13 EBC3                <1> 	jmp prgnxt
  3855 00002F15 81FB[E8A10300]      <1> prggood: cmp ebx, fileindexend
  3856 00002F1B 7358                <1> 	jae prgdn
  3857 00002F1D 31C0                <1> 	xor eax, eax
  3858 00002F1F BE[68B80300]        <1> 	mov esi, buftxt
  3859 00002F24 3905[9C2E0000]      <1> 	cmp [thiscommandloc], eax
  3860 00002F2A 7406                <1> 	je noprggoodmul
  3861 00002F2C 8B35[9C2E0000]      <1> 	mov esi, [thiscommandloc]
  3862                              <1> noprggoodmul:
  3863 00002F32 8935[762F0000]      <1> 	mov [currentcommandloc], esi
  3864 00002F38 81C303000000        <1> 	add ebx, 3
  3865 00002F3E 8B3B                <1> 	mov edi, [ebx]
  3866 00002F40 C605[3A670000]02    <1> 	mov byte [threadson], 2
  3867 00002F47 FFD7                <1> 	call edi
  3868 00002F49 C3                  <1> 	ret
  3869                              <1> prgnf:	
  3870 00002F4A 8B35[762F0000]      <1> 	mov esi, [currentcommandloc]
  3871 00002F50 8A06                <1> 	mov al, [esi]
  3872 00002F52 3C00                <1> 	cmp al, 0
  3873 00002F54 741F                <1> 	je prgdn
  3874 00002F56 BE[3E890000]        <1> 	mov esi, notfound1
  3875 00002F5B E8CBEDFFFF          <1> 	call print
  3876 00002F60 8B35[762F0000]      <1> 	mov esi, [currentcommandloc]
  3877 00002F66 E8C0EDFFFF          <1> 	call print
  3878 00002F6B BE[46890000]        <1> 	mov esi, notfound2
  3879 00002F70 E8B6EDFFFF          <1> 	call print
  3880 00002F75 C3                  <1> prgdn:	ret
  3881                              <1> 
  3882 00002F76 00000000            <1> currentcommandloc dd 0
  3883                              <1> 
  3884                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3885 00002F7A 6631C0              <1> 	xor ax, ax
  3886 00002F7D 8A06                <1> retest:	mov al, [esi]
  3887 00002F7F 8A23                <1> 	mov ah, [ebx]
  3888 00002F81 3C00                <1> 	cmp al, 0
  3889 00002F83 7408                <1> 	je testtrue
  3890 00002F85 38E0                <1> 	cmp al, ah
  3891 00002F87 750C                <1> 	jne testfalse
  3892 00002F89 43                  <1> 	inc ebx
  3893 00002F8A 46                  <1> 	inc esi
  3894 00002F8B EBF0                <1> 	jmp retest
  3895                              <1> testtrue:
  3896 00002F8D 80FC00              <1> 	cmp ah, 0
  3897 00002F90 7503                <1> 	jne testfalse
  3898 00002F92 B001                <1> 	mov al, 1
  3899 00002F94 C3                  <1> 	ret
  3900                              <1> testfalse:
  3901 00002F95 30C0                <1> 	xor al, al
  3902 00002F97 C3                  <1> 	ret
  3903                              <1> 
  3904                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3905 00002F98 30C0                <1> 	xor al, al
  3906                              <1> opretest:
  3907 00002F9A 8A06                <1> 	mov al, [esi]
  3908 00002F9C 8A23                <1> 	mov ah, [ebx]
  3909 00002F9E 38E0                <1> 	cmp al, ah
  3910 00002FA0 7510                <1> 	jne optestfalse
  3911 00002FA2 80FC00              <1> 	cmp ah, 0
  3912 00002FA5 7404                <1> 	je optesttrue
  3913 00002FA7 43                  <1> 	inc ebx
  3914 00002FA8 46                  <1> 	inc esi
  3915 00002FA9 EBEF                <1> 	jmp opretest
  3916                              <1> optesttrue:
  3917 00002FAB 3C00                <1> 	cmp al, 0
  3918 00002FAD 7503                <1> 	jne optestfalse
  3919 00002FAF B001                <1> 	mov al, 1
  3920 00002FB1 C3                  <1> 	ret
  3921                              <1> optestfalse:
  3922 00002FB2 30C0                <1> 	xor al, al
  3923 00002FB4 C3                  <1> 	ret
  3924                              <1> 
  3925                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3926 00002FB5 30C0                <1> 	xor al, al
  3927 00002FB7 8A06                <1> cndretest:	mov al, [esi]
  3928 00002FB9 8A23                <1> 	mov ah, [ebx]
  3929 00002FBB 38CC                <1> 	cmp ah, cl
  3930 00002FBD 7408                <1> 	je cndtesttrue
  3931 00002FBF 38E0                <1> 	cmp al, ah
  3932 00002FC1 750B                <1> 	jne cndtestfalse
  3933 00002FC3 43                  <1> 	inc ebx
  3934 00002FC4 46                  <1> 	inc esi
  3935 00002FC5 EBF0                <1> 	jmp cndretest
  3936                              <1> cndtesttrue:
  3937 00002FC7 38C8                <1> 	cmp al, cl
  3938 00002FC9 7506                <1> 	jne cndtestalmost
  3939 00002FCB B001                <1> 	mov al, 1
  3940 00002FCD C3                  <1> 	ret
  3941                              <1> cndtestfalse:
  3942 00002FCE 30C0                <1> 	xor al, al
  3943 00002FD0 C3                  <1> 	ret
  3944                              <1> cndtestalmost:
  3945 00002FD1 B002                <1> 	mov al, 2
  3946 00002FD3 C3                  <1> 	ret
  3947                              <1> 	
  3948                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3949                              <1> 		                ;ends if array seperator is found backwards after 0
  3950                              <1> 	arnxt:	      
  3951 00002FD4 88E8                <1> 		mov al, ch
  3952 00002FD6 88CC                <1> 		mov ah, cl        
  3953 00002FD8 663906              <1> 		cmp [esi], ax
  3954 00002FDB 744D                <1> 		je ardn
  3955 00002FDD 66390E              <1> 		cmp [esi], cx
  3956 00002FE0 7407                <1> 		je arfnd
  3957 00002FE2 46                  <1> 		inc esi
  3958 00002FE3 39DE                <1> 		cmp esi, ebx
  3959 00002FE5 7343                <1> 		jae ardn
  3960 00002FE7 EBEB                <1> 		jmp arnxt
  3961 00002FE9 81C602000000        <1> 	arfnd: add esi, 2
  3962 00002FEF 891D[2B300000]      <1> 		mov [arbx], ebx
  3963 00002FF5 890D[2F300000]      <1> 		mov [arcx], ecx
  3964 00002FFB E82BEDFFFF          <1> 		call print
  3965 00003000 8935[31300000]      <1> 		mov [arsi], esi
  3966 00003006 BE[77890000]        <1> 		mov esi, line
  3967 0000300B E81BEDFFFF          <1> 		call print
  3968 00003010 8B1D[2B300000]      <1> 		mov ebx, [arbx]
  3969 00003016 668B0D[2F300000]    <1> 		mov cx, [arcx]
  3970 0000301D 8B35[31300000]      <1> 		mov esi, [arsi]
  3971 00003023 46                  <1> 		inc esi
  3972 00003024 39DE                <1> 		cmp esi, ebx
  3973 00003026 7302                <1> 		jae ardn
  3974 00003028 EBAA                <1> 		jmp arnxt
  3975 0000302A C3                  <1> 	ardn:	ret
  3976 0000302B 00000000            <1> arbx:	dw 0,0
  3977 0000302F 0000                <1> arcx:	db 0,0
  3978 00003031 00000000            <1> arsi:	dw 0,0
  3979                              <1> 
  3980                              <1> clearbuffer:
  3981 00003035 BE[68BC0300]        <1> 	mov esi, buf2
  3982 0000303A B030                <1> 	mov al, '0'
  3983 0000303C 81FE[7CBC0300]      <1> clearbuf: cmp esi, numbuf
  3984 00003042 7305                <1> 	jae doneclearbuff
  3985 00003044 8806                <1> 	mov [esi], al
  3986 00003046 46                  <1> 	inc esi
  3987 00003047 EBF3                <1> 	jmp clearbuf
  3988                              <1> doneclearbuff: 
  3989 00003049 C3                  <1> 		ret
  3990                              <1> 
  3991                              <1> convert:
  3992 0000304A 4E                  <1> 	dec esi
  3993 0000304B 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3994                              <1> .lp:
  3995 0000304D 89DE                <1> 	mov esi, ebx
  3996 0000304F 81EE09000000        <1> 	sub esi, 9
  3997 00003055 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3998 0000305B 720A                <1> 	jb .8
  3999 0000305D 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4000 00003063 FE06                <1> 	inc byte [esi]
  4001 00003065 EBE6                <1> 	jmp .lp
  4002 00003067 46                  <1> .8:	inc esi
  4003 00003068 81F900E1F505        <1> 	cmp ecx, 100000000
  4004 0000306E 720A                <1> 	jb .7
  4005 00003070 81E900E1F505        <1> 	sub ecx, 100000000
  4006 00003076 FE06                <1> 	inc byte [esi]
  4007 00003078 EBD3                <1> 	jmp .lp
  4008 0000307A 46                  <1> .7:	inc esi
  4009 0000307B 81F980969800        <1> 	cmp ecx, 10000000
  4010 00003081 720A                <1> 	jb .6
  4011 00003083 81E980969800        <1> 	sub ecx, 10000000
  4012 00003089 FE06                <1> 	inc byte [esi]
  4013 0000308B EBC0                <1> 	jmp .lp
  4014 0000308D 46                  <1> .6:	inc esi
  4015 0000308E 81F940420F00        <1> 	cmp ecx, 1000000
  4016 00003094 720A                <1> 	jb .5
  4017 00003096 81E940420F00        <1> 	sub ecx, 1000000
  4018 0000309C FE06                <1> 	inc byte [esi]
  4019 0000309E EBAD                <1> 	jmp .lp
  4020 000030A0 46                  <1> .5:	inc esi
  4021 000030A1 81F9A0860100        <1> 	cmp ecx, 100000
  4022 000030A7 720A                <1> 	jb .4
  4023 000030A9 81E9A0860100        <1> 	sub ecx, 100000
  4024 000030AF FE06                <1> 	inc byte [esi]
  4025 000030B1 EB9A                <1> 	jmp .lp
  4026 000030B3 46                  <1> .4:	inc esi
  4027 000030B4 81F910270000        <1> 	cmp ecx, 10000
  4028 000030BA 720A                <1> 	jb .3
  4029 000030BC 81E910270000        <1> 	sub ecx, 10000
  4030 000030C2 FE06                <1> 	inc byte [esi]
  4031 000030C4 EB87                <1> 	jmp .lp
  4032 000030C6 46                  <1> .3:	inc esi
  4033 000030C7 81F9E8030000        <1> 	cmp ecx, 1000
  4034 000030CD 720D                <1> 	jb .2
  4035 000030CF 81E9E8030000        <1> 	sub ecx, 1000
  4036 000030D5 FE06                <1> 	inc byte [esi]
  4037 000030D7 E971FFFFFF          <1> 	jmp .lp
  4038 000030DC 46                  <1> .2:	inc esi
  4039 000030DD 81F964000000        <1> 	cmp ecx, 100
  4040 000030E3 720D                <1> 	jb .1
  4041 000030E5 81E964000000        <1> 	sub ecx, 100
  4042 000030EB FE06                <1> 	inc byte [esi]
  4043 000030ED E95BFFFFFF          <1> 	jmp .lp
  4044 000030F2 46                  <1> .1:	inc esi
  4045 000030F3 81F90A000000        <1> 	cmp ecx, 10
  4046 000030F9 720D                <1> 	jb .0
  4047 000030FB 81E90A000000        <1> 	sub ecx, 10
  4048 00003101 FE06                <1> 	inc byte [esi]
  4049 00003103 E945FFFFFF          <1> 	jmp .lp
  4050 00003108 46                  <1> .0:	inc esi
  4051 00003109 81F901000000        <1> 	cmp ecx, 1
  4052 0000310F 720D                <1> 	jb .dn
  4053 00003111 81E901000000        <1> 	sub ecx, 1
  4054 00003117 FE06                <1> 	inc byte [esi]
  4055 00003119 E92FFFFFFF          <1> 	jmp .lp
  4056                              <1> .dn:
  4057 0000311E C3                  <1> 	ret
  4058                              <1> 
  4059                              <1> 	
  4060                              <1> 
  4061 0000311F 00<rept>            <1> hexnumber times 8 db 0
  4062 00003127 202000              <1> hexnumberend db "  ",0
  4063                              <1> 
  4064                              <1> converthex:
  4065                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4066 0000312A 56                  <1> 	push esi
  4067 0000312B B030                <1> 	mov al, "0"
  4068 0000312D 39FE                <1> .clearlp: cmp esi, edi
  4069 0000312F 7305                <1> 	jae .doneclear
  4070 00003131 8806                <1> 	mov [esi], al
  4071 00003133 46                  <1> 	inc esi
  4072 00003134 EBF7                <1> 	jmp .clearlp
  4073                              <1> .doneclear:
  4074 00003136 81EE02000000        <1> 	sub esi, 2
  4075 0000313C 89C8                <1> 	mov eax, ecx
  4076                              <1> .loop:
  4077 0000313E 30FF                <1> 	xor bh, bh
  4078 00003140 88C3                <1> 	mov bl, al
  4079 00003142 66C1E304            <1> 	shl bx, 4
  4080 00003146 C0EB04              <1> 	shr bl, 4
  4081 00003149 86DF                <1> 	xchg bl, bh ;they are backwards
  4082 0000314B 80C330              <1> 	add bl, 48
  4083 0000314E 80FB39              <1> 	cmp bl, "9"
  4084 00003151 7609                <1> 	jbe .goodbl
  4085 00003153 80EB30              <1> 	sub bl, 48
  4086 00003156 80EB0A              <1> 	sub bl, 0xA
  4087 00003159 80C341              <1> 	add bl, "A"
  4088                              <1> .goodbl:
  4089 0000315C 80C730              <1> 	add bh, 48
  4090 0000315F 80FF39              <1> 	cmp bh, "9"
  4091 00003162 7609                <1> 	jbe .goodbh
  4092 00003164 80EF30              <1> 	sub bh, 48
  4093 00003167 80EF0A              <1> 	sub bh, 0xA
  4094 0000316A 80C741              <1> 	add bh, "A"
  4095                              <1> .goodbh:
  4096 0000316D C1E808              <1> 	shr eax, 8
  4097 00003170 66891E              <1> 	mov [esi], bx
  4098 00003173 81EE02000000        <1> 	sub esi, 2
  4099 00003179 3B3424              <1> 	cmp esi, [esp]
  4100 0000317C 7207                <1> 	jb .done
  4101 0000317E 3D00000000          <1> 	cmp eax, 0
  4102 00003183 75B9                <1> 	jne .loop
  4103                              <1> .done:
  4104 00003185 5E                  <1> 	pop esi
  4105 00003186 C3                  <1> 	ret
  4106                              <1> 	
  4107                              <1> 	
  4108 00003187 00                  <1> smallhex db 0
  4109 00003188 01                  <1> firsthexshown db 1
  4110                              <1> showhexsmall:
  4111 00003189 C605[87310000]01    <1> 	mov byte [smallhex], 1
  4112 00003190 E808000000          <1> 	call showhex
  4113 00003195 C605[87310000]00    <1> 	mov byte [smallhex], 0
  4114 0000319C C3                  <1> 	ret
  4115                              <1> showhex:
  4116 0000319D 60                  <1> 	pusha
  4117 0000319E BE[1F310000]        <1> 	mov esi, hexnumber
  4118 000031A3 BF[27310000]        <1> 	mov edi, hexnumberend
  4119 000031A8 E87DFFFFFF          <1> 	call converthex
  4120 000031AD 803D[88310000]01    <1> 	cmp byte [firsthexshown], 1
  4121 000031B4 7503                <1> 	jne .show
  4122 000031B6 6631D2              <1> 	xor dx, dx
  4123                              <1> .show:
  4124 000031B9 803D[88310000]03    <1> 	cmp byte [firsthexshown], 3
  4125 000031C0 750A                <1> 	jne .nonewhexline
  4126 000031C2 BE[77890000]        <1> 	mov esi, line
  4127 000031C7 E85FEBFFFF          <1> 	call print
  4128                              <1> .nonewhexline:
  4129 000031CC 803D[88310000]04    <1> 	cmp byte [firsthexshown], 4
  4130 000031D3 7527                <1> 	jne .notab
  4131 000031D5 B1A0                <1> 	mov cl, 160
  4132 000031D7 28D1                <1> 	sub cl, dl
  4133 000031D9 C0E905              <1> 	shr cl, 5
  4134 000031DC C0E105              <1> 	shl cl, 5
  4135 000031DF 80F900              <1> 	cmp cl, 0
  4136 000031E2 750F                <1> 	jne .nonewline
  4137 000031E4 BE[77890000]        <1> 	mov esi, line
  4138 000031E9 E83DEBFFFF          <1> 	call print
  4139 000031EE E909000000          <1> 	jmp .notab
  4140                              <1> .nonewline:
  4141 000031F3 80C20F              <1> 	add dl, 15
  4142 000031F6 C0EA04              <1> 	shr dl, 4
  4143 000031F9 C0E204              <1> 	shl dl, 4
  4144                              <1> .notab:
  4145 000031FC BE[1F310000]        <1> 	mov esi, hexnumber
  4146 00003201 803D[87310000]01    <1> 	cmp byte [smallhex],1
  4147 00003208 7506                <1> 	jne .nosmall
  4148 0000320A 81C606000000        <1> 	add esi, 6
  4149                              <1> .nosmall:
  4150 00003210 803D[88310000]05    <1> 	cmp byte [firsthexshown], 5
  4151 00003217 750A                <1> 	jne .noquiet
  4152 00003219 E8EEEAFFFF          <1> 	call printquiet
  4153 0000321E E918000000          <1> 	jmp .donequiet
  4154                              <1> .noquiet:
  4155 00003223 803D[88310000]06    <1> 	cmp byte [firsthexshown], 6
  4156 0000322A 750A                <1> 	jne .normal
  4157 0000322C E8EEEAFFFF          <1> 	call printhighlight
  4158 00003231 E905000000          <1> 	jmp .donequiet
  4159                              <1> .normal:
  4160 00003236 E8F0EAFFFF          <1> 	call print
  4161                              <1> .donequiet:
  4162 0000323B 803D[88310000]02    <1> 	cmp byte [firsthexshown], 2
  4163 00003242 750A                <1> 	jne .shown
  4164 00003244 BE[77890000]        <1> 	mov esi, line
  4165 00003249 E8DDEAFFFF          <1> 	call print
  4166                              <1> .shown:
  4167 0000324E C605[88310000]00    <1> 	mov byte [firsthexshown], 0
  4168 00003255 61                  <1> 	popa
  4169 00003256 C3                  <1> 	ret
  4170                              <1> 
  4171                              <1> 
  4172 00003257 303030303030303030- <1> decnumber db "00000000000000"
  4173 00003260 3030303030          <1>
  4174 00003265 2000                <1> decnumberend: db " ",0
  4175                              <1> 
  4176                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4177 00003267 60                  <1> 	pusha
  4178 00003268 BF[57320000]        <1> 	mov edi, decnumber
  4179 0000326D BE[65320000]        <1> 	mov esi, decnumberend
  4180                              <1> .clear:
  4181 00003272 C60730              <1> 	mov byte [edi], '0'
  4182 00003275 47                  <1> 	inc edi
  4183 00003276 39F7                <1> 	cmp edi, esi
  4184 00003278 72F8                <1> 	jb .clear
  4185 0000327A BF[57320000]        <1> 	mov edi, decnumber
  4186 0000327F E8C6FDFFFF          <1> 	call convert
  4187 00003284 803D[88310000]01    <1> 	cmp byte [firsthexshown], 1
  4188 0000328B 7503                <1> 	jne .show
  4189 0000328D 6631D2              <1> 	xor dx, dx
  4190                              <1> .show:
  4191 00003290 803D[88310000]03    <1> 	cmp byte [firsthexshown], 3
  4192 00003297 750A                <1> 	jne .nonewdecline
  4193 00003299 BE[77890000]        <1> 	mov esi, line
  4194 0000329E E888EAFFFF          <1> 	call print
  4195                              <1> .nonewdecline:
  4196 000032A3 803D[88310000]04    <1> 	cmp byte [firsthexshown], 4
  4197 000032AA 7527                <1> 	jne .notab
  4198 000032AC B1A0                <1> 	mov cl, 160
  4199 000032AE 28D1                <1> 	sub cl, dl
  4200 000032B0 C0E905              <1> 	shr cl, 5
  4201 000032B3 C0E105              <1> 	shl cl, 5
  4202 000032B6 80F900              <1> 	cmp cl, 0
  4203 000032B9 750F                <1> 	jne .nonewline
  4204 000032BB BE[77890000]        <1> 	mov esi, line
  4205 000032C0 E866EAFFFF          <1> 	call print
  4206 000032C5 E909000000          <1> 	jmp .notab
  4207                              <1> .nonewline:
  4208 000032CA 80C20F              <1> 	add dl, 15
  4209 000032CD C0EA04              <1> 	shr dl, 4
  4210 000032D0 C0E204              <1> 	shl dl, 4
  4211                              <1> .notab:
  4212 000032D3 BE[57320000]        <1> 	mov esi, decnumber
  4213 000032D8 4E                  <1> 	dec esi
  4214                              <1> .sifind:
  4215 000032D9 46                  <1> 	inc esi
  4216 000032DA 803E30              <1> 	cmp byte [esi], '0'
  4217 000032DD 74FA                <1> 	je .sifind
  4218 000032DF E847EAFFFF          <1> 	call print
  4219 000032E4 803D[88310000]02    <1> 	cmp byte [firsthexshown], 2
  4220 000032EB 750A                <1> 	jne .shown
  4221 000032ED BE[77890000]        <1> 	mov esi, line
  4222 000032F2 E834EAFFFF          <1> 	call print
  4223                              <1> .shown:
  4224 000032F7 C605[88310000]00    <1> 	mov byte [firsthexshown], 0
  4225 000032FE 61                  <1> 	popa
  4226 000032FF C3                  <1> 	ret
  4227                              <1> 	
  4228                              <1> cnvrthextxt:
  4229 00003300 31C9                <1> 	xor ecx, ecx
  4230 00003302 31C0                <1> 	xor eax, eax
  4231 00003304 31D2                <1> 	xor edx, edx
  4232 00003306 31DB                <1> 	xor ebx, ebx
  4233 00003308 4E                  <1> 	dec esi
  4234                              <1> .end:
  4235 00003309 46                  <1> 	inc esi
  4236 0000330A 8A06                <1> 	mov al, [esi]
  4237 0000330C 3C00                <1> 	cmp al, 0
  4238 0000330E 75F9                <1> 	jne .end
  4239                              <1> .loop:
  4240 00003310 4E                  <1> 	dec esi
  4241 00003311 8A06                <1> 	mov al, [esi]
  4242 00003313 3C41                <1> 	cmp al, "A"
  4243 00003315 7328                <1> 	jae .char
  4244 00003317 2C30                <1> 	sub al, 48
  4245 00003319 3C10                <1> 	cmp al, 16
  4246 0000331B 7721                <1> 	ja .done
  4247                              <1> .donechar:
  4248 0000331D 81FA00000000        <1> 	cmp edx, 0
  4249 00003323 740E                <1> 	je .noshl
  4250 00003325 89D3                <1> 	mov ebx, edx
  4251                              <1> .shl:
  4252 00003327 C1E004              <1> 	shl eax, 4
  4253 0000332A 4B                  <1> 	dec ebx
  4254 0000332B 81FB00000000        <1> 	cmp ebx, 0
  4255 00003331 75F4                <1> 	jne .shl
  4256                              <1> .noshl:
  4257 00003333 42                  <1> 	inc edx
  4258 00003334 01C1                <1> 	add ecx, eax
  4259 00003336 81FA08000000        <1> 	cmp edx, 8
  4260 0000333C 72D2                <1> 	jb .loop
  4261                              <1> .done:
  4262 0000333E C3                  <1> 	ret
  4263                              <1> .char:
  4264 0000333F 3C46                <1> 	cmp al, "F"
  4265 00003341 77FB                <1> 	ja .done
  4266 00003343 2C41                <1> 	sub al, "A"
  4267 00003345 040A                <1> 	add al, 0xA
  4268 00003347 EBD4                <1> 	jmp .donechar
  4269                              <1> 	
  4270                              <1> 	
  4271                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4272 00003349 31C9                <1> 	xor ecx, ecx
  4273 0000334B 31C0                <1> 	xor eax, eax
  4274 0000334D 31D2                <1> 	xor edx, edx
  4275 0000334F 31DB                <1> 	xor ebx, ebx
  4276 00003351 4E                  <1> 	dec esi
  4277                              <1> .lp:
  4278 00003352 46                  <1> 	inc esi
  4279 00003353 8A06                <1> 	mov al, [esi]
  4280 00003355 3C00                <1> 	cmp al, 0
  4281 00003357 75F9                <1> 	jne .lp
  4282 00003359 4E                  <1> 	dec esi
  4283 0000335A 8A06                <1> 	mov al, [esi]
  4284 0000335C 3C2E                <1> 	cmp al, '.'
  4285 0000335E 7503                <1> 	jne .dot
  4286 00003360 46                  <1> 	inc esi
  4287 00003361 EBEF                <1> 	jmp .lp
  4288                              <1> .dot:
  4289 00003363 3C20                <1> 	cmp al, ' '
  4290 00003365 7404                <1> 	je .zero
  4291 00003367 3C30                <1> 	cmp al, '0'
  4292 00003369 7504                <1> 	jne .txtlp
  4293                              <1> .zero: 
  4294 0000336B 39FE                <1> 		cmp esi, edi
  4295 0000336D 7458                <1> 		je .done
  4296                              <1> .txtlp:
  4297 0000336F 31C0                <1> 	xor eax, eax
  4298 00003371 8A06                <1> 	mov al, [esi]
  4299 00003373 3C3D                <1> 	cmp al, '='
  4300 00003375 7450                <1> 	je .done
  4301 00003377 3C30                <1> 	cmp al, 48
  4302 00003379 724C                <1> 	jb .done
  4303 0000337B 3C23                <1> 	cmp al, '#'
  4304 0000337D 7448                <1> 	je .done
  4305 0000337F 39FE                <1> 	cmp esi, edi
  4306 00003381 7244                <1> 	jb .done
  4307 00003383 81F900000000        <1> 	cmp ecx, 0
  4308 00003389 7708                <1> 	ja .exp
  4309 0000338B 2C30                <1> .noexp:	sub al, 48
  4310 0000338D 01C2                <1> 	add edx, eax
  4311 0000338F 4E                  <1> 	dec esi
  4312 00003390 41                  <1> 	inc ecx
  4313 00003391 EBDC                <1> 	jmp .txtlp
  4314 00003393 81F900000000        <1> .exp:	cmp ecx, 0
  4315 00003399 74F0                <1> 	je .noexp
  4316 0000339B 2C30                <1> 	sub al, 48
  4317 0000339D 51                  <1> 	push ecx
  4318 0000339E 89C3                <1> .expmul:	mov ebx, eax
  4319 000033A0 01D8                <1> 	add eax, ebx
  4320 000033A2 01D8                <1> 	add eax, ebx
  4321 000033A4 01D8                <1> 	add eax, ebx
  4322 000033A6 01D8                <1> 	add eax, ebx
  4323 000033A8 01D8                <1> 	add eax, ebx
  4324 000033AA 01D8                <1> 	add eax, ebx
  4325 000033AC 01D8                <1> 	add eax, ebx
  4326 000033AE 01D8                <1> 	add eax, ebx
  4327 000033B0 01D8                <1> 	add eax, ebx
  4328 000033B2 81E901000000        <1> 	sub ecx, 1
  4329 000033B8 81F900000000        <1> 	cmp ecx, 0
  4330 000033BE 77DE                <1> 	ja .expmul
  4331 000033C0 01C2                <1> 	add edx, eax
  4332 000033C2 59                  <1> 	pop ecx
  4333 000033C3 4E                  <1> 	dec esi
  4334 000033C4 41                  <1> 	inc ecx
  4335 000033C5 EBA8                <1> 	jmp .txtlp
  4336 000033C7 89D1                <1> .done: mov ecx, edx
  4337 000033C9 C3                  <1> 	ret
  4338                                      %include "source/programs.asm"
  4339 000033CA FF2C                <1> filetypes db 255,44
  4340                              <1> progstart:		;programs start here
  4341                              <1> indexfiles:
  4342 000033CC BE[CC330000]        <1> 	mov esi, progstart
  4343 000033D1 BB[E89D0300]        <1> 	mov ebx, fileindex
  4344 000033D6 BF[CC330000]        <1> 	mov edi, progstart
  4345 000033DB 81EF02000000        <1> 	sub edi, 2
  4346                              <1> indexloop:
  4347 000033E1 668B0E              <1> 	mov cx, [esi]
  4348                              <1> 	indexloop2:
  4349 000033E4 663B0F              <1> 		cmp cx, [edi]
  4350 000033E7 7424                <1> 		je indexloop2done
  4351 000033E9 81EF02000000        <1> 		sub edi, 2
  4352 000033EF 81FF[CA330000]      <1> 		cmp edi, filetypes
  4353 000033F5 73ED                <1> 		jae indexloop2
  4354 000033F7 BF[CC330000]        <1> 	mov edi, progstart
  4355 000033FC 81EF02000000        <1> 	sub edi, 2
  4356 00003402 46                  <1> 	inc esi
  4357 00003403 81FE[5C530000]      <1> 	cmp esi, batchprogend
  4358 00003409 734E                <1> 	jae indexloopdone
  4359 0000340B EBD4                <1> 	jmp indexloop
  4360                              <1> indexloop2done:
  4361 0000340D 66890B              <1> 	mov [ebx], cx
  4362 00003410 81C302000000        <1> 	add ebx, 2
  4363 00003416 81C602000000        <1> 	add esi, 2
  4364                              <1> 	nameindex:
  4365 0000341C 8A0E                <1> 		mov cl, [esi]
  4366 0000341E 80F900              <1> 		cmp cl, 0
  4367 00003421 7406                <1> 		je nameindexdone
  4368 00003423 880B                <1> 		mov [ebx], cl
  4369 00003425 46                  <1> 		inc esi
  4370 00003426 43                  <1> 		inc ebx
  4371 00003427 EBF3                <1> 		jmp nameindex
  4372                              <1> 	nameindexdone:
  4373 00003429 43                  <1> 		inc ebx
  4374 0000342A 66C7030000          <1> 		mov word [ebx], 0
  4375 0000342F 81C302000000        <1> 		add ebx, 2
  4376 00003435 46                  <1> 		inc esi
  4377 00003436 8933                <1> 		mov [ebx], esi
  4378 00003438 81C304000000        <1> 		add ebx, 4
  4379 0000343E 66C7030000          <1> 		mov word [ebx], 0
  4380 00003443 81C302000000        <1> 		add ebx, 2
  4381 00003449 81FB[E8A10300]      <1> 		cmp ebx, fileindexend
  4382 0000344F 7308                <1> 		jae indexloopdone
  4383 00003451 81C601000000        <1> 		add esi, 1
  4384 00003457 EB88                <1> 		jmp indexloop
  4385 00003459 C605[61340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4386 00003460 C3                  <1> 		ret
  4387 00003461 00                  <1> indexdone db 0
  4388                              <1> %include 'source/programs/_comment.asm' ;#
  4389 00003462 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4390 00003466 C3                  <2> 	ret 
  4391                              <1> %include 'source/programs/_math.asm' ;!
  4392 00003467 FF2C2100            <2> db 255,44,"!",0
  4393                              <2> 	num:	
  4394 0000346B E8C5FBFFFF          <2> 		call clearbuffer
  4395 00003470 C605[F1360000]00    <2> 		mov byte [decimal], 0
  4396 00003477 C605[F2360000]00    <2> 		mov byte [decimal2], 0
  4397 0000347E 8B35[762F0000]      <2> 		mov esi, [currentcommandloc]
  4398 00003484 31C0                <2> 		xor eax, eax
  4399 00003486 31C9                <2> 		xor ecx, ecx
  4400 00003488 31DB                <2> 		xor ebx, ebx
  4401 0000348A 8A06                <2> 	num2:	mov al, [esi]
  4402 0000348C 3C2B                <2> 		cmp al, '+'
  4403 0000348E 741B                <2> 		je operatorfound
  4404 00003490 3C2D                <2> 		cmp al, '-'
  4405 00003492 7417                <2> 		je operatorfound
  4406 00003494 3C2A                <2> 		cmp al, '*'
  4407 00003496 7413                <2> 		je operatorfound
  4408 00003498 3C2F                <2> 		cmp al, '/'
  4409 0000349A 740F                <2> 		je operatorfound
  4410 0000349C 3C5E                <2> 		cmp al, '^'
  4411 0000349E 740B                <2> 		je operatorfound
  4412 000034A0 46                  <2> 		inc esi
  4413 000034A1 3C00                <2> 		cmp al, 0
  4414 000034A3 0F841AF8FFFF        <2> 		je near nwcmd
  4415 000034A9 EBDF                <2> 		jmp num2
  4416 000034AB 50                  <2> 	operatorfound: push eax
  4417 000034AC 30E4                <2> 		xor ah, ah
  4418 000034AE 8826                <2> 		mov [esi], ah
  4419 000034B0 89F7                <2> 		mov edi, esi
  4420 000034B2 46                  <2> 		inc esi
  4421 000034B3 8A06                <2> 		mov al, [esi]
  4422 000034B5 3C25                <2> 		cmp al, '%'
  4423 000034B7 0F8462000000        <2> 		je near resultnum1
  4424                              <2> 	varnum2: 
  4425 000034BD 57                  <2> 		push edi
  4426 000034BE E8A4000000          <2> 		call checkdecimal
  4427 000034C3 5F                  <2> 		pop edi
  4428 000034C4 E880FEFFFF          <2> 		call cnvrttxt
  4429                              <2> 	vrnm2:
  4430 000034C9 89CB                <2> 		mov ebx, ecx
  4431 000034CB 53                  <2> 		push ebx
  4432 000034CC E864FBFFFF          <2> 		call clearbuffer
  4433 000034D1 8B35[762F0000]      <2> 		mov esi, [currentcommandloc]
  4434 000034D7 89F7                <2> 		mov edi, esi
  4435 000034D9 46                  <2> 		inc esi
  4436 000034DA 8A06                <2> 		mov al, [esi]
  4437 000034DC 3C25                <2> 		cmp al, '%'
  4438 000034DE 0F844F000000        <2> 		je near resultnum2
  4439                              <2> 	varnum4: 
  4440 000034E4 57                  <2> 		push edi
  4441 000034E5 E869000000          <2> 		call checkdecimal2
  4442 000034EA 5F                  <2> 		pop edi
  4443 000034EB E859FEFFFF          <2> 		call cnvrttxt
  4444                              <2> 	vrnm4:
  4445 000034F0 5B                  <2> 		pop ebx
  4446 000034F1 58                  <2> 		pop eax
  4447 000034F2 3C2B                <2> 		cmp al, '+'
  4448 000034F4 0F849B000000        <2> 		je near plusnum
  4449 000034FA 3C2D                <2> 		cmp al, '-'
  4450 000034FC 0F849F000000        <2> 		je near subnum
  4451 00003502 3C2A                <2> 		cmp al, '*'
  4452 00003504 0F84A3000000        <2> 		je near mulnum
  4453 0000350A 3C2F                <2> 		cmp al, '/'
  4454 0000350C 0F84B1000000        <2> 		je near divnum
  4455 00003512 3C5E                <2> 		cmp al, '^'
  4456 00003514 0F84CE000000        <2> 		je near expnum
  4457 0000351A E9A4F7FFFF          <2> 		jmp nwcmd
  4458                              <2> 	resultnum1:
  4459 0000351F 8A0D[F3360000]      <2> 		mov cl, [decimalresult]
  4460 00003525 880D[F1360000]      <2> 		mov [decimal], cl
  4461 0000352B 8B0D[F4360000]      <2> 		mov ecx, [result]
  4462 00003531 EB96                <2> 		jmp vrnm2
  4463                              <2> 	resultnum2:
  4464 00003533 8A0D[F1360000]      <2> 		mov cl, [decimal]
  4465 00003539 880D[F2360000]      <2> 		mov [decimal2], cl
  4466 0000353F 8A0D[F3360000]      <2> 		mov cl, [decimalresult]
  4467 00003545 880D[F1360000]      <2> 		mov [decimal], cl
  4468 0000354B 8B0D[F4360000]      <2> 		mov ecx, [result]
  4469 00003551 EB9D                <2> 		jmp vrnm4
  4470                              <2> 	checkdecimal2:
  4471 00003553 8A25[F1360000]      <2> 		mov ah, [decimal]
  4472 00003559 8825[F2360000]      <2> 		mov [decimal2], ah
  4473 0000355F 30E4                <2> 		xor ah, ah
  4474 00003561 8825[F1360000]      <2> 		mov [decimal], ah
  4475                              <2> 	checkdecimal:
  4476 00003567 89F7                <2> 		mov edi, esi
  4477                              <2> 	chkdec1:
  4478 00003569 8A07                <2> 		mov al, [edi]
  4479 0000356B 3C2E                <2> 		cmp al, '.'
  4480 0000356D 0F840B000000        <2> 		je near fnddec
  4481 00003573 3C00                <2> 		cmp al, 0
  4482 00003575 0F8419000000        <2> 		je near nodecimal
  4483 0000357B 47                  <2> 		inc edi
  4484 0000357C EBEB                <2> 		jmp chkdec1
  4485                              <2> 	fnddec:
  4486 0000357E 8A4701              <2> 		mov al, [edi + 1]
  4487 00003581 8807                <2> 		mov [edi], al
  4488 00003583 3C00                <2> 		cmp al, 0
  4489 00003585 0F8409000000        <2> 		je near nodecimal
  4490 0000358B FE05[F1360000]      <2> 		inc byte [decimal]
  4491 00003591 47                  <2> 		inc edi
  4492 00003592 EBEA                <2> 		jmp fnddec
  4493                              <2> 	nodecimal:
  4494 00003594 C3                  <2> 		ret
  4495                              <2> 	plusnum:
  4496 00003595 E815010000          <2> 		call decaddfix
  4497 0000359A 01D9                <2> 		add ecx, ebx
  4498 0000359C E98A000000          <2> 		jmp retnum
  4499                              <2> 	subnum:
  4500 000035A1 E809010000          <2> 		call decaddfix
  4501 000035A6 29D9                <2> 		sub ecx, ebx
  4502 000035A8 E97E000000          <2> 		jmp retnum
  4503                              <2> 	mulnum:
  4504 000035AD A0[F2360000]        <2> 		mov al, [decimal2]
  4505 000035B2 0005[F1360000]      <2> 		add [decimal], al
  4506 000035B8 89C8                <2> 		mov eax, ecx
  4507 000035BA F7E3                <2> 		mul ebx
  4508 000035BC 89C1                <2> 		mov ecx, eax
  4509 000035BE E968000000          <2> 		jmp retnum
  4510                              <2> 	divnum:
  4511 000035C3 E8E7000000          <2> 		call decaddfix
  4512 000035C8 30C0                <2> 		xor al, al
  4513 000035CA A2[F1360000]        <2> 		mov [decimal], al
  4514 000035CF 31D2                <2> 		xor edx, edx
  4515 000035D1 89C8                <2> 		mov eax, ecx
  4516 000035D3 81FB00000000        <2> 		cmp ebx, 0
  4517 000035D9 0F844C000000        <2> 		je near retnum
  4518 000035DF F7F3                <2> 		div ebx
  4519 000035E1 89C1                <2> 		mov ecx, eax
  4520 000035E3 E943000000          <2> 		jmp retnum
  4521                              <2> 	expnum:
  4522 000035E8 8A15[F1360000]      <2> 		mov dl, [decimal]
  4523 000035EE 8815[F2360000]      <2> 		mov [decimal2], dl
  4524 000035F4 31D2                <2> 		xor edx, edx
  4525 000035F6 89C8                <2> 		mov eax, ecx
  4526 000035F8 89D9                <2> 		mov ecx, ebx
  4527 000035FA 89C3                <2> 		mov ebx, eax
  4528 000035FC 81F900000000        <2> 		cmp ecx, 0
  4529 00003602 7422                <2> 		je noexpnum
  4530 00003604 49                  <2> 		dec ecx
  4531 00003605 81F900000000        <2> 		cmp ecx, 0
  4532 0000360B 7412                <2> 		je noexpnumlp
  4533 0000360D F7E3                <2> 	expnumlp: mul ebx
  4534 0000360F 8A15[F2360000]      <2> 		mov dl, [decimal2]
  4535 00003615 0015[F1360000]      <2> 		add [decimal], dl
  4536 0000361B 31D2                <2> 		xor edx, edx
  4537 0000361D E2EE                <2> 		loop expnumlp
  4538                              <2> 	noexpnumlp:
  4539 0000361F 89C1                <2> 		mov ecx, eax
  4540 00003621 E905000000          <2> 		jmp retnum
  4541                              <2> 	noexpnum:
  4542 00003626 B901000000          <2> 		mov ecx, 1
  4543                              <2> 	retnum: 
  4544 0000362B BE[7CBC0300]        <2> 		mov esi, numbuf
  4545 00003630 890D[F4360000]      <2> 		mov [result], ecx
  4546 00003636 E80FFAFFFF          <2> 		call convert
  4547 0000363B BE[7CBC0300]        <2> 		mov esi, numbuf
  4548 00003640 8A25[F1360000]      <2> 		mov ah, [decimal]
  4549 00003646 8825[F3360000]      <2> 		mov [decimalresult], ah
  4550 0000364C 80FC00              <2> 		cmp ah, 0
  4551 0000364F 0F8425000000        <2> 		je near noputdecimal
  4552                              <2> 	putdecimal:
  4553 00003655 4E                  <2> 		dec esi
  4554 00003656 FECC                <2> 		dec ah
  4555 00003658 80FC00              <2> 		cmp ah, 0
  4556 0000365B 0F87F4FFFFFF        <2> 		ja near putdecimal
  4557 00003661 4E                  <2> 		dec esi
  4558 00003662 8A06                <2> 		mov al, [esi]
  4559 00003664 C6062E              <2> 		mov byte [esi], '.'
  4560                              <2> 	decputloop:
  4561 00003667 4E                  <2> 		dec esi
  4562 00003668 8A26                <2> 		mov ah, [esi]
  4563 0000366A 8806                <2> 		mov [esi], al
  4564 0000366C 88E0                <2> 		mov al, ah
  4565 0000366E 81FE[68BC0300]      <2> 		cmp esi, buf2
  4566 00003674 0F87EDFFFFFF        <2> 		ja near decputloop
  4567                              <2> 	noputdecimal:
  4568 0000367A BE[68BC0300]        <2> 		mov esi, buf2
  4569 0000367F E809000000          <2> 		call chkadd
  4570 00003684 E93AF6FFFF          <2> 		jmp nwcmd
  4571 00003689 00000000            <2> edxnumbuf dw 0,0
  4572 0000368D 8A06                <2> 	chkadd: mov al, [esi]
  4573 0000368F 3C30                <2> 		cmp al, '0'
  4574 00003691 750C                <2> 		jne dnadd
  4575 00003693 46                  <2> 		inc esi
  4576 00003694 81FE[7CBC0300]      <2> 		cmp esi, numbuf
  4577 0000369A 7402                <2> 		je dnaddm1
  4578 0000369C EBEF                <2> 		jmp chkadd
  4579 0000369E 4E                  <2> 	dnaddm1: dec esi
  4580 0000369F E887E6FFFF          <2> 	dnadd:	call print
  4581 000036A4 BE[77890000]        <2> 		mov esi, line
  4582 000036A9 E87DE6FFFF          <2> 		call print
  4583 000036AE C3                  <2> 		ret
  4584                              <2> 		
  4585                              <2> 	decaddfix:
  4586 000036AF A0[F2360000]        <2> 		mov al, [decimal2]
  4587 000036B4 8A25[F1360000]      <2> 		mov ah, [decimal]
  4588 000036BA 38E0                <2> 		cmp al, ah
  4589 000036BC 7432                <2> 		je gooddecadd
  4590 000036BE 38E0                <2> 		cmp al, ah
  4591 000036C0 721A                <2> 		jb lowdecadd
  4592                              <2> 	highdecadd:
  4593 000036C2 FEC4                <2> 		inc ah
  4594 000036C4 89CA                <2> 		mov edx, ecx
  4595 000036C6 C1E103              <2> 		shl ecx, 3
  4596 000036C9 01D1                <2> 		add ecx, edx
  4597 000036CB 01D1                <2> 		add ecx, edx
  4598 000036CD 38E0                <2> 		cmp al, ah
  4599 000036CF 77F1                <2> 		ja highdecadd
  4600 000036D1 8825[F1360000]      <2> 		mov [decimal], ah
  4601 000036D7 E914000000          <2> 		jmp gooddecadd
  4602                              <2> 	lowdecadd:
  4603 000036DC FEC0                <2> 		inc al
  4604 000036DE 89DA                <2> 		mov edx, ebx
  4605 000036E0 C1E303              <2> 		shl ebx, 3
  4606 000036E3 01D3                <2> 		add ebx, edx
  4607 000036E5 01D3                <2> 		add ebx, edx
  4608 000036E7 38E0                <2> 		cmp al, ah
  4609 000036E9 72F1                <2> 		jb lowdecadd
  4610 000036EB A2[F1360000]        <2> 		mov [decimal], al
  4611                              <2> 	gooddecadd:
  4612 000036F0 C3                  <2> 		ret
  4613                              <2> 		
  4614 000036F1 00                  <2> decimal db 0
  4615 000036F2 00                  <2> decimal2 db 0
  4616 000036F3 00                  <2> decimalresult db 0
  4617 000036F4 00000000            <2> result dd 0
  4618                              <1> %include 'source/programs/_variables.asm' ;% and $
  4619 000036F8 FF2C2500            <2> db 255,44,"%",0
  4620                              <2> 	ans:
  4621 000036FC BE[68BC0300]        <2> 		mov esi, buf2
  4622 00003701 E887FFFFFF          <2> 		call chkadd
  4623 00003706 C3                  <2> 		ret
  4624                              <2> 		
  4625 00003707 FF2C2400            <2> db 255,44,"$",0
  4626 0000370B 8B35[762F0000]      <2> var: mov esi, [currentcommandloc]
  4627 00003711 BB[68A40300]        <2> 	mov ebx, variables
  4628 00003716 8A06                <2> lkeq:	mov al, [esi]
  4629 00003718 3C3D                <2> 	cmp al, '='
  4630 0000371A 741B                <2> 	je eqfnd	;is there an '=' sign?
  4631 0000371C 3C00                <2> 	cmp al, 0
  4632 0000371E 7403                <2> 	je echovars
  4633 00003720 46                  <2> 	inc esi
  4634 00003721 EBF3                <2> 	jmp lkeq
  4635 00003723 BE[68A40300]        <2> echovars: mov esi, variables
  4636 00003728 BB[68B40300]        <2> 	mov ebx, varend
  4637 0000372D B105                <2> 	mov cl, 5
  4638 0000372F B504                <2> 	mov ch, 4
  4639 00003731 E89EF8FFFF          <2> 	call array
  4640 00003736 C3                  <2> 	ret
  4641 00003737 46                  <2> eqfnd:	inc esi
  4642 00003738 8A06                <2> 	mov al, [esi]
  4643 0000373A 3C00                <2> 	cmp al, 0
  4644 0000373C 7410                <2> 	je readvar
  4645 0000373E 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  4646 00003744 BB[68A40300]        <2> 	mov ebx, variables
  4647 00003749 E919000000          <2> 	jmp seek
  4648                              <2> readvar:
  4649 0000374E B00A                <2> 	mov al, 10
  4650 00003750 66BB0700            <2> 	mov bx, 7
  4651 00003754 C605[0F230000]00    <2> 	mov byte [commandedit], 0
  4652 0000375B BF[68BC0300]        <2> 	mov edi, buftxtend
  4653 00003760 E8F9E6FFFF          <2> 	call rdprint
  4654 00003765 EBA4                <2> 	jmp var
  4655 00003767 668B03              <2> seek:	mov ax, [ebx]
  4656 0000376A B105                <2> 	mov cl, 5
  4657 0000376C B504                <2> 	mov ch, 4
  4658 0000376E 663D0000            <2> 	cmp ax, 0
  4659 00003772 0F845B000000        <2> 	je near save
  4660 00003778 6639C8              <2> 	cmp ax, cx
  4661 0000377B 7403                <2> 	je skfnd
  4662 0000377D 43                  <2> 	inc ebx
  4663 0000377E EBE7                <2> 	jmp seek
  4664 00003780 8B35[762F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4665 00003786 46                  <2> 	inc esi
  4666 00003787 81C302000000        <2> 	add ebx, 2
  4667 0000378D 89DF                <2> 	mov edi, ebx
  4668 0000378F B13D                <2> 	mov cl, '='
  4669 00003791 E81FF8FFFF          <2> 	call cndtest
  4670 00003796 3C01                <2> 	cmp al, 1	
  4671 00003798 7418                <2> 	je varfnd
  4672 0000379A 89FB                <2> 	mov ebx, edi
  4673 0000379C 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  4674 000037A2 668B03              <2> 	mov ax, [ebx]
  4675 000037A5 663D0000            <2> 	cmp ax, 0
  4676 000037A9 0F8424000000        <2> 	je near save
  4677 000037AF 43                  <2> 	inc ebx
  4678 000037B0 EBB5                <2> 	jmp seek
  4679 000037B2 8A03                <2> varfnd:	mov al, [ebx]
  4680 000037B4 3C04                <2> 	cmp al, 4
  4681 000037B6 7404                <2> 	je save2
  4682 000037B8 4B                  <2> 	dec ebx
  4683 000037B9 4E                  <2> 	dec esi
  4684 000037BA EBF6                <2> 	jmp varfnd
  4685 000037BC 4B                  <2> save2:	dec ebx
  4686 000037BD 4E                  <2> 	dec esi
  4687 000037BE 8A03                <2> 	mov al, [ebx]
  4688 000037C0 3C05                <2> 	cmp al, 5
  4689 000037C2 7402                <2> 	je remove
  4690 000037C4 EBEC                <2> 	jmp varfnd
  4691 000037C6 8A03                <2> remove: mov al, [ebx]
  4692 000037C8 3C00                <2> 	cmp al, 0
  4693 000037CA 749B                <2> 	je seek
  4694 000037CC 30C0                <2> 	xor al, al
  4695 000037CE 8803                <2> 	mov [ebx], al
  4696 000037D0 43                  <2> 	inc ebx
  4697 000037D1 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4698 000037D3 8B35[762F0000]      <2> save:	mov esi, [currentcommandloc]
  4699 000037D9 43                  <2> 	inc ebx
  4700 000037DA B005                <2> 	mov al, 5
  4701 000037DC B404                <2> 	mov ah, 4
  4702 000037DE 668903              <2> 	mov [ebx], ax
  4703 000037E1 43                  <2> 	inc ebx
  4704 000037E2 43                  <2> svhere:	inc ebx
  4705 000037E3 46                  <2> 	inc esi
  4706 000037E4 8A06                <2> 	mov al, [esi]
  4707 000037E6 3C00                <2> 	cmp al, 0
  4708 000037E8 0F844A000000        <2> 	je near svdone
  4709 000037EE 3C25                <2> 	cmp al, '%'
  4710 000037F0 7404                <2> 	je ans2
  4711 000037F2 8803                <2> 	mov [ebx], al	
  4712 000037F4 EBEC                <2> 	jmp svhere
  4713 000037F6 56                  <2> ans2:	push esi
  4714 000037F7 BE[68BC0300]        <2> 	mov esi, buf2
  4715 000037FC E823000000          <2> 	call ansfnd
  4716 00003801 E803000000          <2> 	call anscp
  4717 00003806 5E                  <2> 	pop esi
  4718 00003807 EBD9                <2> 	jmp svhere
  4719 00003809 8A06                <2> anscp:	mov al, [esi]
  4720 0000380B 8803                <2> 	mov [ebx], al
  4721 0000380D 81FE[7CBC0300]      <2> 	cmp esi, numbuf
  4722 00003813 74CD                <2> 	je svhere
  4723 00003815 3C00                <2> 	cmp al, 0
  4724 00003817 74C9                <2> 	je svhere
  4725 00003819 43                  <2> 	inc ebx
  4726 0000381A 46                  <2> 	inc esi
  4727 0000381B EBEC                <2> 	jmp anscp
  4728 0000381D 5E                  <2> ansnf:	pop esi
  4729 0000381E 8A06                <2> 	mov al, [esi]
  4730 00003820 8803                <2> 	mov [ebx], al
  4731 00003822 EBBE                <2> 	jmp svhere
  4732 00003824 46                  <2> ansfnd:	inc esi
  4733 00003825 81FE[7BBC0300]      <2> 	cmp esi, numbuf - 1
  4734 0000382B 740A                <2> 	je fndans
  4735 0000382D 8A06                <2> 	mov al, [esi]
  4736 0000382F 3C00                <2> 	cmp al, 0
  4737 00003831 74EA                <2> 	je ansnf
  4738 00003833 3C30                <2> 	cmp al, '0'
  4739 00003835 74ED                <2> 	je ansfnd
  4740                              <2> fndans:
  4741 00003837 C3                  <2> 	ret
  4742 00003838 30C0                <2> svdone:	xor al, al
  4743 0000383A 8803                <2> 	mov [ebx], al
  4744 0000383C C3                  <2> 	ret
  4745                              <1> %include 'source/programs/_run.asm' ;./
  4746                              <2> 
  4747 0000383D 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4748 00003841 FF2C2E2F00          <2> 	db 255,44,"./",0
  4749                              <2> rundiskprog:
  4750 00003846 8B3D[762F0000]      <2> 	mov edi, [currentcommandloc]
  4751 0000384C 81C702000000        <2> 	add edi, 2
  4752 00003852 BE00004000          <2> 	mov esi, 0x400000
  4753 00003857 E83F2D0000          <2> 	call loadfile
  4754 0000385C 81FA94010000        <2> 	cmp edx, 404
  4755 00003862 746A                <2> 	je noprogfound
  4756 00003864 BB00004000          <2> 	mov ebx, 0x400000
  4757 00003869 A1[3D380000]        <2> 	mov eax, [elfstart]
  4758 0000386E 3903                <2> 	cmp [ebx], eax
  4759 00003870 0F8437000000        <2> 	je near runelf
  4760 00003876 66813B4558          <2> 	cmp word [ebx], "EX"
  4761 0000387B 7577                <2> 	jne progbatchfound
  4762 0000387D 81C302000000        <2> 	add ebx, 2
  4763 00003883 8B3D[762F0000]      <2> 	mov edi, [currentcommandloc]
  4764 00003889 81C702000000        <2> 	add edi, 2
  4765                              <2> findspaceprog:
  4766 0000388F 8A07                <2> 	mov al, [edi]
  4767 00003891 47                  <2> 	inc edi
  4768 00003892 3C20                <2> 	cmp al, " "
  4769 00003894 75F9                <2> 	jne findspaceprog
  4770                              <2> findnonspaceprog:
  4771 00003896 8A07                <2> 	mov al, [edi]
  4772 00003898 47                  <2> 	inc edi
  4773 00003899 3C20                <2> 	cmp al, " "
  4774 0000389B 74F9                <2> 	je findnonspaceprog
  4775 0000389D 4F                  <2> 	dec edi
  4776 0000389E 8925[E8A10300]      <2> 	mov [previousstack], esp
  4777 000038A4 FFD3                <2> 	call ebx
  4778 000038A6 8B25[E8A10300]      <2> 	mov esp, [previousstack]
  4779 000038AC C3                  <2> 	ret
  4780                              <2> runelf:
  4781 000038AD 8B3D[762F0000]      <2> 	mov edi, [currentcommandloc]
  4782 000038B3 81C702000000        <2> 	add edi, 2
  4783 000038B9 81C380000000        <2> 	add ebx, 0x80
  4784 000038BF 8925[E8A10300]      <2> 	mov [previousstack], esp
  4785 000038C5 FFD3                <2> 	call ebx
  4786 000038C7 8B25[E8A10300]      <2> 	mov esp, [previousstack]
  4787 000038CD C3                  <2> 	ret
  4788                              <2> noprogfound:
  4789 000038CE BE[3E890000]        <2> 	mov esi, notfound1
  4790 000038D3 E853E4FFFF          <2> 	call print
  4791 000038D8 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  4792 000038DE 81C602000000        <2> 	add esi, 2
  4793 000038E4 E842E4FFFF          <2> 	call print
  4794 000038E9 BE[46890000]        <2> 	mov esi, notfound2
  4795 000038EE E838E4FFFF          <2> 	call print
  4796 000038F3 C3                  <2> 	ret
  4797                              <2> progbatchfound:
  4798 000038F4 BF00004000          <2> 		mov edi, 0x400000
  4799 000038F9 C605[62A40300]01    <2> 		mov byte [BATCHISON], 1
  4800                              <2> 	batchrunloop:
  4801 00003900 E89BF3FFFF          <2> 		call buftxtclear
  4802 00003905 BE[68B80300]        <2> 		mov esi, buftxt
  4803 0000390A 8935[762F0000]      <2> 		mov [currentcommandloc], esi
  4804                              <2> 	batchrunloop2:
  4805 00003910 B10A                <2> 		mov cl, 10
  4806 00003912 B50D                <2> 		mov ch, 13
  4807 00003914 380F                <2> 		cmp [edi], cl
  4808 00003916 0F8419000000        <2> 		je near nxtbatchrunline
  4809 0000391C 382F                <2> 		cmp [edi], ch
  4810 0000391E 0F8411000000        <2> 		je near nxtbatchrunline
  4811 00003924 803F00              <2> 		cmp byte [edi], 0
  4812 00003927 0F8408000000        <2> 		je near nxtbatchrunline
  4813 0000392D 8A07                <2> 		mov al, [edi]
  4814 0000392F 8806                <2> 		mov [esi], al
  4815 00003931 46                  <2> 		inc esi
  4816 00003932 47                  <2> 		inc edi
  4817 00003933 EBDB                <2> 		jmp batchrunloop2
  4818                              <2> 	nxtbatchrunline:
  4819 00003935 47                  <2> 		inc edi
  4820 00003936 380F                <2> 		cmp [edi], cl
  4821 00003938 74FB                <2> 		je nxtbatchrunline
  4822 0000393A 382F                <2> 		cmp [edi], ch
  4823 0000393C 74F7                <2> 		je nxtbatchrunline
  4824 0000393E 893D[9C390000]      <2> 		mov [batchedi], edi
  4825 00003944 893D[5EA40300]      <2> 		mov [BATCHPOS], edi
  4826 0000394A C60600              <2> 		mov byte [esi], 0
  4827 0000394D BE[68B80300]        <2> 		mov esi, buftxt
  4828 00003952 803E00              <2> 		cmp byte [esi], 0
  4829 00003955 0F8439000000        <2> 		je near nobatchfoundrun
  4830 0000395B 31DB                <2> 		xor ebx, ebx
  4831 0000395D 8A1D[F9A30300]      <2> 		mov bl, [IFON]
  4832 00003963 80FB00              <2> 		cmp bl, 0
  4833 00003966 0F8534000000        <2> 		jne near iftestbatch
  4834                              <2> 	doneiftest:
  4835 0000396C 803D[723A0000]00    <2> 		cmp byte [runnextline], 0
  4836 00003973 0F8405000000        <2> 		je near noruniftest
  4837 00003979 E822F5FFFF          <2> 		call run
  4838                              <2> 	noruniftest:
  4839 0000397E C605[723A0000]01    <2> 		mov byte [runnextline], 1
  4840 00003985 8B3D[9C390000]      <2> 		mov edi, [batchedi]
  4841 0000398B 803F00              <2> 		cmp byte [edi], 0
  4842 0000398E 0F856CFFFFFF        <2> 		jne near batchrunloop
  4843                              <2> 	nobatchfoundrun:
  4844 00003994 C605[62A40300]00    <2> 		mov byte [BATCHISON], 0
  4845 0000399B C3                  <2> 		ret
  4846                              <2> 	
  4847 0000399C 00000000            <2> batchedi dd 0	
  4848                              <2> 	
  4849                              <2> 	iftestbatch:
  4850 000039A0 BE[FAA30300]        <2> 		mov esi, IFTRUE
  4851 000039A5 01DE                <2> 		add esi, ebx
  4852 000039A7 803E00              <2> 		cmp byte [esi], 0
  4853 000039AA 0F85BCFFFFFF        <2> 		jne near doneiftest
  4854 000039B0 881D[733A0000]      <2> 		mov [iffalsebuf], bl
  4855 000039B6 803D[63A40300]01    <2> 		cmp byte [LOOPON], 1
  4856 000039BD 0F8513000000        <2> 		jne near fifindbatch
  4857 000039C3 E938FFFFFF          <2> 		jmp batchrunloop
  4858                              <2> 	elsetestbatch:
  4859 000039C8 C60601              <2> 		mov byte [esi], 1
  4860 000039CB 81C705000000        <2> 		add edi, 5
  4861 000039D1 E92AFFFFFF          <2> 		jmp batchrunloop
  4862                              <2> 	fifindbatch:
  4863 000039D6 66B96966            <2> 		mov cx, "if"
  4864 000039DA 66B86669            <2> 		mov ax, "fi"
  4865 000039DE 663907              <2> 		cmp [edi], ax
  4866 000039E1 0F8424000000        <2> 		je near fifoundbatch
  4867 000039E7 66390F              <2> 		cmp [edi], cx
  4868 000039EA 0F8465000000        <2> 		je near iffoundbatch
  4869 000039F0 803F00              <2> 		cmp byte [edi], 0
  4870 000039F3 0F8412000000        <2> 		je near fifoundbatch
  4871 000039F9 B8656C7365          <2> 		mov eax, "else"
  4872 000039FE 3907                <2> 		cmp [edi], eax
  4873 00003A00 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4874 00003A06 E973FFFFFF          <2> 		jmp noruniftest
  4875                              <2> 	fifoundbatch:
  4876 00003A0B 81C702000000        <2> 		add edi, 2
  4877 00003A11 B00A                <2> 		mov al, 10
  4878 00003A13 3807                <2> 		cmp [edi], al
  4879 00003A15 0F840B000000        <2> 		je near goodfibatch
  4880 00003A1B 803F00              <2> 		cmp byte [edi], 0
  4881 00003A1E 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4882 00003A24 EBB0                <2> 		jmp fifindbatch
  4883                              <2> 	goodfibatch:
  4884 00003A26 B001                <2> 		mov al, 1
  4885 00003A28 2805[F9A30300]      <2> 		sub [IFON], al 
  4886 00003A2E A0[F9A30300]        <2> 		mov al, [IFON]
  4887 00003A33 8A1D[733A0000]      <2> 		mov bl, [iffalsebuf]
  4888 00003A39 38D8                <2> 		cmp al, bl
  4889 00003A3B 7799                <2> 		ja fifindbatch
  4890 00003A3D 8B35[762F0000]      <2> 		mov esi, [currentcommandloc]
  4891 00003A43 81EF02000000        <2> 		sub edi, 2
  4892 00003A49 C605[723A0000]00    <2> 		mov byte [runnextline], 0
  4893 00003A50 E9ABFEFFFF          <2> 		jmp batchrunloop
  4894                              <2> 	iffoundbatch:
  4895 00003A55 B020                <2> 		mov al, ' '
  4896 00003A57 81C702000000        <2> 		add edi, 2
  4897 00003A5D 3807                <2> 		cmp [edi], al
  4898 00003A5F 0F8571FFFFFF        <2> 		jne near fifindbatch
  4899 00003A65 B001                <2> 		mov al, 1
  4900 00003A67 0005[F9A30300]      <2> 		add [IFON], al
  4901 00003A6D E964FFFFFF          <2> 		jmp fifindbatch
  4902                              <2> 		
  4903                              <2> 		
  4904 00003A72 01                  <2> runnextline db 1
  4905 00003A73 00                  <2> iffalsebuf db 0
  4906 00003A74 C3                  <2> notbatch: ret 
  4907                              <1> %ifdef network.included
  4908                              <1> 	%include 'source/programs/arp.asm'
  4909 00003A75 FF2C61727000        <2> db 255,44,"arp",0
  4910                              <2> 	;ARP TESTING
  4911                              <2> arptest:
  4912 00003A7B 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  4913 00003A81 81C604000000        <2> 	add esi, 4
  4914 00003A87 E8B74D0000          <2> 	call strtoip
  4915 00003A8C 890D[333B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4916 00003A92 E8F24D0000          <2> 	call showip
  4917 00003A97 803D[373B0000]01    <2> 	cmp byte [arpconfig], 1
  4918 00003A9E 7405                <2> 	je arptest2
  4919 00003AA0 E841000000          <2> 	call arpinit
  4920                              <2> arptest2:	;try to reach 192.168.0.1
  4921 00003AA5 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  4922 00003AAB 668B1D[34890000]    <2> 	mov bx, [sysmac + 4]
  4923 00003AB2 890D[133B0000]      <2> 	mov [sourcemac], ecx
  4924 00003AB8 66891D[173B0000]    <2> 	mov [sourcemac + 4],bx
  4925 00003ABF 890D[233B0000]      <2> 	mov [arpsenderinfo], ecx
  4926 00003AC5 66891D[273B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4927 00003ACC BF[0D3B0000]        <2> 	mov edi, frame
  4928 00003AD1 BE[373B0000]        <2> 	mov esi, framend
  4929 00003AD6 E8364D0000          <2> 	call sendpacket
  4930 00003ADB BE[77890000]        <2> 	mov esi, line
  4931 00003AE0 E846E2FFFF          <2> 	call print
  4932 00003AE5 C3                  <2> 	ret
  4933                              <2> 	
  4934                              <2> arpinit:
  4935 00003AE6 BE[383B0000]        <2> 	mov esi, arptable
  4936 00003AEB BF[30890000]        <2> 	mov edi, sysmac
  4937 00003AF0 BB[2C890000]        <2> 	mov ebx, sysip
  4938 00003AF5 8B0F                <2> 	mov ecx, [edi]
  4939 00003AF7 890E                <2> 	mov [esi], ecx
  4940 00003AF9 668B4F04            <2> 	mov cx, [edi + 4]
  4941 00003AFD 894E04              <2> 	mov [esi + 4], ecx
  4942 00003B00 8B0B                <2> 	mov ecx, [ebx]
  4943 00003B02 894E06              <2> 	mov [esi + 6], ecx
  4944 00003B05 C605[373B0000]01    <2> 	mov byte [arpconfig], 1
  4945 00003B0C C3                  <2> 	ret
  4946                              <2> 	
  4947                              <2> ;example frame
  4948                              <2> frame:
  4949 00003B0D FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4950 00003B13 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4951 00003B19 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4952                              <2> 	;;example packet
  4953 00003B1B 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4954 00003B1D 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4955 00003B1F 0604                <2> 					db 6,4			;length of mac, length of ip
  4956 00003B21 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4957 00003B23 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4958 00003B29 C0A80073            <2> 					db 192,168,0,115		;ip
  4959 00003B2D 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4960 00003B33 C0A80000            <2> 					db 192,168,0,0			;ip
  4961                              <2> framend:
  4962                              <2> 
  4963 00003B37 00                  <2> arpconfig db 0
  4964                              <2> arptable:	;;mac,ip
  4965 00003B38 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4966 00003B41 00<rept>            <2>
  4967                              <2> arptableend:	
  4968                              <1> %endif
  4969                              <1> %include 'source/programs/batch.asm'
  4970 00003B9C FF2C626174636800    <2> db 255,44,"batch",0
  4971                              <2> 	batchst: 
  4972 00003BA4 8B3D[762F0000]      <2> 		mov edi, [currentcommandloc]
  4973 00003BAA 81C706000000        <2> 		add edi, 6
  4974 00003BB0 803F00              <2> 		cmp byte [edi], 0
  4975 00003BB3 0F846D000000        <2> 		je near nonamefound
  4976 00003BB9 BE00004000          <2> 		mov esi, 0x400000
  4977 00003BBE E8D8290000          <2> 		call loadfile
  4978 00003BC3 89D0                <2> 		mov eax, edx
  4979 00003BC5 3D94010000          <2> 		cmp eax, 404
  4980 00003BCA 7465                <2> 		je goodbatchname
  4981 00003BCC BE[D73B0000]        <2> 		mov esi, badbatchname
  4982 00003BD1 E855E1FFFF          <2> 		call print
  4983 00003BD6 C3                  <2> 		ret
  4984 00003BD7 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4985 00003BE0 20616C726561647920- <2>
  4986 00003BE9 657869737473210A00  <2>
  4987 00003BF2 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4988 00003BFB 746F20747970652061- <2>
  4989 00003C04 206E616D6520616674- <2>
  4990 00003C0D 65722074686520636F- <2>
  4991 00003C16 6D6D616E642E0A00    <2>
  4992 00003C1E 00000000            <2> 		esicache3 dd 0
  4993 00003C22 00000000            <2> 		esicache2 dd 0
  4994                              <2> 	nonamefound:
  4995 00003C26 BE[F23B0000]        <2> 		mov esi, namenotfoundbatch
  4996 00003C2B E8FBE0FFFF          <2> 		call print
  4997 00003C30 C3                  <2> 		ret
  4998                              <2> 	goodbatchname:
  4999 00003C31 BE00004000          <2> 		mov esi, 0x400000
  5000                              <2> 	batchcreate:
  5001 00003C36 8935[1E3C0000]      <2> 		mov [esicache3], esi
  5002 00003C3C BF00008000          <2> 		mov edi, 0x800000
  5003 00003C41 B00A                <2> 		mov al, 10
  5004 00003C43 B307                <2> 		mov bl, 7
  5005 00003C45 B404                <2> 		mov ah, 4
  5006 00003C47 CD30                <2> 		int 30h
  5007 00003C49 8935[223C0000]      <2> 		mov [esicache2], esi
  5008 00003C4F 8A0E                <2> 		mov cl, [esi]
  5009 00003C51 8B35[1E3C0000]      <2> 		mov esi, [esicache3]
  5010 00003C57 BB[8B3C0000]        <2> 		mov ebx, exitword
  5011 00003C5C E854F3FFFF          <2> 		call cndtest
  5012 00003C61 3C01                <2> 		cmp al, 1
  5013 00003C63 7411                <2> 		je endbatchcreate
  5014 00003C65 3C02                <2> 		cmp al, 2
  5015 00003C67 740D                <2> 		je endbatchcreate
  5016 00003C69 8B35[223C0000]      <2> 		mov esi, [esicache2]
  5017 00003C6F B00A                <2> 		mov al, 10
  5018 00003C71 8806                <2> 		mov [esi], al
  5019 00003C73 46                  <2> 		inc esi
  5020 00003C74 EBC0                <2> 		jmp batchcreate
  5021                              <2> 	endbatchcreate:
  5022 00003C76 8B35[1E3C0000]      <2> 		mov esi, [esicache3]
  5023 00003C7C 31C0                <2> 		xor eax, eax
  5024 00003C7E 8806                <2> 		mov [esi], al
  5025 00003C80 BE00004000          <2> 		mov esi, 0x400000
  5026 00003C85 E8A1E0FFFF          <2> 		call print
  5027 00003C8A C3                  <2> 		ret
  5028                              <2> 	
  5029 00003C8B 5C7800              <2> 	exitword db "\x",0
  5030 00003C8E 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5031 00003C97 6F20657869742E0A00  <2>
  5032                              <1> %ifdef gui.background
  5033                              <1> 	%include 'source/programs/background.asm'
  5034                              <1> %endif
  5035                              <1> %include 'source/programs/beep.asm'
  5036 00003CA0 FF2C6265657000      <2> 	db 255,44,"beep",0
  5037                              <2> beep:
  5038 00003CA7 B8[CC3C0000]        <2> 	mov eax, beepstart
  5039 00003CAC A3[6B020000]        <2> 	mov [soundpos], eax
  5040 00003CB1 B8[D03C0000]        <2> 	mov eax, beepend
  5041 00003CB6 A3[6F020000]        <2> 	mov [soundendpos], eax
  5042 00003CBB C605[68020000]01    <2> 	mov byte [soundon], 1
  5043                              <2> waitforsoundendbeep:
  5044 00003CC2 A0[68020000]        <2> 	mov al, [soundon]
  5045 00003CC7 3C00                <2> 	cmp al, 0
  5046 00003CC9 75F7                <2> 	jne waitforsoundendbeep
  5047 00003CCB C3                  <2> 	ret
  5048                              <2> 	
  5049                              <2> beepstart:
  5050 00003CCC 3200D111            <2> 	dw 50, 4561
  5051                              <2> beepend:
  5052                              <1> %include 'source/programs/cd.asm'
  5053 00003CD0 FF2C636400          <2> db 255,44,"cd",0
  5054                              <2> cd:
  5055 00003CD5 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5056 00003CDB 81C603000000        <2> 	add esi, 3
  5057 00003CE1 8B3D[F0A10300]      <2> 	mov edi, [currentfolderloc]
  5058 00003CE7 893D[ECA10300]      <2> 	mov [lastfolderloc], edi
  5059 00003CED 81C7[F4A10300]      <2> 	add edi, currentfolder
  5060 00003CF3 4F                  <2> 	dec edi
  5061 00003CF4 66813E2E2E          <2> 	cmp word [esi], ".."
  5062 00003CF9 742A                <2> 	je .moveup
  5063 00003CFB 47                  <2> 	inc edi
  5064                              <2> .movedown:
  5065 00003CFC 8A06                <2> 	mov al, [esi]
  5066 00003CFE 8807                <2> 	mov [edi], al
  5067 00003D00 47                  <2> 	inc edi
  5068 00003D01 46                  <2> 	inc esi
  5069 00003D02 3C00                <2> 	cmp al, 0
  5070 00003D04 740A                <2> 	je .donecd
  5071 00003D06 81FF[F4A30300]      <2> 	cmp edi, currentfolderend
  5072 00003D0C 72EE                <2> 	jb .movedown
  5073 00003D0E 30C0                <2> 	xor al, al
  5074                              <2> .donecd:
  5075 00003D10 4F                  <2> 	dec edi
  5076 00003D11 C6072F              <2> 	mov byte [edi], '/'
  5077 00003D14 47                  <2> 	inc edi
  5078 00003D15 C60700              <2> 	mov byte [edi], 0
  5079 00003D18 81EF[F4A10300]      <2> 	sub edi, currentfolder
  5080 00003D1E 893D[F0A10300]      <2> 	mov [currentfolderloc], edi
  5081 00003D24 C3                  <2> 	ret
  5082                              <2> .moveup:
  5083 00003D25 31C0                <2> 	xor eax, eax
  5084 00003D27 A3[ECA10300]        <2> 	mov [lastfolderloc], eax
  5085                              <2> .moveuploop:
  5086 00003D2C 4F                  <2> 	dec edi
  5087 00003D2D 8A07                <2> 	mov al, [edi]
  5088 00003D2F 81FF[F4A10300]      <2> 	cmp edi, currentfolder
  5089 00003D35 763B                <2> 	jbe .moveupover
  5090 00003D37 3C2F                <2> 	cmp al, '/'
  5091 00003D39 75F1                <2> 	jne .moveuploop
  5092 00003D3B C6072F              <2> 	mov byte [edi], '/'
  5093 00003D3E 47                  <2> 	inc edi
  5094 00003D3F C60700              <2> 	mov byte [edi], 0
  5095 00003D42 81EF[F4A10300]      <2> 	sub edi, currentfolder
  5096 00003D48 893D[F0A10300]      <2> 	mov [currentfolderloc], edi
  5097 00003D4E 81C7[F4A10300]      <2> 	add edi, currentfolder
  5098 00003D54 4F                  <2> 	dec edi
  5099                              <2> .lastfolder:
  5100 00003D55 4F                  <2> 	dec edi
  5101 00003D56 8A07                <2> 	mov al, [edi]
  5102 00003D58 81FF[F4A10300]      <2> 	cmp edi, currentfolder
  5103 00003D5E 7604                <2> 	jbe .donemoveup
  5104 00003D60 3C2F                <2> 	cmp al, '/'
  5105 00003D62 75F1                <2> 	jne .lastfolder
  5106                              <2> .donemoveup:
  5107 00003D64 47                  <2> 	inc edi
  5108 00003D65 81EF[F4A10300]      <2> 	sub edi, currentfolder
  5109 00003D6B 893D[ECA10300]      <2> 	mov [lastfolderloc], edi
  5110 00003D71 C3                  <2> 	ret
  5111                              <2> .moveupover:
  5112 00003D72 BF[F4A10300]        <2> 	mov edi, currentfolder
  5113 00003D77 C6072F              <2> 	mov byte [edi], '/'
  5114 00003D7A 47                  <2> 	inc edi
  5115 00003D7B C60700              <2> 	mov byte [edi], 0
  5116 00003D7E 31C0                <2> 	xor eax, eax
  5117 00003D80 A3[ECA10300]        <2> 	mov [lastfolderloc], eax
  5118 00003D85 40                  <2> 	inc eax
  5119 00003D86 A3[F0A10300]        <2> 	mov [currentfolderloc], eax
  5120 00003D8B C3                  <2> 	ret
  5121                              <1> %include 'source/programs/charmap.asm'
  5122 00003D8C 00                  <2> charmapnum db 0
  5123 00003D8D FF2C636861726D6170- <2> db 255,44,"charmap",0
  5124 00003D96 00                  <2>
  5125 00003D97 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5126 00003D9D 81C609000000        <2> 	add esi, 9
  5127 00003DA3 803E00              <2> 	cmp byte [esi], 0
  5128 00003DA6 7412                <2> 	je .nospecific
  5129 00003DA8 E853F5FFFF          <2> 	call cnvrthextxt
  5130 00003DAD 6689C8              <2> 	mov ax, cx
  5131 00003DB0 66BB0700            <2> 	mov bx, 7
  5132 00003DB4 E800E6FFFF          <2> 	call prcharq
  5133 00003DB9 C3                  <2> 	ret
  5134                              <2> .nospecific:
  5135 00003DBA 66BB0700            <2> 	mov bx, 7
  5136 00003DBE 66B82000            <2> 	mov ax, " "
  5137 00003DC2 C605[8C3D0000]00    <2> 	mov byte [charmapnum], 0
  5138 00003DC9 E8EBE5FFFF          <2> 	call prcharq
  5139 00003DCE E8E6E5FFFF          <2> 	call prcharq
  5140 00003DD3 E8E1E5FFFF          <2> 	call prcharq
  5141 00003DD8 E8DCE5FFFF          <2> 	call prcharq
  5142 00003DDD 66B83000            <2> 	mov ax, "0"
  5143                              <2> charmapnumprnt:
  5144 00003DE1 E8D3E5FFFF          <2> 	call prcharq
  5145 00003DE6 6640                <2> 	inc ax
  5146 00003DE8 6650                <2> 	push ax
  5147 00003DEA 66B82000            <2> 	mov ax, " "
  5148 00003DEE E8C6E5FFFF          <2> 	call prcharq
  5149 00003DF3 6658                <2> 	pop ax
  5150 00003DF5 663D3900            <2> 	cmp ax, "9"
  5151 00003DF9 76E6                <2> 	jbe charmapnumprnt
  5152 00003DFB 66B84100            <2> 	mov ax, "A"
  5153                              <2> charmapnumprnt2:
  5154 00003DFF E8B5E5FFFF          <2> 	call prcharq
  5155 00003E04 6640                <2> 	inc ax
  5156 00003E06 6650                <2> 	push ax
  5157 00003E08 66B82000            <2> 	mov ax, " "
  5158 00003E0C E8A8E5FFFF          <2> 	call prcharq
  5159 00003E11 6658                <2> 	pop ax
  5160 00003E13 663D4700            <2> 	cmp ax, "G"
  5161 00003E17 72E6                <2> 	jb charmapnumprnt2
  5162                              <2> 	
  5163 00003E19 BE[77890000]        <2> 	mov esi, line
  5164 00003E1E E8E9DEFFFF          <2> 	call printquiet
  5165 00003E23 6631C0              <2> 	xor ax, ax
  5166 00003E26 6689C1              <2> 	mov cx, ax
  5167 00003E29 E85BF3FFFF          <2> 	call showhexsmall
  5168 00003E2E E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5169                              <2> charmapcopy:
  5170 00003E33 6640                <2> 	inc ax
  5171 00003E35 6650                <2> 	push ax
  5172 00003E37 663D0800            <2> 	cmp ax, 8
  5173 00003E3B 7466                <2> 	je charmapnocopy
  5174 00003E3D 663D0900            <2> 	cmp ax, 9
  5175 00003E41 7460                <2> 	je charmapnocopy
  5176 00003E43 663D0A00            <2> 	cmp ax, 10
  5177 00003E47 745A                <2> 	je charmapnocopy
  5178 00003E49 663D0D00            <2> 	cmp ax, 13
  5179 00003E4D 7454                <2> 	je charmapnocopy
  5180 00003E4F 663DFF00            <2> 	cmp ax, 255
  5181 00003E53 744E                <2> 	je charmapnocopy
  5182 00003E55 663D0001            <2> 	cmp ax, 256
  5183 00003E59 7443                <2> 	je nomorecharmap
  5184 00003E5B E859E5FFFF          <2> 	call prcharq
  5185 00003E60 66B82000            <2> 	mov ax, " "
  5186 00003E64 E850E5FFFF          <2> 	call prcharq
  5187 00003E69 6658                <2> 	pop ax
  5188                              <2> charmapcopycheck:
  5189 00003E6B FE05[8C3D0000]      <2> 	inc byte [charmapnum]
  5190 00003E71 803D[8C3D0000]10    <2> 	cmp byte [charmapnum], 16
  5191 00003E78 72B9                <2> 	jb charmapcopy
  5192 00003E7A 6650                <2> 	push ax
  5193 00003E7C BE[77890000]        <2> 	mov esi, line
  5194 00003E81 E886DEFFFF          <2> 	call printquiet
  5195 00003E86 6658                <2> 	pop ax
  5196 00003E88 3CFF                <2> 	cmp al, 255
  5197 00003E8A 7412                <2> 	je nomorecharmap
  5198 00003E8C 88C1                <2> 	mov cl, al
  5199 00003E8E FEC1                <2> 	inc cl
  5200 00003E90 E8F4F2FFFF          <2> 	call showhexsmall
  5201 00003E95 C605[8C3D0000]00    <2> 	mov byte [charmapnum], 0
  5202 00003E9C EB95                <2> 	jmp charmapcopy
  5203                              <2> nomorecharmap:
  5204 00003E9E E920EEFFFF          <2> 	jmp nwcmd
  5205                              <2> charmapnocopy:
  5206 00003EA3 6650                <2> 	push ax
  5207 00003EA5 66B82000            <2> 	mov ax, " "
  5208 00003EA9 E80BE5FFFF          <2> 	call prcharq
  5209 00003EAE E806E5FFFF          <2> 	call prcharq
  5210 00003EB3 6658                <2> 	pop ax
  5211 00003EB5 EBB4                <2> 	jmp charmapcopycheck
  5212                              <1> %ifdef gui.included
  5213                              <1> 	%include 'source/programs/circle.asm'
  5214 00003EB7 FF2C636972636C6500  <2> db 255,44,"circle",0
  5215                              <2> circle:
  5216 00003EC0 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5217 00003EC6 81C607000000        <2> 	add esi, 7
  5218 00003ECC 66B91000            <2> 	mov cx, 16
  5219 00003ED0 30C0                <2> 	xor al, al
  5220 00003ED2 3806                <2> 	cmp [esi], al
  5221 00003ED4 7405                <2> 	je .nocmdline
  5222 00003ED6 E86EF4FFFF          <2> 	call cnvrttxt
  5223                              <2> .nocmdline:
  5224 00003EDB E8C5080000          <2> 	call linetester.stime
  5225 00003EE0 E857000000          <2> 	call fcircle.nocmdline
  5226 00003EE5 E8D3080000          <2> 	call linetester.etime
  5227 00003EEA 53                  <2> 	push ebx
  5228 00003EEB 57                  <2> 	push edi
  5229 00003EEC E835E4FFFF          <2> 	call getchar
  5230 00003EF1 59                  <2> 	pop ecx
  5231 00003EF2 E870F3FFFF          <2> 	call showdec
  5232 00003EF7 BE[4B480000]        <2> 	mov esi, linetester.msgcircle
  5233 00003EFC E80BDEFFFF          <2> 	call printquiet
  5234 00003F01 59                  <2> 	pop ecx
  5235 00003F02 E860F3FFFF          <2> 	call showdec
  5236 00003F07 BE[62480000]        <2> 	mov esi, linetester.msgtime
  5237 00003F0C E8FBDDFFFF          <2> 	call printquiet
  5238 00003F11 E80E2F0000          <2> 	call reloadallgraphics
  5239 00003F16 C3                  <2> 	ret
  5240                              <2> 	
  5241 00003F17 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5242 00003F20 00                  <2>
  5243                              <2> fcircle:	
  5244 00003F21 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5245 00003F27 81C608000000        <2> 	add esi, 8
  5246 00003F2D 66B91000            <2> 	mov cx, 16
  5247 00003F31 30C0                <2> 	xor al, al
  5248 00003F33 3806                <2> 	cmp [esi], al
  5249 00003F35 7405                <2> 	je .nocmdline
  5250 00003F37 E80DF4FFFF          <2> 	call cnvrttxt
  5251                              <2> .nocmdline:
  5252 00003F3C 6689C8              <2> 	mov ax, cx
  5253 00003F3F 66D1E1              <2> 	shl cx, 1
  5254 00003F42 6689CA              <2> 	mov dx, cx
  5255 00003F45 663B15[4C570000]    <2> 	cmp dx, [resolutionx]
  5256 00003F4C 731B                <2> 	jae .done
  5257 00003F4E 663B0D[4E570000]    <2> 	cmp cx, [resolutiony]
  5258 00003F55 7312                <2> 	jae .done
  5259 00003F57 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5260 00003F5E 31FF                <2> 	xor edi, edi
  5261 00003F60 803D[9C890000]01    <2> 	cmp byte [guion], 1
  5262 00003F67 7401                <2> 	je .lp
  5263 00003F69 C3                  <2> .done ret
  5264                              <2> .lp:
  5265 00003F6A 6629C2              <2> 	sub dx, ax
  5266 00003F6D 6629C1              <2> 	sub cx, ax
  5267 00003F70 60                  <2> 	pusha
  5268 00003F71 E8CD290000          <2> 	call fillcircle
  5269 00003F76 61                  <2> 	popa
  5270 00003F77 47                  <2> 	inc edi
  5271 00003F78 660335[64020000]    <2> 	add si, [timenanoseconds]
  5272 00003F7F 6601C2              <2> 	add dx, ax
  5273 00003F82 6601C2              <2> 	add dx, ax
  5274 00003F85 6601C2              <2> 	add dx, ax
  5275 00003F88 6601C1              <2> 	add cx, ax
  5276 00003F8B 663B15[4C570000]    <2> 	cmp dx, [resolutionx]
  5277 00003F92 72D6                <2> 	jb .lp
  5278 00003F94 6689C2              <2> 	mov dx, ax
  5279 00003F97 6601C2              <2> 	add dx, ax
  5280 00003F9A 6601C1              <2> 	add cx, ax
  5281 00003F9D 6601C1              <2> 	add cx, ax
  5282 00003FA0 663B0D[4E570000]    <2> 	cmp cx, [resolutiony]
  5283 00003FA7 72C1                <2> 	jb .lp
  5284 00003FA9 C3                  <2> 	ret
  5285                              <1> %endif
  5286                              <1> %include 'source/programs/clear.asm'
  5287 00003FAA FF2C636C65617200    <2> db 255,44,"clear",0
  5288 00003FB2 E823DEFFFF          <2> 		call clear
  5289 00003FB7 C3                  <2> 		ret 
  5290                              <1> %include 'source/programs/cpuid.asm'
  5291 00003FB8 FF2C637075696400    <2> db 255,44,"cpuid",0
  5292 00003FC0 31C0                <2> 	xor eax, eax
  5293 00003FC2 0FA2                <2> 	cpuid
  5294 00003FC4 891D[15400000]      <2> 	mov [cpuidbuf], ebx
  5295 00003FCA 8915[19400000]      <2> 	mov [cpuidbuf + 4], edx
  5296 00003FD0 890D[1D400000]      <2> 	mov [cpuidbuf + 8], ecx
  5297 00003FD6 BE[15400000]        <2> 	mov esi, cpuidbuf
  5298 00003FDB E84BDDFFFF          <2> 	call print
  5299 00003FE0 BE[77890000]        <2> 	mov esi, line
  5300 00003FE5 E841DDFFFF          <2> 	call print
  5301 00003FEA B801000000          <2> 	mov eax, 1
  5302 00003FEF 0FA2                <2> 	cpuid
  5303 00003FF1 89C1                <2> 	mov ecx, eax
  5304 00003FF3 C605[88310000]02    <2> 	mov byte [firsthexshown], 2
  5305 00003FFA E89EF1FFFF          <2> 	call showhex
  5306 00003FFF B808000080          <2> 	mov eax, 0x80000008
  5307 00004004 0FA2                <2> 	cpuid
  5308 00004006 89C1                <2> 	mov ecx, eax
  5309 00004008 C605[88310000]02    <2> 	mov byte [firsthexshown], 2
  5310 0000400F E889F1FFFF          <2> 	call showhex
  5311 00004014 C3                  <2> 	ret
  5312                              <2> 	
  5313 00004015 00<rept>            <2> cpuidbuf times 13 db 0
  5314                              <2> cpuidvendorend:
  5315                              <1> %ifdef network.included
  5316                              <1> 	%include 'source/programs/dhcp.asm'
  5317 00004022 FF2C6468637000      <2> db 255,44,"dhcp",0
  5318                              <2> dhcp:
  5319 00004029 BE[E9400000]        <2> 	mov esi, .dhcp.mac
  5320 0000402E BB[C9410000]        <2> 	mov ebx, .dhcp.option.mac
  5321 00004033 BF[A9400000]        <2> 	mov edi, .mac
  5322 00004038 31C9                <2> 	xor ecx, ecx
  5323 0000403A 66890D[BB400000]    <2> 	mov [.ip.checksum], cx
  5324 00004041 66890D[CB400000]    <2> 	mov [.udp.checksum], cx
  5325 00004048 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  5326 0000404E 890B                <2> 	mov [ebx], ecx
  5327 00004050 890F                <2> 	mov [edi], ecx
  5328 00004052 890E                <2> 	mov [esi], ecx
  5329 00004054 668B0D[34890000]    <2> 	mov cx, [sysmac + 4]
  5330 0000405B 66894B04            <2> 	mov [ebx + 4], cx
  5331 0000405F 66894E04            <2> 	mov [esi + 4], cx
  5332 00004063 66894F04            <2> 	mov [edi + 4], cx
  5333 00004067 BF[B1400000]        <2> 	mov edi, .ip.header
  5334 0000406C BE[C5400000]        <2> 	mov esi, .ip.headerend
  5335 00004071 E8A5470000          <2> 	call getchecksum
  5336 00004076 66890D[BB400000]    <2> 	mov [.ip.checksum], cx
  5337 0000407D BF[C5400000]        <2> 	mov edi, .udp.header
  5338 00004082 BE[E0410000]        <2> 	mov esi, .udp.end
  5339 00004087 E88F470000          <2> 	call getchecksum
  5340 0000408C 66890D[CB400000]    <2> 	mov [.udp.checksum], cx
  5341 00004093 BF[A3400000]        <2> 	mov edi, .frame
  5342 00004098 BE[E0410000]        <2> 	mov esi, .udp.end
  5343 0000409D E86F470000          <2> 	call sendpacket
  5344 000040A2 C3                  <2> 	ret
  5345                              <2> .frame:
  5346 000040A3 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5347 000040A9 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5348 000040AF 0800                <2> 	db 8,0
  5349                              <2> .ip.header:
  5350 000040B1 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5351 000040B2 00                  <2> 	db 0
  5352 000040B3 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5353 000040B5 0000                <2> 	dw 0
  5354 000040B7 0000                <2> 	dw 0
  5355 000040B9 80                  <2> 	db 0x80
  5356 000040BA 11                  <2> 	db 17
  5357 000040BB 0000                <2> .ip.checksum dw 0
  5358 000040BD 00000000            <2> 	db 0,0,0,0
  5359 000040C1 FFFFFFFF            <2> 	db 255,255,255,255	
  5360                              <2> .ip.headerend:
  5361                              <2> .udp.header:
  5362 000040C5 0044                <2> 	db 0,68	;source port
  5363 000040C7 0043                <2> 	db 0,67 ;destination port
  5364 000040C9 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5365 000040CB 0000                <2> .udp.checksum dw 0
  5366                              <2> .udp.headerend:
  5367                              <2> .dhcp.data:
  5368 000040CD 01                  <2> 	db 1	;message type
  5369 000040CE 01                  <2> 	db 1	;hardware type
  5370 000040CF 06                  <2> 	db 6	;hardware address length
  5371 000040D0 00                  <2> 	db 0	;hops
  5372 000040D1 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5373 000040D5 0000                <2> 	db 0,0	;seconds elapsed
  5374 000040D7 0000                <2> 	db 0,0	;flags
  5375 000040D9 00000000            <2> 	db 0,0,0,0	;client ip address
  5376 000040DD 00000000            <2> 	db 0,0,0,0	;your ip address
  5377 000040E1 00000000            <2> 	db 0,0,0,0	;server ip address
  5378 000040E5 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5379 000040E9 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5380 000040EF 00<rept>            <2> 	times 10 db 0	;padding
  5381 000040F9 00<rept>            <2> 	times 64 db 0	;server host name
  5382 00004139 00<rept>            <2> 	times 128 db 0	;boot file name
  5383 000041B9 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5384                              <2> .dhcp.option.type:
  5385 000041BD 350103              <2> 	db 53,1,3	;DHCP Request
  5386 000041C0 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5387 000041C6 3D07                <2> 	db 61,7 ;client id(mac)
  5388 000041C8 01                  <2> 	db 1	;Type=Ethernet
  5389 000041C9 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5390 000041CF 0C08                <2> 	db 12,8 ;host name
  5391 000041D1 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5392 000041D9 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5393 000041DF FF                  <2> 	db 0xFF	;end DHCP options
  5394                              <2> .dhcp.end:
  5395                              <2> .udp.end:
  5396                              <2> 	
  5397                              <1> %endif
  5398                              <1> %ifdef disk.none
  5399                              <1> %else
  5400                              <1> 	%include 'source/programs/dos.asm'
  5401 000041E0 FF2C646F7300        <2> db 255,44,"dos",0
  5402                              <2> dosrunner:
  5403 000041E6 8925[E8A10300]      <2> 	mov [previousstack], esp
  5404 000041EC 8B3D[762F0000]      <2> 	mov edi, [currentcommandloc]
  5405 000041F2 81C704000000        <2> 	add edi, 4
  5406 000041F8 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5407 000041FD E899230000          <2> 	call loadfile
  5408 00004202 8B3D[762F0000]      <2> 	mov edi, [currentcommandloc]
  5409 00004208 81C704000000        <2> 	add edi, 4
  5410 0000420E 81FA94010000        <2> 	cmp edx, 404
  5411 00004214 0F845E000000        <2> 	je near .noprogfound
  5412 0000421A BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5413 0000421F 31C9                <2> 	xor ecx, ecx
  5414                              <2> .findparams:
  5415 00004221 47                  <2> 	inc edi
  5416 00004222 8A07                <2> 	mov al, [edi]
  5417 00004224 3C20                <2> 	cmp al, " "
  5418 00004226 75F9                <2> 	jne .findparams
  5419                              <2> .copyparams:
  5420 00004228 8A07                <2> 	mov al, [edi]
  5421 0000422A 8803                <2> 	mov [ebx], al
  5422 0000422C 43                  <2> 	inc ebx
  5423 0000422D 47                  <2> 	inc edi
  5424 0000422E 41                  <2> 	inc ecx
  5425 0000422F 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5426 00004235 7304                <2> 	jae .nomoreparams
  5427 00004237 3C00                <2> 	cmp al, 0
  5428 00004239 75ED                <2> 	jne .copyparams
  5429                              <2> .nomoreparams:
  5430 0000423B 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5431 00004241 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5432 00004245 8ED8                <2> 	mov ds, ax
  5433 00004247 8EC0                <2> 	mov es, ax
  5434 00004249 8EE0                <2> 	mov fs, ax
  5435 0000424B 8EE8                <2> 	mov gs, ax
  5436 0000424D 31C0                <2> 	xor eax, eax
  5437 0000424F 31DB                <2> 	xor ebx, ebx
  5438 00004251 31C9                <2> 	xor ecx, ecx
  5439 00004253 31D2                <2> 	xor edx, edx
  5440 00004255 31FF                <2> 	xor edi, edi
  5441 00004257 31F6                <2> 	xor esi, esi
  5442 00004259 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5443 00004260 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5444 00004264 6689DA              <2> 	mov dx, bx
  5445 00004267 8EC3                <2> 	mov es, bx
  5446 00004269 8EE3                <2> 	mov fs, bx
  5447 0000426B 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5448 0000426F 8EEB                <2> 	mov gs, bx
  5449 00004271 8B25[E8A10300]      <2> 	mov esp, [previousstack]
  5450 00004277 C3                  <2> 	ret
  5451                              <2> .noprogfound:
  5452 00004278 BE[3E890000]        <2> 	mov esi, notfound1
  5453 0000427D E8A9DAFFFF          <2> 	call print
  5454 00004282 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5455 00004288 81C604000000        <2> 	add esi, 4
  5456 0000428E E898DAFFFF          <2> 	call print
  5457 00004293 BE[46890000]        <2> 	mov esi, notfound2
  5458 00004298 E88EDAFFFF          <2> 	call print
  5459 0000429D C3                  <2> 	ret
  5460                              <2> 	
  5461                              <1> %endif
  5462                              <1> %include 'source/programs/dump.asm'
  5463 0000429E FF2C64756D7000      <2> db 255,44,"dump",0
  5464 000042A5 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5465 000042AB 81C605000000        <2> 	add esi, 5
  5466 000042B1 31C9                <2> 	xor ecx, ecx
  5467 000042B3 66B83078            <2> 	mov ax, "0x"
  5468 000042B7 663906              <2> 	cmp [esi], ax
  5469 000042BA 740A                <2> 	je dumphexin
  5470 000042BC E888F0FFFF          <2> 	call cnvrttxt
  5471 000042C1 E910000000          <2> 	jmp dumphexnow
  5472                              <2> dumphexin:
  5473 000042C6 81C602000000        <2> 	add esi, 2
  5474 000042CC E82FF0FFFF          <2> 	call cnvrthextxt
  5475 000042D1 E900000000          <2> 	jmp dumphexnow
  5476                              <2> dumphexnow:
  5477 000042D6 89CF                <2> 	mov edi, ecx
  5478 000042D8 89FE                <2> 	mov esi, edi
  5479 000042DA 81C680030000        <2> 	add esi, 896
  5480                              <2> dumphexloop:
  5481 000042E0 8B0F                <2> 	mov ecx, [edi]
  5482 000042E2 C605[88310000]05    <2> 	mov byte [firsthexshown],5
  5483 000042E9 E8AFEEFFFF          <2> 	call showhex
  5484 000042EE 81C704000000        <2> 	add edi, 4
  5485 000042F4 39F7                <2> 	cmp edi, esi
  5486 000042F6 72E8                <2> 	jb dumphexloop
  5487 000042F8 E882E5FFFF          <2> 	call termcopy
  5488 000042FD C3                  <2> 	ret 
  5489                              <1> %include 'source/programs/echo.asm'
  5490                              <2> 
  5491 000042FE FF2C6563686F00      <2> db 255,44,"echo",0
  5492                              <2> 	echoprog:
  5493 00004305 8B35[762F0000]      <2> 		mov esi, [currentcommandloc]
  5494 0000430B 81C605000000        <2> 		add esi, 5
  5495 00004311 8A06                <2> 		mov al, [esi]
  5496 00004313 E813DAFFFF          <2> 		call print
  5497 00004318 BE[77890000]        <2> 		mov esi, line
  5498 0000431D E809DAFFFF          <2> 		call print
  5499 00004322 C3                  <2> 		ret
  5500 00004323 BB[68A40300]        <2> 	echovr:	mov ebx, variables
  5501 00004328 BF06000000          <2> 		mov edi, 6
  5502 0000432D E83C000000          <2> 		call nxtvrech
  5503 00004332 E954000000          <2> 		jmp prntvr2
  5504 00004337 B13D                <2> 	echvar:	mov cl, '='
  5505 00004339 43                  <2> 		inc ebx
  5506 0000433A 8A03                <2> 		mov al, [ebx]
  5507 0000433C 3C00                <2> 		cmp al, 0
  5508 0000433E 742E                <2> 		je nxtvrech
  5509 00004340 3C3D                <2> 		cmp al, '='
  5510 00004342 7422                <2> 		je nxtvrechb1
  5511 00004344 8B35[762F0000]      <2> 		mov esi, [currentcommandloc]
  5512 0000434A 01FE                <2> 		add esi, edi
  5513 0000434C E864ECFFFF          <2> 		call cndtest
  5514 00004351 3C02                <2> 		cmp al, 2
  5515 00004353 7432                <2> 		je prntvr
  5516 00004355 3C01                <2> 		cmp al, 1
  5517 00004357 742E                <2> 		je prntvr
  5518 00004359 8B35[762F0000]      <2> 		mov esi, [currentcommandloc]
  5519 0000435F 01FE                <2> 		add esi, edi
  5520 00004361 E908000000          <2> 		jmp nxtvrech
  5521                              <2> 	nxtvrechb1:
  5522 00004366 81EB02000000        <2> 		sub ebx, 2
  5523 0000436C EBC9                <2> 		jmp echvar
  5524 0000436E 8A03                <2> 	nxtvrech: mov al, [ebx]
  5525 00004370 3C05                <2> 		cmp al, 5
  5526 00004372 740A                <2> 		je nxtvrec2
  5527 00004374 43                  <2> 		inc ebx
  5528 00004375 81FB[68B40300]      <2> 		cmp ebx, varend
  5529 0000437B 72F1                <2> 		jb nxtvrech
  5530 0000437D C3                  <2> 		ret
  5531 0000437E 43                  <2> 	nxtvrec2: inc ebx
  5532 0000437F 8A03                <2> 		mov al, [ebx]
  5533 00004381 3C04                <2> 		cmp al, 4
  5534 00004383 74B2                <2> 		je echvar
  5535 00004385 EBE7                <2> 		jmp nxtvrech
  5536 00004387 43                  <2> 	prntvr: inc ebx
  5537 00004388 89DE                <2> 		mov esi, ebx
  5538 0000438A C3                  <2> 		ret
  5539 0000438B E89BD9FFFF          <2> 	prntvr2: call print
  5540 00004390 BE[77890000]        <2> 		mov esi, line
  5541 00004395 E891D9FFFF          <2> 		call print
  5542 0000439A C3                  <2> 		ret 
  5543                              <1> %include 'source/programs/else.asm'
  5544 0000439B FF2C656C736500      <2> 	db 255,44,"else",0
  5545 000043A2 31C0                <2> elsecmd:	xor eax, eax
  5546 000043A4 3805[62A40300]      <2> 	cmp [BATCHISON], al
  5547 000043AA 0F84C4F6FFFF        <2> 	je near notbatch
  5548 000043B0 A0[F9A30300]        <2> 	mov al, [IFON]
  5549 000043B5 BE[FAA30300]        <2> 	mov esi, IFTRUE
  5550 000043BA 01C6                <2> 	add esi, eax
  5551 000043BC 8A06                <2> 	mov al, [esi]
  5552 000043BE 3401                <2> 	xor al, 1
  5553 000043C0 8806                <2> 	mov [esi], al
  5554 000043C2 C3                  <2> 	ret 
  5555                              <1> %include 'source/programs/exit.asm'
  5556 000043C3 FF2C6578697400      <2> db 255,44,"exit",0
  5557 000043CA 803D[F8A30300]01    <2> 	cmp byte [ranboot], 1
  5558 000043D1 0F8480E8FFFF        <2> 	je near returnfromexp
  5559 000043D7 E966E7FFFF          <2> 	jmp nobootfile
  5560                              <1> %include 'source/programs/fi.asm'
  5561 000043DC FF2C666900          <2> 	db 255,44,"fi",0
  5562 000043E1 30C0                <2> 	xor al, al
  5563 000043E3 3805[62A40300]      <2> 	cmp [BATCHISON], al
  5564 000043E9 0F8485F6FFFF        <2> 	je near notbatch
  5565 000043EF B001                <2> fi:	mov al, 1
  5566 000043F1 2805[F9A30300]      <2> 	sub [IFON],al
  5567 000043F7 C3                  <2> 	ret 
  5568                              <1> %ifdef gui.included
  5569                              <1> 	%include 'source/programs/gui.asm'
  5570 000043F8 FF2C67756900        <2> db 255,44,"gui",0
  5571                              <2> guiswitcher:
  5572 000043FE 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5573 00004404 81C604000000        <2> 	add esi, 4
  5574 0000440A 31C9                <2> 	xor ecx, ecx
  5575 0000440C 803E00              <2> 	cmp byte [esi], 0
  5576 0000440F 740A                <2> 	je .nomodepref
  5577 00004411 E8EAEEFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5578 00004416 E907000000          <2> 	jmp .modepref
  5579                              <2> .nomodepref:
  5580 0000441B 51                  <2> 	push ecx
  5581 0000441C E8B9D9FFFF          <2> 	call clear
  5582 00004421 59                  <2> 	pop ecx
  5583                              <2> .modepref:
  5584 00004422 66BB[5C53]          <2> 	mov bx, guiswitch
  5585 00004426 66891D[D70C0000]    <2> 	mov [realmodeptr], bx
  5586 0000442D BB[3D440000]        <2> 	mov ebx, guiswitchret
  5587 00004432 891D[D30C0000]      <2> 	mov [realmodereturn], ebx
  5588 00004438 E97FC7FFFF          <2> 	jmp realmode
  5589                              <2> guiswitchret:
  5590 0000443D 65803D[9C890000]01  <2> 	cmp byte [gs:guion], 1
  5591 00004445 7401                <2> 	je .cont
  5592 00004447 C3                  <2> 	ret
  5593                              <2> .cont:
  5594 00004448 BF[3A550000]        <2> 	mov edi, VBEMODEBLOCK
  5595                              <2> .loop:
  5596 0000444D 658B07              <2> 	mov eax, [gs:edi]
  5597 00004450 8907                <2> 	mov [edi], eax
  5598 00004452 47                  <2> 	inc edi
  5599 00004453 81FF[3E580000]      <2> 	cmp edi, VBEEND
  5600 00004459 72F2                <2> 	jb .loop
  5601 0000445B A1[62570000]        <2> 	mov eax, [physbaseptr]
  5602 00004460 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5603 00004466 C1E304              <2> 	shl ebx, 4
  5604 00004469 29D8                <2> 	sub eax, ebx
  5605 0000446B A3[62570000]        <2> 	mov [physbaseptr], eax
  5606 00004470 C605[B7230000]00    <2> 	mov byte [termguion], 0
  5607 00004477 BE[7DBC0300]        <2> 	mov esi, graphicstable
  5608 0000447C 30C0                <2> 	xor al, al
  5609                              <2> .clear:
  5610 0000447E 8806                <2> 	mov [esi], al
  5611 00004480 46                  <2> 	inc esi
  5612 00004481 81FE[7DBE0300]      <2> 	cmp esi, graphicstableend
  5613 00004487 72F5                <2> 	jb .clear
  5614 00004489 E82F2B0000          <2> 	call guisetup
  5615                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5616 0000448E 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  5617 00004495 668B0D[4E570000]    <2> 	mov cx, [resolutiony]
  5618 0000449C 6689D3              <2> 	mov bx, dx
  5619 0000449F 6689C8              <2> 	mov ax, cx
  5620 000044A2 66D1EB              <2> 	shr bx, 1
  5621 000044A5 66D1E8              <2> 	shr ax, 1
  5622 000044A8 6689DA              <2> 	mov dx, bx
  5623 000044AB 66D1EA              <2> 	shr dx, 1
  5624 000044AE 6689C1              <2> 	mov cx, ax
  5625 000044B1 66D1E9              <2> 	shr cx, 1
  5626 000044B4 6601D3              <2> 	add bx, dx
  5627 000044B7 6601C8              <2> 	add ax, cx
  5628 000044BA 66D1E9              <2> 	shr cx, 1
  5629 000044BD 66C1EB03            <2> 	shr bx, 3
  5630 000044C1 66C1E303            <2> 	shl bx, 3
  5631 000044C5 66C1E804            <2> 	shr ax, 4
  5632 000044C9 66C1E004            <2> 	shl ax, 4
  5633 000044CD 66891D[C2710000]    <2> 	mov [termwindow], bx
  5634 000044D4 66A3[C4710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5635 000044DA BE[C2710000]        <2> 	mov esi, termwindow
  5636 000044DF 31DB                <2> 	xor ebx, ebx
  5637 000044E1 6631C0              <2> 	xor ax, ax
  5638 000044E4 E806320000          <2> 	call showwindow
  5639 000044E9 E851130000          <2> 	call cursorgui
  5640 000044EE E8E7D8FFFF          <2> 	call clear
  5641 000044F3 C3                  <2> 	ret
  5642                              <2> 	
  5643                              <1> %endif
  5644                              <1> %include 'source/programs/help.asm'
  5645 000044F4 FF2C68656C7000      <2> db 255,44,"help",0
  5646                              <2> lscmd:	
  5647 000044FB B00D                <2> 		mov al, 13
  5648 000044FD E8B7DEFFFF          <2> 		call prcharq
  5649 00004502 BE[CC330000]        <2> 		mov esi, progstart
  5650 00004507 BB[5C530000]        <2> 		mov ebx, progend
  5651 0000450C BE[E89D0300]        <2> dir:	mov esi, fileindex
  5652 00004511 8A06                <2> 	dirnxt:	mov al, [esi]
  5653 00004513 30E4                <2> 		xor ah, ah
  5654 00004515 3CFF                <2> 		cmp al, 255
  5655 00004517 7415                <2> 		je dirfnd
  5656 00004519 46                  <2> 		inc esi
  5657 0000451A 81FE[E8A10300]      <2> 		cmp esi,  fileindexend
  5658 00004520 7339                <2> 		jae dirdn
  5659 00004522 EBED                <2> 		jmp dirnxt
  5660                              <2> 	dirfnd3:
  5661 00004524 46                  <2> 		inc esi
  5662 00004525 81FE[E8A10300]      <2> 		cmp esi, fileindexend
  5663 0000452B 76E4                <2> 		jbe dirnxt
  5664 0000452D 4E                  <2> 		dec esi
  5665 0000452E 46                  <2> 	dirfnd:	inc esi
  5666 0000452F 8A06                <2> 		mov al, [esi]
  5667 00004531 30E4                <2> 		xor ah, ah
  5668 00004533 3C2C                <2> 		cmp al, 44
  5669 00004535 740B                <2> 		je dirfnd2
  5670 00004537 46                  <2> 		inc esi
  5671 00004538 81FE[E8A10300]      <2> 		cmp esi,  fileindexend
  5672 0000453E 731B                <2> 		jae dirdn
  5673 00004540 EBCF                <2> 		jmp dirnxt
  5674 00004542 46                  <2> 	dirfnd2: inc esi
  5675 00004543 E8C4D7FFFF          <2> 		call printquiet
  5676 00004548 56                  <2> 		push esi
  5677 00004549 B009                <2> 		mov al, 9
  5678 0000454B E869DEFFFF          <2> 		call prcharq
  5679 00004550 5E                  <2> 		pop esi
  5680 00004551 81FE[E8A10300]      <2> 		cmp esi,  fileindexend
  5681 00004557 7302                <2> 		jae dirdn
  5682 00004559 EBB6                <2> 		jmp dirnxt
  5683 0000455B BE[77890000]        <2> 	dirdn:	mov esi, line
  5684 00004560 E8C6D7FFFF          <2> 			call print
  5685 00004565 C3                  <2> 			ret
  5686 00004566 00                  <2> currentdir db 0
  5687                              <1> %include 'source/programs/if.asm'
  5688 00004567 FF2C696600          <2> 	db 255,44,"if",0
  5689 0000456C 30C0                <2> ifcmd:	xor al, al
  5690 0000456E 3805[62A40300]      <2> 	cmp [BATCHISON], al
  5691 00004574 0F84FAF4FFFF        <2> 	je near notbatch
  5692 0000457A 8B1D[762F0000]      <2> 	mov ebx, [currentcommandloc]
  5693 00004580 81C303000000        <2> 	add ebx, 3
  5694 00004586 89DE                <2> 	mov esi, ebx
  5695 00004588 8A06                <2> chkeqsn: mov al, [esi]
  5696 0000458A 3C00                <2> 	cmp al, 0
  5697 0000458C 0F84E2F4FFFF        <2> 	je near notbatch
  5698 00004592 3C3D                <2> 	cmp al, '='
  5699 00004594 0F8403000000        <2> 	je near chkeqdn
  5700 0000459A 46                  <2> 	inc esi
  5701 0000459B EBEB                <2> 	jmp chkeqsn
  5702 0000459D B000                <2> chkeqdn: mov al, 0 
  5703 0000459F 8806                <2> 	mov [esi], al
  5704 000045A1 46                  <2> 	inc esi
  5705 000045A2 E8D3E9FFFF          <2> 	call tester
  5706 000045A7 3C01                <2> 	cmp al, 1
  5707 000045A9 0F8405000000        <2> 	je near trueif
  5708 000045AF E91C000000          <2> 	jmp falseif
  5709 000045B4 31C0                <2> trueif:	xor eax, eax
  5710 000045B6 A0[F9A30300]        <2> 	mov al, [IFON]
  5711 000045BB FEC0                <2> 	inc al
  5712 000045BD A2[F9A30300]        <2> 	mov [IFON], al
  5713 000045C2 30E4                <2> 	xor ah, ah
  5714 000045C4 BE[FAA30300]        <2> 	mov esi, IFTRUE
  5715 000045C9 01C6                <2> 	add esi, eax
  5716 000045CB B401                <2> 	mov ah, 1
  5717 000045CD 8826                <2> 	mov [esi], ah
  5718 000045CF C3                  <2> 	ret 
  5719 000045D0 31C0                <2> falseif: xor eax, eax
  5720 000045D2 A0[F9A30300]        <2> 	mov al, [IFON]
  5721 000045D7 FEC0                <2> 	inc al
  5722 000045D9 A2[F9A30300]        <2> 	mov [IFON], al
  5723 000045DE 30E4                <2> 	xor ah, ah
  5724 000045E0 BE[FAA30300]        <2> 	mov esi, IFTRUE
  5725 000045E5 01C6                <2> 	add esi, eax
  5726 000045E7 30E4                <2> 	xor ah, ah
  5727 000045E9 8826                <2> 	mov [esi], ah
  5728 000045EB C3                  <2> 	ret 
  5729                              <1> %ifdef network.included
  5730                              <1> 	%include 'source/programs/ipconfig.asm'
  5731 000045EC FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5732 000045F5 6700                <2>
  5733                              <2> ifconfig:
  5734 000045F7 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  5735 000045FD 81C609000000        <2> 	add esi, 9
  5736 00004603 803E00              <2> 	cmp byte [esi], 0
  5737 00004606 740B                <2> 	je .noip
  5738 00004608 E836420000          <2> 	call strtoip
  5739 0000460D 890D[2C890000]      <2> 	mov [sysip], ecx
  5740                              <2> .noip:
  5741                              <2> %ifdef ne2000.included
  5742                              <2> 	cmp byte [ne2000.nicconfig], 1
  5743                              <2> 	jne .none2000
  5744                              <2> 	mov esi, ne2000.name
  5745                              <2> 	call print
  5746                              <2> 	mov ecx, ne2000.mac
  5747                              <2> 	call showmac
  5748                              <2> 	mov esi, line
  5749                              <2> 	call print
  5750                              <2> .none2000:
  5751                              <2> %endif
  5752                              <2> %ifdef rtl8139.included
  5753                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5754                              <2> 	jne .nortl8139
  5755                              <2> 	mov esi, rtl8139.name
  5756                              <2> 	call print
  5757                              <2> 	mov ecx, rtl8139.mac
  5758                              <2> 	call showmac
  5759                              <2> 	mov esi, line
  5760                              <2> 	call print
  5761                              <2> .nortl8139:
  5762                              <2> %endif
  5763                              <2> %ifdef rtl8169.included
  5764 00004613 803D[81860000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5765 0000461A 751E                <2> 	jne .nortl8169
  5766 0000461C BE[88860000]        <2> 	mov esi, rtl8169.name
  5767 00004621 E805D7FFFF          <2> 	call print
  5768 00004626 B9[82860000]        <2> 	mov ecx, rtl8169.mac
  5769 0000462B E895420000          <2> 	call showmac
  5770 00004630 BE[77890000]        <2> 	mov esi, line
  5771 00004635 E8F1D6FFFF          <2> 	call print
  5772                              <2> .nortl8169:
  5773                              <2> %endif
  5774                              <2> %ifdef i8254x.included
  5775                              <2> 	cmp byte [i8254x.nicconfig], 1
  5776                              <2> 	jne .noi8254x
  5777                              <2> 	mov esi, i8254x.name
  5778                              <2> 	call print
  5779                              <2> 	mov ecx, i8254x.mac
  5780                              <2> 	call showmac
  5781                              <2> 	mov esi, line
  5782                              <2> 	call print
  5783                              <2> .noi8254x:
  5784                              <2> %endif
  5785 0000463A 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  5786 00004640 E844420000          <2> 	call showip
  5787 00004645 BE[77890000]        <2> 	mov esi, line
  5788 0000464A E8DCD6FFFF          <2> 	call print
  5789 0000464F C3                  <2> 	ret
  5790                              <2> 	
  5791                              <1> %endif
  5792                              <1> %include 'source/programs/keycode.asm'
  5793 00004650 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5794 00004659 00                  <2>
  5795                              <2> keycode:
  5796 0000465A 66C705[8A230000]00- <2> 	mov word [trans], 0
  5797 00004662 00                  <2>
  5798 00004663 C605[3A670000]00    <2> 	mov byte [threadson], 0
  5799                              <2> %ifdef io.serial
  5800                              <2> .noserial:
  5801                              <2> 	hlt
  5802                              <2> 	mov dx, [serial.address]
  5803                              <2> 	in al, dx
  5804                              <2> 	cmp al, 0
  5805                              <2> 	je .noserial
  5806                              <2> 	mov cl, al
  5807                              <2> 	call showhexsmall
  5808                              <2> 	cmp al, 0x1B
  5809                              <2> 	jne .noserial
  5810                              <2> 	in al, dx
  5811                              <2> 	mov cl, al
  5812                              <2> 	call showhexsmall
  5813                              <2> 	cmp cl, 0x5B
  5814                              <2> 	je .noserial
  5815                              <2> 	ret
  5816                              <2> %else
  5817 0000466A E8A9150000          <2> 	call getkey
  5818 0000466F 31C0                <2> 	xor eax, eax
  5819 00004671 31C9                <2> 	xor ecx, ecx
  5820 00004673 8A0D[F65B0000]      <2> 	mov cl, [specialkey]
  5821 00004679 80F900              <2> 	cmp cl, 0
  5822 0000467C 0F8405000000        <2> 	je near .nospecialkeycode
  5823 00004682 E802EBFFFF          <2> 	call showhexsmall
  5824                              <2> .nospecialkeycode:
  5825 00004687 668B0D[88230000]    <2> 	mov cx, [lastkey + 2]
  5826 0000468E E8F6EAFFFF          <2> 	call showhexsmall
  5827 00004693 80F901              <2> 	cmp cl, 1
  5828 00004696 75C2                <2> 	jne keycode
  5829 00004698 C3                  <2> 	ret
  5830                              <2> %endif
  5831                              <1> %ifdef gui.included
  5832                              <1> 	%include 'source/programs/line.asm'
  5833 00004699 FF2C6C696E6500      <2> db 255,44,"line",0
  5834                              <2> linetester:
  5835 000046A0 803D[9C890000]00    <2> 	cmp byte [guion], 0
  5836 000046A7 0F841B000000        <2> 	je near .done
  5837 000046AD 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5838 000046B4 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5839 000046B9 E868000000          <2> 	call .circletest
  5840 000046BE BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5841 000046C3 E801000000          <2> 	call .linetest
  5842                              <2> .done:
  5843 000046C8 C3                  <2> 	ret
  5844                              <2> 
  5845                              <2> .linetest:
  5846 000046C9 53                  <2> 	push ebx
  5847 000046CA E8D6000000          <2> 	call .stime
  5848 000046CF 5B                  <2> 	pop ebx
  5849 000046D0 31FF                <2> 	xor edi, edi
  5850                              <2> .ltlp:
  5851 000046D2 53                  <2> 	push ebx
  5852 000046D3 E81C010000          <2> 	call .st
  5853 000046D8 66F7D6              <2> 	not si
  5854 000046DB E814010000          <2> 	call .st
  5855 000046E0 5B                  <2> 	pop ebx
  5856 000046E1 66F7D6              <2> 	not si
  5857 000046E4 660335[64020000]    <2> 	add si, [timenanoseconds]
  5858 000046EB 4B                  <2> 	dec ebx
  5859 000046EC 81FB00000000        <2> 	cmp ebx, 0
  5860 000046F2 77DE                <2> 	ja .ltlp
  5861 000046F4 E8C4000000          <2> 	call .etime
  5862 000046F9 53                  <2> 	push ebx	
  5863 000046FA 57                  <2> 	push edi
  5864 000046FB E8D4260000          <2> 	call guiclear
  5865 00004700 E81F270000          <2> 	call reloadallgraphics
  5866 00004705 59                  <2> 	pop ecx
  5867 00004706 E85CEBFFFF          <2> 	call showdec
  5868 0000470B BE[36480000]        <2> 	mov esi, .msg
  5869 00004710 E816D6FFFF          <2> 	call print
  5870 00004715 59                  <2> 	pop ecx
  5871 00004716 E84CEBFFFF          <2> 	call showdec
  5872 0000471B BE[62480000]        <2> 	mov esi, .msgtime
  5873 00004720 E806D6FFFF          <2> 	call print
  5874 00004725 C3                  <2> 	ret
  5875                              <2> 	
  5876                              <2> .circletest:
  5877 00004726 53                  <2> 	push ebx
  5878 00004727 E879000000          <2> 	call .stime
  5879 0000472C 5B                  <2> 	pop ebx
  5880 0000472D 31FF                <2> 	xor edi, edi
  5881                              <2> .ctlp:
  5882 0000472F 53                  <2> 	push ebx
  5883 00004730 668B0D[4E570000]    <2> 	mov cx, [resolutiony]
  5884 00004737 66D1E9              <2> 	shr cx, 1
  5885 0000473A 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  5886 00004741 66D1EA              <2> 	shr dx, 1
  5887 00004744 6689C8              <2> 	mov ax, cx
  5888                              <2> .circle:
  5889 00004747 60                  <2> 	pusha
  5890 00004748 E8E4200000          <2> 	call drawcircle
  5891 0000474D 61                  <2> 	popa
  5892 0000474E 6648                <2> 	dec ax
  5893 00004750 47                  <2> 	inc edi
  5894 00004751 663D0100            <2> 	cmp ax, 1
  5895 00004755 77F0                <2> 	ja .circle
  5896 00004757 66F7D6              <2> 	not si
  5897                              <2> .circle2:
  5898 0000475A 60                  <2> 	pusha
  5899 0000475B E8D1200000          <2> 	call drawcircle
  5900 00004760 61                  <2> 	popa
  5901 00004761 47                  <2> 	inc edi
  5902 00004762 6640                <2> 	inc ax
  5903 00004764 6639C8              <2> 	cmp ax, cx
  5904 00004767 76F1                <2> 	jbe .circle2
  5905 00004769 5B                  <2> 	pop ebx
  5906 0000476A 66F7D6              <2> 	not si
  5907 0000476D 660335[64020000]    <2> 	add si, [timenanoseconds]
  5908 00004774 4B                  <2> 	dec ebx
  5909 00004775 81FB00000000        <2> 	cmp ebx, 0
  5910 0000477B 77B2                <2> 	ja .ctlp
  5911 0000477D E83B000000          <2> 	call .etime
  5912 00004782 53                  <2> 	push ebx
  5913 00004783 57                  <2> 	push edi
  5914 00004784 59                  <2> 	pop ecx
  5915 00004785 E8DDEAFFFF          <2> 	call showdec
  5916 0000478A BE[4B480000]        <2> 	mov esi, .msgcircle
  5917 0000478F E897D5FFFF          <2> 	call print
  5918 00004794 59                  <2> 	pop ecx
  5919 00004795 E8CDEAFFFF          <2> 	call showdec
  5920 0000479A BE[62480000]        <2> 	mov esi, .msgtime
  5921 0000479F E887D5FFFF          <2> 	call print
  5922 000047A4 C3                  <2> 	ret
  5923                              <2> 	
  5924                              <2> .stime:
  5925 000047A5 F4                  <2> 	hlt
  5926 000047A6 A1[60020000]        <2> 	mov eax, [timeseconds]
  5927 000047AB 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5928 000047B1 A3[71480000]        <2> 	mov [.time], eax
  5929 000047B6 891D[75480000]      <2> 	mov [.time + 4], ebx
  5930 000047BC C3                  <2> 	ret
  5931                              <2> 	
  5932                              <2> .etime:
  5933 000047BD A1[60020000]        <2> 	mov eax, [timeseconds]
  5934 000047C2 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5935 000047C8 8B0D[71480000]      <2> 	mov ecx, [.time]
  5936 000047CE 8B15[75480000]      <2> 	mov edx, [.time + 4]
  5937 000047D4 C1EA0A              <2> 	shr edx, 10
  5938 000047D7 C1EB0A              <2> 	shr ebx, 10
  5939 000047DA 29C8                <2> 	sub eax, ecx
  5940 000047DC 3D00000000          <2> 	cmp eax, 0
  5941 000047E1 740E                <2> 	je .notclp
  5942                              <2> .tclp:
  5943 000047E3 81C340420F00        <2> 	add ebx, 1000000
  5944 000047E9 48                  <2> 	dec eax
  5945 000047EA 3D00000000          <2> 	cmp eax, 0
  5946 000047EF 75F2                <2> 	jne .tclp
  5947                              <2> .notclp:
  5948 000047F1 29D3                <2> 	sub ebx, edx
  5949 000047F3 C3                  <2> 	ret
  5950                              <2> 	
  5951                              <2> .st:
  5952 000047F4 6631C0              <2> 	xor ax, ax
  5953 000047F7 6631DB              <2> 	xor bx, bx
  5954 000047FA 668B0D[4E570000]    <2> 	mov cx, [resolutiony]
  5955 00004801 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  5956                              <2> .lp:
  5957 00004808 60                  <2> 	pusha
  5958 00004809 E89A240000          <2> 	call drawline
  5959 0000480E 61                  <2> 	popa
  5960                              <2> .noswitch:
  5961 0000480F 47                  <2> 	inc edi
  5962 00004810 6643                <2> 	inc bx
  5963 00004812 664A                <2> 	dec dx
  5964 00004814 6681FB0000          <2> 	cmp bx, 0
  5965 00004819 74ED                <2> 	je .lp
  5966 0000481B 6681FA0000          <2> 	cmp dx, 0
  5967 00004820 75E6                <2> 	jne .lp
  5968                              <2> .lp2:
  5969 00004822 60                  <2> 	pusha
  5970 00004823 E880240000          <2> 	call drawline
  5971 00004828 61                  <2> 	popa
  5972 00004829 47                  <2> 	inc edi
  5973 0000482A 6640                <2> 	inc ax
  5974 0000482C 6649                <2> 	dec cx
  5975 0000482E 6681F90000          <2> 	cmp cx, 0
  5976 00004833 75ED                <2> 	jne .lp2
  5977 00004835 C3                  <2> 	ret
  5978                              <2> 	
  5979 00004836 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5980 0000483F 6520647261776E2069- <2>
  5981 00004848 6E2000              <2>
  5982 0000484B 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5983 00004854 65726520647261776E- <2>
  5984 0000485D 20696E2000          <2>
  5985 00004862 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5986 0000486B 6E64732E0A00        <2>
  5987 00004871 0000000000000000    <2> .time dd 0,0	
  5988                              <1> %endif
  5989                              <1> %include 'source/programs/logout.asm'
  5990 00004879 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5991 00004882 E977E2FFFF          <2> 	jmp os
  5992                              <1> %include 'source/programs/loop.asm'
  5993 00004887 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5994 0000488E 803D[63A40300]00    <2> 	cmp byte [LOOPON], 0
  5995 00004895 0F8501000000        <2> 	jne near filoop
  5996 0000489B C3                  <2> 	ret
  5997 0000489C 8B35[64A40300]      <2> filoop: mov esi, [LOOPPOS]
  5998 000048A2 FE0D[F9A30300]      <2> 	dec byte [IFON]
  5999 000048A8 C605[63A40300]00    <2> 	mov byte [LOOPON], 0
  6000 000048AF 8935[5EA40300]      <2> 	mov [BATCHPOS], esi
  6001 000048B5 8935[9C390000]      <2> 	mov [batchedi], esi
  6002 000048BB C3                  <2> 	ret 
  6003                              <1> %ifdef disk.none
  6004                              <1> %else
  6005                              <1> 	%include 'source/programs/ls.asm'
  6006 000048BC FF2C6C7300          <2> db 255,44,"ls",0
  6007 000048C1 BE[E68B0300]        <2> 		mov esi, diskfileindex
  6008                              <2> 	diskindexdir:
  6009 000048C6 803E5F              <2> 		cmp byte [esi], '_'
  6010 000048C9 7440                <2> 		je nextdiskindexdir
  6011 000048CB E83CD4FFFF          <2> 		call printquiet
  6012 000048D0 56                  <2> 		push esi
  6013 000048D1 BE[2B490000]        <2> 		mov esi, disktab
  6014 000048D6 E831D4FFFF          <2> 		call printquiet
  6015 000048DB 5E                  <2> 		pop esi
  6016 000048DC 8B4E05              <2> 		mov ecx, [esi + 5]
  6017 000048DF C605[88310000]05    <2> 		mov byte [firsthexshown], 5
  6018 000048E6 E87CE9FFFF          <2> 		call showdec
  6019 000048EB 56                  <2> 		push esi
  6020 000048EC BE[77890000]        <2> 		mov esi, line
  6021 000048F1 E816D4FFFF          <2> 		call printquiet
  6022 000048F6 5E                  <2> 		pop esi
  6023 000048F7 81C609000000        <2> 		add esi, 9
  6024 000048FD 81FE[E48D0300]      <2> 		cmp esi, enddiskfileindex
  6025 00004903 72C1                <2> 		jb diskindexdir
  6026 00004905 E875DFFFFF          <2> 		call termcopy
  6027 0000490A C3                  <2> 		ret
  6028                              <2> 	nextdiskindexdir:
  6029 0000490B 46                  <2> 		inc esi
  6030 0000490C 803E00              <2> 		cmp byte [esi], 0
  6031 0000490F 75FA                <2> 		jne nextdiskindexdir
  6032 00004911 81C609000000        <2> 		add esi, 9
  6033 00004917 81FE[E48D0300]      <2> 		cmp esi, enddiskfileindex
  6034 0000491D 72A7                <2> 		jb diskindexdir
  6035 0000491F E85BDFFFFF          <2> 		call termcopy
  6036 00004924 C3                  <2> 		ret
  6037                              <2> 		
  6038 00004925 4469736B2000        <2> 		diskmsg db "Disk ",0
  6039 0000492B 0D09090900          <2> 		disktab db 13,9,9,9,0
  6040                              <1> %endif
  6041                              <1> %include 'source/programs/memory.asm'
  6042 00004930 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6043 00004939 BE[A2890000]        <2> 	mov esi, memlistbuf
  6044 0000493E 31FF                <2> 	xor edi, edi
  6045 00004940 668B3D[E28B0000]    <2> 	mov di, [memlistend]
  6046 00004947 01F7                <2> 	add edi, esi
  6047                              <2> printmemmap:
  6048 00004949 8B0E                <2> 	mov ecx, [esi]
  6049 0000494B E84DE8FFFF          <2> 	call showhex
  6050 00004950 81C608000000        <2> 	add esi, 8
  6051 00004956 8B0E                <2> 	mov ecx, [esi]
  6052 00004958 E840E8FFFF          <2> 	call showhex
  6053 0000495D 81C608000000        <2> 	add esi, 8
  6054 00004963 8B0E                <2> 	mov ecx, [esi]
  6055 00004965 E833E8FFFF          <2> 	call showhex
  6056 0000496A 81C608000000        <2> 	add esi, 8
  6057 00004970 57                  <2> 	push edi
  6058 00004971 56                  <2> 	push esi
  6059 00004972 BE[77890000]        <2> 	mov esi, line
  6060 00004977 E8AFD3FFFF          <2> 	call print
  6061 0000497C 5E                  <2> 	pop esi
  6062 0000497D 5F                  <2> 	pop edi
  6063 0000497E 39FE                <2> 	cmp esi, edi
  6064 00004980 72C7                <2> 	jb printmemmap
  6065 00004982 C3                  <2> 	ret
  6066                              <2> 	
  6067                              <1> %include 'source/programs/pci.asm'
  6068 00004983 FF2C70636900        <2> db 255,44,"pci",0
  6069 00004989 E8D8180000          <2> 	call pcidump
  6070 0000498E C3                  <2> 	ret 
  6071                              <1> %ifdef network.included
  6072                              <1> 	%include 'source/programs/ping.asm'
  6073 0000498F FF2C70696E6700      <2> db 255,44,"ping",0
  6074                              <2> ping:
  6075 00004996 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  6076 0000499C 81C605000000        <2> 	add esi, 5
  6077 000049A2 E89C3E0000          <2> 	call strtoip
  6078 000049A7 890D[324A0000]      <2> 	mov [.destip], ecx
  6079 000049AD E8D73E0000          <2> 	call showip
  6080 000049B2 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  6081 000049B8 890D[2E4A0000]      <2> 	mov [.sourceip]. ecx
  6082 000049BE 31C0                <2> 	xor eax, eax
  6083 000049C0 31DB                <2> 	xor ebx, ebx
  6084 000049C2 66A3[2C4A0000]      <2> 	mov [.checksum], ax
  6085 000049C8 66A3[384A0000]      <2> 	mov [.icmpchecksum], ax
  6086 000049CE BF[224A0000]        <2> 	mov edi, .header
  6087 000049D3 BE[364A0000]        <2> 	mov esi, .headerend
  6088 000049D8 E83E3E0000          <2> 	call getchecksum
  6089 000049DD 66890D[2C4A0000]    <2> 	mov [.checksum], cx
  6090 000049E4 BF[364A0000]        <2> 	mov edi, .icmp
  6091 000049E9 BE[5E4A0000]        <2> 	mov esi, .packetend
  6092 000049EE E8283E0000          <2> 	call getchecksum
  6093 000049F3 66890D[384A0000]    <2> 	mov [.icmpchecksum], cx
  6094 000049FA BF[144A0000]        <2> 	mov edi, .packet
  6095 000049FF BE[5E4A0000]        <2> 	mov esi, .packetend
  6096 00004A04 E8083E0000          <2> 	call sendpacket
  6097 00004A09 BE[77890000]        <2> 	mov esi, line
  6098 00004A0E E818D3FFFF          <2> 	call print
  6099 00004A13 C3                  <2> 	ret
  6100                              <2> 	
  6101                              <2> 	
  6102                              <2> 	
  6103                              <2> .packet:
  6104 00004A14 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6105 00004A1A 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6106 00004A20 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6107                              <2> .header:
  6108 00004A22 45                  <2> .version	db 0x45
  6109 00004A23 00                  <2> .services	db 0
  6110 00004A24 003C                <2> .length	db 0,0x3C
  6111 00004A26 0000                <2> .id		dw 0
  6112 00004A28 00                  <2> .flags	db 0
  6113 00004A29 00                  <2> .fragment db 0
  6114 00004A2A 80                  <2> .ttl	db 128
  6115 00004A2B 01                  <2> .protocol db 1 ;ICMP
  6116 00004A2C 0000                <2> .checksum dw 0
  6117 00004A2E 00000000            <2> .sourceip dd 0
  6118 00004A32 00000000            <2> .destip dd 0
  6119                              <2> .headerend:
  6120                              <2> .icmp:
  6121 00004A36 08                  <2> .icmptype db 8 ;Ping request
  6122 00004A37 00                  <2> .icmpcode db 0
  6123 00004A38 0000                <2> .icmpchecksum dw 0
  6124 00004A3A 0001                <2> .icmpid db 0,1
  6125 00004A3C 0000                <2> .sequence dw 0
  6126 00004A3E 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6127 00004A47 6A6B6C6D6E6F707172- <2>
  6128 00004A50 737475767761626364- <2>
  6129 00004A59 6566676869          <2>
  6130                              <2> .packetend:
  6131                              <1> %endif
  6132                              <1> %ifdef disk.none
  6133                              <1> %else
  6134                              <1> 	%include 'source/programs/play.asm'
  6135 00004A5E FF2C706C61796100    <2> db 255,44,"playa",0
  6136 00004A66 8B3D[762F0000]      <2> 	mov edi, [currentcommandloc]
  6137 00004A6C 81C706000000        <2> 	add edi, 6
  6138 00004A72 E827000000          <2> 	call playasync
  6139 00004A77 C3                  <2> 	ret
  6140 00004A78 FF2C706C617900      <2> db 255,44,"play",0
  6141                              <2> play:
  6142 00004A7F 8B3D[762F0000]      <2> 	mov edi, [currentcommandloc]
  6143 00004A85 81C705000000        <2> 	add edi, 5
  6144 00004A8B E80E000000          <2> 	call playasync
  6145                              <2> .waitforsound:
  6146                              <2> %ifdef sound.included
  6147                              <2> 	mov eax, [Length0]
  6148                              <2> 	or ax, [Length1]
  6149                              <2> %endif
  6150 00004A90 0A05[68020000]      <2> 	or al, [soundon]
  6151 00004A96 3D00000000          <2> 	cmp eax, 0
  6152 00004A9B 75F3                <2> 	jne .waitforsound
  6153 00004A9D C3                  <2> 	ret
  6154                              <2> playasync:
  6155 00004A9E BE0000C000          <2> 	mov esi, 0xC00000
  6156 00004AA3 E8F31A0000          <2> 	call loadfile
  6157 00004AA8 81FA94010000        <2> 	cmp edx, 404
  6158 00004AAE 743F                <2> 	je nosoundfound
  6159 00004AB0 BB0000C000          <2> 	mov ebx, 0xC00000
  6160 00004AB5 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6161 00004ABC 0F845A000000        <2> 	je near wave_player
  6162 00004AC2 66813B534E          <2> 	cmp word [ebx], "SN"
  6163 00004AC7 7526                <2> 	jne nosoundfound
  6164 00004AC9 81C306000000        <2> 	add ebx, 6
  6165 00004ACF 891D[6B020000]      <2> 	mov [soundpos], ebx
  6166 00004AD5 035BFC              <2> 	add ebx, [ebx - 4]
  6167 00004AD8 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6168 00004ADE 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6169 00004AE6 00                  <2>
  6170 00004AE7 C605[68020000]01    <2> 	mov byte [soundon], 1
  6171 00004AEE C3                  <2> 	ret
  6172                              <2> nosoundfound:
  6173 00004AEF BE[154B0000]        <2> 	mov esi, notfoundsound
  6174 00004AF4 E832D2FFFF          <2> 	call print
  6175 00004AF9 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  6176 00004AFF 81C605000000        <2> 	add esi, 5
  6177 00004B05 E821D2FFFF          <2> 	call print
  6178 00004B0A BE[46890000]        <2> 	mov esi, notfound2
  6179 00004B0F E817D2FFFF          <2> 	call print
  6180 00004B14 C3                  <2> 	ret
  6181 00004B15 706C61793A2000      <2> notfoundsound db "play: ",0
  6182                              <2> 
  6183                              <2> %ifdef sound.included
  6184                              <2> sbplay:
  6185                              <2> 		mov esi, 0xC00000
  6186                              <2> 		mov ebx, esi
  6187                              <2> 		add esi, WAVSTART
  6188                              <2> 		sub edi, esi
  6189                              <2> 		mov [Length1], di
  6190                              <2> 		shr edi, 15
  6191                              <2> 		mov [Length0], edi
  6192                              <2> 		mov ecx, [ebx + 24]
  6193                              <2> 		mov [Freq], ecx
  6194                              <2> 		xor eax, eax
  6195                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  6196                              <2> 		add edx, WAVSTART
  6197                              <2> 		add	eax, edx
  6198                              <2> 		mov esi, eax
  6199                              <2> 		xor ecx, ecx
  6200                              <2> 		xor ebx, ebx
  6201                              <2> 		mov [SegLoc], bx
  6202                              <2> 		add ebx, 0x80000
  6203                              <2> 		mov cx, 0xFFFF
  6204                              <2> 		cmp di, 0
  6205                              <2> 		jne .autoinit
  6206                              <2> 		mov cx, [Length1]
  6207                              <2> 		mov byte [OddLength], 1
  6208                              <2> 		cmp cx, 32768
  6209                              <2> 		jae .autoinit
  6210                              <2> 		mov byte [OddLength], 0
  6211                              <2> 		shl cx, 1
  6212                              <2> 		inc edi
  6213                              <2> .autoinit:
  6214                              <2> 		dec edi
  6215                              <2> 		mov [Length0], edi
  6216                              <2> 		mov [Length1], cx
  6217                              <2> 		shr cx, 1
  6218                              <2> 		inc cx
  6219                              <2> 		add eax, ecx
  6220                              <2> 		mov [NextMemLoc], eax
  6221                              <2> 		mov	[MemLoc], esi
  6222                              <2> 		call DMACopy
  6223                              <2> 		xor ebx, ebx
  6224                              <2> 		mov bx, [SegLoc]
  6225                              <2> 		xor ecx, ecx
  6226                              <2> 		mov cx, [Length1]
  6227                              <2> 		shr cx, 1
  6228                              <2> 		inc cx
  6229                              <2> 		add ebx, ecx
  6230                              <2> 		mov [SegLoc], bx
  6231                              <2> 		add ebx, 0x80000
  6232                              <2> 		mov esi, [NextMemLoc]
  6233                              <2> 		mov eax, esi
  6234                              <2> 		add eax, ecx
  6235                              <2> 		mov [NextMemLoc], eax
  6236                              <2> 		mov	[MemLoc], esi
  6237                              <2> 		call DMACopy
  6238                              <2> 		call DMAPlay
  6239                              <2> 		call PlayDSP
  6240                              <2> 		ret
  6241                              <2> WAVSTART equ 64;44
  6242                              <2> wave_player:
  6243                              <2> 	cmp byte [SoundBlaster], 1
  6244                              <2> 	je near sbplay
  6245                              <2> 	mov esi, nosoundblaster
  6246                              <2> 	call print
  6247                              <2> 	ret
  6248                              <2> %else
  6249                              <2> 	wave_player:
  6250 00004B1C BE[274B0000]        <2> 		mov esi, nosoundblaster
  6251 00004B21 E805D2FFFF          <2> 		call print
  6252 00004B26 C3                  <2> 		ret
  6253                              <2> %endif
  6254 00004B27 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6255 00004B30 426C61737465722064- <2>
  6256 00004B39 657465637465642E0A- <2>
  6257 00004B42 00                  <2>
  6258                              <1> %endif
  6259                              <1> %include 'source/programs/pwd.asm'
  6260 00004B43 FF2C70776400        <2> db 255,44,"pwd",0
  6261 00004B49 BE[F4A10300]        <2> 	mov esi, currentfolder
  6262 00004B4E E8B9D1FFFF          <2> 	call printquiet
  6263 00004B53 BE[77890000]        <2> 	mov esi, line
  6264 00004B58 E8CED1FFFF          <2> 	call print
  6265 00004B5D C3                  <2> 	ret
  6266                              <2> 	
  6267                              <1> %include 'source/programs/reboot.asm'
  6268 00004B5E FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6269 00004B67 0F011D[714B0000]    <2> 		lidt [idtreboot]
  6270 00004B6E CD00                <2> 		int 0
  6271 00004B70 F4                  <2> 		hlt
  6272                              <2> 	
  6273 00004B71 0000                <2> 	idtreboot dw 0
  6274 00004B73 00000000            <2> 			  dd 0
  6275                              <2> 
  6276                              <2> 	coldboot:
  6277 00004B77 66B84000            <2> 		MOV AX, 0040h
  6278 00004B7B 8EC0                <2> 		MOV ES, AX
  6279 00004B7D 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6280 00004B86 00                  <2>
  6281 00004B87 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6282 00004B8E CF                  <2> 		IRET
  6283                              <2> 
  6284                              <2> 	warmboot:
  6285 00004B8F 66B84000            <2> 		MOV AX, 0040h
  6286 00004B93 8EC0                <2> 		MOV ES, AX
  6287 00004B95 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6288 00004B9E 12                  <2>
  6289 00004B9F EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6290 00004BA6 CF                  <2> 		IRET
  6291                              <2> 		
  6292                              <1> %include 'source/programs/reg.asm'
  6293 00004BA7 FF2C72656700        <2> db 255,44,"reg",0
  6294 00004BAD CD03                <2> 	int 3
  6295 00004BAF C3                  <2> 	ret 
  6296                              <1> %ifdef disk.none
  6297                              <1> %else
  6298                              <1> 	%include 'source/programs/show.asm'
  6299 00004BB0 FF2C73686F7700      <2> db 255,44,"show",0
  6300                              <2> showprog:
  6301 00004BB7 8B3D[762F0000]      <2> 		mov edi, [currentcommandloc]
  6302 00004BBD 81C705000000        <2> 		add edi, 5
  6303 00004BC3 BE00004000          <2> 		mov esi, 0x400000
  6304 00004BC8 803F26              <2> 		cmp byte [edi], '&'
  6305 00004BCB 741B                <2> 		je .nullfile
  6306 00004BCD BE00008000          <2> 		mov esi, 0x800000
  6307 00004BD2 E8C4190000          <2> 		call loadfile
  6308 00004BD7 81FA94010000        <2> 		cmp edx, 404
  6309 00004BDD 0F8483000000        <2> 		je near filenotfound
  6310 00004BE3 BE00008000          <2> 		mov esi, 0x800000
  6311                              <2> .nullfile:
  6312                              <2> %ifdef gui.included
  6313 00004BE8 66813E424D          <2> 		cmp word [esi], "BM"
  6314 00004BED 7410                <2> 		je bmpfound
  6315                              <2> %endif
  6316 00004BEF E837D1FFFF          <2> 		call print
  6317 00004BF4 BE[77890000]        <2> 		mov esi, line
  6318 00004BF9 E82DD1FFFF          <2> 		call print
  6319 00004BFE C3                  <2> 		ret
  6320                              <2> %ifdef gui.included
  6321                              <2> bmpfound:
  6322 00004BFF 803D[9C890000]00    <2> 		cmp byte [guion], 0
  6323 00004C06 0F8428000000        <2> 		je near noguibmp
  6324 00004C0C BE00008000          <2> 		mov esi, 0x800000
  6325 00004C11 31C9                <2> 		xor ecx, ecx
  6326 00004C13 31D2                <2> 		xor edx, edx
  6327 00004C15 31C0                <2> 		xor eax, eax
  6328 00004C17 31DB                <2> 		xor ebx, ebx
  6329 00004C19 E8411B0000          <2> 		call showbmp
  6330 00004C1E 30C0                <2> 		xor al, al
  6331 00004C20 B405                <2> 		mov ah, 5
  6332 00004C22 CD30                <2> 		int 30h
  6333 00004C24 E8AB210000          <2> 		call guiclear
  6334 00004C29 E88A1E0000          <2> 		call clearmousecursor
  6335 00004C2E E8F1210000          <2> 		call reloadallgraphics
  6336 00004C33 C3                  <2> 		ret
  6337                              <2> noguibmp:
  6338 00004C34 BE[3F4C0000]        <2> 		mov esi, warnguimsg
  6339 00004C39 E8EDD0FFFF          <2> 		call print
  6340 00004C3E C3                  <2> 		ret
  6341 00004C3F 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6342 00004C48 6E6F7420626520646F- <2>
  6343 00004C51 6E6520776974686F75- <2>
  6344 00004C5A 742074686520475549- <2>
  6345 00004C63 2E0A00              <2>
  6346                              <2> %endif
  6347                              <2> 
  6348                              <2> filenotfound:
  6349 00004C66 BE[994C0000]        <2> 		mov esi, filenf
  6350 00004C6B E8BBD0FFFF          <2> 		call print
  6351 00004C70 8B35[762F0000]      <2> 		mov esi, [currentcommandloc]
  6352                              <2> findfilenotfoundzero:
  6353 00004C76 8A06                <2> 		mov al, [esi]
  6354 00004C78 46                  <2> 		inc esi
  6355 00004C79 3C00                <2> 		cmp al, 0
  6356 00004C7B 7411                <2> 		je nofilenamenotfound
  6357 00004C7D 81FE[68BC0300]      <2> 		cmp esi, buftxtend
  6358 00004C83 7309                <2> 		jae nofilenamenotfound
  6359 00004C85 3C20                <2> 		cmp al, " "
  6360 00004C87 75ED                <2> 		jne findfilenotfoundzero
  6361 00004C89 E89DD0FFFF          <2> 		call print
  6362                              <2> nofilenamenotfound:
  6363 00004C8E BE[A44C0000]        <2> 		mov esi, filenf2
  6364 00004C93 E893D0FFFF          <2> 		call print
  6365 00004C98 C3                  <2> 		ret
  6366 00004C99 5468652066696C6520- <2> filenf db "The file ",34,0
  6367 00004CA2 2200                <2>
  6368 00004CA4 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6369 00004CAD 6F7420626520666F75- <2>
  6370 00004CB6 6E642E0A00          <2>
  6371                              <1> %endif
  6372                              <1> %include 'source/programs/shush.asm'
  6373 00004CBB FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6374                              <2> shushprog:
  6375                              <2> %ifdef gui.included
  6376 00004CC3 803D[9C890000]00    <2> 	cmp byte [guion], 0
  6377 00004CCA 0F84B9000000        <2> 	je near .noswitchsize
  6378 00004CD0 8B35[762F0000]      <2> 	mov esi, [currentcommandloc]
  6379 00004CD6 81C606000000        <2> 	add esi, 6
  6380 00004CDC 56                  <2> 	push esi
  6381 00004CDD 4E                  <2> 	dec esi
  6382                              <2> .findspace:
  6383 00004CDE 46                  <2> 	inc esi
  6384 00004CDF 8A06                <2> 	mov al, [esi]
  6385 00004CE1 3C00                <2> 	cmp al, 0
  6386 00004CE3 0F84A0000000        <2> 	je near .noswitchsize
  6387 00004CE9 3C58                <2> 	cmp al, "X"
  6388 00004CEB 7408                <2> 	je .donefind
  6389 00004CED 3C78                <2> 	cmp al, "x"
  6390 00004CEF 7404                <2> 	je .donefind
  6391 00004CF1 3C20                <2> 	cmp al, " "
  6392 00004CF3 75E9                <2> 	jne .findspace
  6393                              <2> .donefind:
  6394 00004CF5 30C0                <2> 	xor al, al
  6395 00004CF7 8806                <2> 	mov [esi], al
  6396 00004CF9 46                  <2> 	inc esi
  6397 00004CFA 89F7                <2> 	mov edi, esi
  6398 00004CFC E848E6FFFF          <2> 	call cnvrttxt
  6399 00004D01 89C8                <2> 	mov eax, ecx
  6400 00004D03 5E                  <2> 	pop esi
  6401 00004D04 50                  <2> 	push eax
  6402 00004D05 89F7                <2> 	mov edi, esi
  6403 00004D07 E83DE6FFFF          <2> 	call cnvrttxt
  6404 00004D0C 89CB                <2> 	mov ebx, ecx
  6405 00004D0E 58                  <2> 	pop eax	
  6406 00004D0F 6681FB0000          <2> 	cmp bx, 0
  6407 00004D14 0F846F000000        <2> 	je near .noswitchsize
  6408 00004D1A 663D0000            <2> 	cmp ax, 0
  6409 00004D1E 0F8465000000        <2> 	je near .noswitchsize
  6410 00004D24 66C1E303            <2> 	shl bx, 3
  6411 00004D28 66C1E004            <2> 	shl ax, 4
  6412 00004D2C 663B1D[4C570000]    <2> 	cmp bx, [resolutionx]
  6413 00004D33 7607                <2> 	jbe .nofixx
  6414 00004D35 668B1D[4C570000]    <2> 	mov bx, [resolutionx]
  6415                              <2> .nofixx:
  6416 00004D3C 66051000            <2> 	add ax, 16
  6417 00004D40 663B05[4E570000]    <2> 	cmp ax, [resolutiony]
  6418 00004D47 7606                <2> 	jbe .nofixy
  6419 00004D49 66A1[4E570000]      <2> 	mov ax, [resolutiony]
  6420                              <2> .nofixy:
  6421 00004D4F 662D1000            <2> 	sub ax, 16
  6422 00004D53 6631C9              <2> 	xor cx, cx
  6423 00004D56 6631D2              <2> 	xor dx, dx
  6424 00004D59 66891D[C2710000]    <2> 	mov [termwindow], bx
  6425 00004D60 66A3[C4710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6426 00004D66 BE[C2710000]        <2> 	mov esi, termwindow
  6427 00004D6B 31DB                <2> 	xor ebx, ebx
  6428 00004D6D 6631C0              <2> 	xor ax, ax
  6429 00004D70 E87A290000          <2> 	call showwindow
  6430 00004D75 E85A200000          <2> 	call guiclear
  6431 00004D7A E85BD0FFFF          <2> 	call clear
  6432 00004D7F E8A0200000          <2> 	call reloadallgraphics
  6433 00004D84 E8E71D0000          <2> 	call switchmousepos2
  6434                              <2> .noswitchsize:
  6435                              <2> %endif
  6436 00004D89 BE[944D0000]        <2> 	mov esi, shushmsg
  6437 00004D8E E898CFFFFF          <2> 	call print
  6438 00004D93 C3                  <2> 	ret
  6439 00004D94 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6440 00004D9D 6F2074686520536F6C- <2>
  6441 00004DA6 6C65724F5320486172- <2>
  6442 00004DAF 646C7920556E69782D- <2>
  6443 00004DB8 436F6D70617469626C- <2>
  6444 00004DC1 65205368656C6C210A- <2>
  6445 00004DCA 00                  <2>
  6446                              <1> %include 'source/programs/system.asm'
  6447 00004DCB FF2C73797374656D00  <2> 	db 255,44,"system",0
  6448 00004DD4 BE[D14E0000]        <2> 	mov esi, kernelinfomsg
  6449 00004DD9 E82ECFFFFF          <2> 	call printquiet
  6450 00004DDE B9[E68B0300]        <2> 	mov ecx, osend
  6451 00004DE3 E87FE4FFFF          <2> 	call showdec
  6452 00004DE8 BE[E64E0000]        <2> 	mov esi, diskbytemsg
  6453 00004DED E81ACFFFFF          <2> 	call printquiet
  6454 00004DF2 B9[E68B0300]        <2> 	mov ecx, osend
  6455 00004DF7 81C1[1E7A0500]      <2> 	add ecx, commandbufend
  6456 00004DFD 81E9[E48D0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6457 00004E03 E85FE4FFFF          <2> 	call showdec
  6458 00004E08 BE[FD4E0000]        <2> 	mov esi, membytemsg
  6459 00004E0D E8FACEFFFF          <2> 	call printquiet
  6460 00004E12 BE[484F0000]        <2> 	mov esi, endofmemmsg
  6461 00004E17 E8F0CEFFFF          <2> 	call printquiet
  6462 00004E1C B9[32AE1500]        <2> 	mov ecx, bssend
  6463 00004E21 E877E3FFFF          <2> 	call showhex
  6464 00004E26 BE[164F0000]        <2> 	mov esi, systeminfomsg
  6465 00004E2B E8DCCEFFFF          <2> 	call printquiet
  6466                              <2> getcpuspeed:
  6467 00004E30 B8FE000000          <2> 	mov eax, 0xFE
  6468 00004E35 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6469 00004E37 B020                <2> 	mov al, 0x20
  6470 00004E39 E620                <2> 	out 0x20, al
  6471 00004E3B F4                  <2> 	hlt
  6472 00004E3C 0F31                <2> 	rdtsc
  6473 00004E3E 89D6                <2> 	mov esi, edx
  6474 00004E40 89C7                <2> 	mov edi, eax
  6475 00004E42 31C0                <2> 	xor eax, eax
  6476 00004E44 C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6477                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6478 00004E4B 40                  <2> 	inc eax
  6479 00004E4C EBFD                <2> 	jmp cpuspeedloop
  6480                              <2> cpuspeedloopend:
  6481 00004E4E 0F31                <2> 	rdtsc
  6482 00004E50 29F8                <2> 	sub eax, edi
  6483 00004E52 29F2                <2> 	sub edx, esi
  6484 00004E54 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6485 00004E5A A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6486 00004E5F 31C0                <2> 	xor eax, eax
  6487 00004E61 E621                <2> 	out 0x21, al
  6488 00004E63 B020                <2> 	mov al, 0x20
  6489 00004E65 E620                <2> 	out 0x20, al
  6490 00004E67 31D2                <2> 	xor edx, edx
  6491 00004E69 31C0                <2> 	xor eax, eax
  6492 00004E6B A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6493 00004E70 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6494                              <2> 				;result by 2
  6495 00004E72 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6496 00004E78 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6497 00004E7B F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6498 00004E7D 89C1                <2> 	mov ecx, eax
  6499 00004E7F E8E3E3FFFF          <2> 	call showdec
  6500 00004E84 BE[2C4F0000]        <2> 	mov esi, cpuspeedmsg
  6501 00004E89 E87ECEFFFF          <2> 	call printquiet
  6502 00004E8E 31D2                <2> 	xor edx, edx
  6503 00004E90 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6504 00004E95 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6505 00004E9B 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6506 00004EA1 C1EB0A              <2> 	shr ebx, 10
  6507 00004EA4 F7F3                <2> 	div ebx
  6508 00004EA6 89C1                <2> 	mov ecx, eax
  6509 00004EA8 E8BAE3FFFF          <2> 	call showdec
  6510 00004EAD BE[324F0000]        <2> 	mov esi, cpuclockmsg
  6511 00004EB2 E855CEFFFF          <2> 	call printquiet
  6512 00004EB7 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6513 00004EBD C1E914              <2> 	shr ecx, 20
  6514 00004EC0 41                  <2> 	inc ecx	;the reading is one MB behind
  6515 00004EC1 E8A1E3FFFF          <2> 	call showdec
  6516 00004EC6 BE[374F0000]        <2> 	mov esi, memoryspacemsg
  6517 00004ECB E85BCEFFFF          <2> 	call print
  6518                              <2> %ifdef sound.included
  6519                              <2> 	cmp byte [SoundBlaster], 0
  6520                              <2> 	je .nosb
  6521                              <2> 	mov esi, soundblastermsg
  6522                              <2> 	call print
  6523                              <2> .nosb:
  6524                              <2> %endif
  6525 00004ED0 C3                  <2> 	ret
  6526                              <2> 
  6527 00004ED1 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6528 00004EDA 666F726D6174696F6E- <2>
  6529 00004EE3 3A0A00              <2>
  6530 00004EE6 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6531 00004EEF 6B2053706163652055- <2>
  6532 00004EF8 7365640A00          <2>
  6533 00004EFD 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6534 00004F06 6F7279205370616365- <2>
  6535 00004F0F 20557365640A00      <2>
  6536 00004F16 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6537 00004F1F 6E666F726D6174696F- <2>
  6538 00004F28 6E3A0A00            <2>
  6539                              <2> %ifdef sound.included
  6540                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6541                              <2> %endif
  6542 00004F2C 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6543 00004F32 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6544 00004F37 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6545 00004F40 2053706163650A00    <2>
  6546 00004F48 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6547 00004F51 6D6F72792053706163- <2>
  6548 00004F5A 653A20307800        <2>
  6549                              <1> %include 'source/programs/time.asm'
  6550 00004F60 082E30303030303030- <2> timenscache db 8,".000000000"
  6551 00004F69 3030                <2>
  6552 00004F6B 200A00              <2> timenscacheend: db " ",10,0
  6553 00004F6E 00                  <2> istimeset db 0
  6554 00004F6F 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6555 00004F78 2063757272656E7420- <2>
  6556 00004F81 554E49582074696D65- <2>
  6557 00004F8A 3A0A00              <2>
  6558 00004F8D 00<rept>            <2> timeinputbuffer times 12 db 0
  6559 00004F99 00                  <2> timeinputbend: db 0
  6560                              <2> 
  6561 00004F9A FF2C74696D6500      <2> db 255,44,"time",0
  6562 00004FA1 803D[6E4F0000]00    <2> 	cmp byte [istimeset], 0
  6563 00004FA8 753A                <2> 	jne timeisset
  6564 00004FAA BE[6F4F0000]        <2> 	mov esi, settimemsg
  6565 00004FAF E877CDFFFF          <2> 	call print
  6566 00004FB4 BE[8D4F0000]        <2> 	mov esi, timeinputbuffer
  6567 00004FB9 BF[994F0000]        <2> 	mov edi, timeinputbend
  6568 00004FBE E895CEFFFF          <2> 	call readline
  6569 00004FC3 BE[8D4F0000]        <2> 	mov esi, timeinputbuffer
  6570 00004FC8 31FF                <2> 	xor edi, edi
  6571 00004FCA E87AE3FFFF          <2> 	call cnvrttxt
  6572 00004FCF 890D[60020000]      <2> 	mov [timeseconds], ecx
  6573 00004FD5 31C9                <2> 	xor ecx, ecx
  6574 00004FD7 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6575 00004FDD C605[6E4F0000]01    <2> 	mov byte [istimeset], 1
  6576                              <2> timeisset:
  6577 00004FE4 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6578 00004FEA E878E2FFFF          <2> 	call showdec
  6579                              <2> 	
  6580 00004FEF 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6581 00004FF5 BE[604F0000]        <2> 	mov esi, timenscache
  6582 00004FFA C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6583 00005001 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6584 00005008 C6460A30            <2> 	mov byte [esi + 10], "0"
  6585 0000500C BE[6B4F0000]        <2> 	mov esi, timenscacheend
  6586 00005011 E834E0FFFF          <2> 	call convert
  6587 00005016 BE[604F0000]        <2> 	mov esi, timenscache
  6588 0000501B E8ECCCFFFF          <2> 	call printquiet
  6589                              <2> 	
  6590 00005020 E82D000000          <2> 	call time
  6591 00005025 BE[1E520000]        <2> 	mov esi, timeshow
  6592 0000502A E8DDCCFFFF          <2> 	call printquiet
  6593 0000502F BE[77890000]        <2> 	mov esi, line
  6594 00005034 E8D3CCFFFF          <2> 	call printquiet
  6595 00005039 BE[27520000]        <2> 	mov esi, dateshow
  6596 0000503E E8C9CCFFFF          <2> 	call printquiet
  6597 00005043 BE[77890000]        <2> 	mov esi, line
  6598 00005048 E8BFCCFFFF          <2> 	call printquiet
  6599 0000504D E9BC000000          <2> 	jmp findday
  6600                              <2> time:
  6601 00005052 E84F010000          <2> 	call tstackput1
  6602 00005057 B00A                <2> 	mov al,10			;Get RTC register A
  6603 00005059 E879010000          <2> 	call tget1
  6604 0000505E A880                <2> 	test al,0x80			;Is update in progress?
  6605 00005060 75F0                <2> 	jne time				; yes, wait
  6606                              <2> 
  6607 00005062 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6608 00005064 E86E010000          <2> 	call tget1
  6609 00005069 A2[15520000]        <2> 	mov [RTCtimeSecond],al
  6610                              <2> 
  6611 0000506E B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6612 00005070 E862010000          <2> 	call tget1
  6613 00005075 A2[16520000]        <2> 	mov [RTCtimeMinute],al
  6614                              <2> 
  6615 0000507A B004                <2> 	mov al,0x04			;Get hours (see notes)
  6616 0000507C E856010000          <2> 	call tget1
  6617 00005081 A2[17520000]        <2> 	mov [RTCtimeHour],al
  6618                              <2> 
  6619 00005086 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6620 00005088 E84A010000          <2> 	call tget1
  6621 0000508D A2[18520000]        <2> 	mov [RTCtimeDay],al
  6622                              <2> 
  6623 00005092 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6624 00005094 E83E010000          <2> 	call tget1
  6625 00005099 A2[19520000]        <2> 	mov [RTCtimeMonth],al
  6626                              <2> 
  6627 0000509E B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6628 000050A0 E832010000          <2> 	call tget1
  6629 000050A5 A2[1A520000]        <2> 	mov [RTCtimeYear],al
  6630                              <2> 	
  6631 000050AA BE[1E520000]        <2> 	mov esi, timeshow
  6632 000050AF 8A2D[17520000]      <2> 	mov ch, [RTCtimeHour]
  6633 000050B5 E828010000          <2> 	call tput1
  6634 000050BA 8A2D[16520000]      <2> 	mov ch, [RTCtimeMinute]
  6635 000050C0 E81D010000          <2> 	call tput1
  6636 000050C5 8A2D[15520000]      <2> 	mov ch, [RTCtimeSecond]
  6637 000050CB E812010000          <2> 	call tput1
  6638 000050D0 BE[27520000]        <2> 	mov esi, dateshow
  6639 000050D5 8A2D[19520000]      <2> 	mov ch, [RTCtimeMonth]
  6640 000050DB E802010000          <2> 	call tput1
  6641 000050E0 8A2D[18520000]      <2> 	mov ch, [RTCtimeDay]
  6642 000050E6 E8F7000000          <2> 	call tput1
  6643 000050EB B520                <2> 	mov ch, 0x20
  6644 000050ED E8F0000000          <2> 	call tput1
  6645 000050F2 4E                  <2> 	dec esi
  6646 000050F3 8A2D[1A520000]      <2> 	mov ch, [RTCtimeYear]
  6647 000050F9 E8E4000000          <2> 	call tput1
  6648 000050FE E8BD000000          <2> 	call tstackget1
  6649 00005103 C3                  <2> 	ret
  6650 00005104 BE[1E520000]        <2> 	mov esi, timeshow
  6651 00005109 E81DCCFFFF          <2> 	call print
  6652                              <2> ;;get day of week
  6653                              <2> ;;add these:
  6654                              <2> ;;century value
  6655                              <2> ;;last 2 digits of year
  6656                              <2> ;;last 2 digits of year right shifted twice
  6657                              <2> ;;month table value
  6658                              <2> ;;day of the month
  6659                              <2> ;;divide these by 7
  6660                              <2> ;;the remainder is the day
  6661                              <2> findday:
  6662 0000510E 31C0                <2> 	xor eax, eax
  6663                              <2> ;;first convert the values from BCD to hex
  6664 00005110 A0[18520000]        <2> 	mov al, [RTCtimeDay]
  6665 00005115 E873000000          <2> 	call converttohex
  6666 0000511A 8825[1B520000]      <2> 	mov [dayhex], ah
  6667 00005120 A0[19520000]        <2> 	mov al, [RTCtimeMonth]
  6668 00005125 E863000000          <2> 	call converttohex
  6669 0000512A 8825[1C520000]      <2> 	mov [monthhex], ah
  6670 00005130 A0[1A520000]        <2> 	mov al, [RTCtimeYear]
  6671 00005135 E853000000          <2> 	call converttohex
  6672 0000513A 8825[1D520000]      <2> 	mov [yearhex], ah
  6673 00005140 31C0                <2> 	xor eax, eax
  6674 00005142 A0[1D520000]        <2> 	mov al, [yearhex]
  6675 00005147 C0E802              <2> 	shr al, 2
  6676 0000514A 0205[1D520000]      <2> 	add al, [yearhex]
  6677 00005150 0506000000          <2> 	add eax, 6
  6678 00005155 31DB                <2> 	xor ebx, ebx
  6679 00005157 8A1D[1C520000]      <2> 	mov bl, [monthhex]
  6680 0000515D FECB                <2> 	dec bl
  6681 0000515F 81C3[3C520000]      <2> 	add ebx, month
  6682 00005165 31C9                <2> 	xor ecx, ecx
  6683 00005167 8A0B                <2> 	mov cl, [ebx]
  6684 00005169 01C8                <2> 	add eax, ecx
  6685 0000516B 8A0D[1B520000]      <2> 	mov cl, [dayhex]
  6686 00005171 01C8                <2> 	add eax, ecx
  6687 00005173 66BB0700            <2> 	mov bx, 7
  6688 00005177 31D2                <2> 	xor edx, edx
  6689 00005179 66F7F3              <2> 	div bx
  6690 0000517C C1E202              <2> 	shl edx, 2
  6691 0000517F 81C2[48520000]      <2> 	add edx, day
  6692 00005185 8B32                <2> 	mov esi, [edx]
  6693 00005187 E89FCBFFFF          <2> 	call print
  6694 0000518C C3                  <2> 	ret
  6695                              <2> 	
  6696                              <2> converttohex:
  6697 0000518D 88C4                <2> 	mov ah, al
  6698 0000518F C0E804              <2> 	shr al, 4
  6699 00005192 C0E404              <2> 	shl ah, 4
  6700 00005195 C0EC04              <2> 	shr ah, 4
  6701 00005198 3C00                <2> 	cmp al, 0
  6702 0000519A 7409                <2> 	je noconverttohex
  6703                              <2> converttohexlp:
  6704 0000519C 80C40A              <2> 	add ah, 10
  6705 0000519F FEC8                <2> 	dec al
  6706 000051A1 3C00                <2> 	cmp al, 0
  6707 000051A3 75F7                <2> 	jne converttohexlp
  6708                              <2> noconverttohex:
  6709 000051A5 C3                  <2> 	ret
  6710                              <2> 	
  6711                              <2> tstackput1:
  6712 000051A6 8935[11520000]      <2> 	mov [tstack + 20], esi
  6713 000051AC BE[FD510000]        <2> 	mov esi, tstack
  6714 000051B1 8906                <2> 	mov [esi], eax
  6715 000051B3 895E04              <2> 	mov [esi + 4], ebx
  6716 000051B6 894E08              <2> 	mov [esi + 8], ecx
  6717 000051B9 89560C              <2> 	mov [esi + 12], edx
  6718 000051BC 897E10              <2> 	mov [esi + 16], edi
  6719 000051BF C3                  <2> 	ret
  6720                              <2> 	
  6721                              <2> tstackget1:
  6722 000051C0 BE[FD510000]        <2> 	mov esi, tstack
  6723 000051C5 8B06                <2> 	mov eax, [esi]
  6724 000051C7 8B5E04              <2> 	mov ebx, [esi + 4]
  6725 000051CA 8B4E08              <2> 	mov ecx, [esi + 8]
  6726 000051CD 8B560C              <2> 	mov edx, [esi + 12]
  6727 000051D0 8B7E10              <2> 	mov edi, [esi + 16]
  6728 000051D3 8B7614              <2> 	mov esi, [esi + 20]
  6729 000051D6 C3                  <2> 	ret
  6730                              <2> 	
  6731                              <2> tget1:
  6732 000051D7 66BA7000            <2> 	mov dx, 0x70
  6733 000051DB EE                  <2> 	out dx, al
  6734 000051DC 6642                <2> 	inc dx
  6735 000051DE EC                  <2> 	in al, dx
  6736 000051DF 664A                <2> 	dec dx
  6737 000051E1 C3                  <2> 	ret
  6738                              <2> 	
  6739                              <2> tput1:
  6740 000051E2 66C1E904            <2> 	shr cx, 4
  6741 000051E6 B030                <2> 	mov al, 48
  6742 000051E8 00E8                <2> 	add al, ch
  6743 000051EA 8806                <2> 	mov [esi], al
  6744 000051EC 46                  <2> 	inc esi
  6745 000051ED B030                <2> 	mov al, 48
  6746 000051EF C0E904              <2> 	shr cl, 4
  6747 000051F2 00C8                <2> 	add al, cl
  6748 000051F4 8806                <2> 	mov [esi], al
  6749 000051F6 81C602000000        <2> 	add esi, 2
  6750 000051FC C3                  <2> 	ret
  6751                              <2> 		
  6752 000051FD 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6753 00005206 000000000000000000- <2>
  6754 0000520F 000000000000        <2>
  6755 00005215 00                  <2> 	RTCtimeSecond db 0
  6756 00005216 00                  <2> 	RTCtimeMinute db 0
  6757 00005217 00                  <2> 	RTCtimeHour db 0
  6758 00005218 00                  <2> 	RTCtimeDay db 0
  6759 00005219 00                  <2> 	RTCtimeMonth db 0
  6760 0000521A 00                  <2> 	RTCtimeYear db 0
  6761 0000521B 00                  <2> 	dayhex db 0
  6762 0000521C 00                  <2> 	monthhex db 0
  6763 0000521D 00                  <2> 	yearhex db 0
  6764 0000521E 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6765 00005227 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6766 00005230 302000              <2>
  6767                              <2> 	oldcentury:	;;from 1700 to 1900
  6768 00005233 040200              <2> 	db 4,2,0
  6769                              <2> 	century:	;;from 2000 to 2500
  6770 00005236 060402000604        <2> 	db 6,4,2,0,6,4
  6771                              <2> 	month:
  6772 0000523C 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6773 00005245 000305              <2>
  6774                              <2> 	day:
  6775 00005248 [64520000]          <2> 	dd sunday
  6776 0000524C [6C520000]          <2> 	dd monday
  6777 00005250 [74520000]          <2> 	dd tuesday
  6778 00005254 [7D520000]          <2> 	dd wednesday
  6779 00005258 [88520000]          <2> 	dd thursday
  6780 0000525C [92520000]          <2> 	dd friday
  6781 00005260 [9A520000]          <2> 	dd saturday
  6782                              <2> sunday:
  6783 00005264 53756E6461790A00    <2> 	db "Sunday",10,0
  6784                              <2> monday:
  6785 0000526C 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6786                              <2> tuesday:
  6787 00005274 547565736461790A00  <2> 	db "Tuesday",10,0
  6788                              <2> wednesday:
  6789 0000527D 5765646E6573646179- <2> 	db "Wednesday",10,0
  6790 00005286 0A00                <2>
  6791                              <2> thursday:
  6792 00005288 54687572736461790A- <2> 	db "Thursday",10,0
  6793 00005291 00                  <2>
  6794                              <2> friday:
  6795 00005292 4672696461790A00    <2> 	db "Friday",10,0
  6796                              <2> saturday:
  6797 0000529A 53617475726461790A- <2> 	db "Saturday",10,0
  6798 000052A3 00                  <2>
  6799                              <1> %include 'source/programs/turnoff.asm'
  6800 000052A4 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6801 000052AD 00                  <2>
  6802                              <2> 	turnoff:
  6803 000052AE 66BB[C952]          <2> 			mov bx, shutdown
  6804 000052B2 66891D[D70C0000]    <2> 			mov [realmodeptr], bx
  6805 000052B9 BB[F3520000]        <2> 			mov ebx, halt
  6806 000052BE 891D[D30C0000]      <2> 			mov [realmodereturn], ebx
  6807 000052C4 E9F3B8FFFF          <2> 			jmp realmode
  6808                              <2> 
  6809                              <2> [BITS 16]
  6810                              <2> 		shutdown:
  6811 000052C9 B453                <2> 			mov ah, 0x53
  6812 000052CB B004                <2> 			mov al, 4
  6813 000052CD 31DB                <2> 			xor bx, bx
  6814 000052CF CD15                <2> 			int 0x15
  6815                              <2> 			
  6816 000052D1 B453                <2> 			mov ah, 0x53
  6817 000052D3 B001                <2> 			mov al, 1
  6818 000052D5 31DB                <2> 			xor bx, bx
  6819 000052D7 CD15                <2> 			int 0x15
  6820                              <2> 			
  6821 000052D9 B453                <2> 			mov ah, 0x53
  6822 000052DB B008                <2> 			mov al, 8
  6823 000052DD BB0100              <2> 			mov bx, 1
  6824 000052E0 B90100              <2> 			mov cx, 1
  6825 000052E3 CD15                <2> 			int 0x15
  6826                              <2> 			
  6827 000052E5 B453                <2> 			mov ah, 0x53
  6828 000052E7 B007                <2> 			mov al, 7
  6829 000052E9 BB0100              <2> 			mov bx, 1
  6830 000052EC B90300              <2> 			mov cx, 3
  6831 000052EF CD15                <2> 			int 0x15
  6832 000052F1 EBFE                <2> 			jmp $
  6833                              <2> 			[BITS 32]
  6834 000052F3 EBFE                <2> halt: jmp $
  6835                              <1> %include 'source/programs/wait.asm'
  6836 000052F5 FF2C7761697400      <2> db 255,44,"wait",0
  6837                              <2> waitkey:
  6838 000052FC E825D0FFFF          <2> 		call getchar
  6839 00005301 C3                  <2> 		ret
  6840                              <1> %include 'source/programs/while.asm'
  6841 00005302 FF2C7768696C6500    <2> db 255,44,"while",0
  6842 0000530A 30C0                <2> whilecmd:  xor al, al
  6843 0000530C 3805[62A40300]      <2> 	cmp [BATCHISON], al
  6844 00005312 0F845CE7FFFF        <2> 	je near notbatch
  6845 00005318 8B35[5EA40300]      <2> 	mov esi, [BATCHPOS]
  6846 0000531E 81EE02000000        <2> 	sub esi, 2
  6847 00005324 4E                  <2> whilefnd: dec esi
  6848 00005325 8A06                <2> 	mov al, [esi]
  6849 00005327 3C0A                <2> 	cmp al, 10
  6850 00005329 0F840A000000        <2> 	je near whilefnd2
  6851 0000532F 3C00                <2> 	cmp al, 0
  6852 00005331 0F8402000000        <2> 	je near whilefnd2
  6853 00005337 EBEB                <2> 	jmp whilefnd
  6854                              <2> whilefnd2:
  6855 00005339 46                  <2> 	inc esi
  6856 0000533A 8935[64A40300]      <2> 	mov [LOOPPOS], esi
  6857 00005340 C605[63A40300]01    <2> 	mov BYTE [LOOPON], 1
  6858 00005347 BE[68B80300]        <2> 	mov esi, buftxt
  6859 0000534C BB[68B80300]        <2> 	mov ebx, buftxt
  6860 00005351 81C306000000        <2> 	add ebx, 6
  6861 00005357 E92CF2FFFF          <2> 	jmp chkeqsn
  6862                              <1> progend:		;programs end here	
  6863                              <1> batchprogend:
  6864                                  	%include "source/hardware.asm"
  6865                              <1> %ifdef gui.included
  6866                              <1> 	%include "source/drivers/video/vesa.asm"
  6867                              <2> [BITS 16]
  6868                              <2> guiswitch:
  6869 0000535C 81F90000            <2> 	cmp cx, 0
  6870 00005360 750B                <2> 	jne guiswitchdefnum
  6871 00005362 B81200              <2> 	mov ax, 12h
  6872 00005365 31DB                <2> 	xor bx, bx
  6873 00005367 CD10                <2> 	int 10h
  6874 00005369 E85100              <2> 	call guiloadagain
  6875                              <2> guiswitchnocando:
  6876 0000536C C3                  <2> 	ret	;return without switching as mode number is bad
  6877                              <2> guiswitchdefnum:	;switch to a defined mode number
  6878 0000536D B8004F              <2> 	mov ax, 0x4F00
  6879 00005370 BF[3A55]            <2> 	mov di, VBEMODEBLOCK
  6880 00005373 CD10                <2> 	int 10h
  6881 00005375 BE[5C55]            <2> 	mov si, reserved
  6882 00005378 81EE0200            <2> 	sub si, 2
  6883                              <2> .loop:
  6884 0000537C 81C60200            <2> 	add si, 2
  6885 00005380 81FE[3A56]          <2> 	cmp si, oemdata
  6886 00005384 74E6                <2> 	je guiswitchnocando
  6887 00005386 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6888 0000538A 74E0                <2> 	je guiswitchnocando
  6889 0000538C 390C                <2> 	cmp [si], cx
  6890 0000538E 75EC                <2> 	jne .loop
  6891 00005390 8936[9454]          <2> 	mov [videomodecache], si
  6892 00005394 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6893 00005398 B8014F              <2> 	mov ax, 0x4F01
  6894 0000539B BF[3A57]            <2> 	mov di, VBEMODEINFOBLOCK
  6895 0000539E 890E[9254]          <2> 	mov [vesamode], cx
  6896 000053A2 CD10                <2> 	int 10h
  6897 000053A4 E9CB00              <2> 	jmp selectedvesa
  6898                              <2> guiload:
  6899 000053A7 BE[1255]            <2> 	mov si, bootmsg
  6900 000053AA E8CDAC              <2> 	call printrm
  6901 000053AD 31C0                <2> 	xor ax, ax
  6902 000053AF CD16                <2> 	int 16h
  6903 000053B1 3C79                <2> 	cmp al, "y"
  6904 000053B3 0F857DAC            <2> 	jne near vgaset
  6905 000053B7 BE[7689]            <2> 	mov si, crlf
  6906 000053BA E8BDAC              <2> 	call printrm
  6907                              <2> guiloadagain:
  6908 000053BD B8004F              <2> 	mov ax, 04F00h
  6909 000053C0 BF[3A55]            <2> 	mov di, VBEMODEBLOCK
  6910 000053C3 CD10                <2> 	int 10h
  6911 000053C5 BE[5C55]            <2> 	mov si, reserved
  6912 000053C8 81EE0200            <2> 	sub si, 2
  6913                              <2> findvideomodes:
  6914 000053CC 81C60200            <2> 	add si, 2
  6915 000053D0 8B0C                <2> 	mov cx, [si]
  6916 000053D2 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6917 000053D6 0F840A00            <2> 	je near nextvmode
  6918 000053DA 81FE[3A56]          <2> 	cmp si, oemdata
  6919 000053DE 0F8352AC            <2> 	jae near vgaset	;;kill if no valid list is found
  6920 000053E2 EBE8                <2> 	jmp findvideomodes 	
  6921                              <2> ;;debug,shows vmodes available
  6922                              <2> nextvmode:
  6923 000053E4 81EE0200            <2> 	sub si, 2
  6924 000053E8 81FE[5C55]          <2> 	cmp si, reserved
  6925 000053EC 0F82CDFF            <2> 	jb near guiloadagain
  6926 000053F0 8B0C                <2> 	mov cx, [si]
  6927 000053F2 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6928 000053F6 0F84EAFF            <2> 	je near nextvmode
  6929 000053FA 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6930 000053FE B8014F              <2> 	mov ax, 04F01h
  6931 00005401 BF[3A57]            <2> 	mov di, VBEMODEINFOBLOCK
  6932 00005404 890E[9254]          <2> 	mov [vesamode], cx
  6933 00005408 CD10                <2> 	int 10h
  6934 0000540A A0[5357]            <2> 	mov al, [bitsperpixel]
  6935 0000540D 3C10                <2> 	cmp al, 16
  6936 0000540F 75D3                <2> 	jne nextvmode
  6937 00005411 8936[9454]          <2> 	mov [videomodecache], si
  6938 00005415 84E4                <2> 	test ah, ah
  6939 00005417 0F842200            <2> 	jz near setvesamode
  6940 0000541B EBC7                <2> 	jmp nextvmode
  6941 0000541D 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6942 00005426 20766964656F206D6F- <2>
  6943 0000542F 6465204F4B3F28792F- <2>
  6944 00005438 6E290D0A00          <2>
  6945                              <2> setvesamode:
  6946 0000543D 8B0E[4C57]          <2> 	mov cx, [resolutionx]
  6947 00005441 E85900              <2> 	call decshow
  6948 00005444 B078                <2> 	mov al, "x"
  6949 00005446 E8C100              <2> 	call char
  6950 00005449 8B0E[4E57]          <2> 	mov cx, [resolutiony]
  6951 0000544D E84D00              <2> 	call decshow
  6952 00005450 B040                <2> 	mov al, "@"
  6953 00005452 E8B500              <2> 	call char
  6954 00005455 31C9                <2> 	xor cx, cx
  6955 00005457 8A0E[5357]          <2> 	mov cl, [bitsperpixel]
  6956 0000545B E83F00              <2> 	call decshow
  6957 0000545E BE[1D54]            <2> 	mov si, isthisvideook
  6958 00005461 E816AC              <2> 	call printrm
  6959 00005464 31C0                <2> 	xor ax, ax
  6960 00005466 CD16                <2> 	int 16h
  6961 00005468 8B36[9454]          <2> 	mov si, [videomodecache]
  6962 0000546C 3C79                <2> 	cmp al, "y"
  6963 0000546E 0F8572FF            <2> 	jne near nextvmode
  6964                              <2> selectedvesa:
  6965 00005472 8B16[4C57]          <2> 	mov dx, [resolutionx]
  6966 00005476 01D2                <2> 	add dx, dx
  6967 00005478 8916[3A58]          <2> 	mov [resolutionx2], dx
  6968 0000547C 31D2                <2> 	xor dx, dx
  6969 0000547E 31C9                <2> 	xor cx, cx
  6970 00005480 B8024F              <2> 	mov ax, 04F02h
  6971 00005483 8B1E[9254]          <2> 	mov bx, [vesamode]
  6972 00005487 CD10                <2> 	int 10h		;;enter VESA mode
  6973 00005489 C606[9C89]01        <2> 	mov byte [guion], 1
  6974 0000548E E8B3AB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6975 00005491 C3                  <2> 	ret
  6976                              <2> 	
  6977 00005492 0000                <2> vesamode dw 0
  6978 00005494 0000                <2> videomodecache dw 0
  6979                              <2> 
  6980 00005496 0000000000          <2> dcnm db 0,0,0,0,0
  6981 0000549B 0000                <2> dcnmend db 0,0
  6982                              <2> 
  6983                              <2> 
  6984                              <2> decshow:
  6985 0000549D BE[9654]            <2> 	mov si, dcnm
  6986                              <2> decclear:
  6987 000054A0 B030                <2> 	mov al, "0"
  6988 000054A2 8804                <2> 	mov [si], al
  6989 000054A4 46                  <2> 	inc si
  6990 000054A5 81FE[9B54]          <2> 	cmp si, dcnmend
  6991 000054A9 76F5                <2> 	jbe decclear
  6992 000054AB 4E                  <2> 	dec si
  6993 000054AC E81500              <2> 	call convertrm
  6994 000054AF BE[9654]            <2> 	mov si, dcnm
  6995                              <2> dectst:
  6996 000054B2 8A04                <2> 	mov al, [si]
  6997 000054B4 46                  <2> 	inc si
  6998 000054B5 81FE[9B54]          <2> 	cmp si, dcnmend
  6999 000054B9 7704                <2> 	ja dectstend
  7000 000054BB 3C30                <2> 	cmp al, "0"
  7001 000054BD 76F3                <2> 	jbe dectst
  7002                              <2> dectstend:
  7003 000054BF 4E                  <2> 	dec si
  7004 000054C0 E8B7AB              <2> 	call printrm
  7005 000054C3 C3                  <2> 	ret
  7006                              <2> 	
  7007                              <2> 	
  7008                              <2> convertrm:
  7009 000054C4 4E                  <2> 	dec si
  7010 000054C5 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7011                              <2> cnvrtrm:
  7012 000054C7 89DE                <2> 	mov si, bx
  7013 000054C9 81EE0300            <2> 	sub si, 3
  7014 000054CD 46                  <2> ten3rm:	inc si
  7015 000054CE 81F9E803            <2> 	cmp cx, 1000
  7016 000054D2 7208                <2> 	jb ten2rm
  7017 000054D4 81E9E803            <2> 	sub cx, 1000
  7018 000054D8 FE04                <2> 	inc byte [si]
  7019 000054DA EBEB                <2> 	jmp cnvrtrm
  7020 000054DC 46                  <2> ten2rm:	inc si
  7021 000054DD 81F96400            <2> 	cmp cx, 100
  7022 000054E1 7208                <2> 	jb ten1rm
  7023 000054E3 81E96400            <2> 	sub cx, 100
  7024 000054E7 FE04                <2> 	inc byte [si]
  7025 000054E9 EBDC                <2> 	jmp cnvrtrm
  7026 000054EB 46                  <2> ten1rm:	inc si
  7027 000054EC 81F90A00            <2> 	cmp cx, 10
  7028 000054F0 7208                <2> 	jb ten0rm
  7029 000054F2 81E90A00            <2> 	sub cx, 10
  7030 000054F6 FE04                <2> 	inc byte [si]
  7031 000054F8 EBCD                <2> 	jmp cnvrtrm
  7032 000054FA 46                  <2> ten0rm:	inc si
  7033 000054FB 81F90100            <2> 	cmp cx, 1
  7034 000054FF 7208                <2> 	jb tendnrm
  7035 00005501 81E90100            <2> 	sub cx, 1
  7036 00005505 FE04                <2> 	inc byte [si]
  7037 00005507 EBBE                <2> 	jmp cnvrtrm
  7038                              <2> tendnrm:
  7039 00005509 C3                  <2> 	ret
  7040                              <2> 
  7041                              <2>     char: 		    ;char must be in al
  7042 0000550A BB0700              <2>        mov bx, 07
  7043 0000550D B40E                <2> 	   mov ah, 0Eh
  7044 0000550F CD10                <2> 	   int 10h
  7045 00005511 C3                  <2> 	   ret
  7046                              <2> 
  7047 00005512 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7048 0000551B 20746865204755493F- <2>
  7049 00005524 28792F6E2900        <2>
  7050                              <2> 
  7051                              <2> 
  7052                              <2> mcursor:
  7053 0000552A 01                  <2> 	db	00000001b
  7054 0000552B 81                  <2> 	db	10000001b
  7055 0000552C C1                  <2> 	db	11000001b
  7056 0000552D E1                  <2> 	db	11100001b
  7057 0000552E F1                  <2> 	db	11110001b
  7058 0000552F F9                  <2> 	db	11111001b
  7059 00005530 FD                  <2> 	db	11111101b
  7060 00005531 FF                  <2> 	db	11111111b
  7061 00005532 F9                  <2> 	db	11111001b
  7062 00005533 B9                  <2> 	db	10111001b
  7063 00005534 39                  <2> 	db	00111001b
  7064 00005535 1C                  <2> 	db	00011100b
  7065 00005536 1C                  <2> 	db	00011100b
  7066 00005537 0E                  <2> 	db	00001110b
  7067 00005538 0E                  <2> 	db	00001110b
  7068 00005539 0C                  <2> 	db	00001100b
  7069                              <2> mcursorend:
  7070                              <2> 
  7071                              <2> 
  7072                              <2> VBEMODEBLOCK:
  7073 0000553A 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7074 0000553E 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7075 00005540 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7076 00005544 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7077 00005548 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7078 0000554C 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7079 0000554E 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7080 00005550 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7081 00005554 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7082 00005558 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7083 0000555C 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7084 0000563A 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7085                              <2> 
  7086                              <2> VBEMODEINFOBLOCK:
  7087                              <2> ;Mandatory information for all VBE revision
  7088 0000573A 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7089 0000573C 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7090 0000573D 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7091 0000573E 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7092 00005740 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7093 00005742 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7094 00005744 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7095 00005746 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7096 0000574A 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7097                              <2> 
  7098                              <2> ;Mandatory information for VBE 1.2 and above
  7099 0000574C 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7100 0000574E 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7101 00005750 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7102 00005751 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7103 00005752 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7104 00005753 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7105 00005754 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7106 00005755 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7107 00005756 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7108 00005757 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7109 00005758 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7110                              <2> 
  7111                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7112 00005759 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7113 0000575A 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7114 0000575B 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7115 0000575C 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7116 0000575D 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7117 0000575E 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7118 0000575F 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7119 00005760 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7120 00005761 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7121                              <2> 
  7122                              <2> ;Mandatory information for VBE 2.0 and above
  7123 00005762 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7124 00005766 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7125 0000576A 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7126 0000576C 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7127                              <2> 
  7128 0000583A 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7129                              <2> VBEEND:
  7130                              <2> [BITS 32]
  7131                              <1> 	%include "source/drivers/input/mouse.asm"
  7132 0000583E 00                  <2> mousedisabled db 0
  7133                              <2> 	
  7134                              <2> 	cursorgui:
  7135 0000583F 803D[95840000]01    <2> 		cmp byte [mouseon], 1
  7136 00005846 0F8432000000        <2> 		je near mousedaemon
  7137 0000584C 803D[9C890000]00    <2> 		cmp byte [guion], 0
  7138 00005853 0F84D2040000        <2> 		je near entdown
  7139                              <2> 	initmouse:
  7140 00005859 803D[9C890000]00    <2> 		cmp byte [guion], 0
  7141 00005860 7405                <2> 		je noswmsposinit
  7142 00005862 E809130000          <2> 		call switchmousepos2
  7143                              <2> 	noswmsposinit:
  7144 00005867 E85D020000          <2> 	  	call PS2SET
  7145 0000586C E886020000          <2> 		call ACTMOUS
  7146 00005871 C605[95840000]01    <2> 		mov byte [mouseon],1
  7147 00005878 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7148                              <2> 		;call GETB
  7149                              <2> 				;;If the bytes are mixed up,
  7150                              <2> 				;;remove this line or add another of this line.
  7151                              <2> 	nomouse:
  7152 0000587D C3                  <2> 		ret
  7153                              <2> 		
  7154                              <2> 	mousedaemon:
  7155 0000587E 803D[95840000]01    <2> 		cmp byte [mouseon], 1
  7156 00005885 75D2                <2> 		jne initmouse
  7157 00005887 E464                <2> 		in al, 64h ; Status
  7158 00005889 A820                <2> 		test al, 20h ; PS2-Mouse?
  7159 0000588B 0F8502000000        <2> 		jnz near moused
  7160 00005891 F4                  <2> 		hlt
  7161 00005892 C3                  <2> 		ret
  7162                              <2> 	moused:
  7163 00005893 803D[3E580000]01    <2> 		cmp byte [mousedisabled], 1
  7164 0000589A 74E1                <2> 		je nomouse
  7165 0000589C E87B020000          <2> 		  call GETB
  7166 000058A1 88C3                <2> 		  mov  bl, al
  7167 000058A3 80E301              <2> 		  and  bl, 1
  7168 000058A6 881D[415B0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7169 000058AC 88C3                <2> 		  mov  bl, al
  7170 000058AE 80E302              <2> 		  and  bl, 2
  7171 000058B1 D0EB                <2> 		  shr  bl, 1
  7172 000058B3 881D[425B0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7173 000058B9 88C3                <2> 		  mov  bl, al
  7174 000058BB 80E304              <2> 		  and  bl, 4
  7175 000058BE C0EB02              <2> 		  shr  bl, 2
  7176 000058C1 881D[435B0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7177 000058C7 E850020000          <2> 		  call GETB
  7178 000058CC A2[445B0000]        <2> 		  mov  BYTE [XCOORD], al
  7179 000058D1 E846020000          <2> 		  call GETB
  7180 000058D6 A2[455B0000]        <2> 		  mov  BYTE [YCOORD], al
  7181                              <2> 
  7182                              <2> 	showpixelcursor:
  7183 000058DB 668B15[305A0000]    <2> 		mov dx, [mousecursorposition]
  7184 000058E2 668B0D[325A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7185 000058E9 668915[2C5A0000]    <2> 		mov [lastmouseposition], dx
  7186 000058F0 66890D[2E5A0000]    <2> 		mov [lastmouseposition + 2], cx
  7187 000058F7 A0[445B0000]        <2> 		mov al, [XCOORD]
  7188 000058FC 3C80                <2> 		cmp al, 128
  7189 000058FE 730C                <2> 		jae subxcoord
  7190 00005900 00C0                <2> 		add al, al
  7191 00005902 30E4                <2> 		xor ah, ah
  7192 00005904 6601C2              <2> 		add dx, ax
  7193 00005907 E90B000000          <2> 		jmp subxcoorddn
  7194                              <2> 	subxcoord:
  7195 0000590C 00C0                <2> 		add al, al
  7196 0000590E 30DB                <2> 		xor bl, bl
  7197 00005910 28C3                <2> 		sub bl, al
  7198 00005912 30FF                <2> 		xor bh, bh
  7199 00005914 6629DA              <2> 		sub dx, bx
  7200                              <2> 	subxcoorddn:
  7201 00005917 8A1D[455B0000]      <2> 		mov bl, [YCOORD]
  7202 0000591D 30C0                <2> 		xor al, al
  7203 0000591F 28D8                <2> 		sub al, bl
  7204 00005921 3C80                <2> 		cmp al, 128
  7205 00005923 730A                <2> 		jae subycoord
  7206 00005925 30E4                <2> 		xor ah, ah
  7207 00005927 6601C1              <2> 		add cx, ax
  7208 0000592A E909000000          <2> 		jmp subycoorddn
  7209                              <2> 	subycoord:
  7210 0000592F 30DB                <2> 		xor bl, bl
  7211 00005931 28C3                <2> 		sub bl, al
  7212 00005933 30FF                <2> 		xor bh, bh
  7213 00005935 6629D9              <2> 		sub cx, bx
  7214                              <2> 	subycoorddn:
  7215 00005938 6681FA204E          <2> 		cmp dx, 20000
  7216 0000593D 7603                <2> 		jbe nooriginx2
  7217 0000593F 6631D2              <2> 		xor dx, dx
  7218                              <2> 	nooriginx2:
  7219 00005942 6681F9204E          <2> 		cmp cx, 20000
  7220 00005947 7603                <2> 		jbe nooriginy2
  7221 00005949 6631C9              <2> 		xor cx, cx
  7222                              <2> 	nooriginy2:
  7223 0000594C 6681FA0000          <2> 		cmp dx, 0
  7224 00005951 7415                <2> 		je nofixxcolumn2
  7225 00005953 663B15[3A580000]    <2> 		cmp dx, [resolutionx2]
  7226 0000595A 720C                <2> 		jb nofixxcolumn2
  7227 0000595C 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  7228 00005963 6681EA0200          <2> 		sub dx, 2
  7229                              <2> 	nofixxcolumn2:
  7230 00005968 6681F90000          <2> 		cmp cx, 0
  7231 0000596D 7415                <2> 		je nofixyrow2
  7232 0000596F 663B0D[4E570000]    <2> 		cmp cx, [resolutiony]
  7233 00005976 720C                <2> 		jb nofixyrow2
  7234 00005978 668B0D[4E570000]    <2> 		mov cx, [resolutiony]
  7235 0000597F 6681E90100          <2> 		sub cx, 1
  7236                              <2> 	nofixyrow2:
  7237 00005984 668915[305A0000]    <2> 		mov [mousecursorposition], dx
  7238 0000598B 66890D[325A0000]    <2> 		mov [mousecursorposition + 2], cx
  7239 00005992 803D[9C890000]00    <2> 		cmp byte [guion], 0
  7240 00005999 0F8495000000        <2> 		je near termmouse
  7241 0000599F E86C110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7242 000059A4 803D[415B0000]01    <2> 		cmp byte [LBUTTON], 1
  7243 000059AB 0F84A7220000        <2> 		je near clickicon
  7244 000059B1 803D[425B0000]01    <2> 		cmp byte [RBUTTON], 1
  7245 000059B8 0F849A220000        <2> 		je near clickicon
  7246 000059BE A0[457C0000]        <2> 		mov al, [pbutton]
  7247 000059C3 C705[487C0000]0000- <2> 		mov dword [dragging], 0
  7248 000059CB 0000                <2>
  7249 000059CD 3C00                <2> 		cmp al, 0
  7250 000059CF 740F                <2> 		je nopreviousbutton
  7251 000059D1 E8E2100000          <2> 		call clearmousecursor
  7252 000059D6 E849140000          <2> 		call reloadallgraphics
  7253                              <2> 	windowtermcopyend:
  7254 000059DB E890110000          <2> 		call switchmousepos2
  7255                              <2> 	nopreviousbutton:
  7256 000059E0 30C0                <2> 		xor al, al
  7257 000059E2 A2[457C0000]        <2> 		mov [pbutton], al
  7258 000059E7 A2[AC810000]        <2> 		mov [windrag], al
  7259 000059EC A0[415B0000]        <2> 		mov al, [LBUTTON]
  7260 000059F1 A2[467C0000]        <2> 		mov [pLBUTTON], al
  7261 000059F6 A0[425B0000]        <2> 		mov al, [RBUTTON]
  7262 000059FB A2[477C0000]        <2> 		mov [pRBUTTON], al
  7263 00005A00 31D2                <2> 		xor edx, edx
  7264 00005A02 668B15[305A0000]    <2> 		mov dx, [mousecursorposition]
  7265 00005A09 668B0D[325A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7266 00005A10 66BB18C7            <2> 		mov bx, 1100011100011000b
  7267 00005A14 66B80100            <2> 		mov ax, 1
  7268 00005A18 C605[427C0000]01    <2> 		mov byte [showcursorfonton], 1
  7269 00005A1F E8CA1A0000          <2> 		call showfontvesa
  7270 00005A24 C605[427C0000]00    <2> 		mov byte [showcursorfonton], 0
  7271 00005A2B C3                  <2> 		ret
  7272                              <2> 
  7273 00005A2C 00000000            <2> lastmouseposition dw 0,0
  7274 00005A30 00000000            <2> mousecursorposition dw 0,0	
  7275                              <2> 
  7276                              <2> termmouse:
  7277 00005A34 BE[7EBF0300]        <2> 		mov esi, videobuf
  7278 00005A39 31D2                <2> 		xor edx, edx
  7279 00005A3B 668B15[2C5A0000]    <2> 		mov dx, [lastmouseposition]
  7280 00005A42 668B0D[2E5A0000]    <2> 		mov cx, [lastmouseposition + 2]
  7281 00005A49 66A1[C75A0000]      <2> 		mov ax, [cursorcache]
  7282 00005A4F 663D0000            <2> 		cmp ax, 0
  7283 00005A53 7425                <2> 		je nocopycursorcache
  7284 00005A55 66C1E104            <2> 		shl cx, 4
  7285 00005A59 66C1E203            <2> 		shl dx, 3
  7286 00005A5D 01D6                <2> 		add esi, edx
  7287 00005A5F 6631D2              <2> 		xor dx, dx
  7288 00005A62 8A15[AC250000]      <2> 		mov dl, [charxy]
  7289 00005A68 6641                <2> 		inc cx
  7290                              <2> termmousecplp1:
  7291 00005A6A 01D6                <2> 		add esi, edx
  7292 00005A6C 6649                <2> 		dec cx
  7293 00005A6E 6681F90000          <2> 		cmp cx, 0
  7294 00005A73 75F5                <2> 		jne termmousecplp1
  7295 00005A75 29D6                <2> 		sub esi, edx
  7296 00005A77 668906              <2> 		mov [esi], ax
  7297                              <2> nocopycursorcache:
  7298 00005A7A BE[7EBF0300]        <2> 		mov esi, videobuf
  7299 00005A7F 31D2                <2> 		xor edx, edx
  7300 00005A81 668B15[305A0000]    <2> 		mov dx, [mousecursorposition]
  7301 00005A88 668B0D[325A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7302 00005A8F 66C1E104            <2> 		shl cx, 4
  7303 00005A93 66C1E203            <2> 		shl dx, 3
  7304 00005A97 01D6                <2> 		add esi, edx
  7305 00005A99 6631D2              <2> 		xor dx, dx
  7306 00005A9C 8A15[AC250000]      <2> 		mov dl, [charxy]
  7307 00005AA2 6641                <2> 		inc cx
  7308                              <2> termmousecplp2:
  7309 00005AA4 01D6                <2> 		add esi, edx
  7310 00005AA6 6649                <2> 		dec cx
  7311 00005AA8 6681F90000          <2> 		cmp cx, 0
  7312 00005AAD 75F5                <2> 		jne termmousecplp2
  7313 00005AAF 29D6                <2> 		sub esi, edx
  7314 00005AB1 668B06              <2> 		mov ax, [esi]
  7315 00005AB4 66A3[C75A0000]      <2> 		mov [cursorcache], ax
  7316 00005ABA B080                <2> 		mov al, 128
  7317 00005ABC B407                <2> 		mov ah, 7
  7318 00005ABE 668906              <2> 		mov [esi], ax
  7319 00005AC1 E8B9CDFFFF          <2> 		call termcopy
  7320 00005AC6 C3                  <2> 		ret
  7321 00005AC7 0000                <2> cursorcache db 0,0
  7322                              <2> 
  7323                              <2> PS2SET:
  7324 00005AC9 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7325 00005ACB E664                <2>   out  0x64, al		; write to keyboardcontroller
  7326 00005ACD E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7327 00005AD2 C3                  <2> ret
  7328                              <2> 
  7329                              <2> CHKPRT:
  7330 00005AD3 66B96400            <2>   mov  cx, 100
  7331                              <2>  .again:
  7332 00005AD7 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7333 00005AD9 A802                <2>   test al, 2		; Check if input buffer is empty
  7334 00005ADB 7402                <2>   je .go
  7335 00005ADD E2F8                <2>   loop .again
  7336                              <2>  .go:
  7337 00005ADF C3                  <2> ret
  7338                              <2> 
  7339                              <2> WMOUS:
  7340 00005AE0 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7341 00005AE2 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7342 00005AE4 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7343 00005AE9 C3                  <2> ret
  7344                              <2> 
  7345                              <2> MBUFFUL:
  7346 00005AEA 66B96400            <2>   mov cx, 100
  7347                              <2>  .mn:
  7348 00005AEE E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7349 00005AF0 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7350 00005AF2 7402                <2>   jz  .mnn
  7351 00005AF4 E2F8                <2>   loop .mn
  7352                              <2>  .mnn:
  7353 00005AF6 C3                  <2> ret
  7354                              <2> 
  7355                              <2> 
  7356                              <2> ACTMOUS:
  7357 00005AF7 E8E4FFFFFF          <2>   call WMOUS
  7358 00005AFC B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7359 00005AFE E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7360 00005B00 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7361 00005B05 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7362 00005B0A C3                  <2> ret
  7363                              <2> 
  7364                              <2> CHKMOUS:
  7365 00005B0B B300                <2>   mov  bl, 0
  7366 00005B0D 66B96400            <2>   mov cx, 100
  7367                              <2>  .vrd:
  7368 00005B11 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7369 00005B13 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7370 00005B15 7504                <2>   jnz .yy
  7371 00005B17 E2F8                <2>   loop .vrd
  7372 00005B19 B301                <2>   mov  bl, 1
  7373                              <2>  .yy:
  7374 00005B1B C3                  <2> ret
  7375                              <2> 
  7376                              <2> GETB:
  7377                              <2>  .cagain:
  7378 00005B1C E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7379 00005B21 08DB                <2>   or bl, bl
  7380 00005B23 75F7                <2>   jnz .cagain
  7381 00005B25 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7382 00005B27 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7383 00005B29 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7384 00005B2E 6631C0              <2>   xor  ax, ax
  7385 00005B31 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7386 00005B33 88C2                <2>   mov  dl, al
  7387 00005B35 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7388 00005B37 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7389 00005B39 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7390 00005B3E 88D0                <2>   mov  al, dl
  7391 00005B40 C3                  <2> ret
  7392                              <2> 
  7393 00005B41 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7394 00005B42 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7395 00005B43 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7396 00005B44 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7397 00005B45 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7398                              <1> %endif
  7399                              <1> %include "source/drivers/sound/pcspkr.asm"
  7400                              <2> ;PC Speaker Drivers
  7401                              <2> PCSpeakerRAW:
  7402 00005B46 60                  <2> 	pusha
  7403                              <2> nosoundrep:
  7404 00005B47 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7405 00005B4D 31C9                <2> 	xor ecx, ecx
  7406 00005B4F 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7407 00005B56 6681F90000          <2> 	cmp cx, 0
  7408 00005B5B 0F8548000000        <2> 	jne near donesetpitch
  7409 00005B61 668B0E              <2> 	mov cx, [esi]
  7410 00005B64 668B5E02            <2> 	mov bx, [esi + 2]
  7411 00005B68 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7412 00005B6F 81C604000000        <2> 	add esi, 4
  7413 00005B75 8935[6B020000]      <2> 	mov [soundpos], esi
  7414 00005B7B 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7415 00005B81 7735                <2> 	ja stopsound
  7416 00005B83 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7417 00005B8B 00                  <2>
  7418 00005B8C 74B9                <2> 	je nosoundrep
  7419 00005B8E 6681FB0000          <2> 	cmp bx, 0
  7420 00005B93 740F                <2> 	je nosoundplay
  7421 00005B95 E840000000          <2> 	call setpitch
  7422 00005B9A E849000000          <2> 	call startsound
  7423 00005B9F E905000000          <2> 	jmp donesetpitch
  7424                              <2> nosoundplay:
  7425 00005BA4 E846000000          <2> 	call killsound
  7426                              <2> donesetpitch:
  7427 00005BA9 6649                <2> 	dec cx
  7428 00005BAB 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7429 00005BB2 61                  <2> 	popa
  7430 00005BB3 E9F0A6FFFF          <2> 	jmp timerinterrupt
  7431                              <2> stopsound:
  7432 00005BB8 31C0                <2> 	xor eax, eax
  7433 00005BBA 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7434 00005BC0 A2[68020000]        <2> 	mov [soundon], al
  7435 00005BC5 A3[6B020000]        <2> 	mov [soundpos], eax
  7436 00005BCA A3[6F020000]        <2> 	mov [soundendpos], eax
  7437 00005BCF E81B000000          <2> 	call killsound
  7438 00005BD4 61                  <2> 	popa
  7439 00005BD5 E9CEA6FFFF          <2> 	jmp timerinterrupt
  7440                              <2> 
  7441                              <2> 
  7442                              <2> setpitch:
  7443 00005BDA B0B6                <2> 	mov al, 0xB6
  7444 00005BDC E643                <2> 	out 0x43, al
  7445 00005BDE 6689D8              <2> 	mov ax, bx
  7446 00005BE1 E642                <2> 	out 0x42, al
  7447 00005BE3 88E0                <2> 	mov al, ah
  7448 00005BE5 E642                <2> 	out 0x42, al
  7449 00005BE7 C3                  <2> 	ret
  7450                              <2> startsound:
  7451 00005BE8 E461                <2> 	in al, 0x61
  7452 00005BEA 0C03                <2> 	or al, 3
  7453 00005BEC E661                <2> 	out 0x61, al
  7454 00005BEE C3                  <2> 	ret
  7455                              <2> killsound:
  7456 00005BEF E461                <2> 	in al, 0x61
  7457 00005BF1 24FC                <2> 	and al, 0xFC
  7458 00005BF3 E661                <2> 	out 0x61, al
  7459 00005BF5 C3                  <2> 	ret
  7460                              <2> 	
  7461                              <1> %ifdef sound.included
  7462                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7463                              <1> %endif
  7464                              <1> %ifdef io.serial
  7465                              <1> 	%include "source/drivers/input/serial.asm"
  7466                              <1> %else
  7467                              <1> 	%include "source/drivers/input/keyboard.asm"
  7468 00005BF6 00                  <2> specialkey db 0
  7469                              <2> ;charregion db 0
  7470                              <2> waitforinput:		;this is basically the idle process
  7471                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7472                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7473 00005BF7 6631C0              <2> 	xor ax, ax
  7474 00005BFA A0[3A670000]        <2> 	mov al, [threadson]
  7475 00005BFF 8825[3A670000]      <2> 	mov [threadson], ah
  7476 00005C05 FB                  <2> 	sti
  7477 00005C06 F4                  <2> 	hlt
  7478 00005C07 A2[3A670000]        <2> 	mov [threadson], al
  7479 00005C0C 66813D[8A230000]00- <2> 	cmp word [trans], 0
  7480 00005C14 00                  <2>
  7481 00005C15 7401                <2> 	je getkey
  7482 00005C17 C3                  <2> 	ret
  7483                              <2> getkey:
  7484 00005C18 31C0                <2> 		xor eax, eax
  7485 00005C1A A2[F65B0000]        <2> 		mov [specialkey], al
  7486 00005C1F A3[86230000]        <2> 		mov [lastkey], eax
  7487 00005C24 E464                <2> 		in al, 64h ; Status
  7488                              <2> 	%ifdef gui.included
  7489 00005C26 A820                <2> 		test al, 20h ; PS2-Mouse?
  7490 00005C28 0F8565FCFFFF        <2> 		jnz near moused
  7491                              <2> 	%endif
  7492 00005C2E A801                <2> 		test al, 1 
  7493 00005C30 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7494                              <2> 	calckey:
  7495 00005C32 E460                <2> 		in al, 60h
  7496 00005C34 30E4                <2> 		xor ah, ah
  7497 00005C36 6689C3              <2> 		mov bx, ax
  7498 00005C39 66A3[88230000]      <2> 		mov [lastkey + 2], ax
  7499 00005C3F BF[CE5D0000]        <2> 		mov edi, scancode
  7500                              <2> 	searchscan: 
  7501 00005C44 80FB3A              <2> 		cmp bl, 3Ah
  7502 00005C47 7314                <2> 		jae scanother
  7503 00005C49 C1E004              <2> 		shl eax, 4
  7504 00005C4C 01C7                <2> 		add edi, eax
  7505 00005C4E 668B07              <2> 		mov ax, [edi]
  7506 00005C51 663D0000            <2> 		cmp ax, 0
  7507 00005C55 7406                <2> 		je scanother
  7508 00005C57 E9D0000000          <2> 		jmp scanfound
  7509 00005C5C 00                  <2> uppercase db 0
  7510                              <2> scanother:
  7511 00005C5D 6631C0              <2> 		xor ax, ax
  7512 00005C60 66A3[86230000]      <2> 		mov [lastkey], ax
  7513 00005C66 80FBE0              <2> 		cmp bl, 0E0h
  7514 00005C69 0F8477000000        <2> 		je near getkeyspecial
  7515 00005C6F 803D[F65B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7516 00005C76 7525                <2> 		jne nospecialkey
  7517 00005C78 80FB38              <2> 		cmp bl, 38h
  7518 00005C7B 0F849A000000        <2> 		je near alton
  7519 00005C81 80FBB8              <2> 		cmp bl, 0B8h
  7520 00005C84 0F8499000000        <2> 		je near altoff
  7521 00005C8A 80FB1D              <2> 		cmp bl, 1Dh
  7522 00005C8D 0F8478000000        <2> 		je near ctron
  7523 00005C93 80FB9D              <2> 		cmp bl, 9Dh
  7524 00005C96 0F8477000000        <2> 		je near ctroff
  7525 00005C9C C3                  <2> 		ret
  7526                              <2> nospecialkey:
  7527 00005C9D 80FB2A              <2> 		cmp bl, 2Ah
  7528 00005CA0 0F8455000000        <2> 		je near shifton
  7529 00005CA6 80FB36              <2> 		cmp bl, 36h
  7530 00005CA9 0F844C000000        <2> 		je near shifton
  7531 00005CAF 80FB1C              <2> 		cmp bl, 1Ch
  7532 00005CB2 0F8473000000        <2> 		je near entdown
  7533 00005CB8 80FBAA              <2> 		cmp bl, 0AAh
  7534 00005CBB 0F8442000000        <2> 		je near shiftoff
  7535 00005CC1 80FBB6              <2> 		cmp bl, 0B6h
  7536 00005CC4 0F8439000000        <2> 		je near shiftoff
  7537 00005CCA 80FB3A              <2> 		cmp bl, 3Ah
  7538 00005CCD 0F84A7000000        <2> 		je near capslock
  7539 00005CD3 80FB45              <2> 		cmp bl, 0x45
  7540 00005CD6 0F84AF000000        <2> 		je near numlock
  7541 00005CDC 80FB46              <2> 		cmp bl, 0x46
  7542 00005CDF 0F84BE000000        <2> 		je near scrolllock
  7543 00005CE5 C3                  <2> 		ret
  7544                              <2> 	getkeyspecial:
  7545 00005CE6 C605[F65B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7546 00005CED E940FFFFFF          <2> 		jmp calckey
  7547                              <2> 	shift:
  7548 00005CF2 A0[5C5C0000]        <2> 		mov al, [uppercase]
  7549 00005CF7 3C01                <2> 		cmp al, 1
  7550 00005CF9 7308                <2> 		jae shiftoff
  7551                              <2> 	shifton:
  7552 00005CFB C605[5C5C0000]01    <2> 		mov byte [uppercase], 1
  7553 00005D02 C3                  <2> 		ret
  7554                              <2> 	shiftoff:
  7555 00005D03 C605[5C5C0000]00    <2> 		mov byte [uppercase], 0
  7556 00005D0A C3                  <2> 		ret
  7557                              <2> 	ctron:
  7558 00005D0B C605[795D0000]01    <2> 		mov byte [ctrkey], 1
  7559 00005D12 C3                  <2> 		ret
  7560                              <2> 	ctroff:
  7561 00005D13 C605[795D0000]00    <2> 		mov byte [ctrkey], 0
  7562 00005D1A C3                  <2> 		ret
  7563                              <2> 	alton:
  7564 00005D1B C605[785D0000]01    <2> 		mov byte [altkey], 1
  7565 00005D22 C3                  <2> 		ret
  7566                              <2> 	altoff:
  7567 00005D23 C605[785D0000]00    <2> 		mov byte [altkey], 0
  7568 00005D2A C3                  <2> 		ret
  7569                              <2> 	entdown:
  7570 00005D2B C3                  <2> 		ret
  7571                              <2> scanfound:
  7572 00005D2C 81C708000000        <2> 		add edi, 8
  7573 00005D32 803D[795D0000]01    <2> 		cmp byte [ctrkey], 1
  7574 00005D39 7306                <2> 		jae ctrlin
  7575 00005D3B 81EF08000000        <2> 		sub edi, 8
  7576                              <2> 	ctrlin:
  7577 00005D41 81C704000000        <2> 		add edi, 4
  7578 00005D47 803D[785D0000]01    <2> 		cmp byte [altkey], 1
  7579 00005D4E 7306                <2> 		jae altin
  7580 00005D50 81EF04000000        <2> 		sub edi, 4
  7581                              <2> 	altin:
  7582 00005D56 81C702000000        <2> 		add edi, 2
  7583 00005D5C 803D[5C5C0000]01    <2> 		cmp byte [uppercase], 1
  7584 00005D63 7306                <2> 		jae uppercaseon
  7585 00005D65 81EF02000000        <2> 		sub edi, 2
  7586                              <2> 	uppercaseon:
  7587 00005D6B 668B07              <2> 		mov ax,[edi]
  7588 00005D6E 66A3[86230000]      <2> 		mov [lastkey], ax
  7589 00005D74 C3                  <2> 		ret
  7590                              <2> 		
  7591 00005D75 00                  <2> keyboardstatus db 0
  7592 00005D76 00                  <2> numlockstatus db 0
  7593 00005D77 00                  <2> scrolllockstatus db 0
  7594 00005D78 00                  <2> altkey db 0
  7595 00005D79 00                  <2> ctrkey db 0
  7596                              <2> 	capslock:
  7597 00005D7A 8035[755D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7598 00005D81 E835000000          <2> 		call updatekblights
  7599 00005D86 E967FFFFFF          <2> 		jmp shift
  7600                              <2> 		
  7601                              <2> 	numlock:
  7602 00005D8B 8035[755D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7603 00005D92 8035[765D0000]01    <2> 		xor byte [numlockstatus], 1
  7604 00005D99 E81D000000          <2> 		call updatekblights
  7605 00005D9E E975FEFFFF          <2> 		jmp getkey
  7606                              <2> 	
  7607                              <2> 	scrolllock:
  7608 00005DA3 8035[755D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7609 00005DAA 8035[775D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7610 00005DB1 E805000000          <2> 		call updatekblights
  7611 00005DB6 E95DFEFFFF          <2> 		jmp getkey
  7612                              <2> 		
  7613                              <2> 	updatekblights:
  7614 00005DBB B0ED                <2> 		mov al, 0xED
  7615 00005DBD 66BA6000            <2> 		mov dx, 0x60
  7616 00005DC1 EE                  <2> 		out dx, al
  7617                              <2> 	chkkbdack:
  7618 00005DC2 EC                  <2> 		in al, dx
  7619 00005DC3 3CFA                <2> 		cmp al, 0xFA
  7620 00005DC5 75FB                <2> 		jne chkkbdack
  7621 00005DC7 A0[755D0000]        <2> 		mov al, [keyboardstatus]
  7622 00005DCC EE                  <2> 		out dx, al
  7623 00005DCD C3                  <2> 		ret
  7624                              <2> 		
  7625                              <2> scancode:
  7626                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7627 00005DCE 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7628 00005DD7 00000000000000      <2>
  7629 00005DDE 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7630 00005DE7 00000000000000      <2>
  7631 00005DEE 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7632 00005DF7 00000000000000      <2>
  7633 00005DFE 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7634 00005E07 00000000000000      <2>
  7635 00005E0E 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7636 00005E17 00000000000000      <2>
  7637 00005E1E 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7638 00005E27 00000000000000      <2>
  7639 00005E2E 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7640 00005E37 00000000000000      <2>
  7641 00005E3E 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7642 00005E47 00000000000000      <2>
  7643 00005E4E 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7644 00005E57 00000000000000      <2>
  7645 00005E5E 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7646 00005E67 00000000000000      <2>
  7647 00005E6E 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7648 00005E77 00000000000000      <2>
  7649 00005E7E 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7650 00005E87 00000000000000      <2>
  7651 00005E8E 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7652 00005E97 00000000000000      <2>
  7653 00005E9E 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7654 00005EA7 00000000000000      <2>
  7655 00005EAE 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7656 00005EB7 00000000000000      <2>
  7657 00005EBE 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7658 00005EC7 00000000000000      <2>
  7659 00005ECE 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7660 00005ED6 003A0039041904      <2>
  7661 00005EDE 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7662 00005EE7 03000046042604      <2>
  7663 00005EEE 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7664 00005EF7 03950343042304      <2>
  7665 00005EFE 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7666 00005F07 03A1033A041A04      <2>
  7667 00005F0E 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7668 00005F17 03A40335041504      <2>
  7669 00005F1E 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7670 00005F27 03A5033D041D04      <2>
  7671 00005F2E 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7672 00005F37 03980333041304      <2>
  7673 00005F3E 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7674 00005F47 03990348042804      <2>
  7675 00005F4E 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7676 00005F57 039F0349042904      <2>
  7677 00005F5E 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7678 00005F67 03A00337041704      <2>
  7679 00005F6E 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7680 00005F77 00000045042504      <2>
  7681 00005F7E 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7682 00005F87 0000004A042A04      <2>
  7683 00005F8E 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7684 00005F97 00000000000000      <2>
  7685 00005F9E 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7686 00005FA7 00000000000000      <2>
  7687 00005FAE 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7688 00005FB7 03910344042404      <2>
  7689 00005FBE 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7690 00005FC7 03A3034B042B04      <2>
  7691 00005FCE 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7692 00005FD7 03940332041204      <2>
  7693 00005FDE 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7694 00005FE7 03A60330041004      <2>
  7695 00005FEE 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7696 00005FF7 0393033F041F04      <2>
  7697 00005FFE 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7698 00006007 03970340042004      <2>
  7699 0000600E 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7700 00006017 039E033E041E04      <2>
  7701 0000601E 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7702 00006027 039A033B041B04      <2>
  7703 0000602E 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7704 00006037 039B0334041404      <2>
  7705 0000603E 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7706 00006047 00000036041604      <2>
  7707 0000604E 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7708 00006057 0000004D042D04      <2>
  7709 0000605E 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7710 00006067 00000051040104      <2>
  7711 0000606E 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7712 00006077 00000000000000      <2>
  7713 0000607E 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7714 00006087 0000002F005C00      <2>
  7715 0000608E 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7716 00006097 0396034F042F04      <2>
  7717 0000609E 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7718 000060A7 03A70347042704      <2>
  7719 000060AE 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7720 000060B7 03A80341042104      <2>
  7721 000060BE 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7722 000060C7 03A9033C041C04      <2>
  7723 000060CE 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7724 000060D7 03920338041804      <2>
  7725 000060DE 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7726 000060E7 039D0342042204      <2>
  7727 000060EE 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7728 000060F7 039C034C042C04      <2>
  7729 000060FE 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7730 00006107 00000031041104      <2>
  7731 0000610E 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7732 00006117 0000004E042E04      <2>
  7733 0000611E 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7734 00006127 0000002E002C00      <2>
  7735 0000612E 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7736 00006137 00000000000000      <2>
  7737 0000613E 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7738 00006147 00000000000000      <2>
  7739 0000614E 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7740 00006157 00000000000000      <2>
  7741 0000615E 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7742 00006167 00000000000000      <2>
  7743                              <2> noscan:
  7744                              <2> 
  7745                              <1> %endif
  7746                              <1> ;drivers will soon be handled intelligently
  7747                              <1> ;every driver's source will be scanned for a .init function
  7748                              <1> ;that will be called and if it returns 0
  7749                              <1> ;the hardware was found and the driver initialized properly
  7750                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7751                              <1> 	%ifdef sound.included
  7752                              <1> 		call sblaster.init
  7753                              <1> 	%endif
  7754                              <1> 	%ifdef network.included
  7755 0000616E E82A230000          <1> 		call network.init
  7756                              <1> 	%endif
  7757 00006173 C3                  <1> 	ret
  7758                              <1> initialize:
  7759                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7760 00006174 E814000000          <1> 	call .pic
  7761                              <1> %ifdef terminal.vsync
  7762                              <1> 	call .rtc
  7763                              <1> %endif
  7764 00006179 E871000000          <1> 	call .pit
  7765 0000617E E893000000          <1> 	call .fpu
  7766 00006183 E8A4000000          <1> 	call .sse
  7767 00006188 31C0                <1> 	xor eax, eax
  7768 0000618A 31C9                <1> 	xor ecx, ecx
  7769                              <1> %ifdef io.serial
  7770                              <1> 	call serial.init
  7771                              <1> %endif
  7772 0000618C C3                  <1> 	ret
  7773                              <1> 	
  7774                              <1> .pic:
  7775 0000618D B011                <1> 	mov al, 0x11
  7776 0000618F E620                <1> 	out 0x20, al
  7777 00006191 E6A0                <1> 	out 0xA0, al
  7778 00006193 B040                <1> 	mov al, 0x40	;interrupt for master
  7779 00006195 E621                <1> 	out 0x21, al
  7780 00006197 B048                <1> 	mov al, 0x48	;interrupt for slave
  7781 00006199 E6A1                <1> 	out 0xA1, al
  7782 0000619B B004                <1> 	mov al, 4
  7783 0000619D E621                <1> 	out 0x21, al
  7784 0000619F B002                <1> 	mov al, 2
  7785 000061A1 E6A1                <1> 	out 0xA1, al
  7786 000061A3 B001                <1> 	mov al, 0x1
  7787 000061A5 E621                <1> 	out 0x21, al
  7788 000061A7 B001                <1> 	mov al, 0x1
  7789 000061A9 E6A1                <1> 	out 0xA1, al
  7790                              <1> 	;masks are set to zero so as not to mask
  7791 000061AB 30C0                <1> 	xor al, al
  7792 000061AD E621                <1> 	out 0x21, al
  7793 000061AF 30C0                <1> 	xor al, al
  7794 000061B1 E6A1                <1> 	out 0xA1, al
  7795 000061B3 B020                <1> 	mov al, 0x20
  7796 000061B5 E6A0                <1> 	out 0xA0, al
  7797 000061B7 E620                <1> 	out 0x20, al
  7798 000061B9 C3                  <1> 	ret
  7799                              <1> .rtc:
  7800 000061BA B008                <1> 	mov al, 0x8
  7801 000061BC 88C4                <1> 	mov ah, al
  7802 000061BE 66BA7000            <1> 	mov dx, 0x70
  7803 000061C2 EE                  <1> 	out dx, al
  7804 000061C3 6642                <1> 	inc dx
  7805 000061C5 EC                  <1> 	in al, dx
  7806 000061C6 86C4                <1> 	xchg al, ah
  7807 000061C8 664A                <1> 	dec dx
  7808 000061CA EE                  <1> 	out dx, al
  7809 000061CB 6642                <1> 	inc dx
  7810 000061CD 86C4                <1> 	xchg al, ah
  7811 000061CF 0C40                <1> 	or al, 0x40
  7812 000061D1 EE                  <1> 	out dx, al
  7813                              <1> 	
  7814 000061D2 B00A                <1> 	mov al, 0xA
  7815 000061D4 664A                <1> 	dec dx
  7816 000061D6 EE                  <1> 	out dx, al
  7817 000061D7 86C4                <1> 	xchg al, ah
  7818 000061D9 6642                <1> 	inc dx
  7819 000061DB EC                  <1> 	in al, dx
  7820 000061DC 24F0                <1> 	and al, 0xF0
  7821 000061DE 0A05[1B030000]      <1> 	or al, [rtcrate]
  7822 000061E4 86C4                <1> 	xchg al, ah
  7823 000061E6 664A                <1> 	dec dx
  7824 000061E8 EE                  <1> 	out dx, al
  7825 000061E9 6642                <1> 	inc dx
  7826 000061EB 86C4                <1> 	xchg al, ah
  7827 000061ED EE                  <1> 	out dx, al
  7828 000061EE C3                  <1> 	ret
  7829                              <1> 	
  7830                              <1> .pit:
  7831                              <1> 	;initialize the PIT
  7832 000061EF 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7833 000061F5 E640                <1> 	out 0x40, al
  7834 000061F7 66C1C008            <1> 	rol ax, 8
  7835 000061FB E640                <1> 	out 0x40, al
  7836                              <1> 	;enable rtc interrupt
  7837 000061FD B00B                <1> 	mov al, 0xB
  7838 000061FF E670                <1> 	out 0x70, al
  7839 00006201 66C1C008            <1> 	rol ax, 8
  7840 00006205 E471                <1> 	in al, 0x71
  7841 00006207 66C1C008            <1> 	rol ax, 8
  7842 0000620B E670                <1> 	out 0x70, al
  7843 0000620D 66C1C008            <1> 	rol ax, 8
  7844 00006211 0C40                <1> 	or al, 0x40
  7845 00006213 E671                <1> 	out 0x71, al
  7846 00006215 C3                  <1> 	ret
  7847                              <1> .fpu:
  7848                              <1> 	;And now to initialize the fpu
  7849 00006216 0F20E0              <1> 	mov eax, cr4
  7850 00006219 0D00020000          <1> 	or eax, 0x200
  7851 0000621E 0F22E0              <1> 	mov cr4, eax
  7852 00006221 B87F0B0000          <1> 	mov eax, 0xB7F
  7853 00006226 50                  <1> 	push eax
  7854 00006227 D92C24              <1> 	fldcw [esp]
  7855 0000622A 58                  <1> 	pop eax
  7856 0000622B C3                  <1> 	ret
  7857                              <1> 	
  7858                              <1> .sse:
  7859 0000622C 0F20C0              <1> 	mov eax, cr0
  7860 0000622F 24FB                <1> 	and al, 11111011b
  7861 00006231 0C02                <1> 	or al, 00000010b
  7862 00006233 0F22C0              <1> 	mov cr0, eax
  7863 00006236 0F20E0              <1> 	mov eax, cr4
  7864 00006239 660D0006            <1> 	or ax, 0000011000000000b
  7865 0000623D 0F22E0              <1> 	mov cr4, eax
  7866 00006240 C3                  <1> 	ret
  7867                                      %include "source/pci.asm"
  7868 00006241 00                  <1> pcibus		db 0
  7869 00006242 00                  <1> pcidevice	db 0
  7870 00006243 00                  <1> pcifunction	db 0
  7871 00006244 00                  <1> pciregister	db 0
  7872 00006245 00                  <1> pcireqtype	db 0
  7873 00006246 00000000            <1> pcidevid	dd 0
  7874 0000624A FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7875                              <1> getpcimem:
  7876 0000624E B002                <1> 	mov al, 2
  7877 00006250 A2[45620000]        <1> 	mov [pcireqtype], al
  7878 00006255 E922000000          <1> 	jmp searchpci
  7879                              <1> getpciport:
  7880 0000625A B001                <1> 	mov al, 1
  7881 0000625C A2[45620000]        <1> 	mov [pcireqtype], al
  7882 00006261 E916000000          <1> 	jmp searchpci
  7883                              <1> pcidump:
  7884 00006266 31C0                <1> 	xor eax, eax
  7885 00006268 A2[43620000]        <1> 	mov [pcifunction], al
  7886 0000626D A2[41620000]        <1> 	mov [pcibus], al
  7887 00006272 A2[42620000]        <1> 	mov [pcidevice], al
  7888 00006277 A2[45620000]        <1> 	mov [pcireqtype], al
  7889                              <1> searchpci:		;;return in ebx, start X in pciX
  7890 0000627C 30C0                <1> 	xor al, al
  7891 0000627E A2[44620000]        <1> 	mov [pciregister], al
  7892 00006283 E81D020000          <1> 	call getpciaddr
  7893 00006288 BAF80C0000          <1> 	mov edx, 0xCF8
  7894 0000628D EF                  <1> 	out dx, eax	;;request pci config
  7895 0000628E BAFC0C0000          <1> 	mov edx, 0xCFC
  7896 00006293 ED                  <1> 	in eax, dx 	;;read in pci config
  7897 00006294 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7898 00006299 0F8237000000        <1> 	jb near checkpcidevice
  7899                              <1> searchpciret:
  7900                              <1> nextpcidevice:
  7901 0000629F 30C0                <1> 	xor al, al
  7902 000062A1 A2[43620000]        <1> 	mov [pcifunction], al
  7903 000062A6 A0[42620000]        <1> 	mov al, [pcidevice]
  7904 000062AB 3C1F                <1> 	cmp al, 11111b
  7905 000062AD 0F8300010000        <1> 	jae near nextpcibus
  7906 000062B3 FEC0                <1> 	inc al
  7907 000062B5 A2[42620000]        <1> 	mov [pcidevice], al
  7908 000062BA EBC0                <1> 	jmp searchpci
  7909 000062BC A0[43620000]        <1> 	mov al, [pcifunction]
  7910 000062C1 3C07                <1> 	cmp al, 111b
  7911 000062C3 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7912 000062C9 FEC0                <1> 	inc al
  7913 000062CB A2[43620000]        <1> 	mov [pcifunction], al
  7914 000062D0 EBAA                <1> 	jmp searchpci
  7915 000062D2 00000000            <1> pcitype: db 0,0,0,0
  7916                              <1> checkpcidevice:
  7917 000062D6 31C0                <1> 	xor eax, eax
  7918 000062D8 3905[46620000]      <1> 	cmp [pcidevid], eax
  7919 000062DE 0F8430000000        <1> 	je near .good
  7920 000062E4 A2[44620000]        <1> 	mov [pciregister], al	;device id, vendor id
  7921 000062E9 E8B7010000          <1> 	call getpciaddr
  7922 000062EE BAF80C0000          <1> 	mov edx, 0xCF8
  7923 000062F3 EF                  <1> 	out dx, eax
  7924 000062F4 BAFC0C0000          <1> 	mov edx, 0xCFC
  7925 000062F9 ED                  <1> 	in eax, dx
  7926 000062FA 2305[4A620000]      <1> 	and eax, [pcidevidmask]
  7927 00006300 8B1D[46620000]      <1> 	mov ebx, [pcidevid]
  7928 00006306 231D[4A620000]      <1> 	and ebx, [pcidevidmask]
  7929 0000630C 39D8                <1> 	cmp eax, ebx
  7930 0000630E 0F858BFFFFFF        <1> 	jne near searchpciret
  7931                              <1> .good:
  7932 00006314 30C0                <1> 	xor al, al
  7933 00006316 3805[45620000]      <1> 	cmp [pcireqtype], al
  7934 0000631C 0F842C000000        <1> 	je near dumppcidevice
  7935 00006322 B008                <1> 	mov al, 0x08
  7936 00006324 A2[44620000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7937 00006329 E877010000          <1> 	call getpciaddr
  7938 0000632E BAF80C0000          <1> 	mov edx, 0xCF8
  7939 00006333 EF                  <1> 	out dx, eax
  7940 00006334 BAFC0C0000          <1> 	mov edx, 0xCFC
  7941 00006339 ED                  <1> 	in eax, dx
  7942 0000633A C1C008              <1> 	rol eax, 8
  7943 0000633D 3A05[D2620000]      <1> 	cmp al, [pcitype]
  7944 00006343 0F84A0000000        <1> 	je near foundpciaddr
  7945 00006349 E951FFFFFF          <1> 	jmp searchpciret
  7946                              <1> dumppcidevice:
  7947 0000634E 30C0                <1> 	xor al, al
  7948 00006350 A2[44620000]        <1> 	mov [pciregister], al
  7949 00006355 E84B010000          <1> 	call getpciaddr
  7950 0000635A 89C1                <1> 	mov ecx, eax
  7951 0000635C C605[88310000]05    <1> 	mov byte [firsthexshown], 5
  7952 00006363 E835CEFFFF          <1> 	call showhex
  7953                              <1> dumppcidevicelp:
  7954 00006368 A2[44620000]        <1> 	mov [pciregister], al
  7955 0000636D E833010000          <1> 	call getpciaddr
  7956 00006372 BAF80C0000          <1> 	mov edx, 0xCF8
  7957 00006377 EF                  <1> 	out dx, eax
  7958 00006378 BAFC0C0000          <1> 	mov edx, 0xCFC
  7959 0000637D ED                  <1> 	in eax, dx
  7960 0000637E 89C1                <1> 	mov ecx, eax
  7961 00006380 A0[44620000]        <1> 	mov al, [pciregister]
  7962 00006385 0404                <1> 	add al, 4
  7963 00006387 C605[88310000]05    <1> 	mov byte [firsthexshown], 5
  7964 0000638E E80ACEFFFF          <1> 	call showhex
  7965 00006393 3C3C                <1> 	cmp al, 0x3C
  7966 00006395 72D1                <1> 	jb dumppcidevicelp
  7967                              <1> dumppcidn:
  7968                              <1> %ifdef io.serial
  7969                              <1> 	mov esi, line
  7970                              <1> 	call print
  7971                              <1> %else
  7972 00006397 803D[AA250000]00    <1> 	cmp byte [charpos], 0
  7973 0000639E 0F84FBFEFFFF        <1> 	je near searchpciret
  7974 000063A4 BE[77890000]        <1> 	mov esi, line
  7975 000063A9 E87DB9FFFF          <1> 	call print
  7976                              <1> %endif
  7977 000063AE E9ECFEFFFF          <1> 	jmp searchpciret
  7978                              <1> nextpcibus:
  7979 000063B3 30C0                <1> 	xor al, al
  7980 000063B5 A2[42620000]        <1> 	mov [pcidevice], al
  7981 000063BA A0[41620000]        <1> 	mov al, [pcibus]
  7982 000063BF 3C7F                <1> 	cmp al, 1111111b
  7983 000063C1 730C                <1> 	jae donesearchpci
  7984 000063C3 FEC0                <1> 	inc al
  7985 000063C5 A2[41620000]        <1> 	mov [pcibus], al
  7986 000063CA E9ADFEFFFF          <1> 	jmp searchpci
  7987                              <1> donesearchpci:
  7988 000063CF BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7989 000063D4 31D2                <1> 	xor edx, edx
  7990 000063D6 8815[D2620000]      <1> 	mov [pcitype], dl
  7991 000063DC 8915[46620000]      <1> 	mov [pcidevid], edx
  7992 000063E2 891D[4A620000]      <1> 	mov [pcidevidmask], ebx
  7993 000063E8 C3                  <1> 	ret
  7994                              <1> foundpciaddr:
  7995 000063E9 B010                <1> 	mov al, 0x10
  7996 000063EB A2[44620000]        <1> 	mov [pciregister], al
  7997 000063F0 803D[45620000]02    <1> 	cmp byte [pcireqtype], 2
  7998 000063F7 7443                <1> 	je findpcimemaddr
  7999                              <1> findpciioaddr:
  8000 000063F9 E8A7000000          <1> 	call getpciaddr
  8001 000063FE BAF80C0000          <1> 	mov edx, 0xCF8
  8002 00006403 EF                  <1> 	out dx, eax
  8003 00006404 BAFC0C0000          <1> 	mov edx, 0xCFC
  8004 00006409 ED                  <1> 	in eax, dx
  8005 0000640A 89C3                <1> 	mov ebx, eax
  8006 0000640C 81E301000000        <1> 	and ebx, 1
  8007 00006412 81FB00000000        <1> 	cmp ebx, 0
  8008 00006418 0F846E000000        <1> 	je near notpciioaddr
  8009 0000641E 2D01000000          <1> 	sub eax, 1
  8010 00006423 89C2                <1> 	mov edx, eax
  8011 00006425 31DB                <1> 	xor ebx, ebx
  8012 00006427 4B                  <1> 	dec ebx
  8013 00006428 891D[4A620000]      <1> 	mov [pcidevidmask], ebx
  8014 0000642E 43                  <1> 	inc ebx
  8015 0000642F 881D[D2620000]      <1> 	mov [pcitype], bl
  8016 00006435 891D[46620000]      <1> 	mov [pcidevid], ebx
  8017 0000643B C3                  <1> 	ret
  8018                              <1> findpcimemaddr:
  8019 0000643C E864000000          <1> 	call getpciaddr
  8020 00006441 BAF80C0000          <1> 	mov edx, 0xCF8
  8021 00006446 EF                  <1> 	out dx, eax
  8022 00006447 BAFC0C0000          <1> 	mov edx, 0xCFC
  8023 0000644C ED                  <1> 	in eax, dx
  8024 0000644D 89C3                <1> 	mov ebx, eax
  8025 0000644F 81E301000000        <1> 	and ebx, 1
  8026 00006455 81FB01000000        <1> 	cmp ebx, 1
  8027 0000645B 0F842B000000        <1> 	je near notpciioaddr
  8028 00006461 C1E804              <1> 	shr eax, 4
  8029 00006464 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8030 00006467 89C2                <1> 	mov edx, eax
  8031 00006469 50                  <1> 	push eax
  8032 0000646A A1[41020000]        <1> 	mov eax, [basecache]
  8033 0000646F C1E004              <1> 	shl eax, 4
  8034 00006472 29C2                <1> 	sub edx, eax
  8035 00006474 58                  <1> 	pop eax
  8036 00006475 31DB                <1> 	xor ebx, ebx
  8037 00006477 4B                  <1> 	dec ebx
  8038 00006478 891D[4A620000]      <1> 	mov [pcidevidmask], ebx
  8039 0000647E 43                  <1> 	inc ebx
  8040 0000647F 881D[D2620000]      <1> 	mov [pcitype], bl
  8041 00006485 891D[46620000]      <1> 	mov [pcidevid], ebx
  8042 0000648B C3                  <1> 	ret
  8043                              <1> notpciioaddr:
  8044 0000648C A0[44620000]        <1> 	mov al, [pciregister]
  8045 00006491 0404                <1> 	add al, 4
  8046 00006493 3C28                <1> 	cmp al, 0x28
  8047 00006495 0F8704FEFFFF        <1> 	ja near searchpciret
  8048 0000649B A2[44620000]        <1> 	mov [pciregister], al
  8049 000064A0 E954FFFFFF          <1> 	jmp findpciioaddr
  8050                              <1> getpciaddr:		;;puts it in eax and ebx
  8051 000064A5 31C0                <1> 			xor eax, eax
  8052 000064A7 BB00000080          <1> 			mov ebx, 0x80000000
  8053 000064AC A0[41620000]        <1> 			mov al, [pcibus]
  8054 000064B1 C1E010              <1> 			shl eax, 16
  8055 000064B4 01C3                <1> 			add ebx, eax
  8056 000064B6 31C0                <1> 			xor eax, eax
  8057 000064B8 A0[42620000]        <1> 			mov al, [pcidevice]
  8058 000064BD C1E00B              <1> 			shl eax, 11
  8059 000064C0 01C3                <1> 			add ebx, eax
  8060 000064C2 31C0                <1> 			xor eax, eax
  8061 000064C4 A0[43620000]        <1> 			mov al, [pcifunction]
  8062 000064C9 C1E008              <1> 			shl eax, 8
  8063 000064CC 01C3                <1> 			add ebx, eax
  8064 000064CE 31C0                <1> 			xor eax, eax
  8065 000064D0 A0[44620000]        <1> 			mov al, [pciregister]
  8066 000064D5 01C3                <1> 			add ebx, eax
  8067 000064D7 89D8                <1> 			mov eax, ebx
  8068 000064D9 C3                  <1> 			ret
  8069                                      %include "source/disk.asm"
  8070                              <1> %ifdef disk.real
  8071                              <1> 	%include "source/drivers/disk/realmode.asm"
  8072                              <2> diskr:
  8073                              <2> 			;read from disk using real mode-it does not work with large files
  8074                              <2> 			;sector count in cl
  8075                              <2> 			;disk number in ch
  8076                              <2> 			;48 bit address with last 32 bits in ebx
  8077                              <2> 			;buffer in esi
  8078                              <2> 			;puts end of buffer in edi and end lba address in edx
  8079 000064DA 880D[07650000]      <2> 	mov [sdlength], cl
  8080 000064E0 891D[08650000]      <2> 	mov [sdaddress], ebx
  8081 000064E6 8935[66660000]      <2> 	mov [oldesireal], esi
  8082 000064EC 66BE[0C65]          <2> 	mov si, readdiskreal
  8083 000064F0 668935[D70C0000]    <2> 	mov [realmodeptr], si
  8084 000064F7 BE[48650000]        <2> 	mov esi, backfromrealread
  8085 000064FC 8935[D30C0000]      <2> 	mov [realmodereturn], esi
  8086 00006502 E9B5A6FFFF          <2> 	jmp realmode
  8087 00006507 00                  <2> sdlength db 0
  8088 00006508 00000000            <2> sdaddress dd 0
  8089                              <2> 
  8090                              <2> [BITS 16]
  8091                              <2> readdiskreal:
  8092 0000650C C706[3865]1000      <2> 	mov word [dlen], 0x10
  8093 00006512 C706[3C65]0000      <2> 	mov word [daddress], 0
  8094 00006518 C706[3E65]0001      <2> 	mov word [dsegm], 0x100
  8095 0000651E 66891E[4065]        <2> 	mov [dlbaad], ebx
  8096 00006523 880E[3A65]          <2> 	mov [dreadlen], cl
  8097                              <2> ReadHardDisk:
  8098 00006527 BE[3865]            <2> 	mov si, diskaddresspacket
  8099 0000652A 31C0                <2> 	xor ax, ax
  8100 0000652C B442                <2> 	mov ah, 0x42
  8101 0000652E 8A16[3765]          <2> 	mov dl, [dnumber]
  8102 00006532 CD13                <2> 	int 0x13
  8103 00006534 72F1                <2> 	jc ReadHardDisk
  8104 00006536 C3                  <2> 	ret
  8105                              <2> 
  8106 00006537 80                  <2> dnumber db 0x80
  8107                              <2> diskaddresspacket:
  8108 00006538 10                  <2> dlen:	db 0x10 ;size of packet
  8109 00006539 00                  <2> 		db 0
  8110 0000653A 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8111 0000653C 0000                <2> daddress:	dw 0	;address 0
  8112 0000653E 0001                <2> dsegm:		dw 0x100	;segment
  8113                              <2> 		;start with known value for hd
  8114                              <2> dlbaad:
  8115 00006540 00000000            <2> 	dd 0	;lba address
  8116 00006544 00000000            <2> 	dd 0
  8117                              <2> [BITS 32]
  8118                              <2> backfromrealread:
  8119 00006548 8B35[66660000]      <2> 	mov esi, [oldesireal]
  8120 0000654E 8B1D[08650000]      <2> 	mov ebx, [sdaddress]
  8121 00006554 31C9                <2> 	xor ecx, ecx
  8122 00006556 8A0D[07650000]      <2> 	mov cl, [sdlength]
  8123 0000655C 01CB                <2> 	add ebx, ecx
  8124 0000655E 66B80800            <2> 	mov ax, LINEAR_SEL
  8125 00006562 8EE0                <2> 	mov fs, ax
  8126 00006564 BF00100000          <2> 	mov edi, 0x1000
  8127 00006569 B200                <2> 	mov dl, 0
  8128 0000656B D0E1                <2> 	shl cl, 1
  8129                              <2> copyfromrmodedisk:
  8130 0000656D 648A07              <2> 	mov al, [fs:edi]
  8131 00006570 8806                <2> 	mov [esi], al
  8132 00006572 47                  <2> 	inc edi
  8133 00006573 46                  <2> 	inc esi
  8134 00006574 FECA                <2> 	dec dl
  8135 00006576 80FA00              <2> 	cmp dl, 0
  8136 00006579 75F2                <2> 	jne copyfromrmodedisk
  8137 0000657B FEC9                <2> 	dec cl
  8138 0000657D B200                <2> 	mov dl, 0
  8139 0000657F 80F900              <2> 	cmp cl, 0
  8140 00006582 75E9                <2> 	jne copyfromrmodedisk
  8141 00006584 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8142 00006588 8EE0                <2> 	mov fs, ax
  8143 0000658A 89F7                <2> 	mov edi, esi
  8144 0000658C 8B35[66660000]      <2> 	mov esi, [oldesireal]
  8145 00006592 89DA                <2> 	mov edx, ebx
  8146 00006594 8B1D[08650000]      <2> 	mov ebx, [sdaddress]
  8147 0000659A C3                  <2> 	ret
  8148                              <2> 	
  8149                              <1> %else
  8150                              <1> 	%ifdef disk.protected
  8151                              <1> 		%include "source/drivers/disk/pata.asm"
  8152                              <1> 	%endif
  8153                              <1> %endif
  8154                              <1> %ifdef disk.none
  8155                              <1> loadfile:	xor edx, edx
  8156                              <1> 			cmp byte [edi], '&'
  8157                              <1> 			je .ret
  8158                              <1> 			mov edx, 404	;no files are found except &
  8159                              <1> 		.ret:
  8160                              <1> 			ret
  8161                              <1> %else
  8162                              <1> ;This loads files using the methods in the loaded driver
  8163                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8164                              <1> 			;returns with err code in edx and file end in edi
  8165 0000659B 803F00              <1> 	cmp byte [edi], 0
  8166 0000659E 0F8448000000        <1> 	je near nofileload
  8167 000065A4 89FA                <1> 	mov edx, edi
  8168 000065A6 BB[E68B0300]        <1> 	mov ebx, diskfileindex
  8169                              <1> nextnamechar:
  8170 000065AB 8A07                <1> 	mov al, [edi]
  8171 000065AD 3C26                <1> 	cmp al, '&'
  8172 000065AF 7440                <1> 	je nullfile
  8173 000065B1 8A23                <1> 	mov ah, [ebx]
  8174 000065B3 47                  <1> 	inc edi
  8175 000065B4 43                  <1> 	inc ebx
  8176 000065B5 88C1                <1> 	mov cl, al
  8177 000065B7 08E1                <1> 	or cl, ah
  8178 000065B9 80F900              <1> 	cmp cl, 0
  8179 000065BC 744E                <1> 	je equalfilenames
  8180 000065BE 80F920              <1> 	cmp cl, ' '
  8181 000065C1 7449                <1> 	je equalfilenames
  8182 000065C3 3C2A                <1> 	cmp al, '*'
  8183 000065C5 742B                <1> 	je equalfilenames2
  8184 000065C7 80FC00              <1> 	cmp ah, 0
  8185 000065CA 7410                <1> 	je nextfilename
  8186 000065CC 3C00                <1> 	cmp al, 0
  8187 000065CE 7404                <1> 	je getebxzero
  8188 000065D0 38E0                <1> 	cmp al, ah
  8189 000065D2 74D7                <1> 	je nextnamechar
  8190                              <1> getebxzero:
  8191 000065D4 8A23                <1> 	mov ah, [ebx]
  8192 000065D6 43                  <1> 	inc ebx
  8193 000065D7 80FC00              <1> 	cmp ah, 0
  8194 000065DA 75F8                <1> 	jne getebxzero
  8195                              <1> nextfilename:
  8196 000065DC 81C308000000        <1> 	add ebx, 8		;next descriptor
  8197 000065E2 89D7                <1> 	mov edi, edx
  8198 000065E4 81FB[E48D0300]      <1> 	cmp ebx, enddiskfileindex
  8199 000065EA 72BF                <1> 	jb nextnamechar
  8200                              <1> nofileload:
  8201 000065EC BA94010000          <1> 	mov edx, 404	;indicate not found error
  8202                              <1> nullfile:
  8203 000065F1 C3                  <1> 	ret
  8204                              <1> equalfilenames2:
  8205 000065F2 81EB02000000        <1> 	sub ebx, 2
  8206                              <1> eqfilefind:
  8207 000065F8 43                  <1> 	inc ebx
  8208 000065F9 81FB[E48D0300]      <1> 	cmp ebx, enddiskfileindex
  8209 000065FF 0F83E7FFFFFF        <1> 	jae near nofileload
  8210 00006605 8A03                <1> 	mov al, [ebx]
  8211 00006607 3C00                <1> 	cmp al, 0
  8212 00006609 75ED                <1> 	jne eqfilefind
  8213 0000660B 43                  <1> 	inc ebx
  8214                              <1> equalfilenames:
  8215 0000660C 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8216 0000660F 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8217 00006611 031D[9E890000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8218 00006617 31C9                <1> 	xor ecx, ecx
  8219 00006619 88C1                <1> 	mov cl, al			;get excess number of sectors
  8220 0000661B C0E102              <1> 	shl cl, 2
  8221 0000661E C0E902              <1> 	shr cl, 2			;cut off at 64
  8222 00006621 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8223 00006623 B500                <1> 	mov ch, 0			;drive 0
  8224 00006625 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8225                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8226 00006628 A3[6A660000]        <1> 	mov [filetracks], eax
  8227 0000662D 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8228 0000662F 89DA                <1> 	mov edx, ebx
  8229 00006631 80F900              <1> 	cmp cl, 0
  8230 00006634 7405                <1> 	je copytracksforfile
  8231 00006636 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8232                              <1> copytracksforfile:
  8233 0000663B A1[6A660000]        <1> 	mov eax, [filetracks]
  8234 00006640 3D00000000          <1> 	cmp eax, 0
  8235 00006645 7419                <1> 	je donecopyfile
  8236 00006647 48                  <1> 	dec eax
  8237 00006648 A3[6A660000]        <1> 	mov [filetracks], eax
  8238 0000664D 89D3                <1> 	mov ebx, edx	;get end lba
  8239 0000664F B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8240 00006651 8A2D[9D890000]      <1> 	mov ch, [DriveNumber]
  8241 00006657 89FE                <1> 	mov esi, edi	;reset buffer
  8242 00006659 E87CFEFFFF          <1> 	call diskr
  8243 0000665E EBDB                <1> 	jmp copytracksforfile
  8244                              <1> donecopyfile:
  8245 00006660 BA00000000          <1> 	mov edx, 0	;no error
  8246 00006665 C3                  <1> 	ret
  8247                              <1> 
  8248 00006666 00000000            <1> oldesireal dd 0
  8249 0000666A 00000000            <1> filetracks dd 0
  8250 0000666E 00                  <1> lbad1 db 0
  8251 0000666F 00                  <1> lbad2 db 0
  8252 00006670 00                  <1> lbad3 db 0
  8253 00006671 00                  <1> lbad4 db 0
  8254 00006672 00                  <1> lbad5 db 0
  8255 00006673 00                  <1> lbad6 db 0
  8256 00006674 6400                <1> segments dw 100
  8257                              <1> %endif
  8258                                      %include "source/threads.asm"
  8259                              <1> %ifdef threads.included	
  8260                              <1> nwcmdst:
  8261 00006676 31C0                <1> 	xor eax, eax
  8262 00006678 BC[849D0300]        <1> 	mov esp, stackend
  8263 0000667D A2[3A670000]        <1> 	mov [threadson], al
  8264 00006682 A3[3B670000]        <1> 	mov [currentthread], eax
  8265 00006687 0504000000          <1> 	add eax, 4
  8266 0000668C A3[36670000]        <1> 	mov [lastthread], eax
  8267 00006691 FB                  <1> 	sti
  8268 00006692 E92CC6FFFF          <1> 	jmp nwcmd
  8269                              <1> 
  8270                              <1> nomorethreadspace:
  8271 00006697 BE[AD660000]        <1> 	mov esi, nmts
  8272 0000669C E88AB6FFFF          <1> 	call print
  8273 000066A1 C605[3A670000]00    <1> 	mov byte [threadson], 0
  8274 000066A8 E916C6FFFF          <1> 	jmp nwcmd
  8275 000066AD 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8276 000066B6 6572666C6F770A00    <1>
  8277                              <1> 
  8278                              <1> nomorestackspace:
  8279 000066BE BE[CA660000]        <1> 	mov esi, nmss
  8280 000066C3 E863B6FFFF          <1> 	call print
  8281 000066C8 EBAC                <1> 	jmp nwcmdst
  8282 000066CA 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8283 000066D3 72666C6F770A00      <1>
  8284                              <1> 	
  8285                              <1> threadswitch:
  8286 000066DA FA                  <1> 	cli
  8287 000066DB 60                  <1> 	pushad
  8288 000066DC BF[329A0500]        <1> 	mov edi, threadlist
  8289 000066E1 A1[3B670000]        <1> 	mov eax, [currentthread]
  8290 000066E6 40                  <1> 	inc eax
  8291 000066E7 A3[3B670000]        <1> 	mov [currentthread], eax
  8292 000066EC 6648                <1> 	dec ax
  8293 000066EE C1E002              <1> 	shl eax, 2
  8294 000066F1 01C7                <1> 	add edi, eax
  8295 000066F3 8927                <1> 	mov [edi], esp
  8296 000066F5 81C704000000        <1> 	add edi, 4
  8297 000066FB 81FF[32AA0500]      <1> 	cmp edi, threadlistend
  8298 00006701 0F830D000000        <1> 	jae near nookespthread
  8299 00006707 8B07                <1> 	mov eax, [edi]
  8300 00006709 3D00000000          <1> 	cmp eax, 0
  8301 0000670E 0F8519000000        <1> 	jne near okespthread
  8302                              <1> nookespthread:
  8303 00006714 BF[329A0500]        <1> 	mov edi, threadlist
  8304 00006719 31C0                <1> 	xor eax, eax
  8305 0000671B A3[3B670000]        <1> 	mov [currentthread], eax
  8306 00006720 8B07                <1> 	mov eax, [edi]
  8307 00006722 3D00000000          <1> 	cmp eax, 0
  8308 00006727 0F8449FFFFFF        <1> 	je near nwcmdst
  8309                              <1> okespthread:
  8310 0000672D 89C4                <1> 	mov esp, eax
  8311 0000672F B020                <1> 	mov al, 0x20
  8312 00006731 E620                <1> 	out 0x20, al
  8313 00006733 61                  <1> 	popad
  8314 00006734 FB                  <1> 	sti
  8315 00006735 CF                  <1> 	iret
  8316                              <1> 
  8317                              <1> %endif
  8318 00006736 04000000            <1> 	lastthread dd 4
  8319 0000673A 00                  <1> 	threadson db 0
  8320 0000673B 00000000            <1> 	currentthread dd 0
  8321                                  %ifdef gui.included
  8322                                      %include "source/gui/gui.asm"
  8323                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8324 0000673F 31C0                <1> 	xor eax, eax
  8325 00006741 31DB                <1> 	xor ebx, ebx
  8326 00006743 31C9                <1> 	xor ecx, ecx
  8327 00006745 31D2                <1> 	xor edx, edx
  8328 00006747 E871080000          <1> 	call guisetup
  8329                              <1> guiloop:
  8330 0000674C E8EEF0FFFF          <1> 	call cursorgui
  8331                              <1> guistart:
  8332 00006751 E8C2F4FFFF          <1> 	call getkey
  8333 00006756 C605[3E7C0000]00    <1> 	mov byte [copygui], 0
  8334 0000675D EBF2                <1> 	jmp guistart
  8335                              <1> 
  8336                              <1> %include "source/gui/bmp.asm"
  8337                              <2> showbmp:
  8338 0000675F 668B06              <2> 	mov ax, [esi]
  8339 00006762 663D424D            <2> 	cmp ax, "BM"
  8340 00006766 0F85BB000000        <2> 	jne near endedbmp
  8341 0000676C 8B3D[62570000]      <2> 	mov edi, [physbaseptr]
  8342 00006772 6689D0              <2> 	mov ax, dx
  8343 00006775 6689CB              <2> 	mov bx, cx
  8344 00006778 31C9                <2> 	xor ecx, ecx
  8345 0000677A 31D2                <2> 	xor edx, edx
  8346 0000677C 6689D9              <2> 	mov cx, bx
  8347 0000677F 6689C2              <2> 	mov dx, ax
  8348 00006782 01D7                <2> 	add edi, edx
  8349 00006784 01D7                <2> 	add edi, edx
  8350 00006786 31D2                <2> 	xor edx, edx
  8351 00006788 668B15[3A580000]    <2> 	mov dx, [resolutionx2]
  8352 0000678F 034E16              <2> 	add ecx, [esi + 22]
  8353                              <2> bmplocloop:
  8354 00006792 52                  <2> 	push edx
  8355 00006793 31C0                <2> 	xor eax, eax
  8356 00006795 6689D0              <2> 	mov ax, dx
  8357 00006798 F7E1                <2> 	mul ecx
  8358 0000679A 5A                  <2> 	pop edx
  8359 0000679B 663B0D[4E570000]    <2> 	cmp cx, [resolutiony]
  8360 000067A2 7609                <2> 	jbe .nofixy
  8361 000067A4 31C9                <2> 	xor ecx, ecx
  8362 000067A6 668B0D[4E570000]    <2> 	mov cx, [resolutiony]
  8363                              <2> .nofixy:
  8364 000067AD 01C7                <2> 	add edi, eax
  8365 000067AF 8B5612              <2> 	mov edx, [esi + 18]
  8366 000067B2 8B4E16              <2> 	mov ecx, [esi + 22]
  8367 000067B5 8B460A              <2> 	mov eax, [esi + 10]
  8368 000067B8 8B5E02              <2> 	mov ebx, [esi + 2]
  8369 000067BB 01F3                <2> 	add ebx, esi
  8370 000067BD 891D[2D680000]      <2> 	mov [bmpend], ebx
  8371 000067C3 89D3                <2> 	mov ebx, edx
  8372 000067C5 01C6                <2> 	add esi, eax
  8373                              <2> ldxbmp2:
  8374 000067C7 31D2                <2> 	xor edx, edx
  8375 000067C9 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  8376 000067D0 39D3                <2> 	cmp ebx, edx
  8377 000067D2 7702                <2> 	ja ldxbmp
  8378 000067D4 89DA                <2> 	mov edx, ebx
  8379                              <2> ldxbmp:
  8380 000067D6 668B06              <2> 	mov ax, [esi]
  8381 000067D9 668907              <2> 	mov [edi], ax
  8382 000067DC 81C702000000        <2> 	add edi, 2
  8383 000067E2 81C602000000        <2> 	add esi, 2
  8384 000067E8 3B35[2D680000]      <2> 	cmp esi, [bmpend]
  8385 000067EE 7737                <2> 	ja endedbmp
  8386 000067F0 4A                  <2> 	dec edx
  8387 000067F1 81FA00000000        <2> 	cmp edx, 0
  8388 000067F7 77DD                <2> 	ja ldxbmp
  8389 000067F9 31D2                <2> 	xor edx, edx
  8390 000067FB 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  8391 00006802 39D3                <2> 	cmp ebx, edx
  8392 00006804 7610                <2> 	jbe .notover
  8393                              <2> .over:
  8394 00006806 01DE                <2> 	add esi, ebx
  8395 00006808 01DE                <2> 	add esi, ebx
  8396 0000680A 29D6                <2> 	sub esi, edx
  8397 0000680C 29D6                <2> 	sub esi, edx
  8398 0000680E 01DF                <2> 	add edi, ebx
  8399 00006810 01DF                <2> 	add edi, ebx
  8400 00006812 29D7                <2> 	sub edi, edx
  8401 00006814 29D7                <2> 	sub edi, edx
  8402                              <2> .notover:
  8403 00006816 29DF                <2> 	sub edi, ebx
  8404 00006818 29DF                <2> 	sub edi, ebx
  8405 0000681A 29D7                <2> 	sub edi, edx
  8406 0000681C 29D7                <2> 	sub edi, edx
  8407 0000681E 49                  <2> 	dec ecx
  8408 0000681F 81F900000000        <2> 	cmp ecx, 0
  8409 00006825 77A0                <2> 	ja ldxbmp2
  8410                              <2> endedbmp:
  8411 00006827 E844030000          <2> 	call switchmousepos2
  8412 0000682C C3                  <2> 	ret
  8413                              <2> 	
  8414 0000682D 00000000            <2> 	bmpend dd 0
  8415                              <1> %include "source/gui/circle.asm"
  8416                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8417 00006831 55                  <2> 	push ebp
  8418 00006832 663D0000            <2> 	cmp ax, 0
  8419 00006836 770A                <2> 	ja .nozerocircle
  8420 00006838 E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  8421 0000683D E9F7000000          <2> 	jmp .done
  8422                              <2> .nozerocircle:
  8423 00006842 6689F5              <2> 	mov bp, si
  8424 00006845 6650                <2> 	push ax
  8425 00006847 E8281C0000          <2> 	call getpixelmem
  8426 0000684C 31C0                <2> 	xor eax, eax
  8427 0000684E 6658                <2> 	pop ax
  8428 00006850 BE01000000          <2> 	mov esi, 1
  8429 00006855 29C6                <2> 	sub esi, eax
  8430 00006857 89C1                <2> 	mov ecx, eax
  8431 00006859 31C0                <2> 	xor eax, eax
  8432 0000685B 66A1[3A580000]      <2> 	mov ax, [resolutionx2]
  8433 00006861 F7E1                <2> 	mul ecx
  8434 00006863 50                  <2> 	push eax
  8435 00006864 31D2                <2> 	xor edx, edx
  8436 00006866 01C7                <2> 	add edi, eax
  8437 00006868 66892F              <2> 	mov [edi], bp
  8438 0000686B 29C7                <2> 	sub edi, eax
  8439 0000686D 29C7                <2> 	sub edi, eax
  8440 0000686F 66892F              <2> 	mov [edi], bp
  8441 00006872 01C7                <2> 	add edi, eax
  8442 00006874 D1E1                <2> 	shl ecx, 1
  8443 00006876 01CF                <2> 	add edi, ecx
  8444 00006878 66892F              <2> 	mov [edi], bp
  8445 0000687B D1E1                <2> 	shl ecx, 1
  8446 0000687D 29CF                <2> 	sub edi, ecx
  8447 0000687F 66892F              <2> 	mov [edi], bp
  8448 00006882 D1E9                <2> 	shr ecx, 1
  8449 00006884 01CF                <2> 	add edi, ecx
  8450 00006886 D1E9                <2> 	shr ecx, 1
  8451 00006888 B802000000          <2> 	mov eax, 2
  8452 0000688D F7E1                <2> 	mul ecx
  8453 0000688F 48                  <2> 	dec eax
  8454 00006890 F7D0                <2> 	not eax ;make it negative
  8455 00006892 A3[3F690000]        <2> 	mov [.ddF_y], eax
  8456 00006897 58                  <2> 	pop eax
  8457 00006898 BB01000000          <2> 	mov ebx, 1
  8458 0000689D 891D[3B690000]      <2> 	mov [.ddF_x], ebx
  8459 000068A3 4B                  <2> 	dec ebx
  8460 000068A4 31D2                <2> 	xor edx, edx
  8461 000068A6 E904000000          <2> 	jmp .lp
  8462                              <2> .lpb:
  8463 000068AB D1EA                <2> 	shr edx, 1
  8464 000068AD D1E9                <2> 	shr ecx, 1
  8465                              <2> .lp:	;it starts this with the center in edi
  8466                              <2> 		;color in bp
  8467                              <2> 		;ddF_x in memory
  8468                              <2> 		;x*resolutionx2 in ebx
  8469                              <2> 		;x in edx
  8470                              <2> 		;ddF_y in memory
  8471                              <2> 		;y*resolutionx2 in eax
  8472                              <2> 		;f in esi
  8473                              <2> 		;y in ecx
  8474 000068AF 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8475 000068B5 7717                <2> 	ja	.noddF_y
  8476 000068B7 49                  <2> 	dec ecx
  8477 000068B8 2B05[3A580000]      <2> 	sub eax, [resolutionx2]
  8478 000068BE 8105[3F690000]0200- <2> 	add dword [.ddF_y], 2
  8479 000068C6 0000                <2>
  8480 000068C8 0335[3F690000]      <2> 	add esi, [.ddF_y]
  8481                              <2> .noddF_y:
  8482 000068CE 42                  <2> 	inc edx
  8483 000068CF 031D[3A580000]      <2> 	add ebx, [resolutionx2]
  8484 000068D5 8105[3B690000]0200- <2> 	add dword [.ddF_x], 2
  8485 000068DD 0000                <2>
  8486 000068DF 0335[3B690000]      <2> 	add esi, [.ddF_x]
  8487                              <2> 
  8488 000068E5 D1E2                <2> 	shl edx, 1
  8489 000068E7 D1E1                <2> 	shl ecx, 1
  8490 000068E9 01D7                <2> 	add edi, edx
  8491 000068EB 01C7                <2> 	add edi, eax
  8492 000068ED 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8493 000068F0 D1E2                <2> 	shl edx, 1
  8494 000068F2 29D7                <2> 	sub edi, edx
  8495 000068F4 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8496 000068F7 D1E0                <2> 	shl eax, 1
  8497 000068F9 29C7                <2> 	sub edi, eax
  8498 000068FB 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8499 000068FE 01D7                <2> 	add edi, edx
  8500 00006900 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8501 00006903 D1E8                <2> 	shr eax, 1
  8502 00006905 D1EA                <2> 	shr edx, 1
  8503 00006907 01C7                <2> 	add edi, eax
  8504 00006909 29D7                <2> 	sub edi, edx
  8505                              <2> 
  8506 0000690B 39D1                <2> 	cmp ecx, edx
  8507 0000690D 749C                <2> 	je .lpb
  8508                              <2> 
  8509 0000690F 01DF                <2> 	add edi, ebx
  8510 00006911 01CF                <2> 	add edi, ecx
  8511 00006913 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8512 00006916 D1E1                <2> 	shl ecx, 1
  8513 00006918 29CF                <2> 	sub edi, ecx
  8514 0000691A 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8515 0000691D D1E3                <2> 	shl ebx, 1
  8516 0000691F 29DF                <2> 	sub edi, ebx
  8517 00006921 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8518 00006924 01CF                <2> 	add edi, ecx
  8519 00006926 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8520 00006929 D1EB                <2> 	shr ebx, 1
  8521 0000692B D1E9                <2> 	shr ecx, 1
  8522 0000692D 01DF                <2> 	add edi, ebx
  8523 0000692F 29CF                <2> 	sub edi, ecx
  8524 00006931 39CA                <2> 	cmp edx, ecx
  8525 00006933 0F8272FFFFFF        <2> 	jb .lpb
  8526                              <2> .done:
  8527 00006939 5D                  <2> 	pop ebp
  8528 0000693A C3                  <2> 	ret
  8529                              <2> 	
  8530 0000693B 00000000            <2> .ddF_x dd 0
  8531 0000693F 00000000            <2> .ddF_y dd 0
  8532                              <2> 
  8533                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8534 00006943 55                  <2> 	push ebp
  8535 00006944 663D0000            <2> 	cmp ax, 0
  8536 00006948 770A                <2> 	ja .nozerocircle
  8537 0000694A E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  8538 0000694F E95A010000          <2> 	jmp .done
  8539                              <2> .nozerocircle:
  8540 00006954 6689F5              <2> 	mov bp, si
  8541 00006957 6650                <2> 	push ax
  8542 00006959 E8161B0000          <2> 	call getpixelmem
  8543 0000695E 31C0                <2> 	xor eax, eax
  8544 00006960 6658                <2> 	pop ax
  8545 00006962 BE01000000          <2> 	mov esi, 1
  8546 00006967 29C6                <2> 	sub esi, eax
  8547 00006969 89C1                <2> 	mov ecx, eax
  8548 0000696B 31C0                <2> 	xor eax, eax
  8549 0000696D 66A1[3A580000]      <2> 	mov ax, [resolutionx2]
  8550 00006973 F7E1                <2> 	mul ecx
  8551 00006975 50                  <2> 	push eax
  8552 00006976 31D2                <2> 	xor edx, edx
  8553 00006978 01C7                <2> 	add edi, eax
  8554 0000697A 66892F              <2> 	mov [edi], bp
  8555 0000697D 29C7                <2> 	sub edi, eax
  8556 0000697F 29C7                <2> 	sub edi, eax
  8557 00006981 66892F              <2> 	mov [edi], bp
  8558 00006984 01C7                <2> 	add edi, eax
  8559 00006986 D1E1                <2> 	shl ecx, 1
  8560 00006988 01CF                <2> 	add edi, ecx
  8561 0000698A 51                  <2> 	push ecx
  8562                              <2> .s0:
  8563 0000698B 66892F              <2> 	mov [edi], bp
  8564 0000698E 81EF02000000        <2> 	sub edi, 2
  8565 00006994 49                  <2> 	dec ecx
  8566 00006995 81F900000000        <2> 	cmp ecx, 0
  8567 0000699B 75EE                <2> 	jne .s0
  8568 0000699D 66892F              <2> 	mov [edi], bp
  8569 000069A0 59                  <2> 	pop ecx
  8570 000069A1 01CF                <2> 	add edi, ecx
  8571 000069A3 D1E9                <2> 	shr ecx, 1
  8572 000069A5 B802000000          <2> 	mov eax, 2
  8573 000069AA F7E1                <2> 	mul ecx
  8574 000069AC 48                  <2> 	dec eax
  8575 000069AD F7D0                <2> 	not eax ;make it negative
  8576 000069AF A3[B46A0000]        <2> 	mov [.ddF_y], eax
  8577 000069B4 58                  <2> 	pop eax
  8578 000069B5 BB01000000          <2> 	mov ebx, 1
  8579 000069BA 891D[B06A0000]      <2> 	mov [.ddF_x], ebx
  8580 000069C0 4B                  <2> 	dec ebx
  8581 000069C1 31D2                <2> 	xor edx, edx
  8582 000069C3 E904000000          <2> 	jmp .lp
  8583                              <2> .lpb:
  8584 000069C8 D1EA                <2> 	shr edx, 1
  8585 000069CA D1E9                <2> 	shr ecx, 1
  8586                              <2> .lp:	;it starts this with the center in edi
  8587                              <2> 		;color in bp
  8588                              <2> 		;ddF_x in memory
  8589                              <2> 		;x*resolutionx2 in ebx
  8590                              <2> 		;x in edx
  8591                              <2> 		;ddF_y in memory
  8592                              <2> 		;y*resolutionx2 in eax
  8593                              <2> 		;f in esi
  8594                              <2> 		;y in ecx
  8595 000069CC 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8596 000069D2 7717                <2> 	ja	.noddF_y
  8597 000069D4 49                  <2> 	dec ecx
  8598 000069D5 2B05[3A580000]      <2> 	sub eax, [resolutionx2]
  8599 000069DB 8105[B46A0000]0200- <2> 	add dword [.ddF_y], 2
  8600 000069E3 0000                <2>
  8601 000069E5 0335[B46A0000]      <2> 	add esi, [.ddF_y]
  8602                              <2> .noddF_y:
  8603 000069EB 42                  <2> 	inc edx
  8604 000069EC 031D[3A580000]      <2> 	add ebx, [resolutionx2]
  8605 000069F2 8105[B06A0000]0200- <2> 	add dword [.ddF_x], 2
  8606 000069FA 0000                <2>
  8607 000069FC 0335[B06A0000]      <2> 	add esi, [.ddF_x]
  8608                              <2> 
  8609 00006A02 D1E2                <2> 	shl edx, 1
  8610 00006A04 D1E1                <2> 	shl ecx, 1
  8611 00006A06 52                  <2> 	push edx
  8612 00006A07 29D7                <2> 	sub edi, edx
  8613 00006A09 01C7                <2> 	add edi, eax
  8614 00006A0B 81FA00000000        <2> 	cmp edx, 0
  8615 00006A11 7412                <2> 	je .nos1
  8616                              <2> .s1:
  8617 00006A13 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8618 00006A16 81C702000000        <2> 	add edi, 2
  8619 00006A1C 4A                  <2> 	dec edx
  8620 00006A1D 81FA00000000        <2> 	cmp edx, 0
  8621 00006A23 75EE                <2> 	jne .s1
  8622                              <2> .nos1:
  8623 00006A25 66892F              <2> 	mov [edi], bp
  8624 00006A28 5A                  <2> 	pop edx
  8625 00006A29 52                  <2> 	push edx
  8626 00006A2A 29C7                <2> 	sub edi, eax
  8627 00006A2C 29C7                <2> 	sub edi, eax
  8628 00006A2E 81FA00000000        <2> 	cmp edx, 0
  8629 00006A34 7412                <2> 	je .nos2
  8630                              <2> .s2:
  8631 00006A36 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8632 00006A39 81EF02000000        <2> 	sub edi, 2
  8633 00006A3F 4A                  <2> 	dec edx
  8634 00006A40 81FA00000000        <2> 	cmp edx, 0
  8635 00006A46 75EE                <2> 	jne .s2
  8636                              <2> .nos2:
  8637 00006A48 66892F              <2> 	mov [edi], bp
  8638 00006A4B 5A                  <2> 	pop edx
  8639 00006A4C 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8640 00006A4E 01D7                <2> 	add edi, edx
  8641                              <2> 
  8642 00006A50 39D1                <2> 	cmp ecx, edx
  8643 00006A52 0F8470FFFFFF        <2> 	je .lpb
  8644                              <2> 
  8645 00006A58 51                  <2> 	push ecx
  8646 00006A59 01DF                <2> 	add edi, ebx
  8647 00006A5B 29CF                <2> 	sub edi, ecx
  8648 00006A5D 81F900000000        <2> 	cmp ecx, 0
  8649 00006A63 7412                <2> 	je .nos3
  8650                              <2> .s3:
  8651 00006A65 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8652 00006A68 81C702000000        <2> 	add edi, 2
  8653 00006A6E 49                  <2> 	dec ecx
  8654 00006A6F 81F900000000        <2> 	cmp ecx, 0
  8655 00006A75 75EE                <2> 	jne .s3
  8656                              <2> .nos3:
  8657 00006A77 66892F              <2> 	mov [edi], bp
  8658 00006A7A 59                  <2> 	pop ecx
  8659 00006A7B 51                  <2> 	push ecx
  8660 00006A7C 29DF                <2> 	sub edi, ebx
  8661 00006A7E 29DF                <2> 	sub edi, ebx
  8662 00006A80 81F900000000        <2> 	cmp ecx, 0
  8663 00006A86 7412                <2> 	je .nos4
  8664                              <2> .s4:
  8665 00006A88 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8666 00006A8B 81EF02000000        <2> 	sub edi, 2
  8667 00006A91 49                  <2> 	dec ecx
  8668 00006A92 81F900000000        <2> 	cmp ecx, 0
  8669 00006A98 75EE                <2> 	jne .s4
  8670                              <2> .nos4:
  8671 00006A9A 66892F              <2> 	mov [edi], bp
  8672 00006A9D 59                  <2> 	pop ecx
  8673 00006A9E 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8674 00006AA0 01CF                <2> 	add edi, ecx
  8675                              <2> 
  8676 00006AA2 D1EA                <2> 	shr edx, 1
  8677 00006AA4 D1E9                <2> 	shr ecx, 1
  8678 00006AA6 39CA                <2> 	cmp edx, ecx
  8679 00006AA8 0F821EFFFFFF        <2> 	jb .lp
  8680                              <2> .done:
  8681 00006AAE 5D                  <2> 	pop ebp
  8682 00006AAF C3                  <2> 	ret
  8683                              <2> 	
  8684 00006AB0 00000000            <2> .ddF_x dd 0
  8685 00006AB4 00000000            <2> .ddF_y dd 0
  8686                              <1> %include "source/gui/cursor.asm"
  8687                              <2> clearmousecursor:
  8688 00006AB8 BE[206E0000]        <2> 		mov esi, background
  8689 00006ABD 8B3D[62570000]      <2> 		mov edi, [physbaseptr]
  8690 00006AC3 31D2                <2> 		xor edx, edx
  8691 00006AC5 31C9                <2> 		xor ecx, ecx
  8692 00006AC7 668B15[2C5A0000]    <2> 		mov dx, [lastmouseposition]
  8693 00006ACE 668B0D[2E5A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8694 00006AD5 01D7                <2> 		add edi, edx
  8695 00006AD7 31D2                <2> 		xor edx, edx
  8696 00006AD9 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  8697 00006AE0 81F900000000        <2> 		cmp ecx, 0
  8698 00006AE6 7408                <2> 		je .nomul
  8699 00006AE8 52                  <2> 		push edx
  8700 00006AE9 89D0                <2> 		mov eax, edx
  8701 00006AEB F7E1                <2> 		mul ecx
  8702 00006AED 01C7                <2> 		add edi, eax
  8703 00006AEF 5A                  <2> 		pop edx
  8704                              <2> .nomul:
  8705                              <2> %ifdef 	gui.background
  8706                              <2> 		cmp dword [backgroundimage], 0
  8707                              <2> 		je .noyclr
  8708                              <2> 		mov esi, [backgroundimage]
  8709                              <2> 		sub edi, [physbaseptr]
  8710                              <2> 		add esi, edi
  8711                              <2> 		add edi, [physbaseptr]
  8712                              <2> .backlp:
  8713                              <2> 		xor ebx, ebx
  8714                              <2> .noyback:
  8715                              <2> 		mov eax, [esi + ebx]
  8716                              <2> 		mov [edi + ebx], eax
  8717                              <2> 		add ebx, 4
  8718                              <2> 		cmp ebx, 16
  8719                              <2> 		jne .noyback
  8720                              <2> 		add edi, edx
  8721                              <2> 		add esi, edx
  8722                              <2> 		inc cx
  8723                              <2> 		cmp cx, 16
  8724                              <2> 		jb .backlp
  8725                              <2> 		ret
  8726                              <2> %endif
  8727                              <2> .noyclr:
  8728 00006AF0 668B06              <2> 		mov ax, [esi]
  8729 00006AF3 C1C010              <2> 		rol eax, 16
  8730 00006AF6 668B06              <2> 		mov ax, [esi]
  8731 00006AF9 8907                <2> 		mov [edi], eax
  8732 00006AFB 894704              <2> 		mov [edi + 4], eax
  8733 00006AFE 894708              <2> 		mov [edi + 8], eax
  8734 00006B01 89470C              <2> 		mov [edi + 12], eax
  8735 00006B04 01D7                <2> 		add edi, edx
  8736 00006B06 6641                <2> 		inc cx
  8737 00006B08 6681F91000          <2> 		cmp cx, 16
  8738 00006B0D 72E1                <2> 		jb .noyclr
  8739 00006B0F C3                  <2> 		ret
  8740                              <2> 
  8741                              <2> switchmousepos:		;;switch were the mouse is located
  8742 00006B10 BE[7DBE0300]        <2> 		mov esi, mousecolorbuf
  8743 00006B15 8B3D[62570000]      <2> 		mov edi, [physbaseptr]
  8744 00006B1B 31D2                <2> 		xor edx, edx
  8745 00006B1D 31C9                <2> 		xor ecx, ecx
  8746 00006B1F 668B15[2C5A0000]    <2> 		mov dx, [lastmouseposition]
  8747 00006B26 668B0D[2E5A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8748 00006B2D 01D7                <2> 		add edi, edx
  8749 00006B2F 31D2                <2> 		xor edx, edx
  8750 00006B31 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  8751 00006B38 6681F90000          <2> 		cmp cx, 0
  8752 00006B3D 740B                <2> 		je noswmsy
  8753 00006B3F 01D7                <2> swmsy:		add edi, edx
  8754 00006B41 6649                <2> 		dec cx
  8755 00006B43 6681F90000          <2> 		cmp cx, 0
  8756 00006B48 75F5                <2> 		jne swmsy
  8757 00006B4A 8B06                <2> noswmsy:	mov eax, [esi]
  8758 00006B4C 8B5E04              <2> 		mov ebx, [esi + 4]
  8759 00006B4F 8907                <2> 		mov [edi], eax
  8760 00006B51 895F04              <2> 		mov [edi + 4], ebx
  8761 00006B54 8B4608              <2> 		mov eax, [esi + 8]
  8762 00006B57 8B5E0C              <2> 		mov ebx, [esi + 12]
  8763 00006B5A 894708              <2> 		mov [edi + 8], eax
  8764 00006B5D 895F0C              <2> 		mov [edi + 12], ebx
  8765 00006B60 01D7                <2> 		add edi, edx
  8766 00006B62 81C610000000        <2> 		add esi, 16
  8767 00006B68 81FE[7DBF0300]      <2> 		cmp esi, mcolorend
  8768 00006B6E 72DA                <2> 		jb noswmsy
  8769                              <2> 		
  8770                              <2> switchmousepos2:
  8771 00006B70 BE[7DBE0300]        <2> 		mov esi, mousecolorbuf
  8772 00006B75 8B3D[62570000]      <2> 		mov edi, [physbaseptr]
  8773 00006B7B 31D2                <2> 		xor edx, edx
  8774 00006B7D 31C9                <2> 		xor ecx, ecx
  8775 00006B7F 668B15[305A0000]    <2> 		mov dx, [mousecursorposition]
  8776 00006B86 668B0D[325A0000]    <2> 		mov cx, [mousecursorposition + 2]
  8777 00006B8D 01D7                <2> 		add edi, edx
  8778 00006B8F 31D2                <2> 		xor edx, edx
  8779 00006B91 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  8780 00006B98 6681F90000          <2> 		cmp cx, 0
  8781 00006B9D 740B                <2> 		je noswmsy2
  8782 00006B9F 01D7                <2> swmsy2:		add edi, edx
  8783 00006BA1 6649                <2> 		dec cx
  8784 00006BA3 6681F90000          <2> 		cmp cx, 0
  8785 00006BA8 75F5                <2> 		jne swmsy2
  8786 00006BAA 8B07                <2> noswmsy2:	mov eax, [edi]
  8787 00006BAC 8B5F04              <2> 		mov ebx, [edi + 4]
  8788 00006BAF 8906                <2> 		mov [esi], eax
  8789 00006BB1 895E04              <2> 		mov [esi + 4], ebx
  8790 00006BB4 8B4708              <2> 		mov eax, [edi + 8]
  8791 00006BB7 8B5F0C              <2> 		mov ebx, [edi + 12]
  8792 00006BBA 894608              <2> 		mov [esi + 8], eax
  8793 00006BBD 895E0C              <2> 		mov [esi + 12], ebx
  8794 00006BC0 01D7                <2> 		add edi, edx
  8795 00006BC2 81C610000000        <2> 		add esi, 16
  8796 00006BC8 81FE[7DBF0300]      <2> 		cmp esi, mcolorend
  8797 00006BCE 72DA                <2> 		jb noswmsy2
  8798 00006BD0 C3                  <2> 		ret
  8799                              <2> 		
  8800                              <1> %include "source/gui/icon.asm"
  8801 00006BD1 0000                <2> iconcolor dw 0
  8802                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8803 00006BD3 A2[9C840000]        <2> 		mov [iconselected], al
  8804 00006BD8 8025[9C840000]01    <2> 		and byte [iconselected], 1
  8805 00006BDF B401                <2> 		mov ah, 1
  8806 00006BE1 E8DF150000          <2> 		call graphicsadd
  8807                              <2> 	showicon2:
  8808 00006BE6 8B3D[62570000]      <2> 		mov edi, [physbaseptr]
  8809 00006BEC 6601D2              <2> 		add dx, dx
  8810 00006BEF 663B15[3A580000]    <2> 		cmp dx, [resolutionx2]
  8811 00006BF6 720C                <2> 		jb screenxgood
  8812 00006BF8 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  8813 00006BFF 6681EA4000          <2> 		sub dx, 64
  8814                              <2> 	screenxgood:
  8815 00006C04 6681F90000          <2> 		cmp cx, 0
  8816 00006C09 742B                <2> 		je noscreenygoodchk
  8817 00006C0B 663B0D[4E570000]    <2> 		cmp cx, [resolutiony]
  8818 00006C12 720C                <2> 		jb screenygood
  8819 00006C14 668B0D[4E570000]    <2> 		mov cx, [resolutiony]
  8820 00006C1B 6681E92000          <2> 		sub cx, 32
  8821                              <2> 	screenygood:
  8822 00006C20 50                  <2> 		push eax
  8823 00006C21 52                  <2> 		push edx
  8824 00006C22 31C0                <2> 		xor eax, eax
  8825 00006C24 31DB                <2> 		xor ebx, ebx
  8826 00006C26 668B1D[3A580000]    <2> 		mov bx, [resolutionx2]
  8827 00006C2D 6689C8              <2> 		mov ax, cx
  8828 00006C30 F7E3                <2> 		mul ebx
  8829 00006C32 01C7                <2> 		add edi, eax
  8830 00006C34 5A                  <2> 		pop edx
  8831 00006C35 58                  <2> 		pop eax
  8832                              <2> 	noscreenygoodchk:
  8833 00006C36 31DB                <2> 		xor ebx, ebx
  8834 00006C38 6689D3              <2> 		mov bx, dx
  8835 00006C3B 01DF                <2> 		add edi, ebx
  8836 00006C3D 6631C9              <2> 		xor cx, cx
  8837 00006C40 668B06              <2> 		mov ax, [esi]
  8838 00006C43 81C602000000        <2> 		add esi, 2
  8839 00006C49 66A3[D16B0000]      <2> 		mov [iconcolor], ax
  8840                              <2> 	writeicon:
  8841 00006C4F 8B06                <2> 		mov eax, [esi]
  8842 00006C51 D1C0                <2> 		rol eax, 1
  8843 00006C53 30C9                <2> 		xor cl, cl
  8844                              <2> 	writeiconline:
  8845 00006C55 B201                <2> 		mov dl, 1
  8846 00006C57 20C2                <2> 		and dl, al
  8847 00006C59 3215[9C840000]      <2> 		xor dl, [iconselected]
  8848 00006C5F 668B1D[206E0000]    <2> 		mov bx, [background]
  8849 00006C66 66891F              <2> 		mov [edi], bx
  8850 00006C69 80FA00              <2> 		cmp dl, 0
  8851 00006C6C 740A                <2> 		je noiconline
  8852 00006C6E 668B15[D16B0000]    <2> 		mov dx, [iconcolor]
  8853 00006C75 668917              <2> 		mov [edi], dx
  8854                              <2> 	noiconline:
  8855 00006C78 81C702000000        <2> 		add edi, 2
  8856 00006C7E D1C0                <2> 		rol eax, 1
  8857 00006C80 FEC1                <2> 		inc cl
  8858 00006C82 80F920              <2> 		cmp cl, 32
  8859 00006C85 72CE                <2> 		jb writeiconline
  8860 00006C87 81C604000000        <2> 		add esi, 4
  8861 00006C8D FEC5                <2> 		inc ch
  8862 00006C8F 31D2                <2> 		xor edx, edx
  8863 00006C91 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  8864 00006C98 01D7                <2> 		add edi, edx
  8865 00006C9A 81EF40000000        <2> 		sub edi, 64
  8866 00006CA0 80FD20              <2> 		cmp ch, 32
  8867 00006CA3 72AA                <2> 		jb writeicon
  8868 00006CA5 31C0                <2> 		xor eax, eax
  8869 00006CA7 C3                  <2> 		ret
  8870                              <1> %include "source/gui/line.asm"
  8871                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8872 00006CA8 668935[CA6D0000]    <2> 	mov [.color], si
  8873 00006CAF C605[CC6D0000]00    <2> 	mov byte [.steep], 0
  8874 00006CB6 C605[CD6D0000]00    <2> 	mov byte [.yreversed], 0
  8875 00006CBD E907000000          <2> 	jmp .notsteep
  8876                              <2> .steeploop:
  8877 00006CC2 C605[CC6D0000]01    <2> 	mov byte [.steep], 1
  8878                              <2> .notsteep:
  8879 00006CC9 31FF                <2> 	xor edi, edi
  8880 00006CCB 31F6                <2> 	xor esi, esi
  8881 00006CCD 6639DA              <2> 	cmp dx, bx
  8882 00006CD0 7705                <2> 	ja .noreversex
  8883 00006CD2 6687D3              <2> 	xchg dx, bx
  8884 00006CD5 6691                <2> 	xchg cx, ax
  8885                              <2> .noreversex:
  8886 00006CD7 6689D7              <2> 	mov di, dx
  8887 00006CDA 6629DF              <2> 	sub di, bx
  8888                              <2> 	
  8889 00006CDD 6639C1              <2> 	cmp cx, ax
  8890 00006CE0 720B                <2> 	jb .reversey
  8891 00006CE2 6689CE              <2> 	mov si, cx
  8892 00006CE5 6629C6              <2> 	sub si, ax
  8893 00006CE8 E90D000000          <2> 	jmp .normal
  8894                              <2> .reversey:
  8895 00006CED C605[CD6D0000]02    <2> 	mov byte [.yreversed], 2
  8896 00006CF4 6689C6              <2> 	mov si, ax
  8897 00006CF7 6629CE              <2> 	sub si, cx	
  8898                              <2> .normal:
  8899 00006CFA 6687CA              <2> 	xchg cx, dx
  8900 00006CFD 6693                <2> 	xchg ax, bx
  8901 00006CFF 6639FE              <2> 	cmp si, di
  8902 00006D02 77BE                <2> 	ja .steeploop
  8903 00006D04 6687CA              <2> 	xchg cx, dx
  8904 00006D07 6693                <2> 	xchg ax, bx
  8905                              <2> 	
  8906 00006D09 6691                <2> 	xchg ax, cx
  8907 00006D0B 6687DA              <2> 	xchg bx, dx
  8908 00006D0E 66893D[D06D0000]    <2> 	mov [.xdelta], di
  8909 00006D15 668935[D26D0000]    <2> 	mov [.ydelta], si
  8910 00006D1C 668B35[CA6D0000]    <2> 	mov si, [.color]
  8911 00006D23 66891D[CE6D0000]    <2> 	mov [.endline], bx
  8912 00006D2A 6652                <2> 	push dx
  8913 00006D2C 6651                <2> 	push cx
  8914 00006D2E 6687CA              <2> 	xchg cx, dx
  8915 00006D31 803D[CC6D0000]01    <2> 	cmp byte [.steep], 1
  8916 00006D38 7403                <2> 	je .xchg
  8917 00006D3A 6687D1              <2> 	xchg dx, cx
  8918                              <2> .xchg:
  8919 00006D3D E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8920 00006D42 6659                <2> 	pop cx
  8921 00006D44 665A                <2> 	pop dx
  8922 00006D46 31C0                <2> 	xor eax, eax
  8923 00006D48 66A1[D06D0000]      <2> 	mov ax, [.xdelta]
  8924 00006D4E 66D1E8              <2> 	shr ax, 1
  8925 00006D51 8A0D[CC6D0000]      <2> 	mov cl, [.steep]
  8926 00006D57 0A0D[CD6D0000]      <2> 	or cl, [.yreversed]
  8927 00006D5D 55                  <2> 	push ebp
  8928 00006D5E 668B2D[CE6D0000]    <2> 	mov bp, [.endline]
  8929 00006D65 6629D5              <2> 	sub bp, dx
  8930 00006D68 668B15[D26D0000]    <2> 	mov dx, [.ydelta]
  8931                              <2> .lp:
  8932 00006D6F 668937              <2> 	mov [edi], si
  8933 00006D72 6639D0              <2> 	cmp ax, dx
  8934 00006D75 7332                <2> 	jae .noaddx
  8935 00006D77 F6C102              <2> 	test cl, 2
  8936 00006D7A 7414                <2> 	jz .nodecy
  8937 00006D7C F6C101              <2> 	test cl, 1
  8938 00006D7F 7509                <2> 	jnz .steepy
  8939 00006D81 29DF                <2> 	sub edi, ebx
  8940 00006D83 29DF                <2> 	sub edi, ebx
  8941 00006D85 E906000000          <2> 	jmp .nodecy
  8942                              <2> .steepy:
  8943 00006D8A 81EF04000000        <2> 	sub edi, 4
  8944                              <2> .nodecy:
  8945 00006D90 660305[D06D0000]    <2> 	add ax, [.xdelta]
  8946 00006D97 F6C101              <2> 	test cl, 1
  8947 00006D9A 7507                <2> 	jnz .steepx
  8948 00006D9C 01DF                <2> 	add edi, ebx
  8949 00006D9E E906000000          <2> 	jmp .noaddx
  8950                              <2> .steepx:
  8951 00006DA3 81C702000000        <2> 	add edi, 2
  8952                              <2> .noaddx:
  8953 00006DA9 6629D0              <2> 	sub ax, dx
  8954 00006DAC 664D                <2> 	dec bp
  8955 00006DAE 81C702000000        <2> 	add edi, 2
  8956 00006DB4 F6C101              <2> 	test cl, 1
  8957 00006DB7 7408                <2> 	jz .nosteepx
  8958 00006DB9 81EF02000000        <2> 	sub edi, 2
  8959 00006DBF 01DF                <2> 	add edi, ebx
  8960                              <2> .nosteepx:
  8961 00006DC1 6681FD0000          <2> 	cmp bp, 0
  8962 00006DC6 75A7                <2> 	jne .lp
  8963                              <2> .done:
  8964 00006DC8 5D                  <2> 	pop ebp
  8965 00006DC9 C3                  <2> 	ret
  8966                              <2> 	
  8967 00006DCA 0000                <2> .color dw 0
  8968 00006DCC 00                  <2> .steep db 0
  8969 00006DCD 00                  <2> .yreversed db 0
  8970 00006DCE 0000                <2> .endline dw 0
  8971 00006DD0 0000                <2> .xdelta dw 0
  8972 00006DD2 0000                <2> .ydelta dw 0
  8973                              <1> %include "source/gui/refresh.asm"
  8974                              <2> guiclear:
  8975 00006DD4 8B3D[62570000]      <2> 	mov edi, [physbaseptr]
  8976 00006DDA 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  8977 00006DE1 668B0D[4E570000]    <2> 	mov cx, [resolutiony]
  8978 00006DE8 668B1D[206E0000]    <2> 	mov bx, [background]
  8979 00006DEF 66891D[226E0000]    <2> 	mov [background + 2], bx
  8980                              <2> %ifdef gui.background
  8981                              <2> 	cmp dword [backgroundimage], 0
  8982                              <2> 	je guiclear.noback
  8983                              <2> 		mov esi, [backgroundimage]
  8984                              <2> 	.lp:
  8985                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8986                              <2> 		;movdqa [edi], xmm0
  8987                              <2> 		;add esi, 16
  8988                              <2> 		;add edi, 16
  8989                              <2> 		;sub dx, 8
  8990                              <2> 		mov eax, [esi]
  8991                              <2> 		mov [edi], eax
  8992                              <2> 		add esi, 4
  8993                              <2> 		add edi, 4
  8994                              <2> 		sub dx, 2
  8995                              <2> 		cmp dx, 0
  8996                              <2> 		ja .lp
  8997                              <2> 		dec cx
  8998                              <2> 		mov dx, [resolutionx]
  8999                              <2> 		cmp cx, 0
  9000                              <2> 		ja .lp
  9001                              <2> 		ret
  9002                              <2> 	backgroundimage dd 0
  9003                              <2> %endif
  9004                              <2> guiclear.noback:
  9005 00006DF6 A1[206E0000]        <2> 	mov eax, [background]
  9006                              <2> guiclearloop:
  9007 00006DFB 8907                <2> 	mov [edi], eax
  9008 00006DFD 81C704000000        <2> 	add edi, 4
  9009 00006E03 6681EA0200          <2> 	sub dx, 2
  9010 00006E08 6681FA0000          <2> 	cmp dx, 0
  9011 00006E0D 77EC                <2> 	ja guiclearloop
  9012 00006E0F 6649                <2> 	dec cx
  9013 00006E11 668B15[4C570000]    <2> 	mov dx, [resolutionx]
  9014 00006E18 6681F90000          <2> 	cmp cx, 0
  9015 00006E1D 77DC                <2> 	ja guiclearloop
  9016 00006E1F C3                  <2> 	ret
  9017                              <2> 
  9018 00006E20 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9019                              <2> 	.original equ 0111101111001111b
  9020                              <2> 
  9021                              <2> reloadallgraphics:
  9022 00006E24 BF[7DBC0300]        <2> 		mov edi, graphicstable
  9023                              <2> reloadgraphicsloop:
  9024 00006E29 8B7702              <2> 		mov esi, [edi + 2]
  9025 00006E2C 668B5706            <2> 		mov dx, [edi + 6]
  9026 00006E30 668B4F08            <2> 		mov cx, [edi + 8]
  9027 00006E34 668B07              <2> 		mov ax, [edi]
  9028 00006E37 668B5F0A            <2> 		mov bx, [edi + 10]
  9029 00006E3B 893D[B1810000]      <2> 		mov [grpctblpos], edi
  9030 00006E41 3B3D[487C0000]      <2> 		cmp edi, [dragging]
  9031 00006E47 741E                <2> 		je loadedgraphic
  9032 00006E49 663D0100            <2> 		cmp ax, 1
  9033 00006E4D 0F8436000000        <2> 		je near icongraphic
  9034 00006E53 663D0200            <2> 		cmp ax, 2
  9035 00006E57 0F843C000000        <2> 		je near stringgraphic
  9036 00006E5D 663D0300            <2> 		cmp ax, 3
  9037 00006E61 0F8416000000        <2> 		je near windowgraphic
  9038 00006E67 8B3D[B1810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9039 00006E6D 81C710000000        <2> 		add edi, 16
  9040 00006E73 81FF[7DBE0300]      <2> 		cmp edi, graphicstableend
  9041 00006E79 732E                <2> 		jae donereloadgraphics
  9042 00006E7B EBAC                <2> 		jmp reloadgraphicsloop
  9043                              <2> windowgraphic:
  9044 00006E7D E827090000          <2> 		call showwindow2
  9045 00006E82 E897AFFFFF          <2> 		call cleardouble
  9046 00006E87 EBDE                <2> 		jmp loadedgraphic
  9047 00006E89 80E301              <2> icongraphic:	and bl, 1
  9048 00006E8C 881D[9C840000]      <2> 		mov [iconselected], bl
  9049 00006E92 E84FFDFFFF          <2> 		call showicon2
  9050 00006E97 EBCE                <2> 		jmp loadedgraphic
  9051 00006E99 80E301              <2> stringgraphic:  and bl, 1
  9052 00006E9C 881D[447C0000]      <2> 		mov [mouseselecton], bl
  9053 00006EA2 E8CE050000          <2> 		call showstring2
  9054 00006EA7 EBBE                <2> 		jmp loadedgraphic
  9055                              <2> donereloadgraphics:
  9056 00006EA9 8B3D[487C0000]      <2> 		mov edi, [dragging]
  9057 00006EAF 81FF[7DBC0300]      <2> 		cmp edi, graphicstable
  9058 00006EB5 7226                <2> 		jb notcorrectdrag
  9059 00006EB7 668B07              <2> 		mov ax, [edi]
  9060 00006EBA 8B7702              <2> 		mov esi, [edi + 2]
  9061 00006EBD 668B5706            <2> 		mov dx, [edi + 6]
  9062 00006EC1 668B4F08            <2> 		mov cx, [edi + 8]
  9063 00006EC5 668B5F0A            <2> 		mov bx, [edi + 10]
  9064 00006EC9 663D0100            <2> 		cmp ax, 1
  9065 00006ECD 750F                <2> 		jne noticondragging
  9066 00006ECF 80E301              <2> 		and bl, 1
  9067 00006ED2 881D[9C840000]      <2> 		mov [iconselected], bl
  9068 00006ED8 E809FDFFFF          <2> 		call showicon2
  9069                              <2> notcorrectdrag:
  9070 00006EDD C3                  <2> 		ret
  9071                              <2> 
  9072                              <2> 	noticondragging:
  9073 00006EDE 663D0200            <2> 		cmp ax, 2
  9074 00006EE2 75F9                <2> 		jne notcorrectdrag
  9075 00006EE4 80E301              <2> 		and bl, 1
  9076 00006EE7 881D[447C0000]      <2> 		mov [mouseselecton], bl
  9077 00006EED E883050000          <2> 		call showstring2
  9078 00006EF2 EBE9                <2> 		jmp notcorrectdrag
  9079                              <1> %include "source/gui/square.asm"
  9080                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9081 00006EF4 6639D3              <2> 	cmp bx, dx
  9082 00006EF7 7303                <2> 	jae .noxchgx
  9083 00006EF9 6687DA              <2> 	xchg bx, dx
  9084                              <2> .noxchgx:
  9085 00006EFC 6639C8              <2> 	cmp ax, cx
  9086 00006EFF 7302                <2> 	jae .noxchgy
  9087 00006F01 6691                <2> 	xchg ax, cx
  9088                              <2> .noxchgy:
  9089 00006F03 6650                <2> 	push ax
  9090 00006F05 6653                <2> 	push bx
  9091 00006F07 6652                <2> 	push dx
  9092 00006F09 E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9093 00006F0E 31D2                <2> 	xor edx, edx
  9094 00006F10 665A                <2> 	pop dx
  9095 00006F12 31DB                <2> 	xor ebx, ebx
  9096 00006F14 665B                <2> 	pop bx
  9097 00006F16 6658                <2> 	pop ax
  9098                              <2> .lp0:
  9099 00006F18 6652                <2> 	push dx
  9100                              <2> .lp:
  9101 00006F1A 668937              <2> 	mov [edi], si
  9102 00006F1D 81C702000000        <2> 	add edi, 2
  9103 00006F23 6642                <2> 	inc dx
  9104 00006F25 6639DA              <2> 	cmp dx, bx
  9105 00006F28 76F0                <2> 	jbe .lp
  9106 00006F2A 665A                <2> 	pop dx
  9107 00006F2C 81EF02000000        <2> 	sub edi, 2
  9108 00006F32 29DF                <2> 	sub edi, ebx
  9109 00006F34 29DF                <2> 	sub edi, ebx
  9110 00006F36 01D7                <2> 	add edi, edx
  9111 00006F38 01D7                <2> 	add edi, edx
  9112 00006F3A 033D[3A580000]      <2> 	add edi, [resolutionx2]
  9113 00006F40 6641                <2> 	inc cx
  9114 00006F42 6639C1              <2> 	cmp cx, ax
  9115 00006F45 7203                <2> 	jb .lp2
  9116 00006F47 74CF                <2> 	je .lp0
  9117 00006F49 C3                  <2> 	ret
  9118                              <2> .lp2:
  9119 00006F4A 57                  <2> 	push edi
  9120 00006F4B 668937              <2> 	mov [edi], si
  9121 00006F4E 29D7                <2> 	sub edi, edx
  9122 00006F50 29D7                <2> 	sub edi, edx
  9123 00006F52 01DF                <2> 	add edi, ebx
  9124 00006F54 01DF                <2> 	add edi, ebx
  9125 00006F56 668937              <2> 	mov [edi], si
  9126 00006F59 5F                  <2> 	pop edi
  9127 00006F5A 033D[3A580000]      <2> 	add edi, [resolutionx2]
  9128 00006F60 6641                <2> 	inc cx
  9129 00006F62 6639C1              <2> 	cmp cx, ax
  9130 00006F65 72E3                <2> 	jb .lp2
  9131 00006F67 EBAF                <2> 	jmp .lp0
  9132                              <2> 
  9133                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9134 00006F69 6639D3              <2> 	cmp bx, dx
  9135 00006F6C 7303                <2> 	jae .noxchgx
  9136 00006F6E 6687DA              <2> 	xchg bx, dx
  9137                              <2> .noxchgx:
  9138 00006F71 6639C8              <2> 	cmp ax, cx
  9139 00006F74 7302                <2> 	jae .noxchgy
  9140 00006F76 6691                <2> 	xchg ax, cx
  9141                              <2> .noxchgy:
  9142 00006F78 6650                <2> 	push ax
  9143 00006F7A 6653                <2> 	push bx
  9144 00006F7C 6652                <2> 	push dx
  9145 00006F7E E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9146 00006F83 31D2                <2> 	xor edx, edx
  9147 00006F85 665A                <2> 	pop dx
  9148 00006F87 31DB                <2> 	xor ebx, ebx
  9149 00006F89 665B                <2> 	pop bx
  9150 00006F8B 6658                <2> 	pop ax
  9151                              <2> .lp2
  9152 00006F8D 6652                <2> 	push dx
  9153                              <2> .lp:
  9154 00006F8F 668937              <2> 	mov [edi], si
  9155 00006F92 81C702000000        <2> 	add edi, 2
  9156 00006F98 6642                <2> 	inc dx
  9157 00006F9A 6639DA              <2> 	cmp dx, bx
  9158 00006F9D 76F0                <2> 	jbe .lp
  9159 00006F9F 665A                <2> 	pop dx
  9160 00006FA1 81EF02000000        <2> 	sub edi, 2
  9161 00006FA7 29DF                <2> 	sub edi, ebx
  9162 00006FA9 29DF                <2> 	sub edi, ebx
  9163 00006FAB 01D7                <2> 	add edi, edx
  9164 00006FAD 01D7                <2> 	add edi, edx
  9165 00006FAF 033D[3A580000]      <2> 	add edi, [resolutionx2]
  9166 00006FB5 6641                <2> 	inc cx
  9167 00006FB7 6639C1              <2> 	cmp cx, ax
  9168 00006FBA 76D1                <2> 	jbe .lp2
  9169 00006FBC C3                  <2> 	ret
  9170                              <1> %include "source/gui/startup.asm"
  9171                              <2> guisetup:
  9172                              <2> 	%ifdef gui.background
  9173                              <2> 	xor ebx, ebx
  9174                              <2> 	mov [backgroundimage], ebx
  9175                              <2> 	%endif
  9176 00006FBD E812FEFFFF          <2> 	call guiclear
  9177 00006FC2 C605[9C890000]01    <2> 	mov byte [guion], 1
  9178 00006FC9 C605[447C0000]00    <2> 	mov byte [mouseselecton], 0
  9179 00006FD0 31C0                <2> 	xor eax, eax
  9180 00006FD2 31DB                <2> 	xor ebx, ebx
  9181 00006FD4 31C9                <2> 	xor ecx, ecx
  9182 00006FD6 31D2                <2> 	xor edx, edx
  9183                              <2> 	
  9184 00006FD8 BE[9A710000]        <2> 	mov esi, pacmsg
  9185 00006FDD 30E4                <2> 	xor ah, ah
  9186 00006FDF B010                <2> 	mov al, 00010000b
  9187 00006FE1 31DB                <2> 	xor ebx, ebx
  9188 00006FE3 66B99000            <2> 	mov cx, 144
  9189 00006FE7 66BA0400            <2> 	mov dx, 4
  9190 00006FEB E872040000          <2> 	call showstring
  9191                              <2> 	
  9192 00006FF0 BE[D8710000]        <2> 	mov esi, interneticon
  9193 00006FF5 30E4                <2> 	xor ah, ah
  9194 00006FF7 B010                <2> 	mov al, 00010000b
  9195 00006FF9 BB[C3700000]        <2> 	mov ebx, noie
  9196 00006FFE 66B91800            <2> 	mov cx, 24
  9197 00007002 66BA0400            <2> 	mov dx, 4
  9198 00007006 E8C8FBFFFF          <2> 	call showicon
  9199                              <2> 	
  9200 0000700B BE[5A720000]        <2> 	mov esi, wordicon
  9201 00007010 30E4                <2> 	xor ah, ah
  9202 00007012 B010                <2> 	mov al, 00010000b
  9203 00007014 31DB                <2> 	xor ebx, ebx
  9204 00007016 66B91800            <2> 	mov cx, 24
  9205 0000701A 66BA3000            <2> 	mov dx, 48
  9206 0000701E E8B0FBFFFF          <2> 	call showicon
  9207                              <2> 	
  9208 00007023 BE[DC720000]        <2> 	mov esi, pacmanpellet
  9209 00007028 30E4                <2> 	xor ah, ah
  9210 0000702A B010                <2> 	mov al, 00010000b
  9211 0000702C 31DB                <2> 	xor ebx, ebx
  9212 0000702E 66B94000            <2> 	mov cx, 64
  9213 00007032 66BA0400            <2> 	mov dx, 4
  9214 00007036 E898FBFFFF          <2> 	call showicon
  9215                              <2> 	
  9216 0000703B BE[E0730000]        <2> 	mov esi, pacman
  9217 00007040 30E4                <2> 	xor ah, ah
  9218 00007042 B010                <2> 	mov al, 00010000b
  9219 00007044 BB[AC700000]        <2> 	mov ebx, pacmannomnom
  9220 00007049 66B94000            <2> 	mov cx, 64
  9221 0000704D 66BA3000            <2> 	mov dx, 48
  9222 00007051 E87DFBFFFF          <2> 	call showicon
  9223                              <2> 	
  9224 00007056 BE[5E730000]        <2> 	mov esi, ghostie
  9225 0000705B 30E4                <2> 	xor ah, ah
  9226 0000705D B010                <2> 	mov al, 00010000b
  9227 0000705F BB[95700000]        <2> 	mov ebx, boo
  9228 00007064 66B96C00            <2> 	mov cx, 108
  9229 00007068 66BA0400            <2> 	mov dx, 4
  9230 0000706C E862FBFFFF          <2> 	call showicon
  9231                              <2> 	
  9232 00007071 BE[7C710000]        <2> 	mov esi, start
  9233 00007076 668B0D[4E570000]    <2> 	mov cx, [resolutiony]
  9234 0000707D 6681E91000          <2> 	sub cx, 16
  9235 00007082 66BA0200            <2> 	mov dx, 2
  9236 00007086 30E4                <2> 	xor ah, ah
  9237 00007088 B010                <2> 	mov al, 00010000b
  9238 0000708A BB[38710000]        <2> 	mov ebx, winblows
  9239 0000708F E8CE030000          <2> 	call showstring
  9240                              <2> 
  9241                              <2> %ifdef gui.time	
  9242                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9243                              <2> %endif
  9244 00007094 C3                  <2> 	ret
  9245                              <2> 
  9246                              <2> 	boo:
  9247 00007095 BE[95710000]        <2> 		mov esi, boomsg
  9248 0000709A 66BA6400            <2> 		mov dx, 100
  9249 0000709E 66B94001            <2> 		mov cx, 320
  9250 000070A2 31DB                <2> 		xor ebx, ebx
  9251 000070A4 6631C0              <2> 		xor ax, ax
  9252 000070A7 E9B6030000          <2> 		jmp showstring
  9253                              <2> 
  9254                              <2> 	pacmannomnom:
  9255 000070AC BE[B3710000]        <2> 		mov esi, pacnom
  9256 000070B1 66BA8200            <2> 		mov dx, 130
  9257 000070B5 66B93C00            <2> 		mov cx, 60
  9258 000070B9 31DB                <2> 		xor ebx, ebx
  9259 000070BB 6631C0              <2> 		xor ax, ax
  9260 000070BE E99F030000          <2> 		jmp showstring	
  9261                              <2> 	
  9262                              <2> 	noie:
  9263 000070C3 66C705[C2710000]80- <2> 		mov word [termwindow], 640
  9264 000070CB 02                  <2>
  9265 000070CC 66C705[C4710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9266 000070D4 01                  <2>
  9267 000070D5 BE[C2710000]        <2> 		mov esi, termwindow
  9268 000070DA 66BA1000            <2> 		mov dx, 16
  9269 000070DE 66B91000            <2> 		mov cx, 16
  9270 000070E2 31DB                <2> 		xor ebx, ebx
  9271 000070E4 6631C0              <2> 		xor ax, ax
  9272 000070E7 E803060000          <2> 		call showwindow
  9273 000070EC E90DBAFFFF          <2> 		jmp os
  9274                              <2> 
  9275                              <2> 	gotomenuboot:
  9276 000070F1 31D2                <2> 		xor edx, edx
  9277 000070F3 31C9                <2> 		xor ecx, ecx
  9278 000070F5 668B15[4C570000]    <2> 		mov dx, [resolutionx]
  9279 000070FC 668B0D[4E570000]    <2> 		mov cx, [resolutiony]
  9280 00007103 66C1E904            <2> 		shr cx, 4
  9281 00007107 6681E90100          <2> 		sub cx, 1
  9282 0000710C 66C1E104            <2> 		shl cx, 4
  9283 00007110 668915[C2710000]    <2> 		mov [termwindow], dx
  9284 00007117 66890D[C4710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9285 0000711E BE[C2710000]        <2> 		mov esi, termwindow
  9286 00007123 6631D2              <2> 		xor dx, dx
  9287 00007126 6631C9              <2> 		xor cx, cx
  9288 00007129 31DB                <2> 		xor ebx, ebx
  9289 0000712B 6631C0              <2> 		xor ax, ax
  9290 0000712E E8BC050000          <2> 		call showwindow
  9291 00007133 E9C6B9FFFF          <2> 		jmp os
  9292                              <2> 
  9293                              <2> 	winblows:
  9294 00007138 BE[8B710000]        <2> 		mov esi, turnoffmsg
  9295 0000713D BB[AE520000]        <2> 		mov ebx, turnoff
  9296 00007142 668B0D[4E570000]    <2> 		mov cx, [resolutiony]
  9297 00007149 6681E92000          <2> 		sub cx, 32
  9298 0000714E 6631D2              <2> 		xor dx, dx
  9299 00007151 30E4                <2> 		xor ah, ah
  9300 00007153 B010                <2> 		mov al, 00010000b
  9301 00007155 E808030000          <2> 		call showstring
  9302 0000715A BE[82710000]        <2> 		mov esi, gotomenu
  9303 0000715F 668B0D[4E570000]    <2> 		mov cx, [resolutiony]
  9304 00007166 6681E93000          <2> 		sub cx, 48
  9305 0000716B 6631D2              <2> 		xor dx, dx
  9306 0000716E 30E4                <2> 		xor ah, ah
  9307 00007170 B010                <2> 		mov al, 00010000b
  9308 00007172 BB[F1700000]        <2> 		mov ebx, gotomenuboot
  9309 00007177 E9E6020000          <2> 		jmp showstring
  9310                              <2> 		
  9311                              <2> 
  9312 0000717C 737461727400        <2> 	start	db "start",0
  9313 00007182 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9314 0000718B 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9315 00007194 00                  <2>
  9316 00007195 426F6F2100          <2> 	boomsg db "Boo!",0
  9317 0000719A 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9318 000071A3 73206561737920746F- <2>
  9319 000071AC 20647261772E00      <2>
  9320 000071B3 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9321 000071BC 6D206E6F6D00        <2>
  9322                              <2> 
  9323 000071C2 20035802            <2> 	termwindow:	dw 800,600	;window size
  9324 000071C6 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9325 000071CA [7EBF0300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9326 000071CE [C6940400]          <2>
  9327 000071D2 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9328                              <2> 	
  9329 000071D2 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9330 000071D2 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9331 000071D2 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9332 000071D2 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9333 000071D2 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9334                              <2> 
  9335                              <2> %ifdef gui.time
  9336                              <2> guitime:
  9337                              <2> 		call time	;get rtc in timeshow & dateshow
  9338                              <2> 		xor ebx, ebx
  9339                              <2> 		mov dx, [resolutionx2]
  9340                              <2> 		xor cx, cx
  9341                              <2> 		sub dx, 304
  9342                              <2> 		mov esi, dateshow
  9343                              <2> 		mov al, 00010001b
  9344                              <2> 		call showstring
  9345                              <2> 		mov esi, timeshow
  9346                              <2> 		xor ebx, ebx
  9347                              <2> 		mov al, 00010001b
  9348                              <2> 		call showstring
  9349                              <2> 		ret
  9350                              <2> %endif
  9351                              <1> %include "source/gui/text.asm"
  9352                              <2> 	showstring:
  9353 00007462 A2[447C0000]        <2> 		mov [mouseselecton], al
  9354 00007467 8025[447C0000]01    <2> 		and byte [mouseselecton], 1
  9355 0000746E B402                <2> 		mov ah, 2
  9356 00007470 E8500D0000          <2> 		call graphicsadd
  9357                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9358 00007475 30E4                <2> 		xor ah, ah
  9359 00007477 8A06                <2> 		mov al, [esi]
  9360 00007479 3CC0                <2> 		cmp al, 0xC0
  9361 0000747B 7234                <2> 		jb .doneutf
  9362 0000747D 3CE0                <2> 		cmp al, 0xE0
  9363 0000747F 721D                <2> 		jb .two
  9364 00007481 46                  <2> 		inc esi
  9365 00007482 668B1E              <2> 		mov bx, [esi]
  9366 00007485 46                  <2> 		inc esi
  9367 00007486 C0E004              <2> 		shl al, 4
  9368 00007489 66C1E302            <2> 		shl bx, 2
  9369 0000748D C0EF02              <2> 		shr bh, 2
  9370 00007490 66C1EB02            <2> 		shr bx, 2
  9371 00007494 08C7                <2> 		or bh, al
  9372 00007496 6689D8              <2> 		mov ax, bx
  9373 00007499 E913000000          <2> 		jmp .doneutf
  9374                              <2> 	.two:
  9375 0000749E 8A3E                <2> 		mov bh, [esi]
  9376 000074A0 46                  <2> 		inc esi
  9377 000074A1 8A1E                <2> 		mov bl, [esi]
  9378 000074A3 66C1E302            <2> 		shl bx, 2
  9379 000074A7 C0EF02              <2> 		shr bh, 2
  9380 000074AA 66C1EB02            <2> 		shr bx, 2
  9381 000074AE 6689D8              <2> 		mov ax, bx
  9382                              <2> 	.doneutf:
  9383 000074B1 3C00                <2> 		cmp al, 0
  9384 000074B3 7420                <2> 		je doneshowstring
  9385 000074B5 46                  <2> 		inc esi
  9386 000074B6 3CFF                <2> 		cmp al, 255
  9387 000074B8 74BB                <2> 		je showstring2
  9388 000074BA 56                  <2> 		push esi
  9389 000074BB 668B1D[DD740000]    <2> 		mov bx, [colorfont2]
  9390 000074C2 E827000000          <2> 		call showfontvesa
  9391 000074C7 663D0A00            <2> 		cmp ax, 10
  9392 000074CB 7405                <2> 		je noproceedshst
  9393 000074CD 6681C20800          <2> 		add dx, 8
  9394                              <2> 	noproceedshst:
  9395 000074D2 5E                  <2> 		pop esi
  9396 000074D3 EBA0                <2> 		jmp showstring2
  9397                              <2> 	doneshowstring:
  9398 000074D5 C605[447C0000]00    <2> 		mov byte [mouseselecton], 0
  9399 000074DC C3                  <2> 		ret
  9400                              <2> 
  9401 000074DD FFFF                <2> colorfont2 dw 0xFFFF
  9402 000074DF 00                  <2> colorcache db 0
  9403                              <2> 
  9404 000074E0 02                  <2> resolutionbytes db 2
  9405 000074E1 0000                <2> posxvesa dw 0
  9406 000074E3 0000                <2> posyvesa dw 0
  9407 000074E5 FFFF                <2> colorfont dw 0xFFFF
  9408                              <2> savefontvesa:		;same rules as showfontvesa
  9409 000074E7 C605[437C0000]01    <2> 	mov byte [savefonton], 1
  9410                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9411 000074EE 663DFF00            <2> 	cmp ax, 255
  9412 000074F2 7501                <2> 	jne nostopshowfont
  9413 000074F4 C3                  <2> 	ret
  9414                              <2> nostopshowfont:
  9415 000074F5 55                  <2> 	push ebp
  9416 000074F6 66890D[E3740000]    <2> 	mov [posyvesa], cx
  9417 000074FD 663D0A00            <2> 	cmp ax, 10
  9418 00007501 0F8424000000        <2> 	je near goodvesafontx
  9419 00007507 31C9                <2> 	xor ecx, ecx
  9420 00007509 668B0D[3A580000]    <2> 	mov cx, [resolutionx2]
  9421 00007510 6639CA              <2> 	cmp dx, cx
  9422 00007513 7616                <2> 	jbe goodvesafontx
  9423 00007515 6631D2              <2> 	xor dx, dx
  9424 00007518 668B0D[E3740000]    <2> 	mov cx, [posyvesa]
  9425 0000751F 6681C11000          <2> 	add cx, 16
  9426 00007524 66890D[E3740000]    <2> 	mov [posyvesa], cx
  9427                              <2> goodvesafontx:
  9428 0000752B 668B0D[E3740000]    <2> 	mov cx, [posyvesa]
  9429 00007532 668915[E1740000]    <2> 	mov [posxvesa], dx
  9430 00007539 8B3D[62570000]      <2> 	mov edi, [physbaseptr]
  9431 0000753F 66891D[E5740000]    <2> 	mov [colorfont], bx
  9432 00007546 668B2D[E5740000]    <2> 	mov bp, [colorfont]
  9433 0000754D 31DB                <2> 	xor ebx, ebx
  9434 0000754F 6689C3              <2> 	mov bx, ax
  9435 00007552 31C0                <2> 	xor eax, eax
  9436 00007554 6689D8              <2> 	mov ax, bx
  9437 00007557 6689D3              <2> 	mov bx, dx
  9438 0000755A 89DA                <2> 	mov edx, ebx
  9439 0000755C 31DB                <2> 	xor ebx, ebx
  9440 0000755E 6681F90000          <2> 	cmp cx, 0
  9441 00007563 7414                <2> 	je vesaposloopdn
  9442 00007565 668B1D[3A580000]    <2> 	mov bx, [resolutionx2]
  9443                              <2> vesaposloop:
  9444 0000756C 52                  <2> 	push edx
  9445 0000756D 50                  <2> 	push eax
  9446 0000756E 31C0                <2> 	xor eax, eax
  9447 00007570 6689C8              <2> 	mov ax, cx
  9448 00007573 F7E3                <2> 	mul ebx
  9449 00007575 01C7                <2> 	add edi, eax
  9450 00007577 58                  <2> 	pop eax
  9451 00007578 5A                  <2> 	pop edx
  9452                              <2> vesaposloopdn:
  9453 00007579 01D7                <2> 	add edi, edx
  9454 0000757B BE[E68B0000]        <2> 	mov esi, fonts
  9455                              <2> findfontvesa:
  9456 00007580 663D0A00            <2> 	cmp ax, 10
  9457 00007584 0F84EB000000        <2> 	je near nwlinevesa
  9458 0000758A C1E004              <2> 	shl eax, 4
  9459 0000758D 01C6                <2> 	add esi, eax
  9460 0000758F C1E804              <2> 	shr eax, 4
  9461 00007592 81FE[E68B0300]      <2> 	cmp esi, fontend
  9462 00007598 0F83AB000000        <2> 	jae near donefontvesa
  9463 0000759E 4E                  <2> 	dec esi
  9464                              <2> foundfontvesa:
  9465 0000759F 46                  <2> 	inc esi
  9466 000075A0 803D[437C0000]01    <2> 	cmp byte [savefonton], 1
  9467 000075A7 0F84E7000000        <2> 	je near vesafontsaver
  9468 000075AD 30C9                <2> 	xor cl, cl
  9469 000075AF 8A06                <2> 	mov al, [esi]
  9470 000075B1 668B15[3A580000]    <2> 	mov dx, [resolutionx2]
  9471 000075B8 662B15[E1740000]    <2> 	sub dx, [posxvesa]
  9472 000075BF 6681FA1000          <2> 	cmp dx, 16
  9473 000075C4 7708                <2> 	ja paintfontvesa
  9474 000075C6 D0EA                <2> 	shr dl, 1
  9475 000075C8 8815[74760000]      <2> 	mov [charwidth], dl
  9476                              <2> paintfontvesa:
  9477 000075CE B201                <2> 	mov dl, 1
  9478 000075D0 20C2                <2> 	and dl, al
  9479 000075D2 803D[427C0000]01    <2> 	cmp byte [showcursorfonton], 1
  9480 000075D9 0F842E000000        <2> 	je near nodelpaintedfont
  9481 000075DF 803D[427C0000]02    <2> 	cmp byte [showcursorfonton], 2
  9482 000075E6 0F8511000000        <2> 	jne near noswitchcursorfonton
  9483 000075EC 80FA00              <2> 	cmp dl, 0
  9484 000075EF 0F8420000000        <2> 	je near nopixelset
  9485 000075F5 66892F              <2> 	mov [edi], bp
  9486 000075F8 E918000000          <2> 	jmp nopixelset
  9487                              <2> noswitchcursorfonton:
  9488 000075FD 3215[447C0000]      <2> 	xor dl, [mouseselecton]
  9489 00007603 668B1D[206E0000]    <2> 	mov bx, [background]
  9490 0000760A 66891F              <2> 	mov [edi], bx
  9491                              <2> nodelpaintedfont:
  9492 0000760D 80FA00              <2> 	cmp dl, 0
  9493 00007610 7403                <2> 	je nopixelset
  9494 00007612 66892F              <2> 	mov [edi], bp
  9495                              <2> nopixelset:
  9496 00007615 81C702000000        <2> 	add edi, 2
  9497 0000761B D0C0                <2> 	rol al, 1
  9498 0000761D FEC1                <2> 	inc cl
  9499 0000761F 3A0D[74760000]      <2> 	cmp cl, [charwidth]
  9500 00007625 72A7                <2> 	jb paintfontvesa
  9501 00007627 FEC5                <2> 	inc ch
  9502 00007629 31D2                <2> 	xor edx, edx
  9503 0000762B 668B15[3A580000]    <2> 	mov dx, [resolutionx2]
  9504 00007632 01D7                <2> 	add edi, edx
  9505 00007634 31D2                <2> 	xor edx, edx
  9506 00007636 8A15[74760000]      <2> 	mov dl, [charwidth]
  9507 0000763C 00D2                <2> 	add dl, dl
  9508 0000763E 29D7                <2> 	sub edi, edx
  9509 00007640 80FD10              <2> 	cmp ch, 16
  9510 00007643 0F8256FFFFFF        <2> 	jb foundfontvesa
  9511                              <2> donefontvesa:
  9512 00007649 C605[74760000]08    <2> 	mov byte [charwidth], 8
  9513 00007650 668B15[E1740000]    <2> 	mov dx, [posxvesa]
  9514 00007657 8A1D[74760000]      <2> 	mov bl, [charwidth]
  9515 0000765D 30FF                <2> 	xor bh, bh
  9516 0000765F 6601DA              <2> 	add dx, bx
  9517 00007662 6689EB              <2> 	mov bx, bp
  9518 00007665 668B0D[E3740000]    <2> 	mov cx, [posyvesa]
  9519 0000766C 883D[437C0000]      <2> 	mov [savefonton], bh
  9520 00007672 5D                  <2> 	pop ebp
  9521 00007673 C3                  <2> 	ret
  9522 00007674 08                  <2> charwidth db 8
  9523                              <2> nwlinevesa:
  9524 00007675 6631D2              <2> 	xor dx, dx
  9525 00007678 668915[E1740000]    <2> 	mov [posxvesa], dx
  9526 0000767F 668B0D[E3740000]    <2> 	mov cx, [posyvesa]
  9527 00007686 6681C11000          <2> 	add cx, 16
  9528 0000768B 66890D[E3740000]    <2> 	mov [posyvesa], cx
  9529 00007692 EBB5                <2> 	jmp donefontvesa
  9530                              <2> vesafontsaver:
  9531 00007694 30C0                <2> 	xor al, al
  9532 00007696 30C9                <2> 	xor cl, cl
  9533                              <2> vesafontsaver2:
  9534 00007698 66392F              <2> 	cmp [edi], bp
  9535 0000769B 742C                <2> 	je colorfontmatch
  9536                              <2> donecolormatch:
  9537 0000769D 81C702000000        <2> 	add edi, 2
  9538 000076A3 D0C0                <2> 	rol al, 1
  9539 000076A5 FEC1                <2> 	inc cl
  9540 000076A7 80F908              <2> 	cmp cl, 8
  9541 000076AA 72EC                <2> 	jb vesafontsaver2
  9542 000076AC 8806                <2> 	mov [esi], al
  9543 000076AE 46                  <2> 	inc esi
  9544 000076AF FEC5                <2> 	inc ch
  9545 000076B1 31D2                <2> 	xor edx, edx
  9546 000076B3 668B15[3A580000]    <2> 	mov dx, [resolutionx2]
  9547 000076BA 01D7                <2> 	add edi, edx
  9548 000076BC 81EF10000000        <2> 	sub edi, 16
  9549 000076C2 80FD10              <2> 	cmp ch, 16
  9550 000076C5 72CD                <2> 	jb vesafontsaver
  9551 000076C7 EB80                <2> 	jmp donefontvesa
  9552                              <2> colorfontmatch:
  9553 000076C9 0401                <2> 	add al, 1
  9554 000076CB EBD0                <2> 	jmp donecolormatch
  9555                              <1> %include "source/gui/window.asm"
  9556 000076CD 0000                <2> winvcopystx dw 0
  9557 000076CF 0000                <2> winvcopysty dw 0
  9558 000076D1 0000                <2> winvcopydx dw 0
  9559 000076D3 0000                <2> winvcopycx dw 0
  9560 000076D5 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9561 000076D9 00000000            <2> windowbufloc: dd 0
  9562 000076DD 00000000            <2> windowvideobuf dd 0
  9563 000076E1 00000000            <2> windowvideobuf2 dd 0
  9564 000076E5 00000000            <2> windowinfobuf dd 0
  9565 000076E9 0000                <2> termcol dw 0
  9566 000076EB 00000000            <2> wincopyendpos dd 0
  9567                              <2> 
  9568                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9569 000076EF C605[B7230000]01    <2> 		mov byte [termguion], 1
  9570 000076F6 6681C11000          <2> 		add cx, 16
  9571 000076FB 668915[CD760000]    <2> 		mov [winvcopystx], dx
  9572 00007702 66890D[CF760000]    <2> 		mov [winvcopysty], cx
  9573 00007709 8935[E5760000]      <2> 		mov [windowinfobuf], esi
  9574 0000770F 668B16              <2> 		mov dx, [esi]
  9575 00007712 668B4E02            <2> 		mov cx, [esi + 2]
  9576 00007716 31C0                <2> 		xor eax, eax
  9577 00007718 31DB                <2> 		xor ebx, ebx
  9578 0000771A 6689D0              <2> 		mov ax, dx
  9579 0000771D 6689CB              <2> 		mov bx, cx
  9580 00007720 66C1E803            <2> 		shr ax, 3
  9581 00007724 66C1EB04            <2> 		shr bx, 4
  9582 00007728 66A3[E9760000]      <2> 		mov [termcol], ax
  9583 0000772E A2[AC250000]        <2> 		mov [charxy], al
  9584 00007733 881D[AD250000]      <2> 		mov [charxy + 1], bl
  9585 00007739 8B7E04              <2> 		mov edi, [esi + 4]
  9586 0000773C 893D[D5760000]      <2> 		mov [windowcolor], edi
  9587 00007742 8B7E0C              <2> 		mov edi, [esi + 12]
  9588 00007745 893D[E1760000]      <2> 		mov [windowvideobuf2], edi
  9589 0000774B 8B7E08              <2> 		mov edi, [esi + 8]
  9590 0000774E 893D[DD760000]      <2> 		mov [windowvideobuf], edi
  9591 00007754 81FB00000000        <2> 		cmp ebx, 0
  9592 0000775A 0F84C1040000        <2> 		je near donewincopynow
  9593                              <2> 	findendposwin:
  9594 00007760 C1E002              <2> 		shl eax, 2
  9595 00007763 31D2                <2> 		xor edx, edx
  9596 00007765 F7E3                <2> 		mul ebx
  9597 00007767 01C7                <2> 		add edi, eax
  9598 00007769 893D[EB760000]      <2> 		mov [wincopyendpos], edi
  9599 0000776F 31FF                <2> 		xor edi, edi
  9600 00007771 6631C0              <2> 		xor ax, ax
  9601 00007774 6631DB              <2> 		xor bx, bx
  9602 00007777 6601D2              <2> 		add dx, dx
  9603 0000777A 668915[D1760000]    <2> 		mov [winvcopydx], dx
  9604 00007781 66890D[D3760000]    <2> 		mov [winvcopycx], cx
  9605 00007788 668B0D[CF760000]    <2> 		mov cx, [winvcopysty]
  9606 0000778F 6681E91000          <2> 		sub cx, 16
  9607 00007794 668B15[CD760000]    <2> 		mov dx, [winvcopystx]
  9608 0000779B C605[B8230000]00    <2> 		mov byte [termcopyon], 0
  9609 000077A2 B403                <2> 		mov ah, 3
  9610 000077A4 E81C0A0000          <2> 		call graphicsadd
  9611                              <2> 	showwindow2:
  9612 000077A9 6681C11000          <2> 		add cx, 16
  9613 000077AE 668915[CD760000]    <2> 		mov [winvcopystx], dx
  9614 000077B5 66890D[CF760000]    <2> 		mov [winvcopysty], cx
  9615 000077BC 668B16              <2> 		mov dx, [esi]
  9616 000077BF 668B4E02            <2> 		mov cx, [esi + 2]
  9617 000077C3 6601D2              <2> 		add dx, dx
  9618 000077C6 668915[D1760000]    <2> 		mov [winvcopydx], dx
  9619 000077CD 66890D[D3760000]    <2> 		mov [winvcopycx], cx
  9620 000077D4 E818000000          <2> 		call reloadwindowtitle
  9621 000077D9 803D[AC810000]01    <2> 		cmp byte [windrag], 1
  9622 000077E0 0F834A040000        <2> 		jae near forgetresetstuff
  9623 000077E6 8B3D[D9760000]      <2> 		mov edi, [windowbufloc]
  9624 000077EC E96E020000          <2> 		jmp windowvideocopyset
  9625                              <2> 		
  9626                              <2> 	reloadwindowtitle:
  9627 000077F1 8B3D[D9760000]      <2> 		mov edi, [windowbufloc]
  9628 000077F7 31D2                <2> 		xor edx, edx
  9629 000077F9 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  9630 00007800 C1E204              <2> 		shl edx, 4
  9631 00007803 29D7                <2> 		sub edi, edx
  9632 00007805 803D[B8230000]00    <2> 		cmp byte [termcopyon], 0
  9633 0000780C 7532                <2> 		jne nocleartitlebarpos
  9634 0000780E 8B3D[62570000]      <2> 		mov edi, [physbaseptr]
  9635 00007814 31D2                <2> 		xor edx, edx
  9636 00007816 668B15[CD760000]    <2> 		mov dx, [winvcopystx]
  9637 0000781D 01D7                <2> 		add edi, edx
  9638 0000781F 31C9                <2> 		xor ecx, ecx
  9639 00007821 668B0D[CF760000]    <2> 		mov cx, [winvcopysty]
  9640 00007828 6681E91000          <2> 		sub cx, 16
  9641 0000782D 6681F90000          <2> 		cmp cx, 0
  9642 00007832 740C                <2> 		je nocleartitlebarpos
  9643                              <2> 	cleartitlebarpos:
  9644 00007834 31C0                <2> 		xor eax, eax
  9645 00007836 66A1[3A580000]      <2> 		mov ax, [resolutionx2]
  9646 0000783C F7E1                <2> 		mul ecx
  9647 0000783E 01C7                <2> 		add edi, eax
  9648                              <2> 	nocleartitlebarpos:
  9649 00007840 66B91000            <2> 		mov cx, 16
  9650 00007844 668B15[D1760000]    <2> 		mov dx, [winvcopydx]
  9651 0000784B 6681F90000          <2> 		cmp cx, 0
  9652 00007850 0F8448000000        <2> 		je near canceltitlebarput
  9653 00007856 6681FA0000          <2> 		cmp dx, 0
  9654 0000785B 0F843D000000        <2> 		je near canceltitlebarput
  9655                              <2> 	titlebarput:
  9656 00007861 66A1[D5760000]      <2> 		mov ax, [windowcolor]
  9657 00007867 668907              <2> 		mov [edi], ax
  9658 0000786A 6681EA0200          <2> 		sub dx, 2
  9659 0000786F 81C702000000        <2> 		add edi, 2
  9660 00007875 6681FA0000          <2> 		cmp dx, 0
  9661 0000787A 75E5                <2> 		jne titlebarput
  9662 0000787C 31D2                <2> 		xor edx, edx
  9663 0000787E 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  9664 00007885 6649                <2> 		dec cx
  9665 00007887 662B15[D1760000]    <2> 		sub dx, [winvcopydx]
  9666 0000788E 01D7                <2> 		add edi, edx
  9667 00007890 668B15[D1760000]    <2> 		mov dx, [winvcopydx]
  9668 00007897 6681F90000          <2> 		cmp cx, 0
  9669 0000789C 75C3                <2> 		jne titlebarput
  9670                              <2> 	canceltitlebarput:
  9671 0000789E 893D[D9760000]      <2> 		mov [windowbufloc], edi
  9672 000078A4 803D[B8230000]02    <2> 		cmp byte [termcopyon], 2
  9673 000078AB 0F841C010000        <2> 		je near winvcpst
  9674 000078B1 668B1D[206E0000]    <2> 		mov bx, [background]
  9675 000078B8 6653                <2> 		push bx
  9676 000078BA 6631DB              <2> 		xor bx, bx
  9677 000078BD 66891D[206E0000]    <2> 		mov [background], bx
  9678 000078C4 6631C0              <2> 		xor ax, ax
  9679 000078C7 81C610000000        <2> 		add esi, 16
  9680 000078CD 668B15[CD760000]    <2> 		mov dx, [winvcopystx]
  9681 000078D4 668B0D[CF760000]    <2> 		mov cx, [winvcopysty]
  9682 000078DB 6681E91000          <2> 		sub cx, 16
  9683 000078E0 668B1D[D5760000]    <2> 		mov bx, [windowcolor]
  9684 000078E7 C605[447C0000]01    <2> 		mov byte [mouseselecton], 1
  9685 000078EE E882FBFFFF          <2> 		call showstring2	;Show window title
  9686 000078F3 8B35[9C2C0000]      <2> 		mov esi, [usercache]
  9687 000078F9 6681C21000          <2> 		add dx, 16
  9688 000078FE C605[447C0000]01    <2> 		mov byte [mouseselecton], 1
  9689 00007905 E86BFBFFFF          <2> 		call showstring2	;Show user name
  9690 0000790A BE[67890000]        <2> 		mov esi, computer
  9691 0000790F C605[447C0000]01    <2> 		mov byte [mouseselecton], 1
  9692 00007916 E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9693 0000791B 66B85800            <2> 		mov ax, "X"
  9694 0000791F 66BB00F8            <2> 		mov bx, 1111100000000000b
  9695 00007923 668B15[CD760000]    <2> 		mov dx, [winvcopystx]
  9696 0000792A 668B0D[CF760000]    <2> 		mov cx, [winvcopysty]
  9697 00007931 6681E91000          <2> 		sub cx, 16
  9698 00007936 6681EA1000          <2> 		sub dx, 16
  9699 0000793B 660315[D1760000]    <2> 		add dx, [winvcopydx]
  9700 00007942 C605[447C0000]01    <2> 		mov byte [mouseselecton], 1
  9701 00007949 663B15[3A580000]    <2> 		cmp dx, [resolutionx2]
  9702 00007950 7305                <2> 		jae .nox
  9703 00007952 E897FBFFFF          <2> 		call showfontvesa
  9704                              <2> .nox:
  9705 00007957 668B1D[206E0000]    <2> 		mov bx, [background]
  9706 0000795E 6681EA1800          <2> 		sub dx, 24
  9707 00007963 66B82B00            <2> 		mov ax, "+"
  9708 00007967 66BBE007            <2> 		mov bx, 0000011111100000b
  9709 0000796B C605[447C0000]01    <2> 		mov byte [mouseselecton], 1
  9710 00007972 663B15[3A580000]    <2> 		cmp dx, [resolutionx2]
  9711 00007979 7305                <2> 		jae .noplus
  9712 0000797B E86EFBFFFF          <2> 		call showfontvesa
  9713                              <2> .noplus:
  9714 00007980 6681EA1800          <2> 		sub dx, 24
  9715 00007985 66B82D00            <2> 		mov ax, "-"
  9716 00007989 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9717 0000798D C605[447C0000]01    <2> 		mov byte [mouseselecton], 1
  9718 00007994 663B15[3A580000]    <2> 		cmp dx, [resolutionx2]
  9719 0000799B 7305                <2> 		jae .nominus
  9720 0000799D E84CFBFFFF          <2> 		call showfontvesa
  9721                              <2> .nominus:
  9722 000079A2 6681EA1800          <2> 		sub dx, 24
  9723 000079A7 66B83F00            <2> 		mov ax, "?"
  9724 000079AB 66BB1F00            <2> 		mov bx, 0000000000011111b
  9725 000079AF C605[447C0000]01    <2> 		mov byte [mouseselecton], 1
  9726 000079B6 663B15[3A580000]    <2> 		cmp dx, [resolutionx2]
  9727 000079BD 7305                <2> 		jae .noquestion
  9728 000079BF E82AFBFFFF          <2> 		call showfontvesa
  9729                              <2> .noquestion:
  9730 000079C4 665B                <2> 		pop bx
  9731 000079C6 66891D[206E0000]    <2> 		mov [background], bx
  9732                              <2> 	winvcpst:
  9733 000079CD C3                  <2> 		ret
  9734                              <2> 
  9735                              <2> 	windowvideocopy:
  9736 000079CE 8B35[E5760000]      <2> 		mov esi, [windowinfobuf]
  9737 000079D4 668B16              <2> 		mov dx, [esi]
  9738 000079D7 668B4E02            <2> 		mov cx, [esi + 2]
  9739 000079DB 8B7E04              <2> 		mov edi, [esi + 4]
  9740 000079DE 893D[D5760000]      <2> 		mov [windowcolor], edi
  9741 000079E4 8B7E08              <2> 		mov edi, [esi + 8]
  9742 000079E7 8B5E0C              <2> 		mov ebx, [esi + 12]
  9743 000079EA 893D[DD760000]      <2> 		mov [windowvideobuf], edi
  9744 000079F0 891D[E1760000]      <2> 		mov [windowvideobuf2], ebx
  9745 000079F6 31C0                <2> 		xor eax, eax
  9746 000079F8 31DB                <2> 		xor ebx, ebx
  9747 000079FA 6689D0              <2> 		mov ax, dx
  9748 000079FD 6689CB              <2> 		mov bx, cx
  9749 00007A00 66C1E803            <2> 		shr ax, 3
  9750 00007A04 66C1EB04            <2> 		shr bx, 4
  9751 00007A08 66A3[E9760000]      <2> 		mov [termcol], ax
  9752 00007A0E A2[AC250000]        <2> 		mov [charxy], al
  9753 00007A13 881D[AD250000]      <2> 		mov [charxy + 1], bl
  9754 00007A19 8B3D[D9760000]      <2> 		mov edi, [windowbufloc]
  9755 00007A1F 3B3D[62570000]      <2> 		cmp edi, [physbaseptr]
  9756 00007A25 0F8334000000        <2> 		jae near windowvideocopyset
  9757 00007A2B 31C9                <2> 		xor ecx, ecx
  9758 00007A2D 31D2                <2> 		xor edx, edx
  9759 00007A2F 668B15[CD760000]    <2> 		mov dx, [winvcopystx]
  9760 00007A36 668B0D[CF760000]    <2> 		mov cx, [winvcopysty]
  9761 00007A3D 8B3D[62570000]      <2> 		mov edi, [physbaseptr]
  9762 00007A43 01D7                <2> 		add edi, edx
  9763 00007A45 81F900000000        <2> 		cmp ecx, 0
  9764 00007A4B 7412                <2> 		je windowvideocopyset
  9765                              <2> 	yrescopylp:
  9766 00007A4D 31C0                <2> 		xor eax, eax
  9767 00007A4F 66A1[3A580000]      <2> 		mov ax, [resolutionx2]
  9768 00007A55 F7E1                <2> 		mul ecx
  9769 00007A57 01C7                <2> 		add edi, eax
  9770 00007A59 893D[D9760000]      <2> 		mov [windowbufloc], edi
  9771                              <2> 	windowvideocopyset:
  9772 00007A5F 6631C9              <2> 		xor cx, cx
  9773 00007A62 6649                <2> 		dec cx
  9774 00007A64 66890D[387C0000]    <2> 		mov [charposline], cx
  9775 00007A6B 89FE                <2> 		mov esi, edi
  9776 00007A6D 81EE10000000        <2> 		sub esi, 16
  9777 00007A73 31D2                <2> 		xor edx, edx
  9778 00007A75 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  9779 00007A7C C1E204              <2> 		shl edx, 4
  9780 00007A7F 01D6                <2> 		add esi, edx
  9781 00007A81 8B3D[DD760000]      <2> 		mov edi, [windowvideobuf]
  9782 00007A87 81EF04000000        <2> 		sub edi, 4
  9783 00007A8D 893D[3A7C0000]      <2> 		mov [charposvbuf], edi
  9784 00007A93 E97C000000          <2> 		jmp nextcharwin
  9785                              <2> 	win.write:	;adjusted this to use alpha
  9786                              <2> 				;5R, 6G, 5B
  9787                              <2> %ifdef gui.alphablending
  9788                              <2> 		push esi
  9789                              <2> 		push bx
  9790                              <2> 		push cx
  9791                              <2> 		push dx
  9792                              <2> %ifdef gui.background
  9793                              <2> 		mov esi, edi
  9794                              <2> 		sub esi, [physbaseptr]
  9795                              <2> 		add esi, [backgroundimage]
  9796                              <2> 		cmp dword [backgroundimage], 0
  9797                              <2> 		jne .red
  9798                              <2> %endif
  9799                              <2> 		mov esi, background
  9800                              <2> 	.red:
  9801                              <2> 		mov cx, [esi]
  9802                              <2> 		shr cx, 11
  9803                              <2> 		mov bx, ax
  9804                              <2> 		shr bx, 11
  9805                              <2> 		add cx, bx
  9806                              <2> 		add cx, bx
  9807                              <2> 		add cx, bx
  9808                              <2> 		shr cx, 2
  9809                              <2> 		shl cx, 11
  9810                              <2> 		mov dx, cx
  9811                              <2> 	.green:
  9812                              <2> 		mov cx, [esi]
  9813                              <2> 		shl cx, 5
  9814                              <2> 		shr cx, 10
  9815                              <2> 		mov bx, ax
  9816                              <2> 		shl bx, 5
  9817                              <2> 		shr bx, 10
  9818                              <2> 		add cx, bx
  9819                              <2> 		add cx, bx
  9820                              <2> 		add cx, bx
  9821                              <2> 		shr cx, 2
  9822                              <2> 		shl cx, 5
  9823                              <2> 		add dx, cx
  9824                              <2> 	.blue:
  9825                              <2> 		mov cx, [esi]
  9826                              <2> 		shl cx, 11
  9827                              <2> 		shr cx, 11
  9828                              <2> 		mov bx, ax
  9829                              <2> 		shl bx, 11
  9830                              <2> 		shr bx, 11
  9831                              <2> 		add cx, bx
  9832                              <2> 		add cx, bx
  9833                              <2> 		add cx, bx
  9834                              <2> 		shr cx, 2
  9835                              <2> 		add dx, cx
  9836                              <2> 		mov [edi], dx
  9837                              <2> 		pop dx
  9838                              <2> 		pop cx
  9839                              <2> 		pop bx
  9840                              <2> 		pop esi
  9841                              <2> %else
  9842 00007A98 668907              <2> 		mov [edi], ax
  9843                              <2> %endif
  9844 00007A9B C3                  <2> 		ret
  9845                              <2> 	copywindow:
  9846 00007A9C B201                <2> 		mov dl, 1
  9847 00007A9E D0C6                <2> 		rol dh, 1
  9848 00007AA0 20F2                <2> 		and dl, dh
  9849 00007AA2 66813D[DF740000]80- <2> 		cmp word [colorcache], 0x80
  9850 00007AAA 00                  <2>
  9851 00007AAB 7320                <2> 		jae switchwincolors
  9852 00007AAD 66A1[D7760000]      <2> 		mov ax, [windowcolor + 2]
  9853 00007AB3 E8E0FFFFFF          <2> 		call win.write
  9854 00007AB8 80FA00              <2> 		cmp dl, 0
  9855 00007ABB 742B                <2> 		je nowritewin
  9856 00007ABD 66A1[D5760000]      <2> 		mov ax, [windowcolor]
  9857 00007AC3 E8D0FFFFFF          <2> 		call win.write
  9858 00007AC8 E91B000000          <2> 		jmp nowritewin
  9859                              <2> 	switchwincolors:
  9860 00007ACD 66A1[D5760000]      <2> 		mov ax, [windowcolor]
  9861 00007AD3 E8C0FFFFFF          <2> 		call win.write
  9862 00007AD8 80FA00              <2> 		cmp dl, 0
  9863 00007ADB 740B                <2> 		je nowritewin
  9864 00007ADD 66A1[D7760000]      <2> 		mov ax, [windowcolor + 2]
  9865 00007AE3 E8B0FFFFFF          <2> 		call win.write
  9866                              <2> 	nowritewin:
  9867 00007AE8 81C702000000        <2> 		add edi, 2
  9868 00007AEE FEC1                <2> 		inc cl
  9869 00007AF0 80F908              <2> 		cmp cl, 8
  9870 00007AF3 75A7                <2> 		jne copywindow
  9871 00007AF5 43                  <2> 		inc ebx
  9872 00007AF6 30C9                <2> 		xor cl, cl
  9873 00007AF8 31D2                <2> 		xor edx, edx
  9874 00007AFA 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  9875 00007B01 01D6                <2> 		add esi, edx
  9876 00007B03 89F7                <2> 		mov edi, esi
  9877 00007B05 8AB3[E68B0000]      <2> 		mov dh, [fonts + ebx]
  9878 00007B0B D0CE                <2> 		ror dh, 1
  9879 00007B0D FEC5                <2> 		inc ch
  9880 00007B0F 80FD10              <2> 		cmp ch, 16
  9881 00007B12 7588                <2> 		jne copywindow
  9882                              <2> 	nextcharwin:
  9883 00007B14 6631C9              <2> 		xor cx, cx
  9884 00007B17 8B3D[3A7C0000]      <2> 		mov edi, [charposvbuf]
  9885 00007B1D 81C704000000        <2> 		add edi, 4
  9886 00007B23 3B3D[EB760000]      <2> 		cmp edi, [wincopyendpos]
  9887 00007B29 0F83F2000000        <2> 		jae near donewincopynow
  9888 00007B2F 668B5F02            <2> 		mov bx, [edi + 2]
  9889 00007B33 6681FB0000          <2> 		cmp bx, 0
  9890 00007B38 7508                <2> 		jne nofixcolorwin
  9891 00007B3A 66BB0700            <2> 		mov bx, 7
  9892 00007B3E 66895F02            <2> 		mov [edi + 2], bx
  9893                              <2> 	nofixcolorwin:
  9894 00007B42 66891D[DF740000]    <2> 		mov [colorcache], bx
  9895 00007B49 8B1F                <2> 		mov ebx, [edi]
  9896 00007B4B 893D[3A7C0000]      <2> 		mov [charposvbuf], edi
  9897 00007B51 813D[E1760000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9898 00007B59 0000                <2>
  9899 00007B5B 7455                <2> 		je noskipcharcopy
  9900 00007B5D 2B3D[DD760000]      <2> 		sub edi, [windowvideobuf]
  9901 00007B63 033D[E1760000]      <2> 		add edi, [windowvideobuf2]
  9902 00007B69 8B07                <2> 		mov eax, [edi]
  9903 00007B6B 39D8                <2> 		cmp eax, ebx
  9904 00007B6D 7543                <2> 		jne noskipcharcopy
  9905                              <2> 	skipcharcopy:
  9906 00007B6F 81C610000000        <2> 		add esi, 16
  9907 00007B75 668B0D[387C0000]    <2> 		mov cx, [charposline]
  9908 00007B7C 6641                <2> 		inc cx
  9909 00007B7E 66890D[387C0000]    <2> 		mov [charposline], cx
  9910 00007B85 663B0D[E9760000]    <2> 		cmp cx, [termcol]
  9911 00007B8C 7286                <2> 		jb nextcharwin
  9912 00007B8E 6631C9              <2> 		xor cx, cx
  9913 00007B91 66890D[387C0000]    <2> 		mov [charposline], cx
  9914 00007B98 31D2                <2> 		xor edx, edx
  9915 00007B9A 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  9916 00007BA1 C1E204              <2> 		shl edx, 4
  9917 00007BA4 662B15[D1760000]    <2> 		sub dx, [winvcopydx]
  9918 00007BAB 01D6                <2> 		add esi, edx
  9919 00007BAD E962FFFFFF          <2> 		jmp nextcharwin
  9920                              <2> 	noskipcharcopy:
  9921 00007BB2 891F                <2> 		mov [edi], ebx
  9922 00007BB4 8B3D[3A7C0000]      <2> 		mov edi, [charposvbuf]
  9923 00007BBA C1E310              <2> 		shl ebx, 16
  9924 00007BBD C1EB0C              <2> 		shr ebx, 12
  9925 00007BC0 31D2                <2> 		xor edx, edx
  9926 00007BC2 668B15[3A580000]    <2> 		mov dx, [resolutionx2]
  9927 00007BC9 C1E204              <2> 		shl edx, 4
  9928 00007BCC 29D6                <2> 		sub esi, edx
  9929 00007BCE 81C610000000        <2> 		add esi, 16
  9930 00007BD4 89F7                <2> 		mov edi, esi
  9931 00007BD6 668B0D[387C0000]    <2> 		mov cx, [charposline]
  9932 00007BDD 6641                <2> 		inc cx
  9933 00007BDF 663B0D[E9760000]    <2> 		cmp cx, [termcol]
  9934 00007BE6 7317                <2> 		jae fixwindowcopy
  9935 00007BE8 66890D[387C0000]    <2> 		mov [charposline], cx
  9936 00007BEF 6631C9              <2> 		xor cx, cx
  9937 00007BF2 8AB3[E68B0000]      <2> 		mov dh, [fonts + ebx]
  9938 00007BF8 D0CE                <2> 		ror dh, 1
  9939 00007BFA E99DFEFFFF          <2> 		jmp copywindow
  9940                              <2> fixwindowcopy:
  9941 00007BFF 6631C9              <2> 		xor cx, cx
  9942 00007C02 66890D[387C0000]    <2> 		mov [charposline], cx
  9943 00007C09 662B15[D1760000]    <2> 		sub dx, [winvcopydx]
  9944 00007C10 01D6                <2> 		add esi, edx
  9945 00007C12 89F7                <2> 		mov edi, esi
  9946 00007C14 8AB3[E68B0000]      <2> 		mov dh, [fonts + ebx]
  9947 00007C1A D0CE                <2> 		ror dh, 1
  9948 00007C1C E97BFEFFFF          <2> 		jmp copywindow
  9949                              <2> donewincopynow:
  9950 00007C21 803D[B8230000]01    <2> 		cmp byte [termcopyon], 1
  9951 00007C28 7506                <2> 		jne forgetresetstuff
  9952 00007C2A E862ADFFFF          <2> 		call switchtermcursor
  9953 00007C2F 61                  <2> 		popa
  9954                              <2> forgetresetstuff:
  9955 00007C30 C605[B8230000]00    <2> 		mov byte [termcopyon], 0
  9956 00007C37 C3                  <2> 		ret
  9957                              <2> 		
  9958 00007C38 0000                <2> charposline dw 0
  9959 00007C3A 00000000            <2> charposvbuf dw 0,0
  9960                              <1> 				
  9961 00007C3E 00                  <1> copygui db 0
  9962 00007C3F 00                  <1> graphicsset db 0
  9963 00007C40 0000                <1> graphicspos db 0,0
  9964 00007C42 00                  <1> showcursorfonton db 0
  9965 00007C43 00                  <1> savefonton db 0
  9966 00007C44 00                  <1> mouseselecton db 0
  9967                              <1> 
  9968 00007C45 00                  <1> pbutton db 0
  9969 00007C46 00                  <1> pLBUTTON db 0
  9970 00007C47 00                  <1> pRBUTTON db 0
  9971 00007C48 00000000            <1> dragging dw 0,0
  9972 00007C4C 0000000000000000    <1> lastpos dw 0,0,0,0
  9973 00007C54 00000000            <1> colorbuf dw 0,0
  9974                              <1> 	
  9975                              <1> 	clickicon:
  9976 00007C58 B001                <1> 		mov al, 1
  9977 00007C5A A2[457C0000]        <1> 		mov [pbutton], al
  9978 00007C5F A0[467C0000]        <1> 		mov al, [pLBUTTON]
  9979 00007C64 2205[415B0000]      <1> 		and al, [LBUTTON]
  9980 00007C6A 8A25[477C0000]      <1> 		mov ah, [pRBUTTON]
  9981 00007C70 2225[425B0000]      <1> 		and ah, [RBUTTON]
  9982 00007C76 08E0                <1> 		or al, ah
  9983 00007C78 3C00                <1> 		cmp al, 0
  9984 00007C7A 741B                <1> 		je nodragclick
  9985 00007C7C 813D[487C0000]0100- <1> 		cmp dword [dragging], 1
  9986 00007C84 0000                <1>
  9987 00007C86 732F                <1> 		jae dragclick
  9988 00007C88 C705[487C0000]0100- <1> 		mov dword [dragging], 1
  9989 00007C90 0000                <1>
  9990 00007C92 E920000000          <1> 		jmp dragclick
  9991                              <1> 	nodragclick:
  9992 00007C97 31C0                <1> 		xor eax, eax
  9993 00007C99 A3[487C0000]        <1> 		mov dword [dragging], eax
  9994 00007C9E A2[457C0000]        <1> 		mov [pbutton], al
  9995 00007CA3 A0[415B0000]        <1> 		mov al, [LBUTTON]
  9996 00007CA8 A2[467C0000]        <1> 		mov [pLBUTTON], al
  9997 00007CAD A0[425B0000]        <1> 		mov al, [RBUTTON]
  9998 00007CB2 A2[477C0000]        <1> 		mov [pRBUTTON], al
  9999                              <1> 	dragclick:
 10000 00007CB7 6631C0              <1> 		xor ax, ax
 10001 00007CBA BE[7DBC0300]        <1> 		mov esi, graphicstable
 10002 00007CBF C705[98840000]0000- <1> 		mov dword [codepointer], 0
 10003 00007CC7 0000                <1>
 10004                              <1> 	clicon2:
 10005 00007CC9 31D2                <1> 		xor edx, edx
 10006 00007CCB 31C9                <1> 		xor ecx, ecx
 10007 00007CCD 66813E0100          <1> 		cmp word [esi], 1
 10008 00007CD2 0F841B000000        <1> 		je near iconselect
 10009 00007CD8 66813E0200          <1> 		cmp word [esi], 2
 10010 00007CDD 0F8472010000        <1> 		je near textselected
 10011 00007CE3 66813E0300          <1> 		cmp word [esi], 3
 10012 00007CE8 0F84C7020000        <1> 		je near windowselect
 10013 00007CEE E910040000          <1> 		jmp nexticonsel
 10014                              <1> 	iconselect:
 10015 00007CF3 668B5606            <1> 		mov dx, [esi + 6]
 10016 00007CF7 6689D0              <1> 		mov ax, dx
 10017 00007CFA 668B4E08            <1> 		mov cx, [esi + 8]
 10018 00007CFE 6689CB              <1> 		mov bx, cx
 10019 00007D01 6681C32000          <1> 		add bx, 32
 10020 00007D06 6601D0              <1> 		add ax, dx
 10021 00007D09 813D[487C0000]0100- <1> 		cmp dword [dragging], 1
 10022 00007D11 0000                <1>
 10023 00007D13 746F                <1> 		je dragicon
 10024 00007D15 813D[487C0000]0000- <1> 		cmp dword [dragging], 0
 10025 00007D1D 0000                <1>
 10026 00007D1F 7411                <1> 		je nodragiconcheck
 10027 00007D21 3935[487C0000]      <1> 		cmp dword [dragging], esi
 10028 00007D27 0F85D6030000        <1> 		jne near nexticonsel
 10029 00007D2D E952000000          <1> 		jmp dragicon
 10030                              <1> 	nodragiconcheck:
 10031 00007D32 663905[305A0000]    <1> 		cmp [mousecursorposition], ax
 10032 00007D39 0F82C4030000        <1> 		jb near nexticonsel
 10033 00007D3F 66054000            <1> 		add ax, 64
 10034 00007D43 663905[305A0000]    <1> 		cmp [mousecursorposition], ax
 10035 00007D4A 0F87B3030000        <1> 		ja near nexticonsel
 10036 00007D50 6629D0              <1> 		sub ax, dx
 10037 00007D53 66390D[325A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10038 00007D5A 0F82A3030000        <1> 		jb near nexticonsel
 10039 00007D60 66391D[325A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10040 00007D67 0F8796030000        <1> 		ja near nexticonsel
 10041 00007D6D 668B460A            <1> 		mov ax, [esi + 10]
 10042 00007D71 66250100            <1> 		and ax, 1
 10043 00007D75 663D0100            <1> 		cmp ax, 1
 10044 00007D79 0F84B6000000        <1> 		je near unselecticon
 10045 00007D7F E98D000000          <1> 		jmp nodragicon
 10046                              <1> 	dragicon:
 10047 00007D84 663905[2C5A0000]    <1> 		cmp [lastmouseposition], ax
 10048 00007D8B 0F8272030000        <1> 		jb near nexticonsel
 10049 00007D91 66054000            <1> 		add ax, 64
 10050 00007D95 663905[2C5A0000]    <1> 		cmp [lastmouseposition], ax
 10051 00007D9C 0F8761030000        <1> 		ja near nexticonsel
 10052 00007DA2 6629D0              <1> 		sub ax, dx
 10053 00007DA5 66390D[2E5A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10054 00007DAC 0F8251030000        <1> 		jb near nexticonsel
 10055 00007DB2 66391D[2E5A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10056 00007DB9 0F8744030000        <1> 		ja near nexticonsel
 10057 00007DBF 668B460A            <1> 		mov ax, [esi + 10]
 10058 00007DC3 2410                <1> 		and al, 00010000b
 10059 00007DC5 3C10                <1> 		cmp al, 00010000b
 10060 00007DC7 7448                <1> 		je nodragicon
 10061 00007DC9 8935[487C0000]      <1> 		mov [dragging], esi
 10062 00007DCF 66D1E2              <1> 		shl dx, 1
 10063 00007DD2 662B15[2C5A0000]    <1> 		sub dx, [lastmouseposition]
 10064 00007DD9 660315[305A0000]    <1> 		add dx, [mousecursorposition]
 10065 00007DE0 66D1EA              <1> 		shr dx, 1
 10066 00007DE3 66030D[325A0000]    <1> 		add cx, [mousecursorposition + 2]
 10067 00007DEA 662B0D[2E5A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10068 00007DF1 663B15[3A580000]    <1> 		cmp dx, [resolutionx2]
 10069 00007DF8 7607                <1> 		jbe chkyresdrgicn
 10070 00007DFA 668B15[305A0000]    <1> 		mov dx, [mousecursorposition]
 10071                              <1> 	chkyresdrgicn:
 10072 00007E01 663B0D[4E570000]    <1> 		cmp cx, [resolutiony]
 10073 00007E08 7607                <1> 		jbe nodragicon
 10074 00007E0A 668B0D[325A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10075                              <1> 	nodragicon:
 10076 00007E11 66814E0A0100        <1> 		or word [esi + 10], 1
 10077 00007E17 8B5E0C              <1> 		mov ebx, [esi + 12]
 10078 00007E1A 668B460A            <1> 		mov ax, [esi + 10]
 10079 00007E1E 8B7602              <1> 		mov esi, [esi + 2]
 10080 00007E21 C705[98840000]0000- <1> 		mov dword [codepointer], 0
 10081 00007E29 0000                <1>
 10082 00007E2B E8A3EDFFFF          <1> 		call showicon
 10083 00007E30 E9E7020000          <1> 		jmp doneiconsel
 10084                              <1> 	unselecticon:
 10085 00007E35 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10086 00007E3B 8B5E0C              <1> 		mov ebx, [esi + 12]
 10087 00007E3E 668B460A            <1> 		mov ax, [esi + 10]
 10088 00007E42 8B7602              <1> 		mov esi, [esi + 2]
 10089 00007E45 891D[98840000]      <1> 		mov [codepointer], ebx
 10090 00007E4B E883EDFFFF          <1> 		call showicon
 10091 00007E50 E9C7020000          <1> 		jmp doneiconsel
 10092                              <1> 	textselected:
 10093 00007E55 8B5E02              <1> 		mov ebx, [esi + 2]
 10094 00007E58 668B5606            <1> 		mov dx, [esi + 6]
 10095 00007E5C 6689D0              <1> 		mov ax, dx
 10096 00007E5F 668B4E08            <1> 		mov cx, [esi + 8]
 10097                              <1> 	lengthtesttext:
 10098 00007E63 803B00              <1> 		cmp byte [ebx], 0
 10099 00007E66 7407                <1> 		je donetesttextlength
 10100 00007E68 43                  <1> 		inc ebx
 10101 00007E69 66051000            <1> 		add ax, 16
 10102 00007E6D EBF4                <1> 		jmp lengthtesttext
 10103                              <1> 	donetesttextlength:
 10104 00007E6F 6689CB              <1> 		mov bx, cx
 10105 00007E72 6681C30F00          <1> 		add bx, 15
 10106 00007E77 813D[487C0000]0100- <1> 		cmp dword [dragging], 1
 10107 00007E7F 0000                <1>
 10108 00007E81 7468                <1> 		je dragtext
 10109 00007E83 813D[487C0000]0000- <1> 		cmp dword [dragging], 0
 10110 00007E8B 0000                <1>
 10111 00007E8D 7411                <1> 		je nodragtextcheck
 10112 00007E8F 3935[487C0000]      <1> 		cmp dword [dragging], esi
 10113 00007E95 0F8568020000        <1> 		jne near nexticonsel
 10114 00007E9B E94B000000          <1> 		jmp dragtext
 10115                              <1> 	nodragtextcheck:
 10116 00007EA0 663915[305A0000]    <1> 		cmp [mousecursorposition], dx
 10117 00007EA7 0F8256020000        <1> 		jb near nexticonsel
 10118 00007EAD 663905[305A0000]    <1> 		cmp [mousecursorposition], ax
 10119 00007EB4 0F8749020000        <1> 		ja near nexticonsel
 10120 00007EBA 66390D[325A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10121 00007EC1 0F823C020000        <1> 		jb near nexticonsel
 10122 00007EC7 66391D[325A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10123 00007ECE 0F872F020000        <1> 		ja near nexticonsel
 10124 00007ED4 668B460A            <1> 		mov ax, [esi + 10]
 10125 00007ED8 66250100            <1> 		and ax, 1
 10126 00007EDC 663D0100            <1> 		cmp ax, 1
 10127 00007EE0 0F84AB000000        <1> 		je near unselecttext
 10128 00007EE6 E986000000          <1> 		jmp nodragtext
 10129                              <1> 	dragtext:
 10130 00007EEB 663915[2C5A0000]    <1> 		cmp [lastmouseposition], dx
 10131 00007EF2 0F820B020000        <1> 		jb near nexticonsel
 10132 00007EF8 663905[2C5A0000]    <1> 		cmp [lastmouseposition], ax
 10133 00007EFF 0F87FE010000        <1> 		ja near nexticonsel
 10134 00007F05 66390D[2E5A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10135 00007F0C 0F82F1010000        <1> 		jb near nexticonsel
 10136 00007F12 66391D[2E5A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10137 00007F19 0F87E4010000        <1> 		ja near nexticonsel
 10138 00007F1F 668B460A            <1> 		mov ax, [esi + 10]
 10139 00007F23 2410                <1> 		and al, 00010000b
 10140 00007F25 663D1000            <1> 		cmp ax, 00010000b
 10141 00007F29 0F8442000000        <1> 		je near nodragtext
 10142 00007F2F 8935[487C0000]      <1> 		mov [dragging], esi
 10143 00007F35 662B15[2C5A0000]    <1> 		sub dx, [lastmouseposition]
 10144 00007F3C 660315[305A0000]    <1> 		add dx, [mousecursorposition]
 10145 00007F43 66030D[325A0000]    <1> 		add cx, [mousecursorposition + 2]
 10146 00007F4A 662B0D[2E5A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10147 00007F51 663B15[3A580000]    <1> 		cmp dx, [resolutionx2]
 10148 00007F58 7607                <1> 		jbe chkyresdrgtxt
 10149 00007F5A 668B15[305A0000]    <1> 		mov dx, [mousecursorposition]
 10150                              <1> 	chkyresdrgtxt:
 10151 00007F61 663B0D[4E570000]    <1> 		cmp cx, [resolutiony]
 10152 00007F68 7607                <1> 		jbe nodragtext
 10153 00007F6A 668B0D[325A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10154                              <1> 	nodragtext:
 10155 00007F71 66814E0A0100        <1> 		or word [esi + 10], 1
 10156 00007F77 8B5E0C              <1> 		mov ebx, [esi + 12]
 10157 00007F7A 891D[98840000]      <1> 		mov [codepointer], ebx
 10158 00007F80 668B460A            <1> 		mov ax, [esi + 10]
 10159 00007F84 8B7602              <1> 		mov esi, [esi + 2]
 10160 00007F87 E8D6F4FFFF          <1> 		call showstring
 10161 00007F8C E98B010000          <1> 		jmp doneiconsel
 10162                              <1> 	unselecttext:
 10163 00007F91 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10164 00007F97 8B5E0C              <1> 		mov ebx, [esi + 12]
 10165 00007F9A 668B460A            <1> 		mov ax, [esi + 10]
 10166 00007F9E 8B7602              <1> 		mov esi, [esi + 2]
 10167 00007FA1 C705[98840000]0000- <1> 		mov dword [codepointer], 0
 10168 00007FA9 0000                <1>
 10169 00007FAB E8B2F4FFFF          <1> 		call showstring
 10170 00007FB0 E967010000          <1> 		jmp doneiconsel
 10171                              <1> windowselect:
 10172 00007FB5 8B7E02              <1> 		mov edi, [esi + 2]
 10173 00007FB8 668B5606            <1> 		mov dx, [esi + 6]
 10174 00007FBC 6689D0              <1> 		mov ax, dx
 10175 00007FBF 668B4E08            <1> 		mov cx, [esi + 8]
 10176 00007FC3 6689CB              <1> 		mov bx, cx
 10177 00007FC6 6681C31000          <1> 		add bx, 16
 10178 00007FCB 813D[487C0000]0100- <1> 		cmp dword [dragging], 1
 10179 00007FD3 0000                <1>
 10180 00007FD5 746D                <1> 		je dragwin
 10181 00007FD7 813D[487C0000]0000- <1> 		cmp dword [dragging], 0
 10182 00007FDF 0000                <1>
 10183 00007FE1 7411                <1> 		je nodragwincheck
 10184 00007FE3 3935[487C0000]      <1> 		cmp dword [dragging], esi
 10185 00007FE9 0F8514010000        <1> 		jne near nexticonsel
 10186 00007FEF E950000000          <1> 		jmp dragwin
 10187                              <1> 	nodragwincheck:
 10188 00007FF4 663905[305A0000]    <1> 		cmp [mousecursorposition], ax
 10189 00007FFB 0F8202010000        <1> 		jb near nexticonsel
 10190 00008001 660307              <1> 		add ax, [edi]
 10191 00008004 660307              <1> 		add ax, [edi]
 10192 00008007 663905[305A0000]    <1> 		cmp [mousecursorposition], ax
 10193 0000800E 0F87EF000000        <1> 		ja near nexticonsel
 10194 00008014 66390D[325A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10195 0000801B 0F82E2000000        <1> 		jb near nexticonsel
 10196 00008021 66391D[325A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10197 00008028 0F87D5000000        <1> 		ja near nexticonsel
 10198 0000802E 662D1400            <1> 		sub ax, 20
 10199 00008032 663905[305A0000]    <1> 		cmp [mousecursorposition], ax
 10200 00008039 0F87A4000000        <1> 		ja near killwin
 10201 0000803F E98B000000          <1> 		jmp nodragwin
 10202                              <1> 	dragwin:
 10203 00008044 663905[2C5A0000]    <1> 		cmp [lastmouseposition], ax
 10204 0000804B 0F82B2000000        <1> 		jb near nexticonsel
 10205 00008051 660307              <1> 		add ax, [edi]
 10206 00008054 660307              <1> 		add ax, [edi]
 10207 00008057 663905[2C5A0000]    <1> 		cmp [lastmouseposition], ax
 10208 0000805E 0F879F000000        <1> 		ja near nexticonsel
 10209 00008064 66390D[2E5A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10210 0000806B 0F8292000000        <1> 		jb near nexticonsel
 10211 00008071 66391D[2E5A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10212 00008078 0F8785000000        <1> 		ja near nexticonsel
 10213 0000807E 8935[487C0000]      <1> 		mov [dragging], esi
 10214 00008084 803D[AC810000]01    <1> 		cmp byte [windrag], 1
 10215 0000808B 7706                <1> 		ja .nochangewindrag
 10216 0000808D FE05[AC810000]      <1> 		inc byte [windrag]
 10217                              <1> 	.nochangewindrag:
 10218 00008093 662B15[2C5A0000]    <1> 		sub dx, [lastmouseposition]
 10219 0000809A 660315[305A0000]    <1> 		add dx, [mousecursorposition]
 10220 000080A1 66030D[325A0000]    <1> 		add cx, [mousecursorposition + 2]
 10221 000080A8 662B0D[2E5A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10222 000080AF 663B15[3A580000]    <1> 		cmp dx, [resolutionx2]
 10223 000080B6 7607                <1> 		jbe chkyresdrgwin
 10224 000080B8 668B15[305A0000]    <1> 		mov dx, [mousecursorposition]
 10225                              <1> 	chkyresdrgwin:
 10226 000080BF 663B0D[4E570000]    <1> 		cmp cx, [resolutiony]
 10227 000080C6 7607                <1> 		jbe nodragwin
 10228 000080C8 668B0D[325A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10229                              <1> 	nodragwin:
 10230 000080CF 8B5E0C              <1> 		mov ebx, [esi + 12]
 10231 000080D2 668B460A            <1> 		mov ax, [esi + 10]
 10232 000080D6 8B7602              <1> 		mov esi, [esi + 2]
 10233 000080D9 E811F6FFFF          <1> 		call showwindow
 10234 000080DE E939000000          <1> 		jmp doneiconsel
 10235                              <1> 	killwin:
 10236 000080E3 66C7060000          <1> 		mov word [esi], 0
 10237 000080E8 C605[B7230000]00    <1> 		mov byte [termguion], 0
 10238 000080EF E8E0ECFFFF          <1> 		call guiclear
 10239 000080F4 E82BEDFFFF          <1> 		call reloadallgraphics
 10240 000080F9 E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10241 000080FE E94EE6FFFF          <1> 		jmp guistart
 10242                              <1> 	nexticonsel:
 10243 00008103 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10244 00008109 81C610000000        <1> 		add esi, 16
 10245 0000810F 81FE[7DBE0300]      <1> 		cmp esi, graphicstableend
 10246 00008115 7305                <1> 		jae doneiconsel
 10247 00008117 E9ADFBFFFF          <1> 		jmp clicon2
 10248                              <1> 	doneiconsel:
 10249 0000811C 813D[487C0000]0100- <1> 		cmp dword [dragging], 1
 10250 00008124 0000                <1>
 10251 00008126 731A                <1> 		jae doneiconsel2
 10252 00008128 A2[AC810000]        <1> 		mov [windrag], al
 10253 0000812D 813D[98840000]0000- <1> 		cmp dword [codepointer], 0
 10254 00008135 0000                <1>
 10255 00008137 7409                <1> 		je doneiconsel2
 10256 00008139 8B1D[98840000]      <1> 		mov ebx, [codepointer]
 10257 0000813F FFD3                <1> 		call ebx
 10258 00008141 C3                  <1> 		ret
 10259                              <1> 	doneiconsel2:
 10260 00008142 A0[415B0000]        <1> 		mov al, [LBUTTON]
 10261 00008147 A2[467C0000]        <1> 		mov [pLBUTTON], al
 10262 0000814C A0[425B0000]        <1> 		mov al, [RBUTTON]
 10263 00008151 A2[477C0000]        <1> 		mov [pRBUTTON], al
 10264 00008156 813D[487C0000]0100- <1> 		cmp dword [dragging], 1
 10265 0000815E 0000                <1>
 10266 00008160 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10267 00008166 E805EAFFFF          <1> 		call switchmousepos2
 10268 0000816B 803D[AC810000]01    <1> 		cmp byte [windrag], 1
 10269 00008172 7305                <1> 		jae noclearcursorcl
 10270 00008174 E83FE9FFFF          <1> 		call clearmousecursor
 10271                              <1> noclearcursorcl:
 10272 00008179 E8A6ECFFFF          <1> 		call reloadallgraphics
 10273                              <1> noreloadgraphicsclick:
 10274 0000817E 30E4                <1> 		xor ah, ah
 10275 00008180 31C9                <1> 		xor ecx, ecx
 10276 00008182 31D2                <1> 		xor edx, edx
 10277 00008184 B001                <1> 		mov al, 1
 10278 00008186 668B15[305A0000]    <1> 		mov dx, [mousecursorposition]
 10279 0000818D 668B0D[325A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10280 00008194 66BBE738            <1> 		mov bx, 0011100011100111b
 10281 00008198 C605[427C0000]01    <1> 		mov byte [showcursorfonton], 1
 10282 0000819F E84AF3FFFF          <1> 		call showfontvesa
 10283 000081A4 C605[427C0000]00    <1> 		mov byte [showcursorfonton], 0
 10284 000081AB C3                  <1> 		ret
 10285 000081AC 00                  <1> windrag db 0
 10286 000081AD 00000000            <1> lastdrag dw 0,0
 10287 000081B1 00000000            <1> grpctblpos dw 0,0
 10288                              <1> 
 10289                              <1> 
 10290                              <1> 
 10291 000081B5 00<rept>            <1> grphbuf times 16 db 0
 10292                              <1> 	graphicsadd:
 10293 000081C5 BF[7DBC0300]        <1> 		mov edi, graphicstable
 10294                              <1> 	shwgrph1:
 10295 000081CA 397702              <1> 		cmp dword [edi + 2], esi
 10296 000081CD 7414                <1> 		je showgraphicsreplace2
 10297 000081CF 81C710000000        <1> 		add edi, 16
 10298 000081D5 81FF[7DBE0300]      <1> 		cmp edi, graphicstableend
 10299 000081DB 0F8337020000        <1> 		jae near showgraphicsnew
 10300 000081E1 EBE7                <1> 		jmp shwgrph1
 10301                              <1> 	showgraphicsreplace2:
 10302 000081E3 8935[B7810000]      <1> 		mov [grphbuf + 2], esi
 10303 000081E9 668915[BB810000]    <1> 		mov [grphbuf + 6], dx
 10304 000081F0 66890D[BD810000]    <1> 		mov [grphbuf + 8], cx
 10305 000081F7 891D[C1810000]      <1> 		mov [grphbuf + 12], ebx
 10306 000081FD 30FF                <1> 		xor bh, bh
 10307 000081FF 88E3                <1> 		mov bl, ah
 10308 00008201 30E4                <1> 		xor ah, ah
 10309 00008203 66A3[BF810000]      <1> 		mov [grphbuf + 10], ax	
 10310 00008209 66891D[B5810000]    <1> 		mov [grphbuf], bx
 10311 00008210 66A1[B5810000]      <1> 		mov ax, [grphbuf]
 10312 00008216 663D0100            <1> 		cmp ax, 1
 10313 0000821A 0F8419000000        <1> 		je near replaceicon
 10314 00008220 663D0200            <1> 		cmp ax, 2
 10315 00008224 0F8493000000        <1> 		je near replacestring
 10316 0000822A 663D0300            <1> 		cmp ax, 3
 10317 0000822E 0F840F010000        <1> 		je near replacewindow
 10318 00008234 E9BC010000          <1> 		jmp showgraphicsreplace
 10319                              <1> 	replaceicon:
 10320 00008239 893D[4C7C0000]      <1> 		mov [lastpos], edi
 10321 0000823F 8935[507C0000]      <1> 		mov [lastpos + 4], esi
 10322 00008245 8B7702              <1> 		mov esi, [edi + 2]
 10323 00008248 668B5F0C            <1> 		mov bx, [edi + 12]
 10324 0000824C 668B5706            <1> 		mov dx, [edi + 6]
 10325 00008250 668B4F08            <1> 		mov cx, [edi + 8]
 10326 00008254 668B06              <1> 		mov ax, [esi]
 10327 00008257 66A3[547C0000]      <1> 		mov [colorbuf], ax
 10328 0000825D 66A1[206E0000]      <1> 		mov ax, [background]
 10329 00008263 668906              <1> 		mov [esi], ax
 10330 00008266 8B5F0C              <1> 		mov ebx, [edi + 12]
 10331 00008269 668B470A            <1> 		mov ax, [edi + 10]
 10332 0000826D 2401                <1> 		and al, 1
 10333 0000826F A2[9C840000]        <1> 		mov [iconselected], al
 10334 00008274 668B470A            <1> 		mov ax, [edi + 10]
 10335 00008278 E869E9FFFF          <1> 		call showicon2
 10336 0000827D 8B3D[4C7C0000]      <1> 		mov edi, [lastpos]
 10337 00008283 8B7702              <1> 		mov esi, [edi + 2]
 10338 00008286 66A1[547C0000]      <1> 		mov ax, [colorbuf]
 10339 0000828C 668906              <1> 		mov [esi], ax
 10340 0000828F 8B35[507C0000]      <1> 		mov esi, [lastpos + 4]
 10341 00008295 668B15[BB810000]    <1> 		mov dx, [grphbuf + 6]
 10342 0000829C 668B0D[BD810000]    <1> 		mov cx, [grphbuf + 8]
 10343 000082A3 668B1D[B5810000]    <1> 		mov bx, [grphbuf]
 10344 000082AA 66A1[BF810000]      <1> 		mov ax, [grphbuf + 10]
 10345 000082B0 88DC                <1> 		mov ah, bl
 10346 000082B2 8B1D[C1810000]      <1> 		mov ebx, [grphbuf + 12]
 10347 000082B8 E938010000          <1> 		jmp showgraphicsreplace
 10348                              <1> 	replacestring:
 10349 000082BD 893D[4C7C0000]      <1> 		mov [lastpos], edi
 10350 000082C3 8935[507C0000]      <1> 		mov [lastpos + 4], esi
 10351 000082C9 8B5F0C              <1> 		mov ebx, [edi + 12]
 10352 000082CC 8B7702              <1> 		mov esi, [edi + 2]
 10353 000082CF 668B5706            <1> 		mov dx, [edi + 6]
 10354 000082D3 668B4F08            <1> 		mov cx, [edi + 8]
 10355 000082D7 66A1[DD740000]      <1> 		mov ax, [colorfont2]
 10356 000082DD 66A3[547C0000]      <1> 		mov [colorbuf], ax
 10357 000082E3 66A1[206E0000]      <1> 		mov ax, [background]
 10358 000082E9 66A3[DD740000]      <1> 		mov [colorfont2], ax		
 10359 000082EF 8B5F0C              <1> 		mov ebx, [edi + 12]
 10360 000082F2 668B470A            <1> 		mov ax, [edi + 10]
 10361 000082F6 2401                <1> 		and al, 1
 10362 000082F8 A2[447C0000]        <1> 		mov [mouseselecton], al
 10363 000082FD 668B470A            <1> 		mov ax, [edi + 10]
 10364 00008301 E86FF1FFFF          <1> 		call showstring2
 10365 00008306 66A1[547C0000]      <1> 		mov ax, [colorbuf]
 10366 0000830C 66A3[DD740000]      <1> 		mov [colorfont2], ax
 10367 00008312 8B3D[4C7C0000]      <1> 		mov edi, [lastpos]
 10368 00008318 8B7702              <1> 		mov esi, [edi + 2]
 10369 0000831B 668B15[BB810000]    <1> 		mov dx, [grphbuf + 6]
 10370 00008322 668B0D[BD810000]    <1> 		mov cx, [grphbuf + 8]
 10371 00008329 668B1D[B5810000]    <1> 		mov bx, [grphbuf]
 10372 00008330 66A1[BF810000]      <1> 		mov ax, [grphbuf + 10]
 10373 00008336 88DC                <1> 		mov ah, bl
 10374 00008338 8B1D[C1810000]      <1> 		mov ebx, [grphbuf + 12]
 10375 0000833E E9B2000000          <1> 		jmp showgraphicsreplace
 10376                              <1> 	replacewindow:
 10377 00008343 893D[4C7C0000]      <1> 		mov [lastpos], edi
 10378 00008349 8935[507C0000]      <1> 		mov [lastpos + 4], esi
 10379 0000834F 8B7702              <1> 		mov esi, [edi + 2]
 10380 00008352 8B3D[D9760000]      <1> 		mov edi, [windowbufloc]
 10381 00008358 31D2                <1> 		xor edx, edx
 10382 0000835A 668B15[3A580000]    <1> 		mov dx, [resolutionx2]
 10383 00008361 C1E204              <1> 		shl edx, 4
 10384 00008364 29D7                <1> 		sub edi, edx
 10385 00008366 31D2                <1> 		xor edx, edx
 10386 00008368 668B16              <1> 		mov dx, [esi]
 10387 0000836B 660316              <1> 		add dx, [esi]
 10388 0000836E 668B4E02            <1> 		mov cx, [esi + 2]
 10389 00008372 6681C11000          <1> 		add cx, 16
 10390 00008377 66A1[206E0000]      <1> 		mov ax, [background]
 10391 0000837D 803D[AC810000]01    <1> 		cmp byte [windrag], 1
 10392 00008384 7604                <1> 		jbe clearwindow
 10393 00008386 662B4E02            <1> 		sub cx, [esi + 2]
 10394                              <1> 	clearwindow:
 10395                              <1> 		%ifdef gui.background
 10396                              <1> 			cmp dword [backgroundimage], 0
 10397                              <1> 			je .noback
 10398                              <1> 			push esi
 10399                              <1> 			mov esi, [backgroundimage]
 10400                              <1> 			sub edi, [physbaseptr]
 10401                              <1> 			add esi, edi
 10402                              <1> 			add edi, [physbaseptr]
 10403                              <1> 			mov ax, [esi]
 10404                              <1> 			pop esi
 10405                              <1> 		.noback:
 10406                              <1> 		%endif
 10407 0000838A 668907              <1> 		mov [edi], ax
 10408 0000838D 81C702000000        <1> 		add edi, 2
 10409 00008393 81EA02000000        <1> 		sub edx, 2
 10410 00008399 81FA00000000        <1> 		cmp edx, 0
 10411 0000839F 75E9                <1> 		jne clearwindow
 10412 000083A1 6649                <1> 		dec cx
 10413 000083A3 668B15[3A580000]    <1> 		mov dx, [resolutionx2]
 10414 000083AA 662B16              <1> 		sub dx, [esi]
 10415 000083AD 662B16              <1> 		sub dx, [esi]
 10416 000083B0 01D7                <1> 		add edi, edx
 10417 000083B2 668B16              <1> 		mov dx, [esi]
 10418 000083B5 660316              <1> 		add dx, [esi]
 10419 000083B8 6681F90000          <1> 		cmp cx, 0
 10420 000083BD 75CB                <1> 		jne clearwindow
 10421                              <1> 	endwindowclear:
 10422 000083BF C605[B8230000]00    <1> 		mov byte [termcopyon], 0
 10423 000083C6 8B3D[4C7C0000]      <1> 		mov edi, [lastpos]
 10424 000083CC 8B35[B7810000]      <1> 		mov esi, [grphbuf + 2]
 10425 000083D2 668B15[BB810000]    <1> 		mov dx, [grphbuf + 6]
 10426 000083D9 668B0D[BD810000]    <1> 		mov cx, [grphbuf + 8]
 10427 000083E0 668B1D[B5810000]    <1> 		mov bx, [grphbuf]
 10428 000083E7 66A1[BF810000]      <1> 		mov ax, [grphbuf + 10]
 10429 000083ED 88DC                <1> 		mov ah, bl
 10430 000083EF 8B1D[C1810000]      <1> 		mov ebx, [grphbuf + 12]
 10431                              <1> 	showgraphicsreplace:
 10432 000083F5 897702              <1> 		mov [edi + 2], esi
 10433 000083F8 66895706            <1> 		mov [edi + 6], dx
 10434 000083FC 66894F08            <1> 		mov [edi + 8], cx
 10435 00008400 895F0C              <1> 		mov [edi + 12], ebx
 10436 00008403 30FF                <1> 		xor bh, bh
 10437 00008405 88E3                <1> 		mov bl, ah
 10438 00008407 30E4                <1> 		xor ah, ah
 10439 00008409 6689470A            <1> 		mov [edi + 10], ax
 10440 0000840D 66891F              <1> 		mov [edi], bx
 10441 00008410 8B5F0C              <1> 		mov ebx, [edi + 12]
 10442 00008413 668B470A            <1> 		mov ax, [edi + 10]
 10443 00008417 C3                  <1> 		ret
 10444                              <1> 	showgraphicsnew:
 10445 00008418 BF[7DBC0300]        <1> 		mov edi, graphicstable
 10446                              <1> 	shwgrph2:
 10447 0000841D 66813F0000          <1> 		cmp word [edi], 0
 10448 00008422 74D1                <1> 		je showgraphicsreplace
 10449 00008424 81C710000000        <1> 		add edi, 16
 10450 0000842A 81FF[7DBE0300]      <1> 		cmp edi, graphicstableend
 10451 00008430 72EB                <1> 		jb shwgrph2
 10452                              <1> 	showgraphicsdone:
 10453 00008432 C3                  <1> 		ret
 10454                              <1> 	
 10455                              <1> putpixel: ;color in si, point is (dx,cx)
 10456                              <1> 		;destroys edi, ebx, eax
 10457 00008433 6650                <1> 	push ax
 10458 00008435 6653                <1> 	push bx
 10459 00008437 31C0                <1> 	xor eax, eax
 10460 00008439 31DB                <1> 	xor ebx, ebx
 10461 0000843B 31FF                <1> 	xor edi, edi
 10462 0000843D 668B1D[4E570000]    <1> 	mov bx, [resolutiony]
 10463 00008444 66A1[4C570000]      <1> 	mov ax, [resolutionx]
 10464 0000844A 6639C2              <1> 	cmp dx, ax
 10465 0000844D 7720                <1> 	ja .doneput
 10466 0000844F 66D1E0              <1> 	shl ax, 1
 10467 00008452 6639D9              <1> 	cmp cx, bx
 10468 00008455 7718                <1> 	ja .doneput
 10469 00008457 6689CB              <1> 	mov bx, cx
 10470 0000845A 52                  <1> 	push edx
 10471 0000845B F7E3                <1> 	mul ebx
 10472 0000845D 5A                  <1> 	pop edx
 10473 0000845E 6601D7              <1> 	add di, dx
 10474 00008461 6601D7              <1> 	add di, dx
 10475 00008464 01C7                <1> 	add edi, eax
 10476 00008466 033D[62570000]      <1> 	add edi, [physbaseptr]
 10477 0000846C 668937              <1> 	mov [edi], si
 10478                              <1> .doneput:
 10479 0000846F 665B                <1> 	pop bx
 10480 00008471 6658                <1> 	pop ax
 10481 00008473 C3                  <1> 	ret
 10482                              <1> 	
 10483                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10484 00008474 31FF                <1> 	xor edi, edi
 10485 00008476 31C0                <1> 	xor eax, eax
 10486 00008478 31DB                <1> 	xor ebx, ebx
 10487 0000847A 668B1D[3A580000]    <1> 	mov bx, [resolutionx2]
 10488 00008481 6689D7              <1> 	mov di, dx
 10489 00008484 6601D7              <1> 	add di, dx
 10490 00008487 6689C8              <1> 	mov ax, cx
 10491 0000848A F7E3                <1> 	mul ebx
 10492 0000848C 01C7                <1> 	add edi, eax
 10493 0000848E 033D[62570000]      <1> 	add edi, [physbaseptr]
 10494 00008494 C3                  <1> 	ret
 10495                              <1> 
 10496 00008495 00                  <1> 	mouseon db 0
 10497 00008496 0000                <1> 	icon dw 0	;pointer to icon
 10498 00008498 00000000            <1> 	codepointer dd 0 ;pointer to code
 10499 0000849C 00                  <1> 	iconselected db 0
 10500                                  %endif
 10501                                  %ifdef network.included
 10502                                  	%include "source/network.asm"
 10503                              <1> network.init:
 10504                              <1> %ifdef rtl8139.included
 10505                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10506                              <1> %endif
 10507                              <1> %ifdef rtl8169.included
 10508                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10509                              <2> ;RTL8169 NIC DRIVER
 10510                              <2> rtl8169:
 10511 0000849D E805000000          <2> 	call .init
 10512 000084A2 E969030000          <2> 	jmp .end
 10513                              <2> 
 10514                              <2> ;REGISTERS
 10515                              <2> .CMD equ 0x37
 10516                              <2> .TXPOLL equ 0x38
 10517                              <2> .TCR equ 0x40
 10518                              <2> .RCR equ 0x44
 10519                              <2> .IMR equ 0x3C
 10520                              <2> .ISR equ 0x3E
 10521                              <2> .LOCK equ 0x50
 10522                              <2> .CONFIG1 equ 0x52
 10523                              <2> .TDSAR equ 0x20
 10524                              <2> .RDSAR equ 0xE4
 10525                              <2> .MAXRX equ 0xDA
 10526                              <2> .MAXTX equ 0xEC
 10527                              <2> ;IMPORTANT VALUES
 10528                              <2> .OWN equ 0x80000000
 10529                              <2> .EOR equ 0x40000000
 10530                              <2> .POLLING equ 0x40
 10531                              <2> ;CODE
 10532                              <2> .init:	;should find card, get mac, and initialize card
 10533 000084A7 31C0                <2> 	xor eax, eax
 10534 000084A9 A2[43620000]        <2> 	mov [pcifunction], al
 10535 000084AE A2[41620000]        <2> 	mov [pcibus], al
 10536 000084B3 A2[42620000]        <2> 	mov [pcidevice], al
 10537 000084B8 B002                <2> 	mov al, 0x02 ;type code
 10538 000084BA A2[D2620000]        <2> 	mov [pcitype], al
 10539 000084BF B8EC106981          <2> 	mov eax, 0x816910EC
 10540 000084C4 A3[46620000]        <2> 	mov [pcidevid], eax
 10541 000084C9 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10542 000084CE 891D[4A620000]      <2> 	mov [pcidevidmask], ebx
 10543 000084D4 E881DDFFFF          <2> 	call getpciport
 10544 000084D9 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10545 000084DF 7501                <2> 	jne .initnic
 10546 000084E1 C3                  <2> 	ret
 10547                              <2> .initnic:
 10548 000084E2 8915[7D860000]      <2> 	mov [.basenicaddr], edx
 10549 000084E8 89D1                <2> 	mov ecx, edx
 10550 000084EA E8AEACFFFF          <2> 	call showhex	;for debugging, please remove
 10551 000084EF BE[1E7A0500]        <2> 	mov esi, rbuffstart
 10552 000084F4 B900200000          <2> 	mov ecx, 8192
 10553 000084F9 31C0                <2> 	xor eax, eax
 10554                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10555 000084FB 8806                <2> 	mov [esi], al
 10556 000084FD 46                  <2> 	inc esi
 10557 000084FE 6649                <2> 	dec cx
 10558 00008500 6681F90000          <2> 	cmp cx, 0
 10559 00008505 75F4                <2> 	jne .clearrbuff
 10560                              <2> .findmac:
 10561 00008507 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10562 0000850D BF[82860000]        <2> 	mov edi, .mac
 10563 00008512 B906000000          <2> 	mov ecx, 6
 10564                              <2> .macputloop:
 10565 00008517 EC                  <2> 	in al, dx
 10566 00008518 8807                <2> 	mov [edi], al
 10567 0000851A 47                  <2> 	inc edi
 10568 0000851B 42                  <2> 	inc edx
 10569 0000851C 49                  <2> 	dec ecx
 10570 0000851D 75F8                <2> 	jnz .macputloop
 10571 0000851F B9[82860000]        <2> 	mov ecx, .mac
 10572 00008524 E89C030000          <2> 	call showmac
 10573 00008529 E817000000          <2> 	call .resetnic
 10574 0000852E BE[88860000]        <2> 	mov esi, .name
 10575 00008533 E8F397FFFF          <2> 	call print
 10576 00008538 BE[91860000]        <2> 	mov esi, .initmsg
 10577 0000853D E8E997FFFF          <2> 	call print
 10578 00008542 31DB                <2> 	xor ebx, ebx
 10579 00008544 C3                  <2> 	ret
 10580                              <2> .resetnic:
 10581 00008545 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10582 0000854B 81C237000000        <2> 	add edx, .CMD
 10583 00008551 B010                <2> 	mov al, 0x10
 10584 00008553 EE                  <2> 	out dx, al	;Reset
 10585                              <2> .resetnicwait:
 10586 00008554 EC                  <2> 	in al, dx
 10587 00008555 A810                <2> 	test al, 0x10
 10588 00008557 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10589 0000855D 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10590 00008563 81C250000000        <2> 	add edx, .LOCK
 10591 00008569 B0C0                <2> 	mov al, 0xC0
 10592 0000856B EE                  <2> 	out dx, al	;unlock config registers
 10593 0000856C 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10594 00008572 81C244000000        <2> 	add edx, .RCR
 10595 00008578 B80FE70000          <2> 	mov eax, 0x0000E70F
 10596 0000857D EF                  <2> 	out dx, eax	;recieve packets from all matches
 10597 0000857E 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10598 00008584 81C240000000        <2> 	add edx, .TCR
 10599 0000858A B800070003          <2> 	mov eax, 0x03000700
 10600 0000858F EF                  <2> 	out dx, eax	;set up tcr
 10601 00008590 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10602 00008596 81C2DA000000        <2> 	add edx, .MAXRX
 10603 0000859C 66B8FF1F            <2> 	mov ax, 0x1FFF
 10604 000085A0 66EF                <2> 	out dx, ax	;setup max rx size
 10605 000085A2 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10606 000085A8 81C2EC000000        <2> 	add edx, .MAXTX
 10607 000085AE B03B                <2> 	mov al, 0x3B
 10608 000085B0 EE                  <2> 	out dx, al	;setup max tx size
 10609 000085B1 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10610 000085B7 81C220000000        <2> 	add edx, .TDSAR
 10611 000085BD A1[41020000]        <2> 	mov eax, [basecache]
 10612 000085C2 C1E004              <2> 	shl eax, 4
 10613 000085C5 05[00870000]        <2> 	add eax, .txdesc
 10614 000085CA EF                  <2> 	out dx, eax
 10615 000085CB 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10616 000085D1 81C2E4000000        <2> 	add edx, .RDSAR
 10617 000085D7 A1[41020000]        <2> 	mov eax, [basecache]
 10618 000085DC C1E004              <2> 	shl eax, 4
 10619 000085DF 05[00880000]        <2> 	add eax, .rxdesc
 10620 000085E4 EF                  <2> 	out dx, eax
 10621 000085E5 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10622 000085EB 81C237000000        <2> 	add edx, .CMD
 10623 000085F1 B00C                <2> 	mov al, 0x0C
 10624 000085F3 EE                  <2> 	out dx, al	;use transmit and receive
 10625 000085F4 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10626 000085FA 81C250000000        <2> 	add edx, .LOCK
 10627 00008600 30C0                <2> 	xor al, al
 10628 00008602 EE                  <2> 	out dx, al
 10629 00008603 C605[81860000]01    <2> 	mov byte [.nicconfig], 1
 10630 0000860A C3                  <2> 	ret
 10631                              <2> 	
 10632                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10633 0000860B 803D[81860000]01    <2> 	cmp byte [.nicconfig], 1
 10634 00008612 7412                <2> 	je .sendcachedata
 10635 00008614 56                  <2> 	push esi
 10636 00008615 57                  <2> 	push edi
 10637 00008616 E88CFEFFFF          <2> 	call .init
 10638 0000861B 5F                  <2> 	pop edi
 10639 0000861C 5E                  <2> 	pop esi
 10640 0000861D 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10641 00008623 75E6                <2> 	jne .sendpacket
 10642 00008625 C3                  <2> 	ret
 10643                              <2> .sendcachedata:
 10644 00008626 8B0D[82860000]      <2> 	mov ecx, [.mac]
 10645 0000862C 894F06              <2> 	mov [edi + 6], ecx
 10646 0000862F 668B0D[86860000]    <2> 	mov cx, [.mac + 4]
 10647 00008636 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10648 0000863A A1[41020000]        <2> 	mov eax, [basecache]
 10649 0000863F C1E004              <2> 	shl eax, 4
 10650 00008642 01F8                <2> 	add eax, edi
 10651 00008644 A3[08870000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10652 00008649 29FE                <2> 	sub esi, edi
 10653 0000864B 668935[00870000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10654 00008652 810D[00870000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10655 0000865A 0080                <2>
 10656 0000865C 8B15[7D860000]      <2> 	mov edx, [.basenicaddr]
 10657 00008662 81C238000000        <2> 	add edx, .TXPOLL
 10658 00008668 B040                <2> 	mov al, .POLLING
 10659 0000866A EE                  <2> 	out dx, al	;set up TX Polling
 10660                              <2> .sendloop:
 10661 0000866B A1[00870000]        <2> 	mov eax, [.txdesc]
 10662 00008670 2500000080          <2> 	and eax, .OWN
 10663 00008675 3D00000080          <2> 	cmp eax, .OWN
 10664 0000867A 74EF                <2> 	je .sendloop
 10665 0000867C C3                  <2> 	ret
 10666                              <2> 	
 10667 0000867D 00000000            <2> .basenicaddr dd 0
 10668 00008681 00                  <2> .nicconfig db 0
 10669 00008682 000000000000        <2> .mac db 0,0,0,0,0,0
 10670 00008688 52544C383136392000  <2> .name db "RTL8169 ",0
 10671 00008691 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10672 0000869A 65640A00            <2>
 10673 0000869E 90<rept>            <2> align 256, nop
 10674                              <2> .txdesc:
 10675 00008700 00000040            <2> 	dd .EOR	;command
 10676 00008704 00000000            <2> 	dd 0	;vlan
 10677 00008708 00000000            <2> 	dd 0	;low buf
 10678 0000870C 00000000            <2> 	dd 0	;high buf
 10679 00008710 90<rept>            <2> align 256, nop
 10680                              <2> .rxdesc:
 10681 00008800 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10682 00008804 00000000            <2> 	dd 0	;vlan
 10683 00008808 [1E7A0500]          <2> 	dd rbuffstart	;low buf
 10684 0000880C 00000000            <2> 	dd 0	;high buf
 10685                              <2> .end:
 10686                              <1> %endif
 10687                              <1> %ifdef ne2000.included
 10688                              <1> 	%include "source/drivers/network/ne2000.asm"
 10689                              <1> %endif
 10690                              <1> %ifdef i8254x.included
 10691                              <1> 	%include "source/drivers/network/i8254x.asm"
 10692                              <1> %endif
 10693 00008810 C3                  <1> 	ret
 10694                              <1> 
 10695                              <1> sendpacket: ;packet start in edi, end in esi
 10696                              <1> 	%ifdef rtl8139.included
 10697                              <1> 		push edi
 10698                              <1> 		push esi
 10699                              <1> 		call rtl8139.sendpacket
 10700                              <1> 		pop esi
 10701                              <1> 		pop edi
 10702                              <1> 	%endif
 10703                              <1> 	%ifdef rtl8169.included
 10704 00008811 57                  <1> 		push edi
 10705 00008812 56                  <1> 		push esi
 10706 00008813 E8F3FDFFFF          <1> 		call rtl8169.sendpacket
 10707 00008818 5E                  <1> 		pop esi
 10708 00008819 5F                  <1> 		pop edi
 10709                              <1> 	%endif
 10710                              <1> 	%ifdef ne2000.included
 10711                              <1> 		push edi
 10712                              <1> 		push esi
 10713                              <1> 		call ne2000.sendpacket
 10714                              <1> 		pop esi
 10715                              <1> 		pop edi
 10716                              <1> 	%endif
 10717                              <1> 	%ifdef i8254x.included
 10718                              <1> 		call i8254x.sendpacket
 10719                              <1> 	%endif
 10720 0000881A C3                  <1> 	ret
 10721                              <1> 
 10722                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10723 0000881B 31C0                <1> 	xor eax, eax
 10724 0000881D 31DB                <1> 	xor ebx, ebx
 10725 0000881F 31C9                <1> 	xor ecx, ecx
 10726                              <1> .lp:
 10727 00008821 8A07                <1> 	mov al, [edi]
 10728 00008823 8A6701              <1> 	mov ah, [edi + 1]
 10729 00008826 01C3                <1> 	add ebx, eax
 10730 00008828 81C702000000        <1> 	add edi, 2
 10731 0000882E 39F7                <1> 	cmp edi, esi
 10732 00008830 72EF                <1> 	jb .lp
 10733 00008832 66B9FFFF            <1> 	mov cx, 0xFFFF
 10734 00008836 6689D8              <1> 	mov ax, bx
 10735 00008839 C1EB10              <1> 	shr ebx, 16
 10736 0000883C 6601D8              <1> 	add ax, bx
 10737 0000883F 6629C1              <1> 	sub cx, ax
 10738 00008842 C3                  <1> 	ret
 10739                              <1> 	
 10740                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10741 00008843 31DB                <1> 	xor ebx, ebx
 10742 00008845 31C9                <1> 	xor ecx, ecx
 10743 00008847 31D2                <1> 	xor edx, edx
 10744                              <1> .mlp:
 10745 00008849 89F7                <1> 	mov edi, esi
 10746 0000884B 4F                  <1> 	dec edi
 10747                              <1> .lp:
 10748 0000884C 47                  <1> 	inc edi
 10749 0000884D 8A07                <1> 	mov al, [edi]
 10750 0000884F 3C20                <1> 	cmp al, " "
 10751 00008851 7408                <1> 	je .dnlp
 10752 00008853 3C00                <1> 	cmp al, 0
 10753 00008855 7404                <1> 	je .dnlp
 10754 00008857 3C2E                <1> 	cmp al, "."
 10755 00008859 75F1                <1> 	jne .lp
 10756                              <1> .dnlp:
 10757 0000885B 30C0                <1> 	xor al, al
 10758 0000885D 8807                <1> 	mov [edi], al
 10759 0000885F 53                  <1> 	push ebx
 10760 00008860 56                  <1> 	push esi
 10761 00008861 57                  <1> 	push edi
 10762 00008862 31FF                <1> 	xor edi, edi
 10763 00008864 E8E0AAFFFF          <1> 	call cnvrttxt
 10764 00008869 5E                  <1> 	pop esi
 10765 0000886A 5F                  <1> 	pop edi ;i intentionally switch them
 10766 0000886B 5B                  <1> 	pop ebx
 10767 0000886C 46                  <1> 	inc esi
 10768 0000886D BF[85880000]        <1> 	mov edi, ipstr
 10769 00008872 880C1F              <1> 	mov [edi + ebx], cl
 10770 00008875 43                  <1> 	inc ebx
 10771 00008876 81FB04000000        <1> 	cmp ebx, 4
 10772 0000887C 72CB                <1> 	jb .mlp
 10773 0000887E 8B0D[85880000]      <1> 	mov ecx, [ipstr]
 10774 00008884 C3                  <1> 	ret
 10775 00008885 00000000            <1> ipstr dd 0
 10776                              <1> showip: 	;put the ip address in ecx
 10777 00008889 89C8                <1> 	mov eax, ecx
 10778 0000888B 30DB                <1> 	xor bl, bl
 10779                              <1> .lp:
 10780 0000888D 3C00                <1> 	cmp al, 0
 10781 0000888F 750B                <1> 	jne .nozeroprint
 10782 00008891 B030                <1> 	mov al, "0"
 10783 00008893 50                  <1> 	push eax
 10784 00008894 E8209BFFFF          <1> 	call prcharq
 10785 00008899 58                  <1> 	pop eax
 10786 0000889A 30C0                <1> 	xor al, al
 10787                              <1> .nozeroprint:
 10788 0000889C 31C9                <1> 	xor ecx, ecx
 10789 0000889E 88C1                <1> 	mov cl, al
 10790 000088A0 E8C2A9FFFF          <1> 	call showdec
 10791 000088A5 C1E808              <1> 	shr eax, 8
 10792 000088A8 FEC3                <1> 	inc bl
 10793 000088AA 80FB04              <1> 	cmp bl, 4
 10794 000088AD 7312                <1> 	jae .done
 10795 000088AF 50                  <1> 	push eax
 10796 000088B0 6653                <1> 	push bx
 10797 000088B2 BE[C2880000]        <1> 	mov esi, .dot
 10798 000088B7 E86F94FFFF          <1> 	call print
 10799 000088BC 665B                <1> 	pop bx
 10800 000088BE 58                  <1> 	pop eax
 10801 000088BF EBCC                <1> 	jmp .lp
 10802                              <1> .done:
 10803 000088C1 C3                  <1> 	ret
 10804 000088C2 082E00              <1> .dot db 8,".",0
 10805                              <1> showmac:	;mac begins in [ecx]
 10806 000088C5 BE[15890000]        <1> 	mov esi, macprint
 10807 000088CA 89CF                <1> 	mov edi, ecx
 10808 000088CC 81C106000000        <1> 	add ecx, 6
 10809                              <1> showmacloop:
 10810 000088D2 8A07                <1> 	mov al, [edi]
 10811 000088D4 8A27                <1> 	mov ah, [edi]
 10812 000088D6 C0E804              <1> 	shr al, 4
 10813 000088D9 C0E404              <1> 	shl ah, 4
 10814 000088DC C0EC04              <1> 	shr ah, 4
 10815 000088DF 0430                <1> 	add al, 48
 10816 000088E1 3C39                <1> 	cmp al, "9"
 10817 000088E3 7606                <1> 	jbe .goodal
 10818 000088E5 2C30                <1> 	sub al, 48
 10819 000088E7 2C0A                <1> 	sub al, 0xA
 10820 000088E9 0441                <1> 	add al, "A"
 10821                              <1> .goodal:
 10822 000088EB 80C430              <1> 	add ah, 48
 10823 000088EE 80FC39              <1> 	cmp ah, "9"
 10824 000088F1 7609                <1> 	jbe .goodah
 10825 000088F3 80EC30              <1> 	sub ah, 48
 10826 000088F6 80EC0A              <1> 	sub ah, 0xA
 10827 000088F9 80C441              <1> 	add ah, "A"
 10828                              <1> .goodah:
 10829 000088FC 668906              <1> 	mov [esi], ax
 10830 000088FF 81C603000000        <1> 	add esi, 3
 10831 00008905 47                  <1> 	inc edi
 10832 00008906 39CF                <1> 	cmp edi, ecx
 10833 00008908 72C8                <1> 	jb showmacloop
 10834 0000890A BE[15890000]        <1> 	mov esi, macprint
 10835 0000890F E81794FFFF          <1> 	call print
 10836 00008914 C3                  <1> 	ret
 10837                              <1> 	
 10838 00008915 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10839 0000891E 30303A30303A303020- <1>
 10840 00008927 00                  <1>
 10841 00008928 00000000            <1> ethernetend dw 0,0
 10842 0000892C C0A80002            <1> sysip db 192,168,0,2
 10843 00008930 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10844                                  %endif
 10845                                      %include "source/data.asm"
 10846 00008936 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10847 0000893E 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10848 00008946 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10849 0000894F 6E640A00            <1>
 10850 00008953 757365726E616D653A- <1> 	userask db "username:",0
 10851 0000895C 00                  <1>
 10852 0000895D 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10853 00008966 00                  <1>
 10854 00008967 40                  <1> 	computer db "@"
 10855                              <1> %ifdef io.serial
 10856                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10857                              <1> %else
 10858 00008968 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10859 00008971 00                  <1>
 10860                              <1> %endif
 10861 00008972 5D242000            <1> 	endprompt db "]$ ",0
 10862 00008976 0D                  <1> 	crlf 	db  13
 10863 00008977 0A00                <1> 	line	db	10,0
 10864                              <1> 	userlst:
 10865 00008979 726F6F7400          <1> 			db "root",0
 10866 0000897E 617765736F6D65706F- <1> 			db "awesomepower",0
 10867 00008987 77657200            <1>
 10868 0000898B 7573657200          <1> 			db "user",0
 10869 00008990 70617373776F726400  <1> 			db "password",0
 10870 00008999 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10871 0000899B 00                  <1> 			db 0
 10872                              <1> 	userlstend:
 10873                              <1> 	
 10874 0000899C 00                  <1> 	guion db 0
 10875 0000899D 00                  <1> 	DriveNumber db 0
 10876 0000899E 00000000            <1> 	lbaad dd 0
 10877 000089A2 00<rept>            <1> 	memlistbuf times 576 db 0
 10878 00008BE2 00000000            <1> 	memlistend: dd 0
 10879                              <1> %ifdef io.serial
 10880                              <1> %else
 10881 00008BE2 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10882                              <1> fontend:
 10883                              <1> %endif
 10884                              <1> osend:	;this is the end of the operating system's space on disk
 10885                                  %ifdef disk.none
 10886                                  	diskfileindex:
 10887                                  	enddiskfileindex:
 10888                                  	align 512, db 0
 10889                                      %include "source/bss.asm"
 10890                                  %else
 10891                                      %include "build/fileindex.asm"
 10892                              <1> diskfileindex:
 10893 00038BE6 617267746573742E65- <1> db "argtest.elf",0
 10894 00038BEF 6C6600              <1>
 10895 00038BF2 C7010000            <1> dd (f0-$$)/512
 10896 00038BF6 06010000            <1> dd (f1-f0)/512
 10897 00038BFA 6261636B67726F756E- <1> db "background.bmp",0
 10898 00038C03 642E626D7000        <1>
 10899 00038C09 CD020000            <1> dd (f1-$$)/512
 10900 00038C0D 01140000            <1> dd (f2-f1)/512
 10901 00038C11 626F6F742E736800    <1> db "boot.sh",0
 10902 00038C19 CE160000            <1> dd (f2-$$)/512
 10903 00038C1D 01000000            <1> dd (f3-f2)/512
 10904 00038C21 63686172746573742E- <1> db "chartest.elf",0
 10905 00038C2A 656C6600            <1>
 10906 00038C2E CF160000            <1> dd (f3-$$)/512
 10907 00038C32 26010000            <1> dd (f4-f3)/512
 10908 00038C36 646F73746573742E63- <1> db "dostest.com",0
 10909 00038C3F 6F6D00              <1>
 10910 00038C42 F5170000            <1> dd (f4-$$)/512
 10911 00038C46 01000000            <1> dd (f5-f4)/512
 10912 00038C4A 6578656300          <1> db "exec",0
 10913 00038C4F F6170000            <1> dd (f5-$$)/512
 10914 00038C53 01000000            <1> dd (f6-f5)/512
 10915 00038C57 66696E616C636F756E- <1> db "finalcount.sn",0
 10916 00038C60 742E736E00          <1>
 10917 00038C65 F7170000            <1> dd (f6-$$)/512
 10918 00038C69 01000000            <1> dd (f7-f6)/512
 10919 00038C6D 666F726B00          <1> db "fork",0
 10920 00038C72 F8170000            <1> dd (f7-$$)/512
 10921 00038C76 01000000            <1> dd (f8-f7)/512
 10922 00038C7A 677261766974792E65- <1> db "gravity.elf",0
 10923 00038C83 6C6600              <1>
 10924 00038C86 F9170000            <1> dd (f8-$$)/512
 10925 00038C8A E0000000            <1> dd (f9-f8)/512
 10926 00038C8E 6775697465737400    <1> db "guitest",0
 10927 00038C96 D9180000            <1> dd (f9-$$)/512
 10928 00038C9A 03000000            <1> dd (f10-f9)/512
 10929 00038C9E 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10930 00038CA7 642E656C6600        <1>
 10931 00038CAD DC180000            <1> dd (f10-$$)/512
 10932 00038CB1 D7010000            <1> dd (f11-f10)/512
 10933 00038CB5 696E7400            <1> db "int",0
 10934 00038CB9 B31A0000            <1> dd (f11-$$)/512
 10935 00038CBD 01000000            <1> dd (f12-f11)/512
 10936 00038CC1 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10937 00038CCA 2E736E00            <1>
 10938 00038CCE B41A0000            <1> dd (f12-$$)/512
 10939 00038CD2 01000000            <1> dd (f13-f12)/512
 10940 00038CD6 6D6172696F2E736E00  <1> db "mario.sn",0
 10941 00038CDF B51A0000            <1> dd (f13-$$)/512
 10942 00038CE3 01000000            <1> dd (f14-f13)/512
 10943 00038CE7 6D6F6D656E742E7761- <1> db "moment.wav",0
 10944 00038CF0 7600                <1>
 10945 00038CF2 B61A0000            <1> dd (f14-$$)/512
 10946 00038CF6 34040000            <1> dd (f15-f14)/512
 10947 00038CFA 70692E656C6600      <1> db "pi.elf",0
 10948 00038D01 EA1E0000            <1> dd (f15-$$)/512
 10949 00038D05 1F010000            <1> dd (f16-f15)/512
 10950 00038D09 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10951 00038D12 626D7000            <1>
 10952 00038D16 09200000            <1> dd (f16-$$)/512
 10953 00038D1A B0020000            <1> dd (f17-f16)/512
 10954 00038D1E 736F6C6C65726F732E- <1> db "solleros.txt",0
 10955 00038D27 74787400            <1>
 10956 00038D2B B9220000            <1> dd (f17-$$)/512
 10957 00038D2F 01000000            <1> dd (f18-f17)/512
 10958 00038D33 736F6E676F74696D65- <1> db "songotime.sn",0
 10959 00038D3C 2E736E00            <1>
 10960 00038D40 BA220000            <1> dd (f18-$$)/512
 10961 00038D44 01000000            <1> dd (f19-f18)/512
 10962 00038D48 73736500            <1> db "sse",0
 10963 00038D4C BB220000            <1> dd (f19-$$)/512
 10964 00038D50 02000000            <1> dd (f20-f19)/512
 10965 00038D54 737464696F74657374- <1> db "stdiotest.elf",0
 10966 00038D5D 2E656C6600          <1>
 10967 00038D62 BD220000            <1> dd (f20-$$)/512
 10968 00038D66 27010000            <1> dd (f21-f20)/512
 10969 00038D6A 74656C7900          <1> db "tely",0
 10970 00038D6F E4230000            <1> dd (f21-$$)/512
 10971 00038D73 01000000            <1> dd (f22-f21)/512
 10972 00038D77 74696D65746573742E- <1> db "timetest.elf",0
 10973 00038D80 656C6600            <1>
 10974 00038D84 E5230000            <1> dd (f22-$$)/512
 10975 00038D88 04010000            <1> dd (f23-f22)/512
 10976 00038D8C 7475746F7269616C2E- <1> db "tutorial.sh",0
 10977 00038D95 736800              <1>
 10978 00038D98 E9240000            <1> dd (f23-$$)/512
 10979 00038D9C 03000000            <1> dd (f24-f23)/512
 10980 00038DA0 756E667300          <1> db "unfs",0
 10981 00038DA5 EC240000            <1> dd (f24-$$)/512
 10982 00038DA9 02000000            <1> dd (f25-f24)/512
 10983 00038DAD 7574662D382E747874- <1> db "utf-8.txt",0
 10984 00038DB6 00                  <1>
 10985 00038DB7 EE240000            <1> dd (f25-$$)/512
 10986 00038DBB 02000000            <1> dd (f26-f25)/512
 10987 00038DBF 766963746F72792E77- <1> db "victory.wav",0
 10988 00038DC8 617600              <1>
 10989 00038DCB F0240000            <1> dd (f26-$$)/512
 10990 00038DCF 16000000            <1> dd (f27-f26)/512
 10991 00038DD3 5F696D672E62696E00  <1> db "_img.bin",0
 10992 00038DDC 06250000            <1> dd (f27-$$)/512
 10993 00038DE0 D7020000            <1> dd (f28-f27)/512
 10994                              <1> enddiskfileindex:
 10995                              <1> 
 10996                                      %include "source/bss.asm"
 10997                              <1> align 4, nop
 10998                              <1> bssstart: equ $
 10999                              <1> bsscopy equ $
 11000                              <1> initialstack equ bsscopy
 11001                              <1> stackend equ initialstack + 4000
 11002                              <1> sigtable equ stackend + 96
 11003                              <1> fileindex: equ sigtable + 4
 11004                              <1> fileindexend: equ fileindex + 1024
 11005                              <1> previousstack equ fileindexend
 11006                              <1> lastfolderloc equ previousstack + 4
 11007                              <1> currentfolderloc equ lastfolderloc + 4
 11008                              <1> currentfolder equ currentfolderloc + 4
 11009                              <1> currentfolderend equ currentfolder + 512
 11010                              <1> uid equ currentfolderend
 11011                              <1> ranboot equ uid + 4
 11012                              <1> IFON equ ranboot + 1
 11013                              <1> IFTRUE equ IFON + 1
 11014                              <1> BATCHPOS equ IFTRUE + 100
 11015                              <1> BATCHISON equ BATCHPOS + 4
 11016                              <1> LOOPON equ BATCHISON + 1
 11017                              <1> LOOPPOS	equ LOOPON + 1
 11018                              <1> variables: equ LOOPPOS + 4
 11019                              <1> varend: equ variables + 4096
 11020                              <1> buftxt2: equ varend
 11021                              <1> buftxt: equ buftxt2 + 1024
 11022                              <1> buftxtend: equ buftxt + 1024
 11023                              <1> buf2: equ buftxtend
 11024                              <1> numbuf: equ buf2 + 20
 11025                              <1> %ifdef io.serial
 11026                              <1> 	lastcommandpos equ numbuf + 1
 11027                              <1> %else
 11028                              <1> 	%ifdef gui.included
 11029                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11030                              <1> 		graphicstableend equ graphicstable + 200h
 11031                              <1> 		%ifdef gui.background
 11032                              <1> 			backgroundbuffer equ graphicstableend
 11033                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11034                              <1> 			mousecolorbuf equ backgroundbufferend
 11035                              <1> 		%else
 11036                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11037                              <1> 		%endif
 11038                              <1> 		mcolorend equ mousecolorbuf + 256
 11039                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11040                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11041                              <1> 		videobuf2 equ videobufend
 11042                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11043                              <1> 	%else
 11044                              <1> 		videobuf equ numbuf + 1
 11045                              <1> 		videobufend equ videobuf + 80*30*4
 11046                              <1> 		videobuf2 equ videobufend
 11047                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11048                              <1> 	%endif
 11049                              <1> 	lastcommandpos: equ videobuf2end
 11050                              <1> %endif
 11051                              <1> 	commandbufpos: equ lastcommandpos + 4
 11052                              <1> 	commandlistentries: equ commandbufpos + 4
 11053                              <1> 	commandsentered: equ commandlistentries + 4
 11054                              <1> 	commandbuf: equ commandsentered + 4
 11055                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11056                              <1> %ifdef network.included
 11057                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11058                              <1> 	rbuffend equ rbuffstart + 8212
 11059                              <1> %else
 11060                              <1> 	rbuffstart equ commandbufend
 11061                              <1> 	rbuffend equ commandbufend
 11062                              <1> %endif
 11063                              <1> %ifdef threads.included
 11064                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11065                              <1> 	threadlistend: equ threadlist + 1024*4
 11066                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11067                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11068                              <1> 	bssend equ stack1 + 1024*1024
 11069                              <1> %else
 11070                              <1> 	bssend equ rbuffend
 11071                              <1> %endif
 11072                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11073                                      %include "build/files.asm"
 11074 00038DE4 00<rept>            <1> align 512,db 0
 11075                              <1> f0:
 11076 00038DE4 <incbin>            <1> incbin "included/argtest.elf"
 11077 00059937 00<rept>            <1> align 512,db 0
 11078                              <1> f1:
 11079 00059937 <incbin>            <1> incbin "included/background.bmp"
 11080 002D9A46 00<rept>            <1> align 512,db 0
 11081                              <1> f2:
 11082 002D9A46 <incbin>            <1> incbin "included/boot.sh"
 11083 002D9CFD 00<rept>            <1> align 512,db 0
 11084                              <1> f3:
 11085 002D9CFD <incbin>            <1> incbin "included/chartest.elf"
 11086 002FE924 00<rept>            <1> align 512,db 0
 11087                              <1> f4:
 11088 002FE924 <incbin>            <1> incbin "included/dostest.com"
 11089 002FEB31 00<rept>            <1> align 512,db 0
 11090                              <1> f5:
 11091 002FEB31 <incbin>            <1> incbin "included/exec"
 11092 002FECE1 00<rept>            <1> align 512,db 0
 11093                              <1> f6:
 11094 002FECE1 <incbin>            <1> incbin "included/finalcount.sn"
 11095 002FEF02 00<rept>            <1> align 512,db 0
 11096                              <1> f7:
 11097 002FEF02 <incbin>            <1> incbin "included/fork"
 11098 002FF158 00<rept>            <1> align 512,db 0
 11099                              <1> f8:
 11100 002FF158 <incbin>            <1> incbin "included/gravity.elf"
 11101 0031B11E 00<rept>            <1> align 512,db 0
 11102                              <1> f9:
 11103 0031B11E <incbin>            <1> incbin "included/guitest"
 11104 0031B62B 00<rept>            <1> align 512,db 0
 11105                              <1> f10:
 11106 0031B62B <incbin>            <1> incbin "included/helloworld.elf"
 11107 00356428 00<rept>            <1> align 512,db 0
 11108                              <1> f11:
 11109 00356428 <incbin>            <1> incbin "included/int"
 11110 003567AF 00<rept>            <1> align 512,db 0
 11111                              <1> f12:
 11112 003567AF <incbin>            <1> incbin "included/lostwoods.sn"
 11113 00356856 00<rept>            <1> align 512,db 0
 11114                              <1> f13:
 11115 00356856 <incbin>            <1> incbin "included/mario.sn"
 11116 00356A3A 00<rept>            <1> align 512,db 0
 11117                              <1> f14:
 11118 00356A3A <incbin>            <1> incbin "included/moment.wav"
 11119 003DD21A 00<rept>            <1> align 512,db 0
 11120                              <1> f15:
 11121 003DD21A <incbin>            <1> incbin "included/pi.elf"
 11122 00401172 00<rept>            <1> align 512,db 0
 11123                              <1> f16:
 11124 00401172 <incbin>            <1> incbin "included/solleros.bmp"
 11125 004571E6 00<rept>            <1> align 512,db 0
 11126                              <1> f17:
 11127 004571E6 <incbin>            <1> incbin "included/solleros.txt"
 11128 00457374 00<rept>            <1> align 512,db 0
 11129                              <1> f18:
 11130 00457374 <incbin>            <1> incbin "included/songotime.sn"
 11131 0045744A 00<rept>            <1> align 512,db 0
 11132                              <1> f19:
 11133 0045744A <incbin>            <1> incbin "included/sse"
 11134 004578A8 00<rept>            <1> align 512,db 0
 11135                              <1> f20:
 11136 004578A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11137 0047C688 00<rept>            <1> align 512,db 0
 11138                              <1> f21:
 11139 0047C688 <incbin>            <1> incbin "included/tely"
 11140 0047C9BA 00<rept>            <1> align 512,db 0
 11141                              <1> f22:
 11142 0047C9BA <incbin>            <1> incbin "included/timetest.elf"
 11143 0049D082 00<rept>            <1> align 512,db 0
 11144                              <1> f23:
 11145 0049D082 <incbin>            <1> incbin "included/tutorial.sh"
 11146 0049D752 00<rept>            <1> align 512,db 0
 11147                              <1> f24:
 11148 0049D752 <incbin>            <1> incbin "included/unfs"
 11149                              <1> align 512,db 0
 11150                              <1> f25:
 11151 0049D752 <incbin>            <1> incbin "included/utf-8.txt"
 11152 0049DFC8 00<rept>            <1> align 512,db 0
 11153                              <1> f26:
 11154 0049DFC8 <incbin>            <1> incbin "included/victory.wav"
 11155 004A0B48 00<rept>            <1> align 512,db 0
 11156                              <1> f27:
 11157 004A0B48 <incbin>            <1> incbin "included/_img.bin"
 11158                              <1> align 512,db 0
 11159                              <1> f28:
 11160                                  %endif
