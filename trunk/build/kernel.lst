     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> %define terminal.vsync
    19                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    20                              <1> 
    21                              <1> %define hardware.automatic
    22                              <1> ;Automatically load the sound and network drivers.
    23                              <1> 
    24                              <1> %define threads.included
    25                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    26                              <1> 
    27                              <1> %define exceptions.included
    28                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    29                              <1> 
    30                              <1> ;%define disk.protected
    31                              <1> ;Use protected mode instead of real mode for disk access
    32                              <1> 
    33                              <1> %define disk.real
    34                              <1> ;Use real mode for disk access
    35                              <1> 
    36                              <1> %define sound.included
    37                              <1> ;This includes the sound drivers
    38                              <1> 
    39                              <1> %define network.included
    40                              <1> ;This includes the network stack
    41                              <1> 
    42                              <1> ;%define rtl8139.included
    43                              <1> ;This includes the RTL8139 drivers
    44                              <1> 
    45                              <1> %define ne2000.included
    46                              <1> ;This includes the ne2000 drivers
    47                              <1> 
    48                              <1> ;%define sector.debug
    49                              <1> ;Dump the contents of the first sector of SollerOS
    50                              <1> 
    51                              <1> ;FIX DEPENDANCIES
    52                              <1> %ifdef gui.included
    53                              <1> 	%undef io.serial
    54                              <1> %else
    55                              <1> 	%undef gui.alphablending
    56                              <1> 	%undef gui.background
    57                              <1> %endif
    58                              <1> %ifdef disk.protected
    59                              <1> 	%undef disk.real
    60                              <1> %endif
    61                              <1> %ifdef network.included
    62                              <1> 	%ifdef rtl8139.included
    63                              <1> 		%undef ne2000.included
    64                              <1> 	%endif
    65                              <1> %else
    66                              <1> 	%undef ne2000.included
    67                              <1> 	%undef rtl8139.included
    68                              <1> %endif
    69                                  [BITS 16]
    70                                      %include "source/boot.asm"
    71                              <1>     ; MENU.ASM
    72                              <1> %include 'source/signature.asm'
    73                              <2> signature:
    74 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    75 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    76 00000011 696C642000          <2>
    77 00000016 DD000000            <2> dd 221	;version number
    78                              <2> signatureend:
    79                              <1> menustart:	
    80 0000001A 8CC8                <1> 	mov ax, cs
    81 0000001C 8ED8                <1> 	mov ds, ax
    82 0000001E 8EC0                <1> 	mov es, ax
    83 00000020 8ED0                <1> 	mov ss, ax
    84 00000022 880E[298E]          <1> 	mov [DriveNumber], cl
    85 00000026 668916[2A8E]        <1> 	mov [lbaad], edx
    86                              <1> %ifdef io.serial
    87                              <1> 	call getmemorysize
    88                              <1> 	mov si, serialmsg
    89                              <1> 	call printrm
    90                              <1> 	jmp pmode
    91                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
    92                              <1> %else
    93 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    94 0000002E E95700              <1> 	jmp pmode
    95                              <1> %endif
    96                              <1> 	
    97                              <1> vgaset:
    98 00000031 B81200              <1> 	mov ax, 12h
    99 00000034 31DB                <1> 	xor bx, bx
   100 00000036 CD10                <1> 	int 10h
   101 00000038 C606[288E]00        <1> 	mov byte [guion], 0
   102 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   103 00000040 C3                  <1> 	ret
   104                              <1> 
   105                              <1> getmemorysize:
   106 00000041 BF[2E8E]            <1> 	mov di, memlistbuf
   107 00000044 6631DB              <1> 	xor ebx, ebx
   108                              <1> getmemsizeloop:
   109 00000047 66B820E80000        <1> 	mov eax, 0xE820
   110 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   111 00000053 66B918000000        <1> 	mov ecx, 24
   112 00000059 CD15                <1> 	int 0x15
   113 0000005B 81C71800            <1> 	add di, 24
   114 0000005F 81FF[6E90]          <1> 	cmp di, memlistend
   115 00000063 7309                <1> 	jae nomoregetmemsize
   116 00000065 6681FB00000000      <1> 	cmp ebx, 0
   117 0000006C 75D9                <1> 	jne getmemsizeloop
   118                              <1> nomoregetmemsize:
   119 0000006E 81EF[2E8E]          <1> 	sub di, memlistbuf
   120 00000072 893E[6E90]          <1> 	mov [memlistend], di
   121 00000076 C3                  <1> 	ret
   122                              <1> 	
   123                              <1> printrm:			; 'si' comes in with string address
   124 00000077 BB0700              <1>     mov bx,07		; write to display
   125 0000007A B40E                <1>     mov ah,0Eh		; screen function
   126 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   127 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   128 00000080 7405                <1>     je .done		; zero byte at end of string
   129 00000082 CD10                <1>     int 10h		; write character to screen.    
   130 00000084 46                  <1> 	inc si	     	; move to next character
   131 00000085 EBF5                <1>     jmp .lp		; loop
   132 00000087 C3                  <1> .done: ret
   133                                      %include "source/pmode.asm"
   134                              <1> [BITS 16]
   135                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   136                              <1> ;	16-bit real mode
   137                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   138                              <1> 
   139                              <1> pmode:
   140 00000088 6631C0              <1> 	xor eax, eax
   141 0000008B 6631DB              <1> 	xor ebx, ebx
   142 0000008E 6631C9              <1> 	xor ecx, ecx
   143 00000091 6631D2              <1> 	xor edx, edx
   144 00000094 6631F6              <1> 	xor esi, esi
   145 00000097 6631FF              <1> 	xor edi, edi
   146 0000009A BA9200              <1> 	mov dx, 0x92
   147 0000009D EC                  <1> 	in al, dx	;;A20
   148 0000009E 0C02                <1> 	or al, 2
   149 000000A0 EE                  <1> 	out dx, al
   150 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   151 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   152 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   153 000000AB A3[8803]            <1> 	mov [gdt2 + 2],ax
   154 000000AE A3[9003]            <1> 	mov [gdt3 + 2],ax
   155 000000B1 66C1E810            <1> 	shr eax,16
   156 000000B5 A2[8A03]            <1> 	mov [gdt2 + 4],al
   157 000000B8 A2[9203]            <1> 	mov [gdt3 + 4],al
   158 000000BB 8826[8D03]          <1> 	mov [gdt2 + 7],ah
   159 000000BF 8826[9503]          <1> 	mov [gdt3 + 7],ah
   160                              <1> 
   161 000000C3 66B8[6E900000]      <1> 	mov eax, initialstack
   162 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   163 000000CE A3[8003]            <1> 	mov [gdts + 2],ax
   164 000000D1 66C1E810            <1> 	shr eax, 16
   165 000000D5 A2[8203]            <1> 	mov [gdts + 4],al
   166 000000D8 8826[8503]          <1> 	mov [gdts + 7], ah
   167                              <1> 	
   168 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   169 000000E0 A3[9803]            <1> 	mov [gdt4 + 2],ax
   170 000000E3 A3[A003]            <1> 	mov [gdt5 + 2],ax
   171 000000E6 A3[A803]            <1> 	mov [gdtv8086 + 2], ax
   172 000000E9 A3[B003]            <1> 	mov [gdtv80862 + 2], ax
   173 000000EC 66C1E810            <1> 	shr eax,16
   174 000000F0 A2[9A03]            <1> 	mov [gdt4 + 4],al
   175 000000F3 A2[A203]            <1> 	mov [gdt5 + 4],al
   176 000000F6 A2[AA03]            <1> 	mov [gdtv8086 + 4],al
   177 000000F9 A2[B203]            <1> 	mov [gdtv80862 + 4],al
   178 000000FC 8826[9D03]          <1> 	mov [gdt4 + 7],ah
   179 00000100 8826[A503]          <1> 	mov [gdt5 + 7],ah
   180 00000104 8826[AD03]          <1> 	mov [gdtv8086 + 7],ah
   181 00000108 8826[B503]          <1> 	mov [gdtv80862 + 7],ah
   182                              <1> 	
   183 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   184 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   185 00000117 A3[B803]            <1> 	mov [gdtdos + 2],ax
   186 0000011A A3[C003]            <1> 	mov [gdtdos2 + 2],ax
   187 0000011D 66C1E810            <1> 	shr eax,16
   188 00000121 A2[BA03]            <1> 	mov [gdtdos + 4],al
   189 00000124 A2[C203]            <1> 	mov [gdtdos2 + 4],al
   190 00000127 8826[BD03]          <1> 	mov [gdtdos + 7],ah
   191 0000012B 8826[C503]          <1> 	mov [gdtdos2 + 7],ah
   192                              <1> 	
   193                              <1> ; fix up gdt and idt
   194 0000012F 67668D83[6E030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   195 00000137 66A3[6403]          <1> 	mov [gdtr + 2],eax
   196 0000013B 67668D83[C6030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   197 00000143 66A3[6A03]          <1> 	mov [idtr + 2],eax
   198 00000147 FA                  <1> 	cli
   199 00000148 0F0116[6203]        <1> 	lgdt [gdtr]
   200 0000014D 0F011E[6803]        <1> 	lidt [idtr]
   201 00000152 6631DB              <1> 	xor ebx, ebx
   202 00000155 8CDB                <1> 	mov bx, ds
   203 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   204 0000015C 0F20C0              <1> 	mov eax,cr0
   205 0000015F 0C01                <1> 	or al,1
   206 00000161 0F22C0              <1> 	mov cr0,eax
   207 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   208                              <1> [BITS 32]
   209                              <1> do_pm:
   210 00000169 31C0                <1> 	xor eax, eax
   211 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   212 0000016F 8ED8                <1> 	mov ds, ax
   213 00000171 8EC0                <1> 	mov es, ax
   214 00000173 8EE0                <1> 	mov fs, ax
   215 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   216 00000179 8EE8                <1> 	mov gs, ax
   217                              <1> 	
   218                              <1> copykernel:
   219 0000017B 648B06              <1> 	mov eax, [fs:esi]
   220 0000017E 658906              <1> 	mov [gs:esi], eax
   221 00000181 81C604000000        <1> 	add esi, 4
   222 00000187 81FE[6E900000]      <1> 	cmp esi, bsscopy
   223 0000018D 72EC                <1> 	jb copykernel
   224 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   225                              <1> 	
   226                              <1> done_copy:
   227 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   228 0000019A 8ED8                <1> 	mov ds, ax
   229 0000019C 8EC0                <1> 	mov es, ax
   230 0000019E 8EE0                <1> 	mov fs, ax
   231                              <1> 	;mov ax, STACK_SEL
   232 000001A0 8ED0                <1> 	mov ss, ax
   233 000001A2 BC[0EA00000]        <1> 	mov esp, stackend
   234 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   235 000001AB 8EE8                <1> 	mov gs, ax
   236                              <1> 	
   237 000001AD E8375A0000          <1> 	call initialize	;initialize drivers
   238                              <1> 	
   239 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   240 000001B7 C1E804              <1> 	shr eax, 4
   241 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   242                              <1> 	
   243 000001BF BE[54CF3900]        <1> 	mov esi, bssend
   244 000001C4 31C0                <1> 	xor eax, eax
   245                              <1> clearkernelbuffers:
   246 000001C6 8906                <1> 	mov [esi], eax
   247 000001C8 81EE04000000        <1> 	sub esi, 4
   248 000001CE 81FE[6E900000]      <1> 	cmp esi, bsscopy
   249 000001D4 77F0                <1> 	ja clearkernelbuffers
   250 000001D6 FB                  <1> 	sti
   251                              <1> 
   252                              <1> getmemoryspace:
   253 000001D7 BE[2E8E0000]        <1> 	mov esi, memlistbuf
   254 000001DC 31FF                <1> 	xor edi, edi
   255 000001DE 668B3D[6E900000]    <1> 	mov di, [memlistend]
   256 000001E5 01F7                <1> 	add edi, esi
   257 000001E7 31C0                <1> 	xor eax, eax
   258                              <1> memoryspaceaddition:
   259 000001E9 39FE                <1> 	cmp esi, edi
   260 000001EB 7322                <1> 	jae finishedmemspacecalc
   261 000001ED 81C608000000        <1> 	add esi, 8
   262 000001F3 8B0E                <1> 	mov ecx, [esi]
   263 000001F5 81C608000000        <1> 	add esi, 8
   264 000001FB 8B1E                <1> 	mov ebx, [esi]
   265 000001FD 81C608000000        <1> 	add esi, 8
   266 00000203 81FB01000000        <1> 	cmp ebx, 1
   267 00000209 75DE                <1> 	jne memoryspaceaddition
   268 0000020B 01C8                <1> 	add eax, ecx
   269 0000020D EBDA                <1> 	jmp memoryspaceaddition
   270                              <1> finishedmemspacecalc:
   271 0000020F A3[4B020000]        <1> 	mov [memoryspace], eax
   272                              <1> %ifdef gui.included
   273 00000214 803D[288E0000]00    <1> 	cmp byte [guion], 0
   274 0000021B 741C                <1> 	je normalstartup
   275 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   276 00000223 C1E304              <1> 	shl ebx, 4
   277 00000226 8B3D[C74E0000]      <1> 	mov edi, [physbaseptr]
   278 0000022C 29DF                <1> 	sub edi, ebx
   279 0000022E 893D[C74E0000]      <1> 	mov [physbaseptr], edi
   280 00000234 E9F85E0000          <1> 	jmp guiboot
   281                              <1> %endif
   282                              <1> normalstartup:
   283 00000239 E92D250000          <1> 	jmp os
   284                              <1> 	
   285 0000023E 00000000            <1> basecache dd 0
   286 00000242 00001000            <1> newcodecache dd 0x100000
   287                              <1> 
   288 00000246 00                  <1> testingcpuspeed db 0
   289 00000247 00000000            <1> cpuspeedperint dd 0
   290 0000024B 00000000            <1> memoryspace dd 0
   291 0000024F 7D0A                <1> pitdiv dw 2685
   292 00000251 2E562200            <1> timeinterval dd 2250286
   293 00000255 00000000            <1> timeseconds dd 0
   294 00000259 00000000            <1> timenanoseconds dd 0
   295 0000025D 00                  <1> soundon db 0
   296 0000025E 0000                <1> soundrepititions dw 0
   297 00000260 00000000            <1> soundpos dd 0
   298 00000264 00000000            <1> soundendpos dd 0
   299                              <1> 
   300                              <1> cpuspeedend:
   301 00000268 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   302 0000026F A3[47020000]        <1> 	mov [cpuspeedperint], eax
   303 00000274 B8[E5450000]        <1> 	mov eax, cpuspeedloopend
   304 00000279 890424              <1> 	mov [esp], eax
   305 0000027C E9D1000000          <1> 	jmp handled
   306                              <1> 
   307                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   308                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   309                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   310                              <1> 
   311                              <1> pitinterrupt: ;this controls threading
   312 00000281 FA                  <1> 	cli
   313 00000282 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   314 00000289 74DD                <1> 	je cpuspeedend
   315                              <1> 		
   316 0000028B E89B000000          <1> 	call timekeeper ;this updates the internal time
   317                              <1> 	
   318 00000290 803D[5D020000]01    <1> 	cmp byte [soundon], 1
   319 00000297 0F8409500000        <1> 	je near PCSpeakerRAW
   320                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   321                              <1> %ifdef threads.included
   322 0000029D 803D[2C610000]01    <1> 	cmp byte [threadson], 1
   323 000002A4 0F84225E0000        <1> 	je near threadswitch
   324                              <1> %endif
   325                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   326 000002AA 803D[2C610000]00    <1> 	cmp byte [threadson], 0
   327 000002B1 0F849B000000        <1> 	je near handled
   328                              <1> %ifdef io.serial
   329                              <1> 	jmp handled
   330                              <1> %else
   331 000002B7 60                  <1> 	pusha
   332 000002B8 E464                <1> 	in al, 64h
   333 000002BA A820                <1> 	test al, 20h
   334 000002BC 0F858E000000        <1> 	jnz near handled2
   335 000002C2 E460                <1> 	in al, 60h
   336 000002C4 3C01                <1> 	cmp al, 1		;escape
   337 000002C6 7405                <1> 	je userint
   338 000002C8 E983000000          <1> 	jmp handled2
   339                              <1> userint:
   340                              <1> 	;UNMASK ALL INTS
   341 000002CD 30C0                <1> 	xor al, al
   342 000002CF E621                <1> 	out 0x21, al
   343 000002D1 30C0                <1> 	xor al, al
   344 000002D3 E6A1                <1> 	out 0xA1, al
   345 000002D5 B020                <1> 	mov al, 0x20
   346 000002D7 E6A0                <1> 	out 0xA0, al
   347 000002D9 E620                <1> 	out 0x20, al
   348                              <1> 	;RESET PIT DIVISOR
   349 000002DB 66A1[4F020000]      <1> 	mov ax, [pitdiv]
   350 000002E1 E640                <1> 	out 0x40, al
   351 000002E3 66C1C008            <1> 	rol ax, 8
   352 000002E7 E640                <1> 	out 0x40, al
   353                              <1> 	;RESET PIC
   354 000002E9 B020                <1> 	mov al, 0x20
   355 000002EB E620                <1> 	out 0x20, al
   356 000002ED 61                  <1> 	popa
   357 000002EE FB                  <1> 	sti
   358 000002EF BC[0EA00000]        <1> 	mov esp, stackend ;reset stack
   359 000002F4 E9CD250000          <1> 	jmp returnfromexp
   360                              <1> %endif
   361 000002F9 0A                  <1> rtcrate db 10
   362                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   363                              <1> %ifdef io.serial
   364                              <1> %else
   365                              <1> %ifdef terminal.vsync
   366 000002FA FA                  <1> 	cli
   367 000002FB 803D[23250000]00    <1> 	cmp byte [termcopyneeded], 0
   368 00000302 7405                <1> 	je .nocopy
   369 00000304 E821220000          <1> 	call newtermcopy
   370                              <1> .nocopy
   371 00000309 50                  <1> 	push eax
   372 0000030A B00C                <1> 	mov al, 0xC
   373 0000030C E670                <1> 	out 0x70, al
   374 0000030E E471                <1> 	in al, 0x71
   375 00000310 58                  <1> 	pop eax
   376 00000311 FB                  <1> 	sti
   377                              <1> %endif
   378                              <1> %endif
   379 00000312 E942000000          <1> 	jmp handled4
   380                              <1> %ifdef rtl8139.included
   381                              <1> rtl8139.irq:
   382                              <1> 	cli
   383                              <1> 	pusha
   384                              <1> 	mov edx, [basenicaddr]
   385                              <1> 	add edx, rtl8139.ISR
   386                              <1> 	xor eax, eax
   387                              <1> 	in ax, dx
   388                              <1> 	push edx
   389                              <1> 	push eax
   390                              <1> 	mov esi, .nicmsg
   391                              <1> 	call print
   392                              <1> 	pop eax
   393                              <1> 	pop edx
   394                              <1> 	mov ecx, eax
   395                              <1> 	call showhex
   396                              <1> 	out dx, ax
   397                              <1> 	popa
   398                              <1> 	sti
   399                              <1> 	jmp handled4
   400                              <1> .nicmsg db "RTL8139:",0
   401                              <1> %endif
   402                              <1> %ifdef sound.included
   403                              <1> sblaster.irq:
   404 00000317 FA                  <1> 	cli
   405 00000318 60                  <1> 	pusha
   406 00000319 803D[8C550000]01    <1> 	cmp byte [SoundBlaster], 1
   407 00000320 0F8471500000        <1> 	je near sblaster.cont
   408 00000326 E925000000          <1> 	jmp handled2
   409                              <1> %endif
   410                              <1> 	
   411                              <1> timekeeper:
   412 0000032B 50                  <1> 	push eax
   413 0000032C A1[59020000]        <1> 	mov eax, [timenanoseconds]
   414 00000331 0305[51020000]      <1> 	add eax, [timeinterval]
   415 00000337 3D00CA9A3B          <1> 	cmp eax, 1000000000
   416 0000033C 720B                <1> 	jb nonanosecondrollover
   417 0000033E FF05[55020000]      <1> 	inc dword [timeseconds]
   418 00000344 2D00CA9A3B          <1> 	sub eax, 1000000000
   419                              <1> nonanosecondrollover:
   420 00000349 A3[59020000]        <1> 	mov [timenanoseconds], eax
   421 0000034E 58                  <1> 	pop eax
   422 0000034F C3                  <1> 	ret
   423                              <1> 	
   424                              <1> handled2:
   425 00000350 61                  <1> 	popa
   426                              <1> handled3:
   427 00000351 FB                  <1> 	sti
   428                              <1> handled:
   429 00000352 50                  <1> 	push eax
   430 00000353 B020                <1> 	mov al, 0x20
   431 00000355 E620                <1> 	out 0x20, al
   432 00000357 58                  <1> 	pop eax
   433 00000358 CF                  <1> 	iret
   434                              <1> handled4:
   435 00000359 50                  <1> 	push eax
   436 0000035A B020                <1> 	mov al, 0x20
   437 0000035C E6A0                <1> 	out 0xA0, al
   438 0000035E E620                <1> 	out 0x20, al
   439 00000360 58                  <1> 	pop eax
   440 00000361 CF                  <1> 	iret
   441                              <1> [BITS 16]
   442                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   443                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   444                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   445 00000362 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   446 00000364 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   447                              <1> 
   448 00000368 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   449 0000036A 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   450                              <1> 
   451                              <1> 
   452 0000036E 0000                <1> gdt:	dw 0			; limit 15:0
   453 00000370 0000                <1> 	dw 0			; base 15:0
   454 00000372 00                  <1> 	db 0			; base 23:16
   455 00000373 00                  <1> 	db 0			; type
   456 00000374 00                  <1> 	db 0			; limit 19:16, flags
   457 00000375 00                  <1> 	db 0			; base 31:24
   458                              <1> ; linear data segment descriptor
   459                              <1> LINEAR_SEL	equ	$-gdt
   460 00000376 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   461 00000378 0000                <1> 	dw 0			; base for this one is always 0
   462 0000037A 00                  <1> 	db 0
   463 0000037B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   464 0000037C CF                  <1> 	db 0xCF			; page-granular, 32-bit
   465 0000037D 00                  <1> 	db 0
   466                              <1> STACK_SEL	equ $-gdt
   467 0000037E 0200                <1> gdts:	dw 2;(stackend)/4096
   468 00000380 0000                <1> 	dw 0
   469 00000382 00                  <1> 	db 0
   470 00000383 92                  <1> 	db 0x92
   471 00000384 CF                  <1> 	db 0xCF
   472 00000385 00                  <1> 	db 0
   473                              <1> ; code segment descriptor
   474                              <1> SYS_CODE_SEL	equ	$-gdt
   475 00000386 FFFF                <1> gdt2:	dw 0xFFFF
   476 00000388 0000                <1> 	dw 0			; (base gets set above)
   477 0000038A 00                  <1> 	db 0
   478 0000038B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   479 0000038C CF                  <1> 	db 0xCF
   480 0000038D 00                  <1> 	db 0
   481                              <1> ; data segment descriptor
   482                              <1> SYS_DATA_SEL	equ	$-gdt
   483 0000038E FFFF                <1> gdt3:	dw 0xFFFF
   484 00000390 0000                <1> 	dw 0			; (base gets set above)
   485 00000392 00                  <1> 	db 0
   486 00000393 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   487 00000394 CF                  <1> 	db 0xCF
   488 00000395 00                  <1> 	db 0
   489                              <1> NEW_CODE_SEL	equ	$-gdt
   490 00000396 FFFF                <1> gdt4:	dw 0xFFFF
   491 00000398 0000                <1> 	dw 0			; (base gets set above)
   492 0000039A 00                  <1> 	db 0
   493 0000039B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   494 0000039C CF                  <1> 	db 0xCF
   495 0000039D 00                  <1> 	db 0
   496                              <1> ; data segment descriptor
   497                              <1> NEW_DATA_SEL	equ	$-gdt
   498 0000039E FFFF                <1> gdt5:	dw 0xFFFF
   499 000003A0 0000                <1> 	dw 0			; (base gets set above)
   500 000003A2 00                  <1> 	db 0
   501 000003A3 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   502 000003A4 CF                  <1> 	db 0xCF
   503 000003A5 00                  <1> 	db 0
   504                              <1> V8086_CODE_SEL	equ $-gdt
   505 000003A6 FFFF                <1> gdtv8086: dw 0xFFFF
   506 000003A8 0000                <1> 	dw 0
   507 000003AA 00                  <1> 	db 0
   508 000003AB 9A                  <1> 	db 0x9A
   509 000003AC 8F                  <1> 	db 0x8F
   510 000003AD 00                  <1> 	db 0
   511                              <1> V8086_DATA_SEL	equ $-gdt
   512 000003AE FFFF                <1> gdtv80862: dw 0xFFFF
   513 000003B0 0000                <1> 	dw 0
   514 000003B2 00                  <1> 	db 0
   515 000003B3 92                  <1> 	db 0x92
   516 000003B4 8F                  <1> 	db 0x8F
   517 000003B5 00                  <1> 	db 0
   518                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   519 000003B6 0001                <1> gdtdos:	dw 256	;give it 1 MB
   520 000003B8 0000                <1> 	dw 0
   521 000003BA 00                  <1> 	db 0
   522 000003BB 9A                  <1> 	db 0x9A
   523 000003BC 8F                  <1> 	db 0x8F ;16 bit
   524 000003BD 00                  <1> 	db 0
   525                              <1> DOS_DATA_SEL 	equ $-gdt
   526 000003BE 0001                <1> gdtdos2:	dw 256
   527 000003C0 0000                <1> 	dw 0
   528 000003C2 00                  <1> 	db 0
   529 000003C3 92                  <1> 	db 0x92
   530 000003C4 8F                  <1> 	db 0x8F ;16 bit
   531 000003C5 00                  <1> 	db 0
   532                              <1> gdt_end:
   533                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   534                              <1> ;	interrupt descriptor table (IDT)
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ; 32 reserved interrupts:
   537                              <1> idt:	
   538                              <1> %assign i 0
   539                              <1> %rep    32
   540                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   541                              <1> %assign i i+1
   542                              <1> %endrep
   543 000003C6 [E70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   544                              <2> %assign i i+1
   545 000003CE [F30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   546                              <2> %assign i i+1
   547 000003D6 [FF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i i+1
   549 000003DE [0B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   550                              <2> %assign i i+1
   551 000003E6 [170D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   552                              <2> %assign i i+1
   553 000003EE [230D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   554                              <2> %assign i i+1
   555 000003F6 [2F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   556                              <2> %assign i i+1
   557 000003FE [3B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   558                              <2> %assign i i+1
   559 00000406 [470D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   560                              <2> %assign i i+1
   561 0000040E [530D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   562                              <2> %assign i i+1
   563 00000416 [5F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   564                              <2> %assign i i+1
   565 0000041E [6B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   566                              <2> %assign i i+1
   567 00000426 [770D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   568                              <2> %assign i i+1
   569 0000042E [830D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   570                              <2> %assign i i+1
   571 00000436 [8F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   572                              <2> %assign i i+1
   573 0000043E [9B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   574                              <2> %assign i i+1
   575 00000446 [A70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   576                              <2> %assign i i+1
   577 0000044E [B30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   578                              <2> %assign i i+1
   579 00000456 [BF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   580                              <2> %assign i i+1
   581 0000045E [CB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   582                              <2> %assign i i+1
   583 00000466 [D70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   584                              <2> %assign i i+1
   585 0000046E [E30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   586                              <2> %assign i i+1
   587 00000476 [EF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   588                              <2> %assign i i+1
   589 0000047E [FB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   590                              <2> %assign i i+1
   591 00000486 [070E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   592                              <2> %assign i i+1
   593 0000048E [130E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   594                              <2> %assign i i+1
   595 00000496 [1F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   596                              <2> %assign i i+1
   597 0000049E [2B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   598                              <2> %assign i i+1
   599 000004A6 [370E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   600                              <2> %assign i i+1
   601 000004AE [430E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   602                              <2> %assign i i+1
   603 000004B6 [4F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   604                              <2> %assign i i+1
   605 000004BE [5B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   606                              <2> %assign i i+1
   607 000004C6 [3C26]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   608 000004CE [4026]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   609                              <1> %assign i 0x22
   610                              <1> %rep 14
   611                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   612                              <1> %assign i +1
   613                              <1> %endrep
   614 000004D6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i +1
   616 000004DE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i +1
   618 000004E6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i +1
   620 000004EE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i +1
   622 000004F6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i +1
   624 000004FE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i +1
   626 00000506 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   627                              <2> %assign i +1
   628 0000050E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   629                              <2> %assign i +1
   630 00000516 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   631                              <2> %assign i +1
   632 0000051E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   633                              <2> %assign i +1
   634 00000526 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   635                              <2> %assign i +1
   636 0000052E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i +1
   638 00000536 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i +1
   640 0000053E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i +1
   642                              <1> ;INT 30h for os use and 3rd party use:
   643 00000546 [DA1B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   644                              <1> %assign i 0x31
   645                              <1> %rep 15
   646                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   647                              <1> %assign i +1
   648                              <1> %endrep
   649 0000054E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i +1
   651 00000556 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i +1
   653 0000055E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i +1
   655 00000566 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 0000056E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 00000576 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661 0000057E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i +1
   663 00000586 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i +1
   665 0000058E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i +1
   667 00000596 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i +1
   669 0000059E [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i +1
   671 000005A6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i +1
   673 000005AE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i +1
   675 000005B6 [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i +1
   677 000005BE [5203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i +1
   679                              <1> ;and here we are at 0x40
   680                              <1> ;here are all the irq's
   681 000005C6 [8102]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   682 000005CE [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   683 000005D6 [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   684 000005DE [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   685 000005E6 [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   686                              <1> 	%ifdef sound.included
   687 000005EE [1703]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   688                              <1> 	%else
   689                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   690                              <1> 	%endif
   691 000005F6 [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   692 000005FE [5203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   693 00000606 [FA02]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   694 0000060E [5903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   695 00000616 [5903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   696                              <1> 	%ifdef rtl8139.included
   697                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   698                              <1> 	%else
   699 0000061E [5903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   700                              <1> 	%endif
   701 00000626 [5903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   702 0000062E [5903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   703 00000636 [5903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   704 0000063E [5903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   705                              <1> ;This brings me up to 0x50
   706                              <1> %assign i 0x50
   707                              <1> %rep 176
   708                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   709                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   710                              <1> %assign i +1
   711                              <1> %endrep
   712 00000646 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   713                              <2> 
   714                              <2> %assign i +1
   715 0000064E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   716                              <2> 
   717                              <2> %assign i +1
   718 00000656 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   719                              <2> 
   720                              <2> %assign i +1
   721 0000065E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   722                              <2> 
   723                              <2> %assign i +1
   724 00000666 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   725                              <2> 
   726                              <2> %assign i +1
   727 0000066E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   728                              <2> 
   729                              <2> %assign i +1
   730 00000676 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   731                              <2> 
   732                              <2> %assign i +1
   733 0000067E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   734                              <2> 
   735                              <2> %assign i +1
   736 00000686 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   737                              <2> 
   738                              <2> %assign i +1
   739 0000068E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   740                              <2> 
   741                              <2> %assign i +1
   742 00000696 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   743                              <2> 
   744                              <2> %assign i +1
   745 0000069E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   746                              <2> 
   747                              <2> %assign i +1
   748 000006A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   749                              <2> 
   750                              <2> %assign i +1
   751 000006AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   752                              <2> 
   753                              <2> %assign i +1
   754 000006B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   755                              <2> 
   756                              <2> %assign i +1
   757 000006BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   758                              <2> 
   759                              <2> %assign i +1
   760 000006C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   761                              <2> 
   762                              <2> %assign i +1
   763 000006CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   764                              <2> 
   765                              <2> %assign i +1
   766 000006D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   767                              <2> 
   768                              <2> %assign i +1
   769 000006DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   770                              <2> 
   771                              <2> %assign i +1
   772 000006E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   773                              <2> 
   774                              <2> %assign i +1
   775 000006EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   776                              <2> 
   777                              <2> %assign i +1
   778 000006F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   779                              <2> 
   780                              <2> %assign i +1
   781 000006FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   782                              <2> 
   783                              <2> %assign i +1
   784 00000706 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   785                              <2> 
   786                              <2> %assign i +1
   787 0000070E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   788                              <2> 
   789                              <2> %assign i +1
   790 00000716 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   791                              <2> 
   792                              <2> %assign i +1
   793 0000071E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   794                              <2> 
   795                              <2> %assign i +1
   796 00000726 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   797                              <2> 
   798                              <2> %assign i +1
   799 0000072E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   800                              <2> 
   801                              <2> %assign i +1
   802 00000736 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   803                              <2> 
   804                              <2> %assign i +1
   805 0000073E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <2> 
   807                              <2> %assign i +1
   808 00000746 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 0000074E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 00000756 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 0000075E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 00000766 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 0000076E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 00000776 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 0000077E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 00000786 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 0000078E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 00000796 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 0000079E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 000007A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 000007AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 000007B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 000007BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 000007C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 000007CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 000007D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 000007DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 000007E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 000007EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 000007F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 000007FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 00000806 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 0000080E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 00000816 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 0000081E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 00000826 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 0000082E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 00000836 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 0000083E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 00000846 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 0000084E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 00000856 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 0000085E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 00000866 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 0000086E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 00000876 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 0000087E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 00000886 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 0000088E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 00000896 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 0000089E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 000008A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 000008AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 000008B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 000008BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 000008C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 000008CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 000008D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 000008DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 000008E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 000008EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 000008F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 000008FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 00000906 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 0000090E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 00000916 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 0000091E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 00000926 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 0000092E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 00000936 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 0000093E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 00000946 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 0000094E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 00000956 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 0000095E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 00000966 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 0000096E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 00000976 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 0000097E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 00000986 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 0000098E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 00000996 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 0000099E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 000009A6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 000009AE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 000009B6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 000009BE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 000009C6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 000009CE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 000009D6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 000009DE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 000009E6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 000009EE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 000009F6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 000009FE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 00000A06 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 00000A0E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 00000A16 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 00000A1E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 00000A26 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 00000A2E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 00000A36 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 00000A3E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000A46 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 00000A4E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000A56 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 00000A5E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000A66 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 00000A6E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000A76 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 00000A7E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000A86 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 00000A8E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000A96 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 00000A9E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 00000AA6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 00000AAE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 00000AB6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 00000ABE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 00000AC6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 00000ACE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 00000AD6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 00000ADE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 00000AE6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 00000AEE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 00000AF6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 00000AFE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 00000B06 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 00000B0E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000B16 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000B1E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000B26 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000B2E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000B36 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000B3E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000B46 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000B4E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000B56 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000B5E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000B66 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000B6E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000B76 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000B7E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000B86 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000B8E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000B96 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000B9E [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000BA6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000BAE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000BB6 [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000BBE [5203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240                              <1> idt_end:
  1241                              <1> [BITS 32]
  1242                                  	%include "source/realmode.asm"
  1243                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1244                              <1> 			;and the return address is in realmodereturn
  1245 00000BC6 FA                  <1> 	cli
  1246 00000BC7 A3[D90C0000]        <1> 	mov [realmodeeax], eax
  1247 00000BCC 891D[D50C0000]      <1> 	mov [realmodeebx], ebx
  1248 00000BD2 8925[C70C0000]      <1> 	mov [pmodeesp], esp
  1249                              <1> 
  1250 00000BD8 BB[D10C0000]        <1> 	mov ebx, cr0old
  1251                              <1> rmcopytofirstmbyte:
  1252 00000BDD 8B03                <1> 	mov eax, [ebx]
  1253 00000BDF 658903              <1> 	mov [gs:ebx], eax
  1254 00000BE2 81C304000000        <1> 	add ebx, 4
  1255 00000BE8 81FB[E10C0000]      <1> 	cmp ebx, realmodeptr
  1256 00000BEE 76ED                <1> 	jbe rmcopytofirstmbyte
  1257                              <1> 
  1258 00000BF0 EA[F70B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1259                              <1> 
  1260                              <1> [BITS 16]
  1261                              <1> protected16bit:
  1262 00000BF7 B84000              <1> 	mov ax, V8086_DATA_SEL
  1263 00000BFA 8ED8                <1> 	mov ds, ax
  1264 00000BFC 8EC0                <1> 	mov es, ax
  1265 00000BFE 8EE0                <1> 	mov fs, ax
  1266 00000C00 8EE8                <1> 	mov gs, ax
  1267 00000C02 8ED0                <1> 	mov ss, ax
  1268 00000C04 66BC[0EA00000]      <1> 	mov esp, stackend
  1269 00000C0A 0F20C0              <1> 	mov eax, cr0
  1270 00000C0D 66A3[D10C]          <1> 	mov [cr0old], eax
  1271 00000C11 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1272 00000C17 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1273 00000C1A EA[1F0C]0010        <1> 	jmp 0x1000:inrealmode
  1274                              <1> 
  1275                              <1> inrealmode:
  1276 00000C1F 8CC8                <1> 	mov ax, cs
  1277 00000C21 8ED8                <1> 	mov ds, ax
  1278 00000C23 8EC0                <1> 	mov es, ax
  1279 00000C25 8EE0                <1> 	mov fs, ax
  1280 00000C27 8EE8                <1> 	mov gs, ax
  1281 00000C29 8ED0                <1> 	mov ss, ax
  1282 00000C2B BC[0EA0]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1283                              <1> 	
  1284 00000C2E B011                <1> 	mov al, 0x11
  1285 00000C30 E620                <1> 	out 0x20, al
  1286 00000C32 E6A0                <1> 	out 0xA0, al
  1287 00000C34 B008                <1> 	mov al, 0x8		;interrupt for master
  1288 00000C36 E621                <1> 	out 0x21, al
  1289 00000C38 B070                <1> 	mov al, 0x70	;interrupt for slave
  1290 00000C3A E6A1                <1> 	out 0xA1, al
  1291 00000C3C B004                <1> 	mov al, 4
  1292 00000C3E E621                <1> 	out 0x21, al
  1293 00000C40 B002                <1> 	mov al, 2
  1294 00000C42 E6A1                <1> 	out 0xA1, al
  1295 00000C44 B001                <1> 	mov al, 0x1
  1296 00000C46 E621                <1> 	out 0x21, al
  1297 00000C48 B001                <1> 	mov al, 0x1
  1298 00000C4A E6A1                <1> 	out 0xA1, al
  1299                              <1> 	
  1300 00000C4C 0F011E[CB0C]        <1> 	lidt [idt_real]
  1301 00000C51 FB                  <1> 	sti
  1302                              <1> 
  1303 00000C52 66A1[D90C]          <1> 	mov eax, [realmodeeax]
  1304 00000C56 668B1E[D50C]        <1> 	mov ebx, [realmodeebx]
  1305                              <1> 
  1306 00000C5B FF16[E10C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1307                              <1> 
  1308 00000C5F 66A3[D90C]          <1> 	mov [realmodeeax], eax
  1309 00000C63 66891E[D50C]        <1> 	mov [realmodeebx], ebx
  1310                              <1> 
  1311 00000C68 FA                  <1> 	cli
  1312 00000C69 0F0116[6203]        <1> 	lgdt [gdtr]
  1313 00000C6E 0F011E[6803]        <1> 	lidt [idtr]
  1314 00000C73 0F20C0              <1> 	mov eax, cr0
  1315 00000C76 0C01                <1> 	or al, 1
  1316 00000C78 0F22C0              <1> 	mov cr0,eax
  1317 00000C7B EA[800C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1318                              <1> 
  1319                              <1> [BITS 32]
  1320                              <1> returntopmode:
  1321 00000C80 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1322 00000C84 8ED8                <1> 	mov ds, ax
  1323 00000C86 8EC0                <1> 	mov es, ax
  1324 00000C88 8EE0                <1> 	mov fs, ax
  1325 00000C8A 8ED0                <1> 	mov ss, ax
  1326 00000C8C 8B25[C70C0000]      <1> 	mov esp, [pmodeesp]
  1327 00000C92 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1328 00000C96 8EE8                <1> 	mov gs, ax
  1329                              <1> 
  1330 00000C98 BB[D10C0000]        <1> 	mov ebx, cr0old
  1331                              <1> rmcopyfromfirstmbyte:
  1332 00000C9D 658B03              <1> 	mov eax, [gs:ebx]
  1333 00000CA0 8903                <1> 	mov [ebx], eax
  1334 00000CA2 81C304000000        <1> 	add ebx, 4
  1335 00000CA8 81FB[E10C0000]      <1> 	cmp ebx, realmodeptr
  1336 00000CAE 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1337                              <1> 
  1338 00000CB0 E8524F0000          <1> 	call initialize.pic ;reset irq's and masks
  1339 00000CB5 FB                  <1> 	sti
  1340 00000CB6 A1[D90C0000]        <1> 	mov eax, [realmodeeax]
  1341 00000CBB 8B1D[D50C0000]      <1> 	mov ebx, [realmodeebx]
  1342 00000CC1 FF25[DD0C0000]      <1> 	jmp dword [realmodereturn]
  1343                              <1> 	
  1344 00000CC7 00000000            <1> pmodeesp dd 0
  1345                              <1> idt_real:
  1346 00000CCB FF03                <1> 	dw 0x3FF
  1347 00000CCD 00000000            <1> 	dd 0
  1348 00000CD1 00000000            <1> cr0old dd 0
  1349 00000CD5 00000000            <1> realmodeebx dd 0
  1350 00000CD9 00000000            <1> realmodeeax dd 0
  1351 00000CDD 00000000            <1> realmodereturn dd 0
  1352 00000CE1 0000                <1> realmodeptr dw 0
  1353 00000CE3 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1354                                  [BITS 32]
  1355                                      %include "source/exception.asm"
  1356                              <1> %ifdef exceptions.included
  1357                              <1> unhand:	
  1358                              <1> 	%assign i 0
  1359                              <1> 	%rep 32
  1360                              <1> 	mov byte [intprob], i
  1361                              <1> 	jmp unhand2
  1362                              <1> 	%assign i i+1
  1363                              <1> 	%endrep
  1364 00000CE7 C605[99110000]00    <2>  mov byte [intprob], i
  1365 00000CEE E974010000          <2>  jmp unhand2
  1366                              <2>  %assign i i+1
  1367 00000CF3 C605[99110000]01    <2>  mov byte [intprob], i
  1368 00000CFA E968010000          <2>  jmp unhand2
  1369                              <2>  %assign i i+1
  1370 00000CFF C605[99110000]02    <2>  mov byte [intprob], i
  1371 00000D06 E95C010000          <2>  jmp unhand2
  1372                              <2>  %assign i i+1
  1373 00000D0B C605[99110000]03    <2>  mov byte [intprob], i
  1374 00000D12 E950010000          <2>  jmp unhand2
  1375                              <2>  %assign i i+1
  1376 00000D17 C605[99110000]04    <2>  mov byte [intprob], i
  1377 00000D1E E944010000          <2>  jmp unhand2
  1378                              <2>  %assign i i+1
  1379 00000D23 C605[99110000]05    <2>  mov byte [intprob], i
  1380 00000D2A E938010000          <2>  jmp unhand2
  1381                              <2>  %assign i i+1
  1382 00000D2F C605[99110000]06    <2>  mov byte [intprob], i
  1383 00000D36 E92C010000          <2>  jmp unhand2
  1384                              <2>  %assign i i+1
  1385 00000D3B C605[99110000]07    <2>  mov byte [intprob], i
  1386 00000D42 E920010000          <2>  jmp unhand2
  1387                              <2>  %assign i i+1
  1388 00000D47 C605[99110000]08    <2>  mov byte [intprob], i
  1389 00000D4E E914010000          <2>  jmp unhand2
  1390                              <2>  %assign i i+1
  1391 00000D53 C605[99110000]09    <2>  mov byte [intprob], i
  1392 00000D5A E908010000          <2>  jmp unhand2
  1393                              <2>  %assign i i+1
  1394 00000D5F C605[99110000]0A    <2>  mov byte [intprob], i
  1395 00000D66 E9FC000000          <2>  jmp unhand2
  1396                              <2>  %assign i i+1
  1397 00000D6B C605[99110000]0B    <2>  mov byte [intprob], i
  1398 00000D72 E9F0000000          <2>  jmp unhand2
  1399                              <2>  %assign i i+1
  1400 00000D77 C605[99110000]0C    <2>  mov byte [intprob], i
  1401 00000D7E E9E4000000          <2>  jmp unhand2
  1402                              <2>  %assign i i+1
  1403 00000D83 C605[99110000]0D    <2>  mov byte [intprob], i
  1404 00000D8A E9D8000000          <2>  jmp unhand2
  1405                              <2>  %assign i i+1
  1406 00000D8F C605[99110000]0E    <2>  mov byte [intprob], i
  1407 00000D96 E9CC000000          <2>  jmp unhand2
  1408                              <2>  %assign i i+1
  1409 00000D9B C605[99110000]0F    <2>  mov byte [intprob], i
  1410 00000DA2 E9C0000000          <2>  jmp unhand2
  1411                              <2>  %assign i i+1
  1412 00000DA7 C605[99110000]10    <2>  mov byte [intprob], i
  1413 00000DAE E9B4000000          <2>  jmp unhand2
  1414                              <2>  %assign i i+1
  1415 00000DB3 C605[99110000]11    <2>  mov byte [intprob], i
  1416 00000DBA E9A8000000          <2>  jmp unhand2
  1417                              <2>  %assign i i+1
  1418 00000DBF C605[99110000]12    <2>  mov byte [intprob], i
  1419 00000DC6 E99C000000          <2>  jmp unhand2
  1420                              <2>  %assign i i+1
  1421 00000DCB C605[99110000]13    <2>  mov byte [intprob], i
  1422 00000DD2 E990000000          <2>  jmp unhand2
  1423                              <2>  %assign i i+1
  1424 00000DD7 C605[99110000]14    <2>  mov byte [intprob], i
  1425 00000DDE E984000000          <2>  jmp unhand2
  1426                              <2>  %assign i i+1
  1427 00000DE3 C605[99110000]15    <2>  mov byte [intprob], i
  1428 00000DEA E978000000          <2>  jmp unhand2
  1429                              <2>  %assign i i+1
  1430 00000DEF C605[99110000]16    <2>  mov byte [intprob], i
  1431 00000DF6 E96C000000          <2>  jmp unhand2
  1432                              <2>  %assign i i+1
  1433 00000DFB C605[99110000]17    <2>  mov byte [intprob], i
  1434 00000E02 E960000000          <2>  jmp unhand2
  1435                              <2>  %assign i i+1
  1436 00000E07 C605[99110000]18    <2>  mov byte [intprob], i
  1437 00000E0E E954000000          <2>  jmp unhand2
  1438                              <2>  %assign i i+1
  1439 00000E13 C605[99110000]19    <2>  mov byte [intprob], i
  1440 00000E1A E948000000          <2>  jmp unhand2
  1441                              <2>  %assign i i+1
  1442 00000E1F C605[99110000]1A    <2>  mov byte [intprob], i
  1443 00000E26 E93C000000          <2>  jmp unhand2
  1444                              <2>  %assign i i+1
  1445 00000E2B C605[99110000]1B    <2>  mov byte [intprob], i
  1446 00000E32 E930000000          <2>  jmp unhand2
  1447                              <2>  %assign i i+1
  1448 00000E37 C605[99110000]1C    <2>  mov byte [intprob], i
  1449 00000E3E E924000000          <2>  jmp unhand2
  1450                              <2>  %assign i i+1
  1451 00000E43 C605[99110000]1D    <2>  mov byte [intprob], i
  1452 00000E4A E918000000          <2>  jmp unhand2
  1453                              <2>  %assign i i+1
  1454 00000E4F C605[99110000]1E    <2>  mov byte [intprob], i
  1455 00000E56 E90C000000          <2>  jmp unhand2
  1456                              <2>  %assign i i+1
  1457 00000E5B C605[99110000]1F    <2>  mov byte [intprob], i
  1458 00000E62 E900000000          <2>  jmp unhand2
  1459                              <2>  %assign i i+1
  1460                              <1> unhand2:
  1461 00000E67 FA                  <1> 	cli
  1462 00000E68 1E                  <1> 	push ds
  1463 00000E69 06                  <1> 	push es
  1464 00000E6A 0FA0                <1> 	push fs
  1465 00000E6C 0FA8                <1> 	push gs
  1466 00000E6E 16                  <1> 	push ss
  1467 00000E6F 60                  <1> 	pushad
  1468                              <1> %ifdef gui.included
  1469 00000E70 803D[288E0000]00    <1> 	cmp byte [guion], 0
  1470 00000E77 0F8432000000        <1> 	je near noguiunhandstuff
  1471 00000E7D 66C705[93110000]08- <1> 	mov word [locunhandy], 8
  1472 00000E85 00                  <1>
  1473 00000E86 66C705[95110000]08- <1> 	mov word [locunhandx], 8
  1474 00000E8E 00                  <1>
  1475 00000E8F 668B1D[8A650000]    <1> 	mov bx, [background]
  1476 00000E96 66891D[97110000]    <1> 	mov [backgroundcache], bx
  1477 00000E9D C605[A14F0000]01    <1> 	mov byte [mousedisabled],1
  1478 00000EA4 66BB00F8            <1> 	mov bx, 1111100000000000b
  1479 00000EA8 66891D[8A650000]    <1> 	mov [background], bx
  1480                              <1> noguiunhandstuff:
  1481                              <1> %endif
  1482 00000EAF 89E6                <1> 	mov esi, esp
  1483 00000EB1 8935[87110000]      <1> 	mov [espfirst], esi
  1484 00000EB7 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1485 00000EBD 8935[83110000]      <1> 	mov [esploc], esi
  1486 00000EC3 BE[A8110000]        <1> 	mov esi, unhandmsg
  1487 00000EC8 8935[8B110000]      <1> 	mov [esiloc], esi
  1488 00000ECE 31C9                <1> 	xor ecx, ecx
  1489 00000ED0 8A0D[99110000]      <1> 	mov cl, [intprob]
  1490 00000ED6 BB[77150000]        <1> 	mov ebx, errortypes
  1491 00000EDB C1E102              <1> 	shl ecx, 2
  1492 00000EDE 01CB                <1> 	add ebx, ecx
  1493 00000EE0 81FB[B7150000]      <1> 	cmp ebx, errortypesend
  1494 00000EE6 7205                <1> 	jb gooderrortype
  1495 00000EE8 BB[B7150000]        <1> 	mov ebx, errortypesend
  1496                              <1> gooderrortype:
  1497 00000EED 8B33                <1> 	mov esi, [ebx]
  1498                              <1> %ifdef gui.included
  1499 00000EEF 803D[288E0000]00    <1> 	cmp byte [guion], 0
  1500 00000EF6 0F842D000000        <1> 	je near errortext
  1501 00000EFC 668B0D[93110000]    <1> 	mov cx, [locunhandy]
  1502 00000F03 668B15[95110000]    <1> 	mov dx, [locunhandx]
  1503 00000F0A 66B80100            <1> 	mov ax, 1
  1504 00000F0E 6631DB              <1> 	xor bx, bx
  1505 00000F11 E8005C0000          <1> 	call showstring2
  1506 00000F16 66890D[93110000]    <1> 	mov [locunhandy], cx
  1507 00000F1D 668915[95110000]    <1> 	mov [locunhandx], dx
  1508 00000F24 E905000000          <1> 	jmp errortextdone
  1509                              <1> %endif
  1510                              <1> errortext:
  1511 00000F29 E8E40D0000          <1> 	call print		;;get the error message and print it
  1512                              <1> errortextdone:
  1513 00000F2E 31C9                <1> 	xor ecx, ecx
  1514 00000F30 8A0D[99110000]      <1> 	mov cl, [intprob]
  1515 00000F36 E8E1010000          <1> 	call expdump
  1516                              <1> dumpstack:
  1517 00000F3B 8B35[83110000]      <1> 	mov esi, [esploc]
  1518 00000F41 39E6                <1> 	cmp esi, esp
  1519 00000F43 7216                <1> 	jb donedump
  1520 00000F45 368B0E              <1> 	mov ecx, [ss:esi]
  1521 00000F48 81EE04000000        <1> 	sub esi, 4
  1522 00000F4E 8935[83110000]      <1> 	mov [esploc], esi
  1523 00000F54 E8C3010000          <1> 	call expdump
  1524 00000F59 EBE0                <1> 	jmp dumpstack
  1525                              <1> donedump:
  1526 00000F5B 0F20C1              <1> 	mov ecx, cr0
  1527 00000F5E E8B9010000          <1> 	call expdump
  1528 00000F63 0F20D1              <1> 	mov ecx, cr2
  1529 00000F66 E8B1010000          <1> 	call expdump
  1530 00000F6B 0F20D9              <1> 	mov ecx, cr3
  1531 00000F6E E8A9010000          <1> 	call expdump
  1532 00000F73 0F20E1              <1> 	mov ecx, cr4
  1533 00000F76 E8A1010000          <1> 	call expdump
  1534 00000F7B 0F00C9              <1> 	str ecx
  1535 00000F7E E899010000          <1> 	call expdump
  1536 00000F83 0F010D[A2110000]    <1> 	sidt [igdtcache]
  1537 00000F8A 8B0D[A4110000]      <1> 	mov ecx, [igdtcache + 2]
  1538 00000F90 E887010000          <1> 	call expdump
  1539 00000F95 0F0105[A2110000]    <1> 	sgdt [igdtcache]
  1540 00000F9C 8B0D[A4110000]      <1> 	mov ecx, [igdtcache + 2]
  1541 00000FA2 E875010000          <1> 	call expdump
  1542 00000FA7 0F00C1              <1> 	sldt ecx
  1543 00000FAA E86D010000          <1> 	call expdump
  1544 00000FAF 8B35[83110000]      <1> 	mov esi, [esploc]
  1545 00000FB5 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1546 00000FBA 81C710000000        <1> 	add edi, 16
  1547 00000FC0 893D[9E110000]      <1> 	mov [codelocend], edi
  1548 00000FC6 81EF20000000        <1> 	sub edi, 32
  1549                              <1> dumpcodeloop:
  1550 00000FCC 893D[9A110000]      <1> 	mov [codeloc], edi
  1551 00000FD2 8B0F                <1> 	mov ecx, [edi]
  1552 00000FD4 E843010000          <1> 	call expdump
  1553 00000FD9 8B3D[9A110000]      <1> 	mov edi, [codeloc]
  1554 00000FDF 81C704000000        <1> 	add edi, 4
  1555 00000FE5 3B3D[9E110000]      <1> 	cmp edi, [codelocend]
  1556 00000FEB 72DF                <1> 	jb dumpcodeloop
  1557 00000FED BE[AD100000]        <1> 	mov esi, backtoosmsg
  1558                              <1> %ifdef gui.included
  1559 00000FF2 803D[288E0000]00    <1> 	cmp byte [guion], 0
  1560 00000FF9 741F                <1> 	je backtomsg
  1561                              <1> guibacktomsg:
  1562 00000FFB 668B15[95110000]    <1> 	mov dx, [locunhandx]
  1563 00001002 668B0D[93110000]    <1> 	mov cx, [locunhandy]
  1564 00001009 66B80100            <1> 	mov ax, 1
  1565 0000100D 6631DB              <1> 	xor bx, bx
  1566 00001010 E8015B0000          <1> 	call showstring2
  1567 00001015 E905000000          <1> 	jmp backtomsgdone
  1568                              <1> backtomsg:
  1569                              <1> %endif
  1570 0000101A E8F30C0000          <1> 	call print
  1571                              <1> backtomsgdone:
  1572 0000101F 30C0                <1> 	xor al, al
  1573 00001021 E84E110000          <1> 	call rdcharint
  1574 00001026 803D[99110000]03    <1> 	cmp byte [intprob], 3
  1575 0000102D 7541                <1> 	jne nodebugint
  1576                              <1> %ifdef gui.included
  1577 0000102F 803D[288E0000]00    <1> 	cmp byte [guion], 0
  1578 00001036 7427                <1> 	je nodebuggui
  1579 00001038 668B1D[97110000]    <1> 	mov bx, [backgroundcache]
  1580 0000103F 66891D[8A650000]    <1> 	mov [background], bx
  1581 00001046 6631DB              <1> 	xor bx, bx
  1582 00001049 C605[A14F0000]00    <1> 	mov byte [mousedisabled], 0
  1583 00001050 E8B4540000          <1> 	call guiclear
  1584 00001055 E834550000          <1> 	call reloadallgraphics
  1585 0000105A E8BC140000          <1> 	call termcopy
  1586                              <1> nodebuggui:
  1587                              <1> %endif
  1588 0000105F 8B35[87110000]      <1> 	mov esi, [espfirst]
  1589 00001065 89F4                <1> 	mov esp, esi
  1590 00001067 61                  <1> 	popad
  1591 00001068 17                  <1> 	pop ss
  1592 00001069 0FA9                <1> 	pop gs
  1593 0000106B 0FA1                <1> 	pop fs
  1594 0000106D 07                  <1> 	pop es
  1595 0000106E 1F                  <1> 	pop ds
  1596 0000106F CF                  <1> 	iret
  1597                              <1> nodebugint:
  1598 00001070 61                  <1> 	popad
  1599 00001071 17                  <1> 	pop ss
  1600 00001072 0FA9                <1> 	pop gs
  1601 00001074 0FA1                <1> 	pop fs
  1602 00001076 07                  <1> 	pop es
  1603 00001077 1F                  <1> 	pop ds
  1604                              <1> %ifdef gui.included
  1605 00001078 803D[288E0000]00    <1> 	cmp byte [guion], 0
  1606 0000107F 7427                <1> 	je returnunhandgui
  1607 00001081 668B1D[97110000]    <1> 	mov bx, [backgroundcache]
  1608 00001088 66891D[8A650000]    <1> 	mov [background], bx
  1609 0000108F 6631DB              <1> 	xor bx, bx
  1610 00001092 C605[A14F0000]00    <1> 	mov byte [mousedisabled], 0
  1611 00001099 E86B540000          <1> 	call guiclear
  1612 0000109E E8EB540000          <1> 	call reloadallgraphics
  1613 000010A3 E873140000          <1> 	call termcopy
  1614                              <1> %endif
  1615                              <1> returnunhandgui:
  1616 000010A8 E985180000          <1> 	jmp nwcmd
  1617 000010AD 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1618 000010B6 737420616E79207072- <1>
  1619 000010BF 6F626C656D7320696E- <1>
  1620 000010C8 207468652049737375- <1>
  1621 000010D1 65732073656374696F- <1>
  1622 000010DA 6E20617420736F6C6C- <1>
  1623 000010E3 65726F732E676F6F67- <1>
  1624 000010EC 6C65636F64652E636F- <1>
  1625 000010F5 6D0A                <1>
  1626 000010F7 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1627 00001100 206B657920746F2072- <1>
  1628 00001109 657475726E20746F20- <1>
  1629 00001112 536F6C6C65724F530A- <1>
  1630 0000111B 00                  <1>
  1631                              <1> expdump:
  1632 0000111C 8B35[8B110000]      <1> 	mov esi, [esiloc]
  1633 00001122 89F7                <1> 	mov edi, esi
  1634 00001124 81C70F000000        <1> 	add edi, 15
  1635 0000112A 81C604000000        <1> 	add esi, 4
  1636 00001130 893D[8B110000]      <1> 	mov [esiloc], edi
  1637 00001136 81EF03000000        <1> 	sub edi, 3
  1638 0000113C E8521C0000          <1> 	call converthex
  1639 00001141 81EE04000000        <1> 	sub esi, 4
  1640                              <1> %ifdef gui.included
  1641 00001147 803D[288E0000]00    <1> 	cmp byte [guion], 0
  1642 0000114E 0F8429000000        <1> 	je near expdumptext
  1643 00001154 668B0D[93110000]    <1> 	mov cx, [locunhandy]
  1644 0000115B 668B15[95110000]    <1> 	mov dx, [locunhandx]
  1645 00001162 66B80100            <1> 	mov ax, 1
  1646 00001166 6631DB              <1> 	xor bx, bx
  1647 00001169 E8A8590000          <1> 	call showstring2
  1648 0000116E 66890D[93110000]    <1> 	mov [locunhandy], cx
  1649 00001175 668915[95110000]    <1> 	mov [locunhandx], dx
  1650 0000117C C3                  <1> 	ret
  1651                              <1> %endif
  1652                              <1> expdumptext:
  1653 0000117D E8900B0000          <1> 	call print
  1654 00001182 C3                  <1> 	ret
  1655 00001183 00000000            <1> esploc dd 0
  1656 00001187 00000000            <1> espfirst dd 0
  1657 0000118B 00000000            <1> esiloc dd 0
  1658 0000118F 00000000            <1> esiregbuf dd 0
  1659 00001193 0100                <1> locunhandy dw 1
  1660 00001195 0100                <1> locunhandx dw 1
  1661 00001197 0000                <1> backgroundcache dw 0
  1662 00001199 00                  <1> intprob db 0
  1663 0000119A 00000000            <1> codeloc dd 0
  1664 0000119E 00000000            <1> codelocend dd 0
  1665 000011A2 000000000000        <1> igdtcache dw 0,0,0
  1666                              <1> 	unhandmsg:	
  1667 000011A8 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1668 000011B1 303030FF0A00        <1>
  1669                              <1> unhndrg:
  1670 000011B7 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1671 000011C0 303030202000<rept>  <1>
  1672 00001220 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1673 00001229 303030FF0A00        <1>
  1674 0000122F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1675 00001238 303030202000<rept>  <1>
  1676 00001298 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1677 000012A1 303030FF0A00        <1>
  1678 000012A7 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1679 000012B0 303030202000<rept>  <1>
  1680 00001310 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1681 00001319 303030FF0A00        <1>
  1682 0000131F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1683 00001328 303030202000<rept>  <1>
  1684 00001388 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1685 00001391 303030FF0A00        <1>
  1686                              <1> unhandregs:
  1687 00001397 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1688 000013A0 303030202000        <1>
  1689 000013A6 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1690 000013AF 303030202000        <1>
  1691 000013B5 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1692 000013BE 303030FF0A00        <1>
  1693 000013C4 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1694 000013CD 303030202000        <1>
  1695 000013D3 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1696 000013DC 303030202000        <1>
  1697 000013E2 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1698 000013EB 303030202000        <1>
  1699 000013F1 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1700 000013FA 303030202000        <1>
  1701 00001400 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1702 00001409 303030FF0A00        <1>
  1703 0000140F 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1704 00001418 303030202000        <1>
  1705 0000141E 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1706 00001427 303030202000        <1>
  1707 0000142D 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1708 00001436 303030202000        <1>
  1709 0000143C 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1710 00001445 303030FF0A00        <1>
  1711 0000144B 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1712 00001454 303030202000        <1>
  1713 0000145A 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1714 00001463 303030202000        <1>
  1715 00001469 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1716 00001472 303030202000        <1>
  1717 00001478 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1718 00001481 303030FF0A00        <1>
  1719 00001487 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1720 00001490 303030202000        <1>
  1721 00001496 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1722 0000149F 303030202000        <1>
  1723 000014A5 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1724 000014AE 303030202000        <1>
  1725 000014B4 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1726 000014BD 303030FF0A00        <1>
  1727 000014C3 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1728 000014CC 303030202000        <1>
  1729 000014D2 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1730 000014DB 303030202000        <1>
  1731 000014E1 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1732 000014EA 303030202000        <1>
  1733 000014F0 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1734 000014F9 303030FF0A00        <1>
  1735 000014FF FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1736 00001508 303030202000<rept>  <1>
  1737 0000151D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1738 00001526 30303020FF00        <1>
  1739 0000152C FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1740 00001535 3030305D2000        <1>
  1741 0000153B FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1742 00001544 303030202000<rept>  <1>
  1743 00001568 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1744 00001571 303030FF0A00        <1>
  1745                              <1> unhandmsgend:
  1746                              <1> 
  1747                              <1> errortypes:
  1748 00001577 [BB150000]          <1> 			dd err0
  1749 0000157B [1F160000]          <1> 			dd err1
  1750 0000157F [80160000]          <1> 			dd err2
  1751 00001583 [D5160000]          <1> 			dd err3
  1752 00001587 [39170000]          <1> 			dd err4
  1753 0000158B [8B170000]          <1> 			dd err5
  1754 0000158F [F5170000]          <1> 			dd err6
  1755 00001593 [5D180000]          <1> 			dd err7
  1756 00001597 [A7180000]          <1> 			dd err8
  1757 0000159B [04190000]          <1> 			dd err9
  1758 0000159F [5D190000]          <1> 			dd err10
  1759 000015A3 [A8190000]          <1> 			dd err11
  1760 000015A7 [F8190000]          <1> 			dd err12
  1761 000015AB [511A0000]          <1> 			dd err13
  1762 000015AF [B41A0000]          <1> 			dd err14
  1763 000015B3 [F01A0000]          <1> 			dd err15
  1764                              <1> errortypesend:
  1765 000015B7 [7B1B0000]          <1> 			dd unknownerror
  1766                              <1> 			
  1767 000015BB 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1768 000015C4 6279207A65726F3A0A  <1>
  1769 000015CD 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1770 000015D6 6C79206C696D2061F6- <1>
  1771 000015DF 78203D20EC20776865- <1>
  1772 000015E8 6E206120697320616E- <1>
  1773 000015F1 79207265616C206E75- <1>
  1774 000015FA 6D6265722E20486170- <1>
  1775 00001603 707920456173746572- <1>
  1776 0000160C 210A                <1>
  1777 0000160E 202020202020202020- <1> 		db "            x",26,"0",10,0
  1778 00001617 202020781A300A00    <1>
  1779                              <1> 		
  1780 0000161F 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1781 00001628 65702F427265616B70- <1>
  1782 00001631 6F696E743A0A        <1>
  1783 00001637 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1784 00001640 696E74206661756C74- <1>
  1785 00001649 2C20627265616B706F- <1>
  1786 00001652 696E7420747261702C- <1>
  1787 0000165B 206F722073696E676C- <1>
  1788 00001664 652D73746570207472- <1>
  1789 0000166D 617020776173207472- <1>
  1790 00001676 696767657265642E0A- <1>
  1791 0000167F 00                  <1>
  1792                              <1> 		
  1793 00001680 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1794 00001689 6C6520696E74657272- <1>
  1795 00001692 7570743A0A          <1>
  1796 00001697 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1797 000016A0 6520696E7465727275- <1>
  1798 000016A9 707420776173207472- <1>
  1799 000016B2 696767657265642074- <1>
  1800 000016BB 68617420636F756C64- <1>
  1801 000016C4 206E6F74206265206D- <1>
  1802 000016CD 61736B65642E0A00    <1>
  1803                              <1> 		
  1804 000016D5 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1805 000016DE 743A0A              <1>
  1806 000016E1 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1807 000016EA 727275707420697320- <1>
  1808 000016F3 7573656420696E2070- <1>
  1809 000016FC 726F6772616D732074- <1>
  1810 00001705 6F2073686F77207468- <1>
  1811 0000170E 6520737461636B2061- <1>
  1812 00001717 6E6420726567697374- <1>
  1813 00001720 65727320616E642063- <1>
  1814 00001729 616E2062650A        <1>
  1815 0000172F 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1816 00001738 00                  <1>
  1817                              <1> 		
  1818 00001739 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1819 00001742 0A                  <1>
  1820 00001743 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1821 0000174C 73736F722072616E20- <1>
  1822 00001755 696E746F20616E2049- <1>
  1823 0000175E 4E544F20696E737472- <1>
  1824 00001767 756374696F6E207769- <1>
  1825 00001770 746820746865206F76- <1>
  1826 00001779 6572666C6F7720666C- <1>
  1827 00001782 6167207365742E0A00  <1>
  1828                              <1> 		
  1829 0000178B 426F756E6473206368- <1> err5	db "Bounds check:",10
  1830 00001794 65636B3A0A          <1>
  1831 00001799 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1832 000017A2 73736F72207265626F- <1>
  1833 000017AB 756E6465642066726F- <1>
  1834 000017B4 6D206120424F554E44- <1>
  1835 000017BD 20696E737472756374- <1>
  1836 000017C6 696F6E2072756E206F- <1>
  1837 000017CF 6E20616E206F706572- <1>
  1838 000017D8 616E64207468617420- <1>
  1839 000017E1 776173206F75740A    <1>
  1840 000017E9 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1841 000017F2 2E0A00              <1>
  1842                              <1> 		
  1843 000017F5 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1844 000017FE 70636F64653A0A      <1>
  1845 00001805 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1846 0000180E 73736F722068617320- <1>
  1847 00001817 6E6F20696465612077- <1>
  1848 00001820 686174206974207761- <1>
  1849 00001829 7320747279696E6720- <1>
  1850 00001832 746F20657865637574- <1>
  1851 0000183B 652E20446F6E277420- <1>
  1852 00001844 72756E205353453420- <1>
  1853 0000184D 636F64650A          <1>
  1854 00001852 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1855 0000185B 0A00                <1>
  1856                              <1> 		
  1857 0000185D 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1858 00001866 6F72206E6F74206176- <1>
  1859 0000186F 61696C61626C653A0A  <1>
  1860 00001878 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1861 00001881 206B6E6F7720746865- <1>
  1862 0000188A 7920646F6E2774206D- <1>
  1863 00001893 616B652074686F7365- <1>
  1864 0000189C 20616E796D6F726521- <1>
  1865 000018A5 0A00                <1>
  1866                              <1> 		
  1867 000018A7 446F75626C65206661- <1> err8	db "Double fault:",10
  1868 000018B0 756C743A0A          <1>
  1869 000018B5 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1870 000018BE 74696F6E2068616E64- <1>
  1871 000018C7 6C657220636F756C64- <1>
  1872 000018D0 206E6F742068616E64- <1>
  1873 000018D9 6C6520746861742069- <1>
  1874 000018E2 7420636F756C64206E- <1>
  1875 000018EB 6F742068616E646C65- <1>
  1876 000018F4 20616E206578636570- <1>
  1877 000018FD 74696F6E2E0A00      <1>
  1878                              <1> 		
  1879 00001904 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1880 0000190D 6F72207365676D656E- <1>
  1881 00001916 74206F76657272756E- <1>
  1882 0000191F 3A0A00              <1>
  1883 00001922 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1884 0000192B 722068617070656E73- <1>
  1885 00001934 20696E206D6F646572- <1>
  1886 0000193D 6E20636F6D70757465- <1>
  1887 00001946 72732C20616E64206E- <1>
  1888 0000194F 657665722073686F75- <1>
  1889 00001958 6C642E0A00          <1>
  1890                              <1> 
  1891 0000195D 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1892 00001966 53533A0A            <1>
  1893 0000196A 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1894 00001973 686174207761732073- <1>
  1895 0000197C 776974636865642074- <1>
  1896 00001985 6F20697320696E7661- <1>
  1897 0000198E 6C69642E204E6F7468- <1>
  1898 00001997 696E672066756E6E79- <1>
  1899 000019A0 20686572652E0A00    <1>
  1900                              <1> 		
  1901 000019A8 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1902 000019B1 6F742070726573656E- <1>
  1903 000019BA 743A0A              <1>
  1904 000019BD 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1905 000019C6 6E7420626974206F66- <1>
  1906 000019CF 20746865207365676D- <1>
  1907 000019D8 656E74206465736372- <1>
  1908 000019E1 6970746F7220697320- <1>
  1909 000019EA 73657420746F207A65- <1>
  1910 000019F3 726F2E0A00          <1>
  1911                              <1> 		
  1912 000019F8 537461636B20657863- <1> err12	db "Stack exception:",10
  1913 00001A01 657074696F6E3A0A    <1>
  1914 00001A09 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1915 00001A12 7363726970746F7220- <1>
  1916 00001A1B 697320696E76616C69- <1>
  1917 00001A24 64206F72206E6F7420- <1>
  1918 00001A2D 70726573656E74206F- <1>
  1919 00001A36 7220697473206C696D- <1>
  1920 00001A3F 697420697320746F6F- <1>
  1921 00001A48 20736D616C6C2E0A00  <1>
  1922                              <1> 		
  1923 00001A51 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1924 00001A5A 726F74656374696F6E- <1>
  1925 00001A63 2076696F6C6174696F- <1>
  1926 00001A6C 6E3A0A              <1>
  1927 00001A6F 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1928 00001A78 746564207468652063- <1>
  1929 00001A81 6F6D70757465722E20- <1>
  1930 00001A8A 537465702061776179- <1>
  1931 00001A93 20736C6F776C792E20- <1>
  1932 00001A9C 546865204642492069- <1>
  1933 00001AA5 73206F6E2069747320- <1>
  1934 00001AAE 7761792E0A00        <1>
  1935                              <1> 		
  1936 00001AB4 50616765206661756C- <1> err14	db "Page fault:",10
  1937 00001ABD 743A0A              <1>
  1938 00001AC0 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1939 00001AC9 746861742077617320- <1>
  1940 00001AD2 726571756573746564- <1>
  1941 00001ADB 20776173206E6F7420- <1>
  1942 00001AE4 617661696C61626C65- <1>
  1943 00001AED 2E0A00              <1>
  1944                              <1> 		
  1945 00001AF0 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1946 00001AF9 666F7220506C616E20- <1>
  1947 00001B02 523A0A              <1>
  1948 00001B05 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1949 00001B0E 727275707420697320- <1>
  1950 00001B17 726573657276656420- <1>
  1951 00001B20 666F72207573616765- <1>
  1952 00001B29 206F6E6C7920627920- <1>
  1953 00001B32 746865206D696C6974- <1>
  1954 00001B3B 617279207768656E20- <1>
  1955 00001B44 6974206973206E6563- <1>
  1956 00001B4D 6573736172790A      <1>
  1957 00001B54 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1958 00001B5D 746520612066756C6C- <1>
  1959 00001B66 2D7363616C6520636F- <1>
  1960 00001B6F 757020642782746174- <1>
  1961 00001B78 2E0A00              <1>
  1962                              <1> 		
  1963 00001B7B 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1964 00001B84 68656C6C206A757374- <1>
  1965 00001B8D 2068617070656E6564- <1>
  1966 00001B96 3F2049732065766572- <1>
  1967 00001B9F 796F6E65206F6B6179- <1>
  1968 00001BA8 3F2048617264206472- <1>
  1969 00001BB1 6976653F2056696465- <1>
  1970 00001BBA 6F20636172643F0A    <1>
  1971 00001BC2 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1972 00001BCB 726520796F75207468- <1>
  1973 00001BD4 6572653F0A00        <1>
  1974                              <1> %else
  1975                              <1> unhand:	
  1976                              <1> 	%assign i 0
  1977                              <1> 	%rep 32
  1978                              <1> 	mov byte [intprob], i
  1979                              <1> 	jmp unhand2
  1980                              <1> 	%assign i i+1
  1981                              <1> 	%endrep
  1982                              <1> unhand2:
  1983                              <1> 	cmp byte [intprob], 3
  1984                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1985                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1986                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1987                              <1> 	mov bl, [intprob]
  1988                              <1> 	jmp exitprog
  1989                              <1> intprob db 0
  1990                              <1> %endif
  1991                                      %include "source/ints.asm"
  1992                              <1> newints:	;for great justice
  1993 00001BDA 80FC00              <1> 	cmp ah, 0
  1994 00001BDD 0F847F000000        <1> 	je near intx0   ;kills app
  1995 00001BE3 80FC01              <1> 	cmp ah, 1
  1996 00001BE6 0F84FE000000        <1> 	je near intx1   ;print string
  1997 00001BEC 80FC02              <1> 	cmp ah, 2
  1998 00001BEF 0F8450010000        <1> 	je near intx2	;read string
  1999 00001BF5 80FC03              <1> 	cmp ah, 3
  2000 00001BF8 0F8470010000        <1> 	je near intx3	;clear screen
  2001 00001BFE 80FC04              <1> 	cmp ah, 4
  2002 00001C01 0F84E5010000        <1> 	je near intx4	;read and print string
  2003 00001C07 80FC05              <1> 	cmp ah, 5
  2004 00001C0A 0F8458050000        <1> 	je near intx5	;get char
  2005 00001C10 80FC06              <1> 	cmp ah, 6
  2006 00001C13 0F84AA050000        <1> 	je near intx6	;print char
  2007 00001C19 80FC07              <1> 	cmp ah, 7
  2008 00001C1C 0F848C070000        <1> 	je near intx7	;read file
  2009                              <1> ;	cmp ah, 8
  2010                              <1> ;	je near intx8	;write file
  2011 00001C22 80FC09              <1> 	cmp ah, 9
  2012 00001C25 0F848D070000        <1> 	je near intx9	;convert number to string
  2013 00001C2B 80FC0A              <1> 	cmp ah, 10
  2014 00001C2E 0F849C070000        <1> 	je near intx10	;convert string to number
  2015                              <1> %ifdef threads.included
  2016 00001C34 80FC0B              <1> 	cmp ah, 11
  2017 00001C37 0F849D070000        <1> 	je near intx11	;create thread
  2018                              <1> %endif
  2019 00001C3D 80FC0C              <1> 	cmp ah, 12
  2020 00001C40 0F846B080000        <1> 	je near intx12	;get time
  2021 00001C46 80FC0D              <1> 	cmp ah, 13
  2022 00001C49 0F8477080000        <1> 	je near intx13	;set time
  2023 00001C4F 80FC0E              <1> 	cmp ah, 14
  2024 00001C52 0F847E080000        <1> 	je near intx14	;run program
  2025 00001C58 80FC0F              <1> 	cmp ah, 15
  2026 00001C5B 0F848A080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2027 00001C61 C3                  <1> 	ret
  2028                              <1> 	
  2029                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2030                              <1> intx0:
  2031                              <1> 	%include 'source/interrupts/0_exit.asm'
  2032                              <2> exitprog:
  2033 00001C62 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2034 00001C66 8ED8                <2> 	mov ds, ax
  2035 00001C68 8EC0                <2> 	mov es, ax
  2036 00001C6A 8EE0                <2> 	mov fs, ax
  2037 00001C6C 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2038 00001C70 8EE8                <2> 	mov gs, ax
  2039 00001C72 C705[2D610000]0000- <2> 	mov dword [currentthread], 0
  2040 00001C7A 0000                <2>
  2041 00001C7C C705[28610000]0400- <2> 	mov dword [lastthread], 4
  2042 00001C84 0000                <2>
  2043 00001C86 C605[2C610000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2044 00001C8D 8B25[6EA40000]      <2> 	mov esp, [previousstack] ;and this
  2045 00001C93 81FB00000000        <2> 	cmp ebx, 0
  2046 00001C99 0F8501000000        <2> 	jne near .error
  2047 00001C9F C3                  <2> 	ret
  2048                              <2> .error:
  2049 00001CA0 89D9                <2> 	mov ecx, ebx
  2050 00001CA2 B006                <2> 	mov al, 6
  2051 00001CA4 A2[F12D0000]        <2> 	mov [firsthexshown], al
  2052 00001CA9 51                  <2> 	push ecx
  2053 00001CAA BE[C51C0000]        <2> 	mov esi, .msg1
  2054 00001CAF E840000000          <2> 	call printhighlight
  2055 00001CB4 59                  <2> 	pop ecx
  2056 00001CB5 E84C110000          <2> 	call showhex
  2057 00001CBA BE[DA1C0000]        <2> 	mov esi, .msg2
  2058 00001CBF E830000000          <2> 	call printhighlight
  2059 00001CC4 C3                  <2> 	ret
  2060                              <2> 	
  2061 00001CC5 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2062 00001CCE 7461747573206F6620- <2>
  2063 00001CD7 307800              <2>
  2064 00001CDA 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2065 00001CE3 726E65642E0A00      <2>
  2066                              <1> intx1:
  2067                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2068 00001CEA E82A000000          <2> call printint
  2069 00001CEF E9A9E5FFFF          <2> jmp timerinterrupt
  2070                              <2> 
  2071                              <2> 	printhighlight:
  2072 00001CF4 6631C0              <2> 		xor ax, ax
  2073 00001CF7 66BBF000            <2> 		mov bx, 0xF0
  2074 00001CFB E919000000          <2> 		jmp printint
  2075                              <2> 	printquiet:
  2076 00001D00 6631C0              <2> 		xor ax, ax
  2077 00001D03 A2[441D0000]        <2> 		mov [endkeyprint], al
  2078 00001D08 66BB0700            <2> 		mov bx, 7
  2079 00001D0C E820000000          <2> 		call printint.b
  2080 00001D11 C3                  <2> 		ret
  2081                              <2>     print:
  2082 00001D12 6631C0              <2> 		xor ax, ax
  2083 00001D15 66BB0700            <2> 		mov bx, 7
  2084                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2085 00001D19 56                  <2> 		push esi
  2086 00001D1A A2[441D0000]        <2> 		mov [endkeyprint], al
  2087 00001D1F E80D000000          <2> 		call .b
  2088 00001D24 89F1                <2> 		mov ecx, esi
  2089 00001D26 5F                  <2> 		pop edi
  2090 00001D27 29F9                <2> 		sub ecx, edi
  2091 00001D29 51                  <2> 		push ecx
  2092 00001D2A E8EC070000          <2> 		call termcopy
  2093 00001D2F 59                  <2> 		pop ecx
  2094 00001D30 C3                  <2> 		ret
  2095                              <2> 	.b:
  2096 00001D31 8A06                <2> 		mov al, [esi]
  2097 00001D33 3A05[441D0000]      <2> 		cmp al, [endkeyprint]
  2098 00001D39 7408                <2> 		je .done
  2099 00001D3B E8A8040000          <2> 		call prcharq
  2100 00001D40 46                  <2> 		inc esi
  2101 00001D41 EBEE                <2> 		jmp .b
  2102                              <2> 	.done:
  2103 00001D43 C3                  <2> 		ret
  2104                              <2> 
  2105 00001D44 00                  <2> endkeyprint db 0
  2106                              <1> intx2:
  2107                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2108 00001D45 E805000000          <2> call readint
  2109 00001D4A E94EE5FFFF          <2> jmp timerinterrupt
  2110                              <2> 
  2111                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2112 00001D4F 89C3                <2> 		mov ebx, eax
  2113                              <2> 	.b:
  2114 00001D51 53                  <2> 		push ebx
  2115 00001D52 57                  <2> 		push edi
  2116 00001D53 56                  <2> 		push esi
  2117 00001D54 30C0                <2> 		xor al, al
  2118 00001D56 E819040000          <2> 		call rdcharint
  2119 00001D5B 5E                  <2> 		pop esi
  2120 00001D5C 8806                <2> 		mov [esi], al
  2121 00001D5E 46                  <2> 		inc esi
  2122 00001D5F 5F                  <2> 		pop edi
  2123 00001D60 5B                  <2> 		pop ebx
  2124 00001D61 39FE                <2> 		cmp esi, edi
  2125 00001D63 7304                <2> 		jae .done
  2126 00001D65 38D8                <2> 		cmp al, bl
  2127 00001D67 75E8                <2> 		jne .b
  2128                              <2> 	.done:
  2129 00001D69 4E                  <2> 		dec esi
  2130 00001D6A C60600              <2> 		mov byte [esi], 0
  2131 00001D6D C3                  <2> 		ret
  2132                              <1> intx3:
  2133                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2134 00001D6E E805000000          <2> call clear
  2135 00001D73 E925E5FFFF          <2> jmp timerinterrupt
  2136                              <2> %ifdef io.serial
  2137                              <2> clear:
  2138                              <2> 	ret
  2139                              <2> %else
  2140                              <2> clear:		
  2141 00001D78 668B0D[AA230000]    <2> 		mov cx, [charxy]
  2142 00001D7F BF[04D62800]        <2> 		mov edi, videobuf
  2143 00001D84 6631C0              <2> 		xor ax, ax
  2144 00001D87 66A3[A4230000]      <2> 		mov [linebeginpos], ax
  2145 00001D8D 66A3[A6230000]      <2> 		mov [videobufpos], ax
  2146 00001D93 6631D2              <2> 		xor dx, dx
  2147 00001D96 66A3[A8230000]      <2> 		mov [charpos], ax
  2148 00001D9C B407                <2> 		mov ah, 7
  2149                              <2> 	clearb:
  2150 00001D9E 668907              <2> 		mov [edi], ax
  2151 00001DA1 81C702000000        <2> 		add edi, 2
  2152 00001DA7 FEC9                <2> 		dec cl
  2153 00001DA9 80F900              <2> 		cmp cl, 0
  2154 00001DAC 75F0                <2> 		jne clearb
  2155 00001DAE 8A0D[AA230000]      <2> 		mov cl, [charxy]
  2156 00001DB4 FECD                <2> 		dec ch
  2157 00001DB6 80FD00              <2> 		cmp ch, 0
  2158 00001DB9 75E3                <2> 		jne clearb
  2159                              <2> 	cleardouble:
  2160 00001DBB BF[A8402900]        <2> 		mov edi, videobuf2
  2161 00001DC0 668B0D[AA230000]    <2> 		mov cx, [charxy]
  2162 00001DC7 31C0                <2> 		xor eax, eax
  2163                              <2> 	clearc:
  2164 00001DC9 8907                <2> 		mov [edi], eax
  2165 00001DCB 81C704000000        <2> 		add edi, 4
  2166 00001DD1 80E902              <2> 		sub cl, 2
  2167 00001DD4 80F900              <2> 		cmp cl, 0
  2168 00001DD7 75F0                <2> 		jne clearc
  2169 00001DD9 8A0D[AA230000]      <2> 		mov cl, [charxy]
  2170 00001DDF FECD                <2> 		dec ch
  2171 00001DE1 80FD00              <2> 		cmp ch, 0
  2172 00001DE4 75E3                <2> 		jne clearc
  2173 00001DE6 E830070000          <2> 		call termcopy
  2174 00001DEB C3                  <2> 		ret
  2175                              <2> %endif
  2176                              <2> 		
  2177                              <1> intx4:
  2178                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2179 00001DEC E809000000          <2> call rdprint
  2180 00001DF1 E9A7E4FFFF          <2> jmp timerinterrupt
  2181                              <2> 
  2182                              <2> readline:
  2183 00001DF6 B00A                <2>   mov al, 10
  2184 00001DF8 B307                <2>   mov bl, 7
  2185                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2186 00001DFA 8935[5D210000]      <2> 		mov [buftxtloc], esi
  2187 00001E00 A2[55210000]        <2> 		mov [endkeyrdpr], al
  2188 00001E05 881D[56210000]      <2> 		mov [modkeyrdpr], bl
  2189 00001E0B 8935[57210000]      <2> 		mov [firstesirdpr], esi
  2190 00001E11 893D[61210000]      <2> 		mov [endbufferrdpr], edi
  2191                              <2> 	rdprintb:
  2192 00001E17 56                  <2> 		push esi
  2193 00001E18 B001                <2> 		mov al, 1
  2194 00001E1A E855030000          <2> 		call rdcharint
  2195 00001E1F 5E                  <2> 		pop esi
  2196                              <2> %ifdef io.serial
  2197                              <2> 		cmp ah, 0x41
  2198                              <2> 		je near rdprup
  2199                              <2> 		cmp ah, 0x42
  2200                              <2> 		je near rdprdown
  2201                              <2> 		cmp ah, 0x43
  2202                              <2> 		je near rdprright
  2203                              <2> 		cmp ah, 0x44
  2204                              <2> 		je near rdprleft
  2205                              <2> 		cmp ah, 0x31
  2206                              <2> 		je near rdprhome
  2207                              <2> 		cmp ah, 0x48
  2208                              <2> 		je near rdprhome
  2209                              <2> 		cmp ah, 0x46
  2210                              <2> 		je near rdprend
  2211                              <2> 		cmp ah, 0x33
  2212                              <2> 		je near rdprdel
  2213                              <2> 		cmp ah, 0x34
  2214                              <2> 		je near rdprend
  2215                              <2> %else
  2216 00001E20 803D[A0580000]E0    <2> 		cmp byte [specialkey], 0xE0
  2217 00001E27 751B                <2> 		jne notspecialrdprnt
  2218 00001E29 80FC53              <2> 		cmp ah, 0x53
  2219 00001E2C 0F84E8020000        <2> 		je near rdprdel
  2220 00001E32 80FC47              <2> 		cmp ah, 0x47
  2221 00001E35 0F8407010000        <2> 		je near rdprhome
  2222 00001E3B 80FC4F              <2> 		cmp ah, 0x4F
  2223 00001E3E 0F841D010000        <2> 		je near rdprend
  2224                              <2> 	notspecialrdprnt:
  2225 00001E44 80FC48              <2> 		cmp ah, 0x48
  2226 00001E47 0F84D5010000        <2> 		je near rdprup
  2227 00001E4D 80FC50              <2> 		cmp ah, 0x50
  2228 00001E50 0F84AF010000        <2> 		je near rdprdown
  2229 00001E56 80FC4D              <2> 		cmp ah, 0x4D
  2230 00001E59 0F845E010000        <2> 		je near rdprright
  2231 00001E5F 80FC4B              <2> 		cmp ah, 0x4B
  2232 00001E62 0F8416010000        <2> 		je near rdprleft
  2233                              <2> %endif
  2234 00001E68 3C08                <2> 		cmp al, 8
  2235 00001E6A 0F84C5020000        <2> 		je near rdprbscheck
  2236 00001E70 3C00                <2> 		cmp al, 0
  2237 00001E72 74A3                <2> 		je rdprintb
  2238 00001E74 80FC00              <2> 		cmp ah, 0
  2239 00001E77 749E                <2> 		je rdprintb
  2240 00001E79 8806                <2> 		mov [esi], al
  2241 00001E7B 46                  <2> 		inc esi
  2242                              <2> 	bscheckequal:
  2243 00001E7C 8A1D[56210000]      <2> 		mov bl, [modkeyrdpr]
  2244 00001E82 8A3D[5C210000]      <2> 		mov bh, [txtmask]
  2245 00001E88 80FF00              <2> 		cmp bh, 0
  2246 00001E8B 7404                <2> 		je nomasktxt
  2247 00001E8D 88F8                <2> 		mov al, bh
  2248 00001E8F 30FF                <2> 		xor bh, bh
  2249                              <2> 	nomasktxt:
  2250 00001E91 E841030000          <2> 		call prcharint
  2251 00001E96 56                  <2> 		push esi
  2252 00001E97 66A3[53210000]      <2> 		mov [axcache], ax
  2253 00001E9D 8A25[55210000]      <2> 		mov ah, [endkeyrdpr]
  2254 00001EA3 38E0                <2> 		cmp al, ah
  2255 00001EA5 7429                <2> 		je nobackprintbuftxt2
  2256 00001EA7 BE[EEB60000]        <2> 		mov esi, buftxt2
  2257 00001EAC E84FFEFFFF          <2> 		call printquiet
  2258 00001EB1 B020                <2> 		mov al, " "
  2259 00001EB3 E830030000          <2> 		call prcharq
  2260 00001EB8 B008                <2> 		mov al, 8
  2261 00001EBA 81FE[EEB60000]      <2> 		cmp esi, buftxt2
  2262 00001EC0 740E                <2> 		je nobackprintbuftxt2
  2263                              <2> 	backprintbuftxt2:
  2264 00001EC2 E821030000          <2> 		call prcharq
  2265 00001EC7 4E                  <2> 		dec esi
  2266 00001EC8 81FE[EEB60000]      <2> 		cmp esi, buftxt2
  2267 00001ECE 77F2                <2> 		ja backprintbuftxt2
  2268                              <2> 	nobackprintbuftxt2:
  2269 00001ED0 3C0A                <2> 		cmp al, 10
  2270 00001ED2 7405                <2> 		je nonobackprint
  2271 00001ED4 E8FE020000          <2> 		call prcharint
  2272                              <2> 	nonobackprint:
  2273 00001ED9 5E                  <2> 		pop esi
  2274 00001EDA 3B35[61210000]      <2> 		cmp esi, [endbufferrdpr]
  2275 00001EE0 0F8319000000        <2> 		jae near donerdprinc
  2276 00001EE6 66A1[53210000]      <2> 		mov ax, [axcache]
  2277 00001EEC 8A25[55210000]      <2> 		mov ah, [endkeyrdpr]
  2278 00001EF2 38E0                <2> 		cmp al, ah
  2279 00001EF4 0F851DFFFFFF        <2> 		jne rdprintb
  2280 00001EFA E901000000          <2> 		jmp donerdprint
  2281                              <2> 	donerdprinc:
  2282 00001EFF 46                  <2> 		inc esi
  2283                              <2> 	donerdprint:
  2284 00001F00 4E                  <2> 		dec esi
  2285 00001F01 BF[EEB60000]        <2> 		mov edi, buftxt2
  2286                              <2> 	copylaterstuff:
  2287 00001F06 8A07                <2> 		mov al, [edi]
  2288 00001F08 3C00                <2> 		cmp al, 0
  2289 00001F0A 7406                <2> 		je nocopylaterstuff
  2290 00001F0C 8806                <2> 		mov [esi], al
  2291 00001F0E 47                  <2> 		inc edi
  2292 00001F0F 46                  <2> 		inc esi
  2293 00001F10 EBF4                <2> 		jmp copylaterstuff
  2294                              <2> 	nocopylaterstuff:
  2295 00001F12 C60600              <2> 		mov byte [esi], 0
  2296 00001F15 E80B000000          <2> 		call clearbuftxt2
  2297 00001F1A 89F1                <2> 		mov ecx, esi
  2298 00001F1C 8B3D[57210000]      <2> 		mov edi, [firstesirdpr]
  2299 00001F22 29F9                <2> 		sub ecx, edi
  2300 00001F24 C3                  <2> 		ret
  2301                              <2> 	
  2302                              <2> 	clearbuftxt2:
  2303 00001F25 30C0                <2> 		xor al, al
  2304 00001F27 BF[EEB60000]        <2> 		mov edi, buftxt2
  2305                              <2> 	clearbuftxt2lp:
  2306 00001F2C 8807                <2> 		mov [edi], al
  2307 00001F2E 47                  <2> 		inc edi
  2308 00001F2F 81FF[EEBA0000]      <2> 		cmp edi, buftxt
  2309 00001F35 75F5                <2> 		jne clearbuftxt2lp
  2310 00001F37 C3                  <2> 		ret
  2311                              <2> 	
  2312                              <2> 	rdprintb2:
  2313 00001F38 E8DE050000          <2> 		call termcopy
  2314 00001F3D E9D5FEFFFF          <2> 		jmp rdprintb
  2315                              <2> 	
  2316                              <2> 	rdprhome:
  2317 00001F42 3B35[5D210000]      <2> 		cmp esi, [buftxtloc]
  2318 00001F48 0F84EAFFFFFF        <2> 		je near rdprintb2
  2319 00001F4E BF[EEB60000]        <2> 		mov edi, buftxt2
  2320 00001F53 8A07                <2> 		mov al, [edi]
  2321 00001F55 E846000000          <2> 		call shiftbuftxt2
  2322 00001F5A E889020000          <2> 		call prcharq
  2323 00001F5F EBE1                <2> 		jmp rdprhome
  2324                              <2> 		
  2325                              <2> 	rdprend:
  2326 00001F61 BF[EEB60000]        <2> 		mov edi, buftxt2
  2327 00001F66 8A07                <2> 		mov al, [edi]
  2328 00001F68 3C00                <2> 		cmp al, 0
  2329 00001F6A 0F84C8FFFFFF        <2> 		je near rdprintb2
  2330 00001F70 8806                <2> 		mov [esi], al
  2331 00001F72 E866000000          <2> 		call shiftbuftxt2lft
  2332 00001F77 E86C020000          <2> 		call prcharq
  2333 00001F7C EBE3                <2> 		jmp rdprend
  2334                              <2> 	
  2335                              <2> 	rdprleft:
  2336 00001F7E 3B35[5D210000]      <2> 		cmp esi, [buftxtloc]
  2337 00001F84 0F848DFEFFFF        <2> 		je near rdprintb
  2338 00001F8A BF[EEB60000]        <2> 		mov edi, buftxt2
  2339 00001F8F 8A07                <2> 		mov al, [edi]
  2340 00001F91 E80A000000          <2> 		call shiftbuftxt2
  2341 00001F96 E83C020000          <2> 		call prcharint
  2342 00001F9B E977FEFFFF          <2> 		jmp rdprintb
  2343                              <2> 	shiftbuftxt2:
  2344 00001FA0 3C00                <2> 		cmp al, 0
  2345 00001FA2 7409                <2> 		je noshiftbuftxt2
  2346 00001FA4 47                  <2> 		inc edi
  2347 00001FA5 8A27                <2> 		mov ah, [edi]
  2348 00001FA7 8807                <2> 		mov [edi], al
  2349 00001FA9 88E0                <2> 		mov al, ah
  2350 00001FAB EBF3                <2> 		jmp shiftbuftxt2
  2351                              <2> 	noshiftbuftxt2:
  2352 00001FAD BF[EEB60000]        <2> 		mov edi, buftxt2
  2353 00001FB2 4E                  <2> 		dec esi
  2354 00001FB3 8A06                <2> 		mov al, [esi]
  2355 00001FB5 8807                <2> 		mov [edi], al
  2356 00001FB7 C60600              <2> 		mov byte [esi], 0
  2357 00001FBA B008                <2> 		mov al, 8
  2358 00001FBC C3                  <2> 		ret
  2359                              <2> 		
  2360                              <2> 	rdprright:
  2361 00001FBD BF[EEB60000]        <2> 		mov edi, buftxt2
  2362 00001FC2 8A07                <2> 		mov al, [edi]
  2363 00001FC4 3C00                <2> 		cmp al, 0
  2364 00001FC6 0F844BFEFFFF        <2> 		je near rdprintb
  2365 00001FCC 8806                <2> 		mov [esi], al
  2366 00001FCE E80A000000          <2> 		call shiftbuftxt2lft
  2367 00001FD3 E8FF010000          <2> 		call prcharint
  2368 00001FD8 E93AFEFFFF          <2> 		jmp rdprintb
  2369                              <2> 	shiftbuftxt2lft:
  2370 00001FDD 3C00                <2> 		cmp al, 0
  2371 00001FDF 7408                <2> 		je noshiftbuftxt2lft
  2372 00001FE1 47                  <2> 		inc edi
  2373 00001FE2 8A07                <2> 		mov al, [edi]
  2374 00001FE4 8847FF              <2> 		mov [edi - 1], al
  2375 00001FE7 EBF4                <2> 		jmp shiftbuftxt2lft
  2376                              <2> 	noshiftbuftxt2lft:
  2377 00001FE9 8A06                <2> 		mov al, [esi]
  2378 00001FEB 46                  <2> 		inc esi
  2379 00001FEC 8A1D[56210000]      <2> 		mov bl, [modkeyrdpr]
  2380 00001FF2 C3                  <2> 		ret
  2381                              <2> 		
  2382                              <2> 	rdprdownbck:
  2383 00001FF3 FECC                <2> 		dec ah
  2384 00001FF5 8825[5B210000]      <2> 		mov [commandedit], ah
  2385 00001FFB E83A000000          <2> 		call rdprbckspc
  2386 00002000 E912FEFFFF          <2> 		jmp rdprintb
  2387                              <2> 	
  2388                              <2> 	rdprdown:
  2389 00002005 8A25[5B210000]      <2> 		mov ah, [commandedit]
  2390 0000200B 80FC01              <2> 		cmp ah, 1
  2391 0000200E 0F8603FEFFFF        <2> 		jbe near rdprintb
  2392 00002014 80FC02              <2> 		cmp ah, 2
  2393 00002017 74DA                <2> 		je rdprdownbck
  2394 00002019 80EC02              <2> 		sub ah, 2
  2395 0000201C 8825[5B210000]      <2> 		mov [commandedit], ah
  2396                              <2> 		
  2397                              <2> 	rdprup:
  2398 00002022 30C0                <2> 		xor al, al
  2399 00002024 3805[5B210000]      <2> 		cmp [commandedit], al
  2400 0000202A 0F84E7FDFFFF        <2> 		je near rdprintb
  2401 00002030 E805000000          <2> 		call rdprbckspc
  2402 00002035 E941000000          <2> 		jmp getcurrentcommandstr
  2403                              <2> 	rdprbckspc:
  2404 0000203A 3B35[5D210000]      <2> 		cmp esi, [buftxtloc]
  2405 00002040 742B                <2> 		je nordprupbck
  2406                              <2> 	rdprupbckspclp:
  2407 00002042 B008                <2> 		mov al, 8
  2408 00002044 8A1D[56210000]      <2> 		mov bl, [modkeyrdpr]
  2409 0000204A E899010000          <2> 		call prcharq
  2410 0000204F B020                <2> 		mov al, ' '
  2411 00002051 E892010000          <2> 		call prcharq
  2412 00002056 B008                <2> 		mov al, 8
  2413 00002058 E88B010000          <2> 		call prcharq
  2414 0000205D 4E                  <2> 		dec esi
  2415 0000205E 3B35[5D210000]      <2> 		cmp esi, [buftxtloc]
  2416 00002064 7402                <2> 		je nordprupbck2
  2417 00002066 EBDA                <2> 		jmp rdprupbckspclp
  2418                              <2> 	nordprupbck2:
  2419 00002068 E8AE040000          <2> 		call termcopy
  2420                              <2> 	nordprupbck:
  2421 0000206D 8B3D[50AB2900]      <2> 		mov edi, [commandbufpos]
  2422 00002073 81C7[54AB2900]      <2> 		add edi, commandbuf
  2423 00002079 4F                  <2> 		dec edi
  2424 0000207A C3                  <2> 		ret
  2425                              <2> 	getcurrentcommandstr:
  2426 0000207B 8A25[5B210000]      <2> 		mov ah, [commandedit]
  2427 00002081 FE05[5B210000]      <2> 		inc byte [commandedit]
  2428                              <2> 	getccmdlp:
  2429 00002087 4F                  <2> 		dec edi
  2430 00002088 8A07                <2> 		mov al, [edi]
  2431 0000208A 81FF[54AB2900]      <2> 		cmp edi, commandbuf
  2432 00002090 7231                <2> 		jb getcmdresetcommandbuf
  2433 00002092 81EF[54AB2900]      <2> 		sub edi, commandbuf
  2434 00002098 3B3D[50AB2900]      <2> 		cmp edi, [commandbufpos]
  2435 0000209E 0F8473FDFFFF        <2> 		je near rdprintb
  2436 000020A4 81C7[54AB2900]      <2> 		add edi, commandbuf
  2437 000020AA 3C00                <2> 		cmp al, 0
  2438 000020AC 75D9                <2> 		jne getccmdlp
  2439 000020AE FECC                <2> 		dec ah
  2440 000020B0 80FC00              <2> 		cmp ah, 0
  2441 000020B3 77D2                <2> 		ja getccmdlp
  2442 000020B5 47                  <2> 		inc edi
  2443 000020B6 81FF[54BB2900]      <2> 		cmp edi, commandbufend
  2444 000020BC 770D                <2> 		ja fixcmdbufb4morerdpr
  2445 000020BE E915000000          <2> 		jmp morerdprup
  2446                              <2> 	getcmdresetcommandbuf:
  2447 000020C3 BF[54BB2900]        <2> 		mov edi, commandbufend
  2448 000020C8 47                  <2> 		inc edi
  2449 000020C9 EBBC                <2> 		jmp getccmdlp
  2450                              <2> 	fixcmdbufb4morerdpr:
  2451 000020CB 4F                  <2> 		dec edi
  2452 000020CC 81EF[54BB2900]      <2> 		sub edi, commandbufend
  2453 000020D2 81C7[54AB2900]      <2> 		add edi, commandbuf
  2454                              <2> 	morerdprup:
  2455 000020D8 8A07                <2> 		mov al, [edi]
  2456 000020DA 47                  <2> 		inc edi
  2457 000020DB 81EF[54AB2900]      <2> 		sub edi, commandbuf
  2458 000020E1 3C00                <2> 		cmp al, 0
  2459 000020E3 0F844FFEFFFF        <2> 		je near rdprintb2
  2460 000020E9 3B3D[50AB2900]      <2> 		cmp edi, [commandbufpos]
  2461 000020EF 0F8343FEFFFF        <2> 		jae near rdprintb2
  2462 000020F5 81C7[54AB2900]      <2> 		add edi, commandbuf
  2463 000020FB 8806                <2> 		mov [esi], al
  2464 000020FD 46                  <2> 		inc esi
  2465 000020FE 57                  <2> 		push edi
  2466 000020FF 8A1D[56210000]      <2> 		mov bl, [modkeyrdpr]
  2467 00002105 E8DE000000          <2> 		call prcharq
  2468 0000210A 5F                  <2> 		pop edi
  2469 0000210B 81FF[54BB2900]      <2> 		cmp edi, commandbufend
  2470 00002111 76C5                <2> 		jbe morerdprup
  2471 00002113 BF[54AB2900]        <2> 		mov edi, commandbuf
  2472 00002118 EBBE                <2> 		jmp morerdprup
  2473                              <2> 		
  2474                              <2> 	rdprdel:
  2475 0000211A BF[EEB60000]        <2> 		mov edi, buftxt2
  2476 0000211F 8A07                <2> 		mov al, [edi]
  2477 00002121 3C00                <2> 		cmp al, 0
  2478 00002123 0F84EEFCFFFF        <2> 		je near rdprintb
  2479 00002129 8806                <2> 		mov [esi], al
  2480 0000212B E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2481 00002130 E8B3000000          <2> 		call prcharq
  2482                              <2> 		
  2483                              <2> 	rdprbscheck:
  2484 00002135 3B35[57210000]      <2> 		cmp esi, [firstesirdpr]
  2485 0000213B 7705                <2> 		ja goodbscheck
  2486 0000213D E9D5FCFFFF          <2> 		jmp rdprintb
  2487                              <2> 	goodbscheck:
  2488 00002142 4E                  <2> 		dec esi
  2489 00002143 C60600              <2> 		mov byte [esi], 0
  2490 00002146 8A1D[56210000]      <2> 		mov bl, [modkeyrdpr]
  2491 0000214C B008                <2> 		mov al, 8
  2492 0000214E E929FDFFFF          <2> 		jmp bscheckequal
  2493                              <2> 		
  2494 00002153 0000                <2> axcache dw 0
  2495 00002155 00                  <2> endkeyrdpr db 0
  2496 00002156 00                  <2> modkeyrdpr db 0
  2497 00002157 00000000            <2> firstesirdpr dd 0
  2498 0000215B 00                  <2> commandedit db 0
  2499 0000215C 00                  <2> txtmask db 0
  2500 0000215D 00000000            <2> buftxtloc dd 0
  2501 00002161 00000000            <2> endbufferrdpr dd 0
  2502 00002165 082000              <2> backcursor db 8," ",0
  2503                              <1> intx5:
  2504                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2505 00002168 E807000000          <2> 	call rdcharint
  2506 0000216D E92BE1FFFF          <2> 	jmp timerinterrupt
  2507                              <2> getchar:
  2508 00002172 30C0                <2> 	xor al, al
  2509                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2510 00002174 C605[C2210000]01    <2> 		mov byte [trans], 1
  2511 0000217B 3C00                <2> 		cmp al, 0
  2512 0000217D 7507                <2> 		jne transcheck
  2513 0000217F C605[C2210000]00    <2> 		mov byte [trans], 0
  2514                              <2> 	transcheck:
  2515                              <2> 	%ifdef io.serial
  2516                              <2> 		call serial.receive
  2517                              <2> 		cmp al, 13
  2518                              <2> 		je rdenter
  2519                              <2> 	%else
  2520 00002186 E835370000          <2> 		call getkey
  2521 0000218B 66A1[C0210000]      <2> 		mov ax, [lastkey]
  2522 00002191 80FC1C              <2> 		cmp ah, 0x1C
  2523 00002194 741F                <2> 		je rdenter
  2524                              <2> 	%endif
  2525 00002196 8A3D[C2210000]      <2> 		mov bh, [trans]
  2526 0000219C 803D[A0580000]E0    <2> 		cmp byte [specialkey], 0xE0
  2527 000021A3 7504                <2> 		jne nospecialtrans
  2528 000021A5 88C3                <2> 		mov bl, al
  2529 000021A7 30C0                <2> 		xor al, al
  2530                              <2> 	nospecialtrans:
  2531 000021A9 08C7                <2> 		or bh, al
  2532 000021AB 80FF00              <2> 		cmp bh, 0
  2533 000021AE 74D6                <2> 		je transcheck
  2534 000021B0 E90A000000          <2> 		jmp rdend
  2535                              <2> 	rdenter:
  2536 000021B5 B41C                <2> 		mov ah, 0x1C
  2537 000021B7 B00A                <2> 		mov al, 10
  2538 000021B9 66A3[C0210000]      <2> 		mov [lastkey], ax
  2539                              <2> 	rdend:
  2540 000021BF C3                  <2> 		ret
  2541                              <2> 		
  2542 000021C0 0000                <2> lastkey db 0,0
  2543 000021C2 00                  <2> trans db 0
  2544                              <1> intx6:
  2545                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2546                              <2> %ifdef io.serial
  2547                              <2> 	cmp bl, bh
  2548                              <2> 	call prcharint
  2549                              <2> 	jmp timerinterrupt
  2550                              <2> prcharint:	
  2551                              <2> prcharq:
  2552                              <2> 	call serial.send
  2553                              <2> 	ret
  2554                              <2> %else
  2555 000021C3 38FB                <2> cmp bl, bh
  2556 000021C5 740A                <2> je prchar.notimer
  2557 000021C7 E80B000000          <2> call prcharint
  2558 000021CC E9CCE0FFFF          <2> jmp timerinterrupt
  2559                              <2> prchar.notimer:
  2560 000021D1 E812000000          <2> 	call prcharq
  2561 000021D6 CF                  <2> 	iret
  2562                              <2> 	
  2563                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2564 000021D7 38FB                <2> 	cmp bl, bh
  2565 000021D9 740D                <2> 	je prcharq
  2566 000021DB E808000000          <2> 	call prcharq
  2567 000021E0 E836030000          <2> 	call termcopy
  2568 000021E5 C3                  <2> 	ret
  2569 000021E6 00                  <2> termguion db 0
  2570 000021E7 00                  <2> termcopyon db 0
  2571                              <2> prcharq:
  2572 000021E8 88DC                <2> 	mov ah, bl
  2573 000021EA 66A3[AC230000]      <2> 	mov [charbuf], ax
  2574 000021F0 31DB                <2> 	xor ebx, ebx
  2575 000021F2 668B1D[A6230000]    <2> 	mov bx, [videobufpos]
  2576 000021F9 BF[04D62800]        <2> 	mov edi, videobuf
  2577 000021FE 01DF                <2> 	add edi, ebx
  2578 00002200 66A1[28250000]      <2> 	mov ax, [removedvideo]
  2579 00002206 668907              <2> 	mov [edi], ax
  2580 00002209 66A1[AC230000]      <2> 	mov ax, [charbuf]
  2581 0000220F 31D2                <2> 	xor edx, edx
  2582 00002211 668B15[A8230000]    <2> 	mov dx, [charpos]
  2583 00002218 31C9                <2> 	xor ecx, ecx
  2584 0000221A 668B0D[AA230000]    <2> 	mov cx, [charxy]
  2585 00002221 3C09                <2> 	cmp al, 9
  2586 00002223 0F8463000000        <2> 	je near prtab
  2587 00002229 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2588 0000222B 0F848B000000        <2> 	je near prcr
  2589 00002231 3C0A                <2> 	cmp al, 10
  2590 00002233 0F84B7000000        <2> 	je near prnlcr
  2591 00002239 3C08                <2> 	cmp al, 8
  2592 0000223B 0F848F000000        <2> 	je near prbs
  2593 00002241 3CFF                <2> 	cmp al, 255		;;null character
  2594 00002243 0F841B000000        <2> 	je near donescr
  2595 00002249 668907              <2> 	mov [edi], ax
  2596 0000224C 81C702000000        <2> 	add edi, 2
  2597 00002252 FEC2                <2> 	inc dl
  2598                              <2> donecrnl:
  2599 00002254 38CA                <2> 	cmp dl, cl
  2600 00002256 0F83B9000000        <2> 	jae near preol
  2601                              <2> doneeol:
  2602 0000225C 38EE                <2> 	cmp dh, ch
  2603 0000225E 0F83CF000000        <2> 	jae near prscr	
  2604                              <2> donescr:
  2605 00002264 89FB                <2> 	mov ebx, edi
  2606 00002266 668B07              <2> 	mov ax, [edi]
  2607 00002269 66A3[28250000]      <2> 	mov [removedvideo], ax
  2608 0000226F 81EB[04D62800]      <2> 	sub ebx, videobuf
  2609 00002275 66891D[A6230000]    <2> 	mov [videobufpos], bx
  2610 0000227C 668915[A8230000]    <2> 	mov [charpos], dx
  2611 00002283 66A1[AC230000]      <2> 	mov ax, [charbuf]
  2612 00002289 88E3                <2> 	mov bl, ah
  2613 0000228B C3                  <2> 	ret
  2614                              <2> 	
  2615                              <2> 	prtab:
  2616 0000228C 31DB                <2> 		xor ebx, ebx
  2617 0000228E 668B1D[A4230000]    <2> 		mov bx, [linebeginpos]
  2618 00002295 81EF[04D62800]      <2> 		sub edi, videobuf
  2619 0000229B 29DF                <2> 		sub edi, ebx
  2620 0000229D C1EF04              <2> 		shr edi, 4
  2621 000022A0 C1E704              <2> 		shl edi, 4
  2622 000022A3 81C710000000        <2> 		add edi, 16
  2623 000022A9 C0EA03              <2> 		shr dl, 3
  2624 000022AC C0E203              <2> 		shl dl, 3
  2625 000022AF 80C208              <2> 		add dl, 8
  2626 000022B2 81C7[04D62800]      <2> 		add edi, videobuf
  2627 000022B8 01DF                <2> 		add edi, ebx
  2628 000022BA EB98                <2> 		jmp donecrnl
  2629                              <2> 	
  2630                              <2> 	prcr:
  2631 000022BC 30D2                <2> 		xor dl, dl
  2632 000022BE 31DB                <2> 		xor ebx, ebx
  2633 000022C0 BF[04D62800]        <2> 		mov edi, videobuf
  2634 000022C5 668B1D[A4230000]    <2> 		mov bx, [linebeginpos]
  2635 000022CC 01DF                <2> 		add edi, ebx
  2636 000022CE EB84                <2> 		jmp donecrnl
  2637                              <2> 			
  2638                              <2> 	prbs:
  2639 000022D0 80FA00              <2> 		cmp dl, 0
  2640 000022D3 7410                <2> 		je prbackline
  2641                              <2> 	prnobmr:
  2642 000022D5 FECA                <2> 		dec dl
  2643 000022D7 6631C0              <2> 		xor ax, ax
  2644 000022DA 81EF02000000        <2> 		sub edi, 2
  2645 000022E0 E96FFFFFFF          <2> 		jmp donecrnl
  2646                              <2> 	prbackline:
  2647 000022E5 88CA                <2> 		mov dl, cl
  2648 000022E7 80FE00              <2> 		cmp dh, 0
  2649 000022EA 74E9                <2> 		je prnobmr
  2650 000022EC FECE                <2> 		dec dh
  2651 000022EE EBE5                <2> 		jmp prnobmr
  2652                              <2> 		
  2653                              <2> 	prnlcr:
  2654 000022F0 FEC6                <2> 		inc dh
  2655 000022F2 31DB                <2> 		xor ebx, ebx
  2656 000022F4 30D2                <2> 		xor dl, dl
  2657 000022F6 88CB                <2> 		mov bl, cl
  2658 000022F8 66D1E3              <2> 		shl bx, 1
  2659 000022FB BF[04D62800]        <2> 		mov edi, videobuf
  2660 00002300 66031D[A4230000]    <2> 		add bx, [linebeginpos]
  2661 00002307 66891D[A4230000]    <2> 		mov [linebeginpos], bx
  2662 0000230E 01DF                <2> 		add edi, ebx
  2663 00002310 E93FFFFFFF          <2> 		jmp donecrnl
  2664                              <2> 		
  2665                              <2> 	preol:
  2666 00002315 30D2                <2> 		xor dl, dl
  2667 00002317 FEC6                <2> 		inc dh
  2668 00002319 31DB                <2> 		xor ebx, ebx
  2669 0000231B 88CB                <2> 		mov bl, cl
  2670 0000231D 66D1E3              <2> 		shl bx, 1
  2671 00002320 66031D[A4230000]    <2> 		add bx, [linebeginpos]
  2672 00002327 66891D[A4230000]    <2> 		mov [linebeginpos], bx
  2673 0000232E E929FFFFFF          <2> 		jmp doneeol
  2674                              <2> 	prscr:
  2675 00002333 FECE                <2> 		dec dh
  2676 00002335 BF[04D62800]        <2> 		mov edi, videobuf
  2677 0000233A 31DB                <2> 		xor ebx, ebx
  2678 0000233C 88CB                <2> 		mov bl, cl
  2679 0000233E 66D1E3              <2> 		shl bx, 1
  2680 00002341 01FB                <2> 		add ebx, edi
  2681                              <2> 	intscrollloop:
  2682 00002343 668B03              <2> 		mov ax, [ebx]
  2683 00002346 668907              <2> 		mov [edi], ax
  2684 00002349 81C702000000        <2> 		add edi, 2
  2685 0000234F 81C302000000        <2> 		add ebx, 2
  2686 00002355 FEC9                <2> 		dec cl
  2687 00002357 80F900              <2> 		cmp cl, 0
  2688 0000235A 75E7                <2> 		jne intscrollloop
  2689 0000235C 8A0D[AA230000]      <2> 		mov cl, [charxy]
  2690 00002362 FECD                <2> 		dec ch
  2691 00002364 80FD01              <2> 		cmp ch, 1
  2692 00002367 77DA                <2> 		ja intscrollloop
  2693 00002369 6631C0              <2> 		xor ax, ax
  2694 0000236C 81EF[04D62800]      <2> 		sub edi, videobuf
  2695 00002372 66893D[A4230000]    <2> 		mov [linebeginpos], di
  2696 00002379 81C7[04D62800]      <2> 		add edi, videobuf
  2697 0000237F 89FB                <2> 		mov ebx, edi
  2698                              <2> 	intloopclear:
  2699 00002381 668903              <2> 		mov [ebx], ax
  2700 00002384 81C302000000        <2> 		add ebx, 2
  2701 0000238A FEC9                <2> 		dec cl
  2702 0000238C 80F900              <2> 		cmp cl, 0
  2703 0000238F 75F0                <2> 		jne intloopclear
  2704 00002391 FECD                <2> 		dec ch
  2705 00002393 80FD00              <2> 		cmp ch, 0
  2706 00002396 75E9                <2> 		jne intloopclear
  2707 00002398 668B0D[AA230000]    <2> 		mov cx, [charxy]
  2708 0000239F E9C0FEFFFF          <2> 		jmp donescr
  2709                              <2> 		
  2710 000023A4 0000                <2> linebeginpos dw 0
  2711 000023A6 0000                <2> videobufpos: dw 0
  2712 000023A8 0000                <2> charpos db 0,0
  2713 000023AA 501E                <2> charxy db 80,30
  2714 000023AC 0000                <2> charbuf dw 0
  2715                              <2> %endif
  2716                              <1> intx7:
  2717                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2718 000023AE E8DA3B0000          <2> 	call loadfile
  2719 000023B3 E9E5DEFFFF          <2> 	jmp timerinterrupt
  2720                              <1> intx9:
  2721                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2722 000023B8 3C00                <2> 	cmp al, 0
  2723 000023BA 750A                <2> 	jne num2strb
  2724 000023BC E80F0B0000          <2> 	call showdec
  2725 000023C1 E9D7DEFFFF          <2> 	jmp timerinterrupt
  2726                              <2> num2strb:
  2727 000023C6 E83B0A0000          <2> 	call showhex
  2728 000023CB E9CDDEFFFF          <2> 	jmp timerinterrupt
  2729                              <1> intx10:
  2730                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2731 000023D0 E8DD0B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2732 000023D5 E9C3DEFFFF          <2> 	jmp timerinterrupt
  2733                              <2> 	
  2734                              <1> %ifdef threads.included
  2735                              <1> intx11:
  2736                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2737                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2738                              <2> 			;returns the PID of the new fork in ebx
  2739                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2740 000023DA FA                  <2> 	cli
  2741 000023DB 60                  <2> 	pushad
  2742 000023DC 8925[A9240000]      <2> 	mov [.espold], esp
  2743 000023E2 C605[2C610000]01    <2> 	mov byte [threadson], 1
  2744 000023E9 8B1D[2D610000]      <2> 	mov ebx, [currentthread]
  2745 000023EF C1E302              <2> 	shl ebx, 2
  2746 000023F2 89A3[54BB2900]      <2> 	mov [threadlist + ebx], esp
  2747 000023F8 C1EB02              <2> 	shr ebx, 2
  2748 000023FB 81FB00000000        <2> 	cmp ebx, 0
  2749 00002401 750C                <2> 	jne .simplestack
  2750 00002403 BB[0EA00000]        <2> 	mov ebx, stackend
  2751 00002408 29E3                <2> 	sub ebx, esp
  2752 0000240A E90B000000          <2> 	jmp .stackcalcdone
  2753                              <2> .simplestack:
  2754 0000240F C1E30A              <2> 	shl ebx, 10
  2755 00002412 81C3[54CF2900]      <2> 	add ebx, stack1
  2756 00002418 29E3                <2> 	sub ebx, esp
  2757                              <2> .stackcalcdone:
  2758 0000241A 29DC                <2> 	sub esp, ebx
  2759 0000241C 81C4[54CF2900]      <2> 	add esp, stack1
  2760 00002422 8B1D[28610000]      <2> 	mov ebx, [lastthread]
  2761 00002428 C1E308              <2> 	shl ebx, 8
  2762 0000242B 01DC                <2> 	add esp, ebx
  2763 0000242D 891D[AD240000]      <2> 	mov [.stackend], ebx
  2764                              <2> 
  2765 00002433 89E5                <2> 	mov ebp, esp
  2766 00002435 8B25[A9240000]      <2> 	mov esp, [.espold]
  2767                              <2> 
  2768 0000243B C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2769 0000243E 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2770                              <2> 
  2771 00002442 31DB                <2> 	xor ebx, ebx
  2772                              <2> .stackcopy:
  2773 00002444 668B041C            <2> 	mov ax, [esp + ebx]
  2774 00002448 6689441D00          <2> 	mov [ebp + ebx], ax
  2775 0000244D 81C302000000        <2> 	add ebx, 2
  2776 00002453 3B1D[AD240000]      <2> 	cmp ebx, [.stackend]
  2777 00002459 72E9                <2> 	jb .stackcopy
  2778                              <2> 
  2779 0000245B 31C0                <2> 	xor eax, eax
  2780 0000245D 668CC8              <2> 	mov ax, cs
  2781 00002460 89C2                <2> 	mov edx, eax
  2782 00002462 8B4C2428            <2> 	mov ecx, [esp + 40]
  2783 00002466 81C900020000        <2> 	or ecx, 0x200
  2784                              <2> 	
  2785 0000246C 81FE00000000        <2> 	cmp esi, 0
  2786 00002472 7504                <2> 	jne .nochangestack
  2787 00002474 8B742420            <2> 	mov esi, [esp + 32]
  2788                              <2> .nochangestack:
  2789 00002478 89F0                <2> 	mov eax, esi
  2790 0000247A 89EC                <2> 	mov esp, ebp
  2791                              <2> 
  2792 0000247C 89442420            <2> 	mov [esp + 32], eax
  2793 00002480 89542424            <2> 	mov [esp + 36], edx
  2794 00002484 894C2428            <2> 	mov [esp + 40], ecx
  2795                              <2> 
  2796 00002488 8B1D[28610000]      <2> 	mov ebx, [lastthread]
  2797 0000248E 89A3[54BB2900]      <2> 	mov [threadlist + ebx], esp
  2798 00002494 81C304000000        <2> 	add ebx, 4
  2799 0000249A 891D[28610000]      <2> 	mov [lastthread], ebx
  2800 000024A0 8B25[A9240000]      <2> 	mov esp, [.espold]
  2801 000024A6 61                  <2> 	popad
  2802 000024A7 FB                  <2> 	sti
  2803 000024A8 CF                  <2> 	iret
  2804                              <2> 
  2805 000024A9 00000000            <2> .espold dd 0
  2806 000024AD 00000000            <2> .stackend dd 0
  2807                              <1> %endif
  2808                              <1> intx12:
  2809                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2810 000024B1 A1[55020000]        <2> 	mov eax, [timeseconds]
  2811 000024B6 8B1D[59020000]      <2> 	mov ebx, [timenanoseconds]
  2812 000024BC 89D9                <2> 	mov ecx, ebx
  2813 000024BE C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2814 000024C1 E9D7DDFFFF          <2> 	jmp timerinterrupt
  2815                              <1> intx13:
  2816                              <1> 	%include 'source/interrupts/13_settime.asm'
  2817 000024C6 A3[55020000]        <2> 	mov [timeseconds], eax
  2818 000024CB 891D[59020000]      <2> 	mov [timenanoseconds], ebx
  2819 000024D1 E9C7DDFFFF          <2> 	jmp timerinterrupt
  2820                              <2> 	
  2821                              <1> intx14:
  2822                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2823 000024D6 BF[EEBA0000]        <2> 	mov edi, buftxt
  2824                              <2> cpcmd:
  2825 000024DB 8A06                <2> 	mov al, [esi]
  2826 000024DD 8807                <2> 	mov [edi], al
  2827 000024DF 46                  <2> 	inc esi
  2828 000024E0 47                  <2> 	inc edi
  2829 000024E1 3C00                <2> 	cmp al, 0
  2830 000024E3 75F6                <2> 	jne cpcmd
  2831 000024E5 E81F060000          <2> 	call run
  2832 000024EA CF                  <2> 	iret
  2833                              <1> intx15:
  2834                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2835 000024EB BB[EEA60000]        <2> 	mov ebx, variables
  2836 000024F0 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  2837 000024F6 89F7                <2> 	mov edi, esi
  2838 000024F8 31C9                <2> 	xor ecx, ecx
  2839                              <2> getcommandzeroes:
  2840 000024FA 8A07                <2> 	mov al, [edi]
  2841 000024FC 47                  <2> 	inc edi
  2842 000024FD 3C3B                <2> 	cmp al, ';'
  2843 000024FF 740B                <2> 	je nomorezeroes
  2844 00002501 3C00                <2> 	cmp al, 0
  2845 00002503 7407                <2> 	je nomorezeroes
  2846 00002505 3C20                <2> 	cmp al, ' '
  2847 00002507 75F1                <2> 	jne getcommandzeroes
  2848 00002509 41                  <2> 	inc ecx
  2849 0000250A EBEE                <2> 	jmp getcommandzeroes
  2850                              <2> nomorezeroes:
  2851 0000250C 41                  <2> 	inc ecx
  2852 0000250D 4F                  <2> 	dec edi
  2853 0000250E 8B1D[7AA60000]      <2> 	mov ebx, [uid]
  2854 00002514 8B15[2D610000]      <2> 	mov edx, [currentthread]
  2855 0000251A CF                  <2> 	iret
  2856                              <2> 	
  2857                              <1> termcopy:
  2858                              <1> %ifdef io.serial
  2859                              <1> 	ret
  2860                              <1> %else
  2861                              <1> %ifdef terminal.vsync
  2862 0000251B C605[23250000]01    <1> 	mov byte [termcopyneeded], 1
  2863 00002522 C3                  <1> 	ret
  2864                              <1> %else
  2865                              <1> 	call newtermcopy
  2866                              <1> 	ret
  2867                              <1> %endif
  2868 00002523 00                  <1> 	termcopyneeded db 0
  2869 00002524 00000000            <1> 	termcursorpos dd 0
  2870 00002528 0000                <1> 	removedvideo dw 0
  2871                              <1> newtermcopy:
  2872 0000252A 60                  <1> 	pusha
  2873 0000252B BF[04D62800]        <1> 	mov edi, videobuf
  2874 00002530 31DB                <1> 	xor ebx, ebx
  2875 00002532 881D[23250000]      <1> 	mov [termcopyneeded], bl
  2876 00002538 668B1D[A6230000]    <1> 	mov bx, [videobufpos]
  2877 0000253F 01DF                <1> 	add edi, ebx
  2878 00002541 893D[24250000]      <1> 	mov [termcursorpos], edi
  2879 00002547 E8CB000000          <1> 	call switchtermcursor
  2880 0000254C 803D[288E0000]00    <1> 	cmp byte [guion], 0
  2881 00002553 0F8420000000        <1> 	je near nowincopy
  2882                              <1> %ifdef gui.included
  2883 00002559 C605[A9720000]00    <1> 	mov byte [mouseselecton], 0
  2884 00002560 C605[E7210000]01    <1> 	mov byte [termcopyon], 1
  2885 00002567 803D[E6210000]01    <1> 	cmp byte [termguion], 1
  2886 0000256E 0F84244A0000        <1> 	je near windowvideocopy
  2887                              <1> %endif
  2888 00002574 E997000000          <1> 	jmp nocopytermatall
  2889                              <1> nowincopy:
  2890 00002579 BE00000A00          <1> 	mov esi, 0xA0000
  2891 0000257E A1[3E020000]        <1> 	mov eax, [basecache]
  2892 00002583 C1E004              <1> 	shl eax, 4
  2893 00002586 29C6                <1> 	sub esi, eax
  2894 00002588 BF[04D62800]        <1> 	mov edi, videobuf
  2895 0000258D 31C9                <1> 	xor ecx, ecx
  2896 0000258F 668B0D[AA230000]    <1> 	mov cx, [charxy]
  2897                              <1> nowincopy2:
  2898 00002596 668B07              <1> 	mov ax, [edi]
  2899 00002599 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2900 0000259F 668B1F              <1> 	mov bx, [edi]
  2901 000025A2 668907              <1> 	mov [edi], ax
  2902 000025A5 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2903 000025AB 47                  <1> 	inc edi
  2904 000025AC 6639D8              <1> 	cmp ax, bx
  2905 000025AF 743E                <1> 	je nopresentwinfont
  2906 000025B1 4F                  <1> 	dec edi
  2907 000025B2 BB[6C7C0000]        <1> 	mov ebx, fonts
  2908 000025B7 31C0                <1> 	xor eax, eax
  2909 000025B9 8A07                <1> 	mov al, [edi]
  2910 000025BB C1E004              <1> 	shl eax, 4
  2911 000025BE 01C3                <1> 	add ebx, eax
  2912 000025C0 47                  <1> 	inc edi
  2913 000025C1 8A27                <1> 	mov ah, [edi]
  2914 000025C3 31D2                <1> 	xor edx, edx
  2915 000025C5 8A15[AA230000]      <1> 	mov dl, [charxy]
  2916 000025CB C1C110              <1> 	rol ecx, 16
  2917 000025CE B110                <1> 	mov cl, 16
  2918                              <1> nowinfont:
  2919 000025D0 8A03                <1> 	mov al, [ebx]
  2920 000025D2 D0C8                <1> 	ror al, 1
  2921 000025D4 80FC07              <1> 	cmp ah, 7
  2922 000025D7 7602                <1> 	jbe notnotfont
  2923 000025D9 F6D0                <1> 	not al
  2924                              <1> notnotfont:
  2925 000025DB 8806                <1> 	mov [esi], al
  2926 000025DD 01D6                <1> 	add esi, edx
  2927 000025DF 43                  <1> 	inc ebx
  2928 000025E0 FEC9                <1> 	dec cl
  2929 000025E2 80F900              <1> 	cmp cl, 0
  2930 000025E5 75E9                <1> 	jne nowinfont
  2931 000025E7 C1E204              <1> 	shl edx, 4
  2932 000025EA 29D6                <1> 	sub esi, edx
  2933 000025EC C1C110              <1> 	rol ecx, 16
  2934                              <1> nopresentwinfont:
  2935 000025EF 47                  <1> 	inc edi
  2936 000025F0 46                  <1> 	inc esi
  2937 000025F1 FEC9                <1> 	dec cl
  2938 000025F3 80F900              <1> 	cmp cl, 0
  2939 000025F6 759E                <1> 	jne nowincopy2
  2940 000025F8 8A0D[AA230000]      <1> 	mov cl, [charxy]
  2941 000025FE 31D2                <1> 	xor edx, edx
  2942 00002600 88CA                <1> 	mov dl, cl
  2943 00002602 29D6                <1> 	sub esi, edx
  2944 00002604 C1E204              <1> 	shl edx, 4
  2945 00002607 01D6                <1> 	add esi, edx
  2946 00002609 FECD                <1> 	dec ch
  2947 0000260B 80FD00              <1> 	cmp ch, 0
  2948 0000260E 7586                <1> 	jne nowincopy2
  2949                              <1> nocopytermatall:
  2950 00002610 E802000000          <1> 	call switchtermcursor
  2951 00002615 61                  <1> 	popa
  2952 00002616 C3                  <1> 	ret
  2953                              <1> 	
  2954                              <1> switchtermcursor:
  2955 00002617 8B3D[24250000]      <1> 	mov edi, [termcursorpos]
  2956 0000261D 8A4701              <1> 	mov al, [edi + 1]
  2957 00002620 8A27                <1> 	mov ah, [edi]
  2958 00002622 3C07                <1> 	cmp al, 7
  2959 00002624 7607                <1> 	jbe movlargecursorterm
  2960 00002626 B007                <1> 	mov al, 7
  2961 00002628 E902000000          <1> 	jmp movedcursorterm
  2962                              <1> movlargecursorterm:
  2963 0000262D B0F0                <1> 	mov al, 0xF0
  2964                              <1> movedcursorterm:
  2965 0000262F 884701              <1> 	mov [edi + 1], al
  2966 00002632 80FC00              <1> 	cmp ah, 0
  2967 00002635 7504                <1> 	jne fixednocursorterm
  2968 00002637 B420                <1> 	mov ah, " "
  2969 00002639 8827                <1> 	mov [edi], ah
  2970                              <1> fixednocursorterm:
  2971 0000263B C3                  <1> 	ret
  2972                              <1> %endif
  2973                                      %include "source/dosints.asm"
  2974                              <1> int20h:
  2975 0000263C 66B8004C            <1> mov ax, 0x4C00
  2976                              <1> int21h:
  2977                              <1> dostosolleros:
  2978 00002640 6650                <1> 	push ax
  2979 00002642 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2980 00002646 8ED8                <1> 	mov ds, ax
  2981 00002648 8EC0                <1> 	mov es, ax
  2982 0000264A 8EE0                <1> 	mov fs, ax
  2983 0000264C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2984 00002650 8EE8                <1> 	mov gs, ax
  2985 00002652 6658                <1> 	pop ax
  2986 00002654 9C                  <1> 	pushf
  2987 00002655 60                  <1> 	pusha
  2988 00002656 80FC01              <1> 	cmp ah, 1
  2989 00002659 0F8449000000        <1> 	je near dosgchar
  2990 0000265F 80FC02              <1> 	cmp ah, 2
  2991 00002662 0F8447000000        <1> 	je near doswchar
  2992 00002668 80FC09              <1> 	cmp ah, 9
  2993 0000266B 0F8449000000        <1> 	je near dosprintstr
  2994 00002671 80FC0A              <1> 	cmp ah, 0xA
  2995 00002674 0F8456000000        <1> 	je near dosgetstr
  2996 0000267A 80FC2B              <1> 	cmp ah, 0x2B
  2997 0000267D 0F8492000000        <1> 	je near dosgetdate
  2998 00002683 80FC2C              <1> 	cmp ah, 0x2C
  2999 00002686 0F84AC000000        <1> 	je near dosgettime
  3000 0000268C 80FC4C              <1> 	cmp ah, 0x4C
  3001 0000268F 0F84C1000000        <1> 	je near dosexit
  3002                              <1> backtodos:
  3003 00002695 61                  <1> 	popa
  3004 00002696 9D                  <1> 	popf
  3005 00002697 6650                <1> 	push ax
  3006 00002699 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3007 0000269D 8ED8                <1> 	mov ds, ax
  3008 0000269F 8EC0                <1> 	mov es, ax
  3009 000026A1 8EE0                <1> 	mov fs, ax
  3010 000026A3 8EE8                <1> 	mov gs, ax
  3011 000026A5 6658                <1> 	pop ax
  3012 000026A7 CF                  <1> 	iret
  3013                              <1> 
  3014                              <1> dosgchar:
  3015 000026A8 E8C5FAFFFF          <1> 	call getchar
  3016 000026AD EBE6                <1> 	jmp backtodos
  3017                              <1> 	
  3018                              <1> doswchar:
  3019 000026AF 88D0                <1> 	mov al, dl
  3020 000026B1 B307                <1> 	mov bl, 7
  3021 000026B3 E81FFBFFFF          <1> 	call prcharint
  3022 000026B8 EBDB                <1> 	jmp backtodos
  3023                              <1> 	
  3024                              <1> dosprintstr:
  3025 000026BA 31F6                <1> 	xor esi, esi
  3026 000026BC 6689D6              <1> 	mov si, dx
  3027 000026BF 81C600004000        <1> 	add esi, dosprogloc
  3028 000026C5 B024                <1> 	mov al, "$"
  3029 000026C7 B307                <1> 	mov bl, 7
  3030 000026C9 E84BF6FFFF          <1> 	call printint
  3031 000026CE EBC5                <1> 	jmp backtodos
  3032                              <1> 	
  3033                              <1> dosgetstr:
  3034 000026D0 31F6                <1> 	xor esi, esi
  3035 000026D2 6689D6              <1> 	mov si, dx
  3036 000026D5 81C600004000        <1> 	add esi, dosprogloc
  3037 000026DB B900000000          <1> 	mov ecx, 0
  3038 000026E0 8A0E                <1> 	mov cl, [esi]
  3039 000026E2 81C603000000        <1> 	add esi, 3
  3040 000026E8 89F7                <1> 	mov edi, esi
  3041 000026EA 8935[11270000]      <1> 	mov [stringstart], esi
  3042 000026F0 01CF                <1> 	add edi, ecx
  3043 000026F2 B00A                <1> 	mov al, 10
  3044 000026F4 B307                <1> 	mov bl, 7
  3045 000026F6 E8FFF6FFFF          <1> 	call rdprint
  3046 000026FB 89F1                <1> 	mov ecx, esi
  3047 000026FD 2B0D[11270000]      <1> 	sub ecx, [stringstart]
  3048 00002703 8B35[11270000]      <1> 	mov esi, [stringstart]
  3049 00002709 884EFF              <1> 	mov [esi - 1], cl
  3050 0000270C 884EFE              <1> 	mov [esi - 2], cl
  3051 0000270F EB84                <1> 	jmp backtodos
  3052 00002711 00000000            <1> stringstart dd 0
  3053                              <1> 
  3054                              <1> dosgetdate:
  3055 00002715 E89D200000          <1> 	call time
  3056 0000271A 8A0D[7F490000]      <1> 	mov cl, [RTCtimeYear]
  3057 00002720 B500                <1> 	mov ch, 0
  3058 00002722 6681C1D007          <1> 	add cx, 2000
  3059 00002727 8A35[7E490000]      <1> 	mov dh, [RTCtimeMonth]
  3060 0000272D 8A15[7D490000]      <1> 	mov dl, [RTCtimeDay]
  3061 00002733 E95DFFFFFF          <1> 	jmp backtodos
  3062                              <1> 
  3063                              <1> dosgettime:
  3064 00002738 E87A200000          <1> 	call time
  3065 0000273D 8A2D[7C490000]      <1> 	mov ch, [RTCtimeHour]
  3066 00002743 8A0D[7B490000]      <1> 	mov cl, [RTCtimeMinute]
  3067 00002749 8A35[7A490000]      <1> 	mov dh, [RTCtimeSecond]
  3068 0000274F B200                <1> 	mov dl, 0
  3069 00002751 E93FFFFFFF          <1> 	jmp backtodos
  3070                              <1> 	
  3071                              <1> dosexit:
  3072 00002756 61                  <1> 	popa
  3073 00002757 8B25[6EA40000]      <1> 	mov esp, [previousstack]
  3074 0000275D 31DB                <1> 	xor ebx, ebx
  3075 0000275F 88C3                <1> 	mov bl, al
  3076 00002761 80FB00              <1> 	cmp bl, 0
  3077 00002764 0F8536F5FFFF        <1> 	jne near exitprog.error
  3078 0000276A C3                  <1> 	ret
  3079                                      %include "source/solleros.asm"
  3080                              <1> 	;SOLLEROS.ASM
  3081                              <1> os:
  3082                              <1> setdefenv:
  3083 0000276B B02F                <1> 	mov al, '/'
  3084 0000276D A2[7AA40000]        <1> 	mov [currentfolder], al
  3085 00002772 B801000000          <1> 	mov eax, 1
  3086 00002777 A3[76A40000]        <1> 	mov [currentfolderloc], eax
  3087 0000277C E8F7F5FFFF          <1> 	call clear
  3088                              <1> 	
  3089                              <1> bootfilecheck:
  3090 00002781 803D[7EA60000]01    <1> 	cmp byte [ranboot], 1
  3091 00002788 0F8425000000        <1> 	je near nobootfile
  3092                              <1> 	%ifdef hardware.automatic
  3093 0000278E E84B340000          <1> 		call initializelater ;Initialize components that have debug messages
  3094                              <1> 	%endif
  3095 00002793 BF[067C0000]        <1> 	mov edi, bootfilename
  3096 00002798 BE00004000          <1> 	mov esi, 0x400000
  3097 0000279D E8EB370000          <1> 	call loadfile
  3098 000027A2 81FA94010000        <1> 	cmp edx, 404
  3099 000027A8 0F8405000000        <1> 	je near nobootfile
  3100 000027AE E8AA0D0000          <1> 	call progbatchfound
  3101                              <1> nobootfile:	
  3102 000027B3 C605[7EA60000]01    <1> 	mov byte [ranboot], 1
  3103                              <1> 
  3104 000027BA BE[00000000]        <1> 	mov esi, signature
  3105                              <1> .sigcopyloop:	;this prevents an odd error
  3106 000027BF 658A06              <1> 	mov al, [gs:esi]
  3107 000027C2 8806                <1> 	mov [esi], al
  3108 000027C4 46                  <1> 	inc esi
  3109 000027C5 81FE[1A000000]      <1> 	cmp esi, signatureend
  3110 000027CB 72F2                <1> 	jb .sigcopyloop
  3111                              <1> 	
  3112 000027CD BE[00000000]        <1> 	mov esi, signature
  3113 000027D2 E83BF5FFFF          <1> 	call print
  3114 000027D7 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3115 000027DD E8EE060000          <1> 	call showdec
  3116 000027E2 BE[477C0000]        <1> 	mov esi, line
  3117 000027E7 E826F5FFFF          <1> 	call print
  3118 000027EC BE[237C0000]        <1> 	mov esi, userask
  3119 000027F1 E81CF5FFFF          <1> 	call print
  3120                              <1> usercheck:
  3121 000027F6 BE[EEBA0000]        <1> 	mov esi, buftxt
  3122 000027FB BF[EEBE0000]        <1> 	mov edi, buftxtend
  3123 00002800 B00A                <1> 	mov al, 10
  3124 00002802 E8F3F5FFFF          <1> 	call rdprint
  3125 00002807 56                  <1> 	push esi
  3126 00002808 BE[2D7C0000]        <1> 	mov esi, pwdask
  3127 0000280D E800F5FFFF          <1> 	call print
  3128 00002812 5E                  <1> 	pop esi
  3129 00002813 46                  <1> 	inc esi
  3130 00002814 8935[07290000]      <1> 	mov [esipass], esi
  3131                              <1> passcheck:
  3132 0000281A E853F9FFFF          <1> 	call getchar
  3133 0000281F 3C0A                <1> 	cmp al, 10
  3134 00002821 0F8436000000        <1> 	je near gotpass
  3135 00002827 3C08                <1> 	cmp al, 8
  3136 00002829 0F8410000000        <1> 	je near backpass
  3137 0000282F 8806                <1> 	mov [esi], al
  3138 00002831 46                  <1> 	inc esi
  3139 00002832 B02A                <1> 	mov al, '*'
  3140 00002834 E89EF9FFFF          <1> 	call prcharint
  3141 00002839 EBDF                <1> 	jmp passcheck
  3142 0000283B 08200800            <1> backcursor2 db 8," ",8,0
  3143                              <1> backpass:
  3144 0000283F 3B35[07290000]      <1> 	cmp esi, [esipass]
  3145 00002845 0F84CFFFFFFF        <1> 	je near passcheck
  3146 0000284B 4E                  <1> 	dec esi
  3147 0000284C C60600              <1> 	mov byte [esi], 0
  3148 0000284F 56                  <1> 	push esi
  3149 00002850 BE[3B280000]        <1> 	mov esi, backcursor2
  3150 00002855 E8B8F4FFFF          <1> 	call print
  3151 0000285A 5E                  <1> 	pop esi
  3152 0000285B EBBD                <1> 	jmp passcheck
  3153                              <1> gotpass:
  3154 0000285D B00A                <1> 	mov al, 10
  3155 0000285F E873F9FFFF          <1> 	call prcharint
  3156 00002864 30C0                <1> 	xor al, al
  3157 00002866 31C9                <1> 	xor ecx, ecx
  3158 00002868 8806                <1> 	mov [esi], al
  3159 0000286A BB[497C0000]        <1> 	mov ebx, userlst
  3160                              <1> userfind:
  3161 0000286F BE[EEBA0000]        <1> 	mov esi, buftxt
  3162 00002874 8A06                <1> 	mov al, [esi]
  3163 00002876 3C00                <1> 	cmp al, 0
  3164 00002878 0F84EDFEFFFF        <1> 	je near os
  3165 0000287E 891D[0B290000]      <1> 	mov [usercache], ebx
  3166 00002884 E85A030000          <1> 	call tester
  3167 00002889 3C01                <1> 	cmp al, 1
  3168 0000288B 7416                <1> 	je pwdtest
  3169 0000288D 41                  <1> 	inc ecx
  3170                              <1> nxtuser:
  3171 0000288E 8A03                <1> 	mov al, [ebx]
  3172 00002890 43                  <1> 	inc ebx
  3173 00002891 3C00                <1> 	cmp al, 0
  3174 00002893 75F9                <1> 	jne nxtuser
  3175 00002895 81FB[6C7C0000]      <1> 	cmp ebx, userlstend
  3176 0000289B 0F83CAFEFFFF        <1> 	jae near os
  3177 000028A1 EBCC                <1> 	jmp userfind
  3178                              <1> pwdtest:
  3179 000028A3 46                  <1> 	inc esi
  3180 000028A4 43                  <1> 	inc ebx
  3181 000028A5 E839030000          <1> 	call tester
  3182 000028AA 3C01                <1> 	cmp al, 1
  3183 000028AC 7402                <1> 	je pwdrgt
  3184 000028AE EBDE                <1> 	jmp nxtuser
  3185                              <1> pwdrgt:
  3186 000028B0 D1E9                <1> 	shr ecx, 1
  3187 000028B2 890D[7AA60000]      <1> 	mov [uid], ecx
  3188 000028B8 E8BBF4FFFF          <1> 	call clear
  3189 000028BD 31C9                <1> 	xor ecx, ecx
  3190 000028BF 41                  <1> 	inc ecx
  3191 000028C0 890D[50AB2900]      <1> 	mov [commandbufpos], ecx
  3192                              <1> returnfromexp:
  3193 000028C6 66B90002            <1> 	mov cx, 200h
  3194 000028CA BE[EEBA0000]        <1> 	mov esi, buftxt
  3195 000028CF 8935[DF2B0000]      <1> 	mov [currentcommandloc], esi
  3196 000028D5 E825000000          <1> 	call bufclr
  3197                              <1> clearolddata:
  3198 000028DA 31C0                <1> 	xor eax, eax
  3199 000028DC A2[7FA60000]        <1> 	mov [IFON], al
  3200 000028E1 A2[80A60000]        <1> 	mov [IFTRUE], al
  3201 000028E6 A2[E8A60000]        <1> 	mov [BATCHISON], al
  3202 000028EB A3[E4A60000]        <1> 	mov [BATCHPOS], eax
  3203 000028F0 A2[E9A60000]        <1> 	mov [LOOPON], al
  3204 000028F5 A3[EAA60000]        <1> 	mov [LOOPPOS], eax
  3205 000028FA E933000000          <1> 	jmp nwcmd
  3206                              <1> bufclr:	
  3207 000028FF 30C0                <1> 	xor al, al
  3208 00002901 8806                <1> 	mov [esi], al
  3209 00002903 46                  <1> 	inc esi
  3210 00002904 E2F9                <1> 	loop bufclr
  3211 00002906 C3                  <1> 	ret
  3212                              <1> 
  3213 00002907 00000000            <1> esipass dd 0
  3214 0000290B [497C0000]          <1> usercache dd userlst
  3215                              <1> 	
  3216                              <1> buftxtclear:
  3217 0000290F 30C0                <1> 	xor al, al
  3218 00002911 BE[EEBA0000]        <1> 	mov esi, buftxt
  3219 00002916 81FE[EEBE0000]      <1> clearbuftxt: cmp esi, buf2
  3220 0000291C 730E                <1> 	jae retbufclr
  3221 0000291E 8806                <1> 	mov [esi], al
  3222 00002920 46                  <1> 	inc esi
  3223 00002921 EBF3                <1> 	jmp clearbuftxt
  3224                              <1> 
  3225 00002923 39DE                <1> clearitbuf: cmp esi, ebx
  3226 00002925 7305                <1> 	jae retbufclr
  3227 00002927 8806                <1> 	mov [esi], al
  3228 00002929 46                  <1> 	inc esi
  3229 0000292A EBF7                <1> 	jmp clearitbuf
  3230 0000292C C3                  <1> retbufclr: ret
  3231                              <1> 
  3232 0000292D E900000000          <1> full:	jmp nwcmd
  3233                              <1> 
  3234                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3235                              <1> nwcmd:
  3236 00002932 FB                  <1> 	sti
  3237 00002933 31C0                <1> 	xor eax, eax
  3238 00002935 3905[012B0000]      <1> 	cmp [nextcommandloc], eax
  3239 0000293B 7413                <1> 	je nomultiplecommand
  3240 0000293D 8B35[012B0000]      <1> 	mov esi, [nextcommandloc]
  3241 00002943 8935[052B0000]      <1> 	mov [thiscommandloc], esi
  3242 00002949 E8C0010000          <1> 	call fixvariables
  3243 0000294E EBE2                <1> 	jmp nwcmd
  3244                              <1> nomultiplecommand:
  3245 00002950 A3[052B0000]        <1> 	mov [thiscommandloc], eax
  3246 00002955 3805[2C610000]      <1> 	cmp [threadson], al
  3247 0000295B 7405                <1> 	je noclinwcmd
  3248 0000295D A2[2C610000]        <1> 	mov [threadson], al
  3249                              <1> noclinwcmd:
  3250 00002962 B001                <1> 	mov al, 1
  3251 00002964 3805[E8A60000]      <1> 	cmp [BATCHISON], al
  3252 0000296A 7501                <1> 	jne cancel
  3253 0000296C C3                  <1> 	ret
  3254 0000296D 30C0                <1> cancel:	xor al, al
  3255 0000296F A2[7FA60000]        <1> 	mov [IFON], al
  3256 00002974 A2[E8A60000]        <1> 	mov [BATCHISON], al
  3257 00002979 B05B                <1> 	mov al, '['
  3258 0000297B 66BB0700            <1> 	mov bx, 7
  3259 0000297F E864F8FFFF          <1> 	call prcharq
  3260 00002984 8B35[0B290000]      <1> 	mov esi, [usercache]
  3261 0000298A E871F3FFFF          <1> 	call printquiet
  3262 0000298F BE[377C0000]        <1> 	mov esi, computer
  3263 00002994 E867F3FFFF          <1> 	call printquiet
  3264 00002999 BE[7AA40000]        <1> 	mov esi, currentfolder
  3265 0000299E 0335[72A40000]      <1> 	add esi, [lastfolderloc]
  3266 000029A4 E857F3FFFF          <1> 	call printquiet
  3267 000029A9 BE[427C0000]        <1> 	mov esi, endprompt
  3268 000029AE E85FF3FFFF          <1> 	call print
  3269 000029B3 E857FFFFFF          <1> 	call buftxtclear
  3270 000029B8 BE[EEBA0000]        <1> 	mov esi, buftxt
  3271 000029BD C605[5B210000]01    <1> 	mov byte [commandedit], 1
  3272 000029C4 B00A                <1> 	mov al, 10
  3273 000029C6 66BB0700            <1> 	mov bx, 7
  3274 000029CA BF[EEBE0000]        <1> 	mov edi, buftxtend
  3275 000029CF E826F4FFFF          <1> 	call rdprint
  3276 000029D4 C605[5B210000]00    <1> 	mov byte [commandedit], 0
  3277 000029DB 803D[EEBA0000]00    <1> 	cmp byte [buftxt], 0
  3278 000029E2 0F844AFFFFFF        <1> 	je near nwcmd
  3279 000029E8 8B35[50AB2900]      <1> gotcmd:	mov esi, [commandbufpos]
  3280 000029EE 8935[4CAB2900]      <1> 	mov [lastcommandpos], esi
  3281 000029F4 BF[EEBA0000]        <1> 	mov edi, buftxt
  3282 000029F9 81C6[54AB2900]      <1> 	add esi, commandbuf
  3283 000029FF 81FE[54BB2900]      <1> 	cmp esi, commandbufend
  3284 00002A05 7605                <1> 	jbe copycommand
  3285 00002A07 BE[54AB2900]        <1> 	mov esi, commandbuf
  3286                              <1> copycommand:
  3287 00002A0C 8A07                <1> 	mov al, [edi]
  3288 00002A0E 8806                <1> 	mov [esi], al
  3289 00002A10 47                  <1> 	inc edi
  3290 00002A11 46                  <1> 	inc esi
  3291 00002A12 3C00                <1> 	cmp al, 0
  3292 00002A14 740F                <1> 	je donecopy
  3293 00002A16 81FE[54BB2900]      <1> 	cmp esi, commandbufend
  3294 00002A1C 76EE                <1> 	jbe copycommand
  3295 00002A1E BE[54AB2900]        <1> 	mov esi, commandbuf
  3296 00002A23 EBE7                <1> 	jmp copycommand
  3297                              <1> donecopy:
  3298 00002A25 81EE[54AB2900]      <1> 	sub esi, commandbuf
  3299 00002A2B 8935[50AB2900]      <1> 	mov [commandbufpos], esi
  3300 00002A31 E8D3000000          <1> 	call run
  3301 00002A36 E9F7FEFFFF          <1> 	jmp nwcmd
  3302                              <1> 
  3303 00002A3B E8CFFEFFFF          <1> input:	call buftxtclear
  3304 00002A40 BE[EEBA0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3305 00002A45 BF[EEBE0000]        <1> 	mov edi, buftxtend
  3306 00002A4A B00A                <1> stdin:	mov al, 10
  3307 00002A4C B307                <1> 	mov bl, 7
  3308 00002A4E E8A7F3FFFF          <1> 	call rdprint
  3309 00002A53 C3                  <1> 	ret
  3310                              <1> 
  3311                              <1> replacevariable:
  3312 00002A54 8A4601              <1> 	mov al, [esi + 1]
  3313 00002A57 C64601FF            <1> 	mov byte [esi + 1], 255
  3314 00002A5B 3C24                <1> 	cmp al, "$"
  3315 00002A5D 0F84AB000000        <1> 	je near fixvariables
  3316 00002A63 884601              <1> 	mov [esi + 1], al
  3317 00002A66 56                  <1> 	push esi
  3318 00002A67 81EE[EEBA0000]      <1> 	sub esi, buftxt
  3319 00002A6D 89F7                <1> 	mov edi, esi
  3320 00002A6F 81C6[EEBA0000]      <1> 	add esi, buftxt
  3321 00002A75 47                  <1> 	inc edi
  3322 00002A76 BB[EEA60000]        <1> 	mov ebx, variables
  3323 00002A7B E859130000          <1> 	call nxtvrech
  3324 00002A80 89F7                <1> 	mov edi, esi
  3325 00002A82 31DB                <1> 	xor ebx, ebx
  3326 00002A84 4E                  <1> 	dec esi
  3327                              <1> findvarname:
  3328 00002A85 4E                  <1> 	dec esi
  3329 00002A86 8A06                <1> 	mov al, [esi]
  3330 00002A88 43                  <1> 	inc ebx
  3331 00002A89 3C04                <1> 	cmp al, 4
  3332 00002A8B 75F8                <1> 	jne findvarname
  3333 00002A8D 5E                  <1> 	pop esi
  3334                              <1> replacevarloop:
  3335 00002A8E 8A07                <1> 	mov al, [edi]
  3336 00002A90 81FB00000000        <1> 	cmp ebx, 0
  3337 00002A96 0F841E000000        <1> 	je near expandbuftxt
  3338 00002A9C 3C00                <1> 	cmp al, 0
  3339 00002A9E 0F8407000000        <1> 	je near compressbuftxt
  3340 00002AA4 8806                <1> 	mov [esi], al
  3341 00002AA6 4B                  <1> 	dec ebx
  3342 00002AA7 46                  <1> 	inc esi
  3343 00002AA8 47                  <1> 	inc edi
  3344 00002AA9 EBE3                <1> 	jmp replacevarloop
  3345                              <1> compressbuftxt:	
  3346 00002AAB 8A041E              <1> 	mov al, [esi + ebx]
  3347 00002AAE 8806                <1> 	mov [esi], al
  3348 00002AB0 46                  <1> 	inc esi
  3349 00002AB1 3C00                <1> 	cmp al, 0
  3350 00002AB3 75F6                <1> 	jne compressbuftxt
  3351 00002AB5 E954000000          <1> 	jmp fixvariables
  3352                              <1> expandbuftxt:
  3353 00002ABA 89F1                <1> 	mov ecx, esi
  3354 00002ABC 8A26                <1> 	mov ah, [esi]
  3355                              <1> expandbuftxtlp:
  3356 00002ABE 8A1E                <1> 	mov bl, [esi]
  3357 00002AC0 46                  <1> 	inc esi
  3358 00002AC1 8A3E                <1> 	mov bh, [esi]
  3359 00002AC3 8826                <1> 	mov [esi], ah
  3360 00002AC5 88FC                <1> 	mov ah, bh
  3361 00002AC7 80FB00              <1> 	cmp bl, 0
  3362 00002ACA 75F2                <1> 	jne expandbuftxtlp
  3363 00002ACC 89CE                <1> 	mov esi, ecx
  3364 00002ACE 8806                <1> 	mov [esi], al
  3365 00002AD0 47                  <1> 	inc edi
  3366 00002AD1 8A07                <1> 	mov al, [edi]
  3367 00002AD3 3C00                <1> 	cmp al, 0
  3368 00002AD5 0F8433000000        <1> 	je near fixvariables
  3369 00002ADB 46                  <1> 	inc esi
  3370 00002ADC EBDC                <1> 	jmp expandbuftxt
  3371                              <1> multipleprogline:
  3372 00002ADE 30E4                <1> 	xor ah, ah
  3373 00002AE0 8826                <1> 	mov [esi], ah
  3374 00002AE2 46                  <1> 	inc esi
  3375 00002AE3 8935[012B0000]      <1> 	mov [nextcommandloc], esi
  3376 00002AE9 E93E000000          <1> 	jmp donefixvariables
  3377                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3378 00002AEE 46                  <1> 	inc esi
  3379 00002AEF 8A06                <1> 	mov al, [esi]
  3380 00002AF1 C606FF              <1> 	mov byte [esi], 255
  3381 00002AF4 3C23                <1> 	cmp al, '#'
  3382 00002AF6 7416                <1> 	je fixvariables
  3383 00002AF8 4E                  <1> 	dec esi
  3384 00002AF9 C60600              <1> 	mov byte [esi], 0
  3385 00002AFC E90D000000          <1> 	jmp fixvariables
  3386                              <1> 	
  3387 00002B01 00000000            <1> nextcommandloc dd 0
  3388 00002B05 00000000            <1> thiscommandloc dd 0	
  3389                              <1> run:
  3390 00002B09 BE[EEBA0000]        <1> 	mov esi, buftxt
  3391                              <1> fixvariables:
  3392 00002B0E 46                  <1> 	inc esi
  3393 00002B0F 8A06                <1> 	mov al, [esi]
  3394 00002B11 3C23                <1> 	cmp al, '#'	;inline comment
  3395 00002B13 74D9                <1> 	je inlinecomment
  3396 00002B15 3C24                <1> 	cmp al, '$' ;variable
  3397 00002B17 0F8437FFFFFF        <1> 	je near replacevariable
  3398 00002B1D 3C3B                <1> 	cmp al, ';' ;program list
  3399 00002B1F 74BD                <1> 	je multipleprogline
  3400 00002B21 3C00                <1> 	cmp al, 0
  3401 00002B23 75E9                <1> 	jne fixvariables
  3402 00002B25 31C0                <1> 	xor eax, eax
  3403 00002B27 A3[012B0000]        <1> 	mov [nextcommandloc], eax
  3404                              <1> donefixvariables:
  3405 00002B2C 803D[CA300000]00    <1> 	cmp byte [indexdone], 0
  3406 00002B33 7505                <1> 	jne progtest
  3407 00002B35 E8FB040000          <1> 	call indexfiles
  3408                              <1> progtest:
  3409 00002B3A 31C0                <1> 	xor eax, eax
  3410 00002B3C BB[6EA00000]        <1> 	mov ebx, fileindex
  3411 00002B41 668B03              <1> prgnxt:	mov ax, [ebx]
  3412 00002B44 B1FF                <1> 	mov cl, 255
  3413 00002B46 B52C                <1> 	mov ch, 44
  3414 00002B48 6639C8              <1> 	cmp ax, cx
  3415 00002B4B 740B                <1> 	je fndprg
  3416 00002B4D 43                  <1> 	inc ebx
  3417 00002B4E 81FB[6EA40000]      <1> 	cmp ebx, fileindexend
  3418 00002B54 735D                <1> 	jae prgnf
  3419 00002B56 EBE9                <1> 	jmp prgnxt
  3420 00002B58 81C302000000        <1> fndprg: add ebx, 2
  3421 00002B5E 31C9                <1> 	xor ecx, ecx
  3422 00002B60 BE[EEBA0000]        <1> 	mov esi, buftxt
  3423 00002B65 390D[052B0000]      <1> 	cmp [thiscommandloc], ecx
  3424 00002B6B 7406                <1> 	je noprgtstmultiple
  3425 00002B6D 8B35[052B0000]      <1> 	mov esi, [thiscommandloc]
  3426                              <1> noprgtstmultiple:
  3427 00002B73 E8A6000000          <1> 	call cndtest
  3428 00002B78 3C01                <1> 	cmp al, 1
  3429 00002B7A 7302                <1> 	jae prggood
  3430 00002B7C EBC3                <1> 	jmp prgnxt
  3431 00002B7E 81FB[6EA40000]      <1> prggood: cmp ebx, fileindexend
  3432 00002B84 7358                <1> 	jae prgdn
  3433 00002B86 31C0                <1> 	xor eax, eax
  3434 00002B88 BE[EEBA0000]        <1> 	mov esi, buftxt
  3435 00002B8D 3905[052B0000]      <1> 	cmp [thiscommandloc], eax
  3436 00002B93 7406                <1> 	je noprggoodmul
  3437 00002B95 8B35[052B0000]      <1> 	mov esi, [thiscommandloc]
  3438                              <1> noprggoodmul:
  3439 00002B9B 8935[DF2B0000]      <1> 	mov [currentcommandloc], esi
  3440 00002BA1 81C303000000        <1> 	add ebx, 3
  3441 00002BA7 8B3B                <1> 	mov edi, [ebx]
  3442 00002BA9 C605[2C610000]02    <1> 	mov byte [threadson], 2
  3443 00002BB0 FFD7                <1> 	call edi
  3444 00002BB2 C3                  <1> 	ret
  3445                              <1> prgnf:	
  3446 00002BB3 8B35[DF2B0000]      <1> 	mov esi, [currentcommandloc]
  3447 00002BB9 8A06                <1> 	mov al, [esi]
  3448 00002BBB 3C00                <1> 	cmp al, 0
  3449 00002BBD 741F                <1> 	je prgdn
  3450 00002BBF BE[0E7C0000]        <1> 	mov esi, notfound1
  3451 00002BC4 E849F1FFFF          <1> 	call print
  3452 00002BC9 8B35[DF2B0000]      <1> 	mov esi, [currentcommandloc]
  3453 00002BCF E83EF1FFFF          <1> 	call print
  3454 00002BD4 BE[167C0000]        <1> 	mov esi, notfound2
  3455 00002BD9 E834F1FFFF          <1> 	call print
  3456 00002BDE C3                  <1> prgdn:	ret
  3457                              <1> 
  3458 00002BDF 00000000            <1> currentcommandloc dd 0
  3459                              <1> 
  3460                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3461 00002BE3 6631C0              <1> 	xor ax, ax
  3462 00002BE6 8A06                <1> retest:	mov al, [esi]
  3463 00002BE8 8A23                <1> 	mov ah, [ebx]
  3464 00002BEA 3C00                <1> 	cmp al, 0
  3465 00002BEC 7408                <1> 	je testtrue
  3466 00002BEE 38E0                <1> 	cmp al, ah
  3467 00002BF0 750C                <1> 	jne testfalse
  3468 00002BF2 43                  <1> 	inc ebx
  3469 00002BF3 46                  <1> 	inc esi
  3470 00002BF4 EBF0                <1> 	jmp retest
  3471                              <1> testtrue:
  3472 00002BF6 80FC00              <1> 	cmp ah, 0
  3473 00002BF9 7503                <1> 	jne testfalse
  3474 00002BFB B001                <1> 	mov al, 1
  3475 00002BFD C3                  <1> 	ret
  3476                              <1> testfalse:
  3477 00002BFE 30C0                <1> 	xor al, al
  3478 00002C00 C3                  <1> 	ret
  3479                              <1> 
  3480                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3481 00002C01 30C0                <1> 	xor al, al
  3482                              <1> opretest:
  3483 00002C03 8A06                <1> 	mov al, [esi]
  3484 00002C05 8A23                <1> 	mov ah, [ebx]
  3485 00002C07 38E0                <1> 	cmp al, ah
  3486 00002C09 7510                <1> 	jne optestfalse
  3487 00002C0B 80FC00              <1> 	cmp ah, 0
  3488 00002C0E 7404                <1> 	je optesttrue
  3489 00002C10 43                  <1> 	inc ebx
  3490 00002C11 46                  <1> 	inc esi
  3491 00002C12 EBEF                <1> 	jmp opretest
  3492                              <1> optesttrue:
  3493 00002C14 3C00                <1> 	cmp al, 0
  3494 00002C16 7503                <1> 	jne optestfalse
  3495 00002C18 B001                <1> 	mov al, 1
  3496 00002C1A C3                  <1> 	ret
  3497                              <1> optestfalse:
  3498 00002C1B 30C0                <1> 	xor al, al
  3499 00002C1D C3                  <1> 	ret
  3500                              <1> 
  3501                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3502 00002C1E 30C0                <1> 	xor al, al
  3503 00002C20 8A06                <1> cndretest:	mov al, [esi]
  3504 00002C22 8A23                <1> 	mov ah, [ebx]
  3505 00002C24 38CC                <1> 	cmp ah, cl
  3506 00002C26 7408                <1> 	je cndtesttrue
  3507 00002C28 38E0                <1> 	cmp al, ah
  3508 00002C2A 750B                <1> 	jne cndtestfalse
  3509 00002C2C 43                  <1> 	inc ebx
  3510 00002C2D 46                  <1> 	inc esi
  3511 00002C2E EBF0                <1> 	jmp cndretest
  3512                              <1> cndtesttrue:
  3513 00002C30 38C8                <1> 	cmp al, cl
  3514 00002C32 7506                <1> 	jne cndtestalmost
  3515 00002C34 B001                <1> 	mov al, 1
  3516 00002C36 C3                  <1> 	ret
  3517                              <1> cndtestfalse:
  3518 00002C37 30C0                <1> 	xor al, al
  3519 00002C39 C3                  <1> 	ret
  3520                              <1> cndtestalmost:
  3521 00002C3A B002                <1> 	mov al, 2
  3522 00002C3C C3                  <1> 	ret
  3523                              <1> 	
  3524                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3525                              <1> 		                ;ends if array seperator is found backwards after 0
  3526                              <1> 	arnxt:	      
  3527 00002C3D 88E8                <1> 		mov al, ch
  3528 00002C3F 88CC                <1> 		mov ah, cl        
  3529 00002C41 663906              <1> 		cmp [esi], ax
  3530 00002C44 744D                <1> 		je ardn
  3531 00002C46 66390E              <1> 		cmp [esi], cx
  3532 00002C49 7407                <1> 		je arfnd
  3533 00002C4B 46                  <1> 		inc esi
  3534 00002C4C 39DE                <1> 		cmp esi, ebx
  3535 00002C4E 7343                <1> 		jae ardn
  3536 00002C50 EBEB                <1> 		jmp arnxt
  3537 00002C52 81C602000000        <1> 	arfnd: add esi, 2
  3538 00002C58 891D[942C0000]      <1> 		mov [arbx], ebx
  3539 00002C5E 890D[982C0000]      <1> 		mov [arcx], ecx
  3540 00002C64 E8A9F0FFFF          <1> 		call print
  3541 00002C69 8935[9A2C0000]      <1> 		mov [arsi], esi
  3542 00002C6F BE[477C0000]        <1> 		mov esi, line
  3543 00002C74 E899F0FFFF          <1> 		call print
  3544 00002C79 8B1D[942C0000]      <1> 		mov ebx, [arbx]
  3545 00002C7F 668B0D[982C0000]    <1> 		mov cx, [arcx]
  3546 00002C86 8B35[9A2C0000]      <1> 		mov esi, [arsi]
  3547 00002C8C 46                  <1> 		inc esi
  3548 00002C8D 39DE                <1> 		cmp esi, ebx
  3549 00002C8F 7302                <1> 		jae ardn
  3550 00002C91 EBAA                <1> 		jmp arnxt
  3551 00002C93 C3                  <1> 	ardn:	ret
  3552 00002C94 00000000            <1> arbx:	dw 0,0
  3553 00002C98 0000                <1> arcx:	db 0,0
  3554 00002C9A 00000000            <1> arsi:	dw 0,0
  3555                              <1> 
  3556                              <1> clearbuffer:
  3557 00002C9E BE[EEBE0000]        <1> 	mov esi, buf2
  3558 00002CA3 B030                <1> 	mov al, '0'
  3559 00002CA5 81FE[02BF0000]      <1> clearbuf: cmp esi, numbuf
  3560 00002CAB 7305                <1> 	jae doneclearbuff
  3561 00002CAD 8806                <1> 	mov [esi], al
  3562 00002CAF 46                  <1> 	inc esi
  3563 00002CB0 EBF3                <1> 	jmp clearbuf
  3564                              <1> doneclearbuff: 
  3565 00002CB2 C3                  <1> 		ret
  3566                              <1> 
  3567                              <1> convert:
  3568 00002CB3 4E                  <1> 	dec esi
  3569 00002CB4 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3570                              <1> .lp:
  3571 00002CB6 89DE                <1> 	mov esi, ebx
  3572 00002CB8 81EE09000000        <1> 	sub esi, 9
  3573 00002CBE 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3574 00002CC4 720A                <1> 	jb .8
  3575 00002CC6 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3576 00002CCC FE06                <1> 	inc byte [esi]
  3577 00002CCE EBE6                <1> 	jmp .lp
  3578 00002CD0 46                  <1> .8:	inc esi
  3579 00002CD1 81F900E1F505        <1> 	cmp ecx, 100000000
  3580 00002CD7 720A                <1> 	jb .7
  3581 00002CD9 81E900E1F505        <1> 	sub ecx, 100000000
  3582 00002CDF FE06                <1> 	inc byte [esi]
  3583 00002CE1 EBD3                <1> 	jmp .lp
  3584 00002CE3 46                  <1> .7:	inc esi
  3585 00002CE4 81F980969800        <1> 	cmp ecx, 10000000
  3586 00002CEA 720A                <1> 	jb .6
  3587 00002CEC 81E980969800        <1> 	sub ecx, 10000000
  3588 00002CF2 FE06                <1> 	inc byte [esi]
  3589 00002CF4 EBC0                <1> 	jmp .lp
  3590 00002CF6 46                  <1> .6:	inc esi
  3591 00002CF7 81F940420F00        <1> 	cmp ecx, 1000000
  3592 00002CFD 720A                <1> 	jb .5
  3593 00002CFF 81E940420F00        <1> 	sub ecx, 1000000
  3594 00002D05 FE06                <1> 	inc byte [esi]
  3595 00002D07 EBAD                <1> 	jmp .lp
  3596 00002D09 46                  <1> .5:	inc esi
  3597 00002D0A 81F9A0860100        <1> 	cmp ecx, 100000
  3598 00002D10 720A                <1> 	jb .4
  3599 00002D12 81E9A0860100        <1> 	sub ecx, 100000
  3600 00002D18 FE06                <1> 	inc byte [esi]
  3601 00002D1A EB9A                <1> 	jmp .lp
  3602 00002D1C 46                  <1> .4:	inc esi
  3603 00002D1D 81F910270000        <1> 	cmp ecx, 10000
  3604 00002D23 720A                <1> 	jb .3
  3605 00002D25 81E910270000        <1> 	sub ecx, 10000
  3606 00002D2B FE06                <1> 	inc byte [esi]
  3607 00002D2D EB87                <1> 	jmp .lp
  3608 00002D2F 46                  <1> .3:	inc esi
  3609 00002D30 81F9E8030000        <1> 	cmp ecx, 1000
  3610 00002D36 720D                <1> 	jb .2
  3611 00002D38 81E9E8030000        <1> 	sub ecx, 1000
  3612 00002D3E FE06                <1> 	inc byte [esi]
  3613 00002D40 E971FFFFFF          <1> 	jmp .lp
  3614 00002D45 46                  <1> .2:	inc esi
  3615 00002D46 81F964000000        <1> 	cmp ecx, 100
  3616 00002D4C 720D                <1> 	jb .1
  3617 00002D4E 81E964000000        <1> 	sub ecx, 100
  3618 00002D54 FE06                <1> 	inc byte [esi]
  3619 00002D56 E95BFFFFFF          <1> 	jmp .lp
  3620 00002D5B 46                  <1> .1:	inc esi
  3621 00002D5C 81F90A000000        <1> 	cmp ecx, 10
  3622 00002D62 720D                <1> 	jb .0
  3623 00002D64 81E90A000000        <1> 	sub ecx, 10
  3624 00002D6A FE06                <1> 	inc byte [esi]
  3625 00002D6C E945FFFFFF          <1> 	jmp .lp
  3626 00002D71 46                  <1> .0:	inc esi
  3627 00002D72 81F901000000        <1> 	cmp ecx, 1
  3628 00002D78 720D                <1> 	jb .dn
  3629 00002D7A 81E901000000        <1> 	sub ecx, 1
  3630 00002D80 FE06                <1> 	inc byte [esi]
  3631 00002D82 E92FFFFFFF          <1> 	jmp .lp
  3632                              <1> .dn:
  3633 00002D87 C3                  <1> 	ret
  3634                              <1> 
  3635                              <1> 	
  3636                              <1> 
  3637 00002D88 00<rept>            <1> hexnumber times 8 db 0
  3638 00002D90 202000              <1> hexnumberend db "  ",0
  3639                              <1> 
  3640                              <1> converthex:
  3641                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3642 00002D93 56                  <1> 	push esi
  3643 00002D94 B030                <1> 	mov al, "0"
  3644 00002D96 39FE                <1> .clearlp: cmp esi, edi
  3645 00002D98 7305                <1> 	jae .doneclear
  3646 00002D9A 8806                <1> 	mov [esi], al
  3647 00002D9C 46                  <1> 	inc esi
  3648 00002D9D EBF7                <1> 	jmp .clearlp
  3649                              <1> .doneclear:
  3650 00002D9F 81EE02000000        <1> 	sub esi, 2
  3651 00002DA5 89C8                <1> 	mov eax, ecx
  3652                              <1> .loop:
  3653 00002DA7 30FF                <1> 	xor bh, bh
  3654 00002DA9 88C3                <1> 	mov bl, al
  3655 00002DAB 66C1E304            <1> 	shl bx, 4
  3656 00002DAF C0EB04              <1> 	shr bl, 4
  3657 00002DB2 86DF                <1> 	xchg bl, bh ;they are backwards
  3658 00002DB4 80C330              <1> 	add bl, 48
  3659 00002DB7 80FB39              <1> 	cmp bl, "9"
  3660 00002DBA 7609                <1> 	jbe .goodbl
  3661 00002DBC 80EB30              <1> 	sub bl, 48
  3662 00002DBF 80EB0A              <1> 	sub bl, 0xA
  3663 00002DC2 80C341              <1> 	add bl, "A"
  3664                              <1> .goodbl:
  3665 00002DC5 80C730              <1> 	add bh, 48
  3666 00002DC8 80FF39              <1> 	cmp bh, "9"
  3667 00002DCB 7609                <1> 	jbe .goodbh
  3668 00002DCD 80EF30              <1> 	sub bh, 48
  3669 00002DD0 80EF0A              <1> 	sub bh, 0xA
  3670 00002DD3 80C741              <1> 	add bh, "A"
  3671                              <1> .goodbh:
  3672 00002DD6 C1E808              <1> 	shr eax, 8
  3673 00002DD9 66891E              <1> 	mov [esi], bx
  3674 00002DDC 81EE02000000        <1> 	sub esi, 2
  3675 00002DE2 3B3424              <1> 	cmp esi, [esp]
  3676 00002DE5 7207                <1> 	jb .done
  3677 00002DE7 3D00000000          <1> 	cmp eax, 0
  3678 00002DEC 75B9                <1> 	jne .loop
  3679                              <1> .done:
  3680 00002DEE 5E                  <1> 	pop esi
  3681 00002DEF C3                  <1> 	ret
  3682                              <1> 	
  3683                              <1> 	
  3684 00002DF0 00                  <1> smallhex db 0
  3685 00002DF1 01                  <1> firsthexshown db 1
  3686                              <1> showhexsmall:
  3687 00002DF2 C605[F02D0000]01    <1> 	mov byte [smallhex], 1
  3688 00002DF9 E808000000          <1> 	call showhex
  3689 00002DFE C605[F02D0000]00    <1> 	mov byte [smallhex], 0
  3690 00002E05 C3                  <1> 	ret
  3691                              <1> showhex:
  3692 00002E06 60                  <1> 	pusha
  3693 00002E07 BE[882D0000]        <1> 	mov esi, hexnumber
  3694 00002E0C BF[902D0000]        <1> 	mov edi, hexnumberend
  3695 00002E11 E87DFFFFFF          <1> 	call converthex
  3696 00002E16 803D[F12D0000]01    <1> 	cmp byte [firsthexshown], 1
  3697 00002E1D 7503                <1> 	jne .show
  3698 00002E1F 6631D2              <1> 	xor dx, dx
  3699                              <1> .show:
  3700 00002E22 803D[F12D0000]03    <1> 	cmp byte [firsthexshown], 3
  3701 00002E29 750A                <1> 	jne .nonewhexline
  3702 00002E2B BE[477C0000]        <1> 	mov esi, line
  3703 00002E30 E8DDEEFFFF          <1> 	call print
  3704                              <1> .nonewhexline:
  3705 00002E35 803D[F12D0000]04    <1> 	cmp byte [firsthexshown], 4
  3706 00002E3C 7527                <1> 	jne .notab
  3707 00002E3E B1A0                <1> 	mov cl, 160
  3708 00002E40 28D1                <1> 	sub cl, dl
  3709 00002E42 C0E905              <1> 	shr cl, 5
  3710 00002E45 C0E105              <1> 	shl cl, 5
  3711 00002E48 80F900              <1> 	cmp cl, 0
  3712 00002E4B 750F                <1> 	jne .nonewline
  3713 00002E4D BE[477C0000]        <1> 	mov esi, line
  3714 00002E52 E8BBEEFFFF          <1> 	call print
  3715 00002E57 E909000000          <1> 	jmp .notab
  3716                              <1> .nonewline:
  3717 00002E5C 80C20F              <1> 	add dl, 15
  3718 00002E5F C0EA04              <1> 	shr dl, 4
  3719 00002E62 C0E204              <1> 	shl dl, 4
  3720                              <1> .notab:
  3721 00002E65 BE[882D0000]        <1> 	mov esi, hexnumber
  3722 00002E6A 803D[F02D0000]01    <1> 	cmp byte [smallhex],1
  3723 00002E71 7506                <1> 	jne .nosmall
  3724 00002E73 81C606000000        <1> 	add esi, 6
  3725                              <1> .nosmall:
  3726 00002E79 803D[F12D0000]05    <1> 	cmp byte [firsthexshown], 5
  3727 00002E80 750A                <1> 	jne .noquiet
  3728 00002E82 E879EEFFFF          <1> 	call printquiet
  3729 00002E87 E918000000          <1> 	jmp .donequiet
  3730                              <1> .noquiet:
  3731 00002E8C 803D[F12D0000]06    <1> 	cmp byte [firsthexshown], 6
  3732 00002E93 750A                <1> 	jne .normal
  3733 00002E95 E85AEEFFFF          <1> 	call printhighlight
  3734 00002E9A E905000000          <1> 	jmp .donequiet
  3735                              <1> .normal:
  3736 00002E9F E86EEEFFFF          <1> 	call print
  3737                              <1> .donequiet:
  3738 00002EA4 803D[F12D0000]02    <1> 	cmp byte [firsthexshown], 2
  3739 00002EAB 750A                <1> 	jne .shown
  3740 00002EAD BE[477C0000]        <1> 	mov esi, line
  3741 00002EB2 E85BEEFFFF          <1> 	call print
  3742                              <1> .shown:
  3743 00002EB7 C605[F12D0000]00    <1> 	mov byte [firsthexshown], 0
  3744 00002EBE 61                  <1> 	popa
  3745 00002EBF C3                  <1> 	ret
  3746                              <1> 
  3747                              <1> 
  3748 00002EC0 303030303030303030- <1> decnumber db "00000000000000"
  3749 00002EC9 3030303030          <1>
  3750 00002ECE 2000                <1> decnumberend: db " ",0
  3751                              <1> 
  3752                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3753 00002ED0 60                  <1> 	pusha
  3754 00002ED1 BF[C02E0000]        <1> 	mov edi, decnumber
  3755 00002ED6 BE[CE2E0000]        <1> 	mov esi, decnumberend
  3756                              <1> .clear:
  3757 00002EDB C60730              <1> 	mov byte [edi], '0'
  3758 00002EDE 47                  <1> 	inc edi
  3759 00002EDF 39F7                <1> 	cmp edi, esi
  3760 00002EE1 72F8                <1> 	jb .clear
  3761 00002EE3 BF[C02E0000]        <1> 	mov edi, decnumber
  3762 00002EE8 E8C6FDFFFF          <1> 	call convert
  3763 00002EED 803D[F12D0000]01    <1> 	cmp byte [firsthexshown], 1
  3764 00002EF4 7503                <1> 	jne .show
  3765 00002EF6 6631D2              <1> 	xor dx, dx
  3766                              <1> .show:
  3767 00002EF9 803D[F12D0000]03    <1> 	cmp byte [firsthexshown], 3
  3768 00002F00 750A                <1> 	jne .nonewdecline
  3769 00002F02 BE[477C0000]        <1> 	mov esi, line
  3770 00002F07 E806EEFFFF          <1> 	call print
  3771                              <1> .nonewdecline:
  3772 00002F0C 803D[F12D0000]04    <1> 	cmp byte [firsthexshown], 4
  3773 00002F13 7527                <1> 	jne .notab
  3774 00002F15 B1A0                <1> 	mov cl, 160
  3775 00002F17 28D1                <1> 	sub cl, dl
  3776 00002F19 C0E905              <1> 	shr cl, 5
  3777 00002F1C C0E105              <1> 	shl cl, 5
  3778 00002F1F 80F900              <1> 	cmp cl, 0
  3779 00002F22 750F                <1> 	jne .nonewline
  3780 00002F24 BE[477C0000]        <1> 	mov esi, line
  3781 00002F29 E8E4EDFFFF          <1> 	call print
  3782 00002F2E E909000000          <1> 	jmp .notab
  3783                              <1> .nonewline:
  3784 00002F33 80C20F              <1> 	add dl, 15
  3785 00002F36 C0EA04              <1> 	shr dl, 4
  3786 00002F39 C0E204              <1> 	shl dl, 4
  3787                              <1> .notab:
  3788 00002F3C BE[C02E0000]        <1> 	mov esi, decnumber
  3789 00002F41 4E                  <1> 	dec esi
  3790                              <1> .sifind:
  3791 00002F42 46                  <1> 	inc esi
  3792 00002F43 803E30              <1> 	cmp byte [esi], '0'
  3793 00002F46 74FA                <1> 	je .sifind
  3794 00002F48 E8C5EDFFFF          <1> 	call print
  3795 00002F4D 803D[F12D0000]02    <1> 	cmp byte [firsthexshown], 2
  3796 00002F54 750A                <1> 	jne .shown
  3797 00002F56 BE[477C0000]        <1> 	mov esi, line
  3798 00002F5B E8B2EDFFFF          <1> 	call print
  3799                              <1> .shown:
  3800 00002F60 C605[F12D0000]00    <1> 	mov byte [firsthexshown], 0
  3801 00002F67 61                  <1> 	popa
  3802 00002F68 C3                  <1> 	ret
  3803                              <1> 	
  3804                              <1> cnvrthextxt:
  3805 00002F69 31C9                <1> 	xor ecx, ecx
  3806 00002F6B 31C0                <1> 	xor eax, eax
  3807 00002F6D 31D2                <1> 	xor edx, edx
  3808 00002F6F 31DB                <1> 	xor ebx, ebx
  3809 00002F71 4E                  <1> 	dec esi
  3810                              <1> .end:
  3811 00002F72 46                  <1> 	inc esi
  3812 00002F73 8A06                <1> 	mov al, [esi]
  3813 00002F75 3C00                <1> 	cmp al, 0
  3814 00002F77 75F9                <1> 	jne .end
  3815                              <1> .loop:
  3816 00002F79 4E                  <1> 	dec esi
  3817 00002F7A 8A06                <1> 	mov al, [esi]
  3818 00002F7C 3C41                <1> 	cmp al, "A"
  3819 00002F7E 7328                <1> 	jae .char
  3820 00002F80 2C30                <1> 	sub al, 48
  3821 00002F82 3C10                <1> 	cmp al, 16
  3822 00002F84 7721                <1> 	ja .done
  3823                              <1> .donechar:
  3824 00002F86 81FA00000000        <1> 	cmp edx, 0
  3825 00002F8C 740E                <1> 	je .noshl
  3826 00002F8E 89D3                <1> 	mov ebx, edx
  3827                              <1> .shl:
  3828 00002F90 C1E004              <1> 	shl eax, 4
  3829 00002F93 4B                  <1> 	dec ebx
  3830 00002F94 81FB00000000        <1> 	cmp ebx, 0
  3831 00002F9A 75F4                <1> 	jne .shl
  3832                              <1> .noshl:
  3833 00002F9C 42                  <1> 	inc edx
  3834 00002F9D 01C1                <1> 	add ecx, eax
  3835 00002F9F 81FA08000000        <1> 	cmp edx, 8
  3836 00002FA5 72D2                <1> 	jb .loop
  3837                              <1> .done:
  3838 00002FA7 C3                  <1> 	ret
  3839                              <1> .char:
  3840 00002FA8 3C46                <1> 	cmp al, "F"
  3841 00002FAA 77FB                <1> 	ja .done
  3842 00002FAC 2C41                <1> 	sub al, "A"
  3843 00002FAE 040A                <1> 	add al, 0xA
  3844 00002FB0 EBD4                <1> 	jmp .donechar
  3845                              <1> 	
  3846                              <1> 	
  3847                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3848 00002FB2 31C9                <1> 	xor ecx, ecx
  3849 00002FB4 31C0                <1> 	xor eax, eax
  3850 00002FB6 31D2                <1> 	xor edx, edx
  3851 00002FB8 31DB                <1> 	xor ebx, ebx
  3852 00002FBA 4E                  <1> 	dec esi
  3853                              <1> .lp:
  3854 00002FBB 46                  <1> 	inc esi
  3855 00002FBC 8A06                <1> 	mov al, [esi]
  3856 00002FBE 3C00                <1> 	cmp al, 0
  3857 00002FC0 75F9                <1> 	jne .lp
  3858 00002FC2 4E                  <1> 	dec esi
  3859 00002FC3 8A06                <1> 	mov al, [esi]
  3860 00002FC5 3C2E                <1> 	cmp al, '.'
  3861 00002FC7 7503                <1> 	jne .dot
  3862 00002FC9 46                  <1> 	inc esi
  3863 00002FCA EBEF                <1> 	jmp .lp
  3864                              <1> .dot:
  3865 00002FCC 3C20                <1> 	cmp al, ' '
  3866 00002FCE 7404                <1> 	je .zero
  3867 00002FD0 3C30                <1> 	cmp al, '0'
  3868 00002FD2 7504                <1> 	jne .txtlp
  3869                              <1> .zero: 
  3870 00002FD4 39FE                <1> 		cmp esi, edi
  3871 00002FD6 7458                <1> 		je .done
  3872                              <1> .txtlp:
  3873 00002FD8 31C0                <1> 	xor eax, eax
  3874 00002FDA 8A06                <1> 	mov al, [esi]
  3875 00002FDC 3C3D                <1> 	cmp al, '='
  3876 00002FDE 7450                <1> 	je .done
  3877 00002FE0 3C30                <1> 	cmp al, 48
  3878 00002FE2 724C                <1> 	jb .done
  3879 00002FE4 3C23                <1> 	cmp al, '#'
  3880 00002FE6 7448                <1> 	je .done
  3881 00002FE8 39FE                <1> 	cmp esi, edi
  3882 00002FEA 7244                <1> 	jb .done
  3883 00002FEC 81F900000000        <1> 	cmp ecx, 0
  3884 00002FF2 7708                <1> 	ja .exp
  3885 00002FF4 2C30                <1> .noexp:	sub al, 48
  3886 00002FF6 01C2                <1> 	add edx, eax
  3887 00002FF8 4E                  <1> 	dec esi
  3888 00002FF9 41                  <1> 	inc ecx
  3889 00002FFA EBDC                <1> 	jmp .txtlp
  3890 00002FFC 81F900000000        <1> .exp:	cmp ecx, 0
  3891 00003002 74F0                <1> 	je .noexp
  3892 00003004 2C30                <1> 	sub al, 48
  3893 00003006 51                  <1> 	push ecx
  3894 00003007 89C3                <1> .expmul:	mov ebx, eax
  3895 00003009 01D8                <1> 	add eax, ebx
  3896 0000300B 01D8                <1> 	add eax, ebx
  3897 0000300D 01D8                <1> 	add eax, ebx
  3898 0000300F 01D8                <1> 	add eax, ebx
  3899 00003011 01D8                <1> 	add eax, ebx
  3900 00003013 01D8                <1> 	add eax, ebx
  3901 00003015 01D8                <1> 	add eax, ebx
  3902 00003017 01D8                <1> 	add eax, ebx
  3903 00003019 01D8                <1> 	add eax, ebx
  3904 0000301B 81E901000000        <1> 	sub ecx, 1
  3905 00003021 81F900000000        <1> 	cmp ecx, 0
  3906 00003027 77DE                <1> 	ja .expmul
  3907 00003029 01C2                <1> 	add edx, eax
  3908 0000302B 59                  <1> 	pop ecx
  3909 0000302C 4E                  <1> 	dec esi
  3910 0000302D 41                  <1> 	inc ecx
  3911 0000302E EBA8                <1> 	jmp .txtlp
  3912 00003030 89D1                <1> .done: mov ecx, edx
  3913 00003032 C3                  <1> 	ret
  3914                                      %include "source/programs.asm"
  3915 00003033 FF2C                <1> filetypes db 255,44
  3916                              <1> progstart:		;programs start here
  3917                              <1> indexfiles:
  3918 00003035 BE[35300000]        <1> 	mov esi, progstart
  3919 0000303A BB[6EA00000]        <1> 	mov ebx, fileindex
  3920 0000303F BF[35300000]        <1> 	mov edi, progstart
  3921 00003044 81EF02000000        <1> 	sub edi, 2
  3922                              <1> indexloop:
  3923 0000304A 668B0E              <1> 	mov cx, [esi]
  3924                              <1> 	indexloop2:
  3925 0000304D 663B0F              <1> 		cmp cx, [edi]
  3926 00003050 7424                <1> 		je indexloop2done
  3927 00003052 81EF02000000        <1> 		sub edi, 2
  3928 00003058 81FF[33300000]      <1> 		cmp edi, filetypes
  3929 0000305E 73ED                <1> 		jae indexloop2
  3930 00003060 BF[35300000]        <1> 	mov edi, progstart
  3931 00003065 81EF02000000        <1> 	sub edi, 2
  3932 0000306B 46                  <1> 	inc esi
  3933 0000306C 81FE[C14A0000]      <1> 	cmp esi, batchprogend
  3934 00003072 734E                <1> 	jae indexloopdone
  3935 00003074 EBD4                <1> 	jmp indexloop
  3936                              <1> indexloop2done:
  3937 00003076 66890B              <1> 	mov [ebx], cx
  3938 00003079 81C302000000        <1> 	add ebx, 2
  3939 0000307F 81C602000000        <1> 	add esi, 2
  3940                              <1> 	nameindex:
  3941 00003085 8A0E                <1> 		mov cl, [esi]
  3942 00003087 80F900              <1> 		cmp cl, 0
  3943 0000308A 7406                <1> 		je nameindexdone
  3944 0000308C 880B                <1> 		mov [ebx], cl
  3945 0000308E 46                  <1> 		inc esi
  3946 0000308F 43                  <1> 		inc ebx
  3947 00003090 EBF3                <1> 		jmp nameindex
  3948                              <1> 	nameindexdone:
  3949 00003092 43                  <1> 		inc ebx
  3950 00003093 66C7030000          <1> 		mov word [ebx], 0
  3951 00003098 81C302000000        <1> 		add ebx, 2
  3952 0000309E 46                  <1> 		inc esi
  3953 0000309F 8933                <1> 		mov [ebx], esi
  3954 000030A1 81C304000000        <1> 		add ebx, 4
  3955 000030A7 66C7030000          <1> 		mov word [ebx], 0
  3956 000030AC 81C302000000        <1> 		add ebx, 2
  3957 000030B2 81FB[6EA40000]      <1> 		cmp ebx, fileindexend
  3958 000030B8 7308                <1> 		jae indexloopdone
  3959 000030BA 81C601000000        <1> 		add esi, 1
  3960 000030C0 EB88                <1> 		jmp indexloop
  3961 000030C2 C605[CA300000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3962 000030C9 C3                  <1> 		ret
  3963                              <1> 
  3964 000030CA 00                  <1> indexdone db 0
  3965                              <1> %include 'source/programs/_comment.asm' ;#
  3966 000030CB FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3967 000030CF C3                  <2> 	ret 
  3968                              <1> %include 'source/programs/_math.asm' ;!
  3969 000030D0 FF2C2100            <2> db 255,44,"!",0
  3970                              <2> 	num:	
  3971 000030D4 E8C5FBFFFF          <2> 		call clearbuffer
  3972 000030D9 C605[5A330000]00    <2> 		mov byte [decimal], 0
  3973 000030E0 C605[5B330000]00    <2> 		mov byte [decimal2], 0
  3974 000030E7 8B35[DF2B0000]      <2> 		mov esi, [currentcommandloc]
  3975 000030ED 31C0                <2> 		xor eax, eax
  3976 000030EF 31C9                <2> 		xor ecx, ecx
  3977 000030F1 31DB                <2> 		xor ebx, ebx
  3978 000030F3 8A06                <2> 	num2:	mov al, [esi]
  3979 000030F5 3C2B                <2> 		cmp al, '+'
  3980 000030F7 741B                <2> 		je operatorfound
  3981 000030F9 3C2D                <2> 		cmp al, '-'
  3982 000030FB 7417                <2> 		je operatorfound
  3983 000030FD 3C2A                <2> 		cmp al, '*'
  3984 000030FF 7413                <2> 		je operatorfound
  3985 00003101 3C2F                <2> 		cmp al, '/'
  3986 00003103 740F                <2> 		je operatorfound
  3987 00003105 3C5E                <2> 		cmp al, '^'
  3988 00003107 740B                <2> 		je operatorfound
  3989 00003109 46                  <2> 		inc esi
  3990 0000310A 3C00                <2> 		cmp al, 0
  3991 0000310C 0F8420F8FFFF        <2> 		je near nwcmd
  3992 00003112 EBDF                <2> 		jmp num2
  3993 00003114 50                  <2> 	operatorfound: push eax
  3994 00003115 30E4                <2> 		xor ah, ah
  3995 00003117 8826                <2> 		mov [esi], ah
  3996 00003119 89F7                <2> 		mov edi, esi
  3997 0000311B 46                  <2> 		inc esi
  3998 0000311C 8A06                <2> 		mov al, [esi]
  3999 0000311E 3C25                <2> 		cmp al, '%'
  4000 00003120 0F8462000000        <2> 		je near resultnum1
  4001                              <2> 	varnum2: 
  4002 00003126 57                  <2> 		push edi
  4003 00003127 E8A4000000          <2> 		call checkdecimal
  4004 0000312C 5F                  <2> 		pop edi
  4005 0000312D E880FEFFFF          <2> 		call cnvrttxt
  4006                              <2> 	vrnm2:
  4007 00003132 89CB                <2> 		mov ebx, ecx
  4008 00003134 53                  <2> 		push ebx
  4009 00003135 E864FBFFFF          <2> 		call clearbuffer
  4010 0000313A 8B35[DF2B0000]      <2> 		mov esi, [currentcommandloc]
  4011 00003140 89F7                <2> 		mov edi, esi
  4012 00003142 46                  <2> 		inc esi
  4013 00003143 8A06                <2> 		mov al, [esi]
  4014 00003145 3C25                <2> 		cmp al, '%'
  4015 00003147 0F844F000000        <2> 		je near resultnum2
  4016                              <2> 	varnum4: 
  4017 0000314D 57                  <2> 		push edi
  4018 0000314E E869000000          <2> 		call checkdecimal2
  4019 00003153 5F                  <2> 		pop edi
  4020 00003154 E859FEFFFF          <2> 		call cnvrttxt
  4021                              <2> 	vrnm4:
  4022 00003159 5B                  <2> 		pop ebx
  4023 0000315A 58                  <2> 		pop eax
  4024 0000315B 3C2B                <2> 		cmp al, '+'
  4025 0000315D 0F849B000000        <2> 		je near plusnum
  4026 00003163 3C2D                <2> 		cmp al, '-'
  4027 00003165 0F849F000000        <2> 		je near subnum
  4028 0000316B 3C2A                <2> 		cmp al, '*'
  4029 0000316D 0F84A3000000        <2> 		je near mulnum
  4030 00003173 3C2F                <2> 		cmp al, '/'
  4031 00003175 0F84B1000000        <2> 		je near divnum
  4032 0000317B 3C5E                <2> 		cmp al, '^'
  4033 0000317D 0F84CE000000        <2> 		je near expnum
  4034 00003183 E9AAF7FFFF          <2> 		jmp nwcmd
  4035                              <2> 	resultnum1:
  4036 00003188 8A0D[5C330000]      <2> 		mov cl, [decimalresult]
  4037 0000318E 880D[5A330000]      <2> 		mov [decimal], cl
  4038 00003194 8B0D[5D330000]      <2> 		mov ecx, [result]
  4039 0000319A EB96                <2> 		jmp vrnm2
  4040                              <2> 	resultnum2:
  4041 0000319C 8A0D[5A330000]      <2> 		mov cl, [decimal]
  4042 000031A2 880D[5B330000]      <2> 		mov [decimal2], cl
  4043 000031A8 8A0D[5C330000]      <2> 		mov cl, [decimalresult]
  4044 000031AE 880D[5A330000]      <2> 		mov [decimal], cl
  4045 000031B4 8B0D[5D330000]      <2> 		mov ecx, [result]
  4046 000031BA EB9D                <2> 		jmp vrnm4
  4047                              <2> 	checkdecimal2:
  4048 000031BC 8A25[5A330000]      <2> 		mov ah, [decimal]
  4049 000031C2 8825[5B330000]      <2> 		mov [decimal2], ah
  4050 000031C8 30E4                <2> 		xor ah, ah
  4051 000031CA 8825[5A330000]      <2> 		mov [decimal], ah
  4052                              <2> 	checkdecimal:
  4053 000031D0 89F7                <2> 		mov edi, esi
  4054                              <2> 	chkdec1:
  4055 000031D2 8A07                <2> 		mov al, [edi]
  4056 000031D4 3C2E                <2> 		cmp al, '.'
  4057 000031D6 0F840B000000        <2> 		je near fnddec
  4058 000031DC 3C00                <2> 		cmp al, 0
  4059 000031DE 0F8419000000        <2> 		je near nodecimal
  4060 000031E4 47                  <2> 		inc edi
  4061 000031E5 EBEB                <2> 		jmp chkdec1
  4062                              <2> 	fnddec:
  4063 000031E7 8A4701              <2> 		mov al, [edi + 1]
  4064 000031EA 8807                <2> 		mov [edi], al
  4065 000031EC 3C00                <2> 		cmp al, 0
  4066 000031EE 0F8409000000        <2> 		je near nodecimal
  4067 000031F4 FE05[5A330000]      <2> 		inc byte [decimal]
  4068 000031FA 47                  <2> 		inc edi
  4069 000031FB EBEA                <2> 		jmp fnddec
  4070                              <2> 	nodecimal:
  4071 000031FD C3                  <2> 		ret
  4072                              <2> 	plusnum:
  4073 000031FE E815010000          <2> 		call decaddfix
  4074 00003203 01D9                <2> 		add ecx, ebx
  4075 00003205 E98A000000          <2> 		jmp retnum
  4076                              <2> 	subnum:
  4077 0000320A E809010000          <2> 		call decaddfix
  4078 0000320F 29D9                <2> 		sub ecx, ebx
  4079 00003211 E97E000000          <2> 		jmp retnum
  4080                              <2> 	mulnum:
  4081 00003216 A0[5B330000]        <2> 		mov al, [decimal2]
  4082 0000321B 0005[5A330000]      <2> 		add [decimal], al
  4083 00003221 89C8                <2> 		mov eax, ecx
  4084 00003223 F7E3                <2> 		mul ebx
  4085 00003225 89C1                <2> 		mov ecx, eax
  4086 00003227 E968000000          <2> 		jmp retnum
  4087                              <2> 	divnum:
  4088 0000322C E8E7000000          <2> 		call decaddfix
  4089 00003231 30C0                <2> 		xor al, al
  4090 00003233 A2[5A330000]        <2> 		mov [decimal], al
  4091 00003238 31D2                <2> 		xor edx, edx
  4092 0000323A 89C8                <2> 		mov eax, ecx
  4093 0000323C 81FB00000000        <2> 		cmp ebx, 0
  4094 00003242 0F844C000000        <2> 		je near retnum
  4095 00003248 F7F3                <2> 		div ebx
  4096 0000324A 89C1                <2> 		mov ecx, eax
  4097 0000324C E943000000          <2> 		jmp retnum
  4098                              <2> 	expnum:
  4099 00003251 8A15[5A330000]      <2> 		mov dl, [decimal]
  4100 00003257 8815[5B330000]      <2> 		mov [decimal2], dl
  4101 0000325D 31D2                <2> 		xor edx, edx
  4102 0000325F 89C8                <2> 		mov eax, ecx
  4103 00003261 89D9                <2> 		mov ecx, ebx
  4104 00003263 89C3                <2> 		mov ebx, eax
  4105 00003265 81F900000000        <2> 		cmp ecx, 0
  4106 0000326B 7422                <2> 		je noexpnum
  4107 0000326D 49                  <2> 		dec ecx
  4108 0000326E 81F900000000        <2> 		cmp ecx, 0
  4109 00003274 7412                <2> 		je noexpnumlp
  4110 00003276 F7E3                <2> 	expnumlp: mul ebx
  4111 00003278 8A15[5B330000]      <2> 		mov dl, [decimal2]
  4112 0000327E 0015[5A330000]      <2> 		add [decimal], dl
  4113 00003284 31D2                <2> 		xor edx, edx
  4114 00003286 E2EE                <2> 		loop expnumlp
  4115                              <2> 	noexpnumlp:
  4116 00003288 89C1                <2> 		mov ecx, eax
  4117 0000328A E905000000          <2> 		jmp retnum
  4118                              <2> 	noexpnum:
  4119 0000328F B901000000          <2> 		mov ecx, 1
  4120                              <2> 	retnum: 
  4121 00003294 BE[02BF0000]        <2> 		mov esi, numbuf
  4122 00003299 890D[5D330000]      <2> 		mov [result], ecx
  4123 0000329F E80FFAFFFF          <2> 		call convert
  4124 000032A4 BE[02BF0000]        <2> 		mov esi, numbuf
  4125 000032A9 8A25[5A330000]      <2> 		mov ah, [decimal]
  4126 000032AF 8825[5C330000]      <2> 		mov [decimalresult], ah
  4127 000032B5 80FC00              <2> 		cmp ah, 0
  4128 000032B8 0F8425000000        <2> 		je near noputdecimal
  4129                              <2> 	putdecimal:
  4130 000032BE 4E                  <2> 		dec esi
  4131 000032BF FECC                <2> 		dec ah
  4132 000032C1 80FC00              <2> 		cmp ah, 0
  4133 000032C4 0F87F4FFFFFF        <2> 		ja near putdecimal
  4134 000032CA 4E                  <2> 		dec esi
  4135 000032CB 8A06                <2> 		mov al, [esi]
  4136 000032CD C6062E              <2> 		mov byte [esi], '.'
  4137                              <2> 	decputloop:
  4138 000032D0 4E                  <2> 		dec esi
  4139 000032D1 8A26                <2> 		mov ah, [esi]
  4140 000032D3 8806                <2> 		mov [esi], al
  4141 000032D5 88E0                <2> 		mov al, ah
  4142 000032D7 81FE[EEBE0000]      <2> 		cmp esi, buf2
  4143 000032DD 0F87EDFFFFFF        <2> 		ja near decputloop
  4144                              <2> 	noputdecimal:
  4145 000032E3 BE[EEBE0000]        <2> 		mov esi, buf2
  4146 000032E8 E809000000          <2> 		call chkadd
  4147 000032ED E940F6FFFF          <2> 		jmp nwcmd
  4148 000032F2 00000000            <2> edxnumbuf dw 0,0
  4149 000032F6 8A06                <2> 	chkadd: mov al, [esi]
  4150 000032F8 3C30                <2> 		cmp al, '0'
  4151 000032FA 750C                <2> 		jne dnadd
  4152 000032FC 46                  <2> 		inc esi
  4153 000032FD 81FE[02BF0000]      <2> 		cmp esi, numbuf
  4154 00003303 7402                <2> 		je dnaddm1
  4155 00003305 EBEF                <2> 		jmp chkadd
  4156 00003307 4E                  <2> 	dnaddm1: dec esi
  4157 00003308 E805EAFFFF          <2> 	dnadd:	call print
  4158 0000330D BE[477C0000]        <2> 		mov esi, line
  4159 00003312 E8FBE9FFFF          <2> 		call print
  4160 00003317 C3                  <2> 		ret
  4161                              <2> 		
  4162                              <2> 	decaddfix:
  4163 00003318 A0[5B330000]        <2> 		mov al, [decimal2]
  4164 0000331D 8A25[5A330000]      <2> 		mov ah, [decimal]
  4165 00003323 38E0                <2> 		cmp al, ah
  4166 00003325 7432                <2> 		je gooddecadd
  4167 00003327 38E0                <2> 		cmp al, ah
  4168 00003329 721A                <2> 		jb lowdecadd
  4169                              <2> 	highdecadd:
  4170 0000332B FEC4                <2> 		inc ah
  4171 0000332D 89CA                <2> 		mov edx, ecx
  4172 0000332F C1E103              <2> 		shl ecx, 3
  4173 00003332 01D1                <2> 		add ecx, edx
  4174 00003334 01D1                <2> 		add ecx, edx
  4175 00003336 38E0                <2> 		cmp al, ah
  4176 00003338 77F1                <2> 		ja highdecadd
  4177 0000333A 8825[5A330000]      <2> 		mov [decimal], ah
  4178 00003340 E914000000          <2> 		jmp gooddecadd
  4179                              <2> 	lowdecadd:
  4180 00003345 FEC0                <2> 		inc al
  4181 00003347 89DA                <2> 		mov edx, ebx
  4182 00003349 C1E303              <2> 		shl ebx, 3
  4183 0000334C 01D3                <2> 		add ebx, edx
  4184 0000334E 01D3                <2> 		add ebx, edx
  4185 00003350 38E0                <2> 		cmp al, ah
  4186 00003352 72F1                <2> 		jb lowdecadd
  4187 00003354 A2[5A330000]        <2> 		mov [decimal], al
  4188                              <2> 	gooddecadd:
  4189 00003359 C3                  <2> 		ret
  4190                              <2> 		
  4191 0000335A 00                  <2> decimal db 0
  4192 0000335B 00                  <2> decimal2 db 0
  4193 0000335C 00                  <2> decimalresult db 0
  4194 0000335D 00000000            <2> result dd 0
  4195                              <1> %include 'source/programs/_variables.asm' ;% and $
  4196 00003361 FF2C2500            <2> db 255,44,"%",0
  4197                              <2> 	ans:
  4198 00003365 BE[EEBE0000]        <2> 		mov esi, buf2
  4199 0000336A E887FFFFFF          <2> 		call chkadd
  4200 0000336F C3                  <2> 		ret
  4201                              <2> 		
  4202 00003370 FF2C2400            <2> db 255,44,"$",0
  4203 00003374 8B35[DF2B0000]      <2> var: mov esi, [currentcommandloc]
  4204 0000337A BB[EEA60000]        <2> 	mov ebx, variables
  4205 0000337F 8A06                <2> lkeq:	mov al, [esi]
  4206 00003381 3C3D                <2> 	cmp al, '='
  4207 00003383 741B                <2> 	je eqfnd	;is there an '=' sign?
  4208 00003385 3C00                <2> 	cmp al, 0
  4209 00003387 7403                <2> 	je echovars
  4210 00003389 46                  <2> 	inc esi
  4211 0000338A EBF3                <2> 	jmp lkeq
  4212 0000338C BE[EEA60000]        <2> echovars: mov esi, variables
  4213 00003391 BB[EEB60000]        <2> 	mov ebx, varend
  4214 00003396 B105                <2> 	mov cl, 5
  4215 00003398 B504                <2> 	mov ch, 4
  4216 0000339A E89EF8FFFF          <2> 	call array
  4217 0000339F C3                  <2> 	ret
  4218 000033A0 46                  <2> eqfnd:	inc esi
  4219 000033A1 8A06                <2> 	mov al, [esi]
  4220 000033A3 3C00                <2> 	cmp al, 0
  4221 000033A5 7410                <2> 	je readvar
  4222 000033A7 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4223 000033AD BB[EEA60000]        <2> 	mov ebx, variables
  4224 000033B2 E919000000          <2> 	jmp seek
  4225                              <2> readvar:
  4226 000033B7 B00A                <2> 	mov al, 10
  4227 000033B9 66BB0700            <2> 	mov bx, 7
  4228 000033BD C605[5B210000]00    <2> 	mov byte [commandedit], 0
  4229 000033C4 BF[EEBE0000]        <2> 	mov edi, buftxtend
  4230 000033C9 E82CEAFFFF          <2> 	call rdprint
  4231 000033CE EBA4                <2> 	jmp var
  4232 000033D0 668B03              <2> seek:	mov ax, [ebx]
  4233 000033D3 B105                <2> 	mov cl, 5
  4234 000033D5 B504                <2> 	mov ch, 4
  4235 000033D7 663D0000            <2> 	cmp ax, 0
  4236 000033DB 0F845B000000        <2> 	je near save
  4237 000033E1 6639C8              <2> 	cmp ax, cx
  4238 000033E4 7403                <2> 	je skfnd
  4239 000033E6 43                  <2> 	inc ebx
  4240 000033E7 EBE7                <2> 	jmp seek
  4241 000033E9 8B35[DF2B0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4242 000033EF 46                  <2> 	inc esi
  4243 000033F0 81C302000000        <2> 	add ebx, 2
  4244 000033F6 89DF                <2> 	mov edi, ebx
  4245 000033F8 B13D                <2> 	mov cl, '='
  4246 000033FA E81FF8FFFF          <2> 	call cndtest
  4247 000033FF 3C01                <2> 	cmp al, 1	
  4248 00003401 7418                <2> 	je varfnd
  4249 00003403 89FB                <2> 	mov ebx, edi
  4250 00003405 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4251 0000340B 668B03              <2> 	mov ax, [ebx]
  4252 0000340E 663D0000            <2> 	cmp ax, 0
  4253 00003412 0F8424000000        <2> 	je near save
  4254 00003418 43                  <2> 	inc ebx
  4255 00003419 EBB5                <2> 	jmp seek
  4256 0000341B 8A03                <2> varfnd:	mov al, [ebx]
  4257 0000341D 3C04                <2> 	cmp al, 4
  4258 0000341F 7404                <2> 	je save2
  4259 00003421 4B                  <2> 	dec ebx
  4260 00003422 4E                  <2> 	dec esi
  4261 00003423 EBF6                <2> 	jmp varfnd
  4262 00003425 4B                  <2> save2:	dec ebx
  4263 00003426 4E                  <2> 	dec esi
  4264 00003427 8A03                <2> 	mov al, [ebx]
  4265 00003429 3C05                <2> 	cmp al, 5
  4266 0000342B 7402                <2> 	je remove
  4267 0000342D EBEC                <2> 	jmp varfnd
  4268 0000342F 8A03                <2> remove: mov al, [ebx]
  4269 00003431 3C00                <2> 	cmp al, 0
  4270 00003433 749B                <2> 	je seek
  4271 00003435 30C0                <2> 	xor al, al
  4272 00003437 8803                <2> 	mov [ebx], al
  4273 00003439 43                  <2> 	inc ebx
  4274 0000343A EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4275 0000343C 8B35[DF2B0000]      <2> save:	mov esi, [currentcommandloc]
  4276 00003442 43                  <2> 	inc ebx
  4277 00003443 B005                <2> 	mov al, 5
  4278 00003445 B404                <2> 	mov ah, 4
  4279 00003447 668903              <2> 	mov [ebx], ax
  4280 0000344A 43                  <2> 	inc ebx
  4281 0000344B 43                  <2> svhere:	inc ebx
  4282 0000344C 46                  <2> 	inc esi
  4283 0000344D 8A06                <2> 	mov al, [esi]
  4284 0000344F 3C00                <2> 	cmp al, 0
  4285 00003451 0F844A000000        <2> 	je near svdone
  4286 00003457 3C25                <2> 	cmp al, '%'
  4287 00003459 7404                <2> 	je ans2
  4288 0000345B 8803                <2> 	mov [ebx], al	
  4289 0000345D EBEC                <2> 	jmp svhere
  4290 0000345F 56                  <2> ans2:	push esi
  4291 00003460 BE[EEBE0000]        <2> 	mov esi, buf2
  4292 00003465 E823000000          <2> 	call ansfnd
  4293 0000346A E803000000          <2> 	call anscp
  4294 0000346F 5E                  <2> 	pop esi
  4295 00003470 EBD9                <2> 	jmp svhere
  4296 00003472 8A06                <2> anscp:	mov al, [esi]
  4297 00003474 8803                <2> 	mov [ebx], al
  4298 00003476 81FE[02BF0000]      <2> 	cmp esi, numbuf
  4299 0000347C 74CD                <2> 	je svhere
  4300 0000347E 3C00                <2> 	cmp al, 0
  4301 00003480 74C9                <2> 	je svhere
  4302 00003482 43                  <2> 	inc ebx
  4303 00003483 46                  <2> 	inc esi
  4304 00003484 EBEC                <2> 	jmp anscp
  4305 00003486 5E                  <2> ansnf:	pop esi
  4306 00003487 8A06                <2> 	mov al, [esi]
  4307 00003489 8803                <2> 	mov [ebx], al
  4308 0000348B EBBE                <2> 	jmp svhere
  4309 0000348D 46                  <2> ansfnd:	inc esi
  4310 0000348E 81FE[01BF0000]      <2> 	cmp esi, numbuf - 1
  4311 00003494 740A                <2> 	je fndans
  4312 00003496 8A06                <2> 	mov al, [esi]
  4313 00003498 3C00                <2> 	cmp al, 0
  4314 0000349A 74EA                <2> 	je ansnf
  4315 0000349C 3C30                <2> 	cmp al, '0'
  4316 0000349E 74ED                <2> 	je ansfnd
  4317                              <2> fndans:
  4318 000034A0 C3                  <2> 	ret
  4319 000034A1 30C0                <2> svdone:	xor al, al
  4320 000034A3 8803                <2> 	mov [ebx], al
  4321 000034A5 C3                  <2> 	ret
  4322                              <1> %include 'source/programs/_run.asm' ;./
  4323                              <2> 
  4324 000034A6 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4325 000034AA FF2C2E2F00          <2> 	db 255,44,"./",0
  4326                              <2> rundiskprog:
  4327 000034AF 8B3D[DF2B0000]      <2> 	mov edi, [currentcommandloc]
  4328 000034B5 81C702000000        <2> 	add edi, 2
  4329 000034BB BE00004000          <2> 	mov esi, 0x400000
  4330 000034C0 E8C82A0000          <2> 	call loadfile
  4331 000034C5 81FA94010000        <2> 	cmp edx, 404
  4332 000034CB 746A                <2> 	je noprogfound
  4333 000034CD BB00004000          <2> 	mov ebx, 0x400000
  4334 000034D2 A1[A6340000]        <2> 	mov eax, [elfstart]
  4335 000034D7 3903                <2> 	cmp [ebx], eax
  4336 000034D9 0F8437000000        <2> 	je near runelf
  4337 000034DF 66813B4558          <2> 	cmp word [ebx], "EX"
  4338 000034E4 7577                <2> 	jne progbatchfound
  4339 000034E6 81C302000000        <2> 	add ebx, 2
  4340 000034EC 8B3D[DF2B0000]      <2> 	mov edi, [currentcommandloc]
  4341 000034F2 81C702000000        <2> 	add edi, 2
  4342                              <2> findspaceprog:
  4343 000034F8 8A07                <2> 	mov al, [edi]
  4344 000034FA 47                  <2> 	inc edi
  4345 000034FB 3C20                <2> 	cmp al, " "
  4346 000034FD 75F9                <2> 	jne findspaceprog
  4347                              <2> findnonspaceprog:
  4348 000034FF 8A07                <2> 	mov al, [edi]
  4349 00003501 47                  <2> 	inc edi
  4350 00003502 3C20                <2> 	cmp al, " "
  4351 00003504 74F9                <2> 	je findnonspaceprog
  4352 00003506 4F                  <2> 	dec edi
  4353 00003507 8925[6EA40000]      <2> 	mov [previousstack], esp
  4354 0000350D FFD3                <2> 	call ebx
  4355 0000350F 8B25[6EA40000]      <2> 	mov esp, [previousstack]
  4356 00003515 C3                  <2> 	ret
  4357                              <2> runelf:
  4358 00003516 8B3D[DF2B0000]      <2> 	mov edi, [currentcommandloc]
  4359 0000351C 81C702000000        <2> 	add edi, 2
  4360 00003522 81C380000000        <2> 	add ebx, 0x80
  4361 00003528 8925[6EA40000]      <2> 	mov [previousstack], esp
  4362 0000352E FFD3                <2> 	call ebx
  4363 00003530 8B25[6EA40000]      <2> 	mov esp, [previousstack]
  4364 00003536 C3                  <2> 	ret
  4365                              <2> noprogfound:
  4366 00003537 BE[0E7C0000]        <2> 	mov esi, notfound1
  4367 0000353C E8D1E7FFFF          <2> 	call print
  4368 00003541 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4369 00003547 81C602000000        <2> 	add esi, 2
  4370 0000354D E8C0E7FFFF          <2> 	call print
  4371 00003552 BE[167C0000]        <2> 	mov esi, notfound2
  4372 00003557 E8B6E7FFFF          <2> 	call print
  4373 0000355C C3                  <2> 	ret
  4374                              <2> progbatchfound:
  4375 0000355D BF00004000          <2> 		mov edi, 0x400000
  4376 00003562 C605[E8A60000]01    <2> 		mov byte [BATCHISON], 1
  4377                              <2> 	batchrunloop:
  4378 00003569 E8A1F3FFFF          <2> 		call buftxtclear
  4379 0000356E BE[EEBA0000]        <2> 		mov esi, buftxt
  4380 00003573 8935[DF2B0000]      <2> 		mov [currentcommandloc], esi
  4381                              <2> 	batchrunloop2:
  4382 00003579 B10A                <2> 		mov cl, 10
  4383 0000357B B50D                <2> 		mov ch, 13
  4384 0000357D 380F                <2> 		cmp [edi], cl
  4385 0000357F 0F8419000000        <2> 		je near nxtbatchrunline
  4386 00003585 382F                <2> 		cmp [edi], ch
  4387 00003587 0F8411000000        <2> 		je near nxtbatchrunline
  4388 0000358D 803F00              <2> 		cmp byte [edi], 0
  4389 00003590 0F8408000000        <2> 		je near nxtbatchrunline
  4390 00003596 8A07                <2> 		mov al, [edi]
  4391 00003598 8806                <2> 		mov [esi], al
  4392 0000359A 46                  <2> 		inc esi
  4393 0000359B 47                  <2> 		inc edi
  4394 0000359C EBDB                <2> 		jmp batchrunloop2
  4395                              <2> 	nxtbatchrunline:
  4396 0000359E 47                  <2> 		inc edi
  4397 0000359F 380F                <2> 		cmp [edi], cl
  4398 000035A1 74FB                <2> 		je nxtbatchrunline
  4399 000035A3 382F                <2> 		cmp [edi], ch
  4400 000035A5 74F7                <2> 		je nxtbatchrunline
  4401 000035A7 893D[05360000]      <2> 		mov [batchedi], edi
  4402 000035AD 893D[E4A60000]      <2> 		mov [BATCHPOS], edi
  4403 000035B3 C60600              <2> 		mov byte [esi], 0
  4404 000035B6 BE[EEBA0000]        <2> 		mov esi, buftxt
  4405 000035BB 803E00              <2> 		cmp byte [esi], 0
  4406 000035BE 0F8439000000        <2> 		je near nobatchfoundrun
  4407 000035C4 31DB                <2> 		xor ebx, ebx
  4408 000035C6 8A1D[7FA60000]      <2> 		mov bl, [IFON]
  4409 000035CC 80FB00              <2> 		cmp bl, 0
  4410 000035CF 0F8534000000        <2> 		jne near iftestbatch
  4411                              <2> 	doneiftest:
  4412 000035D5 803D[DB360000]00    <2> 		cmp byte [runnextline], 0
  4413 000035DC 0F8405000000        <2> 		je near noruniftest
  4414 000035E2 E822F5FFFF          <2> 		call run
  4415                              <2> 	noruniftest:
  4416 000035E7 C605[DB360000]01    <2> 		mov byte [runnextline], 1
  4417 000035EE 8B3D[05360000]      <2> 		mov edi, [batchedi]
  4418 000035F4 803F00              <2> 		cmp byte [edi], 0
  4419 000035F7 0F856CFFFFFF        <2> 		jne near batchrunloop
  4420                              <2> 	nobatchfoundrun:
  4421 000035FD C605[E8A60000]00    <2> 		mov byte [BATCHISON], 0
  4422 00003604 C3                  <2> 		ret
  4423                              <2> 	
  4424 00003605 00000000            <2> batchedi dd 0	
  4425                              <2> 	
  4426                              <2> 	iftestbatch:
  4427 00003609 BE[80A60000]        <2> 		mov esi, IFTRUE
  4428 0000360E 01DE                <2> 		add esi, ebx
  4429 00003610 803E00              <2> 		cmp byte [esi], 0
  4430 00003613 0F85BCFFFFFF        <2> 		jne near doneiftest
  4431 00003619 881D[DC360000]      <2> 		mov [iffalsebuf], bl
  4432 0000361F 803D[E9A60000]01    <2> 		cmp byte [LOOPON], 1
  4433 00003626 0F8513000000        <2> 		jne near fifindbatch
  4434 0000362C E938FFFFFF          <2> 		jmp batchrunloop
  4435                              <2> 	elsetestbatch:
  4436 00003631 C60601              <2> 		mov byte [esi], 1
  4437 00003634 81C705000000        <2> 		add edi, 5
  4438 0000363A E92AFFFFFF          <2> 		jmp batchrunloop
  4439                              <2> 	fifindbatch:
  4440 0000363F 66B96966            <2> 		mov cx, "if"
  4441 00003643 66B86669            <2> 		mov ax, "fi"
  4442 00003647 663907              <2> 		cmp [edi], ax
  4443 0000364A 0F8424000000        <2> 		je near fifoundbatch
  4444 00003650 66390F              <2> 		cmp [edi], cx
  4445 00003653 0F8465000000        <2> 		je near iffoundbatch
  4446 00003659 803F00              <2> 		cmp byte [edi], 0
  4447 0000365C 0F8412000000        <2> 		je near fifoundbatch
  4448 00003662 B8656C7365          <2> 		mov eax, "else"
  4449 00003667 3907                <2> 		cmp [edi], eax
  4450 00003669 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4451 0000366F E973FFFFFF          <2> 		jmp noruniftest
  4452                              <2> 	fifoundbatch:
  4453 00003674 81C702000000        <2> 		add edi, 2
  4454 0000367A B00A                <2> 		mov al, 10
  4455 0000367C 3807                <2> 		cmp [edi], al
  4456 0000367E 0F840B000000        <2> 		je near goodfibatch
  4457 00003684 803F00              <2> 		cmp byte [edi], 0
  4458 00003687 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4459 0000368D EBB0                <2> 		jmp fifindbatch
  4460                              <2> 	goodfibatch:
  4461 0000368F B001                <2> 		mov al, 1
  4462 00003691 2805[7FA60000]      <2> 		sub [IFON], al 
  4463 00003697 A0[7FA60000]        <2> 		mov al, [IFON]
  4464 0000369C 8A1D[DC360000]      <2> 		mov bl, [iffalsebuf]
  4465 000036A2 38D8                <2> 		cmp al, bl
  4466 000036A4 7799                <2> 		ja fifindbatch
  4467 000036A6 8B35[DF2B0000]      <2> 		mov esi, [currentcommandloc]
  4468 000036AC 81EF02000000        <2> 		sub edi, 2
  4469 000036B2 C605[DB360000]00    <2> 		mov byte [runnextline], 0
  4470 000036B9 E9ABFEFFFF          <2> 		jmp batchrunloop
  4471                              <2> 	iffoundbatch:
  4472 000036BE B020                <2> 		mov al, ' '
  4473 000036C0 81C702000000        <2> 		add edi, 2
  4474 000036C6 3807                <2> 		cmp [edi], al
  4475 000036C8 0F8571FFFFFF        <2> 		jne near fifindbatch
  4476 000036CE B001                <2> 		mov al, 1
  4477 000036D0 0005[7FA60000]      <2> 		add [IFON], al
  4478 000036D6 E964FFFFFF          <2> 		jmp fifindbatch
  4479                              <2> 		
  4480                              <2> 		
  4481 000036DB 01                  <2> runnextline db 1
  4482 000036DC 00                  <2> iffalsebuf db 0
  4483                              <2> 
  4484 000036DD C3                  <2> notbatch: ret 
  4485                              <1> %ifdef network.included
  4486                              <1> 	%include 'source/programs/arp.asm'
  4487 000036DE FF2C61727000        <2> db 255,44,"arp",0
  4488                              <2> 	;ARP TESTING
  4489                              <2> arptest:
  4490 000036E4 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4491 000036EA 81C604000000        <2> 	add esi, 4
  4492 000036F0 E819440000          <2> 	call strtoip
  4493 000036F5 890D[9C370000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4494 000036FB E854440000          <2> 	call showip
  4495 00003700 803D[A0370000]01    <2> 	cmp byte [arpconfig], 1
  4496 00003707 7405                <2> 	je arptest2
  4497 00003709 E841000000          <2> 	call arpinit
  4498                              <2> arptest2:	;try to reach 192.168.0.1
  4499 0000370E 8B0D[007C0000]      <2> 	mov ecx, [sysmac]
  4500 00003714 668B1D[047C0000]    <2> 	mov bx, [sysmac + 4]
  4501 0000371B 890D[7C370000]      <2> 	mov [sourcemac], ecx
  4502 00003721 66891D[80370000]    <2> 	mov [sourcemac + 4],bx
  4503 00003728 890D[8C370000]      <2> 	mov [arpsenderinfo], ecx
  4504 0000372E 66891D[90370000]    <2> 	mov [arpsenderinfo + 4], bx
  4505 00003735 BF[76370000]        <2> 	mov edi, frame
  4506 0000373A BE[A0370000]        <2> 	mov esi, framend
  4507 0000373F E89C430000          <2> 	call sendpacket
  4508 00003744 BE[477C0000]        <2> 	mov esi, line
  4509 00003749 E8C4E5FFFF          <2> 	call print
  4510 0000374E C3                  <2> 	ret
  4511                              <2> 	
  4512                              <2> arpinit:
  4513 0000374F BE[A1370000]        <2> 	mov esi, arptable
  4514 00003754 BF[007C0000]        <2> 	mov edi, sysmac
  4515 00003759 BB[FC7B0000]        <2> 	mov ebx, sysip
  4516 0000375E 8B0F                <2> 	mov ecx, [edi]
  4517 00003760 890E                <2> 	mov [esi], ecx
  4518 00003762 668B4F04            <2> 	mov cx, [edi + 4]
  4519 00003766 894E04              <2> 	mov [esi + 4], ecx
  4520 00003769 8B0B                <2> 	mov ecx, [ebx]
  4521 0000376B 894E06              <2> 	mov [esi + 6], ecx
  4522 0000376E C605[A0370000]01    <2> 	mov byte [arpconfig], 1
  4523 00003775 C3                  <2> 	ret
  4524                              <2> 	
  4525                              <2> ;example frame
  4526                              <2> frame:
  4527 00003776 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4528 0000377C 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4529 00003782 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4530                              <2> 	;;example packet
  4531 00003784 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4532 00003786 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4533 00003788 0604                <2> 					db 6,4			;length of mac, length of ip
  4534 0000378A 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4535 0000378C 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4536 00003792 C0A80073            <2> 					db 192,168,0,115		;ip
  4537 00003796 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4538 0000379C C0A80000            <2> 					db 192,168,0,0			;ip
  4539                              <2> framend:
  4540                              <2> 
  4541 000037A0 00                  <2> arpconfig db 0
  4542                              <2> arptable:	;;mac,ip
  4543 000037A1 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4544 000037AA 00<rept>            <2>
  4545                              <2> arptableend:	
  4546                              <1> 	%include 'source/programs/ping.asm'
  4547 00003805 FF2C70696E6700      <2> db 255,44,"ping",0
  4548                              <2> ping:
  4549 0000380C 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4550 00003812 81C605000000        <2> 	add esi, 5
  4551 00003818 E8F1420000          <2> 	call strtoip
  4552 0000381D 890D[BE380000]      <2> 	mov [.destip], ecx
  4553 00003823 E82C430000          <2> 	call showip
  4554 00003828 8B0D[FC7B0000]      <2> 	mov ecx, [sysip]
  4555 0000382E 890D[BA380000]      <2> 	mov [.sourceip]. ecx
  4556 00003834 A1[007C0000]        <2> 	mov eax, [sysmac]
  4557 00003839 A3[A6380000]        <2> 	mov [.sourcemac], eax
  4558 0000383E 66A1[047C0000]      <2> 	mov ax, [sysmac + 4]
  4559 00003844 66A3[AA380000]      <2> 	mov [.sourcemac + 4], ax
  4560 0000384A 31C0                <2> 	xor eax, eax
  4561 0000384C 31DB                <2> 	xor ebx, ebx
  4562 0000384E 66A3[B8380000]      <2> 	mov [.checksum], ax
  4563 00003854 66A3[C4380000]      <2> 	mov [.icmpchecksum], ax
  4564 0000385A BF[AE380000]        <2> 	mov edi, .header
  4565 0000385F BE[C2380000]        <2> 	mov esi, .headerend
  4566 00003864 E87D420000          <2> 	call getchecksum
  4567 00003869 66890D[B8380000]    <2> 	mov [.checksum], cx
  4568 00003870 BF[C2380000]        <2> 	mov edi, .icmp
  4569 00003875 BE[EC380000]        <2> 	mov esi, .packetend
  4570 0000387A E867420000          <2> 	call getchecksum
  4571 0000387F 66890D[C4380000]    <2> 	mov [.icmpchecksum], cx
  4572 00003886 BF[A0380000]        <2> 	mov edi, .packet
  4573 0000388B BE[EC380000]        <2> 	mov esi, .packetend
  4574 00003890 E84B420000          <2> 	call sendpacket
  4575 00003895 BE[477C0000]        <2> 	mov esi, line
  4576 0000389A E873E4FFFF          <2> 	call print
  4577 0000389F C3                  <2> 	ret
  4578                              <2> 	
  4579                              <2> 	
  4580                              <2> 	
  4581                              <2> .packet:
  4582 000038A0 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4583 000038A6 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  4584 000038AC 0800                <2> .ethertype	db 8,0	;ip is 0x800
  4585                              <2> .header:
  4586 000038AE 45                  <2> .version	db 0x45
  4587 000038AF 00                  <2> .services	db 0
  4588 000038B0 003C                <2> .length	db 0,0x3C
  4589 000038B2 0000                <2> .id		dw 0
  4590 000038B4 00                  <2> .flags	db 0
  4591 000038B5 00                  <2> .fragment db 0
  4592 000038B6 80                  <2> .ttl	db 128
  4593 000038B7 01                  <2> .protocol db 1 ;ICMP
  4594 000038B8 0000                <2> .checksum dw 0
  4595 000038BA 00000000            <2> .sourceip dd 0
  4596 000038BE 00000000            <2> .destip dd 0
  4597                              <2> .headerend:
  4598                              <2> .icmp:
  4599 000038C2 08                  <2> .icmptype db 8 ;Ping request
  4600 000038C3 00                  <2> .icmpcode db 0
  4601 000038C4 00000000            <2> .icmpchecksum dd 0
  4602 000038C8 0100                <2> .icmpid dw 1
  4603 000038CA 0000                <2> .sequence dw 0
  4604 000038CC 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  4605 000038D5 6A6B6C6D6E6F707172- <2>
  4606 000038DE 737475767761626364- <2>
  4607 000038E7 6566676869          <2>
  4608                              <2> .packetend
  4609                              <1> %endif
  4610                              <1> %include 'source/programs/batch.asm'
  4611 000038EC FF2C626174636800    <2> db 255,44,"batch",0
  4612                              <2> 	batchst: 
  4613 000038F4 8B3D[DF2B0000]      <2> 		mov edi, [currentcommandloc]
  4614 000038FA 81C706000000        <2> 		add edi, 6
  4615 00003900 803F00              <2> 		cmp byte [edi], 0
  4616 00003903 0F846D000000        <2> 		je near nonamefound
  4617 00003909 BE00004000          <2> 		mov esi, 0x400000
  4618 0000390E E87A260000          <2> 		call loadfile
  4619 00003913 89D0                <2> 		mov eax, edx
  4620 00003915 3D94010000          <2> 		cmp eax, 404
  4621 0000391A 7465                <2> 		je goodbatchname
  4622 0000391C BE[27390000]        <2> 		mov esi, badbatchname
  4623 00003921 E8ECE3FFFF          <2> 		call print
  4624 00003926 C3                  <2> 		ret
  4625 00003927 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4626 00003930 20616C726561647920- <2>
  4627 00003939 657869737473210A00  <2>
  4628 00003942 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4629 0000394B 746F20747970652061- <2>
  4630 00003954 206E616D6520616674- <2>
  4631 0000395D 65722074686520636F- <2>
  4632 00003966 6D6D616E642E0A00    <2>
  4633 0000396E 00000000            <2> 		esicache3 dd 0
  4634 00003972 00000000            <2> 		esicache2 dd 0
  4635                              <2> 	nonamefound:
  4636 00003976 BE[42390000]        <2> 		mov esi, namenotfoundbatch
  4637 0000397B E892E3FFFF          <2> 		call print
  4638 00003980 C3                  <2> 		ret
  4639                              <2> 	goodbatchname:
  4640 00003981 BE00004000          <2> 		mov esi, 0x400000
  4641                              <2> 	batchcreate:
  4642 00003986 8935[6E390000]      <2> 		mov [esicache3], esi
  4643 0000398C BF00008000          <2> 		mov edi, 0x800000
  4644 00003991 B00A                <2> 		mov al, 10
  4645 00003993 B307                <2> 		mov bl, 7
  4646 00003995 B404                <2> 		mov ah, 4
  4647 00003997 CD30                <2> 		int 30h
  4648 00003999 8935[72390000]      <2> 		mov [esicache2], esi
  4649 0000399F 8A0E                <2> 		mov cl, [esi]
  4650 000039A1 8B35[6E390000]      <2> 		mov esi, [esicache3]
  4651 000039A7 BB[DB390000]        <2> 		mov ebx, exitword
  4652 000039AC E86DF2FFFF          <2> 		call cndtest
  4653 000039B1 3C01                <2> 		cmp al, 1
  4654 000039B3 7411                <2> 		je endbatchcreate
  4655 000039B5 3C02                <2> 		cmp al, 2
  4656 000039B7 740D                <2> 		je endbatchcreate
  4657 000039B9 8B35[72390000]      <2> 		mov esi, [esicache2]
  4658 000039BF B00A                <2> 		mov al, 10
  4659 000039C1 8806                <2> 		mov [esi], al
  4660 000039C3 46                  <2> 		inc esi
  4661 000039C4 EBC0                <2> 		jmp batchcreate
  4662                              <2> 	endbatchcreate:
  4663 000039C6 8B35[6E390000]      <2> 		mov esi, [esicache3]
  4664 000039CC 31C0                <2> 		xor eax, eax
  4665 000039CE 8806                <2> 		mov [esi], al
  4666 000039D0 BE00004000          <2> 		mov esi, 0x400000
  4667 000039D5 E838E3FFFF          <2> 		call print
  4668 000039DA C3                  <2> 		ret
  4669                              <2> 	
  4670 000039DB 5C7800              <2> 	exitword db "\x",0
  4671 000039DE 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4672 000039E7 6F20657869742E0A00  <2>
  4673                              <1> %ifdef gui.background
  4674                              <1> 	%include 'source/programs/background.asm'
  4675 000039F0 FF2C6261636B67726F- <2> db 255,44,"background",0
  4676 000039F9 756E6400            <2>
  4677 000039FD 8B3D[DF2B0000]      <2> 		mov edi, [currentcommandloc]
  4678 00003A03 81C70B000000        <2> 		add edi, 11
  4679 00003A09 BE00008000          <2> 		mov esi, 0x800000
  4680 00003A0E E87A250000          <2> 		call loadfile
  4681 00003A13 81FA94010000        <2> 		cmp edx, 404
  4682 00003A19 0F848C0A0000        <2> 		je near filenotfound
  4683 00003A1F BE00008000          <2> 		mov esi, 0x800000
  4684 00003A24 66813E424D          <2> 		cmp word [esi], "BM"
  4685 00003A29 7401                <2> 		je .bmpfound
  4686 00003A2B C3                  <2> 		ret
  4687                              <2> .bmpfound:
  4688 00003A2C 8B3D[C74E0000]      <2> 		mov edi, [physbaseptr]
  4689 00003A32 57                  <2> 		push edi
  4690 00003A33 BE[03C10000]        <2> 		mov esi, backgroundbuffer
  4691 00003A38 8935[5C650000]      <2> 		mov [backgroundimage], esi
  4692 00003A3E 8935[C74E0000]      <2> 		mov [physbaseptr], esi
  4693 00003A44 31C0                <2> 		xor eax, eax
  4694                              <2> .clearlp:
  4695 00003A46 8906                <2> 		mov [esi], eax
  4696 00003A48 81C604000000        <2> 		add esi, 4
  4697 00003A4E 81FE[03D52800]      <2> 		cmp esi, backgroundbufferend
  4698 00003A54 72F0                <2> 		jb .clearlp
  4699 00003A56 BE00008000          <2> 		mov esi, 0x800000
  4700 00003A5B 31C9                <2> 		xor ecx, ecx
  4701 00003A5D 31D2                <2> 		xor edx, edx
  4702 00003A5F 31DB                <2> 		xor ebx, ebx
  4703 00003A61 E8EB260000          <2> 		call showbmp
  4704 00003A66 5F                  <2> 		pop edi
  4705 00003A67 893D[C74E0000]      <2> 		mov [physbaseptr], edi
  4706 00003A6D 803D[288E0000]00    <2> 		cmp byte [guion], 0
  4707 00003A74 740F                <2> 		je .noclear
  4708 00003A76 E88E2A0000          <2> 		call guiclear
  4709 00003A7B E8A3270000          <2> 		call clearmousecursor
  4710 00003A80 E8092B0000          <2> 		call reloadallgraphics
  4711                              <2> .noclear:
  4712 00003A85 C3                  <2> 		ret
  4713                              <1> %endif
  4714                              <1> %include 'source/programs/beep.asm'
  4715 00003A86 FF2C6265657000      <2> 	db 255,44,"beep",0
  4716                              <2> beep:
  4717 00003A8D B8[B23A0000]        <2> 	mov eax, beepstart
  4718 00003A92 A3[60020000]        <2> 	mov [soundpos], eax
  4719 00003A97 B8[B63A0000]        <2> 	mov eax, beepend
  4720 00003A9C A3[64020000]        <2> 	mov [soundendpos], eax
  4721 00003AA1 C605[5D020000]01    <2> 	mov byte [soundon], 1
  4722                              <2> waitforsoundendbeep:
  4723 00003AA8 A0[5D020000]        <2> 	mov al, [soundon]
  4724 00003AAD 3C00                <2> 	cmp al, 0
  4725 00003AAF 75F7                <2> 	jne waitforsoundendbeep
  4726 00003AB1 C3                  <2> 	ret
  4727                              <2> 	
  4728                              <2> beepstart:
  4729 00003AB2 3200D111            <2> 	dw 50, 4561
  4730                              <2> beepend:
  4731                              <1> %include 'source/programs/cd.asm'
  4732 00003AB6 FF2C636400          <2> db 255,44,"cd",0
  4733                              <2> cd:
  4734 00003ABB 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4735 00003AC1 81C603000000        <2> 	add esi, 3
  4736 00003AC7 8B3D[76A40000]      <2> 	mov edi, [currentfolderloc]
  4737 00003ACD 893D[72A40000]      <2> 	mov [lastfolderloc], edi
  4738 00003AD3 81C7[7AA40000]      <2> 	add edi, currentfolder
  4739                              <2> 	;cmp word [esi], ".."
  4740                              <2> 	;je .moveup
  4741                              <2> .movedown:
  4742 00003AD9 8A06                <2> 	mov al, [esi]
  4743 00003ADB 8807                <2> 	mov [edi], al
  4744 00003ADD 47                  <2> 	inc edi
  4745 00003ADE 46                  <2> 	inc esi
  4746 00003ADF 3C00                <2> 	cmp al, 0
  4747 00003AE1 740A                <2> 	je .donecd
  4748 00003AE3 81FF[7AA60000]      <2> 	cmp edi, currentfolderend
  4749 00003AE9 72EE                <2> 	jb .movedown
  4750 00003AEB 30C0                <2> 	xor al, al
  4751                              <2> .donecd:
  4752 00003AED 4F                  <2> 	dec edi
  4753 00003AEE C6072F              <2> 	mov byte [edi], '/'
  4754 00003AF1 47                  <2> 	inc edi
  4755 00003AF2 81EF[7AA40000]      <2> 	sub edi, currentfolder
  4756 00003AF8 893D[76A40000]      <2> 	mov [currentfolderloc], edi
  4757 00003AFE C3                  <2> 	ret
  4758                              <2> ;.moveup:
  4759                              <2> ;	ret
  4760                              <1> %include 'source/programs/charmap.asm'
  4761 00003AFF FF2C636861726D6170- <2> db 255,44,"charmap",0
  4762 00003B08 00                  <2>
  4763 00003B09 66BB0700            <2> 	mov bx, 7
  4764 00003B0D B020                <2> 	mov al, " "
  4765 00003B0F E8D4E6FFFF          <2> 	call prcharq
  4766 00003B14 E8CFE6FFFF          <2> 	call prcharq
  4767 00003B19 E8CAE6FFFF          <2> 	call prcharq
  4768 00003B1E E8C5E6FFFF          <2> 	call prcharq
  4769 00003B23 B030                <2> 	mov al, "0"
  4770                              <2> charmapnumprnt:
  4771 00003B25 E8BEE6FFFF          <2> 	call prcharq
  4772 00003B2A FEC0                <2> 	inc al
  4773 00003B2C 6650                <2> 	push ax
  4774 00003B2E B020                <2> 	mov al, " "
  4775 00003B30 E8B3E6FFFF          <2> 	call prcharq
  4776 00003B35 6658                <2> 	pop ax
  4777 00003B37 3C39                <2> 	cmp al, "9"
  4778 00003B39 76EA                <2> 	jbe charmapnumprnt
  4779 00003B3B B041                <2> 	mov al, "A"
  4780                              <2> charmapnumprnt2:
  4781 00003B3D E8A6E6FFFF          <2> 	call prcharq
  4782 00003B42 FEC0                <2> 	inc al
  4783 00003B44 6650                <2> 	push ax
  4784 00003B46 B020                <2> 	mov al, " "
  4785 00003B48 E89BE6FFFF          <2> 	call prcharq
  4786 00003B4D 6658                <2> 	pop ax
  4787 00003B4F 3C47                <2> 	cmp al, "G"
  4788 00003B51 72EA                <2> 	jb charmapnumprnt2
  4789                              <2> 	
  4790 00003B53 BE[477C0000]        <2> 	mov esi, line
  4791 00003B58 E8A3E1FFFF          <2> 	call printquiet
  4792 00003B5D 6631C0              <2> 	xor ax, ax
  4793 00003B60 88C1                <2> 	mov cl, al
  4794 00003B62 E88BF2FFFF          <2> 	call showhexsmall
  4795 00003B67 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4796                              <2> charmapcopy:
  4797 00003B6C FEC0                <2> 	inc al
  4798 00003B6E 6650                <2> 	push ax
  4799 00003B70 3C08                <2> 	cmp al, 8
  4800 00003B72 744D                <2> 	je charmapnocopy
  4801 00003B74 3C09                <2> 	cmp al, 9
  4802 00003B76 7449                <2> 	je charmapnocopy
  4803 00003B78 3C0A                <2> 	cmp al, 10
  4804 00003B7A 7445                <2> 	je charmapnocopy
  4805 00003B7C 3C0D                <2> 	cmp al, 13
  4806 00003B7E 7441                <2> 	je charmapnocopy
  4807 00003B80 3CFF                <2> 	cmp al, 255
  4808 00003B82 743D                <2> 	je charmapnocopy
  4809 00003B84 3C00                <2> 	cmp al, 0
  4810 00003B86 7434                <2> 	je nomorecharmap
  4811 00003B88 E85BE6FFFF          <2> 	call prcharq
  4812 00003B8D B020                <2> 	mov al, " "
  4813 00003B8F E854E6FFFF          <2> 	call prcharq
  4814 00003B94 6658                <2> 	pop ax
  4815                              <2> charmapcopycheck:
  4816 00003B96 FEC4                <2> 	inc ah
  4817 00003B98 80FC10              <2> 	cmp ah, 16
  4818 00003B9B 72CF                <2> 	jb charmapcopy
  4819 00003B9D 6650                <2> 	push ax
  4820 00003B9F BE[477C0000]        <2> 	mov esi, line
  4821 00003BA4 E857E1FFFF          <2> 	call printquiet
  4822 00003BA9 6658                <2> 	pop ax
  4823 00003BAB 3CFF                <2> 	cmp al, 255
  4824 00003BAD 740D                <2> 	je nomorecharmap
  4825 00003BAF 88C1                <2> 	mov cl, al
  4826 00003BB1 FEC1                <2> 	inc cl
  4827 00003BB3 E83AF2FFFF          <2> 	call showhexsmall
  4828 00003BB8 30E4                <2> 	xor ah, ah
  4829 00003BBA EBB0                <2> 	jmp charmapcopy
  4830                              <2> nomorecharmap:
  4831 00003BBC E971EDFFFF          <2> 	jmp nwcmd
  4832                              <2> charmapnocopy:
  4833 00003BC1 6650                <2> 	push ax
  4834 00003BC3 B020                <2> 	mov al, " "
  4835 00003BC5 E81EE6FFFF          <2> 	call prcharq
  4836 00003BCA E819E6FFFF          <2> 	call prcharq
  4837 00003BCF 6658                <2> 	pop ax
  4838 00003BD1 EBC3                <2> 	jmp charmapcopycheck
  4839                              <1> %include 'source/programs/clear.asm'
  4840 00003BD3 FF2C636C65617200    <2> db 255,44,"clear",0
  4841 00003BDB E898E1FFFF          <2> 		call clear
  4842 00003BE0 C3                  <2> 		ret 
  4843                              <1> %include 'source/programs/cpuid.asm'
  4844 00003BE1 FF2C637075696400    <2> db 255,44,"cpuid",0
  4845 00003BE9 31C0                <2> 	xor eax, eax
  4846 00003BEB 0FA2                <2> 	cpuid
  4847 00003BED 891D[3E3C0000]      <2> 	mov [cpuidbuf], ebx
  4848 00003BF3 8915[423C0000]      <2> 	mov [cpuidbuf + 4], edx
  4849 00003BF9 890D[463C0000]      <2> 	mov [cpuidbuf + 8], ecx
  4850 00003BFF BE[3E3C0000]        <2> 	mov esi, cpuidbuf
  4851 00003C04 E809E1FFFF          <2> 	call print
  4852 00003C09 BE[477C0000]        <2> 	mov esi, line
  4853 00003C0E E8FFE0FFFF          <2> 	call print
  4854 00003C13 B801000000          <2> 	mov eax, 1
  4855 00003C18 0FA2                <2> 	cpuid
  4856 00003C1A 89C1                <2> 	mov ecx, eax
  4857 00003C1C C605[F12D0000]02    <2> 	mov byte [firsthexshown], 2
  4858 00003C23 E8DEF1FFFF          <2> 	call showhex
  4859 00003C28 B808000080          <2> 	mov eax, 0x80000008
  4860 00003C2D 0FA2                <2> 	cpuid
  4861 00003C2F 89C1                <2> 	mov ecx, eax
  4862 00003C31 C605[F12D0000]02    <2> 	mov byte [firsthexshown], 2
  4863 00003C38 E8C9F1FFFF          <2> 	call showhex
  4864 00003C3D C3                  <2> 	ret
  4865                              <2> 	
  4866 00003C3E 00<rept>            <2> cpuidbuf times 13 db 0
  4867                              <2> cpuidvendorend:
  4868                              <1> %include 'source/programs/dos.asm'
  4869 00003C4B FF2C646F7300        <2> db 255,44,"dos",0
  4870                              <2> dosrunner:
  4871 00003C51 8925[6EA40000]      <2> 	mov [previousstack], esp
  4872 00003C57 8B3D[DF2B0000]      <2> 	mov edi, [currentcommandloc]
  4873 00003C5D 81C704000000        <2> 	add edi, 4
  4874 00003C63 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4875 00003C68 E820230000          <2> 	call loadfile
  4876 00003C6D 8B3D[DF2B0000]      <2> 	mov edi, [currentcommandloc]
  4877 00003C73 81C704000000        <2> 	add edi, 4
  4878 00003C79 81FA94010000        <2> 	cmp edx, 404
  4879 00003C7F 0F845E000000        <2> 	je near .noprogfound
  4880 00003C85 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4881 00003C8A 31C9                <2> 	xor ecx, ecx
  4882                              <2> .findparams:
  4883 00003C8C 47                  <2> 	inc edi
  4884 00003C8D 8A07                <2> 	mov al, [edi]
  4885 00003C8F 3C20                <2> 	cmp al, " "
  4886 00003C91 75F9                <2> 	jne .findparams
  4887                              <2> .copyparams:
  4888 00003C93 8A07                <2> 	mov al, [edi]
  4889 00003C95 8803                <2> 	mov [ebx], al
  4890 00003C97 43                  <2> 	inc ebx
  4891 00003C98 47                  <2> 	inc edi
  4892 00003C99 41                  <2> 	inc ecx
  4893 00003C9A 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4894 00003CA0 7304                <2> 	jae .nomoreparams
  4895 00003CA2 3C00                <2> 	cmp al, 0
  4896 00003CA4 75ED                <2> 	jne .copyparams
  4897                              <2> .nomoreparams:
  4898 00003CA6 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4899 00003CAC 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4900 00003CB0 8ED8                <2> 	mov ds, ax
  4901 00003CB2 8EC0                <2> 	mov es, ax
  4902 00003CB4 8EE0                <2> 	mov fs, ax
  4903 00003CB6 8EE8                <2> 	mov gs, ax
  4904 00003CB8 31C0                <2> 	xor eax, eax
  4905 00003CBA 31DB                <2> 	xor ebx, ebx
  4906 00003CBC 31C9                <2> 	xor ecx, ecx
  4907 00003CBE 31D2                <2> 	xor edx, edx
  4908 00003CC0 31FF                <2> 	xor edi, edi
  4909 00003CC2 31F6                <2> 	xor esi, esi
  4910 00003CC4 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4911 00003CCB 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4912 00003CCF 6689DA              <2> 	mov dx, bx
  4913 00003CD2 8EC3                <2> 	mov es, bx
  4914 00003CD4 8EE3                <2> 	mov fs, bx
  4915 00003CD6 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4916 00003CDA 8EEB                <2> 	mov gs, bx
  4917 00003CDC 8B25[6EA40000]      <2> 	mov esp, [previousstack]
  4918 00003CE2 C3                  <2> 	ret
  4919                              <2> .noprogfound:
  4920 00003CE3 BE[0E7C0000]        <2> 	mov esi, notfound1
  4921 00003CE8 E825E0FFFF          <2> 	call print
  4922 00003CED 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4923 00003CF3 81C604000000        <2> 	add esi, 4
  4924 00003CF9 E814E0FFFF          <2> 	call print
  4925 00003CFE BE[167C0000]        <2> 	mov esi, notfound2
  4926 00003D03 E80AE0FFFF          <2> 	call print
  4927 00003D08 C3                  <2> 	ret
  4928                              <2> 	
  4929                              <1> %include 'source/programs/dump.asm'
  4930 00003D09 FF2C64756D7000      <2> db 255,44,"dump",0
  4931 00003D10 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  4932 00003D16 81C605000000        <2> 	add esi, 5
  4933 00003D1C 31C9                <2> 	xor ecx, ecx
  4934 00003D1E 66B83078            <2> 	mov ax, "0x"
  4935 00003D22 663906              <2> 	cmp [esi], ax
  4936 00003D25 740A                <2> 	je dumphexin
  4937 00003D27 E886F2FFFF          <2> 	call cnvrttxt
  4938 00003D2C E910000000          <2> 	jmp dumphexnow
  4939                              <2> dumphexin:
  4940 00003D31 81C602000000        <2> 	add esi, 2
  4941 00003D37 E82DF2FFFF          <2> 	call cnvrthextxt
  4942 00003D3C E900000000          <2> 	jmp dumphexnow
  4943                              <2> dumphexnow:
  4944 00003D41 89CF                <2> 	mov edi, ecx
  4945 00003D43 89FE                <2> 	mov esi, edi
  4946 00003D45 81C680030000        <2> 	add esi, 896
  4947                              <2> dumphexloop:
  4948 00003D4B 8B0F                <2> 	mov ecx, [edi]
  4949 00003D4D C605[F12D0000]05    <2> 	mov byte [firsthexshown],5
  4950 00003D54 E8ADF0FFFF          <2> 	call showhex
  4951 00003D59 81C704000000        <2> 	add edi, 4
  4952 00003D5F 39F7                <2> 	cmp edi, esi
  4953 00003D61 72E8                <2> 	jb dumphexloop
  4954 00003D63 E8B3E7FFFF          <2> 	call termcopy
  4955 00003D68 C3                  <2> 	ret 
  4956                              <1> %include 'source/programs/echo.asm'
  4957                              <2> 
  4958 00003D69 FF2C6563686F00      <2> db 255,44,"echo",0
  4959                              <2> 	echoprog:
  4960 00003D70 8B35[DF2B0000]      <2> 		mov esi, [currentcommandloc]
  4961 00003D76 81C605000000        <2> 		add esi, 5
  4962 00003D7C 8A06                <2> 		mov al, [esi]
  4963 00003D7E E88FDFFFFF          <2> 		call print
  4964 00003D83 BE[477C0000]        <2> 		mov esi, line
  4965 00003D88 E885DFFFFF          <2> 		call print
  4966 00003D8D C3                  <2> 		ret
  4967 00003D8E BB[EEA60000]        <2> 	echovr:	mov ebx, variables
  4968 00003D93 BF06000000          <2> 		mov edi, 6
  4969 00003D98 E83C000000          <2> 		call nxtvrech
  4970 00003D9D E954000000          <2> 		jmp prntvr2
  4971 00003DA2 B13D                <2> 	echvar:	mov cl, '='
  4972 00003DA4 43                  <2> 		inc ebx
  4973 00003DA5 8A03                <2> 		mov al, [ebx]
  4974 00003DA7 3C00                <2> 		cmp al, 0
  4975 00003DA9 742E                <2> 		je nxtvrech
  4976 00003DAB 3C3D                <2> 		cmp al, '='
  4977 00003DAD 7422                <2> 		je nxtvrechb1
  4978 00003DAF 8B35[DF2B0000]      <2> 		mov esi, [currentcommandloc]
  4979 00003DB5 01FE                <2> 		add esi, edi
  4980 00003DB7 E862EEFFFF          <2> 		call cndtest
  4981 00003DBC 3C02                <2> 		cmp al, 2
  4982 00003DBE 7432                <2> 		je prntvr
  4983 00003DC0 3C01                <2> 		cmp al, 1
  4984 00003DC2 742E                <2> 		je prntvr
  4985 00003DC4 8B35[DF2B0000]      <2> 		mov esi, [currentcommandloc]
  4986 00003DCA 01FE                <2> 		add esi, edi
  4987 00003DCC E908000000          <2> 		jmp nxtvrech
  4988                              <2> 	nxtvrechb1:
  4989 00003DD1 81EB02000000        <2> 		sub ebx, 2
  4990 00003DD7 EBC9                <2> 		jmp echvar
  4991 00003DD9 8A03                <2> 	nxtvrech: mov al, [ebx]
  4992 00003DDB 3C05                <2> 		cmp al, 5
  4993 00003DDD 740A                <2> 		je nxtvrec2
  4994 00003DDF 43                  <2> 		inc ebx
  4995 00003DE0 81FB[EEB60000]      <2> 		cmp ebx, varend
  4996 00003DE6 72F1                <2> 		jb nxtvrech
  4997 00003DE8 C3                  <2> 		ret
  4998 00003DE9 43                  <2> 	nxtvrec2: inc ebx
  4999 00003DEA 8A03                <2> 		mov al, [ebx]
  5000 00003DEC 3C04                <2> 		cmp al, 4
  5001 00003DEE 74B2                <2> 		je echvar
  5002 00003DF0 EBE7                <2> 		jmp nxtvrech
  5003 00003DF2 43                  <2> 	prntvr: inc ebx
  5004 00003DF3 89DE                <2> 		mov esi, ebx
  5005 00003DF5 C3                  <2> 		ret
  5006 00003DF6 E817DFFFFF          <2> 	prntvr2: call print
  5007 00003DFB BE[477C0000]        <2> 		mov esi, line
  5008 00003E00 E80DDFFFFF          <2> 		call print
  5009 00003E05 C3                  <2> 		ret 
  5010                              <1> %include 'source/programs/else.asm'
  5011 00003E06 FF2C656C736500      <2> 	db 255,44,"else",0
  5012 00003E0D 31C0                <2> elsecmd:	xor eax, eax
  5013 00003E0F 3805[E8A60000]      <2> 	cmp [BATCHISON], al
  5014 00003E15 0F84C2F8FFFF        <2> 	je near notbatch
  5015 00003E1B A0[7FA60000]        <2> 	mov al, [IFON]
  5016 00003E20 BE[80A60000]        <2> 	mov esi, IFTRUE
  5017 00003E25 01C6                <2> 	add esi, eax
  5018 00003E27 8A06                <2> 	mov al, [esi]
  5019 00003E29 3401                <2> 	xor al, 1
  5020 00003E2B 8806                <2> 	mov [esi], al
  5021 00003E2D C3                  <2> 	ret 
  5022                              <1> %include 'source/programs/exit.asm'
  5023 00003E2E FF2C6578697400      <2> db 255,44,"exit",0
  5024 00003E35 803D[7EA60000]01    <2> 	cmp byte [ranboot], 1
  5025 00003E3C 0F8484EAFFFF        <2> 	je near returnfromexp
  5026 00003E42 E96CE9FFFF          <2> 	jmp nobootfile
  5027                              <1> %include 'source/programs/fi.asm'
  5028 00003E47 FF2C666900          <2> 	db 255,44,"fi",0
  5029 00003E4C 30C0                <2> 	xor al, al
  5030 00003E4E 3805[E8A60000]      <2> 	cmp [BATCHISON], al
  5031 00003E54 0F8483F8FFFF        <2> 	je near notbatch
  5032 00003E5A B001                <2> fi:	mov al, 1
  5033 00003E5C 2805[7FA60000]      <2> 	sub [IFON],al
  5034 00003E62 C3                  <2> 	ret 
  5035                              <1> %ifdef gui.included
  5036                              <1> 	%include 'source/programs/gui.asm'
  5037 00003E63 FF2C67756900        <2> db 255,44,"gui",0
  5038                              <2> guiswitcher:
  5039 00003E69 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  5040 00003E6F 81C604000000        <2> 	add esi, 4
  5041 00003E75 31C9                <2> 	xor ecx, ecx
  5042 00003E77 803E00              <2> 	cmp byte [esi], 0
  5043 00003E7A 740A                <2> 	je .nomodepref
  5044 00003E7C E8E8F0FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5045 00003E81 E907000000          <2> 	jmp .modepref
  5046                              <2> .nomodepref:
  5047 00003E86 51                  <2> 	push ecx
  5048 00003E87 E8ECDEFFFF          <2> 	call clear
  5049 00003E8C 59                  <2> 	pop ecx
  5050                              <2> .modepref:
  5051 00003E8D 66BB[C14A]          <2> 	mov bx, guiswitch
  5052 00003E91 66891D[E10C0000]    <2> 	mov [realmodeptr], bx
  5053 00003E98 BB[A83E0000]        <2> 	mov ebx, guiswitchret
  5054 00003E9D 891D[DD0C0000]      <2> 	mov [realmodereturn], ebx
  5055 00003EA3 E91ECDFFFF          <2> 	jmp realmode
  5056                              <2> guiswitchret:
  5057 00003EA8 65803D[288E0000]01  <2> 	cmp byte [gs:guion], 1
  5058 00003EB0 7401                <2> 	je .cont
  5059 00003EB2 C3                  <2> 	ret
  5060                              <2> .cont:
  5061 00003EB3 BF[9F4C0000]        <2> 	mov edi, VBEMODEBLOCK
  5062                              <2> .loop:
  5063 00003EB8 658B07              <2> 	mov eax, [gs:edi]
  5064 00003EBB 8907                <2> 	mov [edi], eax
  5065 00003EBD 47                  <2> 	inc edi
  5066 00003EBE 81FF[A14F0000]      <2> 	cmp edi, VBEEND
  5067 00003EC4 72F2                <2> 	jb .loop
  5068 00003EC6 A1[C74E0000]        <2> 	mov eax, [physbaseptr]
  5069 00003ECB 2D00001000          <2> 	sub eax, 0x100000
  5070 00003ED0 A3[C74E0000]        <2> 	mov [physbaseptr], eax
  5071 00003ED5 C605[E6210000]00    <2> 	mov byte [termguion], 0
  5072 00003EDC BE[03BF0000]        <2> 	mov esi, graphicstable
  5073 00003EE1 30C0                <2> 	xor al, al
  5074                              <2> .clear:
  5075 00003EE3 8806                <2> 	mov [esi], al
  5076 00003EE5 46                  <2> 	inc esi
  5077 00003EE6 81FE[03C10000]      <2> 	cmp esi, graphicstableend
  5078 00003EEC 72F5                <2> 	jb .clear
  5079 00003EEE E86B270000          <2> 	call guisetup
  5080                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5081 00003EF3 668B15[B14E0000]    <2> 	mov dx, [resolutionx]
  5082 00003EFA 668B0D[B34E0000]    <2> 	mov cx, [resolutiony]
  5083 00003F01 6689D3              <2> 	mov bx, dx
  5084 00003F04 6689C8              <2> 	mov ax, cx
  5085 00003F07 66D1EB              <2> 	shr bx, 1
  5086 00003F0A 66D1E8              <2> 	shr ax, 1
  5087 00003F0D 6689DA              <2> 	mov dx, bx
  5088 00003F10 66D1EA              <2> 	shr dx, 1
  5089 00003F13 6689C1              <2> 	mov cx, ax
  5090 00003F16 66D1E9              <2> 	shr cx, 1
  5091 00003F19 6601D3              <2> 	add bx, dx
  5092 00003F1C 6601C8              <2> 	add ax, cx
  5093 00003F1F 66D1E9              <2> 	shr cx, 1
  5094 00003F22 66C1EB03            <2> 	shr bx, 3
  5095 00003F26 66C1E303            <2> 	shl bx, 3
  5096 00003F2A 66C1E804            <2> 	shr ax, 4
  5097 00003F2E 66C1E004            <2> 	shl ax, 4
  5098 00003F32 66891D[63680000]    <2> 	mov [termwindow], bx
  5099 00003F39 66A3[65680000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5100 00003F3F BE[63680000]        <2> 	mov esi, termwindow
  5101 00003F44 31DB                <2> 	xor ebx, ebx
  5102 00003F46 6631C0              <2> 	xor ax, ax
  5103 00003F49 E81E2E0000          <2> 	call showwindow
  5104 00003F4E E84F100000          <2> 	call cursorgui
  5105 00003F53 E820DEFFFF          <2> 	call clear
  5106 00003F58 C3                  <2> 	ret
  5107                              <2> 	
  5108                              <1> %endif
  5109                              <1> %include 'source/programs/help.asm'
  5110 00003F59 FF2C68656C7000      <2> db 255,44,"help",0
  5111                              <2> lscmd:	
  5112 00003F60 B00D                <2> 		mov al, 13
  5113 00003F62 E881E2FFFF          <2> 		call prcharq
  5114 00003F67 BE[35300000]        <2> 		mov esi, progstart
  5115 00003F6C BB[C14A0000]        <2> 		mov ebx, progend
  5116 00003F71 BE[6EA00000]        <2> dir:	mov esi, fileindex
  5117 00003F76 8A06                <2> 	dirnxt:	mov al, [esi]
  5118 00003F78 30E4                <2> 		xor ah, ah
  5119 00003F7A 3CFF                <2> 		cmp al, 255
  5120 00003F7C 7415                <2> 		je dirfnd
  5121 00003F7E 46                  <2> 		inc esi
  5122 00003F7F 81FE[6EA40000]      <2> 		cmp esi,  fileindexend
  5123 00003F85 7339                <2> 		jae dirdn
  5124 00003F87 EBED                <2> 		jmp dirnxt
  5125                              <2> 	dirfnd3:
  5126 00003F89 46                  <2> 		inc esi
  5127 00003F8A 81FE[6EA40000]      <2> 		cmp esi, fileindexend
  5128 00003F90 76E4                <2> 		jbe dirnxt
  5129 00003F92 4E                  <2> 		dec esi
  5130 00003F93 46                  <2> 	dirfnd:	inc esi
  5131 00003F94 8A06                <2> 		mov al, [esi]
  5132 00003F96 30E4                <2> 		xor ah, ah
  5133 00003F98 3C2C                <2> 		cmp al, 44
  5134 00003F9A 740B                <2> 		je dirfnd2
  5135 00003F9C 46                  <2> 		inc esi
  5136 00003F9D 81FE[6EA40000]      <2> 		cmp esi,  fileindexend
  5137 00003FA3 731B                <2> 		jae dirdn
  5138 00003FA5 EBCF                <2> 		jmp dirnxt
  5139 00003FA7 46                  <2> 	dirfnd2: inc esi
  5140 00003FA8 E853DDFFFF          <2> 		call printquiet
  5141 00003FAD 56                  <2> 		push esi
  5142 00003FAE B009                <2> 		mov al, 9
  5143 00003FB0 E833E2FFFF          <2> 		call prcharq
  5144 00003FB5 5E                  <2> 		pop esi
  5145 00003FB6 81FE[6EA40000]      <2> 		cmp esi,  fileindexend
  5146 00003FBC 7302                <2> 		jae dirdn
  5147 00003FBE EBB6                <2> 		jmp dirnxt
  5148 00003FC0 BE[477C0000]        <2> 	dirdn:	mov esi, line
  5149 00003FC5 E848DDFFFF          <2> 			call print
  5150 00003FCA C3                  <2> 			ret
  5151 00003FCB 00                  <2> currentdir db 0
  5152                              <1> %include 'source/programs/if.asm'
  5153 00003FCC FF2C696600          <2> 	db 255,44,"if",0
  5154 00003FD1 30C0                <2> ifcmd:	xor al, al
  5155 00003FD3 3805[E8A60000]      <2> 	cmp [BATCHISON], al
  5156 00003FD9 0F84FEF6FFFF        <2> 	je near notbatch
  5157 00003FDF 8B1D[DF2B0000]      <2> 	mov ebx, [currentcommandloc]
  5158 00003FE5 81C303000000        <2> 	add ebx, 3
  5159 00003FEB 89DE                <2> 	mov esi, ebx
  5160 00003FED 8A06                <2> chkeqsn: mov al, [esi]
  5161 00003FEF 3C00                <2> 	cmp al, 0
  5162 00003FF1 0F84E6F6FFFF        <2> 	je near notbatch
  5163 00003FF7 3C3D                <2> 	cmp al, '='
  5164 00003FF9 0F8403000000        <2> 	je near chkeqdn
  5165 00003FFF 46                  <2> 	inc esi
  5166 00004000 EBEB                <2> 	jmp chkeqsn
  5167 00004002 B000                <2> chkeqdn: mov al, 0 
  5168 00004004 8806                <2> 	mov [esi], al
  5169 00004006 46                  <2> 	inc esi
  5170 00004007 E8D7EBFFFF          <2> 	call tester
  5171 0000400C 3C01                <2> 	cmp al, 1
  5172 0000400E 0F8405000000        <2> 	je near trueif
  5173 00004014 E91C000000          <2> 	jmp falseif
  5174 00004019 31C0                <2> trueif:	xor eax, eax
  5175 0000401B A0[7FA60000]        <2> 	mov al, [IFON]
  5176 00004020 FEC0                <2> 	inc al
  5177 00004022 A2[7FA60000]        <2> 	mov [IFON], al
  5178 00004027 30E4                <2> 	xor ah, ah
  5179 00004029 BE[80A60000]        <2> 	mov esi, IFTRUE
  5180 0000402E 01C6                <2> 	add esi, eax
  5181 00004030 B401                <2> 	mov ah, 1
  5182 00004032 8826                <2> 	mov [esi], ah
  5183 00004034 C3                  <2> 	ret 
  5184 00004035 31C0                <2> falseif: xor eax, eax
  5185 00004037 A0[7FA60000]        <2> 	mov al, [IFON]
  5186 0000403C FEC0                <2> 	inc al
  5187 0000403E A2[7FA60000]        <2> 	mov [IFON], al
  5188 00004043 30E4                <2> 	xor ah, ah
  5189 00004045 BE[80A60000]        <2> 	mov esi, IFTRUE
  5190 0000404A 01C6                <2> 	add esi, eax
  5191 0000404C 30E4                <2> 	xor ah, ah
  5192 0000404E 8826                <2> 	mov [esi], ah
  5193 00004050 C3                  <2> 	ret 
  5194                              <1> %include 'source/programs/keycode.asm'
  5195 00004051 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5196 0000405A 00                  <2>
  5197                              <2> keycode:
  5198 0000405B C605[C2210000]00    <2> 	mov byte [trans], 0
  5199 00004062 C605[2C610000]00    <2> 	mov byte [threadson], 0
  5200                              <2> %ifdef io.serial
  5201                              <2> .noserial:
  5202                              <2> 	hlt
  5203                              <2> 	mov dx, [serial.address]
  5204                              <2> 	in al, dx
  5205                              <2> 	cmp al, 0
  5206                              <2> 	je .noserial
  5207                              <2> 	mov cl, al
  5208                              <2> 	call showhexsmall
  5209                              <2> 	cmp al, 0x1B
  5210                              <2> 	jne .noserial
  5211                              <2> 	in al, dx
  5212                              <2> 	mov cl, al
  5213                              <2> 	call showhexsmall
  5214                              <2> 	cmp cl, 0x5B
  5215                              <2> 	je .noserial
  5216                              <2> 	ret
  5217                              <2> %else
  5218 00004069 E852180000          <2> 	call getkey
  5219 0000406E 31C0                <2> 	xor eax, eax
  5220 00004070 31C9                <2> 	xor ecx, ecx
  5221 00004072 8A0D[A0580000]      <2> 	mov cl, [specialkey]
  5222 00004078 80F900              <2> 	cmp cl, 0
  5223 0000407B 0F8405000000        <2> 	je near .nospecialkeycode
  5224 00004081 E86CEDFFFF          <2> 	call showhexsmall
  5225                              <2> .nospecialkeycode:
  5226 00004086 66A1[C0210000]      <2> 	mov ax, [lastkey]
  5227 0000408C 88E1                <2> 	mov cl, ah
  5228 0000408E E85FEDFFFF          <2> 	call showhexsmall
  5229 00004093 80FC01              <2> 	cmp ah, 1
  5230 00004096 75C3                <2> 	jne keycode
  5231 00004098 C3                  <2> 	ret
  5232                              <2> %endif
  5233                              <1> %include 'source/programs/logout.asm'
  5234 00004099 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5235 000040A2 E9C4E6FFFF          <2> 	jmp os
  5236                              <1> %include 'source/programs/loop.asm'
  5237 000040A7 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5238 000040AE 803D[E9A60000]00    <2> 	cmp byte [LOOPON], 0
  5239 000040B5 0F8501000000        <2> 	jne near filoop
  5240 000040BB C3                  <2> 	ret
  5241 000040BC 8B35[EAA60000]      <2> filoop: mov esi, [LOOPPOS]
  5242 000040C2 FE0D[7FA60000]      <2> 	dec byte [IFON]
  5243 000040C8 C605[E9A60000]00    <2> 	mov byte [LOOPON], 0
  5244 000040CF 8935[E4A60000]      <2> 	mov [BATCHPOS], esi
  5245 000040D5 8935[05360000]      <2> 	mov [batchedi], esi
  5246 000040DB C3                  <2> 	ret 
  5247                              <1> %include 'source/programs/ls.asm'
  5248 000040DC FF2C6C7300          <2> db 255,44,"ls",0
  5249 000040E1 BE[6C8C0000]        <2> 		mov esi, diskfileindex
  5250                              <2> 	diskindexdir:
  5251 000040E6 803E5F              <2> 		cmp byte [esi], '_'
  5252 000040E9 7440                <2> 		je nextdiskindexdir
  5253 000040EB E810DCFFFF          <2> 		call printquiet
  5254 000040F0 56                  <2> 		push esi
  5255 000040F1 BE[4B410000]        <2> 		mov esi, disktab
  5256 000040F6 E805DCFFFF          <2> 		call printquiet
  5257 000040FB 5E                  <2> 		pop esi
  5258 000040FC 8B4E05              <2> 		mov ecx, [esi + 5]
  5259 000040FF C605[F12D0000]05    <2> 		mov byte [firsthexshown], 5
  5260 00004106 E8C5EDFFFF          <2> 		call showdec
  5261 0000410B 56                  <2> 		push esi
  5262 0000410C BE[477C0000]        <2> 		mov esi, line
  5263 00004111 E8EADBFFFF          <2> 		call printquiet
  5264 00004116 5E                  <2> 		pop esi
  5265 00004117 81C609000000        <2> 		add esi, 9
  5266 0000411D 81FE[278E0000]      <2> 		cmp esi, enddiskfileindex
  5267 00004123 72C1                <2> 		jb diskindexdir
  5268 00004125 E8F1E3FFFF          <2> 		call termcopy
  5269 0000412A C3                  <2> 		ret
  5270                              <2> 	nextdiskindexdir:
  5271 0000412B 46                  <2> 		inc esi
  5272 0000412C 803E00              <2> 		cmp byte [esi], 0
  5273 0000412F 75FA                <2> 		jne nextdiskindexdir
  5274 00004131 81C609000000        <2> 		add esi, 9
  5275 00004137 81FE[278E0000]      <2> 		cmp esi, enddiskfileindex
  5276 0000413D 72A7                <2> 		jb diskindexdir
  5277 0000413F E8D7E3FFFF          <2> 		call termcopy
  5278 00004144 C3                  <2> 		ret
  5279                              <2> 		
  5280 00004145 4469736B2000        <2> 		diskmsg db "Disk ",0
  5281 0000414B 0D09090900          <2> 		disktab db 13,9,9,9,0
  5282                              <1> %include 'source/programs/memory.asm'
  5283 00004150 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5284 00004159 BE[2E8E0000]        <2> 	mov esi, memlistbuf
  5285 0000415E 31FF                <2> 	xor edi, edi
  5286 00004160 668B3D[6E900000]    <2> 	mov di, [memlistend]
  5287 00004167 01F7                <2> 	add edi, esi
  5288                              <2> printmemmap:
  5289 00004169 8B0E                <2> 	mov ecx, [esi]
  5290 0000416B E896ECFFFF          <2> 	call showhex
  5291 00004170 81C608000000        <2> 	add esi, 8
  5292 00004176 8B0E                <2> 	mov ecx, [esi]
  5293 00004178 E889ECFFFF          <2> 	call showhex
  5294 0000417D 81C608000000        <2> 	add esi, 8
  5295 00004183 8B0E                <2> 	mov ecx, [esi]
  5296 00004185 E87CECFFFF          <2> 	call showhex
  5297 0000418A 81C608000000        <2> 	add esi, 8
  5298 00004190 57                  <2> 	push edi
  5299 00004191 56                  <2> 	push esi
  5300 00004192 BE[477C0000]        <2> 	mov esi, line
  5301 00004197 E876DBFFFF          <2> 	call print
  5302 0000419C 5E                  <2> 	pop esi
  5303 0000419D 5F                  <2> 	pop edi
  5304 0000419E 39FE                <2> 	cmp esi, edi
  5305 000041A0 72C7                <2> 	jb printmemmap
  5306 000041A2 C3                  <2> 	ret
  5307                              <2> 	
  5308                              <1> %include 'source/programs/pci.asm'
  5309 000041A3 FF2C70636900        <2> db 255,44,"pci",0
  5310 000041A9 E8221B0000          <2> 	call pcidump
  5311 000041AE C3                  <2> 	ret 
  5312                              <1> %include 'source/programs/play.asm'
  5313 000041AF FF2C706C61796100    <2> db 255,44,"playa",0
  5314 000041B7 8B3D[DF2B0000]      <2> 	mov edi, [currentcommandloc]
  5315 000041BD 81C706000000        <2> 	add edi, 6
  5316 000041C3 E833000000          <2> 	call playasync
  5317 000041C8 C3                  <2> 	ret
  5318 000041C9 FF2C706C617900      <2> db 255,44,"play",0
  5319                              <2> play:
  5320 000041D0 8B3D[DF2B0000]      <2> 	mov edi, [currentcommandloc]
  5321 000041D6 81C705000000        <2> 	add edi, 5
  5322 000041DC E81A000000          <2> 	call playasync
  5323                              <2> .waitforsound:
  5324                              <2> %ifdef sound.included
  5325 000041E1 A1[76550000]        <2> 	mov eax, [Length0]
  5326 000041E6 660B05[7A550000]    <2> 	or ax, [Length1]
  5327                              <2> %endif
  5328 000041ED 0A05[5D020000]      <2> 	or al, [soundon]
  5329 000041F3 3D00000000          <2> 	cmp eax, 0
  5330 000041F8 75E7                <2> 	jne .waitforsound
  5331 000041FA C3                  <2> 	ret
  5332                              <2> playasync:
  5333 000041FB BE00008000          <2> 	mov esi, 0x800000
  5334 00004200 E8881D0000          <2> 	call loadfile
  5335 00004205 81FA94010000        <2> 	cmp edx, 404
  5336 0000420B 743F                <2> 	je nosoundfound
  5337 0000420D BB00008000          <2> 	mov ebx, 0x800000
  5338 00004212 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5339 00004219 0F843F010000        <2> 	je near wave_player
  5340 0000421F 66813B534E          <2> 	cmp word [ebx], "SN"
  5341 00004224 7526                <2> 	jne nosoundfound
  5342 00004226 81C306000000        <2> 	add ebx, 6
  5343 0000422C 891D[60020000]      <2> 	mov [soundpos], ebx
  5344 00004232 035BFC              <2> 	add ebx, [ebx - 4]
  5345 00004235 891D[64020000]      <2> 	mov [soundendpos], ebx
  5346 0000423B 66C705[5E020000]00- <2> 	mov word [soundrepititions], 0
  5347 00004243 00                  <2>
  5348 00004244 C605[5D020000]01    <2> 	mov byte [soundon], 1
  5349 0000424B C3                  <2> 	ret
  5350                              <2> nosoundfound:
  5351 0000424C BE[72420000]        <2> 	mov esi, notfoundsound
  5352 00004251 E8BCDAFFFF          <2> 	call print
  5353 00004256 8B35[DF2B0000]      <2> 	mov esi, [currentcommandloc]
  5354 0000425C 81C605000000        <2> 	add esi, 5
  5355 00004262 E8ABDAFFFF          <2> 	call print
  5356 00004267 BE[167C0000]        <2> 	mov esi, notfound2
  5357 0000426C E8A1DAFFFF          <2> 	call print
  5358 00004271 C3                  <2> 	ret
  5359 00004272 706C61793A2000      <2> notfoundsound db "play: ",0
  5360                              <2> 
  5361                              <2> %ifdef sound.included
  5362                              <2> sbplay:
  5363 00004279 BE00008000          <2> 		mov esi, 0x800000
  5364 0000427E 89F3                <2> 		mov ebx, esi
  5365 00004280 81C62C000000        <2> 		add esi, 44
  5366 00004286 29F7                <2> 		sub edi, esi
  5367 00004288 66893D[7A550000]    <2> 		mov [Length1], di
  5368 0000428F C1EF0F              <2> 		shr edi, 15
  5369 00004292 893D[76550000]      <2> 		mov [Length0], edi
  5370 00004298 8B4B18              <2> 		mov ecx, [ebx + 24]
  5371 0000429B 890D[87550000]      <2> 		mov [Freq], ecx
  5372 000042A1 31C0                <2> 		xor eax, eax
  5373 000042A3 BA00008000          <2> 		mov	edx, 0x800000 ;physical location of sound
  5374 000042A8 81C22C000000        <2> 		add edx, 44
  5375 000042AE 01D0                <2> 		add	eax, edx
  5376 000042B0 89C6                <2> 		mov esi, eax
  5377 000042B2 31C9                <2> 		xor ecx, ecx
  5378 000042B4 31DB                <2> 		xor ebx, ebx
  5379 000042B6 66891D[84550000]    <2> 		mov [SegLoc], bx
  5380 000042BD 81C300000800        <2> 		add ebx, 0x80000
  5381 000042C3 66B9FFFF            <2> 		mov cx, 0xFFFF
  5382 000042C7 6681FF0000          <2> 		cmp di, 0
  5383 000042CC 7520                <2> 		jne .autoinit
  5384 000042CE 668B0D[7A550000]    <2> 		mov cx, [Length1]
  5385 000042D5 C605[75550000]01    <2> 		mov byte [OddLength], 1
  5386 000042DC 6681F90080          <2> 		cmp cx, 32768
  5387 000042E1 730B                <2> 		jae .autoinit
  5388 000042E3 C605[75550000]00    <2> 		mov byte [OddLength], 0
  5389 000042EA 66D1E1              <2> 		shl cx, 1
  5390 000042ED 47                  <2> 		inc edi
  5391                              <2> .autoinit:
  5392 000042EE 4F                  <2> 		dec edi
  5393 000042EF 893D[76550000]      <2> 		mov [Length0], edi
  5394 000042F5 66890D[7A550000]    <2> 		mov [Length1], cx
  5395 000042FC 66D1E9              <2> 		shr cx, 1
  5396 000042FF 6641                <2> 		inc cx
  5397 00004301 01C8                <2> 		add eax, ecx
  5398 00004303 A3[7C550000]        <2> 		mov [NextMemLoc], eax
  5399 00004308 8935[80550000]      <2> 		mov	[MemLoc], esi
  5400 0000430E E81A110000          <2> 		call DMACopy
  5401 00004313 31DB                <2> 		xor ebx, ebx
  5402 00004315 668B1D[84550000]    <2> 		mov bx, [SegLoc]
  5403 0000431C 31C9                <2> 		xor ecx, ecx
  5404 0000431E 668B0D[7A550000]    <2> 		mov cx, [Length1]
  5405 00004325 66D1E9              <2> 		shr cx, 1
  5406 00004328 6641                <2> 		inc cx
  5407 0000432A 01CB                <2> 		add ebx, ecx
  5408 0000432C 66891D[84550000]    <2> 		mov [SegLoc], bx
  5409 00004333 81C300000800        <2> 		add ebx, 0x80000
  5410 00004339 8B35[7C550000]      <2> 		mov esi, [NextMemLoc]
  5411 0000433F 89F0                <2> 		mov eax, esi
  5412 00004341 01C8                <2> 		add eax, ecx
  5413 00004343 A3[7C550000]        <2> 		mov [NextMemLoc], eax
  5414 00004348 8935[80550000]      <2> 		mov	[MemLoc], esi
  5415 0000434E E8DA100000          <2> 		call DMACopy
  5416 00004353 E8F8100000          <2> 		call DMAPlay
  5417 00004358 E882110000          <2> 		call PlayDSP
  5418 0000435D C3                  <2> 		ret
  5419                              <2> 
  5420                              <2> wave_player:
  5421 0000435E 803D[8C550000]01    <2> 	cmp byte [SoundBlaster], 1
  5422 00004365 0F840EFFFFFF        <2> 	je near sbplay
  5423 0000436B BE[76430000]        <2> 	mov esi, nosoundblaster
  5424 00004370 E89DD9FFFF          <2> 	call print
  5425 00004375 C3                  <2> 	ret
  5426                              <2> %else
  5427                              <2> 	wave_player:
  5428                              <2> 		mov esi, nosoundblaster
  5429                              <2> 		call print
  5430                              <2> 		ret
  5431                              <2> %endif
  5432 00004376 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5433 0000437F 426C61737465722064- <2>
  5434 00004388 657465637465642E0A- <2>
  5435 00004391 00                  <2>
  5436                              <1> %include 'source/programs/pwd.asm'
  5437 00004392 FF2C70776400        <2> db 255,44,"pwd",0
  5438 00004398 BE[7AA40000]        <2> 	mov esi, currentfolder
  5439 0000439D E85ED9FFFF          <2> 	call printquiet
  5440 000043A2 BE[477C0000]        <2> 	mov esi, line
  5441 000043A7 E866D9FFFF          <2> 	call print
  5442 000043AC C3                  <2> 	ret
  5443                              <2> 	
  5444                              <1> %include 'source/programs/reboot.asm'
  5445 000043AD FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5446 000043B6 0F011D[C0430000]    <2> 		lidt [idtreboot]
  5447 000043BD CD00                <2> 		int 0
  5448 000043BF F4                  <2> 		hlt
  5449                              <2> 	
  5450 000043C0 0000                <2> 	idtreboot dw 0
  5451 000043C2 00000000            <2> 			  dd 0
  5452                              <2> 
  5453                              <2> 	coldboot:
  5454 000043C6 66B84000            <2> 		MOV AX, 0040h
  5455 000043CA 8EC0                <2> 		MOV ES, AX
  5456 000043CC 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5457 000043D5 00                  <2>
  5458 000043D6 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5459 000043DD CF                  <2> 		IRET
  5460                              <2> 
  5461                              <2> 	warmboot:
  5462 000043DE 66B84000            <2> 		MOV AX, 0040h
  5463 000043E2 8EC0                <2> 		MOV ES, AX
  5464 000043E4 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5465 000043ED 12                  <2>
  5466 000043EE EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5467 000043F5 CF                  <2> 		IRET
  5468                              <2> 		
  5469                              <1> %include 'source/programs/reg.asm'
  5470 000043F6 FF2C72656700        <2> db 255,44,"reg",0
  5471 000043FC CD03                <2> 	int 3
  5472 000043FE C3                  <2> 	ret 
  5473                              <1> %include 'source/programs/show.asm'
  5474 000043FF FF2C73686F7700      <2> db 255,44,"show",0
  5475 00004406 8B3D[DF2B0000]      <2> 		mov edi, [currentcommandloc]
  5476 0000440C 81C705000000        <2> 		add edi, 5
  5477 00004412 BE00008000          <2> 		mov esi, 0x800000
  5478 00004417 E8711B0000          <2> 		call loadfile
  5479 0000441C 81FA94010000        <2> 		cmp edx, 404
  5480 00004422 0F8483000000        <2> 		je near filenotfound
  5481 00004428 BE00008000          <2> 		mov esi, 0x800000
  5482                              <2> %ifdef gui.included
  5483 0000442D 66813E424D          <2> 		cmp word [esi], "BM"
  5484 00004432 7410                <2> 		je bmpfound
  5485                              <2> %endif
  5486 00004434 E8D9D8FFFF          <2> 		call print
  5487 00004439 BE[477C0000]        <2> 		mov esi, line
  5488 0000443E E8CFD8FFFF          <2> 		call print
  5489 00004443 C3                  <2> 		ret
  5490                              <2> %ifdef gui.included
  5491                              <2> bmpfound:
  5492 00004444 803D[288E0000]00    <2> 		cmp byte [guion], 0
  5493 0000444B 0F8428000000        <2> 		je near noguibmp
  5494 00004451 BE00008000          <2> 		mov esi, 0x800000
  5495 00004456 31C9                <2> 		xor ecx, ecx
  5496 00004458 31D2                <2> 		xor edx, edx
  5497 0000445A 31C0                <2> 		xor eax, eax
  5498 0000445C 31DB                <2> 		xor ebx, ebx
  5499 0000445E E8EE1C0000          <2> 		call showbmp
  5500 00004463 30C0                <2> 		xor al, al
  5501 00004465 B405                <2> 		mov ah, 5
  5502 00004467 CD30                <2> 		int 30h
  5503 00004469 E89B200000          <2> 		call guiclear
  5504 0000446E E8B01D0000          <2> 		call clearmousecursor
  5505 00004473 E816210000          <2> 		call reloadallgraphics
  5506 00004478 C3                  <2> 		ret
  5507                              <2> noguibmp:
  5508 00004479 BE[84440000]        <2> 		mov esi, warnguimsg
  5509 0000447E E88FD8FFFF          <2> 		call print
  5510 00004483 C3                  <2> 		ret
  5511 00004484 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5512 0000448D 6E6F7420626520646F- <2>
  5513 00004496 6E6520776974686F75- <2>
  5514 0000449F 742074686520475549- <2>
  5515 000044A8 2E0A00              <2>
  5516                              <2> %endif
  5517                              <2> 
  5518                              <2> filenotfound:
  5519 000044AB BE[DE440000]        <2> 		mov esi, filenf
  5520 000044B0 E85DD8FFFF          <2> 		call print
  5521 000044B5 8B35[DF2B0000]      <2> 		mov esi, [currentcommandloc]
  5522                              <2> findfilenotfoundzero:
  5523 000044BB 8A06                <2> 		mov al, [esi]
  5524 000044BD 46                  <2> 		inc esi
  5525 000044BE 3C00                <2> 		cmp al, 0
  5526 000044C0 7411                <2> 		je nofilenamenotfound
  5527 000044C2 81FE[EEBE0000]      <2> 		cmp esi, buftxtend
  5528 000044C8 7309                <2> 		jae nofilenamenotfound
  5529 000044CA 3C20                <2> 		cmp al, " "
  5530 000044CC 75ED                <2> 		jne findfilenotfoundzero
  5531 000044CE E83FD8FFFF          <2> 		call print
  5532                              <2> nofilenamenotfound:
  5533 000044D3 BE[E9440000]        <2> 		mov esi, filenf2
  5534 000044D8 E835D8FFFF          <2> 		call print
  5535 000044DD C3                  <2> 		ret
  5536 000044DE 5468652066696C6520- <2> filenf db "The file ",34,0
  5537 000044E7 2200                <2>
  5538 000044E9 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5539 000044F2 6F7420626520666F75- <2>
  5540 000044FB 6E642E0A00          <2>
  5541                              <1> %include 'source/programs/shush.asm'
  5542 00004500 FF2C736875736800    <2> db 255,44,"shush",0
  5543 00004508 BE[13450000]        <2> 	mov esi, shushmsg
  5544 0000450D E800D8FFFF          <2> 	call print
  5545 00004512 C3                  <2> 	ret
  5546 00004513 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5547 0000451C 6F2074686520536F6C- <2>
  5548 00004525 6C65724F5320486172- <2>
  5549 0000452E 646C7920556E69782D- <2>
  5550 00004537 436F6D70617469626C- <2>
  5551 00004540 65205368656C6C210A- <2>
  5552 00004549 00                  <2>
  5553                              <1> %include 'source/programs/stop.asm'
  5554 0000454A FF2C73746F7000      <2> 	db 255,44,"stop",0
  5555 00004551 30C0                <2> stop:	xor al, al
  5556 00004553 A2[E8A60000]        <2> 	mov [BATCHISON], al
  5557 00004558 A2[7FA60000]        <2> 	mov [IFON], al
  5558 0000455D A2[80A60000]        <2> 	mov [IFTRUE], al
  5559 00004562 A2[E9A60000]        <2> 	mov [LOOPON], al
  5560 00004567 C3                  <2> 	ret 
  5561                              <1> %include 'source/programs/system.asm'
  5562 00004568 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5563 00004571 BE[41460000]        <2> 	mov esi, kernelinfomsg
  5564 00004576 E885D7FFFF          <2> 	call printquiet
  5565 0000457B B9[6C8C0000]        <2> 	mov ecx, osend
  5566 00004580 E84BE9FFFF          <2> 	call showdec
  5567 00004585 BE[56460000]        <2> 	mov esi, diskbytemsg
  5568 0000458A E871D7FFFF          <2> 	call printquiet
  5569 0000458F B9[6C8C0000]        <2> 	mov ecx, osend
  5570 00004594 81C1[54BB2900]      <2> 	add ecx, commandbufend
  5571 0000459A 81E9[288E0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5572 000045A0 E82BE9FFFF          <2> 	call showdec
  5573 000045A5 BE[6D460000]        <2> 	mov esi, membytemsg
  5574 000045AA E851D7FFFF          <2> 	call printquiet
  5575 000045AF BE[CB460000]        <2> 	mov esi, endofmemmsg
  5576 000045B4 E847D7FFFF          <2> 	call printquiet
  5577 000045B9 B9[54CF3900]        <2> 	mov ecx, bssend
  5578 000045BE E843E8FFFF          <2> 	call showhex
  5579 000045C3 BE[86460000]        <2> 	mov esi, systeminfomsg
  5580 000045C8 E833D7FFFF          <2> 	call printquiet
  5581                              <2> getcpuspeed:
  5582 000045CD B8FE000000          <2> 	mov eax, 0xFE
  5583 000045D2 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5584 000045D4 B020                <2> 	mov al, 0x20
  5585 000045D6 E620                <2> 	out 0x20, al
  5586 000045D8 31C0                <2> 	xor eax, eax
  5587 000045DA F4                  <2> 	hlt
  5588 000045DB C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  5589                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5590 000045E2 40                  <2> 	inc eax
  5591 000045E3 EBFD                <2> 	jmp cpuspeedloop
  5592                              <2> cpuspeedloopend:
  5593 000045E5 31C0                <2> 	xor eax, eax
  5594 000045E7 E621                <2> 	out 0x21, al
  5595 000045E9 B020                <2> 	mov al, 0x20
  5596 000045EB E620                <2> 	out 0x20, al
  5597 000045ED 31D2                <2> 	xor edx, edx
  5598 000045EF 31C0                <2> 	xor eax, eax
  5599 000045F1 A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  5600 000045F6 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5601                              <2> 				;result by 2
  5602 000045F8 8B1D[51020000]      <2> 	mov ebx, [timeinterval]
  5603 000045FE C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5604 00004601 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5605 00004603 89C1                <2> 	mov ecx, eax
  5606 00004605 E8C6E8FFFF          <2> 	call showdec
  5607 0000460A BE[B4460000]        <2> 	mov esi, cpuspeedmsg
  5608 0000460F E8ECD6FFFF          <2> 	call printquiet
  5609 00004614 8B0D[4B020000]      <2> 	mov ecx, [memoryspace]
  5610 0000461A C1E914              <2> 	shr ecx, 20
  5611 0000461D 41                  <2> 	inc ecx	;the reading is one MB behind
  5612 0000461E E8ADE8FFFF          <2> 	call showdec
  5613 00004623 BE[BA460000]        <2> 	mov esi, memoryspacemsg
  5614 00004628 E8E5D6FFFF          <2> 	call print
  5615                              <2> %ifdef sound.included
  5616 0000462D 803D[8C550000]00    <2> 	cmp byte [SoundBlaster], 0
  5617 00004634 740A                <2> 	je .nosb
  5618 00004636 BE[9C460000]        <2> 	mov esi, soundblastermsg
  5619 0000463B E8D2D6FFFF          <2> 	call print
  5620                              <2> .nosb:
  5621                              <2> %endif
  5622 00004640 C3                  <2> 	ret
  5623                              <2> 
  5624 00004641 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  5625 0000464A 666F726D6174696F6E- <2>
  5626 00004653 3A0A00              <2>
  5627 00004656 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5628 0000465F 6B2053706163652055- <2>
  5629 00004668 7365640A00          <2>
  5630 0000466D 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  5631 00004676 6F7279205370616365- <2>
  5632 0000467F 20557365640A00      <2>
  5633 00004686 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  5634 0000468F 6E666F726D6174696F- <2>
  5635 00004698 6E3A0A00            <2>
  5636                              <2> %ifdef sound.included
  5637 0000469C 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5638 000046A5 746572204465746563- <2>
  5639 000046AE 7465642E0A00        <2>
  5640                              <2> %endif
  5641 000046B4 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5642 000046BA 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  5643 000046C3 2053706163650A00    <2>
  5644 000046CB 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  5645 000046D4 6D6F72792053706163- <2>
  5646 000046DD 653A20307800        <2>
  5647                              <1> %include 'source/programs/time.asm'
  5648 000046E3 082E30303030303030- <2> timenscache db 8,".000000000"
  5649 000046EC 3030                <2>
  5650 000046EE 200A00              <2> timenscacheend: db " ",10,0
  5651 000046F1 00                  <2> istimeset db 0
  5652 000046F2 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5653 000046FB 2063757272656E7420- <2>
  5654 00004704 554E49582074696D65- <2>
  5655 0000470D 3A0A00              <2>
  5656 00004710 00<rept>            <2> timeinputbuffer times 12 db 0
  5657 0000471C 00                  <2> timeinputbend: db 0
  5658                              <2> 
  5659 0000471D FF2C74696D6500      <2> db 255,44,"time",0
  5660 00004724 803D[F1460000]00    <2> 	cmp byte [istimeset], 0
  5661 0000472B 753A                <2> 	jne timeisset
  5662 0000472D BE[F2460000]        <2> 	mov esi, settimemsg
  5663 00004732 E8DBD5FFFF          <2> 	call print
  5664 00004737 BE[10470000]        <2> 	mov esi, timeinputbuffer
  5665 0000473C BF[1C470000]        <2> 	mov edi, timeinputbend
  5666 00004741 E8B0D6FFFF          <2> 	call readline
  5667 00004746 BE[10470000]        <2> 	mov esi, timeinputbuffer
  5668 0000474B 31FF                <2> 	xor edi, edi
  5669 0000474D E860E8FFFF          <2> 	call cnvrttxt
  5670 00004752 890D[55020000]      <2> 	mov [timeseconds], ecx
  5671 00004758 31C9                <2> 	xor ecx, ecx
  5672 0000475A 890D[59020000]      <2> 	mov [timenanoseconds], ecx
  5673 00004760 C605[F1460000]01    <2> 	mov byte [istimeset], 1
  5674                              <2> timeisset:
  5675 00004767 8B0D[55020000]      <2> 	mov ecx, [timeseconds]
  5676 0000476D E85EE7FFFF          <2> 	call showdec
  5677                              <2> 	
  5678 00004772 8B0D[59020000]      <2> 	mov ecx, [timenanoseconds]
  5679 00004778 BE[E3460000]        <2> 	mov esi, timenscache
  5680 0000477D C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5681 00004784 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5682 0000478B C6460A30            <2> 	mov byte [esi + 10], "0"
  5683 0000478F BE[EE460000]        <2> 	mov esi, timenscacheend
  5684 00004794 E81AE5FFFF          <2> 	call convert
  5685 00004799 BE[E3460000]        <2> 	mov esi, timenscache
  5686 0000479E E86FD5FFFF          <2> 	call print
  5687                              <2> 	
  5688 000047A3 E80F000000          <2> 	call time
  5689 000047A8 BE[83490000]        <2> 	mov esi, timeshow
  5690 000047AD E860D5FFFF          <2> 	call print
  5691 000047B2 E9BC000000          <2> 	jmp findday
  5692                              <2> time:
  5693 000047B7 E84F010000          <2> 	call tstackput1
  5694 000047BC B00A                <2> 	mov al,10			;Get RTC register A
  5695 000047BE E879010000          <2> 	call tget1
  5696 000047C3 A880                <2> 	test al,0x80			;Is update in progress?
  5697 000047C5 75F0                <2> 	jne time				; yes, wait
  5698                              <2> 
  5699 000047C7 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5700 000047C9 E86E010000          <2> 	call tget1
  5701 000047CE A2[7A490000]        <2> 	mov [RTCtimeSecond],al
  5702                              <2> 
  5703 000047D3 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5704 000047D5 E862010000          <2> 	call tget1
  5705 000047DA A2[7B490000]        <2> 	mov [RTCtimeMinute],al
  5706                              <2> 
  5707 000047DF B004                <2> 	mov al,0x04			;Get hours (see notes)
  5708 000047E1 E856010000          <2> 	call tget1
  5709 000047E6 A2[7C490000]        <2> 	mov [RTCtimeHour],al
  5710                              <2> 
  5711 000047EB B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5712 000047ED E84A010000          <2> 	call tget1
  5713 000047F2 A2[7D490000]        <2> 	mov [RTCtimeDay],al
  5714                              <2> 
  5715 000047F7 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5716 000047F9 E83E010000          <2> 	call tget1
  5717 000047FE A2[7E490000]        <2> 	mov [RTCtimeMonth],al
  5718                              <2> 
  5719 00004803 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5720 00004805 E832010000          <2> 	call tget1
  5721 0000480A A2[7F490000]        <2> 	mov [RTCtimeYear],al
  5722                              <2> 	
  5723 0000480F BE[83490000]        <2> 	mov esi, timeshow
  5724 00004814 8A2D[7C490000]      <2> 	mov ch, [RTCtimeHour]
  5725 0000481A E828010000          <2> 	call tput1
  5726 0000481F 8A2D[7B490000]      <2> 	mov ch, [RTCtimeMinute]
  5727 00004825 E81D010000          <2> 	call tput1
  5728 0000482A 8A2D[7A490000]      <2> 	mov ch, [RTCtimeSecond]
  5729 00004830 E812010000          <2> 	call tput1
  5730 00004835 BE[8C490000]        <2> 	mov esi, dateshow
  5731 0000483A 8A2D[7E490000]      <2> 	mov ch, [RTCtimeMonth]
  5732 00004840 E802010000          <2> 	call tput1
  5733 00004845 8A2D[7D490000]      <2> 	mov ch, [RTCtimeDay]
  5734 0000484B E8F7000000          <2> 	call tput1
  5735 00004850 B520                <2> 	mov ch, 0x20
  5736 00004852 E8F0000000          <2> 	call tput1
  5737 00004857 4E                  <2> 	dec esi
  5738 00004858 8A2D[7F490000]      <2> 	mov ch, [RTCtimeYear]
  5739 0000485E E8E4000000          <2> 	call tput1
  5740 00004863 E8BD000000          <2> 	call tstackget1
  5741 00004868 C3                  <2> 	ret
  5742 00004869 BE[83490000]        <2> 	mov esi, timeshow
  5743 0000486E E89FD4FFFF          <2> 	call print
  5744                              <2> ;;get day of week
  5745                              <2> ;;add these:
  5746                              <2> ;;century value
  5747                              <2> ;;last 2 digits of year
  5748                              <2> ;;last 2 digits of year right shifted twice
  5749                              <2> ;;month table value
  5750                              <2> ;;day of the month
  5751                              <2> ;;divide these by 7
  5752                              <2> ;;the remainder is the day
  5753                              <2> findday:
  5754 00004873 31C0                <2> 	xor eax, eax
  5755                              <2> ;;first convert the values from BCD to hex
  5756 00004875 A0[7D490000]        <2> 	mov al, [RTCtimeDay]
  5757 0000487A E873000000          <2> 	call converttohex
  5758 0000487F 8825[80490000]      <2> 	mov [dayhex], ah
  5759 00004885 A0[7E490000]        <2> 	mov al, [RTCtimeMonth]
  5760 0000488A E863000000          <2> 	call converttohex
  5761 0000488F 8825[81490000]      <2> 	mov [monthhex], ah
  5762 00004895 A0[7F490000]        <2> 	mov al, [RTCtimeYear]
  5763 0000489A E853000000          <2> 	call converttohex
  5764 0000489F 8825[82490000]      <2> 	mov [yearhex], ah
  5765 000048A5 31C0                <2> 	xor eax, eax
  5766 000048A7 A0[82490000]        <2> 	mov al, [yearhex]
  5767 000048AC C0E802              <2> 	shr al, 2
  5768 000048AF 0205[82490000]      <2> 	add al, [yearhex]
  5769 000048B5 0506000000          <2> 	add eax, 6
  5770 000048BA 31DB                <2> 	xor ebx, ebx
  5771 000048BC 8A1D[81490000]      <2> 	mov bl, [monthhex]
  5772 000048C2 FECB                <2> 	dec bl
  5773 000048C4 81C3[A1490000]      <2> 	add ebx, month
  5774 000048CA 31C9                <2> 	xor ecx, ecx
  5775 000048CC 8A0B                <2> 	mov cl, [ebx]
  5776 000048CE 01C8                <2> 	add eax, ecx
  5777 000048D0 8A0D[80490000]      <2> 	mov cl, [dayhex]
  5778 000048D6 01C8                <2> 	add eax, ecx
  5779 000048D8 66BB0700            <2> 	mov bx, 7
  5780 000048DC 31D2                <2> 	xor edx, edx
  5781 000048DE 66F7F3              <2> 	div bx
  5782 000048E1 C1E202              <2> 	shl edx, 2
  5783 000048E4 81C2[AD490000]      <2> 	add edx, day
  5784 000048EA 8B32                <2> 	mov esi, [edx]
  5785 000048EC E821D4FFFF          <2> 	call print
  5786 000048F1 C3                  <2> 	ret
  5787                              <2> 	
  5788                              <2> converttohex:
  5789 000048F2 88C4                <2> 	mov ah, al
  5790 000048F4 C0E804              <2> 	shr al, 4
  5791 000048F7 C0E404              <2> 	shl ah, 4
  5792 000048FA C0EC04              <2> 	shr ah, 4
  5793 000048FD 3C00                <2> 	cmp al, 0
  5794 000048FF 7409                <2> 	je noconverttohex
  5795                              <2> converttohexlp:
  5796 00004901 80C40A              <2> 	add ah, 10
  5797 00004904 FEC8                <2> 	dec al
  5798 00004906 3C00                <2> 	cmp al, 0
  5799 00004908 75F7                <2> 	jne converttohexlp
  5800                              <2> noconverttohex:
  5801 0000490A C3                  <2> 	ret
  5802                              <2> 	
  5803                              <2> tstackput1:
  5804 0000490B 8935[76490000]      <2> 	mov [tstack + 20], esi
  5805 00004911 BE[62490000]        <2> 	mov esi, tstack
  5806 00004916 8906                <2> 	mov [esi], eax
  5807 00004918 895E04              <2> 	mov [esi + 4], ebx
  5808 0000491B 894E08              <2> 	mov [esi + 8], ecx
  5809 0000491E 89560C              <2> 	mov [esi + 12], edx
  5810 00004921 897E10              <2> 	mov [esi + 16], edi
  5811 00004924 C3                  <2> 	ret
  5812                              <2> 	
  5813                              <2> tstackget1:
  5814 00004925 BE[62490000]        <2> 	mov esi, tstack
  5815 0000492A 8B06                <2> 	mov eax, [esi]
  5816 0000492C 8B5E04              <2> 	mov ebx, [esi + 4]
  5817 0000492F 8B4E08              <2> 	mov ecx, [esi + 8]
  5818 00004932 8B560C              <2> 	mov edx, [esi + 12]
  5819 00004935 8B7E10              <2> 	mov edi, [esi + 16]
  5820 00004938 8B7614              <2> 	mov esi, [esi + 20]
  5821 0000493B C3                  <2> 	ret
  5822                              <2> 	
  5823                              <2> tget1:
  5824 0000493C 66BA7000            <2> 	mov dx, 0x70
  5825 00004940 EE                  <2> 	out dx, al
  5826 00004941 6642                <2> 	inc dx
  5827 00004943 EC                  <2> 	in al, dx
  5828 00004944 664A                <2> 	dec dx
  5829 00004946 C3                  <2> 	ret
  5830                              <2> 	
  5831                              <2> tput1:
  5832 00004947 66C1E904            <2> 	shr cx, 4
  5833 0000494B B030                <2> 	mov al, 48
  5834 0000494D 00E8                <2> 	add al, ch
  5835 0000494F 8806                <2> 	mov [esi], al
  5836 00004951 46                  <2> 	inc esi
  5837 00004952 B030                <2> 	mov al, 48
  5838 00004954 C0E904              <2> 	shr cl, 4
  5839 00004957 00C8                <2> 	add al, cl
  5840 00004959 8806                <2> 	mov [esi], al
  5841 0000495B 81C602000000        <2> 	add esi, 2
  5842 00004961 C3                  <2> 	ret
  5843                              <2> 		
  5844 00004962 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5845 0000496B 000000000000000000- <2>
  5846 00004974 000000000000        <2>
  5847 0000497A 00                  <2> 	RTCtimeSecond db 0
  5848 0000497B 00                  <2> 	RTCtimeMinute db 0
  5849 0000497C 00                  <2> 	RTCtimeHour db 0
  5850 0000497D 00                  <2> 	RTCtimeDay db 0
  5851 0000497E 00                  <2> 	RTCtimeMonth db 0
  5852 0000497F 00                  <2> 	RTCtimeYear db 0
  5853 00004980 00                  <2> 	dayhex db 0
  5854 00004981 00                  <2> 	monthhex db 0
  5855 00004982 00                  <2> 	yearhex db 0
  5856 00004983 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5857 0000498C 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5858 00004995 300A00              <2>
  5859                              <2> 	oldcentury:	;;from 1700 to 1900
  5860 00004998 040200              <2> 	db 4,2,0
  5861                              <2> 	century:	;;from 2000 to 2500
  5862 0000499B 060402000604        <2> 	db 6,4,2,0,6,4
  5863                              <2> 	month:
  5864 000049A1 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5865 000049AA 000305              <2>
  5866                              <2> 	day:
  5867 000049AD [C9490000]          <2> 	dd sunday
  5868 000049B1 [D1490000]          <2> 	dd monday
  5869 000049B5 [D9490000]          <2> 	dd tuesday
  5870 000049B9 [E2490000]          <2> 	dd wednesday
  5871 000049BD [ED490000]          <2> 	dd thursday
  5872 000049C1 [F7490000]          <2> 	dd friday
  5873 000049C5 [FF490000]          <2> 	dd saturday
  5874                              <2> sunday:
  5875 000049C9 53756E6461790A00    <2> 	db "Sunday",10,0
  5876                              <2> monday:
  5877 000049D1 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5878                              <2> tuesday:
  5879 000049D9 547565736461790A00  <2> 	db "Tuesday",10,0
  5880                              <2> wednesday:
  5881 000049E2 5765646E6573646179- <2> 	db "Wednesday",10,0
  5882 000049EB 0A00                <2>
  5883                              <2> thursday:
  5884 000049ED 54687572736461790A- <2> 	db "Thursday",10,0
  5885 000049F6 00                  <2>
  5886                              <2> friday:
  5887 000049F7 4672696461790A00    <2> 	db "Friday",10,0
  5888                              <2> saturday:
  5889 000049FF 53617475726461790A- <2> 	db "Saturday",10,0
  5890 00004A08 00                  <2>
  5891                              <1> %include 'source/programs/turnoff.asm'
  5892 00004A09 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5893 00004A12 00                  <2>
  5894                              <2> 	turnoff:
  5895 00004A13 66BB[2E4A]          <2> 			mov bx, shutdown
  5896 00004A17 66891D[E10C0000]    <2> 			mov [realmodeptr], bx
  5897 00004A1E BB[584A0000]        <2> 			mov ebx, halt
  5898 00004A23 891D[DD0C0000]      <2> 			mov [realmodereturn], ebx
  5899 00004A29 E998C1FFFF          <2> 			jmp realmode
  5900                              <2> 
  5901                              <2> [BITS 16]
  5902                              <2> 		shutdown:
  5903 00004A2E B453                <2> 			mov ah, 0x53
  5904 00004A30 B004                <2> 			mov al, 4
  5905 00004A32 31DB                <2> 			xor bx, bx
  5906 00004A34 CD15                <2> 			int 0x15
  5907                              <2> 			
  5908 00004A36 B453                <2> 			mov ah, 0x53
  5909 00004A38 B001                <2> 			mov al, 1
  5910 00004A3A 31DB                <2> 			xor bx, bx
  5911 00004A3C CD15                <2> 			int 0x15
  5912                              <2> 			
  5913 00004A3E B453                <2> 			mov ah, 0x53
  5914 00004A40 B008                <2> 			mov al, 8
  5915 00004A42 BB0100              <2> 			mov bx, 1
  5916 00004A45 B90100              <2> 			mov cx, 1
  5917 00004A48 CD15                <2> 			int 0x15
  5918                              <2> 			
  5919 00004A4A B453                <2> 			mov ah, 0x53
  5920 00004A4C B007                <2> 			mov al, 7
  5921 00004A4E BB0100              <2> 			mov bx, 1
  5922 00004A51 B90300              <2> 			mov cx, 3
  5923 00004A54 CD15                <2> 			int 0x15
  5924 00004A56 EBFE                <2> 			jmp $
  5925                              <2> 			[BITS 32]
  5926 00004A58 EBFE                <2> halt: jmp $
  5927                              <1> %include 'source/programs/wait.asm'
  5928 00004A5A FF2C7761697400      <2> db 255,44,"wait",0
  5929                              <2> waitkey:
  5930 00004A61 E80CD7FFFF          <2> 		call getchar
  5931 00004A66 C3                  <2> 		ret
  5932                              <1> %include 'source/programs/while.asm'
  5933 00004A67 FF2C7768696C6500    <2> db 255,44,"while",0
  5934 00004A6F 30C0                <2> whilecmd:  xor al, al
  5935 00004A71 3805[E8A60000]      <2> 	cmp [BATCHISON], al
  5936 00004A77 0F8460ECFFFF        <2> 	je near notbatch
  5937 00004A7D 8B35[E4A60000]      <2> 	mov esi, [BATCHPOS]
  5938 00004A83 81EE02000000        <2> 	sub esi, 2
  5939 00004A89 4E                  <2> whilefnd: dec esi
  5940 00004A8A 8A06                <2> 	mov al, [esi]
  5941 00004A8C 3C0A                <2> 	cmp al, 10
  5942 00004A8E 0F840A000000        <2> 	je near whilefnd2
  5943 00004A94 3C00                <2> 	cmp al, 0
  5944 00004A96 0F8402000000        <2> 	je near whilefnd2
  5945 00004A9C EBEB                <2> 	jmp whilefnd
  5946                              <2> whilefnd2:
  5947 00004A9E 46                  <2> 	inc esi
  5948 00004A9F 8935[EAA60000]      <2> 	mov [LOOPPOS], esi
  5949 00004AA5 C605[E9A60000]01    <2> 	mov BYTE [LOOPON], 1
  5950 00004AAC BE[EEBA0000]        <2> 	mov esi, buftxt
  5951 00004AB1 BB[EEBA0000]        <2> 	mov ebx, buftxt
  5952 00004AB6 81C306000000        <2> 	add ebx, 6
  5953 00004ABC E92CF5FFFF          <2> 	jmp chkeqsn
  5954                              <1> progend:		;programs end here	
  5955                              <1> batchprogend:
  5956                                  	%include "source/hardware.asm"
  5957                              <1> %ifdef gui.included
  5958                              <1> 	%include "source/drivers/video/vesa.asm"
  5959                              <2> [BITS 16]
  5960                              <2> guiswitch:
  5961 00004AC1 81F90000            <2> 	cmp cx, 0
  5962 00004AC5 750B                <2> 	jne guiswitchdefnum
  5963 00004AC7 B81200              <2> 	mov ax, 12h
  5964 00004ACA 31DB                <2> 	xor bx, bx
  5965 00004ACC CD10                <2> 	int 10h
  5966 00004ACE E85100              <2> 	call guiloadagain
  5967                              <2> guiswitchnocando:
  5968 00004AD1 C3                  <2> 	ret	;return without switching as mode number is bad
  5969                              <2> guiswitchdefnum:	;switch to a defined mode number
  5970 00004AD2 B8004F              <2> 	mov ax, 0x4F00
  5971 00004AD5 BF[9F4C]            <2> 	mov di, VBEMODEBLOCK
  5972 00004AD8 CD10                <2> 	int 10h
  5973 00004ADA BE[C14C]            <2> 	mov si, reserved
  5974 00004ADD 81EE0200            <2> 	sub si, 2
  5975                              <2> .loop:
  5976 00004AE1 81C60200            <2> 	add si, 2
  5977 00004AE5 81FE[9F4D]          <2> 	cmp si, oemdata
  5978 00004AE9 74E6                <2> 	je guiswitchnocando
  5979 00004AEB 813CFFFF            <2> 	cmp word [si], 0xFFFF
  5980 00004AEF 74E0                <2> 	je guiswitchnocando
  5981 00004AF1 390C                <2> 	cmp [si], cx
  5982 00004AF3 75EC                <2> 	jne .loop
  5983 00004AF5 8936[F94B]          <2> 	mov [videomodecache], si
  5984 00004AF9 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  5985 00004AFD B8014F              <2> 	mov ax, 0x4F01
  5986 00004B00 BF[9F4E]            <2> 	mov di, VBEMODEINFOBLOCK
  5987 00004B03 890E[F74B]          <2> 	mov [vesamode], cx
  5988 00004B07 CD10                <2> 	int 10h
  5989 00004B09 E9CB00              <2> 	jmp selectedvesa
  5990                              <2> guiload:
  5991 00004B0C BE[774C]            <2> 	mov si, bootmsg
  5992 00004B0F E865B5              <2> 	call printrm
  5993 00004B12 31C0                <2> 	xor ax, ax
  5994 00004B14 CD16                <2> 	int 16h
  5995 00004B16 3C79                <2> 	cmp al, "y"
  5996 00004B18 0F8515B5            <2> 	jne near vgaset
  5997 00004B1C BE[467C]            <2> 	mov si, crlf
  5998 00004B1F E855B5              <2> 	call printrm
  5999                              <2> guiloadagain:
  6000 00004B22 B8004F              <2> 	mov ax, 04F00h
  6001 00004B25 BF[9F4C]            <2> 	mov di, VBEMODEBLOCK
  6002 00004B28 CD10                <2> 	int 10h
  6003 00004B2A BE[C14C]            <2> 	mov si, reserved
  6004 00004B2D 81EE0200            <2> 	sub si, 2
  6005                              <2> findvideomodes:
  6006 00004B31 81C60200            <2> 	add si, 2
  6007 00004B35 8B0C                <2> 	mov cx, [si]
  6008 00004B37 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6009 00004B3B 0F840A00            <2> 	je near nextvmode
  6010 00004B3F 81FE[9F4D]          <2> 	cmp si, oemdata
  6011 00004B43 0F83EAB4            <2> 	jae near vgaset	;;kill if no valid list is found
  6012 00004B47 EBE8                <2> 	jmp findvideomodes 	
  6013                              <2> ;;debug,shows vmodes available
  6014                              <2> nextvmode:
  6015 00004B49 81EE0200            <2> 	sub si, 2
  6016 00004B4D 81FE[C14C]          <2> 	cmp si, reserved
  6017 00004B51 0F82CDFF            <2> 	jb near guiloadagain
  6018 00004B55 8B0C                <2> 	mov cx, [si]
  6019 00004B57 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6020 00004B5B 0F84EAFF            <2> 	je near nextvmode
  6021 00004B5F 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6022 00004B63 B8014F              <2> 	mov ax, 04F01h
  6023 00004B66 BF[9F4E]            <2> 	mov di, VBEMODEINFOBLOCK
  6024 00004B69 890E[F74B]          <2> 	mov [vesamode], cx
  6025 00004B6D CD10                <2> 	int 10h
  6026 00004B6F A0[B84E]            <2> 	mov al, [bitsperpixel]
  6027 00004B72 3C10                <2> 	cmp al, 16
  6028 00004B74 75D3                <2> 	jne nextvmode
  6029 00004B76 8936[F94B]          <2> 	mov [videomodecache], si
  6030 00004B7A 84E4                <2> 	test ah, ah
  6031 00004B7C 0F842200            <2> 	jz near setvesamode
  6032 00004B80 EBC7                <2> 	jmp nextvmode
  6033 00004B82 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6034 00004B8B 20766964656F206D6F- <2>
  6035 00004B94 6465204F4B3F28792F- <2>
  6036 00004B9D 6E290D0A00          <2>
  6037                              <2> setvesamode:
  6038 00004BA2 8B0E[B14E]          <2> 	mov cx, [resolutionx]
  6039 00004BA6 E85900              <2> 	call decshow
  6040 00004BA9 B078                <2> 	mov al, "x"
  6041 00004BAB E8C100              <2> 	call char
  6042 00004BAE 8B0E[B34E]          <2> 	mov cx, [resolutiony]
  6043 00004BB2 E84D00              <2> 	call decshow
  6044 00004BB5 B040                <2> 	mov al, "@"
  6045 00004BB7 E8B500              <2> 	call char
  6046 00004BBA 31C9                <2> 	xor cx, cx
  6047 00004BBC 8A0E[B84E]          <2> 	mov cl, [bitsperpixel]
  6048 00004BC0 E83F00              <2> 	call decshow
  6049 00004BC3 BE[824B]            <2> 	mov si, isthisvideook
  6050 00004BC6 E8AEB4              <2> 	call printrm
  6051 00004BC9 31C0                <2> 	xor ax, ax
  6052 00004BCB CD16                <2> 	int 16h
  6053 00004BCD 8B36[F94B]          <2> 	mov si, [videomodecache]
  6054 00004BD1 3C79                <2> 	cmp al, "y"
  6055 00004BD3 0F8572FF            <2> 	jne near nextvmode
  6056                              <2> selectedvesa:
  6057 00004BD7 8B16[B14E]          <2> 	mov dx, [resolutionx]
  6058 00004BDB 01D2                <2> 	add dx, dx
  6059 00004BDD 8916[9F4F]          <2> 	mov [resolutionx2], dx
  6060 00004BE1 31D2                <2> 	xor dx, dx
  6061 00004BE3 31C9                <2> 	xor cx, cx
  6062 00004BE5 B8024F              <2> 	mov ax, 04F02h
  6063 00004BE8 8B1E[F74B]          <2> 	mov bx, [vesamode]
  6064 00004BEC CD10                <2> 	int 10h		;;enter VESA mode
  6065 00004BEE C606[288E]01        <2> 	mov byte [guion], 1
  6066 00004BF3 E84BB4              <2> 	call getmemorysize;get the memory map after the video is initialized
  6067 00004BF6 C3                  <2> 	ret
  6068                              <2> 	
  6069 00004BF7 0000                <2> vesamode dw 0
  6070 00004BF9 0000                <2> videomodecache dw 0
  6071                              <2> 
  6072 00004BFB 0000000000          <2> dcnm db 0,0,0,0,0
  6073 00004C00 0000                <2> dcnmend db 0,0
  6074                              <2> 
  6075                              <2> 
  6076                              <2> decshow:
  6077 00004C02 BE[FB4B]            <2> 	mov si, dcnm
  6078                              <2> decclear:
  6079 00004C05 B030                <2> 	mov al, "0"
  6080 00004C07 8804                <2> 	mov [si], al
  6081 00004C09 46                  <2> 	inc si
  6082 00004C0A 81FE[004C]          <2> 	cmp si, dcnmend
  6083 00004C0E 76F5                <2> 	jbe decclear
  6084 00004C10 4E                  <2> 	dec si
  6085 00004C11 E81500              <2> 	call convertrm
  6086 00004C14 BE[FB4B]            <2> 	mov si, dcnm
  6087                              <2> dectst:
  6088 00004C17 8A04                <2> 	mov al, [si]
  6089 00004C19 46                  <2> 	inc si
  6090 00004C1A 81FE[004C]          <2> 	cmp si, dcnmend
  6091 00004C1E 7704                <2> 	ja dectstend
  6092 00004C20 3C30                <2> 	cmp al, "0"
  6093 00004C22 76F3                <2> 	jbe dectst
  6094                              <2> dectstend:
  6095 00004C24 4E                  <2> 	dec si
  6096 00004C25 E84FB4              <2> 	call printrm
  6097 00004C28 C3                  <2> 	ret
  6098                              <2> 	
  6099                              <2> 	
  6100                              <2> convertrm:
  6101 00004C29 4E                  <2> 	dec si
  6102 00004C2A 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6103                              <2> cnvrtrm:
  6104 00004C2C 89DE                <2> 	mov si, bx
  6105 00004C2E 81EE0300            <2> 	sub si, 3
  6106 00004C32 46                  <2> ten3rm:	inc si
  6107 00004C33 81F9E803            <2> 	cmp cx, 1000
  6108 00004C37 7208                <2> 	jb ten2rm
  6109 00004C39 81E9E803            <2> 	sub cx, 1000
  6110 00004C3D FE04                <2> 	inc byte [si]
  6111 00004C3F EBEB                <2> 	jmp cnvrtrm
  6112 00004C41 46                  <2> ten2rm:	inc si
  6113 00004C42 81F96400            <2> 	cmp cx, 100
  6114 00004C46 7208                <2> 	jb ten1rm
  6115 00004C48 81E96400            <2> 	sub cx, 100
  6116 00004C4C FE04                <2> 	inc byte [si]
  6117 00004C4E EBDC                <2> 	jmp cnvrtrm
  6118 00004C50 46                  <2> ten1rm:	inc si
  6119 00004C51 81F90A00            <2> 	cmp cx, 10
  6120 00004C55 7208                <2> 	jb ten0rm
  6121 00004C57 81E90A00            <2> 	sub cx, 10
  6122 00004C5B FE04                <2> 	inc byte [si]
  6123 00004C5D EBCD                <2> 	jmp cnvrtrm
  6124 00004C5F 46                  <2> ten0rm:	inc si
  6125 00004C60 81F90100            <2> 	cmp cx, 1
  6126 00004C64 7208                <2> 	jb tendnrm
  6127 00004C66 81E90100            <2> 	sub cx, 1
  6128 00004C6A FE04                <2> 	inc byte [si]
  6129 00004C6C EBBE                <2> 	jmp cnvrtrm
  6130                              <2> tendnrm:
  6131 00004C6E C3                  <2> 	ret
  6132                              <2> 
  6133                              <2>     char: 		    ;char must be in al
  6134 00004C6F BB0700              <2>        mov bx, 07
  6135 00004C72 B40E                <2> 	   mov ah, 0Eh
  6136 00004C74 CD10                <2> 	   int 10h
  6137 00004C76 C3                  <2> 	   ret
  6138                              <2> 
  6139 00004C77 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6140 00004C80 20746865204755493F- <2>
  6141 00004C89 28792F6E2900        <2>
  6142                              <2> 
  6143                              <2> 
  6144                              <2> mcursor:
  6145 00004C8F 01                  <2> 	db	00000001b
  6146 00004C90 81                  <2> 	db	10000001b
  6147 00004C91 C1                  <2> 	db	11000001b
  6148 00004C92 E1                  <2> 	db	11100001b
  6149 00004C93 F1                  <2> 	db	11110001b
  6150 00004C94 F9                  <2> 	db	11111001b
  6151 00004C95 FD                  <2> 	db	11111101b
  6152 00004C96 FF                  <2> 	db	11111111b
  6153 00004C97 F9                  <2> 	db	11111001b
  6154 00004C98 B9                  <2> 	db	10111001b
  6155 00004C99 39                  <2> 	db	00111001b
  6156 00004C9A 1C                  <2> 	db	00011100b
  6157 00004C9B 1C                  <2> 	db	00011100b
  6158 00004C9C 0E                  <2> 	db	00001110b
  6159 00004C9D 0E                  <2> 	db	00001110b
  6160 00004C9E 0C                  <2> 	db	00001100b
  6161                              <2> mcursorend:
  6162                              <2> 
  6163                              <2> 
  6164                              <2> VBEMODEBLOCK:
  6165 00004C9F 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6166 00004CA3 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6167 00004CA5 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6168 00004CA9 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6169 00004CAD 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6170 00004CB1 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6171 00004CB3 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6172 00004CB5 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6173 00004CB9 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6174 00004CBD 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6175 00004CC1 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6176 00004D9F 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6177                              <2> 
  6178                              <2> VBEMODEINFOBLOCK:
  6179                              <2> ;Mandatory information for all VBE revision
  6180 00004E9F 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6181 00004EA1 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6182 00004EA2 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6183 00004EA3 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6184 00004EA5 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6185 00004EA7 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6186 00004EA9 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6187 00004EAB 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6188 00004EAF 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6189                              <2> 
  6190                              <2> ;Mandatory information for VBE 1.2 and above
  6191 00004EB1 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6192 00004EB3 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6193 00004EB5 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6194 00004EB6 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6195 00004EB7 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6196 00004EB8 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6197 00004EB9 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6198 00004EBA 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6199 00004EBB 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6200 00004EBC 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6201 00004EBD 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6202                              <2> 
  6203                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6204 00004EBE 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6205 00004EBF 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6206 00004EC0 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6207 00004EC1 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6208 00004EC2 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6209 00004EC3 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6210 00004EC4 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6211 00004EC5 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6212 00004EC6 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6213                              <2> 
  6214                              <2> ;Mandatory information for VBE 2.0 and above
  6215 00004EC7 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6216 00004ECB 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6217 00004ECF 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6218 00004ED1 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6219                              <2> 
  6220 00004F9F 0000                <2> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  6221                              <2> VBEEND:
  6222                              <2> [BITS 32]
  6223                              <1> 	%include "source/drivers/input/mouse.asm"
  6224 00004FA1 00                  <2> mousedisabled db 0
  6225                              <2> 	
  6226                              <2> 	cursorgui:
  6227 00004FA2 803D[D87A0000]01    <2> 		cmp byte [mouseon], 1
  6228 00004FA9 0F8432000000        <2> 		je near mousedaemon
  6229 00004FAF 803D[288E0000]00    <2> 		cmp byte [guion], 0
  6230 00004FB6 0F84250A0000        <2> 		je near entdown
  6231                              <2> 	initmouse:
  6232 00004FBC 803D[288E0000]00    <2> 		cmp byte [guion], 0
  6233 00004FC3 7405                <2> 		je noswmsposinit
  6234 00004FC5 E855130000          <2> 		call switchmousepos2
  6235                              <2> 	noswmsposinit:
  6236 00004FCA E85A020000          <2> 	  	call PS2SET
  6237 00004FCF E883020000          <2> 		call ACTMOUS
  6238 00004FD4 C605[D87A0000]01    <2> 		mov byte [mouseon],1
  6239 00004FDB E89C020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6240                              <2> 		;call GETB
  6241                              <2> 				;;If the bytes are mixed up,
  6242                              <2> 				;;remove this line or add another of this line.
  6243                              <2> 	nomouse:
  6244 00004FE0 C3                  <2> 		ret
  6245                              <2> 		
  6246                              <2> 	mousedaemon:
  6247 00004FE1 803D[D87A0000]01    <2> 		cmp byte [mouseon], 1
  6248 00004FE8 75D2                <2> 		jne initmouse
  6249 00004FEA E464                <2> 		in al, 64h ; Status
  6250 00004FEC A820                <2> 		test al, 20h ; PS2-Mouse?
  6251 00004FEE 0F8502000000        <2> 		jnz near moused
  6252 00004FF4 F4                  <2> 		hlt
  6253 00004FF5 C3                  <2> 		ret
  6254                              <2> 	moused:
  6255 00004FF6 803D[A14F0000]01    <2> 		cmp byte [mousedisabled], 1
  6256 00004FFD 74E1                <2> 		je nomouse
  6257 00004FFF E878020000          <2> 		  call GETB
  6258 00005004 88C3                <2> 		  mov  bl, al
  6259 00005006 80E301              <2> 		  and  bl, 1
  6260 00005009 881D[A1520000]      <2> 		  mov  BYTE [LBUTTON], bl
  6261 0000500F 88C3                <2> 		  mov  bl, al
  6262 00005011 80E302              <2> 		  and  bl, 2
  6263 00005014 D0EB                <2> 		  shr  bl, 1
  6264 00005016 881D[A2520000]      <2> 		  mov  BYTE [RBUTTON], bl
  6265 0000501C 88C3                <2> 		  mov  bl, al
  6266 0000501E 80E304              <2> 		  and  bl, 4
  6267 00005021 C0EB02              <2> 		  shr  bl, 2
  6268 00005024 881D[A3520000]      <2> 		  mov  BYTE [MBUTTON], bl
  6269 0000502A E84D020000          <2> 		  call GETB
  6270 0000502F A2[A4520000]        <2> 		  mov  BYTE [XCOORD], al
  6271 00005034 E843020000          <2> 		  call GETB
  6272 00005039 A2[A5520000]        <2> 		  mov  BYTE [YCOORD], al
  6273                              <2> 
  6274                              <2> 	showpixelcursor:
  6275 0000503E 668B15[90510000]    <2> 		mov dx, [mousecursorposition]
  6276 00005045 668B0D[92510000]    <2> 		mov cx, [mousecursorposition + 2]
  6277 0000504C 668915[8C510000]    <2> 		mov [lastmouseposition], dx
  6278 00005053 66890D[8E510000]    <2> 		mov [lastmouseposition + 2], cx
  6279 0000505A A0[A4520000]        <2> 		mov al, [XCOORD]
  6280 0000505F 3C80                <2> 		cmp al, 128
  6281 00005061 730C                <2> 		jae subxcoord
  6282 00005063 00C0                <2> 		add al, al
  6283 00005065 30E4                <2> 		xor ah, ah
  6284 00005067 6601C2              <2> 		add dx, ax
  6285 0000506A E90B000000          <2> 		jmp subxcoorddn
  6286                              <2> 	subxcoord:
  6287 0000506F 00C0                <2> 		add al, al
  6288 00005071 30DB                <2> 		xor bl, bl
  6289 00005073 28C3                <2> 		sub bl, al
  6290 00005075 30FF                <2> 		xor bh, bh
  6291 00005077 6629DA              <2> 		sub dx, bx
  6292                              <2> 	subxcoorddn:
  6293 0000507A 8A1D[A5520000]      <2> 		mov bl, [YCOORD]
  6294 00005080 30C0                <2> 		xor al, al
  6295 00005082 28D8                <2> 		sub al, bl
  6296 00005084 3C80                <2> 		cmp al, 128
  6297 00005086 730A                <2> 		jae subycoord
  6298 00005088 30E4                <2> 		xor ah, ah
  6299 0000508A 6601C1              <2> 		add cx, ax
  6300 0000508D E909000000          <2> 		jmp subycoorddn
  6301                              <2> 	subycoord:
  6302 00005092 30DB                <2> 		xor bl, bl
  6303 00005094 28C3                <2> 		sub bl, al
  6304 00005096 30FF                <2> 		xor bh, bh
  6305 00005098 6629D9              <2> 		sub cx, bx
  6306                              <2> 	subycoorddn:
  6307 0000509B 6681FA204E          <2> 		cmp dx, 20000
  6308 000050A0 7603                <2> 		jbe nooriginx2
  6309 000050A2 6631D2              <2> 		xor dx, dx
  6310                              <2> 	nooriginx2:
  6311 000050A5 6681F9204E          <2> 		cmp cx, 20000
  6312 000050AA 7603                <2> 		jbe nooriginy2
  6313 000050AC 6631C9              <2> 		xor cx, cx
  6314                              <2> 	nooriginy2:
  6315 000050AF 6681FA0000          <2> 		cmp dx, 0
  6316 000050B4 7415                <2> 		je nofixxcolumn2
  6317 000050B6 663B15[9F4F0000]    <2> 		cmp dx, [resolutionx2]
  6318 000050BD 720C                <2> 		jb nofixxcolumn2
  6319 000050BF 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  6320 000050C6 6681EA0200          <2> 		sub dx, 2
  6321                              <2> 	nofixxcolumn2:
  6322 000050CB 6681F90000          <2> 		cmp cx, 0
  6323 000050D0 7415                <2> 		je nofixyrow2
  6324 000050D2 663B0D[B34E0000]    <2> 		cmp cx, [resolutiony]
  6325 000050D9 720C                <2> 		jb nofixyrow2
  6326 000050DB 668B0D[B34E0000]    <2> 		mov cx, [resolutiony]
  6327 000050E2 6681E90100          <2> 		sub cx, 1
  6328                              <2> 	nofixyrow2:
  6329 000050E7 668915[90510000]    <2> 		mov [mousecursorposition], dx
  6330 000050EE 66890D[92510000]    <2> 		mov [mousecursorposition + 2], cx
  6331 000050F5 803D[288E0000]00    <2> 		cmp byte [guion], 0
  6332 000050FC 0F8492000000        <2> 		je near termmouse
  6333 00005102 E8B8110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6334 00005107 803D[A1520000]01    <2> 		cmp byte [LBUTTON], 1
  6335 0000510E 0F84A9210000        <2> 		je near clickicon
  6336 00005114 803D[A2520000]01    <2> 		cmp byte [RBUTTON], 1
  6337 0000511B 0F849C210000        <2> 		je near clickicon
  6338 00005121 A0[AA720000]        <2> 		mov al, [pbutton]
  6339 00005126 C705[AD720000]0000- <2> 		mov dword [dragging], 0
  6340 0000512E 0000                <2>
  6341 00005130 3C00                <2> 		cmp al, 0
  6342 00005132 740F                <2> 		je nopreviousbutton
  6343 00005134 E8EA100000          <2> 		call clearmousecursor
  6344 00005139 E850140000          <2> 		call reloadallgraphics
  6345                              <2> 	windowtermcopyend:
  6346 0000513E E8DC110000          <2> 		call switchmousepos2
  6347                              <2> 	nopreviousbutton:
  6348 00005143 30C0                <2> 		xor al, al
  6349 00005145 A2[AA720000]        <2> 		mov [pbutton], al
  6350 0000514A A0[A1520000]        <2> 		mov al, [LBUTTON]
  6351 0000514F A2[AB720000]        <2> 		mov [pLBUTTON], al
  6352 00005154 A0[A2520000]        <2> 		mov al, [RBUTTON]
  6353 00005159 A2[AC720000]        <2> 		mov [pRBUTTON], al
  6354 0000515E 31C9                <2> 		xor ecx, ecx
  6355 00005160 31D2                <2> 		xor edx, edx
  6356 00005162 668B15[90510000]    <2> 		mov dx, [mousecursorposition]
  6357 00005169 668B0D[92510000]    <2> 		mov cx, [mousecursorposition + 2]
  6358 00005170 66BB18C7            <2> 		mov bx, 1100011100011000b
  6359 00005174 30E4                <2> 		xor ah, ah
  6360 00005176 B0FE                <2> 		mov al, 254
  6361 00005178 C605[A7720000]01    <2> 		mov byte [showcursorfonton], 1
  6362 0000517F E8D1190000          <2> 		call showfontvesa
  6363 00005184 C605[A7720000]00    <2> 		mov byte [showcursorfonton], 0
  6364 0000518B C3                  <2> 		ret
  6365                              <2> 
  6366 0000518C 00000000            <2> lastmouseposition dw 0,0
  6367 00005190 00000000            <2> mousecursorposition dw 0,0	
  6368                              <2> 
  6369                              <2> termmouse:
  6370 00005194 BE[04D62800]        <2> 		mov esi, videobuf
  6371 00005199 31D2                <2> 		xor edx, edx
  6372 0000519B 668B15[8C510000]    <2> 		mov dx, [lastmouseposition]
  6373 000051A2 668B0D[8E510000]    <2> 		mov cx, [lastmouseposition + 2]
  6374 000051A9 66A1[27520000]      <2> 		mov ax, [cursorcache]
  6375 000051AF 663D0000            <2> 		cmp ax, 0
  6376 000051B3 7425                <2> 		je nocopycursorcache
  6377 000051B5 66C1E104            <2> 		shl cx, 4
  6378 000051B9 66C1E203            <2> 		shl dx, 3
  6379 000051BD 01D6                <2> 		add esi, edx
  6380 000051BF 6631D2              <2> 		xor dx, dx
  6381 000051C2 8A15[AA230000]      <2> 		mov dl, [charxy]
  6382 000051C8 6641                <2> 		inc cx
  6383                              <2> termmousecplp1:
  6384 000051CA 01D6                <2> 		add esi, edx
  6385 000051CC 6649                <2> 		dec cx
  6386 000051CE 6681F90000          <2> 		cmp cx, 0
  6387 000051D3 75F5                <2> 		jne termmousecplp1
  6388 000051D5 29D6                <2> 		sub esi, edx
  6389 000051D7 668906              <2> 		mov [esi], ax
  6390                              <2> nocopycursorcache:
  6391 000051DA BE[04D62800]        <2> 		mov esi, videobuf
  6392 000051DF 31D2                <2> 		xor edx, edx
  6393 000051E1 668B15[90510000]    <2> 		mov dx, [mousecursorposition]
  6394 000051E8 668B0D[92510000]    <2> 		mov cx, [mousecursorposition + 2]
  6395 000051EF 66C1E104            <2> 		shl cx, 4
  6396 000051F3 66C1E203            <2> 		shl dx, 3
  6397 000051F7 01D6                <2> 		add esi, edx
  6398 000051F9 6631D2              <2> 		xor dx, dx
  6399 000051FC 8A15[AA230000]      <2> 		mov dl, [charxy]
  6400 00005202 6641                <2> 		inc cx
  6401                              <2> termmousecplp2:
  6402 00005204 01D6                <2> 		add esi, edx
  6403 00005206 6649                <2> 		dec cx
  6404 00005208 6681F90000          <2> 		cmp cx, 0
  6405 0000520D 75F5                <2> 		jne termmousecplp2
  6406 0000520F 29D6                <2> 		sub esi, edx
  6407 00005211 668B06              <2> 		mov ax, [esi]
  6408 00005214 66A3[27520000]      <2> 		mov [cursorcache], ax
  6409 0000521A B080                <2> 		mov al, 128
  6410 0000521C B407                <2> 		mov ah, 7
  6411 0000521E 668906              <2> 		mov [esi], ax
  6412 00005221 E8F5D2FFFF          <2> 		call termcopy
  6413 00005226 C3                  <2> 		ret
  6414 00005227 0000                <2> cursorcache db 0,0
  6415                              <2> 
  6416                              <2> PS2SET:
  6417 00005229 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6418 0000522B E664                <2>   out  0x64, al		; write to keyboardcontroller
  6419 0000522D E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6420 00005232 C3                  <2> ret
  6421                              <2> 
  6422                              <2> CHKPRT:
  6423 00005233 66B96400            <2>   mov  cx, 100
  6424                              <2>  .again:
  6425 00005237 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6426 00005239 A802                <2>   test al, 2		; Check if input buffer is empty
  6427 0000523B 7402                <2>   je .go
  6428 0000523D E2F8                <2>   loop .again
  6429                              <2>  .go:
  6430 0000523F C3                  <2> ret
  6431                              <2> 
  6432                              <2> WMOUS:
  6433 00005240 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6434 00005242 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6435 00005244 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6436 00005249 C3                  <2> ret
  6437                              <2> 
  6438                              <2> MBUFFUL:
  6439 0000524A 66B96400            <2>   mov cx, 100
  6440                              <2>  .mn:
  6441 0000524E E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6442 00005250 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6443 00005252 7402                <2>   jz  .mnn
  6444 00005254 E2F8                <2>   loop .mn
  6445                              <2>  .mnn:
  6446 00005256 C3                  <2> ret
  6447                              <2> 
  6448                              <2> 
  6449                              <2> ACTMOUS:
  6450 00005257 E8E4FFFFFF          <2>   call WMOUS
  6451 0000525C B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6452 0000525E E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6453 00005260 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6454 00005265 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6455 0000526A C3                  <2> ret
  6456                              <2> 
  6457                              <2> CHKMOUS:
  6458 0000526B B300                <2>   mov  bl, 0
  6459 0000526D 66B96400            <2>   mov cx, 100
  6460                              <2>  .vrd:
  6461 00005271 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6462 00005273 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6463 00005275 7504                <2>   jnz .yy
  6464 00005277 E2F8                <2>   loop .vrd
  6465 00005279 B301                <2>   mov  bl, 1
  6466                              <2>  .yy:
  6467 0000527B C3                  <2> ret
  6468                              <2> 
  6469                              <2> GETB:
  6470                              <2>  .cagain:
  6471 0000527C E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6472 00005281 08DB                <2>   or bl, bl
  6473 00005283 75F7                <2>   jnz .cagain
  6474 00005285 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6475 00005287 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6476 00005289 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6477 0000528E 6631C0              <2>   xor  ax, ax
  6478 00005291 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6479 00005293 88C2                <2>   mov  dl, al
  6480 00005295 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6481 00005297 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6482 00005299 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6483 0000529E 88D0                <2>   mov  al, dl
  6484 000052A0 C3                  <2> ret
  6485                              <2> 
  6486 000052A1 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6487 000052A2 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6488 000052A3 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6489 000052A4 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6490 000052A5 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6491                              <1> %endif
  6492                              <1> %include "source/drivers/sound/pcspkr.asm"
  6493                              <2> ;PC Speaker Drivers
  6494                              <2> PCSpeakerRAW:
  6495 000052A6 60                  <2> 	pusha
  6496                              <2> nosoundrep:
  6497 000052A7 8B35[60020000]      <2> 	mov esi, [soundpos]
  6498 000052AD 31C9                <2> 	xor ecx, ecx
  6499 000052AF 668B0D[5E020000]    <2> 	mov cx, [soundrepititions]
  6500 000052B6 6681F90000          <2> 	cmp cx, 0
  6501 000052BB 0F8548000000        <2> 	jne near donesetpitch
  6502 000052C1 668B0E              <2> 	mov cx, [esi]
  6503 000052C4 668B5E02            <2> 	mov bx, [esi + 2]
  6504 000052C8 66890D[5E020000]    <2> 	mov [soundrepititions], cx
  6505 000052CF 81C604000000        <2> 	add esi, 4
  6506 000052D5 8935[60020000]      <2> 	mov [soundpos], esi
  6507 000052DB 3B35[64020000]      <2> 	cmp esi, [soundendpos]
  6508 000052E1 7735                <2> 	ja stopsound
  6509 000052E3 66813D[5E020000]00- <2> 	cmp word [soundrepititions], 0
  6510 000052EB 00                  <2>
  6511 000052EC 74B9                <2> 	je nosoundrep
  6512 000052EE 6681FB0000          <2> 	cmp bx, 0
  6513 000052F3 740F                <2> 	je nosoundplay
  6514 000052F5 E840000000          <2> 	call setpitch
  6515 000052FA E849000000          <2> 	call startsound
  6516 000052FF E905000000          <2> 	jmp donesetpitch
  6517                              <2> nosoundplay:
  6518 00005304 E846000000          <2> 	call killsound
  6519                              <2> donesetpitch:
  6520 00005309 6649                <2> 	dec cx
  6521 0000530B 66890D[5E020000]    <2> 	mov [soundrepititions], cx
  6522 00005312 61                  <2> 	popa
  6523 00005313 E985AFFFFF          <2> 	jmp timerinterrupt
  6524                              <2> stopsound:
  6525 00005318 31C0                <2> 	xor eax, eax
  6526 0000531A 66A3[5E020000]      <2> 	mov [soundrepititions], ax
  6527 00005320 A2[5D020000]        <2> 	mov [soundon], al
  6528 00005325 A3[60020000]        <2> 	mov [soundpos], eax
  6529 0000532A A3[64020000]        <2> 	mov [soundendpos], eax
  6530 0000532F E81B000000          <2> 	call killsound
  6531 00005334 61                  <2> 	popa
  6532 00005335 E963AFFFFF          <2> 	jmp timerinterrupt
  6533                              <2> 
  6534                              <2> 
  6535                              <2> setpitch:
  6536 0000533A B0B6                <2> 	mov al, 0xB6
  6537 0000533C E643                <2> 	out 0x43, al
  6538 0000533E 6689D8              <2> 	mov ax, bx
  6539 00005341 E642                <2> 	out 0x42, al
  6540 00005343 88E0                <2> 	mov al, ah
  6541 00005345 E642                <2> 	out 0x42, al
  6542 00005347 C3                  <2> 	ret
  6543                              <2> startsound:
  6544 00005348 E461                <2> 	in al, 0x61
  6545 0000534A 0C03                <2> 	or al, 3
  6546 0000534C E661                <2> 	out 0x61, al
  6547 0000534E C3                  <2> 	ret
  6548                              <2> killsound:
  6549 0000534F E461                <2> 	in al, 0x61
  6550 00005351 24FC                <2> 	and al, 0xFC
  6551 00005353 E661                <2> 	out 0x61, al
  6552 00005355 C3                  <2> 	ret
  6553                              <2> 	
  6554                              <1> %ifdef sound.included
  6555                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6556                              <2> ;Sound Blaster Drivers
  6557                              <2> sblaster:
  6558                              <2> .init:
  6559 00005356 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6560 0000535B A2[8C550000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6561 00005360 3C00                <2> 		cmp al, 0
  6562 00005362 7418                <2> 		je .noinit
  6563 00005364 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6564 00005366 E8FB010000          <2> 		call WriteDSP
  6565 0000536B B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6566 0000536D E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6567 00005372 BE[7D530000]        <2> 		mov esi, .initmsg
  6568 00005377 E896C9FFFF          <2> 		call print
  6569                              <2> .noinit:
  6570 0000537C C3                  <2> 		ret
  6571 0000537D 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  6572 00005386 74657220496E697469- <2>
  6573 0000538F 616C697A65640A00    <2>
  6574                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  6575 00005397 813D[76550000]0000- <2> 	cmp dword [Length0], 0
  6576 0000539F 0000                <2>
  6577 000053A1 0F8462000000        <2> 	je near .done
  6578 000053A7 FF0D[76550000]      <2> 	dec dword [Length0]
  6579 000053AD E908000000          <2> 	jmp .notodd
  6580                              <2> .oddlength:
  6581 000053B2 31C9                <2> 	xor ecx, ecx
  6582 000053B4 880D[75550000]      <2> 	mov [OddLength], cl
  6583                              <2> .notodd:
  6584 000053BA 8B35[7C550000]      <2> 	mov esi, [NextMemLoc]
  6585 000053C0 31C9                <2> 	xor ecx, ecx
  6586 000053C2 668B0D[7A550000]    <2> 	mov cx, [Length1]
  6587 000053C9 D1E9                <2> 	shr ecx, 1
  6588 000053CB 6641                <2> 	inc cx
  6589 000053CD 31DB                <2> 	xor ebx, ebx
  6590 000053CF 668B1D[84550000]    <2> 	mov bx, [SegLoc]
  6591 000053D6 6601CB              <2> 	add bx, cx
  6592 000053D9 66891D[84550000]    <2> 	mov [SegLoc], bx
  6593 000053E0 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  6594 000053E6 8935[80550000]      <2> 	mov [MemLoc], esi
  6595 000053EC 89C8                <2> 	mov eax, ecx
  6596 000053EE 01F0                <2> 	add eax, esi
  6597 000053F0 A3[7C550000]        <2> 	mov [NextMemLoc], eax
  6598 000053F5 E833000000          <2> 	call DMACopy
  6599                              <2> 	;call DMAPlay
  6600 000053FA E8E0000000          <2> 	call PlayDSP
  6601 000053FF 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6602 00005403 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6603 00005404 E947AFFFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6604                              <2> .done:
  6605 00005409 803D[75550000]01    <2> 	cmp byte [OddLength], 1
  6606 00005410 74A0                <2> 	je .oddlength
  6607 00005412 31C0                <2> 	xor eax, eax
  6608 00005414 66A3[7A550000]      <2> 	mov [Length1], ax
  6609 0000541A 66B8D000            <2> 	mov ax, 0xD0
  6610 0000541E E843010000          <2> 	call WriteDSP
  6611 00005423 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6612 00005427 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6613 00005428 E923AFFFFF          <2> 	jmp handled2
  6614                              <2> 	
  6615                              <2> DMACopy:
  6616 0000542D 66B80800            <2> 		mov ax, LINEAR_SEL
  6617 00005431 8EE0                <2> 		mov fs, ax
  6618 00005433 C1E902              <2> 		shr ecx, 2
  6619                              <2> .loop:
  6620 00005436 8B06                <2> 		mov eax, [esi]
  6621 00005438 648903              <2> 		mov [fs:ebx], eax
  6622 0000543B 81C604000000        <2> 		add esi, 4
  6623 00005441 81C304000000        <2> 		add ebx, 4
  6624 00005447 E2ED                <2> 		loop .loop
  6625 00005449 66B83000            <2> 		mov ax, NEW_DATA_SEL
  6626 0000544D 8EE0                <2> 		mov fs, ax
  6627 0000544F C3                  <2> 		ret
  6628                              <2> 		
  6629                              <2> 
  6630                              <2> DMAPlay:    ;uses eax ebx edx
  6631 00005450 C605[86550000]00    <2> 		mov	byte [Page1],00h
  6632                              <2> 
  6633 00005457 B005                <2> 		mov	al,(Channel+4)
  6634 00005459 66BA0A00            <2> 		mov	dx,0Ah
  6635 0000545D EE                  <2> 		out	dx,al
  6636 0000545E 30C0                <2> 		xor	al,al
  6637 00005460 66BA0C00            <2> 		mov	dx,0Ch
  6638 00005464 EE                  <2> 		out	dx,al
  6639 00005465 B059                <2> 		mov	al,ModeReg
  6640 00005467 66BA0B00            <2> 		mov	dx,0Bh
  6641 0000546B EE                  <2> 		out	dx,al
  6642 0000546C B800000800          <2> 		mov	eax,0x80000
  6643 00005471 66BA0200            <2> 		mov	dx,AddPort
  6644 00005475 EE                  <2> 		out	dx,al
  6645 00005476 86C4                <2> 		xchg al,ah
  6646 00005478 EE                  <2> 		out	dx,al
  6647 00005479 B800000800          <2> 		mov	eax,0x80000
  6648 0000547E 89C2                <2> 		mov	edx,eax
  6649 00005480 2500000100          <2> 		and	eax,65536
  6650 00005485 7406                <2> 		jz	MemLocN1
  6651 00005487 FE05[86550000]      <2> 		inc	byte [Page1]
  6652                              <2> MemLocN1:
  6653 0000548D 89D0                <2> 		mov	eax,edx
  6654 0000548F 2500000200          <2> 		and	eax,131072
  6655 00005494 7407                <2> 		jz	MemLocN2
  6656 00005496 8005[86550000]02    <2> 		add	byte [Page1],02
  6657                              <2> MemLocN2:
  6658 0000549D 89D0                <2> 		mov	eax,edx
  6659 0000549F 2500000400          <2> 		and	eax,262144
  6660 000054A4 7407                <2> 		jz	MemLocN3
  6661 000054A6 8005[86550000]04    <2> 		add	byte [Page1],04
  6662                              <2> MemLocN3:
  6663 000054AD 89D0                <2> 		mov	eax,edx
  6664 000054AF 2500000800          <2> 		and	eax,524288
  6665 000054B4 7407                <2> 		jz	MemLocN4
  6666 000054B6 8005[86550000]08    <2> 		add	byte [Page1],08
  6667                              <2> MemLocN4:
  6668 000054BD 66BA8300            <2> 		mov	dx,PgPort
  6669 000054C1 A0[86550000]        <2> 		mov	al,[Page1]
  6670 000054C6 EE                  <2> 		out	dx,al
  6671 000054C7 66BA0300            <2> 		mov	dx,LenPort
  6672 000054CB 66A1[7A550000]      <2> 		mov	ax,[Length1]
  6673 000054D1 6648                <2> 		dec ax
  6674 000054D3 EE                  <2> 		out	dx,al
  6675 000054D4 86C4                <2> 		xchg al,ah
  6676 000054D6 EE                  <2> 		out	dx,al
  6677 000054D7 66BA0A00            <2> 		mov	dx,0Ah
  6678 000054DB B001                <2> 		mov	al,Channel
  6679 000054DD EE                  <2> 		out	dx,al
  6680 000054DE C3                  <2> 		ret
  6681                              <2> 		
  6682                              <2> PlayDSP:
  6683 000054DF B040                <2> 		mov	al,40h
  6684 000054E1 E880000000          <2> 		call WriteDSP
  6685 000054E6 31D2                <2> 		xor	edx,edx
  6686 000054E8 B840420F00          <2> 		mov	eax,1000000
  6687 000054ED 8B1D[87550000]      <2> 		mov	ebx,[Freq]
  6688 000054F3 F7F3                <2> 		div	ebx
  6689 000054F5 89C3                <2> 		mov	ebx,eax
  6690 000054F7 B800010000          <2> 		mov	eax,256
  6691 000054FC 29D8                <2> 		sub	eax,ebx
  6692 000054FE E863000000          <2> 		call WriteDSP
  6693 00005503 A0[8B550000]        <2> 		mov	al,[WAVEMode]	;write the mode
  6694 00005508 E859000000          <2> 		call WriteDSP
  6695 0000550D 66A1[7A550000]      <2> 		mov	ax,[Length1]
  6696 00005513 66D1E8              <2> 		shr ax, 1
  6697 00005516 E84B000000          <2> 		call WriteDSP
  6698 0000551B 86C4                <2> 		xchg al,ah
  6699 0000551D E844000000          <2> 		call WriteDSP
  6700 00005522 C3                  <2> 		ret
  6701                              <2> 
  6702                              <2> MstrVol:    ;uses ax dx
  6703 00005523 6650                <2> 	   push ax
  6704 00005525 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6705 00005529 B022                <2> 	   mov	al,22h
  6706 0000552B EE                  <2> 	   out	dx,al
  6707 0000552C 6658                <2> 	   pop	ax
  6708 0000552E 6642                <2> 	   inc	dx
  6709 00005530 EE                  <2> 	   out	dx,al
  6710 00005531 C3                  <2> 	   ret
  6711                              <2> 	   
  6712                              <2> ResetDSP:   ; uses cx dx
  6713 00005532 66BA2602            <2> 			mov	dx,(BasePort+6)
  6714 00005536 B001                <2> 			mov	al,01
  6715 00005538 EE                  <2> 			out	dx,al
  6716 00005539 66B93200            <2> 			mov	cx,50
  6717 0000553D EC                  <2> WaitIt1:	in	al,dx
  6718 0000553E E2FD                <2> 			loop WaitIt1
  6719 00005540 30C0                <2> 			xor	al,al
  6720 00005542 EE                  <2> 			out	dx,al
  6721 00005543 66B93200            <2> 			mov	cx,50
  6722 00005547 EC                  <2> WaitIt2:	in	al,dx
  6723 00005548 E2FD                <2> 			loop WaitIt2
  6724 0000554A B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6725 0000554C 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6726 00005550 EC                  <2> 			in	al,dx
  6727 00005551 2480                <2> 			and	al,80h
  6728 00005553 3C80                <2> 			cmp	al,80h
  6729 00005555 750C                <2> 			jne	ResetErr
  6730 00005557 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6731 0000555B EC                  <2> 			in	al,dx
  6732 0000555C 3CAA                <2> 			cmp	al,0AAh
  6733 0000555E 7503                <2> 			jne	ResetErr
  6734 00005560 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6735 00005562 C3                  <2> 			ret
  6736 00005563 30C0                <2> ResetErr:	xor al, al
  6737 00005565 C3                  <2> 			ret
  6738                              <2> 
  6739                              <2> WriteDSP:   ;uses ax dx
  6740 00005566 6650                <2> 		push ax
  6741 00005568 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6742 0000556C EC                  <2> WaitIt:	in	al,dx
  6743 0000556D 2480                <2> 		and	al,80h
  6744 0000556F 75FB                <2> 		jnz	WaitIt
  6745 00005571 6658                <2> 		pop	ax
  6746 00005573 EE                  <2> 		out	dx,al
  6747 00005574 C3                  <2> 		ret
  6748                              <2> 
  6749 00005575 00                  <2> OddLength db 0
  6750 00005576 00000000            <2> Length0 dd	0
  6751 0000557A 0000                <2> Length1	dw  0
  6752 0000557C 00000000            <2> NextMemLoc dd 0
  6753 00005580 00000000            <2> MemLoc	dd  0
  6754 00005584 0000                <2> SegLoc  dw 0
  6755 00005586 00                  <2> Page1	db  0
  6756 00005587 00000000            <2> Freq	dd	0
  6757 0000558B 14                  <2> WAVEMode db 14h
  6758                              <2> PgPort	equ 83h
  6759                              <2> AddPort	equ 02h
  6760                              <2> LenPort	equ 03h
  6761                              <2> ModeReg	equ 59h
  6762                              <2> Channel	equ 01h
  6763                              <2> BasePort	equ 220h
  6764 0000558C 00                  <2> SoundBlaster	db 0
  6765                              <1> %endif
  6766                              <1> %ifdef rtl8139.included
  6767                              <1> 	%include "source/drivers/network/rtl8139.asm"
  6768                              <1> %endif
  6769                              <1> %ifdef ne2000.included
  6770                              <1> 	%include "source/drivers/network/ne2000.asm"
  6771                              <2> ne2000:
  6772                              <2> ;	PAGE0			PAGE 1			PAGE 2
  6773                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  6774                              <2> ;0	CR		CR		CR		CR		CR		CR
  6775                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  6776                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  6777                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  6778                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  6779                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  6780                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  6781                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  6782                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  6783                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  6784                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  6785                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  6786                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  6787                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  6788                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  6789                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  6790                              <2> .CR equ 0
  6791                              <2> 	.CR.STP	equ 1		;Stop
  6792                              <2> 	.CR.STA equ 2		;Start
  6793                              <2> 	.CR.TXP equ 4		;Transmit
  6794                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  6795                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  6796                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  6797                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  6798                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  6799                              <2> .PSTART equ 1
  6800                              <2> .PSTOP equ 2
  6801                              <2> .BNRY equ 3
  6802                              <2> .ISR equ 7
  6803                              <2> 	.ISR.PRX equ 1		;Packet Received
  6804                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  6805                              <2> 	.ISR.RXE equ 4		;Receive Error
  6806                              <2> 	.ISR.TXE equ 8		;Transmission Error
  6807                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  6808                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  6809                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  6810                              <2> 	.ISR.RST equ 0x80	;Reset status
  6811                              <2> .RSAR0 equ 8
  6812                              <2> .RSAR1 equ 9
  6813                              <2> .RBCR0 equ 0xA
  6814                              <2> .RBCR1 equ 0xB
  6815                              <2> .RCR equ 0xC
  6816                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  6817                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  6818                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  6819                              <2> 	.RCR.AM equ 8		;Accept Multicast
  6820                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  6821                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  6822                              <2> .DCR equ 0xE
  6823                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  6824                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  6825                              <2> 	.DCR.LAS equ 4		;Long Address Select
  6826                              <2> 	.DCR.LS equ 8		;Loopback Select
  6827                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  6828                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  6829                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  6830                              <2> .ASIC equ 0x10
  6831                              <2> .RESET equ 0x1F
  6832                              <2> 
  6833                              <2> .init:
  6834 0000558D BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
  6835 00005592 31C0                <2> 	xor eax, eax
  6836 00005594 A2[BD5C0000]        <2> 	mov [pcifunction], al
  6837 00005599 A2[BB5C0000]        <2> 	mov [pcibus], al
  6838 0000559E A2[BC5C0000]        <2> 	mov [pcidevice], al
  6839 000055A3 B002                <2> 	mov al, 0x02 ;;type code
  6840 000055A5 A2[3C5D0000]        <2> 	mov [pcitype], al
  6841 000055AA B8EC102980          <2> 	mov eax, 0x802910EC
  6842 000055AF A3[C05C0000]        <2> 	mov [pcidevid], eax
  6843 000055B4 E80B070000          <2> 	call getpciport
  6844 000055B9 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  6845 000055BF 7501                <2> 	jne .good0
  6846 000055C1 C3                  <2> 	ret
  6847                              <2> .good0:
  6848 000055C2 8915[F87B0000]      <2> 	mov [basenicaddr], edx
  6849 000055C8 89D1                <2> 	mov ecx, edx
  6850                              <2> .test:
  6851 000055CA E84A000000          <2> 	call .reset
  6852 000055CF E871000000          <2> 	call .stop
  6853 000055D4 89CA                <2> 	mov edx, ecx
  6854 000055D6 B9FFFF0000          <2> 	mov ecx, 0xFFFF
  6855 000055DB E2FE                <2> 	loop $ ;wait for ~100 ms
  6856 000055DD 89D1                <2> 	mov ecx, edx
  6857 000055DF EC                  <2> 	in al, dx
  6858 000055E0 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
  6859 000055E2 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
  6860 000055E4 7410                <2> 	je .good1
  6861 000055E6 89CA                <2> 	mov edx, ecx
  6862 000055E8 81C207000000        <2> 	add edx, .ISR
  6863 000055EE EC                  <2> 	in al, dx
  6864 000055EF 2480                <2> 	and al, .ISR.RST
  6865 000055F1 3C80                <2> 	cmp al, .ISR.RST
  6866 000055F3 7401                <2> 	je .good1
  6867 000055F5 C3                  <2> 	ret
  6868                              <2> .good1:
  6869 000055F6 E80BD8FFFF          <2> call showhex	;for debugging, please remove
  6870 000055FB E851000000          <2> 	call .setup
  6871 00005600 E88B250000          <2> call showmac
  6872 00005605 BE[6E580000]        <2> mov esi, .initmsg
  6873 0000560A E803C7FFFF          <2> call print
  6874 0000560F C605[F77B0000]01    <2> 	mov byte [nicconfig], 1
  6875 00005616 31DB                <2> 	xor ebx, ebx
  6876 00005618 C3                  <2> 	ret
  6877                              <2> .reset:
  6878 00005619 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6879 0000561F 81C21F000000        <2> 	add edx, .RESET
  6880 00005625 EC                  <2> 	in al, dx
  6881 00005626 EE                  <2> 	out dx, al ;write its contents to itself
  6882 00005627 C3                  <2> 	ret
  6883                              <2> .page:
  6884 00005628 66C1E00E            <2> 	shl ax, 14
  6885 0000562C 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6886 00005632 EC                  <2> 	in al, dx
  6887 00005633 243F                <2> 	and al, 00111111b
  6888 00005635 08E0                <2> 	or al, ah
  6889 00005637 EE                  <2> 	out dx, al
  6890 00005638 C3                  <2> 	ret
  6891                              <2> .start:
  6892 00005639 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6893 0000563F B020                <2> 	mov al, .CR.RD2
  6894 00005641 B002                <2> 	mov al, .CR.STA
  6895 00005643 EE                  <2> 	out dx, al
  6896 00005644 C3                  <2> 	ret
  6897                              <2> .stop:
  6898 00005645 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6899 0000564B B020                <2> 	mov al, .CR.RD2
  6900 0000564D 0C01                <2> 	or al, .CR.STP
  6901 0000564F EE                  <2> 	out dx, al
  6902 00005650 C3                  <2> 	ret
  6903                              <2> .setup:
  6904 00005651 E8EFFFFFFF          <2> 	call .stop
  6905 00005656 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6906 0000565C 81C20E000000        <2> 	add edx, .DCR
  6907 00005662 B040                <2> 	mov al, .DCR.FT1
  6908 00005664 0C01                <2> 	or al, .DCR.WTS
  6909 00005666 0C08                <2> 	or al, .DCR.LS
  6910 00005668 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
  6911 00005669 E8B9000000          <2> 	call .getmac
  6912 0000566E E8D2FFFFFF          <2> 	call .stop
  6913 00005673 30C0                <2> 	xor al, al
  6914 00005675 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6915 0000567B 81C20A000000        <2> 	add edx, .RBCR0
  6916 00005681 EE                  <2> 	out dx, al
  6917 00005682 6642                <2> 	inc dx
  6918 00005684 EE                  <2> 	out dx, al ;Clear byte count
  6919 00005685 B800400000          <2> 	mov eax, 16*1024
  6920 0000568A A3[88580000]        <2> 	mov [.ringstart], eax
  6921 0000568F C1E808              <2> 	shr eax, 8
  6922 00005692 66A3[84580000]      <2> 	mov [.pagestart], ax
  6923 00005698 0534000000          <2> 	add eax, 64-2*6
  6924 0000569D A3[86580000]        <2> 	mov [.pageend], eax
  6925 000056A2 C1E008              <2> 	shl eax, 8
  6926 000056A5 66A3[8C580000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
  6927 000056AB 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6928 000056B1 81C201000000        <2> 	add edx, .PSTART
  6929 000056B7 A0[84580000]        <2> 	mov al, [.pagestart]
  6930 000056BC EE                  <2> 	out dx, al
  6931 000056BD A0[86580000]        <2> 	mov al, [.pageend]
  6932 000056C2 6642                <2> 	inc dx
  6933 000056C4 EE                  <2> 	out dx, al
  6934 000056C5 A0[84580000]        <2> 	mov al, [.pagestart]
  6935 000056CA 6642                <2> 	inc dx
  6936 000056CC EE                  <2> 	out dx, al
  6937 000056CD E873FFFFFF          <2> 	call .stop
  6938                              <2> ;INSERT INTERRUPT ENABLE HERE
  6939 000056D2 B001                <2> 	mov al, 1
  6940 000056D4 E84FFFFFFF          <2> 	call .page
  6941 000056D9 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6942 000056DF BF[90580000]        <2> 	mov edi, .rom
  6943                              <2> .copymactocard:
  6944 000056E4 42                  <2> 	inc edx
  6945 000056E5 6E                  <2> 	outsb
  6946 000056E6 81C702000000        <2> 	add edi, 2
  6947 000056EC 81FA06000000        <2> 	cmp edx, 6
  6948 000056F2 76F0                <2> 	jbe .copymactocard
  6949 000056F4 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6950 000056FA 81C207000000        <2> 	add edx, 7
  6951 00005700 A0[84580000]        <2> 	mov al, [.pagestart]
  6952 00005705 FEC0                <2> 	inc al
  6953 00005707 EE                  <2> 	out dx, al ;set page in CURR register
  6954                              <2> ;INSERT MULTICAST INIT HERE
  6955 00005708 E838FFFFFF          <2> 	call .stop
  6956 0000570D 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6957 00005713 81C20C000000        <2> 	add edx, .RCR
  6958 00005719 B004                <2> 	mov al, .RCR.AB
  6959 0000571B EE                  <2> 	out dx, al ;accept broadcast
  6960 0000571C 6642                <2> 	inc dx
  6961 0000571E 30C0                <2> 	xor al, al
  6962 00005720 EE                  <2> 	out dx, al ;stop loopback
  6963 00005721 E813FFFFFF          <2> 	call .start
  6964 00005726 C3                  <2> 	ret
  6965                              <2> .getmac:
  6966 00005727 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6967 0000572D B020                <2> 	mov al, 0x20
  6968 0000572F 0C02                <2> 	or al, 2
  6969 00005731 EE                  <2> 	out dx, al	;set STA and RD2 bits
  6970 00005732 6681C20A00          <2> 	add dx, .RBCR0
  6971 00005737 B010                <2> 	mov al, 16
  6972 00005739 EE                  <2> 	out dx, al
  6973 0000573A 6642                <2> 	inc dx
  6974 0000573C 30C0                <2> 	xor al, al
  6975 0000573E EE                  <2> 	out dx, al
  6976 0000573F 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  6977 00005745 6681C20800          <2> 	add dx, .RSAR0
  6978 0000574A EE                  <2> 	out dx, al
  6979 0000574B 6642                <2> 	inc dx
  6980 0000574D EE                  <2> 	out dx, al
  6981 0000574E 668B15[F87B0000]    <2> 	mov dx, [basenicaddr]
  6982 00005755 B008                <2> 	mov al, 8
  6983 00005757 0C02                <2> 	or al, 2
  6984 00005759 EE                  <2> 	out dx, al
  6985 0000575A 668B15[F87B0000]    <2> 	mov dx, [basenicaddr]
  6986 00005761 6681C21000          <2> 	add dx, .ASIC
  6987 00005766 B908000000          <2> 	mov ecx, 8
  6988 0000576B BF[90580000]        <2> 	mov edi, .rom
  6989 00005770 F3666D              <2> 	rep insw
  6990                              <2> .copymac:
  6991 00005773 BF[90580000]        <2> 	mov edi, .rom
  6992 00005778 BE[007C0000]        <2> 	mov esi, sysmac
  6993 0000577D B906000000          <2> 	mov ecx, 6
  6994                              <2> .lpmac:
  6995 00005782 8A07                <2> 	mov al, [edi]
  6996 00005784 8806                <2> 	mov [esi], al
  6997 00005786 81C702000000        <2> 	add edi, 2
  6998 0000578C 46                  <2> 	inc esi
  6999 0000578D E2F3                <2> 	loop .lpmac
  7000 0000578F B9[007C0000]        <2> 	mov ecx, sysmac
  7001 00005794 C3                  <2> 	ret
  7002                              <2> .sendpacket:
  7003 00005795 803D[F77B0000]00    <2> 	cmp byte [nicconfig], 0
  7004 0000579C 7512                <2> 	jne .sendit
  7005 0000579E 56                  <2> 	push esi
  7006 0000579F 57                  <2> 	push edi
  7007 000057A0 E8E8FDFFFF          <2> 	call .init
  7008 000057A5 5F                  <2> 	pop edi
  7009 000057A6 5E                  <2> 	pop esi
  7010 000057A7 81FB00000000        <2> 	cmp ebx, 0
  7011 000057AD 7401                <2> 	je .sendit
  7012 000057AF C3                  <2> 	ret
  7013                              <2> .sendit: ;packet start in edi, end in esi
  7014 000057B0 87F7                <2> 	xchg esi, edi ;this helps with the outsw
  7015                              <2> 	;now the packet start is in esi, end in edi
  7016 000057B2 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7017 000057B8 B020                <2> 	mov al, .CR.RD2
  7018 000057BA 0C02                <2> 	or al, .CR.STA
  7019 000057BC EE                  <2> 	out dx, al ;set RD2 and STA
  7020 000057BD 81C207000000        <2> 	add edx, .ISR ; ISR
  7021 000057C3 B040                <2> 	mov al, .ISR.RDC
  7022 000057C5 EE                  <2> 	out dx, al ;set RDC flag
  7023 000057C6 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7024 000057CC 6681C20A00          <2> 	add dx, .RBCR0
  7025 000057D1 89F8                <2> 	mov eax, edi
  7026 000057D3 29F0                <2> 	sub eax, esi
  7027 000057D5 BB01000000          <2> 	mov ebx, 1
  7028 000057DA 21C3                <2> 	and ebx, eax
  7029 000057DC 81FB01000000        <2> 	cmp ebx, 1
  7030 000057E2 7501                <2> 	jne .nofixword
  7031 000057E4 40                  <2> 	inc eax
  7032                              <2> .nofixword:
  7033 000057E5 89C1                <2> 	mov ecx, eax ;save length in ecx
  7034 000057E7 EE                  <2> 	out dx, al
  7035 000057E8 86C4                <2> 	xchg al, ah
  7036 000057EA 6642                <2> 	inc dx
  7037 000057EC EE                  <2> 	out dx, al ;send size
  7038 000057ED 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7039 000057F3 6681C20800          <2> 	add dx, .RSAR0
  7040 000057F8 66A1[84580000]      <2> 	mov ax, [.pagestart]
  7041 000057FE C1E008              <2> 	shl eax, 8
  7042 00005801 EE                  <2> 	out dx, al
  7043 00005802 86C4                <2> 	xchg al, ah
  7044 00005804 6642                <2> 	inc dx
  7045 00005806 EE                  <2> 	out dx, al ;send address in NIC memory
  7046 00005807 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7047 0000580D B010                <2> 	mov al, .CR.RD1
  7048 0000580F 0C02                <2> 	or al, .CR.STA
  7049 00005811 EE                  <2> 	out dx, al ;set RD and STA
  7050 00005812 89CB                <2> 	mov ebx, ecx ;save length in ebx
  7051 00005814 D1E9                <2> 	shr ecx, 1
  7052 00005816 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7053 0000581C 6681C21000          <2> 	add dx, 0x10
  7054 00005821 F3666F              <2> 	rep outsw ;Send the packet data
  7055 00005824 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7056 0000582A 6681C20700          <2> 	add dx, .ISR
  7057                              <2> .chkcopylp:
  7058 0000582F B440                <2> 	mov ah, .ISR.RDC
  7059 00005831 EC                  <2> 	in al, dx
  7060 00005832 20C4                <2> 	and ah, al
  7061 00005834 80FC40              <2> 	cmp ah, 0x40
  7062 00005837 75F6                <2> 	jne .chkcopylp	
  7063 00005839 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7064 0000583F 6681C20400          <2> 	add dx, 4
  7065 00005844 A0[84580000]        <2> 	mov al, [.pagestart]
  7066 00005849 EE                  <2> 	out dx, al ;send start address in pages
  7067 0000584A 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7068 00005850 81C205000000        <2> 	add edx, 0x5
  7069 00005856 89D8                <2> 	mov eax, ebx
  7070                              <2> 	;cmp eax, 64
  7071                              <2> 	;ja .nopadpacket
  7072                              <2> 	;mov eax, 64
  7073                              <2> ;.nopadpacket:
  7074 00005858 EE                  <2> 	out dx, al
  7075 00005859 86C4                <2> 	xchg al, ah
  7076 0000585B 6642                <2> 	inc dx
  7077 0000585D EE                  <2> 	out dx, al ;send length
  7078 0000585E 8B15[F87B0000]      <2> 	mov edx, [basenicaddr]
  7079 00005864 B020                <2> 	mov al, 0x20
  7080 00005866 0C04                <2> 	or al, 4
  7081 00005868 0C02                <2> 	or al, 2
  7082 0000586A EE                  <2> 	out dx, al ;set RD2, TXP, and STA
  7083 0000586B 31DB                <2> 	xor ebx, ebx
  7084 0000586D C3                  <2> 	ret
  7085 0000586E 4E453230303020496E- <2> .initmsg db "NE2000 Initialized.",10,0
  7086 00005877 697469616C697A6564- <2>
  7087 00005880 2E0A00              <2>
  7088 00005883 90                  <2> align 2, nop
  7089 00005884 0000                <2> .pagestart dw 0
  7090 00005886 0000                <2> .pageend dw 0
  7091 00005888 00000000            <2> .ringstart dd 0
  7092 0000588C 00000000            <2> .ringend dd 0
  7093 00005890 00<rept>            <2> .rom times 16 db 0
  7094                              <1> %endif
  7095                              <1> %ifdef io.serial
  7096                              <1> 	%include "source/drivers/input/serial.asm"
  7097                              <1> %else
  7098                              <1> 	%include "source/drivers/input/keyboard.asm"
  7099 000058A0 00                  <2> specialkey db 0
  7100 000058A1 00                  <2> charregion db 0
  7101                              <2> waitforinput:		;;this is basically the idle process
  7102                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7103                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7104 000058A2 6631C0              <2> 	xor ax, ax
  7105 000058A5 A0[2C610000]        <2> 	mov al, [threadson]
  7106 000058AA 8825[2C610000]      <2> 	mov [threadson], ah
  7107 000058B0 FB                  <2> 	sti
  7108 000058B1 F4                  <2> 	hlt
  7109 000058B2 A2[2C610000]        <2> 	mov [threadson], al
  7110 000058B7 3A25[C2210000]      <2> 	cmp ah, [trans]
  7111 000058BD 7401                <2> 	je getkey
  7112 000058BF C3                  <2> 	ret
  7113                              <2> getkey:
  7114 000058C0 31C0                <2> 		xor eax, eax
  7115 000058C2 A2[A0580000]        <2> 		mov [specialkey], al
  7116 000058C7 66A3[C0210000]      <2> 		mov [lastkey], ax
  7117 000058CD E464                <2> 		in al, 64h ; Status
  7118                              <2> 	%ifdef gui.included
  7119 000058CF A820                <2> 		test al, 20h ; PS2-Mouse?
  7120 000058D1 0F851FF7FFFF        <2> 		jnz near moused
  7121                              <2> 	%endif
  7122 000058D7 A801                <2> 		test al, 1 
  7123 000058D9 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7124                              <2> 	calckey:
  7125 000058DB E460                <2> 		in al, 60h
  7126 000058DD 88C4                <2> 		mov ah, al
  7127 000058DF 30C0                <2> 		xor al, al
  7128 000058E1 8825[C1210000]      <2> 		mov [lastkey + 1], ah
  7129 000058E7 88E0                <2> 		mov al, ah
  7130 000058E9 BF[825A0000]        <2> 		mov edi, scancode
  7131                              <2> 	searchscan: 
  7132 000058EE 3C3A                <2> 		cmp al, 3Ah
  7133 000058F0 731A                <2> 		jae scanother
  7134 000058F2 30E4                <2> 		xor ah, ah
  7135 000058F4 C0E002              <2> 		shl al, 2
  7136 000058F7 01C7                <2> 		add edi, eax
  7137 000058F9 D0E8                <2> 		shr al, 1
  7138 000058FB 01C7                <2> 		add edi, eax
  7139 000058FD D0E8                <2> 		shr al, 1
  7140 000058FF 8A27                <2> 		mov ah, [edi]
  7141 00005901 80FC00              <2> 		cmp ah, 0
  7142 00005904 7406                <2> 		je scanother
  7143 00005906 E9D7000000          <2> 		jmp scanfound
  7144 0000590B 00                  <2> uppercase db 0
  7145                              <2> scanother:
  7146 0000590C 88C4                <2> 		mov ah, al
  7147 0000590E 30C0                <2> 		xor al, al
  7148 00005910 66A3[C0210000]      <2> 		mov [lastkey], ax
  7149 00005916 80FCE0              <2> 		cmp ah, 0E0h
  7150 00005919 0F847D000000        <2> 		je near getkeyspecial
  7151 0000591F 803D[A0580000]E0    <2> 		cmp byte [specialkey], 0xE0
  7152 00005926 752B                <2> 		jne nospecialkey
  7153 00005928 80FC38              <2> 		cmp ah, 38h
  7154 0000592B 0F84A0000000        <2> 		je near alton
  7155 00005931 80FCB8              <2> 		cmp ah, 0B8h
  7156 00005934 0F849F000000        <2> 		je near altoff
  7157 0000593A 80FC1D              <2> 		cmp ah, 1Dh
  7158 0000593D 0F847E000000        <2> 		je near ctron
  7159 00005943 80FC9D              <2> 		cmp ah, 9Dh
  7160 00005946 0F847D000000        <2> 		je near ctroff
  7161 0000594C 66A3[C0210000]      <2> 		mov [lastkey], ax
  7162 00005952 C3                  <2> 		ret
  7163                              <2> nospecialkey:
  7164 00005953 80FC2A              <2> 		cmp ah, 2Ah
  7165 00005956 0F8455000000        <2> 		je near shifton
  7166 0000595C 80FC36              <2> 		cmp ah, 36h
  7167 0000595F 0F844C000000        <2> 		je near shifton
  7168 00005965 80FC1C              <2> 		cmp ah, 1Ch
  7169 00005968 0F8473000000        <2> 		je near entdown
  7170 0000596E 80FCAA              <2> 		cmp ah, 0AAh
  7171 00005971 0F8442000000        <2> 		je near shiftoff
  7172 00005977 80FCB6              <2> 		cmp ah, 0B6h
  7173 0000597A 0F8439000000        <2> 		je near shiftoff
  7174 00005980 80FC3A              <2> 		cmp ah, 3Ah
  7175 00005983 0F84A5000000        <2> 		je near capslock
  7176 00005989 80FC45              <2> 		cmp ah, 0x45
  7177 0000598C 0F84AD000000        <2> 		je near numlock
  7178 00005992 80FC46              <2> 		cmp ah, 0x46
  7179 00005995 0F84BC000000        <2> 		je near scrolllock
  7180 0000599B C3                  <2> 		ret
  7181                              <2> 	getkeyspecial:
  7182 0000599C C605[A0580000]E0    <2> 		mov byte [specialkey], 0xE0
  7183 000059A3 E933FFFFFF          <2> 		jmp calckey
  7184                              <2> 	shift:
  7185 000059A8 A0[0B590000]        <2> 		mov al, [uppercase]
  7186 000059AD 3C01                <2> 		cmp al, 1
  7187 000059AF 7308                <2> 		jae shiftoff
  7188                              <2> 	shifton:
  7189 000059B1 C605[0B590000]01    <2> 		mov byte [uppercase], 1
  7190 000059B8 C3                  <2> 		ret
  7191                              <2> 	shiftoff:
  7192 000059B9 C605[0B590000]00    <2> 		mov byte [uppercase], 0
  7193 000059C0 C3                  <2> 		ret
  7194                              <2> 	ctron:
  7195 000059C1 C605[2D5A0000]01    <2> 		mov byte [ctrkey], 1
  7196 000059C8 C3                  <2> 		ret
  7197                              <2> 	ctroff:
  7198 000059C9 C605[2D5A0000]00    <2> 		mov byte [ctrkey], 0
  7199 000059D0 C3                  <2> 		ret
  7200                              <2> 	alton:
  7201 000059D1 C605[2C5A0000]01    <2> 		mov byte [altkey], 1
  7202 000059D8 C3                  <2> 		ret
  7203                              <2> 	altoff:
  7204 000059D9 C605[2C5A0000]00    <2> 		mov byte [altkey], 0
  7205 000059E0 C3                  <2> 		ret
  7206                              <2> 	entdown:
  7207 000059E1 C3                  <2> 		ret
  7208                              <2> 	scanfound:
  7209 000059E2 81C704000000        <2> 		add edi, 4
  7210 000059E8 803D[2D5A0000]01    <2> 		cmp byte [ctrkey], 1
  7211 000059EF 731B                <2> 		jae altin
  7212 000059F1 81EF04000000        <2> 		sub edi, 4
  7213 000059F7 81C702000000        <2> 		add edi, 2
  7214 000059FD 803D[2C5A0000]01    <2> 		cmp byte [altkey], 1
  7215 00005A04 7306                <2> 		jae altin
  7216 00005A06 81EF02000000        <2> 		sub edi, 2
  7217                              <2> altin:
  7218 00005A0C 81C701000000        <2> 		add edi, 1
  7219 00005A12 803D[0B590000]01    <2> 		cmp byte [uppercase], 1
  7220 00005A19 7306                <2> 		jae uppercaseon
  7221 00005A1B 81EF01000000        <2> 		sub edi, 1
  7222                              <2> uppercaseon:
  7223 00005A21 8A07                <2> 		mov al,[edi]
  7224 00005A23 A2[C0210000]        <2> 		mov [lastkey], al
  7225 00005A28 C3                  <2> 		ret
  7226                              <2> 		
  7227 00005A29 00                  <2> keyboardstatus db 0
  7228 00005A2A 00                  <2> numlockstatus db 0
  7229 00005A2B 00                  <2> scrolllockstatus db 0
  7230 00005A2C 00                  <2> altkey db 0
  7231 00005A2D 00                  <2> ctrkey db 0
  7232                              <2> 	capslock:
  7233 00005A2E 8035[295A0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7234 00005A35 E835000000          <2> 		call updatekblights
  7235 00005A3A E969FFFFFF          <2> 		jmp shift
  7236                              <2> 		
  7237                              <2> 	numlock:
  7238 00005A3F 8035[295A0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7239 00005A46 8035[2A5A0000]01    <2> 		xor byte [numlockstatus], 1
  7240 00005A4D E81D000000          <2> 		call updatekblights
  7241 00005A52 E969FEFFFF          <2> 		jmp getkey
  7242                              <2> 	
  7243                              <2> 	scrolllock:
  7244 00005A57 8035[295A0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7245 00005A5E 8035[2B5A0000]01    <2> 		xor byte [scrolllockstatus], 1
  7246 00005A65 E805000000          <2> 		call updatekblights
  7247 00005A6A E951FEFFFF          <2> 		jmp getkey
  7248                              <2> 		
  7249                              <2> 	updatekblights:
  7250 00005A6F B0ED                <2> 		mov al, 0xED
  7251 00005A71 66BA6000            <2> 		mov dx, 0x60
  7252 00005A75 EE                  <2> 		out dx, al
  7253                              <2> 	chkkbdack:
  7254 00005A76 EC                  <2> 		in al, dx
  7255 00005A77 3CFA                <2> 		cmp al, 0xFA
  7256 00005A79 75FB                <2> 		jne chkkbdack
  7257 00005A7B A0[295A0000]        <2> 		mov al, [keyboardstatus]
  7258 00005A80 EE                  <2> 		out dx, al
  7259 00005A81 C3                  <2> 		ret
  7260                              <2> 		
  7261                              <2> scancode:
  7262 00005A82 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7263 00005A88 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7264 00005A8E 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  7265 00005A94 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7266 00005A9A 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7267 00005AA0 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7268 00005AA6 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7269 00005AAC 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  7270 00005AB2 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7271 00005AB8 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  7272 00005ABE 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7273 00005AC4 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7274 00005ACA 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7275 00005AD0 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7276 00005AD6 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7277 00005ADC 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7278 00005AE2 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7279 00005AE8 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7280 00005AEE 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7281 00005AF4 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7282 00005AFA 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7283 00005B00 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7284 00005B06 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7285 00005B0C 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7286 00005B12 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7287 00005B18 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7288 00005B1E 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7289 00005B24 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7290 00005B2A 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7291 00005B30 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7292 00005B36 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7293 00005B3C 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7294 00005B42 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7295 00005B48 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  7296 00005B4E 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7297 00005B54 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7298 00005B5A 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7299 00005B60 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7300 00005B66 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7301 00005B6C 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  7302 00005B72 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7303 00005B78 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7304 00005B7E 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7305 00005B84 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7306 00005B8A 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7307 00005B90 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7308 00005B96 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7309 00005B9C 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7310 00005BA2 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7311 00005BA8 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7312 00005BAE 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  7313 00005BB4 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7314 00005BBA 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7315 00005BC0 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7316 00005BC6 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7317 00005BCC 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7318 00005BD2 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7319 00005BD8 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7320                              <2> noscan:
  7321                              <2> 
  7322                              <1> %endif
  7323                              <1> ;drivers will soon be handled intelligently
  7324                              <1> ;every driver's source will be scanned for a .init function
  7325                              <1> ;that will be called and if it returns 0
  7326                              <1> ;the hardware was found and the driver initialized properly
  7327                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7328                              <1> 	%ifdef sound.included
  7329 00005BDE E873F7FFFF          <1> 		call sblaster.init
  7330                              <1> 	%endif
  7331                              <1> 	%ifdef ne2000.included
  7332 00005BE3 E8A5F9FFFF          <1> 		call ne2000.init
  7333                              <1> 	%endif
  7334                              <1> 	%ifdef rtl8139.included
  7335                              <1> 		call rtl8139.init
  7336                              <1> 	%endif
  7337 00005BE8 C3                  <1> 	ret
  7338                              <1> initialize:
  7339                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7340 00005BE9 E819000000          <1> 	call .pic
  7341                              <1> %ifdef terminal.vsync
  7342 00005BEE E841000000          <1> 	call .rtc
  7343                              <1> %endif
  7344 00005BF3 E871000000          <1> 	call .pit
  7345 00005BF8 E893000000          <1> 	call .fpu
  7346 00005BFD E8A4000000          <1> 	call .sse
  7347 00005C02 31C0                <1> 	xor eax, eax
  7348 00005C04 31C9                <1> 	xor ecx, ecx
  7349                              <1> %ifdef io.serial
  7350                              <1> 	call serial.init
  7351                              <1> %endif
  7352 00005C06 C3                  <1> 	ret
  7353                              <1> 	
  7354                              <1> .pic:
  7355 00005C07 B011                <1> 	mov al, 0x11
  7356 00005C09 E620                <1> 	out 0x20, al
  7357 00005C0B E6A0                <1> 	out 0xA0, al
  7358 00005C0D B040                <1> 	mov al, 0x40	;interrupt for master
  7359 00005C0F E621                <1> 	out 0x21, al
  7360 00005C11 B048                <1> 	mov al, 0x48	;interrupt for slave
  7361 00005C13 E6A1                <1> 	out 0xA1, al
  7362 00005C15 B004                <1> 	mov al, 4
  7363 00005C17 E621                <1> 	out 0x21, al
  7364 00005C19 B002                <1> 	mov al, 2
  7365 00005C1B E6A1                <1> 	out 0xA1, al
  7366 00005C1D B001                <1> 	mov al, 0x1
  7367 00005C1F E621                <1> 	out 0x21, al
  7368 00005C21 B001                <1> 	mov al, 0x1
  7369 00005C23 E6A1                <1> 	out 0xA1, al
  7370                              <1> 	;masks are set to zero so as not to mask
  7371 00005C25 30C0                <1> 	xor al, al
  7372 00005C27 E621                <1> 	out 0x21, al
  7373 00005C29 30C0                <1> 	xor al, al
  7374 00005C2B E6A1                <1> 	out 0xA1, al
  7375 00005C2D B020                <1> 	mov al, 0x20
  7376 00005C2F E6A0                <1> 	out 0xA0, al
  7377 00005C31 E620                <1> 	out 0x20, al
  7378 00005C33 C3                  <1> 	ret
  7379                              <1> .rtc:
  7380 00005C34 B008                <1> 	mov al, 0x8
  7381 00005C36 88C4                <1> 	mov ah, al
  7382 00005C38 66BA7000            <1> 	mov dx, 0x70
  7383 00005C3C EE                  <1> 	out dx, al
  7384 00005C3D 6642                <1> 	inc dx
  7385 00005C3F EC                  <1> 	in al, dx
  7386 00005C40 86C4                <1> 	xchg al, ah
  7387 00005C42 664A                <1> 	dec dx
  7388 00005C44 EE                  <1> 	out dx, al
  7389 00005C45 6642                <1> 	inc dx
  7390 00005C47 86C4                <1> 	xchg al, ah
  7391 00005C49 0C40                <1> 	or al, 0x40
  7392 00005C4B EE                  <1> 	out dx, al
  7393                              <1> 	
  7394 00005C4C B00A                <1> 	mov al, 0xA
  7395 00005C4E 664A                <1> 	dec dx
  7396 00005C50 EE                  <1> 	out dx, al
  7397 00005C51 86C4                <1> 	xchg al, ah
  7398 00005C53 6642                <1> 	inc dx
  7399 00005C55 EC                  <1> 	in al, dx
  7400 00005C56 24F0                <1> 	and al, 0xF0
  7401 00005C58 0A05[F9020000]      <1> 	or al, [rtcrate]
  7402 00005C5E 86C4                <1> 	xchg al, ah
  7403 00005C60 664A                <1> 	dec dx
  7404 00005C62 EE                  <1> 	out dx, al
  7405 00005C63 6642                <1> 	inc dx
  7406 00005C65 86C4                <1> 	xchg al, ah
  7407 00005C67 EE                  <1> 	out dx, al
  7408 00005C68 C3                  <1> 	ret
  7409                              <1> 	
  7410                              <1> .pit:
  7411                              <1> 	;initialize the PIT
  7412 00005C69 66A1[4F020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7413 00005C6F E640                <1> 	out 0x40, al
  7414 00005C71 66C1C008            <1> 	rol ax, 8
  7415 00005C75 E640                <1> 	out 0x40, al
  7416                              <1> 	;enable rtc interrupt
  7417 00005C77 B00B                <1> 	mov al, 0xB
  7418 00005C79 E670                <1> 	out 0x70, al
  7419 00005C7B 66C1C008            <1> 	rol ax, 8
  7420 00005C7F E471                <1> 	in al, 0x71
  7421 00005C81 66C1C008            <1> 	rol ax, 8
  7422 00005C85 E670                <1> 	out 0x70, al
  7423 00005C87 66C1C008            <1> 	rol ax, 8
  7424 00005C8B 0C40                <1> 	or al, 0x40
  7425 00005C8D E671                <1> 	out 0x71, al
  7426 00005C8F C3                  <1> 	ret
  7427                              <1> .fpu:
  7428                              <1> 	;And now to initialize the fpu
  7429 00005C90 0F20E0              <1> 	mov eax, cr4
  7430 00005C93 0D00020000          <1> 	or eax, 0x200
  7431 00005C98 0F22E0              <1> 	mov cr4, eax
  7432 00005C9B B87F0B0000          <1> 	mov eax, 0xB7F
  7433 00005CA0 50                  <1> 	push eax
  7434 00005CA1 D92C24              <1> 	fldcw [esp]
  7435 00005CA4 58                  <1> 	pop eax
  7436 00005CA5 C3                  <1> 	ret
  7437                              <1> 	
  7438                              <1> .sse:
  7439 00005CA6 0F20C0              <1> 	mov eax, cr0
  7440 00005CA9 24FB                <1> 	and al, 11111011b
  7441 00005CAB 0C02                <1> 	or al, 00000010b
  7442 00005CAD 0F22C0              <1> 	mov cr0, eax
  7443 00005CB0 0F20E0              <1> 	mov eax, cr4
  7444 00005CB3 660D0006            <1> 	or ax, 0000011000000000b
  7445 00005CB7 0F22E0              <1> 	mov cr4, eax
  7446 00005CBA C3                  <1> 	ret
  7447                                      %include "source/pci.asm"
  7448 00005CBB 00                  <1> pcibus		db 0
  7449 00005CBC 00                  <1> pcidevice	db 0
  7450 00005CBD 00                  <1> pcifunction	db 0
  7451 00005CBE 00                  <1> pciregister	db 0
  7452 00005CBF 00                  <1> pcireqtype	db 0
  7453 00005CC0 00000000            <1> pcidevid	dd 0
  7454                              <1> 
  7455                              <1> getpciport:
  7456 00005CC4 B001                <1> 	mov al, 1
  7457 00005CC6 A2[BF5C0000]        <1> 	mov [pcireqtype], al
  7458 00005CCB E916000000          <1> 	jmp searchpci
  7459                              <1> pcidump:
  7460 00005CD0 31C0                <1> 	xor eax, eax
  7461 00005CD2 A2[BD5C0000]        <1> 	mov [pcifunction], al
  7462 00005CD7 A2[BB5C0000]        <1> 	mov [pcibus], al
  7463 00005CDC A2[BC5C0000]        <1> 	mov [pcidevice], al
  7464 00005CE1 A2[BF5C0000]        <1> 	mov [pcireqtype], al
  7465                              <1> searchpci:		;;return in ebx, start X in pciX
  7466 00005CE6 30C0                <1> 	xor al, al
  7467 00005CE8 A2[BE5C0000]        <1> 	mov [pciregister], al
  7468 00005CED E8A5010000          <1> 	call getpciaddr
  7469 00005CF2 BAF80C0000          <1> 	mov edx, 0xCF8
  7470 00005CF7 EF                  <1> 	out dx, eax	;;request pci config
  7471 00005CF8 BAFC0C0000          <1> 	mov edx, 0xCFC
  7472 00005CFD ED                  <1> 	in eax, dx 	;;read in pci config
  7473 00005CFE 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7474 00005D03 0F8237000000        <1> 	jb near checkpcidevice
  7475                              <1> searchpciret:
  7476                              <1> nextpcidevice:
  7477 00005D09 30C0                <1> 	xor al, al
  7478 00005D0B A2[BD5C0000]        <1> 	mov [pcifunction], al
  7479 00005D10 A0[BC5C0000]        <1> 	mov al, [pcidevice]
  7480 00005D15 3C1F                <1> 	cmp al, 11111b
  7481 00005D17 0F83F2000000        <1> 	jae near nextpcibus
  7482 00005D1D FEC0                <1> 	inc al
  7483 00005D1F A2[BC5C0000]        <1> 	mov [pcidevice], al
  7484 00005D24 EBC0                <1> 	jmp searchpci
  7485 00005D26 A0[BD5C0000]        <1> 	mov al, [pcifunction]
  7486 00005D2B 3C07                <1> 	cmp al, 111b
  7487 00005D2D 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7488 00005D33 FEC0                <1> 	inc al
  7489 00005D35 A2[BD5C0000]        <1> 	mov [pcifunction], al
  7490 00005D3A EBAA                <1> 	jmp searchpci
  7491 00005D3C 00000000            <1> pcitype: db 0,0,0,0
  7492                              <1> checkpcidevice:
  7493 00005D40 31C0                <1> 	xor eax, eax
  7494 00005D42 3905[C05C0000]      <1> 	cmp [pcidevid], eax
  7495 00005D48 0F8422000000        <1> 	je near .good
  7496 00005D4E A2[BE5C0000]        <1> 	mov [pciregister], al	;device id, vendor id
  7497 00005D53 E83F010000          <1> 	call getpciaddr
  7498 00005D58 BAF80C0000          <1> 	mov edx, 0xCF8
  7499 00005D5D EF                  <1> 	out dx, eax
  7500 00005D5E BAFC0C0000          <1> 	mov edx, 0xCFC
  7501 00005D63 ED                  <1> 	in eax, dx
  7502 00005D64 3B05[C05C0000]      <1> 	cmp eax, [pcidevid]
  7503 00005D6A 0F8599FFFFFF        <1> 	jne near searchpciret
  7504                              <1> .good:
  7505 00005D70 30C0                <1> 	xor al, al
  7506 00005D72 3805[BF5C0000]      <1> 	cmp [pcireqtype], al
  7507 00005D78 0F842C000000        <1> 	je near dumppcidevice
  7508 00005D7E B008                <1> 	mov al, 0x08
  7509 00005D80 A2[BE5C0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7510 00005D85 E80D010000          <1> 	call getpciaddr
  7511 00005D8A BAF80C0000          <1> 	mov edx, 0xCF8
  7512 00005D8F EF                  <1> 	out dx, eax
  7513 00005D90 BAFC0C0000          <1> 	mov edx, 0xCFC
  7514 00005D95 ED                  <1> 	in eax, dx
  7515 00005D96 C1C008              <1> 	rol eax, 8
  7516 00005D99 3A05[3C5D0000]      <1> 	cmp al, [pcitype]
  7517 00005D9F 0F849A000000        <1> 	je near foundpciaddr
  7518 00005DA5 E95FFFFFFF          <1> 	jmp searchpciret
  7519                              <1> dumppcidevice:
  7520 00005DAA 30C0                <1> 	xor al, al
  7521 00005DAC A2[BE5C0000]        <1> 	mov [pciregister], al
  7522 00005DB1 E8E1000000          <1> 	call getpciaddr
  7523 00005DB6 89C1                <1> 	mov ecx, eax
  7524 00005DB8 C605[F12D0000]05    <1> 	mov byte [firsthexshown], 5
  7525 00005DBF E842D0FFFF          <1> 	call showhex
  7526                              <1> dumppcidevicelp:
  7527 00005DC4 A2[BE5C0000]        <1> 	mov [pciregister], al
  7528 00005DC9 E8C9000000          <1> 	call getpciaddr
  7529 00005DCE BAF80C0000          <1> 	mov edx, 0xCF8
  7530 00005DD3 EF                  <1> 	out dx, eax
  7531 00005DD4 BAFC0C0000          <1> 	mov edx, 0xCFC
  7532 00005DD9 ED                  <1> 	in eax, dx
  7533 00005DDA 89C1                <1> 	mov ecx, eax
  7534 00005DDC A0[BE5C0000]        <1> 	mov al, [pciregister]
  7535 00005DE1 0404                <1> 	add al, 4
  7536 00005DE3 C605[F12D0000]05    <1> 	mov byte [firsthexshown], 5
  7537 00005DEA E817D0FFFF          <1> 	call showhex
  7538 00005DEF 3C3C                <1> 	cmp al, 0x3C
  7539 00005DF1 72D1                <1> 	jb dumppcidevicelp
  7540                              <1> dumppcidn:
  7541                              <1> %ifdef io.serial
  7542                              <1> 	mov esi, line
  7543                              <1> 	call print
  7544                              <1> %else
  7545 00005DF3 803D[A8230000]00    <1> 	cmp byte [charpos], 0
  7546 00005DFA 0F8409FFFFFF        <1> 	je near searchpciret
  7547 00005E00 BE[477C0000]        <1> 	mov esi, line
  7548 00005E05 E808BFFFFF          <1> 	call print
  7549                              <1> %endif
  7550 00005E0A E9FAFEFFFF          <1> 	jmp searchpciret
  7551                              <1> nextpcibus:
  7552 00005E0F 30C0                <1> 	xor al, al
  7553 00005E11 A2[BC5C0000]        <1> 	mov [pcidevice], al
  7554 00005E16 A0[BB5C0000]        <1> 	mov al, [pcibus]
  7555 00005E1B 3C7F                <1> 	cmp al, 1111111b
  7556 00005E1D 730C                <1> 	jae donesearchpci
  7557 00005E1F FEC0                <1> 	inc al
  7558 00005E21 A2[BB5C0000]        <1> 	mov [pcibus], al
  7559 00005E26 E9BBFEFFFF          <1> 	jmp searchpci
  7560                              <1> donesearchpci:
  7561 00005E2B BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7562 00005E30 31D2                <1> 	xor edx, edx
  7563 00005E32 8815[3C5D0000]      <1> 	mov [pcitype], dl
  7564 00005E38 8915[C05C0000]      <1> 	mov [pcidevid], edx
  7565 00005E3E C3                  <1> 	ret
  7566                              <1> foundpciaddr:
  7567 00005E3F B010                <1> 	mov al, 0x10
  7568 00005E41 A2[BE5C0000]        <1> 	mov [pciregister], al
  7569                              <1> findpciioaddr:
  7570 00005E46 E84C000000          <1> 	call getpciaddr
  7571 00005E4B BAF80C0000          <1> 	mov edx, 0xCF8
  7572 00005E50 EF                  <1> 	out dx, eax
  7573 00005E51 BAFC0C0000          <1> 	mov edx, 0xCFC
  7574 00005E56 ED                  <1> 	in eax, dx
  7575 00005E57 89C3                <1> 	mov ebx, eax
  7576 00005E59 81E301000000        <1> 	and ebx, 1
  7577 00005E5F 81FB00000000        <1> 	cmp ebx, 0
  7578 00005E65 0F8416000000        <1> 	je near notpciioaddr
  7579 00005E6B 2D01000000          <1> 	sub eax, 1
  7580 00005E70 89C2                <1> 	mov edx, eax
  7581 00005E72 31DB                <1> 	xor ebx, ebx
  7582 00005E74 881D[3C5D0000]      <1> 	mov [pcitype], bl
  7583 00005E7A 891D[C05C0000]      <1> 	mov [pcidevid], ebx
  7584 00005E80 C3                  <1> 	ret
  7585                              <1> notpciioaddr:
  7586 00005E81 A0[BE5C0000]        <1> 	mov al, [pciregister]
  7587 00005E86 0404                <1> 	add al, 4
  7588 00005E88 3C28                <1> 	cmp al, 0x28
  7589 00005E8A 0F8779FEFFFF        <1> 	ja near searchpciret
  7590 00005E90 A2[BE5C0000]        <1> 	mov [pciregister], al
  7591 00005E95 EBAF                <1> 	jmp findpciioaddr
  7592                              <1> getpciaddr:		;;puts it in eax and ebx
  7593 00005E97 31C0                <1> 			xor eax, eax
  7594 00005E99 BB00000080          <1> 			mov ebx, 0x80000000
  7595 00005E9E A0[BB5C0000]        <1> 			mov al, [pcibus]
  7596 00005EA3 C1E010              <1> 			shl eax, 16
  7597 00005EA6 01C3                <1> 			add ebx, eax
  7598 00005EA8 31C0                <1> 			xor eax, eax
  7599 00005EAA A0[BC5C0000]        <1> 			mov al, [pcidevice]
  7600 00005EAF C1E00B              <1> 			shl eax, 11
  7601 00005EB2 01C3                <1> 			add ebx, eax
  7602 00005EB4 31C0                <1> 			xor eax, eax
  7603 00005EB6 A0[BD5C0000]        <1> 			mov al, [pcifunction]
  7604 00005EBB C1E008              <1> 			shl eax, 8
  7605 00005EBE 01C3                <1> 			add ebx, eax
  7606 00005EC0 31C0                <1> 			xor eax, eax
  7607 00005EC2 A0[BE5C0000]        <1> 			mov al, [pciregister]
  7608 00005EC7 01C3                <1> 			add ebx, eax
  7609 00005EC9 89D8                <1> 			mov eax, ebx
  7610 00005ECB C3                  <1> 			ret
  7611                                      %include "source/disk.asm"
  7612                              <1> ;This loads files using the methods in the loaded driver
  7613                              <1> %ifdef disk.real
  7614                              <1> %include "source/drivers/disk/realmode.asm"
  7615                              <2> diskr:
  7616                              <2> 			;read from disk using real mode-it does not work with large files
  7617                              <2> 			;sector count in cl
  7618                              <2> 			;disk number in ch
  7619                              <2> 			;48 bit address with last 32 bits in ebx
  7620                              <2> 			;buffer in esi
  7621                              <2> 			;puts end of buffer in edi and end lba address in edx
  7622 00005ECC 880D[F95E0000]      <2> 	mov [sdlength], cl
  7623 00005ED2 891D[FA5E0000]      <2> 	mov [sdaddress], ebx
  7624 00005ED8 8935[58600000]      <2> 	mov [oldesireal], esi
  7625 00005EDE 66BE[FE5E]          <2> 	mov si, readdiskreal
  7626 00005EE2 668935[E10C0000]    <2> 	mov [realmodeptr], si
  7627 00005EE9 BE[3A5F0000]        <2> 	mov esi, backfromrealread
  7628 00005EEE 8935[DD0C0000]      <2> 	mov [realmodereturn], esi
  7629 00005EF4 E9CDACFFFF          <2> 	jmp realmode
  7630 00005EF9 00                  <2> sdlength db 0
  7631 00005EFA 00000000            <2> sdaddress dd 0
  7632                              <2> 
  7633                              <2> [BITS 16]
  7634                              <2> readdiskreal:
  7635 00005EFE C706[2A5F]1000      <2> 	mov word [dlen], 0x10
  7636 00005F04 C706[2E5F]0000      <2> 	mov word [daddress], 0
  7637 00005F0A C706[305F]0001      <2> 	mov word [dsegm], 0x100
  7638 00005F10 66891E[325F]        <2> 	mov [dlbaad], ebx
  7639 00005F15 880E[2C5F]          <2> 	mov [dreadlen], cl
  7640                              <2> ReadHardDisk:
  7641 00005F19 BE[2A5F]            <2> 	mov si, diskaddresspacket
  7642 00005F1C 31C0                <2> 	xor ax, ax
  7643 00005F1E B442                <2> 	mov ah, 0x42
  7644 00005F20 8A16[295F]          <2> 	mov dl, [dnumber]
  7645 00005F24 CD13                <2> 	int 0x13
  7646 00005F26 72F1                <2> 	jc ReadHardDisk
  7647 00005F28 C3                  <2> 	ret
  7648                              <2> 
  7649 00005F29 80                  <2> dnumber db 0x80
  7650                              <2> diskaddresspacket:
  7651 00005F2A 10                  <2> dlen:	db 0x10 ;size of packet
  7652 00005F2B 00                  <2> 		db 0
  7653 00005F2C 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7654 00005F2E 0000                <2> daddress:	dw 0x0	;address 0
  7655 00005F30 0001                <2> dsegm:		dw 0x100	;segment
  7656                              <2> 		;start with known value for hd
  7657                              <2> dlbaad:
  7658 00005F32 00000000            <2> 	dd 0	;lba address
  7659 00005F36 00000000            <2> 	dd 0
  7660                              <2> [BITS 32]
  7661                              <2> backfromrealread:
  7662 00005F3A 8B35[58600000]      <2> 	mov esi, [oldesireal]
  7663 00005F40 8B1D[FA5E0000]      <2> 	mov ebx, [sdaddress]
  7664 00005F46 31C9                <2> 	xor ecx, ecx
  7665 00005F48 8A0D[F95E0000]      <2> 	mov cl, [sdlength]
  7666 00005F4E 01CB                <2> 	add ebx, ecx
  7667 00005F50 66B80800            <2> 	mov ax, LINEAR_SEL
  7668 00005F54 8EE0                <2> 	mov fs, ax
  7669 00005F56 BF00100000          <2> 	mov edi, 0x1000
  7670 00005F5B B200                <2> 	mov dl, 0
  7671 00005F5D D0E1                <2> 	shl cl, 1
  7672                              <2> copyfromrmodedisk:
  7673 00005F5F 648A07              <2> 	mov al, [fs:edi]
  7674 00005F62 8806                <2> 	mov [esi], al
  7675 00005F64 47                  <2> 	inc edi
  7676 00005F65 46                  <2> 	inc esi
  7677 00005F66 FECA                <2> 	dec dl
  7678 00005F68 80FA00              <2> 	cmp dl, 0
  7679 00005F6B 75F2                <2> 	jne copyfromrmodedisk
  7680 00005F6D FEC9                <2> 	dec cl
  7681 00005F6F B200                <2> 	mov dl, 0
  7682 00005F71 80F900              <2> 	cmp cl, 0
  7683 00005F74 75E9                <2> 	jne copyfromrmodedisk
  7684 00005F76 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7685 00005F7A 8EE0                <2> 	mov fs, ax
  7686 00005F7C 89F7                <2> 	mov edi, esi
  7687 00005F7E 8B35[58600000]      <2> 	mov esi, [oldesireal]
  7688 00005F84 89DA                <2> 	mov edx, ebx
  7689 00005F86 8B1D[FA5E0000]      <2> 	mov ebx, [sdaddress]
  7690 00005F8C C3                  <2> 	ret
  7691                              <2> 	
  7692                              <1> %else
  7693                              <1> 	%ifdef disk.protected
  7694                              <1> 	%include "source/drivers/disk/pata.asm"
  7695                              <1> 	%endif
  7696                              <1> %endif
  7697                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7698                              <1> 			;returns with err code in edx and file end in edi
  7699 00005F8D 803F00              <1> 	cmp byte [edi], 0
  7700 00005F90 0F8448000000        <1> 	je near nofileload
  7701 00005F96 89FA                <1> 	mov edx, edi
  7702 00005F98 BB[6C8C0000]        <1> 	mov ebx, diskfileindex
  7703                              <1> nextnamechar:
  7704 00005F9D 8A07                <1> 	mov al, [edi]
  7705 00005F9F 3C26                <1> 	cmp al, '&'
  7706 00005FA1 7440                <1> 	je nullfile
  7707 00005FA3 8A23                <1> 	mov ah, [ebx]
  7708 00005FA5 47                  <1> 	inc edi
  7709 00005FA6 43                  <1> 	inc ebx
  7710 00005FA7 88C1                <1> 	mov cl, al
  7711 00005FA9 08E1                <1> 	or cl, ah
  7712 00005FAB 80F900              <1> 	cmp cl, 0
  7713 00005FAE 744E                <1> 	je equalfilenames
  7714 00005FB0 80F920              <1> 	cmp cl, ' '
  7715 00005FB3 7449                <1> 	je equalfilenames
  7716 00005FB5 3C2A                <1> 	cmp al, '*'
  7717 00005FB7 742B                <1> 	je equalfilenames2
  7718 00005FB9 80FC00              <1> 	cmp ah, 0
  7719 00005FBC 7410                <1> 	je nextfilename
  7720 00005FBE 3C00                <1> 	cmp al, 0
  7721 00005FC0 7404                <1> 	je getebxzero
  7722 00005FC2 38E0                <1> 	cmp al, ah
  7723 00005FC4 74D7                <1> 	je nextnamechar
  7724                              <1> getebxzero:
  7725 00005FC6 8A23                <1> 	mov ah, [ebx]
  7726 00005FC8 43                  <1> 	inc ebx
  7727 00005FC9 80FC00              <1> 	cmp ah, 0
  7728 00005FCC 75F8                <1> 	jne getebxzero
  7729                              <1> nextfilename:
  7730 00005FCE 81C308000000        <1> 	add ebx, 8		;next descriptor
  7731 00005FD4 89D7                <1> 	mov edi, edx
  7732 00005FD6 81FB[278E0000]      <1> 	cmp ebx, enddiskfileindex
  7733 00005FDC 72BF                <1> 	jb nextnamechar
  7734                              <1> nofileload:
  7735 00005FDE BA94010000          <1> 	mov edx, 404	;indicate not found error
  7736                              <1> nullfile:
  7737 00005FE3 C3                  <1> 	ret
  7738                              <1> equalfilenames2:
  7739 00005FE4 81EB02000000        <1> 	sub ebx, 2
  7740                              <1> eqfilefind:
  7741 00005FEA 43                  <1> 	inc ebx
  7742 00005FEB 81FB[278E0000]      <1> 	cmp ebx, enddiskfileindex
  7743 00005FF1 0F83E7FFFFFF        <1> 	jae near nofileload
  7744 00005FF7 8A03                <1> 	mov al, [ebx]
  7745 00005FF9 3C00                <1> 	cmp al, 0
  7746 00005FFB 75ED                <1> 	jne eqfilefind
  7747 00005FFD 43                  <1> 	inc ebx
  7748                              <1> equalfilenames:
  7749 00005FFE 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7750 00006001 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7751 00006003 031D[2A8E0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7752 00006009 31C9                <1> 	xor ecx, ecx
  7753 0000600B 88C1                <1> 	mov cl, al			;get excess number of sectors
  7754 0000600D C0E102              <1> 	shl cl, 2
  7755 00006010 C0E902              <1> 	shr cl, 2			;cut off at 64
  7756 00006013 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7757 00006015 B500                <1> 	mov ch, 0			;drive 0
  7758 00006017 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7759                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7760 0000601A A3[5C600000]        <1> 	mov [filetracks], eax
  7761 0000601F 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7762 00006021 89DA                <1> 	mov edx, ebx
  7763 00006023 80F900              <1> 	cmp cl, 0
  7764 00006026 7405                <1> 	je copytracksforfile
  7765 00006028 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7766                              <1> copytracksforfile:
  7767 0000602D A1[5C600000]        <1> 	mov eax, [filetracks]
  7768 00006032 3D00000000          <1> 	cmp eax, 0
  7769 00006037 7419                <1> 	je donecopyfile
  7770 00006039 48                  <1> 	dec eax
  7771 0000603A A3[5C600000]        <1> 	mov [filetracks], eax
  7772 0000603F 89D3                <1> 	mov ebx, edx	;get end lba
  7773 00006041 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7774 00006043 8A2D[298E0000]      <1> 	mov ch, [DriveNumber]
  7775 00006049 89FE                <1> 	mov esi, edi	;reset buffer
  7776 0000604B E87CFEFFFF          <1> 	call diskr
  7777 00006050 EBDB                <1> 	jmp copytracksforfile
  7778                              <1> donecopyfile:
  7779 00006052 BA00000000          <1> 	mov edx, 0	;no error
  7780 00006057 C3                  <1> 	ret
  7781                              <1> 
  7782 00006058 00000000            <1> oldesireal dd 0
  7783 0000605C 00000000            <1> filetracks dd 0
  7784 00006060 00                  <1> lbad1 db 0
  7785 00006061 00                  <1> lbad2 db 0
  7786 00006062 00                  <1> lbad3 db 0
  7787 00006063 00                  <1> lbad4 db 0
  7788 00006064 00                  <1> lbad5 db 0
  7789 00006065 00                  <1> lbad6 db 0
  7790 00006066 6400                <1> segments dw 100
  7791                              <1> 
  7792                              <1> 
  7793                              <1> 	
  7794                                      %include "source/threads.asm"
  7795                              <1> %ifdef threads.included	
  7796                              <1> nwcmdst:
  7797 00006068 31C0                <1> 	xor eax, eax
  7798 0000606A BC[0EA00000]        <1> 	mov esp, stackend
  7799 0000606F A2[2C610000]        <1> 	mov [threadson], al
  7800 00006074 A3[2D610000]        <1> 	mov [currentthread], eax
  7801 00006079 0504000000          <1> 	add eax, 4
  7802 0000607E A3[28610000]        <1> 	mov [lastthread], eax
  7803 00006083 FB                  <1> 	sti
  7804 00006084 E9A9C8FFFF          <1> 	jmp nwcmd
  7805                              <1> 
  7806                              <1> nomorethreadspace:
  7807 00006089 BE[9F600000]        <1> 	mov esi, nmts
  7808 0000608E E87FBCFFFF          <1> 	call print
  7809 00006093 C605[2C610000]00    <1> 	mov byte [threadson], 0
  7810 0000609A E993C8FFFF          <1> 	jmp nwcmd
  7811 0000609F 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7812 000060A8 6572666C6F770A00    <1>
  7813                              <1> 
  7814                              <1> nomorestackspace:
  7815 000060B0 BE[BC600000]        <1> 	mov esi, nmss
  7816 000060B5 E858BCFFFF          <1> 	call print
  7817 000060BA EBAC                <1> 	jmp nwcmdst
  7818 000060BC 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7819 000060C5 72666C6F770A00      <1>
  7820                              <1> 	
  7821                              <1> threadswitch:
  7822 000060CC FA                  <1> 	cli
  7823 000060CD 60                  <1> 	pushad
  7824 000060CE BF[54BB2900]        <1> 	mov edi, threadlist
  7825 000060D3 A1[2D610000]        <1> 	mov eax, [currentthread]
  7826 000060D8 40                  <1> 	inc eax
  7827 000060D9 A3[2D610000]        <1> 	mov [currentthread], eax
  7828 000060DE 6648                <1> 	dec ax
  7829 000060E0 C1E002              <1> 	shl eax, 2
  7830 000060E3 01C7                <1> 	add edi, eax
  7831 000060E5 8927                <1> 	mov [edi], esp
  7832 000060E7 81C704000000        <1> 	add edi, 4
  7833 000060ED 81FF[54CB2900]      <1> 	cmp edi, threadlistend
  7834 000060F3 0F830D000000        <1> 	jae near nookespthread
  7835 000060F9 8B07                <1> 	mov eax, [edi]
  7836 000060FB 3D00000000          <1> 	cmp eax, 0
  7837 00006100 0F8519000000        <1> 	jne near okespthread
  7838                              <1> nookespthread:
  7839 00006106 BF[54BB2900]        <1> 	mov edi, threadlist
  7840 0000610B 31C0                <1> 	xor eax, eax
  7841 0000610D A3[2D610000]        <1> 	mov [currentthread], eax
  7842 00006112 8B07                <1> 	mov eax, [edi]
  7843 00006114 3D00000000          <1> 	cmp eax, 0
  7844 00006119 0F8449FFFFFF        <1> 	je near nwcmdst
  7845                              <1> okespthread:
  7846 0000611F 89C4                <1> 	mov esp, eax
  7847 00006121 B020                <1> 	mov al, 0x20
  7848 00006123 E620                <1> 	out 0x20, al
  7849 00006125 61                  <1> 	popad
  7850 00006126 FB                  <1> 	sti
  7851 00006127 CF                  <1> 	iret
  7852                              <1> 
  7853                              <1> %endif
  7854 00006128 04000000            <1> 	lastthread dd 4
  7855 0000612C 00                  <1> 	threadson db 0
  7856 0000612D 00000000            <1> 	currentthread dd 0
  7857                                  %ifdef gui.included
  7858                                      %include "source/gui/gui.asm"
  7859                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7860 00006131 31C0                <1> 	xor eax, eax
  7861 00006133 31DB                <1> 	xor ebx, ebx
  7862 00006135 31C9                <1> 	xor ecx, ecx
  7863 00006137 31D2                <1> 	xor edx, edx
  7864 00006139 E820050000          <1> 	call guisetup
  7865                              <1> guiloop:
  7866 0000613E E85FEEFFFF          <1> 	call cursorgui
  7867                              <1> guistart:
  7868 00006143 E878F7FFFF          <1> 	call getkey
  7869 00006148 C605[A3720000]00    <1> 	mov byte [copygui], 0
  7870 0000614F EBF2                <1> 	jmp guistart
  7871                              <1> 	
  7872                              <1> %include "source/gui/bmp.asm"
  7873                              <2> 
  7874                              <2> showbmp:
  7875 00006151 668B06              <2> 	mov ax, [esi]
  7876 00006154 663D424D            <2> 	cmp ax, "BM"
  7877 00006158 0F85BB000000        <2> 	jne near endedbmp
  7878 0000615E 8B3D[C74E0000]      <2> 	mov edi, [physbaseptr]
  7879 00006164 6689D0              <2> 	mov ax, dx
  7880 00006167 6689CB              <2> 	mov bx, cx
  7881 0000616A 31C9                <2> 	xor ecx, ecx
  7882 0000616C 31D2                <2> 	xor edx, edx
  7883 0000616E 6689D9              <2> 	mov cx, bx
  7884 00006171 6689C2              <2> 	mov dx, ax
  7885 00006174 01D7                <2> 	add edi, edx
  7886 00006176 01D7                <2> 	add edi, edx
  7887 00006178 31D2                <2> 	xor edx, edx
  7888 0000617A 668B15[9F4F0000]    <2> 	mov dx, [resolutionx2]
  7889 00006181 034E16              <2> 	add ecx, [esi + 22]
  7890                              <2> bmplocloop:
  7891 00006184 52                  <2> 	push edx
  7892 00006185 31C0                <2> 	xor eax, eax
  7893 00006187 6689D0              <2> 	mov ax, dx
  7894 0000618A F7E1                <2> 	mul ecx
  7895 0000618C 5A                  <2> 	pop edx
  7896 0000618D 663B0D[B34E0000]    <2> 	cmp cx, [resolutiony]
  7897 00006194 7609                <2> 	jbe .nofixy
  7898 00006196 31C9                <2> 	xor ecx, ecx
  7899 00006198 668B0D[B34E0000]    <2> 	mov cx, [resolutiony]
  7900                              <2> .nofixy:
  7901 0000619F 01C7                <2> 	add edi, eax
  7902 000061A1 8B5612              <2> 	mov edx, [esi + 18]
  7903 000061A4 8B4E16              <2> 	mov ecx, [esi + 22]
  7904 000061A7 8B460A              <2> 	mov eax, [esi + 10]
  7905 000061AA 8B5E02              <2> 	mov ebx, [esi + 2]
  7906 000061AD 01F3                <2> 	add ebx, esi
  7907 000061AF 891D[1F620000]      <2> 	mov [bmpend], ebx
  7908 000061B5 89D3                <2> 	mov ebx, edx
  7909 000061B7 01C6                <2> 	add esi, eax
  7910                              <2> ldxbmp2:
  7911 000061B9 31D2                <2> 	xor edx, edx
  7912 000061BB 668B15[B14E0000]    <2> 	mov dx, [resolutionx]
  7913 000061C2 39D3                <2> 	cmp ebx, edx
  7914 000061C4 7702                <2> 	ja ldxbmp
  7915 000061C6 89DA                <2> 	mov edx, ebx
  7916                              <2> ldxbmp:
  7917 000061C8 668B06              <2> 	mov ax, [esi]
  7918 000061CB 668907              <2> 	mov [edi], ax
  7919 000061CE 81C702000000        <2> 	add edi, 2
  7920 000061D4 81C602000000        <2> 	add esi, 2
  7921 000061DA 3B35[1F620000]      <2> 	cmp esi, [bmpend]
  7922 000061E0 7737                <2> 	ja endedbmp
  7923 000061E2 4A                  <2> 	dec edx
  7924 000061E3 81FA00000000        <2> 	cmp edx, 0
  7925 000061E9 77DD                <2> 	ja ldxbmp
  7926 000061EB 31D2                <2> 	xor edx, edx
  7927 000061ED 668B15[B14E0000]    <2> 	mov dx, [resolutionx]
  7928 000061F4 39D3                <2> 	cmp ebx, edx
  7929 000061F6 7610                <2> 	jbe .notover
  7930                              <2> .over:
  7931 000061F8 01DE                <2> 	add esi, ebx
  7932 000061FA 01DE                <2> 	add esi, ebx
  7933 000061FC 29D6                <2> 	sub esi, edx
  7934 000061FE 29D6                <2> 	sub esi, edx
  7935 00006200 01DF                <2> 	add edi, ebx
  7936 00006202 01DF                <2> 	add edi, ebx
  7937 00006204 29D7                <2> 	sub edi, edx
  7938 00006206 29D7                <2> 	sub edi, edx
  7939                              <2> .notover:
  7940 00006208 29DF                <2> 	sub edi, ebx
  7941 0000620A 29DF                <2> 	sub edi, ebx
  7942 0000620C 29D7                <2> 	sub edi, edx
  7943 0000620E 29D7                <2> 	sub edi, edx
  7944 00006210 49                  <2> 	dec ecx
  7945 00006211 81F900000000        <2> 	cmp ecx, 0
  7946 00006217 77A0                <2> 	ja ldxbmp2
  7947                              <2> endedbmp:
  7948 00006219 E801010000          <2> 	call switchmousepos2
  7949 0000621E C3                  <2> 	ret
  7950                              <2> 	
  7951 0000621F 00000000            <2> 	bmpend dd 0
  7952                              <1> %include "source/gui/cursor.asm"
  7953                              <2> clearmousecursor:
  7954 00006223 BE[8A650000]        <2> 		mov esi, background
  7955 00006228 8B3D[C74E0000]      <2> 		mov edi, [physbaseptr]
  7956 0000622E 31D2                <2> 		xor edx, edx
  7957 00006230 31C9                <2> 		xor ecx, ecx
  7958 00006232 668B15[8C510000]    <2> 		mov dx, [lastmouseposition]
  7959 00006239 668B0D[8E510000]    <2> 		mov cx, [lastmouseposition + 2]
  7960 00006240 01D7                <2> 		add edi, edx
  7961 00006242 31D2                <2> 		xor edx, edx
  7962 00006244 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  7963 0000624B 81F900000000        <2> 		cmp ecx, 0
  7964 00006251 7408                <2> 		je .nomul
  7965 00006253 52                  <2> 		push edx
  7966 00006254 89D0                <2> 		mov eax, edx
  7967 00006256 F7E1                <2> 		mul ecx
  7968 00006258 01C7                <2> 		add edi, eax
  7969 0000625A 5A                  <2> 		pop edx
  7970                              <2> .nomul:
  7971                              <2> %ifdef 	gui.background
  7972 0000625B 813D[5C650000]0000- <2> 		cmp dword [backgroundimage], 0
  7973 00006263 0000                <2>
  7974 00006265 7438                <2> 		je .noyclr
  7975 00006267 8B35[5C650000]      <2> 		mov esi, [backgroundimage]
  7976 0000626D 2B3D[C74E0000]      <2> 		sub edi, [physbaseptr]
  7977 00006273 01FE                <2> 		add esi, edi
  7978 00006275 033D[C74E0000]      <2> 		add edi, [physbaseptr]
  7979                              <2> .backlp:
  7980 0000627B 31DB                <2> 		xor ebx, ebx
  7981                              <2> .noyback:
  7982 0000627D 8B041E              <2> 		mov eax, [esi + ebx]
  7983 00006280 89041F              <2> 		mov [edi + ebx], eax
  7984 00006283 81C304000000        <2> 		add ebx, 4
  7985 00006289 81FB10000000        <2> 		cmp ebx, 16
  7986 0000628F 75EC                <2> 		jne .noyback
  7987 00006291 01D7                <2> 		add edi, edx
  7988 00006293 01D6                <2> 		add esi, edx
  7989 00006295 6641                <2> 		inc cx
  7990 00006297 6681F91000          <2> 		cmp cx, 16
  7991 0000629C 72DD                <2> 		jb .backlp
  7992 0000629E C3                  <2> 		ret
  7993                              <2> %endif
  7994                              <2> .noyclr:
  7995 0000629F 668B06              <2> 		mov ax, [esi]
  7996 000062A2 C1C010              <2> 		rol eax, 16
  7997 000062A5 668B06              <2> 		mov ax, [esi]
  7998 000062A8 8907                <2> 		mov [edi], eax
  7999 000062AA 894704              <2> 		mov [edi + 4], eax
  8000 000062AD 894708              <2> 		mov [edi + 8], eax
  8001 000062B0 89470C              <2> 		mov [edi + 12], eax
  8002 000062B3 01D7                <2> 		add edi, edx
  8003 000062B5 6641                <2> 		inc cx
  8004 000062B7 6681F91000          <2> 		cmp cx, 16
  8005 000062BC 72E1                <2> 		jb .noyclr
  8006 000062BE C3                  <2> 		ret
  8007                              <2> 
  8008                              <2> switchmousepos:		;;switch were the mouse is located
  8009 000062BF BE[03D52800]        <2> 		mov esi, mousecolorbuf
  8010 000062C4 8B3D[C74E0000]      <2> 		mov edi, [physbaseptr]
  8011 000062CA 31D2                <2> 		xor edx, edx
  8012 000062CC 31C9                <2> 		xor ecx, ecx
  8013 000062CE 668B15[8C510000]    <2> 		mov dx, [lastmouseposition]
  8014 000062D5 668B0D[8E510000]    <2> 		mov cx, [lastmouseposition + 2]
  8015 000062DC 01D7                <2> 		add edi, edx
  8016 000062DE 31D2                <2> 		xor edx, edx
  8017 000062E0 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8018 000062E7 6681F90000          <2> 		cmp cx, 0
  8019 000062EC 740B                <2> 		je noswmsy
  8020 000062EE 01D7                <2> swmsy:		add edi, edx
  8021 000062F0 6649                <2> 		dec cx
  8022 000062F2 6681F90000          <2> 		cmp cx, 0
  8023 000062F7 75F5                <2> 		jne swmsy
  8024 000062F9 8B06                <2> noswmsy:	mov eax, [esi]
  8025 000062FB 8B5E04              <2> 		mov ebx, [esi + 4]
  8026 000062FE 8907                <2> 		mov [edi], eax
  8027 00006300 895F04              <2> 		mov [edi + 4], ebx
  8028 00006303 8B4608              <2> 		mov eax, [esi + 8]
  8029 00006306 8B5E0C              <2> 		mov ebx, [esi + 12]
  8030 00006309 894708              <2> 		mov [edi + 8], eax
  8031 0000630C 895F0C              <2> 		mov [edi + 12], ebx
  8032 0000630F 01D7                <2> 		add edi, edx
  8033 00006311 81C610000000        <2> 		add esi, 16
  8034 00006317 81FE[03D62800]      <2> 		cmp esi, mcolorend
  8035 0000631D 72DA                <2> 		jb noswmsy
  8036                              <2> 		
  8037                              <2> switchmousepos2:
  8038 0000631F BE[03D52800]        <2> 		mov esi, mousecolorbuf
  8039 00006324 8B3D[C74E0000]      <2> 		mov edi, [physbaseptr]
  8040 0000632A 31D2                <2> 		xor edx, edx
  8041 0000632C 31C9                <2> 		xor ecx, ecx
  8042 0000632E 668B15[90510000]    <2> 		mov dx, [mousecursorposition]
  8043 00006335 668B0D[92510000]    <2> 		mov cx, [mousecursorposition + 2]
  8044 0000633C 01D7                <2> 		add edi, edx
  8045 0000633E 31D2                <2> 		xor edx, edx
  8046 00006340 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8047 00006347 6681F90000          <2> 		cmp cx, 0
  8048 0000634C 740B                <2> 		je noswmsy2
  8049 0000634E 01D7                <2> swmsy2:		add edi, edx
  8050 00006350 6649                <2> 		dec cx
  8051 00006352 6681F90000          <2> 		cmp cx, 0
  8052 00006357 75F5                <2> 		jne swmsy2
  8053 00006359 8B07                <2> noswmsy2:	mov eax, [edi]
  8054 0000635B 8B5F04              <2> 		mov ebx, [edi + 4]
  8055 0000635E 8906                <2> 		mov [esi], eax
  8056 00006360 895E04              <2> 		mov [esi + 4], ebx
  8057 00006363 8B4708              <2> 		mov eax, [edi + 8]
  8058 00006366 8B5F0C              <2> 		mov ebx, [edi + 12]
  8059 00006369 894608              <2> 		mov [esi + 8], eax
  8060 0000636C 895E0C              <2> 		mov [esi + 12], ebx
  8061 0000636F 01D7                <2> 		add edi, edx
  8062 00006371 81C610000000        <2> 		add esi, 16
  8063 00006377 81FE[03D62800]      <2> 		cmp esi, mcolorend
  8064 0000637D 72DA                <2> 		jb noswmsy2
  8065 0000637F C3                  <2> 		ret
  8066                              <2> 		
  8067                              <1> %include "source/gui/icon.asm"
  8068 00006380 0000                <2> iconcolor dw 0
  8069                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8070 00006382 A2[DF7A0000]        <2> 		mov [iconselected], al
  8071 00006387 8025[DF7A0000]01    <2> 		and byte [iconselected], 1
  8072 0000638E B401                <2> 		mov ah, 1
  8073 00006390 E886140000          <2> 		call graphicsadd
  8074                              <2> 	showicon2:
  8075 00006395 8B3D[C74E0000]      <2> 		mov edi, [physbaseptr]
  8076 0000639B 6601D2              <2> 		add dx, dx
  8077 0000639E 663B15[9F4F0000]    <2> 		cmp dx, [resolutionx2]
  8078 000063A5 720C                <2> 		jb screenxgood
  8079 000063A7 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8080 000063AE 6681EA4000          <2> 		sub dx, 64
  8081                              <2> 	screenxgood:
  8082 000063B3 6681F90000          <2> 		cmp cx, 0
  8083 000063B8 742B                <2> 		je noscreenygoodchk
  8084 000063BA 663B0D[B34E0000]    <2> 		cmp cx, [resolutiony]
  8085 000063C1 720C                <2> 		jb screenygood
  8086 000063C3 668B0D[B34E0000]    <2> 		mov cx, [resolutiony]
  8087 000063CA 6681E92000          <2> 		sub cx, 32
  8088                              <2> 	screenygood:
  8089 000063CF 50                  <2> 		push eax
  8090 000063D0 52                  <2> 		push edx
  8091 000063D1 31C0                <2> 		xor eax, eax
  8092 000063D3 31DB                <2> 		xor ebx, ebx
  8093 000063D5 668B1D[9F4F0000]    <2> 		mov bx, [resolutionx2]
  8094 000063DC 6689C8              <2> 		mov ax, cx
  8095 000063DF F7E3                <2> 		mul ebx
  8096 000063E1 01C7                <2> 		add edi, eax
  8097 000063E3 5A                  <2> 		pop edx
  8098 000063E4 58                  <2> 		pop eax
  8099                              <2> 	noscreenygoodchk:
  8100 000063E5 31DB                <2> 		xor ebx, ebx
  8101 000063E7 6689D3              <2> 		mov bx, dx
  8102 000063EA 01DF                <2> 		add edi, ebx
  8103 000063EC 6631C9              <2> 		xor cx, cx
  8104 000063EF 668B06              <2> 		mov ax, [esi]
  8105 000063F2 81C602000000        <2> 		add esi, 2
  8106 000063F8 66A3[80630000]      <2> 		mov [iconcolor], ax
  8107                              <2> 	writeicon:
  8108 000063FE 8B06                <2> 		mov eax, [esi]
  8109 00006400 D1C0                <2> 		rol eax, 1
  8110 00006402 30C9                <2> 		xor cl, cl
  8111                              <2> 	writeiconline:
  8112 00006404 B201                <2> 		mov dl, 1
  8113 00006406 20C2                <2> 		and dl, al
  8114 00006408 3215[DF7A0000]      <2> 		xor dl, [iconselected]
  8115 0000640E 668B1D[8A650000]    <2> 		mov bx, [background]
  8116 00006415 66891F              <2> 		mov [edi], bx
  8117 00006418 80FA00              <2> 		cmp dl, 0
  8118 0000641B 740A                <2> 		je noiconline
  8119 0000641D 668B15[80630000]    <2> 		mov dx, [iconcolor]
  8120 00006424 668917              <2> 		mov [edi], dx
  8121                              <2> 	noiconline:
  8122 00006427 81C702000000        <2> 		add edi, 2
  8123 0000642D D1C0                <2> 		rol eax, 1
  8124 0000642F FEC1                <2> 		inc cl
  8125 00006431 80F920              <2> 		cmp cl, 32
  8126 00006434 72CE                <2> 		jb writeiconline
  8127 00006436 81C604000000        <2> 		add esi, 4
  8128 0000643C FEC5                <2> 		inc ch
  8129 0000643E 31D2                <2> 		xor edx, edx
  8130 00006440 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8131 00006447 01D7                <2> 		add edi, edx
  8132 00006449 81EF40000000        <2> 		sub edi, 64
  8133 0000644F 80FD20              <2> 		cmp ch, 32
  8134 00006452 72AA                <2> 		jb writeicon
  8135 00006454 31C0                <2> 		xor eax, eax
  8136 00006456 C3                  <2> 		ret
  8137                              <1> %include "source/gui/line.asm"
  8138                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8139 00006457 668935[05650000]    <2> 	mov [.color], si
  8140 0000645E C605[07650000]00    <2> 	mov byte [.steep], 0
  8141 00006465 C605[08650000]00    <2> 	mov byte [.yreversed], 0
  8142 0000646C E907000000          <2> 	jmp .notsteep
  8143                              <2> .steeploop:
  8144 00006471 C605[07650000]01    <2> 	mov byte [.steep], 1
  8145                              <2> .notsteep:
  8146 00006478 31FF                <2> 	xor edi, edi
  8147 0000647A 31F6                <2> 	xor esi, esi
  8148 0000647C 6639DA              <2> 	cmp dx, bx
  8149 0000647F 7705                <2> 	ja .noreversex
  8150 00006481 6687D3              <2> 	xchg dx, bx
  8151 00006484 6691                <2> 	xchg cx, ax
  8152                              <2> .noreversex:
  8153 00006486 6689D7              <2> 	mov di, dx
  8154 00006489 6629DF              <2> 	sub di, bx
  8155                              <2> 	
  8156 0000648C 6639C1              <2> 	cmp cx, ax
  8157 0000648F 720B                <2> 	jb .reversey
  8158 00006491 6689CE              <2> 	mov si, cx
  8159 00006494 6629C6              <2> 	sub si, ax
  8160 00006497 E90D000000          <2> 	jmp .normal
  8161                              <2> .reversey:
  8162 0000649C C605[08650000]01    <2> 	mov byte [.yreversed], 1
  8163 000064A3 6689C6              <2> 	mov si, ax
  8164 000064A6 6629CE              <2> 	sub si, cx	
  8165                              <2> .normal:
  8166 000064A9 6687CA              <2> 	xchg cx, dx
  8167 000064AC 6693                <2> 	xchg ax, bx
  8168 000064AE 6639FE              <2> 	cmp si, di
  8169 000064B1 77BE                <2> 	ja .steeploop
  8170 000064B3 6687CA              <2> 	xchg cx, dx
  8171 000064B6 6693                <2> 	xchg ax, bx
  8172                              <2> 	
  8173 000064B8 6691                <2> 	xchg ax, cx
  8174 000064BA 6687DA              <2> 	xchg bx, dx
  8175 000064BD 31C0                <2> 	xor eax, eax
  8176 000064BF 6689F8              <2> 	mov ax, di
  8177 000064C2 66D1E8              <2> 	shr ax, 1
  8178                              <2> .lp:
  8179 000064C5 60                  <2> 	pusha
  8180 000064C6 6687CA              <2> 	xchg cx, dx
  8181 000064C9 803D[07650000]01    <2> 	cmp byte [.steep], 1
  8182 000064D0 7403                <2> 	je .xchg
  8183 000064D2 6687D1              <2> 	xchg dx, cx
  8184                              <2> .xchg:
  8185 000064D5 668B35[05650000]    <2> 	mov si, [.color]
  8186 000064DC E8C0150000          <2> 	call putpixel
  8187 000064E1 61                  <2> 	popa
  8188 000064E2 6639F0              <2> 	cmp ax, si
  8189 000064E5 7313                <2> 	jae .noaddx
  8190 000064E7 803D[08650000]01    <2> 	cmp byte [.yreversed], 1
  8191 000064EE 7505                <2> 	jne .nodecy
  8192 000064F0 6681E90200          <2> 	sub cx, 2
  8193                              <2> .nodecy:
  8194 000064F5 6641                <2> 	inc cx
  8195 000064F7 6601F8              <2> 	add ax, di
  8196                              <2> .noaddx:
  8197 000064FA 6629F0              <2> 	sub ax, si
  8198                              <2> 	
  8199 000064FD 6642                <2> 	inc dx
  8200 000064FF 6639DA              <2> 	cmp dx, bx
  8201 00006502 72C1                <2> 	jb .lp
  8202                              <2> 	
  8203                              <2> .done:
  8204 00006504 C3                  <2> 	ret
  8205                              <2> 	
  8206 00006505 0000                <2> .color dw 0
  8207 00006507 00                  <2> .steep db 0
  8208 00006508 00                  <2> .yreversed db 0
  8209                              <1> %include "source/gui/refresh.asm"
  8210                              <2> guiclear:
  8211 00006509 8B3D[C74E0000]      <2> 	mov edi, [physbaseptr]
  8212 0000650F 668B15[B14E0000]    <2> 	mov dx, [resolutionx]
  8213 00006516 668B0D[B34E0000]    <2> 	mov cx, [resolutiony]
  8214                              <2> %ifdef gui.background
  8215 0000651D 813D[5C650000]0000- <2> 	cmp dword [backgroundimage], 0
  8216 00006525 0000                <2>
  8217 00006527 7437                <2> 	je guiclear.noback
  8218 00006529 8B35[5C650000]      <2> 		mov esi, [backgroundimage]
  8219                              <2> 	.lp:
  8220                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8221                              <2> 		;movdqa [edi], xmm0
  8222                              <2> 		;add esi, 16
  8223                              <2> 		;add edi, 16
  8224                              <2> 		;sub dx, 8
  8225 0000652F 8B06                <2> 		mov eax, [esi]
  8226 00006531 8907                <2> 		mov [edi], eax
  8227 00006533 81C604000000        <2> 		add esi, 4
  8228 00006539 81C704000000        <2> 		add edi, 4
  8229 0000653F 6681EA0200          <2> 		sub dx, 2
  8230 00006544 6681FA0000          <2> 		cmp dx, 0
  8231 00006549 77E4                <2> 		ja .lp
  8232 0000654B 6649                <2> 		dec cx
  8233 0000654D 668B15[B14E0000]    <2> 		mov dx, [resolutionx]
  8234 00006554 6681F90000          <2> 		cmp cx, 0
  8235 00006559 77D4                <2> 		ja .lp
  8236 0000655B C3                  <2> 		ret
  8237 0000655C 00000000            <2> 	backgroundimage dd 0
  8238                              <2> %endif
  8239                              <2> guiclear.noback:
  8240 00006560 A1[8A650000]        <2> 	mov eax, [background]
  8241                              <2> guiclearloop:
  8242 00006565 8907                <2> 	mov [edi], eax
  8243 00006567 81C704000000        <2> 	add edi, 4
  8244 0000656D 6681EA0200          <2> 	sub dx, 2
  8245 00006572 6681FA0000          <2> 	cmp dx, 0
  8246 00006577 77EC                <2> 	ja guiclearloop
  8247 00006579 6649                <2> 	dec cx
  8248 0000657B 668B15[B14E0000]    <2> 	mov dx, [resolutionx]
  8249 00006582 6681F90000          <2> 	cmp cx, 0
  8250 00006587 77DC                <2> 	ja guiclearloop
  8251 00006589 C3                  <2> 	ret
  8252                              <2> 
  8253 0000658A CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8254                              <2> 
  8255                              <2> reloadallgraphics:
  8256 0000658E BF[03BF0000]        <2> 		mov edi, graphicstable
  8257                              <2> reloadgraphicsloop:
  8258 00006593 8B7702              <2> 		mov esi, [edi + 2]
  8259 00006596 668B5706            <2> 		mov dx, [edi + 6]
  8260 0000659A 668B4F08            <2> 		mov cx, [edi + 8]
  8261 0000659E 668B07              <2> 		mov ax, [edi]
  8262 000065A1 668B5F0A            <2> 		mov bx, [edi + 10]
  8263 000065A5 893D[07780000]      <2> 		mov [grpctblpos], edi
  8264 000065AB 3B3D[AD720000]      <2> 		cmp edi, [dragging]
  8265 000065B1 741E                <2> 		je loadedgraphic
  8266 000065B3 663D0100            <2> 		cmp ax, 1
  8267 000065B7 0F8436000000        <2> 		je near icongraphic
  8268 000065BD 663D0200            <2> 		cmp ax, 2
  8269 000065C1 0F843C000000        <2> 		je near stringgraphic
  8270 000065C7 663D0300            <2> 		cmp ax, 3
  8271 000065CB 0F8416000000        <2> 		je near windowgraphic
  8272 000065D1 8B3D[07780000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8273 000065D7 81C710000000        <2> 		add edi, 16
  8274 000065DD 81FF[03C10000]      <2> 		cmp edi, graphicstableend
  8275 000065E3 732E                <2> 		jae donereloadgraphics
  8276 000065E5 EBAC                <2> 		jmp reloadgraphicsloop
  8277                              <2> windowgraphic:
  8278 000065E7 E83E080000          <2> 		call showwindow2
  8279 000065EC E8CAB7FFFF          <2> 		call cleardouble
  8280 000065F1 EBDE                <2> 		jmp loadedgraphic
  8281 000065F3 80E301              <2> icongraphic:	and bl, 1
  8282 000065F6 881D[DF7A0000]      <2> 		mov [iconselected], bl
  8283 000065FC E894FDFFFF          <2> 		call showicon2
  8284 00006601 EBCE                <2> 		jmp loadedgraphic
  8285 00006603 80E301              <2> stringgraphic:  and bl, 1
  8286 00006606 881D[A9720000]      <2> 		mov [mouseselecton], bl
  8287 0000660C E805050000          <2> 		call showstring2
  8288 00006611 EBBE                <2> 		jmp loadedgraphic
  8289                              <2> donereloadgraphics:
  8290 00006613 8B3D[AD720000]      <2> 		mov edi, [dragging]
  8291 00006619 81FF[03BF0000]      <2> 		cmp edi, graphicstable
  8292 0000661F 7226                <2> 		jb notcorrectdrag
  8293 00006621 668B07              <2> 		mov ax, [edi]
  8294 00006624 8B7702              <2> 		mov esi, [edi + 2]
  8295 00006627 668B5706            <2> 		mov dx, [edi + 6]
  8296 0000662B 668B4F08            <2> 		mov cx, [edi + 8]
  8297 0000662F 668B5F0A            <2> 		mov bx, [edi + 10]
  8298 00006633 663D0100            <2> 		cmp ax, 1
  8299 00006637 750F                <2> 		jne noticondragging
  8300 00006639 80E301              <2> 		and bl, 1
  8301 0000663C 881D[DF7A0000]      <2> 		mov [iconselected], bl
  8302 00006642 E84EFDFFFF          <2> 		call showicon2
  8303                              <2> notcorrectdrag:
  8304 00006647 C3                  <2> 		ret
  8305                              <2> 
  8306                              <2> 	noticondragging:
  8307 00006648 663D0200            <2> 		cmp ax, 2
  8308 0000664C 75F9                <2> 		jne notcorrectdrag
  8309 0000664E 80E301              <2> 		and bl, 1
  8310 00006651 881D[A9720000]      <2> 		mov [mouseselecton], bl
  8311 00006657 E8BA040000          <2> 		call showstring2
  8312 0000665C EBE9                <2> 		jmp notcorrectdrag
  8313                              <1> %include "source/gui/startup.asm"
  8314                              <2> guisetup:
  8315 0000665E E8A6FEFFFF          <2> 	call guiclear
  8316 00006663 C605[288E0000]01    <2> 	mov byte [guion], 1
  8317 0000666A C605[A9720000]00    <2> 	mov byte [mouseselecton], 0
  8318 00006671 31C0                <2> 	xor eax, eax
  8319 00006673 31DB                <2> 	xor ebx, ebx
  8320 00006675 31C9                <2> 	xor ecx, ecx
  8321 00006677 31D2                <2> 	xor edx, edx
  8322                              <2> 	
  8323 00006679 BE[3B680000]        <2> 	mov esi, pacmsg
  8324 0000667E 30E4                <2> 	xor ah, ah
  8325 00006680 B010                <2> 	mov al, 00010000b
  8326 00006682 31DB                <2> 	xor ebx, ebx
  8327 00006684 66B99000            <2> 	mov cx, 144
  8328 00006688 66BA0400            <2> 	mov dx, 4
  8329 0000668C E872040000          <2> 	call showstring
  8330                              <2> 	
  8331 00006691 BE[79680000]        <2> 	mov esi, interneticon
  8332 00006696 30E4                <2> 	xor ah, ah
  8333 00006698 B010                <2> 	mov al, 00010000b
  8334 0000669A BB[64670000]        <2> 	mov ebx, noie
  8335 0000669F 66B91800            <2> 	mov cx, 24
  8336 000066A3 66BA0400            <2> 	mov dx, 4
  8337 000066A7 E8D6FCFFFF          <2> 	call showicon
  8338                              <2> 	
  8339 000066AC BE[FB680000]        <2> 	mov esi, wordicon
  8340 000066B1 30E4                <2> 	xor ah, ah
  8341 000066B3 B010                <2> 	mov al, 00010000b
  8342 000066B5 31DB                <2> 	xor ebx, ebx
  8343 000066B7 66B91800            <2> 	mov cx, 24
  8344 000066BB 66BA3000            <2> 	mov dx, 48
  8345 000066BF E8BEFCFFFF          <2> 	call showicon
  8346                              <2> 	
  8347 000066C4 BE[7D690000]        <2> 	mov esi, pacmanpellet
  8348 000066C9 30E4                <2> 	xor ah, ah
  8349 000066CB B010                <2> 	mov al, 00010000b
  8350 000066CD 31DB                <2> 	xor ebx, ebx
  8351 000066CF 66B94000            <2> 	mov cx, 64
  8352 000066D3 66BA0400            <2> 	mov dx, 4
  8353 000066D7 E8A6FCFFFF          <2> 	call showicon
  8354                              <2> 	
  8355 000066DC BE[816A0000]        <2> 	mov esi, pacman
  8356 000066E1 30E4                <2> 	xor ah, ah
  8357 000066E3 B010                <2> 	mov al, 00010000b
  8358 000066E5 BB[4D670000]        <2> 	mov ebx, pacmannomnom
  8359 000066EA 66B94000            <2> 	mov cx, 64
  8360 000066EE 66BA3000            <2> 	mov dx, 48
  8361 000066F2 E88BFCFFFF          <2> 	call showicon
  8362                              <2> 	
  8363 000066F7 BE[FF690000]        <2> 	mov esi, ghostie
  8364 000066FC 30E4                <2> 	xor ah, ah
  8365 000066FE B010                <2> 	mov al, 00010000b
  8366 00006700 BB[36670000]        <2> 	mov ebx, boo
  8367 00006705 66B96C00            <2> 	mov cx, 108
  8368 00006709 66BA0400            <2> 	mov dx, 4
  8369 0000670D E870FCFFFF          <2> 	call showicon
  8370                              <2> 	
  8371 00006712 BE[1D680000]        <2> 	mov esi, start
  8372 00006717 668B0D[B34E0000]    <2> 	mov cx, [resolutiony]
  8373 0000671E 6681E91000          <2> 	sub cx, 16
  8374 00006723 66BA0200            <2> 	mov dx, 2
  8375 00006727 30E4                <2> 	xor ah, ah
  8376 00006729 B010                <2> 	mov al, 00010000b
  8377 0000672B BB[D9670000]        <2> 	mov ebx, winblows
  8378 00006730 E8CE030000          <2> 	call showstring
  8379 00006735 C3                  <2> 	ret
  8380                              <2> 
  8381                              <2> 	boo:
  8382 00006736 BE[36680000]        <2> 		mov esi, boomsg
  8383 0000673B 66BA6400            <2> 		mov dx, 100
  8384 0000673F 66B94001            <2> 		mov cx, 320
  8385 00006743 31DB                <2> 		xor ebx, ebx
  8386 00006745 6631C0              <2> 		xor ax, ax
  8387 00006748 E9B6030000          <2> 		jmp showstring
  8388                              <2> 
  8389                              <2> 	pacmannomnom:
  8390 0000674D BE[54680000]        <2> 		mov esi, pacnom
  8391 00006752 66BA8200            <2> 		mov dx, 130
  8392 00006756 66B93C00            <2> 		mov cx, 60
  8393 0000675A 31DB                <2> 		xor ebx, ebx
  8394 0000675C 6631C0              <2> 		xor ax, ax
  8395 0000675F E99F030000          <2> 		jmp showstring	
  8396                              <2> 	
  8397                              <2> 	noie:
  8398 00006764 66C705[63680000]80- <2> 		mov word [termwindow], 640
  8399 0000676C 02                  <2>
  8400 0000676D 66C705[65680000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8401 00006775 01                  <2>
  8402 00006776 BE[63680000]        <2> 		mov esi, termwindow
  8403 0000677B 66BA1000            <2> 		mov dx, 16
  8404 0000677F 66B91000            <2> 		mov cx, 16
  8405 00006783 31DB                <2> 		xor ebx, ebx
  8406 00006785 6631C0              <2> 		xor ax, ax
  8407 00006788 E8DF050000          <2> 		call showwindow
  8408 0000678D E9D9BFFFFF          <2> 		jmp os
  8409                              <2> 
  8410                              <2> 	gotomenuboot:
  8411 00006792 31D2                <2> 		xor edx, edx
  8412 00006794 31C9                <2> 		xor ecx, ecx
  8413 00006796 668B15[B14E0000]    <2> 		mov dx, [resolutionx]
  8414 0000679D 668B0D[B34E0000]    <2> 		mov cx, [resolutiony]
  8415 000067A4 66C1E904            <2> 		shr cx, 4
  8416 000067A8 6681E90100          <2> 		sub cx, 1
  8417 000067AD 66C1E104            <2> 		shl cx, 4
  8418 000067B1 668915[63680000]    <2> 		mov [termwindow], dx
  8419 000067B8 66890D[65680000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8420 000067BF BE[63680000]        <2> 		mov esi, termwindow
  8421 000067C4 6631D2              <2> 		xor dx, dx
  8422 000067C7 6631C9              <2> 		xor cx, cx
  8423 000067CA 31DB                <2> 		xor ebx, ebx
  8424 000067CC 6631C0              <2> 		xor ax, ax
  8425 000067CF E898050000          <2> 		call showwindow
  8426 000067D4 E992BFFFFF          <2> 		jmp os
  8427                              <2> 
  8428                              <2> 	winblows:
  8429 000067D9 BE[2C680000]        <2> 		mov esi, turnoffmsg
  8430 000067DE BB[134A0000]        <2> 		mov ebx, turnoff
  8431 000067E3 668B0D[B34E0000]    <2> 		mov cx, [resolutiony]
  8432 000067EA 6681E92000          <2> 		sub cx, 32
  8433 000067EF 6631D2              <2> 		xor dx, dx
  8434 000067F2 30E4                <2> 		xor ah, ah
  8435 000067F4 B010                <2> 		mov al, 00010000b
  8436 000067F6 E808030000          <2> 		call showstring
  8437 000067FB BE[23680000]        <2> 		mov esi, gotomenu
  8438 00006800 668B0D[B34E0000]    <2> 		mov cx, [resolutiony]
  8439 00006807 6681E93000          <2> 		sub cx, 48
  8440 0000680C 6631D2              <2> 		xor dx, dx
  8441 0000680F 30E4                <2> 		xor ah, ah
  8442 00006811 B010                <2> 		mov al, 00010000b
  8443 00006813 BB[92670000]        <2> 		mov ebx, gotomenuboot
  8444 00006818 E9E6020000          <2> 		jmp showstring
  8445                              <2> 		
  8446                              <2> 
  8447 0000681D 737461727400        <2> 	start	db "start",0
  8448 00006823 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8449 0000682C 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8450 00006835 00                  <2>
  8451 00006836 426F6F2100          <2> 	boomsg db "Boo!",0
  8452 0000683B 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8453 00006844 73206561737920746F- <2>
  8454 0000684D 20647261772E00      <2>
  8455 00006854 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8456 0000685D 6D206E6F6D00        <2>
  8457                              <2> 
  8458 00006863 20035802            <2> 	termwindow:	dw 800,600	;window size
  8459 00006867 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8460 0000686B [04D62800]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8461 0000686F [A8402900]          <2>
  8462 00006873 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8463                              <2> 	
  8464 00006873 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8465 00006873 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8466 00006873 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8467 00006873 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8468 00006873 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8469                              <1> %include "source/gui/text.asm"
  8470                              <2> 	showstring:
  8471 00006B03 A2[A9720000]        <2> 		mov [mouseselecton], al
  8472 00006B08 8025[A9720000]01    <2> 		and byte [mouseselecton], 1
  8473 00006B0F B402                <2> 		mov ah, 2
  8474 00006B11 E8050D0000          <2> 		call graphicsadd
  8475                              <2> 	showstring2:
  8476 00006B16 30E4                <2> 		xor ah, ah
  8477 00006B18 8A06                <2> 		mov al, [esi]
  8478 00006B1A 3C00                <2> 		cmp al, 0
  8479 00006B1C 741E                <2> 		je doneshowstring
  8480 00006B1E 46                  <2> 		inc esi
  8481 00006B1F 3CFF                <2> 		cmp al, 255
  8482 00006B21 74F3                <2> 		je showstring2
  8483 00006B23 56                  <2> 		push esi
  8484 00006B24 668B1D[446B0000]    <2> 		mov bx, [colorfont2]
  8485 00006B2B E825000000          <2> 		call showfontvesa
  8486 00006B30 3C0A                <2> 		cmp al, 10
  8487 00006B32 7405                <2> 		je noproceedshst
  8488 00006B34 6681C20800          <2> 		add dx, 8
  8489                              <2> 	noproceedshst:
  8490 00006B39 5E                  <2> 		pop esi
  8491 00006B3A EBDA                <2> 		jmp showstring2
  8492                              <2> 	doneshowstring:
  8493 00006B3C C605[A9720000]00    <2> 		mov byte [mouseselecton], 0
  8494 00006B43 C3                  <2> 		ret
  8495                              <2> 
  8496 00006B44 FFFF                <2> colorfont2 dw 0xFFFF
  8497 00006B46 00                  <2> colorcache db 0
  8498                              <2> 
  8499 00006B47 02                  <2> resolutionbytes db 2
  8500 00006B48 0000                <2> posxvesa dw 0
  8501 00006B4A 0000                <2> posyvesa dw 0
  8502 00006B4C FFFF                <2> colorfont dw 0xFFFF
  8503                              <2> savefontvesa:		;;same rules as showfontvesa
  8504 00006B4E C605[A8720000]01    <2> 	mov byte [savefonton], 1
  8505                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8506 00006B55 3CFF                <2> 	cmp al, 255
  8507 00006B57 7501                <2> 	jne nostopshowfont
  8508 00006B59 C3                  <2> 	ret
  8509                              <2> nostopshowfont:
  8510 00006B5A 66890D[4A6B0000]    <2> 	mov [posyvesa], cx
  8511 00006B61 3C0A                <2> 	cmp al, 10
  8512 00006B63 0F8424000000        <2> 	je near goodvesafontx
  8513 00006B69 31C9                <2> 	xor ecx, ecx
  8514 00006B6B 668B0D[9F4F0000]    <2> 	mov cx, [resolutionx2]
  8515 00006B72 6639CA              <2> 	cmp dx, cx
  8516 00006B75 7616                <2> 	jbe goodvesafontx
  8517 00006B77 6631D2              <2> 	xor dx, dx
  8518 00006B7A 668B0D[4A6B0000]    <2> 	mov cx, [posyvesa]
  8519 00006B81 6681C11000          <2> 	add cx, 16
  8520 00006B86 66890D[4A6B0000]    <2> 	mov [posyvesa], cx
  8521                              <2> goodvesafontx:
  8522 00006B8D 668B0D[4A6B0000]    <2> 	mov cx, [posyvesa]
  8523 00006B94 668915[486B0000]    <2> 	mov [posxvesa], dx
  8524 00006B9B 8B3D[C74E0000]      <2> 	mov edi, [physbaseptr]
  8525 00006BA1 66891D[4C6B0000]    <2> 	mov [colorfont], bx
  8526 00006BA8 31DB                <2> 	xor ebx, ebx
  8527 00006BAA 88C3                <2> 	mov bl, al
  8528 00006BAC 31C0                <2> 	xor eax, eax
  8529 00006BAE 88D8                <2> 	mov al, bl
  8530 00006BB0 6689D3              <2> 	mov bx, dx
  8531 00006BB3 89DA                <2> 	mov edx, ebx
  8532 00006BB5 31DB                <2> 	xor ebx, ebx
  8533 00006BB7 6681F90000          <2> 	cmp cx, 0
  8534 00006BBC 7414                <2> 	je vesaposloopdn
  8535 00006BBE 668B1D[9F4F0000]    <2> 	mov bx, [resolutionx2]
  8536                              <2> vesaposloop:
  8537 00006BC5 52                  <2> 	push edx
  8538 00006BC6 50                  <2> 	push eax
  8539 00006BC7 31C0                <2> 	xor eax, eax
  8540 00006BC9 6689C8              <2> 	mov ax, cx
  8541 00006BCC F7E3                <2> 	mul ebx
  8542 00006BCE 01C7                <2> 	add edi, eax
  8543 00006BD0 58                  <2> 	pop eax
  8544 00006BD1 5A                  <2> 	pop edx
  8545                              <2> vesaposloopdn:
  8546 00006BD2 01D7                <2> 	add edi, edx
  8547 00006BD4 BE[6C7C0000]        <2> 	mov esi, fonts
  8548                              <2> findfontvesa:
  8549 00006BD9 30E4                <2> 	xor ah, ah
  8550 00006BDB 3C0A                <2> 	cmp al, 10
  8551 00006BDD 0F84FE000000        <2> 	je near nwlinevesa
  8552 00006BE3 C1E004              <2> 	shl eax, 4
  8553 00006BE6 01C6                <2> 	add esi, eax
  8554 00006BE8 C1E804              <2> 	shr eax, 4
  8555 00006BEB 81FE[6C8C0000]      <2> 	cmp esi, fontend
  8556 00006BF1 0F83B9000000        <2> 	jae near donefontvesa
  8557 00006BF7 4E                  <2> 	dec esi
  8558                              <2> foundfontvesa:
  8559 00006BF8 46                  <2> 	inc esi
  8560 00006BF9 803D[A8720000]01    <2> 	cmp byte [savefonton], 1
  8561 00006C00 0F8401010000        <2> 	je near vesafontsaver
  8562 00006C06 30C9                <2> 	xor cl, cl
  8563 00006C08 8A06                <2> 	mov al, [esi]
  8564 00006C0A 668B15[9F4F0000]    <2> 	mov dx, [resolutionx2]
  8565 00006C11 662B15[486B0000]    <2> 	sub dx, [posxvesa]
  8566 00006C18 6681FA1000          <2> 	cmp dx, 16
  8567 00006C1D 7708                <2> 	ja paintfontvesa
  8568 00006C1F D0EA                <2> 	shr dl, 1
  8569 00006C21 8815[E06C0000]      <2> 	mov [charwidth], dl
  8570                              <2> paintfontvesa:
  8571 00006C27 B201                <2> 	mov dl, 1
  8572 00006C29 20C2                <2> 	and dl, al
  8573 00006C2B 803D[A7720000]01    <2> 	cmp byte [showcursorfonton], 1
  8574 00006C32 0F8435000000        <2> 	je near nodelpaintedfont
  8575 00006C38 803D[A7720000]02    <2> 	cmp byte [showcursorfonton], 2
  8576 00006C3F 0F8518000000        <2> 	jne near noswitchcursorfonton
  8577 00006C45 80FA00              <2> 	cmp dl, 0
  8578 00006C48 0F842E000000        <2> 	je near nopixelset
  8579 00006C4E 668B1D[4C6B0000]    <2> 	mov bx, [colorfont]
  8580 00006C55 66891F              <2> 	mov [edi], bx
  8581 00006C58 E91F000000          <2> 	jmp nopixelset
  8582                              <2> noswitchcursorfonton:
  8583 00006C5D 3215[A9720000]      <2> 	xor dl, [mouseselecton]
  8584 00006C63 668B1D[8A650000]    <2> 	mov bx, [background]
  8585 00006C6A 66891F              <2> 	mov [edi], bx
  8586                              <2> nodelpaintedfont:
  8587 00006C6D 80FA00              <2> 	cmp dl, 0
  8588 00006C70 740A                <2> 	je nopixelset
  8589 00006C72 668B15[4C6B0000]    <2> 	mov dx, [colorfont]
  8590 00006C79 668917              <2> 	mov [edi], dx
  8591                              <2> nopixelset:
  8592 00006C7C 81C702000000        <2> 	add edi, 2
  8593 00006C82 D0C0                <2> 	rol al, 1
  8594 00006C84 FEC1                <2> 	inc cl
  8595 00006C86 3A0D[E06C0000]      <2> 	cmp cl, [charwidth]
  8596 00006C8C 7299                <2> 	jb paintfontvesa
  8597 00006C8E FEC5                <2> 	inc ch
  8598 00006C90 31D2                <2> 	xor edx, edx
  8599 00006C92 668B15[9F4F0000]    <2> 	mov dx, [resolutionx2]
  8600 00006C99 01D7                <2> 	add edi, edx
  8601 00006C9B 31D2                <2> 	xor edx, edx
  8602 00006C9D 8A15[E06C0000]      <2> 	mov dl, [charwidth]
  8603 00006CA3 00D2                <2> 	add dl, dl
  8604 00006CA5 29D7                <2> 	sub edi, edx
  8605 00006CA7 80FD10              <2> 	cmp ch, 16
  8606 00006CAA 0F8248FFFFFF        <2> 	jb foundfontvesa
  8607                              <2> donefontvesa:
  8608 00006CB0 B208                <2> 	mov dl, 8
  8609 00006CB2 8815[E06C0000]      <2> 	mov [charwidth], dl
  8610 00006CB8 668B15[486B0000]    <2> 	mov dx, [posxvesa]
  8611 00006CBF 8A1D[E06C0000]      <2> 	mov bl, [charwidth]
  8612 00006CC5 30FF                <2> 	xor bh, bh
  8613 00006CC7 6601DA              <2> 	add dx, bx
  8614 00006CCA 668B1D[4C6B0000]    <2> 	mov bx, [colorfont]
  8615 00006CD1 668B0D[4A6B0000]    <2> 	mov cx, [posyvesa]
  8616 00006CD8 C605[A8720000]00    <2> 	mov byte [savefonton], 0
  8617 00006CDF C3                  <2> 	ret
  8618 00006CE0 08                  <2> charwidth db 8
  8619                              <2> nwlinevesa:
  8620 00006CE1 668B15[486B0000]    <2> 	mov dx, [posxvesa]
  8621 00006CE8 6631D2              <2> 	xor dx, dx
  8622 00006CEB 668915[486B0000]    <2> 	mov [posxvesa], dx
  8623 00006CF2 668B0D[4A6B0000]    <2> 	mov cx, [posyvesa]
  8624 00006CF9 6681C11000          <2> 	add cx, 16
  8625 00006CFE 66890D[4A6B0000]    <2> 	mov [posyvesa], cx
  8626 00006D05 EBA9                <2> 	jmp donefontvesa
  8627                              <2> vesafontsaver:
  8628 00006D07 30C0                <2> 	xor al, al
  8629 00006D09 30C9                <2> 	xor cl, cl
  8630                              <2> vesafontsaver2:
  8631 00006D0B 668B17              <2> 	mov dx, [edi]
  8632 00006D0E 663B15[4C6B0000]    <2> 	cmp dx, [colorfont]
  8633 00006D15 742F                <2> 	je colorfontmatch
  8634                              <2> donecolormatch:
  8635 00006D17 81C702000000        <2> 	add edi, 2
  8636 00006D1D D0C0                <2> 	rol al, 1
  8637 00006D1F FEC1                <2> 	inc cl
  8638 00006D21 80F908              <2> 	cmp cl, 8
  8639 00006D24 72E5                <2> 	jb vesafontsaver2
  8640 00006D26 8806                <2> 	mov [esi], al
  8641 00006D28 46                  <2> 	inc esi
  8642 00006D29 FEC5                <2> 	inc ch
  8643 00006D2B 31D2                <2> 	xor edx, edx
  8644 00006D2D 668B15[9F4F0000]    <2> 	mov dx, [resolutionx2]
  8645 00006D34 01D7                <2> 	add edi, edx
  8646 00006D36 81EF10000000        <2> 	sub edi, 16
  8647 00006D3C 80FD10              <2> 	cmp ch, 16
  8648 00006D3F 72C6                <2> 	jb vesafontsaver
  8649 00006D41 E96AFFFFFF          <2> 	jmp donefontvesa
  8650                              <2> colorfontmatch:
  8651 00006D46 0401                <2> 	add al, 1
  8652 00006D48 EBCD                <2> 	jmp donecolormatch
  8653                              <1> %include "source/gui/window.asm"
  8654 00006D4A 0000                <2> winvcopystx dw 0
  8655 00006D4C 0000                <2> winvcopysty dw 0
  8656 00006D4E 0000                <2> winvcopydx dw 0
  8657 00006D50 0000                <2> winvcopycx dw 0
  8658 00006D52 FFFF0000            <2> windowcolor dw 0xFFFF,0
  8659 00006D56 00000000            <2> windowbufloc: dd 0
  8660 00006D5A 00000000            <2> windowvideobuf dd 0
  8661 00006D5E 00000000            <2> windowvideobuf2 dd 0
  8662 00006D62 00000000            <2> windowinfobuf dd 0
  8663 00006D66 0000                <2> termcol dw 0
  8664 00006D68 00000000            <2> wincopyendpos dd 0
  8665                              <2> 
  8666                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  8667 00006D6C C605[E6210000]01    <2> 		mov byte [termguion], 1
  8668 00006D73 6681C11000          <2> 		add cx, 16
  8669 00006D78 668915[4A6D0000]    <2> 		mov [winvcopystx], dx
  8670 00006D7F 66890D[4C6D0000]    <2> 		mov [winvcopysty], cx
  8671 00006D86 8935[626D0000]      <2> 		mov [windowinfobuf], esi
  8672 00006D8C 668B16              <2> 		mov dx, [esi]
  8673 00006D8F 668B4E02            <2> 		mov cx, [esi + 2]
  8674 00006D93 31C0                <2> 		xor eax, eax
  8675 00006D95 31DB                <2> 		xor ebx, ebx
  8676 00006D97 6689D0              <2> 		mov ax, dx
  8677 00006D9A 6689CB              <2> 		mov bx, cx
  8678 00006D9D 66C1E803            <2> 		shr ax, 3
  8679 00006DA1 66C1EB04            <2> 		shr bx, 4
  8680 00006DA5 66A3[666D0000]      <2> 		mov [termcol], ax
  8681 00006DAB A2[AA230000]        <2> 		mov [charxy], al
  8682 00006DB0 881D[AB230000]      <2> 		mov [charxy + 1], bl
  8683 00006DB6 8B7E04              <2> 		mov edi, [esi + 4]
  8684 00006DB9 893D[526D0000]      <2> 		mov [windowcolor], edi
  8685 00006DBF 8B7E0C              <2> 		mov edi, [esi + 12]
  8686 00006DC2 893D[5E6D0000]      <2> 		mov [windowvideobuf2], edi
  8687 00006DC8 8B7E08              <2> 		mov edi, [esi + 8]
  8688 00006DCB 893D[5A6D0000]      <2> 		mov [windowvideobuf], edi
  8689 00006DD1 81FB00000000        <2> 		cmp ebx, 0
  8690 00006DD7 0F84A9040000        <2> 		je near donewincopynow	;AAAAAAAAA!!!!!
  8691                              <2> 	findendposwin:
  8692 00006DDD 01C7                <2> 		add edi, eax
  8693 00006DDF 01C7                <2> 		add edi, eax
  8694 00006DE1 4B                  <2> 		dec ebx
  8695 00006DE2 81FB00000000        <2> 		cmp ebx, 0
  8696 00006DE8 77F3                <2> 		ja findendposwin
  8697 00006DEA 893D[686D0000]      <2> 		mov [wincopyendpos], edi
  8698 00006DF0 31FF                <2> 		xor edi, edi
  8699 00006DF2 6631C0              <2> 		xor ax, ax
  8700 00006DF5 6631DB              <2> 		xor bx, bx
  8701 00006DF8 6601D2              <2> 		add dx, dx
  8702 00006DFB 668915[4E6D0000]    <2> 		mov [winvcopydx], dx
  8703 00006E02 66890D[506D0000]    <2> 		mov [winvcopycx], cx
  8704 00006E09 668B0D[4C6D0000]    <2> 		mov cx, [winvcopysty]
  8705 00006E10 6681E91000          <2> 		sub cx, 16
  8706 00006E15 668B15[4A6D0000]    <2> 		mov dx, [winvcopystx]
  8707 00006E1C C605[E7210000]00    <2> 		mov byte [termcopyon], 0
  8708 00006E23 B403                <2> 		mov ah, 3
  8709 00006E25 E8F1090000          <2> 		call graphicsadd
  8710                              <2> 	showwindow2:
  8711 00006E2A 6681C11000          <2> 		add cx, 16
  8712 00006E2F 668915[4A6D0000]    <2> 		mov [winvcopystx], dx
  8713 00006E36 66890D[4C6D0000]    <2> 		mov [winvcopysty], cx
  8714 00006E3D 668B16              <2> 		mov dx, [esi]
  8715 00006E40 668B4E02            <2> 		mov cx, [esi + 2]
  8716 00006E44 6601D2              <2> 		add dx, dx
  8717 00006E47 668915[4E6D0000]    <2> 		mov [winvcopydx], dx
  8718 00006E4E 66890D[506D0000]    <2> 		mov [winvcopycx], cx
  8719 00006E55 8B3D[566D0000]      <2> 		mov edi, [windowbufloc]
  8720 00006E5B 31D2                <2> 		xor edx, edx
  8721 00006E5D 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8722 00006E64 C1E204              <2> 		shl edx, 4
  8723 00006E67 29D7                <2> 		sub edi, edx
  8724 00006E69 803D[E7210000]00    <2> 		cmp byte [termcopyon], 0
  8725 00006E70 7538                <2> 		jne nocleartitlebarpos
  8726 00006E72 8B3D[C74E0000]      <2> 		mov edi, [physbaseptr]
  8727 00006E78 31D2                <2> 		xor edx, edx
  8728 00006E7A 668B15[4A6D0000]    <2> 		mov dx, [winvcopystx]
  8729 00006E81 01D7                <2> 		add edi, edx
  8730 00006E83 668B0D[4C6D0000]    <2> 		mov cx, [winvcopysty]
  8731 00006E8A 6681E91000          <2> 		sub cx, 16
  8732 00006E8F 6681F90000          <2> 		cmp cx, 0
  8733 00006E94 7414                <2> 		je nocleartitlebarpos
  8734                              <2> 	cleartitlebarpos:
  8735 00006E96 31D2                <2> 		xor edx, edx
  8736 00006E98 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8737 00006E9F 01D7                <2> 		add edi, edx
  8738 00006EA1 6649                <2> 		dec cx
  8739 00006EA3 6681F90000          <2> 		cmp cx, 0
  8740 00006EA8 75EC                <2> 		jne cleartitlebarpos
  8741                              <2> 	nocleartitlebarpos:
  8742 00006EAA 66B91000            <2> 		mov cx, 16
  8743 00006EAE 668B15[4E6D0000]    <2> 		mov dx, [winvcopydx]
  8744 00006EB5 6681F90000          <2> 		cmp cx, 0
  8745 00006EBA 0F8448000000        <2> 		je near canceltitlebarput
  8746 00006EC0 6681FA0000          <2> 		cmp dx, 0
  8747 00006EC5 0F843D000000        <2> 		je near canceltitlebarput
  8748                              <2> 	titlebarput:
  8749 00006ECB 66A1[526D0000]      <2> 		mov ax, [windowcolor]
  8750 00006ED1 668907              <2> 		mov [edi], ax
  8751 00006ED4 6681EA0200          <2> 		sub dx, 2
  8752 00006ED9 81C702000000        <2> 		add edi, 2
  8753 00006EDF 6681FA0000          <2> 		cmp dx, 0
  8754 00006EE4 75E5                <2> 		jne titlebarput
  8755 00006EE6 31D2                <2> 		xor edx, edx
  8756 00006EE8 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8757 00006EEF 6649                <2> 		dec cx
  8758 00006EF1 662B15[4E6D0000]    <2> 		sub dx, [winvcopydx]
  8759 00006EF8 01D7                <2> 		add edi, edx
  8760 00006EFA 668B15[4E6D0000]    <2> 		mov dx, [winvcopydx]
  8761 00006F01 6681F90000          <2> 		cmp cx, 0
  8762 00006F06 75C3                <2> 		jne titlebarput
  8763                              <2> 	canceltitlebarput:
  8764 00006F08 893D[566D0000]      <2> 		mov [windowbufloc], edi
  8765 00006F0E 803D[E7210000]02    <2> 		cmp byte [termcopyon], 2
  8766 00006F15 0F8465000000        <2> 		je near winvcpst
  8767 00006F1B 6631C0              <2> 		xor ax, ax
  8768 00006F1E 81C610000000        <2> 		add esi, 16
  8769 00006F24 668B15[4A6D0000]    <2> 		mov dx, [winvcopystx]
  8770 00006F2B 668B0D[4C6D0000]    <2> 		mov cx, [winvcopysty]
  8771 00006F32 6681E91000          <2> 		sub cx, 16
  8772 00006F37 668B1D[526D0000]    <2> 		mov bx, [windowcolor]
  8773 00006F3E C605[A9720000]01    <2> 		mov byte [mouseselecton], 1
  8774 00006F45 E8CCFBFFFF          <2> 		call showstring2
  8775 00006F4A B058                <2> 		mov al, "X"
  8776 00006F4C 30E4                <2> 		xor ah, ah
  8777 00006F4E 668B1D[526D0000]    <2> 		mov bx, [windowcolor]
  8778 00006F55 668B15[4A6D0000]    <2> 		mov dx, [winvcopystx]
  8779 00006F5C 668B0D[4C6D0000]    <2> 		mov cx, [winvcopysty]
  8780 00006F63 6681E91000          <2> 		sub cx, 16
  8781 00006F68 6681EA1400          <2> 		sub dx, 20
  8782 00006F6D 660315[4E6D0000]    <2> 		add dx, [winvcopydx]
  8783 00006F74 C605[A9720000]01    <2> 		mov byte [mouseselecton], 1
  8784 00006F7B E8D5FBFFFF          <2> 		call showfontvesa
  8785                              <2> 	winvcpst:
  8786 00006F80 803D[02780000]01    <2> 		cmp byte [windrag], 1
  8787 00006F87 0F8408030000        <2> 		je near forgetresetstuff
  8788 00006F8D 8B3D[566D0000]      <2> 		mov edi, [windowbufloc]
  8789 00006F93 E991000000          <2> 		jmp windowvideocopyset
  8790                              <2> 
  8791                              <2> 	windowvideocopy:
  8792 00006F98 8B35[626D0000]      <2> 		mov esi, [windowinfobuf]
  8793 00006F9E 668B16              <2> 		mov dx, [esi]
  8794 00006FA1 668B4E02            <2> 		mov cx, [esi + 2]
  8795 00006FA5 8B7E04              <2> 		mov edi, [esi + 4]
  8796 00006FA8 893D[526D0000]      <2> 		mov [windowcolor], edi
  8797 00006FAE 8B7E08              <2> 		mov edi, [esi + 8]
  8798 00006FB1 8B5E0C              <2> 		mov ebx, [esi + 12]
  8799 00006FB4 893D[5A6D0000]      <2> 		mov [windowvideobuf], edi
  8800 00006FBA 891D[5E6D0000]      <2> 		mov [windowvideobuf2], ebx
  8801 00006FC0 31C0                <2> 		xor eax, eax
  8802 00006FC2 31DB                <2> 		xor ebx, ebx
  8803 00006FC4 6689D0              <2> 		mov ax, dx
  8804 00006FC7 6689CB              <2> 		mov bx, cx
  8805 00006FCA 66C1E803            <2> 		shr ax, 3
  8806 00006FCE 66C1EB04            <2> 		shr bx, 4
  8807 00006FD2 66A3[666D0000]      <2> 		mov [termcol], ax
  8808 00006FD8 A2[AA230000]        <2> 		mov [charxy], al
  8809 00006FDD 881D[AB230000]      <2> 		mov [charxy + 1], bl
  8810 00006FE3 8B3D[566D0000]      <2> 		mov edi, [windowbufloc]
  8811 00006FE9 3B3D[C74E0000]      <2> 		cmp edi, [physbaseptr]
  8812 00006FEF 0F8334000000        <2> 		jae near windowvideocopyset
  8813 00006FF5 31C9                <2> 		xor ecx, ecx
  8814 00006FF7 31D2                <2> 		xor edx, edx
  8815 00006FF9 668B15[4A6D0000]    <2> 		mov dx, [winvcopystx]
  8816 00007000 668B0D[4C6D0000]    <2> 		mov cx, [winvcopysty]
  8817 00007007 8B3D[C74E0000]      <2> 		mov edi, [physbaseptr]
  8818 0000700D 01D7                <2> 		add edi, edx
  8819 0000700F 81F900000000        <2> 		cmp ecx, 0
  8820 00007015 7412                <2> 		je windowvideocopyset
  8821                              <2> 	yrescopylp:
  8822 00007017 31C0                <2> 		xor eax, eax
  8823 00007019 66A1[9F4F0000]      <2> 		mov ax, [resolutionx2]
  8824 0000701F F7E1                <2> 		mul ecx
  8825 00007021 01C7                <2> 		add edi, eax
  8826 00007023 893D[566D0000]      <2> 		mov [windowbufloc], edi
  8827                              <2> 	windowvideocopyset:
  8828 00007029 6631C9              <2> 		xor cx, cx
  8829 0000702C 6649                <2> 		dec cx
  8830 0000702E 66890D[9D720000]    <2> 		mov [charposline], cx
  8831 00007035 89FE                <2> 		mov esi, edi
  8832 00007037 81EE10000000        <2> 		sub esi, 16
  8833 0000703D 31D2                <2> 		xor edx, edx
  8834 0000703F 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8835 00007046 C1E204              <2> 		shl edx, 4
  8836 00007049 01D6                <2> 		add esi, edx
  8837 0000704B 8B3D[5A6D0000]      <2> 		mov edi, [windowvideobuf]
  8838 00007051 81EF02000000        <2> 		sub edi, 2
  8839 00007057 893D[9F720000]      <2> 		mov [charposvbuf], edi
  8840 0000705D E919010000          <2> 		jmp nextcharwin
  8841                              <2> 	win.write:	;adjusted this to use alpha
  8842                              <2> 				;5R, 6G, 5B
  8843                              <2> %ifdef gui.alphablending
  8844 00007062 56                  <2> 		push esi
  8845 00007063 6653                <2> 		push bx
  8846 00007065 6651                <2> 		push cx
  8847 00007067 6652                <2> 		push dx
  8848                              <2> %ifdef gui.background
  8849 00007069 89FE                <2> 		mov esi, edi
  8850 0000706B 2B35[C74E0000]      <2> 		sub esi, [physbaseptr]
  8851 00007071 0335[5C650000]      <2> 		add esi, [backgroundimage]
  8852 00007077 813D[5C650000]0000- <2> 		cmp dword [backgroundimage], 0
  8853 0000707F 0000                <2>
  8854 00007081 7505                <2> 		jne .red
  8855                              <2> %endif
  8856 00007083 BE[8A650000]        <2> 		mov esi, background
  8857                              <2> 	.red:
  8858 00007088 668B0E              <2> 		mov cx, [esi]
  8859 0000708B 66C1E90B            <2> 		shr cx, 11
  8860 0000708F 6689C3              <2> 		mov bx, ax
  8861 00007092 66C1EB0B            <2> 		shr bx, 11
  8862 00007096 6601D9              <2> 		add cx, bx
  8863 00007099 6601D9              <2> 		add cx, bx
  8864 0000709C 6601D9              <2> 		add cx, bx
  8865 0000709F 66C1E902            <2> 		shr cx, 2
  8866 000070A3 66C1E10B            <2> 		shl cx, 11
  8867 000070A7 6689CA              <2> 		mov dx, cx
  8868                              <2> 	.green:
  8869 000070AA 668B0E              <2> 		mov cx, [esi]
  8870 000070AD 66C1E105            <2> 		shl cx, 5
  8871 000070B1 66C1E90A            <2> 		shr cx, 10
  8872 000070B5 6689C3              <2> 		mov bx, ax
  8873 000070B8 66C1E305            <2> 		shl bx, 5
  8874 000070BC 66C1EB0A            <2> 		shr bx, 10
  8875 000070C0 6601D9              <2> 		add cx, bx
  8876 000070C3 6601D9              <2> 		add cx, bx
  8877 000070C6 6601D9              <2> 		add cx, bx
  8878 000070C9 66C1E902            <2> 		shr cx, 2
  8879 000070CD 66C1E105            <2> 		shl cx, 5
  8880 000070D1 6601CA              <2> 		add dx, cx
  8881                              <2> 	.blue:
  8882 000070D4 668B0E              <2> 		mov cx, [esi]
  8883 000070D7 66C1E10B            <2> 		shl cx, 11
  8884 000070DB 66C1E90B            <2> 		shr cx, 11
  8885 000070DF 6689C3              <2> 		mov bx, ax
  8886 000070E2 66C1E30B            <2> 		shl bx, 11
  8887 000070E6 66C1EB0B            <2> 		shr bx, 11
  8888 000070EA 6601D9              <2> 		add cx, bx
  8889 000070ED 6601D9              <2> 		add cx, bx
  8890 000070F0 6601D9              <2> 		add cx, bx
  8891 000070F3 66C1E902            <2> 		shr cx, 2
  8892 000070F7 6601CA              <2> 		add dx, cx
  8893 000070FA 668917              <2> 		mov [edi], dx
  8894 000070FD 665A                <2> 		pop dx
  8895 000070FF 6659                <2> 		pop cx
  8896 00007101 665B                <2> 		pop bx
  8897 00007103 5E                  <2> 		pop esi
  8898                              <2> %else
  8899                              <2> 		mov [edi], ax
  8900                              <2> %endif
  8901 00007104 C3                  <2> 		ret
  8902                              <2> 	copywindow:
  8903 00007105 B201                <2> 		mov dl, 1
  8904 00007107 D0C6                <2> 		rol dh, 1
  8905 00007109 20F2                <2> 		and dl, dh
  8906 0000710B 803D[466B0000]10    <2> 		cmp byte [colorcache], 0x10
  8907 00007112 7320                <2> 		jae switchwincolors
  8908 00007114 66A1[546D0000]      <2> 		mov ax, [windowcolor + 2]
  8909 0000711A E843FFFFFF          <2> 		call win.write
  8910 0000711F 80FA00              <2> 		cmp dl, 0
  8911 00007122 742B                <2> 		je nowritewin
  8912 00007124 66A1[526D0000]      <2> 		mov ax, [windowcolor]
  8913 0000712A E833FFFFFF          <2> 		call win.write
  8914 0000712F E91B000000          <2> 		jmp nowritewin
  8915                              <2> 	switchwincolors:
  8916 00007134 66A1[526D0000]      <2> 		mov ax, [windowcolor]
  8917 0000713A E823FFFFFF          <2> 		call win.write
  8918 0000713F 80FA00              <2> 		cmp dl, 0
  8919 00007142 740B                <2> 		je nowritewin
  8920 00007144 66A1[546D0000]      <2> 		mov ax, [windowcolor + 2]
  8921 0000714A E813FFFFFF          <2> 		call win.write
  8922                              <2> 	nowritewin:
  8923 0000714F 81C702000000        <2> 		add edi, 2
  8924 00007155 FEC1                <2> 		inc cl
  8925 00007157 80F908              <2> 		cmp cl, 8
  8926 0000715A 75A9                <2> 		jne copywindow
  8927 0000715C 6643                <2> 		inc bx
  8928 0000715E 30C9                <2> 		xor cl, cl
  8929 00007160 31D2                <2> 		xor edx, edx
  8930 00007162 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8931 00007169 01D6                <2> 		add esi, edx
  8932 0000716B 89F7                <2> 		mov edi, esi
  8933 0000716D 678AB7[6C7C]        <2> 		mov dh, [fonts + bx]
  8934 00007172 D0CE                <2> 		ror dh, 1
  8935 00007174 FEC5                <2> 		inc ch
  8936 00007176 80FD10              <2> 		cmp ch, 16
  8937 00007179 758A                <2> 		jne copywindow
  8938                              <2> 	nextcharwin:
  8939 0000717B 6631C9              <2> 		xor cx, cx
  8940 0000717E 8B3D[9F720000]      <2> 		mov edi, [charposvbuf]
  8941 00007184 81C702000000        <2> 		add edi, 2
  8942 0000718A 3B3D[686D0000]      <2> 		cmp edi, [wincopyendpos]
  8943 00007190 0F83F0000000        <2> 		jae near donewincopynow
  8944 00007196 8A7F01              <2> 		mov bh, [edi + 1]
  8945 00007199 80FF00              <2> 		cmp bh, 0
  8946 0000719C 7505                <2> 		jne nofixcolorwin
  8947 0000719E B707                <2> 		mov bh, 7
  8948 000071A0 887F01              <2> 		mov [edi + 1], bh
  8949                              <2> 	nofixcolorwin:
  8950 000071A3 883D[466B0000]      <2> 		mov [colorcache], bh
  8951 000071A9 8A1F                <2> 		mov bl, [edi]
  8952 000071AB 893D[9F720000]      <2> 		mov [charposvbuf], edi
  8953 000071B1 813D[5E6D0000]0000- <2> 		cmp dword [windowvideobuf2], 0
  8954 000071B9 0000                <2>
  8955 000071BB 7459                <2> 		je noskipcharcopy
  8956 000071BD 2B3D[5A6D0000]      <2> 		sub edi, [windowvideobuf]
  8957 000071C3 033D[5E6D0000]      <2> 		add edi, [windowvideobuf2]
  8958 000071C9 8A6701              <2> 		mov ah, [edi + 1]
  8959 000071CC 8A07                <2> 		mov al, [edi]
  8960 000071CE 6639D8              <2> 		cmp ax, bx
  8961 000071D1 7543                <2> 		jne noskipcharcopy
  8962                              <2> 	skipcharcopy:
  8963 000071D3 81C610000000        <2> 		add esi, 16
  8964 000071D9 668B0D[9D720000]    <2> 		mov cx, [charposline]
  8965 000071E0 6641                <2> 		inc cx
  8966 000071E2 66890D[9D720000]    <2> 		mov [charposline], cx
  8967 000071E9 663B0D[666D0000]    <2> 		cmp cx, [termcol]
  8968 000071F0 7289                <2> 		jb nextcharwin
  8969 000071F2 6631C9              <2> 		xor cx, cx
  8970 000071F5 66890D[9D720000]    <2> 		mov [charposline], cx
  8971 000071FC 31D2                <2> 		xor edx, edx
  8972 000071FE 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8973 00007205 C1E204              <2> 		shl edx, 4
  8974 00007208 662B15[4E6D0000]    <2> 		sub dx, [winvcopydx]
  8975 0000720F 01D6                <2> 		add esi, edx
  8976 00007211 E965FFFFFF          <2> 		jmp nextcharwin
  8977                              <2> 	noskipcharcopy:
  8978 00007216 881F                <2> 		mov [edi], bl
  8979 00007218 887F01              <2> 		mov [edi + 1], bh
  8980 0000721B 8B3D[9F720000]      <2> 		mov edi, [charposvbuf]
  8981 00007221 30FF                <2> 		xor bh, bh
  8982 00007223 66C1E304            <2> 		shl bx, 4
  8983 00007227 31D2                <2> 		xor edx, edx
  8984 00007229 668B15[9F4F0000]    <2> 		mov dx, [resolutionx2]
  8985 00007230 C1E204              <2> 		shl edx, 4
  8986 00007233 29D6                <2> 		sub esi, edx
  8987 00007235 81C610000000        <2> 		add esi, 16
  8988 0000723B 89F7                <2> 		mov edi, esi
  8989 0000723D 668B0D[9D720000]    <2> 		mov cx, [charposline]
  8990 00007244 6641                <2> 		inc cx
  8991 00007246 663B0D[666D0000]    <2> 		cmp cx, [termcol]
  8992 0000724D 7316                <2> 		jae fixwindowcopy
  8993 0000724F 66890D[9D720000]    <2> 		mov [charposline], cx
  8994 00007256 6631C9              <2> 		xor cx, cx
  8995 00007259 678AB7[6C7C]        <2> 		mov dh, [fonts + bx]
  8996 0000725E D0CE                <2> 		ror dh, 1
  8997 00007260 E9A0FEFFFF          <2> 		jmp copywindow
  8998                              <2> fixwindowcopy:
  8999 00007265 6631C9              <2> 		xor cx, cx
  9000 00007268 66890D[9D720000]    <2> 		mov [charposline], cx
  9001 0000726F 662B15[4E6D0000]    <2> 		sub dx, [winvcopydx]
  9002 00007276 01D6                <2> 		add esi, edx
  9003 00007278 89F7                <2> 		mov edi, esi
  9004 0000727A 678AB7[6C7C]        <2> 		mov dh, [fonts + bx]
  9005 0000727F D0CE                <2> 		ror dh, 1
  9006 00007281 E97FFEFFFF          <2> 		jmp copywindow
  9007                              <2> donewincopynow:
  9008 00007286 803D[E7210000]01    <2> 		cmp byte [termcopyon], 1
  9009 0000728D 7506                <2> 		jne forgetresetstuff
  9010 0000728F E883B3FFFF          <2> 		call switchtermcursor
  9011 00007294 61                  <2> 		popa
  9012                              <2> forgetresetstuff:
  9013 00007295 C605[E7210000]00    <2> 		mov byte [termcopyon], 0
  9014 0000729C C3                  <2> 		ret
  9015                              <2> 		
  9016 0000729D 0000                <2> charposline dw 0
  9017 0000729F 00000000            <2> charposvbuf dw 0,0
  9018                              <1> 				
  9019 000072A3 00                  <1> copygui db 0
  9020 000072A4 00                  <1> graphicsset db 0
  9021 000072A5 0000                <1> graphicspos db 0,0
  9022 000072A7 00                  <1> showcursorfonton db 0
  9023 000072A8 00                  <1> savefonton db 0
  9024 000072A9 00                  <1> mouseselecton db 0
  9025                              <1> 
  9026 000072AA 00                  <1> pbutton db 0
  9027 000072AB 00                  <1> pLBUTTON db 0
  9028 000072AC 00                  <1> pRBUTTON db 0
  9029 000072AD 00000000            <1> dragging dw 0,0
  9030 000072B1 0000000000000000    <1> lastpos dw 0,0,0,0
  9031 000072B9 00000000            <1> colorbuf dw 0,0
  9032                              <1> 	
  9033                              <1> 	clickicon:
  9034 000072BD B001                <1> 		mov al, 1
  9035 000072BF A2[AA720000]        <1> 		mov [pbutton], al
  9036 000072C4 A0[AB720000]        <1> 		mov al, [pLBUTTON]
  9037 000072C9 2205[A1520000]      <1> 		and al, [LBUTTON]
  9038 000072CF 8A25[AC720000]      <1> 		mov ah, [pRBUTTON]
  9039 000072D5 2225[A2520000]      <1> 		and ah, [RBUTTON]
  9040 000072DB 08E0                <1> 		or al, ah
  9041 000072DD 3C00                <1> 		cmp al, 0
  9042 000072DF 741B                <1> 		je nodragclick
  9043 000072E1 813D[AD720000]0100- <1> 		cmp dword [dragging], 1
  9044 000072E9 0000                <1>
  9045 000072EB 732D                <1> 		jae dragclick
  9046 000072ED C705[AD720000]0100- <1> 		mov dword [dragging], 1
  9047 000072F5 0000                <1>
  9048 000072F7 E91E000000          <1> 		jmp dragclick
  9049                              <1> 	nodragclick:
  9050 000072FC C705[AD720000]0000- <1> 		mov dword [dragging], 0
  9051 00007304 0000                <1>
  9052 00007306 A0[A1520000]        <1> 		mov al, [LBUTTON]
  9053 0000730B A2[AB720000]        <1> 		mov [pLBUTTON], al
  9054 00007310 A0[A2520000]        <1> 		mov al, [RBUTTON]
  9055 00007315 A2[AC720000]        <1> 		mov [pRBUTTON], al
  9056                              <1> 	dragclick:
  9057 0000731A 6631C0              <1> 		xor ax, ax
  9058 0000731D BE[03BF0000]        <1> 		mov esi, graphicstable
  9059 00007322 C705[DB7A0000]0000- <1> 		mov dword [codepointer], 0
  9060 0000732A 0000                <1>
  9061                              <1> 	clicon2:
  9062 0000732C 31D2                <1> 		xor edx, edx
  9063 0000732E 31C9                <1> 		xor ecx, ecx
  9064 00007330 66813E0100          <1> 		cmp word [esi], 1
  9065 00007335 0F841B000000        <1> 		je near iconselect
  9066 0000733B 66813E0200          <1> 		cmp word [esi], 2
  9067 00007340 0F8472010000        <1> 		je near textselected
  9068 00007346 66813E0300          <1> 		cmp word [esi], 3
  9069 0000734B 0F84C7020000        <1> 		je near windowselect
  9070 00007351 E908040000          <1> 		jmp nexticonsel
  9071                              <1> 	iconselect:
  9072 00007356 668B5606            <1> 		mov dx, [esi + 6]
  9073 0000735A 6689D0              <1> 		mov ax, dx
  9074 0000735D 668B4E08            <1> 		mov cx, [esi + 8]
  9075 00007361 6689CB              <1> 		mov bx, cx
  9076 00007364 6681C32000          <1> 		add bx, 32
  9077 00007369 6601D0              <1> 		add ax, dx
  9078 0000736C 813D[AD720000]0100- <1> 		cmp dword [dragging], 1
  9079 00007374 0000                <1>
  9080 00007376 746F                <1> 		je dragicon
  9081 00007378 813D[AD720000]0000- <1> 		cmp dword [dragging], 0
  9082 00007380 0000                <1>
  9083 00007382 7411                <1> 		je nodragiconcheck
  9084 00007384 3935[AD720000]      <1> 		cmp dword [dragging], esi
  9085 0000738A 0F85CE030000        <1> 		jne near nexticonsel
  9086 00007390 E952000000          <1> 		jmp dragicon
  9087                              <1> 	nodragiconcheck:
  9088 00007395 663905[90510000]    <1> 		cmp [mousecursorposition], ax
  9089 0000739C 0F82BC030000        <1> 		jb near nexticonsel
  9090 000073A2 66054000            <1> 		add ax, 64
  9091 000073A6 663905[90510000]    <1> 		cmp [mousecursorposition], ax
  9092 000073AD 0F87AB030000        <1> 		ja near nexticonsel
  9093 000073B3 6629D0              <1> 		sub ax, dx
  9094 000073B6 66390D[92510000]    <1> 		cmp [mousecursorposition + 2], cx
  9095 000073BD 0F829B030000        <1> 		jb near nexticonsel
  9096 000073C3 66391D[92510000]    <1> 		cmp [mousecursorposition + 2], bx
  9097 000073CA 0F878E030000        <1> 		ja near nexticonsel
  9098 000073D0 668B460A            <1> 		mov ax, [esi + 10]
  9099 000073D4 66250100            <1> 		and ax, 1
  9100 000073D8 663D0100            <1> 		cmp ax, 1
  9101 000073DC 0F84B6000000        <1> 		je near unselecticon
  9102 000073E2 E98D000000          <1> 		jmp nodragicon
  9103                              <1> 	dragicon:
  9104 000073E7 663905[8C510000]    <1> 		cmp [lastmouseposition], ax
  9105 000073EE 0F826A030000        <1> 		jb near nexticonsel
  9106 000073F4 66054000            <1> 		add ax, 64
  9107 000073F8 663905[8C510000]    <1> 		cmp [lastmouseposition], ax
  9108 000073FF 0F8759030000        <1> 		ja near nexticonsel
  9109 00007405 6629D0              <1> 		sub ax, dx
  9110 00007408 66390D[8E510000]    <1> 		cmp [lastmouseposition + 2], cx
  9111 0000740F 0F8249030000        <1> 		jb near nexticonsel
  9112 00007415 66391D[8E510000]    <1> 		cmp [lastmouseposition + 2], bx
  9113 0000741C 0F873C030000        <1> 		ja near nexticonsel
  9114 00007422 668B460A            <1> 		mov ax, [esi + 10]
  9115 00007426 2410                <1> 		and al, 00010000b
  9116 00007428 3C10                <1> 		cmp al, 00010000b
  9117 0000742A 7448                <1> 		je nodragicon
  9118 0000742C 8935[AD720000]      <1> 		mov [dragging], esi
  9119 00007432 66D1E2              <1> 		shl dx, 1
  9120 00007435 662B15[8C510000]    <1> 		sub dx, [lastmouseposition]
  9121 0000743C 660315[90510000]    <1> 		add dx, [mousecursorposition]
  9122 00007443 66D1EA              <1> 		shr dx, 1
  9123 00007446 66030D[92510000]    <1> 		add cx, [mousecursorposition + 2]
  9124 0000744D 662B0D[8E510000]    <1> 		sub cx, [lastmouseposition + 2]
  9125 00007454 663B15[9F4F0000]    <1> 		cmp dx, [resolutionx2]
  9126 0000745B 7607                <1> 		jbe chkyresdrgicn
  9127 0000745D 668B15[90510000]    <1> 		mov dx, [mousecursorposition]
  9128                              <1> 	chkyresdrgicn:
  9129 00007464 663B0D[B34E0000]    <1> 		cmp cx, [resolutiony]
  9130 0000746B 7607                <1> 		jbe nodragicon
  9131 0000746D 668B0D[92510000]    <1> 		mov cx, [mousecursorposition + 2]
  9132                              <1> 	nodragicon:
  9133 00007474 66814E0A0100        <1> 		or word [esi + 10], 1
  9134 0000747A 8B5E0C              <1> 		mov ebx, [esi + 12]
  9135 0000747D 668B460A            <1> 		mov ax, [esi + 10]
  9136 00007481 8B7602              <1> 		mov esi, [esi + 2]
  9137 00007484 C705[DB7A0000]0000- <1> 		mov dword [codepointer], 0
  9138 0000748C 0000                <1>
  9139 0000748E E8EFEEFFFF          <1> 		call showicon
  9140 00007493 E9DF020000          <1> 		jmp doneiconsel
  9141                              <1> 	unselecticon:
  9142 00007498 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9143 0000749E 8B5E0C              <1> 		mov ebx, [esi + 12]
  9144 000074A1 668B460A            <1> 		mov ax, [esi + 10]
  9145 000074A5 8B7602              <1> 		mov esi, [esi + 2]
  9146 000074A8 891D[DB7A0000]      <1> 		mov [codepointer], ebx
  9147 000074AE E8CFEEFFFF          <1> 		call showicon
  9148 000074B3 E9BF020000          <1> 		jmp doneiconsel
  9149                              <1> 	textselected:
  9150 000074B8 8B5E02              <1> 		mov ebx, [esi + 2]
  9151 000074BB 668B5606            <1> 		mov dx, [esi + 6]
  9152 000074BF 6689D0              <1> 		mov ax, dx
  9153 000074C2 668B4E08            <1> 		mov cx, [esi + 8]
  9154                              <1> 	lengthtesttext:
  9155 000074C6 803B00              <1> 		cmp byte [ebx], 0
  9156 000074C9 7407                <1> 		je donetesttextlength
  9157 000074CB 43                  <1> 		inc ebx
  9158 000074CC 66051000            <1> 		add ax, 16
  9159 000074D0 EBF4                <1> 		jmp lengthtesttext
  9160                              <1> 	donetesttextlength:
  9161 000074D2 6689CB              <1> 		mov bx, cx
  9162 000074D5 6681C30F00          <1> 		add bx, 15
  9163 000074DA 813D[AD720000]0100- <1> 		cmp dword [dragging], 1
  9164 000074E2 0000                <1>
  9165 000074E4 7468                <1> 		je dragtext
  9166 000074E6 813D[AD720000]0000- <1> 		cmp dword [dragging], 0
  9167 000074EE 0000                <1>
  9168 000074F0 7411                <1> 		je nodragtextcheck
  9169 000074F2 3935[AD720000]      <1> 		cmp dword [dragging], esi
  9170 000074F8 0F8560020000        <1> 		jne near nexticonsel
  9171 000074FE E94B000000          <1> 		jmp dragtext
  9172                              <1> 	nodragtextcheck:
  9173 00007503 663915[90510000]    <1> 		cmp [mousecursorposition], dx
  9174 0000750A 0F824E020000        <1> 		jb near nexticonsel
  9175 00007510 663905[90510000]    <1> 		cmp [mousecursorposition], ax
  9176 00007517 0F8741020000        <1> 		ja near nexticonsel
  9177 0000751D 66390D[92510000]    <1> 		cmp [mousecursorposition + 2], cx
  9178 00007524 0F8234020000        <1> 		jb near nexticonsel
  9179 0000752A 66391D[92510000]    <1> 		cmp [mousecursorposition + 2], bx
  9180 00007531 0F8727020000        <1> 		ja near nexticonsel
  9181 00007537 668B460A            <1> 		mov ax, [esi + 10]
  9182 0000753B 66250100            <1> 		and ax, 1
  9183 0000753F 663D0100            <1> 		cmp ax, 1
  9184 00007543 0F84AB000000        <1> 		je near unselecttext
  9185 00007549 E986000000          <1> 		jmp nodragtext
  9186                              <1> 	dragtext:
  9187 0000754E 663915[8C510000]    <1> 		cmp [lastmouseposition], dx
  9188 00007555 0F8203020000        <1> 		jb near nexticonsel
  9189 0000755B 663905[8C510000]    <1> 		cmp [lastmouseposition], ax
  9190 00007562 0F87F6010000        <1> 		ja near nexticonsel
  9191 00007568 66390D[8E510000]    <1> 		cmp [lastmouseposition + 2], cx
  9192 0000756F 0F82E9010000        <1> 		jb near nexticonsel
  9193 00007575 66391D[8E510000]    <1> 		cmp [lastmouseposition + 2], bx
  9194 0000757C 0F87DC010000        <1> 		ja near nexticonsel
  9195 00007582 668B460A            <1> 		mov ax, [esi + 10]
  9196 00007586 2410                <1> 		and al, 00010000b
  9197 00007588 663D1000            <1> 		cmp ax, 00010000b
  9198 0000758C 0F8442000000        <1> 		je near nodragtext
  9199 00007592 8935[AD720000]      <1> 		mov [dragging], esi
  9200 00007598 662B15[8C510000]    <1> 		sub dx, [lastmouseposition]
  9201 0000759F 660315[90510000]    <1> 		add dx, [mousecursorposition]
  9202 000075A6 66030D[92510000]    <1> 		add cx, [mousecursorposition + 2]
  9203 000075AD 662B0D[8E510000]    <1> 		sub cx, [lastmouseposition + 2]
  9204 000075B4 663B15[9F4F0000]    <1> 		cmp dx, [resolutionx2]
  9205 000075BB 7607                <1> 		jbe chkyresdrgtxt
  9206 000075BD 668B15[90510000]    <1> 		mov dx, [mousecursorposition]
  9207                              <1> 	chkyresdrgtxt:
  9208 000075C4 663B0D[B34E0000]    <1> 		cmp cx, [resolutiony]
  9209 000075CB 7607                <1> 		jbe nodragtext
  9210 000075CD 668B0D[92510000]    <1> 		mov cx, [mousecursorposition + 2]
  9211                              <1> 	nodragtext:
  9212 000075D4 66814E0A0100        <1> 		or word [esi + 10], 1
  9213 000075DA 8B5E0C              <1> 		mov ebx, [esi + 12]
  9214 000075DD 891D[DB7A0000]      <1> 		mov [codepointer], ebx
  9215 000075E3 668B460A            <1> 		mov ax, [esi + 10]
  9216 000075E7 8B7602              <1> 		mov esi, [esi + 2]
  9217 000075EA E814F5FFFF          <1> 		call showstring
  9218 000075EF E983010000          <1> 		jmp doneiconsel
  9219                              <1> 	unselecttext:
  9220 000075F4 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9221 000075FA 8B5E0C              <1> 		mov ebx, [esi + 12]
  9222 000075FD 668B460A            <1> 		mov ax, [esi + 10]
  9223 00007601 8B7602              <1> 		mov esi, [esi + 2]
  9224 00007604 C705[DB7A0000]0000- <1> 		mov dword [codepointer], 0
  9225 0000760C 0000                <1>
  9226 0000760E E8F0F4FFFF          <1> 		call showstring
  9227 00007613 E95F010000          <1> 		jmp doneiconsel
  9228                              <1> windowselect:
  9229 00007618 8B7E02              <1> 		mov edi, [esi + 2]
  9230 0000761B 668B5606            <1> 		mov dx, [esi + 6]
  9231 0000761F 6689D0              <1> 		mov ax, dx
  9232 00007622 668B4E08            <1> 		mov cx, [esi + 8]
  9233 00007626 6689CB              <1> 		mov bx, cx
  9234 00007629 6681C31000          <1> 		add bx, 16
  9235 0000762E 813D[AD720000]0100- <1> 		cmp dword [dragging], 1
  9236 00007636 0000                <1>
  9237 00007638 746D                <1> 		je dragwin
  9238 0000763A 813D[AD720000]0000- <1> 		cmp dword [dragging], 0
  9239 00007642 0000                <1>
  9240 00007644 7411                <1> 		je nodragwincheck
  9241 00007646 3935[AD720000]      <1> 		cmp dword [dragging], esi
  9242 0000764C 0F850C010000        <1> 		jne near nexticonsel
  9243 00007652 E950000000          <1> 		jmp dragwin
  9244                              <1> 	nodragwincheck:
  9245 00007657 663905[90510000]    <1> 		cmp [mousecursorposition], ax
  9246 0000765E 0F82FA000000        <1> 		jb near nexticonsel
  9247 00007664 660307              <1> 		add ax, [edi]
  9248 00007667 660307              <1> 		add ax, [edi]
  9249 0000766A 663905[90510000]    <1> 		cmp [mousecursorposition], ax
  9250 00007671 0F87E7000000        <1> 		ja near nexticonsel
  9251 00007677 66390D[92510000]    <1> 		cmp [mousecursorposition + 2], cx
  9252 0000767E 0F82DA000000        <1> 		jb near nexticonsel
  9253 00007684 66391D[92510000]    <1> 		cmp [mousecursorposition + 2], bx
  9254 0000768B 0F87CD000000        <1> 		ja near nexticonsel
  9255 00007691 662D1400            <1> 		sub ax, 20
  9256 00007695 663905[90510000]    <1> 		cmp [mousecursorposition], ax
  9257 0000769C 0F879C000000        <1> 		ja near killwin
  9258 000076A2 E983000000          <1> 		jmp nodragwin
  9259                              <1> 	dragwin:
  9260 000076A7 C605[02780000]01    <1> 		mov byte [windrag], 1
  9261 000076AE 663905[8C510000]    <1> 		cmp [lastmouseposition], ax
  9262 000076B5 0F82A3000000        <1> 		jb near nexticonsel
  9263 000076BB 660307              <1> 		add ax, [edi]
  9264 000076BE 660307              <1> 		add ax, [edi]
  9265 000076C1 663905[8C510000]    <1> 		cmp [lastmouseposition], ax
  9266 000076C8 0F8790000000        <1> 		ja near nexticonsel
  9267 000076CE 66390D[8E510000]    <1> 		cmp [lastmouseposition + 2], cx
  9268 000076D5 0F8283000000        <1> 		jb near nexticonsel
  9269 000076DB 66391D[8E510000]    <1> 		cmp [lastmouseposition + 2], bx
  9270 000076E2 0F8776000000        <1> 		ja near nexticonsel
  9271 000076E8 8935[AD720000]      <1> 		mov [dragging], esi
  9272 000076EE 662B15[8C510000]    <1> 		sub dx, [lastmouseposition]
  9273 000076F5 660315[90510000]    <1> 		add dx, [mousecursorposition]
  9274 000076FC 66030D[92510000]    <1> 		add cx, [mousecursorposition + 2]
  9275 00007703 662B0D[8E510000]    <1> 		sub cx, [lastmouseposition + 2]
  9276 0000770A 663B15[9F4F0000]    <1> 		cmp dx, [resolutionx2]
  9277 00007711 7607                <1> 		jbe chkyresdrgwin
  9278 00007713 668B15[90510000]    <1> 		mov dx, [mousecursorposition]
  9279                              <1> 	chkyresdrgwin:
  9280 0000771A 663B0D[B34E0000]    <1> 		cmp cx, [resolutiony]
  9281 00007721 7607                <1> 		jbe nodragwin
  9282 00007723 668B0D[92510000]    <1> 		mov cx, [mousecursorposition + 2]
  9283                              <1> 	nodragwin:
  9284 0000772A 8B5E0C              <1> 		mov ebx, [esi + 12]
  9285 0000772D 668B460A            <1> 		mov ax, [esi + 10]
  9286 00007731 8B7602              <1> 		mov esi, [esi + 2]
  9287 00007734 E833F6FFFF          <1> 		call showwindow
  9288 00007739 E939000000          <1> 		jmp doneiconsel
  9289                              <1> 	killwin:
  9290 0000773E 66C7060000          <1> 		mov word [esi], 0
  9291 00007743 C605[E6210000]00    <1> 		mov byte [termguion], 0
  9292 0000774A E8BAEDFFFF          <1> 		call guiclear
  9293 0000774F E83AEEFFFF          <1> 		call reloadallgraphics
  9294 00007754 E9EAE9FFFF          <1> 		jmp guistart
  9295 00007759 E93A000000          <1> 		jmp doneiconsel2
  9296                              <1> 	nexticonsel:
  9297 0000775E 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9298 00007764 81C610000000        <1> 		add esi, 16
  9299 0000776A 81FE[03C10000]      <1> 		cmp esi, graphicstableend
  9300 00007770 7305                <1> 		jae doneiconsel
  9301 00007772 E9B5FBFFFF          <1> 		jmp clicon2
  9302                              <1> 	doneiconsel:
  9303 00007777 813D[AD720000]0100- <1> 		cmp dword [dragging], 1
  9304 0000777F 0000                <1>
  9305 00007781 7315                <1> 		jae doneiconsel2
  9306 00007783 813D[DB7A0000]0000- <1> 		cmp dword [codepointer], 0
  9307 0000778B 0000                <1>
  9308 0000778D 7409                <1> 		je doneiconsel2
  9309 0000778F 8B1D[DB7A0000]      <1> 		mov ebx, [codepointer]
  9310 00007795 FFD3                <1> 		call ebx
  9311 00007797 C3                  <1> 		ret
  9312                              <1> 	doneiconsel2:
  9313 00007798 A0[A1520000]        <1> 		mov al, [LBUTTON]
  9314 0000779D A2[AB720000]        <1> 		mov [pLBUTTON], al
  9315 000077A2 A0[A2520000]        <1> 		mov al, [RBUTTON]
  9316 000077A7 A2[AC720000]        <1> 		mov [pRBUTTON], al
  9317 000077AC 66813D[AD720000]01- <1> 		cmp word [dragging], 1
  9318 000077B4 00                  <1>
  9319 000077B5 0F8613000000        <1> 		jbe near noreloadgraphicsclick
  9320 000077BB 803D[02780000]01    <1> 		cmp byte [windrag], 1
  9321 000077C2 7405                <1> 		je noclearcursorcl
  9322 000077C4 E85AEAFFFF          <1> 		call clearmousecursor
  9323                              <1> noclearcursorcl:
  9324 000077C9 E8C0EDFFFF          <1> 		call reloadallgraphics
  9325                              <1> noreloadgraphicsclick:
  9326 000077CE 31C9                <1> 		xor ecx, ecx
  9327 000077D0 31D2                <1> 		xor edx, edx
  9328 000077D2 30E4                <1> 		xor ah, ah
  9329 000077D4 8825[02780000]      <1> 		mov [windrag], ah
  9330 000077DA B0FE                <1> 		mov al, 254
  9331 000077DC 668B15[90510000]    <1> 		mov dx, [mousecursorposition]
  9332 000077E3 668B0D[92510000]    <1> 		mov cx, [mousecursorposition + 2]
  9333 000077EA 66BBE738            <1> 		mov bx, 0011100011100111b
  9334 000077EE C605[A7720000]01    <1> 		mov byte [showcursorfonton], 1
  9335 000077F5 E85BF3FFFF          <1> 		call showfontvesa
  9336 000077FA C605[A7720000]00    <1> 		mov byte [showcursorfonton], 0
  9337 00007801 C3                  <1> 		ret
  9338 00007802 00                  <1> windrag db 0
  9339 00007803 00000000            <1> lastdrag dw 0,0
  9340 00007807 00000000            <1> grpctblpos dw 0,0
  9341                              <1> 
  9342                              <1> 
  9343                              <1> 
  9344 0000780B 00<rept>            <1> grphbuf times 16 db 0
  9345                              <1> 	graphicsadd:
  9346 0000781B BF[03BF0000]        <1> 		mov edi, graphicstable
  9347                              <1> 	shwgrph1:
  9348 00007820 397702              <1> 		cmp dword [edi + 2], esi
  9349 00007823 7414                <1> 		je showgraphicsreplace2
  9350 00007825 81C710000000        <1> 		add edi, 16
  9351 0000782B 81FF[03C10000]      <1> 		cmp edi, graphicstableend
  9352 00007831 0F834F020000        <1> 		jae near showgraphicsnew
  9353 00007837 EBE7                <1> 		jmp shwgrph1
  9354                              <1> 	showgraphicsreplace2:
  9355 00007839 8935[0D780000]      <1> 		mov [grphbuf + 2], esi
  9356 0000783F 668915[11780000]    <1> 		mov [grphbuf + 6], dx
  9357 00007846 66890D[13780000]    <1> 		mov [grphbuf + 8], cx
  9358 0000784D 891D[17780000]      <1> 		mov [grphbuf + 12], ebx
  9359 00007853 30FF                <1> 		xor bh, bh
  9360 00007855 88E3                <1> 		mov bl, ah
  9361 00007857 30E4                <1> 		xor ah, ah
  9362 00007859 66A3[15780000]      <1> 		mov [grphbuf + 10], ax	
  9363 0000785F 66891D[0B780000]    <1> 		mov [grphbuf], bx
  9364 00007866 66A1[0B780000]      <1> 		mov ax, [grphbuf]
  9365 0000786C 663D0100            <1> 		cmp ax, 1
  9366 00007870 0F8419000000        <1> 		je near replaceicon
  9367 00007876 663D0200            <1> 		cmp ax, 2
  9368 0000787A 0F8493000000        <1> 		je near replacestring
  9369 00007880 663D0300            <1> 		cmp ax, 3
  9370 00007884 0F840F010000        <1> 		je near replacewindow
  9371 0000788A E9D4010000          <1> 		jmp showgraphicsreplace
  9372                              <1> 	replaceicon:
  9373 0000788F 893D[B1720000]      <1> 		mov [lastpos], edi
  9374 00007895 8935[B5720000]      <1> 		mov [lastpos + 4], esi
  9375 0000789B 8B7702              <1> 		mov esi, [edi + 2]
  9376 0000789E 668B5F0C            <1> 		mov bx, [edi + 12]
  9377 000078A2 668B5706            <1> 		mov dx, [edi + 6]
  9378 000078A6 668B4F08            <1> 		mov cx, [edi + 8]
  9379 000078AA 668B06              <1> 		mov ax, [esi]
  9380 000078AD 66A3[B9720000]      <1> 		mov [colorbuf], ax
  9381 000078B3 66A1[8A650000]      <1> 		mov ax, [background]
  9382 000078B9 668906              <1> 		mov [esi], ax
  9383 000078BC 8B5F0C              <1> 		mov ebx, [edi + 12]
  9384 000078BF 668B470A            <1> 		mov ax, [edi + 10]
  9385 000078C3 2401                <1> 		and al, 1
  9386 000078C5 A2[DF7A0000]        <1> 		mov [iconselected], al
  9387 000078CA 668B470A            <1> 		mov ax, [edi + 10]
  9388 000078CE E8C2EAFFFF          <1> 		call showicon2
  9389 000078D3 8B3D[B1720000]      <1> 		mov edi, [lastpos]
  9390 000078D9 8B7702              <1> 		mov esi, [edi + 2]
  9391 000078DC 66A1[B9720000]      <1> 		mov ax, [colorbuf]
  9392 000078E2 668906              <1> 		mov [esi], ax
  9393 000078E5 8B35[B5720000]      <1> 		mov esi, [lastpos + 4]
  9394 000078EB 668B15[11780000]    <1> 		mov dx, [grphbuf + 6]
  9395 000078F2 668B0D[13780000]    <1> 		mov cx, [grphbuf + 8]
  9396 000078F9 668B1D[0B780000]    <1> 		mov bx, [grphbuf]
  9397 00007900 66A1[15780000]      <1> 		mov ax, [grphbuf + 10]
  9398 00007906 88DC                <1> 		mov ah, bl
  9399 00007908 8B1D[17780000]      <1> 		mov ebx, [grphbuf + 12]
  9400 0000790E E950010000          <1> 		jmp showgraphicsreplace
  9401                              <1> 	replacestring:
  9402 00007913 893D[B1720000]      <1> 		mov [lastpos], edi
  9403 00007919 8935[B5720000]      <1> 		mov [lastpos + 4], esi
  9404 0000791F 8B5F0C              <1> 		mov ebx, [edi + 12]
  9405 00007922 8B7702              <1> 		mov esi, [edi + 2]
  9406 00007925 668B5706            <1> 		mov dx, [edi + 6]
  9407 00007929 668B4F08            <1> 		mov cx, [edi + 8]
  9408 0000792D 66A1[446B0000]      <1> 		mov ax, [colorfont2]
  9409 00007933 66A3[B9720000]      <1> 		mov [colorbuf], ax
  9410 00007939 66A1[8A650000]      <1> 		mov ax, [background]
  9411 0000793F 66A3[446B0000]      <1> 		mov [colorfont2], ax		
  9412 00007945 8B5F0C              <1> 		mov ebx, [edi + 12]
  9413 00007948 668B470A            <1> 		mov ax, [edi + 10]
  9414 0000794C 2401                <1> 		and al, 1
  9415 0000794E A2[A9720000]        <1> 		mov [mouseselecton], al
  9416 00007953 668B470A            <1> 		mov ax, [edi + 10]
  9417 00007957 E8BAF1FFFF          <1> 		call showstring2
  9418 0000795C 66A1[B9720000]      <1> 		mov ax, [colorbuf]
  9419 00007962 66A3[446B0000]      <1> 		mov [colorfont2], ax
  9420 00007968 8B3D[B1720000]      <1> 		mov edi, [lastpos]
  9421 0000796E 8B7702              <1> 		mov esi, [edi + 2]
  9422 00007971 668B15[11780000]    <1> 		mov dx, [grphbuf + 6]
  9423 00007978 668B0D[13780000]    <1> 		mov cx, [grphbuf + 8]
  9424 0000797F 668B1D[0B780000]    <1> 		mov bx, [grphbuf]
  9425 00007986 66A1[15780000]      <1> 		mov ax, [grphbuf + 10]
  9426 0000798C 88DC                <1> 		mov ah, bl
  9427 0000798E 8B1D[17780000]      <1> 		mov ebx, [grphbuf + 12]
  9428 00007994 E9CA000000          <1> 		jmp showgraphicsreplace
  9429                              <1> 	replacewindow:
  9430 00007999 893D[B1720000]      <1> 		mov [lastpos], edi
  9431 0000799F 8935[B5720000]      <1> 		mov [lastpos + 4], esi
  9432 000079A5 8B7702              <1> 		mov esi, [edi + 2]
  9433 000079A8 8B3D[566D0000]      <1> 		mov edi, [windowbufloc]
  9434 000079AE 31D2                <1> 		xor edx, edx
  9435 000079B0 668B15[9F4F0000]    <1> 		mov dx, [resolutionx2]
  9436 000079B7 C1E204              <1> 		shl edx, 4
  9437 000079BA 29D7                <1> 		sub edi, edx
  9438 000079BC 31D2                <1> 		xor edx, edx
  9439 000079BE 668B16              <1> 		mov dx, [esi]
  9440 000079C1 660316              <1> 		add dx, [esi]
  9441 000079C4 668B4E02            <1> 		mov cx, [esi + 2]
  9442 000079C8 6681C11000          <1> 		add cx, 16
  9443 000079CD 66A1[8A650000]      <1> 		mov ax, [background]
  9444                              <1> 	clearwindow:
  9445                              <1> 		%ifdef gui.background
  9446 000079D3 813D[5C650000]0000- <1> 			cmp dword [backgroundimage], 0
  9447 000079DB 0000                <1>
  9448 000079DD 7419                <1> 			je .noback
  9449 000079DF 56                  <1> 			push esi
  9450 000079E0 8B35[5C650000]      <1> 			mov esi, [backgroundimage]
  9451 000079E6 2B3D[C74E0000]      <1> 			sub edi, [physbaseptr]
  9452 000079EC 01FE                <1> 			add esi, edi
  9453 000079EE 033D[C74E0000]      <1> 			add edi, [physbaseptr]
  9454 000079F4 668B06              <1> 			mov ax, [esi]
  9455 000079F7 5E                  <1> 			pop esi
  9456                              <1> 		.noback:
  9457                              <1> 		%endif
  9458 000079F8 668907              <1> 		mov [edi], ax
  9459 000079FB 81C702000000        <1> 		add edi, 2
  9460 00007A01 81EA02000000        <1> 		sub edx, 2
  9461 00007A07 81FA00000000        <1> 		cmp edx, 0
  9462 00007A0D 75C4                <1> 		jne clearwindow
  9463 00007A0F 6649                <1> 		dec cx
  9464 00007A11 668B15[9F4F0000]    <1> 		mov dx, [resolutionx2]
  9465 00007A18 662B16              <1> 		sub dx, [esi]
  9466 00007A1B 662B16              <1> 		sub dx, [esi]
  9467 00007A1E 01D7                <1> 		add edi, edx
  9468 00007A20 668B16              <1> 		mov dx, [esi]
  9469 00007A23 660316              <1> 		add dx, [esi]
  9470 00007A26 6681F90000          <1> 		cmp cx, 0
  9471 00007A2B 75A6                <1> 		jne clearwindow
  9472 00007A2D C605[E7210000]00    <1> 		mov byte [termcopyon], 0
  9473 00007A34 8B3D[B1720000]      <1> 		mov edi, [lastpos]
  9474 00007A3A 8B35[0D780000]      <1> 		mov esi, [grphbuf + 2]
  9475 00007A40 668B15[11780000]    <1> 		mov dx, [grphbuf + 6]
  9476 00007A47 668B0D[13780000]    <1> 		mov cx, [grphbuf + 8]
  9477 00007A4E 668B1D[0B780000]    <1> 		mov bx, [grphbuf]
  9478 00007A55 66A1[15780000]      <1> 		mov ax, [grphbuf + 10]
  9479 00007A5B 88DC                <1> 		mov ah, bl
  9480 00007A5D 8B1D[17780000]      <1> 		mov ebx, [grphbuf + 12]
  9481                              <1> 	showgraphicsreplace:
  9482 00007A63 897702              <1> 		mov [edi + 2], esi
  9483 00007A66 66895706            <1> 		mov [edi + 6], dx
  9484 00007A6A 66894F08            <1> 		mov [edi + 8], cx
  9485 00007A6E 895F0C              <1> 		mov [edi + 12], ebx
  9486 00007A71 30FF                <1> 		xor bh, bh
  9487 00007A73 88E3                <1> 		mov bl, ah
  9488 00007A75 30E4                <1> 		xor ah, ah
  9489 00007A77 6689470A            <1> 		mov [edi + 10], ax
  9490 00007A7B 66891F              <1> 		mov [edi], bx
  9491 00007A7E 8B5F0C              <1> 		mov ebx, [edi + 12]
  9492 00007A81 668B470A            <1> 		mov ax, [edi + 10]
  9493 00007A85 C3                  <1> 		ret
  9494                              <1> 	showgraphicsnew:
  9495 00007A86 BF[03BF0000]        <1> 		mov edi, graphicstable
  9496                              <1> 	shwgrph2:
  9497 00007A8B 66813F0000          <1> 		cmp word [edi], 0
  9498 00007A90 74D1                <1> 		je showgraphicsreplace
  9499 00007A92 81C710000000        <1> 		add edi, 16
  9500 00007A98 81FF[03C10000]      <1> 		cmp edi, graphicstableend
  9501 00007A9E 72EB                <1> 		jb shwgrph2
  9502                              <1> 	showgraphicsdone:
  9503 00007AA0 C3                  <1> 		ret
  9504                              <1> 	
  9505                              <1> putpixel: ;color in si, point is (dx,cx)
  9506 00007AA1 8B3D[C74E0000]      <1> 	mov edi, [physbaseptr]
  9507 00007AA7 31C0                <1> 	xor eax, eax
  9508 00007AA9 31DB                <1> 	xor ebx, ebx
  9509 00007AAB 668B1D[B34E0000]    <1> 	mov bx, [resolutiony]
  9510 00007AB2 66A1[9F4F0000]      <1> 	mov ax, [resolutionx2]
  9511 00007AB8 66D1E2              <1> 	shl dx, 1
  9512 00007ABB 6639C2              <1> 	cmp dx, ax
  9513 00007ABE 7717                <1> 	ja .doneput
  9514 00007AC0 6639D9              <1> 	cmp cx, bx
  9515 00007AC3 7712                <1> 	ja .doneput
  9516 00007AC5 6689CB              <1> 	mov bx, cx
  9517 00007AC8 6689D1              <1> 	mov cx, dx
  9518 00007ACB F7E3                <1> 	mul ebx
  9519 00007ACD 6689CB              <1> 	mov bx, cx
  9520 00007AD0 01D8                <1> 	add eax, ebx
  9521 00007AD2 01C7                <1> 	add edi, eax
  9522 00007AD4 668937              <1> 	mov [edi], si
  9523                              <1> .doneput:
  9524 00007AD7 C3                  <1> 	ret
  9525                              <1> 
  9526 00007AD8 00                  <1> 	mouseon db 0
  9527 00007AD9 0000                <1> 	icon dw 0	;pointer to icon
  9528 00007ADB 00000000            <1> 	codepointer dd 0 ;pointer to code
  9529 00007ADF 00                  <1> 	iconselected db 0
  9530                                  %endif
  9531                                  %ifdef network.included
  9532                                  	%include "source/network.asm"
  9533                              <1> sendpacket: ;packet start in edi, end in esi
  9534                              <1> 	%ifdef rtl8139.included
  9535                              <1> 		call rtl8139.sendpacket
  9536                              <1> 	%endif
  9537                              <1> 	%ifdef ne2000.included
  9538 00007AE0 E8B0DCFFFF          <1> 		call ne2000.sendpacket
  9539                              <1> 	%endif
  9540 00007AE5 C3                  <1> 	ret
  9541                              <1> 
  9542                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
  9543 00007AE6 31C0                <1> 	xor eax, eax
  9544 00007AE8 31DB                <1> 	xor ebx, ebx
  9545 00007AEA 31C9                <1> 	xor ecx, ecx
  9546                              <1> .lp:
  9547 00007AEC 8A07                <1> 	mov al, [edi]
  9548 00007AEE 8A6701              <1> 	mov ah, [edi + 1]
  9549 00007AF1 01C3                <1> 	add ebx, eax
  9550 00007AF3 81C702000000        <1> 	add edi, 2
  9551 00007AF9 39F7                <1> 	cmp edi, esi
  9552 00007AFB 72EF                <1> 	jb .lp
  9553 00007AFD 66B9FFFF            <1> 	mov cx, 0xFFFF
  9554 00007B01 6689D8              <1> 	mov ax, bx
  9555 00007B04 C1EB10              <1> 	shr ebx, 16
  9556 00007B07 6601D8              <1> 	add ax, bx
  9557 00007B0A 6629C1              <1> 	sub cx, ax
  9558 00007B0D C3                  <1> 	ret
  9559                              <1> 	
  9560                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
  9561 00007B0E 31DB                <1> 	xor ebx, ebx
  9562 00007B10 31C9                <1> 	xor ecx, ecx
  9563 00007B12 31D2                <1> 	xor edx, edx
  9564                              <1> .mlp:
  9565 00007B14 89F7                <1> 	mov edi, esi
  9566 00007B16 4F                  <1> 	dec edi
  9567                              <1> .lp:
  9568 00007B17 47                  <1> 	inc edi
  9569 00007B18 8A07                <1> 	mov al, [edi]
  9570 00007B1A 3C20                <1> 	cmp al, " "
  9571 00007B1C 7408                <1> 	je .dnlp
  9572 00007B1E 3C00                <1> 	cmp al, 0
  9573 00007B20 7404                <1> 	je .dnlp
  9574 00007B22 3C2E                <1> 	cmp al, "."
  9575 00007B24 75F1                <1> 	jne .lp
  9576                              <1> .dnlp:
  9577 00007B26 30C0                <1> 	xor al, al
  9578 00007B28 8807                <1> 	mov [edi], al
  9579 00007B2A 53                  <1> 	push ebx
  9580 00007B2B 56                  <1> 	push esi
  9581 00007B2C 57                  <1> 	push edi
  9582 00007B2D 31FF                <1> 	xor edi, edi
  9583 00007B2F E87EB4FFFF          <1> 	call cnvrttxt
  9584 00007B34 5E                  <1> 	pop esi
  9585 00007B35 5F                  <1> 	pop edi ;i intentionally switch them
  9586 00007B36 5B                  <1> 	pop ebx
  9587 00007B37 46                  <1> 	inc esi
  9588 00007B38 BF[507B0000]        <1> 	mov edi, ipstr
  9589 00007B3D 880C1F              <1> 	mov [edi + ebx], cl
  9590 00007B40 43                  <1> 	inc ebx
  9591 00007B41 81FB04000000        <1> 	cmp ebx, 4
  9592 00007B47 72CB                <1> 	jb .mlp
  9593 00007B49 8B0D[507B0000]      <1> 	mov ecx, [ipstr]
  9594 00007B4F C3                  <1> 	ret
  9595 00007B50 00000000            <1> ipstr dd 0
  9596                              <1> showip: 	;put the ip address in ecx
  9597 00007B54 89C8                <1> 	mov eax, ecx
  9598 00007B56 30DB                <1> 	xor bl, bl
  9599                              <1> .lp
  9600 00007B58 3C00                <1> 	cmp al, 0
  9601 00007B5A 750B                <1> 	jne .nozeroprint
  9602 00007B5C B030                <1> 	mov al, "0"
  9603 00007B5E 50                  <1> 	push eax
  9604 00007B5F E884A6FFFF          <1> 	call prcharq
  9605 00007B64 58                  <1> 	pop eax
  9606 00007B65 30C0                <1> 	xor al, al
  9607                              <1> .nozeroprint:
  9608 00007B67 31C9                <1> 	xor ecx, ecx
  9609 00007B69 88C1                <1> 	mov cl, al
  9610 00007B6B E860B3FFFF          <1> 	call showdec
  9611 00007B70 C1E808              <1> 	shr eax, 8
  9612 00007B73 FEC3                <1> 	inc bl
  9613 00007B75 80FB04              <1> 	cmp bl, 4
  9614 00007B78 7312                <1> 	jae .done
  9615 00007B7A 50                  <1> 	push eax
  9616 00007B7B 6653                <1> 	push bx
  9617 00007B7D BE[8D7B0000]        <1> 	mov esi, .dot
  9618 00007B82 E88BA1FFFF          <1> 	call print
  9619 00007B87 665B                <1> 	pop bx
  9620 00007B89 58                  <1> 	pop eax
  9621 00007B8A EBCC                <1> 	jmp .lp
  9622                              <1> .done:
  9623 00007B8C C3                  <1> 	ret
  9624 00007B8D 082E00              <1> .dot db 8,".",0
  9625                              <1> showmac:	;mac begins in [ecx]
  9626 00007B90 BE[E07B0000]        <1> 	mov esi, macprint
  9627 00007B95 89CF                <1> 	mov edi, ecx
  9628 00007B97 81C106000000        <1> 	add ecx, 6
  9629                              <1> showmacloop:
  9630 00007B9D 8A07                <1> 	mov al, [edi]
  9631 00007B9F 8A27                <1> 	mov ah, [edi]
  9632 00007BA1 C0E804              <1> 	shr al, 4
  9633 00007BA4 C0E404              <1> 	shl ah, 4
  9634 00007BA7 C0EC04              <1> 	shr ah, 4
  9635 00007BAA 0430                <1> 	add al, 48
  9636 00007BAC 3C39                <1> 	cmp al, "9"
  9637 00007BAE 7606                <1> 	jbe .goodal
  9638 00007BB0 2C30                <1> 	sub al, 48
  9639 00007BB2 2C0A                <1> 	sub al, 0xA
  9640 00007BB4 0441                <1> 	add al, "A"
  9641                              <1> .goodal:
  9642 00007BB6 80C430              <1> 	add ah, 48
  9643 00007BB9 80FC39              <1> 	cmp ah, "9"
  9644 00007BBC 7609                <1> 	jbe .goodah
  9645 00007BBE 80EC30              <1> 	sub ah, 48
  9646 00007BC1 80EC0A              <1> 	sub ah, 0xA
  9647 00007BC4 80C441              <1> 	add ah, "A"
  9648                              <1> .goodah:
  9649 00007BC7 668906              <1> 	mov [esi], ax
  9650 00007BCA 81C603000000        <1> 	add esi, 3
  9651 00007BD0 47                  <1> 	inc edi
  9652 00007BD1 39CF                <1> 	cmp edi, ecx
  9653 00007BD3 72C8                <1> 	jb showmacloop
  9654 00007BD5 BE[E07B0000]        <1> 	mov esi, macprint
  9655 00007BDA E833A1FFFF          <1> 	call print
  9656 00007BDF C3                  <1> 	ret
  9657                              <1> 	
  9658 00007BE0 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
  9659 00007BE9 30303A30303A303020- <1>
  9660 00007BF2 00                  <1>
  9661 00007BF3 00000000            <1> ethernetend dw 0,0
  9662 00007BF7 00                  <1> nicconfig db 0
  9663 00007BF8 00000000            <1> basenicaddr	dd 0
  9664 00007BFC C0A80002            <1> sysip db 192,168,0,2
  9665 00007C00 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
  9666                                  %endif
  9667                                      %include "source/data.asm"
  9668 00007C06 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  9669 00007C0E 73687573683A2000    <1> 	notfound1 db "shush: ",0
  9670 00007C16 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
  9671 00007C1F 6E640A00            <1>
  9672 00007C23 757365726E616D653A- <1> 	userask db "username:",0
  9673 00007C2C 00                  <1>
  9674 00007C2D 70617373776F72643A- <1> 	pwdask	db	"password:",0
  9675 00007C36 00                  <1>
  9676 00007C37 40                  <1> 	computer db "@"
  9677                              <1> %ifdef io.serial
  9678                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  9679                              <1> %else
  9680 00007C38 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  9681 00007C41 00                  <1>
  9682                              <1> %endif
  9683 00007C42 5D242000            <1> 	endprompt db "]$ ",0
  9684 00007C46 0D                  <1> 	crlf 	db  13
  9685 00007C47 0A00                <1> 	line	db	10,0
  9686                              <1> 	userlst:
  9687 00007C49 726F6F7400          <1> 			db "root",0
  9688 00007C4E 617765736F6D65706F- <1> 			db "awesomepower",0
  9689 00007C57 77657200            <1>
  9690 00007C5B 7573657200          <1> 			db "user",0
  9691 00007C60 70617373776F726400  <1> 			db "password",0
  9692 00007C69 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  9693 00007C6B 00                  <1> 			db 0
  9694                              <1> 	userlstend:
  9695                              <1> 	
  9696                              <1> %ifdef io.serial
  9697                              <1> %else
  9698 00007C6B <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  9699                              <1> fontend:
  9700                              <1> %endif
  9701                              <1> osend:	;this is the end of the operating system's space on disk
  9702                                      %include "build/fileindex.asm"
  9703                              <1> diskfileindex:
  9704 00008C6C 617267746573742E65- <1> db "argtest.elf",0
  9705 00008C75 6C6600              <1>
  9706 00008C78 48000000            <1> dd (f0-$$)/512
  9707 00008C7C 06010000            <1> dd (f1-f0)/512
  9708 00008C80 6261636B67726F756E- <1> db "background.bmp",0
  9709 00008C89 642E626D7000        <1>
  9710 00008C8F 4E010000            <1> dd (f1-$$)/512
  9711 00008C93 01140000            <1> dd (f2-f1)/512
  9712 00008C97 626F6F742E736800    <1> db "boot.sh",0
  9713 00008C9F 4F150000            <1> dd (f2-$$)/512
  9714 00008CA3 01000000            <1> dd (f3-f2)/512
  9715 00008CA7 63686172746573742E- <1> db "chartest.elf",0
  9716 00008CB0 656C6600            <1>
  9717 00008CB4 50150000            <1> dd (f3-$$)/512
  9718 00008CB8 26010000            <1> dd (f4-f3)/512
  9719 00008CBC 646F73746573742E63- <1> db "dostest.com",0
  9720 00008CC5 6F6D00              <1>
  9721 00008CC8 76160000            <1> dd (f4-$$)/512
  9722 00008CCC 01000000            <1> dd (f5-f4)/512
  9723 00008CD0 6578656300          <1> db "exec",0
  9724 00008CD5 77160000            <1> dd (f5-$$)/512
  9725 00008CD9 01000000            <1> dd (f6-f5)/512
  9726 00008CDD 66696E616C636F756E- <1> db "finalcount.snd",0
  9727 00008CE6 742E736E6400        <1>
  9728 00008CEC 78160000            <1> dd (f6-$$)/512
  9729 00008CF0 01000000            <1> dd (f7-f6)/512
  9730 00008CF4 666F726B00          <1> db "fork",0
  9731 00008CF9 79160000            <1> dd (f7-$$)/512
  9732 00008CFD 01000000            <1> dd (f8-f7)/512
  9733 00008D01 68656C6C6F776F726C- <1> db "helloworld.elf",0
  9734 00008D0A 642E656C6600        <1>
  9735 00008D10 7A160000            <1> dd (f8-$$)/512
  9736 00008D14 D6010000            <1> dd (f9-f8)/512
  9737 00008D18 696E7400            <1> db "int",0
  9738 00008D1C 50180000            <1> dd (f9-$$)/512
  9739 00008D20 01000000            <1> dd (f10-f9)/512
  9740 00008D24 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  9741 00008D2D 2E736E6400          <1>
  9742 00008D32 51180000            <1> dd (f10-$$)/512
  9743 00008D36 01000000            <1> dd (f11-f10)/512
  9744 00008D3A 6D6172696F2E736E64- <1> db "mario.snd",0
  9745 00008D43 00                  <1>
  9746 00008D44 52180000            <1> dd (f11-$$)/512
  9747 00008D48 01000000            <1> dd (f12-f11)/512
  9748 00008D4C 736F6C6C65726F732E- <1> db "solleros.bmp",0
  9749 00008D55 626D7000            <1>
  9750 00008D59 53180000            <1> dd (f12-$$)/512
  9751 00008D5D B0020000            <1> dd (f13-f12)/512
  9752 00008D61 736F6C6C65726F732E- <1> db "solleros.txt",0
  9753 00008D6A 74787400            <1>
  9754 00008D6E 031B0000            <1> dd (f13-$$)/512
  9755 00008D72 01000000            <1> dd (f14-f13)/512
  9756 00008D76 736F6E676F74696D65- <1> db "songotime.snd",0
  9757 00008D7F 2E736E6400          <1>
  9758 00008D84 041B0000            <1> dd (f14-$$)/512
  9759 00008D88 01000000            <1> dd (f15-f14)/512
  9760 00008D8C 73736500            <1> db "sse",0
  9761 00008D90 051B0000            <1> dd (f15-$$)/512
  9762 00008D94 02000000            <1> dd (f16-f15)/512
  9763 00008D98 737464696F74657374- <1> db "stdiotest.elf",0
  9764 00008DA1 2E656C6600          <1>
  9765 00008DA6 071B0000            <1> dd (f16-$$)/512
  9766 00008DAA 27010000            <1> dd (f17-f16)/512
  9767 00008DAE 74656C7900          <1> db "tely",0
  9768 00008DB3 2E1C0000            <1> dd (f17-$$)/512
  9769 00008DB7 01000000            <1> dd (f18-f17)/512
  9770 00008DBB 746573742E77617600  <1> db "test.wav",0
  9771 00008DC4 2F1C0000            <1> dd (f18-$$)/512
  9772 00008DC8 41000000            <1> dd (f19-f18)/512
  9773 00008DCC 74696D65746573742E- <1> db "timetest.elf",0
  9774 00008DD5 656C6600            <1>
  9775 00008DD9 701C0000            <1> dd (f19-$$)/512
  9776 00008DDD 04010000            <1> dd (f20-f19)/512
  9777 00008DE1 7475746F7269616C2E- <1> db "tutorial.sh",0
  9778 00008DEA 736800              <1>
  9779 00008DED 741D0000            <1> dd (f20-$$)/512
  9780 00008DF1 03000000            <1> dd (f21-f20)/512
  9781 00008DF5 756E667300          <1> db "unfs",0
  9782 00008DFA 771D0000            <1> dd (f21-$$)/512
  9783 00008DFE 02000000            <1> dd (f22-f21)/512
  9784 00008E02 766963746F72792E77- <1> db "victory.wav",0
  9785 00008E0B 617600              <1>
  9786 00008E0E 791D0000            <1> dd (f22-$$)/512
  9787 00008E12 16000000            <1> dd (f23-f22)/512
  9788 00008E16 5F696D672E62696E00  <1> db "_img.bin",0
  9789 00008E1F 8F1D0000            <1> dd (f23-$$)/512
  9790 00008E23 D7020000            <1> dd (f24-f23)/512
  9791                              <1> enddiskfileindex:
  9792                              <1> 
  9793                                      %include "source/bss.asm"
  9794 00008E27 90                  <1> align 4, nop
  9795                              <1> bssstart: equ $
  9796                              <1> guion equ bssstart
  9797                              <1> DriveNumber equ guion + 1
  9798                              <1> lbaad equ DriveNumber + 1
  9799                              <1> memlistbuf equ lbaad + 4
  9800                              <1> memlistend equ memlistbuf + 576
  9801                              <1> bsscopy equ memlistend
  9802                              <1> initialstack equ bsscopy
  9803                              <1> stackend equ initialstack + 4000
  9804                              <1> fileindex: equ stackend + 96
  9805                              <1> fileindexend: equ fileindex + 1024
  9806                              <1> previousstack equ fileindexend
  9807                              <1> lastfolderloc equ previousstack + 4
  9808                              <1> currentfolderloc equ lastfolderloc + 4
  9809                              <1> currentfolder equ currentfolderloc + 4
  9810                              <1> currentfolderend equ currentfolder + 512
  9811                              <1> uid equ currentfolderend
  9812                              <1> ranboot equ uid + 4
  9813                              <1> IFON equ ranboot + 1
  9814                              <1> IFTRUE equ IFON + 1
  9815                              <1> BATCHPOS equ IFTRUE + 100
  9816                              <1> BATCHISON equ BATCHPOS + 4
  9817                              <1> LOOPON equ BATCHISON + 1
  9818                              <1> LOOPPOS	equ LOOPON + 1
  9819                              <1> variables: equ LOOPPOS + 4
  9820                              <1> varend: equ variables + 4096
  9821                              <1> buftxt2: equ varend
  9822                              <1> buftxt: equ buftxt2 + 1024
  9823                              <1> buftxtend: equ buftxt + 1024
  9824                              <1> buf2: equ buftxtend
  9825                              <1> numbuf: equ buf2 + 20
  9826                              <1> %ifdef io.serial
  9827                              <1> 	lastcommandpos equ numbuf + 1
  9828                              <1> %else
  9829                              <1> 	%ifdef gui.included
  9830                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  9831                              <1> 		graphicstableend equ graphicstable + 200h
  9832                              <1> 		%ifdef gui.background
  9833                              <1> 			backgroundbuffer equ graphicstableend
  9834                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
  9835                              <1> 			mousecolorbuf equ backgroundbufferend
  9836                              <1> 		%else
  9837                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  9838                              <1> 		%endif
  9839                              <1> 		mcolorend equ mousecolorbuf + 256
  9840                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  9841                              <1> 		videobufend	equ videobuf + 210*65*2
  9842                              <1> 		videobuf2 equ videobufend
  9843                              <1> 		videobuf2end equ videobuf2 + 210*65*2
  9844                              <1> 	%else
  9845                              <1> 		videobuf equ numbuf + 1
  9846                              <1> 		videobufend equ videobuf + 80*30*2
  9847                              <1> 		videobuf2 equ videobufend
  9848                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  9849                              <1> 	%endif
  9850                              <1> 	lastcommandpos: equ videobuf2end
  9851                              <1> %endif
  9852                              <1> 	commandbufpos: equ lastcommandpos + 4
  9853                              <1> 	commandbuf: equ commandbufpos + 4
  9854                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  9855                              <1> %ifdef rtl8139.included
  9856                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  9857                              <1> 	rbuffend equ rbuffstart + 8212
  9858                              <1> %else
  9859                              <1> 	rbuffstart equ commandbufend
  9860                              <1> 	rbuffend equ commandbufend
  9861                              <1> %endif
  9862                              <1> %ifdef threads.included
  9863                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  9864                              <1> 	threadlistend: equ threadlist + 1024*4
  9865                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  9866                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  9867                              <1> 	bssend equ stack1 + 1024*1024
  9868                              <1> %else
  9869                              <1> 	bssend equ rbuffend
  9870                              <1> %endif
  9871                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  9872                                      %include "build/files.asm"
  9873 00008E28 00<rept>            <1> align 512,db 0
  9874                              <1> f0:
  9875 00008E28 <incbin>            <1> incbin "included/argtest.elf"
  9876 00029AF2 00<rept>            <1> align 512,db 0
  9877                              <1> f1:
  9878 00029AF2 <incbin>            <1> incbin "included/background.bmp"
  9879 002A9C46 00<rept>            <1> align 512,db 0
  9880                              <1> f2:
  9881 002A9C46 <incbin>            <1> incbin "included/boot.sh"
  9882 002A9EBD 00<rept>            <1> align 512,db 0
  9883                              <1> f3:
  9884 002A9EBD <incbin>            <1> incbin "included/chartest.elf"
  9885 002CEADB 00<rept>            <1> align 512,db 0
  9886                              <1> f4:
  9887 002CEADB <incbin>            <1> incbin "included/dostest.com"
  9888 002CED2B 00<rept>            <1> align 512,db 0
  9889                              <1> f5:
  9890 002CED2B <incbin>            <1> incbin "included/exec"
  9891 002CEEE9 00<rept>            <1> align 512,db 0
  9892                              <1> f6:
  9893 002CEEE9 <incbin>            <1> incbin "included/finalcount.snd"
  9894 002CF102 00<rept>            <1> align 512,db 0
  9895                              <1> f7:
  9896 002CF102 <incbin>            <1> incbin "included/fork"
  9897 002CF362 00<rept>            <1> align 512,db 0
  9898                              <1> f8:
  9899 002CF362 <incbin>            <1> incbin "included/helloworld.elf"
  9900 00309FE3 00<rept>            <1> align 512,db 0
  9901                              <1> f9:
  9902 00309FE3 <incbin>            <1> incbin "included/int"
  9903 0030A1A9 00<rept>            <1> align 512,db 0
  9904                              <1> f10:
  9905 0030A1A9 <incbin>            <1> incbin "included/lostwoods.snd"
  9906 0030A256 00<rept>            <1> align 512,db 0
  9907                              <1> f11:
  9908 0030A256 <incbin>            <1> incbin "included/mario.snd"
  9909 0030A43A 00<rept>            <1> align 512,db 0
  9910                              <1> f12:
  9911 0030A43A <incbin>            <1> incbin "included/solleros.bmp"
  9912 003605E6 00<rept>            <1> align 512,db 0
  9913                              <1> f13:
  9914 003605E6 <incbin>            <1> incbin "included/solleros.txt"
  9915 00360776 00<rept>            <1> align 512,db 0
  9916                              <1> f14:
  9917 00360776 <incbin>            <1> incbin "included/songotime.snd"
  9918 0036084A 00<rept>            <1> align 512,db 0
  9919                              <1> f15:
  9920 0036084A <incbin>            <1> incbin "included/sse"
  9921 00360CA8 00<rept>            <1> align 512,db 0
  9922                              <1> f16:
  9923 00360CA8 <incbin>            <1> incbin "included/stdiotest.elf"
  9924 00385A43 00<rept>            <1> align 512,db 0
  9925                              <1> f17:
  9926 00385A43 <incbin>            <1> incbin "included/tely"
  9927 00385DC0 00<rept>            <1> align 512,db 0
  9928                              <1> f18:
  9929 00385DC0 <incbin>            <1> incbin "included/test.wav"
  9930 0038DF5C 00<rept>            <1> align 512,db 0
  9931                              <1> f19:
  9932 0038DF5C <incbin>            <1> incbin "included/timetest.elf"
  9933 003AE63D 00<rept>            <1> align 512,db 0
  9934                              <1> f20:
  9935 003AE63D <incbin>            <1> incbin "included/tutorial.sh"
  9936 003AED52 00<rept>            <1> align 512,db 0
  9937                              <1> f21:
  9938 003AED52 <incbin>            <1> incbin "included/unfs"
  9939                              <1> align 512,db 0
  9940                              <1> f22:
  9941 003AED52 <incbin>            <1> incbin "included/victory.wav"
  9942 003B1D48 00<rept>            <1> align 512,db 0
  9943                              <1> f23:
  9944 003B1D48 <incbin>            <1> incbin "included/_img.bin"
  9945                              <1> align 512,db 0
  9946                              <1> f24:
