     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define io.serial
     9                              <1> ;Use the serial port for input and output instead of the keyboard and screen
    10                              <1> ;If the gui is included this should not be enabled
    11                              <1> 
    12                              <1> %define threads.included
    13                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    14                              <1> 
    15                              <1> %define exceptions.included
    16                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    17                              <1> 
    18                              <1> ;%define disk.protected
    19                              <1> ;Use protected mode instead of real mode for disk access
    20                              <1> 
    21                              <1> %define disk.real
    22                              <1> ;Use real mode for disk access
    23                              <1> 
    24                              <1> ;%define sound.included
    25                              <1> ;This includes the sound drivers
    26                              <1> 
    27                              <1> %define rtl8139.included
    28                              <1> ;This includes the RTL8139 drivers
    29                              <1> 
    30                              <1> ;%define sector.debug
    31                              <1> ;Dump the contents of the first sector of SollerOS
    32                              <1> 
    33                              <1> ;FIX DEPENDANCIES
    34                              <1> %ifdef gui.included
    35                              <1> %undef io.serial
    36                              <1> %endif
    37                              <1> %ifdef disk.protected
    38                              <1> %undef disk.real
    39                              <1> %endif
    40                                  [BITS 16]
    41                                      %include "source/boot.asm"
    42                              <1>     ; MENU.ASM
    43                              <1> %include 'source/signature.asm'
    44                              <2> signature:
    45 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    46 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    47 00000011 696C642000          <2>
    48 00000016 D6000000            <2> dd 214	;version number
    49                              <2> signatureend:
    50                              <1> menustart:	
    51 0000001A 8CC8                <1> 	mov ax, cs
    52 0000001C 8ED8                <1> 	mov ds, ax
    53 0000001E 8EC0                <1> 	mov es, ax
    54 00000020 8ED0                <1> 	mov ss, ax
    55 00000022 880E[1961]          <1> 	mov [DriveNumber], cl
    56 00000026 668916[1A61]        <1> 	mov [lbaad], edx
    57                              <1> %ifdef io.serial
    58                              <1> 	call getmemorysize
    59                              <1> 	mov si, serialmsg
    60                              <1> 	call printrm
    61                              <1> 	jmp pmode
    62                              <1> serialmsg: db "Using serial port 1 for I/O.",0
    63                              <1> %else
    64 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    65 0000002E E95700              <1> 	jmp pmode
    66                              <1> %endif
    67                              <1> 	
    68                              <1> vgaset:
    69 00000031 B81200              <1> 	mov ax, 12h
    70 00000034 31DB                <1> 	xor bx, bx
    71 00000036 CD10                <1> 	int 10h
    72 00000038 C606[1861]00        <1> 	mov byte [guion], 0
    73 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
    74 00000040 C3                  <1> 	ret
    75                              <1> 
    76                              <1> getmemorysize:
    77 00000041 BF[1E61]            <1> 	mov di, memlistbuf
    78 00000044 6631DB              <1> 	xor ebx, ebx
    79                              <1> getmemsizeloop:
    80 00000047 66B820E80000        <1> 	mov eax, 0xE820
    81 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
    82 00000053 66B918000000        <1> 	mov ecx, 24
    83 00000059 CD15                <1> 	int 0x15
    84 0000005B 81C71800            <1> 	add di, 24
    85 0000005F 81FF[5E63]          <1> 	cmp di, memlistend
    86 00000063 7309                <1> 	jae nomoregetmemsize
    87 00000065 6681FB00000000      <1> 	cmp ebx, 0
    88 0000006C 75D9                <1> 	jne getmemsizeloop
    89                              <1> nomoregetmemsize:
    90 0000006E 81EF[1E61]          <1> 	sub di, memlistbuf
    91 00000072 893E[5E63]          <1> 	mov [memlistend], di
    92 00000076 C3                  <1> 	ret
    93                              <1> 	
    94                              <1> printrm:			; 'si' comes in with string address
    95 00000077 BB0700              <1>     mov bx,07		; write to display
    96 0000007A B40E                <1>     mov ah,0Eh		; screen function
    97 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
    98 0000007E 3C00                <1>     cmp al,0		; look for terminator 
    99 00000080 7405                <1>     je .done		; zero byte at end of string
   100 00000082 CD10                <1>     int 10h		; write character to screen.    
   101 00000084 46                  <1> 	inc si	     	; move to next character
   102 00000085 EBF5                <1>     jmp .lp		; loop
   103 00000087 C3                  <1> .done: ret
   104                                      %include "source/pmode.asm"
   105                              <1> [BITS 16]
   106                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   107                              <1> ;	16-bit real mode
   108                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   109                              <1> 
   110                              <1> pmode:
   111 00000088 6631C0              <1> 	xor eax, eax
   112 0000008B 6631DB              <1> 	xor ebx, ebx
   113 0000008E 6631C9              <1> 	xor ecx, ecx
   114 00000091 6631D2              <1> 	xor edx, edx
   115 00000094 6631F6              <1> 	xor esi, esi
   116 00000097 6631FF              <1> 	xor edi, edi
   117 0000009A BA9200              <1> 	mov dx, 0x92
   118 0000009D EC                  <1> 	in al, dx	;;A20
   119 0000009E 0C02                <1> 	or al, 2
   120 000000A0 EE                  <1> 	out dx, al
   121 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   122 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   123 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   124 000000AB A3[3D03]            <1> 	mov [gdt2 + 2],ax
   125 000000AE A3[4503]            <1> 	mov [gdt3 + 2],ax
   126 000000B1 66C1E810            <1> 	shr eax,16
   127 000000B5 A2[3F03]            <1> 	mov [gdt2 + 4],al
   128 000000B8 A2[4703]            <1> 	mov [gdt3 + 4],al
   129 000000BB 8826[4203]          <1> 	mov [gdt2 + 7],ah
   130 000000BF 8826[4A03]          <1> 	mov [gdt3 + 7],ah
   131                              <1> 
   132 000000C3 66B8[5E630000]      <1> 	mov eax, initialstack
   133 000000C9 660306[1D02]        <1> 	add eax, [newcodecache]
   134 000000CE A3[3503]            <1> 	mov [gdts + 2],ax
   135 000000D1 66C1E810            <1> 	shr eax, 16
   136 000000D5 A2[3703]            <1> 	mov [gdts + 4],al
   137 000000D8 8826[3A03]          <1> 	mov [gdts + 7], ah
   138                              <1> 	
   139 000000DC 66A1[1D02]          <1> 	mov eax, [newcodecache]
   140 000000E0 A3[4D03]            <1> 	mov [gdt4 + 2],ax
   141 000000E3 A3[5503]            <1> 	mov [gdt5 + 2],ax
   142 000000E6 A3[5D03]            <1> 	mov [gdtv8086 + 2], ax
   143 000000E9 A3[6503]            <1> 	mov [gdtv80862 + 2], ax
   144 000000EC 66C1E810            <1> 	shr eax,16
   145 000000F0 A2[4F03]            <1> 	mov [gdt4 + 4],al
   146 000000F3 A2[5703]            <1> 	mov [gdt5 + 4],al
   147 000000F6 A2[5F03]            <1> 	mov [gdtv8086 + 4],al
   148 000000F9 A2[6703]            <1> 	mov [gdtv80862 + 4],al
   149 000000FC 8826[5203]          <1> 	mov [gdt4 + 7],ah
   150 00000100 8826[5A03]          <1> 	mov [gdt5 + 7],ah
   151 00000104 8826[6203]          <1> 	mov [gdtv8086 + 7],ah
   152 00000108 8826[6A03]          <1> 	mov [gdtv80862 + 7],ah
   153                              <1> 	
   154 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   155 00000112 660306[1D02]        <1> 	add eax, [newcodecache]
   156 00000117 A3[6D03]            <1> 	mov [gdtdos + 2],ax
   157 0000011A A3[7503]            <1> 	mov [gdtdos2 + 2],ax
   158 0000011D 66C1E810            <1> 	shr eax,16
   159 00000121 A2[6F03]            <1> 	mov [gdtdos + 4],al
   160 00000124 A2[7703]            <1> 	mov [gdtdos2 + 4],al
   161 00000127 8826[7203]          <1> 	mov [gdtdos + 7],ah
   162 0000012B 8826[7A03]          <1> 	mov [gdtdos2 + 7],ah
   163                              <1> 	
   164                              <1> ; fix up gdt and idt
   165 0000012F 67668D83[23030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   166 00000137 66A3[1903]          <1> 	mov [gdtr + 2],eax
   167 0000013B 67668D83[7B030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   168 00000143 66A3[1F03]          <1> 	mov [idtr + 2],eax
   169 00000147 FA                  <1> 	cli
   170 00000148 0F0116[1703]        <1> 	lgdt [gdtr]
   171 0000014D 0F011E[1D03]        <1> 	lidt [idtr]
   172 00000152 6631DB              <1> 	xor ebx, ebx
   173 00000155 8CDB                <1> 	mov bx, ds
   174 00000157 66891E[1902]        <1> 	mov [basecache], ebx
   175 0000015C 0F20C0              <1> 	mov eax,cr0
   176 0000015F 0C01                <1> 	or al,1
   177 00000161 0F22C0              <1> 	mov cr0,eax
   178 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   179                              <1> [BITS 32]
   180                              <1> do_pm:
   181 00000169 31C0                <1> 	xor eax, eax
   182 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   183 0000016F 8ED8                <1> 	mov ds, ax
   184 00000171 8EC0                <1> 	mov es, ax
   185 00000173 8EE0                <1> 	mov fs, ax
   186 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   187 00000179 8EE8                <1> 	mov gs, ax
   188                              <1> 	
   189                              <1> copykernel:
   190 0000017B 648B06              <1> 	mov eax, [fs:esi]
   191 0000017E 658906              <1> 	mov [gs:esi], eax
   192 00000181 81C604000000        <1> 	add esi, 4
   193 00000187 81FE[5E630000]      <1> 	cmp esi, bsscopy
   194 0000018D 72EC                <1> 	jb copykernel
   195 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   196                              <1> 	
   197                              <1> done_copy:
   198 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   199 0000019A 8ED8                <1> 	mov ds, ax
   200 0000019C 8EC0                <1> 	mov es, ax
   201 0000019E 8EE0                <1> 	mov fs, ax
   202                              <1> 	;mov ax, STACK_SEL
   203 000001A0 8ED0                <1> 	mov ss, ax
   204 000001A2 BC[FE720000]        <1> 	mov esp, stackend
   205 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   206 000001AB 8EE8                <1> 	mov gs, ax
   207                              <1> 	
   208 000001AD E8CD480000          <1> 	call initialize	;initialize drivers
   209                              <1> 	
   210 000001B2 A1[1D020000]        <1> 	mov eax, [newcodecache]
   211 000001B7 C1E804              <1> 	shr eax, 4
   212 000001BA A3[19020000]        <1> 	mov [basecache], eax
   213                              <1> 	
   214 000001BF BE[CF381100]        <1> 	mov esi, bssend
   215 000001C4 31C0                <1> 	xor eax, eax
   216                              <1> clearkernelbuffers:
   217 000001C6 8906                <1> 	mov [esi], eax
   218 000001C8 81EE04000000        <1> 	sub esi, 4
   219 000001CE 81FE[5E630000]      <1> 	cmp esi, bsscopy
   220 000001D4 77F0                <1> 	ja clearkernelbuffers
   221 000001D6 FB                  <1> 	sti
   222                              <1> 
   223                              <1> getmemoryspace:
   224 000001D7 BE[1E610000]        <1> 	mov esi, memlistbuf
   225 000001DC 31FF                <1> 	xor edi, edi
   226 000001DE 668B3D[5E630000]    <1> 	mov di, [memlistend]
   227 000001E5 01F7                <1> 	add edi, esi
   228 000001E7 31C0                <1> 	xor eax, eax
   229                              <1> memoryspaceaddition:
   230 000001E9 39FE                <1> 	cmp esi, edi
   231 000001EB 7322                <1> 	jae finishedmemspacecalc
   232 000001ED 81C608000000        <1> 	add esi, 8
   233 000001F3 8B0E                <1> 	mov ecx, [esi]
   234 000001F5 81C608000000        <1> 	add esi, 8
   235 000001FB 8B1E                <1> 	mov ebx, [esi]
   236 000001FD 81C608000000        <1> 	add esi, 8
   237 00000203 81FB01000000        <1> 	cmp ebx, 1
   238 00000209 75DE                <1> 	jne memoryspaceaddition
   239 0000020B 01C8                <1> 	add eax, ecx
   240 0000020D EBDA                <1> 	jmp memoryspaceaddition
   241                              <1> finishedmemspacecalc:
   242 0000020F A3[26020000]        <1> 	mov [memoryspace], eax
   243                              <1> %ifdef gui.included
   244                              <1> 	cmp byte [guion], 0
   245                              <1> 	je near normalstartup
   246                              <1> 	mov ebx, [basecache]
   247                              <1> 	shl ebx, 4
   248                              <1> 	mov edi, [physbaseptr]
   249                              <1> 	sub edi, ebx
   250                              <1> 	mov [physbaseptr], edi
   251                              <1> 	jmp guiboot
   252                              <1> %endif
   253                              <1> normalstartup:
   254 00000214 E932230000          <1> 	jmp os
   255                              <1> 	
   256 00000219 00000000            <1> basecache dd 0
   257 0000021D 00001000            <1> newcodecache dd 0x100000
   258                              <1> 
   259 00000221 00                  <1> testingcpuspeed db 0
   260 00000222 00000000            <1> cpuspeedperint dd 0
   261 00000226 00000000            <1> memoryspace dd 0
   262 0000022A 7D0A                <1> pitdiv dw 2685
   263 0000022C 00000000            <1> timeseconds dd 0
   264 00000230 00000000            <1> timenanoseconds dd 0
   265 00000234 2E562200            <1> timeinterval dd 2250286
   266 00000238 00                  <1> soundon db 0
   267 00000239 0000                <1> soundrepititions dw 0
   268 0000023B 00000000            <1> soundpos dd 0
   269 0000023F 00000000            <1> soundendpos dd 0
   270                              <1> 
   271                              <1> cpuspeedend:
   272 00000243 C605[21020000]00    <1> 	mov byte [testingcpuspeed], 0
   273 0000024A A3[22020000]        <1> 	mov [cpuspeedperint], eax
   274 0000024F B8[21400000]        <1> 	mov eax, cpuspeedloopend
   275 00000254 890424              <1> 	mov [esp], eax
   276 00000257 E9B4000000          <1> 	jmp handled
   277                              <1> 
   278                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   279                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   280                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   281                              <1> 
   282                              <1> pitinterrupt: ;this controls threading
   283 0000025C FA                  <1> 	cli
   284 0000025D 803D[21020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   285 00000264 74DD                <1> 	je cpuspeedend
   286                              <1> 		
   287 00000266 E87E000000          <1> 	call timekeeper ;this updates the internal time
   288                              <1> 	
   289 0000026B 803D[38020000]01    <1> 	cmp byte [soundon], 1
   290 00000272 0F8443420000        <1> 	je near PCSpeakerRAW
   291                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   292                              <1> %ifdef threads.included
   293 00000278 803D[1A4F0000]01    <1> 	cmp byte [threadson], 1
   294 0000027F 0F84354C0000        <1> 	je near threadswitch
   295                              <1> %endif
   296                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   297 00000285 803D[1A4F0000]00    <1> 	cmp byte [threadson], 0
   298 0000028C 0F847E000000        <1> 	je near handled
   299 00000292 FA                  <1> 	cli
   300 00000293 60                  <1> 	pusha
   301 00000294 E460                <1> 	in al, 60h
   302 00000296 3C01                <1> 	cmp al, 1		;escape
   303 00000298 7405                <1> 	je userint
   304 0000029A E96F000000          <1> 	jmp handled2
   305                              <1> userint:
   306                              <1> 	;UNMASK ALL INTS
   307 0000029F 30C0                <1> 	xor al, al
   308 000002A1 E621                <1> 	out 0x21, al
   309 000002A3 30C0                <1> 	xor al, al
   310 000002A5 E6A1                <1> 	out 0xA1, al
   311 000002A7 B020                <1> 	mov al, 0x20
   312 000002A9 E6A0                <1> 	out 0xA0, al
   313 000002AB E620                <1> 	out 0x20, al
   314                              <1> 	;RESET PIT DIVISOR
   315 000002AD 66A1[2A020000]      <1> 	mov ax, [pitdiv]
   316 000002B3 E640                <1> 	out 0x40, al
   317 000002B5 66C1C008            <1> 	rol ax, 8
   318 000002B9 E640                <1> 	out 0x40, al
   319                              <1> 	;RESET PIC
   320 000002BB B020                <1> 	mov al, 0x20
   321 000002BD E620                <1> 	out 0x20, al
   322 000002BF 61                  <1> 	popa
   323 000002C0 FB                  <1> 	sti
   324 000002C1 BC[FE720000]        <1> 	mov esp, stackend ;reset stack
   325 000002C6 E932240000          <1> 	jmp nwcmd
   326                              <1> %ifdef rtl8139.included
   327                              <1> rtl8139.irq:
   328 000002CB FA                  <1> 	cli
   329 000002CC 60                  <1> 	pusha
   330 000002CD 8B15[3B470000]      <1> 	mov edx, [basenicaddr]
   331 000002D3 81C23E000000        <1> 	add edx, rtl8139.ISR
   332 000002D9 31C0                <1> 	xor eax, eax
   333 000002DB 66ED                <1> 	in ax, dx
   334 000002DD 89C1                <1> 	mov ecx, eax
   335 000002DF E8EB280000          <1> 	call showhex
   336 000002E4 E925000000          <1> 	jmp handled2
   337                              <1> %endif
   338                              <1> %ifdef sound.included
   339                              <1> sblaster.irq:
   340                              <1> 	cli
   341                              <1> 	pusha
   342                              <1> 	cmp byte [SoundBlaster], 1
   343                              <1> 	je near sblastercont
   344                              <1> 	jmp handled2
   345                              <1> %endif
   346                              <1> 	
   347                              <1> timekeeper:
   348 000002E9 50                  <1> 	push eax
   349 000002EA A1[30020000]        <1> 	mov eax, [timenanoseconds]
   350 000002EF 0305[34020000]      <1> 	add eax, [timeinterval]
   351 000002F5 3D00CA9A3B          <1> 	cmp eax, 1000000000
   352 000002FA 720B                <1> 	jb nonanosecondrollover
   353 000002FC FF05[2C020000]      <1> 	inc dword [timeseconds]
   354 00000302 2D00CA9A3B          <1> 	sub eax, 1000000000
   355                              <1> nonanosecondrollover:
   356 00000307 A3[30020000]        <1> 	mov [timenanoseconds], eax
   357 0000030C 58                  <1> 	pop eax
   358 0000030D C3                  <1> 	ret
   359                              <1> 	
   360                              <1> handled2:
   361 0000030E 61                  <1> 	popa
   362                              <1> handled3:
   363 0000030F FB                  <1> 	sti
   364                              <1> handled:
   365 00000310 50                  <1> 	push eax
   366 00000311 B020                <1> 	mov al, 0x20
   367 00000313 E620                <1> 	out 0x20, al
   368 00000315 58                  <1> 	pop eax
   369 00000316 CF                  <1> 	iret
   370                              <1> [BITS 16]
   371                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   372                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   373                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   374 00000317 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   375 00000319 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   376                              <1> 
   377 0000031D FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   378 0000031F 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   379                              <1> 
   380                              <1> 
   381 00000323 0000                <1> gdt:	dw 0			; limit 15:0
   382 00000325 0000                <1> 	dw 0			; base 15:0
   383 00000327 00                  <1> 	db 0			; base 23:16
   384 00000328 00                  <1> 	db 0			; type
   385 00000329 00                  <1> 	db 0			; limit 19:16, flags
   386 0000032A 00                  <1> 	db 0			; base 31:24
   387                              <1> ; linear data segment descriptor
   388                              <1> LINEAR_SEL	equ	$-gdt
   389 0000032B FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   390 0000032D 0000                <1> 	dw 0			; base for this one is always 0
   391 0000032F 00                  <1> 	db 0
   392 00000330 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   393 00000331 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   394 00000332 00                  <1> 	db 0
   395                              <1> STACK_SEL	equ $-gdt
   396 00000333 0200                <1> gdts:	dw 2;(stackend)/4096
   397 00000335 0000                <1> 	dw 0
   398 00000337 00                  <1> 	db 0
   399 00000338 92                  <1> 	db 0x92
   400 00000339 CF                  <1> 	db 0xCF
   401 0000033A 00                  <1> 	db 0
   402                              <1> ; code segment descriptor
   403                              <1> SYS_CODE_SEL	equ	$-gdt
   404 0000033B FFFF                <1> gdt2:	dw 0xFFFF
   405 0000033D 0000                <1> 	dw 0			; (base gets set above)
   406 0000033F 00                  <1> 	db 0
   407 00000340 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   408 00000341 CF                  <1> 	db 0xCF
   409 00000342 00                  <1> 	db 0
   410                              <1> ; data segment descriptor
   411                              <1> SYS_DATA_SEL	equ	$-gdt
   412 00000343 FFFF                <1> gdt3:	dw 0xFFFF
   413 00000345 0000                <1> 	dw 0			; (base gets set above)
   414 00000347 00                  <1> 	db 0
   415 00000348 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   416 00000349 CF                  <1> 	db 0xCF
   417 0000034A 00                  <1> 	db 0
   418                              <1> NEW_CODE_SEL	equ	$-gdt
   419 0000034B FFFF                <1> gdt4:	dw 0xFFFF
   420 0000034D 0000                <1> 	dw 0			; (base gets set above)
   421 0000034F 00                  <1> 	db 0
   422 00000350 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   423 00000351 CF                  <1> 	db 0xCF
   424 00000352 00                  <1> 	db 0
   425                              <1> ; data segment descriptor
   426                              <1> NEW_DATA_SEL	equ	$-gdt
   427 00000353 FFFF                <1> gdt5:	dw 0xFFFF
   428 00000355 0000                <1> 	dw 0			; (base gets set above)
   429 00000357 00                  <1> 	db 0
   430 00000358 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   431 00000359 CF                  <1> 	db 0xCF
   432 0000035A 00                  <1> 	db 0
   433                              <1> V8086_CODE_SEL	equ $-gdt
   434 0000035B FFFF                <1> gdtv8086: dw 0xFFFF
   435 0000035D 0000                <1> 	dw 0
   436 0000035F 00                  <1> 	db 0
   437 00000360 9A                  <1> 	db 0x9A
   438 00000361 8F                  <1> 	db 0x8F
   439 00000362 00                  <1> 	db 0
   440                              <1> V8086_DATA_SEL	equ $-gdt
   441 00000363 FFFF                <1> gdtv80862: dw 0xFFFF
   442 00000365 0000                <1> 	dw 0
   443 00000367 00                  <1> 	db 0
   444 00000368 92                  <1> 	db 0x92
   445 00000369 8F                  <1> 	db 0x8F
   446 0000036A 00                  <1> 	db 0
   447                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   448 0000036B 0001                <1> gdtdos:	dw 256	;give it 1 MB
   449 0000036D 0000                <1> 	dw 0
   450 0000036F 00                  <1> 	db 0
   451 00000370 9A                  <1> 	db 0x9A
   452 00000371 8F                  <1> 	db 0x8F ;16 bit
   453 00000372 00                  <1> 	db 0
   454                              <1> DOS_DATA_SEL 	equ $-gdt
   455 00000373 0001                <1> gdtdos2:	dw 256
   456 00000375 0000                <1> 	dw 0
   457 00000377 00                  <1> 	db 0
   458 00000378 92                  <1> 	db 0x92
   459 00000379 8F                  <1> 	db 0x8F ;16 bit
   460 0000037A 00                  <1> 	db 0
   461                              <1> gdt_end:
   462                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   463                              <1> ;	interrupt descriptor table (IDT)
   464                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   465                              <1> ; 32 reserved interrupts:
   466                              <1> idt:	
   467                              <1> %assign i 0
   468                              <1> %rep    32
   469                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   470                              <1> %assign i i+1
   471                              <1> %endrep
   472 0000037B [9C0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   473                              <2> %assign i i+1
   474 00000383 [A80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   475                              <2> %assign i i+1
   476 0000038B [B40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   477                              <2> %assign i i+1
   478 00000393 [C00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   479                              <2> %assign i i+1
   480 0000039B [CC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   481                              <2> %assign i i+1
   482 000003A3 [D80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   483                              <2> %assign i i+1
   484 000003AB [E40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   485                              <2> %assign i i+1
   486 000003B3 [F00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   487                              <2> %assign i i+1
   488 000003BB [FC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   489                              <2> %assign i i+1
   490 000003C3 [080D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   491                              <2> %assign i i+1
   492 000003CB [140D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   493                              <2> %assign i i+1
   494 000003D3 [200D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   495                              <2> %assign i i+1
   496 000003DB [2C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   497                              <2> %assign i i+1
   498 000003E3 [380D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   499                              <2> %assign i i+1
   500 000003EB [440D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   501                              <2> %assign i i+1
   502 000003F3 [500D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   503                              <2> %assign i i+1
   504 000003FB [5C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   505                              <2> %assign i i+1
   506 00000403 [680D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   507                              <2> %assign i i+1
   508 0000040B [740D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   509                              <2> %assign i i+1
   510 00000413 [800D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   511                              <2> %assign i i+1
   512 0000041B [8C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   513                              <2> %assign i i+1
   514 00000423 [980D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   515                              <2> %assign i i+1
   516 0000042B [A40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   517                              <2> %assign i i+1
   518 00000433 [B00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   519                              <2> %assign i i+1
   520 0000043B [BC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   521                              <2> %assign i i+1
   522 00000443 [C80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   523                              <2> %assign i i+1
   524 0000044B [D40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   525                              <2> %assign i i+1
   526 00000453 [E00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   527                              <2> %assign i i+1
   528 0000045B [EC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   529                              <2> %assign i i+1
   530 00000463 [F80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   531                              <2> %assign i i+1
   532 0000046B [040E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   533                              <2> %assign i i+1
   534 00000473 [100E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   535                              <2> %assign i i+1
   536 0000047B [1C24]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   537 00000483 [2024]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   538                              <1> %assign i 0x22
   539                              <1> %rep 14
   540                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   541                              <1> %assign i +1
   542                              <1> %endrep
   543 0000048B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   544                              <2> %assign i +1
   545 00000493 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   546                              <2> %assign i +1
   547 0000049B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i +1
   549 000004A3 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   550                              <2> %assign i +1
   551 000004AB [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   552                              <2> %assign i +1
   553 000004B3 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   554                              <2> %assign i +1
   555 000004BB [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   556                              <2> %assign i +1
   557 000004C3 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   558                              <2> %assign i +1
   559 000004CB [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   560                              <2> %assign i +1
   561 000004D3 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   562                              <2> %assign i +1
   563 000004DB [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   564                              <2> %assign i +1
   565 000004E3 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   566                              <2> %assign i +1
   567 000004EB [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   568                              <2> %assign i +1
   569 000004F3 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   570                              <2> %assign i +1
   571                              <1> ;INT 30h for os use and 3rd party use:
   572 000004FB [E219]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   573                              <1> %assign i 0x31
   574                              <1> %rep 15
   575                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   576                              <1> %assign i +1
   577                              <1> %endrep
   578 00000503 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   579                              <2> %assign i +1
   580 0000050B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i +1
   582 00000513 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i +1
   584 0000051B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i +1
   586 00000523 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i +1
   588 0000052B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i +1
   590 00000533 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i +1
   592 0000053B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i +1
   594 00000543 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i +1
   596 0000054B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i +1
   598 00000553 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i +1
   600 0000055B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i +1
   602 00000563 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i +1
   604 0000056B [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i +1
   606 00000573 [1003]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i +1
   608                              <1> ;and here we are at 0x40
   609                              <1> ;here are all the irq's
   610 0000057B [5C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   611 00000583 [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   612 0000058B [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   613 00000593 [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   614 0000059B [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   615                              <1> 	%ifdef sound.included
   616                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   617                              <1> 	%else
   618 000005A3 [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   619                              <1> 	%endif
   620 000005AB [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   621 000005B3 [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   622 000005BB [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   623 000005C3 [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   624 000005CB [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   625                              <1> 	%ifdef rtl8139.included
   626 000005D3 [CB02]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   627                              <1> 	%else
   628                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   629                              <1> 	%endif
   630 000005DB [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   631 000005E3 [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   632 000005EB [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   633 000005F3 [1003]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   634                              <1> ;This brings me up to 0x50
   635                              <1> %assign i 0x50
   636                              <1> %rep 176
   637                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   638                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   639                              <1> %assign i +1
   640                              <1> %endrep
   641 000005FB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   642                              <2> 
   643                              <2> %assign i +1
   644 00000603 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   645                              <2> 
   646                              <2> %assign i +1
   647 0000060B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   648                              <2> 
   649                              <2> %assign i +1
   650 00000613 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   651                              <2> 
   652                              <2> %assign i +1
   653 0000061B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   654                              <2> 
   655                              <2> %assign i +1
   656 00000623 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   657                              <2> 
   658                              <2> %assign i +1
   659 0000062B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   660                              <2> 
   661                              <2> %assign i +1
   662 00000633 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   663                              <2> 
   664                              <2> %assign i +1
   665 0000063B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   666                              <2> 
   667                              <2> %assign i +1
   668 00000643 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   669                              <2> 
   670                              <2> %assign i +1
   671 0000064B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   672                              <2> 
   673                              <2> %assign i +1
   674 00000653 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   675                              <2> 
   676                              <2> %assign i +1
   677 0000065B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   678                              <2> 
   679                              <2> %assign i +1
   680 00000663 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   681                              <2> 
   682                              <2> %assign i +1
   683 0000066B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   684                              <2> 
   685                              <2> %assign i +1
   686 00000673 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   687                              <2> 
   688                              <2> %assign i +1
   689 0000067B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   690                              <2> 
   691                              <2> %assign i +1
   692 00000683 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   693                              <2> 
   694                              <2> %assign i +1
   695 0000068B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   696                              <2> 
   697                              <2> %assign i +1
   698 00000693 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   699                              <2> 
   700                              <2> %assign i +1
   701 0000069B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   702                              <2> 
   703                              <2> %assign i +1
   704 000006A3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   705                              <2> 
   706                              <2> %assign i +1
   707 000006AB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   708                              <2> 
   709                              <2> %assign i +1
   710 000006B3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   711                              <2> 
   712                              <2> %assign i +1
   713 000006BB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   714                              <2> 
   715                              <2> %assign i +1
   716 000006C3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   717                              <2> 
   718                              <2> %assign i +1
   719 000006CB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   720                              <2> 
   721                              <2> %assign i +1
   722 000006D3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   723                              <2> 
   724                              <2> %assign i +1
   725 000006DB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   726                              <2> 
   727                              <2> %assign i +1
   728 000006E3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   729                              <2> 
   730                              <2> %assign i +1
   731 000006EB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   732                              <2> 
   733                              <2> %assign i +1
   734 000006F3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   735                              <2> 
   736                              <2> %assign i +1
   737 000006FB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   738                              <2> 
   739                              <2> %assign i +1
   740 00000703 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   741                              <2> 
   742                              <2> %assign i +1
   743 0000070B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   744                              <2> 
   745                              <2> %assign i +1
   746 00000713 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   747                              <2> 
   748                              <2> %assign i +1
   749 0000071B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   750                              <2> 
   751                              <2> %assign i +1
   752 00000723 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   753                              <2> 
   754                              <2> %assign i +1
   755 0000072B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   756                              <2> 
   757                              <2> %assign i +1
   758 00000733 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   759                              <2> 
   760                              <2> %assign i +1
   761 0000073B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   762                              <2> 
   763                              <2> %assign i +1
   764 00000743 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   765                              <2> 
   766                              <2> %assign i +1
   767 0000074B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   768                              <2> 
   769                              <2> %assign i +1
   770 00000753 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   771                              <2> 
   772                              <2> %assign i +1
   773 0000075B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   774                              <2> 
   775                              <2> %assign i +1
   776 00000763 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   777                              <2> 
   778                              <2> %assign i +1
   779 0000076B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   780                              <2> 
   781                              <2> %assign i +1
   782 00000773 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   783                              <2> 
   784                              <2> %assign i +1
   785 0000077B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   786                              <2> 
   787                              <2> %assign i +1
   788 00000783 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   789                              <2> 
   790                              <2> %assign i +1
   791 0000078B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   792                              <2> 
   793                              <2> %assign i +1
   794 00000793 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   795                              <2> 
   796                              <2> %assign i +1
   797 0000079B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   798                              <2> 
   799                              <2> %assign i +1
   800 000007A3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   801                              <2> 
   802                              <2> %assign i +1
   803 000007AB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   804                              <2> 
   805                              <2> %assign i +1
   806 000007B3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   807                              <2> 
   808                              <2> %assign i +1
   809 000007BB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 000007C3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 000007CB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 000007D3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 000007DB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 000007E3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 000007EB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 000007F3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 000007FB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000803 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000080B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000813 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000081B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000823 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000082B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000833 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 0000083B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 00000843 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 0000084B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 00000853 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000085B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000863 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 0000086B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000873 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 0000087B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000883 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000088B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000893 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000089B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 000008A3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 000008AB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 000008B3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 000008BB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 000008C3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 000008CB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 000008D3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 000008DB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 000008E3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 000008EB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 000008F3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000008FB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000903 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000090B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000913 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000091B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000923 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000092B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000933 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000093B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000943 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 0000094B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000953 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000095B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000963 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 0000096B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000973 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 0000097B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000983 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000098B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000993 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000099B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 000009A3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 000009AB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 000009B3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 000009BB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 000009C3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 000009CB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 000009D3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 000009DB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 000009E3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 000009EB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 000009F3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000009FB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000A03 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 00000A0B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000A13 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 00000A1B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000A23 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 00000A2B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000A33 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 00000A3B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000A43 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 00000A4B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000A53 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000A5B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000A63 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000A6B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000A73 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000A7B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000A83 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000A8B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000A93 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000A9B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000AA3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000AAB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000AB3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000ABB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000AC3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000ACB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000AD3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000ADB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000AE3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000AEB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000AF3 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000AFB [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000B03 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000B0B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000B13 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000B1B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000B23 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 00000B2B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000B33 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 00000B3B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000B43 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 00000B4B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000B53 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000B5B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000B63 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000B6B [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000B73 [1003]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169                              <1> idt_end:
  1170                              <1> [BITS 32]
  1171                                  	%include "source/realmode.asm"
  1172                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1173                              <1> 			;and the return address is in realmodereturn
  1174 00000B7B FA                  <1> 	cli
  1175 00000B7C A3[8E0C0000]        <1> 	mov [realmodeeax], eax
  1176 00000B81 891D[8A0C0000]      <1> 	mov [realmodeebx], ebx
  1177 00000B87 8925[7C0C0000]      <1> 	mov [pmodeesp], esp
  1178                              <1> 
  1179 00000B8D BB[860C0000]        <1> 	mov ebx, cr0old
  1180                              <1> rmcopytofirstmbyte:
  1181 00000B92 8B03                <1> 	mov eax, [ebx]
  1182 00000B94 658903              <1> 	mov [gs:ebx], eax
  1183 00000B97 81C304000000        <1> 	add ebx, 4
  1184 00000B9D 81FB[960C0000]      <1> 	cmp ebx, realmodeptr
  1185 00000BA3 76ED                <1> 	jbe rmcopytofirstmbyte
  1186                              <1> 
  1187 00000BA5 EA[AC0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1188                              <1> 
  1189                              <1> [BITS 16]
  1190                              <1> protected16bit:
  1191 00000BAC B84000              <1> 	mov ax, V8086_DATA_SEL
  1192 00000BAF 8ED8                <1> 	mov ds, ax
  1193 00000BB1 8EC0                <1> 	mov es, ax
  1194 00000BB3 8EE0                <1> 	mov fs, ax
  1195 00000BB5 8EE8                <1> 	mov gs, ax
  1196 00000BB7 8ED0                <1> 	mov ss, ax
  1197 00000BB9 66BC[FE720000]      <1> 	mov esp, stackend
  1198 00000BBF 0F20C0              <1> 	mov eax, cr0
  1199 00000BC2 66A3[860C]          <1> 	mov [cr0old], eax
  1200 00000BC6 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1201 00000BCC 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1202 00000BCF EA[D40B]0010        <1> 	jmp 0x1000:inrealmode
  1203                              <1> 
  1204                              <1> inrealmode:
  1205 00000BD4 8CC8                <1> 	mov ax, cs
  1206 00000BD6 8ED8                <1> 	mov ds, ax
  1207 00000BD8 8EC0                <1> 	mov es, ax
  1208 00000BDA 8EE0                <1> 	mov fs, ax
  1209 00000BDC 8EE8                <1> 	mov gs, ax
  1210 00000BDE 8ED0                <1> 	mov ss, ax
  1211 00000BE0 BC[FE72]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1212                              <1> 	
  1213 00000BE3 B011                <1> 	mov al, 0x11
  1214 00000BE5 E620                <1> 	out 0x20, al
  1215 00000BE7 E6A0                <1> 	out 0xA0, al
  1216 00000BE9 B008                <1> 	mov al, 0x8		;interrupt for master
  1217 00000BEB E621                <1> 	out 0x21, al
  1218 00000BED B070                <1> 	mov al, 0x70	;interrupt for slave
  1219 00000BEF E6A1                <1> 	out 0xA1, al
  1220 00000BF1 B004                <1> 	mov al, 4
  1221 00000BF3 E621                <1> 	out 0x21, al
  1222 00000BF5 B002                <1> 	mov al, 2
  1223 00000BF7 E6A1                <1> 	out 0xA1, al
  1224 00000BF9 B001                <1> 	mov al, 0x1
  1225 00000BFB E621                <1> 	out 0x21, al
  1226 00000BFD B001                <1> 	mov al, 0x1
  1227 00000BFF E6A1                <1> 	out 0xA1, al
  1228                              <1> 	
  1229 00000C01 0F011E[800C]        <1> 	lidt [idt_real]
  1230 00000C06 FB                  <1> 	sti
  1231                              <1> 
  1232 00000C07 66A1[8E0C]          <1> 	mov eax, [realmodeeax]
  1233 00000C0B 668B1E[8A0C]        <1> 	mov ebx, [realmodeebx]
  1234                              <1> 
  1235 00000C10 FF16[960C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1236                              <1> 
  1237 00000C14 66A3[8E0C]          <1> 	mov [realmodeeax], eax
  1238 00000C18 66891E[8A0C]        <1> 	mov [realmodeebx], ebx
  1239                              <1> 
  1240 00000C1D FA                  <1> 	cli
  1241 00000C1E 0F0116[1703]        <1> 	lgdt [gdtr]
  1242 00000C23 0F011E[1D03]        <1> 	lidt [idtr]
  1243 00000C28 0F20C0              <1> 	mov eax, cr0
  1244 00000C2B 0C01                <1> 	or al, 1
  1245 00000C2D 0F22C0              <1> 	mov cr0,eax
  1246 00000C30 EA[350C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1247                              <1> 
  1248                              <1> [BITS 32]
  1249                              <1> returntopmode:
  1250 00000C35 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1251 00000C39 8ED8                <1> 	mov ds, ax
  1252 00000C3B 8EC0                <1> 	mov es, ax
  1253 00000C3D 8EE0                <1> 	mov fs, ax
  1254 00000C3F 8ED0                <1> 	mov ss, ax
  1255 00000C41 8B25[7C0C0000]      <1> 	mov esp, [pmodeesp]
  1256 00000C47 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1257 00000C4B 8EE8                <1> 	mov gs, ax
  1258                              <1> 
  1259 00000C4D BB[860C0000]        <1> 	mov ebx, cr0old
  1260                              <1> rmcopyfromfirstmbyte:
  1261 00000C52 658B03              <1> 	mov eax, [gs:ebx]
  1262 00000C55 8903                <1> 	mov [ebx], eax
  1263 00000C57 81C304000000        <1> 	add ebx, 4
  1264 00000C5D 81FB[960C0000]      <1> 	cmp ebx, realmodeptr
  1265 00000C63 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1266                              <1> 
  1267 00000C65 E8293E0000          <1> 	call initialize.pic ;reset irq's and masks
  1268 00000C6A FB                  <1> 	sti
  1269 00000C6B A1[8E0C0000]        <1> 	mov eax, [realmodeeax]
  1270 00000C70 8B1D[8A0C0000]      <1> 	mov ebx, [realmodeebx]
  1271 00000C76 FF25[920C0000]      <1> 	jmp dword [realmodereturn]
  1272                              <1> 	
  1273 00000C7C 00000000            <1> pmodeesp dd 0
  1274                              <1> idt_real:
  1275 00000C80 FF03                <1> 	dw 0x3FF
  1276 00000C82 00000000            <1> 	dd 0
  1277 00000C86 00000000            <1> cr0old dd 0
  1278 00000C8A 00000000            <1> realmodeebx dd 0
  1279 00000C8E 00000000            <1> realmodeeax dd 0
  1280 00000C92 00000000            <1> realmodereturn dd 0
  1281 00000C96 0000                <1> realmodeptr dw 0
  1282 00000C98 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1283                                  [BITS 32]
  1284                                      %include "source/exception.asm"
  1285                              <1> %ifdef exceptions.included
  1286                              <1> unhand:	
  1287                              <1> 	%assign i 0
  1288                              <1> 	%rep 32
  1289                              <1> 	mov byte [intprob], i
  1290                              <1> 	jmp unhand2
  1291                              <1> 	%assign i i+1
  1292                              <1> 	%endrep
  1293 00000C9C C605[E30F0000]00    <2>  mov byte [intprob], i
  1294 00000CA3 E974010000          <2>  jmp unhand2
  1295                              <2>  %assign i i+1
  1296 00000CA8 C605[E30F0000]01    <2>  mov byte [intprob], i
  1297 00000CAF E968010000          <2>  jmp unhand2
  1298                              <2>  %assign i i+1
  1299 00000CB4 C605[E30F0000]02    <2>  mov byte [intprob], i
  1300 00000CBB E95C010000          <2>  jmp unhand2
  1301                              <2>  %assign i i+1
  1302 00000CC0 C605[E30F0000]03    <2>  mov byte [intprob], i
  1303 00000CC7 E950010000          <2>  jmp unhand2
  1304                              <2>  %assign i i+1
  1305 00000CCC C605[E30F0000]04    <2>  mov byte [intprob], i
  1306 00000CD3 E944010000          <2>  jmp unhand2
  1307                              <2>  %assign i i+1
  1308 00000CD8 C605[E30F0000]05    <2>  mov byte [intprob], i
  1309 00000CDF E938010000          <2>  jmp unhand2
  1310                              <2>  %assign i i+1
  1311 00000CE4 C605[E30F0000]06    <2>  mov byte [intprob], i
  1312 00000CEB E92C010000          <2>  jmp unhand2
  1313                              <2>  %assign i i+1
  1314 00000CF0 C605[E30F0000]07    <2>  mov byte [intprob], i
  1315 00000CF7 E920010000          <2>  jmp unhand2
  1316                              <2>  %assign i i+1
  1317 00000CFC C605[E30F0000]08    <2>  mov byte [intprob], i
  1318 00000D03 E914010000          <2>  jmp unhand2
  1319                              <2>  %assign i i+1
  1320 00000D08 C605[E30F0000]09    <2>  mov byte [intprob], i
  1321 00000D0F E908010000          <2>  jmp unhand2
  1322                              <2>  %assign i i+1
  1323 00000D14 C605[E30F0000]0A    <2>  mov byte [intprob], i
  1324 00000D1B E9FC000000          <2>  jmp unhand2
  1325                              <2>  %assign i i+1
  1326 00000D20 C605[E30F0000]0B    <2>  mov byte [intprob], i
  1327 00000D27 E9F0000000          <2>  jmp unhand2
  1328                              <2>  %assign i i+1
  1329 00000D2C C605[E30F0000]0C    <2>  mov byte [intprob], i
  1330 00000D33 E9E4000000          <2>  jmp unhand2
  1331                              <2>  %assign i i+1
  1332 00000D38 C605[E30F0000]0D    <2>  mov byte [intprob], i
  1333 00000D3F E9D8000000          <2>  jmp unhand2
  1334                              <2>  %assign i i+1
  1335 00000D44 C605[E30F0000]0E    <2>  mov byte [intprob], i
  1336 00000D4B E9CC000000          <2>  jmp unhand2
  1337                              <2>  %assign i i+1
  1338 00000D50 C605[E30F0000]0F    <2>  mov byte [intprob], i
  1339 00000D57 E9C0000000          <2>  jmp unhand2
  1340                              <2>  %assign i i+1
  1341 00000D5C C605[E30F0000]10    <2>  mov byte [intprob], i
  1342 00000D63 E9B4000000          <2>  jmp unhand2
  1343                              <2>  %assign i i+1
  1344 00000D68 C605[E30F0000]11    <2>  mov byte [intprob], i
  1345 00000D6F E9A8000000          <2>  jmp unhand2
  1346                              <2>  %assign i i+1
  1347 00000D74 C605[E30F0000]12    <2>  mov byte [intprob], i
  1348 00000D7B E99C000000          <2>  jmp unhand2
  1349                              <2>  %assign i i+1
  1350 00000D80 C605[E30F0000]13    <2>  mov byte [intprob], i
  1351 00000D87 E990000000          <2>  jmp unhand2
  1352                              <2>  %assign i i+1
  1353 00000D8C C605[E30F0000]14    <2>  mov byte [intprob], i
  1354 00000D93 E984000000          <2>  jmp unhand2
  1355                              <2>  %assign i i+1
  1356 00000D98 C605[E30F0000]15    <2>  mov byte [intprob], i
  1357 00000D9F E978000000          <2>  jmp unhand2
  1358                              <2>  %assign i i+1
  1359 00000DA4 C605[E30F0000]16    <2>  mov byte [intprob], i
  1360 00000DAB E96C000000          <2>  jmp unhand2
  1361                              <2>  %assign i i+1
  1362 00000DB0 C605[E30F0000]17    <2>  mov byte [intprob], i
  1363 00000DB7 E960000000          <2>  jmp unhand2
  1364                              <2>  %assign i i+1
  1365 00000DBC C605[E30F0000]18    <2>  mov byte [intprob], i
  1366 00000DC3 E954000000          <2>  jmp unhand2
  1367                              <2>  %assign i i+1
  1368 00000DC8 C605[E30F0000]19    <2>  mov byte [intprob], i
  1369 00000DCF E948000000          <2>  jmp unhand2
  1370                              <2>  %assign i i+1
  1371 00000DD4 C605[E30F0000]1A    <2>  mov byte [intprob], i
  1372 00000DDB E93C000000          <2>  jmp unhand2
  1373                              <2>  %assign i i+1
  1374 00000DE0 C605[E30F0000]1B    <2>  mov byte [intprob], i
  1375 00000DE7 E930000000          <2>  jmp unhand2
  1376                              <2>  %assign i i+1
  1377 00000DEC C605[E30F0000]1C    <2>  mov byte [intprob], i
  1378 00000DF3 E924000000          <2>  jmp unhand2
  1379                              <2>  %assign i i+1
  1380 00000DF8 C605[E30F0000]1D    <2>  mov byte [intprob], i
  1381 00000DFF E918000000          <2>  jmp unhand2
  1382                              <2>  %assign i i+1
  1383 00000E04 C605[E30F0000]1E    <2>  mov byte [intprob], i
  1384 00000E0B E90C000000          <2>  jmp unhand2
  1385                              <2>  %assign i i+1
  1386 00000E10 C605[E30F0000]1F    <2>  mov byte [intprob], i
  1387 00000E17 E900000000          <2>  jmp unhand2
  1388                              <2>  %assign i i+1
  1389                              <1> unhand2:
  1390 00000E1C FA                  <1> 	cli
  1391 00000E1D 1E                  <1> 	push ds
  1392 00000E1E 06                  <1> 	push es
  1393 00000E1F 0FA0                <1> 	push fs
  1394 00000E21 0FA8                <1> 	push gs
  1395 00000E23 16                  <1> 	push ss
  1396 00000E24 60                  <1> 	pushad
  1397                              <1> %ifdef gui.included
  1398                              <1> 	cmp byte [guion], 0
  1399                              <1> 	je near noguiunhandstuff
  1400                              <1> 	mov word [locunhandy], 8
  1401                              <1> 	mov word [locunhandx], 8
  1402                              <1> 	mov bx, [background]
  1403                              <1> 	mov [backgroundcache], bx
  1404                              <1> 	mov byte [mousedisabled],1
  1405                              <1> 	mov bx, 1111100000000000b
  1406                              <1> 	mov [background], bx
  1407                              <1> noguiunhandstuff:
  1408                              <1> %endif
  1409 00000E25 89E6                <1> 	mov esi, esp
  1410 00000E27 8935[D10F0000]      <1> 	mov [espfirst], esi
  1411 00000E2D 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1412 00000E33 8935[CD0F0000]      <1> 	mov [esploc], esi
  1413 00000E39 BE[EC0F0000]        <1> 	mov esi, unhandmsg
  1414 00000E3E 8935[D50F0000]      <1> 	mov [esiloc], esi
  1415 00000E44 31C9                <1> 	xor ecx, ecx
  1416 00000E46 8A0D[E30F0000]      <1> 	mov cl, [intprob]
  1417 00000E4C BB[7F130000]        <1> 	mov ebx, errortypes
  1418 00000E51 C1E102              <1> 	shl ecx, 2
  1419 00000E54 01CB                <1> 	add ebx, ecx
  1420 00000E56 81FB[BF130000]      <1> 	cmp ebx, errortypesend
  1421 00000E5C 7205                <1> 	jb gooderrortype
  1422 00000E5E BB[BF130000]        <1> 	mov ebx, errortypesend
  1423                              <1> gooderrortype:
  1424 00000E63 8B33                <1> 	mov esi, [ebx]
  1425                              <1> %ifdef gui.included
  1426                              <1> 	cmp byte [guion], 0
  1427                              <1> 	je near errortext
  1428                              <1> 	mov cx, [locunhandy]
  1429                              <1> 	mov dx, [locunhandx]
  1430                              <1> 	mov ax, 1
  1431                              <1> 	xor bx, bx
  1432                              <1> 	call showstring2
  1433                              <1> 	mov [locunhandy], cx
  1434                              <1> 	mov [locunhandx], dx
  1435                              <1> 	jmp errortextdone
  1436                              <1> %endif
  1437                              <1> errortext:
  1438 00000E65 E8B00C0000          <1> 	call print		;;get the error message and print it
  1439                              <1> errortextdone:
  1440 00000E6A 31C9                <1> 	xor ecx, ecx
  1441 00000E6C 8A0D[E30F0000]      <1> 	mov cl, [intprob]
  1442 00000E72 E825010000          <1> 	call expdump
  1443                              <1> dumpstack:
  1444 00000E77 8B35[CD0F0000]      <1> 	mov esi, [esploc]
  1445 00000E7D 39E6                <1> 	cmp esi, esp
  1446 00000E7F 7216                <1> 	jb donedump
  1447 00000E81 368B0E              <1> 	mov ecx, [ss:esi]
  1448 00000E84 81EE04000000        <1> 	sub esi, 4
  1449 00000E8A 8935[CD0F0000]      <1> 	mov [esploc], esi
  1450 00000E90 E807010000          <1> 	call expdump
  1451 00000E95 EBE0                <1> 	jmp dumpstack
  1452                              <1> donedump:
  1453 00000E97 0F20C1              <1> 	mov ecx, cr0
  1454 00000E9A E8FD000000          <1> 	call expdump
  1455 00000E9F 0F20D1              <1> 	mov ecx, cr2
  1456 00000EA2 E8F5000000          <1> 	call expdump
  1457 00000EA7 0F20D9              <1> 	mov ecx, cr3
  1458 00000EAA E8ED000000          <1> 	call expdump
  1459 00000EAF 0F20E1              <1> 	mov ecx, cr4
  1460 00000EB2 E8E5000000          <1> 	call expdump
  1461 00000EB7 8B35[CD0F0000]      <1> 	mov esi, [esploc]
  1462 00000EBD 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1463 00000EC2 81C710000000        <1> 	add edi, 16
  1464 00000EC8 893D[E80F0000]      <1> 	mov [codelocend], edi
  1465 00000ECE 81EF20000000        <1> 	sub edi, 32
  1466                              <1> dumpcodeloop:
  1467 00000ED4 893D[E40F0000]      <1> 	mov [codeloc], edi
  1468 00000EDA 8B0F                <1> 	mov ecx, [edi]
  1469 00000EDC E8BB000000          <1> 	call expdump
  1470 00000EE1 8B3D[E40F0000]      <1> 	mov edi, [codeloc]
  1471 00000EE7 81C704000000        <1> 	add edi, 4
  1472 00000EED 3B3D[E80F0000]      <1> 	cmp edi, [codelocend]
  1473 00000EF3 72DF                <1> 	jb dumpcodeloop
  1474 00000EF5 BE[2D0F0000]        <1> 	mov esi, backtoosmsg
  1475                              <1> %ifdef gui.included
  1476                              <1> 	cmp byte [guion], 0
  1477                              <1> 	je backtomsg
  1478                              <1> guibacktomsg:
  1479                              <1> 	mov dx, [locunhandx]
  1480                              <1> 	mov cx, [locunhandy]
  1481                              <1> 	mov ax, 1
  1482                              <1> 	xor bx, bx
  1483                              <1> 	call showstring2
  1484                              <1> 	jmp backtomsgdone
  1485                              <1> backtomsg:
  1486                              <1> %endif
  1487 00000EFA E81B0C0000          <1> 	call print
  1488                              <1> backtomsgdone:
  1489 00000EFF 30C0                <1> 	xor al, al
  1490 00000F01 E878100000          <1> 	call rdcharint
  1491 00000F06 803D[E30F0000]03    <1> 	cmp byte [intprob], 3
  1492 00000F0D 7511                <1> 	jne nodebugint
  1493                              <1> %ifdef gui.included
  1494                              <1> 	cmp byte [guion], 0
  1495                              <1> 	je nodebuggui
  1496                              <1> 	mov bx, [backgroundcache]
  1497                              <1> 	mov [background], bx
  1498                              <1> 	xor bx, bx
  1499                              <1> 	mov byte [mousedisabled], 0
  1500                              <1> 	call guiclear
  1501                              <1> 	call reloadallgraphics
  1502                              <1> nodebuggui:
  1503                              <1> %endif
  1504 00000F0F 8B35[D10F0000]      <1> 	mov esi, [espfirst]
  1505 00000F15 89F4                <1> 	mov esp, esi
  1506 00000F17 61                  <1> 	popad
  1507 00000F18 17                  <1> 	pop ss
  1508 00000F19 0FA9                <1> 	pop gs
  1509 00000F1B 0FA1                <1> 	pop fs
  1510 00000F1D 07                  <1> 	pop es
  1511 00000F1E 1F                  <1> 	pop ds
  1512 00000F1F CF                  <1> 	iret
  1513                              <1> nodebugint:
  1514 00000F20 61                  <1> 	popad
  1515 00000F21 17                  <1> 	pop ss
  1516 00000F22 0FA9                <1> 	pop gs
  1517 00000F24 0FA1                <1> 	pop fs
  1518 00000F26 07                  <1> 	pop es
  1519 00000F27 1F                  <1> 	pop ds
  1520                              <1> %ifdef gui.included
  1521                              <1> 	cmp byte [guion], 0
  1522                              <1> 	je returnunhandgui
  1523                              <1> 	mov bx, [backgroundcache]
  1524                              <1> 	mov [background], bx
  1525                              <1> 	xor bx, bx
  1526                              <1> 	mov byte [mousedisabled], 0
  1527                              <1> 	call guiclear
  1528                              <1> 	call reloadallgraphics
  1529                              <1> 	jmp guiboot
  1530                              <1> %endif
  1531                              <1> returnunhandgui:
  1532 00000F28 E9D0170000          <1> 	jmp nwcmd
  1533 00000F2D 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1534 00000F36 737420616E79207072- <1>
  1535 00000F3F 6F626C656D7320696E- <1>
  1536 00000F48 207468652049737375- <1>
  1537 00000F51 65732073656374696F- <1>
  1538 00000F5A 6E20617420736F6C6C- <1>
  1539 00000F63 65726F732E676F6F67- <1>
  1540 00000F6C 6C65636F64652E636F- <1>
  1541 00000F75 6D0A                <1>
  1542 00000F77 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1543 00000F80 206B657920746F2072- <1>
  1544 00000F89 657475726E20746F20- <1>
  1545 00000F92 536F6C6C65724F530A- <1>
  1546 00000F9B 00                  <1>
  1547                              <1> expdump:
  1548 00000F9C 8B35[D50F0000]      <1> 	mov esi, [esiloc]
  1549 00000FA2 89F7                <1> 	mov edi, esi
  1550 00000FA4 81C70F000000        <1> 	add edi, 15
  1551 00000FAA 81C604000000        <1> 	add esi, 4
  1552 00000FB0 893D[D50F0000]      <1> 	mov [esiloc], edi
  1553 00000FB6 81EF03000000        <1> 	sub edi, 3
  1554 00000FBC E89B1B0000          <1> 	call converthex
  1555 00000FC1 81EE04000000        <1> 	sub esi, 4
  1556                              <1> %ifdef gui.included
  1557                              <1> 	cmp byte [guion], 0
  1558                              <1> 	je near expdumptext
  1559                              <1> 	mov cx, [locunhandy]
  1560                              <1> 	mov dx, [locunhandx]
  1561                              <1> 	mov ax, 1
  1562                              <1> 	xor bx, bx
  1563                              <1> 	call showstring2
  1564                              <1> 	mov [locunhandy], cx
  1565                              <1> 	mov [locunhandx], dx
  1566                              <1> 	ret
  1567                              <1> %endif
  1568                              <1> expdumptext:
  1569 00000FC7 E84E0B0000          <1> 	call print
  1570 00000FCC C3                  <1> 	ret
  1571 00000FCD 00000000            <1> esploc dd 0
  1572 00000FD1 00000000            <1> espfirst dd 0
  1573 00000FD5 00000000            <1> esiloc dd 0
  1574 00000FD9 00000000            <1> esiregbuf dd 0
  1575 00000FDD 0100                <1> locunhandy dw 1
  1576 00000FDF 0100                <1> locunhandx dw 1
  1577 00000FE1 0000                <1> backgroundcache dw 0
  1578 00000FE3 00                  <1> intprob db 0
  1579 00000FE4 00000000            <1> codeloc dd 0
  1580 00000FE8 00000000            <1> codelocend dd 0
  1581                              <1> 	unhandmsg:	
  1582 00000FEC 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1583 00000FF5 303030200A00        <1>
  1584                              <1> unhndrg:
  1585 00000FFB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1586 00001004 303030202000<rept>  <1>
  1587 00001064 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1588 0000106D 303030200A00        <1>
  1589 00001073 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1590 0000107C 303030202000<rept>  <1>
  1591 000010DC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1592 000010E5 303030200A00        <1>
  1593 000010EB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1594 000010F4 303030202000<rept>  <1>
  1595 00001154 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1596 0000115D 303030200A00        <1>
  1597 00001163 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1598 0000116C 303030202000<rept>  <1>
  1599 000011CC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1600 000011D5 303030200A00        <1>
  1601                              <1> unhandregs:
  1602 000011DB 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1603 000011E4 303030202000        <1>
  1604 000011EA 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1605 000011F3 303030202000        <1>
  1606 000011F9 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1607 00001202 303030200A00        <1>
  1608 00001208 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1609 00001211 303030202000        <1>
  1610 00001217 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1611 00001220 303030202000        <1>
  1612 00001226 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1613 0000122F 303030202000        <1>
  1614 00001235 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1615 0000123E 303030202000        <1>
  1616 00001244 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1617 0000124D 303030200A00        <1>
  1618 00001253 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1619 0000125C 303030202000        <1>
  1620 00001262 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1621 0000126B 303030202000        <1>
  1622 00001271 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1623 0000127A 303030202000        <1>
  1624 00001280 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1625 00001289 303030200A00        <1>
  1626 0000128F 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1627 00001298 303030202000        <1>
  1628 0000129E 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1629 000012A7 303030202000        <1>
  1630 000012AD 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1631 000012B6 303030202000        <1>
  1632 000012BC 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1633 000012C5 303030200A00        <1>
  1634 000012CB 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1635 000012D4 303030202000        <1>
  1636 000012DA 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1637 000012E3 303030202000        <1>
  1638 000012E9 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1639 000012F2 303030202000        <1>
  1640 000012F8 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  1641 00001301 303030200A00        <1>
  1642 00001307 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1643 00001310 303030202000<rept>  <1>
  1644 00001325 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1645 0000132E 30303020FF00        <1>
  1646 00001334 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1647 0000133D 3030305D2000        <1>
  1648 00001343 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1649 0000134C 303030202000<rept>  <1>
  1650 00001370 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1651 00001379 303030FF0A00        <1>
  1652                              <1> unhandmsgend:
  1653                              <1> 
  1654                              <1> errortypes:
  1655 0000137F [C3130000]          <1> 			dd err0
  1656 00001383 [27140000]          <1> 			dd err1
  1657 00001387 [88140000]          <1> 			dd err2
  1658 0000138B [DD140000]          <1> 			dd err3
  1659 0000138F [41150000]          <1> 			dd err4
  1660 00001393 [93150000]          <1> 			dd err5
  1661 00001397 [FD150000]          <1> 			dd err6
  1662 0000139B [65160000]          <1> 			dd err7
  1663 0000139F [AF160000]          <1> 			dd err8
  1664 000013A3 [0C170000]          <1> 			dd err9
  1665 000013A7 [65170000]          <1> 			dd err10
  1666 000013AB [B0170000]          <1> 			dd err11
  1667 000013AF [00180000]          <1> 			dd err12
  1668 000013B3 [59180000]          <1> 			dd err13
  1669 000013B7 [BC180000]          <1> 			dd err14
  1670 000013BB [F8180000]          <1> 			dd err15
  1671                              <1> errortypesend:
  1672 000013BF [83190000]          <1> 			dd unknownerror
  1673                              <1> 			
  1674 000013C3 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1675 000013CC 6279207A65726F3A0A  <1>
  1676 000013D5 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1677 000013DE 6C79206C696D2061F6- <1>
  1678 000013E7 78203D20EC20776865- <1>
  1679 000013F0 6E206120697320616E- <1>
  1680 000013F9 79207265616C206E75- <1>
  1681 00001402 6D6265722E20486170- <1>
  1682 0000140B 707920456173746572- <1>
  1683 00001414 210A                <1>
  1684 00001416 202020202020202020- <1> 		db "            x",26,"0",10,0
  1685 0000141F 202020781A300A00    <1>
  1686                              <1> 		
  1687 00001427 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1688 00001430 65702F427265616B70- <1>
  1689 00001439 6F696E743A0A        <1>
  1690 0000143F 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1691 00001448 696E74206661756C74- <1>
  1692 00001451 2C20627265616B706F- <1>
  1693 0000145A 696E7420747261702C- <1>
  1694 00001463 206F722073696E676C- <1>
  1695 0000146C 652D73746570207472- <1>
  1696 00001475 617020776173207472- <1>
  1697 0000147E 696767657265642E0A- <1>
  1698 00001487 00                  <1>
  1699                              <1> 		
  1700 00001488 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1701 00001491 6C6520696E74657272- <1>
  1702 0000149A 7570743A0A          <1>
  1703 0000149F 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1704 000014A8 6520696E7465727275- <1>
  1705 000014B1 707420776173207472- <1>
  1706 000014BA 696767657265642074- <1>
  1707 000014C3 68617420636F756C64- <1>
  1708 000014CC 206E6F74206265206D- <1>
  1709 000014D5 61736B65642E0A00    <1>
  1710                              <1> 		
  1711 000014DD 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1712 000014E6 743A0A              <1>
  1713 000014E9 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1714 000014F2 727275707420697320- <1>
  1715 000014FB 7573656420696E2070- <1>
  1716 00001504 726F6772616D732074- <1>
  1717 0000150D 6F2073686F77207468- <1>
  1718 00001516 6520737461636B2061- <1>
  1719 0000151F 6E6420726567697374- <1>
  1720 00001528 65727320616E642063- <1>
  1721 00001531 616E2062650A        <1>
  1722 00001537 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1723 00001540 00                  <1>
  1724                              <1> 		
  1725 00001541 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1726 0000154A 0A                  <1>
  1727 0000154B 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1728 00001554 73736F722072616E20- <1>
  1729 0000155D 696E746F20616E2049- <1>
  1730 00001566 4E544F20696E737472- <1>
  1731 0000156F 756374696F6E207769- <1>
  1732 00001578 746820746865206F76- <1>
  1733 00001581 6572666C6F7720666C- <1>
  1734 0000158A 6167207365742E0A00  <1>
  1735                              <1> 		
  1736 00001593 426F756E6473206368- <1> err5	db "Bounds check:",10
  1737 0000159C 65636B3A0A          <1>
  1738 000015A1 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1739 000015AA 73736F72207265626F- <1>
  1740 000015B3 756E6465642066726F- <1>
  1741 000015BC 6D206120424F554E44- <1>
  1742 000015C5 20696E737472756374- <1>
  1743 000015CE 696F6E2072756E206F- <1>
  1744 000015D7 6E20616E206F706572- <1>
  1745 000015E0 616E64207468617420- <1>
  1746 000015E9 776173206F75740A    <1>
  1747 000015F1 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1748 000015FA 2E0A00              <1>
  1749                              <1> 		
  1750 000015FD 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1751 00001606 70636F64653A0A      <1>
  1752 0000160D 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1753 00001616 73736F722068617320- <1>
  1754 0000161F 6E6F20696465612077- <1>
  1755 00001628 686174206974207761- <1>
  1756 00001631 7320747279696E6720- <1>
  1757 0000163A 746F20657865637574- <1>
  1758 00001643 652E20446F6E277420- <1>
  1759 0000164C 72756E205353453420- <1>
  1760 00001655 636F64650A          <1>
  1761 0000165A 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1762 00001663 0A00                <1>
  1763                              <1> 		
  1764 00001665 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1765 0000166E 6F72206E6F74206176- <1>
  1766 00001677 61696C61626C653A0A  <1>
  1767 00001680 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1768 00001689 206B6E6F7720746865- <1>
  1769 00001692 7920646F6E2774206D- <1>
  1770 0000169B 616B652074686F7365- <1>
  1771 000016A4 20616E796D6F726521- <1>
  1772 000016AD 0A00                <1>
  1773                              <1> 		
  1774 000016AF 446F75626C65206661- <1> err8	db "Double fault:",10
  1775 000016B8 756C743A0A          <1>
  1776 000016BD 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1777 000016C6 74696F6E2068616E64- <1>
  1778 000016CF 6C657220636F756C64- <1>
  1779 000016D8 206E6F742068616E64- <1>
  1780 000016E1 6C6520746861742069- <1>
  1781 000016EA 7420636F756C64206E- <1>
  1782 000016F3 6F742068616E646C65- <1>
  1783 000016FC 20616E206578636570- <1>
  1784 00001705 74696F6E2E0A00      <1>
  1785                              <1> 		
  1786 0000170C 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1787 00001715 6F72207365676D656E- <1>
  1788 0000171E 74206F76657272756E- <1>
  1789 00001727 3A0A00              <1>
  1790 0000172A 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1791 00001733 722068617070656E73- <1>
  1792 0000173C 20696E206D6F646572- <1>
  1793 00001745 6E20636F6D70757465- <1>
  1794 0000174E 72732C20616E64206E- <1>
  1795 00001757 657665722073686F75- <1>
  1796 00001760 6C642E0A00          <1>
  1797                              <1> 
  1798 00001765 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1799 0000176E 53533A0A            <1>
  1800 00001772 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1801 0000177B 686174207761732073- <1>
  1802 00001784 776974636865642074- <1>
  1803 0000178D 6F20697320696E7661- <1>
  1804 00001796 6C69642E204E6F7468- <1>
  1805 0000179F 696E672066756E6E79- <1>
  1806 000017A8 20686572652E0A00    <1>
  1807                              <1> 		
  1808 000017B0 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1809 000017B9 6F742070726573656E- <1>
  1810 000017C2 743A0A              <1>
  1811 000017C5 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1812 000017CE 6E7420626974206F66- <1>
  1813 000017D7 20746865207365676D- <1>
  1814 000017E0 656E74206465736372- <1>
  1815 000017E9 6970746F7220697320- <1>
  1816 000017F2 73657420746F207A65- <1>
  1817 000017FB 726F2E0A00          <1>
  1818                              <1> 		
  1819 00001800 537461636B20657863- <1> err12	db "Stack exception:",10
  1820 00001809 657074696F6E3A0A    <1>
  1821 00001811 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1822 0000181A 7363726970746F7220- <1>
  1823 00001823 697320696E76616C69- <1>
  1824 0000182C 64206F72206E6F7420- <1>
  1825 00001835 70726573656E74206F- <1>
  1826 0000183E 7220697473206C696D- <1>
  1827 00001847 697420697320746F6F- <1>
  1828 00001850 20736D616C6C2E0A00  <1>
  1829                              <1> 		
  1830 00001859 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1831 00001862 726F74656374696F6E- <1>
  1832 0000186B 2076696F6C6174696F- <1>
  1833 00001874 6E3A0A              <1>
  1834 00001877 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1835 00001880 746564207468652063- <1>
  1836 00001889 6F6D70757465722E20- <1>
  1837 00001892 537465702061776179- <1>
  1838 0000189B 20736C6F776C792E20- <1>
  1839 000018A4 546865204642492069- <1>
  1840 000018AD 73206F6E2069747320- <1>
  1841 000018B6 7761792E0A00        <1>
  1842                              <1> 		
  1843 000018BC 50616765206661756C- <1> err14	db "Page fault:",10
  1844 000018C5 743A0A              <1>
  1845 000018C8 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1846 000018D1 746861742077617320- <1>
  1847 000018DA 726571756573746564- <1>
  1848 000018E3 20776173206E6F7420- <1>
  1849 000018EC 617661696C61626C65- <1>
  1850 000018F5 2E0A00              <1>
  1851                              <1> 		
  1852 000018F8 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1853 00001901 666F7220506C616E20- <1>
  1854 0000190A 523A0A              <1>
  1855 0000190D 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1856 00001916 727275707420697320- <1>
  1857 0000191F 726573657276656420- <1>
  1858 00001928 666F72207573616765- <1>
  1859 00001931 206F6E6C7920627920- <1>
  1860 0000193A 746865206D696C6974- <1>
  1861 00001943 617279207768656E20- <1>
  1862 0000194C 6974206973206E6563- <1>
  1863 00001955 6573736172790A      <1>
  1864 0000195C 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1865 00001965 746520612066756C6C- <1>
  1866 0000196E 2D7363616C6520636F- <1>
  1867 00001977 757020642782746174- <1>
  1868 00001980 2E0A00              <1>
  1869                              <1> 		
  1870 00001983 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1871 0000198C 68656C6C206A757374- <1>
  1872 00001995 2068617070656E6564- <1>
  1873 0000199E 3F2049732065766572- <1>
  1874 000019A7 796F6E65206F6B6179- <1>
  1875 000019B0 3F2048617264206472- <1>
  1876 000019B9 6976653F2056696465- <1>
  1877 000019C2 6F20636172643F0A    <1>
  1878 000019CA 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1879 000019D3 726520796F75207468- <1>
  1880 000019DC 6572653F0A00        <1>
  1881                              <1> %else
  1882                              <1> unhand:	
  1883                              <1> 	%assign i 0
  1884                              <1> 	%rep 32
  1885                              <1> 	mov byte [intprob], i
  1886                              <1> 	jmp unhand2
  1887                              <1> 	%assign i i+1
  1888                              <1> 	%endrep
  1889                              <1> unhand2:
  1890                              <1> 	cmp byte [intprob], 3
  1891                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1892                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1893                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1894                              <1> 	mov bl, [intprob]
  1895                              <1> 	jmp exitprog
  1896                              <1> intprob db 0
  1897                              <1> %endif
  1898                                      %include "source/ints.asm"
  1899                              <1> newints:	;;for great justice
  1900 000019E2 80FC00              <1> 	cmp ah, 0
  1901 000019E5 0F847F000000        <1> 	je near intx0   ;kills app
  1902 000019EB 80FC01              <1> 	cmp ah, 1
  1903 000019EE 0F84FE000000        <1> 	je near intx1   ;print string
  1904 000019F4 80FC02              <1> 	cmp ah, 2
  1905 000019F7 0F8450010000        <1> 	je near intx2	;read string
  1906 000019FD 80FC03              <1> 	cmp ah, 3
  1907 00001A00 0F8470010000        <1> 	je near intx3	;clear screen
  1908 00001A06 80FC04              <1> 	cmp ah, 4
  1909 00001A09 0F84E7010000        <1> 	je near intx4	;read and print string
  1910 00001A0F 80FC05              <1> 	cmp ah, 5
  1911 00001A12 0F845A050000        <1> 	je near intx5	;get char
  1912 00001A18 80FC06              <1> 	cmp ah, 6
  1913 00001A1B 0F84AC050000        <1> 	je near intx6	;print char
  1914 00001A21 80FC07              <1> 	cmp ah, 7
  1915 00001A24 0F848E070000        <1> 	je near intx7	;read file
  1916                              <1> ;	cmp ah, 8
  1917                              <1> ;	je near intx8	;write file
  1918 00001A2A 80FC09              <1> 	cmp ah, 9
  1919 00001A2D 0F848F070000        <1> 	je near intx9	;convert number to string
  1920 00001A33 80FC0A              <1> 	cmp ah, 10
  1921 00001A36 0F849E070000        <1> 	je near intx10	;convert string to number
  1922                              <1> %ifdef threads.included
  1923 00001A3C 80FC0B              <1> 	cmp ah, 11
  1924 00001A3F 0F849F070000        <1> 	je near intx11	;create thread
  1925                              <1> %endif
  1926 00001A45 80FC0C              <1> 	cmp ah, 12
  1927 00001A48 0F846D080000        <1> 	je near intx12	;get time
  1928 00001A4E 80FC0D              <1> 	cmp ah, 13
  1929 00001A51 0F8479080000        <1> 	je near intx13	;set time
  1930 00001A57 80FC0E              <1> 	cmp ah, 14
  1931 00001A5A 0F8480080000        <1> 	je near intx14	;run program
  1932 00001A60 80FC0F              <1> 	cmp ah, 15
  1933 00001A63 0F848C080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  1934 00001A69 C3                  <1> 	ret
  1935                              <1> 	
  1936                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  1937                              <1> intx0:
  1938                              <1> 	%include 'source/interrupts/0_exit.asm'
  1939                              <2> exitprog:
  1940 00001A6A 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1941 00001A6E 8ED8                <2> 	mov ds, ax
  1942 00001A70 8EC0                <2> 	mov es, ax
  1943 00001A72 8EE0                <2> 	mov fs, ax
  1944 00001A74 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1945 00001A78 8EE8                <2> 	mov gs, ax
  1946 00001A7A C705[1B4F0000]0000- <2> 	mov dword [currentthread], 0
  1947 00001A82 0000                <2>
  1948 00001A84 C705[164F0000]0400- <2> 	mov dword [lastthread], 4
  1949 00001A8C 0000                <2>
  1950 00001A8E C605[1A4F0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1951 00001A95 8B25[5E770000]      <2> 	mov esp, [previousstack] ;and this
  1952 00001A9B 81FB00000000        <2> 	cmp ebx, 0
  1953 00001AA1 0F8501000000        <2> 	jne near .error
  1954 00001AA7 C3                  <2> 	ret
  1955                              <2> .error:
  1956 00001AA8 89D9                <2> 	mov ecx, ebx
  1957 00001AAA B006                <2> 	mov al, 6
  1958 00001AAC A2[BA2B0000]        <2> 	mov [firsthexshown], al
  1959 00001AB1 51                  <2> 	push ecx
  1960 00001AB2 BE[CD1A0000]        <2> 	mov esi, .msg1
  1961 00001AB7 E840000000          <2> 	call printhighlight
  1962 00001ABC 59                  <2> 	pop ecx
  1963 00001ABD E80D110000          <2> 	call showhex
  1964 00001AC2 BE[E21A0000]        <2> 	mov esi, .msg2
  1965 00001AC7 E830000000          <2> 	call printhighlight
  1966 00001ACC C3                  <2> 	ret
  1967                              <2> 	
  1968 00001ACD 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  1969 00001AD6 7461747573206F6620- <2>
  1970 00001ADF 307800              <2>
  1971 00001AE2 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  1972 00001AEB 726E65642E0A00      <2>
  1973                              <1> intx1:
  1974                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  1975 00001AF2 E82A000000          <2> call printint
  1976 00001AF7 E97CE7FFFF          <2> jmp timerinterrupt
  1977                              <2> 
  1978                              <2> 	printhighlight:
  1979 00001AFC 6631C0              <2> 		xor ax, ax
  1980 00001AFF 66BBF000            <2> 		mov bx, 0xF0
  1981 00001B03 E919000000          <2> 		jmp printint
  1982                              <2> 	printquiet:
  1983 00001B08 6631C0              <2> 		xor ax, ax
  1984 00001B0B A2[4C1B0000]        <2> 		mov [endkeyprint], al
  1985 00001B10 66BB0700            <2> 		mov bx, 7
  1986 00001B14 E820000000          <2> 		call printint.b
  1987 00001B19 C3                  <2> 		ret
  1988                              <2>     print:
  1989 00001B1A 6631C0              <2> 		xor ax, ax
  1990 00001B1D 66BB0700            <2> 		mov bx, 7
  1991                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  1992 00001B21 56                  <2> 		push esi
  1993 00001B22 A2[4C1B0000]        <2> 		mov [endkeyprint], al
  1994 00001B27 E80D000000          <2> 		call .b
  1995 00001B2C 89F1                <2> 		mov ecx, esi
  1996 00001B2E 5F                  <2> 		pop edi
  1997 00001B2F 29F9                <2> 		sub ecx, edi
  1998 00001B31 51                  <2> 		push ecx
  1999 00001B32 E8F4070000          <2> 		call termcopy
  2000 00001B37 59                  <2> 		pop ecx
  2001 00001B38 C3                  <2> 		ret
  2002                              <2> 	.b:
  2003 00001B39 8A06                <2> 		mov al, [esi]
  2004 00001B3B 3A05[4C1B0000]      <2> 		cmp al, [endkeyprint]
  2005 00001B41 7408                <2> 		je .done
  2006 00001B43 E8AA040000          <2> 		call prcharq
  2007 00001B48 46                  <2> 		inc esi
  2008 00001B49 EBEE                <2> 		jmp .b
  2009                              <2> 	.done:
  2010 00001B4B C3                  <2> 		ret
  2011                              <2> 
  2012 00001B4C 00                  <2> endkeyprint db 0
  2013                              <1> intx2:
  2014                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2015 00001B4D E805000000          <2> call readint
  2016 00001B52 E921E7FFFF          <2> jmp timerinterrupt
  2017                              <2> 
  2018                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2019 00001B57 89C3                <2> 		mov ebx, eax
  2020                              <2> 	.b:
  2021 00001B59 53                  <2> 		push ebx
  2022 00001B5A 57                  <2> 		push edi
  2023 00001B5B 56                  <2> 		push esi
  2024 00001B5C 30C0                <2> 		xor al, al
  2025 00001B5E E81B040000          <2> 		call rdcharint
  2026 00001B63 5E                  <2> 		pop esi
  2027 00001B64 8806                <2> 		mov [esi], al
  2028 00001B66 46                  <2> 		inc esi
  2029 00001B67 5F                  <2> 		pop edi
  2030 00001B68 5B                  <2> 		pop ebx
  2031 00001B69 39FE                <2> 		cmp esi, edi
  2032 00001B6B 7304                <2> 		jae .done
  2033 00001B6D 38D8                <2> 		cmp al, bl
  2034 00001B6F 75E8                <2> 		jne .b
  2035                              <2> 	.done:
  2036 00001B71 4E                  <2> 		dec esi
  2037 00001B72 C60600              <2> 		mov byte [esi], 0
  2038 00001B75 C3                  <2> 		ret
  2039                              <1> intx3:
  2040                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2041 00001B76 E805000000          <2> call clear
  2042 00001B7B E9F8E6FFFF          <2> jmp timerinterrupt
  2043                              <2> %ifdef io.serial
  2044                              <2> clear:
  2045                              <2> 	ret
  2046                              <2> %else
  2047                              <2> clear:		
  2048 00001B80 668B0D[B4210000]    <2> 		mov cx, [charxy]
  2049 00001B87 BF[F3910000]        <2> 		mov edi, videobuf
  2050 00001B8C 6631C0              <2> 		xor ax, ax
  2051 00001B8F 66A3[AE210000]      <2> 		mov [linebeginpos], ax
  2052 00001B95 66A3[B0210000]      <2> 		mov [videobufpos], ax
  2053 00001B9B 6631D2              <2> 		xor dx, dx
  2054 00001B9E 66A3[B2210000]      <2> 		mov [charpos], ax
  2055 00001BA4 B407                <2> 		mov ah, 7
  2056                              <2> 	clearb:
  2057 00001BA6 8807                <2> 		mov [edi], al
  2058 00001BA8 886701              <2> 		mov [edi + 1], ah
  2059 00001BAB 81C702000000        <2> 		add edi, 2
  2060 00001BB1 FEC9                <2> 		dec cl
  2061 00001BB3 80F900              <2> 		cmp cl, 0
  2062 00001BB6 75EE                <2> 		jne clearb
  2063 00001BB8 8A0D[B4210000]      <2> 		mov cl, [charxy]
  2064 00001BBE FECD                <2> 		dec ch
  2065 00001BC0 80FD00              <2> 		cmp ch, 0
  2066 00001BC3 75E1                <2> 		jne clearb
  2067                              <2> 	cleardouble:
  2068 00001BC5 BF[B3A40000]        <2> 		mov edi, videobuf2
  2069 00001BCA 668B0D[B4210000]    <2> 		mov cx, [charxy]
  2070 00001BD1 31C0                <2> 		xor eax, eax
  2071                              <2> 	clearc:
  2072 00001BD3 668907              <2> 		mov [edi], ax
  2073 00001BD6 81C702000000        <2> 		add edi, 2
  2074 00001BDC FEC9                <2> 		dec cl
  2075 00001BDE 80F900              <2> 		cmp cl, 0
  2076 00001BE1 75F0                <2> 		jne clearc
  2077 00001BE3 8A0D[B4210000]      <2> 		mov cl, [charxy]
  2078 00001BE9 FECD                <2> 		dec ch
  2079 00001BEB 80FD00              <2> 		cmp ch, 0
  2080 00001BEE 75E3                <2> 		jne clearc
  2081 00001BF0 E836070000          <2> 		call termcopy
  2082 00001BF5 C3                  <2> 		ret
  2083                              <2> %endif
  2084                              <2> 		
  2085                              <1> intx4:
  2086                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2087 00001BF6 E809000000          <2> call rdprint
  2088 00001BFB E978E6FFFF          <2> jmp timerinterrupt
  2089                              <2> 
  2090                              <2> readline:
  2091 00001C00 B00A                <2>   mov al, 10
  2092 00001C02 B307                <2>   mov bl, 7
  2093                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2094 00001C04 8935[671F0000]      <2> 		mov [buftxtloc], esi
  2095 00001C0A A2[5F1F0000]        <2> 		mov [endkeyrdpr], al
  2096 00001C0F 881D[601F0000]      <2> 		mov [modkeyrdpr], bl
  2097 00001C15 8935[611F0000]      <2> 		mov [firstesirdpr], esi
  2098 00001C1B 893D[6B1F0000]      <2> 		mov [endbufferrdpr], edi
  2099                              <2> 	rdprintb:
  2100 00001C21 56                  <2> 		push esi
  2101 00001C22 B001                <2> 		mov al, 1
  2102 00001C24 E855030000          <2> 		call rdcharint
  2103 00001C29 5E                  <2> 		pop esi
  2104                              <2> 	%ifdef io.serial
  2105                              <2> 	%else
  2106 00001C2A 803D[49470000]E0    <2> 		cmp byte [specialkey], 0xE0
  2107 00001C31 751B                <2> 		jne notspecialrdprnt
  2108 00001C33 80FC53              <2> 		cmp ah, 0x53
  2109 00001C36 0F84E8020000        <2> 		je near rdprdel
  2110 00001C3C 80FC47              <2> 		cmp ah, 0x47
  2111 00001C3F 0F8407010000        <2> 		je near rdprhome
  2112 00001C45 80FC4F              <2> 		cmp ah, 0x4F
  2113 00001C48 0F841D010000        <2> 		je near rdprend
  2114                              <2> 	notspecialrdprnt:
  2115 00001C4E 80FC48              <2> 		cmp ah, 0x48
  2116 00001C51 0F84D5010000        <2> 		je near rdprup
  2117 00001C57 80FC50              <2> 		cmp ah, 0x50
  2118 00001C5A 0F84AF010000        <2> 		je near rdprdown
  2119 00001C60 80FC4D              <2> 		cmp ah, 0x4D
  2120 00001C63 0F845E010000        <2> 		je near rdprright
  2121 00001C69 80FC4B              <2> 		cmp ah, 0x4B
  2122 00001C6C 0F8416010000        <2> 		je near rdprleft
  2123                              <2> 	%endif
  2124 00001C72 3C08                <2> 		cmp al, 8
  2125 00001C74 0F84C5020000        <2> 		je near rdprbscheck
  2126 00001C7A 3C00                <2> 		cmp al, 0
  2127 00001C7C 74A3                <2> 		je rdprintb
  2128 00001C7E 80FC00              <2> 		cmp ah, 0
  2129 00001C81 749E                <2> 		je rdprintb
  2130 00001C83 8806                <2> 		mov [esi], al
  2131 00001C85 46                  <2> 		inc esi
  2132                              <2> 	bscheckequal:
  2133 00001C86 8A1D[601F0000]      <2> 		mov bl, [modkeyrdpr]
  2134 00001C8C 8A3D[661F0000]      <2> 		mov bh, [txtmask]
  2135 00001C92 80FF00              <2> 		cmp bh, 0
  2136 00001C95 7404                <2> 		je nomasktxt
  2137 00001C97 88F8                <2> 		mov al, bh
  2138 00001C99 30FF                <2> 		xor bh, bh
  2139                              <2> 	nomasktxt:
  2140 00001C9B E841030000          <2> 		call prcharint
  2141 00001CA0 56                  <2> 		push esi
  2142 00001CA1 66A3[5D1F0000]      <2> 		mov [axcache], ax
  2143 00001CA7 8A25[5F1F0000]      <2> 		mov ah, [endkeyrdpr]
  2144 00001CAD 38E0                <2> 		cmp al, ah
  2145 00001CAF 7429                <2> 		je nobackprintbuftxt2
  2146 00001CB1 BE[DE890000]        <2> 		mov esi, buftxt2
  2147 00001CB6 E84DFEFFFF          <2> 		call printquiet
  2148 00001CBB B020                <2> 		mov al, " "
  2149 00001CBD E830030000          <2> 		call prcharq
  2150 00001CC2 B008                <2> 		mov al, 8
  2151 00001CC4 81FE[DE890000]      <2> 		cmp esi, buftxt2
  2152 00001CCA 740E                <2> 		je nobackprintbuftxt2
  2153                              <2> 	backprintbuftxt2:
  2154 00001CCC E821030000          <2> 		call prcharq
  2155 00001CD1 4E                  <2> 		dec esi
  2156 00001CD2 81FE[DE890000]      <2> 		cmp esi, buftxt2
  2157 00001CD8 77F2                <2> 		ja backprintbuftxt2
  2158                              <2> 	nobackprintbuftxt2:
  2159 00001CDA 3C0A                <2> 		cmp al, 10
  2160 00001CDC 7405                <2> 		je nonobackprint
  2161 00001CDE E8FE020000          <2> 		call prcharint
  2162                              <2> 	nonobackprint:
  2163 00001CE3 5E                  <2> 		pop esi
  2164 00001CE4 3B35[6B1F0000]      <2> 		cmp esi, [endbufferrdpr]
  2165 00001CEA 0F8319000000        <2> 		jae near donerdprinc
  2166 00001CF0 66A1[5D1F0000]      <2> 		mov ax, [axcache]
  2167 00001CF6 8A25[5F1F0000]      <2> 		mov ah, [endkeyrdpr]
  2168 00001CFC 38E0                <2> 		cmp al, ah
  2169 00001CFE 0F851DFFFFFF        <2> 		jne rdprintb
  2170 00001D04 E901000000          <2> 		jmp donerdprint
  2171                              <2> 	donerdprinc:
  2172 00001D09 46                  <2> 		inc esi
  2173                              <2> 	donerdprint:
  2174 00001D0A 4E                  <2> 		dec esi
  2175 00001D0B BF[DE890000]        <2> 		mov edi, buftxt2
  2176                              <2> 	copylaterstuff:
  2177 00001D10 8A07                <2> 		mov al, [edi]
  2178 00001D12 3C00                <2> 		cmp al, 0
  2179 00001D14 7406                <2> 		je nocopylaterstuff
  2180 00001D16 8806                <2> 		mov [esi], al
  2181 00001D18 47                  <2> 		inc edi
  2182 00001D19 46                  <2> 		inc esi
  2183 00001D1A EBF4                <2> 		jmp copylaterstuff
  2184                              <2> 	nocopylaterstuff:
  2185 00001D1C C60600              <2> 		mov byte [esi], 0
  2186 00001D1F E80B000000          <2> 		call clearbuftxt2
  2187 00001D24 89F1                <2> 		mov ecx, esi
  2188 00001D26 8B3D[611F0000]      <2> 		mov edi, [firstesirdpr]
  2189 00001D2C 29F9                <2> 		sub ecx, edi
  2190 00001D2E C3                  <2> 		ret
  2191                              <2> 	
  2192                              <2> 	clearbuftxt2:
  2193 00001D2F 30C0                <2> 		xor al, al
  2194 00001D31 BF[DE890000]        <2> 		mov edi, buftxt2
  2195                              <2> 	clearbuftxt2lp:
  2196 00001D36 8807                <2> 		mov [edi], al
  2197 00001D38 47                  <2> 		inc edi
  2198 00001D39 81FF[DE8D0000]      <2> 		cmp edi, buftxt
  2199 00001D3F 75F5                <2> 		jne clearbuftxt2lp
  2200 00001D41 C3                  <2> 		ret
  2201                              <2> 	
  2202                              <2> 	rdprintb2:
  2203 00001D42 E8E4050000          <2> 		call termcopy
  2204 00001D47 E9D5FEFFFF          <2> 		jmp rdprintb
  2205                              <2> 		
  2206                              <2> %ifdef io.serial
  2207                              <2> %else
  2208                              <2> 		
  2209                              <2> 	rdprhome:
  2210 00001D4C 3B35[671F0000]      <2> 		cmp esi, [buftxtloc]
  2211 00001D52 0F84EAFFFFFF        <2> 		je near rdprintb2
  2212 00001D58 BF[DE890000]        <2> 		mov edi, buftxt2
  2213 00001D5D 8A07                <2> 		mov al, [edi]
  2214 00001D5F E846000000          <2> 		call shiftbuftxt2
  2215 00001D64 E889020000          <2> 		call prcharq
  2216 00001D69 EBE1                <2> 		jmp rdprhome
  2217                              <2> 		
  2218                              <2> 	rdprend:
  2219 00001D6B BF[DE890000]        <2> 		mov edi, buftxt2
  2220 00001D70 8A07                <2> 		mov al, [edi]
  2221 00001D72 3C00                <2> 		cmp al, 0
  2222 00001D74 0F84C8FFFFFF        <2> 		je near rdprintb2
  2223 00001D7A 8806                <2> 		mov [esi], al
  2224 00001D7C E866000000          <2> 		call shiftbuftxt2lft
  2225 00001D81 E86C020000          <2> 		call prcharq
  2226 00001D86 EBE3                <2> 		jmp rdprend
  2227                              <2> 	
  2228                              <2> 	rdprleft:
  2229 00001D88 3B35[671F0000]      <2> 		cmp esi, [buftxtloc]
  2230 00001D8E 0F848DFEFFFF        <2> 		je near rdprintb
  2231 00001D94 BF[DE890000]        <2> 		mov edi, buftxt2
  2232 00001D99 8A07                <2> 		mov al, [edi]
  2233 00001D9B E80A000000          <2> 		call shiftbuftxt2
  2234 00001DA0 E83C020000          <2> 		call prcharint
  2235 00001DA5 E977FEFFFF          <2> 		jmp rdprintb
  2236                              <2> 	shiftbuftxt2:
  2237 00001DAA 3C00                <2> 		cmp al, 0
  2238 00001DAC 7409                <2> 		je noshiftbuftxt2
  2239 00001DAE 47                  <2> 		inc edi
  2240 00001DAF 8A27                <2> 		mov ah, [edi]
  2241 00001DB1 8807                <2> 		mov [edi], al
  2242 00001DB3 88E0                <2> 		mov al, ah
  2243 00001DB5 EBF3                <2> 		jmp shiftbuftxt2
  2244                              <2> 	noshiftbuftxt2:
  2245 00001DB7 BF[DE890000]        <2> 		mov edi, buftxt2
  2246 00001DBC 4E                  <2> 		dec esi
  2247 00001DBD 8A06                <2> 		mov al, [esi]
  2248 00001DBF 8807                <2> 		mov [edi], al
  2249 00001DC1 C60600              <2> 		mov byte [esi], 0
  2250 00001DC4 B008                <2> 		mov al, 8
  2251 00001DC6 C3                  <2> 		ret
  2252                              <2> 		
  2253                              <2> 	rdprright:
  2254 00001DC7 BF[DE890000]        <2> 		mov edi, buftxt2
  2255 00001DCC 8A07                <2> 		mov al, [edi]
  2256 00001DCE 3C00                <2> 		cmp al, 0
  2257 00001DD0 0F844BFEFFFF        <2> 		je near rdprintb
  2258 00001DD6 8806                <2> 		mov [esi], al
  2259 00001DD8 E80A000000          <2> 		call shiftbuftxt2lft
  2260 00001DDD E8FF010000          <2> 		call prcharint
  2261 00001DE2 E93AFEFFFF          <2> 		jmp rdprintb
  2262                              <2> 	shiftbuftxt2lft:
  2263 00001DE7 3C00                <2> 		cmp al, 0
  2264 00001DE9 7408                <2> 		je noshiftbuftxt2lft
  2265 00001DEB 47                  <2> 		inc edi
  2266 00001DEC 8A07                <2> 		mov al, [edi]
  2267 00001DEE 8847FF              <2> 		mov [edi - 1], al
  2268 00001DF1 EBF4                <2> 		jmp shiftbuftxt2lft
  2269                              <2> 	noshiftbuftxt2lft:
  2270 00001DF3 8A06                <2> 		mov al, [esi]
  2271 00001DF5 46                  <2> 		inc esi
  2272 00001DF6 8A1D[601F0000]      <2> 		mov bl, [modkeyrdpr]
  2273 00001DFC C3                  <2> 		ret
  2274                              <2> 		
  2275                              <2> 	rdprdownbck:
  2276 00001DFD FECC                <2> 		dec ah
  2277 00001DFF 8825[651F0000]      <2> 		mov [commandedit], ah
  2278 00001E05 E83A000000          <2> 		call rdprbckspc
  2279 00001E0A E912FEFFFF          <2> 		jmp rdprintb
  2280                              <2> 	
  2281                              <2> 	rdprdown:
  2282 00001E0F 8A25[651F0000]      <2> 		mov ah, [commandedit]
  2283 00001E15 80FC01              <2> 		cmp ah, 1
  2284 00001E18 0F8603FEFFFF        <2> 		jbe near rdprintb
  2285 00001E1E 80FC02              <2> 		cmp ah, 2
  2286 00001E21 74DA                <2> 		je rdprdownbck
  2287 00001E23 80EC02              <2> 		sub ah, 2
  2288 00001E26 8825[651F0000]      <2> 		mov [commandedit], ah
  2289                              <2> 		
  2290                              <2> 	rdprup:
  2291 00001E2C 30C0                <2> 		xor al, al
  2292 00001E2E 3805[651F0000]      <2> 		cmp [commandedit], al
  2293 00001E34 0F84E7FDFFFF        <2> 		je near rdprintb
  2294 00001E3A E805000000          <2> 		call rdprbckspc
  2295 00001E3F E941000000          <2> 		jmp getcurrentcommandstr
  2296                              <2> 	rdprbckspc:
  2297 00001E44 3B35[671F0000]      <2> 		cmp esi, [buftxtloc]
  2298 00001E4A 742B                <2> 		je nordprupbck
  2299                              <2> 	rdprupbckspclp:
  2300 00001E4C B008                <2> 		mov al, 8
  2301 00001E4E 8A1D[601F0000]      <2> 		mov bl, [modkeyrdpr]
  2302 00001E54 E899010000          <2> 		call prcharq
  2303 00001E59 B020                <2> 		mov al, " "
  2304 00001E5B E892010000          <2> 		call prcharq
  2305 00001E60 B008                <2> 		mov al, 8
  2306 00001E62 E88B010000          <2> 		call prcharq
  2307 00001E67 4E                  <2> 		dec esi
  2308 00001E68 3B35[671F0000]      <2> 		cmp esi, [buftxtloc]
  2309 00001E6E 7402                <2> 		je nordprupbck2
  2310 00001E70 EBDA                <2> 		jmp rdprupbckspclp
  2311                              <2> 	nordprupbck2:
  2312 00001E72 E8B4040000          <2> 		call termcopy
  2313                              <2> 	nordprupbck:
  2314 00001E77 8B3D[B7F40000]      <2> 		mov edi, [commandbufpos]
  2315 00001E7D 81C7[BBF40000]      <2> 		add edi, commandbuf
  2316 00001E83 4F                  <2> 		dec edi
  2317 00001E84 C3                  <2> 		ret
  2318                              <2> 	getcurrentcommandstr:
  2319 00001E85 8A25[651F0000]      <2> 		mov ah, [commandedit]
  2320 00001E8B FE05[651F0000]      <2> 		inc byte [commandedit]
  2321                              <2> 	getccmdlp:
  2322 00001E91 4F                  <2> 		dec edi
  2323 00001E92 8A07                <2> 		mov al, [edi]
  2324 00001E94 81FF[BBF40000]      <2> 		cmp edi, commandbuf
  2325 00001E9A 7231                <2> 		jb getcmdresetcommandbuf
  2326 00001E9C 81EF[BBF40000]      <2> 		sub edi, commandbuf
  2327 00001EA2 3B3D[B7F40000]      <2> 		cmp edi, [commandbufpos]
  2328 00001EA8 0F8473FDFFFF        <2> 		je near rdprintb
  2329 00001EAE 81C7[BBF40000]      <2> 		add edi, commandbuf
  2330 00001EB4 3C00                <2> 		cmp al, 0
  2331 00001EB6 75D9                <2> 		jne getccmdlp
  2332 00001EB8 FECC                <2> 		dec ah
  2333 00001EBA 80FC00              <2> 		cmp ah, 0
  2334 00001EBD 77D2                <2> 		ja getccmdlp
  2335 00001EBF 47                  <2> 		inc edi
  2336 00001EC0 81FF[BB040100]      <2> 		cmp edi, commandbufend
  2337 00001EC6 770D                <2> 		ja fixcmdbufb4morerdpr
  2338 00001EC8 E915000000          <2> 		jmp morerdprup
  2339                              <2> 	getcmdresetcommandbuf:
  2340 00001ECD BF[BB040100]        <2> 		mov edi, commandbufend
  2341 00001ED2 47                  <2> 		inc edi
  2342 00001ED3 EBBC                <2> 		jmp getccmdlp
  2343                              <2> 	fixcmdbufb4morerdpr:
  2344 00001ED5 4F                  <2> 		dec edi
  2345 00001ED6 81EF[BB040100]      <2> 		sub edi, commandbufend
  2346 00001EDC 81C7[BBF40000]      <2> 		add edi, commandbuf
  2347                              <2> 	morerdprup:
  2348 00001EE2 8A07                <2> 		mov al, [edi]
  2349 00001EE4 47                  <2> 		inc edi
  2350 00001EE5 81EF[BBF40000]      <2> 		sub edi, commandbuf
  2351 00001EEB 3C00                <2> 		cmp al, 0
  2352 00001EED 0F844FFEFFFF        <2> 		je near rdprintb2
  2353 00001EF3 3B3D[B7F40000]      <2> 		cmp edi, [commandbufpos]
  2354 00001EF9 0F8343FEFFFF        <2> 		jae near rdprintb2
  2355 00001EFF 81C7[BBF40000]      <2> 		add edi, commandbuf
  2356 00001F05 8806                <2> 		mov [esi], al
  2357 00001F07 46                  <2> 		inc esi
  2358 00001F08 57                  <2> 		push edi
  2359 00001F09 8A1D[601F0000]      <2> 		mov bl, [modkeyrdpr]
  2360 00001F0F E8DE000000          <2> 		call prcharq
  2361 00001F14 5F                  <2> 		pop edi
  2362 00001F15 81FF[BB040100]      <2> 		cmp edi, commandbufend
  2363 00001F1B 76C5                <2> 		jbe morerdprup
  2364 00001F1D BF[BBF40000]        <2> 		mov edi, commandbuf
  2365 00001F22 EBBE                <2> 		jmp morerdprup
  2366                              <2> 		
  2367                              <2> 	rdprdel:
  2368 00001F24 BF[DE890000]        <2> 		mov edi, buftxt2
  2369 00001F29 8A07                <2> 		mov al, [edi]
  2370 00001F2B 3C00                <2> 		cmp al, 0
  2371 00001F2D 0F84EEFCFFFF        <2> 		je near rdprintb
  2372 00001F33 8806                <2> 		mov [esi], al
  2373 00001F35 E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2374 00001F3A E8B3000000          <2> 		call prcharq
  2375                              <2> %endif
  2376                              <2> 	rdprbscheck:
  2377 00001F3F 3B35[611F0000]      <2> 		cmp esi, [firstesirdpr]
  2378 00001F45 7705                <2> 		ja goodbscheck
  2379 00001F47 E9D5FCFFFF          <2> 		jmp rdprintb
  2380                              <2> 	goodbscheck:
  2381 00001F4C 4E                  <2> 		dec esi
  2382 00001F4D C60600              <2> 		mov byte [esi], 0
  2383 00001F50 8A1D[601F0000]      <2> 		mov bl, [modkeyrdpr]
  2384 00001F56 B008                <2> 		mov al, 8
  2385 00001F58 E929FDFFFF          <2> 		jmp bscheckequal
  2386                              <2> 		
  2387 00001F5D 0000                <2> axcache dw 0
  2388 00001F5F 00                  <2> endkeyrdpr db 0
  2389 00001F60 00                  <2> modkeyrdpr db 0
  2390 00001F61 00000000            <2> firstesirdpr dd 0
  2391 00001F65 00                  <2> commandedit db 0
  2392 00001F66 00                  <2> txtmask db 0
  2393 00001F67 00000000            <2> buftxtloc dd 0
  2394 00001F6B 00000000            <2> endbufferrdpr dd 0
  2395 00001F6F 082000              <2> backcursor db 8," ",0
  2396                              <1> intx5:
  2397                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2398 00001F72 E807000000          <2> 	call rdcharint
  2399 00001F77 E9FCE2FFFF          <2> 	jmp timerinterrupt
  2400                              <2> getchar:
  2401 00001F7C 30C0                <2> 	xor al, al
  2402                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2403 00001F7E C605[CC1F0000]01    <2> 		mov byte [trans], 1
  2404 00001F85 3C00                <2> 		cmp al, 0
  2405 00001F87 7507                <2> 		jne transcheck
  2406 00001F89 C605[CC1F0000]00    <2> 		mov byte [trans], 0
  2407                              <2> 	transcheck:
  2408                              <2> 	%ifdef io.serial
  2409                              <2> 		call serial.receive
  2410                              <2> 		mov ah, 0xFF
  2411                              <2> 		mov [lastkey], ax
  2412                              <2> 		cmp al, 13
  2413                              <2> 		je rdenter
  2414                              <2> 	%else
  2415 00001F90 E8D4270000          <2> 		call getkey
  2416 00001F95 66A1[CA1F0000]      <2> 		mov ax, [lastkey]
  2417 00001F9B 80FC1C              <2> 		cmp ah, 0x1C
  2418 00001F9E 741F                <2> 		je rdenter
  2419                              <2> 	%endif
  2420 00001FA0 8A3D[CC1F0000]      <2> 		mov bh, [trans]
  2421 00001FA6 803D[49470000]E0    <2> 		cmp byte [specialkey], 0xE0
  2422 00001FAD 7504                <2> 		jne nospecialtrans
  2423 00001FAF 88C3                <2> 		mov bl, al
  2424 00001FB1 30C0                <2> 		xor al, al
  2425                              <2> 	nospecialtrans:
  2426 00001FB3 08C7                <2> 		or bh, al
  2427 00001FB5 80FF00              <2> 		cmp bh, 0
  2428 00001FB8 74D6                <2> 		je transcheck
  2429 00001FBA E90A000000          <2> 		jmp rdend
  2430                              <2> 	rdenter:
  2431 00001FBF B41C                <2> 		mov ah, 0x1C
  2432 00001FC1 B00A                <2> 		mov al, 10
  2433 00001FC3 66A3[CA1F0000]      <2> 		mov [lastkey], ax
  2434                              <2> 	rdend:
  2435 00001FC9 C3                  <2> 		ret
  2436                              <2> 		
  2437 00001FCA 0000                <2> lastkey db 0,0
  2438 00001FCC 00                  <2> trans db 0
  2439                              <1> intx6:
  2440                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2441                              <2> %ifdef io.serial
  2442                              <2> 	cmp bl, bh
  2443                              <2> 	call prcharint
  2444                              <2> 	jmp timerinterrupt
  2445                              <2> prcharint:	
  2446                              <2> prcharq:
  2447                              <2> 	call serial.send
  2448                              <2> 	ret
  2449                              <2> %else
  2450 00001FCD 38FB                <2> cmp bl, bh
  2451 00001FCF 740A                <2> je prchar.notimer
  2452 00001FD1 E80B000000          <2> call prcharint
  2453 00001FD6 E99DE2FFFF          <2> jmp timerinterrupt
  2454                              <2> prchar.notimer:
  2455 00001FDB E812000000          <2> 	call prcharq
  2456 00001FE0 CF                  <2> 	iret
  2457                              <2> 	
  2458                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2459 00001FE1 38FB                <2> 	cmp bl, bh
  2460 00001FE3 740D                <2> 	je prcharq
  2461 00001FE5 E808000000          <2> 	call prcharq
  2462 00001FEA E83C030000          <2> 	call termcopy
  2463 00001FEF C3                  <2> 	ret
  2464 00001FF0 00                  <2> termguion db 0
  2465 00001FF1 00                  <2> termcopyon db 0
  2466                              <2> prcharq:
  2467 00001FF2 88DC                <2> 	mov ah, bl
  2468 00001FF4 66A3[B6210000]      <2> 	mov [charbuf], ax
  2469 00001FFA 31DB                <2> 	xor ebx, ebx
  2470 00001FFC 668B1D[B0210000]    <2> 	mov bx, [videobufpos]
  2471 00002003 BF[F3910000]        <2> 	mov edi, videobuf
  2472 00002008 01DF                <2> 	add edi, ebx
  2473 0000200A 66A1[29230000]      <2> 	mov ax, [removedvideo]
  2474 00002010 668907              <2> 	mov [edi], ax
  2475 00002013 66A1[B6210000]      <2> 	mov ax, [charbuf]
  2476 00002019 31D2                <2> 	xor edx, edx
  2477 0000201B 668B15[B2210000]    <2> 	mov dx, [charpos]
  2478 00002022 31C9                <2> 	xor ecx, ecx
  2479 00002024 668B0D[B4210000]    <2> 	mov cx, [charxy]
  2480 0000202B 3C09                <2> 	cmp al, 9
  2481 0000202D 0F8463000000        <2> 	je near prtab
  2482 00002033 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2483 00002035 0F848B000000        <2> 	je near prcr
  2484 0000203B 3C0A                <2> 	cmp al, 10
  2485 0000203D 0F84B7000000        <2> 	je near prnlcr
  2486 00002043 3C08                <2> 	cmp al, 8
  2487 00002045 0F848F000000        <2> 	je near prbs
  2488 0000204B 3CFF                <2> 	cmp al, 255		;;null character
  2489 0000204D 0F841B000000        <2> 	je near donescr
  2490 00002053 668907              <2> 	mov [edi], ax
  2491 00002056 81C702000000        <2> 	add edi, 2
  2492 0000205C FEC2                <2> 	inc dl
  2493                              <2> donecrnl:
  2494 0000205E 38CA                <2> 	cmp dl, cl
  2495 00002060 0F83B9000000        <2> 	jae near preol
  2496                              <2> doneeol:
  2497 00002066 38EE                <2> 	cmp dh, ch
  2498 00002068 0F83CF000000        <2> 	jae near prscr	
  2499                              <2> donescr:
  2500 0000206E 89FB                <2> 	mov ebx, edi
  2501 00002070 668B07              <2> 	mov ax, [edi]
  2502 00002073 66A3[29230000]      <2> 	mov [removedvideo], ax
  2503 00002079 81EB[F3910000]      <2> 	sub ebx, videobuf
  2504 0000207F 66891D[B0210000]    <2> 	mov [videobufpos], bx
  2505 00002086 668915[B2210000]    <2> 	mov [charpos], dx
  2506 0000208D 66A1[B6210000]      <2> 	mov ax, [charbuf]
  2507 00002093 88E3                <2> 	mov bl, ah
  2508 00002095 C3                  <2> 	ret
  2509                              <2> 	
  2510                              <2> 	prtab:
  2511 00002096 31DB                <2> 		xor ebx, ebx
  2512 00002098 668B1D[AE210000]    <2> 		mov bx, [linebeginpos]
  2513 0000209F 81EF[F3910000]      <2> 		sub edi, videobuf
  2514 000020A5 29DF                <2> 		sub edi, ebx
  2515 000020A7 C1EF04              <2> 		shr edi, 4
  2516 000020AA C1E704              <2> 		shl edi, 4
  2517 000020AD 81C710000000        <2> 		add edi, 16
  2518 000020B3 C0EA03              <2> 		shr dl, 3
  2519 000020B6 C0E203              <2> 		shl dl, 3
  2520 000020B9 80C208              <2> 		add dl, 8
  2521 000020BC 81C7[F3910000]      <2> 		add edi, videobuf
  2522 000020C2 01DF                <2> 		add edi, ebx
  2523 000020C4 EB98                <2> 		jmp donecrnl
  2524                              <2> 	
  2525                              <2> 	prcr:
  2526 000020C6 30D2                <2> 		xor dl, dl
  2527 000020C8 31DB                <2> 		xor ebx, ebx
  2528 000020CA BF[F3910000]        <2> 		mov edi, videobuf
  2529 000020CF 668B1D[AE210000]    <2> 		mov bx, [linebeginpos]
  2530 000020D6 01DF                <2> 		add edi, ebx
  2531 000020D8 EB84                <2> 		jmp donecrnl
  2532                              <2> 			
  2533                              <2> 	prbs:
  2534 000020DA 80FA00              <2> 		cmp dl, 0
  2535 000020DD 7410                <2> 		je prbackline
  2536                              <2> 	prnobmr:
  2537 000020DF FECA                <2> 		dec dl
  2538 000020E1 6631C0              <2> 		xor ax, ax
  2539 000020E4 81EF02000000        <2> 		sub edi, 2
  2540 000020EA E96FFFFFFF          <2> 		jmp donecrnl
  2541                              <2> 	prbackline:
  2542 000020EF 88CA                <2> 		mov dl, cl
  2543 000020F1 80FE00              <2> 		cmp dh, 0
  2544 000020F4 74E9                <2> 		je prnobmr
  2545 000020F6 FECE                <2> 		dec dh
  2546 000020F8 EBE5                <2> 		jmp prnobmr
  2547                              <2> 		
  2548                              <2> 	prnlcr:
  2549 000020FA FEC6                <2> 		inc dh
  2550 000020FC 31DB                <2> 		xor ebx, ebx
  2551 000020FE 30D2                <2> 		xor dl, dl
  2552 00002100 88CB                <2> 		mov bl, cl
  2553 00002102 66D1E3              <2> 		shl bx, 1
  2554 00002105 BF[F3910000]        <2> 		mov edi, videobuf
  2555 0000210A 66031D[AE210000]    <2> 		add bx, [linebeginpos]
  2556 00002111 66891D[AE210000]    <2> 		mov [linebeginpos], bx
  2557 00002118 01DF                <2> 		add edi, ebx
  2558 0000211A E93FFFFFFF          <2> 		jmp donecrnl
  2559                              <2> 		
  2560                              <2> 	preol:
  2561 0000211F 30D2                <2> 		xor dl, dl
  2562 00002121 FEC6                <2> 		inc dh
  2563 00002123 31DB                <2> 		xor ebx, ebx
  2564 00002125 88CB                <2> 		mov bl, cl
  2565 00002127 66D1E3              <2> 		shl bx, 1
  2566 0000212A 66031D[AE210000]    <2> 		add bx, [linebeginpos]
  2567 00002131 66891D[AE210000]    <2> 		mov [linebeginpos], bx
  2568 00002138 E929FFFFFF          <2> 		jmp doneeol
  2569                              <2> 	prscr:
  2570 0000213D FECE                <2> 		dec dh
  2571 0000213F BF[F3910000]        <2> 		mov edi, videobuf
  2572 00002144 31DB                <2> 		xor ebx, ebx
  2573 00002146 88CB                <2> 		mov bl, cl
  2574 00002148 66D1E3              <2> 		shl bx, 1
  2575 0000214B 01FB                <2> 		add ebx, edi
  2576                              <2> 	intscrollloop:
  2577 0000214D 668B03              <2> 		mov ax, [ebx]
  2578 00002150 668907              <2> 		mov [edi], ax
  2579 00002153 81C702000000        <2> 		add edi, 2
  2580 00002159 81C302000000        <2> 		add ebx, 2
  2581 0000215F FEC9                <2> 		dec cl
  2582 00002161 80F900              <2> 		cmp cl, 0
  2583 00002164 75E7                <2> 		jne intscrollloop
  2584 00002166 8A0D[B4210000]      <2> 		mov cl, [charxy]
  2585 0000216C FECD                <2> 		dec ch
  2586 0000216E 80FD01              <2> 		cmp ch, 1
  2587 00002171 77DA                <2> 		ja intscrollloop
  2588 00002173 6631C0              <2> 		xor ax, ax
  2589 00002176 81EF[F3910000]      <2> 		sub edi, videobuf
  2590 0000217C 66893D[AE210000]    <2> 		mov [linebeginpos], di
  2591 00002183 81C7[F3910000]      <2> 		add edi, videobuf
  2592 00002189 89FB                <2> 		mov ebx, edi
  2593                              <2> 	intloopclear:
  2594 0000218B 668903              <2> 		mov [ebx], ax
  2595 0000218E 81C302000000        <2> 		add ebx, 2
  2596 00002194 FEC9                <2> 		dec cl
  2597 00002196 80F900              <2> 		cmp cl, 0
  2598 00002199 75F0                <2> 		jne intloopclear
  2599 0000219B FECD                <2> 		dec ch
  2600 0000219D 80FD00              <2> 		cmp ch, 0
  2601 000021A0 75E9                <2> 		jne intloopclear
  2602 000021A2 668B0D[B4210000]    <2> 		mov cx, [charxy]
  2603 000021A9 E9C0FEFFFF          <2> 		jmp donescr
  2604                              <2> 		
  2605 000021AE 0000                <2> linebeginpos dw 0
  2606 000021B0 0000                <2> videobufpos: dw 0
  2607 000021B2 0000                <2> charpos db 0,0
  2608 000021B4 501E                <2> charxy db 80,30
  2609 000021B6 0000                <2> charbuf dw 0
  2610                              <2> %endif
  2611                              <1> intx7:
  2612                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2613 000021B8 E8BE2B0000          <2> 	call loadfile
  2614 000021BD E9B6E0FFFF          <2> 	jmp timerinterrupt
  2615                              <1> intx9:
  2616                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2617 000021C2 3C00                <2> 	cmp al, 0
  2618 000021C4 750A                <2> 	jne num2strb
  2619 000021C6 E8CE0A0000          <2> 	call showdec
  2620 000021CB E9A8E0FFFF          <2> 	jmp timerinterrupt
  2621                              <2> num2strb:
  2622 000021D0 E8FA090000          <2> 	call showhex
  2623 000021D5 E99EE0FFFF          <2> 	jmp timerinterrupt
  2624                              <1> intx10:
  2625                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2626 000021DA E89C0B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2627 000021DF E994E0FFFF          <2> 	jmp timerinterrupt
  2628                              <2> 	
  2629                              <1> %ifdef threads.included
  2630                              <1> intx11:
  2631                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2632                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2633                              <2> 			;returns the PID of the new fork in ebx
  2634                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2635 000021E4 FA                  <2> 	cli
  2636 000021E5 60                  <2> 	pushad
  2637 000021E6 8925[B3220000]      <2> 	mov [.espold], esp
  2638 000021EC C605[1A4F0000]01    <2> 	mov byte [threadson], 1
  2639 000021F3 8B1D[1B4F0000]      <2> 	mov ebx, [currentthread]
  2640 000021F9 C1E302              <2> 	shl ebx, 2
  2641 000021FC 89A3[CF240100]      <2> 	mov [threadlist + ebx], esp
  2642 00002202 C1EB02              <2> 	shr ebx, 2
  2643 00002205 81FB00000000        <2> 	cmp ebx, 0
  2644 0000220B 750C                <2> 	jne .simplestack
  2645 0000220D BB[FE720000]        <2> 	mov ebx, stackend
  2646 00002212 29E3                <2> 	sub ebx, esp
  2647 00002214 E90B000000          <2> 	jmp .stackcalcdone
  2648                              <2> .simplestack:
  2649 00002219 C1E30A              <2> 	shl ebx, 10
  2650 0000221C 81C3[CF380100]      <2> 	add ebx, stack1
  2651 00002222 29E3                <2> 	sub ebx, esp
  2652                              <2> .stackcalcdone:
  2653 00002224 29DC                <2> 	sub esp, ebx
  2654 00002226 81C4[CF380100]      <2> 	add esp, stack1
  2655 0000222C 8B1D[164F0000]      <2> 	mov ebx, [lastthread]
  2656 00002232 C1E308              <2> 	shl ebx, 8
  2657 00002235 01DC                <2> 	add esp, ebx
  2658 00002237 891D[B7220000]      <2> 	mov [.stackend], ebx
  2659                              <2> 
  2660 0000223D 89E5                <2> 	mov ebp, esp
  2661 0000223F 8B25[B3220000]      <2> 	mov esp, [.espold]
  2662                              <2> 
  2663 00002245 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2664 00002248 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2665                              <2> 
  2666 0000224C 31DB                <2> 	xor ebx, ebx
  2667                              <2> .stackcopy:
  2668 0000224E 668B041C            <2> 	mov ax, [esp + ebx]
  2669 00002252 6689441D00          <2> 	mov [ebp + ebx], ax
  2670 00002257 81C302000000        <2> 	add ebx, 2
  2671 0000225D 3B1D[B7220000]      <2> 	cmp ebx, [.stackend]
  2672 00002263 72E9                <2> 	jb .stackcopy
  2673                              <2> 
  2674 00002265 31C0                <2> 	xor eax, eax
  2675 00002267 668CC8              <2> 	mov ax, cs
  2676 0000226A 89C2                <2> 	mov edx, eax
  2677 0000226C 8B4C2428            <2> 	mov ecx, [esp + 40]
  2678 00002270 81C900020000        <2> 	or ecx, 0x200
  2679                              <2> 	
  2680 00002276 81FE00000000        <2> 	cmp esi, 0
  2681 0000227C 7504                <2> 	jne .nochangestack
  2682 0000227E 8B742420            <2> 	mov esi, [esp + 32]
  2683                              <2> .nochangestack:
  2684 00002282 89F0                <2> 	mov eax, esi
  2685 00002284 89EC                <2> 	mov esp, ebp
  2686                              <2> 
  2687 00002286 89442420            <2> 	mov [esp + 32], eax
  2688 0000228A 89542424            <2> 	mov [esp + 36], edx
  2689 0000228E 894C2428            <2> 	mov [esp + 40], ecx
  2690                              <2> 
  2691 00002292 8B1D[164F0000]      <2> 	mov ebx, [lastthread]
  2692 00002298 89A3[CF240100]      <2> 	mov [threadlist + ebx], esp
  2693 0000229E 81C304000000        <2> 	add ebx, 4
  2694 000022A4 891D[164F0000]      <2> 	mov [lastthread], ebx
  2695 000022AA 8B25[B3220000]      <2> 	mov esp, [.espold]
  2696 000022B0 61                  <2> 	popad
  2697 000022B1 FB                  <2> 	sti
  2698 000022B2 CF                  <2> 	iret
  2699                              <2> 
  2700 000022B3 00000000            <2> .espold dd 0
  2701 000022B7 00000000            <2> .stackend dd 0
  2702                              <1> %endif
  2703                              <1> intx12:
  2704                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2705 000022BB A1[2C020000]        <2> 	mov eax, [timeseconds]
  2706 000022C0 8B1D[30020000]      <2> 	mov ebx, [timenanoseconds]
  2707 000022C6 89D9                <2> 	mov ecx, ebx
  2708 000022C8 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2709 000022CB E9A8DFFFFF          <2> 	jmp timerinterrupt
  2710                              <2> 	
  2711                              <1> intx13:
  2712                              <1> 	%include 'source/interrupts/13_settime.asm'
  2713 000022D0 A3[2C020000]        <2> 	mov [timeseconds], eax
  2714 000022D5 891D[30020000]      <2> 	mov [timenanoseconds], ebx
  2715 000022DB E998DFFFFF          <2> 	jmp timerinterrupt
  2716                              <2> 	
  2717                              <1> intx14:
  2718                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2719 000022E0 BF[DE8D0000]        <2> 	mov edi, buftxt
  2720                              <2> cpcmd:
  2721 000022E5 8A06                <2> 	mov al, [esi]
  2722 000022E7 8807                <2> 	mov [edi], al
  2723 000022E9 46                  <2> 	inc esi
  2724 000022EA 47                  <2> 	inc edi
  2725 000022EB 3C00                <2> 	cmp al, 0
  2726 000022ED 75F6                <2> 	jne cpcmd
  2727 000022EF E8DE050000          <2> 	call run
  2728 000022F4 CF                  <2> 	iret
  2729                              <1> intx15:
  2730                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2731 000022F5 BB[DE790000]        <2> 	mov ebx, variables
  2732 000022FA 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  2733 00002300 89F7                <2> 	mov edi, esi
  2734 00002302 31C9                <2> 	xor ecx, ecx
  2735                              <2> getcommandzeroes:
  2736 00002304 8A07                <2> 	mov al, [edi]
  2737 00002306 47                  <2> 	inc edi
  2738 00002307 3C3B                <2> 	cmp al, ';'
  2739 00002309 740B                <2> 	je nomorezeroes
  2740 0000230B 3C00                <2> 	cmp al, 0
  2741 0000230D 7407                <2> 	je nomorezeroes
  2742 0000230F 3C20                <2> 	cmp al, ' '
  2743 00002311 75F1                <2> 	jne getcommandzeroes
  2744 00002313 41                  <2> 	inc ecx
  2745 00002314 EBEE                <2> 	jmp getcommandzeroes
  2746                              <2> nomorezeroes:
  2747 00002316 41                  <2> 	inc ecx
  2748 00002317 4F                  <2> 	dec edi
  2749 00002318 8B1D[6A790000]      <2> 	mov ebx, [uid]
  2750 0000231E 8B15[1B4F0000]      <2> 	mov edx, [currentthread]
  2751 00002324 CF                  <2> 	iret
  2752                              <2> 	
  2753                              <1> 		
  2754                              <1> %ifdef io.serial
  2755                              <1> termcopy:
  2756                              <1> 		ret
  2757                              <1> %else
  2758 00002325 00000000            <1> 	termcursorpos dd 0
  2759 00002329 0000                <1> 	removedvideo dw 0
  2760                              <1> termcopy:	
  2761 0000232B 60                  <1> 	pusha
  2762 0000232C BF[F3910000]        <1> 	mov edi, videobuf
  2763 00002331 31DB                <1> 	xor ebx, ebx
  2764 00002333 668B1D[B0210000]    <1> 	mov bx, [videobufpos]
  2765 0000233A 01DF                <1> 	add edi, ebx
  2766 0000233C 893D[25230000]      <1> 	mov [termcursorpos], edi
  2767 00002342 E8B0000000          <1> 	call switchtermcursor
  2768 00002347 803D[18610000]00    <1> 	cmp byte [guion], 0
  2769 0000234E 0F8405000000        <1> 	je near nowincopy
  2770                              <1> %ifdef gui.included
  2771                              <1> 	mov byte [mouseselecton], 0
  2772                              <1> 	mov byte [termcopyon], 1
  2773                              <1> 	cmp byte [termguion], 1
  2774                              <1> 	je near windowvideocopy
  2775                              <1> %endif
  2776 00002354 E997000000          <1> 	jmp nocopytermatall
  2777                              <1> nowincopy:
  2778 00002359 BE00000A00          <1> 	mov esi, 0xA0000
  2779 0000235E A1[19020000]        <1> 	mov eax, [basecache]
  2780 00002363 C1E004              <1> 	shl eax, 4
  2781 00002366 29C6                <1> 	sub esi, eax
  2782 00002368 BF[F3910000]        <1> 	mov edi, videobuf
  2783 0000236D 31C9                <1> 	xor ecx, ecx
  2784 0000236F 668B0D[B4210000]    <1> 	mov cx, [charxy]
  2785                              <1> nowincopy2:
  2786 00002376 668B07              <1> 	mov ax, [edi]
  2787 00002379 81C7C0120000        <1> 	add edi, (videobuf2 - videobuf)
  2788 0000237F 668B1F              <1> 	mov bx, [edi]
  2789 00002382 668907              <1> 	mov [edi], ax
  2790 00002385 81EFC0120000        <1> 	sub edi, (videobuf2 - videobuf)
  2791 0000238B 47                  <1> 	inc edi
  2792 0000238C 6639D8              <1> 	cmp ax, bx
  2793 0000238F 743E                <1> 	je nopresentwinfont
  2794 00002391 4F                  <1> 	dec edi
  2795 00002392 BB[8D4F0000]        <1> 	mov ebx, fonts
  2796 00002397 31C0                <1> 	xor eax, eax
  2797 00002399 8A07                <1> 	mov al, [edi]
  2798 0000239B C1E004              <1> 	shl eax, 4
  2799 0000239E 01C3                <1> 	add ebx, eax
  2800 000023A0 47                  <1> 	inc edi
  2801 000023A1 8A27                <1> 	mov ah, [edi]
  2802 000023A3 31D2                <1> 	xor edx, edx
  2803 000023A5 8A15[B4210000]      <1> 	mov dl, [charxy]
  2804 000023AB C1C110              <1> 	rol ecx, 16
  2805 000023AE B110                <1> 	mov cl, 16
  2806                              <1> nowinfont:
  2807 000023B0 8A03                <1> 	mov al, [ebx]
  2808 000023B2 D0C8                <1> 	ror al, 1
  2809 000023B4 80FC07              <1> 	cmp ah, 7
  2810 000023B7 7602                <1> 	jbe notnotfont
  2811 000023B9 F6D0                <1> 	not al
  2812                              <1> notnotfont:
  2813 000023BB 8806                <1> 	mov [esi], al
  2814 000023BD 01D6                <1> 	add esi, edx
  2815 000023BF 43                  <1> 	inc ebx
  2816 000023C0 FEC9                <1> 	dec cl
  2817 000023C2 80F900              <1> 	cmp cl, 0
  2818 000023C5 75E9                <1> 	jne nowinfont
  2819 000023C7 C1E204              <1> 	shl edx, 4
  2820 000023CA 29D6                <1> 	sub esi, edx
  2821 000023CC C1C110              <1> 	rol ecx, 16
  2822                              <1> nopresentwinfont:
  2823 000023CF 47                  <1> 	inc edi
  2824 000023D0 46                  <1> 	inc esi
  2825 000023D1 FEC9                <1> 	dec cl
  2826 000023D3 80F900              <1> 	cmp cl, 0
  2827 000023D6 759E                <1> 	jne nowincopy2
  2828 000023D8 8A0D[B4210000]      <1> 	mov cl, [charxy]
  2829 000023DE 31D2                <1> 	xor edx, edx
  2830 000023E0 88CA                <1> 	mov dl, cl
  2831 000023E2 29D6                <1> 	sub esi, edx
  2832 000023E4 C1E204              <1> 	shl edx, 4
  2833 000023E7 01D6                <1> 	add esi, edx
  2834 000023E9 FECD                <1> 	dec ch
  2835 000023EB 80FD00              <1> 	cmp ch, 0
  2836 000023EE 7586                <1> 	jne nowincopy2
  2837                              <1> nocopytermatall:
  2838 000023F0 E802000000          <1> 	call switchtermcursor
  2839 000023F5 61                  <1> 	popa
  2840 000023F6 C3                  <1> 	ret
  2841                              <1> 	
  2842                              <1> switchtermcursor:
  2843 000023F7 8B3D[25230000]      <1> 	mov edi, [termcursorpos]
  2844 000023FD 8A4701              <1> 	mov al, [edi + 1]
  2845 00002400 8A27                <1> 	mov ah, [edi]
  2846 00002402 3C07                <1> 	cmp al, 7
  2847 00002404 7607                <1> 	jbe movlargecursorterm
  2848 00002406 B007                <1> 	mov al, 7
  2849 00002408 E902000000          <1> 	jmp movedcursorterm
  2850                              <1> movlargecursorterm:
  2851 0000240D B0F0                <1> 	mov al, 0xF0
  2852                              <1> movedcursorterm:
  2853 0000240F 884701              <1> 	mov [edi + 1], al
  2854 00002412 80FC00              <1> 	cmp ah, 0
  2855 00002415 7504                <1> 	jne fixednocursorterm
  2856 00002417 B420                <1> 	mov ah, " "
  2857 00002419 8827                <1> 	mov [edi], ah
  2858                              <1> fixednocursorterm:
  2859 0000241B C3                  <1> 	ret
  2860                              <1> %endif
  2861                                      %include "source/dosints.asm"
  2862                              <1> int20h:
  2863 0000241C 66B8004C            <1> mov ax, 0x4C00
  2864                              <1> int21h:
  2865                              <1> dostosolleros:
  2866 00002420 6650                <1> 	push ax
  2867 00002422 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2868 00002426 8ED8                <1> 	mov ds, ax
  2869 00002428 8EC0                <1> 	mov es, ax
  2870 0000242A 8EE0                <1> 	mov fs, ax
  2871 0000242C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2872 00002430 8EE8                <1> 	mov gs, ax
  2873 00002432 6658                <1> 	pop ax
  2874 00002434 9C                  <1> 	pushf
  2875 00002435 60                  <1> 	pusha
  2876 00002436 80FC01              <1> 	cmp ah, 1
  2877 00002439 0F8449000000        <1> 	je near dosgchar
  2878 0000243F 80FC02              <1> 	cmp ah, 2
  2879 00002442 0F8447000000        <1> 	je near doswchar
  2880 00002448 80FC09              <1> 	cmp ah, 9
  2881 0000244B 0F8449000000        <1> 	je near dosprintstr
  2882 00002451 80FC0A              <1> 	cmp ah, 0xA
  2883 00002454 0F8456000000        <1> 	je near dosgetstr
  2884 0000245A 80FC2B              <1> 	cmp ah, 0x2B
  2885 0000245D 0F8492000000        <1> 	je near dosgetdate
  2886 00002463 80FC2C              <1> 	cmp ah, 0x2C
  2887 00002466 0F84AC000000        <1> 	je near dosgettime
  2888 0000246C 80FC4C              <1> 	cmp ah, 0x4C
  2889 0000246F 0F84C1000000        <1> 	je near dosexit
  2890                              <1> backtodos:
  2891 00002475 61                  <1> 	popa
  2892 00002476 9D                  <1> 	popf
  2893 00002477 6650                <1> 	push ax
  2894 00002479 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2895 0000247D 8ED8                <1> 	mov ds, ax
  2896 0000247F 8EC0                <1> 	mov es, ax
  2897 00002481 8EE0                <1> 	mov fs, ax
  2898 00002483 8EE8                <1> 	mov gs, ax
  2899 00002485 6658                <1> 	pop ax
  2900 00002487 CF                  <1> 	iret
  2901                              <1> 
  2902                              <1> dosgchar:
  2903 00002488 E8EFFAFFFF          <1> 	call getchar
  2904 0000248D EBE6                <1> 	jmp backtodos
  2905                              <1> 	
  2906                              <1> doswchar:
  2907 0000248F 88D0                <1> 	mov al, dl
  2908 00002491 B307                <1> 	mov bl, 7
  2909 00002493 E849FBFFFF          <1> 	call prcharint
  2910 00002498 EBDB                <1> 	jmp backtodos
  2911                              <1> 	
  2912                              <1> dosprintstr:
  2913 0000249A 31F6                <1> 	xor esi, esi
  2914 0000249C 6689D6              <1> 	mov si, dx
  2915 0000249F 81C600004000        <1> 	add esi, dosprogloc
  2916 000024A5 B024                <1> 	mov al, "$"
  2917 000024A7 B307                <1> 	mov bl, 7
  2918 000024A9 E873F6FFFF          <1> 	call printint
  2919 000024AE EBC5                <1> 	jmp backtodos
  2920                              <1> 	
  2921                              <1> dosgetstr:
  2922 000024B0 31F6                <1> 	xor esi, esi
  2923 000024B2 6689D6              <1> 	mov si, dx
  2924 000024B5 81C600004000        <1> 	add esi, dosprogloc
  2925 000024BB B900000000          <1> 	mov ecx, 0
  2926 000024C0 8A0E                <1> 	mov cl, [esi]
  2927 000024C2 81C603000000        <1> 	add esi, 3
  2928 000024C8 89F7                <1> 	mov edi, esi
  2929 000024CA 8935[F1240000]      <1> 	mov [stringstart], esi
  2930 000024D0 01CF                <1> 	add edi, ecx
  2931 000024D2 B00A                <1> 	mov al, 10
  2932 000024D4 B307                <1> 	mov bl, 7
  2933 000024D6 E829F7FFFF          <1> 	call rdprint
  2934 000024DB 89F1                <1> 	mov ecx, esi
  2935 000024DD 2B0D[F1240000]      <1> 	sub ecx, [stringstart]
  2936 000024E3 8B35[F1240000]      <1> 	mov esi, [stringstart]
  2937 000024E9 884EFF              <1> 	mov [esi - 1], cl
  2938 000024EC 884EFE              <1> 	mov [esi - 2], cl
  2939 000024EF EB84                <1> 	jmp backtodos
  2940 000024F1 00000000            <1> stringstart dd 0
  2941                              <1> 
  2942                              <1> dosgetdate:
  2943 000024F5 E8B71C0000          <1> 	call time
  2944 000024FA 8A0D[79430000]      <1> 	mov cl, [RTCtimeYear]
  2945 00002500 B500                <1> 	mov ch, 0
  2946 00002502 6681C1D007          <1> 	add cx, 2000
  2947 00002507 8A35[78430000]      <1> 	mov dh, [RTCtimeMonth]
  2948 0000250D 8A15[77430000]      <1> 	mov dl, [RTCtimeDay]
  2949 00002513 E95DFFFFFF          <1> 	jmp backtodos
  2950                              <1> 
  2951                              <1> dosgettime:
  2952 00002518 E8941C0000          <1> 	call time
  2953 0000251D 8A2D[76430000]      <1> 	mov ch, [RTCtimeHour]
  2954 00002523 8A0D[75430000]      <1> 	mov cl, [RTCtimeMinute]
  2955 00002529 8A35[74430000]      <1> 	mov dh, [RTCtimeSecond]
  2956 0000252F B200                <1> 	mov dl, 0
  2957 00002531 E93FFFFFFF          <1> 	jmp backtodos
  2958                              <1> 	
  2959                              <1> dosexit:
  2960 00002536 61                  <1> 	popa
  2961 00002537 8B25[5E770000]      <1> 	mov esp, [previousstack]
  2962 0000253D 31DB                <1> 	xor ebx, ebx
  2963 0000253F 88C3                <1> 	mov bl, al
  2964 00002541 80FB00              <1> 	cmp bl, 0
  2965 00002544 0F855EF5FFFF        <1> 	jne near exitprog.error
  2966 0000254A C3                  <1> 	ret
  2967                                      %include "source/solleros.asm"
  2968                              <1> 	;SOLLEROS.ASM
  2969                              <1> os:
  2970                              <1> setdefenv:
  2971 0000254B B02F                <1> 	mov al, '/'
  2972 0000254D A2[6A770000]        <1> 	mov [currentfolder], al
  2973 00002552 B801000000          <1> 	mov eax, 1
  2974 00002557 A3[66770000]        <1> 	mov [currentfolderloc], eax
  2975 0000255C E81FF6FFFF          <1> 	call clear
  2976                              <1> bootfilecheck:
  2977 00002561 803D[6E790000]01    <1> 	cmp byte [ranboot], 1
  2978 00002568 0F8427000000        <1> 	je near nobootfile
  2979 0000256E C605[6E790000]01    <1> 	mov byte [ranboot], 1
  2980 00002575 BF[1F4F0000]        <1> 	mov edi, bootfilename
  2981 0000257A BE00004000          <1> 	mov esi, 0x400000
  2982 0000257F E8F7270000          <1> 	call loadfile
  2983 00002584 81FA94010000        <1> 	cmp edx, 404
  2984 0000258A 0F8405000000        <1> 	je near nobootfile
  2985 00002590 E8910D0000          <1> 	call progbatchfound
  2986                              <1> nobootfile:	
  2987                              <1> 
  2988 00002595 BE[00000000]        <1> 	mov esi, signature
  2989                              <1> .sigcopyloop:	;this prevents an odd error
  2990 0000259A 658A06              <1> 	mov al, [gs:esi]
  2991 0000259D 8806                <1> 	mov [esi], al
  2992 0000259F 46                  <1> 	inc esi
  2993 000025A0 81FE[1A000000]      <1> 	cmp esi, signatureend
  2994 000025A6 72F2                <1> 	jb .sigcopyloop
  2995 000025A8 BE[00000000]        <1> 	mov esi, signature
  2996 000025AD E868F5FFFF          <1> 	call print
  2997 000025B2 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  2998 000025B8 E8DC060000          <1> 	call showdec
  2999 000025BD BE[684F0000]        <1> 	mov esi, line
  3000 000025C2 E853F5FFFF          <1> 	call print
  3001 000025C7 BE[444F0000]        <1> 	mov esi, userask
  3002 000025CC E849F5FFFF          <1> 	call print
  3003                              <1> usercheck:
  3004 000025D1 BE[DE8D0000]        <1> 	mov esi, buftxt
  3005 000025D6 BF[DE910000]        <1> 	mov edi, buftxtend
  3006 000025DB B00A                <1> 	mov al, 10
  3007 000025DD E822F6FFFF          <1> 	call rdprint
  3008 000025E2 56                  <1> 	push esi
  3009 000025E3 BE[4E4F0000]        <1> 	mov esi, pwdask
  3010 000025E8 E82DF5FFFF          <1> 	call print
  3011 000025ED 5E                  <1> 	pop esi
  3012 000025EE 46                  <1> 	inc esi
  3013 000025EF 8935[D2260000]      <1> 	mov [esipass], esi
  3014                              <1> passcheck:
  3015 000025F5 E882F9FFFF          <1> 	call getchar
  3016 000025FA 3C0A                <1> 	cmp al, 10
  3017 000025FC 0F8436000000        <1> 	je near gotpass
  3018 00002602 3C08                <1> 	cmp al, 8
  3019 00002604 0F8410000000        <1> 	je near backpass
  3020 0000260A 8806                <1> 	mov [esi], al
  3021 0000260C 46                  <1> 	inc esi
  3022 0000260D B02A                <1> 	mov al, '*'
  3023 0000260F E8CDF9FFFF          <1> 	call prcharint
  3024 00002614 EBDF                <1> 	jmp passcheck
  3025 00002616 08200800            <1> backcursor2 db 8," ",8,0
  3026                              <1> backpass:
  3027 0000261A 3B35[D2260000]      <1> 	cmp esi, [esipass]
  3028 00002620 0F84CFFFFFFF        <1> 	je near passcheck
  3029 00002626 4E                  <1> 	dec esi
  3030 00002627 C60600              <1> 	mov byte [esi], 0
  3031 0000262A 56                  <1> 	push esi
  3032 0000262B BE[16260000]        <1> 	mov esi, backcursor2
  3033 00002630 E8E5F4FFFF          <1> 	call print
  3034 00002635 5E                  <1> 	pop esi
  3035 00002636 EBBD                <1> 	jmp passcheck
  3036                              <1> gotpass:
  3037 00002638 30C0                <1> 	xor al, al
  3038 0000263A 31C9                <1> 	xor ecx, ecx
  3039 0000263C 8806                <1> 	mov [esi], al
  3040 0000263E BB[6A4F0000]        <1> 	mov ebx, userlst
  3041                              <1> userfind:
  3042 00002643 BE[DE8D0000]        <1> 	mov esi, buftxt
  3043 00002648 8A06                <1> 	mov al, [esi]
  3044 0000264A 3C00                <1> 	cmp al, 0
  3045 0000264C 0F84F9FEFFFF        <1> 	je near os
  3046 00002652 891D[D6260000]      <1> 	mov [usercache], ebx
  3047 00002658 E84F030000          <1> 	call tester
  3048 0000265D 3C01                <1> 	cmp al, 1
  3049 0000265F 7416                <1> 	je pwdtest
  3050 00002661 41                  <1> 	inc ecx
  3051                              <1> nxtuser:
  3052 00002662 8A03                <1> 	mov al, [ebx]
  3053 00002664 43                  <1> 	inc ebx
  3054 00002665 3C00                <1> 	cmp al, 0
  3055 00002667 75F9                <1> 	jne nxtuser
  3056 00002669 81FB[8D4F0000]      <1> 	cmp ebx, userlstend
  3057 0000266F 0F83D6FEFFFF        <1> 	jae near os
  3058 00002675 EBCC                <1> 	jmp userfind
  3059                              <1> pwdtest:
  3060 00002677 46                  <1> 	inc esi
  3061 00002678 43                  <1> 	inc ebx
  3062 00002679 E82E030000          <1> 	call tester
  3063 0000267E 3C01                <1> 	cmp al, 1
  3064 00002680 7402                <1> 	je pwdrgt
  3065 00002682 EBDE                <1> 	jmp nxtuser
  3066                              <1> pwdrgt:
  3067 00002684 D1E9                <1> 	shr ecx, 1
  3068 00002686 890D[6A790000]      <1> 	mov [uid], ecx
  3069                              <1> %ifdef io.serial
  3070                              <1> 	mov esi, line
  3071                              <1> 	call print
  3072                              <1> %endif
  3073 0000268C E8EFF4FFFF          <1> 	call clear
  3074 00002691 66B90002            <1> 	mov cx, 200h
  3075 00002695 BE[DE8D0000]        <1> 	mov esi, buftxt
  3076 0000269A 8935[A8290000]      <1> 	mov [currentcommandloc], esi
  3077 000026A0 E825000000          <1> 	call bufclr
  3078                              <1> clearolddata:
  3079 000026A5 31C0                <1> 	xor eax, eax
  3080 000026A7 A2[6F790000]        <1> 	mov [IFON], al
  3081 000026AC A2[70790000]        <1> 	mov [IFTRUE], al
  3082 000026B1 A2[D8790000]        <1> 	mov [BATCHISON], al
  3083 000026B6 A3[D4790000]        <1> 	mov [BATCHPOS], eax
  3084 000026BB A2[D9790000]        <1> 	mov [LOOPON], al
  3085 000026C0 A3[DA790000]        <1> 	mov [LOOPPOS], eax
  3086 000026C5 E933000000          <1> 	jmp nwcmd
  3087                              <1> bufclr:	
  3088 000026CA 30C0                <1> 	xor al, al
  3089 000026CC 8806                <1> 	mov [esi], al
  3090 000026CE 46                  <1> 	inc esi
  3091 000026CF E2F9                <1> 	loop bufclr
  3092 000026D1 C3                  <1> 	ret
  3093                              <1> 
  3094 000026D2 00000000            <1> esipass dd 0
  3095 000026D6 [6A4F0000]          <1> usercache dd userlst
  3096                              <1> 	
  3097                              <1> buftxtclear:
  3098 000026DA 30C0                <1> 	xor al, al
  3099 000026DC BE[DE8D0000]        <1> 	mov esi, buftxt
  3100 000026E1 81FE[DE910000]      <1> clearbuftxt: cmp esi, buf2
  3101 000026E7 730E                <1> 	jae retbufclr
  3102 000026E9 8806                <1> 	mov [esi], al
  3103 000026EB 46                  <1> 	inc esi
  3104 000026EC EBF3                <1> 	jmp clearbuftxt
  3105                              <1> 
  3106 000026EE 39DE                <1> clearitbuf: cmp esi, ebx
  3107 000026F0 7305                <1> 	jae retbufclr
  3108 000026F2 8806                <1> 	mov [esi], al
  3109 000026F4 46                  <1> 	inc esi
  3110 000026F5 EBF7                <1> 	jmp clearitbuf
  3111 000026F7 C3                  <1> retbufclr: ret
  3112                              <1> 
  3113 000026F8 E900000000          <1> full:	jmp nwcmd
  3114                              <1> 
  3115                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3116                              <1> nwcmd:
  3117 000026FD FB                  <1> 	sti
  3118 000026FE 31C0                <1> 	xor eax, eax
  3119 00002700 3905[CA280000]      <1> 	cmp [nextcommandloc], eax
  3120 00002706 7411                <1> 	je nomultiplecommand
  3121 00002708 8B35[CA280000]      <1> 	mov esi, [nextcommandloc]
  3122 0000270E 8935[CE280000]      <1> 	mov [thiscommandloc], esi
  3123 00002714 E9BE010000          <1> 	jmp fixvariables
  3124                              <1> nomultiplecommand:
  3125 00002719 A3[CE280000]        <1> 	mov [thiscommandloc], eax
  3126 0000271E 3805[1A4F0000]      <1> 	cmp [threadson], al
  3127 00002724 7405                <1> 	je noclinwcmd
  3128 00002726 A2[1A4F0000]        <1> 	mov [threadson], al
  3129                              <1> noclinwcmd:
  3130 0000272B B001                <1> 	mov al, 1
  3131 0000272D 3805[D8790000]      <1> 	cmp [BATCHISON], al
  3132 00002733 7501                <1> 	jne cancel
  3133 00002735 C3                  <1> 	ret
  3134 00002736 30C0                <1> cancel:	xor al, al
  3135 00002738 A2[6F790000]        <1> 	mov [IFON], al
  3136 0000273D A2[D8790000]        <1> 	mov [BATCHISON], al
  3137 00002742 B05B                <1> 	mov al, '['
  3138 00002744 66BB0700            <1> 	mov bx, 7
  3139 00002748 E8A5F8FFFF          <1> 	call prcharq
  3140 0000274D 8B35[D6260000]      <1> 	mov esi, [usercache]
  3141 00002753 E8B0F3FFFF          <1> 	call printquiet
  3142 00002758 BE[584F0000]        <1> 	mov esi, computer
  3143 0000275D E8A6F3FFFF          <1> 	call printquiet
  3144 00002762 BE[6A770000]        <1> 	mov esi, currentfolder
  3145 00002767 0335[62770000]      <1> 	add esi, [lastfolderloc]
  3146 0000276D E896F3FFFF          <1> 	call printquiet
  3147 00002772 BE[634F0000]        <1> 	mov esi, endprompt
  3148 00002777 E89EF3FFFF          <1> 	call print
  3149 0000277C E859FFFFFF          <1> 	call buftxtclear
  3150 00002781 BE[DE8D0000]        <1> 	mov esi, buftxt
  3151 00002786 C605[651F0000]01    <1> 	mov byte [commandedit], 1
  3152 0000278D B00A                <1> 	mov al, 10
  3153 0000278F 66BB0700            <1> 	mov bx, 7
  3154 00002793 BF[DE910000]        <1> 	mov edi, buftxtend
  3155 00002798 E867F4FFFF          <1> 	call rdprint
  3156 0000279D C605[651F0000]00    <1> 	mov byte [commandedit], 0
  3157 000027A4 803D[DE8D0000]00    <1> 	cmp byte [buftxt], 0
  3158 000027AB 0F844CFFFFFF        <1> 	je near nwcmd
  3159 000027B1 8B35[B7F40000]      <1> gotcmd:	mov esi, [commandbufpos]
  3160 000027B7 8935[B3F40000]      <1> 	mov [lastcommandpos], esi
  3161                              <1> %ifdef io.serial
  3162                              <1> %else
  3163 000027BD BF[DE8D0000]        <1> 	mov edi, buftxt
  3164 000027C2 81C6[BBF40000]      <1> 	add esi, commandbuf
  3165 000027C8 81FE[BB040100]      <1> 	cmp esi, commandbufend
  3166 000027CE 7605                <1> 	jbe copycommand
  3167 000027D0 BE[BBF40000]        <1> 	mov esi, commandbuf
  3168                              <1> copycommand:
  3169 000027D5 8A07                <1> 	mov al, [edi]
  3170 000027D7 8806                <1> 	mov [esi], al
  3171 000027D9 47                  <1> 	inc edi
  3172 000027DA 46                  <1> 	inc esi
  3173 000027DB 3C00                <1> 	cmp al, 0
  3174 000027DD 740F                <1> 	je donecopy
  3175 000027DF 81FE[BB040100]      <1> 	cmp esi, commandbufend
  3176 000027E5 76EE                <1> 	jbe copycommand
  3177 000027E7 BE[BBF40000]        <1> 	mov esi, commandbuf
  3178 000027EC EBE7                <1> 	jmp copycommand
  3179                              <1> donecopy:
  3180 000027EE 81EE[BBF40000]      <1> 	sub esi, commandbuf
  3181 000027F4 8935[B7F40000]      <1> 	mov [commandbufpos], esi
  3182                              <1> %endif
  3183 000027FA E8D3000000          <1> 	call run
  3184 000027FF E9F9FEFFFF          <1> 	jmp nwcmd
  3185                              <1> 
  3186 00002804 E8D1FEFFFF          <1> input:	call buftxtclear
  3187 00002809 BE[DE8D0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3188 0000280E BF[DE910000]        <1> 	mov edi, buftxtend
  3189 00002813 B00A                <1> stdin:	mov al, 10
  3190 00002815 B307                <1> 	mov bl, 7
  3191 00002817 E8E8F3FFFF          <1> 	call rdprint
  3192 0000281C C3                  <1> 	ret
  3193                              <1> 
  3194                              <1> replacevariable:
  3195 0000281D 8A4601              <1> 	mov al, [esi + 1]
  3196 00002820 C64601FF            <1> 	mov byte [esi + 1], 255
  3197 00002824 3C24                <1> 	cmp al, "$"
  3198 00002826 0F84AB000000        <1> 	je near fixvariables
  3199 0000282C 884601              <1> 	mov [esi + 1], al
  3200 0000282F 56                  <1> 	push esi
  3201 00002830 81EE[DE8D0000]      <1> 	sub esi, buftxt
  3202 00002836 89F7                <1> 	mov edi, esi
  3203 00002838 81C6[DE8D0000]      <1> 	add esi, buftxt
  3204 0000283E 47                  <1> 	inc edi
  3205 0000283F BB[DE790000]        <1> 	mov ebx, variables
  3206 00002844 E8DA110000          <1> 	call nxtvrech
  3207 00002849 89F7                <1> 	mov edi, esi
  3208 0000284B 31DB                <1> 	xor ebx, ebx
  3209 0000284D 4E                  <1> 	dec esi
  3210                              <1> findvarname:
  3211 0000284E 4E                  <1> 	dec esi
  3212 0000284F 8A06                <1> 	mov al, [esi]
  3213 00002851 43                  <1> 	inc ebx
  3214 00002852 3C04                <1> 	cmp al, 4
  3215 00002854 75F8                <1> 	jne findvarname
  3216 00002856 5E                  <1> 	pop esi
  3217                              <1> replacevarloop:
  3218 00002857 8A07                <1> 	mov al, [edi]
  3219 00002859 81FB00000000        <1> 	cmp ebx, 0
  3220 0000285F 0F841E000000        <1> 	je near expandbuftxt
  3221 00002865 3C00                <1> 	cmp al, 0
  3222 00002867 0F8407000000        <1> 	je near compressbuftxt
  3223 0000286D 8806                <1> 	mov [esi], al
  3224 0000286F 4B                  <1> 	dec ebx
  3225 00002870 46                  <1> 	inc esi
  3226 00002871 47                  <1> 	inc edi
  3227 00002872 EBE3                <1> 	jmp replacevarloop
  3228                              <1> compressbuftxt:	
  3229 00002874 8A041E              <1> 	mov al, [esi + ebx]
  3230 00002877 8806                <1> 	mov [esi], al
  3231 00002879 46                  <1> 	inc esi
  3232 0000287A 3C00                <1> 	cmp al, 0
  3233 0000287C 75F6                <1> 	jne compressbuftxt
  3234 0000287E E954000000          <1> 	jmp fixvariables
  3235                              <1> expandbuftxt:
  3236 00002883 89F1                <1> 	mov ecx, esi
  3237 00002885 8A26                <1> 	mov ah, [esi]
  3238                              <1> expandbuftxtlp:
  3239 00002887 8A1E                <1> 	mov bl, [esi]
  3240 00002889 46                  <1> 	inc esi
  3241 0000288A 8A3E                <1> 	mov bh, [esi]
  3242 0000288C 8826                <1> 	mov [esi], ah
  3243 0000288E 88FC                <1> 	mov ah, bh
  3244 00002890 80FB00              <1> 	cmp bl, 0
  3245 00002893 75F2                <1> 	jne expandbuftxtlp
  3246 00002895 89CE                <1> 	mov esi, ecx
  3247 00002897 8806                <1> 	mov [esi], al
  3248 00002899 47                  <1> 	inc edi
  3249 0000289A 8A07                <1> 	mov al, [edi]
  3250 0000289C 3C00                <1> 	cmp al, 0
  3251 0000289E 0F8433000000        <1> 	je near fixvariables
  3252 000028A4 46                  <1> 	inc esi
  3253 000028A5 EBDC                <1> 	jmp expandbuftxt
  3254                              <1> multipleprogline:
  3255 000028A7 30E4                <1> 	xor ah, ah
  3256 000028A9 8826                <1> 	mov [esi], ah
  3257 000028AB 46                  <1> 	inc esi
  3258 000028AC 8935[CA280000]      <1> 	mov [nextcommandloc], esi
  3259 000028B2 E93E000000          <1> 	jmp donefixvariables
  3260                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3261 000028B7 46                  <1> 	inc esi
  3262 000028B8 8A06                <1> 	mov al, [esi]
  3263 000028BA C606FF              <1> 	mov byte [esi], 255
  3264 000028BD 3C23                <1> 	cmp al, '#'
  3265 000028BF 7416                <1> 	je fixvariables
  3266 000028C1 4E                  <1> 	dec esi
  3267 000028C2 C60600              <1> 	mov byte [esi], 0
  3268 000028C5 E90D000000          <1> 	jmp fixvariables
  3269                              <1> 	
  3270 000028CA 00000000            <1> nextcommandloc dd 0
  3271 000028CE 00000000            <1> thiscommandloc dd 0	
  3272                              <1> run:
  3273 000028D2 BE[DE8D0000]        <1> 	mov esi, buftxt
  3274                              <1> fixvariables:
  3275 000028D7 46                  <1> 	inc esi
  3276 000028D8 8A06                <1> 	mov al, [esi]
  3277 000028DA 3C23                <1> 	cmp al, '#'	;inline comment
  3278 000028DC 74D9                <1> 	je inlinecomment
  3279 000028DE 3C24                <1> 	cmp al, '$' ;variable
  3280 000028E0 0F8437FFFFFF        <1> 	je near replacevariable
  3281 000028E6 3C3B                <1> 	cmp al, ';' ;program list
  3282 000028E8 74BD                <1> 	je multipleprogline
  3283 000028EA 3C00                <1> 	cmp al, 0
  3284 000028EC 75E9                <1> 	jne fixvariables
  3285 000028EE 31C0                <1> 	xor eax, eax
  3286 000028F0 A3[CA280000]        <1> 	mov [nextcommandloc], eax
  3287                              <1> donefixvariables:
  3288 000028F5 803D[932E0000]00    <1> 	cmp byte [indexdone], 0
  3289 000028FC 7505                <1> 	jne progtest
  3290 000028FE E8FB040000          <1> 	call indexfiles
  3291                              <1> progtest:
  3292 00002903 31C0                <1> 	xor eax, eax
  3293 00002905 BB[5E730000]        <1> 	mov ebx, fileindex
  3294 0000290A 668B03              <1> prgnxt:	mov ax, [ebx]
  3295 0000290D B1FF                <1> 	mov cl, 255
  3296 0000290F B52C                <1> 	mov ch, 44
  3297 00002911 6639C8              <1> 	cmp ax, cx
  3298 00002914 740B                <1> 	je fndprg
  3299 00002916 43                  <1> 	inc ebx
  3300 00002917 81FB[5E770000]      <1> 	cmp ebx, fileindexend
  3301 0000291D 735D                <1> 	jae prgnf
  3302 0000291F EBE9                <1> 	jmp prgnxt
  3303 00002921 81C302000000        <1> fndprg: add ebx, 2
  3304 00002927 31C9                <1> 	xor ecx, ecx
  3305 00002929 BE[DE8D0000]        <1> 	mov esi, buftxt
  3306 0000292E 390D[CE280000]      <1> 	cmp [thiscommandloc], ecx
  3307 00002934 7406                <1> 	je noprgtstmultiple
  3308 00002936 8B35[CE280000]      <1> 	mov esi, [thiscommandloc]
  3309                              <1> noprgtstmultiple:
  3310 0000293C E8A6000000          <1> 	call cndtest
  3311 00002941 3C01                <1> 	cmp al, 1
  3312 00002943 7302                <1> 	jae prggood
  3313 00002945 EBC3                <1> 	jmp prgnxt
  3314 00002947 81FB[5E770000]      <1> prggood: cmp ebx, fileindexend
  3315 0000294D 7358                <1> 	jae prgdn
  3316 0000294F 31C0                <1> 	xor eax, eax
  3317 00002951 BE[DE8D0000]        <1> 	mov esi, buftxt
  3318 00002956 3905[CE280000]      <1> 	cmp [thiscommandloc], eax
  3319 0000295C 7406                <1> 	je noprggoodmul
  3320 0000295E 8B35[CE280000]      <1> 	mov esi, [thiscommandloc]
  3321                              <1> noprggoodmul:
  3322 00002964 8935[A8290000]      <1> 	mov [currentcommandloc], esi
  3323 0000296A 81C303000000        <1> 	add ebx, 3
  3324 00002970 8B3B                <1> 	mov edi, [ebx]
  3325 00002972 C605[1A4F0000]02    <1> 	mov byte [threadson], 2
  3326 00002979 FFD7                <1> 	call edi
  3327 0000297B C3                  <1> 	ret
  3328                              <1> prgnf:	
  3329 0000297C 8B35[A8290000]      <1> 	mov esi, [currentcommandloc]
  3330 00002982 8A06                <1> 	mov al, [esi]
  3331 00002984 3C00                <1> 	cmp al, 0
  3332 00002986 741F                <1> 	je prgdn
  3333 00002988 BE[274F0000]        <1> 	mov esi, notfound1
  3334 0000298D E888F1FFFF          <1> 	call print
  3335 00002992 8B35[A8290000]      <1> 	mov esi, [currentcommandloc]
  3336 00002998 E87DF1FFFF          <1> 	call print
  3337 0000299D BE[2F4F0000]        <1> 	mov esi, notfound2
  3338 000029A2 E873F1FFFF          <1> 	call print
  3339 000029A7 C3                  <1> prgdn:	ret
  3340                              <1> 
  3341 000029A8 00000000            <1> currentcommandloc dd 0
  3342                              <1> 
  3343                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3344 000029AC 6631C0              <1> 	xor ax, ax
  3345 000029AF 8A06                <1> retest:	mov al, [esi]
  3346 000029B1 8A23                <1> 	mov ah, [ebx]
  3347 000029B3 3C00                <1> 	cmp al, 0
  3348 000029B5 7408                <1> 	je testtrue
  3349 000029B7 38E0                <1> 	cmp al, ah
  3350 000029B9 750C                <1> 	jne testfalse
  3351 000029BB 43                  <1> 	inc ebx
  3352 000029BC 46                  <1> 	inc esi
  3353 000029BD EBF0                <1> 	jmp retest
  3354                              <1> testtrue:
  3355 000029BF 80FC00              <1> 	cmp ah, 0
  3356 000029C2 7503                <1> 	jne testfalse
  3357 000029C4 B001                <1> 	mov al, 1
  3358 000029C6 C3                  <1> 	ret
  3359                              <1> testfalse:
  3360 000029C7 30C0                <1> 	xor al, al
  3361 000029C9 C3                  <1> 	ret
  3362                              <1> 
  3363                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3364 000029CA 30C0                <1> 	xor al, al
  3365                              <1> opretest:
  3366 000029CC 8A06                <1> 	mov al, [esi]
  3367 000029CE 8A23                <1> 	mov ah, [ebx]
  3368 000029D0 38E0                <1> 	cmp al, ah
  3369 000029D2 7510                <1> 	jne optestfalse
  3370 000029D4 80FC00              <1> 	cmp ah, 0
  3371 000029D7 7404                <1> 	je optesttrue
  3372 000029D9 43                  <1> 	inc ebx
  3373 000029DA 46                  <1> 	inc esi
  3374 000029DB EBEF                <1> 	jmp opretest
  3375                              <1> optesttrue:
  3376 000029DD 3C00                <1> 	cmp al, 0
  3377 000029DF 7503                <1> 	jne optestfalse
  3378 000029E1 B001                <1> 	mov al, 1
  3379 000029E3 C3                  <1> 	ret
  3380                              <1> optestfalse:
  3381 000029E4 30C0                <1> 	xor al, al
  3382 000029E6 C3                  <1> 	ret
  3383                              <1> 
  3384                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3385 000029E7 30C0                <1> 	xor al, al
  3386 000029E9 8A06                <1> cndretest:	mov al, [esi]
  3387 000029EB 8A23                <1> 	mov ah, [ebx]
  3388 000029ED 38CC                <1> 	cmp ah, cl
  3389 000029EF 7408                <1> 	je cndtesttrue
  3390 000029F1 38E0                <1> 	cmp al, ah
  3391 000029F3 750B                <1> 	jne cndtestfalse
  3392 000029F5 43                  <1> 	inc ebx
  3393 000029F6 46                  <1> 	inc esi
  3394 000029F7 EBF0                <1> 	jmp cndretest
  3395                              <1> cndtesttrue:
  3396 000029F9 38C8                <1> 	cmp al, cl
  3397 000029FB 7506                <1> 	jne cndtestalmost
  3398 000029FD B001                <1> 	mov al, 1
  3399 000029FF C3                  <1> 	ret
  3400                              <1> cndtestfalse:
  3401 00002A00 30C0                <1> 	xor al, al
  3402 00002A02 C3                  <1> 	ret
  3403                              <1> cndtestalmost:
  3404 00002A03 B002                <1> 	mov al, 2
  3405 00002A05 C3                  <1> 	ret
  3406                              <1> 	
  3407                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3408                              <1> 		                ;ends if array seperator is found backwards after 0
  3409                              <1> 	arnxt:	      
  3410 00002A06 88E8                <1> 		mov al, ch
  3411 00002A08 88CC                <1> 		mov ah, cl        
  3412 00002A0A 663906              <1> 		cmp [esi], ax
  3413 00002A0D 744D                <1> 		je ardn
  3414 00002A0F 66390E              <1> 		cmp [esi], cx
  3415 00002A12 7407                <1> 		je arfnd
  3416 00002A14 46                  <1> 		inc esi
  3417 00002A15 39DE                <1> 		cmp esi, ebx
  3418 00002A17 7343                <1> 		jae ardn
  3419 00002A19 EBEB                <1> 		jmp arnxt
  3420 00002A1B 81C602000000        <1> 	arfnd: add esi, 2
  3421 00002A21 891D[5D2A0000]      <1> 		mov [arbx], ebx
  3422 00002A27 890D[612A0000]      <1> 		mov [arcx], ecx
  3423 00002A2D E8E8F0FFFF          <1> 		call print
  3424 00002A32 8935[632A0000]      <1> 		mov [arsi], esi
  3425 00002A38 BE[684F0000]        <1> 		mov esi, line
  3426 00002A3D E8D8F0FFFF          <1> 		call print
  3427 00002A42 8B1D[5D2A0000]      <1> 		mov ebx, [arbx]
  3428 00002A48 668B0D[612A0000]    <1> 		mov cx, [arcx]
  3429 00002A4F 8B35[632A0000]      <1> 		mov esi, [arsi]
  3430 00002A55 46                  <1> 		inc esi
  3431 00002A56 39DE                <1> 		cmp esi, ebx
  3432 00002A58 7302                <1> 		jae ardn
  3433 00002A5A EBAA                <1> 		jmp arnxt
  3434 00002A5C C3                  <1> 	ardn:	ret
  3435 00002A5D 00000000            <1> arbx:	dw 0,0
  3436 00002A61 0000                <1> arcx:	db 0,0
  3437 00002A63 00000000            <1> arsi:	dw 0,0
  3438                              <1> 
  3439                              <1> clearbuffer:
  3440 00002A67 BE[DE910000]        <1> 	mov esi, buf2
  3441 00002A6C B030                <1> 	mov al, '0'
  3442 00002A6E 81FE[F2910000]      <1> clearbuf: cmp esi, numbuf
  3443 00002A74 7305                <1> 	jae doneclearbuff
  3444 00002A76 8806                <1> 	mov [esi], al
  3445 00002A78 46                  <1> 	inc esi
  3446 00002A79 EBF3                <1> 	jmp clearbuf
  3447                              <1> doneclearbuff: 
  3448 00002A7B C3                  <1> 		ret
  3449                              <1> 
  3450                              <1> convert:
  3451 00002A7C 4E                  <1> 	dec esi
  3452 00002A7D 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3453                              <1> .lp:
  3454 00002A7F 89DE                <1> 	mov esi, ebx
  3455 00002A81 81EE09000000        <1> 	sub esi, 9
  3456 00002A87 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3457 00002A8D 720A                <1> 	jb .8
  3458 00002A8F 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3459 00002A95 FE06                <1> 	inc byte [esi]
  3460 00002A97 EBE6                <1> 	jmp .lp
  3461 00002A99 46                  <1> .8:	inc esi
  3462 00002A9A 81F900E1F505        <1> 	cmp ecx, 100000000
  3463 00002AA0 720A                <1> 	jb .7
  3464 00002AA2 81E900E1F505        <1> 	sub ecx, 100000000
  3465 00002AA8 FE06                <1> 	inc byte [esi]
  3466 00002AAA EBD3                <1> 	jmp .lp
  3467 00002AAC 46                  <1> .7:	inc esi
  3468 00002AAD 81F980969800        <1> 	cmp ecx, 10000000
  3469 00002AB3 720A                <1> 	jb .6
  3470 00002AB5 81E980969800        <1> 	sub ecx, 10000000
  3471 00002ABB FE06                <1> 	inc byte [esi]
  3472 00002ABD EBC0                <1> 	jmp .lp
  3473 00002ABF 46                  <1> .6:	inc esi
  3474 00002AC0 81F940420F00        <1> 	cmp ecx, 1000000
  3475 00002AC6 720A                <1> 	jb .5
  3476 00002AC8 81E940420F00        <1> 	sub ecx, 1000000
  3477 00002ACE FE06                <1> 	inc byte [esi]
  3478 00002AD0 EBAD                <1> 	jmp .lp
  3479 00002AD2 46                  <1> .5:	inc esi
  3480 00002AD3 81F9A0860100        <1> 	cmp ecx, 100000
  3481 00002AD9 720A                <1> 	jb .4
  3482 00002ADB 81E9A0860100        <1> 	sub ecx, 100000
  3483 00002AE1 FE06                <1> 	inc byte [esi]
  3484 00002AE3 EB9A                <1> 	jmp .lp
  3485 00002AE5 46                  <1> .4:	inc esi
  3486 00002AE6 81F910270000        <1> 	cmp ecx, 10000
  3487 00002AEC 720A                <1> 	jb .3
  3488 00002AEE 81E910270000        <1> 	sub ecx, 10000
  3489 00002AF4 FE06                <1> 	inc byte [esi]
  3490 00002AF6 EB87                <1> 	jmp .lp
  3491 00002AF8 46                  <1> .3:	inc esi
  3492 00002AF9 81F9E8030000        <1> 	cmp ecx, 1000
  3493 00002AFF 720D                <1> 	jb .2
  3494 00002B01 81E9E8030000        <1> 	sub ecx, 1000
  3495 00002B07 FE06                <1> 	inc byte [esi]
  3496 00002B09 E971FFFFFF          <1> 	jmp .lp
  3497 00002B0E 46                  <1> .2:	inc esi
  3498 00002B0F 81F964000000        <1> 	cmp ecx, 100
  3499 00002B15 720D                <1> 	jb .1
  3500 00002B17 81E964000000        <1> 	sub ecx, 100
  3501 00002B1D FE06                <1> 	inc byte [esi]
  3502 00002B1F E95BFFFFFF          <1> 	jmp .lp
  3503 00002B24 46                  <1> .1:	inc esi
  3504 00002B25 81F90A000000        <1> 	cmp ecx, 10
  3505 00002B2B 720D                <1> 	jb .0
  3506 00002B2D 81E90A000000        <1> 	sub ecx, 10
  3507 00002B33 FE06                <1> 	inc byte [esi]
  3508 00002B35 E945FFFFFF          <1> 	jmp .lp
  3509 00002B3A 46                  <1> .0:	inc esi
  3510 00002B3B 81F901000000        <1> 	cmp ecx, 1
  3511 00002B41 720D                <1> 	jb .dn
  3512 00002B43 81E901000000        <1> 	sub ecx, 1
  3513 00002B49 FE06                <1> 	inc byte [esi]
  3514 00002B4B E92FFFFFFF          <1> 	jmp .lp
  3515                              <1> .dn:
  3516 00002B50 C3                  <1> 	ret
  3517                              <1> 
  3518                              <1> 	
  3519                              <1> 
  3520 00002B51 00<rept>            <1> hexnumber times 8 db 0
  3521 00002B59 202000              <1> hexnumberend db "  ",0
  3522                              <1> 
  3523                              <1> converthex:
  3524                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3525 00002B5C 56                  <1> 	push esi
  3526 00002B5D B030                <1> 	mov al, "0"
  3527 00002B5F 39FE                <1> .clearlp: cmp esi, edi
  3528 00002B61 7305                <1> 	jae .doneclear
  3529 00002B63 8806                <1> 	mov [esi], al
  3530 00002B65 46                  <1> 	inc esi
  3531 00002B66 EBF7                <1> 	jmp .clearlp
  3532                              <1> .doneclear:
  3533 00002B68 81EE02000000        <1> 	sub esi, 2
  3534 00002B6E 89C8                <1> 	mov eax, ecx
  3535                              <1> .loop:
  3536 00002B70 30FF                <1> 	xor bh, bh
  3537 00002B72 88C3                <1> 	mov bl, al
  3538 00002B74 66C1E304            <1> 	shl bx, 4
  3539 00002B78 C0EB04              <1> 	shr bl, 4
  3540 00002B7B 86DF                <1> 	xchg bl, bh ;they are backwards
  3541 00002B7D 80C330              <1> 	add bl, 48
  3542 00002B80 80FB39              <1> 	cmp bl, "9"
  3543 00002B83 7609                <1> 	jbe .goodbl
  3544 00002B85 80EB30              <1> 	sub bl, 48
  3545 00002B88 80EB0A              <1> 	sub bl, 0xA
  3546 00002B8B 80C341              <1> 	add bl, "A"
  3547                              <1> .goodbl:
  3548 00002B8E 80C730              <1> 	add bh, 48
  3549 00002B91 80FF39              <1> 	cmp bh, "9"
  3550 00002B94 7609                <1> 	jbe .goodbh
  3551 00002B96 80EF30              <1> 	sub bh, 48
  3552 00002B99 80EF0A              <1> 	sub bh, 0xA
  3553 00002B9C 80C741              <1> 	add bh, "A"
  3554                              <1> .goodbh:
  3555 00002B9F C1E808              <1> 	shr eax, 8
  3556 00002BA2 66891E              <1> 	mov [esi], bx
  3557 00002BA5 81EE02000000        <1> 	sub esi, 2
  3558 00002BAB 3B3424              <1> 	cmp esi, [esp]
  3559 00002BAE 7207                <1> 	jb .done
  3560 00002BB0 3D00000000          <1> 	cmp eax, 0
  3561 00002BB5 75B9                <1> 	jne .loop
  3562                              <1> .done:
  3563 00002BB7 5E                  <1> 	pop esi
  3564 00002BB8 C3                  <1> 	ret
  3565                              <1> 	
  3566                              <1> 	
  3567 00002BB9 00                  <1> smallhex db 0
  3568 00002BBA 01                  <1> firsthexshown db 1
  3569                              <1> showhexsmall:
  3570 00002BBB C605[B92B0000]01    <1> 	mov byte [smallhex], 1
  3571 00002BC2 E808000000          <1> 	call showhex
  3572 00002BC7 C605[B92B0000]00    <1> 	mov byte [smallhex], 0
  3573 00002BCE C3                  <1> 	ret
  3574                              <1> showhex:
  3575 00002BCF 60                  <1> 	pusha
  3576 00002BD0 BE[512B0000]        <1> 	mov esi, hexnumber
  3577 00002BD5 BF[592B0000]        <1> 	mov edi, hexnumberend
  3578 00002BDA E87DFFFFFF          <1> 	call converthex
  3579 00002BDF 803D[BA2B0000]01    <1> 	cmp byte [firsthexshown], 1
  3580 00002BE6 7503                <1> 	jne .show
  3581 00002BE8 6631D2              <1> 	xor dx, dx
  3582                              <1> .show:
  3583 00002BEB 803D[BA2B0000]03    <1> 	cmp byte [firsthexshown], 3
  3584 00002BF2 750A                <1> 	jne .nonewhexline
  3585 00002BF4 BE[684F0000]        <1> 	mov esi, line
  3586 00002BF9 E81CEFFFFF          <1> 	call print
  3587                              <1> .nonewhexline:
  3588 00002BFE 803D[BA2B0000]04    <1> 	cmp byte [firsthexshown], 4
  3589 00002C05 7527                <1> 	jne .notab
  3590 00002C07 B1A0                <1> 	mov cl, 160
  3591 00002C09 28D1                <1> 	sub cl, dl
  3592 00002C0B C0E905              <1> 	shr cl, 5
  3593 00002C0E C0E105              <1> 	shl cl, 5
  3594 00002C11 80F900              <1> 	cmp cl, 0
  3595 00002C14 750F                <1> 	jne .nonewline
  3596 00002C16 BE[684F0000]        <1> 	mov esi, line
  3597 00002C1B E8FAEEFFFF          <1> 	call print
  3598 00002C20 E909000000          <1> 	jmp .notab
  3599                              <1> .nonewline:
  3600 00002C25 80C20F              <1> 	add dl, 15
  3601 00002C28 C0EA04              <1> 	shr dl, 4
  3602 00002C2B C0E204              <1> 	shl dl, 4
  3603                              <1> .notab:
  3604 00002C2E BE[512B0000]        <1> 	mov esi, hexnumber
  3605 00002C33 803D[B92B0000]01    <1> 	cmp byte [smallhex],1
  3606 00002C3A 7506                <1> 	jne .nosmall
  3607 00002C3C 81C606000000        <1> 	add esi, 6
  3608                              <1> .nosmall:
  3609 00002C42 803D[BA2B0000]05    <1> 	cmp byte [firsthexshown], 5
  3610 00002C49 750A                <1> 	jne .noquiet
  3611 00002C4B E8B8EEFFFF          <1> 	call printquiet
  3612 00002C50 E918000000          <1> 	jmp .donequiet
  3613                              <1> .noquiet:
  3614 00002C55 803D[BA2B0000]06    <1> 	cmp byte [firsthexshown], 6
  3615 00002C5C 750A                <1> 	jne .normal
  3616 00002C5E E899EEFFFF          <1> 	call printhighlight
  3617 00002C63 E905000000          <1> 	jmp .donequiet
  3618                              <1> .normal:
  3619 00002C68 E8ADEEFFFF          <1> 	call print
  3620                              <1> .donequiet:
  3621 00002C6D 803D[BA2B0000]02    <1> 	cmp byte [firsthexshown], 2
  3622 00002C74 750A                <1> 	jne .shown
  3623 00002C76 BE[684F0000]        <1> 	mov esi, line
  3624 00002C7B E89AEEFFFF          <1> 	call print
  3625                              <1> .shown:
  3626 00002C80 C605[BA2B0000]00    <1> 	mov byte [firsthexshown], 0
  3627 00002C87 61                  <1> 	popa
  3628 00002C88 C3                  <1> 	ret
  3629                              <1> 
  3630                              <1> 
  3631 00002C89 303030303030303030- <1> decnumber db "00000000000000"
  3632 00002C92 3030303030          <1>
  3633 00002C97 2000                <1> decnumberend: db " ",0
  3634                              <1> 
  3635                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3636 00002C99 60                  <1> 	pusha
  3637 00002C9A BF[892C0000]        <1> 	mov edi, decnumber
  3638 00002C9F BE[972C0000]        <1> 	mov esi, decnumberend
  3639                              <1> .clear:
  3640 00002CA4 C60730              <1> 	mov byte [edi], '0'
  3641 00002CA7 47                  <1> 	inc edi
  3642 00002CA8 39F7                <1> 	cmp edi, esi
  3643 00002CAA 72F8                <1> 	jb .clear
  3644 00002CAC BF[892C0000]        <1> 	mov edi, decnumber
  3645 00002CB1 E8C6FDFFFF          <1> 	call convert
  3646 00002CB6 803D[BA2B0000]01    <1> 	cmp byte [firsthexshown], 1
  3647 00002CBD 7503                <1> 	jne .show
  3648 00002CBF 6631D2              <1> 	xor dx, dx
  3649                              <1> .show:
  3650 00002CC2 803D[BA2B0000]03    <1> 	cmp byte [firsthexshown], 3
  3651 00002CC9 750A                <1> 	jne .nonewdecline
  3652 00002CCB BE[684F0000]        <1> 	mov esi, line
  3653 00002CD0 E845EEFFFF          <1> 	call print
  3654                              <1> .nonewdecline:
  3655 00002CD5 803D[BA2B0000]04    <1> 	cmp byte [firsthexshown], 4
  3656 00002CDC 7527                <1> 	jne .notab
  3657 00002CDE B1A0                <1> 	mov cl, 160
  3658 00002CE0 28D1                <1> 	sub cl, dl
  3659 00002CE2 C0E905              <1> 	shr cl, 5
  3660 00002CE5 C0E105              <1> 	shl cl, 5
  3661 00002CE8 80F900              <1> 	cmp cl, 0
  3662 00002CEB 750F                <1> 	jne .nonewline
  3663 00002CED BE[684F0000]        <1> 	mov esi, line
  3664 00002CF2 E823EEFFFF          <1> 	call print
  3665 00002CF7 E909000000          <1> 	jmp .notab
  3666                              <1> .nonewline:
  3667 00002CFC 80C20F              <1> 	add dl, 15
  3668 00002CFF C0EA04              <1> 	shr dl, 4
  3669 00002D02 C0E204              <1> 	shl dl, 4
  3670                              <1> .notab:
  3671 00002D05 BE[892C0000]        <1> 	mov esi, decnumber
  3672 00002D0A 4E                  <1> 	dec esi
  3673                              <1> .sifind:
  3674 00002D0B 46                  <1> 	inc esi
  3675 00002D0C 803E30              <1> 	cmp byte [esi], '0'
  3676 00002D0F 74FA                <1> 	je .sifind
  3677 00002D11 E804EEFFFF          <1> 	call print
  3678 00002D16 803D[BA2B0000]02    <1> 	cmp byte [firsthexshown], 2
  3679 00002D1D 750A                <1> 	jne .shown
  3680 00002D1F BE[684F0000]        <1> 	mov esi, line
  3681 00002D24 E8F1EDFFFF          <1> 	call print
  3682                              <1> .shown:
  3683 00002D29 C605[BA2B0000]00    <1> 	mov byte [firsthexshown], 0
  3684 00002D30 61                  <1> 	popa
  3685 00002D31 C3                  <1> 	ret
  3686                              <1> 	
  3687                              <1> cnvrthextxt:
  3688 00002D32 31C9                <1> 	xor ecx, ecx
  3689 00002D34 31C0                <1> 	xor eax, eax
  3690 00002D36 31D2                <1> 	xor edx, edx
  3691 00002D38 31DB                <1> 	xor ebx, ebx
  3692 00002D3A 4E                  <1> 	dec esi
  3693                              <1> .end:
  3694 00002D3B 46                  <1> 	inc esi
  3695 00002D3C 8A06                <1> 	mov al, [esi]
  3696 00002D3E 3C00                <1> 	cmp al, 0
  3697 00002D40 75F9                <1> 	jne .end
  3698                              <1> .loop:
  3699 00002D42 4E                  <1> 	dec esi
  3700 00002D43 8A06                <1> 	mov al, [esi]
  3701 00002D45 3C41                <1> 	cmp al, "A"
  3702 00002D47 7328                <1> 	jae .char
  3703 00002D49 2C30                <1> 	sub al, 48
  3704 00002D4B 3C10                <1> 	cmp al, 16
  3705 00002D4D 7721                <1> 	ja .done
  3706                              <1> .donechar:
  3707 00002D4F 81FA00000000        <1> 	cmp edx, 0
  3708 00002D55 740E                <1> 	je .noshl
  3709 00002D57 89D3                <1> 	mov ebx, edx
  3710                              <1> .shl:
  3711 00002D59 C1E004              <1> 	shl eax, 4
  3712 00002D5C 4B                  <1> 	dec ebx
  3713 00002D5D 81FB00000000        <1> 	cmp ebx, 0
  3714 00002D63 75F4                <1> 	jne .shl
  3715                              <1> .noshl:
  3716 00002D65 42                  <1> 	inc edx
  3717 00002D66 01C1                <1> 	add ecx, eax
  3718 00002D68 81FA08000000        <1> 	cmp edx, 8
  3719 00002D6E 72D2                <1> 	jb .loop
  3720                              <1> .done:
  3721 00002D70 C3                  <1> 	ret
  3722                              <1> .char:
  3723 00002D71 3C46                <1> 	cmp al, "F"
  3724 00002D73 77FB                <1> 	ja .done
  3725 00002D75 2C41                <1> 	sub al, "A"
  3726 00002D77 040A                <1> 	add al, 0xA
  3727 00002D79 EBD4                <1> 	jmp .donechar
  3728                              <1> 	
  3729                              <1> 	
  3730                              <1> cnvrttxt: 
  3731 00002D7B 31C9                <1> 	xor ecx, ecx
  3732 00002D7D 31C0                <1> 	xor eax, eax
  3733 00002D7F 31D2                <1> 	xor edx, edx
  3734 00002D81 31DB                <1> 	xor ebx, ebx
  3735 00002D83 4E                  <1> 	dec esi
  3736                              <1> .lp:
  3737 00002D84 46                  <1> 	inc esi
  3738 00002D85 8A06                <1> 	mov al, [esi]
  3739 00002D87 3C00                <1> 	cmp al, 0
  3740 00002D89 75F9                <1> 	jne .lp
  3741 00002D8B 4E                  <1> 	dec esi
  3742 00002D8C 8A06                <1> 	mov al, [esi]
  3743 00002D8E 3C2E                <1> 	cmp al, '.'
  3744 00002D90 7503                <1> 	jne .dot
  3745 00002D92 46                  <1> 	inc esi
  3746 00002D93 EBEF                <1> 	jmp .lp
  3747                              <1> .dot:
  3748 00002D95 3C20                <1> 	cmp al, ' '
  3749 00002D97 7404                <1> 	je .zero
  3750 00002D99 3C30                <1> 	cmp al, '0'
  3751 00002D9B 7504                <1> 	jne .txtlp
  3752                              <1> .zero: 
  3753 00002D9D 39FE                <1> 		cmp esi, edi
  3754 00002D9F 7458                <1> 		je .done
  3755                              <1> .txtlp:
  3756 00002DA1 31C0                <1> 	xor eax, eax
  3757 00002DA3 8A06                <1> 	mov al, [esi]
  3758 00002DA5 3C3D                <1> 	cmp al, '='
  3759 00002DA7 7450                <1> 	je .done
  3760 00002DA9 3C30                <1> 	cmp al, 48
  3761 00002DAB 724C                <1> 	jb .done
  3762 00002DAD 3C23                <1> 	cmp al, '#'
  3763 00002DAF 7448                <1> 	je .done
  3764 00002DB1 39FE                <1> 	cmp esi, edi
  3765 00002DB3 7244                <1> 	jb .done
  3766 00002DB5 81F900000000        <1> 	cmp ecx, 0
  3767 00002DBB 7708                <1> 	ja .exp
  3768 00002DBD 2C30                <1> .noexp:	sub al, 48
  3769 00002DBF 01C2                <1> 	add edx, eax
  3770 00002DC1 4E                  <1> 	dec esi
  3771 00002DC2 41                  <1> 	inc ecx
  3772 00002DC3 EBDC                <1> 	jmp .txtlp
  3773 00002DC5 81F900000000        <1> .exp:	cmp ecx, 0
  3774 00002DCB 74F0                <1> 	je .noexp
  3775 00002DCD 2C30                <1> 	sub al, 48
  3776 00002DCF 51                  <1> 	push ecx
  3777 00002DD0 89C3                <1> .expmul:	mov ebx, eax
  3778 00002DD2 01D8                <1> 	add eax, ebx
  3779 00002DD4 01D8                <1> 	add eax, ebx
  3780 00002DD6 01D8                <1> 	add eax, ebx
  3781 00002DD8 01D8                <1> 	add eax, ebx
  3782 00002DDA 01D8                <1> 	add eax, ebx
  3783 00002DDC 01D8                <1> 	add eax, ebx
  3784 00002DDE 01D8                <1> 	add eax, ebx
  3785 00002DE0 01D8                <1> 	add eax, ebx
  3786 00002DE2 01D8                <1> 	add eax, ebx
  3787 00002DE4 81E901000000        <1> 	sub ecx, 1
  3788 00002DEA 81F900000000        <1> 	cmp ecx, 0
  3789 00002DF0 77DE                <1> 	ja .expmul
  3790 00002DF2 01C2                <1> 	add edx, eax
  3791 00002DF4 59                  <1> 	pop ecx
  3792 00002DF5 4E                  <1> 	dec esi
  3793 00002DF6 41                  <1> 	inc ecx
  3794 00002DF7 EBA8                <1> 	jmp .txtlp
  3795 00002DF9 89D1                <1> .done: mov ecx, edx
  3796 00002DFB C3                  <1> 	ret
  3797                                      %include "source/programs.asm"
  3798 00002DFC FF2C                <1> filetypes db 255,44
  3799                              <1> progstart:		;programs start here
  3800                              <1> indexfiles:
  3801 00002DFE BE[FE2D0000]        <1> 	mov esi, progstart
  3802 00002E03 BB[5E730000]        <1> 	mov ebx, fileindex
  3803 00002E08 BF[FE2D0000]        <1> 	mov edi, progstart
  3804 00002E0D 81EF02000000        <1> 	sub edi, 2
  3805                              <1> indexloop:
  3806 00002E13 668B0E              <1> 	mov cx, [esi]
  3807                              <1> 	indexloop2:
  3808 00002E16 663B0F              <1> 		cmp cx, [edi]
  3809 00002E19 7424                <1> 		je indexloop2done
  3810 00002E1B 81EF02000000        <1> 		sub edi, 2
  3811 00002E21 81FF[FC2D0000]      <1> 		cmp edi, filetypes
  3812 00002E27 73ED                <1> 		jae indexloop2
  3813 00002E29 BF[FE2D0000]        <1> 	mov edi, progstart
  3814 00002E2E 81EF02000000        <1> 	sub edi, 2
  3815 00002E34 46                  <1> 	inc esi
  3816 00002E35 81FE[BB440000]      <1> 	cmp esi, batchprogend
  3817 00002E3B 734E                <1> 	jae indexloopdone
  3818 00002E3D EBD4                <1> 	jmp indexloop
  3819                              <1> indexloop2done:
  3820 00002E3F 66890B              <1> 	mov [ebx], cx
  3821 00002E42 81C302000000        <1> 	add ebx, 2
  3822 00002E48 81C602000000        <1> 	add esi, 2
  3823                              <1> 	nameindex:
  3824 00002E4E 8A0E                <1> 		mov cl, [esi]
  3825 00002E50 80F900              <1> 		cmp cl, 0
  3826 00002E53 7406                <1> 		je nameindexdone
  3827 00002E55 880B                <1> 		mov [ebx], cl
  3828 00002E57 46                  <1> 		inc esi
  3829 00002E58 43                  <1> 		inc ebx
  3830 00002E59 EBF3                <1> 		jmp nameindex
  3831                              <1> 	nameindexdone:
  3832 00002E5B 43                  <1> 		inc ebx
  3833 00002E5C 66C7030000          <1> 		mov word [ebx], 0
  3834 00002E61 81C302000000        <1> 		add ebx, 2
  3835 00002E67 46                  <1> 		inc esi
  3836 00002E68 8933                <1> 		mov [ebx], esi
  3837 00002E6A 81C304000000        <1> 		add ebx, 4
  3838 00002E70 66C7030000          <1> 		mov word [ebx], 0
  3839 00002E75 81C302000000        <1> 		add ebx, 2
  3840 00002E7B 81FB[5E770000]      <1> 		cmp ebx, fileindexend
  3841 00002E81 7308                <1> 		jae indexloopdone
  3842 00002E83 81C601000000        <1> 		add esi, 1
  3843 00002E89 EB88                <1> 		jmp indexloop
  3844 00002E8B C605[932E0000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3845 00002E92 C3                  <1> 		ret
  3846                              <1> 
  3847 00002E93 00                  <1> indexdone db 0
  3848                              <1> %include 'source/programs/_comment.asm' ;#
  3849 00002E94 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3850 00002E98 C3                  <2> 	ret 
  3851                              <1> %include 'source/programs/_math.asm' ;!
  3852 00002E99 FF2C2100            <2> db 255,44,"!",0
  3853                              <2> 	num:	
  3854 00002E9D E8C5FBFFFF          <2> 		call clearbuffer
  3855 00002EA2 C605[23310000]00    <2> 		mov byte [decimal], 0
  3856 00002EA9 C605[24310000]00    <2> 		mov byte [decimal2], 0
  3857 00002EB0 8B35[A8290000]      <2> 		mov esi, [currentcommandloc]
  3858 00002EB6 31C0                <2> 		xor eax, eax
  3859 00002EB8 31C9                <2> 		xor ecx, ecx
  3860 00002EBA 31DB                <2> 		xor ebx, ebx
  3861 00002EBC 8A06                <2> 	num2:	mov al, [esi]
  3862 00002EBE 3C2B                <2> 		cmp al, '+'
  3863 00002EC0 741B                <2> 		je operatorfound
  3864 00002EC2 3C2D                <2> 		cmp al, '-'
  3865 00002EC4 7417                <2> 		je operatorfound
  3866 00002EC6 3C2A                <2> 		cmp al, '*'
  3867 00002EC8 7413                <2> 		je operatorfound
  3868 00002ECA 3C2F                <2> 		cmp al, '/'
  3869 00002ECC 740F                <2> 		je operatorfound
  3870 00002ECE 3C5E                <2> 		cmp al, '^'
  3871 00002ED0 740B                <2> 		je operatorfound
  3872 00002ED2 46                  <2> 		inc esi
  3873 00002ED3 3C00                <2> 		cmp al, 0
  3874 00002ED5 0F8422F8FFFF        <2> 		je near nwcmd
  3875 00002EDB EBDF                <2> 		jmp num2
  3876 00002EDD 50                  <2> 	operatorfound: push eax
  3877 00002EDE 30E4                <2> 		xor ah, ah
  3878 00002EE0 8826                <2> 		mov [esi], ah
  3879 00002EE2 89F7                <2> 		mov edi, esi
  3880 00002EE4 46                  <2> 		inc esi
  3881 00002EE5 8A06                <2> 		mov al, [esi]
  3882 00002EE7 3C25                <2> 		cmp al, '%'
  3883 00002EE9 0F8462000000        <2> 		je near resultnum1
  3884                              <2> 	varnum2: 
  3885 00002EEF 57                  <2> 		push edi
  3886 00002EF0 E8A4000000          <2> 		call checkdecimal
  3887 00002EF5 5F                  <2> 		pop edi
  3888 00002EF6 E880FEFFFF          <2> 		call cnvrttxt
  3889                              <2> 	vrnm2:
  3890 00002EFB 89CB                <2> 		mov ebx, ecx
  3891 00002EFD 53                  <2> 		push ebx
  3892 00002EFE E864FBFFFF          <2> 		call clearbuffer
  3893 00002F03 8B35[A8290000]      <2> 		mov esi, [currentcommandloc]
  3894 00002F09 89F7                <2> 		mov edi, esi
  3895 00002F0B 46                  <2> 		inc esi
  3896 00002F0C 8A06                <2> 		mov al, [esi]
  3897 00002F0E 3C25                <2> 		cmp al, '%'
  3898 00002F10 0F844F000000        <2> 		je near resultnum2
  3899                              <2> 	varnum4: 
  3900 00002F16 57                  <2> 		push edi
  3901 00002F17 E869000000          <2> 		call checkdecimal2
  3902 00002F1C 5F                  <2> 		pop edi
  3903 00002F1D E859FEFFFF          <2> 		call cnvrttxt
  3904                              <2> 	vrnm4:
  3905 00002F22 5B                  <2> 		pop ebx
  3906 00002F23 58                  <2> 		pop eax
  3907 00002F24 3C2B                <2> 		cmp al, '+'
  3908 00002F26 0F849B000000        <2> 		je near plusnum
  3909 00002F2C 3C2D                <2> 		cmp al, '-'
  3910 00002F2E 0F849F000000        <2> 		je near subnum
  3911 00002F34 3C2A                <2> 		cmp al, '*'
  3912 00002F36 0F84A3000000        <2> 		je near mulnum
  3913 00002F3C 3C2F                <2> 		cmp al, '/'
  3914 00002F3E 0F84B1000000        <2> 		je near divnum
  3915 00002F44 3C5E                <2> 		cmp al, '^'
  3916 00002F46 0F84CE000000        <2> 		je near expnum
  3917 00002F4C E9ACF7FFFF          <2> 		jmp nwcmd
  3918                              <2> 	resultnum1:
  3919 00002F51 8A0D[25310000]      <2> 		mov cl, [decimalresult]
  3920 00002F57 880D[23310000]      <2> 		mov [decimal], cl
  3921 00002F5D 8B0D[26310000]      <2> 		mov ecx, [result]
  3922 00002F63 EB96                <2> 		jmp vrnm2
  3923                              <2> 	resultnum2:
  3924 00002F65 8A0D[23310000]      <2> 		mov cl, [decimal]
  3925 00002F6B 880D[24310000]      <2> 		mov [decimal2], cl
  3926 00002F71 8A0D[25310000]      <2> 		mov cl, [decimalresult]
  3927 00002F77 880D[23310000]      <2> 		mov [decimal], cl
  3928 00002F7D 8B0D[26310000]      <2> 		mov ecx, [result]
  3929 00002F83 EB9D                <2> 		jmp vrnm4
  3930                              <2> 	checkdecimal2:
  3931 00002F85 8A25[23310000]      <2> 		mov ah, [decimal]
  3932 00002F8B 8825[24310000]      <2> 		mov [decimal2], ah
  3933 00002F91 30E4                <2> 		xor ah, ah
  3934 00002F93 8825[23310000]      <2> 		mov [decimal], ah
  3935                              <2> 	checkdecimal:
  3936 00002F99 89F7                <2> 		mov edi, esi
  3937                              <2> 	chkdec1:
  3938 00002F9B 8A07                <2> 		mov al, [edi]
  3939 00002F9D 3C2E                <2> 		cmp al, '.'
  3940 00002F9F 0F840B000000        <2> 		je near fnddec
  3941 00002FA5 3C00                <2> 		cmp al, 0
  3942 00002FA7 0F8419000000        <2> 		je near nodecimal
  3943 00002FAD 47                  <2> 		inc edi
  3944 00002FAE EBEB                <2> 		jmp chkdec1
  3945                              <2> 	fnddec:
  3946 00002FB0 8A4701              <2> 		mov al, [edi + 1]
  3947 00002FB3 8807                <2> 		mov [edi], al
  3948 00002FB5 3C00                <2> 		cmp al, 0
  3949 00002FB7 0F8409000000        <2> 		je near nodecimal
  3950 00002FBD FE05[23310000]      <2> 		inc byte [decimal]
  3951 00002FC3 47                  <2> 		inc edi
  3952 00002FC4 EBEA                <2> 		jmp fnddec
  3953                              <2> 	nodecimal:
  3954 00002FC6 C3                  <2> 		ret
  3955                              <2> 	plusnum:
  3956 00002FC7 E815010000          <2> 		call decaddfix
  3957 00002FCC 01D9                <2> 		add ecx, ebx
  3958 00002FCE E98A000000          <2> 		jmp retnum
  3959                              <2> 	subnum:
  3960 00002FD3 E809010000          <2> 		call decaddfix
  3961 00002FD8 29D9                <2> 		sub ecx, ebx
  3962 00002FDA E97E000000          <2> 		jmp retnum
  3963                              <2> 	mulnum:
  3964 00002FDF A0[24310000]        <2> 		mov al, [decimal2]
  3965 00002FE4 0005[23310000]      <2> 		add [decimal], al
  3966 00002FEA 89C8                <2> 		mov eax, ecx
  3967 00002FEC F7E3                <2> 		mul ebx
  3968 00002FEE 89C1                <2> 		mov ecx, eax
  3969 00002FF0 E968000000          <2> 		jmp retnum
  3970                              <2> 	divnum:
  3971 00002FF5 E8E7000000          <2> 		call decaddfix
  3972 00002FFA 30C0                <2> 		xor al, al
  3973 00002FFC A2[23310000]        <2> 		mov [decimal], al
  3974 00003001 31D2                <2> 		xor edx, edx
  3975 00003003 89C8                <2> 		mov eax, ecx
  3976 00003005 81FB00000000        <2> 		cmp ebx, 0
  3977 0000300B 0F844C000000        <2> 		je near retnum
  3978 00003011 F7F3                <2> 		div ebx
  3979 00003013 89C1                <2> 		mov ecx, eax
  3980 00003015 E943000000          <2> 		jmp retnum
  3981                              <2> 	expnum:
  3982 0000301A 8A15[23310000]      <2> 		mov dl, [decimal]
  3983 00003020 8815[24310000]      <2> 		mov [decimal2], dl
  3984 00003026 31D2                <2> 		xor edx, edx
  3985 00003028 89C8                <2> 		mov eax, ecx
  3986 0000302A 89D9                <2> 		mov ecx, ebx
  3987 0000302C 89C3                <2> 		mov ebx, eax
  3988 0000302E 81F900000000        <2> 		cmp ecx, 0
  3989 00003034 7422                <2> 		je noexpnum
  3990 00003036 49                  <2> 		dec ecx
  3991 00003037 81F900000000        <2> 		cmp ecx, 0
  3992 0000303D 7412                <2> 		je noexpnumlp
  3993 0000303F F7E3                <2> 	expnumlp: mul ebx
  3994 00003041 8A15[24310000]      <2> 		mov dl, [decimal2]
  3995 00003047 0015[23310000]      <2> 		add [decimal], dl
  3996 0000304D 31D2                <2> 		xor edx, edx
  3997 0000304F E2EE                <2> 		loop expnumlp
  3998                              <2> 	noexpnumlp:
  3999 00003051 89C1                <2> 		mov ecx, eax
  4000 00003053 E905000000          <2> 		jmp retnum
  4001                              <2> 	noexpnum:
  4002 00003058 B901000000          <2> 		mov ecx, 1
  4003                              <2> 	retnum: 
  4004 0000305D BE[F2910000]        <2> 		mov esi, numbuf
  4005 00003062 890D[26310000]      <2> 		mov [result], ecx
  4006 00003068 E80FFAFFFF          <2> 		call convert
  4007 0000306D BE[F2910000]        <2> 		mov esi, numbuf
  4008 00003072 8A25[23310000]      <2> 		mov ah, [decimal]
  4009 00003078 8825[25310000]      <2> 		mov [decimalresult], ah
  4010 0000307E 80FC00              <2> 		cmp ah, 0
  4011 00003081 0F8425000000        <2> 		je near noputdecimal
  4012                              <2> 	putdecimal:
  4013 00003087 4E                  <2> 		dec esi
  4014 00003088 FECC                <2> 		dec ah
  4015 0000308A 80FC00              <2> 		cmp ah, 0
  4016 0000308D 0F87F4FFFFFF        <2> 		ja near putdecimal
  4017 00003093 4E                  <2> 		dec esi
  4018 00003094 8A06                <2> 		mov al, [esi]
  4019 00003096 C6062E              <2> 		mov byte [esi], '.'
  4020                              <2> 	decputloop:
  4021 00003099 4E                  <2> 		dec esi
  4022 0000309A 8A26                <2> 		mov ah, [esi]
  4023 0000309C 8806                <2> 		mov [esi], al
  4024 0000309E 88E0                <2> 		mov al, ah
  4025 000030A0 81FE[DE910000]      <2> 		cmp esi, buf2
  4026 000030A6 0F87EDFFFFFF        <2> 		ja near decputloop
  4027                              <2> 	noputdecimal:
  4028 000030AC BE[DE910000]        <2> 		mov esi, buf2
  4029 000030B1 E809000000          <2> 		call chkadd
  4030 000030B6 E942F6FFFF          <2> 		jmp nwcmd
  4031 000030BB 00000000            <2> edxnumbuf dw 0,0
  4032 000030BF 8A06                <2> 	chkadd: mov al, [esi]
  4033 000030C1 3C30                <2> 		cmp al, '0'
  4034 000030C3 750C                <2> 		jne dnadd
  4035 000030C5 46                  <2> 		inc esi
  4036 000030C6 81FE[F2910000]      <2> 		cmp esi, numbuf
  4037 000030CC 7402                <2> 		je dnaddm1
  4038 000030CE EBEF                <2> 		jmp chkadd
  4039 000030D0 4E                  <2> 	dnaddm1: dec esi
  4040 000030D1 E844EAFFFF          <2> 	dnadd:	call print
  4041 000030D6 BE[684F0000]        <2> 		mov esi, line
  4042 000030DB E83AEAFFFF          <2> 		call print
  4043 000030E0 C3                  <2> 		ret
  4044                              <2> 		
  4045                              <2> 	decaddfix:
  4046 000030E1 A0[24310000]        <2> 		mov al, [decimal2]
  4047 000030E6 8A25[23310000]      <2> 		mov ah, [decimal]
  4048 000030EC 38E0                <2> 		cmp al, ah
  4049 000030EE 7432                <2> 		je gooddecadd
  4050 000030F0 38E0                <2> 		cmp al, ah
  4051 000030F2 721A                <2> 		jb lowdecadd
  4052                              <2> 	highdecadd:
  4053 000030F4 FEC4                <2> 		inc ah
  4054 000030F6 89CA                <2> 		mov edx, ecx
  4055 000030F8 C1E103              <2> 		shl ecx, 3
  4056 000030FB 01D1                <2> 		add ecx, edx
  4057 000030FD 01D1                <2> 		add ecx, edx
  4058 000030FF 38E0                <2> 		cmp al, ah
  4059 00003101 77F1                <2> 		ja highdecadd
  4060 00003103 8825[23310000]      <2> 		mov [decimal], ah
  4061 00003109 E914000000          <2> 		jmp gooddecadd
  4062                              <2> 	lowdecadd:
  4063 0000310E FEC0                <2> 		inc al
  4064 00003110 89DA                <2> 		mov edx, ebx
  4065 00003112 C1E303              <2> 		shl ebx, 3
  4066 00003115 01D3                <2> 		add ebx, edx
  4067 00003117 01D3                <2> 		add ebx, edx
  4068 00003119 38E0                <2> 		cmp al, ah
  4069 0000311B 72F1                <2> 		jb lowdecadd
  4070 0000311D A2[23310000]        <2> 		mov [decimal], al
  4071                              <2> 	gooddecadd:
  4072 00003122 C3                  <2> 		ret
  4073                              <2> 		
  4074 00003123 00                  <2> decimal db 0
  4075 00003124 00                  <2> decimal2 db 0
  4076 00003125 00                  <2> decimalresult db 0
  4077 00003126 00000000            <2> result dd 0
  4078                              <1> %include 'source/programs/_variables.asm' ;% and $
  4079 0000312A FF2C2500            <2> db 255,44,"%",0
  4080                              <2> 	ans:
  4081 0000312E BE[DE910000]        <2> 		mov esi, buf2
  4082 00003133 E887FFFFFF          <2> 		call chkadd
  4083 00003138 C3                  <2> 		ret
  4084                              <2> 		
  4085 00003139 FF2C2400            <2> db 255,44,"$",0
  4086 0000313D 8B35[A8290000]      <2> var: mov esi, [currentcommandloc]
  4087 00003143 BB[DE790000]        <2> 	mov ebx, variables
  4088 00003148 8A06                <2> lkeq:	mov al, [esi]
  4089 0000314A 3C3D                <2> 	cmp al, '='
  4090 0000314C 741B                <2> 	je eqfnd	;is there an '=' sign?
  4091 0000314E 3C00                <2> 	cmp al, 0
  4092 00003150 7403                <2> 	je echovars
  4093 00003152 46                  <2> 	inc esi
  4094 00003153 EBF3                <2> 	jmp lkeq
  4095 00003155 BE[DE790000]        <2> echovars: mov esi, variables
  4096 0000315A BB[DE890000]        <2> 	mov ebx, varend
  4097 0000315F B105                <2> 	mov cl, 5
  4098 00003161 B504                <2> 	mov ch, 4
  4099 00003163 E89EF8FFFF          <2> 	call array
  4100 00003168 C3                  <2> 	ret
  4101 00003169 46                  <2> eqfnd:	inc esi
  4102 0000316A 8A06                <2> 	mov al, [esi]
  4103 0000316C 3C00                <2> 	cmp al, 0
  4104 0000316E 7410                <2> 	je readvar
  4105 00003170 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  4106 00003176 BB[DE790000]        <2> 	mov ebx, variables
  4107 0000317B E919000000          <2> 	jmp seek
  4108                              <2> readvar:
  4109 00003180 B00A                <2> 	mov al, 10
  4110 00003182 66BB0700            <2> 	mov bx, 7
  4111 00003186 C605[651F0000]00    <2> 	mov byte [commandedit], 0
  4112 0000318D BF[DE910000]        <2> 	mov edi, buftxtend
  4113 00003192 E86DEAFFFF          <2> 	call rdprint
  4114 00003197 EBA4                <2> 	jmp var
  4115 00003199 668B03              <2> seek:	mov ax, [ebx]
  4116 0000319C B105                <2> 	mov cl, 5
  4117 0000319E B504                <2> 	mov ch, 4
  4118 000031A0 663D0000            <2> 	cmp ax, 0
  4119 000031A4 0F845B000000        <2> 	je near save
  4120 000031AA 6639C8              <2> 	cmp ax, cx
  4121 000031AD 7403                <2> 	je skfnd
  4122 000031AF 43                  <2> 	inc ebx
  4123 000031B0 EBE7                <2> 	jmp seek
  4124 000031B2 8B35[A8290000]      <2> skfnd:	mov esi, [currentcommandloc]
  4125 000031B8 46                  <2> 	inc esi
  4126 000031B9 81C302000000        <2> 	add ebx, 2
  4127 000031BF 89DF                <2> 	mov edi, ebx
  4128 000031C1 B13D                <2> 	mov cl, '='
  4129 000031C3 E81FF8FFFF          <2> 	call cndtest
  4130 000031C8 3C01                <2> 	cmp al, 1	
  4131 000031CA 7418                <2> 	je varfnd
  4132 000031CC 89FB                <2> 	mov ebx, edi
  4133 000031CE 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  4134 000031D4 668B03              <2> 	mov ax, [ebx]
  4135 000031D7 663D0000            <2> 	cmp ax, 0
  4136 000031DB 0F8424000000        <2> 	je near save
  4137 000031E1 43                  <2> 	inc ebx
  4138 000031E2 EBB5                <2> 	jmp seek
  4139 000031E4 8A03                <2> varfnd:	mov al, [ebx]
  4140 000031E6 3C04                <2> 	cmp al, 4
  4141 000031E8 7404                <2> 	je save2
  4142 000031EA 4B                  <2> 	dec ebx
  4143 000031EB 4E                  <2> 	dec esi
  4144 000031EC EBF6                <2> 	jmp varfnd
  4145 000031EE 4B                  <2> save2:	dec ebx
  4146 000031EF 4E                  <2> 	dec esi
  4147 000031F0 8A03                <2> 	mov al, [ebx]
  4148 000031F2 3C05                <2> 	cmp al, 5
  4149 000031F4 7402                <2> 	je remove
  4150 000031F6 EBEC                <2> 	jmp varfnd
  4151 000031F8 8A03                <2> remove: mov al, [ebx]
  4152 000031FA 3C00                <2> 	cmp al, 0
  4153 000031FC 749B                <2> 	je seek
  4154 000031FE 30C0                <2> 	xor al, al
  4155 00003200 8803                <2> 	mov [ebx], al
  4156 00003202 43                  <2> 	inc ebx
  4157 00003203 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4158 00003205 8B35[A8290000]      <2> save:	mov esi, [currentcommandloc]
  4159 0000320B 43                  <2> 	inc ebx
  4160 0000320C B005                <2> 	mov al, 5
  4161 0000320E B404                <2> 	mov ah, 4
  4162 00003210 668903              <2> 	mov [ebx], ax
  4163 00003213 43                  <2> 	inc ebx
  4164 00003214 43                  <2> svhere:	inc ebx
  4165 00003215 46                  <2> 	inc esi
  4166 00003216 8A06                <2> 	mov al, [esi]
  4167 00003218 3C00                <2> 	cmp al, 0
  4168 0000321A 0F844A000000        <2> 	je near svdone
  4169 00003220 3C25                <2> 	cmp al, '%'
  4170 00003222 7404                <2> 	je ans2
  4171 00003224 8803                <2> 	mov [ebx], al	
  4172 00003226 EBEC                <2> 	jmp svhere
  4173 00003228 56                  <2> ans2:	push esi
  4174 00003229 BE[DE910000]        <2> 	mov esi, buf2
  4175 0000322E E823000000          <2> 	call ansfnd
  4176 00003233 E803000000          <2> 	call anscp
  4177 00003238 5E                  <2> 	pop esi
  4178 00003239 EBD9                <2> 	jmp svhere
  4179 0000323B 8A06                <2> anscp:	mov al, [esi]
  4180 0000323D 8803                <2> 	mov [ebx], al
  4181 0000323F 81FE[F2910000]      <2> 	cmp esi, numbuf
  4182 00003245 74CD                <2> 	je svhere
  4183 00003247 3C00                <2> 	cmp al, 0
  4184 00003249 74C9                <2> 	je svhere
  4185 0000324B 43                  <2> 	inc ebx
  4186 0000324C 46                  <2> 	inc esi
  4187 0000324D EBEC                <2> 	jmp anscp
  4188 0000324F 5E                  <2> ansnf:	pop esi
  4189 00003250 8A06                <2> 	mov al, [esi]
  4190 00003252 8803                <2> 	mov [ebx], al
  4191 00003254 EBBE                <2> 	jmp svhere
  4192 00003256 46                  <2> ansfnd:	inc esi
  4193 00003257 81FE[F1910000]      <2> 	cmp esi, numbuf - 1
  4194 0000325D 740A                <2> 	je fndans
  4195 0000325F 8A06                <2> 	mov al, [esi]
  4196 00003261 3C00                <2> 	cmp al, 0
  4197 00003263 74EA                <2> 	je ansnf
  4198 00003265 3C30                <2> 	cmp al, '0'
  4199 00003267 74ED                <2> 	je ansfnd
  4200                              <2> fndans:
  4201 00003269 C3                  <2> 	ret
  4202 0000326A 30C0                <2> svdone:	xor al, al
  4203 0000326C 8803                <2> 	mov [ebx], al
  4204 0000326E C3                  <2> 	ret
  4205                              <1> %include 'source/programs/_run.asm' ;./
  4206                              <2> 
  4207 0000326F 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4208 00003273 FF2C2E2F00          <2> 	db 255,44,"./",0
  4209                              <2> rundiskprog:
  4210 00003278 8B3D[A8290000]      <2> 	mov edi, [currentcommandloc]
  4211 0000327E 81C702000000        <2> 	add edi, 2
  4212 00003284 BE00004000          <2> 	mov esi, 0x400000
  4213 00003289 E8ED1A0000          <2> 	call loadfile
  4214 0000328E 81FA94010000        <2> 	cmp edx, 404
  4215 00003294 746A                <2> 	je noprogfound
  4216 00003296 BB00004000          <2> 	mov ebx, 0x400000
  4217 0000329B A1[6F320000]        <2> 	mov eax, [elfstart]
  4218 000032A0 3903                <2> 	cmp [ebx], eax
  4219 000032A2 0F8437000000        <2> 	je near runelf
  4220 000032A8 66813B4558          <2> 	cmp word [ebx], "EX"
  4221 000032AD 7577                <2> 	jne progbatchfound
  4222 000032AF 81C302000000        <2> 	add ebx, 2
  4223 000032B5 8B3D[A8290000]      <2> 	mov edi, [currentcommandloc]
  4224 000032BB 81C702000000        <2> 	add edi, 2
  4225                              <2> findspaceprog:
  4226 000032C1 8A07                <2> 	mov al, [edi]
  4227 000032C3 47                  <2> 	inc edi
  4228 000032C4 3C20                <2> 	cmp al, " "
  4229 000032C6 75F9                <2> 	jne findspaceprog
  4230                              <2> findnonspaceprog:
  4231 000032C8 8A07                <2> 	mov al, [edi]
  4232 000032CA 47                  <2> 	inc edi
  4233 000032CB 3C20                <2> 	cmp al, " "
  4234 000032CD 74F9                <2> 	je findnonspaceprog
  4235 000032CF 4F                  <2> 	dec edi
  4236 000032D0 8925[5E770000]      <2> 	mov [previousstack], esp
  4237 000032D6 FFD3                <2> 	call ebx
  4238 000032D8 8B25[5E770000]      <2> 	mov esp, [previousstack]
  4239 000032DE C3                  <2> 	ret
  4240                              <2> runelf:
  4241 000032DF 8B3D[A8290000]      <2> 	mov edi, [currentcommandloc]
  4242 000032E5 81C702000000        <2> 	add edi, 2
  4243 000032EB 81C380000000        <2> 	add ebx, 0x80
  4244 000032F1 8925[5E770000]      <2> 	mov [previousstack], esp
  4245 000032F7 FFD3                <2> 	call ebx
  4246 000032F9 8B25[5E770000]      <2> 	mov esp, [previousstack]
  4247 000032FF C3                  <2> 	ret
  4248                              <2> noprogfound:
  4249 00003300 BE[274F0000]        <2> 	mov esi, notfound1
  4250 00003305 E810E8FFFF          <2> 	call print
  4251 0000330A 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  4252 00003310 81C602000000        <2> 	add esi, 2
  4253 00003316 E8FFE7FFFF          <2> 	call print
  4254 0000331B BE[2F4F0000]        <2> 	mov esi, notfound2
  4255 00003320 E8F5E7FFFF          <2> 	call print
  4256 00003325 C3                  <2> 	ret
  4257                              <2> progbatchfound:
  4258 00003326 BF00004000          <2> 		mov edi, 0x400000
  4259 0000332B C605[D8790000]01    <2> 		mov byte [BATCHISON], 1
  4260                              <2> 	batchrunloop:
  4261 00003332 E8A3F3FFFF          <2> 		call buftxtclear
  4262 00003337 BE[DE8D0000]        <2> 		mov esi, buftxt
  4263 0000333C 8935[A8290000]      <2> 		mov [currentcommandloc], esi
  4264                              <2> 	batchrunloop2:
  4265 00003342 B10A                <2> 		mov cl, 10
  4266 00003344 B50D                <2> 		mov ch, 13
  4267 00003346 380F                <2> 		cmp [edi], cl
  4268 00003348 0F8419000000        <2> 		je near nxtbatchrunline
  4269 0000334E 382F                <2> 		cmp [edi], ch
  4270 00003350 0F8411000000        <2> 		je near nxtbatchrunline
  4271 00003356 803F00              <2> 		cmp byte [edi], 0
  4272 00003359 0F8408000000        <2> 		je near nxtbatchrunline
  4273 0000335F 8A07                <2> 		mov al, [edi]
  4274 00003361 8806                <2> 		mov [esi], al
  4275 00003363 46                  <2> 		inc esi
  4276 00003364 47                  <2> 		inc edi
  4277 00003365 EBDB                <2> 		jmp batchrunloop2
  4278                              <2> 	nxtbatchrunline:
  4279 00003367 47                  <2> 		inc edi
  4280 00003368 380F                <2> 		cmp [edi], cl
  4281 0000336A 74FB                <2> 		je nxtbatchrunline
  4282 0000336C 382F                <2> 		cmp [edi], ch
  4283 0000336E 74F7                <2> 		je nxtbatchrunline
  4284 00003370 893D[CE330000]      <2> 		mov [batchedi], edi
  4285 00003376 893D[D4790000]      <2> 		mov [BATCHPOS], edi
  4286 0000337C C60600              <2> 		mov byte [esi], 0
  4287 0000337F BE[DE8D0000]        <2> 		mov esi, buftxt
  4288 00003384 803E00              <2> 		cmp byte [esi], 0
  4289 00003387 0F8439000000        <2> 		je near nobatchfoundrun
  4290 0000338D 31DB                <2> 		xor ebx, ebx
  4291 0000338F 8A1D[6F790000]      <2> 		mov bl, [IFON]
  4292 00003395 80FB00              <2> 		cmp bl, 0
  4293 00003398 0F8534000000        <2> 		jne near iftestbatch
  4294                              <2> 	doneiftest:
  4295 0000339E 803D[A4340000]00    <2> 		cmp byte [runnextline], 0
  4296 000033A5 0F8405000000        <2> 		je near noruniftest
  4297 000033AB E822F5FFFF          <2> 		call run
  4298                              <2> 	noruniftest:
  4299 000033B0 C605[A4340000]01    <2> 		mov byte [runnextline], 1
  4300 000033B7 8B3D[CE330000]      <2> 		mov edi, [batchedi]
  4301 000033BD 803F00              <2> 		cmp byte [edi], 0
  4302 000033C0 0F856CFFFFFF        <2> 		jne near batchrunloop
  4303                              <2> 	nobatchfoundrun:
  4304 000033C6 C605[D8790000]00    <2> 		mov byte [BATCHISON], 0
  4305 000033CD C3                  <2> 		ret
  4306                              <2> 	
  4307 000033CE 00000000            <2> batchedi dd 0	
  4308                              <2> 	
  4309                              <2> 	iftestbatch:
  4310 000033D2 BE[70790000]        <2> 		mov esi, IFTRUE
  4311 000033D7 01DE                <2> 		add esi, ebx
  4312 000033D9 803E00              <2> 		cmp byte [esi], 0
  4313 000033DC 0F85BCFFFFFF        <2> 		jne near doneiftest
  4314 000033E2 881D[A5340000]      <2> 		mov [iffalsebuf], bl
  4315 000033E8 803D[D9790000]01    <2> 		cmp byte [LOOPON], 1
  4316 000033EF 0F8513000000        <2> 		jne near fifindbatch
  4317 000033F5 E938FFFFFF          <2> 		jmp batchrunloop
  4318                              <2> 	elsetestbatch:
  4319 000033FA C60601              <2> 		mov byte [esi], 1
  4320 000033FD 81C705000000        <2> 		add edi, 5
  4321 00003403 E92AFFFFFF          <2> 		jmp batchrunloop
  4322                              <2> 	fifindbatch:
  4323 00003408 66B96966            <2> 		mov cx, "if"
  4324 0000340C 66B86669            <2> 		mov ax, "fi"
  4325 00003410 663907              <2> 		cmp [edi], ax
  4326 00003413 0F8424000000        <2> 		je near fifoundbatch
  4327 00003419 66390F              <2> 		cmp [edi], cx
  4328 0000341C 0F8465000000        <2> 		je near iffoundbatch
  4329 00003422 803F00              <2> 		cmp byte [edi], 0
  4330 00003425 0F8412000000        <2> 		je near fifoundbatch
  4331 0000342B B8656C7365          <2> 		mov eax, "else"
  4332 00003430 3907                <2> 		cmp [edi], eax
  4333 00003432 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4334 00003438 E973FFFFFF          <2> 		jmp noruniftest
  4335                              <2> 	fifoundbatch:
  4336 0000343D 81C702000000        <2> 		add edi, 2
  4337 00003443 B00A                <2> 		mov al, 10
  4338 00003445 3807                <2> 		cmp [edi], al
  4339 00003447 0F840B000000        <2> 		je near goodfibatch
  4340 0000344D 803F00              <2> 		cmp byte [edi], 0
  4341 00003450 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4342 00003456 EBB0                <2> 		jmp fifindbatch
  4343                              <2> 	goodfibatch:
  4344 00003458 B001                <2> 		mov al, 1
  4345 0000345A 2805[6F790000]      <2> 		sub [IFON], al 
  4346 00003460 A0[6F790000]        <2> 		mov al, [IFON]
  4347 00003465 8A1D[A5340000]      <2> 		mov bl, [iffalsebuf]
  4348 0000346B 38D8                <2> 		cmp al, bl
  4349 0000346D 7799                <2> 		ja fifindbatch
  4350 0000346F 8B35[A8290000]      <2> 		mov esi, [currentcommandloc]
  4351 00003475 81EF02000000        <2> 		sub edi, 2
  4352 0000347B C605[A4340000]00    <2> 		mov byte [runnextline], 0
  4353 00003482 E9ABFEFFFF          <2> 		jmp batchrunloop
  4354                              <2> 	iffoundbatch:
  4355 00003487 B020                <2> 		mov al, ' '
  4356 00003489 81C702000000        <2> 		add edi, 2
  4357 0000348F 3807                <2> 		cmp [edi], al
  4358 00003491 0F8571FFFFFF        <2> 		jne near fifindbatch
  4359 00003497 B001                <2> 		mov al, 1
  4360 00003499 0005[6F790000]      <2> 		add [IFON], al
  4361 0000349F E964FFFFFF          <2> 		jmp fifindbatch
  4362                              <2> 		
  4363                              <2> 		
  4364 000034A4 01                  <2> runnextline db 1
  4365 000034A5 00                  <2> iffalsebuf db 0
  4366                              <2> 
  4367 000034A6 C3                  <2> notbatch: ret 
  4368                              <1> 
  4369                              <1> %ifdef rtl8139.included
  4370                              <1> 	%include 'source/programs/arp.asm'
  4371 000034A7 FF2C61727000        <2> db 255,44,"arp",0	;if only this worked
  4372 000034AD E828000000          <2> 	call arptest
  4373 000034B2 C3                  <2> 	ret
  4374                              <2> 	;ARP TESTING
  4375                              <2> arpinit:
  4376 000034B3 BE[6A350000]        <2> 	mov esi, arptable
  4377 000034B8 BF[43470000]        <2> 	mov edi, sysmac
  4378 000034BD BB[3F470000]        <2> 	mov ebx, sysip
  4379 000034C2 8B0F                <2> 	mov ecx, [edi]
  4380 000034C4 890E                <2> 	mov [esi], ecx
  4381 000034C6 668B4F04            <2> 	mov cx, [edi + 4]
  4382 000034CA 894E04              <2> 	mov [esi + 4], ecx
  4383 000034CD 8B0B                <2> 	mov ecx, [ebx]
  4384 000034CF 894E06              <2> 	mov [esi + 6], ecx
  4385 000034D2 C605[69350000]01    <2> 	mov byte [arpconfig], 1
  4386 000034D9 C3                  <2> 	ret
  4387                              <2> arptest:
  4388 000034DA 803D[69350000]01    <2> 	cmp byte [arpconfig], 1
  4389 000034E1 7405                <2> 	je arptest2
  4390 000034E3 E8CBFFFFFF          <2> 	call arpinit
  4391                              <2> arptest2:	;try to reach 192.168.0.1
  4392 000034E8 8B0D[43470000]      <2> 	mov ecx, [sysmac]
  4393 000034EE 668B1D[47470000]    <2> 	mov bx, [sysmac + 4]
  4394 000034F5 890D[2F350000]      <2> 	mov [sourcemac], ecx
  4395 000034FB 66891D[33350000]    <2> 	mov [sourcemac + 4],bx
  4396 00003502 890D[3F350000]      <2> 	mov [arpsenderinfo], ecx
  4397 00003508 66891D[43350000]    <2> 	mov [arpsenderinfo + 4], bx
  4398 0000350F BF[29350000]        <2> 	mov edi, frame
  4399 00003514 BE[69350000]        <2> 	mov esi, framend
  4400 00003519 E83F110000          <2> 	call rtl8139.sendpacket
  4401 0000351E BE[684F0000]        <2> 	mov esi, line
  4402 00003523 E8F2E5FFFF          <2> 	call print
  4403 00003528 C3                  <2> 	ret
  4404                              <2> 	
  4405                              <2> ;example frame
  4406                              <2> frame:
  4407 00003529 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4408 0000352F 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4409 00003535 0608                <2> ethertype:		dw 0x0806			;;arp
  4410                              <2> 	;;example packet
  4411 00003537 0100                <2> 	arppacket: 		dw 1				;;ethernet is 1
  4412 00003539 0008                <2> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  4413 0000353B 0604                <2> 					db 6,4				;;length of mac, length of ip
  4414 0000353D 0100                <2> 	arpoperation: 	dw 1				;;one for arp request
  4415 0000353F 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  4416 00003545 C0A80005            <2> 					db 192,168,0,5			;;ip
  4417 00003549 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  4418 0000354F C0A80001            <2> 					db 192,168,0,1			;;ip
  4419 00003553 00<rept>            <2> padding:		times (64-($-frame)) db 0
  4420                              <2> framend:
  4421                              <2> 
  4422 00003569 00                  <2> arpconfig db 0
  4423                              <2> arptable:	;;mac,ip
  4424 0000356A 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4425 00003573 00<rept>            <2>
  4426                              <2> arptableend:	
  4427                              <1> %endif
  4428                              <1> 
  4429                              <1> %include 'source/programs/batch.asm'
  4430 000035CE FF2C626174636800    <2> db 255,44,"batch",0
  4431                              <2> 	batchst: 
  4432 000035D6 8B3D[A8290000]      <2> 		mov edi, [currentcommandloc]
  4433 000035DC 81C706000000        <2> 		add edi, 6
  4434 000035E2 803F00              <2> 		cmp byte [edi], 0
  4435 000035E5 0F846D000000        <2> 		je near nonamefound
  4436 000035EB BE00004000          <2> 		mov esi, 0x400000
  4437 000035F0 E886170000          <2> 		call loadfile
  4438 000035F5 89D0                <2> 		mov eax, edx
  4439 000035F7 3D94010000          <2> 		cmp eax, 404
  4440 000035FC 7465                <2> 		je goodbatchname
  4441 000035FE BE[09360000]        <2> 		mov esi, badbatchname
  4442 00003603 E812E5FFFF          <2> 		call print
  4443 00003608 C3                  <2> 		ret
  4444 00003609 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4445 00003612 20616C726561647920- <2>
  4446 0000361B 657869737473210A00  <2>
  4447 00003624 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4448 0000362D 746F20747970652061- <2>
  4449 00003636 206E616D6520616674- <2>
  4450 0000363F 65722074686520636F- <2>
  4451 00003648 6D6D616E642E0A00    <2>
  4452 00003650 00000000            <2> 		esicache3 dd 0
  4453 00003654 00000000            <2> 		esicache2 dd 0
  4454                              <2> 	nonamefound:
  4455 00003658 BE[24360000]        <2> 		mov esi, namenotfoundbatch
  4456 0000365D E8B8E4FFFF          <2> 		call print
  4457 00003662 C3                  <2> 		ret
  4458                              <2> 	goodbatchname:
  4459 00003663 BE00004000          <2> 		mov esi, 0x400000
  4460                              <2> 	batchcreate:
  4461 00003668 8935[50360000]      <2> 		mov [esicache3], esi
  4462 0000366E BF00008000          <2> 		mov edi, 0x800000
  4463 00003673 B00A                <2> 		mov al, 10
  4464 00003675 B307                <2> 		mov bl, 7
  4465 00003677 B404                <2> 		mov ah, 4
  4466 00003679 CD30                <2> 		int 30h
  4467 0000367B 8935[54360000]      <2> 		mov [esicache2], esi
  4468 00003681 8A0E                <2> 		mov cl, [esi]
  4469 00003683 8B35[50360000]      <2> 		mov esi, [esicache3]
  4470 00003689 BB[BD360000]        <2> 		mov ebx, exitword
  4471 0000368E E854F3FFFF          <2> 		call cndtest
  4472 00003693 3C01                <2> 		cmp al, 1
  4473 00003695 7411                <2> 		je endbatchcreate
  4474 00003697 3C02                <2> 		cmp al, 2
  4475 00003699 740D                <2> 		je endbatchcreate
  4476 0000369B 8B35[54360000]      <2> 		mov esi, [esicache2]
  4477 000036A1 B00A                <2> 		mov al, 10
  4478 000036A3 8806                <2> 		mov [esi], al
  4479 000036A5 46                  <2> 		inc esi
  4480 000036A6 EBC0                <2> 		jmp batchcreate
  4481                              <2> 	endbatchcreate:
  4482 000036A8 8B35[50360000]      <2> 		mov esi, [esicache3]
  4483 000036AE 31C0                <2> 		xor eax, eax
  4484 000036B0 8806                <2> 		mov [esi], al
  4485 000036B2 BE00004000          <2> 		mov esi, 0x400000
  4486 000036B7 E85EE4FFFF          <2> 		call print
  4487 000036BC C3                  <2> 		ret
  4488                              <2> 	
  4489 000036BD 5C7800              <2> 	exitword db "\x",0
  4490 000036C0 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4491 000036C9 6F20657869742E0A00  <2>
  4492                              <1> %include 'source/programs/beep.asm'
  4493 000036D2 FF2C6265657000      <2> 	db 255,44,"beep",0
  4494 000036D9 B8[FE360000]        <2> 	mov eax, beepstart
  4495 000036DE A3[3B020000]        <2> 	mov [soundpos], eax
  4496 000036E3 B8[02370000]        <2> 	mov eax, beepend
  4497 000036E8 A3[3F020000]        <2> 	mov [soundendpos], eax
  4498 000036ED C605[38020000]01    <2> 	mov byte [soundon], 1
  4499                              <2> waitforsoundendbeep:
  4500 000036F4 A0[38020000]        <2> 	mov al, [soundon]
  4501 000036F9 3C00                <2> 	cmp al, 0
  4502 000036FB 75F7                <2> 	jne waitforsoundendbeep
  4503 000036FD C3                  <2> 	ret
  4504                              <2> 	
  4505                              <2> beepstart:
  4506 000036FE 3200D111            <2> 	dw 50, 4561
  4507                              <2> beepend:
  4508                              <1> %include 'source/programs/cd.asm'
  4509 00003702 FF2C636400          <2> db 255,44,"cd",0
  4510                              <2> cd:
  4511 00003707 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  4512 0000370D 81C603000000        <2> 	add esi, 3
  4513 00003713 8B3D[66770000]      <2> 	mov edi, [currentfolderloc]
  4514 00003719 893D[62770000]      <2> 	mov [lastfolderloc], edi
  4515 0000371F 81C7[6A770000]      <2> 	add edi, currentfolder
  4516                              <2> 	;cmp word [esi], ".."
  4517                              <2> 	;je .moveup
  4518                              <2> .movedown:
  4519 00003725 8A06                <2> 	mov al, [esi]
  4520 00003727 8807                <2> 	mov [edi], al
  4521 00003729 47                  <2> 	inc edi
  4522 0000372A 46                  <2> 	inc esi
  4523 0000372B 3C00                <2> 	cmp al, 0
  4524 0000372D 740A                <2> 	je .donecd
  4525 0000372F 81FF[6A790000]      <2> 	cmp edi, currentfolderend
  4526 00003735 72EE                <2> 	jb .movedown
  4527 00003737 30C0                <2> 	xor al, al
  4528                              <2> .donecd:
  4529 00003739 4F                  <2> 	dec edi
  4530 0000373A C6072F              <2> 	mov byte [edi], '/'
  4531 0000373D 47                  <2> 	inc edi
  4532 0000373E 81EF[6A770000]      <2> 	sub edi, currentfolder
  4533 00003744 893D[66770000]      <2> 	mov [currentfolderloc], edi
  4534 0000374A C3                  <2> 	ret
  4535                              <2> ;.moveup:
  4536                              <2> ;	ret
  4537                              <1> %include 'source/programs/charmap.asm'
  4538 0000374B FF2C636861727300    <2> db 255,44,"chars",0
  4539 00003753 66BB0700            <2> 	mov bx, 7
  4540 00003757 B020                <2> 	mov al, " "
  4541 00003759 E894E8FFFF          <2> 	call prcharq
  4542 0000375E E88FE8FFFF          <2> 	call prcharq
  4543 00003763 E88AE8FFFF          <2> 	call prcharq
  4544 00003768 E885E8FFFF          <2> 	call prcharq
  4545 0000376D B030                <2> 	mov al, "0"
  4546                              <2> charmapnumprnt:
  4547 0000376F E87EE8FFFF          <2> 	call prcharq
  4548 00003774 FEC0                <2> 	inc al
  4549 00003776 6650                <2> 	push ax
  4550 00003778 B020                <2> 	mov al, " "
  4551 0000377A E873E8FFFF          <2> 	call prcharq
  4552 0000377F 6658                <2> 	pop ax
  4553 00003781 3C39                <2> 	cmp al, "9"
  4554 00003783 76EA                <2> 	jbe charmapnumprnt
  4555 00003785 B041                <2> 	mov al, "A"
  4556                              <2> charmapnumprnt2:
  4557 00003787 E866E8FFFF          <2> 	call prcharq
  4558 0000378C FEC0                <2> 	inc al
  4559 0000378E 6650                <2> 	push ax
  4560 00003790 B020                <2> 	mov al, " "
  4561 00003792 E85BE8FFFF          <2> 	call prcharq
  4562 00003797 6658                <2> 	pop ax
  4563 00003799 3C47                <2> 	cmp al, "G"
  4564 0000379B 72EA                <2> 	jb charmapnumprnt2
  4565                              <2> 	
  4566 0000379D BE[684F0000]        <2> 	mov esi, line
  4567 000037A2 E861E3FFFF          <2> 	call printquiet
  4568 000037A7 6631C0              <2> 	xor ax, ax
  4569 000037AA 88C1                <2> 	mov cl, al
  4570 000037AC E80AF4FFFF          <2> 	call showhexsmall
  4571 000037B1 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4572                              <2> charmapcopy:
  4573 000037B6 FEC0                <2> 	inc al
  4574 000037B8 6650                <2> 	push ax
  4575 000037BA 3C08                <2> 	cmp al, 8
  4576 000037BC 744D                <2> 	je charmapnocopy
  4577 000037BE 3C09                <2> 	cmp al, 9
  4578 000037C0 7449                <2> 	je charmapnocopy
  4579 000037C2 3C0A                <2> 	cmp al, 10
  4580 000037C4 7445                <2> 	je charmapnocopy
  4581 000037C6 3C0D                <2> 	cmp al, 13
  4582 000037C8 7441                <2> 	je charmapnocopy
  4583 000037CA 3CFF                <2> 	cmp al, 255
  4584 000037CC 743D                <2> 	je charmapnocopy
  4585 000037CE 3C00                <2> 	cmp al, 0
  4586 000037D0 7434                <2> 	je nomorecharmap
  4587 000037D2 E81BE8FFFF          <2> 	call prcharq
  4588 000037D7 B020                <2> 	mov al, " "
  4589 000037D9 E814E8FFFF          <2> 	call prcharq
  4590 000037DE 6658                <2> 	pop ax
  4591                              <2> charmapcopycheck:
  4592 000037E0 FEC4                <2> 	inc ah
  4593 000037E2 80FC10              <2> 	cmp ah, 16
  4594 000037E5 72CF                <2> 	jb charmapcopy
  4595 000037E7 6650                <2> 	push ax
  4596 000037E9 BE[684F0000]        <2> 	mov esi, line
  4597 000037EE E815E3FFFF          <2> 	call printquiet
  4598 000037F3 6658                <2> 	pop ax
  4599 000037F5 3CFF                <2> 	cmp al, 255
  4600 000037F7 740D                <2> 	je nomorecharmap
  4601 000037F9 88C1                <2> 	mov cl, al
  4602 000037FB FEC1                <2> 	inc cl
  4603 000037FD E8B9F3FFFF          <2> 	call showhexsmall
  4604 00003802 30E4                <2> 	xor ah, ah
  4605 00003804 EBB0                <2> 	jmp charmapcopy
  4606                              <2> nomorecharmap:
  4607 00003806 E9F2EEFFFF          <2> 	jmp nwcmd
  4608                              <2> charmapnocopy:
  4609 0000380B 6650                <2> 	push ax
  4610 0000380D B020                <2> 	mov al, " "
  4611 0000380F E8DEE7FFFF          <2> 	call prcharq
  4612 00003814 E8D9E7FFFF          <2> 	call prcharq
  4613 00003819 6658                <2> 	pop ax
  4614 0000381B EBC3                <2> 	jmp charmapcopycheck
  4615                              <1> %include 'source/programs/clear.asm'
  4616 0000381D FF2C636C65617200    <2> db 255,44,"clear",0
  4617 00003825 E856E3FFFF          <2> 		call clear
  4618 0000382A C3                  <2> 		ret 
  4619                              <1> %include 'source/programs/cpuid.asm'
  4620 0000382B FF2C637075696400    <2> db 255,44,"cpuid",0
  4621 00003833 31C0                <2> 	xor eax, eax
  4622 00003835 0FA2                <2> 	cpuid
  4623 00003837 891D[88380000]      <2> 	mov [cpuidbuf], ebx
  4624 0000383D 8915[8C380000]      <2> 	mov [cpuidbuf + 4], edx
  4625 00003843 890D[90380000]      <2> 	mov [cpuidbuf + 8], ecx
  4626 00003849 BE[88380000]        <2> 	mov esi, cpuidbuf
  4627 0000384E E8C7E2FFFF          <2> 	call print
  4628 00003853 BE[684F0000]        <2> 	mov esi, line
  4629 00003858 E8BDE2FFFF          <2> 	call print
  4630 0000385D B801000000          <2> 	mov eax, 1
  4631 00003862 0FA2                <2> 	cpuid
  4632 00003864 89C1                <2> 	mov ecx, eax
  4633 00003866 C605[BA2B0000]02    <2> 	mov byte [firsthexshown], 2
  4634 0000386D E85DF3FFFF          <2> 	call showhex
  4635 00003872 B808000080          <2> 	mov eax, 0x80000008
  4636 00003877 0FA2                <2> 	cpuid
  4637 00003879 89C1                <2> 	mov ecx, eax
  4638 0000387B C605[BA2B0000]02    <2> 	mov byte [firsthexshown], 2
  4639 00003882 E848F3FFFF          <2> 	call showhex
  4640 00003887 C3                  <2> 	ret
  4641                              <2> 	
  4642 00003888 00<rept>            <2> cpuidbuf times 13 db 0
  4643                              <2> cpuidvendorend:
  4644                              <1> %include 'source/programs/dos.asm'
  4645 00003895 FF2C646F7300        <2> db 255,44,"dos",0
  4646                              <2> dosrunner:
  4647 0000389B 8925[5E770000]      <2> 	mov [previousstack], esp
  4648 000038A1 8B3D[A8290000]      <2> 	mov edi, [currentcommandloc]
  4649 000038A7 81C704000000        <2> 	add edi, 4
  4650 000038AD BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4651 000038B2 E8C4140000          <2> 	call loadfile
  4652 000038B7 8B3D[A8290000]      <2> 	mov edi, [currentcommandloc]
  4653 000038BD 81C704000000        <2> 	add edi, 4
  4654 000038C3 81FA94010000        <2> 	cmp edx, 404
  4655 000038C9 0F845E000000        <2> 	je near .noprogfound
  4656 000038CF BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4657 000038D4 31C9                <2> 	xor ecx, ecx
  4658                              <2> .findparams:
  4659 000038D6 47                  <2> 	inc edi
  4660 000038D7 8A07                <2> 	mov al, [edi]
  4661 000038D9 3C20                <2> 	cmp al, " "
  4662 000038DB 75F9                <2> 	jne .findparams
  4663                              <2> .copyparams:
  4664 000038DD 8A07                <2> 	mov al, [edi]
  4665 000038DF 8803                <2> 	mov [ebx], al
  4666 000038E1 43                  <2> 	inc ebx
  4667 000038E2 47                  <2> 	inc edi
  4668 000038E3 41                  <2> 	inc ecx
  4669 000038E4 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4670 000038EA 7304                <2> 	jae .nomoreparams
  4671 000038EC 3C00                <2> 	cmp al, 0
  4672 000038EE 75ED                <2> 	jne .copyparams
  4673                              <2> .nomoreparams:
  4674 000038F0 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4675 000038F6 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4676 000038FA 8ED8                <2> 	mov ds, ax
  4677 000038FC 8EC0                <2> 	mov es, ax
  4678 000038FE 8EE0                <2> 	mov fs, ax
  4679 00003900 8EE8                <2> 	mov gs, ax
  4680 00003902 31C0                <2> 	xor eax, eax
  4681 00003904 31DB                <2> 	xor ebx, ebx
  4682 00003906 31C9                <2> 	xor ecx, ecx
  4683 00003908 31D2                <2> 	xor edx, edx
  4684 0000390A 31FF                <2> 	xor edi, edi
  4685 0000390C 31F6                <2> 	xor esi, esi
  4686 0000390E 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4687 00003915 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4688 00003919 6689DA              <2> 	mov dx, bx
  4689 0000391C 8EC3                <2> 	mov es, bx
  4690 0000391E 8EE3                <2> 	mov fs, bx
  4691 00003920 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4692 00003924 8EEB                <2> 	mov gs, bx
  4693 00003926 8B25[5E770000]      <2> 	mov esp, [previousstack]
  4694 0000392C C3                  <2> 	ret
  4695                              <2> .noprogfound:
  4696 0000392D BE[274F0000]        <2> 	mov esi, notfound1
  4697 00003932 E8E3E1FFFF          <2> 	call print
  4698 00003937 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  4699 0000393D 81C604000000        <2> 	add esi, 4
  4700 00003943 E8D2E1FFFF          <2> 	call print
  4701 00003948 BE[2F4F0000]        <2> 	mov esi, notfound2
  4702 0000394D E8C8E1FFFF          <2> 	call print
  4703 00003952 C3                  <2> 	ret
  4704                              <2> 	
  4705                              <1> %include 'source/programs/dump.asm'
  4706 00003953 FF2C64756D7000      <2> db 255,44,"dump",0
  4707 0000395A 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  4708 00003960 81C605000000        <2> 	add esi, 5
  4709 00003966 31C9                <2> 	xor ecx, ecx
  4710 00003968 66B83078            <2> 	mov ax, "0x"
  4711 0000396C 663906              <2> 	cmp [esi], ax
  4712 0000396F 740A                <2> 	je dumphexin
  4713 00003971 E805F4FFFF          <2> 	call cnvrttxt
  4714 00003976 E910000000          <2> 	jmp dumphexnow
  4715                              <2> dumphexin:
  4716 0000397B 81C602000000        <2> 	add esi, 2
  4717 00003981 E8ACF3FFFF          <2> 	call cnvrthextxt
  4718 00003986 E900000000          <2> 	jmp dumphexnow
  4719                              <2> dumphexnow:
  4720 0000398B 89CF                <2> 	mov edi, ecx
  4721 0000398D 89FE                <2> 	mov esi, edi
  4722 0000398F 81C680030000        <2> 	add esi, 896
  4723                              <2> dumphexloop:
  4724 00003995 8B0F                <2> 	mov ecx, [edi]
  4725 00003997 C605[BA2B0000]05    <2> 	mov byte [firsthexshown],5
  4726 0000399E E82CF2FFFF          <2> 	call showhex
  4727 000039A3 81C704000000        <2> 	add edi, 4
  4728 000039A9 39F7                <2> 	cmp edi, esi
  4729 000039AB 72E8                <2> 	jb dumphexloop
  4730 000039AD E879E9FFFF          <2> 	call termcopy
  4731 000039B2 C3                  <2> 	ret 
  4732                              <1> %include 'source/programs/echo.asm'
  4733                              <2> 
  4734 000039B3 FF2C6563686F00      <2> db 255,44,"echo",0
  4735                              <2> 	echoprog:
  4736 000039BA 8B35[A8290000]      <2> 		mov esi, [currentcommandloc]
  4737 000039C0 81C605000000        <2> 		add esi, 5
  4738 000039C6 8A06                <2> 		mov al, [esi]
  4739 000039C8 E84DE1FFFF          <2> 		call print
  4740 000039CD BE[684F0000]        <2> 		mov esi, line
  4741 000039D2 E843E1FFFF          <2> 		call print
  4742 000039D7 C3                  <2> 		ret
  4743 000039D8 BB[DE790000]        <2> 	echovr:	mov ebx, variables
  4744 000039DD BF06000000          <2> 		mov edi, 6
  4745 000039E2 E83C000000          <2> 		call nxtvrech
  4746 000039E7 E954000000          <2> 		jmp prntvr2
  4747 000039EC B13D                <2> 	echvar:	mov cl, '='
  4748 000039EE 43                  <2> 		inc ebx
  4749 000039EF 8A03                <2> 		mov al, [ebx]
  4750 000039F1 3C00                <2> 		cmp al, 0
  4751 000039F3 742E                <2> 		je nxtvrech
  4752 000039F5 3C3D                <2> 		cmp al, '='
  4753 000039F7 7422                <2> 		je nxtvrechb1
  4754 000039F9 8B35[A8290000]      <2> 		mov esi, [currentcommandloc]
  4755 000039FF 01FE                <2> 		add esi, edi
  4756 00003A01 E8E1EFFFFF          <2> 		call cndtest
  4757 00003A06 3C02                <2> 		cmp al, 2
  4758 00003A08 7432                <2> 		je prntvr
  4759 00003A0A 3C01                <2> 		cmp al, 1
  4760 00003A0C 742E                <2> 		je prntvr
  4761 00003A0E 8B35[A8290000]      <2> 		mov esi, [currentcommandloc]
  4762 00003A14 01FE                <2> 		add esi, edi
  4763 00003A16 E908000000          <2> 		jmp nxtvrech
  4764                              <2> 	nxtvrechb1:
  4765 00003A1B 81EB02000000        <2> 		sub ebx, 2
  4766 00003A21 EBC9                <2> 		jmp echvar
  4767 00003A23 8A03                <2> 	nxtvrech: mov al, [ebx]
  4768 00003A25 3C05                <2> 		cmp al, 5
  4769 00003A27 740A                <2> 		je nxtvrec2
  4770 00003A29 43                  <2> 		inc ebx
  4771 00003A2A 81FB[DE890000]      <2> 		cmp ebx, varend
  4772 00003A30 72F1                <2> 		jb nxtvrech
  4773 00003A32 C3                  <2> 		ret
  4774 00003A33 43                  <2> 	nxtvrec2: inc ebx
  4775 00003A34 8A03                <2> 		mov al, [ebx]
  4776 00003A36 3C04                <2> 		cmp al, 4
  4777 00003A38 74B2                <2> 		je echvar
  4778 00003A3A EBE7                <2> 		jmp nxtvrech
  4779 00003A3C 43                  <2> 	prntvr: inc ebx
  4780 00003A3D 89DE                <2> 		mov esi, ebx
  4781 00003A3F C3                  <2> 		ret
  4782 00003A40 E8D5E0FFFF          <2> 	prntvr2: call print
  4783 00003A45 BE[684F0000]        <2> 		mov esi, line
  4784 00003A4A E8CBE0FFFF          <2> 		call print
  4785 00003A4F C3                  <2> 		ret 
  4786                              <1> %include 'source/programs/else.asm'
  4787 00003A50 FF2C656C736500      <2> 	db 255,44,"else",0
  4788 00003A57 31C0                <2> elsecmd:	xor eax, eax
  4789 00003A59 3805[D8790000]      <2> 	cmp [BATCHISON], al
  4790 00003A5F 0F8441FAFFFF        <2> 	je near notbatch
  4791 00003A65 A0[6F790000]        <2> 	mov al, [IFON]
  4792 00003A6A BE[70790000]        <2> 	mov esi, IFTRUE
  4793 00003A6F 01C6                <2> 	add esi, eax
  4794 00003A71 8A06                <2> 	mov al, [esi]
  4795 00003A73 3401                <2> 	xor al, 1
  4796 00003A75 8806                <2> 	mov [esi], al
  4797 00003A77 C3                  <2> 	ret 
  4798                              <1> %include 'source/programs/fi.asm'
  4799 00003A78 FF2C666900          <2> 	db 255,44,"fi",0
  4800 00003A7D 30C0                <2> 	xor al, al
  4801 00003A7F 3805[D8790000]      <2> 	cmp [BATCHISON], al
  4802 00003A85 0F841BFAFFFF        <2> 	je near notbatch
  4803 00003A8B B001                <2> fi:	mov al, 1
  4804 00003A8D 2805[6F790000]      <2> 	sub [IFON],al
  4805 00003A93 C3                  <2> 	ret 
  4806                              <1> %include 'source/programs/gui.asm'
  4807 00003A94 FF2C67756900        <2> db 255,44,"gui",0
  4808                              <2> %ifdef gui.included
  4809                              <2> guiswitcher:
  4810                              <2> 	mov esi, [currentcommandloc]
  4811                              <2> 	add esi, 4
  4812                              <2> 	xor ecx, ecx
  4813                              <2> 	cmp byte [esi], 0
  4814                              <2> 	je .nomodepref
  4815                              <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  4816                              <2> 	jmp .modepref
  4817                              <2> .nomodepref:
  4818                              <2> 	push ecx
  4819                              <2> 	call clear
  4820                              <2> 	pop ecx
  4821                              <2> .modepref:
  4822                              <2> 	mov bx, guiswitch
  4823                              <2> 	mov [realmodeptr], bx
  4824                              <2> 	mov ebx, guiswitchret
  4825                              <2> 	mov [realmodereturn], ebx
  4826                              <2> 	jmp realmode
  4827                              <2> guiswitchret:
  4828                              <2> 	cmp byte [gs:guion], 1
  4829                              <2> 	je .cont
  4830                              <2> 	ret
  4831                              <2> .cont:
  4832                              <2> 	mov edi, VBEMODEBLOCK
  4833                              <2> .loop:
  4834                              <2> 	mov eax, [gs:edi]
  4835                              <2> 	mov [edi], eax
  4836                              <2> 	inc edi
  4837                              <2> 	cmp edi, VBEEND
  4838                              <2> 	jb .loop
  4839                              <2> 	mov eax, [physbaseptr]
  4840                              <2> 	sub eax, 0x100000
  4841                              <2> 	mov [physbaseptr], eax
  4842                              <2> 	mov byte [termguion], 0
  4843                              <2> 	mov esi, graphicstable
  4844                              <2> 	xor al, al
  4845                              <2> .clear:
  4846                              <2> 	mov [esi], al
  4847                              <2> 	inc esi
  4848                              <2> 	cmp esi, graphicstableend
  4849                              <2> 	jb .clear
  4850                              <2> 	call guisetup
  4851                              <2> 	mov word [termwindow], 640
  4852                              <2> 	mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  4853                              <2> 	mov esi, termwindow
  4854                              <2> 	mov dx, [resolutionx]
  4855                              <2> 	mov cx, [resolutiony]
  4856                              <2> 	sub dx, 640
  4857                              <2> 	sub cx, 480
  4858                              <2> 	shr dx, 1 ;x location-this centers the window
  4859                              <2> 	shr cx, 1 ;y location-this centers the window	
  4860                              <2> 	mov ebx, nwcmd
  4861                              <2> 	xor ax, ax
  4862                              <2> 	call showwindow
  4863                              <2> 	call cursorgui
  4864                              <2> 	call clear
  4865                              <2> 	ret
  4866                              <2> %else
  4867 00003A9A BE[D43E0000]        <2> 	mov esi, warnguimsg
  4868 00003A9F E876E0FFFF          <2> 	call print
  4869 00003AA4 C3                  <2> 	ret
  4870                              <2> %endif
  4871                              <2> 	
  4872                              <1> %include 'source/programs/help.asm'
  4873 00003AA5 FF2C68656C7000      <2> db 255,44,"help",0
  4874                              <2> lscmd:	
  4875 00003AAC B00D                <2> 		mov al, 13
  4876 00003AAE E83FE5FFFF          <2> 		call prcharq
  4877 00003AB3 BE[FE2D0000]        <2> 		mov esi, progstart
  4878 00003AB8 BB[BB440000]        <2> 		mov ebx, progend
  4879 00003ABD BE[5E730000]        <2> dir:	mov esi, fileindex
  4880 00003AC2 8A06                <2> 	dirnxt:	mov al, [esi]
  4881 00003AC4 30E4                <2> 		xor ah, ah
  4882 00003AC6 3CFF                <2> 		cmp al, 255
  4883 00003AC8 7415                <2> 		je dirfnd
  4884 00003ACA 46                  <2> 		inc esi
  4885 00003ACB 81FE[5E770000]      <2> 		cmp esi,  fileindexend
  4886 00003AD1 7339                <2> 		jae dirdn
  4887 00003AD3 EBED                <2> 		jmp dirnxt
  4888                              <2> 	dirfnd3:
  4889 00003AD5 46                  <2> 		inc esi
  4890 00003AD6 81FE[5E770000]      <2> 		cmp esi, fileindexend
  4891 00003ADC 76E4                <2> 		jbe dirnxt
  4892 00003ADE 4E                  <2> 		dec esi
  4893 00003ADF 46                  <2> 	dirfnd:	inc esi
  4894 00003AE0 8A06                <2> 		mov al, [esi]
  4895 00003AE2 30E4                <2> 		xor ah, ah
  4896 00003AE4 3C2C                <2> 		cmp al, 44
  4897 00003AE6 740B                <2> 		je dirfnd2
  4898 00003AE8 46                  <2> 		inc esi
  4899 00003AE9 81FE[5E770000]      <2> 		cmp esi,  fileindexend
  4900 00003AEF 731B                <2> 		jae dirdn
  4901 00003AF1 EBCF                <2> 		jmp dirnxt
  4902 00003AF3 46                  <2> 	dirfnd2: inc esi
  4903 00003AF4 E80FE0FFFF          <2> 		call printquiet
  4904 00003AF9 56                  <2> 		push esi
  4905 00003AFA B009                <2> 		mov al, 9
  4906 00003AFC E8F1E4FFFF          <2> 		call prcharq
  4907 00003B01 5E                  <2> 		pop esi
  4908 00003B02 81FE[5E770000]      <2> 		cmp esi,  fileindexend
  4909 00003B08 7302                <2> 		jae dirdn
  4910 00003B0A EBB6                <2> 		jmp dirnxt
  4911 00003B0C BE[684F0000]        <2> 	dirdn:	mov esi, line
  4912 00003B11 E804E0FFFF          <2> 			call print
  4913 00003B16 C3                  <2> 			ret
  4914 00003B17 00                  <2> currentdir db 0
  4915                              <1> %include 'source/programs/if.asm'
  4916 00003B18 FF2C696600          <2> 	db 255,44,"if",0
  4917 00003B1D 30C0                <2> ifcmd:	xor al, al
  4918 00003B1F 3805[D8790000]      <2> 	cmp [BATCHISON], al
  4919 00003B25 0F847BF9FFFF        <2> 	je near notbatch
  4920 00003B2B 8B1D[A8290000]      <2> 	mov ebx, [currentcommandloc]
  4921 00003B31 81C303000000        <2> 	add ebx, 3
  4922 00003B37 89DE                <2> 	mov esi, ebx
  4923 00003B39 8A06                <2> chkeqsn: mov al, [esi]
  4924 00003B3B 3C00                <2> 	cmp al, 0
  4925 00003B3D 0F8463F9FFFF        <2> 	je near notbatch
  4926 00003B43 3C3D                <2> 	cmp al, '='
  4927 00003B45 0F8403000000        <2> 	je near chkeqdn
  4928 00003B4B 46                  <2> 	inc esi
  4929 00003B4C EBEB                <2> 	jmp chkeqsn
  4930 00003B4E B000                <2> chkeqdn: mov al, 0 
  4931 00003B50 8806                <2> 	mov [esi], al
  4932 00003B52 46                  <2> 	inc esi
  4933 00003B53 E854EEFFFF          <2> 	call tester
  4934 00003B58 3C01                <2> 	cmp al, 1
  4935 00003B5A 0F8405000000        <2> 	je near trueif
  4936 00003B60 E91C000000          <2> 	jmp falseif
  4937 00003B65 31C0                <2> trueif:	xor eax, eax
  4938 00003B67 A0[6F790000]        <2> 	mov al, [IFON]
  4939 00003B6C FEC0                <2> 	inc al
  4940 00003B6E A2[6F790000]        <2> 	mov [IFON], al
  4941 00003B73 30E4                <2> 	xor ah, ah
  4942 00003B75 BE[70790000]        <2> 	mov esi, IFTRUE
  4943 00003B7A 01C6                <2> 	add esi, eax
  4944 00003B7C B401                <2> 	mov ah, 1
  4945 00003B7E 8826                <2> 	mov [esi], ah
  4946 00003B80 C3                  <2> 	ret 
  4947 00003B81 31C0                <2> falseif: xor eax, eax
  4948 00003B83 A0[6F790000]        <2> 	mov al, [IFON]
  4949 00003B88 FEC0                <2> 	inc al
  4950 00003B8A A2[6F790000]        <2> 	mov [IFON], al
  4951 00003B8F 30E4                <2> 	xor ah, ah
  4952 00003B91 BE[70790000]        <2> 	mov esi, IFTRUE
  4953 00003B96 01C6                <2> 	add esi, eax
  4954 00003B98 30E4                <2> 	xor ah, ah
  4955 00003B9A 8826                <2> 	mov [esi], ah
  4956 00003B9C C3                  <2> 	ret 
  4957                              <1> %ifdef io.serial
  4958                              <1> %else
  4959                              <1> 	%include 'source/programs/keycode.asm'
  4960 00003B9D FF2C6B65797300      <2> db 255,44,"keys",0
  4961                              <2> keycode:
  4962 00003BA4 C605[CC1F0000]00    <2> 	mov byte [trans], 0
  4963 00003BAB C605[1A4F0000]00    <2> 	mov byte [threadson], 0
  4964 00003BB2 E8B20B0000          <2> 	call getkey
  4965 00003BB7 31C0                <2> 	xor eax, eax
  4966 00003BB9 31C9                <2> 	xor ecx, ecx
  4967 00003BBB 8A0D[49470000]      <2> 	mov cl, [specialkey]
  4968 00003BC1 80F900              <2> 	cmp cl, 0
  4969 00003BC4 0F8405000000        <2> 	je near nospecialkeycode
  4970 00003BCA E8ECEFFFFF          <2> 	call showhexsmall
  4971                              <2> nospecialkeycode:
  4972 00003BCF 66A1[CA1F0000]      <2> 	mov ax, [lastkey]
  4973 00003BD5 88E1                <2> 	mov cl, ah
  4974 00003BD7 E8DFEFFFFF          <2> 	call showhexsmall
  4975 00003BDC 80FC01              <2> 	cmp ah, 1
  4976 00003BDF 75C3                <2> 	jne keycode
  4977 00003BE1 C3                  <2> 	ret 
  4978                              <1> %endif
  4979                              <1> %include 'source/programs/logout.asm'
  4980 00003BE2 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  4981 00003BEB E95BE9FFFF          <2> 	jmp os
  4982                              <1> %include 'source/programs/loop.asm'
  4983 00003BF0 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  4984 00003BF7 803D[D9790000]00    <2> 	cmp byte [LOOPON], 0
  4985 00003BFE 0F8501000000        <2> 	jne near filoop
  4986 00003C04 C3                  <2> 	ret
  4987 00003C05 8B35[DA790000]      <2> filoop: mov esi, [LOOPPOS]
  4988 00003C0B FE0D[6F790000]      <2> 	dec byte [IFON]
  4989 00003C11 C605[D9790000]00    <2> 	mov byte [LOOPON], 0
  4990 00003C18 8935[D4790000]      <2> 	mov [BATCHPOS], esi
  4991 00003C1E 8935[CE330000]      <2> 	mov [batchedi], esi
  4992 00003C24 C3                  <2> 	ret 
  4993                              <1> %include 'source/programs/ls.asm'
  4994 00003C25 FF2C6C7300          <2> db 255,44,"ls",0
  4995 00003C2A BE[8D5F0000]        <2> 		mov esi, diskfileindex
  4996                              <2> 	diskindexdir:
  4997 00003C2F 803E5F              <2> 		cmp byte [esi], '_'
  4998 00003C32 7440                <2> 		je nextdiskindexdir
  4999 00003C34 E8CFDEFFFF          <2> 		call printquiet
  5000 00003C39 56                  <2> 		push esi
  5001 00003C3A BE[943C0000]        <2> 		mov esi, disktab
  5002 00003C3F E8C4DEFFFF          <2> 		call printquiet
  5003 00003C44 5E                  <2> 		pop esi
  5004 00003C45 8B4E05              <2> 		mov ecx, [esi + 5]
  5005 00003C48 C605[BA2B0000]05    <2> 		mov byte [firsthexshown], 5
  5006 00003C4F E845F0FFFF          <2> 		call showdec
  5007 00003C54 56                  <2> 		push esi
  5008 00003C55 BE[684F0000]        <2> 		mov esi, line
  5009 00003C5A E8A9DEFFFF          <2> 		call printquiet
  5010 00003C5F 5E                  <2> 		pop esi
  5011 00003C60 81C609000000        <2> 		add esi, 9
  5012 00003C66 81FE[15610000]      <2> 		cmp esi, enddiskfileindex
  5013 00003C6C 72C1                <2> 		jb diskindexdir
  5014 00003C6E E8B8E6FFFF          <2> 		call termcopy
  5015 00003C73 C3                  <2> 		ret
  5016                              <2> 	nextdiskindexdir:
  5017 00003C74 46                  <2> 		inc esi
  5018 00003C75 803E00              <2> 		cmp byte [esi], 0
  5019 00003C78 75FA                <2> 		jne nextdiskindexdir
  5020 00003C7A 81C609000000        <2> 		add esi, 9
  5021 00003C80 81FE[15610000]      <2> 		cmp esi, enddiskfileindex
  5022 00003C86 72A7                <2> 		jb diskindexdir
  5023 00003C88 E89EE6FFFF          <2> 		call termcopy
  5024 00003C8D C3                  <2> 		ret
  5025                              <2> 		
  5026 00003C8E 4469736B2000        <2> 		diskmsg db "Disk ",0
  5027 00003C94 0D09090900          <2> 		disktab db 13,9,9,9,0
  5028                              <1> %include 'source/programs/memory.asm'
  5029 00003C99 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5030 00003CA2 BE[1E610000]        <2> 	mov esi, memlistbuf
  5031 00003CA7 31FF                <2> 	xor edi, edi
  5032 00003CA9 668B3D[5E630000]    <2> 	mov di, [memlistend]
  5033 00003CB0 01F7                <2> 	add edi, esi
  5034                              <2> printmemmap:
  5035 00003CB2 8B0E                <2> 	mov ecx, [esi]
  5036 00003CB4 E816EFFFFF          <2> 	call showhex
  5037 00003CB9 81C608000000        <2> 	add esi, 8
  5038 00003CBF 8B0E                <2> 	mov ecx, [esi]
  5039 00003CC1 E809EFFFFF          <2> 	call showhex
  5040 00003CC6 81C608000000        <2> 	add esi, 8
  5041 00003CCC 8B0E                <2> 	mov ecx, [esi]
  5042 00003CCE E8FCEEFFFF          <2> 	call showhex
  5043 00003CD3 81C608000000        <2> 	add esi, 8
  5044 00003CD9 57                  <2> 	push edi
  5045 00003CDA 56                  <2> 	push esi
  5046 00003CDB BE[684F0000]        <2> 	mov esi, line
  5047 00003CE0 E835DEFFFF          <2> 	call print
  5048 00003CE5 5E                  <2> 	pop esi
  5049 00003CE6 5F                  <2> 	pop edi
  5050 00003CE7 39FE                <2> 	cmp esi, edi
  5051 00003CE9 72C7                <2> 	jb printmemmap
  5052 00003CEB C3                  <2> 	ret
  5053                              <2> 	
  5054                              <1> %include 'source/programs/pci.asm'
  5055 00003CEC FF2C70636900        <2> db 255,44,"pci",0
  5056 00003CF2 E8170E0000          <2> 	call pcidump
  5057 00003CF7 C3                  <2> 	ret 
  5058                              <1> %include 'source/programs/play.asm'
  5059 00003CF8 FF2C706C617900      <2> db 255,44,"play",0
  5060 00003CFF E801000000          <2> 	call playsync
  5061 00003D04 C3                  <2> 	ret
  5062                              <2> playsync:
  5063 00003D05 8B3D[A8290000]      <2> 	mov edi, [currentcommandloc]
  5064 00003D0B 81C705000000        <2> 	add edi, 5
  5065 00003D11 BE00004000          <2> 	mov esi, 0x400000
  5066 00003D16 E860100000          <2> 	call loadfile
  5067 00003D1B 81FA94010000        <2> 	cmp edx, 404
  5068 00003D21 7448                <2> 	je nosoundfound
  5069 00003D23 BB00004000          <2> 	mov ebx, 0x400000
  5070 00003D28 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5071 00003D2F 0F8464000000        <2> 	je near wave_player
  5072 00003D35 66813B534E          <2> 	cmp word [ebx], "SN"
  5073 00003D3A 752F                <2> 	jne nosoundfound
  5074 00003D3C 81C306000000        <2> 	add ebx, 6
  5075 00003D42 891D[3B020000]      <2> 	mov [soundpos], ebx
  5076 00003D48 035BFC              <2> 	add ebx, [ebx - 4]
  5077 00003D4B 891D[3F020000]      <2> 	mov [soundendpos], ebx
  5078 00003D51 66C705[39020000]00- <2> 	mov word [soundrepititions], 0
  5079 00003D59 00                  <2>
  5080 00003D5A C605[38020000]01    <2> 	mov byte [soundon], 1
  5081                              <2> waitforsoundendplay:
  5082 00003D61 A0[38020000]        <2> 	mov al, [soundon]
  5083 00003D66 3C00                <2> 	cmp al, 0
  5084 00003D68 75F7                <2> 	jne waitforsoundendplay
  5085 00003D6A C3                  <2> 	ret
  5086                              <2> nosoundfound:
  5087 00003D6B BE[913D0000]        <2> 	mov esi, notfoundsound
  5088 00003D70 E8A5DDFFFF          <2> 	call print
  5089 00003D75 8B35[A8290000]      <2> 	mov esi, [currentcommandloc]
  5090 00003D7B 81C605000000        <2> 	add esi, 5
  5091 00003D81 E894DDFFFF          <2> 	call print
  5092 00003D86 BE[2F4F0000]        <2> 	mov esi, notfound2
  5093 00003D8B E88ADDFFFF          <2> 	call print
  5094 00003D90 C3                  <2> 	ret
  5095 00003D91 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5096                              <2> 
  5097                              <2> %ifdef sound.included
  5098                              <2> sbplay:
  5099                              <2> 		mov esi, 0x400000
  5100                              <2> 		mov ebx, esi
  5101                              <2> 		add esi, 44
  5102                              <2> 		sub edi, esi
  5103                              <2> 		mov [Length1], di
  5104                              <2> 		shr edi, 16
  5105                              <2> 		mov [Length0], di
  5106                              <2> 		mov ecx, [ebx + 24]
  5107                              <2> 		mov [Freq], ecx
  5108                              <2> 		xor eax, eax
  5109                              <2> 		mov	edx, 0x400000 ;location of sound
  5110                              <2> 		add edx, 2048
  5111                              <2> 		add	eax,edx
  5112                              <2> 		xor ebx, ebx
  5113                              <2> 		mov bx, [Length1]
  5114                              <2> 		add ebx, eax
  5115                              <2> 		mov [NextMemLoc], ebx
  5116                              <2> 		mov	[MemLoc],eax
  5117                              <2> 		call DMAPlay
  5118                              <2> 		ret
  5119                              <2> 
  5120                              <2> wave_player:
  5121                              <2> 	cmp byte [SoundBlaster], 1
  5122                              <2> 	je near sbplay
  5123                              <2> 	mov esi, nosoundblaster
  5124                              <2> 	call print
  5125                              <2> 	ret
  5126                              <2> %else
  5127                              <2> 	wave_player:
  5128 00003D99 BE[A43D0000]        <2> 		mov esi, nosoundblaster
  5129 00003D9E E877DDFFFF          <2> 		call print
  5130 00003DA3 C3                  <2> 		ret
  5131                              <2> %endif
  5132 00003DA4 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5133 00003DAD 426C61737465722064- <2>
  5134 00003DB6 657465637465642E0A- <2>
  5135 00003DBF 00                  <2>
  5136                              <1> %include 'source/programs/pwd.asm'
  5137 00003DC0 FF2C70776400        <2> db 255,44,"pwd",0
  5138 00003DC6 BE[6A770000]        <2> 	mov esi, currentfolder
  5139 00003DCB E838DDFFFF          <2> 	call printquiet
  5140 00003DD0 BE[684F0000]        <2> 	mov esi, line
  5141 00003DD5 E840DDFFFF          <2> 	call print
  5142 00003DDA C3                  <2> 	ret
  5143                              <2> 	
  5144                              <1> %include 'source/programs/reboot.asm'
  5145 00003DDB FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5146 00003DE4 0F011D[EE3D0000]    <2> 		lidt [idtreboot]
  5147 00003DEB CD00                <2> 		int 0
  5148 00003DED F4                  <2> 		hlt
  5149                              <2> 	
  5150 00003DEE 0000                <2> 	idtreboot dw 0
  5151 00003DF0 00000000            <2> 			  dd 0
  5152                              <2> 
  5153                              <2> 	coldboot:
  5154 00003DF4 66B84000            <2> 		MOV AX, 0040h
  5155 00003DF8 8EC0                <2> 		MOV ES, AX
  5156 00003DFA 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5157 00003E03 00                  <2>
  5158 00003E04 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5159 00003E0B CF                  <2> 		IRET
  5160                              <2> 
  5161                              <2> 	warmboot:
  5162 00003E0C 66B84000            <2> 		MOV AX, 0040h
  5163 00003E10 8EC0                <2> 		MOV ES, AX
  5164 00003E12 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5165 00003E1B 12                  <2>
  5166 00003E1C EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5167 00003E23 CF                  <2> 		IRET
  5168                              <2> 		
  5169                              <1> %include 'source/programs/reg.asm'
  5170 00003E24 FF2C72656700        <2> db 255,44,"reg",0
  5171 00003E2A CD03                <2> 	int 3
  5172 00003E2C C3                  <2> 	ret 
  5173                              <1> %include 'source/programs/rmode.asm'
  5174 00003E2D FF2C726D6F646500    <2> db 255,44,"rmode",0
  5175 00003E35 66BB[503E]          <2> 	mov bx, rmodetest
  5176 00003E39 66891D[960C0000]    <2> 	mov [realmodeptr], bx
  5177 00003E40 BB[5B440000]        <2> 	mov ebx, waitkey
  5178 00003E45 891D[920C0000]      <2> 	mov [realmodereturn], ebx
  5179 00003E4B E92BCDFFFF          <2> 	jmp realmode
  5180                              <2> [BITS 16]
  5181                              <2> rmodetest:
  5182 00003E50 BE[623E]            <2> 	mov si, rmodestr
  5183 00003E53 31DB                <2> 	xor bx, bx
  5184                              <2> rmodeprnt:
  5185 00003E55 AC                  <2> 	lodsb
  5186 00003E56 08C0                <2> 	or al, al
  5187 00003E58 7407                <2> 	jz .done
  5188 00003E5A B40E                <2> 	mov ah, 0xE
  5189 00003E5C 43                  <2> 	inc bx
  5190 00003E5D CD10                <2> 	int 0x10
  5191 00003E5F EBF4                <2> 	jmp rmodeprnt
  5192 00003E61 C3                  <2> .done: ret
  5193                              <2> 
  5194 00003E62 48656C6C6F2066726F- <2> rmodestr db "Hello from real mode!",10,13,"Goodbye!",10,13,0
  5195 00003E6B 6D207265616C206D6F- <2>
  5196 00003E74 6465210A0D476F6F64- <2>
  5197 00003E7D 627965210A0D00      <2>
  5198                              <2> [BITS 32]
  5199                              <1> %include 'source/programs/show.asm'
  5200 00003E84 FF2C73686F7700      <2> db 255,44,"show",0
  5201 00003E8B 8B3D[A8290000]      <2> 		mov edi, [currentcommandloc]
  5202 00003E91 81C705000000        <2> 		add edi, 5
  5203 00003E97 BE00008000          <2> 		mov esi, 0x800000
  5204 00003E9C E8DA0E0000          <2> 		call loadfile
  5205 00003EA1 81FA94010000        <2> 		cmp edx, 404
  5206 00003EA7 0F844E000000        <2> 		je near filenotfound
  5207 00003EAD BE00008000          <2> 		mov esi, 0x800000
  5208 00003EB2 66813E424D          <2> 		cmp word [esi], "BM"
  5209 00003EB7 7410                <2> 		je bmpfound
  5210 00003EB9 E85CDCFFFF          <2> 		call print
  5211 00003EBE BE[684F0000]        <2> 		mov esi, line
  5212 00003EC3 E852DCFFFF          <2> 		call print
  5213 00003EC8 C3                  <2> 		ret
  5214                              <2> bmpfound:
  5215                              <2> %ifdef gui.included
  5216                              <2> 		cmp byte [guion], 0
  5217                              <2> 		je near noguibmp
  5218                              <2> 		mov esi, 0x800000
  5219                              <2> 		xor ecx, ecx
  5220                              <2> 		xor edx, edx
  5221                              <2> 		xor eax, eax
  5222                              <2> 		xor ebx, ebx
  5223                              <2> 		call showbmp
  5224                              <2> 		xor al, al
  5225                              <2> 		mov ah, 5
  5226                              <2> 		int 30h
  5227                              <2> 		call guiclear
  5228                              <2> 		call clearmousecursor
  5229                              <2> 		call reloadallgraphics
  5230                              <2> 		mov esi, [currentcommandloc]
  5231                              <2> 		add esi, 5
  5232                              <2> 		call print
  5233                              <2> 		mov esi, loadedbmpmsg
  5234                              <2> 		call print
  5235                              <2> 		ret
  5236                              <2> %endif
  5237                              <2> noguibmp:
  5238 00003EC9 BE[D43E0000]        <2> 		mov esi, warnguimsg
  5239 00003ECE E847DCFFFF          <2> 		call print
  5240 00003ED3 C3                  <2> 		ret
  5241 00003ED4 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5242 00003EDD 6E6F7420626520646F- <2>
  5243 00003EE6 6E6520776974686F75- <2>
  5244 00003EEF 742074686520475549- <2>
  5245 00003EF8 2E0A00              <2>
  5246                              <2> 
  5247                              <2> filenotfound:
  5248 00003EFB BE[2E3F0000]        <2> 		mov esi, filenf
  5249 00003F00 E815DCFFFF          <2> 		call print
  5250 00003F05 8B35[A8290000]      <2> 		mov esi, [currentcommandloc]
  5251                              <2> findfilenotfoundzero:
  5252 00003F0B 8A06                <2> 		mov al, [esi]
  5253 00003F0D 46                  <2> 		inc esi
  5254 00003F0E 3C00                <2> 		cmp al, 0
  5255 00003F10 7411                <2> 		je nofilenamenotfound
  5256 00003F12 81FE[DE910000]      <2> 		cmp esi, buftxtend
  5257 00003F18 7309                <2> 		jae nofilenamenotfound
  5258 00003F1A 3C20                <2> 		cmp al, " "
  5259 00003F1C 75ED                <2> 		jne findfilenotfoundzero
  5260 00003F1E E8F7DBFFFF          <2> 		call print
  5261                              <2> nofilenamenotfound:
  5262 00003F23 BE[393F0000]        <2> 		mov esi, filenf2
  5263 00003F28 E8EDDBFFFF          <2> 		call print
  5264 00003F2D C3                  <2> 		ret
  5265 00003F2E 5468652066696C6520- <2> filenf db "The file ",34,0
  5266 00003F37 2200                <2>
  5267 00003F39 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5268 00003F42 6F7420626520666F75- <2>
  5269 00003F4B 6E642E0A00          <2>
  5270                              <2> 		
  5271 00003F50 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5272 00003F59 00                  <2>
  5273                              <1> %include 'source/programs/shush.asm'
  5274 00003F5A FF2C736875736800    <2> db 255,44,"shush",0
  5275 00003F62 BE[6D3F0000]        <2> 	mov esi, shushmsg
  5276 00003F67 E8AEDBFFFF          <2> 	call print
  5277 00003F6C C3                  <2> 	ret
  5278 00003F6D 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5279 00003F76 6F2074686520536F6C- <2>
  5280 00003F7F 6C65724F5320486172- <2>
  5281 00003F88 646C7920556E69782D- <2>
  5282 00003F91 436F6D70617469626C- <2>
  5283 00003F9A 65205368656C6C210A- <2>
  5284 00003FA3 00                  <2>
  5285                              <1> %include 'source/programs/stop.asm'
  5286 00003FA4 FF2C73746F7000      <2> 	db 255,44,"stop",0
  5287 00003FAB 30C0                <2> stop:	xor al, al
  5288 00003FAD A2[D8790000]        <2> 	mov [BATCHISON], al
  5289 00003FB2 A2[6F790000]        <2> 	mov [IFON], al
  5290 00003FB7 A2[70790000]        <2> 	mov [IFTRUE], al
  5291 00003FBC A2[D9790000]        <2> 	mov [LOOPON], al
  5292 00003FC1 C3                  <2> 	ret 
  5293                              <1> %include 'source/programs/system.asm'
  5294 00003FC2 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5295 00003FCB BE[68400000]        <2> 	mov esi, systeminfomsg
  5296 00003FD0 E833DBFFFF          <2> 	call printquiet
  5297 00003FD5 B9[8D5F0000]        <2> 	mov ecx, osend
  5298 00003FDA E8BAECFFFF          <2> 	call showdec
  5299 00003FDF BE[7D400000]        <2> 	mov esi, diskbytemsg
  5300 00003FE4 E81FDBFFFF          <2> 	call printquiet
  5301 00003FE9 B9[8D5F0000]        <2> 	mov ecx, osend
  5302 00003FEE 81C1[BB040100]      <2> 	add ecx, commandbufend
  5303 00003FF4 81E9[18610000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5304 00003FFA E89AECFFFF          <2> 	call showdec
  5305 00003FFF BE[94400000]        <2> 	mov esi, membytemsg
  5306 00004004 E8FFDAFFFF          <2> 	call printquiet
  5307                              <2> getcpuspeed:
  5308 00004009 B8FE000000          <2> 	mov eax, 0xFE
  5309 0000400E E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5310 00004010 B020                <2> 	mov al, 0x20
  5311 00004012 E620                <2> 	out 0x20, al
  5312 00004014 31C0                <2> 	xor eax, eax
  5313 00004016 F4                  <2> 	hlt
  5314 00004017 C605[21020000]01    <2> 	mov byte [testingcpuspeed], 1
  5315                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5316 0000401E 40                  <2> 	inc eax
  5317 0000401F EBFD                <2> 	jmp cpuspeedloop
  5318                              <2> cpuspeedloopend:
  5319 00004021 31C0                <2> 	xor eax, eax
  5320 00004023 E621                <2> 	out 0x21, al
  5321 00004025 B020                <2> 	mov al, 0x20
  5322 00004027 E620                <2> 	out 0x20, al
  5323 00004029 31D2                <2> 	xor edx, edx
  5324 0000402B 31C0                <2> 	xor eax, eax
  5325 0000402D A1[22020000]        <2> 	mov eax, [cpuspeedperint]
  5326 00004032 8B1D[34020000]      <2> 	mov ebx, [timeinterval]
  5327 00004038 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5328 0000403B F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5329 0000403D 89C1                <2> 	mov ecx, eax
  5330 0000403F E855ECFFFF          <2> 	call showdec
  5331 00004044 BE[C1400000]        <2> 	mov esi, cpuspeedmsg
  5332 00004049 E8BADAFFFF          <2> 	call printquiet
  5333 0000404E 8B0D[26020000]      <2> 	mov ecx, [memoryspace]
  5334 00004054 C1E914              <2> 	shr ecx, 20
  5335 00004057 41                  <2> 	inc ecx	;the reading is one MB behind
  5336 00004058 E83CECFFFF          <2> 	call showdec
  5337 0000405D BE[C7400000]        <2> 	mov esi, memoryspacemsg
  5338 00004062 E8B3DAFFFF          <2> 	call print
  5339                              <2> %ifdef sound.included
  5340                              <2> 	cmp byte [SoundBlaster], 0
  5341                              <2> 	je .nosb
  5342                              <2> 	mov esi, soundblastermsg
  5343                              <2> 	call print
  5344                              <2> .nosb:
  5345                              <2> %endif
  5346 00004067 C3                  <2> 	ret
  5347                              <2> 
  5348 00004068 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5349 00004071 666F726D6174696F6E- <2>
  5350 0000407A 3A0A00              <2>
  5351 0000407D 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5352 00004086 6B2053706163652055- <2>
  5353 0000408F 7365640A00          <2>
  5354 00004094 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,"System Information:",10,0
  5355 0000409D 6F7279205370616365- <2>
  5356 000040A6 20557365640A537973- <2>
  5357 000040AF 74656D20496E666F72- <2>
  5358 000040B8 6D6174696F6E3A0A00  <2>
  5359                              <2> %ifdef sound.included
  5360                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5361                              <2> %endif
  5362 000040C1 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5363 000040C7 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5364 000040D0 205370616365204672- <2>
  5365 000040D9 65650A00            <2>
  5366                              <1> %include 'source/programs/time.asm'
  5367 000040DD 082E30303030303030- <2> timenscache db 8,".000000000"
  5368 000040E6 3030                <2>
  5369 000040E8 200A00              <2> timenscacheend: db " ",10,0
  5370 000040EB 00                  <2> istimeset db 0
  5371 000040EC 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5372 000040F5 2063757272656E7420- <2>
  5373 000040FE 554E49582074696D65- <2>
  5374 00004107 3A0A00              <2>
  5375 0000410A 00<rept>            <2> timeinputbuffer times 12 db 0
  5376 00004116 00                  <2> timeinputbend: db 0
  5377                              <2> 
  5378 00004117 FF2C74696D6500      <2> db 255,44,"time",0
  5379 0000411E 803D[EB400000]00    <2> 	cmp byte [istimeset], 0
  5380 00004125 753A                <2> 	jne timeisset
  5381 00004127 BE[EC400000]        <2> 	mov esi, settimemsg
  5382 0000412C E8E9D9FFFF          <2> 	call print
  5383 00004131 BE[0A410000]        <2> 	mov esi, timeinputbuffer
  5384 00004136 BF[16410000]        <2> 	mov edi, timeinputbend
  5385 0000413B E8C0DAFFFF          <2> 	call readline
  5386 00004140 BE[0A410000]        <2> 	mov esi, timeinputbuffer
  5387 00004145 31FF                <2> 	xor edi, edi
  5388 00004147 E82FECFFFF          <2> 	call cnvrttxt
  5389 0000414C 890D[2C020000]      <2> 	mov [timeseconds], ecx
  5390 00004152 31C9                <2> 	xor ecx, ecx
  5391 00004154 890D[30020000]      <2> 	mov [timenanoseconds], ecx
  5392 0000415A C605[EB400000]01    <2> 	mov byte [istimeset], 1
  5393                              <2> timeisset:
  5394 00004161 8B0D[2C020000]      <2> 	mov ecx, [timeseconds]
  5395 00004167 E82DEBFFFF          <2> 	call showdec
  5396                              <2> 	
  5397 0000416C 8B0D[30020000]      <2> 	mov ecx, [timenanoseconds]
  5398 00004172 BE[DD400000]        <2> 	mov esi, timenscache
  5399 00004177 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5400 0000417E C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5401 00004185 C6460A30            <2> 	mov byte [esi + 10], "0"
  5402 00004189 BE[E8400000]        <2> 	mov esi, timenscacheend
  5403 0000418E E8E9E8FFFF          <2> 	call convert
  5404 00004193 BE[DD400000]        <2> 	mov esi, timenscache
  5405 00004198 E87DD9FFFF          <2> 	call print
  5406                              <2> 	
  5407 0000419D E80F000000          <2> 	call time
  5408 000041A2 BE[7D430000]        <2> 	mov esi, timeshow
  5409 000041A7 E86ED9FFFF          <2> 	call print
  5410 000041AC E9BC000000          <2> 	jmp findday
  5411                              <2> time:
  5412 000041B1 E84F010000          <2> 	call tstackput1
  5413 000041B6 B00A                <2> 	mov al,10			;Get RTC register A
  5414 000041B8 E879010000          <2> 	call tget1
  5415 000041BD A880                <2> 	test al,0x80			;Is update in progress?
  5416 000041BF 75F0                <2> 	jne time				; yes, wait
  5417                              <2> 
  5418 000041C1 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5419 000041C3 E86E010000          <2> 	call tget1
  5420 000041C8 A2[74430000]        <2> 	mov [RTCtimeSecond],al
  5421                              <2> 
  5422 000041CD B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5423 000041CF E862010000          <2> 	call tget1
  5424 000041D4 A2[75430000]        <2> 	mov [RTCtimeMinute],al
  5425                              <2> 
  5426 000041D9 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5427 000041DB E856010000          <2> 	call tget1
  5428 000041E0 A2[76430000]        <2> 	mov [RTCtimeHour],al
  5429                              <2> 
  5430 000041E5 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5431 000041E7 E84A010000          <2> 	call tget1
  5432 000041EC A2[77430000]        <2> 	mov [RTCtimeDay],al
  5433                              <2> 
  5434 000041F1 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5435 000041F3 E83E010000          <2> 	call tget1
  5436 000041F8 A2[78430000]        <2> 	mov [RTCtimeMonth],al
  5437                              <2> 
  5438 000041FD B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5439 000041FF E832010000          <2> 	call tget1
  5440 00004204 A2[79430000]        <2> 	mov [RTCtimeYear],al
  5441                              <2> 	
  5442 00004209 BE[7D430000]        <2> 	mov esi, timeshow
  5443 0000420E 8A2D[76430000]      <2> 	mov ch, [RTCtimeHour]
  5444 00004214 E828010000          <2> 	call tput1
  5445 00004219 8A2D[75430000]      <2> 	mov ch, [RTCtimeMinute]
  5446 0000421F E81D010000          <2> 	call tput1
  5447 00004224 8A2D[74430000]      <2> 	mov ch, [RTCtimeSecond]
  5448 0000422A E812010000          <2> 	call tput1
  5449 0000422F BE[86430000]        <2> 	mov esi, dateshow
  5450 00004234 8A2D[78430000]      <2> 	mov ch, [RTCtimeMonth]
  5451 0000423A E802010000          <2> 	call tput1
  5452 0000423F 8A2D[77430000]      <2> 	mov ch, [RTCtimeDay]
  5453 00004245 E8F7000000          <2> 	call tput1
  5454 0000424A B520                <2> 	mov ch, 0x20
  5455 0000424C E8F0000000          <2> 	call tput1
  5456 00004251 4E                  <2> 	dec esi
  5457 00004252 8A2D[79430000]      <2> 	mov ch, [RTCtimeYear]
  5458 00004258 E8E4000000          <2> 	call tput1
  5459 0000425D E8BD000000          <2> 	call tstackget1
  5460 00004262 C3                  <2> 	ret
  5461 00004263 BE[7D430000]        <2> 	mov esi, timeshow
  5462 00004268 E8ADD8FFFF          <2> 	call print
  5463                              <2> ;;get day of week
  5464                              <2> ;;add these:
  5465                              <2> ;;century value
  5466                              <2> ;;last 2 digits of year
  5467                              <2> ;;last 2 digits of year right shifted twice
  5468                              <2> ;;month table value
  5469                              <2> ;;day of the month
  5470                              <2> ;;divide these by 7
  5471                              <2> ;;the remainder is the day
  5472                              <2> findday:
  5473 0000426D 31C0                <2> 	xor eax, eax
  5474                              <2> ;;first convert the values from BCD to hex
  5475 0000426F A0[77430000]        <2> 	mov al, [RTCtimeDay]
  5476 00004274 E873000000          <2> 	call converttohex
  5477 00004279 8825[7A430000]      <2> 	mov [dayhex], ah
  5478 0000427F A0[78430000]        <2> 	mov al, [RTCtimeMonth]
  5479 00004284 E863000000          <2> 	call converttohex
  5480 00004289 8825[7B430000]      <2> 	mov [monthhex], ah
  5481 0000428F A0[79430000]        <2> 	mov al, [RTCtimeYear]
  5482 00004294 E853000000          <2> 	call converttohex
  5483 00004299 8825[7C430000]      <2> 	mov [yearhex], ah
  5484 0000429F 31C0                <2> 	xor eax, eax
  5485 000042A1 A0[7C430000]        <2> 	mov al, [yearhex]
  5486 000042A6 C0E802              <2> 	shr al, 2
  5487 000042A9 0205[7C430000]      <2> 	add al, [yearhex]
  5488 000042AF 0506000000          <2> 	add eax, 6
  5489 000042B4 31DB                <2> 	xor ebx, ebx
  5490 000042B6 8A1D[7B430000]      <2> 	mov bl, [monthhex]
  5491 000042BC FECB                <2> 	dec bl
  5492 000042BE 81C3[9B430000]      <2> 	add ebx, month
  5493 000042C4 31C9                <2> 	xor ecx, ecx
  5494 000042C6 8A0B                <2> 	mov cl, [ebx]
  5495 000042C8 01C8                <2> 	add eax, ecx
  5496 000042CA 8A0D[7A430000]      <2> 	mov cl, [dayhex]
  5497 000042D0 01C8                <2> 	add eax, ecx
  5498 000042D2 66BB0700            <2> 	mov bx, 7
  5499 000042D6 31D2                <2> 	xor edx, edx
  5500 000042D8 66F7F3              <2> 	div bx
  5501 000042DB C1E202              <2> 	shl edx, 2
  5502 000042DE 81C2[A7430000]      <2> 	add edx, day
  5503 000042E4 8B32                <2> 	mov esi, [edx]
  5504 000042E6 E82FD8FFFF          <2> 	call print
  5505 000042EB C3                  <2> 	ret
  5506                              <2> 	
  5507                              <2> converttohex:
  5508 000042EC 88C4                <2> 	mov ah, al
  5509 000042EE C0E804              <2> 	shr al, 4
  5510 000042F1 C0E404              <2> 	shl ah, 4
  5511 000042F4 C0EC04              <2> 	shr ah, 4
  5512 000042F7 3C00                <2> 	cmp al, 0
  5513 000042F9 7409                <2> 	je noconverttohex
  5514                              <2> converttohexlp:
  5515 000042FB 80C40A              <2> 	add ah, 10
  5516 000042FE FEC8                <2> 	dec al
  5517 00004300 3C00                <2> 	cmp al, 0
  5518 00004302 75F7                <2> 	jne converttohexlp
  5519                              <2> noconverttohex:
  5520 00004304 C3                  <2> 	ret
  5521                              <2> 	
  5522                              <2> tstackput1:
  5523 00004305 8935[70430000]      <2> 	mov [tstack + 20], esi
  5524 0000430B BE[5C430000]        <2> 	mov esi, tstack
  5525 00004310 8906                <2> 	mov [esi], eax
  5526 00004312 895E04              <2> 	mov [esi + 4], ebx
  5527 00004315 894E08              <2> 	mov [esi + 8], ecx
  5528 00004318 89560C              <2> 	mov [esi + 12], edx
  5529 0000431B 897E10              <2> 	mov [esi + 16], edi
  5530 0000431E C3                  <2> 	ret
  5531                              <2> 	
  5532                              <2> tstackget1:
  5533 0000431F BE[5C430000]        <2> 	mov esi, tstack
  5534 00004324 8B06                <2> 	mov eax, [esi]
  5535 00004326 8B5E04              <2> 	mov ebx, [esi + 4]
  5536 00004329 8B4E08              <2> 	mov ecx, [esi + 8]
  5537 0000432C 8B560C              <2> 	mov edx, [esi + 12]
  5538 0000432F 8B7E10              <2> 	mov edi, [esi + 16]
  5539 00004332 8B7614              <2> 	mov esi, [esi + 20]
  5540 00004335 C3                  <2> 	ret
  5541                              <2> 	
  5542                              <2> tget1:
  5543 00004336 66BA7000            <2> 	mov dx, 0x70
  5544 0000433A EE                  <2> 	out dx, al
  5545 0000433B 6642                <2> 	inc dx
  5546 0000433D EC                  <2> 	in al, dx
  5547 0000433E 664A                <2> 	dec dx
  5548 00004340 C3                  <2> 	ret
  5549                              <2> 	
  5550                              <2> tput1:
  5551 00004341 66C1E904            <2> 	shr cx, 4
  5552 00004345 B030                <2> 	mov al, 48
  5553 00004347 00E8                <2> 	add al, ch
  5554 00004349 8806                <2> 	mov [esi], al
  5555 0000434B 46                  <2> 	inc esi
  5556 0000434C B030                <2> 	mov al, 48
  5557 0000434E C0E904              <2> 	shr cl, 4
  5558 00004351 00C8                <2> 	add al, cl
  5559 00004353 8806                <2> 	mov [esi], al
  5560 00004355 81C602000000        <2> 	add esi, 2
  5561 0000435B C3                  <2> 	ret
  5562                              <2> 		
  5563 0000435C 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5564 00004365 000000000000000000- <2>
  5565 0000436E 000000000000        <2>
  5566 00004374 00                  <2> 	RTCtimeSecond db 0
  5567 00004375 00                  <2> 	RTCtimeMinute db 0
  5568 00004376 00                  <2> 	RTCtimeHour db 0
  5569 00004377 00                  <2> 	RTCtimeDay db 0
  5570 00004378 00                  <2> 	RTCtimeMonth db 0
  5571 00004379 00                  <2> 	RTCtimeYear db 0
  5572 0000437A 00                  <2> 	dayhex db 0
  5573 0000437B 00                  <2> 	monthhex db 0
  5574 0000437C 00                  <2> 	yearhex db 0
  5575 0000437D 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5576 00004386 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5577 0000438F 300A00              <2>
  5578                              <2> 	oldcentury:	;;from 1700 to 1900
  5579 00004392 040200              <2> 	db 4,2,0
  5580                              <2> 	century:	;;from 2000 to 2500
  5581 00004395 060402000604        <2> 	db 6,4,2,0,6,4
  5582                              <2> 	month:
  5583 0000439B 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5584 000043A4 000305              <2>
  5585                              <2> 	day:
  5586 000043A7 [C3430000]          <2> 	dd sunday
  5587 000043AB [CB430000]          <2> 	dd monday
  5588 000043AF [D3430000]          <2> 	dd tuesday
  5589 000043B3 [DC430000]          <2> 	dd wednesday
  5590 000043B7 [E7430000]          <2> 	dd thursday
  5591 000043BB [F1430000]          <2> 	dd friday
  5592 000043BF [F9430000]          <2> 	dd saturday
  5593                              <2> sunday:
  5594 000043C3 53756E6461790A00    <2> 	db "Sunday",10,0
  5595                              <2> monday:
  5596 000043CB 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5597                              <2> tuesday:
  5598 000043D3 547565736461790A00  <2> 	db "Tuesday",10,0
  5599                              <2> wednesday:
  5600 000043DC 5765646E6573646179- <2> 	db "Wednesday",10,0
  5601 000043E5 0A00                <2>
  5602                              <2> thursday:
  5603 000043E7 54687572736461790A- <2> 	db "Thursday",10,0
  5604 000043F0 00                  <2>
  5605                              <2> friday:
  5606 000043F1 4672696461790A00    <2> 	db "Friday",10,0
  5607                              <2> saturday:
  5608 000043F9 53617475726461790A- <2> 	db "Saturday",10,0
  5609 00004402 00                  <2>
  5610                              <1> %include 'source/programs/turnoff.asm'
  5611 00004403 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5612 0000440C 00                  <2>
  5613                              <2> 	turnoff:
  5614 0000440D 66BB[2844]          <2> 			mov bx, shutdown
  5615 00004411 66891D[960C0000]    <2> 			mov [realmodeptr], bx
  5616 00004418 BB[52440000]        <2> 			mov ebx, halt
  5617 0000441D 891D[920C0000]      <2> 			mov [realmodereturn], ebx
  5618 00004423 E953C7FFFF          <2> 			jmp realmode
  5619                              <2> 
  5620                              <2> [BITS 16]
  5621                              <2> 		shutdown:
  5622 00004428 B453                <2> 			mov ah, 0x53
  5623 0000442A B004                <2> 			mov al, 4
  5624 0000442C 31DB                <2> 			xor bx, bx
  5625 0000442E CD15                <2> 			int 0x15
  5626                              <2> 			
  5627 00004430 B453                <2> 			mov ah, 0x53
  5628 00004432 B001                <2> 			mov al, 1
  5629 00004434 31DB                <2> 			xor bx, bx
  5630 00004436 CD15                <2> 			int 0x15
  5631                              <2> 			
  5632 00004438 B453                <2> 			mov ah, 0x53
  5633 0000443A B008                <2> 			mov al, 8
  5634 0000443C BB0100              <2> 			mov bx, 1
  5635 0000443F B90100              <2> 			mov cx, 1
  5636 00004442 CD15                <2> 			int 0x15
  5637                              <2> 			
  5638 00004444 B453                <2> 			mov ah, 0x53
  5639 00004446 B007                <2> 			mov al, 7
  5640 00004448 BB0100              <2> 			mov bx, 1
  5641 0000444B B90300              <2> 			mov cx, 3
  5642 0000444E CD15                <2> 			int 0x15
  5643 00004450 EBFE                <2> 			jmp $
  5644                              <2> 			[BITS 32]
  5645 00004452 EBFE                <2> halt: jmp $
  5646                              <1> %include 'source/programs/wait.asm'
  5647 00004454 FF2C7761697400      <2> db 255,44,"wait",0
  5648                              <2> waitkey:
  5649 0000445B E81CDBFFFF          <2> 		call getchar
  5650 00004460 C3                  <2> 		ret
  5651                              <1> %include 'source/programs/while.asm'
  5652 00004461 FF2C7768696C6500    <2> db 255,44,"while",0
  5653 00004469 30C0                <2> whilecmd:  xor al, al
  5654 0000446B 3805[D8790000]      <2> 	cmp [BATCHISON], al
  5655 00004471 0F842FF0FFFF        <2> 	je near notbatch
  5656 00004477 8B35[D4790000]      <2> 	mov esi, [BATCHPOS]
  5657 0000447D 81EE02000000        <2> 	sub esi, 2
  5658 00004483 4E                  <2> whilefnd: dec esi
  5659 00004484 8A06                <2> 	mov al, [esi]
  5660 00004486 3C0A                <2> 	cmp al, 10
  5661 00004488 0F840A000000        <2> 	je near whilefnd2
  5662 0000448E 3C00                <2> 	cmp al, 0
  5663 00004490 0F8402000000        <2> 	je near whilefnd2
  5664 00004496 EBEB                <2> 	jmp whilefnd
  5665                              <2> whilefnd2:
  5666 00004498 46                  <2> 	inc esi
  5667 00004499 8935[DA790000]      <2> 	mov [LOOPPOS], esi
  5668 0000449F C605[D9790000]01    <2> 	mov BYTE [LOOPON], 1
  5669 000044A6 BE[DE8D0000]        <2> 	mov esi, buftxt
  5670 000044AB BB[DE8D0000]        <2> 	mov ebx, buftxt
  5671 000044B0 81C306000000        <2> 	add ebx, 6
  5672 000044B6 E97EF6FFFF          <2> 	jmp chkeqsn
  5673                              <1> progend:		;programs end here	
  5674                              <1> batchprogend:
  5675                                  	%include "source/hardware.asm"
  5676                              <1> %ifdef gui.included
  5677                              <1> 	%include "source/drivers/video/vesa.asm"
  5678                              <1> 	%include "source/drivers/input/mouse.asm"
  5679                              <1> %endif
  5680                              <1> %include "source/drivers/sound/pcspkr.asm"
  5681                              <2> ;PC Speaker Drivers
  5682                              <2> PCSpeakerRAW:
  5683 000044BB 60                  <2> 	pusha
  5684                              <2> nosoundrep:
  5685 000044BC 8B35[3B020000]      <2> 	mov esi, [soundpos]
  5686 000044C2 31C9                <2> 	xor ecx, ecx
  5687 000044C4 668B0D[39020000]    <2> 	mov cx, [soundrepititions]
  5688 000044CB 6681F90000          <2> 	cmp cx, 0
  5689 000044D0 0F8548000000        <2> 	jne near donesetpitch
  5690 000044D6 668B0E              <2> 	mov cx, [esi]
  5691 000044D9 668B5E02            <2> 	mov bx, [esi + 2]
  5692 000044DD 66890D[39020000]    <2> 	mov [soundrepititions], cx
  5693 000044E4 81C604000000        <2> 	add esi, 4
  5694 000044EA 8935[3B020000]      <2> 	mov [soundpos], esi
  5695 000044F0 3B35[3F020000]      <2> 	cmp esi, [soundendpos]
  5696 000044F6 7735                <2> 	ja stopsound
  5697 000044F8 66813D[39020000]00- <2> 	cmp word [soundrepititions], 0
  5698 00004500 00                  <2>
  5699 00004501 74B9                <2> 	je nosoundrep
  5700 00004503 6681FB0000          <2> 	cmp bx, 0
  5701 00004508 740F                <2> 	je nosoundplay
  5702 0000450A E840000000          <2> 	call setpitch
  5703 0000450F E849000000          <2> 	call startsound
  5704 00004514 E905000000          <2> 	jmp donesetpitch
  5705                              <2> nosoundplay:
  5706 00004519 E846000000          <2> 	call killsound
  5707                              <2> donesetpitch:
  5708 0000451E 6649                <2> 	dec cx
  5709 00004520 66890D[39020000]    <2> 	mov [soundrepititions], cx
  5710 00004527 61                  <2> 	popa
  5711 00004528 E94BBDFFFF          <2> 	jmp timerinterrupt
  5712                              <2> stopsound:
  5713 0000452D 31C0                <2> 	xor eax, eax
  5714 0000452F 66A3[39020000]      <2> 	mov [soundrepititions], ax
  5715 00004535 A2[38020000]        <2> 	mov [soundon], al
  5716 0000453A A3[3B020000]        <2> 	mov [soundpos], eax
  5717 0000453F A3[3F020000]        <2> 	mov [soundendpos], eax
  5718 00004544 E81B000000          <2> 	call killsound
  5719 00004549 61                  <2> 	popa
  5720 0000454A E929BDFFFF          <2> 	jmp timerinterrupt
  5721                              <2> 
  5722                              <2> 
  5723                              <2> setpitch:
  5724 0000454F B0B6                <2> 	mov al, 0xB6
  5725 00004551 E643                <2> 	out 0x43, al
  5726 00004553 6689D8              <2> 	mov ax, bx
  5727 00004556 E642                <2> 	out 0x42, al
  5728 00004558 88E0                <2> 	mov al, ah
  5729 0000455A E642                <2> 	out 0x42, al
  5730 0000455C C3                  <2> 	ret
  5731                              <2> startsound:
  5732 0000455D E461                <2> 	in al, 0x61
  5733 0000455F 0C03                <2> 	or al, 3
  5734 00004561 E661                <2> 	out 0x61, al
  5735 00004563 C3                  <2> 	ret
  5736                              <2> killsound:
  5737 00004564 E461                <2> 	in al, 0x61
  5738 00004566 24FC                <2> 	and al, 0xFC
  5739 00004568 E661                <2> 	out 0x61, al
  5740 0000456A C3                  <2> 	ret
  5741                              <2> 	
  5742                              <1> %ifdef sound.included
  5743                              <1> 	%include "source/drivers/sound/sblaster.asm"
  5744                              <1> %endif
  5745                              <1> %ifdef rtl8139.included
  5746                              <1> 	%include "source/drivers/network/rtl8139.asm"
  5747                              <2> ;RTL8139 NIC DRIVER
  5748                              <2> rtl8139:
  5749                              <2> .RBSTART equ 0x30
  5750                              <2> .IMR equ 0x3C
  5751                              <2> .ISR equ 0x3E
  5752                              <2> .CMD equ 0x37
  5753                              <2> .RCR equ 0x44
  5754                              <2> .CONFIG1 equ 0x52
  5755                              <2> .TSD0 equ 0x10
  5756                              <2> .TSAD0 equ 0x20
  5757                              <2> .initcard:	;should find card, get mac, and initialize card
  5758 0000456B 31C0                <2> 	xor eax, eax
  5759 0000456D A2[FF4A0000]        <2> 	mov [pcifunction], al
  5760 00004572 A2[FD4A0000]        <2> 	mov [pcibus], al
  5761 00004577 A2[FE4A0000]        <2> 	mov [pcidevice], al
  5762 0000457C B002                <2> 	mov al, 0x02 ;;type code
  5763 0000457E A2[7A4B0000]        <2> 	mov [pcitype], al
  5764 00004583 E87A050000          <2> 	call getpciport
  5765                              <2> .initnic:	;Here i tried the rtl8139 interface, fuck it
  5766 00004588 8915[3B470000]      <2> 	mov [basenicaddr], edx
  5767 0000458E 89D1                <2> 	mov ecx, edx
  5768 00004590 E83AE6FFFF          <2> 	call showhex	;for debugging, please remove
  5769 00004595 BE[BB040100]        <2> 	mov esi, rbuffstart
  5770 0000459A B900200000          <2> 	mov ecx, 8192
  5771 0000459F 31C0                <2> 	xor eax, eax
  5772                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  5773 000045A1 8806                <2> 	mov [esi], al
  5774 000045A3 46                  <2> 	inc esi
  5775 000045A4 6649                <2> 	dec cx
  5776 000045A6 6681F90000          <2> 	cmp cx, 0
  5777 000045AB 75F4                <2> 	jne .clearrbuff
  5778                              <2> .findmac:
  5779 000045AD 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5780 000045B3 BF[43470000]        <2> 	mov edi, sysmac
  5781 000045B8 B906000000          <2> 	mov ecx, 6
  5782                              <2> .macputloop:
  5783 000045BD EC                  <2> 	in al, dx
  5784 000045BE 8807                <2> 	mov [edi], al
  5785 000045C0 47                  <2> 	inc edi
  5786 000045C1 42                  <2> 	inc edx
  5787 000045C2 49                  <2> 	dec ecx
  5788 000045C3 75F8                <2> 	jnz .macputloop
  5789 000045C5 B9[43470000]        <2> 	mov ecx, sysmac
  5790 000045CA E803010000          <2> 	call showmac
  5791                              <2> .resetnic:
  5792 000045CF 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5793 000045D5 81C252000000        <2> 	add edx, .CONFIG1
  5794 000045DB 30C0                <2> 	xor al, al
  5795 000045DD EE                  <2> 	out dx, al	;WAKE UP!!!!
  5796 000045DE 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5797 000045E4 81C237000000        <2> 	add edx, .CMD
  5798 000045EA B010                <2> 	mov al, 0x10
  5799 000045EC EE                  <2> 	out dx, al	;Reset
  5800                              <2> .resetnicwait:
  5801 000045ED 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5802 000045F3 81C237000000        <2> 	add edx, .CMD
  5803 000045F9 EC                  <2> 	in al, dx
  5804 000045FA 2410                <2> 	and al, 0x10
  5805 000045FC 3C10                <2> 	cmp al, 0x10
  5806 000045FE 0F84E9FFFFFF        <2> 	je near .resetnicwait
  5807 00004604 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5808 0000460A 81C230000000        <2> 	add edx, .RBSTART
  5809 00004610 B8[BB040100]        <2> 	mov eax, rbuffstart
  5810 00004615 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
  5811 0000461A EF                  <2> 	out dx, eax	;give nic receive buffer location
  5812 0000461B 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5813 00004621 81C23C000000        <2> 	add edx, .IMR
  5814 00004627 66ED                <2> 	in ax, dx
  5815 00004629 660D7FE0            <2> 	or ax, 0xE07F ;set all possible interrupts to enabled
  5816 0000462D 66EF                <2> 	out dx, ax	;set TOK and ROK
  5817 0000462F 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5818 00004635 81C244000000        <2> 	add edx, .RCR
  5819 0000463B B80F000000          <2> 	mov eax, 0xf
  5820 00004640 0580000000          <2> 	add eax, 128 ;enable wrap option
  5821 00004645 EF                  <2> 	out dx, eax	;recieve packets from all matches
  5822 00004646 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5823 0000464C 81C237000000        <2> 	add edx, .CMD
  5824 00004652 B00C                <2> 	mov al, 0x0C
  5825 00004654 EE                  <2> 	out dx, al	;use transmit and receive
  5826 00004655 C605[3A470000]01    <2> 	mov byte [nicconfig], 1
  5827 0000465C C3                  <2> 	ret
  5828                              <2> 	
  5829                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  5830 0000465D 56                  <2> 	push esi
  5831 0000465E 57                  <2> 	push edi
  5832                              <2> .nic2:		;here come the low level drivers :(
  5833                              <2> 			;frame begins at esi, ends at edi
  5834                              <2>  			;0x0200 is the class code for ethernet cards
  5835 0000465F 803D[3A470000]01    <2> 	cmp byte [nicconfig], 1
  5836 00004666 7405                <2> 	je .sendcachedata
  5837 00004668 E8FEFEFFFF          <2> 	call .initcard
  5838                              <2> .sendcachedata:
  5839 0000466D 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5840 00004673 81C220000000        <2> 	add edx, .TSAD0
  5841 00004679 5F                  <2> 	pop edi
  5842 0000467A 89F8                <2> 	mov eax, edi
  5843 0000467C 0500001000          <2> 	add eax, 0x100000 ;base address
  5844 00004681 EF                  <2> 	out dx, eax	;here's Johnny!
  5845 00004682 5E                  <2> 	pop esi
  5846 00004683 29FE                <2> 	sub esi, edi
  5847 00004685 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5848 0000468B 81C210000000        <2> 	add edx, .TSD0
  5849 00004691 ED                  <2> 	in eax, dx ;get tsd
  5850 00004692 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
  5851 00004697 01F0                <2> 	add eax, esi ;add length to tsd
  5852 00004699 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
  5853 0000469E EF                  <2> 	out dx, eax
  5854                              <2> .checknicownbit:
  5855 0000469F 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5856 000046A5 81C210000000        <2> 	add edx, .TSD0
  5857 000046AB ED                  <2> 	in eax, dx
  5858 000046AC 2500200000          <2> 	and eax, 0x2000 ;check own bit
  5859 000046B1 3D00200000          <2> 	cmp eax, 0x2000
  5860 000046B6 75E7                <2> 	jne .checknicownbit
  5861                              <2> .checknictokbit:
  5862 000046B8 8B15[3B470000]      <2> 	mov edx, [basenicaddr]
  5863 000046BE 81C210000000        <2> 	add edx, .TSD0
  5864 000046C4 ED                  <2> 	in eax, dx
  5865 000046C5 2500800000          <2> 	and eax, 0x8000	;check tok bit
  5866 000046CA 3D00800000          <2> 	cmp eax, 0x8000
  5867 000046CF 75E7                <2> 	jne .checknictokbit
  5868 000046D1 C3                  <2> 	ret
  5869                              <2> 	
  5870                              <2> showmac:	;mac begins in [ecx]
  5871 000046D2 BE[22470000]        <2> 	mov esi, macprint
  5872 000046D7 89CF                <2> 	mov edi, ecx
  5873 000046D9 81C106000000        <2> 	add ecx, 6
  5874                              <2> showmacloop:
  5875 000046DF 8A07                <2> 	mov al, [edi]
  5876 000046E1 8A27                <2> 	mov ah, [edi]
  5877 000046E3 C0E804              <2> 	shr al, 4
  5878 000046E6 C0E404              <2> 	shl ah, 4
  5879 000046E9 C0EC04              <2> 	shr ah, 4
  5880 000046EC 0430                <2> 	add al, 48
  5881 000046EE 3C39                <2> 	cmp al, "9"
  5882 000046F0 7606                <2> 	jbe .goodal
  5883 000046F2 2C30                <2> 	sub al, 48
  5884 000046F4 2C0A                <2> 	sub al, 0xA
  5885 000046F6 0441                <2> 	add al, "A"
  5886                              <2> .goodal:
  5887 000046F8 80C430              <2> 	add ah, 48
  5888 000046FB 80FC39              <2> 	cmp ah, "9"
  5889 000046FE 7609                <2> 	jbe .goodah
  5890 00004700 80EC30              <2> 	sub ah, 48
  5891 00004703 80EC0A              <2> 	sub ah, 0xA
  5892 00004706 80C441              <2> 	add ah, "A"
  5893                              <2> .goodah:
  5894 00004709 668906              <2> 	mov [esi], ax
  5895 0000470C 81C603000000        <2> 	add esi, 3
  5896 00004712 47                  <2> 	inc edi
  5897 00004713 39CF                <2> 	cmp edi, ecx
  5898 00004715 72C8                <2> 	jb showmacloop
  5899 00004717 BE[22470000]        <2> 	mov esi, macprint
  5900 0000471C E8F9D3FFFF          <2> 	call print
  5901 00004721 C3                  <2> 	ret
  5902                              <2> 	
  5903 00004722 30303A30303A30303A- <2> macprint db "00:00:00:00:00:00  ",0
  5904 0000472B 30303A30303A303020- <2>
  5905 00004734 2000                <2>
  5906 00004736 00000000            <2> ethernetend dw 0,0
  5907 0000473A 00                  <2> nicconfig db 0
  5908 0000473B 00000000            <2> basenicaddr	db 0,0,0,0
  5909 0000473F C0A80005            <2> sysip db 192,168,0,5
  5910 00004743 000000000000        <2> sysmac	db 0,0,0,0,0,0		;my mac address
  5911                              <1> %endif
  5912                              <1> %ifdef io.serial
  5913                              <1> 	%include "source/drivers/input/serial.asm"
  5914                              <1> %else
  5915                              <1> 	%include "source/drivers/input/keyboard.asm"
  5916 00004749 00                  <2> specialkey db 0
  5917 0000474A 00                  <2> charregion db 0
  5918                              <2> waitforinput:		;;this is basically the idle process
  5919                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5920                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  5921 0000474B 6631C0              <2> 	xor ax, ax
  5922 0000474E A0[1A4F0000]        <2> 	mov al, [threadson]
  5923 00004753 8825[1A4F0000]      <2> 	mov [threadson], ah
  5924 00004759 FB                  <2> 	sti
  5925 0000475A F4                  <2> 	hlt
  5926 0000475B A2[1A4F0000]        <2> 	mov [threadson], al
  5927 00004760 3A25[CC1F0000]      <2> 	cmp ah, [trans]
  5928 00004766 7401                <2> 	je getkey
  5929 00004768 C3                  <2> 	ret
  5930                              <2> getkey:
  5931 00004769 31C0                <2> 		xor eax, eax
  5932 0000476B A2[49470000]        <2> 		mov [specialkey], al
  5933 00004770 66A3[CA1F0000]      <2> 		mov [lastkey], ax
  5934 00004776 E464                <2> 		in al, 64h ; Status
  5935                              <2> %ifdef gui.included
  5936                              <2> 		test al, 20h ; PS2-Mouse?
  5937                              <2> 		jnz near moused
  5938                              <2> %endif
  5939 00004778 A801                <2> 		test al, 1 
  5940 0000477A 74CF                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5941                              <2> 	calckey:
  5942 0000477C E460                <2> 		in al, 60h
  5943 0000477E 88C4                <2> 		mov ah, al
  5944 00004780 30C0                <2> 		xor al, al
  5945 00004782 8825[CB1F0000]      <2> 		mov [lastkey + 1], ah
  5946 00004788 88E0                <2> 		mov al, ah
  5947 0000478A BF[23490000]        <2> 		mov edi, scancode
  5948                              <2> 	searchscan: 
  5949 0000478F 3C3A                <2> 		cmp al, 3Ah
  5950 00004791 731A                <2> 		jae scanother
  5951 00004793 30E4                <2> 		xor ah, ah
  5952 00004795 C0E002              <2> 		shl al, 2
  5953 00004798 01C7                <2> 		add edi, eax
  5954 0000479A D0E8                <2> 		shr al, 1
  5955 0000479C 01C7                <2> 		add edi, eax
  5956 0000479E D0E8                <2> 		shr al, 1
  5957 000047A0 8A27                <2> 		mov ah, [edi]
  5958 000047A2 80FC00              <2> 		cmp ah, 0
  5959 000047A5 7406                <2> 		je scanother
  5960 000047A7 E9D7000000          <2> 		jmp scanfound
  5961 000047AC 00                  <2> uppercase db 0
  5962                              <2> scanother:
  5963 000047AD 88C4                <2> 		mov ah, al
  5964 000047AF 30C0                <2> 		xor al, al
  5965 000047B1 66A3[CA1F0000]      <2> 		mov [lastkey], ax
  5966 000047B7 80FCE0              <2> 		cmp ah, 0E0h
  5967 000047BA 0F847D000000        <2> 		je near getkeyspecial
  5968 000047C0 803D[49470000]E0    <2> 		cmp byte [specialkey], 0xE0
  5969 000047C7 752B                <2> 		jne nospecialkey
  5970 000047C9 80FC38              <2> 		cmp ah, 38h
  5971 000047CC 0F84A0000000        <2> 		je near alton
  5972 000047D2 80FCB8              <2> 		cmp ah, 0B8h
  5973 000047D5 0F849F000000        <2> 		je near altoff
  5974 000047DB 80FC1D              <2> 		cmp ah, 1Dh
  5975 000047DE 0F847E000000        <2> 		je near ctron
  5976 000047E4 80FC9D              <2> 		cmp ah, 9Dh
  5977 000047E7 0F847D000000        <2> 		je near ctroff
  5978 000047ED 66A3[CA1F0000]      <2> 		mov [lastkey], ax
  5979 000047F3 C3                  <2> 		ret
  5980                              <2> nospecialkey:
  5981 000047F4 80FC2A              <2> 		cmp ah, 2Ah
  5982 000047F7 0F8455000000        <2> 		je near shifton
  5983 000047FD 80FC36              <2> 		cmp ah, 36h
  5984 00004800 0F844C000000        <2> 		je near shifton
  5985 00004806 80FC1C              <2> 		cmp ah, 1Ch
  5986 00004809 0F8473000000        <2> 		je near entdown
  5987 0000480F 80FCAA              <2> 		cmp ah, 0AAh
  5988 00004812 0F8442000000        <2> 		je near shiftoff
  5989 00004818 80FCB6              <2> 		cmp ah, 0B6h
  5990 0000481B 0F8439000000        <2> 		je near shiftoff
  5991 00004821 80FC3A              <2> 		cmp ah, 3Ah
  5992 00004824 0F84A5000000        <2> 		je near capslock
  5993 0000482A 80FC45              <2> 		cmp ah, 0x45
  5994 0000482D 0F84AD000000        <2> 		je near numlock
  5995 00004833 80FC46              <2> 		cmp ah, 0x46
  5996 00004836 0F84BC000000        <2> 		je near scrolllock
  5997 0000483C C3                  <2> 		ret
  5998                              <2> 	getkeyspecial:
  5999 0000483D C605[49470000]E0    <2> 		mov byte [specialkey], 0xE0
  6000 00004844 E933FFFFFF          <2> 		jmp calckey
  6001                              <2> 	shift:
  6002 00004849 A0[AC470000]        <2> 		mov al, [uppercase]
  6003 0000484E 3C01                <2> 		cmp al, 1
  6004 00004850 7308                <2> 		jae shiftoff
  6005                              <2> 	shifton:
  6006 00004852 C605[AC470000]01    <2> 		mov byte [uppercase], 1
  6007 00004859 C3                  <2> 		ret
  6008                              <2> 	shiftoff:
  6009 0000485A C605[AC470000]00    <2> 		mov byte [uppercase], 0
  6010 00004861 C3                  <2> 		ret
  6011                              <2> 	ctron:
  6012 00004862 C605[CE480000]01    <2> 		mov byte [ctrkey], 1
  6013 00004869 C3                  <2> 		ret
  6014                              <2> 	ctroff:
  6015 0000486A C605[CE480000]00    <2> 		mov byte [ctrkey], 0
  6016 00004871 C3                  <2> 		ret
  6017                              <2> 	alton:
  6018 00004872 C605[CD480000]01    <2> 		mov byte [altkey], 1
  6019 00004879 C3                  <2> 		ret
  6020                              <2> 	altoff:
  6021 0000487A C605[CD480000]00    <2> 		mov byte [altkey], 0
  6022 00004881 C3                  <2> 		ret
  6023                              <2> 	entdown:
  6024 00004882 C3                  <2> 		ret
  6025                              <2> 	scanfound:
  6026 00004883 81C704000000        <2> 		add edi, 4
  6027 00004889 803D[CE480000]01    <2> 		cmp byte [ctrkey], 1
  6028 00004890 731B                <2> 		jae altin
  6029 00004892 81EF04000000        <2> 		sub edi, 4
  6030 00004898 81C702000000        <2> 		add edi, 2
  6031 0000489E 803D[CD480000]01    <2> 		cmp byte [altkey], 1
  6032 000048A5 7306                <2> 		jae altin
  6033 000048A7 81EF02000000        <2> 		sub edi, 2
  6034                              <2> altin:
  6035 000048AD 81C701000000        <2> 		add edi, 1
  6036 000048B3 803D[AC470000]01    <2> 		cmp byte [uppercase], 1
  6037 000048BA 7306                <2> 		jae uppercaseon
  6038 000048BC 81EF01000000        <2> 		sub edi, 1
  6039                              <2> uppercaseon:
  6040 000048C2 8A07                <2> 		mov al,[edi]
  6041 000048C4 A2[CA1F0000]        <2> 		mov [lastkey], al
  6042 000048C9 C3                  <2> 		ret
  6043                              <2> 		
  6044 000048CA 00                  <2> keyboardstatus db 0
  6045 000048CB 00                  <2> numlockstatus db 0
  6046 000048CC 00                  <2> scrolllockstatus db 0
  6047 000048CD 00                  <2> altkey db 0
  6048 000048CE 00                  <2> ctrkey db 0
  6049                              <2> 	capslock:
  6050 000048CF 8035[CA480000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6051 000048D6 E835000000          <2> 		call updatekblights
  6052 000048DB E969FFFFFF          <2> 		jmp shift
  6053                              <2> 		
  6054                              <2> 	numlock:
  6055 000048E0 8035[CA480000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6056 000048E7 8035[CB480000]01    <2> 		xor byte [numlockstatus], 1
  6057 000048EE E81D000000          <2> 		call updatekblights
  6058 000048F3 E971FEFFFF          <2> 		jmp getkey
  6059                              <2> 	
  6060                              <2> 	scrolllock:
  6061 000048F8 8035[CA480000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6062 000048FF 8035[CC480000]01    <2> 		xor byte [scrolllockstatus], 1
  6063 00004906 E805000000          <2> 		call updatekblights
  6064 0000490B E959FEFFFF          <2> 		jmp getkey
  6065                              <2> 		
  6066                              <2> 	updatekblights:
  6067 00004910 B0ED                <2> 		mov al, 0xED
  6068 00004912 66BA6000            <2> 		mov dx, 0x60
  6069 00004916 EE                  <2> 		out dx, al
  6070                              <2> 	chkkbdack:
  6071 00004917 EC                  <2> 		in al, dx
  6072 00004918 3CFA                <2> 		cmp al, 0xFA
  6073 0000491A 75FB                <2> 		jne chkkbdack
  6074 0000491C A0[CA480000]        <2> 		mov al, [keyboardstatus]
  6075 00004921 EE                  <2> 		out dx, al
  6076 00004922 C3                  <2> 		ret
  6077                              <2> 		
  6078                              <2> scancode:
  6079 00004923 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6080 00004929 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6081 0000492F 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6082 00004935 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6083 0000493B 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6084 00004941 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6085 00004947 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6086 0000494D 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6087 00004953 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6088 00004959 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6089 0000495F 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6090 00004965 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6091 0000496B 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6092 00004971 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6093 00004977 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6094 0000497D 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6095 00004983 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6096 00004989 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6097 0000498F 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6098 00004995 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6099 0000499B 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6100 000049A1 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6101 000049A7 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6102 000049AD 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6103 000049B3 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6104 000049B9 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6105 000049BF 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6106 000049C5 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6107 000049CB 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6108 000049D1 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6109 000049D7 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6110 000049DD 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6111 000049E3 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6112 000049E9 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6113 000049EF 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6114 000049F5 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6115 000049FB 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6116 00004A01 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6117 00004A07 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6118 00004A0D 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6119 00004A13 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6120 00004A19 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6121 00004A1F 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6122 00004A25 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6123 00004A2B 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6124 00004A31 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6125 00004A37 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6126 00004A3D 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6127 00004A43 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6128 00004A49 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6129 00004A4F 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6130 00004A55 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6131 00004A5B 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6132 00004A61 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6133 00004A67 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6134 00004A6D 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6135 00004A73 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6136 00004A79 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6137                              <2> noscan:
  6138                              <2> 
  6139                              <1> %endif
  6140                              <1> ;drivers will soon be handled intelligently
  6141                              <1> ;every driver's source will be scanned for a .init function
  6142                              <1> ;that will be called and if it returns 0
  6143                              <1> ;the hardware was found and the driver initialized properly
  6144                              <1> initialize:
  6145                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6146 00004A7F E80F000000          <1> 	call .pic
  6147 00004A84 E837000000          <1> 	call .pit
  6148 00004A89 E859000000          <1> 	call .fpu
  6149 00004A8E 31C0                <1> 	xor eax, eax
  6150 00004A90 31C9                <1> 	xor ecx, ecx
  6151                              <1> %ifdef sound.included
  6152                              <1> 	call sblaster.init
  6153                              <1> %endif
  6154                              <1> %ifdef io.serial
  6155                              <1> 	call serial.init
  6156                              <1> %endif
  6157 00004A92 C3                  <1> 	ret
  6158                              <1> 	
  6159                              <1> .pic:
  6160 00004A93 B011                <1> 	mov al, 0x11
  6161 00004A95 E620                <1> 	out 0x20, al
  6162 00004A97 E6A0                <1> 	out 0xA0, al
  6163 00004A99 B040                <1> 	mov al, 0x40	;interrupt for master
  6164 00004A9B E621                <1> 	out 0x21, al
  6165 00004A9D B048                <1> 	mov al, 0x48	;interrupt for slave
  6166 00004A9F E6A1                <1> 	out 0xA1, al
  6167 00004AA1 B004                <1> 	mov al, 4
  6168 00004AA3 E621                <1> 	out 0x21, al
  6169 00004AA5 B002                <1> 	mov al, 2
  6170 00004AA7 E6A1                <1> 	out 0xA1, al
  6171 00004AA9 B001                <1> 	mov al, 0x1
  6172 00004AAB E621                <1> 	out 0x21, al
  6173 00004AAD B001                <1> 	mov al, 0x1
  6174 00004AAF E6A1                <1> 	out 0xA1, al
  6175                              <1> 	;masks are set to zero so as not to mask
  6176 00004AB1 30C0                <1> 	xor al, al
  6177 00004AB3 E621                <1> 	out 0x21, al
  6178 00004AB5 30C0                <1> 	xor al, al
  6179 00004AB7 E6A1                <1> 	out 0xA1, al
  6180 00004AB9 B020                <1> 	mov al, 0x20
  6181 00004ABB E6A0                <1> 	out 0xA0, al
  6182 00004ABD E620                <1> 	out 0x20, al
  6183 00004ABF C3                  <1> 	ret
  6184                              <1> .pit:
  6185                              <1> 	;initialize the PIT
  6186 00004AC0 66A1[2A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6187 00004AC6 E640                <1> 	out 0x40, al
  6188 00004AC8 66C1C008            <1> 	rol ax, 8
  6189 00004ACC E640                <1> 	out 0x40, al
  6190                              <1> 	;enable rtc interrupt
  6191 00004ACE B00B                <1> 	mov al, 0xB
  6192 00004AD0 E670                <1> 	out 0x70, al
  6193 00004AD2 66C1C008            <1> 	rol ax, 8
  6194 00004AD6 E471                <1> 	in al, 0x71
  6195 00004AD8 66C1C008            <1> 	rol ax, 8
  6196 00004ADC E670                <1> 	out 0x70, al
  6197 00004ADE 66C1C008            <1> 	rol ax, 8
  6198 00004AE2 0C40                <1> 	or al, 0x40
  6199 00004AE4 E671                <1> 	out 0x71, al
  6200 00004AE6 C3                  <1> 	ret
  6201                              <1> .fpu:
  6202                              <1> 	;And now to initialize the fpu
  6203 00004AE7 0F20E0              <1> 	mov eax, cr4
  6204 00004AEA 0D00020000          <1> 	or eax, 0x200
  6205 00004AEF 0F22E0              <1> 	mov cr4, eax
  6206 00004AF2 B87F0B0000          <1> 	mov eax, 0xB7F
  6207 00004AF7 50                  <1> 	push eax
  6208 00004AF8 D92C24              <1> 	fldcw [esp]
  6209 00004AFB 58                  <1> 	pop eax
  6210 00004AFC C3                  <1> 	ret
  6211                              <1> 	
  6212                                      %include "source/pci.asm"
  6213 00004AFD 00                  <1> pcibus		db 0
  6214 00004AFE 00                  <1> pcidevice	db 0
  6215 00004AFF 00                  <1> pcifunction	db 0
  6216 00004B00 00                  <1> pciregister	db 0
  6217 00004B01 00                  <1> pcireqtype db 0
  6218                              <1> 
  6219                              <1> getpciport:
  6220 00004B02 B001                <1> 	mov al, 1
  6221 00004B04 A2[014B0000]        <1> 	mov [pcireqtype], al
  6222 00004B09 E916000000          <1> 	jmp searchpci
  6223                              <1> pcidump:
  6224 00004B0E 31C0                <1> 	xor eax, eax
  6225 00004B10 A2[FF4A0000]        <1> 	mov [pcifunction], al
  6226 00004B15 A2[FD4A0000]        <1> 	mov [pcibus], al
  6227 00004B1A A2[FE4A0000]        <1> 	mov [pcidevice], al
  6228 00004B1F A2[014B0000]        <1> 	mov [pcireqtype], al
  6229                              <1> searchpci:		;;return in ebx, start X in pciX
  6230 00004B24 30C0                <1> 	xor al, al
  6231 00004B26 A2[004B0000]        <1> 	mov [pciregister], al
  6232 00004B2B E855010000          <1> 	call getpciaddr
  6233 00004B30 BAF80C0000          <1> 	mov edx, 0xCF8
  6234 00004B35 EF                  <1> 	out dx, eax	;;request pci config
  6235 00004B36 BAFC0C0000          <1> 	mov edx, 0xCFC
  6236 00004B3B ED                  <1> 	in eax, dx 	;;read in pci config
  6237 00004B3C 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  6238 00004B41 0F8237000000        <1> 	jb near checkpcidevice
  6239                              <1> searchpciret:
  6240                              <1> nextpcidevice:
  6241 00004B47 30C0                <1> 	xor al, al
  6242 00004B49 A2[FF4A0000]        <1> 	mov [pcifunction], al
  6243 00004B4E A0[FE4A0000]        <1> 	mov al, [pcidevice]
  6244 00004B53 3C1F                <1> 	cmp al, 11111b
  6245 00004B55 0F83C1000000        <1> 	jae near nextpcibus
  6246 00004B5B FEC0                <1> 	inc al
  6247 00004B5D A2[FE4A0000]        <1> 	mov [pcidevice], al
  6248 00004B62 EBC0                <1> 	jmp searchpci
  6249 00004B64 A0[FF4A0000]        <1> 	mov al, [pcifunction]
  6250 00004B69 3C07                <1> 	cmp al, 111b
  6251 00004B6B 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  6252 00004B71 FEC0                <1> 	inc al
  6253 00004B73 A2[FF4A0000]        <1> 	mov [pcifunction], al
  6254 00004B78 EBAA                <1> 	jmp searchpci
  6255 00004B7A 00000000            <1> pcitype: db 0,0,0,0
  6256                              <1> checkpcidevice:
  6257 00004B7E 30C0                <1> 	xor al, al
  6258 00004B80 3805[014B0000]      <1> 	cmp [pcireqtype], al
  6259 00004B86 0F842B000000        <1> 	je near dumppcidevice
  6260 00004B8C B008                <1> 	mov al, 0x08
  6261 00004B8E A2[004B0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  6262 00004B93 E8ED000000          <1> 	call getpciaddr
  6263 00004B98 BAF80C0000          <1> 	mov edx, 0xCF8
  6264 00004B9D EF                  <1> 	out dx, eax
  6265 00004B9E BAFC0C0000          <1> 	mov edx, 0xCFC
  6266 00004BA3 ED                  <1> 	in eax, dx
  6267 00004BA4 C1C008              <1> 	rol eax, 8
  6268 00004BA7 8A1D[7A4B0000]      <1> 	mov bl, [pcitype]
  6269 00004BAD 38D8                <1> 	cmp al, bl
  6270 00004BAF 0F8486000000        <1> 	je near foundpciaddr
  6271 00004BB5 EB90                <1> 	jmp searchpciret
  6272                              <1> dumppcidevice:
  6273 00004BB7 30C0                <1> 	xor al, al
  6274 00004BB9 A2[004B0000]        <1> 	mov [pciregister], al
  6275 00004BBE E8C2000000          <1> 	call getpciaddr
  6276 00004BC3 89C1                <1> 	mov ecx, eax
  6277 00004BC5 C605[BA2B0000]05    <1> 	mov byte [firsthexshown], 5
  6278 00004BCC E8FEDFFFFF          <1> 	call showhex
  6279                              <1> dumppcidevicelp:
  6280 00004BD1 A2[004B0000]        <1> 	mov [pciregister], al
  6281 00004BD6 E8AA000000          <1> 	call getpciaddr
  6282 00004BDB BAF80C0000          <1> 	mov edx, 0xCF8
  6283 00004BE0 EF                  <1> 	out dx, eax
  6284 00004BE1 BAFC0C0000          <1> 	mov edx, 0xCFC
  6285 00004BE6 ED                  <1> 	in eax, dx
  6286 00004BE7 89C1                <1> 	mov ecx, eax
  6287 00004BE9 A0[004B0000]        <1> 	mov al, [pciregister]
  6288 00004BEE 0404                <1> 	add al, 4
  6289 00004BF0 C605[BA2B0000]05    <1> 	mov byte [firsthexshown], 5
  6290 00004BF7 E8D3DFFFFF          <1> 	call showhex
  6291 00004BFC 3C3C                <1> 	cmp al, 0x3C
  6292 00004BFE 72D1                <1> 	jb dumppcidevicelp
  6293                              <1> dumppcidn:
  6294                              <1> %ifdef io.serial
  6295                              <1> %else
  6296 00004C00 803D[B2210000]00    <1> 	cmp byte [charpos], 0
  6297 00004C07 0F843AFFFFFF        <1> 	je near searchpciret
  6298 00004C0D BE[684F0000]        <1> 	mov esi, line
  6299 00004C12 E803CFFFFF          <1> 	call print
  6300                              <1> %endif
  6301 00004C17 E92BFFFFFF          <1> 	jmp searchpciret
  6302                              <1> nextpcibus:
  6303 00004C1C 30C0                <1> 	xor al, al
  6304 00004C1E A2[FE4A0000]        <1> 	mov [pcidevice], al
  6305 00004C23 A0[FD4A0000]        <1> 	mov al, [pcibus]
  6306 00004C28 3C7F                <1> 	cmp al, 1111111b
  6307 00004C2A 730C                <1> 	jae donesearchpci
  6308 00004C2C FEC0                <1> 	inc al
  6309 00004C2E A2[FD4A0000]        <1> 	mov [pcibus], al
  6310 00004C33 E9ECFEFFFF          <1> 	jmp searchpci
  6311                              <1> donesearchpci:
  6312 00004C38 31D2                <1> 	xor edx, edx
  6313 00004C3A C3                  <1> 	ret
  6314                              <1> foundpciaddr:
  6315 00004C3B B010                <1> 	mov al, 0x10
  6316 00004C3D A2[004B0000]        <1> 	mov [pciregister], al
  6317                              <1> findpciioaddr:
  6318 00004C42 E83E000000          <1> 	call getpciaddr
  6319 00004C47 BAF80C0000          <1> 	mov edx, 0xCF8
  6320 00004C4C EF                  <1> 	out dx, eax
  6321 00004C4D BAFC0C0000          <1> 	mov edx, 0xCFC
  6322 00004C52 ED                  <1> 	in eax, dx
  6323 00004C53 89C3                <1> 	mov ebx, eax
  6324 00004C55 81E301000000        <1> 	and ebx, 1
  6325 00004C5B 81FB00000000        <1> 	cmp ebx, 0
  6326 00004C61 0F8408000000        <1> 	je near notpciioaddr
  6327 00004C67 2D01000000          <1> 	sub eax, 1
  6328 00004C6C 89C2                <1> 	mov edx, eax
  6329 00004C6E C3                  <1> 	ret
  6330                              <1> notpciioaddr:
  6331 00004C6F A0[004B0000]        <1> 	mov al, [pciregister]
  6332 00004C74 0404                <1> 	add al, 4
  6333 00004C76 3C28                <1> 	cmp al, 0x28
  6334 00004C78 0F87C9FEFFFF        <1> 	ja near searchpciret
  6335 00004C7E A2[004B0000]        <1> 	mov [pciregister], al
  6336 00004C83 EBBD                <1> 	jmp findpciioaddr
  6337                              <1> getpciaddr:		;;puts it in eax and ebx
  6338 00004C85 31C0                <1> 			xor eax, eax
  6339 00004C87 BB00000080          <1> 			mov ebx, 0x80000000
  6340 00004C8C A0[FD4A0000]        <1> 			mov al, [pcibus]
  6341 00004C91 C1E010              <1> 			shl eax, 16
  6342 00004C94 01C3                <1> 			add ebx, eax
  6343 00004C96 31C0                <1> 			xor eax, eax
  6344 00004C98 A0[FE4A0000]        <1> 			mov al, [pcidevice]
  6345 00004C9D C1E00B              <1> 			shl eax, 11
  6346 00004CA0 01C3                <1> 			add ebx, eax
  6347 00004CA2 31C0                <1> 			xor eax, eax
  6348 00004CA4 A0[FF4A0000]        <1> 			mov al, [pcifunction]
  6349 00004CA9 C1E008              <1> 			shl eax, 8
  6350 00004CAC 01C3                <1> 			add ebx, eax
  6351 00004CAE 31C0                <1> 			xor eax, eax
  6352 00004CB0 A0[004B0000]        <1> 			mov al, [pciregister]
  6353 00004CB5 01C3                <1> 			add ebx, eax
  6354 00004CB7 89D8                <1> 			mov eax, ebx
  6355 00004CB9 C3                  <1> 			ret
  6356                                      %include "source/disk.asm"
  6357                              <1> ;This loads files using the methods in the loaded driver
  6358                              <1> %ifdef disk.real
  6359                              <1> %include "source/drivers/disk/realmode.asm"
  6360                              <2> diskr:
  6361                              <2> 			;read from disk using real mode-it does not work with large files
  6362                              <2> 			;sector count in cl
  6363                              <2> 			;disk number in ch
  6364                              <2> 			;48 bit address with last 32 bits in ebx
  6365                              <2> 			;buffer in esi
  6366                              <2> 			;puts end of buffer in edi and end lba address in edx
  6367 00004CBA 880D[E74C0000]      <2> 	mov [sdlength], cl
  6368 00004CC0 891D[E84C0000]      <2> 	mov [sdaddress], ebx
  6369 00004CC6 8935[464E0000]      <2> 	mov [oldesireal], esi
  6370 00004CCC 66BE[EC4C]          <2> 	mov si, readdiskreal
  6371 00004CD0 668935[960C0000]    <2> 	mov [realmodeptr], si
  6372 00004CD7 BE[284D0000]        <2> 	mov esi, backfromrealread
  6373 00004CDC 8935[920C0000]      <2> 	mov [realmodereturn], esi
  6374 00004CE2 E994BEFFFF          <2> 	jmp realmode
  6375 00004CE7 00                  <2> sdlength db 0
  6376 00004CE8 00000000            <2> sdaddress dd 0
  6377                              <2> 
  6378                              <2> [BITS 16]
  6379                              <2> readdiskreal:
  6380 00004CEC C706[184D]1000      <2> 	mov word [dlen], 0x10
  6381 00004CF2 C706[1C4D]0000      <2> 	mov word [daddress], 0
  6382 00004CF8 C706[1E4D]0001      <2> 	mov word [dsegm], 0x100
  6383 00004CFE 66891E[204D]        <2> 	mov [dlbaad], ebx
  6384 00004D03 880E[1A4D]          <2> 	mov [dreadlen], cl
  6385                              <2> ReadHardDisk:
  6386 00004D07 BE[184D]            <2> 	mov si, diskaddresspacket
  6387 00004D0A 31C0                <2> 	xor ax, ax
  6388 00004D0C B442                <2> 	mov ah, 0x42
  6389 00004D0E 8A16[174D]          <2> 	mov dl, [dnumber]
  6390 00004D12 CD13                <2> 	int 0x13
  6391 00004D14 72F1                <2> 	jc ReadHardDisk
  6392 00004D16 C3                  <2> 	ret
  6393                              <2> 
  6394 00004D17 80                  <2> dnumber db 0x80
  6395                              <2> diskaddresspacket:
  6396 00004D18 10                  <2> dlen:	db 0x10 ;size of packet
  6397 00004D19 00                  <2> 		db 0
  6398 00004D1A 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  6399 00004D1C 0000                <2> daddress:	dw 0x0	;address 0
  6400 00004D1E 0001                <2> dsegm:		dw 0x100	;segment
  6401                              <2> 		;start with known value for hd
  6402                              <2> dlbaad:
  6403 00004D20 00000000            <2> 	dd 0	;lba address
  6404 00004D24 00000000            <2> 	dd 0
  6405                              <2> [BITS 32]
  6406                              <2> backfromrealread:
  6407 00004D28 8B35[464E0000]      <2> 	mov esi, [oldesireal]
  6408 00004D2E 8B1D[E84C0000]      <2> 	mov ebx, [sdaddress]
  6409 00004D34 31C9                <2> 	xor ecx, ecx
  6410 00004D36 8A0D[E74C0000]      <2> 	mov cl, [sdlength]
  6411 00004D3C 01CB                <2> 	add ebx, ecx
  6412 00004D3E 66B80800            <2> 	mov ax, LINEAR_SEL
  6413 00004D42 8EE0                <2> 	mov fs, ax
  6414 00004D44 BF00100000          <2> 	mov edi, 0x1000
  6415 00004D49 B200                <2> 	mov dl, 0
  6416 00004D4B D0E1                <2> 	shl cl, 1
  6417                              <2> copyfromrmodedisk:
  6418 00004D4D 648A07              <2> 	mov al, [fs:edi]
  6419 00004D50 8806                <2> 	mov [esi], al
  6420 00004D52 47                  <2> 	inc edi
  6421 00004D53 46                  <2> 	inc esi
  6422 00004D54 FECA                <2> 	dec dl
  6423 00004D56 80FA00              <2> 	cmp dl, 0
  6424 00004D59 75F2                <2> 	jne copyfromrmodedisk
  6425 00004D5B FEC9                <2> 	dec cl
  6426 00004D5D B200                <2> 	mov dl, 0
  6427 00004D5F 80F900              <2> 	cmp cl, 0
  6428 00004D62 75E9                <2> 	jne copyfromrmodedisk
  6429 00004D64 66B83000            <2> 	mov ax, NEW_DATA_SEL
  6430 00004D68 8EE0                <2> 	mov fs, ax
  6431 00004D6A 89F7                <2> 	mov edi, esi
  6432 00004D6C 8B35[464E0000]      <2> 	mov esi, [oldesireal]
  6433 00004D72 89DA                <2> 	mov edx, ebx
  6434 00004D74 8B1D[E84C0000]      <2> 	mov ebx, [sdaddress]
  6435 00004D7A C3                  <2> 	ret
  6436                              <2> 	
  6437                              <1> %else
  6438                              <1> 	%ifdef disk.protected
  6439                              <1> 	%include "source/drivers/disk/pata.asm"
  6440                              <1> 	%endif
  6441                              <1> %endif
  6442                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  6443                              <1> 			;returns with err code in edx and file end in edi
  6444 00004D7B 803F00              <1> 	cmp byte [edi], 0
  6445 00004D7E 0F8448000000        <1> 	je near nofileload
  6446 00004D84 89FA                <1> 	mov edx, edi
  6447 00004D86 BB[8D5F0000]        <1> 	mov ebx, diskfileindex
  6448                              <1> nextnamechar:
  6449 00004D8B 8A07                <1> 	mov al, [edi]
  6450 00004D8D 3C26                <1> 	cmp al, '&'
  6451 00004D8F 7440                <1> 	je nullfile
  6452 00004D91 8A23                <1> 	mov ah, [ebx]
  6453 00004D93 47                  <1> 	inc edi
  6454 00004D94 43                  <1> 	inc ebx
  6455 00004D95 88C1                <1> 	mov cl, al
  6456 00004D97 08E1                <1> 	or cl, ah
  6457 00004D99 80F900              <1> 	cmp cl, 0
  6458 00004D9C 744E                <1> 	je equalfilenames
  6459 00004D9E 80F920              <1> 	cmp cl, ' '
  6460 00004DA1 7449                <1> 	je equalfilenames
  6461 00004DA3 3C2A                <1> 	cmp al, '*'
  6462 00004DA5 742B                <1> 	je equalfilenames2
  6463 00004DA7 80FC00              <1> 	cmp ah, 0
  6464 00004DAA 7410                <1> 	je nextfilename
  6465 00004DAC 3C00                <1> 	cmp al, 0
  6466 00004DAE 7404                <1> 	je getebxzero
  6467 00004DB0 38E0                <1> 	cmp al, ah
  6468 00004DB2 74D7                <1> 	je nextnamechar
  6469                              <1> getebxzero:
  6470 00004DB4 8A23                <1> 	mov ah, [ebx]
  6471 00004DB6 43                  <1> 	inc ebx
  6472 00004DB7 80FC00              <1> 	cmp ah, 0
  6473 00004DBA 75F8                <1> 	jne getebxzero
  6474                              <1> nextfilename:
  6475 00004DBC 81C308000000        <1> 	add ebx, 8		;next descriptor
  6476 00004DC2 89D7                <1> 	mov edi, edx
  6477 00004DC4 81FB[15610000]      <1> 	cmp ebx, enddiskfileindex
  6478 00004DCA 72BF                <1> 	jb nextnamechar
  6479                              <1> nofileload:
  6480 00004DCC BA94010000          <1> 	mov edx, 404	;indicate not found error
  6481                              <1> nullfile:
  6482 00004DD1 C3                  <1> 	ret
  6483                              <1> equalfilenames2:
  6484 00004DD2 81EB02000000        <1> 	sub ebx, 2
  6485                              <1> eqfilefind:
  6486 00004DD8 43                  <1> 	inc ebx
  6487 00004DD9 81FB[15610000]      <1> 	cmp ebx, enddiskfileindex
  6488 00004DDF 0F83E7FFFFFF        <1> 	jae near nofileload
  6489 00004DE5 8A03                <1> 	mov al, [ebx]
  6490 00004DE7 3C00                <1> 	cmp al, 0
  6491 00004DE9 75ED                <1> 	jne eqfilefind
  6492 00004DEB 43                  <1> 	inc ebx
  6493                              <1> equalfilenames:
  6494 00004DEC 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  6495 00004DEF 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  6496 00004DF1 031D[1A610000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  6497 00004DF7 31C9                <1> 	xor ecx, ecx
  6498 00004DF9 88C1                <1> 	mov cl, al			;get excess number of sectors
  6499 00004DFB C0E102              <1> 	shl cl, 2
  6500 00004DFE C0E902              <1> 	shr cl, 2			;cut off at 64
  6501 00004E01 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  6502 00004E03 B500                <1> 	mov ch, 0			;drive 0
  6503 00004E05 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  6504                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  6505 00004E08 A3[4A4E0000]        <1> 	mov [filetracks], eax
  6506 00004E0D 89F7                <1> 	mov edi, esi		;just in case cl is 0
  6507 00004E0F 89DA                <1> 	mov edx, ebx
  6508 00004E11 80F900              <1> 	cmp cl, 0
  6509 00004E14 7405                <1> 	je copytracksforfile
  6510 00004E16 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  6511                              <1> copytracksforfile:
  6512 00004E1B A1[4A4E0000]        <1> 	mov eax, [filetracks]
  6513 00004E20 3D00000000          <1> 	cmp eax, 0
  6514 00004E25 7419                <1> 	je donecopyfile
  6515 00004E27 48                  <1> 	dec eax
  6516 00004E28 A3[4A4E0000]        <1> 	mov [filetracks], eax
  6517 00004E2D 89D3                <1> 	mov ebx, edx	;get end lba
  6518 00004E2F B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  6519 00004E31 8A2D[19610000]      <1> 	mov ch, [DriveNumber]
  6520 00004E37 89FE                <1> 	mov esi, edi	;reset buffer
  6521 00004E39 E87CFEFFFF          <1> 	call diskr
  6522 00004E3E EBDB                <1> 	jmp copytracksforfile
  6523                              <1> donecopyfile:
  6524 00004E40 BA00000000          <1> 	mov edx, 0	;no error
  6525 00004E45 C3                  <1> 	ret
  6526                              <1> 
  6527 00004E46 00000000            <1> oldesireal dd 0
  6528 00004E4A 00000000            <1> filetracks dd 0
  6529 00004E4E 00                  <1> lbad1 db 0
  6530 00004E4F 00                  <1> lbad2 db 0
  6531 00004E50 00                  <1> lbad3 db 0
  6532 00004E51 00                  <1> lbad4 db 0
  6533 00004E52 00                  <1> lbad5 db 0
  6534 00004E53 00                  <1> lbad6 db 0
  6535 00004E54 6400                <1> segments dw 100
  6536                              <1> 
  6537                              <1> 
  6538                              <1> 	
  6539                                      %include "source/threads.asm"
  6540                              <1> %ifdef threads.included	
  6541                              <1> nwcmdst:
  6542 00004E56 31C0                <1> 	xor eax, eax
  6543 00004E58 BC[FE720000]        <1> 	mov esp, stackend
  6544 00004E5D A2[1A4F0000]        <1> 	mov [threadson], al
  6545 00004E62 A3[1B4F0000]        <1> 	mov [currentthread], eax
  6546 00004E67 0504000000          <1> 	add eax, 4
  6547 00004E6C A3[164F0000]        <1> 	mov [lastthread], eax
  6548 00004E71 FB                  <1> 	sti
  6549 00004E72 E986D8FFFF          <1> 	jmp nwcmd
  6550                              <1> 
  6551                              <1> nomorethreadspace:
  6552 00004E77 BE[8D4E0000]        <1> 	mov esi, nmts
  6553 00004E7C E899CCFFFF          <1> 	call print
  6554 00004E81 C605[1A4F0000]00    <1> 	mov byte [threadson], 0
  6555 00004E88 E970D8FFFF          <1> 	jmp nwcmd
  6556 00004E8D 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  6557 00004E96 6572666C6F770A00    <1>
  6558                              <1> 
  6559                              <1> nomorestackspace:
  6560 00004E9E BE[AA4E0000]        <1> 	mov esi, nmss
  6561 00004EA3 E872CCFFFF          <1> 	call print
  6562 00004EA8 EBAC                <1> 	jmp nwcmdst
  6563 00004EAA 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  6564 00004EB3 72666C6F770A00      <1>
  6565                              <1> 	
  6566                              <1> threadswitch:
  6567 00004EBA FA                  <1> 	cli
  6568 00004EBB 60                  <1> 	pushad
  6569 00004EBC BF[CF240100]        <1> 	mov edi, threadlist
  6570 00004EC1 A1[1B4F0000]        <1> 	mov eax, [currentthread]
  6571 00004EC6 40                  <1> 	inc eax
  6572 00004EC7 A3[1B4F0000]        <1> 	mov [currentthread], eax
  6573 00004ECC 6648                <1> 	dec ax
  6574 00004ECE C1E002              <1> 	shl eax, 2
  6575 00004ED1 01C7                <1> 	add edi, eax
  6576 00004ED3 8927                <1> 	mov [edi], esp
  6577 00004ED5 81C704000000        <1> 	add edi, 4
  6578 00004EDB 81FF[CF340100]      <1> 	cmp edi, threadlistend
  6579 00004EE1 0F830D000000        <1> 	jae near nookespthread
  6580 00004EE7 8B07                <1> 	mov eax, [edi]
  6581 00004EE9 3D00000000          <1> 	cmp eax, 0
  6582 00004EEE 0F8519000000        <1> 	jne near okespthread
  6583                              <1> nookespthread:
  6584 00004EF4 BF[CF240100]        <1> 	mov edi, threadlist
  6585 00004EF9 31C0                <1> 	xor eax, eax
  6586 00004EFB A3[1B4F0000]        <1> 	mov [currentthread], eax
  6587 00004F00 8B07                <1> 	mov eax, [edi]
  6588 00004F02 3D00000000          <1> 	cmp eax, 0
  6589 00004F07 0F8449FFFFFF        <1> 	je near nwcmdst
  6590                              <1> okespthread:
  6591 00004F0D 89C4                <1> 	mov esp, eax
  6592 00004F0F B020                <1> 	mov al, 0x20
  6593 00004F11 E620                <1> 	out 0x20, al
  6594 00004F13 61                  <1> 	popad
  6595 00004F14 FB                  <1> 	sti
  6596 00004F15 CF                  <1> 	iret
  6597                              <1> 
  6598                              <1> %endif
  6599 00004F16 04000000            <1> 	lastthread dd 4
  6600 00004F1A 00                  <1> 	threadson db 0
  6601 00004F1B 00000000            <1> 	currentthread dd 0
  6602                                  %ifdef gui.included
  6603                                      %include "source/gui/gui.asm"
  6604                                  %endif
  6605                                      %include "source/data.asm"
  6606 00004F1F 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  6607 00004F27 73687573683A2000    <1> 	notfound1 db "shush: ",0
  6608 00004F2F 3A20636F6D6D616E64- <1> 	notfound2 db  ": command not found",10,0
  6609 00004F38 206E6F7420666F756E- <1>
  6610 00004F41 640A00              <1>
  6611 00004F44 757365726E616D653A- <1> 	userask db "username:",0
  6612 00004F4D 00                  <1>
  6613 00004F4E 70617373776F72643A- <1> 	pwdask	db	"password:",0
  6614 00004F57 00                  <1>
  6615 00004F58 40                  <1> 	computer db "@"
  6616 00004F59 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  6617 00004F62 00                  <1>
  6618 00004F63 5D242000            <1> 	endprompt db "]$ ",0
  6619 00004F67 0D                  <1> 	crlf 	db  13
  6620 00004F68 0A00                <1> 	line	db	10,0
  6621                              <1> 	userlst:
  6622 00004F6A 726F6F7400          <1> 			db "root",0
  6623 00004F6F 617765736F6D65706F- <1> 			db "awesomepower",0
  6624 00004F78 77657200            <1>
  6625 00004F7C 7573657200          <1> 			db "user",0
  6626 00004F81 70617373776F726400  <1> 			db "password",0
  6627 00004F8A 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  6628 00004F8C 00                  <1> 			db 0
  6629                              <1> 	userlstend:
  6630                              <1> 	
  6631                              <1> %ifdef io.serial
  6632                              <1> %else
  6633 00004F8C <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  6634                              <1> fontend:
  6635                              <1> %endif
  6636                              <1> osend:	;this is the end of the operating system's space on disk
  6637                                      %include "build/fileindex.asm"
  6638                              <1> diskfileindex:
  6639 00005F8D 617267746573742E65- <1> db "argtest.elf",0
  6640 00005F96 6C6600              <1>
  6641 00005F99 31000000            <1> dd (f0-$$)/512
  6642 00005F9D 06010000            <1> dd (f1-f0)/512
  6643 00005FA1 626F6F742E736800    <1> db "boot.sh",0
  6644 00005FA9 37010000            <1> dd (f1-$$)/512
  6645 00005FAD 01000000            <1> dd (f2-f1)/512
  6646 00005FB1 63686172746573742E- <1> db "chartest.elf",0
  6647 00005FBA 656C6600            <1>
  6648 00005FBE 38010000            <1> dd (f2-$$)/512
  6649 00005FC2 26010000            <1> dd (f3-f2)/512
  6650 00005FC6 646F73746573742E63- <1> db "dostest.com",0
  6651 00005FCF 6F6D00              <1>
  6652 00005FD2 5E020000            <1> dd (f3-$$)/512
  6653 00005FD6 01000000            <1> dd (f4-f3)/512
  6654 00005FDA 657865636C00        <1> db "execl",0
  6655 00005FE0 5F020000            <1> dd (f4-$$)/512
  6656 00005FE4 01000000            <1> dd (f5-f4)/512
  6657 00005FE8 66696E616C636F756E- <1> db "finalcount.snd",0
  6658 00005FF1 742E736E6400        <1>
  6659 00005FF7 60020000            <1> dd (f5-$$)/512
  6660 00005FFB 01000000            <1> dd (f6-f5)/512
  6661 00005FFF 666F726B00          <1> db "fork",0
  6662 00006004 61020000            <1> dd (f6-$$)/512
  6663 00006008 01000000            <1> dd (f7-f6)/512
  6664 0000600C 68656C6C6F776F726C- <1> db "helloworld.elf",0
  6665 00006015 642E656C6600        <1>
  6666 0000601B 62020000            <1> dd (f7-$$)/512
  6667 0000601F D6010000            <1> dd (f8-f7)/512
  6668 00006023 696E7400            <1> db "int",0
  6669 00006027 38040000            <1> dd (f8-$$)/512
  6670 0000602B 01000000            <1> dd (f9-f8)/512
  6671 0000602F 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  6672 00006038 2E736E6400          <1>
  6673 0000603D 39040000            <1> dd (f9-$$)/512
  6674 00006041 01000000            <1> dd (f10-f9)/512
  6675 00006045 6D6172696F2E736E64- <1> db "mario.snd",0
  6676 0000604E 00                  <1>
  6677 0000604F 3A040000            <1> dd (f10-$$)/512
  6678 00006053 01000000            <1> dd (f11-f10)/512
  6679 00006057 736F6C6C65726F732E- <1> db "solleros.bmp",0
  6680 00006060 626D7000            <1>
  6681 00006064 3B040000            <1> dd (f11-$$)/512
  6682 00006068 B0020000            <1> dd (f12-f11)/512
  6683 0000606C 736F6C6C65726F732E- <1> db "solleros.txt",0
  6684 00006075 74787400            <1>
  6685 00006079 EB060000            <1> dd (f12-$$)/512
  6686 0000607D 01000000            <1> dd (f13-f12)/512
  6687 00006081 736F6E676F74696D65- <1> db "songotime.snd",0
  6688 0000608A 2E736E6400          <1>
  6689 0000608F EC060000            <1> dd (f13-$$)/512
  6690 00006093 01000000            <1> dd (f14-f13)/512
  6691 00006097 737464696F74657374- <1> db "stdiotest.elf",0
  6692 000060A0 2E656C6600          <1>
  6693 000060A5 ED060000            <1> dd (f14-$$)/512
  6694 000060A9 27010000            <1> dd (f15-f14)/512
  6695 000060AD 74656C7900          <1> db "tely",0
  6696 000060B2 14080000            <1> dd (f15-$$)/512
  6697 000060B6 01000000            <1> dd (f16-f15)/512
  6698 000060BA 74696D65746573742E- <1> db "timetest.elf",0
  6699 000060C3 656C6600            <1>
  6700 000060C7 15080000            <1> dd (f16-$$)/512
  6701 000060CB 06010000            <1> dd (f17-f16)/512
  6702 000060CF 7475746F7269616C2E- <1> db "tutorial.sh",0
  6703 000060D8 736800              <1>
  6704 000060DB 1B090000            <1> dd (f17-$$)/512
  6705 000060DF 03000000            <1> dd (f18-f17)/512
  6706 000060E3 756E667300          <1> db "unfs",0
  6707 000060E8 1E090000            <1> dd (f18-$$)/512
  6708 000060EC 02000000            <1> dd (f19-f18)/512
  6709 000060F0 766963746F72792E77- <1> db "victory.wav",0
  6710 000060F9 617600              <1>
  6711 000060FC 20090000            <1> dd (f19-$$)/512
  6712 00006100 16000000            <1> dd (f20-f19)/512
  6713 00006104 5F696D672E62696E00  <1> db "_img.bin",0
  6714 0000610D 36090000            <1> dd (f20-$$)/512
  6715 00006111 D7020000            <1> dd (f21-f20)/512
  6716                              <1> enddiskfileindex:
  6717                              <1> 
  6718                                      %include "source/bss.asm"
  6719 00006115 90<rept>            <1> align 4, nop
  6720                              <1> bssstart: equ $
  6721                              <1> guion equ bssstart
  6722                              <1> DriveNumber equ guion + 1
  6723                              <1> lbaad equ DriveNumber + 1
  6724                              <1> memlistbuf equ lbaad + 4
  6725                              <1> memlistend equ memlistbuf + 576
  6726                              <1> bsscopy equ memlistend
  6727                              <1> initialstack equ bsscopy
  6728                              <1> stackend equ initialstack + 4000
  6729                              <1> fileindex: equ stackend + 96
  6730                              <1> fileindexend: equ fileindex + 1024
  6731                              <1> previousstack equ fileindexend
  6732                              <1> lastfolderloc equ previousstack + 4
  6733                              <1> currentfolderloc equ lastfolderloc + 4
  6734                              <1> currentfolder equ currentfolderloc + 4
  6735                              <1> currentfolderend equ currentfolder + 512
  6736                              <1> uid equ currentfolderend
  6737                              <1> ranboot equ uid + 4
  6738                              <1> IFON equ ranboot + 1
  6739                              <1> IFTRUE equ IFON + 1
  6740                              <1> BATCHPOS equ IFTRUE + 100
  6741                              <1> BATCHISON equ BATCHPOS + 4
  6742                              <1> LOOPON equ BATCHISON + 1
  6743                              <1> LOOPPOS	equ LOOPON + 1
  6744                              <1> variables: equ LOOPPOS + 4
  6745                              <1> varend: equ variables + 4096
  6746                              <1> buftxt2: equ varend
  6747                              <1> buftxt: equ buftxt2 + 1024
  6748                              <1> buftxtend: equ buftxt + 1024
  6749                              <1> buf2: equ buftxtend
  6750                              <1> numbuf: equ buf2 + 20
  6751                              <1> %ifdef io.serial
  6752                              <1> 	lastcommandpos: equ numbuf + 1
  6753                              <1> 	commandbufpos: equ lastcommandpos + 4
  6754                              <1> 	commandbufend equ commandbufpos
  6755                              <1> %else
  6756                              <1> 	%ifdef gui.included
  6757                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  6758                              <1> 		graphicstableend equ graphicstable + 200h
  6759                              <1> 		mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  6760                              <1> 		mcolorend equ mousecolorbuf + 256
  6761                              <1> 		videobuf equ mcolorend + 1	;1280x1024pixels in characters
  6762                              <1> 		videobufend	equ videobuf + 160*64*2
  6763                              <1> 		videobuf2 equ videobufend
  6764                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  6765                              <1> 	%else
  6766                              <1> 		videobuf equ numbuf + 1
  6767                              <1> 		videobufend equ videobuf + 80*30*2
  6768                              <1> 		videobuf2 equ videobufend
  6769                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  6770                              <1> 	%endif
  6771                              <1> 	lastcommandpos: equ videobuf2end
  6772                              <1> 	commandbufpos: equ lastcommandpos + 4
  6773                              <1> 	commandbuf: equ commandbufpos + 4
  6774                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  6775                              <1> %endif
  6776                              <1> %ifdef rtl8139.included
  6777                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  6778                              <1> 	rbuffend equ rbuffstart + 8212
  6779                              <1> %else
  6780                              <1> 	rbuffstart equ commandbufend
  6781                              <1> 	rbuffend equ commandbufend
  6782                              <1> %endif
  6783                              <1> %ifdef threads.included
  6784                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  6785                              <1> 	threadlistend: equ threadlist + 1024*4
  6786                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  6787                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  6788                              <1> 	bssend equ stack1 + 1024*1024
  6789                              <1> %else
  6790                              <1> 	bssend equ rbuffend
  6791                              <1> %endif
  6792                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  6793                                      %include "build/files.asm"
  6794 00006118 00<rept>            <1> align 512,db 0
  6795                              <1> f0:
  6796 00006118 <incbin>            <1> incbin "included/argtest.elf"
  6797 00026CF2 00<rept>            <1> align 512,db 0
  6798                              <1> f1:
  6799 00026CF2 <incbin>            <1> incbin "included/boot.sh"
  6800 00026E16 00<rept>            <1> align 512,db 0
  6801                              <1> f2:
  6802 00026E16 <incbin>            <1> incbin "included/chartest.elf"
  6803 0004BADB 00<rept>            <1> align 512,db 0
  6804                              <1> f3:
  6805 0004BADB <incbin>            <1> incbin "included/dostest.com"
  6806 0004BD2B 00<rept>            <1> align 512,db 0
  6807                              <1> f4:
  6808 0004BD2B <incbin>            <1> incbin "included/execl"
  6809 0004BED9 00<rept>            <1> align 512,db 0
  6810                              <1> f5:
  6811 0004BED9 <incbin>            <1> incbin "included/finalcount.snd"
  6812 0004C102 00<rept>            <1> align 512,db 0
  6813                              <1> f6:
  6814 0004C102 <incbin>            <1> incbin "included/fork"
  6815 0004C354 00<rept>            <1> align 512,db 0
  6816                              <1> f7:
  6817 0004C354 <incbin>            <1> incbin "included/helloworld.elf"
  6818 00086FE3 00<rept>            <1> align 512,db 0
  6819                              <1> f8:
  6820 00086FE3 <incbin>            <1> incbin "included/int"
  6821 0008719B 00<rept>            <1> align 512,db 0
  6822                              <1> f9:
  6823 0008719B <incbin>            <1> incbin "included/lostwoods.snd"
  6824 00087256 00<rept>            <1> align 512,db 0
  6825                              <1> f10:
  6826 00087256 <incbin>            <1> incbin "included/mario.snd"
  6827 0008743A 00<rept>            <1> align 512,db 0
  6828                              <1> f11:
  6829 0008743A <incbin>            <1> incbin "included/solleros.bmp"
  6830 000DD5E6 00<rept>            <1> align 512,db 0
  6831                              <1> f12:
  6832 000DD5E6 <incbin>            <1> incbin "included/solleros.txt"
  6833 000DD776 00<rept>            <1> align 512,db 0
  6834                              <1> f13:
  6835 000DD776 <incbin>            <1> incbin "included/songotime.snd"
  6836 000DD84A 00<rept>            <1> align 512,db 0
  6837                              <1> f14:
  6838 000DD84A <incbin>            <1> incbin "included/stdiotest.elf"
  6839 00102643 00<rept>            <1> align 512,db 0
  6840                              <1> f15:
  6841 00102643 <incbin>            <1> incbin "included/tely"
  6842 001029B2 00<rept>            <1> align 512,db 0
  6843                              <1> f16:
  6844 001029B2 <incbin>            <1> incbin "included/timetest.elf"
  6845 00123509 00<rept>            <1> align 512,db 0
  6846                              <1> f17:
  6847 00123509 <incbin>            <1> incbin "included/tutorial.sh"
  6848 00123B52 00<rept>            <1> align 512,db 0
  6849                              <1> f18:
  6850 00123B52 <incbin>            <1> incbin "included/unfs"
  6851                              <1> align 512,db 0
  6852                              <1> f19:
  6853 00123B52 <incbin>            <1> incbin "included/victory.wav"
  6854 00126B48 00<rept>            <1> align 512,db 0
  6855                              <1> f20:
  6856 00126B48 <incbin>            <1> incbin "included/_img.bin"
  6857                              <1> align 512,db 0
  6858                              <1> f21:
