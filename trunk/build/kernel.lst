     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> %define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> %define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> %define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 FB000000            <1> dd 251	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[599F]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[5A9F]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[589F]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[5E9F]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[9EA1]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[5E9F]          <1> 	sub di, memlistbuf
   177 00000075 893E[9EA1]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[AF03]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[B703]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[B103]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[B903]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[B403]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[BC03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[9EA10000]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[A703]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[A903]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[AC03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[BF03]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[C703]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[CF03]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[D703]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[C103]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[C903]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[D103]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[D903]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[C403]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[CC03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[D403]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[DC03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[DF03]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[E703]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[E103]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[E903]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[E403]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[EC03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[95030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[8B03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[ED030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[9103]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[8903]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[8F03]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[9EA10000]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[3EB10000]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E8805F0000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[A4EC1100]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[9EA10000]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[5E9F0000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[9EA10000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[589F0000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[21570000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[21570000]      <1> 	mov [physbaseptr], edi
   337 00000237 E9BE640000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E969270000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[E24D0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9ED000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E8B7000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F845D580000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[F5660000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F84E0630000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[F5660000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F84B7000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F85AA000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E99F000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[9EB10000]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[9EB10000]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[3EB10000]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E9E6270000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000031C E95F000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472 00000321 FA                  <1> 	cli
   473 00000322 52                  <1> 	push edx
   474 00000323 50                  <1> 	push eax
   475 00000324 8B15[E5850000]      <1> 	mov edx, [rtl8139.basenicaddr]
   476 0000032A 81C23E000000        <1> 	add edx, rtl8139.ISR
   477 00000330 31C0                <1> 	xor eax, eax
   478 00000332 66ED                <1> 	in ax, dx
   479 00000334 66EF                <1> 	out dx, ax
   480 00000336 58                  <1> 	pop eax
   481 00000337 5A                  <1> 	pop edx
   482 00000338 FB                  <1> 	sti
   483 00000339 E942000000          <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487 0000033E FA                  <1> 	cli
   488 0000033F 60                  <1> 	pusha
   489 00000340 803D[EB5D0000]01    <1> 	cmp byte [SoundBlaster], 1
   490 00000347 0F84A9580000        <1> 	je near sblaster.cont
   491 0000034D E925000000          <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000352 50                  <1> 	push eax
   496 00000353 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 00000358 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 0000035E 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000363 720B                <1> 	jb nonanosecondrollover
   500 00000365 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000036B 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 00000370 A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000375 58                  <1> 	pop eax
   515 00000376 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000377 61                  <1> 	popa
   519                              <1> handled3:
   520 00000378 FB                  <1> 	sti
   521                              <1> handled:
   522 00000379 50                  <1> 	push eax
   523 0000037A B020                <1> 	mov al, 0x20
   524 0000037C E620                <1> 	out 0x20, al
   525 0000037E 58                  <1> 	pop eax
   526 0000037F CF                  <1> 	iret
   527                              <1> handled4:
   528 00000380 50                  <1> 	push eax
   529 00000381 B020                <1> 	mov al, 0x20
   530 00000383 E6A0                <1> 	out 0xA0, al
   531 00000385 E620                <1> 	out 0x20, al
   532 00000387 58                  <1> 	pop eax
   533 00000388 CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 00000389 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000038B 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 0000038F FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000391 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000395 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000397 0000                <1> 	dw 0			; base 15:0
   547 00000399 00                  <1> 	db 0			; base 23:16
   548 0000039A 00                  <1> 	db 0			; type
   549 0000039B 00                  <1> 	db 0			; limit 19:16, flags
   550 0000039C 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 0000039D FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 0000039F 0000                <1> 	dw 0			; base for this one is always 0
   555 000003A1 00                  <1> 	db 0
   556 000003A2 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 000003A3 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 000003A4 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 000003A5 0200                <1> gdts:	dw 2;(stackend)/4096
   561 000003A7 0000                <1> 	dw 0
   562 000003A9 00                  <1> 	db 0
   563 000003AA 92                  <1> 	db 0x92
   564 000003AB CF                  <1> 	db 0xCF
   565 000003AC 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 000003AD FFFF                <1> gdt2:	dw 0xFFFF
   569 000003AF 0000                <1> 	dw 0			; (base gets set above)
   570 000003B1 00                  <1> 	db 0
   571 000003B2 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 000003B3 CF                  <1> 	db 0xCF
   573 000003B4 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 000003B5 FFFF                <1> gdt3:	dw 0xFFFF
   577 000003B7 0000                <1> 	dw 0			; (base gets set above)
   578 000003B9 00                  <1> 	db 0
   579 000003BA 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 000003BB CF                  <1> 	db 0xCF
   581 000003BC 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 000003BD FFFF                <1> gdt4:	dw 0xFFFF
   584 000003BF 0000                <1> 	dw 0			; (base gets set above)
   585 000003C1 00                  <1> 	db 0
   586 000003C2 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 000003C3 CF                  <1> 	db 0xCF
   588 000003C4 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 000003C5 FFFF                <1> gdt5:	dw 0xFFFF
   592 000003C7 0000                <1> 	dw 0			; (base gets set above)
   593 000003C9 00                  <1> 	db 0
   594 000003CA 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 000003CB CF                  <1> 	db 0xCF
   596 000003CC 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 000003CD FFFF                <1> gdtv8086: dw 0xFFFF
   599 000003CF 0000                <1> 	dw 0
   600 000003D1 00                  <1> 	db 0
   601 000003D2 9A                  <1> 	db 0x9A
   602 000003D3 8F                  <1> 	db 0x8F
   603 000003D4 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003D5 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003D7 0000                <1> 	dw 0
   607 000003D9 00                  <1> 	db 0
   608 000003DA 92                  <1> 	db 0x92
   609 000003DB 8F                  <1> 	db 0x8F
   610 000003DC 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003DD 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003DF 0000                <1> 	dw 0
   614 000003E1 00                  <1> 	db 0
   615 000003E2 9A                  <1> 	db 0x9A
   616 000003E3 8F                  <1> 	db 0x8F ;16 bit
   617 000003E4 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003E5 0001                <1> gdtdos2:	dw 256
   620 000003E7 0000                <1> 	dw 0
   621 000003E9 00                  <1> 	db 0
   622 000003EA 92                  <1> 	db 0x92
   623 000003EB 8F                  <1> 	db 0x8F ;16 bit
   624 000003EC 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003ED [0E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003F5 [1A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003FD [260D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 00000405 [320D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 0000040D [3E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 00000415 [4A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 0000041D [560D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 00000425 [620D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 0000042D [6E0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000435 [7A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000043D [860D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000445 [920D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000044D [9E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000455 [AA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000045D [B60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000465 [C20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000046D [CE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000475 [DA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000047D [E60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000485 [F20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000048D [FE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000495 [0A0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000049D [160E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 000004A5 [220E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 000004AD [2E0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 000004B5 [3A0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 000004BD [460E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 000004C5 [520E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 000004CD [5E0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004D5 [6A0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004DD [760E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004E5 [820E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004ED [7028]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004F5 [7428]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004FD [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 00000505 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 0000050D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 00000515 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 0000051D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000525 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 0000052D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000535 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000053D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000545 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000054D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000555 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000055D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000565 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 0000056D [011C]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000575 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000057D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000585 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000058D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000595 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000059D [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 000005A5 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 000005AD [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 000005B5 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 000005BD [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 000005C5 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005CD [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005D5 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005DD [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005E5 [7903]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005ED [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005F5 [7903]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005FD [7903]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 00000605 [7903]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 0000060D [7903]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784 00000615 [3E03]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 0000061D [7903]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 00000625 [7903]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 0000062D [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000635 [8003]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 0000063D [8003]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794 00000645 [2103]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 0000064D [8003]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000655 [8003]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 0000065D [8003]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000665 [8003]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 0000066D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000675 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000067D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000685 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000068D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000695 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000069D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 000006A5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 000006AD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 000006B5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 000006BD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 000006C5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 000006CD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006D5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006DD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006E5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006ED [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006F5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006FD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 00000705 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 0000070D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000715 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 0000071D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000725 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 0000072D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000735 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000073D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000745 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000074D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000755 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000075D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000765 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000076D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000775 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000077D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000785 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000078D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000795 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000079D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 000007A5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000007AD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 000007B5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 000007BD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 000007C5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 000007CD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007D5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007DD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007E5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007ED [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007F5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007FD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000805 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 0000080D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000815 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 0000081D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000825 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 0000082D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000835 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000083D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000845 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000084D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000855 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000085D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000865 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000086D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000875 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000087D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000885 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000088D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000895 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000089D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 000008A5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000008AD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 000008B5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 000008BD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 000008C5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 000008CD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008D5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008DD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008E5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008ED [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008F5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008FD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000905 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 0000090D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000915 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 0000091D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000925 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 0000092D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000935 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000093D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000945 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000094D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000955 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000095D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000965 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000096D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000975 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000097D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000985 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000098D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000995 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000099D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 000009A5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 000009AD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 000009B5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 000009BD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 000009C5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 000009CD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009D5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009DD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009E5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009ED [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009F5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009FD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000A05 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000A0D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000A15 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000A1D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000A25 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000A2D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A35 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A3D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A45 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A4D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A55 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A5D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A65 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A6D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A75 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A7D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A85 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A8D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A95 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A9D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000AA5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000AAD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000AB5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000ABD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000AC5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000ACD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AD5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000ADD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AE5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000AED [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AF5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AFD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000B05 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000B0D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000B15 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000B1D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000B25 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000B2D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B35 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B3D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B45 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B4D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B55 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B5D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B65 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B6D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B75 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B7D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B85 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B8D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B95 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B9D [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000BA5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000BAD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000BB5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000BBD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000BC5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000BCD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BD5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BDD [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BE5 [7903]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BED FA                  <1> 	cli
  1343 00000BEE A3[000D0000]        <1> 	mov [realmodeeax], eax
  1344 00000BF3 891D[FC0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BF9 8925[EE0C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BFF BB[F80C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000C04 8B03                <1> 	mov eax, [ebx]
  1350 00000C06 658903              <1> 	mov [gs:ebx], eax
  1351 00000C09 81C304000000        <1> 	add ebx, 4
  1352 00000C0F 81FB[080D0000]      <1> 	cmp ebx, realmodeptr
  1353 00000C15 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000C17 EA[1E0C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000C1E B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000C21 8ED8                <1> 	mov ds, ax
  1361 00000C23 8EC0                <1> 	mov es, ax
  1362 00000C25 8EE0                <1> 	mov fs, ax
  1363 00000C27 8EE8                <1> 	mov gs, ax
  1364 00000C29 8ED0                <1> 	mov ss, ax
  1365 00000C2B 66BC[3EB10000]      <1> 	mov esp, stackend
  1366 00000C31 0F20C0              <1> 	mov eax, cr0
  1367 00000C34 66A3[F80C]          <1> 	mov [cr0old], eax
  1368 00000C38 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C3E 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C41 EA[460C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C46 8CC8                <1> 	mov ax, cs
  1374 00000C48 8ED8                <1> 	mov ds, ax
  1375 00000C4A 8EC0                <1> 	mov es, ax
  1376 00000C4C 8EE0                <1> 	mov fs, ax
  1377 00000C4E 8EE8                <1> 	mov gs, ax
  1378 00000C50 8ED0                <1> 	mov ss, ax
  1379 00000C52 BC[3EB1]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C55 B011                <1> 	mov al, 0x11
  1382 00000C57 E620                <1> 	out 0x20, al
  1383 00000C59 E6A0                <1> 	out 0xA0, al
  1384 00000C5B B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C5D E621                <1> 	out 0x21, al
  1386 00000C5F B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C61 E6A1                <1> 	out 0xA1, al
  1388 00000C63 B004                <1> 	mov al, 4
  1389 00000C65 E621                <1> 	out 0x21, al
  1390 00000C67 B002                <1> 	mov al, 2
  1391 00000C69 E6A1                <1> 	out 0xA1, al
  1392 00000C6B B001                <1> 	mov al, 0x1
  1393 00000C6D E621                <1> 	out 0x21, al
  1394 00000C6F B001                <1> 	mov al, 0x1
  1395 00000C71 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C73 0F011E[F20C]        <1> 	lidt [idt_real]
  1398 00000C78 FB                  <1> 	sti
  1399                              <1> 
  1400 00000C79 66A1[000D]          <1> 	mov eax, [realmodeeax]
  1401 00000C7D 668B1E[FC0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C82 FF16[080D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C86 66A3[000D]          <1> 	mov [realmodeeax], eax
  1406 00000C8A 66891E[FC0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C8F FA                  <1> 	cli
  1409 00000C90 0F0116[8903]        <1> 	lgdt [gdtr]
  1410 00000C95 0F011E[8F03]        <1> 	lidt [idtr]
  1411 00000C9A 0F20C0              <1> 	mov eax, cr0
  1412 00000C9D 0C01                <1> 	or al, 1
  1413 00000C9F 0F22C0              <1> 	mov cr0,eax
  1414 00000CA2 EA[A70C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000CA7 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000CAB 8ED8                <1> 	mov ds, ax
  1420 00000CAD 8EC0                <1> 	mov es, ax
  1421 00000CAF 8EE0                <1> 	mov fs, ax
  1422 00000CB1 8ED0                <1> 	mov ss, ax
  1423 00000CB3 8B25[EE0C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000CB9 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000CBD 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000CBF BB[F80C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000CC4 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000CC7 8903                <1> 	mov [ebx], eax
  1431 00000CC9 81C304000000        <1> 	add ebx, 4
  1432 00000CCF 81FB[080D0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CD5 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CD7 E872540000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CDC FB                  <1> 	sti
  1437 00000CDD A1[000D0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CE2 8B1D[FC0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CE8 FF25[040D0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CEE 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CF2 FF03                <1> 	dw 0x3FF
  1444 00000CF4 00000000            <1> 	dd 0
  1445 00000CF8 00000000            <1> cr0old dd 0
  1446 00000CFC 00000000            <1> realmodeebx dd 0
  1447 00000D00 00000000            <1> realmodeeax dd 0
  1448 00000D04 00000000            <1> realmodereturn dd 0
  1449 00000D08 0000                <1> realmodeptr dw 0
  1450 00000D0A 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000D0E C605[C0110000]00    <2>  mov byte [intprob], i
  1462 00000D15 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000D1A C605[C0110000]01    <2>  mov byte [intprob], i
  1465 00000D21 E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000D26 C605[C0110000]02    <2>  mov byte [intprob], i
  1468 00000D2D E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D32 C605[C0110000]03    <2>  mov byte [intprob], i
  1471 00000D39 E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D3E C605[C0110000]04    <2>  mov byte [intprob], i
  1474 00000D45 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D4A C605[C0110000]05    <2>  mov byte [intprob], i
  1477 00000D51 E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D56 C605[C0110000]06    <2>  mov byte [intprob], i
  1480 00000D5D E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D62 C605[C0110000]07    <2>  mov byte [intprob], i
  1483 00000D69 E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D6E C605[C0110000]08    <2>  mov byte [intprob], i
  1486 00000D75 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D7A C605[C0110000]09    <2>  mov byte [intprob], i
  1489 00000D81 E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D86 C605[C0110000]0A    <2>  mov byte [intprob], i
  1492 00000D8D E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D92 C605[C0110000]0B    <2>  mov byte [intprob], i
  1495 00000D99 E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D9E C605[C0110000]0C    <2>  mov byte [intprob], i
  1498 00000DA5 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000DAA C605[C0110000]0D    <2>  mov byte [intprob], i
  1501 00000DB1 E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000DB6 C605[C0110000]0E    <2>  mov byte [intprob], i
  1504 00000DBD E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000DC2 C605[C0110000]0F    <2>  mov byte [intprob], i
  1507 00000DC9 E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000DCE C605[C0110000]10    <2>  mov byte [intprob], i
  1510 00000DD5 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DDA C605[C0110000]11    <2>  mov byte [intprob], i
  1513 00000DE1 E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DE6 C605[C0110000]12    <2>  mov byte [intprob], i
  1516 00000DED E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DF2 C605[C0110000]13    <2>  mov byte [intprob], i
  1519 00000DF9 E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DFE C605[C0110000]14    <2>  mov byte [intprob], i
  1522 00000E05 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000E0A C605[C0110000]15    <2>  mov byte [intprob], i
  1525 00000E11 E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000E16 C605[C0110000]16    <2>  mov byte [intprob], i
  1528 00000E1D E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000E22 C605[C0110000]17    <2>  mov byte [intprob], i
  1531 00000E29 E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000E2E C605[C0110000]18    <2>  mov byte [intprob], i
  1534 00000E35 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E3A C605[C0110000]19    <2>  mov byte [intprob], i
  1537 00000E41 E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E46 C605[C0110000]1A    <2>  mov byte [intprob], i
  1540 00000E4D E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E52 C605[C0110000]1B    <2>  mov byte [intprob], i
  1543 00000E59 E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E5E C605[C0110000]1C    <2>  mov byte [intprob], i
  1546 00000E65 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E6A C605[C0110000]1D    <2>  mov byte [intprob], i
  1549 00000E71 E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E76 C605[C0110000]1E    <2>  mov byte [intprob], i
  1552 00000E7D E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E82 C605[C0110000]1F    <2>  mov byte [intprob], i
  1555 00000E89 E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E8E FA                  <1> 	cli
  1559 00000E8F 1E                  <1> 	push ds
  1560 00000E90 06                  <1> 	push es
  1561 00000E91 0FA0                <1> 	push fs
  1562 00000E93 0FA8                <1> 	push gs
  1563 00000E95 16                  <1> 	push ss
  1564 00000E96 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E97 803D[589F0000]00    <1> 	cmp byte [guion], 0
  1567 00000E9E 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000EA4 66C705[BA110000]08- <1> 	mov word [locunhandy], 8
  1569 00000EAC 00                  <1>
  1570 00000EAD 66C705[BC110000]08- <1> 	mov word [locunhandx], 8
  1571 00000EB5 00                  <1>
  1572 00000EB6 668B1D[DB6D0000]    <1> 	mov bx, [background]
  1573 00000EBD 66891D[BE110000]    <1> 	mov [backgroundcache], bx
  1574 00000EC4 C605[FD570000]01    <1> 	mov byte [mousedisabled],1
  1575 00000ECB 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000ECF 66891D[DB6D0000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000ED6 89E6                <1> 	mov esi, esp
  1580 00000ED8 8935[AE110000]      <1> 	mov [espfirst], esi
  1581 00000EDE 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EE4 8935[AA110000]      <1> 	mov [esploc], esi
  1583 00000EEA BE[CF110000]        <1> 	mov esi, unhandmsg
  1584 00000EEF 8935[B2110000]      <1> 	mov [esiloc], esi
  1585 00000EF5 31C9                <1> 	xor ecx, ecx
  1586 00000EF7 8A0D[C0110000]      <1> 	mov cl, [intprob]
  1587 00000EFD BB[9E150000]        <1> 	mov ebx, errortypes
  1588 00000F02 C1E102              <1> 	shl ecx, 2
  1589 00000F05 01CB                <1> 	add ebx, ecx
  1590 00000F07 81FB[DE150000]      <1> 	cmp ebx, errortypesend
  1591 00000F0D 7205                <1> 	jb gooderrortype
  1592 00000F0F BB[DE150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000F14 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000F16 803D[589F0000]00    <1> 	cmp byte [guion], 0
  1597 00000F1D 0F842D000000        <1> 	je near errortext
  1598 00000F23 668B0D[BA110000]    <1> 	mov cx, [locunhandy]
  1599 00000F2A 668B15[BC110000]    <1> 	mov dx, [locunhandx]
  1600 00000F31 66B80100            <1> 	mov ax, 1
  1601 00000F35 6631DB              <1> 	xor bx, bx
  1602 00000F38 E8F3640000          <1> 	call showstring2
  1603 00000F3D 66890D[BA110000]    <1> 	mov [locunhandy], cx
  1604 00000F44 668915[BC110000]    <1> 	mov [locunhandx], dx
  1605 00000F4B E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F50 E8080E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F55 31C9                <1> 	xor ecx, ecx
  1611 00000F57 8A0D[C0110000]      <1> 	mov cl, [intprob]
  1612 00000F5D E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F62 8B35[AA110000]      <1> 	mov esi, [esploc]
  1615 00000F68 39E6                <1> 	cmp esi, esp
  1616 00000F6A 7216                <1> 	jb donedump
  1617 00000F6C 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F6F 81EE04000000        <1> 	sub esi, 4
  1619 00000F75 8935[AA110000]      <1> 	mov [esploc], esi
  1620 00000F7B E8C3010000          <1> 	call expdump
  1621 00000F80 EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F82 0F20C1              <1> 	mov ecx, cr0
  1624 00000F85 E8B9010000          <1> 	call expdump
  1625 00000F8A 0F20D1              <1> 	mov ecx, cr2
  1626 00000F8D E8B1010000          <1> 	call expdump
  1627 00000F92 0F20D9              <1> 	mov ecx, cr3
  1628 00000F95 E8A9010000          <1> 	call expdump
  1629 00000F9A 0F20E1              <1> 	mov ecx, cr4
  1630 00000F9D E8A1010000          <1> 	call expdump
  1631 00000FA2 0F00C9              <1> 	str ecx
  1632 00000FA5 E899010000          <1> 	call expdump
  1633 00000FAA 0F010D[C9110000]    <1> 	sidt [igdtcache]
  1634 00000FB1 8B0D[CB110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000FB7 E887010000          <1> 	call expdump
  1636 00000FBC 0F0105[C9110000]    <1> 	sgdt [igdtcache]
  1637 00000FC3 8B0D[CB110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000FC9 E875010000          <1> 	call expdump
  1639 00000FCE 0F00C1              <1> 	sldt ecx
  1640 00000FD1 E86D010000          <1> 	call expdump
  1641 00000FD6 8B35[AA110000]      <1> 	mov esi, [esploc]
  1642 00000FDC 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FE1 81C710000000        <1> 	add edi, 16
  1644 00000FE7 893D[C5110000]      <1> 	mov [codelocend], edi
  1645 00000FED 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FF3 893D[C1110000]      <1> 	mov [codeloc], edi
  1648 00000FF9 8B0F                <1> 	mov ecx, [edi]
  1649 00000FFB E843010000          <1> 	call expdump
  1650 00001000 8B3D[C1110000]      <1> 	mov edi, [codeloc]
  1651 00001006 81C704000000        <1> 	add edi, 4
  1652 0000100C 3B3D[C5110000]      <1> 	cmp edi, [codelocend]
  1653 00001012 72DF                <1> 	jb dumpcodeloop
  1654 00001014 BE[D4100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00001019 803D[589F0000]00    <1> 	cmp byte [guion], 0
  1657 00001020 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 00001022 668B15[BC110000]    <1> 	mov dx, [locunhandx]
  1660 00001029 668B0D[BA110000]    <1> 	mov cx, [locunhandy]
  1661 00001030 66B80100            <1> 	mov ax, 1
  1662 00001034 6631DB              <1> 	xor bx, bx
  1663 00001037 E8F4630000          <1> 	call showstring2
  1664 0000103C E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 00001041 E8170D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001046 30C0                <1> 	xor al, al
  1670 00001048 E8E0110000          <1> 	call rdcharint
  1671 0000104D 803D[C0110000]03    <1> 	cmp byte [intprob], 3
  1672 00001054 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001056 803D[589F0000]00    <1> 	cmp byte [guion], 0
  1675 0000105D 7427                <1> 	je nodebuggui
  1676 0000105F 668B1D[BE110000]    <1> 	mov bx, [backgroundcache]
  1677 00001066 66891D[DB6D0000]    <1> 	mov [background], bx
  1678 0000106D 6631DB              <1> 	xor bx, bx
  1679 00001070 C605[FD570000]00    <1> 	mov byte [mousedisabled], 0
  1680 00001077 E8135D0000          <1> 	call guiclear
  1681 0000107C E85E5D0000          <1> 	call reloadallgraphics
  1682 00001081 E8CC160000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001086 8B35[AE110000]      <1> 	mov esi, [espfirst]
  1686 0000108C 89F4                <1> 	mov esp, esi
  1687 0000108E 61                  <1> 	popad
  1688 0000108F 17                  <1> 	pop ss
  1689 00001090 0FA9                <1> 	pop gs
  1690 00001092 0FA1                <1> 	pop fs
  1691 00001094 07                  <1> 	pop es
  1692 00001095 1F                  <1> 	pop ds
  1693 00001096 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 00001097 61                  <1> 	popad
  1696 00001098 17                  <1> 	pop ss
  1697 00001099 0FA9                <1> 	pop gs
  1698 0000109B 0FA1                <1> 	pop fs
  1699 0000109D 07                  <1> 	pop es
  1700 0000109E 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 0000109F 803D[589F0000]00    <1> 	cmp byte [guion], 0
  1703 000010A6 7427                <1> 	je returnunhandgui
  1704 000010A8 668B1D[BE110000]    <1> 	mov bx, [backgroundcache]
  1705 000010AF 66891D[DB6D0000]    <1> 	mov [background], bx
  1706 000010B6 6631DB              <1> 	xor bx, bx
  1707 000010B9 C605[FD570000]00    <1> 	mov byte [mousedisabled], 0
  1708 000010C0 E8CA5C0000          <1> 	call guiclear
  1709 000010C5 E8155D0000          <1> 	call reloadallgraphics
  1710 000010CA E883160000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 000010CF E9991A0000          <1> 	jmp nwcmd
  1714 000010D4 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010DD 737420616E79207072- <1>
  1716 000010E6 6F626C656D7320696E- <1>
  1717 000010EF 207468652049737375- <1>
  1718 000010F8 65732073656374696F- <1>
  1719 00001101 6E20617420736F6C6C- <1>
  1720 0000110A 65726F732E676F6F67- <1>
  1721 00001113 6C65636F64652E636F- <1>
  1722 0000111C 6D0A                <1>
  1723 0000111E 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 00001127 206B657920746F2072- <1>
  1725 00001130 657475726E20746F20- <1>
  1726 00001139 536F6C6C65724F530A- <1>
  1727 00001142 00                  <1>
  1728                              <1> expdump:
  1729 00001143 8B35[B2110000]      <1> 	mov esi, [esiloc]
  1730 00001149 89F7                <1> 	mov edi, esi
  1731 0000114B 81C70F000000        <1> 	add edi, 15
  1732 00001151 81C604000000        <1> 	add esi, 4
  1733 00001157 893D[B2110000]      <1> 	mov [esiloc], edi
  1734 0000115D 81EF03000000        <1> 	sub edi, 3
  1735 00001163 E86C1E0000          <1> 	call converthex
  1736 00001168 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 0000116E 803D[589F0000]00    <1> 	cmp byte [guion], 0
  1739 00001175 0F8429000000        <1> 	je near expdumptext
  1740 0000117B 668B0D[BA110000]    <1> 	mov cx, [locunhandy]
  1741 00001182 668B15[BC110000]    <1> 	mov dx, [locunhandx]
  1742 00001189 66B80100            <1> 	mov ax, 1
  1743 0000118D 6631DB              <1> 	xor bx, bx
  1744 00001190 E89B620000          <1> 	call showstring2
  1745 00001195 66890D[BA110000]    <1> 	mov [locunhandy], cx
  1746 0000119C 668915[BC110000]    <1> 	mov [locunhandx], dx
  1747 000011A3 C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 000011A4 E8B40B0000          <1> 	call print
  1751 000011A9 C3                  <1> 	ret
  1752 000011AA 00000000            <1> esploc dd 0
  1753 000011AE 00000000            <1> espfirst dd 0
  1754 000011B2 00000000            <1> esiloc dd 0
  1755 000011B6 00000000            <1> esiregbuf dd 0
  1756 000011BA 0100                <1> locunhandy dw 1
  1757 000011BC 0100                <1> locunhandx dw 1
  1758 000011BE 0000                <1> backgroundcache dw 0
  1759 000011C0 00                  <1> intprob db 0
  1760 000011C1 00000000            <1> codeloc dd 0
  1761 000011C5 00000000            <1> codelocend dd 0
  1762 000011C9 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 000011CF 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011D8 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011DE FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011E7 303030202000<rept>  <1>
  1769 00001247 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 00001250 303030FF0A00        <1>
  1771 00001256 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 0000125F 303030202000<rept>  <1>
  1773 000012BF FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 000012C8 303030FF0A00        <1>
  1775 000012CE FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012D7 303030202000<rept>  <1>
  1777 00001337 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 00001340 303030FF0A00        <1>
  1779 00001346 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 0000134F 303030202000<rept>  <1>
  1781 000013AF FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 000013B8 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 000013BE 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 000013C7 303030202000        <1>
  1786 000013CD 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013D6 303030202000        <1>
  1788 000013DC 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013E5 303030FF0A00        <1>
  1790 000013EB 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013F4 303030202000        <1>
  1792 000013FA 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 00001403 303030202000        <1>
  1794 00001409 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 00001412 303030202000        <1>
  1796 00001418 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 00001421 303030202000        <1>
  1798 00001427 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 00001430 303030FF0A00        <1>
  1800 00001436 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 0000143F 303030202000        <1>
  1802 00001445 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 0000144E 303030202000        <1>
  1804 00001454 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 0000145D 303030202000        <1>
  1806 00001463 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 0000146C 303030FF0A00        <1>
  1808 00001472 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 0000147B 303030202000        <1>
  1810 00001481 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 0000148A 303030202000        <1>
  1812 00001490 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 00001499 303030202000        <1>
  1814 0000149F 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 000014A8 303030FF0A00        <1>
  1816 000014AE 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 000014B7 303030202000        <1>
  1818 000014BD 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 000014C6 303030202000        <1>
  1820 000014CC 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014D5 303030202000        <1>
  1822 000014DB 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014E4 303030FF0A00        <1>
  1824 000014EA 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014F3 303030202000        <1>
  1826 000014F9 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 00001502 303030202000        <1>
  1828 00001508 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 00001511 303030202000        <1>
  1830 00001517 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 00001520 303030FF0A00        <1>
  1832 00001526 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 0000152F 303030202000<rept>  <1>
  1834 00001544 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 0000154D 30303020FF00        <1>
  1836 00001553 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 0000155C 3030305D2000        <1>
  1838 00001562 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 0000156B 303030202000<rept>  <1>
  1840 0000158F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 00001598 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 0000159E [E2150000]          <1> 			dd err0
  1846 000015A2 [46160000]          <1> 			dd err1
  1847 000015A6 [A7160000]          <1> 			dd err2
  1848 000015AA [FC160000]          <1> 			dd err3
  1849 000015AE [60170000]          <1> 			dd err4
  1850 000015B2 [B2170000]          <1> 			dd err5
  1851 000015B6 [1C180000]          <1> 			dd err6
  1852 000015BA [84180000]          <1> 			dd err7
  1853 000015BE [CE180000]          <1> 			dd err8
  1854 000015C2 [2B190000]          <1> 			dd err9
  1855 000015C6 [84190000]          <1> 			dd err10
  1856 000015CA [CF190000]          <1> 			dd err11
  1857 000015CE [1F1A0000]          <1> 			dd err12
  1858 000015D2 [781A0000]          <1> 			dd err13
  1859 000015D6 [DB1A0000]          <1> 			dd err14
  1860 000015DA [171B0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015DE [A21B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015E2 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015EB 6279207A65726F3A0A  <1>
  1866 000015F4 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1867 000015FD 6C79206C696D2061F6- <1>
  1868 00001606 78203D20EC20776865- <1>
  1869 0000160F 6E206120697320616E- <1>
  1870 00001618 79207265616C206E75- <1>
  1871 00001621 6D6265722E20486170- <1>
  1872 0000162A 707920456173746572- <1>
  1873 00001633 210A                <1>
  1874 00001635 202020202020202020- <1> 		db "            x",26,"0",10,0
  1875 0000163E 202020781A300A00    <1>
  1876                              <1> 		
  1877 00001646 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1878 0000164F 65702F427265616B70- <1>
  1879 00001658 6F696E743A0A        <1>
  1880 0000165E 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1881 00001667 696E74206661756C74- <1>
  1882 00001670 2C20627265616B706F- <1>
  1883 00001679 696E7420747261702C- <1>
  1884 00001682 206F722073696E676C- <1>
  1885 0000168B 652D73746570207472- <1>
  1886 00001694 617020776173207472- <1>
  1887 0000169D 696767657265642E0A- <1>
  1888 000016A6 00                  <1>
  1889                              <1> 		
  1890 000016A7 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1891 000016B0 6C6520696E74657272- <1>
  1892 000016B9 7570743A0A          <1>
  1893 000016BE 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1894 000016C7 6520696E7465727275- <1>
  1895 000016D0 707420776173207472- <1>
  1896 000016D9 696767657265642074- <1>
  1897 000016E2 68617420636F756C64- <1>
  1898 000016EB 206E6F74206265206D- <1>
  1899 000016F4 61736B65642E0A00    <1>
  1900                              <1> 		
  1901 000016FC 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1902 00001705 743A0A              <1>
  1903 00001708 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1904 00001711 727275707420697320- <1>
  1905 0000171A 7573656420696E2070- <1>
  1906 00001723 726F6772616D732074- <1>
  1907 0000172C 6F2073686F77207468- <1>
  1908 00001735 6520737461636B2061- <1>
  1909 0000173E 6E6420726567697374- <1>
  1910 00001747 65727320616E642063- <1>
  1911 00001750 616E2062650A        <1>
  1912 00001756 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1913 0000175F 00                  <1>
  1914                              <1> 		
  1915 00001760 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1916 00001769 0A                  <1>
  1917 0000176A 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1918 00001773 73736F722072616E20- <1>
  1919 0000177C 696E746F20616E2049- <1>
  1920 00001785 4E544F20696E737472- <1>
  1921 0000178E 756374696F6E207769- <1>
  1922 00001797 746820746865206F76- <1>
  1923 000017A0 6572666C6F7720666C- <1>
  1924 000017A9 6167207365742E0A00  <1>
  1925                              <1> 		
  1926 000017B2 426F756E6473206368- <1> err5	db "Bounds check:",10
  1927 000017BB 65636B3A0A          <1>
  1928 000017C0 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1929 000017C9 73736F72207265626F- <1>
  1930 000017D2 756E6465642066726F- <1>
  1931 000017DB 6D206120424F554E44- <1>
  1932 000017E4 20696E737472756374- <1>
  1933 000017ED 696F6E2072756E206F- <1>
  1934 000017F6 6E20616E206F706572- <1>
  1935 000017FF 616E64207468617420- <1>
  1936 00001808 776173206F75740A    <1>
  1937 00001810 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1938 00001819 2E0A00              <1>
  1939                              <1> 		
  1940 0000181C 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1941 00001825 70636F64653A0A      <1>
  1942 0000182C 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1943 00001835 73736F722068617320- <1>
  1944 0000183E 6E6F20696465612077- <1>
  1945 00001847 686174206974207761- <1>
  1946 00001850 7320747279696E6720- <1>
  1947 00001859 746F20657865637574- <1>
  1948 00001862 652E20446F6E277420- <1>
  1949 0000186B 72756E205353453420- <1>
  1950 00001874 636F64650A          <1>
  1951 00001879 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1952 00001882 0A00                <1>
  1953                              <1> 		
  1954 00001884 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1955 0000188D 6F72206E6F74206176- <1>
  1956 00001896 61696C61626C653A0A  <1>
  1957 0000189F 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1958 000018A8 206B6E6F7720746865- <1>
  1959 000018B1 7920646F6E2774206D- <1>
  1960 000018BA 616B652074686F7365- <1>
  1961 000018C3 20616E796D6F726521- <1>
  1962 000018CC 0A00                <1>
  1963                              <1> 		
  1964 000018CE 446F75626C65206661- <1> err8	db "Double fault:",10
  1965 000018D7 756C743A0A          <1>
  1966 000018DC 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1967 000018E5 74696F6E2068616E64- <1>
  1968 000018EE 6C657220636F756C64- <1>
  1969 000018F7 206E6F742068616E64- <1>
  1970 00001900 6C6520746861742069- <1>
  1971 00001909 7420636F756C64206E- <1>
  1972 00001912 6F742068616E646C65- <1>
  1973 0000191B 20616E206578636570- <1>
  1974 00001924 74696F6E2E0A00      <1>
  1975                              <1> 		
  1976 0000192B 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1977 00001934 6F72207365676D656E- <1>
  1978 0000193D 74206F76657272756E- <1>
  1979 00001946 3A0A00              <1>
  1980 00001949 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1981 00001952 722068617070656E73- <1>
  1982 0000195B 20696E206D6F646572- <1>
  1983 00001964 6E20636F6D70757465- <1>
  1984 0000196D 72732C20616E64206E- <1>
  1985 00001976 657665722073686F75- <1>
  1986 0000197F 6C642E0A00          <1>
  1987                              <1> 
  1988 00001984 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1989 0000198D 53533A0A            <1>
  1990 00001991 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1991 0000199A 686174207761732073- <1>
  1992 000019A3 776974636865642074- <1>
  1993 000019AC 6F20697320696E7661- <1>
  1994 000019B5 6C69642E204E6F7468- <1>
  1995 000019BE 696E672066756E6E79- <1>
  1996 000019C7 20686572652E0A00    <1>
  1997                              <1> 		
  1998 000019CF 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1999 000019D8 6F742070726573656E- <1>
  2000 000019E1 743A0A              <1>
  2001 000019E4 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2002 000019ED 6E7420626974206F66- <1>
  2003 000019F6 20746865207365676D- <1>
  2004 000019FF 656E74206465736372- <1>
  2005 00001A08 6970746F7220697320- <1>
  2006 00001A11 73657420746F207A65- <1>
  2007 00001A1A 726F2E0A00          <1>
  2008                              <1> 		
  2009 00001A1F 537461636B20657863- <1> err12	db "Stack exception:",10
  2010 00001A28 657074696F6E3A0A    <1>
  2011 00001A30 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2012 00001A39 7363726970746F7220- <1>
  2013 00001A42 697320696E76616C69- <1>
  2014 00001A4B 64206F72206E6F7420- <1>
  2015 00001A54 70726573656E74206F- <1>
  2016 00001A5D 7220697473206C696D- <1>
  2017 00001A66 697420697320746F6F- <1>
  2018 00001A6F 20736D616C6C2E0A00  <1>
  2019                              <1> 		
  2020 00001A78 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2021 00001A81 726F74656374696F6E- <1>
  2022 00001A8A 2076696F6C6174696F- <1>
  2023 00001A93 6E3A0A              <1>
  2024 00001A96 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2025 00001A9F 746564207468652063- <1>
  2026 00001AA8 6F6D70757465722E20- <1>
  2027 00001AB1 537465702061776179- <1>
  2028 00001ABA 20736C6F776C792E20- <1>
  2029 00001AC3 546865204642492069- <1>
  2030 00001ACC 73206F6E2069747320- <1>
  2031 00001AD5 7761792E0A00        <1>
  2032                              <1> 		
  2033 00001ADB 50616765206661756C- <1> err14	db "Page fault:",10
  2034 00001AE4 743A0A              <1>
  2035 00001AE7 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2036 00001AF0 746861742077617320- <1>
  2037 00001AF9 726571756573746564- <1>
  2038 00001B02 20776173206E6F7420- <1>
  2039 00001B0B 617661696C61626C65- <1>
  2040 00001B14 2E0A00              <1>
  2041                              <1> 		
  2042 00001B17 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2043 00001B20 666F7220506C616E20- <1>
  2044 00001B29 523A0A              <1>
  2045 00001B2C 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2046 00001B35 727275707420697320- <1>
  2047 00001B3E 726573657276656420- <1>
  2048 00001B47 666F72207573616765- <1>
  2049 00001B50 206F6E6C7920627920- <1>
  2050 00001B59 746865206D696C6974- <1>
  2051 00001B62 617279207768656E20- <1>
  2052 00001B6B 6974206973206E6563- <1>
  2053 00001B74 6573736172790A      <1>
  2054 00001B7B 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2055 00001B84 746520612066756C6C- <1>
  2056 00001B8D 2D7363616C6520636F- <1>
  2057 00001B96 757020642782746174- <1>
  2058 00001B9F 2E0A00              <1>
  2059                              <1> 		
  2060 00001BA2 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2061 00001BAB 68656C6C206A757374- <1>
  2062 00001BB4 2068617070656E6564- <1>
  2063 00001BBD 3F2049732065766572- <1>
  2064 00001BC6 796F6E65206F6B6179- <1>
  2065 00001BCF 3F2048617264206472- <1>
  2066 00001BD8 6976653F2056696465- <1>
  2067 00001BE1 6F20636172643F0A    <1>
  2068 00001BE9 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2069 00001BF2 726520796F75207468- <1>
  2070 00001BFB 6572653F0A00        <1>
  2071                              <1> %else
  2072                              <1> unhand:	
  2073                              <1> 	%assign i 0
  2074                              <1> 	%rep 32
  2075                              <1> 	mov byte [intprob], i
  2076                              <1> 	jmp unhand2
  2077                              <1> 	%assign i i+1
  2078                              <1> 	%endrep
  2079                              <1> unhand2:
  2080                              <1> 	cmp byte [intprob], 3
  2081                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2082                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2083                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2084                              <1> 	mov bl, [intprob]
  2085                              <1> 	jmp exitprog
  2086                              <1> intprob db 0
  2087                              <1> %endif
  2088                                      %include "source/ints.asm"
  2089                              <1> newints:	;for great justice
  2090 00001C01 80FC00              <1> 	cmp ah, 0
  2091 00001C04 0F84A3000000        <1> 	je near exitprog   ;kills app
  2092 00001C0A 80FC01              <1> 	cmp ah, 1
  2093 00001C0D 0F8422010000        <1> 	je near prntstr  ;print string
  2094 00001C13 80FC02              <1> 	cmp ah, 2
  2095 00001C16 0F8474010000        <1> 	je near readstr	;read string
  2096 00001C1C 80FC03              <1> 	cmp ah, 3
  2097 00001C1F 0F8494010000        <1> 	je near clearscrn	;clear screen
  2098 00001C25 80FC04              <1> 	cmp ah, 4
  2099 00001C28 0F8406020000        <1> 	je near prntreadstr	;read and print string
  2100 00001C2E 80FC05              <1> 	cmp ah, 5
  2101 00001C31 0F84EA050000        <1> 	je near readchar	;get char
  2102 00001C37 80FC06              <1> 	cmp ah, 6
  2103 00001C3A 0F843C060000        <1> 	je near prntchar	;print char
  2104 00001C40 80FC07              <1> 	cmp ah, 7
  2105 00001C43 0F8434080000        <1> 	je near openfile	;read file
  2106                              <1> ;	cmp ah, 8
  2107                              <1> ;	je near closefile	;close file
  2108 00001C49 80FC09              <1> 	cmp ah, 9
  2109 00001C4C 0F8435080000        <1> 	je near num2str	;convert number to string
  2110 00001C52 80FC0A              <1> 	cmp ah, 10
  2111 00001C55 0F8444080000        <1> 	je near str2num	;convert string to number
  2112                              <1> %ifdef threads.included
  2113 00001C5B 80FC0B              <1> 	cmp ah, 11
  2114 00001C5E 0F8447080000        <1> 	je near forkthread	;create thread
  2115                              <1> %endif
  2116 00001C64 80FC0C              <1> 	cmp ah, 12
  2117 00001C67 0F8415090000        <1> 	je near gettime	;get time
  2118 00001C6D 80FC0D              <1> 	cmp ah, 13
  2119 00001C70 0F8421090000        <1> 	je near settime	;set time
  2120 00001C76 80FC0E              <1> 	cmp ah, 14
  2121 00001C79 0F8428090000        <1> 	je near runcmd	;run program
  2122 00001C7F 80FC0F              <1> 	cmp ah, 15
  2123 00001C82 0F8434090000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2124 00001C88 80FC10              <1> 	cmp ah, 16
  2125 00001C8B 0F8456090000        <1> 	je near hooksig	;hook code to a signal
  2126                              <1> %ifdef gui.included
  2127 00001C91 80FC11              <1> 	cmp ah, 17
  2128 00001C94 0F845D090000        <1> 	je near guiint	;GUI operations
  2129                              <1> %endif
  2130                              <1> %ifdef sound.included
  2131 00001C9A 80FC12              <1> 	cmp ah, 18
  2132 00001C9D 0F84A50A0000        <1> 	je near soundint	;sound operations
  2133                              <1> %endif
  2134                              <1> %ifdef network.included
  2135 00001CA3 80FC13              <1> 	cmp ah, 19
  2136 00001CA6 0F84A10A0000        <1> 	je near netint	;networking operations
  2137                              <1> %endif
  2138 00001CAC CF                  <1> 	iret
  2139                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2140                              <2> exitprog:
  2141 00001CAD 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2142 00001CB1 8ED8                <2> 	mov ds, ax
  2143 00001CB3 8EC0                <2> 	mov es, ax
  2144 00001CB5 8EE0                <2> 	mov fs, ax
  2145 00001CB7 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2146 00001CBB 8EE8                <2> 	mov gs, ax
  2147 00001CBD C705[F6660000]0000- <2> 	mov dword [currentthread], 0
  2148 00001CC5 0000                <2>
  2149 00001CC7 C705[F1660000]0400- <2> 	mov dword [lastthread], 4
  2150 00001CCF 0000                <2>
  2151 00001CD1 C605[F5660000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2152 00001CD8 8B25[A2B50000]      <2> 	mov esp, [previousstack] ;and this
  2153 00001CDE 81FB00000000        <2> 	cmp ebx, 0
  2154 00001CE4 0F8501000000        <2> 	jne near .error
  2155 00001CEA C3                  <2> 	ret
  2156                              <2> .error:
  2157 00001CEB 89D9                <2> 	mov ecx, ebx
  2158 00001CED B006                <2> 	mov al, 6
  2159 00001CEF A2[32300000]        <2> 	mov [firsthexshown], al
  2160 00001CF4 51                  <2> 	push ecx
  2161 00001CF5 BE[101D0000]        <2> 	mov esi, .msg1
  2162 00001CFA E840000000          <2> 	call printhighlight
  2163 00001CFF 59                  <2> 	pop ecx
  2164 00001D00 E842130000          <2> 	call showhex
  2165 00001D05 BE[251D0000]        <2> 	mov esi, .msg2
  2166 00001D0A E830000000          <2> 	call printhighlight
  2167 00001D0F C3                  <2> 	ret
  2168                              <2> 	
  2169 00001D10 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2170 00001D19 7461747573206F6620- <2>
  2171 00001D22 307800              <2>
  2172 00001D25 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2173 00001D2E 726E65642E0A00      <2>
  2174                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2175                              <2> prntstr:
  2176 00001D35 E82A000000          <2> call printint
  2177 00001D3A E969E5FFFF          <2> jmp timerinterrupt
  2178                              <2> 
  2179                              <2> 	printhighlight:
  2180 00001D3F 6631C0              <2> 		xor ax, ax
  2181 00001D42 66BBF000            <2> 		mov bx, 0xF0
  2182 00001D46 E919000000          <2> 		jmp printint
  2183                              <2> 	printquiet:
  2184 00001D4B 6631C0              <2> 		xor ax, ax
  2185 00001D4E A2[8F1D0000]        <2> 		mov [endkeyprint], al
  2186 00001D53 66BB0700            <2> 		mov bx, 7
  2187 00001D57 E820000000          <2> 		call printint.b
  2188 00001D5C C3                  <2> 		ret
  2189                              <2>     print:
  2190 00001D5D 6631C0              <2> 		xor ax, ax
  2191 00001D60 66BB0700            <2> 		mov bx, 7
  2192                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2193 00001D64 56                  <2> 		push esi
  2194 00001D65 A2[8F1D0000]        <2> 		mov [endkeyprint], al
  2195 00001D6A E80D000000          <2> 		call .b
  2196 00001D6F 89F1                <2> 		mov ecx, esi
  2197 00001D71 5F                  <2> 		pop edi
  2198 00001D72 29F9                <2> 		sub ecx, edi
  2199 00001D74 51                  <2> 		push ecx
  2200 00001D75 E8D8090000          <2> 		call termcopy
  2201 00001D7A 59                  <2> 		pop ecx
  2202 00001D7B C3                  <2> 		ret
  2203                              <2> 	.b:
  2204 00001D7C 8A06                <2> 		mov al, [esi]
  2205 00001D7E 3A05[8F1D0000]      <2> 		cmp al, [endkeyprint]
  2206 00001D84 7408                <2> 		je .done
  2207 00001D86 E816050000          <2> 		call prcharq
  2208 00001D8B 46                  <2> 		inc esi
  2209 00001D8C EBEE                <2> 		jmp .b
  2210                              <2> 	.done:
  2211 00001D8E C3                  <2> 		ret
  2212                              <2> 
  2213 00001D8F 00                  <2> endkeyprint db 0
  2214                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2215                              <2> readstr:
  2216 00001D90 E805000000          <2> call readint
  2217 00001D95 E90EE5FFFF          <2> jmp timerinterrupt
  2218                              <2> 
  2219                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2220 00001D9A 89C3                <2> 		mov ebx, eax
  2221                              <2> 	.b:
  2222 00001D9C 53                  <2> 		push ebx
  2223 00001D9D 57                  <2> 		push edi
  2224 00001D9E 56                  <2> 		push esi
  2225 00001D9F 30C0                <2> 		xor al, al
  2226 00001DA1 E887040000          <2> 		call rdcharint
  2227 00001DA6 5E                  <2> 		pop esi
  2228 00001DA7 8806                <2> 		mov [esi], al
  2229 00001DA9 46                  <2> 		inc esi
  2230 00001DAA 5F                  <2> 		pop edi
  2231 00001DAB 5B                  <2> 		pop ebx
  2232 00001DAC 39FE                <2> 		cmp esi, edi
  2233 00001DAE 7304                <2> 		jae .done
  2234 00001DB0 38D8                <2> 		cmp al, bl
  2235 00001DB2 75E8                <2> 		jne .b
  2236                              <2> 	.done:
  2237 00001DB4 4E                  <2> 		dec esi
  2238 00001DB5 C60600              <2> 		mov byte [esi], 0
  2239 00001DB8 C3                  <2> 		ret
  2240                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2241                              <2> clearscrn:
  2242 00001DB9 E805000000          <2> call clear
  2243 00001DBE E9E5E4FFFF          <2> jmp timerinterrupt
  2244                              <2> %ifdef io.serial
  2245                              <2> clear:
  2246                              <2> 	ret
  2247                              <2> %else
  2248                              <2> clear:		
  2249 00001DC3 668B0D[79240000]    <2> 		mov cx, [charxy]
  2250 00001DCA BF[38D30000]        <2> 		mov edi, videobuf
  2251 00001DCF 31C0                <2> 		xor eax, eax
  2252 00001DD1 A3[6F240000]        <2> 		mov [linebeginpos], eax
  2253 00001DD6 A3[73240000]        <2> 		mov [videobufpos], eax
  2254 00001DDB 6631D2              <2> 		xor dx, dx
  2255 00001DDE 66A3[77240000]      <2> 		mov [charpos], ax
  2256 00001DE4 B407                <2> 		mov ah, 7
  2257                              <2> 	clearb:
  2258 00001DE6 668907              <2> 		mov [edi], ax
  2259 00001DE9 81C702000000        <2> 		add edi, 2
  2260 00001DEF FEC9                <2> 		dec cl
  2261 00001DF1 80F900              <2> 		cmp cl, 0
  2262 00001DF4 75F0                <2> 		jne clearb
  2263 00001DF6 8A0D[79240000]      <2> 		mov cl, [charxy]
  2264 00001DFC FECD                <2> 		dec ch
  2265 00001DFE 80FD00              <2> 		cmp ch, 0
  2266 00001E01 75E3                <2> 		jne clearb
  2267                              <2> 	cleardouble:
  2268 00001E03 BF[DC3D0100]        <2> 		mov edi, videobuf2
  2269 00001E08 668B0D[79240000]    <2> 		mov cx, [charxy]
  2270 00001E0F 31C0                <2> 		xor eax, eax
  2271                              <2> 	clearc:
  2272 00001E11 668907              <2> 		mov [edi], ax
  2273 00001E14 81C702000000        <2> 		add edi, 2
  2274 00001E1A FEC9                <2> 		dec cl
  2275 00001E1C 80F900              <2> 		cmp cl, 0
  2276 00001E1F 75F0                <2> 		jne clearc
  2277 00001E21 8A0D[79240000]      <2> 		mov cl, [charxy]
  2278 00001E27 FECD                <2> 		dec ch
  2279 00001E29 80FD00              <2> 		cmp ch, 0
  2280 00001E2C 75E3                <2> 		jne clearc
  2281 00001E2E E81F090000          <2> 		call termcopy
  2282 00001E33 C3                  <2> 		ret
  2283                              <2> %endif
  2284                              <2> 		
  2285                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2286                              <2> prntreadstr:
  2287 00001E34 E809000000          <2> call rdprint
  2288 00001E39 E96AE4FFFF          <2> jmp timerinterrupt
  2289                              <2> 
  2290                              <2> readline:
  2291 00001E3E B00A                <2>   mov al, 10
  2292 00001E40 B307                <2>   mov bl, 7
  2293                              <2> rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2294 00001E42 E80D000000          <2> 	call rdprintdos
  2295 00001E47 50                  <2> 	push eax
  2296 00001E48 A0[0E220000]        <2> 	mov al, [endkeyrdpr]
  2297 00001E4D E83E040000          <2> 	call prcharint
  2298 00001E52 58                  <2> 	pop eax
  2299 00001E53 C3                  <2> 	ret
  2300                              <2> 
  2301                              <2> 	rdprintdos:
  2302 00001E54 8935[16220000]      <2> 		mov [buftxtloc], esi
  2303 00001E5A A2[0E220000]        <2> 		mov [endkeyrdpr], al
  2304 00001E5F 881D[0F220000]      <2> 		mov [modkeyrdpr], bl
  2305 00001E65 8935[10220000]      <2> 		mov [firstesirdpr], esi
  2306 00001E6B 893D[1A220000]      <2> 		mov [endbufferrdpr], edi
  2307 00001E71 8B3D[8CA80100]      <2> 		mov edi, [commandsentered]
  2308 00001E77 893D[88A80100]      <2> 		mov [commandlistentries], edi
  2309                              <2> 	rdprintb:
  2310 00001E7D 56                  <2> 		push esi
  2311 00001E7E B001                <2> 		mov al, 1
  2312 00001E80 E8A8030000          <2> 		call rdcharint
  2313 00001E85 5E                  <2> 		pop esi
  2314                              <2> %ifdef io.serial
  2315                              <2> 		cmp ah, 0x41
  2316                              <2> 		je near rdprup
  2317                              <2> 		cmp ah, 0x42
  2318                              <2> 		je near rdprdown
  2319                              <2> 		cmp ah, 0x43
  2320                              <2> 		je near rdprright
  2321                              <2> 		cmp ah, 0x44
  2322                              <2> 		je near rdprleft
  2323                              <2> 		cmp ah, 0x31
  2324                              <2> 		je near rdprhome
  2325                              <2> 		cmp ah, 0x48
  2326                              <2> 		je near rdprhome
  2327                              <2> 		cmp ah, 0x46
  2328                              <2> 		je near rdprend
  2329                              <2> 		cmp ah, 0x33
  2330                              <2> 		je near rdprdel
  2331                              <2> 		cmp ah, 0x34
  2332                              <2> 		je near rdprend
  2333                              <2> %else
  2334 00001E86 803D[EC5D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2335 00001E8D 751B                <2> 		jne notspecialrdprnt
  2336 00001E8F 80FC53              <2> 		cmp ah, 0x53
  2337 00001E92 0F841E030000        <2> 		je near rdprdel
  2338 00001E98 80FC47              <2> 		cmp ah, 0x47
  2339 00001E9B 0F8407010000        <2> 		je near rdprhome
  2340 00001EA1 80FC4F              <2> 		cmp ah, 0x4F
  2341 00001EA4 0F841D010000        <2> 		je near rdprend
  2342                              <2> 	notspecialrdprnt:
  2343 00001EAA 80FC50              <2> 		cmp ah, 0x50
  2344 00001EAD 0F849B010000        <2> 		je near rdprdown
  2345 00001EB3 80FC4D              <2> 		cmp ah, 0x4D
  2346 00001EB6 0F844A010000        <2> 		je near rdprright
  2347 00001EBC 80FC4B              <2> 		cmp ah, 0x4B
  2348 00001EBF 0F841F010000        <2> 		je near rdprleft
  2349 00001EC5 80FC48              <2> 		cmp ah, 0x48
  2350 00001EC8 0F84C3010000        <2> 		je near rdprup
  2351                              <2> %endif
  2352 00001ECE 3C08                <2> 		cmp al, 8
  2353 00001ED0 0F84FB020000        <2> 		je near rdprbscheck
  2354 00001ED6 3C00                <2> 		cmp al, 0
  2355 00001ED8 74A3                <2> 		je rdprintb
  2356 00001EDA 80FC00              <2> 		cmp ah, 0
  2357 00001EDD 749E                <2> 		je rdprintb
  2358 00001EDF 8806                <2> 		mov [esi], al
  2359 00001EE1 46                  <2> 		inc esi
  2360                              <2> 	bscheckequal:
  2361 00001EE2 8A1D[0F220000]      <2> 		mov bl, [modkeyrdpr]
  2362 00001EE8 8A3D[15220000]      <2> 		mov bh, [txtmask]
  2363 00001EEE 80FF00              <2> 		cmp bh, 0
  2364 00001EF1 7404                <2> 		je nomasktxt
  2365 00001EF3 88F8                <2> 		mov al, bh
  2366 00001EF5 30FF                <2> 		xor bh, bh
  2367                              <2> 	nomasktxt:
  2368 00001EF7 56                  <2> 		push esi
  2369 00001EF8 66A3[0C220000]      <2> 		mov [axcache], ax
  2370 00001EFE 8A25[0E220000]      <2> 		mov ah, [endkeyrdpr]
  2371 00001F04 38E0                <2> 		cmp al, ah
  2372 00001F06 742E                <2> 		je nobackprintbuftxt2
  2373 00001F08 E883030000          <2> 		call prcharint
  2374 00001F0D BE[22C80000]        <2> 		mov esi, buftxt2
  2375 00001F12 E834FEFFFF          <2> 		call printquiet
  2376 00001F17 B020                <2> 		mov al, " "
  2377 00001F19 E883030000          <2> 		call prcharq
  2378 00001F1E B008                <2> 		mov al, 8
  2379 00001F20 81FE[22C80000]      <2> 		cmp esi, buftxt2
  2380 00001F26 740E                <2> 		je nobackprintbuftxt2
  2381                              <2> 	backprintbuftxt2:
  2382 00001F28 E874030000          <2> 		call prcharq
  2383 00001F2D 4E                  <2> 		dec esi
  2384 00001F2E 81FE[22C80000]      <2> 		cmp esi, buftxt2
  2385 00001F34 77F2                <2> 		ja backprintbuftxt2
  2386                              <2> 	nobackprintbuftxt2:
  2387 00001F36 3C0A                <2> 		cmp al, 10
  2388 00001F38 7405                <2> 		je nonobackprint
  2389 00001F3A E851030000          <2> 		call prcharint
  2390                              <2> 	nonobackprint:
  2391 00001F3F 5E                  <2> 		pop esi
  2392 00001F40 3B35[1A220000]      <2> 		cmp esi, [endbufferrdpr]
  2393 00001F46 0F8319000000        <2> 		jae near donerdprinc
  2394 00001F4C 66A1[0C220000]      <2> 		mov ax, [axcache]
  2395 00001F52 8A25[0E220000]      <2> 		mov ah, [endkeyrdpr]
  2396 00001F58 38E0                <2> 		cmp al, ah
  2397 00001F5A 0F851DFFFFFF        <2> 		jne rdprintb
  2398 00001F60 E901000000          <2> 		jmp donerdprint
  2399                              <2> 	donerdprinc:
  2400 00001F65 46                  <2> 		inc esi
  2401                              <2> 	donerdprint:
  2402 00001F66 4E                  <2> 		dec esi
  2403 00001F67 BF[22C80000]        <2> 		mov edi, buftxt2
  2404                              <2> 	copylaterstuff:
  2405 00001F6C 8A07                <2> 		mov al, [edi]
  2406 00001F6E 3C00                <2> 		cmp al, 0
  2407 00001F70 7406                <2> 		je nocopylaterstuff
  2408 00001F72 8806                <2> 		mov [esi], al
  2409 00001F74 47                  <2> 		inc edi
  2410 00001F75 46                  <2> 		inc esi
  2411 00001F76 EBF4                <2> 		jmp copylaterstuff
  2412                              <2> 	nocopylaterstuff:
  2413 00001F78 C60600              <2> 		mov byte [esi], 0
  2414 00001F7B E80B000000          <2> 		call clearbuftxt2
  2415 00001F80 89F1                <2> 		mov ecx, esi
  2416 00001F82 8B3D[10220000]      <2> 		mov edi, [firstesirdpr]
  2417 00001F88 29F9                <2> 		sub ecx, edi
  2418 00001F8A C3                  <2> 		ret
  2419                              <2> 	
  2420                              <2> 	clearbuftxt2:
  2421 00001F8B 30C0                <2> 		xor al, al
  2422 00001F8D BF[22C80000]        <2> 		mov edi, buftxt2
  2423                              <2> 	clearbuftxt2lp:
  2424 00001F92 8807                <2> 		mov [edi], al
  2425 00001F94 47                  <2> 		inc edi
  2426 00001F95 81FF[22CC0000]      <2> 		cmp edi, buftxt
  2427 00001F9B 75F5                <2> 		jne clearbuftxt2lp
  2428 00001F9D C3                  <2> 		ret
  2429                              <2> 	
  2430                              <2> 	rdprintb2:
  2431 00001F9E E8AF070000          <2> 		call termcopy
  2432 00001FA3 E9D5FEFFFF          <2> 		jmp rdprintb
  2433                              <2> 	
  2434                              <2> 	rdprhome:
  2435 00001FA8 3B35[16220000]      <2> 		cmp esi, [buftxtloc]
  2436 00001FAE 0F84EAFFFFFF        <2> 		je near rdprintb2
  2437 00001FB4 BF[22C80000]        <2> 		mov edi, buftxt2
  2438 00001FB9 8A07                <2> 		mov al, [edi]
  2439 00001FBB E82F020000          <2> 		call shiftbuftxt2
  2440 00001FC0 E8DC020000          <2> 		call prcharq
  2441 00001FC5 EBE1                <2> 		jmp rdprhome
  2442                              <2> 		
  2443                              <2> 	rdprend:
  2444 00001FC7 BF[22C80000]        <2> 		mov edi, buftxt2
  2445 00001FCC 8A07                <2> 		mov al, [edi]
  2446 00001FCE 3C00                <2> 		cmp al, 0
  2447 00001FD0 0F84C8FFFFFF        <2> 		je near rdprintb2
  2448 00001FD6 8806                <2> 		mov [esi], al
  2449 00001FD8 E849000000          <2> 		call shiftbuftxt2lft
  2450 00001FDD E8BF020000          <2> 		call prcharq
  2451 00001FE2 EBE3                <2> 		jmp rdprend
  2452                              <2> 	
  2453                              <2> 	rdprleft:
  2454 00001FE4 3B35[16220000]      <2> 		cmp esi, [buftxtloc]
  2455 00001FEA 0F848DFEFFFF        <2> 		je near rdprintb
  2456 00001FF0 BF[22C80000]        <2> 		mov edi, buftxt2
  2457 00001FF5 8A07                <2> 		mov al, [edi]
  2458 00001FF7 E8F3010000          <2> 		call shiftbuftxt2
  2459 00001FFC E88F020000          <2> 		call prcharint
  2460 00002001 E977FEFFFF          <2> 		jmp rdprintb
  2461                              <2> 		
  2462                              <2> 	rdprright:
  2463 00002006 BF[22C80000]        <2> 		mov edi, buftxt2
  2464 0000200B 8A07                <2> 		mov al, [edi]
  2465 0000200D 3C00                <2> 		cmp al, 0
  2466 0000200F 0F8468FEFFFF        <2> 		je near rdprintb
  2467 00002015 8806                <2> 		mov [esi], al
  2468 00002017 E80A000000          <2> 		call shiftbuftxt2lft
  2469 0000201C E86F020000          <2> 		call prcharint
  2470 00002021 E957FEFFFF          <2> 		jmp rdprintb
  2471                              <2> 	shiftbuftxt2lft:
  2472 00002026 3C00                <2> 		cmp al, 0
  2473 00002028 7408                <2> 		je noshiftbuftxt2lft
  2474 0000202A 47                  <2> 		inc edi
  2475 0000202B 8A07                <2> 		mov al, [edi]
  2476 0000202D 8847FF              <2> 		mov [edi - 1], al
  2477 00002030 EBF4                <2> 		jmp shiftbuftxt2lft
  2478                              <2> 	noshiftbuftxt2lft:
  2479 00002032 8A06                <2> 		mov al, [esi]
  2480 00002034 46                  <2> 		inc esi
  2481 00002035 8A1D[0F220000]      <2> 		mov bl, [modkeyrdpr]
  2482 0000203B C3                  <2> 		ret
  2483                              <2> 		
  2484                              <2> 	rdprdownbck:
  2485 0000203C FECC                <2> 		dec ah
  2486 0000203E 8825[14220000]      <2> 		mov [commandedit], ah
  2487 00002044 E88D000000          <2> 		call rdprbckspc
  2488 00002049 E92FFEFFFF          <2> 		jmp rdprintb
  2489                              <2> 	
  2490                              <2> 	rdprdown:
  2491 0000204E 8A25[14220000]      <2> 		mov ah, [commandedit]
  2492 00002054 80FC01              <2> 		cmp ah, 1
  2493 00002057 0F8620FEFFFF        <2> 		jbe near rdprintb
  2494 0000205D 8B3D[8CA80100]      <2> 		mov edi, [commandsentered]
  2495 00002063 3B3D[88A80100]      <2> 		cmp edi, [commandlistentries]
  2496 00002069 7618                <2> 		jbe .nofix
  2497 0000206B 8105[88A80100]0200- <2> 		add dword [commandlistentries], 2
  2498 00002073 0000                <2>
  2499 00002075 3B3D[88A80100]      <2> 		cmp edi, [commandlistentries]
  2500 0000207B 7706                <2> 		ja .nofix
  2501 0000207D 893D[88A80100]      <2> 		mov [commandlistentries], edi
  2502                              <2> 	.nofix:
  2503 00002083 80FC02              <2> 		cmp ah, 2
  2504 00002086 74B4                <2> 		je rdprdownbck
  2505 00002088 80EC02              <2> 		sub ah, 2
  2506 0000208B 8825[14220000]      <2> 		mov [commandedit], ah
  2507                              <2> 		
  2508                              <2> 	rdprup:
  2509 00002091 3805[14220000]      <2> 		cmp [commandedit], al
  2510 00002097 0F84E0FDFFFF        <2> 		je near rdprintb
  2511 0000209D 813D[88A80100]0000- <2> 		cmp dword [commandlistentries], 0
  2512 000020A5 0000                <2>
  2513 000020A7 0F84D0FDFFFF        <2> 		je near rdprintb
  2514 000020AD FF0D[88A80100]      <2> 		dec dword [commandlistentries]
  2515                              <2> 	.lp:
  2516 000020B3 BF[22C80000]        <2> 		mov edi, buftxt2
  2517 000020B8 8A07                <2> 		mov al, [edi]
  2518 000020BA 3C00                <2> 		cmp al, 0
  2519 000020BC 740E                <2> 		je .start
  2520 000020BE 8806                <2> 		mov [esi], al
  2521 000020C0 E861FFFFFF          <2> 		call shiftbuftxt2lft
  2522 000020C5 E8D7010000          <2> 		call prcharq
  2523 000020CA EBE7                <2> 		jmp .lp
  2524                              <2> 	.start:
  2525 000020CC E805000000          <2> 		call rdprbckspc
  2526 000020D1 E941000000          <2> 		jmp getcurrentcommandstr
  2527                              <2> 	rdprbckspc:
  2528 000020D6 3B35[16220000]      <2> 		cmp esi, [buftxtloc]
  2529 000020DC 742B                <2> 		je nordprupbck
  2530                              <2> 	rdprupbckspclp:
  2531 000020DE B008                <2> 		mov al, 8
  2532 000020E0 8A1D[0F220000]      <2> 		mov bl, [modkeyrdpr]
  2533 000020E6 E8B6010000          <2> 		call prcharq
  2534 000020EB B020                <2> 		mov al, ' '
  2535 000020ED E8AF010000          <2> 		call prcharq
  2536 000020F2 B008                <2> 		mov al, 8
  2537 000020F4 E8A8010000          <2> 		call prcharq
  2538 000020F9 4E                  <2> 		dec esi
  2539 000020FA 3B35[16220000]      <2> 		cmp esi, [buftxtloc]
  2540 00002100 7402                <2> 		je nordprupbck2
  2541 00002102 EBDA                <2> 		jmp rdprupbckspclp
  2542                              <2> 	nordprupbck2:
  2543 00002104 E849060000          <2> 		call termcopy
  2544                              <2> 	nordprupbck:
  2545 00002109 8B3D[84A80100]      <2> 		mov edi, [commandbufpos]
  2546 0000210F 81C7[90A80100]      <2> 		add edi, commandbuf
  2547 00002115 4F                  <2> 		dec edi
  2548 00002116 C3                  <2> 		ret
  2549                              <2> 	getcurrentcommandstr:
  2550 00002117 8A25[14220000]      <2> 		mov ah, [commandedit]
  2551 0000211D FE05[14220000]      <2> 		inc byte [commandedit]
  2552                              <2> 	getccmdlp:
  2553 00002123 4F                  <2> 		dec edi
  2554 00002124 8A07                <2> 		mov al, [edi]
  2555 00002126 81FF[90A80100]      <2> 		cmp edi, commandbuf
  2556 0000212C 7231                <2> 		jb getcmdresetcommandbuf
  2557 0000212E 81EF[90A80100]      <2> 		sub edi, commandbuf
  2558 00002134 3B3D[84A80100]      <2> 		cmp edi, [commandbufpos]
  2559 0000213A 0F843DFDFFFF        <2> 		je near rdprintb
  2560 00002140 81C7[90A80100]      <2> 		add edi, commandbuf
  2561 00002146 3C00                <2> 		cmp al, 0
  2562 00002148 75D9                <2> 		jne getccmdlp
  2563 0000214A FECC                <2> 		dec ah
  2564 0000214C 80FC00              <2> 		cmp ah, 0
  2565 0000214F 77D2                <2> 		ja getccmdlp
  2566 00002151 47                  <2> 		inc edi
  2567 00002152 81FF[90B80100]      <2> 		cmp edi, commandbufend
  2568 00002158 770D                <2> 		ja fixcmdbufb4morerdpr
  2569 0000215A E915000000          <2> 		jmp morerdprup
  2570                              <2> 	getcmdresetcommandbuf:
  2571 0000215F BF[90B80100]        <2> 		mov edi, commandbufend
  2572 00002164 47                  <2> 		inc edi
  2573 00002165 EBBC                <2> 		jmp getccmdlp
  2574                              <2> 	fixcmdbufb4morerdpr:
  2575 00002167 4F                  <2> 		dec edi
  2576 00002168 81EF[90B80100]      <2> 		sub edi, commandbufend
  2577 0000216E 81C7[90A80100]      <2> 		add edi, commandbuf
  2578                              <2> 	morerdprup:
  2579 00002174 8A07                <2> 		mov al, [edi]
  2580 00002176 47                  <2> 		inc edi
  2581 00002177 81EF[90A80100]      <2> 		sub edi, commandbuf
  2582 0000217D 3C00                <2> 		cmp al, 0
  2583 0000217F 0F8419FEFFFF        <2> 		je near rdprintb2
  2584 00002185 3B3D[84A80100]      <2> 		cmp edi, [commandbufpos]
  2585 0000218B 0F830DFEFFFF        <2> 		jae near rdprintb2
  2586 00002191 81C7[90A80100]      <2> 		add edi, commandbuf
  2587 00002197 8806                <2> 		mov [esi], al
  2588 00002199 46                  <2> 		inc esi
  2589 0000219A 57                  <2> 		push edi
  2590 0000219B 8A1D[0F220000]      <2> 		mov bl, [modkeyrdpr]
  2591 000021A1 E8FB000000          <2> 		call prcharq
  2592 000021A6 5F                  <2> 		pop edi
  2593 000021A7 81FF[90B80100]      <2> 		cmp edi, commandbufend
  2594 000021AD 76C5                <2> 		jbe morerdprup
  2595 000021AF BF[90A80100]        <2> 		mov edi, commandbuf
  2596 000021B4 EBBE                <2> 		jmp morerdprup
  2597                              <2> 		
  2598                              <2> 	rdprdel:
  2599 000021B6 BF[22C80000]        <2> 		mov edi, buftxt2
  2600 000021BB 8A07                <2> 		mov al, [edi]
  2601 000021BD 3C00                <2> 		cmp al, 0
  2602 000021BF 0F84B8FCFFFF        <2> 		je near rdprintb
  2603 000021C5 8806                <2> 		mov [esi], al
  2604 000021C7 E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2605 000021CC E8D0000000          <2> 		call prcharq
  2606                              <2> 		
  2607                              <2> 	rdprbscheck:
  2608 000021D1 3B35[10220000]      <2> 		cmp esi, [firstesirdpr]
  2609 000021D7 7705                <2> 		ja goodbscheck
  2610 000021D9 E99FFCFFFF          <2> 		jmp rdprintb
  2611                              <2> 	goodbscheck:
  2612 000021DE 4E                  <2> 		dec esi
  2613 000021DF C60600              <2> 		mov byte [esi], 0
  2614 000021E2 8A1D[0F220000]      <2> 		mov bl, [modkeyrdpr]
  2615 000021E8 B008                <2> 		mov al, 8
  2616 000021EA E9F3FCFFFF          <2> 		jmp bscheckequal
  2617                              <2> 		
  2618                              <2> 	shiftbuftxt2:
  2619 000021EF 3C00                <2> 		cmp al, 0
  2620 000021F1 7409                <2> 		je noshiftbuftxt2
  2621 000021F3 47                  <2> 		inc edi
  2622 000021F4 8A27                <2> 		mov ah, [edi]
  2623 000021F6 8807                <2> 		mov [edi], al
  2624 000021F8 88E0                <2> 		mov al, ah
  2625 000021FA EBF3                <2> 		jmp shiftbuftxt2
  2626                              <2> 	noshiftbuftxt2:
  2627 000021FC BF[22C80000]        <2> 		mov edi, buftxt2
  2628 00002201 4E                  <2> 		dec esi
  2629 00002202 8A06                <2> 		mov al, [esi]
  2630 00002204 8807                <2> 		mov [edi], al
  2631 00002206 C60600              <2> 		mov byte [esi], 0
  2632 00002209 B008                <2> 		mov al, 8
  2633 0000220B C3                  <2> 		ret
  2634                              <2> 		
  2635 0000220C 0000                <2> axcache dw 0
  2636 0000220E 00                  <2> endkeyrdpr db 0
  2637 0000220F 00                  <2> modkeyrdpr db 0
  2638 00002210 00000000            <2> firstesirdpr dd 0
  2639 00002214 00                  <2> commandedit db 0
  2640 00002215 00                  <2> txtmask db 0
  2641 00002216 00000000            <2> buftxtloc dd 0
  2642 0000221A 00000000            <2> endbufferrdpr dd 0
  2643 0000221E 082000              <2> backcursor db 8," ",0
  2644                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2645                              <2> readchar:
  2646 00002221 E807000000          <2> 	call rdcharint
  2647 00002226 E97DE0FFFF          <2> 	jmp timerinterrupt
  2648                              <2> getchar:
  2649 0000222B 30C0                <2> 	xor al, al
  2650                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2651 0000222D C605[7B220000]01    <2> 		mov byte [trans], 1
  2652 00002234 3C00                <2> 		cmp al, 0
  2653 00002236 7507                <2> 		jne transcheck
  2654 00002238 C605[7B220000]00    <2> 		mov byte [trans], 0
  2655                              <2> 	transcheck:
  2656                              <2> 	%ifdef io.serial
  2657                              <2> 		call serial.receive
  2658                              <2> 		cmp al, 13
  2659                              <2> 		je rdenter
  2660                              <2> 	%else
  2661 0000223F E8C83B0000          <2> 		call getkey
  2662 00002244 66A1[79220000]      <2> 		mov ax, [lastkey]
  2663 0000224A 80FC1C              <2> 		cmp ah, 0x1C
  2664 0000224D 741F                <2> 		je rdenter
  2665                              <2> 	%endif
  2666 0000224F 8A3D[7B220000]      <2> 		mov bh, [trans]
  2667 00002255 803D[EC5D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2668 0000225C 7504                <2> 		jne nospecialtrans
  2669 0000225E 88C3                <2> 		mov bl, al
  2670 00002260 30C0                <2> 		xor al, al
  2671                              <2> 	nospecialtrans:
  2672 00002262 08C7                <2> 		or bh, al
  2673 00002264 80FF00              <2> 		cmp bh, 0
  2674 00002267 74D6                <2> 		je transcheck
  2675 00002269 E90A000000          <2> 		jmp rdend
  2676                              <2> 	rdenter:
  2677 0000226E B41C                <2> 		mov ah, 0x1C
  2678 00002270 B00A                <2> 		mov al, 10
  2679 00002272 66A3[79220000]      <2> 		mov [lastkey], ax
  2680                              <2> 	rdend:
  2681 00002278 C3                  <2> 		ret
  2682                              <2> 		
  2683 00002279 0000                <2> lastkey db 0,0
  2684 0000227B 00                  <2> trans db 0
  2685                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2686                              <2> prntchar:
  2687                              <2> %ifdef io.serial
  2688                              <2> 	cmp bl, bh
  2689                              <2> 	call prcharint
  2690                              <2> 	jmp timerinterrupt
  2691                              <2> prcharint:	
  2692                              <2> prcharq:
  2693                              <2> 	call serial.send
  2694                              <2> 	ret
  2695                              <2> %else
  2696 0000227C 38FB                <2> cmp bl, bh
  2697 0000227E 740A                <2> je prchar.notimer
  2698 00002280 E80B000000          <2> call prcharint
  2699 00002285 E91EE0FFFF          <2> jmp timerinterrupt
  2700                              <2> prchar.notimer:
  2701 0000228A E812000000          <2> 	call prcharq
  2702 0000228F CF                  <2> 	iret
  2703                              <2> 	
  2704                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2705 00002290 38FB                <2> 	cmp bl, bh
  2706 00002292 740D                <2> 	je prcharq
  2707 00002294 E808000000          <2> 	call prcharq
  2708 00002299 E8B4040000          <2> 	call termcopy
  2709 0000229E C3                  <2> 	ret
  2710 0000229F 00                  <2> termguion db 0
  2711 000022A0 00                  <2> termcopyon db 0
  2712                              <2> prcharq:
  2713 000022A1 88DC                <2> 	mov ah, bl
  2714 000022A3 66A3[7B240000]      <2> 	mov [charbuf], ax
  2715 000022A9 8B1D[73240000]      <2> 	mov ebx, [videobufpos]
  2716 000022AF BF[38D30000]        <2> 	mov edi, videobuf
  2717 000022B4 01DF                <2> 	add edi, ebx
  2718 000022B6 66A1[5D270000]      <2> 	mov ax, [removedvideo]
  2719 000022BC 668907              <2> 	mov [edi], ax
  2720 000022BF 66A1[7B240000]      <2> 	mov ax, [charbuf]
  2721 000022C5 31D2                <2> 	xor edx, edx
  2722 000022C7 668B15[77240000]    <2> 	mov dx, [charpos]
  2723 000022CE 31C9                <2> 	xor ecx, ecx
  2724 000022D0 668B0D[79240000]    <2> 	mov cx, [charxy]
  2725 000022D7 3C09                <2> 	cmp al, 9
  2726 000022D9 0F8462000000        <2> 	je near prtab
  2727 000022DF 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2728 000022E1 0F8487000000        <2> 	je near prcr
  2729 000022E7 3C0A                <2> 	cmp al, 10
  2730 000022E9 0F84D1000000        <2> 	je near prnlcr
  2731 000022EF 3C08                <2> 	cmp al, 8
  2732 000022F1 0F8488000000        <2> 	je near prbs
  2733 000022F7 3CFF                <2> 	cmp al, 255		;;null character
  2734 000022F9 0F841B000000        <2> 	je near donescr
  2735 000022FF 668907              <2> 	mov [edi], ax
  2736 00002302 81C702000000        <2> 	add edi, 2
  2737 00002308 FEC2                <2> 	inc dl
  2738                              <2> donecrnl:
  2739 0000230A 38CA                <2> 	cmp dl, cl
  2740 0000230C 0F83D1000000        <2> 	jae near preol
  2741                              <2> doneeol:
  2742 00002312 38EE                <2> 	cmp dh, ch
  2743 00002314 0F83E5000000        <2> 	jae near prscr	
  2744                              <2> donescr:
  2745 0000231A 89FB                <2> 	mov ebx, edi
  2746 0000231C 668B07              <2> 	mov ax, [edi]
  2747 0000231F 66A3[5D270000]      <2> 	mov [removedvideo], ax
  2748 00002325 81EB[38D30000]      <2> 	sub ebx, videobuf
  2749 0000232B 891D[73240000]      <2> 	mov [videobufpos], ebx
  2750 00002331 668915[77240000]    <2> 	mov [charpos], dx
  2751 00002338 66A1[7B240000]      <2> 	mov ax, [charbuf]
  2752 0000233E 88E3                <2> 	mov bl, ah
  2753 00002340 C3                  <2> 	ret
  2754                              <2> 	
  2755                              <2> 	prtab:
  2756 00002341 8B1D[6F240000]      <2> 		mov ebx, [linebeginpos]
  2757 00002347 81EF[38D30000]      <2> 		sub edi, videobuf
  2758 0000234D 29DF                <2> 		sub edi, ebx
  2759 0000234F C1EF04              <2> 		shr edi, 4
  2760 00002352 C1E704              <2> 		shl edi, 4
  2761 00002355 81C710000000        <2> 		add edi, 16
  2762 0000235B C0EA03              <2> 		shr dl, 3
  2763 0000235E C0E203              <2> 		shl dl, 3
  2764 00002361 80C208              <2> 		add dl, 8
  2765 00002364 81C7[38D30000]      <2> 		add edi, videobuf
  2766 0000236A 01DF                <2> 		add edi, ebx
  2767 0000236C EB9C                <2> 		jmp donecrnl
  2768                              <2> 	
  2769                              <2> 	prcr:
  2770 0000236E 30D2                <2> 		xor dl, dl
  2771 00002370 BF[38D30000]        <2> 		mov edi, videobuf
  2772 00002375 8B1D[6F240000]      <2> 		mov ebx, [linebeginpos]
  2773 0000237B 01DF                <2> 		add edi, ebx
  2774 0000237D EB8B                <2> 		jmp donecrnl
  2775                              <2> 			
  2776                              <2> 	prbs:
  2777 0000237F 8B1D[6F240000]      <2> 		mov ebx, [linebeginpos]
  2778 00002385 80FA00              <2> 		cmp dl, 0
  2779 00002388 7416                <2> 		je prbackline
  2780                              <2> 	prnobmr:
  2781 0000238A 891D[6F240000]      <2> 		mov [linebeginpos], ebx
  2782 00002390 FECA                <2> 		dec dl
  2783 00002392 6631C0              <2> 		xor ax, ax
  2784 00002395 81EF02000000        <2> 		sub edi, 2
  2785 0000239B E96AFFFFFF          <2> 		jmp donecrnl
  2786                              <2> 	prbackline:
  2787 000023A0 6631DB              <2> 		xor bx, bx
  2788 000023A3 88CA                <2> 		mov dl, cl
  2789 000023A5 80FE00              <2> 		cmp dh, 0
  2790 000023A8 74E0                <2> 		je prnobmr
  2791 000023AA 8B1D[6F240000]      <2> 		mov ebx, [linebeginpos]
  2792 000023B0 6651                <2> 		push cx
  2793 000023B2 30ED                <2> 		xor ch, ch
  2794 000023B4 6629CB              <2> 		sub bx, cx
  2795 000023B7 6629CB              <2> 		sub bx, cx
  2796 000023BA 6659                <2> 		pop cx
  2797 000023BC FECE                <2> 		dec dh
  2798 000023BE EBCA                <2> 		jmp prnobmr
  2799                              <2> 		
  2800                              <2> 	prnlcr:
  2801 000023C0 FEC6                <2> 		inc dh
  2802 000023C2 31DB                <2> 		xor ebx, ebx
  2803 000023C4 30D2                <2> 		xor dl, dl
  2804 000023C6 88CB                <2> 		mov bl, cl
  2805 000023C8 66D1E3              <2> 		shl bx, 1
  2806 000023CB BF[38D30000]        <2> 		mov edi, videobuf
  2807 000023D0 031D[6F240000]      <2> 		add ebx, [linebeginpos]
  2808 000023D6 891D[6F240000]      <2> 		mov [linebeginpos], ebx
  2809 000023DC 01DF                <2> 		add edi, ebx
  2810 000023DE E927FFFFFF          <2> 		jmp donecrnl
  2811                              <2> 		
  2812                              <2> 	preol:
  2813 000023E3 30D2                <2> 		xor dl, dl
  2814 000023E5 FEC6                <2> 		inc dh
  2815 000023E7 31DB                <2> 		xor ebx, ebx
  2816 000023E9 88CB                <2> 		mov bl, cl
  2817 000023EB 66D1E3              <2> 		shl bx, 1
  2818 000023EE 031D[6F240000]      <2> 		add ebx, [linebeginpos]
  2819 000023F4 891D[6F240000]      <2> 		mov [linebeginpos], ebx
  2820 000023FA E913FFFFFF          <2> 		jmp doneeol
  2821                              <2> 	prscr:
  2822 000023FF FECE                <2> 		dec dh
  2823 00002401 BF[38D30000]        <2> 		mov edi, videobuf
  2824 00002406 31DB                <2> 		xor ebx, ebx
  2825 00002408 88CB                <2> 		mov bl, cl
  2826 0000240A 66D1E3              <2> 		shl bx, 1
  2827 0000240D 01FB                <2> 		add ebx, edi
  2828                              <2> 	intscrollloop:
  2829 0000240F 668B03              <2> 		mov ax, [ebx]
  2830 00002412 668907              <2> 		mov [edi], ax
  2831 00002415 81C702000000        <2> 		add edi, 2
  2832 0000241B 81C302000000        <2> 		add ebx, 2
  2833 00002421 FEC9                <2> 		dec cl
  2834 00002423 80F900              <2> 		cmp cl, 0
  2835 00002426 75E7                <2> 		jne intscrollloop
  2836 00002428 8A0D[79240000]      <2> 		mov cl, [charxy]
  2837 0000242E FECD                <2> 		dec ch
  2838 00002430 80FD01              <2> 		cmp ch, 1
  2839 00002433 77DA                <2> 		ja intscrollloop
  2840 00002435 6631C0              <2> 		xor ax, ax
  2841 00002438 81EF[38D30000]      <2> 		sub edi, videobuf
  2842 0000243E 893D[6F240000]      <2> 		mov [linebeginpos], edi
  2843 00002444 81C7[38D30000]      <2> 		add edi, videobuf
  2844 0000244A 89FB                <2> 		mov ebx, edi
  2845                              <2> 	intloopclear:
  2846 0000244C 668903              <2> 		mov [ebx], ax
  2847 0000244F 81C302000000        <2> 		add ebx, 2
  2848 00002455 FEC9                <2> 		dec cl
  2849 00002457 80F900              <2> 		cmp cl, 0
  2850 0000245A 75F0                <2> 		jne intloopclear
  2851 0000245C FECD                <2> 		dec ch
  2852 0000245E 80FD00              <2> 		cmp ch, 0
  2853 00002461 75E9                <2> 		jne intloopclear
  2854 00002463 668B0D[79240000]    <2> 		mov cx, [charxy]
  2855 0000246A E9ABFEFFFF          <2> 		jmp donescr
  2856                              <2> 		
  2857 0000246F 00000000            <2> linebeginpos dd 0
  2858 00002473 00000000            <2> videobufpos: dd 0
  2859 00002477 0000                <2> charpos db 0,0
  2860 00002479 501E                <2> charxy db 80,30
  2861 0000247B 0000                <2> charbuf dw 0
  2862                              <2> %endif
  2863                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2864                              <2> openfile:
  2865 0000247D E8D4400000          <2> 	call loadfile
  2866 00002482 E921DEFFFF          <2> 	jmp timerinterrupt
  2867                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2868                              <2> num2str:
  2869 00002487 3C00                <2> 	cmp al, 0
  2870 00002489 750A                <2> 	jne num2strb
  2871 0000248B E8810C0000          <2> 	call showdec
  2872 00002490 E913DEFFFF          <2> 	jmp timerinterrupt
  2873                              <2> num2strb:
  2874 00002495 E8AD0B0000          <2> 	call showhex
  2875 0000249A E909DEFFFF          <2> 	jmp timerinterrupt
  2876                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2877                              <2> str2num:
  2878 0000249F 89F7                <2> 	mov edi, esi
  2879 000024A1 E84D0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2880 000024A6 E9FDDDFFFF          <2> 	jmp timerinterrupt
  2881                              <2> 	
  2882                              <1> %ifdef threads.included
  2883                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2884                              <2> forkthread:
  2885                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  2886                              <2> 			;returns the PID of the new fork in ebx
  2887                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2888 000024AB FA                  <2> 	cli
  2889 000024AC 60                  <2> 	pushad
  2890 000024AD 8925[7A250000]      <2> 	mov [.espold], esp
  2891 000024B3 C605[F5660000]01    <2> 	mov byte [threadson], 1
  2892 000024BA 8B1D[F6660000]      <2> 	mov ebx, [currentthread]
  2893 000024C0 C1E302              <2> 	shl ebx, 2
  2894 000024C3 89A3[A4D80100]      <2> 	mov [threadlist + ebx], esp
  2895 000024C9 C1EB02              <2> 	shr ebx, 2
  2896 000024CC 81FB00000000        <2> 	cmp ebx, 0
  2897 000024D2 750C                <2> 	jne .simplestack
  2898 000024D4 BB[3EB10000]        <2> 	mov ebx, stackend
  2899 000024D9 29E3                <2> 	sub ebx, esp
  2900 000024DB E90B000000          <2> 	jmp .stackcalcdone
  2901                              <2> .simplestack:
  2902 000024E0 C1E30A              <2> 	shl ebx, 10
  2903 000024E3 81C3[A4EC0100]      <2> 	add ebx, stack1
  2904 000024E9 29E3                <2> 	sub ebx, esp
  2905                              <2> .stackcalcdone:
  2906 000024EB 29DC                <2> 	sub esp, ebx
  2907 000024ED 81C4[A4EC0100]      <2> 	add esp, stack1
  2908 000024F3 8B1D[F1660000]      <2> 	mov ebx, [lastthread]
  2909 000024F9 C1E308              <2> 	shl ebx, 8
  2910 000024FC 01DC                <2> 	add esp, ebx
  2911 000024FE 891D[7E250000]      <2> 	mov [.stackend], ebx
  2912                              <2> 
  2913 00002504 89E5                <2> 	mov ebp, esp
  2914 00002506 8B25[7A250000]      <2> 	mov esp, [.espold]
  2915                              <2> 
  2916 0000250C C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2917 0000250F 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2918                              <2> 
  2919 00002513 31DB                <2> 	xor ebx, ebx
  2920                              <2> .stackcopy:
  2921 00002515 668B041C            <2> 	mov ax, [esp + ebx]
  2922 00002519 6689441D00          <2> 	mov [ebp + ebx], ax
  2923 0000251E 81C302000000        <2> 	add ebx, 2
  2924 00002524 3B1D[7E250000]      <2> 	cmp ebx, [.stackend]
  2925 0000252A 72E9                <2> 	jb .stackcopy
  2926                              <2> 
  2927 0000252C 31C0                <2> 	xor eax, eax
  2928 0000252E 668CC8              <2> 	mov ax, cs
  2929 00002531 89C2                <2> 	mov edx, eax
  2930 00002533 8B4C2428            <2> 	mov ecx, [esp + 40]
  2931 00002537 81C900020000        <2> 	or ecx, 0x200
  2932                              <2> 	
  2933 0000253D 81FE00000000        <2> 	cmp esi, 0
  2934 00002543 7504                <2> 	jne .nochangestack
  2935 00002545 8B742420            <2> 	mov esi, [esp + 32]
  2936                              <2> .nochangestack:
  2937 00002549 89F0                <2> 	mov eax, esi
  2938 0000254B 89EC                <2> 	mov esp, ebp
  2939                              <2> 
  2940 0000254D 89442420            <2> 	mov [esp + 32], eax
  2941 00002551 89542424            <2> 	mov [esp + 36], edx
  2942 00002555 894C2428            <2> 	mov [esp + 40], ecx
  2943                              <2> 
  2944 00002559 8B1D[F1660000]      <2> 	mov ebx, [lastthread]
  2945 0000255F 89A3[A4D80100]      <2> 	mov [threadlist + ebx], esp
  2946 00002565 81C304000000        <2> 	add ebx, 4
  2947 0000256B 891D[F1660000]      <2> 	mov [lastthread], ebx
  2948 00002571 8B25[7A250000]      <2> 	mov esp, [.espold]
  2949 00002577 61                  <2> 	popad
  2950 00002578 FB                  <2> 	sti
  2951 00002579 CF                  <2> 	iret
  2952                              <2> 
  2953 0000257A 00000000            <2> .espold dd 0
  2954 0000257E 00000000            <2> .stackend dd 0
  2955                              <1> %endif
  2956                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2957                              <2> gettime:
  2958 00002582 A1[60020000]        <2> 	mov eax, [timeseconds]
  2959 00002587 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  2960 0000258D 89D9                <2> 	mov ecx, ebx
  2961 0000258F C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2962 00002592 E911DDFFFF          <2> 	jmp timerinterrupt
  2963                              <1> 	%include 'source/interrupts/13_settime.asm'
  2964                              <2> settime:
  2965 00002597 A3[60020000]        <2> 	mov [timeseconds], eax
  2966 0000259C 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  2967 000025A2 E901DDFFFF          <2> 	jmp timerinterrupt
  2968                              <2> 	
  2969                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2970                              <2> runcmd:
  2971 000025A7 BF[22CC0000]        <2> 	mov edi, buftxt
  2972                              <2> cpcmd:
  2973 000025AC 8A06                <2> 	mov al, [esi]
  2974 000025AE 8807                <2> 	mov [edi], al
  2975 000025B0 46                  <2> 	inc esi
  2976 000025B1 47                  <2> 	inc edi
  2977 000025B2 3C00                <2> 	cmp al, 0
  2978 000025B4 75F6                <2> 	jne cpcmd
  2979 000025B6 E88F070000          <2> 	call run
  2980 000025BB CF                  <2> 	iret
  2981                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2982                              <2> proginfo:
  2983                              <2> 	;mov ebx, variables
  2984 000025BC 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  2985 000025C2 89F7                <2> 	mov edi, esi
  2986 000025C4 31C9                <2> 	xor ecx, ecx
  2987                              <2> getcommandzeroes:
  2988 000025C6 8A07                <2> 	mov al, [edi]
  2989 000025C8 47                  <2> 	inc edi
  2990 000025C9 3C3B                <2> 	cmp al, ';'
  2991 000025CB 740B                <2> 	je nomorezeroes
  2992 000025CD 3C00                <2> 	cmp al, 0
  2993 000025CF 7407                <2> 	je nomorezeroes
  2994 000025D1 3C20                <2> 	cmp al, ' '
  2995 000025D3 75F1                <2> 	jne getcommandzeroes
  2996 000025D5 41                  <2> 	inc ecx
  2997 000025D6 EBEE                <2> 	jmp getcommandzeroes
  2998                              <2> nomorezeroes:
  2999 000025D8 41                  <2> 	inc ecx
  3000 000025D9 4F                  <2> 	dec edi
  3001 000025DA 8B1D[AEB70000]      <2> 	mov ebx, [uid]
  3002 000025E0 8B15[F6660000]      <2> 	mov edx, [currentthread]
  3003 000025E6 CF                  <2> 	iret
  3004                              <2> 	
  3005                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3006                              <2> hooksig: ;hook code in ESI to signal in AL
  3007 000025E7 3C00                <2> 	cmp al, 0
  3008 000025E9 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3009                              <2> ;	xor ebx, ebx
  3010                              <2> ;	mov bl, al
  3011                              <2> ;	shl bl, 2
  3012 000025EB BF[9EB10000]        <2> 	mov edi, sigtable
  3013 000025F0 8937                <2> 	mov [edi], esi
  3014                              <2> .quit:
  3015 000025F2 E9B1DCFFFF          <2> 	jmp timerinterrupt
  3016                              <1> %ifdef gui.included
  3017                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3018                              <2> guiint:
  3019 000025F7 3CFD                <2> 	cmp al, 253
  3020 000025F9 0F8473000000        <2> 	je near .getinfo
  3021 000025FF 803D[589F0000]01    <2> 	cmp byte [guion], 1
  3022 00002606 0F8550000000        <2> 	jne near .nogui
  3023 0000260C 3C00                <2> 	cmp al, 0
  3024 0000260E 0F844D000000        <2> 	je near .clear
  3025 00002614 3C01                <2> 	cmp al, 1
  3026 00002616 0F84AB000000        <2> 	je near .putpixel
  3027 0000261C 3C02                <2> 	cmp al, 2
  3028 0000261E 0F84B0000000        <2> 	je near .drawtext
  3029 00002624 3C03                <2> 	cmp al, 3
  3030 00002626 0F84C3000000        <2> 	je near .drawline
  3031 0000262C 3C04                <2> 	cmp al, 4
  3032 0000262E 0F84CE000000        <2> 	je near .drawcircle
  3033 00002634 3C05                <2> 	cmp al, 5
  3034 00002636 0F84D6000000        <2> 	je near .fillcircle
  3035 0000263C 3C06                <2> 	cmp al, 6
  3036 0000263E 0F84DE000000        <2> 	je near .drawsquare
  3037 00002644 3C07                <2> 	cmp al, 7
  3038 00002646 0F84E9000000        <2> 	je near .fillsquare
  3039 0000264C 3CFE                <2> 	cmp al, 254
  3040 0000264E 0F8449000000        <2> 	je near .setinfo
  3041 00002654 3CFF                <2> 	cmp al, 255
  3042 00002656 0F8446000000        <2> 	je near .reset
  3043                              <2> .nogui:
  3044 0000265C E947DCFFFF          <2> 	jmp timerinterrupt
  3045                              <2> 
  3046                              <2> .clear:		;color in bx
  3047 00002661 66891D[DB6D0000]    <2> 	mov [background], bx
  3048                              <2> %ifdef gui.background
  3049                              <2> 	mov ebx, [backgroundimage]
  3050                              <2> 	cmp ebx, 0
  3051                              <2> 	je .clearit
  3052                              <2> 	mov dword [backgroundimage], 0
  3053                              <2> 	mov [.bgi], ebx
  3054                              <2> .clearit:
  3055                              <2> %endif
  3056 00002668 E822470000          <2> 	call guiclear
  3057 0000266D E936DCFFFF          <2> 	jmp timerinterrupt
  3058                              <2> 	
  3059                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3060 00002672 6631DB              <2> 	xor bx, bx
  3061 00002675 6631C9              <2> 	xor cx, cx
  3062 00002678 6631D2              <2> 	xor dx, dx
  3063 0000267B 381D[589F0000]      <2> 	cmp [guion], bl
  3064 00002681 74D9                <2> 	je .nogui
  3065 00002683 668B1D[DB6D0000]    <2> 	mov bx, [background]
  3066 0000268A 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  3067 00002691 668B0D[0D570000]    <2> 	mov cx, [resolutiony]
  3068 00002698 E90BDCFFFF          <2> 	jmp timerinterrupt
  3069                              <2> 	
  3070                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3071 0000269D E906DCFFFF          <2> 	jmp timerinterrupt
  3072                              <2> .reset:		;resets the screen to the original settings
  3073 000026A2 66BBCF7B            <2> 	mov bx, background.original
  3074 000026A6 66891D[DB6D0000]    <2> 	mov [background], bx
  3075 000026AD 66BBFFFF            <2> 	mov bx, 0xFFFF
  3076 000026B1 66891D[5E740000]    <2> 	mov [colorfont2], bx
  3077                              <2> %ifdef gui.background
  3078                              <2> 	mov ebx, [backgroundimage]
  3079                              <2> 	cmp ebx, 0
  3080                              <2> 	jne .resetit
  3081                              <2> 	mov ebx, [.bgi]
  3082                              <2> 	mov [backgroundimage], ebx
  3083                              <2> .resetit:
  3084                              <2> %endif
  3085 000026B8 E8D2460000          <2> 	call guiclear
  3086 000026BD E81D470000          <2> 	call reloadallgraphics
  3087 000026C2 E9E1DBFFFF          <2> 	jmp timerinterrupt
  3088                              <2> 
  3089                              <2> %ifdef gui.background
  3090                              <2> 	.bgi dd 0
  3091                              <2> %endif
  3092                              <2> 	
  3093                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3094 000026C7 6689DE              <2> 	mov si, bx
  3095 000026CA E8F55C0000          <2> 	call putpixel
  3096 000026CF E9D4DBFFFF          <2> 	jmp timerinterrupt
  3097                              <2> 
  3098                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3099 000026D4 66D1E2              <2> 	shl dx, 1
  3100 000026D7 66891D[5E740000]    <2> 	mov [colorfont2], bx
  3101 000026DE 66893D[DB6D0000]    <2> 	mov [background], di
  3102 000026E5 E8464D0000          <2> 	call showstring2
  3103 000026EA E9B9DBFFFF          <2> 	jmp timerinterrupt
  3104                              <2> 
  3105                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3106 000026EF 6689F0              <2> 	mov ax, si
  3107 000026F2 6689DE              <2> 	mov si, bx
  3108 000026F5 6689FB              <2> 	mov bx, di
  3109 000026F8 E866450000          <2> 	call drawline
  3110 000026FD E9A6DBFFFF          <2> 	jmp timerinterrupt
  3111                              <2> 
  3112                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3113 00002702 6689F0              <2> 	mov ax, si
  3114 00002705 6689DE              <2> 	mov si, bx
  3115 00002708 E8DF400000          <2> 	call drawcircle
  3116 0000270D E996DBFFFF          <2> 	jmp timerinterrupt
  3117                              <2> 
  3118                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3119 00002712 6689F0              <2> 	mov ax, si
  3120 00002715 6689DE              <2> 	mov si, bx
  3121 00002718 E8E1410000          <2> 	call fillcircle
  3122 0000271D E986DBFFFF          <2> 	jmp timerinterrupt
  3123                              <2> 	
  3124                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3125 00002722 6689F0              <2> 	mov ax, si
  3126 00002725 6689DE              <2> 	mov si, bx
  3127 00002728 6689FB              <2> 	mov bx, di
  3128 0000272B E87F470000          <2> 	call drawsquare
  3129 00002730 E973DBFFFF          <2> 	jmp timerinterrupt
  3130                              <2> 
  3131                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3132 00002735 6689F0              <2> 	mov ax, si
  3133 00002738 6689DE              <2> 	mov si, bx
  3134 0000273B 6689FB              <2> 	mov bx, di
  3135 0000273E E8E1470000          <2> 	call fillsquare
  3136 00002743 E960DBFFFF          <2> 	jmp timerinterrupt
  3137                              <1> %endif
  3138                              <1> %ifdef sound.included
  3139                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3140                              <2> soundint:
  3141 00002748 E95BDBFFFF          <2> 	jmp timerinterrupt
  3142                              <1> %endif
  3143                              <1> %ifdef network.included
  3144                              <1> 	%include 'source/interrupts/19_netint.asm'
  3145                              <2> netint:
  3146 0000274D E956DBFFFF          <2> 	jmp timerinterrupt
  3147                              <1> %endif
  3148                              <1> 
  3149                              <1> termcopy:
  3150                              <1> %ifdef io.serial
  3151                              <1> 	ret
  3152                              <1> %else
  3153                              <1> %ifdef terminal.vsync
  3154                              <1> 	mov byte [termcopyneeded], 1
  3155                              <1> 	ret
  3156                              <1> %else
  3157 00002752 E808000000          <1> 	call newtermcopy
  3158 00002757 C3                  <1> 	ret
  3159                              <1> %endif
  3160 00002758 00                  <1> 	termcopyneeded db 0
  3161 00002759 00000000            <1> 	termcursorpos dd 0
  3162 0000275D 0000                <1> 	removedvideo dw 0
  3163                              <1> newtermcopy:
  3164 0000275F 60                  <1> 	pusha
  3165 00002760 BF[38D30000]        <1> 	mov edi, videobuf
  3166 00002765 31DB                <1> 	xor ebx, ebx
  3167 00002767 881D[58270000]      <1> 	mov [termcopyneeded], bl
  3168 0000276D 8B1D[73240000]      <1> 	mov ebx, [videobufpos]
  3169 00002773 01DF                <1> 	add edi, ebx
  3170 00002775 893D[59270000]      <1> 	mov [termcursorpos], edi
  3171 0000277B E8CB000000          <1> 	call switchtermcursor
  3172 00002780 803D[589F0000]00    <1> 	cmp byte [guion], 0
  3173 00002787 0F8420000000        <1> 	je near nowincopy
  3174                              <1> %ifdef gui.included
  3175 0000278D C605[D57B0000]00    <1> 	mov byte [mouseselecton], 0
  3176 00002794 C605[A0220000]01    <1> 	mov byte [termcopyon], 1
  3177 0000279B 803D[9F220000]01    <1> 	cmp byte [termguion], 1
  3178 000027A2 0F84BB510000        <1> 	je near windowvideocopy
  3179                              <1> %endif
  3180 000027A8 E997000000          <1> 	jmp nocopytermatall
  3181                              <1> nowincopy:
  3182 000027AD BE00000A00          <1> 	mov esi, 0xA0000
  3183 000027B2 A1[41020000]        <1> 	mov eax, [basecache]
  3184 000027B7 C1E004              <1> 	shl eax, 4
  3185 000027BA 29C6                <1> 	sub esi, eax
  3186 000027BC BF[38D30000]        <1> 	mov edi, videobuf
  3187 000027C1 31C9                <1> 	xor ecx, ecx
  3188 000027C3 668B0D[79240000]    <1> 	mov cx, [charxy]
  3189                              <1> nowincopy2:
  3190 000027CA 668B07              <1> 	mov ax, [edi]
  3191 000027CD 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  3192 000027D3 668B1F              <1> 	mov bx, [edi]
  3193 000027D6 668907              <1> 	mov [edi], ax
  3194 000027D9 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  3195 000027DF 47                  <1> 	inc edi
  3196 000027E0 6639D8              <1> 	cmp ax, bx
  3197 000027E3 743E                <1> 	je nopresentwinfont
  3198 000027E5 4F                  <1> 	dec edi
  3199 000027E6 BB[6A8D0000]        <1> 	mov ebx, fonts
  3200 000027EB 31C0                <1> 	xor eax, eax
  3201 000027ED 8A07                <1> 	mov al, [edi]
  3202 000027EF C1E004              <1> 	shl eax, 4
  3203 000027F2 01C3                <1> 	add ebx, eax
  3204 000027F4 47                  <1> 	inc edi
  3205 000027F5 8A27                <1> 	mov ah, [edi]
  3206 000027F7 31D2                <1> 	xor edx, edx
  3207 000027F9 8A15[79240000]      <1> 	mov dl, [charxy]
  3208 000027FF C1C110              <1> 	rol ecx, 16
  3209 00002802 B110                <1> 	mov cl, 16
  3210                              <1> nowinfont:
  3211 00002804 8A03                <1> 	mov al, [ebx]
  3212 00002806 D0C8                <1> 	ror al, 1
  3213 00002808 80FC07              <1> 	cmp ah, 7
  3214 0000280B 7602                <1> 	jbe notnotfont
  3215 0000280D F6D0                <1> 	not al
  3216                              <1> notnotfont:
  3217 0000280F 8806                <1> 	mov [esi], al
  3218 00002811 01D6                <1> 	add esi, edx
  3219 00002813 43                  <1> 	inc ebx
  3220 00002814 FEC9                <1> 	dec cl
  3221 00002816 80F900              <1> 	cmp cl, 0
  3222 00002819 75E9                <1> 	jne nowinfont
  3223 0000281B C1E204              <1> 	shl edx, 4
  3224 0000281E 29D6                <1> 	sub esi, edx
  3225 00002820 C1C110              <1> 	rol ecx, 16
  3226                              <1> nopresentwinfont:
  3227 00002823 47                  <1> 	inc edi
  3228 00002824 46                  <1> 	inc esi
  3229 00002825 FEC9                <1> 	dec cl
  3230 00002827 80F900              <1> 	cmp cl, 0
  3231 0000282A 759E                <1> 	jne nowincopy2
  3232 0000282C 8A0D[79240000]      <1> 	mov cl, [charxy]
  3233 00002832 31D2                <1> 	xor edx, edx
  3234 00002834 88CA                <1> 	mov dl, cl
  3235 00002836 29D6                <1> 	sub esi, edx
  3236 00002838 C1E204              <1> 	shl edx, 4
  3237 0000283B 01D6                <1> 	add esi, edx
  3238 0000283D FECD                <1> 	dec ch
  3239 0000283F 80FD00              <1> 	cmp ch, 0
  3240 00002842 7586                <1> 	jne nowincopy2
  3241                              <1> nocopytermatall:
  3242 00002844 E802000000          <1> 	call switchtermcursor
  3243 00002849 61                  <1> 	popa
  3244 0000284A C3                  <1> 	ret
  3245                              <1> 	
  3246                              <1> switchtermcursor:
  3247 0000284B 8B3D[59270000]      <1> 	mov edi, [termcursorpos]
  3248 00002851 8A4701              <1> 	mov al, [edi + 1]
  3249 00002854 8A27                <1> 	mov ah, [edi]
  3250 00002856 3C07                <1> 	cmp al, 7
  3251 00002858 7607                <1> 	jbe movlargecursorterm
  3252 0000285A B007                <1> 	mov al, 7
  3253 0000285C E902000000          <1> 	jmp movedcursorterm
  3254                              <1> movlargecursorterm:
  3255 00002861 B0F0                <1> 	mov al, 0xF0
  3256                              <1> movedcursorterm:
  3257 00002863 884701              <1> 	mov [edi + 1], al
  3258 00002866 80FC00              <1> 	cmp ah, 0
  3259 00002869 7504                <1> 	jne fixednocursorterm
  3260 0000286B B420                <1> 	mov ah, " "
  3261 0000286D 8827                <1> 	mov [edi], ah
  3262                              <1> fixednocursorterm:
  3263 0000286F C3                  <1> 	ret
  3264                              <1> %endif
  3265                                      %include "source/dosints.asm"
  3266                              <1> int20h:
  3267 00002870 66B8004C            <1> mov ax, 0x4C00
  3268                              <1> int21h:
  3269                              <1> dostosolleros:
  3270 00002874 6650                <1> 	push ax
  3271 00002876 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3272 0000287A 8ED8                <1> 	mov ds, ax
  3273 0000287C 8EC0                <1> 	mov es, ax
  3274 0000287E 8EE0                <1> 	mov fs, ax
  3275 00002880 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3276 00002884 8EE8                <1> 	mov gs, ax
  3277 00002886 6658                <1> 	pop ax
  3278 00002888 9C                  <1> 	pushf
  3279 00002889 60                  <1> 	pusha
  3280 0000288A 80FC01              <1> 	cmp ah, 1
  3281 0000288D 0F8449000000        <1> 	je near dosgchar
  3282 00002893 80FC02              <1> 	cmp ah, 2
  3283 00002896 0F8447000000        <1> 	je near doswchar
  3284 0000289C 80FC09              <1> 	cmp ah, 9
  3285 0000289F 0F8449000000        <1> 	je near dosprintstr
  3286 000028A5 80FC0A              <1> 	cmp ah, 0xA
  3287 000028A8 0F8456000000        <1> 	je near dosgetstr
  3288 000028AE 80FC2B              <1> 	cmp ah, 0x2B
  3289 000028B1 0F8492000000        <1> 	je near dosgetdate
  3290 000028B7 80FC2C              <1> 	cmp ah, 0x2C
  3291 000028BA 0F84AC000000        <1> 	je near dosgettime
  3292 000028C0 80FC4C              <1> 	cmp ah, 0x4C
  3293 000028C3 0F84C1000000        <1> 	je near dosexit
  3294                              <1> backtodos:
  3295 000028C9 61                  <1> 	popa
  3296 000028CA 9D                  <1> 	popf
  3297 000028CB 6650                <1> 	push ax
  3298 000028CD 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3299 000028D1 8ED8                <1> 	mov ds, ax
  3300 000028D3 8EC0                <1> 	mov es, ax
  3301 000028D5 8EE0                <1> 	mov fs, ax
  3302 000028D7 8EE8                <1> 	mov gs, ax
  3303 000028D9 6658                <1> 	pop ax
  3304 000028DB CF                  <1> 	iret
  3305                              <1> 
  3306                              <1> dosgchar:
  3307 000028DC E84AF9FFFF          <1> 	call getchar
  3308 000028E1 EBE6                <1> 	jmp backtodos
  3309                              <1> 	
  3310                              <1> doswchar:
  3311 000028E3 88D0                <1> 	mov al, dl
  3312 000028E5 B307                <1> 	mov bl, 7
  3313 000028E7 E8A4F9FFFF          <1> 	call prcharint
  3314 000028EC EBDB                <1> 	jmp backtodos
  3315                              <1> 	
  3316                              <1> dosprintstr:
  3317 000028EE 31F6                <1> 	xor esi, esi
  3318 000028F0 6689D6              <1> 	mov si, dx
  3319 000028F3 81C600004000        <1> 	add esi, dosprogloc
  3320 000028F9 B024                <1> 	mov al, "$"
  3321 000028FB B307                <1> 	mov bl, 7
  3322 000028FD E862F4FFFF          <1> 	call printint
  3323 00002902 EBC5                <1> 	jmp backtodos
  3324                              <1> 	
  3325                              <1> dosgetstr:
  3326 00002904 31F6                <1> 	xor esi, esi
  3327 00002906 6689D6              <1> 	mov si, dx
  3328 00002909 81C600004000        <1> 	add esi, dosprogloc
  3329 0000290F B900000000          <1> 	mov ecx, 0
  3330 00002914 8A0E                <1> 	mov cl, [esi]
  3331 00002916 81C602000000        <1> 	add esi, 2
  3332 0000291C 89F7                <1> 	mov edi, esi
  3333 0000291E 8935[45290000]      <1> 	mov [stringstart], esi
  3334 00002924 01CF                <1> 	add edi, ecx
  3335 00002926 B00A                <1> 	mov al, 10
  3336 00002928 B307                <1> 	mov bl, 7
  3337 0000292A E825F5FFFF          <1> 	call rdprintdos
  3338 0000292F 89F1                <1> 	mov ecx, esi
  3339 00002931 2B0D[45290000]      <1> 	sub ecx, [stringstart]
  3340 00002937 8B35[45290000]      <1> 	mov esi, [stringstart]
  3341 0000293D 884EFF              <1> 	mov [esi - 1], cl
  3342 00002940 884EFE              <1> 	mov [esi - 2], cl
  3343 00002943 EB84                <1> 	jmp backtodos
  3344 00002945 00000000            <1> stringstart dd 0
  3345                              <1> 
  3346                              <1> dosgetdate:
  3347 00002949 E8C3260000          <1> 	call time
  3348 0000294E 8A0D[D9510000]      <1> 	mov cl, [RTCtimeYear]
  3349 00002954 B500                <1> 	mov ch, 0
  3350 00002956 6681C1D007          <1> 	add cx, 2000
  3351 0000295B 8A35[D8510000]      <1> 	mov dh, [RTCtimeMonth]
  3352 00002961 8A15[D7510000]      <1> 	mov dl, [RTCtimeDay]
  3353 00002967 E95DFFFFFF          <1> 	jmp backtodos
  3354                              <1> 
  3355                              <1> dosgettime:
  3356 0000296C E8A0260000          <1> 	call time
  3357 00002971 8A2D[D6510000]      <1> 	mov ch, [RTCtimeHour]
  3358 00002977 8A0D[D5510000]      <1> 	mov cl, [RTCtimeMinute]
  3359 0000297D 8A35[D4510000]      <1> 	mov dh, [RTCtimeSecond]
  3360 00002983 B200                <1> 	mov dl, 0
  3361 00002985 E93FFFFFFF          <1> 	jmp backtodos
  3362                              <1> 	
  3363                              <1> dosexit:
  3364 0000298A BE[458D0000]        <1> 	mov esi, line
  3365 0000298F E8C9F3FFFF          <1> 	call print
  3366 00002994 61                  <1> 	popa
  3367 00002995 9D                  <1> 	popf
  3368 00002996 8B25[A2B50000]      <1> 	mov esp, [previousstack]
  3369 0000299C 31DB                <1> 	xor ebx, ebx
  3370 0000299E 88C3                <1> 	mov bl, al
  3371 000029A0 80FB00              <1> 	cmp bl, 0
  3372 000029A3 0F8542F3FFFF        <1> 	jne near exitprog.error
  3373 000029A9 C3                  <1> 	ret
  3374                                      %include "source/solleros.asm"
  3375                              <1> 	;SOLLEROS.ASM
  3376                              <1> os:
  3377                              <1> setdefenv:
  3378 000029AA B02F                <1> 	mov al, '/'
  3379 000029AC A2[AEB50000]        <1> 	mov [currentfolder], al
  3380 000029B1 B801000000          <1> 	mov eax, 1
  3381 000029B6 A3[AAB50000]        <1> 	mov [currentfolderloc], eax
  3382 000029BB E803F4FFFF          <1> 	call clear
  3383                              <1> 	
  3384                              <1> bootfilecheck:
  3385 000029C0 803D[B2B70000]01    <1> 	cmp byte [ranboot], 1
  3386 000029C7 0F8421000000        <1> 	je near nobootfile
  3387                              <1> 	%ifdef hardware.automatic
  3388 000029CD E858370000          <1> 		call initializelater ;Initialize components that have debug messages
  3389                              <1> 	%endif
  3390 000029D2 BF[048D0000]        <1> 	mov edi, bootfilename
  3391 000029D7 BE00004000          <1> 	mov esi, 0x400000
  3392 000029DC E8753B0000          <1> 	call loadfile
  3393 000029E1 81FA00000000        <1> 	cmp edx, 0
  3394 000029E7 7505                <1> 	jne nobootfile
  3395 000029E9 E8B00D0000          <1> 	call progbatchfound
  3396                              <1> nobootfile:	
  3397 000029EE C605[B2B70000]01    <1> 	mov byte [ranboot], 1
  3398                              <1> 
  3399 000029F5 BE[03000000]        <1> 	mov esi, signature
  3400                              <1> .sigcopyloop:	;this prevents an odd error
  3401 000029FA 658A06              <1> 	mov al, [gs:esi]
  3402 000029FD 8806                <1> 	mov [esi], al
  3403 000029FF 46                  <1> 	inc esi
  3404 00002A00 81FE[1D000000]      <1> 	cmp esi, signatureend
  3405 00002A06 72F2                <1> 	jb .sigcopyloop
  3406                              <1> 	
  3407 00002A08 BE[03000000]        <1> 	mov esi, signature
  3408 00002A0D E84BF3FFFF          <1> 	call print
  3409 00002A12 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3410 00002A18 E8F4060000          <1> 	call showdec
  3411 00002A1D BE[458D0000]        <1> 	mov esi, line
  3412 00002A22 E836F3FFFF          <1> 	call print
  3413 00002A27 BE[218D0000]        <1> 	mov esi, userask
  3414 00002A2C E82CF3FFFF          <1> 	call print
  3415                              <1> usercheck:
  3416 00002A31 BE[22CC0000]        <1> 	mov esi, buftxt
  3417 00002A36 BF[22D00000]        <1> 	mov edi, buftxtend
  3418 00002A3B B00A                <1> 	mov al, 10
  3419 00002A3D E800F4FFFF          <1> 	call rdprint
  3420 00002A42 56                  <1> 	push esi
  3421 00002A43 BE[2B8D0000]        <1> 	mov esi, pwdask
  3422 00002A48 E810F3FFFF          <1> 	call print
  3423 00002A4D 5E                  <1> 	pop esi
  3424 00002A4E 46                  <1> 	inc esi
  3425 00002A4F 8935[422B0000]      <1> 	mov [esipass], esi
  3426                              <1> passcheck:
  3427 00002A55 E8D1F7FFFF          <1> 	call getchar
  3428 00002A5A 3C0A                <1> 	cmp al, 10
  3429 00002A5C 0F8436000000        <1> 	je near gotpass
  3430 00002A62 3C08                <1> 	cmp al, 8
  3431 00002A64 0F8410000000        <1> 	je near backpass
  3432 00002A6A 8806                <1> 	mov [esi], al
  3433 00002A6C 46                  <1> 	inc esi
  3434 00002A6D B02A                <1> 	mov al, "*"
  3435 00002A6F E81CF8FFFF          <1> 	call prcharint
  3436 00002A74 EBDF                <1> 	jmp passcheck
  3437 00002A76 08200800            <1> backcursor2 db 8," ",8,0
  3438                              <1> backpass:
  3439 00002A7A 3B35[422B0000]      <1> 	cmp esi, [esipass]
  3440 00002A80 0F84CFFFFFFF        <1> 	je near passcheck
  3441 00002A86 4E                  <1> 	dec esi
  3442 00002A87 C60600              <1> 	mov byte [esi], 0
  3443 00002A8A 56                  <1> 	push esi
  3444 00002A8B BE[762A0000]        <1> 	mov esi, backcursor2
  3445 00002A90 E8C8F2FFFF          <1> 	call print
  3446 00002A95 5E                  <1> 	pop esi
  3447 00002A96 EBBD                <1> 	jmp passcheck
  3448                              <1> gotpass:
  3449 00002A98 B00A                <1> 	mov al, 10
  3450 00002A9A E8F1F7FFFF          <1> 	call prcharint
  3451 00002A9F 30C0                <1> 	xor al, al
  3452 00002AA1 31C9                <1> 	xor ecx, ecx
  3453 00002AA3 8806                <1> 	mov [esi], al
  3454 00002AA5 BB[478D0000]        <1> 	mov ebx, userlst
  3455                              <1> userfind:
  3456 00002AAA BE[22CC0000]        <1> 	mov esi, buftxt
  3457 00002AAF 8A06                <1> 	mov al, [esi]
  3458 00002AB1 3C00                <1> 	cmp al, 0
  3459 00002AB3 0F84F1FEFFFF        <1> 	je near os
  3460 00002AB9 891D[462B0000]      <1> 	mov [usercache], ebx
  3461 00002ABF E860030000          <1> 	call tester
  3462 00002AC4 3C01                <1> 	cmp al, 1
  3463 00002AC6 7416                <1> 	je pwdtest
  3464 00002AC8 41                  <1> 	inc ecx
  3465                              <1> nxtuser:
  3466 00002AC9 8A03                <1> 	mov al, [ebx]
  3467 00002ACB 43                  <1> 	inc ebx
  3468 00002ACC 3C00                <1> 	cmp al, 0
  3469 00002ACE 75F9                <1> 	jne nxtuser
  3470 00002AD0 81FB[6A8D0000]      <1> 	cmp ebx, userlstend
  3471 00002AD6 0F83CEFEFFFF        <1> 	jae near os
  3472 00002ADC EBCC                <1> 	jmp userfind
  3473                              <1> pwdtest:
  3474 00002ADE 46                  <1> 	inc esi
  3475 00002ADF 43                  <1> 	inc ebx
  3476 00002AE0 E83F030000          <1> 	call tester
  3477 00002AE5 3C01                <1> 	cmp al, 1
  3478 00002AE7 7402                <1> 	je pwdrgt
  3479 00002AE9 EBDE                <1> 	jmp nxtuser
  3480                              <1> pwdrgt:
  3481 00002AEB D1E9                <1> 	shr ecx, 1
  3482 00002AED 890D[AEB70000]      <1> 	mov [uid], ecx
  3483 00002AF3 E8CBF2FFFF          <1> 	call clear
  3484 00002AF8 31C9                <1> 	xor ecx, ecx
  3485 00002AFA 41                  <1> 	inc ecx
  3486 00002AFB 890D[84A80100]      <1> 	mov [commandbufpos], ecx
  3487                              <1> returnfromexp:
  3488 00002B01 66B90002            <1> 	mov cx, 200h
  3489 00002B05 BE[22CC0000]        <1> 	mov esi, buftxt
  3490 00002B0A 8935[202E0000]      <1> 	mov [currentcommandloc], esi
  3491 00002B10 E825000000          <1> 	call bufclr
  3492                              <1> clearolddata:
  3493 00002B15 31C0                <1> 	xor eax, eax
  3494 00002B17 A2[B3B70000]        <1> 	mov [IFON], al
  3495 00002B1C A2[B4B70000]        <1> 	mov [IFTRUE], al
  3496 00002B21 A2[1CB80000]        <1> 	mov [BATCHISON], al
  3497 00002B26 A3[18B80000]        <1> 	mov [BATCHPOS], eax
  3498 00002B2B A2[1DB80000]        <1> 	mov [LOOPON], al
  3499 00002B30 A3[1EB80000]        <1> 	mov [LOOPPOS], eax
  3500 00002B35 E933000000          <1> 	jmp nwcmd
  3501                              <1> bufclr:	
  3502 00002B3A 30C0                <1> 	xor al, al
  3503 00002B3C 8806                <1> 	mov [esi], al
  3504 00002B3E 46                  <1> 	inc esi
  3505 00002B3F E2F9                <1> 	loop bufclr
  3506 00002B41 C3                  <1> 	ret
  3507                              <1> 
  3508 00002B42 00000000            <1> esipass dd 0
  3509 00002B46 [478D0000]          <1> usercache dd userlst
  3510                              <1> 	
  3511                              <1> buftxtclear:
  3512 00002B4A 30C0                <1> 	xor al, al
  3513 00002B4C BE[22CC0000]        <1> 	mov esi, buftxt
  3514 00002B51 81FE[22D00000]      <1> clearbuftxt: cmp esi, buf2
  3515 00002B57 730E                <1> 	jae retbufclr
  3516 00002B59 8806                <1> 	mov [esi], al
  3517 00002B5B 46                  <1> 	inc esi
  3518 00002B5C EBF3                <1> 	jmp clearbuftxt
  3519                              <1> 
  3520 00002B5E 39DE                <1> clearitbuf: cmp esi, ebx
  3521 00002B60 7305                <1> 	jae retbufclr
  3522 00002B62 8806                <1> 	mov [esi], al
  3523 00002B64 46                  <1> 	inc esi
  3524 00002B65 EBF7                <1> 	jmp clearitbuf
  3525 00002B67 C3                  <1> retbufclr: ret
  3526                              <1> 
  3527 00002B68 E900000000          <1> full:	jmp nwcmd
  3528                              <1> 
  3529                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3530                              <1> nwcmd:
  3531 00002B6D FB                  <1> 	sti
  3532 00002B6E 31C0                <1> 	xor eax, eax
  3533 00002B70 3905[422D0000]      <1> 	cmp [nextcommandloc], eax
  3534 00002B76 7413                <1> 	je nomultiplecommand
  3535 00002B78 8B35[422D0000]      <1> 	mov esi, [nextcommandloc]
  3536 00002B7E 8935[462D0000]      <1> 	mov [thiscommandloc], esi
  3537 00002B84 E8C6010000          <1> 	call fixvariables
  3538 00002B89 EBE2                <1> 	jmp nwcmd
  3539                              <1> nomultiplecommand:
  3540 00002B8B A3[462D0000]        <1> 	mov [thiscommandloc], eax
  3541 00002B90 3805[F5660000]      <1> 	cmp [threadson], al
  3542 00002B96 7405                <1> 	je noclinwcmd
  3543 00002B98 A2[F5660000]        <1> 	mov [threadson], al
  3544                              <1> noclinwcmd:
  3545 00002B9D B001                <1> 	mov al, 1
  3546 00002B9F 3805[1CB80000]      <1> 	cmp [BATCHISON], al
  3547 00002BA5 7501                <1> 	jne cancel
  3548 00002BA7 C3                  <1> 	ret
  3549 00002BA8 30C0                <1> cancel:	xor al, al
  3550 00002BAA A2[B3B70000]        <1> 	mov [IFON], al
  3551 00002BAF A2[1CB80000]        <1> 	mov [BATCHISON], al
  3552 00002BB4 B05B                <1> 	mov al, '['
  3553 00002BB6 66BB0700            <1> 	mov bx, 7
  3554 00002BBA E8E2F6FFFF          <1> 	call prcharq
  3555 00002BBF 8B35[462B0000]      <1> 	mov esi, [usercache]
  3556 00002BC5 E881F1FFFF          <1> 	call printquiet
  3557 00002BCA BE[358D0000]        <1> 	mov esi, computer
  3558 00002BCF E877F1FFFF          <1> 	call printquiet
  3559 00002BD4 BE[AEB50000]        <1> 	mov esi, currentfolder
  3560 00002BD9 0335[A6B50000]      <1> 	add esi, [lastfolderloc]
  3561 00002BDF E867F1FFFF          <1> 	call printquiet
  3562 00002BE4 BE[408D0000]        <1> 	mov esi, endprompt
  3563 00002BE9 E86FF1FFFF          <1> 	call print
  3564 00002BEE E857FFFFFF          <1> 	call buftxtclear
  3565 00002BF3 BE[22CC0000]        <1> 	mov esi, buftxt
  3566 00002BF8 C605[14220000]01    <1> 	mov byte [commandedit], 1
  3567 00002BFF B00A                <1> 	mov al, 10
  3568 00002C01 66BB0700            <1> 	mov bx, 7
  3569 00002C05 BF[22D00000]        <1> 	mov edi, buftxtend
  3570 00002C0A E833F2FFFF          <1> 	call rdprint
  3571 00002C0F C605[14220000]00    <1> 	mov byte [commandedit], 0
  3572 00002C16 803D[22CC0000]00    <1> 	cmp byte [buftxt], 0
  3573 00002C1D 0F844AFFFFFF        <1> 	je near nwcmd
  3574 00002C23 8B35[84A80100]      <1> gotcmd:	mov esi, [commandbufpos]
  3575 00002C29 8935[80A80100]      <1> 	mov [lastcommandpos], esi
  3576 00002C2F FF05[8CA80100]      <1> 	inc dword [commandsentered]
  3577 00002C35 BF[22CC0000]        <1> 	mov edi, buftxt
  3578 00002C3A 81C6[90A80100]      <1> 	add esi, commandbuf
  3579 00002C40 81FE[90B80100]      <1> 	cmp esi, commandbufend
  3580 00002C46 7605                <1> 	jbe copycommand
  3581 00002C48 BE[90A80100]        <1> 	mov esi, commandbuf
  3582                              <1> copycommand:
  3583 00002C4D 8A07                <1> 	mov al, [edi]
  3584 00002C4F 8806                <1> 	mov [esi], al
  3585 00002C51 47                  <1> 	inc edi
  3586 00002C52 46                  <1> 	inc esi
  3587 00002C53 3C00                <1> 	cmp al, 0
  3588 00002C55 740F                <1> 	je donecopy
  3589 00002C57 81FE[90B80100]      <1> 	cmp esi, commandbufend
  3590 00002C5D 76EE                <1> 	jbe copycommand
  3591 00002C5F BE[90A80100]        <1> 	mov esi, commandbuf
  3592 00002C64 EBE7                <1> 	jmp copycommand
  3593                              <1> donecopy:
  3594 00002C66 81EE[90A80100]      <1> 	sub esi, commandbuf
  3595 00002C6C 8935[84A80100]      <1> 	mov [commandbufpos], esi
  3596 00002C72 E8D3000000          <1> 	call run
  3597 00002C77 E9F1FEFFFF          <1> 	jmp nwcmd
  3598                              <1> 
  3599 00002C7C E8C9FEFFFF          <1> input:	call buftxtclear
  3600 00002C81 BE[22CC0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3601 00002C86 BF[22D00000]        <1> 	mov edi, buftxtend
  3602 00002C8B B00A                <1> stdin:	mov al, 10
  3603 00002C8D B307                <1> 	mov bl, 7
  3604 00002C8F E8AEF1FFFF          <1> 	call rdprint
  3605 00002C94 C3                  <1> 	ret
  3606                              <1> 
  3607                              <1> replacevariable:
  3608 00002C95 8A4601              <1> 	mov al, [esi + 1]
  3609 00002C98 C64601FF            <1> 	mov byte [esi + 1], 255
  3610 00002C9C 3C24                <1> 	cmp al, "$"
  3611 00002C9E 0F84AB000000        <1> 	je near fixvariables
  3612 00002CA4 884601              <1> 	mov [esi + 1], al
  3613 00002CA7 56                  <1> 	push esi
  3614 00002CA8 81EE[22CC0000]      <1> 	sub esi, buftxt
  3615 00002CAE 89F7                <1> 	mov edi, esi
  3616 00002CB0 81C6[22CC0000]      <1> 	add esi, buftxt
  3617 00002CB6 47                  <1> 	inc edi
  3618 00002CB7 BB[22B80000]        <1> 	mov ebx, variables
  3619 00002CBC E800150000          <1> 	call nxtvrech
  3620 00002CC1 89F7                <1> 	mov edi, esi
  3621 00002CC3 31DB                <1> 	xor ebx, ebx
  3622 00002CC5 4E                  <1> 	dec esi
  3623                              <1> findvarname:
  3624 00002CC6 4E                  <1> 	dec esi
  3625 00002CC7 8A06                <1> 	mov al, [esi]
  3626 00002CC9 43                  <1> 	inc ebx
  3627 00002CCA 3C04                <1> 	cmp al, 4
  3628 00002CCC 75F8                <1> 	jne findvarname
  3629 00002CCE 5E                  <1> 	pop esi
  3630                              <1> replacevarloop:
  3631 00002CCF 8A07                <1> 	mov al, [edi]
  3632 00002CD1 3C00                <1> 	cmp al, 0
  3633 00002CD3 0F8413000000        <1> 	je near compressbuftxt
  3634 00002CD9 81FB00000000        <1> 	cmp ebx, 0
  3635 00002CDF 0F8416000000        <1> 	je near expandbuftxt
  3636 00002CE5 8806                <1> 	mov [esi], al
  3637 00002CE7 4B                  <1> 	dec ebx
  3638 00002CE8 46                  <1> 	inc esi
  3639 00002CE9 47                  <1> 	inc edi
  3640 00002CEA EBE3                <1> 	jmp replacevarloop
  3641                              <1> compressbuftxt:
  3642 00002CEC 8A041E              <1> 	mov al, [esi + ebx]
  3643 00002CEF 8806                <1> 	mov [esi], al
  3644 00002CF1 46                  <1> 	inc esi
  3645 00002CF2 3C00                <1> 	cmp al, 0
  3646 00002CF4 75F6                <1> 	jne compressbuftxt
  3647 00002CF6 E954000000          <1> 	jmp fixvariables
  3648                              <1> expandbuftxt:
  3649 00002CFB 89F1                <1> 	mov ecx, esi
  3650 00002CFD 8A26                <1> 	mov ah, [esi]
  3651                              <1> expandbuftxtlp:
  3652 00002CFF 8A1E                <1> 	mov bl, [esi]
  3653 00002D01 46                  <1> 	inc esi
  3654 00002D02 8A3E                <1> 	mov bh, [esi]
  3655 00002D04 8826                <1> 	mov [esi], ah
  3656 00002D06 88FC                <1> 	mov ah, bh
  3657 00002D08 80FB00              <1> 	cmp bl, 0
  3658 00002D0B 75F2                <1> 	jne expandbuftxtlp
  3659 00002D0D 89CE                <1> 	mov esi, ecx
  3660 00002D0F 8806                <1> 	mov [esi], al
  3661 00002D11 47                  <1> 	inc edi
  3662 00002D12 8A07                <1> 	mov al, [edi]
  3663 00002D14 3C00                <1> 	cmp al, 0
  3664 00002D16 0F8433000000        <1> 	je near fixvariables
  3665 00002D1C 46                  <1> 	inc esi
  3666 00002D1D EBDC                <1> 	jmp expandbuftxt
  3667                              <1> multipleprogline:
  3668 00002D1F 30E4                <1> 	xor ah, ah
  3669 00002D21 8826                <1> 	mov [esi], ah
  3670 00002D23 46                  <1> 	inc esi
  3671 00002D24 8935[422D0000]      <1> 	mov [nextcommandloc], esi
  3672 00002D2A E93E000000          <1> 	jmp donefixvariables
  3673                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3674 00002D2F 46                  <1> 	inc esi
  3675 00002D30 8A06                <1> 	mov al, [esi]
  3676 00002D32 C606FF              <1> 	mov byte [esi], 255
  3677 00002D35 3C23                <1> 	cmp al, '#'
  3678 00002D37 7416                <1> 	je fixvariables
  3679 00002D39 4E                  <1> 	dec esi
  3680 00002D3A C60600              <1> 	mov byte [esi], 0
  3681 00002D3D E90D000000          <1> 	jmp fixvariables
  3682                              <1> 	
  3683 00002D42 00000000            <1> nextcommandloc dd 0
  3684 00002D46 00000000            <1> thiscommandloc dd 0	
  3685                              <1> run:
  3686 00002D4A BE[22CC0000]        <1> 	mov esi, buftxt
  3687 00002D4F 46                  <1> fixvariables:	inc esi
  3688 00002D50 8A06                <1> 	mov al, [esi]
  3689 00002D52 3C23                <1> 	cmp al, '#'	;inline comment
  3690 00002D54 74D9                <1> 	je inlinecomment
  3691 00002D56 3C24                <1> 	cmp al, '$' ;variable
  3692 00002D58 0F8437FFFFFF        <1> 	je near replacevariable
  3693 00002D5E 3C3B                <1> 	cmp al, ';' ;program list
  3694 00002D60 74BD                <1> 	je multipleprogline
  3695 00002D62 3C00                <1> 	cmp al, 0
  3696 00002D64 75E9                <1> 	jne fixvariables
  3697 00002D66 31C0                <1> 	xor eax, eax
  3698 00002D68 A3[422D0000]        <1> 	mov [nextcommandloc], eax
  3699                              <1> donefixvariables:
  3700 00002D6D 803D[0B330000]00    <1> 	cmp byte [indexdone], 0
  3701 00002D74 7505                <1> 	jne progtest
  3702 00002D76 E8FB040000          <1> 	call indexfiles
  3703                              <1> progtest:
  3704 00002D7B 31C0                <1> 	xor eax, eax
  3705 00002D7D BB[A2B10000]        <1> 	mov ebx, fileindex
  3706 00002D82 668B03              <1> prgnxt:	mov ax, [ebx]
  3707 00002D85 B1FF                <1> 	mov cl, 255
  3708 00002D87 B52C                <1> 	mov ch, 44
  3709 00002D89 6639C8              <1> 	cmp ax, cx
  3710 00002D8C 740B                <1> 	je fndprg
  3711 00002D8E 43                  <1> 	inc ebx
  3712 00002D8F 81FB[A2B50000]      <1> 	cmp ebx, fileindexend
  3713 00002D95 735D                <1> 	jae prgnf
  3714 00002D97 EBE9                <1> 	jmp prgnxt
  3715 00002D99 81C302000000        <1> fndprg: add ebx, 2
  3716 00002D9F 31C9                <1> 	xor ecx, ecx
  3717 00002DA1 BE[22CC0000]        <1> 	mov esi, buftxt
  3718 00002DA6 390D[462D0000]      <1> 	cmp [thiscommandloc], ecx
  3719 00002DAC 7406                <1> 	je noprgtstmultiple
  3720 00002DAE 8B35[462D0000]      <1> 	mov esi, [thiscommandloc]
  3721                              <1> noprgtstmultiple:
  3722 00002DB4 E8A6000000          <1> 	call cndtest
  3723 00002DB9 3C01                <1> 	cmp al, 1
  3724 00002DBB 7302                <1> 	jae prggood
  3725 00002DBD EBC3                <1> 	jmp prgnxt
  3726 00002DBF 81FB[A2B50000]      <1> prggood: cmp ebx, fileindexend
  3727 00002DC5 7358                <1> 	jae prgdn
  3728 00002DC7 31C0                <1> 	xor eax, eax
  3729 00002DC9 BE[22CC0000]        <1> 	mov esi, buftxt
  3730 00002DCE 3905[462D0000]      <1> 	cmp [thiscommandloc], eax
  3731 00002DD4 7406                <1> 	je noprggoodmul
  3732 00002DD6 8B35[462D0000]      <1> 	mov esi, [thiscommandloc]
  3733                              <1> noprggoodmul:
  3734 00002DDC 8935[202E0000]      <1> 	mov [currentcommandloc], esi
  3735 00002DE2 81C303000000        <1> 	add ebx, 3
  3736 00002DE8 8B3B                <1> 	mov edi, [ebx]
  3737 00002DEA C605[F5660000]02    <1> 	mov byte [threadson], 2
  3738 00002DF1 FFD7                <1> 	call edi
  3739 00002DF3 C3                  <1> 	ret
  3740                              <1> prgnf:	
  3741 00002DF4 8B35[202E0000]      <1> 	mov esi, [currentcommandloc]
  3742 00002DFA 8A06                <1> 	mov al, [esi]
  3743 00002DFC 3C00                <1> 	cmp al, 0
  3744 00002DFE 741F                <1> 	je prgdn
  3745 00002E00 BE[0C8D0000]        <1> 	mov esi, notfound1
  3746 00002E05 E853EFFFFF          <1> 	call print
  3747 00002E0A 8B35[202E0000]      <1> 	mov esi, [currentcommandloc]
  3748 00002E10 E848EFFFFF          <1> 	call print
  3749 00002E15 BE[148D0000]        <1> 	mov esi, notfound2
  3750 00002E1A E83EEFFFFF          <1> 	call print
  3751 00002E1F C3                  <1> prgdn:	ret
  3752                              <1> 
  3753 00002E20 00000000            <1> currentcommandloc dd 0
  3754                              <1> 
  3755                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3756 00002E24 6631C0              <1> 	xor ax, ax
  3757 00002E27 8A06                <1> retest:	mov al, [esi]
  3758 00002E29 8A23                <1> 	mov ah, [ebx]
  3759 00002E2B 3C00                <1> 	cmp al, 0
  3760 00002E2D 7408                <1> 	je testtrue
  3761 00002E2F 38E0                <1> 	cmp al, ah
  3762 00002E31 750C                <1> 	jne testfalse
  3763 00002E33 43                  <1> 	inc ebx
  3764 00002E34 46                  <1> 	inc esi
  3765 00002E35 EBF0                <1> 	jmp retest
  3766                              <1> testtrue:
  3767 00002E37 80FC00              <1> 	cmp ah, 0
  3768 00002E3A 7503                <1> 	jne testfalse
  3769 00002E3C B001                <1> 	mov al, 1
  3770 00002E3E C3                  <1> 	ret
  3771                              <1> testfalse:
  3772 00002E3F 30C0                <1> 	xor al, al
  3773 00002E41 C3                  <1> 	ret
  3774                              <1> 
  3775                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3776 00002E42 30C0                <1> 	xor al, al
  3777                              <1> opretest:
  3778 00002E44 8A06                <1> 	mov al, [esi]
  3779 00002E46 8A23                <1> 	mov ah, [ebx]
  3780 00002E48 38E0                <1> 	cmp al, ah
  3781 00002E4A 7510                <1> 	jne optestfalse
  3782 00002E4C 80FC00              <1> 	cmp ah, 0
  3783 00002E4F 7404                <1> 	je optesttrue
  3784 00002E51 43                  <1> 	inc ebx
  3785 00002E52 46                  <1> 	inc esi
  3786 00002E53 EBEF                <1> 	jmp opretest
  3787                              <1> optesttrue:
  3788 00002E55 3C00                <1> 	cmp al, 0
  3789 00002E57 7503                <1> 	jne optestfalse
  3790 00002E59 B001                <1> 	mov al, 1
  3791 00002E5B C3                  <1> 	ret
  3792                              <1> optestfalse:
  3793 00002E5C 30C0                <1> 	xor al, al
  3794 00002E5E C3                  <1> 	ret
  3795                              <1> 
  3796                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3797 00002E5F 30C0                <1> 	xor al, al
  3798 00002E61 8A06                <1> cndretest:	mov al, [esi]
  3799 00002E63 8A23                <1> 	mov ah, [ebx]
  3800 00002E65 38CC                <1> 	cmp ah, cl
  3801 00002E67 7408                <1> 	je cndtesttrue
  3802 00002E69 38E0                <1> 	cmp al, ah
  3803 00002E6B 750B                <1> 	jne cndtestfalse
  3804 00002E6D 43                  <1> 	inc ebx
  3805 00002E6E 46                  <1> 	inc esi
  3806 00002E6F EBF0                <1> 	jmp cndretest
  3807                              <1> cndtesttrue:
  3808 00002E71 38C8                <1> 	cmp al, cl
  3809 00002E73 7506                <1> 	jne cndtestalmost
  3810 00002E75 B001                <1> 	mov al, 1
  3811 00002E77 C3                  <1> 	ret
  3812                              <1> cndtestfalse:
  3813 00002E78 30C0                <1> 	xor al, al
  3814 00002E7A C3                  <1> 	ret
  3815                              <1> cndtestalmost:
  3816 00002E7B B002                <1> 	mov al, 2
  3817 00002E7D C3                  <1> 	ret
  3818                              <1> 	
  3819                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3820                              <1> 		                ;ends if array seperator is found backwards after 0
  3821                              <1> 	arnxt:	      
  3822 00002E7E 88E8                <1> 		mov al, ch
  3823 00002E80 88CC                <1> 		mov ah, cl        
  3824 00002E82 663906              <1> 		cmp [esi], ax
  3825 00002E85 744D                <1> 		je ardn
  3826 00002E87 66390E              <1> 		cmp [esi], cx
  3827 00002E8A 7407                <1> 		je arfnd
  3828 00002E8C 46                  <1> 		inc esi
  3829 00002E8D 39DE                <1> 		cmp esi, ebx
  3830 00002E8F 7343                <1> 		jae ardn
  3831 00002E91 EBEB                <1> 		jmp arnxt
  3832 00002E93 81C602000000        <1> 	arfnd: add esi, 2
  3833 00002E99 891D[D52E0000]      <1> 		mov [arbx], ebx
  3834 00002E9F 890D[D92E0000]      <1> 		mov [arcx], ecx
  3835 00002EA5 E8B3EEFFFF          <1> 		call print
  3836 00002EAA 8935[DB2E0000]      <1> 		mov [arsi], esi
  3837 00002EB0 BE[458D0000]        <1> 		mov esi, line
  3838 00002EB5 E8A3EEFFFF          <1> 		call print
  3839 00002EBA 8B1D[D52E0000]      <1> 		mov ebx, [arbx]
  3840 00002EC0 668B0D[D92E0000]    <1> 		mov cx, [arcx]
  3841 00002EC7 8B35[DB2E0000]      <1> 		mov esi, [arsi]
  3842 00002ECD 46                  <1> 		inc esi
  3843 00002ECE 39DE                <1> 		cmp esi, ebx
  3844 00002ED0 7302                <1> 		jae ardn
  3845 00002ED2 EBAA                <1> 		jmp arnxt
  3846 00002ED4 C3                  <1> 	ardn:	ret
  3847 00002ED5 00000000            <1> arbx:	dw 0,0
  3848 00002ED9 0000                <1> arcx:	db 0,0
  3849 00002EDB 00000000            <1> arsi:	dw 0,0
  3850                              <1> 
  3851                              <1> clearbuffer:
  3852 00002EDF BE[22D00000]        <1> 	mov esi, buf2
  3853 00002EE4 B030                <1> 	mov al, '0'
  3854 00002EE6 81FE[36D00000]      <1> clearbuf: cmp esi, numbuf
  3855 00002EEC 7305                <1> 	jae doneclearbuff
  3856 00002EEE 8806                <1> 	mov [esi], al
  3857 00002EF0 46                  <1> 	inc esi
  3858 00002EF1 EBF3                <1> 	jmp clearbuf
  3859                              <1> doneclearbuff: 
  3860 00002EF3 C3                  <1> 		ret
  3861                              <1> 
  3862                              <1> convert:
  3863 00002EF4 4E                  <1> 	dec esi
  3864 00002EF5 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3865                              <1> .lp:
  3866 00002EF7 89DE                <1> 	mov esi, ebx
  3867 00002EF9 81EE09000000        <1> 	sub esi, 9
  3868 00002EFF 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3869 00002F05 720A                <1> 	jb .8
  3870 00002F07 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3871 00002F0D FE06                <1> 	inc byte [esi]
  3872 00002F0F EBE6                <1> 	jmp .lp
  3873 00002F11 46                  <1> .8:	inc esi
  3874 00002F12 81F900E1F505        <1> 	cmp ecx, 100000000
  3875 00002F18 720A                <1> 	jb .7
  3876 00002F1A 81E900E1F505        <1> 	sub ecx, 100000000
  3877 00002F20 FE06                <1> 	inc byte [esi]
  3878 00002F22 EBD3                <1> 	jmp .lp
  3879 00002F24 46                  <1> .7:	inc esi
  3880 00002F25 81F980969800        <1> 	cmp ecx, 10000000
  3881 00002F2B 720A                <1> 	jb .6
  3882 00002F2D 81E980969800        <1> 	sub ecx, 10000000
  3883 00002F33 FE06                <1> 	inc byte [esi]
  3884 00002F35 EBC0                <1> 	jmp .lp
  3885 00002F37 46                  <1> .6:	inc esi
  3886 00002F38 81F940420F00        <1> 	cmp ecx, 1000000
  3887 00002F3E 720A                <1> 	jb .5
  3888 00002F40 81E940420F00        <1> 	sub ecx, 1000000
  3889 00002F46 FE06                <1> 	inc byte [esi]
  3890 00002F48 EBAD                <1> 	jmp .lp
  3891 00002F4A 46                  <1> .5:	inc esi
  3892 00002F4B 81F9A0860100        <1> 	cmp ecx, 100000
  3893 00002F51 720A                <1> 	jb .4
  3894 00002F53 81E9A0860100        <1> 	sub ecx, 100000
  3895 00002F59 FE06                <1> 	inc byte [esi]
  3896 00002F5B EB9A                <1> 	jmp .lp
  3897 00002F5D 46                  <1> .4:	inc esi
  3898 00002F5E 81F910270000        <1> 	cmp ecx, 10000
  3899 00002F64 720A                <1> 	jb .3
  3900 00002F66 81E910270000        <1> 	sub ecx, 10000
  3901 00002F6C FE06                <1> 	inc byte [esi]
  3902 00002F6E EB87                <1> 	jmp .lp
  3903 00002F70 46                  <1> .3:	inc esi
  3904 00002F71 81F9E8030000        <1> 	cmp ecx, 1000
  3905 00002F77 720D                <1> 	jb .2
  3906 00002F79 81E9E8030000        <1> 	sub ecx, 1000
  3907 00002F7F FE06                <1> 	inc byte [esi]
  3908 00002F81 E971FFFFFF          <1> 	jmp .lp
  3909 00002F86 46                  <1> .2:	inc esi
  3910 00002F87 81F964000000        <1> 	cmp ecx, 100
  3911 00002F8D 720D                <1> 	jb .1
  3912 00002F8F 81E964000000        <1> 	sub ecx, 100
  3913 00002F95 FE06                <1> 	inc byte [esi]
  3914 00002F97 E95BFFFFFF          <1> 	jmp .lp
  3915 00002F9C 46                  <1> .1:	inc esi
  3916 00002F9D 81F90A000000        <1> 	cmp ecx, 10
  3917 00002FA3 720D                <1> 	jb .0
  3918 00002FA5 81E90A000000        <1> 	sub ecx, 10
  3919 00002FAB FE06                <1> 	inc byte [esi]
  3920 00002FAD E945FFFFFF          <1> 	jmp .lp
  3921 00002FB2 46                  <1> .0:	inc esi
  3922 00002FB3 81F901000000        <1> 	cmp ecx, 1
  3923 00002FB9 720D                <1> 	jb .dn
  3924 00002FBB 81E901000000        <1> 	sub ecx, 1
  3925 00002FC1 FE06                <1> 	inc byte [esi]
  3926 00002FC3 E92FFFFFFF          <1> 	jmp .lp
  3927                              <1> .dn:
  3928 00002FC8 C3                  <1> 	ret
  3929                              <1> 
  3930                              <1> 	
  3931                              <1> 
  3932 00002FC9 00<rept>            <1> hexnumber times 8 db 0
  3933 00002FD1 202000              <1> hexnumberend db "  ",0
  3934                              <1> 
  3935                              <1> converthex:
  3936                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3937 00002FD4 56                  <1> 	push esi
  3938 00002FD5 B030                <1> 	mov al, "0"
  3939 00002FD7 39FE                <1> .clearlp: cmp esi, edi
  3940 00002FD9 7305                <1> 	jae .doneclear
  3941 00002FDB 8806                <1> 	mov [esi], al
  3942 00002FDD 46                  <1> 	inc esi
  3943 00002FDE EBF7                <1> 	jmp .clearlp
  3944                              <1> .doneclear:
  3945 00002FE0 81EE02000000        <1> 	sub esi, 2
  3946 00002FE6 89C8                <1> 	mov eax, ecx
  3947                              <1> .loop:
  3948 00002FE8 30FF                <1> 	xor bh, bh
  3949 00002FEA 88C3                <1> 	mov bl, al
  3950 00002FEC 66C1E304            <1> 	shl bx, 4
  3951 00002FF0 C0EB04              <1> 	shr bl, 4
  3952 00002FF3 86DF                <1> 	xchg bl, bh ;they are backwards
  3953 00002FF5 80C330              <1> 	add bl, 48
  3954 00002FF8 80FB39              <1> 	cmp bl, "9"
  3955 00002FFB 7609                <1> 	jbe .goodbl
  3956 00002FFD 80EB30              <1> 	sub bl, 48
  3957 00003000 80EB0A              <1> 	sub bl, 0xA
  3958 00003003 80C341              <1> 	add bl, "A"
  3959                              <1> .goodbl:
  3960 00003006 80C730              <1> 	add bh, 48
  3961 00003009 80FF39              <1> 	cmp bh, "9"
  3962 0000300C 7609                <1> 	jbe .goodbh
  3963 0000300E 80EF30              <1> 	sub bh, 48
  3964 00003011 80EF0A              <1> 	sub bh, 0xA
  3965 00003014 80C741              <1> 	add bh, "A"
  3966                              <1> .goodbh:
  3967 00003017 C1E808              <1> 	shr eax, 8
  3968 0000301A 66891E              <1> 	mov [esi], bx
  3969 0000301D 81EE02000000        <1> 	sub esi, 2
  3970 00003023 3B3424              <1> 	cmp esi, [esp]
  3971 00003026 7207                <1> 	jb .done
  3972 00003028 3D00000000          <1> 	cmp eax, 0
  3973 0000302D 75B9                <1> 	jne .loop
  3974                              <1> .done:
  3975 0000302F 5E                  <1> 	pop esi
  3976 00003030 C3                  <1> 	ret
  3977                              <1> 	
  3978                              <1> 	
  3979 00003031 00                  <1> smallhex db 0
  3980 00003032 01                  <1> firsthexshown db 1
  3981                              <1> showhexsmall:
  3982 00003033 C605[31300000]01    <1> 	mov byte [smallhex], 1
  3983 0000303A E808000000          <1> 	call showhex
  3984 0000303F C605[31300000]00    <1> 	mov byte [smallhex], 0
  3985 00003046 C3                  <1> 	ret
  3986                              <1> showhex:
  3987 00003047 60                  <1> 	pusha
  3988 00003048 BE[C92F0000]        <1> 	mov esi, hexnumber
  3989 0000304D BF[D12F0000]        <1> 	mov edi, hexnumberend
  3990 00003052 E87DFFFFFF          <1> 	call converthex
  3991 00003057 803D[32300000]01    <1> 	cmp byte [firsthexshown], 1
  3992 0000305E 7503                <1> 	jne .show
  3993 00003060 6631D2              <1> 	xor dx, dx
  3994                              <1> .show:
  3995 00003063 803D[32300000]03    <1> 	cmp byte [firsthexshown], 3
  3996 0000306A 750A                <1> 	jne .nonewhexline
  3997 0000306C BE[458D0000]        <1> 	mov esi, line
  3998 00003071 E8E7ECFFFF          <1> 	call print
  3999                              <1> .nonewhexline:
  4000 00003076 803D[32300000]04    <1> 	cmp byte [firsthexshown], 4
  4001 0000307D 7527                <1> 	jne .notab
  4002 0000307F B1A0                <1> 	mov cl, 160
  4003 00003081 28D1                <1> 	sub cl, dl
  4004 00003083 C0E905              <1> 	shr cl, 5
  4005 00003086 C0E105              <1> 	shl cl, 5
  4006 00003089 80F900              <1> 	cmp cl, 0
  4007 0000308C 750F                <1> 	jne .nonewline
  4008 0000308E BE[458D0000]        <1> 	mov esi, line
  4009 00003093 E8C5ECFFFF          <1> 	call print
  4010 00003098 E909000000          <1> 	jmp .notab
  4011                              <1> .nonewline:
  4012 0000309D 80C20F              <1> 	add dl, 15
  4013 000030A0 C0EA04              <1> 	shr dl, 4
  4014 000030A3 C0E204              <1> 	shl dl, 4
  4015                              <1> .notab:
  4016 000030A6 BE[C92F0000]        <1> 	mov esi, hexnumber
  4017 000030AB 803D[31300000]01    <1> 	cmp byte [smallhex],1
  4018 000030B2 7506                <1> 	jne .nosmall
  4019 000030B4 81C606000000        <1> 	add esi, 6
  4020                              <1> .nosmall:
  4021 000030BA 803D[32300000]05    <1> 	cmp byte [firsthexshown], 5
  4022 000030C1 750A                <1> 	jne .noquiet
  4023 000030C3 E883ECFFFF          <1> 	call printquiet
  4024 000030C8 E918000000          <1> 	jmp .donequiet
  4025                              <1> .noquiet:
  4026 000030CD 803D[32300000]06    <1> 	cmp byte [firsthexshown], 6
  4027 000030D4 750A                <1> 	jne .normal
  4028 000030D6 E864ECFFFF          <1> 	call printhighlight
  4029 000030DB E905000000          <1> 	jmp .donequiet
  4030                              <1> .normal:
  4031 000030E0 E878ECFFFF          <1> 	call print
  4032                              <1> .donequiet:
  4033 000030E5 803D[32300000]02    <1> 	cmp byte [firsthexshown], 2
  4034 000030EC 750A                <1> 	jne .shown
  4035 000030EE BE[458D0000]        <1> 	mov esi, line
  4036 000030F3 E865ECFFFF          <1> 	call print
  4037                              <1> .shown:
  4038 000030F8 C605[32300000]00    <1> 	mov byte [firsthexshown], 0
  4039 000030FF 61                  <1> 	popa
  4040 00003100 C3                  <1> 	ret
  4041                              <1> 
  4042                              <1> 
  4043 00003101 303030303030303030- <1> decnumber db "00000000000000"
  4044 0000310A 3030303030          <1>
  4045 0000310F 2000                <1> decnumberend: db " ",0
  4046                              <1> 
  4047                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4048 00003111 60                  <1> 	pusha
  4049 00003112 BF[01310000]        <1> 	mov edi, decnumber
  4050 00003117 BE[0F310000]        <1> 	mov esi, decnumberend
  4051                              <1> .clear:
  4052 0000311C C60730              <1> 	mov byte [edi], '0'
  4053 0000311F 47                  <1> 	inc edi
  4054 00003120 39F7                <1> 	cmp edi, esi
  4055 00003122 72F8                <1> 	jb .clear
  4056 00003124 BF[01310000]        <1> 	mov edi, decnumber
  4057 00003129 E8C6FDFFFF          <1> 	call convert
  4058 0000312E 803D[32300000]01    <1> 	cmp byte [firsthexshown], 1
  4059 00003135 7503                <1> 	jne .show
  4060 00003137 6631D2              <1> 	xor dx, dx
  4061                              <1> .show:
  4062 0000313A 803D[32300000]03    <1> 	cmp byte [firsthexshown], 3
  4063 00003141 750A                <1> 	jne .nonewdecline
  4064 00003143 BE[458D0000]        <1> 	mov esi, line
  4065 00003148 E810ECFFFF          <1> 	call print
  4066                              <1> .nonewdecline:
  4067 0000314D 803D[32300000]04    <1> 	cmp byte [firsthexshown], 4
  4068 00003154 7527                <1> 	jne .notab
  4069 00003156 B1A0                <1> 	mov cl, 160
  4070 00003158 28D1                <1> 	sub cl, dl
  4071 0000315A C0E905              <1> 	shr cl, 5
  4072 0000315D C0E105              <1> 	shl cl, 5
  4073 00003160 80F900              <1> 	cmp cl, 0
  4074 00003163 750F                <1> 	jne .nonewline
  4075 00003165 BE[458D0000]        <1> 	mov esi, line
  4076 0000316A E8EEEBFFFF          <1> 	call print
  4077 0000316F E909000000          <1> 	jmp .notab
  4078                              <1> .nonewline:
  4079 00003174 80C20F              <1> 	add dl, 15
  4080 00003177 C0EA04              <1> 	shr dl, 4
  4081 0000317A C0E204              <1> 	shl dl, 4
  4082                              <1> .notab:
  4083 0000317D BE[01310000]        <1> 	mov esi, decnumber
  4084 00003182 4E                  <1> 	dec esi
  4085                              <1> .sifind:
  4086 00003183 46                  <1> 	inc esi
  4087 00003184 803E30              <1> 	cmp byte [esi], '0'
  4088 00003187 74FA                <1> 	je .sifind
  4089 00003189 E8CFEBFFFF          <1> 	call print
  4090 0000318E 803D[32300000]02    <1> 	cmp byte [firsthexshown], 2
  4091 00003195 750A                <1> 	jne .shown
  4092 00003197 BE[458D0000]        <1> 	mov esi, line
  4093 0000319C E8BCEBFFFF          <1> 	call print
  4094                              <1> .shown:
  4095 000031A1 C605[32300000]00    <1> 	mov byte [firsthexshown], 0
  4096 000031A8 61                  <1> 	popa
  4097 000031A9 C3                  <1> 	ret
  4098                              <1> 	
  4099                              <1> cnvrthextxt:
  4100 000031AA 31C9                <1> 	xor ecx, ecx
  4101 000031AC 31C0                <1> 	xor eax, eax
  4102 000031AE 31D2                <1> 	xor edx, edx
  4103 000031B0 31DB                <1> 	xor ebx, ebx
  4104 000031B2 4E                  <1> 	dec esi
  4105                              <1> .end:
  4106 000031B3 46                  <1> 	inc esi
  4107 000031B4 8A06                <1> 	mov al, [esi]
  4108 000031B6 3C00                <1> 	cmp al, 0
  4109 000031B8 75F9                <1> 	jne .end
  4110                              <1> .loop:
  4111 000031BA 4E                  <1> 	dec esi
  4112 000031BB 8A06                <1> 	mov al, [esi]
  4113 000031BD 3C41                <1> 	cmp al, "A"
  4114 000031BF 7328                <1> 	jae .char
  4115 000031C1 2C30                <1> 	sub al, 48
  4116 000031C3 3C10                <1> 	cmp al, 16
  4117 000031C5 7721                <1> 	ja .done
  4118                              <1> .donechar:
  4119 000031C7 81FA00000000        <1> 	cmp edx, 0
  4120 000031CD 740E                <1> 	je .noshl
  4121 000031CF 89D3                <1> 	mov ebx, edx
  4122                              <1> .shl:
  4123 000031D1 C1E004              <1> 	shl eax, 4
  4124 000031D4 4B                  <1> 	dec ebx
  4125 000031D5 81FB00000000        <1> 	cmp ebx, 0
  4126 000031DB 75F4                <1> 	jne .shl
  4127                              <1> .noshl:
  4128 000031DD 42                  <1> 	inc edx
  4129 000031DE 01C1                <1> 	add ecx, eax
  4130 000031E0 81FA08000000        <1> 	cmp edx, 8
  4131 000031E6 72D2                <1> 	jb .loop
  4132                              <1> .done:
  4133 000031E8 C3                  <1> 	ret
  4134                              <1> .char:
  4135 000031E9 3C46                <1> 	cmp al, "F"
  4136 000031EB 77FB                <1> 	ja .done
  4137 000031ED 2C41                <1> 	sub al, "A"
  4138 000031EF 040A                <1> 	add al, 0xA
  4139 000031F1 EBD4                <1> 	jmp .donechar
  4140                              <1> 	
  4141                              <1> 	
  4142                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4143 000031F3 31C9                <1> 	xor ecx, ecx
  4144 000031F5 31C0                <1> 	xor eax, eax
  4145 000031F7 31D2                <1> 	xor edx, edx
  4146 000031F9 31DB                <1> 	xor ebx, ebx
  4147 000031FB 4E                  <1> 	dec esi
  4148                              <1> .lp:
  4149 000031FC 46                  <1> 	inc esi
  4150 000031FD 8A06                <1> 	mov al, [esi]
  4151 000031FF 3C00                <1> 	cmp al, 0
  4152 00003201 75F9                <1> 	jne .lp
  4153 00003203 4E                  <1> 	dec esi
  4154 00003204 8A06                <1> 	mov al, [esi]
  4155 00003206 3C2E                <1> 	cmp al, '.'
  4156 00003208 7503                <1> 	jne .dot
  4157 0000320A 46                  <1> 	inc esi
  4158 0000320B EBEF                <1> 	jmp .lp
  4159                              <1> .dot:
  4160 0000320D 3C20                <1> 	cmp al, ' '
  4161 0000320F 7404                <1> 	je .zero
  4162 00003211 3C30                <1> 	cmp al, '0'
  4163 00003213 7504                <1> 	jne .txtlp
  4164                              <1> .zero: 
  4165 00003215 39FE                <1> 		cmp esi, edi
  4166 00003217 7458                <1> 		je .done
  4167                              <1> .txtlp:
  4168 00003219 31C0                <1> 	xor eax, eax
  4169 0000321B 8A06                <1> 	mov al, [esi]
  4170 0000321D 3C3D                <1> 	cmp al, '='
  4171 0000321F 7450                <1> 	je .done
  4172 00003221 3C30                <1> 	cmp al, 48
  4173 00003223 724C                <1> 	jb .done
  4174 00003225 3C23                <1> 	cmp al, '#'
  4175 00003227 7448                <1> 	je .done
  4176 00003229 39FE                <1> 	cmp esi, edi
  4177 0000322B 7244                <1> 	jb .done
  4178 0000322D 81F900000000        <1> 	cmp ecx, 0
  4179 00003233 7708                <1> 	ja .exp
  4180 00003235 2C30                <1> .noexp:	sub al, 48
  4181 00003237 01C2                <1> 	add edx, eax
  4182 00003239 4E                  <1> 	dec esi
  4183 0000323A 41                  <1> 	inc ecx
  4184 0000323B EBDC                <1> 	jmp .txtlp
  4185 0000323D 81F900000000        <1> .exp:	cmp ecx, 0
  4186 00003243 74F0                <1> 	je .noexp
  4187 00003245 2C30                <1> 	sub al, 48
  4188 00003247 51                  <1> 	push ecx
  4189 00003248 89C3                <1> .expmul:	mov ebx, eax
  4190 0000324A 01D8                <1> 	add eax, ebx
  4191 0000324C 01D8                <1> 	add eax, ebx
  4192 0000324E 01D8                <1> 	add eax, ebx
  4193 00003250 01D8                <1> 	add eax, ebx
  4194 00003252 01D8                <1> 	add eax, ebx
  4195 00003254 01D8                <1> 	add eax, ebx
  4196 00003256 01D8                <1> 	add eax, ebx
  4197 00003258 01D8                <1> 	add eax, ebx
  4198 0000325A 01D8                <1> 	add eax, ebx
  4199 0000325C 81E901000000        <1> 	sub ecx, 1
  4200 00003262 81F900000000        <1> 	cmp ecx, 0
  4201 00003268 77DE                <1> 	ja .expmul
  4202 0000326A 01C2                <1> 	add edx, eax
  4203 0000326C 59                  <1> 	pop ecx
  4204 0000326D 4E                  <1> 	dec esi
  4205 0000326E 41                  <1> 	inc ecx
  4206 0000326F EBA8                <1> 	jmp .txtlp
  4207 00003271 89D1                <1> .done: mov ecx, edx
  4208 00003273 C3                  <1> 	ret
  4209                                      %include "source/programs.asm"
  4210 00003274 FF2C                <1> filetypes db 255,44
  4211                              <1> progstart:		;programs start here
  4212                              <1> indexfiles:
  4213 00003276 BE[76320000]        <1> 	mov esi, progstart
  4214 0000327B BB[A2B10000]        <1> 	mov ebx, fileindex
  4215 00003280 BF[76320000]        <1> 	mov edi, progstart
  4216 00003285 81EF02000000        <1> 	sub edi, 2
  4217                              <1> indexloop:
  4218 0000328B 668B0E              <1> 	mov cx, [esi]
  4219                              <1> 	indexloop2:
  4220 0000328E 663B0F              <1> 		cmp cx, [edi]
  4221 00003291 7424                <1> 		je indexloop2done
  4222 00003293 81EF02000000        <1> 		sub edi, 2
  4223 00003299 81FF[74320000]      <1> 		cmp edi, filetypes
  4224 0000329F 73ED                <1> 		jae indexloop2
  4225 000032A1 BF[76320000]        <1> 	mov edi, progstart
  4226 000032A6 81EF02000000        <1> 	sub edi, 2
  4227 000032AC 46                  <1> 	inc esi
  4228 000032AD 81FE[1B530000]      <1> 	cmp esi, batchprogend
  4229 000032B3 734E                <1> 	jae indexloopdone
  4230 000032B5 EBD4                <1> 	jmp indexloop
  4231                              <1> indexloop2done:
  4232 000032B7 66890B              <1> 	mov [ebx], cx
  4233 000032BA 81C302000000        <1> 	add ebx, 2
  4234 000032C0 81C602000000        <1> 	add esi, 2
  4235                              <1> 	nameindex:
  4236 000032C6 8A0E                <1> 		mov cl, [esi]
  4237 000032C8 80F900              <1> 		cmp cl, 0
  4238 000032CB 7406                <1> 		je nameindexdone
  4239 000032CD 880B                <1> 		mov [ebx], cl
  4240 000032CF 46                  <1> 		inc esi
  4241 000032D0 43                  <1> 		inc ebx
  4242 000032D1 EBF3                <1> 		jmp nameindex
  4243                              <1> 	nameindexdone:
  4244 000032D3 43                  <1> 		inc ebx
  4245 000032D4 66C7030000          <1> 		mov word [ebx], 0
  4246 000032D9 81C302000000        <1> 		add ebx, 2
  4247 000032DF 46                  <1> 		inc esi
  4248 000032E0 8933                <1> 		mov [ebx], esi
  4249 000032E2 81C304000000        <1> 		add ebx, 4
  4250 000032E8 66C7030000          <1> 		mov word [ebx], 0
  4251 000032ED 81C302000000        <1> 		add ebx, 2
  4252 000032F3 81FB[A2B50000]      <1> 		cmp ebx, fileindexend
  4253 000032F9 7308                <1> 		jae indexloopdone
  4254 000032FB 81C601000000        <1> 		add esi, 1
  4255 00003301 EB88                <1> 		jmp indexloop
  4256 00003303 C605[0B330000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4257 0000330A C3                  <1> 		ret
  4258 0000330B 00                  <1> indexdone db 0
  4259                              <1> %include 'source/programs/_comment.asm' ;#
  4260 0000330C FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4261 00003310 C3                  <2> 	ret 
  4262                              <1> %include 'source/programs/_math.asm' ;!
  4263 00003311 FF2C2100            <2> db 255,44,"!",0
  4264                              <2> 	num:	
  4265 00003315 E8C5FBFFFF          <2> 		call clearbuffer
  4266 0000331A C605[9B350000]00    <2> 		mov byte [decimal], 0
  4267 00003321 C605[9C350000]00    <2> 		mov byte [decimal2], 0
  4268 00003328 8B35[202E0000]      <2> 		mov esi, [currentcommandloc]
  4269 0000332E 31C0                <2> 		xor eax, eax
  4270 00003330 31C9                <2> 		xor ecx, ecx
  4271 00003332 31DB                <2> 		xor ebx, ebx
  4272 00003334 8A06                <2> 	num2:	mov al, [esi]
  4273 00003336 3C2B                <2> 		cmp al, '+'
  4274 00003338 741B                <2> 		je operatorfound
  4275 0000333A 3C2D                <2> 		cmp al, '-'
  4276 0000333C 7417                <2> 		je operatorfound
  4277 0000333E 3C2A                <2> 		cmp al, '*'
  4278 00003340 7413                <2> 		je operatorfound
  4279 00003342 3C2F                <2> 		cmp al, '/'
  4280 00003344 740F                <2> 		je operatorfound
  4281 00003346 3C5E                <2> 		cmp al, '^'
  4282 00003348 740B                <2> 		je operatorfound
  4283 0000334A 46                  <2> 		inc esi
  4284 0000334B 3C00                <2> 		cmp al, 0
  4285 0000334D 0F841AF8FFFF        <2> 		je near nwcmd
  4286 00003353 EBDF                <2> 		jmp num2
  4287 00003355 50                  <2> 	operatorfound: push eax
  4288 00003356 30E4                <2> 		xor ah, ah
  4289 00003358 8826                <2> 		mov [esi], ah
  4290 0000335A 89F7                <2> 		mov edi, esi
  4291 0000335C 46                  <2> 		inc esi
  4292 0000335D 8A06                <2> 		mov al, [esi]
  4293 0000335F 3C25                <2> 		cmp al, '%'
  4294 00003361 0F8462000000        <2> 		je near resultnum1
  4295                              <2> 	varnum2: 
  4296 00003367 57                  <2> 		push edi
  4297 00003368 E8A4000000          <2> 		call checkdecimal
  4298 0000336D 5F                  <2> 		pop edi
  4299 0000336E E880FEFFFF          <2> 		call cnvrttxt
  4300                              <2> 	vrnm2:
  4301 00003373 89CB                <2> 		mov ebx, ecx
  4302 00003375 53                  <2> 		push ebx
  4303 00003376 E864FBFFFF          <2> 		call clearbuffer
  4304 0000337B 8B35[202E0000]      <2> 		mov esi, [currentcommandloc]
  4305 00003381 89F7                <2> 		mov edi, esi
  4306 00003383 46                  <2> 		inc esi
  4307 00003384 8A06                <2> 		mov al, [esi]
  4308 00003386 3C25                <2> 		cmp al, '%'
  4309 00003388 0F844F000000        <2> 		je near resultnum2
  4310                              <2> 	varnum4: 
  4311 0000338E 57                  <2> 		push edi
  4312 0000338F E869000000          <2> 		call checkdecimal2
  4313 00003394 5F                  <2> 		pop edi
  4314 00003395 E859FEFFFF          <2> 		call cnvrttxt
  4315                              <2> 	vrnm4:
  4316 0000339A 5B                  <2> 		pop ebx
  4317 0000339B 58                  <2> 		pop eax
  4318 0000339C 3C2B                <2> 		cmp al, '+'
  4319 0000339E 0F849B000000        <2> 		je near plusnum
  4320 000033A4 3C2D                <2> 		cmp al, '-'
  4321 000033A6 0F849F000000        <2> 		je near subnum
  4322 000033AC 3C2A                <2> 		cmp al, '*'
  4323 000033AE 0F84A3000000        <2> 		je near mulnum
  4324 000033B4 3C2F                <2> 		cmp al, '/'
  4325 000033B6 0F84B1000000        <2> 		je near divnum
  4326 000033BC 3C5E                <2> 		cmp al, '^'
  4327 000033BE 0F84CE000000        <2> 		je near expnum
  4328 000033C4 E9A4F7FFFF          <2> 		jmp nwcmd
  4329                              <2> 	resultnum1:
  4330 000033C9 8A0D[9D350000]      <2> 		mov cl, [decimalresult]
  4331 000033CF 880D[9B350000]      <2> 		mov [decimal], cl
  4332 000033D5 8B0D[9E350000]      <2> 		mov ecx, [result]
  4333 000033DB EB96                <2> 		jmp vrnm2
  4334                              <2> 	resultnum2:
  4335 000033DD 8A0D[9B350000]      <2> 		mov cl, [decimal]
  4336 000033E3 880D[9C350000]      <2> 		mov [decimal2], cl
  4337 000033E9 8A0D[9D350000]      <2> 		mov cl, [decimalresult]
  4338 000033EF 880D[9B350000]      <2> 		mov [decimal], cl
  4339 000033F5 8B0D[9E350000]      <2> 		mov ecx, [result]
  4340 000033FB EB9D                <2> 		jmp vrnm4
  4341                              <2> 	checkdecimal2:
  4342 000033FD 8A25[9B350000]      <2> 		mov ah, [decimal]
  4343 00003403 8825[9C350000]      <2> 		mov [decimal2], ah
  4344 00003409 30E4                <2> 		xor ah, ah
  4345 0000340B 8825[9B350000]      <2> 		mov [decimal], ah
  4346                              <2> 	checkdecimal:
  4347 00003411 89F7                <2> 		mov edi, esi
  4348                              <2> 	chkdec1:
  4349 00003413 8A07                <2> 		mov al, [edi]
  4350 00003415 3C2E                <2> 		cmp al, '.'
  4351 00003417 0F840B000000        <2> 		je near fnddec
  4352 0000341D 3C00                <2> 		cmp al, 0
  4353 0000341F 0F8419000000        <2> 		je near nodecimal
  4354 00003425 47                  <2> 		inc edi
  4355 00003426 EBEB                <2> 		jmp chkdec1
  4356                              <2> 	fnddec:
  4357 00003428 8A4701              <2> 		mov al, [edi + 1]
  4358 0000342B 8807                <2> 		mov [edi], al
  4359 0000342D 3C00                <2> 		cmp al, 0
  4360 0000342F 0F8409000000        <2> 		je near nodecimal
  4361 00003435 FE05[9B350000]      <2> 		inc byte [decimal]
  4362 0000343B 47                  <2> 		inc edi
  4363 0000343C EBEA                <2> 		jmp fnddec
  4364                              <2> 	nodecimal:
  4365 0000343E C3                  <2> 		ret
  4366                              <2> 	plusnum:
  4367 0000343F E815010000          <2> 		call decaddfix
  4368 00003444 01D9                <2> 		add ecx, ebx
  4369 00003446 E98A000000          <2> 		jmp retnum
  4370                              <2> 	subnum:
  4371 0000344B E809010000          <2> 		call decaddfix
  4372 00003450 29D9                <2> 		sub ecx, ebx
  4373 00003452 E97E000000          <2> 		jmp retnum
  4374                              <2> 	mulnum:
  4375 00003457 A0[9C350000]        <2> 		mov al, [decimal2]
  4376 0000345C 0005[9B350000]      <2> 		add [decimal], al
  4377 00003462 89C8                <2> 		mov eax, ecx
  4378 00003464 F7E3                <2> 		mul ebx
  4379 00003466 89C1                <2> 		mov ecx, eax
  4380 00003468 E968000000          <2> 		jmp retnum
  4381                              <2> 	divnum:
  4382 0000346D E8E7000000          <2> 		call decaddfix
  4383 00003472 30C0                <2> 		xor al, al
  4384 00003474 A2[9B350000]        <2> 		mov [decimal], al
  4385 00003479 31D2                <2> 		xor edx, edx
  4386 0000347B 89C8                <2> 		mov eax, ecx
  4387 0000347D 81FB00000000        <2> 		cmp ebx, 0
  4388 00003483 0F844C000000        <2> 		je near retnum
  4389 00003489 F7F3                <2> 		div ebx
  4390 0000348B 89C1                <2> 		mov ecx, eax
  4391 0000348D E943000000          <2> 		jmp retnum
  4392                              <2> 	expnum:
  4393 00003492 8A15[9B350000]      <2> 		mov dl, [decimal]
  4394 00003498 8815[9C350000]      <2> 		mov [decimal2], dl
  4395 0000349E 31D2                <2> 		xor edx, edx
  4396 000034A0 89C8                <2> 		mov eax, ecx
  4397 000034A2 89D9                <2> 		mov ecx, ebx
  4398 000034A4 89C3                <2> 		mov ebx, eax
  4399 000034A6 81F900000000        <2> 		cmp ecx, 0
  4400 000034AC 7422                <2> 		je noexpnum
  4401 000034AE 49                  <2> 		dec ecx
  4402 000034AF 81F900000000        <2> 		cmp ecx, 0
  4403 000034B5 7412                <2> 		je noexpnumlp
  4404 000034B7 F7E3                <2> 	expnumlp: mul ebx
  4405 000034B9 8A15[9C350000]      <2> 		mov dl, [decimal2]
  4406 000034BF 0015[9B350000]      <2> 		add [decimal], dl
  4407 000034C5 31D2                <2> 		xor edx, edx
  4408 000034C7 E2EE                <2> 		loop expnumlp
  4409                              <2> 	noexpnumlp:
  4410 000034C9 89C1                <2> 		mov ecx, eax
  4411 000034CB E905000000          <2> 		jmp retnum
  4412                              <2> 	noexpnum:
  4413 000034D0 B901000000          <2> 		mov ecx, 1
  4414                              <2> 	retnum: 
  4415 000034D5 BE[36D00000]        <2> 		mov esi, numbuf
  4416 000034DA 890D[9E350000]      <2> 		mov [result], ecx
  4417 000034E0 E80FFAFFFF          <2> 		call convert
  4418 000034E5 BE[36D00000]        <2> 		mov esi, numbuf
  4419 000034EA 8A25[9B350000]      <2> 		mov ah, [decimal]
  4420 000034F0 8825[9D350000]      <2> 		mov [decimalresult], ah
  4421 000034F6 80FC00              <2> 		cmp ah, 0
  4422 000034F9 0F8425000000        <2> 		je near noputdecimal
  4423                              <2> 	putdecimal:
  4424 000034FF 4E                  <2> 		dec esi
  4425 00003500 FECC                <2> 		dec ah
  4426 00003502 80FC00              <2> 		cmp ah, 0
  4427 00003505 0F87F4FFFFFF        <2> 		ja near putdecimal
  4428 0000350B 4E                  <2> 		dec esi
  4429 0000350C 8A06                <2> 		mov al, [esi]
  4430 0000350E C6062E              <2> 		mov byte [esi], '.'
  4431                              <2> 	decputloop:
  4432 00003511 4E                  <2> 		dec esi
  4433 00003512 8A26                <2> 		mov ah, [esi]
  4434 00003514 8806                <2> 		mov [esi], al
  4435 00003516 88E0                <2> 		mov al, ah
  4436 00003518 81FE[22D00000]      <2> 		cmp esi, buf2
  4437 0000351E 0F87EDFFFFFF        <2> 		ja near decputloop
  4438                              <2> 	noputdecimal:
  4439 00003524 BE[22D00000]        <2> 		mov esi, buf2
  4440 00003529 E809000000          <2> 		call chkadd
  4441 0000352E E93AF6FFFF          <2> 		jmp nwcmd
  4442 00003533 00000000            <2> edxnumbuf dw 0,0
  4443 00003537 8A06                <2> 	chkadd: mov al, [esi]
  4444 00003539 3C30                <2> 		cmp al, '0'
  4445 0000353B 750C                <2> 		jne dnadd
  4446 0000353D 46                  <2> 		inc esi
  4447 0000353E 81FE[36D00000]      <2> 		cmp esi, numbuf
  4448 00003544 7402                <2> 		je dnaddm1
  4449 00003546 EBEF                <2> 		jmp chkadd
  4450 00003548 4E                  <2> 	dnaddm1: dec esi
  4451 00003549 E80FE8FFFF          <2> 	dnadd:	call print
  4452 0000354E BE[458D0000]        <2> 		mov esi, line
  4453 00003553 E805E8FFFF          <2> 		call print
  4454 00003558 C3                  <2> 		ret
  4455                              <2> 		
  4456                              <2> 	decaddfix:
  4457 00003559 A0[9C350000]        <2> 		mov al, [decimal2]
  4458 0000355E 8A25[9B350000]      <2> 		mov ah, [decimal]
  4459 00003564 38E0                <2> 		cmp al, ah
  4460 00003566 7432                <2> 		je gooddecadd
  4461 00003568 38E0                <2> 		cmp al, ah
  4462 0000356A 721A                <2> 		jb lowdecadd
  4463                              <2> 	highdecadd:
  4464 0000356C FEC4                <2> 		inc ah
  4465 0000356E 89CA                <2> 		mov edx, ecx
  4466 00003570 C1E103              <2> 		shl ecx, 3
  4467 00003573 01D1                <2> 		add ecx, edx
  4468 00003575 01D1                <2> 		add ecx, edx
  4469 00003577 38E0                <2> 		cmp al, ah
  4470 00003579 77F1                <2> 		ja highdecadd
  4471 0000357B 8825[9B350000]      <2> 		mov [decimal], ah
  4472 00003581 E914000000          <2> 		jmp gooddecadd
  4473                              <2> 	lowdecadd:
  4474 00003586 FEC0                <2> 		inc al
  4475 00003588 89DA                <2> 		mov edx, ebx
  4476 0000358A C1E303              <2> 		shl ebx, 3
  4477 0000358D 01D3                <2> 		add ebx, edx
  4478 0000358F 01D3                <2> 		add ebx, edx
  4479 00003591 38E0                <2> 		cmp al, ah
  4480 00003593 72F1                <2> 		jb lowdecadd
  4481 00003595 A2[9B350000]        <2> 		mov [decimal], al
  4482                              <2> 	gooddecadd:
  4483 0000359A C3                  <2> 		ret
  4484                              <2> 		
  4485 0000359B 00                  <2> decimal db 0
  4486 0000359C 00                  <2> decimal2 db 0
  4487 0000359D 00                  <2> decimalresult db 0
  4488 0000359E 00000000            <2> result dd 0
  4489                              <1> %include 'source/programs/_variables.asm' ;% and $
  4490 000035A2 FF2C2500            <2> db 255,44,"%",0
  4491                              <2> 	ans:
  4492 000035A6 BE[22D00000]        <2> 		mov esi, buf2
  4493 000035AB E887FFFFFF          <2> 		call chkadd
  4494 000035B0 C3                  <2> 		ret
  4495                              <2> 		
  4496 000035B1 FF2C2400            <2> db 255,44,"$",0
  4497 000035B5 8B35[202E0000]      <2> var: mov esi, [currentcommandloc]
  4498 000035BB BB[22B80000]        <2> 	mov ebx, variables
  4499 000035C0 8A06                <2> lkeq:	mov al, [esi]
  4500 000035C2 3C3D                <2> 	cmp al, '='
  4501 000035C4 741B                <2> 	je eqfnd	;is there an '=' sign?
  4502 000035C6 3C00                <2> 	cmp al, 0
  4503 000035C8 7403                <2> 	je echovars
  4504 000035CA 46                  <2> 	inc esi
  4505 000035CB EBF3                <2> 	jmp lkeq
  4506 000035CD BE[22B80000]        <2> echovars: mov esi, variables
  4507 000035D2 BB[22C80000]        <2> 	mov ebx, varend
  4508 000035D7 B105                <2> 	mov cl, 5
  4509 000035D9 B504                <2> 	mov ch, 4
  4510 000035DB E89EF8FFFF          <2> 	call array
  4511 000035E0 C3                  <2> 	ret
  4512 000035E1 46                  <2> eqfnd:	inc esi
  4513 000035E2 8A06                <2> 	mov al, [esi]
  4514 000035E4 3C00                <2> 	cmp al, 0
  4515 000035E6 7410                <2> 	je readvar
  4516 000035E8 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  4517 000035EE BB[22B80000]        <2> 	mov ebx, variables
  4518 000035F3 E919000000          <2> 	jmp seek
  4519                              <2> readvar:
  4520 000035F8 B00A                <2> 	mov al, 10
  4521 000035FA 66BB0700            <2> 	mov bx, 7
  4522 000035FE C605[14220000]00    <2> 	mov byte [commandedit], 0
  4523 00003605 BF[22D00000]        <2> 	mov edi, buftxtend
  4524 0000360A E833E8FFFF          <2> 	call rdprint
  4525 0000360F EBA4                <2> 	jmp var
  4526 00003611 668B03              <2> seek:	mov ax, [ebx]
  4527 00003614 B105                <2> 	mov cl, 5
  4528 00003616 B504                <2> 	mov ch, 4
  4529 00003618 663D0000            <2> 	cmp ax, 0
  4530 0000361C 0F845B000000        <2> 	je near save
  4531 00003622 6639C8              <2> 	cmp ax, cx
  4532 00003625 7403                <2> 	je skfnd
  4533 00003627 43                  <2> 	inc ebx
  4534 00003628 EBE7                <2> 	jmp seek
  4535 0000362A 8B35[202E0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4536 00003630 46                  <2> 	inc esi
  4537 00003631 81C302000000        <2> 	add ebx, 2
  4538 00003637 89DF                <2> 	mov edi, ebx
  4539 00003639 B13D                <2> 	mov cl, '='
  4540 0000363B E81FF8FFFF          <2> 	call cndtest
  4541 00003640 3C01                <2> 	cmp al, 1	
  4542 00003642 7418                <2> 	je varfnd
  4543 00003644 89FB                <2> 	mov ebx, edi
  4544 00003646 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  4545 0000364C 668B03              <2> 	mov ax, [ebx]
  4546 0000364F 663D0000            <2> 	cmp ax, 0
  4547 00003653 0F8424000000        <2> 	je near save
  4548 00003659 43                  <2> 	inc ebx
  4549 0000365A EBB5                <2> 	jmp seek
  4550 0000365C 8A03                <2> varfnd:	mov al, [ebx]
  4551 0000365E 3C04                <2> 	cmp al, 4
  4552 00003660 7404                <2> 	je save2
  4553 00003662 4B                  <2> 	dec ebx
  4554 00003663 4E                  <2> 	dec esi
  4555 00003664 EBF6                <2> 	jmp varfnd
  4556 00003666 4B                  <2> save2:	dec ebx
  4557 00003667 4E                  <2> 	dec esi
  4558 00003668 8A03                <2> 	mov al, [ebx]
  4559 0000366A 3C05                <2> 	cmp al, 5
  4560 0000366C 7402                <2> 	je remove
  4561 0000366E EBEC                <2> 	jmp varfnd
  4562 00003670 8A03                <2> remove: mov al, [ebx]
  4563 00003672 3C00                <2> 	cmp al, 0
  4564 00003674 749B                <2> 	je seek
  4565 00003676 30C0                <2> 	xor al, al
  4566 00003678 8803                <2> 	mov [ebx], al
  4567 0000367A 43                  <2> 	inc ebx
  4568 0000367B EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4569 0000367D 8B35[202E0000]      <2> save:	mov esi, [currentcommandloc]
  4570 00003683 43                  <2> 	inc ebx
  4571 00003684 B005                <2> 	mov al, 5
  4572 00003686 B404                <2> 	mov ah, 4
  4573 00003688 668903              <2> 	mov [ebx], ax
  4574 0000368B 43                  <2> 	inc ebx
  4575 0000368C 43                  <2> svhere:	inc ebx
  4576 0000368D 46                  <2> 	inc esi
  4577 0000368E 8A06                <2> 	mov al, [esi]
  4578 00003690 3C00                <2> 	cmp al, 0
  4579 00003692 0F844A000000        <2> 	je near svdone
  4580 00003698 3C25                <2> 	cmp al, '%'
  4581 0000369A 7404                <2> 	je ans2
  4582 0000369C 8803                <2> 	mov [ebx], al	
  4583 0000369E EBEC                <2> 	jmp svhere
  4584 000036A0 56                  <2> ans2:	push esi
  4585 000036A1 BE[22D00000]        <2> 	mov esi, buf2
  4586 000036A6 E823000000          <2> 	call ansfnd
  4587 000036AB E803000000          <2> 	call anscp
  4588 000036B0 5E                  <2> 	pop esi
  4589 000036B1 EBD9                <2> 	jmp svhere
  4590 000036B3 8A06                <2> anscp:	mov al, [esi]
  4591 000036B5 8803                <2> 	mov [ebx], al
  4592 000036B7 81FE[36D00000]      <2> 	cmp esi, numbuf
  4593 000036BD 74CD                <2> 	je svhere
  4594 000036BF 3C00                <2> 	cmp al, 0
  4595 000036C1 74C9                <2> 	je svhere
  4596 000036C3 43                  <2> 	inc ebx
  4597 000036C4 46                  <2> 	inc esi
  4598 000036C5 EBEC                <2> 	jmp anscp
  4599 000036C7 5E                  <2> ansnf:	pop esi
  4600 000036C8 8A06                <2> 	mov al, [esi]
  4601 000036CA 8803                <2> 	mov [ebx], al
  4602 000036CC EBBE                <2> 	jmp svhere
  4603 000036CE 46                  <2> ansfnd:	inc esi
  4604 000036CF 81FE[35D00000]      <2> 	cmp esi, numbuf - 1
  4605 000036D5 740A                <2> 	je fndans
  4606 000036D7 8A06                <2> 	mov al, [esi]
  4607 000036D9 3C00                <2> 	cmp al, 0
  4608 000036DB 74EA                <2> 	je ansnf
  4609 000036DD 3C30                <2> 	cmp al, '0'
  4610 000036DF 74ED                <2> 	je ansfnd
  4611                              <2> fndans:
  4612 000036E1 C3                  <2> 	ret
  4613 000036E2 30C0                <2> svdone:	xor al, al
  4614 000036E4 8803                <2> 	mov [ebx], al
  4615 000036E6 C3                  <2> 	ret
  4616                              <1> %include 'source/programs/_run.asm' ;./
  4617                              <2> 
  4618 000036E7 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4619 000036EB FF2C2E2F00          <2> 	db 255,44,"./",0
  4620                              <2> rundiskprog:
  4621 000036F0 8B3D[202E0000]      <2> 	mov edi, [currentcommandloc]
  4622 000036F6 81C702000000        <2> 	add edi, 2
  4623 000036FC BE00004000          <2> 	mov esi, 0x400000
  4624 00003701 E8502E0000          <2> 	call loadfile
  4625 00003706 81FA94010000        <2> 	cmp edx, 404
  4626 0000370C 746A                <2> 	je noprogfound
  4627 0000370E BB00004000          <2> 	mov ebx, 0x400000
  4628 00003713 A1[E7360000]        <2> 	mov eax, [elfstart]
  4629 00003718 3903                <2> 	cmp [ebx], eax
  4630 0000371A 0F8437000000        <2> 	je near runelf
  4631 00003720 66813B4558          <2> 	cmp word [ebx], "EX"
  4632 00003725 7577                <2> 	jne progbatchfound
  4633 00003727 81C302000000        <2> 	add ebx, 2
  4634 0000372D 8B3D[202E0000]      <2> 	mov edi, [currentcommandloc]
  4635 00003733 81C702000000        <2> 	add edi, 2
  4636                              <2> findspaceprog:
  4637 00003739 8A07                <2> 	mov al, [edi]
  4638 0000373B 47                  <2> 	inc edi
  4639 0000373C 3C20                <2> 	cmp al, " "
  4640 0000373E 75F9                <2> 	jne findspaceprog
  4641                              <2> findnonspaceprog:
  4642 00003740 8A07                <2> 	mov al, [edi]
  4643 00003742 47                  <2> 	inc edi
  4644 00003743 3C20                <2> 	cmp al, " "
  4645 00003745 74F9                <2> 	je findnonspaceprog
  4646 00003747 4F                  <2> 	dec edi
  4647 00003748 8925[A2B50000]      <2> 	mov [previousstack], esp
  4648 0000374E FFD3                <2> 	call ebx
  4649 00003750 8B25[A2B50000]      <2> 	mov esp, [previousstack]
  4650 00003756 C3                  <2> 	ret
  4651                              <2> runelf:
  4652 00003757 8B3D[202E0000]      <2> 	mov edi, [currentcommandloc]
  4653 0000375D 81C702000000        <2> 	add edi, 2
  4654 00003763 81C380000000        <2> 	add ebx, 0x80
  4655 00003769 8925[A2B50000]      <2> 	mov [previousstack], esp
  4656 0000376F FFD3                <2> 	call ebx
  4657 00003771 8B25[A2B50000]      <2> 	mov esp, [previousstack]
  4658 00003777 C3                  <2> 	ret
  4659                              <2> noprogfound:
  4660 00003778 BE[0C8D0000]        <2> 	mov esi, notfound1
  4661 0000377D E8DBE5FFFF          <2> 	call print
  4662 00003782 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  4663 00003788 81C602000000        <2> 	add esi, 2
  4664 0000378E E8CAE5FFFF          <2> 	call print
  4665 00003793 BE[148D0000]        <2> 	mov esi, notfound2
  4666 00003798 E8C0E5FFFF          <2> 	call print
  4667 0000379D C3                  <2> 	ret
  4668                              <2> progbatchfound:
  4669 0000379E BF00004000          <2> 		mov edi, 0x400000
  4670 000037A3 C605[1CB80000]01    <2> 		mov byte [BATCHISON], 1
  4671                              <2> 	batchrunloop:
  4672 000037AA E89BF3FFFF          <2> 		call buftxtclear
  4673 000037AF BE[22CC0000]        <2> 		mov esi, buftxt
  4674 000037B4 8935[202E0000]      <2> 		mov [currentcommandloc], esi
  4675                              <2> 	batchrunloop2:
  4676 000037BA B10A                <2> 		mov cl, 10
  4677 000037BC B50D                <2> 		mov ch, 13
  4678 000037BE 380F                <2> 		cmp [edi], cl
  4679 000037C0 0F8419000000        <2> 		je near nxtbatchrunline
  4680 000037C6 382F                <2> 		cmp [edi], ch
  4681 000037C8 0F8411000000        <2> 		je near nxtbatchrunline
  4682 000037CE 803F00              <2> 		cmp byte [edi], 0
  4683 000037D1 0F8408000000        <2> 		je near nxtbatchrunline
  4684 000037D7 8A07                <2> 		mov al, [edi]
  4685 000037D9 8806                <2> 		mov [esi], al
  4686 000037DB 46                  <2> 		inc esi
  4687 000037DC 47                  <2> 		inc edi
  4688 000037DD EBDB                <2> 		jmp batchrunloop2
  4689                              <2> 	nxtbatchrunline:
  4690 000037DF 47                  <2> 		inc edi
  4691 000037E0 380F                <2> 		cmp [edi], cl
  4692 000037E2 74FB                <2> 		je nxtbatchrunline
  4693 000037E4 382F                <2> 		cmp [edi], ch
  4694 000037E6 74F7                <2> 		je nxtbatchrunline
  4695 000037E8 893D[46380000]      <2> 		mov [batchedi], edi
  4696 000037EE 893D[18B80000]      <2> 		mov [BATCHPOS], edi
  4697 000037F4 C60600              <2> 		mov byte [esi], 0
  4698 000037F7 BE[22CC0000]        <2> 		mov esi, buftxt
  4699 000037FC 803E00              <2> 		cmp byte [esi], 0
  4700 000037FF 0F8439000000        <2> 		je near nobatchfoundrun
  4701 00003805 31DB                <2> 		xor ebx, ebx
  4702 00003807 8A1D[B3B70000]      <2> 		mov bl, [IFON]
  4703 0000380D 80FB00              <2> 		cmp bl, 0
  4704 00003810 0F8534000000        <2> 		jne near iftestbatch
  4705                              <2> 	doneiftest:
  4706 00003816 803D[1C390000]00    <2> 		cmp byte [runnextline], 0
  4707 0000381D 0F8405000000        <2> 		je near noruniftest
  4708 00003823 E822F5FFFF          <2> 		call run
  4709                              <2> 	noruniftest:
  4710 00003828 C605[1C390000]01    <2> 		mov byte [runnextline], 1
  4711 0000382F 8B3D[46380000]      <2> 		mov edi, [batchedi]
  4712 00003835 803F00              <2> 		cmp byte [edi], 0
  4713 00003838 0F856CFFFFFF        <2> 		jne near batchrunloop
  4714                              <2> 	nobatchfoundrun:
  4715 0000383E C605[1CB80000]00    <2> 		mov byte [BATCHISON], 0
  4716 00003845 C3                  <2> 		ret
  4717                              <2> 	
  4718 00003846 00000000            <2> batchedi dd 0	
  4719                              <2> 	
  4720                              <2> 	iftestbatch:
  4721 0000384A BE[B4B70000]        <2> 		mov esi, IFTRUE
  4722 0000384F 01DE                <2> 		add esi, ebx
  4723 00003851 803E00              <2> 		cmp byte [esi], 0
  4724 00003854 0F85BCFFFFFF        <2> 		jne near doneiftest
  4725 0000385A 881D[1D390000]      <2> 		mov [iffalsebuf], bl
  4726 00003860 803D[1DB80000]01    <2> 		cmp byte [LOOPON], 1
  4727 00003867 0F8513000000        <2> 		jne near fifindbatch
  4728 0000386D E938FFFFFF          <2> 		jmp batchrunloop
  4729                              <2> 	elsetestbatch:
  4730 00003872 C60601              <2> 		mov byte [esi], 1
  4731 00003875 81C705000000        <2> 		add edi, 5
  4732 0000387B E92AFFFFFF          <2> 		jmp batchrunloop
  4733                              <2> 	fifindbatch:
  4734 00003880 66B96966            <2> 		mov cx, "if"
  4735 00003884 66B86669            <2> 		mov ax, "fi"
  4736 00003888 663907              <2> 		cmp [edi], ax
  4737 0000388B 0F8424000000        <2> 		je near fifoundbatch
  4738 00003891 66390F              <2> 		cmp [edi], cx
  4739 00003894 0F8465000000        <2> 		je near iffoundbatch
  4740 0000389A 803F00              <2> 		cmp byte [edi], 0
  4741 0000389D 0F8412000000        <2> 		je near fifoundbatch
  4742 000038A3 B8656C7365          <2> 		mov eax, "else"
  4743 000038A8 3907                <2> 		cmp [edi], eax
  4744 000038AA 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4745 000038B0 E973FFFFFF          <2> 		jmp noruniftest
  4746                              <2> 	fifoundbatch:
  4747 000038B5 81C702000000        <2> 		add edi, 2
  4748 000038BB B00A                <2> 		mov al, 10
  4749 000038BD 3807                <2> 		cmp [edi], al
  4750 000038BF 0F840B000000        <2> 		je near goodfibatch
  4751 000038C5 803F00              <2> 		cmp byte [edi], 0
  4752 000038C8 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4753 000038CE EBB0                <2> 		jmp fifindbatch
  4754                              <2> 	goodfibatch:
  4755 000038D0 B001                <2> 		mov al, 1
  4756 000038D2 2805[B3B70000]      <2> 		sub [IFON], al 
  4757 000038D8 A0[B3B70000]        <2> 		mov al, [IFON]
  4758 000038DD 8A1D[1D390000]      <2> 		mov bl, [iffalsebuf]
  4759 000038E3 38D8                <2> 		cmp al, bl
  4760 000038E5 7799                <2> 		ja fifindbatch
  4761 000038E7 8B35[202E0000]      <2> 		mov esi, [currentcommandloc]
  4762 000038ED 81EF02000000        <2> 		sub edi, 2
  4763 000038F3 C605[1C390000]00    <2> 		mov byte [runnextline], 0
  4764 000038FA E9ABFEFFFF          <2> 		jmp batchrunloop
  4765                              <2> 	iffoundbatch:
  4766 000038FF B020                <2> 		mov al, ' '
  4767 00003901 81C702000000        <2> 		add edi, 2
  4768 00003907 3807                <2> 		cmp [edi], al
  4769 00003909 0F8571FFFFFF        <2> 		jne near fifindbatch
  4770 0000390F B001                <2> 		mov al, 1
  4771 00003911 0005[B3B70000]      <2> 		add [IFON], al
  4772 00003917 E964FFFFFF          <2> 		jmp fifindbatch
  4773                              <2> 		
  4774                              <2> 		
  4775 0000391C 01                  <2> runnextline db 1
  4776 0000391D 00                  <2> iffalsebuf db 0
  4777 0000391E C3                  <2> notbatch: ret 
  4778                              <1> %ifdef network.included
  4779                              <1> 	%include 'source/programs/arp.asm'
  4780 0000391F FF2C61727000        <2> db 255,44,"arp",0
  4781                              <2> 	;ARP TESTING
  4782                              <2> arptest:
  4783 00003925 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  4784 0000392B 81C604000000        <2> 	add esi, 4
  4785 00003931 E8DB520000          <2> 	call strtoip
  4786 00003936 890D[DD390000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4787 0000393C E816530000          <2> 	call showip
  4788 00003941 803D[E1390000]01    <2> 	cmp byte [arpconfig], 1
  4789 00003948 7405                <2> 	je arptest2
  4790 0000394A E841000000          <2> 	call arpinit
  4791                              <2> arptest2:	;try to reach 192.168.0.1
  4792 0000394F 8B0D[FE8C0000]      <2> 	mov ecx, [sysmac]
  4793 00003955 668B1D[028D0000]    <2> 	mov bx, [sysmac + 4]
  4794 0000395C 890D[BD390000]      <2> 	mov [sourcemac], ecx
  4795 00003962 66891D[C1390000]    <2> 	mov [sourcemac + 4],bx
  4796 00003969 890D[CD390000]      <2> 	mov [arpsenderinfo], ecx
  4797 0000396F 66891D[D1390000]    <2> 	mov [arpsenderinfo + 4], bx
  4798 00003976 BF[B7390000]        <2> 	mov edi, frame
  4799 0000397B BE[E1390000]        <2> 	mov esi, framend
  4800 00003980 E84C520000          <2> 	call sendpacket
  4801 00003985 BE[458D0000]        <2> 	mov esi, line
  4802 0000398A E8CEE3FFFF          <2> 	call print
  4803 0000398F C3                  <2> 	ret
  4804                              <2> 	
  4805                              <2> arpinit:
  4806 00003990 BE[E2390000]        <2> 	mov esi, arptable
  4807 00003995 BF[FE8C0000]        <2> 	mov edi, sysmac
  4808 0000399A BB[FA8C0000]        <2> 	mov ebx, sysip
  4809 0000399F 8B0F                <2> 	mov ecx, [edi]
  4810 000039A1 890E                <2> 	mov [esi], ecx
  4811 000039A3 668B4F04            <2> 	mov cx, [edi + 4]
  4812 000039A7 894E04              <2> 	mov [esi + 4], ecx
  4813 000039AA 8B0B                <2> 	mov ecx, [ebx]
  4814 000039AC 894E06              <2> 	mov [esi + 6], ecx
  4815 000039AF C605[E1390000]01    <2> 	mov byte [arpconfig], 1
  4816 000039B6 C3                  <2> 	ret
  4817                              <2> 	
  4818                              <2> ;example frame
  4819                              <2> frame:
  4820 000039B7 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4821 000039BD 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4822 000039C3 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4823                              <2> 	;;example packet
  4824 000039C5 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4825 000039C7 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4826 000039C9 0604                <2> 					db 6,4			;length of mac, length of ip
  4827 000039CB 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4828 000039CD 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4829 000039D3 C0A80073            <2> 					db 192,168,0,115		;ip
  4830 000039D7 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4831 000039DD C0A80000            <2> 					db 192,168,0,0			;ip
  4832                              <2> framend:
  4833                              <2> 
  4834 000039E1 00                  <2> arpconfig db 0
  4835                              <2> arptable:	;;mac,ip
  4836 000039E2 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4837 000039EB 00<rept>            <2>
  4838                              <2> arptableend:	
  4839                              <1> %endif
  4840                              <1> %include 'source/programs/batch.asm'
  4841 00003A46 FF2C626174636800    <2> db 255,44,"batch",0
  4842                              <2> 	batchst: 
  4843 00003A4E 8B3D[202E0000]      <2> 		mov edi, [currentcommandloc]
  4844 00003A54 81C706000000        <2> 		add edi, 6
  4845 00003A5A 803F00              <2> 		cmp byte [edi], 0
  4846 00003A5D 0F846D000000        <2> 		je near nonamefound
  4847 00003A63 BE00004000          <2> 		mov esi, 0x400000
  4848 00003A68 E8E92A0000          <2> 		call loadfile
  4849 00003A6D 89D0                <2> 		mov eax, edx
  4850 00003A6F 3D94010000          <2> 		cmp eax, 404
  4851 00003A74 7465                <2> 		je goodbatchname
  4852 00003A76 BE[813A0000]        <2> 		mov esi, badbatchname
  4853 00003A7B E8DDE2FFFF          <2> 		call print
  4854 00003A80 C3                  <2> 		ret
  4855 00003A81 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4856 00003A8A 20616C726561647920- <2>
  4857 00003A93 657869737473210A00  <2>
  4858 00003A9C 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4859 00003AA5 746F20747970652061- <2>
  4860 00003AAE 206E616D6520616674- <2>
  4861 00003AB7 65722074686520636F- <2>
  4862 00003AC0 6D6D616E642E0A00    <2>
  4863 00003AC8 00000000            <2> 		esicache3 dd 0
  4864 00003ACC 00000000            <2> 		esicache2 dd 0
  4865                              <2> 	nonamefound:
  4866 00003AD0 BE[9C3A0000]        <2> 		mov esi, namenotfoundbatch
  4867 00003AD5 E883E2FFFF          <2> 		call print
  4868 00003ADA C3                  <2> 		ret
  4869                              <2> 	goodbatchname:
  4870 00003ADB BE00004000          <2> 		mov esi, 0x400000
  4871                              <2> 	batchcreate:
  4872 00003AE0 8935[C83A0000]      <2> 		mov [esicache3], esi
  4873 00003AE6 BF00008000          <2> 		mov edi, 0x800000
  4874 00003AEB B00A                <2> 		mov al, 10
  4875 00003AED B307                <2> 		mov bl, 7
  4876 00003AEF B404                <2> 		mov ah, 4
  4877 00003AF1 CD30                <2> 		int 30h
  4878 00003AF3 8935[CC3A0000]      <2> 		mov [esicache2], esi
  4879 00003AF9 8A0E                <2> 		mov cl, [esi]
  4880 00003AFB 8B35[C83A0000]      <2> 		mov esi, [esicache3]
  4881 00003B01 BB[353B0000]        <2> 		mov ebx, exitword
  4882 00003B06 E854F3FFFF          <2> 		call cndtest
  4883 00003B0B 3C01                <2> 		cmp al, 1
  4884 00003B0D 7411                <2> 		je endbatchcreate
  4885 00003B0F 3C02                <2> 		cmp al, 2
  4886 00003B11 740D                <2> 		je endbatchcreate
  4887 00003B13 8B35[CC3A0000]      <2> 		mov esi, [esicache2]
  4888 00003B19 B00A                <2> 		mov al, 10
  4889 00003B1B 8806                <2> 		mov [esi], al
  4890 00003B1D 46                  <2> 		inc esi
  4891 00003B1E EBC0                <2> 		jmp batchcreate
  4892                              <2> 	endbatchcreate:
  4893 00003B20 8B35[C83A0000]      <2> 		mov esi, [esicache3]
  4894 00003B26 31C0                <2> 		xor eax, eax
  4895 00003B28 8806                <2> 		mov [esi], al
  4896 00003B2A BE00004000          <2> 		mov esi, 0x400000
  4897 00003B2F E829E2FFFF          <2> 		call print
  4898 00003B34 C3                  <2> 		ret
  4899                              <2> 	
  4900 00003B35 5C7800              <2> 	exitword db "\x",0
  4901 00003B38 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4902 00003B41 6F20657869742E0A00  <2>
  4903                              <1> %ifdef gui.background
  4904                              <1> 	%include 'source/programs/background.asm'
  4905                              <1> %endif
  4906                              <1> %include 'source/programs/beep.asm'
  4907 00003B4A FF2C6265657000      <2> 	db 255,44,"beep",0
  4908                              <2> beep:
  4909 00003B51 B8[763B0000]        <2> 	mov eax, beepstart
  4910 00003B56 A3[6B020000]        <2> 	mov [soundpos], eax
  4911 00003B5B B8[7A3B0000]        <2> 	mov eax, beepend
  4912 00003B60 A3[6F020000]        <2> 	mov [soundendpos], eax
  4913 00003B65 C605[68020000]01    <2> 	mov byte [soundon], 1
  4914                              <2> waitforsoundendbeep:
  4915 00003B6C A0[68020000]        <2> 	mov al, [soundon]
  4916 00003B71 3C00                <2> 	cmp al, 0
  4917 00003B73 75F7                <2> 	jne waitforsoundendbeep
  4918 00003B75 C3                  <2> 	ret
  4919                              <2> 	
  4920                              <2> beepstart:
  4921 00003B76 3200D111            <2> 	dw 50, 4561
  4922                              <2> beepend:
  4923                              <1> %include 'source/programs/cd.asm'
  4924 00003B7A FF2C636400          <2> db 255,44,"cd",0
  4925                              <2> cd:
  4926 00003B7F 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  4927 00003B85 81C603000000        <2> 	add esi, 3
  4928 00003B8B 8B3D[AAB50000]      <2> 	mov edi, [currentfolderloc]
  4929 00003B91 893D[A6B50000]      <2> 	mov [lastfolderloc], edi
  4930 00003B97 81C7[AEB50000]      <2> 	add edi, currentfolder
  4931 00003B9D 4F                  <2> 	dec edi
  4932 00003B9E 66813E2E2E          <2> 	cmp word [esi], ".."
  4933 00003BA3 742A                <2> 	je .moveup
  4934 00003BA5 47                  <2> 	inc edi
  4935                              <2> .movedown:
  4936 00003BA6 8A06                <2> 	mov al, [esi]
  4937 00003BA8 8807                <2> 	mov [edi], al
  4938 00003BAA 47                  <2> 	inc edi
  4939 00003BAB 46                  <2> 	inc esi
  4940 00003BAC 3C00                <2> 	cmp al, 0
  4941 00003BAE 740A                <2> 	je .donecd
  4942 00003BB0 81FF[AEB70000]      <2> 	cmp edi, currentfolderend
  4943 00003BB6 72EE                <2> 	jb .movedown
  4944 00003BB8 30C0                <2> 	xor al, al
  4945                              <2> .donecd:
  4946 00003BBA 4F                  <2> 	dec edi
  4947 00003BBB C6072F              <2> 	mov byte [edi], '/'
  4948 00003BBE 47                  <2> 	inc edi
  4949 00003BBF C60700              <2> 	mov byte [edi], 0
  4950 00003BC2 81EF[AEB50000]      <2> 	sub edi, currentfolder
  4951 00003BC8 893D[AAB50000]      <2> 	mov [currentfolderloc], edi
  4952 00003BCE C3                  <2> 	ret
  4953                              <2> .moveup:
  4954 00003BCF 31C0                <2> 	xor eax, eax
  4955 00003BD1 A3[A6B50000]        <2> 	mov [lastfolderloc], eax
  4956                              <2> .moveuploop:
  4957 00003BD6 4F                  <2> 	dec edi
  4958 00003BD7 8A07                <2> 	mov al, [edi]
  4959 00003BD9 81FF[AEB50000]      <2> 	cmp edi, currentfolder
  4960 00003BDF 763B                <2> 	jbe .moveupover
  4961 00003BE1 3C2F                <2> 	cmp al, '/'
  4962 00003BE3 75F1                <2> 	jne .moveuploop
  4963 00003BE5 C6072F              <2> 	mov byte [edi], '/'
  4964 00003BE8 47                  <2> 	inc edi
  4965 00003BE9 C60700              <2> 	mov byte [edi], 0
  4966 00003BEC 81EF[AEB50000]      <2> 	sub edi, currentfolder
  4967 00003BF2 893D[AAB50000]      <2> 	mov [currentfolderloc], edi
  4968 00003BF8 81C7[AEB50000]      <2> 	add edi, currentfolder
  4969 00003BFE 4F                  <2> 	dec edi
  4970                              <2> .lastfolder:
  4971 00003BFF 4F                  <2> 	dec edi
  4972 00003C00 8A07                <2> 	mov al, [edi]
  4973 00003C02 81FF[AEB50000]      <2> 	cmp edi, currentfolder
  4974 00003C08 7604                <2> 	jbe .donemoveup
  4975 00003C0A 3C2F                <2> 	cmp al, '/'
  4976 00003C0C 75F1                <2> 	jne .lastfolder
  4977                              <2> .donemoveup:
  4978 00003C0E 47                  <2> 	inc edi
  4979 00003C0F 81EF[AEB50000]      <2> 	sub edi, currentfolder
  4980 00003C15 893D[A6B50000]      <2> 	mov [lastfolderloc], edi
  4981 00003C1B C3                  <2> 	ret
  4982                              <2> .moveupover:
  4983 00003C1C BF[AEB50000]        <2> 	mov edi, currentfolder
  4984 00003C21 C6072F              <2> 	mov byte [edi], '/'
  4985 00003C24 47                  <2> 	inc edi
  4986 00003C25 C60700              <2> 	mov byte [edi], 0
  4987 00003C28 31C0                <2> 	xor eax, eax
  4988 00003C2A A3[A6B50000]        <2> 	mov [lastfolderloc], eax
  4989 00003C2F 40                  <2> 	inc eax
  4990 00003C30 A3[AAB50000]        <2> 	mov [currentfolderloc], eax
  4991 00003C35 C3                  <2> 	ret
  4992                              <1> %include 'source/programs/charmap.asm'
  4993 00003C36 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4994 00003C3F 00                  <2>
  4995 00003C40 66BB0700            <2> 	mov bx, 7
  4996 00003C44 B020                <2> 	mov al, " "
  4997 00003C46 E856E6FFFF          <2> 	call prcharq
  4998 00003C4B E851E6FFFF          <2> 	call prcharq
  4999 00003C50 E84CE6FFFF          <2> 	call prcharq
  5000 00003C55 E847E6FFFF          <2> 	call prcharq
  5001 00003C5A B030                <2> 	mov al, "0"
  5002                              <2> charmapnumprnt:
  5003 00003C5C E840E6FFFF          <2> 	call prcharq
  5004 00003C61 FEC0                <2> 	inc al
  5005 00003C63 6650                <2> 	push ax
  5006 00003C65 B020                <2> 	mov al, " "
  5007 00003C67 E835E6FFFF          <2> 	call prcharq
  5008 00003C6C 6658                <2> 	pop ax
  5009 00003C6E 3C39                <2> 	cmp al, "9"
  5010 00003C70 76EA                <2> 	jbe charmapnumprnt
  5011 00003C72 B041                <2> 	mov al, "A"
  5012                              <2> charmapnumprnt2:
  5013 00003C74 E828E6FFFF          <2> 	call prcharq
  5014 00003C79 FEC0                <2> 	inc al
  5015 00003C7B 6650                <2> 	push ax
  5016 00003C7D B020                <2> 	mov al, " "
  5017 00003C7F E81DE6FFFF          <2> 	call prcharq
  5018 00003C84 6658                <2> 	pop ax
  5019 00003C86 3C47                <2> 	cmp al, "G"
  5020 00003C88 72EA                <2> 	jb charmapnumprnt2
  5021                              <2> 	
  5022 00003C8A BE[458D0000]        <2> 	mov esi, line
  5023 00003C8F E8B7E0FFFF          <2> 	call printquiet
  5024 00003C94 6631C0              <2> 	xor ax, ax
  5025 00003C97 88C1                <2> 	mov cl, al
  5026 00003C99 E895F3FFFF          <2> 	call showhexsmall
  5027 00003C9E E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5028                              <2> charmapcopy:
  5029 00003CA3 FEC0                <2> 	inc al
  5030 00003CA5 6650                <2> 	push ax
  5031 00003CA7 3C08                <2> 	cmp al, 8
  5032 00003CA9 744D                <2> 	je charmapnocopy
  5033 00003CAB 3C09                <2> 	cmp al, 9
  5034 00003CAD 7449                <2> 	je charmapnocopy
  5035 00003CAF 3C0A                <2> 	cmp al, 10
  5036 00003CB1 7445                <2> 	je charmapnocopy
  5037 00003CB3 3C0D                <2> 	cmp al, 13
  5038 00003CB5 7441                <2> 	je charmapnocopy
  5039 00003CB7 3CFF                <2> 	cmp al, 255
  5040 00003CB9 743D                <2> 	je charmapnocopy
  5041 00003CBB 3C00                <2> 	cmp al, 0
  5042 00003CBD 7434                <2> 	je nomorecharmap
  5043 00003CBF E8DDE5FFFF          <2> 	call prcharq
  5044 00003CC4 B020                <2> 	mov al, " "
  5045 00003CC6 E8D6E5FFFF          <2> 	call prcharq
  5046 00003CCB 6658                <2> 	pop ax
  5047                              <2> charmapcopycheck:
  5048 00003CCD FEC4                <2> 	inc ah
  5049 00003CCF 80FC10              <2> 	cmp ah, 16
  5050 00003CD2 72CF                <2> 	jb charmapcopy
  5051 00003CD4 6650                <2> 	push ax
  5052 00003CD6 BE[458D0000]        <2> 	mov esi, line
  5053 00003CDB E86BE0FFFF          <2> 	call printquiet
  5054 00003CE0 6658                <2> 	pop ax
  5055 00003CE2 3CFF                <2> 	cmp al, 255
  5056 00003CE4 740D                <2> 	je nomorecharmap
  5057 00003CE6 88C1                <2> 	mov cl, al
  5058 00003CE8 FEC1                <2> 	inc cl
  5059 00003CEA E844F3FFFF          <2> 	call showhexsmall
  5060 00003CEF 30E4                <2> 	xor ah, ah
  5061 00003CF1 EBB0                <2> 	jmp charmapcopy
  5062                              <2> nomorecharmap:
  5063 00003CF3 E975EEFFFF          <2> 	jmp nwcmd
  5064                              <2> charmapnocopy:
  5065 00003CF8 6650                <2> 	push ax
  5066 00003CFA B020                <2> 	mov al, " "
  5067 00003CFC E8A0E5FFFF          <2> 	call prcharq
  5068 00003D01 E89BE5FFFF          <2> 	call prcharq
  5069 00003D06 6658                <2> 	pop ax
  5070 00003D08 EBC3                <2> 	jmp charmapcopycheck
  5071                              <1> %ifdef gui.included
  5072                              <1> 	%include 'source/programs/circle.asm'
  5073 00003D0A FF2C636972636C6500  <2> db 255,44,"circle",0
  5074                              <2> circle:
  5075 00003D13 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  5076 00003D19 81C607000000        <2> 	add esi, 7
  5077 00003D1F 66B91000            <2> 	mov cx, 16
  5078 00003D23 30C0                <2> 	xor al, al
  5079 00003D25 3806                <2> 	cmp [esi], al
  5080 00003D27 7405                <2> 	je .nocmdline
  5081 00003D29 E8C5F4FFFF          <2> 	call cnvrttxt
  5082                              <2> .nocmdline:
  5083 00003D2E E812090000          <2> 	call linetester.stime
  5084 00003D33 E857000000          <2> 	call fcircle.nocmdline
  5085 00003D38 E820090000          <2> 	call linetester.etime
  5086 00003D3D 53                  <2> 	push ebx
  5087 00003D3E 57                  <2> 	push edi
  5088 00003D3F E8E7E4FFFF          <2> 	call getchar
  5089 00003D44 59                  <2> 	pop ecx
  5090 00003D45 E8C7F3FFFF          <2> 	call showdec
  5091 00003D4A BE[EB460000]        <2> 	mov esi, linetester.msgcircle
  5092 00003D4F E8F7DFFFFF          <2> 	call printquiet
  5093 00003D54 59                  <2> 	pop ecx
  5094 00003D55 E8B7F3FFFF          <2> 	call showdec
  5095 00003D5A BE[02470000]        <2> 	mov esi, linetester.msgtime
  5096 00003D5F E8E7DFFFFF          <2> 	call printquiet
  5097 00003D64 E876300000          <2> 	call reloadallgraphics
  5098 00003D69 C3                  <2> 	ret
  5099                              <2> 	
  5100 00003D6A FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5101 00003D73 00                  <2>
  5102                              <2> fcircle:	
  5103 00003D74 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  5104 00003D7A 81C608000000        <2> 	add esi, 8
  5105 00003D80 66B91000            <2> 	mov cx, 16
  5106 00003D84 30C0                <2> 	xor al, al
  5107 00003D86 3806                <2> 	cmp [esi], al
  5108 00003D88 7405                <2> 	je .nocmdline
  5109 00003D8A E864F4FFFF          <2> 	call cnvrttxt
  5110                              <2> .nocmdline:
  5111 00003D8F 6689C8              <2> 	mov ax, cx
  5112 00003D92 66D1E1              <2> 	shl cx, 1
  5113 00003D95 6689CA              <2> 	mov dx, cx
  5114 00003D98 663B15[0B570000]    <2> 	cmp dx, [resolutionx]
  5115 00003D9F 731B                <2> 	jae .done
  5116 00003DA1 663B0D[0D570000]    <2> 	cmp cx, [resolutiony]
  5117 00003DA8 7312                <2> 	jae .done
  5118 00003DAA 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5119 00003DB1 31FF                <2> 	xor edi, edi
  5120 00003DB3 803D[589F0000]01    <2> 	cmp byte [guion], 1
  5121 00003DBA 7401                <2> 	je .lp
  5122 00003DBC C3                  <2> .done ret
  5123                              <2> .lp:
  5124 00003DBD 6629C2              <2> 	sub dx, ax
  5125 00003DC0 6629C1              <2> 	sub cx, ax
  5126 00003DC3 60                  <2> 	pusha
  5127 00003DC4 E8352B0000          <2> 	call fillcircle
  5128 00003DC9 61                  <2> 	popa
  5129 00003DCA 47                  <2> 	inc edi
  5130 00003DCB 660335[64020000]    <2> 	add si, [timenanoseconds]
  5131 00003DD2 6601C2              <2> 	add dx, ax
  5132 00003DD5 6601C2              <2> 	add dx, ax
  5133 00003DD8 6601C2              <2> 	add dx, ax
  5134 00003DDB 6601C1              <2> 	add cx, ax
  5135 00003DDE 663B15[0B570000]    <2> 	cmp dx, [resolutionx]
  5136 00003DE5 72D6                <2> 	jb .lp
  5137 00003DE7 6689C2              <2> 	mov dx, ax
  5138 00003DEA 6601C2              <2> 	add dx, ax
  5139 00003DED 6601C1              <2> 	add cx, ax
  5140 00003DF0 6601C1              <2> 	add cx, ax
  5141 00003DF3 663B0D[0D570000]    <2> 	cmp cx, [resolutiony]
  5142 00003DFA 72C1                <2> 	jb .lp
  5143 00003DFC C3                  <2> 	ret
  5144                              <1> %endif
  5145                              <1> %include 'source/programs/clear.asm'
  5146 00003DFD FF2C636C65617200    <2> db 255,44,"clear",0
  5147 00003E05 E8B9DFFFFF          <2> 		call clear
  5148 00003E0A C3                  <2> 		ret 
  5149                              <1> %include 'source/programs/cpuid.asm'
  5150 00003E0B FF2C637075696400    <2> db 255,44,"cpuid",0
  5151 00003E13 31C0                <2> 	xor eax, eax
  5152 00003E15 0FA2                <2> 	cpuid
  5153 00003E17 891D[683E0000]      <2> 	mov [cpuidbuf], ebx
  5154 00003E1D 8915[6C3E0000]      <2> 	mov [cpuidbuf + 4], edx
  5155 00003E23 890D[703E0000]      <2> 	mov [cpuidbuf + 8], ecx
  5156 00003E29 BE[683E0000]        <2> 	mov esi, cpuidbuf
  5157 00003E2E E82ADFFFFF          <2> 	call print
  5158 00003E33 BE[458D0000]        <2> 	mov esi, line
  5159 00003E38 E820DFFFFF          <2> 	call print
  5160 00003E3D B801000000          <2> 	mov eax, 1
  5161 00003E42 0FA2                <2> 	cpuid
  5162 00003E44 89C1                <2> 	mov ecx, eax
  5163 00003E46 C605[32300000]02    <2> 	mov byte [firsthexshown], 2
  5164 00003E4D E8F5F1FFFF          <2> 	call showhex
  5165 00003E52 B808000080          <2> 	mov eax, 0x80000008
  5166 00003E57 0FA2                <2> 	cpuid
  5167 00003E59 89C1                <2> 	mov ecx, eax
  5168 00003E5B C605[32300000]02    <2> 	mov byte [firsthexshown], 2
  5169 00003E62 E8E0F1FFFF          <2> 	call showhex
  5170 00003E67 C3                  <2> 	ret
  5171                              <2> 	
  5172 00003E68 00<rept>            <2> cpuidbuf times 13 db 0
  5173                              <2> cpuidvendorend:
  5174                              <1> %ifdef network.included
  5175                              <1> 	%include 'source/programs/dhcp.asm'
  5176 00003E75 FF2C6468637000      <2> db 255,44,"dhcp",0
  5177                              <2> dhcp:
  5178 00003E7C BE[3C3F0000]        <2> 	mov esi, .dhcp.mac
  5179 00003E81 BB[1C400000]        <2> 	mov ebx, .dhcp.option.mac
  5180 00003E86 BF[FC3E0000]        <2> 	mov edi, .mac
  5181 00003E8B 31C9                <2> 	xor ecx, ecx
  5182 00003E8D 66890D[0E3F0000]    <2> 	mov [.ip.checksum], cx
  5183 00003E94 66890D[1E3F0000]    <2> 	mov [.udp.checksum], cx
  5184 00003E9B 8B0D[FE8C0000]      <2> 	mov ecx, [sysmac]
  5185 00003EA1 890B                <2> 	mov [ebx], ecx
  5186 00003EA3 890F                <2> 	mov [edi], ecx
  5187 00003EA5 890E                <2> 	mov [esi], ecx
  5188 00003EA7 668B0D[028D0000]    <2> 	mov cx, [sysmac + 4]
  5189 00003EAE 66894B04            <2> 	mov [ebx + 4], cx
  5190 00003EB2 66894E04            <2> 	mov [esi + 4], cx
  5191 00003EB6 66894F04            <2> 	mov [edi + 4], cx
  5192 00003EBA BF[043F0000]        <2> 	mov edi, .ip.header
  5193 00003EBF BE[183F0000]        <2> 	mov esi, .ip.headerend
  5194 00003EC4 E8204D0000          <2> 	call getchecksum
  5195 00003EC9 66890D[0E3F0000]    <2> 	mov [.ip.checksum], cx
  5196 00003ED0 BF[183F0000]        <2> 	mov edi, .udp.header
  5197 00003ED5 BE[33400000]        <2> 	mov esi, .udp.end
  5198 00003EDA E80A4D0000          <2> 	call getchecksum
  5199 00003EDF 66890D[1E3F0000]    <2> 	mov [.udp.checksum], cx
  5200 00003EE6 BF[F63E0000]        <2> 	mov edi, .frame
  5201 00003EEB BE[33400000]        <2> 	mov esi, .udp.end
  5202 00003EF0 E8DC4C0000          <2> 	call sendpacket
  5203 00003EF5 C3                  <2> 	ret
  5204                              <2> .frame:
  5205 00003EF6 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5206 00003EFC 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5207 00003F02 0800                <2> 	db 8,0
  5208                              <2> .ip.header:
  5209 00003F04 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5210 00003F05 00                  <2> 	db 0
  5211 00003F06 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5212 00003F08 0000                <2> 	dw 0
  5213 00003F0A 0000                <2> 	dw 0
  5214 00003F0C 80                  <2> 	db 0x80
  5215 00003F0D 11                  <2> 	db 17
  5216 00003F0E 0000                <2> .ip.checksum dw 0
  5217 00003F10 00000000            <2> 	db 0,0,0,0
  5218 00003F14 FFFFFFFF            <2> 	db 255,255,255,255	
  5219                              <2> .ip.headerend:
  5220                              <2> .udp.header:
  5221 00003F18 0044                <2> 	db 0,68	;source port
  5222 00003F1A 0043                <2> 	db 0,67 ;destination port
  5223 00003F1C 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5224 00003F1E 0000                <2> .udp.checksum dw 0
  5225                              <2> .udp.headerend:
  5226                              <2> .dhcp.data:
  5227 00003F20 01                  <2> 	db 1	;message type
  5228 00003F21 01                  <2> 	db 1	;hardware type
  5229 00003F22 06                  <2> 	db 6	;hardware address length
  5230 00003F23 00                  <2> 	db 0	;hops
  5231 00003F24 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5232 00003F28 0000                <2> 	db 0,0	;seconds elapsed
  5233 00003F2A 0000                <2> 	db 0,0	;flags
  5234 00003F2C 00000000            <2> 	db 0,0,0,0	;client ip address
  5235 00003F30 00000000            <2> 	db 0,0,0,0	;your ip address
  5236 00003F34 00000000            <2> 	db 0,0,0,0	;server ip address
  5237 00003F38 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5238 00003F3C 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5239 00003F42 00<rept>            <2> 	times 10 db 0	;padding
  5240 00003F4C 00<rept>            <2> 	times 64 db 0	;server host name
  5241 00003F8C 00<rept>            <2> 	times 128 db 0	;boot file name
  5242 0000400C 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5243                              <2> .dhcp.option.type:
  5244 00004010 350103              <2> 	db 53,1,3	;DHCP Request
  5245 00004013 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5246 00004019 3D07                <2> 	db 61,7 ;client id(mac)
  5247 0000401B 01                  <2> 	db 1	;Type=Ethernet
  5248 0000401C 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5249 00004022 0C08                <2> 	db 12,8 ;host name
  5250 00004024 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5251 0000402C 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5252 00004032 FF                  <2> 	db 0xFF	;end DHCP options
  5253                              <2> .dhcp.end:
  5254                              <2> .udp.end:
  5255                              <2> 	
  5256                              <1> %endif
  5257                              <1> %ifdef disk.none
  5258                              <1> %else
  5259                              <1> 	%include 'source/programs/dos.asm'
  5260 00004033 FF2C646F7300        <2> db 255,44,"dos",0
  5261                              <2> dosrunner:
  5262 00004039 8925[A2B50000]      <2> 	mov [previousstack], esp
  5263 0000403F 8B3D[202E0000]      <2> 	mov edi, [currentcommandloc]
  5264 00004045 81C704000000        <2> 	add edi, 4
  5265 0000404B BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5266 00004050 E801250000          <2> 	call loadfile
  5267 00004055 8B3D[202E0000]      <2> 	mov edi, [currentcommandloc]
  5268 0000405B 81C704000000        <2> 	add edi, 4
  5269 00004061 81FA94010000        <2> 	cmp edx, 404
  5270 00004067 0F845E000000        <2> 	je near .noprogfound
  5271 0000406D BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5272 00004072 31C9                <2> 	xor ecx, ecx
  5273                              <2> .findparams:
  5274 00004074 47                  <2> 	inc edi
  5275 00004075 8A07                <2> 	mov al, [edi]
  5276 00004077 3C20                <2> 	cmp al, " "
  5277 00004079 75F9                <2> 	jne .findparams
  5278                              <2> .copyparams:
  5279 0000407B 8A07                <2> 	mov al, [edi]
  5280 0000407D 8803                <2> 	mov [ebx], al
  5281 0000407F 43                  <2> 	inc ebx
  5282 00004080 47                  <2> 	inc edi
  5283 00004081 41                  <2> 	inc ecx
  5284 00004082 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5285 00004088 7304                <2> 	jae .nomoreparams
  5286 0000408A 3C00                <2> 	cmp al, 0
  5287 0000408C 75ED                <2> 	jne .copyparams
  5288                              <2> .nomoreparams:
  5289 0000408E 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5290 00004094 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5291 00004098 8ED8                <2> 	mov ds, ax
  5292 0000409A 8EC0                <2> 	mov es, ax
  5293 0000409C 8EE0                <2> 	mov fs, ax
  5294 0000409E 8EE8                <2> 	mov gs, ax
  5295 000040A0 31C0                <2> 	xor eax, eax
  5296 000040A2 31DB                <2> 	xor ebx, ebx
  5297 000040A4 31C9                <2> 	xor ecx, ecx
  5298 000040A6 31D2                <2> 	xor edx, edx
  5299 000040A8 31FF                <2> 	xor edi, edi
  5300 000040AA 31F6                <2> 	xor esi, esi
  5301 000040AC 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5302 000040B3 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5303 000040B7 6689DA              <2> 	mov dx, bx
  5304 000040BA 8EC3                <2> 	mov es, bx
  5305 000040BC 8EE3                <2> 	mov fs, bx
  5306 000040BE 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5307 000040C2 8EEB                <2> 	mov gs, bx
  5308 000040C4 8B25[A2B50000]      <2> 	mov esp, [previousstack]
  5309 000040CA C3                  <2> 	ret
  5310                              <2> .noprogfound:
  5311 000040CB BE[0C8D0000]        <2> 	mov esi, notfound1
  5312 000040D0 E888DCFFFF          <2> 	call print
  5313 000040D5 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  5314 000040DB 81C604000000        <2> 	add esi, 4
  5315 000040E1 E877DCFFFF          <2> 	call print
  5316 000040E6 BE[148D0000]        <2> 	mov esi, notfound2
  5317 000040EB E86DDCFFFF          <2> 	call print
  5318 000040F0 C3                  <2> 	ret
  5319                              <2> 	
  5320                              <1> %endif
  5321                              <1> %include 'source/programs/dump.asm'
  5322 000040F1 FF2C64756D7000      <2> db 255,44,"dump",0
  5323 000040F8 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  5324 000040FE 81C605000000        <2> 	add esi, 5
  5325 00004104 31C9                <2> 	xor ecx, ecx
  5326 00004106 66B83078            <2> 	mov ax, "0x"
  5327 0000410A 663906              <2> 	cmp [esi], ax
  5328 0000410D 740A                <2> 	je dumphexin
  5329 0000410F E8DFF0FFFF          <2> 	call cnvrttxt
  5330 00004114 E910000000          <2> 	jmp dumphexnow
  5331                              <2> dumphexin:
  5332 00004119 81C602000000        <2> 	add esi, 2
  5333 0000411F E886F0FFFF          <2> 	call cnvrthextxt
  5334 00004124 E900000000          <2> 	jmp dumphexnow
  5335                              <2> dumphexnow:
  5336 00004129 89CF                <2> 	mov edi, ecx
  5337 0000412B 89FE                <2> 	mov esi, edi
  5338 0000412D 81C680030000        <2> 	add esi, 896
  5339                              <2> dumphexloop:
  5340 00004133 8B0F                <2> 	mov ecx, [edi]
  5341 00004135 C605[32300000]05    <2> 	mov byte [firsthexshown],5
  5342 0000413C E806EFFFFF          <2> 	call showhex
  5343 00004141 81C704000000        <2> 	add edi, 4
  5344 00004147 39F7                <2> 	cmp edi, esi
  5345 00004149 72E8                <2> 	jb dumphexloop
  5346 0000414B E802E6FFFF          <2> 	call termcopy
  5347 00004150 C3                  <2> 	ret 
  5348                              <1> %include 'source/programs/echo.asm'
  5349                              <2> 
  5350 00004151 FF2C6563686F00      <2> db 255,44,"echo",0
  5351                              <2> 	echoprog:
  5352 00004158 8B35[202E0000]      <2> 		mov esi, [currentcommandloc]
  5353 0000415E 81C605000000        <2> 		add esi, 5
  5354 00004164 8A06                <2> 		mov al, [esi]
  5355 00004166 E8F2DBFFFF          <2> 		call print
  5356 0000416B BE[458D0000]        <2> 		mov esi, line
  5357 00004170 E8E8DBFFFF          <2> 		call print
  5358 00004175 C3                  <2> 		ret
  5359 00004176 BB[22B80000]        <2> 	echovr:	mov ebx, variables
  5360 0000417B BF06000000          <2> 		mov edi, 6
  5361 00004180 E83C000000          <2> 		call nxtvrech
  5362 00004185 E954000000          <2> 		jmp prntvr2
  5363 0000418A B13D                <2> 	echvar:	mov cl, '='
  5364 0000418C 43                  <2> 		inc ebx
  5365 0000418D 8A03                <2> 		mov al, [ebx]
  5366 0000418F 3C00                <2> 		cmp al, 0
  5367 00004191 742E                <2> 		je nxtvrech
  5368 00004193 3C3D                <2> 		cmp al, '='
  5369 00004195 7422                <2> 		je nxtvrechb1
  5370 00004197 8B35[202E0000]      <2> 		mov esi, [currentcommandloc]
  5371 0000419D 01FE                <2> 		add esi, edi
  5372 0000419F E8BBECFFFF          <2> 		call cndtest
  5373 000041A4 3C02                <2> 		cmp al, 2
  5374 000041A6 7432                <2> 		je prntvr
  5375 000041A8 3C01                <2> 		cmp al, 1
  5376 000041AA 742E                <2> 		je prntvr
  5377 000041AC 8B35[202E0000]      <2> 		mov esi, [currentcommandloc]
  5378 000041B2 01FE                <2> 		add esi, edi
  5379 000041B4 E908000000          <2> 		jmp nxtvrech
  5380                              <2> 	nxtvrechb1:
  5381 000041B9 81EB02000000        <2> 		sub ebx, 2
  5382 000041BF EBC9                <2> 		jmp echvar
  5383 000041C1 8A03                <2> 	nxtvrech: mov al, [ebx]
  5384 000041C3 3C05                <2> 		cmp al, 5
  5385 000041C5 740A                <2> 		je nxtvrec2
  5386 000041C7 43                  <2> 		inc ebx
  5387 000041C8 81FB[22C80000]      <2> 		cmp ebx, varend
  5388 000041CE 72F1                <2> 		jb nxtvrech
  5389 000041D0 C3                  <2> 		ret
  5390 000041D1 43                  <2> 	nxtvrec2: inc ebx
  5391 000041D2 8A03                <2> 		mov al, [ebx]
  5392 000041D4 3C04                <2> 		cmp al, 4
  5393 000041D6 74B2                <2> 		je echvar
  5394 000041D8 EBE7                <2> 		jmp nxtvrech
  5395 000041DA 43                  <2> 	prntvr: inc ebx
  5396 000041DB 89DE                <2> 		mov esi, ebx
  5397 000041DD C3                  <2> 		ret
  5398 000041DE E87ADBFFFF          <2> 	prntvr2: call print
  5399 000041E3 BE[458D0000]        <2> 		mov esi, line
  5400 000041E8 E870DBFFFF          <2> 		call print
  5401 000041ED C3                  <2> 		ret 
  5402                              <1> %include 'source/programs/else.asm'
  5403 000041EE FF2C656C736500      <2> 	db 255,44,"else",0
  5404 000041F5 31C0                <2> elsecmd:	xor eax, eax
  5405 000041F7 3805[1CB80000]      <2> 	cmp [BATCHISON], al
  5406 000041FD 0F841BF7FFFF        <2> 	je near notbatch
  5407 00004203 A0[B3B70000]        <2> 	mov al, [IFON]
  5408 00004208 BE[B4B70000]        <2> 	mov esi, IFTRUE
  5409 0000420D 01C6                <2> 	add esi, eax
  5410 0000420F 8A06                <2> 	mov al, [esi]
  5411 00004211 3401                <2> 	xor al, 1
  5412 00004213 8806                <2> 	mov [esi], al
  5413 00004215 C3                  <2> 	ret 
  5414                              <1> %include 'source/programs/exit.asm'
  5415 00004216 FF2C6578697400      <2> db 255,44,"exit",0
  5416 0000421D 803D[B2B70000]01    <2> 	cmp byte [ranboot], 1
  5417 00004224 0F84D7E8FFFF        <2> 	je near returnfromexp
  5418 0000422A E9BFE7FFFF          <2> 	jmp nobootfile
  5419                              <1> %include 'source/programs/fi.asm'
  5420 0000422F FF2C666900          <2> 	db 255,44,"fi",0
  5421 00004234 30C0                <2> 	xor al, al
  5422 00004236 3805[1CB80000]      <2> 	cmp [BATCHISON], al
  5423 0000423C 0F84DCF6FFFF        <2> 	je near notbatch
  5424 00004242 B001                <2> fi:	mov al, 1
  5425 00004244 2805[B3B70000]      <2> 	sub [IFON],al
  5426 0000424A C3                  <2> 	ret 
  5427                              <1> %ifdef gui.included
  5428                              <1> 	%include 'source/programs/gui.asm'
  5429 0000424B FF2C67756900        <2> db 255,44,"gui",0
  5430                              <2> guiswitcher:
  5431 00004251 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  5432 00004257 81C604000000        <2> 	add esi, 4
  5433 0000425D 31C9                <2> 	xor ecx, ecx
  5434 0000425F 803E00              <2> 	cmp byte [esi], 0
  5435 00004262 740A                <2> 	je .nomodepref
  5436 00004264 E841EFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5437 00004269 E907000000          <2> 	jmp .modepref
  5438                              <2> .nomodepref:
  5439 0000426E 51                  <2> 	push ecx
  5440 0000426F E84FDBFFFF          <2> 	call clear
  5441 00004274 59                  <2> 	pop ecx
  5442                              <2> .modepref:
  5443 00004275 66BB[1B53]          <2> 	mov bx, guiswitch
  5444 00004279 66891D[080D0000]    <2> 	mov [realmodeptr], bx
  5445 00004280 BB[90420000]        <2> 	mov ebx, guiswitchret
  5446 00004285 891D[040D0000]      <2> 	mov [realmodereturn], ebx
  5447 0000428B E95DC9FFFF          <2> 	jmp realmode
  5448                              <2> guiswitchret:
  5449 00004290 65803D[589F0000]01  <2> 	cmp byte [gs:guion], 1
  5450 00004298 7401                <2> 	je .cont
  5451 0000429A C3                  <2> 	ret
  5452                              <2> .cont:
  5453 0000429B BF[F9540000]        <2> 	mov edi, VBEMODEBLOCK
  5454                              <2> .loop:
  5455 000042A0 658B07              <2> 	mov eax, [gs:edi]
  5456 000042A3 8907                <2> 	mov [edi], eax
  5457 000042A5 47                  <2> 	inc edi
  5458 000042A6 81FF[FD570000]      <2> 	cmp edi, VBEEND
  5459 000042AC 72F2                <2> 	jb .loop
  5460 000042AE A1[21570000]        <2> 	mov eax, [physbaseptr]
  5461 000042B3 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5462 000042B9 C1E304              <2> 	shl ebx, 4
  5463 000042BC 29D8                <2> 	sub eax, ebx
  5464 000042BE A3[21570000]        <2> 	mov [physbaseptr], eax
  5465 000042C3 C605[9F220000]00    <2> 	mov byte [termguion], 0
  5466 000042CA BE[37D00000]        <2> 	mov esi, graphicstable
  5467 000042CF 30C0                <2> 	xor al, al
  5468                              <2> .clear:
  5469 000042D1 8806                <2> 	mov [esi], al
  5470 000042D3 46                  <2> 	inc esi
  5471 000042D4 81FE[37D20000]      <2> 	cmp esi, graphicstableend
  5472 000042DA 72F5                <2> 	jb .clear
  5473 000042DC E8972C0000          <2> 	call guisetup
  5474                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5475 000042E1 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  5476 000042E8 668B0D[0D570000]    <2> 	mov cx, [resolutiony]
  5477 000042EF 6689D3              <2> 	mov bx, dx
  5478 000042F2 6689C8              <2> 	mov ax, cx
  5479 000042F5 66D1EB              <2> 	shr bx, 1
  5480 000042F8 66D1E8              <2> 	shr ax, 1
  5481 000042FB 6689DA              <2> 	mov dx, bx
  5482 000042FE 66D1EA              <2> 	shr dx, 1
  5483 00004301 6689C1              <2> 	mov cx, ax
  5484 00004304 66D1E9              <2> 	shr cx, 1
  5485 00004307 6601D3              <2> 	add bx, dx
  5486 0000430A 6601C8              <2> 	add ax, cx
  5487 0000430D 66D1E9              <2> 	shr cx, 1
  5488 00004310 66C1EB03            <2> 	shr bx, 3
  5489 00004314 66C1E303            <2> 	shl bx, 3
  5490 00004318 66C1E804            <2> 	shr ax, 4
  5491 0000431C 66C1E004            <2> 	shl ax, 4
  5492 00004320 66891D[7D710000]    <2> 	mov [termwindow], bx
  5493 00004327 66A3[7F710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5494 0000432D BE[7D710000]        <2> 	mov esi, termwindow
  5495 00004332 31DB                <2> 	xor ebx, ebx
  5496 00004334 6631C0              <2> 	xor ax, ax
  5497 00004337 E84A330000          <2> 	call showwindow
  5498 0000433C E8BD140000          <2> 	call cursorgui
  5499 00004341 E87DDAFFFF          <2> 	call clear
  5500 00004346 C3                  <2> 	ret
  5501                              <2> 	
  5502                              <1> %endif
  5503                              <1> %include 'source/programs/help.asm'
  5504 00004347 FF2C68656C7000      <2> db 255,44,"help",0
  5505                              <2> lscmd:	
  5506 0000434E B00D                <2> 		mov al, 13
  5507 00004350 E84CDFFFFF          <2> 		call prcharq
  5508 00004355 BE[76320000]        <2> 		mov esi, progstart
  5509 0000435A BB[1B530000]        <2> 		mov ebx, progend
  5510 0000435F BE[A2B10000]        <2> dir:	mov esi, fileindex
  5511 00004364 8A06                <2> 	dirnxt:	mov al, [esi]
  5512 00004366 30E4                <2> 		xor ah, ah
  5513 00004368 3CFF                <2> 		cmp al, 255
  5514 0000436A 7415                <2> 		je dirfnd
  5515 0000436C 46                  <2> 		inc esi
  5516 0000436D 81FE[A2B50000]      <2> 		cmp esi,  fileindexend
  5517 00004373 7339                <2> 		jae dirdn
  5518 00004375 EBED                <2> 		jmp dirnxt
  5519                              <2> 	dirfnd3:
  5520 00004377 46                  <2> 		inc esi
  5521 00004378 81FE[A2B50000]      <2> 		cmp esi, fileindexend
  5522 0000437E 76E4                <2> 		jbe dirnxt
  5523 00004380 4E                  <2> 		dec esi
  5524 00004381 46                  <2> 	dirfnd:	inc esi
  5525 00004382 8A06                <2> 		mov al, [esi]
  5526 00004384 30E4                <2> 		xor ah, ah
  5527 00004386 3C2C                <2> 		cmp al, 44
  5528 00004388 740B                <2> 		je dirfnd2
  5529 0000438A 46                  <2> 		inc esi
  5530 0000438B 81FE[A2B50000]      <2> 		cmp esi,  fileindexend
  5531 00004391 731B                <2> 		jae dirdn
  5532 00004393 EBCF                <2> 		jmp dirnxt
  5533 00004395 46                  <2> 	dirfnd2: inc esi
  5534 00004396 E8B0D9FFFF          <2> 		call printquiet
  5535 0000439B 56                  <2> 		push esi
  5536 0000439C B009                <2> 		mov al, 9
  5537 0000439E E8FEDEFFFF          <2> 		call prcharq
  5538 000043A3 5E                  <2> 		pop esi
  5539 000043A4 81FE[A2B50000]      <2> 		cmp esi,  fileindexend
  5540 000043AA 7302                <2> 		jae dirdn
  5541 000043AC EBB6                <2> 		jmp dirnxt
  5542 000043AE BE[458D0000]        <2> 	dirdn:	mov esi, line
  5543 000043B3 E8A5D9FFFF          <2> 			call print
  5544 000043B8 C3                  <2> 			ret
  5545 000043B9 00                  <2> currentdir db 0
  5546                              <1> %include 'source/programs/if.asm'
  5547 000043BA FF2C696600          <2> 	db 255,44,"if",0
  5548 000043BF 30C0                <2> ifcmd:	xor al, al
  5549 000043C1 3805[1CB80000]      <2> 	cmp [BATCHISON], al
  5550 000043C7 0F8451F5FFFF        <2> 	je near notbatch
  5551 000043CD 8B1D[202E0000]      <2> 	mov ebx, [currentcommandloc]
  5552 000043D3 81C303000000        <2> 	add ebx, 3
  5553 000043D9 89DE                <2> 	mov esi, ebx
  5554 000043DB 8A06                <2> chkeqsn: mov al, [esi]
  5555 000043DD 3C00                <2> 	cmp al, 0
  5556 000043DF 0F8439F5FFFF        <2> 	je near notbatch
  5557 000043E5 3C3D                <2> 	cmp al, '='
  5558 000043E7 0F8403000000        <2> 	je near chkeqdn
  5559 000043ED 46                  <2> 	inc esi
  5560 000043EE EBEB                <2> 	jmp chkeqsn
  5561 000043F0 B000                <2> chkeqdn: mov al, 0 
  5562 000043F2 8806                <2> 	mov [esi], al
  5563 000043F4 46                  <2> 	inc esi
  5564 000043F5 E82AEAFFFF          <2> 	call tester
  5565 000043FA 3C01                <2> 	cmp al, 1
  5566 000043FC 0F8405000000        <2> 	je near trueif
  5567 00004402 E91C000000          <2> 	jmp falseif
  5568 00004407 31C0                <2> trueif:	xor eax, eax
  5569 00004409 A0[B3B70000]        <2> 	mov al, [IFON]
  5570 0000440E FEC0                <2> 	inc al
  5571 00004410 A2[B3B70000]        <2> 	mov [IFON], al
  5572 00004415 30E4                <2> 	xor ah, ah
  5573 00004417 BE[B4B70000]        <2> 	mov esi, IFTRUE
  5574 0000441C 01C6                <2> 	add esi, eax
  5575 0000441E B401                <2> 	mov ah, 1
  5576 00004420 8826                <2> 	mov [esi], ah
  5577 00004422 C3                  <2> 	ret 
  5578 00004423 31C0                <2> falseif: xor eax, eax
  5579 00004425 A0[B3B70000]        <2> 	mov al, [IFON]
  5580 0000442A FEC0                <2> 	inc al
  5581 0000442C A2[B3B70000]        <2> 	mov [IFON], al
  5582 00004431 30E4                <2> 	xor ah, ah
  5583 00004433 BE[B4B70000]        <2> 	mov esi, IFTRUE
  5584 00004438 01C6                <2> 	add esi, eax
  5585 0000443A 30E4                <2> 	xor ah, ah
  5586 0000443C 8826                <2> 	mov [esi], ah
  5587 0000443E C3                  <2> 	ret 
  5588                              <1> %ifdef network.included
  5589                              <1> 	%include 'source/programs/ipconfig.asm'
  5590 0000443F FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5591 00004448 6700                <2>
  5592                              <2> ifconfig:
  5593 0000444A 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  5594 00004450 81C609000000        <2> 	add esi, 9
  5595 00004456 803E00              <2> 	cmp byte [esi], 0
  5596 00004459 740B                <2> 	je .noip
  5597 0000445B E8B1470000          <2> 	call strtoip
  5598 00004460 890D[FA8C0000]      <2> 	mov [sysip], ecx
  5599                              <2> .noip:
  5600                              <2> %ifdef ne2000.included
  5601 00004466 803D[13890000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5602 0000446D 751E                <2> 	jne .none2000
  5603 0000446F BE[14890000]        <2> 	mov esi, ne2000.name
  5604 00004474 E8E4D8FFFF          <2> 	call print
  5605 00004479 B9[36890000]        <2> 	mov ecx, ne2000.mac
  5606 0000447E E810480000          <2> 	call showmac
  5607 00004483 BE[458D0000]        <2> 	mov esi, line
  5608 00004488 E8D0D8FFFF          <2> 	call print
  5609                              <2> .none2000:
  5610                              <2> %endif
  5611                              <2> %ifdef rtl8139.included
  5612 0000448D 803D[E9850000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5613 00004494 751E                <2> 	jne .nortl8139
  5614 00004496 BE[F0850000]        <2> 	mov esi, rtl8139.name
  5615 0000449B E8BDD8FFFF          <2> 	call print
  5616 000044A0 B9[EA850000]        <2> 	mov ecx, rtl8139.mac
  5617 000044A5 E8E9470000          <2> 	call showmac
  5618 000044AA BE[458D0000]        <2> 	mov esi, line
  5619 000044AF E8A9D8FFFF          <2> 	call print
  5620                              <2> .nortl8139:
  5621                              <2> %endif
  5622                              <2> %ifdef rtl8169.included
  5623                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5624                              <2> 	jne .nortl8169
  5625                              <2> 	mov esi, rtl8169.name
  5626                              <2> 	call print
  5627                              <2> 	mov ecx, rtl8169.mac
  5628                              <2> 	call showmac
  5629                              <2> 	mov esi, line
  5630                              <2> 	call print
  5631                              <2> .nortl8169:
  5632                              <2> %endif
  5633                              <2> %ifdef i8254x.included
  5634 000044B4 803D[2F8B0000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5635 000044BB 751E                <2> 	jne .noi8254x
  5636 000044BD BE[368B0000]        <2> 	mov esi, i8254x.name
  5637 000044C2 E896D8FFFF          <2> 	call print
  5638 000044C7 B9[308B0000]        <2> 	mov ecx, i8254x.mac
  5639 000044CC E8C2470000          <2> 	call showmac
  5640 000044D1 BE[458D0000]        <2> 	mov esi, line
  5641 000044D6 E882D8FFFF          <2> 	call print
  5642                              <2> .noi8254x:
  5643                              <2> %endif
  5644 000044DB 8B0D[FA8C0000]      <2> 	mov ecx, [sysip]
  5645 000044E1 E871470000          <2> 	call showip
  5646 000044E6 BE[458D0000]        <2> 	mov esi, line
  5647 000044EB E86DD8FFFF          <2> 	call print
  5648 000044F0 C3                  <2> 	ret
  5649                              <2> 	
  5650                              <1> %endif
  5651                              <1> %include 'source/programs/keycode.asm'
  5652 000044F1 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5653 000044FA 00                  <2>
  5654                              <2> keycode:
  5655 000044FB C605[7B220000]00    <2> 	mov byte [trans], 0
  5656 00004502 C605[F5660000]00    <2> 	mov byte [threadson], 0
  5657                              <2> %ifdef io.serial
  5658                              <2> .noserial:
  5659                              <2> 	hlt
  5660                              <2> 	mov dx, [serial.address]
  5661                              <2> 	in al, dx
  5662                              <2> 	cmp al, 0
  5663                              <2> 	je .noserial
  5664                              <2> 	mov cl, al
  5665                              <2> 	call showhexsmall
  5666                              <2> 	cmp al, 0x1B
  5667                              <2> 	jne .noserial
  5668                              <2> 	in al, dx
  5669                              <2> 	mov cl, al
  5670                              <2> 	call showhexsmall
  5671                              <2> 	cmp cl, 0x5B
  5672                              <2> 	je .noserial
  5673                              <2> 	ret
  5674                              <2> %else
  5675 00004509 E8FE180000          <2> 	call getkey
  5676 0000450E 31C0                <2> 	xor eax, eax
  5677 00004510 31C9                <2> 	xor ecx, ecx
  5678 00004512 8A0D[EC5D0000]      <2> 	mov cl, [specialkey]
  5679 00004518 80F900              <2> 	cmp cl, 0
  5680 0000451B 0F8405000000        <2> 	je near .nospecialkeycode
  5681 00004521 E80DEBFFFF          <2> 	call showhexsmall
  5682                              <2> .nospecialkeycode:
  5683 00004526 66A1[79220000]      <2> 	mov ax, [lastkey]
  5684 0000452C 88E1                <2> 	mov cl, ah
  5685 0000452E E800EBFFFF          <2> 	call showhexsmall
  5686 00004533 80FC01              <2> 	cmp ah, 1
  5687 00004536 75C3                <2> 	jne keycode
  5688 00004538 C3                  <2> 	ret
  5689                              <2> %endif
  5690                              <1> %ifdef gui.included
  5691                              <1> 	%include 'source/programs/line.asm'
  5692 00004539 FF2C6C696E6500      <2> db 255,44,"line",0
  5693                              <2> linetester:
  5694 00004540 803D[589F0000]00    <2> 	cmp byte [guion], 0
  5695 00004547 0F841B000000        <2> 	je near .done
  5696 0000454D 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5697 00004554 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5698 00004559 E868000000          <2> 	call .circletest
  5699 0000455E BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5700 00004563 E801000000          <2> 	call .linetest
  5701                              <2> .done:
  5702 00004568 C3                  <2> 	ret
  5703                              <2> 
  5704                              <2> .linetest:
  5705 00004569 53                  <2> 	push ebx
  5706 0000456A E8D6000000          <2> 	call .stime
  5707 0000456F 5B                  <2> 	pop ebx
  5708 00004570 31FF                <2> 	xor edi, edi
  5709                              <2> .ltlp:
  5710 00004572 53                  <2> 	push ebx
  5711 00004573 E81C010000          <2> 	call .st
  5712 00004578 66F7D6              <2> 	not si
  5713 0000457B E814010000          <2> 	call .st
  5714 00004580 5B                  <2> 	pop ebx
  5715 00004581 66F7D6              <2> 	not si
  5716 00004584 660335[64020000]    <2> 	add si, [timenanoseconds]
  5717 0000458B 4B                  <2> 	dec ebx
  5718 0000458C 81FB00000000        <2> 	cmp ebx, 0
  5719 00004592 77DE                <2> 	ja .ltlp
  5720 00004594 E8C4000000          <2> 	call .etime
  5721 00004599 53                  <2> 	push ebx	
  5722 0000459A 57                  <2> 	push edi
  5723 0000459B E8EF270000          <2> 	call guiclear
  5724 000045A0 E83A280000          <2> 	call reloadallgraphics
  5725 000045A5 59                  <2> 	pop ecx
  5726 000045A6 E866EBFFFF          <2> 	call showdec
  5727 000045AB BE[D6460000]        <2> 	mov esi, .msg
  5728 000045B0 E8A8D7FFFF          <2> 	call print
  5729 000045B5 59                  <2> 	pop ecx
  5730 000045B6 E856EBFFFF          <2> 	call showdec
  5731 000045BB BE[02470000]        <2> 	mov esi, .msgtime
  5732 000045C0 E898D7FFFF          <2> 	call print
  5733 000045C5 C3                  <2> 	ret
  5734                              <2> 	
  5735                              <2> .circletest:
  5736 000045C6 53                  <2> 	push ebx
  5737 000045C7 E879000000          <2> 	call .stime
  5738 000045CC 5B                  <2> 	pop ebx
  5739 000045CD 31FF                <2> 	xor edi, edi
  5740                              <2> .ctlp:
  5741 000045CF 53                  <2> 	push ebx
  5742 000045D0 668B0D[0D570000]    <2> 	mov cx, [resolutiony]
  5743 000045D7 66D1E9              <2> 	shr cx, 1
  5744 000045DA 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  5745 000045E1 66D1EA              <2> 	shr dx, 1
  5746 000045E4 6689C8              <2> 	mov ax, cx
  5747                              <2> .circle:
  5748 000045E7 60                  <2> 	pusha
  5749 000045E8 E8FF210000          <2> 	call drawcircle
  5750 000045ED 61                  <2> 	popa
  5751 000045EE 6648                <2> 	dec ax
  5752 000045F0 47                  <2> 	inc edi
  5753 000045F1 663D0100            <2> 	cmp ax, 1
  5754 000045F5 77F0                <2> 	ja .circle
  5755 000045F7 66F7D6              <2> 	not si
  5756                              <2> .circle2:
  5757 000045FA 60                  <2> 	pusha
  5758 000045FB E8EC210000          <2> 	call drawcircle
  5759 00004600 61                  <2> 	popa
  5760 00004601 47                  <2> 	inc edi
  5761 00004602 6640                <2> 	inc ax
  5762 00004604 6639C8              <2> 	cmp ax, cx
  5763 00004607 76F1                <2> 	jbe .circle2
  5764 00004609 5B                  <2> 	pop ebx
  5765 0000460A 66F7D6              <2> 	not si
  5766 0000460D 660335[64020000]    <2> 	add si, [timenanoseconds]
  5767 00004614 4B                  <2> 	dec ebx
  5768 00004615 81FB00000000        <2> 	cmp ebx, 0
  5769 0000461B 77B2                <2> 	ja .ctlp
  5770 0000461D E83B000000          <2> 	call .etime
  5771 00004622 53                  <2> 	push ebx
  5772 00004623 57                  <2> 	push edi
  5773 00004624 59                  <2> 	pop ecx
  5774 00004625 E8E7EAFFFF          <2> 	call showdec
  5775 0000462A BE[EB460000]        <2> 	mov esi, .msgcircle
  5776 0000462F E829D7FFFF          <2> 	call print
  5777 00004634 59                  <2> 	pop ecx
  5778 00004635 E8D7EAFFFF          <2> 	call showdec
  5779 0000463A BE[02470000]        <2> 	mov esi, .msgtime
  5780 0000463F E819D7FFFF          <2> 	call print
  5781 00004644 C3                  <2> 	ret
  5782                              <2> 	
  5783                              <2> .stime:
  5784 00004645 F4                  <2> 	hlt
  5785 00004646 A1[60020000]        <2> 	mov eax, [timeseconds]
  5786 0000464B 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5787 00004651 A3[11470000]        <2> 	mov [.time], eax
  5788 00004656 891D[15470000]      <2> 	mov [.time + 4], ebx
  5789 0000465C C3                  <2> 	ret
  5790                              <2> 	
  5791                              <2> .etime:
  5792 0000465D A1[60020000]        <2> 	mov eax, [timeseconds]
  5793 00004662 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5794 00004668 8B0D[11470000]      <2> 	mov ecx, [.time]
  5795 0000466E 8B15[15470000]      <2> 	mov edx, [.time + 4]
  5796 00004674 C1EA0A              <2> 	shr edx, 10
  5797 00004677 C1EB0A              <2> 	shr ebx, 10
  5798 0000467A 29C8                <2> 	sub eax, ecx
  5799 0000467C 3D00000000          <2> 	cmp eax, 0
  5800 00004681 740E                <2> 	je .notclp
  5801                              <2> .tclp:
  5802 00004683 81C340420F00        <2> 	add ebx, 1000000
  5803 00004689 48                  <2> 	dec eax
  5804 0000468A 3D00000000          <2> 	cmp eax, 0
  5805 0000468F 75F2                <2> 	jne .tclp
  5806                              <2> .notclp:
  5807 00004691 29D3                <2> 	sub ebx, edx
  5808 00004693 C3                  <2> 	ret
  5809                              <2> 	
  5810                              <2> .st:
  5811 00004694 6631C0              <2> 	xor ax, ax
  5812 00004697 6631DB              <2> 	xor bx, bx
  5813 0000469A 668B0D[0D570000]    <2> 	mov cx, [resolutiony]
  5814 000046A1 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  5815                              <2> .lp:
  5816 000046A8 60                  <2> 	pusha
  5817 000046A9 E8B5250000          <2> 	call drawline
  5818 000046AE 61                  <2> 	popa
  5819                              <2> .noswitch:
  5820 000046AF 47                  <2> 	inc edi
  5821 000046B0 6643                <2> 	inc bx
  5822 000046B2 664A                <2> 	dec dx
  5823 000046B4 6681FB0000          <2> 	cmp bx, 0
  5824 000046B9 74ED                <2> 	je .lp
  5825 000046BB 6681FA0000          <2> 	cmp dx, 0
  5826 000046C0 75E6                <2> 	jne .lp
  5827                              <2> .lp2:
  5828 000046C2 60                  <2> 	pusha
  5829 000046C3 E89B250000          <2> 	call drawline
  5830 000046C8 61                  <2> 	popa
  5831 000046C9 47                  <2> 	inc edi
  5832 000046CA 6640                <2> 	inc ax
  5833 000046CC 6649                <2> 	dec cx
  5834 000046CE 6681F90000          <2> 	cmp cx, 0
  5835 000046D3 75ED                <2> 	jne .lp2
  5836 000046D5 C3                  <2> 	ret
  5837                              <2> 	
  5838 000046D6 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5839 000046DF 6520647261776E2069- <2>
  5840 000046E8 6E2000              <2>
  5841 000046EB 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5842 000046F4 65726520647261776E- <2>
  5843 000046FD 20696E2000          <2>
  5844 00004702 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5845 0000470B 6E64732E0A00        <2>
  5846 00004711 0000000000000000    <2> .time dd 0,0	
  5847                              <1> %endif
  5848                              <1> %include 'source/programs/logout.asm'
  5849 00004719 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5850 00004722 E983E2FFFF          <2> 	jmp os
  5851                              <1> %include 'source/programs/loop.asm'
  5852 00004727 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5853 0000472E 803D[1DB80000]00    <2> 	cmp byte [LOOPON], 0
  5854 00004735 0F8501000000        <2> 	jne near filoop
  5855 0000473B C3                  <2> 	ret
  5856 0000473C 8B35[1EB80000]      <2> filoop: mov esi, [LOOPPOS]
  5857 00004742 FE0D[B3B70000]      <2> 	dec byte [IFON]
  5858 00004748 C605[1DB80000]00    <2> 	mov byte [LOOPON], 0
  5859 0000474F 8935[18B80000]      <2> 	mov [BATCHPOS], esi
  5860 00004755 8935[46380000]      <2> 	mov [batchedi], esi
  5861 0000475B C3                  <2> 	ret 
  5862                              <1> %ifdef disk.none
  5863                              <1> %else
  5864                              <1> 	%include 'source/programs/ls.asm'
  5865 0000475C FF2C6C7300          <2> db 255,44,"ls",0
  5866 00004761 BE[6A9D0000]        <2> 		mov esi, diskfileindex
  5867                              <2> 	diskindexdir:
  5868 00004766 803E5F              <2> 		cmp byte [esi], '_'
  5869 00004769 7440                <2> 		je nextdiskindexdir
  5870 0000476B E8DBD5FFFF          <2> 		call printquiet
  5871 00004770 56                  <2> 		push esi
  5872 00004771 BE[CB470000]        <2> 		mov esi, disktab
  5873 00004776 E8D0D5FFFF          <2> 		call printquiet
  5874 0000477B 5E                  <2> 		pop esi
  5875 0000477C 8B4E05              <2> 		mov ecx, [esi + 5]
  5876 0000477F C605[32300000]05    <2> 		mov byte [firsthexshown], 5
  5877 00004786 E886E9FFFF          <2> 		call showdec
  5878 0000478B 56                  <2> 		push esi
  5879 0000478C BE[458D0000]        <2> 		mov esi, line
  5880 00004791 E8B5D5FFFF          <2> 		call printquiet
  5881 00004796 5E                  <2> 		pop esi
  5882 00004797 81C609000000        <2> 		add esi, 9
  5883 0000479D 81FE[569F0000]      <2> 		cmp esi, enddiskfileindex
  5884 000047A3 72C1                <2> 		jb diskindexdir
  5885 000047A5 E8A8DFFFFF          <2> 		call termcopy
  5886 000047AA C3                  <2> 		ret
  5887                              <2> 	nextdiskindexdir:
  5888 000047AB 46                  <2> 		inc esi
  5889 000047AC 803E00              <2> 		cmp byte [esi], 0
  5890 000047AF 75FA                <2> 		jne nextdiskindexdir
  5891 000047B1 81C609000000        <2> 		add esi, 9
  5892 000047B7 81FE[569F0000]      <2> 		cmp esi, enddiskfileindex
  5893 000047BD 72A7                <2> 		jb diskindexdir
  5894 000047BF E88EDFFFFF          <2> 		call termcopy
  5895 000047C4 C3                  <2> 		ret
  5896                              <2> 		
  5897 000047C5 4469736B2000        <2> 		diskmsg db "Disk ",0
  5898 000047CB 0D09090900          <2> 		disktab db 13,9,9,9,0
  5899                              <1> %endif
  5900                              <1> %include 'source/programs/memory.asm'
  5901 000047D0 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5902 000047D9 BE[5E9F0000]        <2> 	mov esi, memlistbuf
  5903 000047DE 31FF                <2> 	xor edi, edi
  5904 000047E0 668B3D[9EA10000]    <2> 	mov di, [memlistend]
  5905 000047E7 01F7                <2> 	add edi, esi
  5906                              <2> printmemmap:
  5907 000047E9 8B0E                <2> 	mov ecx, [esi]
  5908 000047EB E857E8FFFF          <2> 	call showhex
  5909 000047F0 81C608000000        <2> 	add esi, 8
  5910 000047F6 8B0E                <2> 	mov ecx, [esi]
  5911 000047F8 E84AE8FFFF          <2> 	call showhex
  5912 000047FD 81C608000000        <2> 	add esi, 8
  5913 00004803 8B0E                <2> 	mov ecx, [esi]
  5914 00004805 E83DE8FFFF          <2> 	call showhex
  5915 0000480A 81C608000000        <2> 	add esi, 8
  5916 00004810 57                  <2> 	push edi
  5917 00004811 56                  <2> 	push esi
  5918 00004812 BE[458D0000]        <2> 	mov esi, line
  5919 00004817 E841D5FFFF          <2> 	call print
  5920 0000481C 5E                  <2> 	pop esi
  5921 0000481D 5F                  <2> 	pop edi
  5922 0000481E 39FE                <2> 	cmp esi, edi
  5923 00004820 72C7                <2> 	jb printmemmap
  5924 00004822 C3                  <2> 	ret
  5925                              <2> 	
  5926                              <1> %include 'source/programs/pci.asm'
  5927 00004823 FF2C70636900        <2> db 255,44,"pci",0
  5928 00004829 E8F9190000          <2> 	call pcidump
  5929 0000482E C3                  <2> 	ret 
  5930                              <1> %ifdef network.included
  5931                              <1> 	%include 'source/programs/ping.asm'
  5932 0000482F FF2C70696E6700      <2> db 255,44,"ping",0
  5933                              <2> ping:
  5934 00004836 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  5935 0000483C 81C605000000        <2> 	add esi, 5
  5936 00004842 E8CA430000          <2> 	call strtoip
  5937 00004847 890D[D2480000]      <2> 	mov [.destip], ecx
  5938 0000484D E805440000          <2> 	call showip
  5939 00004852 8B0D[FA8C0000]      <2> 	mov ecx, [sysip]
  5940 00004858 890D[CE480000]      <2> 	mov [.sourceip]. ecx
  5941 0000485E 31C0                <2> 	xor eax, eax
  5942 00004860 31DB                <2> 	xor ebx, ebx
  5943 00004862 66A3[CC480000]      <2> 	mov [.checksum], ax
  5944 00004868 66A3[D8480000]      <2> 	mov [.icmpchecksum], ax
  5945 0000486E BF[C2480000]        <2> 	mov edi, .header
  5946 00004873 BE[D6480000]        <2> 	mov esi, .headerend
  5947 00004878 E86C430000          <2> 	call getchecksum
  5948 0000487D 66890D[CC480000]    <2> 	mov [.checksum], cx
  5949 00004884 BF[D6480000]        <2> 	mov edi, .icmp
  5950 00004889 BE[FE480000]        <2> 	mov esi, .packetend
  5951 0000488E E856430000          <2> 	call getchecksum
  5952 00004893 66890D[D8480000]    <2> 	mov [.icmpchecksum], cx
  5953 0000489A BF[B4480000]        <2> 	mov edi, .packet
  5954 0000489F BE[FE480000]        <2> 	mov esi, .packetend
  5955 000048A4 E828430000          <2> 	call sendpacket
  5956 000048A9 BE[458D0000]        <2> 	mov esi, line
  5957 000048AE E8AAD4FFFF          <2> 	call print
  5958 000048B3 C3                  <2> 	ret
  5959                              <2> 	
  5960                              <2> 	
  5961                              <2> 	
  5962                              <2> .packet:
  5963 000048B4 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5964 000048BA 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5965 000048C0 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5966                              <2> .header:
  5967 000048C2 45                  <2> .version	db 0x45
  5968 000048C3 00                  <2> .services	db 0
  5969 000048C4 003C                <2> .length	db 0,0x3C
  5970 000048C6 0000                <2> .id		dw 0
  5971 000048C8 00                  <2> .flags	db 0
  5972 000048C9 00                  <2> .fragment db 0
  5973 000048CA 80                  <2> .ttl	db 128
  5974 000048CB 01                  <2> .protocol db 1 ;ICMP
  5975 000048CC 0000                <2> .checksum dw 0
  5976 000048CE 00000000            <2> .sourceip dd 0
  5977 000048D2 00000000            <2> .destip dd 0
  5978                              <2> .headerend:
  5979                              <2> .icmp:
  5980 000048D6 08                  <2> .icmptype db 8 ;Ping request
  5981 000048D7 00                  <2> .icmpcode db 0
  5982 000048D8 0000                <2> .icmpchecksum dw 0
  5983 000048DA 0001                <2> .icmpid db 0,1
  5984 000048DC 0000                <2> .sequence dw 0
  5985 000048DE 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5986 000048E7 6A6B6C6D6E6F707172- <2>
  5987 000048F0 737475767761626364- <2>
  5988 000048F9 6566676869          <2>
  5989                              <2> .packetend:
  5990                              <1> %endif
  5991                              <1> %ifdef disk.none
  5992                              <1> %else
  5993                              <1> 	%include 'source/programs/play.asm'
  5994 000048FE FF2C706C61796100    <2> db 255,44,"playa",0
  5995 00004906 8B3D[202E0000]      <2> 	mov edi, [currentcommandloc]
  5996 0000490C 81C706000000        <2> 	add edi, 6
  5997 00004912 E833000000          <2> 	call playasync
  5998 00004917 C3                  <2> 	ret
  5999 00004918 FF2C706C617900      <2> db 255,44,"play",0
  6000                              <2> play:
  6001 0000491F 8B3D[202E0000]      <2> 	mov edi, [currentcommandloc]
  6002 00004925 81C705000000        <2> 	add edi, 5
  6003 0000492B E81A000000          <2> 	call playasync
  6004                              <2> .waitforsound:
  6005                              <2> %ifdef sound.included
  6006 00004930 A1[D55D0000]        <2> 	mov eax, [Length0]
  6007 00004935 660B05[D95D0000]    <2> 	or ax, [Length1]
  6008                              <2> %endif
  6009 0000493C 0A05[68020000]      <2> 	or al, [soundon]
  6010 00004942 3D00000000          <2> 	cmp eax, 0
  6011 00004947 75E7                <2> 	jne .waitforsound
  6012 00004949 C3                  <2> 	ret
  6013                              <2> playasync:
  6014 0000494A BE0000C000          <2> 	mov esi, 0xC00000
  6015 0000494F E8021C0000          <2> 	call loadfile
  6016 00004954 81FA94010000        <2> 	cmp edx, 404
  6017 0000495A 743F                <2> 	je nosoundfound
  6018 0000495C BB0000C000          <2> 	mov ebx, 0xC00000
  6019 00004961 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6020 00004968 0F843F010000        <2> 	je near wave_player
  6021 0000496E 66813B534E          <2> 	cmp word [ebx], "SN"
  6022 00004973 7526                <2> 	jne nosoundfound
  6023 00004975 81C306000000        <2> 	add ebx, 6
  6024 0000497B 891D[6B020000]      <2> 	mov [soundpos], ebx
  6025 00004981 035BFC              <2> 	add ebx, [ebx - 4]
  6026 00004984 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6027 0000498A 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6028 00004992 00                  <2>
  6029 00004993 C605[68020000]01    <2> 	mov byte [soundon], 1
  6030 0000499A C3                  <2> 	ret
  6031                              <2> nosoundfound:
  6032 0000499B BE[C1490000]        <2> 	mov esi, notfoundsound
  6033 000049A0 E8B8D3FFFF          <2> 	call print
  6034 000049A5 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  6035 000049AB 81C605000000        <2> 	add esi, 5
  6036 000049B1 E8A7D3FFFF          <2> 	call print
  6037 000049B6 BE[148D0000]        <2> 	mov esi, notfound2
  6038 000049BB E89DD3FFFF          <2> 	call print
  6039 000049C0 C3                  <2> 	ret
  6040 000049C1 706C61793A2000      <2> notfoundsound db "play: ",0
  6041                              <2> 
  6042                              <2> %ifdef sound.included
  6043                              <2> sbplay:
  6044 000049C8 BE0000C000          <2> 		mov esi, 0xC00000
  6045 000049CD 89F3                <2> 		mov ebx, esi
  6046 000049CF 81C640000000        <2> 		add esi, WAVSTART
  6047 000049D5 29F7                <2> 		sub edi, esi
  6048 000049D7 66893D[D95D0000]    <2> 		mov [Length1], di
  6049 000049DE C1EF0F              <2> 		shr edi, 15
  6050 000049E1 893D[D55D0000]      <2> 		mov [Length0], edi
  6051 000049E7 8B4B18              <2> 		mov ecx, [ebx + 24]
  6052 000049EA 890D[E65D0000]      <2> 		mov [Freq], ecx
  6053 000049F0 31C0                <2> 		xor eax, eax
  6054 000049F2 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6055 000049F7 81C240000000        <2> 		add edx, WAVSTART
  6056 000049FD 01D0                <2> 		add	eax, edx
  6057 000049FF 89C6                <2> 		mov esi, eax
  6058 00004A01 31C9                <2> 		xor ecx, ecx
  6059 00004A03 31DB                <2> 		xor ebx, ebx
  6060 00004A05 66891D[E35D0000]    <2> 		mov [SegLoc], bx
  6061 00004A0C 81C300000800        <2> 		add ebx, 0x80000
  6062 00004A12 66B9FFFF            <2> 		mov cx, 0xFFFF
  6063 00004A16 6681FF0000          <2> 		cmp di, 0
  6064 00004A1B 7520                <2> 		jne .autoinit
  6065 00004A1D 668B0D[D95D0000]    <2> 		mov cx, [Length1]
  6066 00004A24 C605[D45D0000]01    <2> 		mov byte [OddLength], 1
  6067 00004A2B 6681F90080          <2> 		cmp cx, 32768
  6068 00004A30 730B                <2> 		jae .autoinit
  6069 00004A32 C605[D45D0000]00    <2> 		mov byte [OddLength], 0
  6070 00004A39 66D1E1              <2> 		shl cx, 1
  6071 00004A3C 47                  <2> 		inc edi
  6072                              <2> .autoinit:
  6073 00004A3D 4F                  <2> 		dec edi
  6074 00004A3E 893D[D55D0000]      <2> 		mov [Length0], edi
  6075 00004A44 66890D[D95D0000]    <2> 		mov [Length1], cx
  6076 00004A4B 66D1E9              <2> 		shr cx, 1
  6077 00004A4E 6641                <2> 		inc cx
  6078 00004A50 01C8                <2> 		add eax, ecx
  6079 00004A52 A3[DB5D0000]        <2> 		mov [NextMemLoc], eax
  6080 00004A57 8935[DF5D0000]      <2> 		mov	[MemLoc], esi
  6081 00004A5D E82A120000          <2> 		call DMACopy
  6082 00004A62 31DB                <2> 		xor ebx, ebx
  6083 00004A64 668B1D[E35D0000]    <2> 		mov bx, [SegLoc]
  6084 00004A6B 31C9                <2> 		xor ecx, ecx
  6085 00004A6D 668B0D[D95D0000]    <2> 		mov cx, [Length1]
  6086 00004A74 66D1E9              <2> 		shr cx, 1
  6087 00004A77 6641                <2> 		inc cx
  6088 00004A79 01CB                <2> 		add ebx, ecx
  6089 00004A7B 66891D[E35D0000]    <2> 		mov [SegLoc], bx
  6090 00004A82 81C300000800        <2> 		add ebx, 0x80000
  6091 00004A88 8B35[DB5D0000]      <2> 		mov esi, [NextMemLoc]
  6092 00004A8E 89F0                <2> 		mov eax, esi
  6093 00004A90 01C8                <2> 		add eax, ecx
  6094 00004A92 A3[DB5D0000]        <2> 		mov [NextMemLoc], eax
  6095 00004A97 8935[DF5D0000]      <2> 		mov	[MemLoc], esi
  6096 00004A9D E8EA110000          <2> 		call DMACopy
  6097 00004AA2 E808120000          <2> 		call DMAPlay
  6098 00004AA7 E892120000          <2> 		call PlayDSP
  6099 00004AAC C3                  <2> 		ret
  6100                              <2> WAVSTART equ 64;44
  6101                              <2> wave_player:
  6102 00004AAD 803D[EB5D0000]01    <2> 	cmp byte [SoundBlaster], 1
  6103 00004AB4 0F840EFFFFFF        <2> 	je near sbplay
  6104 00004ABA BE[C54A0000]        <2> 	mov esi, nosoundblaster
  6105 00004ABF E899D2FFFF          <2> 	call print
  6106 00004AC4 C3                  <2> 	ret
  6107                              <2> %else
  6108                              <2> 	wave_player:
  6109                              <2> 		mov esi, nosoundblaster
  6110                              <2> 		call print
  6111                              <2> 		ret
  6112                              <2> %endif
  6113 00004AC5 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6114 00004ACE 426C61737465722064- <2>
  6115 00004AD7 657465637465642E0A- <2>
  6116 00004AE0 00                  <2>
  6117                              <1> %endif
  6118                              <1> %include 'source/programs/pwd.asm'
  6119 00004AE1 FF2C70776400        <2> db 255,44,"pwd",0
  6120 00004AE7 BE[AEB50000]        <2> 	mov esi, currentfolder
  6121 00004AEC E85AD2FFFF          <2> 	call printquiet
  6122 00004AF1 BE[458D0000]        <2> 	mov esi, line
  6123 00004AF6 E862D2FFFF          <2> 	call print
  6124 00004AFB C3                  <2> 	ret
  6125                              <2> 	
  6126                              <1> %include 'source/programs/reboot.asm'
  6127 00004AFC FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6128 00004B05 0F011D[0F4B0000]    <2> 		lidt [idtreboot]
  6129 00004B0C CD00                <2> 		int 0
  6130 00004B0E F4                  <2> 		hlt
  6131                              <2> 	
  6132 00004B0F 0000                <2> 	idtreboot dw 0
  6133 00004B11 00000000            <2> 			  dd 0
  6134                              <2> 
  6135                              <2> 	coldboot:
  6136 00004B15 66B84000            <2> 		MOV AX, 0040h
  6137 00004B19 8EC0                <2> 		MOV ES, AX
  6138 00004B1B 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6139 00004B24 00                  <2>
  6140 00004B25 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6141 00004B2C CF                  <2> 		IRET
  6142                              <2> 
  6143                              <2> 	warmboot:
  6144 00004B2D 66B84000            <2> 		MOV AX, 0040h
  6145 00004B31 8EC0                <2> 		MOV ES, AX
  6146 00004B33 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6147 00004B3C 12                  <2>
  6148 00004B3D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6149 00004B44 CF                  <2> 		IRET
  6150                              <2> 		
  6151                              <1> %include 'source/programs/reg.asm'
  6152 00004B45 FF2C72656700        <2> db 255,44,"reg",0
  6153 00004B4B CD03                <2> 	int 3
  6154 00004B4D C3                  <2> 	ret 
  6155                              <1> %ifdef disk.none
  6156                              <1> %else
  6157                              <1> 	%include 'source/programs/show.asm'
  6158 00004B4E FF2C73686F7700      <2> db 255,44,"show",0
  6159 00004B55 8B3D[202E0000]      <2> 		mov edi, [currentcommandloc]
  6160 00004B5B 81C705000000        <2> 		add edi, 5
  6161 00004B61 BE00008000          <2> 		mov esi, 0x800000
  6162 00004B66 E8EB190000          <2> 		call loadfile
  6163 00004B6B 81FA94010000        <2> 		cmp edx, 404
  6164 00004B71 0F8483000000        <2> 		je near filenotfound
  6165 00004B77 BE00008000          <2> 		mov esi, 0x800000
  6166                              <2> %ifdef gui.included
  6167 00004B7C 66813E424D          <2> 		cmp word [esi], "BM"
  6168 00004B81 7410                <2> 		je bmpfound
  6169                              <2> %endif
  6170 00004B83 E8D5D1FFFF          <2> 		call print
  6171 00004B88 BE[458D0000]        <2> 		mov esi, line
  6172 00004B8D E8CBD1FFFF          <2> 		call print
  6173 00004B92 C3                  <2> 		ret
  6174                              <2> %ifdef gui.included
  6175                              <2> bmpfound:
  6176 00004B93 803D[589F0000]00    <2> 		cmp byte [guion], 0
  6177 00004B9A 0F8428000000        <2> 		je near noguibmp
  6178 00004BA0 BE00008000          <2> 		mov esi, 0x800000
  6179 00004BA5 31C9                <2> 		xor ecx, ecx
  6180 00004BA7 31D2                <2> 		xor edx, edx
  6181 00004BA9 31C0                <2> 		xor eax, eax
  6182 00004BAB 31DB                <2> 		xor ebx, ebx
  6183 00004BAD E8681B0000          <2> 		call showbmp
  6184 00004BB2 30C0                <2> 		xor al, al
  6185 00004BB4 B405                <2> 		mov ah, 5
  6186 00004BB6 CD30                <2> 		int 30h
  6187 00004BB8 E8D2210000          <2> 		call guiclear
  6188 00004BBD E8B11E0000          <2> 		call clearmousecursor
  6189 00004BC2 E818220000          <2> 		call reloadallgraphics
  6190 00004BC7 C3                  <2> 		ret
  6191                              <2> noguibmp:
  6192 00004BC8 BE[D34B0000]        <2> 		mov esi, warnguimsg
  6193 00004BCD E88BD1FFFF          <2> 		call print
  6194 00004BD2 C3                  <2> 		ret
  6195 00004BD3 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6196 00004BDC 6E6F7420626520646F- <2>
  6197 00004BE5 6E6520776974686F75- <2>
  6198 00004BEE 742074686520475549- <2>
  6199 00004BF7 2E0A00              <2>
  6200                              <2> %endif
  6201                              <2> 
  6202                              <2> filenotfound:
  6203 00004BFA BE[2D4C0000]        <2> 		mov esi, filenf
  6204 00004BFF E859D1FFFF          <2> 		call print
  6205 00004C04 8B35[202E0000]      <2> 		mov esi, [currentcommandloc]
  6206                              <2> findfilenotfoundzero:
  6207 00004C0A 8A06                <2> 		mov al, [esi]
  6208 00004C0C 46                  <2> 		inc esi
  6209 00004C0D 3C00                <2> 		cmp al, 0
  6210 00004C0F 7411                <2> 		je nofilenamenotfound
  6211 00004C11 81FE[22D00000]      <2> 		cmp esi, buftxtend
  6212 00004C17 7309                <2> 		jae nofilenamenotfound
  6213 00004C19 3C20                <2> 		cmp al, " "
  6214 00004C1B 75ED                <2> 		jne findfilenotfoundzero
  6215 00004C1D E83BD1FFFF          <2> 		call print
  6216                              <2> nofilenamenotfound:
  6217 00004C22 BE[384C0000]        <2> 		mov esi, filenf2
  6218 00004C27 E831D1FFFF          <2> 		call print
  6219 00004C2C C3                  <2> 		ret
  6220 00004C2D 5468652066696C6520- <2> filenf db "The file ",34,0
  6221 00004C36 2200                <2>
  6222 00004C38 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6223 00004C41 6F7420626520666F75- <2>
  6224 00004C4A 6E642E0A00          <2>
  6225                              <1> %endif
  6226                              <1> %include 'source/programs/shush.asm'
  6227 00004C4F FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6228                              <2> shushprog:
  6229                              <2> %ifdef gui.included
  6230 00004C57 803D[589F0000]00    <2> 	cmp byte [guion], 0
  6231 00004C5E 0F84B9000000        <2> 	je near .noswitchsize
  6232 00004C64 8B35[202E0000]      <2> 	mov esi, [currentcommandloc]
  6233 00004C6A 81C606000000        <2> 	add esi, 6
  6234 00004C70 56                  <2> 	push esi
  6235 00004C71 4E                  <2> 	dec esi
  6236                              <2> .findspace:
  6237 00004C72 46                  <2> 	inc esi
  6238 00004C73 8A06                <2> 	mov al, [esi]
  6239 00004C75 3C00                <2> 	cmp al, 0
  6240 00004C77 0F84A0000000        <2> 	je near .noswitchsize
  6241 00004C7D 3C58                <2> 	cmp al, "X"
  6242 00004C7F 7408                <2> 	je .donefind
  6243 00004C81 3C78                <2> 	cmp al, "x"
  6244 00004C83 7404                <2> 	je .donefind
  6245 00004C85 3C20                <2> 	cmp al, " "
  6246 00004C87 75E9                <2> 	jne .findspace
  6247                              <2> .donefind:
  6248 00004C89 30C0                <2> 	xor al, al
  6249 00004C8B 8806                <2> 	mov [esi], al
  6250 00004C8D 46                  <2> 	inc esi
  6251 00004C8E 89F7                <2> 	mov edi, esi
  6252 00004C90 E85EE5FFFF          <2> 	call cnvrttxt
  6253 00004C95 89C8                <2> 	mov eax, ecx
  6254 00004C97 5E                  <2> 	pop esi
  6255 00004C98 50                  <2> 	push eax
  6256 00004C99 89F7                <2> 	mov edi, esi
  6257 00004C9B E853E5FFFF          <2> 	call cnvrttxt
  6258 00004CA0 89CB                <2> 	mov ebx, ecx
  6259 00004CA2 58                  <2> 	pop eax	
  6260 00004CA3 6681FB0000          <2> 	cmp bx, 0
  6261 00004CA8 0F846F000000        <2> 	je near .noswitchsize
  6262 00004CAE 663D0000            <2> 	cmp ax, 0
  6263 00004CB2 0F8465000000        <2> 	je near .noswitchsize
  6264 00004CB8 66C1E303            <2> 	shl bx, 3
  6265 00004CBC 66C1E004            <2> 	shl ax, 4
  6266 00004CC0 663B1D[0B570000]    <2> 	cmp bx, [resolutionx]
  6267 00004CC7 7607                <2> 	jbe .nofixx
  6268 00004CC9 668B1D[0B570000]    <2> 	mov bx, [resolutionx]
  6269                              <2> .nofixx:
  6270 00004CD0 66051000            <2> 	add ax, 16
  6271 00004CD4 663B05[0D570000]    <2> 	cmp ax, [resolutiony]
  6272 00004CDB 7606                <2> 	jbe .nofixy
  6273 00004CDD 66A1[0D570000]      <2> 	mov ax, [resolutiony]
  6274                              <2> .nofixy:
  6275 00004CE3 662D1000            <2> 	sub ax, 16
  6276 00004CE7 6631C9              <2> 	xor cx, cx
  6277 00004CEA 6631D2              <2> 	xor dx, dx
  6278 00004CED 66891D[7D710000]    <2> 	mov [termwindow], bx
  6279 00004CF4 66A3[7F710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6280 00004CFA BE[7D710000]        <2> 	mov esi, termwindow
  6281 00004CFF 31DB                <2> 	xor ebx, ebx
  6282 00004D01 6631C0              <2> 	xor ax, ax
  6283 00004D04 E87D290000          <2> 	call showwindow
  6284 00004D09 E881200000          <2> 	call guiclear
  6285 00004D0E E8B0D0FFFF          <2> 	call clear
  6286 00004D13 E8C7200000          <2> 	call reloadallgraphics
  6287 00004D18 E80E1E0000          <2> 	call switchmousepos2
  6288                              <2> .noswitchsize:
  6289                              <2> %endif
  6290 00004D1D BE[284D0000]        <2> 	mov esi, shushmsg
  6291 00004D22 E836D0FFFF          <2> 	call print
  6292 00004D27 C3                  <2> 	ret
  6293 00004D28 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6294 00004D31 6F2074686520536F6C- <2>
  6295 00004D3A 6C65724F5320486172- <2>
  6296 00004D43 646C7920556E69782D- <2>
  6297 00004D4C 436F6D70617469626C- <2>
  6298 00004D55 65205368656C6C210A- <2>
  6299 00004D5E 00                  <2>
  6300                              <1> %include 'source/programs/system.asm'
  6301 00004D5F FF2C73797374656D00  <2> 	db 255,44,"system",0
  6302 00004D68 BE[784E0000]        <2> 	mov esi, kernelinfomsg
  6303 00004D6D E8D9CFFFFF          <2> 	call printquiet
  6304 00004D72 B9[6A9D0000]        <2> 	mov ecx, osend
  6305 00004D77 E895E3FFFF          <2> 	call showdec
  6306 00004D7C BE[8D4E0000]        <2> 	mov esi, diskbytemsg
  6307 00004D81 E8C5CFFFFF          <2> 	call printquiet
  6308 00004D86 B9[6A9D0000]        <2> 	mov ecx, osend
  6309 00004D8B 81C1[90B80100]      <2> 	add ecx, commandbufend
  6310 00004D91 81E9[589F0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6311 00004D97 E875E3FFFF          <2> 	call showdec
  6312 00004D9C BE[A44E0000]        <2> 	mov esi, membytemsg
  6313 00004DA1 E8A5CFFFFF          <2> 	call printquiet
  6314 00004DA6 BE[074F0000]        <2> 	mov esi, endofmemmsg
  6315 00004DAB E89BCFFFFF          <2> 	call printquiet
  6316 00004DB0 B9[A4EC1100]        <2> 	mov ecx, bssend
  6317 00004DB5 E88DE2FFFF          <2> 	call showhex
  6318 00004DBA BE[BD4E0000]        <2> 	mov esi, systeminfomsg
  6319 00004DBF E887CFFFFF          <2> 	call printquiet
  6320                              <2> getcpuspeed:
  6321 00004DC4 B8FE000000          <2> 	mov eax, 0xFE
  6322 00004DC9 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6323 00004DCB B020                <2> 	mov al, 0x20
  6324 00004DCD E620                <2> 	out 0x20, al
  6325 00004DCF F4                  <2> 	hlt
  6326 00004DD0 0F31                <2> 	rdtsc
  6327 00004DD2 89D6                <2> 	mov esi, edx
  6328 00004DD4 89C7                <2> 	mov edi, eax
  6329 00004DD6 31C0                <2> 	xor eax, eax
  6330 00004DD8 C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6331                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6332 00004DDF 40                  <2> 	inc eax
  6333 00004DE0 EBFD                <2> 	jmp cpuspeedloop
  6334                              <2> cpuspeedloopend:
  6335 00004DE2 0F31                <2> 	rdtsc
  6336 00004DE4 29F8                <2> 	sub eax, edi
  6337 00004DE6 29F2                <2> 	sub edx, esi
  6338 00004DE8 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6339 00004DEE A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6340 00004DF3 31C0                <2> 	xor eax, eax
  6341 00004DF5 E621                <2> 	out 0x21, al
  6342 00004DF7 B020                <2> 	mov al, 0x20
  6343 00004DF9 E620                <2> 	out 0x20, al
  6344 00004DFB 31D2                <2> 	xor edx, edx
  6345 00004DFD 31C0                <2> 	xor eax, eax
  6346 00004DFF A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6347 00004E04 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6348                              <2> 				;result by 2
  6349 00004E06 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6350 00004E0C C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6351 00004E0F F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6352 00004E11 89C1                <2> 	mov ecx, eax
  6353 00004E13 E8F9E2FFFF          <2> 	call showdec
  6354 00004E18 BE[EB4E0000]        <2> 	mov esi, cpuspeedmsg
  6355 00004E1D E829CFFFFF          <2> 	call printquiet
  6356 00004E22 31D2                <2> 	xor edx, edx
  6357 00004E24 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6358 00004E29 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6359 00004E2F 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6360 00004E35 C1EB0A              <2> 	shr ebx, 10
  6361 00004E38 F7F3                <2> 	div ebx
  6362 00004E3A 89C1                <2> 	mov ecx, eax
  6363 00004E3C E8D0E2FFFF          <2> 	call showdec
  6364 00004E41 BE[F14E0000]        <2> 	mov esi, cpuclockmsg
  6365 00004E46 E800CFFFFF          <2> 	call printquiet
  6366 00004E4B 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6367 00004E51 C1E914              <2> 	shr ecx, 20
  6368 00004E54 41                  <2> 	inc ecx	;the reading is one MB behind
  6369 00004E55 E8B7E2FFFF          <2> 	call showdec
  6370 00004E5A BE[F64E0000]        <2> 	mov esi, memoryspacemsg
  6371 00004E5F E8F9CEFFFF          <2> 	call print
  6372                              <2> %ifdef sound.included
  6373 00004E64 803D[EB5D0000]00    <2> 	cmp byte [SoundBlaster], 0
  6374 00004E6B 740A                <2> 	je .nosb
  6375 00004E6D BE[D34E0000]        <2> 	mov esi, soundblastermsg
  6376 00004E72 E8E6CEFFFF          <2> 	call print
  6377                              <2> .nosb:
  6378                              <2> %endif
  6379 00004E77 C3                  <2> 	ret
  6380                              <2> 
  6381 00004E78 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6382 00004E81 666F726D6174696F6E- <2>
  6383 00004E8A 3A0A00              <2>
  6384 00004E8D 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6385 00004E96 6B2053706163652055- <2>
  6386 00004E9F 7365640A00          <2>
  6387 00004EA4 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6388 00004EAD 6F7279205370616365- <2>
  6389 00004EB6 20557365640A00      <2>
  6390 00004EBD 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6391 00004EC6 6E666F726D6174696F- <2>
  6392 00004ECF 6E3A0A00            <2>
  6393                              <2> %ifdef sound.included
  6394 00004ED3 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6395 00004EDC 746572204465746563- <2>
  6396 00004EE5 7465642E0A00        <2>
  6397                              <2> %endif
  6398 00004EEB 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6399 00004EF1 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6400 00004EF6 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6401 00004EFF 2053706163650A00    <2>
  6402 00004F07 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6403 00004F10 6D6F72792053706163- <2>
  6404 00004F19 653A20307800        <2>
  6405                              <1> %include 'source/programs/time.asm'
  6406 00004F1F 082E30303030303030- <2> timenscache db 8,".000000000"
  6407 00004F28 3030                <2>
  6408 00004F2A 200A00              <2> timenscacheend: db " ",10,0
  6409 00004F2D 00                  <2> istimeset db 0
  6410 00004F2E 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6411 00004F37 2063757272656E7420- <2>
  6412 00004F40 554E49582074696D65- <2>
  6413 00004F49 3A0A00              <2>
  6414 00004F4C 00<rept>            <2> timeinputbuffer times 12 db 0
  6415 00004F58 00                  <2> timeinputbend: db 0
  6416                              <2> 
  6417 00004F59 FF2C74696D6500      <2> db 255,44,"time",0
  6418 00004F60 803D[2D4F0000]00    <2> 	cmp byte [istimeset], 0
  6419 00004F67 753A                <2> 	jne timeisset
  6420 00004F69 BE[2E4F0000]        <2> 	mov esi, settimemsg
  6421 00004F6E E8EACDFFFF          <2> 	call print
  6422 00004F73 BE[4C4F0000]        <2> 	mov esi, timeinputbuffer
  6423 00004F78 BF[584F0000]        <2> 	mov edi, timeinputbend
  6424 00004F7D E8BCCEFFFF          <2> 	call readline
  6425 00004F82 BE[4C4F0000]        <2> 	mov esi, timeinputbuffer
  6426 00004F87 31FF                <2> 	xor edi, edi
  6427 00004F89 E865E2FFFF          <2> 	call cnvrttxt
  6428 00004F8E 890D[60020000]      <2> 	mov [timeseconds], ecx
  6429 00004F94 31C9                <2> 	xor ecx, ecx
  6430 00004F96 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6431 00004F9C C605[2D4F0000]01    <2> 	mov byte [istimeset], 1
  6432                              <2> timeisset:
  6433 00004FA3 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6434 00004FA9 E863E1FFFF          <2> 	call showdec
  6435                              <2> 	
  6436 00004FAE 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6437 00004FB4 BE[1F4F0000]        <2> 	mov esi, timenscache
  6438 00004FB9 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6439 00004FC0 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6440 00004FC7 C6460A30            <2> 	mov byte [esi + 10], "0"
  6441 00004FCB BE[2A4F0000]        <2> 	mov esi, timenscacheend
  6442 00004FD0 E81FDFFFFF          <2> 	call convert
  6443 00004FD5 BE[1F4F0000]        <2> 	mov esi, timenscache
  6444 00004FDA E86CCDFFFF          <2> 	call printquiet
  6445                              <2> 	
  6446 00004FDF E82D000000          <2> 	call time
  6447 00004FE4 BE[DD510000]        <2> 	mov esi, timeshow
  6448 00004FE9 E85DCDFFFF          <2> 	call printquiet
  6449 00004FEE BE[458D0000]        <2> 	mov esi, line
  6450 00004FF3 E853CDFFFF          <2> 	call printquiet
  6451 00004FF8 BE[E6510000]        <2> 	mov esi, dateshow
  6452 00004FFD E849CDFFFF          <2> 	call printquiet
  6453 00005002 BE[458D0000]        <2> 	mov esi, line
  6454 00005007 E83FCDFFFF          <2> 	call printquiet
  6455 0000500C E9BC000000          <2> 	jmp findday
  6456                              <2> time:
  6457 00005011 E84F010000          <2> 	call tstackput1
  6458 00005016 B00A                <2> 	mov al,10			;Get RTC register A
  6459 00005018 E879010000          <2> 	call tget1
  6460 0000501D A880                <2> 	test al,0x80			;Is update in progress?
  6461 0000501F 75F0                <2> 	jne time				; yes, wait
  6462                              <2> 
  6463 00005021 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6464 00005023 E86E010000          <2> 	call tget1
  6465 00005028 A2[D4510000]        <2> 	mov [RTCtimeSecond],al
  6466                              <2> 
  6467 0000502D B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6468 0000502F E862010000          <2> 	call tget1
  6469 00005034 A2[D5510000]        <2> 	mov [RTCtimeMinute],al
  6470                              <2> 
  6471 00005039 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6472 0000503B E856010000          <2> 	call tget1
  6473 00005040 A2[D6510000]        <2> 	mov [RTCtimeHour],al
  6474                              <2> 
  6475 00005045 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6476 00005047 E84A010000          <2> 	call tget1
  6477 0000504C A2[D7510000]        <2> 	mov [RTCtimeDay],al
  6478                              <2> 
  6479 00005051 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6480 00005053 E83E010000          <2> 	call tget1
  6481 00005058 A2[D8510000]        <2> 	mov [RTCtimeMonth],al
  6482                              <2> 
  6483 0000505D B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6484 0000505F E832010000          <2> 	call tget1
  6485 00005064 A2[D9510000]        <2> 	mov [RTCtimeYear],al
  6486                              <2> 	
  6487 00005069 BE[DD510000]        <2> 	mov esi, timeshow
  6488 0000506E 8A2D[D6510000]      <2> 	mov ch, [RTCtimeHour]
  6489 00005074 E828010000          <2> 	call tput1
  6490 00005079 8A2D[D5510000]      <2> 	mov ch, [RTCtimeMinute]
  6491 0000507F E81D010000          <2> 	call tput1
  6492 00005084 8A2D[D4510000]      <2> 	mov ch, [RTCtimeSecond]
  6493 0000508A E812010000          <2> 	call tput1
  6494 0000508F BE[E6510000]        <2> 	mov esi, dateshow
  6495 00005094 8A2D[D8510000]      <2> 	mov ch, [RTCtimeMonth]
  6496 0000509A E802010000          <2> 	call tput1
  6497 0000509F 8A2D[D7510000]      <2> 	mov ch, [RTCtimeDay]
  6498 000050A5 E8F7000000          <2> 	call tput1
  6499 000050AA B520                <2> 	mov ch, 0x20
  6500 000050AC E8F0000000          <2> 	call tput1
  6501 000050B1 4E                  <2> 	dec esi
  6502 000050B2 8A2D[D9510000]      <2> 	mov ch, [RTCtimeYear]
  6503 000050B8 E8E4000000          <2> 	call tput1
  6504 000050BD E8BD000000          <2> 	call tstackget1
  6505 000050C2 C3                  <2> 	ret
  6506 000050C3 BE[DD510000]        <2> 	mov esi, timeshow
  6507 000050C8 E890CCFFFF          <2> 	call print
  6508                              <2> ;;get day of week
  6509                              <2> ;;add these:
  6510                              <2> ;;century value
  6511                              <2> ;;last 2 digits of year
  6512                              <2> ;;last 2 digits of year right shifted twice
  6513                              <2> ;;month table value
  6514                              <2> ;;day of the month
  6515                              <2> ;;divide these by 7
  6516                              <2> ;;the remainder is the day
  6517                              <2> findday:
  6518 000050CD 31C0                <2> 	xor eax, eax
  6519                              <2> ;;first convert the values from BCD to hex
  6520 000050CF A0[D7510000]        <2> 	mov al, [RTCtimeDay]
  6521 000050D4 E873000000          <2> 	call converttohex
  6522 000050D9 8825[DA510000]      <2> 	mov [dayhex], ah
  6523 000050DF A0[D8510000]        <2> 	mov al, [RTCtimeMonth]
  6524 000050E4 E863000000          <2> 	call converttohex
  6525 000050E9 8825[DB510000]      <2> 	mov [monthhex], ah
  6526 000050EF A0[D9510000]        <2> 	mov al, [RTCtimeYear]
  6527 000050F4 E853000000          <2> 	call converttohex
  6528 000050F9 8825[DC510000]      <2> 	mov [yearhex], ah
  6529 000050FF 31C0                <2> 	xor eax, eax
  6530 00005101 A0[DC510000]        <2> 	mov al, [yearhex]
  6531 00005106 C0E802              <2> 	shr al, 2
  6532 00005109 0205[DC510000]      <2> 	add al, [yearhex]
  6533 0000510F 0506000000          <2> 	add eax, 6
  6534 00005114 31DB                <2> 	xor ebx, ebx
  6535 00005116 8A1D[DB510000]      <2> 	mov bl, [monthhex]
  6536 0000511C FECB                <2> 	dec bl
  6537 0000511E 81C3[FB510000]      <2> 	add ebx, month
  6538 00005124 31C9                <2> 	xor ecx, ecx
  6539 00005126 8A0B                <2> 	mov cl, [ebx]
  6540 00005128 01C8                <2> 	add eax, ecx
  6541 0000512A 8A0D[DA510000]      <2> 	mov cl, [dayhex]
  6542 00005130 01C8                <2> 	add eax, ecx
  6543 00005132 66BB0700            <2> 	mov bx, 7
  6544 00005136 31D2                <2> 	xor edx, edx
  6545 00005138 66F7F3              <2> 	div bx
  6546 0000513B C1E202              <2> 	shl edx, 2
  6547 0000513E 81C2[07520000]      <2> 	add edx, day
  6548 00005144 8B32                <2> 	mov esi, [edx]
  6549 00005146 E812CCFFFF          <2> 	call print
  6550 0000514B C3                  <2> 	ret
  6551                              <2> 	
  6552                              <2> converttohex:
  6553 0000514C 88C4                <2> 	mov ah, al
  6554 0000514E C0E804              <2> 	shr al, 4
  6555 00005151 C0E404              <2> 	shl ah, 4
  6556 00005154 C0EC04              <2> 	shr ah, 4
  6557 00005157 3C00                <2> 	cmp al, 0
  6558 00005159 7409                <2> 	je noconverttohex
  6559                              <2> converttohexlp:
  6560 0000515B 80C40A              <2> 	add ah, 10
  6561 0000515E FEC8                <2> 	dec al
  6562 00005160 3C00                <2> 	cmp al, 0
  6563 00005162 75F7                <2> 	jne converttohexlp
  6564                              <2> noconverttohex:
  6565 00005164 C3                  <2> 	ret
  6566                              <2> 	
  6567                              <2> tstackput1:
  6568 00005165 8935[D0510000]      <2> 	mov [tstack + 20], esi
  6569 0000516B BE[BC510000]        <2> 	mov esi, tstack
  6570 00005170 8906                <2> 	mov [esi], eax
  6571 00005172 895E04              <2> 	mov [esi + 4], ebx
  6572 00005175 894E08              <2> 	mov [esi + 8], ecx
  6573 00005178 89560C              <2> 	mov [esi + 12], edx
  6574 0000517B 897E10              <2> 	mov [esi + 16], edi
  6575 0000517E C3                  <2> 	ret
  6576                              <2> 	
  6577                              <2> tstackget1:
  6578 0000517F BE[BC510000]        <2> 	mov esi, tstack
  6579 00005184 8B06                <2> 	mov eax, [esi]
  6580 00005186 8B5E04              <2> 	mov ebx, [esi + 4]
  6581 00005189 8B4E08              <2> 	mov ecx, [esi + 8]
  6582 0000518C 8B560C              <2> 	mov edx, [esi + 12]
  6583 0000518F 8B7E10              <2> 	mov edi, [esi + 16]
  6584 00005192 8B7614              <2> 	mov esi, [esi + 20]
  6585 00005195 C3                  <2> 	ret
  6586                              <2> 	
  6587                              <2> tget1:
  6588 00005196 66BA7000            <2> 	mov dx, 0x70
  6589 0000519A EE                  <2> 	out dx, al
  6590 0000519B 6642                <2> 	inc dx
  6591 0000519D EC                  <2> 	in al, dx
  6592 0000519E 664A                <2> 	dec dx
  6593 000051A0 C3                  <2> 	ret
  6594                              <2> 	
  6595                              <2> tput1:
  6596 000051A1 66C1E904            <2> 	shr cx, 4
  6597 000051A5 B030                <2> 	mov al, 48
  6598 000051A7 00E8                <2> 	add al, ch
  6599 000051A9 8806                <2> 	mov [esi], al
  6600 000051AB 46                  <2> 	inc esi
  6601 000051AC B030                <2> 	mov al, 48
  6602 000051AE C0E904              <2> 	shr cl, 4
  6603 000051B1 00C8                <2> 	add al, cl
  6604 000051B3 8806                <2> 	mov [esi], al
  6605 000051B5 81C602000000        <2> 	add esi, 2
  6606 000051BB C3                  <2> 	ret
  6607                              <2> 		
  6608 000051BC 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6609 000051C5 000000000000000000- <2>
  6610 000051CE 000000000000        <2>
  6611 000051D4 00                  <2> 	RTCtimeSecond db 0
  6612 000051D5 00                  <2> 	RTCtimeMinute db 0
  6613 000051D6 00                  <2> 	RTCtimeHour db 0
  6614 000051D7 00                  <2> 	RTCtimeDay db 0
  6615 000051D8 00                  <2> 	RTCtimeMonth db 0
  6616 000051D9 00                  <2> 	RTCtimeYear db 0
  6617 000051DA 00                  <2> 	dayhex db 0
  6618 000051DB 00                  <2> 	monthhex db 0
  6619 000051DC 00                  <2> 	yearhex db 0
  6620 000051DD 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6621 000051E6 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6622 000051EF 302000              <2>
  6623                              <2> 	oldcentury:	;;from 1700 to 1900
  6624 000051F2 040200              <2> 	db 4,2,0
  6625                              <2> 	century:	;;from 2000 to 2500
  6626 000051F5 060402000604        <2> 	db 6,4,2,0,6,4
  6627                              <2> 	month:
  6628 000051FB 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6629 00005204 000305              <2>
  6630                              <2> 	day:
  6631 00005207 [23520000]          <2> 	dd sunday
  6632 0000520B [2B520000]          <2> 	dd monday
  6633 0000520F [33520000]          <2> 	dd tuesday
  6634 00005213 [3C520000]          <2> 	dd wednesday
  6635 00005217 [47520000]          <2> 	dd thursday
  6636 0000521B [51520000]          <2> 	dd friday
  6637 0000521F [59520000]          <2> 	dd saturday
  6638                              <2> sunday:
  6639 00005223 53756E6461790A00    <2> 	db "Sunday",10,0
  6640                              <2> monday:
  6641 0000522B 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6642                              <2> tuesday:
  6643 00005233 547565736461790A00  <2> 	db "Tuesday",10,0
  6644                              <2> wednesday:
  6645 0000523C 5765646E6573646179- <2> 	db "Wednesday",10,0
  6646 00005245 0A00                <2>
  6647                              <2> thursday:
  6648 00005247 54687572736461790A- <2> 	db "Thursday",10,0
  6649 00005250 00                  <2>
  6650                              <2> friday:
  6651 00005251 4672696461790A00    <2> 	db "Friday",10,0
  6652                              <2> saturday:
  6653 00005259 53617475726461790A- <2> 	db "Saturday",10,0
  6654 00005262 00                  <2>
  6655                              <1> %include 'source/programs/turnoff.asm'
  6656 00005263 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6657 0000526C 00                  <2>
  6658                              <2> 	turnoff:
  6659 0000526D 66BB[8852]          <2> 			mov bx, shutdown
  6660 00005271 66891D[080D0000]    <2> 			mov [realmodeptr], bx
  6661 00005278 BB[B2520000]        <2> 			mov ebx, halt
  6662 0000527D 891D[040D0000]      <2> 			mov [realmodereturn], ebx
  6663 00005283 E965B9FFFF          <2> 			jmp realmode
  6664                              <2> 
  6665                              <2> [BITS 16]
  6666                              <2> 		shutdown:
  6667 00005288 B453                <2> 			mov ah, 0x53
  6668 0000528A B004                <2> 			mov al, 4
  6669 0000528C 31DB                <2> 			xor bx, bx
  6670 0000528E CD15                <2> 			int 0x15
  6671                              <2> 			
  6672 00005290 B453                <2> 			mov ah, 0x53
  6673 00005292 B001                <2> 			mov al, 1
  6674 00005294 31DB                <2> 			xor bx, bx
  6675 00005296 CD15                <2> 			int 0x15
  6676                              <2> 			
  6677 00005298 B453                <2> 			mov ah, 0x53
  6678 0000529A B008                <2> 			mov al, 8
  6679 0000529C BB0100              <2> 			mov bx, 1
  6680 0000529F B90100              <2> 			mov cx, 1
  6681 000052A2 CD15                <2> 			int 0x15
  6682                              <2> 			
  6683 000052A4 B453                <2> 			mov ah, 0x53
  6684 000052A6 B007                <2> 			mov al, 7
  6685 000052A8 BB0100              <2> 			mov bx, 1
  6686 000052AB B90300              <2> 			mov cx, 3
  6687 000052AE CD15                <2> 			int 0x15
  6688 000052B0 EBFE                <2> 			jmp $
  6689                              <2> 			[BITS 32]
  6690 000052B2 EBFE                <2> halt: jmp $
  6691                              <1> %include 'source/programs/wait.asm'
  6692 000052B4 FF2C7761697400      <2> db 255,44,"wait",0
  6693                              <2> waitkey:
  6694 000052BB E86BCFFFFF          <2> 		call getchar
  6695 000052C0 C3                  <2> 		ret
  6696                              <1> %include 'source/programs/while.asm'
  6697 000052C1 FF2C7768696C6500    <2> db 255,44,"while",0
  6698 000052C9 30C0                <2> whilecmd:  xor al, al
  6699 000052CB 3805[1CB80000]      <2> 	cmp [BATCHISON], al
  6700 000052D1 0F8447E6FFFF        <2> 	je near notbatch
  6701 000052D7 8B35[18B80000]      <2> 	mov esi, [BATCHPOS]
  6702 000052DD 81EE02000000        <2> 	sub esi, 2
  6703 000052E3 4E                  <2> whilefnd: dec esi
  6704 000052E4 8A06                <2> 	mov al, [esi]
  6705 000052E6 3C0A                <2> 	cmp al, 10
  6706 000052E8 0F840A000000        <2> 	je near whilefnd2
  6707 000052EE 3C00                <2> 	cmp al, 0
  6708 000052F0 0F8402000000        <2> 	je near whilefnd2
  6709 000052F6 EBEB                <2> 	jmp whilefnd
  6710                              <2> whilefnd2:
  6711 000052F8 46                  <2> 	inc esi
  6712 000052F9 8935[1EB80000]      <2> 	mov [LOOPPOS], esi
  6713 000052FF C605[1DB80000]01    <2> 	mov BYTE [LOOPON], 1
  6714 00005306 BE[22CC0000]        <2> 	mov esi, buftxt
  6715 0000530B BB[22CC0000]        <2> 	mov ebx, buftxt
  6716 00005310 81C306000000        <2> 	add ebx, 6
  6717 00005316 E9C0F0FFFF          <2> 	jmp chkeqsn
  6718                              <1> progend:		;programs end here	
  6719                              <1> batchprogend:
  6720                                  	%include "source/hardware.asm"
  6721                              <1> %ifdef gui.included
  6722                              <1> 	%include "source/drivers/video/vesa.asm"
  6723                              <2> [BITS 16]
  6724                              <2> guiswitch:
  6725 0000531B 81F90000            <2> 	cmp cx, 0
  6726 0000531F 750B                <2> 	jne guiswitchdefnum
  6727 00005321 B81200              <2> 	mov ax, 12h
  6728 00005324 31DB                <2> 	xor bx, bx
  6729 00005326 CD10                <2> 	int 10h
  6730 00005328 E85100              <2> 	call guiloadagain
  6731                              <2> guiswitchnocando:
  6732 0000532B C3                  <2> 	ret	;return without switching as mode number is bad
  6733                              <2> guiswitchdefnum:	;switch to a defined mode number
  6734 0000532C B8004F              <2> 	mov ax, 0x4F00
  6735 0000532F BF[F954]            <2> 	mov di, VBEMODEBLOCK
  6736 00005332 CD10                <2> 	int 10h
  6737 00005334 BE[1B55]            <2> 	mov si, reserved
  6738 00005337 81EE0200            <2> 	sub si, 2
  6739                              <2> .loop:
  6740 0000533B 81C60200            <2> 	add si, 2
  6741 0000533F 81FE[F955]          <2> 	cmp si, oemdata
  6742 00005343 74E6                <2> 	je guiswitchnocando
  6743 00005345 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6744 00005349 74E0                <2> 	je guiswitchnocando
  6745 0000534B 390C                <2> 	cmp [si], cx
  6746 0000534D 75EC                <2> 	jne .loop
  6747 0000534F 8936[5354]          <2> 	mov [videomodecache], si
  6748 00005353 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6749 00005357 B8014F              <2> 	mov ax, 0x4F01
  6750 0000535A BF[F956]            <2> 	mov di, VBEMODEINFOBLOCK
  6751 0000535D 890E[5154]          <2> 	mov [vesamode], cx
  6752 00005361 CD10                <2> 	int 10h
  6753 00005363 E9CB00              <2> 	jmp selectedvesa
  6754                              <2> guiload:
  6755 00005366 BE[D154]            <2> 	mov si, bootmsg
  6756 00005369 E80EAD              <2> 	call printrm
  6757 0000536C 31C0                <2> 	xor ax, ax
  6758 0000536E CD16                <2> 	int 16h
  6759 00005370 3C79                <2> 	cmp al, "y"
  6760 00005372 0F85BEAC            <2> 	jne near vgaset
  6761 00005376 BE[448D]            <2> 	mov si, crlf
  6762 00005379 E8FEAC              <2> 	call printrm
  6763                              <2> guiloadagain:
  6764 0000537C B8004F              <2> 	mov ax, 04F00h
  6765 0000537F BF[F954]            <2> 	mov di, VBEMODEBLOCK
  6766 00005382 CD10                <2> 	int 10h
  6767 00005384 BE[1B55]            <2> 	mov si, reserved
  6768 00005387 81EE0200            <2> 	sub si, 2
  6769                              <2> findvideomodes:
  6770 0000538B 81C60200            <2> 	add si, 2
  6771 0000538F 8B0C                <2> 	mov cx, [si]
  6772 00005391 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6773 00005395 0F840A00            <2> 	je near nextvmode
  6774 00005399 81FE[F955]          <2> 	cmp si, oemdata
  6775 0000539D 0F8393AC            <2> 	jae near vgaset	;;kill if no valid list is found
  6776 000053A1 EBE8                <2> 	jmp findvideomodes 	
  6777                              <2> ;;debug,shows vmodes available
  6778                              <2> nextvmode:
  6779 000053A3 81EE0200            <2> 	sub si, 2
  6780 000053A7 81FE[1B55]          <2> 	cmp si, reserved
  6781 000053AB 0F82CDFF            <2> 	jb near guiloadagain
  6782 000053AF 8B0C                <2> 	mov cx, [si]
  6783 000053B1 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6784 000053B5 0F84EAFF            <2> 	je near nextvmode
  6785 000053B9 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6786 000053BD B8014F              <2> 	mov ax, 04F01h
  6787 000053C0 BF[F956]            <2> 	mov di, VBEMODEINFOBLOCK
  6788 000053C3 890E[5154]          <2> 	mov [vesamode], cx
  6789 000053C7 CD10                <2> 	int 10h
  6790 000053C9 A0[1257]            <2> 	mov al, [bitsperpixel]
  6791 000053CC 3C10                <2> 	cmp al, 16
  6792 000053CE 75D3                <2> 	jne nextvmode
  6793 000053D0 8936[5354]          <2> 	mov [videomodecache], si
  6794 000053D4 84E4                <2> 	test ah, ah
  6795 000053D6 0F842200            <2> 	jz near setvesamode
  6796 000053DA EBC7                <2> 	jmp nextvmode
  6797 000053DC 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6798 000053E5 20766964656F206D6F- <2>
  6799 000053EE 6465204F4B3F28792F- <2>
  6800 000053F7 6E290D0A00          <2>
  6801                              <2> setvesamode:
  6802 000053FC 8B0E[0B57]          <2> 	mov cx, [resolutionx]
  6803 00005400 E85900              <2> 	call decshow
  6804 00005403 B078                <2> 	mov al, "x"
  6805 00005405 E8C100              <2> 	call char
  6806 00005408 8B0E[0D57]          <2> 	mov cx, [resolutiony]
  6807 0000540C E84D00              <2> 	call decshow
  6808 0000540F B040                <2> 	mov al, "@"
  6809 00005411 E8B500              <2> 	call char
  6810 00005414 31C9                <2> 	xor cx, cx
  6811 00005416 8A0E[1257]          <2> 	mov cl, [bitsperpixel]
  6812 0000541A E83F00              <2> 	call decshow
  6813 0000541D BE[DC53]            <2> 	mov si, isthisvideook
  6814 00005420 E857AC              <2> 	call printrm
  6815 00005423 31C0                <2> 	xor ax, ax
  6816 00005425 CD16                <2> 	int 16h
  6817 00005427 8B36[5354]          <2> 	mov si, [videomodecache]
  6818 0000542B 3C79                <2> 	cmp al, "y"
  6819 0000542D 0F8572FF            <2> 	jne near nextvmode
  6820                              <2> selectedvesa:
  6821 00005431 8B16[0B57]          <2> 	mov dx, [resolutionx]
  6822 00005435 01D2                <2> 	add dx, dx
  6823 00005437 8916[F957]          <2> 	mov [resolutionx2], dx
  6824 0000543B 31D2                <2> 	xor dx, dx
  6825 0000543D 31C9                <2> 	xor cx, cx
  6826 0000543F B8024F              <2> 	mov ax, 04F02h
  6827 00005442 8B1E[5154]          <2> 	mov bx, [vesamode]
  6828 00005446 CD10                <2> 	int 10h		;;enter VESA mode
  6829 00005448 C606[589F]01        <2> 	mov byte [guion], 1
  6830 0000544D E8F4AB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6831 00005450 C3                  <2> 	ret
  6832                              <2> 	
  6833 00005451 0000                <2> vesamode dw 0
  6834 00005453 0000                <2> videomodecache dw 0
  6835                              <2> 
  6836 00005455 0000000000          <2> dcnm db 0,0,0,0,0
  6837 0000545A 0000                <2> dcnmend db 0,0
  6838                              <2> 
  6839                              <2> 
  6840                              <2> decshow:
  6841 0000545C BE[5554]            <2> 	mov si, dcnm
  6842                              <2> decclear:
  6843 0000545F B030                <2> 	mov al, "0"
  6844 00005461 8804                <2> 	mov [si], al
  6845 00005463 46                  <2> 	inc si
  6846 00005464 81FE[5A54]          <2> 	cmp si, dcnmend
  6847 00005468 76F5                <2> 	jbe decclear
  6848 0000546A 4E                  <2> 	dec si
  6849 0000546B E81500              <2> 	call convertrm
  6850 0000546E BE[5554]            <2> 	mov si, dcnm
  6851                              <2> dectst:
  6852 00005471 8A04                <2> 	mov al, [si]
  6853 00005473 46                  <2> 	inc si
  6854 00005474 81FE[5A54]          <2> 	cmp si, dcnmend
  6855 00005478 7704                <2> 	ja dectstend
  6856 0000547A 3C30                <2> 	cmp al, "0"
  6857 0000547C 76F3                <2> 	jbe dectst
  6858                              <2> dectstend:
  6859 0000547E 4E                  <2> 	dec si
  6860 0000547F E8F8AB              <2> 	call printrm
  6861 00005482 C3                  <2> 	ret
  6862                              <2> 	
  6863                              <2> 	
  6864                              <2> convertrm:
  6865 00005483 4E                  <2> 	dec si
  6866 00005484 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6867                              <2> cnvrtrm:
  6868 00005486 89DE                <2> 	mov si, bx
  6869 00005488 81EE0300            <2> 	sub si, 3
  6870 0000548C 46                  <2> ten3rm:	inc si
  6871 0000548D 81F9E803            <2> 	cmp cx, 1000
  6872 00005491 7208                <2> 	jb ten2rm
  6873 00005493 81E9E803            <2> 	sub cx, 1000
  6874 00005497 FE04                <2> 	inc byte [si]
  6875 00005499 EBEB                <2> 	jmp cnvrtrm
  6876 0000549B 46                  <2> ten2rm:	inc si
  6877 0000549C 81F96400            <2> 	cmp cx, 100
  6878 000054A0 7208                <2> 	jb ten1rm
  6879 000054A2 81E96400            <2> 	sub cx, 100
  6880 000054A6 FE04                <2> 	inc byte [si]
  6881 000054A8 EBDC                <2> 	jmp cnvrtrm
  6882 000054AA 46                  <2> ten1rm:	inc si
  6883 000054AB 81F90A00            <2> 	cmp cx, 10
  6884 000054AF 7208                <2> 	jb ten0rm
  6885 000054B1 81E90A00            <2> 	sub cx, 10
  6886 000054B5 FE04                <2> 	inc byte [si]
  6887 000054B7 EBCD                <2> 	jmp cnvrtrm
  6888 000054B9 46                  <2> ten0rm:	inc si
  6889 000054BA 81F90100            <2> 	cmp cx, 1
  6890 000054BE 7208                <2> 	jb tendnrm
  6891 000054C0 81E90100            <2> 	sub cx, 1
  6892 000054C4 FE04                <2> 	inc byte [si]
  6893 000054C6 EBBE                <2> 	jmp cnvrtrm
  6894                              <2> tendnrm:
  6895 000054C8 C3                  <2> 	ret
  6896                              <2> 
  6897                              <2>     char: 		    ;char must be in al
  6898 000054C9 BB0700              <2>        mov bx, 07
  6899 000054CC B40E                <2> 	   mov ah, 0Eh
  6900 000054CE CD10                <2> 	   int 10h
  6901 000054D0 C3                  <2> 	   ret
  6902                              <2> 
  6903 000054D1 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6904 000054DA 20746865204755493F- <2>
  6905 000054E3 28792F6E2900        <2>
  6906                              <2> 
  6907                              <2> 
  6908                              <2> mcursor:
  6909 000054E9 01                  <2> 	db	00000001b
  6910 000054EA 81                  <2> 	db	10000001b
  6911 000054EB C1                  <2> 	db	11000001b
  6912 000054EC E1                  <2> 	db	11100001b
  6913 000054ED F1                  <2> 	db	11110001b
  6914 000054EE F9                  <2> 	db	11111001b
  6915 000054EF FD                  <2> 	db	11111101b
  6916 000054F0 FF                  <2> 	db	11111111b
  6917 000054F1 F9                  <2> 	db	11111001b
  6918 000054F2 B9                  <2> 	db	10111001b
  6919 000054F3 39                  <2> 	db	00111001b
  6920 000054F4 1C                  <2> 	db	00011100b
  6921 000054F5 1C                  <2> 	db	00011100b
  6922 000054F6 0E                  <2> 	db	00001110b
  6923 000054F7 0E                  <2> 	db	00001110b
  6924 000054F8 0C                  <2> 	db	00001100b
  6925                              <2> mcursorend:
  6926                              <2> 
  6927                              <2> 
  6928                              <2> VBEMODEBLOCK:
  6929 000054F9 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6930 000054FD 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6931 000054FF 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6932 00005503 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6933 00005507 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6934 0000550B 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6935 0000550D 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6936 0000550F 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6937 00005513 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6938 00005517 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6939 0000551B 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6940 000055F9 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6941                              <2> 
  6942                              <2> VBEMODEINFOBLOCK:
  6943                              <2> ;Mandatory information for all VBE revision
  6944 000056F9 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6945 000056FB 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6946 000056FC 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6947 000056FD 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6948 000056FF 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6949 00005701 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6950 00005703 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6951 00005705 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6952 00005709 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6953                              <2> 
  6954                              <2> ;Mandatory information for VBE 1.2 and above
  6955 0000570B 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6956 0000570D 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6957 0000570F 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6958 00005710 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6959 00005711 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6960 00005712 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6961 00005713 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6962 00005714 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6963 00005715 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6964 00005716 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6965 00005717 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6966                              <2> 
  6967                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6968 00005718 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6969 00005719 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6970 0000571A 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6971 0000571B 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6972 0000571C 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6973 0000571D 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6974 0000571E 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6975 0000571F 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6976 00005720 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6977                              <2> 
  6978                              <2> ;Mandatory information for VBE 2.0 and above
  6979 00005721 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6980 00005725 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6981 00005729 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6982 0000572B 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6983                              <2> 
  6984 000057F9 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6985                              <2> VBEEND:
  6986                              <2> [BITS 32]
  6987                              <1> 	%include "source/drivers/input/mouse.asm"
  6988 000057FD 00                  <2> mousedisabled db 0
  6989                              <2> 	
  6990                              <2> 	cursorgui:
  6991 000057FE 803D[26840000]01    <2> 		cmp byte [mouseon], 1
  6992 00005805 0F8432000000        <2> 		je near mousedaemon
  6993 0000580B 803D[589F0000]00    <2> 		cmp byte [guion], 0
  6994 00005812 0F8415070000        <2> 		je near entdown
  6995                              <2> 	initmouse:
  6996 00005818 803D[589F0000]00    <2> 		cmp byte [guion], 0
  6997 0000581F 7405                <2> 		je noswmsposinit
  6998 00005821 E805130000          <2> 		call switchmousepos2
  6999                              <2> 	noswmsposinit:
  7000 00005826 E85D020000          <2> 	  	call PS2SET
  7001 0000582B E886020000          <2> 		call ACTMOUS
  7002 00005830 C605[26840000]01    <2> 		mov byte [mouseon],1
  7003 00005837 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7004                              <2> 		;call GETB
  7005                              <2> 				;;If the bytes are mixed up,
  7006                              <2> 				;;remove this line or add another of this line.
  7007                              <2> 	nomouse:
  7008 0000583C C3                  <2> 		ret
  7009                              <2> 		
  7010                              <2> 	mousedaemon:
  7011 0000583D 803D[26840000]01    <2> 		cmp byte [mouseon], 1
  7012 00005844 75D2                <2> 		jne initmouse
  7013 00005846 E464                <2> 		in al, 64h ; Status
  7014 00005848 A820                <2> 		test al, 20h ; PS2-Mouse?
  7015 0000584A 0F8502000000        <2> 		jnz near moused
  7016 00005850 F4                  <2> 		hlt
  7017 00005851 C3                  <2> 		ret
  7018                              <2> 	moused:
  7019 00005852 803D[FD570000]01    <2> 		cmp byte [mousedisabled], 1
  7020 00005859 74E1                <2> 		je nomouse
  7021 0000585B E87B020000          <2> 		  call GETB
  7022 00005860 88C3                <2> 		  mov  bl, al
  7023 00005862 80E301              <2> 		  and  bl, 1
  7024 00005865 881D[005B0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7025 0000586B 88C3                <2> 		  mov  bl, al
  7026 0000586D 80E302              <2> 		  and  bl, 2
  7027 00005870 D0EB                <2> 		  shr  bl, 1
  7028 00005872 881D[015B0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7029 00005878 88C3                <2> 		  mov  bl, al
  7030 0000587A 80E304              <2> 		  and  bl, 4
  7031 0000587D C0EB02              <2> 		  shr  bl, 2
  7032 00005880 881D[025B0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7033 00005886 E850020000          <2> 		  call GETB
  7034 0000588B A2[035B0000]        <2> 		  mov  BYTE [XCOORD], al
  7035 00005890 E846020000          <2> 		  call GETB
  7036 00005895 A2[045B0000]        <2> 		  mov  BYTE [YCOORD], al
  7037                              <2> 
  7038                              <2> 	showpixelcursor:
  7039 0000589A 668B15[EF590000]    <2> 		mov dx, [mousecursorposition]
  7040 000058A1 668B0D[F1590000]    <2> 		mov cx, [mousecursorposition + 2]
  7041 000058A8 668915[EB590000]    <2> 		mov [lastmouseposition], dx
  7042 000058AF 66890D[ED590000]    <2> 		mov [lastmouseposition + 2], cx
  7043 000058B6 A0[035B0000]        <2> 		mov al, [XCOORD]
  7044 000058BB 3C80                <2> 		cmp al, 128
  7045 000058BD 730C                <2> 		jae subxcoord
  7046 000058BF 00C0                <2> 		add al, al
  7047 000058C1 30E4                <2> 		xor ah, ah
  7048 000058C3 6601C2              <2> 		add dx, ax
  7049 000058C6 E90B000000          <2> 		jmp subxcoorddn
  7050                              <2> 	subxcoord:
  7051 000058CB 00C0                <2> 		add al, al
  7052 000058CD 30DB                <2> 		xor bl, bl
  7053 000058CF 28C3                <2> 		sub bl, al
  7054 000058D1 30FF                <2> 		xor bh, bh
  7055 000058D3 6629DA              <2> 		sub dx, bx
  7056                              <2> 	subxcoorddn:
  7057 000058D6 8A1D[045B0000]      <2> 		mov bl, [YCOORD]
  7058 000058DC 30C0                <2> 		xor al, al
  7059 000058DE 28D8                <2> 		sub al, bl
  7060 000058E0 3C80                <2> 		cmp al, 128
  7061 000058E2 730A                <2> 		jae subycoord
  7062 000058E4 30E4                <2> 		xor ah, ah
  7063 000058E6 6601C1              <2> 		add cx, ax
  7064 000058E9 E909000000          <2> 		jmp subycoorddn
  7065                              <2> 	subycoord:
  7066 000058EE 30DB                <2> 		xor bl, bl
  7067 000058F0 28C3                <2> 		sub bl, al
  7068 000058F2 30FF                <2> 		xor bh, bh
  7069 000058F4 6629D9              <2> 		sub cx, bx
  7070                              <2> 	subycoorddn:
  7071 000058F7 6681FA204E          <2> 		cmp dx, 20000
  7072 000058FC 7603                <2> 		jbe nooriginx2
  7073 000058FE 6631D2              <2> 		xor dx, dx
  7074                              <2> 	nooriginx2:
  7075 00005901 6681F9204E          <2> 		cmp cx, 20000
  7076 00005906 7603                <2> 		jbe nooriginy2
  7077 00005908 6631C9              <2> 		xor cx, cx
  7078                              <2> 	nooriginy2:
  7079 0000590B 6681FA0000          <2> 		cmp dx, 0
  7080 00005910 7415                <2> 		je nofixxcolumn2
  7081 00005912 663B15[F9570000]    <2> 		cmp dx, [resolutionx2]
  7082 00005919 720C                <2> 		jb nofixxcolumn2
  7083 0000591B 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  7084 00005922 6681EA0200          <2> 		sub dx, 2
  7085                              <2> 	nofixxcolumn2:
  7086 00005927 6681F90000          <2> 		cmp cx, 0
  7087 0000592C 7415                <2> 		je nofixyrow2
  7088 0000592E 663B0D[0D570000]    <2> 		cmp cx, [resolutiony]
  7089 00005935 720C                <2> 		jb nofixyrow2
  7090 00005937 668B0D[0D570000]    <2> 		mov cx, [resolutiony]
  7091 0000593E 6681E90100          <2> 		sub cx, 1
  7092                              <2> 	nofixyrow2:
  7093 00005943 668915[EF590000]    <2> 		mov [mousecursorposition], dx
  7094 0000594A 66890D[F1590000]    <2> 		mov [mousecursorposition + 2], cx
  7095 00005951 803D[589F0000]00    <2> 		cmp byte [guion], 0
  7096 00005958 0F8495000000        <2> 		je near termmouse
  7097 0000595E E868110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7098 00005963 803D[005B0000]01    <2> 		cmp byte [LBUTTON], 1
  7099 0000596A 0F8479220000        <2> 		je near clickicon
  7100 00005970 803D[015B0000]01    <2> 		cmp byte [RBUTTON], 1
  7101 00005977 0F846C220000        <2> 		je near clickicon
  7102 0000597D A0[D67B0000]        <2> 		mov al, [pbutton]
  7103 00005982 C705[D97B0000]0000- <2> 		mov dword [dragging], 0
  7104 0000598A 0000                <2>
  7105 0000598C 3C00                <2> 		cmp al, 0
  7106 0000598E 740F                <2> 		je nopreviousbutton
  7107 00005990 E8DE100000          <2> 		call clearmousecursor
  7108 00005995 E845140000          <2> 		call reloadallgraphics
  7109                              <2> 	windowtermcopyend:
  7110 0000599A E88C110000          <2> 		call switchmousepos2
  7111                              <2> 	nopreviousbutton:
  7112 0000599F 30C0                <2> 		xor al, al
  7113 000059A1 A2[D67B0000]        <2> 		mov [pbutton], al
  7114 000059A6 A2[3D810000]        <2> 		mov [windrag], al
  7115 000059AB A0[005B0000]        <2> 		mov al, [LBUTTON]
  7116 000059B0 A2[D77B0000]        <2> 		mov [pLBUTTON], al
  7117 000059B5 A0[015B0000]        <2> 		mov al, [RBUTTON]
  7118 000059BA A2[D87B0000]        <2> 		mov [pRBUTTON], al
  7119 000059BF 31D2                <2> 		xor edx, edx
  7120 000059C1 668B15[EF590000]    <2> 		mov dx, [mousecursorposition]
  7121 000059C8 668B0D[F1590000]    <2> 		mov cx, [mousecursorposition + 2]
  7122 000059CF 66BB18C7            <2> 		mov bx, 1100011100011000b
  7123 000059D3 30E4                <2> 		xor ah, ah
  7124 000059D5 B0FE                <2> 		mov al, 254
  7125 000059D7 C605[D37B0000]01    <2> 		mov byte [showcursorfonton], 1
  7126 000059DE E88C1A0000          <2> 		call showfontvesa
  7127 000059E3 C605[D37B0000]00    <2> 		mov byte [showcursorfonton], 0
  7128 000059EA C3                  <2> 		ret
  7129                              <2> 
  7130 000059EB 00000000            <2> lastmouseposition dw 0,0
  7131 000059EF 00000000            <2> mousecursorposition dw 0,0	
  7132                              <2> 
  7133                              <2> termmouse:
  7134 000059F3 BE[38D30000]        <2> 		mov esi, videobuf
  7135 000059F8 31D2                <2> 		xor edx, edx
  7136 000059FA 668B15[EB590000]    <2> 		mov dx, [lastmouseposition]
  7137 00005A01 668B0D[ED590000]    <2> 		mov cx, [lastmouseposition + 2]
  7138 00005A08 66A1[865A0000]      <2> 		mov ax, [cursorcache]
  7139 00005A0E 663D0000            <2> 		cmp ax, 0
  7140 00005A12 7425                <2> 		je nocopycursorcache
  7141 00005A14 66C1E104            <2> 		shl cx, 4
  7142 00005A18 66C1E203            <2> 		shl dx, 3
  7143 00005A1C 01D6                <2> 		add esi, edx
  7144 00005A1E 6631D2              <2> 		xor dx, dx
  7145 00005A21 8A15[79240000]      <2> 		mov dl, [charxy]
  7146 00005A27 6641                <2> 		inc cx
  7147                              <2> termmousecplp1:
  7148 00005A29 01D6                <2> 		add esi, edx
  7149 00005A2B 6649                <2> 		dec cx
  7150 00005A2D 6681F90000          <2> 		cmp cx, 0
  7151 00005A32 75F5                <2> 		jne termmousecplp1
  7152 00005A34 29D6                <2> 		sub esi, edx
  7153 00005A36 668906              <2> 		mov [esi], ax
  7154                              <2> nocopycursorcache:
  7155 00005A39 BE[38D30000]        <2> 		mov esi, videobuf
  7156 00005A3E 31D2                <2> 		xor edx, edx
  7157 00005A40 668B15[EF590000]    <2> 		mov dx, [mousecursorposition]
  7158 00005A47 668B0D[F1590000]    <2> 		mov cx, [mousecursorposition + 2]
  7159 00005A4E 66C1E104            <2> 		shl cx, 4
  7160 00005A52 66C1E203            <2> 		shl dx, 3
  7161 00005A56 01D6                <2> 		add esi, edx
  7162 00005A58 6631D2              <2> 		xor dx, dx
  7163 00005A5B 8A15[79240000]      <2> 		mov dl, [charxy]
  7164 00005A61 6641                <2> 		inc cx
  7165                              <2> termmousecplp2:
  7166 00005A63 01D6                <2> 		add esi, edx
  7167 00005A65 6649                <2> 		dec cx
  7168 00005A67 6681F90000          <2> 		cmp cx, 0
  7169 00005A6C 75F5                <2> 		jne termmousecplp2
  7170 00005A6E 29D6                <2> 		sub esi, edx
  7171 00005A70 668B06              <2> 		mov ax, [esi]
  7172 00005A73 66A3[865A0000]      <2> 		mov [cursorcache], ax
  7173 00005A79 B080                <2> 		mov al, 128
  7174 00005A7B B407                <2> 		mov ah, 7
  7175 00005A7D 668906              <2> 		mov [esi], ax
  7176 00005A80 E8CDCCFFFF          <2> 		call termcopy
  7177 00005A85 C3                  <2> 		ret
  7178 00005A86 0000                <2> cursorcache db 0,0
  7179                              <2> 
  7180                              <2> PS2SET:
  7181 00005A88 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7182 00005A8A E664                <2>   out  0x64, al		; write to keyboardcontroller
  7183 00005A8C E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7184 00005A91 C3                  <2> ret
  7185                              <2> 
  7186                              <2> CHKPRT:
  7187 00005A92 66B96400            <2>   mov  cx, 100
  7188                              <2>  .again:
  7189 00005A96 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7190 00005A98 A802                <2>   test al, 2		; Check if input buffer is empty
  7191 00005A9A 7402                <2>   je .go
  7192 00005A9C E2F8                <2>   loop .again
  7193                              <2>  .go:
  7194 00005A9E C3                  <2> ret
  7195                              <2> 
  7196                              <2> WMOUS:
  7197 00005A9F B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7198 00005AA1 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7199 00005AA3 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7200 00005AA8 C3                  <2> ret
  7201                              <2> 
  7202                              <2> MBUFFUL:
  7203 00005AA9 66B96400            <2>   mov cx, 100
  7204                              <2>  .mn:
  7205 00005AAD E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7206 00005AAF A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7207 00005AB1 7402                <2>   jz  .mnn
  7208 00005AB3 E2F8                <2>   loop .mn
  7209                              <2>  .mnn:
  7210 00005AB5 C3                  <2> ret
  7211                              <2> 
  7212                              <2> 
  7213                              <2> ACTMOUS:
  7214 00005AB6 E8E4FFFFFF          <2>   call WMOUS
  7215 00005ABB B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7216 00005ABD E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7217 00005ABF E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7218 00005AC4 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7219 00005AC9 C3                  <2> ret
  7220                              <2> 
  7221                              <2> CHKMOUS:
  7222 00005ACA B300                <2>   mov  bl, 0
  7223 00005ACC 66B96400            <2>   mov cx, 100
  7224                              <2>  .vrd:
  7225 00005AD0 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7226 00005AD2 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7227 00005AD4 7504                <2>   jnz .yy
  7228 00005AD6 E2F8                <2>   loop .vrd
  7229 00005AD8 B301                <2>   mov  bl, 1
  7230                              <2>  .yy:
  7231 00005ADA C3                  <2> ret
  7232                              <2> 
  7233                              <2> GETB:
  7234                              <2>  .cagain:
  7235 00005ADB E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7236 00005AE0 08DB                <2>   or bl, bl
  7237 00005AE2 75F7                <2>   jnz .cagain
  7238 00005AE4 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7239 00005AE6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7240 00005AE8 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7241 00005AED 6631C0              <2>   xor  ax, ax
  7242 00005AF0 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7243 00005AF2 88C2                <2>   mov  dl, al
  7244 00005AF4 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7245 00005AF6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7246 00005AF8 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7247 00005AFD 88D0                <2>   mov  al, dl
  7248 00005AFF C3                  <2> ret
  7249                              <2> 
  7250 00005B00 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7251 00005B01 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7252 00005B02 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7253 00005B03 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7254 00005B04 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7255                              <1> %endif
  7256                              <1> %include "source/drivers/sound/pcspkr.asm"
  7257                              <2> ;PC Speaker Drivers
  7258                              <2> PCSpeakerRAW:
  7259 00005B05 60                  <2> 	pusha
  7260                              <2> nosoundrep:
  7261 00005B06 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7262 00005B0C 31C9                <2> 	xor ecx, ecx
  7263 00005B0E 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7264 00005B15 6681F90000          <2> 	cmp cx, 0
  7265 00005B1A 0F8548000000        <2> 	jne near donesetpitch
  7266 00005B20 668B0E              <2> 	mov cx, [esi]
  7267 00005B23 668B5E02            <2> 	mov bx, [esi + 2]
  7268 00005B27 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7269 00005B2E 81C604000000        <2> 	add esi, 4
  7270 00005B34 8935[6B020000]      <2> 	mov [soundpos], esi
  7271 00005B3A 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7272 00005B40 7735                <2> 	ja stopsound
  7273 00005B42 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7274 00005B4A 00                  <2>
  7275 00005B4B 74B9                <2> 	je nosoundrep
  7276 00005B4D 6681FB0000          <2> 	cmp bx, 0
  7277 00005B52 740F                <2> 	je nosoundplay
  7278 00005B54 E840000000          <2> 	call setpitch
  7279 00005B59 E849000000          <2> 	call startsound
  7280 00005B5E E905000000          <2> 	jmp donesetpitch
  7281                              <2> nosoundplay:
  7282 00005B63 E846000000          <2> 	call killsound
  7283                              <2> donesetpitch:
  7284 00005B68 6649                <2> 	dec cx
  7285 00005B6A 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7286 00005B71 61                  <2> 	popa
  7287 00005B72 E931A7FFFF          <2> 	jmp timerinterrupt
  7288                              <2> stopsound:
  7289 00005B77 31C0                <2> 	xor eax, eax
  7290 00005B79 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7291 00005B7F A2[68020000]        <2> 	mov [soundon], al
  7292 00005B84 A3[6B020000]        <2> 	mov [soundpos], eax
  7293 00005B89 A3[6F020000]        <2> 	mov [soundendpos], eax
  7294 00005B8E E81B000000          <2> 	call killsound
  7295 00005B93 61                  <2> 	popa
  7296 00005B94 E90FA7FFFF          <2> 	jmp timerinterrupt
  7297                              <2> 
  7298                              <2> 
  7299                              <2> setpitch:
  7300 00005B99 B0B6                <2> 	mov al, 0xB6
  7301 00005B9B E643                <2> 	out 0x43, al
  7302 00005B9D 6689D8              <2> 	mov ax, bx
  7303 00005BA0 E642                <2> 	out 0x42, al
  7304 00005BA2 88E0                <2> 	mov al, ah
  7305 00005BA4 E642                <2> 	out 0x42, al
  7306 00005BA6 C3                  <2> 	ret
  7307                              <2> startsound:
  7308 00005BA7 E461                <2> 	in al, 0x61
  7309 00005BA9 0C03                <2> 	or al, 3
  7310 00005BAB E661                <2> 	out 0x61, al
  7311 00005BAD C3                  <2> 	ret
  7312                              <2> killsound:
  7313 00005BAE E461                <2> 	in al, 0x61
  7314 00005BB0 24FC                <2> 	and al, 0xFC
  7315 00005BB2 E661                <2> 	out 0x61, al
  7316 00005BB4 C3                  <2> 	ret
  7317                              <2> 	
  7318                              <1> %ifdef sound.included
  7319                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7320                              <2> ;Sound Blaster Drivers
  7321                              <2> sblaster:
  7322                              <2> .init:
  7323 00005BB5 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7324 00005BBA A2[EB5D0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7325 00005BBF 3C00                <2> 		cmp al, 0
  7326 00005BC1 7418                <2> 		je .noinit
  7327 00005BC3 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7328 00005BC5 E8FB010000          <2> 		call WriteDSP
  7329 00005BCA B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7330 00005BCC E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7331 00005BD1 BE[DC5B0000]        <2> 		mov esi, .initmsg
  7332 00005BD6 E882C1FFFF          <2> 		call print
  7333                              <2> .noinit:
  7334 00005BDB C3                  <2> 		ret
  7335 00005BDC 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7336 00005BE5 74657220496E697469- <2>
  7337 00005BEE 616C697A65640A00    <2>
  7338                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7339 00005BF6 813D[D55D0000]0000- <2> 	cmp dword [Length0], 0
  7340 00005BFE 0000                <2>
  7341 00005C00 0F8462000000        <2> 	je near .done
  7342 00005C06 FF0D[D55D0000]      <2> 	dec dword [Length0]
  7343 00005C0C E908000000          <2> 	jmp .notodd
  7344                              <2> .oddlength:
  7345 00005C11 31C9                <2> 	xor ecx, ecx
  7346 00005C13 880D[D45D0000]      <2> 	mov [OddLength], cl
  7347                              <2> .notodd:
  7348 00005C19 8B35[DB5D0000]      <2> 	mov esi, [NextMemLoc]
  7349 00005C1F 31C9                <2> 	xor ecx, ecx
  7350 00005C21 668B0D[D95D0000]    <2> 	mov cx, [Length1]
  7351 00005C28 D1E9                <2> 	shr ecx, 1
  7352 00005C2A 6641                <2> 	inc cx
  7353 00005C2C 31DB                <2> 	xor ebx, ebx
  7354 00005C2E 668B1D[E35D0000]    <2> 	mov bx, [SegLoc]
  7355 00005C35 6601CB              <2> 	add bx, cx
  7356 00005C38 66891D[E35D0000]    <2> 	mov [SegLoc], bx
  7357 00005C3F 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7358 00005C45 8935[DF5D0000]      <2> 	mov [MemLoc], esi
  7359 00005C4B 89C8                <2> 	mov eax, ecx
  7360 00005C4D 01F0                <2> 	add eax, esi
  7361 00005C4F A3[DB5D0000]        <2> 	mov [NextMemLoc], eax
  7362 00005C54 E833000000          <2> 	call DMACopy
  7363                              <2> 	;call DMAPlay
  7364 00005C59 E8E0000000          <2> 	call PlayDSP
  7365 00005C5E 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7366 00005C62 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7367 00005C63 E90FA7FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7368                              <2> .done:
  7369 00005C68 803D[D45D0000]01    <2> 	cmp byte [OddLength], 1
  7370 00005C6F 74A0                <2> 	je .oddlength
  7371 00005C71 31C0                <2> 	xor eax, eax
  7372 00005C73 66A3[D95D0000]      <2> 	mov [Length1], ax
  7373 00005C79 66B8D000            <2> 	mov ax, 0xD0
  7374 00005C7D E843010000          <2> 	call WriteDSP
  7375 00005C82 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7376 00005C86 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7377 00005C87 E9EBA6FFFF          <2> 	jmp handled2
  7378                              <2> 	
  7379                              <2> DMACopy:
  7380 00005C8C 66B80800            <2> 		mov ax, LINEAR_SEL
  7381 00005C90 8EE0                <2> 		mov fs, ax
  7382 00005C92 C1E902              <2> 		shr ecx, 2
  7383                              <2> .loop:
  7384 00005C95 8B06                <2> 		mov eax, [esi]
  7385 00005C97 648903              <2> 		mov [fs:ebx], eax
  7386 00005C9A 81C604000000        <2> 		add esi, 4
  7387 00005CA0 81C304000000        <2> 		add ebx, 4
  7388 00005CA6 E2ED                <2> 		loop .loop
  7389 00005CA8 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7390 00005CAC 8EE0                <2> 		mov fs, ax
  7391 00005CAE C3                  <2> 		ret
  7392                              <2> 		
  7393                              <2> 
  7394                              <2> DMAPlay:    ;uses eax ebx edx
  7395 00005CAF C605[E55D0000]00    <2> 		mov	byte [Page1],00h
  7396                              <2> 
  7397 00005CB6 B005                <2> 		mov	al,(Channel+4)
  7398 00005CB8 66BA0A00            <2> 		mov	dx,0Ah
  7399 00005CBC EE                  <2> 		out	dx,al
  7400 00005CBD 30C0                <2> 		xor	al,al
  7401 00005CBF 66BA0C00            <2> 		mov	dx,0Ch
  7402 00005CC3 EE                  <2> 		out	dx,al
  7403 00005CC4 B059                <2> 		mov	al,ModeReg
  7404 00005CC6 66BA0B00            <2> 		mov	dx,0Bh
  7405 00005CCA EE                  <2> 		out	dx,al
  7406 00005CCB B800000800          <2> 		mov	eax,0x80000
  7407 00005CD0 66BA0200            <2> 		mov	dx,AddPort
  7408 00005CD4 EE                  <2> 		out	dx,al
  7409 00005CD5 86C4                <2> 		xchg al,ah
  7410 00005CD7 EE                  <2> 		out	dx,al
  7411 00005CD8 B800000800          <2> 		mov	eax,0x80000
  7412 00005CDD 89C2                <2> 		mov	edx,eax
  7413 00005CDF 2500000100          <2> 		and	eax,65536
  7414 00005CE4 7406                <2> 		jz	MemLocN1
  7415 00005CE6 FE05[E55D0000]      <2> 		inc	byte [Page1]
  7416                              <2> MemLocN1:
  7417 00005CEC 89D0                <2> 		mov	eax,edx
  7418 00005CEE 2500000200          <2> 		and	eax,131072
  7419 00005CF3 7407                <2> 		jz	MemLocN2
  7420 00005CF5 8005[E55D0000]02    <2> 		add	byte [Page1],02
  7421                              <2> MemLocN2:
  7422 00005CFC 89D0                <2> 		mov	eax,edx
  7423 00005CFE 2500000400          <2> 		and	eax,262144
  7424 00005D03 7407                <2> 		jz	MemLocN3
  7425 00005D05 8005[E55D0000]04    <2> 		add	byte [Page1],04
  7426                              <2> MemLocN3:
  7427 00005D0C 89D0                <2> 		mov	eax,edx
  7428 00005D0E 2500000800          <2> 		and	eax,524288
  7429 00005D13 7407                <2> 		jz	MemLocN4
  7430 00005D15 8005[E55D0000]08    <2> 		add	byte [Page1],08
  7431                              <2> MemLocN4:
  7432 00005D1C 66BA8300            <2> 		mov	dx,PgPort
  7433 00005D20 A0[E55D0000]        <2> 		mov	al,[Page1]
  7434 00005D25 EE                  <2> 		out	dx,al
  7435 00005D26 66BA0300            <2> 		mov	dx,LenPort
  7436 00005D2A 66A1[D95D0000]      <2> 		mov	ax,[Length1]
  7437 00005D30 6648                <2> 		dec ax
  7438 00005D32 EE                  <2> 		out	dx,al
  7439 00005D33 86C4                <2> 		xchg al,ah
  7440 00005D35 EE                  <2> 		out	dx,al
  7441 00005D36 66BA0A00            <2> 		mov	dx,0Ah
  7442 00005D3A B001                <2> 		mov	al,Channel
  7443 00005D3C EE                  <2> 		out	dx,al
  7444 00005D3D C3                  <2> 		ret
  7445                              <2> 		
  7446                              <2> PlayDSP:
  7447 00005D3E B040                <2> 		mov	al,40h
  7448 00005D40 E880000000          <2> 		call WriteDSP
  7449 00005D45 31D2                <2> 		xor	edx,edx
  7450 00005D47 B840420F00          <2> 		mov	eax,1000000
  7451 00005D4C 8B1D[E65D0000]      <2> 		mov	ebx,[Freq]
  7452 00005D52 F7F3                <2> 		div	ebx
  7453 00005D54 89C3                <2> 		mov	ebx,eax
  7454 00005D56 B800010000          <2> 		mov	eax,256
  7455 00005D5B 29D8                <2> 		sub	eax,ebx
  7456 00005D5D E863000000          <2> 		call WriteDSP
  7457 00005D62 A0[EA5D0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7458 00005D67 E859000000          <2> 		call WriteDSP
  7459 00005D6C 66A1[D95D0000]      <2> 		mov	ax,[Length1]
  7460 00005D72 66D1E8              <2> 		shr ax, 1
  7461 00005D75 E84B000000          <2> 		call WriteDSP
  7462 00005D7A 86C4                <2> 		xchg al,ah
  7463 00005D7C E844000000          <2> 		call WriteDSP
  7464 00005D81 C3                  <2> 		ret
  7465                              <2> 
  7466                              <2> MstrVol:    ;uses ax dx
  7467 00005D82 6650                <2> 	   push ax
  7468 00005D84 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7469 00005D88 B022                <2> 	   mov	al,22h
  7470 00005D8A EE                  <2> 	   out	dx,al
  7471 00005D8B 6658                <2> 	   pop	ax
  7472 00005D8D 6642                <2> 	   inc	dx
  7473 00005D8F EE                  <2> 	   out	dx,al
  7474 00005D90 C3                  <2> 	   ret
  7475                              <2> 	   
  7476                              <2> ResetDSP:   ; uses cx dx
  7477 00005D91 66BA2602            <2> 			mov	dx,(BasePort+6)
  7478 00005D95 B001                <2> 			mov	al,01
  7479 00005D97 EE                  <2> 			out	dx,al
  7480 00005D98 66B93200            <2> 			mov	cx,50
  7481 00005D9C EC                  <2> WaitIt1:	in	al,dx
  7482 00005D9D E2FD                <2> 			loop WaitIt1
  7483 00005D9F 30C0                <2> 			xor	al,al
  7484 00005DA1 EE                  <2> 			out	dx,al
  7485 00005DA2 66B93200            <2> 			mov	cx,50
  7486 00005DA6 EC                  <2> WaitIt2:	in	al,dx
  7487 00005DA7 E2FD                <2> 			loop WaitIt2
  7488 00005DA9 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7489 00005DAB 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7490 00005DAF EC                  <2> 			in	al,dx
  7491 00005DB0 2480                <2> 			and	al,80h
  7492 00005DB2 3C80                <2> 			cmp	al,80h
  7493 00005DB4 750C                <2> 			jne	ResetErr
  7494 00005DB6 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7495 00005DBA EC                  <2> 			in	al,dx
  7496 00005DBB 3CAA                <2> 			cmp	al,0AAh
  7497 00005DBD 7503                <2> 			jne	ResetErr
  7498 00005DBF B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7499 00005DC1 C3                  <2> 			ret
  7500 00005DC2 30C0                <2> ResetErr:	xor al, al
  7501 00005DC4 C3                  <2> 			ret
  7502                              <2> 
  7503                              <2> WriteDSP:   ;uses ax dx
  7504 00005DC5 6650                <2> 		push ax
  7505 00005DC7 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7506 00005DCB EC                  <2> WaitIt:	in	al,dx
  7507 00005DCC 2480                <2> 		and	al,80h
  7508 00005DCE 75FB                <2> 		jnz	WaitIt
  7509 00005DD0 6658                <2> 		pop	ax
  7510 00005DD2 EE                  <2> 		out	dx,al
  7511 00005DD3 C3                  <2> 		ret
  7512                              <2> 
  7513 00005DD4 00                  <2> OddLength db 0
  7514 00005DD5 00000000            <2> Length0 dd	0
  7515 00005DD9 0000                <2> Length1	dw  0
  7516 00005DDB 00000000            <2> NextMemLoc dd 0
  7517 00005DDF 00000000            <2> MemLoc	dd  0
  7518 00005DE3 0000                <2> SegLoc  dw 0
  7519 00005DE5 00                  <2> Page1	db  0
  7520 00005DE6 00000000            <2> Freq	dd	0
  7521 00005DEA 14                  <2> WAVEMode db 14h
  7522                              <2> PgPort	equ 83h
  7523                              <2> AddPort	equ 02h
  7524                              <2> LenPort	equ 03h
  7525                              <2> ModeReg	equ 59h
  7526                              <2> Channel	equ 01h
  7527                              <2> BasePort	equ 220h
  7528 00005DEB 00                  <2> SoundBlaster	db 0
  7529                              <1> %endif
  7530                              <1> %ifdef io.serial
  7531                              <1> 	%include "source/drivers/input/serial.asm"
  7532                              <1> %else
  7533                              <1> 	%include "source/drivers/input/keyboard.asm"
  7534 00005DEC 00                  <2> specialkey db 0
  7535 00005DED 00                  <2> charregion db 0
  7536                              <2> waitforinput:		;;this is basically the idle process
  7537                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7538                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7539 00005DEE 6631C0              <2> 	xor ax, ax
  7540 00005DF1 A0[F5660000]        <2> 	mov al, [threadson]
  7541 00005DF6 8825[F5660000]      <2> 	mov [threadson], ah
  7542 00005DFC FB                  <2> 	sti
  7543 00005DFD F4                  <2> 	hlt
  7544 00005DFE A2[F5660000]        <2> 	mov [threadson], al
  7545 00005E03 3A25[7B220000]      <2> 	cmp ah, [trans]
  7546 00005E09 7401                <2> 	je getkey
  7547 00005E0B C3                  <2> 	ret
  7548                              <2> getkey:
  7549 00005E0C 31C0                <2> 		xor eax, eax
  7550 00005E0E A2[EC5D0000]        <2> 		mov [specialkey], al
  7551 00005E13 66A3[79220000]      <2> 		mov [lastkey], ax
  7552 00005E19 E464                <2> 		in al, 64h ; Status
  7553                              <2> 	%ifdef gui.included
  7554 00005E1B A820                <2> 		test al, 20h ; PS2-Mouse?
  7555 00005E1D 0F852FFAFFFF        <2> 		jnz near moused
  7556                              <2> 	%endif
  7557 00005E23 A801                <2> 		test al, 1 
  7558 00005E25 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7559                              <2> 	calckey:
  7560 00005E27 E460                <2> 		in al, 60h
  7561 00005E29 88C4                <2> 		mov ah, al
  7562 00005E2B 30C0                <2> 		xor al, al
  7563 00005E2D 8825[7A220000]      <2> 		mov [lastkey + 1], ah
  7564 00005E33 88E0                <2> 		mov al, ah
  7565 00005E35 BF[CE5F0000]        <2> 		mov edi, scancode
  7566                              <2> 	searchscan: 
  7567 00005E3A 3C3A                <2> 		cmp al, 3Ah
  7568 00005E3C 731A                <2> 		jae scanother
  7569 00005E3E 30E4                <2> 		xor ah, ah
  7570 00005E40 C0E002              <2> 		shl al, 2
  7571 00005E43 01C7                <2> 		add edi, eax
  7572 00005E45 D0E8                <2> 		shr al, 1
  7573 00005E47 01C7                <2> 		add edi, eax
  7574 00005E49 D0E8                <2> 		shr al, 1
  7575 00005E4B 8A27                <2> 		mov ah, [edi]
  7576 00005E4D 80FC00              <2> 		cmp ah, 0
  7577 00005E50 7406                <2> 		je scanother
  7578 00005E52 E9D7000000          <2> 		jmp scanfound
  7579 00005E57 00                  <2> uppercase db 0
  7580                              <2> scanother:
  7581 00005E58 88C4                <2> 		mov ah, al
  7582 00005E5A 30C0                <2> 		xor al, al
  7583 00005E5C 66A3[79220000]      <2> 		mov [lastkey], ax
  7584 00005E62 80FCE0              <2> 		cmp ah, 0E0h
  7585 00005E65 0F847D000000        <2> 		je near getkeyspecial
  7586 00005E6B 803D[EC5D0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7587 00005E72 752B                <2> 		jne nospecialkey
  7588 00005E74 80FC38              <2> 		cmp ah, 38h
  7589 00005E77 0F84A0000000        <2> 		je near alton
  7590 00005E7D 80FCB8              <2> 		cmp ah, 0B8h
  7591 00005E80 0F849F000000        <2> 		je near altoff
  7592 00005E86 80FC1D              <2> 		cmp ah, 1Dh
  7593 00005E89 0F847E000000        <2> 		je near ctron
  7594 00005E8F 80FC9D              <2> 		cmp ah, 9Dh
  7595 00005E92 0F847D000000        <2> 		je near ctroff
  7596 00005E98 66A3[79220000]      <2> 		mov [lastkey], ax
  7597 00005E9E C3                  <2> 		ret
  7598                              <2> nospecialkey:
  7599 00005E9F 80FC2A              <2> 		cmp ah, 2Ah
  7600 00005EA2 0F8455000000        <2> 		je near shifton
  7601 00005EA8 80FC36              <2> 		cmp ah, 36h
  7602 00005EAB 0F844C000000        <2> 		je near shifton
  7603 00005EB1 80FC1C              <2> 		cmp ah, 1Ch
  7604 00005EB4 0F8473000000        <2> 		je near entdown
  7605 00005EBA 80FCAA              <2> 		cmp ah, 0AAh
  7606 00005EBD 0F8442000000        <2> 		je near shiftoff
  7607 00005EC3 80FCB6              <2> 		cmp ah, 0B6h
  7608 00005EC6 0F8439000000        <2> 		je near shiftoff
  7609 00005ECC 80FC3A              <2> 		cmp ah, 3Ah
  7610 00005ECF 0F84A5000000        <2> 		je near capslock
  7611 00005ED5 80FC45              <2> 		cmp ah, 0x45
  7612 00005ED8 0F84AD000000        <2> 		je near numlock
  7613 00005EDE 80FC46              <2> 		cmp ah, 0x46
  7614 00005EE1 0F84BC000000        <2> 		je near scrolllock
  7615 00005EE7 C3                  <2> 		ret
  7616                              <2> 	getkeyspecial:
  7617 00005EE8 C605[EC5D0000]E0    <2> 		mov byte [specialkey], 0xE0
  7618 00005EEF E933FFFFFF          <2> 		jmp calckey
  7619                              <2> 	shift:
  7620 00005EF4 A0[575E0000]        <2> 		mov al, [uppercase]
  7621 00005EF9 3C01                <2> 		cmp al, 1
  7622 00005EFB 7308                <2> 		jae shiftoff
  7623                              <2> 	shifton:
  7624 00005EFD C605[575E0000]01    <2> 		mov byte [uppercase], 1
  7625 00005F04 C3                  <2> 		ret
  7626                              <2> 	shiftoff:
  7627 00005F05 C605[575E0000]00    <2> 		mov byte [uppercase], 0
  7628 00005F0C C3                  <2> 		ret
  7629                              <2> 	ctron:
  7630 00005F0D C605[795F0000]01    <2> 		mov byte [ctrkey], 1
  7631 00005F14 C3                  <2> 		ret
  7632                              <2> 	ctroff:
  7633 00005F15 C605[795F0000]00    <2> 		mov byte [ctrkey], 0
  7634 00005F1C C3                  <2> 		ret
  7635                              <2> 	alton:
  7636 00005F1D C605[785F0000]01    <2> 		mov byte [altkey], 1
  7637 00005F24 C3                  <2> 		ret
  7638                              <2> 	altoff:
  7639 00005F25 C605[785F0000]00    <2> 		mov byte [altkey], 0
  7640 00005F2C C3                  <2> 		ret
  7641                              <2> 	entdown:
  7642 00005F2D C3                  <2> 		ret
  7643                              <2> 	scanfound:
  7644 00005F2E 81C704000000        <2> 		add edi, 4
  7645 00005F34 803D[795F0000]01    <2> 		cmp byte [ctrkey], 1
  7646 00005F3B 731B                <2> 		jae altin
  7647 00005F3D 81EF04000000        <2> 		sub edi, 4
  7648 00005F43 81C702000000        <2> 		add edi, 2
  7649 00005F49 803D[785F0000]01    <2> 		cmp byte [altkey], 1
  7650 00005F50 7306                <2> 		jae altin
  7651 00005F52 81EF02000000        <2> 		sub edi, 2
  7652                              <2> altin:
  7653 00005F58 81C701000000        <2> 		add edi, 1
  7654 00005F5E 803D[575E0000]01    <2> 		cmp byte [uppercase], 1
  7655 00005F65 7306                <2> 		jae uppercaseon
  7656 00005F67 81EF01000000        <2> 		sub edi, 1
  7657                              <2> uppercaseon:
  7658 00005F6D 8A07                <2> 		mov al,[edi]
  7659 00005F6F A2[79220000]        <2> 		mov [lastkey], al
  7660 00005F74 C3                  <2> 		ret
  7661                              <2> 		
  7662 00005F75 00                  <2> keyboardstatus db 0
  7663 00005F76 00                  <2> numlockstatus db 0
  7664 00005F77 00                  <2> scrolllockstatus db 0
  7665 00005F78 00                  <2> altkey db 0
  7666 00005F79 00                  <2> ctrkey db 0
  7667                              <2> 	capslock:
  7668 00005F7A 8035[755F0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7669 00005F81 E835000000          <2> 		call updatekblights
  7670 00005F86 E969FFFFFF          <2> 		jmp shift
  7671                              <2> 		
  7672                              <2> 	numlock:
  7673 00005F8B 8035[755F0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7674 00005F92 8035[765F0000]01    <2> 		xor byte [numlockstatus], 1
  7675 00005F99 E81D000000          <2> 		call updatekblights
  7676 00005F9E E969FEFFFF          <2> 		jmp getkey
  7677                              <2> 	
  7678                              <2> 	scrolllock:
  7679 00005FA3 8035[755F0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7680 00005FAA 8035[775F0000]01    <2> 		xor byte [scrolllockstatus], 1
  7681 00005FB1 E805000000          <2> 		call updatekblights
  7682 00005FB6 E951FEFFFF          <2> 		jmp getkey
  7683                              <2> 		
  7684                              <2> 	updatekblights:
  7685 00005FBB B0ED                <2> 		mov al, 0xED
  7686 00005FBD 66BA6000            <2> 		mov dx, 0x60
  7687 00005FC1 EE                  <2> 		out dx, al
  7688                              <2> 	chkkbdack:
  7689 00005FC2 EC                  <2> 		in al, dx
  7690 00005FC3 3CFA                <2> 		cmp al, 0xFA
  7691 00005FC5 75FB                <2> 		jne chkkbdack
  7692 00005FC7 A0[755F0000]        <2> 		mov al, [keyboardstatus]
  7693 00005FCC EE                  <2> 		out dx, al
  7694 00005FCD C3                  <2> 		ret
  7695                              <2> 		
  7696                              <2> scancode:
  7697                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY
  7698 00005FCE 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7699 00005FD4 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7700 00005FDA 3121AD130000        <2> 	db '1','!',0xAD,0x13,0,0	;2h
  7701 00005FE0 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7702 00005FE6 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7703 00005FEC 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7704 00005FF2 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7705 00005FF8 365EACFC0000        <2> 	db '6','^',0xAC,0xFC,0,0	;7h
  7706 00005FFE 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7707 00006004 382AEC070000        <2> 	db '8','*',0xEC,0x7,0,0		;9h
  7708 0000600A 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7709 00006010 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7710 00006016 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7711 0000601C 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7712 00006022 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7713 00006028 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7714 0000602E 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7715 00006034 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7716 0000603A 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7717 00006040 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7718 00006046 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7719 0000604C 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7720 00006052 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7721 00006058 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7722 0000605E 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7723 00006064 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7724 0000606A 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7725 00006070 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7726 00006076 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7727 0000607C 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7728 00006082 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7729 00006088 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7730 0000608E 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7731 00006094 66469F0CEDE8        <2> 	db 'f','F',159,0xC,237,232	;21h
  7732 0000609A 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7733 000060A0 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7734 000060A6 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7735 000060AC 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7736 000060B2 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7737 000060B8 3B3A14DC0000        <2> 	db ';',':',20,0xDC,0,0			;27h
  7738 000060BE 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7739 000060C4 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7740 000060CA 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7741 000060D0 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7742 000060D6 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7743 000060DC 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7744 000060E2 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7745 000060E8 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7746 000060EE 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7747 000060F4 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7748 000060FA 6D4D0E0BE64D        <2> 	db 'm','M',0xE,0xB,230,'M'		;32h
  7749 00006100 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7750 00006106 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7751 0000610C 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7752 00006112 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7753 00006118 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7754 0000611E 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7755 00006124 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7756                              <2> noscan:
  7757                              <2> 
  7758                              <1> %endif
  7759                              <1> ;drivers will soon be handled intelligently
  7760                              <1> ;every driver's source will be scanned for a .init function
  7761                              <1> ;that will be called and if it returns 0
  7762                              <1> ;the hardware was found and the driver initialized properly
  7763                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7764                              <1> 	%ifdef sound.included
  7765 0000612A E886FAFFFF          <1> 		call sblaster.init
  7766                              <1> 	%endif
  7767                              <1> 	%ifdef network.included
  7768 0000612F E8FA220000          <1> 		call network.init
  7769                              <1> 	%endif
  7770 00006134 C3                  <1> 	ret
  7771                              <1> initialize:
  7772                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7773 00006135 E814000000          <1> 	call .pic
  7774                              <1> %ifdef terminal.vsync
  7775                              <1> 	call .rtc
  7776                              <1> %endif
  7777 0000613A E871000000          <1> 	call .pit
  7778 0000613F E893000000          <1> 	call .fpu
  7779 00006144 E8A4000000          <1> 	call .sse
  7780 00006149 31C0                <1> 	xor eax, eax
  7781 0000614B 31C9                <1> 	xor ecx, ecx
  7782                              <1> %ifdef io.serial
  7783                              <1> 	call serial.init
  7784                              <1> %endif
  7785 0000614D C3                  <1> 	ret
  7786                              <1> 	
  7787                              <1> .pic:
  7788 0000614E B011                <1> 	mov al, 0x11
  7789 00006150 E620                <1> 	out 0x20, al
  7790 00006152 E6A0                <1> 	out 0xA0, al
  7791 00006154 B040                <1> 	mov al, 0x40	;interrupt for master
  7792 00006156 E621                <1> 	out 0x21, al
  7793 00006158 B048                <1> 	mov al, 0x48	;interrupt for slave
  7794 0000615A E6A1                <1> 	out 0xA1, al
  7795 0000615C B004                <1> 	mov al, 4
  7796 0000615E E621                <1> 	out 0x21, al
  7797 00006160 B002                <1> 	mov al, 2
  7798 00006162 E6A1                <1> 	out 0xA1, al
  7799 00006164 B001                <1> 	mov al, 0x1
  7800 00006166 E621                <1> 	out 0x21, al
  7801 00006168 B001                <1> 	mov al, 0x1
  7802 0000616A E6A1                <1> 	out 0xA1, al
  7803                              <1> 	;masks are set to zero so as not to mask
  7804 0000616C 30C0                <1> 	xor al, al
  7805 0000616E E621                <1> 	out 0x21, al
  7806 00006170 30C0                <1> 	xor al, al
  7807 00006172 E6A1                <1> 	out 0xA1, al
  7808 00006174 B020                <1> 	mov al, 0x20
  7809 00006176 E6A0                <1> 	out 0xA0, al
  7810 00006178 E620                <1> 	out 0x20, al
  7811 0000617A C3                  <1> 	ret
  7812                              <1> .rtc:
  7813 0000617B B008                <1> 	mov al, 0x8
  7814 0000617D 88C4                <1> 	mov ah, al
  7815 0000617F 66BA7000            <1> 	mov dx, 0x70
  7816 00006183 EE                  <1> 	out dx, al
  7817 00006184 6642                <1> 	inc dx
  7818 00006186 EC                  <1> 	in al, dx
  7819 00006187 86C4                <1> 	xchg al, ah
  7820 00006189 664A                <1> 	dec dx
  7821 0000618B EE                  <1> 	out dx, al
  7822 0000618C 6642                <1> 	inc dx
  7823 0000618E 86C4                <1> 	xchg al, ah
  7824 00006190 0C40                <1> 	or al, 0x40
  7825 00006192 EE                  <1> 	out dx, al
  7826                              <1> 	
  7827 00006193 B00A                <1> 	mov al, 0xA
  7828 00006195 664A                <1> 	dec dx
  7829 00006197 EE                  <1> 	out dx, al
  7830 00006198 86C4                <1> 	xchg al, ah
  7831 0000619A 6642                <1> 	inc dx
  7832 0000619C EC                  <1> 	in al, dx
  7833 0000619D 24F0                <1> 	and al, 0xF0
  7834 0000619F 0A05[1B030000]      <1> 	or al, [rtcrate]
  7835 000061A5 86C4                <1> 	xchg al, ah
  7836 000061A7 664A                <1> 	dec dx
  7837 000061A9 EE                  <1> 	out dx, al
  7838 000061AA 6642                <1> 	inc dx
  7839 000061AC 86C4                <1> 	xchg al, ah
  7840 000061AE EE                  <1> 	out dx, al
  7841 000061AF C3                  <1> 	ret
  7842                              <1> 	
  7843                              <1> .pit:
  7844                              <1> 	;initialize the PIT
  7845 000061B0 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7846 000061B6 E640                <1> 	out 0x40, al
  7847 000061B8 66C1C008            <1> 	rol ax, 8
  7848 000061BC E640                <1> 	out 0x40, al
  7849                              <1> 	;enable rtc interrupt
  7850 000061BE B00B                <1> 	mov al, 0xB
  7851 000061C0 E670                <1> 	out 0x70, al
  7852 000061C2 66C1C008            <1> 	rol ax, 8
  7853 000061C6 E471                <1> 	in al, 0x71
  7854 000061C8 66C1C008            <1> 	rol ax, 8
  7855 000061CC E670                <1> 	out 0x70, al
  7856 000061CE 66C1C008            <1> 	rol ax, 8
  7857 000061D2 0C40                <1> 	or al, 0x40
  7858 000061D4 E671                <1> 	out 0x71, al
  7859 000061D6 C3                  <1> 	ret
  7860                              <1> .fpu:
  7861                              <1> 	;And now to initialize the fpu
  7862 000061D7 0F20E0              <1> 	mov eax, cr4
  7863 000061DA 0D00020000          <1> 	or eax, 0x200
  7864 000061DF 0F22E0              <1> 	mov cr4, eax
  7865 000061E2 B87F0B0000          <1> 	mov eax, 0xB7F
  7866 000061E7 50                  <1> 	push eax
  7867 000061E8 D92C24              <1> 	fldcw [esp]
  7868 000061EB 58                  <1> 	pop eax
  7869 000061EC C3                  <1> 	ret
  7870                              <1> 	
  7871                              <1> .sse:
  7872 000061ED 0F20C0              <1> 	mov eax, cr0
  7873 000061F0 24FB                <1> 	and al, 11111011b
  7874 000061F2 0C02                <1> 	or al, 00000010b
  7875 000061F4 0F22C0              <1> 	mov cr0, eax
  7876 000061F7 0F20E0              <1> 	mov eax, cr4
  7877 000061FA 660D0006            <1> 	or ax, 0000011000000000b
  7878 000061FE 0F22E0              <1> 	mov cr4, eax
  7879 00006201 C3                  <1> 	ret
  7880                                      %include "source/pci.asm"
  7881 00006202 00                  <1> pcibus		db 0
  7882 00006203 00                  <1> pcidevice	db 0
  7883 00006204 00                  <1> pcifunction	db 0
  7884 00006205 00                  <1> pciregister	db 0
  7885 00006206 00                  <1> pcireqtype	db 0
  7886 00006207 00000000            <1> pcidevid	dd 0
  7887 0000620B FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7888                              <1> getpcimem:
  7889 0000620F B002                <1> 	mov al, 2
  7890 00006211 A2[06620000]        <1> 	mov [pcireqtype], al
  7891 00006216 E922000000          <1> 	jmp searchpci
  7892                              <1> getpciport:
  7893 0000621B B001                <1> 	mov al, 1
  7894 0000621D A2[06620000]        <1> 	mov [pcireqtype], al
  7895 00006222 E916000000          <1> 	jmp searchpci
  7896                              <1> pcidump:
  7897 00006227 31C0                <1> 	xor eax, eax
  7898 00006229 A2[04620000]        <1> 	mov [pcifunction], al
  7899 0000622E A2[02620000]        <1> 	mov [pcibus], al
  7900 00006233 A2[03620000]        <1> 	mov [pcidevice], al
  7901 00006238 A2[06620000]        <1> 	mov [pcireqtype], al
  7902                              <1> searchpci:		;;return in ebx, start X in pciX
  7903 0000623D 30C0                <1> 	xor al, al
  7904 0000623F A2[05620000]        <1> 	mov [pciregister], al
  7905 00006244 E817020000          <1> 	call getpciaddr
  7906 00006249 BAF80C0000          <1> 	mov edx, 0xCF8
  7907 0000624E EF                  <1> 	out dx, eax	;;request pci config
  7908 0000624F BAFC0C0000          <1> 	mov edx, 0xCFC
  7909 00006254 ED                  <1> 	in eax, dx 	;;read in pci config
  7910 00006255 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7911 0000625A 0F8237000000        <1> 	jb near checkpcidevice
  7912                              <1> searchpciret:
  7913                              <1> nextpcidevice:
  7914 00006260 30C0                <1> 	xor al, al
  7915 00006262 A2[04620000]        <1> 	mov [pcifunction], al
  7916 00006267 A0[03620000]        <1> 	mov al, [pcidevice]
  7917 0000626C 3C1F                <1> 	cmp al, 11111b
  7918 0000626E 0F8300010000        <1> 	jae near nextpcibus
  7919 00006274 FEC0                <1> 	inc al
  7920 00006276 A2[03620000]        <1> 	mov [pcidevice], al
  7921 0000627B EBC0                <1> 	jmp searchpci
  7922 0000627D A0[04620000]        <1> 	mov al, [pcifunction]
  7923 00006282 3C07                <1> 	cmp al, 111b
  7924 00006284 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7925 0000628A FEC0                <1> 	inc al
  7926 0000628C A2[04620000]        <1> 	mov [pcifunction], al
  7927 00006291 EBAA                <1> 	jmp searchpci
  7928 00006293 00000000            <1> pcitype: db 0,0,0,0
  7929                              <1> checkpcidevice:
  7930 00006297 31C0                <1> 	xor eax, eax
  7931 00006299 3905[07620000]      <1> 	cmp [pcidevid], eax
  7932 0000629F 0F8430000000        <1> 	je near .good
  7933 000062A5 A2[05620000]        <1> 	mov [pciregister], al	;device id, vendor id
  7934 000062AA E8B1010000          <1> 	call getpciaddr
  7935 000062AF BAF80C0000          <1> 	mov edx, 0xCF8
  7936 000062B4 EF                  <1> 	out dx, eax
  7937 000062B5 BAFC0C0000          <1> 	mov edx, 0xCFC
  7938 000062BA ED                  <1> 	in eax, dx
  7939 000062BB 2305[0B620000]      <1> 	and eax, [pcidevidmask]
  7940 000062C1 8B1D[07620000]      <1> 	mov ebx, [pcidevid]
  7941 000062C7 231D[0B620000]      <1> 	and ebx, [pcidevidmask]
  7942 000062CD 39D8                <1> 	cmp eax, ebx
  7943 000062CF 0F858BFFFFFF        <1> 	jne near searchpciret
  7944                              <1> .good:
  7945 000062D5 30C0                <1> 	xor al, al
  7946 000062D7 3805[06620000]      <1> 	cmp [pcireqtype], al
  7947 000062DD 0F842C000000        <1> 	je near dumppcidevice
  7948 000062E3 B008                <1> 	mov al, 0x08
  7949 000062E5 A2[05620000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7950 000062EA E871010000          <1> 	call getpciaddr
  7951 000062EF BAF80C0000          <1> 	mov edx, 0xCF8
  7952 000062F4 EF                  <1> 	out dx, eax
  7953 000062F5 BAFC0C0000          <1> 	mov edx, 0xCFC
  7954 000062FA ED                  <1> 	in eax, dx
  7955 000062FB C1C008              <1> 	rol eax, 8
  7956 000062FE 3A05[93620000]      <1> 	cmp al, [pcitype]
  7957 00006304 0F84A0000000        <1> 	je near foundpciaddr
  7958 0000630A E951FFFFFF          <1> 	jmp searchpciret
  7959                              <1> dumppcidevice:
  7960 0000630F 30C0                <1> 	xor al, al
  7961 00006311 A2[05620000]        <1> 	mov [pciregister], al
  7962 00006316 E845010000          <1> 	call getpciaddr
  7963 0000631B 89C1                <1> 	mov ecx, eax
  7964 0000631D C605[32300000]05    <1> 	mov byte [firsthexshown], 5
  7965 00006324 E81ECDFFFF          <1> 	call showhex
  7966                              <1> dumppcidevicelp:
  7967 00006329 A2[05620000]        <1> 	mov [pciregister], al
  7968 0000632E E82D010000          <1> 	call getpciaddr
  7969 00006333 BAF80C0000          <1> 	mov edx, 0xCF8
  7970 00006338 EF                  <1> 	out dx, eax
  7971 00006339 BAFC0C0000          <1> 	mov edx, 0xCFC
  7972 0000633E ED                  <1> 	in eax, dx
  7973 0000633F 89C1                <1> 	mov ecx, eax
  7974 00006341 A0[05620000]        <1> 	mov al, [pciregister]
  7975 00006346 0404                <1> 	add al, 4
  7976 00006348 C605[32300000]05    <1> 	mov byte [firsthexshown], 5
  7977 0000634F E8F3CCFFFF          <1> 	call showhex
  7978 00006354 3C3C                <1> 	cmp al, 0x3C
  7979 00006356 72D1                <1> 	jb dumppcidevicelp
  7980                              <1> dumppcidn:
  7981                              <1> %ifdef io.serial
  7982                              <1> 	mov esi, line
  7983                              <1> 	call print
  7984                              <1> %else
  7985 00006358 803D[77240000]00    <1> 	cmp byte [charpos], 0
  7986 0000635F 0F84FBFEFFFF        <1> 	je near searchpciret
  7987 00006365 BE[458D0000]        <1> 	mov esi, line
  7988 0000636A E8EEB9FFFF          <1> 	call print
  7989                              <1> %endif
  7990 0000636F E9ECFEFFFF          <1> 	jmp searchpciret
  7991                              <1> nextpcibus:
  7992 00006374 30C0                <1> 	xor al, al
  7993 00006376 A2[03620000]        <1> 	mov [pcidevice], al
  7994 0000637B A0[02620000]        <1> 	mov al, [pcibus]
  7995 00006380 3C7F                <1> 	cmp al, 1111111b
  7996 00006382 730C                <1> 	jae donesearchpci
  7997 00006384 FEC0                <1> 	inc al
  7998 00006386 A2[02620000]        <1> 	mov [pcibus], al
  7999 0000638B E9ADFEFFFF          <1> 	jmp searchpci
  8000                              <1> donesearchpci:
  8001 00006390 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8002 00006395 31D2                <1> 	xor edx, edx
  8003 00006397 8815[93620000]      <1> 	mov [pcitype], dl
  8004 0000639D 8915[07620000]      <1> 	mov [pcidevid], edx
  8005 000063A3 891D[0B620000]      <1> 	mov [pcidevidmask], ebx
  8006 000063A9 C3                  <1> 	ret
  8007                              <1> foundpciaddr:
  8008 000063AA B010                <1> 	mov al, 0x10
  8009 000063AC A2[05620000]        <1> 	mov [pciregister], al
  8010 000063B1 803D[06620000]02    <1> 	cmp byte [pcireqtype], 2
  8011 000063B8 7443                <1> 	je findpcimemaddr
  8012                              <1> findpciioaddr:
  8013 000063BA E8A1000000          <1> 	call getpciaddr
  8014 000063BF BAF80C0000          <1> 	mov edx, 0xCF8
  8015 000063C4 EF                  <1> 	out dx, eax
  8016 000063C5 BAFC0C0000          <1> 	mov edx, 0xCFC
  8017 000063CA ED                  <1> 	in eax, dx
  8018 000063CB 89C3                <1> 	mov ebx, eax
  8019 000063CD 81E301000000        <1> 	and ebx, 1
  8020 000063D3 81FB00000000        <1> 	cmp ebx, 0
  8021 000063D9 0F8468000000        <1> 	je near notpciioaddr
  8022 000063DF 2D01000000          <1> 	sub eax, 1
  8023 000063E4 89C2                <1> 	mov edx, eax
  8024 000063E6 31DB                <1> 	xor ebx, ebx
  8025 000063E8 4B                  <1> 	dec ebx
  8026 000063E9 891D[0B620000]      <1> 	mov [pcidevidmask], ebx
  8027 000063EF 43                  <1> 	inc ebx
  8028 000063F0 881D[93620000]      <1> 	mov [pcitype], bl
  8029 000063F6 891D[07620000]      <1> 	mov [pcidevid], ebx
  8030 000063FC C3                  <1> 	ret
  8031                              <1> findpcimemaddr:
  8032 000063FD E85E000000          <1> 	call getpciaddr
  8033 00006402 BAF80C0000          <1> 	mov edx, 0xCF8
  8034 00006407 EF                  <1> 	out dx, eax
  8035 00006408 BAFC0C0000          <1> 	mov edx, 0xCFC
  8036 0000640D ED                  <1> 	in eax, dx
  8037 0000640E 89C3                <1> 	mov ebx, eax
  8038 00006410 81E301000000        <1> 	and ebx, 1
  8039 00006416 81FB01000000        <1> 	cmp ebx, 1
  8040 0000641C 0F8425000000        <1> 	je near notpciioaddr
  8041 00006422 89C2                <1> 	mov edx, eax
  8042 00006424 50                  <1> 	push eax
  8043 00006425 A1[41020000]        <1> 	mov eax, [basecache]
  8044 0000642A C1E004              <1> 	shl eax, 4
  8045 0000642D 29C2                <1> 	sub edx, eax
  8046 0000642F 58                  <1> 	pop eax
  8047 00006430 31DB                <1> 	xor ebx, ebx
  8048 00006432 4B                  <1> 	dec ebx
  8049 00006433 891D[0B620000]      <1> 	mov [pcidevidmask], ebx
  8050 00006439 43                  <1> 	inc ebx
  8051 0000643A 881D[93620000]      <1> 	mov [pcitype], bl
  8052 00006440 891D[07620000]      <1> 	mov [pcidevid], ebx
  8053 00006446 C3                  <1> 	ret
  8054                              <1> notpciioaddr:
  8055 00006447 A0[05620000]        <1> 	mov al, [pciregister]
  8056 0000644C 0404                <1> 	add al, 4
  8057 0000644E 3C28                <1> 	cmp al, 0x28
  8058 00006450 0F870AFEFFFF        <1> 	ja near searchpciret
  8059 00006456 A2[05620000]        <1> 	mov [pciregister], al
  8060 0000645B E95AFFFFFF          <1> 	jmp findpciioaddr
  8061                              <1> getpciaddr:		;;puts it in eax and ebx
  8062 00006460 31C0                <1> 			xor eax, eax
  8063 00006462 BB00000080          <1> 			mov ebx, 0x80000000
  8064 00006467 A0[02620000]        <1> 			mov al, [pcibus]
  8065 0000646C C1E010              <1> 			shl eax, 16
  8066 0000646F 01C3                <1> 			add ebx, eax
  8067 00006471 31C0                <1> 			xor eax, eax
  8068 00006473 A0[03620000]        <1> 			mov al, [pcidevice]
  8069 00006478 C1E00B              <1> 			shl eax, 11
  8070 0000647B 01C3                <1> 			add ebx, eax
  8071 0000647D 31C0                <1> 			xor eax, eax
  8072 0000647F A0[04620000]        <1> 			mov al, [pcifunction]
  8073 00006484 C1E008              <1> 			shl eax, 8
  8074 00006487 01C3                <1> 			add ebx, eax
  8075 00006489 31C0                <1> 			xor eax, eax
  8076 0000648B A0[05620000]        <1> 			mov al, [pciregister]
  8077 00006490 01C3                <1> 			add ebx, eax
  8078 00006492 89D8                <1> 			mov eax, ebx
  8079 00006494 C3                  <1> 			ret
  8080                                      %include "source/disk.asm"
  8081                              <1> %ifdef disk.real
  8082                              <1> 	%include "source/drivers/disk/realmode.asm"
  8083                              <2> diskr:
  8084                              <2> 			;read from disk using real mode-it does not work with large files
  8085                              <2> 			;sector count in cl
  8086                              <2> 			;disk number in ch
  8087                              <2> 			;48 bit address with last 32 bits in ebx
  8088                              <2> 			;buffer in esi
  8089                              <2> 			;puts end of buffer in edi and end lba address in edx
  8090 00006495 880D[C2640000]      <2> 	mov [sdlength], cl
  8091 0000649B 891D[C3640000]      <2> 	mov [sdaddress], ebx
  8092 000064A1 8935[21660000]      <2> 	mov [oldesireal], esi
  8093 000064A7 66BE[C764]          <2> 	mov si, readdiskreal
  8094 000064AB 668935[080D0000]    <2> 	mov [realmodeptr], si
  8095 000064B2 BE[03650000]        <2> 	mov esi, backfromrealread
  8096 000064B7 8935[040D0000]      <2> 	mov [realmodereturn], esi
  8097 000064BD E92BA7FFFF          <2> 	jmp realmode
  8098 000064C2 00                  <2> sdlength db 0
  8099 000064C3 00000000            <2> sdaddress dd 0
  8100                              <2> 
  8101                              <2> [BITS 16]
  8102                              <2> readdiskreal:
  8103 000064C7 C706[F364]1000      <2> 	mov word [dlen], 0x10
  8104 000064CD C706[F764]0000      <2> 	mov word [daddress], 0
  8105 000064D3 C706[F964]0001      <2> 	mov word [dsegm], 0x100
  8106 000064D9 66891E[FB64]        <2> 	mov [dlbaad], ebx
  8107 000064DE 880E[F564]          <2> 	mov [dreadlen], cl
  8108                              <2> ReadHardDisk:
  8109 000064E2 BE[F364]            <2> 	mov si, diskaddresspacket
  8110 000064E5 31C0                <2> 	xor ax, ax
  8111 000064E7 B442                <2> 	mov ah, 0x42
  8112 000064E9 8A16[F264]          <2> 	mov dl, [dnumber]
  8113 000064ED CD13                <2> 	int 0x13
  8114 000064EF 72F1                <2> 	jc ReadHardDisk
  8115 000064F1 C3                  <2> 	ret
  8116                              <2> 
  8117 000064F2 80                  <2> dnumber db 0x80
  8118                              <2> diskaddresspacket:
  8119 000064F3 10                  <2> dlen:	db 0x10 ;size of packet
  8120 000064F4 00                  <2> 		db 0
  8121 000064F5 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8122 000064F7 0000                <2> daddress:	dw 0	;address 0
  8123 000064F9 0001                <2> dsegm:		dw 0x100	;segment
  8124                              <2> 		;start with known value for hd
  8125                              <2> dlbaad:
  8126 000064FB 00000000            <2> 	dd 0	;lba address
  8127 000064FF 00000000            <2> 	dd 0
  8128                              <2> [BITS 32]
  8129                              <2> backfromrealread:
  8130 00006503 8B35[21660000]      <2> 	mov esi, [oldesireal]
  8131 00006509 8B1D[C3640000]      <2> 	mov ebx, [sdaddress]
  8132 0000650F 31C9                <2> 	xor ecx, ecx
  8133 00006511 8A0D[C2640000]      <2> 	mov cl, [sdlength]
  8134 00006517 01CB                <2> 	add ebx, ecx
  8135 00006519 66B80800            <2> 	mov ax, LINEAR_SEL
  8136 0000651D 8EE0                <2> 	mov fs, ax
  8137 0000651F BF00100000          <2> 	mov edi, 0x1000
  8138 00006524 B200                <2> 	mov dl, 0
  8139 00006526 D0E1                <2> 	shl cl, 1
  8140                              <2> copyfromrmodedisk:
  8141 00006528 648A07              <2> 	mov al, [fs:edi]
  8142 0000652B 8806                <2> 	mov [esi], al
  8143 0000652D 47                  <2> 	inc edi
  8144 0000652E 46                  <2> 	inc esi
  8145 0000652F FECA                <2> 	dec dl
  8146 00006531 80FA00              <2> 	cmp dl, 0
  8147 00006534 75F2                <2> 	jne copyfromrmodedisk
  8148 00006536 FEC9                <2> 	dec cl
  8149 00006538 B200                <2> 	mov dl, 0
  8150 0000653A 80F900              <2> 	cmp cl, 0
  8151 0000653D 75E9                <2> 	jne copyfromrmodedisk
  8152 0000653F 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8153 00006543 8EE0                <2> 	mov fs, ax
  8154 00006545 89F7                <2> 	mov edi, esi
  8155 00006547 8B35[21660000]      <2> 	mov esi, [oldesireal]
  8156 0000654D 89DA                <2> 	mov edx, ebx
  8157 0000654F 8B1D[C3640000]      <2> 	mov ebx, [sdaddress]
  8158 00006555 C3                  <2> 	ret
  8159                              <2> 	
  8160                              <1> %else
  8161                              <1> 	%ifdef disk.protected
  8162                              <1> 		%include "source/drivers/disk/pata.asm"
  8163                              <1> 	%endif
  8164                              <1> %endif
  8165                              <1> %ifdef disk.none
  8166                              <1> loadfile:	xor edx, edx
  8167                              <1> 			cmp byte [edi], '&'
  8168                              <1> 			je .ret
  8169                              <1> 			mov edx, 404	;no files are found except &
  8170                              <1> 		.ret:
  8171                              <1> 			ret
  8172                              <1> %else
  8173                              <1> ;This loads files using the methods in the loaded driver
  8174                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8175                              <1> 			;returns with err code in edx and file end in edi
  8176 00006556 803F00              <1> 	cmp byte [edi], 0
  8177 00006559 0F8448000000        <1> 	je near nofileload
  8178 0000655F 89FA                <1> 	mov edx, edi
  8179 00006561 BB[6A9D0000]        <1> 	mov ebx, diskfileindex
  8180                              <1> nextnamechar:
  8181 00006566 8A07                <1> 	mov al, [edi]
  8182 00006568 3C26                <1> 	cmp al, '&'
  8183 0000656A 7440                <1> 	je nullfile
  8184 0000656C 8A23                <1> 	mov ah, [ebx]
  8185 0000656E 47                  <1> 	inc edi
  8186 0000656F 43                  <1> 	inc ebx
  8187 00006570 88C1                <1> 	mov cl, al
  8188 00006572 08E1                <1> 	or cl, ah
  8189 00006574 80F900              <1> 	cmp cl, 0
  8190 00006577 744E                <1> 	je equalfilenames
  8191 00006579 80F920              <1> 	cmp cl, ' '
  8192 0000657C 7449                <1> 	je equalfilenames
  8193 0000657E 3C2A                <1> 	cmp al, '*'
  8194 00006580 742B                <1> 	je equalfilenames2
  8195 00006582 80FC00              <1> 	cmp ah, 0
  8196 00006585 7410                <1> 	je nextfilename
  8197 00006587 3C00                <1> 	cmp al, 0
  8198 00006589 7404                <1> 	je getebxzero
  8199 0000658B 38E0                <1> 	cmp al, ah
  8200 0000658D 74D7                <1> 	je nextnamechar
  8201                              <1> getebxzero:
  8202 0000658F 8A23                <1> 	mov ah, [ebx]
  8203 00006591 43                  <1> 	inc ebx
  8204 00006592 80FC00              <1> 	cmp ah, 0
  8205 00006595 75F8                <1> 	jne getebxzero
  8206                              <1> nextfilename:
  8207 00006597 81C308000000        <1> 	add ebx, 8		;next descriptor
  8208 0000659D 89D7                <1> 	mov edi, edx
  8209 0000659F 81FB[569F0000]      <1> 	cmp ebx, enddiskfileindex
  8210 000065A5 72BF                <1> 	jb nextnamechar
  8211                              <1> nofileload:
  8212 000065A7 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8213                              <1> nullfile:
  8214 000065AC C3                  <1> 	ret
  8215                              <1> equalfilenames2:
  8216 000065AD 81EB02000000        <1> 	sub ebx, 2
  8217                              <1> eqfilefind:
  8218 000065B3 43                  <1> 	inc ebx
  8219 000065B4 81FB[569F0000]      <1> 	cmp ebx, enddiskfileindex
  8220 000065BA 0F83E7FFFFFF        <1> 	jae near nofileload
  8221 000065C0 8A03                <1> 	mov al, [ebx]
  8222 000065C2 3C00                <1> 	cmp al, 0
  8223 000065C4 75ED                <1> 	jne eqfilefind
  8224 000065C6 43                  <1> 	inc ebx
  8225                              <1> equalfilenames:
  8226 000065C7 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8227 000065CA 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8228 000065CC 031D[5A9F0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8229 000065D2 31C9                <1> 	xor ecx, ecx
  8230 000065D4 88C1                <1> 	mov cl, al			;get excess number of sectors
  8231 000065D6 C0E102              <1> 	shl cl, 2
  8232 000065D9 C0E902              <1> 	shr cl, 2			;cut off at 64
  8233 000065DC 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8234 000065DE B500                <1> 	mov ch, 0			;drive 0
  8235 000065E0 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8236                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8237 000065E3 A3[25660000]        <1> 	mov [filetracks], eax
  8238 000065E8 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8239 000065EA 89DA                <1> 	mov edx, ebx
  8240 000065EC 80F900              <1> 	cmp cl, 0
  8241 000065EF 7405                <1> 	je copytracksforfile
  8242 000065F1 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8243                              <1> copytracksforfile:
  8244 000065F6 A1[25660000]        <1> 	mov eax, [filetracks]
  8245 000065FB 3D00000000          <1> 	cmp eax, 0
  8246 00006600 7419                <1> 	je donecopyfile
  8247 00006602 48                  <1> 	dec eax
  8248 00006603 A3[25660000]        <1> 	mov [filetracks], eax
  8249 00006608 89D3                <1> 	mov ebx, edx	;get end lba
  8250 0000660A B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8251 0000660C 8A2D[599F0000]      <1> 	mov ch, [DriveNumber]
  8252 00006612 89FE                <1> 	mov esi, edi	;reset buffer
  8253 00006614 E87CFEFFFF          <1> 	call diskr
  8254 00006619 EBDB                <1> 	jmp copytracksforfile
  8255                              <1> donecopyfile:
  8256 0000661B BA00000000          <1> 	mov edx, 0	;no error
  8257 00006620 C3                  <1> 	ret
  8258                              <1> 
  8259 00006621 00000000            <1> oldesireal dd 0
  8260 00006625 00000000            <1> filetracks dd 0
  8261 00006629 00                  <1> lbad1 db 0
  8262 0000662A 00                  <1> lbad2 db 0
  8263 0000662B 00                  <1> lbad3 db 0
  8264 0000662C 00                  <1> lbad4 db 0
  8265 0000662D 00                  <1> lbad5 db 0
  8266 0000662E 00                  <1> lbad6 db 0
  8267 0000662F 6400                <1> segments dw 100
  8268                              <1> %endif
  8269                                      %include "source/threads.asm"
  8270                              <1> %ifdef threads.included	
  8271                              <1> nwcmdst:
  8272 00006631 31C0                <1> 	xor eax, eax
  8273 00006633 BC[3EB10000]        <1> 	mov esp, stackend
  8274 00006638 A2[F5660000]        <1> 	mov [threadson], al
  8275 0000663D A3[F6660000]        <1> 	mov [currentthread], eax
  8276 00006642 0504000000          <1> 	add eax, 4
  8277 00006647 A3[F1660000]        <1> 	mov [lastthread], eax
  8278 0000664C FB                  <1> 	sti
  8279 0000664D E91BC5FFFF          <1> 	jmp nwcmd
  8280                              <1> 
  8281                              <1> nomorethreadspace:
  8282 00006652 BE[68660000]        <1> 	mov esi, nmts
  8283 00006657 E801B7FFFF          <1> 	call print
  8284 0000665C C605[F5660000]00    <1> 	mov byte [threadson], 0
  8285 00006663 E905C5FFFF          <1> 	jmp nwcmd
  8286 00006668 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8287 00006671 6572666C6F770A00    <1>
  8288                              <1> 
  8289                              <1> nomorestackspace:
  8290 00006679 BE[85660000]        <1> 	mov esi, nmss
  8291 0000667E E8DAB6FFFF          <1> 	call print
  8292 00006683 EBAC                <1> 	jmp nwcmdst
  8293 00006685 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8294 0000668E 72666C6F770A00      <1>
  8295                              <1> 	
  8296                              <1> threadswitch:
  8297 00006695 FA                  <1> 	cli
  8298 00006696 60                  <1> 	pushad
  8299 00006697 BF[A4D80100]        <1> 	mov edi, threadlist
  8300 0000669C A1[F6660000]        <1> 	mov eax, [currentthread]
  8301 000066A1 40                  <1> 	inc eax
  8302 000066A2 A3[F6660000]        <1> 	mov [currentthread], eax
  8303 000066A7 6648                <1> 	dec ax
  8304 000066A9 C1E002              <1> 	shl eax, 2
  8305 000066AC 01C7                <1> 	add edi, eax
  8306 000066AE 8927                <1> 	mov [edi], esp
  8307 000066B0 81C704000000        <1> 	add edi, 4
  8308 000066B6 81FF[A4E80100]      <1> 	cmp edi, threadlistend
  8309 000066BC 0F830D000000        <1> 	jae near nookespthread
  8310 000066C2 8B07                <1> 	mov eax, [edi]
  8311 000066C4 3D00000000          <1> 	cmp eax, 0
  8312 000066C9 0F8519000000        <1> 	jne near okespthread
  8313                              <1> nookespthread:
  8314 000066CF BF[A4D80100]        <1> 	mov edi, threadlist
  8315 000066D4 31C0                <1> 	xor eax, eax
  8316 000066D6 A3[F6660000]        <1> 	mov [currentthread], eax
  8317 000066DB 8B07                <1> 	mov eax, [edi]
  8318 000066DD 3D00000000          <1> 	cmp eax, 0
  8319 000066E2 0F8449FFFFFF        <1> 	je near nwcmdst
  8320                              <1> okespthread:
  8321 000066E8 89C4                <1> 	mov esp, eax
  8322 000066EA B020                <1> 	mov al, 0x20
  8323 000066EC E620                <1> 	out 0x20, al
  8324 000066EE 61                  <1> 	popad
  8325 000066EF FB                  <1> 	sti
  8326 000066F0 CF                  <1> 	iret
  8327                              <1> 
  8328                              <1> %endif
  8329 000066F1 04000000            <1> 	lastthread dd 4
  8330 000066F5 00                  <1> 	threadson db 0
  8331 000066F6 00000000            <1> 	currentthread dd 0
  8332                                  %ifdef gui.included
  8333                                      %include "source/gui/gui.asm"
  8334                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8335 000066FA 31C0                <1> 	xor eax, eax
  8336 000066FC 31DB                <1> 	xor ebx, ebx
  8337 000066FE 31C9                <1> 	xor ecx, ecx
  8338 00006700 31D2                <1> 	xor edx, edx
  8339 00006702 E871080000          <1> 	call guisetup
  8340                              <1> guiloop:
  8341 00006707 E8F2F0FFFF          <1> 	call cursorgui
  8342                              <1> guistart:
  8343 0000670C E8FBF6FFFF          <1> 	call getkey
  8344 00006711 C605[CF7B0000]00    <1> 	mov byte [copygui], 0
  8345 00006718 EBF2                <1> 	jmp guistart
  8346                              <1> 
  8347                              <1> %include "source/gui/bmp.asm"
  8348                              <2> showbmp:
  8349 0000671A 668B06              <2> 	mov ax, [esi]
  8350 0000671D 663D424D            <2> 	cmp ax, "BM"
  8351 00006721 0F85BB000000        <2> 	jne near endedbmp
  8352 00006727 8B3D[21570000]      <2> 	mov edi, [physbaseptr]
  8353 0000672D 6689D0              <2> 	mov ax, dx
  8354 00006730 6689CB              <2> 	mov bx, cx
  8355 00006733 31C9                <2> 	xor ecx, ecx
  8356 00006735 31D2                <2> 	xor edx, edx
  8357 00006737 6689D9              <2> 	mov cx, bx
  8358 0000673A 6689C2              <2> 	mov dx, ax
  8359 0000673D 01D7                <2> 	add edi, edx
  8360 0000673F 01D7                <2> 	add edi, edx
  8361 00006741 31D2                <2> 	xor edx, edx
  8362 00006743 668B15[F9570000]    <2> 	mov dx, [resolutionx2]
  8363 0000674A 034E16              <2> 	add ecx, [esi + 22]
  8364                              <2> bmplocloop:
  8365 0000674D 52                  <2> 	push edx
  8366 0000674E 31C0                <2> 	xor eax, eax
  8367 00006750 6689D0              <2> 	mov ax, dx
  8368 00006753 F7E1                <2> 	mul ecx
  8369 00006755 5A                  <2> 	pop edx
  8370 00006756 663B0D[0D570000]    <2> 	cmp cx, [resolutiony]
  8371 0000675D 7609                <2> 	jbe .nofixy
  8372 0000675F 31C9                <2> 	xor ecx, ecx
  8373 00006761 668B0D[0D570000]    <2> 	mov cx, [resolutiony]
  8374                              <2> .nofixy:
  8375 00006768 01C7                <2> 	add edi, eax
  8376 0000676A 8B5612              <2> 	mov edx, [esi + 18]
  8377 0000676D 8B4E16              <2> 	mov ecx, [esi + 22]
  8378 00006770 8B460A              <2> 	mov eax, [esi + 10]
  8379 00006773 8B5E02              <2> 	mov ebx, [esi + 2]
  8380 00006776 01F3                <2> 	add ebx, esi
  8381 00006778 891D[E8670000]      <2> 	mov [bmpend], ebx
  8382 0000677E 89D3                <2> 	mov ebx, edx
  8383 00006780 01C6                <2> 	add esi, eax
  8384                              <2> ldxbmp2:
  8385 00006782 31D2                <2> 	xor edx, edx
  8386 00006784 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  8387 0000678B 39D3                <2> 	cmp ebx, edx
  8388 0000678D 7702                <2> 	ja ldxbmp
  8389 0000678F 89DA                <2> 	mov edx, ebx
  8390                              <2> ldxbmp:
  8391 00006791 668B06              <2> 	mov ax, [esi]
  8392 00006794 668907              <2> 	mov [edi], ax
  8393 00006797 81C702000000        <2> 	add edi, 2
  8394 0000679D 81C602000000        <2> 	add esi, 2
  8395 000067A3 3B35[E8670000]      <2> 	cmp esi, [bmpend]
  8396 000067A9 7737                <2> 	ja endedbmp
  8397 000067AB 4A                  <2> 	dec edx
  8398 000067AC 81FA00000000        <2> 	cmp edx, 0
  8399 000067B2 77DD                <2> 	ja ldxbmp
  8400 000067B4 31D2                <2> 	xor edx, edx
  8401 000067B6 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  8402 000067BD 39D3                <2> 	cmp ebx, edx
  8403 000067BF 7610                <2> 	jbe .notover
  8404                              <2> .over:
  8405 000067C1 01DE                <2> 	add esi, ebx
  8406 000067C3 01DE                <2> 	add esi, ebx
  8407 000067C5 29D6                <2> 	sub esi, edx
  8408 000067C7 29D6                <2> 	sub esi, edx
  8409 000067C9 01DF                <2> 	add edi, ebx
  8410 000067CB 01DF                <2> 	add edi, ebx
  8411 000067CD 29D7                <2> 	sub edi, edx
  8412 000067CF 29D7                <2> 	sub edi, edx
  8413                              <2> .notover:
  8414 000067D1 29DF                <2> 	sub edi, ebx
  8415 000067D3 29DF                <2> 	sub edi, ebx
  8416 000067D5 29D7                <2> 	sub edi, edx
  8417 000067D7 29D7                <2> 	sub edi, edx
  8418 000067D9 49                  <2> 	dec ecx
  8419 000067DA 81F900000000        <2> 	cmp ecx, 0
  8420 000067E0 77A0                <2> 	ja ldxbmp2
  8421                              <2> endedbmp:
  8422 000067E2 E844030000          <2> 	call switchmousepos2
  8423 000067E7 C3                  <2> 	ret
  8424                              <2> 	
  8425 000067E8 00000000            <2> 	bmpend dd 0
  8426                              <1> %include "source/gui/circle.asm"
  8427                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8428 000067EC 55                  <2> 	push ebp
  8429 000067ED 663D0000            <2> 	cmp ax, 0
  8430 000067F1 770A                <2> 	ja .nozerocircle
  8431 000067F3 E8CC1B0000          <2> 	call putpixel	;the easiest circle ever
  8432 000067F8 E9F7000000          <2> 	jmp .done
  8433                              <2> .nozerocircle:
  8434 000067FD 6689F5              <2> 	mov bp, si
  8435 00006800 6650                <2> 	push ax
  8436 00006802 E8FE1B0000          <2> 	call getpixelmem
  8437 00006807 31C0                <2> 	xor eax, eax
  8438 00006809 6658                <2> 	pop ax
  8439 0000680B BE01000000          <2> 	mov esi, 1
  8440 00006810 29C6                <2> 	sub esi, eax
  8441 00006812 89C1                <2> 	mov ecx, eax
  8442 00006814 31C0                <2> 	xor eax, eax
  8443 00006816 66A1[F9570000]      <2> 	mov ax, [resolutionx2]
  8444 0000681C F7E1                <2> 	mul ecx
  8445 0000681E 50                  <2> 	push eax
  8446 0000681F 31D2                <2> 	xor edx, edx
  8447 00006821 01C7                <2> 	add edi, eax
  8448 00006823 66892F              <2> 	mov [edi], bp
  8449 00006826 29C7                <2> 	sub edi, eax
  8450 00006828 29C7                <2> 	sub edi, eax
  8451 0000682A 66892F              <2> 	mov [edi], bp
  8452 0000682D 01C7                <2> 	add edi, eax
  8453 0000682F D1E1                <2> 	shl ecx, 1
  8454 00006831 01CF                <2> 	add edi, ecx
  8455 00006833 66892F              <2> 	mov [edi], bp
  8456 00006836 D1E1                <2> 	shl ecx, 1
  8457 00006838 29CF                <2> 	sub edi, ecx
  8458 0000683A 66892F              <2> 	mov [edi], bp
  8459 0000683D D1E9                <2> 	shr ecx, 1
  8460 0000683F 01CF                <2> 	add edi, ecx
  8461 00006841 D1E9                <2> 	shr ecx, 1
  8462 00006843 B802000000          <2> 	mov eax, 2
  8463 00006848 F7E1                <2> 	mul ecx
  8464 0000684A 48                  <2> 	dec eax
  8465 0000684B F7D0                <2> 	not eax ;make it negative
  8466 0000684D A3[FA680000]        <2> 	mov [.ddF_y], eax
  8467 00006852 58                  <2> 	pop eax
  8468 00006853 BB01000000          <2> 	mov ebx, 1
  8469 00006858 891D[F6680000]      <2> 	mov [.ddF_x], ebx
  8470 0000685E 4B                  <2> 	dec ebx
  8471 0000685F 31D2                <2> 	xor edx, edx
  8472 00006861 E904000000          <2> 	jmp .lp
  8473                              <2> .lpb:
  8474 00006866 D1EA                <2> 	shr edx, 1
  8475 00006868 D1E9                <2> 	shr ecx, 1
  8476                              <2> .lp:	;it starts this with the center in edi
  8477                              <2> 		;color in bp
  8478                              <2> 		;ddF_x in memory
  8479                              <2> 		;x*resolutionx2 in ebx
  8480                              <2> 		;x in edx
  8481                              <2> 		;ddF_y in memory
  8482                              <2> 		;y*resolutionx2 in eax
  8483                              <2> 		;f in esi
  8484                              <2> 		;y in ecx
  8485 0000686A 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8486 00006870 7717                <2> 	ja	.noddF_y
  8487 00006872 49                  <2> 	dec ecx
  8488 00006873 2B05[F9570000]      <2> 	sub eax, [resolutionx2]
  8489 00006879 8105[FA680000]0200- <2> 	add dword [.ddF_y], 2
  8490 00006881 0000                <2>
  8491 00006883 0335[FA680000]      <2> 	add esi, [.ddF_y]
  8492                              <2> .noddF_y:
  8493 00006889 42                  <2> 	inc edx
  8494 0000688A 031D[F9570000]      <2> 	add ebx, [resolutionx2]
  8495 00006890 8105[F6680000]0200- <2> 	add dword [.ddF_x], 2
  8496 00006898 0000                <2>
  8497 0000689A 0335[F6680000]      <2> 	add esi, [.ddF_x]
  8498                              <2> 
  8499 000068A0 D1E2                <2> 	shl edx, 1
  8500 000068A2 D1E1                <2> 	shl ecx, 1
  8501 000068A4 01D7                <2> 	add edi, edx
  8502 000068A6 01C7                <2> 	add edi, eax
  8503 000068A8 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8504 000068AB D1E2                <2> 	shl edx, 1
  8505 000068AD 29D7                <2> 	sub edi, edx
  8506 000068AF 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8507 000068B2 D1E0                <2> 	shl eax, 1
  8508 000068B4 29C7                <2> 	sub edi, eax
  8509 000068B6 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8510 000068B9 01D7                <2> 	add edi, edx
  8511 000068BB 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8512 000068BE D1E8                <2> 	shr eax, 1
  8513 000068C0 D1EA                <2> 	shr edx, 1
  8514 000068C2 01C7                <2> 	add edi, eax
  8515 000068C4 29D7                <2> 	sub edi, edx
  8516                              <2> 
  8517 000068C6 39D1                <2> 	cmp ecx, edx
  8518 000068C8 749C                <2> 	je .lpb
  8519                              <2> 
  8520 000068CA 01DF                <2> 	add edi, ebx
  8521 000068CC 01CF                <2> 	add edi, ecx
  8522 000068CE 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8523 000068D1 D1E1                <2> 	shl ecx, 1
  8524 000068D3 29CF                <2> 	sub edi, ecx
  8525 000068D5 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8526 000068D8 D1E3                <2> 	shl ebx, 1
  8527 000068DA 29DF                <2> 	sub edi, ebx
  8528 000068DC 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8529 000068DF 01CF                <2> 	add edi, ecx
  8530 000068E1 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8531 000068E4 D1EB                <2> 	shr ebx, 1
  8532 000068E6 D1E9                <2> 	shr ecx, 1
  8533 000068E8 01DF                <2> 	add edi, ebx
  8534 000068EA 29CF                <2> 	sub edi, ecx
  8535 000068EC 39CA                <2> 	cmp edx, ecx
  8536 000068EE 0F8272FFFFFF        <2> 	jb .lpb
  8537                              <2> .done:
  8538 000068F4 5D                  <2> 	pop ebp
  8539 000068F5 C3                  <2> 	ret
  8540                              <2> 	
  8541 000068F6 00000000            <2> .ddF_x dd 0
  8542 000068FA 00000000            <2> .ddF_y dd 0
  8543                              <2> 
  8544                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8545 000068FE 55                  <2> 	push ebp
  8546 000068FF 663D0000            <2> 	cmp ax, 0
  8547 00006903 770A                <2> 	ja .nozerocircle
  8548 00006905 E8BA1A0000          <2> 	call putpixel	;the easiest circle ever
  8549 0000690A E95A010000          <2> 	jmp .done
  8550                              <2> .nozerocircle:
  8551 0000690F 6689F5              <2> 	mov bp, si
  8552 00006912 6650                <2> 	push ax
  8553 00006914 E8EC1A0000          <2> 	call getpixelmem
  8554 00006919 31C0                <2> 	xor eax, eax
  8555 0000691B 6658                <2> 	pop ax
  8556 0000691D BE01000000          <2> 	mov esi, 1
  8557 00006922 29C6                <2> 	sub esi, eax
  8558 00006924 89C1                <2> 	mov ecx, eax
  8559 00006926 31C0                <2> 	xor eax, eax
  8560 00006928 66A1[F9570000]      <2> 	mov ax, [resolutionx2]
  8561 0000692E F7E1                <2> 	mul ecx
  8562 00006930 50                  <2> 	push eax
  8563 00006931 31D2                <2> 	xor edx, edx
  8564 00006933 01C7                <2> 	add edi, eax
  8565 00006935 66892F              <2> 	mov [edi], bp
  8566 00006938 29C7                <2> 	sub edi, eax
  8567 0000693A 29C7                <2> 	sub edi, eax
  8568 0000693C 66892F              <2> 	mov [edi], bp
  8569 0000693F 01C7                <2> 	add edi, eax
  8570 00006941 D1E1                <2> 	shl ecx, 1
  8571 00006943 01CF                <2> 	add edi, ecx
  8572 00006945 51                  <2> 	push ecx
  8573                              <2> .s0:
  8574 00006946 66892F              <2> 	mov [edi], bp
  8575 00006949 81EF02000000        <2> 	sub edi, 2
  8576 0000694F 49                  <2> 	dec ecx
  8577 00006950 81F900000000        <2> 	cmp ecx, 0
  8578 00006956 75EE                <2> 	jne .s0
  8579 00006958 66892F              <2> 	mov [edi], bp
  8580 0000695B 59                  <2> 	pop ecx
  8581 0000695C 01CF                <2> 	add edi, ecx
  8582 0000695E D1E9                <2> 	shr ecx, 1
  8583 00006960 B802000000          <2> 	mov eax, 2
  8584 00006965 F7E1                <2> 	mul ecx
  8585 00006967 48                  <2> 	dec eax
  8586 00006968 F7D0                <2> 	not eax ;make it negative
  8587 0000696A A3[6F6A0000]        <2> 	mov [.ddF_y], eax
  8588 0000696F 58                  <2> 	pop eax
  8589 00006970 BB01000000          <2> 	mov ebx, 1
  8590 00006975 891D[6B6A0000]      <2> 	mov [.ddF_x], ebx
  8591 0000697B 4B                  <2> 	dec ebx
  8592 0000697C 31D2                <2> 	xor edx, edx
  8593 0000697E E904000000          <2> 	jmp .lp
  8594                              <2> .lpb:
  8595 00006983 D1EA                <2> 	shr edx, 1
  8596 00006985 D1E9                <2> 	shr ecx, 1
  8597                              <2> .lp:	;it starts this with the center in edi
  8598                              <2> 		;color in bp
  8599                              <2> 		;ddF_x in memory
  8600                              <2> 		;x*resolutionx2 in ebx
  8601                              <2> 		;x in edx
  8602                              <2> 		;ddF_y in memory
  8603                              <2> 		;y*resolutionx2 in eax
  8604                              <2> 		;f in esi
  8605                              <2> 		;y in ecx
  8606 00006987 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8607 0000698D 7717                <2> 	ja	.noddF_y
  8608 0000698F 49                  <2> 	dec ecx
  8609 00006990 2B05[F9570000]      <2> 	sub eax, [resolutionx2]
  8610 00006996 8105[6F6A0000]0200- <2> 	add dword [.ddF_y], 2
  8611 0000699E 0000                <2>
  8612 000069A0 0335[6F6A0000]      <2> 	add esi, [.ddF_y]
  8613                              <2> .noddF_y:
  8614 000069A6 42                  <2> 	inc edx
  8615 000069A7 031D[F9570000]      <2> 	add ebx, [resolutionx2]
  8616 000069AD 8105[6B6A0000]0200- <2> 	add dword [.ddF_x], 2
  8617 000069B5 0000                <2>
  8618 000069B7 0335[6B6A0000]      <2> 	add esi, [.ddF_x]
  8619                              <2> 
  8620 000069BD D1E2                <2> 	shl edx, 1
  8621 000069BF D1E1                <2> 	shl ecx, 1
  8622 000069C1 52                  <2> 	push edx
  8623 000069C2 29D7                <2> 	sub edi, edx
  8624 000069C4 01C7                <2> 	add edi, eax
  8625 000069C6 81FA00000000        <2> 	cmp edx, 0
  8626 000069CC 7412                <2> 	je .nos1
  8627                              <2> .s1:
  8628 000069CE 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8629 000069D1 81C702000000        <2> 	add edi, 2
  8630 000069D7 4A                  <2> 	dec edx
  8631 000069D8 81FA00000000        <2> 	cmp edx, 0
  8632 000069DE 75EE                <2> 	jne .s1
  8633                              <2> .nos1:
  8634 000069E0 66892F              <2> 	mov [edi], bp
  8635 000069E3 5A                  <2> 	pop edx
  8636 000069E4 52                  <2> 	push edx
  8637 000069E5 29C7                <2> 	sub edi, eax
  8638 000069E7 29C7                <2> 	sub edi, eax
  8639 000069E9 81FA00000000        <2> 	cmp edx, 0
  8640 000069EF 7412                <2> 	je .nos2
  8641                              <2> .s2:
  8642 000069F1 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8643 000069F4 81EF02000000        <2> 	sub edi, 2
  8644 000069FA 4A                  <2> 	dec edx
  8645 000069FB 81FA00000000        <2> 	cmp edx, 0
  8646 00006A01 75EE                <2> 	jne .s2
  8647                              <2> .nos2:
  8648 00006A03 66892F              <2> 	mov [edi], bp
  8649 00006A06 5A                  <2> 	pop edx
  8650 00006A07 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8651 00006A09 01D7                <2> 	add edi, edx
  8652                              <2> 
  8653 00006A0B 39D1                <2> 	cmp ecx, edx
  8654 00006A0D 0F8470FFFFFF        <2> 	je .lpb
  8655                              <2> 
  8656 00006A13 51                  <2> 	push ecx
  8657 00006A14 01DF                <2> 	add edi, ebx
  8658 00006A16 29CF                <2> 	sub edi, ecx
  8659 00006A18 81F900000000        <2> 	cmp ecx, 0
  8660 00006A1E 7412                <2> 	je .nos3
  8661                              <2> .s3:
  8662 00006A20 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8663 00006A23 81C702000000        <2> 	add edi, 2
  8664 00006A29 49                  <2> 	dec ecx
  8665 00006A2A 81F900000000        <2> 	cmp ecx, 0
  8666 00006A30 75EE                <2> 	jne .s3
  8667                              <2> .nos3:
  8668 00006A32 66892F              <2> 	mov [edi], bp
  8669 00006A35 59                  <2> 	pop ecx
  8670 00006A36 51                  <2> 	push ecx
  8671 00006A37 29DF                <2> 	sub edi, ebx
  8672 00006A39 29DF                <2> 	sub edi, ebx
  8673 00006A3B 81F900000000        <2> 	cmp ecx, 0
  8674 00006A41 7412                <2> 	je .nos4
  8675                              <2> .s4:
  8676 00006A43 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8677 00006A46 81EF02000000        <2> 	sub edi, 2
  8678 00006A4C 49                  <2> 	dec ecx
  8679 00006A4D 81F900000000        <2> 	cmp ecx, 0
  8680 00006A53 75EE                <2> 	jne .s4
  8681                              <2> .nos4:
  8682 00006A55 66892F              <2> 	mov [edi], bp
  8683 00006A58 59                  <2> 	pop ecx
  8684 00006A59 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8685 00006A5B 01CF                <2> 	add edi, ecx
  8686                              <2> 
  8687 00006A5D D1EA                <2> 	shr edx, 1
  8688 00006A5F D1E9                <2> 	shr ecx, 1
  8689 00006A61 39CA                <2> 	cmp edx, ecx
  8690 00006A63 0F821EFFFFFF        <2> 	jb .lp
  8691                              <2> .done:
  8692 00006A69 5D                  <2> 	pop ebp
  8693 00006A6A C3                  <2> 	ret
  8694                              <2> 	
  8695 00006A6B 00000000            <2> .ddF_x dd 0
  8696 00006A6F 00000000            <2> .ddF_y dd 0
  8697                              <1> %include "source/gui/cursor.asm"
  8698                              <2> clearmousecursor:
  8699 00006A73 BE[DB6D0000]        <2> 		mov esi, background
  8700 00006A78 8B3D[21570000]      <2> 		mov edi, [physbaseptr]
  8701 00006A7E 31D2                <2> 		xor edx, edx
  8702 00006A80 31C9                <2> 		xor ecx, ecx
  8703 00006A82 668B15[EB590000]    <2> 		mov dx, [lastmouseposition]
  8704 00006A89 668B0D[ED590000]    <2> 		mov cx, [lastmouseposition + 2]
  8705 00006A90 01D7                <2> 		add edi, edx
  8706 00006A92 31D2                <2> 		xor edx, edx
  8707 00006A94 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  8708 00006A9B 81F900000000        <2> 		cmp ecx, 0
  8709 00006AA1 7408                <2> 		je .nomul
  8710 00006AA3 52                  <2> 		push edx
  8711 00006AA4 89D0                <2> 		mov eax, edx
  8712 00006AA6 F7E1                <2> 		mul ecx
  8713 00006AA8 01C7                <2> 		add edi, eax
  8714 00006AAA 5A                  <2> 		pop edx
  8715                              <2> .nomul:
  8716                              <2> %ifdef 	gui.background
  8717                              <2> 		cmp dword [backgroundimage], 0
  8718                              <2> 		je .noyclr
  8719                              <2> 		mov esi, [backgroundimage]
  8720                              <2> 		sub edi, [physbaseptr]
  8721                              <2> 		add esi, edi
  8722                              <2> 		add edi, [physbaseptr]
  8723                              <2> .backlp:
  8724                              <2> 		xor ebx, ebx
  8725                              <2> .noyback:
  8726                              <2> 		mov eax, [esi + ebx]
  8727                              <2> 		mov [edi + ebx], eax
  8728                              <2> 		add ebx, 4
  8729                              <2> 		cmp ebx, 16
  8730                              <2> 		jne .noyback
  8731                              <2> 		add edi, edx
  8732                              <2> 		add esi, edx
  8733                              <2> 		inc cx
  8734                              <2> 		cmp cx, 16
  8735                              <2> 		jb .backlp
  8736                              <2> 		ret
  8737                              <2> %endif
  8738                              <2> .noyclr:
  8739 00006AAB 668B06              <2> 		mov ax, [esi]
  8740 00006AAE C1C010              <2> 		rol eax, 16
  8741 00006AB1 668B06              <2> 		mov ax, [esi]
  8742 00006AB4 8907                <2> 		mov [edi], eax
  8743 00006AB6 894704              <2> 		mov [edi + 4], eax
  8744 00006AB9 894708              <2> 		mov [edi + 8], eax
  8745 00006ABC 89470C              <2> 		mov [edi + 12], eax
  8746 00006ABF 01D7                <2> 		add edi, edx
  8747 00006AC1 6641                <2> 		inc cx
  8748 00006AC3 6681F91000          <2> 		cmp cx, 16
  8749 00006AC8 72E1                <2> 		jb .noyclr
  8750 00006ACA C3                  <2> 		ret
  8751                              <2> 
  8752                              <2> switchmousepos:		;;switch were the mouse is located
  8753 00006ACB BE[37D20000]        <2> 		mov esi, mousecolorbuf
  8754 00006AD0 8B3D[21570000]      <2> 		mov edi, [physbaseptr]
  8755 00006AD6 31D2                <2> 		xor edx, edx
  8756 00006AD8 31C9                <2> 		xor ecx, ecx
  8757 00006ADA 668B15[EB590000]    <2> 		mov dx, [lastmouseposition]
  8758 00006AE1 668B0D[ED590000]    <2> 		mov cx, [lastmouseposition + 2]
  8759 00006AE8 01D7                <2> 		add edi, edx
  8760 00006AEA 31D2                <2> 		xor edx, edx
  8761 00006AEC 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  8762 00006AF3 6681F90000          <2> 		cmp cx, 0
  8763 00006AF8 740B                <2> 		je noswmsy
  8764 00006AFA 01D7                <2> swmsy:		add edi, edx
  8765 00006AFC 6649                <2> 		dec cx
  8766 00006AFE 6681F90000          <2> 		cmp cx, 0
  8767 00006B03 75F5                <2> 		jne swmsy
  8768 00006B05 8B06                <2> noswmsy:	mov eax, [esi]
  8769 00006B07 8B5E04              <2> 		mov ebx, [esi + 4]
  8770 00006B0A 8907                <2> 		mov [edi], eax
  8771 00006B0C 895F04              <2> 		mov [edi + 4], ebx
  8772 00006B0F 8B4608              <2> 		mov eax, [esi + 8]
  8773 00006B12 8B5E0C              <2> 		mov ebx, [esi + 12]
  8774 00006B15 894708              <2> 		mov [edi + 8], eax
  8775 00006B18 895F0C              <2> 		mov [edi + 12], ebx
  8776 00006B1B 01D7                <2> 		add edi, edx
  8777 00006B1D 81C610000000        <2> 		add esi, 16
  8778 00006B23 81FE[37D30000]      <2> 		cmp esi, mcolorend
  8779 00006B29 72DA                <2> 		jb noswmsy
  8780                              <2> 		
  8781                              <2> switchmousepos2:
  8782 00006B2B BE[37D20000]        <2> 		mov esi, mousecolorbuf
  8783 00006B30 8B3D[21570000]      <2> 		mov edi, [physbaseptr]
  8784 00006B36 31D2                <2> 		xor edx, edx
  8785 00006B38 31C9                <2> 		xor ecx, ecx
  8786 00006B3A 668B15[EF590000]    <2> 		mov dx, [mousecursorposition]
  8787 00006B41 668B0D[F1590000]    <2> 		mov cx, [mousecursorposition + 2]
  8788 00006B48 01D7                <2> 		add edi, edx
  8789 00006B4A 31D2                <2> 		xor edx, edx
  8790 00006B4C 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  8791 00006B53 6681F90000          <2> 		cmp cx, 0
  8792 00006B58 740B                <2> 		je noswmsy2
  8793 00006B5A 01D7                <2> swmsy2:		add edi, edx
  8794 00006B5C 6649                <2> 		dec cx
  8795 00006B5E 6681F90000          <2> 		cmp cx, 0
  8796 00006B63 75F5                <2> 		jne swmsy2
  8797 00006B65 8B07                <2> noswmsy2:	mov eax, [edi]
  8798 00006B67 8B5F04              <2> 		mov ebx, [edi + 4]
  8799 00006B6A 8906                <2> 		mov [esi], eax
  8800 00006B6C 895E04              <2> 		mov [esi + 4], ebx
  8801 00006B6F 8B4708              <2> 		mov eax, [edi + 8]
  8802 00006B72 8B5F0C              <2> 		mov ebx, [edi + 12]
  8803 00006B75 894608              <2> 		mov [esi + 8], eax
  8804 00006B78 895E0C              <2> 		mov [esi + 12], ebx
  8805 00006B7B 01D7                <2> 		add edi, edx
  8806 00006B7D 81C610000000        <2> 		add esi, 16
  8807 00006B83 81FE[37D30000]      <2> 		cmp esi, mcolorend
  8808 00006B89 72DA                <2> 		jb noswmsy2
  8809 00006B8B C3                  <2> 		ret
  8810                              <2> 		
  8811                              <1> %include "source/gui/icon.asm"
  8812 00006B8C 0000                <2> iconcolor dw 0
  8813                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8814 00006B8E A2[2D840000]        <2> 		mov [iconselected], al
  8815 00006B93 8025[2D840000]01    <2> 		and byte [iconselected], 1
  8816 00006B9A B401                <2> 		mov ah, 1
  8817 00006B9C E8B5150000          <2> 		call graphicsadd
  8818                              <2> 	showicon2:
  8819 00006BA1 8B3D[21570000]      <2> 		mov edi, [physbaseptr]
  8820 00006BA7 6601D2              <2> 		add dx, dx
  8821 00006BAA 663B15[F9570000]    <2> 		cmp dx, [resolutionx2]
  8822 00006BB1 720C                <2> 		jb screenxgood
  8823 00006BB3 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  8824 00006BBA 6681EA4000          <2> 		sub dx, 64
  8825                              <2> 	screenxgood:
  8826 00006BBF 6681F90000          <2> 		cmp cx, 0
  8827 00006BC4 742B                <2> 		je noscreenygoodchk
  8828 00006BC6 663B0D[0D570000]    <2> 		cmp cx, [resolutiony]
  8829 00006BCD 720C                <2> 		jb screenygood
  8830 00006BCF 668B0D[0D570000]    <2> 		mov cx, [resolutiony]
  8831 00006BD6 6681E92000          <2> 		sub cx, 32
  8832                              <2> 	screenygood:
  8833 00006BDB 50                  <2> 		push eax
  8834 00006BDC 52                  <2> 		push edx
  8835 00006BDD 31C0                <2> 		xor eax, eax
  8836 00006BDF 31DB                <2> 		xor ebx, ebx
  8837 00006BE1 668B1D[F9570000]    <2> 		mov bx, [resolutionx2]
  8838 00006BE8 6689C8              <2> 		mov ax, cx
  8839 00006BEB F7E3                <2> 		mul ebx
  8840 00006BED 01C7                <2> 		add edi, eax
  8841 00006BEF 5A                  <2> 		pop edx
  8842 00006BF0 58                  <2> 		pop eax
  8843                              <2> 	noscreenygoodchk:
  8844 00006BF1 31DB                <2> 		xor ebx, ebx
  8845 00006BF3 6689D3              <2> 		mov bx, dx
  8846 00006BF6 01DF                <2> 		add edi, ebx
  8847 00006BF8 6631C9              <2> 		xor cx, cx
  8848 00006BFB 668B06              <2> 		mov ax, [esi]
  8849 00006BFE 81C602000000        <2> 		add esi, 2
  8850 00006C04 66A3[8C6B0000]      <2> 		mov [iconcolor], ax
  8851                              <2> 	writeicon:
  8852 00006C0A 8B06                <2> 		mov eax, [esi]
  8853 00006C0C D1C0                <2> 		rol eax, 1
  8854 00006C0E 30C9                <2> 		xor cl, cl
  8855                              <2> 	writeiconline:
  8856 00006C10 B201                <2> 		mov dl, 1
  8857 00006C12 20C2                <2> 		and dl, al
  8858 00006C14 3215[2D840000]      <2> 		xor dl, [iconselected]
  8859 00006C1A 668B1D[DB6D0000]    <2> 		mov bx, [background]
  8860 00006C21 66891F              <2> 		mov [edi], bx
  8861 00006C24 80FA00              <2> 		cmp dl, 0
  8862 00006C27 740A                <2> 		je noiconline
  8863 00006C29 668B15[8C6B0000]    <2> 		mov dx, [iconcolor]
  8864 00006C30 668917              <2> 		mov [edi], dx
  8865                              <2> 	noiconline:
  8866 00006C33 81C702000000        <2> 		add edi, 2
  8867 00006C39 D1C0                <2> 		rol eax, 1
  8868 00006C3B FEC1                <2> 		inc cl
  8869 00006C3D 80F920              <2> 		cmp cl, 32
  8870 00006C40 72CE                <2> 		jb writeiconline
  8871 00006C42 81C604000000        <2> 		add esi, 4
  8872 00006C48 FEC5                <2> 		inc ch
  8873 00006C4A 31D2                <2> 		xor edx, edx
  8874 00006C4C 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  8875 00006C53 01D7                <2> 		add edi, edx
  8876 00006C55 81EF40000000        <2> 		sub edi, 64
  8877 00006C5B 80FD20              <2> 		cmp ch, 32
  8878 00006C5E 72AA                <2> 		jb writeicon
  8879 00006C60 31C0                <2> 		xor eax, eax
  8880 00006C62 C3                  <2> 		ret
  8881                              <1> %include "source/gui/line.asm"
  8882                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8883 00006C63 668935[856D0000]    <2> 	mov [.color], si
  8884 00006C6A C605[876D0000]00    <2> 	mov byte [.steep], 0
  8885 00006C71 C605[886D0000]00    <2> 	mov byte [.yreversed], 0
  8886 00006C78 E907000000          <2> 	jmp .notsteep
  8887                              <2> .steeploop:
  8888 00006C7D C605[876D0000]01    <2> 	mov byte [.steep], 1
  8889                              <2> .notsteep:
  8890 00006C84 31FF                <2> 	xor edi, edi
  8891 00006C86 31F6                <2> 	xor esi, esi
  8892 00006C88 6639DA              <2> 	cmp dx, bx
  8893 00006C8B 7705                <2> 	ja .noreversex
  8894 00006C8D 6687D3              <2> 	xchg dx, bx
  8895 00006C90 6691                <2> 	xchg cx, ax
  8896                              <2> .noreversex:
  8897 00006C92 6689D7              <2> 	mov di, dx
  8898 00006C95 6629DF              <2> 	sub di, bx
  8899                              <2> 	
  8900 00006C98 6639C1              <2> 	cmp cx, ax
  8901 00006C9B 720B                <2> 	jb .reversey
  8902 00006C9D 6689CE              <2> 	mov si, cx
  8903 00006CA0 6629C6              <2> 	sub si, ax
  8904 00006CA3 E90D000000          <2> 	jmp .normal
  8905                              <2> .reversey:
  8906 00006CA8 C605[886D0000]02    <2> 	mov byte [.yreversed], 2
  8907 00006CAF 6689C6              <2> 	mov si, ax
  8908 00006CB2 6629CE              <2> 	sub si, cx	
  8909                              <2> .normal:
  8910 00006CB5 6687CA              <2> 	xchg cx, dx
  8911 00006CB8 6693                <2> 	xchg ax, bx
  8912 00006CBA 6639FE              <2> 	cmp si, di
  8913 00006CBD 77BE                <2> 	ja .steeploop
  8914 00006CBF 6687CA              <2> 	xchg cx, dx
  8915 00006CC2 6693                <2> 	xchg ax, bx
  8916                              <2> 	
  8917 00006CC4 6691                <2> 	xchg ax, cx
  8918 00006CC6 6687DA              <2> 	xchg bx, dx
  8919 00006CC9 66893D[8B6D0000]    <2> 	mov [.xdelta], di
  8920 00006CD0 668935[8D6D0000]    <2> 	mov [.ydelta], si
  8921 00006CD7 668B35[856D0000]    <2> 	mov si, [.color]
  8922 00006CDE 66891D[896D0000]    <2> 	mov [.endline], bx
  8923 00006CE5 6652                <2> 	push dx
  8924 00006CE7 6651                <2> 	push cx
  8925 00006CE9 6687CA              <2> 	xchg cx, dx
  8926 00006CEC 803D[876D0000]01    <2> 	cmp byte [.steep], 1
  8927 00006CF3 7403                <2> 	je .xchg
  8928 00006CF5 6687D1              <2> 	xchg dx, cx
  8929                              <2> .xchg:
  8930 00006CF8 E808170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8931 00006CFD 6659                <2> 	pop cx
  8932 00006CFF 665A                <2> 	pop dx
  8933 00006D01 31C0                <2> 	xor eax, eax
  8934 00006D03 66A1[8B6D0000]      <2> 	mov ax, [.xdelta]
  8935 00006D09 66D1E8              <2> 	shr ax, 1
  8936 00006D0C 8A0D[876D0000]      <2> 	mov cl, [.steep]
  8937 00006D12 0A0D[886D0000]      <2> 	or cl, [.yreversed]
  8938 00006D18 55                  <2> 	push ebp
  8939 00006D19 668B2D[896D0000]    <2> 	mov bp, [.endline]
  8940 00006D20 6629D5              <2> 	sub bp, dx
  8941 00006D23 668B15[8D6D0000]    <2> 	mov dx, [.ydelta]
  8942                              <2> .lp:
  8943 00006D2A 668937              <2> 	mov [edi], si
  8944 00006D2D 6639D0              <2> 	cmp ax, dx
  8945 00006D30 7332                <2> 	jae .noaddx
  8946 00006D32 F6C102              <2> 	test cl, 2
  8947 00006D35 7414                <2> 	jz .nodecy
  8948 00006D37 F6C101              <2> 	test cl, 1
  8949 00006D3A 7509                <2> 	jnz .steepy
  8950 00006D3C 29DF                <2> 	sub edi, ebx
  8951 00006D3E 29DF                <2> 	sub edi, ebx
  8952 00006D40 E906000000          <2> 	jmp .nodecy
  8953                              <2> .steepy:
  8954 00006D45 81EF04000000        <2> 	sub edi, 4
  8955                              <2> .nodecy:
  8956 00006D4B 660305[8B6D0000]    <2> 	add ax, [.xdelta]
  8957 00006D52 F6C101              <2> 	test cl, 1
  8958 00006D55 7507                <2> 	jnz .steepx
  8959 00006D57 01DF                <2> 	add edi, ebx
  8960 00006D59 E906000000          <2> 	jmp .noaddx
  8961                              <2> .steepx:
  8962 00006D5E 81C702000000        <2> 	add edi, 2
  8963                              <2> .noaddx:
  8964 00006D64 6629D0              <2> 	sub ax, dx
  8965 00006D67 664D                <2> 	dec bp
  8966 00006D69 81C702000000        <2> 	add edi, 2
  8967 00006D6F F6C101              <2> 	test cl, 1
  8968 00006D72 7408                <2> 	jz .nosteepx
  8969 00006D74 81EF02000000        <2> 	sub edi, 2
  8970 00006D7A 01DF                <2> 	add edi, ebx
  8971                              <2> .nosteepx:
  8972 00006D7C 6681FD0000          <2> 	cmp bp, 0
  8973 00006D81 75A7                <2> 	jne .lp
  8974                              <2> .done:
  8975 00006D83 5D                  <2> 	pop ebp
  8976 00006D84 C3                  <2> 	ret
  8977                              <2> 	
  8978 00006D85 0000                <2> .color dw 0
  8979 00006D87 00                  <2> .steep db 0
  8980 00006D88 00                  <2> .yreversed db 0
  8981 00006D89 0000                <2> .endline dw 0
  8982 00006D8B 0000                <2> .xdelta dw 0
  8983 00006D8D 0000                <2> .ydelta dw 0
  8984                              <1> %include "source/gui/refresh.asm"
  8985                              <2> guiclear:
  8986 00006D8F 8B3D[21570000]      <2> 	mov edi, [physbaseptr]
  8987 00006D95 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  8988 00006D9C 668B0D[0D570000]    <2> 	mov cx, [resolutiony]
  8989 00006DA3 668B1D[DB6D0000]    <2> 	mov bx, [background]
  8990 00006DAA 66891D[DD6D0000]    <2> 	mov [background + 2], bx
  8991                              <2> %ifdef gui.background
  8992                              <2> 	cmp dword [backgroundimage], 0
  8993                              <2> 	je guiclear.noback
  8994                              <2> 		mov esi, [backgroundimage]
  8995                              <2> 	.lp:
  8996                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8997                              <2> 		;movdqa [edi], xmm0
  8998                              <2> 		;add esi, 16
  8999                              <2> 		;add edi, 16
  9000                              <2> 		;sub dx, 8
  9001                              <2> 		mov eax, [esi]
  9002                              <2> 		mov [edi], eax
  9003                              <2> 		add esi, 4
  9004                              <2> 		add edi, 4
  9005                              <2> 		sub dx, 2
  9006                              <2> 		cmp dx, 0
  9007                              <2> 		ja .lp
  9008                              <2> 		dec cx
  9009                              <2> 		mov dx, [resolutionx]
  9010                              <2> 		cmp cx, 0
  9011                              <2> 		ja .lp
  9012                              <2> 		ret
  9013                              <2> 	backgroundimage dd 0
  9014                              <2> %endif
  9015                              <2> guiclear.noback:
  9016 00006DB1 A1[DB6D0000]        <2> 	mov eax, [background]
  9017                              <2> guiclearloop:
  9018 00006DB6 8907                <2> 	mov [edi], eax
  9019 00006DB8 81C704000000        <2> 	add edi, 4
  9020 00006DBE 6681EA0200          <2> 	sub dx, 2
  9021 00006DC3 6681FA0000          <2> 	cmp dx, 0
  9022 00006DC8 77EC                <2> 	ja guiclearloop
  9023 00006DCA 6649                <2> 	dec cx
  9024 00006DCC 668B15[0B570000]    <2> 	mov dx, [resolutionx]
  9025 00006DD3 6681F90000          <2> 	cmp cx, 0
  9026 00006DD8 77DC                <2> 	ja guiclearloop
  9027 00006DDA C3                  <2> 	ret
  9028                              <2> 
  9029 00006DDB CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9030                              <2> 	.original equ 0111101111001111b
  9031                              <2> 
  9032                              <2> reloadallgraphics:
  9033 00006DDF BF[37D00000]        <2> 		mov edi, graphicstable
  9034                              <2> reloadgraphicsloop:
  9035 00006DE4 8B7702              <2> 		mov esi, [edi + 2]
  9036 00006DE7 668B5706            <2> 		mov dx, [edi + 6]
  9037 00006DEB 668B4F08            <2> 		mov cx, [edi + 8]
  9038 00006DEF 668B07              <2> 		mov ax, [edi]
  9039 00006DF2 668B5F0A            <2> 		mov bx, [edi + 10]
  9040 00006DF6 893D[42810000]      <2> 		mov [grpctblpos], edi
  9041 00006DFC 3B3D[D97B0000]      <2> 		cmp edi, [dragging]
  9042 00006E02 741E                <2> 		je loadedgraphic
  9043 00006E04 663D0100            <2> 		cmp ax, 1
  9044 00006E08 0F8436000000        <2> 		je near icongraphic
  9045 00006E0E 663D0200            <2> 		cmp ax, 2
  9046 00006E12 0F843C000000        <2> 		je near stringgraphic
  9047 00006E18 663D0300            <2> 		cmp ax, 3
  9048 00006E1C 0F8416000000        <2> 		je near windowgraphic
  9049 00006E22 8B3D[42810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9050 00006E28 81C710000000        <2> 		add edi, 16
  9051 00006E2E 81FF[37D20000]      <2> 		cmp edi, graphicstableend
  9052 00006E34 732E                <2> 		jae donereloadgraphics
  9053 00006E36 EBAC                <2> 		jmp reloadgraphicsloop
  9054                              <2> windowgraphic:
  9055 00006E38 E807090000          <2> 		call showwindow2
  9056 00006E3D E8C1AFFFFF          <2> 		call cleardouble
  9057 00006E42 EBDE                <2> 		jmp loadedgraphic
  9058 00006E44 80E301              <2> icongraphic:	and bl, 1
  9059 00006E47 881D[2D840000]      <2> 		mov [iconselected], bl
  9060 00006E4D E84FFDFFFF          <2> 		call showicon2
  9061 00006E52 EBCE                <2> 		jmp loadedgraphic
  9062 00006E54 80E301              <2> stringgraphic:  and bl, 1
  9063 00006E57 881D[D57B0000]      <2> 		mov [mouseselecton], bl
  9064 00006E5D E8CE050000          <2> 		call showstring2
  9065 00006E62 EBBE                <2> 		jmp loadedgraphic
  9066                              <2> donereloadgraphics:
  9067 00006E64 8B3D[D97B0000]      <2> 		mov edi, [dragging]
  9068 00006E6A 81FF[37D00000]      <2> 		cmp edi, graphicstable
  9069 00006E70 7226                <2> 		jb notcorrectdrag
  9070 00006E72 668B07              <2> 		mov ax, [edi]
  9071 00006E75 8B7702              <2> 		mov esi, [edi + 2]
  9072 00006E78 668B5706            <2> 		mov dx, [edi + 6]
  9073 00006E7C 668B4F08            <2> 		mov cx, [edi + 8]
  9074 00006E80 668B5F0A            <2> 		mov bx, [edi + 10]
  9075 00006E84 663D0100            <2> 		cmp ax, 1
  9076 00006E88 750F                <2> 		jne noticondragging
  9077 00006E8A 80E301              <2> 		and bl, 1
  9078 00006E8D 881D[2D840000]      <2> 		mov [iconselected], bl
  9079 00006E93 E809FDFFFF          <2> 		call showicon2
  9080                              <2> notcorrectdrag:
  9081 00006E98 C3                  <2> 		ret
  9082                              <2> 
  9083                              <2> 	noticondragging:
  9084 00006E99 663D0200            <2> 		cmp ax, 2
  9085 00006E9D 75F9                <2> 		jne notcorrectdrag
  9086 00006E9F 80E301              <2> 		and bl, 1
  9087 00006EA2 881D[D57B0000]      <2> 		mov [mouseselecton], bl
  9088 00006EA8 E883050000          <2> 		call showstring2
  9089 00006EAD EBE9                <2> 		jmp notcorrectdrag
  9090                              <1> %include "source/gui/square.asm"
  9091                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9092 00006EAF 6639D3              <2> 	cmp bx, dx
  9093 00006EB2 7303                <2> 	jae .noxchgx
  9094 00006EB4 6687DA              <2> 	xchg bx, dx
  9095                              <2> .noxchgx:
  9096 00006EB7 6639C8              <2> 	cmp ax, cx
  9097 00006EBA 7302                <2> 	jae .noxchgy
  9098 00006EBC 6691                <2> 	xchg ax, cx
  9099                              <2> .noxchgy:
  9100 00006EBE 6650                <2> 	push ax
  9101 00006EC0 6653                <2> 	push bx
  9102 00006EC2 6652                <2> 	push dx
  9103 00006EC4 E83C150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9104 00006EC9 31D2                <2> 	xor edx, edx
  9105 00006ECB 665A                <2> 	pop dx
  9106 00006ECD 31DB                <2> 	xor ebx, ebx
  9107 00006ECF 665B                <2> 	pop bx
  9108 00006ED1 6658                <2> 	pop ax
  9109                              <2> .lp0:
  9110 00006ED3 6652                <2> 	push dx
  9111                              <2> .lp:
  9112 00006ED5 668937              <2> 	mov [edi], si
  9113 00006ED8 81C702000000        <2> 	add edi, 2
  9114 00006EDE 6642                <2> 	inc dx
  9115 00006EE0 6639DA              <2> 	cmp dx, bx
  9116 00006EE3 76F0                <2> 	jbe .lp
  9117 00006EE5 665A                <2> 	pop dx
  9118 00006EE7 81EF02000000        <2> 	sub edi, 2
  9119 00006EED 29DF                <2> 	sub edi, ebx
  9120 00006EEF 29DF                <2> 	sub edi, ebx
  9121 00006EF1 01D7                <2> 	add edi, edx
  9122 00006EF3 01D7                <2> 	add edi, edx
  9123 00006EF5 033D[F9570000]      <2> 	add edi, [resolutionx2]
  9124 00006EFB 6641                <2> 	inc cx
  9125 00006EFD 6639C1              <2> 	cmp cx, ax
  9126 00006F00 7203                <2> 	jb .lp2
  9127 00006F02 74CF                <2> 	je .lp0
  9128 00006F04 C3                  <2> 	ret
  9129                              <2> .lp2:
  9130 00006F05 57                  <2> 	push edi
  9131 00006F06 668937              <2> 	mov [edi], si
  9132 00006F09 29D7                <2> 	sub edi, edx
  9133 00006F0B 29D7                <2> 	sub edi, edx
  9134 00006F0D 01DF                <2> 	add edi, ebx
  9135 00006F0F 01DF                <2> 	add edi, ebx
  9136 00006F11 668937              <2> 	mov [edi], si
  9137 00006F14 5F                  <2> 	pop edi
  9138 00006F15 033D[F9570000]      <2> 	add edi, [resolutionx2]
  9139 00006F1B 6641                <2> 	inc cx
  9140 00006F1D 6639C1              <2> 	cmp cx, ax
  9141 00006F20 72E3                <2> 	jb .lp2
  9142 00006F22 EBAF                <2> 	jmp .lp0
  9143                              <2> 
  9144                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9145 00006F24 6639D3              <2> 	cmp bx, dx
  9146 00006F27 7303                <2> 	jae .noxchgx
  9147 00006F29 6687DA              <2> 	xchg bx, dx
  9148                              <2> .noxchgx:
  9149 00006F2C 6639C8              <2> 	cmp ax, cx
  9150 00006F2F 7302                <2> 	jae .noxchgy
  9151 00006F31 6691                <2> 	xchg ax, cx
  9152                              <2> .noxchgy:
  9153 00006F33 6650                <2> 	push ax
  9154 00006F35 6653                <2> 	push bx
  9155 00006F37 6652                <2> 	push dx
  9156 00006F39 E8C7140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9157 00006F3E 31D2                <2> 	xor edx, edx
  9158 00006F40 665A                <2> 	pop dx
  9159 00006F42 31DB                <2> 	xor ebx, ebx
  9160 00006F44 665B                <2> 	pop bx
  9161 00006F46 6658                <2> 	pop ax
  9162                              <2> .lp2
  9163 00006F48 6652                <2> 	push dx
  9164                              <2> .lp:
  9165 00006F4A 668937              <2> 	mov [edi], si
  9166 00006F4D 81C702000000        <2> 	add edi, 2
  9167 00006F53 6642                <2> 	inc dx
  9168 00006F55 6639DA              <2> 	cmp dx, bx
  9169 00006F58 76F0                <2> 	jbe .lp
  9170 00006F5A 665A                <2> 	pop dx
  9171 00006F5C 81EF02000000        <2> 	sub edi, 2
  9172 00006F62 29DF                <2> 	sub edi, ebx
  9173 00006F64 29DF                <2> 	sub edi, ebx
  9174 00006F66 01D7                <2> 	add edi, edx
  9175 00006F68 01D7                <2> 	add edi, edx
  9176 00006F6A 033D[F9570000]      <2> 	add edi, [resolutionx2]
  9177 00006F70 6641                <2> 	inc cx
  9178 00006F72 6639C1              <2> 	cmp cx, ax
  9179 00006F75 76D1                <2> 	jbe .lp2
  9180 00006F77 C3                  <2> 	ret
  9181                              <1> %include "source/gui/startup.asm"
  9182                              <2> guisetup:
  9183                              <2> 	%ifdef gui.background
  9184                              <2> 	xor ebx, ebx
  9185                              <2> 	mov [backgroundimage], ebx
  9186                              <2> 	%endif
  9187 00006F78 E812FEFFFF          <2> 	call guiclear
  9188 00006F7D C605[589F0000]01    <2> 	mov byte [guion], 1
  9189 00006F84 C605[D57B0000]00    <2> 	mov byte [mouseselecton], 0
  9190 00006F8B 31C0                <2> 	xor eax, eax
  9191 00006F8D 31DB                <2> 	xor ebx, ebx
  9192 00006F8F 31C9                <2> 	xor ecx, ecx
  9193 00006F91 31D2                <2> 	xor edx, edx
  9194                              <2> 	
  9195 00006F93 BE[55710000]        <2> 	mov esi, pacmsg
  9196 00006F98 30E4                <2> 	xor ah, ah
  9197 00006F9A B010                <2> 	mov al, 00010000b
  9198 00006F9C 31DB                <2> 	xor ebx, ebx
  9199 00006F9E 66B99000            <2> 	mov cx, 144
  9200 00006FA2 66BA0400            <2> 	mov dx, 4
  9201 00006FA6 E872040000          <2> 	call showstring
  9202                              <2> 	
  9203 00006FAB BE[93710000]        <2> 	mov esi, interneticon
  9204 00006FB0 30E4                <2> 	xor ah, ah
  9205 00006FB2 B010                <2> 	mov al, 00010000b
  9206 00006FB4 BB[7E700000]        <2> 	mov ebx, noie
  9207 00006FB9 66B91800            <2> 	mov cx, 24
  9208 00006FBD 66BA0400            <2> 	mov dx, 4
  9209 00006FC1 E8C8FBFFFF          <2> 	call showicon
  9210                              <2> 	
  9211 00006FC6 BE[15720000]        <2> 	mov esi, wordicon
  9212 00006FCB 30E4                <2> 	xor ah, ah
  9213 00006FCD B010                <2> 	mov al, 00010000b
  9214 00006FCF 31DB                <2> 	xor ebx, ebx
  9215 00006FD1 66B91800            <2> 	mov cx, 24
  9216 00006FD5 66BA3000            <2> 	mov dx, 48
  9217 00006FD9 E8B0FBFFFF          <2> 	call showicon
  9218                              <2> 	
  9219 00006FDE BE[97720000]        <2> 	mov esi, pacmanpellet
  9220 00006FE3 30E4                <2> 	xor ah, ah
  9221 00006FE5 B010                <2> 	mov al, 00010000b
  9222 00006FE7 31DB                <2> 	xor ebx, ebx
  9223 00006FE9 66B94000            <2> 	mov cx, 64
  9224 00006FED 66BA0400            <2> 	mov dx, 4
  9225 00006FF1 E898FBFFFF          <2> 	call showicon
  9226                              <2> 	
  9227 00006FF6 BE[9B730000]        <2> 	mov esi, pacman
  9228 00006FFB 30E4                <2> 	xor ah, ah
  9229 00006FFD B010                <2> 	mov al, 00010000b
  9230 00006FFF BB[67700000]        <2> 	mov ebx, pacmannomnom
  9231 00007004 66B94000            <2> 	mov cx, 64
  9232 00007008 66BA3000            <2> 	mov dx, 48
  9233 0000700C E87DFBFFFF          <2> 	call showicon
  9234                              <2> 	
  9235 00007011 BE[19730000]        <2> 	mov esi, ghostie
  9236 00007016 30E4                <2> 	xor ah, ah
  9237 00007018 B010                <2> 	mov al, 00010000b
  9238 0000701A BB[50700000]        <2> 	mov ebx, boo
  9239 0000701F 66B96C00            <2> 	mov cx, 108
  9240 00007023 66BA0400            <2> 	mov dx, 4
  9241 00007027 E862FBFFFF          <2> 	call showicon
  9242                              <2> 	
  9243 0000702C BE[37710000]        <2> 	mov esi, start
  9244 00007031 668B0D[0D570000]    <2> 	mov cx, [resolutiony]
  9245 00007038 6681E91000          <2> 	sub cx, 16
  9246 0000703D 66BA0200            <2> 	mov dx, 2
  9247 00007041 30E4                <2> 	xor ah, ah
  9248 00007043 B010                <2> 	mov al, 00010000b
  9249 00007045 BB[F3700000]        <2> 	mov ebx, winblows
  9250 0000704A E8CE030000          <2> 	call showstring
  9251                              <2> 
  9252                              <2> %ifdef gui.time	
  9253                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9254                              <2> %endif
  9255 0000704F C3                  <2> 	ret
  9256                              <2> 
  9257                              <2> 	boo:
  9258 00007050 BE[50710000]        <2> 		mov esi, boomsg
  9259 00007055 66BA6400            <2> 		mov dx, 100
  9260 00007059 66B94001            <2> 		mov cx, 320
  9261 0000705D 31DB                <2> 		xor ebx, ebx
  9262 0000705F 6631C0              <2> 		xor ax, ax
  9263 00007062 E9B6030000          <2> 		jmp showstring
  9264                              <2> 
  9265                              <2> 	pacmannomnom:
  9266 00007067 BE[6E710000]        <2> 		mov esi, pacnom
  9267 0000706C 66BA8200            <2> 		mov dx, 130
  9268 00007070 66B93C00            <2> 		mov cx, 60
  9269 00007074 31DB                <2> 		xor ebx, ebx
  9270 00007076 6631C0              <2> 		xor ax, ax
  9271 00007079 E99F030000          <2> 		jmp showstring	
  9272                              <2> 	
  9273                              <2> 	noie:
  9274 0000707E 66C705[7D710000]80- <2> 		mov word [termwindow], 640
  9275 00007086 02                  <2>
  9276 00007087 66C705[7F710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9277 0000708F 01                  <2>
  9278 00007090 BE[7D710000]        <2> 		mov esi, termwindow
  9279 00007095 66BA1000            <2> 		mov dx, 16
  9280 00007099 66B91000            <2> 		mov cx, 16
  9281 0000709D 31DB                <2> 		xor ebx, ebx
  9282 0000709F 6631C0              <2> 		xor ax, ax
  9283 000070A2 E8DF050000          <2> 		call showwindow
  9284 000070A7 E9FEB8FFFF          <2> 		jmp os
  9285                              <2> 
  9286                              <2> 	gotomenuboot:
  9287 000070AC 31D2                <2> 		xor edx, edx
  9288 000070AE 31C9                <2> 		xor ecx, ecx
  9289 000070B0 668B15[0B570000]    <2> 		mov dx, [resolutionx]
  9290 000070B7 668B0D[0D570000]    <2> 		mov cx, [resolutiony]
  9291 000070BE 66C1E904            <2> 		shr cx, 4
  9292 000070C2 6681E90100          <2> 		sub cx, 1
  9293 000070C7 66C1E104            <2> 		shl cx, 4
  9294 000070CB 668915[7D710000]    <2> 		mov [termwindow], dx
  9295 000070D2 66890D[7F710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9296 000070D9 BE[7D710000]        <2> 		mov esi, termwindow
  9297 000070DE 6631D2              <2> 		xor dx, dx
  9298 000070E1 6631C9              <2> 		xor cx, cx
  9299 000070E4 31DB                <2> 		xor ebx, ebx
  9300 000070E6 6631C0              <2> 		xor ax, ax
  9301 000070E9 E898050000          <2> 		call showwindow
  9302 000070EE E9B7B8FFFF          <2> 		jmp os
  9303                              <2> 
  9304                              <2> 	winblows:
  9305 000070F3 BE[46710000]        <2> 		mov esi, turnoffmsg
  9306 000070F8 BB[6D520000]        <2> 		mov ebx, turnoff
  9307 000070FD 668B0D[0D570000]    <2> 		mov cx, [resolutiony]
  9308 00007104 6681E92000          <2> 		sub cx, 32
  9309 00007109 6631D2              <2> 		xor dx, dx
  9310 0000710C 30E4                <2> 		xor ah, ah
  9311 0000710E B010                <2> 		mov al, 00010000b
  9312 00007110 E808030000          <2> 		call showstring
  9313 00007115 BE[3D710000]        <2> 		mov esi, gotomenu
  9314 0000711A 668B0D[0D570000]    <2> 		mov cx, [resolutiony]
  9315 00007121 6681E93000          <2> 		sub cx, 48
  9316 00007126 6631D2              <2> 		xor dx, dx
  9317 00007129 30E4                <2> 		xor ah, ah
  9318 0000712B B010                <2> 		mov al, 00010000b
  9319 0000712D BB[AC700000]        <2> 		mov ebx, gotomenuboot
  9320 00007132 E9E6020000          <2> 		jmp showstring
  9321                              <2> 		
  9322                              <2> 
  9323 00007137 737461727400        <2> 	start	db "start",0
  9324 0000713D 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9325 00007146 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9326 0000714F 00                  <2>
  9327 00007150 426F6F2100          <2> 	boomsg db "Boo!",0
  9328 00007155 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9329 0000715E 73206561737920746F- <2>
  9330 00007167 20647261772E00      <2>
  9331 0000716E 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9332 00007177 6D206E6F6D00        <2>
  9333                              <2> 
  9334 0000717D 20035802            <2> 	termwindow:	dw 800,600	;window size
  9335 00007181 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9336 00007185 [38D30000]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9337 00007189 [DC3D0100]          <2>
  9338 0000718D 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9339                              <2> 	
  9340 0000718D <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9341 0000718D <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9342 0000718D <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9343 0000718D <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9344 0000718D <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9345                              <2> 
  9346                              <2> %ifdef gui.time
  9347                              <2> guitime:
  9348                              <2> 		call time	;get rtc in timeshow & dateshow
  9349                              <2> 		xor ebx, ebx
  9350                              <2> 		mov dx, [resolutionx2]
  9351                              <2> 		xor cx, cx
  9352                              <2> 		sub dx, 304
  9353                              <2> 		mov esi, dateshow
  9354                              <2> 		mov al, 00010001b
  9355                              <2> 		call showstring
  9356                              <2> 		mov esi, timeshow
  9357                              <2> 		xor ebx, ebx
  9358                              <2> 		mov al, 00010001b
  9359                              <2> 		call showstring
  9360                              <2> 		ret
  9361                              <2> %endif
  9362                              <1> %include "source/gui/text.asm"
  9363                              <2> 	showstring:
  9364 0000741D A2[D57B0000]        <2> 		mov [mouseselecton], al
  9365 00007422 8025[D57B0000]01    <2> 		and byte [mouseselecton], 1
  9366 00007429 B402                <2> 		mov ah, 2
  9367 0000742B E8260D0000          <2> 		call graphicsadd
  9368                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9369 00007430 30E4                <2> 		xor ah, ah
  9370 00007432 8A06                <2> 		mov al, [esi]
  9371 00007434 3C00                <2> 		cmp al, 0
  9372 00007436 741E                <2> 		je doneshowstring
  9373 00007438 46                  <2> 		inc esi
  9374 00007439 3CFF                <2> 		cmp al, 255
  9375 0000743B 74F3                <2> 		je showstring2
  9376 0000743D 56                  <2> 		push esi
  9377 0000743E 668B1D[5E740000]    <2> 		mov bx, [colorfont2]
  9378 00007445 E825000000          <2> 		call showfontvesa
  9379 0000744A 3C0A                <2> 		cmp al, 10
  9380 0000744C 7405                <2> 		je noproceedshst
  9381 0000744E 6681C20800          <2> 		add dx, 8
  9382                              <2> 	noproceedshst:
  9383 00007453 5E                  <2> 		pop esi
  9384 00007454 EBDA                <2> 		jmp showstring2
  9385                              <2> 	doneshowstring:
  9386 00007456 C605[D57B0000]00    <2> 		mov byte [mouseselecton], 0
  9387 0000745D C3                  <2> 		ret
  9388                              <2> 
  9389 0000745E FFFF                <2> colorfont2 dw 0xFFFF
  9390 00007460 00                  <2> colorcache db 0
  9391                              <2> 
  9392 00007461 02                  <2> resolutionbytes db 2
  9393 00007462 0000                <2> posxvesa dw 0
  9394 00007464 0000                <2> posyvesa dw 0
  9395 00007466 FFFF                <2> colorfont dw 0xFFFF
  9396                              <2> savefontvesa:		;;same rules as showfontvesa
  9397 00007468 C605[D47B0000]01    <2> 	mov byte [savefonton], 1
  9398                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  9399 0000746F 3CFF                <2> 	cmp al, 255
  9400 00007471 7501                <2> 	jne nostopshowfont
  9401 00007473 C3                  <2> 	ret
  9402                              <2> nostopshowfont:
  9403 00007474 66890D[64740000]    <2> 	mov [posyvesa], cx
  9404 0000747B 3C0A                <2> 	cmp al, 10
  9405 0000747D 0F8424000000        <2> 	je near goodvesafontx
  9406 00007483 31C9                <2> 	xor ecx, ecx
  9407 00007485 668B0D[F9570000]    <2> 	mov cx, [resolutionx2]
  9408 0000748C 6639CA              <2> 	cmp dx, cx
  9409 0000748F 7616                <2> 	jbe goodvesafontx
  9410 00007491 6631D2              <2> 	xor dx, dx
  9411 00007494 668B0D[64740000]    <2> 	mov cx, [posyvesa]
  9412 0000749B 6681C11000          <2> 	add cx, 16
  9413 000074A0 66890D[64740000]    <2> 	mov [posyvesa], cx
  9414                              <2> goodvesafontx:
  9415 000074A7 668B0D[64740000]    <2> 	mov cx, [posyvesa]
  9416 000074AE 668915[62740000]    <2> 	mov [posxvesa], dx
  9417 000074B5 8B3D[21570000]      <2> 	mov edi, [physbaseptr]
  9418 000074BB 66891D[66740000]    <2> 	mov [colorfont], bx
  9419 000074C2 31DB                <2> 	xor ebx, ebx
  9420 000074C4 88C3                <2> 	mov bl, al
  9421 000074C6 31C0                <2> 	xor eax, eax
  9422 000074C8 88D8                <2> 	mov al, bl
  9423 000074CA 6689D3              <2> 	mov bx, dx
  9424 000074CD 89DA                <2> 	mov edx, ebx
  9425 000074CF 31DB                <2> 	xor ebx, ebx
  9426 000074D1 6681F90000          <2> 	cmp cx, 0
  9427 000074D6 7414                <2> 	je vesaposloopdn
  9428 000074D8 668B1D[F9570000]    <2> 	mov bx, [resolutionx2]
  9429                              <2> vesaposloop:
  9430 000074DF 52                  <2> 	push edx
  9431 000074E0 50                  <2> 	push eax
  9432 000074E1 31C0                <2> 	xor eax, eax
  9433 000074E3 6689C8              <2> 	mov ax, cx
  9434 000074E6 F7E3                <2> 	mul ebx
  9435 000074E8 01C7                <2> 	add edi, eax
  9436 000074EA 58                  <2> 	pop eax
  9437 000074EB 5A                  <2> 	pop edx
  9438                              <2> vesaposloopdn:
  9439 000074EC 01D7                <2> 	add edi, edx
  9440 000074EE BE[6A8D0000]        <2> 	mov esi, fonts
  9441                              <2> findfontvesa:
  9442 000074F3 30E4                <2> 	xor ah, ah
  9443 000074F5 3C0A                <2> 	cmp al, 10
  9444 000074F7 0F84FE000000        <2> 	je near nwlinevesa
  9445 000074FD C1E004              <2> 	shl eax, 4
  9446 00007500 01C6                <2> 	add esi, eax
  9447 00007502 C1E804              <2> 	shr eax, 4
  9448 00007505 81FE[6A9D0000]      <2> 	cmp esi, fontend
  9449 0000750B 0F83B9000000        <2> 	jae near donefontvesa
  9450 00007511 4E                  <2> 	dec esi
  9451                              <2> foundfontvesa:
  9452 00007512 46                  <2> 	inc esi
  9453 00007513 803D[D47B0000]01    <2> 	cmp byte [savefonton], 1
  9454 0000751A 0F8401010000        <2> 	je near vesafontsaver
  9455 00007520 30C9                <2> 	xor cl, cl
  9456 00007522 8A06                <2> 	mov al, [esi]
  9457 00007524 668B15[F9570000]    <2> 	mov dx, [resolutionx2]
  9458 0000752B 662B15[62740000]    <2> 	sub dx, [posxvesa]
  9459 00007532 6681FA1000          <2> 	cmp dx, 16
  9460 00007537 7708                <2> 	ja paintfontvesa
  9461 00007539 D0EA                <2> 	shr dl, 1
  9462 0000753B 8815[FA750000]      <2> 	mov [charwidth], dl
  9463                              <2> paintfontvesa:
  9464 00007541 B201                <2> 	mov dl, 1
  9465 00007543 20C2                <2> 	and dl, al
  9466 00007545 803D[D37B0000]01    <2> 	cmp byte [showcursorfonton], 1
  9467 0000754C 0F8435000000        <2> 	je near nodelpaintedfont
  9468 00007552 803D[D37B0000]02    <2> 	cmp byte [showcursorfonton], 2
  9469 00007559 0F8518000000        <2> 	jne near noswitchcursorfonton
  9470 0000755F 80FA00              <2> 	cmp dl, 0
  9471 00007562 0F842E000000        <2> 	je near nopixelset
  9472 00007568 668B1D[66740000]    <2> 	mov bx, [colorfont]
  9473 0000756F 66891F              <2> 	mov [edi], bx
  9474 00007572 E91F000000          <2> 	jmp nopixelset
  9475                              <2> noswitchcursorfonton:
  9476 00007577 3215[D57B0000]      <2> 	xor dl, [mouseselecton]
  9477 0000757D 668B1D[DB6D0000]    <2> 	mov bx, [background]
  9478 00007584 66891F              <2> 	mov [edi], bx
  9479                              <2> nodelpaintedfont:
  9480 00007587 80FA00              <2> 	cmp dl, 0
  9481 0000758A 740A                <2> 	je nopixelset
  9482 0000758C 668B15[66740000]    <2> 	mov dx, [colorfont]
  9483 00007593 668917              <2> 	mov [edi], dx
  9484                              <2> nopixelset:
  9485 00007596 81C702000000        <2> 	add edi, 2
  9486 0000759C D0C0                <2> 	rol al, 1
  9487 0000759E FEC1                <2> 	inc cl
  9488 000075A0 3A0D[FA750000]      <2> 	cmp cl, [charwidth]
  9489 000075A6 7299                <2> 	jb paintfontvesa
  9490 000075A8 FEC5                <2> 	inc ch
  9491 000075AA 31D2                <2> 	xor edx, edx
  9492 000075AC 668B15[F9570000]    <2> 	mov dx, [resolutionx2]
  9493 000075B3 01D7                <2> 	add edi, edx
  9494 000075B5 31D2                <2> 	xor edx, edx
  9495 000075B7 8A15[FA750000]      <2> 	mov dl, [charwidth]
  9496 000075BD 00D2                <2> 	add dl, dl
  9497 000075BF 29D7                <2> 	sub edi, edx
  9498 000075C1 80FD10              <2> 	cmp ch, 16
  9499 000075C4 0F8248FFFFFF        <2> 	jb foundfontvesa
  9500                              <2> donefontvesa:
  9501 000075CA B208                <2> 	mov dl, 8
  9502 000075CC 8815[FA750000]      <2> 	mov [charwidth], dl
  9503 000075D2 668B15[62740000]    <2> 	mov dx, [posxvesa]
  9504 000075D9 8A1D[FA750000]      <2> 	mov bl, [charwidth]
  9505 000075DF 30FF                <2> 	xor bh, bh
  9506 000075E1 6601DA              <2> 	add dx, bx
  9507 000075E4 668B1D[66740000]    <2> 	mov bx, [colorfont]
  9508 000075EB 668B0D[64740000]    <2> 	mov cx, [posyvesa]
  9509 000075F2 C605[D47B0000]00    <2> 	mov byte [savefonton], 0
  9510 000075F9 C3                  <2> 	ret
  9511 000075FA 08                  <2> charwidth db 8
  9512                              <2> nwlinevesa:
  9513 000075FB 668B15[62740000]    <2> 	mov dx, [posxvesa]
  9514 00007602 6631D2              <2> 	xor dx, dx
  9515 00007605 668915[62740000]    <2> 	mov [posxvesa], dx
  9516 0000760C 668B0D[64740000]    <2> 	mov cx, [posyvesa]
  9517 00007613 6681C11000          <2> 	add cx, 16
  9518 00007618 66890D[64740000]    <2> 	mov [posyvesa], cx
  9519 0000761F EBA9                <2> 	jmp donefontvesa
  9520                              <2> vesafontsaver:
  9521 00007621 30C0                <2> 	xor al, al
  9522 00007623 30C9                <2> 	xor cl, cl
  9523                              <2> vesafontsaver2:
  9524 00007625 668B17              <2> 	mov dx, [edi]
  9525 00007628 663B15[66740000]    <2> 	cmp dx, [colorfont]
  9526 0000762F 742F                <2> 	je colorfontmatch
  9527                              <2> donecolormatch:
  9528 00007631 81C702000000        <2> 	add edi, 2
  9529 00007637 D0C0                <2> 	rol al, 1
  9530 00007639 FEC1                <2> 	inc cl
  9531 0000763B 80F908              <2> 	cmp cl, 8
  9532 0000763E 72E5                <2> 	jb vesafontsaver2
  9533 00007640 8806                <2> 	mov [esi], al
  9534 00007642 46                  <2> 	inc esi
  9535 00007643 FEC5                <2> 	inc ch
  9536 00007645 31D2                <2> 	xor edx, edx
  9537 00007647 668B15[F9570000]    <2> 	mov dx, [resolutionx2]
  9538 0000764E 01D7                <2> 	add edi, edx
  9539 00007650 81EF10000000        <2> 	sub edi, 16
  9540 00007656 80FD10              <2> 	cmp ch, 16
  9541 00007659 72C6                <2> 	jb vesafontsaver
  9542 0000765B E96AFFFFFF          <2> 	jmp donefontvesa
  9543                              <2> colorfontmatch:
  9544 00007660 0401                <2> 	add al, 1
  9545 00007662 EBCD                <2> 	jmp donecolormatch
  9546                              <1> %include "source/gui/window.asm"
  9547 00007664 0000                <2> winvcopystx dw 0
  9548 00007666 0000                <2> winvcopysty dw 0
  9549 00007668 0000                <2> winvcopydx dw 0
  9550 0000766A 0000                <2> winvcopycx dw 0
  9551 0000766C FFFF0000            <2> windowcolor dw 0xFFFF,0
  9552 00007670 00000000            <2> windowbufloc: dd 0
  9553 00007674 00000000            <2> windowvideobuf dd 0
  9554 00007678 00000000            <2> windowvideobuf2 dd 0
  9555 0000767C 00000000            <2> windowinfobuf dd 0
  9556 00007680 0000                <2> termcol dw 0
  9557 00007682 00000000            <2> wincopyendpos dd 0
  9558                              <2> 
  9559                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9560 00007686 C605[9F220000]01    <2> 		mov byte [termguion], 1
  9561 0000768D 6681C11000          <2> 		add cx, 16
  9562 00007692 668915[64760000]    <2> 		mov [winvcopystx], dx
  9563 00007699 66890D[66760000]    <2> 		mov [winvcopysty], cx
  9564 000076A0 8935[7C760000]      <2> 		mov [windowinfobuf], esi
  9565 000076A6 668B16              <2> 		mov dx, [esi]
  9566 000076A9 668B4E02            <2> 		mov cx, [esi + 2]
  9567 000076AD 31C0                <2> 		xor eax, eax
  9568 000076AF 31DB                <2> 		xor ebx, ebx
  9569 000076B1 6689D0              <2> 		mov ax, dx
  9570 000076B4 6689CB              <2> 		mov bx, cx
  9571 000076B7 66C1E803            <2> 		shr ax, 3
  9572 000076BB 66C1EB04            <2> 		shr bx, 4
  9573 000076BF 66A3[80760000]      <2> 		mov [termcol], ax
  9574 000076C5 A2[79240000]        <2> 		mov [charxy], al
  9575 000076CA 881D[7A240000]      <2> 		mov [charxy + 1], bl
  9576 000076D0 8B7E04              <2> 		mov edi, [esi + 4]
  9577 000076D3 893D[6C760000]      <2> 		mov [windowcolor], edi
  9578 000076D9 8B7E0C              <2> 		mov edi, [esi + 12]
  9579 000076DC 893D[78760000]      <2> 		mov [windowvideobuf2], edi
  9580 000076E2 8B7E08              <2> 		mov edi, [esi + 8]
  9581 000076E5 893D[74760000]      <2> 		mov [windowvideobuf], edi
  9582 000076EB 81FB00000000        <2> 		cmp ebx, 0
  9583 000076F1 0F84BB040000        <2> 		je near donewincopynow
  9584                              <2> 	findendposwin:
  9585 000076F7 01C7                <2> 		add edi, eax
  9586 000076F9 01C7                <2> 		add edi, eax
  9587 000076FB 4B                  <2> 		dec ebx
  9588 000076FC 81FB00000000        <2> 		cmp ebx, 0
  9589 00007702 77F3                <2> 		ja findendposwin
  9590 00007704 893D[82760000]      <2> 		mov [wincopyendpos], edi
  9591 0000770A 31FF                <2> 		xor edi, edi
  9592 0000770C 6631C0              <2> 		xor ax, ax
  9593 0000770F 6631DB              <2> 		xor bx, bx
  9594 00007712 6601D2              <2> 		add dx, dx
  9595 00007715 668915[68760000]    <2> 		mov [winvcopydx], dx
  9596 0000771C 66890D[6A760000]    <2> 		mov [winvcopycx], cx
  9597 00007723 668B0D[66760000]    <2> 		mov cx, [winvcopysty]
  9598 0000772A 6681E91000          <2> 		sub cx, 16
  9599 0000772F 668B15[64760000]    <2> 		mov dx, [winvcopystx]
  9600 00007736 C605[A0220000]00    <2> 		mov byte [termcopyon], 0
  9601 0000773D B403                <2> 		mov ah, 3
  9602 0000773F E8120A0000          <2> 		call graphicsadd
  9603                              <2> 	showwindow2:
  9604 00007744 6681C11000          <2> 		add cx, 16
  9605 00007749 668915[64760000]    <2> 		mov [winvcopystx], dx
  9606 00007750 66890D[66760000]    <2> 		mov [winvcopysty], cx
  9607 00007757 668B16              <2> 		mov dx, [esi]
  9608 0000775A 668B4E02            <2> 		mov cx, [esi + 2]
  9609 0000775E 6601D2              <2> 		add dx, dx
  9610 00007761 668915[68760000]    <2> 		mov [winvcopydx], dx
  9611 00007768 66890D[6A760000]    <2> 		mov [winvcopycx], cx
  9612 0000776F E818000000          <2> 		call reloadwindowtitle
  9613 00007774 803D[3D810000]01    <2> 		cmp byte [windrag], 1
  9614 0000777B 0F8340040000        <2> 		jae near forgetresetstuff
  9615 00007781 8B3D[70760000]      <2> 		mov edi, [windowbufloc]
  9616 00007787 E968020000          <2> 		jmp windowvideocopyset
  9617                              <2> 		
  9618                              <2> 	reloadwindowtitle:
  9619 0000778C 8B3D[70760000]      <2> 		mov edi, [windowbufloc]
  9620 00007792 31D2                <2> 		xor edx, edx
  9621 00007794 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  9622 0000779B C1E204              <2> 		shl edx, 4
  9623 0000779E 29D7                <2> 		sub edi, edx
  9624 000077A0 803D[A0220000]00    <2> 		cmp byte [termcopyon], 0
  9625 000077A7 7532                <2> 		jne nocleartitlebarpos
  9626 000077A9 8B3D[21570000]      <2> 		mov edi, [physbaseptr]
  9627 000077AF 31D2                <2> 		xor edx, edx
  9628 000077B1 668B15[64760000]    <2> 		mov dx, [winvcopystx]
  9629 000077B8 01D7                <2> 		add edi, edx
  9630 000077BA 31C9                <2> 		xor ecx, ecx
  9631 000077BC 668B0D[66760000]    <2> 		mov cx, [winvcopysty]
  9632 000077C3 6681E91000          <2> 		sub cx, 16
  9633 000077C8 6681F90000          <2> 		cmp cx, 0
  9634 000077CD 740C                <2> 		je nocleartitlebarpos
  9635                              <2> 	cleartitlebarpos:
  9636 000077CF 31C0                <2> 		xor eax, eax
  9637 000077D1 66A1[F9570000]      <2> 		mov ax, [resolutionx2]
  9638 000077D7 F7E1                <2> 		mul ecx
  9639 000077D9 01C7                <2> 		add edi, eax
  9640                              <2> 	nocleartitlebarpos:
  9641 000077DB 66B91000            <2> 		mov cx, 16
  9642 000077DF 668B15[68760000]    <2> 		mov dx, [winvcopydx]
  9643 000077E6 6681F90000          <2> 		cmp cx, 0
  9644 000077EB 0F8448000000        <2> 		je near canceltitlebarput
  9645 000077F1 6681FA0000          <2> 		cmp dx, 0
  9646 000077F6 0F843D000000        <2> 		je near canceltitlebarput
  9647                              <2> 	titlebarput:
  9648 000077FC 66A1[6C760000]      <2> 		mov ax, [windowcolor]
  9649 00007802 668907              <2> 		mov [edi], ax
  9650 00007805 6681EA0200          <2> 		sub dx, 2
  9651 0000780A 81C702000000        <2> 		add edi, 2
  9652 00007810 6681FA0000          <2> 		cmp dx, 0
  9653 00007815 75E5                <2> 		jne titlebarput
  9654 00007817 31D2                <2> 		xor edx, edx
  9655 00007819 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  9656 00007820 6649                <2> 		dec cx
  9657 00007822 662B15[68760000]    <2> 		sub dx, [winvcopydx]
  9658 00007829 01D7                <2> 		add edi, edx
  9659 0000782B 668B15[68760000]    <2> 		mov dx, [winvcopydx]
  9660 00007832 6681F90000          <2> 		cmp cx, 0
  9661 00007837 75C3                <2> 		jne titlebarput
  9662                              <2> 	canceltitlebarput:
  9663 00007839 893D[70760000]      <2> 		mov [windowbufloc], edi
  9664 0000783F 803D[A0220000]02    <2> 		cmp byte [termcopyon], 2
  9665 00007846 0F8416010000        <2> 		je near winvcpst
  9666 0000784C 668B1D[DB6D0000]    <2> 		mov bx, [background]
  9667 00007853 6653                <2> 		push bx
  9668                              <2> 		;mov bx, 1111111111111111b
  9669 00007855 6631DB              <2> 		xor bx, bx
  9670 00007858 66891D[DB6D0000]    <2> 		mov [background], bx
  9671 0000785F 6631C0              <2> 		xor ax, ax
  9672 00007862 81C610000000        <2> 		add esi, 16
  9673 00007868 668B15[64760000]    <2> 		mov dx, [winvcopystx]
  9674 0000786F 668B0D[66760000]    <2> 		mov cx, [winvcopysty]
  9675 00007876 6681E91000          <2> 		sub cx, 16
  9676 0000787B 668B1D[6C760000]    <2> 		mov bx, [windowcolor]
  9677 00007882 C605[D57B0000]01    <2> 		mov byte [mouseselecton], 1
  9678 00007889 E8A2FBFFFF          <2> 		call showstring2	;Show window title
  9679 0000788E 8B35[462B0000]      <2> 		mov esi, [usercache]
  9680 00007894 6681C21000          <2> 		add dx, 16
  9681 00007899 C605[D57B0000]01    <2> 		mov byte [mouseselecton], 1
  9682 000078A0 E88BFBFFFF          <2> 		call showstring2	;Show user name
  9683 000078A5 BE[358D0000]        <2> 		mov esi, computer
  9684 000078AA C605[D57B0000]01    <2> 		mov byte [mouseselecton], 1
  9685 000078B1 E87AFBFFFF          <2> 		call showstring2	;Show computer name
  9686 000078B6 B058                <2> 		mov al, "X"
  9687 000078B8 30E4                <2> 		xor ah, ah
  9688 000078BA 66BB00F8            <2> 		mov bx, 1111100000000000b
  9689 000078BE 668B15[64760000]    <2> 		mov dx, [winvcopystx]
  9690 000078C5 668B0D[66760000]    <2> 		mov cx, [winvcopysty]
  9691 000078CC 6681E91000          <2> 		sub cx, 16
  9692 000078D1 6681EA1000          <2> 		sub dx, 16
  9693 000078D6 660315[68760000]    <2> 		add dx, [winvcopydx]
  9694 000078DD C605[D57B0000]01    <2> 		mov byte [mouseselecton], 1
  9695 000078E4 663B15[F9570000]    <2> 		cmp dx, [resolutionx2]
  9696 000078EB 7305                <2> 		jae .nox
  9697 000078ED E87DFBFFFF          <2> 		call showfontvesa
  9698                              <2> .nox:
  9699 000078F2 668B1D[DB6D0000]    <2> 		mov bx, [background]
  9700 000078F9 6681EA1800          <2> 		sub dx, 24
  9701 000078FE B02B                <2> 		mov al, "+"
  9702 00007900 66BBE007            <2> 		mov bx, 0000011111100000b
  9703 00007904 C605[D57B0000]01    <2> 		mov byte [mouseselecton], 1
  9704 0000790B 663B15[F9570000]    <2> 		cmp dx, [resolutionx2]
  9705 00007912 7305                <2> 		jae .noplus
  9706 00007914 E856FBFFFF          <2> 		call showfontvesa
  9707                              <2> .noplus:
  9708 00007919 6681EA1800          <2> 		sub dx, 24
  9709 0000791E B02D                <2> 		mov al, "-"
  9710 00007920 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9711 00007924 C605[D57B0000]01    <2> 		mov byte [mouseselecton], 1
  9712 0000792B 663B15[F9570000]    <2> 		cmp dx, [resolutionx2]
  9713 00007932 7305                <2> 		jae .nominus
  9714 00007934 E836FBFFFF          <2> 		call showfontvesa
  9715                              <2> .nominus:
  9716 00007939 6681EA1800          <2> 		sub dx, 24
  9717 0000793E B03F                <2> 		mov al, "?"
  9718 00007940 66BB1F00            <2> 		mov bx, 0000000000011111b
  9719 00007944 C605[D57B0000]01    <2> 		mov byte [mouseselecton], 1
  9720 0000794B 663B15[F9570000]    <2> 		cmp dx, [resolutionx2]
  9721 00007952 7305                <2> 		jae .noquestion
  9722 00007954 E816FBFFFF          <2> 		call showfontvesa
  9723                              <2> .noquestion:
  9724 00007959 665B                <2> 		pop bx
  9725 0000795B 66891D[DB6D0000]    <2> 		mov [background], bx
  9726                              <2> 	winvcpst:
  9727 00007962 C3                  <2> 		ret
  9728                              <2> 
  9729                              <2> 	windowvideocopy:
  9730 00007963 8B35[7C760000]      <2> 		mov esi, [windowinfobuf]
  9731 00007969 668B16              <2> 		mov dx, [esi]
  9732 0000796C 668B4E02            <2> 		mov cx, [esi + 2]
  9733 00007970 8B7E04              <2> 		mov edi, [esi + 4]
  9734 00007973 893D[6C760000]      <2> 		mov [windowcolor], edi
  9735 00007979 8B7E08              <2> 		mov edi, [esi + 8]
  9736 0000797C 8B5E0C              <2> 		mov ebx, [esi + 12]
  9737 0000797F 893D[74760000]      <2> 		mov [windowvideobuf], edi
  9738 00007985 891D[78760000]      <2> 		mov [windowvideobuf2], ebx
  9739 0000798B 31C0                <2> 		xor eax, eax
  9740 0000798D 31DB                <2> 		xor ebx, ebx
  9741 0000798F 6689D0              <2> 		mov ax, dx
  9742 00007992 6689CB              <2> 		mov bx, cx
  9743 00007995 66C1E803            <2> 		shr ax, 3
  9744 00007999 66C1EB04            <2> 		shr bx, 4
  9745 0000799D 66A3[80760000]      <2> 		mov [termcol], ax
  9746 000079A3 A2[79240000]        <2> 		mov [charxy], al
  9747 000079A8 881D[7A240000]      <2> 		mov [charxy + 1], bl
  9748 000079AE 8B3D[70760000]      <2> 		mov edi, [windowbufloc]
  9749 000079B4 3B3D[21570000]      <2> 		cmp edi, [physbaseptr]
  9750 000079BA 0F8334000000        <2> 		jae near windowvideocopyset
  9751 000079C0 31C9                <2> 		xor ecx, ecx
  9752 000079C2 31D2                <2> 		xor edx, edx
  9753 000079C4 668B15[64760000]    <2> 		mov dx, [winvcopystx]
  9754 000079CB 668B0D[66760000]    <2> 		mov cx, [winvcopysty]
  9755 000079D2 8B3D[21570000]      <2> 		mov edi, [physbaseptr]
  9756 000079D8 01D7                <2> 		add edi, edx
  9757 000079DA 81F900000000        <2> 		cmp ecx, 0
  9758 000079E0 7412                <2> 		je windowvideocopyset
  9759                              <2> 	yrescopylp:
  9760 000079E2 31C0                <2> 		xor eax, eax
  9761 000079E4 66A1[F9570000]      <2> 		mov ax, [resolutionx2]
  9762 000079EA F7E1                <2> 		mul ecx
  9763 000079EC 01C7                <2> 		add edi, eax
  9764 000079EE 893D[70760000]      <2> 		mov [windowbufloc], edi
  9765                              <2> 	windowvideocopyset:
  9766 000079F4 6631C9              <2> 		xor cx, cx
  9767 000079F7 6649                <2> 		dec cx
  9768 000079F9 66890D[C97B0000]    <2> 		mov [charposline], cx
  9769 00007A00 89FE                <2> 		mov esi, edi
  9770 00007A02 81EE10000000        <2> 		sub esi, 16
  9771 00007A08 31D2                <2> 		xor edx, edx
  9772 00007A0A 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  9773 00007A11 C1E204              <2> 		shl edx, 4
  9774 00007A14 01D6                <2> 		add esi, edx
  9775 00007A16 8B3D[74760000]      <2> 		mov edi, [windowvideobuf]
  9776 00007A1C 81EF02000000        <2> 		sub edi, 2
  9777 00007A22 893D[CB7B0000]      <2> 		mov [charposvbuf], edi
  9778 00007A28 E97A000000          <2> 		jmp nextcharwin
  9779                              <2> 	win.write:	;adjusted this to use alpha
  9780                              <2> 				;5R, 6G, 5B
  9781                              <2> %ifdef gui.alphablending
  9782                              <2> 		push esi
  9783                              <2> 		push bx
  9784                              <2> 		push cx
  9785                              <2> 		push dx
  9786                              <2> %ifdef gui.background
  9787                              <2> 		mov esi, edi
  9788                              <2> 		sub esi, [physbaseptr]
  9789                              <2> 		add esi, [backgroundimage]
  9790                              <2> 		cmp dword [backgroundimage], 0
  9791                              <2> 		jne .red
  9792                              <2> %endif
  9793                              <2> 		mov esi, background
  9794                              <2> 	.red:
  9795                              <2> 		mov cx, [esi]
  9796                              <2> 		shr cx, 11
  9797                              <2> 		mov bx, ax
  9798                              <2> 		shr bx, 11
  9799                              <2> 		add cx, bx
  9800                              <2> 		add cx, bx
  9801                              <2> 		add cx, bx
  9802                              <2> 		shr cx, 2
  9803                              <2> 		shl cx, 11
  9804                              <2> 		mov dx, cx
  9805                              <2> 	.green:
  9806                              <2> 		mov cx, [esi]
  9807                              <2> 		shl cx, 5
  9808                              <2> 		shr cx, 10
  9809                              <2> 		mov bx, ax
  9810                              <2> 		shl bx, 5
  9811                              <2> 		shr bx, 10
  9812                              <2> 		add cx, bx
  9813                              <2> 		add cx, bx
  9814                              <2> 		add cx, bx
  9815                              <2> 		shr cx, 2
  9816                              <2> 		shl cx, 5
  9817                              <2> 		add dx, cx
  9818                              <2> 	.blue:
  9819                              <2> 		mov cx, [esi]
  9820                              <2> 		shl cx, 11
  9821                              <2> 		shr cx, 11
  9822                              <2> 		mov bx, ax
  9823                              <2> 		shl bx, 11
  9824                              <2> 		shr bx, 11
  9825                              <2> 		add cx, bx
  9826                              <2> 		add cx, bx
  9827                              <2> 		add cx, bx
  9828                              <2> 		shr cx, 2
  9829                              <2> 		add dx, cx
  9830                              <2> 		mov [edi], dx
  9831                              <2> 		pop dx
  9832                              <2> 		pop cx
  9833                              <2> 		pop bx
  9834                              <2> 		pop esi
  9835                              <2> %else
  9836 00007A2D 668907              <2> 		mov [edi], ax
  9837                              <2> %endif
  9838 00007A30 C3                  <2> 		ret
  9839                              <2> 	copywindow:
  9840 00007A31 B201                <2> 		mov dl, 1
  9841 00007A33 D0C6                <2> 		rol dh, 1
  9842 00007A35 20F2                <2> 		and dl, dh
  9843 00007A37 803D[60740000]10    <2> 		cmp byte [colorcache], 0x10
  9844 00007A3E 7320                <2> 		jae switchwincolors
  9845 00007A40 66A1[6E760000]      <2> 		mov ax, [windowcolor + 2]
  9846 00007A46 E8E2FFFFFF          <2> 		call win.write
  9847 00007A4B 80FA00              <2> 		cmp dl, 0
  9848 00007A4E 742B                <2> 		je nowritewin
  9849 00007A50 66A1[6C760000]      <2> 		mov ax, [windowcolor]
  9850 00007A56 E8D2FFFFFF          <2> 		call win.write
  9851 00007A5B E91B000000          <2> 		jmp nowritewin
  9852                              <2> 	switchwincolors:
  9853 00007A60 66A1[6C760000]      <2> 		mov ax, [windowcolor]
  9854 00007A66 E8C2FFFFFF          <2> 		call win.write
  9855 00007A6B 80FA00              <2> 		cmp dl, 0
  9856 00007A6E 740B                <2> 		je nowritewin
  9857 00007A70 66A1[6E760000]      <2> 		mov ax, [windowcolor + 2]
  9858 00007A76 E8B2FFFFFF          <2> 		call win.write
  9859                              <2> 	nowritewin:
  9860 00007A7B 81C702000000        <2> 		add edi, 2
  9861 00007A81 FEC1                <2> 		inc cl
  9862 00007A83 80F908              <2> 		cmp cl, 8
  9863 00007A86 75A9                <2> 		jne copywindow
  9864 00007A88 6643                <2> 		inc bx
  9865 00007A8A 30C9                <2> 		xor cl, cl
  9866 00007A8C 31D2                <2> 		xor edx, edx
  9867 00007A8E 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  9868 00007A95 01D6                <2> 		add esi, edx
  9869 00007A97 89F7                <2> 		mov edi, esi
  9870 00007A99 678AB7[6A8D]        <2> 		mov dh, [fonts + bx]
  9871 00007A9E D0CE                <2> 		ror dh, 1
  9872 00007AA0 FEC5                <2> 		inc ch
  9873 00007AA2 80FD10              <2> 		cmp ch, 16
  9874 00007AA5 758A                <2> 		jne copywindow
  9875                              <2> 	nextcharwin:
  9876 00007AA7 6631C9              <2> 		xor cx, cx
  9877 00007AAA 8B3D[CB7B0000]      <2> 		mov edi, [charposvbuf]
  9878 00007AB0 81C702000000        <2> 		add edi, 2
  9879 00007AB6 3B3D[82760000]      <2> 		cmp edi, [wincopyendpos]
  9880 00007ABC 0F83F0000000        <2> 		jae near donewincopynow
  9881 00007AC2 8A7F01              <2> 		mov bh, [edi + 1]
  9882 00007AC5 80FF00              <2> 		cmp bh, 0
  9883 00007AC8 7505                <2> 		jne nofixcolorwin
  9884 00007ACA B707                <2> 		mov bh, 7
  9885 00007ACC 887F01              <2> 		mov [edi + 1], bh
  9886                              <2> 	nofixcolorwin:
  9887 00007ACF 883D[60740000]      <2> 		mov [colorcache], bh
  9888 00007AD5 8A1F                <2> 		mov bl, [edi]
  9889 00007AD7 893D[CB7B0000]      <2> 		mov [charposvbuf], edi
  9890 00007ADD 813D[78760000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9891 00007AE5 0000                <2>
  9892 00007AE7 7459                <2> 		je noskipcharcopy
  9893 00007AE9 2B3D[74760000]      <2> 		sub edi, [windowvideobuf]
  9894 00007AEF 033D[78760000]      <2> 		add edi, [windowvideobuf2]
  9895 00007AF5 8A6701              <2> 		mov ah, [edi + 1]
  9896 00007AF8 8A07                <2> 		mov al, [edi]
  9897 00007AFA 6639D8              <2> 		cmp ax, bx
  9898 00007AFD 7543                <2> 		jne noskipcharcopy
  9899                              <2> 	skipcharcopy:
  9900 00007AFF 81C610000000        <2> 		add esi, 16
  9901 00007B05 668B0D[C97B0000]    <2> 		mov cx, [charposline]
  9902 00007B0C 6641                <2> 		inc cx
  9903 00007B0E 66890D[C97B0000]    <2> 		mov [charposline], cx
  9904 00007B15 663B0D[80760000]    <2> 		cmp cx, [termcol]
  9905 00007B1C 7289                <2> 		jb nextcharwin
  9906 00007B1E 6631C9              <2> 		xor cx, cx
  9907 00007B21 66890D[C97B0000]    <2> 		mov [charposline], cx
  9908 00007B28 31D2                <2> 		xor edx, edx
  9909 00007B2A 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  9910 00007B31 C1E204              <2> 		shl edx, 4
  9911 00007B34 662B15[68760000]    <2> 		sub dx, [winvcopydx]
  9912 00007B3B 01D6                <2> 		add esi, edx
  9913 00007B3D E965FFFFFF          <2> 		jmp nextcharwin
  9914                              <2> 	noskipcharcopy:
  9915 00007B42 881F                <2> 		mov [edi], bl
  9916 00007B44 887F01              <2> 		mov [edi + 1], bh
  9917 00007B47 8B3D[CB7B0000]      <2> 		mov edi, [charposvbuf]
  9918 00007B4D 30FF                <2> 		xor bh, bh
  9919 00007B4F 66C1E304            <2> 		shl bx, 4
  9920 00007B53 31D2                <2> 		xor edx, edx
  9921 00007B55 668B15[F9570000]    <2> 		mov dx, [resolutionx2]
  9922 00007B5C C1E204              <2> 		shl edx, 4
  9923 00007B5F 29D6                <2> 		sub esi, edx
  9924 00007B61 81C610000000        <2> 		add esi, 16
  9925 00007B67 89F7                <2> 		mov edi, esi
  9926 00007B69 668B0D[C97B0000]    <2> 		mov cx, [charposline]
  9927 00007B70 6641                <2> 		inc cx
  9928 00007B72 663B0D[80760000]    <2> 		cmp cx, [termcol]
  9929 00007B79 7316                <2> 		jae fixwindowcopy
  9930 00007B7B 66890D[C97B0000]    <2> 		mov [charposline], cx
  9931 00007B82 6631C9              <2> 		xor cx, cx
  9932 00007B85 678AB7[6A8D]        <2> 		mov dh, [fonts + bx]
  9933 00007B8A D0CE                <2> 		ror dh, 1
  9934 00007B8C E9A0FEFFFF          <2> 		jmp copywindow
  9935                              <2> fixwindowcopy:
  9936 00007B91 6631C9              <2> 		xor cx, cx
  9937 00007B94 66890D[C97B0000]    <2> 		mov [charposline], cx
  9938 00007B9B 662B15[68760000]    <2> 		sub dx, [winvcopydx]
  9939 00007BA2 01D6                <2> 		add esi, edx
  9940 00007BA4 89F7                <2> 		mov edi, esi
  9941 00007BA6 678AB7[6A8D]        <2> 		mov dh, [fonts + bx]
  9942 00007BAB D0CE                <2> 		ror dh, 1
  9943 00007BAD E97FFEFFFF          <2> 		jmp copywindow
  9944                              <2> donewincopynow:
  9945 00007BB2 803D[A0220000]01    <2> 		cmp byte [termcopyon], 1
  9946 00007BB9 7506                <2> 		jne forgetresetstuff
  9947 00007BBB E88BACFFFF          <2> 		call switchtermcursor
  9948 00007BC0 61                  <2> 		popa
  9949                              <2> forgetresetstuff:
  9950 00007BC1 C605[A0220000]00    <2> 		mov byte [termcopyon], 0
  9951 00007BC8 C3                  <2> 		ret
  9952                              <2> 		
  9953 00007BC9 0000                <2> charposline dw 0
  9954 00007BCB 00000000            <2> charposvbuf dw 0,0
  9955                              <1> 				
  9956 00007BCF 00                  <1> copygui db 0
  9957 00007BD0 00                  <1> graphicsset db 0
  9958 00007BD1 0000                <1> graphicspos db 0,0
  9959 00007BD3 00                  <1> showcursorfonton db 0
  9960 00007BD4 00                  <1> savefonton db 0
  9961 00007BD5 00                  <1> mouseselecton db 0
  9962                              <1> 
  9963 00007BD6 00                  <1> pbutton db 0
  9964 00007BD7 00                  <1> pLBUTTON db 0
  9965 00007BD8 00                  <1> pRBUTTON db 0
  9966 00007BD9 00000000            <1> dragging dw 0,0
  9967 00007BDD 0000000000000000    <1> lastpos dw 0,0,0,0
  9968 00007BE5 00000000            <1> colorbuf dw 0,0
  9969                              <1> 	
  9970                              <1> 	clickicon:
  9971 00007BE9 B001                <1> 		mov al, 1
  9972 00007BEB A2[D67B0000]        <1> 		mov [pbutton], al
  9973 00007BF0 A0[D77B0000]        <1> 		mov al, [pLBUTTON]
  9974 00007BF5 2205[005B0000]      <1> 		and al, [LBUTTON]
  9975 00007BFB 8A25[D87B0000]      <1> 		mov ah, [pRBUTTON]
  9976 00007C01 2225[015B0000]      <1> 		and ah, [RBUTTON]
  9977 00007C07 08E0                <1> 		or al, ah
  9978 00007C09 3C00                <1> 		cmp al, 0
  9979 00007C0B 741B                <1> 		je nodragclick
  9980 00007C0D 813D[D97B0000]0100- <1> 		cmp dword [dragging], 1
  9981 00007C15 0000                <1>
  9982 00007C17 732F                <1> 		jae dragclick
  9983 00007C19 C705[D97B0000]0100- <1> 		mov dword [dragging], 1
  9984 00007C21 0000                <1>
  9985 00007C23 E920000000          <1> 		jmp dragclick
  9986                              <1> 	nodragclick:
  9987 00007C28 31C0                <1> 		xor eax, eax
  9988 00007C2A A3[D97B0000]        <1> 		mov dword [dragging], eax
  9989 00007C2F A2[D67B0000]        <1> 		mov [pbutton], al
  9990 00007C34 A0[005B0000]        <1> 		mov al, [LBUTTON]
  9991 00007C39 A2[D77B0000]        <1> 		mov [pLBUTTON], al
  9992 00007C3E A0[015B0000]        <1> 		mov al, [RBUTTON]
  9993 00007C43 A2[D87B0000]        <1> 		mov [pRBUTTON], al
  9994                              <1> 	dragclick:
  9995 00007C48 6631C0              <1> 		xor ax, ax
  9996 00007C4B BE[37D00000]        <1> 		mov esi, graphicstable
  9997 00007C50 C705[29840000]0000- <1> 		mov dword [codepointer], 0
  9998 00007C58 0000                <1>
  9999                              <1> 	clicon2:
 10000 00007C5A 31D2                <1> 		xor edx, edx
 10001 00007C5C 31C9                <1> 		xor ecx, ecx
 10002 00007C5E 66813E0100          <1> 		cmp word [esi], 1
 10003 00007C63 0F841B000000        <1> 		je near iconselect
 10004 00007C69 66813E0200          <1> 		cmp word [esi], 2
 10005 00007C6E 0F8472010000        <1> 		je near textselected
 10006 00007C74 66813E0300          <1> 		cmp word [esi], 3
 10007 00007C79 0F84C7020000        <1> 		je near windowselect
 10008 00007C7F E910040000          <1> 		jmp nexticonsel
 10009                              <1> 	iconselect:
 10010 00007C84 668B5606            <1> 		mov dx, [esi + 6]
 10011 00007C88 6689D0              <1> 		mov ax, dx
 10012 00007C8B 668B4E08            <1> 		mov cx, [esi + 8]
 10013 00007C8F 6689CB              <1> 		mov bx, cx
 10014 00007C92 6681C32000          <1> 		add bx, 32
 10015 00007C97 6601D0              <1> 		add ax, dx
 10016 00007C9A 813D[D97B0000]0100- <1> 		cmp dword [dragging], 1
 10017 00007CA2 0000                <1>
 10018 00007CA4 746F                <1> 		je dragicon
 10019 00007CA6 813D[D97B0000]0000- <1> 		cmp dword [dragging], 0
 10020 00007CAE 0000                <1>
 10021 00007CB0 7411                <1> 		je nodragiconcheck
 10022 00007CB2 3935[D97B0000]      <1> 		cmp dword [dragging], esi
 10023 00007CB8 0F85D6030000        <1> 		jne near nexticonsel
 10024 00007CBE E952000000          <1> 		jmp dragicon
 10025                              <1> 	nodragiconcheck:
 10026 00007CC3 663905[EF590000]    <1> 		cmp [mousecursorposition], ax
 10027 00007CCA 0F82C4030000        <1> 		jb near nexticonsel
 10028 00007CD0 66054000            <1> 		add ax, 64
 10029 00007CD4 663905[EF590000]    <1> 		cmp [mousecursorposition], ax
 10030 00007CDB 0F87B3030000        <1> 		ja near nexticonsel
 10031 00007CE1 6629D0              <1> 		sub ax, dx
 10032 00007CE4 66390D[F1590000]    <1> 		cmp [mousecursorposition + 2], cx
 10033 00007CEB 0F82A3030000        <1> 		jb near nexticonsel
 10034 00007CF1 66391D[F1590000]    <1> 		cmp [mousecursorposition + 2], bx
 10035 00007CF8 0F8796030000        <1> 		ja near nexticonsel
 10036 00007CFE 668B460A            <1> 		mov ax, [esi + 10]
 10037 00007D02 66250100            <1> 		and ax, 1
 10038 00007D06 663D0100            <1> 		cmp ax, 1
 10039 00007D0A 0F84B6000000        <1> 		je near unselecticon
 10040 00007D10 E98D000000          <1> 		jmp nodragicon
 10041                              <1> 	dragicon:
 10042 00007D15 663905[EB590000]    <1> 		cmp [lastmouseposition], ax
 10043 00007D1C 0F8272030000        <1> 		jb near nexticonsel
 10044 00007D22 66054000            <1> 		add ax, 64
 10045 00007D26 663905[EB590000]    <1> 		cmp [lastmouseposition], ax
 10046 00007D2D 0F8761030000        <1> 		ja near nexticonsel
 10047 00007D33 6629D0              <1> 		sub ax, dx
 10048 00007D36 66390D[ED590000]    <1> 		cmp [lastmouseposition + 2], cx
 10049 00007D3D 0F8251030000        <1> 		jb near nexticonsel
 10050 00007D43 66391D[ED590000]    <1> 		cmp [lastmouseposition + 2], bx
 10051 00007D4A 0F8744030000        <1> 		ja near nexticonsel
 10052 00007D50 668B460A            <1> 		mov ax, [esi + 10]
 10053 00007D54 2410                <1> 		and al, 00010000b
 10054 00007D56 3C10                <1> 		cmp al, 00010000b
 10055 00007D58 7448                <1> 		je nodragicon
 10056 00007D5A 8935[D97B0000]      <1> 		mov [dragging], esi
 10057 00007D60 66D1E2              <1> 		shl dx, 1
 10058 00007D63 662B15[EB590000]    <1> 		sub dx, [lastmouseposition]
 10059 00007D6A 660315[EF590000]    <1> 		add dx, [mousecursorposition]
 10060 00007D71 66D1EA              <1> 		shr dx, 1
 10061 00007D74 66030D[F1590000]    <1> 		add cx, [mousecursorposition + 2]
 10062 00007D7B 662B0D[ED590000]    <1> 		sub cx, [lastmouseposition + 2]
 10063 00007D82 663B15[F9570000]    <1> 		cmp dx, [resolutionx2]
 10064 00007D89 7607                <1> 		jbe chkyresdrgicn
 10065 00007D8B 668B15[EF590000]    <1> 		mov dx, [mousecursorposition]
 10066                              <1> 	chkyresdrgicn:
 10067 00007D92 663B0D[0D570000]    <1> 		cmp cx, [resolutiony]
 10068 00007D99 7607                <1> 		jbe nodragicon
 10069 00007D9B 668B0D[F1590000]    <1> 		mov cx, [mousecursorposition + 2]
 10070                              <1> 	nodragicon:
 10071 00007DA2 66814E0A0100        <1> 		or word [esi + 10], 1
 10072 00007DA8 8B5E0C              <1> 		mov ebx, [esi + 12]
 10073 00007DAB 668B460A            <1> 		mov ax, [esi + 10]
 10074 00007DAF 8B7602              <1> 		mov esi, [esi + 2]
 10075 00007DB2 C705[29840000]0000- <1> 		mov dword [codepointer], 0
 10076 00007DBA 0000                <1>
 10077 00007DBC E8CDEDFFFF          <1> 		call showicon
 10078 00007DC1 E9E7020000          <1> 		jmp doneiconsel
 10079                              <1> 	unselecticon:
 10080 00007DC6 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10081 00007DCC 8B5E0C              <1> 		mov ebx, [esi + 12]
 10082 00007DCF 668B460A            <1> 		mov ax, [esi + 10]
 10083 00007DD3 8B7602              <1> 		mov esi, [esi + 2]
 10084 00007DD6 891D[29840000]      <1> 		mov [codepointer], ebx
 10085 00007DDC E8ADEDFFFF          <1> 		call showicon
 10086 00007DE1 E9C7020000          <1> 		jmp doneiconsel
 10087                              <1> 	textselected:
 10088 00007DE6 8B5E02              <1> 		mov ebx, [esi + 2]
 10089 00007DE9 668B5606            <1> 		mov dx, [esi + 6]
 10090 00007DED 6689D0              <1> 		mov ax, dx
 10091 00007DF0 668B4E08            <1> 		mov cx, [esi + 8]
 10092                              <1> 	lengthtesttext:
 10093 00007DF4 803B00              <1> 		cmp byte [ebx], 0
 10094 00007DF7 7407                <1> 		je donetesttextlength
 10095 00007DF9 43                  <1> 		inc ebx
 10096 00007DFA 66051000            <1> 		add ax, 16
 10097 00007DFE EBF4                <1> 		jmp lengthtesttext
 10098                              <1> 	donetesttextlength:
 10099 00007E00 6689CB              <1> 		mov bx, cx
 10100 00007E03 6681C30F00          <1> 		add bx, 15
 10101 00007E08 813D[D97B0000]0100- <1> 		cmp dword [dragging], 1
 10102 00007E10 0000                <1>
 10103 00007E12 7468                <1> 		je dragtext
 10104 00007E14 813D[D97B0000]0000- <1> 		cmp dword [dragging], 0
 10105 00007E1C 0000                <1>
 10106 00007E1E 7411                <1> 		je nodragtextcheck
 10107 00007E20 3935[D97B0000]      <1> 		cmp dword [dragging], esi
 10108 00007E26 0F8568020000        <1> 		jne near nexticonsel
 10109 00007E2C E94B000000          <1> 		jmp dragtext
 10110                              <1> 	nodragtextcheck:
 10111 00007E31 663915[EF590000]    <1> 		cmp [mousecursorposition], dx
 10112 00007E38 0F8256020000        <1> 		jb near nexticonsel
 10113 00007E3E 663905[EF590000]    <1> 		cmp [mousecursorposition], ax
 10114 00007E45 0F8749020000        <1> 		ja near nexticonsel
 10115 00007E4B 66390D[F1590000]    <1> 		cmp [mousecursorposition + 2], cx
 10116 00007E52 0F823C020000        <1> 		jb near nexticonsel
 10117 00007E58 66391D[F1590000]    <1> 		cmp [mousecursorposition + 2], bx
 10118 00007E5F 0F872F020000        <1> 		ja near nexticonsel
 10119 00007E65 668B460A            <1> 		mov ax, [esi + 10]
 10120 00007E69 66250100            <1> 		and ax, 1
 10121 00007E6D 663D0100            <1> 		cmp ax, 1
 10122 00007E71 0F84AB000000        <1> 		je near unselecttext
 10123 00007E77 E986000000          <1> 		jmp nodragtext
 10124                              <1> 	dragtext:
 10125 00007E7C 663915[EB590000]    <1> 		cmp [lastmouseposition], dx
 10126 00007E83 0F820B020000        <1> 		jb near nexticonsel
 10127 00007E89 663905[EB590000]    <1> 		cmp [lastmouseposition], ax
 10128 00007E90 0F87FE010000        <1> 		ja near nexticonsel
 10129 00007E96 66390D[ED590000]    <1> 		cmp [lastmouseposition + 2], cx
 10130 00007E9D 0F82F1010000        <1> 		jb near nexticonsel
 10131 00007EA3 66391D[ED590000]    <1> 		cmp [lastmouseposition + 2], bx
 10132 00007EAA 0F87E4010000        <1> 		ja near nexticonsel
 10133 00007EB0 668B460A            <1> 		mov ax, [esi + 10]
 10134 00007EB4 2410                <1> 		and al, 00010000b
 10135 00007EB6 663D1000            <1> 		cmp ax, 00010000b
 10136 00007EBA 0F8442000000        <1> 		je near nodragtext
 10137 00007EC0 8935[D97B0000]      <1> 		mov [dragging], esi
 10138 00007EC6 662B15[EB590000]    <1> 		sub dx, [lastmouseposition]
 10139 00007ECD 660315[EF590000]    <1> 		add dx, [mousecursorposition]
 10140 00007ED4 66030D[F1590000]    <1> 		add cx, [mousecursorposition + 2]
 10141 00007EDB 662B0D[ED590000]    <1> 		sub cx, [lastmouseposition + 2]
 10142 00007EE2 663B15[F9570000]    <1> 		cmp dx, [resolutionx2]
 10143 00007EE9 7607                <1> 		jbe chkyresdrgtxt
 10144 00007EEB 668B15[EF590000]    <1> 		mov dx, [mousecursorposition]
 10145                              <1> 	chkyresdrgtxt:
 10146 00007EF2 663B0D[0D570000]    <1> 		cmp cx, [resolutiony]
 10147 00007EF9 7607                <1> 		jbe nodragtext
 10148 00007EFB 668B0D[F1590000]    <1> 		mov cx, [mousecursorposition + 2]
 10149                              <1> 	nodragtext:
 10150 00007F02 66814E0A0100        <1> 		or word [esi + 10], 1
 10151 00007F08 8B5E0C              <1> 		mov ebx, [esi + 12]
 10152 00007F0B 891D[29840000]      <1> 		mov [codepointer], ebx
 10153 00007F11 668B460A            <1> 		mov ax, [esi + 10]
 10154 00007F15 8B7602              <1> 		mov esi, [esi + 2]
 10155 00007F18 E800F5FFFF          <1> 		call showstring
 10156 00007F1D E98B010000          <1> 		jmp doneiconsel
 10157                              <1> 	unselecttext:
 10158 00007F22 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10159 00007F28 8B5E0C              <1> 		mov ebx, [esi + 12]
 10160 00007F2B 668B460A            <1> 		mov ax, [esi + 10]
 10161 00007F2F 8B7602              <1> 		mov esi, [esi + 2]
 10162 00007F32 C705[29840000]0000- <1> 		mov dword [codepointer], 0
 10163 00007F3A 0000                <1>
 10164 00007F3C E8DCF4FFFF          <1> 		call showstring
 10165 00007F41 E967010000          <1> 		jmp doneiconsel
 10166                              <1> windowselect:
 10167 00007F46 8B7E02              <1> 		mov edi, [esi + 2]
 10168 00007F49 668B5606            <1> 		mov dx, [esi + 6]
 10169 00007F4D 6689D0              <1> 		mov ax, dx
 10170 00007F50 668B4E08            <1> 		mov cx, [esi + 8]
 10171 00007F54 6689CB              <1> 		mov bx, cx
 10172 00007F57 6681C31000          <1> 		add bx, 16
 10173 00007F5C 813D[D97B0000]0100- <1> 		cmp dword [dragging], 1
 10174 00007F64 0000                <1>
 10175 00007F66 746D                <1> 		je dragwin
 10176 00007F68 813D[D97B0000]0000- <1> 		cmp dword [dragging], 0
 10177 00007F70 0000                <1>
 10178 00007F72 7411                <1> 		je nodragwincheck
 10179 00007F74 3935[D97B0000]      <1> 		cmp dword [dragging], esi
 10180 00007F7A 0F8514010000        <1> 		jne near nexticonsel
 10181 00007F80 E950000000          <1> 		jmp dragwin
 10182                              <1> 	nodragwincheck:
 10183 00007F85 663905[EF590000]    <1> 		cmp [mousecursorposition], ax
 10184 00007F8C 0F8202010000        <1> 		jb near nexticonsel
 10185 00007F92 660307              <1> 		add ax, [edi]
 10186 00007F95 660307              <1> 		add ax, [edi]
 10187 00007F98 663905[EF590000]    <1> 		cmp [mousecursorposition], ax
 10188 00007F9F 0F87EF000000        <1> 		ja near nexticonsel
 10189 00007FA5 66390D[F1590000]    <1> 		cmp [mousecursorposition + 2], cx
 10190 00007FAC 0F82E2000000        <1> 		jb near nexticonsel
 10191 00007FB2 66391D[F1590000]    <1> 		cmp [mousecursorposition + 2], bx
 10192 00007FB9 0F87D5000000        <1> 		ja near nexticonsel
 10193 00007FBF 662D1400            <1> 		sub ax, 20
 10194 00007FC3 663905[EF590000]    <1> 		cmp [mousecursorposition], ax
 10195 00007FCA 0F87A4000000        <1> 		ja near killwin
 10196 00007FD0 E98B000000          <1> 		jmp nodragwin
 10197                              <1> 	dragwin:
 10198 00007FD5 663905[EB590000]    <1> 		cmp [lastmouseposition], ax
 10199 00007FDC 0F82B2000000        <1> 		jb near nexticonsel
 10200 00007FE2 660307              <1> 		add ax, [edi]
 10201 00007FE5 660307              <1> 		add ax, [edi]
 10202 00007FE8 663905[EB590000]    <1> 		cmp [lastmouseposition], ax
 10203 00007FEF 0F879F000000        <1> 		ja near nexticonsel
 10204 00007FF5 66390D[ED590000]    <1> 		cmp [lastmouseposition + 2], cx
 10205 00007FFC 0F8292000000        <1> 		jb near nexticonsel
 10206 00008002 66391D[ED590000]    <1> 		cmp [lastmouseposition + 2], bx
 10207 00008009 0F8785000000        <1> 		ja near nexticonsel
 10208 0000800F 8935[D97B0000]      <1> 		mov [dragging], esi
 10209 00008015 803D[3D810000]01    <1> 		cmp byte [windrag], 1
 10210 0000801C 7706                <1> 		ja .nochangewindrag
 10211 0000801E FE05[3D810000]      <1> 		inc byte [windrag]
 10212                              <1> 	.nochangewindrag:
 10213 00008024 662B15[EB590000]    <1> 		sub dx, [lastmouseposition]
 10214 0000802B 660315[EF590000]    <1> 		add dx, [mousecursorposition]
 10215 00008032 66030D[F1590000]    <1> 		add cx, [mousecursorposition + 2]
 10216 00008039 662B0D[ED590000]    <1> 		sub cx, [lastmouseposition + 2]
 10217 00008040 663B15[F9570000]    <1> 		cmp dx, [resolutionx2]
 10218 00008047 7607                <1> 		jbe chkyresdrgwin
 10219 00008049 668B15[EF590000]    <1> 		mov dx, [mousecursorposition]
 10220                              <1> 	chkyresdrgwin:
 10221 00008050 663B0D[0D570000]    <1> 		cmp cx, [resolutiony]
 10222 00008057 7607                <1> 		jbe nodragwin
 10223 00008059 668B0D[F1590000]    <1> 		mov cx, [mousecursorposition + 2]
 10224                              <1> 	nodragwin:
 10225 00008060 8B5E0C              <1> 		mov ebx, [esi + 12]
 10226 00008063 668B460A            <1> 		mov ax, [esi + 10]
 10227 00008067 8B7602              <1> 		mov esi, [esi + 2]
 10228 0000806A E817F6FFFF          <1> 		call showwindow
 10229 0000806F E939000000          <1> 		jmp doneiconsel
 10230                              <1> 	killwin:
 10231 00008074 66C7060000          <1> 		mov word [esi], 0
 10232 00008079 C605[9F220000]00    <1> 		mov byte [termguion], 0
 10233 00008080 E80AEDFFFF          <1> 		call guiclear
 10234 00008085 E855EDFFFF          <1> 		call reloadallgraphics
 10235 0000808A E89CEAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10236 0000808F E978E6FFFF          <1> 		jmp guistart
 10237                              <1> 	nexticonsel:
 10238 00008094 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10239 0000809A 81C610000000        <1> 		add esi, 16
 10240 000080A0 81FE[37D20000]      <1> 		cmp esi, graphicstableend
 10241 000080A6 7305                <1> 		jae doneiconsel
 10242 000080A8 E9ADFBFFFF          <1> 		jmp clicon2
 10243                              <1> 	doneiconsel:
 10244 000080AD 813D[D97B0000]0100- <1> 		cmp dword [dragging], 1
 10245 000080B5 0000                <1>
 10246 000080B7 731A                <1> 		jae doneiconsel2
 10247 000080B9 A2[3D810000]        <1> 		mov [windrag], al
 10248 000080BE 813D[29840000]0000- <1> 		cmp dword [codepointer], 0
 10249 000080C6 0000                <1>
 10250 000080C8 7409                <1> 		je doneiconsel2
 10251 000080CA 8B1D[29840000]      <1> 		mov ebx, [codepointer]
 10252 000080D0 FFD3                <1> 		call ebx
 10253 000080D2 C3                  <1> 		ret
 10254                              <1> 	doneiconsel2:
 10255 000080D3 A0[005B0000]        <1> 		mov al, [LBUTTON]
 10256 000080D8 A2[D77B0000]        <1> 		mov [pLBUTTON], al
 10257 000080DD A0[015B0000]        <1> 		mov al, [RBUTTON]
 10258 000080E2 A2[D87B0000]        <1> 		mov [pRBUTTON], al
 10259 000080E7 813D[D97B0000]0100- <1> 		cmp dword [dragging], 1
 10260 000080EF 0000                <1>
 10261 000080F1 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10262 000080F7 E82FEAFFFF          <1> 		call switchmousepos2
 10263 000080FC 803D[3D810000]01    <1> 		cmp byte [windrag], 1
 10264 00008103 7305                <1> 		jae noclearcursorcl
 10265 00008105 E869E9FFFF          <1> 		call clearmousecursor
 10266                              <1> noclearcursorcl:
 10267 0000810A E8D0ECFFFF          <1> 		call reloadallgraphics
 10268                              <1> noreloadgraphicsclick:
 10269 0000810F 30E4                <1> 		xor ah, ah
 10270 00008111 31C9                <1> 		xor ecx, ecx
 10271 00008113 31D2                <1> 		xor edx, edx
 10272 00008115 B0FE                <1> 		mov al, 254
 10273 00008117 668B15[EF590000]    <1> 		mov dx, [mousecursorposition]
 10274 0000811E 668B0D[F1590000]    <1> 		mov cx, [mousecursorposition + 2]
 10275 00008125 66BBE738            <1> 		mov bx, 0011100011100111b
 10276 00008129 C605[D37B0000]01    <1> 		mov byte [showcursorfonton], 1
 10277 00008130 E83AF3FFFF          <1> 		call showfontvesa
 10278 00008135 C605[D37B0000]00    <1> 		mov byte [showcursorfonton], 0
 10279 0000813C C3                  <1> 		ret
 10280 0000813D 00                  <1> windrag db 0
 10281 0000813E 00000000            <1> lastdrag dw 0,0
 10282 00008142 00000000            <1> grpctblpos dw 0,0
 10283                              <1> 
 10284                              <1> 
 10285                              <1> 
 10286 00008146 00<rept>            <1> grphbuf times 16 db 0
 10287                              <1> 	graphicsadd:
 10288 00008156 BF[37D00000]        <1> 		mov edi, graphicstable
 10289                              <1> 	shwgrph1:
 10290 0000815B 397702              <1> 		cmp dword [edi + 2], esi
 10291 0000815E 7414                <1> 		je showgraphicsreplace2
 10292 00008160 81C710000000        <1> 		add edi, 16
 10293 00008166 81FF[37D20000]      <1> 		cmp edi, graphicstableend
 10294 0000816C 0F8337020000        <1> 		jae near showgraphicsnew
 10295 00008172 EBE7                <1> 		jmp shwgrph1
 10296                              <1> 	showgraphicsreplace2:
 10297 00008174 8935[48810000]      <1> 		mov [grphbuf + 2], esi
 10298 0000817A 668915[4C810000]    <1> 		mov [grphbuf + 6], dx
 10299 00008181 66890D[4E810000]    <1> 		mov [grphbuf + 8], cx
 10300 00008188 891D[52810000]      <1> 		mov [grphbuf + 12], ebx
 10301 0000818E 30FF                <1> 		xor bh, bh
 10302 00008190 88E3                <1> 		mov bl, ah
 10303 00008192 30E4                <1> 		xor ah, ah
 10304 00008194 66A3[50810000]      <1> 		mov [grphbuf + 10], ax	
 10305 0000819A 66891D[46810000]    <1> 		mov [grphbuf], bx
 10306 000081A1 66A1[46810000]      <1> 		mov ax, [grphbuf]
 10307 000081A7 663D0100            <1> 		cmp ax, 1
 10308 000081AB 0F8419000000        <1> 		je near replaceicon
 10309 000081B1 663D0200            <1> 		cmp ax, 2
 10310 000081B5 0F8493000000        <1> 		je near replacestring
 10311 000081BB 663D0300            <1> 		cmp ax, 3
 10312 000081BF 0F840F010000        <1> 		je near replacewindow
 10313 000081C5 E9BC010000          <1> 		jmp showgraphicsreplace
 10314                              <1> 	replaceicon:
 10315 000081CA 893D[DD7B0000]      <1> 		mov [lastpos], edi
 10316 000081D0 8935[E17B0000]      <1> 		mov [lastpos + 4], esi
 10317 000081D6 8B7702              <1> 		mov esi, [edi + 2]
 10318 000081D9 668B5F0C            <1> 		mov bx, [edi + 12]
 10319 000081DD 668B5706            <1> 		mov dx, [edi + 6]
 10320 000081E1 668B4F08            <1> 		mov cx, [edi + 8]
 10321 000081E5 668B06              <1> 		mov ax, [esi]
 10322 000081E8 66A3[E57B0000]      <1> 		mov [colorbuf], ax
 10323 000081EE 66A1[DB6D0000]      <1> 		mov ax, [background]
 10324 000081F4 668906              <1> 		mov [esi], ax
 10325 000081F7 8B5F0C              <1> 		mov ebx, [edi + 12]
 10326 000081FA 668B470A            <1> 		mov ax, [edi + 10]
 10327 000081FE 2401                <1> 		and al, 1
 10328 00008200 A2[2D840000]        <1> 		mov [iconselected], al
 10329 00008205 668B470A            <1> 		mov ax, [edi + 10]
 10330 00008209 E893E9FFFF          <1> 		call showicon2
 10331 0000820E 8B3D[DD7B0000]      <1> 		mov edi, [lastpos]
 10332 00008214 8B7702              <1> 		mov esi, [edi + 2]
 10333 00008217 66A1[E57B0000]      <1> 		mov ax, [colorbuf]
 10334 0000821D 668906              <1> 		mov [esi], ax
 10335 00008220 8B35[E17B0000]      <1> 		mov esi, [lastpos + 4]
 10336 00008226 668B15[4C810000]    <1> 		mov dx, [grphbuf + 6]
 10337 0000822D 668B0D[4E810000]    <1> 		mov cx, [grphbuf + 8]
 10338 00008234 668B1D[46810000]    <1> 		mov bx, [grphbuf]
 10339 0000823B 66A1[50810000]      <1> 		mov ax, [grphbuf + 10]
 10340 00008241 88DC                <1> 		mov ah, bl
 10341 00008243 8B1D[52810000]      <1> 		mov ebx, [grphbuf + 12]
 10342 00008249 E938010000          <1> 		jmp showgraphicsreplace
 10343                              <1> 	replacestring:
 10344 0000824E 893D[DD7B0000]      <1> 		mov [lastpos], edi
 10345 00008254 8935[E17B0000]      <1> 		mov [lastpos + 4], esi
 10346 0000825A 8B5F0C              <1> 		mov ebx, [edi + 12]
 10347 0000825D 8B7702              <1> 		mov esi, [edi + 2]
 10348 00008260 668B5706            <1> 		mov dx, [edi + 6]
 10349 00008264 668B4F08            <1> 		mov cx, [edi + 8]
 10350 00008268 66A1[5E740000]      <1> 		mov ax, [colorfont2]
 10351 0000826E 66A3[E57B0000]      <1> 		mov [colorbuf], ax
 10352 00008274 66A1[DB6D0000]      <1> 		mov ax, [background]
 10353 0000827A 66A3[5E740000]      <1> 		mov [colorfont2], ax		
 10354 00008280 8B5F0C              <1> 		mov ebx, [edi + 12]
 10355 00008283 668B470A            <1> 		mov ax, [edi + 10]
 10356 00008287 2401                <1> 		and al, 1
 10357 00008289 A2[D57B0000]        <1> 		mov [mouseselecton], al
 10358 0000828E 668B470A            <1> 		mov ax, [edi + 10]
 10359 00008292 E899F1FFFF          <1> 		call showstring2
 10360 00008297 66A1[E57B0000]      <1> 		mov ax, [colorbuf]
 10361 0000829D 66A3[5E740000]      <1> 		mov [colorfont2], ax
 10362 000082A3 8B3D[DD7B0000]      <1> 		mov edi, [lastpos]
 10363 000082A9 8B7702              <1> 		mov esi, [edi + 2]
 10364 000082AC 668B15[4C810000]    <1> 		mov dx, [grphbuf + 6]
 10365 000082B3 668B0D[4E810000]    <1> 		mov cx, [grphbuf + 8]
 10366 000082BA 668B1D[46810000]    <1> 		mov bx, [grphbuf]
 10367 000082C1 66A1[50810000]      <1> 		mov ax, [grphbuf + 10]
 10368 000082C7 88DC                <1> 		mov ah, bl
 10369 000082C9 8B1D[52810000]      <1> 		mov ebx, [grphbuf + 12]
 10370 000082CF E9B2000000          <1> 		jmp showgraphicsreplace
 10371                              <1> 	replacewindow:
 10372 000082D4 893D[DD7B0000]      <1> 		mov [lastpos], edi
 10373 000082DA 8935[E17B0000]      <1> 		mov [lastpos + 4], esi
 10374 000082E0 8B7702              <1> 		mov esi, [edi + 2]
 10375 000082E3 8B3D[70760000]      <1> 		mov edi, [windowbufloc]
 10376 000082E9 31D2                <1> 		xor edx, edx
 10377 000082EB 668B15[F9570000]    <1> 		mov dx, [resolutionx2]
 10378 000082F2 C1E204              <1> 		shl edx, 4
 10379 000082F5 29D7                <1> 		sub edi, edx
 10380 000082F7 31D2                <1> 		xor edx, edx
 10381 000082F9 668B16              <1> 		mov dx, [esi]
 10382 000082FC 660316              <1> 		add dx, [esi]
 10383 000082FF 668B4E02            <1> 		mov cx, [esi + 2]
 10384 00008303 6681C11000          <1> 		add cx, 16
 10385 00008308 66A1[DB6D0000]      <1> 		mov ax, [background]
 10386 0000830E 803D[3D810000]01    <1> 		cmp byte [windrag], 1
 10387 00008315 7604                <1> 		jbe clearwindow
 10388 00008317 662B4E02            <1> 		sub cx, [esi + 2]
 10389                              <1> 	clearwindow:
 10390                              <1> 		%ifdef gui.background
 10391                              <1> 			cmp dword [backgroundimage], 0
 10392                              <1> 			je .noback
 10393                              <1> 			push esi
 10394                              <1> 			mov esi, [backgroundimage]
 10395                              <1> 			sub edi, [physbaseptr]
 10396                              <1> 			add esi, edi
 10397                              <1> 			add edi, [physbaseptr]
 10398                              <1> 			mov ax, [esi]
 10399                              <1> 			pop esi
 10400                              <1> 		.noback:
 10401                              <1> 		%endif
 10402 0000831B 668907              <1> 		mov [edi], ax
 10403 0000831E 81C702000000        <1> 		add edi, 2
 10404 00008324 81EA02000000        <1> 		sub edx, 2
 10405 0000832A 81FA00000000        <1> 		cmp edx, 0
 10406 00008330 75E9                <1> 		jne clearwindow
 10407 00008332 6649                <1> 		dec cx
 10408 00008334 668B15[F9570000]    <1> 		mov dx, [resolutionx2]
 10409 0000833B 662B16              <1> 		sub dx, [esi]
 10410 0000833E 662B16              <1> 		sub dx, [esi]
 10411 00008341 01D7                <1> 		add edi, edx
 10412 00008343 668B16              <1> 		mov dx, [esi]
 10413 00008346 660316              <1> 		add dx, [esi]
 10414 00008349 6681F90000          <1> 		cmp cx, 0
 10415 0000834E 75CB                <1> 		jne clearwindow
 10416                              <1> 	endwindowclear:
 10417 00008350 C605[A0220000]00    <1> 		mov byte [termcopyon], 0
 10418 00008357 8B3D[DD7B0000]      <1> 		mov edi, [lastpos]
 10419 0000835D 8B35[48810000]      <1> 		mov esi, [grphbuf + 2]
 10420 00008363 668B15[4C810000]    <1> 		mov dx, [grphbuf + 6]
 10421 0000836A 668B0D[4E810000]    <1> 		mov cx, [grphbuf + 8]
 10422 00008371 668B1D[46810000]    <1> 		mov bx, [grphbuf]
 10423 00008378 66A1[50810000]      <1> 		mov ax, [grphbuf + 10]
 10424 0000837E 88DC                <1> 		mov ah, bl
 10425 00008380 8B1D[52810000]      <1> 		mov ebx, [grphbuf + 12]
 10426                              <1> 	showgraphicsreplace:
 10427 00008386 897702              <1> 		mov [edi + 2], esi
 10428 00008389 66895706            <1> 		mov [edi + 6], dx
 10429 0000838D 66894F08            <1> 		mov [edi + 8], cx
 10430 00008391 895F0C              <1> 		mov [edi + 12], ebx
 10431 00008394 30FF                <1> 		xor bh, bh
 10432 00008396 88E3                <1> 		mov bl, ah
 10433 00008398 30E4                <1> 		xor ah, ah
 10434 0000839A 6689470A            <1> 		mov [edi + 10], ax
 10435 0000839E 66891F              <1> 		mov [edi], bx
 10436 000083A1 8B5F0C              <1> 		mov ebx, [edi + 12]
 10437 000083A4 668B470A            <1> 		mov ax, [edi + 10]
 10438 000083A8 C3                  <1> 		ret
 10439                              <1> 	showgraphicsnew:
 10440 000083A9 BF[37D00000]        <1> 		mov edi, graphicstable
 10441                              <1> 	shwgrph2:
 10442 000083AE 66813F0000          <1> 		cmp word [edi], 0
 10443 000083B3 74D1                <1> 		je showgraphicsreplace
 10444 000083B5 81C710000000        <1> 		add edi, 16
 10445 000083BB 81FF[37D20000]      <1> 		cmp edi, graphicstableend
 10446 000083C1 72EB                <1> 		jb shwgrph2
 10447                              <1> 	showgraphicsdone:
 10448 000083C3 C3                  <1> 		ret
 10449                              <1> 	
 10450                              <1> putpixel: ;color in si, point is (dx,cx)
 10451                              <1> 		;destroys edi, ebx, eax
 10452 000083C4 6650                <1> 	push ax
 10453 000083C6 6653                <1> 	push bx
 10454 000083C8 31C0                <1> 	xor eax, eax
 10455 000083CA 31DB                <1> 	xor ebx, ebx
 10456 000083CC 31FF                <1> 	xor edi, edi
 10457 000083CE 668B1D[0D570000]    <1> 	mov bx, [resolutiony]
 10458 000083D5 66A1[0B570000]      <1> 	mov ax, [resolutionx]
 10459 000083DB 6639C2              <1> 	cmp dx, ax
 10460 000083DE 7720                <1> 	ja .doneput
 10461 000083E0 66D1E0              <1> 	shl ax, 1
 10462 000083E3 6639D9              <1> 	cmp cx, bx
 10463 000083E6 7718                <1> 	ja .doneput
 10464 000083E8 6689CB              <1> 	mov bx, cx
 10465 000083EB 52                  <1> 	push edx
 10466 000083EC F7E3                <1> 	mul ebx
 10467 000083EE 5A                  <1> 	pop edx
 10468 000083EF 6601D7              <1> 	add di, dx
 10469 000083F2 6601D7              <1> 	add di, dx
 10470 000083F5 01C7                <1> 	add edi, eax
 10471 000083F7 033D[21570000]      <1> 	add edi, [physbaseptr]
 10472 000083FD 668937              <1> 	mov [edi], si
 10473                              <1> .doneput:
 10474 00008400 665B                <1> 	pop bx
 10475 00008402 6658                <1> 	pop ax
 10476 00008404 C3                  <1> 	ret
 10477                              <1> 	
 10478                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10479 00008405 31FF                <1> 	xor edi, edi
 10480 00008407 31C0                <1> 	xor eax, eax
 10481 00008409 31DB                <1> 	xor ebx, ebx
 10482 0000840B 668B1D[F9570000]    <1> 	mov bx, [resolutionx2]
 10483 00008412 6689D7              <1> 	mov di, dx
 10484 00008415 6601D7              <1> 	add di, dx
 10485 00008418 6689C8              <1> 	mov ax, cx
 10486 0000841B F7E3                <1> 	mul ebx
 10487 0000841D 01C7                <1> 	add edi, eax
 10488 0000841F 033D[21570000]      <1> 	add edi, [physbaseptr]
 10489 00008425 C3                  <1> 	ret
 10490                              <1> 
 10491 00008426 00                  <1> 	mouseon db 0
 10492 00008427 0000                <1> 	icon dw 0	;pointer to icon
 10493 00008429 00000000            <1> 	codepointer dd 0 ;pointer to code
 10494 0000842D 00                  <1> 	iconselected db 0
 10495                                  %endif
 10496                                  %ifdef network.included
 10497                                  	%include "source/network.asm"
 10498                              <1> network.init:
 10499                              <1> %ifdef rtl8139.included
 10500                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10501                              <2> ;RTL8139 NIC DRIVER
 10502                              <2> rtl8139:
 10503 0000842E E805000000          <2> 	call .init
 10504 00008433 E9CE010000          <2> 	jmp .end
 10505                              <2> 
 10506                              <2> .RBSTART equ 0x30
 10507                              <2> .IMR equ 0x3C
 10508                              <2> .ISR equ 0x3E
 10509                              <2> .CMD equ 0x37
 10510                              <2> .RCR equ 0x44
 10511                              <2> .CONFIG1 equ 0x52
 10512                              <2> .TSD0 equ 0x10
 10513                              <2> .TSAD0 equ 0x20
 10514                              <2> .init:	;should find card, get mac, and initialize card
 10515 00008438 31C0                <2> 	xor eax, eax
 10516 0000843A A2[04620000]        <2> 	mov [pcifunction], al
 10517 0000843F A2[02620000]        <2> 	mov [pcibus], al
 10518 00008444 A2[03620000]        <2> 	mov [pcidevice], al
 10519 00008449 B002                <2> 	mov al, 0x02 ;type code
 10520 0000844B A2[93620000]        <2> 	mov [pcitype], al
 10521 00008450 B8EC103981          <2> 	mov eax, 0x813910EC
 10522 00008455 A3[07620000]        <2> 	mov [pcidevid], eax
 10523 0000845A E8BCDDFFFF          <2> 	call getpciport
 10524 0000845F 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10525 00008465 7501                <2> 	jne .initnic
 10526 00008467 C3                  <2> 	ret
 10527                              <2> .initnic:
 10528 00008468 8915[E5850000]      <2> 	mov [.basenicaddr], edx
 10529 0000846E 89D1                <2> 	mov ecx, edx
 10530 00008470 E8D2ABFFFF          <2> 	call showhex	;for debugging, please remove
 10531 00008475 BE[90B80100]        <2> 	mov esi, rbuffstart
 10532 0000847A B900200000          <2> 	mov ecx, 8192
 10533 0000847F 31C0                <2> 	xor eax, eax
 10534                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10535 00008481 8806                <2> 	mov [esi], al
 10536 00008483 46                  <2> 	inc esi
 10537 00008484 6649                <2> 	dec cx
 10538 00008486 6681F90000          <2> 	cmp cx, 0
 10539 0000848B 75F4                <2> 	jne .clearrbuff
 10540                              <2> .findmac:
 10541 0000848D 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10542 00008493 BF[EA850000]        <2> 	mov edi, .mac
 10543 00008498 B906000000          <2> 	mov ecx, 6
 10544                              <2> .macputloop:
 10545 0000849D EC                  <2> 	in al, dx
 10546 0000849E 8807                <2> 	mov [edi], al
 10547 000084A0 47                  <2> 	inc edi
 10548 000084A1 42                  <2> 	inc edx
 10549 000084A2 49                  <2> 	dec ecx
 10550 000084A3 75F8                <2> 	jnz .macputloop
 10551 000084A5 B9[EA850000]        <2> 	mov ecx, .mac
 10552 000084AA E8E4070000          <2> 	call showmac
 10553 000084AF E817000000          <2> 	call .resetnic
 10554 000084B4 BE[F0850000]        <2> 	mov esi, .name
 10555 000084B9 E89F98FFFF          <2> 	call print
 10556 000084BE BE[F9850000]        <2> 	mov esi, .initmsg
 10557 000084C3 E89598FFFF          <2> 	call print
 10558 000084C8 31DB                <2> 	xor ebx, ebx
 10559 000084CA C3                  <2> 	ret
 10560                              <2> .resetnic:
 10561 000084CB 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10562 000084D1 81C252000000        <2> 	add edx, .CONFIG1
 10563 000084D7 30C0                <2> 	xor al, al
 10564 000084D9 EE                  <2> 	out dx, al	;WAKE UP!!!!
 10565 000084DA 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10566 000084E0 81C237000000        <2> 	add edx, .CMD
 10567 000084E6 B010                <2> 	mov al, 0x10
 10568 000084E8 EE                  <2> 	out dx, al	;Reset
 10569                              <2> .resetnicwait:
 10570 000084E9 EC                  <2> 	in al, dx
 10571 000084EA A810                <2> 	test al, 0x10
 10572 000084EC 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10573 000084F2 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10574 000084F8 81C230000000        <2> 	add edx, .RBSTART
 10575 000084FE B8[90B80100]        <2> 	mov eax, rbuffstart
 10576 00008503 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
 10577 00008508 EF                  <2> 	out dx, eax	;give nic receive buffer location
 10578 00008509 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10579 0000850F 81C23C000000        <2> 	add edx, .IMR
 10580                              <2> 	;in ax, dx
 10581 00008515 66B80500            <2> 	mov ax, 5
 10582 00008519 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 10583 0000851B 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10584 00008521 81C244000000        <2> 	add edx, .RCR
 10585 00008527 B802000000          <2> 	mov eax, 000010b ;receive only physical matches
 10586 0000852C 0580000000          <2> 	add eax, 128 ;enable wrap option
 10587 00008531 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10588 00008532 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10589 00008538 81C237000000        <2> 	add edx, .CMD
 10590 0000853E B00C                <2> 	mov al, 0x0C
 10591 00008540 EE                  <2> 	out dx, al	;use transmit and receive
 10592 00008541 C605[E9850000]01    <2> 	mov byte [.nicconfig], 1
 10593 00008548 C3                  <2> 	ret
 10594                              <2> 	
 10595                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10596 00008549 56                  <2> 	push esi
 10597 0000854A 57                  <2> 	push edi
 10598 0000854B 803D[E9850000]01    <2> 	cmp byte [.nicconfig], 1
 10599 00008552 7410                <2> 	je .sendit
 10600 00008554 E8DFFEFFFF          <2> 	call .init
 10601 00008559 5F                  <2> 	pop edi
 10602 0000855A 5E                  <2> 	pop esi
 10603 0000855B 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10604 00008561 75E6                <2> 	jne .sendpacket
 10605 00008563 C3                  <2> 	ret
 10606                              <2> .sendit:
 10607 00008564 E862FFFFFF          <2> 	call .resetnic
 10608 00008569 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10609 0000856F 81C220000000        <2> 	add edx, .TSAD0
 10610 00008575 5F                  <2> 	pop edi
 10611 00008576 8B0D[EA850000]      <2> 	mov ecx, [.mac]
 10612 0000857C 894F06              <2> 	mov [edi + 6], ecx
 10613 0000857F 668B0D[EE850000]    <2> 	mov cx, [.mac + 4]
 10614 00008586 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10615 0000858A A1[41020000]        <2> 	mov eax, [basecache]
 10616 0000858F C1E004              <2> 	shl eax, 4
 10617 00008592 01F8                <2> 	add eax, edi
 10618 00008594 EF                  <2> 	out dx, eax	;here's Johnny!
 10619 00008595 5E                  <2> 	pop esi
 10620 00008596 29FE                <2> 	sub esi, edi
 10621 00008598 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10622 0000859E 81C210000000        <2> 	add edx, .TSD0
 10623 000085A4 ED                  <2> 	in eax, dx ;get tsd
 10624 000085A5 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
 10625 000085AA 01F0                <2> 	add eax, esi ;add length to tsd
 10626 000085AC 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
 10627 000085B1 EF                  <2> 	out dx, eax
 10628                              <2> .checknicownbit:
 10629 000085B2 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10630 000085B8 81C210000000        <2> 	add edx, .TSD0
 10631 000085BE ED                  <2> 	in eax, dx
 10632 000085BF 2500200000          <2> 	and eax, 0x2000 ;check own bit
 10633 000085C4 3D00200000          <2> 	cmp eax, 0x2000
 10634 000085C9 75E7                <2> 	jne .checknicownbit
 10635                              <2> .checknictokbit:
 10636 000085CB 8B15[E5850000]      <2> 	mov edx, [.basenicaddr]
 10637 000085D1 81C210000000        <2> 	add edx, .TSD0
 10638 000085D7 ED                  <2> 	in eax, dx
 10639 000085D8 2500800000          <2> 	and eax, 0x8000	;check tok bit
 10640 000085DD 3D00800000          <2> 	cmp eax, 0x8000
 10641 000085E2 75E7                <2> 	jne .checknictokbit
 10642 000085E4 C3                  <2> 	ret
 10643 000085E5 00000000            <2> .basenicaddr dd 0
 10644 000085E9 00                  <2> .nicconfig db 0
 10645 000085EA 000000000000        <2> .mac db 0,0,0,0,0,0
 10646 000085F0 52544C383133392000  <2> .name db "RTL8139 ",0
 10647 000085F9 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10648 00008602 65640A00            <2>
 10649                              <2> 
 10650                              <2> .end:
 10651                              <1> %endif
 10652                              <1> %ifdef rtl8169.included
 10653                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10654                              <1> %endif
 10655                              <1> %ifdef ne2000.included
 10656                              <1> 	%include "source/drivers/network/ne2000.asm"
 10657                              <2> ne2000:
 10658 00008606 E805000000          <2> 	call .init
 10659 0000860B E93C030000          <2> 	jmp .end
 10660                              <2> 
 10661                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10662                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10663                              <2> ;0	CR		CR		CR		CR		CR		CR
 10664                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10665                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10666                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10667                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10668                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10669                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10670                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10671                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10672                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10673                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10674                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10675                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10676                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10677                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10678                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10679                              <2> .CR equ 0
 10680                              <2> 	.CR.STP	equ 1		;Stop
 10681                              <2> 	.CR.STA equ 2		;Start
 10682                              <2> 	.CR.TXP equ 4		;Transmit
 10683                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10684                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10685                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10686                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10687                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10688                              <2> .PSTART equ 1
 10689                              <2> .PSTOP equ 2
 10690                              <2> .BNRY equ 3
 10691                              <2> .ISR equ 7
 10692                              <2> 	.ISR.PRX equ 1		;Packet Received
 10693                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10694                              <2> 	.ISR.RXE equ 4		;Receive Error
 10695                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10696                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10697                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10698                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10699                              <2> 	.ISR.RST equ 0x80	;Reset status
 10700                              <2> .RSAR0 equ 8
 10701                              <2> .RSAR1 equ 9
 10702                              <2> .RBCR0 equ 0xA
 10703                              <2> .RBCR1 equ 0xB
 10704                              <2> .RCR equ 0xC
 10705                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10706                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10707                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10708                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10709                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10710                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10711                              <2> .DCR equ 0xE
 10712                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10713                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10714                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10715                              <2> 	.DCR.LS equ 8		;Loopback Select
 10716                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10717                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10718                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10719                              <2> .ASIC equ 0x10
 10720                              <2> .RESET equ 0x1F
 10721                              <2> 
 10722                              <2> .init:
 10723 00008610 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10724 00008615 31C0                <2> 	xor eax, eax
 10725 00008617 A2[04620000]        <2> 	mov [pcifunction], al
 10726 0000861C A2[02620000]        <2> 	mov [pcibus], al
 10727 00008621 A2[03620000]        <2> 	mov [pcidevice], al
 10728 00008626 B002                <2> 	mov al, 2 ;type code
 10729 00008628 A2[93620000]        <2> 	mov [pcitype], al
 10730 0000862D B8EC102980          <2> 	mov eax, 0x802910EC
 10731 00008632 A3[07620000]        <2> 	mov [pcidevid], eax
 10732 00008637 E8DFDBFFFF          <2> 	call getpciport
 10733 0000863C 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10734 00008642 7501                <2> 	jne .good0
 10735 00008644 C3                  <2> 	ret
 10736                              <2> .good0:
 10737 00008645 8915[0F890000]      <2> 	mov [.basenicaddr], edx
 10738 0000864B 89D1                <2> 	mov ecx, edx
 10739                              <2> .test:
 10740 0000864D E854000000          <2> 	call .reset
 10741 00008652 E87B000000          <2> 	call .stop
 10742 00008657 89CA                <2> 	mov edx, ecx
 10743 00008659 B9FF000000          <2> 	mov ecx, 0xFF
 10744 0000865E E2FE                <2> 	loop $ ;wait for ~100 us
 10745 00008660 89D1                <2> 	mov ecx, edx
 10746 00008662 EC                  <2> 	in al, dx
 10747 00008663 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10748 00008665 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10749 00008667 7410                <2> 	je .good1
 10750 00008669 89CA                <2> 	mov edx, ecx
 10751 0000866B 81C207000000        <2> 	add edx, .ISR
 10752 00008671 EC                  <2> 	in al, dx
 10753 00008672 2480                <2> 	and al, .ISR.RST
 10754 00008674 3C80                <2> 	cmp al, .ISR.RST
 10755 00008676 7401                <2> 	je .good1
 10756 00008678 C3                  <2> 	ret
 10757                              <2> .good1:
 10758 00008679 E8C9A9FFFF          <2> call showhex	;for debugging, please remove
 10759 0000867E E85B000000          <2> 	call .setup
 10760 00008683 E80B060000          <2> call showmac
 10761 00008688 BE[14890000]        <2> mov esi, .name
 10762 0000868D E8CB96FFFF          <2> call print
 10763 00008692 BE[1C890000]        <2> mov esi, .initmsg
 10764 00008697 E8C196FFFF          <2> call print
 10765 0000869C C605[13890000]01    <2> 	mov byte [.nicconfig], 1
 10766 000086A3 31DB                <2> 	xor ebx, ebx
 10767 000086A5 C3                  <2> 	ret
 10768                              <2> .reset:
 10769 000086A6 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10770 000086AC 81C21F000000        <2> 	add edx, .RESET
 10771 000086B2 EC                  <2> 	in al, dx
 10772 000086B3 EE                  <2> 	out dx, al ;write its contents to itself
 10773 000086B4 C3                  <2> 	ret
 10774                              <2> .page:
 10775 000086B5 66C1E00E            <2> 	shl ax, 14
 10776 000086B9 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10777 000086BF EC                  <2> 	in al, dx
 10778 000086C0 243F                <2> 	and al, 00111111b
 10779 000086C2 08E0                <2> 	or al, ah
 10780 000086C4 EE                  <2> 	out dx, al
 10781 000086C5 C3                  <2> 	ret
 10782                              <2> .start:
 10783 000086C6 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10784 000086CC B020                <2> 	mov al, .CR.RD2
 10785 000086CE B002                <2> 	mov al, .CR.STA
 10786 000086D0 EE                  <2> 	out dx, al
 10787 000086D1 C3                  <2> 	ret
 10788                              <2> .stop:
 10789 000086D2 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10790 000086D8 B020                <2> 	mov al, .CR.RD2
 10791 000086DA 0C01                <2> 	or al, .CR.STP
 10792 000086DC EE                  <2> 	out dx, al
 10793 000086DD C3                  <2> 	ret
 10794                              <2> .setup:
 10795 000086DE E8EFFFFFFF          <2> 	call .stop
 10796 000086E3 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10797 000086E9 81C20E000000        <2> 	add edx, .DCR
 10798 000086EF B040                <2> 	mov al, .DCR.FT1
 10799 000086F1 0C01                <2> 	or al, .DCR.WTS
 10800 000086F3 0C08                <2> 	or al, .DCR.LS
 10801 000086F5 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10802 000086F6 E8B9000000          <2> 	call .getmac
 10803 000086FB E8D2FFFFFF          <2> 	call .stop
 10804 00008700 30C0                <2> 	xor al, al
 10805 00008702 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10806 00008708 81C20A000000        <2> 	add edx, .RBCR0
 10807 0000870E EE                  <2> 	out dx, al
 10808 0000870F 6642                <2> 	inc dx
 10809 00008711 EE                  <2> 	out dx, al ;Clear byte count
 10810 00008712 B800400000          <2> 	mov eax, 16*1024
 10811 00008717 A3[2E890000]        <2> 	mov [.ringstart], eax
 10812 0000871C C1E808              <2> 	shr eax, 8
 10813 0000871F 66A3[2A890000]      <2> 	mov [.pagestart], ax
 10814 00008725 0534000000          <2> 	add eax, 64-2*6
 10815 0000872A A3[2C890000]        <2> 	mov [.pageend], eax
 10816 0000872F C1E008              <2> 	shl eax, 8
 10817 00008732 66A3[32890000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10818 00008738 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10819 0000873E 81C201000000        <2> 	add edx, .PSTART
 10820 00008744 A0[2A890000]        <2> 	mov al, [.pagestart]
 10821 00008749 EE                  <2> 	out dx, al
 10822 0000874A A0[2C890000]        <2> 	mov al, [.pageend]
 10823 0000874F 6642                <2> 	inc dx
 10824 00008751 EE                  <2> 	out dx, al
 10825 00008752 A0[2A890000]        <2> 	mov al, [.pagestart]
 10826 00008757 6642                <2> 	inc dx
 10827 00008759 EE                  <2> 	out dx, al
 10828 0000875A E873FFFFFF          <2> 	call .stop
 10829                              <2> ;INSERT INTERRUPT ENABLE HERE
 10830 0000875F B001                <2> 	mov al, 1
 10831 00008761 E84FFFFFFF          <2> 	call .page
 10832 00008766 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10833 0000876C BF[3C890000]        <2> 	mov edi, .rom
 10834                              <2> .copymactocard:
 10835 00008771 42                  <2> 	inc edx
 10836 00008772 6E                  <2> 	outsb
 10837 00008773 81C702000000        <2> 	add edi, 2
 10838 00008779 81FA06000000        <2> 	cmp edx, 6
 10839 0000877F 76F0                <2> 	jbe .copymactocard
 10840 00008781 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10841 00008787 81C207000000        <2> 	add edx, 7
 10842 0000878D A0[2A890000]        <2> 	mov al, [.pagestart]
 10843 00008792 FEC0                <2> 	inc al
 10844 00008794 EE                  <2> 	out dx, al ;set page in CURR register
 10845                              <2> ;INSERT MULTICAST INIT HERE
 10846 00008795 E838FFFFFF          <2> 	call .stop
 10847 0000879A 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10848 000087A0 81C20C000000        <2> 	add edx, .RCR
 10849 000087A6 B004                <2> 	mov al, .RCR.AB
 10850 000087A8 EE                  <2> 	out dx, al ;accept broadcast
 10851 000087A9 6642                <2> 	inc dx
 10852 000087AB 30C0                <2> 	xor al, al
 10853 000087AD EE                  <2> 	out dx, al ;stop loopback
 10854 000087AE E813FFFFFF          <2> 	call .start
 10855 000087B3 C3                  <2> 	ret
 10856                              <2> .getmac:
 10857 000087B4 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10858 000087BA B020                <2> 	mov al, 0x20
 10859 000087BC 0C02                <2> 	or al, 2
 10860 000087BE EE                  <2> 	out dx, al	;set STA and RD2 bits
 10861 000087BF 6681C20A00          <2> 	add dx, .RBCR0
 10862 000087C4 B010                <2> 	mov al, 16
 10863 000087C6 EE                  <2> 	out dx, al
 10864 000087C7 6642                <2> 	inc dx
 10865 000087C9 30C0                <2> 	xor al, al
 10866 000087CB EE                  <2> 	out dx, al
 10867 000087CC 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10868 000087D2 6681C20800          <2> 	add dx, .RSAR0
 10869 000087D7 EE                  <2> 	out dx, al
 10870 000087D8 6642                <2> 	inc dx
 10871 000087DA EE                  <2> 	out dx, al
 10872 000087DB 668B15[0F890000]    <2> 	mov dx, [.basenicaddr]
 10873 000087E2 B008                <2> 	mov al, 8
 10874 000087E4 0C02                <2> 	or al, 2
 10875 000087E6 EE                  <2> 	out dx, al
 10876 000087E7 668B15[0F890000]    <2> 	mov dx, [.basenicaddr]
 10877 000087EE 6681C21000          <2> 	add dx, .ASIC
 10878 000087F3 B908000000          <2> 	mov ecx, 8
 10879 000087F8 BF[3C890000]        <2> 	mov edi, .rom
 10880 000087FD F3666D              <2> 	rep insw
 10881                              <2> .copymac:
 10882 00008800 BF[3C890000]        <2> 	mov edi, .rom
 10883 00008805 BE[36890000]        <2> 	mov esi, .mac
 10884 0000880A B906000000          <2> 	mov ecx, 6
 10885                              <2> .lpmac:
 10886 0000880F 8A07                <2> 	mov al, [edi]
 10887 00008811 8806                <2> 	mov [esi], al
 10888 00008813 81C702000000        <2> 	add edi, 2
 10889 00008819 46                  <2> 	inc esi
 10890 0000881A E2F3                <2> 	loop .lpmac
 10891 0000881C B9[36890000]        <2> 	mov ecx, .mac
 10892 00008821 C3                  <2> 	ret
 10893                              <2> .sendpacket:
 10894 00008822 803D[13890000]00    <2> 	cmp byte [.nicconfig], 0
 10895 00008829 7512                <2> 	jne .sendit
 10896 0000882B 56                  <2> 	push esi
 10897 0000882C 57                  <2> 	push edi
 10898 0000882D E8DEFDFFFF          <2> 	call .init
 10899 00008832 5F                  <2> 	pop edi
 10900 00008833 5E                  <2> 	pop esi
 10901 00008834 81FB00000000        <2> 	cmp ebx, 0
 10902 0000883A 7401                <2> 	je .sendit
 10903 0000883C C3                  <2> 	ret
 10904                              <2> .sendit: ;packet start in edi, end in esi
 10905 0000883D 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10906                              <2> 	;now the packet start is in esi, end in edi
 10907 0000883F 8B0D[36890000]      <2> 	mov ecx, [.mac]
 10908 00008845 894E06              <2> 	mov [esi + 6], ecx
 10909 00008848 668B0D[3A890000]    <2> 	mov cx, [.mac + 4]
 10910 0000884F 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10911 00008853 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10912 00008859 B020                <2> 	mov al, .CR.RD2
 10913 0000885B 0C02                <2> 	or al, .CR.STA
 10914 0000885D EE                  <2> 	out dx, al ;set RD2 and STA
 10915 0000885E 81C207000000        <2> 	add edx, .ISR ; ISR
 10916 00008864 B040                <2> 	mov al, .ISR.RDC
 10917 00008866 EE                  <2> 	out dx, al ;set RDC flag
 10918 00008867 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10919 0000886D 6681C20A00          <2> 	add dx, .RBCR0
 10920 00008872 89F8                <2> 	mov eax, edi
 10921 00008874 29F0                <2> 	sub eax, esi
 10922 00008876 BB01000000          <2> 	mov ebx, 1
 10923 0000887B 21C3                <2> 	and ebx, eax
 10924 0000887D 81FB01000000        <2> 	cmp ebx, 1
 10925 00008883 7501                <2> 	jne .nofixword
 10926 00008885 40                  <2> 	inc eax
 10927                              <2> .nofixword:
 10928 00008886 89C1                <2> 	mov ecx, eax ;save length in ecx
 10929 00008888 EE                  <2> 	out dx, al
 10930 00008889 86C4                <2> 	xchg al, ah
 10931 0000888B 6642                <2> 	inc dx
 10932 0000888D EE                  <2> 	out dx, al ;send size
 10933 0000888E 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10934 00008894 6681C20800          <2> 	add dx, .RSAR0
 10935 00008899 66A1[2A890000]      <2> 	mov ax, [.pagestart]
 10936 0000889F C1E008              <2> 	shl eax, 8
 10937 000088A2 EE                  <2> 	out dx, al
 10938 000088A3 86C4                <2> 	xchg al, ah
 10939 000088A5 6642                <2> 	inc dx
 10940 000088A7 EE                  <2> 	out dx, al ;send address in NIC memory
 10941 000088A8 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10942 000088AE B010                <2> 	mov al, .CR.RD1
 10943 000088B0 0C02                <2> 	or al, .CR.STA
 10944 000088B2 EE                  <2> 	out dx, al ;set RD and STA
 10945 000088B3 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10946 000088B5 D1E9                <2> 	shr ecx, 1
 10947 000088B7 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10948 000088BD 6681C21000          <2> 	add dx, 0x10
 10949 000088C2 F3666F              <2> 	rep outsw ;Send the packet data
 10950 000088C5 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10951 000088CB 6681C20700          <2> 	add dx, .ISR
 10952                              <2> .chkcopylp:
 10953 000088D0 B440                <2> 	mov ah, .ISR.RDC
 10954 000088D2 EC                  <2> 	in al, dx
 10955 000088D3 20C4                <2> 	and ah, al
 10956 000088D5 80FC40              <2> 	cmp ah, 0x40
 10957 000088D8 75F6                <2> 	jne .chkcopylp	
 10958 000088DA 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10959 000088E0 6681C20400          <2> 	add dx, 4
 10960 000088E5 A0[2A890000]        <2> 	mov al, [.pagestart]
 10961 000088EA EE                  <2> 	out dx, al ;send start address in pages
 10962 000088EB 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10963 000088F1 81C205000000        <2> 	add edx, 0x5
 10964 000088F7 89D8                <2> 	mov eax, ebx
 10965 000088F9 EE                  <2> 	out dx, al
 10966 000088FA 86C4                <2> 	xchg al, ah
 10967 000088FC 6642                <2> 	inc dx
 10968 000088FE EE                  <2> 	out dx, al ;send length
 10969 000088FF 8B15[0F890000]      <2> 	mov edx, [.basenicaddr]
 10970 00008905 B020                <2> 	mov al, 0x20
 10971 00008907 0C04                <2> 	or al, 4
 10972 00008909 0C02                <2> 	or al, 2
 10973 0000890B EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 10974 0000890C 31DB                <2> 	xor ebx, ebx
 10975 0000890E C3                  <2> 	ret
 10976 0000890F 00000000            <2> .basenicaddr dd 0
 10977 00008913 00                  <2> .nicconfig db 0
 10978 00008914 4E45323030302000    <2> .name db "NE2000 ",0
 10979 0000891C 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 10980 00008925 65642E0A00          <2>
 10981                              <2> align 2, nop
 10982 0000892A 0000                <2> .pagestart dw 0
 10983 0000892C 0000                <2> .pageend dw 0
 10984 0000892E 00000000            <2> .ringstart dd 0
 10985 00008932 00000000            <2> .ringend dd 0
 10986 00008936 000000000000        <2> .mac db 0,0,0,0,0,0
 10987 0000893C 00<rept>            <2> .rom times 16 db 0
 10988                              <2> 
 10989                              <2> .end:
 10990                              <1> %endif
 10991                              <1> %ifdef i8254x.included
 10992                              <1> 	%include "source/drivers/network/i8254x.asm"
 10993                              <2> ;Intel 8254x NIC DRIVER
 10994                              <2> i8254x:
 10995 0000894C E805000000          <2> 	call .init
 10996 00008951 E97A020000          <2> 	jmp .end
 10997                              <2> 
 10998                              <2> ;REGISTERS
 10999                              <2> .EEC equ 0x10
 11000                              <2> .EERD equ 0x14
 11001                              <2> .TCTL equ 0x400
 11002                              <2> .TIPG equ 0x410
 11003                              <2> .TDBAL equ 0x3800
 11004                              <2> .TDBAH equ 0x3804
 11005                              <2> .TDLEN equ 0x3808
 11006                              <2> .TDH equ 0x3810
 11007                              <2> .TDT equ 0x3818
 11008                              <2> .RAL equ 0x5400
 11009                              <2> .RAH equ 0x5404
 11010                              <2> ;CODE
 11011                              <2> .init:	;should find card, get mac, and initialize card
 11012 00008956 31C0                <2> 	xor eax, eax
 11013 00008958 A2[04620000]        <2> 	mov [pcifunction], al
 11014 0000895D A2[02620000]        <2> 	mov [pcibus], al
 11015 00008962 A2[03620000]        <2> 	mov [pcidevice], al
 11016 00008967 B002                <2> 	mov al, 0x02 ;type code
 11017 00008969 A2[93620000]        <2> 	mov [pcitype], al
 11018 0000896E B886800010          <2> 	mov eax, 0x10008086
 11019 00008973 A3[07620000]        <2> 	mov [pcidevid], eax
 11020 00008978 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 11021 0000897D 891D[0B620000]      <2> 	mov [pcidevidmask], ebx
 11022 00008983 E887D8FFFF          <2> 	call getpcimem
 11023 00008988 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 11024 0000898E 7501                <2> 	jne .initnic
 11025 00008990 C3                  <2> 	ret
 11026                              <2> .initnic:
 11027 00008991 8915[2B8B0000]      <2> 	mov [.basenicaddr], edx
 11028 00008997 89D1                <2> 	mov ecx, edx
 11029 00008999 E8A9A6FFFF          <2> 	call showhex	;for debugging, please remove
 11030 0000899E BE[90B80100]        <2> 	mov esi, rbuffstart
 11031 000089A3 B900200000          <2> 	mov ecx, 8192
 11032 000089A8 31C0                <2> 	xor eax, eax
 11033                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 11034 000089AA 8806                <2> 	mov [esi], al
 11035 000089AC 46                  <2> 	inc esi
 11036 000089AD 6649                <2> 	dec cx
 11037 000089AF 6681F90000          <2> 	cmp cx, 0
 11038 000089B4 75F4                <2> 	jne .clearrbuff
 11039                              <2> .findmac:
 11040 000089B6 8B1D[2B8B0000]      <2> 	mov ebx, [.basenicaddr]
 11041                              <2> 	; Setup Control Register
 11042 000089BC B861030000          <2> 	mov eax, 0x361
 11043 000089C1 8903                <2> 	mov [ebx], eax
 11044                              <2> 	; Setup Transmission Descriptors
 11045 000089C3 BF[508B0000]        <2> 	mov edi, .tdesc
 11046 000089C8 A1[41020000]        <2> 	mov eax, [basecache]
 11047 000089CD C1E004              <2> 	shl eax, 4
 11048 000089D0 01F8                <2> 	add eax, edi
 11049 000089D2 898300380000        <2> 	mov [ebx + .TDBAL], eax
 11050 000089D8 31C0                <2> 	xor eax, eax
 11051 000089DA 898310380000        <2> 	mov [ebx + .TDH], eax
 11052 000089E0 898318380000        <2> 	mov [ebx + .TDT], eax
 11053 000089E6 898304380000        <2> 	mov [ebx + .TDBAH], eax
 11054 000089EC 66B88000            <2> 	mov ax, 128
 11055 000089F0 898308380000        <2> 	mov [ebx + .TDLEN], eax
 11056 000089F6 B80A010401          <2> 	mov eax, 0x104010A
 11057 000089FB 898300040000        <2> 	mov [ebx + .TCTL], eax	;turn on transmission, set up other registers
 11058 00008A01 B80A285000          <2> 	mov eax, 0x50280A
 11059 00008A06 898310040000        <2> 	mov [ebx + .TIPG], eax	;setup TIPG
 11060                              <2> 	;Setup Receive Registers
 11061 00008A0C BF[308B0000]        <2> 	mov edi, .mac
 11062 00008A11 81C300540000        <2> 	add ebx, .RAL
 11063 00008A17 31D2                <2> 	xor edx, edx
 11064 00008A19 B903000000          <2> 	mov ecx, 3
 11065                              <2> .macloop:
 11066 00008A1E E8BC000000          <2> 	call .eepromread
 11067 00008A23 668907              <2> 	mov [edi], ax
 11068 00008A26 668903              <2> 	mov [ebx], ax
 11069 00008A29 42                  <2> 	inc edx
 11070 00008A2A 81C302000000        <2> 	add ebx, 2
 11071 00008A30 81C702000000        <2> 	add edi, 2
 11072 00008A36 E2E6                <2> 	loop .macloop
 11073 00008A38 66B80080            <2> 	mov ax, 0x8000
 11074 00008A3C 668903              <2> 	mov [ebx], ax	;set address valid bit
 11075                              <2> 
 11076 00008A3F B9[308B0000]        <2> 	mov ecx, .mac
 11077 00008A44 E84A020000          <2> 	call showmac
 11078 00008A49 BE[368B0000]        <2> 	mov esi, .name
 11079 00008A4E E80A93FFFF          <2> 	call print
 11080 00008A53 BE[3E8B0000]        <2> 	mov esi, .initmsg
 11081 00008A58 E80093FFFF          <2> 	call print
 11082 00008A5D C605[2F8B0000]01    <2> 	mov byte [.nicconfig], 1
 11083 00008A64 31DB                <2> 	xor ebx, ebx
 11084 00008A66 C3                  <2> 	ret
 11085                              <2> 	
 11086                              <2> .sendpacket:
 11087 00008A67 803D[2F8B0000]00    <2> 	cmp byte [.nicconfig], 0
 11088 00008A6E 7512                <2> 	jne .sendit
 11089 00008A70 56                  <2> 	push esi
 11090 00008A71 57                  <2> 	push edi
 11091 00008A72 E8DFFEFFFF          <2> 	call .init
 11092 00008A77 5F                  <2> 	pop edi
 11093 00008A78 5E                  <2> 	pop esi
 11094 00008A79 81FB00000000        <2> 	cmp ebx, 0
 11095 00008A7F 7401                <2> 	je .sendit
 11096 00008A81 C3                  <2> 	ret
 11097                              <2> .sendit:	;packet start in edi, packet end in esi
 11098 00008A82 8B0D[308B0000]      <2> 	mov ecx, [.mac]
 11099 00008A88 894F06              <2> 	mov [edi + 6], ecx
 11100 00008A8B 668B0D[348B0000]    <2> 	mov cx, [.mac + 4]
 11101 00008A92 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 11102 00008A96 8B1D[2B8B0000]      <2> 	mov ebx, [.basenicaddr]
 11103 00008A9C 29FE                <2> 	sub esi, edi
 11104 00008A9E A1[41020000]        <2> 	mov eax, [basecache]
 11105 00008AA3 C1E004              <2> 	shl eax, 4
 11106 00008AA6 01F8                <2> 	add eax, edi	;ALWAYS ADD THE VIRTUAL MEMORY OFFSET!
 11107 00008AA8 A3[508B0000]        <2> 	mov [.tdesc], eax	;Low Address
 11108 00008AAD 8935[588B0000]      <2> 	mov [.tdesc + 8], esi	;Length
 11109 00008AB3 B8000B0000          <2> 	mov eax, 0xB00
 11110 00008AB8 A3[5A8B0000]        <2> 	mov [.tdesc + 10], eax	;Command
 11111 00008ABD B810000000          <2> 	mov eax, 16
 11112 00008AC2 898318380000        <2> 	mov [ebx + .TDT], eax	;Trail of TDESC ring buffer
 11113                              <2> .checksta:
 11114 00008AC8 8B0D[5C8B0000]      <2> 	mov ecx, [.tdesc + 12]
 11115 00008ACE 81E101000000        <2> 	and ecx, 1
 11116 00008AD4 81F900000000        <2> 	cmp ecx, 0
 11117 00008ADA 74EC                <2> 	je .checksta
 11118 00008ADC 31DB                <2> 	xor ebx, ebx
 11119 00008ADE C3                  <2> 	ret
 11120                              <2> 	
 11121                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 11122 00008ADF 8B35[2B8B0000]      <2> 	mov esi, [.basenicaddr]
 11123 00008AE5 8B4610              <2> 	mov eax, [esi + .EEC]
 11124 00008AE8 0D40000000          <2> 	or eax, 1000000b
 11125 00008AED 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 11126                              <2> .waiteeprom:
 11127 00008AF0 8B4610              <2> 	mov eax, [esi + .EEC]
 11128 00008AF3 2580000000          <2> 	and eax, 10000000b
 11129 00008AF8 3D80000000          <2> 	cmp eax, 10000000b
 11130 00008AFD 75F1                <2> 	jne .waiteeprom
 11131 00008AFF 8B4614              <2> 	mov eax, [esi + .EERD]
 11132 00008B02 31C0                <2> 	xor eax, eax
 11133 00008B04 88D4                <2> 	mov ah, dl 	;eeprom address
 11134 00008B06 0C01                <2> 	or al, 1	;start read
 11135 00008B08 894614              <2> 	mov [esi + .EERD], eax
 11136                              <2> .waiteepromread:
 11137 00008B0B 8B4614              <2> 	mov eax, [esi + .EERD]
 11138 00008B0E 2510000000          <2> 	and eax, 10000b
 11139 00008B13 3D10000000          <2> 	cmp eax, 10000b
 11140 00008B18 75F1                <2> 	jne .waiteepromread
 11141 00008B1A 8B4614              <2> 	mov eax, [esi + .EERD]
 11142 00008B1D 668B4610            <2> 	mov ax, [esi + .EEC]
 11143 00008B21 24BF                <2> 	and al, 10111111b
 11144 00008B23 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 11145 00008B27 C1E810              <2> 	shr eax, 16	;AX has the requested word
 11146 00008B2A C3                  <2> 	ret
 11147                              <2> 
 11148 00008B2B 00000000            <2> .basenicaddr dd 0
 11149 00008B2F 00                  <2> .nicconfig db 0
 11150 00008B30 000000000000        <2> .mac db 0,0,0,0,0,0
 11151 00008B36 4938323534582000    <2> .name db "I8254X ",0
 11152 00008B3E 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 11153 00008B47 65640A00            <2>
 11154 00008B4B 00<rept>            <2> align 16, db 0
 11155                              <2> .tdesc:
 11156 00008B50 00000000            <2> 	dd 0	;Address Low = 0
 11157 00008B54 00000000            <2> 	dd 0	;Address High = 4
 11158 00008B58 0000                <2> 	dw 0	;Length = 8
 11159 00008B5A 00                  <2> 	db 0	;CSO = 10
 11160 00008B5B 00                  <2> 	db 0	;CMD = 11
 11161 00008B5C 00                  <2> 	db 0	;STA, RSV = 12
 11162 00008B5D 00                  <2> 	db 0	;CSS = 13
 11163 00008B5E 0000                <2> 	dw 0	;Special = 14
 11164 00008B60 00<rept>            <2> times (128-16) db 0
 11165                              <2> .end:
 11166                              <1> %endif
 11167 00008BD0 C3                  <1> 	ret
 11168                              <1> 
 11169                              <1> sendpacket: ;packet start in edi, end in esi
 11170                              <1> 	%ifdef rtl8139.included
 11171 00008BD1 57                  <1> 		push edi
 11172 00008BD2 56                  <1> 		push esi
 11173 00008BD3 E871F9FFFF          <1> 		call rtl8139.sendpacket
 11174 00008BD8 5E                  <1> 		pop esi
 11175 00008BD9 5F                  <1> 		pop edi
 11176                              <1> 	%endif
 11177                              <1> 	%ifdef rtl8169.included
 11178                              <1> 		push edi
 11179                              <1> 		push esi
 11180                              <1> 		call rtl8169.sendpacket
 11181                              <1> 		pop esi
 11182                              <1> 		pop edi
 11183                              <1> 	%endif
 11184                              <1> 	%ifdef ne2000.included
 11185 00008BDA 57                  <1> 		push edi
 11186 00008BDB 56                  <1> 		push esi
 11187 00008BDC E841FCFFFF          <1> 		call ne2000.sendpacket
 11188 00008BE1 5E                  <1> 		pop esi
 11189 00008BE2 5F                  <1> 		pop edi
 11190                              <1> 	%endif
 11191                              <1> 	%ifdef i8254x.included
 11192 00008BE3 E87FFEFFFF          <1> 		call i8254x.sendpacket
 11193                              <1> 	%endif
 11194 00008BE8 C3                  <1> 	ret
 11195                              <1> 
 11196                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 11197 00008BE9 31C0                <1> 	xor eax, eax
 11198 00008BEB 31DB                <1> 	xor ebx, ebx
 11199 00008BED 31C9                <1> 	xor ecx, ecx
 11200                              <1> .lp:
 11201 00008BEF 8A07                <1> 	mov al, [edi]
 11202 00008BF1 8A6701              <1> 	mov ah, [edi + 1]
 11203 00008BF4 01C3                <1> 	add ebx, eax
 11204 00008BF6 81C702000000        <1> 	add edi, 2
 11205 00008BFC 39F7                <1> 	cmp edi, esi
 11206 00008BFE 72EF                <1> 	jb .lp
 11207 00008C00 66B9FFFF            <1> 	mov cx, 0xFFFF
 11208 00008C04 6689D8              <1> 	mov ax, bx
 11209 00008C07 C1EB10              <1> 	shr ebx, 16
 11210 00008C0A 6601D8              <1> 	add ax, bx
 11211 00008C0D 6629C1              <1> 	sub cx, ax
 11212 00008C10 C3                  <1> 	ret
 11213                              <1> 	
 11214                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 11215 00008C11 31DB                <1> 	xor ebx, ebx
 11216 00008C13 31C9                <1> 	xor ecx, ecx
 11217 00008C15 31D2                <1> 	xor edx, edx
 11218                              <1> .mlp:
 11219 00008C17 89F7                <1> 	mov edi, esi
 11220 00008C19 4F                  <1> 	dec edi
 11221                              <1> .lp:
 11222 00008C1A 47                  <1> 	inc edi
 11223 00008C1B 8A07                <1> 	mov al, [edi]
 11224 00008C1D 3C20                <1> 	cmp al, " "
 11225 00008C1F 7408                <1> 	je .dnlp
 11226 00008C21 3C00                <1> 	cmp al, 0
 11227 00008C23 7404                <1> 	je .dnlp
 11228 00008C25 3C2E                <1> 	cmp al, "."
 11229 00008C27 75F1                <1> 	jne .lp
 11230                              <1> .dnlp:
 11231 00008C29 30C0                <1> 	xor al, al
 11232 00008C2B 8807                <1> 	mov [edi], al
 11233 00008C2D 53                  <1> 	push ebx
 11234 00008C2E 56                  <1> 	push esi
 11235 00008C2F 57                  <1> 	push edi
 11236 00008C30 31FF                <1> 	xor edi, edi
 11237 00008C32 E8BCA5FFFF          <1> 	call cnvrttxt
 11238 00008C37 5E                  <1> 	pop esi
 11239 00008C38 5F                  <1> 	pop edi ;i intentionally switch them
 11240 00008C39 5B                  <1> 	pop ebx
 11241 00008C3A 46                  <1> 	inc esi
 11242 00008C3B BF[538C0000]        <1> 	mov edi, ipstr
 11243 00008C40 880C1F              <1> 	mov [edi + ebx], cl
 11244 00008C43 43                  <1> 	inc ebx
 11245 00008C44 81FB04000000        <1> 	cmp ebx, 4
 11246 00008C4A 72CB                <1> 	jb .mlp
 11247 00008C4C 8B0D[538C0000]      <1> 	mov ecx, [ipstr]
 11248 00008C52 C3                  <1> 	ret
 11249 00008C53 00000000            <1> ipstr dd 0
 11250                              <1> showip: 	;put the ip address in ecx
 11251 00008C57 89C8                <1> 	mov eax, ecx
 11252 00008C59 30DB                <1> 	xor bl, bl
 11253                              <1> .lp:
 11254 00008C5B 3C00                <1> 	cmp al, 0
 11255 00008C5D 750B                <1> 	jne .nozeroprint
 11256 00008C5F B030                <1> 	mov al, "0"
 11257 00008C61 50                  <1> 	push eax
 11258 00008C62 E83A96FFFF          <1> 	call prcharq
 11259 00008C67 58                  <1> 	pop eax
 11260 00008C68 30C0                <1> 	xor al, al
 11261                              <1> .nozeroprint:
 11262 00008C6A 31C9                <1> 	xor ecx, ecx
 11263 00008C6C 88C1                <1> 	mov cl, al
 11264 00008C6E E89EA4FFFF          <1> 	call showdec
 11265 00008C73 C1E808              <1> 	shr eax, 8
 11266 00008C76 FEC3                <1> 	inc bl
 11267 00008C78 80FB04              <1> 	cmp bl, 4
 11268 00008C7B 7312                <1> 	jae .done
 11269 00008C7D 50                  <1> 	push eax
 11270 00008C7E 6653                <1> 	push bx
 11271 00008C80 BE[908C0000]        <1> 	mov esi, .dot
 11272 00008C85 E8D390FFFF          <1> 	call print
 11273 00008C8A 665B                <1> 	pop bx
 11274 00008C8C 58                  <1> 	pop eax
 11275 00008C8D EBCC                <1> 	jmp .lp
 11276                              <1> .done:
 11277 00008C8F C3                  <1> 	ret
 11278 00008C90 082E00              <1> .dot db 8,".",0
 11279                              <1> showmac:	;mac begins in [ecx]
 11280 00008C93 BE[E38C0000]        <1> 	mov esi, macprint
 11281 00008C98 89CF                <1> 	mov edi, ecx
 11282 00008C9A 81C106000000        <1> 	add ecx, 6
 11283                              <1> showmacloop:
 11284 00008CA0 8A07                <1> 	mov al, [edi]
 11285 00008CA2 8A27                <1> 	mov ah, [edi]
 11286 00008CA4 C0E804              <1> 	shr al, 4
 11287 00008CA7 C0E404              <1> 	shl ah, 4
 11288 00008CAA C0EC04              <1> 	shr ah, 4
 11289 00008CAD 0430                <1> 	add al, 48
 11290 00008CAF 3C39                <1> 	cmp al, "9"
 11291 00008CB1 7606                <1> 	jbe .goodal
 11292 00008CB3 2C30                <1> 	sub al, 48
 11293 00008CB5 2C0A                <1> 	sub al, 0xA
 11294 00008CB7 0441                <1> 	add al, "A"
 11295                              <1> .goodal:
 11296 00008CB9 80C430              <1> 	add ah, 48
 11297 00008CBC 80FC39              <1> 	cmp ah, "9"
 11298 00008CBF 7609                <1> 	jbe .goodah
 11299 00008CC1 80EC30              <1> 	sub ah, 48
 11300 00008CC4 80EC0A              <1> 	sub ah, 0xA
 11301 00008CC7 80C441              <1> 	add ah, "A"
 11302                              <1> .goodah:
 11303 00008CCA 668906              <1> 	mov [esi], ax
 11304 00008CCD 81C603000000        <1> 	add esi, 3
 11305 00008CD3 47                  <1> 	inc edi
 11306 00008CD4 39CF                <1> 	cmp edi, ecx
 11307 00008CD6 72C8                <1> 	jb showmacloop
 11308 00008CD8 BE[E38C0000]        <1> 	mov esi, macprint
 11309 00008CDD E87B90FFFF          <1> 	call print
 11310 00008CE2 C3                  <1> 	ret
 11311                              <1> 	
 11312 00008CE3 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 11313 00008CEC 30303A30303A303020- <1>
 11314 00008CF5 00                  <1>
 11315 00008CF6 00000000            <1> ethernetend dw 0,0
 11316 00008CFA C0A80002            <1> sysip db 192,168,0,2
 11317 00008CFE 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 11318                                  %endif
 11319                                      %include "source/data.asm"
 11320 00008D04 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 11321 00008D0C 73687573683A2000    <1> 	notfound1 db "shush: ",0
 11322 00008D14 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 11323 00008D1D 6E640A00            <1>
 11324 00008D21 757365726E616D653A- <1> 	userask db "username:",0
 11325 00008D2A 00                  <1>
 11326 00008D2B 70617373776F72643A- <1> 	pwdask	db	"password:",0
 11327 00008D34 00                  <1>
 11328 00008D35 40                  <1> 	computer db "@"
 11329                              <1> %ifdef io.serial
 11330                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 11331                              <1> %else
 11332 00008D36 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 11333 00008D3F 00                  <1>
 11334                              <1> %endif
 11335 00008D40 5D242000            <1> 	endprompt db "]$ ",0
 11336 00008D44 0D                  <1> 	crlf 	db  13
 11337 00008D45 0A00                <1> 	line	db	10,0
 11338                              <1> 	userlst:
 11339 00008D47 726F6F7400          <1> 			db "root",0
 11340 00008D4C 617765736F6D65706F- <1> 			db "awesomepower",0
 11341 00008D55 77657200            <1>
 11342 00008D59 7573657200          <1> 			db "user",0
 11343 00008D5E 70617373776F726400  <1> 			db "password",0
 11344 00008D67 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 11345 00008D69 00                  <1> 			db 0
 11346                              <1> 	userlstend:
 11347                              <1> 	
 11348                              <1> %ifdef io.serial
 11349                              <1> %else
 11350 00008D69 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 11351                              <1> fontend:
 11352                              <1> %endif
 11353                              <1> osend:	;this is the end of the operating system's space on disk
 11354                                  %ifdef disk.none
 11355                                  	diskfileindex:
 11356                                  	enddiskfileindex:
 11357                                  	align 512, db 0
 11358                                      %include "source/bss.asm"
 11359                                  %else
 11360                                      %include "build/fileindex.asm"
 11361                              <1> diskfileindex:
 11362 00009D6A 617267746573742E65- <1> db "argtest.elf",0
 11363 00009D73 6C6600              <1>
 11364 00009D76 50000000            <1> dd (f0-$$)/512
 11365 00009D7A 06010000            <1> dd (f1-f0)/512
 11366 00009D7E 6261636B67726F756E- <1> db "background.bmp",0
 11367 00009D87 642E626D7000        <1>
 11368 00009D8D 56010000            <1> dd (f1-$$)/512
 11369 00009D91 01140000            <1> dd (f2-f1)/512
 11370 00009D95 626F6F742E736800    <1> db "boot.sh",0
 11371 00009D9D 57150000            <1> dd (f2-$$)/512
 11372 00009DA1 01000000            <1> dd (f3-f2)/512
 11373 00009DA5 63686172746573742E- <1> db "chartest.elf",0
 11374 00009DAE 656C6600            <1>
 11375 00009DB2 58150000            <1> dd (f3-$$)/512
 11376 00009DB6 26010000            <1> dd (f4-f3)/512
 11377 00009DBA 646F73746573742E63- <1> db "dostest.com",0
 11378 00009DC3 6F6D00              <1>
 11379 00009DC6 7E160000            <1> dd (f4-$$)/512
 11380 00009DCA 01000000            <1> dd (f5-f4)/512
 11381 00009DCE 6578656300          <1> db "exec",0
 11382 00009DD3 7F160000            <1> dd (f5-$$)/512
 11383 00009DD7 01000000            <1> dd (f6-f5)/512
 11384 00009DDB 66696E616C636F756E- <1> db "finalcount.sn",0
 11385 00009DE4 742E736E00          <1>
 11386 00009DE9 80160000            <1> dd (f6-$$)/512
 11387 00009DED 01000000            <1> dd (f7-f6)/512
 11388 00009DF1 666F726B00          <1> db "fork",0
 11389 00009DF6 81160000            <1> dd (f7-$$)/512
 11390 00009DFA 01000000            <1> dd (f8-f7)/512
 11391 00009DFE 677261766974792E65- <1> db "gravity.elf",0
 11392 00009E07 6C6600              <1>
 11393 00009E0A 82160000            <1> dd (f8-$$)/512
 11394 00009E0E E0000000            <1> dd (f9-f8)/512
 11395 00009E12 6775697465737400    <1> db "guitest",0
 11396 00009E1A 62170000            <1> dd (f9-$$)/512
 11397 00009E1E 03000000            <1> dd (f10-f9)/512
 11398 00009E22 68656C6C6F776F726C- <1> db "helloworld.elf",0
 11399 00009E2B 642E656C6600        <1>
 11400 00009E31 65170000            <1> dd (f10-$$)/512
 11401 00009E35 D6010000            <1> dd (f11-f10)/512
 11402 00009E39 696E7400            <1> db "int",0
 11403 00009E3D 3B190000            <1> dd (f11-$$)/512
 11404 00009E41 01000000            <1> dd (f12-f11)/512
 11405 00009E45 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11406 00009E4E 2E736E00            <1>
 11407 00009E52 3C190000            <1> dd (f12-$$)/512
 11408 00009E56 01000000            <1> dd (f13-f12)/512
 11409 00009E5A 6D6172696F2E736E00  <1> db "mario.sn",0
 11410 00009E63 3D190000            <1> dd (f13-$$)/512
 11411 00009E67 01000000            <1> dd (f14-f13)/512
 11412 00009E6B 6D6F6D656E742E7761- <1> db "moment.wav",0
 11413 00009E74 7600                <1>
 11414 00009E76 3E190000            <1> dd (f14-$$)/512
 11415 00009E7A 34040000            <1> dd (f15-f14)/512
 11416 00009E7E 70692E656C6600      <1> db "pi.elf",0
 11417 00009E85 721D0000            <1> dd (f15-$$)/512
 11418 00009E89 1F010000            <1> dd (f16-f15)/512
 11419 00009E8D 736F6C6C65726F732E- <1> db "solleros.bmp",0
 11420 00009E96 626D7000            <1>
 11421 00009E9A 911E0000            <1> dd (f16-$$)/512
 11422 00009E9E B0020000            <1> dd (f17-f16)/512
 11423 00009EA2 736F6C6C65726F732E- <1> db "solleros.txt",0
 11424 00009EAB 74787400            <1>
 11425 00009EAF 41210000            <1> dd (f17-$$)/512
 11426 00009EB3 01000000            <1> dd (f18-f17)/512
 11427 00009EB7 736F6E676F74696D65- <1> db "songotime.sn",0
 11428 00009EC0 2E736E00            <1>
 11429 00009EC4 42210000            <1> dd (f18-$$)/512
 11430 00009EC8 01000000            <1> dd (f19-f18)/512
 11431 00009ECC 73736500            <1> db "sse",0
 11432 00009ED0 43210000            <1> dd (f19-$$)/512
 11433 00009ED4 02000000            <1> dd (f20-f19)/512
 11434 00009ED8 737464696F74657374- <1> db "stdiotest.elf",0
 11435 00009EE1 2E656C6600          <1>
 11436 00009EE6 45210000            <1> dd (f20-$$)/512
 11437 00009EEA 27010000            <1> dd (f21-f20)/512
 11438 00009EEE 74656C7900          <1> db "tely",0
 11439 00009EF3 6C220000            <1> dd (f21-$$)/512
 11440 00009EF7 01000000            <1> dd (f22-f21)/512
 11441 00009EFB 74696D65746573742E- <1> db "timetest.elf",0
 11442 00009F04 656C6600            <1>
 11443 00009F08 6D220000            <1> dd (f22-$$)/512
 11444 00009F0C 04010000            <1> dd (f23-f22)/512
 11445 00009F10 7475746F7269616C2E- <1> db "tutorial.sh",0
 11446 00009F19 736800              <1>
 11447 00009F1C 71230000            <1> dd (f23-$$)/512
 11448 00009F20 03000000            <1> dd (f24-f23)/512
 11449 00009F24 756E667300          <1> db "unfs",0
 11450 00009F29 74230000            <1> dd (f24-$$)/512
 11451 00009F2D 02000000            <1> dd (f25-f24)/512
 11452 00009F31 766963746F72792E77- <1> db "victory.wav",0
 11453 00009F3A 617600              <1>
 11454 00009F3D 76230000            <1> dd (f25-$$)/512
 11455 00009F41 16000000            <1> dd (f26-f25)/512
 11456 00009F45 5F696D672E62696E00  <1> db "_img.bin",0
 11457 00009F4E 8C230000            <1> dd (f26-$$)/512
 11458 00009F52 D7020000            <1> dd (f27-f26)/512
 11459                              <1> enddiskfileindex:
 11460                              <1> 
 11461                                      %include "source/bss.asm"
 11462 00009F56 90<rept>            <1> align 4, nop
 11463                              <1> bssstart: equ $
 11464                              <1> guion equ bssstart
 11465                              <1> DriveNumber equ guion + 1
 11466                              <1> lbaad equ DriveNumber + 1
 11467                              <1> memlistbuf equ lbaad + 4
 11468                              <1> memlistend equ memlistbuf + 576
 11469                              <1> bsscopy equ memlistend
 11470                              <1> initialstack equ bsscopy
 11471                              <1> stackend equ initialstack + 4000
 11472                              <1> sigtable equ stackend + 96
 11473                              <1> fileindex: equ sigtable + 4
 11474                              <1> fileindexend: equ fileindex + 1024
 11475                              <1> previousstack equ fileindexend
 11476                              <1> lastfolderloc equ previousstack + 4
 11477                              <1> currentfolderloc equ lastfolderloc + 4
 11478                              <1> currentfolder equ currentfolderloc + 4
 11479                              <1> currentfolderend equ currentfolder + 512
 11480                              <1> uid equ currentfolderend
 11481                              <1> ranboot equ uid + 4
 11482                              <1> IFON equ ranboot + 1
 11483                              <1> IFTRUE equ IFON + 1
 11484                              <1> BATCHPOS equ IFTRUE + 100
 11485                              <1> BATCHISON equ BATCHPOS + 4
 11486                              <1> LOOPON equ BATCHISON + 1
 11487                              <1> LOOPPOS	equ LOOPON + 1
 11488                              <1> variables: equ LOOPPOS + 4
 11489                              <1> varend: equ variables + 4096
 11490                              <1> buftxt2: equ varend
 11491                              <1> buftxt: equ buftxt2 + 1024
 11492                              <1> buftxtend: equ buftxt + 1024
 11493                              <1> buf2: equ buftxtend
 11494                              <1> numbuf: equ buf2 + 20
 11495                              <1> %ifdef io.serial
 11496                              <1> 	lastcommandpos equ numbuf + 1
 11497                              <1> %else
 11498                              <1> 	%ifdef gui.included
 11499                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11500                              <1> 		graphicstableend equ graphicstable + 200h
 11501                              <1> 		%ifdef gui.background
 11502                              <1> 			backgroundbuffer equ graphicstableend
 11503                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11504                              <1> 			mousecolorbuf equ backgroundbufferend
 11505                              <1> 		%else
 11506                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11507                              <1> 		%endif
 11508                              <1> 		mcolorend equ mousecolorbuf + 256
 11509                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11510                              <1> 		videobufend	equ videobuf + 210*65*2
 11511                              <1> 		videobuf2 equ videobufend
 11512                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 11513                              <1> 	%else
 11514                              <1> 		videobuf equ numbuf + 1
 11515                              <1> 		videobufend equ videobuf + 80*30*2
 11516                              <1> 		videobuf2 equ videobufend
 11517                              <1> 		videobuf2end equ videobuf2 + 80*30*2
 11518                              <1> 	%endif
 11519                              <1> 	lastcommandpos: equ videobuf2end
 11520                              <1> %endif
 11521                              <1> 	commandbufpos: equ lastcommandpos + 4
 11522                              <1> 	commandlistentries: equ commandbufpos + 4
 11523                              <1> 	commandsentered: equ commandlistentries + 4
 11524                              <1> 	commandbuf: equ commandsentered + 4
 11525                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11526                              <1> %ifdef network.included
 11527                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11528                              <1> 	rbuffend equ rbuffstart + 8212
 11529                              <1> %else
 11530                              <1> 	rbuffstart equ commandbufend
 11531                              <1> 	rbuffend equ commandbufend
 11532                              <1> %endif
 11533                              <1> %ifdef threads.included
 11534                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11535                              <1> 	threadlistend: equ threadlist + 1024*4
 11536                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11537                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11538                              <1> 	bssend equ stack1 + 1024*1024
 11539                              <1> %else
 11540                              <1> 	bssend equ rbuffend
 11541                              <1> %endif
 11542                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11543                                      %include "build/files.asm"
 11544 00009F58 00<rept>            <1> align 512,db 0
 11545                              <1> f0:
 11546 00009F58 <incbin>            <1> incbin "included/argtest.elf"
 11547 0002AAF2 00<rept>            <1> align 512,db 0
 11548                              <1> f1:
 11549 0002AAF2 <incbin>            <1> incbin "included/background.bmp"
 11550 002AAC46 00<rept>            <1> align 512,db 0
 11551                              <1> f2:
 11552 002AAC46 <incbin>            <1> incbin "included/boot.sh"
 11553 002AAF00 00<rept>            <1> align 512,db 0
 11554                              <1> f3:
 11555 002AAF00 <incbin>            <1> incbin "included/chartest.elf"
 11556 002CFADB 00<rept>            <1> align 512,db 0
 11557                              <1> f4:
 11558 002CFADB <incbin>            <1> incbin "included/dostest.com"
 11559 002CFD31 00<rept>            <1> align 512,db 0
 11560                              <1> f5:
 11561 002CFD31 <incbin>            <1> incbin "included/exec"
 11562 002CFEE1 00<rept>            <1> align 512,db 0
 11563                              <1> f6:
 11564 002CFEE1 <incbin>            <1> incbin "included/finalcount.sn"
 11565 002D0102 00<rept>            <1> align 512,db 0
 11566                              <1> f7:
 11567 002D0102 <incbin>            <1> incbin "included/fork"
 11568 002D0358 00<rept>            <1> align 512,db 0
 11569                              <1> f8:
 11570 002D0358 <incbin>            <1> incbin "included/gravity.elf"
 11571 002EC302 00<rept>            <1> align 512,db 0
 11572                              <1> f9:
 11573 002EC302 <incbin>            <1> incbin "included/guitest"
 11574 002EC82B 00<rept>            <1> align 512,db 0
 11575                              <1> f10:
 11576 002EC82B <incbin>            <1> incbin "included/helloworld.elf"
 11577 003275E3 00<rept>            <1> align 512,db 0
 11578                              <1> f11:
 11579 003275E3 <incbin>            <1> incbin "included/int"
 11580 003277AF 00<rept>            <1> align 512,db 0
 11581                              <1> f12:
 11582 003277AF <incbin>            <1> incbin "included/lostwoods.sn"
 11583 00327856 00<rept>            <1> align 512,db 0
 11584                              <1> f13:
 11585 00327856 <incbin>            <1> incbin "included/mario.sn"
 11586 00327A3A 00<rept>            <1> align 512,db 0
 11587                              <1> f14:
 11588 00327A3A <incbin>            <1> incbin "included/moment.wav"
 11589 003AE21A 00<rept>            <1> align 512,db 0
 11590                              <1> f15:
 11591 003AE21A <incbin>            <1> incbin "included/pi.elf"
 11592 003D2131 00<rept>            <1> align 512,db 0
 11593                              <1> f16:
 11594 003D2131 <incbin>            <1> incbin "included/solleros.bmp"
 11595 004281E6 00<rept>            <1> align 512,db 0
 11596                              <1> f17:
 11597 004281E6 <incbin>            <1> incbin "included/solleros.txt"
 11598 00428374 00<rept>            <1> align 512,db 0
 11599                              <1> f18:
 11600 00428374 <incbin>            <1> incbin "included/songotime.sn"
 11601 0042844A 00<rept>            <1> align 512,db 0
 11602                              <1> f19:
 11603 0042844A <incbin>            <1> incbin "included/sse"
 11604 004288A8 00<rept>            <1> align 512,db 0
 11605                              <1> f20:
 11606 004288A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11607 0044D643 00<rept>            <1> align 512,db 0
 11608                              <1> f21:
 11609 0044D643 <incbin>            <1> incbin "included/tely"
 11610 0044D9BA 00<rept>            <1> align 512,db 0
 11611                              <1> f22:
 11612 0044D9BA <incbin>            <1> incbin "included/timetest.elf"
 11613 0046E03D 00<rept>            <1> align 512,db 0
 11614                              <1> f23:
 11615 0046E03D <incbin>            <1> incbin "included/tutorial.sh"
 11616 0046E752 00<rept>            <1> align 512,db 0
 11617                              <1> f24:
 11618 0046E752 <incbin>            <1> incbin "included/unfs"
 11619                              <1> align 512,db 0
 11620                              <1> f25:
 11621 0046E752 <incbin>            <1> incbin "included/victory.wav"
 11622 00471748 00<rept>            <1> align 512,db 0
 11623                              <1> f26:
 11624 00471748 <incbin>            <1> incbin "included/_img.bin"
 11625                              <1> align 512,db 0
 11626                              <1> f27:
 11627                                  %endif
