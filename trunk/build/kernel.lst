     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> %define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E90E00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   129 0000000C 00                  <1>
   130 0000000D 0C010000            <1> dd 268	;version number
   131                              <1> signatureend:
   132                                  [BITS 16]
   133                                      %include "source/boot.asm"
   134                              <1>     ; MENU.ASM
   135                              <1> boot:
   136 00000011 8CC8                <1> 	mov ax, cs
   137 00000013 8ED8                <1> 	mov ds, ax
   138 00000015 8EC0                <1> 	mov es, ax
   139 00000017 8ED0                <1> 	mov ss, ax
   140 00000019 0F31                <1> 	rdtsc
   141 0000001B 66A3[4963]          <1> 	mov [initialtsc], eax
   142 0000001F 668916[4D63]        <1> 	mov [initialtsc + 4], edx
   143 00000024 66A3[5163]          <1> 	mov [lasttsc], eax
   144 00000028 668916[5563]        <1> 	mov [lasttsc + 4], edx
   145 0000002D 880E[4463]          <1> 	mov [DriveNumber], cl
   146 00000031 66891E[4563]        <1> 	mov [lbaad], ebx
   147                              <1> %ifdef io.serial
   148                              <1> 	call getmemorysize
   149                              <1> 	mov si, serialmsg
   150                              <1> 	call printrm
   151                              <1> 	jmp pmode
   152                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   153                              <1> %else
   154 00000036 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   155 00000039 E95400              <1> 	jmp pmode
   156                              <1> %endif
   157                              <1> 	
   158                              <1> vgaset:
   159 0000003C B81200              <1> 	mov ax, 12h
   160 0000003F 31DB                <1> 	xor bx, bx
   161 00000041 CD10                <1> 	int 10h
   162 00000043 C606[4363]00        <1> 	mov byte [guion], 0
   163 00000048 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   164 0000004B C3                  <1> 	ret
   165                              <1> 
   166                              <1> getmemorysize:
   167 0000004C BF[5963]            <1> 	mov di, memlistbuf
   168 0000004F 6631DB              <1> 	xor ebx, ebx
   169                              <1> getmemsizeloop:
   170 00000052 66B820E80000        <1> 	mov eax, 0xE820
   171 00000058 66BA50414D53        <1> 	mov edx, 0x0534D4150
   172 0000005E 66B918000000        <1> 	mov ecx, 24
   173 00000064 CD15                <1> 	int 0x15
   174 00000066 81C71800            <1> 	add di, 24
   175 0000006A 81FF[9965]          <1> 	cmp di, memlistend
   176 0000006E 7305                <1> 	jae nomoregetmemsize
   177 00000070 6685DB              <1> 	test ebx, ebx
   178 00000073 75DD                <1> 	jnz getmemsizeloop
   179                              <1> nomoregetmemsize:
   180 00000075 81EF[5963]          <1> 	sub di, memlistbuf
   181 00000079 893E[9965]          <1> 	mov [memlistend], di
   182 0000007D C3                  <1> 	ret
   183                              <1> 	
   184                              <1> printrm:			; 'si' comes in with string address
   185 0000007E BB0700              <1>     mov bx,07		; write to display
   186 00000081 B40E                <1>     mov ah,0Eh		; screen function
   187 00000083 8A04                <1>    .lp:    mov al,[si]         ; get next character
   188 00000085 84C0                <1>     test al,al		; look for terminator 
   189 00000087 7406                <1>     jz .done	; zero byte at end of string
   190 00000089 CD10                <1>     int 10h		; write character to screen.    
   191 0000008B 46                  <1> 	inc si	     	; move to next character
   192 0000008C E9F4FF              <1>     jmp .lp		; loop
   193 0000008F C3                  <1> .done: ret
   194                                      %include "source/pmode.asm"
   195                              <1> [BITS 16]
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> ;	16-bit real mode
   198                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   199                              <1> 
   200                              <1> pmode:
   201 00000090 6631C0              <1> 	xor eax, eax
   202 00000093 6631DB              <1> 	xor ebx, ebx
   203 00000096 6631C9              <1> 	xor ecx, ecx
   204 00000099 6631D2              <1> 	xor edx, edx
   205 0000009C 6631F6              <1> 	xor esi, esi
   206 0000009F 6631FF              <1> 	xor edi, edi
   207 000000A2 BA9200              <1> 	mov dx, 0x92
   208 000000A5 EC                  <1> 	in al, dx	;;A20
   209 000000A6 0C02                <1> 	or al, 2
   210 000000A8 EE                  <1> 	out dx, al
   211 000000A9 8CCB                <1> 	mov bx,cs		; EBX=segment
   212 000000AB 66C1E304            <1> 	shl ebx,4		;	<< 4
   213 000000AF 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   214 000000B2 A3[8103]            <1> 	mov [gdt2 + 2],ax
   215 000000B5 A3[8903]            <1> 	mov [gdt3 + 2],ax
   216 000000B8 66C1E810            <1> 	shr eax,16
   217 000000BC A2[8303]            <1> 	mov [gdt2 + 4],al
   218 000000BF A2[8B03]            <1> 	mov [gdt3 + 4],al
   219 000000C2 8826[8603]          <1> 	mov [gdt2 + 7],ah
   220 000000C6 8826[8E03]          <1> 	mov [gdt3 + 7],ah
   221                              <1> 
   222 000000CA 66B8[C4670300]      <1> 	mov eax, initialstack
   223 000000D0 660306[2702]        <1> 	add eax, [newcodecache]
   224 000000D5 A3[7903]            <1> 	mov [gdts + 2],ax
   225 000000D8 66C1E810            <1> 	shr eax, 16
   226 000000DC A2[7B03]            <1> 	mov [gdts + 4],al
   227 000000DF 8826[7E03]          <1> 	mov [gdts + 7], ah
   228                              <1> 	
   229 000000E3 66A1[2702]          <1> 	mov eax, [newcodecache]
   230 000000E7 A3[9103]            <1> 	mov [gdt4 + 2],ax
   231 000000EA A3[9903]            <1> 	mov [gdt5 + 2],ax
   232 000000ED A3[A103]            <1> 	mov [gdtv8086 + 2], ax
   233 000000F0 A3[A903]            <1> 	mov [gdtv80862 + 2], ax
   234 000000F3 66C1E810            <1> 	shr eax,16
   235 000000F7 A2[9303]            <1> 	mov [gdt4 + 4],al
   236 000000FA A2[9B03]            <1> 	mov [gdt5 + 4],al
   237 000000FD A2[A303]            <1> 	mov [gdtv8086 + 4],al
   238 00000100 A2[AB03]            <1> 	mov [gdtv80862 + 4],al
   239 00000103 8826[9603]          <1> 	mov [gdt4 + 7],ah
   240 00000107 8826[9E03]          <1> 	mov [gdt5 + 7],ah
   241 0000010B 8826[A603]          <1> 	mov [gdtv8086 + 7],ah
   242 0000010F 8826[AE03]          <1> 	mov [gdtv80862 + 7],ah
   243                              <1> 	
   244 00000113 66B800004000        <1> 	mov eax, dosprogloc
   245 00000119 660306[2702]        <1> 	add eax, [newcodecache]
   246 0000011E A3[B103]            <1> 	mov [gdtdos + 2],ax
   247 00000121 A3[B903]            <1> 	mov [gdtdos2 + 2],ax
   248 00000124 66C1E810            <1> 	shr eax,16
   249 00000128 A2[B303]            <1> 	mov [gdtdos + 4],al
   250 0000012B A2[BB03]            <1> 	mov [gdtdos2 + 4],al
   251 0000012E 8826[B603]          <1> 	mov [gdtdos + 7],ah
   252 00000132 8826[BE03]          <1> 	mov [gdtdos2 + 7],ah
   253                              <1> 	
   254                              <1> ; fix up gdt and idt
   255 00000136 67668D83[67030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   256 0000013E 66A3[5D03]          <1> 	mov [gdtr + 2],eax
   257 00000142 67668D83[BF030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   258 0000014A 66A3[6303]          <1> 	mov [idtr + 2],eax
   259 0000014E FA                  <1> 	cli
   260 0000014F 0F0116[5B03]        <1> 	lgdt [gdtr]
   261 00000154 0F011E[6103]        <1> 	lidt [idtr]
   262 00000159 6631DB              <1> 	xor ebx, ebx
   263 0000015C 8CDB                <1> 	mov bx, ds
   264 0000015E 66891E[2302]        <1> 	mov [basecache], ebx
   265 00000163 0F20C0              <1> 	mov eax,cr0
   266 00000166 0C01                <1> 	or al,1
   267 00000168 0F22C0              <1> 	mov cr0,eax
   268 0000016B EA[7001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   269                              <1> [BITS 32]
   270                              <1> do_pm:
   271 00000170 31C0                <1> 	xor eax, eax
   272 00000172 66B82000            <1> 	mov ax, SYS_DATA_SEL
   273 00000176 8ED8                <1> 	mov ds, ax
   274 00000178 8EC0                <1> 	mov es, ax
   275 0000017A 8EE0                <1> 	mov fs, ax
   276 0000017C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   277 00000180 8EE8                <1> 	mov gs, ax
   278                              <1> 	
   279                              <1> copykernel:
   280 00000182 648B06              <1> 	mov eax, [fs:esi]
   281 00000185 658906              <1> 	mov [gs:esi], eax
   282 00000188 81C604000000        <1> 	add esi, 4
   283 0000018E 81FE[C4670300]      <1> 	cmp esi, bsscopy
   284 00000194 72EC                <1> 	jb copykernel
   285 00000196 EA[9D010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   286                              <1> 	
   287                              <1> done_copy:
   288 0000019D 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   289 000001A1 8ED8                <1> 	mov ds, ax
   290 000001A3 8EC0                <1> 	mov es, ax
   291 000001A5 8EE0                <1> 	mov fs, ax
   292                              <1> 	;mov ax, STACK_SEL
   293 000001A7 8ED0                <1> 	mov ss, ax
   294 000001A9 BC[64770300]        <1> 	mov esp, stackend
   295 000001AE 66B82000            <1> 	mov ax, SYS_DATA_SEL
   296 000001B2 8EE8                <1> 	mov gs, ax
   297                              <1> 	
   298 000001B4 E89D560000          <1> 	call initialize	;initialize drivers
   299                              <1> 	
   300 000001B9 A1[27020000]        <1> 	mov eax, [newcodecache]
   301 000001BE C1E804              <1> 	shr eax, 4
   302 000001C1 A3[23020000]        <1> 	mov [basecache], eax
   303                              <1> 	
   304 000001C6 BE[81251400]        <1> 	mov esi, bssend
   305 000001CB 31C0                <1> 	xor eax, eax
   306                              <1> clearkernelbuffers:
   307 000001CD 8906                <1> 	mov [esi], eax
   308 000001CF 81EE04000000        <1> 	sub esi, 4
   309 000001D5 81FE[C4670300]      <1> 	cmp esi, bsscopy
   310 000001DB 77F0                <1> 	ja clearkernelbuffers
   311 000001DD FB                  <1> 	sti
   312                              <1> 
   313                              <1> getmemoryspace:
   314 000001DE BE[59630000]        <1> 	mov esi, memlistbuf
   315 000001E3 31FF                <1> 	xor edi, edi
   316 000001E5 668B3D[99650000]    <1> 	mov di, [memlistend]
   317 000001EC 01F7                <1> 	add edi, esi
   318 000001EE 31C0                <1> 	xor eax, eax
   319                              <1> memoryspaceaddition:
   320 000001F0 39FE                <1> 	cmp esi, edi
   321 000001F2 7325                <1> 	jae finishedmemspacecalc
   322 000001F4 81C608000000        <1> 	add esi, 8
   323 000001FA 8B0E                <1> 	mov ecx, [esi]
   324 000001FC 81C608000000        <1> 	add esi, 8
   325 00000202 8B1E                <1> 	mov ebx, [esi]
   326 00000204 81C608000000        <1> 	add esi, 8
   327 0000020A 81FB01000000        <1> 	cmp ebx, 1
   328 00000210 75DE                <1> 	jne memoryspaceaddition
   329 00000212 01C8                <1> 	add eax, ecx
   330 00000214 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   331                              <1> finishedmemspacecalc:
   332 00000219 A3[38020000]        <1> 	mov [memoryspace], eax
   333                              <1> %ifdef gui.included
   334                              <1> 	cmp byte [guion], 0
   335                              <1> 	je normalstartup
   336                              <1> 	mov ebx, [basecache]
   337                              <1> 	shl ebx, 4
   338                              <1> 	mov edi, [physbaseptr]
   339                              <1> 	sub edi, ebx
   340                              <1> 	mov [physbaseptr], edi
   341                              <1> 	jmp guiboot
   342                              <1> %endif
   343                              <1> normalstartup:
   344 0000021E E980260000          <1> 	jmp os
   345                              <1> 	
   346 00000223 00000000            <1> basecache dd 0
   347 00000227 00001000            <1> newcodecache dd 0x100000
   348                              <1> 
   349 0000022B 00                  <1> testingcpuspeed db 0
   350 0000022C 00000000            <1> cpuspeedperint dd 0
   351 00000230 0000000000000000    <1> cpuclocksperint dd 0,0
   352 00000238 00000000            <1> memoryspace dd 0
   353 0000023C 7D0A                <1> pitdiv dw 2685
   354 0000023E 2E562200            <1> timeinterval dd 2250286
   355                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   356                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   357                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   358                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   359                              <1> ;div=55483 is 46500044.000006ns
   360                              <1> ;use one of those values for the minimum error
   361                              <1> 
   362 00000242 00                  <1> ticks db 0
   363 00000243 00000000            <1> timeseconds dd 0
   364 00000247 00000000            <1> timenanoseconds dd 0
   365 0000024B 00                  <1> soundon db 0
   366 0000024C 0000                <1> soundrepititions dw 0
   367 0000024E 00000000            <1> soundpos dd 0
   368 00000252 00000000            <1> soundendpos dd 0
   369                              <1> 
   370                              <1> cpuspeedend:
   371 00000256 C605[2B020000]00    <1> 	mov byte [testingcpuspeed], 0
   372 0000025D A3[2C020000]        <1> 	mov [cpuspeedperint], eax
   373 00000262 B8[604D0000]        <1> 	mov eax, cpuspeedloopend
   374 00000267 890424              <1> 	mov [esp], eax
   375 0000026A E9DC000000          <1> 	jmp handled
   376                              <1> 
   377                              <1> pitinterrupt: ;this controls threading
   378 0000026F 803D[2B020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   379 00000276 74DE                <1> 	je cpuspeedend
   380                              <1> 
   381 00000278 FA                  <1> 	cli
   382                              <1> 
   383 00000279 E8A6000000          <1> 	call timekeeper ;this updates the internal time
   384                              <1> 	
   385 0000027E 803D[4B020000]01    <1> 	cmp byte [soundon], 1
   386 00000285 0F84584D0000        <1> 	je near PCSpeakerRAW
   387                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   388                              <1> %ifdef threads.included
   389 0000028B 803D[675E0000]01    <1> 	cmp byte [threadson], 1
   390 00000292 0F846F5B0000        <1> 	je near threadswitch
   391                              <1> %endif
   392                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   393 00000298 803D[675E0000]00    <1> 	cmp byte [threadson], 0
   394 0000029F 0F84A6000000        <1> 	je near handled
   395                              <1> %ifdef io.serial
   396                              <1> 	jmp handled
   397                              <1> %else
   398 000002A5 FE05[42020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   399 000002AB 0F8599000000        <1> 	jnz handled3
   400                              <1> 	
   401 000002B1 60                  <1> 	pusha
   402 000002B2 E464                <1> 	in al, 64h
   403 000002B4 A820                <1> 	test al, 20h
   404 000002B6 0F858D000000        <1> 	jnz near handled2
   405 000002BC E460                <1> 	in al, 60h
   406 000002BE 3C01                <1> 	cmp al, 1		;escape
   407 000002C0 7405                <1> 	je userint
   408 000002C2 E982000000          <1> 	jmp handled2
   409                              <1> ;	cmp al, 0x57
   410                              <1> ;	jne near handled2
   411                              <1> ;pauseint:	;F11 pauses
   412                              <1> ;	in al, 64h
   413                              <1> ;	test al, 20h
   414                              <1> ;	jnz pauseint
   415                              <1> ;	in al, 60h
   416                              <1> ;	cmp al, 0xD7
   417                              <1> ;	jne pauseint
   418                              <1> ;	mov esi, pausemsg
   419                              <1> ;	call print
   420                              <1> ;	cli
   421                              <1> ;pauselp:
   422                              <1> ;	nop
   423                              <1> ;	in al, 64h
   424                              <1> ;	test al, 20h
   425                              <1> ;	jnz pauselp
   426                              <1> ;	in al, 60h
   427                              <1> ;	cmp al, 0x57
   428                              <1> ;	je near handled2
   429                              <1> ;	jmp pauselp
   430                              <1> ;pausemsg db "Paused",10,0
   431                              <1> userint:
   432 000002C7 31C0                <1> 	xor eax, eax
   433 000002C9 3905[C4770300]      <1> 	cmp [sigtable], eax
   434 000002CF 7411                <1> 	je .nosighook
   435 000002D1 8B1D[C4770300]      <1> 	mov ebx, [sigtable]
   436 000002D7 895C2420            <1> 	mov [esp + 32], ebx
   437                              <1> ;	mov [sigtable], eax
   438 000002DB B020                <1> 	mov al, 0x20
   439 000002DD E620                <1> 	out 0x20, al
   440 000002DF 61                  <1> 	popa
   441 000002E0 FB                  <1> 	sti
   442 000002E1 CF                  <1> 	iret
   443                              <1> .nosighook:
   444                              <1> 		;UNMASK ALL INTS
   445 000002E2 E621                <1> 	out 0x21, al
   446 000002E4 E6A1                <1> 	out 0xA1, al
   447 000002E6 B020                <1> 	mov al, 0x20
   448 000002E8 E6A0                <1> 	out 0xA0, al
   449 000002EA E620                <1> 	out 0x20, al
   450                              <1> 		;RESET PIT DIVISOR
   451 000002EC 66A1[3C020000]      <1> 	mov ax, [pitdiv]
   452 000002F2 E640                <1> 	out 0x40, al
   453 000002F4 66C1C008            <1> 	rol ax, 8
   454 000002F8 E640                <1> 	out 0x40, al
   455                              <1> 		;RESET PIC
   456 000002FA B020                <1> 	mov al, 0x20
   457 000002FC E620                <1> 	out 0x20, al
   458 000002FE 61                  <1> 	popa
   459 000002FF FB                  <1> 	sti
   460 00000300 BC[64770300]        <1> 	mov esp, stackend ;reset stack
   461 00000305 E9FE260000          <1> 	jmp returnfromexp
   462                              <1> %endif
   463 0000030A 0A                  <1> rtcrate db 10
   464                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   465                              <1> %ifdef io.serial
   466                              <1> %else
   467                              <1> %ifdef terminal.vsync
   468                              <1> 	cli
   469                              <1> 	cmp byte [termcopyneeded], 0
   470                              <1> 	je .nocopy
   471                              <1> 	call newtermcopy
   472                              <1> .nocopy
   473                              <1> 	push eax
   474                              <1> 	mov al, 0xC
   475                              <1> 	out 0x70, al
   476                              <1> 	in al, 0x71
   477                              <1> 	pop eax
   478                              <1> 	sti
   479                              <1> %endif
   480                              <1> %endif
   481 0000030B E942000000          <1> 	jmp handled4
   482                              <1> %ifdef rtl8139.included
   483                              <1> rtl8139.irq:
   484                              <1> 	cli
   485                              <1> 	push edx
   486                              <1> 	push eax
   487                              <1> 	mov edx, [rtl8139.basenicaddr]
   488                              <1> 	add edx, rtl8139.ISR
   489                              <1> 	xor eax, eax
   490                              <1> 	in ax, dx
   491                              <1> 	out dx, ax
   492                              <1> 	pop eax
   493                              <1> 	pop edx
   494                              <1> 	sti
   495                              <1> 	jmp handled4
   496                              <1> %endif
   497                              <1> %ifdef sound.included
   498                              <1> sblaster.irq:
   499 00000310 FA                  <1> 	cli
   500 00000311 60                  <1> 	pusha
   501 00000312 803D[DA520000]01    <1> 	cmp byte [SoundBlaster], 1
   502 00000319 0F84B54D0000        <1> 	je near sblaster.cont
   503 0000031F E925000000          <1> 	jmp handled2
   504                              <1> %endif
   505                              <1> 	
   506                              <1> timekeeper:
   507 00000324 50                  <1> 	push eax
   508 00000325 A1[47020000]        <1> 	mov eax, [timenanoseconds]
   509 0000032A 0305[3E020000]      <1> 	add eax, [timeinterval]
   510 00000330 3D00CA9A3B          <1> 	cmp eax, 1000000000
   511 00000335 720B                <1> 	jb nonanosecondrollover
   512 00000337 FF05[43020000]      <1> 	inc dword [timeseconds]
   513 0000033D 2D00CA9A3B          <1> 	sub eax, 1000000000
   514                              <1> 	%ifdef gui.time
   515                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   516                              <1> 		cmp byte [guion], 1
   517                              <1> 		jne nonanosecondrollover
   518                              <1> 		cmp dword [dragging], 0
   519                              <1> 		jne nonanosecondrollover
   520                              <1> 		pusha
   521                              <1> 		call guitime
   522                              <1> 		popa
   523                              <1> 	%endif
   524                              <1> nonanosecondrollover:
   525 00000342 A3[47020000]        <1> 	mov [timenanoseconds], eax
   526 00000347 58                  <1> 	pop eax
   527 00000348 C3                  <1> 	ret
   528                              <1> 	
   529                              <1> handled2:
   530 00000349 61                  <1> 	popa
   531                              <1> handled3:
   532 0000034A FB                  <1> 	sti
   533                              <1> handled:
   534 0000034B 50                  <1> 	push eax
   535 0000034C B020                <1> 	mov al, 0x20
   536 0000034E E620                <1> 	out 0x20, al
   537 00000350 58                  <1> 	pop eax
   538 00000351 CF                  <1> 	iret
   539                              <1> handled4:
   540 00000352 50                  <1> 	push eax
   541 00000353 B020                <1> 	mov al, 0x20
   542 00000355 E6A0                <1> 	out 0xA0, al
   543 00000357 E620                <1> 	out 0x20, al
   544 00000359 58                  <1> 	pop eax
   545 0000035A CF                  <1> 	iret
   546                              <1> [BITS 16]
   547                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   548                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   549                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   550 0000035B 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   551 0000035D 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   552                              <1> 
   553 00000361 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   554 00000363 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   555                              <1> 
   556                              <1> 
   557 00000367 0000                <1> gdt:	dw 0			; limit 15:0
   558 00000369 0000                <1> 	dw 0			; base 15:0
   559 0000036B 00                  <1> 	db 0			; base 23:16
   560 0000036C 00                  <1> 	db 0			; type
   561 0000036D 00                  <1> 	db 0			; limit 19:16, flags
   562 0000036E 00                  <1> 	db 0			; base 31:24
   563                              <1> ; linear data segment descriptor
   564                              <1> LINEAR_SEL	equ	$-gdt
   565 0000036F FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   566 00000371 0000                <1> 	dw 0			; base for this one is always 0
   567 00000373 00                  <1> 	db 0
   568 00000374 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   569 00000375 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   570 00000376 00                  <1> 	db 0
   571                              <1> STACK_SEL	equ $-gdt
   572 00000377 0200                <1> gdts:	dw 2;(stackend)/4096
   573 00000379 0000                <1> 	dw 0
   574 0000037B 00                  <1> 	db 0
   575 0000037C 92                  <1> 	db 0x92
   576 0000037D CF                  <1> 	db 0xCF
   577 0000037E 00                  <1> 	db 0
   578                              <1> ; code segment descriptor
   579                              <1> SYS_CODE_SEL	equ	$-gdt
   580 0000037F FFFF                <1> gdt2:	dw 0xFFFF
   581 00000381 0000                <1> 	dw 0			; (base gets set above)
   582 00000383 00                  <1> 	db 0
   583 00000384 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   584 00000385 CF                  <1> 	db 0xCF
   585 00000386 00                  <1> 	db 0
   586                              <1> ; data segment descriptor
   587                              <1> SYS_DATA_SEL	equ	$-gdt
   588 00000387 FFFF                <1> gdt3:	dw 0xFFFF
   589 00000389 0000                <1> 	dw 0			; (base gets set above)
   590 0000038B 00                  <1> 	db 0
   591 0000038C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   592 0000038D CF                  <1> 	db 0xCF
   593 0000038E 00                  <1> 	db 0
   594                              <1> NEW_CODE_SEL	equ	$-gdt
   595 0000038F FFFF                <1> gdt4:	dw 0xFFFF
   596 00000391 0000                <1> 	dw 0			; (base gets set above)
   597 00000393 00                  <1> 	db 0
   598 00000394 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   599 00000395 CF                  <1> 	db 0xCF
   600 00000396 00                  <1> 	db 0
   601                              <1> ; data segment descriptor
   602                              <1> NEW_DATA_SEL	equ	$-gdt
   603 00000397 FFFF                <1> gdt5:	dw 0xFFFF
   604 00000399 0000                <1> 	dw 0			; (base gets set above)
   605 0000039B 00                  <1> 	db 0
   606 0000039C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   607 0000039D CF                  <1> 	db 0xCF
   608 0000039E 00                  <1> 	db 0
   609                              <1> V8086_CODE_SEL	equ $-gdt
   610 0000039F FFFF                <1> gdtv8086: dw 0xFFFF
   611 000003A1 0000                <1> 	dw 0
   612 000003A3 00                  <1> 	db 0
   613 000003A4 9A                  <1> 	db 0x9A
   614 000003A5 8F                  <1> 	db 0x8F
   615 000003A6 00                  <1> 	db 0
   616                              <1> V8086_DATA_SEL	equ $-gdt
   617 000003A7 FFFF                <1> gdtv80862: dw 0xFFFF
   618 000003A9 0000                <1> 	dw 0
   619 000003AB 00                  <1> 	db 0
   620 000003AC 92                  <1> 	db 0x92
   621 000003AD 8F                  <1> 	db 0x8F
   622 000003AE 00                  <1> 	db 0
   623                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   624 000003AF 0001                <1> gdtdos:	dw 256	;give it 1 MB
   625 000003B1 0000                <1> 	dw 0
   626 000003B3 00                  <1> 	db 0
   627 000003B4 9A                  <1> 	db 0x9A
   628 000003B5 8F                  <1> 	db 0x8F ;16 bit
   629 000003B6 00                  <1> 	db 0
   630                              <1> DOS_DATA_SEL 	equ $-gdt
   631 000003B7 0001                <1> gdtdos2:	dw 256
   632 000003B9 0000                <1> 	dw 0
   633 000003BB 00                  <1> 	db 0
   634 000003BC 92                  <1> 	db 0x92
   635 000003BD 8F                  <1> 	db 0x8F ;16 bit
   636 000003BE 00                  <1> 	db 0
   637                              <1> gdt_end:
   638                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   639                              <1> ;	interrupt descriptor table (IDT)
   640                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   641                              <1> ; 32 reserved interrupts:
   642                              <1> idt:	
   643                              <1> %assign i 0
   644                              <1> %rep    8
   645                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <1> %assign i i+1
   647                              <1> %endrep
   648 000003BF [D70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003C7 [E30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003CF [EF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   653                              <2> %assign i i+1
   654 000003D7 [FB0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   655                              <2> %assign i i+1
   656 000003DF [070D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   657                              <2> %assign i i+1
   658 000003E7 [130D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 000003EF [1F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 000003F7 [2B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 000003FF [370D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   665                              <1> %assign i 9
   666                              <1> %rep    23
   667                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <1> %assign i i+1
   669                              <1> %endrep
   670 00000407 [430D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000040F [4F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000417 [5B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000041F [670D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000427 [730D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000042F [7F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000437 [8B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000043F [970D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000447 [A30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000044F [AF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000457 [BB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000045F [C70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000467 [D30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000046F [DF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 00000477 [EB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 0000047F [F70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 00000487 [030E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 0000048F [0F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i i+1
   706 00000497 [1B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i i+1
   708 0000049F [270E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i i+1
   710 000004A7 [330E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i i+1
   712 000004AF [3F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i i+1
   714 000004B7 [4B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i i+1
   716 000004BF [5927]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   717 000004C7 [5D27]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   718                              <1> %assign i 0x22
   719                              <1> %rep 14
   720                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <1> %assign i +1
   722                              <1> %endrep
   723 000004CF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 000004D7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 000004DF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 000004E7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 000004EF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 000004F7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 000004FF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000507 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739 0000050F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i +1
   741 00000517 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i +1
   743 0000051F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i +1
   745 00000527 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 0000052F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 00000537 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751                              <1> ;INT 30h for os use and 3rd party use:
   752 0000053F [A11A]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   753                              <1> %assign i 0x31
   754                              <1> %rep 15
   755                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <1> %assign i +1
   757                              <1> %endrep
   758 00000547 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000054F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000557 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000055F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000567 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000056F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 00000577 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 0000057F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 00000587 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 0000058F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 00000597 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 0000059F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 000005A7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 000005AF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 000005B7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788                              <1> ;and here we are at 0x40
   789                              <1> ;here are all the irq's
   790 000005BF [6F02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   791 000005C7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   792 000005CF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   793 000005D7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   794 000005DF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   795                              <1> 	%ifdef sound.included
   796 000005E7 [1003]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   797                              <1> 	%else
   798                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   799                              <1> 	%endif
   800 000005EF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   801 000005F7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   802 000005FF [0B03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   803 00000607 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   804 0000060F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   805                              <1> 	%ifdef rtl8139.included
   806                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   807                              <1> 	%else
   808 00000617 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   809                              <1> 	%endif
   810 0000061F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   811 00000627 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   812 0000062F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   813 00000637 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   814                              <1> ;This brings me up to 0x50
   815                              <1> %assign i 0x50
   816                              <1> %rep 176
   817                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   819                              <1> %assign i +1
   820                              <1> %endrep
   821 0000063F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000647 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000064F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000657 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000065F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000667 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000066F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000677 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000067F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000687 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000068F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000697 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 0000069F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000006F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000006FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000707 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000070F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000717 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000071F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000727 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000072F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000737 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000073F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000747 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000074F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000757 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000075F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000767 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000076F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000777 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000077F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000787 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000078F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000797 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000079F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000007F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000007FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000807 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000080F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000817 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000081F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000827 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000082F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000837 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000083F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000847 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000084F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000857 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000085F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000867 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000086F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000877 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000087F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000887 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000088F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000897 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000089F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000008F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000008FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000907 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000090F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000917 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000091F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000927 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000092F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000937 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000093F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000947 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000094F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000957 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000095F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000967 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000096F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000977 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000097F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000987 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000098F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000997 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 0000099F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 000009F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 000009FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A07 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A0F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A17 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A1F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A27 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A2F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A37 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A3F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A47 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A4F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A57 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A5F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A67 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A6F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A77 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A7F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A87 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A8F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A97 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A9F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AA7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AAF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AB7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ABF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AC7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000ACF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AD7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000ADF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AE7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000AEF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000AF7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000AFF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B07 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B0F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B17 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B1F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B27 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B2F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B37 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B3F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B47 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B4F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B57 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B5F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B67 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B6F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B77 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B7F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B87 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B8F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B97 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B9F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000BA7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000BAF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000BB7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349                              <1> idt_end:
  1350                              <1> [BITS 32]
  1351                                  	%include "source/realmode.asm"
  1352                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1353                              <1> 
  1354 00000BBF FA                  <1> 	cli
  1355 00000BC0 A3[CD0C0000]        <1> 	mov [realmodeeax], eax
  1356 00000BC5 891D[C90C0000]      <1> 	mov [realmodeebx], ebx
  1357 00000BCB 8925[BB0C0000]      <1> 	mov [pmodeesp], esp
  1358                              <1> 
  1359 00000BD1 BB[C50C0000]        <1> 	mov ebx, cr0old
  1360                              <1> rmcopytofirstmbyte:
  1361 00000BD6 8B03                <1> 	mov eax, [ebx]
  1362 00000BD8 658903              <1> 	mov [gs:ebx], eax
  1363 00000BDB 81C304000000        <1> 	add ebx, 4
  1364 00000BE1 81FB[D10C0000]      <1> 	cmp ebx, realmodeptr
  1365 00000BE7 76ED                <1> 	jbe rmcopytofirstmbyte
  1366                              <1> 
  1367 00000BE9 EA[F00B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1368                              <1> 
  1369                              <1> [BITS 16]
  1370                              <1> protected16bit:
  1371 00000BF0 B84000              <1> 	mov ax, V8086_DATA_SEL
  1372 00000BF3 8ED8                <1> 	mov ds, ax
  1373 00000BF5 8EC0                <1> 	mov es, ax
  1374 00000BF7 8EE0                <1> 	mov fs, ax
  1375 00000BF9 8EE8                <1> 	mov gs, ax
  1376 00000BFB 8ED0                <1> 	mov ss, ax
  1377 00000BFD 66BC[64770300]      <1> 	mov esp, stackend
  1378 00000C03 0F20C0              <1> 	mov eax, cr0
  1379 00000C06 66A3[C50C]          <1> 	mov [cr0old], eax
  1380 00000C0A 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1381 00000C10 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1382 00000C13 EA[180C]0010        <1> 	jmp 0x1000:inrealmode
  1383                              <1> 
  1384                              <1> inrealmode:
  1385 00000C18 8CC8                <1> 	mov ax, cs
  1386 00000C1A 8ED8                <1> 	mov ds, ax
  1387 00000C1C 8EC0                <1> 	mov es, ax
  1388 00000C1E 8EE0                <1> 	mov fs, ax
  1389 00000C20 8EE8                <1> 	mov gs, ax
  1390 00000C22 8ED0                <1> 	mov ss, ax
  1391 00000C24 BC[6477]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1392                              <1> 	
  1393 00000C27 B011                <1> 	mov al, 0x11
  1394 00000C29 E620                <1> 	out 0x20, al
  1395 00000C2B E6A0                <1> 	out 0xA0, al
  1396 00000C2D B008                <1> 	mov al, 0x8		;interrupt for master
  1397 00000C2F E621                <1> 	out 0x21, al
  1398 00000C31 B070                <1> 	mov al, 0x70	;interrupt for slave
  1399 00000C33 E6A1                <1> 	out 0xA1, al
  1400 00000C35 B004                <1> 	mov al, 4
  1401 00000C37 E621                <1> 	out 0x21, al
  1402 00000C39 B002                <1> 	mov al, 2
  1403 00000C3B E6A1                <1> 	out 0xA1, al
  1404 00000C3D B001                <1> 	mov al, 0x1
  1405 00000C3F E621                <1> 	out 0x21, al
  1406 00000C41 B001                <1> 	mov al, 0x1
  1407 00000C43 E6A1                <1> 	out 0xA1, al
  1408                              <1> 	
  1409 00000C45 0F011E[BF0C]        <1> 	lidt [idt_real]
  1410 00000C4A FB                  <1> 	sti
  1411                              <1> 
  1412 00000C4B 66A1[CD0C]          <1> 	mov eax, [realmodeeax]
  1413 00000C4F 668B1E[C90C]        <1> 	mov ebx, [realmodeebx]
  1414                              <1> 
  1415 00000C54 FF16[D10C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1416                              <1> 
  1417 00000C58 66A3[CD0C]          <1> 	mov [realmodeeax], eax
  1418 00000C5C 66891E[C90C]        <1> 	mov [realmodeebx], ebx
  1419                              <1> 
  1420 00000C61 FA                  <1> 	cli
  1421 00000C62 0F0116[5B03]        <1> 	lgdt [gdtr]
  1422 00000C67 0F011E[6103]        <1> 	lidt [idtr]
  1423 00000C6C 0F20C0              <1> 	mov eax, cr0
  1424 00000C6F 0C01                <1> 	or al, 1
  1425 00000C71 0F22C0              <1> 	mov cr0,eax
  1426 00000C74 EA[790C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1427                              <1> 
  1428                              <1> [BITS 32]
  1429                              <1> returntopmode:
  1430 00000C79 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1431 00000C7D 8ED8                <1> 	mov ds, ax
  1432 00000C7F 8EC0                <1> 	mov es, ax
  1433 00000C81 8EE0                <1> 	mov fs, ax
  1434 00000C83 8ED0                <1> 	mov ss, ax
  1435 00000C85 8B25[BB0C0000]      <1> 	mov esp, [pmodeesp]
  1436 00000C8B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1437 00000C8F 8EE8                <1> 	mov gs, ax
  1438                              <1> 
  1439 00000C91 BB[C50C0000]        <1> 	mov ebx, cr0old
  1440                              <1> rmcopyfromfirstmbyte:
  1441 00000C96 658B03              <1> 	mov eax, [gs:ebx]
  1442 00000C99 8903                <1> 	mov [ebx], eax
  1443 00000C9B 81C304000000        <1> 	add ebx, 4
  1444 00000CA1 81FB[D10C0000]      <1> 	cmp ebx, realmodeptr
  1445 00000CA7 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1446                              <1> 
  1447 00000CA9 E8E64B0000          <1> 	call initialize.pic ;reset irq's and masks
  1448 00000CAE FB                  <1> 	sti
  1449 00000CAF A1[CD0C0000]        <1> 	mov eax, [realmodeeax]
  1450 00000CB4 8B1D[C90C0000]      <1> 	mov ebx, [realmodeebx]
  1451 00000CBA C3                  <1> 	ret
  1452                              <1> 	
  1453 00000CBB 00000000            <1> pmodeesp dd 0
  1454                              <1> idt_real:
  1455 00000CBF FF03                <1> 	dw 0x3FF
  1456 00000CC1 00000000            <1> 	dd 0
  1457 00000CC5 00000000            <1> cr0old dd 0
  1458 00000CC9 00000000            <1> realmodeebx dd 0
  1459 00000CCD 00000000            <1> realmodeeax dd 0
  1460 00000CD1 0000                <1> realmodeptr dw 0
  1461 00000CD3 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1462                                  [BITS 32]
  1463                                      %include "source/exception.asm"
  1464                              <1> %ifdef exceptions.included
  1465                              <1> unhand:	
  1466                              <1> 	%assign i 0
  1467                              <1> 	%rep 32
  1468                              <1> 	mov byte [intprob], i
  1469                              <1> 	jmp unhand2
  1470                              <1> 	%assign i i+1
  1471                              <1> 	%endrep
  1472 00000CD7 C605[5B100000]00    <2>  mov byte [intprob], i
  1473 00000CDE E974010000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000CE3 C605[5B100000]01    <2>  mov byte [intprob], i
  1476 00000CEA E968010000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000CEF C605[5B100000]02    <2>  mov byte [intprob], i
  1479 00000CF6 E95C010000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000CFB C605[5B100000]03    <2>  mov byte [intprob], i
  1482 00000D02 E950010000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 00000D07 C605[5B100000]04    <2>  mov byte [intprob], i
  1485 00000D0E E944010000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000D13 C605[5B100000]05    <2>  mov byte [intprob], i
  1488 00000D1A E938010000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000D1F C605[5B100000]06    <2>  mov byte [intprob], i
  1491 00000D26 E92C010000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000D2B C605[5B100000]07    <2>  mov byte [intprob], i
  1494 00000D32 E920010000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000D37 C605[5B100000]08    <2>  mov byte [intprob], i
  1497 00000D3E E914010000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000D43 C605[5B100000]09    <2>  mov byte [intprob], i
  1500 00000D4A E908010000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000D4F C605[5B100000]0A    <2>  mov byte [intprob], i
  1503 00000D56 E9FC000000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000D5B C605[5B100000]0B    <2>  mov byte [intprob], i
  1506 00000D62 E9F0000000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 00000D67 C605[5B100000]0C    <2>  mov byte [intprob], i
  1509 00000D6E E9E4000000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000D73 C605[5B100000]0D    <2>  mov byte [intprob], i
  1512 00000D7A E9D8000000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000D7F C605[5B100000]0E    <2>  mov byte [intprob], i
  1515 00000D86 E9CC000000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000D8B C605[5B100000]0F    <2>  mov byte [intprob], i
  1518 00000D92 E9C0000000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 00000D97 C605[5B100000]10    <2>  mov byte [intprob], i
  1521 00000D9E E9B4000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000DA3 C605[5B100000]11    <2>  mov byte [intprob], i
  1524 00000DAA E9A8000000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000DAF C605[5B100000]12    <2>  mov byte [intprob], i
  1527 00000DB6 E99C000000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000DBB C605[5B100000]13    <2>  mov byte [intprob], i
  1530 00000DC2 E990000000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00000DC7 C605[5B100000]14    <2>  mov byte [intprob], i
  1533 00000DCE E984000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000DD3 C605[5B100000]15    <2>  mov byte [intprob], i
  1536 00000DDA E978000000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000DDF C605[5B100000]16    <2>  mov byte [intprob], i
  1539 00000DE6 E96C000000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000DEB C605[5B100000]17    <2>  mov byte [intprob], i
  1542 00000DF2 E960000000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00000DF7 C605[5B100000]18    <2>  mov byte [intprob], i
  1545 00000DFE E954000000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000E03 C605[5B100000]19    <2>  mov byte [intprob], i
  1548 00000E0A E948000000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000E0F C605[5B100000]1A    <2>  mov byte [intprob], i
  1551 00000E16 E93C000000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000E1B C605[5B100000]1B    <2>  mov byte [intprob], i
  1554 00000E22 E930000000          <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556 00000E27 C605[5B100000]1C    <2>  mov byte [intprob], i
  1557 00000E2E E924000000          <2>  jmp unhand2
  1558                              <2>  %assign i i+1
  1559 00000E33 C605[5B100000]1D    <2>  mov byte [intprob], i
  1560 00000E3A E918000000          <2>  jmp unhand2
  1561                              <2>  %assign i i+1
  1562 00000E3F C605[5B100000]1E    <2>  mov byte [intprob], i
  1563 00000E46 E90C000000          <2>  jmp unhand2
  1564                              <2>  %assign i i+1
  1565 00000E4B C605[5B100000]1F    <2>  mov byte [intprob], i
  1566 00000E52 E900000000          <2>  jmp unhand2
  1567                              <2>  %assign i i+1
  1568                              <1> unhand2:
  1569 00000E57 FA                  <1> 	cli
  1570 00000E58 1E                  <1> 	push ds
  1571 00000E59 06                  <1> 	push es
  1572 00000E5A 0FA0                <1> 	push fs
  1573 00000E5C 0FA8                <1> 	push gs
  1574 00000E5E 16                  <1> 	push ss
  1575 00000E5F 60                  <1> 	pushad
  1576                              <1> %ifdef gui.included
  1577                              <1> 	cmp byte [guion], 0
  1578                              <1> 	je near noguiunhandstuff
  1579                              <1> 	mov word [locunhandy], 8
  1580                              <1> 	mov word [locunhandx], 8
  1581                              <1> 	mov bx, [background]
  1582                              <1> 	mov [backgroundcache], bx
  1583                              <1> 	mov byte [mousedisabled],1
  1584                              <1> 	mov bx, 1111100000000000b
  1585                              <1> 	mov [background], bx
  1586                              <1> noguiunhandstuff:
  1587                              <1> %endif
  1588 00000E60 89E6                <1> 	mov esi, esp
  1589 00000E62 8935[49100000]      <1> 	mov [espfirst], esi
  1590 00000E68 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1591 00000E6E 8935[45100000]      <1> 	mov [esploc], esi
  1592 00000E74 BE[6A100000]        <1> 	mov esi, unhandmsg
  1593 00000E79 8935[4D100000]      <1> 	mov [esiloc], esi
  1594 00000E7F 31C9                <1> 	xor ecx, ecx
  1595 00000E81 8A0D[5B100000]      <1> 	mov cl, [intprob]
  1596 00000E87 BB[39140000]        <1> 	mov ebx, errortypes
  1597 00000E8C C1E102              <1> 	shl ecx, 2
  1598 00000E8F 01CB                <1> 	add ebx, ecx
  1599 00000E91 81FB[79140000]      <1> 	cmp ebx, errortypesend
  1600 00000E97 7205                <1> 	jb gooderrortype
  1601 00000E99 BB[79140000]        <1> 	mov ebx, errortypesend
  1602                              <1> gooderrortype:
  1603 00000E9E 8B33                <1> 	mov esi, [ebx]
  1604                              <1> %ifdef gui.included
  1605                              <1> 	cmp byte [guion], 0
  1606                              <1> 	je near errortext
  1607                              <1> 	mov cx, [locunhandy]
  1608                              <1> 	mov dx, [locunhandx]
  1609                              <1> 	mov ax, 1
  1610                              <1> 	xor bx, bx
  1611                              <1> 	call showstring2
  1612                              <1> 	mov [locunhandy], cx
  1613                              <1> 	mov [locunhandx], dx
  1614                              <1> 	jmp errortextdone
  1615                              <1> %endif
  1616                              <1> errortext:
  1617 00000EA0 E8520D0000          <1> 	call print		;;get the error message and print it
  1618                              <1> errortextdone:
  1619 00000EA5 31C9                <1> 	xor ecx, ecx
  1620 00000EA7 8A0D[5B100000]      <1> 	mov cl, [intprob]
  1621 00000EAD E862010000          <1> 	call expdump
  1622                              <1> dumpstack:
  1623 00000EB2 8B35[45100000]      <1> 	mov esi, [esploc]
  1624 00000EB8 39E6                <1> 	cmp esi, esp
  1625 00000EBA 7219                <1> 	jb donedump
  1626 00000EBC 368B0E              <1> 	mov ecx, [ss:esi]
  1627 00000EBF 81EE04000000        <1> 	sub esi, 4
  1628 00000EC5 8935[45100000]      <1> 	mov [esploc], esi
  1629 00000ECB E844010000          <1> 	call expdump
  1630 00000ED0 E9DDFFFFFF          <1> 	jmp dumpstack
  1631                              <1> donedump:
  1632 00000ED5 0F20C1              <1> 	mov ecx, cr0
  1633 00000ED8 E837010000          <1> 	call expdump
  1634 00000EDD 0F20D1              <1> 	mov ecx, cr2
  1635 00000EE0 E82F010000          <1> 	call expdump
  1636 00000EE5 0F20D9              <1> 	mov ecx, cr3
  1637 00000EE8 E827010000          <1> 	call expdump
  1638 00000EED 0F20E1              <1> 	mov ecx, cr4
  1639 00000EF0 E81F010000          <1> 	call expdump
  1640 00000EF5 0F00C9              <1> 	str ecx
  1641 00000EF8 E817010000          <1> 	call expdump
  1642 00000EFD 0F010D[64100000]    <1> 	sidt [igdtcache]
  1643 00000F04 8B0D[66100000]      <1> 	mov ecx, [igdtcache + 2]
  1644 00000F0A E805010000          <1> 	call expdump
  1645 00000F0F 0F0105[64100000]    <1> 	sgdt [igdtcache]
  1646 00000F16 8B0D[66100000]      <1> 	mov ecx, [igdtcache + 2]
  1647 00000F1C E8F3000000          <1> 	call expdump
  1648 00000F21 0F00C1              <1> 	sldt ecx
  1649 00000F24 E8EB000000          <1> 	call expdump
  1650 00000F29 8B35[45100000]      <1> 	mov esi, [esploc]
  1651 00000F2F 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1652 00000F34 81C710000000        <1> 	add edi, 16
  1653 00000F3A 893D[60100000]      <1> 	mov [codelocend], edi
  1654 00000F40 81EF20000000        <1> 	sub edi, 32
  1655                              <1> dumpcodeloop:
  1656 00000F46 893D[5C100000]      <1> 	mov [codeloc], edi
  1657 00000F4C 8B0F                <1> 	mov ecx, [edi]
  1658 00000F4E E8C1000000          <1> 	call expdump
  1659 00000F53 8B3D[5C100000]      <1> 	mov edi, [codeloc]
  1660 00000F59 81C704000000        <1> 	add edi, 4
  1661 00000F5F 3B3D[60100000]      <1> 	cmp edi, [codelocend]
  1662 00000F65 72DF                <1> 	jb dumpcodeloop
  1663 00000F67 BE[A50F0000]        <1> 	mov esi, backtoosmsg
  1664                              <1> %ifdef gui.included
  1665                              <1> 	cmp byte [guion], 0
  1666                              <1> 	je backtomsg
  1667                              <1> guibacktomsg:
  1668                              <1> 	mov dx, [locunhandx]
  1669                              <1> 	mov cx, [locunhandy]
  1670                              <1> 	mov ax, 1
  1671                              <1> 	xor bx, bx
  1672                              <1> 	call showstring2
  1673                              <1> 	jmp backtomsgdone
  1674                              <1> backtomsg:
  1675                              <1> %endif
  1676 00000F6C E8860C0000          <1> 	call print
  1677                              <1> backtomsgdone:
  1678 00000F71 30C0                <1> 	xor al, al
  1679 00000F73 E89A120000          <1> 	call rdcharint
  1680 00000F78 803D[5B100000]03    <1> 	cmp byte [intprob], 3
  1681 00000F7F 7511                <1> 	jne nodebugint
  1682                              <1> %ifdef gui.included
  1683                              <1> 	cmp byte [guion], 0
  1684                              <1> 	je nodebuggui
  1685                              <1> 	mov bx, [backgroundcache]
  1686                              <1> 	mov [background], bx
  1687                              <1> 	xor bx, bx
  1688                              <1> 	mov byte [mousedisabled], 0
  1689                              <1> 	call guiclear
  1690                              <1> 	call reloadallgraphics
  1691                              <1> 	call termcopy
  1692                              <1> nodebuggui:
  1693                              <1> %endif
  1694 00000F81 8B35[49100000]      <1> 	mov esi, [espfirst]
  1695 00000F87 89F4                <1> 	mov esp, esi
  1696 00000F89 61                  <1> 	popad
  1697 00000F8A 17                  <1> 	pop ss
  1698 00000F8B 0FA9                <1> 	pop gs
  1699 00000F8D 0FA1                <1> 	pop fs
  1700 00000F8F 07                  <1> 	pop es
  1701 00000F90 1F                  <1> 	pop ds
  1702 00000F91 CF                  <1> 	iret
  1703                              <1> nodebugint:
  1704 00000F92 61                  <1> 	popad
  1705 00000F93 17                  <1> 	pop ss
  1706 00000F94 0FA9                <1> 	pop gs
  1707 00000F96 0FA1                <1> 	pop fs
  1708 00000F98 07                  <1> 	pop es
  1709 00000F99 1F                  <1> 	pop ds
  1710 00000F9A 81C408000000        <1> 	add esp, 8
  1711                              <1> ;	popf ;pop the cs segment selector into eflags
  1712                              <1> ;	popf ;then pop the flags
  1713                              <1> %ifdef gui.included
  1714                              <1> 	cmp byte [guion], 0
  1715                              <1> 	je returnunhandgui
  1716                              <1> 	mov bx, [backgroundcache]
  1717                              <1> 	mov [background], bx
  1718                              <1> 	xor bx, bx
  1719                              <1> 	mov byte [mousedisabled], 0
  1720                              <1> 	call guiclear
  1721                              <1> 	call reloadallgraphics
  1722                              <1> 	call termcopy
  1723                              <1> %endif
  1724                              <1> returnunhandgui:
  1725 00000FA0 E9D51A0000          <1> 	jmp nwcmd
  1726 00000FA5 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1727 00000FAE 737420616E79207072- <1>
  1728 00000FB7 6F626C656D7320696E- <1>
  1729 00000FC0 207468652049737375- <1>
  1730 00000FC9 65732073656374696F- <1>
  1731 00000FD2 6E20617420736F6C6C- <1>
  1732 00000FDB 65726F732E676F6F67- <1>
  1733 00000FE4 6C65636F64652E636F- <1>
  1734 00000FED 6D0A                <1>
  1735 00000FEF 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1736 00000FF8 206B657920746F2072- <1>
  1737 00001001 657475726E20746F20- <1>
  1738 0000100A 536F6C6C65724F530A- <1>
  1739 00001013 00                  <1>
  1740                              <1> expdump:
  1741 00001014 8B35[4D100000]      <1> 	mov esi, [esiloc]
  1742 0000101A 89F7                <1> 	mov edi, esi
  1743 0000101C 81C70F000000        <1> 	add edi, 15
  1744 00001022 81C604000000        <1> 	add esi, 4
  1745 00001028 893D[4D100000]      <1> 	mov [esiloc], edi
  1746 0000102E 81EF03000000        <1> 	sub edi, 3
  1747 00001034 E8DE1E0000          <1> 	call converthex
  1748 00001039 81EE04000000        <1> 	sub esi, 4
  1749                              <1> %ifdef gui.included
  1750                              <1> 	cmp byte [guion], 0
  1751                              <1> 	je near expdumptext
  1752                              <1> 	mov cx, [locunhandy]
  1753                              <1> 	mov dx, [locunhandx]
  1754                              <1> 	mov ax, 1
  1755                              <1> 	xor bx, bx
  1756                              <1> 	call showstring2
  1757                              <1> 	mov [locunhandy], cx
  1758                              <1> 	mov [locunhandx], dx
  1759                              <1> 	ret
  1760                              <1> %endif
  1761                              <1> expdumptext:
  1762 0000103F E8B30B0000          <1> 	call print
  1763 00001044 C3                  <1> 	ret
  1764 00001045 00000000            <1> esploc dd 0
  1765 00001049 00000000            <1> espfirst dd 0
  1766 0000104D 00000000            <1> esiloc dd 0
  1767 00001051 00000000            <1> esiregbuf dd 0
  1768 00001055 0100                <1> locunhandy dw 1
  1769 00001057 0100                <1> locunhandx dw 1
  1770 00001059 0000                <1> backgroundcache dw 0
  1771 0000105B 00                  <1> intprob db 0
  1772 0000105C 00000000            <1> codeloc dd 0
  1773 00001060 00000000            <1> codelocend dd 0
  1774 00001064 000000000000        <1> igdtcache dw 0,0,0
  1775                              <1> 	unhandmsg:	
  1776 0000106A 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1777 00001073 303030FF0A00        <1>
  1778                              <1> unhndrg:
  1779 00001079 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 00001082 303030202000<rept>  <1>
  1781 000010E2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 000010EB 303030FF0A00        <1>
  1783 000010F1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1784 000010FA 303030202000<rept>  <1>
  1785 0000115A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1786 00001163 303030FF0A00        <1>
  1787 00001169 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1788 00001172 303030202000<rept>  <1>
  1789 000011D2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1790 000011DB 303030FF0A00        <1>
  1791 000011E1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1792 000011EA 303030202000<rept>  <1>
  1793 0000124A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1794 00001253 303030FF0A00        <1>
  1795                              <1> unhandregs:
  1796 00001259 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1797 00001262 303030202000        <1>
  1798 00001268 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1799 00001271 303030202000        <1>
  1800 00001277 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1801 00001280 303030FF0A00        <1>
  1802 00001286 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1803 0000128F 303030202000        <1>
  1804 00001295 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1805 0000129E 303030202000        <1>
  1806 000012A4 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1807 000012AD 303030202000        <1>
  1808 000012B3 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1809 000012BC 303030202000        <1>
  1810 000012C2 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1811 000012CB 303030FF0A00        <1>
  1812 000012D1 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1813 000012DA 303030202000        <1>
  1814 000012E0 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1815 000012E9 303030202000        <1>
  1816 000012EF 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1817 000012F8 303030202000        <1>
  1818 000012FE 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1819 00001307 303030FF0A00        <1>
  1820 0000130D 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1821 00001316 303030202000        <1>
  1822 0000131C 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1823 00001325 303030202000        <1>
  1824 0000132B 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1825 00001334 303030202000        <1>
  1826 0000133A 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1827 00001343 303030FF0A00        <1>
  1828 00001349 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1829 00001352 303030202000        <1>
  1830 00001358 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1831 00001361 303030202000        <1>
  1832 00001367 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1833 00001370 303030202000        <1>
  1834 00001376 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1835 0000137F 303030FF0A00        <1>
  1836 00001385 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1837 0000138E 303030202000        <1>
  1838 00001394 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1839 0000139D 303030202000        <1>
  1840 000013A3 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1841 000013AC 303030202000        <1>
  1842 000013B2 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1843 000013BB 303030FF0A00        <1>
  1844 000013C1 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1845 000013CA 303030202000<rept>  <1>
  1846 000013DF FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1847 000013E8 30303020FF00        <1>
  1848 000013EE FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1849 000013F7 3030305D2000        <1>
  1850 000013FD FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1851 00001406 303030202000<rept>  <1>
  1852 0000142A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1853 00001433 303030FF0A00        <1>
  1854                              <1> unhandmsgend:
  1855                              <1> 
  1856                              <1> errortypes:
  1857 00001439 [7D140000]          <1> 			dd err0
  1858 0000143D [E6140000]          <1> 			dd err1
  1859 00001441 [47150000]          <1> 			dd err2
  1860 00001445 [9C150000]          <1> 			dd err3
  1861 00001449 [00160000]          <1> 			dd err4
  1862 0000144D [52160000]          <1> 			dd err5
  1863 00001451 [BC160000]          <1> 			dd err6
  1864 00001455 [24170000]          <1> 			dd err7
  1865 00001459 [6E170000]          <1> 			dd err8
  1866 0000145D [CB170000]          <1> 			dd err9
  1867 00001461 [24180000]          <1> 			dd err10
  1868 00001465 [6F180000]          <1> 			dd err11
  1869 00001469 [BF180000]          <1> 			dd err12
  1870 0000146D [18190000]          <1> 			dd err13
  1871 00001471 [7B190000]          <1> 			dd err14
  1872 00001475 [B7190000]          <1> 			dd err15
  1873                              <1> errortypesend:
  1874 00001479 [421A0000]          <1> 			dd unknownerror
  1875                              <1> 			
  1876 0000147D 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1877 00001486 6279207A65726F3A0A  <1>
  1878 0000148F 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1879 00001498 6C79206C696D2061C3- <1>
  1880 000014A1 B778203D20E2889E20- <1>
  1881 000014AA 7768656E2061206973- <1>
  1882 000014B3 20616E79207265616C- <1>
  1883 000014BC 206E756D6265722E20- <1>
  1884 000014C5 486170707920456173- <1>
  1885 000014CE 746572210A          <1>
  1886 000014D3 202020202020202020- <1> 		db "            x→0",10,0
  1887 000014DC 20202078E28692300A- <1>
  1888 000014E5 00                  <1>
  1889                              <1> 		
  1890 000014E6 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1891 000014EF 65702F427265616B70- <1>
  1892 000014F8 6F696E743A0A        <1>
  1893 000014FE 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1894 00001507 696E74206661756C74- <1>
  1895 00001510 2C20627265616B706F- <1>
  1896 00001519 696E7420747261702C- <1>
  1897 00001522 206F722073696E676C- <1>
  1898 0000152B 652D73746570207472- <1>
  1899 00001534 617020776173207472- <1>
  1900 0000153D 696767657265642E0A- <1>
  1901 00001546 00                  <1>
  1902                              <1> 		
  1903 00001547 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1904 00001550 6C6520696E74657272- <1>
  1905 00001559 7570743A0A          <1>
  1906 0000155E 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1907 00001567 6520696E7465727275- <1>
  1908 00001570 707420776173207472- <1>
  1909 00001579 696767657265642074- <1>
  1910 00001582 68617420636F756C64- <1>
  1911 0000158B 206E6F74206265206D- <1>
  1912 00001594 61736B65642E0A00    <1>
  1913                              <1> 		
  1914 0000159C 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1915 000015A5 743A0A              <1>
  1916 000015A8 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1917 000015B1 727275707420697320- <1>
  1918 000015BA 7573656420696E2070- <1>
  1919 000015C3 726F6772616D732074- <1>
  1920 000015CC 6F2073686F77207468- <1>
  1921 000015D5 6520737461636B2061- <1>
  1922 000015DE 6E6420726567697374- <1>
  1923 000015E7 65727320616E642063- <1>
  1924 000015F0 616E2062650A        <1>
  1925 000015F6 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1926 000015FF 00                  <1>
  1927                              <1> 		
  1928 00001600 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1929 00001609 0A                  <1>
  1930 0000160A 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1931 00001613 73736F722072616E20- <1>
  1932 0000161C 696E746F20616E2049- <1>
  1933 00001625 4E544F20696E737472- <1>
  1934 0000162E 756374696F6E207769- <1>
  1935 00001637 746820746865206F76- <1>
  1936 00001640 6572666C6F7720666C- <1>
  1937 00001649 6167207365742E0A00  <1>
  1938                              <1> 		
  1939 00001652 426F756E6473206368- <1> err5	db "Bounds check:",10
  1940 0000165B 65636B3A0A          <1>
  1941 00001660 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1942 00001669 73736F72207265626F- <1>
  1943 00001672 756E6465642066726F- <1>
  1944 0000167B 6D206120424F554E44- <1>
  1945 00001684 20696E737472756374- <1>
  1946 0000168D 696F6E2072756E206F- <1>
  1947 00001696 6E20616E206F706572- <1>
  1948 0000169F 616E64207468617420- <1>
  1949 000016A8 776173206F75740A    <1>
  1950 000016B0 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1951 000016B9 2E0A00              <1>
  1952                              <1> 		
  1953 000016BC 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1954 000016C5 70636F64653A0A      <1>
  1955 000016CC 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1956 000016D5 73736F722068617320- <1>
  1957 000016DE 6E6F20696465612077- <1>
  1958 000016E7 686174206974207761- <1>
  1959 000016F0 7320747279696E6720- <1>
  1960 000016F9 746F20657865637574- <1>
  1961 00001702 652E20446F6E277420- <1>
  1962 0000170B 72756E205353453420- <1>
  1963 00001714 636F64650A          <1>
  1964 00001719 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1965 00001722 0A00                <1>
  1966                              <1> 		
  1967 00001724 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1968 0000172D 6F72206E6F74206176- <1>
  1969 00001736 61696C61626C653A0A  <1>
  1970 0000173F 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1971 00001748 206B6E6F7720746865- <1>
  1972 00001751 7920646F6E2774206D- <1>
  1973 0000175A 616B652074686F7365- <1>
  1974 00001763 20616E796D6F726521- <1>
  1975 0000176C 0A00                <1>
  1976                              <1> 		
  1977 0000176E 446F75626C65206661- <1> err8	db "Double fault:",10
  1978 00001777 756C743A0A          <1>
  1979 0000177C 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1980 00001785 74696F6E2068616E64- <1>
  1981 0000178E 6C657220636F756C64- <1>
  1982 00001797 206E6F742068616E64- <1>
  1983 000017A0 6C6520746861742069- <1>
  1984 000017A9 7420636F756C64206E- <1>
  1985 000017B2 6F742068616E646C65- <1>
  1986 000017BB 20616E206578636570- <1>
  1987 000017C4 74696F6E2E0A00      <1>
  1988                              <1> 		
  1989 000017CB 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1990 000017D4 6F72207365676D656E- <1>
  1991 000017DD 74206F76657272756E- <1>
  1992 000017E6 3A0A00              <1>
  1993 000017E9 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1994 000017F2 722068617070656E73- <1>
  1995 000017FB 20696E206D6F646572- <1>
  1996 00001804 6E20636F6D70757465- <1>
  1997 0000180D 72732C20616E64206E- <1>
  1998 00001816 657665722073686F75- <1>
  1999 0000181F 6C642E0A00          <1>
  2000                              <1> 
  2001 00001824 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2002 0000182D 53533A0A            <1>
  2003 00001831 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2004 0000183A 686174207761732073- <1>
  2005 00001843 776974636865642074- <1>
  2006 0000184C 6F20697320696E7661- <1>
  2007 00001855 6C69642E204E6F7468- <1>
  2008 0000185E 696E672066756E6E79- <1>
  2009 00001867 20686572652E0A00    <1>
  2010                              <1> 		
  2011 0000186F 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2012 00001878 6F742070726573656E- <1>
  2013 00001881 743A0A              <1>
  2014 00001884 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2015 0000188D 6E7420626974206F66- <1>
  2016 00001896 20746865207365676D- <1>
  2017 0000189F 656E74206465736372- <1>
  2018 000018A8 6970746F7220697320- <1>
  2019 000018B1 73657420746F207A65- <1>
  2020 000018BA 726F2E0A00          <1>
  2021                              <1> 		
  2022 000018BF 537461636B20657863- <1> err12	db "Stack exception:",10
  2023 000018C8 657074696F6E3A0A    <1>
  2024 000018D0 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2025 000018D9 7363726970746F7220- <1>
  2026 000018E2 697320696E76616C69- <1>
  2027 000018EB 64206F72206E6F7420- <1>
  2028 000018F4 70726573656E74206F- <1>
  2029 000018FD 7220697473206C696D- <1>
  2030 00001906 697420697320746F6F- <1>
  2031 0000190F 20736D616C6C2E0A00  <1>
  2032                              <1> 		
  2033 00001918 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2034 00001921 726F74656374696F6E- <1>
  2035 0000192A 2076696F6C6174696F- <1>
  2036 00001933 6E3A0A              <1>
  2037 00001936 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2038 0000193F 746564207468652063- <1>
  2039 00001948 6F6D70757465722E20- <1>
  2040 00001951 537465702061776179- <1>
  2041 0000195A 20736C6F776C792E20- <1>
  2042 00001963 546865204642492069- <1>
  2043 0000196C 73206F6E2069747320- <1>
  2044 00001975 7761792E0A00        <1>
  2045                              <1> 		
  2046 0000197B 50616765206661756C- <1> err14	db "Page fault:",10
  2047 00001984 743A0A              <1>
  2048 00001987 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2049 00001990 746861742077617320- <1>
  2050 00001999 726571756573746564- <1>
  2051 000019A2 20776173206E6F7420- <1>
  2052 000019AB 617661696C61626C65- <1>
  2053 000019B4 2E0A00              <1>
  2054                              <1> 		
  2055 000019B7 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2056 000019C0 666F7220506C616E20- <1>
  2057 000019C9 523A0A              <1>
  2058 000019CC 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2059 000019D5 727275707420697320- <1>
  2060 000019DE 726573657276656420- <1>
  2061 000019E7 666F72207573616765- <1>
  2062 000019F0 206F6E6C7920627920- <1>
  2063 000019F9 746865206D696C6974- <1>
  2064 00001A02 617279207768656E20- <1>
  2065 00001A0B 6974206973206E6563- <1>
  2066 00001A14 6573736172790A      <1>
  2067 00001A1B 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2068 00001A24 746520612066756C6C- <1>
  2069 00001A2D 2D7363616C6520636F- <1>
  2070 00001A36 757020642782746174- <1>
  2071 00001A3F 2E0A00              <1>
  2072                              <1> 		
  2073 00001A42 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2074 00001A4B 68656C6C206A757374- <1>
  2075 00001A54 2068617070656E6564- <1>
  2076 00001A5D 3F2049732065766572- <1>
  2077 00001A66 796F6E65206F6B6179- <1>
  2078 00001A6F 3F2048617264206472- <1>
  2079 00001A78 6976653F2056696465- <1>
  2080 00001A81 6F20636172643F0A    <1>
  2081 00001A89 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2082 00001A92 726520796F75207468- <1>
  2083 00001A9B 6572653F0A00        <1>
  2084                              <1> %else
  2085                              <1> unhand:	
  2086                              <1> 	%assign i 0
  2087                              <1> 	%rep 32
  2088                              <1> 	mov byte [intprob], i
  2089                              <1> 	jmp unhand2
  2090                              <1> 	%assign i i+1
  2091                              <1> 	%endrep
  2092                              <1> unhand2:
  2093                              <1> 	cmp byte [intprob], 3
  2094                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2095                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2096                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2097                              <1> 	mov bl, [intprob]
  2098                              <1> 	jmp exitprog
  2099                              <1> intprob db 0
  2100                              <1> %endif
  2101                                      %include "source/ints.asm"
  2102                              <1> newints:	;for great justice
  2103 00001AA1 80FC00              <1> 	cmp ah, 0
  2104 00001AA4 0F849A000000        <1> 	je near exitprog   ;kills app
  2105 00001AAA 80FC01              <1> 	cmp ah, 1
  2106 00001AAD 0F8419010000        <1> 	je near prntstr  ;print string
  2107 00001AB3 80FC02              <1> 	cmp ah, 2
  2108 00001AB6 0F84BA010000        <1> 	je near readstr	;read string
  2109 00001ABC 80FC03              <1> 	cmp ah, 3
  2110 00001ABF 0F84DA010000        <1> 	je near clearscrn	;clear screen
  2111 00001AC5 80FC04              <1> 	cmp ah, 4
  2112 00001AC8 0F844F020000        <1> 	je near prntreadstr	;read and print string
  2113 00001ACE 80FC05              <1> 	cmp ah, 5
  2114 00001AD1 0F842F070000        <1> 	je near readchar	;get char
  2115 00001AD7 80FC06              <1> 	cmp ah, 6
  2116 00001ADA 0F8496070000        <1> 	je near prntchar	;print char
  2117 00001AE0 80FC07              <1> 	cmp ah, 7
  2118 00001AE3 0F84BF090000        <1> 	je near openfile	;read file
  2119                              <1> ;	cmp ah, 8
  2120                              <1> ;	je near closefile	;close file
  2121 00001AE9 80FC09              <1> 	cmp ah, 9
  2122 00001AEC 0F84C0090000        <1> 	je near num2str	;convert number to string
  2123 00001AF2 80FC0A              <1> 	cmp ah, 10
  2124 00001AF5 0F84CF090000        <1> 	je near str2num	;convert string to number
  2125                              <1> %ifdef threads.included
  2126 00001AFB 80FC0B              <1> 	cmp ah, 11
  2127 00001AFE 0F84D2090000        <1> 	je near forkthread	;create thread
  2128                              <1> %endif
  2129 00001B04 80FC0C              <1> 	cmp ah, 12
  2130 00001B07 0F84A00A0000        <1> 	je near gettime	;get time
  2131 00001B0D 80FC0D              <1> 	cmp ah, 13
  2132 00001B10 0F84AC0A0000        <1> 	je near settime	;set time
  2133 00001B16 80FC0E              <1> 	cmp ah, 14
  2134 00001B19 0F84B30A0000        <1> 	je near runcmd	;run program
  2135 00001B1F 80FC0F              <1> 	cmp ah, 15
  2136 00001B22 0F84BF0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2137 00001B28 80FC10              <1> 	cmp ah, 16
  2138 00001B2B 0F84E40A0000        <1> 	je near hooksig	;hook code to a signal
  2139                              <1> %ifdef gui.included
  2140                              <1> 	cmp ah, 17
  2141                              <1> 	je near guiint	;GUI operations
  2142                              <1> %endif
  2143                              <1> %ifdef sound.included
  2144 00001B31 80FC12              <1> 	cmp ah, 18
  2145 00001B34 0F84EB0A0000        <1> 	je near soundint	;sound operations
  2146                              <1> %endif
  2147                              <1> %ifdef network.included
  2148 00001B3A 80FC13              <1> 	cmp ah, 19
  2149 00001B3D 0F84E70A0000        <1> 	je near netint	;networking operations
  2150                              <1> %endif
  2151 00001B43 CF                  <1> 	iret
  2152                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2153                              <2> exitprog:
  2154 00001B44 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2155 00001B48 8ED8                <2> 	mov ds, ax
  2156 00001B4A 8EC0                <2> 	mov es, ax
  2157 00001B4C 8EE0                <2> 	mov fs, ax
  2158 00001B4E 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2159 00001B52 8EE8                <2> 	mov gs, ax
  2160 00001B54 C705[685E0000]0000- <2> 	mov dword [currentthread], 0
  2161 00001B5C 0000                <2>
  2162 00001B5E C705[635E0000]0400- <2> 	mov dword [lastthread], 4
  2163 00001B66 0000                <2>
  2164 00001B68 C605[675E0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2165 00001B6F 8B25[C87B0300]      <2> 	mov esp, [previousstack] ;and this
  2166 00001B75 81FB00000000        <2> 	cmp ebx, 0
  2167 00001B7B 0F8501000000        <2> 	jne near .error
  2168 00001B81 C3                  <2> 	ret
  2169                              <2> .error:
  2170 00001B82 89D9                <2> 	mov ecx, ebx
  2171 00001B84 B006                <2> 	mov al, 6
  2172 00001B86 A2[782F0000]        <2> 	mov [firsthexshown], al
  2173 00001B8B 51                  <2> 	push ecx
  2174 00001B8C BE[A71B0000]        <2> 	mov esi, .msg1
  2175 00001B91 E855000000          <2> 	call printhighlight
  2176 00001B96 59                  <2> 	pop ecx
  2177 00001B97 E8F1130000          <2> 	call showhex
  2178 00001B9C BE[BC1B0000]        <2> 	mov esi, .msg2
  2179 00001BA1 E845000000          <2> 	call printhighlight
  2180 00001BA6 C3                  <2> 	ret
  2181                              <2> 	
  2182 00001BA7 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2183 00001BB0 7461747573206F6620- <2>
  2184 00001BB9 307800              <2>
  2185 00001BBC 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2186 00001BC5 726E65642E0A00      <2>
  2187                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2188                              <2> prntstr:
  2189 00001BCC 30E4                <2> xor ah, ah
  2190 00001BCE E82B000000          <2> call printint
  2191 00001BD3 E9B3E6FFFF          <2> jmp timerinterrupt
  2192                              <2> 
  2193                              <2> 	printquiet:
  2194 00001BD8 6631C0              <2> 		xor ax, ax
  2195 00001BDB 66A3[741C0000]      <2> 		mov [endkeyprint], ax
  2196 00001BE1 66BB0700            <2> 		mov bx, 7
  2197 00001BE5 E82D000000          <2> 		call printint.b
  2198 00001BEA C3                  <2> 		ret
  2199                              <2> 
  2200                              <2> 	printhighlight:
  2201 00001BEB 6631C0              <2> 		xor ax, ax
  2202 00001BEE 66BBF000            <2> 		mov bx, 0xF0
  2203 00001BF2 E907000000          <2> 		jmp printint
  2204                              <2> 
  2205                              <2>     print:
  2206 00001BF7 6631C0              <2> 		xor ax, ax
  2207 00001BFA 66BB0700            <2> 		mov bx, 7
  2208                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2209 00001BFE 56                  <2> 		push esi
  2210 00001BFF 66A3[741C0000]      <2> 		mov [endkeyprint], ax
  2211 00001C05 E80D000000          <2> 		call .b
  2212 00001C0A 89F1                <2> 		mov ecx, esi
  2213 00001C0C 5F                  <2> 		pop edi
  2214 00001C0D 29F9                <2> 		sub ecx, edi
  2215 00001C0F 51                  <2> 		push ecx
  2216 00001C10 E81A0A0000          <2> 		call termcopy
  2217 00001C15 59                  <2> 		pop ecx
  2218 00001C16 C3                  <2> 		ret
  2219                              <2> 	.b:	
  2220 00001C17 53                  <2> 		push ebx
  2221 00001C18 31C0                <2> 		xor eax, eax
  2222 00001C1A 8A06                <2> 		mov al, [esi]
  2223 00001C1C 3CFF                <2> 		cmp al, 0xFF
  2224 00001C1E 7438                <2> 		je .doneutf
  2225 00001C20 3CC0                <2> 		cmp al, 0xC0
  2226 00001C22 7234                <2> 		jb .doneutf
  2227 00001C24 3CE0                <2> 		cmp al, 0xE0
  2228 00001C26 721D                <2> 		jb .two
  2229 00001C28 46                  <2> 		inc esi
  2230 00001C29 668B0E              <2> 		mov cx, [esi]
  2231 00001C2C 46                  <2> 		inc esi
  2232 00001C2D C0E004              <2> 		shl al, 4
  2233 00001C30 66C1E102            <2> 		shl cx, 2
  2234 00001C34 C0ED02              <2> 		shr ch, 2
  2235 00001C37 66C1E902            <2> 		shr cx, 2
  2236 00001C3B 08C5                <2> 		or ch, al
  2237 00001C3D 6689C8              <2> 		mov ax, cx
  2238 00001C40 E913000000          <2> 		jmp .doneutf
  2239                              <2> 	.two:
  2240 00001C45 8A2E                <2> 		mov ch, [esi]
  2241 00001C47 46                  <2> 		inc esi
  2242 00001C48 8A0E                <2> 		mov cl, [esi]
  2243 00001C4A 66C1E102            <2> 		shl cx, 2
  2244 00001C4E C0ED02              <2> 		shr ch, 2
  2245 00001C51 66C1E902            <2> 		shr cx, 2
  2246 00001C55 6689C8              <2> 		mov ax, cx
  2247                              <2> 	.doneutf:
  2248 00001C58 5B                  <2> 		pop ebx
  2249 00001C59 663B05[741C0000]    <2> 		cmp ax, [endkeyprint]
  2250 00001C60 7411                <2> 		je .done
  2251 00001C62 663DFFFE            <2> 		cmp ax, 0xFEFF
  2252 00001C66 7405                <2> 		je .noprint
  2253 00001C68 E836060000          <2> 		call prcharq
  2254                              <2> 	.noprint:
  2255 00001C6D 46                  <2> 		inc esi
  2256 00001C6E E9A4FFFFFF          <2> 		jmp .b
  2257                              <2> 	.done:
  2258 00001C73 C3                  <2> 		ret
  2259                              <2> 
  2260 00001C74 0000                <2> endkeyprint dw 0
  2261                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2262                              <2> readstr:
  2263 00001C76 E805000000          <2> call readint
  2264 00001C7B E90BE6FFFF          <2> jmp timerinterrupt
  2265                              <2> 
  2266                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2267 00001C80 89C3                <2> 		mov ebx, eax
  2268                              <2> 	.b:
  2269 00001C82 53                  <2> 		push ebx
  2270 00001C83 57                  <2> 		push edi
  2271 00001C84 56                  <2> 		push esi
  2272 00001C85 30C0                <2> 		xor al, al
  2273 00001C87 E886050000          <2> 		call rdcharint
  2274 00001C8C 5E                  <2> 		pop esi
  2275 00001C8D 8806                <2> 		mov [esi], al
  2276 00001C8F 46                  <2> 		inc esi
  2277 00001C90 5F                  <2> 		pop edi
  2278 00001C91 5B                  <2> 		pop ebx
  2279 00001C92 39FE                <2> 		cmp esi, edi
  2280 00001C94 7304                <2> 		jae .done
  2281 00001C96 38D8                <2> 		cmp al, bl
  2282 00001C98 75E8                <2> 		jne .b
  2283                              <2> 	.done:
  2284 00001C9A 4E                  <2> 		dec esi
  2285 00001C9B C60600              <2> 		mov byte [esi], 0
  2286 00001C9E C3                  <2> 		ret
  2287                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2288                              <2> clearscrn:
  2289 00001C9F E805000000          <2> call clear
  2290 00001CA4 E9E2E5FFFF          <2> jmp timerinterrupt
  2291                              <2> %ifdef io.serial
  2292                              <2> clear:
  2293                              <2> 	ret
  2294                              <2> %else
  2295                              <2> clear:
  2296 00001CA9 668B0D[A2240000]    <2> 		mov cx, [charxy]
  2297 00001CB0 BF[5D960300]        <2> 		mov edi, videobuf
  2298 00001CB5 31C0                <2> 		xor eax, eax
  2299 00001CB7 A3[98240000]        <2> 		mov [linebeginpos], eax
  2300 00001CBC A3[9C240000]        <2> 		mov [videobufpos], eax
  2301 00001CC1 6631D2              <2> 		xor dx, dx
  2302 00001CC4 66A3[A0240000]      <2> 		mov [charpos], ax
  2303 00001CCA 66B80700            <2> 		mov ax, 7
  2304 00001CCE C1E010              <2> 		shl eax, 16
  2305                              <2> 	clearb:
  2306 00001CD1 8907                <2> 		mov [edi], eax
  2307 00001CD3 81C704000000        <2> 		add edi, 4
  2308 00001CD9 FEC9                <2> 		dec cl
  2309 00001CDB 80F900              <2> 		cmp cl, 0
  2310 00001CDE 75F1                <2> 		jne clearb
  2311 00001CE0 8A0D[A2240000]      <2> 		mov cl, [charxy]
  2312 00001CE6 FECD                <2> 		dec ch
  2313 00001CE8 80FD00              <2> 		cmp ch, 0
  2314 00001CEB 75E4                <2> 		jne clearb
  2315                              <2> 	cleardouble:
  2316 00001CED BF[DDBB0300]        <2> 		mov edi, videobuf2
  2317 00001CF2 668B0D[A2240000]    <2> 		mov cx, [charxy]
  2318 00001CF9 31C0                <2> 		xor eax, eax
  2319                              <2> 	clearc:
  2320 00001CFB 8907                <2> 		mov [edi], eax
  2321 00001CFD 81C704000000        <2> 		add edi, 4
  2322 00001D03 FEC9                <2> 		dec cl
  2323 00001D05 80F900              <2> 		cmp cl, 0
  2324 00001D08 75F1                <2> 		jne clearc
  2325 00001D0A 8A0D[A2240000]      <2> 		mov cl, [charxy]
  2326 00001D10 FECD                <2> 		dec ch
  2327 00001D12 80FD00              <2> 		cmp ch, 0
  2328 00001D15 75E4                <2> 		jne clearc
  2329 00001D17 E813090000          <2> 		call termcopy
  2330 00001D1C C3                  <2> 		ret
  2331                              <2> %endif
  2332                              <2> 		
  2333                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2334                              <2> prntreadstr:
  2335 00001D1D E80B000000          <2> call rdprint
  2336 00001D22 E964E5FFFF          <2> jmp timerinterrupt
  2337                              <2> 
  2338                              <2> readline:
  2339 00001D27 B00A                <2>   mov al, 10
  2340 00001D29 66BB0700            <2>   mov bx, 7
  2341                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2342 00001D2D E80F000000          <2> 	call rdprintdos
  2343 00001D32 50                  <2> 	push eax
  2344 00001D33 A0[F1210000]        <2> 	mov al, [endkeyrdpr]
  2345 00001D38 30E4                <2> 	xor ah, ah
  2346 00001D3A E84D050000          <2> 	call prcharint
  2347 00001D3F 58                  <2> 	pop eax
  2348 00001D40 C3                  <2> 	ret
  2349                              <2> 
  2350                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2351 00001D41 8935[FB210000]      <2> 		mov [buftxtloc], esi
  2352 00001D47 A2[F1210000]        <2> 		mov [endkeyrdpr], al
  2353 00001D4C 66891D[F3210000]    <2> 		mov [modkeyrdpr], bx
  2354 00001D53 8935[F5210000]      <2> 		mov [firstesirdpr], esi
  2355 00001D59 893D[FF210000]      <2> 		mov [endbufferrdpr], edi
  2356 00001D5F 8B3D[69E10300]      <2> 		mov edi, [commandsentered]
  2357 00001D65 893D[65E10300]      <2> 		mov [commandlistentries], edi
  2358                              <2> 	rdprintb:
  2359 00001D6B 56                  <2> 		push esi
  2360 00001D6C B001                <2> 		mov al, 1
  2361 00001D6E E89F040000          <2> 		call rdcharint
  2362 00001D73 8A25[72220000]      <2> 		mov ah, [lastkey + 2]
  2363 00001D79 88E1                <2> 		mov cl, ah
  2364 00001D7B 5E                  <2> 		pop esi
  2365                              <2> %ifdef io.serial
  2366                              <2> 		cmp ah, 0x41
  2367                              <2> 		je near rdprup
  2368                              <2> 		cmp ah, 0x42
  2369                              <2> 		je near rdprdown
  2370                              <2> 		cmp ah, 0x43
  2371                              <2> 		je near rdprright
  2372                              <2> 		cmp ah, 0x44
  2373                              <2> 		je near rdprleft
  2374                              <2> 		cmp ah, 0x31
  2375                              <2> 		je near rdprhome
  2376                              <2> 		cmp ah, 0x48
  2377                              <2> 		je near rdprhome
  2378                              <2> 		cmp ah, 0x46
  2379                              <2> 		je near rdprend
  2380                              <2> 		cmp ah, 0x33
  2381                              <2> 		je near rdprdel
  2382                              <2> 		cmp ah, 0x34
  2383                              <2> 		je near rdprend
  2384                              <2> %else
  2385 00001D7C 803D[DB520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2386 00001D83 753F                <2> 		jne notspecialrdprnt
  2387 00001D85 80FC53              <2> 		cmp ah, 0x53
  2388 00001D88 0F84C9030000        <2> 		je near rdprdel
  2389 00001D8E 80FC47              <2> 		cmp ah, 0x47
  2390 00001D91 0F8481010000        <2> 		je near rdprhome
  2391 00001D97 80FC4F              <2> 		cmp ah, 0x4F
  2392 00001D9A 0F849A010000        <2> 		je near rdprend
  2393 00001DA0 80FC50              <2> 		cmp ah, 0x50
  2394 00001DA3 0F8430020000        <2> 		je near rdprdown
  2395 00001DA9 80FC4D              <2> 		cmp ah, 0x4D
  2396 00001DAC 0F84CA010000        <2> 		je near rdprright
  2397 00001DB2 80FC4B              <2> 		cmp ah, 0x4B
  2398 00001DB5 0F849F010000        <2> 		je near rdprleft
  2399 00001DBB 80FC48              <2> 		cmp ah, 0x48
  2400 00001DBE 0F8458020000        <2> 		je near rdprup
  2401                              <2> 	notspecialrdprnt:
  2402                              <2> %endif
  2403 00001DC4 66A1[70220000]      <2> 		mov ax, [lastkey]
  2404 00001DCA 663D0800            <2> 		cmp ax, 8
  2405 00001DCE 0F84B8030000        <2> 		je near rdprbscheck
  2406 00001DD4 663D0000            <2> 		cmp ax, 0
  2407 00001DD8 7491                <2> 		je rdprintb
  2408 00001DDA 80F900              <2> 		cmp cl, 0
  2409 00001DDD 748C                <2> 		je rdprintb
  2410 00001DDF 663D8000            <2> 		cmp ax, 0x80
  2411 00001DE3 7257                <2> 		jb .normal
  2412 00001DE5 663D0008            <2> 		cmp ax, 0x800
  2413 00001DE9 7321                <2> 		jae .three
  2414 00001DEB 46                  <2> 		inc esi
  2415 00001DEC 3B35[FF210000]      <2> 		cmp esi, [endbufferrdpr]
  2416 00001DF2 0F83DA000000        <2> 		jae near donerdprinc
  2417 00001DF8 66C1E002            <2> 		shl ax, 2
  2418 00001DFC C0E802              <2> 		shr al, 2
  2419 00001DFF 0C80                <2> 		or al, 10000000b
  2420 00001E01 80CCC0              <2> 		or ah, 11000000b
  2421 00001E04 8866FF              <2> 		mov [esi - 1], ah
  2422 00001E07 E930000000          <2> 		jmp .normal
  2423                              <2> .three:	
  2424 00001E0C 81C602000000        <2> 		add esi, 2
  2425 00001E12 3B35[FF210000]      <2> 		cmp esi, [endbufferrdpr]
  2426 00001E18 0F83B4000000        <2> 		jae near donerdprinc
  2427 00001E1E 88E1                <2> 		mov cl, ah
  2428 00001E20 C0E904              <2> 		shr cl, 4
  2429 00001E23 80C9E0              <2> 		or cl, 11100000b
  2430 00001E26 884EFE              <2> 		mov [esi - 2], cl
  2431 00001E29 66C1E004            <2> 		shl ax, 4
  2432 00001E2D 66C1E802            <2> 		shr ax, 2
  2433 00001E31 80CC80              <2> 		or ah, 10000000b
  2434 00001E34 C0E802              <2> 		shr al, 2
  2435 00001E37 0C80                <2> 		or al, 10000000b
  2436 00001E39 8866FF              <2> 		mov [esi - 1], ah
  2437                              <2> .normal:
  2438 00001E3C 8806                <2> 		mov [esi], al
  2439 00001E3E 46                  <2> 		inc esi
  2440 00001E3F 66A1[70220000]      <2> 		mov ax, [lastkey]
  2441                              <2> 	bscheckequal:
  2442 00001E45 668B1D[F3210000]    <2> 		mov bx, [modkeyrdpr]
  2443 00001E4C 803D[FA210000]00    <2> 		cmp byte [txtmask], 0
  2444 00001E53 7407                <2> 		je nomasktxt
  2445 00001E55 30E4                <2> 		xor ah, ah
  2446 00001E57 A0[FA210000]        <2> 		mov al, [txtmask]
  2447                              <2> 	nomasktxt:
  2448 00001E5C 56                  <2> 		push esi
  2449 00001E5D 66A3[EF210000]      <2> 		mov [axcache], ax
  2450 00001E63 668B1D[F1210000]    <2> 		mov bx, [endkeyrdpr]
  2451 00001E6A 6639D8              <2> 		cmp ax, bx
  2452 00001E6D 7432                <2> 		je nobackprintbuftxt2
  2453 00001E6F E818040000          <2> 		call prcharint
  2454 00001E74 BE[488E0300]        <2> 		mov esi, buftxt2
  2455 00001E79 E85AFDFFFF          <2> 		call printquiet
  2456 00001E7E 66B82000            <2> 		mov ax, " "
  2457 00001E82 E81C040000          <2> 		call prcharq
  2458 00001E87 66B80800            <2> 		mov ax, 8
  2459 00001E8B 81FE[488E0300]      <2> 		cmp esi, buftxt2
  2460 00001E91 740E                <2> 		je nobackprintbuftxt2
  2461                              <2> 	backprintbuftxt2:
  2462 00001E93 E80B040000          <2> 		call prcharq
  2463 00001E98 4E                  <2> 		dec esi
  2464 00001E99 81FE[488E0300]      <2> 		cmp esi, buftxt2
  2465 00001E9F 77F2                <2> 		ja backprintbuftxt2
  2466                              <2> 	nobackprintbuftxt2:
  2467 00001EA1 663D0A00            <2> 		cmp ax, 10
  2468 00001EA5 7405                <2> 		je nonobackprint
  2469 00001EA7 E8E0030000          <2> 		call prcharint
  2470                              <2> 	nonobackprint:
  2471 00001EAC 5E                  <2> 		pop esi
  2472 00001EAD 3B35[FF210000]      <2> 		cmp esi, [endbufferrdpr]
  2473 00001EB3 0F8319000000        <2> 		jae near donerdprinc
  2474 00001EB9 66A1[EF210000]      <2> 		mov ax, [axcache]
  2475 00001EBF 8A25[F1210000]      <2> 		mov ah, [endkeyrdpr]
  2476 00001EC5 38E0                <2> 		cmp al, ah
  2477 00001EC7 0F859EFEFFFF        <2> 		jne rdprintb
  2478 00001ECD E901000000          <2> 		jmp donerdprint
  2479                              <2> 	donerdprinc:
  2480 00001ED2 46                  <2> 		inc esi
  2481                              <2> 	donerdprint:
  2482 00001ED3 4E                  <2> 		dec esi
  2483 00001ED4 BF[488E0300]        <2> 		mov edi, buftxt2
  2484                              <2> 	copylaterstuff:
  2485 00001ED9 8A07                <2> 		mov al, [edi]
  2486 00001EDB 3C00                <2> 		cmp al, 0
  2487 00001EDD 7409                <2> 		je nocopylaterstuff
  2488 00001EDF 8806                <2> 		mov [esi], al
  2489 00001EE1 47                  <2> 		inc edi
  2490 00001EE2 46                  <2> 		inc esi
  2491 00001EE3 E9F1FFFFFF          <2> 		jmp copylaterstuff
  2492                              <2> 	nocopylaterstuff:
  2493 00001EE8 C60600              <2> 		mov byte [esi], 0
  2494 00001EEB E80B000000          <2> 		call clearbuftxt2
  2495 00001EF0 89F1                <2> 		mov ecx, esi
  2496 00001EF2 8B3D[F5210000]      <2> 		mov edi, [firstesirdpr]
  2497 00001EF8 29F9                <2> 		sub ecx, edi
  2498 00001EFA C3                  <2> 		ret
  2499                              <2> 	
  2500                              <2> 	clearbuftxt2:
  2501 00001EFB 30C0                <2> 		xor al, al
  2502 00001EFD BF[488E0300]        <2> 		mov edi, buftxt2
  2503                              <2> 	clearbuftxt2lp:
  2504 00001F02 8807                <2> 		mov [edi], al
  2505 00001F04 47                  <2> 		inc edi
  2506 00001F05 81FF[48920300]      <2> 		cmp edi, buftxt
  2507 00001F0B 75F5                <2> 		jne clearbuftxt2lp
  2508 00001F0D C3                  <2> 		ret
  2509                              <2> 	
  2510                              <2> 	rdprintb2:
  2511 00001F0E E81C070000          <2> 		call termcopy
  2512 00001F13 E953FEFFFF          <2> 		jmp rdprintb
  2513                              <2> 	
  2514                              <2> 	rdprhome:
  2515 00001F18 3B35[FB210000]      <2> 		cmp esi, [buftxtloc]
  2516 00001F1E 0F84EAFFFFFF        <2> 		je near rdprintb2
  2517 00001F24 BF[488E0300]        <2> 		mov edi, buftxt2
  2518 00001F29 8A07                <2> 		mov al, [edi]
  2519 00001F2B E88E020000          <2> 		call shiftbuftxt2
  2520 00001F30 E86E030000          <2> 		call prcharq
  2521 00001F35 E9DEFFFFFF          <2> 		jmp rdprhome
  2522                              <2> 		
  2523                              <2> 	rdprend:
  2524 00001F3A BF[488E0300]        <2> 		mov edi, buftxt2
  2525 00001F3F 8A07                <2> 		mov al, [edi]
  2526 00001F41 3C00                <2> 		cmp al, 0
  2527 00001F43 0F84C5FFFFFF        <2> 		je near rdprintb2
  2528 00001F49 8806                <2> 		mov [esi], al
  2529 00001F4B E84C000000          <2> 		call shiftbuftxt2lft
  2530 00001F50 E84E030000          <2> 		call prcharq
  2531 00001F55 E9E0FFFFFF          <2> 		jmp rdprend
  2532                              <2> 	
  2533                              <2> 	rdprleft:
  2534 00001F5A 3B35[FB210000]      <2> 		cmp esi, [buftxtloc]
  2535 00001F60 0F8405FEFFFF        <2> 		je near rdprintb
  2536 00001F66 BF[488E0300]        <2> 		mov edi, buftxt2
  2537 00001F6B 8A07                <2> 		mov al, [edi]
  2538 00001F6D E84C020000          <2> 		call shiftbuftxt2
  2539 00001F72 E815030000          <2> 		call prcharint
  2540 00001F77 E9EFFDFFFF          <2> 		jmp rdprintb
  2541                              <2> 		
  2542                              <2> 	rdprright:
  2543 00001F7C BF[488E0300]        <2> 		mov edi, buftxt2
  2544 00001F81 8A07                <2> 		mov al, [edi]
  2545 00001F83 3C00                <2> 		cmp al, 0
  2546 00001F85 0F84E0FDFFFF        <2> 		je near rdprintb
  2547 00001F8B 8806                <2> 		mov [esi], al
  2548 00001F8D E80A000000          <2> 		call shiftbuftxt2lft
  2549 00001F92 E8F5020000          <2> 		call prcharint
  2550 00001F97 E9CFFDFFFF          <2> 		jmp rdprintb
  2551                              <2> 		
  2552                              <2> 	shiftbuftxt2lft:
  2553 00001F9C 55                  <2> 		push ebp
  2554 00001F9D 89FD                <2> 		mov ebp, edi
  2555                              <2> 	.lp:
  2556 00001F9F 3C00                <2> 		cmp al, 0
  2557 00001FA1 740B                <2> 		je noshiftbuftxt2lft
  2558 00001FA3 47                  <2> 		inc edi
  2559 00001FA4 8A07                <2> 		mov al, [edi]
  2560 00001FA6 8847FF              <2> 		mov [edi - 1], al
  2561 00001FA9 E9F1FFFFFF          <2> 		jmp .lp
  2562                              <2> 	noshiftbuftxt2lft:
  2563 00001FAE 8A4500              <2> 		mov al, [ebp]
  2564 00001FB1 5D                  <2> 		pop ebp
  2565 00001FB2 3CC0                <2> 		cmp al, 0xC0
  2566 00001FB4 7304                <2> 		jae .nofix
  2567 00001FB6 3C80                <2> 		cmp al, 0x80
  2568 00001FB8 73E2                <2> 		jae shiftbuftxt2lft
  2569                              <2> 	.nofix:
  2570 00001FBA 8A06                <2> 		mov al, [esi]
  2571 00001FBC 30E4                <2> 		xor ah, ah
  2572 00001FBE 46                  <2> 		inc esi
  2573 00001FBF 668B1D[F3210000]    <2> 		mov bx, [modkeyrdpr]
  2574 00001FC6 C3                  <2> 		ret
  2575                              <2> 		
  2576                              <2> 	rdprdownbck:
  2577 00001FC7 FECC                <2> 		dec ah
  2578 00001FC9 8825[F9210000]      <2> 		mov [commandedit], ah
  2579 00001FCF E890000000          <2> 		call rdprbckspc
  2580 00001FD4 E992FDFFFF          <2> 		jmp rdprintb
  2581                              <2> 	
  2582                              <2> 	rdprdown:
  2583 00001FD9 8A25[F9210000]      <2> 		mov ah, [commandedit]
  2584 00001FDF 80FC01              <2> 		cmp ah, 1
  2585 00001FE2 0F8683FDFFFF        <2> 		jbe near rdprintb
  2586 00001FE8 8B3D[69E10300]      <2> 		mov edi, [commandsentered]
  2587 00001FEE 3B3D[65E10300]      <2> 		cmp edi, [commandlistentries]
  2588 00001FF4 7618                <2> 		jbe .nofix
  2589 00001FF6 8105[65E10300]0200- <2> 		add dword [commandlistentries], 2
  2590 00001FFE 0000                <2>
  2591 00002000 3B3D[65E10300]      <2> 		cmp edi, [commandlistentries]
  2592 00002006 7706                <2> 		ja .nofix
  2593 00002008 893D[65E10300]      <2> 		mov [commandlistentries], edi
  2594                              <2> 	.nofix:
  2595 0000200E 80FC02              <2> 		cmp ah, 2
  2596 00002011 74B4                <2> 		je rdprdownbck
  2597 00002013 80EC02              <2> 		sub ah, 2
  2598 00002016 8825[F9210000]      <2> 		mov [commandedit], ah
  2599                              <2> 		
  2600                              <2> 	rdprup:
  2601 0000201C 3805[F9210000]      <2> 		cmp [commandedit], al
  2602 00002022 0F8443FDFFFF        <2> 		je near rdprintb
  2603 00002028 813D[65E10300]0000- <2> 		cmp dword [commandlistentries], 0
  2604 00002030 0000                <2>
  2605 00002032 0F8433FDFFFF        <2> 		je near rdprintb
  2606 00002038 FF0D[65E10300]      <2> 		dec dword [commandlistentries]
  2607                              <2> 	.lp:
  2608 0000203E BF[488E0300]        <2> 		mov edi, buftxt2
  2609 00002043 8A07                <2> 		mov al, [edi]
  2610 00002045 3C00                <2> 		cmp al, 0
  2611 00002047 7411                <2> 		je .start
  2612 00002049 8806                <2> 		mov [esi], al
  2613 0000204B E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2614 00002050 E84E020000          <2> 		call prcharq
  2615 00002055 E9E4FFFFFF          <2> 		jmp .lp
  2616                              <2> 	.start:
  2617 0000205A E805000000          <2> 		call rdprbckspc
  2618 0000205F E94B000000          <2> 		jmp getcurrentcommandstr
  2619                              <2> 	rdprbckspc:
  2620 00002064 3B35[FB210000]      <2> 		cmp esi, [buftxtloc]
  2621 0000206A 7435                <2> 		je nordprupbck
  2622                              <2> 	rdprupbckspclp:
  2623 0000206C 66B80800            <2> 		mov ax, 8
  2624 00002070 668B1D[F3210000]    <2> 		mov bx, [modkeyrdpr]
  2625 00002077 E827020000          <2> 		call prcharq
  2626 0000207C 66B82000            <2> 		mov ax, ' '
  2627 00002080 E81E020000          <2> 		call prcharq
  2628 00002085 66B80800            <2> 		mov ax, 8
  2629 00002089 E815020000          <2> 		call prcharq
  2630 0000208E 4E                  <2> 		dec esi
  2631 0000208F 3B35[FB210000]      <2> 		cmp esi, [buftxtloc]
  2632 00002095 7405                <2> 		je nordprupbck2
  2633 00002097 E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2634                              <2> 	nordprupbck2:
  2635 0000209C E88E050000          <2> 		call termcopy
  2636                              <2> 	nordprupbck:
  2637 000020A1 8B3D[61E10300]      <2> 		mov edi, [commandbufpos]
  2638 000020A7 81C7[6DE10300]      <2> 		add edi, commandbuf
  2639 000020AD 4F                  <2> 		dec edi
  2640 000020AE C3                  <2> 		ret
  2641                              <2> 	getcurrentcommandstr:
  2642 000020AF 8A25[F9210000]      <2> 		mov ah, [commandedit]
  2643 000020B5 FE05[F9210000]      <2> 		inc byte [commandedit]
  2644                              <2> 	getccmdlp:
  2645 000020BB 4F                  <2> 		dec edi
  2646 000020BC 8A07                <2> 		mov al, [edi]
  2647 000020BE 81FF[6DE10300]      <2> 		cmp edi, commandbuf
  2648 000020C4 7231                <2> 		jb getcmdresetcommandbuf
  2649 000020C6 81EF[6DE10300]      <2> 		sub edi, commandbuf
  2650 000020CC 3B3D[61E10300]      <2> 		cmp edi, [commandbufpos]
  2651 000020D2 0F8493FCFFFF        <2> 		je near rdprintb
  2652 000020D8 81C7[6DE10300]      <2> 		add edi, commandbuf
  2653 000020DE 3C00                <2> 		cmp al, 0
  2654 000020E0 75D9                <2> 		jne getccmdlp
  2655 000020E2 FECC                <2> 		dec ah
  2656 000020E4 80FC00              <2> 		cmp ah, 0
  2657 000020E7 77D2                <2> 		ja getccmdlp
  2658 000020E9 47                  <2> 		inc edi
  2659 000020EA 81FF[6DF10300]      <2> 		cmp edi, commandbufend
  2660 000020F0 7710                <2> 		ja fixcmdbufb4morerdpr
  2661 000020F2 E918000000          <2> 		jmp morerdprup
  2662                              <2> 	getcmdresetcommandbuf:
  2663 000020F7 BF[6DF10300]        <2> 		mov edi, commandbufend
  2664 000020FC 47                  <2> 		inc edi
  2665 000020FD E9B9FFFFFF          <2> 		jmp getccmdlp
  2666                              <2> 	fixcmdbufb4morerdpr:
  2667 00002102 4F                  <2> 		dec edi
  2668 00002103 81EF[6DF10300]      <2> 		sub edi, commandbufend
  2669 00002109 81C7[6DE10300]      <2> 		add edi, commandbuf
  2670                              <2> 	morerdprup:
  2671 0000210F 8A07                <2> 		mov al, [edi]
  2672 00002111 47                  <2> 		inc edi
  2673 00002112 81EF[6DE10300]      <2> 		sub edi, commandbuf
  2674 00002118 3C00                <2> 		cmp al, 0
  2675 0000211A 0F84EEFDFFFF        <2> 		je near rdprintb2
  2676 00002120 3B3D[61E10300]      <2> 		cmp edi, [commandbufpos]
  2677 00002126 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2678 0000212C 81C7[6DE10300]      <2> 		add edi, commandbuf
  2679 00002132 8806                <2> 		mov [esi], al
  2680 00002134 46                  <2> 		inc esi
  2681 00002135 57                  <2> 		push edi
  2682 00002136 668B1D[F3210000]    <2> 		mov bx, [modkeyrdpr]
  2683 0000213D 30E4                <2> 		xor ah, ah
  2684 0000213F E85F010000          <2> 		call prcharq
  2685 00002144 5F                  <2> 		pop edi
  2686 00002145 81FF[6DF10300]      <2> 		cmp edi, commandbufend
  2687 0000214B 76C2                <2> 		jbe morerdprup
  2688 0000214D BF[6DE10300]        <2> 		mov edi, commandbuf
  2689 00002152 E9B8FFFFFF          <2> 		jmp morerdprup
  2690                              <2> 
  2691                              <2> 	rdprdel:
  2692 00002157 BF[488E0300]        <2> 		mov edi, buftxt2
  2693 0000215C 8A07                <2> 		mov al, [edi]
  2694 0000215E 3C00                <2> 		cmp al, 0
  2695 00002160 0F8405FCFFFF        <2> 		je near rdprintb
  2696 00002166 8806                <2> 		mov [esi], al
  2697 00002168 3C80                <2> 		cmp al, 0x80
  2698 0000216A 7216                <2> 		jb .fn
  2699                              <2> 	.lp:
  2700 0000216C 46                  <2> 		inc esi
  2701 0000216D 47                  <2> 		inc edi
  2702 0000216E 8A07                <2> 		mov al, [edi]
  2703 00002170 3C00                <2> 		cmp al, 0
  2704 00002172 0F84F3FBFFFF        <2> 		je near rdprintb
  2705 00002178 8806                <2> 		mov [esi], al
  2706 0000217A 3C80                <2> 		cmp al, 0x80
  2707 0000217C 7204                <2> 		jb .fn
  2708 0000217E 3CC0                <2> 		cmp al, 0xC0
  2709 00002180 72EA                <2> 		jb .lp
  2710                              <2> 	.fn:
  2711 00002182 E815FEFFFF          <2> 		call shiftbuftxt2lft
  2712 00002187 E817010000          <2> 		call prcharq
  2713                              <2> 		
  2714                              <2> 	rdprbscheck:
  2715 0000218C 3B35[F5210000]      <2> 		cmp esi, [firstesirdpr]
  2716 00002192 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2717                              <2> 	goodbscheck:
  2718 00002198 4E                  <2> 		dec esi
  2719 00002199 8A46FF              <2> 		mov al, [esi - 1]
  2720 0000219C C60600              <2> 		mov byte [esi], 0
  2721 0000219F 3CC0                <2> 		cmp al, 0xC0
  2722 000021A1 7309                <2> 		jae .onemore
  2723 000021A3 3C80                <2> 		cmp al, 0x80
  2724 000021A5 73F1                <2> 		jae goodbscheck
  2725 000021A7 E904000000          <2> 		jmp .nomore
  2726                              <2> 	.onemore:
  2727 000021AC 4E                  <2> 		dec esi
  2728 000021AD C60600              <2> 		mov byte [esi], 0		
  2729                              <2> 	.nomore:
  2730 000021B0 668B1D[F3210000]    <2> 		mov bx, [modkeyrdpr]
  2731 000021B7 B008                <2> 		mov al, 8
  2732 000021B9 E987FCFFFF          <2> 		jmp bscheckequal
  2733                              <2> 		
  2734                              <2> 	shiftbuftxt2:
  2735 000021BE 55                  <2> 		push ebp
  2736 000021BF 89FD                <2> 		mov ebp, edi
  2737                              <2> 	.lp:
  2738 000021C1 3C00                <2> 		cmp al, 0
  2739 000021C3 740C                <2> 		je noshiftbuftxt2
  2740 000021C5 47                  <2> 		inc edi
  2741 000021C6 8A27                <2> 		mov ah, [edi]
  2742 000021C8 8807                <2> 		mov [edi], al
  2743 000021CA 88E0                <2> 		mov al, ah
  2744 000021CC E9F0FFFFFF          <2> 		jmp .lp
  2745                              <2> 	noshiftbuftxt2:
  2746 000021D1 8A4500              <2> 		mov al, [ebp]
  2747 000021D4 5D                  <2> 		pop ebp
  2748 000021D5 3CC0                <2> 		cmp al, 0xC0
  2749 000021D7 7304                <2> 		jae .nofix
  2750 000021D9 3C80                <2> 		cmp al, 0x80
  2751 000021DB 73E1                <2> 		jae shiftbuftxt2
  2752                              <2> 	.nofix:
  2753 000021DD BF[488E0300]        <2> 		mov edi, buftxt2
  2754 000021E2 4E                  <2> 		dec esi
  2755 000021E3 8A06                <2> 		mov al, [esi]
  2756 000021E5 8807                <2> 		mov [edi], al
  2757 000021E7 C60600              <2> 		mov byte [esi], 0
  2758 000021EA 66B80800            <2> 		mov ax, 8
  2759 000021EE C3                  <2> 		ret
  2760                              <2> 		
  2761 000021EF 0000                <2> axcache dw 0
  2762 000021F1 0000                <2> endkeyrdpr dw 0
  2763 000021F3 0000                <2> modkeyrdpr dw 0
  2764 000021F5 00000000            <2> firstesirdpr dd 0
  2765 000021F9 00                  <2> commandedit db 0
  2766 000021FA 00                  <2> txtmask db 0
  2767 000021FB 00000000            <2> buftxtloc dd 0
  2768 000021FF 00000000            <2> endbufferrdpr dd 0
  2769 00002203 082000              <2> backcursor db 8," ",0
  2770                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2771                              <2> readchar:
  2772 00002206 E807000000          <2> 	call rdcharint
  2773 0000220B E97BE0FFFF          <2> 	jmp timerinterrupt
  2774                              <2> getchar:
  2775 00002210 30C0                <2> 	xor al, al
  2776                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2777 00002212 66C705[74220000]01- <2> 		mov word [trans], 1
  2778 0000221A 00                  <2>
  2779 0000221B 3C00                <2> 		cmp al, 0
  2780 0000221D 7509                <2> 		jne transcheck
  2781 0000221F 66C705[74220000]00- <2> 		mov word [trans], 0
  2782 00002227 00                  <2>
  2783                              <2> 	transcheck:
  2784                              <2> 	%ifdef io.serial
  2785                              <2> 		call serial.receive
  2786                              <2> 		xor ah, ah
  2787                              <2> 		cmp al, 13
  2788                              <2> 		je rdenter
  2789                              <2> 	%else
  2790 00002228 E8D0300000          <2> 		call getkey
  2791 0000222D 66A1[72220000]      <2> 		mov ax, [lastkey + 2]
  2792 00002233 663D1C00            <2> 		cmp ax, 0x1C
  2793 00002237 7425                <2> 		je rdenter
  2794                              <2> 	%endif
  2795 00002239 66A1[70220000]      <2> 		mov ax, [lastkey]
  2796 0000223F 668B1D[74220000]    <2> 		mov bx, [trans]
  2797 00002246 803D[DB520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2798 0000224D 7500                <2> 		jne nospecialtrans
  2799                              <2> 	nospecialtrans:
  2800 0000224F 6609C3              <2> 		or bx, ax
  2801 00002252 6681FB0000          <2> 		cmp bx, 0
  2802 00002257 74CF                <2> 		je transcheck
  2803 00002259 E90C000000          <2> 		jmp rdend
  2804                              <2> 	rdenter:
  2805 0000225E C1E010              <2> 		shl eax, 16
  2806 00002261 66B80A00            <2> 		mov ax, 10
  2807 00002265 A3[70220000]        <2> 		mov [lastkey], eax
  2808                              <2> 	rdend:
  2809 0000226A A1[70220000]        <2> 		mov eax, [lastkey]
  2810 0000226F C3                  <2> 		ret
  2811                              <2> 		
  2812 00002270 00000000            <2> lastkey dd 0
  2813 00002274 0000                <2> trans dw 0
  2814                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2815                              <2> prntchar:
  2816 00002276 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2817                              <2> %ifdef io.serial
  2818                              <2> 	call prcharint
  2819                              <2> 	jmp timerinterrupt
  2820                              <2> prcharint:	
  2821                              <2> prcharq:
  2822                              <2> 	call serial.send
  2823                              <2> 	ret
  2824                              <2> %else
  2825 00002278 38FB                <2> cmp bl, bh
  2826 0000227A 740A                <2> je prchar.notimer
  2827 0000227C E80B000000          <2> call prcharint
  2828 00002281 E905E0FFFF          <2> jmp timerinterrupt
  2829                              <2> prchar.notimer:
  2830 00002286 E818000000          <2> 	call prcharq
  2831 0000228B CF                  <2> 	iret
  2832                              <2> 	
  2833                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2834 0000228C 663DFFFE            <2> 	cmp ax, 0xFEFF
  2835 00002290 740E                <2> 	je .ret
  2836 00002292 39C1                <2> 	cmp ecx, eax
  2837 00002294 740D                <2> 	je prcharq
  2838 00002296 E808000000          <2> 	call prcharq
  2839 0000229B E88F030000          <2> 	call termcopy
  2840                              <2> .ret:
  2841 000022A0 C3                  <2> 	ret
  2842 000022A1 00                  <2> termguion db 0
  2843 000022A2 00                  <2> termcopyon db 0
  2844                              <2> prcharq:
  2845 000022A3 C1E310              <2> 	shl ebx, 16
  2846 000022A6 6689C3              <2> 	mov bx, ax
  2847 000022A9 89D8                <2> 	mov eax, ebx
  2848 000022AB A3[A4240000]        <2> 	mov [charbuf], eax
  2849 000022B0 8B1D[9C240000]      <2> 	mov ebx, [videobufpos]
  2850 000022B6 BF[5D960300]        <2> 	mov edi, videobuf
  2851 000022BB 01DF                <2> 	add edi, ebx
  2852 000022BD A1[3A260000]        <2> 	mov eax, [removedvideo]
  2853 000022C2 8907                <2> 	mov [edi], eax
  2854 000022C4 A1[A4240000]        <2> 	mov eax, [charbuf]
  2855 000022C9 31D2                <2> 	xor edx, edx
  2856 000022CB 668B15[A0240000]    <2> 	mov dx, [charpos]
  2857 000022D2 31C9                <2> 	xor ecx, ecx
  2858 000022D4 668B0D[A2240000]    <2> 	mov cx, [charxy]
  2859 000022DB 663D0900            <2> 	cmp ax, 9
  2860 000022DF 0F847C000000        <2> 	je near prtab
  2861 000022E5 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2862 000022E9 0F84A2000000        <2> 	je near prcr
  2863 000022EF 663D0A00            <2> 	cmp ax, 10
  2864 000022F3 0F84F1000000        <2> 	je near prnlcr
  2865 000022F9 663D0800            <2> 	cmp ax, 8
  2866 000022FD 0F84A2000000        <2> 	je near prbs
  2867 00002303 663DFF00            <2> 	cmp ax, 255		;null character
  2868 00002307 0F8424000000        <2> 	je near donescr
  2869 0000230D 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2870 00002311 0F8341000000        <2> 	jae near prnofont
  2871                              <2> donepr:
  2872 00002317 8907                <2> 	mov [edi], eax
  2873 00002319 81C704000000        <2> 	add edi, 4
  2874 0000231F FEC2                <2> 	inc dl
  2875                              <2> donecrnl:
  2876 00002321 38CA                <2> 	cmp dl, cl
  2877 00002323 0F83E5000000        <2> 	jae near preol
  2878                              <2> doneeol:
  2879 00002329 38EE                <2> 	cmp dh, ch
  2880 0000232B 0F83FA000000        <2> 	jae near prscr	
  2881                              <2> donescr:
  2882 00002331 89FB                <2> 	mov ebx, edi
  2883 00002333 8B07                <2> 	mov eax, [edi]
  2884 00002335 A3[3A260000]        <2> 	mov [removedvideo], eax
  2885 0000233A 81EB[5D960300]      <2> 	sub ebx, videobuf
  2886 00002340 891D[9C240000]      <2> 	mov [videobufpos], ebx
  2887 00002346 668915[A0240000]    <2> 	mov [charpos], dx
  2888 0000234D A1[A4240000]        <2> 	mov eax, [charbuf]
  2889 00002352 89C3                <2> 	mov ebx, eax
  2890 00002354 C1EB10              <2> 	shr ebx, 16
  2891 00002357 C3                  <2> 	ret
  2892                              <2> 	
  2893                              <2> 	prnofont:
  2894 00002358 66B80200            <2> 		mov ax, 2
  2895 0000235C E9B6FFFFFF          <2> 		jmp donepr
  2896                              <2> 	prtab:
  2897 00002361 8B1D[98240000]      <2> 		mov ebx, [linebeginpos]
  2898 00002367 81EF[5D960300]      <2> 		sub edi, videobuf
  2899 0000236D 29DF                <2> 		sub edi, ebx
  2900 0000236F C1EF05              <2> 		shr edi, 5
  2901 00002372 C1E705              <2> 		shl edi, 5
  2902 00002375 81C720000000        <2> 		add edi, 32
  2903 0000237B C0EA03              <2> 		shr dl, 3
  2904 0000237E C0E203              <2> 		shl dl, 3
  2905 00002381 80C208              <2> 		add dl, 8
  2906 00002384 81C7[5D960300]      <2> 		add edi, videobuf
  2907 0000238A 01DF                <2> 		add edi, ebx
  2908 0000238C E990FFFFFF          <2> 		jmp donecrnl
  2909                              <2> 	
  2910                              <2> 	prcr:
  2911 00002391 30D2                <2> 		xor dl, dl
  2912 00002393 BF[5D960300]        <2> 		mov edi, videobuf
  2913 00002398 8B1D[98240000]      <2> 		mov ebx, [linebeginpos]
  2914 0000239E 01DF                <2> 		add edi, ebx
  2915 000023A0 E97CFFFFFF          <2> 		jmp donecrnl
  2916                              <2> 			
  2917                              <2> 	prbs:
  2918 000023A5 8B1D[98240000]      <2> 		mov ebx, [linebeginpos]
  2919 000023AB 80FA00              <2> 		cmp dl, 0
  2920 000023AE 7415                <2> 		je prbackline
  2921                              <2> 	prnobmr:
  2922 000023B0 891D[98240000]      <2> 		mov [linebeginpos], ebx
  2923 000023B6 FECA                <2> 		dec dl
  2924 000023B8 31C0                <2> 		xor eax, eax
  2925 000023BA 81EF04000000        <2> 		sub edi, 4
  2926 000023C0 E95CFFFFFF          <2> 		jmp donecrnl
  2927                              <2> 	prbackline:
  2928 000023C5 6631DB              <2> 		xor bx, bx
  2929 000023C8 88CA                <2> 		mov dl, cl
  2930 000023CA 80FE00              <2> 		cmp dh, 0
  2931 000023CD 74E1                <2> 		je prnobmr
  2932 000023CF 8B1D[98240000]      <2> 		mov ebx, [linebeginpos]
  2933 000023D5 6651                <2> 		push cx
  2934 000023D7 31C9                <2> 		xor ecx, ecx
  2935 000023D9 8A0C24              <2> 		mov cl, [esp]
  2936 000023DC C1E102              <2> 		shl ecx, 2
  2937 000023DF 29CB                <2> 		sub ebx, ecx
  2938 000023E1 6659                <2> 		pop cx
  2939 000023E3 FECE                <2> 		dec dh
  2940 000023E5 E9C6FFFFFF          <2> 		jmp prnobmr
  2941                              <2> 		
  2942                              <2> 	prnlcr:
  2943 000023EA FEC6                <2> 		inc dh
  2944 000023EC 31DB                <2> 		xor ebx, ebx
  2945 000023EE 30D2                <2> 		xor dl, dl
  2946 000023F0 88CB                <2> 		mov bl, cl
  2947 000023F2 66C1E302            <2> 		shl bx, 2
  2948 000023F6 BF[5D960300]        <2> 		mov edi, videobuf
  2949 000023FB 031D[98240000]      <2> 		add ebx, [linebeginpos]
  2950 00002401 891D[98240000]      <2> 		mov [linebeginpos], ebx
  2951 00002407 01DF                <2> 		add edi, ebx
  2952 00002409 E913FFFFFF          <2> 		jmp donecrnl
  2953                              <2> 		
  2954                              <2> 	preol:
  2955 0000240E 30D2                <2> 		xor dl, dl
  2956 00002410 FEC6                <2> 		inc dh
  2957 00002412 31DB                <2> 		xor ebx, ebx
  2958 00002414 88CB                <2> 		mov bl, cl
  2959 00002416 66C1E302            <2> 		shl bx, 2
  2960 0000241A 031D[98240000]      <2> 		add ebx, [linebeginpos]
  2961 00002420 891D[98240000]      <2> 		mov [linebeginpos], ebx
  2962 00002426 E9FEFEFFFF          <2> 		jmp doneeol
  2963                              <2> 	prscr:
  2964 0000242B FECE                <2> 		dec dh
  2965 0000242D BF[5D960300]        <2> 		mov edi, videobuf
  2966 00002432 31DB                <2> 		xor ebx, ebx
  2967 00002434 88CB                <2> 		mov bl, cl
  2968 00002436 66C1E302            <2> 		shl bx, 2
  2969 0000243A 01FB                <2> 		add ebx, edi
  2970                              <2> 	intscrollloop:
  2971 0000243C 8B03                <2> 		mov eax, [ebx]
  2972 0000243E 8907                <2> 		mov [edi], eax
  2973 00002440 81C704000000        <2> 		add edi, 4
  2974 00002446 81C304000000        <2> 		add ebx, 4
  2975 0000244C FEC9                <2> 		dec cl
  2976 0000244E 80F900              <2> 		cmp cl, 0
  2977 00002451 75E9                <2> 		jne intscrollloop
  2978 00002453 8A0D[A2240000]      <2> 		mov cl, [charxy]
  2979 00002459 FECD                <2> 		dec ch
  2980 0000245B 80FD01              <2> 		cmp ch, 1
  2981 0000245E 77DC                <2> 		ja intscrollloop
  2982 00002460 31C0                <2> 		xor eax, eax
  2983 00002462 81EF[5D960300]      <2> 		sub edi, videobuf
  2984 00002468 893D[98240000]      <2> 		mov [linebeginpos], edi
  2985 0000246E 81C7[5D960300]      <2> 		add edi, videobuf
  2986 00002474 89FB                <2> 		mov ebx, edi
  2987                              <2> 	intloopclear:
  2988 00002476 8903                <2> 		mov [ebx], eax
  2989 00002478 81C304000000        <2> 		add ebx, 4
  2990 0000247E FEC9                <2> 		dec cl
  2991 00002480 80F900              <2> 		cmp cl, 0
  2992 00002483 75F1                <2> 		jne intloopclear
  2993 00002485 FECD                <2> 		dec ch
  2994 00002487 80FD00              <2> 		cmp ch, 0
  2995 0000248A 75EA                <2> 		jne intloopclear
  2996 0000248C 668B0D[A2240000]    <2> 		mov cx, [charxy]
  2997 00002493 E999FEFFFF          <2> 		jmp donescr
  2998                              <2> 		
  2999 00002498 00000000            <2> linebeginpos dd 0
  3000 0000249C 00000000            <2> videobufpos: dd 0
  3001 000024A0 0000                <2> charpos db 0,0
  3002 000024A2 501E                <2> charxy db 80,30
  3003 000024A4 00000000            <2> charbuf dd 0
  3004                              <2> %endif
  3005                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3006                              <2> openfile:
  3007 000024A8 E8F5370000          <2> 	call loadfile
  3008 000024AD E9D9DDFFFF          <2> 	jmp timerinterrupt
  3009                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3010                              <2> num2str:
  3011 000024B2 3C00                <2> 	cmp al, 0
  3012 000024B4 750A                <2> 	jne num2strb
  3013 000024B6 E89C0B0000          <2> 	call showdec
  3014 000024BB E9CBDDFFFF          <2> 	jmp timerinterrupt
  3015                              <2> num2strb:
  3016 000024C0 E8C80A0000          <2> 	call showhex
  3017 000024C5 E9C1DDFFFF          <2> 	jmp timerinterrupt
  3018                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3019                              <2> str2num:
  3020 000024CA 89F7                <2> 	mov edi, esi
  3021 000024CC E86B0C0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3022 000024D1 E9B5DDFFFF          <2> 	jmp timerinterrupt
  3023                              <2> 	
  3024                              <1> %ifdef threads.included
  3025                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3026                              <2> forkthread:
  3027                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3028                              <2> 			;returns the PID of the new fork in ebx
  3029                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3030 000024D6 FA                  <2> 	cli
  3031 000024D7 60                  <2> 	pushad
  3032 000024D8 8925[A5250000]      <2> 	mov [.espold], esp
  3033 000024DE C605[675E0000]01    <2> 	mov byte [threadson], 1
  3034 000024E5 8B1D[685E0000]      <2> 	mov ebx, [currentthread]
  3035 000024EB C1E302              <2> 	shl ebx, 2
  3036 000024EE 89A3[81110400]      <2> 	mov [threadlist + ebx], esp
  3037 000024F4 C1EB02              <2> 	shr ebx, 2
  3038 000024F7 81FB00000000        <2> 	cmp ebx, 0
  3039 000024FD 750C                <2> 	jne .simplestack
  3040 000024FF BB[64770300]        <2> 	mov ebx, stackend
  3041 00002504 29E3                <2> 	sub ebx, esp
  3042 00002506 E90B000000          <2> 	jmp .stackcalcdone
  3043                              <2> .simplestack:
  3044 0000250B C1E30A              <2> 	shl ebx, 10
  3045 0000250E 81C3[81250400]      <2> 	add ebx, stack1
  3046 00002514 29E3                <2> 	sub ebx, esp
  3047                              <2> .stackcalcdone:
  3048 00002516 29DC                <2> 	sub esp, ebx
  3049 00002518 81C4[81250400]      <2> 	add esp, stack1
  3050 0000251E 8B1D[635E0000]      <2> 	mov ebx, [lastthread]
  3051 00002524 C1E308              <2> 	shl ebx, 8
  3052 00002527 01DC                <2> 	add esp, ebx
  3053 00002529 891D[A9250000]      <2> 	mov [.stackend], ebx
  3054                              <2> 
  3055 0000252F 89E5                <2> 	mov ebp, esp
  3056 00002531 8B25[A5250000]      <2> 	mov esp, [.espold]
  3057                              <2> 
  3058 00002537 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3059 0000253A 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3060                              <2> 
  3061 0000253E 31DB                <2> 	xor ebx, ebx
  3062                              <2> .stackcopy:
  3063 00002540 668B041C            <2> 	mov ax, [esp + ebx]
  3064 00002544 6689441D00          <2> 	mov [ebp + ebx], ax
  3065 00002549 81C302000000        <2> 	add ebx, 2
  3066 0000254F 3B1D[A9250000]      <2> 	cmp ebx, [.stackend]
  3067 00002555 72E9                <2> 	jb .stackcopy
  3068                              <2> 
  3069 00002557 31C0                <2> 	xor eax, eax
  3070 00002559 668CC8              <2> 	mov ax, cs
  3071 0000255C 89C2                <2> 	mov edx, eax
  3072 0000255E 8B4C2428            <2> 	mov ecx, [esp + 40]
  3073 00002562 81C900020000        <2> 	or ecx, 0x200
  3074                              <2> 	
  3075 00002568 81FE00000000        <2> 	cmp esi, 0
  3076 0000256E 7504                <2> 	jne .nochangestack
  3077 00002570 8B742420            <2> 	mov esi, [esp + 32]
  3078                              <2> .nochangestack:
  3079 00002574 89F0                <2> 	mov eax, esi
  3080 00002576 89EC                <2> 	mov esp, ebp
  3081                              <2> 
  3082 00002578 89442420            <2> 	mov [esp + 32], eax
  3083 0000257C 89542424            <2> 	mov [esp + 36], edx
  3084 00002580 894C2428            <2> 	mov [esp + 40], ecx
  3085                              <2> 
  3086 00002584 8B1D[635E0000]      <2> 	mov ebx, [lastthread]
  3087 0000258A 89A3[81110400]      <2> 	mov [threadlist + ebx], esp
  3088 00002590 81C304000000        <2> 	add ebx, 4
  3089 00002596 891D[635E0000]      <2> 	mov [lastthread], ebx
  3090 0000259C 8B25[A5250000]      <2> 	mov esp, [.espold]
  3091 000025A2 61                  <2> 	popad
  3092 000025A3 FB                  <2> 	sti
  3093 000025A4 CF                  <2> 	iret
  3094                              <2> 
  3095 000025A5 00000000            <2> .espold dd 0
  3096 000025A9 00000000            <2> .stackend dd 0
  3097                              <1> %endif
  3098                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3099                              <2> gettime:
  3100 000025AD A1[43020000]        <2> 	mov eax, [timeseconds]
  3101 000025B2 8B1D[47020000]      <2> 	mov ebx, [timenanoseconds]
  3102 000025B8 89D9                <2> 	mov ecx, ebx
  3103 000025BA C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3104 000025BD E9C9DCFFFF          <2> 	jmp timerinterrupt
  3105                              <1> 	%include 'source/interrupts/13_settime.asm'
  3106                              <2> settime:
  3107 000025C2 A3[43020000]        <2> 	mov [timeseconds], eax
  3108 000025C7 891D[47020000]      <2> 	mov [timenanoseconds], ebx
  3109 000025CD E9B9DCFFFF          <2> 	jmp timerinterrupt
  3110                              <2> 	
  3111                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3112                              <2> runcmd:
  3113 000025D2 BF[48920300]        <2> 	mov edi, buftxt
  3114                              <2> cpcmd:
  3115 000025D7 8A06                <2> 	mov al, [esi]
  3116 000025D9 8807                <2> 	mov [edi], al
  3117 000025DB 46                  <2> 	inc esi
  3118 000025DC 47                  <2> 	inc edi
  3119 000025DD 3C00                <2> 	cmp al, 0
  3120 000025DF 75F6                <2> 	jne cpcmd
  3121 000025E1 E87D060000          <2> 	call run
  3122 000025E6 CF                  <2> 	iret
  3123                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3124                              <2> proginfo:
  3125                              <2> 	;mov ebx, variables
  3126 000025E7 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  3127 000025ED 89F7                <2> 	mov edi, esi
  3128 000025EF 31C9                <2> 	xor ecx, ecx
  3129                              <2> getcommandzeroes:
  3130 000025F1 8A07                <2> 	mov al, [edi]
  3131 000025F3 47                  <2> 	inc edi
  3132 000025F4 3C3B                <2> 	cmp al, ';'
  3133 000025F6 740E                <2> 	je nomorezeroes
  3134 000025F8 3C00                <2> 	cmp al, 0
  3135 000025FA 740A                <2> 	je nomorezeroes
  3136 000025FC 3C20                <2> 	cmp al, ' '
  3137 000025FE 75F1                <2> 	jne getcommandzeroes
  3138 00002600 41                  <2> 	inc ecx
  3139 00002601 E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3140                              <2> nomorezeroes:
  3141 00002606 41                  <2> 	inc ecx
  3142 00002607 4F                  <2> 	dec edi
  3143 00002608 8B1D[D47D0300]      <2> 	mov ebx, [uid]
  3144 0000260E 8B15[685E0000]      <2> 	mov edx, [currentthread]
  3145 00002614 CF                  <2> 	iret
  3146                              <2> 	
  3147                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3148                              <2> hooksig: ;hook code in ESI to signal in AL
  3149 00002615 3C00                <2> 	cmp al, 0
  3150 00002617 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3151                              <2> ;	xor ebx, ebx
  3152                              <2> ;	mov bl, al
  3153                              <2> ;	shl bl, 2
  3154 00002619 BF[C4770300]        <2> 	mov edi, sigtable
  3155 0000261E 8937                <2> 	mov [edi], esi
  3156                              <2> .quit:
  3157 00002620 E966DCFFFF          <2> 	jmp timerinterrupt
  3158                              <1> %ifdef gui.included
  3159                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3160                              <1> %endif
  3161                              <1> %ifdef sound.included
  3162                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3163                              <2> soundint:
  3164 00002625 E961DCFFFF          <2> 	jmp timerinterrupt
  3165                              <1> %endif
  3166                              <1> %ifdef network.included
  3167                              <1> 	%include 'source/interrupts/19_netint.asm'
  3168                              <2> netint:
  3169 0000262A E95CDCFFFF          <2> 	jmp timerinterrupt
  3170                              <1> %endif
  3171                              <1> 
  3172                              <1> termcopy:
  3173                              <1> %ifdef io.serial
  3174                              <1> 	ret
  3175                              <1> %else
  3176                              <1> %ifdef terminal.vsync
  3177                              <1> 	mov byte [termcopyneeded], 1
  3178                              <1> 	ret
  3179                              <1> %else
  3180 0000262F E80A000000          <1> 	call newtermcopy
  3181 00002634 C3                  <1> 	ret
  3182                              <1> %endif
  3183 00002635 00                  <1> 	termcopyneeded db 0
  3184 00002636 00000000            <1> 	termcursorpos dd 0
  3185 0000263A 00000000            <1> 	removedvideo dd 0
  3186                              <1> newtermcopy:
  3187 0000263E 60                  <1> 	pusha
  3188 0000263F BF[5D960300]        <1> 	mov edi, videobuf
  3189 00002644 31DB                <1> 	xor ebx, ebx
  3190 00002646 881D[35260000]      <1> 	mov [termcopyneeded], bl
  3191 0000264C 8B1D[9C240000]      <1> 	mov ebx, [videobufpos]
  3192 00002652 01DF                <1> 	add edi, ebx
  3193 00002654 893D[36260000]      <1> 	mov [termcursorpos], edi
  3194 0000265A E8C7000000          <1> 	call switchtermcursor
  3195 0000265F 803D[43630000]00    <1> 	cmp byte [guion], 0
  3196 00002666 0F8405000000        <1> 	je near nowincopy
  3197                              <1> %ifdef gui.included
  3198                              <1> 	mov byte [mouseselecton], 0
  3199                              <1> 	mov byte [termcopyon], 1
  3200                              <1> 	cmp byte [termguion], 1
  3201                              <1> 	je near windowvideocopy
  3202                              <1> %endif
  3203 0000266C E9AE000000          <1> 	jmp nocopytermatall
  3204                              <1> nowincopy:
  3205 00002671 BE00000A00          <1> 	mov esi, 0xA0000
  3206 00002676 A1[23020000]        <1> 	mov eax, [basecache]
  3207 0000267B C1E004              <1> 	shl eax, 4
  3208 0000267E 29C6                <1> 	sub esi, eax
  3209 00002680 BF[5D960300]        <1> 	mov edi, videobuf
  3210 00002685 31C9                <1> 	xor ecx, ecx
  3211 00002687 668B0D[A2240000]    <1> 	mov cx, [charxy]
  3212                              <1> nowincopy2:
  3213 0000268E 8B07                <1> 	mov eax, [edi]
  3214 00002690 81C780250000        <1> 	add edi, (videobuf2 - videobuf)
  3215 00002696 8B1F                <1> 	mov ebx, [edi]
  3216 00002698 8907                <1> 	mov [edi], eax
  3217 0000269A 81EF80250000        <1> 	sub edi, (videobuf2 - videobuf)
  3218 000026A0 81C702000000        <1> 	add edi, 2
  3219 000026A6 39D8                <1> 	cmp eax, ebx
  3220 000026A8 744B                <1> 	je nopresentwinfont
  3221 000026AA 81EF02000000        <1> 	sub edi, 2
  3222 000026B0 BD[9D650000]        <1> 	mov ebp, fonts
  3223 000026B5 31C0                <1> 	xor eax, eax
  3224 000026B7 668B07              <1> 	mov ax, [edi]
  3225 000026BA C1E004              <1> 	shl eax, 4
  3226 000026BD 01C5                <1> 	add ebp, eax
  3227 000026BF 81C702000000        <1> 	add edi, 2
  3228 000026C5 668B1F              <1> 	mov bx, [edi]
  3229 000026C8 31D2                <1> 	xor edx, edx
  3230 000026CA 8A15[A2240000]      <1> 	mov dl, [charxy]
  3231 000026D0 C1C110              <1> 	rol ecx, 16
  3232 000026D3 B110                <1> 	mov cl, 16
  3233                              <1> nowinfont:
  3234 000026D5 8A4500              <1> 	mov al, [ebp]
  3235 000026D8 D0C8                <1> 	ror al, 1
  3236 000026DA 80FB80              <1> 	cmp bl, 0x80
  3237 000026DD 7202                <1> 	jb notnotfont
  3238 000026DF F6D0                <1> 	not al
  3239                              <1> notnotfont:
  3240 000026E1 8806                <1> 	mov [esi], al
  3241 000026E3 01D6                <1> 	add esi, edx
  3242 000026E5 45                  <1> 	inc ebp
  3243 000026E6 FEC9                <1> 	dec cl
  3244 000026E8 80F900              <1> 	cmp cl, 0
  3245 000026EB 75E8                <1> 	jne nowinfont
  3246 000026ED C1E204              <1> 	shl edx, 4
  3247 000026F0 29D6                <1> 	sub esi, edx
  3248 000026F2 C1C110              <1> 	rol ecx, 16
  3249                              <1> nopresentwinfont:
  3250 000026F5 81C702000000        <1> 	add edi, 2
  3251 000026FB 46                  <1> 	inc esi
  3252 000026FC FEC9                <1> 	dec cl
  3253 000026FE 80F900              <1> 	cmp cl, 0
  3254 00002701 758B                <1> 	jne nowincopy2
  3255 00002703 8A0D[A2240000]      <1> 	mov cl, [charxy]
  3256 00002709 31D2                <1> 	xor edx, edx
  3257 0000270B 88CA                <1> 	mov dl, cl
  3258 0000270D 29D6                <1> 	sub esi, edx
  3259 0000270F C1E204              <1> 	shl edx, 4
  3260 00002712 01D6                <1> 	add esi, edx
  3261 00002714 FECD                <1> 	dec ch
  3262 00002716 80FD00              <1> 	cmp ch, 0
  3263 00002719 0F856FFFFFFF        <1> 	jne nowincopy2
  3264                              <1> nocopytermatall:
  3265 0000271F E802000000          <1> 	call switchtermcursor
  3266 00002724 61                  <1> 	popa
  3267 00002725 C3                  <1> 	ret
  3268                              <1> 	
  3269                              <1> switchtermcursor:
  3270 00002726 8B3D[36260000]      <1> 	mov edi, [termcursorpos]
  3271 0000272C 668B4702            <1> 	mov ax, [edi + 2]
  3272 00002730 668B1F              <1> 	mov bx, [edi]
  3273 00002733 663D8000            <1> 	cmp ax, 0x80
  3274 00002737 7209                <1> 	jb movlargecursorterm
  3275 00002739 66B80700            <1> 	mov ax, 7
  3276 0000273D E904000000          <1> 	jmp movedcursorterm
  3277                              <1> movlargecursorterm:
  3278 00002742 66B8F000            <1> 	mov ax, 0xF0
  3279                              <1> movedcursorterm:
  3280 00002746 66894702            <1> 	mov [edi + 2], ax
  3281 0000274A 6681FB0000          <1> 	cmp bx, 0
  3282 0000274F 7507                <1> 	jne fixednocursorterm
  3283 00002751 66BB2000            <1> 	mov bx, ' '
  3284 00002755 66891F              <1> 	mov [edi], bx
  3285                              <1> fixednocursorterm:
  3286 00002758 C3                  <1> 	ret
  3287                              <1> %endif
  3288                                      %include "source/dosints.asm"
  3289                              <1> int20h:
  3290 00002759 66B8004C            <1> mov ax, 0x4C00
  3291                              <1> int21h:
  3292                              <1> dostosolleros:
  3293 0000275D 6650                <1> 	push ax
  3294 0000275F 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3295 00002763 8ED8                <1> 	mov ds, ax
  3296 00002765 8EC0                <1> 	mov es, ax
  3297 00002767 8EE0                <1> 	mov fs, ax
  3298 00002769 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3299 0000276D 8EE8                <1> 	mov gs, ax
  3300 0000276F 6658                <1> 	pop ax
  3301 00002771 9C                  <1> 	pushf
  3302 00002772 60                  <1> 	pusha
  3303 00002773 80FC01              <1> 	cmp ah, 1
  3304 00002776 0F8449000000        <1> 	je near dosgchar
  3305 0000277C 80FC02              <1> 	cmp ah, 2
  3306 0000277F 0F844A000000        <1> 	je near doswchar
  3307 00002785 80FC09              <1> 	cmp ah, 9
  3308 00002788 0F8451000000        <1> 	je near dosprintstr
  3309 0000278E 80FC0A              <1> 	cmp ah, 0xA
  3310 00002791 0F8463000000        <1> 	je near dosgetstr
  3311 00002797 80FC2B              <1> 	cmp ah, 0x2B
  3312 0000279A 0F84A2000000        <1> 	je near dosgetdate
  3313 000027A0 80FC2C              <1> 	cmp ah, 0x2C
  3314 000027A3 0F84BC000000        <1> 	je near dosgettime
  3315 000027A9 80FC4C              <1> 	cmp ah, 0x4C
  3316 000027AC 0F84D1000000        <1> 	je near dosexit
  3317                              <1> backtodos:
  3318 000027B2 61                  <1> 	popa
  3319 000027B3 9D                  <1> 	popf
  3320 000027B4 6650                <1> 	push ax
  3321 000027B6 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3322 000027BA 8ED8                <1> 	mov ds, ax
  3323 000027BC 8EC0                <1> 	mov es, ax
  3324 000027BE 8EE0                <1> 	mov fs, ax
  3325 000027C0 8EE8                <1> 	mov gs, ax
  3326 000027C2 6658                <1> 	pop ax
  3327 000027C4 CF                  <1> 	iret
  3328                              <1> 
  3329                              <1> dosgchar:
  3330 000027C5 E846FAFFFF          <1> 	call getchar
  3331 000027CA E9E3FFFFFF          <1> 	jmp backtodos
  3332                              <1> 	
  3333                              <1> doswchar:
  3334 000027CF 88D0                <1> 	mov al, dl
  3335 000027D1 30E4                <1> 	xor ah, ah
  3336 000027D3 B307                <1> 	mov bl, 7
  3337 000027D5 E8B2FAFFFF          <1> 	call prcharint
  3338 000027DA E9D3FFFFFF          <1> 	jmp backtodos
  3339                              <1> 	
  3340                              <1> dosprintstr:
  3341 000027DF 31F6                <1> 	xor esi, esi
  3342 000027E1 6689D6              <1> 	mov si, dx
  3343 000027E4 81C600004000        <1> 	add esi, dosprogloc
  3344 000027EA 66B82400            <1> 	mov ax, "$"
  3345 000027EE B307                <1> 	mov bl, 7
  3346 000027F0 E809F4FFFF          <1> 	call printint
  3347 000027F5 E9B8FFFFFF          <1> 	jmp backtodos
  3348                              <1> 	
  3349                              <1> dosgetstr:
  3350 000027FA 31F6                <1> 	xor esi, esi
  3351 000027FC 6689D6              <1> 	mov si, dx
  3352 000027FF 81C600004000        <1> 	add esi, dosprogloc
  3353 00002805 B900000000          <1> 	mov ecx, 0
  3354 0000280A 8A0E                <1> 	mov cl, [esi]
  3355 0000280C 81C602000000        <1> 	add esi, 2
  3356 00002812 89F7                <1> 	mov edi, esi
  3357 00002814 8935[3E280000]      <1> 	mov [stringstart], esi
  3358 0000281A 01CF                <1> 	add edi, ecx
  3359 0000281C B00A                <1> 	mov al, 10
  3360 0000281E B307                <1> 	mov bl, 7
  3361 00002820 E81CF5FFFF          <1> 	call rdprintdos
  3362 00002825 89F1                <1> 	mov ecx, esi
  3363 00002827 2B0D[3E280000]      <1> 	sub ecx, [stringstart]
  3364 0000282D 8B35[3E280000]      <1> 	mov esi, [stringstart]
  3365 00002833 884EFF              <1> 	mov [esi - 1], cl
  3366 00002836 884EFE              <1> 	mov [esi - 2], cl
  3367 00002839 E974FFFFFF          <1> 	jmp backtodos
  3368 0000283E 00000000            <1> stringstart dd 0
  3369                              <1> 
  3370                              <1> dosgetdate:
  3371 00002842 E848160000          <1> 	call time
  3372 00002847 8A0D[A6410000]      <1> 	mov cl, [RTCtimeYear]
  3373 0000284D B500                <1> 	mov ch, 0
  3374 0000284F 6681C1D007          <1> 	add cx, 2000
  3375 00002854 8A35[A5410000]      <1> 	mov dh, [RTCtimeMonth]
  3376 0000285A 8A15[A4410000]      <1> 	mov dl, [RTCtimeDay]
  3377 00002860 E94DFFFFFF          <1> 	jmp backtodos
  3378                              <1> 
  3379                              <1> dosgettime:
  3380 00002865 E825160000          <1> 	call time
  3381 0000286A 8A2D[A3410000]      <1> 	mov ch, [RTCtimeHour]
  3382 00002870 8A0D[A2410000]      <1> 	mov cl, [RTCtimeMinute]
  3383 00002876 8A35[A1410000]      <1> 	mov dh, [RTCtimeSecond]
  3384 0000287C B200                <1> 	mov dl, 0
  3385 0000287E E92FFFFFFF          <1> 	jmp backtodos
  3386                              <1> 	
  3387                              <1> dosexit:
  3388 00002883 BE[1E630000]        <1> 	mov esi, line
  3389 00002888 E86AF3FFFF          <1> 	call print
  3390 0000288D 61                  <1> 	popa
  3391 0000288E 9D                  <1> 	popf
  3392 0000288F 8B25[C87B0300]      <1> 	mov esp, [previousstack]
  3393 00002895 31DB                <1> 	xor ebx, ebx
  3394 00002897 88C3                <1> 	mov bl, al
  3395 00002899 80FB00              <1> 	cmp bl, 0
  3396 0000289C 0F85E0F2FFFF        <1> 	jne near exitprog.error
  3397 000028A2 C3                  <1> 	ret
  3398                                      %include "source/solleros.asm"
  3399                              <1> 	;SOLLEROS.ASM
  3400                              <1> os:
  3401                              <1> setdefenv:
  3402 000028A3 C605[D47B0300]2F    <1> 	mov byte [currentfolder], '/'
  3403 000028AA C705[D07B0300]0100- <1> 	mov dword [currentfolderloc], 1
  3404 000028B2 0000                <1>
  3405 000028B4 E8F0F3FFFF          <1> 	call clear
  3406                              <1> 	
  3407                              <1> bootfilecheck:
  3408 000028B9 803D[D87D0300]01    <1> 	cmp byte [ranboot], 1
  3409 000028C0 0F8421000000        <1> 	je near nobootfile
  3410                              <1> 	%ifdef hardware.automatic
  3411 000028C6 E8802F0000          <1> 		call initializelater ;Initialize components that have debug messages
  3412                              <1> 	%endif
  3413                              <1> 	%ifdef disk.none
  3414                              <1> 	%else
  3415 000028CB BF[DD620000]        <1> 		mov edi, bootfilename
  3416 000028D0 BE00004000          <1> 		mov esi, 0x400000
  3417 000028D5 E8C8330000          <1> 		call loadfile
  3418 000028DA 81FA00000000        <1> 		cmp edx, 0
  3419 000028E0 7505                <1> 		jne nobootfile
  3420 000028E2 E8750E0000          <1> 		call progbatchfound
  3421                              <1> 	%endif
  3422                              <1> nobootfile:	
  3423 000028E7 C605[D87D0300]01    <1> 	mov byte [ranboot], 1
  3424                              <1> 
  3425 000028EE BE[03000000]        <1> 	mov esi, signature
  3426                              <1> .sigcopyloop:	;this prevents an odd error
  3427 000028F3 658A06              <1> 	mov al, [gs:esi]
  3428 000028F6 8806                <1> 	mov [esi], al
  3429 000028F8 46                  <1> 	inc esi
  3430 000028F9 81FE[11000000]      <1> 	cmp esi, signatureend
  3431 000028FF 72F2                <1> 	jb .sigcopyloop
  3432                              <1> 	
  3433 00002901 BE[03000000]        <1> 	mov esi, signature
  3434 00002906 E8ECF2FFFF          <1> 	call print
  3435 0000290B 8B0D[0D000000]      <1> 	mov ecx, [signatureend - 4]
  3436 00002911 E841070000          <1> 	call showdec
  3437 00002916 BE[1E630000]        <1> 	mov esi, line
  3438 0000291B E8D7F2FFFF          <1> 	call print
  3439 00002920 BE[FA620000]        <1> 	mov esi, userask
  3440 00002925 E8CDF2FFFF          <1> 	call print
  3441                              <1> 
  3442                              <1> usercheck:
  3443 0000292A BE[48920300]        <1> 	mov esi, buftxt
  3444 0000292F BF[48960300]        <1> 	mov edi, buftxtend
  3445 00002934 B00A                <1> 	mov al, 10
  3446 00002936 E8F2F3FFFF          <1> 	call rdprint
  3447 0000293B 56                  <1> 	push esi
  3448 0000293C BE[04630000]        <1> 	mov esi, pwdask
  3449 00002941 E8B1F2FFFF          <1> 	call print
  3450 00002946 5E                  <1> 	pop esi
  3451 00002947 46                  <1> 	inc esi
  3452 00002948 8935[492A0000]      <1> 	mov [esipass], esi
  3453                              <1> passcheck:
  3454 0000294E E8BDF8FFFF          <1> 	call getchar
  3455 00002953 3C0A                <1> 	cmp al, 10
  3456 00002955 0F843E000000        <1> 	je near gotpass
  3457 0000295B 3C08                <1> 	cmp al, 8
  3458 0000295D 0F8415000000        <1> 	je near backpass
  3459 00002963 8806                <1> 	mov [esi], al
  3460 00002965 46                  <1> 	inc esi
  3461 00002966 30E4                <1> 	xor ah, ah
  3462 00002968 B02A                <1> 	mov al, "*"
  3463 0000296A E81DF9FFFF          <1> 	call prcharint
  3464 0000296F E9DAFFFFFF          <1> 	jmp passcheck
  3465 00002974 08200800            <1> backcursor2 db 8," ",8,0
  3466                              <1> backpass:
  3467 00002978 3B35[492A0000]      <1> 	cmp esi, [esipass]
  3468 0000297E 0F84CAFFFFFF        <1> 	je near passcheck
  3469 00002984 4E                  <1> 	dec esi
  3470 00002985 C60600              <1> 	mov byte [esi], 0
  3471 00002988 56                  <1> 	push esi
  3472 00002989 BE[74290000]        <1> 	mov esi, backcursor2
  3473 0000298E E864F2FFFF          <1> 	call print
  3474 00002993 5E                  <1> 	pop esi
  3475 00002994 E9B5FFFFFF          <1> 	jmp passcheck
  3476                              <1> gotpass:
  3477 00002999 B00A                <1> 	mov al, 10
  3478 0000299B E8ECF8FFFF          <1> 	call prcharint
  3479 000029A0 30C0                <1> 	xor al, al
  3480 000029A2 31C9                <1> 	xor ecx, ecx
  3481 000029A4 8806                <1> 	mov [esi], al
  3482 000029A6 BB[20630000]        <1> 	mov ebx, userlst
  3483                              <1> userfind:
  3484 000029AB BE[48920300]        <1> 	mov esi, buftxt
  3485 000029B0 8A06                <1> 	mov al, [esi]
  3486 000029B2 3C00                <1> 	cmp al, 0
  3487 000029B4 0F84E9FEFFFF        <1> 	je near os
  3488 000029BA 891D[4D2A0000]      <1> 	mov [usercache], ebx
  3489 000029C0 E87E030000          <1> 	call tester
  3490 000029C5 3C01                <1> 	cmp al, 1
  3491 000029C7 7419                <1> 	je pwdtest
  3492 000029C9 41                  <1> 	inc ecx
  3493                              <1> nxtuser:
  3494 000029CA 8A03                <1> 	mov al, [ebx]
  3495 000029CC 43                  <1> 	inc ebx
  3496 000029CD 3C00                <1> 	cmp al, 0
  3497 000029CF 75F9                <1> 	jne nxtuser
  3498 000029D1 81FB[43630000]      <1> 	cmp ebx, userlstend
  3499 000029D7 0F83C6FEFFFF        <1> 	jae near os
  3500 000029DD E9C9FFFFFF          <1> 	jmp userfind
  3501                              <1> pwdtest:
  3502 000029E2 46                  <1> 	inc esi
  3503 000029E3 43                  <1> 	inc ebx
  3504 000029E4 E85A030000          <1> 	call tester
  3505 000029E9 3C01                <1> 	cmp al, 1
  3506 000029EB 7405                <1> 	je pwdrgt
  3507 000029ED E9D8FFFFFF          <1> 	jmp nxtuser
  3508                              <1> pwdrgt:
  3509 000029F2 D1E9                <1> 	shr ecx, 1
  3510 000029F4 890D[D47D0300]      <1> 	mov [uid], ecx
  3511 000029FA E8AAF2FFFF          <1> 	call clear
  3512 000029FF 31C9                <1> 	xor ecx, ecx
  3513 00002A01 41                  <1> 	inc ecx
  3514 00002A02 890D[61E10300]      <1> 	mov [commandbufpos], ecx
  3515                              <1> returnfromexp:
  3516 00002A08 66B90002            <1> 	mov cx, 200h
  3517 00002A0C BE[48920300]        <1> 	mov esi, buftxt
  3518 00002A11 8935[3F2D0000]      <1> 	mov [currentcommandloc], esi
  3519 00002A17 E825000000          <1> 	call bufclr
  3520                              <1> clearolddata:
  3521 00002A1C 31C0                <1> 	xor eax, eax
  3522 00002A1E A2[D97D0300]        <1> 	mov [IFON], al
  3523 00002A23 A2[DA7D0300]        <1> 	mov [IFTRUE], al
  3524 00002A28 A2[427E0300]        <1> 	mov [BATCHISON], al
  3525 00002A2D A3[3E7E0300]        <1> 	mov [BATCHPOS], eax
  3526 00002A32 A2[437E0300]        <1> 	mov [LOOPON], al
  3527 00002A37 A3[447E0300]        <1> 	mov [LOOPPOS], eax
  3528 00002A3C E939000000          <1> 	jmp nwcmd
  3529                              <1> bufclr:	
  3530 00002A41 30C0                <1> 	xor al, al
  3531 00002A43 8806                <1> 	mov [esi], al
  3532 00002A45 46                  <1> 	inc esi
  3533 00002A46 E2F9                <1> 	loop bufclr
  3534 00002A48 C3                  <1> 	ret
  3535                              <1> 
  3536 00002A49 00000000            <1> esipass dd 0
  3537 00002A4D [20630000]          <1> usercache dd userlst
  3538                              <1> 	
  3539                              <1> buftxtclear:
  3540 00002A51 30C0                <1> 	xor al, al
  3541 00002A53 BE[48920300]        <1> 	mov esi, buftxt
  3542 00002A58 81FE[48960300]      <1> clearbuftxt: cmp esi, buf2
  3543 00002A5E 7314                <1> 	jae retbufclr
  3544 00002A60 8806                <1> 	mov [esi], al
  3545 00002A62 46                  <1> 	inc esi
  3546 00002A63 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3547                              <1> 
  3548 00002A68 39DE                <1> clearitbuf: cmp esi, ebx
  3549 00002A6A 7308                <1> 	jae retbufclr
  3550 00002A6C 8806                <1> 	mov [esi], al
  3551 00002A6E 46                  <1> 	inc esi
  3552 00002A6F E9F4FFFFFF          <1> 	jmp clearitbuf
  3553 00002A74 C3                  <1> retbufclr: ret
  3554                              <1> 
  3555 00002A75 E900000000          <1> full:	jmp nwcmd
  3556                              <1> 
  3557                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3558                              <1> nwcmd:
  3559 00002A7A FB                  <1> 	sti
  3560 00002A7B 31C0                <1> 	xor eax, eax
  3561 00002A7D 3905[5B2C0000]      <1> 	cmp [nextcommandloc], eax
  3562 00002A83 7416                <1> 	je nomultiplecommand
  3563 00002A85 8B35[5B2C0000]      <1> 	mov esi, [nextcommandloc]
  3564 00002A8B 8935[5F2C0000]      <1> 	mov [thiscommandloc], esi
  3565 00002A91 E8D2010000          <1> 	call fixvariables
  3566 00002A96 E9DFFFFFFF          <1> 	jmp nwcmd
  3567                              <1> nomultiplecommand:
  3568 00002A9B A3[5F2C0000]        <1> 	mov [thiscommandloc], eax
  3569 00002AA0 3805[675E0000]      <1> 	cmp [threadson], al
  3570 00002AA6 7405                <1> 	je noclinwcmd
  3571 00002AA8 A2[675E0000]        <1> 	mov [threadson], al
  3572                              <1> noclinwcmd:
  3573 00002AAD B001                <1> 	mov al, 1
  3574 00002AAF 3805[427E0300]      <1> 	cmp [BATCHISON], al
  3575 00002AB5 7501                <1> 	jne cancel
  3576 00002AB7 C3                  <1> 	ret
  3577 00002AB8 30C0                <1> cancel:	xor al, al
  3578 00002ABA A2[D97D0300]        <1> 	mov [IFON], al
  3579 00002ABF A2[427E0300]        <1> 	mov [BATCHISON], al
  3580 00002AC4 B05B                <1> 	mov al, '['
  3581 00002AC6 66BB0700            <1> 	mov bx, 7
  3582 00002ACA E8D4F7FFFF          <1> 	call prcharq
  3583 00002ACF 8B35[4D2A0000]      <1> 	mov esi, [usercache]
  3584 00002AD5 E8FEF0FFFF          <1> 	call printquiet
  3585 00002ADA BE[0E630000]        <1> 	mov esi, computer
  3586 00002ADF E8F4F0FFFF          <1> 	call printquiet
  3587 00002AE4 BE[D47B0300]        <1> 	mov esi, currentfolder
  3588 00002AE9 0335[CC7B0300]      <1> 	add esi, [lastfolderloc]
  3589 00002AEF E8E4F0FFFF          <1> 	call printquiet
  3590 00002AF4 BE[19630000]        <1> 	mov esi, endprompt
  3591 00002AF9 E8F9F0FFFF          <1> 	call print
  3592 00002AFE E84EFFFFFF          <1> 	call buftxtclear
  3593 00002B03 BE[48920300]        <1> 	mov esi, buftxt
  3594 00002B08 C605[F9210000]01    <1> 	mov byte [commandedit], 1
  3595 00002B0F B00A                <1> 	mov al, 10
  3596 00002B11 66BB0700            <1> 	mov bx, 7
  3597 00002B15 BF[48960300]        <1> 	mov edi, buftxtend
  3598 00002B1A E80EF2FFFF          <1> 	call rdprint
  3599 00002B1F C605[F9210000]00    <1> 	mov byte [commandedit], 0
  3600 00002B26 803D[48920300]00    <1> 	cmp byte [buftxt], 0
  3601 00002B2D 0F8447FFFFFF        <1> 	je near nwcmd
  3602 00002B33 8B35[61E10300]      <1> gotcmd:	mov esi, [commandbufpos]
  3603 00002B39 8935[5DE10300]      <1> 	mov [lastcommandpos], esi
  3604 00002B3F FF05[69E10300]      <1> 	inc dword [commandsentered]
  3605 00002B45 BF[48920300]        <1> 	mov edi, buftxt
  3606 00002B4A 81C6[6DE10300]      <1> 	add esi, commandbuf
  3607 00002B50 81FE[6DF10300]      <1> 	cmp esi, commandbufend
  3608 00002B56 7605                <1> 	jbe copycommand
  3609 00002B58 BE[6DE10300]        <1> 	mov esi, commandbuf
  3610                              <1> copycommand:
  3611 00002B5D 8A07                <1> 	mov al, [edi]
  3612 00002B5F 8806                <1> 	mov [esi], al
  3613 00002B61 47                  <1> 	inc edi
  3614 00002B62 46                  <1> 	inc esi
  3615 00002B63 3C00                <1> 	cmp al, 0
  3616 00002B65 7412                <1> 	je donecopy
  3617 00002B67 81FE[6DF10300]      <1> 	cmp esi, commandbufend
  3618 00002B6D 76EE                <1> 	jbe copycommand
  3619 00002B6F BE[6DE10300]        <1> 	mov esi, commandbuf
  3620 00002B74 E9E4FFFFFF          <1> 	jmp copycommand
  3621                              <1> donecopy:
  3622 00002B79 81EE[6DE10300]      <1> 	sub esi, commandbuf
  3623 00002B7F 8935[61E10300]      <1> 	mov [commandbufpos], esi
  3624 00002B85 E8D9000000          <1> 	call run
  3625 00002B8A E9EBFEFFFF          <1> 	jmp nwcmd
  3626                              <1> 
  3627 00002B8F E8BDFEFFFF          <1> input:	call buftxtclear
  3628 00002B94 BE[48920300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3629 00002B99 BF[48960300]        <1> 	mov edi, buftxtend
  3630 00002B9E B00A                <1> stdin:	mov al, 10
  3631 00002BA0 B307                <1> 	mov bl, 7
  3632 00002BA2 E886F1FFFF          <1> 	call rdprint
  3633 00002BA7 C3                  <1> 	ret
  3634                              <1> 
  3635                              <1> replacevariable:
  3636 00002BA8 8A4601              <1> 	mov al, [esi + 1]
  3637 00002BAB C64601FF            <1> 	mov byte [esi + 1], 255
  3638 00002BAF 3C24                <1> 	cmp al, "$"
  3639 00002BB1 0F84B1000000        <1> 	je near fixvariables
  3640 00002BB7 884601              <1> 	mov [esi + 1], al
  3641 00002BBA 56                  <1> 	push esi
  3642 00002BBB 81EE[48920300]      <1> 	sub esi, buftxt
  3643 00002BC1 89F7                <1> 	mov edi, esi
  3644 00002BC3 81C6[48920300]      <1> 	add esi, buftxt
  3645 00002BC9 47                  <1> 	inc edi
  3646 00002BCA BB[487E0300]        <1> 	mov ebx, variables
  3647 00002BCF E8AB190000          <1> 	call nxtvrech
  3648 00002BD4 89F7                <1> 	mov edi, esi
  3649 00002BD6 31DB                <1> 	xor ebx, ebx
  3650 00002BD8 4E                  <1> 	dec esi
  3651                              <1> findvarname:
  3652 00002BD9 4E                  <1> 	dec esi
  3653 00002BDA 8A06                <1> 	mov al, [esi]
  3654 00002BDC 43                  <1> 	inc ebx
  3655 00002BDD 3C04                <1> 	cmp al, 4
  3656 00002BDF 75F8                <1> 	jne findvarname
  3657 00002BE1 5E                  <1> 	pop esi
  3658                              <1> replacevarloop:
  3659 00002BE2 8A07                <1> 	mov al, [edi]
  3660 00002BE4 3C00                <1> 	cmp al, 0
  3661 00002BE6 0F8416000000        <1> 	je near compressbuftxt
  3662 00002BEC 81FB00000000        <1> 	cmp ebx, 0
  3663 00002BF2 0F8419000000        <1> 	je near expandbuftxt
  3664 00002BF8 8806                <1> 	mov [esi], al
  3665 00002BFA 4B                  <1> 	dec ebx
  3666 00002BFB 46                  <1> 	inc esi
  3667 00002BFC 47                  <1> 	inc edi
  3668 00002BFD E9E0FFFFFF          <1> 	jmp replacevarloop
  3669                              <1> compressbuftxt:
  3670 00002C02 8A041E              <1> 	mov al, [esi + ebx]
  3671 00002C05 8806                <1> 	mov [esi], al
  3672 00002C07 46                  <1> 	inc esi
  3673 00002C08 3C00                <1> 	cmp al, 0
  3674 00002C0A 75F6                <1> 	jne compressbuftxt
  3675 00002C0C E957000000          <1> 	jmp fixvariables
  3676                              <1> expandbuftxt:
  3677 00002C11 89F1                <1> 	mov ecx, esi
  3678 00002C13 8A26                <1> 	mov ah, [esi]
  3679                              <1> expandbuftxtlp:
  3680 00002C15 8A1E                <1> 	mov bl, [esi]
  3681 00002C17 46                  <1> 	inc esi
  3682 00002C18 8A3E                <1> 	mov bh, [esi]
  3683 00002C1A 8826                <1> 	mov [esi], ah
  3684 00002C1C 88FC                <1> 	mov ah, bh
  3685 00002C1E 80FB00              <1> 	cmp bl, 0
  3686 00002C21 75F2                <1> 	jne expandbuftxtlp
  3687 00002C23 89CE                <1> 	mov esi, ecx
  3688 00002C25 8806                <1> 	mov [esi], al
  3689 00002C27 47                  <1> 	inc edi
  3690 00002C28 8A07                <1> 	mov al, [edi]
  3691 00002C2A 3C00                <1> 	cmp al, 0
  3692 00002C2C 0F8436000000        <1> 	je near fixvariables
  3693 00002C32 46                  <1> 	inc esi
  3694 00002C33 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3695                              <1> multipleprogline:
  3696 00002C38 30E4                <1> 	xor ah, ah
  3697 00002C3A 8826                <1> 	mov [esi], ah
  3698 00002C3C 46                  <1> 	inc esi
  3699 00002C3D 8935[5B2C0000]      <1> 	mov [nextcommandloc], esi
  3700 00002C43 E93E000000          <1> 	jmp donefixvariables
  3701                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3702 00002C48 46                  <1> 	inc esi
  3703 00002C49 8A06                <1> 	mov al, [esi]
  3704 00002C4B C606FF              <1> 	mov byte [esi], 255
  3705 00002C4E 3C23                <1> 	cmp al, '#'
  3706 00002C50 7416                <1> 	je fixvariables
  3707 00002C52 4E                  <1> 	dec esi
  3708 00002C53 C60600              <1> 	mov byte [esi], 0
  3709 00002C56 E90D000000          <1> 	jmp fixvariables
  3710                              <1> 	
  3711 00002C5B 00000000            <1> nextcommandloc dd 0
  3712 00002C5F 00000000            <1> thiscommandloc dd 0	
  3713                              <1> run:
  3714 00002C63 BE[48920300]        <1> 	mov esi, buftxt
  3715                              <1> fixvariables:
  3716 00002C68 46                  <1> 	inc esi
  3717 00002C69 8A06                <1> 	mov al, [esi]
  3718 00002C6B 3C23                <1> 	cmp al, '#'	;inline comment
  3719 00002C6D 74D9                <1> 	je inlinecomment
  3720 00002C6F 3C24                <1> 	cmp al, '$' ;variable
  3721 00002C71 0F8431FFFFFF        <1> 	je near replacevariable
  3722 00002C77 3C3B                <1> 	cmp al, ';' ;program list
  3723 00002C79 74BD                <1> 	je multipleprogline
  3724 00002C7B 3C00                <1> 	cmp al, 0
  3725 00002C7D 75E9                <1> 	jne fixvariables
  3726 00002C7F 31C0                <1> 	xor eax, eax
  3727 00002C81 A3[5B2C0000]        <1> 	mov [nextcommandloc], eax
  3728                              <1> donefixvariables:
  3729 00002C86 803D[A6320000]00    <1> 	cmp byte [indexdone], 0
  3730 00002C8D 7505                <1> 	jne progtest
  3731 00002C8F E874050000          <1> 	call indexfiles
  3732                              <1> progtest:
  3733 00002C94 31C0                <1> 	xor eax, eax
  3734 00002C96 BB[C8770300]        <1> 	mov ebx, fileindex
  3735 00002C9B 668B03              <1> prgnxt:	mov ax, [ebx]
  3736 00002C9E B1FF                <1> 	mov cl, 255
  3737 00002CA0 B52C                <1> 	mov ch, 44
  3738 00002CA2 6639C8              <1> 	cmp ax, cx
  3739 00002CA5 740E                <1> 	je fndprg
  3740 00002CA7 43                  <1> 	inc ebx
  3741 00002CA8 81FB[C87B0300]      <1> 	cmp ebx, fileindexend
  3742 00002CAE 7363                <1> 	jae prgnf
  3743 00002CB0 E9E6FFFFFF          <1> 	jmp prgnxt
  3744 00002CB5 81C302000000        <1> fndprg: add ebx, 2
  3745 00002CBB 31C9                <1> 	xor ecx, ecx
  3746 00002CBD BE[48920300]        <1> 	mov esi, buftxt
  3747 00002CC2 390D[5F2C0000]      <1> 	cmp [thiscommandloc], ecx
  3748 00002CC8 7406                <1> 	je noprgtstmultiple
  3749 00002CCA 8B35[5F2C0000]      <1> 	mov esi, [thiscommandloc]
  3750                              <1> noprgtstmultiple:
  3751 00002CD0 E8AF000000          <1> 	call cndtest
  3752 00002CD5 3C01                <1> 	cmp al, 1
  3753 00002CD7 7305                <1> 	jae prggood
  3754 00002CD9 E9BDFFFFFF          <1> 	jmp prgnxt
  3755 00002CDE 81FB[C87B0300]      <1> prggood: cmp ebx, fileindexend
  3756 00002CE4 7358                <1> 	jae prgdn
  3757 00002CE6 31C0                <1> 	xor eax, eax
  3758 00002CE8 BE[48920300]        <1> 	mov esi, buftxt
  3759 00002CED 3905[5F2C0000]      <1> 	cmp [thiscommandloc], eax
  3760 00002CF3 7406                <1> 	je noprggoodmul
  3761 00002CF5 8B35[5F2C0000]      <1> 	mov esi, [thiscommandloc]
  3762                              <1> noprggoodmul:
  3763 00002CFB 8935[3F2D0000]      <1> 	mov [currentcommandloc], esi
  3764 00002D01 81C303000000        <1> 	add ebx, 3
  3765 00002D07 8B3B                <1> 	mov edi, [ebx]
  3766 00002D09 C605[675E0000]02    <1> 	mov byte [threadson], 2
  3767 00002D10 FFD7                <1> 	call edi
  3768 00002D12 C3                  <1> 	ret
  3769                              <1> prgnf:	
  3770 00002D13 8B35[3F2D0000]      <1> 	mov esi, [currentcommandloc]
  3771 00002D19 8A06                <1> 	mov al, [esi]
  3772 00002D1B 3C00                <1> 	cmp al, 0
  3773 00002D1D 741F                <1> 	je prgdn
  3774 00002D1F BE[E5620000]        <1> 	mov esi, notfound1
  3775 00002D24 E8CEEEFFFF          <1> 	call print
  3776 00002D29 8B35[3F2D0000]      <1> 	mov esi, [currentcommandloc]
  3777 00002D2F E8C3EEFFFF          <1> 	call print
  3778 00002D34 BE[ED620000]        <1> 	mov esi, notfound2
  3779 00002D39 E8B9EEFFFF          <1> 	call print
  3780 00002D3E C3                  <1> prgdn:	ret
  3781                              <1> 
  3782 00002D3F 00000000            <1> currentcommandloc dd 0
  3783                              <1> 
  3784                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3785 00002D43 6631C0              <1> 	xor ax, ax
  3786 00002D46 8A06                <1> retest:	mov al, [esi]
  3787 00002D48 8A23                <1> 	mov ah, [ebx]
  3788 00002D4A 3C00                <1> 	cmp al, 0
  3789 00002D4C 740B                <1> 	je testtrue
  3790 00002D4E 38E0                <1> 	cmp al, ah
  3791 00002D50 750F                <1> 	jne testfalse
  3792 00002D52 43                  <1> 	inc ebx
  3793 00002D53 46                  <1> 	inc esi
  3794 00002D54 E9EDFFFFFF          <1> 	jmp retest
  3795                              <1> testtrue:
  3796 00002D59 80FC00              <1> 	cmp ah, 0
  3797 00002D5C 7503                <1> 	jne testfalse
  3798 00002D5E B001                <1> 	mov al, 1
  3799 00002D60 C3                  <1> 	ret
  3800                              <1> testfalse:
  3801 00002D61 30C0                <1> 	xor al, al
  3802 00002D63 C3                  <1> 	ret
  3803                              <1> 
  3804                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3805 00002D64 30C0                <1> 	xor al, al
  3806                              <1> opretest:
  3807 00002D66 8A06                <1> 	mov al, [esi]
  3808 00002D68 8A23                <1> 	mov ah, [ebx]
  3809 00002D6A 38E0                <1> 	cmp al, ah
  3810 00002D6C 7513                <1> 	jne optestfalse
  3811 00002D6E 80FC00              <1> 	cmp ah, 0
  3812 00002D71 7407                <1> 	je optesttrue
  3813 00002D73 43                  <1> 	inc ebx
  3814 00002D74 46                  <1> 	inc esi
  3815 00002D75 E9ECFFFFFF          <1> 	jmp opretest
  3816                              <1> optesttrue:
  3817 00002D7A 3C00                <1> 	cmp al, 0
  3818 00002D7C 7503                <1> 	jne optestfalse
  3819 00002D7E B001                <1> 	mov al, 1
  3820 00002D80 C3                  <1> 	ret
  3821                              <1> optestfalse:
  3822 00002D81 30C0                <1> 	xor al, al
  3823 00002D83 C3                  <1> 	ret
  3824                              <1> 
  3825                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3826 00002D84 30C0                <1> 	xor al, al
  3827 00002D86 8A06                <1> cndretest:	mov al, [esi]
  3828 00002D88 8A23                <1> 	mov ah, [ebx]
  3829 00002D8A 38CC                <1> 	cmp ah, cl
  3830 00002D8C 740B                <1> 	je cndtesttrue
  3831 00002D8E 38E0                <1> 	cmp al, ah
  3832 00002D90 750E                <1> 	jne cndtestfalse
  3833 00002D92 43                  <1> 	inc ebx
  3834 00002D93 46                  <1> 	inc esi
  3835 00002D94 E9EDFFFFFF          <1> 	jmp cndretest
  3836                              <1> cndtesttrue:
  3837 00002D99 38C8                <1> 	cmp al, cl
  3838 00002D9B 7506                <1> 	jne cndtestalmost
  3839 00002D9D B001                <1> 	mov al, 1
  3840 00002D9F C3                  <1> 	ret
  3841                              <1> cndtestfalse:
  3842 00002DA0 30C0                <1> 	xor al, al
  3843 00002DA2 C3                  <1> 	ret
  3844                              <1> cndtestalmost:
  3845 00002DA3 B002                <1> 	mov al, 2
  3846 00002DA5 C3                  <1> 	ret
  3847                              <1> 	
  3848                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3849                              <1> 		                ;ends if array seperator is found backwards after 0
  3850                              <1> 	arnxt:	      
  3851 00002DA6 88E8                <1> 		mov al, ch
  3852 00002DA8 88CC                <1> 		mov ah, cl        
  3853 00002DAA 663906              <1> 		cmp [esi], ax
  3854 00002DAD 7453                <1> 		je ardn
  3855 00002DAF 66390E              <1> 		cmp [esi], cx
  3856 00002DB2 740A                <1> 		je arfnd
  3857 00002DB4 46                  <1> 		inc esi
  3858 00002DB5 39DE                <1> 		cmp esi, ebx
  3859 00002DB7 7349                <1> 		jae ardn
  3860 00002DB9 E9E8FFFFFF          <1> 		jmp arnxt
  3861 00002DBE 81C602000000        <1> 	arfnd: add esi, 2
  3862 00002DC4 891D[032E0000]      <1> 		mov [arbx], ebx
  3863 00002DCA 890D[072E0000]      <1> 		mov [arcx], ecx
  3864 00002DD0 E822EEFFFF          <1> 		call print
  3865 00002DD5 8935[092E0000]      <1> 		mov [arsi], esi
  3866 00002DDB BE[1E630000]        <1> 		mov esi, line
  3867 00002DE0 E812EEFFFF          <1> 		call print
  3868 00002DE5 8B1D[032E0000]      <1> 		mov ebx, [arbx]
  3869 00002DEB 668B0D[072E0000]    <1> 		mov cx, [arcx]
  3870 00002DF2 8B35[092E0000]      <1> 		mov esi, [arsi]
  3871 00002DF8 46                  <1> 		inc esi
  3872 00002DF9 39DE                <1> 		cmp esi, ebx
  3873 00002DFB 7305                <1> 		jae ardn
  3874 00002DFD E9A4FFFFFF          <1> 		jmp arnxt
  3875 00002E02 C3                  <1> 	ardn:	ret
  3876 00002E03 00000000            <1> arbx:	dw 0,0
  3877 00002E07 0000                <1> arcx:	db 0,0
  3878 00002E09 00000000            <1> arsi:	dw 0,0
  3879                              <1> 
  3880                              <1> clearbuffer:
  3881 00002E0D BE[48960300]        <1> 	mov esi, buf2
  3882 00002E12 B030                <1> 	mov al, '0'
  3883 00002E14 81FE[5C960300]      <1> clearbuf: cmp esi, numbuf
  3884 00002E1A 7308                <1> 	jae doneclearbuff
  3885 00002E1C 8806                <1> 	mov [esi], al
  3886 00002E1E 46                  <1> 	inc esi
  3887 00002E1F E9F0FFFFFF          <1> 	jmp clearbuf
  3888                              <1> doneclearbuff: 
  3889 00002E24 C3                  <1> 		ret
  3890                              <1> 
  3891                              <1> convert:
  3892 00002E25 4E                  <1> 	dec esi
  3893 00002E26 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3894                              <1> .lp:
  3895 00002E28 89DE                <1> 	mov esi, ebx
  3896 00002E2A 81EE09000000        <1> 	sub esi, 9
  3897 00002E30 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3898 00002E36 720D                <1> 	jb .8
  3899 00002E38 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3900 00002E3E FE06                <1> 	inc byte [esi]
  3901 00002E40 E9E3FFFFFF          <1> 	jmp .lp
  3902 00002E45 46                  <1> .8:	inc esi
  3903 00002E46 81F900E1F505        <1> 	cmp ecx, 100000000
  3904 00002E4C 720D                <1> 	jb .7
  3905 00002E4E 81E900E1F505        <1> 	sub ecx, 100000000
  3906 00002E54 FE06                <1> 	inc byte [esi]
  3907 00002E56 E9CDFFFFFF          <1> 	jmp .lp
  3908 00002E5B 46                  <1> .7:	inc esi
  3909 00002E5C 81F980969800        <1> 	cmp ecx, 10000000
  3910 00002E62 720D                <1> 	jb .6
  3911 00002E64 81E980969800        <1> 	sub ecx, 10000000
  3912 00002E6A FE06                <1> 	inc byte [esi]
  3913 00002E6C E9B7FFFFFF          <1> 	jmp .lp
  3914 00002E71 46                  <1> .6:	inc esi
  3915 00002E72 81F940420F00        <1> 	cmp ecx, 1000000
  3916 00002E78 720D                <1> 	jb .5
  3917 00002E7A 81E940420F00        <1> 	sub ecx, 1000000
  3918 00002E80 FE06                <1> 	inc byte [esi]
  3919 00002E82 E9A1FFFFFF          <1> 	jmp .lp
  3920 00002E87 46                  <1> .5:	inc esi
  3921 00002E88 81F9A0860100        <1> 	cmp ecx, 100000
  3922 00002E8E 720D                <1> 	jb .4
  3923 00002E90 81E9A0860100        <1> 	sub ecx, 100000
  3924 00002E96 FE06                <1> 	inc byte [esi]
  3925 00002E98 E98BFFFFFF          <1> 	jmp .lp
  3926 00002E9D 46                  <1> .4:	inc esi
  3927 00002E9E 81F910270000        <1> 	cmp ecx, 10000
  3928 00002EA4 720D                <1> 	jb .3
  3929 00002EA6 81E910270000        <1> 	sub ecx, 10000
  3930 00002EAC FE06                <1> 	inc byte [esi]
  3931 00002EAE E975FFFFFF          <1> 	jmp .lp
  3932 00002EB3 46                  <1> .3:	inc esi
  3933 00002EB4 81F9E8030000        <1> 	cmp ecx, 1000
  3934 00002EBA 720D                <1> 	jb .2
  3935 00002EBC 81E9E8030000        <1> 	sub ecx, 1000
  3936 00002EC2 FE06                <1> 	inc byte [esi]
  3937 00002EC4 E95FFFFFFF          <1> 	jmp .lp
  3938 00002EC9 46                  <1> .2:	inc esi
  3939 00002ECA 81F964000000        <1> 	cmp ecx, 100
  3940 00002ED0 720D                <1> 	jb .1
  3941 00002ED2 81E964000000        <1> 	sub ecx, 100
  3942 00002ED8 FE06                <1> 	inc byte [esi]
  3943 00002EDA E949FFFFFF          <1> 	jmp .lp
  3944 00002EDF 46                  <1> .1:	inc esi
  3945 00002EE0 81F90A000000        <1> 	cmp ecx, 10
  3946 00002EE6 720D                <1> 	jb .0
  3947 00002EE8 81E90A000000        <1> 	sub ecx, 10
  3948 00002EEE FE06                <1> 	inc byte [esi]
  3949 00002EF0 E933FFFFFF          <1> 	jmp .lp
  3950 00002EF5 46                  <1> .0:	inc esi
  3951 00002EF6 81F901000000        <1> 	cmp ecx, 1
  3952 00002EFC 720D                <1> 	jb .dn
  3953 00002EFE 81E901000000        <1> 	sub ecx, 1
  3954 00002F04 FE06                <1> 	inc byte [esi]
  3955 00002F06 E91DFFFFFF          <1> 	jmp .lp
  3956                              <1> .dn:
  3957 00002F0B C3                  <1> 	ret
  3958                              <1> 
  3959                              <1> 	
  3960                              <1> 
  3961 00002F0C 00<rept>            <1> hexnumber times 8 db 0
  3962 00002F14 202000              <1> hexnumberend db "  ",0
  3963                              <1> 
  3964                              <1> converthex:
  3965                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3966 00002F17 56                  <1> 	push esi
  3967 00002F18 B030                <1> 	mov al, "0"
  3968 00002F1A 39FE                <1> .clearlp: cmp esi, edi
  3969 00002F1C 7308                <1> 	jae .doneclear
  3970 00002F1E 8806                <1> 	mov [esi], al
  3971 00002F20 46                  <1> 	inc esi
  3972 00002F21 E9F4FFFFFF          <1> 	jmp .clearlp
  3973                              <1> .doneclear:
  3974 00002F26 81EE02000000        <1> 	sub esi, 2
  3975 00002F2C 89C8                <1> 	mov eax, ecx
  3976                              <1> .loop:
  3977 00002F2E 30FF                <1> 	xor bh, bh
  3978 00002F30 88C3                <1> 	mov bl, al
  3979 00002F32 66C1E304            <1> 	shl bx, 4
  3980 00002F36 C0EB04              <1> 	shr bl, 4
  3981 00002F39 86DF                <1> 	xchg bl, bh ;they are backwards
  3982 00002F3B 80C330              <1> 	add bl, 48
  3983 00002F3E 80FB39              <1> 	cmp bl, "9"
  3984 00002F41 7609                <1> 	jbe .goodbl
  3985 00002F43 80EB30              <1> 	sub bl, 48
  3986 00002F46 80EB0A              <1> 	sub bl, 0xA
  3987 00002F49 80C341              <1> 	add bl, "A"
  3988                              <1> .goodbl:
  3989 00002F4C 80C730              <1> 	add bh, 48
  3990 00002F4F 80FF39              <1> 	cmp bh, "9"
  3991 00002F52 7609                <1> 	jbe .goodbh
  3992 00002F54 80EF30              <1> 	sub bh, 48
  3993 00002F57 80EF0A              <1> 	sub bh, 0xA
  3994 00002F5A 80C741              <1> 	add bh, "A"
  3995                              <1> .goodbh:
  3996 00002F5D C1E808              <1> 	shr eax, 8
  3997 00002F60 66891E              <1> 	mov [esi], bx
  3998 00002F63 81EE02000000        <1> 	sub esi, 2
  3999 00002F69 3B3424              <1> 	cmp esi, [esp]
  4000 00002F6C 7207                <1> 	jb .done
  4001 00002F6E 3D00000000          <1> 	cmp eax, 0
  4002 00002F73 75B9                <1> 	jne .loop
  4003                              <1> .done:
  4004 00002F75 5E                  <1> 	pop esi
  4005 00002F76 C3                  <1> 	ret
  4006                              <1> 	
  4007                              <1> 	
  4008 00002F77 00                  <1> smallhex db 0
  4009 00002F78 01                  <1> firsthexshown db 1
  4010                              <1> showhexsmall:
  4011 00002F79 C605[772F0000]01    <1> 	mov byte [smallhex], 1
  4012 00002F80 E808000000          <1> 	call showhex
  4013 00002F85 C605[772F0000]00    <1> 	mov byte [smallhex], 0
  4014 00002F8C C3                  <1> 	ret
  4015                              <1> showhex:
  4016 00002F8D 60                  <1> 	pusha
  4017 00002F8E BE[0C2F0000]        <1> 	mov esi, hexnumber
  4018 00002F93 BF[142F0000]        <1> 	mov edi, hexnumberend
  4019 00002F98 E87AFFFFFF          <1> 	call converthex
  4020 00002F9D 803D[782F0000]01    <1> 	cmp byte [firsthexshown], 1
  4021 00002FA4 7503                <1> 	jne .show
  4022 00002FA6 6631D2              <1> 	xor dx, dx
  4023                              <1> .show:
  4024 00002FA9 803D[782F0000]03    <1> 	cmp byte [firsthexshown], 3
  4025 00002FB0 750A                <1> 	jne .nonewhexline
  4026 00002FB2 BE[1E630000]        <1> 	mov esi, line
  4027 00002FB7 E83BECFFFF          <1> 	call print
  4028                              <1> .nonewhexline:
  4029 00002FBC 803D[782F0000]04    <1> 	cmp byte [firsthexshown], 4
  4030 00002FC3 7527                <1> 	jne .notab
  4031 00002FC5 B1A0                <1> 	mov cl, 160
  4032 00002FC7 28D1                <1> 	sub cl, dl
  4033 00002FC9 C0E905              <1> 	shr cl, 5
  4034 00002FCC C0E105              <1> 	shl cl, 5
  4035 00002FCF 80F900              <1> 	cmp cl, 0
  4036 00002FD2 750F                <1> 	jne .nonewline
  4037 00002FD4 BE[1E630000]        <1> 	mov esi, line
  4038 00002FD9 E819ECFFFF          <1> 	call print
  4039 00002FDE E909000000          <1> 	jmp .notab
  4040                              <1> .nonewline:
  4041 00002FE3 80C20F              <1> 	add dl, 15
  4042 00002FE6 C0EA04              <1> 	shr dl, 4
  4043 00002FE9 C0E204              <1> 	shl dl, 4
  4044                              <1> .notab:
  4045 00002FEC BE[0C2F0000]        <1> 	mov esi, hexnumber
  4046 00002FF1 803D[772F0000]01    <1> 	cmp byte [smallhex],1
  4047 00002FF8 7506                <1> 	jne .nosmall
  4048 00002FFA 81C606000000        <1> 	add esi, 6
  4049                              <1> .nosmall:
  4050 00003000 803D[782F0000]05    <1> 	cmp byte [firsthexshown], 5
  4051 00003007 750A                <1> 	jne .noquiet
  4052 00003009 E8CAEBFFFF          <1> 	call printquiet
  4053 0000300E E918000000          <1> 	jmp .donequiet
  4054                              <1> .noquiet:
  4055 00003013 803D[782F0000]06    <1> 	cmp byte [firsthexshown], 6
  4056 0000301A 750A                <1> 	jne .normal
  4057 0000301C E8CAEBFFFF          <1> 	call printhighlight
  4058 00003021 E905000000          <1> 	jmp .donequiet
  4059                              <1> .normal:
  4060 00003026 E8CCEBFFFF          <1> 	call print
  4061                              <1> .donequiet:
  4062 0000302B 803D[782F0000]02    <1> 	cmp byte [firsthexshown], 2
  4063 00003032 750A                <1> 	jne .shown
  4064 00003034 BE[1E630000]        <1> 	mov esi, line
  4065 00003039 E8B9EBFFFF          <1> 	call print
  4066                              <1> .shown:
  4067 0000303E C605[782F0000]00    <1> 	mov byte [firsthexshown], 0
  4068 00003045 61                  <1> 	popa
  4069 00003046 C3                  <1> 	ret
  4070                              <1> 
  4071                              <1> 
  4072 00003047 303030303030303030- <1> decnumber db "00000000000000"
  4073 00003050 3030303030          <1>
  4074 00003055 2000                <1> decnumberend: db " ",0
  4075                              <1> 
  4076                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4077 00003057 60                  <1> 	pusha
  4078 00003058 BF[47300000]        <1> 	mov edi, decnumber
  4079 0000305D BE[55300000]        <1> 	mov esi, decnumberend
  4080                              <1> .clear:
  4081 00003062 C60730              <1> 	mov byte [edi], '0'
  4082 00003065 47                  <1> 	inc edi
  4083 00003066 39F7                <1> 	cmp edi, esi
  4084 00003068 72F8                <1> 	jb .clear
  4085 0000306A BF[47300000]        <1> 	mov edi, decnumber
  4086 0000306F E8B1FDFFFF          <1> 	call convert
  4087 00003074 803D[782F0000]01    <1> 	cmp byte [firsthexshown], 1
  4088 0000307B 7503                <1> 	jne .show
  4089 0000307D 6631D2              <1> 	xor dx, dx
  4090                              <1> .show:
  4091 00003080 803D[782F0000]03    <1> 	cmp byte [firsthexshown], 3
  4092 00003087 750A                <1> 	jne .nonewdecline
  4093 00003089 BE[1E630000]        <1> 	mov esi, line
  4094 0000308E E864EBFFFF          <1> 	call print
  4095                              <1> .nonewdecline:
  4096 00003093 803D[782F0000]04    <1> 	cmp byte [firsthexshown], 4
  4097 0000309A 7527                <1> 	jne .notab
  4098 0000309C B1A0                <1> 	mov cl, 160
  4099 0000309E 28D1                <1> 	sub cl, dl
  4100 000030A0 C0E905              <1> 	shr cl, 5
  4101 000030A3 C0E105              <1> 	shl cl, 5
  4102 000030A6 80F900              <1> 	cmp cl, 0
  4103 000030A9 750F                <1> 	jne .nonewline
  4104 000030AB BE[1E630000]        <1> 	mov esi, line
  4105 000030B0 E842EBFFFF          <1> 	call print
  4106 000030B5 E909000000          <1> 	jmp .notab
  4107                              <1> .nonewline:
  4108 000030BA 80C20F              <1> 	add dl, 15
  4109 000030BD C0EA04              <1> 	shr dl, 4
  4110 000030C0 C0E204              <1> 	shl dl, 4
  4111                              <1> .notab:
  4112 000030C3 BE[47300000]        <1> 	mov esi, decnumber
  4113 000030C8 4E                  <1> 	dec esi
  4114                              <1> .sifind:
  4115 000030C9 46                  <1> 	inc esi
  4116 000030CA 803E30              <1> 	cmp byte [esi], '0'
  4117 000030CD 74FA                <1> 	je .sifind
  4118 000030CF E823EBFFFF          <1> 	call print
  4119 000030D4 803D[782F0000]02    <1> 	cmp byte [firsthexshown], 2
  4120 000030DB 750A                <1> 	jne .shown
  4121 000030DD BE[1E630000]        <1> 	mov esi, line
  4122 000030E2 E810EBFFFF          <1> 	call print
  4123                              <1> .shown:
  4124 000030E7 C605[782F0000]00    <1> 	mov byte [firsthexshown], 0
  4125 000030EE 61                  <1> 	popa
  4126 000030EF C3                  <1> 	ret
  4127                              <1> 	
  4128                              <1> cnvrthextxt:
  4129 000030F0 31C9                <1> 	xor ecx, ecx
  4130 000030F2 31C0                <1> 	xor eax, eax
  4131 000030F4 31D2                <1> 	xor edx, edx
  4132 000030F6 31DB                <1> 	xor ebx, ebx
  4133 000030F8 4E                  <1> 	dec esi
  4134                              <1> .end:
  4135 000030F9 46                  <1> 	inc esi
  4136 000030FA 8A06                <1> 	mov al, [esi]
  4137 000030FC 3C00                <1> 	cmp al, 0
  4138 000030FE 75F9                <1> 	jne .end
  4139                              <1> .loop:
  4140 00003100 4E                  <1> 	dec esi
  4141 00003101 8A06                <1> 	mov al, [esi]
  4142 00003103 3C41                <1> 	cmp al, "A"
  4143 00003105 7328                <1> 	jae .char
  4144 00003107 2C30                <1> 	sub al, 48
  4145 00003109 3C10                <1> 	cmp al, 16
  4146 0000310B 7721                <1> 	ja .done
  4147                              <1> .donechar:
  4148 0000310D 81FA00000000        <1> 	cmp edx, 0
  4149 00003113 740E                <1> 	je .noshl
  4150 00003115 89D3                <1> 	mov ebx, edx
  4151                              <1> .shl:
  4152 00003117 C1E004              <1> 	shl eax, 4
  4153 0000311A 4B                  <1> 	dec ebx
  4154 0000311B 81FB00000000        <1> 	cmp ebx, 0
  4155 00003121 75F4                <1> 	jne .shl
  4156                              <1> .noshl:
  4157 00003123 42                  <1> 	inc edx
  4158 00003124 01C1                <1> 	add ecx, eax
  4159 00003126 81FA08000000        <1> 	cmp edx, 8
  4160 0000312C 72D2                <1> 	jb .loop
  4161                              <1> .done:
  4162 0000312E C3                  <1> 	ret
  4163                              <1> .char:
  4164 0000312F 3C46                <1> 	cmp al, "F"
  4165 00003131 77FB                <1> 	ja .done
  4166 00003133 2C41                <1> 	sub al, "A"
  4167 00003135 040A                <1> 	add al, 0xA
  4168 00003137 E9D1FFFFFF          <1> 	jmp .donechar
  4169                              <1> 	
  4170                              <1> 	
  4171                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4172 0000313C 31C9                <1> 	xor ecx, ecx
  4173 0000313E 31C0                <1> 	xor eax, eax
  4174 00003140 31D2                <1> 	xor edx, edx
  4175 00003142 31DB                <1> 	xor ebx, ebx
  4176 00003144 4E                  <1> 	dec esi
  4177                              <1> .lp:
  4178 00003145 46                  <1> 	inc esi
  4179 00003146 8A06                <1> 	mov al, [esi]
  4180 00003148 3C00                <1> 	cmp al, 0
  4181 0000314A 75F9                <1> 	jne .lp
  4182 0000314C 4E                  <1> 	dec esi
  4183 0000314D 8A06                <1> 	mov al, [esi]
  4184 0000314F 3C2E                <1> 	cmp al, '.'
  4185 00003151 7506                <1> 	jne .dot
  4186 00003153 46                  <1> 	inc esi
  4187 00003154 E9ECFFFFFF          <1> 	jmp .lp
  4188                              <1> .dot:
  4189 00003159 3C20                <1> 	cmp al, ' '
  4190 0000315B 7404                <1> 	je .zero
  4191 0000315D 3C30                <1> 	cmp al, '0'
  4192 0000315F 7504                <1> 	jne .txtlp
  4193                              <1> .zero: 
  4194 00003161 39FE                <1> 		cmp esi, edi
  4195 00003163 7448                <1> 		je .done
  4196                              <1> .txtlp:
  4197 00003165 31C0                <1> 	xor eax, eax
  4198 00003167 8A06                <1> 	mov al, [esi]
  4199 00003169 3C3D                <1> 	cmp al, '='
  4200 0000316B 7440                <1> 	je .done
  4201 0000316D 3C30                <1> 	cmp al, 48
  4202 0000316F 723C                <1> 	jb .done
  4203 00003171 3C23                <1> 	cmp al, '#'
  4204 00003173 7438                <1> 	je .done
  4205 00003175 39FE                <1> 	cmp esi, edi
  4206 00003177 7234                <1> 	jb .done
  4207 00003179 81F900000000        <1> 	cmp ecx, 0
  4208 0000317F 770B                <1> 	ja .exp
  4209 00003181 2C30                <1> .noexp:	sub al, 48
  4210 00003183 01C2                <1> 	add edx, eax
  4211 00003185 4E                  <1> 	dec esi
  4212 00003186 41                  <1> 	inc ecx
  4213 00003187 E9D9FFFFFF          <1> 	jmp .txtlp
  4214 0000318C 81F900000000        <1> .exp:	cmp ecx, 0
  4215 00003192 74ED                <1> 	je .noexp
  4216 00003194 2C30                <1> 	sub al, 48
  4217 00003196 51                  <1> 	push ecx
  4218                              <1> .expmul:
  4219 00003197 89C3                <1> 	mov ebx, eax
  4220 00003199 D1E3                <1> 	shl ebx, 1
  4221 0000319B 01D8                <1> 	add eax, ebx
  4222 0000319D D1E3                <1> 	shl ebx, 1
  4223 0000319F 01D8                <1> 	add eax, ebx
  4224 000031A1 E2F4                <1> 	loop .expmul
  4225 000031A3 01C2                <1> 	add edx, eax
  4226 000031A5 59                  <1> 	pop ecx
  4227 000031A6 4E                  <1> 	dec esi
  4228 000031A7 41                  <1> 	inc ecx
  4229 000031A8 E9B8FFFFFF          <1> 	jmp .txtlp
  4230 000031AD 89D1                <1> .done: mov ecx, edx
  4231 000031AF C3                  <1> 	ret
  4232                              <1> benchmarki: ;output number of clocks since initial value
  4233 000031B0 0F31                <1> 	rdtsc
  4234 000031B2 8B1D[49630000]      <1> 	mov ebx, [initialtsc]
  4235 000031B8 8B0D[4D630000]      <1> 	mov ecx, [initialtsc + 4]
  4236 000031BE E90E000000          <1> 	jmp benchmarkl.calc
  4237                              <1> 
  4238                              <1> benchmarkl: ;output number of clocks since last benchmark
  4239 000031C3 0F31                <1> 	rdtsc
  4240 000031C5 8B1D[51630000]      <1> 	mov ebx, [lasttsc]
  4241 000031CB 8B0D[55630000]      <1> 	mov ecx, [lasttsc + 4]
  4242                              <1> .calc:
  4243 000031D1 29D8                <1> 	sub eax, ebx
  4244 000031D3 7701                <1> 	ja .noover
  4245 000031D5 4A                  <1> 	dec edx
  4246                              <1> .noover:
  4247 000031D6 29CA                <1> 	sub edx, ecx
  4248 000031D8 8B0C24              <1> 	mov ecx, [esp]
  4249 000031DB E8ADFDFFFF          <1> 	call showhex
  4250 000031E0 89D1                <1> 	mov ecx, edx
  4251 000031E2 E8A6FDFFFF          <1> 	call showhex
  4252 000031E7 89C1                <1> 	mov ecx, eax
  4253 000031E9 E89FFDFFFF          <1> 	call showhex
  4254 000031EE BE[1E630000]        <1> 	mov esi, line
  4255 000031F3 E8FFE9FFFF          <1> 	call print
  4256 000031F8 0F31                <1> 	rdtsc
  4257 000031FA A3[51630000]        <1> 	mov [lasttsc], eax
  4258 000031FF 8915[55630000]      <1> 	mov [lasttsc + 4], edx
  4259 00003205 C3                  <1> 	ret
  4260                                      %include "source/programs.asm"
  4261 00003206 FF2C                <1> filetypes db 255,44
  4262                              <1> progstart:		;programs start here
  4263                              <1> indexfiles:
  4264 00003208 BE[08320000]        <1> 	mov esi, progstart
  4265 0000320D BB[C8770300]        <1> 	mov ebx, fileindex
  4266 00003212 BF[08320000]        <1> 	mov edi, progstart
  4267 00003217 81EF02000000        <1> 	sub edi, 2
  4268                              <1> indexloop:
  4269 0000321D 668B0E              <1> 	mov cx, [esi]
  4270                              <1> 	indexloop2:
  4271 00003220 663B0F              <1> 		cmp cx, [edi]
  4272 00003223 7427                <1> 		je indexloop2done
  4273 00003225 81EF02000000        <1> 		sub edi, 2
  4274 0000322B 81FF[06320000]      <1> 		cmp edi, filetypes
  4275 00003231 73ED                <1> 		jae indexloop2
  4276 00003233 BF[08320000]        <1> 	mov edi, progstart
  4277 00003238 81EF02000000        <1> 	sub edi, 2
  4278 0000323E 46                  <1> 	inc esi
  4279 0000323F 81FE[E34F0000]      <1> 	cmp esi, batchprogend
  4280 00003245 7357                <1> 	jae indexloopdone
  4281 00003247 E9D1FFFFFF          <1> 	jmp indexloop
  4282                              <1> indexloop2done:
  4283 0000324C 66890B              <1> 	mov [ebx], cx
  4284 0000324F 81C302000000        <1> 	add ebx, 2
  4285 00003255 81C602000000        <1> 	add esi, 2
  4286                              <1> 	nameindex:
  4287 0000325B 8A0E                <1> 		mov cl, [esi]
  4288 0000325D 80F900              <1> 		cmp cl, 0
  4289 00003260 7409                <1> 		je nameindexdone
  4290 00003262 880B                <1> 		mov [ebx], cl
  4291 00003264 46                  <1> 		inc esi
  4292 00003265 43                  <1> 		inc ebx
  4293 00003266 E9F0FFFFFF          <1> 		jmp nameindex
  4294                              <1> 	nameindexdone:
  4295 0000326B 43                  <1> 		inc ebx
  4296 0000326C 66C7030000          <1> 		mov word [ebx], 0
  4297 00003271 81C302000000        <1> 		add ebx, 2
  4298 00003277 46                  <1> 		inc esi
  4299 00003278 8933                <1> 		mov [ebx], esi
  4300 0000327A 81C304000000        <1> 		add ebx, 4
  4301 00003280 66C7030000          <1> 		mov word [ebx], 0
  4302 00003285 81C302000000        <1> 		add ebx, 2
  4303 0000328B 81FB[C87B0300]      <1> 		cmp ebx, fileindexend
  4304 00003291 730B                <1> 		jae indexloopdone
  4305 00003293 81C601000000        <1> 		add esi, 1
  4306 00003299 E97FFFFFFF          <1> 		jmp indexloop
  4307 0000329E C605[A6320000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4308 000032A5 C3                  <1> 		ret
  4309 000032A6 00                  <1> indexdone db 0
  4310                              <1> %include 'source/programs/_comment.asm' ;#
  4311 000032A7 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4312 000032AB C3                  <2> 	ret 
  4313                              <1> %include 'source/programs/_math.asm' ;!
  4314 000032AC FF2C2100            <2> db 255,44,"!",0
  4315                              <2> 	num:	
  4316 000032B0 E858FBFFFF          <2> 		call clearbuffer
  4317 000032B5 C605[38350000]00    <2> 		mov byte [decimal], 0
  4318 000032BC C605[39350000]00    <2> 		mov byte [decimal2], 0
  4319 000032C3 8B35[3F2D0000]      <2> 		mov esi, [currentcommandloc]
  4320 000032C9 31C0                <2> 		xor eax, eax
  4321 000032CB 31C9                <2> 		xor ecx, ecx
  4322 000032CD 31DB                <2> 		xor ebx, ebx
  4323 000032CF 8A06                <2> 	num2:	mov al, [esi]
  4324 000032D1 3C2B                <2> 		cmp al, '+'
  4325 000032D3 7416                <2> 		je operatorfound
  4326 000032D5 3C2D                <2> 		cmp al, '-'
  4327 000032D7 7412                <2> 		je operatorfound
  4328 000032D9 3C2A                <2> 		cmp al, '*'
  4329 000032DB 740E                <2> 		je operatorfound
  4330 000032DD 3C2F                <2> 		cmp al, '/'
  4331 000032DF 740A                <2> 		je operatorfound
  4332 000032E1 3C5E                <2> 		cmp al, '^'
  4333 000032E3 7406                <2> 		je operatorfound
  4334 000032E5 46                  <2> 		inc esi
  4335 000032E6 84C0                <2> 		test al, al
  4336 000032E8 75E5                <2> 		jnz num2
  4337 000032EA C3                  <2> 		ret
  4338 000032EB 50                  <2> 	operatorfound: push eax
  4339 000032EC 30E4                <2> 		xor ah, ah
  4340 000032EE 8826                <2> 		mov [esi], ah
  4341 000032F0 89F7                <2> 		mov edi, esi
  4342 000032F2 46                  <2> 		inc esi
  4343 000032F3 8A06                <2> 		mov al, [esi]
  4344 000032F5 3C25                <2> 		cmp al, '%'
  4345 000032F7 0F845E000000        <2> 		je near resultnum1
  4346                              <2> 	varnum2: 
  4347 000032FD 57                  <2> 		push edi
  4348 000032FE E8A6000000          <2> 		call checkdecimal
  4349 00003303 5F                  <2> 		pop edi
  4350 00003304 E833FEFFFF          <2> 		call cnvrttxt
  4351                              <2> 	vrnm2:
  4352 00003309 89CB                <2> 		mov ebx, ecx
  4353 0000330B 53                  <2> 		push ebx
  4354 0000330C E8FCFAFFFF          <2> 		call clearbuffer
  4355 00003311 8B35[3F2D0000]      <2> 		mov esi, [currentcommandloc]
  4356 00003317 89F7                <2> 		mov edi, esi
  4357 00003319 46                  <2> 		inc esi
  4358 0000331A 8A06                <2> 		mov al, [esi]
  4359 0000331C 3C25                <2> 		cmp al, '%'
  4360 0000331E 0F844E000000        <2> 		je near resultnum2
  4361                              <2> 	varnum4: 
  4362 00003324 57                  <2> 		push edi
  4363 00003325 E86B000000          <2> 		call checkdecimal2
  4364 0000332A 5F                  <2> 		pop edi
  4365 0000332B E80CFEFFFF          <2> 		call cnvrttxt
  4366                              <2> 	vrnm4:
  4367 00003330 5B                  <2> 		pop ebx
  4368 00003331 58                  <2> 		pop eax
  4369 00003332 3C2B                <2> 		cmp al, '+'
  4370 00003334 0F84A3000000        <2> 		je near plusnum
  4371 0000333A 3C2D                <2> 		cmp al, '-'
  4372 0000333C 0F84A7000000        <2> 		je near subnum
  4373 00003342 3C2A                <2> 		cmp al, '*'
  4374 00003344 0F84AB000000        <2> 		je near mulnum
  4375 0000334A 3C2F                <2> 		cmp al, '/'
  4376 0000334C 0F84B9000000        <2> 		je near divnum
  4377 00003352 3C5E                <2> 		cmp al, '^'
  4378 00003354 0F84D6000000        <2> 		je near expnum
  4379 0000335A C3                  <2> 		ret
  4380                              <2> 	resultnum1:
  4381 0000335B 8A0D[3A350000]      <2> 		mov cl, [decimalresult]
  4382 00003361 880D[38350000]      <2> 		mov [decimal], cl
  4383 00003367 8B0D[3B350000]      <2> 		mov ecx, [result]
  4384 0000336D E997FFFFFF          <2> 		jmp vrnm2
  4385                              <2> 	resultnum2:
  4386 00003372 8A0D[38350000]      <2> 		mov cl, [decimal]
  4387 00003378 880D[39350000]      <2> 		mov [decimal2], cl
  4388 0000337E 8A0D[3A350000]      <2> 		mov cl, [decimalresult]
  4389 00003384 880D[38350000]      <2> 		mov [decimal], cl
  4390 0000338A 8B0D[3B350000]      <2> 		mov ecx, [result]
  4391 00003390 E99BFFFFFF          <2> 		jmp vrnm4
  4392                              <2> 	checkdecimal2:
  4393 00003395 8A25[38350000]      <2> 		mov ah, [decimal]
  4394 0000339B 8825[39350000]      <2> 		mov [decimal2], ah
  4395 000033A1 30E4                <2> 		xor ah, ah
  4396 000033A3 8825[38350000]      <2> 		mov [decimal], ah
  4397                              <2> 	checkdecimal:
  4398 000033A9 89F7                <2> 		mov edi, esi
  4399                              <2> 	chkdec1:
  4400 000033AB 8A07                <2> 		mov al, [edi]
  4401 000033AD 3C2E                <2> 		cmp al, '.'
  4402 000033AF 0F840E000000        <2> 		je near fnddec
  4403 000033B5 3C00                <2> 		cmp al, 0
  4404 000033B7 0F841F000000        <2> 		je near nodecimal
  4405 000033BD 47                  <2> 		inc edi
  4406 000033BE E9E8FFFFFF          <2> 		jmp chkdec1
  4407                              <2> 	fnddec:
  4408 000033C3 8A4701              <2> 		mov al, [edi + 1]
  4409 000033C6 8807                <2> 		mov [edi], al
  4410 000033C8 3C00                <2> 		cmp al, 0
  4411 000033CA 0F840C000000        <2> 		je near nodecimal
  4412 000033D0 FE05[38350000]      <2> 		inc byte [decimal]
  4413 000033D6 47                  <2> 		inc edi
  4414 000033D7 E9E7FFFFFF          <2> 		jmp fnddec
  4415                              <2> 	nodecimal:
  4416 000033DC C3                  <2> 		ret
  4417                              <2> 	plusnum:
  4418 000033DD E814010000          <2> 		call decaddfix
  4419 000033E2 01D9                <2> 		add ecx, ebx
  4420 000033E4 E98A000000          <2> 		jmp retnum
  4421                              <2> 	subnum:
  4422 000033E9 E808010000          <2> 		call decaddfix
  4423 000033EE 29D9                <2> 		sub ecx, ebx
  4424 000033F0 E97E000000          <2> 		jmp retnum
  4425                              <2> 	mulnum:
  4426 000033F5 A0[39350000]        <2> 		mov al, [decimal2]
  4427 000033FA 0005[38350000]      <2> 		add [decimal], al
  4428 00003400 89C8                <2> 		mov eax, ecx
  4429 00003402 F7E3                <2> 		mul ebx
  4430 00003404 89C1                <2> 		mov ecx, eax
  4431 00003406 E968000000          <2> 		jmp retnum
  4432                              <2> 	divnum:
  4433 0000340B E8E6000000          <2> 		call decaddfix
  4434 00003410 30C0                <2> 		xor al, al
  4435 00003412 A2[38350000]        <2> 		mov [decimal], al
  4436 00003417 31D2                <2> 		xor edx, edx
  4437 00003419 89C8                <2> 		mov eax, ecx
  4438 0000341B 81FB00000000        <2> 		cmp ebx, 0
  4439 00003421 0F844C000000        <2> 		je near retnum
  4440 00003427 F7F3                <2> 		div ebx
  4441 00003429 89C1                <2> 		mov ecx, eax
  4442 0000342B E943000000          <2> 		jmp retnum
  4443                              <2> 	expnum:
  4444 00003430 8A15[38350000]      <2> 		mov dl, [decimal]
  4445 00003436 8815[39350000]      <2> 		mov [decimal2], dl
  4446 0000343C 31D2                <2> 		xor edx, edx
  4447 0000343E 89C8                <2> 		mov eax, ecx
  4448 00003440 89D9                <2> 		mov ecx, ebx
  4449 00003442 89C3                <2> 		mov ebx, eax
  4450 00003444 81F900000000        <2> 		cmp ecx, 0
  4451 0000344A 7422                <2> 		je noexpnum
  4452 0000344C 49                  <2> 		dec ecx
  4453 0000344D 81F900000000        <2> 		cmp ecx, 0
  4454 00003453 7412                <2> 		je noexpnumlp
  4455 00003455 F7E3                <2> 	expnumlp: mul ebx
  4456 00003457 8A15[39350000]      <2> 		mov dl, [decimal2]
  4457 0000345D 0015[38350000]      <2> 		add [decimal], dl
  4458 00003463 31D2                <2> 		xor edx, edx
  4459 00003465 E2EE                <2> 		loop expnumlp
  4460                              <2> 	noexpnumlp:
  4461 00003467 89C1                <2> 		mov ecx, eax
  4462 00003469 E905000000          <2> 		jmp retnum
  4463                              <2> 	noexpnum:
  4464 0000346E B901000000          <2> 		mov ecx, 1
  4465                              <2> 	retnum: 
  4466 00003473 BE[5C960300]        <2> 		mov esi, numbuf
  4467 00003478 890D[3B350000]      <2> 		mov [result], ecx
  4468 0000347E E8A2F9FFFF          <2> 		call convert
  4469 00003483 BE[5C960300]        <2> 		mov esi, numbuf
  4470 00003488 8A25[38350000]      <2> 		mov ah, [decimal]
  4471 0000348E 8825[3A350000]      <2> 		mov [decimalresult], ah
  4472 00003494 80FC00              <2> 		cmp ah, 0
  4473 00003497 0F8425000000        <2> 		je near noputdecimal
  4474                              <2> 	putdecimal:
  4475 0000349D 4E                  <2> 		dec esi
  4476 0000349E FECC                <2> 		dec ah
  4477 000034A0 80FC00              <2> 		cmp ah, 0
  4478 000034A3 0F87F4FFFFFF        <2> 		ja near putdecimal
  4479 000034A9 4E                  <2> 		dec esi
  4480 000034AA 8A06                <2> 		mov al, [esi]
  4481 000034AC C6062E              <2> 		mov byte [esi], '.'
  4482                              <2> 	decputloop:
  4483 000034AF 4E                  <2> 		dec esi
  4484 000034B0 8A26                <2> 		mov ah, [esi]
  4485 000034B2 8806                <2> 		mov [esi], al
  4486 000034B4 88E0                <2> 		mov al, ah
  4487 000034B6 81FE[48960300]      <2> 		cmp esi, buf2
  4488 000034BC 0F87EDFFFFFF        <2> 		ja near decputloop
  4489                              <2> 	noputdecimal:
  4490 000034C2 BE[48960300]        <2> 		mov esi, buf2
  4491 000034C7 E805000000          <2> 		call chkadd
  4492 000034CC C3                  <2> 		ret
  4493 000034CD 00000000            <2> edxnumbuf dw 0,0
  4494 000034D1 8A06                <2> 	chkadd: mov al, [esi]
  4495 000034D3 3C30                <2> 		cmp al, '0'
  4496 000034D5 750F                <2> 		jne dnadd
  4497 000034D7 46                  <2> 		inc esi
  4498 000034D8 81FE[5C960300]      <2> 		cmp esi, numbuf
  4499 000034DE 7405                <2> 		je dnaddm1
  4500 000034E0 E9ECFFFFFF          <2> 		jmp chkadd
  4501 000034E5 4E                  <2> 	dnaddm1: dec esi
  4502 000034E6 E80CE7FFFF          <2> 	dnadd:	call print
  4503 000034EB BE[1E630000]        <2> 		mov esi, line
  4504 000034F0 E802E7FFFF          <2> 		call print
  4505 000034F5 C3                  <2> 		ret
  4506                              <2> 		
  4507                              <2> 	decaddfix:
  4508 000034F6 A0[39350000]        <2> 		mov al, [decimal2]
  4509 000034FB 8A25[38350000]      <2> 		mov ah, [decimal]
  4510 00003501 38E0                <2> 		cmp al, ah
  4511 00003503 7432                <2> 		je gooddecadd
  4512 00003505 38E0                <2> 		cmp al, ah
  4513 00003507 721A                <2> 		jb lowdecadd
  4514                              <2> 	highdecadd:
  4515 00003509 FEC4                <2> 		inc ah
  4516 0000350B 89CA                <2> 		mov edx, ecx
  4517 0000350D C1E103              <2> 		shl ecx, 3
  4518 00003510 01D1                <2> 		add ecx, edx
  4519 00003512 01D1                <2> 		add ecx, edx
  4520 00003514 38E0                <2> 		cmp al, ah
  4521 00003516 77F1                <2> 		ja highdecadd
  4522 00003518 8825[38350000]      <2> 		mov [decimal], ah
  4523 0000351E E914000000          <2> 		jmp gooddecadd
  4524                              <2> 	lowdecadd:
  4525 00003523 FEC0                <2> 		inc al
  4526 00003525 89DA                <2> 		mov edx, ebx
  4527 00003527 C1E303              <2> 		shl ebx, 3
  4528 0000352A 01D3                <2> 		add ebx, edx
  4529 0000352C 01D3                <2> 		add ebx, edx
  4530 0000352E 38E0                <2> 		cmp al, ah
  4531 00003530 72F1                <2> 		jb lowdecadd
  4532 00003532 A2[38350000]        <2> 		mov [decimal], al
  4533                              <2> 	gooddecadd:
  4534 00003537 C3                  <2> 		ret
  4535                              <2> 		
  4536 00003538 00                  <2> decimal db 0
  4537 00003539 00                  <2> decimal2 db 0
  4538 0000353A 00                  <2> decimalresult db 0
  4539 0000353B 00000000            <2> result dd 0
  4540                              <1> %include 'source/programs/_variables.asm' ;% and $
  4541 0000353F FF2C2500            <2> db 255,44,"%",0
  4542                              <2> 	ans:
  4543 00003543 BE[48960300]        <2> 		mov esi, buf2
  4544 00003548 E884FFFFFF          <2> 		call chkadd
  4545 0000354D C3                  <2> 		ret
  4546                              <2> 		
  4547 0000354E FF2C2400            <2> db 255,44,"$",0
  4548 00003552 8B35[3F2D0000]      <2> var: mov esi, [currentcommandloc]
  4549 00003558 BB[487E0300]        <2> 	mov ebx, variables
  4550 0000355D 8A06                <2> lkeq:	mov al, [esi]
  4551 0000355F 3C3D                <2> 	cmp al, '='
  4552 00003561 741E                <2> 	je eqfnd	;is there an '=' sign?
  4553 00003563 3C00                <2> 	cmp al, 0
  4554 00003565 7406                <2> 	je echovars
  4555 00003567 46                  <2> 	inc esi
  4556 00003568 E9F0FFFFFF          <2> 	jmp lkeq
  4557 0000356D BE[487E0300]        <2> echovars: mov esi, variables
  4558 00003572 BB[488E0300]        <2> 	mov ebx, varend
  4559 00003577 B105                <2> 	mov cl, 5
  4560 00003579 B504                <2> 	mov ch, 4
  4561 0000357B E826F8FFFF          <2> 	call array
  4562 00003580 C3                  <2> 	ret
  4563 00003581 46                  <2> eqfnd:	inc esi
  4564 00003582 8A06                <2> 	mov al, [esi]
  4565 00003584 3C00                <2> 	cmp al, 0
  4566 00003586 7410                <2> 	je readvar
  4567 00003588 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  4568 0000358E BB[487E0300]        <2> 	mov ebx, variables
  4569 00003593 E91C000000          <2> 	jmp seek
  4570                              <2> readvar:
  4571 00003598 B00A                <2> 	mov al, 10
  4572 0000359A 66BB0700            <2> 	mov bx, 7
  4573 0000359E C605[F9210000]00    <2> 	mov byte [commandedit], 0
  4574 000035A5 BF[48960300]        <2> 	mov edi, buftxtend
  4575 000035AA E87EE7FFFF          <2> 	call rdprint
  4576 000035AF E99EFFFFFF          <2> 	jmp var
  4577 000035B4 668B03              <2> seek:	mov ax, [ebx]
  4578 000035B7 B105                <2> 	mov cl, 5
  4579 000035B9 B504                <2> 	mov ch, 4
  4580 000035BB 663D0000            <2> 	cmp ax, 0
  4581 000035BF 0F846A000000        <2> 	je near save
  4582 000035C5 6639C8              <2> 	cmp ax, cx
  4583 000035C8 7406                <2> 	je skfnd
  4584 000035CA 43                  <2> 	inc ebx
  4585 000035CB E9E4FFFFFF          <2> 	jmp seek
  4586 000035D0 8B35[3F2D0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4587 000035D6 46                  <2> 	inc esi
  4588 000035D7 81C302000000        <2> 	add ebx, 2
  4589 000035DD 89DF                <2> 	mov edi, ebx
  4590 000035DF B13D                <2> 	mov cl, '='
  4591 000035E1 E89EF7FFFF          <2> 	call cndtest
  4592 000035E6 3C01                <2> 	cmp al, 1	
  4593 000035E8 741B                <2> 	je varfnd
  4594 000035EA 89FB                <2> 	mov ebx, edi
  4595 000035EC 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  4596 000035F2 668B03              <2> 	mov ax, [ebx]
  4597 000035F5 663D0000            <2> 	cmp ax, 0
  4598 000035F9 0F8430000000        <2> 	je near save
  4599 000035FF 43                  <2> 	inc ebx
  4600 00003600 E9AFFFFFFF          <2> 	jmp seek
  4601 00003605 8A03                <2> varfnd:	mov al, [ebx]
  4602 00003607 3C04                <2> 	cmp al, 4
  4603 00003609 7407                <2> 	je save2
  4604 0000360B 4B                  <2> 	dec ebx
  4605 0000360C 4E                  <2> 	dec esi
  4606 0000360D E9F3FFFFFF          <2> 	jmp varfnd
  4607 00003612 4B                  <2> save2:	dec ebx
  4608 00003613 4E                  <2> 	dec esi
  4609 00003614 8A03                <2> 	mov al, [ebx]
  4610 00003616 3C05                <2> 	cmp al, 5
  4611 00003618 7405                <2> 	je remove
  4612 0000361A E9E6FFFFFF          <2> 	jmp varfnd
  4613 0000361F 8A03                <2> remove: mov al, [ebx]
  4614 00003621 3C00                <2> 	cmp al, 0
  4615 00003623 748F                <2> 	je seek
  4616 00003625 30C0                <2> 	xor al, al
  4617 00003627 8803                <2> 	mov [ebx], al
  4618 00003629 43                  <2> 	inc ebx
  4619 0000362A E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4620 0000362F 8B35[3F2D0000]      <2> save:	mov esi, [currentcommandloc]
  4621 00003635 43                  <2> 	inc ebx
  4622 00003636 B005                <2> 	mov al, 5
  4623 00003638 B404                <2> 	mov ah, 4
  4624 0000363A 668903              <2> 	mov [ebx], ax
  4625 0000363D 43                  <2> 	inc ebx
  4626 0000363E 43                  <2> svhere:	inc ebx
  4627 0000363F 46                  <2> 	inc esi
  4628 00003640 8A06                <2> 	mov al, [esi]
  4629 00003642 3C00                <2> 	cmp al, 0
  4630 00003644 0F8456000000        <2> 	je near svdone
  4631 0000364A 3C25                <2> 	cmp al, '%'
  4632 0000364C 7407                <2> 	je ans2
  4633 0000364E 8803                <2> 	mov [ebx], al	
  4634 00003650 E9E9FFFFFF          <2> 	jmp svhere
  4635 00003655 56                  <2> ans2:	push esi
  4636 00003656 BE[48960300]        <2> 	mov esi, buf2
  4637 0000365B E82C000000          <2> 	call ansfnd
  4638 00003660 E806000000          <2> 	call anscp
  4639 00003665 5E                  <2> 	pop esi
  4640 00003666 E9D3FFFFFF          <2> 	jmp svhere
  4641 0000366B 8A06                <2> anscp:	mov al, [esi]
  4642 0000366D 8803                <2> 	mov [ebx], al
  4643 0000366F 81FE[5C960300]      <2> 	cmp esi, numbuf
  4644 00003675 74C7                <2> 	je svhere
  4645 00003677 3C00                <2> 	cmp al, 0
  4646 00003679 74C3                <2> 	je svhere
  4647 0000367B 43                  <2> 	inc ebx
  4648 0000367C 46                  <2> 	inc esi
  4649 0000367D E9E9FFFFFF          <2> 	jmp anscp
  4650 00003682 5E                  <2> ansnf:	pop esi
  4651 00003683 8A06                <2> 	mov al, [esi]
  4652 00003685 8803                <2> 	mov [ebx], al
  4653 00003687 E9B2FFFFFF          <2> 	jmp svhere
  4654 0000368C 46                  <2> ansfnd:	inc esi
  4655 0000368D 81FE[5B960300]      <2> 	cmp esi, numbuf - 1
  4656 00003693 740A                <2> 	je fndans
  4657 00003695 8A06                <2> 	mov al, [esi]
  4658 00003697 3C00                <2> 	cmp al, 0
  4659 00003699 74E7                <2> 	je ansnf
  4660 0000369B 3C30                <2> 	cmp al, '0'
  4661 0000369D 74ED                <2> 	je ansfnd
  4662                              <2> fndans:
  4663 0000369F C3                  <2> 	ret
  4664 000036A0 30C0                <2> svdone:	xor al, al
  4665 000036A2 8803                <2> 	mov [ebx], al
  4666 000036A4 C3                  <2> 	ret
  4667                              <1> %include 'source/programs/_run.asm' ;./
  4668                              <2> 
  4669 000036A5 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4670 000036A9 FF2C2E2F00          <2> 	db 255,44,"./",0
  4671                              <2> rundiskprog:
  4672 000036AE 8B3D[3F2D0000]      <2> 	mov edi, [currentcommandloc]
  4673 000036B4 81C702000000        <2> 	add edi, 2
  4674 000036BA BE00004000          <2> 	mov esi, 0x400000
  4675 000036BF E8DE250000          <2> 	call loadfile
  4676 000036C4 81FA94010000        <2> 	cmp edx, 404
  4677 000036CA 746A                <2> 	je noprogfound
  4678 000036CC BB00004000          <2> 	mov ebx, 0x400000
  4679 000036D1 A1[A5360000]        <2> 	mov eax, [elfstart]
  4680 000036D6 3903                <2> 	cmp [ebx], eax
  4681 000036D8 0F8437000000        <2> 	je near runelf
  4682 000036DE 66813B4558          <2> 	cmp word [ebx], "EX"
  4683 000036E3 7577                <2> 	jne progbatchfound
  4684 000036E5 81C302000000        <2> 	add ebx, 2
  4685 000036EB 8B3D[3F2D0000]      <2> 	mov edi, [currentcommandloc]
  4686 000036F1 81C702000000        <2> 	add edi, 2
  4687                              <2> findspaceprog:
  4688 000036F7 8A07                <2> 	mov al, [edi]
  4689 000036F9 47                  <2> 	inc edi
  4690 000036FA 3C20                <2> 	cmp al, " "
  4691 000036FC 75F9                <2> 	jne findspaceprog
  4692                              <2> findnonspaceprog:
  4693 000036FE 8A07                <2> 	mov al, [edi]
  4694 00003700 47                  <2> 	inc edi
  4695 00003701 3C20                <2> 	cmp al, " "
  4696 00003703 74F9                <2> 	je findnonspaceprog
  4697 00003705 4F                  <2> 	dec edi
  4698 00003706 8925[C87B0300]      <2> 	mov [previousstack], esp
  4699 0000370C FFD3                <2> 	call ebx
  4700 0000370E 8B25[C87B0300]      <2> 	mov esp, [previousstack]
  4701 00003714 C3                  <2> 	ret
  4702                              <2> runelf:
  4703 00003715 8B3D[3F2D0000]      <2> 	mov edi, [currentcommandloc]
  4704 0000371B 81C702000000        <2> 	add edi, 2
  4705 00003721 81C380000000        <2> 	add ebx, 0x80
  4706 00003727 8925[C87B0300]      <2> 	mov [previousstack], esp
  4707 0000372D FFD3                <2> 	call ebx
  4708 0000372F 8B25[C87B0300]      <2> 	mov esp, [previousstack]
  4709 00003735 C3                  <2> 	ret
  4710                              <2> noprogfound:
  4711 00003736 BE[E5620000]        <2> 	mov esi, notfound1
  4712 0000373B E8B7E4FFFF          <2> 	call print
  4713 00003740 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  4714 00003746 81C602000000        <2> 	add esi, 2
  4715 0000374C E8A6E4FFFF          <2> 	call print
  4716 00003751 BE[ED620000]        <2> 	mov esi, notfound2
  4717 00003756 E89CE4FFFF          <2> 	call print
  4718 0000375B C3                  <2> 	ret
  4719                              <2> progbatchfound:
  4720 0000375C BF00004000          <2> 		mov edi, 0x400000
  4721 00003761 C605[427E0300]01    <2> 		mov byte [BATCHISON], 1
  4722                              <2> 	batchrunloop:
  4723 00003768 E8E4F2FFFF          <2> 		call buftxtclear
  4724 0000376D BE[48920300]        <2> 		mov esi, buftxt
  4725 00003772 8935[3F2D0000]      <2> 		mov [currentcommandloc], esi
  4726                              <2> 	batchrunloop2:
  4727 00003778 B10A                <2> 		mov cl, 10
  4728 0000377A B50D                <2> 		mov ch, 13
  4729 0000377C 380F                <2> 		cmp [edi], cl
  4730 0000377E 0F841C000000        <2> 		je near nxtbatchrunline
  4731 00003784 382F                <2> 		cmp [edi], ch
  4732 00003786 0F8414000000        <2> 		je near nxtbatchrunline
  4733 0000378C 803F00              <2> 		cmp byte [edi], 0
  4734 0000378F 0F840B000000        <2> 		je near nxtbatchrunline
  4735 00003795 8A07                <2> 		mov al, [edi]
  4736 00003797 8806                <2> 		mov [esi], al
  4737 00003799 46                  <2> 		inc esi
  4738 0000379A 47                  <2> 		inc edi
  4739 0000379B E9D8FFFFFF          <2> 		jmp batchrunloop2
  4740                              <2> 	nxtbatchrunline:
  4741 000037A0 47                  <2> 		inc edi
  4742 000037A1 380F                <2> 		cmp [edi], cl
  4743 000037A3 74FB                <2> 		je nxtbatchrunline
  4744 000037A5 382F                <2> 		cmp [edi], ch
  4745 000037A7 74F7                <2> 		je nxtbatchrunline
  4746 000037A9 893D[07380000]      <2> 		mov [batchedi], edi
  4747 000037AF 893D[3E7E0300]      <2> 		mov [BATCHPOS], edi
  4748 000037B5 C60600              <2> 		mov byte [esi], 0
  4749 000037B8 BE[48920300]        <2> 		mov esi, buftxt
  4750 000037BD 803E00              <2> 		cmp byte [esi], 0
  4751 000037C0 0F8439000000        <2> 		je near nobatchfoundrun
  4752 000037C6 31DB                <2> 		xor ebx, ebx
  4753 000037C8 8A1D[D97D0300]      <2> 		mov bl, [IFON]
  4754 000037CE 80FB00              <2> 		cmp bl, 0
  4755 000037D1 0F8534000000        <2> 		jne near iftestbatch
  4756                              <2> 	doneiftest:
  4757 000037D7 803D[E0380000]00    <2> 		cmp byte [runnextline], 0
  4758 000037DE 0F8405000000        <2> 		je near noruniftest
  4759 000037E4 E87AF4FFFF          <2> 		call run
  4760                              <2> 	noruniftest:
  4761 000037E9 C605[E0380000]01    <2> 		mov byte [runnextline], 1
  4762 000037F0 8B3D[07380000]      <2> 		mov edi, [batchedi]
  4763 000037F6 803F00              <2> 		cmp byte [edi], 0
  4764 000037F9 0F8569FFFFFF        <2> 		jne near batchrunloop
  4765                              <2> 	nobatchfoundrun:
  4766 000037FF C605[427E0300]00    <2> 		mov byte [BATCHISON], 0
  4767 00003806 C3                  <2> 		ret
  4768                              <2> 	
  4769 00003807 00000000            <2> batchedi dd 0	
  4770                              <2> 	
  4771                              <2> 	iftestbatch:
  4772 0000380B BE[DA7D0300]        <2> 		mov esi, IFTRUE
  4773 00003810 01DE                <2> 		add esi, ebx
  4774 00003812 803E00              <2> 		cmp byte [esi], 0
  4775 00003815 0F85BCFFFFFF        <2> 		jne near doneiftest
  4776 0000381B 881D[E1380000]      <2> 		mov [iffalsebuf], bl
  4777 00003821 803D[437E0300]01    <2> 		cmp byte [LOOPON], 1
  4778 00003828 0F8513000000        <2> 		jne near fifindbatch
  4779 0000382E E935FFFFFF          <2> 		jmp batchrunloop
  4780                              <2> 	elsetestbatch:
  4781 00003833 C60601              <2> 		mov byte [esi], 1
  4782 00003836 81C705000000        <2> 		add edi, 5
  4783 0000383C E927FFFFFF          <2> 		jmp batchrunloop
  4784                              <2> 	fifindbatch:
  4785 00003841 66B96966            <2> 		mov cx, "if"
  4786 00003845 66B86669            <2> 		mov ax, "fi"
  4787 00003849 663907              <2> 		cmp [edi], ax
  4788 0000384C 0F8424000000        <2> 		je near fifoundbatch
  4789 00003852 66390F              <2> 		cmp [edi], cx
  4790 00003855 0F8468000000        <2> 		je near iffoundbatch
  4791 0000385B 803F00              <2> 		cmp byte [edi], 0
  4792 0000385E 0F8412000000        <2> 		je near fifoundbatch
  4793 00003864 B8656C7365          <2> 		mov eax, "else"
  4794 00003869 3907                <2> 		cmp [edi], eax
  4795 0000386B 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4796 00003871 E973FFFFFF          <2> 		jmp noruniftest
  4797                              <2> 	fifoundbatch:
  4798 00003876 81C702000000        <2> 		add edi, 2
  4799 0000387C B00A                <2> 		mov al, 10
  4800 0000387E 3807                <2> 		cmp [edi], al
  4801 00003880 0F840E000000        <2> 		je near goodfibatch
  4802 00003886 803F00              <2> 		cmp byte [edi], 0
  4803 00003889 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4804 0000388F E9ADFFFFFF          <2> 		jmp fifindbatch
  4805                              <2> 	goodfibatch:
  4806 00003894 B001                <2> 		mov al, 1
  4807 00003896 2805[D97D0300]      <2> 		sub [IFON], al 
  4808 0000389C A0[D97D0300]        <2> 		mov al, [IFON]
  4809 000038A1 8A1D[E1380000]      <2> 		mov bl, [iffalsebuf]
  4810 000038A7 38D8                <2> 		cmp al, bl
  4811 000038A9 7796                <2> 		ja fifindbatch
  4812 000038AB 8B35[3F2D0000]      <2> 		mov esi, [currentcommandloc]
  4813 000038B1 81EF02000000        <2> 		sub edi, 2
  4814 000038B7 C605[E0380000]00    <2> 		mov byte [runnextline], 0
  4815 000038BE E9A5FEFFFF          <2> 		jmp batchrunloop
  4816                              <2> 	iffoundbatch:
  4817 000038C3 B020                <2> 		mov al, ' '
  4818 000038C5 81C702000000        <2> 		add edi, 2
  4819 000038CB 3807                <2> 		cmp [edi], al
  4820 000038CD 0F856EFFFFFF        <2> 		jne near fifindbatch
  4821 000038D3 B001                <2> 		mov al, 1
  4822 000038D5 0005[D97D0300]      <2> 		add [IFON], al
  4823 000038DB E961FFFFFF          <2> 		jmp fifindbatch
  4824                              <2> 		
  4825                              <2> 		
  4826 000038E0 01                  <2> runnextline db 1
  4827 000038E1 00                  <2> iffalsebuf db 0
  4828 000038E2 C3                  <2> notbatch: ret 
  4829                              <1> %ifdef network.included
  4830                              <1> 	%include 'source/programs/arp.asm'
  4831 000038E3 FF2C61727000        <2> db 255,44,"arp",0
  4832                              <2> 	;ARP TESTING
  4833                              <2> arptest:
  4834 000038E9 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  4835 000038EF 81C604000000        <2> 	add esi, 4
  4836 000038F5 E8EB280000          <2> 	call strtoip
  4837 000038FA 890D[A1390000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4838 00003900 E826290000          <2> 	call showip
  4839 00003905 803D[A5390000]01    <2> 	cmp byte [arpconfig], 1
  4840 0000390C 7405                <2> 	je arptest2
  4841 0000390E E841000000          <2> 	call arpinit
  4842                              <2> arptest2:	;try to reach 192.168.0.1
  4843 00003913 8B0D[D7620000]      <2> 	mov ecx, [sysmac]
  4844 00003919 668B1D[DB620000]    <2> 	mov bx, [sysmac + 4]
  4845 00003920 890D[81390000]      <2> 	mov [sourcemac], ecx
  4846 00003926 66891D[85390000]    <2> 	mov [sourcemac + 4],bx
  4847 0000392D 890D[91390000]      <2> 	mov [arpsenderinfo], ecx
  4848 00003933 66891D[95390000]    <2> 	mov [arpsenderinfo + 4], bx
  4849 0000393A BF[7B390000]        <2> 	mov edi, frame
  4850 0000393F BE[A5390000]        <2> 	mov esi, framend
  4851 00003944 E86A280000          <2> 	call sendpacket
  4852 00003949 BE[1E630000]        <2> 	mov esi, line
  4853 0000394E E8A4E2FFFF          <2> 	call print
  4854 00003953 C3                  <2> 	ret
  4855                              <2> 	
  4856                              <2> arpinit:
  4857 00003954 BE[A6390000]        <2> 	mov esi, arptable
  4858 00003959 BF[D7620000]        <2> 	mov edi, sysmac
  4859 0000395E BB[D3620000]        <2> 	mov ebx, sysip
  4860 00003963 8B0F                <2> 	mov ecx, [edi]
  4861 00003965 890E                <2> 	mov [esi], ecx
  4862 00003967 668B4F04            <2> 	mov cx, [edi + 4]
  4863 0000396B 894E04              <2> 	mov [esi + 4], ecx
  4864 0000396E 8B0B                <2> 	mov ecx, [ebx]
  4865 00003970 894E06              <2> 	mov [esi + 6], ecx
  4866 00003973 C605[A5390000]01    <2> 	mov byte [arpconfig], 1
  4867 0000397A C3                  <2> 	ret
  4868                              <2> 	
  4869                              <2> ;example frame
  4870                              <2> frame:
  4871 0000397B FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4872 00003981 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4873 00003987 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4874                              <2> 	;;example packet
  4875 00003989 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4876 0000398B 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4877 0000398D 0604                <2> 					db 6,4			;length of mac, length of ip
  4878 0000398F 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4879 00003991 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4880 00003997 C0A80073            <2> 					db 192,168,0,115		;ip
  4881 0000399B 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4882 000039A1 C0A80000            <2> 					db 192,168,0,0			;ip
  4883                              <2> framend:
  4884                              <2> 
  4885 000039A5 00                  <2> arpconfig db 0
  4886                              <2> arptable:	;;mac,ip
  4887 000039A6 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4888 000039AF 00<rept>            <2>
  4889                              <2> arptableend:	
  4890                              <1> %endif
  4891                              <1> %include 'source/programs/batch.asm'
  4892 00003A0A FF2C626174636800    <2> db 255,44,"batch",0
  4893                              <2> 	batchst: 
  4894 00003A12 8B3D[3F2D0000]      <2> 		mov edi, [currentcommandloc]
  4895 00003A18 81C706000000        <2> 		add edi, 6
  4896 00003A1E 803F00              <2> 		cmp byte [edi], 0
  4897 00003A21 0F846D000000        <2> 		je near nonamefound
  4898 00003A27 BE00004000          <2> 		mov esi, 0x400000
  4899 00003A2C E871220000          <2> 		call loadfile
  4900 00003A31 89D0                <2> 		mov eax, edx
  4901 00003A33 3D94010000          <2> 		cmp eax, 404
  4902 00003A38 7465                <2> 		je goodbatchname
  4903 00003A3A BE[453A0000]        <2> 		mov esi, badbatchname
  4904 00003A3F E8B3E1FFFF          <2> 		call print
  4905 00003A44 C3                  <2> 		ret
  4906 00003A45 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4907 00003A4E 20616C726561647920- <2>
  4908 00003A57 657869737473210A00  <2>
  4909 00003A60 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4910 00003A69 746F20747970652061- <2>
  4911 00003A72 206E616D6520616674- <2>
  4912 00003A7B 65722074686520636F- <2>
  4913 00003A84 6D6D616E642E0A00    <2>
  4914 00003A8C 00000000            <2> 		esicache3 dd 0
  4915 00003A90 00000000            <2> 		esicache2 dd 0
  4916                              <2> 	nonamefound:
  4917 00003A94 BE[603A0000]        <2> 		mov esi, namenotfoundbatch
  4918 00003A99 E859E1FFFF          <2> 		call print
  4919 00003A9E C3                  <2> 		ret
  4920                              <2> 	goodbatchname:
  4921 00003A9F BE00004000          <2> 		mov esi, 0x400000
  4922                              <2> 	batchcreate:
  4923 00003AA4 8935[8C3A0000]      <2> 		mov [esicache3], esi
  4924 00003AAA BF00008000          <2> 		mov edi, 0x800000
  4925 00003AAF B00A                <2> 		mov al, 10
  4926 00003AB1 B307                <2> 		mov bl, 7
  4927 00003AB3 B404                <2> 		mov ah, 4
  4928 00003AB5 CD30                <2> 		int 30h
  4929 00003AB7 8935[903A0000]      <2> 		mov [esicache2], esi
  4930 00003ABD 8A0E                <2> 		mov cl, [esi]
  4931 00003ABF 8B35[8C3A0000]      <2> 		mov esi, [esicache3]
  4932 00003AC5 BB[FC3A0000]        <2> 		mov ebx, exitword
  4933 00003ACA E8B5F2FFFF          <2> 		call cndtest
  4934 00003ACF 3C01                <2> 		cmp al, 1
  4935 00003AD1 7414                <2> 		je endbatchcreate
  4936 00003AD3 3C02                <2> 		cmp al, 2
  4937 00003AD5 7410                <2> 		je endbatchcreate
  4938 00003AD7 8B35[903A0000]      <2> 		mov esi, [esicache2]
  4939 00003ADD B00A                <2> 		mov al, 10
  4940 00003ADF 8806                <2> 		mov [esi], al
  4941 00003AE1 46                  <2> 		inc esi
  4942 00003AE2 E9BDFFFFFF          <2> 		jmp batchcreate
  4943                              <2> 	endbatchcreate:
  4944 00003AE7 8B35[8C3A0000]      <2> 		mov esi, [esicache3]
  4945 00003AED 31C0                <2> 		xor eax, eax
  4946 00003AEF 8806                <2> 		mov [esi], al
  4947 00003AF1 BE00004000          <2> 		mov esi, 0x400000
  4948 00003AF6 E8FCE0FFFF          <2> 		call print
  4949 00003AFB C3                  <2> 		ret
  4950                              <2> 	
  4951 00003AFC 5C7800              <2> 	exitword db "\x",0
  4952 00003AFF 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4953 00003B08 6F20657869742E0A00  <2>
  4954                              <1> %ifdef gui.background
  4955                              <1> 	%include 'source/programs/background.asm'
  4956                              <1> %endif
  4957                              <1> %include 'source/programs/beep.asm'
  4958 00003B11 FF2C6265657000      <2> 	db 255,44,"beep",0
  4959                              <2> beep:
  4960 00003B18 B8[3D3B0000]        <2> 	mov eax, beepstart
  4961 00003B1D A3[4E020000]        <2> 	mov [soundpos], eax
  4962 00003B22 B8[413B0000]        <2> 	mov eax, beepend
  4963 00003B27 A3[52020000]        <2> 	mov [soundendpos], eax
  4964 00003B2C C605[4B020000]01    <2> 	mov byte [soundon], 1
  4965                              <2> waitforsoundendbeep:
  4966 00003B33 A0[4B020000]        <2> 	mov al, [soundon]
  4967 00003B38 3C00                <2> 	cmp al, 0
  4968 00003B3A 75F7                <2> 	jne waitforsoundendbeep
  4969 00003B3C C3                  <2> 	ret
  4970                              <2> 	
  4971                              <2> beepstart:
  4972 00003B3D 3200D111            <2> 	dw 50, 4561
  4973                              <2> beepend:
  4974                              <1> %ifdef dos.compatible
  4975                              <1> %else
  4976                              <1> 	%include 'source/programs/boot.asm'
  4977 00003B41 FF2C626F6F7400      <2> db 255,44,"boot",0
  4978                              <2> quickboot:
  4979                              <2> 	;load and jump to the bootloader
  4980                              <2> 	; mov ecx, 1
  4981                              <2> 	; xor ebx, ebx
  4982                              <2> 	; mov esi, 0x400000
  4983                              <2> 	; call diskr
  4984                              <2> 	; mov ax, LINEAR_SEL
  4985                              <2> 	; mov fs, ax
  4986                              <2> 	; mov esi, 0x400000
  4987                              <2> 	; mov edi, 0x7C00
  4988                              <2> 	; xor ebx, ebx
  4989                              <2> ; .lp:
  4990                              <2> 	; mov ecx, [esi+ebx]
  4991                              <2> 	; mov [fs:edi+ebx], ecx
  4992                              <2> 	; add ebx, 4
  4993                              <2> 	; cmp ebx, 512
  4994                              <2> 	; jb .lp
  4995 00003B48 66BB[583B]          <2> 	mov bx, bootload
  4996 00003B4C 66891D[D10C0000]    <2> 	mov [realmodeptr], bx
  4997 00003B53 E967D0FFFF          <2> 	jmp realmode
  4998                              <2> [BITS 16]
  4999                              <2> bootload:
  5000 00003B58 B80300              <2> 	mov ax, 3
  5001 00003B5B 31DB                <2> 	xor bx, bx
  5002 00003B5D CD10                <2> 	int 10h
  5003 00003B5F EA007C0000          <2> 	jmp 0:0x7C00
  5004                              <2> [BITS 32]
  5005                              <1> %endif
  5006                              <1> %include 'source/programs/cd.asm'
  5007 00003B64 FF2C636400          <2> db 255,44,"cd",0
  5008                              <2> cd:
  5009 00003B69 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  5010 00003B6F 81C603000000        <2> 	add esi, 3
  5011 00003B75 8B3D[D07B0300]      <2> 	mov edi, [currentfolderloc]
  5012 00003B7B 893D[CC7B0300]      <2> 	mov [lastfolderloc], edi
  5013 00003B81 81C7[D47B0300]      <2> 	add edi, currentfolder
  5014 00003B87 4F                  <2> 	dec edi
  5015 00003B88 66813E2E2E          <2> 	cmp word [esi], ".."
  5016 00003B8D 742A                <2> 	je .moveup
  5017 00003B8F 47                  <2> 	inc edi
  5018                              <2> .movedown:
  5019 00003B90 8A06                <2> 	mov al, [esi]
  5020 00003B92 8807                <2> 	mov [edi], al
  5021 00003B94 47                  <2> 	inc edi
  5022 00003B95 46                  <2> 	inc esi
  5023 00003B96 3C00                <2> 	cmp al, 0
  5024 00003B98 740A                <2> 	je .donecd
  5025 00003B9A 81FF[D47D0300]      <2> 	cmp edi, currentfolderend
  5026 00003BA0 72EE                <2> 	jb .movedown
  5027 00003BA2 30C0                <2> 	xor al, al
  5028                              <2> .donecd:
  5029 00003BA4 4F                  <2> 	dec edi
  5030 00003BA5 C6072F              <2> 	mov byte [edi], '/'
  5031 00003BA8 47                  <2> 	inc edi
  5032 00003BA9 C60700              <2> 	mov byte [edi], 0
  5033 00003BAC 81EF[D47B0300]      <2> 	sub edi, currentfolder
  5034 00003BB2 893D[D07B0300]      <2> 	mov [currentfolderloc], edi
  5035 00003BB8 C3                  <2> 	ret
  5036                              <2> .moveup:
  5037 00003BB9 31C0                <2> 	xor eax, eax
  5038 00003BBB A3[CC7B0300]        <2> 	mov [lastfolderloc], eax
  5039                              <2> .moveuploop:
  5040 00003BC0 4F                  <2> 	dec edi
  5041 00003BC1 8A07                <2> 	mov al, [edi]
  5042 00003BC3 81FF[D47B0300]      <2> 	cmp edi, currentfolder
  5043 00003BC9 763B                <2> 	jbe .moveupover
  5044 00003BCB 3C2F                <2> 	cmp al, '/'
  5045 00003BCD 75F1                <2> 	jne .moveuploop
  5046 00003BCF C6072F              <2> 	mov byte [edi], '/'
  5047 00003BD2 47                  <2> 	inc edi
  5048 00003BD3 C60700              <2> 	mov byte [edi], 0
  5049 00003BD6 81EF[D47B0300]      <2> 	sub edi, currentfolder
  5050 00003BDC 893D[D07B0300]      <2> 	mov [currentfolderloc], edi
  5051 00003BE2 81C7[D47B0300]      <2> 	add edi, currentfolder
  5052 00003BE8 4F                  <2> 	dec edi
  5053                              <2> .lastfolder:
  5054 00003BE9 4F                  <2> 	dec edi
  5055 00003BEA 8A07                <2> 	mov al, [edi]
  5056 00003BEC 81FF[D47B0300]      <2> 	cmp edi, currentfolder
  5057 00003BF2 7604                <2> 	jbe .donemoveup
  5058 00003BF4 3C2F                <2> 	cmp al, '/'
  5059 00003BF6 75F1                <2> 	jne .lastfolder
  5060                              <2> .donemoveup:
  5061 00003BF8 47                  <2> 	inc edi
  5062 00003BF9 81EF[D47B0300]      <2> 	sub edi, currentfolder
  5063 00003BFF 893D[CC7B0300]      <2> 	mov [lastfolderloc], edi
  5064 00003C05 C3                  <2> 	ret
  5065                              <2> .moveupover:
  5066 00003C06 BF[D47B0300]        <2> 	mov edi, currentfolder
  5067 00003C0B C6072F              <2> 	mov byte [edi], '/'
  5068 00003C0E 47                  <2> 	inc edi
  5069 00003C0F C60700              <2> 	mov byte [edi], 0
  5070 00003C12 31C0                <2> 	xor eax, eax
  5071 00003C14 A3[CC7B0300]        <2> 	mov [lastfolderloc], eax
  5072 00003C19 40                  <2> 	inc eax
  5073 00003C1A A3[D07B0300]        <2> 	mov [currentfolderloc], eax
  5074 00003C1F C3                  <2> 	ret
  5075                              <1> %include 'source/programs/charmap.asm'
  5076 00003C20 00                  <2> charmapnum db 0
  5077 00003C21 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5078 00003C2A 00                  <2>
  5079 00003C2B 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  5080 00003C31 81C609000000        <2> 	add esi, 9
  5081 00003C37 803E00              <2> 	cmp byte [esi], 0
  5082 00003C3A 7412                <2> 	je .nospecific
  5083 00003C3C E8AFF4FFFF          <2> 	call cnvrthextxt
  5084 00003C41 6689C8              <2> 	mov ax, cx
  5085 00003C44 66BB0700            <2> 	mov bx, 7
  5086 00003C48 E856E6FFFF          <2> 	call prcharq
  5087 00003C4D C3                  <2> 	ret
  5088                              <2> .nospecific:
  5089 00003C4E 66BB0700            <2> 	mov bx, 7
  5090 00003C52 66B82000            <2> 	mov ax, " "
  5091 00003C56 C605[203C0000]00    <2> 	mov byte [charmapnum], 0
  5092 00003C5D E841E6FFFF          <2> 	call prcharq
  5093 00003C62 E83CE6FFFF          <2> 	call prcharq
  5094 00003C67 E837E6FFFF          <2> 	call prcharq
  5095 00003C6C E832E6FFFF          <2> 	call prcharq
  5096 00003C71 66B83000            <2> 	mov ax, "0"
  5097                              <2> charmapnumprnt:
  5098 00003C75 E829E6FFFF          <2> 	call prcharq
  5099 00003C7A 6640                <2> 	inc ax
  5100 00003C7C 6650                <2> 	push ax
  5101 00003C7E 66B82000            <2> 	mov ax, " "
  5102 00003C82 E81CE6FFFF          <2> 	call prcharq
  5103 00003C87 6658                <2> 	pop ax
  5104 00003C89 663D3900            <2> 	cmp ax, "9"
  5105 00003C8D 76E6                <2> 	jbe charmapnumprnt
  5106 00003C8F 66B84100            <2> 	mov ax, "A"
  5107                              <2> charmapnumprnt2:
  5108 00003C93 E80BE6FFFF          <2> 	call prcharq
  5109 00003C98 6640                <2> 	inc ax
  5110 00003C9A 6650                <2> 	push ax
  5111 00003C9C 66B82000            <2> 	mov ax, " "
  5112 00003CA0 E8FEE5FFFF          <2> 	call prcharq
  5113 00003CA5 6658                <2> 	pop ax
  5114 00003CA7 663D4700            <2> 	cmp ax, "G"
  5115 00003CAB 72E6                <2> 	jb charmapnumprnt2
  5116                              <2> 	
  5117 00003CAD BE[1E630000]        <2> 	mov esi, line
  5118 00003CB2 E821DFFFFF          <2> 	call printquiet
  5119 00003CB7 6631C0              <2> 	xor ax, ax
  5120 00003CBA 6689C1              <2> 	mov cx, ax
  5121 00003CBD E8B7F2FFFF          <2> 	call showhexsmall
  5122 00003CC2 E973000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5123                              <2> charmapcopy:
  5124 00003CC7 6640                <2> 	inc ax
  5125 00003CC9 6650                <2> 	push ax
  5126 00003CCB 663D0800            <2> 	cmp ax, 8
  5127 00003CCF 7469                <2> 	je charmapnocopy
  5128 00003CD1 663D0900            <2> 	cmp ax, 9
  5129 00003CD5 7463                <2> 	je charmapnocopy
  5130 00003CD7 663D0A00            <2> 	cmp ax, 10
  5131 00003CDB 745D                <2> 	je charmapnocopy
  5132 00003CDD 663D0D00            <2> 	cmp ax, 13
  5133 00003CE1 7457                <2> 	je charmapnocopy
  5134 00003CE3 663DFF00            <2> 	cmp ax, 255
  5135 00003CE7 7451                <2> 	je charmapnocopy
  5136 00003CE9 663D0001            <2> 	cmp ax, 256
  5137 00003CED 7446                <2> 	je nomorecharmap
  5138 00003CEF E8AFE5FFFF          <2> 	call prcharq
  5139 00003CF4 66B82000            <2> 	mov ax, " "
  5140 00003CF8 E8A6E5FFFF          <2> 	call prcharq
  5141 00003CFD 6658                <2> 	pop ax
  5142                              <2> charmapcopycheck:
  5143 00003CFF FE05[203C0000]      <2> 	inc byte [charmapnum]
  5144 00003D05 803D[203C0000]10    <2> 	cmp byte [charmapnum], 16
  5145 00003D0C 72B9                <2> 	jb charmapcopy
  5146 00003D0E 6650                <2> 	push ax
  5147 00003D10 BE[1E630000]        <2> 	mov esi, line
  5148 00003D15 E8BEDEFFFF          <2> 	call printquiet
  5149 00003D1A 6658                <2> 	pop ax
  5150 00003D1C 3CFF                <2> 	cmp al, 255
  5151 00003D1E 7415                <2> 	je nomorecharmap
  5152 00003D20 88C1                <2> 	mov cl, al
  5153 00003D22 FEC1                <2> 	inc cl
  5154 00003D24 E850F2FFFF          <2> 	call showhexsmall
  5155 00003D29 C605[203C0000]00    <2> 	mov byte [charmapnum], 0
  5156 00003D30 E992FFFFFF          <2> 	jmp charmapcopy
  5157                              <2> nomorecharmap:
  5158 00003D35 E940EDFFFF          <2> 	jmp nwcmd
  5159                              <2> charmapnocopy:
  5160 00003D3A 6650                <2> 	push ax
  5161 00003D3C 66B82000            <2> 	mov ax, " "
  5162 00003D40 E85EE5FFFF          <2> 	call prcharq
  5163 00003D45 E859E5FFFF          <2> 	call prcharq
  5164 00003D4A 6658                <2> 	pop ax
  5165 00003D4C E9AEFFFFFF          <2> 	jmp charmapcopycheck
  5166                              <1> %ifdef gui.included
  5167                              <1> 	%include 'source/programs/circle.asm'
  5168                              <1> %endif
  5169                              <1> %include 'source/programs/clear.asm'
  5170 00003D51 FF2C636C65617200    <2> db 255,44,"clear",0
  5171 00003D59 E84BDFFFFF          <2> 		call clear
  5172 00003D5E C3                  <2> 		ret 
  5173                              <1> %include 'source/programs/cpuid.asm'
  5174 00003D5F FF2C637075696400    <2> db 255,44,"cpuid",0
  5175 00003D67 31C0                <2> 	xor eax, eax
  5176 00003D69 0FA2                <2> 	cpuid
  5177 00003D6B 891D[BC3D0000]      <2> 	mov [cpuidbuf], ebx
  5178 00003D71 8915[C03D0000]      <2> 	mov [cpuidbuf + 4], edx
  5179 00003D77 890D[C43D0000]      <2> 	mov [cpuidbuf + 8], ecx
  5180 00003D7D BE[BC3D0000]        <2> 	mov esi, cpuidbuf
  5181 00003D82 E870DEFFFF          <2> 	call print
  5182 00003D87 BE[1E630000]        <2> 	mov esi, line
  5183 00003D8C E866DEFFFF          <2> 	call print
  5184 00003D91 B801000000          <2> 	mov eax, 1
  5185 00003D96 0FA2                <2> 	cpuid
  5186 00003D98 89C1                <2> 	mov ecx, eax
  5187 00003D9A C605[782F0000]02    <2> 	mov byte [firsthexshown], 2
  5188 00003DA1 E8E7F1FFFF          <2> 	call showhex
  5189 00003DA6 B808000080          <2> 	mov eax, 0x80000008
  5190 00003DAB 0FA2                <2> 	cpuid
  5191 00003DAD 89C1                <2> 	mov ecx, eax
  5192 00003DAF C605[782F0000]02    <2> 	mov byte [firsthexshown], 2
  5193 00003DB6 E8D2F1FFFF          <2> 	call showhex
  5194 00003DBB C3                  <2> 	ret
  5195                              <2> 	
  5196 00003DBC 00<rept>            <2> cpuidbuf times 13 db 0
  5197                              <2> cpuidvendorend:
  5198                              <1> %include 'source/programs/date.asm'
  5199 00003DC9 082E30303030303030- <2> timenscache db 8,".000000000"
  5200 00003DD2 3030                <2>
  5201 00003DD4 200A00              <2> timenscacheend: db " ",10,0
  5202 00003DD7 00                  <2> istimeset db 0
  5203 00003DD8 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5204 00003DE1 2063757272656E7420- <2>
  5205 00003DEA 554E49582074696D65- <2>
  5206 00003DF3 3A0A00              <2>
  5207 00003DF6 00<rept>            <2> timeinputbuffer times 12 db 0
  5208 00003E02 00                  <2> timeinputbend: db 0
  5209                              <2> 
  5210 00003E03 FF2C6461746500      <2> db 255,44,"date",0
  5211                              <2> 	;cmp byte [istimeset], 0
  5212                              <2> 	;jne timeisset
  5213 00003E0A E880000000          <2> 	call time
  5214 00003E0F E828020000          <2> 	call timeconvert	
  5215                              <2> 	; mov esi, settimemsg
  5216                              <2> 	; call print
  5217                              <2> 	; mov esi, timeinputbuffer
  5218                              <2> 	; mov edi, timeinputbend
  5219                              <2> 	; call readline
  5220                              <2> 	; mov esi, timeinputbuffer
  5221                              <2> 	; xor edi, edi
  5222                              <2> 	; call cnvrttxt
  5223 00003E14 890D[43020000]      <2> 	mov [timeseconds], ecx
  5224                              <2> 	;xor ecx, ecx
  5225                              <2> 	;mov [timenanoseconds], ecx
  5226 00003E1A C605[D73D0000]01    <2> 	mov byte [istimeset], 1
  5227                              <2> timeisset:
  5228 00003E21 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  5229 00003E27 E82BF2FFFF          <2> 	call showdec
  5230                              <2> 	
  5231 00003E2C 8B0D[47020000]      <2> 	mov ecx, [timenanoseconds]
  5232 00003E32 BE[C93D0000]        <2> 	mov esi, timenscache
  5233 00003E37 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5234 00003E3E C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5235 00003E45 C6460A30            <2> 	mov byte [esi + 10], "0"
  5236 00003E49 BE[D43D0000]        <2> 	mov esi, timenscacheend
  5237 00003E4E E8D2EFFFFF          <2> 	call convert
  5238 00003E53 BE[C93D0000]        <2> 	mov esi, timenscache
  5239 00003E58 E87BDDFFFF          <2> 	call printquiet
  5240                              <2> 	
  5241 00003E5D E82D000000          <2> 	call time
  5242 00003E62 BE[AA410000]        <2> 	mov esi, timeshow
  5243 00003E67 E86CDDFFFF          <2> 	call printquiet
  5244 00003E6C BE[1E630000]        <2> 	mov esi, line
  5245 00003E71 E862DDFFFF          <2> 	call printquiet
  5246 00003E76 BE[B3410000]        <2> 	mov esi, dateshow
  5247 00003E7B E858DDFFFF          <2> 	call printquiet
  5248 00003E80 BE[1E630000]        <2> 	mov esi, line
  5249 00003E85 E84EDDFFFF          <2> 	call printquiet
  5250 00003E8A E9BE000000          <2> 	jmp findday
  5251                              <2> time:
  5252 00003E8F E851010000          <2> 	call tstackput1
  5253 00003E94 B00A                <2> 	mov al,10			;Get RTC register A
  5254 00003E96 E87B010000          <2> 	call tget1
  5255 00003E9B A880                <2> 	test al,0x80			;Is update in progress?
  5256 00003E9D 75F0                <2> 	jne time				; yes, wait
  5257                              <2> 
  5258 00003E9F B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5259 00003EA1 E870010000          <2> 	call tget1
  5260 00003EA6 A2[A1410000]        <2> 	mov [RTCtimeSecond],al
  5261                              <2> 
  5262 00003EAB B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5263 00003EAD E864010000          <2> 	call tget1
  5264 00003EB2 A2[A2410000]        <2> 	mov [RTCtimeMinute],al
  5265                              <2> 
  5266 00003EB7 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5267 00003EB9 E858010000          <2> 	call tget1
  5268 00003EBE A2[A3410000]        <2> 	mov [RTCtimeHour],al
  5269                              <2> 
  5270 00003EC3 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5271 00003EC5 E84C010000          <2> 	call tget1
  5272 00003ECA A2[A4410000]        <2> 	mov [RTCtimeDay],al
  5273                              <2> 
  5274 00003ECF B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5275 00003ED1 E840010000          <2> 	call tget1
  5276 00003ED6 241F                <2> 	and al, 11111b
  5277 00003ED8 A2[A5410000]        <2> 	mov [RTCtimeMonth],al
  5278                              <2> 
  5279 00003EDD B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5280 00003EDF E832010000          <2> 	call tget1
  5281 00003EE4 A2[A6410000]        <2> 	mov [RTCtimeYear],al
  5282                              <2> 	
  5283 00003EE9 BE[AA410000]        <2> 	mov esi, timeshow
  5284 00003EEE 8A2D[A3410000]      <2> 	mov ch, [RTCtimeHour]
  5285 00003EF4 E828010000          <2> 	call tput1
  5286 00003EF9 8A2D[A2410000]      <2> 	mov ch, [RTCtimeMinute]
  5287 00003EFF E81D010000          <2> 	call tput1
  5288 00003F04 8A2D[A1410000]      <2> 	mov ch, [RTCtimeSecond]
  5289 00003F0A E812010000          <2> 	call tput1
  5290 00003F0F BE[B3410000]        <2> 	mov esi, dateshow
  5291 00003F14 8A2D[A5410000]      <2> 	mov ch, [RTCtimeMonth]
  5292 00003F1A E802010000          <2> 	call tput1
  5293 00003F1F 8A2D[A4410000]      <2> 	mov ch, [RTCtimeDay]
  5294 00003F25 E8F7000000          <2> 	call tput1
  5295 00003F2A B520                <2> 	mov ch, 0x20
  5296 00003F2C E8F0000000          <2> 	call tput1
  5297 00003F31 4E                  <2> 	dec esi
  5298 00003F32 8A2D[A6410000]      <2> 	mov ch, [RTCtimeYear]
  5299 00003F38 E8E4000000          <2> 	call tput1
  5300 00003F3D E8BD000000          <2> 	call tstackget1
  5301 00003F42 C3                  <2> 	ret
  5302 00003F43 BE[AA410000]        <2> 	mov esi, timeshow
  5303 00003F48 E8AADCFFFF          <2> 	call print
  5304                              <2> ;;get day of week
  5305                              <2> ;;add these:
  5306                              <2> ;;century value
  5307                              <2> ;;last 2 digits of year
  5308                              <2> ;;last 2 digits of year right shifted twice
  5309                              <2> ;;month table value
  5310                              <2> ;;day of the month
  5311                              <2> ;;divide these by 7
  5312                              <2> ;;the remainder is the day
  5313                              <2> findday:
  5314 00003F4D 31C0                <2> 	xor eax, eax
  5315                              <2> ;;first convert the values from BCD to hex
  5316 00003F4F A0[A4410000]        <2> 	mov al, [RTCtimeDay]
  5317 00003F54 E873000000          <2> 	call converttohex
  5318 00003F59 8825[A7410000]      <2> 	mov [dayhex], ah
  5319 00003F5F A0[A5410000]        <2> 	mov al, [RTCtimeMonth]
  5320 00003F64 E863000000          <2> 	call converttohex
  5321 00003F69 8825[A8410000]      <2> 	mov [monthhex], ah
  5322 00003F6F A0[A6410000]        <2> 	mov al, [RTCtimeYear]
  5323 00003F74 E853000000          <2> 	call converttohex
  5324 00003F79 8825[A9410000]      <2> 	mov [yearhex], ah
  5325 00003F7F 31C0                <2> 	xor eax, eax
  5326 00003F81 A0[A9410000]        <2> 	mov al, [yearhex]
  5327 00003F86 C0E802              <2> 	shr al, 2
  5328 00003F89 0205[A9410000]      <2> 	add al, [yearhex]
  5329 00003F8F 0506000000          <2> 	add eax, 6
  5330 00003F94 31DB                <2> 	xor ebx, ebx
  5331 00003F96 8A1D[A8410000]      <2> 	mov bl, [monthhex]
  5332 00003F9C FECB                <2> 	dec bl
  5333 00003F9E 81C3[C8410000]      <2> 	add ebx, month
  5334 00003FA4 31C9                <2> 	xor ecx, ecx
  5335 00003FA6 8A0B                <2> 	mov cl, [ebx]
  5336 00003FA8 01C8                <2> 	add eax, ecx
  5337 00003FAA 8A0D[A7410000]      <2> 	mov cl, [dayhex]
  5338 00003FB0 01C8                <2> 	add eax, ecx
  5339 00003FB2 66BB0700            <2> 	mov bx, 7
  5340 00003FB6 31D2                <2> 	xor edx, edx
  5341 00003FB8 66F7F3              <2> 	div bx
  5342 00003FBB C1E202              <2> 	shl edx, 2
  5343 00003FBE 81C2[D4410000]      <2> 	add edx, day
  5344 00003FC4 8B32                <2> 	mov esi, [edx]
  5345 00003FC6 E82CDCFFFF          <2> 	call print
  5346 00003FCB C3                  <2> 	ret
  5347                              <2> 	
  5348                              <2> converttohex:
  5349 00003FCC 88C4                <2> 	mov ah, al
  5350 00003FCE C0E804              <2> 	shr al, 4
  5351 00003FD1 C0E404              <2> 	shl ah, 4
  5352 00003FD4 C0EC04              <2> 	shr ah, 4
  5353 00003FD7 3C00                <2> 	cmp al, 0
  5354 00003FD9 7409                <2> 	je noconverttohex
  5355                              <2> converttohexlp:
  5356 00003FDB 80C40A              <2> 	add ah, 10
  5357 00003FDE FEC8                <2> 	dec al
  5358 00003FE0 3C00                <2> 	cmp al, 0
  5359 00003FE2 75F7                <2> 	jne converttohexlp
  5360                              <2> noconverttohex:
  5361 00003FE4 C3                  <2> 	ret
  5362                              <2> 	
  5363                              <2> tstackput1:
  5364 00003FE5 8935[9D410000]      <2> 	mov [tstack + 20], esi
  5365 00003FEB BE[89410000]        <2> 	mov esi, tstack
  5366 00003FF0 8906                <2> 	mov [esi], eax
  5367 00003FF2 895E04              <2> 	mov [esi + 4], ebx
  5368 00003FF5 894E08              <2> 	mov [esi + 8], ecx
  5369 00003FF8 89560C              <2> 	mov [esi + 12], edx
  5370 00003FFB 897E10              <2> 	mov [esi + 16], edi
  5371 00003FFE C3                  <2> 	ret
  5372                              <2> 	
  5373                              <2> tstackget1:
  5374 00003FFF BE[89410000]        <2> 	mov esi, tstack
  5375 00004004 8B06                <2> 	mov eax, [esi]
  5376 00004006 8B5E04              <2> 	mov ebx, [esi + 4]
  5377 00004009 8B4E08              <2> 	mov ecx, [esi + 8]
  5378 0000400C 8B560C              <2> 	mov edx, [esi + 12]
  5379 0000400F 8B7E10              <2> 	mov edi, [esi + 16]
  5380 00004012 8B7614              <2> 	mov esi, [esi + 20]
  5381 00004015 C3                  <2> 	ret
  5382                              <2> 	
  5383                              <2> tget1:
  5384 00004016 66BA7000            <2> 	mov dx, 0x70
  5385 0000401A EE                  <2> 	out dx, al
  5386 0000401B 6642                <2> 	inc dx
  5387 0000401D EC                  <2> 	in al, dx
  5388 0000401E 664A                <2> 	dec dx
  5389 00004020 C3                  <2> 	ret
  5390                              <2> 	
  5391                              <2> tput1:
  5392 00004021 66C1E904            <2> 	shr cx, 4
  5393 00004025 B030                <2> 	mov al, 48
  5394 00004027 00E8                <2> 	add al, ch
  5395 00004029 8806                <2> 	mov [esi], al
  5396 0000402B 46                  <2> 	inc esi
  5397 0000402C B030                <2> 	mov al, 48
  5398 0000402E C0E904              <2> 	shr cl, 4
  5399 00004031 00C8                <2> 	add al, cl
  5400 00004033 8806                <2> 	mov [esi], al
  5401 00004035 81C602000000        <2> 	add esi, 2
  5402 0000403B C3                  <2> 	ret
  5403                              <2> 	
  5404                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5405 0000403C 31DB                <2> 	xor ebx, ebx
  5406 0000403E 31C9                <2> 	xor ecx, ecx
  5407 00004040 31FF                <2> 	xor edi, edi
  5408 00004042 31F6                <2> 	xor esi, esi
  5409                              <2> 	
  5410 00004044 A0[A1410000]        <2> 	mov al, [RTCtimeSecond]
  5411 00004049 E87EFFFFFF          <2> 	call converttohex
  5412 0000404E 88E1                <2> 	mov cl, ah
  5413                              <2> 	
  5414 00004050 A0[A2410000]        <2> 	mov al, [RTCtimeMinute]
  5415 00004055 E872FFFFFF          <2> 	call converttohex
  5416 0000405A 88E3                <2> 	mov bl, ah
  5417 0000405C B83C000000          <2> 	mov eax, 60
  5418 00004061 31D2                <2> 	xor edx, edx
  5419 00004063 F7E3                <2> 	mul ebx
  5420 00004065 01C1                <2> 	add ecx, eax
  5421                              <2> 	
  5422 00004067 A0[A3410000]        <2> 	mov al, [RTCtimeHour]
  5423 0000406C E85BFFFFFF          <2> 	call converttohex
  5424 00004071 88E3                <2> 	mov bl, ah
  5425 00004073 B8100E0000          <2> 	mov eax, 3600
  5426 00004078 31D2                <2> 	xor edx, edx
  5427 0000407A F7E3                <2> 	mul ebx
  5428 0000407C 01C1                <2> 	add ecx, eax
  5429                              <2> 		
  5430 0000407E 31C0                <2> 	xor eax, eax
  5431 00004080 A0[A6410000]        <2> 	mov al, [RTCtimeYear]
  5432 00004085 E842FFFFFF          <2> 	call converttohex
  5433 0000408A 6689C6              <2> 	mov si, ax
  5434 0000408D 66C1EE08            <2> 	shr si, 8
  5435 00004091 6681FE4600          <2> 	cmp si, 70
  5436 00004096 7705                <2> 	ja .no100
  5437 00004098 6681C66400          <2> 	add si, 100
  5438                              <2> .no100:
  5439 0000409D 6681C66C07          <2> 	add si, 1900
  5440                              <2> 	
  5441 000040A2 BB[7B410000]        <2> 	mov ebx, .month
  5442 000040A7 A0[A4410000]        <2> 	mov al, [RTCtimeDay]
  5443 000040AC E81BFFFFFF          <2> 	call converttohex
  5444 000040B1 88E0                <2> 	mov al, ah
  5445 000040B3 FEC8                <2> 	dec al
  5446 000040B5 31D2                <2> 	xor edx, edx
  5447 000040B7 88C2                <2> 	mov dl, al
  5448 000040B9 A0[A5410000]        <2> 	mov al, [RTCtimeMonth]
  5449 000040BE E809FFFFFF          <2> 	call converttohex
  5450 000040C3 88D0                <2> 	mov al, dl
  5451 000040C5 88E2                <2> 	mov dl, ah
  5452 000040C7 30E4                <2> 	xor ah, ah
  5453 000040C9 6689D5              <2> 	mov bp, dx
  5454                              <2> 	
  5455 000040CC 6689F7              <2> 	mov di, si
  5456 000040CF 66C1EF02            <2> 	shr di, 2
  5457 000040D3 66C1E702            <2> 	shl di, 2
  5458 000040D7 C605[7C410000]1C    <2> 	mov byte [.month + 1], 28
  5459 000040DE 6639F7              <2> 	cmp di, si
  5460 000040E1 7506                <2> 	jne .nofebmod
  5461 000040E3 FE05[7C410000]      <2> 	inc byte [.month + 1]
  5462                              <2> .nofebmod:
  5463 000040E9 664D                <2> 	dec bp
  5464 000040EB 6681FD0000          <2> 	cmp bp, 0
  5465 000040F0 740A                <2> 	je .ylp
  5466 000040F2 8A13                <2> 	mov dl, [ebx]
  5467 000040F4 01D0                <2> 	add eax, edx
  5468 000040F6 43                  <2> 	inc ebx
  5469 000040F7 E9EDFFFFFF          <2> 	jmp .nofebmod
  5470                              <2> 	
  5471                              <2> .ylp:
  5472 000040FC 6689F7              <2> 	mov di, si
  5473 000040FF 66C1EF02            <2> 	shr di, 2
  5474 00004103 66C1E702            <2> 	shl di, 2
  5475 00004107 81C18033E101        <2> 	add ecx, 31536000
  5476 0000410D 6639F7              <2> 	cmp di, si
  5477 00004110 7506                <2> 	jne .noymod
  5478 00004112 81C180510100        <2> 	add ecx, 86400
  5479                              <2> .noymod:
  5480 00004118 664E                <2> 	dec si
  5481 0000411A 6681FEB207          <2> 	cmp si, 1970
  5482 0000411F 77DB                <2> 	ja .ylp
  5483                              <2> 	
  5484 00004121 BB80510100          <2> 	mov ebx, 86400
  5485 00004126 31D2                <2> 	xor edx, edx
  5486 00004128 F7E3                <2> 	mul ebx
  5487 0000412A 01C1                <2> 	add ecx, eax
  5488                              <2> 	
  5489 0000412C 31DB                <2> 	xor ebx, ebx
  5490 0000412E 31D2                <2> 	xor edx, edx
  5491 00004130 B8100E0000          <2> 	mov eax, 3600
  5492 00004135 8A3D[87410000]      <2> 	mov bh, [timezoneh]
  5493 0000413B 80FF80              <2> 	cmp bh, 128
  5494 0000413E 720D                <2> 	jb .posh
  5495 00004140 28FB                <2> 	sub bl, bh
  5496 00004142 30FF                <2> 	xor bh, bh
  5497 00004144 F7E3                <2> 	mul ebx
  5498 00004146 01C1                <2> 	add ecx, eax
  5499 00004148 E906000000          <2> 	jmp .doneth
  5500                              <2> .posh:
  5501 0000414D 86DF                <2> 	xchg bl, bh
  5502 0000414F F7E3                <2> 	mul ebx
  5503 00004151 29C1                <2> 	sub ecx, eax
  5504                              <2> .doneth:
  5505                              <2> 
  5506 00004153 31DB                <2> 	xor ebx, ebx	
  5507 00004155 31D2                <2> 	xor edx, edx
  5508 00004157 B83C000000          <2> 	mov eax, 60
  5509 0000415C 8A3D[88410000]      <2> 	mov bh, [timezonem]
  5510 00004162 80FF80              <2> 	cmp bh, 128
  5511 00004165 720D                <2> 	jb .posm
  5512 00004167 28FB                <2> 	sub bl, bh
  5513 00004169 30FF                <2> 	xor bh, bh
  5514 0000416B F7E3                <2> 	mul ebx
  5515 0000416D 01C1                <2> 	add ecx, eax
  5516 0000416F E906000000          <2> 	jmp .donetm
  5517                              <2> .posm:
  5518 00004174 86DF                <2> 	xchg bl, bh
  5519 00004176 F7E3                <2> 	mul ebx
  5520 00004178 29C1                <2> 	sub ecx, eax
  5521                              <2> .donetm:
  5522                              <2> 
  5523 0000417A C3                  <2> 	ret
  5524                              <2> 	
  5525                              <2> 
  5526 0000417B 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5527 00004184 1F1E1F              <2>
  5528                              <2> 
  5529 00004187 FA                  <2> 	timezoneh db -6
  5530 00004188 00                  <2> 	timezonem db 0
  5531 00004189 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5532 00004192 000000000000000000- <2>
  5533 0000419B 000000000000        <2>
  5534 000041A1 00                  <2> 	RTCtimeSecond db 0
  5535 000041A2 00                  <2> 	RTCtimeMinute db 0
  5536 000041A3 00                  <2> 	RTCtimeHour db 0
  5537 000041A4 00                  <2> 	RTCtimeDay db 0
  5538 000041A5 00                  <2> 	RTCtimeMonth db 0
  5539 000041A6 00                  <2> 	RTCtimeYear db 0
  5540 000041A7 00                  <2> 	dayhex db 0
  5541 000041A8 00                  <2> 	monthhex db 0
  5542 000041A9 00                  <2> 	yearhex db 0
  5543 000041AA 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5544 000041B3 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5545 000041BC 302000              <2>
  5546                              <2> 	oldcentury:	;;from 1700 to 1900
  5547 000041BF 040200              <2> 	db 4,2,0
  5548                              <2> 	century:	;;from 2000 to 2500
  5549 000041C2 060402000604        <2> 	db 6,4,2,0,6,4
  5550                              <2> 	month:
  5551 000041C8 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5552 000041D1 000305              <2>
  5553                              <2> 	day:
  5554 000041D4 [F0410000]          <2> 	dd sunday
  5555 000041D8 [F8410000]          <2> 	dd monday
  5556 000041DC [00420000]          <2> 	dd tuesday
  5557 000041E0 [09420000]          <2> 	dd wednesday
  5558 000041E4 [14420000]          <2> 	dd thursday
  5559 000041E8 [1E420000]          <2> 	dd friday
  5560 000041EC [26420000]          <2> 	dd saturday
  5561                              <2> sunday:
  5562 000041F0 53756E6461790A00    <2> 	db "Sunday",10,0
  5563                              <2> monday:
  5564 000041F8 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5565                              <2> tuesday:
  5566 00004200 547565736461790A00  <2> 	db "Tuesday",10,0
  5567                              <2> wednesday:
  5568 00004209 5765646E6573646179- <2> 	db "Wednesday",10,0
  5569 00004212 0A00                <2>
  5570                              <2> thursday:
  5571 00004214 54687572736461790A- <2> 	db "Thursday",10,0
  5572 0000421D 00                  <2>
  5573                              <2> friday:
  5574 0000421E 4672696461790A00    <2> 	db "Friday",10,0
  5575                              <2> saturday:
  5576 00004226 53617475726461790A- <2> 	db "Saturday",10,0
  5577 0000422F 00                  <2>
  5578                              <1> %ifdef network.included
  5579                              <1> 	%include 'source/programs/dhcp.asm'
  5580 00004230 FF2C6468637000      <2> db 255,44,"dhcp",0
  5581                              <2> dhcp:
  5582 00004237 BE[F7420000]        <2> 	mov esi, .dhcp.mac
  5583 0000423C BB[D7430000]        <2> 	mov ebx, .dhcp.option.mac
  5584 00004241 BF[B7420000]        <2> 	mov edi, .mac
  5585 00004246 31C9                <2> 	xor ecx, ecx
  5586 00004248 66890D[C9420000]    <2> 	mov [.ip.checksum], cx
  5587 0000424F 66890D[D9420000]    <2> 	mov [.udp.checksum], cx
  5588 00004256 8B0D[D7620000]      <2> 	mov ecx, [sysmac]
  5589 0000425C 890B                <2> 	mov [ebx], ecx
  5590 0000425E 890F                <2> 	mov [edi], ecx
  5591 00004260 890E                <2> 	mov [esi], ecx
  5592 00004262 668B0D[DB620000]    <2> 	mov cx, [sysmac + 4]
  5593 00004269 66894B04            <2> 	mov [ebx + 4], cx
  5594 0000426D 66894E04            <2> 	mov [esi + 4], cx
  5595 00004271 66894F04            <2> 	mov [edi + 4], cx
  5596 00004275 BF[BF420000]        <2> 	mov edi, .ip.header
  5597 0000427A BE[D3420000]        <2> 	mov esi, .ip.headerend
  5598 0000427F E8391F0000          <2> 	call getchecksum
  5599 00004284 66890D[C9420000]    <2> 	mov [.ip.checksum], cx
  5600 0000428B BF[D3420000]        <2> 	mov edi, .udp.header
  5601 00004290 BE[EE430000]        <2> 	mov esi, .udp.end
  5602 00004295 E8231F0000          <2> 	call getchecksum
  5603 0000429A 66890D[D9420000]    <2> 	mov [.udp.checksum], cx
  5604 000042A1 BF[B1420000]        <2> 	mov edi, .frame
  5605 000042A6 BE[EE430000]        <2> 	mov esi, .udp.end
  5606 000042AB E8031F0000          <2> 	call sendpacket
  5607 000042B0 C3                  <2> 	ret
  5608                              <2> .frame:
  5609 000042B1 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5610 000042B7 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5611 000042BD 0800                <2> 	db 8,0
  5612                              <2> .ip.header:
  5613 000042BF 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5614 000042C0 00                  <2> 	db 0
  5615 000042C1 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5616 000042C3 0000                <2> 	dw 0
  5617 000042C5 0000                <2> 	dw 0
  5618 000042C7 80                  <2> 	db 0x80
  5619 000042C8 11                  <2> 	db 17
  5620 000042C9 0000                <2> .ip.checksum dw 0
  5621 000042CB 00000000            <2> 	db 0,0,0,0
  5622 000042CF FFFFFFFF            <2> 	db 255,255,255,255	
  5623                              <2> .ip.headerend:
  5624                              <2> .udp.header:
  5625 000042D3 0044                <2> 	db 0,68	;source port
  5626 000042D5 0043                <2> 	db 0,67 ;destination port
  5627 000042D7 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5628 000042D9 0000                <2> .udp.checksum dw 0
  5629                              <2> .udp.headerend:
  5630                              <2> .dhcp.data:
  5631 000042DB 01                  <2> 	db 1	;message type
  5632 000042DC 01                  <2> 	db 1	;hardware type
  5633 000042DD 06                  <2> 	db 6	;hardware address length
  5634 000042DE 00                  <2> 	db 0	;hops
  5635 000042DF EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5636 000042E3 0000                <2> 	db 0,0	;seconds elapsed
  5637 000042E5 0000                <2> 	db 0,0	;flags
  5638 000042E7 00000000            <2> 	db 0,0,0,0	;client ip address
  5639 000042EB 00000000            <2> 	db 0,0,0,0	;your ip address
  5640 000042EF 00000000            <2> 	db 0,0,0,0	;server ip address
  5641 000042F3 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5642 000042F7 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5643 000042FD 00<rept>            <2> 	times 10 db 0	;padding
  5644 00004307 00<rept>            <2> 	times 64 db 0	;server host name
  5645 00004347 00<rept>            <2> 	times 128 db 0	;boot file name
  5646 000043C7 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5647                              <2> .dhcp.option.type:
  5648 000043CB 350103              <2> 	db 53,1,3	;DHCP Request
  5649 000043CE 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5650 000043D4 3D07                <2> 	db 61,7 ;client id(mac)
  5651 000043D6 01                  <2> 	db 1	;Type=Ethernet
  5652 000043D7 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5653 000043DD 0C08                <2> 	db 12,8 ;host name
  5654 000043DF 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5655 000043E7 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5656 000043ED FF                  <2> 	db 0xFF	;end DHCP options
  5657                              <2> .dhcp.end:
  5658                              <2> .udp.end:
  5659                              <2> 	
  5660                              <1> %endif
  5661                              <1> %ifdef disk.none
  5662                              <1> %else
  5663                              <1> 	%include 'source/programs/dos.asm'
  5664 000043EE FF2C646F7300        <2> db 255,44,"dos",0
  5665                              <2> dosrunner:
  5666 000043F4 8925[C87B0300]      <2> 	mov [previousstack], esp
  5667 000043FA 8B3D[3F2D0000]      <2> 	mov edi, [currentcommandloc]
  5668 00004400 81C704000000        <2> 	add edi, 4
  5669 00004406 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5670 0000440B E892180000          <2> 	call loadfile
  5671 00004410 8B3D[3F2D0000]      <2> 	mov edi, [currentcommandloc]
  5672 00004416 81C704000000        <2> 	add edi, 4
  5673 0000441C 81FA94010000        <2> 	cmp edx, 404
  5674 00004422 0F845E000000        <2> 	je near .noprogfound
  5675 00004428 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5676 0000442D 31C9                <2> 	xor ecx, ecx
  5677                              <2> .findparams:
  5678 0000442F 47                  <2> 	inc edi
  5679 00004430 8A07                <2> 	mov al, [edi]
  5680 00004432 3C20                <2> 	cmp al, " "
  5681 00004434 75F9                <2> 	jne .findparams
  5682                              <2> .copyparams:
  5683 00004436 8A07                <2> 	mov al, [edi]
  5684 00004438 8803                <2> 	mov [ebx], al
  5685 0000443A 43                  <2> 	inc ebx
  5686 0000443B 47                  <2> 	inc edi
  5687 0000443C 41                  <2> 	inc ecx
  5688 0000443D 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5689 00004443 7304                <2> 	jae .nomoreparams
  5690 00004445 3C00                <2> 	cmp al, 0
  5691 00004447 75ED                <2> 	jne .copyparams
  5692                              <2> .nomoreparams:
  5693 00004449 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5694 0000444F 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5695 00004453 8ED8                <2> 	mov ds, ax
  5696 00004455 8EC0                <2> 	mov es, ax
  5697 00004457 8EE0                <2> 	mov fs, ax
  5698 00004459 8EE8                <2> 	mov gs, ax
  5699 0000445B 31C0                <2> 	xor eax, eax
  5700 0000445D 31DB                <2> 	xor ebx, ebx
  5701 0000445F 31C9                <2> 	xor ecx, ecx
  5702 00004461 31D2                <2> 	xor edx, edx
  5703 00004463 31FF                <2> 	xor edi, edi
  5704 00004465 31F6                <2> 	xor esi, esi
  5705 00004467 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5706 0000446E 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5707 00004472 6689DA              <2> 	mov dx, bx
  5708 00004475 8EC3                <2> 	mov es, bx
  5709 00004477 8EE3                <2> 	mov fs, bx
  5710 00004479 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5711 0000447D 8EEB                <2> 	mov gs, bx
  5712 0000447F 8B25[C87B0300]      <2> 	mov esp, [previousstack]
  5713 00004485 C3                  <2> 	ret
  5714                              <2> .noprogfound:
  5715 00004486 BE[E5620000]        <2> 	mov esi, notfound1
  5716 0000448B E867D7FFFF          <2> 	call print
  5717 00004490 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  5718 00004496 81C604000000        <2> 	add esi, 4
  5719 0000449C E856D7FFFF          <2> 	call print
  5720 000044A1 BE[ED620000]        <2> 	mov esi, notfound2
  5721 000044A6 E84CD7FFFF          <2> 	call print
  5722 000044AB C3                  <2> 	ret
  5723                              <2> 	
  5724                              <1> %endif
  5725                              <1> %include 'source/programs/dump.asm'
  5726 000044AC FF2C64756D7000      <2> db 255,44,"dump",0
  5727 000044B3 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  5728 000044B9 81C605000000        <2> 	add esi, 5
  5729 000044BF 31C9                <2> 	xor ecx, ecx
  5730 000044C1 66B83078            <2> 	mov ax, "0x"
  5731 000044C5 663906              <2> 	cmp [esi], ax
  5732 000044C8 740A                <2> 	je dumphexin
  5733 000044CA E86DECFFFF          <2> 	call cnvrttxt
  5734 000044CF E910000000          <2> 	jmp dumphexnow
  5735                              <2> dumphexin:
  5736 000044D4 81C602000000        <2> 	add esi, 2
  5737 000044DA E811ECFFFF          <2> 	call cnvrthextxt
  5738 000044DF E900000000          <2> 	jmp dumphexnow
  5739                              <2> dumphexnow:
  5740 000044E4 89CF                <2> 	mov edi, ecx
  5741 000044E6 89FE                <2> 	mov esi, edi
  5742 000044E8 81C680030000        <2> 	add esi, 896
  5743                              <2> dumphexloop:
  5744 000044EE 8B0F                <2> 	mov ecx, [edi]
  5745 000044F0 C605[782F0000]05    <2> 	mov byte [firsthexshown],5
  5746 000044F7 E891EAFFFF          <2> 	call showhex
  5747 000044FC 81C704000000        <2> 	add edi, 4
  5748 00004502 39F7                <2> 	cmp edi, esi
  5749 00004504 72E8                <2> 	jb dumphexloop
  5750 00004506 E824E1FFFF          <2> 	call termcopy
  5751 0000450B C3                  <2> 	ret 
  5752                              <1> %include 'source/programs/echo.asm'
  5753                              <2> 
  5754 0000450C FF2C6563686F00      <2> db 255,44,"echo",0
  5755                              <2> 	echoprog:
  5756 00004513 8B35[3F2D0000]      <2> 		mov esi, [currentcommandloc]
  5757 00004519 81C605000000        <2> 		add esi, 5
  5758 0000451F 8A06                <2> 		mov al, [esi]
  5759 00004521 E8D1D6FFFF          <2> 		call print
  5760 00004526 BE[1E630000]        <2> 		mov esi, line
  5761 0000452B E8C7D6FFFF          <2> 		call print
  5762 00004530 C3                  <2> 		ret
  5763 00004531 BB[487E0300]        <2> 	echovr:	mov ebx, variables
  5764 00004536 BF06000000          <2> 		mov edi, 6
  5765 0000453B E83F000000          <2> 		call nxtvrech
  5766 00004540 E95A000000          <2> 		jmp prntvr2
  5767 00004545 B13D                <2> 	echvar:	mov cl, '='
  5768 00004547 43                  <2> 		inc ebx
  5769 00004548 8A03                <2> 		mov al, [ebx]
  5770 0000454A 3C00                <2> 		cmp al, 0
  5771 0000454C 7431                <2> 		je nxtvrech
  5772 0000454E 3C3D                <2> 		cmp al, '='
  5773 00004550 7422                <2> 		je nxtvrechb1
  5774 00004552 8B35[3F2D0000]      <2> 		mov esi, [currentcommandloc]
  5775 00004558 01FE                <2> 		add esi, edi
  5776 0000455A E825E8FFFF          <2> 		call cndtest
  5777 0000455F 3C02                <2> 		cmp al, 2
  5778 00004561 7438                <2> 		je prntvr
  5779 00004563 3C01                <2> 		cmp al, 1
  5780 00004565 7434                <2> 		je prntvr
  5781 00004567 8B35[3F2D0000]      <2> 		mov esi, [currentcommandloc]
  5782 0000456D 01FE                <2> 		add esi, edi
  5783 0000456F E90B000000          <2> 		jmp nxtvrech
  5784                              <2> 	nxtvrechb1:
  5785 00004574 81EB02000000        <2> 		sub ebx, 2
  5786 0000457A E9C6FFFFFF          <2> 		jmp echvar
  5787 0000457F 8A03                <2> 	nxtvrech: mov al, [ebx]
  5788 00004581 3C05                <2> 		cmp al, 5
  5789 00004583 740A                <2> 		je nxtvrec2
  5790 00004585 43                  <2> 		inc ebx
  5791 00004586 81FB[488E0300]      <2> 		cmp ebx, varend
  5792 0000458C 72F1                <2> 		jb nxtvrech
  5793 0000458E C3                  <2> 		ret
  5794 0000458F 43                  <2> 	nxtvrec2: inc ebx
  5795 00004590 8A03                <2> 		mov al, [ebx]
  5796 00004592 3C04                <2> 		cmp al, 4
  5797 00004594 74AF                <2> 		je echvar
  5798 00004596 E9E4FFFFFF          <2> 		jmp nxtvrech
  5799 0000459B 43                  <2> 	prntvr: inc ebx
  5800 0000459C 89DE                <2> 		mov esi, ebx
  5801 0000459E C3                  <2> 		ret
  5802 0000459F E853D6FFFF          <2> 	prntvr2: call print
  5803 000045A4 BE[1E630000]        <2> 		mov esi, line
  5804 000045A9 E849D6FFFF          <2> 		call print
  5805 000045AE C3                  <2> 		ret 
  5806                              <1> %include 'source/programs/else.asm'
  5807 000045AF FF2C656C736500      <2> 	db 255,44,"else",0
  5808 000045B6 31C0                <2> elsecmd:	xor eax, eax
  5809 000045B8 3805[427E0300]      <2> 	cmp [BATCHISON], al
  5810 000045BE 0F841EF3FFFF        <2> 	je near notbatch
  5811 000045C4 A0[D97D0300]        <2> 	mov al, [IFON]
  5812 000045C9 BE[DA7D0300]        <2> 	mov esi, IFTRUE
  5813 000045CE 01C6                <2> 	add esi, eax
  5814 000045D0 8A06                <2> 	mov al, [esi]
  5815 000045D2 3401                <2> 	xor al, 1
  5816 000045D4 8806                <2> 	mov [esi], al
  5817 000045D6 C3                  <2> 	ret 
  5818                              <1> %include 'source/programs/exit.asm'
  5819 000045D7 FF2C6578697400      <2> db 255,44,"exit",0
  5820 000045DE 803D[D87D0300]01    <2> 	cmp byte [ranboot], 1
  5821 000045E5 0F841DE4FFFF        <2> 	je near returnfromexp
  5822 000045EB E9F7E2FFFF          <2> 	jmp nobootfile
  5823                              <1> %include 'source/programs/fi.asm'
  5824 000045F0 FF2C666900          <2> 	db 255,44,"fi",0
  5825 000045F5 30C0                <2> 	xor al, al
  5826 000045F7 3805[427E0300]      <2> 	cmp [BATCHISON], al
  5827 000045FD 0F84DFF2FFFF        <2> 	je near notbatch
  5828 00004603 B001                <2> fi:	mov al, 1
  5829 00004605 2805[D97D0300]      <2> 	sub [IFON],al
  5830 0000460B C3                  <2> 	ret 
  5831                              <1> %ifdef gui.included
  5832                              <1> 	%include 'source/programs/gui.asm'
  5833                              <1> %endif
  5834                              <1> %include 'source/programs/help.asm'
  5835 0000460C FF2C68656C7000      <2> db 255,44,"help",0
  5836                              <2> lscmd:	
  5837 00004613 B00D                <2> 		mov al, 13
  5838 00004615 E889DCFFFF          <2> 		call prcharq
  5839 0000461A BE[08320000]        <2> 		mov esi, progstart
  5840 0000461F BB[E34F0000]        <2> 		mov ebx, progend
  5841 00004624 BE[C8770300]        <2> dir:	mov esi, fileindex
  5842 00004629 8A06                <2> 	dirnxt:	mov al, [esi]
  5843 0000462B 30E4                <2> 		xor ah, ah
  5844 0000462D 3CFF                <2> 		cmp al, 255
  5845 0000462F 7418                <2> 		je dirfnd
  5846 00004631 46                  <2> 		inc esi
  5847 00004632 81FE[C87B0300]      <2> 		cmp esi,  fileindexend
  5848 00004638 7342                <2> 		jae dirdn
  5849 0000463A E9EAFFFFFF          <2> 		jmp dirnxt
  5850                              <2> 	dirfnd3:
  5851 0000463F 46                  <2> 		inc esi
  5852 00004640 81FE[C87B0300]      <2> 		cmp esi, fileindexend
  5853 00004646 76E1                <2> 		jbe dirnxt
  5854 00004648 4E                  <2> 		dec esi
  5855 00004649 46                  <2> 	dirfnd:	inc esi
  5856 0000464A 8A06                <2> 		mov al, [esi]
  5857 0000464C 30E4                <2> 		xor ah, ah
  5858 0000464E 3C2C                <2> 		cmp al, 44
  5859 00004650 740E                <2> 		je dirfnd2
  5860 00004652 46                  <2> 		inc esi
  5861 00004653 81FE[C87B0300]      <2> 		cmp esi,  fileindexend
  5862 00004659 7321                <2> 		jae dirdn
  5863 0000465B E9C9FFFFFF          <2> 		jmp dirnxt
  5864 00004660 46                  <2> 	dirfnd2: inc esi
  5865 00004661 E872D5FFFF          <2> 		call printquiet
  5866 00004666 56                  <2> 		push esi
  5867 00004667 B009                <2> 		mov al, 9
  5868 00004669 E835DCFFFF          <2> 		call prcharq
  5869 0000466E 5E                  <2> 		pop esi
  5870 0000466F 81FE[C87B0300]      <2> 		cmp esi,  fileindexend
  5871 00004675 7305                <2> 		jae dirdn
  5872 00004677 E9ADFFFFFF          <2> 		jmp dirnxt
  5873 0000467C BE[1E630000]        <2> 	dirdn:	mov esi, line
  5874 00004681 E871D5FFFF          <2> 			call print
  5875 00004686 C3                  <2> 			ret
  5876 00004687 00                  <2> currentdir db 0
  5877                              <1> %include 'source/programs/if.asm'
  5878 00004688 FF2C696600          <2> 	db 255,44,"if",0
  5879 0000468D 30C0                <2> ifcmd:	xor al, al
  5880 0000468F 3805[427E0300]      <2> 	cmp [BATCHISON], al
  5881 00004695 0F8447F2FFFF        <2> 	je near notbatch
  5882 0000469B 8B1D[3F2D0000]      <2> 	mov ebx, [currentcommandloc]
  5883 000046A1 81C303000000        <2> 	add ebx, 3
  5884 000046A7 89DE                <2> 	mov esi, ebx
  5885 000046A9 8A06                <2> chkeqsn: mov al, [esi]
  5886 000046AB 3C00                <2> 	cmp al, 0
  5887 000046AD 0F842FF2FFFF        <2> 	je near notbatch
  5888 000046B3 3C3D                <2> 	cmp al, '='
  5889 000046B5 0F8406000000        <2> 	je near chkeqdn
  5890 000046BB 46                  <2> 	inc esi
  5891 000046BC E9E8FFFFFF          <2> 	jmp chkeqsn
  5892 000046C1 B000                <2> chkeqdn: mov al, 0 
  5893 000046C3 8806                <2> 	mov [esi], al
  5894 000046C5 46                  <2> 	inc esi
  5895 000046C6 E878E6FFFF          <2> 	call tester
  5896 000046CB 3C01                <2> 	cmp al, 1
  5897 000046CD 0F8405000000        <2> 	je near trueif
  5898 000046D3 E91C000000          <2> 	jmp falseif
  5899 000046D8 31C0                <2> trueif:	xor eax, eax
  5900 000046DA A0[D97D0300]        <2> 	mov al, [IFON]
  5901 000046DF FEC0                <2> 	inc al
  5902 000046E1 A2[D97D0300]        <2> 	mov [IFON], al
  5903 000046E6 30E4                <2> 	xor ah, ah
  5904 000046E8 BE[DA7D0300]        <2> 	mov esi, IFTRUE
  5905 000046ED 01C6                <2> 	add esi, eax
  5906 000046EF B401                <2> 	mov ah, 1
  5907 000046F1 8826                <2> 	mov [esi], ah
  5908 000046F3 C3                  <2> 	ret 
  5909 000046F4 31C0                <2> falseif: xor eax, eax
  5910 000046F6 A0[D97D0300]        <2> 	mov al, [IFON]
  5911 000046FB FEC0                <2> 	inc al
  5912 000046FD A2[D97D0300]        <2> 	mov [IFON], al
  5913 00004702 30E4                <2> 	xor ah, ah
  5914 00004704 BE[DA7D0300]        <2> 	mov esi, IFTRUE
  5915 00004709 01C6                <2> 	add esi, eax
  5916 0000470B 30E4                <2> 	xor ah, ah
  5917 0000470D 8826                <2> 	mov [esi], ah
  5918 0000470F C3                  <2> 	ret 
  5919                              <1> %ifdef network.included
  5920                              <1> 	%include 'source/programs/ipconfig.asm'
  5921 00004710 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5922 00004719 6700                <2>
  5923                              <2> ifconfig:
  5924 0000471B 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  5925 00004721 81C609000000        <2> 	add esi, 9
  5926 00004727 803E00              <2> 	cmp byte [esi], 0
  5927 0000472A 740B                <2> 	je .noip
  5928 0000472C E8B41A0000          <2> 	call strtoip
  5929 00004731 890D[D3620000]      <2> 	mov [sysip], ecx
  5930                              <2> .noip:
  5931                              <2> %ifdef ne2000.included
  5932 00004737 803D[79610000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5933 0000473E 751E                <2> 	jne .none2000
  5934 00004740 BE[7A610000]        <2> 	mov esi, ne2000.name
  5935 00004745 E8ADD4FFFF          <2> 	call print
  5936 0000474A B9[9C610000]        <2> 	mov ecx, ne2000.mac
  5937 0000474F E8181B0000          <2> 	call showmac
  5938 00004754 BE[1E630000]        <2> 	mov esi, line
  5939 00004759 E899D4FFFF          <2> 	call print
  5940                              <2> .none2000:
  5941                              <2> %endif
  5942                              <2> %ifdef rtl8139.included
  5943                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5944                              <2> 	jne .nortl8139
  5945                              <2> 	mov esi, rtl8139.name
  5946                              <2> 	call print
  5947                              <2> 	mov ecx, rtl8139.mac
  5948                              <2> 	call showmac
  5949                              <2> 	mov esi, line
  5950                              <2> 	call print
  5951                              <2> .nortl8139:
  5952                              <2> %endif
  5953                              <2> %ifdef rtl8169.included
  5954                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5955                              <2> 	jne .nortl8169
  5956                              <2> 	mov esi, rtl8169.name
  5957                              <2> 	call print
  5958                              <2> 	mov ecx, rtl8169.mac
  5959                              <2> 	call showmac
  5960                              <2> 	mov esi, line
  5961                              <2> 	call print
  5962                              <2> .nortl8169:
  5963                              <2> %endif
  5964                              <2> %ifdef i8254x.included
  5965                              <2> 	cmp byte [i8254x.nicconfig], 1
  5966                              <2> 	jne .noi8254x
  5967                              <2> 	mov esi, i8254x.name
  5968                              <2> 	call print
  5969                              <2> 	mov ecx, i8254x.mac
  5970                              <2> 	call showmac
  5971                              <2> 	mov esi, line
  5972                              <2> 	call print
  5973                              <2> .noi8254x:
  5974                              <2> %endif
  5975 0000475E 8B0D[D3620000]      <2> 	mov ecx, [sysip]
  5976 00004764 E8C21A0000          <2> 	call showip
  5977 00004769 BE[1E630000]        <2> 	mov esi, line
  5978 0000476E E884D4FFFF          <2> 	call print
  5979 00004773 C3                  <2> 	ret
  5980                              <2> 	
  5981                              <1> %endif
  5982                              <1> %include 'source/programs/keycode.asm'
  5983 00004774 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5984 0000477D 00                  <2>
  5985                              <2> keycode:
  5986 0000477E 66C705[74220000]00- <2> 	mov word [trans], 0
  5987 00004786 00                  <2>
  5988 00004787 C605[675E0000]00    <2> 	mov byte [threadson], 0
  5989                              <2> %ifdef io.serial
  5990                              <2> .noserial:
  5991                              <2> 	hlt
  5992                              <2> 	mov dx, [serial.address]
  5993                              <2> 	in al, dx
  5994                              <2> 	cmp al, 0
  5995                              <2> 	je .noserial
  5996                              <2> 	mov cl, al
  5997                              <2> 	call showhexsmall
  5998                              <2> 	cmp al, 0x1B
  5999                              <2> 	jne .noserial
  6000                              <2> 	in al, dx
  6001                              <2> 	mov cl, al
  6002                              <2> 	call showhexsmall
  6003                              <2> 	cmp cl, 0x5B
  6004                              <2> 	je .noserial
  6005                              <2> 	ret
  6006                              <2> %else
  6007 0000478E E86A0B0000          <2> 	call getkey
  6008 00004793 31C0                <2> 	xor eax, eax
  6009 00004795 31C9                <2> 	xor ecx, ecx
  6010 00004797 8A0D[DB520000]      <2> 	mov cl, [specialkey]
  6011 0000479D 80F900              <2> 	cmp cl, 0
  6012 000047A0 0F8405000000        <2> 	je near .nospecialkeycode
  6013 000047A6 E8CEE7FFFF          <2> 	call showhexsmall
  6014                              <2> .nospecialkeycode:
  6015 000047AB 668B0D[72220000]    <2> 	mov cx, [lastkey + 2]
  6016 000047B2 E8C2E7FFFF          <2> 	call showhexsmall
  6017 000047B7 80F901              <2> 	cmp cl, 1
  6018 000047BA 75C2                <2> 	jne keycode
  6019 000047BC C3                  <2> 	ret
  6020                              <2> %endif
  6021                              <1> %ifdef gui.included
  6022                              <1> 	%include 'source/programs/line.asm'
  6023                              <1> %endif
  6024                              <1> %include 'source/programs/logout.asm'
  6025 000047BD FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6026 000047C6 E9D8E0FFFF          <2> 	jmp os
  6027                              <1> %include 'source/programs/loop.asm'
  6028 000047CB FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6029 000047D2 803D[437E0300]00    <2> 	cmp byte [LOOPON], 0
  6030 000047D9 0F8501000000        <2> 	jne near filoop
  6031 000047DF C3                  <2> 	ret
  6032 000047E0 8B35[447E0300]      <2> filoop: mov esi, [LOOPPOS]
  6033 000047E6 FE0D[D97D0300]      <2> 	dec byte [IFON]
  6034 000047EC C605[437E0300]00    <2> 	mov byte [LOOPON], 0
  6035 000047F3 8935[3E7E0300]      <2> 	mov [BATCHPOS], esi
  6036 000047F9 8935[07380000]      <2> 	mov [batchedi], esi
  6037 000047FF C3                  <2> 	ret 
  6038                              <1> %ifdef disk.none
  6039                              <1> %else
  6040                              <1> 	%include 'source/programs/ls.asm'
  6041 00004800 FF2C6C7300          <2> db 255,44,"ls",0
  6042 00004805 BE[9D650300]        <2> 		mov esi, diskfileindex
  6043                              <2> 	diskindexdir:
  6044 0000480A 803E5F              <2> 		cmp byte [esi], '_'
  6045 0000480D 7440                <2> 		je nextdiskindexdir
  6046 0000480F E8C4D3FFFF          <2> 		call printquiet
  6047 00004814 56                  <2> 		push esi
  6048 00004815 BE[6F480000]        <2> 		mov esi, disktab
  6049 0000481A E8B9D3FFFF          <2> 		call printquiet
  6050 0000481F 5E                  <2> 		pop esi
  6051 00004820 8B4E05              <2> 		mov ecx, [esi + 5]
  6052 00004823 C605[782F0000]05    <2> 		mov byte [firsthexshown], 5
  6053 0000482A E828E8FFFF          <2> 		call showdec
  6054 0000482F 56                  <2> 		push esi
  6055 00004830 BE[1E630000]        <2> 		mov esi, line
  6056 00004835 E89ED3FFFF          <2> 		call printquiet
  6057 0000483A 5E                  <2> 		pop esi
  6058 0000483B 81C609000000        <2> 		add esi, 9
  6059 00004841 81FE[C3670300]      <2> 		cmp esi, enddiskfileindex
  6060 00004847 72C1                <2> 		jb diskindexdir
  6061 00004849 E8E1DDFFFF          <2> 		call termcopy
  6062 0000484E C3                  <2> 		ret
  6063                              <2> 	nextdiskindexdir:
  6064 0000484F 46                  <2> 		inc esi
  6065 00004850 803E00              <2> 		cmp byte [esi], 0
  6066 00004853 75FA                <2> 		jne nextdiskindexdir
  6067 00004855 81C609000000        <2> 		add esi, 9
  6068 0000485B 81FE[C3670300]      <2> 		cmp esi, enddiskfileindex
  6069 00004861 72A7                <2> 		jb diskindexdir
  6070 00004863 E8C7DDFFFF          <2> 		call termcopy
  6071 00004868 C3                  <2> 		ret
  6072                              <2> 		
  6073 00004869 4469736B2000        <2> 		diskmsg db "Disk ",0
  6074 0000486F 0D09090900          <2> 		disktab db 13,9,9,9,0
  6075                              <1> %endif
  6076                              <1> %include 'source/programs/memory.asm'
  6077 00004874 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6078 0000487D BE[59630000]        <2> 	mov esi, memlistbuf
  6079 00004882 31FF                <2> 	xor edi, edi
  6080 00004884 668B3D[99650000]    <2> 	mov di, [memlistend]
  6081 0000488B 01F7                <2> 	add edi, esi
  6082                              <2> printmemmap:
  6083 0000488D 8B0E                <2> 	mov ecx, [esi]
  6084 0000488F E8F9E6FFFF          <2> 	call showhex
  6085 00004894 81C608000000        <2> 	add esi, 8
  6086 0000489A 8B0E                <2> 	mov ecx, [esi]
  6087 0000489C E8ECE6FFFF          <2> 	call showhex
  6088 000048A1 81C608000000        <2> 	add esi, 8
  6089 000048A7 8B0E                <2> 	mov ecx, [esi]
  6090 000048A9 E8DFE6FFFF          <2> 	call showhex
  6091 000048AE 81C608000000        <2> 	add esi, 8
  6092 000048B4 57                  <2> 	push edi
  6093 000048B5 56                  <2> 	push esi
  6094 000048B6 BE[1E630000]        <2> 	mov esi, line
  6095 000048BB E837D3FFFF          <2> 	call print
  6096 000048C0 5E                  <2> 	pop esi
  6097 000048C1 5F                  <2> 	pop edi
  6098 000048C2 39FE                <2> 	cmp esi, edi
  6099 000048C4 72C7                <2> 	jb printmemmap
  6100 000048C6 C3                  <2> 	ret
  6101                              <2> 	
  6102                              <1> %include 'source/programs/pci.asm'
  6103 000048C7 FF2C70636900        <2> db 255,44,"pci",0
  6104 000048CD E89B100000          <2> 	call pcidump
  6105 000048D2 C3                  <2> 	ret 
  6106                              <1> %ifdef network.included
  6107                              <1> 	%include 'source/programs/ping.asm'
  6108 000048D3 FF2C70696E6700      <2> db 255,44,"ping",0
  6109                              <2> ping:
  6110 000048DA 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  6111 000048E0 81C605000000        <2> 	add esi, 5
  6112 000048E6 E8FA180000          <2> 	call strtoip
  6113 000048EB 890D[76490000]      <2> 	mov [.destip], ecx
  6114 000048F1 E835190000          <2> 	call showip
  6115 000048F6 8B0D[D3620000]      <2> 	mov ecx, [sysip]
  6116 000048FC 890D[72490000]      <2> 	mov [.sourceip]. ecx
  6117 00004902 31C0                <2> 	xor eax, eax
  6118 00004904 31DB                <2> 	xor ebx, ebx
  6119 00004906 66A3[70490000]      <2> 	mov [.checksum], ax
  6120 0000490C 66A3[7C490000]      <2> 	mov [.icmpchecksum], ax
  6121 00004912 BF[66490000]        <2> 	mov edi, .header
  6122 00004917 BE[7A490000]        <2> 	mov esi, .headerend
  6123 0000491C E89C180000          <2> 	call getchecksum
  6124 00004921 66890D[70490000]    <2> 	mov [.checksum], cx
  6125 00004928 BF[7A490000]        <2> 	mov edi, .icmp
  6126 0000492D BE[A2490000]        <2> 	mov esi, .packetend
  6127 00004932 E886180000          <2> 	call getchecksum
  6128 00004937 66890D[7C490000]    <2> 	mov [.icmpchecksum], cx
  6129 0000493E BF[58490000]        <2> 	mov edi, .packet
  6130 00004943 BE[A2490000]        <2> 	mov esi, .packetend
  6131 00004948 E866180000          <2> 	call sendpacket
  6132 0000494D BE[1E630000]        <2> 	mov esi, line
  6133 00004952 E8A0D2FFFF          <2> 	call print
  6134 00004957 C3                  <2> 	ret
  6135                              <2> 	
  6136                              <2> 	
  6137                              <2> 	
  6138                              <2> .packet:
  6139 00004958 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6140 0000495E 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6141 00004964 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6142                              <2> .header:
  6143 00004966 45                  <2> .version	db 0x45
  6144 00004967 00                  <2> .services	db 0
  6145 00004968 003C                <2> .length	db 0,0x3C
  6146 0000496A 0000                <2> .id		dw 0
  6147 0000496C 00                  <2> .flags	db 0
  6148 0000496D 00                  <2> .fragment db 0
  6149 0000496E 80                  <2> .ttl	db 128
  6150 0000496F 01                  <2> .protocol db 1 ;ICMP
  6151 00004970 0000                <2> .checksum dw 0
  6152 00004972 00000000            <2> .sourceip dd 0
  6153 00004976 00000000            <2> .destip dd 0
  6154                              <2> .headerend:
  6155                              <2> .icmp:
  6156 0000497A 08                  <2> .icmptype db 8 ;Ping request
  6157 0000497B 00                  <2> .icmpcode db 0
  6158 0000497C 0000                <2> .icmpchecksum dw 0
  6159 0000497E 0001                <2> .icmpid db 0,1
  6160 00004980 0000                <2> .sequence dw 0
  6161 00004982 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6162 0000498B 6A6B6C6D6E6F707172- <2>
  6163 00004994 737475767761626364- <2>
  6164 0000499D 6566676869          <2>
  6165                              <2> .packetend:
  6166                              <1> %endif
  6167                              <1> %ifdef disk.none
  6168                              <1> %else
  6169                              <1> 	%include 'source/programs/play.asm'
  6170 000049A2 FF2C706C61796100    <2> db 255,44,"playa",0
  6171 000049AA 8B3D[3F2D0000]      <2> 	mov edi, [currentcommandloc]
  6172 000049B0 81C706000000        <2> 	add edi, 6
  6173 000049B6 E834000000          <2> 	call playasync
  6174 000049BB C3                  <2> 	ret
  6175 000049BC FF2C706C617900      <2> db 255,44,"play",0
  6176                              <2> play:
  6177 000049C3 8B3D[3F2D0000]      <2> 	mov edi, [currentcommandloc]
  6178 000049C9 81C705000000        <2> 	add edi, 5
  6179 000049CF E81B000000          <2> 	call playasync
  6180                              <2> .waitforsound:
  6181 000049D4 F4                  <2> 	hlt
  6182                              <2> %ifdef sound.included
  6183 000049D5 A1[C5520000]        <2> 	mov eax, [Length0]
  6184 000049DA 660B05[C9520000]    <2> 	or ax, [Length1]
  6185                              <2> %endif
  6186 000049E1 0A05[4B020000]      <2> 	or al, [soundon]
  6187 000049E7 3D00000000          <2> 	cmp eax, 0
  6188 000049EC 75E6                <2> 	jne .waitforsound
  6189 000049EE C3                  <2> 	ret
  6190                              <2> playasync:
  6191 000049EF BE0000C000          <2> 	mov esi, 0xC00000
  6192 000049F4 E8A9120000          <2> 	call loadfile
  6193 000049F9 81FA94010000        <2> 	cmp edx, 404
  6194 000049FF 743F                <2> 	je nosoundfound
  6195 00004A01 BB0000C000          <2> 	mov ebx, 0xC00000
  6196 00004A06 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6197 00004A0D 0F843F010000        <2> 	je near wave_player
  6198 00004A13 66813B534E          <2> 	cmp word [ebx], "SN"
  6199 00004A18 7526                <2> 	jne nosoundfound
  6200 00004A1A 81C306000000        <2> 	add ebx, 6
  6201 00004A20 891D[4E020000]      <2> 	mov [soundpos], ebx
  6202 00004A26 035BFC              <2> 	add ebx, [ebx - 4]
  6203 00004A29 891D[52020000]      <2> 	mov [soundendpos], ebx
  6204 00004A2F 66C705[4C020000]00- <2> 	mov word [soundrepititions], 0
  6205 00004A37 00                  <2>
  6206 00004A38 C605[4B020000]01    <2> 	mov byte [soundon], 1
  6207 00004A3F C3                  <2> 	ret
  6208                              <2> nosoundfound:
  6209 00004A40 BE[664A0000]        <2> 	mov esi, notfoundsound
  6210 00004A45 E8ADD1FFFF          <2> 	call print
  6211 00004A4A 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  6212 00004A50 81C605000000        <2> 	add esi, 5
  6213 00004A56 E89CD1FFFF          <2> 	call print
  6214 00004A5B BE[ED620000]        <2> 	mov esi, notfound2
  6215 00004A60 E892D1FFFF          <2> 	call print
  6216 00004A65 C3                  <2> 	ret
  6217 00004A66 706C61793A2000      <2> notfoundsound db "play: ",0
  6218                              <2> 
  6219                              <2> %ifdef sound.included
  6220                              <2> sbplay:
  6221 00004A6D BE0000C000          <2> 		mov esi, 0xC00000
  6222 00004A72 89F3                <2> 		mov ebx, esi
  6223 00004A74 81C62C000000        <2> 		add esi, WAVSTART
  6224 00004A7A 29F7                <2> 		sub edi, esi
  6225 00004A7C 66893D[C9520000]    <2> 		mov [Length1], di
  6226 00004A83 C1EF0F              <2> 		shr edi, 15
  6227 00004A86 893D[C5520000]      <2> 		mov [Length0], edi
  6228 00004A8C 8B4B18              <2> 		mov ecx, [ebx + 24]
  6229 00004A8F 890D[D6520000]      <2> 		mov [Freq], ecx
  6230 00004A95 31C0                <2> 		xor eax, eax
  6231 00004A97 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6232 00004A9C 81C22C000000        <2> 		add edx, WAVSTART
  6233 00004AA2 01D0                <2> 		add	eax, edx
  6234 00004AA4 89C6                <2> 		mov esi, eax
  6235 00004AA6 31C9                <2> 		xor ecx, ecx
  6236 00004AA8 31DB                <2> 		xor ebx, ebx
  6237 00004AAA 66891D[D3520000]    <2> 		mov [SegLoc], bx
  6238 00004AB1 81C300000800        <2> 		add ebx, 0x80000
  6239 00004AB7 66B9FFFF            <2> 		mov cx, 0xFFFF
  6240 00004ABB 6681FF0000          <2> 		cmp di, 0
  6241 00004AC0 7520                <2> 		jne .autoinit
  6242 00004AC2 668B0D[C9520000]    <2> 		mov cx, [Length1]
  6243 00004AC9 C605[C4520000]01    <2> 		mov byte [OddLength], 1
  6244 00004AD0 6681F90080          <2> 		cmp cx, 32768
  6245 00004AD5 730B                <2> 		jae .autoinit
  6246 00004AD7 C605[C4520000]00    <2> 		mov byte [OddLength], 0
  6247 00004ADE 66D1E1              <2> 		shl cx, 1
  6248 00004AE1 47                  <2> 		inc edi
  6249                              <2> .autoinit:
  6250 00004AE2 4F                  <2> 		dec edi
  6251 00004AE3 893D[C5520000]      <2> 		mov [Length0], edi
  6252 00004AE9 66890D[C9520000]    <2> 		mov [Length1], cx
  6253 00004AF0 66D1E9              <2> 		shr cx, 1
  6254 00004AF3 6641                <2> 		inc cx
  6255 00004AF5 01C8                <2> 		add eax, ecx
  6256 00004AF7 A3[CB520000]        <2> 		mov [NextMemLoc], eax
  6257 00004AFC 8935[CF520000]      <2> 		mov	[MemLoc], esi
  6258 00004B02 E863060000          <2> 		call DMACopy
  6259 00004B07 31DB                <2> 		xor ebx, ebx
  6260 00004B09 668B1D[D3520000]    <2> 		mov bx, [SegLoc]
  6261 00004B10 31C9                <2> 		xor ecx, ecx
  6262 00004B12 668B0D[C9520000]    <2> 		mov cx, [Length1]
  6263 00004B19 66D1E9              <2> 		shr cx, 1
  6264 00004B1C 6641                <2> 		inc cx
  6265 00004B1E 01CB                <2> 		add ebx, ecx
  6266 00004B20 66891D[D3520000]    <2> 		mov [SegLoc], bx
  6267 00004B27 81C300000800        <2> 		add ebx, 0x80000
  6268 00004B2D 8B35[CB520000]      <2> 		mov esi, [NextMemLoc]
  6269 00004B33 89F0                <2> 		mov eax, esi
  6270 00004B35 01C8                <2> 		add eax, ecx
  6271 00004B37 A3[CB520000]        <2> 		mov [NextMemLoc], eax
  6272 00004B3C 8935[CF520000]      <2> 		mov	[MemLoc], esi
  6273 00004B42 E823060000          <2> 		call DMACopy
  6274 00004B47 E841060000          <2> 		call DMAPlay
  6275 00004B4C E8CB060000          <2> 		call PlayDSP
  6276 00004B51 C3                  <2> 		ret
  6277                              <2> WAVSTART equ 44
  6278                              <2> wave_player:
  6279 00004B52 803D[DA520000]01    <2> 	cmp byte [SoundBlaster], 1
  6280 00004B59 0F840EFFFFFF        <2> 	je near sbplay
  6281 00004B5F BE[6A4B0000]        <2> 	mov esi, nosoundblaster
  6282 00004B64 E88ED0FFFF          <2> 	call print
  6283 00004B69 C3                  <2> 	ret
  6284                              <2> %else
  6285                              <2> 	wave_player:
  6286                              <2> 		mov esi, nosoundblaster
  6287                              <2> 		call print
  6288                              <2> 		ret
  6289                              <2> %endif
  6290 00004B6A 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6291 00004B73 426C61737465722064- <2>
  6292 00004B7C 657465637465642E0A- <2>
  6293 00004B85 00                  <2>
  6294                              <1> %endif
  6295                              <1> %include 'source/programs/pwd.asm'
  6296 00004B86 FF2C70776400        <2> db 255,44,"pwd",0
  6297 00004B8C BE[D47B0300]        <2> 	mov esi, currentfolder
  6298 00004B91 E842D0FFFF          <2> 	call printquiet
  6299 00004B96 BE[1E630000]        <2> 	mov esi, line
  6300 00004B9B E857D0FFFF          <2> 	call print
  6301 00004BA0 C3                  <2> 	ret
  6302                              <2> 	
  6303                              <1> %include 'source/programs/reboot.asm'
  6304 00004BA1 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6305 00004BAA 0F011D[B44B0000]    <2> 		lidt [idtreboot]
  6306 00004BB1 CD00                <2> 		int 0
  6307 00004BB3 F4                  <2> 		hlt
  6308                              <2> 	
  6309 00004BB4 0000                <2> 	idtreboot dw 0
  6310 00004BB6 00000000            <2> 			  dd 0
  6311                              <2> 
  6312                              <2> 	coldboot:
  6313 00004BBA 66B84000            <2> 		MOV AX, 0040h
  6314 00004BBE 8EC0                <2> 		MOV ES, AX
  6315 00004BC0 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6316 00004BC9 00                  <2>
  6317 00004BCA EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6318 00004BD1 CF                  <2> 		IRET
  6319                              <2> 
  6320                              <2> 	warmboot:
  6321 00004BD2 66B84000            <2> 		MOV AX, 0040h
  6322 00004BD6 8EC0                <2> 		MOV ES, AX
  6323 00004BD8 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6324 00004BE1 12                  <2>
  6325 00004BE2 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6326 00004BE9 CF                  <2> 		IRET
  6327                              <2> 		
  6328                              <1> %include 'source/programs/reg.asm'
  6329 00004BEA FF2C72656700        <2> db 255,44,"reg",0
  6330 00004BF0 CD03                <2> 	int 3
  6331 00004BF2 C3                  <2> 	ret 
  6332                              <1> %ifdef disk.none
  6333                              <1> %else
  6334                              <1> 	%include 'source/programs/show.asm'
  6335 00004BF3 FF2C73686F7700      <2> db 255,44,"show",0
  6336                              <2> showprog:
  6337 00004BFA 8B3D[3F2D0000]      <2> 		mov edi, [currentcommandloc]
  6338 00004C00 81C705000000        <2> 		add edi, 5
  6339 00004C06 BE00004000          <2> 		mov esi, 0x400000
  6340 00004C0B 803F26              <2> 		cmp byte [edi], '&'
  6341 00004C0E 741B                <2> 		je .nullfile
  6342 00004C10 BE00008000          <2> 		mov esi, 0x800000
  6343 00004C15 E888100000          <2> 		call loadfile
  6344 00004C1A 81FA94010000        <2> 		cmp edx, 404
  6345 00004C20 0F8415000000        <2> 		je near filenotfound
  6346 00004C26 BE00008000          <2> 		mov esi, 0x800000
  6347                              <2> .nullfile:
  6348                              <2> %ifdef gui.included
  6349                              <2> 		cmp word [esi], "BM"
  6350                              <2> 		je bmpfound
  6351                              <2> %endif
  6352 00004C2B E8C7CFFFFF          <2> 		call print
  6353 00004C30 BE[1E630000]        <2> 		mov esi, line
  6354 00004C35 E8BDCFFFFF          <2> 		call print
  6355 00004C3A C3                  <2> 		ret
  6356                              <2> %ifdef gui.included
  6357                              <2> bmpfound:
  6358                              <2> 		cmp byte [guion], 0
  6359                              <2> 		je near noguibmp
  6360                              <2> 		mov esi, 0x800000
  6361                              <2> 		xor ecx, ecx
  6362                              <2> 		xor edx, edx
  6363                              <2> 		xor eax, eax
  6364                              <2> 		xor ebx, ebx
  6365                              <2> 		call showbmp
  6366                              <2> 		xor al, al
  6367                              <2> 		mov ah, 5
  6368                              <2> 		int 30h
  6369                              <2> 		call guiclear
  6370                              <2> 		call clearmousecursor
  6371                              <2> 		call reloadallgraphics
  6372                              <2> 		ret
  6373                              <2> noguibmp:
  6374                              <2> 		mov esi, warnguimsg
  6375                              <2> 		call print
  6376                              <2> 		ret
  6377                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  6378                              <2> %endif
  6379                              <2> 
  6380                              <2> filenotfound:
  6381 00004C3B BE[6E4C0000]        <2> 		mov esi, filenf
  6382 00004C40 E8B2CFFFFF          <2> 		call print
  6383 00004C45 8B35[3F2D0000]      <2> 		mov esi, [currentcommandloc]
  6384                              <2> findfilenotfoundzero:
  6385 00004C4B 8A06                <2> 		mov al, [esi]
  6386 00004C4D 46                  <2> 		inc esi
  6387 00004C4E 3C00                <2> 		cmp al, 0
  6388 00004C50 7411                <2> 		je nofilenamenotfound
  6389 00004C52 81FE[48960300]      <2> 		cmp esi, buftxtend
  6390 00004C58 7309                <2> 		jae nofilenamenotfound
  6391 00004C5A 3C20                <2> 		cmp al, " "
  6392 00004C5C 75ED                <2> 		jne findfilenotfoundzero
  6393 00004C5E E894CFFFFF          <2> 		call print
  6394                              <2> nofilenamenotfound:
  6395 00004C63 BE[794C0000]        <2> 		mov esi, filenf2
  6396 00004C68 E88ACFFFFF          <2> 		call print
  6397 00004C6D C3                  <2> 		ret
  6398 00004C6E 5468652066696C6520- <2> filenf db "The file ",34,0
  6399 00004C77 2200                <2>
  6400 00004C79 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6401 00004C82 6F7420626520666F75- <2>
  6402 00004C8B 6E642E0A00          <2>
  6403                              <1> %endif
  6404                              <1> %include 'source/programs/shush.asm'
  6405 00004C90 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6406                              <2> shushprog:
  6407                              <2> %ifdef gui.included
  6408                              <2> 	cmp byte [guion], 0
  6409                              <2> 	je near .noswitchsize
  6410                              <2> 	mov esi, [currentcommandloc]
  6411                              <2> 	add esi, 6
  6412                              <2> 	push esi
  6413                              <2> 	dec esi
  6414                              <2> .findspace:
  6415                              <2> 	inc esi
  6416                              <2> 	mov al, [esi]
  6417                              <2> 	cmp al, 0
  6418                              <2> 	je near .noswitchsize
  6419                              <2> 	cmp al, "X"
  6420                              <2> 	je .donefind
  6421                              <2> 	cmp al, "x"
  6422                              <2> 	je .donefind
  6423                              <2> 	cmp al, " "
  6424                              <2> 	jne .findspace
  6425                              <2> .donefind:
  6426                              <2> 	xor al, al
  6427                              <2> 	mov [esi], al
  6428                              <2> 	inc esi
  6429                              <2> 	mov edi, esi
  6430                              <2> 	call cnvrttxt
  6431                              <2> 	mov eax, ecx
  6432                              <2> 	pop esi
  6433                              <2> 	push eax
  6434                              <2> 	mov edi, esi
  6435                              <2> 	call cnvrttxt
  6436                              <2> 	mov ebx, ecx
  6437                              <2> 	pop eax	
  6438                              <2> 	cmp bx, 0
  6439                              <2> 	je near .noswitchsize
  6440                              <2> 	cmp ax, 0
  6441                              <2> 	je near .noswitchsize
  6442                              <2> 	shl bx, 3
  6443                              <2> 	shl ax, 4
  6444                              <2> 	cmp bx, [resolutionx]
  6445                              <2> 	jbe .nofixx
  6446                              <2> 	mov bx, [resolutionx]
  6447                              <2> .nofixx:
  6448                              <2> 	add ax, 16
  6449                              <2> 	cmp ax, [resolutiony]
  6450                              <2> 	jbe .nofixy
  6451                              <2> 	mov ax, [resolutiony]
  6452                              <2> .nofixy:
  6453                              <2> 	sub ax, 16
  6454                              <2> 	xor cx, cx
  6455                              <2> 	xor dx, dx
  6456                              <2> 	mov [termwindow], bx
  6457                              <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6458                              <2> 	mov esi, termwindow
  6459                              <2> 	xor ebx, ebx
  6460                              <2> 	xor ax, ax
  6461                              <2> 	call showwindow
  6462                              <2> 	call guiclear
  6463                              <2> 	call clear
  6464                              <2> 	call reloadallgraphics
  6465                              <2> 	call switchmousepos2
  6466                              <2> .noswitchsize:
  6467                              <2> %endif
  6468 00004C98 BE[A34C0000]        <2> 	mov esi, shushmsg
  6469 00004C9D E855CFFFFF          <2> 	call print
  6470 00004CA2 C3                  <2> 	ret
  6471 00004CA3 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6472 00004CAC 6F2074686520536F6C- <2>
  6473 00004CB5 6C65724F5320486172- <2>
  6474 00004CBE 646C7920556E69782D- <2>
  6475 00004CC7 436F6D70617469626C- <2>
  6476 00004CD0 65205368656C6C210A- <2>
  6477 00004CD9 00                  <2>
  6478                              <1> %include 'source/programs/system.asm'
  6479 00004CDA FF2C73797374656D00  <2> 	db 255,44,"system",0
  6480 00004CE3 BE[F64D0000]        <2> 	mov esi, kernelinfomsg
  6481 00004CE8 E8EBCEFFFF          <2> 	call printquiet
  6482 00004CED B9[9D650300]        <2> 	mov ecx, osend
  6483 00004CF2 E860E3FFFF          <2> 	call showdec
  6484 00004CF7 BE[0B4E0000]        <2> 	mov esi, diskbytemsg
  6485 00004CFC E8D7CEFFFF          <2> 	call printquiet
  6486 00004D01 B9[9D650300]        <2> 	mov ecx, osend
  6487 00004D06 81C1[6DF10300]      <2> 	add ecx, commandbufend
  6488 00004D0C 81E9[C4670300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6489 00004D12 E840E3FFFF          <2> 	call showdec
  6490 00004D17 BE[224E0000]        <2> 	mov esi, membytemsg
  6491 00004D1C E8B7CEFFFF          <2> 	call printquiet
  6492 00004D21 BE[854E0000]        <2> 	mov esi, endofmemmsg
  6493 00004D26 E8ADCEFFFF          <2> 	call printquiet
  6494 00004D2B B9[81251400]        <2> 	mov ecx, bssend
  6495 00004D30 E858E2FFFF          <2> 	call showhex
  6496 00004D35 BE[3B4E0000]        <2> 	mov esi, systeminfomsg
  6497 00004D3A E899CEFFFF          <2> 	call printquiet
  6498                              <2> getcpuspeed:
  6499 00004D3F B8FE000000          <2> 	mov eax, 0xFE
  6500 00004D44 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6501 00004D46 B020                <2> 	mov al, 0x20
  6502 00004D48 E620                <2> 	out 0x20, al
  6503 00004D4A F4                  <2> 	hlt
  6504 00004D4B 0F31                <2> 	rdtsc
  6505 00004D4D 89D6                <2> 	mov esi, edx
  6506 00004D4F 89C7                <2> 	mov edi, eax
  6507 00004D51 31C0                <2> 	xor eax, eax
  6508 00004D53 C605[2B020000]01    <2> 	mov byte [testingcpuspeed], 1
  6509                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6510 00004D5A 40                  <2> 	inc eax
  6511 00004D5B E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6512                              <2> cpuspeedloopend:
  6513 00004D60 0F31                <2> 	rdtsc
  6514 00004D62 29F8                <2> 	sub eax, edi
  6515 00004D64 29F2                <2> 	sub edx, esi
  6516 00004D66 8915[34020000]      <2> 	mov [cpuclocksperint + 4], edx
  6517 00004D6C A3[30020000]        <2> 	mov [cpuclocksperint], eax
  6518 00004D71 31C0                <2> 	xor eax, eax
  6519 00004D73 E621                <2> 	out 0x21, al
  6520 00004D75 B020                <2> 	mov al, 0x20
  6521 00004D77 E620                <2> 	out 0x20, al
  6522 00004D79 31D2                <2> 	xor edx, edx
  6523 00004D7B 31C0                <2> 	xor eax, eax
  6524 00004D7D A1[2C020000]        <2> 	mov eax, [cpuspeedperint]
  6525 00004D82 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6526                              <2> 				;result by 2
  6527 00004D84 8B1D[3E020000]      <2> 	mov ebx, [timeinterval]
  6528 00004D8A C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6529 00004D8D F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6530 00004D8F 89C1                <2> 	mov ecx, eax
  6531 00004D91 E8C1E2FFFF          <2> 	call showdec
  6532 00004D96 BE[694E0000]        <2> 	mov esi, cpuspeedmsg
  6533 00004D9B E838CEFFFF          <2> 	call printquiet
  6534 00004DA0 31D2                <2> 	xor edx, edx
  6535 00004DA2 A1[30020000]        <2> 	mov eax, [cpuclocksperint]
  6536 00004DA7 8B15[34020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6537 00004DAD 8B1D[3E020000]      <2> 	mov ebx, [timeinterval]
  6538 00004DB3 C1EB0A              <2> 	shr ebx, 10
  6539 00004DB6 F7F3                <2> 	div ebx
  6540 00004DB8 89C1                <2> 	mov ecx, eax
  6541 00004DBA E898E2FFFF          <2> 	call showdec
  6542 00004DBF BE[6F4E0000]        <2> 	mov esi, cpuclockmsg
  6543 00004DC4 E80FCEFFFF          <2> 	call printquiet
  6544 00004DC9 8B0D[38020000]      <2> 	mov ecx, [memoryspace]
  6545 00004DCF C1E914              <2> 	shr ecx, 20
  6546 00004DD2 41                  <2> 	inc ecx	;the reading is one MB behind
  6547 00004DD3 E87FE2FFFF          <2> 	call showdec
  6548 00004DD8 BE[744E0000]        <2> 	mov esi, memoryspacemsg
  6549 00004DDD E815CEFFFF          <2> 	call print
  6550                              <2> %ifdef sound.included
  6551 00004DE2 803D[DA520000]00    <2> 	cmp byte [SoundBlaster], 0
  6552 00004DE9 740A                <2> 	je .nosb
  6553 00004DEB BE[514E0000]        <2> 	mov esi, soundblastermsg
  6554 00004DF0 E802CEFFFF          <2> 	call print
  6555                              <2> .nosb:
  6556                              <2> %endif
  6557 00004DF5 C3                  <2> 	ret
  6558                              <2> 
  6559 00004DF6 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6560 00004DFF 666F726D6174696F6E- <2>
  6561 00004E08 3A0A00              <2>
  6562 00004E0B 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6563 00004E14 6B2053706163652055- <2>
  6564 00004E1D 7365640A00          <2>
  6565 00004E22 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6566 00004E2B 6F7279205370616365- <2>
  6567 00004E34 20557365640A00      <2>
  6568 00004E3B 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6569 00004E44 6E666F726D6174696F- <2>
  6570 00004E4D 6E3A0A00            <2>
  6571                              <2> %ifdef sound.included
  6572 00004E51 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6573 00004E5A 746572204465746563- <2>
  6574 00004E63 7465642E0A00        <2>
  6575                              <2> %endif
  6576 00004E69 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6577 00004E6F 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6578 00004E74 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6579 00004E7D 2053706163650A00    <2>
  6580 00004E85 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6581 00004E8E 6D6F72792053706163- <2>
  6582 00004E97 653A20307800        <2>
  6583                              <1> %include 'source/programs/time.asm'
  6584 00004E9D FF2C74696D6500      <2> db 255,44,"time",0	
  6585                              <2> timer:
  6586 00004EA4 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  6587 00004EAA 51                  <2> 	push ecx
  6588 00004EAB 8B0D[47020000]      <2> 	mov ecx, [timenanoseconds]
  6589 00004EB1 51                  <2> 	push ecx
  6590 00004EB2 8B35[3F2D0000]      <2> 	mov esi, [currentcommandloc]
  6591 00004EB8 81C605000000        <2> 	add esi, 5
  6592 00004EBE 803E00              <2> 	cmp byte [esi], 0
  6593 00004EC1 7414                <2> 	je .norun
  6594 00004EC3 BF[48920300]        <2> 	mov edi, buftxt
  6595                              <2> .cpcmd:
  6596 00004EC8 8A06                <2> 	mov al, [esi]
  6597 00004ECA 8807                <2> 	mov [edi], al
  6598 00004ECC 46                  <2> 	inc esi
  6599 00004ECD 47                  <2> 	inc edi
  6600 00004ECE 3C00                <2> 	cmp al, 0
  6601 00004ED0 75F6                <2> 	jne .cpcmd
  6602 00004ED2 E88CDDFFFF          <2> 	call run
  6603                              <2> .norun:
  6604 00004ED7 5A                  <2> 	pop edx
  6605 00004ED8 58                  <2> 	pop eax
  6606                              <2> 
  6607 00004ED9 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  6608 00004EDF 29C1                <2> 	sub ecx, eax
  6609 00004EE1 8B1D[47020000]      <2> 	mov ebx, [timenanoseconds]
  6610 00004EE7 29D3                <2> 	sub ebx, edx
  6611 00004EE9 7307                <2> 	jae .nosign
  6612 00004EEB 81C300CA9A3B        <2> 	add ebx, 1000000000
  6613 00004EF1 49                  <2> 	dec ecx
  6614                              <2> .nosign:
  6615 00004EF2 E860E1FFFF          <2> 	call showdec
  6616                              <2> 	
  6617 00004EF7 89D9                <2> 	mov ecx, ebx
  6618 00004EF9 BE[C93D0000]        <2> 	mov esi, timenscache
  6619 00004EFE C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6620 00004F05 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6621 00004F0C C6460A30            <2> 	mov byte [esi + 10], "0"
  6622 00004F10 BE[D43D0000]        <2> 	mov esi, timenscacheend
  6623 00004F15 E80BDFFFFF          <2> 	call convert
  6624 00004F1A BE[C93D0000]        <2> 	mov esi, timenscache
  6625 00004F1F E8D3CCFFFF          <2> 	call print
  6626 00004F24 C605[C93D0000]08    <2> 	mov byte [timenscache], 8
  6627 00004F2B C3                  <2> 	ret
  6628                              <2> 	
  6629                              <1> %include 'source/programs/turnoff.asm'
  6630 00004F2C FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6631 00004F35 00                  <2>
  6632                              <2> 	turnoff:
  6633 00004F36 66C705[D10C0000]-   <2> 			mov word [realmodeptr], shutdown
  6634 00004F3D [494F]              <2>
  6635 00004F3F BB[744F0000]        <2> 			mov ebx, halt
  6636 00004F44 E876BCFFFF          <2> 			call realmode
  6637                              <2> 
  6638                              <2> [BITS 16]
  6639                              <2> 		shutdown:
  6640 00004F49 B453                <2> 			mov ah, 0x53
  6641 00004F4B B004                <2> 			mov al, 4
  6642 00004F4D 31DB                <2> 			xor bx, bx
  6643 00004F4F CD15                <2> 			int 0x15
  6644                              <2> 			
  6645 00004F51 B453                <2> 			mov ah, 0x53
  6646 00004F53 B001                <2> 			mov al, 1
  6647 00004F55 31DB                <2> 			xor bx, bx
  6648 00004F57 CD15                <2> 			int 0x15
  6649                              <2> 			
  6650 00004F59 B453                <2> 			mov ah, 0x53
  6651 00004F5B B008                <2> 			mov al, 8
  6652 00004F5D BB0100              <2> 			mov bx, 1
  6653 00004F60 B90100              <2> 			mov cx, 1
  6654 00004F63 CD15                <2> 			int 0x15
  6655                              <2> 			
  6656 00004F65 B453                <2> 			mov ah, 0x53
  6657 00004F67 B007                <2> 			mov al, 7
  6658 00004F69 BB0100              <2> 			mov bx, 1
  6659 00004F6C B90300              <2> 			mov cx, 3
  6660 00004F6F CD15                <2> 			int 0x15
  6661 00004F71 E9FDFF              <2> 			jmp $
  6662                              <2> 			[BITS 32]
  6663 00004F74 E9FBFFFFFF          <2> halt: jmp $
  6664                              <1> %include 'source/programs/wait.asm'
  6665 00004F79 FF2C7761697400      <2> db 255,44,"wait",0
  6666                              <2> waitkey:
  6667 00004F80 E88BD2FFFF          <2> 		call getchar
  6668 00004F85 C3                  <2> 		ret
  6669                              <1> %include 'source/programs/while.asm'
  6670 00004F86 FF2C7768696C6500    <2> db 255,44,"while",0
  6671 00004F8E 30C0                <2> whilecmd:  xor al, al
  6672 00004F90 3805[427E0300]      <2> 	cmp [BATCHISON], al
  6673 00004F96 0F8446E9FFFF        <2> 	je near notbatch
  6674 00004F9C 8B35[3E7E0300]      <2> 	mov esi, [BATCHPOS]
  6675 00004FA2 81EE02000000        <2> 	sub esi, 2
  6676 00004FA8 4E                  <2> whilefnd: dec esi
  6677 00004FA9 8A06                <2> 	mov al, [esi]
  6678 00004FAB 3C0A                <2> 	cmp al, 10
  6679 00004FAD 0F840D000000        <2> 	je near whilefnd2
  6680 00004FB3 3C00                <2> 	cmp al, 0
  6681 00004FB5 0F8405000000        <2> 	je near whilefnd2
  6682 00004FBB E9E8FFFFFF          <2> 	jmp whilefnd
  6683                              <2> whilefnd2:
  6684 00004FC0 46                  <2> 	inc esi
  6685 00004FC1 8935[447E0300]      <2> 	mov [LOOPPOS], esi
  6686 00004FC7 C605[437E0300]01    <2> 	mov BYTE [LOOPON], 1
  6687 00004FCE BE[48920300]        <2> 	mov esi, buftxt
  6688 00004FD3 BB[48920300]        <2> 	mov ebx, buftxt
  6689 00004FD8 81C306000000        <2> 	add ebx, 6
  6690 00004FDE E9C6F6FFFF          <2> 	jmp chkeqsn
  6691                              <1> progend:		;programs end here	
  6692                              <1> batchprogend:
  6693                                  	%include "source/hardware.asm"
  6694                              <1> %ifdef gui.included
  6695                              <1> 	%include "source/drivers/video/vesa.asm"
  6696                              <1> 	%include "source/drivers/input/mouse.asm"
  6697                              <1> %endif
  6698                              <1> %include "source/drivers/sound/pcspkr.asm"
  6699                              <2> ;PC Speaker Drivers
  6700                              <2> PCSpeakerRAW:
  6701 00004FE3 60                  <2> 	pusha
  6702                              <2> nosoundrep:
  6703 00004FE4 8B35[4E020000]      <2> 	mov esi, [soundpos]
  6704 00004FEA 31C9                <2> 	xor ecx, ecx
  6705 00004FEC 668B0D[4C020000]    <2> 	mov cx, [soundrepititions]
  6706 00004FF3 6681F90000          <2> 	cmp cx, 0
  6707 00004FF8 0F8548000000        <2> 	jne near donesetpitch
  6708 00004FFE 668B0E              <2> 	mov cx, [esi]
  6709 00005001 668B5E02            <2> 	mov bx, [esi + 2]
  6710 00005005 66890D[4C020000]    <2> 	mov [soundrepititions], cx
  6711 0000500C 81C604000000        <2> 	add esi, 4
  6712 00005012 8935[4E020000]      <2> 	mov [soundpos], esi
  6713 00005018 3B35[52020000]      <2> 	cmp esi, [soundendpos]
  6714 0000501E 7735                <2> 	ja stopsound
  6715 00005020 66813D[4C020000]00- <2> 	cmp word [soundrepititions], 0
  6716 00005028 00                  <2>
  6717 00005029 74B9                <2> 	je nosoundrep
  6718 0000502B 6681FB0000          <2> 	cmp bx, 0
  6719 00005030 740F                <2> 	je nosoundplay
  6720 00005032 E840000000          <2> 	call setpitch
  6721 00005037 E849000000          <2> 	call startsound
  6722 0000503C E905000000          <2> 	jmp donesetpitch
  6723                              <2> nosoundplay:
  6724 00005041 E846000000          <2> 	call killsound
  6725                              <2> donesetpitch:
  6726 00005046 6649                <2> 	dec cx
  6727 00005048 66890D[4C020000]    <2> 	mov [soundrepititions], cx
  6728 0000504F 61                  <2> 	popa
  6729 00005050 E936B2FFFF          <2> 	jmp timerinterrupt
  6730                              <2> stopsound:
  6731 00005055 31C0                <2> 	xor eax, eax
  6732 00005057 66A3[4C020000]      <2> 	mov [soundrepititions], ax
  6733 0000505D A2[4B020000]        <2> 	mov [soundon], al
  6734 00005062 A3[4E020000]        <2> 	mov [soundpos], eax
  6735 00005067 A3[52020000]        <2> 	mov [soundendpos], eax
  6736 0000506C E81B000000          <2> 	call killsound
  6737 00005071 61                  <2> 	popa
  6738 00005072 E914B2FFFF          <2> 	jmp timerinterrupt
  6739                              <2> 
  6740                              <2> 
  6741                              <2> setpitch:
  6742 00005077 B0B6                <2> 	mov al, 0xB6
  6743 00005079 E643                <2> 	out 0x43, al
  6744 0000507B 6689D8              <2> 	mov ax, bx
  6745 0000507E E642                <2> 	out 0x42, al
  6746 00005080 88E0                <2> 	mov al, ah
  6747 00005082 E642                <2> 	out 0x42, al
  6748 00005084 C3                  <2> 	ret
  6749                              <2> startsound:
  6750 00005085 E461                <2> 	in al, 0x61
  6751 00005087 0C03                <2> 	or al, 3
  6752 00005089 E661                <2> 	out 0x61, al
  6753 0000508B C3                  <2> 	ret
  6754                              <2> killsound:
  6755 0000508C E461                <2> 	in al, 0x61
  6756 0000508E 24FC                <2> 	and al, 0xFC
  6757 00005090 E661                <2> 	out 0x61, al
  6758 00005092 C3                  <2> 	ret
  6759                              <2> 	
  6760                              <1> %ifdef sound.included
  6761                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6762                              <2> ;Sound Blaster Drivers
  6763                              <2> sblaster:
  6764                              <2> .init:
  6765 00005093 E8E8010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6766 00005098 A2[DA520000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6767 0000509D 3C00                <2> 		cmp al, 0
  6768 0000509F 7418                <2> 		je .noinit
  6769 000050A1 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6770 000050A3 E80C020000          <2> 		call WriteDSP
  6771 000050A8 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6772 000050AA E8C2010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6773 000050AF BE[BA500000]        <2> 		mov esi, .initmsg
  6774 000050B4 E83ECBFFFF          <2> 		call print
  6775                              <2> .noinit:
  6776 000050B9 C3                  <2> 		ret
  6777 000050BA 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  6778 000050C3 74657220496E697469- <2>
  6779 000050CC 616C697A65640A00    <2>
  6780                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  6781 000050D4 813D[C5520000]0000- <2> 	cmp dword [Length0], 0
  6782 000050DC 0000                <2>
  6783 000050DE 0F8462000000        <2> 	je near .done
  6784 000050E4 FF0D[C5520000]      <2> 	dec dword [Length0]
  6785 000050EA E908000000          <2> 	jmp .notodd
  6786                              <2> .oddlength:
  6787 000050EF 31C9                <2> 	xor ecx, ecx
  6788 000050F1 880D[C4520000]      <2> 	mov [OddLength], cl
  6789                              <2> .notodd:
  6790 000050F7 8B35[CB520000]      <2> 	mov esi, [NextMemLoc]
  6791 000050FD 31C9                <2> 	xor ecx, ecx
  6792 000050FF 668B0D[C9520000]    <2> 	mov cx, [Length1]
  6793 00005106 D1E9                <2> 	shr ecx, 1
  6794 00005108 6641                <2> 	inc cx
  6795 0000510A 31DB                <2> 	xor ebx, ebx
  6796 0000510C 668B1D[D3520000]    <2> 	mov bx, [SegLoc]
  6797 00005113 6601CB              <2> 	add bx, cx
  6798 00005116 66891D[D3520000]    <2> 	mov [SegLoc], bx
  6799 0000511D 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  6800 00005123 8935[CF520000]      <2> 	mov [MemLoc], esi
  6801 00005129 89C8                <2> 	mov eax, ecx
  6802 0000512B 01F0                <2> 	add eax, esi
  6803 0000512D A3[CB520000]        <2> 	mov [NextMemLoc], eax
  6804 00005132 E833000000          <2> 	call DMACopy
  6805                              <2> 	;call DMAPlay
  6806 00005137 E8E0000000          <2> 	call PlayDSP
  6807 0000513C 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6808 00005140 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6809 00005141 E903B2FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6810                              <2> .done:
  6811 00005146 803D[C4520000]01    <2> 	cmp byte [OddLength], 1
  6812 0000514D 74A0                <2> 	je .oddlength
  6813 0000514F 31C0                <2> 	xor eax, eax
  6814 00005151 66A3[C9520000]      <2> 	mov [Length1], ax
  6815 00005157 66B8D000            <2> 	mov ax, 0xD0
  6816 0000515B E854010000          <2> 	call WriteDSP
  6817 00005160 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6818 00005164 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6819 00005165 E9DFB1FFFF          <2> 	jmp handled2
  6820                              <2> 	
  6821                              <2> DMACopy:
  6822 0000516A 66B80800            <2> 		mov ax, LINEAR_SEL
  6823 0000516E 8EE0                <2> 		mov fs, ax
  6824 00005170 C1E902              <2> 		shr ecx, 2
  6825                              <2> .loop:
  6826 00005173 8B06                <2> 		mov eax, [esi]
  6827 00005175 648903              <2> 		mov [fs:ebx], eax
  6828 00005178 81C604000000        <2> 		add esi, 4
  6829 0000517E 81C304000000        <2> 		add ebx, 4
  6830 00005184 E2ED                <2> 		loop .loop
  6831 00005186 66B83000            <2> 		mov ax, NEW_DATA_SEL
  6832 0000518A 8EE0                <2> 		mov fs, ax
  6833 0000518C C3                  <2> 		ret
  6834                              <2> 		
  6835                              <2> 
  6836                              <2> DMAPlay:    ;uses eax ebx edx
  6837 0000518D C605[D5520000]00    <2> 		mov	byte [Page1],00h
  6838                              <2> 
  6839 00005194 B005                <2> 		mov	al,(Channel+4)
  6840 00005196 66BA0A00            <2> 		mov	dx,0Ah
  6841 0000519A EE                  <2> 		out	dx,al
  6842 0000519B 30C0                <2> 		xor	al,al
  6843 0000519D 66BA0C00            <2> 		mov	dx,0Ch
  6844 000051A1 EE                  <2> 		out	dx,al
  6845 000051A2 B059                <2> 		mov	al,ModeReg
  6846 000051A4 66BA0B00            <2> 		mov	dx,0Bh
  6847 000051A8 EE                  <2> 		out	dx,al
  6848 000051A9 B800000800          <2> 		mov	eax,0x80000
  6849 000051AE 66BA0200            <2> 		mov	dx,AddPort
  6850 000051B2 EE                  <2> 		out	dx,al
  6851 000051B3 86C4                <2> 		xchg al,ah
  6852 000051B5 EE                  <2> 		out	dx,al
  6853 000051B6 B800000800          <2> 		mov	eax,0x80000
  6854 000051BB 89C2                <2> 		mov	edx,eax
  6855 000051BD 2500000100          <2> 		and	eax,65536
  6856 000051C2 7406                <2> 		jz	MemLocN1
  6857 000051C4 FE05[D5520000]      <2> 		inc	byte [Page1]
  6858                              <2> MemLocN1:
  6859 000051CA 89D0                <2> 		mov	eax,edx
  6860 000051CC 2500000200          <2> 		and	eax,131072
  6861 000051D1 7407                <2> 		jz	MemLocN2
  6862 000051D3 8005[D5520000]02    <2> 		add	byte [Page1],02
  6863                              <2> MemLocN2:
  6864 000051DA 89D0                <2> 		mov	eax,edx
  6865 000051DC 2500000400          <2> 		and	eax,262144
  6866 000051E1 7407                <2> 		jz	MemLocN3
  6867 000051E3 8005[D5520000]04    <2> 		add	byte [Page1],04
  6868                              <2> MemLocN3:
  6869 000051EA 89D0                <2> 		mov	eax,edx
  6870 000051EC 2500000800          <2> 		and	eax,524288
  6871 000051F1 7407                <2> 		jz	MemLocN4
  6872 000051F3 8005[D5520000]08    <2> 		add	byte [Page1],08
  6873                              <2> MemLocN4:
  6874 000051FA 66BA8300            <2> 		mov	dx,PgPort
  6875 000051FE A0[D5520000]        <2> 		mov	al,[Page1]
  6876 00005203 EE                  <2> 		out	dx,al
  6877 00005204 66BA0300            <2> 		mov	dx,LenPort
  6878 00005208 66A1[C9520000]      <2> 		mov	ax,[Length1]
  6879 0000520E 6648                <2> 		dec ax
  6880 00005210 EE                  <2> 		out	dx,al
  6881 00005211 86C4                <2> 		xchg al,ah
  6882 00005213 EE                  <2> 		out	dx,al
  6883 00005214 66BA0A00            <2> 		mov	dx,0Ah
  6884 00005218 B001                <2> 		mov	al,Channel
  6885 0000521A EE                  <2> 		out	dx,al
  6886 0000521B C3                  <2> 		ret
  6887                              <2> 		
  6888                              <2> PlayDSP:
  6889 0000521C B040                <2> 		mov	al,40h
  6890 0000521E E891000000          <2> 		call WriteDSP
  6891 00005223 31D2                <2> 		xor	edx,edx
  6892 00005225 B840420F00          <2> 		mov	eax,1000000
  6893 0000522A 8B1D[D6520000]      <2> 		mov	ebx,[Freq]
  6894 00005230 803D[C3520000]00    <2> 		cmp byte [Stereo], 0
  6895 00005237 7402                <2> 		je .nost
  6896 00005239 D1E3                <2> 		shl ebx, 1
  6897                              <2> .nost:
  6898 0000523B F7F3                <2> 		div	ebx
  6899 0000523D 89C3                <2> 		mov	ebx,eax
  6900 0000523F B800010000          <2> 		mov	eax,256
  6901 00005244 29D8                <2> 		sub	eax,ebx
  6902 00005246 E869000000          <2> 		call WriteDSP
  6903 0000524B B014                <2> 		mov	al,14h	;write the mode
  6904 0000524D 803D[C3520000]00    <2> 		cmp byte [Stereo], 0
  6905 00005254 7400                <2> 		je .nost2
  6906                              <2> 		
  6907                              <2> .nost2:
  6908 00005256 E859000000          <2> 		call WriteDSP
  6909 0000525B 66A1[C9520000]      <2> 		mov	ax,[Length1]
  6910 00005261 66D1E8              <2> 		shr ax, 1
  6911 00005264 E84B000000          <2> 		call WriteDSP
  6912 00005269 86C4                <2> 		xchg al,ah
  6913 0000526B E844000000          <2> 		call WriteDSP
  6914 00005270 C3                  <2> 		ret
  6915                              <2> 
  6916                              <2> MstrVol:    ;uses ax dx
  6917 00005271 6650                <2> 	   push ax
  6918 00005273 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6919 00005277 B022                <2> 	   mov	al,22h
  6920 00005279 EE                  <2> 	   out	dx,al
  6921 0000527A 6658                <2> 	   pop	ax
  6922 0000527C 6642                <2> 	   inc	dx
  6923 0000527E EE                  <2> 	   out	dx,al
  6924 0000527F C3                  <2> 	   ret
  6925                              <2> 	   
  6926                              <2> ResetDSP:   ; uses cx dx
  6927 00005280 66BA2602            <2> 			mov	dx,(BasePort+6)
  6928 00005284 B001                <2> 			mov	al,01
  6929 00005286 EE                  <2> 			out	dx,al
  6930 00005287 66B93200            <2> 			mov	cx,50
  6931 0000528B EC                  <2> WaitIt1:	in	al,dx
  6932 0000528C E2FD                <2> 			loop WaitIt1
  6933 0000528E 30C0                <2> 			xor	al,al
  6934 00005290 EE                  <2> 			out	dx,al
  6935 00005291 66B93200            <2> 			mov	cx,50
  6936 00005295 EC                  <2> WaitIt2:	in	al,dx
  6937 00005296 E2FD                <2> 			loop WaitIt2
  6938 00005298 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6939 0000529A 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6940 0000529E EC                  <2> 			in	al,dx
  6941 0000529F 2480                <2> 			and	al,80h
  6942 000052A1 3C80                <2> 			cmp	al,80h
  6943 000052A3 750C                <2> 			jne	ResetErr
  6944 000052A5 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6945 000052A9 EC                  <2> 			in	al,dx
  6946 000052AA 3CAA                <2> 			cmp	al,0AAh
  6947 000052AC 7503                <2> 			jne	ResetErr
  6948 000052AE B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6949 000052B0 C3                  <2> 			ret
  6950 000052B1 30C0                <2> ResetErr:	xor al, al
  6951 000052B3 C3                  <2> 			ret
  6952                              <2> 
  6953                              <2> WriteDSP:   ;uses ax dx
  6954 000052B4 6650                <2> 		push ax
  6955 000052B6 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6956 000052BA EC                  <2> WaitIt:	in	al,dx
  6957 000052BB 2480                <2> 		and	al,80h
  6958 000052BD 75FB                <2> 		jnz	WaitIt
  6959 000052BF 6658                <2> 		pop	ax
  6960 000052C1 EE                  <2> 		out	dx,al
  6961 000052C2 C3                  <2> 		ret
  6962                              <2> 
  6963 000052C3 00                  <2> Stereo db 0
  6964 000052C4 00                  <2> OddLength db 0
  6965 000052C5 00000000            <2> Length0 dd	0
  6966 000052C9 0000                <2> Length1	dw  0
  6967 000052CB 00000000            <2> NextMemLoc dd 0
  6968 000052CF 00000000            <2> MemLoc	dd  0
  6969 000052D3 0000                <2> SegLoc  dw 0
  6970 000052D5 00                  <2> Page1	db  0
  6971 000052D6 00000000            <2> Freq	dd	0
  6972                              <2> PgPort	equ 83h
  6973                              <2> AddPort	equ 02h
  6974                              <2> LenPort	equ 03h
  6975                              <2> ModeReg	equ 59h
  6976                              <2> Channel	equ 01h
  6977                              <2> BasePort	equ 220h
  6978 000052DA 00                  <2> SoundBlaster	db 0
  6979                              <1> %endif
  6980                              <1> %ifdef io.serial
  6981                              <1> 	%include "source/drivers/input/serial.asm"
  6982                              <1> %else
  6983                              <1> 	%include "source/drivers/input/keyboard.asm"
  6984 000052DB 00                  <2> specialkey db 0
  6985                              <2> ;charregion db 0
  6986                              <2> waitforinput:		;this is basically the idle process
  6987                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  6988                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  6989 000052DC 6631C0              <2> 	xor ax, ax
  6990 000052DF A0[675E0000]        <2> 	mov al, [threadson]
  6991 000052E4 8825[675E0000]      <2> 	mov [threadson], ah
  6992 000052EA FB                  <2> 	sti
  6993 000052EB F4                  <2> 	hlt
  6994 000052EC A2[675E0000]        <2> 	mov [threadson], al
  6995 000052F1 66813D[74220000]00- <2> 	cmp word [trans], 0
  6996 000052F9 00                  <2>
  6997 000052FA 7401                <2> 	je getkey
  6998 000052FC C3                  <2> 	ret
  6999                              <2> getkey:
  7000 000052FD 31C0                <2> 		xor eax, eax
  7001 000052FF A2[DB520000]        <2> 		mov [specialkey], al
  7002 00005304 A3[70220000]        <2> 		mov [lastkey], eax
  7003 00005309 E464                <2> 		in al, 64h ; Status
  7004                              <2> 	%ifdef gui.included
  7005                              <2> 		test al, 20h ; PS2-Mouse?
  7006                              <2> 		jnz near moused
  7007                              <2> 	%endif
  7008 0000530B A801                <2> 		test al, 1 
  7009 0000530D 74CD                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7010                              <2> 	calckey:
  7011 0000530F E460                <2> 		in al, 60h
  7012 00005311 30E4                <2> 		xor ah, ah
  7013 00005313 6689C3              <2> 		mov bx, ax
  7014 00005316 66A3[72220000]      <2> 		mov [lastkey + 2], ax
  7015 0000531C BF[AB540000]        <2> 		mov edi, scancode
  7016                              <2> 	searchscan: 
  7017 00005321 80FB3A              <2> 		cmp bl, 3Ah
  7018 00005324 7314                <2> 		jae scanother
  7019 00005326 C1E004              <2> 		shl eax, 4
  7020 00005329 01C7                <2> 		add edi, eax
  7021 0000532B 668B07              <2> 		mov ax, [edi]
  7022 0000532E 663D0000            <2> 		cmp ax, 0
  7023 00005332 7406                <2> 		je scanother
  7024 00005334 E9D0000000          <2> 		jmp scanfound
  7025 00005339 00                  <2> uppercase db 0
  7026                              <2> scanother:
  7027 0000533A 6631C0              <2> 		xor ax, ax
  7028 0000533D 66A3[70220000]      <2> 		mov [lastkey], ax
  7029 00005343 80FBE0              <2> 		cmp bl, 0E0h
  7030 00005346 0F8477000000        <2> 		je near getkeyspecial
  7031 0000534C 803D[DB520000]E0    <2> 		cmp byte [specialkey], 0xE0
  7032 00005353 7525                <2> 		jne nospecialkey
  7033 00005355 80FB38              <2> 		cmp bl, 38h
  7034 00005358 0F849A000000        <2> 		je near alton
  7035 0000535E 80FBB8              <2> 		cmp bl, 0B8h
  7036 00005361 0F8499000000        <2> 		je near altoff
  7037 00005367 80FB1D              <2> 		cmp bl, 1Dh
  7038 0000536A 0F8478000000        <2> 		je near ctron
  7039 00005370 80FB9D              <2> 		cmp bl, 9Dh
  7040 00005373 0F8477000000        <2> 		je near ctroff
  7041 00005379 C3                  <2> 		ret
  7042                              <2> nospecialkey:
  7043 0000537A 80FB2A              <2> 		cmp bl, 2Ah
  7044 0000537D 0F8455000000        <2> 		je near shifton
  7045 00005383 80FB36              <2> 		cmp bl, 36h
  7046 00005386 0F844C000000        <2> 		je near shifton
  7047 0000538C 80FB1C              <2> 		cmp bl, 1Ch
  7048 0000538F 0F8473000000        <2> 		je near entdown
  7049 00005395 80FBAA              <2> 		cmp bl, 0AAh
  7050 00005398 0F8442000000        <2> 		je near shiftoff
  7051 0000539E 80FBB6              <2> 		cmp bl, 0B6h
  7052 000053A1 0F8439000000        <2> 		je near shiftoff
  7053 000053A7 80FB3A              <2> 		cmp bl, 3Ah
  7054 000053AA 0F84A7000000        <2> 		je near capslock
  7055 000053B0 80FB45              <2> 		cmp bl, 0x45
  7056 000053B3 0F84AF000000        <2> 		je near numlock
  7057 000053B9 80FB46              <2> 		cmp bl, 0x46
  7058 000053BC 0F84BE000000        <2> 		je near scrolllock
  7059 000053C2 C3                  <2> 		ret
  7060                              <2> 	getkeyspecial:
  7061 000053C3 C605[DB520000]E0    <2> 		mov byte [specialkey], 0xE0
  7062 000053CA E940FFFFFF          <2> 		jmp calckey
  7063                              <2> 	shift:
  7064 000053CF A0[39530000]        <2> 		mov al, [uppercase]
  7065 000053D4 3C01                <2> 		cmp al, 1
  7066 000053D6 7308                <2> 		jae shiftoff
  7067                              <2> 	shifton:
  7068 000053D8 C605[39530000]01    <2> 		mov byte [uppercase], 1
  7069 000053DF C3                  <2> 		ret
  7070                              <2> 	shiftoff:
  7071 000053E0 C605[39530000]00    <2> 		mov byte [uppercase], 0
  7072 000053E7 C3                  <2> 		ret
  7073                              <2> 	ctron:
  7074 000053E8 C605[56540000]01    <2> 		mov byte [ctrkey], 1
  7075 000053EF C3                  <2> 		ret
  7076                              <2> 	ctroff:
  7077 000053F0 C605[56540000]00    <2> 		mov byte [ctrkey], 0
  7078 000053F7 C3                  <2> 		ret
  7079                              <2> 	alton:
  7080 000053F8 C605[55540000]01    <2> 		mov byte [altkey], 1
  7081 000053FF C3                  <2> 		ret
  7082                              <2> 	altoff:
  7083 00005400 C605[55540000]00    <2> 		mov byte [altkey], 0
  7084 00005407 C3                  <2> 		ret
  7085                              <2> 	entdown:
  7086 00005408 C3                  <2> 		ret
  7087                              <2> scanfound:
  7088 00005409 81C708000000        <2> 		add edi, 8
  7089 0000540F 803D[56540000]01    <2> 		cmp byte [ctrkey], 1
  7090 00005416 7306                <2> 		jae ctrlin
  7091 00005418 81EF08000000        <2> 		sub edi, 8
  7092                              <2> 	ctrlin:
  7093 0000541E 81C704000000        <2> 		add edi, 4
  7094 00005424 803D[55540000]01    <2> 		cmp byte [altkey], 1
  7095 0000542B 7306                <2> 		jae altin
  7096 0000542D 81EF04000000        <2> 		sub edi, 4
  7097                              <2> 	altin:
  7098 00005433 81C702000000        <2> 		add edi, 2
  7099 00005439 803D[39530000]01    <2> 		cmp byte [uppercase], 1
  7100 00005440 7306                <2> 		jae uppercaseon
  7101 00005442 81EF02000000        <2> 		sub edi, 2
  7102                              <2> 	uppercaseon:
  7103 00005448 668B07              <2> 		mov ax,[edi]
  7104 0000544B 66A3[70220000]      <2> 		mov [lastkey], ax
  7105 00005451 C3                  <2> 		ret
  7106                              <2> 		
  7107 00005452 00                  <2> keyboardstatus db 0
  7108 00005453 00                  <2> numlockstatus db 0
  7109 00005454 00                  <2> scrolllockstatus db 0
  7110 00005455 00                  <2> altkey db 0
  7111 00005456 00                  <2> ctrkey db 0
  7112                              <2> 	capslock:
  7113 00005457 8035[52540000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7114 0000545E E835000000          <2> 		call updatekblights
  7115 00005463 E967FFFFFF          <2> 		jmp shift
  7116                              <2> 		
  7117                              <2> 	numlock:
  7118 00005468 8035[52540000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7119 0000546F 8035[53540000]01    <2> 		xor byte [numlockstatus], 1
  7120 00005476 E81D000000          <2> 		call updatekblights
  7121 0000547B E97DFEFFFF          <2> 		jmp getkey
  7122                              <2> 	
  7123                              <2> 	scrolllock:
  7124 00005480 8035[52540000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7125 00005487 8035[54540000]01    <2> 		xor byte [scrolllockstatus], 1
  7126 0000548E E805000000          <2> 		call updatekblights
  7127 00005493 E965FEFFFF          <2> 		jmp getkey
  7128                              <2> 		
  7129                              <2> 	updatekblights:
  7130 00005498 B0ED                <2> 		mov al, 0xED
  7131 0000549A 66BA6000            <2> 		mov dx, 0x60
  7132 0000549E EE                  <2> 		out dx, al
  7133                              <2> 	chkkbdack:
  7134 0000549F EC                  <2> 		in al, dx
  7135 000054A0 3CFA                <2> 		cmp al, 0xFA
  7136 000054A2 75FB                <2> 		jne chkkbdack
  7137 000054A4 A0[52540000]        <2> 		mov al, [keyboardstatus]
  7138 000054A9 EE                  <2> 		out dx, al
  7139 000054AA C3                  <2> 		ret
  7140                              <2> 		
  7141                              <2> scancode:
  7142                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7143 000054AB 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7144 000054B4 00000000000000      <2>
  7145 000054BB 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7146 000054C4 00000000000000      <2>
  7147 000054CB 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7148 000054D4 00000000000000      <2>
  7149 000054DB 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7150 000054E4 00000000000000      <2>
  7151 000054EB 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7152 000054F4 00000000000000      <2>
  7153 000054FB 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7154 00005504 00000000000000      <2>
  7155 0000550B 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7156 00005514 00000000000000      <2>
  7157 0000551B 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7158 00005524 00000000000000      <2>
  7159 0000552B 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7160 00005534 00000000000000      <2>
  7161 0000553B 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7162 00005544 00000000000000      <2>
  7163 0000554B 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7164 00005554 00000000000000      <2>
  7165 0000555B 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7166 00005564 00000000000000      <2>
  7167 0000556B 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7168 00005574 00000000000000      <2>
  7169 0000557B 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7170 00005584 00000000000000      <2>
  7171 0000558B 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7172 00005594 00000000000000      <2>
  7173 0000559B 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7174 000055A4 00000000000000      <2>
  7175 000055AB 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7176 000055B3 003A0039041904      <2>
  7177 000055BB 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7178 000055C4 03000046042604      <2>
  7179 000055CB 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7180 000055D4 03950343042304      <2>
  7181 000055DB 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7182 000055E4 03A1033A041A04      <2>
  7183 000055EB 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7184 000055F4 03A40335041504      <2>
  7185 000055FB 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7186 00005604 03A5033D041D04      <2>
  7187 0000560B 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7188 00005614 03980333041304      <2>
  7189 0000561B 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7190 00005624 03990348042804      <2>
  7191 0000562B 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7192 00005634 039F0349042904      <2>
  7193 0000563B 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7194 00005644 03A00337041704      <2>
  7195 0000564B 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7196 00005654 00000045042504      <2>
  7197 0000565B 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7198 00005664 0000004A042A04      <2>
  7199 0000566B 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7200 00005674 00000000000000      <2>
  7201 0000567B 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7202 00005684 00000000000000      <2>
  7203 0000568B 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7204 00005694 03910344042404      <2>
  7205 0000569B 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7206 000056A4 03A3034B042B04      <2>
  7207 000056AB 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7208 000056B4 03940332041204      <2>
  7209 000056BB 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7210 000056C4 03A60330041004      <2>
  7211 000056CB 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7212 000056D4 0393033F041F04      <2>
  7213 000056DB 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7214 000056E4 03970340042004      <2>
  7215 000056EB 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7216 000056F4 039E033E041E04      <2>
  7217 000056FB 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7218 00005704 039A033B041B04      <2>
  7219 0000570B 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7220 00005714 039B0334041404      <2>
  7221 0000571B 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7222 00005724 00000036041604      <2>
  7223 0000572B 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7224 00005734 0000004D042D04      <2>
  7225 0000573B 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7226 00005744 00000051040104      <2>
  7227 0000574B 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7228 00005754 00000000000000      <2>
  7229 0000575B 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7230 00005764 0000002F005C00      <2>
  7231 0000576B 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7232 00005774 0396034F042F04      <2>
  7233 0000577B 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7234 00005784 03A70347042704      <2>
  7235 0000578B 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7236 00005794 03A80341042104      <2>
  7237 0000579B 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7238 000057A4 03A9033C041C04      <2>
  7239 000057AB 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7240 000057B4 03920338041804      <2>
  7241 000057BB 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7242 000057C4 039D0342042204      <2>
  7243 000057CB 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7244 000057D4 039C034C042C04      <2>
  7245 000057DB 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7246 000057E4 00000031041104      <2>
  7247 000057EB 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7248 000057F4 0000004E042E04      <2>
  7249 000057FB 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7250 00005804 0000002E002C00      <2>
  7251 0000580B 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7252 00005814 00000000000000      <2>
  7253 0000581B 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7254 00005824 00000000000000      <2>
  7255 0000582B 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7256 00005834 00000000000000      <2>
  7257 0000583B 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7258 00005844 00000000000000      <2>
  7259                              <2> noscan:
  7260                              <2> 
  7261                              <1> %endif
  7262                              <1> ;drivers will soon be handled intelligently
  7263                              <1> ;every driver's source will be scanned for a .init function
  7264                              <1> ;that will be called and if it returns 0
  7265                              <1> ;the hardware was found and the driver initialized properly
  7266                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7267                              <1> 	%ifdef sound.included
  7268 0000584B E843F8FFFF          <1> 		call sblaster.init
  7269                              <1> 	%endif
  7270                              <1> 	%ifdef network.included
  7271 00005850 E817060000          <1> 		call network.init
  7272                              <1> 	%endif
  7273 00005855 C3                  <1> 	ret
  7274                              <1> initialize:
  7275                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7276 00005856 E839000000          <1> 	call .pic
  7277                              <1> %ifdef terminal.vsync
  7278                              <1> 	call .rtc
  7279                              <1> %endif
  7280 0000585B E896000000          <1> 	call .pit
  7281 00005860 E8B8000000          <1> 	call .fpu
  7282 00005865 E8C9000000          <1> 	call .sse
  7283 0000586A 31C0                <1> 	xor eax, eax
  7284 0000586C 31C9                <1> 	xor ecx, ecx
  7285                              <1> %ifdef io.serial
  7286                              <1> 	call serial.init
  7287                              <1> %endif
  7288 0000586E E801000000          <1> 	call .time
  7289 00005873 C3                  <1> 	ret
  7290                              <1> 	
  7291                              <1> .time:
  7292 00005874 E816E6FFFF          <1> 	call time
  7293 00005879 E8BEE7FFFF          <1> 	call timeconvert
  7294 0000587E 890D[43020000]      <1> 	mov [timeseconds], ecx
  7295 00005884 31C9                <1> 	xor ecx, ecx
  7296 00005886 890D[47020000]      <1> 	mov [timenanoseconds], ecx
  7297 0000588C C605[D73D0000]01    <1> 	mov byte [istimeset], 1
  7298 00005893 C3                  <1> 	ret
  7299                              <1> 	
  7300                              <1> .pic:
  7301 00005894 B011                <1> 	mov al, 0x11
  7302 00005896 E620                <1> 	out 0x20, al
  7303 00005898 E6A0                <1> 	out 0xA0, al
  7304 0000589A B040                <1> 	mov al, 0x40	;interrupt for master
  7305 0000589C E621                <1> 	out 0x21, al
  7306 0000589E B048                <1> 	mov al, 0x48	;interrupt for slave
  7307 000058A0 E6A1                <1> 	out 0xA1, al
  7308 000058A2 B004                <1> 	mov al, 4
  7309 000058A4 E621                <1> 	out 0x21, al
  7310 000058A6 B002                <1> 	mov al, 2
  7311 000058A8 E6A1                <1> 	out 0xA1, al
  7312 000058AA B001                <1> 	mov al, 0x1
  7313 000058AC E621                <1> 	out 0x21, al
  7314 000058AE B001                <1> 	mov al, 0x1
  7315 000058B0 E6A1                <1> 	out 0xA1, al
  7316                              <1> 	;masks are set to zero so as not to mask
  7317 000058B2 30C0                <1> 	xor al, al
  7318 000058B4 E621                <1> 	out 0x21, al
  7319 000058B6 30C0                <1> 	xor al, al
  7320 000058B8 E6A1                <1> 	out 0xA1, al
  7321 000058BA B020                <1> 	mov al, 0x20
  7322 000058BC E6A0                <1> 	out 0xA0, al
  7323 000058BE E620                <1> 	out 0x20, al
  7324 000058C0 C3                  <1> 	ret
  7325                              <1> .rtc:
  7326 000058C1 B008                <1> 	mov al, 0x8
  7327 000058C3 88C4                <1> 	mov ah, al
  7328 000058C5 66BA7000            <1> 	mov dx, 0x70
  7329 000058C9 EE                  <1> 	out dx, al
  7330 000058CA 6642                <1> 	inc dx
  7331 000058CC EC                  <1> 	in al, dx
  7332 000058CD 86C4                <1> 	xchg al, ah
  7333 000058CF 664A                <1> 	dec dx
  7334 000058D1 EE                  <1> 	out dx, al
  7335 000058D2 6642                <1> 	inc dx
  7336 000058D4 86C4                <1> 	xchg al, ah
  7337 000058D6 0C40                <1> 	or al, 0x40
  7338 000058D8 EE                  <1> 	out dx, al
  7339                              <1> 	
  7340 000058D9 B00A                <1> 	mov al, 0xA
  7341 000058DB 664A                <1> 	dec dx
  7342 000058DD EE                  <1> 	out dx, al
  7343 000058DE 86C4                <1> 	xchg al, ah
  7344 000058E0 6642                <1> 	inc dx
  7345 000058E2 EC                  <1> 	in al, dx
  7346 000058E3 24F0                <1> 	and al, 0xF0
  7347 000058E5 0A05[0A030000]      <1> 	or al, [rtcrate]
  7348 000058EB 86C4                <1> 	xchg al, ah
  7349 000058ED 664A                <1> 	dec dx
  7350 000058EF EE                  <1> 	out dx, al
  7351 000058F0 6642                <1> 	inc dx
  7352 000058F2 86C4                <1> 	xchg al, ah
  7353 000058F4 EE                  <1> 	out dx, al
  7354 000058F5 C3                  <1> 	ret
  7355                              <1> 	
  7356                              <1> .pit:
  7357                              <1> 	;initialize the PIT
  7358 000058F6 66A1[3C020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7359 000058FC E640                <1> 	out 0x40, al
  7360 000058FE 66C1C008            <1> 	rol ax, 8
  7361 00005902 E640                <1> 	out 0x40, al
  7362                              <1> 	;enable rtc interrupt
  7363 00005904 B00B                <1> 	mov al, 0xB
  7364 00005906 E670                <1> 	out 0x70, al
  7365 00005908 66C1C008            <1> 	rol ax, 8
  7366 0000590C E471                <1> 	in al, 0x71
  7367 0000590E 66C1C008            <1> 	rol ax, 8
  7368 00005912 E670                <1> 	out 0x70, al
  7369 00005914 66C1C008            <1> 	rol ax, 8
  7370 00005918 0C40                <1> 	or al, 0x40
  7371 0000591A E671                <1> 	out 0x71, al
  7372 0000591C C3                  <1> 	ret
  7373                              <1> .fpu:
  7374                              <1> 	;And now to initialize the fpu
  7375 0000591D 0F20E0              <1> 	mov eax, cr4
  7376 00005920 0D00020000          <1> 	or eax, 0x200
  7377 00005925 0F22E0              <1> 	mov cr4, eax
  7378 00005928 B87F0B0000          <1> 	mov eax, 0xB7F
  7379 0000592D 50                  <1> 	push eax
  7380 0000592E D92C24              <1> 	fldcw [esp]
  7381 00005931 58                  <1> 	pop eax
  7382 00005932 C3                  <1> 	ret
  7383                              <1> 	
  7384                              <1> .sse:
  7385 00005933 0F20C0              <1> 	mov eax, cr0
  7386 00005936 24FB                <1> 	and al, 11111011b
  7387 00005938 0C02                <1> 	or al, 00000010b
  7388 0000593A 0F22C0              <1> 	mov cr0, eax
  7389 0000593D 0F20E0              <1> 	mov eax, cr4
  7390 00005940 660D0006            <1> 	or ax, 0000011000000000b
  7391 00005944 0F22E0              <1> 	mov cr4, eax
  7392 00005947 C3                  <1> 	ret
  7393                                      %include "source/pci.asm"
  7394 00005948 00                  <1> pcibus		db 0
  7395 00005949 00                  <1> pcidevice	db 0
  7396 0000594A 00                  <1> pcifunction	db 0
  7397 0000594B 00                  <1> pciregister	db 0
  7398 0000594C 00                  <1> pcireqtype	db 0
  7399 0000594D 00000000            <1> pcidevid	dd 0
  7400 00005951 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7401                              <1> getpcimem:
  7402 00005955 B002                <1> 	mov al, 2
  7403 00005957 A2[4C590000]        <1> 	mov [pcireqtype], al
  7404 0000595C E922000000          <1> 	jmp searchpci
  7405                              <1> getpciport:
  7406 00005961 B001                <1> 	mov al, 1
  7407 00005963 A2[4C590000]        <1> 	mov [pcireqtype], al
  7408 00005968 E916000000          <1> 	jmp searchpci
  7409                              <1> pcidump:
  7410 0000596D 31C0                <1> 	xor eax, eax
  7411 0000596F A2[4A590000]        <1> 	mov [pcifunction], al
  7412 00005974 A2[48590000]        <1> 	mov [pcibus], al
  7413 00005979 A2[49590000]        <1> 	mov [pcidevice], al
  7414 0000597E A2[4C590000]        <1> 	mov [pcireqtype], al
  7415                              <1> searchpci:		;;return in ebx, start X in pciX
  7416 00005983 30C0                <1> 	xor al, al
  7417 00005985 A2[4B590000]        <1> 	mov [pciregister], al
  7418 0000598A E823020000          <1> 	call getpciaddr
  7419 0000598F BAF80C0000          <1> 	mov edx, 0xCF8
  7420 00005994 EF                  <1> 	out dx, eax	;;request pci config
  7421 00005995 BAFC0C0000          <1> 	mov edx, 0xCFC
  7422 0000599A ED                  <1> 	in eax, dx 	;;read in pci config
  7423 0000599B 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7424 000059A0 0F823D000000        <1> 	jb near checkpcidevice
  7425                              <1> searchpciret:
  7426                              <1> nextpcidevice:
  7427 000059A6 30C0                <1> 	xor al, al
  7428 000059A8 A2[4A590000]        <1> 	mov [pcifunction], al
  7429 000059AD A0[49590000]        <1> 	mov al, [pcidevice]
  7430 000059B2 3C1F                <1> 	cmp al, 11111b
  7431 000059B4 0F8306010000        <1> 	jae near nextpcibus
  7432 000059BA FEC0                <1> 	inc al
  7433 000059BC A2[49590000]        <1> 	mov [pcidevice], al
  7434 000059C1 E9BDFFFFFF          <1> 	jmp searchpci
  7435 000059C6 A0[4A590000]        <1> 	mov al, [pcifunction]
  7436 000059CB 3C07                <1> 	cmp al, 111b
  7437 000059CD 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  7438 000059D3 FEC0                <1> 	inc al
  7439 000059D5 A2[4A590000]        <1> 	mov [pcifunction], al
  7440 000059DA E9A4FFFFFF          <1> 	jmp searchpci
  7441 000059DF 00000000            <1> pcitype: db 0,0,0,0
  7442                              <1> checkpcidevice:
  7443 000059E3 31C0                <1> 	xor eax, eax
  7444 000059E5 3905[4D590000]      <1> 	cmp [pcidevid], eax
  7445 000059EB 0F8430000000        <1> 	je near .good
  7446 000059F1 A2[4B590000]        <1> 	mov [pciregister], al	;device id, vendor id
  7447 000059F6 E8B7010000          <1> 	call getpciaddr
  7448 000059FB BAF80C0000          <1> 	mov edx, 0xCF8
  7449 00005A00 EF                  <1> 	out dx, eax
  7450 00005A01 BAFC0C0000          <1> 	mov edx, 0xCFC
  7451 00005A06 ED                  <1> 	in eax, dx
  7452 00005A07 2305[51590000]      <1> 	and eax, [pcidevidmask]
  7453 00005A0D 8B1D[4D590000]      <1> 	mov ebx, [pcidevid]
  7454 00005A13 231D[51590000]      <1> 	and ebx, [pcidevidmask]
  7455 00005A19 39D8                <1> 	cmp eax, ebx
  7456 00005A1B 0F8585FFFFFF        <1> 	jne near searchpciret
  7457                              <1> .good:
  7458 00005A21 30C0                <1> 	xor al, al
  7459 00005A23 3805[4C590000]      <1> 	cmp [pcireqtype], al
  7460 00005A29 0F842C000000        <1> 	je near dumppcidevice
  7461 00005A2F B008                <1> 	mov al, 0x08
  7462 00005A31 A2[4B590000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7463 00005A36 E877010000          <1> 	call getpciaddr
  7464 00005A3B BAF80C0000          <1> 	mov edx, 0xCF8
  7465 00005A40 EF                  <1> 	out dx, eax
  7466 00005A41 BAFC0C0000          <1> 	mov edx, 0xCFC
  7467 00005A46 ED                  <1> 	in eax, dx
  7468 00005A47 C1C008              <1> 	rol eax, 8
  7469 00005A4A 3A05[DF590000]      <1> 	cmp al, [pcitype]
  7470 00005A50 0F84A0000000        <1> 	je near foundpciaddr
  7471 00005A56 E94BFFFFFF          <1> 	jmp searchpciret
  7472                              <1> dumppcidevice:
  7473 00005A5B 30C0                <1> 	xor al, al
  7474 00005A5D A2[4B590000]        <1> 	mov [pciregister], al
  7475 00005A62 E84B010000          <1> 	call getpciaddr
  7476 00005A67 89C1                <1> 	mov ecx, eax
  7477 00005A69 C605[782F0000]05    <1> 	mov byte [firsthexshown], 5
  7478 00005A70 E818D5FFFF          <1> 	call showhex
  7479                              <1> dumppcidevicelp:
  7480 00005A75 A2[4B590000]        <1> 	mov [pciregister], al
  7481 00005A7A E833010000          <1> 	call getpciaddr
  7482 00005A7F BAF80C0000          <1> 	mov edx, 0xCF8
  7483 00005A84 EF                  <1> 	out dx, eax
  7484 00005A85 BAFC0C0000          <1> 	mov edx, 0xCFC
  7485 00005A8A ED                  <1> 	in eax, dx
  7486 00005A8B 89C1                <1> 	mov ecx, eax
  7487 00005A8D A0[4B590000]        <1> 	mov al, [pciregister]
  7488 00005A92 0404                <1> 	add al, 4
  7489 00005A94 C605[782F0000]05    <1> 	mov byte [firsthexshown], 5
  7490 00005A9B E8EDD4FFFF          <1> 	call showhex
  7491 00005AA0 3C3C                <1> 	cmp al, 0x3C
  7492 00005AA2 72D1                <1> 	jb dumppcidevicelp
  7493                              <1> dumppcidn:
  7494                              <1> %ifdef io.serial
  7495                              <1> 	mov esi, line
  7496                              <1> 	call print
  7497                              <1> %else
  7498 00005AA4 803D[A0240000]00    <1> 	cmp byte [charpos], 0
  7499 00005AAB 0F84F5FEFFFF        <1> 	je near searchpciret
  7500 00005AB1 BE[1E630000]        <1> 	mov esi, line
  7501 00005AB6 E83CC1FFFF          <1> 	call print
  7502                              <1> %endif
  7503 00005ABB E9E6FEFFFF          <1> 	jmp searchpciret
  7504                              <1> nextpcibus:
  7505 00005AC0 30C0                <1> 	xor al, al
  7506 00005AC2 A2[49590000]        <1> 	mov [pcidevice], al
  7507 00005AC7 A0[48590000]        <1> 	mov al, [pcibus]
  7508 00005ACC 3C7F                <1> 	cmp al, 1111111b
  7509 00005ACE 730C                <1> 	jae donesearchpci
  7510 00005AD0 FEC0                <1> 	inc al
  7511 00005AD2 A2[48590000]        <1> 	mov [pcibus], al
  7512 00005AD7 E9A7FEFFFF          <1> 	jmp searchpci
  7513                              <1> donesearchpci:
  7514 00005ADC BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7515 00005AE1 31D2                <1> 	xor edx, edx
  7516 00005AE3 8815[DF590000]      <1> 	mov [pcitype], dl
  7517 00005AE9 8915[4D590000]      <1> 	mov [pcidevid], edx
  7518 00005AEF 891D[51590000]      <1> 	mov [pcidevidmask], ebx
  7519 00005AF5 C3                  <1> 	ret
  7520                              <1> foundpciaddr:
  7521 00005AF6 B010                <1> 	mov al, 0x10
  7522 00005AF8 A2[4B590000]        <1> 	mov [pciregister], al
  7523 00005AFD 803D[4C590000]02    <1> 	cmp byte [pcireqtype], 2
  7524 00005B04 7443                <1> 	je findpcimemaddr
  7525                              <1> findpciioaddr:
  7526 00005B06 E8A7000000          <1> 	call getpciaddr
  7527 00005B0B BAF80C0000          <1> 	mov edx, 0xCF8
  7528 00005B10 EF                  <1> 	out dx, eax
  7529 00005B11 BAFC0C0000          <1> 	mov edx, 0xCFC
  7530 00005B16 ED                  <1> 	in eax, dx
  7531 00005B17 89C3                <1> 	mov ebx, eax
  7532 00005B19 81E301000000        <1> 	and ebx, 1
  7533 00005B1F 81FB00000000        <1> 	cmp ebx, 0
  7534 00005B25 0F846E000000        <1> 	je near notpciioaddr
  7535 00005B2B 2D01000000          <1> 	sub eax, 1
  7536 00005B30 89C2                <1> 	mov edx, eax
  7537 00005B32 31DB                <1> 	xor ebx, ebx
  7538 00005B34 4B                  <1> 	dec ebx
  7539 00005B35 891D[51590000]      <1> 	mov [pcidevidmask], ebx
  7540 00005B3B 43                  <1> 	inc ebx
  7541 00005B3C 881D[DF590000]      <1> 	mov [pcitype], bl
  7542 00005B42 891D[4D590000]      <1> 	mov [pcidevid], ebx
  7543 00005B48 C3                  <1> 	ret
  7544                              <1> findpcimemaddr:
  7545 00005B49 E864000000          <1> 	call getpciaddr
  7546 00005B4E BAF80C0000          <1> 	mov edx, 0xCF8
  7547 00005B53 EF                  <1> 	out dx, eax
  7548 00005B54 BAFC0C0000          <1> 	mov edx, 0xCFC
  7549 00005B59 ED                  <1> 	in eax, dx
  7550 00005B5A 89C3                <1> 	mov ebx, eax
  7551 00005B5C 81E301000000        <1> 	and ebx, 1
  7552 00005B62 81FB01000000        <1> 	cmp ebx, 1
  7553 00005B68 0F842B000000        <1> 	je near notpciioaddr
  7554 00005B6E C1E804              <1> 	shr eax, 4
  7555 00005B71 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7556 00005B74 89C2                <1> 	mov edx, eax
  7557 00005B76 50                  <1> 	push eax
  7558 00005B77 A1[23020000]        <1> 	mov eax, [basecache]
  7559 00005B7C C1E004              <1> 	shl eax, 4
  7560 00005B7F 29C2                <1> 	sub edx, eax
  7561 00005B81 58                  <1> 	pop eax
  7562 00005B82 31DB                <1> 	xor ebx, ebx
  7563 00005B84 4B                  <1> 	dec ebx
  7564 00005B85 891D[51590000]      <1> 	mov [pcidevidmask], ebx
  7565 00005B8B 43                  <1> 	inc ebx
  7566 00005B8C 881D[DF590000]      <1> 	mov [pcitype], bl
  7567 00005B92 891D[4D590000]      <1> 	mov [pcidevid], ebx
  7568 00005B98 C3                  <1> 	ret
  7569                              <1> notpciioaddr:
  7570 00005B99 A0[4B590000]        <1> 	mov al, [pciregister]
  7571 00005B9E 0404                <1> 	add al, 4
  7572 00005BA0 3C28                <1> 	cmp al, 0x28
  7573 00005BA2 0F87FEFDFFFF        <1> 	ja near searchpciret
  7574 00005BA8 A2[4B590000]        <1> 	mov [pciregister], al
  7575 00005BAD E954FFFFFF          <1> 	jmp findpciioaddr
  7576                              <1> getpciaddr:		;;puts it in eax and ebx
  7577 00005BB2 31C0                <1> 			xor eax, eax
  7578 00005BB4 BB00000080          <1> 			mov ebx, 0x80000000
  7579 00005BB9 A0[48590000]        <1> 			mov al, [pcibus]
  7580 00005BBE C1E010              <1> 			shl eax, 16
  7581 00005BC1 01C3                <1> 			add ebx, eax
  7582 00005BC3 31C0                <1> 			xor eax, eax
  7583 00005BC5 A0[49590000]        <1> 			mov al, [pcidevice]
  7584 00005BCA C1E00B              <1> 			shl eax, 11
  7585 00005BCD 01C3                <1> 			add ebx, eax
  7586 00005BCF 31C0                <1> 			xor eax, eax
  7587 00005BD1 A0[4A590000]        <1> 			mov al, [pcifunction]
  7588 00005BD6 C1E008              <1> 			shl eax, 8
  7589 00005BD9 01C3                <1> 			add ebx, eax
  7590 00005BDB 31C0                <1> 			xor eax, eax
  7591 00005BDD A0[4B590000]        <1> 			mov al, [pciregister]
  7592 00005BE2 01C3                <1> 			add ebx, eax
  7593 00005BE4 89D8                <1> 			mov eax, ebx
  7594 00005BE6 C3                  <1> 			ret
  7595                                      %include "source/disk.asm"
  7596                              <1> %ifdef disk.real
  7597                              <1> 	%include "source/drivers/disk/realmode.asm"
  7598                              <2> diskr:
  7599                              <2> 			;sector count in cl
  7600                              <2> 			;disk number in ch
  7601                              <2> 			;48 bit address with last 32 bits in ebx
  7602                              <2> 			;buffer in esi
  7603                              <2> 			;puts end of buffer in edi and end lba address in edx
  7604 00005BE7 880D[0E5C0000]      <2> 	mov [sdlength], cl
  7605 00005BED 891D[0F5C0000]      <2> 	mov [sdaddress], ebx
  7606 00005BF3 8935[905D0000]      <2> 	mov [oldesireal], esi
  7607 00005BF9 66BE[135C]          <2> 	mov si, readdiskreal
  7608 00005BFD 668935[D10C0000]    <2> 	mov [realmodeptr], si
  7609 00005C04 E8B6AFFFFF          <2> 	call realmode
  7610 00005C09 E941000000          <2> 	jmp backfromrealread
  7611 00005C0E 00                  <2> sdlength db 0
  7612 00005C0F 00000000            <2> sdaddress dd 0
  7613                              <2> 
  7614                              <2> [BITS 16]
  7615                              <2> readdiskreal:
  7616 00005C13 C706[3F5C]1000      <2> 	mov word [dlen], 0x10
  7617 00005C19 C706[435C]0000      <2> 	mov word [daddress], 0
  7618 00005C1F C706[455C]0001      <2> 	mov word [dsegm], 0x100
  7619 00005C25 66891E[475C]        <2> 	mov [dlbaad], ebx
  7620 00005C2A 880E[415C]          <2> 	mov [dreadlen], cl
  7621                              <2> ReadHardDisk:
  7622 00005C2E BE[3F5C]            <2> 	mov si, diskaddresspacket
  7623 00005C31 31C0                <2> 	xor ax, ax
  7624 00005C33 B442                <2> 	mov ah, 0x42
  7625 00005C35 8A16[3E5C]          <2> 	mov dl, [dnumber]
  7626 00005C39 CD13                <2> 	int 0x13
  7627 00005C3B 72F1                <2> 	jc ReadHardDisk
  7628 00005C3D C3                  <2> 	ret
  7629                              <2> 
  7630 00005C3E 80                  <2> dnumber db 0x80
  7631                              <2> diskaddresspacket:
  7632 00005C3F 10                  <2> dlen:	db 0x10 ;size of packet
  7633 00005C40 00                  <2> 		db 0
  7634 00005C41 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7635 00005C43 0000                <2> daddress:	dw 0	;address 0
  7636 00005C45 0001                <2> dsegm:		dw 0x100	;segment
  7637                              <2> 		;start with known value for hd
  7638                              <2> dlbaad:
  7639 00005C47 00000000            <2> 	dd 0	;lba address
  7640 00005C4B 00000000            <2> 	dd 0
  7641                              <2> [BITS 32]
  7642                              <2> backfromrealread:
  7643 00005C4F 8B35[905D0000]      <2> 	mov esi, [oldesireal]
  7644 00005C55 8B1D[0F5C0000]      <2> 	mov ebx, [sdaddress]
  7645 00005C5B 31C9                <2> 	xor ecx, ecx
  7646 00005C5D 8A0D[0E5C0000]      <2> 	mov cl, [sdlength]
  7647 00005C63 01CB                <2> 	add ebx, ecx
  7648 00005C65 66B80800            <2> 	mov ax, LINEAR_SEL
  7649 00005C69 8EE0                <2> 	mov fs, ax
  7650 00005C6B BF00100000          <2> 	mov edi, 0x1000
  7651 00005C70 B200                <2> 	mov dl, 0
  7652 00005C72 D0E1                <2> 	shl cl, 1
  7653                              <2> copyfromrmodedisk:
  7654 00005C74 648A07              <2> 	mov al, [fs:edi]
  7655 00005C77 8806                <2> 	mov [esi], al
  7656 00005C79 47                  <2> 	inc edi
  7657 00005C7A 46                  <2> 	inc esi
  7658 00005C7B FECA                <2> 	dec dl
  7659 00005C7D 80FA00              <2> 	cmp dl, 0
  7660 00005C80 75F2                <2> 	jne copyfromrmodedisk
  7661 00005C82 FEC9                <2> 	dec cl
  7662 00005C84 B200                <2> 	mov dl, 0
  7663 00005C86 80F900              <2> 	cmp cl, 0
  7664 00005C89 75E9                <2> 	jne copyfromrmodedisk
  7665 00005C8B 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7666 00005C8F 8EE0                <2> 	mov fs, ax
  7667 00005C91 89F7                <2> 	mov edi, esi
  7668 00005C93 8B35[905D0000]      <2> 	mov esi, [oldesireal]
  7669 00005C99 89DA                <2> 	mov edx, ebx
  7670 00005C9B 8B1D[0F5C0000]      <2> 	mov ebx, [sdaddress]
  7671 00005CA1 C3                  <2> 	ret
  7672                              <2> 	
  7673                              <1> %else
  7674                              <1> 	%ifdef disk.protected
  7675                              <1> 		%include "source/drivers/disk/pata.asm"
  7676                              <1> 	%endif
  7677                              <1> %endif
  7678                              <1> %ifdef disk.none
  7679                              <1> loadfile:	xor edx, edx
  7680                              <1> 			cmp byte [edi], '&'
  7681                              <1> 			je .ret
  7682                              <1> 			mov edx, 404	;no files are found except &
  7683                              <1> 		.ret:
  7684                              <1> 			ret
  7685                              <1> %else
  7686                              <1> ;This loads files using the methods in the loaded driver
  7687                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7688                              <1> 			;returns with err code in edx and file end in edi
  7689 00005CA2 803F00              <1> 	cmp byte [edi], 0
  7690 00005CA5 0F8448000000        <1> 	je near nofileload
  7691 00005CAB 89FA                <1> 	mov edx, edi
  7692 00005CAD BB[9D650300]        <1> 	mov ebx, diskfileindex
  7693                              <1> nextnamechar:
  7694 00005CB2 8A07                <1> 	mov al, [edi]
  7695 00005CB4 3C26                <1> 	cmp al, '&'
  7696 00005CB6 7440                <1> 	je nullfile
  7697 00005CB8 8A23                <1> 	mov ah, [ebx]
  7698 00005CBA 47                  <1> 	inc edi
  7699 00005CBB 43                  <1> 	inc ebx
  7700 00005CBC 88C1                <1> 	mov cl, al
  7701 00005CBE 08E1                <1> 	or cl, ah
  7702 00005CC0 80F900              <1> 	cmp cl, 0
  7703 00005CC3 746E                <1> 	je equalfilenames
  7704 00005CC5 80F920              <1> 	cmp cl, ' '
  7705 00005CC8 7469                <1> 	je equalfilenames
  7706 00005CCA 3C2A                <1> 	cmp al, '*'
  7707 00005CCC 742B                <1> 	je asteriskcheck
  7708 00005CCE 80FC00              <1> 	cmp ah, 0
  7709 00005CD1 7410                <1> 	je nextfilename
  7710 00005CD3 3C00                <1> 	cmp al, 0
  7711 00005CD5 7404                <1> 	je getebxzero
  7712 00005CD7 38E0                <1> 	cmp al, ah
  7713 00005CD9 74D7                <1> 	je nextnamechar
  7714                              <1> getebxzero:
  7715 00005CDB 8A23                <1> 	mov ah, [ebx]
  7716 00005CDD 43                  <1> 	inc ebx
  7717 00005CDE 80FC00              <1> 	cmp ah, 0
  7718 00005CE1 75F8                <1> 	jne getebxzero
  7719                              <1> nextfilename:
  7720 00005CE3 81C308000000        <1> 	add ebx, 8		;next descriptor
  7721 00005CE9 89D7                <1> 	mov edi, edx
  7722 00005CEB 81FB[C3670300]      <1> 	cmp ebx, enddiskfileindex
  7723 00005CF1 72BF                <1> 	jb nextnamechar
  7724                              <1> nofileload:
  7725 00005CF3 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7726                              <1> nullfile:
  7727 00005CF8 C3                  <1> 	ret
  7728                              <1> asteriskcheck:
  7729 00005CF9 4B                  <1> 	dec ebx
  7730 00005CFA 8A07                <1> 	mov al, [edi]
  7731 00005CFC 3C2A                <1> 	cmp al, '*'
  7732 00005CFE 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  7733 00005D00 3C20                <1> 	cmp al, ' '
  7734 00005D02 7415                <1> 	je equalfilenames2
  7735 00005D04 3C00                <1> 	cmp al, 0
  7736 00005D06 7411                <1> 	je equalfilenames2
  7737                              <1> .lp:
  7738 00005D08 8A23                <1> 	mov ah, [ebx]
  7739 00005D0A 80FC00              <1> 	cmp ah, 0
  7740 00005D0D 74D4                <1> 	je nextfilename
  7741 00005D0F 38E0                <1> 	cmp al, ah
  7742 00005D11 749F                <1> 	je nextnamechar
  7743 00005D13 43                  <1> 	inc ebx
  7744 00005D14 E9EFFFFFFF          <1> 	jmp .lp
  7745                              <1> equalfilenames2:
  7746 00005D19 81EB02000000        <1> 	sub ebx, 2
  7747                              <1> eqfilefind:
  7748 00005D1F 43                  <1> 	inc ebx
  7749 00005D20 81FB[C3670300]      <1> 	cmp ebx, enddiskfileindex
  7750 00005D26 0F83C7FFFFFF        <1> 	jae near nofileload
  7751 00005D2C 8A03                <1> 	mov al, [ebx]
  7752 00005D2E 3C00                <1> 	cmp al, 0
  7753 00005D30 75ED                <1> 	jne eqfilefind
  7754 00005D32 43                  <1> 	inc ebx
  7755                              <1> equalfilenames:
  7756 00005D33 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7757 00005D36 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7758 00005D38 031D[45630000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  7759 00005D3E 31C9                <1> 	xor ecx, ecx
  7760 00005D40 88C1                <1> 	mov cl, al			;get excess number of sectors
  7761 00005D42 C0E102              <1> 	shl cl, 2
  7762 00005D45 C0E902              <1> 	shr cl, 2			;cut off at 64
  7763 00005D48 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7764 00005D4A B500                <1> 	mov ch, 0			;drive 0
  7765 00005D4C C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7766                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7767 00005D4F A3[945D0000]        <1> 	mov [filetracks], eax
  7768 00005D54 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7769 00005D56 89DA                <1> 	mov edx, ebx
  7770 00005D58 80F900              <1> 	cmp cl, 0
  7771 00005D5B 7405                <1> 	je copytracksforfile
  7772 00005D5D E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  7773                              <1> copytracksforfile:
  7774 00005D62 A1[945D0000]        <1> 	mov eax, [filetracks]
  7775 00005D67 3D00000000          <1> 	cmp eax, 0
  7776 00005D6C 741C                <1> 	je donecopyfile
  7777 00005D6E 48                  <1> 	dec eax
  7778 00005D6F A3[945D0000]        <1> 	mov [filetracks], eax
  7779 00005D74 89D3                <1> 	mov ebx, edx	;get end lba
  7780 00005D76 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7781 00005D78 8A2D[44630000]      <1> 	mov ch, [DriveNumber]
  7782 00005D7E 89FE                <1> 	mov esi, edi	;reset buffer
  7783 00005D80 E862FEFFFF          <1> 	call diskr
  7784 00005D85 E9D8FFFFFF          <1> 	jmp copytracksforfile
  7785                              <1> donecopyfile:
  7786 00005D8A BA00000000          <1> 	mov edx, 0	;no error
  7787 00005D8F C3                  <1> 	ret
  7788                              <1> 
  7789 00005D90 00000000            <1> oldesireal dd 0
  7790 00005D94 00000000            <1> filetracks dd 0
  7791 00005D98 00                  <1> lbad1 db 0
  7792 00005D99 00                  <1> lbad2 db 0
  7793 00005D9A 00                  <1> lbad3 db 0
  7794 00005D9B 00                  <1> lbad4 db 0
  7795 00005D9C 00                  <1> lbad5 db 0
  7796 00005D9D 00                  <1> lbad6 db 0
  7797 00005D9E 6400                <1> segments dw 100
  7798                              <1> %endif
  7799                                      %include "source/threads.asm"
  7800                              <1> %ifdef threads.included	
  7801                              <1> nwcmdst:
  7802 00005DA0 31C0                <1> 	xor eax, eax
  7803 00005DA2 BC[64770300]        <1> 	mov esp, stackend
  7804 00005DA7 A2[675E0000]        <1> 	mov [threadson], al
  7805 00005DAC A3[685E0000]        <1> 	mov [currentthread], eax
  7806 00005DB1 0504000000          <1> 	add eax, 4
  7807 00005DB6 A3[635E0000]        <1> 	mov [lastthread], eax
  7808 00005DBB FB                  <1> 	sti
  7809 00005DBC E9B9CCFFFF          <1> 	jmp nwcmd
  7810                              <1> 
  7811                              <1> nomorethreadspace:
  7812 00005DC1 BE[D75D0000]        <1> 	mov esi, nmts
  7813 00005DC6 E82CBEFFFF          <1> 	call print
  7814 00005DCB C605[675E0000]00    <1> 	mov byte [threadson], 0
  7815 00005DD2 E9A3CCFFFF          <1> 	jmp nwcmd
  7816 00005DD7 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7817 00005DE0 6572666C6F770A00    <1>
  7818                              <1> 
  7819                              <1> nomorestackspace:
  7820 00005DE8 BE[F75D0000]        <1> 	mov esi, nmss
  7821 00005DED E805BEFFFF          <1> 	call print
  7822 00005DF2 E9A9FFFFFF          <1> 	jmp nwcmdst
  7823 00005DF7 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7824 00005E00 72666C6F770A00      <1>
  7825                              <1> 	
  7826                              <1> threadswitch:
  7827 00005E07 FA                  <1> 	cli
  7828 00005E08 60                  <1> 	pushad
  7829 00005E09 BF[81110400]        <1> 	mov edi, threadlist
  7830 00005E0E A1[685E0000]        <1> 	mov eax, [currentthread]
  7831 00005E13 40                  <1> 	inc eax
  7832 00005E14 A3[685E0000]        <1> 	mov [currentthread], eax
  7833 00005E19 6648                <1> 	dec ax
  7834 00005E1B C1E002              <1> 	shl eax, 2
  7835 00005E1E 01C7                <1> 	add edi, eax
  7836 00005E20 8927                <1> 	mov [edi], esp
  7837 00005E22 81C704000000        <1> 	add edi, 4
  7838 00005E28 81FF[81210400]      <1> 	cmp edi, threadlistend
  7839 00005E2E 0F830D000000        <1> 	jae near nookespthread
  7840 00005E34 8B07                <1> 	mov eax, [edi]
  7841 00005E36 3D00000000          <1> 	cmp eax, 0
  7842 00005E3B 0F8519000000        <1> 	jne near okespthread
  7843                              <1> nookespthread:
  7844 00005E41 BF[81110400]        <1> 	mov edi, threadlist
  7845 00005E46 31C0                <1> 	xor eax, eax
  7846 00005E48 A3[685E0000]        <1> 	mov [currentthread], eax
  7847 00005E4D 8B07                <1> 	mov eax, [edi]
  7848 00005E4F 3D00000000          <1> 	cmp eax, 0
  7849 00005E54 0F8446FFFFFF        <1> 	je near nwcmdst
  7850                              <1> okespthread:
  7851 00005E5A 89C4                <1> 	mov esp, eax
  7852 00005E5C B020                <1> 	mov al, 0x20
  7853 00005E5E E620                <1> 	out 0x20, al
  7854 00005E60 61                  <1> 	popad
  7855 00005E61 FB                  <1> 	sti
  7856 00005E62 CF                  <1> 	iret
  7857                              <1> 
  7858                              <1> %endif
  7859 00005E63 04000000            <1> 	lastthread dd 4
  7860 00005E67 00                  <1> 	threadson db 0
  7861 00005E68 00000000            <1> 	currentthread dd 0
  7862                                  %ifdef gui.included
  7863                                      %include "source/gui/gui.asm"
  7864                                  %endif
  7865                                  %ifdef network.included
  7866                                  	%include "source/network.asm"
  7867                              <1> network.init:
  7868                              <1> %ifdef rtl8139.included
  7869                              <1> 	%include "source/drivers/network/rtl8139.asm"
  7870                              <1> %endif
  7871                              <1> %ifdef rtl8169.included
  7872                              <1> 	%include "source/drivers/network/rtl8169.asm"
  7873                              <1> %endif
  7874                              <1> %ifdef ne2000.included
  7875                              <1> 	%include "source/drivers/network/ne2000.asm"
  7876                              <2> ne2000:
  7877 00005E6C E805000000          <2> 	call .init
  7878 00005E71 E93C030000          <2> 	jmp .end
  7879                              <2> 
  7880                              <2> ;	PAGE0			PAGE 1			PAGE 2
  7881                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  7882                              <2> ;0	CR		CR		CR		CR		CR		CR
  7883                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  7884                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  7885                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  7886                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  7887                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  7888                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  7889                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  7890                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  7891                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  7892                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  7893                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  7894                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  7895                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  7896                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  7897                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  7898                              <2> .CR equ 0
  7899                              <2> 	.CR.STP	equ 1		;Stop
  7900                              <2> 	.CR.STA equ 2		;Start
  7901                              <2> 	.CR.TXP equ 4		;Transmit
  7902                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  7903                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  7904                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  7905                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  7906                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  7907                              <2> .PSTART equ 1
  7908                              <2> .PSTOP equ 2
  7909                              <2> .BNRY equ 3
  7910                              <2> .ISR equ 7
  7911                              <2> 	.ISR.PRX equ 1		;Packet Received
  7912                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  7913                              <2> 	.ISR.RXE equ 4		;Receive Error
  7914                              <2> 	.ISR.TXE equ 8		;Transmission Error
  7915                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  7916                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  7917                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  7918                              <2> 	.ISR.RST equ 0x80	;Reset status
  7919                              <2> .RSAR0 equ 8
  7920                              <2> .RSAR1 equ 9
  7921                              <2> .RBCR0 equ 0xA
  7922                              <2> .RBCR1 equ 0xB
  7923                              <2> .RCR equ 0xC
  7924                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  7925                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  7926                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  7927                              <2> 	.RCR.AM equ 8		;Accept Multicast
  7928                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  7929                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  7930                              <2> .DCR equ 0xE
  7931                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  7932                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  7933                              <2> 	.DCR.LAS equ 4		;Long Address Select
  7934                              <2> 	.DCR.LS equ 8		;Loopback Select
  7935                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  7936                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  7937                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  7938                              <2> .ASIC equ 0x10
  7939                              <2> .RESET equ 0x1F
  7940                              <2> 
  7941                              <2> .init:
  7942 00005E76 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
  7943 00005E7B 31C0                <2> 	xor eax, eax
  7944 00005E7D A2[4A590000]        <2> 	mov [pcifunction], al
  7945 00005E82 A2[48590000]        <2> 	mov [pcibus], al
  7946 00005E87 A2[49590000]        <2> 	mov [pcidevice], al
  7947 00005E8C B002                <2> 	mov al, 2 ;type code
  7948 00005E8E A2[DF590000]        <2> 	mov [pcitype], al
  7949 00005E93 B8EC102980          <2> 	mov eax, 0x802910EC
  7950 00005E98 A3[4D590000]        <2> 	mov [pcidevid], eax
  7951 00005E9D E8BFFAFFFF          <2> 	call getpciport
  7952 00005EA2 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  7953 00005EA8 7501                <2> 	jne .good0
  7954 00005EAA C3                  <2> 	ret
  7955                              <2> .good0:
  7956 00005EAB 8915[75610000]      <2> 	mov [.basenicaddr], edx
  7957 00005EB1 89D1                <2> 	mov ecx, edx
  7958                              <2> .test:
  7959 00005EB3 E854000000          <2> 	call .reset
  7960 00005EB8 E87B000000          <2> 	call .stop
  7961 00005EBD 89CA                <2> 	mov edx, ecx
  7962 00005EBF B9FF000000          <2> 	mov ecx, 0xFF
  7963 00005EC4 E2FE                <2> 	loop $ ;wait for ~100 us
  7964 00005EC6 89D1                <2> 	mov ecx, edx
  7965 00005EC8 EC                  <2> 	in al, dx
  7966 00005EC9 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
  7967 00005ECB 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
  7968 00005ECD 7410                <2> 	je .good1
  7969 00005ECF 89CA                <2> 	mov edx, ecx
  7970 00005ED1 81C207000000        <2> 	add edx, .ISR
  7971 00005ED7 EC                  <2> 	in al, dx
  7972 00005ED8 2480                <2> 	and al, .ISR.RST
  7973 00005EDA 3C80                <2> 	cmp al, .ISR.RST
  7974 00005EDC 7401                <2> 	je .good1
  7975 00005EDE C3                  <2> 	ret
  7976                              <2> .good1:
  7977 00005EDF E8A9D0FFFF          <2> call showhex	;for debugging, please remove
  7978 00005EE4 E85B000000          <2> 	call .setup
  7979 00005EE9 E87E030000          <2> call showmac
  7980 00005EEE BE[7A610000]        <2> mov esi, .name
  7981 00005EF3 E8FFBCFFFF          <2> call print
  7982 00005EF8 BE[82610000]        <2> mov esi, .initmsg
  7983 00005EFD E8F5BCFFFF          <2> call print
  7984 00005F02 C605[79610000]01    <2> 	mov byte [.nicconfig], 1
  7985 00005F09 31DB                <2> 	xor ebx, ebx
  7986 00005F0B C3                  <2> 	ret
  7987                              <2> .reset:
  7988 00005F0C 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  7989 00005F12 81C21F000000        <2> 	add edx, .RESET
  7990 00005F18 EC                  <2> 	in al, dx
  7991 00005F19 EE                  <2> 	out dx, al ;write its contents to itself
  7992 00005F1A C3                  <2> 	ret
  7993                              <2> .page:
  7994 00005F1B 66C1E00E            <2> 	shl ax, 14
  7995 00005F1F 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  7996 00005F25 EC                  <2> 	in al, dx
  7997 00005F26 243F                <2> 	and al, 00111111b
  7998 00005F28 08E0                <2> 	or al, ah
  7999 00005F2A EE                  <2> 	out dx, al
  8000 00005F2B C3                  <2> 	ret
  8001                              <2> .start:
  8002 00005F2C 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8003 00005F32 B020                <2> 	mov al, .CR.RD2
  8004 00005F34 B002                <2> 	mov al, .CR.STA
  8005 00005F36 EE                  <2> 	out dx, al
  8006 00005F37 C3                  <2> 	ret
  8007                              <2> .stop:
  8008 00005F38 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8009 00005F3E B020                <2> 	mov al, .CR.RD2
  8010 00005F40 0C01                <2> 	or al, .CR.STP
  8011 00005F42 EE                  <2> 	out dx, al
  8012 00005F43 C3                  <2> 	ret
  8013                              <2> .setup:
  8014 00005F44 E8EFFFFFFF          <2> 	call .stop
  8015 00005F49 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8016 00005F4F 81C20E000000        <2> 	add edx, .DCR
  8017 00005F55 B040                <2> 	mov al, .DCR.FT1
  8018 00005F57 0C01                <2> 	or al, .DCR.WTS
  8019 00005F59 0C08                <2> 	or al, .DCR.LS
  8020 00005F5B EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
  8021 00005F5C E8B9000000          <2> 	call .getmac
  8022 00005F61 E8D2FFFFFF          <2> 	call .stop
  8023 00005F66 30C0                <2> 	xor al, al
  8024 00005F68 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8025 00005F6E 81C20A000000        <2> 	add edx, .RBCR0
  8026 00005F74 EE                  <2> 	out dx, al
  8027 00005F75 6642                <2> 	inc dx
  8028 00005F77 EE                  <2> 	out dx, al ;Clear byte count
  8029 00005F78 B800400000          <2> 	mov eax, 16*1024
  8030 00005F7D A3[94610000]        <2> 	mov [.ringstart], eax
  8031 00005F82 C1E808              <2> 	shr eax, 8
  8032 00005F85 66A3[90610000]      <2> 	mov [.pagestart], ax
  8033 00005F8B 0534000000          <2> 	add eax, 64-2*6
  8034 00005F90 A3[92610000]        <2> 	mov [.pageend], eax
  8035 00005F95 C1E008              <2> 	shl eax, 8
  8036 00005F98 66A3[98610000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
  8037 00005F9E 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8038 00005FA4 81C201000000        <2> 	add edx, .PSTART
  8039 00005FAA A0[90610000]        <2> 	mov al, [.pagestart]
  8040 00005FAF EE                  <2> 	out dx, al
  8041 00005FB0 A0[92610000]        <2> 	mov al, [.pageend]
  8042 00005FB5 6642                <2> 	inc dx
  8043 00005FB7 EE                  <2> 	out dx, al
  8044 00005FB8 A0[90610000]        <2> 	mov al, [.pagestart]
  8045 00005FBD 6642                <2> 	inc dx
  8046 00005FBF EE                  <2> 	out dx, al
  8047 00005FC0 E873FFFFFF          <2> 	call .stop
  8048                              <2> ;INSERT INTERRUPT ENABLE HERE
  8049 00005FC5 B001                <2> 	mov al, 1
  8050 00005FC7 E84FFFFFFF          <2> 	call .page
  8051 00005FCC 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8052 00005FD2 BF[A2610000]        <2> 	mov edi, .rom
  8053                              <2> .copymactocard:
  8054 00005FD7 42                  <2> 	inc edx
  8055 00005FD8 6E                  <2> 	outsb
  8056 00005FD9 81C702000000        <2> 	add edi, 2
  8057 00005FDF 81FA06000000        <2> 	cmp edx, 6
  8058 00005FE5 76F0                <2> 	jbe .copymactocard
  8059 00005FE7 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8060 00005FED 81C207000000        <2> 	add edx, 7
  8061 00005FF3 A0[90610000]        <2> 	mov al, [.pagestart]
  8062 00005FF8 FEC0                <2> 	inc al
  8063 00005FFA EE                  <2> 	out dx, al ;set page in CURR register
  8064                              <2> ;INSERT MULTICAST INIT HERE
  8065 00005FFB E838FFFFFF          <2> 	call .stop
  8066 00006000 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8067 00006006 81C20C000000        <2> 	add edx, .RCR
  8068 0000600C B004                <2> 	mov al, .RCR.AB
  8069 0000600E EE                  <2> 	out dx, al ;accept broadcast
  8070 0000600F 6642                <2> 	inc dx
  8071 00006011 30C0                <2> 	xor al, al
  8072 00006013 EE                  <2> 	out dx, al ;stop loopback
  8073 00006014 E813FFFFFF          <2> 	call .start
  8074 00006019 C3                  <2> 	ret
  8075                              <2> .getmac:
  8076 0000601A 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8077 00006020 B020                <2> 	mov al, 0x20
  8078 00006022 0C02                <2> 	or al, 2
  8079 00006024 EE                  <2> 	out dx, al	;set STA and RD2 bits
  8080 00006025 6681C20A00          <2> 	add dx, .RBCR0
  8081 0000602A B010                <2> 	mov al, 16
  8082 0000602C EE                  <2> 	out dx, al
  8083 0000602D 6642                <2> 	inc dx
  8084 0000602F 30C0                <2> 	xor al, al
  8085 00006031 EE                  <2> 	out dx, al
  8086 00006032 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8087 00006038 6681C20800          <2> 	add dx, .RSAR0
  8088 0000603D EE                  <2> 	out dx, al
  8089 0000603E 6642                <2> 	inc dx
  8090 00006040 EE                  <2> 	out dx, al
  8091 00006041 668B15[75610000]    <2> 	mov dx, [.basenicaddr]
  8092 00006048 B008                <2> 	mov al, 8
  8093 0000604A 0C02                <2> 	or al, 2
  8094 0000604C EE                  <2> 	out dx, al
  8095 0000604D 668B15[75610000]    <2> 	mov dx, [.basenicaddr]
  8096 00006054 6681C21000          <2> 	add dx, .ASIC
  8097 00006059 B908000000          <2> 	mov ecx, 8
  8098 0000605E BF[A2610000]        <2> 	mov edi, .rom
  8099 00006063 F3666D              <2> 	rep insw
  8100                              <2> .copymac:
  8101 00006066 BF[A2610000]        <2> 	mov edi, .rom
  8102 0000606B BE[9C610000]        <2> 	mov esi, .mac
  8103 00006070 B906000000          <2> 	mov ecx, 6
  8104                              <2> .lpmac:
  8105 00006075 8A07                <2> 	mov al, [edi]
  8106 00006077 8806                <2> 	mov [esi], al
  8107 00006079 81C702000000        <2> 	add edi, 2
  8108 0000607F 46                  <2> 	inc esi
  8109 00006080 E2F3                <2> 	loop .lpmac
  8110 00006082 B9[9C610000]        <2> 	mov ecx, .mac
  8111 00006087 C3                  <2> 	ret
  8112                              <2> .sendpacket:
  8113 00006088 803D[79610000]00    <2> 	cmp byte [.nicconfig], 0
  8114 0000608F 7512                <2> 	jne .sendit
  8115 00006091 56                  <2> 	push esi
  8116 00006092 57                  <2> 	push edi
  8117 00006093 E8DEFDFFFF          <2> 	call .init
  8118 00006098 5F                  <2> 	pop edi
  8119 00006099 5E                  <2> 	pop esi
  8120 0000609A 81FB00000000        <2> 	cmp ebx, 0
  8121 000060A0 7401                <2> 	je .sendit
  8122 000060A2 C3                  <2> 	ret
  8123                              <2> .sendit: ;packet start in edi, end in esi
  8124 000060A3 87F7                <2> 	xchg esi, edi ;this helps with the outsw
  8125                              <2> 	;now the packet start is in esi, end in edi
  8126 000060A5 8B0D[9C610000]      <2> 	mov ecx, [.mac]
  8127 000060AB 894E06              <2> 	mov [esi + 6], ecx
  8128 000060AE 668B0D[A0610000]    <2> 	mov cx, [.mac + 4]
  8129 000060B5 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
  8130 000060B9 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8131 000060BF B020                <2> 	mov al, .CR.RD2
  8132 000060C1 0C02                <2> 	or al, .CR.STA
  8133 000060C3 EE                  <2> 	out dx, al ;set RD2 and STA
  8134 000060C4 81C207000000        <2> 	add edx, .ISR ; ISR
  8135 000060CA B040                <2> 	mov al, .ISR.RDC
  8136 000060CC EE                  <2> 	out dx, al ;set RDC flag
  8137 000060CD 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8138 000060D3 6681C20A00          <2> 	add dx, .RBCR0
  8139 000060D8 89F8                <2> 	mov eax, edi
  8140 000060DA 29F0                <2> 	sub eax, esi
  8141 000060DC BB01000000          <2> 	mov ebx, 1
  8142 000060E1 21C3                <2> 	and ebx, eax
  8143 000060E3 81FB01000000        <2> 	cmp ebx, 1
  8144 000060E9 7501                <2> 	jne .nofixword
  8145 000060EB 40                  <2> 	inc eax
  8146                              <2> .nofixword:
  8147 000060EC 89C1                <2> 	mov ecx, eax ;save length in ecx
  8148 000060EE EE                  <2> 	out dx, al
  8149 000060EF 86C4                <2> 	xchg al, ah
  8150 000060F1 6642                <2> 	inc dx
  8151 000060F3 EE                  <2> 	out dx, al ;send size
  8152 000060F4 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8153 000060FA 6681C20800          <2> 	add dx, .RSAR0
  8154 000060FF 66A1[90610000]      <2> 	mov ax, [.pagestart]
  8155 00006105 C1E008              <2> 	shl eax, 8
  8156 00006108 EE                  <2> 	out dx, al
  8157 00006109 86C4                <2> 	xchg al, ah
  8158 0000610B 6642                <2> 	inc dx
  8159 0000610D EE                  <2> 	out dx, al ;send address in NIC memory
  8160 0000610E 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8161 00006114 B010                <2> 	mov al, .CR.RD1
  8162 00006116 0C02                <2> 	or al, .CR.STA
  8163 00006118 EE                  <2> 	out dx, al ;set RD and STA
  8164 00006119 89CB                <2> 	mov ebx, ecx ;save length in ebx
  8165 0000611B D1E9                <2> 	shr ecx, 1
  8166 0000611D 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8167 00006123 6681C21000          <2> 	add dx, 0x10
  8168 00006128 F3666F              <2> 	rep outsw ;Send the packet data
  8169 0000612B 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8170 00006131 6681C20700          <2> 	add dx, .ISR
  8171                              <2> .chkcopylp:
  8172 00006136 B440                <2> 	mov ah, .ISR.RDC
  8173 00006138 EC                  <2> 	in al, dx
  8174 00006139 20C4                <2> 	and ah, al
  8175 0000613B 80FC40              <2> 	cmp ah, 0x40
  8176 0000613E 75F6                <2> 	jne .chkcopylp	
  8177 00006140 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8178 00006146 6681C20400          <2> 	add dx, 4
  8179 0000614B A0[90610000]        <2> 	mov al, [.pagestart]
  8180 00006150 EE                  <2> 	out dx, al ;send start address in pages
  8181 00006151 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8182 00006157 81C205000000        <2> 	add edx, 0x5
  8183 0000615D 89D8                <2> 	mov eax, ebx
  8184 0000615F EE                  <2> 	out dx, al
  8185 00006160 86C4                <2> 	xchg al, ah
  8186 00006162 6642                <2> 	inc dx
  8187 00006164 EE                  <2> 	out dx, al ;send length
  8188 00006165 8B15[75610000]      <2> 	mov edx, [.basenicaddr]
  8189 0000616B B020                <2> 	mov al, 0x20
  8190 0000616D 0C04                <2> 	or al, 4
  8191 0000616F 0C02                <2> 	or al, 2
  8192 00006171 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
  8193 00006172 31DB                <2> 	xor ebx, ebx
  8194 00006174 C3                  <2> 	ret
  8195 00006175 00000000            <2> .basenicaddr dd 0
  8196 00006179 00                  <2> .nicconfig db 0
  8197 0000617A 4E45323030302000    <2> .name db "NE2000 ",0
  8198 00006182 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
  8199 0000618B 65642E0A00          <2>
  8200                              <2> align 2, nop
  8201 00006190 0000                <2> .pagestart dw 0
  8202 00006192 0000                <2> .pageend dw 0
  8203 00006194 00000000            <2> .ringstart dd 0
  8204 00006198 00000000            <2> .ringend dd 0
  8205 0000619C 000000000000        <2> .mac db 0,0,0,0,0,0
  8206 000061A2 00<rept>            <2> .rom times 16 db 0
  8207                              <2> 
  8208                              <2> .end:
  8209                              <1> %endif
  8210                              <1> %ifdef i8254x.included
  8211                              <1> 	%include "source/drivers/network/i8254x.asm"
  8212                              <1> %endif
  8213 000061B2 C3                  <1> 	ret
  8214                              <1> 
  8215                              <1> sendpacket: ;packet start in edi, end in esi
  8216                              <1> 	%ifdef rtl8139.included
  8217                              <1> 		push edi
  8218                              <1> 		push esi
  8219                              <1> 		call rtl8139.sendpacket
  8220                              <1> 		pop esi
  8221                              <1> 		pop edi
  8222                              <1> 	%endif
  8223                              <1> 	%ifdef rtl8169.included
  8224                              <1> 		push edi
  8225                              <1> 		push esi
  8226                              <1> 		call rtl8169.sendpacket
  8227                              <1> 		pop esi
  8228                              <1> 		pop edi
  8229                              <1> 	%endif
  8230                              <1> 	%ifdef ne2000.included
  8231 000061B3 57                  <1> 		push edi
  8232 000061B4 56                  <1> 		push esi
  8233 000061B5 E8CEFEFFFF          <1> 		call ne2000.sendpacket
  8234 000061BA 5E                  <1> 		pop esi
  8235 000061BB 5F                  <1> 		pop edi
  8236                              <1> 	%endif
  8237                              <1> 	%ifdef i8254x.included
  8238                              <1> 		call i8254x.sendpacket
  8239                              <1> 	%endif
  8240 000061BC C3                  <1> 	ret
  8241                              <1> 
  8242                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
  8243 000061BD 31C0                <1> 	xor eax, eax
  8244 000061BF 31DB                <1> 	xor ebx, ebx
  8245 000061C1 31C9                <1> 	xor ecx, ecx
  8246                              <1> .lp:
  8247 000061C3 8A07                <1> 	mov al, [edi]
  8248 000061C5 8A6701              <1> 	mov ah, [edi + 1]
  8249 000061C8 01C3                <1> 	add ebx, eax
  8250 000061CA 81C702000000        <1> 	add edi, 2
  8251 000061D0 39F7                <1> 	cmp edi, esi
  8252 000061D2 72EF                <1> 	jb .lp
  8253 000061D4 66B9FFFF            <1> 	mov cx, 0xFFFF
  8254 000061D8 6689D8              <1> 	mov ax, bx
  8255 000061DB C1EB10              <1> 	shr ebx, 16
  8256 000061DE 6601D8              <1> 	add ax, bx
  8257 000061E1 6629C1              <1> 	sub cx, ax
  8258 000061E4 C3                  <1> 	ret
  8259                              <1> 	
  8260                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
  8261 000061E5 31DB                <1> 	xor ebx, ebx
  8262 000061E7 31C9                <1> 	xor ecx, ecx
  8263 000061E9 31D2                <1> 	xor edx, edx
  8264                              <1> .mlp:
  8265 000061EB 89F7                <1> 	mov edi, esi
  8266 000061ED 4F                  <1> 	dec edi
  8267                              <1> .lp:
  8268 000061EE 47                  <1> 	inc edi
  8269 000061EF 8A07                <1> 	mov al, [edi]
  8270 000061F1 3C20                <1> 	cmp al, " "
  8271 000061F3 7408                <1> 	je .dnlp
  8272 000061F5 3C00                <1> 	cmp al, 0
  8273 000061F7 7404                <1> 	je .dnlp
  8274 000061F9 3C2E                <1> 	cmp al, "."
  8275 000061FB 75F1                <1> 	jne .lp
  8276                              <1> .dnlp:
  8277 000061FD 30C0                <1> 	xor al, al
  8278 000061FF 8807                <1> 	mov [edi], al
  8279 00006201 53                  <1> 	push ebx
  8280 00006202 56                  <1> 	push esi
  8281 00006203 57                  <1> 	push edi
  8282 00006204 31FF                <1> 	xor edi, edi
  8283 00006206 E831CFFFFF          <1> 	call cnvrttxt
  8284 0000620B 5E                  <1> 	pop esi
  8285 0000620C 5F                  <1> 	pop edi ;i intentionally switch them
  8286 0000620D 5B                  <1> 	pop ebx
  8287 0000620E 46                  <1> 	inc esi
  8288 0000620F BF[27620000]        <1> 	mov edi, ipstr
  8289 00006214 880C1F              <1> 	mov [edi + ebx], cl
  8290 00006217 43                  <1> 	inc ebx
  8291 00006218 81FB04000000        <1> 	cmp ebx, 4
  8292 0000621E 72CB                <1> 	jb .mlp
  8293 00006220 8B0D[27620000]      <1> 	mov ecx, [ipstr]
  8294 00006226 C3                  <1> 	ret
  8295 00006227 00000000            <1> ipstr dd 0
  8296                              <1> showip: 	;put the ip address in ecx
  8297 0000622B 89C8                <1> 	mov eax, ecx
  8298 0000622D 30DB                <1> 	xor bl, bl
  8299                              <1> .lp:
  8300 0000622F 3C00                <1> 	cmp al, 0
  8301 00006231 750D                <1> 	jne .nozeroprint
  8302 00006233 B030                <1> 	mov al, "0"
  8303 00006235 50                  <1> 	push eax
  8304 00006236 30E4                <1> 	xor ah, ah
  8305 00006238 E866C0FFFF          <1> 	call prcharq
  8306 0000623D 58                  <1> 	pop eax
  8307 0000623E 30C0                <1> 	xor al, al
  8308                              <1> .nozeroprint:
  8309 00006240 31C9                <1> 	xor ecx, ecx
  8310 00006242 88C1                <1> 	mov cl, al
  8311 00006244 E80ECEFFFF          <1> 	call showdec
  8312 00006249 C1E808              <1> 	shr eax, 8
  8313 0000624C FEC3                <1> 	inc bl
  8314 0000624E 80FB04              <1> 	cmp bl, 4
  8315 00006251 7315                <1> 	jae .done
  8316 00006253 50                  <1> 	push eax
  8317 00006254 6653                <1> 	push bx
  8318 00006256 BE[69620000]        <1> 	mov esi, .dot
  8319 0000625B E897B9FFFF          <1> 	call print
  8320 00006260 665B                <1> 	pop bx
  8321 00006262 58                  <1> 	pop eax
  8322 00006263 E9C7FFFFFF          <1> 	jmp .lp
  8323                              <1> .done:
  8324 00006268 C3                  <1> 	ret
  8325 00006269 082E00              <1> .dot db 8,".",0
  8326                              <1> showmac:	;mac begins in [ecx]
  8327 0000626C BE[BC620000]        <1> 	mov esi, macprint
  8328 00006271 89CF                <1> 	mov edi, ecx
  8329 00006273 81C106000000        <1> 	add ecx, 6
  8330                              <1> showmacloop:
  8331 00006279 8A07                <1> 	mov al, [edi]
  8332 0000627B 8A27                <1> 	mov ah, [edi]
  8333 0000627D C0E804              <1> 	shr al, 4
  8334 00006280 C0E404              <1> 	shl ah, 4
  8335 00006283 C0EC04              <1> 	shr ah, 4
  8336 00006286 0430                <1> 	add al, 48
  8337 00006288 3C39                <1> 	cmp al, "9"
  8338 0000628A 7606                <1> 	jbe .goodal
  8339 0000628C 2C30                <1> 	sub al, 48
  8340 0000628E 2C0A                <1> 	sub al, 0xA
  8341 00006290 0441                <1> 	add al, "A"
  8342                              <1> .goodal:
  8343 00006292 80C430              <1> 	add ah, 48
  8344 00006295 80FC39              <1> 	cmp ah, "9"
  8345 00006298 7609                <1> 	jbe .goodah
  8346 0000629A 80EC30              <1> 	sub ah, 48
  8347 0000629D 80EC0A              <1> 	sub ah, 0xA
  8348 000062A0 80C441              <1> 	add ah, "A"
  8349                              <1> .goodah:
  8350 000062A3 668906              <1> 	mov [esi], ax
  8351 000062A6 81C603000000        <1> 	add esi, 3
  8352 000062AC 47                  <1> 	inc edi
  8353 000062AD 39CF                <1> 	cmp edi, ecx
  8354 000062AF 72C8                <1> 	jb showmacloop
  8355 000062B1 BE[BC620000]        <1> 	mov esi, macprint
  8356 000062B6 E83CB9FFFF          <1> 	call print
  8357 000062BB C3                  <1> 	ret
  8358                              <1> 	
  8359 000062BC 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
  8360 000062C5 30303A30303A303020- <1>
  8361 000062CE 00                  <1>
  8362 000062CF 00000000            <1> ethernetend dw 0,0
  8363 000062D3 C0A80002            <1> sysip db 192,168,0,2
  8364 000062D7 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
  8365                                  %endif
  8366                                      %include "source/data.asm"
  8367 000062DD 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8368 000062E5 73687573683A2000    <1> 	notfound1 db "shush: ",0
  8369 000062ED 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
  8370 000062F6 6E640A00            <1>
  8371 000062FA 757365726E616D653A- <1> 	userask db "username:",0
  8372 00006303 00                  <1>
  8373 00006304 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8374 0000630D 00                  <1>
  8375 0000630E 40                  <1> 	computer db "@"
  8376                              <1> %ifdef io.serial
  8377                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  8378                              <1> %else
  8379 0000630F 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  8380 00006318 00                  <1>
  8381                              <1> %endif
  8382 00006319 5D242000            <1> 	endprompt db "]$ ",0
  8383 0000631D 0D                  <1> 	crlf 	db  13
  8384 0000631E 0A00                <1> 	line	db	10,0
  8385                              <1> 	userlst:
  8386 00006320 726F6F7400          <1> 			db "root",0
  8387 00006325 617765736F6D65706F- <1> 			db "awesomepower",0
  8388 0000632E 77657200            <1>
  8389 00006332 7573657200          <1> 			db "user",0
  8390 00006337 70617373776F726400  <1> 			db "password",0
  8391 00006340 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8392 00006342 00                  <1> 			db 0
  8393                              <1> 	userlstend:
  8394                              <1> 	
  8395 00006343 00                  <1> 	guion db 0
  8396 00006344 00                  <1> 	DriveNumber db 0
  8397 00006345 00000000            <1> 	lbaad dd 0
  8398 00006349 0000000000000000    <1> 	initialtsc dd 0,0
  8399 00006351 0000000000000000    <1> 	lasttsc dd 0,0
  8400 00006359 00<rept>            <1> 	memlistbuf times 576 db 0
  8401 00006599 00000000            <1> 	memlistend: dd 0
  8402                              <1> %ifdef io.serial
  8403                              <1> %else
  8404 0000659D <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
  8405                              <1> fontend:
  8406                              <1> %endif
  8407                              <1> osend:	;this is the end of the operating system's space on disk
  8408                                  %ifdef disk.none
  8409                                  	diskfileindex:
  8410                                  	enddiskfileindex:
  8411                                  	align 512, db 0
  8412                                      %include "source/bss.asm"
  8413                                  %else
  8414                                      %include "build/fileindex.asm"
  8415                              <1> diskfileindex:
  8416 0003659D 617267746573742E65- <1> db "argtest.elf",0
  8417 000365A6 6C6600              <1>
  8418 000365A9 B4010000            <1> dd (f0-$$)/512
  8419 000365AD 46000000            <1> dd (f1-f0)/512
  8420 000365B1 6261636B67726F756E- <1> db "background.bmp",0
  8421 000365BA 642E626D7000        <1>
  8422 000365C0 FA010000            <1> dd (f1-$$)/512
  8423 000365C4 01140000            <1> dd (f2-f1)/512
  8424 000365C8 626F6F742E736800    <1> db "boot.sh",0
  8425 000365D0 FB150000            <1> dd (f2-$$)/512
  8426 000365D4 01000000            <1> dd (f3-f2)/512
  8427 000365D8 63686172746573742E- <1> db "chartest.elf",0
  8428 000365E1 656C6600            <1>
  8429 000365E5 FC150000            <1> dd (f3-$$)/512
  8430 000365E9 4E000000            <1> dd (f4-f3)/512
  8431 000365ED 646F73746573742E63- <1> db "dostest.com",0
  8432 000365F6 6F6D00              <1>
  8433 000365F9 4A160000            <1> dd (f4-$$)/512
  8434 000365FD 01000000            <1> dd (f5-f4)/512
  8435 00036601 6578656300          <1> db "exec",0
  8436 00036606 4B160000            <1> dd (f5-$$)/512
  8437 0003660A 01000000            <1> dd (f6-f5)/512
  8438 0003660E 66696E616C636F756E- <1> db "finalcount.sn",0
  8439 00036617 742E736E00          <1>
  8440 0003661C 4C160000            <1> dd (f6-$$)/512
  8441 00036620 01000000            <1> dd (f7-f6)/512
  8442 00036624 666C6F7070792E7478- <1> db "floppy.txt",0
  8443 0003662D 7400                <1>
  8444 0003662F 4D160000            <1> dd (f7-$$)/512
  8445 00036633 0A000000            <1> dd (f8-f7)/512
  8446 00036637 666F726B00          <1> db "fork",0
  8447 0003663C 57160000            <1> dd (f8-$$)/512
  8448 00036640 01000000            <1> dd (f9-f8)/512
  8449 00036644 677261766974792E65- <1> db "gravity.elf",0
  8450 0003664D 6C6600              <1>
  8451 00036650 58160000            <1> dd (f9-$$)/512
  8452 00036654 4F000000            <1> dd (f10-f9)/512
  8453 00036658 6775697465737400    <1> db "guitest",0
  8454 00036660 A7160000            <1> dd (f10-$$)/512
  8455 00036664 03000000            <1> dd (f11-f10)/512
  8456 00036668 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8457 00036671 642E656C6600        <1>
  8458 00036677 AA160000            <1> dd (f11-$$)/512
  8459 0003667B 86000000            <1> dd (f12-f11)/512
  8460 0003667F 696E7400            <1> db "int",0
  8461 00036683 30170000            <1> dd (f12-$$)/512
  8462 00036687 01000000            <1> dd (f13-f12)/512
  8463 0003668B 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
  8464 00036694 2E736E00            <1>
  8465 00036698 31170000            <1> dd (f13-$$)/512
  8466 0003669C 01000000            <1> dd (f14-f13)/512
  8467 000366A0 6D6172696F2E736E00  <1> db "mario.sn",0
  8468 000366A9 32170000            <1> dd (f14-$$)/512
  8469 000366AD 01000000            <1> dd (f15-f14)/512
  8470 000366B1 6D6F6D656E742E7761- <1> db "moment.wav",0
  8471 000366BA 7600                <1>
  8472 000366BC 33170000            <1> dd (f15-$$)/512
  8473 000366C0 2C050000            <1> dd (f16-f15)/512
  8474 000366C4 70692E656C6600      <1> db "pi.elf",0
  8475 000366CB 5F1C0000            <1> dd (f16-$$)/512
  8476 000366CF 4E000000            <1> dd (f17-f16)/512
  8477 000366D3 72617974726163652E- <1> db "raytrace.elf",0
  8478 000366DC 656C6600            <1>
  8479 000366E0 AD1C0000            <1> dd (f17-$$)/512
  8480 000366E4 1E000000            <1> dd (f18-f17)/512
  8481 000366E8 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8482 000366F1 626D7000            <1>
  8483 000366F5 CB1C0000            <1> dd (f18-$$)/512
  8484 000366F9 B0020000            <1> dd (f19-f18)/512
  8485 000366FD 736F6C6C65726F732E- <1> db "solleros.txt",0
  8486 00036706 74787400            <1>
  8487 0003670A 7B1F0000            <1> dd (f19-$$)/512
  8488 0003670E 01000000            <1> dd (f20-f19)/512
  8489 00036712 736F6E676F74696D65- <1> db "songotime.sn",0
  8490 0003671B 2E736E00            <1>
  8491 0003671F 7C1F0000            <1> dd (f20-$$)/512
  8492 00036723 01000000            <1> dd (f21-f20)/512
  8493 00036727 73736500            <1> db "sse",0
  8494 0003672B 7D1F0000            <1> dd (f21-$$)/512
  8495 0003672F 02000000            <1> dd (f22-f21)/512
  8496 00036733 737464696F74657374- <1> db "stdiotest.elf",0
  8497 0003673C 2E656C6600          <1>
  8498 00036741 7F1F0000            <1> dd (f22-$$)/512
  8499 00036745 4E000000            <1> dd (f23-f22)/512
  8500 00036749 74656C7900          <1> db "tely",0
  8501 0003674E CD1F0000            <1> dd (f23-$$)/512
  8502 00036752 01000000            <1> dd (f24-f23)/512
  8503 00036756 74696D65746573742E- <1> db "timetest.elf",0
  8504 0003675F 656C6600            <1>
  8505 00036763 CE1F0000            <1> dd (f24-$$)/512
  8506 00036767 46000000            <1> dd (f25-f24)/512
  8507 0003676B 7475746F7269616C2E- <1> db "tutorial.sh",0
  8508 00036774 736800              <1>
  8509 00036777 14200000            <1> dd (f25-$$)/512
  8510 0003677B 03000000            <1> dd (f26-f25)/512
  8511 0003677F 756E667300          <1> db "unfs",0
  8512 00036784 17200000            <1> dd (f26-$$)/512
  8513 00036788 02000000            <1> dd (f27-f26)/512
  8514 0003678C 7574662D382E747874- <1> db "utf-8.txt",0
  8515 00036795 00                  <1>
  8516 00036796 19200000            <1> dd (f27-$$)/512
  8517 0003679A 02000000            <1> dd (f28-f27)/512
  8518 0003679E 766963746F72792E77- <1> db "victory.wav",0
  8519 000367A7 617600              <1>
  8520 000367AA 1B200000            <1> dd (f28-$$)/512
  8521 000367AE 16000000            <1> dd (f29-f28)/512
  8522 000367B2 5F696D672E62696E00  <1> db "_img.bin",0
  8523 000367BB 31200000            <1> dd (f29-$$)/512
  8524 000367BF D7020000            <1> dd (f30-f29)/512
  8525                              <1> enddiskfileindex:
  8526                              <1> 
  8527                                      %include "source/bss.asm"
  8528 000367C3 90                  <1> align 4, nop
  8529                              <1> bssstart: equ $
  8530                              <1> bsscopy equ $
  8531                              <1> initialstack equ bsscopy
  8532                              <1> stackend equ initialstack + 4000
  8533                              <1> sigtable equ stackend + 96
  8534                              <1> fileindex: equ sigtable + 4
  8535                              <1> fileindexend: equ fileindex + 1024
  8536                              <1> previousstack equ fileindexend
  8537                              <1> lastfolderloc equ previousstack + 4
  8538                              <1> currentfolderloc equ lastfolderloc + 4
  8539                              <1> currentfolder equ currentfolderloc + 4
  8540                              <1> currentfolderend equ currentfolder + 512
  8541                              <1> uid equ currentfolderend
  8542                              <1> ranboot equ uid + 4
  8543                              <1> IFON equ ranboot + 1
  8544                              <1> IFTRUE equ IFON + 1
  8545                              <1> BATCHPOS equ IFTRUE + 100
  8546                              <1> BATCHISON equ BATCHPOS + 4
  8547                              <1> LOOPON equ BATCHISON + 1
  8548                              <1> LOOPPOS	equ LOOPON + 1
  8549                              <1> variables: equ LOOPPOS + 4
  8550                              <1> varend: equ variables + 4096
  8551                              <1> buftxt2: equ varend
  8552                              <1> buftxt: equ buftxt2 + 1024
  8553                              <1> buftxtend: equ buftxt + 1024
  8554                              <1> buf2: equ buftxtend
  8555                              <1> numbuf: equ buf2 + 20
  8556                              <1> %ifdef io.serial
  8557                              <1> 	lastcommandpos equ numbuf + 1
  8558                              <1> %else
  8559                              <1> 	%ifdef gui.included
  8560                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8561                              <1> 		graphicstableend equ graphicstable + 200h
  8562                              <1> 		%ifdef gui.background
  8563                              <1> 			backgroundbuffer equ graphicstableend
  8564                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
  8565                              <1> 			mousecolorbuf equ backgroundbufferend
  8566                              <1> 		%else
  8567                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8568                              <1> 		%endif
  8569                              <1> 		mcolorend equ mousecolorbuf + 256
  8570                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  8571                              <1> 		videobufend	equ videobuf + 210*65*4;2
  8572                              <1> 		videobuf2 equ videobufend
  8573                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
  8574                              <1> 	%else
  8575                              <1> 		videobuf equ numbuf + 1
  8576                              <1> 		videobufend equ videobuf + 80*30*4
  8577                              <1> 		videobuf2 equ videobufend
  8578                              <1> 		videobuf2end equ videobuf2 + 80*30*4
  8579                              <1> 	%endif
  8580                              <1> 	lastcommandpos: equ videobuf2end
  8581                              <1> %endif
  8582                              <1> 	commandbufpos: equ lastcommandpos + 4
  8583                              <1> 	commandlistentries: equ commandbufpos + 4
  8584                              <1> 	commandsentered: equ commandlistentries + 4
  8585                              <1> 	commandbuf: equ commandsentered + 4
  8586                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8587                              <1> %ifdef network.included
  8588                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  8589                              <1> 	rbuffend equ rbuffstart + 8212
  8590                              <1> %else
  8591                              <1> 	rbuffstart equ commandbufend
  8592                              <1> 	rbuffend equ commandbufend
  8593                              <1> %endif
  8594                              <1> %ifdef threads.included
  8595                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  8596                              <1> 	threadlistend: equ threadlist + 1024*4
  8597                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  8598                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  8599                              <1> 	bssend equ stack1 + 1024*1024
  8600                              <1> %else
  8601                              <1> 	bssend equ rbuffend
  8602                              <1> %endif
  8603                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  8604                                      %include "build/files.asm"
  8605 000367C4 00<rept>            <1> align 512,db 0
  8606                              <1> f0:
  8607 00036800 <incbin>            <1> incbin "included/argtest.elf"
  8608 0003F320 00<rept>            <1> align 512,db 0
  8609                              <1> f1:
  8610 0003F400 <incbin>            <1> incbin "included/background.bmp"
  8611 002BF446 00<rept>            <1> align 512,db 0
  8612                              <1> f2:
  8613 002BF600 <incbin>            <1> incbin "included/boot.sh"
  8614 002BF704 00<rept>            <1> align 512,db 0
  8615                              <1> f3:
  8616 002BF800 <incbin>            <1> incbin "included/chartest.elf"
  8617 002C9320 00<rept>            <1> align 512,db 0
  8618                              <1> f4:
  8619 002C9400 <incbin>            <1> incbin "included/dostest.com"
  8620 002C9531 00<rept>            <1> align 512,db 0
  8621                              <1> f5:
  8622 002C9600 <incbin>            <1> incbin "included/exec"
  8623 002C96E9 00<rept>            <1> align 512,db 0
  8624                              <1> f6:
  8625 002C9800 <incbin>            <1> incbin "included/finalcount.sn"
  8626 002C9902 00<rept>            <1> align 512,db 0
  8627                              <1> f7:
  8628 002C9A00 <incbin>            <1> incbin "included/floppy.txt"
  8629 002CAC66 00<rept>            <1> align 512,db 0
  8630                              <1> f8:
  8631 002CAE00 <incbin>            <1> incbin "included/fork"
  8632 002CAF61 00<rept>            <1> align 512,db 0
  8633                              <1> f9:
  8634 002CB000 <incbin>            <1> incbin "included/gravity.elf"
  8635 002D4D90 00<rept>            <1> align 512,db 0
  8636                              <1> f10:
  8637 002D4E00 <incbin>            <1> incbin "included/guitest"
  8638 002D522E 00<rept>            <1> align 512,db 0
  8639                              <1> f11:
  8640 002D5400 <incbin>            <1> incbin "included/helloworld.elf"
  8641 002E5FA8 00<rept>            <1> align 512,db 0
  8642                              <1> f12:
  8643 002E6000 <incbin>            <1> incbin "included/int"
  8644 002E61B2 00<rept>            <1> align 512,db 0
  8645                              <1> f13:
  8646 002E6200 <incbin>            <1> incbin "included/lostwoods.sn"
  8647 002E6256 00<rept>            <1> align 512,db 0
  8648                              <1> f14:
  8649 002E6400 <incbin>            <1> incbin "included/mario.sn"
  8650 002E643A 00<rept>            <1> align 512,db 0
  8651                              <1> f15:
  8652 002E6600 <incbin>            <1> incbin "included/moment.wav"
  8653 0038BC2C 00<rept>            <1> align 512,db 0
  8654                              <1> f16:
  8655 0038BE00 <incbin>            <1> incbin "included/pi.elf"
  8656 00395938 00<rept>            <1> align 512,db 0
  8657                              <1> f17:
  8658 00395A00 <incbin>            <1> incbin "included/raytrace.elf"
  8659 00399520 00<rept>            <1> align 512,db 0
  8660                              <1> f18:
  8661 00399600 <incbin>            <1> incbin "included/solleros.bmp"
  8662 003EF5E6 00<rept>            <1> align 512,db 0
  8663                              <1> f19:
  8664 003EF600 <incbin>            <1> incbin "included/solleros.txt"
  8665 003EF774 00<rept>            <1> align 512,db 0
  8666                              <1> f20:
  8667 003EF800 <incbin>            <1> incbin "included/songotime.sn"
  8668 003EF84A 00<rept>            <1> align 512,db 0
  8669                              <1> f21:
  8670 003EFA00 <incbin>            <1> incbin "included/sse"
  8671 003EFCA8 00<rept>            <1> align 512,db 0
  8672                              <1> f22:
  8673 003EFE00 <incbin>            <1> incbin "included/stdiotest.elf"
  8674 003F9920 00<rept>            <1> align 512,db 0
  8675                              <1> f23:
  8676 003F9A00 <incbin>            <1> incbin "included/tely"
  8677 003F9BC6 00<rept>            <1> align 512,db 0
  8678                              <1> f24:
  8679 003F9C00 <incbin>            <1> incbin "included/timetest.elf"
  8680 00402720 00<rept>            <1> align 512,db 0
  8681                              <1> f25:
  8682 00402800 <incbin>            <1> incbin "included/tutorial.sh"
  8683 00402D52 00<rept>            <1> align 512,db 0
  8684                              <1> f26:
  8685 00402E00 <incbin>            <1> incbin "included/unfs"
  8686                              <1> align 512,db 0
  8687                              <1> f27:
  8688 00403200 <incbin>            <1> incbin "included/utf-8.txt"
  8689 004035C0 00<rept>            <1> align 512,db 0
  8690                              <1> f28:
  8691 00403600 <incbin>            <1> incbin "included/victory.wav"
  8692 00406148 00<rept>            <1> align 512,db 0
  8693                              <1> f29:
  8694 00406200 <incbin>            <1> incbin "included/_img.bin"
  8695                              <1> align 512,db 0
  8696                              <1> f30:
  8697                                  %endif
