     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define threads.included
     9                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    10                              <1> 
    11                              <1> %define exceptions.included
    12                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    13                              <1> 
    14                              <1> ;%define disk.protected
    15                              <1> ;Use protected mode instead of real mode for disk access
    16                              <1> 
    17                              <1> %define disk.real
    18                              <1> ;Use real mode for disk access
    19                              <1> 
    20                              <1> %define sound.included
    21                              <1> ;This includes the sound drivers
    22                              <1> 
    23                              <1> %define rtl8139.included
    24                              <1> ;This includes the RTL8139 drivers
    25                              <1> 
    26                              <1> ;%define sector.debug
    27                              <1> ;Dump the contents of the first sector of SollerOS
    28                                  [BITS 16]
    29                                      %include "source/boot.asm"
    30                              <1>     ; MENU.ASM
    31                              <1> %include 'source/signature.asm'
    32                              <2> signature:
    33 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    34 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    35 00000011 696C642000          <2>
    36 00000016 D5000000            <2> dd 213	;version number
    37                              <2> signatureend:
    38                              <1> menustart:	
    39 0000001A 8CC8                <1> 	mov ax, cs
    40 0000001C 8ED8                <1> 	mov ds, ax
    41 0000001E 8EC0                <1> 	mov es, ax
    42 00000020 8ED0                <1> 	mov ss, ax
    43 00000022 880E[D984]          <1> 	mov [DriveNumber], cl
    44 00000026 668916[DA84]        <1> 	mov [lbaad], edx
    45 0000002B E81200              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    46 0000002E 6631DB              <1> 	xor ebx, ebx
    47 00000031 6631C9              <1> 	xor ecx, ecx
    48 00000034 6631D2              <1> 	xor edx, edx
    49 00000037 6631F6              <1> 	xor esi, esi
    50 0000003A 6631FF              <1> 	xor edi, edi
    51 0000003D E94600              <1> 	jmp pmode
    52                              <1> 	
    53                              <1> vgaset:
    54 00000040 B81200              <1> 	mov ax, 12h
    55 00000043 31DB                <1> 	xor bx, bx
    56 00000045 CD10                <1> 	int 10h
    57 00000047 C606[D884]00        <1> 	mov byte [guion], 0
    58 0000004C E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
    59 0000004F C3                  <1> 	ret
    60                              <1> 
    61                              <1> getmemorysize:
    62 00000050 BF[DE84]            <1> 	mov di, memlistbuf
    63 00000053 6631DB              <1> 	xor ebx, ebx
    64                              <1> getmemsizeloop:
    65 00000056 66B820E80000        <1> 	mov eax, 0xE820
    66 0000005C 66BA50414D53        <1> 	mov edx, 0x0534D4150
    67 00000062 66B918000000        <1> 	mov ecx, 24
    68 00000068 CD15                <1> 	int 0x15
    69 0000006A 81C71800            <1> 	add di, 24
    70 0000006E 81FF[1E87]          <1> 	cmp di, memlistend
    71 00000072 7309                <1> 	jae nomoregetmemsize
    72 00000074 6681FB00000000      <1> 	cmp ebx, 0
    73 0000007B 75D9                <1> 	jne getmemsizeloop
    74                              <1> nomoregetmemsize:
    75 0000007D 81EF[DE84]          <1> 	sub di, memlistbuf
    76 00000081 893E[1E87]          <1> 	mov [memlistend], di
    77 00000085 C3                  <1> 	ret
    78                              <1> 	
    79                                      %include "source/pmode.asm"
    80                              <1> [BITS 16]
    81                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    82                              <1> ;	16-bit real mode
    83                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    84                              <1> 
    85                              <1> pmode:
    86 00000086 BA9200              <1> 	mov dx, 0x92
    87 00000089 EC                  <1> 	in al, dx	;;A20
    88 0000008A 0C02                <1> 	or al, 2
    89 0000008C EE                  <1> 	out dx, al
    90 0000008D 6631DB              <1> 	xor ebx, ebx
    91 00000090 8CCB                <1> 	mov bx,cs		; EBX=segment
    92 00000092 66C1E304            <1> 	shl ebx,4		;	<< 4
    93 00000096 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
    94 0000009A A3[6903]            <1> 	mov [gdt2 + 2],ax
    95 0000009D A3[7103]            <1> 	mov [gdt3 + 2],ax
    96 000000A0 66C1E810            <1> 	shr eax,16
    97 000000A4 A2[6B03]            <1> 	mov [gdt2 + 4],al
    98 000000A7 A2[7303]            <1> 	mov [gdt3 + 4],al
    99 000000AA 8826[6E03]          <1> 	mov [gdt2 + 7],ah
   100 000000AE 8826[7603]          <1> 	mov [gdt3 + 7],ah
   101                              <1> 
   102 000000B2 66B8[1E870000]      <1> 	mov eax, initialstack
   103 000000B8 660306[3502]        <1> 	add eax, [newcodecache]
   104 000000BD A3[6103]            <1> 	mov [gdts + 2],ax
   105 000000C0 66C1E810            <1> 	shr eax, 16
   106 000000C4 A2[6303]            <1> 	mov [gdts + 4],al
   107 000000C7 8826[6603]          <1> 	mov [gdts + 7], ah
   108                              <1> 	
   109 000000CB 66A1[3502]          <1> 	mov eax, [newcodecache]
   110 000000CF A3[7903]            <1> 	mov [gdt4 + 2],ax
   111 000000D2 A3[8103]            <1> 	mov [gdt5 + 2],ax
   112 000000D5 A3[8903]            <1> 	mov [gdtv8086 + 2], ax
   113 000000D8 A3[9103]            <1> 	mov [gdtv80862 + 2], ax
   114 000000DB 66C1E810            <1> 	shr eax,16
   115 000000DF A2[7B03]            <1> 	mov [gdt4 + 4],al
   116 000000E2 A2[8303]            <1> 	mov [gdt5 + 4],al
   117 000000E5 A2[8B03]            <1> 	mov [gdtv8086 + 4],al
   118 000000E8 A2[9303]            <1> 	mov [gdtv80862 + 4],al
   119 000000EB 8826[7E03]          <1> 	mov [gdt4 + 7],ah
   120 000000EF 8826[8603]          <1> 	mov [gdt5 + 7],ah
   121 000000F3 8826[8E03]          <1> 	mov [gdtv8086 + 7],ah
   122 000000F7 8826[9603]          <1> 	mov [gdtv80862 + 7],ah
   123                              <1> 	
   124 000000FB 66B800004000        <1> 	mov eax, dosprogloc
   125 00000101 660306[3502]        <1> 	add eax, [newcodecache]
   126 00000106 A3[9903]            <1> 	mov [gdtdos + 2],ax
   127 00000109 A3[A103]            <1> 	mov [gdtdos2 + 2],ax
   128 0000010C 66C1E810            <1> 	shr eax,16
   129 00000110 A2[9B03]            <1> 	mov [gdtdos + 4],al
   130 00000113 A2[A303]            <1> 	mov [gdtdos2 + 4],al
   131 00000116 8826[9E03]          <1> 	mov [gdtdos + 7],ah
   132 0000011A 8826[A603]          <1> 	mov [gdtdos2 + 7],ah
   133                              <1> 	
   134                              <1> ; fix up gdt and idt
   135 0000011E 67668D83[4F030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   136 00000126 66A3[4503]          <1> 	mov [gdtr + 2],eax
   137 0000012A 67668D83[A7030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   138 00000132 66A3[4B03]          <1> 	mov [idtr + 2],eax
   139 00000136 FA                  <1> 	cli
   140 00000137 0F0116[4303]        <1> 	lgdt [gdtr]
   141 0000013C 0F011E[4903]        <1> 	lidt [idtr]
   142 00000141 6631DB              <1> 	xor ebx, ebx
   143 00000144 8CDB                <1> 	mov bx, ds
   144 00000146 66891E[3102]        <1> 	mov [basecache], ebx
   145 0000014B 0F20C0              <1> 	mov eax,cr0
   146 0000014E 0C01                <1> 	or al,1
   147 00000150 0F22C0              <1> 	mov cr0,eax
   148 00000153 EA[5801]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   149                              <1> [BITS 32]
   150                              <1> do_pm:
   151 00000158 31C0                <1> 	xor eax, eax
   152 0000015A 66B82000            <1> 	mov ax, SYS_DATA_SEL
   153 0000015E 8ED8                <1> 	mov ds, ax
   154 00000160 8EC0                <1> 	mov es, ax
   155 00000162 8EE0                <1> 	mov fs, ax
   156 00000164 66B83000            <1> 	mov ax, NEW_DATA_SEL
   157 00000168 8EE8                <1> 	mov gs, ax
   158                              <1> 	
   159                              <1> copykernel:
   160 0000016A 648B06              <1> 	mov eax, [fs:esi]
   161 0000016D 658906              <1> 	mov [gs:esi], eax
   162 00000170 81C604000000        <1> 	add esi, 4
   163 00000176 81FE[1E870000]      <1> 	cmp esi, bsscopy
   164 0000017C 72EC                <1> 	jb copykernel
   165 0000017E EA[85010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   166                              <1> 	
   167                              <1> done_copy:
   168 00000185 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   169 00000189 8ED8                <1> 	mov ds, ax
   170 0000018B 8EC0                <1> 	mov es, ax
   171 0000018D 8EE0                <1> 	mov fs, ax
   172                              <1> 	;mov ax, STACK_SEL
   173 0000018F 8ED0                <1> 	mov ss, ax
   174 00000191 BC[BE960000]        <1> 	mov esp, stackend
   175 00000196 66B82000            <1> 	mov ax, SYS_DATA_SEL
   176 0000019A 8EE8                <1> 	mov gs, ax
   177                              <1> 	
   178 0000019C E886550000          <1> 	call initialize	;initialize drivers
   179                              <1> 	
   180 000001A1 A1[35020000]        <1> 	mov eax, [newcodecache]
   181 000001A6 C1E804              <1> 	shr eax, 4
   182 000001A9 A3[31020000]        <1> 	mov [basecache], eax
   183                              <1> 	
   184 000001AE BE[D09C1100]        <1> 	mov esi, bssend
   185 000001B3 31C0                <1> 	xor eax, eax
   186                              <1> clearkernelbuffers:
   187 000001B5 8906                <1> 	mov [esi], eax
   188 000001B7 81EE04000000        <1> 	sub esi, 4
   189 000001BD 81FE[1E870000]      <1> 	cmp esi, bsscopy
   190 000001C3 77F0                <1> 	ja clearkernelbuffers
   191 000001C5 FB                  <1> 	sti
   192                              <1> 
   193                              <1> getmemoryspace:
   194 000001C6 BE[DE840000]        <1> 	mov esi, memlistbuf
   195 000001CB 31FF                <1> 	xor edi, edi
   196 000001CD 668B3D[1E870000]    <1> 	mov di, [memlistend]
   197 000001D4 01F7                <1> 	add edi, esi
   198 000001D6 31C0                <1> 	xor eax, eax
   199                              <1> memoryspaceaddition:
   200 000001D8 39FE                <1> 	cmp esi, edi
   201 000001DA 7322                <1> 	jae finishedmemspacecalc
   202 000001DC 81C608000000        <1> 	add esi, 8
   203 000001E2 8B0E                <1> 	mov ecx, [esi]
   204 000001E4 81C608000000        <1> 	add esi, 8
   205 000001EA 8B1E                <1> 	mov ebx, [esi]
   206 000001EC 81C608000000        <1> 	add esi, 8
   207 000001F2 81FB01000000        <1> 	cmp ebx, 1
   208 000001F8 75DE                <1> 	jne memoryspaceaddition
   209 000001FA 01C8                <1> 	add eax, ecx
   210 000001FC EBDA                <1> 	jmp memoryspaceaddition
   211                              <1> finishedmemspacecalc:
   212 000001FE A3[3E020000]        <1> 	mov [memoryspace], eax
   213                              <1> %ifdef gui.included
   214 00000203 803D[D8840000]00    <1> 	cmp byte [guion], 0
   215 0000020A 0F841C000000        <1> 	je near normalstartup
   216 00000210 8B1D[31020000]      <1> 	mov ebx, [basecache]
   217 00000216 C1E304              <1> 	shl ebx, 4
   218 00000219 8B3D[EB4B0000]      <1> 	mov edi, [physbaseptr]
   219 0000021F 29DF                <1> 	sub edi, ebx
   220 00000221 893D[EB4B0000]      <1> 	mov [physbaseptr], edi
   221 00000227 E9DF590000          <1> 	jmp guiboot
   222                              <1> %endif
   223                              <1> normalstartup:
   224 0000022C E98B240000          <1> 	jmp os
   225                              <1> 	
   226 00000231 00000000            <1> basecache dd 0
   227 00000235 00001000            <1> newcodecache dd 0x100000
   228                              <1> 
   229 00000239 00                  <1> testingcpuspeed db 0
   230 0000023A 00000000            <1> cpuspeedperint dd 0
   231 0000023E 00000000            <1> memoryspace dd 0
   232 00000242 7D0A                <1> pitdiv dw 2685
   233 00000244 00000000            <1> timeseconds dd 0
   234 00000248 00000000            <1> timenanoseconds dd 0
   235 0000024C 2E562200            <1> timeinterval dd 2250286
   236 00000250 00                  <1> soundon db 0
   237 00000251 0000                <1> soundrepititions dw 0
   238 00000253 00000000            <1> soundpos dd 0
   239 00000257 00000000            <1> soundendpos dd 0
   240                              <1> 
   241                              <1> cpuspeedend:
   242 0000025B C605[39020000]00    <1> 	mov byte [testingcpuspeed], 0
   243 00000262 A3[3A020000]        <1> 	mov [cpuspeedperint], eax
   244 00000267 B8[0F430000]        <1> 	mov eax, cpuspeedloopend
   245 0000026C 890424              <1> 	mov [esp], eax
   246 0000026F E9C8000000          <1> 	jmp handled
   247                              <1> 
   248                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   249                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   250                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   251                              <1> 
   252                              <1> pitinterrupt: ;this controls threading
   253 00000274 FA                  <1> 	cli
   254 00000275 803D[39020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   255 0000027C 74DD                <1> 	je cpuspeedend
   256                              <1> 		
   257 0000027E E892000000          <1> 	call timekeeper ;this updates the internal time
   258                              <1> 	
   259 00000283 803D[50020000]01    <1> 	cmp byte [soundon], 1
   260 0000028A 0F842E4D0000        <1> 	je near PCSpeakerRAW
   261                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   262                              <1> %ifdef threads.included
   263 00000290 803D[C75B0000]01    <1> 	cmp byte [threadson], 1
   264 00000297 0F84CA580000        <1> 	je near threadswitch
   265                              <1> %endif
   266                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   267 0000029D 803D[C75B0000]00    <1> 	cmp byte [threadson], 0
   268 000002A4 0F8492000000        <1> 	je near handled
   269 000002AA FA                  <1> 	cli
   270 000002AB 60                  <1> 	pusha
   271 000002AC E460                <1> 	in al, 60h
   272 000002AE 3C01                <1> 	cmp al, 1		;escape
   273 000002B0 7405                <1> 	je userint
   274 000002B2 E983000000          <1> 	jmp handled2
   275                              <1> userint:
   276                              <1> 	;UNMASK ALL INTS
   277 000002B7 30C0                <1> 	xor al, al
   278 000002B9 E621                <1> 	out 0x21, al
   279 000002BB 30C0                <1> 	xor al, al
   280 000002BD E6A1                <1> 	out 0xA1, al
   281 000002BF B020                <1> 	mov al, 0x20
   282 000002C1 E6A0                <1> 	out 0xA0, al
   283 000002C3 E620                <1> 	out 0x20, al
   284                              <1> 	;RESET PIT DIVISOR
   285 000002C5 66A1[42020000]      <1> 	mov ax, [pitdiv]
   286 000002CB E640                <1> 	out 0x40, al
   287 000002CD 66C1C008            <1> 	rol ax, 8
   288 000002D1 E640                <1> 	out 0x40, al
   289                              <1> 	;RESET PIC
   290 000002D3 B020                <1> 	mov al, 0x20
   291 000002D5 E620                <1> 	out 0x20, al
   292 000002D7 61                  <1> 	popa
   293 000002D8 FB                  <1> 	sti
   294 000002D9 BC[BE960000]        <1> 	mov esp, stackend ;reset stack
   295 000002DE E98B250000          <1> 	jmp nwcmd
   296                              <1> %ifdef rtl8139.included
   297                              <1> rtl8139.irq:
   298 000002E3 FA                  <1> 	cli
   299 000002E4 60                  <1> 	pusha
   300 000002E5 8B15[DB530000]      <1> 	mov edx, [basenicaddr]
   301 000002EB 81C23E000000        <1> 	add edx, rtl8139.ISR
   302 000002F1 31C0                <1> 	xor eax, eax
   303 000002F3 66ED                <1> 	in ax, dx
   304 000002F5 89C1                <1> 	mov ecx, eax
   305 000002F7 E8442A0000          <1> 	call showhex
   306 000002FC E939000000          <1> 	jmp handled2
   307                              <1> %endif
   308                              <1> %ifdef sound.included
   309                              <1> sblaster.irq:
   310 00000301 FA                  <1> 	cli
   311 00000302 60                  <1> 	pusha
   312 00000303 803D[0A520000]01    <1> 	cmp byte [SoundBlaster], 1
   313 0000030A 0F847B4D0000        <1> 	je near sblastercont
   314 00000310 E925000000          <1> 	jmp handled2
   315                              <1> %endif
   316                              <1> 	
   317                              <1> timekeeper:
   318 00000315 50                  <1> 	push eax
   319 00000316 A1[48020000]        <1> 	mov eax, [timenanoseconds]
   320 0000031B 0305[4C020000]      <1> 	add eax, [timeinterval]
   321 00000321 3D00CA9A3B          <1> 	cmp eax, 1000000000
   322 00000326 720B                <1> 	jb nonanosecondrollover
   323 00000328 FF05[44020000]      <1> 	inc dword [timeseconds]
   324 0000032E 2D00CA9A3B          <1> 	sub eax, 1000000000
   325                              <1> nonanosecondrollover:
   326 00000333 A3[48020000]        <1> 	mov [timenanoseconds], eax
   327 00000338 58                  <1> 	pop eax
   328 00000339 C3                  <1> 	ret
   329                              <1> 	
   330                              <1> handled2:
   331 0000033A 61                  <1> 	popa
   332                              <1> handled3:
   333 0000033B FB                  <1> 	sti
   334                              <1> handled:
   335 0000033C 50                  <1> 	push eax
   336 0000033D B020                <1> 	mov al, 0x20
   337 0000033F E620                <1> 	out 0x20, al
   338 00000341 58                  <1> 	pop eax
   339 00000342 CF                  <1> 	iret
   340                              <1> [BITS 16]
   341                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   342                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   343                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   344 00000343 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   345 00000345 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   346                              <1> 
   347 00000349 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   348 0000034B 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   349                              <1> 
   350                              <1> 
   351 0000034F 0000                <1> gdt:	dw 0			; limit 15:0
   352 00000351 0000                <1> 	dw 0			; base 15:0
   353 00000353 00                  <1> 	db 0			; base 23:16
   354 00000354 00                  <1> 	db 0			; type
   355 00000355 00                  <1> 	db 0			; limit 19:16, flags
   356 00000356 00                  <1> 	db 0			; base 31:24
   357                              <1> ; linear data segment descriptor
   358                              <1> LINEAR_SEL	equ	$-gdt
   359 00000357 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   360 00000359 0000                <1> 	dw 0			; base for this one is always 0
   361 0000035B 00                  <1> 	db 0
   362 0000035C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   363 0000035D CF                  <1> 	db 0xCF			; page-granular, 32-bit
   364 0000035E 00                  <1> 	db 0
   365                              <1> STACK_SEL	equ $-gdt
   366 0000035F 0200                <1> gdts:	dw 2;(stackend)/4096
   367 00000361 0000                <1> 	dw 0
   368 00000363 00                  <1> 	db 0
   369 00000364 92                  <1> 	db 0x92
   370 00000365 CF                  <1> 	db 0xCF
   371 00000366 00                  <1> 	db 0
   372                              <1> ; code segment descriptor
   373                              <1> SYS_CODE_SEL	equ	$-gdt
   374 00000367 FFFF                <1> gdt2:	dw 0xFFFF
   375 00000369 0000                <1> 	dw 0			; (base gets set above)
   376 0000036B 00                  <1> 	db 0
   377 0000036C 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   378 0000036D CF                  <1> 	db 0xCF
   379 0000036E 00                  <1> 	db 0
   380                              <1> ; data segment descriptor
   381                              <1> SYS_DATA_SEL	equ	$-gdt
   382 0000036F FFFF                <1> gdt3:	dw 0xFFFF
   383 00000371 0000                <1> 	dw 0			; (base gets set above)
   384 00000373 00                  <1> 	db 0
   385 00000374 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   386 00000375 CF                  <1> 	db 0xCF
   387 00000376 00                  <1> 	db 0
   388                              <1> NEW_CODE_SEL	equ	$-gdt
   389 00000377 FFFF                <1> gdt4:	dw 0xFFFF
   390 00000379 0000                <1> 	dw 0			; (base gets set above)
   391 0000037B 00                  <1> 	db 0
   392 0000037C 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   393 0000037D CF                  <1> 	db 0xCF
   394 0000037E 00                  <1> 	db 0
   395                              <1> ; data segment descriptor
   396                              <1> NEW_DATA_SEL	equ	$-gdt
   397 0000037F FFFF                <1> gdt5:	dw 0xFFFF
   398 00000381 0000                <1> 	dw 0			; (base gets set above)
   399 00000383 00                  <1> 	db 0
   400 00000384 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   401 00000385 CF                  <1> 	db 0xCF
   402 00000386 00                  <1> 	db 0
   403                              <1> V8086_CODE_SEL	equ $-gdt
   404 00000387 FFFF                <1> gdtv8086: dw 0xFFFF
   405 00000389 0000                <1> 	dw 0
   406 0000038B 00                  <1> 	db 0
   407 0000038C 9A                  <1> 	db 0x9A
   408 0000038D 8F                  <1> 	db 0x8F
   409 0000038E 00                  <1> 	db 0
   410                              <1> V8086_DATA_SEL	equ $-gdt
   411 0000038F FFFF                <1> gdtv80862: dw 0xFFFF
   412 00000391 0000                <1> 	dw 0
   413 00000393 00                  <1> 	db 0
   414 00000394 92                  <1> 	db 0x92
   415 00000395 8F                  <1> 	db 0x8F
   416 00000396 00                  <1> 	db 0
   417                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   418 00000397 0001                <1> gdtdos:	dw 256	;give it 1 MB
   419 00000399 0000                <1> 	dw 0
   420 0000039B 00                  <1> 	db 0
   421 0000039C 9A                  <1> 	db 0x9A
   422 0000039D 8F                  <1> 	db 0x8F ;16 bit
   423 0000039E 00                  <1> 	db 0
   424                              <1> DOS_DATA_SEL 	equ $-gdt
   425 0000039F 0001                <1> gdtdos2:	dw 256
   426 000003A1 0000                <1> 	dw 0
   427 000003A3 00                  <1> 	db 0
   428 000003A4 92                  <1> 	db 0x92
   429 000003A5 8F                  <1> 	db 0x8F ;16 bit
   430 000003A6 00                  <1> 	db 0
   431                              <1> gdt_end:
   432                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   433                              <1> ;	interrupt descriptor table (IDT)
   434                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   435                              <1> ; 32 reserved interrupts:
   436                              <1> idt:	
   437                              <1> %assign i 0
   438                              <1> %rep    32
   439                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   440                              <1> %assign i i+1
   441                              <1> %endrep
   442 000003A7 [C80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   443                              <2> %assign i i+1
   444 000003AF [D40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   445                              <2> %assign i i+1
   446 000003B7 [E00C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   447                              <2> %assign i i+1
   448 000003BF [EC0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   449                              <2> %assign i i+1
   450 000003C7 [F80C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   451                              <2> %assign i i+1
   452 000003CF [040D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   453                              <2> %assign i i+1
   454 000003D7 [100D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   455                              <2> %assign i i+1
   456 000003DF [1C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   457                              <2> %assign i i+1
   458 000003E7 [280D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   459                              <2> %assign i i+1
   460 000003EF [340D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   461                              <2> %assign i i+1
   462 000003F7 [400D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   463                              <2> %assign i i+1
   464 000003FF [4C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   465                              <2> %assign i i+1
   466 00000407 [580D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   467                              <2> %assign i i+1
   468 0000040F [640D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   469                              <2> %assign i i+1
   470 00000417 [700D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   471                              <2> %assign i i+1
   472 0000041F [7C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   473                              <2> %assign i i+1
   474 00000427 [880D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   475                              <2> %assign i i+1
   476 0000042F [940D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   477                              <2> %assign i i+1
   478 00000437 [A00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   479                              <2> %assign i i+1
   480 0000043F [AC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   481                              <2> %assign i i+1
   482 00000447 [B80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   483                              <2> %assign i i+1
   484 0000044F [C40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   485                              <2> %assign i i+1
   486 00000457 [D00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   487                              <2> %assign i i+1
   488 0000045F [DC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   489                              <2> %assign i i+1
   490 00000467 [E80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   491                              <2> %assign i i+1
   492 0000046F [F40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   493                              <2> %assign i i+1
   494 00000477 [000E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   495                              <2> %assign i i+1
   496 0000047F [0C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   497                              <2> %assign i i+1
   498 00000487 [180E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   499                              <2> %assign i i+1
   500 0000048F [240E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   501                              <2> %assign i i+1
   502 00000497 [300E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   503                              <2> %assign i i+1
   504 0000049F [3C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   505                              <2> %assign i i+1
   506 000004A7 [8D25]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   507 000004AF [9125]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   508                              <1> %assign i 0x22
   509                              <1> %rep 14
   510                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   511                              <1> %assign i +1
   512                              <1> %endrep
   513 000004B7 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   514                              <2> %assign i +1
   515 000004BF [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   516                              <2> %assign i +1
   517 000004C7 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   518                              <2> %assign i +1
   519 000004CF [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   520                              <2> %assign i +1
   521 000004D7 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   522                              <2> %assign i +1
   523 000004DF [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   524                              <2> %assign i +1
   525 000004E7 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   526                              <2> %assign i +1
   527 000004EF [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   528                              <2> %assign i +1
   529 000004F7 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   530                              <2> %assign i +1
   531 000004FF [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   532                              <2> %assign i +1
   533 00000507 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   534                              <2> %assign i +1
   535 0000050F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   536                              <2> %assign i +1
   537 00000517 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   538                              <2> %assign i +1
   539 0000051F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   540                              <2> %assign i +1
   541                              <1> ;INT 30h for os use and 3rd party use:
   542 00000527 [401B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   543                              <1> %assign i 0x31
   544                              <1> %rep 15
   545                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   546                              <1> %assign i +1
   547                              <1> %endrep
   548 0000052F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   549                              <2> %assign i +1
   550 00000537 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   551                              <2> %assign i +1
   552 0000053F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   553                              <2> %assign i +1
   554 00000547 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   555                              <2> %assign i +1
   556 0000054F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   557                              <2> %assign i +1
   558 00000557 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i +1
   560 0000055F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i +1
   562 00000567 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i +1
   564 0000056F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i +1
   566 00000577 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i +1
   568 0000057F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i +1
   570 00000587 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i +1
   572 0000058F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i +1
   574 00000597 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   575                              <2> %assign i +1
   576 0000059F [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   577                              <2> %assign i +1
   578                              <1> ;and here we are at 0x40
   579                              <1> ;here are all the irq's
   580 000005A7 [7402]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   581 000005AF [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   582 000005B7 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   583 000005BF [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   584 000005C7 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   585                              <1> 	%ifdef sound.included
   586 000005CF [0103]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   587                              <1> 	%else
   588                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   589                              <1> 	%endif
   590 000005D7 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   591 000005DF [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   592 000005E7 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   593 000005EF [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   594 000005F7 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   595                              <1> 	%ifdef rtl8139.included
   596 000005FF [E302]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   597                              <1> 	%else
   598                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   599                              <1> 	%endif
   600 00000607 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   601 0000060F [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   602 00000617 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   603 0000061F [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   604                              <1> ;This brings me up to 0x50
   605                              <1> %assign i 0x50
   606                              <1> %rep 176
   607                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   608                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   609                              <1> %assign i +1
   610                              <1> %endrep
   611 00000627 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   612                              <2> 
   613                              <2> %assign i +1
   614 0000062F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   615                              <2> 
   616                              <2> %assign i +1
   617 00000637 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   618                              <2> 
   619                              <2> %assign i +1
   620 0000063F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   621                              <2> 
   622                              <2> %assign i +1
   623 00000647 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   624                              <2> 
   625                              <2> %assign i +1
   626 0000064F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   627                              <2> 
   628                              <2> %assign i +1
   629 00000657 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   630                              <2> 
   631                              <2> %assign i +1
   632 0000065F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   633                              <2> 
   634                              <2> %assign i +1
   635 00000667 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   636                              <2> 
   637                              <2> %assign i +1
   638 0000066F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   639                              <2> 
   640                              <2> %assign i +1
   641 00000677 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   642                              <2> 
   643                              <2> %assign i +1
   644 0000067F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   645                              <2> 
   646                              <2> %assign i +1
   647 00000687 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   648                              <2> 
   649                              <2> %assign i +1
   650 0000068F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   651                              <2> 
   652                              <2> %assign i +1
   653 00000697 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   654                              <2> 
   655                              <2> %assign i +1
   656 0000069F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   657                              <2> 
   658                              <2> %assign i +1
   659 000006A7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   660                              <2> 
   661                              <2> %assign i +1
   662 000006AF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   663                              <2> 
   664                              <2> %assign i +1
   665 000006B7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   666                              <2> 
   667                              <2> %assign i +1
   668 000006BF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   669                              <2> 
   670                              <2> %assign i +1
   671 000006C7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   672                              <2> 
   673                              <2> %assign i +1
   674 000006CF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   675                              <2> 
   676                              <2> %assign i +1
   677 000006D7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   678                              <2> 
   679                              <2> %assign i +1
   680 000006DF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   681                              <2> 
   682                              <2> %assign i +1
   683 000006E7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   684                              <2> 
   685                              <2> %assign i +1
   686 000006EF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   687                              <2> 
   688                              <2> %assign i +1
   689 000006F7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   690                              <2> 
   691                              <2> %assign i +1
   692 000006FF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   693                              <2> 
   694                              <2> %assign i +1
   695 00000707 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   696                              <2> 
   697                              <2> %assign i +1
   698 0000070F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   699                              <2> 
   700                              <2> %assign i +1
   701 00000717 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   702                              <2> 
   703                              <2> %assign i +1
   704 0000071F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   705                              <2> 
   706                              <2> %assign i +1
   707 00000727 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   708                              <2> 
   709                              <2> %assign i +1
   710 0000072F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   711                              <2> 
   712                              <2> %assign i +1
   713 00000737 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   714                              <2> 
   715                              <2> %assign i +1
   716 0000073F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   717                              <2> 
   718                              <2> %assign i +1
   719 00000747 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   720                              <2> 
   721                              <2> %assign i +1
   722 0000074F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   723                              <2> 
   724                              <2> %assign i +1
   725 00000757 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   726                              <2> 
   727                              <2> %assign i +1
   728 0000075F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   729                              <2> 
   730                              <2> %assign i +1
   731 00000767 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   732                              <2> 
   733                              <2> %assign i +1
   734 0000076F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   735                              <2> 
   736                              <2> %assign i +1
   737 00000777 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   738                              <2> 
   739                              <2> %assign i +1
   740 0000077F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   741                              <2> 
   742                              <2> %assign i +1
   743 00000787 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   744                              <2> 
   745                              <2> %assign i +1
   746 0000078F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   747                              <2> 
   748                              <2> %assign i +1
   749 00000797 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   750                              <2> 
   751                              <2> %assign i +1
   752 0000079F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   753                              <2> 
   754                              <2> %assign i +1
   755 000007A7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   756                              <2> 
   757                              <2> %assign i +1
   758 000007AF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   759                              <2> 
   760                              <2> %assign i +1
   761 000007B7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   762                              <2> 
   763                              <2> %assign i +1
   764 000007BF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   765                              <2> 
   766                              <2> %assign i +1
   767 000007C7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   768                              <2> 
   769                              <2> %assign i +1
   770 000007CF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   771                              <2> 
   772                              <2> %assign i +1
   773 000007D7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   774                              <2> 
   775                              <2> %assign i +1
   776 000007DF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   777                              <2> 
   778                              <2> %assign i +1
   779 000007E7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   780                              <2> 
   781                              <2> %assign i +1
   782 000007EF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   783                              <2> 
   784                              <2> %assign i +1
   785 000007F7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   786                              <2> 
   787                              <2> %assign i +1
   788 000007FF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   789                              <2> 
   790                              <2> %assign i +1
   791 00000807 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   792                              <2> 
   793                              <2> %assign i +1
   794 0000080F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   795                              <2> 
   796                              <2> %assign i +1
   797 00000817 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   798                              <2> 
   799                              <2> %assign i +1
   800 0000081F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   801                              <2> 
   802                              <2> %assign i +1
   803 00000827 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   804                              <2> 
   805                              <2> %assign i +1
   806 0000082F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   807                              <2> 
   808                              <2> %assign i +1
   809 00000837 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 0000083F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 00000847 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 0000084F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 00000857 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 0000085F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 00000867 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 0000086F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 00000877 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 0000087F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 00000887 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 0000088F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 00000897 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 0000089F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000008A7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000008AF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000008B7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000008BF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000008C7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000008CF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000008D7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000008DF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000008E7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000008EF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000008F7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000008FF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 00000907 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 0000090F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 00000917 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 0000091F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 00000927 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 0000092F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 00000937 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 0000093F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 00000947 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 0000094F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 00000957 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 0000095F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000967 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 0000096F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 00000977 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 0000097F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 00000987 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 0000098F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 00000997 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 0000099F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000009A7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000009AF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000009B7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000009BF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000009C7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000009CF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000009D7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000009DF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000009E7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000009EF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000009F7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000009FF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 00000A07 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000A0F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 00000A17 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000A1F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 00000A27 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000A2F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 00000A37 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000A3F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 00000A47 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000A4F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 00000A57 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000A5F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000A67 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000A6F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 00000A77 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000A7F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 00000A87 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000A8F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 00000A97 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000A9F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 00000AA7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000AAF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 00000AB7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000ABF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 00000AC7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000ACF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000AD7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000ADF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000AE7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000AEF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000AF7 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000AFF [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000B07 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000B0F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000B17 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000B1F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000B27 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000B2F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000B37 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000B3F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000B47 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000B4F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000B57 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000B5F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000B67 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000B6F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000B77 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000B7F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000B87 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000B8F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000B97 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000B9F [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139                              <1> idt_end:
  1140                              <1> [BITS 32]
  1141                                  	%include "source/realmode.asm"
  1142                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1143                              <1> 			;and the return address is in realmodereturn
  1144 00000BA7 FA                  <1> 	cli
  1145 00000BA8 A3[BA0C0000]        <1> 	mov [realmodeeax], eax
  1146 00000BAD 891D[B60C0000]      <1> 	mov [realmodeebx], ebx
  1147 00000BB3 8925[A80C0000]      <1> 	mov [pmodeesp], esp
  1148                              <1> 
  1149 00000BB9 BB[B20C0000]        <1> 	mov ebx, cr0old
  1150                              <1> rmcopytofirstmbyte:
  1151 00000BBE 8B03                <1> 	mov eax, [ebx]
  1152 00000BC0 658903              <1> 	mov [gs:ebx], eax
  1153 00000BC3 81C304000000        <1> 	add ebx, 4
  1154 00000BC9 81FB[C20C0000]      <1> 	cmp ebx, realmodeptr
  1155 00000BCF 76ED                <1> 	jbe rmcopytofirstmbyte
  1156                              <1> 
  1157 00000BD1 EA[D80B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1158                              <1> 
  1159                              <1> [BITS 16]
  1160                              <1> protected16bit:
  1161 00000BD8 B84000              <1> 	mov ax, V8086_DATA_SEL
  1162 00000BDB 8ED8                <1> 	mov ds, ax
  1163 00000BDD 8EC0                <1> 	mov es, ax
  1164 00000BDF 8EE0                <1> 	mov fs, ax
  1165 00000BE1 8EE8                <1> 	mov gs, ax
  1166 00000BE3 8ED0                <1> 	mov ss, ax
  1167 00000BE5 66BC[BE960000]      <1> 	mov esp, stackend
  1168 00000BEB 0F20C0              <1> 	mov eax, cr0
  1169 00000BEE 66A3[B20C]          <1> 	mov [cr0old], eax
  1170 00000BF2 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1171 00000BF8 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1172 00000BFB EA[000C]0010        <1> 	jmp 0x1000:inrealmode
  1173                              <1> 
  1174                              <1> inrealmode:
  1175 00000C00 8CC8                <1> 	mov ax, cs
  1176 00000C02 8ED8                <1> 	mov ds, ax
  1177 00000C04 8EC0                <1> 	mov es, ax
  1178 00000C06 8EE0                <1> 	mov fs, ax
  1179 00000C08 8EE8                <1> 	mov gs, ax
  1180 00000C0A 8ED0                <1> 	mov ss, ax
  1181 00000C0C BC[BE96]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1182                              <1> 	
  1183 00000C0F B011                <1> 	mov al, 0x11
  1184 00000C11 E620                <1> 	out 0x20, al
  1185 00000C13 E6A0                <1> 	out 0xA0, al
  1186 00000C15 B008                <1> 	mov al, 0x8		;interrupt for master
  1187 00000C17 E621                <1> 	out 0x21, al
  1188 00000C19 B070                <1> 	mov al, 0x70	;interrupt for slave
  1189 00000C1B E6A1                <1> 	out 0xA1, al
  1190 00000C1D B004                <1> 	mov al, 4
  1191 00000C1F E621                <1> 	out 0x21, al
  1192 00000C21 B002                <1> 	mov al, 2
  1193 00000C23 E6A1                <1> 	out 0xA1, al
  1194 00000C25 B001                <1> 	mov al, 0x1
  1195 00000C27 E621                <1> 	out 0x21, al
  1196 00000C29 B001                <1> 	mov al, 0x1
  1197 00000C2B E6A1                <1> 	out 0xA1, al
  1198                              <1> 	
  1199 00000C2D 0F011E[AC0C]        <1> 	lidt [idt_real]
  1200 00000C32 FB                  <1> 	sti
  1201                              <1> 
  1202 00000C33 66A1[BA0C]          <1> 	mov eax, [realmodeeax]
  1203 00000C37 668B1E[B60C]        <1> 	mov ebx, [realmodeebx]
  1204                              <1> 
  1205 00000C3C FF16[C20C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1206                              <1> 
  1207 00000C40 66A3[BA0C]          <1> 	mov [realmodeeax], eax
  1208 00000C44 66891E[B60C]        <1> 	mov [realmodeebx], ebx
  1209                              <1> 
  1210 00000C49 FA                  <1> 	cli
  1211 00000C4A 0F0116[4303]        <1> 	lgdt [gdtr]
  1212 00000C4F 0F011E[4903]        <1> 	lidt [idtr]
  1213 00000C54 0F20C0              <1> 	mov eax, cr0
  1214 00000C57 0C01                <1> 	or al, 1
  1215 00000C59 0F22C0              <1> 	mov cr0,eax
  1216 00000C5C EA[610C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1217                              <1> 
  1218                              <1> [BITS 32]
  1219                              <1> returntopmode:
  1220 00000C61 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1221 00000C65 8ED8                <1> 	mov ds, ax
  1222 00000C67 8EC0                <1> 	mov es, ax
  1223 00000C69 8EE0                <1> 	mov fs, ax
  1224 00000C6B 8ED0                <1> 	mov ss, ax
  1225 00000C6D 8B25[A80C0000]      <1> 	mov esp, [pmodeesp]
  1226 00000C73 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1227 00000C77 8EE8                <1> 	mov gs, ax
  1228                              <1> 
  1229 00000C79 BB[B20C0000]        <1> 	mov ebx, cr0old
  1230                              <1> rmcopyfromfirstmbyte:
  1231 00000C7E 658B03              <1> 	mov eax, [gs:ebx]
  1232 00000C81 8903                <1> 	mov [ebx], eax
  1233 00000C83 81C304000000        <1> 	add ebx, 4
  1234 00000C89 81FB[C20C0000]      <1> 	cmp ebx, realmodeptr
  1235 00000C8F 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1236                              <1> 
  1237 00000C91 E8AA4A0000          <1> 	call initialize.pic ;reset irq's and masks
  1238 00000C96 FB                  <1> 	sti
  1239 00000C97 A1[BA0C0000]        <1> 	mov eax, [realmodeeax]
  1240 00000C9C 8B1D[B60C0000]      <1> 	mov ebx, [realmodeebx]
  1241 00000CA2 FF25[BE0C0000]      <1> 	jmp dword [realmodereturn]
  1242                              <1> 	
  1243 00000CA8 00000000            <1> pmodeesp dd 0
  1244                              <1> idt_real:
  1245 00000CAC FF03                <1> 	dw 0x3FF
  1246 00000CAE 00000000            <1> 	dd 0
  1247 00000CB2 00000000            <1> cr0old dd 0
  1248 00000CB6 00000000            <1> realmodeebx dd 0
  1249 00000CBA 00000000            <1> realmodeeax dd 0
  1250 00000CBE 00000000            <1> realmodereturn dd 0
  1251 00000CC2 0000                <1> realmodeptr dw 0
  1252 00000CC4 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1253                                  [BITS 32]
  1254                                      %include "source/exception.asm"
  1255                              <1> %ifdef exceptions.included
  1256                              <1> unhand:	
  1257                              <1> 	%assign i 0
  1258                              <1> 	%rep 32
  1259                              <1> 	mov byte [intprob], i
  1260                              <1> 	jmp unhand2
  1261                              <1> 	%assign i i+1
  1262                              <1> 	%endrep
  1263 00000CC8 C605[41110000]00    <2>  mov byte [intprob], i
  1264 00000CCF E974010000          <2>  jmp unhand2
  1265                              <2>  %assign i i+1
  1266 00000CD4 C605[41110000]01    <2>  mov byte [intprob], i
  1267 00000CDB E968010000          <2>  jmp unhand2
  1268                              <2>  %assign i i+1
  1269 00000CE0 C605[41110000]02    <2>  mov byte [intprob], i
  1270 00000CE7 E95C010000          <2>  jmp unhand2
  1271                              <2>  %assign i i+1
  1272 00000CEC C605[41110000]03    <2>  mov byte [intprob], i
  1273 00000CF3 E950010000          <2>  jmp unhand2
  1274                              <2>  %assign i i+1
  1275 00000CF8 C605[41110000]04    <2>  mov byte [intprob], i
  1276 00000CFF E944010000          <2>  jmp unhand2
  1277                              <2>  %assign i i+1
  1278 00000D04 C605[41110000]05    <2>  mov byte [intprob], i
  1279 00000D0B E938010000          <2>  jmp unhand2
  1280                              <2>  %assign i i+1
  1281 00000D10 C605[41110000]06    <2>  mov byte [intprob], i
  1282 00000D17 E92C010000          <2>  jmp unhand2
  1283                              <2>  %assign i i+1
  1284 00000D1C C605[41110000]07    <2>  mov byte [intprob], i
  1285 00000D23 E920010000          <2>  jmp unhand2
  1286                              <2>  %assign i i+1
  1287 00000D28 C605[41110000]08    <2>  mov byte [intprob], i
  1288 00000D2F E914010000          <2>  jmp unhand2
  1289                              <2>  %assign i i+1
  1290 00000D34 C605[41110000]09    <2>  mov byte [intprob], i
  1291 00000D3B E908010000          <2>  jmp unhand2
  1292                              <2>  %assign i i+1
  1293 00000D40 C605[41110000]0A    <2>  mov byte [intprob], i
  1294 00000D47 E9FC000000          <2>  jmp unhand2
  1295                              <2>  %assign i i+1
  1296 00000D4C C605[41110000]0B    <2>  mov byte [intprob], i
  1297 00000D53 E9F0000000          <2>  jmp unhand2
  1298                              <2>  %assign i i+1
  1299 00000D58 C605[41110000]0C    <2>  mov byte [intprob], i
  1300 00000D5F E9E4000000          <2>  jmp unhand2
  1301                              <2>  %assign i i+1
  1302 00000D64 C605[41110000]0D    <2>  mov byte [intprob], i
  1303 00000D6B E9D8000000          <2>  jmp unhand2
  1304                              <2>  %assign i i+1
  1305 00000D70 C605[41110000]0E    <2>  mov byte [intprob], i
  1306 00000D77 E9CC000000          <2>  jmp unhand2
  1307                              <2>  %assign i i+1
  1308 00000D7C C605[41110000]0F    <2>  mov byte [intprob], i
  1309 00000D83 E9C0000000          <2>  jmp unhand2
  1310                              <2>  %assign i i+1
  1311 00000D88 C605[41110000]10    <2>  mov byte [intprob], i
  1312 00000D8F E9B4000000          <2>  jmp unhand2
  1313                              <2>  %assign i i+1
  1314 00000D94 C605[41110000]11    <2>  mov byte [intprob], i
  1315 00000D9B E9A8000000          <2>  jmp unhand2
  1316                              <2>  %assign i i+1
  1317 00000DA0 C605[41110000]12    <2>  mov byte [intprob], i
  1318 00000DA7 E99C000000          <2>  jmp unhand2
  1319                              <2>  %assign i i+1
  1320 00000DAC C605[41110000]13    <2>  mov byte [intprob], i
  1321 00000DB3 E990000000          <2>  jmp unhand2
  1322                              <2>  %assign i i+1
  1323 00000DB8 C605[41110000]14    <2>  mov byte [intprob], i
  1324 00000DBF E984000000          <2>  jmp unhand2
  1325                              <2>  %assign i i+1
  1326 00000DC4 C605[41110000]15    <2>  mov byte [intprob], i
  1327 00000DCB E978000000          <2>  jmp unhand2
  1328                              <2>  %assign i i+1
  1329 00000DD0 C605[41110000]16    <2>  mov byte [intprob], i
  1330 00000DD7 E96C000000          <2>  jmp unhand2
  1331                              <2>  %assign i i+1
  1332 00000DDC C605[41110000]17    <2>  mov byte [intprob], i
  1333 00000DE3 E960000000          <2>  jmp unhand2
  1334                              <2>  %assign i i+1
  1335 00000DE8 C605[41110000]18    <2>  mov byte [intprob], i
  1336 00000DEF E954000000          <2>  jmp unhand2
  1337                              <2>  %assign i i+1
  1338 00000DF4 C605[41110000]19    <2>  mov byte [intprob], i
  1339 00000DFB E948000000          <2>  jmp unhand2
  1340                              <2>  %assign i i+1
  1341 00000E00 C605[41110000]1A    <2>  mov byte [intprob], i
  1342 00000E07 E93C000000          <2>  jmp unhand2
  1343                              <2>  %assign i i+1
  1344 00000E0C C605[41110000]1B    <2>  mov byte [intprob], i
  1345 00000E13 E930000000          <2>  jmp unhand2
  1346                              <2>  %assign i i+1
  1347 00000E18 C605[41110000]1C    <2>  mov byte [intprob], i
  1348 00000E1F E924000000          <2>  jmp unhand2
  1349                              <2>  %assign i i+1
  1350 00000E24 C605[41110000]1D    <2>  mov byte [intprob], i
  1351 00000E2B E918000000          <2>  jmp unhand2
  1352                              <2>  %assign i i+1
  1353 00000E30 C605[41110000]1E    <2>  mov byte [intprob], i
  1354 00000E37 E90C000000          <2>  jmp unhand2
  1355                              <2>  %assign i i+1
  1356 00000E3C C605[41110000]1F    <2>  mov byte [intprob], i
  1357 00000E43 E900000000          <2>  jmp unhand2
  1358                              <2>  %assign i i+1
  1359                              <1> unhand2:
  1360 00000E48 FA                  <1> 	cli
  1361 00000E49 1E                  <1> 	push ds
  1362 00000E4A 06                  <1> 	push es
  1363 00000E4B 0FA0                <1> 	push fs
  1364 00000E4D 0FA8                <1> 	push gs
  1365 00000E4F 16                  <1> 	push ss
  1366 00000E50 60                  <1> 	pushad
  1367                              <1> %ifdef gui.included
  1368 00000E51 803D[D8840000]00    <1> 	cmp byte [guion], 0
  1369 00000E58 0F8432000000        <1> 	je near noguiunhandstuff
  1370 00000E5E 66C705[3B110000]08- <1> 	mov word [locunhandy], 8
  1371 00000E66 00                  <1>
  1372 00000E67 66C705[3D110000]08- <1> 	mov word [locunhandx], 8
  1373 00000E6F 00                  <1>
  1374 00000E70 668B1D[095C0000]    <1> 	mov bx, [background]
  1375 00000E77 66891D[3F110000]    <1> 	mov [backgroundcache], bx
  1376 00000E7E C605[C54C0000]01    <1> 	mov byte [mousedisabled],1
  1377 00000E85 66BB00F8            <1> 	mov bx, 1111100000000000b
  1378 00000E89 66891D[095C0000]    <1> 	mov [background], bx
  1379                              <1> noguiunhandstuff:
  1380                              <1> %endif
  1381 00000E90 89E6                <1> 	mov esi, esp
  1382 00000E92 8935[2F110000]      <1> 	mov [espfirst], esi
  1383 00000E98 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1384 00000E9E 8935[2B110000]      <1> 	mov [esploc], esi
  1385 00000EA4 BE[4A110000]        <1> 	mov esi, unhandmsg
  1386 00000EA9 8935[33110000]      <1> 	mov [esiloc], esi
  1387 00000EAF 31C9                <1> 	xor ecx, ecx
  1388 00000EB1 8A0D[41110000]      <1> 	mov cl, [intprob]
  1389 00000EB7 BB[DD140000]        <1> 	mov ebx, errortypes
  1390 00000EBC C1E102              <1> 	shl ecx, 2
  1391 00000EBF 01CB                <1> 	add ebx, ecx
  1392 00000EC1 81FB[1D150000]      <1> 	cmp ebx, errortypesend
  1393 00000EC7 7205                <1> 	jb gooderrortype
  1394 00000EC9 BB[1D150000]        <1> 	mov ebx, errortypesend
  1395                              <1> gooderrortype:
  1396 00000ECE 8B33                <1> 	mov esi, [ebx]
  1397                              <1> %ifdef gui.included
  1398 00000ED0 803D[D8840000]00    <1> 	cmp byte [guion], 0
  1399 00000ED7 0F842D000000        <1> 	je near errortext
  1400 00000EDD 668B0D[3B110000]    <1> 	mov cx, [locunhandy]
  1401 00000EE4 668B15[3D110000]    <1> 	mov dx, [locunhandx]
  1402 00000EEB 66B80100            <1> 	mov ax, 1
  1403 00000EEF 6631DB              <1> 	xor bx, bx
  1404 00000EF2 E80D580000          <1> 	call showstring2
  1405 00000EF7 66890D[3B110000]    <1> 	mov [locunhandy], cx
  1406 00000EFE 668915[3D110000]    <1> 	mov [locunhandx], dx
  1407 00000F05 E905000000          <1> 	jmp errortextdone
  1408                              <1> %endif
  1409                              <1> errortext:
  1410 00000F0A E8690D0000          <1> 	call print		;;get the error message and print it
  1411                              <1> errortextdone:
  1412 00000F0F 31C9                <1> 	xor ecx, ecx
  1413 00000F11 8A0D[41110000]      <1> 	mov cl, [intprob]
  1414 00000F17 E8A8010000          <1> 	call expdump
  1415                              <1> dumpstack:
  1416 00000F1C 8B35[2B110000]      <1> 	mov esi, [esploc]
  1417 00000F22 39E6                <1> 	cmp esi, esp
  1418 00000F24 7216                <1> 	jb donedump
  1419 00000F26 368B0E              <1> 	mov ecx, [ss:esi]
  1420 00000F29 81EE04000000        <1> 	sub esi, 4
  1421 00000F2F 8935[2B110000]      <1> 	mov [esploc], esi
  1422 00000F35 E88A010000          <1> 	call expdump
  1423 00000F3A EBE0                <1> 	jmp dumpstack
  1424                              <1> donedump:
  1425 00000F3C 0F20C1              <1> 	mov ecx, cr0
  1426 00000F3F E880010000          <1> 	call expdump
  1427 00000F44 0F20D1              <1> 	mov ecx, cr2
  1428 00000F47 E878010000          <1> 	call expdump
  1429 00000F4C 0F20D9              <1> 	mov ecx, cr3
  1430 00000F4F E870010000          <1> 	call expdump
  1431 00000F54 0F20E1              <1> 	mov ecx, cr4
  1432 00000F57 E868010000          <1> 	call expdump
  1433 00000F5C 8B35[2B110000]      <1> 	mov esi, [esploc]
  1434 00000F62 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1435 00000F67 81C710000000        <1> 	add edi, 16
  1436 00000F6D 893D[46110000]      <1> 	mov [codelocend], edi
  1437 00000F73 81EF20000000        <1> 	sub edi, 32
  1438                              <1> dumpcodeloop:
  1439 00000F79 893D[42110000]      <1> 	mov [codeloc], edi
  1440 00000F7F 8B0F                <1> 	mov ecx, [edi]
  1441 00000F81 E83E010000          <1> 	call expdump
  1442 00000F86 8B3D[42110000]      <1> 	mov edi, [codeloc]
  1443 00000F8C 81C704000000        <1> 	add edi, 4
  1444 00000F92 3B3D[46110000]      <1> 	cmp edi, [codelocend]
  1445 00000F98 72DF                <1> 	jb dumpcodeloop
  1446 00000F9A BE[55100000]        <1> 	mov esi, backtoosmsg
  1447                              <1> %ifdef gui.included
  1448 00000F9F 803D[D8840000]00    <1> 	cmp byte [guion], 0
  1449 00000FA6 741F                <1> 	je backtomsg
  1450                              <1> guibacktomsg:
  1451 00000FA8 668B15[3D110000]    <1> 	mov dx, [locunhandx]
  1452 00000FAF 668B0D[3B110000]    <1> 	mov cx, [locunhandy]
  1453 00000FB6 66B80100            <1> 	mov ax, 1
  1454 00000FBA 6631DB              <1> 	xor bx, bx
  1455 00000FBD E842570000          <1> 	call showstring2
  1456 00000FC2 E905000000          <1> 	jmp backtomsgdone
  1457                              <1> backtomsg:
  1458                              <1> %endif
  1459 00000FC7 E8AC0C0000          <1> 	call print
  1460                              <1> backtomsgdone:
  1461 00000FCC 30C0                <1> 	xor al, al
  1462 00000FCE E809110000          <1> 	call rdcharint
  1463 00000FD3 803D[41110000]03    <1> 	cmp byte [intprob], 3
  1464 00000FDA 753C                <1> 	jne nodebugint
  1465                              <1> %ifdef gui.included
  1466 00000FDC 803D[D8840000]00    <1> 	cmp byte [guion], 0
  1467 00000FE3 7422                <1> 	je nodebuggui
  1468 00000FE5 668B1D[3F110000]    <1> 	mov bx, [backgroundcache]
  1469 00000FEC 66891D[095C0000]    <1> 	mov [background], bx
  1470 00000FF3 6631DB              <1> 	xor bx, bx
  1471 00000FF6 C605[C54C0000]00    <1> 	mov byte [mousedisabled], 0
  1472 00000FFD E8CA4B0000          <1> 	call guiclear
  1473 00001002 E8A4530000          <1> 	call reloadallgraphics
  1474                              <1> nodebuggui:
  1475                              <1> %endif
  1476 00001007 8B35[2F110000]      <1> 	mov esi, [espfirst]
  1477 0000100D 89F4                <1> 	mov esp, esi
  1478 0000100F 61                  <1> 	popad
  1479 00001010 17                  <1> 	pop ss
  1480 00001011 0FA9                <1> 	pop gs
  1481 00001013 0FA1                <1> 	pop fs
  1482 00001015 07                  <1> 	pop es
  1483 00001016 1F                  <1> 	pop ds
  1484 00001017 CF                  <1> 	iret
  1485                              <1> nodebugint:
  1486 00001018 61                  <1> 	popad
  1487 00001019 17                  <1> 	pop ss
  1488 0000101A 0FA9                <1> 	pop gs
  1489 0000101C 0FA1                <1> 	pop fs
  1490 0000101E 07                  <1> 	pop es
  1491 0000101F 1F                  <1> 	pop ds
  1492                              <1> %ifdef gui.included
  1493 00001020 803D[D8840000]00    <1> 	cmp byte [guion], 0
  1494 00001027 7427                <1> 	je returnunhandgui
  1495 00001029 668B1D[3F110000]    <1> 	mov bx, [backgroundcache]
  1496 00001030 66891D[095C0000]    <1> 	mov [background], bx
  1497 00001037 6631DB              <1> 	xor bx, bx
  1498 0000103A C605[C54C0000]00    <1> 	mov byte [mousedisabled], 0
  1499 00001041 E8864B0000          <1> 	call guiclear
  1500 00001046 E860530000          <1> 	call reloadallgraphics
  1501 0000104B E9BB4B0000          <1> 	jmp guiboot
  1502                              <1> %endif
  1503                              <1> returnunhandgui:
  1504 00001050 E919180000          <1> 	jmp nwcmd
  1505 00001055 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1506 0000105E 737420616E79207072- <1>
  1507 00001067 6F626C656D7320696E- <1>
  1508 00001070 207468652049737375- <1>
  1509 00001079 65732073656374696F- <1>
  1510 00001082 6E20617420736F6C6C- <1>
  1511 0000108B 65726F732E676F6F67- <1>
  1512 00001094 6C65636F64652E636F- <1>
  1513 0000109D 6D0A                <1>
  1514 0000109F 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1515 000010A8 206B657920746F2072- <1>
  1516 000010B1 657475726E20746F20- <1>
  1517 000010BA 536F6C6C65724F530A- <1>
  1518 000010C3 00                  <1>
  1519                              <1> expdump:
  1520 000010C4 8B35[33110000]      <1> 	mov esi, [esiloc]
  1521 000010CA 89F7                <1> 	mov edi, esi
  1522 000010CC 81C70F000000        <1> 	add edi, 15
  1523 000010D2 81C604000000        <1> 	add esi, 4
  1524 000010D8 893D[33110000]      <1> 	mov [esiloc], edi
  1525 000010DE 81EF03000000        <1> 	sub edi, 3
  1526 000010E4 E8E41B0000          <1> 	call converthex
  1527 000010E9 81EE04000000        <1> 	sub esi, 4
  1528                              <1> %ifdef gui.included
  1529 000010EF 803D[D8840000]00    <1> 	cmp byte [guion], 0
  1530 000010F6 0F8429000000        <1> 	je near expdumptext
  1531 000010FC 668B0D[3B110000]    <1> 	mov cx, [locunhandy]
  1532 00001103 668B15[3D110000]    <1> 	mov dx, [locunhandx]
  1533 0000110A 66B80100            <1> 	mov ax, 1
  1534 0000110E 6631DB              <1> 	xor bx, bx
  1535 00001111 E8EE550000          <1> 	call showstring2
  1536 00001116 66890D[3B110000]    <1> 	mov [locunhandy], cx
  1537 0000111D 668915[3D110000]    <1> 	mov [locunhandx], dx
  1538 00001124 C3                  <1> 	ret
  1539                              <1> %endif
  1540                              <1> expdumptext:
  1541 00001125 E84E0B0000          <1> 	call print
  1542 0000112A C3                  <1> 	ret
  1543 0000112B 00000000            <1> esploc dd 0
  1544 0000112F 00000000            <1> espfirst dd 0
  1545 00001133 00000000            <1> esiloc dd 0
  1546 00001137 00000000            <1> esiregbuf dd 0
  1547 0000113B 0100                <1> locunhandy dw 1
  1548 0000113D 0100                <1> locunhandx dw 1
  1549 0000113F 0000                <1> backgroundcache dw 0
  1550 00001141 00                  <1> intprob db 0
  1551 00001142 00000000            <1> codeloc dd 0
  1552 00001146 00000000            <1> codelocend dd 0
  1553                              <1> 	unhandmsg:	
  1554 0000114A 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1555 00001153 303030200A00        <1>
  1556                              <1> unhndrg:
  1557 00001159 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1558 00001162 303030202000<rept>  <1>
  1559 000011C2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1560 000011CB 303030200A00        <1>
  1561 000011D1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1562 000011DA 303030202000<rept>  <1>
  1563 0000123A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1564 00001243 303030200A00        <1>
  1565 00001249 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1566 00001252 303030202000<rept>  <1>
  1567 000012B2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1568 000012BB 303030200A00        <1>
  1569 000012C1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1570 000012CA 303030202000<rept>  <1>
  1571 0000132A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1572 00001333 303030200A00        <1>
  1573                              <1> unhandregs:
  1574 00001339 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1575 00001342 303030202000        <1>
  1576 00001348 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1577 00001351 303030202000        <1>
  1578 00001357 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1579 00001360 303030200A00        <1>
  1580 00001366 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1581 0000136F 303030202000        <1>
  1582 00001375 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1583 0000137E 303030202000        <1>
  1584 00001384 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1585 0000138D 303030202000        <1>
  1586 00001393 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1587 0000139C 303030202000        <1>
  1588 000013A2 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1589 000013AB 303030200A00        <1>
  1590 000013B1 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1591 000013BA 303030202000        <1>
  1592 000013C0 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1593 000013C9 303030202000        <1>
  1594 000013CF 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1595 000013D8 303030202000        <1>
  1596 000013DE 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1597 000013E7 303030200A00        <1>
  1598 000013ED 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1599 000013F6 303030202000        <1>
  1600 000013FC 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1601 00001405 303030202000        <1>
  1602 0000140B 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1603 00001414 303030202000        <1>
  1604 0000141A 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1605 00001423 303030200A00        <1>
  1606 00001429 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1607 00001432 303030202000        <1>
  1608 00001438 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1609 00001441 303030202000        <1>
  1610 00001447 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1611 00001450 303030202000        <1>
  1612 00001456 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  1613 0000145F 303030200A00        <1>
  1614 00001465 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1615 0000146E 303030202000<rept>  <1>
  1616 00001483 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1617 0000148C 30303020FF00        <1>
  1618 00001492 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1619 0000149B 3030305D2000        <1>
  1620 000014A1 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1621 000014AA 303030202000<rept>  <1>
  1622 000014CE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1623 000014D7 303030FF0A00        <1>
  1624                              <1> unhandmsgend:
  1625                              <1> 
  1626                              <1> errortypes:
  1627 000014DD [21150000]          <1> 			dd err0
  1628 000014E1 [85150000]          <1> 			dd err1
  1629 000014E5 [E6150000]          <1> 			dd err2
  1630 000014E9 [3B160000]          <1> 			dd err3
  1631 000014ED [9F160000]          <1> 			dd err4
  1632 000014F1 [F1160000]          <1> 			dd err5
  1633 000014F5 [5B170000]          <1> 			dd err6
  1634 000014F9 [C3170000]          <1> 			dd err7
  1635 000014FD [0D180000]          <1> 			dd err8
  1636 00001501 [6A180000]          <1> 			dd err9
  1637 00001505 [C3180000]          <1> 			dd err10
  1638 00001509 [0E190000]          <1> 			dd err11
  1639 0000150D [5E190000]          <1> 			dd err12
  1640 00001511 [B7190000]          <1> 			dd err13
  1641 00001515 [1A1A0000]          <1> 			dd err14
  1642 00001519 [561A0000]          <1> 			dd err15
  1643                              <1> errortypesend:
  1644 0000151D [E11A0000]          <1> 			dd unknownerror
  1645                              <1> 			
  1646 00001521 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1647 0000152A 6279207A65726F3A0A  <1>
  1648 00001533 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1649 0000153C 6C79206C696D2061F6- <1>
  1650 00001545 78203D20EC20776865- <1>
  1651 0000154E 6E206120697320616E- <1>
  1652 00001557 79207265616C206E75- <1>
  1653 00001560 6D6265722E20486170- <1>
  1654 00001569 707920456173746572- <1>
  1655 00001572 210A                <1>
  1656 00001574 202020202020202020- <1> 		db "            x",26,"0",10,0
  1657 0000157D 202020781A300A00    <1>
  1658                              <1> 		
  1659 00001585 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1660 0000158E 65702F427265616B70- <1>
  1661 00001597 6F696E743A0A        <1>
  1662 0000159D 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1663 000015A6 696E74206661756C74- <1>
  1664 000015AF 2C20627265616B706F- <1>
  1665 000015B8 696E7420747261702C- <1>
  1666 000015C1 206F722073696E676C- <1>
  1667 000015CA 652D73746570207472- <1>
  1668 000015D3 617020776173207472- <1>
  1669 000015DC 696767657265642E0A- <1>
  1670 000015E5 00                  <1>
  1671                              <1> 		
  1672 000015E6 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1673 000015EF 6C6520696E74657272- <1>
  1674 000015F8 7570743A0A          <1>
  1675 000015FD 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1676 00001606 6520696E7465727275- <1>
  1677 0000160F 707420776173207472- <1>
  1678 00001618 696767657265642074- <1>
  1679 00001621 68617420636F756C64- <1>
  1680 0000162A 206E6F74206265206D- <1>
  1681 00001633 61736B65642E0A00    <1>
  1682                              <1> 		
  1683 0000163B 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1684 00001644 743A0A              <1>
  1685 00001647 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1686 00001650 727275707420697320- <1>
  1687 00001659 7573656420696E2070- <1>
  1688 00001662 726F6772616D732074- <1>
  1689 0000166B 6F2073686F77207468- <1>
  1690 00001674 6520737461636B2061- <1>
  1691 0000167D 6E6420726567697374- <1>
  1692 00001686 65727320616E642063- <1>
  1693 0000168F 616E2062650A        <1>
  1694 00001695 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1695 0000169E 00                  <1>
  1696                              <1> 		
  1697 0000169F 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1698 000016A8 0A                  <1>
  1699 000016A9 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1700 000016B2 73736F722072616E20- <1>
  1701 000016BB 696E746F20616E2049- <1>
  1702 000016C4 4E544F20696E737472- <1>
  1703 000016CD 756374696F6E207769- <1>
  1704 000016D6 746820746865206F76- <1>
  1705 000016DF 6572666C6F7720666C- <1>
  1706 000016E8 6167207365742E0A00  <1>
  1707                              <1> 		
  1708 000016F1 426F756E6473206368- <1> err5	db "Bounds check:",10
  1709 000016FA 65636B3A0A          <1>
  1710 000016FF 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1711 00001708 73736F72207265626F- <1>
  1712 00001711 756E6465642066726F- <1>
  1713 0000171A 6D206120424F554E44- <1>
  1714 00001723 20696E737472756374- <1>
  1715 0000172C 696F6E2072756E206F- <1>
  1716 00001735 6E20616E206F706572- <1>
  1717 0000173E 616E64207468617420- <1>
  1718 00001747 776173206F75740A    <1>
  1719 0000174F 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1720 00001758 2E0A00              <1>
  1721                              <1> 		
  1722 0000175B 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1723 00001764 70636F64653A0A      <1>
  1724 0000176B 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1725 00001774 73736F722068617320- <1>
  1726 0000177D 6E6F20696465612077- <1>
  1727 00001786 686174206974207761- <1>
  1728 0000178F 7320747279696E6720- <1>
  1729 00001798 746F20657865637574- <1>
  1730 000017A1 652E20446F6E277420- <1>
  1731 000017AA 72756E205353453420- <1>
  1732 000017B3 636F64650A          <1>
  1733 000017B8 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1734 000017C1 0A00                <1>
  1735                              <1> 		
  1736 000017C3 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1737 000017CC 6F72206E6F74206176- <1>
  1738 000017D5 61696C61626C653A0A  <1>
  1739 000017DE 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1740 000017E7 206B6E6F7720746865- <1>
  1741 000017F0 7920646F6E2774206D- <1>
  1742 000017F9 616B652074686F7365- <1>
  1743 00001802 20616E796D6F726521- <1>
  1744 0000180B 0A00                <1>
  1745                              <1> 		
  1746 0000180D 446F75626C65206661- <1> err8	db "Double fault:",10
  1747 00001816 756C743A0A          <1>
  1748 0000181B 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1749 00001824 74696F6E2068616E64- <1>
  1750 0000182D 6C657220636F756C64- <1>
  1751 00001836 206E6F742068616E64- <1>
  1752 0000183F 6C6520746861742069- <1>
  1753 00001848 7420636F756C64206E- <1>
  1754 00001851 6F742068616E646C65- <1>
  1755 0000185A 20616E206578636570- <1>
  1756 00001863 74696F6E2E0A00      <1>
  1757                              <1> 		
  1758 0000186A 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1759 00001873 6F72207365676D656E- <1>
  1760 0000187C 74206F76657272756E- <1>
  1761 00001885 3A0A00              <1>
  1762 00001888 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1763 00001891 722068617070656E73- <1>
  1764 0000189A 20696E206D6F646572- <1>
  1765 000018A3 6E20636F6D70757465- <1>
  1766 000018AC 72732C20616E64206E- <1>
  1767 000018B5 657665722073686F75- <1>
  1768 000018BE 6C642E0A00          <1>
  1769                              <1> 
  1770 000018C3 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1771 000018CC 53533A0A            <1>
  1772 000018D0 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1773 000018D9 686174207761732073- <1>
  1774 000018E2 776974636865642074- <1>
  1775 000018EB 6F20697320696E7661- <1>
  1776 000018F4 6C69642E204E6F7468- <1>
  1777 000018FD 696E672066756E6E79- <1>
  1778 00001906 20686572652E0A00    <1>
  1779                              <1> 		
  1780 0000190E 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1781 00001917 6F742070726573656E- <1>
  1782 00001920 743A0A              <1>
  1783 00001923 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1784 0000192C 6E7420626974206F66- <1>
  1785 00001935 20746865207365676D- <1>
  1786 0000193E 656E74206465736372- <1>
  1787 00001947 6970746F7220697320- <1>
  1788 00001950 73657420746F207A65- <1>
  1789 00001959 726F2E0A00          <1>
  1790                              <1> 		
  1791 0000195E 537461636B20657863- <1> err12	db "Stack exception:",10
  1792 00001967 657074696F6E3A0A    <1>
  1793 0000196F 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1794 00001978 7363726970746F7220- <1>
  1795 00001981 697320696E76616C69- <1>
  1796 0000198A 64206F72206E6F7420- <1>
  1797 00001993 70726573656E74206F- <1>
  1798 0000199C 7220697473206C696D- <1>
  1799 000019A5 697420697320746F6F- <1>
  1800 000019AE 20736D616C6C2E0A00  <1>
  1801                              <1> 		
  1802 000019B7 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1803 000019C0 726F74656374696F6E- <1>
  1804 000019C9 2076696F6C6174696F- <1>
  1805 000019D2 6E3A0A              <1>
  1806 000019D5 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1807 000019DE 746564207468652063- <1>
  1808 000019E7 6F6D70757465722E20- <1>
  1809 000019F0 537465702061776179- <1>
  1810 000019F9 20736C6F776C792E20- <1>
  1811 00001A02 546865204642492069- <1>
  1812 00001A0B 73206F6E2069747320- <1>
  1813 00001A14 7761792E0A00        <1>
  1814                              <1> 		
  1815 00001A1A 50616765206661756C- <1> err14	db "Page fault:",10
  1816 00001A23 743A0A              <1>
  1817 00001A26 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1818 00001A2F 746861742077617320- <1>
  1819 00001A38 726571756573746564- <1>
  1820 00001A41 20776173206E6F7420- <1>
  1821 00001A4A 617661696C61626C65- <1>
  1822 00001A53 2E0A00              <1>
  1823                              <1> 		
  1824 00001A56 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1825 00001A5F 666F7220506C616E20- <1>
  1826 00001A68 523A0A              <1>
  1827 00001A6B 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1828 00001A74 727275707420697320- <1>
  1829 00001A7D 726573657276656420- <1>
  1830 00001A86 666F72207573616765- <1>
  1831 00001A8F 206F6E6C7920627920- <1>
  1832 00001A98 746865206D696C6974- <1>
  1833 00001AA1 617279207768656E20- <1>
  1834 00001AAA 6974206973206E6563- <1>
  1835 00001AB3 6573736172790A      <1>
  1836 00001ABA 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1837 00001AC3 746520612066756C6C- <1>
  1838 00001ACC 2D7363616C6520636F- <1>
  1839 00001AD5 757020642782746174- <1>
  1840 00001ADE 2E0A00              <1>
  1841                              <1> 		
  1842 00001AE1 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1843 00001AEA 68656C6C206A757374- <1>
  1844 00001AF3 2068617070656E6564- <1>
  1845 00001AFC 3F2049732065766572- <1>
  1846 00001B05 796F6E65206F6B6179- <1>
  1847 00001B0E 3F2048617264206472- <1>
  1848 00001B17 6976653F2056696465- <1>
  1849 00001B20 6F20636172643F0A    <1>
  1850 00001B28 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1851 00001B31 726520796F75207468- <1>
  1852 00001B3A 6572653F0A00        <1>
  1853                              <1> %else
  1854                              <1> unhand:	
  1855                              <1> 	%assign i 0
  1856                              <1> 	%rep 32
  1857                              <1> 	mov byte [intprob], i
  1858                              <1> 	jmp unhand2
  1859                              <1> 	%assign i i+1
  1860                              <1> 	%endrep
  1861                              <1> unhand2:
  1862                              <1> 	cmp byte [intprob], 3
  1863                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1864                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1865                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1866                              <1> 	mov bl, [intprob]
  1867                              <1> 	jmp exitprog
  1868                              <1> intprob db 0
  1869                              <1> %endif
  1870                                      %include "source/ints.asm"
  1871                              <1> newints:	;;for great justice
  1872 00001B40 80FC00              <1> 	cmp ah, 0
  1873 00001B43 0F847F000000        <1> 	je near intx0   ;kills app
  1874 00001B49 80FC01              <1> 	cmp ah, 1
  1875 00001B4C 0F84FE000000        <1> 	je near intx1   ;print string
  1876 00001B52 80FC02              <1> 	cmp ah, 2
  1877 00001B55 0F8450010000        <1> 	je near intx2	;read string
  1878 00001B5B 80FC03              <1> 	cmp ah, 3
  1879 00001B5E 0F8470010000        <1> 	je near intx3	;clear screen
  1880 00001B64 80FC04              <1> 	cmp ah, 4
  1881 00001B67 0F84E7010000        <1> 	je near intx4	;read and print string
  1882 00001B6D 80FC05              <1> 	cmp ah, 5
  1883 00001B70 0F845A050000        <1> 	je near intx5	;get char
  1884 00001B76 80FC06              <1> 	cmp ah, 6
  1885 00001B79 0F84A4050000        <1> 	je near intx6	;print char
  1886 00001B7F 80FC07              <1> 	cmp ah, 7
  1887 00001B82 0F8486070000        <1> 	je near intx7	;read file
  1888                              <1> ;	cmp ah, 8
  1889                              <1> ;	je near intx8	;write file
  1890 00001B88 80FC09              <1> 	cmp ah, 9
  1891 00001B8B 0F8487070000        <1> 	je near intx9	;convert number to string
  1892 00001B91 80FC0A              <1> 	cmp ah, 10
  1893 00001B94 0F8496070000        <1> 	je near intx10	;convert string to number
  1894                              <1> %ifdef threads.included
  1895 00001B9A 80FC0B              <1> 	cmp ah, 11
  1896 00001B9D 0F8497070000        <1> 	je near intx11	;create thread
  1897                              <1> %endif
  1898 00001BA3 80FC0C              <1> 	cmp ah, 12
  1899 00001BA6 0F8465080000        <1> 	je near intx12	;get time
  1900 00001BAC 80FC0D              <1> 	cmp ah, 13
  1901 00001BAF 0F8471080000        <1> 	je near intx13	;set time
  1902 00001BB5 80FC0E              <1> 	cmp ah, 14
  1903 00001BB8 0F8478080000        <1> 	je near intx14	;run program
  1904 00001BBE 80FC0F              <1> 	cmp ah, 15
  1905 00001BC1 0F8484080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  1906 00001BC7 C3                  <1> 	ret
  1907                              <1> 	
  1908                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  1909                              <1> intx0:
  1910                              <1> 	%include 'source/interrupts/0_exit.asm'
  1911                              <2> exitprog:
  1912 00001BC8 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1913 00001BCC 8ED8                <2> 	mov ds, ax
  1914 00001BCE 8EC0                <2> 	mov es, ax
  1915 00001BD0 8EE0                <2> 	mov fs, ax
  1916 00001BD2 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1917 00001BD6 8EE8                <2> 	mov gs, ax
  1918 00001BD8 C705[C85B0000]0000- <2> 	mov dword [currentthread], 0
  1919 00001BE0 0000                <2>
  1920 00001BE2 C705[C35B0000]0400- <2> 	mov dword [lastthread], 4
  1921 00001BEA 0000                <2>
  1922 00001BEC C605[C75B0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1923 00001BF3 8B25[1E9B0000]      <2> 	mov esp, [previousstack] ;and this
  1924 00001BF9 81FB00000000        <2> 	cmp ebx, 0
  1925 00001BFF 0F8501000000        <2> 	jne near .error
  1926 00001C05 C3                  <2> 	ret
  1927                              <2> .error:
  1928 00001C06 89D9                <2> 	mov ecx, ebx
  1929 00001C08 B006                <2> 	mov al, 6
  1930 00001C0A A2[2B2D0000]        <2> 	mov [firsthexshown], al
  1931 00001C0F 51                  <2> 	push ecx
  1932 00001C10 BE[2B1C0000]        <2> 	mov esi, .msg1
  1933 00001C15 E840000000          <2> 	call printhighlight
  1934 00001C1A 59                  <2> 	pop ecx
  1935 00001C1B E820110000          <2> 	call showhex
  1936 00001C20 BE[401C0000]        <2> 	mov esi, .msg2
  1937 00001C25 E830000000          <2> 	call printhighlight
  1938 00001C2A C3                  <2> 	ret
  1939                              <2> 	
  1940 00001C2B 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  1941 00001C34 7461747573206F6620- <2>
  1942 00001C3D 307800              <2>
  1943 00001C40 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  1944 00001C49 726E65642E0A00      <2>
  1945                              <1> intx1:
  1946                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  1947 00001C50 E82A000000          <2> call printint
  1948 00001C55 E936E6FFFF          <2> jmp timerinterrupt
  1949                              <2> 
  1950                              <2> 	printhighlight:
  1951 00001C5A 6631C0              <2> 		xor ax, ax
  1952 00001C5D 66BBF000            <2> 		mov bx, 0xF0
  1953 00001C61 E919000000          <2> 		jmp printint
  1954                              <2> 	printquiet:
  1955 00001C66 6631C0              <2> 		xor ax, ax
  1956 00001C69 A2[AA1C0000]        <2> 		mov [endkeyprint], al
  1957 00001C6E 66BB0700            <2> 		mov bx, 7
  1958 00001C72 E820000000          <2> 		call printint.b
  1959 00001C77 C3                  <2> 		ret
  1960                              <2>     print:
  1961 00001C78 6631C0              <2> 		xor ax, ax
  1962 00001C7B 66BB0700            <2> 		mov bx, 7
  1963                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  1964 00001C7F 56                  <2> 		push esi
  1965 00001C80 A2[AA1C0000]        <2> 		mov [endkeyprint], al
  1966 00001C85 E80D000000          <2> 		call .b
  1967 00001C8A 89F1                <2> 		mov ecx, esi
  1968 00001C8C 5F                  <2> 		pop edi
  1969 00001C8D 29F9                <2> 		sub ecx, edi
  1970 00001C8F 51                  <2> 		push ecx
  1971 00001C90 E8EC070000          <2> 		call termcopy
  1972 00001C95 59                  <2> 		pop ecx
  1973 00001C96 C3                  <2> 		ret
  1974                              <2> 	.b:
  1975 00001C97 8A06                <2> 		mov al, [esi]
  1976 00001C99 3A05[AA1C0000]      <2> 		cmp al, [endkeyprint]
  1977 00001C9F 7408                <2> 		je .done
  1978 00001CA1 E8A2040000          <2> 		call prcharq
  1979 00001CA6 46                  <2> 		inc esi
  1980 00001CA7 EBEE                <2> 		jmp .b
  1981                              <2> 	.done:
  1982 00001CA9 C3                  <2> 		ret
  1983                              <2> 
  1984 00001CAA 00                  <2> endkeyprint db 0
  1985                              <1> intx2:
  1986                              <1> 	%include 'source/interrupts/2_readstr.asm'
  1987 00001CAB E805000000          <2> call readint
  1988 00001CB0 E9DBE5FFFF          <2> jmp timerinterrupt
  1989                              <2> 
  1990                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  1991 00001CB5 89C3                <2> 		mov ebx, eax
  1992                              <2> 	.b:
  1993 00001CB7 53                  <2> 		push ebx
  1994 00001CB8 57                  <2> 		push edi
  1995 00001CB9 56                  <2> 		push esi
  1996 00001CBA 30C0                <2> 		xor al, al
  1997 00001CBC E81B040000          <2> 		call rdcharint
  1998 00001CC1 5E                  <2> 		pop esi
  1999 00001CC2 8806                <2> 		mov [esi], al
  2000 00001CC4 46                  <2> 		inc esi
  2001 00001CC5 5F                  <2> 		pop edi
  2002 00001CC6 5B                  <2> 		pop ebx
  2003 00001CC7 39FE                <2> 		cmp esi, edi
  2004 00001CC9 7304                <2> 		jae .done
  2005 00001CCB 38D8                <2> 		cmp al, bl
  2006 00001CCD 75E8                <2> 		jne .b
  2007                              <2> 	.done:
  2008 00001CCF 4E                  <2> 		dec esi
  2009 00001CD0 C60600              <2> 		mov byte [esi], 0
  2010 00001CD3 C3                  <2> 		ret
  2011                              <1> intx3:
  2012                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2013 00001CD4 E805000000          <2> call clear
  2014 00001CD9 E9B2E5FFFF          <2> jmp timerinterrupt
  2015                              <2> clear:		
  2016 00001CDE 668B0D[0A230000]    <2> 		mov cx, [charxy]
  2017 00001CE5 BF[B4B80000]        <2> 		mov edi, videobuf
  2018 00001CEA 6631C0              <2> 		xor ax, ax
  2019 00001CED 66A3[04230000]      <2> 		mov [linebeginpos], ax
  2020 00001CF3 66A3[06230000]      <2> 		mov [videobufpos], ax
  2021 00001CF9 6631D2              <2> 		xor dx, dx
  2022 00001CFC 66A3[08230000]      <2> 		mov [charpos], ax
  2023 00001D02 B407                <2> 		mov ah, 7
  2024                              <2> 	clearb:
  2025 00001D04 8807                <2> 		mov [edi], al
  2026 00001D06 886701              <2> 		mov [edi + 1], ah
  2027 00001D09 81C702000000        <2> 		add edi, 2
  2028 00001D0F FEC9                <2> 		dec cl
  2029 00001D11 80F900              <2> 		cmp cl, 0
  2030 00001D14 75EE                <2> 		jne clearb
  2031 00001D16 8A0D[0A230000]      <2> 		mov cl, [charxy]
  2032 00001D1C FECD                <2> 		dec ch
  2033 00001D1E 80FD00              <2> 		cmp ch, 0
  2034 00001D21 75E1                <2> 		jne clearb
  2035                              <2> 	cleardouble:
  2036 00001D23 BF[B4080100]        <2> 		mov edi, videobuf2
  2037 00001D28 668B0D[0A230000]    <2> 		mov cx, [charxy]
  2038 00001D2F 31C0                <2> 		xor eax, eax
  2039                              <2> 	clearc:
  2040 00001D31 668907              <2> 		mov [edi], ax
  2041 00001D34 81C702000000        <2> 		add edi, 2
  2042 00001D3A FEC9                <2> 		dec cl
  2043 00001D3C 80F900              <2> 		cmp cl, 0
  2044 00001D3F 75F0                <2> 		jne clearc
  2045 00001D41 8A0D[0A230000]      <2> 		mov cl, [charxy]
  2046 00001D47 FECD                <2> 		dec ch
  2047 00001D49 80FD00              <2> 		cmp ch, 0
  2048 00001D4C 75E3                <2> 		jne clearc
  2049 00001D4E E82E070000          <2> 		call termcopy
  2050 00001D53 C3                  <2> 		ret
  2051                              <2> 		
  2052                              <1> intx4:
  2053                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2054 00001D54 E809000000          <2> call rdprint
  2055 00001D59 E932E5FFFF          <2> jmp timerinterrupt
  2056                              <2> 
  2057                              <2> readline:
  2058 00001D5E B00A                <2>   mov al, 10
  2059 00001D60 B307                <2>   mov bl, 7
  2060                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2061 00001D62 8935[C5200000]      <2> 		mov [buftxtloc], esi
  2062 00001D68 A2[BD200000]        <2> 		mov [endkeyrdpr], al
  2063 00001D6D 881D[BE200000]      <2> 		mov [modkeyrdpr], bl
  2064 00001D73 8935[BF200000]      <2> 		mov [firstesirdpr], esi
  2065 00001D79 893D[C9200000]      <2> 		mov [endbufferrdpr], edi
  2066                              <2> 	rdprintb:
  2067 00001D7F 56                  <2> 		push esi
  2068 00001D80 B001                <2> 		mov al, 1
  2069 00001D82 E855030000          <2> 		call rdcharint
  2070 00001D87 5E                  <2> 		pop esi
  2071 00001D88 803D[E9530000]E0    <2> 		cmp byte [specialkey], 0xE0
  2072 00001D8F 751B                <2> 		jne notspecialrdprnt
  2073 00001D91 80FC53              <2> 		cmp ah, 0x53
  2074 00001D94 0F84E8020000        <2> 		je near rdprdel
  2075 00001D9A 80FC47              <2> 		cmp ah, 0x47
  2076 00001D9D 0F8407010000        <2> 		je near rdprhome
  2077 00001DA3 80FC4F              <2> 		cmp ah, 0x4F
  2078 00001DA6 0F841D010000        <2> 		je near rdprend
  2079                              <2> 	notspecialrdprnt:
  2080 00001DAC 80FC48              <2> 		cmp ah, 0x48
  2081 00001DAF 0F84D5010000        <2> 		je near rdprup
  2082 00001DB5 80FC50              <2> 		cmp ah, 0x50
  2083 00001DB8 0F84AF010000        <2> 		je near rdprdown
  2084 00001DBE 80FC4D              <2> 		cmp ah, 0x4D
  2085 00001DC1 0F845E010000        <2> 		je near rdprright
  2086 00001DC7 80FC4B              <2> 		cmp ah, 0x4B
  2087 00001DCA 0F8416010000        <2> 		je near rdprleft
  2088 00001DD0 3C08                <2> 		cmp al, 8
  2089 00001DD2 0F84C5020000        <2> 		je near rdprbscheck
  2090 00001DD8 3C00                <2> 		cmp al, 0
  2091 00001DDA 74A3                <2> 		je rdprintb
  2092 00001DDC 80FC00              <2> 		cmp ah, 0
  2093 00001DDF 749E                <2> 		je rdprintb
  2094 00001DE1 8806                <2> 		mov [esi], al
  2095 00001DE3 46                  <2> 		inc esi
  2096                              <2> 	bscheckequal:
  2097 00001DE4 8A1D[BE200000]      <2> 		mov bl, [modkeyrdpr]
  2098 00001DEA 8A3D[C4200000]      <2> 		mov bh, [txtmask]
  2099 00001DF0 80FF00              <2> 		cmp bh, 0
  2100 00001DF3 7404                <2> 		je nomasktxt
  2101 00001DF5 88F8                <2> 		mov al, bh
  2102 00001DF7 30FF                <2> 		xor bh, bh
  2103                              <2> 	nomasktxt:
  2104 00001DF9 E839030000          <2> 		call prcharint
  2105 00001DFE 56                  <2> 		push esi
  2106 00001DFF 66A3[BB200000]      <2> 		mov [axcache], ax
  2107 00001E05 8A25[BD200000]      <2> 		mov ah, [endkeyrdpr]
  2108 00001E0B 38E0                <2> 		cmp al, ah
  2109 00001E0D 7429                <2> 		je nobackprintbuftxt2
  2110 00001E0F BE[9EAD0000]        <2> 		mov esi, buftxt2
  2111 00001E14 E84DFEFFFF          <2> 		call printquiet
  2112 00001E19 B020                <2> 		mov al, " "
  2113 00001E1B E828030000          <2> 		call prcharq
  2114 00001E20 B008                <2> 		mov al, 8
  2115 00001E22 81FE[9EAD0000]      <2> 		cmp esi, buftxt2
  2116 00001E28 740E                <2> 		je nobackprintbuftxt2
  2117                              <2> 	backprintbuftxt2:
  2118 00001E2A E819030000          <2> 		call prcharq
  2119 00001E2F 4E                  <2> 		dec esi
  2120 00001E30 81FE[9EAD0000]      <2> 		cmp esi, buftxt2
  2121 00001E36 77F2                <2> 		ja backprintbuftxt2
  2122                              <2> 	nobackprintbuftxt2:
  2123 00001E38 3C0A                <2> 		cmp al, 10
  2124 00001E3A 7405                <2> 		je nonobackprint
  2125 00001E3C E8F6020000          <2> 		call prcharint
  2126                              <2> 	nonobackprint:
  2127 00001E41 5E                  <2> 		pop esi
  2128 00001E42 3B35[C9200000]      <2> 		cmp esi, [endbufferrdpr]
  2129 00001E48 0F8319000000        <2> 		jae near donerdprinc
  2130 00001E4E 66A1[BB200000]      <2> 		mov ax, [axcache]
  2131 00001E54 8A25[BD200000]      <2> 		mov ah, [endkeyrdpr]
  2132 00001E5A 38E0                <2> 		cmp al, ah
  2133 00001E5C 0F851DFFFFFF        <2> 		jne rdprintb
  2134 00001E62 E901000000          <2> 		jmp donerdprint
  2135                              <2> 	donerdprinc:
  2136 00001E67 46                  <2> 		inc esi
  2137                              <2> 	donerdprint:
  2138 00001E68 4E                  <2> 		dec esi
  2139 00001E69 BF[9EAD0000]        <2> 		mov edi, buftxt2
  2140                              <2> 	copylaterstuff:
  2141 00001E6E 8A07                <2> 		mov al, [edi]
  2142 00001E70 3C00                <2> 		cmp al, 0
  2143 00001E72 7406                <2> 		je nocopylaterstuff
  2144 00001E74 8806                <2> 		mov [esi], al
  2145 00001E76 47                  <2> 		inc edi
  2146 00001E77 46                  <2> 		inc esi
  2147 00001E78 EBF4                <2> 		jmp copylaterstuff
  2148                              <2> 	nocopylaterstuff:
  2149 00001E7A C60600              <2> 		mov byte [esi], 0
  2150 00001E7D E80B000000          <2> 		call clearbuftxt2
  2151 00001E82 89F1                <2> 		mov ecx, esi
  2152 00001E84 8B3D[BF200000]      <2> 		mov edi, [firstesirdpr]
  2153 00001E8A 29F9                <2> 		sub ecx, edi
  2154 00001E8C C3                  <2> 		ret
  2155                              <2> 	
  2156                              <2> 	clearbuftxt2:
  2157 00001E8D 30C0                <2> 		xor al, al
  2158 00001E8F BF[9EAD0000]        <2> 		mov edi, buftxt2
  2159                              <2> 	clearbuftxt2lp:
  2160 00001E94 8807                <2> 		mov [edi], al
  2161 00001E96 47                  <2> 		inc edi
  2162 00001E97 81FF[9EB10000]      <2> 		cmp edi, buftxt
  2163 00001E9D 75F5                <2> 		jne clearbuftxt2lp
  2164 00001E9F C3                  <2> 		ret
  2165                              <2> 	
  2166                              <2> 	rdprintb2:
  2167 00001EA0 E8DC050000          <2> 		call termcopy
  2168 00001EA5 E9D5FEFFFF          <2> 		jmp rdprintb
  2169                              <2> 		
  2170                              <2> 	rdprhome:
  2171 00001EAA 3B35[C5200000]      <2> 		cmp esi, [buftxtloc]
  2172 00001EB0 0F84EAFFFFFF        <2> 		je near rdprintb2
  2173 00001EB6 BF[9EAD0000]        <2> 		mov edi, buftxt2
  2174 00001EBB 8A07                <2> 		mov al, [edi]
  2175 00001EBD E846000000          <2> 		call shiftbuftxt2
  2176 00001EC2 E881020000          <2> 		call prcharq
  2177 00001EC7 EBE1                <2> 		jmp rdprhome
  2178                              <2> 		
  2179                              <2> 	rdprend:
  2180 00001EC9 BF[9EAD0000]        <2> 		mov edi, buftxt2
  2181 00001ECE 8A07                <2> 		mov al, [edi]
  2182 00001ED0 3C00                <2> 		cmp al, 0
  2183 00001ED2 0F84C8FFFFFF        <2> 		je near rdprintb2
  2184 00001ED8 8806                <2> 		mov [esi], al
  2185 00001EDA E866000000          <2> 		call shiftbuftxt2lft
  2186 00001EDF E864020000          <2> 		call prcharq
  2187 00001EE4 EBE3                <2> 		jmp rdprend
  2188                              <2> 	
  2189                              <2> 	rdprleft:
  2190 00001EE6 3B35[C5200000]      <2> 		cmp esi, [buftxtloc]
  2191 00001EEC 0F848DFEFFFF        <2> 		je near rdprintb
  2192 00001EF2 BF[9EAD0000]        <2> 		mov edi, buftxt2
  2193 00001EF7 8A07                <2> 		mov al, [edi]
  2194 00001EF9 E80A000000          <2> 		call shiftbuftxt2
  2195 00001EFE E834020000          <2> 		call prcharint
  2196 00001F03 E977FEFFFF          <2> 		jmp rdprintb
  2197                              <2> 	shiftbuftxt2:
  2198 00001F08 3C00                <2> 		cmp al, 0
  2199 00001F0A 7409                <2> 		je noshiftbuftxt2
  2200 00001F0C 47                  <2> 		inc edi
  2201 00001F0D 8A27                <2> 		mov ah, [edi]
  2202 00001F0F 8807                <2> 		mov [edi], al
  2203 00001F11 88E0                <2> 		mov al, ah
  2204 00001F13 EBF3                <2> 		jmp shiftbuftxt2
  2205                              <2> 	noshiftbuftxt2:
  2206 00001F15 BF[9EAD0000]        <2> 		mov edi, buftxt2
  2207 00001F1A 4E                  <2> 		dec esi
  2208 00001F1B 8A06                <2> 		mov al, [esi]
  2209 00001F1D 8807                <2> 		mov [edi], al
  2210 00001F1F C60600              <2> 		mov byte [esi], 0
  2211 00001F22 B008                <2> 		mov al, 8
  2212 00001F24 C3                  <2> 		ret
  2213                              <2> 		
  2214                              <2> 	rdprright:
  2215 00001F25 BF[9EAD0000]        <2> 		mov edi, buftxt2
  2216 00001F2A 8A07                <2> 		mov al, [edi]
  2217 00001F2C 3C00                <2> 		cmp al, 0
  2218 00001F2E 0F844BFEFFFF        <2> 		je near rdprintb
  2219 00001F34 8806                <2> 		mov [esi], al
  2220 00001F36 E80A000000          <2> 		call shiftbuftxt2lft
  2221 00001F3B E8F7010000          <2> 		call prcharint
  2222 00001F40 E93AFEFFFF          <2> 		jmp rdprintb
  2223                              <2> 	shiftbuftxt2lft:
  2224 00001F45 3C00                <2> 		cmp al, 0
  2225 00001F47 7408                <2> 		je noshiftbuftxt2lft
  2226 00001F49 47                  <2> 		inc edi
  2227 00001F4A 8A07                <2> 		mov al, [edi]
  2228 00001F4C 8847FF              <2> 		mov [edi - 1], al
  2229 00001F4F EBF4                <2> 		jmp shiftbuftxt2lft
  2230                              <2> 	noshiftbuftxt2lft:
  2231 00001F51 8A06                <2> 		mov al, [esi]
  2232 00001F53 46                  <2> 		inc esi
  2233 00001F54 8A1D[BE200000]      <2> 		mov bl, [modkeyrdpr]
  2234 00001F5A C3                  <2> 		ret
  2235                              <2> 		
  2236                              <2> 	rdprdownbck:
  2237 00001F5B FECC                <2> 		dec ah
  2238 00001F5D 8825[C3200000]      <2> 		mov [commandedit], ah
  2239 00001F63 E83A000000          <2> 		call rdprbckspc
  2240 00001F68 E912FEFFFF          <2> 		jmp rdprintb
  2241                              <2> 	
  2242                              <2> 	rdprdown:
  2243 00001F6D 8A25[C3200000]      <2> 		mov ah, [commandedit]
  2244 00001F73 80FC01              <2> 		cmp ah, 1
  2245 00001F76 0F8603FEFFFF        <2> 		jbe near rdprintb
  2246 00001F7C 80FC02              <2> 		cmp ah, 2
  2247 00001F7F 74DA                <2> 		je rdprdownbck
  2248 00001F81 80EC02              <2> 		sub ah, 2
  2249 00001F84 8825[C3200000]      <2> 		mov [commandedit], ah
  2250                              <2> 		
  2251                              <2> 	rdprup:
  2252 00001F8A 30C0                <2> 		xor al, al
  2253 00001F8C 3805[C3200000]      <2> 		cmp [commandedit], al
  2254 00001F92 0F84E7FDFFFF        <2> 		je near rdprintb
  2255 00001F98 E805000000          <2> 		call rdprbckspc
  2256 00001F9D E941000000          <2> 		jmp getcurrentcommandstr
  2257                              <2> 	rdprbckspc:
  2258 00001FA2 3B35[C5200000]      <2> 		cmp esi, [buftxtloc]
  2259 00001FA8 742B                <2> 		je nordprupbck
  2260                              <2> 	rdprupbckspclp:
  2261 00001FAA B008                <2> 		mov al, 8
  2262 00001FAC 8A1D[BE200000]      <2> 		mov bl, [modkeyrdpr]
  2263 00001FB2 E891010000          <2> 		call prcharq
  2264 00001FB7 B020                <2> 		mov al, " "
  2265 00001FB9 E88A010000          <2> 		call prcharq
  2266 00001FBE B008                <2> 		mov al, 8
  2267 00001FC0 E883010000          <2> 		call prcharq
  2268 00001FC5 4E                  <2> 		dec esi
  2269 00001FC6 3B35[C5200000]      <2> 		cmp esi, [buftxtloc]
  2270 00001FCC 7402                <2> 		je nordprupbck2
  2271 00001FCE EBDA                <2> 		jmp rdprupbckspclp
  2272                              <2> 	nordprupbck2:
  2273 00001FD0 E8AC040000          <2> 		call termcopy
  2274                              <2> 	nordprupbck:
  2275 00001FD5 8B3D[B8580100]      <2> 		mov edi, [commandbufpos]
  2276 00001FDB 81C7[BC580100]      <2> 		add edi, commandbuf
  2277 00001FE1 4F                  <2> 		dec edi
  2278 00001FE2 C3                  <2> 		ret
  2279                              <2> 	getcurrentcommandstr:
  2280 00001FE3 8A25[C3200000]      <2> 		mov ah, [commandedit]
  2281 00001FE9 FE05[C3200000]      <2> 		inc byte [commandedit]
  2282                              <2> 	getccmdlp:
  2283 00001FEF 4F                  <2> 		dec edi
  2284 00001FF0 8A07                <2> 		mov al, [edi]
  2285 00001FF2 81FF[BC580100]      <2> 		cmp edi, commandbuf
  2286 00001FF8 7231                <2> 		jb getcmdresetcommandbuf
  2287 00001FFA 81EF[BC580100]      <2> 		sub edi, commandbuf
  2288 00002000 3B3D[B8580100]      <2> 		cmp edi, [commandbufpos]
  2289 00002006 0F8473FDFFFF        <2> 		je near rdprintb
  2290 0000200C 81C7[BC580100]      <2> 		add edi, commandbuf
  2291 00002012 3C00                <2> 		cmp al, 0
  2292 00002014 75D9                <2> 		jne getccmdlp
  2293 00002016 FECC                <2> 		dec ah
  2294 00002018 80FC00              <2> 		cmp ah, 0
  2295 0000201B 77D2                <2> 		ja getccmdlp
  2296 0000201D 47                  <2> 		inc edi
  2297 0000201E 81FF[BC680100]      <2> 		cmp edi, commandbufend
  2298 00002024 770D                <2> 		ja fixcmdbufb4morerdpr
  2299 00002026 E915000000          <2> 		jmp morerdprup
  2300                              <2> 	getcmdresetcommandbuf:
  2301 0000202B BF[BC680100]        <2> 		mov edi, commandbufend
  2302 00002030 47                  <2> 		inc edi
  2303 00002031 EBBC                <2> 		jmp getccmdlp
  2304                              <2> 	fixcmdbufb4morerdpr:
  2305 00002033 4F                  <2> 		dec edi
  2306 00002034 81EF[BC680100]      <2> 		sub edi, commandbufend
  2307 0000203A 81C7[BC580100]      <2> 		add edi, commandbuf
  2308                              <2> 	morerdprup:
  2309 00002040 8A07                <2> 		mov al, [edi]
  2310 00002042 47                  <2> 		inc edi
  2311 00002043 81EF[BC580100]      <2> 		sub edi, commandbuf
  2312 00002049 3C00                <2> 		cmp al, 0
  2313 0000204B 0F844FFEFFFF        <2> 		je near rdprintb2
  2314 00002051 3B3D[B8580100]      <2> 		cmp edi, [commandbufpos]
  2315 00002057 0F8343FEFFFF        <2> 		jae near rdprintb2
  2316 0000205D 81C7[BC580100]      <2> 		add edi, commandbuf
  2317 00002063 8806                <2> 		mov [esi], al
  2318 00002065 46                  <2> 		inc esi
  2319 00002066 57                  <2> 		push edi
  2320 00002067 8A1D[BE200000]      <2> 		mov bl, [modkeyrdpr]
  2321 0000206D E8D6000000          <2> 		call prcharq
  2322 00002072 5F                  <2> 		pop edi
  2323 00002073 81FF[BC680100]      <2> 		cmp edi, commandbufend
  2324 00002079 76C5                <2> 		jbe morerdprup
  2325 0000207B BF[BC580100]        <2> 		mov edi, commandbuf
  2326 00002080 EBBE                <2> 		jmp morerdprup
  2327                              <2> 		
  2328                              <2> 	rdprdel:
  2329 00002082 BF[9EAD0000]        <2> 		mov edi, buftxt2
  2330 00002087 8A07                <2> 		mov al, [edi]
  2331 00002089 3C00                <2> 		cmp al, 0
  2332 0000208B 0F84EEFCFFFF        <2> 		je near rdprintb
  2333 00002091 8806                <2> 		mov [esi], al
  2334 00002093 E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2335 00002098 E8AB000000          <2> 		call prcharq
  2336                              <2> 	rdprbscheck:
  2337 0000209D 3B35[BF200000]      <2> 		cmp esi, [firstesirdpr]
  2338 000020A3 7705                <2> 		ja goodbscheck
  2339 000020A5 E9D5FCFFFF          <2> 		jmp rdprintb
  2340                              <2> 	goodbscheck:
  2341 000020AA 4E                  <2> 		dec esi
  2342 000020AB C60600              <2> 		mov byte [esi], 0
  2343 000020AE 8A1D[BE200000]      <2> 		mov bl, [modkeyrdpr]
  2344 000020B4 B008                <2> 		mov al, 8
  2345 000020B6 E929FDFFFF          <2> 		jmp bscheckequal
  2346                              <2> 		
  2347 000020BB 0000                <2> axcache dw 0
  2348 000020BD 00                  <2> endkeyrdpr db 0
  2349 000020BE 00                  <2> modkeyrdpr db 0
  2350 000020BF 00000000            <2> firstesirdpr dd 0
  2351 000020C3 00                  <2> commandedit db 0
  2352 000020C4 00                  <2> txtmask db 0
  2353 000020C5 00000000            <2> buftxtloc dd 0
  2354 000020C9 00000000            <2> endbufferrdpr dd 0
  2355 000020CD 082000              <2> backcursor db 8," ",0
  2356                              <1> intx5:
  2357                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2358 000020D0 E807000000          <2> 	call rdcharint
  2359 000020D5 E9B6E1FFFF          <2> 	jmp timerinterrupt
  2360                              <2> 	
  2361                              <2> getchar:
  2362 000020DA 30C0                <2> 	xor al, al
  2363                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2364 000020DC C605[22210000]01    <2> 		mov byte [trans], 1
  2365 000020E3 3C00                <2> 		cmp al, 0
  2366 000020E5 7507                <2> 		jne transcheck
  2367 000020E7 C605[22210000]00    <2> 		mov byte [trans], 0
  2368                              <2> 	transcheck:
  2369 000020EE E816330000          <2> 		call getkey
  2370 000020F3 8A3D[22210000]      <2> 		mov bh, [trans]
  2371 000020F9 66A1[20210000]      <2> 		mov ax, [lastkey]
  2372 000020FF 80FC1C              <2> 		cmp ah, 1Ch
  2373 00002102 7419                <2> 		je rdenter
  2374 00002104 803D[E9530000]E0    <2> 		cmp byte [specialkey], 0xE0
  2375 0000210B 7504                <2> 		jne nospecialtrans
  2376 0000210D 88C3                <2> 		mov bl, al
  2377 0000210F 30C0                <2> 		xor al, al
  2378                              <2> 	nospecialtrans:
  2379 00002111 08C7                <2> 		or bh, al
  2380 00002113 80FF00              <2> 		cmp bh, 0
  2381 00002116 74D6                <2> 		je transcheck
  2382 00002118 E902000000          <2> 		jmp rdend
  2383                              <2> 	rdenter:
  2384 0000211D B00A                <2> 		mov al, 10
  2385                              <2> 	rdend:
  2386 0000211F C3                  <2> 		ret
  2387                              <2> 		
  2388 00002120 0000                <2> lastkey db 0,0
  2389 00002122 00                  <2> trans db 0
  2390                              <1> intx6:
  2391                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2392 00002123 38FB                <2> cmp bl, bh
  2393 00002125 740A                <2> je prchar.notimer
  2394 00002127 E80B000000          <2> call prcharint
  2395 0000212C E95FE1FFFF          <2> jmp timerinterrupt
  2396                              <2> prchar.notimer:
  2397 00002131 E812000000          <2> 	call prcharq
  2398 00002136 CF                  <2> 	iret
  2399                              <2> 	
  2400                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run videobufcopy if called as is
  2401 00002137 38FB                <2> 	cmp bl, bh
  2402 00002139 740D                <2> 	je prcharq
  2403 0000213B E808000000          <2> 	call prcharq
  2404 00002140 E83C030000          <2> 	call termcopy
  2405 00002145 C3                  <2> 	ret
  2406 00002146 00                  <2> termguion db 0
  2407 00002147 00                  <2> termcopyon db 0
  2408                              <2> prcharq:
  2409 00002148 88DC                <2> 	mov ah, bl
  2410 0000214A 66A3[0C230000]      <2> 	mov [charbuf], ax
  2411 00002150 31DB                <2> 	xor ebx, ebx
  2412 00002152 668B1D[06230000]    <2> 	mov bx, [videobufpos]
  2413 00002159 BF[B4B80000]        <2> 	mov edi, videobuf
  2414 0000215E 01DF                <2> 	add edi, ebx
  2415 00002160 66A1[7F240000]      <2> 	mov ax, [removedvideo]
  2416 00002166 668907              <2> 	mov [edi], ax
  2417 00002169 66A1[0C230000]      <2> 	mov ax, [charbuf]
  2418 0000216F 31D2                <2> 	xor edx, edx
  2419 00002171 668B15[08230000]    <2> 	mov dx, [charpos]
  2420 00002178 31C9                <2> 	xor ecx, ecx
  2421 0000217A 668B0D[0A230000]    <2> 	mov cx, [charxy]
  2422 00002181 3C09                <2> 	cmp al, 9
  2423 00002183 0F8463000000        <2> 	je near prtab
  2424 00002189 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2425 0000218B 0F848B000000        <2> 	je near prcr
  2426 00002191 3C0A                <2> 	cmp al, 10
  2427 00002193 0F84B7000000        <2> 	je near prnlcr
  2428 00002199 3C08                <2> 	cmp al, 8
  2429 0000219B 0F848F000000        <2> 	je near prbs
  2430 000021A1 3CFF                <2> 	cmp al, 255		;;null character
  2431 000021A3 0F841B000000        <2> 	je near donescr
  2432 000021A9 668907              <2> 	mov [edi], ax
  2433 000021AC 81C702000000        <2> 	add edi, 2
  2434 000021B2 FEC2                <2> 	inc dl
  2435                              <2> donecrnl:
  2436 000021B4 38CA                <2> 	cmp dl, cl
  2437 000021B6 0F83B9000000        <2> 	jae near preol
  2438                              <2> doneeol:
  2439 000021BC 38EE                <2> 	cmp dh, ch
  2440 000021BE 0F83CF000000        <2> 	jae near prscr	
  2441                              <2> donescr:
  2442 000021C4 89FB                <2> 	mov ebx, edi
  2443 000021C6 668B07              <2> 	mov ax, [edi]
  2444 000021C9 66A3[7F240000]      <2> 	mov [removedvideo], ax
  2445 000021CF 81EB[B4B80000]      <2> 	sub ebx, videobuf
  2446 000021D5 66891D[06230000]    <2> 	mov [videobufpos], bx
  2447 000021DC 668915[08230000]    <2> 	mov [charpos], dx
  2448 000021E3 66A1[0C230000]      <2> 	mov ax, [charbuf]
  2449 000021E9 88E3                <2> 	mov bl, ah
  2450 000021EB C3                  <2> 	ret
  2451                              <2> 	
  2452                              <2> 	prtab:
  2453 000021EC 31DB                <2> 		xor ebx, ebx
  2454 000021EE 668B1D[04230000]    <2> 		mov bx, [linebeginpos]
  2455 000021F5 81EF[B4B80000]      <2> 		sub edi, videobuf
  2456 000021FB 29DF                <2> 		sub edi, ebx
  2457 000021FD C1EF04              <2> 		shr edi, 4
  2458 00002200 C1E704              <2> 		shl edi, 4
  2459 00002203 81C710000000        <2> 		add edi, 16
  2460 00002209 C0EA03              <2> 		shr dl, 3
  2461 0000220C C0E203              <2> 		shl dl, 3
  2462 0000220F 80C208              <2> 		add dl, 8
  2463 00002212 81C7[B4B80000]      <2> 		add edi, videobuf
  2464 00002218 01DF                <2> 		add edi, ebx
  2465 0000221A EB98                <2> 		jmp donecrnl
  2466                              <2> 	
  2467                              <2> 	prcr:
  2468 0000221C 30D2                <2> 		xor dl, dl
  2469 0000221E 31DB                <2> 		xor ebx, ebx
  2470 00002220 BF[B4B80000]        <2> 		mov edi, videobuf
  2471 00002225 668B1D[04230000]    <2> 		mov bx, [linebeginpos]
  2472 0000222C 01DF                <2> 		add edi, ebx
  2473 0000222E EB84                <2> 		jmp donecrnl
  2474                              <2> 			
  2475                              <2> 	prbs:
  2476 00002230 80FA00              <2> 		cmp dl, 0
  2477 00002233 7410                <2> 		je prbackline
  2478                              <2> 	prnobmr:
  2479 00002235 FECA                <2> 		dec dl
  2480 00002237 6631C0              <2> 		xor ax, ax
  2481 0000223A 81EF02000000        <2> 		sub edi, 2
  2482 00002240 E96FFFFFFF          <2> 		jmp donecrnl
  2483                              <2> 	prbackline:
  2484 00002245 88CA                <2> 		mov dl, cl
  2485 00002247 80FE00              <2> 		cmp dh, 0
  2486 0000224A 74E9                <2> 		je prnobmr
  2487 0000224C FECE                <2> 		dec dh
  2488 0000224E EBE5                <2> 		jmp prnobmr
  2489                              <2> 		
  2490                              <2> 	prnlcr:
  2491 00002250 FEC6                <2> 		inc dh
  2492 00002252 31DB                <2> 		xor ebx, ebx
  2493 00002254 30D2                <2> 		xor dl, dl
  2494 00002256 88CB                <2> 		mov bl, cl
  2495 00002258 66D1E3              <2> 		shl bx, 1
  2496 0000225B BF[B4B80000]        <2> 		mov edi, videobuf
  2497 00002260 66031D[04230000]    <2> 		add bx, [linebeginpos]
  2498 00002267 66891D[04230000]    <2> 		mov [linebeginpos], bx
  2499 0000226E 01DF                <2> 		add edi, ebx
  2500 00002270 E93FFFFFFF          <2> 		jmp donecrnl
  2501                              <2> 		
  2502                              <2> 	preol:
  2503 00002275 30D2                <2> 		xor dl, dl
  2504 00002277 FEC6                <2> 		inc dh
  2505 00002279 31DB                <2> 		xor ebx, ebx
  2506 0000227B 88CB                <2> 		mov bl, cl
  2507 0000227D 66D1E3              <2> 		shl bx, 1
  2508 00002280 66031D[04230000]    <2> 		add bx, [linebeginpos]
  2509 00002287 66891D[04230000]    <2> 		mov [linebeginpos], bx
  2510 0000228E E929FFFFFF          <2> 		jmp doneeol
  2511                              <2> 	prscr:
  2512 00002293 FECE                <2> 		dec dh
  2513 00002295 BF[B4B80000]        <2> 		mov edi, videobuf
  2514 0000229A 31DB                <2> 		xor ebx, ebx
  2515 0000229C 88CB                <2> 		mov bl, cl
  2516 0000229E 66D1E3              <2> 		shl bx, 1
  2517 000022A1 01FB                <2> 		add ebx, edi
  2518                              <2> 	intscrollloop:
  2519 000022A3 668B03              <2> 		mov ax, [ebx]
  2520 000022A6 668907              <2> 		mov [edi], ax
  2521 000022A9 81C702000000        <2> 		add edi, 2
  2522 000022AF 81C302000000        <2> 		add ebx, 2
  2523 000022B5 FEC9                <2> 		dec cl
  2524 000022B7 80F900              <2> 		cmp cl, 0
  2525 000022BA 75E7                <2> 		jne intscrollloop
  2526 000022BC 8A0D[0A230000]      <2> 		mov cl, [charxy]
  2527 000022C2 FECD                <2> 		dec ch
  2528 000022C4 80FD01              <2> 		cmp ch, 1
  2529 000022C7 77DA                <2> 		ja intscrollloop
  2530 000022C9 6631C0              <2> 		xor ax, ax
  2531 000022CC 81EF[B4B80000]      <2> 		sub edi, videobuf
  2532 000022D2 66893D[04230000]    <2> 		mov [linebeginpos], di
  2533 000022D9 81C7[B4B80000]      <2> 		add edi, videobuf
  2534 000022DF 89FB                <2> 		mov ebx, edi
  2535                              <2> 	intloopclear:
  2536 000022E1 668903              <2> 		mov [ebx], ax
  2537 000022E4 81C302000000        <2> 		add ebx, 2
  2538 000022EA FEC9                <2> 		dec cl
  2539 000022EC 80F900              <2> 		cmp cl, 0
  2540 000022EF 75F0                <2> 		jne intloopclear
  2541 000022F1 FECD                <2> 		dec ch
  2542 000022F3 80FD00              <2> 		cmp ch, 0
  2543 000022F6 75E9                <2> 		jne intloopclear
  2544 000022F8 668B0D[0A230000]    <2> 		mov cx, [charxy]
  2545 000022FF E9C0FEFFFF          <2> 		jmp donescr
  2546                              <2> 		
  2547 00002304 0000                <2> linebeginpos dw 0
  2548 00002306 0000                <2> videobufpos: dw 0
  2549 00002308 0000                <2> charpos db 0,0
  2550 0000230A 501E                <2> charxy db 80,30
  2551 0000230C 0000                <2> charbuf dw 0
  2552                              <1> intx7:
  2553                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2554 0000230E E815370000          <2> 	call loadfile
  2555 00002313 E978DFFFFF          <2> 	jmp timerinterrupt
  2556                              <1> intx9:
  2557                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2558 00002318 3C00                <2> 	cmp al, 0
  2559 0000231A 750A                <2> 	jne num2strb
  2560 0000231C E8E90A0000          <2> 	call showdec
  2561 00002321 E96ADFFFFF          <2> 	jmp timerinterrupt
  2562                              <2> num2strb:
  2563 00002326 E8150A0000          <2> 	call showhex
  2564 0000232B E960DFFFFF          <2> 	jmp timerinterrupt
  2565                              <1> intx10:
  2566                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2567 00002330 E8B70B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2568 00002335 E956DFFFFF          <2> 	jmp timerinterrupt
  2569                              <2> 	
  2570                              <1> %ifdef threads.included
  2571                              <1> intx11:
  2572                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2573                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2574                              <2> 			;returns the PID of the new fork in ebx
  2575                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2576 0000233A FA                  <2> 	cli
  2577 0000233B 60                  <2> 	pushad
  2578 0000233C 8925[09240000]      <2> 	mov [.espold], esp
  2579 00002342 C605[C75B0000]01    <2> 	mov byte [threadson], 1
  2580 00002349 8B1D[C85B0000]      <2> 	mov ebx, [currentthread]
  2581 0000234F C1E302              <2> 	shl ebx, 2
  2582 00002352 89A3[D0880100]      <2> 	mov [threadlist + ebx], esp
  2583 00002358 C1EB02              <2> 	shr ebx, 2
  2584 0000235B 81FB00000000        <2> 	cmp ebx, 0
  2585 00002361 750C                <2> 	jne .simplestack
  2586 00002363 BB[BE960000]        <2> 	mov ebx, stackend
  2587 00002368 29E3                <2> 	sub ebx, esp
  2588 0000236A E90B000000          <2> 	jmp .stackcalcdone
  2589                              <2> .simplestack:
  2590 0000236F C1E30A              <2> 	shl ebx, 10
  2591 00002372 81C3[D09C0100]      <2> 	add ebx, stack1
  2592 00002378 29E3                <2> 	sub ebx, esp
  2593                              <2> .stackcalcdone:
  2594 0000237A 29DC                <2> 	sub esp, ebx
  2595 0000237C 81C4[D09C0100]      <2> 	add esp, stack1
  2596 00002382 8B1D[C35B0000]      <2> 	mov ebx, [lastthread]
  2597 00002388 C1E308              <2> 	shl ebx, 8
  2598 0000238B 01DC                <2> 	add esp, ebx
  2599 0000238D 891D[0D240000]      <2> 	mov [.stackend], ebx
  2600                              <2> 
  2601 00002393 89E5                <2> 	mov ebp, esp
  2602 00002395 8B25[09240000]      <2> 	mov esp, [.espold]
  2603                              <2> 
  2604 0000239B C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2605 0000239E 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2606                              <2> 
  2607 000023A2 31DB                <2> 	xor ebx, ebx
  2608                              <2> .stackcopy:
  2609 000023A4 668B041C            <2> 	mov ax, [esp + ebx]
  2610 000023A8 6689441D00          <2> 	mov [ebp + ebx], ax
  2611 000023AD 81C302000000        <2> 	add ebx, 2
  2612 000023B3 3B1D[0D240000]      <2> 	cmp ebx, [.stackend]
  2613 000023B9 72E9                <2> 	jb .stackcopy
  2614                              <2> 
  2615 000023BB 31C0                <2> 	xor eax, eax
  2616 000023BD 668CC8              <2> 	mov ax, cs
  2617 000023C0 89C2                <2> 	mov edx, eax
  2618 000023C2 8B4C2428            <2> 	mov ecx, [esp + 40]
  2619 000023C6 81C900020000        <2> 	or ecx, 0x200
  2620                              <2> 	
  2621 000023CC 81FE00000000        <2> 	cmp esi, 0
  2622 000023D2 7504                <2> 	jne .nochangestack
  2623 000023D4 8B742420            <2> 	mov esi, [esp + 32]
  2624                              <2> .nochangestack:
  2625 000023D8 89F0                <2> 	mov eax, esi
  2626 000023DA 89EC                <2> 	mov esp, ebp
  2627                              <2> 
  2628 000023DC 89442420            <2> 	mov [esp + 32], eax
  2629 000023E0 89542424            <2> 	mov [esp + 36], edx
  2630 000023E4 894C2428            <2> 	mov [esp + 40], ecx
  2631                              <2> 
  2632 000023E8 8B1D[C35B0000]      <2> 	mov ebx, [lastthread]
  2633 000023EE 89A3[D0880100]      <2> 	mov [threadlist + ebx], esp
  2634 000023F4 81C304000000        <2> 	add ebx, 4
  2635 000023FA 891D[C35B0000]      <2> 	mov [lastthread], ebx
  2636 00002400 8B25[09240000]      <2> 	mov esp, [.espold]
  2637 00002406 61                  <2> 	popad
  2638 00002407 FB                  <2> 	sti
  2639 00002408 CF                  <2> 	iret
  2640                              <2> 
  2641 00002409 00000000            <2> .espold dd 0
  2642 0000240D 00000000            <2> .stackend dd 0
  2643                              <1> %endif
  2644                              <1> intx12:
  2645                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2646 00002411 A1[44020000]        <2> 	mov eax, [timeseconds]
  2647 00002416 8B1D[48020000]      <2> 	mov ebx, [timenanoseconds]
  2648 0000241C 89D9                <2> 	mov ecx, ebx
  2649 0000241E C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2650 00002421 E96ADEFFFF          <2> 	jmp timerinterrupt
  2651                              <2> 	
  2652                              <1> intx13:
  2653                              <1> 	%include 'source/interrupts/13_settime.asm'
  2654 00002426 A3[44020000]        <2> 	mov [timeseconds], eax
  2655 0000242B 891D[48020000]      <2> 	mov [timenanoseconds], ebx
  2656 00002431 E95ADEFFFF          <2> 	jmp timerinterrupt
  2657                              <2> 	
  2658                              <1> intx14:
  2659                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2660 00002436 BF[9EB10000]        <2> 	mov edi, buftxt
  2661                              <2> cpcmd:
  2662 0000243B 8A06                <2> 	mov al, [esi]
  2663 0000243D 8807                <2> 	mov [edi], al
  2664 0000243F 46                  <2> 	inc esi
  2665 00002440 47                  <2> 	inc edi
  2666 00002441 3C00                <2> 	cmp al, 0
  2667 00002443 75F6                <2> 	jne cpcmd
  2668 00002445 E8F9050000          <2> 	call run
  2669 0000244A CF                  <2> 	iret
  2670                              <1> intx15:
  2671                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2672 0000244B BB[9E9D0000]        <2> 	mov ebx, variables
  2673 00002450 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  2674 00002456 89F7                <2> 	mov edi, esi
  2675 00002458 31C9                <2> 	xor ecx, ecx
  2676                              <2> getcommandzeroes:
  2677 0000245A 8A07                <2> 	mov al, [edi]
  2678 0000245C 47                  <2> 	inc edi
  2679 0000245D 3C3B                <2> 	cmp al, ';'
  2680 0000245F 740B                <2> 	je nomorezeroes
  2681 00002461 3C00                <2> 	cmp al, 0
  2682 00002463 7407                <2> 	je nomorezeroes
  2683 00002465 3C20                <2> 	cmp al, ' '
  2684 00002467 75F1                <2> 	jne getcommandzeroes
  2685 00002469 41                  <2> 	inc ecx
  2686 0000246A EBEE                <2> 	jmp getcommandzeroes
  2687                              <2> nomorezeroes:
  2688 0000246C 41                  <2> 	inc ecx
  2689 0000246D 4F                  <2> 	dec edi
  2690 0000246E 8B1D[2A9D0000]      <2> 	mov ebx, [uid]
  2691 00002474 8B15[C85B0000]      <2> 	mov edx, [currentthread]
  2692 0000247A CF                  <2> 	iret
  2693                              <2> 	
  2694                              <1> 		
  2695 0000247B 00000000            <1> 	termcursorpos dd 0
  2696 0000247F 0000                <1> 	removedvideo dw 0
  2697                              <1> termcopy:	
  2698 00002481 60                  <1> 	pusha
  2699 00002482 BF[B4B80000]        <1> 	mov edi, videobuf
  2700 00002487 31DB                <1> 	xor ebx, ebx
  2701 00002489 668B1D[06230000]    <1> 	mov bx, [videobufpos]
  2702 00002490 01DF                <1> 	add edi, ebx
  2703 00002492 893D[7B240000]      <1> 	mov [termcursorpos], edi
  2704 00002498 E8CB000000          <1> 	call switchtermcursor
  2705 0000249D 803D[D8840000]00    <1> 	cmp byte [guion], 0
  2706 000024A4 0F8420000000        <1> 	je near nowincopy
  2707                              <1> %ifdef gui.included
  2708 000024AA C605[455D0000]00    <1> 	mov byte [mouseselecton], 0
  2709 000024B1 C605[47210000]01    <1> 	mov byte [termcopyon], 1
  2710 000024B8 803D[46210000]01    <1> 	cmp byte [termguion], 1
  2711 000024BF 0F8499440000        <1> 	je near windowvideocopy
  2712                              <1> %endif
  2713 000024C5 E997000000          <1> 	jmp nocopytermatall
  2714                              <1> nowincopy:
  2715 000024CA BE00000A00          <1> 	mov esi, 0xA0000
  2716 000024CF A1[31020000]        <1> 	mov eax, [basecache]
  2717 000024D4 C1E004              <1> 	shl eax, 4
  2718 000024D7 29C6                <1> 	sub esi, eax
  2719 000024D9 BF[B4B80000]        <1> 	mov edi, videobuf
  2720 000024DE 31C9                <1> 	xor ecx, ecx
  2721 000024E0 668B0D[0A230000]    <1> 	mov cx, [charxy]
  2722                              <1> nowincopy2:
  2723 000024E7 668B07              <1> 	mov ax, [edi]
  2724 000024EA 81C700500000        <1> 	add edi, (videobuf2 - videobuf)
  2725 000024F0 668B1F              <1> 	mov bx, [edi]
  2726 000024F3 668907              <1> 	mov [edi], ax
  2727 000024F6 81EF00500000        <1> 	sub edi, (videobuf2 - videobuf)
  2728 000024FC 47                  <1> 	inc edi
  2729 000024FD 6639D8              <1> 	cmp ax, bx
  2730 00002500 743E                <1> 	je nopresentwinfont
  2731 00002502 4F                  <1> 	dec edi
  2732 00002503 BB[4F730000]        <1> 	mov ebx, fonts
  2733 00002508 31C0                <1> 	xor eax, eax
  2734 0000250A 8A07                <1> 	mov al, [edi]
  2735 0000250C C1E004              <1> 	shl eax, 4
  2736 0000250F 01C3                <1> 	add ebx, eax
  2737 00002511 47                  <1> 	inc edi
  2738 00002512 8A27                <1> 	mov ah, [edi]
  2739 00002514 31D2                <1> 	xor edx, edx
  2740 00002516 8A15[0A230000]      <1> 	mov dl, [charxy]
  2741 0000251C C1C110              <1> 	rol ecx, 16
  2742 0000251F B110                <1> 	mov cl, 16
  2743                              <1> nowinfont:
  2744 00002521 8A03                <1> 	mov al, [ebx]
  2745 00002523 D0C8                <1> 	ror al, 1
  2746 00002525 80FC07              <1> 	cmp ah, 7
  2747 00002528 7602                <1> 	jbe notnotfont
  2748 0000252A F6D0                <1> 	not al
  2749                              <1> notnotfont:
  2750 0000252C 8806                <1> 	mov [esi], al
  2751 0000252E 01D6                <1> 	add esi, edx
  2752 00002530 43                  <1> 	inc ebx
  2753 00002531 FEC9                <1> 	dec cl
  2754 00002533 80F900              <1> 	cmp cl, 0
  2755 00002536 75E9                <1> 	jne nowinfont
  2756 00002538 C1E204              <1> 	shl edx, 4
  2757 0000253B 29D6                <1> 	sub esi, edx
  2758 0000253D C1C110              <1> 	rol ecx, 16
  2759                              <1> nopresentwinfont:
  2760 00002540 47                  <1> 	inc edi
  2761 00002541 46                  <1> 	inc esi
  2762 00002542 FEC9                <1> 	dec cl
  2763 00002544 80F900              <1> 	cmp cl, 0
  2764 00002547 759E                <1> 	jne nowincopy2
  2765 00002549 8A0D[0A230000]      <1> 	mov cl, [charxy]
  2766 0000254F 31D2                <1> 	xor edx, edx
  2767 00002551 88CA                <1> 	mov dl, cl
  2768 00002553 29D6                <1> 	sub esi, edx
  2769 00002555 C1E204              <1> 	shl edx, 4
  2770 00002558 01D6                <1> 	add esi, edx
  2771 0000255A FECD                <1> 	dec ch
  2772 0000255C 80FD00              <1> 	cmp ch, 0
  2773 0000255F 7586                <1> 	jne nowincopy2
  2774                              <1> nocopytermatall:
  2775 00002561 E802000000          <1> 	call switchtermcursor
  2776 00002566 61                  <1> 	popa
  2777 00002567 C3                  <1> 	ret
  2778                              <1> 	
  2779                              <1> switchtermcursor:
  2780 00002568 8B3D[7B240000]      <1> 	mov edi, [termcursorpos]
  2781 0000256E 8A4701              <1> 	mov al, [edi + 1]
  2782 00002571 8A27                <1> 	mov ah, [edi]
  2783 00002573 3C07                <1> 	cmp al, 7
  2784 00002575 7607                <1> 	jbe movlargecursorterm
  2785 00002577 B007                <1> 	mov al, 7
  2786 00002579 E902000000          <1> 	jmp movedcursorterm
  2787                              <1> movlargecursorterm:
  2788 0000257E B0F0                <1> 	mov al, 0xF0
  2789                              <1> movedcursorterm:
  2790 00002580 884701              <1> 	mov [edi + 1], al
  2791 00002583 80FC00              <1> 	cmp ah, 0
  2792 00002586 7504                <1> 	jne fixednocursorterm
  2793 00002588 B420                <1> 	mov ah, " "
  2794 0000258A 8827                <1> 	mov [edi], ah
  2795                              <1> fixednocursorterm:
  2796 0000258C C3                  <1> 	ret
  2797                                      %include "source/dosints.asm"
  2798                              <1> int20h:
  2799 0000258D 66B8004C            <1> mov ax, 0x4C00
  2800                              <1> int21h:
  2801                              <1> dostosolleros:
  2802 00002591 6650                <1> 	push ax
  2803 00002593 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2804 00002597 8ED8                <1> 	mov ds, ax
  2805 00002599 8EC0                <1> 	mov es, ax
  2806 0000259B 8EE0                <1> 	mov fs, ax
  2807 0000259D 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2808 000025A1 8EE8                <1> 	mov gs, ax
  2809 000025A3 6658                <1> 	pop ax
  2810 000025A5 9C                  <1> 	pushf
  2811 000025A6 60                  <1> 	pusha
  2812 000025A7 80FC01              <1> 	cmp ah, 1
  2813 000025AA 0F8449000000        <1> 	je near dosgchar
  2814 000025B0 80FC02              <1> 	cmp ah, 2
  2815 000025B3 0F8447000000        <1> 	je near doswchar
  2816 000025B9 80FC09              <1> 	cmp ah, 9
  2817 000025BC 0F8449000000        <1> 	je near dosprintstr
  2818 000025C2 80FC0A              <1> 	cmp ah, 0xA
  2819 000025C5 0F8456000000        <1> 	je near dosgetstr
  2820 000025CB 80FC2B              <1> 	cmp ah, 0x2B
  2821 000025CE 0F8492000000        <1> 	je near dosgetdate
  2822 000025D4 80FC2C              <1> 	cmp ah, 0x2C
  2823 000025D7 0F84AC000000        <1> 	je near dosgettime
  2824 000025DD 80FC4C              <1> 	cmp ah, 0x4C
  2825 000025E0 0F84C1000000        <1> 	je near dosexit
  2826                              <1> backtodos:
  2827 000025E6 61                  <1> 	popa
  2828 000025E7 9D                  <1> 	popf
  2829 000025E8 6650                <1> 	push ax
  2830 000025EA 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2831 000025EE 8ED8                <1> 	mov ds, ax
  2832 000025F0 8EC0                <1> 	mov es, ax
  2833 000025F2 8EE0                <1> 	mov fs, ax
  2834 000025F4 8EE8                <1> 	mov gs, ax
  2835 000025F6 6658                <1> 	pop ax
  2836 000025F8 CF                  <1> 	iret
  2837                              <1> 
  2838                              <1> dosgchar:
  2839 000025F9 E8DCFAFFFF          <1> 	call getchar
  2840 000025FE EBE6                <1> 	jmp backtodos
  2841                              <1> 	
  2842                              <1> doswchar:
  2843 00002600 88D0                <1> 	mov al, dl
  2844 00002602 B307                <1> 	mov bl, 7
  2845 00002604 E82EFBFFFF          <1> 	call prcharint
  2846 00002609 EBDB                <1> 	jmp backtodos
  2847                              <1> 	
  2848                              <1> dosprintstr:
  2849 0000260B 31F6                <1> 	xor esi, esi
  2850 0000260D 6689D6              <1> 	mov si, dx
  2851 00002610 81C600004000        <1> 	add esi, dosprogloc
  2852 00002616 B024                <1> 	mov al, "$"
  2853 00002618 B307                <1> 	mov bl, 7
  2854 0000261A E860F6FFFF          <1> 	call printint
  2855 0000261F EBC5                <1> 	jmp backtodos
  2856                              <1> 	
  2857                              <1> dosgetstr:
  2858 00002621 31F6                <1> 	xor esi, esi
  2859 00002623 6689D6              <1> 	mov si, dx
  2860 00002626 81C600004000        <1> 	add esi, dosprogloc
  2861 0000262C B900000000          <1> 	mov ecx, 0
  2862 00002631 8A0E                <1> 	mov cl, [esi]
  2863 00002633 81C603000000        <1> 	add esi, 3
  2864 00002639 89F7                <1> 	mov edi, esi
  2865 0000263B 8935[62260000]      <1> 	mov [stringstart], esi
  2866 00002641 01CF                <1> 	add edi, ecx
  2867 00002643 B00A                <1> 	mov al, 10
  2868 00002645 B307                <1> 	mov bl, 7
  2869 00002647 E816F7FFFF          <1> 	call rdprint
  2870 0000264C 89F1                <1> 	mov ecx, esi
  2871 0000264E 2B0D[62260000]      <1> 	sub ecx, [stringstart]
  2872 00002654 8B35[62260000]      <1> 	mov esi, [stringstart]
  2873 0000265A 884EFF              <1> 	mov [esi - 1], cl
  2874 0000265D 884EFE              <1> 	mov [esi - 2], cl
  2875 00002660 EB84                <1> 	jmp backtodos
  2876 00002662 00000000            <1> stringstart dd 0
  2877                              <1> 
  2878                              <1> dosgetdate:
  2879 00002666 E85F1E0000          <1> 	call time
  2880 0000266B 8A0D[92460000]      <1> 	mov cl, [RTCtimeYear]
  2881 00002671 B500                <1> 	mov ch, 0
  2882 00002673 6681C1D007          <1> 	add cx, 2000
  2883 00002678 8A35[91460000]      <1> 	mov dh, [RTCtimeMonth]
  2884 0000267E 8A15[90460000]      <1> 	mov dl, [RTCtimeDay]
  2885 00002684 E95DFFFFFF          <1> 	jmp backtodos
  2886                              <1> 
  2887                              <1> dosgettime:
  2888 00002689 E83C1E0000          <1> 	call time
  2889 0000268E 8A2D[8F460000]      <1> 	mov ch, [RTCtimeHour]
  2890 00002694 8A0D[8E460000]      <1> 	mov cl, [RTCtimeMinute]
  2891 0000269A 8A35[8D460000]      <1> 	mov dh, [RTCtimeSecond]
  2892 000026A0 B200                <1> 	mov dl, 0
  2893 000026A2 E93FFFFFFF          <1> 	jmp backtodos
  2894                              <1> 	
  2895                              <1> dosexit:
  2896 000026A7 61                  <1> 	popa
  2897 000026A8 8B25[1E9B0000]      <1> 	mov esp, [previousstack]
  2898 000026AE 31DB                <1> 	xor ebx, ebx
  2899 000026B0 88C3                <1> 	mov bl, al
  2900 000026B2 80FB00              <1> 	cmp bl, 0
  2901 000026B5 0F854BF5FFFF        <1> 	jne near exitprog.error
  2902 000026BB C3                  <1> 	ret
  2903                                      %include "source/solleros.asm"
  2904                              <1> 	;SOLLEROS.ASM
  2905                              <1> os:
  2906                              <1> setdefenv:
  2907 000026BC B02F                <1> 	mov al, '/'
  2908 000026BE A2[2A9B0000]        <1> 	mov [currentfolder], al
  2909 000026C3 B801000000          <1> 	mov eax, 1
  2910 000026C8 A3[269B0000]        <1> 	mov [currentfolderloc], eax
  2911 000026CD E80CF6FFFF          <1> 	call clear
  2912                              <1> bootfilecheck:
  2913 000026D2 803D[2E9D0000]01    <1> 	cmp byte [ranboot], 1
  2914 000026D9 0F8427000000        <1> 	je near nobootfile
  2915 000026DF C605[2E9D0000]01    <1> 	mov byte [ranboot], 1
  2916 000026E6 BF[E1720000]        <1> 	mov edi, bootfilename
  2917 000026EB BE00004000          <1> 	mov esi, 0x400000
  2918 000026F0 E833330000          <1> 	call loadfile
  2919 000026F5 81FA94010000        <1> 	cmp edx, 404
  2920 000026FB 0F8405000000        <1> 	je near nobootfile
  2921 00002701 E8910D0000          <1> 	call progbatchfound
  2922                              <1> nobootfile:	
  2923                              <1> 
  2924 00002706 BE[00000000]        <1> 	mov esi, signature
  2925                              <1> .sigcopyloop:	;this prevents an odd error
  2926 0000270B 658A06              <1> 	mov al, [gs:esi]
  2927 0000270E 8806                <1> 	mov [esi], al
  2928 00002710 46                  <1> 	inc esi
  2929 00002711 81FE[1A000000]      <1> 	cmp esi, signatureend
  2930 00002717 72F2                <1> 	jb .sigcopyloop
  2931 00002719 BE[00000000]        <1> 	mov esi, signature
  2932 0000271E E855F5FFFF          <1> 	call print
  2933 00002723 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  2934 00002729 E8DC060000          <1> 	call showdec
  2935 0000272E BE[2A730000]        <1> 	mov esi, line
  2936 00002733 E840F5FFFF          <1> 	call print
  2937 00002738 BE[06730000]        <1> 	mov esi, userask
  2938 0000273D E836F5FFFF          <1> 	call print
  2939                              <1> usercheck:
  2940 00002742 BE[9EB10000]        <1> 	mov esi, buftxt
  2941 00002747 BF[9EB50000]        <1> 	mov edi, buftxtend
  2942 0000274C B00A                <1> 	mov al, 10
  2943 0000274E E80FF6FFFF          <1> 	call rdprint
  2944 00002753 56                  <1> 	push esi
  2945 00002754 BE[10730000]        <1> 	mov esi, pwdask
  2946 00002759 E81AF5FFFF          <1> 	call print
  2947 0000275E 5E                  <1> 	pop esi
  2948 0000275F 46                  <1> 	inc esi
  2949 00002760 8935[43280000]      <1> 	mov [esipass], esi
  2950                              <1> passcheck:
  2951 00002766 E86FF9FFFF          <1> 	call getchar
  2952 0000276B 3C0A                <1> 	cmp al, 10
  2953 0000276D 0F8436000000        <1> 	je near gotpass
  2954 00002773 3C08                <1> 	cmp al, 8
  2955 00002775 0F8410000000        <1> 	je near backpass
  2956 0000277B 8806                <1> 	mov [esi], al
  2957 0000277D 46                  <1> 	inc esi
  2958 0000277E B02A                <1> 	mov al, '*'
  2959 00002780 E8B2F9FFFF          <1> 	call prcharint
  2960 00002785 EBDF                <1> 	jmp passcheck
  2961 00002787 08200800            <1> backcursor2 db 8," ",8,0
  2962                              <1> backpass:
  2963 0000278B 3B35[43280000]      <1> 	cmp esi, [esipass]
  2964 00002791 0F84CFFFFFFF        <1> 	je near passcheck
  2965 00002797 4E                  <1> 	dec esi
  2966 00002798 C60600              <1> 	mov byte [esi], 0
  2967 0000279B 56                  <1> 	push esi
  2968 0000279C BE[87270000]        <1> 	mov esi, backcursor2
  2969 000027A1 E8D2F4FFFF          <1> 	call print
  2970 000027A6 5E                  <1> 	pop esi
  2971 000027A7 EBBD                <1> 	jmp passcheck
  2972                              <1> gotpass:
  2973 000027A9 30C0                <1> 	xor al, al
  2974 000027AB 31C9                <1> 	xor ecx, ecx
  2975 000027AD 8806                <1> 	mov [esi], al
  2976 000027AF BB[2C730000]        <1> 	mov ebx, userlst
  2977                              <1> userfind:
  2978 000027B4 BE[9EB10000]        <1> 	mov esi, buftxt
  2979 000027B9 8A06                <1> 	mov al, [esi]
  2980 000027BB 3C00                <1> 	cmp al, 0
  2981 000027BD 0F84F9FEFFFF        <1> 	je near os
  2982 000027C3 891D[47280000]      <1> 	mov [usercache], ebx
  2983 000027C9 E84F030000          <1> 	call tester
  2984 000027CE 3C01                <1> 	cmp al, 1
  2985 000027D0 7416                <1> 	je pwdtest
  2986 000027D2 41                  <1> 	inc ecx
  2987                              <1> nxtuser:
  2988 000027D3 8A03                <1> 	mov al, [ebx]
  2989 000027D5 43                  <1> 	inc ebx
  2990 000027D6 3C00                <1> 	cmp al, 0
  2991 000027D8 75F9                <1> 	jne nxtuser
  2992 000027DA 81FB[4F730000]      <1> 	cmp ebx, userlstend
  2993 000027E0 0F83D6FEFFFF        <1> 	jae near os
  2994 000027E6 EBCC                <1> 	jmp userfind
  2995                              <1> pwdtest:
  2996 000027E8 46                  <1> 	inc esi
  2997 000027E9 43                  <1> 	inc ebx
  2998 000027EA E82E030000          <1> 	call tester
  2999 000027EF 3C01                <1> 	cmp al, 1
  3000 000027F1 7402                <1> 	je pwdrgt
  3001 000027F3 EBDE                <1> 	jmp nxtuser
  3002                              <1> pwdrgt:
  3003 000027F5 D1E9                <1> 	shr ecx, 1
  3004 000027F7 890D[2A9D0000]      <1> 	mov [uid], ecx
  3005 000027FD E8DCF4FFFF          <1> 	call clear
  3006 00002802 66B90002            <1> 	mov cx, 200h
  3007 00002806 BE[9EB10000]        <1> 	mov esi, buftxt
  3008 0000280B 8935[192B0000]      <1> 	mov [currentcommandloc], esi
  3009 00002811 E825000000          <1> 	call bufclr
  3010                              <1> clearolddata:
  3011 00002816 31C0                <1> 	xor eax, eax
  3012 00002818 A2[2F9D0000]        <1> 	mov [IFON], al
  3013 0000281D A2[309D0000]        <1> 	mov [IFTRUE], al
  3014 00002822 A2[989D0000]        <1> 	mov [BATCHISON], al
  3015 00002827 A3[949D0000]        <1> 	mov [BATCHPOS], eax
  3016 0000282C A2[999D0000]        <1> 	mov [LOOPON], al
  3017 00002831 A3[9A9D0000]        <1> 	mov [LOOPPOS], eax
  3018 00002836 E933000000          <1> 	jmp nwcmd
  3019                              <1> bufclr:	
  3020 0000283B 30C0                <1> 	xor al, al
  3021 0000283D 8806                <1> 	mov [esi], al
  3022 0000283F 46                  <1> 	inc esi
  3023 00002840 E2F9                <1> 	loop bufclr
  3024 00002842 C3                  <1> 	ret
  3025                              <1> 
  3026 00002843 00000000            <1> esipass dd 0
  3027 00002847 [2C730000]          <1> usercache dd userlst
  3028                              <1> 	
  3029                              <1> buftxtclear:
  3030 0000284B 30C0                <1> 	xor al, al
  3031 0000284D BE[9EB10000]        <1> 	mov esi, buftxt
  3032 00002852 81FE[9EB50000]      <1> clearbuftxt: cmp esi, buf2
  3033 00002858 730E                <1> 	jae retbufclr
  3034 0000285A 8806                <1> 	mov [esi], al
  3035 0000285C 46                  <1> 	inc esi
  3036 0000285D EBF3                <1> 	jmp clearbuftxt
  3037                              <1> 
  3038 0000285F 39DE                <1> clearitbuf: cmp esi, ebx
  3039 00002861 7305                <1> 	jae retbufclr
  3040 00002863 8806                <1> 	mov [esi], al
  3041 00002865 46                  <1> 	inc esi
  3042 00002866 EBF7                <1> 	jmp clearitbuf
  3043 00002868 C3                  <1> retbufclr: ret
  3044                              <1> 
  3045 00002869 E900000000          <1> full:	jmp nwcmd
  3046                              <1> 
  3047                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3048                              <1> nwcmd:
  3049 0000286E FB                  <1> 	sti
  3050 0000286F 31C0                <1> 	xor eax, eax
  3051 00002871 3905[3B2A0000]      <1> 	cmp [nextcommandloc], eax
  3052 00002877 7411                <1> 	je nomultiplecommand
  3053 00002879 8B35[3B2A0000]      <1> 	mov esi, [nextcommandloc]
  3054 0000287F 8935[3F2A0000]      <1> 	mov [thiscommandloc], esi
  3055 00002885 E9BE010000          <1> 	jmp fixvariables
  3056                              <1> nomultiplecommand:
  3057 0000288A A3[3F2A0000]        <1> 	mov [thiscommandloc], eax
  3058 0000288F 3805[C75B0000]      <1> 	cmp [threadson], al
  3059 00002895 7405                <1> 	je noclinwcmd
  3060 00002897 A2[C75B0000]        <1> 	mov [threadson], al
  3061                              <1> noclinwcmd:
  3062 0000289C B001                <1> 	mov al, 1
  3063 0000289E 3805[989D0000]      <1> 	cmp [BATCHISON], al
  3064 000028A4 7501                <1> 	jne cancel
  3065 000028A6 C3                  <1> 	ret
  3066 000028A7 30C0                <1> cancel:	xor al, al
  3067 000028A9 A2[2F9D0000]        <1> 	mov [IFON], al
  3068 000028AE A2[989D0000]        <1> 	mov [BATCHISON], al
  3069 000028B3 B05B                <1> 	mov al, '['
  3070 000028B5 66BB0700            <1> 	mov bx, 7
  3071 000028B9 E88AF8FFFF          <1> 	call prcharq
  3072 000028BE 8B35[47280000]      <1> 	mov esi, [usercache]
  3073 000028C4 E89DF3FFFF          <1> 	call printquiet
  3074 000028C9 BE[1A730000]        <1> 	mov esi, computer
  3075 000028CE E893F3FFFF          <1> 	call printquiet
  3076 000028D3 BE[2A9B0000]        <1> 	mov esi, currentfolder
  3077 000028D8 0335[229B0000]      <1> 	add esi, [lastfolderloc]
  3078 000028DE E883F3FFFF          <1> 	call printquiet
  3079 000028E3 BE[25730000]        <1> 	mov esi, endprompt
  3080 000028E8 E88BF3FFFF          <1> 	call print
  3081 000028ED E859FFFFFF          <1> 	call buftxtclear
  3082 000028F2 BE[9EB10000]        <1> 	mov esi, buftxt
  3083 000028F7 C605[C3200000]01    <1> 	mov byte [commandedit], 1
  3084 000028FE B00A                <1> 	mov al, 10
  3085 00002900 66BB0700            <1> 	mov bx, 7
  3086 00002904 BF[9EB50000]        <1> 	mov edi, buftxtend
  3087 00002909 E854F4FFFF          <1> 	call rdprint
  3088 0000290E C605[C3200000]00    <1> 	mov byte [commandedit], 0
  3089 00002915 803D[9EB10000]00    <1> 	cmp byte [buftxt], 0
  3090 0000291C 0F844CFFFFFF        <1> 	je near nwcmd
  3091 00002922 8B35[B8580100]      <1> gotcmd:	mov esi, [commandbufpos]
  3092 00002928 8935[B4580100]      <1> 	mov [lastcommandpos], esi
  3093 0000292E BF[9EB10000]        <1> 	mov edi, buftxt
  3094 00002933 81C6[BC580100]      <1> 	add esi, commandbuf
  3095 00002939 81FE[BC680100]      <1> 	cmp esi, commandbufend
  3096 0000293F 7605                <1> 	jbe copycommand
  3097 00002941 BE[BC580100]        <1> 	mov esi, commandbuf
  3098                              <1> copycommand:
  3099 00002946 8A07                <1> 	mov al, [edi]
  3100 00002948 8806                <1> 	mov [esi], al
  3101 0000294A 47                  <1> 	inc edi
  3102 0000294B 46                  <1> 	inc esi
  3103 0000294C 3C00                <1> 	cmp al, 0
  3104 0000294E 740F                <1> 	je donecopy
  3105 00002950 81FE[BC680100]      <1> 	cmp esi, commandbufend
  3106 00002956 76EE                <1> 	jbe copycommand
  3107 00002958 BE[BC580100]        <1> 	mov esi, commandbuf
  3108 0000295D EBE7                <1> 	jmp copycommand
  3109                              <1> donecopy:
  3110 0000295F 81EE[BC580100]      <1> 	sub esi, commandbuf
  3111 00002965 8935[B8580100]      <1> 	mov [commandbufpos], esi
  3112 0000296B E8D3000000          <1> 	call run
  3113 00002970 E9F9FEFFFF          <1> 	jmp nwcmd
  3114                              <1> 
  3115 00002975 E8D1FEFFFF          <1> input:	call buftxtclear
  3116 0000297A BE[9EB10000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3117 0000297F BF[9EB50000]        <1> 	mov edi, buftxtend
  3118 00002984 B00A                <1> stdin:	mov al, 10
  3119 00002986 B307                <1> 	mov bl, 7
  3120 00002988 E8D5F3FFFF          <1> 	call rdprint
  3121 0000298D C3                  <1> 	ret
  3122                              <1> 
  3123                              <1> replacevariable:
  3124 0000298E 8A4601              <1> 	mov al, [esi + 1]
  3125 00002991 C64601FF            <1> 	mov byte [esi + 1], 255
  3126 00002995 3C24                <1> 	cmp al, "$"
  3127 00002997 0F84AB000000        <1> 	je near fixvariables
  3128 0000299D 884601              <1> 	mov [esi + 1], al
  3129 000029A0 56                  <1> 	push esi
  3130 000029A1 81EE[9EB10000]      <1> 	sub esi, buftxt
  3131 000029A7 89F7                <1> 	mov edi, esi
  3132 000029A9 81C6[9EB10000]      <1> 	add esi, buftxt
  3133 000029AF 47                  <1> 	inc edi
  3134 000029B0 BB[9E9D0000]        <1> 	mov ebx, variables
  3135 000029B5 E8DA110000          <1> 	call nxtvrech
  3136 000029BA 89F7                <1> 	mov edi, esi
  3137 000029BC 31DB                <1> 	xor ebx, ebx
  3138 000029BE 4E                  <1> 	dec esi
  3139                              <1> findvarname:
  3140 000029BF 4E                  <1> 	dec esi
  3141 000029C0 8A06                <1> 	mov al, [esi]
  3142 000029C2 43                  <1> 	inc ebx
  3143 000029C3 3C04                <1> 	cmp al, 4
  3144 000029C5 75F8                <1> 	jne findvarname
  3145 000029C7 5E                  <1> 	pop esi
  3146                              <1> replacevarloop:
  3147 000029C8 8A07                <1> 	mov al, [edi]
  3148 000029CA 81FB00000000        <1> 	cmp ebx, 0
  3149 000029D0 0F841E000000        <1> 	je near expandbuftxt
  3150 000029D6 3C00                <1> 	cmp al, 0
  3151 000029D8 0F8407000000        <1> 	je near compressbuftxt
  3152 000029DE 8806                <1> 	mov [esi], al
  3153 000029E0 4B                  <1> 	dec ebx
  3154 000029E1 46                  <1> 	inc esi
  3155 000029E2 47                  <1> 	inc edi
  3156 000029E3 EBE3                <1> 	jmp replacevarloop
  3157                              <1> compressbuftxt:	
  3158 000029E5 8A041E              <1> 	mov al, [esi + ebx]
  3159 000029E8 8806                <1> 	mov [esi], al
  3160 000029EA 46                  <1> 	inc esi
  3161 000029EB 3C00                <1> 	cmp al, 0
  3162 000029ED 75F6                <1> 	jne compressbuftxt
  3163 000029EF E954000000          <1> 	jmp fixvariables
  3164                              <1> expandbuftxt:
  3165 000029F4 89F1                <1> 	mov ecx, esi
  3166 000029F6 8A26                <1> 	mov ah, [esi]
  3167                              <1> expandbuftxtlp:
  3168 000029F8 8A1E                <1> 	mov bl, [esi]
  3169 000029FA 46                  <1> 	inc esi
  3170 000029FB 8A3E                <1> 	mov bh, [esi]
  3171 000029FD 8826                <1> 	mov [esi], ah
  3172 000029FF 88FC                <1> 	mov ah, bh
  3173 00002A01 80FB00              <1> 	cmp bl, 0
  3174 00002A04 75F2                <1> 	jne expandbuftxtlp
  3175 00002A06 89CE                <1> 	mov esi, ecx
  3176 00002A08 8806                <1> 	mov [esi], al
  3177 00002A0A 47                  <1> 	inc edi
  3178 00002A0B 8A07                <1> 	mov al, [edi]
  3179 00002A0D 3C00                <1> 	cmp al, 0
  3180 00002A0F 0F8433000000        <1> 	je near fixvariables
  3181 00002A15 46                  <1> 	inc esi
  3182 00002A16 EBDC                <1> 	jmp expandbuftxt
  3183                              <1> multipleprogline:
  3184 00002A18 30E4                <1> 	xor ah, ah
  3185 00002A1A 8826                <1> 	mov [esi], ah
  3186 00002A1C 46                  <1> 	inc esi
  3187 00002A1D 8935[3B2A0000]      <1> 	mov [nextcommandloc], esi
  3188 00002A23 E93E000000          <1> 	jmp donefixvariables
  3189                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3190 00002A28 46                  <1> 	inc esi
  3191 00002A29 8A06                <1> 	mov al, [esi]
  3192 00002A2B C606FF              <1> 	mov byte [esi], 255
  3193 00002A2E 3C23                <1> 	cmp al, '#'
  3194 00002A30 7416                <1> 	je fixvariables
  3195 00002A32 4E                  <1> 	dec esi
  3196 00002A33 C60600              <1> 	mov byte [esi], 0
  3197 00002A36 E90D000000          <1> 	jmp fixvariables
  3198                              <1> 	
  3199 00002A3B 00000000            <1> nextcommandloc dd 0
  3200 00002A3F 00000000            <1> thiscommandloc dd 0	
  3201                              <1> run:
  3202 00002A43 BE[9EB10000]        <1> 	mov esi, buftxt
  3203                              <1> fixvariables:
  3204 00002A48 46                  <1> 	inc esi
  3205 00002A49 8A06                <1> 	mov al, [esi]
  3206 00002A4B 3C23                <1> 	cmp al, '#'	;inline comment
  3207 00002A4D 74D9                <1> 	je inlinecomment
  3208 00002A4F 3C24                <1> 	cmp al, '$' ;variable
  3209 00002A51 0F8437FFFFFF        <1> 	je near replacevariable
  3210 00002A57 3C3B                <1> 	cmp al, ';' ;program list
  3211 00002A59 74BD                <1> 	je multipleprogline
  3212 00002A5B 3C00                <1> 	cmp al, 0
  3213 00002A5D 75E9                <1> 	jne fixvariables
  3214 00002A5F 31C0                <1> 	xor eax, eax
  3215 00002A61 A3[3B2A0000]        <1> 	mov [nextcommandloc], eax
  3216                              <1> donefixvariables:
  3217 00002A66 803D[04300000]00    <1> 	cmp byte [indexdone], 0
  3218 00002A6D 7505                <1> 	jne progtest
  3219 00002A6F E8FB040000          <1> 	call indexfiles
  3220                              <1> progtest:
  3221 00002A74 31C0                <1> 	xor eax, eax
  3222 00002A76 BB[1E970000]        <1> 	mov ebx, fileindex
  3223 00002A7B 668B03              <1> prgnxt:	mov ax, [ebx]
  3224 00002A7E B1FF                <1> 	mov cl, 255
  3225 00002A80 B52C                <1> 	mov ch, 44
  3226 00002A82 6639C8              <1> 	cmp ax, cx
  3227 00002A85 740B                <1> 	je fndprg
  3228 00002A87 43                  <1> 	inc ebx
  3229 00002A88 81FB[1E9B0000]      <1> 	cmp ebx, fileindexend
  3230 00002A8E 735D                <1> 	jae prgnf
  3231 00002A90 EBE9                <1> 	jmp prgnxt
  3232 00002A92 81C302000000        <1> fndprg: add ebx, 2
  3233 00002A98 31C9                <1> 	xor ecx, ecx
  3234 00002A9A BE[9EB10000]        <1> 	mov esi, buftxt
  3235 00002A9F 390D[3F2A0000]      <1> 	cmp [thiscommandloc], ecx
  3236 00002AA5 7406                <1> 	je noprgtstmultiple
  3237 00002AA7 8B35[3F2A0000]      <1> 	mov esi, [thiscommandloc]
  3238                              <1> noprgtstmultiple:
  3239 00002AAD E8A6000000          <1> 	call cndtest
  3240 00002AB2 3C01                <1> 	cmp al, 1
  3241 00002AB4 7302                <1> 	jae prggood
  3242 00002AB6 EBC3                <1> 	jmp prgnxt
  3243 00002AB8 81FB[1E9B0000]      <1> prggood: cmp ebx, fileindexend
  3244 00002ABE 7358                <1> 	jae prgdn
  3245 00002AC0 31C0                <1> 	xor eax, eax
  3246 00002AC2 BE[9EB10000]        <1> 	mov esi, buftxt
  3247 00002AC7 3905[3F2A0000]      <1> 	cmp [thiscommandloc], eax
  3248 00002ACD 7406                <1> 	je noprggoodmul
  3249 00002ACF 8B35[3F2A0000]      <1> 	mov esi, [thiscommandloc]
  3250                              <1> noprggoodmul:
  3251 00002AD5 8935[192B0000]      <1> 	mov [currentcommandloc], esi
  3252 00002ADB 81C303000000        <1> 	add ebx, 3
  3253 00002AE1 8B3B                <1> 	mov edi, [ebx]
  3254 00002AE3 C605[C75B0000]02    <1> 	mov byte [threadson], 2
  3255 00002AEA FFD7                <1> 	call edi
  3256 00002AEC C3                  <1> 	ret
  3257                              <1> prgnf:	
  3258 00002AED 8B35[192B0000]      <1> 	mov esi, [currentcommandloc]
  3259 00002AF3 8A06                <1> 	mov al, [esi]
  3260 00002AF5 3C00                <1> 	cmp al, 0
  3261 00002AF7 741F                <1> 	je prgdn
  3262 00002AF9 BE[E9720000]        <1> 	mov esi, notfound1
  3263 00002AFE E875F1FFFF          <1> 	call print
  3264 00002B03 8B35[192B0000]      <1> 	mov esi, [currentcommandloc]
  3265 00002B09 E86AF1FFFF          <1> 	call print
  3266 00002B0E BE[F1720000]        <1> 	mov esi, notfound2
  3267 00002B13 E860F1FFFF          <1> 	call print
  3268 00002B18 C3                  <1> prgdn:	ret
  3269                              <1> 
  3270 00002B19 00000000            <1> currentcommandloc dd 0
  3271                              <1> 
  3272                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3273 00002B1D 6631C0              <1> 	xor ax, ax
  3274 00002B20 8A06                <1> retest:	mov al, [esi]
  3275 00002B22 8A23                <1> 	mov ah, [ebx]
  3276 00002B24 3C00                <1> 	cmp al, 0
  3277 00002B26 7408                <1> 	je testtrue
  3278 00002B28 38E0                <1> 	cmp al, ah
  3279 00002B2A 750C                <1> 	jne testfalse
  3280 00002B2C 43                  <1> 	inc ebx
  3281 00002B2D 46                  <1> 	inc esi
  3282 00002B2E EBF0                <1> 	jmp retest
  3283                              <1> testtrue:
  3284 00002B30 80FC00              <1> 	cmp ah, 0
  3285 00002B33 7503                <1> 	jne testfalse
  3286 00002B35 B001                <1> 	mov al, 1
  3287 00002B37 C3                  <1> 	ret
  3288                              <1> testfalse:
  3289 00002B38 30C0                <1> 	xor al, al
  3290 00002B3A C3                  <1> 	ret
  3291                              <1> 
  3292                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3293 00002B3B 30C0                <1> 	xor al, al
  3294                              <1> opretest:
  3295 00002B3D 8A06                <1> 	mov al, [esi]
  3296 00002B3F 8A23                <1> 	mov ah, [ebx]
  3297 00002B41 38E0                <1> 	cmp al, ah
  3298 00002B43 7510                <1> 	jne optestfalse
  3299 00002B45 80FC00              <1> 	cmp ah, 0
  3300 00002B48 7404                <1> 	je optesttrue
  3301 00002B4A 43                  <1> 	inc ebx
  3302 00002B4B 46                  <1> 	inc esi
  3303 00002B4C EBEF                <1> 	jmp opretest
  3304                              <1> optesttrue:
  3305 00002B4E 3C00                <1> 	cmp al, 0
  3306 00002B50 7503                <1> 	jne optestfalse
  3307 00002B52 B001                <1> 	mov al, 1
  3308 00002B54 C3                  <1> 	ret
  3309                              <1> optestfalse:
  3310 00002B55 30C0                <1> 	xor al, al
  3311 00002B57 C3                  <1> 	ret
  3312                              <1> 
  3313                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3314 00002B58 30C0                <1> 	xor al, al
  3315 00002B5A 8A06                <1> cndretest:	mov al, [esi]
  3316 00002B5C 8A23                <1> 	mov ah, [ebx]
  3317 00002B5E 38CC                <1> 	cmp ah, cl
  3318 00002B60 7408                <1> 	je cndtesttrue
  3319 00002B62 38E0                <1> 	cmp al, ah
  3320 00002B64 750B                <1> 	jne cndtestfalse
  3321 00002B66 43                  <1> 	inc ebx
  3322 00002B67 46                  <1> 	inc esi
  3323 00002B68 EBF0                <1> 	jmp cndretest
  3324                              <1> cndtesttrue:
  3325 00002B6A 38C8                <1> 	cmp al, cl
  3326 00002B6C 7506                <1> 	jne cndtestalmost
  3327 00002B6E B001                <1> 	mov al, 1
  3328 00002B70 C3                  <1> 	ret
  3329                              <1> cndtestfalse:
  3330 00002B71 30C0                <1> 	xor al, al
  3331 00002B73 C3                  <1> 	ret
  3332                              <1> cndtestalmost:
  3333 00002B74 B002                <1> 	mov al, 2
  3334 00002B76 C3                  <1> 	ret
  3335                              <1> 	
  3336                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3337                              <1> 		                ;ends if array seperator is found backwards after 0
  3338                              <1> 	arnxt:	      
  3339 00002B77 88E8                <1> 		mov al, ch
  3340 00002B79 88CC                <1> 		mov ah, cl        
  3341 00002B7B 663906              <1> 		cmp [esi], ax
  3342 00002B7E 744D                <1> 		je ardn
  3343 00002B80 66390E              <1> 		cmp [esi], cx
  3344 00002B83 7407                <1> 		je arfnd
  3345 00002B85 46                  <1> 		inc esi
  3346 00002B86 39DE                <1> 		cmp esi, ebx
  3347 00002B88 7343                <1> 		jae ardn
  3348 00002B8A EBEB                <1> 		jmp arnxt
  3349 00002B8C 81C602000000        <1> 	arfnd: add esi, 2
  3350 00002B92 891D[CE2B0000]      <1> 		mov [arbx], ebx
  3351 00002B98 890D[D22B0000]      <1> 		mov [arcx], ecx
  3352 00002B9E E8D5F0FFFF          <1> 		call print
  3353 00002BA3 8935[D42B0000]      <1> 		mov [arsi], esi
  3354 00002BA9 BE[2A730000]        <1> 		mov esi, line
  3355 00002BAE E8C5F0FFFF          <1> 		call print
  3356 00002BB3 8B1D[CE2B0000]      <1> 		mov ebx, [arbx]
  3357 00002BB9 668B0D[D22B0000]    <1> 		mov cx, [arcx]
  3358 00002BC0 8B35[D42B0000]      <1> 		mov esi, [arsi]
  3359 00002BC6 46                  <1> 		inc esi
  3360 00002BC7 39DE                <1> 		cmp esi, ebx
  3361 00002BC9 7302                <1> 		jae ardn
  3362 00002BCB EBAA                <1> 		jmp arnxt
  3363 00002BCD C3                  <1> 	ardn:	ret
  3364 00002BCE 00000000            <1> arbx:	dw 0,0
  3365 00002BD2 0000                <1> arcx:	db 0,0
  3366 00002BD4 00000000            <1> arsi:	dw 0,0
  3367                              <1> 
  3368                              <1> clearbuffer:
  3369 00002BD8 BE[9EB50000]        <1> 	mov esi, buf2
  3370 00002BDD B030                <1> 	mov al, '0'
  3371 00002BDF 81FE[B2B50000]      <1> clearbuf: cmp esi, numbuf
  3372 00002BE5 7305                <1> 	jae doneclearbuff
  3373 00002BE7 8806                <1> 	mov [esi], al
  3374 00002BE9 46                  <1> 	inc esi
  3375 00002BEA EBF3                <1> 	jmp clearbuf
  3376                              <1> doneclearbuff: 
  3377 00002BEC C3                  <1> 		ret
  3378                              <1> 
  3379                              <1> convert:
  3380 00002BED 4E                  <1> 	dec esi
  3381 00002BEE 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3382                              <1> .lp:
  3383 00002BF0 89DE                <1> 	mov esi, ebx
  3384 00002BF2 81EE09000000        <1> 	sub esi, 9
  3385 00002BF8 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3386 00002BFE 720A                <1> 	jb .8
  3387 00002C00 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3388 00002C06 FE06                <1> 	inc byte [esi]
  3389 00002C08 EBE6                <1> 	jmp .lp
  3390 00002C0A 46                  <1> .8:	inc esi
  3391 00002C0B 81F900E1F505        <1> 	cmp ecx, 100000000
  3392 00002C11 720A                <1> 	jb .7
  3393 00002C13 81E900E1F505        <1> 	sub ecx, 100000000
  3394 00002C19 FE06                <1> 	inc byte [esi]
  3395 00002C1B EBD3                <1> 	jmp .lp
  3396 00002C1D 46                  <1> .7:	inc esi
  3397 00002C1E 81F980969800        <1> 	cmp ecx, 10000000
  3398 00002C24 720A                <1> 	jb .6
  3399 00002C26 81E980969800        <1> 	sub ecx, 10000000
  3400 00002C2C FE06                <1> 	inc byte [esi]
  3401 00002C2E EBC0                <1> 	jmp .lp
  3402 00002C30 46                  <1> .6:	inc esi
  3403 00002C31 81F940420F00        <1> 	cmp ecx, 1000000
  3404 00002C37 720A                <1> 	jb .5
  3405 00002C39 81E940420F00        <1> 	sub ecx, 1000000
  3406 00002C3F FE06                <1> 	inc byte [esi]
  3407 00002C41 EBAD                <1> 	jmp .lp
  3408 00002C43 46                  <1> .5:	inc esi
  3409 00002C44 81F9A0860100        <1> 	cmp ecx, 100000
  3410 00002C4A 720A                <1> 	jb .4
  3411 00002C4C 81E9A0860100        <1> 	sub ecx, 100000
  3412 00002C52 FE06                <1> 	inc byte [esi]
  3413 00002C54 EB9A                <1> 	jmp .lp
  3414 00002C56 46                  <1> .4:	inc esi
  3415 00002C57 81F910270000        <1> 	cmp ecx, 10000
  3416 00002C5D 720A                <1> 	jb .3
  3417 00002C5F 81E910270000        <1> 	sub ecx, 10000
  3418 00002C65 FE06                <1> 	inc byte [esi]
  3419 00002C67 EB87                <1> 	jmp .lp
  3420 00002C69 46                  <1> .3:	inc esi
  3421 00002C6A 81F9E8030000        <1> 	cmp ecx, 1000
  3422 00002C70 720D                <1> 	jb .2
  3423 00002C72 81E9E8030000        <1> 	sub ecx, 1000
  3424 00002C78 FE06                <1> 	inc byte [esi]
  3425 00002C7A E971FFFFFF          <1> 	jmp .lp
  3426 00002C7F 46                  <1> .2:	inc esi
  3427 00002C80 81F964000000        <1> 	cmp ecx, 100
  3428 00002C86 720D                <1> 	jb .1
  3429 00002C88 81E964000000        <1> 	sub ecx, 100
  3430 00002C8E FE06                <1> 	inc byte [esi]
  3431 00002C90 E95BFFFFFF          <1> 	jmp .lp
  3432 00002C95 46                  <1> .1:	inc esi
  3433 00002C96 81F90A000000        <1> 	cmp ecx, 10
  3434 00002C9C 720D                <1> 	jb .0
  3435 00002C9E 81E90A000000        <1> 	sub ecx, 10
  3436 00002CA4 FE06                <1> 	inc byte [esi]
  3437 00002CA6 E945FFFFFF          <1> 	jmp .lp
  3438 00002CAB 46                  <1> .0:	inc esi
  3439 00002CAC 81F901000000        <1> 	cmp ecx, 1
  3440 00002CB2 720D                <1> 	jb .dn
  3441 00002CB4 81E901000000        <1> 	sub ecx, 1
  3442 00002CBA FE06                <1> 	inc byte [esi]
  3443 00002CBC E92FFFFFFF          <1> 	jmp .lp
  3444                              <1> .dn:
  3445 00002CC1 C3                  <1> 	ret
  3446                              <1> 
  3447                              <1> 	
  3448                              <1> 
  3449 00002CC2 00<rept>            <1> hexnumber times 8 db 0
  3450 00002CCA 202000              <1> hexnumberend db "  ",0
  3451                              <1> 
  3452                              <1> converthex:
  3453                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3454 00002CCD 56                  <1> 	push esi
  3455 00002CCE B030                <1> 	mov al, "0"
  3456 00002CD0 39FE                <1> .clearlp: cmp esi, edi
  3457 00002CD2 7305                <1> 	jae .doneclear
  3458 00002CD4 8806                <1> 	mov [esi], al
  3459 00002CD6 46                  <1> 	inc esi
  3460 00002CD7 EBF7                <1> 	jmp .clearlp
  3461                              <1> .doneclear:
  3462 00002CD9 81EE02000000        <1> 	sub esi, 2
  3463 00002CDF 89C8                <1> 	mov eax, ecx
  3464                              <1> .loop:
  3465 00002CE1 30FF                <1> 	xor bh, bh
  3466 00002CE3 88C3                <1> 	mov bl, al
  3467 00002CE5 66C1E304            <1> 	shl bx, 4
  3468 00002CE9 C0EB04              <1> 	shr bl, 4
  3469 00002CEC 86DF                <1> 	xchg bl, bh ;they are backwards
  3470 00002CEE 80C330              <1> 	add bl, 48
  3471 00002CF1 80FB39              <1> 	cmp bl, "9"
  3472 00002CF4 7609                <1> 	jbe .goodbl
  3473 00002CF6 80EB30              <1> 	sub bl, 48
  3474 00002CF9 80EB0A              <1> 	sub bl, 0xA
  3475 00002CFC 80C341              <1> 	add bl, "A"
  3476                              <1> .goodbl:
  3477 00002CFF 80C730              <1> 	add bh, 48
  3478 00002D02 80FF39              <1> 	cmp bh, "9"
  3479 00002D05 7609                <1> 	jbe .goodbh
  3480 00002D07 80EF30              <1> 	sub bh, 48
  3481 00002D0A 80EF0A              <1> 	sub bh, 0xA
  3482 00002D0D 80C741              <1> 	add bh, "A"
  3483                              <1> .goodbh:
  3484 00002D10 C1E808              <1> 	shr eax, 8
  3485 00002D13 66891E              <1> 	mov [esi], bx
  3486 00002D16 81EE02000000        <1> 	sub esi, 2
  3487 00002D1C 3B3424              <1> 	cmp esi, [esp]
  3488 00002D1F 7207                <1> 	jb .done
  3489 00002D21 3D00000000          <1> 	cmp eax, 0
  3490 00002D26 75B9                <1> 	jne .loop
  3491                              <1> .done:
  3492 00002D28 5E                  <1> 	pop esi
  3493 00002D29 C3                  <1> 	ret
  3494                              <1> 	
  3495                              <1> 	
  3496 00002D2A 00                  <1> smallhex db 0
  3497 00002D2B 01                  <1> firsthexshown db 1
  3498                              <1> showhexsmall:
  3499 00002D2C C605[2A2D0000]01    <1> 	mov byte [smallhex], 1
  3500 00002D33 E808000000          <1> 	call showhex
  3501 00002D38 C605[2A2D0000]00    <1> 	mov byte [smallhex], 0
  3502 00002D3F C3                  <1> 	ret
  3503                              <1> showhex:
  3504 00002D40 60                  <1> 	pusha
  3505 00002D41 BE[C22C0000]        <1> 	mov esi, hexnumber
  3506 00002D46 BF[CA2C0000]        <1> 	mov edi, hexnumberend
  3507 00002D4B E87DFFFFFF          <1> 	call converthex
  3508 00002D50 803D[2B2D0000]01    <1> 	cmp byte [firsthexshown], 1
  3509 00002D57 7503                <1> 	jne .show
  3510 00002D59 6631D2              <1> 	xor dx, dx
  3511                              <1> .show:
  3512 00002D5C 803D[2B2D0000]03    <1> 	cmp byte [firsthexshown], 3
  3513 00002D63 750A                <1> 	jne .nonewhexline
  3514 00002D65 BE[2A730000]        <1> 	mov esi, line
  3515 00002D6A E809EFFFFF          <1> 	call print
  3516                              <1> .nonewhexline:
  3517 00002D6F 803D[2B2D0000]04    <1> 	cmp byte [firsthexshown], 4
  3518 00002D76 7527                <1> 	jne .notab
  3519 00002D78 B1A0                <1> 	mov cl, 160
  3520 00002D7A 28D1                <1> 	sub cl, dl
  3521 00002D7C C0E905              <1> 	shr cl, 5
  3522 00002D7F C0E105              <1> 	shl cl, 5
  3523 00002D82 80F900              <1> 	cmp cl, 0
  3524 00002D85 750F                <1> 	jne .nonewline
  3525 00002D87 BE[2A730000]        <1> 	mov esi, line
  3526 00002D8C E8E7EEFFFF          <1> 	call print
  3527 00002D91 E909000000          <1> 	jmp .notab
  3528                              <1> .nonewline:
  3529 00002D96 80C20F              <1> 	add dl, 15
  3530 00002D99 C0EA04              <1> 	shr dl, 4
  3531 00002D9C C0E204              <1> 	shl dl, 4
  3532                              <1> .notab:
  3533 00002D9F BE[C22C0000]        <1> 	mov esi, hexnumber
  3534 00002DA4 803D[2A2D0000]01    <1> 	cmp byte [smallhex],1
  3535 00002DAB 7506                <1> 	jne .nosmall
  3536 00002DAD 81C606000000        <1> 	add esi, 6
  3537                              <1> .nosmall:
  3538 00002DB3 803D[2B2D0000]05    <1> 	cmp byte [firsthexshown], 5
  3539 00002DBA 750A                <1> 	jne .noquiet
  3540 00002DBC E8A5EEFFFF          <1> 	call printquiet
  3541 00002DC1 E918000000          <1> 	jmp .donequiet
  3542                              <1> .noquiet:
  3543 00002DC6 803D[2B2D0000]06    <1> 	cmp byte [firsthexshown], 6
  3544 00002DCD 750A                <1> 	jne .normal
  3545 00002DCF E886EEFFFF          <1> 	call printhighlight
  3546 00002DD4 E905000000          <1> 	jmp .donequiet
  3547                              <1> .normal:
  3548 00002DD9 E89AEEFFFF          <1> 	call print
  3549                              <1> .donequiet:
  3550 00002DDE 803D[2B2D0000]02    <1> 	cmp byte [firsthexshown], 2
  3551 00002DE5 750A                <1> 	jne .shown
  3552 00002DE7 BE[2A730000]        <1> 	mov esi, line
  3553 00002DEC E887EEFFFF          <1> 	call print
  3554                              <1> .shown:
  3555 00002DF1 C605[2B2D0000]00    <1> 	mov byte [firsthexshown], 0
  3556 00002DF8 61                  <1> 	popa
  3557 00002DF9 C3                  <1> 	ret
  3558                              <1> 
  3559                              <1> 
  3560 00002DFA 303030303030303030- <1> decnumber db "00000000000000"
  3561 00002E03 3030303030          <1>
  3562 00002E08 2000                <1> decnumberend: db " ",0
  3563                              <1> 
  3564                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3565 00002E0A 60                  <1> 	pusha
  3566 00002E0B BF[FA2D0000]        <1> 	mov edi, decnumber
  3567 00002E10 BE[082E0000]        <1> 	mov esi, decnumberend
  3568                              <1> .clear:
  3569 00002E15 C60730              <1> 	mov byte [edi], '0'
  3570 00002E18 47                  <1> 	inc edi
  3571 00002E19 39F7                <1> 	cmp edi, esi
  3572 00002E1B 72F8                <1> 	jb .clear
  3573 00002E1D BF[FA2D0000]        <1> 	mov edi, decnumber
  3574 00002E22 E8C6FDFFFF          <1> 	call convert
  3575 00002E27 803D[2B2D0000]01    <1> 	cmp byte [firsthexshown], 1
  3576 00002E2E 7503                <1> 	jne .show
  3577 00002E30 6631D2              <1> 	xor dx, dx
  3578                              <1> .show:
  3579 00002E33 803D[2B2D0000]03    <1> 	cmp byte [firsthexshown], 3
  3580 00002E3A 750A                <1> 	jne .nonewdecline
  3581 00002E3C BE[2A730000]        <1> 	mov esi, line
  3582 00002E41 E832EEFFFF          <1> 	call print
  3583                              <1> .nonewdecline:
  3584 00002E46 803D[2B2D0000]04    <1> 	cmp byte [firsthexshown], 4
  3585 00002E4D 7527                <1> 	jne .notab
  3586 00002E4F B1A0                <1> 	mov cl, 160
  3587 00002E51 28D1                <1> 	sub cl, dl
  3588 00002E53 C0E905              <1> 	shr cl, 5
  3589 00002E56 C0E105              <1> 	shl cl, 5
  3590 00002E59 80F900              <1> 	cmp cl, 0
  3591 00002E5C 750F                <1> 	jne .nonewline
  3592 00002E5E BE[2A730000]        <1> 	mov esi, line
  3593 00002E63 E810EEFFFF          <1> 	call print
  3594 00002E68 E909000000          <1> 	jmp .notab
  3595                              <1> .nonewline:
  3596 00002E6D 80C20F              <1> 	add dl, 15
  3597 00002E70 C0EA04              <1> 	shr dl, 4
  3598 00002E73 C0E204              <1> 	shl dl, 4
  3599                              <1> .notab:
  3600 00002E76 BE[FA2D0000]        <1> 	mov esi, decnumber
  3601 00002E7B 4E                  <1> 	dec esi
  3602                              <1> .sifind:
  3603 00002E7C 46                  <1> 	inc esi
  3604 00002E7D 803E30              <1> 	cmp byte [esi], '0'
  3605 00002E80 74FA                <1> 	je .sifind
  3606 00002E82 E8F1EDFFFF          <1> 	call print
  3607 00002E87 803D[2B2D0000]02    <1> 	cmp byte [firsthexshown], 2
  3608 00002E8E 750A                <1> 	jne .shown
  3609 00002E90 BE[2A730000]        <1> 	mov esi, line
  3610 00002E95 E8DEEDFFFF          <1> 	call print
  3611                              <1> .shown:
  3612 00002E9A C605[2B2D0000]00    <1> 	mov byte [firsthexshown], 0
  3613 00002EA1 61                  <1> 	popa
  3614 00002EA2 C3                  <1> 	ret
  3615                              <1> 	
  3616                              <1> cnvrthextxt:
  3617 00002EA3 31C9                <1> 	xor ecx, ecx
  3618 00002EA5 31C0                <1> 	xor eax, eax
  3619 00002EA7 31D2                <1> 	xor edx, edx
  3620 00002EA9 31DB                <1> 	xor ebx, ebx
  3621 00002EAB 4E                  <1> 	dec esi
  3622                              <1> .end:
  3623 00002EAC 46                  <1> 	inc esi
  3624 00002EAD 8A06                <1> 	mov al, [esi]
  3625 00002EAF 3C00                <1> 	cmp al, 0
  3626 00002EB1 75F9                <1> 	jne .end
  3627                              <1> .loop:
  3628 00002EB3 4E                  <1> 	dec esi
  3629 00002EB4 8A06                <1> 	mov al, [esi]
  3630 00002EB6 3C41                <1> 	cmp al, "A"
  3631 00002EB8 7328                <1> 	jae .char
  3632 00002EBA 2C30                <1> 	sub al, 48
  3633 00002EBC 3C10                <1> 	cmp al, 16
  3634 00002EBE 7721                <1> 	ja .done
  3635                              <1> .donechar:
  3636 00002EC0 81FA00000000        <1> 	cmp edx, 0
  3637 00002EC6 740E                <1> 	je .noshl
  3638 00002EC8 89D3                <1> 	mov ebx, edx
  3639                              <1> .shl:
  3640 00002ECA C1E004              <1> 	shl eax, 4
  3641 00002ECD 4B                  <1> 	dec ebx
  3642 00002ECE 81FB00000000        <1> 	cmp ebx, 0
  3643 00002ED4 75F4                <1> 	jne .shl
  3644                              <1> .noshl:
  3645 00002ED6 42                  <1> 	inc edx
  3646 00002ED7 01C1                <1> 	add ecx, eax
  3647 00002ED9 81FA08000000        <1> 	cmp edx, 8
  3648 00002EDF 72D2                <1> 	jb .loop
  3649                              <1> .done:
  3650 00002EE1 C3                  <1> 	ret
  3651                              <1> .char:
  3652 00002EE2 3C46                <1> 	cmp al, "F"
  3653 00002EE4 77FB                <1> 	ja .done
  3654 00002EE6 2C41                <1> 	sub al, "A"
  3655 00002EE8 040A                <1> 	add al, 0xA
  3656 00002EEA EBD4                <1> 	jmp .donechar
  3657                              <1> 	
  3658                              <1> 	
  3659                              <1> cnvrttxt: 
  3660 00002EEC 31C9                <1> 	xor ecx, ecx
  3661 00002EEE 31C0                <1> 	xor eax, eax
  3662 00002EF0 31D2                <1> 	xor edx, edx
  3663 00002EF2 31DB                <1> 	xor ebx, ebx
  3664 00002EF4 4E                  <1> 	dec esi
  3665                              <1> .lp:
  3666 00002EF5 46                  <1> 	inc esi
  3667 00002EF6 8A06                <1> 	mov al, [esi]
  3668 00002EF8 3C00                <1> 	cmp al, 0
  3669 00002EFA 75F9                <1> 	jne .lp
  3670 00002EFC 4E                  <1> 	dec esi
  3671 00002EFD 8A06                <1> 	mov al, [esi]
  3672 00002EFF 3C2E                <1> 	cmp al, '.'
  3673 00002F01 7503                <1> 	jne .dot
  3674 00002F03 46                  <1> 	inc esi
  3675 00002F04 EBEF                <1> 	jmp .lp
  3676                              <1> .dot:
  3677 00002F06 3C20                <1> 	cmp al, ' '
  3678 00002F08 7404                <1> 	je .zero
  3679 00002F0A 3C30                <1> 	cmp al, '0'
  3680 00002F0C 7504                <1> 	jne .txtlp
  3681                              <1> .zero: 
  3682 00002F0E 39FE                <1> 		cmp esi, edi
  3683 00002F10 7458                <1> 		je .done
  3684                              <1> .txtlp:
  3685 00002F12 31C0                <1> 	xor eax, eax
  3686 00002F14 8A06                <1> 	mov al, [esi]
  3687 00002F16 3C3D                <1> 	cmp al, '='
  3688 00002F18 7450                <1> 	je .done
  3689 00002F1A 3C30                <1> 	cmp al, 48
  3690 00002F1C 724C                <1> 	jb .done
  3691 00002F1E 3C23                <1> 	cmp al, '#'
  3692 00002F20 7448                <1> 	je .done
  3693 00002F22 39FE                <1> 	cmp esi, edi
  3694 00002F24 7244                <1> 	jb .done
  3695 00002F26 81F900000000        <1> 	cmp ecx, 0
  3696 00002F2C 7708                <1> 	ja .exp
  3697 00002F2E 2C30                <1> .noexp:	sub al, 48
  3698 00002F30 01C2                <1> 	add edx, eax
  3699 00002F32 4E                  <1> 	dec esi
  3700 00002F33 41                  <1> 	inc ecx
  3701 00002F34 EBDC                <1> 	jmp .txtlp
  3702 00002F36 81F900000000        <1> .exp:	cmp ecx, 0
  3703 00002F3C 74F0                <1> 	je .noexp
  3704 00002F3E 2C30                <1> 	sub al, 48
  3705 00002F40 51                  <1> 	push ecx
  3706 00002F41 89C3                <1> .expmul:	mov ebx, eax
  3707 00002F43 01D8                <1> 	add eax, ebx
  3708 00002F45 01D8                <1> 	add eax, ebx
  3709 00002F47 01D8                <1> 	add eax, ebx
  3710 00002F49 01D8                <1> 	add eax, ebx
  3711 00002F4B 01D8                <1> 	add eax, ebx
  3712 00002F4D 01D8                <1> 	add eax, ebx
  3713 00002F4F 01D8                <1> 	add eax, ebx
  3714 00002F51 01D8                <1> 	add eax, ebx
  3715 00002F53 01D8                <1> 	add eax, ebx
  3716 00002F55 81E901000000        <1> 	sub ecx, 1
  3717 00002F5B 81F900000000        <1> 	cmp ecx, 0
  3718 00002F61 77DE                <1> 	ja .expmul
  3719 00002F63 01C2                <1> 	add edx, eax
  3720 00002F65 59                  <1> 	pop ecx
  3721 00002F66 4E                  <1> 	dec esi
  3722 00002F67 41                  <1> 	inc ecx
  3723 00002F68 EBA8                <1> 	jmp .txtlp
  3724 00002F6A 89D1                <1> .done: mov ecx, edx
  3725 00002F6C C3                  <1> 	ret
  3726                                      %include "source/programs.asm"
  3727 00002F6D FF2C                <1> filetypes db 255,44
  3728                              <1> progstart:		;programs start here
  3729                              <1> indexfiles:
  3730 00002F6F BE[6F2F0000]        <1> 	mov esi, progstart
  3731 00002F74 BB[1E970000]        <1> 	mov ebx, fileindex
  3732 00002F79 BF[6F2F0000]        <1> 	mov edi, progstart
  3733 00002F7E 81EF02000000        <1> 	sub edi, 2
  3734                              <1> indexloop:
  3735 00002F84 668B0E              <1> 	mov cx, [esi]
  3736                              <1> 	indexloop2:
  3737 00002F87 663B0F              <1> 		cmp cx, [edi]
  3738 00002F8A 7424                <1> 		je indexloop2done
  3739 00002F8C 81EF02000000        <1> 		sub edi, 2
  3740 00002F92 81FF[6D2F0000]      <1> 		cmp edi, filetypes
  3741 00002F98 73ED                <1> 		jae indexloop2
  3742 00002F9A BF[6F2F0000]        <1> 	mov edi, progstart
  3743 00002F9F 81EF02000000        <1> 	sub edi, 2
  3744 00002FA5 46                  <1> 	inc esi
  3745 00002FA6 81FE[D4470000]      <1> 	cmp esi, batchprogend
  3746 00002FAC 734E                <1> 	jae indexloopdone
  3747 00002FAE EBD4                <1> 	jmp indexloop
  3748                              <1> indexloop2done:
  3749 00002FB0 66890B              <1> 	mov [ebx], cx
  3750 00002FB3 81C302000000        <1> 	add ebx, 2
  3751 00002FB9 81C602000000        <1> 	add esi, 2
  3752                              <1> 	nameindex:
  3753 00002FBF 8A0E                <1> 		mov cl, [esi]
  3754 00002FC1 80F900              <1> 		cmp cl, 0
  3755 00002FC4 7406                <1> 		je nameindexdone
  3756 00002FC6 880B                <1> 		mov [ebx], cl
  3757 00002FC8 46                  <1> 		inc esi
  3758 00002FC9 43                  <1> 		inc ebx
  3759 00002FCA EBF3                <1> 		jmp nameindex
  3760                              <1> 	nameindexdone:
  3761 00002FCC 43                  <1> 		inc ebx
  3762 00002FCD 66C7030000          <1> 		mov word [ebx], 0
  3763 00002FD2 81C302000000        <1> 		add ebx, 2
  3764 00002FD8 46                  <1> 		inc esi
  3765 00002FD9 8933                <1> 		mov [ebx], esi
  3766 00002FDB 81C304000000        <1> 		add ebx, 4
  3767 00002FE1 66C7030000          <1> 		mov word [ebx], 0
  3768 00002FE6 81C302000000        <1> 		add ebx, 2
  3769 00002FEC 81FB[1E9B0000]      <1> 		cmp ebx, fileindexend
  3770 00002FF2 7308                <1> 		jae indexloopdone
  3771 00002FF4 81C601000000        <1> 		add esi, 1
  3772 00002FFA EB88                <1> 		jmp indexloop
  3773 00002FFC C605[04300000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3774 00003003 C3                  <1> 		ret
  3775                              <1> 
  3776 00003004 00                  <1> indexdone db 0
  3777                              <1> %include 'source/programs/_comment.asm' ;#
  3778 00003005 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3779 00003009 C3                  <2> 	ret 
  3780                              <1> %include 'source/programs/_math.asm' ;!
  3781 0000300A FF2C2100            <2> db 255,44,"!",0
  3782                              <2> 	num:	
  3783 0000300E E8C5FBFFFF          <2> 		call clearbuffer
  3784 00003013 C605[94320000]00    <2> 		mov byte [decimal], 0
  3785 0000301A C605[95320000]00    <2> 		mov byte [decimal2], 0
  3786 00003021 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  3787 00003027 31C0                <2> 		xor eax, eax
  3788 00003029 31C9                <2> 		xor ecx, ecx
  3789 0000302B 31DB                <2> 		xor ebx, ebx
  3790 0000302D 8A06                <2> 	num2:	mov al, [esi]
  3791 0000302F 3C2B                <2> 		cmp al, '+'
  3792 00003031 741B                <2> 		je operatorfound
  3793 00003033 3C2D                <2> 		cmp al, '-'
  3794 00003035 7417                <2> 		je operatorfound
  3795 00003037 3C2A                <2> 		cmp al, '*'
  3796 00003039 7413                <2> 		je operatorfound
  3797 0000303B 3C2F                <2> 		cmp al, '/'
  3798 0000303D 740F                <2> 		je operatorfound
  3799 0000303F 3C5E                <2> 		cmp al, '^'
  3800 00003041 740B                <2> 		je operatorfound
  3801 00003043 46                  <2> 		inc esi
  3802 00003044 3C00                <2> 		cmp al, 0
  3803 00003046 0F8422F8FFFF        <2> 		je near nwcmd
  3804 0000304C EBDF                <2> 		jmp num2
  3805 0000304E 50                  <2> 	operatorfound: push eax
  3806 0000304F 30E4                <2> 		xor ah, ah
  3807 00003051 8826                <2> 		mov [esi], ah
  3808 00003053 89F7                <2> 		mov edi, esi
  3809 00003055 46                  <2> 		inc esi
  3810 00003056 8A06                <2> 		mov al, [esi]
  3811 00003058 3C25                <2> 		cmp al, '%'
  3812 0000305A 0F8462000000        <2> 		je near resultnum1
  3813                              <2> 	varnum2: 
  3814 00003060 57                  <2> 		push edi
  3815 00003061 E8A4000000          <2> 		call checkdecimal
  3816 00003066 5F                  <2> 		pop edi
  3817 00003067 E880FEFFFF          <2> 		call cnvrttxt
  3818                              <2> 	vrnm2:
  3819 0000306C 89CB                <2> 		mov ebx, ecx
  3820 0000306E 53                  <2> 		push ebx
  3821 0000306F E864FBFFFF          <2> 		call clearbuffer
  3822 00003074 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  3823 0000307A 89F7                <2> 		mov edi, esi
  3824 0000307C 46                  <2> 		inc esi
  3825 0000307D 8A06                <2> 		mov al, [esi]
  3826 0000307F 3C25                <2> 		cmp al, '%'
  3827 00003081 0F844F000000        <2> 		je near resultnum2
  3828                              <2> 	varnum4: 
  3829 00003087 57                  <2> 		push edi
  3830 00003088 E869000000          <2> 		call checkdecimal2
  3831 0000308D 5F                  <2> 		pop edi
  3832 0000308E E859FEFFFF          <2> 		call cnvrttxt
  3833                              <2> 	vrnm4:
  3834 00003093 5B                  <2> 		pop ebx
  3835 00003094 58                  <2> 		pop eax
  3836 00003095 3C2B                <2> 		cmp al, '+'
  3837 00003097 0F849B000000        <2> 		je near plusnum
  3838 0000309D 3C2D                <2> 		cmp al, '-'
  3839 0000309F 0F849F000000        <2> 		je near subnum
  3840 000030A5 3C2A                <2> 		cmp al, '*'
  3841 000030A7 0F84A3000000        <2> 		je near mulnum
  3842 000030AD 3C2F                <2> 		cmp al, '/'
  3843 000030AF 0F84B1000000        <2> 		je near divnum
  3844 000030B5 3C5E                <2> 		cmp al, '^'
  3845 000030B7 0F84CE000000        <2> 		je near expnum
  3846 000030BD E9ACF7FFFF          <2> 		jmp nwcmd
  3847                              <2> 	resultnum1:
  3848 000030C2 8A0D[96320000]      <2> 		mov cl, [decimalresult]
  3849 000030C8 880D[94320000]      <2> 		mov [decimal], cl
  3850 000030CE 8B0D[97320000]      <2> 		mov ecx, [result]
  3851 000030D4 EB96                <2> 		jmp vrnm2
  3852                              <2> 	resultnum2:
  3853 000030D6 8A0D[94320000]      <2> 		mov cl, [decimal]
  3854 000030DC 880D[95320000]      <2> 		mov [decimal2], cl
  3855 000030E2 8A0D[96320000]      <2> 		mov cl, [decimalresult]
  3856 000030E8 880D[94320000]      <2> 		mov [decimal], cl
  3857 000030EE 8B0D[97320000]      <2> 		mov ecx, [result]
  3858 000030F4 EB9D                <2> 		jmp vrnm4
  3859                              <2> 	checkdecimal2:
  3860 000030F6 8A25[94320000]      <2> 		mov ah, [decimal]
  3861 000030FC 8825[95320000]      <2> 		mov [decimal2], ah
  3862 00003102 30E4                <2> 		xor ah, ah
  3863 00003104 8825[94320000]      <2> 		mov [decimal], ah
  3864                              <2> 	checkdecimal:
  3865 0000310A 89F7                <2> 		mov edi, esi
  3866                              <2> 	chkdec1:
  3867 0000310C 8A07                <2> 		mov al, [edi]
  3868 0000310E 3C2E                <2> 		cmp al, '.'
  3869 00003110 0F840B000000        <2> 		je near fnddec
  3870 00003116 3C00                <2> 		cmp al, 0
  3871 00003118 0F8419000000        <2> 		je near nodecimal
  3872 0000311E 47                  <2> 		inc edi
  3873 0000311F EBEB                <2> 		jmp chkdec1
  3874                              <2> 	fnddec:
  3875 00003121 8A4701              <2> 		mov al, [edi + 1]
  3876 00003124 8807                <2> 		mov [edi], al
  3877 00003126 3C00                <2> 		cmp al, 0
  3878 00003128 0F8409000000        <2> 		je near nodecimal
  3879 0000312E FE05[94320000]      <2> 		inc byte [decimal]
  3880 00003134 47                  <2> 		inc edi
  3881 00003135 EBEA                <2> 		jmp fnddec
  3882                              <2> 	nodecimal:
  3883 00003137 C3                  <2> 		ret
  3884                              <2> 	plusnum:
  3885 00003138 E815010000          <2> 		call decaddfix
  3886 0000313D 01D9                <2> 		add ecx, ebx
  3887 0000313F E98A000000          <2> 		jmp retnum
  3888                              <2> 	subnum:
  3889 00003144 E809010000          <2> 		call decaddfix
  3890 00003149 29D9                <2> 		sub ecx, ebx
  3891 0000314B E97E000000          <2> 		jmp retnum
  3892                              <2> 	mulnum:
  3893 00003150 A0[95320000]        <2> 		mov al, [decimal2]
  3894 00003155 0005[94320000]      <2> 		add [decimal], al
  3895 0000315B 89C8                <2> 		mov eax, ecx
  3896 0000315D F7E3                <2> 		mul ebx
  3897 0000315F 89C1                <2> 		mov ecx, eax
  3898 00003161 E968000000          <2> 		jmp retnum
  3899                              <2> 	divnum:
  3900 00003166 E8E7000000          <2> 		call decaddfix
  3901 0000316B 30C0                <2> 		xor al, al
  3902 0000316D A2[94320000]        <2> 		mov [decimal], al
  3903 00003172 31D2                <2> 		xor edx, edx
  3904 00003174 89C8                <2> 		mov eax, ecx
  3905 00003176 81FB00000000        <2> 		cmp ebx, 0
  3906 0000317C 0F844C000000        <2> 		je near retnum
  3907 00003182 F7F3                <2> 		div ebx
  3908 00003184 89C1                <2> 		mov ecx, eax
  3909 00003186 E943000000          <2> 		jmp retnum
  3910                              <2> 	expnum:
  3911 0000318B 8A15[94320000]      <2> 		mov dl, [decimal]
  3912 00003191 8815[95320000]      <2> 		mov [decimal2], dl
  3913 00003197 31D2                <2> 		xor edx, edx
  3914 00003199 89C8                <2> 		mov eax, ecx
  3915 0000319B 89D9                <2> 		mov ecx, ebx
  3916 0000319D 89C3                <2> 		mov ebx, eax
  3917 0000319F 81F900000000        <2> 		cmp ecx, 0
  3918 000031A5 7422                <2> 		je noexpnum
  3919 000031A7 49                  <2> 		dec ecx
  3920 000031A8 81F900000000        <2> 		cmp ecx, 0
  3921 000031AE 7412                <2> 		je noexpnumlp
  3922 000031B0 F7E3                <2> 	expnumlp: mul ebx
  3923 000031B2 8A15[95320000]      <2> 		mov dl, [decimal2]
  3924 000031B8 0015[94320000]      <2> 		add [decimal], dl
  3925 000031BE 31D2                <2> 		xor edx, edx
  3926 000031C0 E2EE                <2> 		loop expnumlp
  3927                              <2> 	noexpnumlp:
  3928 000031C2 89C1                <2> 		mov ecx, eax
  3929 000031C4 E905000000          <2> 		jmp retnum
  3930                              <2> 	noexpnum:
  3931 000031C9 B901000000          <2> 		mov ecx, 1
  3932                              <2> 	retnum: 
  3933 000031CE BE[B2B50000]        <2> 		mov esi, numbuf
  3934 000031D3 890D[97320000]      <2> 		mov [result], ecx
  3935 000031D9 E80FFAFFFF          <2> 		call convert
  3936 000031DE BE[B2B50000]        <2> 		mov esi, numbuf
  3937 000031E3 8A25[94320000]      <2> 		mov ah, [decimal]
  3938 000031E9 8825[96320000]      <2> 		mov [decimalresult], ah
  3939 000031EF 80FC00              <2> 		cmp ah, 0
  3940 000031F2 0F8425000000        <2> 		je near noputdecimal
  3941                              <2> 	putdecimal:
  3942 000031F8 4E                  <2> 		dec esi
  3943 000031F9 FECC                <2> 		dec ah
  3944 000031FB 80FC00              <2> 		cmp ah, 0
  3945 000031FE 0F87F4FFFFFF        <2> 		ja near putdecimal
  3946 00003204 4E                  <2> 		dec esi
  3947 00003205 8A06                <2> 		mov al, [esi]
  3948 00003207 C6062E              <2> 		mov byte [esi], '.'
  3949                              <2> 	decputloop:
  3950 0000320A 4E                  <2> 		dec esi
  3951 0000320B 8A26                <2> 		mov ah, [esi]
  3952 0000320D 8806                <2> 		mov [esi], al
  3953 0000320F 88E0                <2> 		mov al, ah
  3954 00003211 81FE[9EB50000]      <2> 		cmp esi, buf2
  3955 00003217 0F87EDFFFFFF        <2> 		ja near decputloop
  3956                              <2> 	noputdecimal:
  3957 0000321D BE[9EB50000]        <2> 		mov esi, buf2
  3958 00003222 E809000000          <2> 		call chkadd
  3959 00003227 E942F6FFFF          <2> 		jmp nwcmd
  3960 0000322C 00000000            <2> edxnumbuf dw 0,0
  3961 00003230 8A06                <2> 	chkadd: mov al, [esi]
  3962 00003232 3C30                <2> 		cmp al, '0'
  3963 00003234 750C                <2> 		jne dnadd
  3964 00003236 46                  <2> 		inc esi
  3965 00003237 81FE[B2B50000]      <2> 		cmp esi, numbuf
  3966 0000323D 7402                <2> 		je dnaddm1
  3967 0000323F EBEF                <2> 		jmp chkadd
  3968 00003241 4E                  <2> 	dnaddm1: dec esi
  3969 00003242 E831EAFFFF          <2> 	dnadd:	call print
  3970 00003247 BE[2A730000]        <2> 		mov esi, line
  3971 0000324C E827EAFFFF          <2> 		call print
  3972 00003251 C3                  <2> 		ret
  3973                              <2> 		
  3974                              <2> 	decaddfix:
  3975 00003252 A0[95320000]        <2> 		mov al, [decimal2]
  3976 00003257 8A25[94320000]      <2> 		mov ah, [decimal]
  3977 0000325D 38E0                <2> 		cmp al, ah
  3978 0000325F 7432                <2> 		je gooddecadd
  3979 00003261 38E0                <2> 		cmp al, ah
  3980 00003263 721A                <2> 		jb lowdecadd
  3981                              <2> 	highdecadd:
  3982 00003265 FEC4                <2> 		inc ah
  3983 00003267 89CA                <2> 		mov edx, ecx
  3984 00003269 C1E103              <2> 		shl ecx, 3
  3985 0000326C 01D1                <2> 		add ecx, edx
  3986 0000326E 01D1                <2> 		add ecx, edx
  3987 00003270 38E0                <2> 		cmp al, ah
  3988 00003272 77F1                <2> 		ja highdecadd
  3989 00003274 8825[94320000]      <2> 		mov [decimal], ah
  3990 0000327A E914000000          <2> 		jmp gooddecadd
  3991                              <2> 	lowdecadd:
  3992 0000327F FEC0                <2> 		inc al
  3993 00003281 89DA                <2> 		mov edx, ebx
  3994 00003283 C1E303              <2> 		shl ebx, 3
  3995 00003286 01D3                <2> 		add ebx, edx
  3996 00003288 01D3                <2> 		add ebx, edx
  3997 0000328A 38E0                <2> 		cmp al, ah
  3998 0000328C 72F1                <2> 		jb lowdecadd
  3999 0000328E A2[94320000]        <2> 		mov [decimal], al
  4000                              <2> 	gooddecadd:
  4001 00003293 C3                  <2> 		ret
  4002                              <2> 		
  4003 00003294 00                  <2> decimal db 0
  4004 00003295 00                  <2> decimal2 db 0
  4005 00003296 00                  <2> decimalresult db 0
  4006 00003297 00000000            <2> result dd 0
  4007                              <1> %include 'source/programs/_variables.asm' ;% and $
  4008 0000329B FF2C2500            <2> db 255,44,"%",0
  4009                              <2> 	ans:
  4010 0000329F BE[9EB50000]        <2> 		mov esi, buf2
  4011 000032A4 E887FFFFFF          <2> 		call chkadd
  4012 000032A9 C3                  <2> 		ret
  4013                              <2> 		
  4014 000032AA FF2C2400            <2> db 255,44,"$",0
  4015 000032AE 8B35[192B0000]      <2> var: mov esi, [currentcommandloc]
  4016 000032B4 BB[9E9D0000]        <2> 	mov ebx, variables
  4017 000032B9 8A06                <2> lkeq:	mov al, [esi]
  4018 000032BB 3C3D                <2> 	cmp al, '='
  4019 000032BD 741B                <2> 	je eqfnd	;is there an '=' sign?
  4020 000032BF 3C00                <2> 	cmp al, 0
  4021 000032C1 7403                <2> 	je echovars
  4022 000032C3 46                  <2> 	inc esi
  4023 000032C4 EBF3                <2> 	jmp lkeq
  4024 000032C6 BE[9E9D0000]        <2> echovars: mov esi, variables
  4025 000032CB BB[9EAD0000]        <2> 	mov ebx, varend
  4026 000032D0 B105                <2> 	mov cl, 5
  4027 000032D2 B504                <2> 	mov ch, 4
  4028 000032D4 E89EF8FFFF          <2> 	call array
  4029 000032D9 C3                  <2> 	ret
  4030 000032DA 46                  <2> eqfnd:	inc esi
  4031 000032DB 8A06                <2> 	mov al, [esi]
  4032 000032DD 3C00                <2> 	cmp al, 0
  4033 000032DF 7410                <2> 	je readvar
  4034 000032E1 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  4035 000032E7 BB[9E9D0000]        <2> 	mov ebx, variables
  4036 000032EC E919000000          <2> 	jmp seek
  4037                              <2> readvar:
  4038 000032F1 B00A                <2> 	mov al, 10
  4039 000032F3 66BB0700            <2> 	mov bx, 7
  4040 000032F7 C605[C3200000]00    <2> 	mov byte [commandedit], 0
  4041 000032FE BF[9EB50000]        <2> 	mov edi, buftxtend
  4042 00003303 E85AEAFFFF          <2> 	call rdprint
  4043 00003308 EBA4                <2> 	jmp var
  4044 0000330A 668B03              <2> seek:	mov ax, [ebx]
  4045 0000330D B105                <2> 	mov cl, 5
  4046 0000330F B504                <2> 	mov ch, 4
  4047 00003311 663D0000            <2> 	cmp ax, 0
  4048 00003315 0F845B000000        <2> 	je near save
  4049 0000331B 6639C8              <2> 	cmp ax, cx
  4050 0000331E 7403                <2> 	je skfnd
  4051 00003320 43                  <2> 	inc ebx
  4052 00003321 EBE7                <2> 	jmp seek
  4053 00003323 8B35[192B0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4054 00003329 46                  <2> 	inc esi
  4055 0000332A 81C302000000        <2> 	add ebx, 2
  4056 00003330 89DF                <2> 	mov edi, ebx
  4057 00003332 B13D                <2> 	mov cl, '='
  4058 00003334 E81FF8FFFF          <2> 	call cndtest
  4059 00003339 3C01                <2> 	cmp al, 1	
  4060 0000333B 7418                <2> 	je varfnd
  4061 0000333D 89FB                <2> 	mov ebx, edi
  4062 0000333F 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  4063 00003345 668B03              <2> 	mov ax, [ebx]
  4064 00003348 663D0000            <2> 	cmp ax, 0
  4065 0000334C 0F8424000000        <2> 	je near save
  4066 00003352 43                  <2> 	inc ebx
  4067 00003353 EBB5                <2> 	jmp seek
  4068 00003355 8A03                <2> varfnd:	mov al, [ebx]
  4069 00003357 3C04                <2> 	cmp al, 4
  4070 00003359 7404                <2> 	je save2
  4071 0000335B 4B                  <2> 	dec ebx
  4072 0000335C 4E                  <2> 	dec esi
  4073 0000335D EBF6                <2> 	jmp varfnd
  4074 0000335F 4B                  <2> save2:	dec ebx
  4075 00003360 4E                  <2> 	dec esi
  4076 00003361 8A03                <2> 	mov al, [ebx]
  4077 00003363 3C05                <2> 	cmp al, 5
  4078 00003365 7402                <2> 	je remove
  4079 00003367 EBEC                <2> 	jmp varfnd
  4080 00003369 8A03                <2> remove: mov al, [ebx]
  4081 0000336B 3C00                <2> 	cmp al, 0
  4082 0000336D 749B                <2> 	je seek
  4083 0000336F 30C0                <2> 	xor al, al
  4084 00003371 8803                <2> 	mov [ebx], al
  4085 00003373 43                  <2> 	inc ebx
  4086 00003374 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4087 00003376 8B35[192B0000]      <2> save:	mov esi, [currentcommandloc]
  4088 0000337C 43                  <2> 	inc ebx
  4089 0000337D B005                <2> 	mov al, 5
  4090 0000337F B404                <2> 	mov ah, 4
  4091 00003381 668903              <2> 	mov [ebx], ax
  4092 00003384 43                  <2> 	inc ebx
  4093 00003385 43                  <2> svhere:	inc ebx
  4094 00003386 46                  <2> 	inc esi
  4095 00003387 8A06                <2> 	mov al, [esi]
  4096 00003389 3C00                <2> 	cmp al, 0
  4097 0000338B 0F844A000000        <2> 	je near svdone
  4098 00003391 3C25                <2> 	cmp al, '%'
  4099 00003393 7404                <2> 	je ans2
  4100 00003395 8803                <2> 	mov [ebx], al	
  4101 00003397 EBEC                <2> 	jmp svhere
  4102 00003399 56                  <2> ans2:	push esi
  4103 0000339A BE[9EB50000]        <2> 	mov esi, buf2
  4104 0000339F E823000000          <2> 	call ansfnd
  4105 000033A4 E803000000          <2> 	call anscp
  4106 000033A9 5E                  <2> 	pop esi
  4107 000033AA EBD9                <2> 	jmp svhere
  4108 000033AC 8A06                <2> anscp:	mov al, [esi]
  4109 000033AE 8803                <2> 	mov [ebx], al
  4110 000033B0 81FE[B2B50000]      <2> 	cmp esi, numbuf
  4111 000033B6 74CD                <2> 	je svhere
  4112 000033B8 3C00                <2> 	cmp al, 0
  4113 000033BA 74C9                <2> 	je svhere
  4114 000033BC 43                  <2> 	inc ebx
  4115 000033BD 46                  <2> 	inc esi
  4116 000033BE EBEC                <2> 	jmp anscp
  4117 000033C0 5E                  <2> ansnf:	pop esi
  4118 000033C1 8A06                <2> 	mov al, [esi]
  4119 000033C3 8803                <2> 	mov [ebx], al
  4120 000033C5 EBBE                <2> 	jmp svhere
  4121 000033C7 46                  <2> ansfnd:	inc esi
  4122 000033C8 81FE[B1B50000]      <2> 	cmp esi, numbuf - 1
  4123 000033CE 740A                <2> 	je fndans
  4124 000033D0 8A06                <2> 	mov al, [esi]
  4125 000033D2 3C00                <2> 	cmp al, 0
  4126 000033D4 74EA                <2> 	je ansnf
  4127 000033D6 3C30                <2> 	cmp al, '0'
  4128 000033D8 74ED                <2> 	je ansfnd
  4129                              <2> fndans:
  4130 000033DA C3                  <2> 	ret
  4131 000033DB 30C0                <2> svdone:	xor al, al
  4132 000033DD 8803                <2> 	mov [ebx], al
  4133 000033DF C3                  <2> 	ret
  4134                              <1> %include 'source/programs/_run.asm' ;./
  4135                              <2> 
  4136 000033E0 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4137 000033E4 FF2C2E2F00          <2> 	db 255,44,"./",0
  4138                              <2> rundiskprog:
  4139 000033E9 8B3D[192B0000]      <2> 	mov edi, [currentcommandloc]
  4140 000033EF 81C702000000        <2> 	add edi, 2
  4141 000033F5 BE00004000          <2> 	mov esi, 0x400000
  4142 000033FA E829260000          <2> 	call loadfile
  4143 000033FF 81FA94010000        <2> 	cmp edx, 404
  4144 00003405 746A                <2> 	je noprogfound
  4145 00003407 BB00004000          <2> 	mov ebx, 0x400000
  4146 0000340C A1[E0330000]        <2> 	mov eax, [elfstart]
  4147 00003411 3903                <2> 	cmp [ebx], eax
  4148 00003413 0F8437000000        <2> 	je near runelf
  4149 00003419 66813B4558          <2> 	cmp word [ebx], "EX"
  4150 0000341E 7577                <2> 	jne progbatchfound
  4151 00003420 81C302000000        <2> 	add ebx, 2
  4152 00003426 8B3D[192B0000]      <2> 	mov edi, [currentcommandloc]
  4153 0000342C 81C702000000        <2> 	add edi, 2
  4154                              <2> findspaceprog:
  4155 00003432 8A07                <2> 	mov al, [edi]
  4156 00003434 47                  <2> 	inc edi
  4157 00003435 3C20                <2> 	cmp al, " "
  4158 00003437 75F9                <2> 	jne findspaceprog
  4159                              <2> findnonspaceprog:
  4160 00003439 8A07                <2> 	mov al, [edi]
  4161 0000343B 47                  <2> 	inc edi
  4162 0000343C 3C20                <2> 	cmp al, " "
  4163 0000343E 74F9                <2> 	je findnonspaceprog
  4164 00003440 4F                  <2> 	dec edi
  4165 00003441 8925[1E9B0000]      <2> 	mov [previousstack], esp
  4166 00003447 FFD3                <2> 	call ebx
  4167 00003449 8B25[1E9B0000]      <2> 	mov esp, [previousstack]
  4168 0000344F C3                  <2> 	ret
  4169                              <2> runelf:
  4170 00003450 8B3D[192B0000]      <2> 	mov edi, [currentcommandloc]
  4171 00003456 81C702000000        <2> 	add edi, 2
  4172 0000345C 81C380000000        <2> 	add ebx, 0x80
  4173 00003462 8925[1E9B0000]      <2> 	mov [previousstack], esp
  4174 00003468 FFD3                <2> 	call ebx
  4175 0000346A 8B25[1E9B0000]      <2> 	mov esp, [previousstack]
  4176 00003470 C3                  <2> 	ret
  4177                              <2> noprogfound:
  4178 00003471 BE[E9720000]        <2> 	mov esi, notfound1
  4179 00003476 E8FDE7FFFF          <2> 	call print
  4180 0000347B 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  4181 00003481 81C602000000        <2> 	add esi, 2
  4182 00003487 E8ECE7FFFF          <2> 	call print
  4183 0000348C BE[F1720000]        <2> 	mov esi, notfound2
  4184 00003491 E8E2E7FFFF          <2> 	call print
  4185 00003496 C3                  <2> 	ret
  4186                              <2> progbatchfound:
  4187 00003497 BF00004000          <2> 		mov edi, 0x400000
  4188 0000349C C605[989D0000]01    <2> 		mov byte [BATCHISON], 1
  4189                              <2> 	batchrunloop:
  4190 000034A3 E8A3F3FFFF          <2> 		call buftxtclear
  4191 000034A8 BE[9EB10000]        <2> 		mov esi, buftxt
  4192 000034AD 8935[192B0000]      <2> 		mov [currentcommandloc], esi
  4193                              <2> 	batchrunloop2:
  4194 000034B3 B10A                <2> 		mov cl, 10
  4195 000034B5 B50D                <2> 		mov ch, 13
  4196 000034B7 380F                <2> 		cmp [edi], cl
  4197 000034B9 0F8419000000        <2> 		je near nxtbatchrunline
  4198 000034BF 382F                <2> 		cmp [edi], ch
  4199 000034C1 0F8411000000        <2> 		je near nxtbatchrunline
  4200 000034C7 803F00              <2> 		cmp byte [edi], 0
  4201 000034CA 0F8408000000        <2> 		je near nxtbatchrunline
  4202 000034D0 8A07                <2> 		mov al, [edi]
  4203 000034D2 8806                <2> 		mov [esi], al
  4204 000034D4 46                  <2> 		inc esi
  4205 000034D5 47                  <2> 		inc edi
  4206 000034D6 EBDB                <2> 		jmp batchrunloop2
  4207                              <2> 	nxtbatchrunline:
  4208 000034D8 47                  <2> 		inc edi
  4209 000034D9 380F                <2> 		cmp [edi], cl
  4210 000034DB 74FB                <2> 		je nxtbatchrunline
  4211 000034DD 382F                <2> 		cmp [edi], ch
  4212 000034DF 74F7                <2> 		je nxtbatchrunline
  4213 000034E1 893D[3F350000]      <2> 		mov [batchedi], edi
  4214 000034E7 893D[949D0000]      <2> 		mov [BATCHPOS], edi
  4215 000034ED C60600              <2> 		mov byte [esi], 0
  4216 000034F0 BE[9EB10000]        <2> 		mov esi, buftxt
  4217 000034F5 803E00              <2> 		cmp byte [esi], 0
  4218 000034F8 0F8439000000        <2> 		je near nobatchfoundrun
  4219 000034FE 31DB                <2> 		xor ebx, ebx
  4220 00003500 8A1D[2F9D0000]      <2> 		mov bl, [IFON]
  4221 00003506 80FB00              <2> 		cmp bl, 0
  4222 00003509 0F8534000000        <2> 		jne near iftestbatch
  4223                              <2> 	doneiftest:
  4224 0000350F 803D[15360000]00    <2> 		cmp byte [runnextline], 0
  4225 00003516 0F8405000000        <2> 		je near noruniftest
  4226 0000351C E822F5FFFF          <2> 		call run
  4227                              <2> 	noruniftest:
  4228 00003521 C605[15360000]01    <2> 		mov byte [runnextline], 1
  4229 00003528 8B3D[3F350000]      <2> 		mov edi, [batchedi]
  4230 0000352E 803F00              <2> 		cmp byte [edi], 0
  4231 00003531 0F856CFFFFFF        <2> 		jne near batchrunloop
  4232                              <2> 	nobatchfoundrun:
  4233 00003537 C605[989D0000]00    <2> 		mov byte [BATCHISON], 0
  4234 0000353E C3                  <2> 		ret
  4235                              <2> 	
  4236 0000353F 00000000            <2> batchedi dd 0	
  4237                              <2> 	
  4238                              <2> 	iftestbatch:
  4239 00003543 BE[309D0000]        <2> 		mov esi, IFTRUE
  4240 00003548 01DE                <2> 		add esi, ebx
  4241 0000354A 803E00              <2> 		cmp byte [esi], 0
  4242 0000354D 0F85BCFFFFFF        <2> 		jne near doneiftest
  4243 00003553 881D[16360000]      <2> 		mov [iffalsebuf], bl
  4244 00003559 803D[999D0000]01    <2> 		cmp byte [LOOPON], 1
  4245 00003560 0F8513000000        <2> 		jne near fifindbatch
  4246 00003566 E938FFFFFF          <2> 		jmp batchrunloop
  4247                              <2> 	elsetestbatch:
  4248 0000356B C60601              <2> 		mov byte [esi], 1
  4249 0000356E 81C705000000        <2> 		add edi, 5
  4250 00003574 E92AFFFFFF          <2> 		jmp batchrunloop
  4251                              <2> 	fifindbatch:
  4252 00003579 66B96966            <2> 		mov cx, "if"
  4253 0000357D 66B86669            <2> 		mov ax, "fi"
  4254 00003581 663907              <2> 		cmp [edi], ax
  4255 00003584 0F8424000000        <2> 		je near fifoundbatch
  4256 0000358A 66390F              <2> 		cmp [edi], cx
  4257 0000358D 0F8465000000        <2> 		je near iffoundbatch
  4258 00003593 803F00              <2> 		cmp byte [edi], 0
  4259 00003596 0F8412000000        <2> 		je near fifoundbatch
  4260 0000359C B8656C7365          <2> 		mov eax, "else"
  4261 000035A1 3907                <2> 		cmp [edi], eax
  4262 000035A3 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4263 000035A9 E973FFFFFF          <2> 		jmp noruniftest
  4264                              <2> 	fifoundbatch:
  4265 000035AE 81C702000000        <2> 		add edi, 2
  4266 000035B4 B00A                <2> 		mov al, 10
  4267 000035B6 3807                <2> 		cmp [edi], al
  4268 000035B8 0F840B000000        <2> 		je near goodfibatch
  4269 000035BE 803F00              <2> 		cmp byte [edi], 0
  4270 000035C1 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4271 000035C7 EBB0                <2> 		jmp fifindbatch
  4272                              <2> 	goodfibatch:
  4273 000035C9 B001                <2> 		mov al, 1
  4274 000035CB 2805[2F9D0000]      <2> 		sub [IFON], al 
  4275 000035D1 A0[2F9D0000]        <2> 		mov al, [IFON]
  4276 000035D6 8A1D[16360000]      <2> 		mov bl, [iffalsebuf]
  4277 000035DC 38D8                <2> 		cmp al, bl
  4278 000035DE 7799                <2> 		ja fifindbatch
  4279 000035E0 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  4280 000035E6 81EF02000000        <2> 		sub edi, 2
  4281 000035EC C605[15360000]00    <2> 		mov byte [runnextline], 0
  4282 000035F3 E9ABFEFFFF          <2> 		jmp batchrunloop
  4283                              <2> 	iffoundbatch:
  4284 000035F8 B020                <2> 		mov al, ' '
  4285 000035FA 81C702000000        <2> 		add edi, 2
  4286 00003600 3807                <2> 		cmp [edi], al
  4287 00003602 0F8571FFFFFF        <2> 		jne near fifindbatch
  4288 00003608 B001                <2> 		mov al, 1
  4289 0000360A 0005[2F9D0000]      <2> 		add [IFON], al
  4290 00003610 E964FFFFFF          <2> 		jmp fifindbatch
  4291                              <2> 		
  4292                              <2> 		
  4293 00003615 01                  <2> runnextline db 1
  4294 00003616 00                  <2> iffalsebuf db 0
  4295                              <2> 
  4296 00003617 C3                  <2> notbatch: ret 
  4297                              <1> 
  4298                              <1> %ifdef rtl8139.included
  4299                              <1> 	%include 'source/programs/arp.asm'
  4300 00003618 FF2C61727000        <2> db 255,44,"arp",0	;if only this worked
  4301 0000361E E828000000          <2> 	call arptest
  4302 00003623 C3                  <2> 	ret
  4303                              <2> 	;ARP TESTING
  4304                              <2> arpinit:
  4305 00003624 BE[DB360000]        <2> 	mov esi, arptable
  4306 00003629 BF[E3530000]        <2> 	mov edi, sysmac
  4307 0000362E BB[DF530000]        <2> 	mov ebx, sysip
  4308 00003633 8B0F                <2> 	mov ecx, [edi]
  4309 00003635 890E                <2> 	mov [esi], ecx
  4310 00003637 668B4F04            <2> 	mov cx, [edi + 4]
  4311 0000363B 894E04              <2> 	mov [esi + 4], ecx
  4312 0000363E 8B0B                <2> 	mov ecx, [ebx]
  4313 00003640 894E06              <2> 	mov [esi + 6], ecx
  4314 00003643 C605[DA360000]01    <2> 	mov byte [arpconfig], 1
  4315 0000364A C3                  <2> 	ret
  4316                              <2> arptest:
  4317 0000364B 803D[DA360000]01    <2> 	cmp byte [arpconfig], 1
  4318 00003652 7405                <2> 	je arptest2
  4319 00003654 E8CBFFFFFF          <2> 	call arpinit
  4320                              <2> arptest2:	;try to reach 192.168.0.1
  4321 00003659 8B0D[E3530000]      <2> 	mov ecx, [sysmac]
  4322 0000365F 668B1D[E7530000]    <2> 	mov bx, [sysmac + 4]
  4323 00003666 890D[A0360000]      <2> 	mov [sourcemac], ecx
  4324 0000366C 66891D[A4360000]    <2> 	mov [sourcemac + 4],bx
  4325 00003673 890D[B0360000]      <2> 	mov [arpsenderinfo], ecx
  4326 00003679 66891D[B4360000]    <2> 	mov [arpsenderinfo + 4], bx
  4327 00003680 BF[9A360000]        <2> 	mov edi, frame
  4328 00003685 BE[DA360000]        <2> 	mov esi, framend
  4329 0000368A E86E1C0000          <2> 	call rtl8139.sendpacket
  4330 0000368F BE[2A730000]        <2> 	mov esi, line
  4331 00003694 E8DFE5FFFF          <2> 	call print
  4332 00003699 C3                  <2> 	ret
  4333                              <2> 	
  4334                              <2> ;example frame
  4335                              <2> frame:
  4336 0000369A FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4337 000036A0 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4338 000036A6 0608                <2> ethertype:		dw 0x0806			;;arp
  4339                              <2> 	;;example packet
  4340 000036A8 0100                <2> 	arppacket: 		dw 1				;;ethernet is 1
  4341 000036AA 0008                <2> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  4342 000036AC 0604                <2> 					db 6,4				;;length of mac, length of ip
  4343 000036AE 0100                <2> 	arpoperation: 	dw 1				;;one for arp request
  4344 000036B0 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  4345 000036B6 C0A80005            <2> 					db 192,168,0,5			;;ip
  4346 000036BA 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  4347 000036C0 C0A80001            <2> 					db 192,168,0,1			;;ip
  4348 000036C4 00<rept>            <2> padding:		times (64-($-frame)) db 0
  4349                              <2> framend:
  4350                              <2> 
  4351 000036DA 00                  <2> arpconfig db 0
  4352                              <2> arptable:	;;mac,ip
  4353 000036DB 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4354 000036E4 00<rept>            <2>
  4355                              <2> arptableend:	
  4356                              <1> %endif
  4357                              <1> 
  4358                              <1> %include 'source/programs/batch.asm'
  4359 0000373F FF2C626174636800    <2> db 255,44,"batch",0
  4360                              <2> 	batchst: 
  4361 00003747 8B3D[192B0000]      <2> 		mov edi, [currentcommandloc]
  4362 0000374D 81C706000000        <2> 		add edi, 6
  4363 00003753 803F00              <2> 		cmp byte [edi], 0
  4364 00003756 0F846D000000        <2> 		je near nonamefound
  4365 0000375C BE00004000          <2> 		mov esi, 0x400000
  4366 00003761 E8C2220000          <2> 		call loadfile
  4367 00003766 89D0                <2> 		mov eax, edx
  4368 00003768 3D94010000          <2> 		cmp eax, 404
  4369 0000376D 7465                <2> 		je goodbatchname
  4370 0000376F BE[7A370000]        <2> 		mov esi, badbatchname
  4371 00003774 E8FFE4FFFF          <2> 		call print
  4372 00003779 C3                  <2> 		ret
  4373 0000377A 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4374 00003783 20616C726561647920- <2>
  4375 0000378C 657869737473210A00  <2>
  4376 00003795 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4377 0000379E 746F20747970652061- <2>
  4378 000037A7 206E616D6520616674- <2>
  4379 000037B0 65722074686520636F- <2>
  4380 000037B9 6D6D616E642E0A00    <2>
  4381 000037C1 00000000            <2> 		esicache3 dd 0
  4382 000037C5 00000000            <2> 		esicache2 dd 0
  4383                              <2> 	nonamefound:
  4384 000037C9 BE[95370000]        <2> 		mov esi, namenotfoundbatch
  4385 000037CE E8A5E4FFFF          <2> 		call print
  4386 000037D3 C3                  <2> 		ret
  4387                              <2> 	goodbatchname:
  4388 000037D4 BE00004000          <2> 		mov esi, 0x400000
  4389                              <2> 	batchcreate:
  4390 000037D9 8935[C1370000]      <2> 		mov [esicache3], esi
  4391 000037DF BF00008000          <2> 		mov edi, 0x800000
  4392 000037E4 B00A                <2> 		mov al, 10
  4393 000037E6 B307                <2> 		mov bl, 7
  4394 000037E8 B404                <2> 		mov ah, 4
  4395 000037EA CD30                <2> 		int 30h
  4396 000037EC 8935[C5370000]      <2> 		mov [esicache2], esi
  4397 000037F2 8A0E                <2> 		mov cl, [esi]
  4398 000037F4 8B35[C1370000]      <2> 		mov esi, [esicache3]
  4399 000037FA BB[2E380000]        <2> 		mov ebx, exitword
  4400 000037FF E854F3FFFF          <2> 		call cndtest
  4401 00003804 3C01                <2> 		cmp al, 1
  4402 00003806 7411                <2> 		je endbatchcreate
  4403 00003808 3C02                <2> 		cmp al, 2
  4404 0000380A 740D                <2> 		je endbatchcreate
  4405 0000380C 8B35[C5370000]      <2> 		mov esi, [esicache2]
  4406 00003812 B00A                <2> 		mov al, 10
  4407 00003814 8806                <2> 		mov [esi], al
  4408 00003816 46                  <2> 		inc esi
  4409 00003817 EBC0                <2> 		jmp batchcreate
  4410                              <2> 	endbatchcreate:
  4411 00003819 8B35[C1370000]      <2> 		mov esi, [esicache3]
  4412 0000381F 31C0                <2> 		xor eax, eax
  4413 00003821 8806                <2> 		mov [esi], al
  4414 00003823 BE00004000          <2> 		mov esi, 0x400000
  4415 00003828 E84BE4FFFF          <2> 		call print
  4416 0000382D C3                  <2> 		ret
  4417                              <2> 	
  4418 0000382E 5C7800              <2> 	exitword db "\x",0
  4419 00003831 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4420 0000383A 6F20657869742E0A00  <2>
  4421                              <1> %include 'source/programs/beep.asm'
  4422 00003843 FF2C6265657000      <2> 	db 255,44,"beep",0
  4423 0000384A B8[6F380000]        <2> 	mov eax, beepstart
  4424 0000384F A3[53020000]        <2> 	mov [soundpos], eax
  4425 00003854 B8[73380000]        <2> 	mov eax, beepend
  4426 00003859 A3[57020000]        <2> 	mov [soundendpos], eax
  4427 0000385E C605[50020000]01    <2> 	mov byte [soundon], 1
  4428                              <2> waitforsoundendbeep:
  4429 00003865 A0[50020000]        <2> 	mov al, [soundon]
  4430 0000386A 3C00                <2> 	cmp al, 0
  4431 0000386C 75F7                <2> 	jne waitforsoundendbeep
  4432 0000386E C3                  <2> 	ret
  4433                              <2> 	
  4434                              <2> beepstart:
  4435 0000386F 3200D111            <2> 	dw 50, 4561
  4436                              <2> beepend:
  4437                              <1> %include 'source/programs/cd.asm'
  4438 00003873 FF2C636400          <2> db 255,44,"cd",0
  4439                              <2> cd:
  4440 00003878 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  4441 0000387E 81C603000000        <2> 	add esi, 3
  4442 00003884 8B3D[269B0000]      <2> 	mov edi, [currentfolderloc]
  4443 0000388A 893D[229B0000]      <2> 	mov [lastfolderloc], edi
  4444 00003890 81C7[2A9B0000]      <2> 	add edi, currentfolder
  4445                              <2> 	;cmp word [esi], ".."
  4446                              <2> 	;je .moveup
  4447                              <2> .movedown:
  4448 00003896 8A06                <2> 	mov al, [esi]
  4449 00003898 8807                <2> 	mov [edi], al
  4450 0000389A 47                  <2> 	inc edi
  4451 0000389B 46                  <2> 	inc esi
  4452 0000389C 3C00                <2> 	cmp al, 0
  4453 0000389E 740A                <2> 	je .donecd
  4454 000038A0 81FF[2A9D0000]      <2> 	cmp edi, currentfolderend
  4455 000038A6 72EE                <2> 	jb .movedown
  4456 000038A8 30C0                <2> 	xor al, al
  4457                              <2> .donecd:
  4458 000038AA 4F                  <2> 	dec edi
  4459 000038AB C6072F              <2> 	mov byte [edi], '/'
  4460 000038AE 47                  <2> 	inc edi
  4461 000038AF 81EF[2A9B0000]      <2> 	sub edi, currentfolder
  4462 000038B5 893D[269B0000]      <2> 	mov [currentfolderloc], edi
  4463 000038BB C3                  <2> 	ret
  4464                              <2> ;.moveup:
  4465                              <2> ;	ret
  4466                              <1> %include 'source/programs/charmap.asm'
  4467 000038BC FF2C636861727300    <2> db 255,44,"chars",0
  4468 000038C4 66BB0700            <2> 	mov bx, 7
  4469 000038C8 B020                <2> 	mov al, " "
  4470 000038CA E879E8FFFF          <2> 	call prcharq
  4471 000038CF E874E8FFFF          <2> 	call prcharq
  4472 000038D4 E86FE8FFFF          <2> 	call prcharq
  4473 000038D9 E86AE8FFFF          <2> 	call prcharq
  4474 000038DE B030                <2> 	mov al, "0"
  4475                              <2> charmapnumprnt:
  4476 000038E0 E863E8FFFF          <2> 	call prcharq
  4477 000038E5 FEC0                <2> 	inc al
  4478 000038E7 6650                <2> 	push ax
  4479 000038E9 B020                <2> 	mov al, " "
  4480 000038EB E858E8FFFF          <2> 	call prcharq
  4481 000038F0 6658                <2> 	pop ax
  4482 000038F2 3C39                <2> 	cmp al, "9"
  4483 000038F4 76EA                <2> 	jbe charmapnumprnt
  4484 000038F6 B041                <2> 	mov al, "A"
  4485                              <2> charmapnumprnt2:
  4486 000038F8 E84BE8FFFF          <2> 	call prcharq
  4487 000038FD FEC0                <2> 	inc al
  4488 000038FF 6650                <2> 	push ax
  4489 00003901 B020                <2> 	mov al, " "
  4490 00003903 E840E8FFFF          <2> 	call prcharq
  4491 00003908 6658                <2> 	pop ax
  4492 0000390A 3C47                <2> 	cmp al, "G"
  4493 0000390C 72EA                <2> 	jb charmapnumprnt2
  4494                              <2> 	
  4495 0000390E BE[2A730000]        <2> 	mov esi, line
  4496 00003913 E84EE3FFFF          <2> 	call printquiet
  4497 00003918 6631C0              <2> 	xor ax, ax
  4498 0000391B 88C1                <2> 	mov cl, al
  4499 0000391D E80AF4FFFF          <2> 	call showhexsmall
  4500 00003922 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4501                              <2> charmapcopy:
  4502 00003927 FEC0                <2> 	inc al
  4503 00003929 6650                <2> 	push ax
  4504 0000392B 3C08                <2> 	cmp al, 8
  4505 0000392D 744D                <2> 	je charmapnocopy
  4506 0000392F 3C09                <2> 	cmp al, 9
  4507 00003931 7449                <2> 	je charmapnocopy
  4508 00003933 3C0A                <2> 	cmp al, 10
  4509 00003935 7445                <2> 	je charmapnocopy
  4510 00003937 3C0D                <2> 	cmp al, 13
  4511 00003939 7441                <2> 	je charmapnocopy
  4512 0000393B 3CFF                <2> 	cmp al, 255
  4513 0000393D 743D                <2> 	je charmapnocopy
  4514 0000393F 3C00                <2> 	cmp al, 0
  4515 00003941 7434                <2> 	je nomorecharmap
  4516 00003943 E800E8FFFF          <2> 	call prcharq
  4517 00003948 B020                <2> 	mov al, " "
  4518 0000394A E8F9E7FFFF          <2> 	call prcharq
  4519 0000394F 6658                <2> 	pop ax
  4520                              <2> charmapcopycheck:
  4521 00003951 FEC4                <2> 	inc ah
  4522 00003953 80FC10              <2> 	cmp ah, 16
  4523 00003956 72CF                <2> 	jb charmapcopy
  4524 00003958 6650                <2> 	push ax
  4525 0000395A BE[2A730000]        <2> 	mov esi, line
  4526 0000395F E802E3FFFF          <2> 	call printquiet
  4527 00003964 6658                <2> 	pop ax
  4528 00003966 3CFF                <2> 	cmp al, 255
  4529 00003968 740D                <2> 	je nomorecharmap
  4530 0000396A 88C1                <2> 	mov cl, al
  4531 0000396C FEC1                <2> 	inc cl
  4532 0000396E E8B9F3FFFF          <2> 	call showhexsmall
  4533 00003973 30E4                <2> 	xor ah, ah
  4534 00003975 EBB0                <2> 	jmp charmapcopy
  4535                              <2> nomorecharmap:
  4536 00003977 E9F2EEFFFF          <2> 	jmp nwcmd
  4537                              <2> charmapnocopy:
  4538 0000397C 6650                <2> 	push ax
  4539 0000397E B020                <2> 	mov al, " "
  4540 00003980 E8C3E7FFFF          <2> 	call prcharq
  4541 00003985 E8BEE7FFFF          <2> 	call prcharq
  4542 0000398A 6658                <2> 	pop ax
  4543 0000398C EBC3                <2> 	jmp charmapcopycheck
  4544                              <1> %include 'source/programs/clear.asm'
  4545 0000398E FF2C636C65617200    <2> db 255,44,"clear",0
  4546 00003996 E843E3FFFF          <2> 		call clear
  4547 0000399B C3                  <2> 		ret 
  4548                              <1> %include 'source/programs/cpuid.asm'
  4549 0000399C FF2C637075696400    <2> db 255,44,"cpuid",0
  4550 000039A4 31C0                <2> 	xor eax, eax
  4551 000039A6 0FA2                <2> 	cpuid
  4552 000039A8 891D[F9390000]      <2> 	mov [cpuidbuf], ebx
  4553 000039AE 8915[FD390000]      <2> 	mov [cpuidbuf + 4], edx
  4554 000039B4 890D[013A0000]      <2> 	mov [cpuidbuf + 8], ecx
  4555 000039BA BE[F9390000]        <2> 	mov esi, cpuidbuf
  4556 000039BF E8B4E2FFFF          <2> 	call print
  4557 000039C4 BE[2A730000]        <2> 	mov esi, line
  4558 000039C9 E8AAE2FFFF          <2> 	call print
  4559 000039CE B801000000          <2> 	mov eax, 1
  4560 000039D3 0FA2                <2> 	cpuid
  4561 000039D5 89C1                <2> 	mov ecx, eax
  4562 000039D7 C605[2B2D0000]02    <2> 	mov byte [firsthexshown], 2
  4563 000039DE E85DF3FFFF          <2> 	call showhex
  4564 000039E3 B808000080          <2> 	mov eax, 0x80000008
  4565 000039E8 0FA2                <2> 	cpuid
  4566 000039EA 89C1                <2> 	mov ecx, eax
  4567 000039EC C605[2B2D0000]02    <2> 	mov byte [firsthexshown], 2
  4568 000039F3 E848F3FFFF          <2> 	call showhex
  4569 000039F8 C3                  <2> 	ret
  4570                              <2> 	
  4571 000039F9 00<rept>            <2> cpuidbuf times 13 db 0
  4572                              <2> cpuidvendorend:
  4573                              <1> %include 'source/programs/dos.asm'
  4574 00003A06 FF2C646F7300        <2> db 255,44,"dos",0
  4575                              <2> dosrunner:
  4576 00003A0C 8925[1E9B0000]      <2> 	mov [previousstack], esp
  4577 00003A12 8B3D[192B0000]      <2> 	mov edi, [currentcommandloc]
  4578 00003A18 81C704000000        <2> 	add edi, 4
  4579 00003A1E BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4580 00003A23 E800200000          <2> 	call loadfile
  4581 00003A28 8B3D[192B0000]      <2> 	mov edi, [currentcommandloc]
  4582 00003A2E 81C704000000        <2> 	add edi, 4
  4583 00003A34 81FA94010000        <2> 	cmp edx, 404
  4584 00003A3A 0F845E000000        <2> 	je near .noprogfound
  4585 00003A40 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4586 00003A45 31C9                <2> 	xor ecx, ecx
  4587                              <2> .findparams:
  4588 00003A47 47                  <2> 	inc edi
  4589 00003A48 8A07                <2> 	mov al, [edi]
  4590 00003A4A 3C20                <2> 	cmp al, " "
  4591 00003A4C 75F9                <2> 	jne .findparams
  4592                              <2> .copyparams:
  4593 00003A4E 8A07                <2> 	mov al, [edi]
  4594 00003A50 8803                <2> 	mov [ebx], al
  4595 00003A52 43                  <2> 	inc ebx
  4596 00003A53 47                  <2> 	inc edi
  4597 00003A54 41                  <2> 	inc ecx
  4598 00003A55 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4599 00003A5B 7304                <2> 	jae .nomoreparams
  4600 00003A5D 3C00                <2> 	cmp al, 0
  4601 00003A5F 75ED                <2> 	jne .copyparams
  4602                              <2> .nomoreparams:
  4603 00003A61 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4604 00003A67 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4605 00003A6B 8ED8                <2> 	mov ds, ax
  4606 00003A6D 8EC0                <2> 	mov es, ax
  4607 00003A6F 8EE0                <2> 	mov fs, ax
  4608 00003A71 8EE8                <2> 	mov gs, ax
  4609 00003A73 31C0                <2> 	xor eax, eax
  4610 00003A75 31DB                <2> 	xor ebx, ebx
  4611 00003A77 31C9                <2> 	xor ecx, ecx
  4612 00003A79 31D2                <2> 	xor edx, edx
  4613 00003A7B 31FF                <2> 	xor edi, edi
  4614 00003A7D 31F6                <2> 	xor esi, esi
  4615 00003A7F 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4616 00003A86 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4617 00003A8A 6689DA              <2> 	mov dx, bx
  4618 00003A8D 8EC3                <2> 	mov es, bx
  4619 00003A8F 8EE3                <2> 	mov fs, bx
  4620 00003A91 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4621 00003A95 8EEB                <2> 	mov gs, bx
  4622 00003A97 8B25[1E9B0000]      <2> 	mov esp, [previousstack]
  4623 00003A9D C3                  <2> 	ret
  4624                              <2> .noprogfound:
  4625 00003A9E BE[E9720000]        <2> 	mov esi, notfound1
  4626 00003AA3 E8D0E1FFFF          <2> 	call print
  4627 00003AA8 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  4628 00003AAE 81C604000000        <2> 	add esi, 4
  4629 00003AB4 E8BFE1FFFF          <2> 	call print
  4630 00003AB9 BE[F1720000]        <2> 	mov esi, notfound2
  4631 00003ABE E8B5E1FFFF          <2> 	call print
  4632 00003AC3 C3                  <2> 	ret
  4633                              <2> 	
  4634                              <1> %include 'source/programs/dump.asm'
  4635 00003AC4 FF2C64756D7000      <2> db 255,44,"dump",0
  4636 00003ACB 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  4637 00003AD1 81C605000000        <2> 	add esi, 5
  4638 00003AD7 31C9                <2> 	xor ecx, ecx
  4639 00003AD9 66B83078            <2> 	mov ax, "0x"
  4640 00003ADD 663906              <2> 	cmp [esi], ax
  4641 00003AE0 740A                <2> 	je dumphexin
  4642 00003AE2 E805F4FFFF          <2> 	call cnvrttxt
  4643 00003AE7 E910000000          <2> 	jmp dumphexnow
  4644                              <2> dumphexin:
  4645 00003AEC 81C602000000        <2> 	add esi, 2
  4646 00003AF2 E8ACF3FFFF          <2> 	call cnvrthextxt
  4647 00003AF7 E900000000          <2> 	jmp dumphexnow
  4648                              <2> dumphexnow:
  4649 00003AFC 89CF                <2> 	mov edi, ecx
  4650 00003AFE 89FE                <2> 	mov esi, edi
  4651 00003B00 81C680030000        <2> 	add esi, 896
  4652                              <2> dumphexloop:
  4653 00003B06 8B0F                <2> 	mov ecx, [edi]
  4654 00003B08 C605[2B2D0000]05    <2> 	mov byte [firsthexshown],5
  4655 00003B0F E82CF2FFFF          <2> 	call showhex
  4656 00003B14 81C704000000        <2> 	add edi, 4
  4657 00003B1A 39F7                <2> 	cmp edi, esi
  4658 00003B1C 72E8                <2> 	jb dumphexloop
  4659 00003B1E E85EE9FFFF          <2> 	call termcopy
  4660 00003B23 C3                  <2> 	ret 
  4661                              <1> %include 'source/programs/echo.asm'
  4662                              <2> 
  4663 00003B24 FF2C6563686F00      <2> db 255,44,"echo",0
  4664                              <2> 	echoprog:
  4665 00003B2B 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  4666 00003B31 81C605000000        <2> 		add esi, 5
  4667 00003B37 8A06                <2> 		mov al, [esi]
  4668 00003B39 E83AE1FFFF          <2> 		call print
  4669 00003B3E BE[2A730000]        <2> 		mov esi, line
  4670 00003B43 E830E1FFFF          <2> 		call print
  4671 00003B48 C3                  <2> 		ret
  4672 00003B49 BB[9E9D0000]        <2> 	echovr:	mov ebx, variables
  4673 00003B4E BF06000000          <2> 		mov edi, 6
  4674 00003B53 E83C000000          <2> 		call nxtvrech
  4675 00003B58 E954000000          <2> 		jmp prntvr2
  4676 00003B5D B13D                <2> 	echvar:	mov cl, '='
  4677 00003B5F 43                  <2> 		inc ebx
  4678 00003B60 8A03                <2> 		mov al, [ebx]
  4679 00003B62 3C00                <2> 		cmp al, 0
  4680 00003B64 742E                <2> 		je nxtvrech
  4681 00003B66 3C3D                <2> 		cmp al, '='
  4682 00003B68 7422                <2> 		je nxtvrechb1
  4683 00003B6A 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  4684 00003B70 01FE                <2> 		add esi, edi
  4685 00003B72 E8E1EFFFFF          <2> 		call cndtest
  4686 00003B77 3C02                <2> 		cmp al, 2
  4687 00003B79 7432                <2> 		je prntvr
  4688 00003B7B 3C01                <2> 		cmp al, 1
  4689 00003B7D 742E                <2> 		je prntvr
  4690 00003B7F 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  4691 00003B85 01FE                <2> 		add esi, edi
  4692 00003B87 E908000000          <2> 		jmp nxtvrech
  4693                              <2> 	nxtvrechb1:
  4694 00003B8C 81EB02000000        <2> 		sub ebx, 2
  4695 00003B92 EBC9                <2> 		jmp echvar
  4696 00003B94 8A03                <2> 	nxtvrech: mov al, [ebx]
  4697 00003B96 3C05                <2> 		cmp al, 5
  4698 00003B98 740A                <2> 		je nxtvrec2
  4699 00003B9A 43                  <2> 		inc ebx
  4700 00003B9B 81FB[9EAD0000]      <2> 		cmp ebx, varend
  4701 00003BA1 72F1                <2> 		jb nxtvrech
  4702 00003BA3 C3                  <2> 		ret
  4703 00003BA4 43                  <2> 	nxtvrec2: inc ebx
  4704 00003BA5 8A03                <2> 		mov al, [ebx]
  4705 00003BA7 3C04                <2> 		cmp al, 4
  4706 00003BA9 74B2                <2> 		je echvar
  4707 00003BAB EBE7                <2> 		jmp nxtvrech
  4708 00003BAD 43                  <2> 	prntvr: inc ebx
  4709 00003BAE 89DE                <2> 		mov esi, ebx
  4710 00003BB0 C3                  <2> 		ret
  4711 00003BB1 E8C2E0FFFF          <2> 	prntvr2: call print
  4712 00003BB6 BE[2A730000]        <2> 		mov esi, line
  4713 00003BBB E8B8E0FFFF          <2> 		call print
  4714 00003BC0 C3                  <2> 		ret 
  4715                              <1> %include 'source/programs/else.asm'
  4716 00003BC1 FF2C656C736500      <2> 	db 255,44,"else",0
  4717 00003BC8 31C0                <2> elsecmd:	xor eax, eax
  4718 00003BCA 3805[989D0000]      <2> 	cmp [BATCHISON], al
  4719 00003BD0 0F8441FAFFFF        <2> 	je near notbatch
  4720 00003BD6 A0[2F9D0000]        <2> 	mov al, [IFON]
  4721 00003BDB BE[309D0000]        <2> 	mov esi, IFTRUE
  4722 00003BE0 01C6                <2> 	add esi, eax
  4723 00003BE2 8A06                <2> 	mov al, [esi]
  4724 00003BE4 3401                <2> 	xor al, 1
  4725 00003BE6 8806                <2> 	mov [esi], al
  4726 00003BE8 C3                  <2> 	ret 
  4727                              <1> %include 'source/programs/fi.asm'
  4728 00003BE9 FF2C666900          <2> 	db 255,44,"fi",0
  4729 00003BEE 30C0                <2> 	xor al, al
  4730 00003BF0 3805[989D0000]      <2> 	cmp [BATCHISON], al
  4731 00003BF6 0F841BFAFFFF        <2> 	je near notbatch
  4732 00003BFC B001                <2> fi:	mov al, 1
  4733 00003BFE 2805[2F9D0000]      <2> 	sub [IFON],al
  4734 00003C04 C3                  <2> 	ret 
  4735                              <1> %include 'source/programs/gui.asm'
  4736 00003C05 FF2C67756900        <2> db 255,44,"gui",0
  4737                              <2> %ifdef gui.included
  4738                              <2> guiswitcher:
  4739 00003C0B 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  4740 00003C11 81C604000000        <2> 	add esi, 4
  4741 00003C17 31C9                <2> 	xor ecx, ecx
  4742 00003C19 803E00              <2> 	cmp byte [esi], 0
  4743 00003C1C 740A                <2> 	je .nomodepref
  4744 00003C1E E880F2FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  4745 00003C23 E907000000          <2> 	jmp .modepref
  4746                              <2> .nomodepref:
  4747 00003C28 51                  <2> 	push ecx
  4748 00003C29 E8B0E0FFFF          <2> 	call clear
  4749 00003C2E 59                  <2> 	pop ecx
  4750                              <2> .modepref:
  4751 00003C2F 66BB[D447]          <2> 	mov bx, guiswitch
  4752 00003C33 66891D[C20C0000]    <2> 	mov [realmodeptr], bx
  4753 00003C3A BB[4A3C0000]        <2> 	mov ebx, guiswitchret
  4754 00003C3F 891D[BE0C0000]      <2> 	mov [realmodereturn], ebx
  4755 00003C45 E95DCFFFFF          <2> 	jmp realmode
  4756                              <2> guiswitchret:
  4757 00003C4A 65803D[D8840000]01  <2> 	cmp byte [gs:guion], 1
  4758 00003C52 7401                <2> 	je .cont
  4759 00003C54 C3                  <2> 	ret
  4760                              <2> .cont:
  4761 00003C55 BF[C3490000]        <2> 	mov edi, VBEMODEBLOCK
  4762                              <2> .loop:
  4763 00003C5A 658B07              <2> 	mov eax, [gs:edi]
  4764 00003C5D 8907                <2> 	mov [edi], eax
  4765 00003C5F 47                  <2> 	inc edi
  4766 00003C60 81FF[C54C0000]      <2> 	cmp edi, VBEEND
  4767 00003C66 72F2                <2> 	jb .loop
  4768 00003C68 A1[EB4B0000]        <2> 	mov eax, [physbaseptr]
  4769 00003C6D 2D00001000          <2> 	sub eax, 0x100000
  4770 00003C72 A3[EB4B0000]        <2> 	mov [physbaseptr], eax
  4771 00003C77 C605[46210000]00    <2> 	mov byte [termguion], 0
  4772 00003C7E BE[B3B50000]        <2> 	mov esi, graphicstable
  4773 00003C83 30C0                <2> 	xor al, al
  4774                              <2> .clear:
  4775 00003C85 8806                <2> 	mov [esi], al
  4776 00003C87 46                  <2> 	inc esi
  4777 00003C88 81FE[B3B70000]      <2> 	cmp esi, graphicstableend
  4778 00003C8E 72F5                <2> 	jb .clear
  4779 00003C90 E8981F0000          <2> 	call guisetup
  4780 00003C95 66C705[45700000]80- <2> 	mov word [termwindow], 640
  4781 00003C9D 02                  <2>
  4782 00003C9E 66C705[47700000]E0- <2> 	mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  4783 00003CA6 01                  <2>
  4784 00003CA7 BE[45700000]        <2> 	mov esi, termwindow
  4785 00003CAC 668B15[D54B0000]    <2> 	mov dx, [resolutionx]
  4786 00003CB3 668B0D[D74B0000]    <2> 	mov cx, [resolutiony]
  4787 00003CBA 6681EA8002          <2> 	sub dx, 640
  4788 00003CBF 6681E9E001          <2> 	sub cx, 480
  4789 00003CC4 66D1EA              <2> 	shr dx, 1 ;x location-this centers the window
  4790 00003CC7 66D1E9              <2> 	shr cx, 1 ;y location-this centers the window	
  4791 00003CCA BB[6E280000]        <2> 	mov ebx, nwcmd
  4792 00003CCF 6631C0              <2> 	xor ax, ax
  4793 00003CD2 E8822A0000          <2> 	call showwindow
  4794 00003CD7 E8EA0F0000          <2> 	call cursorgui
  4795 00003CDC E8FDDFFFFF          <2> 	call clear
  4796 00003CE1 C3                  <2> 	ret
  4797                              <2> %else
  4798                              <2> 	mov esi, warnguimsg
  4799                              <2> 	call print
  4800                              <2> 	ret
  4801                              <2> %endif
  4802                              <2> 	
  4803                              <1> %include 'source/programs/help.asm'
  4804 00003CE2 FF2C68656C7000      <2> db 255,44,"help",0
  4805                              <2> lscmd:	
  4806 00003CE9 B00D                <2> 		mov al, 13
  4807 00003CEB E858E4FFFF          <2> 		call prcharq
  4808 00003CF0 BE[6F2F0000]        <2> 		mov esi, progstart
  4809 00003CF5 BB[D4470000]        <2> 		mov ebx, progend
  4810 00003CFA BE[1E970000]        <2> dir:	mov esi, fileindex
  4811 00003CFF 8A06                <2> 	dirnxt:	mov al, [esi]
  4812 00003D01 30E4                <2> 		xor ah, ah
  4813 00003D03 3CFF                <2> 		cmp al, 255
  4814 00003D05 7415                <2> 		je dirfnd
  4815 00003D07 46                  <2> 		inc esi
  4816 00003D08 81FE[1E9B0000]      <2> 		cmp esi,  fileindexend
  4817 00003D0E 7339                <2> 		jae dirdn
  4818 00003D10 EBED                <2> 		jmp dirnxt
  4819                              <2> 	dirfnd3:
  4820 00003D12 46                  <2> 		inc esi
  4821 00003D13 81FE[1E9B0000]      <2> 		cmp esi, fileindexend
  4822 00003D19 76E4                <2> 		jbe dirnxt
  4823 00003D1B 4E                  <2> 		dec esi
  4824 00003D1C 46                  <2> 	dirfnd:	inc esi
  4825 00003D1D 8A06                <2> 		mov al, [esi]
  4826 00003D1F 30E4                <2> 		xor ah, ah
  4827 00003D21 3C2C                <2> 		cmp al, 44
  4828 00003D23 740B                <2> 		je dirfnd2
  4829 00003D25 46                  <2> 		inc esi
  4830 00003D26 81FE[1E9B0000]      <2> 		cmp esi,  fileindexend
  4831 00003D2C 731B                <2> 		jae dirdn
  4832 00003D2E EBCF                <2> 		jmp dirnxt
  4833 00003D30 46                  <2> 	dirfnd2: inc esi
  4834 00003D31 E830DFFFFF          <2> 		call printquiet
  4835 00003D36 56                  <2> 		push esi
  4836 00003D37 B009                <2> 		mov al, 9
  4837 00003D39 E80AE4FFFF          <2> 		call prcharq
  4838 00003D3E 5E                  <2> 		pop esi
  4839 00003D3F 81FE[1E9B0000]      <2> 		cmp esi,  fileindexend
  4840 00003D45 7302                <2> 		jae dirdn
  4841 00003D47 EBB6                <2> 		jmp dirnxt
  4842 00003D49 BE[2A730000]        <2> 	dirdn:	mov esi, line
  4843 00003D4E E825DFFFFF          <2> 			call print
  4844 00003D53 C3                  <2> 			ret
  4845 00003D54 00                  <2> currentdir db 0
  4846                              <1> %include 'source/programs/if.asm'
  4847 00003D55 FF2C696600          <2> 	db 255,44,"if",0
  4848 00003D5A 30C0                <2> ifcmd:	xor al, al
  4849 00003D5C 3805[989D0000]      <2> 	cmp [BATCHISON], al
  4850 00003D62 0F84AFF8FFFF        <2> 	je near notbatch
  4851 00003D68 8B1D[192B0000]      <2> 	mov ebx, [currentcommandloc]
  4852 00003D6E 81C303000000        <2> 	add ebx, 3
  4853 00003D74 89DE                <2> 	mov esi, ebx
  4854 00003D76 8A06                <2> chkeqsn: mov al, [esi]
  4855 00003D78 3C00                <2> 	cmp al, 0
  4856 00003D7A 0F8497F8FFFF        <2> 	je near notbatch
  4857 00003D80 3C3D                <2> 	cmp al, '='
  4858 00003D82 0F8403000000        <2> 	je near chkeqdn
  4859 00003D88 46                  <2> 	inc esi
  4860 00003D89 EBEB                <2> 	jmp chkeqsn
  4861 00003D8B B000                <2> chkeqdn: mov al, 0 
  4862 00003D8D 8806                <2> 	mov [esi], al
  4863 00003D8F 46                  <2> 	inc esi
  4864 00003D90 E888EDFFFF          <2> 	call tester
  4865 00003D95 3C01                <2> 	cmp al, 1
  4866 00003D97 0F8405000000        <2> 	je near trueif
  4867 00003D9D E91C000000          <2> 	jmp falseif
  4868 00003DA2 31C0                <2> trueif:	xor eax, eax
  4869 00003DA4 A0[2F9D0000]        <2> 	mov al, [IFON]
  4870 00003DA9 FEC0                <2> 	inc al
  4871 00003DAB A2[2F9D0000]        <2> 	mov [IFON], al
  4872 00003DB0 30E4                <2> 	xor ah, ah
  4873 00003DB2 BE[309D0000]        <2> 	mov esi, IFTRUE
  4874 00003DB7 01C6                <2> 	add esi, eax
  4875 00003DB9 B401                <2> 	mov ah, 1
  4876 00003DBB 8826                <2> 	mov [esi], ah
  4877 00003DBD C3                  <2> 	ret 
  4878 00003DBE 31C0                <2> falseif: xor eax, eax
  4879 00003DC0 A0[2F9D0000]        <2> 	mov al, [IFON]
  4880 00003DC5 FEC0                <2> 	inc al
  4881 00003DC7 A2[2F9D0000]        <2> 	mov [IFON], al
  4882 00003DCC 30E4                <2> 	xor ah, ah
  4883 00003DCE BE[309D0000]        <2> 	mov esi, IFTRUE
  4884 00003DD3 01C6                <2> 	add esi, eax
  4885 00003DD5 30E4                <2> 	xor ah, ah
  4886 00003DD7 8826                <2> 	mov [esi], ah
  4887 00003DD9 C3                  <2> 	ret 
  4888                              <1> %include 'source/programs/keycode.asm'
  4889 00003DDA FF2C6B65797300      <2> db 255,44,"keys",0
  4890                              <2> keycode:
  4891 00003DE1 C605[22210000]00    <2> 	mov byte [trans], 0
  4892 00003DE8 C605[C75B0000]00    <2> 	mov byte [threadson], 0
  4893 00003DEF E815160000          <2> 	call getkey
  4894 00003DF4 31C0                <2> 	xor eax, eax
  4895 00003DF6 31C9                <2> 	xor ecx, ecx
  4896 00003DF8 8A0D[E9530000]      <2> 	mov cl, [specialkey]
  4897 00003DFE 80F900              <2> 	cmp cl, 0
  4898 00003E01 0F8405000000        <2> 	je near nospecialkeycode
  4899 00003E07 E820EFFFFF          <2> 	call showhexsmall
  4900                              <2> nospecialkeycode:
  4901 00003E0C 66A1[20210000]      <2> 	mov ax, [lastkey]
  4902 00003E12 88E1                <2> 	mov cl, ah
  4903 00003E14 E813EFFFFF          <2> 	call showhexsmall
  4904 00003E19 80FC01              <2> 	cmp ah, 1
  4905 00003E1C 75C3                <2> 	jne keycode
  4906 00003E1E C3                  <2> 	ret 
  4907                              <1> %include 'source/programs/logout.asm'
  4908 00003E1F FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  4909 00003E28 E98FE8FFFF          <2> 	jmp os
  4910                              <1> %include 'source/programs/loop.asm'
  4911 00003E2D FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  4912 00003E34 803D[999D0000]00    <2> 	cmp byte [LOOPON], 0
  4913 00003E3B 0F8501000000        <2> 	jne near filoop
  4914 00003E41 C3                  <2> 	ret
  4915 00003E42 8B35[9A9D0000]      <2> filoop: mov esi, [LOOPPOS]
  4916 00003E48 FE0D[2F9D0000]      <2> 	dec byte [IFON]
  4917 00003E4E C605[999D0000]00    <2> 	mov byte [LOOPON], 0
  4918 00003E55 8935[949D0000]      <2> 	mov [BATCHPOS], esi
  4919 00003E5B 8935[3F350000]      <2> 	mov [batchedi], esi
  4920 00003E61 C3                  <2> 	ret 
  4921                              <1> %include 'source/programs/ls.asm'
  4922 00003E62 FF2C6C7300          <2> db 255,44,"ls",0
  4923 00003E67 BE[4F830000]        <2> 		mov esi, diskfileindex
  4924                              <2> 	diskindexdir:
  4925 00003E6C 803E5F              <2> 		cmp byte [esi], '_'
  4926 00003E6F 7440                <2> 		je nextdiskindexdir
  4927 00003E71 E8F0DDFFFF          <2> 		call printquiet
  4928 00003E76 56                  <2> 		push esi
  4929 00003E77 BE[D13E0000]        <2> 		mov esi, disktab
  4930 00003E7C E8E5DDFFFF          <2> 		call printquiet
  4931 00003E81 5E                  <2> 		pop esi
  4932 00003E82 8B4E05              <2> 		mov ecx, [esi + 5]
  4933 00003E85 C605[2B2D0000]05    <2> 		mov byte [firsthexshown], 5
  4934 00003E8C E879EFFFFF          <2> 		call showdec
  4935 00003E91 56                  <2> 		push esi
  4936 00003E92 BE[2A730000]        <2> 		mov esi, line
  4937 00003E97 E8CADDFFFF          <2> 		call printquiet
  4938 00003E9C 5E                  <2> 		pop esi
  4939 00003E9D 81C609000000        <2> 		add esi, 9
  4940 00003EA3 81FE[D7840000]      <2> 		cmp esi, enddiskfileindex
  4941 00003EA9 72C1                <2> 		jb diskindexdir
  4942 00003EAB E8D1E5FFFF          <2> 		call termcopy
  4943 00003EB0 C3                  <2> 		ret
  4944                              <2> 	nextdiskindexdir:
  4945 00003EB1 46                  <2> 		inc esi
  4946 00003EB2 803E00              <2> 		cmp byte [esi], 0
  4947 00003EB5 75FA                <2> 		jne nextdiskindexdir
  4948 00003EB7 81C609000000        <2> 		add esi, 9
  4949 00003EBD 81FE[D7840000]      <2> 		cmp esi, enddiskfileindex
  4950 00003EC3 72A7                <2> 		jb diskindexdir
  4951 00003EC5 E8B7E5FFFF          <2> 		call termcopy
  4952 00003ECA C3                  <2> 		ret
  4953                              <2> 		
  4954 00003ECB 4469736B2000        <2> 		diskmsg db "Disk ",0
  4955 00003ED1 0D09090900          <2> 		disktab db 13,9,9,9,0
  4956                              <1> %include 'source/programs/memory.asm'
  4957 00003ED6 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  4958 00003EDF BE[DE840000]        <2> 	mov esi, memlistbuf
  4959 00003EE4 31FF                <2> 	xor edi, edi
  4960 00003EE6 668B3D[1E870000]    <2> 	mov di, [memlistend]
  4961 00003EED 01F7                <2> 	add edi, esi
  4962                              <2> printmemmap:
  4963 00003EEF 8B0E                <2> 	mov ecx, [esi]
  4964 00003EF1 E84AEEFFFF          <2> 	call showhex
  4965 00003EF6 81C608000000        <2> 	add esi, 8
  4966 00003EFC 8B0E                <2> 	mov ecx, [esi]
  4967 00003EFE E83DEEFFFF          <2> 	call showhex
  4968 00003F03 81C608000000        <2> 	add esi, 8
  4969 00003F09 8B0E                <2> 	mov ecx, [esi]
  4970 00003F0B E830EEFFFF          <2> 	call showhex
  4971 00003F10 81C608000000        <2> 	add esi, 8
  4972 00003F16 57                  <2> 	push edi
  4973 00003F17 56                  <2> 	push esi
  4974 00003F18 BE[2A730000]        <2> 	mov esi, line
  4975 00003F1D E856DDFFFF          <2> 	call print
  4976 00003F22 5E                  <2> 	pop esi
  4977 00003F23 5F                  <2> 	pop edi
  4978 00003F24 39FE                <2> 	cmp esi, edi
  4979 00003F26 72C7                <2> 	jb printmemmap
  4980 00003F28 C3                  <2> 	ret
  4981                              <2> 	
  4982                              <1> %include 'source/programs/pci.asm'
  4983 00003F29 FF2C70636900        <2> db 255,44,"pci",0
  4984 00003F2F E887180000          <2> 	call pcidump
  4985 00003F34 C3                  <2> 	ret 
  4986                              <1> %include 'source/programs/play.asm'
  4987 00003F35 FF2C706C617900      <2> db 255,44,"play",0
  4988 00003F3C E801000000          <2> 	call playsync
  4989 00003F41 C3                  <2> 	ret
  4990                              <2> playsync:
  4991 00003F42 8B3D[192B0000]      <2> 	mov edi, [currentcommandloc]
  4992 00003F48 81C705000000        <2> 	add edi, 5
  4993 00003F4E BE00004000          <2> 	mov esi, 0x400000
  4994 00003F53 E8D01A0000          <2> 	call loadfile
  4995 00003F58 81FA94010000        <2> 	cmp edx, 404
  4996 00003F5E 7448                <2> 	je nosoundfound
  4997 00003F60 BB00004000          <2> 	mov ebx, 0x400000
  4998 00003F65 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  4999 00003F6C 0F84B8000000        <2> 	je near wave_player
  5000 00003F72 66813B534E          <2> 	cmp word [ebx], "SN"
  5001 00003F77 752F                <2> 	jne nosoundfound
  5002 00003F79 81C306000000        <2> 	add ebx, 6
  5003 00003F7F 891D[53020000]      <2> 	mov [soundpos], ebx
  5004 00003F85 035BFC              <2> 	add ebx, [ebx - 4]
  5005 00003F88 891D[57020000]      <2> 	mov [soundendpos], ebx
  5006 00003F8E 66C705[51020000]00- <2> 	mov word [soundrepititions], 0
  5007 00003F96 00                  <2>
  5008 00003F97 C605[50020000]01    <2> 	mov byte [soundon], 1
  5009                              <2> waitforsoundendplay:
  5010 00003F9E A0[50020000]        <2> 	mov al, [soundon]
  5011 00003FA3 3C00                <2> 	cmp al, 0
  5012 00003FA5 75F7                <2> 	jne waitforsoundendplay
  5013 00003FA7 C3                  <2> 	ret
  5014                              <2> nosoundfound:
  5015 00003FA8 BE[CE3F0000]        <2> 	mov esi, notfoundsound
  5016 00003FAD E8C6DCFFFF          <2> 	call print
  5017 00003FB2 8B35[192B0000]      <2> 	mov esi, [currentcommandloc]
  5018 00003FB8 81C605000000        <2> 	add esi, 5
  5019 00003FBE E8B5DCFFFF          <2> 	call print
  5020 00003FC3 BE[F1720000]        <2> 	mov esi, notfound2
  5021 00003FC8 E8ABDCFFFF          <2> 	call print
  5022 00003FCD C3                  <2> 	ret
  5023 00003FCE 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5024                              <2> 
  5025                              <2> %ifdef sound.included
  5026                              <2> sbplay:
  5027 00003FD6 BE00004000          <2> 		mov esi, 0x400000
  5028 00003FDB 89F3                <2> 		mov ebx, esi
  5029 00003FDD 81C62C000000        <2> 		add esi, 44
  5030 00003FE3 29F7                <2> 		sub edi, esi
  5031 00003FE5 66893D[FA510000]    <2> 		mov [Length1], di
  5032 00003FEC C1EF10              <2> 		shr edi, 16
  5033 00003FEF 66893D[F8510000]    <2> 		mov [Length0], di
  5034 00003FF6 8B4B18              <2> 		mov ecx, [ebx + 24]
  5035 00003FF9 890D[05520000]      <2> 		mov [Freq], ecx
  5036 00003FFF 31C0                <2> 		xor eax, eax
  5037 00004001 BA00004000          <2> 		mov	edx, 0x400000 ;location of sound
  5038 00004006 81C200080000        <2> 		add edx, 2048
  5039 0000400C 01D0                <2> 		add	eax,edx
  5040 0000400E 31DB                <2> 		xor ebx, ebx
  5041 00004010 668B1D[FA510000]    <2> 		mov bx, [Length1]
  5042 00004017 01C3                <2> 		add ebx, eax
  5043 00004019 891D[FC510000]      <2> 		mov [NextMemLoc], ebx
  5044 0000401F A3[00520000]        <2> 		mov	[MemLoc],eax
  5045 00004024 E8A9100000          <2> 		call DMAPlay
  5046 00004029 C3                  <2> 		ret
  5047                              <2> 
  5048                              <2> wave_player:
  5049 0000402A 803D[0A520000]01    <2> 	cmp byte [SoundBlaster], 1
  5050 00004031 0F849FFFFFFF        <2> 	je near sbplay
  5051 00004037 BE[42400000]        <2> 	mov esi, nosoundblaster
  5052 0000403C E837DCFFFF          <2> 	call print
  5053 00004041 C3                  <2> 	ret
  5054                              <2> %else
  5055                              <2> 	wave_player:
  5056                              <2> 		mov esi, nosoundblaster
  5057                              <2> 		call print
  5058                              <2> 		ret
  5059                              <2> %endif
  5060 00004042 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5061 0000404B 426C61737465722064- <2>
  5062 00004054 657465637465642E0A- <2>
  5063 0000405D 00                  <2>
  5064                              <1> %include 'source/programs/pwd.asm'
  5065 0000405E FF2C70776400        <2> db 255,44,"pwd",0
  5066 00004064 BE[2A9B0000]        <2> 	mov esi, currentfolder
  5067 00004069 E8F8DBFFFF          <2> 	call printquiet
  5068 0000406E BE[2A730000]        <2> 	mov esi, line
  5069 00004073 E800DCFFFF          <2> 	call print
  5070 00004078 C3                  <2> 	ret
  5071                              <2> 	
  5072                              <1> %include 'source/programs/reboot.asm'
  5073 00004079 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5074 00004082 0F011D[8C400000]    <2> 		lidt [idtreboot]
  5075 00004089 CD00                <2> 		int 0
  5076 0000408B F4                  <2> 		hlt
  5077                              <2> 	
  5078 0000408C 0000                <2> 	idtreboot dw 0
  5079 0000408E 00000000            <2> 			  dd 0
  5080                              <2> 
  5081                              <2> 	coldboot:
  5082 00004092 66B84000            <2> 		MOV AX, 0040h
  5083 00004096 8EC0                <2> 		MOV ES, AX
  5084 00004098 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5085 000040A1 00                  <2>
  5086 000040A2 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5087 000040A9 CF                  <2> 		IRET
  5088                              <2> 
  5089                              <2> 	warmboot:
  5090 000040AA 66B84000            <2> 		MOV AX, 0040h
  5091 000040AE 8EC0                <2> 		MOV ES, AX
  5092 000040B0 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5093 000040B9 12                  <2>
  5094 000040BA EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5095 000040C1 CF                  <2> 		IRET
  5096                              <2> 		
  5097                              <1> %include 'source/programs/reg.asm'
  5098 000040C2 FF2C72656700        <2> db 255,44,"reg",0
  5099 000040C8 CD03                <2> 	int 3
  5100 000040CA C3                  <2> 	ret 
  5101                              <1> %include 'source/programs/rmode.asm'
  5102 000040CB FF2C726D6F646500    <2> db 255,44,"rmode",0
  5103 000040D3 66BB[EE40]          <2> 	mov bx, rmodetest
  5104 000040D7 66891D[C20C0000]    <2> 	mov [realmodeptr], bx
  5105 000040DE BB[74470000]        <2> 	mov ebx, waitkey
  5106 000040E3 891D[BE0C0000]      <2> 	mov [realmodereturn], ebx
  5107 000040E9 E9B9CAFFFF          <2> 	jmp realmode
  5108                              <2> [BITS 16]
  5109                              <2> rmodetest:
  5110 000040EE BE[0041]            <2> 	mov si, rmodestr
  5111 000040F1 31DB                <2> 	xor bx, bx
  5112                              <2> rmodeprnt:
  5113 000040F3 AC                  <2> 	lodsb
  5114 000040F4 08C0                <2> 	or al, al
  5115 000040F6 7407                <2> 	jz .done
  5116 000040F8 B40E                <2> 	mov ah, 0xE
  5117 000040FA 43                  <2> 	inc bx
  5118 000040FB CD10                <2> 	int 0x10
  5119 000040FD EBF4                <2> 	jmp rmodeprnt
  5120 000040FF C3                  <2> .done: ret
  5121                              <2> 
  5122 00004100 48656C6C6F2066726F- <2> rmodestr db "Hello from real mode!",10,13,"Goodbye!",10,13,0
  5123 00004109 6D207265616C206D6F- <2>
  5124 00004112 6465210A0D476F6F64- <2>
  5125 0000411B 627965210A0D00      <2>
  5126                              <2> [BITS 32]
  5127                              <1> %include 'source/programs/show.asm'
  5128 00004122 FF2C73686F7700      <2> db 255,44,"show",0
  5129 00004129 8B3D[192B0000]      <2> 		mov edi, [currentcommandloc]
  5130 0000412F 81C705000000        <2> 		add edi, 5
  5131 00004135 BE00008000          <2> 		mov esi, 0x800000
  5132 0000413A E8E9180000          <2> 		call loadfile
  5133 0000413F 81FA94010000        <2> 		cmp edx, 404
  5134 00004145 0F849E000000        <2> 		je near filenotfound
  5135 0000414B BE00008000          <2> 		mov esi, 0x800000
  5136 00004150 66813E424D          <2> 		cmp word [esi], "BM"
  5137 00004155 7410                <2> 		je bmpfound
  5138 00004157 E81CDBFFFF          <2> 		call print
  5139 0000415C BE[2A730000]        <2> 		mov esi, line
  5140 00004161 E812DBFFFF          <2> 		call print
  5141 00004166 C3                  <2> 		ret
  5142                              <2> bmpfound:
  5143                              <2> %ifdef gui.included
  5144 00004167 803D[D8840000]00    <2> 		cmp byte [guion], 0
  5145 0000416E 0F8443000000        <2> 		je near noguibmp
  5146 00004174 BE00008000          <2> 		mov esi, 0x800000
  5147 00004179 31C9                <2> 		xor ecx, ecx
  5148 0000417B 31D2                <2> 		xor edx, edx
  5149 0000417D 31C0                <2> 		xor eax, eax
  5150 0000417F 31DB                <2> 		xor ebx, ebx
  5151 00004181 E8E52C0000          <2> 		call showbmp
  5152 00004186 30C0                <2> 		xor al, al
  5153 00004188 B405                <2> 		mov ah, 5
  5154 0000418A CD30                <2> 		int 30h
  5155 0000418C E83B1A0000          <2> 		call guiclear
  5156 00004191 E8B01B0000          <2> 		call clearmousecursor
  5157 00004196 E810220000          <2> 		call reloadallgraphics
  5158 0000419B 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  5159 000041A1 81C605000000        <2> 		add esi, 5
  5160 000041A7 E8CCDAFFFF          <2> 		call print
  5161 000041AC BE[3E420000]        <2> 		mov esi, loadedbmpmsg
  5162 000041B1 E8C2DAFFFF          <2> 		call print
  5163 000041B6 C3                  <2> 		ret
  5164                              <2> %endif
  5165                              <2> noguibmp:
  5166 000041B7 BE[C2410000]        <2> 		mov esi, warnguimsg
  5167 000041BC E8B7DAFFFF          <2> 		call print
  5168 000041C1 C3                  <2> 		ret
  5169 000041C2 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5170 000041CB 6E6F7420626520646F- <2>
  5171 000041D4 6E6520776974686F75- <2>
  5172 000041DD 742074686520475549- <2>
  5173 000041E6 2E0A00              <2>
  5174                              <2> 
  5175                              <2> filenotfound:
  5176 000041E9 BE[1C420000]        <2> 		mov esi, filenf
  5177 000041EE E885DAFFFF          <2> 		call print
  5178 000041F3 8B35[192B0000]      <2> 		mov esi, [currentcommandloc]
  5179                              <2> findfilenotfoundzero:
  5180 000041F9 8A06                <2> 		mov al, [esi]
  5181 000041FB 46                  <2> 		inc esi
  5182 000041FC 3C00                <2> 		cmp al, 0
  5183 000041FE 7411                <2> 		je nofilenamenotfound
  5184 00004200 81FE[9EB50000]      <2> 		cmp esi, buftxtend
  5185 00004206 7309                <2> 		jae nofilenamenotfound
  5186 00004208 3C20                <2> 		cmp al, " "
  5187 0000420A 75ED                <2> 		jne findfilenotfoundzero
  5188 0000420C E867DAFFFF          <2> 		call print
  5189                              <2> nofilenamenotfound:
  5190 00004211 BE[27420000]        <2> 		mov esi, filenf2
  5191 00004216 E85DDAFFFF          <2> 		call print
  5192 0000421B C3                  <2> 		ret
  5193 0000421C 5468652066696C6520- <2> filenf db "The file ",34,0
  5194 00004225 2200                <2>
  5195 00004227 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5196 00004230 6F7420626520666F75- <2>
  5197 00004239 6E642E0A00          <2>
  5198                              <2> 		
  5199 0000423E 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5200 00004247 00                  <2>
  5201                              <1> %include 'source/programs/shush.asm'
  5202 00004248 FF2C736875736800    <2> db 255,44,"shush",0
  5203 00004250 BE[5B420000]        <2> 	mov esi, shushmsg
  5204 00004255 E81EDAFFFF          <2> 	call print
  5205 0000425A C3                  <2> 	ret
  5206 0000425B 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5207 00004264 6F2074686520536F6C- <2>
  5208 0000426D 6C65724F5320486172- <2>
  5209 00004276 646C7920556E69782D- <2>
  5210 0000427F 436F6D70617469626C- <2>
  5211 00004288 65205368656C6C210A- <2>
  5212 00004291 00                  <2>
  5213                              <1> %include 'source/programs/stop.asm'
  5214 00004292 FF2C73746F7000      <2> 	db 255,44,"stop",0
  5215 00004299 30C0                <2> stop:	xor al, al
  5216 0000429B A2[989D0000]        <2> 	mov [BATCHISON], al
  5217 000042A0 A2[2F9D0000]        <2> 	mov [IFON], al
  5218 000042A5 A2[309D0000]        <2> 	mov [IFTRUE], al
  5219 000042AA A2[999D0000]        <2> 	mov [LOOPON], al
  5220 000042AF C3                  <2> 	ret 
  5221                              <1> %include 'source/programs/system.asm'
  5222 000042B0 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5223 000042B9 BE[69430000]        <2> 	mov esi, systeminfomsg
  5224 000042BE E8A3D9FFFF          <2> 	call printquiet
  5225 000042C3 B9[4F830000]        <2> 	mov ecx, osend
  5226 000042C8 E83DEBFFFF          <2> 	call showdec
  5227 000042CD BE[7E430000]        <2> 	mov esi, diskbytemsg
  5228 000042D2 E88FD9FFFF          <2> 	call printquiet
  5229 000042D7 B9[4F830000]        <2> 	mov ecx, osend
  5230 000042DC 81C1[BC680100]      <2> 	add ecx, commandbufend
  5231 000042E2 81E9[D8840000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5232 000042E8 E81DEBFFFF          <2> 	call showdec
  5233 000042ED BE[95430000]        <2> 	mov esi, membytemsg
  5234 000042F2 E86FD9FFFF          <2> 	call printquiet
  5235                              <2> getcpuspeed:
  5236 000042F7 B8FE000000          <2> 	mov eax, 0xFE
  5237 000042FC E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5238 000042FE B020                <2> 	mov al, 0x20
  5239 00004300 E620                <2> 	out 0x20, al
  5240 00004302 31C0                <2> 	xor eax, eax
  5241 00004304 F4                  <2> 	hlt
  5242 00004305 C605[39020000]01    <2> 	mov byte [testingcpuspeed], 1
  5243                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5244 0000430C 40                  <2> 	inc eax
  5245 0000430D EBFD                <2> 	jmp cpuspeedloop
  5246                              <2> cpuspeedloopend:
  5247 0000430F 31C0                <2> 	xor eax, eax
  5248 00004311 E621                <2> 	out 0x21, al
  5249 00004313 B020                <2> 	mov al, 0x20
  5250 00004315 E620                <2> 	out 0x20, al
  5251 00004317 31D2                <2> 	xor edx, edx
  5252 00004319 31C0                <2> 	xor eax, eax
  5253 0000431B A1[3A020000]        <2> 	mov eax, [cpuspeedperint]
  5254 00004320 8B1D[4C020000]      <2> 	mov ebx, [timeinterval]
  5255 00004326 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5256 00004329 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5257 0000432B 89C1                <2> 	mov ecx, eax
  5258 0000432D E8D8EAFFFF          <2> 	call showdec
  5259 00004332 BE[DA430000]        <2> 	mov esi, cpuspeedmsg
  5260 00004337 E82AD9FFFF          <2> 	call printquiet
  5261 0000433C 8B0D[3E020000]      <2> 	mov ecx, [memoryspace]
  5262 00004342 C1E914              <2> 	shr ecx, 20
  5263 00004345 41                  <2> 	inc ecx	;the reading is one MB behind
  5264 00004346 E8BFEAFFFF          <2> 	call showdec
  5265 0000434B BE[E0430000]        <2> 	mov esi, memoryspacemsg
  5266 00004350 E823D9FFFF          <2> 	call print
  5267                              <2> %ifdef sound.included
  5268 00004355 803D[0A520000]00    <2> 	cmp byte [SoundBlaster], 0
  5269 0000435C 740A                <2> 	je .nosb
  5270 0000435E BE[C2430000]        <2> 	mov esi, soundblastermsg
  5271 00004363 E810D9FFFF          <2> 	call print
  5272                              <2> .nosb:
  5273                              <2> %endif
  5274 00004368 C3                  <2> 	ret
  5275                              <2> 
  5276 00004369 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5277 00004372 666F726D6174696F6E- <2>
  5278 0000437B 3A0A00              <2>
  5279 0000437E 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5280 00004387 6B2053706163652055- <2>
  5281 00004390 7365640A00          <2>
  5282 00004395 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,"System Information:",10,0
  5283 0000439E 6F7279205370616365- <2>
  5284 000043A7 20557365640A537973- <2>
  5285 000043B0 74656D20496E666F72- <2>
  5286 000043B9 6D6174696F6E3A0A00  <2>
  5287                              <2> %ifdef sound.included
  5288 000043C2 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5289 000043CB 746572204465746563- <2>
  5290 000043D4 7465642E0A00        <2>
  5291                              <2> %endif
  5292 000043DA 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5293 000043E0 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5294 000043E9 205370616365204672- <2>
  5295 000043F2 65650A00            <2>
  5296                              <1> %include 'source/programs/time.asm'
  5297 000043F6 082E30303030303030- <2> timenscache db 8,".000000000"
  5298 000043FF 3030                <2>
  5299 00004401 200A00              <2> timenscacheend: db " ",10,0
  5300 00004404 00                  <2> istimeset db 0
  5301 00004405 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5302 0000440E 2063757272656E7420- <2>
  5303 00004417 554E49582074696D65- <2>
  5304 00004420 3A0A00              <2>
  5305 00004423 00<rept>            <2> timeinputbuffer times 12 db 0
  5306 0000442F 00                  <2> timeinputbend: db 0
  5307                              <2> 
  5308 00004430 FF2C74696D6500      <2> db 255,44,"time",0
  5309 00004437 803D[04440000]00    <2> 	cmp byte [istimeset], 0
  5310 0000443E 753A                <2> 	jne timeisset
  5311 00004440 BE[05440000]        <2> 	mov esi, settimemsg
  5312 00004445 E82ED8FFFF          <2> 	call print
  5313 0000444A BE[23440000]        <2> 	mov esi, timeinputbuffer
  5314 0000444F BF[2F440000]        <2> 	mov edi, timeinputbend
  5315 00004454 E805D9FFFF          <2> 	call readline
  5316 00004459 BE[23440000]        <2> 	mov esi, timeinputbuffer
  5317 0000445E 31FF                <2> 	xor edi, edi
  5318 00004460 E887EAFFFF          <2> 	call cnvrttxt
  5319 00004465 890D[44020000]      <2> 	mov [timeseconds], ecx
  5320 0000446B 31C9                <2> 	xor ecx, ecx
  5321 0000446D 890D[48020000]      <2> 	mov [timenanoseconds], ecx
  5322 00004473 C605[04440000]01    <2> 	mov byte [istimeset], 1
  5323                              <2> timeisset:
  5324 0000447A 8B0D[44020000]      <2> 	mov ecx, [timeseconds]
  5325 00004480 E885E9FFFF          <2> 	call showdec
  5326                              <2> 	
  5327 00004485 8B0D[48020000]      <2> 	mov ecx, [timenanoseconds]
  5328 0000448B BE[F6430000]        <2> 	mov esi, timenscache
  5329 00004490 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5330 00004497 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5331 0000449E C6460A30            <2> 	mov byte [esi + 10], "0"
  5332 000044A2 BE[01440000]        <2> 	mov esi, timenscacheend
  5333 000044A7 E841E7FFFF          <2> 	call convert
  5334 000044AC BE[F6430000]        <2> 	mov esi, timenscache
  5335 000044B1 E8C2D7FFFF          <2> 	call print
  5336                              <2> 	
  5337 000044B6 E80F000000          <2> 	call time
  5338 000044BB BE[96460000]        <2> 	mov esi, timeshow
  5339 000044C0 E8B3D7FFFF          <2> 	call print
  5340 000044C5 E9BC000000          <2> 	jmp findday
  5341                              <2> time:
  5342 000044CA E84F010000          <2> 	call tstackput1
  5343 000044CF B00A                <2> 	mov al,10			;Get RTC register A
  5344 000044D1 E879010000          <2> 	call tget1
  5345 000044D6 A880                <2> 	test al,0x80			;Is update in progress?
  5346 000044D8 75F0                <2> 	jne time				; yes, wait
  5347                              <2> 
  5348 000044DA B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5349 000044DC E86E010000          <2> 	call tget1
  5350 000044E1 A2[8D460000]        <2> 	mov [RTCtimeSecond],al
  5351                              <2> 
  5352 000044E6 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5353 000044E8 E862010000          <2> 	call tget1
  5354 000044ED A2[8E460000]        <2> 	mov [RTCtimeMinute],al
  5355                              <2> 
  5356 000044F2 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5357 000044F4 E856010000          <2> 	call tget1
  5358 000044F9 A2[8F460000]        <2> 	mov [RTCtimeHour],al
  5359                              <2> 
  5360 000044FE B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5361 00004500 E84A010000          <2> 	call tget1
  5362 00004505 A2[90460000]        <2> 	mov [RTCtimeDay],al
  5363                              <2> 
  5364 0000450A B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5365 0000450C E83E010000          <2> 	call tget1
  5366 00004511 A2[91460000]        <2> 	mov [RTCtimeMonth],al
  5367                              <2> 
  5368 00004516 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5369 00004518 E832010000          <2> 	call tget1
  5370 0000451D A2[92460000]        <2> 	mov [RTCtimeYear],al
  5371                              <2> 	
  5372 00004522 BE[96460000]        <2> 	mov esi, timeshow
  5373 00004527 8A2D[8F460000]      <2> 	mov ch, [RTCtimeHour]
  5374 0000452D E828010000          <2> 	call tput1
  5375 00004532 8A2D[8E460000]      <2> 	mov ch, [RTCtimeMinute]
  5376 00004538 E81D010000          <2> 	call tput1
  5377 0000453D 8A2D[8D460000]      <2> 	mov ch, [RTCtimeSecond]
  5378 00004543 E812010000          <2> 	call tput1
  5379 00004548 BE[9F460000]        <2> 	mov esi, dateshow
  5380 0000454D 8A2D[91460000]      <2> 	mov ch, [RTCtimeMonth]
  5381 00004553 E802010000          <2> 	call tput1
  5382 00004558 8A2D[90460000]      <2> 	mov ch, [RTCtimeDay]
  5383 0000455E E8F7000000          <2> 	call tput1
  5384 00004563 B520                <2> 	mov ch, 0x20
  5385 00004565 E8F0000000          <2> 	call tput1
  5386 0000456A 4E                  <2> 	dec esi
  5387 0000456B 8A2D[92460000]      <2> 	mov ch, [RTCtimeYear]
  5388 00004571 E8E4000000          <2> 	call tput1
  5389 00004576 E8BD000000          <2> 	call tstackget1
  5390 0000457B C3                  <2> 	ret
  5391 0000457C BE[96460000]        <2> 	mov esi, timeshow
  5392 00004581 E8F2D6FFFF          <2> 	call print
  5393                              <2> ;;get day of week
  5394                              <2> ;;add these:
  5395                              <2> ;;century value
  5396                              <2> ;;last 2 digits of year
  5397                              <2> ;;last 2 digits of year right shifted twice
  5398                              <2> ;;month table value
  5399                              <2> ;;day of the month
  5400                              <2> ;;divide these by 7
  5401                              <2> ;;the remainder is the day
  5402                              <2> findday:
  5403 00004586 31C0                <2> 	xor eax, eax
  5404                              <2> ;;first convert the values from BCD to hex
  5405 00004588 A0[90460000]        <2> 	mov al, [RTCtimeDay]
  5406 0000458D E873000000          <2> 	call converttohex
  5407 00004592 8825[93460000]      <2> 	mov [dayhex], ah
  5408 00004598 A0[91460000]        <2> 	mov al, [RTCtimeMonth]
  5409 0000459D E863000000          <2> 	call converttohex
  5410 000045A2 8825[94460000]      <2> 	mov [monthhex], ah
  5411 000045A8 A0[92460000]        <2> 	mov al, [RTCtimeYear]
  5412 000045AD E853000000          <2> 	call converttohex
  5413 000045B2 8825[95460000]      <2> 	mov [yearhex], ah
  5414 000045B8 31C0                <2> 	xor eax, eax
  5415 000045BA A0[95460000]        <2> 	mov al, [yearhex]
  5416 000045BF C0E802              <2> 	shr al, 2
  5417 000045C2 0205[95460000]      <2> 	add al, [yearhex]
  5418 000045C8 0506000000          <2> 	add eax, 6
  5419 000045CD 31DB                <2> 	xor ebx, ebx
  5420 000045CF 8A1D[94460000]      <2> 	mov bl, [monthhex]
  5421 000045D5 FECB                <2> 	dec bl
  5422 000045D7 81C3[B4460000]      <2> 	add ebx, month
  5423 000045DD 31C9                <2> 	xor ecx, ecx
  5424 000045DF 8A0B                <2> 	mov cl, [ebx]
  5425 000045E1 01C8                <2> 	add eax, ecx
  5426 000045E3 8A0D[93460000]      <2> 	mov cl, [dayhex]
  5427 000045E9 01C8                <2> 	add eax, ecx
  5428 000045EB 66BB0700            <2> 	mov bx, 7
  5429 000045EF 31D2                <2> 	xor edx, edx
  5430 000045F1 66F7F3              <2> 	div bx
  5431 000045F4 C1E202              <2> 	shl edx, 2
  5432 000045F7 81C2[C0460000]      <2> 	add edx, day
  5433 000045FD 8B32                <2> 	mov esi, [edx]
  5434 000045FF E874D6FFFF          <2> 	call print
  5435 00004604 C3                  <2> 	ret
  5436                              <2> 	
  5437                              <2> converttohex:
  5438 00004605 88C4                <2> 	mov ah, al
  5439 00004607 C0E804              <2> 	shr al, 4
  5440 0000460A C0E404              <2> 	shl ah, 4
  5441 0000460D C0EC04              <2> 	shr ah, 4
  5442 00004610 3C00                <2> 	cmp al, 0
  5443 00004612 7409                <2> 	je noconverttohex
  5444                              <2> converttohexlp:
  5445 00004614 80C40A              <2> 	add ah, 10
  5446 00004617 FEC8                <2> 	dec al
  5447 00004619 3C00                <2> 	cmp al, 0
  5448 0000461B 75F7                <2> 	jne converttohexlp
  5449                              <2> noconverttohex:
  5450 0000461D C3                  <2> 	ret
  5451                              <2> 	
  5452                              <2> tstackput1:
  5453 0000461E 8935[89460000]      <2> 	mov [tstack + 20], esi
  5454 00004624 BE[75460000]        <2> 	mov esi, tstack
  5455 00004629 8906                <2> 	mov [esi], eax
  5456 0000462B 895E04              <2> 	mov [esi + 4], ebx
  5457 0000462E 894E08              <2> 	mov [esi + 8], ecx
  5458 00004631 89560C              <2> 	mov [esi + 12], edx
  5459 00004634 897E10              <2> 	mov [esi + 16], edi
  5460 00004637 C3                  <2> 	ret
  5461                              <2> 	
  5462                              <2> tstackget1:
  5463 00004638 BE[75460000]        <2> 	mov esi, tstack
  5464 0000463D 8B06                <2> 	mov eax, [esi]
  5465 0000463F 8B5E04              <2> 	mov ebx, [esi + 4]
  5466 00004642 8B4E08              <2> 	mov ecx, [esi + 8]
  5467 00004645 8B560C              <2> 	mov edx, [esi + 12]
  5468 00004648 8B7E10              <2> 	mov edi, [esi + 16]
  5469 0000464B 8B7614              <2> 	mov esi, [esi + 20]
  5470 0000464E C3                  <2> 	ret
  5471                              <2> 	
  5472                              <2> tget1:
  5473 0000464F 66BA7000            <2> 	mov dx, 0x70
  5474 00004653 EE                  <2> 	out dx, al
  5475 00004654 6642                <2> 	inc dx
  5476 00004656 EC                  <2> 	in al, dx
  5477 00004657 664A                <2> 	dec dx
  5478 00004659 C3                  <2> 	ret
  5479                              <2> 	
  5480                              <2> tput1:
  5481 0000465A 66C1E904            <2> 	shr cx, 4
  5482 0000465E B030                <2> 	mov al, 48
  5483 00004660 00E8                <2> 	add al, ch
  5484 00004662 8806                <2> 	mov [esi], al
  5485 00004664 46                  <2> 	inc esi
  5486 00004665 B030                <2> 	mov al, 48
  5487 00004667 C0E904              <2> 	shr cl, 4
  5488 0000466A 00C8                <2> 	add al, cl
  5489 0000466C 8806                <2> 	mov [esi], al
  5490 0000466E 81C602000000        <2> 	add esi, 2
  5491 00004674 C3                  <2> 	ret
  5492                              <2> 		
  5493 00004675 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5494 0000467E 000000000000000000- <2>
  5495 00004687 000000000000        <2>
  5496 0000468D 00                  <2> 	RTCtimeSecond db 0
  5497 0000468E 00                  <2> 	RTCtimeMinute db 0
  5498 0000468F 00                  <2> 	RTCtimeHour db 0
  5499 00004690 00                  <2> 	RTCtimeDay db 0
  5500 00004691 00                  <2> 	RTCtimeMonth db 0
  5501 00004692 00                  <2> 	RTCtimeYear db 0
  5502 00004693 00                  <2> 	dayhex db 0
  5503 00004694 00                  <2> 	monthhex db 0
  5504 00004695 00                  <2> 	yearhex db 0
  5505 00004696 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5506 0000469F 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5507 000046A8 300A00              <2>
  5508                              <2> 	oldcentury:	;;from 1700 to 1900
  5509 000046AB 040200              <2> 	db 4,2,0
  5510                              <2> 	century:	;;from 2000 to 2500
  5511 000046AE 060402000604        <2> 	db 6,4,2,0,6,4
  5512                              <2> 	month:
  5513 000046B4 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5514 000046BD 000305              <2>
  5515                              <2> 	day:
  5516 000046C0 [DC460000]          <2> 	dd sunday
  5517 000046C4 [E4460000]          <2> 	dd monday
  5518 000046C8 [EC460000]          <2> 	dd tuesday
  5519 000046CC [F5460000]          <2> 	dd wednesday
  5520 000046D0 [00470000]          <2> 	dd thursday
  5521 000046D4 [0A470000]          <2> 	dd friday
  5522 000046D8 [12470000]          <2> 	dd saturday
  5523                              <2> sunday:
  5524 000046DC 53756E6461790A00    <2> 	db "Sunday",10,0
  5525                              <2> monday:
  5526 000046E4 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5527                              <2> tuesday:
  5528 000046EC 547565736461790A00  <2> 	db "Tuesday",10,0
  5529                              <2> wednesday:
  5530 000046F5 5765646E6573646179- <2> 	db "Wednesday",10,0
  5531 000046FE 0A00                <2>
  5532                              <2> thursday:
  5533 00004700 54687572736461790A- <2> 	db "Thursday",10,0
  5534 00004709 00                  <2>
  5535                              <2> friday:
  5536 0000470A 4672696461790A00    <2> 	db "Friday",10,0
  5537                              <2> saturday:
  5538 00004712 53617475726461790A- <2> 	db "Saturday",10,0
  5539 0000471B 00                  <2>
  5540                              <1> %include 'source/programs/turnoff.asm'
  5541 0000471C FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5542 00004725 00                  <2>
  5543                              <2> 	turnoff:
  5544 00004726 66BB[4147]          <2> 			mov bx, shutdown
  5545 0000472A 66891D[C20C0000]    <2> 			mov [realmodeptr], bx
  5546 00004731 BB[6B470000]        <2> 			mov ebx, halt
  5547 00004736 891D[BE0C0000]      <2> 			mov [realmodereturn], ebx
  5548 0000473C E966C4FFFF          <2> 			jmp realmode
  5549                              <2> 
  5550                              <2> [BITS 16]
  5551                              <2> 		shutdown:
  5552 00004741 B453                <2> 			mov ah, 0x53
  5553 00004743 B004                <2> 			mov al, 4
  5554 00004745 31DB                <2> 			xor bx, bx
  5555 00004747 CD15                <2> 			int 0x15
  5556                              <2> 			
  5557 00004749 B453                <2> 			mov ah, 0x53
  5558 0000474B B001                <2> 			mov al, 1
  5559 0000474D 31DB                <2> 			xor bx, bx
  5560 0000474F CD15                <2> 			int 0x15
  5561                              <2> 			
  5562 00004751 B453                <2> 			mov ah, 0x53
  5563 00004753 B008                <2> 			mov al, 8
  5564 00004755 BB0100              <2> 			mov bx, 1
  5565 00004758 B90100              <2> 			mov cx, 1
  5566 0000475B CD15                <2> 			int 0x15
  5567                              <2> 			
  5568 0000475D B453                <2> 			mov ah, 0x53
  5569 0000475F B007                <2> 			mov al, 7
  5570 00004761 BB0100              <2> 			mov bx, 1
  5571 00004764 B90300              <2> 			mov cx, 3
  5572 00004767 CD15                <2> 			int 0x15
  5573 00004769 EBFE                <2> 			jmp $
  5574                              <2> 			[BITS 32]
  5575 0000476B EBFE                <2> halt: jmp $
  5576                              <1> %include 'source/programs/wait.asm'
  5577 0000476D FF2C7761697400      <2> db 255,44,"wait",0
  5578                              <2> waitkey:
  5579 00004774 E861D9FFFF          <2> 		call getchar
  5580 00004779 C3                  <2> 		ret
  5581                              <1> %include 'source/programs/while.asm'
  5582 0000477A FF2C7768696C6500    <2> db 255,44,"while",0
  5583 00004782 30C0                <2> whilecmd:  xor al, al
  5584 00004784 3805[989D0000]      <2> 	cmp [BATCHISON], al
  5585 0000478A 0F8487EEFFFF        <2> 	je near notbatch
  5586 00004790 8B35[949D0000]      <2> 	mov esi, [BATCHPOS]
  5587 00004796 81EE02000000        <2> 	sub esi, 2
  5588 0000479C 4E                  <2> whilefnd: dec esi
  5589 0000479D 8A06                <2> 	mov al, [esi]
  5590 0000479F 3C0A                <2> 	cmp al, 10
  5591 000047A1 0F840A000000        <2> 	je near whilefnd2
  5592 000047A7 3C00                <2> 	cmp al, 0
  5593 000047A9 0F8402000000        <2> 	je near whilefnd2
  5594 000047AF EBEB                <2> 	jmp whilefnd
  5595                              <2> whilefnd2:
  5596 000047B1 46                  <2> 	inc esi
  5597 000047B2 8935[9A9D0000]      <2> 	mov [LOOPPOS], esi
  5598 000047B8 C605[999D0000]01    <2> 	mov BYTE [LOOPON], 1
  5599 000047BF BE[9EB10000]        <2> 	mov esi, buftxt
  5600 000047C4 BB[9EB10000]        <2> 	mov ebx, buftxt
  5601 000047C9 81C306000000        <2> 	add ebx, 6
  5602 000047CF E9A2F5FFFF          <2> 	jmp chkeqsn
  5603                              <1> progend:		;programs end here	
  5604                              <1> batchprogend:
  5605                                  	%include "source/hardware.asm"
  5606                              <1> %ifdef gui.included
  5607                              <1> 	%include "source/drivers/video/vesa.asm"
  5608                              <2> [BITS 16]
  5609                              <2> guiswitch:
  5610 000047D4 81F90000            <2> 	cmp cx, 0
  5611 000047D8 750B                <2> 	jne guiswitchdefnum
  5612 000047DA B81200              <2> 	mov ax, 12h
  5613 000047DD 31DB                <2> 	xor bx, bx
  5614 000047DF CD10                <2> 	int 10h
  5615 000047E1 E85100              <2> 	call guiloadagain
  5616                              <2> guiswitchnocando:
  5617 000047E4 C3                  <2> 	ret	;return without switching as mode number is bad
  5618                              <2> guiswitchdefnum:	;switch to a defined mode number
  5619 000047E5 B8004F              <2> 	mov ax, 0x4F00
  5620 000047E8 BF[C349]            <2> 	mov di, VBEMODEBLOCK
  5621 000047EB CD10                <2> 	int 10h
  5622 000047ED BE[E549]            <2> 	mov si, reserved
  5623 000047F0 81EE0200            <2> 	sub si, 2
  5624                              <2> .loop:
  5625 000047F4 81C60200            <2> 	add si, 2
  5626 000047F8 81FE[C34A]          <2> 	cmp si, oemdata
  5627 000047FC 74E6                <2> 	je guiswitchnocando
  5628 000047FE 813CFFFF            <2> 	cmp word [si], 0xFFFF
  5629 00004802 74E0                <2> 	je guiswitchnocando
  5630 00004804 390C                <2> 	cmp [si], cx
  5631 00004806 75EC                <2> 	jne .loop
  5632 00004808 8936[0C49]          <2> 	mov [videomodecache], si
  5633 0000480C 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  5634 00004810 B8014F              <2> 	mov ax, 0x4F01
  5635 00004813 BF[C34B]            <2> 	mov di, VBEMODEINFOBLOCK
  5636 00004816 890E[0A49]          <2> 	mov [vesamode], cx
  5637 0000481A CD10                <2> 	int 10h
  5638 0000481C E9CB00              <2> 	jmp selectedvesa
  5639                              <2> guiload:
  5640 0000481F BE[9B49]            <2> 	mov si, bootmsg
  5641 00004822 E8E900              <2> 	call printrm
  5642 00004825 31C0                <2> 	xor ax, ax
  5643 00004827 CD16                <2> 	int 16h
  5644 00004829 3C79                <2> 	cmp al, "y"
  5645 0000482B 0F8511B8            <2> 	jne near vgaset
  5646 0000482F BE[2973]            <2> 	mov si, crlf
  5647 00004832 E8D900              <2> 	call printrm
  5648                              <2> guiloadagain:
  5649 00004835 B8004F              <2> 	mov ax, 04F00h
  5650 00004838 BF[C349]            <2> 	mov di, VBEMODEBLOCK
  5651 0000483B CD10                <2> 	int 10h
  5652 0000483D BE[E549]            <2> 	mov si, reserved
  5653 00004840 81EE0200            <2> 	sub si, 2
  5654                              <2> findvideomodes:
  5655 00004844 81C60200            <2> 	add si, 2
  5656 00004848 8B0C                <2> 	mov cx, [si]
  5657 0000484A 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5658 0000484E 0F840A00            <2> 	je near nextvmode
  5659 00004852 81FE[C34A]          <2> 	cmp si, oemdata
  5660 00004856 0F83E6B7            <2> 	jae near vgaset	;;kill if no valid list is found
  5661 0000485A EBE8                <2> 	jmp findvideomodes 	
  5662                              <2> ;;debug,shows vmodes available
  5663                              <2> nextvmode:
  5664 0000485C 81EE0200            <2> 	sub si, 2
  5665 00004860 81FE[E549]          <2> 	cmp si, reserved
  5666 00004864 0F82CDFF            <2> 	jb near guiloadagain
  5667 00004868 8B0C                <2> 	mov cx, [si]
  5668 0000486A 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5669 0000486E 0F84EAFF            <2> 	je near nextvmode
  5670 00004872 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  5671 00004876 B8014F              <2> 	mov ax, 04F01h
  5672 00004879 BF[C34B]            <2> 	mov di, VBEMODEINFOBLOCK
  5673 0000487C 890E[0A49]          <2> 	mov [vesamode], cx
  5674 00004880 CD10                <2> 	int 10h
  5675 00004882 A0[DC4B]            <2> 	mov al, [bitsperpixel]
  5676 00004885 3C10                <2> 	cmp al, 16
  5677 00004887 75D3                <2> 	jne nextvmode
  5678 00004889 8936[0C49]          <2> 	mov [videomodecache], si
  5679 0000488D 84E4                <2> 	test ah, ah
  5680 0000488F 0F842200            <2> 	jz near setvesamode
  5681 00004893 EBC7                <2> 	jmp nextvmode
  5682 00004895 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  5683 0000489E 20766964656F206D6F- <2>
  5684 000048A7 6465204F4B3F28792F- <2>
  5685 000048B0 6E290D0A00          <2>
  5686                              <2> setvesamode:
  5687 000048B5 8B0E[D54B]          <2> 	mov cx, [resolutionx]
  5688 000048B9 E86A00              <2> 	call decshow
  5689 000048BC B078                <2> 	mov al, "x"
  5690 000048BE E8D200              <2> 	call char
  5691 000048C1 8B0E[D74B]          <2> 	mov cx, [resolutiony]
  5692 000048C5 E85E00              <2> 	call decshow
  5693 000048C8 B040                <2> 	mov al, "@"
  5694 000048CA E8C600              <2> 	call char
  5695 000048CD 31C9                <2> 	xor cx, cx
  5696 000048CF 8A0E[DC4B]          <2> 	mov cl, [bitsperpixel]
  5697 000048D3 E85000              <2> 	call decshow
  5698 000048D6 BE[9548]            <2> 	mov si, isthisvideook
  5699 000048D9 E83200              <2> 	call printrm
  5700 000048DC 31C0                <2> 	xor ax, ax
  5701 000048DE CD16                <2> 	int 16h
  5702 000048E0 8B36[0C49]          <2> 	mov si, [videomodecache]
  5703 000048E4 3C79                <2> 	cmp al, "y"
  5704 000048E6 0F8572FF            <2> 	jne near nextvmode
  5705                              <2> selectedvesa:
  5706 000048EA 8B16[D54B]          <2> 	mov dx, [resolutionx]
  5707 000048EE 01D2                <2> 	add dx, dx
  5708 000048F0 8916[C34C]          <2> 	mov [resolutionx2], dx
  5709 000048F4 31D2                <2> 	xor dx, dx
  5710 000048F6 31C9                <2> 	xor cx, cx
  5711 000048F8 B8024F              <2> 	mov ax, 04F02h
  5712 000048FB 8B1E[0A49]          <2> 	mov bx, [vesamode]
  5713 000048FF CD10                <2> 	int 10h		;;enter VESA mode
  5714 00004901 C606[D884]01        <2> 	mov byte [guion], 1
  5715 00004906 E847B7              <2> 	call getmemorysize;get the memory map after the video is initialized
  5716 00004909 C3                  <2> 	ret
  5717                              <2> 	
  5718 0000490A 0000                <2> vesamode dw 0
  5719 0000490C 0000                <2> videomodecache dw 0
  5720                              <2> 
  5721                              <2>     printrm:			; 'si' comes in with string address
  5722 0000490E BB0700              <2> 	    mov bx,07		; write to display
  5723 00004911 B40E                <2> 	    mov ah,0Eh		; screen function
  5724 00004913 8A04                <2>     prs2:    mov al,[si]         ; get next character
  5725 00004915 3C00                <2> 	    cmp al,0		; look for terminator 
  5726 00004917 7405                <2>             je finpr2		; zero byte at end of string
  5727 00004919 CD10                <2> 	    int 10h		; write character to screen.    
  5728 0000491B 46                  <2>      	    inc si	     	; move to next character
  5729 0000491C EBF5                <2> 	    jmp prs2		; loop
  5730 0000491E C3                  <2>     finpr2: ret
  5731                              <2> 
  5732 0000491F 0000000000          <2> dcnm db 0,0,0,0,0
  5733 00004924 0000                <2> dcnmend db 0,0
  5734                              <2> 
  5735                              <2> 
  5736                              <2> decshow:
  5737 00004926 BE[1F49]            <2> 	mov si, dcnm
  5738                              <2> decclear:
  5739 00004929 B030                <2> 	mov al, "0"
  5740 0000492B 8804                <2> 	mov [si], al
  5741 0000492D 46                  <2> 	inc si
  5742 0000492E 81FE[2449]          <2> 	cmp si, dcnmend
  5743 00004932 76F5                <2> 	jbe decclear
  5744 00004934 4E                  <2> 	dec si
  5745 00004935 E81500              <2> 	call convertrm
  5746 00004938 BE[1F49]            <2> 	mov si, dcnm
  5747                              <2> dectst:
  5748 0000493B 8A04                <2> 	mov al, [si]
  5749 0000493D 46                  <2> 	inc si
  5750 0000493E 81FE[2449]          <2> 	cmp si, dcnmend
  5751 00004942 7704                <2> 	ja dectstend
  5752 00004944 3C30                <2> 	cmp al, "0"
  5753 00004946 76F3                <2> 	jbe dectst
  5754                              <2> dectstend:
  5755 00004948 4E                  <2> 	dec si
  5756 00004949 E8C2FF              <2> 	call printrm
  5757 0000494C C3                  <2> 	ret
  5758                              <2> 	
  5759                              <2> 	
  5760                              <2> convertrm:
  5761 0000494D 4E                  <2> 	dec si
  5762 0000494E 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  5763                              <2> cnvrtrm:
  5764 00004950 89DE                <2> 	mov si, bx
  5765 00004952 81EE0300            <2> 	sub si, 3
  5766 00004956 46                  <2> ten3rm:	inc si
  5767 00004957 81F9E803            <2> 	cmp cx, 1000
  5768 0000495B 7208                <2> 	jb ten2rm
  5769 0000495D 81E9E803            <2> 	sub cx, 1000
  5770 00004961 FE04                <2> 	inc byte [si]
  5771 00004963 EBEB                <2> 	jmp cnvrtrm
  5772 00004965 46                  <2> ten2rm:	inc si
  5773 00004966 81F96400            <2> 	cmp cx, 100
  5774 0000496A 7208                <2> 	jb ten1rm
  5775 0000496C 81E96400            <2> 	sub cx, 100
  5776 00004970 FE04                <2> 	inc byte [si]
  5777 00004972 EBDC                <2> 	jmp cnvrtrm
  5778 00004974 46                  <2> ten1rm:	inc si
  5779 00004975 81F90A00            <2> 	cmp cx, 10
  5780 00004979 7208                <2> 	jb ten0rm
  5781 0000497B 81E90A00            <2> 	sub cx, 10
  5782 0000497F FE04                <2> 	inc byte [si]
  5783 00004981 EBCD                <2> 	jmp cnvrtrm
  5784 00004983 46                  <2> ten0rm:	inc si
  5785 00004984 81F90100            <2> 	cmp cx, 1
  5786 00004988 7208                <2> 	jb tendnrm
  5787 0000498A 81E90100            <2> 	sub cx, 1
  5788 0000498E FE04                <2> 	inc byte [si]
  5789 00004990 EBBE                <2> 	jmp cnvrtrm
  5790                              <2> tendnrm:
  5791 00004992 C3                  <2> 	ret
  5792                              <2> 
  5793                              <2>     char: 		    ;char must be in al
  5794 00004993 BB0700              <2>        mov bx, 07
  5795 00004996 B40E                <2> 	   mov ah, 0Eh
  5796 00004998 CD10                <2> 	   int 10h
  5797 0000499A C3                  <2> 	   ret
  5798                              <2> 
  5799 0000499B 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  5800 000049A4 20746865204755493F- <2>
  5801 000049AD 28792F6E2900        <2>
  5802                              <2> 
  5803                              <2> 
  5804                              <2> mcursor:
  5805 000049B3 01                  <2> 	db	00000001b
  5806 000049B4 81                  <2> 	db	10000001b
  5807 000049B5 C1                  <2> 	db	11000001b
  5808 000049B6 E1                  <2> 	db	11100001b
  5809 000049B7 F1                  <2> 	db	11110001b
  5810 000049B8 F9                  <2> 	db	11111001b
  5811 000049B9 FD                  <2> 	db	11111101b
  5812 000049BA FF                  <2> 	db	11111111b
  5813 000049BB F9                  <2> 	db	11111001b
  5814 000049BC B9                  <2> 	db	10111001b
  5815 000049BD 39                  <2> 	db	00111001b
  5816 000049BE 1C                  <2> 	db	00011100b
  5817 000049BF 1C                  <2> 	db	00011100b
  5818 000049C0 0E                  <2> 	db	00001110b
  5819 000049C1 0E                  <2> 	db	00001110b
  5820 000049C2 0C                  <2> 	db	00001100b
  5821                              <2> mcursorend:
  5822                              <2> 
  5823                              <2> 
  5824                              <2> VBEMODEBLOCK:
  5825 000049C3 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  5826 000049C7 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  5827 000049C9 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  5828 000049CD 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  5829 000049D1 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  5830 000049D5 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  5831 000049D7 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  5832 000049D9 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  5833 000049DD 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  5834 000049E1 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  5835 000049E5 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  5836 00004AC3 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  5837                              <2> 
  5838                              <2> VBEMODEINFOBLOCK:
  5839                              <2> ;Mandatory information for all VBE revision
  5840 00004BC3 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  5841 00004BC5 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  5842 00004BC6 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  5843 00004BC7 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  5844 00004BC9 00<rept>            <2> winsize          	times  2 db 0	;Window size
  5845 00004BCB 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  5846 00004BCD 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  5847 00004BCF 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  5848 00004BD3 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  5849                              <2> 
  5850                              <2> ;Mandatory information for VBE 1.2 and above
  5851 00004BD5 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  5852 00004BD7 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  5853 00004BD9 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  5854 00004BDA 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  5855 00004BDB 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  5856 00004BDC 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  5857 00004BDD 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  5858 00004BDE 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  5859 00004BDF 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  5860 00004BE0 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  5861 00004BE1 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  5862                              <2> 
  5863                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  5864 00004BE2 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  5865 00004BE3 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  5866 00004BE4 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  5867 00004BE5 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  5868 00004BE6 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  5869 00004BE7 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  5870 00004BE8 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  5871 00004BE9 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  5872 00004BEA 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  5873                              <2> 
  5874                              <2> ;Mandatory information for VBE 2.0 and above
  5875 00004BEB 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  5876 00004BEF 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  5877 00004BF3 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  5878 00004BF5 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  5879                              <2> 
  5880 00004CC3 0000                <2> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  5881                              <2> VBEEND:
  5882                              <2> [BITS 32]
  5883                              <1> 	%include "source/drivers/input/mouse.asm"
  5884 00004CC5 00                  <2> mousedisabled db 0
  5885                              <2> 	
  5886                              <2> 	cursorgui:
  5887 00004CC6 803D[086F0000]01    <2> 		cmp byte [mouseon], 1
  5888 00004CCD 0F8432000000        <2> 		je near moused
  5889 00004CD3 803D[D8840000]00    <2> 		cmp byte [guion], 0
  5890 00004CDA 0F844A080000        <2> 		je near entdown
  5891                              <2> 	initmouse:
  5892 00004CE0 803D[D8840000]00    <2> 		cmp byte [guion], 0
  5893 00004CE7 7405                <2> 		je noswmsposinit
  5894 00004CE9 E812110000          <2> 		call switchmousepos2
  5895                              <2> 	noswmsposinit:
  5896 00004CEE E84E020000          <2> 	  	call PS2SET
  5897 00004CF3 E877020000          <2> 		call ACTMOUS
  5898 00004CF8 C605[086F0000]01    <2> 		mov byte [mouseon],1
  5899 00004CFF E890020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5900                              <2> 				;;If the bytes are mixed up,
  5901                              <2> 				;;remove this line or add another of this line.
  5902                              <2> 	nomouse:
  5903 00004D04 C3                  <2> 		ret
  5904                              <2> 	moused:
  5905 00004D05 803D[C54C0000]01    <2> 		cmp byte [mousedisabled], 1
  5906 00004D0C 74F6                <2> 		je nomouse
  5907 00004D0E 803D[086F0000]01    <2> 		  cmp byte [mouseon], 1
  5908 00004D15 75C9                <2> 		  jne initmouse
  5909 00004D17 E878020000          <2> 		  call GETB
  5910 00004D1C 88C3                <2> 		  mov  bl, al
  5911 00004D1E 80E301              <2> 		  and  bl, 1
  5912 00004D21 881D[B94F0000]      <2> 		  mov  BYTE [LBUTTON], bl
  5913 00004D27 88C3                <2> 		  mov  bl, al
  5914 00004D29 80E302              <2> 		  and  bl, 2
  5915 00004D2C D0EB                <2> 		  shr  bl, 1
  5916 00004D2E 881D[BA4F0000]      <2> 		  mov  BYTE [RBUTTON], bl
  5917 00004D34 88C3                <2> 		  mov  bl, al
  5918 00004D36 80E304              <2> 		  and  bl, 4
  5919 00004D39 C0EB02              <2> 		  shr  bl, 2
  5920 00004D3C 881D[BB4F0000]      <2> 		  mov  BYTE [MBUTTON], bl
  5921 00004D42 E84D020000          <2> 		  call GETB
  5922 00004D47 A2[BC4F0000]        <2> 		  mov  BYTE [XCOORD], al
  5923 00004D4C E843020000          <2> 		  call GETB
  5924 00004D51 A2[BD4F0000]        <2> 		  mov  BYTE [YCOORD], al
  5925                              <2> 
  5926                              <2> 	showpixelcursor:
  5927 00004D56 668B15[A84E0000]    <2> 		mov dx, [mousecursorposition]
  5928 00004D5D 668B0D[AA4E0000]    <2> 		mov cx, [mousecursorposition + 2]
  5929 00004D64 668915[A44E0000]    <2> 		mov [lastmouseposition], dx
  5930 00004D6B 66890D[A64E0000]    <2> 		mov [lastmouseposition + 2], cx
  5931 00004D72 A0[BC4F0000]        <2> 		mov al, [XCOORD]
  5932 00004D77 3C80                <2> 		cmp al, 128
  5933 00004D79 730C                <2> 		jae subxcoord
  5934 00004D7B 00C0                <2> 		add al, al
  5935 00004D7D 30E4                <2> 		xor ah, ah
  5936 00004D7F 6601C2              <2> 		add dx, ax
  5937 00004D82 E90B000000          <2> 		jmp subxcoorddn
  5938                              <2> 	subxcoord:
  5939 00004D87 00C0                <2> 		add al, al
  5940 00004D89 30DB                <2> 		xor bl, bl
  5941 00004D8B 28C3                <2> 		sub bl, al
  5942 00004D8D 30FF                <2> 		xor bh, bh
  5943 00004D8F 6629DA              <2> 		sub dx, bx
  5944                              <2> 	subxcoorddn:
  5945 00004D92 8A1D[BD4F0000]      <2> 		mov bl, [YCOORD]
  5946 00004D98 30C0                <2> 		xor al, al
  5947 00004D9A 28D8                <2> 		sub al, bl
  5948 00004D9C 3C80                <2> 		cmp al, 128
  5949 00004D9E 730A                <2> 		jae subycoord
  5950 00004DA0 30E4                <2> 		xor ah, ah
  5951 00004DA2 6601C1              <2> 		add cx, ax
  5952 00004DA5 E909000000          <2> 		jmp subycoorddn
  5953                              <2> 	subycoord:
  5954 00004DAA 30DB                <2> 		xor bl, bl
  5955 00004DAC 28C3                <2> 		sub bl, al
  5956 00004DAE 30FF                <2> 		xor bh, bh
  5957 00004DB0 6629D9              <2> 		sub cx, bx
  5958                              <2> 	subycoorddn:
  5959 00004DB3 6681FA204E          <2> 		cmp dx, 20000
  5960 00004DB8 7603                <2> 		jbe nooriginx2
  5961 00004DBA 6631D2              <2> 		xor dx, dx
  5962                              <2> 	nooriginx2:
  5963 00004DBD 6681F9204E          <2> 		cmp cx, 20000
  5964 00004DC2 7603                <2> 		jbe nooriginy2
  5965 00004DC4 6631C9              <2> 		xor cx, cx
  5966                              <2> 	nooriginy2:
  5967 00004DC7 6681FA0000          <2> 		cmp dx, 0
  5968 00004DCC 7415                <2> 		je nofixxcolumn2
  5969 00004DCE 663B15[C34C0000]    <2> 		cmp dx, [resolutionx2]
  5970 00004DD5 720C                <2> 		jb nofixxcolumn2
  5971 00004DD7 668B15[C34C0000]    <2> 		mov dx, [resolutionx2]
  5972 00004DDE 6681EA0200          <2> 		sub dx, 2
  5973                              <2> 	nofixxcolumn2:
  5974 00004DE3 6681F90000          <2> 		cmp cx, 0
  5975 00004DE8 7415                <2> 		je nofixyrow2
  5976 00004DEA 663B0D[D74B0000]    <2> 		cmp cx, [resolutiony]
  5977 00004DF1 720C                <2> 		jb nofixyrow2
  5978 00004DF3 668B0D[D74B0000]    <2> 		mov cx, [resolutiony]
  5979 00004DFA 6681E90100          <2> 		sub cx, 1
  5980                              <2> 	nofixyrow2:
  5981 00004DFF 668915[A84E0000]    <2> 		mov [mousecursorposition], dx
  5982 00004E06 66890D[AA4E0000]    <2> 		mov [mousecursorposition + 2], cx
  5983 00004E0D 803D[D8840000]00    <2> 		cmp byte [guion], 0
  5984 00004E14 0F8492000000        <2> 		je near termmouse
  5985 00004E1A E8810F0000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  5986 00004E1F 803D[B94F0000]01    <2> 		cmp byte [LBUTTON], 1
  5987 00004E26 0F8448100000        <2> 		je near clickicon
  5988 00004E2C 803D[BA4F0000]01    <2> 		cmp byte [RBUTTON], 1
  5989 00004E33 0F843B100000        <2> 		je near clickicon
  5990 00004E39 A0[615E0000]        <2> 		mov al, [pbutton]
  5991 00004E3E C705[645E0000]0000- <2> 		mov dword [dragging], 0
  5992 00004E46 0000                <2>
  5993 00004E48 3C00                <2> 		cmp al, 0
  5994 00004E4A 740F                <2> 		je nopreviousbutton
  5995 00004E4C E8F50E0000          <2> 		call clearmousecursor
  5996 00004E51 E855150000          <2> 		call reloadallgraphics
  5997                              <2> 	windowtermcopyend:
  5998 00004E56 E8A50F0000          <2> 		call switchmousepos2
  5999                              <2> 	nopreviousbutton:
  6000 00004E5B 30C0                <2> 		xor al, al
  6001 00004E5D A2[615E0000]        <2> 		mov [pbutton], al
  6002 00004E62 A0[B94F0000]        <2> 		mov al, [LBUTTON]
  6003 00004E67 A2[625E0000]        <2> 		mov [pLBUTTON], al
  6004 00004E6C A0[BA4F0000]        <2> 		mov al, [RBUTTON]
  6005 00004E71 A2[635E0000]        <2> 		mov [pRBUTTON], al
  6006 00004E76 31C9                <2> 		xor ecx, ecx
  6007 00004E78 31D2                <2> 		xor edx, edx
  6008 00004E7A 668B15[A84E0000]    <2> 		mov dx, [mousecursorposition]
  6009 00004E81 668B0D[AA4E0000]    <2> 		mov cx, [mousecursorposition + 2]
  6010 00004E88 66BB18C7            <2> 		mov bx, 1100011100011000b
  6011 00004E8C 30E4                <2> 		xor ah, ah
  6012 00004E8E B0FE                <2> 		mov al, 254
  6013 00004E90 C605[435D0000]01    <2> 		mov byte [showcursorfonton], 1
  6014 00004E97 E8D91D0000          <2> 		call showfontvesa
  6015 00004E9C C605[435D0000]00    <2> 		mov byte [showcursorfonton], 0
  6016 00004EA3 C3                  <2> 		ret
  6017                              <2> 
  6018 00004EA4 84008400            <2> lastmouseposition dw 132,132
  6019 00004EA8 84008400            <2> mousecursorposition dw 132,132	
  6020                              <2> 
  6021                              <2> termmouse:
  6022 00004EAC BE[B4B80000]        <2> 		mov esi, videobuf
  6023 00004EB1 31D2                <2> 		xor edx, edx
  6024 00004EB3 668B15[A44E0000]    <2> 		mov dx, [lastmouseposition]
  6025 00004EBA 668B0D[A64E0000]    <2> 		mov cx, [lastmouseposition + 2]
  6026 00004EC1 66A1[3F4F0000]      <2> 		mov ax, [cursorcache]
  6027 00004EC7 663D0000            <2> 		cmp ax, 0
  6028 00004ECB 7425                <2> 		je nocopycursorcache
  6029 00004ECD 66C1E104            <2> 		shl cx, 4
  6030 00004ED1 66C1E203            <2> 		shl dx, 3
  6031 00004ED5 01D6                <2> 		add esi, edx
  6032 00004ED7 6631D2              <2> 		xor dx, dx
  6033 00004EDA 8A15[0A230000]      <2> 		mov dl, [charxy]
  6034 00004EE0 6641                <2> 		inc cx
  6035                              <2> termmousecplp1:
  6036 00004EE2 01D6                <2> 		add esi, edx
  6037 00004EE4 6649                <2> 		dec cx
  6038 00004EE6 6681F90000          <2> 		cmp cx, 0
  6039 00004EEB 75F5                <2> 		jne termmousecplp1
  6040 00004EED 29D6                <2> 		sub esi, edx
  6041 00004EEF 668906              <2> 		mov [esi], ax
  6042                              <2> nocopycursorcache:
  6043 00004EF2 BE[B4B80000]        <2> 		mov esi, videobuf
  6044 00004EF7 31D2                <2> 		xor edx, edx
  6045 00004EF9 668B15[A84E0000]    <2> 		mov dx, [mousecursorposition]
  6046 00004F00 668B0D[AA4E0000]    <2> 		mov cx, [mousecursorposition + 2]
  6047 00004F07 66C1E104            <2> 		shl cx, 4
  6048 00004F0B 66C1E203            <2> 		shl dx, 3
  6049 00004F0F 01D6                <2> 		add esi, edx
  6050 00004F11 6631D2              <2> 		xor dx, dx
  6051 00004F14 8A15[0A230000]      <2> 		mov dl, [charxy]
  6052 00004F1A 6641                <2> 		inc cx
  6053                              <2> termmousecplp2:
  6054 00004F1C 01D6                <2> 		add esi, edx
  6055 00004F1E 6649                <2> 		dec cx
  6056 00004F20 6681F90000          <2> 		cmp cx, 0
  6057 00004F25 75F5                <2> 		jne termmousecplp2
  6058 00004F27 29D6                <2> 		sub esi, edx
  6059 00004F29 668B06              <2> 		mov ax, [esi]
  6060 00004F2C 66A3[3F4F0000]      <2> 		mov [cursorcache], ax
  6061 00004F32 B080                <2> 		mov al, 128
  6062 00004F34 B407                <2> 		mov ah, 7
  6063 00004F36 668906              <2> 		mov [esi], ax
  6064 00004F39 E843D5FFFF          <2> 		call termcopy
  6065 00004F3E C3                  <2> 		ret
  6066 00004F3F 0000                <2> cursorcache db 0,0
  6067                              <2> 
  6068                              <2> PS2SET:
  6069 00004F41 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6070 00004F43 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6071 00004F45 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6072 00004F4A C3                  <2> ret
  6073                              <2> 
  6074                              <2> CHKPRT:
  6075 00004F4B 66B96400            <2>   mov  cx, 100
  6076                              <2>  .again:
  6077 00004F4F E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6078 00004F51 A802                <2>   test al, 2		; Check if input buffer is empty
  6079 00004F53 7402                <2>   je .go
  6080 00004F55 E2F8                <2>   loop .again
  6081                              <2>  .go:
  6082 00004F57 C3                  <2> ret
  6083                              <2> 
  6084                              <2> WMOUS:
  6085 00004F58 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6086 00004F5A E664                <2>   out  0x64, al		; write to keyboardcontroller
  6087 00004F5C E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6088 00004F61 C3                  <2> ret
  6089                              <2> 
  6090                              <2> MBUFFUL:
  6091 00004F62 66B96400            <2>   mov cx, 100
  6092                              <2>  .mn:
  6093 00004F66 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6094 00004F68 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6095 00004F6A 7402                <2>   jz  .mnn
  6096 00004F6C E2F8                <2>   loop .mn
  6097                              <2>  .mnn:
  6098 00004F6E C3                  <2> ret
  6099                              <2> 
  6100                              <2> 
  6101                              <2> ACTMOUS:
  6102 00004F6F E8E4FFFFFF          <2>   call WMOUS
  6103 00004F74 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6104 00004F76 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6105 00004F78 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6106 00004F7D E801000000          <2>   call CHKMOUS		; check if a byte is available
  6107 00004F82 C3                  <2> ret
  6108                              <2> 
  6109                              <2> CHKMOUS:
  6110 00004F83 B300                <2>   mov  bl, 0
  6111 00004F85 66B96400            <2>   mov cx, 100
  6112                              <2>  .vrd:
  6113 00004F89 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6114 00004F8B A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6115 00004F8D 7504                <2>   jnz .yy
  6116 00004F8F E2F8                <2>   loop .vrd
  6117 00004F91 B301                <2>   mov  bl, 1
  6118                              <2>  .yy:
  6119 00004F93 C3                  <2> ret
  6120                              <2> 
  6121                              <2> GETB:
  6122                              <2>  .cagain:
  6123 00004F94 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6124 00004F99 08DB                <2>   or bl, bl
  6125 00004F9B 75F7                <2>   jnz .cagain
  6126 00004F9D B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6127 00004F9F E664                <2>   out  0x64, al		; write to keyboardcontroller
  6128 00004FA1 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6129 00004FA6 6631C0              <2>   xor  ax, ax
  6130 00004FA9 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6131 00004FAB 88C2                <2>   mov  dl, al
  6132 00004FAD B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6133 00004FAF E664                <2>   out  0x64, al		; write to keyboardcontroller
  6134 00004FB1 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6135 00004FB6 88D0                <2>   mov  al, dl
  6136 00004FB8 C3                  <2> ret
  6137                              <2> 
  6138 00004FB9 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6139 00004FBA 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6140 00004FBB 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6141 00004FBC 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6142 00004FBD 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6143                              <1> %endif
  6144                              <1> %include "source/drivers/sound/pcspkr.asm"
  6145                              <2> ;PC Speaker Drivers
  6146                              <2> PCSpeakerRAW:
  6147 00004FBE 60                  <2> 	pusha
  6148                              <2> nosoundrep:
  6149 00004FBF 8B35[53020000]      <2> 	mov esi, [soundpos]
  6150 00004FC5 31C9                <2> 	xor ecx, ecx
  6151 00004FC7 668B0D[51020000]    <2> 	mov cx, [soundrepititions]
  6152 00004FCE 6681F90000          <2> 	cmp cx, 0
  6153 00004FD3 0F8548000000        <2> 	jne near donesetpitch
  6154 00004FD9 668B0E              <2> 	mov cx, [esi]
  6155 00004FDC 668B5E02            <2> 	mov bx, [esi + 2]
  6156 00004FE0 66890D[51020000]    <2> 	mov [soundrepititions], cx
  6157 00004FE7 81C604000000        <2> 	add esi, 4
  6158 00004FED 8935[53020000]      <2> 	mov [soundpos], esi
  6159 00004FF3 3B35[57020000]      <2> 	cmp esi, [soundendpos]
  6160 00004FF9 7735                <2> 	ja stopsound
  6161 00004FFB 66813D[51020000]00- <2> 	cmp word [soundrepititions], 0
  6162 00005003 00                  <2>
  6163 00005004 74B9                <2> 	je nosoundrep
  6164 00005006 6681FB0000          <2> 	cmp bx, 0
  6165 0000500B 740F                <2> 	je nosoundplay
  6166 0000500D E840000000          <2> 	call setpitch
  6167 00005012 E849000000          <2> 	call startsound
  6168 00005017 E905000000          <2> 	jmp donesetpitch
  6169                              <2> nosoundplay:
  6170 0000501C E846000000          <2> 	call killsound
  6171                              <2> donesetpitch:
  6172 00005021 6649                <2> 	dec cx
  6173 00005023 66890D[51020000]    <2> 	mov [soundrepititions], cx
  6174 0000502A 61                  <2> 	popa
  6175 0000502B E960B2FFFF          <2> 	jmp timerinterrupt
  6176                              <2> stopsound:
  6177 00005030 31C0                <2> 	xor eax, eax
  6178 00005032 66A3[51020000]      <2> 	mov [soundrepititions], ax
  6179 00005038 A2[50020000]        <2> 	mov [soundon], al
  6180 0000503D A3[53020000]        <2> 	mov [soundpos], eax
  6181 00005042 A3[57020000]        <2> 	mov [soundendpos], eax
  6182 00005047 E81B000000          <2> 	call killsound
  6183 0000504C 61                  <2> 	popa
  6184 0000504D E93EB2FFFF          <2> 	jmp timerinterrupt
  6185                              <2> 
  6186                              <2> 
  6187                              <2> setpitch:
  6188 00005052 B0B6                <2> 	mov al, 0xB6
  6189 00005054 E643                <2> 	out 0x43, al
  6190 00005056 6689D8              <2> 	mov ax, bx
  6191 00005059 E642                <2> 	out 0x42, al
  6192 0000505B 88E0                <2> 	mov al, ah
  6193 0000505D E642                <2> 	out 0x42, al
  6194 0000505F C3                  <2> 	ret
  6195                              <2> startsound:
  6196 00005060 E461                <2> 	in al, 0x61
  6197 00005062 0C03                <2> 	or al, 3
  6198 00005064 E661                <2> 	out 0x61, al
  6199 00005066 C3                  <2> 	ret
  6200                              <2> killsound:
  6201 00005067 E461                <2> 	in al, 0x61
  6202 00005069 24FC                <2> 	and al, 0xFC
  6203 0000506B E661                <2> 	out 0x61, al
  6204 0000506D C3                  <2> 	ret
  6205                              <2> 	
  6206                              <1> %ifdef sound.included
  6207                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6208                              <2> ;Sound Blaster Drivers
  6209                              <2> sblaster:
  6210                              <2> .init:
  6211 0000506E E842010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6212 00005073 A2[0A520000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6213 00005078 3C00                <2> 		cmp al, 0
  6214 0000507A 740E                <2> 		je .noinit
  6215 0000507C B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6216 0000507E E866010000          <2> 		call WriteDSP
  6217 00005083 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6218 00005085 E81C010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6219                              <2> .noinit:
  6220 0000508A C3                  <2> 		ret
  6221                              <2> sblastercont: ;this function goes to the next available portion of a sound, if necessary
  6222 0000508B 66813D[F8510000]00- <2> 	cmp word [Length0], 0
  6223 00005093 00                  <2>
  6224 00005094 0F84A0B2FFFF        <2> 	je near handled2
  6225 0000509A 668B3D[F8510000]    <2> 	mov di, [Length0]
  6226 000050A1 664F                <2> 	dec di
  6227 000050A3 66893D[F8510000]    <2> 	mov [Length0], di
  6228 000050AA A1[FC510000]        <2> 	mov eax, [NextMemLoc]
  6229 000050AF A3[00520000]        <2> 	mov [MemLoc], eax
  6230 000050B4 31C9                <2> 	xor ecx, ecx
  6231 000050B6 66B9FFFF            <2> 	mov cx, 0xFFFF
  6232 000050BA 66890D[FA510000]    <2> 	mov [Length1], cx
  6233 000050C1 01C8                <2> 	add eax, ecx
  6234 000050C3 A3[FC510000]        <2> 	mov [NextMemLoc], eax
  6235 000050C8 E805000000          <2> 	call DMAPlay
  6236 000050CD E968B2FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6237                              <2> 
  6238                              <2> DMAPlay:    ;uses eax ebx edx
  6239 000050D2 66FF0D[FA510000]    <2> 		dec	word [Length1]
  6240 000050D9 C605[04520000]00    <2> 		mov	byte [Page1],00h
  6241                              <2> 
  6242 000050E0 B005                <2> 		mov	al,(Channel+4)
  6243 000050E2 66BA0A00            <2> 		mov	dx,0Ah
  6244 000050E6 EE                  <2> 		out	dx,al
  6245 000050E7 30C0                <2> 		xor	al,al
  6246 000050E9 66BA0C00            <2> 		mov	dx,0Ch
  6247 000050ED EE                  <2> 		out	dx,al
  6248 000050EE B049                <2> 		mov	al,ModeReg
  6249 000050F0 66BA0B00            <2> 		mov	dx,0Bh
  6250 000050F4 EE                  <2> 		out	dx,al
  6251 000050F5 A1[00520000]        <2> 		mov	eax,[MemLoc]
  6252 000050FA 66BA0200            <2> 		mov	dx,AddPort
  6253 000050FE EE                  <2> 		out	dx,al
  6254 000050FF 86C4                <2> 		xchg al,ah
  6255 00005101 EE                  <2> 		out	dx,al
  6256 00005102 A1[00520000]        <2> 		mov	eax,[MemLoc]
  6257 00005107 89C2                <2> 		mov	edx,eax
  6258 00005109 2500000100          <2> 		and	eax,65536
  6259 0000510E 7406                <2> 		jz	MemLocN1
  6260 00005110 FE05[04520000]      <2> 		inc	byte [Page1]
  6261                              <2> MemLocN1:
  6262 00005116 89D0                <2> 		mov	eax,edx
  6263 00005118 2500000200          <2> 		and	eax,131072
  6264 0000511D 7407                <2> 		jz	MemLocN2
  6265 0000511F 8005[04520000]02    <2> 		add	byte [Page1],02
  6266                              <2> MemLocN2:
  6267 00005126 89D0                <2> 		mov	eax,edx
  6268 00005128 2500000400          <2> 		and	eax,262144
  6269 0000512D 7407                <2> 		jz	MemLocN3
  6270 0000512F 8005[04520000]04    <2> 		add	byte [Page1],04
  6271                              <2> MemLocN3:
  6272 00005136 89D0                <2> 		mov	eax,edx
  6273 00005138 2500000800          <2> 		and	eax,524288
  6274 0000513D 7407                <2> 		jz	MemLocN4
  6275 0000513F 8005[04520000]08    <2> 		add	byte [Page1],08
  6276                              <2> MemLocN4:
  6277 00005146 66BA8300            <2> 		mov	dx,PgPort
  6278 0000514A A0[04520000]        <2> 		mov	al,[Page1]
  6279 0000514F EE                  <2> 		out	dx,al
  6280 00005150 66BA0300            <2> 		mov	dx,LenPort
  6281 00005154 66A1[FA510000]      <2> 		mov	ax,[Length1]
  6282 0000515A EE                  <2> 		out	dx,al
  6283 0000515B 86C4                <2> 		xchg al,ah
  6284 0000515D EE                  <2> 		out	dx,al
  6285 0000515E 66BA0A00            <2> 		mov	dx,0Ah
  6286 00005162 B001                <2> 		mov	al,Channel
  6287 00005164 EE                  <2> 		out	dx,al
  6288                              <2> 		
  6289 00005165 B040                <2> 		mov	al,40h
  6290 00005167 E87D000000          <2> 		call WriteDSP
  6291 0000516C 31D2                <2> 		xor	edx,edx
  6292 0000516E B840420F00          <2> 		mov	eax,1000000
  6293 00005173 8B1D[05520000]      <2> 		mov	ebx,[Freq]
  6294 00005179 F7F3                <2> 		div	ebx
  6295 0000517B 89C3                <2> 		mov	ebx,eax
  6296 0000517D B800010000          <2> 		mov	eax,256
  6297 00005182 29D8                <2> 		sub	eax,ebx
  6298 00005184 E860000000          <2> 		call WriteDSP
  6299 00005189 A0[09520000]        <2> 		mov	al,[WAVEMode]	;write the mode
  6300 0000518E E856000000          <2> 		call WriteDSP
  6301 00005193 66A1[FA510000]      <2> 		mov	ax,[Length1]
  6302 00005199 E84B000000          <2> 		call WriteDSP
  6303 0000519E 86C4                <2> 		xchg al,ah
  6304 000051A0 E844000000          <2> 		call WriteDSP
  6305 000051A5 C3                  <2> 		ret
  6306                              <2> 
  6307                              <2> MstrVol:    ;uses ax dx
  6308 000051A6 6650                <2> 	   push ax
  6309 000051A8 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6310 000051AC B022                <2> 	   mov	al,22h
  6311 000051AE EE                  <2> 	   out	dx,al
  6312 000051AF 6658                <2> 	   pop	ax
  6313 000051B1 6642                <2> 	   inc	dx
  6314 000051B3 EE                  <2> 	   out	dx,al
  6315 000051B4 C3                  <2> 	   ret
  6316                              <2> 	   
  6317                              <2> ResetDSP:   ; uses cx dx
  6318 000051B5 66BA2602            <2> 			mov	dx,(BasePort+6)
  6319 000051B9 B001                <2> 			mov	al,01
  6320 000051BB EE                  <2> 			out	dx,al
  6321 000051BC 66B93200            <2> 			mov	cx,50
  6322 000051C0 EC                  <2> WaitIt1:	in	al,dx
  6323 000051C1 E2FD                <2> 			loop WaitIt1
  6324 000051C3 30C0                <2> 			xor	al,al
  6325 000051C5 EE                  <2> 			out	dx,al
  6326 000051C6 66B93200            <2> 			mov	cx,50
  6327 000051CA EC                  <2> WaitIt2:	in	al,dx
  6328 000051CB E2FD                <2> 			loop WaitIt2
  6329 000051CD B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6330 000051CF 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6331 000051D3 EC                  <2> 			in	al,dx
  6332 000051D4 2480                <2> 			and	al,80h
  6333 000051D6 3C80                <2> 			cmp	al,80h
  6334 000051D8 750C                <2> 			jne	ResetErr
  6335 000051DA 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6336 000051DE EC                  <2> 			in	al,dx
  6337 000051DF 3CAA                <2> 			cmp	al,0AAh
  6338 000051E1 7503                <2> 			jne	ResetErr
  6339 000051E3 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6340 000051E5 C3                  <2> 			ret
  6341 000051E6 30C0                <2> ResetErr:	xor al, al
  6342 000051E8 C3                  <2> 			ret
  6343                              <2> 
  6344                              <2> WriteDSP:   ;uses ax dx
  6345 000051E9 6650                <2> 		push ax
  6346 000051EB 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6347 000051EF EC                  <2> WaitIt:	in	al,dx
  6348 000051F0 2480                <2> 		and	al,80h
  6349 000051F2 75FB                <2> 		jnz	WaitIt
  6350 000051F4 6658                <2> 		pop	ax
  6351 000051F6 EE                  <2> 		out	dx,al
  6352 000051F7 C3                  <2> 		ret
  6353                              <2> 
  6354 000051F8 0000                <2> Length0 dw	0
  6355 000051FA 0000                <2> Length1	dw  0
  6356 000051FC 00000000            <2> NextMemLoc dd 0
  6357 00005200 00000000            <2> MemLoc	dd  0
  6358 00005204 00                  <2> Page1	db  0
  6359 00005205 00000000            <2> Freq	dd	0
  6360 00005209 14                  <2> WAVEMode db 14h
  6361                              <2> PgPort	equ 83h
  6362                              <2> AddPort	equ 02h
  6363                              <2> LenPort	equ 03h
  6364                              <2> ModeReg	equ 49h
  6365                              <2> Channel	equ 01h
  6366                              <2> BasePort	equ 220h
  6367 0000520A 00                  <2> SoundBlaster	db 0
  6368                              <1> %endif
  6369                              <1> %ifdef rtl8139.included
  6370                              <1> 	%include "source/drivers/network/rtl8139.asm"
  6371                              <2> ;RTL8139 NIC DRIVER
  6372                              <2> rtl8139:
  6373                              <2> .RBSTART equ 0x30
  6374                              <2> .IMR equ 0x3C
  6375                              <2> .ISR equ 0x3E
  6376                              <2> .CMD equ 0x37
  6377                              <2> .RCR equ 0x44
  6378                              <2> .CONFIG1 equ 0x52
  6379                              <2> .TSD0 equ 0x10
  6380                              <2> .TSAD0 equ 0x20
  6381                              <2> .initcard:	;should find card, get mac, and initialize card
  6382 0000520B 31C0                <2> 	xor eax, eax
  6383 0000520D A2[AC570000]        <2> 	mov [pcifunction], al
  6384 00005212 A2[AA570000]        <2> 	mov [pcibus], al
  6385 00005217 A2[AB570000]        <2> 	mov [pcidevice], al
  6386 0000521C B002                <2> 	mov al, 0x02 ;;type code
  6387 0000521E A2[27580000]        <2> 	mov [pcitype], al
  6388 00005223 E887050000          <2> 	call getpciport
  6389                              <2> .initnic:	;Here i tried the rtl8139 interface, fuck it
  6390 00005228 8915[DB530000]      <2> 	mov [basenicaddr], edx
  6391 0000522E 89D1                <2> 	mov ecx, edx
  6392 00005230 E80BDBFFFF          <2> 	call showhex	;for debugging, please remove
  6393 00005235 BE[BC680100]        <2> 	mov esi, rbuffstart
  6394 0000523A B900200000          <2> 	mov ecx, 8192
  6395 0000523F 31C0                <2> 	xor eax, eax
  6396                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  6397 00005241 8806                <2> 	mov [esi], al
  6398 00005243 46                  <2> 	inc esi
  6399 00005244 6649                <2> 	dec cx
  6400 00005246 6681F90000          <2> 	cmp cx, 0
  6401 0000524B 75F4                <2> 	jne .clearrbuff
  6402                              <2> .findmac:
  6403 0000524D 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6404 00005253 BF[E3530000]        <2> 	mov edi, sysmac
  6405 00005258 B906000000          <2> 	mov ecx, 6
  6406                              <2> .macputloop:
  6407 0000525D EC                  <2> 	in al, dx
  6408 0000525E 8807                <2> 	mov [edi], al
  6409 00005260 47                  <2> 	inc edi
  6410 00005261 42                  <2> 	inc edx
  6411 00005262 49                  <2> 	dec ecx
  6412 00005263 75F8                <2> 	jnz .macputloop
  6413 00005265 B9[E3530000]        <2> 	mov ecx, sysmac
  6414 0000526A E803010000          <2> 	call showmac
  6415                              <2> .resetnic:
  6416 0000526F 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6417 00005275 81C252000000        <2> 	add edx, .CONFIG1
  6418 0000527B 30C0                <2> 	xor al, al
  6419 0000527D EE                  <2> 	out dx, al	;WAKE UP!!!!
  6420 0000527E 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6421 00005284 81C237000000        <2> 	add edx, .CMD
  6422 0000528A B010                <2> 	mov al, 0x10
  6423 0000528C EE                  <2> 	out dx, al	;Reset
  6424                              <2> .resetnicwait:
  6425 0000528D 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6426 00005293 81C237000000        <2> 	add edx, .CMD
  6427 00005299 EC                  <2> 	in al, dx
  6428 0000529A 2410                <2> 	and al, 0x10
  6429 0000529C 3C10                <2> 	cmp al, 0x10
  6430 0000529E 0F84E9FFFFFF        <2> 	je near .resetnicwait
  6431 000052A4 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6432 000052AA 81C230000000        <2> 	add edx, .RBSTART
  6433 000052B0 B8[BC680100]        <2> 	mov eax, rbuffstart
  6434 000052B5 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
  6435 000052BA EF                  <2> 	out dx, eax	;give nic receive buffer location
  6436 000052BB 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6437 000052C1 81C23C000000        <2> 	add edx, .IMR
  6438 000052C7 66ED                <2> 	in ax, dx
  6439 000052C9 660D7FE0            <2> 	or ax, 0xE07F ;set all possible interrupts to enabled
  6440 000052CD 66EF                <2> 	out dx, ax	;set TOK and ROK
  6441 000052CF 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6442 000052D5 81C244000000        <2> 	add edx, .RCR
  6443 000052DB B80F000000          <2> 	mov eax, 0xf
  6444 000052E0 0580000000          <2> 	add eax, 128 ;enable wrap option
  6445 000052E5 EF                  <2> 	out dx, eax	;recieve packets from all matches
  6446 000052E6 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6447 000052EC 81C237000000        <2> 	add edx, .CMD
  6448 000052F2 B00C                <2> 	mov al, 0x0C
  6449 000052F4 EE                  <2> 	out dx, al	;use transmit and receive
  6450 000052F5 C605[DA530000]01    <2> 	mov byte [nicconfig], 1
  6451 000052FC C3                  <2> 	ret
  6452                              <2> 	
  6453                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  6454 000052FD 56                  <2> 	push esi
  6455 000052FE 57                  <2> 	push edi
  6456                              <2> .nic2:		;here come the low level drivers :(
  6457                              <2> 			;frame begins at esi, ends at edi
  6458                              <2>  			;0x0200 is the class code for ethernet cards
  6459 000052FF 803D[DA530000]01    <2> 	cmp byte [nicconfig], 1
  6460 00005306 7405                <2> 	je .sendcachedata
  6461 00005308 E8FEFEFFFF          <2> 	call .initcard
  6462                              <2> .sendcachedata:
  6463 0000530D 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6464 00005313 81C220000000        <2> 	add edx, .TSAD0
  6465 00005319 5F                  <2> 	pop edi
  6466 0000531A 89F8                <2> 	mov eax, edi
  6467 0000531C 0500001000          <2> 	add eax, 0x100000 ;base address
  6468 00005321 EF                  <2> 	out dx, eax	;here's Johnny!
  6469 00005322 5E                  <2> 	pop esi
  6470 00005323 29FE                <2> 	sub esi, edi
  6471 00005325 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6472 0000532B 81C210000000        <2> 	add edx, .TSD0
  6473 00005331 ED                  <2> 	in eax, dx ;get tsd
  6474 00005332 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
  6475 00005337 01F0                <2> 	add eax, esi ;add length to tsd
  6476 00005339 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
  6477 0000533E EF                  <2> 	out dx, eax
  6478                              <2> .checknicownbit:
  6479 0000533F 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6480 00005345 81C210000000        <2> 	add edx, .TSD0
  6481 0000534B ED                  <2> 	in eax, dx
  6482 0000534C 2500200000          <2> 	and eax, 0x2000 ;check own bit
  6483 00005351 3D00200000          <2> 	cmp eax, 0x2000
  6484 00005356 75E7                <2> 	jne .checknicownbit
  6485                              <2> .checknictokbit:
  6486 00005358 8B15[DB530000]      <2> 	mov edx, [basenicaddr]
  6487 0000535E 81C210000000        <2> 	add edx, .TSD0
  6488 00005364 ED                  <2> 	in eax, dx
  6489 00005365 2500800000          <2> 	and eax, 0x8000	;check tok bit
  6490 0000536A 3D00800000          <2> 	cmp eax, 0x8000
  6491 0000536F 75E7                <2> 	jne .checknictokbit
  6492 00005371 C3                  <2> 	ret
  6493                              <2> 	
  6494                              <2> showmac:	;mac begins in [ecx]
  6495 00005372 BE[C2530000]        <2> 	mov esi, macprint
  6496 00005377 89CF                <2> 	mov edi, ecx
  6497 00005379 81C106000000        <2> 	add ecx, 6
  6498                              <2> showmacloop:
  6499 0000537F 8A07                <2> 	mov al, [edi]
  6500 00005381 8A27                <2> 	mov ah, [edi]
  6501 00005383 C0E804              <2> 	shr al, 4
  6502 00005386 C0E404              <2> 	shl ah, 4
  6503 00005389 C0EC04              <2> 	shr ah, 4
  6504 0000538C 0430                <2> 	add al, 48
  6505 0000538E 3C39                <2> 	cmp al, "9"
  6506 00005390 7606                <2> 	jbe .goodal
  6507 00005392 2C30                <2> 	sub al, 48
  6508 00005394 2C0A                <2> 	sub al, 0xA
  6509 00005396 0441                <2> 	add al, "A"
  6510                              <2> .goodal:
  6511 00005398 80C430              <2> 	add ah, 48
  6512 0000539B 80FC39              <2> 	cmp ah, "9"
  6513 0000539E 7609                <2> 	jbe .goodah
  6514 000053A0 80EC30              <2> 	sub ah, 48
  6515 000053A3 80EC0A              <2> 	sub ah, 0xA
  6516 000053A6 80C441              <2> 	add ah, "A"
  6517                              <2> .goodah:
  6518 000053A9 668906              <2> 	mov [esi], ax
  6519 000053AC 81C603000000        <2> 	add esi, 3
  6520 000053B2 47                  <2> 	inc edi
  6521 000053B3 39CF                <2> 	cmp edi, ecx
  6522 000053B5 72C8                <2> 	jb showmacloop
  6523 000053B7 BE[C2530000]        <2> 	mov esi, macprint
  6524 000053BC E8B7C8FFFF          <2> 	call print
  6525 000053C1 C3                  <2> 	ret
  6526                              <2> 	
  6527 000053C2 30303A30303A30303A- <2> macprint db "00:00:00:00:00:00  ",0
  6528 000053CB 30303A30303A303020- <2>
  6529 000053D4 2000                <2>
  6530 000053D6 00000000            <2> ethernetend dw 0,0
  6531 000053DA 00                  <2> nicconfig db 0
  6532 000053DB 00000000            <2> basenicaddr	db 0,0,0,0
  6533 000053DF C0A80005            <2> sysip db 192,168,0,5
  6534 000053E3 000000000000        <2> sysmac	db 0,0,0,0,0,0		;my mac address
  6535                              <1> %endif
  6536                              <1> %include "source/drivers/input/keyboard.asm"
  6537 000053E9 00                  <2> specialkey db 0
  6538 000053EA 00                  <2> charregion db 0
  6539                              <2> waitforinput:		;;this is basically the idle process
  6540                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6541                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6542 000053EB 6631C0              <2> 	xor ax, ax
  6543 000053EE A0[C75B0000]        <2> 	mov al, [threadson]
  6544 000053F3 8825[C75B0000]      <2> 	mov [threadson], ah
  6545 000053F9 FB                  <2> 	sti
  6546 000053FA F4                  <2> 	hlt
  6547 000053FB A2[C75B0000]        <2> 	mov [threadson], al
  6548 00005400 3A25[22210000]      <2> 	cmp ah, [trans]
  6549 00005406 7401                <2> 	je getkey
  6550 00005408 C3                  <2> 	ret
  6551                              <2> getkey:
  6552 00005409 31C0                <2> 		xor eax, eax
  6553 0000540B A2[E9530000]        <2> 		mov [specialkey], al
  6554 00005410 66A3[20210000]      <2> 		mov [lastkey], ax
  6555 00005416 E464                <2> 		in al, 64h ; Status
  6556                              <2> %ifdef gui.included
  6557 00005418 A820                <2> 		test al, 20h ; PS2-Mouse?
  6558 0000541A 0F85E5F8FFFF        <2> 		jnz near moused
  6559                              <2> %endif
  6560 00005420 A801                <2> 		test al, 1 
  6561 00005422 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  6562                              <2> 	calckey:
  6563 00005424 E460                <2> 		in al, 60h
  6564 00005426 88C4                <2> 		mov ah, al
  6565 00005428 30C0                <2> 		xor al, al
  6566 0000542A 8825[21210000]      <2> 		mov [lastkey + 1], ah
  6567 00005430 88E0                <2> 		mov al, ah
  6568 00005432 BF[CB550000]        <2> 		mov edi, scancode
  6569                              <2> 	searchscan: 
  6570 00005437 3C3A                <2> 		cmp al, 3Ah
  6571 00005439 731A                <2> 		jae scanother
  6572 0000543B 30E4                <2> 		xor ah, ah
  6573 0000543D C0E002              <2> 		shl al, 2
  6574 00005440 01C7                <2> 		add edi, eax
  6575 00005442 D0E8                <2> 		shr al, 1
  6576 00005444 01C7                <2> 		add edi, eax
  6577 00005446 D0E8                <2> 		shr al, 1
  6578 00005448 8A27                <2> 		mov ah, [edi]
  6579 0000544A 80FC00              <2> 		cmp ah, 0
  6580 0000544D 7406                <2> 		je scanother
  6581 0000544F E9D7000000          <2> 		jmp scanfound
  6582 00005454 00                  <2> uppercase db 0
  6583                              <2> scanother:
  6584 00005455 88C4                <2> 		mov ah, al
  6585 00005457 30C0                <2> 		xor al, al
  6586 00005459 66A3[20210000]      <2> 		mov [lastkey], ax
  6587 0000545F 80FCE0              <2> 		cmp ah, 0E0h
  6588 00005462 0F847D000000        <2> 		je near getkeyspecial
  6589 00005468 803D[E9530000]E0    <2> 		cmp byte [specialkey], 0xE0
  6590 0000546F 752B                <2> 		jne nospecialkey
  6591 00005471 80FC38              <2> 		cmp ah, 38h
  6592 00005474 0F84A0000000        <2> 		je near alton
  6593 0000547A 80FCB8              <2> 		cmp ah, 0B8h
  6594 0000547D 0F849F000000        <2> 		je near altoff
  6595 00005483 80FC1D              <2> 		cmp ah, 1Dh
  6596 00005486 0F847E000000        <2> 		je near ctron
  6597 0000548C 80FC9D              <2> 		cmp ah, 9Dh
  6598 0000548F 0F847D000000        <2> 		je near ctroff
  6599 00005495 66A3[20210000]      <2> 		mov [lastkey], ax
  6600 0000549B C3                  <2> 		ret
  6601                              <2> nospecialkey:
  6602 0000549C 80FC2A              <2> 		cmp ah, 2Ah
  6603 0000549F 0F8455000000        <2> 		je near shifton
  6604 000054A5 80FC36              <2> 		cmp ah, 36h
  6605 000054A8 0F844C000000        <2> 		je near shifton
  6606 000054AE 80FC1C              <2> 		cmp ah, 1Ch
  6607 000054B1 0F8473000000        <2> 		je near entdown
  6608 000054B7 80FCAA              <2> 		cmp ah, 0AAh
  6609 000054BA 0F8442000000        <2> 		je near shiftoff
  6610 000054C0 80FCB6              <2> 		cmp ah, 0B6h
  6611 000054C3 0F8439000000        <2> 		je near shiftoff
  6612 000054C9 80FC3A              <2> 		cmp ah, 3Ah
  6613 000054CC 0F84A5000000        <2> 		je near capslock
  6614 000054D2 80FC45              <2> 		cmp ah, 0x45
  6615 000054D5 0F84AD000000        <2> 		je near numlock
  6616 000054DB 80FC46              <2> 		cmp ah, 0x46
  6617 000054DE 0F84BC000000        <2> 		je near scrolllock
  6618 000054E4 C3                  <2> 		ret
  6619                              <2> 	getkeyspecial:
  6620 000054E5 C605[E9530000]E0    <2> 		mov byte [specialkey], 0xE0
  6621 000054EC E933FFFFFF          <2> 		jmp calckey
  6622                              <2> 	shift:
  6623 000054F1 A0[54540000]        <2> 		mov al, [uppercase]
  6624 000054F6 3C01                <2> 		cmp al, 1
  6625 000054F8 7308                <2> 		jae shiftoff
  6626                              <2> 	shifton:
  6627 000054FA C605[54540000]01    <2> 		mov byte [uppercase], 1
  6628 00005501 C3                  <2> 		ret
  6629                              <2> 	shiftoff:
  6630 00005502 C605[54540000]00    <2> 		mov byte [uppercase], 0
  6631 00005509 C3                  <2> 		ret
  6632                              <2> 	ctron:
  6633 0000550A C605[76550000]01    <2> 		mov byte [ctrkey], 1
  6634 00005511 C3                  <2> 		ret
  6635                              <2> 	ctroff:
  6636 00005512 C605[76550000]00    <2> 		mov byte [ctrkey], 0
  6637 00005519 C3                  <2> 		ret
  6638                              <2> 	alton:
  6639 0000551A C605[75550000]01    <2> 		mov byte [altkey], 1
  6640 00005521 C3                  <2> 		ret
  6641                              <2> 	altoff:
  6642 00005522 C605[75550000]00    <2> 		mov byte [altkey], 0
  6643 00005529 C3                  <2> 		ret
  6644                              <2> 	entdown:
  6645 0000552A C3                  <2> 		ret
  6646                              <2> 	scanfound:
  6647 0000552B 81C704000000        <2> 		add edi, 4
  6648 00005531 803D[76550000]01    <2> 		cmp byte [ctrkey], 1
  6649 00005538 731B                <2> 		jae altin
  6650 0000553A 81EF04000000        <2> 		sub edi, 4
  6651 00005540 81C702000000        <2> 		add edi, 2
  6652 00005546 803D[75550000]01    <2> 		cmp byte [altkey], 1
  6653 0000554D 7306                <2> 		jae altin
  6654 0000554F 81EF02000000        <2> 		sub edi, 2
  6655                              <2> altin:
  6656 00005555 81C701000000        <2> 		add edi, 1
  6657 0000555B 803D[54540000]01    <2> 		cmp byte [uppercase], 1
  6658 00005562 7306                <2> 		jae uppercaseon
  6659 00005564 81EF01000000        <2> 		sub edi, 1
  6660                              <2> uppercaseon:
  6661 0000556A 8A07                <2> 		mov al,[edi]
  6662 0000556C A2[20210000]        <2> 		mov [lastkey], al
  6663 00005571 C3                  <2> 		ret
  6664                              <2> 		
  6665 00005572 00                  <2> keyboardstatus db 0
  6666 00005573 00                  <2> numlockstatus db 0
  6667 00005574 00                  <2> scrolllockstatus db 0
  6668 00005575 00                  <2> altkey db 0
  6669 00005576 00                  <2> ctrkey db 0
  6670                              <2> 	capslock:
  6671 00005577 8035[72550000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6672 0000557E E835000000          <2> 		call updatekblights
  6673 00005583 E969FFFFFF          <2> 		jmp shift
  6674                              <2> 		
  6675                              <2> 	numlock:
  6676 00005588 8035[72550000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6677 0000558F 8035[73550000]01    <2> 		xor byte [numlockstatus], 1
  6678 00005596 E81D000000          <2> 		call updatekblights
  6679 0000559B E969FEFFFF          <2> 		jmp getkey
  6680                              <2> 	
  6681                              <2> 	scrolllock:
  6682 000055A0 8035[72550000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6683 000055A7 8035[74550000]01    <2> 		xor byte [scrolllockstatus], 1
  6684 000055AE E805000000          <2> 		call updatekblights
  6685 000055B3 E951FEFFFF          <2> 		jmp getkey
  6686                              <2> 		
  6687                              <2> 	updatekblights:
  6688 000055B8 B0ED                <2> 		mov al, 0xED
  6689 000055BA 66BA6000            <2> 		mov dx, 0x60
  6690 000055BE EE                  <2> 		out dx, al
  6691                              <2> 	chkkbdack:
  6692 000055BF EC                  <2> 		in al, dx
  6693 000055C0 3CFA                <2> 		cmp al, 0xFA
  6694 000055C2 75FB                <2> 		jne chkkbdack
  6695 000055C4 A0[72550000]        <2> 		mov al, [keyboardstatus]
  6696 000055C9 EE                  <2> 		out dx, al
  6697 000055CA C3                  <2> 		ret
  6698                              <2> 		
  6699                              <2> scancode:
  6700 000055CB 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6701 000055D1 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6702 000055D7 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6703 000055DD 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6704 000055E3 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6705 000055E9 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6706 000055EF 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6707 000055F5 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6708 000055FB 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6709 00005601 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6710 00005607 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6711 0000560D 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6712 00005613 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6713 00005619 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6714 0000561F 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6715 00005625 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6716 0000562B 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6717 00005631 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6718 00005637 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6719 0000563D 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6720 00005643 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6721 00005649 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6722 0000564F 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6723 00005655 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6724 0000565B 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6725 00005661 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6726 00005667 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6727 0000566D 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6728 00005673 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6729 00005679 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6730 0000567F 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6731 00005685 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6732 0000568B 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6733 00005691 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6734 00005697 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6735 0000569D 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6736 000056A3 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6737 000056A9 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6738 000056AF 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6739 000056B5 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6740 000056BB 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6741 000056C1 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6742 000056C7 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6743 000056CD 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6744 000056D3 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6745 000056D9 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6746 000056DF 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6747 000056E5 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6748 000056EB 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6749 000056F1 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6750 000056F7 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6751 000056FD 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6752 00005703 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6753 00005709 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6754 0000570F 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6755 00005715 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6756 0000571B 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6757 00005721 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6758                              <2> noscan:
  6759                              <2> 
  6760                              <1> ;drivers will soon be handled intelligently
  6761                              <1> ;every driver's source will be scanned for a .init function
  6762                              <1> ;that will be called and if it returns 0
  6763                              <1> ;the hardware was found and the driver initialized properly
  6764                              <1> initialize:
  6765                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6766 00005727 E814000000          <1> 	call .pic
  6767 0000572C E83C000000          <1> 	call .pit
  6768 00005731 E85E000000          <1> 	call .fpu
  6769 00005736 31C0                <1> 	xor eax, eax
  6770 00005738 31C9                <1> 	xor ecx, ecx
  6771                              <1> %ifdef sound.included
  6772 0000573A E82FF9FFFF          <1> 	call sblaster.init
  6773                              <1> %endif
  6774 0000573F C3                  <1> 	ret
  6775                              <1> 	
  6776                              <1> .pic:
  6777 00005740 B011                <1> 	mov al, 0x11
  6778 00005742 E620                <1> 	out 0x20, al
  6779 00005744 E6A0                <1> 	out 0xA0, al
  6780 00005746 B040                <1> 	mov al, 0x40	;interrupt for master
  6781 00005748 E621                <1> 	out 0x21, al
  6782 0000574A B048                <1> 	mov al, 0x48	;interrupt for slave
  6783 0000574C E6A1                <1> 	out 0xA1, al
  6784 0000574E B004                <1> 	mov al, 4
  6785 00005750 E621                <1> 	out 0x21, al
  6786 00005752 B002                <1> 	mov al, 2
  6787 00005754 E6A1                <1> 	out 0xA1, al
  6788 00005756 B001                <1> 	mov al, 0x1
  6789 00005758 E621                <1> 	out 0x21, al
  6790 0000575A B001                <1> 	mov al, 0x1
  6791 0000575C E6A1                <1> 	out 0xA1, al
  6792                              <1> 	;masks are set to zero so as not to mask
  6793 0000575E 30C0                <1> 	xor al, al
  6794 00005760 E621                <1> 	out 0x21, al
  6795 00005762 30C0                <1> 	xor al, al
  6796 00005764 E6A1                <1> 	out 0xA1, al
  6797 00005766 B020                <1> 	mov al, 0x20
  6798 00005768 E6A0                <1> 	out 0xA0, al
  6799 0000576A E620                <1> 	out 0x20, al
  6800 0000576C C3                  <1> 	ret
  6801                              <1> .pit:
  6802                              <1> 	;initialize the PIT
  6803 0000576D 66A1[42020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6804 00005773 E640                <1> 	out 0x40, al
  6805 00005775 66C1C008            <1> 	rol ax, 8
  6806 00005779 E640                <1> 	out 0x40, al
  6807                              <1> 	;enable rtc interrupt
  6808 0000577B B00B                <1> 	mov al, 0xB
  6809 0000577D E670                <1> 	out 0x70, al
  6810 0000577F 66C1C008            <1> 	rol ax, 8
  6811 00005783 E471                <1> 	in al, 0x71
  6812 00005785 66C1C008            <1> 	rol ax, 8
  6813 00005789 E670                <1> 	out 0x70, al
  6814 0000578B 66C1C008            <1> 	rol ax, 8
  6815 0000578F 0C40                <1> 	or al, 0x40
  6816 00005791 E671                <1> 	out 0x71, al
  6817 00005793 C3                  <1> 	ret
  6818                              <1> .fpu:
  6819                              <1> 	;And now to initialize the fpu
  6820 00005794 0F20E0              <1> 	mov eax, cr4
  6821 00005797 0D00020000          <1> 	or eax, 0x200
  6822 0000579C 0F22E0              <1> 	mov cr4, eax
  6823 0000579F B87F0B0000          <1> 	mov eax, 0xB7F
  6824 000057A4 50                  <1> 	push eax
  6825 000057A5 D92C24              <1> 	fldcw [esp]
  6826 000057A8 58                  <1> 	pop eax
  6827 000057A9 C3                  <1> 	ret
  6828                              <1> 	
  6829                                      %include "source/pci.asm"
  6830 000057AA 00                  <1> pcibus		db 0
  6831 000057AB 00                  <1> pcidevice	db 0
  6832 000057AC 00                  <1> pcifunction	db 0
  6833 000057AD 00                  <1> pciregister	db 0
  6834 000057AE 00                  <1> pcireqtype db 0
  6835                              <1> 
  6836                              <1> getpciport:
  6837 000057AF B001                <1> 	mov al, 1
  6838 000057B1 A2[AE570000]        <1> 	mov [pcireqtype], al
  6839 000057B6 E916000000          <1> 	jmp searchpci
  6840                              <1> pcidump:
  6841 000057BB 31C0                <1> 	xor eax, eax
  6842 000057BD A2[AC570000]        <1> 	mov [pcifunction], al
  6843 000057C2 A2[AA570000]        <1> 	mov [pcibus], al
  6844 000057C7 A2[AB570000]        <1> 	mov [pcidevice], al
  6845 000057CC A2[AE570000]        <1> 	mov [pcireqtype], al
  6846                              <1> searchpci:		;;return in ebx, start X in pciX
  6847 000057D1 30C0                <1> 	xor al, al
  6848 000057D3 A2[AD570000]        <1> 	mov [pciregister], al
  6849 000057D8 E855010000          <1> 	call getpciaddr
  6850 000057DD BAF80C0000          <1> 	mov edx, 0xCF8
  6851 000057E2 EF                  <1> 	out dx, eax	;;request pci config
  6852 000057E3 BAFC0C0000          <1> 	mov edx, 0xCFC
  6853 000057E8 ED                  <1> 	in eax, dx 	;;read in pci config
  6854 000057E9 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  6855 000057EE 0F8237000000        <1> 	jb near checkpcidevice
  6856                              <1> searchpciret:
  6857                              <1> nextpcidevice:
  6858 000057F4 30C0                <1> 	xor al, al
  6859 000057F6 A2[AC570000]        <1> 	mov [pcifunction], al
  6860 000057FB A0[AB570000]        <1> 	mov al, [pcidevice]
  6861 00005800 3C1F                <1> 	cmp al, 11111b
  6862 00005802 0F83C1000000        <1> 	jae near nextpcibus
  6863 00005808 FEC0                <1> 	inc al
  6864 0000580A A2[AB570000]        <1> 	mov [pcidevice], al
  6865 0000580F EBC0                <1> 	jmp searchpci
  6866 00005811 A0[AC570000]        <1> 	mov al, [pcifunction]
  6867 00005816 3C07                <1> 	cmp al, 111b
  6868 00005818 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  6869 0000581E FEC0                <1> 	inc al
  6870 00005820 A2[AC570000]        <1> 	mov [pcifunction], al
  6871 00005825 EBAA                <1> 	jmp searchpci
  6872 00005827 00000000            <1> pcitype: db 0,0,0,0
  6873                              <1> checkpcidevice:
  6874 0000582B 30C0                <1> 	xor al, al
  6875 0000582D 3805[AE570000]      <1> 	cmp [pcireqtype], al
  6876 00005833 0F842B000000        <1> 	je near dumppcidevice
  6877 00005839 B008                <1> 	mov al, 0x08
  6878 0000583B A2[AD570000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  6879 00005840 E8ED000000          <1> 	call getpciaddr
  6880 00005845 BAF80C0000          <1> 	mov edx, 0xCF8
  6881 0000584A EF                  <1> 	out dx, eax
  6882 0000584B BAFC0C0000          <1> 	mov edx, 0xCFC
  6883 00005850 ED                  <1> 	in eax, dx
  6884 00005851 C1C008              <1> 	rol eax, 8
  6885 00005854 8A1D[27580000]      <1> 	mov bl, [pcitype]
  6886 0000585A 38D8                <1> 	cmp al, bl
  6887 0000585C 0F8486000000        <1> 	je near foundpciaddr
  6888 00005862 EB90                <1> 	jmp searchpciret
  6889                              <1> dumppcidevice:
  6890 00005864 30C0                <1> 	xor al, al
  6891 00005866 A2[AD570000]        <1> 	mov [pciregister], al
  6892 0000586B E8C2000000          <1> 	call getpciaddr
  6893 00005870 89C1                <1> 	mov ecx, eax
  6894 00005872 C605[2B2D0000]05    <1> 	mov byte [firsthexshown], 5
  6895 00005879 E8C2D4FFFF          <1> 	call showhex
  6896                              <1> dumppcidevicelp:
  6897 0000587E A2[AD570000]        <1> 	mov [pciregister], al
  6898 00005883 E8AA000000          <1> 	call getpciaddr
  6899 00005888 BAF80C0000          <1> 	mov edx, 0xCF8
  6900 0000588D EF                  <1> 	out dx, eax
  6901 0000588E BAFC0C0000          <1> 	mov edx, 0xCFC
  6902 00005893 ED                  <1> 	in eax, dx
  6903 00005894 89C1                <1> 	mov ecx, eax
  6904 00005896 A0[AD570000]        <1> 	mov al, [pciregister]
  6905 0000589B 0404                <1> 	add al, 4
  6906 0000589D C605[2B2D0000]05    <1> 	mov byte [firsthexshown], 5
  6907 000058A4 E897D4FFFF          <1> 	call showhex
  6908 000058A9 3C3C                <1> 	cmp al, 0x3C
  6909 000058AB 72D1                <1> 	jb dumppcidevicelp
  6910                              <1> dumppcidn:
  6911 000058AD 803D[08230000]00    <1> 	cmp byte [charpos], 0
  6912 000058B4 0F843AFFFFFF        <1> 	je near searchpciret
  6913 000058BA BE[2A730000]        <1> 	mov esi, line
  6914 000058BF E8B4C3FFFF          <1> 	call print
  6915 000058C4 E92BFFFFFF          <1> 	jmp searchpciret
  6916                              <1> nextpcibus:
  6917 000058C9 30C0                <1> 	xor al, al
  6918 000058CB A2[AB570000]        <1> 	mov [pcidevice], al
  6919 000058D0 A0[AA570000]        <1> 	mov al, [pcibus]
  6920 000058D5 3C7F                <1> 	cmp al, 1111111b
  6921 000058D7 730C                <1> 	jae donesearchpci
  6922 000058D9 FEC0                <1> 	inc al
  6923 000058DB A2[AA570000]        <1> 	mov [pcibus], al
  6924 000058E0 E9ECFEFFFF          <1> 	jmp searchpci
  6925                              <1> donesearchpci:
  6926 000058E5 31D2                <1> 	xor edx, edx
  6927 000058E7 C3                  <1> 	ret
  6928                              <1> foundpciaddr:
  6929 000058E8 B010                <1> 	mov al, 0x10
  6930 000058EA A2[AD570000]        <1> 	mov [pciregister], al
  6931                              <1> findpciioaddr:
  6932 000058EF E83E000000          <1> 	call getpciaddr
  6933 000058F4 BAF80C0000          <1> 	mov edx, 0xCF8
  6934 000058F9 EF                  <1> 	out dx, eax
  6935 000058FA BAFC0C0000          <1> 	mov edx, 0xCFC
  6936 000058FF ED                  <1> 	in eax, dx
  6937 00005900 89C3                <1> 	mov ebx, eax
  6938 00005902 81E301000000        <1> 	and ebx, 1
  6939 00005908 81FB00000000        <1> 	cmp ebx, 0
  6940 0000590E 0F8408000000        <1> 	je near notpciioaddr
  6941 00005914 2D01000000          <1> 	sub eax, 1
  6942 00005919 89C2                <1> 	mov edx, eax
  6943 0000591B C3                  <1> 	ret
  6944                              <1> notpciioaddr:
  6945 0000591C A0[AD570000]        <1> 	mov al, [pciregister]
  6946 00005921 0404                <1> 	add al, 4
  6947 00005923 3C28                <1> 	cmp al, 0x28
  6948 00005925 0F87C9FEFFFF        <1> 	ja near searchpciret
  6949 0000592B A2[AD570000]        <1> 	mov [pciregister], al
  6950 00005930 EBBD                <1> 	jmp findpciioaddr
  6951                              <1> getpciaddr:		;;puts it in eax and ebx
  6952 00005932 31C0                <1> 			xor eax, eax
  6953 00005934 BB00000080          <1> 			mov ebx, 0x80000000
  6954 00005939 A0[AA570000]        <1> 			mov al, [pcibus]
  6955 0000593E C1E010              <1> 			shl eax, 16
  6956 00005941 01C3                <1> 			add ebx, eax
  6957 00005943 31C0                <1> 			xor eax, eax
  6958 00005945 A0[AB570000]        <1> 			mov al, [pcidevice]
  6959 0000594A C1E00B              <1> 			shl eax, 11
  6960 0000594D 01C3                <1> 			add ebx, eax
  6961 0000594F 31C0                <1> 			xor eax, eax
  6962 00005951 A0[AC570000]        <1> 			mov al, [pcifunction]
  6963 00005956 C1E008              <1> 			shl eax, 8
  6964 00005959 01C3                <1> 			add ebx, eax
  6965 0000595B 31C0                <1> 			xor eax, eax
  6966 0000595D A0[AD570000]        <1> 			mov al, [pciregister]
  6967 00005962 01C3                <1> 			add ebx, eax
  6968 00005964 89D8                <1> 			mov eax, ebx
  6969 00005966 C3                  <1> 			ret
  6970                                      %include "source/disk.asm"
  6971                              <1> ;This loads files using the methods in the loaded driver
  6972                              <1> %ifdef disk.real
  6973                              <1> %include "source/drivers/disk/realmode.asm"
  6974                              <2> diskr:
  6975                              <2> 			;read from disk using real mode-it does not work with large files
  6976                              <2> 			;sector count in cl
  6977                              <2> 			;disk number in ch
  6978                              <2> 			;48 bit address with last 32 bits in ebx
  6979                              <2> 			;buffer in esi
  6980                              <2> 			;puts end of buffer in edi and end lba address in edx
  6981 00005967 880D[94590000]      <2> 	mov [sdlength], cl
  6982 0000596D 891D[95590000]      <2> 	mov [sdaddress], ebx
  6983 00005973 8935[F35A0000]      <2> 	mov [oldesireal], esi
  6984 00005979 66BE[9959]          <2> 	mov si, readdiskreal
  6985 0000597D 668935[C20C0000]    <2> 	mov [realmodeptr], si
  6986 00005984 BE[D5590000]        <2> 	mov esi, backfromrealread
  6987 00005989 8935[BE0C0000]      <2> 	mov [realmodereturn], esi
  6988 0000598F E913B2FFFF          <2> 	jmp realmode
  6989 00005994 00                  <2> sdlength db 0
  6990 00005995 00000000            <2> sdaddress dd 0
  6991                              <2> 
  6992                              <2> [BITS 16]
  6993                              <2> readdiskreal:
  6994 00005999 C706[C559]1000      <2> 	mov word [dlen], 0x10
  6995 0000599F C706[C959]0000      <2> 	mov word [daddress], 0
  6996 000059A5 C706[CB59]0001      <2> 	mov word [dsegm], 0x100
  6997 000059AB 66891E[CD59]        <2> 	mov [dlbaad], ebx
  6998 000059B0 880E[C759]          <2> 	mov [dreadlen], cl
  6999                              <2> ReadHardDisk:
  7000 000059B4 BE[C559]            <2> 	mov si, diskaddresspacket
  7001 000059B7 31C0                <2> 	xor ax, ax
  7002 000059B9 B442                <2> 	mov ah, 0x42
  7003 000059BB 8A16[C459]          <2> 	mov dl, [dnumber]
  7004 000059BF CD13                <2> 	int 0x13
  7005 000059C1 72F1                <2> 	jc ReadHardDisk
  7006 000059C3 C3                  <2> 	ret
  7007                              <2> 
  7008 000059C4 80                  <2> dnumber db 0x80
  7009                              <2> diskaddresspacket:
  7010 000059C5 10                  <2> dlen:	db 0x10 ;size of packet
  7011 000059C6 00                  <2> 		db 0
  7012 000059C7 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7013 000059C9 0000                <2> daddress:	dw 0x0	;address 0
  7014 000059CB 0001                <2> dsegm:		dw 0x100	;segment
  7015                              <2> 		;start with known value for hd
  7016                              <2> dlbaad:
  7017 000059CD 00000000            <2> 	dd 0	;lba address
  7018 000059D1 00000000            <2> 	dd 0
  7019                              <2> [BITS 32]
  7020                              <2> backfromrealread:
  7021 000059D5 8B35[F35A0000]      <2> 	mov esi, [oldesireal]
  7022 000059DB 8B1D[95590000]      <2> 	mov ebx, [sdaddress]
  7023 000059E1 31C9                <2> 	xor ecx, ecx
  7024 000059E3 8A0D[94590000]      <2> 	mov cl, [sdlength]
  7025 000059E9 01CB                <2> 	add ebx, ecx
  7026 000059EB 66B80800            <2> 	mov ax, LINEAR_SEL
  7027 000059EF 8EE0                <2> 	mov fs, ax
  7028 000059F1 BF00100000          <2> 	mov edi, 0x1000
  7029 000059F6 B200                <2> 	mov dl, 0
  7030 000059F8 D0E1                <2> 	shl cl, 1
  7031                              <2> copyfromrmodedisk:
  7032 000059FA 648A07              <2> 	mov al, [fs:edi]
  7033 000059FD 8806                <2> 	mov [esi], al
  7034 000059FF 47                  <2> 	inc edi
  7035 00005A00 46                  <2> 	inc esi
  7036 00005A01 FECA                <2> 	dec dl
  7037 00005A03 80FA00              <2> 	cmp dl, 0
  7038 00005A06 75F2                <2> 	jne copyfromrmodedisk
  7039 00005A08 FEC9                <2> 	dec cl
  7040 00005A0A B200                <2> 	mov dl, 0
  7041 00005A0C 80F900              <2> 	cmp cl, 0
  7042 00005A0F 75E9                <2> 	jne copyfromrmodedisk
  7043 00005A11 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7044 00005A15 8EE0                <2> 	mov fs, ax
  7045 00005A17 89F7                <2> 	mov edi, esi
  7046 00005A19 8B35[F35A0000]      <2> 	mov esi, [oldesireal]
  7047 00005A1F 89DA                <2> 	mov edx, ebx
  7048 00005A21 8B1D[95590000]      <2> 	mov ebx, [sdaddress]
  7049 00005A27 C3                  <2> 	ret
  7050                              <2> 	
  7051                              <1> %else
  7052                              <1> 	%ifdef disk.protected
  7053                              <1> 	%include "source/drivers/disk/pata.asm"
  7054                              <1> 	%endif
  7055                              <1> %endif
  7056                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7057                              <1> 			;returns with err code in edx and file end in edi
  7058 00005A28 803F00              <1> 	cmp byte [edi], 0
  7059 00005A2B 0F8448000000        <1> 	je near nofileload
  7060 00005A31 89FA                <1> 	mov edx, edi
  7061 00005A33 BB[4F830000]        <1> 	mov ebx, diskfileindex
  7062                              <1> nextnamechar:
  7063 00005A38 8A07                <1> 	mov al, [edi]
  7064 00005A3A 3C26                <1> 	cmp al, '&'
  7065 00005A3C 7440                <1> 	je nullfile
  7066 00005A3E 8A23                <1> 	mov ah, [ebx]
  7067 00005A40 47                  <1> 	inc edi
  7068 00005A41 43                  <1> 	inc ebx
  7069 00005A42 88C1                <1> 	mov cl, al
  7070 00005A44 08E1                <1> 	or cl, ah
  7071 00005A46 80F900              <1> 	cmp cl, 0
  7072 00005A49 744E                <1> 	je equalfilenames
  7073 00005A4B 80F920              <1> 	cmp cl, ' '
  7074 00005A4E 7449                <1> 	je equalfilenames
  7075 00005A50 3C2A                <1> 	cmp al, '*'
  7076 00005A52 742B                <1> 	je equalfilenames2
  7077 00005A54 80FC00              <1> 	cmp ah, 0
  7078 00005A57 7410                <1> 	je nextfilename
  7079 00005A59 3C00                <1> 	cmp al, 0
  7080 00005A5B 7404                <1> 	je getebxzero
  7081 00005A5D 38E0                <1> 	cmp al, ah
  7082 00005A5F 74D7                <1> 	je nextnamechar
  7083                              <1> getebxzero:
  7084 00005A61 8A23                <1> 	mov ah, [ebx]
  7085 00005A63 43                  <1> 	inc ebx
  7086 00005A64 80FC00              <1> 	cmp ah, 0
  7087 00005A67 75F8                <1> 	jne getebxzero
  7088                              <1> nextfilename:
  7089 00005A69 81C308000000        <1> 	add ebx, 8		;next descriptor
  7090 00005A6F 89D7                <1> 	mov edi, edx
  7091 00005A71 81FB[D7840000]      <1> 	cmp ebx, enddiskfileindex
  7092 00005A77 72BF                <1> 	jb nextnamechar
  7093                              <1> nofileload:
  7094 00005A79 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7095                              <1> nullfile:
  7096 00005A7E C3                  <1> 	ret
  7097                              <1> equalfilenames2:
  7098 00005A7F 81EB02000000        <1> 	sub ebx, 2
  7099                              <1> eqfilefind:
  7100 00005A85 43                  <1> 	inc ebx
  7101 00005A86 81FB[D7840000]      <1> 	cmp ebx, enddiskfileindex
  7102 00005A8C 0F83E7FFFFFF        <1> 	jae near nofileload
  7103 00005A92 8A03                <1> 	mov al, [ebx]
  7104 00005A94 3C00                <1> 	cmp al, 0
  7105 00005A96 75ED                <1> 	jne eqfilefind
  7106 00005A98 43                  <1> 	inc ebx
  7107                              <1> equalfilenames:
  7108 00005A99 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7109 00005A9C 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7110 00005A9E 031D[DA840000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7111 00005AA4 31C9                <1> 	xor ecx, ecx
  7112 00005AA6 88C1                <1> 	mov cl, al			;get excess number of sectors
  7113 00005AA8 C0E102              <1> 	shl cl, 2
  7114 00005AAB C0E902              <1> 	shr cl, 2			;cut off at 64
  7115 00005AAE 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7116 00005AB0 B500                <1> 	mov ch, 0			;drive 0
  7117 00005AB2 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7118                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7119 00005AB5 A3[F75A0000]        <1> 	mov [filetracks], eax
  7120 00005ABA 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7121 00005ABC 89DA                <1> 	mov edx, ebx
  7122 00005ABE 80F900              <1> 	cmp cl, 0
  7123 00005AC1 7405                <1> 	je copytracksforfile
  7124 00005AC3 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7125                              <1> copytracksforfile:
  7126 00005AC8 A1[F75A0000]        <1> 	mov eax, [filetracks]
  7127 00005ACD 3D00000000          <1> 	cmp eax, 0
  7128 00005AD2 7419                <1> 	je donecopyfile
  7129 00005AD4 48                  <1> 	dec eax
  7130 00005AD5 A3[F75A0000]        <1> 	mov [filetracks], eax
  7131 00005ADA 89D3                <1> 	mov ebx, edx	;get end lba
  7132 00005ADC B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7133 00005ADE 8A2D[D9840000]      <1> 	mov ch, [DriveNumber]
  7134 00005AE4 89FE                <1> 	mov esi, edi	;reset buffer
  7135 00005AE6 E87CFEFFFF          <1> 	call diskr
  7136 00005AEB EBDB                <1> 	jmp copytracksforfile
  7137                              <1> donecopyfile:
  7138 00005AED BA00000000          <1> 	mov edx, 0	;no error
  7139 00005AF2 C3                  <1> 	ret
  7140                              <1> 
  7141 00005AF3 00000000            <1> oldesireal dd 0
  7142 00005AF7 00000000            <1> filetracks dd 0
  7143 00005AFB 00                  <1> lbad1 db 0
  7144 00005AFC 00                  <1> lbad2 db 0
  7145 00005AFD 00                  <1> lbad3 db 0
  7146 00005AFE 00                  <1> lbad4 db 0
  7147 00005AFF 00                  <1> lbad5 db 0
  7148 00005B00 00                  <1> lbad6 db 0
  7149 00005B01 6400                <1> segments dw 100
  7150                              <1> 
  7151                              <1> 
  7152                              <1> 	
  7153                                      %include "source/threads.asm"
  7154                              <1> %ifdef threads.included	
  7155                              <1> nwcmdst:
  7156 00005B03 31C0                <1> 	xor eax, eax
  7157 00005B05 BC[BE960000]        <1> 	mov esp, stackend
  7158 00005B0A A2[C75B0000]        <1> 	mov [threadson], al
  7159 00005B0F A3[C85B0000]        <1> 	mov [currentthread], eax
  7160 00005B14 0504000000          <1> 	add eax, 4
  7161 00005B19 A3[C35B0000]        <1> 	mov [lastthread], eax
  7162 00005B1E FB                  <1> 	sti
  7163 00005B1F E94ACDFFFF          <1> 	jmp nwcmd
  7164                              <1> 
  7165                              <1> nomorethreadspace:
  7166 00005B24 BE[3A5B0000]        <1> 	mov esi, nmts
  7167 00005B29 E84AC1FFFF          <1> 	call print
  7168 00005B2E C605[C75B0000]00    <1> 	mov byte [threadson], 0
  7169 00005B35 E934CDFFFF          <1> 	jmp nwcmd
  7170 00005B3A 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7171 00005B43 6572666C6F770A00    <1>
  7172                              <1> 
  7173                              <1> nomorestackspace:
  7174 00005B4B BE[575B0000]        <1> 	mov esi, nmss
  7175 00005B50 E823C1FFFF          <1> 	call print
  7176 00005B55 EBAC                <1> 	jmp nwcmdst
  7177 00005B57 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7178 00005B60 72666C6F770A00      <1>
  7179                              <1> 	
  7180                              <1> threadswitch:
  7181 00005B67 FA                  <1> 	cli
  7182 00005B68 60                  <1> 	pushad
  7183 00005B69 BF[D0880100]        <1> 	mov edi, threadlist
  7184 00005B6E A1[C85B0000]        <1> 	mov eax, [currentthread]
  7185 00005B73 40                  <1> 	inc eax
  7186 00005B74 A3[C85B0000]        <1> 	mov [currentthread], eax
  7187 00005B79 6648                <1> 	dec ax
  7188 00005B7B C1E002              <1> 	shl eax, 2
  7189 00005B7E 01C7                <1> 	add edi, eax
  7190 00005B80 8927                <1> 	mov [edi], esp
  7191 00005B82 81C704000000        <1> 	add edi, 4
  7192 00005B88 81FF[D0980100]      <1> 	cmp edi, threadlistend
  7193 00005B8E 0F830D000000        <1> 	jae near nookespthread
  7194 00005B94 8B07                <1> 	mov eax, [edi]
  7195 00005B96 3D00000000          <1> 	cmp eax, 0
  7196 00005B9B 0F8519000000        <1> 	jne near okespthread
  7197                              <1> nookespthread:
  7198 00005BA1 BF[D0880100]        <1> 	mov edi, threadlist
  7199 00005BA6 31C0                <1> 	xor eax, eax
  7200 00005BA8 A3[C85B0000]        <1> 	mov [currentthread], eax
  7201 00005BAD 8B07                <1> 	mov eax, [edi]
  7202 00005BAF 3D00000000          <1> 	cmp eax, 0
  7203 00005BB4 0F8449FFFFFF        <1> 	je near nwcmdst
  7204                              <1> okespthread:
  7205 00005BBA 89C4                <1> 	mov esp, eax
  7206 00005BBC B020                <1> 	mov al, 0x20
  7207 00005BBE E620                <1> 	out 0x20, al
  7208 00005BC0 61                  <1> 	popad
  7209 00005BC1 FB                  <1> 	sti
  7210 00005BC2 CF                  <1> 	iret
  7211                              <1> 
  7212 00005BC3 04000000            <1> 	lastthread dd 4
  7213                              <1> %endif
  7214 00005BC7 00                  <1> 	threadson db 0
  7215 00005BC8 00000000            <1> 	currentthread dd 0
  7216                                  %ifdef gui.included
  7217                                      %include "source/gui/gui.asm"
  7218                              <1> guiclear:
  7219 00005BCC 8B3D[EB4B0000]      <1> 	mov edi, [physbaseptr]
  7220 00005BD2 668B15[D54B0000]    <1> 	mov dx, [resolutionx]
  7221 00005BD9 668B0D[D74B0000]    <1> 	mov cx, [resolutiony]
  7222 00005BE0 66A1[095C0000]      <1> 	mov ax, [background]
  7223                              <1> guiclearloop:
  7224 00005BE6 668907              <1> 	mov [edi], ax
  7225 00005BE9 81C702000000        <1> 	add edi, 2
  7226 00005BEF 664A                <1> 	dec dx
  7227 00005BF1 6681FA0000          <1> 	cmp dx, 0
  7228 00005BF6 77EE                <1> 	ja guiclearloop
  7229 00005BF8 6649                <1> 	dec cx
  7230 00005BFA 668B15[D54B0000]    <1> 	mov dx, [resolutionx]
  7231 00005C01 6681F90000          <1> 	cmp cx, 0
  7232 00005C06 77DE                <1> 	ja guiclearloop
  7233 00005C08 C3                  <1> 	ret
  7234                              <1> 
  7235 00005C09 CF7B                <1> background dw 0111101111001111b
  7236                              <1> 
  7237                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7238 00005C0B 31C0                <1> 	xor eax, eax
  7239 00005C0D 31DB                <1> 	xor ebx, ebx
  7240 00005C0F 31C9                <1> 	xor ecx, ecx
  7241 00005C11 31D2                <1> 	xor edx, edx
  7242 00005C13 E815000000          <1> 	call guisetup
  7243                              <1> guiloop:
  7244 00005C18 E8A9F0FFFF          <1> 	call cursorgui
  7245                              <1> guistart:
  7246 00005C1D E8E7F7FFFF          <1> 	call getkey
  7247 00005C22 C605[3F5D0000]00    <1> 	mov byte [copygui], 0
  7248 00005C29 EBF2                <1> 	jmp guistart
  7249 00005C2B EBF0                <1> 	jmp guistart
  7250                              <1> guisetup:
  7251 00005C2D 8B3D[EB4B0000]      <1> 	mov edi, [physbaseptr]
  7252 00005C33 668B15[D54B0000]    <1> 	mov dx, [resolutionx]
  7253 00005C3A 668B0D[D74B0000]    <1> 	mov cx, [resolutiony]
  7254 00005C41 668B1D[095C0000]    <1> 	mov bx, [background]
  7255                              <1> guiclearloop2:
  7256 00005C48 66891F              <1> 	mov [edi], bx
  7257 00005C4B 81C702000000        <1> 	add edi, 2
  7258 00005C51 664A                <1> 	dec dx
  7259 00005C53 6681FA0000          <1> 	cmp dx, 0
  7260 00005C58 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  7261 00005C5E 6649                <1> 	dec cx
  7262 00005C60 668B15[D54B0000]    <1> 	mov dx, [resolutionx]
  7263 00005C67 6681F90000          <1> 	cmp cx, 0
  7264 00005C6C 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  7265 00005C72 C605[D8840000]01    <1> 	mov byte [guion], 1
  7266 00005C79 C605[455D0000]00    <1> 	mov byte [mouseselecton], 0
  7267 00005C80 31C0                <1> 	xor eax, eax
  7268 00005C82 31DB                <1> 	xor ebx, ebx
  7269 00005C84 31C9                <1> 	xor ecx, ecx
  7270 00005C86 31D2                <1> 	xor edx, edx
  7271                              <1> 	
  7272 00005C88 BE[276F0000]        <1> 	mov esi, pacmsg
  7273 00005C8D 6631C0              <1> 	xor ax, ax
  7274 00005C90 31DB                <1> 	xor ebx, ebx
  7275 00005C92 66B99000            <1> 	mov cx, 144
  7276 00005C96 66BA0400            <1> 	mov dx, 4
  7277 00005C9A E8520A0000          <1> 	call showstring
  7278                              <1> 	
  7279 00005C9F BE[57700000]        <1> 	mov esi, interneticon
  7280 00005CA4 6631C0              <1> 	xor ax, ax
  7281 00005CA7 BB[866F0000]        <1> 	mov ebx, noie
  7282 00005CAC 66B91800            <1> 	mov cx, 24
  7283 00005CB0 66BA0400            <1> 	mov dx, 4
  7284 00005CB4 E8E20E0000          <1> 	call showicon
  7285                              <1> 	
  7286 00005CB9 BE[D9700000]        <1> 	mov esi, wordicon
  7287 00005CBE 6631C0              <1> 	xor ax, ax
  7288 00005CC1 31DB                <1> 	xor ebx, ebx
  7289 00005CC3 66B91800            <1> 	mov cx, 24
  7290 00005CC7 66BA3000            <1> 	mov dx, 48
  7291 00005CCB E8CB0E0000          <1> 	call showicon
  7292                              <1> 	
  7293 00005CD0 BE[5B710000]        <1> 	mov esi, pacmanpellet
  7294 00005CD5 6631C0              <1> 	xor ax, ax
  7295 00005CD8 31DB                <1> 	xor ebx, ebx
  7296 00005CDA 66B94000            <1> 	mov cx, 64
  7297 00005CDE 66BA0400            <1> 	mov dx, 4
  7298 00005CE2 E8B40E0000          <1> 	call showicon
  7299                              <1> 	
  7300 00005CE7 BE[5F720000]        <1> 	mov esi, pacman
  7301 00005CEC 6631C0              <1> 	xor ax, ax
  7302 00005CEF BB[6F6F0000]        <1> 	mov ebx, pacmannomnom
  7303 00005CF4 66B94000            <1> 	mov cx, 64
  7304 00005CF8 66BA3000            <1> 	mov dx, 48
  7305 00005CFC E89A0E0000          <1> 	call showicon
  7306                              <1> 	
  7307 00005D01 BE[DD710000]        <1> 	mov esi, ghostie
  7308 00005D06 6631C0              <1> 	xor ax, ax
  7309 00005D09 BB[586F0000]        <1> 	mov ebx, boo
  7310 00005D0E 66B96C00            <1> 	mov cx, 108
  7311 00005D12 66BA0400            <1> 	mov dx, 4
  7312 00005D16 E8800E0000          <1> 	call showicon
  7313                              <1> 
  7314 00005D1B BE[096F0000]        <1> 	mov esi, start
  7315 00005D20 668B0D[D74B0000]    <1> 	mov cx, [resolutiony]
  7316 00005D27 6681E91000          <1> 	sub cx, 16
  7317 00005D2C 66BA0200            <1> 	mov dx, 2
  7318 00005D30 30E4                <1> 	xor ah, ah
  7319 00005D32 B010                <1> 	mov al, 00010000b
  7320 00005D34 BB[01700000]        <1> 	mov ebx, winblows
  7321 00005D39 E8B3090000          <1> 	call showstring
  7322 00005D3E C3                  <1> 	ret
  7323                              <1> 	
  7324                              <1> ;guicopy:	;;for double buffering
  7325                              <1> ;	mov byte [copygui], 1
  7326                              <1> ;	mov edi, [offscreenmemoffset]
  7327                              <1> ;	xor edx, edx
  7328                              <1> ;	xor ecx, ecx
  7329                              <1> ;	mov dx, [mousecursorposition]
  7330                              <1> ;	mov cx, [mousecursorposition + 2]
  7331                              <1> ;	add edi, edx
  7332                              <1> ;	mov dx, [resolutionx2]
  7333                              <1> ;	inc cx
  7334                              <1> ;guicp2:
  7335                              <1> ;	add edi, edx
  7336                              <1> ;	dec cx
  7337                              <1> ;	cmp cx, 0
  7338                              <1> ;	jne guicp2
  7339                              <1> ;	sub edi, edx
  7340                              <1> ;	mov [cursorloc], edi
  7341                              <1> ;	mov ebx, cursorbmp
  7342                              <1> ;	mov cx, [resolutiony]
  7343                              <1> ;	rol ecx, 16
  7344                              <1> ;	mov cx, [resolutionx]
  7345                              <1> ;	mov esi, [physbaseptr]
  7346                              <1> ;	mov edi, [offscreenmemoffset]
  7347                              <1> ;guicp1:
  7348                              <1> ;	mov ax, [esi]
  7349                              <1> ;	mov [edi], ax
  7350                              <1> ;	add esi, 2
  7351                              <1> ;	add edi, 2
  7352                              <1> ;	cmp edi, [cursorloc]
  7353                              <1> ;	je copycursor
  7354                              <1> ;dncopycursor:
  7355                              <1> ;	dec cx
  7356                              <1> ;	cmp cx, 0
  7357                              <1> ;	jne guicp1
  7358                              <1> ;	mov cx, [resolutionx]
  7359                              <1> ;	rol ecx, 16
  7360                              <1> ;	dec cx
  7361                              <1> ;	cmp cx, 0
  7362                              <1> ;	rol ecx, 16
  7363                              <1> ;	jne guicp1
  7364                              <1> ;	mov byte [copygui], 0
  7365                              <1> ;	ret
  7366                              <1> ;copycursor:
  7367                              <1> ;	cmp ebx, cursorbmpend
  7368                              <1> ;	jae dncopycursor
  7369                              <1> ;	mov dx, [resolutionx2]
  7370                              <1> ;	add edi, edx
  7371                              <1> ;	mov [cursorloc], edi
  7372                              <1> ;	sub edi, edx
  7373                              <1> ;	dec ebx
  7374                              <1> ;	sub edi, 2
  7375                              <1> ;	sub esi, 2
  7376                              <1> ;	mov dx, 9
  7377                              <1> ;curscplp:
  7378                              <1> ;	inc ebx
  7379                              <1> ;	add esi, 2
  7380                              <1> ;	add edi, 2
  7381                              <1> ;	mov ax, [esi]
  7382                              <1> ;	mov [edi], ax
  7383                              <1> ;	mov al, [ebx]
  7384                              <1> ;	cmp al, 0
  7385                              <1> ;	je curscplp2
  7386                              <1> ;	mov word [edi], 1110011110011100b
  7387                              <1> ;curscplp2:
  7388                              <1> ;	dec cx
  7389                              <1> ;	cmp cx, 0
  7390                              <1> ;	je dncopycursor
  7391                              <1> ;	dec dx
  7392                              <1> ;	cmp dx, 0
  7393                              <1> ;	jne curscplp
  7394                              <1> ;	jmp dncopycursor
  7395                              <1> 	
  7396                              <1> 	
  7397                              <1> ;cursorloc: dd 0
  7398                              <1> 				
  7399 00005D3F 00                  <1> copygui db 0
  7400 00005D40 00                  <1> graphicsset db 0
  7401 00005D41 0000                <1> graphicspos db 0,0
  7402 00005D43 00                  <1> showcursorfonton db 0
  7403 00005D44 00                  <1> savefonton db 0
  7404 00005D45 00                  <1> mouseselecton db 0
  7405                              <1> 
  7406                              <1> 		
  7407                              <1> clearmousecursor:
  7408 00005D46 BE[095C0000]        <1> 		mov esi, background
  7409 00005D4B 8B3D[EB4B0000]      <1> 		mov edi, [physbaseptr]
  7410 00005D51 31D2                <1> 		xor edx, edx
  7411 00005D53 31C9                <1> 		xor ecx, ecx
  7412 00005D55 668B15[A44E0000]    <1> 		mov dx, [lastmouseposition]
  7413 00005D5C 668B0D[A64E0000]    <1> 		mov cx, [lastmouseposition + 2]
  7414 00005D63 01D7                <1> 		add edi, edx
  7415 00005D65 31D2                <1> 		xor edx, edx
  7416 00005D67 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  7417 00005D6E 6681F90000          <1> 		cmp cx, 0
  7418 00005D73 740B                <1> 		je noyclr
  7419 00005D75 01D7                <1> yclr:	add edi, edx
  7420 00005D77 6649                <1> 		dec cx
  7421 00005D79 6681F90000          <1> 		cmp cx, 0
  7422 00005D7E 75F5                <1> 		jne yclr
  7423 00005D80 668B06              <1> noyclr:	mov ax, [esi]
  7424 00005D83 C1C010              <1> 		rol eax, 16
  7425 00005D86 668B06              <1> 		mov ax, [esi]
  7426 00005D89 8907                <1> 		mov [edi], eax
  7427 00005D8B 894704              <1> 		mov [edi + 4], eax
  7428 00005D8E 894708              <1> 		mov [edi + 8], eax
  7429 00005D91 89470C              <1> 		mov [edi + 12], eax
  7430 00005D94 01D7                <1> 		add edi, edx
  7431 00005D96 6641                <1> 		inc cx
  7432 00005D98 6681F91000          <1> 		cmp cx, 16
  7433 00005D9D 72E1                <1> 		jb noyclr
  7434 00005D9F C3                  <1> 		ret
  7435                              <1> 
  7436                              <1> switchmousepos:		;;switch were the mouse is located
  7437 00005DA0 BE[B3B70000]        <1> 		mov esi, mousecolorbuf
  7438 00005DA5 8B3D[EB4B0000]      <1> 		mov edi, [physbaseptr]
  7439 00005DAB 31D2                <1> 		xor edx, edx
  7440 00005DAD 31C9                <1> 		xor ecx, ecx
  7441 00005DAF 668B15[A44E0000]    <1> 		mov dx, [lastmouseposition]
  7442 00005DB6 668B0D[A64E0000]    <1> 		mov cx, [lastmouseposition + 2]
  7443 00005DBD 01D7                <1> 		add edi, edx
  7444 00005DBF 31D2                <1> 		xor edx, edx
  7445 00005DC1 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  7446 00005DC8 6681F90000          <1> 		cmp cx, 0
  7447 00005DCD 740B                <1> 		je noswmsy
  7448 00005DCF 01D7                <1> swmsy:		add edi, edx
  7449 00005DD1 6649                <1> 		dec cx
  7450 00005DD3 6681F90000          <1> 		cmp cx, 0
  7451 00005DD8 75F5                <1> 		jne swmsy
  7452 00005DDA 8B06                <1> noswmsy:	mov eax, [esi]
  7453 00005DDC 8B5E04              <1> 		mov ebx, [esi + 4]
  7454 00005DDF 8907                <1> 		mov [edi], eax
  7455 00005DE1 895F04              <1> 		mov [edi + 4], ebx
  7456 00005DE4 8B4608              <1> 		mov eax, [esi + 8]
  7457 00005DE7 8B5E0C              <1> 		mov ebx, [esi + 12]
  7458 00005DEA 894708              <1> 		mov [edi + 8], eax
  7459 00005DED 895F0C              <1> 		mov [edi + 12], ebx
  7460 00005DF0 01D7                <1> 		add edi, edx
  7461 00005DF2 81C610000000        <1> 		add esi, 16
  7462 00005DF8 81FE[B3B80000]      <1> 		cmp esi, mcolorend
  7463 00005DFE 72DA                <1> 		jb noswmsy
  7464                              <1> 		
  7465                              <1> switchmousepos2:
  7466 00005E00 BE[B3B70000]        <1> 		mov esi, mousecolorbuf
  7467 00005E05 8B3D[EB4B0000]      <1> 		mov edi, [physbaseptr]
  7468 00005E0B 31D2                <1> 		xor edx, edx
  7469 00005E0D 31C9                <1> 		xor ecx, ecx
  7470 00005E0F 668B15[A84E0000]    <1> 		mov dx, [mousecursorposition]
  7471 00005E16 668B0D[AA4E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7472 00005E1D 01D7                <1> 		add edi, edx
  7473 00005E1F 31D2                <1> 		xor edx, edx
  7474 00005E21 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  7475 00005E28 6681F90000          <1> 		cmp cx, 0
  7476 00005E2D 740B                <1> 		je noswmsy2
  7477 00005E2F 01D7                <1> swmsy2:		add edi, edx
  7478 00005E31 6649                <1> 		dec cx
  7479 00005E33 6681F90000          <1> 		cmp cx, 0
  7480 00005E38 75F5                <1> 		jne swmsy2
  7481 00005E3A 8B07                <1> noswmsy2:	mov eax, [edi]
  7482 00005E3C 8B5F04              <1> 		mov ebx, [edi + 4]
  7483 00005E3F 8906                <1> 		mov [esi], eax
  7484 00005E41 895E04              <1> 		mov [esi + 4], ebx
  7485 00005E44 8B4708              <1> 		mov eax, [edi + 8]
  7486 00005E47 8B5F0C              <1> 		mov ebx, [edi + 12]
  7487 00005E4A 894608              <1> 		mov [esi + 8], eax
  7488 00005E4D 895E0C              <1> 		mov [esi + 12], ebx
  7489 00005E50 01D7                <1> 		add edi, edx
  7490 00005E52 81C610000000        <1> 		add esi, 16
  7491 00005E58 81FE[B3B80000]      <1> 		cmp esi, mcolorend
  7492 00005E5E 72DA                <1> 		jb noswmsy2
  7493 00005E60 C3                  <1> 		ret
  7494                              <1> 
  7495 00005E61 00                  <1> pbutton db 0
  7496 00005E62 00                  <1> pLBUTTON db 0
  7497 00005E63 00                  <1> pRBUTTON db 0
  7498 00005E64 00000000            <1> dragging dw 0,0
  7499 00005E68 0000000000000000    <1> lastpos dw 0,0,0,0
  7500 00005E70 00000000            <1> colorbuf dw 0,0
  7501                              <1> 	
  7502                              <1> 	clickicon:
  7503 00005E74 B001                <1> 		mov al, 1
  7504 00005E76 A2[615E0000]        <1> 		mov [pbutton], al
  7505 00005E7B A0[625E0000]        <1> 		mov al, [pLBUTTON]
  7506 00005E80 2205[B94F0000]      <1> 		and al, [LBUTTON]
  7507 00005E86 8A25[635E0000]      <1> 		mov ah, [pRBUTTON]
  7508 00005E8C 2225[BA4F0000]      <1> 		and ah, [RBUTTON]
  7509 00005E92 08E0                <1> 		or al, ah
  7510 00005E94 3C00                <1> 		cmp al, 0
  7511 00005E96 741B                <1> 		je nodragclick
  7512 00005E98 813D[645E0000]0100- <1> 		cmp dword [dragging], 1
  7513 00005EA0 0000                <1>
  7514 00005EA2 732D                <1> 		jae dragclick
  7515 00005EA4 C705[645E0000]0100- <1> 		mov dword [dragging], 1
  7516 00005EAC 0000                <1>
  7517 00005EAE E91E000000          <1> 		jmp dragclick
  7518                              <1> 	nodragclick:
  7519 00005EB3 C705[645E0000]0000- <1> 		mov dword [dragging], 0
  7520 00005EBB 0000                <1>
  7521 00005EBD A0[B94F0000]        <1> 		mov al, [LBUTTON]
  7522 00005EC2 A2[625E0000]        <1> 		mov [pLBUTTON], al
  7523 00005EC7 A0[BA4F0000]        <1> 		mov al, [RBUTTON]
  7524 00005ECC A2[635E0000]        <1> 		mov [pRBUTTON], al
  7525                              <1> 	dragclick:
  7526 00005ED1 6631C0              <1> 		xor ax, ax
  7527 00005ED4 BE[B3B50000]        <1> 		mov esi, graphicstable
  7528 00005ED9 C705[536F0000]0000- <1> 		mov dword [codepointer], 0
  7529 00005EE1 0000                <1>
  7530                              <1> 	clicon2:
  7531 00005EE3 31D2                <1> 		xor edx, edx
  7532 00005EE5 31C9                <1> 		xor ecx, ecx
  7533 00005EE7 66813E0100          <1> 		cmp word [esi], 1
  7534 00005EEC 0F841B000000        <1> 		je near iconselect
  7535 00005EF2 66813E0200          <1> 		cmp word [esi], 2
  7536 00005EF7 0F8472010000        <1> 		je near textselected
  7537 00005EFD 66813E0300          <1> 		cmp word [esi], 3
  7538 00005F02 0F84C7020000        <1> 		je near windowselect
  7539 00005F08 E901040000          <1> 		jmp nexticonsel
  7540                              <1> 	iconselect:
  7541 00005F0D 668B5606            <1> 		mov dx, [esi + 6]
  7542 00005F11 6689D0              <1> 		mov ax, dx
  7543 00005F14 668B4E08            <1> 		mov cx, [esi + 8]
  7544 00005F18 6689CB              <1> 		mov bx, cx
  7545 00005F1B 6681C32000          <1> 		add bx, 32
  7546 00005F20 6601D0              <1> 		add ax, dx
  7547 00005F23 813D[645E0000]0100- <1> 		cmp dword [dragging], 1
  7548 00005F2B 0000                <1>
  7549 00005F2D 746F                <1> 		je dragicon
  7550 00005F2F 813D[645E0000]0000- <1> 		cmp dword [dragging], 0
  7551 00005F37 0000                <1>
  7552 00005F39 7411                <1> 		je nodragiconcheck
  7553 00005F3B 3935[645E0000]      <1> 		cmp dword [dragging], esi
  7554 00005F41 0F85C7030000        <1> 		jne near nexticonsel
  7555 00005F47 E952000000          <1> 		jmp dragicon
  7556                              <1> 	nodragiconcheck:
  7557 00005F4C 663905[A84E0000]    <1> 		cmp [mousecursorposition], ax
  7558 00005F53 0F82B5030000        <1> 		jb near nexticonsel
  7559 00005F59 66054000            <1> 		add ax, 64
  7560 00005F5D 663905[A84E0000]    <1> 		cmp [mousecursorposition], ax
  7561 00005F64 0F87A4030000        <1> 		ja near nexticonsel
  7562 00005F6A 6629D0              <1> 		sub ax, dx
  7563 00005F6D 66390D[AA4E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7564 00005F74 0F8294030000        <1> 		jb near nexticonsel
  7565 00005F7A 66391D[AA4E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7566 00005F81 0F8787030000        <1> 		ja near nexticonsel
  7567 00005F87 668B460A            <1> 		mov ax, [esi + 10]
  7568 00005F8B 66250100            <1> 		and ax, 1
  7569 00005F8F 663D0100            <1> 		cmp ax, 1
  7570 00005F93 0F84B6000000        <1> 		je near unselecticon
  7571 00005F99 E98D000000          <1> 		jmp nodragicon
  7572                              <1> 	dragicon:
  7573 00005F9E 663905[A44E0000]    <1> 		cmp [lastmouseposition], ax
  7574 00005FA5 0F8263030000        <1> 		jb near nexticonsel
  7575 00005FAB 66054000            <1> 		add ax, 64
  7576 00005FAF 663905[A44E0000]    <1> 		cmp [lastmouseposition], ax
  7577 00005FB6 0F8752030000        <1> 		ja near nexticonsel
  7578 00005FBC 6629D0              <1> 		sub ax, dx
  7579 00005FBF 66390D[A64E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7580 00005FC6 0F8242030000        <1> 		jb near nexticonsel
  7581 00005FCC 66391D[A64E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7582 00005FD3 0F8735030000        <1> 		ja near nexticonsel
  7583 00005FD9 668B460A            <1> 		mov ax, [esi + 10]
  7584 00005FDD 2410                <1> 		and al, 00010000b
  7585 00005FDF 3C10                <1> 		cmp al, 00010000b
  7586 00005FE1 7448                <1> 		je nodragicon
  7587 00005FE3 8935[645E0000]      <1> 		mov [dragging], esi
  7588 00005FE9 66D1E2              <1> 		shl dx, 1
  7589 00005FEC 662B15[A44E0000]    <1> 		sub dx, [lastmouseposition]
  7590 00005FF3 660315[A84E0000]    <1> 		add dx, [mousecursorposition]
  7591 00005FFA 66D1EA              <1> 		shr dx, 1
  7592 00005FFD 66030D[AA4E0000]    <1> 		add cx, [mousecursorposition + 2]
  7593 00006004 662B0D[A64E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7594 0000600B 663B15[C34C0000]    <1> 		cmp dx, [resolutionx2]
  7595 00006012 7607                <1> 		jbe chkyresdrgicn
  7596 00006014 668B15[A84E0000]    <1> 		mov dx, [mousecursorposition]
  7597                              <1> 	chkyresdrgicn:
  7598 0000601B 663B0D[D74B0000]    <1> 		cmp cx, [resolutiony]
  7599 00006022 7607                <1> 		jbe nodragicon
  7600 00006024 668B0D[AA4E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7601                              <1> 	nodragicon:
  7602 0000602B 66814E0A0100        <1> 		or word [esi + 10], 1
  7603 00006031 8B5E0C              <1> 		mov ebx, [esi + 12]
  7604 00006034 668B460A            <1> 		mov ax, [esi + 10]
  7605 00006038 8B7602              <1> 		mov esi, [esi + 2]
  7606 0000603B C705[536F0000]0000- <1> 		mov dword [codepointer], 0
  7607 00006043 0000                <1>
  7608 00006045 E8510B0000          <1> 		call showicon
  7609 0000604A E9D8020000          <1> 		jmp doneiconsel
  7610                              <1> 	unselecticon:
  7611 0000604F 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7612 00006055 8B5E0C              <1> 		mov ebx, [esi + 12]
  7613 00006058 668B460A            <1> 		mov ax, [esi + 10]
  7614 0000605C 8B7602              <1> 		mov esi, [esi + 2]
  7615 0000605F 891D[536F0000]      <1> 		mov [codepointer], ebx
  7616 00006065 E8310B0000          <1> 		call showicon
  7617 0000606A E9B8020000          <1> 		jmp doneiconsel
  7618                              <1> 	textselected:
  7619 0000606F 8B5E02              <1> 		mov ebx, [esi + 2]
  7620 00006072 668B5606            <1> 		mov dx, [esi + 6]
  7621 00006076 6689D0              <1> 		mov ax, dx
  7622 00006079 668B4E08            <1> 		mov cx, [esi + 8]
  7623                              <1> 	lengthtesttext:
  7624 0000607D 803B00              <1> 		cmp byte [ebx], 0
  7625 00006080 7407                <1> 		je donetesttextlength
  7626 00006082 43                  <1> 		inc ebx
  7627 00006083 66051000            <1> 		add ax, 16
  7628 00006087 EBF4                <1> 		jmp lengthtesttext
  7629                              <1> 	donetesttextlength:
  7630 00006089 6689CB              <1> 		mov bx, cx
  7631 0000608C 6681C30F00          <1> 		add bx, 15
  7632 00006091 813D[645E0000]0100- <1> 		cmp dword [dragging], 1
  7633 00006099 0000                <1>
  7634 0000609B 7468                <1> 		je dragtext
  7635 0000609D 813D[645E0000]0000- <1> 		cmp dword [dragging], 0
  7636 000060A5 0000                <1>
  7637 000060A7 7411                <1> 		je nodragtextcheck
  7638 000060A9 3935[645E0000]      <1> 		cmp dword [dragging], esi
  7639 000060AF 0F8559020000        <1> 		jne near nexticonsel
  7640 000060B5 E94B000000          <1> 		jmp dragtext
  7641                              <1> 	nodragtextcheck:
  7642 000060BA 663915[A84E0000]    <1> 		cmp [mousecursorposition], dx
  7643 000060C1 0F8247020000        <1> 		jb near nexticonsel
  7644 000060C7 663905[A84E0000]    <1> 		cmp [mousecursorposition], ax
  7645 000060CE 0F873A020000        <1> 		ja near nexticonsel
  7646 000060D4 66390D[AA4E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7647 000060DB 0F822D020000        <1> 		jb near nexticonsel
  7648 000060E1 66391D[AA4E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7649 000060E8 0F8720020000        <1> 		ja near nexticonsel
  7650 000060EE 668B460A            <1> 		mov ax, [esi + 10]
  7651 000060F2 66250100            <1> 		and ax, 1
  7652 000060F6 663D0100            <1> 		cmp ax, 1
  7653 000060FA 0F84AB000000        <1> 		je near unselecttext
  7654 00006100 E986000000          <1> 		jmp nodragtext
  7655                              <1> 	dragtext:
  7656 00006105 663915[A44E0000]    <1> 		cmp [lastmouseposition], dx
  7657 0000610C 0F82FC010000        <1> 		jb near nexticonsel
  7658 00006112 663905[A44E0000]    <1> 		cmp [lastmouseposition], ax
  7659 00006119 0F87EF010000        <1> 		ja near nexticonsel
  7660 0000611F 66390D[A64E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7661 00006126 0F82E2010000        <1> 		jb near nexticonsel
  7662 0000612C 66391D[A64E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7663 00006133 0F87D5010000        <1> 		ja near nexticonsel
  7664 00006139 668B460A            <1> 		mov ax, [esi + 10]
  7665 0000613D 2410                <1> 		and al, 00010000b
  7666 0000613F 663D1000            <1> 		cmp ax, 00010000b
  7667 00006143 0F8442000000        <1> 		je near nodragtext
  7668 00006149 8935[645E0000]      <1> 		mov [dragging], esi
  7669 0000614F 662B15[A44E0000]    <1> 		sub dx, [lastmouseposition]
  7670 00006156 660315[A84E0000]    <1> 		add dx, [mousecursorposition]
  7671 0000615D 66030D[AA4E0000]    <1> 		add cx, [mousecursorposition + 2]
  7672 00006164 662B0D[A64E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7673 0000616B 663B15[C34C0000]    <1> 		cmp dx, [resolutionx2]
  7674 00006172 7607                <1> 		jbe chkyresdrgtxt
  7675 00006174 668B15[A84E0000]    <1> 		mov dx, [mousecursorposition]
  7676                              <1> 	chkyresdrgtxt:
  7677 0000617B 663B0D[D74B0000]    <1> 		cmp cx, [resolutiony]
  7678 00006182 7607                <1> 		jbe nodragtext
  7679 00006184 668B0D[AA4E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7680                              <1> 	nodragtext:
  7681 0000618B 66814E0A0100        <1> 		or word [esi + 10], 1
  7682 00006191 8B5E0C              <1> 		mov ebx, [esi + 12]
  7683 00006194 891D[536F0000]      <1> 		mov [codepointer], ebx
  7684 0000619A 668B460A            <1> 		mov ax, [esi + 10]
  7685 0000619E 8B7602              <1> 		mov esi, [esi + 2]
  7686 000061A1 E84B050000          <1> 		call showstring
  7687 000061A6 E97C010000          <1> 		jmp doneiconsel
  7688                              <1> 	unselecttext:
  7689 000061AB 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7690 000061B1 8B5E0C              <1> 		mov ebx, [esi + 12]
  7691 000061B4 668B460A            <1> 		mov ax, [esi + 10]
  7692 000061B8 8B7602              <1> 		mov esi, [esi + 2]
  7693 000061BB C705[536F0000]0000- <1> 		mov dword [codepointer], 0
  7694 000061C3 0000                <1>
  7695 000061C5 E827050000          <1> 		call showstring
  7696 000061CA E958010000          <1> 		jmp doneiconsel
  7697                              <1> windowselect:
  7698 000061CF 8B7E02              <1> 		mov edi, [esi + 2]
  7699 000061D2 668B5606            <1> 		mov dx, [esi + 6]
  7700 000061D6 6689D0              <1> 		mov ax, dx
  7701 000061D9 668B4E08            <1> 		mov cx, [esi + 8]
  7702 000061DD 6689CB              <1> 		mov bx, cx
  7703 000061E0 6681C31000          <1> 		add bx, 16
  7704 000061E5 813D[645E0000]0100- <1> 		cmp dword [dragging], 1
  7705 000061ED 0000                <1>
  7706 000061EF 746D                <1> 		je dragwin
  7707 000061F1 813D[645E0000]0000- <1> 		cmp dword [dragging], 0
  7708 000061F9 0000                <1>
  7709 000061FB 7411                <1> 		je nodragwincheck
  7710 000061FD 3935[645E0000]      <1> 		cmp dword [dragging], esi
  7711 00006203 0F8505010000        <1> 		jne near nexticonsel
  7712 00006209 E950000000          <1> 		jmp dragwin
  7713                              <1> 	nodragwincheck:
  7714 0000620E 663905[A84E0000]    <1> 		cmp [mousecursorposition], ax
  7715 00006215 0F82F3000000        <1> 		jb near nexticonsel
  7716 0000621B 660307              <1> 		add ax, [edi]
  7717 0000621E 660307              <1> 		add ax, [edi]
  7718 00006221 663905[A84E0000]    <1> 		cmp [mousecursorposition], ax
  7719 00006228 0F87E0000000        <1> 		ja near nexticonsel
  7720 0000622E 66390D[AA4E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7721 00006235 0F82D3000000        <1> 		jb near nexticonsel
  7722 0000623B 66391D[AA4E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7723 00006242 0F87C6000000        <1> 		ja near nexticonsel
  7724 00006248 662D1400            <1> 		sub ax, 20
  7725 0000624C 663905[A84E0000]    <1> 		cmp [mousecursorposition], ax
  7726 00006253 0F8795000000        <1> 		ja near killwin
  7727 00006259 E97C000000          <1> 		jmp nodragwin
  7728                              <1> 	dragwin:
  7729 0000625E 663905[A44E0000]    <1> 		cmp [lastmouseposition], ax
  7730 00006265 0F82A3000000        <1> 		jb near nexticonsel
  7731 0000626B 660307              <1> 		add ax, [edi]
  7732 0000626E 660307              <1> 		add ax, [edi]
  7733 00006271 663905[A44E0000]    <1> 		cmp [lastmouseposition], ax
  7734 00006278 0F8790000000        <1> 		ja near nexticonsel
  7735 0000627E 66390D[A64E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7736 00006285 0F8283000000        <1> 		jb near nexticonsel
  7737 0000628B 66391D[A64E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7738 00006292 0F8776000000        <1> 		ja near nexticonsel
  7739 00006298 8935[645E0000]      <1> 		mov [dragging], esi
  7740 0000629E 662B15[A44E0000]    <1> 		sub dx, [lastmouseposition]
  7741 000062A5 660315[A84E0000]    <1> 		add dx, [mousecursorposition]
  7742 000062AC 66030D[AA4E0000]    <1> 		add cx, [mousecursorposition + 2]
  7743 000062B3 662B0D[A64E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7744 000062BA 663B15[C34C0000]    <1> 		cmp dx, [resolutionx2]
  7745 000062C1 7607                <1> 		jbe chkyresdrgwin
  7746 000062C3 668B15[A84E0000]    <1> 		mov dx, [mousecursorposition]
  7747                              <1> 	chkyresdrgwin:
  7748 000062CA 663B0D[D74B0000]    <1> 		cmp cx, [resolutiony]
  7749 000062D1 7607                <1> 		jbe nodragwin
  7750 000062D3 668B0D[AA4E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7751                              <1> 	nodragwin:
  7752 000062DA 8B5E0C              <1> 		mov ebx, [esi + 12]
  7753 000062DD 668B460A            <1> 		mov ax, [esi + 10]
  7754 000062E1 8B7602              <1> 		mov esi, [esi + 2]
  7755 000062E4 E870040000          <1> 		call showwindow
  7756 000062E9 E939000000          <1> 		jmp doneiconsel
  7757                              <1> 	killwin:
  7758 000062EE 66C7060000          <1> 		mov word [esi], 0
  7759 000062F3 C605[46210000]00    <1> 		mov byte [termguion], 0
  7760 000062FA E8CDF8FFFF          <1> 		call guiclear
  7761 000062FF E8A7000000          <1> 		call reloadallgraphics
  7762 00006304 E914F9FFFF          <1> 		jmp guistart
  7763 00006309 E93A000000          <1> 		jmp doneiconsel2
  7764                              <1> 	nexticonsel:
  7765 0000630E 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7766 00006314 81C610000000        <1> 		add esi, 16
  7767 0000631A 81FE[B3B70000]      <1> 		cmp esi, graphicstableend
  7768 00006320 7305                <1> 		jae doneiconsel
  7769 00006322 E9BCFBFFFF          <1> 		jmp clicon2
  7770                              <1> 	doneiconsel:
  7771 00006327 813D[645E0000]0100- <1> 		cmp dword [dragging], 1
  7772 0000632F 0000                <1>
  7773 00006331 7315                <1> 		jae doneiconsel2
  7774 00006333 813D[536F0000]0000- <1> 		cmp dword [codepointer], 0
  7775 0000633B 0000                <1>
  7776 0000633D 7409                <1> 		je doneiconsel2
  7777 0000633F 8B1D[536F0000]      <1> 		mov ebx, [codepointer]
  7778 00006345 FFD3                <1> 		call ebx 
  7779 00006347 C3                  <1> 		ret
  7780                              <1> 	doneiconsel2:
  7781 00006348 A0[B94F0000]        <1> 		mov al, [LBUTTON]
  7782 0000634D A2[625E0000]        <1> 		mov [pLBUTTON], al
  7783 00006352 A0[BA4F0000]        <1> 		mov al, [RBUTTON]
  7784 00006357 A2[635E0000]        <1> 		mov [pRBUTTON], al
  7785 0000635C 66813D[645E0000]01- <1> 		cmp word [dragging], 1
  7786 00006364 00                  <1>
  7787 00006365 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  7788 0000636B E8D6F9FFFF          <1> call clearmousecursor
  7789 00006370 E836000000          <1> call reloadallgraphics
  7790                              <1> noreloadgraphicsclick:
  7791 00006375 31C9                <1> 		xor ecx, ecx
  7792 00006377 31D2                <1> 		xor edx, edx
  7793 00006379 30E4                <1> 		xor ah, ah
  7794 0000637B B0FE                <1> 		mov al, 254
  7795 0000637D 668B15[A84E0000]    <1> 		mov dx, [mousecursorposition]
  7796 00006384 668B0D[AA4E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7797 0000638B 66BBE738            <1> 		mov bx, 0011100011100111b
  7798 0000638F C605[435D0000]01    <1> 		mov byte [showcursorfonton], 1
  7799 00006396 E8DA080000          <1> 		call showfontvesa
  7800 0000639B C605[435D0000]00    <1> 		mov byte [showcursorfonton], 0
  7801 000063A2 C3                  <1> 		ret
  7802 000063A3 00000000            <1> lastdrag dw 0,0
  7803 000063A7 00000000            <1> grpctblpos dw 0,0
  7804                              <1> 
  7805                              <1> reloadallgraphics:
  7806 000063AB BF[B3B50000]        <1> 		mov edi, graphicstable
  7807                              <1> reloadgraphicsloop:
  7808 000063B0 8B7702              <1> 		mov esi, [edi + 2]
  7809 000063B3 668B5706            <1> 		mov dx, [edi + 6]
  7810 000063B7 668B4F08            <1> 		mov cx, [edi + 8]
  7811 000063BB 668B07              <1> 		mov ax, [edi]
  7812 000063BE 668B5F0A            <1> 		mov bx, [edi + 10]
  7813 000063C2 893D[A7630000]      <1> 		mov [grpctblpos], edi
  7814 000063C8 3B3D[645E0000]      <1> 		cmp edi, [dragging]
  7815 000063CE 741E                <1> 		je loadedgraphic
  7816 000063D0 663D0100            <1> 		cmp ax, 1
  7817 000063D4 0F8436000000        <1> 		je near icongraphic
  7818 000063DA 663D0200            <1> 		cmp ax, 2
  7819 000063DE 0F843C000000        <1> 		je near stringgraphic
  7820 000063E4 663D0300            <1> 		cmp ax, 3
  7821 000063E8 0F8416000000        <1> 		je near windowgraphic
  7822 000063EE 8B3D[A7630000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  7823 000063F4 81C710000000        <1> 		add edi, 16
  7824 000063FA 81FF[B3B70000]      <1> 		cmp edi, graphicstableend
  7825 00006400 732E                <1> 		jae donereloadgraphics
  7826 00006402 EBAC                <1> 		jmp reloadgraphicsloop
  7827 00006404 E8F8030000          <1> windowgraphic:	call showwindow2
  7828 00006409 E815B9FFFF          <1> 		call cleardouble
  7829 0000640E EBDE                <1> 		jmp loadedgraphic
  7830 00006410 80E301              <1> icongraphic:	and bl, 1
  7831 00006413 881D[576F0000]      <1> 		mov [iconselected], bl
  7832 00006419 E890070000          <1> 		call showicon2
  7833 0000641E EBCE                <1> 		jmp loadedgraphic
  7834 00006420 80E301              <1> stringgraphic:  and bl, 1
  7835 00006423 881D[455D0000]      <1> 		mov [mouseselecton], bl
  7836 00006429 E8D6020000          <1> 		call showstring2
  7837 0000642E EBBE                <1> 		jmp loadedgraphic
  7838                              <1> donereloadgraphics:
  7839 00006430 8B3D[645E0000]      <1> 		mov edi, [dragging]
  7840 00006436 81FF[B3B50000]      <1> 		cmp edi, graphicstable
  7841 0000643C 7226                <1> 		jb notcorrectdrag
  7842 0000643E 668B07              <1> 		mov ax, [edi]
  7843 00006441 8B7702              <1> 		mov esi, [edi + 2]
  7844 00006444 668B5706            <1> 		mov dx, [edi + 6]
  7845 00006448 668B4F08            <1> 		mov cx, [edi + 8]
  7846 0000644C 668B5F0A            <1> 		mov bx, [edi + 10]
  7847 00006450 663D0100            <1> 		cmp ax, 1
  7848 00006454 750F                <1> 		jne noticondragging
  7849 00006456 80E301              <1> 		and bl, 1
  7850 00006459 881D[576F0000]      <1> 		mov [iconselected], bl
  7851 0000645F E84A070000          <1> 		call showicon2
  7852                              <1> notcorrectdrag:
  7853 00006464 C3                  <1> 		ret
  7854                              <1> 
  7855                              <1> 	noticondragging:
  7856 00006465 663D0200            <1> 		cmp ax, 2
  7857 00006469 75F9                <1> 		jne notcorrectdrag
  7858 0000646B 80E301              <1> 		and bl, 1
  7859 0000646E 881D[455D0000]      <1> 		mov [mouseselecton], bl
  7860 00006474 E88B020000          <1> 		call showstring2
  7861 00006479 EBE9                <1> 		jmp notcorrectdrag
  7862                              <1> 
  7863 0000647B 00<rept>            <1> grphbuf times 16 db 0
  7864                              <1> 	graphicsadd:
  7865 0000648B BF[B3B50000]        <1> 		mov edi, graphicstable
  7866                              <1> 	shwgrph1:
  7867 00006490 397702              <1> 		cmp dword [edi + 2], esi
  7868 00006493 7414                <1> 		je showgraphicsreplace2
  7869 00006495 81C710000000        <1> 		add edi, 16
  7870 0000649B 81FF[B3B70000]      <1> 		cmp edi, graphicstableend
  7871 000064A1 0F832F020000        <1> 		jae near showgraphicsnew
  7872 000064A7 EBE7                <1> 		jmp shwgrph1
  7873                              <1> 	showgraphicsreplace2:
  7874 000064A9 8935[7D640000]      <1> 		mov [grphbuf + 2], esi
  7875 000064AF 668915[81640000]    <1> 		mov [grphbuf + 6], dx
  7876 000064B6 66890D[83640000]    <1> 		mov [grphbuf + 8], cx
  7877 000064BD 891D[87640000]      <1> 		mov [grphbuf + 12], ebx
  7878 000064C3 30FF                <1> 		xor bh, bh
  7879 000064C5 88E3                <1> 		mov bl, ah
  7880 000064C7 30E4                <1> 		xor ah, ah
  7881 000064C9 66A3[85640000]      <1> 		mov [grphbuf + 10], ax	
  7882 000064CF 66891D[7B640000]    <1> 		mov [grphbuf], bx
  7883 000064D6 66A1[7B640000]      <1> 		mov ax, [grphbuf]
  7884 000064DC 663D0100            <1> 		cmp ax, 1
  7885 000064E0 0F8419000000        <1> 		je near replaceicon
  7886 000064E6 663D0200            <1> 		cmp ax, 2
  7887 000064EA 0F8493000000        <1> 		je near replacestring
  7888 000064F0 663D0300            <1> 		cmp ax, 3
  7889 000064F4 0F840F010000        <1> 		je near replacewindow
  7890 000064FA E9B4010000          <1> 		jmp showgraphicsreplace
  7891                              <1> 	replaceicon:
  7892 000064FF 893D[685E0000]      <1> 		mov [lastpos], edi
  7893 00006505 8935[6C5E0000]      <1> 		mov [lastpos + 4], esi
  7894 0000650B 8B7702              <1> 		mov esi, [edi + 2]
  7895 0000650E 668B5F0C            <1> 		mov bx, [edi + 12]
  7896 00006512 668B5706            <1> 		mov dx, [edi + 6]
  7897 00006516 668B4F08            <1> 		mov cx, [edi + 8]
  7898 0000651A 668B06              <1> 		mov ax, [esi]
  7899 0000651D 66A3[705E0000]      <1> 		mov [colorbuf], ax
  7900 00006523 66A1[095C0000]      <1> 		mov ax, [background]
  7901 00006529 668906              <1> 		mov [esi], ax
  7902 0000652C 8B5F0C              <1> 		mov ebx, [edi + 12]
  7903 0000652F 668B470A            <1> 		mov ax, [edi + 10]
  7904 00006533 2401                <1> 		and al, 1
  7905 00006535 A2[576F0000]        <1> 		mov [iconselected], al
  7906 0000653A 668B470A            <1> 		mov ax, [edi + 10]
  7907 0000653E E86B060000          <1> 		call showicon2
  7908 00006543 8B3D[685E0000]      <1> 		mov edi, [lastpos]
  7909 00006549 8B7702              <1> 		mov esi, [edi + 2]
  7910 0000654C 66A1[705E0000]      <1> 		mov ax, [colorbuf]
  7911 00006552 668906              <1> 		mov [esi], ax
  7912 00006555 8B35[6C5E0000]      <1> 		mov esi, [lastpos + 4]
  7913 0000655B 668B15[81640000]    <1> 		mov dx, [grphbuf + 6]
  7914 00006562 668B0D[83640000]    <1> 		mov cx, [grphbuf + 8]
  7915 00006569 668B1D[7B640000]    <1> 		mov bx, [grphbuf]
  7916 00006570 66A1[85640000]      <1> 		mov ax, [grphbuf + 10]
  7917 00006576 88DC                <1> 		mov ah, bl
  7918 00006578 8B1D[87640000]      <1> 		mov ebx, [grphbuf + 12]
  7919 0000657E E930010000          <1> 		jmp showgraphicsreplace
  7920                              <1> 	replacestring:
  7921 00006583 893D[685E0000]      <1> 		mov [lastpos], edi
  7922 00006589 8935[6C5E0000]      <1> 		mov [lastpos + 4], esi
  7923 0000658F 8B5F0C              <1> 		mov ebx, [edi + 12]
  7924 00006592 8B7702              <1> 		mov esi, [edi + 2]
  7925 00006595 668B5706            <1> 		mov dx, [edi + 6]
  7926 00006599 668B4F08            <1> 		mov cx, [edi + 8]
  7927 0000659D 66A1[3C670000]      <1> 		mov ax, [colorfont2]
  7928 000065A3 66A3[705E0000]      <1> 		mov [colorbuf], ax
  7929 000065A9 66A1[095C0000]      <1> 		mov ax, [background]
  7930 000065AF 66A3[3C670000]      <1> 		mov [colorfont2], ax		
  7931 000065B5 8B5F0C              <1> 		mov ebx, [edi + 12]
  7932 000065B8 668B470A            <1> 		mov ax, [edi + 10]
  7933 000065BC 2401                <1> 		and al, 1
  7934 000065BE A2[455D0000]        <1> 		mov [mouseselecton], al
  7935 000065C3 668B470A            <1> 		mov ax, [edi + 10]
  7936 000065C7 E838010000          <1> 		call showstring2
  7937 000065CC 66A1[705E0000]      <1> 		mov ax, [colorbuf]
  7938 000065D2 66A3[3C670000]      <1> 		mov [colorfont2], ax
  7939 000065D8 8B3D[685E0000]      <1> 		mov edi, [lastpos]
  7940 000065DE 8B7702              <1> 		mov esi, [edi + 2]
  7941 000065E1 668B15[81640000]    <1> 		mov dx, [grphbuf + 6]
  7942 000065E8 668B0D[83640000]    <1> 		mov cx, [grphbuf + 8]
  7943 000065EF 668B1D[7B640000]    <1> 		mov bx, [grphbuf]
  7944 000065F6 66A1[85640000]      <1> 		mov ax, [grphbuf + 10]
  7945 000065FC 88DC                <1> 		mov ah, bl
  7946 000065FE 8B1D[87640000]      <1> 		mov ebx, [grphbuf + 12]
  7947 00006604 E9AA000000          <1> 		jmp showgraphicsreplace
  7948                              <1> 	replacewindow:
  7949 00006609 893D[685E0000]      <1> 		mov [lastpos], edi
  7950 0000660F 8935[6C5E0000]      <1> 		mov [lastpos + 4], esi
  7951 00006615 8B7702              <1> 		mov esi, [edi + 2]
  7952 00006618 8B3D[4B670000]      <1> 		mov edi, [windowbufloc]
  7953 0000661E 31D2                <1> 		xor edx, edx
  7954 00006620 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  7955 00006627 C1E204              <1> 		shl edx, 4
  7956 0000662A 29D7                <1> 		sub edi, edx
  7957 0000662C 31D2                <1> 		xor edx, edx
  7958 0000662E 668B16              <1> 		mov dx, [esi]
  7959 00006631 660316              <1> 		add dx, [esi]
  7960 00006634 668B4E02            <1> 		mov cx, [esi + 2]
  7961 00006638 6681C11000          <1> 		add cx, 16
  7962 0000663D 66A1[095C0000]      <1> 		mov ax, [background]
  7963                              <1> 	clearwindow:
  7964 00006643 668907              <1> 		mov [edi], ax
  7965 00006646 81C702000000        <1> 		add edi, 2
  7966 0000664C 81EA02000000        <1> 		sub edx, 2
  7967 00006652 81FA00000000        <1> 		cmp edx, 0
  7968 00006658 75E9                <1> 		jne clearwindow
  7969 0000665A 6649                <1> 		dec cx
  7970 0000665C 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  7971 00006663 662B16              <1> 		sub dx, [esi]
  7972 00006666 662B16              <1> 		sub dx, [esi]
  7973 00006669 01D7                <1> 		add edi, edx
  7974 0000666B 668B16              <1> 		mov dx, [esi]
  7975 0000666E 660316              <1> 		add dx, [esi]
  7976 00006671 6681F90000          <1> 		cmp cx, 0
  7977 00006676 75CB                <1> 		jne clearwindow
  7978 00006678 C605[47210000]00    <1> 		mov byte [termcopyon], 0
  7979 0000667F 8B3D[685E0000]      <1> 		mov edi, [lastpos]
  7980 00006685 8B35[7D640000]      <1> 		mov esi, [grphbuf + 2]
  7981 0000668B 668B15[81640000]    <1> 		mov dx, [grphbuf + 6]
  7982 00006692 668B0D[83640000]    <1> 		mov cx, [grphbuf + 8]
  7983 00006699 668B1D[7B640000]    <1> 		mov bx, [grphbuf]
  7984 000066A0 66A1[85640000]      <1> 		mov ax, [grphbuf + 10]
  7985 000066A6 88DC                <1> 		mov ah, bl
  7986 000066A8 8B1D[87640000]      <1> 		mov ebx, [grphbuf + 12]
  7987 000066AE E900000000          <1> 		jmp showgraphicsreplace
  7988                              <1> 	showgraphicsreplace:
  7989 000066B3 897702              <1> 		mov [edi + 2], esi
  7990 000066B6 66895706            <1> 		mov [edi + 6], dx
  7991 000066BA 66894F08            <1> 		mov [edi + 8], cx
  7992 000066BE 895F0C              <1> 		mov [edi + 12], ebx
  7993 000066C1 30FF                <1> 		xor bh, bh
  7994 000066C3 88E3                <1> 		mov bl, ah
  7995 000066C5 30E4                <1> 		xor ah, ah
  7996 000066C7 6689470A            <1> 		mov [edi + 10], ax
  7997 000066CB 66891F              <1> 		mov [edi], bx
  7998 000066CE 8B5F0C              <1> 		mov ebx, [edi + 12]
  7999 000066D1 668B470A            <1> 		mov ax, [edi + 10]
  8000 000066D5 C3                  <1> 		ret
  8001                              <1> 	showgraphicsnew:
  8002 000066D6 BF[B3B50000]        <1> 		mov edi, graphicstable
  8003                              <1> 	shwgrph2:
  8004 000066DB 66813F0000          <1> 		cmp word [edi], 0
  8005 000066E0 74D1                <1> 		je showgraphicsreplace
  8006 000066E2 81C710000000        <1> 		add edi, 16
  8007 000066E8 81FF[B3B70000]      <1> 		cmp edi, graphicstableend
  8008 000066EE 72EB                <1> 		jb shwgrph2
  8009                              <1> 	showgraphicsdone:
  8010 000066F0 C3                  <1> 		ret
  8011                              <1> 
  8012                              <1> 	showstring:
  8013 000066F1 A2[455D0000]        <1> 		mov [mouseselecton], al
  8014 000066F6 8025[455D0000]01    <1> 		and byte [mouseselecton], 1
  8015 000066FD B402                <1> 		mov ah, 2
  8016 000066FF E887FDFFFF          <1> 		call graphicsadd
  8017                              <1> 	showstring2:
  8018 00006704 30E4                <1> 		xor ah, ah
  8019 00006706 8A06                <1> 		mov al, [esi]
  8020 00006708 3C00                <1> 		cmp al, 0
  8021 0000670A 7428                <1> 		je doneshowstring
  8022 0000670C 46                  <1> 		inc esi
  8023 0000670D 3CFF                <1> 		cmp al, 255
  8024 0000670F 74F3                <1> 		je showstring2
  8025 00006711 8935[046F0000]      <1> 		mov [showstringesi], esi
  8026 00006717 668B1D[3C670000]    <1> 		mov bx, [colorfont2]
  8027 0000671E E852050000          <1> 		call showfontvesa
  8028 00006723 3C0A                <1> 		cmp al, 10
  8029 00006725 7405                <1> 		je noproceedshst
  8030 00006727 6681C20800          <1> 		add dx, 8
  8031                              <1> 	noproceedshst:
  8032 0000672C 8B35[046F0000]      <1> 		mov esi, [showstringesi]
  8033 00006732 EBD0                <1> 		jmp showstring2
  8034                              <1> 	doneshowstring:
  8035 00006734 C605[455D0000]00    <1> 		mov byte [mouseselecton], 0
  8036 0000673B C3                  <1> 		ret
  8037                              <1> 
  8038 0000673C FFFF                <1> colorfont2 dw 0xFFFF
  8039 0000673E 00                  <1> colorcache db 0
  8040 0000673F 0000                <1> winvcopystx dw 0
  8041 00006741 0000                <1> winvcopysty dw 0
  8042 00006743 0000                <1> winvcopydx dw 0
  8043 00006745 0000                <1> winvcopycx dw 0
  8044 00006747 FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  8045 0000674B 00000000            <1> windowbufloc: dw 0,0
  8046 0000674F 00000000            <1> windowinfobuf dd 0
  8047 00006753 0000                <1> termcol dw 0
  8048 00006755 00000000            <1> wincopyendpos dd 0
  8049                              <1> 
  8050                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  8051 00006759 C605[46210000]01    <1> 		mov byte [termguion], 1
  8052 00006760 6681C11000          <1> 		add cx, 16
  8053 00006765 668915[3F670000]    <1> 		mov [winvcopystx], dx
  8054 0000676C 66890D[41670000]    <1> 		mov [winvcopysty], cx
  8055 00006773 8935[4F670000]      <1> 		mov [windowinfobuf], esi
  8056 00006779 668B16              <1> 		mov dx, [esi]
  8057 0000677C 668B4E02            <1> 		mov cx, [esi + 2]
  8058 00006780 31C0                <1> 		xor eax, eax
  8059 00006782 31DB                <1> 		xor ebx, ebx
  8060 00006784 6689D0              <1> 		mov ax, dx
  8061 00006787 6689CB              <1> 		mov bx, cx
  8062 0000678A 66C1E803            <1> 		shr ax, 3
  8063 0000678E 66C1EB04            <1> 		shr bx, 4
  8064 00006792 66A3[53670000]      <1> 		mov [termcol], ax
  8065 00006798 A2[0A230000]        <1> 		mov [charxy], al
  8066 0000679D 881D[0B230000]      <1> 		mov [charxy + 1], bl
  8067 000067A3 BF[B4B80000]        <1> 		mov edi, videobuf
  8068 000067A8 81FB00000000        <1> 		cmp ebx, 0
  8069 000067AE 0F84CD030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  8070                              <1> 	findendposwin:
  8071 000067B4 01C7                <1> 		add edi, eax
  8072 000067B6 01C7                <1> 		add edi, eax
  8073 000067B8 4B                  <1> 		dec ebx
  8074 000067B9 81FB00000000        <1> 		cmp ebx, 0
  8075 000067BF 77F3                <1> 		ja findendposwin
  8076 000067C1 893D[55670000]      <1> 		mov [wincopyendpos], edi
  8077 000067C7 31FF                <1> 		xor edi, edi
  8078 000067C9 6631C0              <1> 		xor ax, ax
  8079 000067CC 6631DB              <1> 		xor bx, bx
  8080 000067CF 6601D2              <1> 		add dx, dx
  8081 000067D2 668915[43670000]    <1> 		mov [winvcopydx], dx
  8082 000067D9 66890D[45670000]    <1> 		mov [winvcopycx], cx
  8083 000067E0 668B0D[41670000]    <1> 		mov cx, [winvcopysty]
  8084 000067E7 6681E91000          <1> 		sub cx, 16
  8085 000067EC 668B15[3F670000]    <1> 		mov dx, [winvcopystx]
  8086 000067F3 C605[47210000]00    <1> 		mov byte [termcopyon], 0
  8087 000067FA B403                <1> 		mov ah, 3
  8088 000067FC E88AFCFFFF          <1> 		call graphicsadd
  8089                              <1> 	showwindow2:
  8090 00006801 6681C11000          <1> 		add cx, 16
  8091 00006806 668915[3F670000]    <1> 		mov [winvcopystx], dx
  8092 0000680D 66890D[41670000]    <1> 		mov [winvcopysty], cx
  8093 00006814 668B16              <1> 		mov dx, [esi]
  8094 00006817 668B4E02            <1> 		mov cx, [esi + 2]
  8095 0000681B 6601D2              <1> 		add dx, dx
  8096 0000681E 668915[43670000]    <1> 		mov [winvcopydx], dx
  8097 00006825 66890D[45670000]    <1> 		mov [winvcopycx], cx
  8098 0000682C 8B3D[4B670000]      <1> 		mov edi, [windowbufloc]
  8099 00006832 31D2                <1> 		xor edx, edx
  8100 00006834 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8101 0000683B C1E204              <1> 		shl edx, 4
  8102 0000683E 29D7                <1> 		sub edi, edx
  8103 00006840 803D[47210000]00    <1> 		cmp byte [termcopyon], 0
  8104 00006847 7538                <1> 		jne nocleartitlebarpos
  8105 00006849 8B3D[EB4B0000]      <1> 		mov edi, [physbaseptr]
  8106 0000684F 31D2                <1> 		xor edx, edx
  8107 00006851 668B15[3F670000]    <1> 		mov dx, [winvcopystx]
  8108 00006858 01D7                <1> 		add edi, edx
  8109 0000685A 668B0D[41670000]    <1> 		mov cx, [winvcopysty]
  8110 00006861 6681E91000          <1> 		sub cx, 16
  8111 00006866 6681F90000          <1> 		cmp cx, 0
  8112 0000686B 7414                <1> 		je nocleartitlebarpos
  8113                              <1> 	cleartitlebarpos:
  8114 0000686D 31D2                <1> 		xor edx, edx
  8115 0000686F 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8116 00006876 01D7                <1> 		add edi, edx
  8117 00006878 6649                <1> 		dec cx
  8118 0000687A 6681F90000          <1> 		cmp cx, 0
  8119 0000687F 75EC                <1> 		jne cleartitlebarpos
  8120                              <1> 	nocleartitlebarpos:
  8121 00006881 66B91000            <1> 		mov cx, 16
  8122 00006885 668B15[43670000]    <1> 		mov dx, [winvcopydx]
  8123 0000688C 6681F90000          <1> 		cmp cx, 0
  8124 00006891 0F8448000000        <1> 		je near canceltitlebarput
  8125 00006897 6681FA0000          <1> 		cmp dx, 0
  8126 0000689C 0F843D000000        <1> 		je near canceltitlebarput
  8127                              <1> 	titlebarput:
  8128 000068A2 66A1[47670000]      <1> 		mov ax, [windowcolor]
  8129 000068A8 668907              <1> 		mov [edi], ax
  8130 000068AB 6681EA0200          <1> 		sub dx, 2
  8131 000068B0 81C702000000        <1> 		add edi, 2
  8132 000068B6 6681FA0000          <1> 		cmp dx, 0
  8133 000068BB 75E5                <1> 		jne titlebarput
  8134 000068BD 31D2                <1> 		xor edx, edx
  8135 000068BF 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8136 000068C6 6649                <1> 		dec cx
  8137 000068C8 662B15[43670000]    <1> 		sub dx, [winvcopydx]
  8138 000068CF 01D7                <1> 		add edi, edx
  8139 000068D1 668B15[43670000]    <1> 		mov dx, [winvcopydx]
  8140 000068D8 6681F90000          <1> 		cmp cx, 0
  8141 000068DD 75C3                <1> 		jne titlebarput
  8142                              <1> 	canceltitlebarput:
  8143 000068DF 893D[4B670000]      <1> 		mov [windowbufloc], edi
  8144 000068E5 803D[47210000]02    <1> 		cmp byte [termcopyon], 2
  8145 000068EC 0F8461000000        <1> 		je near winvcpst
  8146 000068F2 6631C0              <1> 		xor ax, ax
  8147 000068F5 81C604000000        <1> 		add esi, 4
  8148 000068FB 668B15[3F670000]    <1> 		mov dx, [winvcopystx]
  8149 00006902 668B0D[41670000]    <1> 		mov cx, [winvcopysty]
  8150 00006909 6681E91000          <1> 		sub cx, 16
  8151 0000690E 6631DB              <1> 		xor bx, bx
  8152 00006911 C605[455D0000]01    <1> 		mov byte [mouseselecton], 1
  8153 00006918 E8E7FDFFFF          <1> 		call showstring2
  8154 0000691D B058                <1> 		mov al, "X"
  8155 0000691F 30E4                <1> 		xor ah, ah
  8156 00006921 668B1D[3C670000]    <1> 		mov bx, [colorfont2]
  8157 00006928 668B15[3F670000]    <1> 		mov dx, [winvcopystx]
  8158 0000692F 668B0D[41670000]    <1> 		mov cx, [winvcopysty]
  8159 00006936 6681E91000          <1> 		sub cx, 16
  8160 0000693B 6681EA1400          <1> 		sub dx, 20
  8161 00006940 660315[43670000]    <1> 		add dx, [winvcopydx]
  8162 00006947 C605[455D0000]01    <1> 		mov byte [mouseselecton], 1
  8163 0000694E E822030000          <1> 		call showfontvesa
  8164                              <1> 	winvcpst:
  8165 00006953 8B3D[4B670000]      <1> 		mov edi, [windowbufloc]
  8166 00006959 E97E000000          <1> 		jmp windowvideocopyset
  8167                              <1> 
  8168                              <1> 	windowvideocopy:
  8169 0000695E 8B35[4F670000]      <1> 		mov esi, [windowinfobuf]
  8170 00006964 668B16              <1> 		mov dx, [esi]
  8171 00006967 668B4E02            <1> 		mov cx, [esi + 2]
  8172 0000696B 31C0                <1> 		xor eax, eax
  8173 0000696D 31DB                <1> 		xor ebx, ebx
  8174 0000696F 6689D0              <1> 		mov ax, dx
  8175 00006972 6689CB              <1> 		mov bx, cx
  8176 00006975 66C1E803            <1> 		shr ax, 3
  8177 00006979 66C1EB04            <1> 		shr bx, 4
  8178 0000697D 66A3[53670000]      <1> 		mov [termcol], ax
  8179 00006983 A2[0A230000]        <1> 		mov [charxy], al
  8180 00006988 881D[0B230000]      <1> 		mov [charxy + 1], bl
  8181 0000698E 8B3D[4B670000]      <1> 		mov edi, [windowbufloc]
  8182 00006994 3B3D[EB4B0000]      <1> 		cmp edi, [physbaseptr]
  8183 0000699A 0F833C000000        <1> 		jae near windowvideocopyset
  8184 000069A0 31C9                <1> 		xor ecx, ecx
  8185 000069A2 31D2                <1> 		xor edx, edx
  8186 000069A4 668B15[3F670000]    <1> 		mov dx, [winvcopystx]
  8187 000069AB 668B0D[41670000]    <1> 		mov cx, [winvcopysty]
  8188 000069B2 8B3D[EB4B0000]      <1> 		mov edi, [physbaseptr]
  8189 000069B8 01D7                <1> 		add edi, edx
  8190 000069BA 81F900000000        <1> 		cmp ecx, 0
  8191 000069C0 741A                <1> 		je windowvideocopyset
  8192                              <1> 	yrescopylp:
  8193 000069C2 31D2                <1> 		xor edx, edx
  8194 000069C4 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8195 000069CB 01D7                <1> 		add edi, edx
  8196 000069CD 6649                <1> 		dec cx
  8197 000069CF 6681F90000          <1> 		cmp cx, 0
  8198 000069D4 75EC                <1> 		jne yrescopylp
  8199 000069D6 893D[4B670000]      <1> 		mov [windowbufloc], edi
  8200                              <1> 	windowvideocopyset:
  8201 000069DC 6631C9              <1> 		xor cx, cx
  8202 000069DF 6649                <1> 		dec cx
  8203 000069E1 66890D[936B0000]    <1> 		mov [charposline], cx
  8204 000069E8 89FE                <1> 		mov esi, edi
  8205 000069EA 81EE10000000        <1> 		sub esi, 16
  8206 000069F0 31D2                <1> 		xor edx, edx
  8207 000069F2 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8208 000069F9 C1E204              <1> 		shl edx, 4
  8209 000069FC 01D6                <1> 		add esi, edx
  8210 000069FE BF[B4B80000]        <1> 		mov edi, videobuf
  8211 00006A03 81EF02000000        <1> 		sub edi, 2
  8212 00006A09 893D[956B0000]      <1> 		mov [charposvbuf], edi
  8213 00006A0F E96E000000          <1> 		jmp nextcharwin
  8214                              <1> 	copywindow:
  8215 00006A14 B201                <1> 		mov dl, 1
  8216 00006A16 D0C6                <1> 		rol dh, 1
  8217 00006A18 20F2                <1> 		and dl, dh
  8218 00006A1A 803D[3E670000]10    <1> 		cmp byte [colorcache], 0x10
  8219 00006A21 731C                <1> 		jae switchwincolors
  8220 00006A23 66A1[49670000]      <1> 		mov ax, [windowcolor + 2]
  8221 00006A29 668907              <1> 		mov [edi], ax
  8222 00006A2C 80FA00              <1> 		cmp dl, 0
  8223 00006A2F 7425                <1> 		je nowritewin
  8224 00006A31 66A1[47670000]      <1> 		mov ax, [windowcolor]
  8225 00006A37 668907              <1> 		mov [edi], ax
  8226 00006A3A E917000000          <1> 		jmp nowritewin
  8227                              <1> 	switchwincolors:
  8228 00006A3F 66A1[47670000]      <1> 		mov ax, [windowcolor]
  8229 00006A45 668907              <1> 		mov [edi], ax
  8230 00006A48 80FA00              <1> 		cmp dl, 0
  8231 00006A4B 7409                <1> 		je nowritewin
  8232 00006A4D 66A1[49670000]      <1> 		mov ax, [windowcolor + 2]
  8233 00006A53 668907              <1> 		mov [edi], ax
  8234                              <1> 	nowritewin:
  8235 00006A56 81C702000000        <1> 		add edi, 2
  8236 00006A5C FEC1                <1> 		inc cl
  8237 00006A5E 80F908              <1> 		cmp cl, 8
  8238 00006A61 75B1                <1> 		jne copywindow
  8239 00006A63 6643                <1> 		inc bx
  8240 00006A65 30C9                <1> 		xor cl, cl
  8241 00006A67 31D2                <1> 		xor edx, edx
  8242 00006A69 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8243 00006A70 01D6                <1> 		add esi, edx
  8244 00006A72 89F7                <1> 		mov edi, esi
  8245 00006A74 678AB7[4F73]        <1> 		mov dh, [fonts + bx]
  8246 00006A79 D0CE                <1> 		ror dh, 1
  8247 00006A7B FEC5                <1> 		inc ch
  8248 00006A7D 80FD10              <1> 		cmp ch, 16
  8249 00006A80 7592                <1> 		jne copywindow
  8250                              <1> 	nextcharwin:
  8251 00006A82 6631C9              <1> 		xor cx, cx
  8252 00006A85 8B3D[956B0000]      <1> 		mov edi, [charposvbuf]
  8253 00006A8B 81C702000000        <1> 		add edi, 2
  8254 00006A91 3B3D[55670000]      <1> 		cmp edi, [wincopyendpos]
  8255 00006A97 0F83E4000000        <1> 		jae near donewincopynow
  8256 00006A9D 8A7F01              <1> 		mov bh, [edi + 1]
  8257 00006AA0 80FF00              <1> 		cmp bh, 0
  8258 00006AA3 7505                <1> 		jne nofixcolorwin
  8259 00006AA5 B707                <1> 		mov bh, 7
  8260 00006AA7 887F01              <1> 		mov [edi + 1], bh
  8261                              <1> 	nofixcolorwin:
  8262 00006AAA 883D[3E670000]      <1> 		mov [colorcache], bh
  8263 00006AB0 8A1F                <1> 		mov bl, [edi]
  8264 00006AB2 893D[956B0000]      <1> 		mov [charposvbuf], edi
  8265 00006AB8 81EF[B4B80000]      <1> 		sub edi, videobuf
  8266 00006ABE 81C7[B4080100]      <1> 		add edi, videobuf2
  8267 00006AC4 8A6701              <1> 		mov ah, [edi + 1]
  8268 00006AC7 8A07                <1> 		mov al, [edi]
  8269 00006AC9 6639D8              <1> 		cmp ax, bx
  8270 00006ACC 7543                <1> 		jne noskipcharcopy
  8271                              <1> 	skipcharcopy:
  8272 00006ACE 81C610000000        <1> 		add esi, 16
  8273 00006AD4 668B0D[936B0000]    <1> 		mov cx, [charposline]
  8274 00006ADB 6641                <1> 		inc cx
  8275 00006ADD 66890D[936B0000]    <1> 		mov [charposline], cx
  8276 00006AE4 663B0D[53670000]    <1> 		cmp cx, [termcol]
  8277 00006AEB 7295                <1> 		jb nextcharwin
  8278 00006AED 6631C9              <1> 		xor cx, cx
  8279 00006AF0 66890D[936B0000]    <1> 		mov [charposline], cx
  8280 00006AF7 31D2                <1> 		xor edx, edx
  8281 00006AF9 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8282 00006B00 C1E204              <1> 		shl edx, 4
  8283 00006B03 662B15[43670000]    <1> 		sub dx, [winvcopydx]
  8284 00006B0A 01D6                <1> 		add esi, edx
  8285 00006B0C E971FFFFFF          <1> 		jmp nextcharwin
  8286                              <1> 	noskipcharcopy:
  8287 00006B11 881F                <1> 		mov [edi], bl
  8288 00006B13 887F01              <1> 		mov [edi + 1], bh
  8289 00006B16 8B3D[956B0000]      <1> 		mov edi, [charposvbuf]
  8290 00006B1C 30FF                <1> 		xor bh, bh
  8291 00006B1E 66C1E304            <1> 		shl bx, 4
  8292 00006B22 31D2                <1> 		xor edx, edx
  8293 00006B24 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8294 00006B2B C1E204              <1> 		shl edx, 4
  8295 00006B2E 29D6                <1> 		sub esi, edx
  8296 00006B30 81C610000000        <1> 		add esi, 16
  8297 00006B36 89F7                <1> 		mov edi, esi
  8298 00006B38 668B0D[936B0000]    <1> 		mov cx, [charposline]
  8299 00006B3F 6641                <1> 		inc cx
  8300 00006B41 663B0D[53670000]    <1> 		cmp cx, [termcol]
  8301 00006B48 7316                <1> 		jae fixwindowcopy
  8302 00006B4A 66890D[936B0000]    <1> 		mov [charposline], cx
  8303 00006B51 6631C9              <1> 		xor cx, cx
  8304 00006B54 678AB7[4F73]        <1> 		mov dh, [fonts + bx]
  8305 00006B59 D0CE                <1> 		ror dh, 1
  8306 00006B5B E9B4FEFFFF          <1> 		jmp copywindow
  8307                              <1> fixwindowcopy:
  8308 00006B60 6631C9              <1> 		xor cx, cx
  8309 00006B63 66890D[936B0000]    <1> 		mov [charposline], cx
  8310 00006B6A 662B15[43670000]    <1> 		sub dx, [winvcopydx]
  8311 00006B71 01D6                <1> 		add esi, edx
  8312 00006B73 89F7                <1> 		mov edi, esi
  8313 00006B75 678AB7[4F73]        <1> 		mov dh, [fonts + bx]
  8314 00006B7A D0CE                <1> 		ror dh, 1
  8315 00006B7C E993FEFFFF          <1> 		jmp copywindow
  8316                              <1> donewincopynow:
  8317 00006B81 803D[47210000]01    <1> 		cmp byte [termcopyon], 1
  8318 00006B88 7501                <1> 		jne forgetresetstuff
  8319 00006B8A 61                  <1> 		popa
  8320                              <1> forgetresetstuff:
  8321 00006B8B C605[47210000]00    <1> 		mov byte [termcopyon], 0
  8322 00006B92 C3                  <1> 		ret
  8323                              <1> 		
  8324 00006B93 0000                <1> charposline dw 0
  8325 00006B95 00000000            <1> charposvbuf dw 0,0
  8326 00006B99 0000                <1> iconcolor dw 0
  8327                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8328 00006B9B A2[576F0000]        <1> 		mov [iconselected], al
  8329 00006BA0 8025[576F0000]01    <1> 		and byte [iconselected], 1
  8330 00006BA7 B401                <1> 		mov ah, 1
  8331 00006BA9 E8DDF8FFFF          <1> 		call graphicsadd
  8332                              <1> 	showicon2:
  8333 00006BAE 8B3D[EB4B0000]      <1> 		mov edi, [physbaseptr]
  8334 00006BB4 6601D2              <1> 		add dx, dx
  8335 00006BB7 663B15[C34C0000]    <1> 		cmp dx, [resolutionx2]
  8336 00006BBE 720C                <1> 		jb screenxgood
  8337 00006BC0 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8338 00006BC7 6681EA4000          <1> 		sub dx, 64
  8339                              <1> 	screenxgood:
  8340 00006BCC 6681F90000          <1> 		cmp cx, 0
  8341 00006BD1 7422                <1> 		je noscreenygoodchk
  8342 00006BD3 663B0D[D74B0000]    <1> 		cmp cx, [resolutiony]
  8343 00006BDA 720C                <1> 		jb screenygood
  8344 00006BDC 668B0D[D74B0000]    <1> 		mov cx, [resolutiony]
  8345 00006BE3 6681E92000          <1> 		sub cx, 32
  8346                              <1> 	screenygood:
  8347 00006BE8 31DB                <1> 		xor ebx, ebx
  8348 00006BEA 668B1D[C34C0000]    <1> 		mov bx, [resolutionx2]
  8349 00006BF1 01DF                <1> 		add edi, ebx
  8350 00006BF3 E2F3                <1> 		loop screenygood
  8351                              <1> 	noscreenygoodchk:
  8352 00006BF5 31DB                <1> 		xor ebx, ebx
  8353 00006BF7 6689D3              <1> 		mov bx, dx
  8354 00006BFA 01DF                <1> 		add edi, ebx
  8355 00006BFC 6631C9              <1> 		xor cx, cx
  8356 00006BFF 668B06              <1> 		mov ax, [esi]
  8357 00006C02 81C602000000        <1> 		add esi, 2
  8358 00006C08 66A3[996B0000]      <1> 		mov [iconcolor], ax
  8359                              <1> 	writeicon:
  8360 00006C0E 8B06                <1> 		mov eax, [esi]
  8361 00006C10 D1C0                <1> 		rol eax, 1
  8362 00006C12 30C9                <1> 		xor cl, cl
  8363                              <1> 	writeiconline:
  8364 00006C14 B201                <1> 		mov dl, 1
  8365 00006C16 20C2                <1> 		and dl, al
  8366 00006C18 3215[576F0000]      <1> 		xor dl, [iconselected]
  8367 00006C1E 668B1D[095C0000]    <1> 		mov bx, [background]
  8368 00006C25 66891F              <1> 		mov [edi], bx
  8369 00006C28 80FA00              <1> 		cmp dl, 0
  8370 00006C2B 740A                <1> 		je noiconline
  8371 00006C2D 668B15[996B0000]    <1> 		mov dx, [iconcolor]
  8372 00006C34 668917              <1> 		mov [edi], dx
  8373                              <1> 	noiconline:
  8374 00006C37 81C702000000        <1> 		add edi, 2
  8375 00006C3D D1C0                <1> 		rol eax, 1
  8376 00006C3F FEC1                <1> 		inc cl
  8377 00006C41 80F920              <1> 		cmp cl, 32
  8378 00006C44 72CE                <1> 		jb writeiconline
  8379 00006C46 81C604000000        <1> 		add esi, 4
  8380 00006C4C FEC5                <1> 		inc ch
  8381 00006C4E 31D2                <1> 		xor edx, edx
  8382 00006C50 668B15[C34C0000]    <1> 		mov dx, [resolutionx2]
  8383 00006C57 01D7                <1> 		add edi, edx
  8384 00006C59 81EF40000000        <1> 		sub edi, 64
  8385 00006C5F 80FD20              <1> 		cmp ch, 32
  8386 00006C62 72AA                <1> 		jb writeicon
  8387 00006C64 31C0                <1> 		xor eax, eax
  8388 00006C66 C3                  <1> 		ret
  8389                              <1> 
  8390 00006C67 02                  <1> resolutionbytes db 2
  8391 00006C68 0000                <1> posxvesa dw 0
  8392 00006C6A 0000                <1> posyvesa dw 0
  8393 00006C6C FFFF                <1> colorfont dw 0xFFFF
  8394                              <1> savefontvesa:		;;same rules as showfontvesa
  8395 00006C6E C605[445D0000]01    <1> 	mov byte [savefonton], 1
  8396                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8397 00006C75 3CFF                <1> 	cmp al, 255
  8398 00006C77 7501                <1> 	jne nostopshowfont
  8399 00006C79 C3                  <1> 	ret
  8400                              <1> nostopshowfont:
  8401 00006C7A 66890D[6A6C0000]    <1> 	mov [posyvesa], cx
  8402 00006C81 3C0A                <1> 	cmp al, 10
  8403 00006C83 0F8424000000        <1> 	je near goodvesafontx
  8404 00006C89 31C9                <1> 	xor ecx, ecx
  8405 00006C8B 668B0D[C34C0000]    <1> 	mov cx, [resolutionx2]
  8406 00006C92 6639CA              <1> 	cmp dx, cx
  8407 00006C95 7616                <1> 	jbe goodvesafontx
  8408 00006C97 6631D2              <1> 	xor dx, dx
  8409 00006C9A 668B0D[6A6C0000]    <1> 	mov cx, [posyvesa]
  8410 00006CA1 6681C11000          <1> 	add cx, 16
  8411 00006CA6 66890D[6A6C0000]    <1> 	mov [posyvesa], cx
  8412                              <1> goodvesafontx:
  8413 00006CAD 668B0D[6A6C0000]    <1> 	mov cx, [posyvesa]
  8414 00006CB4 668915[686C0000]    <1> 	mov [posxvesa], dx
  8415 00006CBB 8B3D[EB4B0000]      <1> 	mov edi, [physbaseptr]
  8416 00006CC1 66891D[6C6C0000]    <1> 	mov [colorfont], bx
  8417 00006CC8 31DB                <1> 	xor ebx, ebx
  8418 00006CCA 88C3                <1> 	mov bl, al
  8419 00006CCC 31C0                <1> 	xor eax, eax
  8420 00006CCE 88D8                <1> 	mov al, bl
  8421 00006CD0 6689D3              <1> 	mov bx, dx
  8422 00006CD3 89DA                <1> 	mov edx, ebx
  8423 00006CD5 31DB                <1> 	xor ebx, ebx
  8424 00006CD7 6681F90000          <1> 	cmp cx, 0
  8425 00006CDC 7415                <1> 	je vesaposloopdn
  8426 00006CDE 668B1D[C34C0000]    <1> 	mov bx, [resolutionx2]
  8427                              <1> vesaposloop:
  8428 00006CE5 01DA                <1> 	add edx, ebx
  8429 00006CE7 6681E90100          <1> 	sub cx, 1
  8430 00006CEC 6681F90000          <1> 	cmp cx, 0
  8431 00006CF1 75F2                <1> 	jne vesaposloop
  8432                              <1> vesaposloopdn:
  8433 00006CF3 01D7                <1> 	add edi, edx
  8434 00006CF5 BE[4F730000]        <1> 	mov esi, fonts
  8435                              <1> findfontvesa:
  8436 00006CFA 30E4                <1> 	xor ah, ah
  8437 00006CFC 3C0A                <1> 	cmp al, 10
  8438 00006CFE 0F84FE000000        <1> 	je near nwlinevesa
  8439 00006D04 C1E004              <1> 	shl eax, 4
  8440 00006D07 01C6                <1> 	add esi, eax
  8441 00006D09 C1E804              <1> 	shr eax, 4
  8442 00006D0C 81FE[4F830000]      <1> 	cmp esi, fontend
  8443 00006D12 0F83B9000000        <1> 	jae near donefontvesa
  8444 00006D18 4E                  <1> 	dec esi
  8445                              <1> foundfontvesa:
  8446 00006D19 46                  <1> 	inc esi
  8447 00006D1A 803D[445D0000]01    <1> 	cmp byte [savefonton], 1
  8448 00006D21 0F8401010000        <1> 	je near vesafontsaver
  8449 00006D27 30C9                <1> 	xor cl, cl
  8450 00006D29 8A06                <1> 	mov al, [esi]
  8451 00006D2B 668B15[C34C0000]    <1> 	mov dx, [resolutionx2]
  8452 00006D32 662B15[686C0000]    <1> 	sub dx, [posxvesa]
  8453 00006D39 6681FA1000          <1> 	cmp dx, 16
  8454 00006D3E 7708                <1> 	ja paintfontvesa
  8455 00006D40 D0EA                <1> 	shr dl, 1
  8456 00006D42 8815[016E0000]      <1> 	mov [charwidth], dl
  8457                              <1> paintfontvesa:
  8458 00006D48 B201                <1> 	mov dl, 1
  8459 00006D4A 20C2                <1> 	and dl, al
  8460 00006D4C 803D[435D0000]01    <1> 	cmp byte [showcursorfonton], 1
  8461 00006D53 0F8435000000        <1> 	je near nodelpaintedfont
  8462 00006D59 803D[435D0000]02    <1> 	cmp byte [showcursorfonton], 2
  8463 00006D60 0F8518000000        <1> 	jne near noswitchcursorfonton
  8464 00006D66 80FA00              <1> 	cmp dl, 0
  8465 00006D69 0F842E000000        <1> 	je near nopixelset
  8466 00006D6F 668B1D[6C6C0000]    <1> 	mov bx, [colorfont]
  8467 00006D76 66891F              <1> 	mov [edi], bx
  8468 00006D79 E91F000000          <1> 	jmp nopixelset
  8469                              <1> noswitchcursorfonton:
  8470 00006D7E 3215[455D0000]      <1> 	xor dl, [mouseselecton]
  8471 00006D84 668B1D[095C0000]    <1> 	mov bx, [background]
  8472 00006D8B 66891F              <1> 	mov [edi], bx
  8473                              <1> nodelpaintedfont:
  8474 00006D8E 80FA00              <1> 	cmp dl, 0
  8475 00006D91 740A                <1> 	je nopixelset
  8476 00006D93 668B15[6C6C0000]    <1> 	mov dx, [colorfont]
  8477 00006D9A 668917              <1> 	mov [edi], dx
  8478                              <1> nopixelset:
  8479 00006D9D 81C702000000        <1> 	add edi, 2
  8480 00006DA3 D0C0                <1> 	rol al, 1
  8481 00006DA5 FEC1                <1> 	inc cl
  8482 00006DA7 3A0D[016E0000]      <1> 	cmp cl, [charwidth]
  8483 00006DAD 7299                <1> 	jb paintfontvesa
  8484 00006DAF FEC5                <1> 	inc ch
  8485 00006DB1 31D2                <1> 	xor edx, edx
  8486 00006DB3 668B15[C34C0000]    <1> 	mov dx, [resolutionx2]
  8487 00006DBA 01D7                <1> 	add edi, edx
  8488 00006DBC 31D2                <1> 	xor edx, edx
  8489 00006DBE 8A15[016E0000]      <1> 	mov dl, [charwidth]
  8490 00006DC4 00D2                <1> 	add dl, dl
  8491 00006DC6 29D7                <1> 	sub edi, edx
  8492 00006DC8 80FD10              <1> 	cmp ch, 16
  8493 00006DCB 0F8248FFFFFF        <1> 	jb foundfontvesa
  8494                              <1> donefontvesa:
  8495 00006DD1 B208                <1> 	mov dl, 8
  8496 00006DD3 8815[016E0000]      <1> 	mov [charwidth], dl
  8497 00006DD9 668B15[686C0000]    <1> 	mov dx, [posxvesa]
  8498 00006DE0 8A1D[016E0000]      <1> 	mov bl, [charwidth]
  8499 00006DE6 30FF                <1> 	xor bh, bh
  8500 00006DE8 6601DA              <1> 	add dx, bx
  8501 00006DEB 668B1D[6C6C0000]    <1> 	mov bx, [colorfont]
  8502 00006DF2 668B0D[6A6C0000]    <1> 	mov cx, [posyvesa]
  8503 00006DF9 C605[445D0000]00    <1> 	mov byte [savefonton], 0
  8504 00006E00 C3                  <1> 	ret
  8505 00006E01 08                  <1> charwidth db 8
  8506                              <1> nwlinevesa:
  8507 00006E02 668B15[686C0000]    <1> 	mov dx, [posxvesa]
  8508 00006E09 6631D2              <1> 	xor dx, dx
  8509 00006E0C 668915[686C0000]    <1> 	mov [posxvesa], dx
  8510 00006E13 668B0D[6A6C0000]    <1> 	mov cx, [posyvesa]
  8511 00006E1A 6681C11000          <1> 	add cx, 16
  8512 00006E1F 66890D[6A6C0000]    <1> 	mov [posyvesa], cx
  8513 00006E26 EBA9                <1> 	jmp donefontvesa
  8514                              <1> vesafontsaver:
  8515 00006E28 30C0                <1> 	xor al, al
  8516 00006E2A 30C9                <1> 	xor cl, cl
  8517                              <1> vesafontsaver2:
  8518 00006E2C 668B17              <1> 	mov dx, [edi]
  8519 00006E2F 663B15[6C6C0000]    <1> 	cmp dx, [colorfont]
  8520 00006E36 742F                <1> 	je colorfontmatch
  8521                              <1> donecolormatch:
  8522 00006E38 81C702000000        <1> 	add edi, 2
  8523 00006E3E D0C0                <1> 	rol al, 1
  8524 00006E40 FEC1                <1> 	inc cl
  8525 00006E42 80F908              <1> 	cmp cl, 8
  8526 00006E45 72E5                <1> 	jb vesafontsaver2
  8527 00006E47 8806                <1> 	mov [esi], al
  8528 00006E49 46                  <1> 	inc esi
  8529 00006E4A FEC5                <1> 	inc ch
  8530 00006E4C 31D2                <1> 	xor edx, edx
  8531 00006E4E 668B15[C34C0000]    <1> 	mov dx, [resolutionx2]
  8532 00006E55 01D7                <1> 	add edi, edx
  8533 00006E57 81EF10000000        <1> 	sub edi, 16
  8534 00006E5D 80FD10              <1> 	cmp ch, 16
  8535 00006E60 72C6                <1> 	jb vesafontsaver
  8536 00006E62 E96AFFFFFF          <1> 	jmp donefontvesa
  8537                              <1> colorfontmatch:
  8538 00006E67 0401                <1> 	add al, 1
  8539 00006E69 EBCD                <1> 	jmp donecolormatch
  8540                              <1> 	
  8541                              <1> showbmp:
  8542 00006E6B 668B06              <1> 	mov ax, [esi]
  8543 00006E6E 663D424D            <1> 	cmp ax, "BM"
  8544 00006E72 0F8582000000        <1> 	jne near endedbmp
  8545 00006E78 8B3D[EB4B0000]      <1> 	mov edi, [physbaseptr]
  8546 00006E7E 6689D0              <1> 	mov ax, dx
  8547 00006E81 6689CB              <1> 	mov bx, cx
  8548 00006E84 31C9                <1> 	xor ecx, ecx
  8549 00006E86 31D2                <1> 	xor edx, edx
  8550 00006E88 6689D9              <1> 	mov cx, bx
  8551 00006E8B 6689C2              <1> 	mov dx, ax
  8552 00006E8E 01D7                <1> 	add edi, edx
  8553 00006E90 01D7                <1> 	add edi, edx
  8554 00006E92 31D2                <1> 	xor edx, edx
  8555 00006E94 668B15[C34C0000]    <1> 	mov dx, [resolutionx2]
  8556 00006E9B 41                  <1> 	inc ecx
  8557 00006E9C 034E16              <1> 	add ecx, [esi + 22]
  8558                              <1> bmplocloop:
  8559 00006E9F 01D7                <1> 	add edi, edx
  8560 00006EA1 E2FC                <1> 	loop bmplocloop
  8561 00006EA3 29D7                <1> 	sub edi, edx
  8562 00006EA5 8B5612              <1> 	mov edx, [esi + 18]
  8563 00006EA8 8B4E16              <1> 	mov ecx, [esi + 22]
  8564 00006EAB 8B460A              <1> 	mov eax, [esi + 10]
  8565 00006EAE 8B5E02              <1> 	mov ebx, [esi + 2]
  8566 00006EB1 01F3                <1> 	add ebx, esi
  8567 00006EB3 891D[006F0000]      <1> 	mov [bmpend], ebx
  8568 00006EB9 89D3                <1> 	mov ebx, edx
  8569 00006EBB 01C6                <1> 	add esi, eax
  8570                              <1> ldxbmp:
  8571 00006EBD 668B06              <1> 	mov ax, [esi]
  8572 00006EC0 668907              <1> 	mov [edi], ax
  8573 00006EC3 81C702000000        <1> 	add edi, 2
  8574 00006EC9 81C602000000        <1> 	add esi, 2
  8575 00006ECF 3B35[006F0000]      <1> 	cmp esi, [bmpend]
  8576 00006ED5 7723                <1> 	ja endedbmp
  8577 00006ED7 4A                  <1> 	dec edx
  8578 00006ED8 81FA00000000        <1> 	cmp edx, 0
  8579 00006EDE 77DD                <1> 	ja ldxbmp
  8580 00006EE0 31D2                <1> 	xor edx, edx
  8581 00006EE2 668B15[C34C0000]    <1> 	mov dx, [resolutionx2]
  8582 00006EE9 29DF                <1> 	sub edi, ebx
  8583 00006EEB 29DF                <1> 	sub edi, ebx
  8584 00006EED 29D7                <1> 	sub edi, edx
  8585 00006EEF 49                  <1> 	dec ecx
  8586 00006EF0 89DA                <1> 	mov edx, ebx
  8587 00006EF2 81F900000000        <1> 	cmp ecx, 0
  8588 00006EF8 77C3                <1> 	ja ldxbmp
  8589                              <1> endedbmp:
  8590 00006EFA E801EFFFFF          <1> 	call switchmousepos2
  8591 00006EFF C3                  <1> 	ret
  8592                              <1> 	
  8593 00006F00 00000000            <1> 	bmpend dd 0
  8594                              <1> 
  8595                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8596 00006F04 00000000            <1> 	showstringesi dw 0,0
  8597 00006F08 00                  <1> 	mouseon db 0
  8598 00006F09 737461727400        <1> 	start	db "start",0
  8599 00006F0F 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  8600 00006F18 506F776572204F6666- <1> 	turnoffmsg db "Power Off",0
  8601 00006F21 00                  <1>
  8602 00006F22 426F6F2100          <1> 	boomsg db "Boo!",0
  8603 00006F27 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  8604 00006F30 73206561737920746F- <1>
  8605 00006F39 20647261772E00      <1>
  8606 00006F40 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  8607 00006F49 6D206E6F6D00        <1>
  8608 00006F4F 5800                <1> 	xmsg db "X",0
  8609 00006F51 0000                <1> 	icon dw 0	;pointer to icon
  8610 00006F53 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  8611 00006F57 00                  <1> 	iconselected db 0
  8612                              <1> 	
  8613                              <1> 	boo:
  8614 00006F58 BE[226F0000]        <1> 		mov esi, boomsg
  8615 00006F5D 66BA6400            <1> 		mov dx, 100
  8616 00006F61 66B94001            <1> 		mov cx, 320
  8617 00006F65 31DB                <1> 		xor ebx, ebx
  8618 00006F67 6631C0              <1> 		xor ax, ax
  8619 00006F6A E982F7FFFF          <1> 		jmp showstring
  8620                              <1> 
  8621                              <1> 	pacmannomnom:
  8622 00006F6F BE[406F0000]        <1> 		mov esi, pacnom
  8623 00006F74 66BA8200            <1> 		mov dx, 130
  8624 00006F78 66B93C00            <1> 		mov cx, 60
  8625 00006F7C 31DB                <1> 		xor ebx, ebx
  8626 00006F7E 6631C0              <1> 		xor ax, ax
  8627 00006F81 E96BF7FFFF          <1> 		jmp showstring	
  8628                              <1> 	
  8629                              <1> 	noie:
  8630 00006F86 66C705[45700000]80- <1> 		mov word [termwindow], 640
  8631 00006F8E 02                  <1>
  8632 00006F8F 66C705[47700000]E0- <1> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8633 00006F97 01                  <1>
  8634 00006F98 BE[45700000]        <1> 		mov esi, termwindow
  8635 00006F9D 66BA1000            <1> 		mov dx, 16
  8636 00006FA1 66B91000            <1> 		mov cx, 16
  8637 00006FA5 BB[BC260000]        <1> 		mov ebx, os
  8638 00006FAA 6631C0              <1> 		xor ax, ax
  8639 00006FAD E8A7F7FFFF          <1> 		call showwindow
  8640 00006FB2 E905B7FFFF          <1> 		jmp os
  8641                              <1> 
  8642                              <1> 	gotomenuboot:
  8643 00006FB7 31D2                <1> 		xor edx, edx
  8644 00006FB9 31C9                <1> 		xor ecx, ecx
  8645 00006FBB 668B15[D54B0000]    <1> 		mov dx, [resolutionx]
  8646 00006FC2 668B0D[D74B0000]    <1> 		mov cx, [resolutiony]
  8647 00006FC9 66C1E904            <1> 		shr cx, 4
  8648 00006FCD 6681E90100          <1> 		sub cx, 1
  8649 00006FD2 66C1E104            <1> 		shl cx, 4
  8650 00006FD6 668915[45700000]    <1> 		mov [termwindow], dx
  8651 00006FDD 66890D[47700000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8652 00006FE4 BE[45700000]        <1> 		mov esi, termwindow
  8653 00006FE9 6631D2              <1> 		xor dx, dx
  8654 00006FEC 6631C9              <1> 		xor cx, cx
  8655 00006FEF BB[BC260000]        <1> 		mov ebx, os
  8656 00006FF4 6631C0              <1> 		xor ax, ax
  8657 00006FF7 E85DF7FFFF          <1> 		call showwindow
  8658 00006FFC E9BBB6FFFF          <1> 		jmp os
  8659                              <1> 		;ret
  8660                              <1> 
  8661                              <1> 	winblows:
  8662 00007001 BE[186F0000]        <1> 		mov esi, turnoffmsg
  8663 00007006 BB[26470000]        <1> 		mov ebx, turnoff
  8664 0000700B 668B0D[D74B0000]    <1> 		mov cx, [resolutiony]
  8665 00007012 6681E92000          <1> 		sub cx, 32
  8666 00007017 6631D2              <1> 		xor dx, dx
  8667 0000701A 30E4                <1> 		xor ah, ah
  8668 0000701C B010                <1> 		mov al, 00010000b
  8669 0000701E E8CEF6FFFF          <1> 		call showstring
  8670 00007023 BE[0F6F0000]        <1> 		mov esi, gotomenu
  8671 00007028 668B0D[D74B0000]    <1> 		mov cx, [resolutiony]
  8672 0000702F 6681E93000          <1> 		sub cx, 48
  8673 00007034 6631D2              <1> 		xor dx, dx
  8674 00007037 30E4                <1> 		xor ah, ah
  8675 00007039 B010                <1> 		mov al, 00010000b
  8676 0000703B BB[B76F0000]        <1> 		mov ebx, gotomenuboot
  8677 00007040 E9ACF6FFFF          <1> 		jmp showstring
  8678                              <1> 
  8679 00007045 20035802            <1> 	termwindow:	dw 800,600	;;window size
  8680 00007049 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  8681 00007052 696E616C00          <1>
  8682                              <1> 	
  8683 00007052 <incbin>            <1> interneticon: 	incbin 'source/gui/icons/internet'
  8684 00007052 <incbin>            <1> wordicon: 	incbin 'source/gui/icons/word'
  8685 00007052 <incbin>            <1> pacmanpellet: incbin 'source/gui/icons/pellet'
  8686 00007052 <incbin>            <1> ghostie	incbin 'source/gui/icons/ghostie'
  8687 00007052 <incbin>            <1> pacman	incbin 'source/gui/icons/pacman'
  8688                                  %endif
  8689                                      %include "source/data.asm"
  8690 000072E1 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8691 000072E9 73687573683A2000    <1> 	notfound1 db "shush: ",0
  8692 000072F1 3A20636F6D6D616E64- <1> 	notfound2 db  ": command not found",10,0
  8693 000072FA 206E6F7420666F756E- <1>
  8694 00007303 640A00              <1>
  8695 00007306 757365726E616D653A- <1> 	userask db "username:",0
  8696 0000730F 00                  <1>
  8697 00007310 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8698 00007319 00                  <1>
  8699 0000731A 40                  <1> 	computer db "@"
  8700 0000731B 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  8701 00007324 00                  <1>
  8702 00007325 5D242000            <1> 	endprompt db "]$ ",0
  8703 00007329 0D                  <1> 	crlf 	db  13
  8704 0000732A 0A00                <1> 	line	db	10,0
  8705                              <1> 	userlst:
  8706 0000732C 726F6F7400          <1> 			db "root",0
  8707 00007331 617765736F6D65706F- <1> 			db "awesomepower",0
  8708 0000733A 77657200            <1>
  8709 0000733E 7573657200          <1> 			db "user",0
  8710 00007343 70617373776F726400  <1> 			db "password",0
  8711 0000734C 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8712 0000734E 00                  <1> 			db 0
  8713                              <1> 	userlstend:
  8714                              <1> 	
  8715 0000734E <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  8716                              <1> fontend:
  8717                              <1> osend:	;this is the end of the operating system's space on disk
  8718                                      %include "build/fileindex.asm"
  8719                              <1> diskfileindex:
  8720 0000834F 617267746573742E65- <1> db "argtest.elf",0
  8721 00008358 6C6600              <1>
  8722 0000835B 43000000            <1> dd (f0-$$)/512
  8723 0000835F 06010000            <1> dd (f1-f0)/512
  8724 00008363 626F6F742E736800    <1> db "boot.sh",0
  8725 0000836B 49010000            <1> dd (f1-$$)/512
  8726 0000836F 01000000            <1> dd (f2-f1)/512
  8727 00008373 63686172746573742E- <1> db "chartest.elf",0
  8728 0000837C 656C6600            <1>
  8729 00008380 4A010000            <1> dd (f2-$$)/512
  8730 00008384 26010000            <1> dd (f3-f2)/512
  8731 00008388 646F73746573742E63- <1> db "dostest.com",0
  8732 00008391 6F6D00              <1>
  8733 00008394 70020000            <1> dd (f3-$$)/512
  8734 00008398 01000000            <1> dd (f4-f3)/512
  8735 0000839C 657865636C00        <1> db "execl",0
  8736 000083A2 71020000            <1> dd (f4-$$)/512
  8737 000083A6 01000000            <1> dd (f5-f4)/512
  8738 000083AA 66696E616C636F756E- <1> db "finalcount.snd",0
  8739 000083B3 742E736E6400        <1>
  8740 000083B9 72020000            <1> dd (f5-$$)/512
  8741 000083BD 01000000            <1> dd (f6-f5)/512
  8742 000083C1 666F726B00          <1> db "fork",0
  8743 000083C6 73020000            <1> dd (f6-$$)/512
  8744 000083CA 01000000            <1> dd (f7-f6)/512
  8745 000083CE 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8746 000083D7 642E656C6600        <1>
  8747 000083DD 74020000            <1> dd (f7-$$)/512
  8748 000083E1 D6010000            <1> dd (f8-f7)/512
  8749 000083E5 696E7400            <1> db "int",0
  8750 000083E9 4A040000            <1> dd (f8-$$)/512
  8751 000083ED 01000000            <1> dd (f9-f8)/512
  8752 000083F1 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  8753 000083FA 2E736E6400          <1>
  8754 000083FF 4B040000            <1> dd (f9-$$)/512
  8755 00008403 01000000            <1> dd (f10-f9)/512
  8756 00008407 6D6172696F2E736E64- <1> db "mario.snd",0
  8757 00008410 00                  <1>
  8758 00008411 4C040000            <1> dd (f10-$$)/512
  8759 00008415 01000000            <1> dd (f11-f10)/512
  8760 00008419 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8761 00008422 626D7000            <1>
  8762 00008426 4D040000            <1> dd (f11-$$)/512
  8763 0000842A B0020000            <1> dd (f12-f11)/512
  8764 0000842E 736F6C6C65726F732E- <1> db "solleros.txt",0
  8765 00008437 74787400            <1>
  8766 0000843B FD060000            <1> dd (f12-$$)/512
  8767 0000843F 01000000            <1> dd (f13-f12)/512
  8768 00008443 736F6E676F74696D65- <1> db "songotime.snd",0
  8769 0000844C 2E736E6400          <1>
  8770 00008451 FE060000            <1> dd (f13-$$)/512
  8771 00008455 01000000            <1> dd (f14-f13)/512
  8772 00008459 737464696F74657374- <1> db "stdiotest.elf",0
  8773 00008462 2E656C6600          <1>
  8774 00008467 FF060000            <1> dd (f14-$$)/512
  8775 0000846B 27010000            <1> dd (f15-f14)/512
  8776 0000846F 74656C7900          <1> db "tely",0
  8777 00008474 26080000            <1> dd (f15-$$)/512
  8778 00008478 01000000            <1> dd (f16-f15)/512
  8779 0000847C 74696D65746573742E- <1> db "timetest.elf",0
  8780 00008485 656C6600            <1>
  8781 00008489 27080000            <1> dd (f16-$$)/512
  8782 0000848D 06010000            <1> dd (f17-f16)/512
  8783 00008491 7475746F7269616C2E- <1> db "tutorial.sh",0
  8784 0000849A 736800              <1>
  8785 0000849D 2D090000            <1> dd (f17-$$)/512
  8786 000084A1 03000000            <1> dd (f18-f17)/512
  8787 000084A5 756E667300          <1> db "unfs",0
  8788 000084AA 30090000            <1> dd (f18-$$)/512
  8789 000084AE 02000000            <1> dd (f19-f18)/512
  8790 000084B2 766963746F72792E77- <1> db "victory.wav",0
  8791 000084BB 617600              <1>
  8792 000084BE 32090000            <1> dd (f19-$$)/512
  8793 000084C2 16000000            <1> dd (f20-f19)/512
  8794 000084C6 5F696D672E62696E00  <1> db "_img.bin",0
  8795 000084CF 48090000            <1> dd (f20-$$)/512
  8796 000084D3 D7020000            <1> dd (f21-f20)/512
  8797                              <1> enddiskfileindex:
  8798                              <1> 
  8799                                      %include "source/bss.asm"
  8800 000084D7 90                  <1> align 4, nop
  8801                              <1> bssstart: equ $
  8802                              <1> guion equ bssstart
  8803                              <1> DriveNumber equ guion + 1
  8804                              <1> lbaad equ DriveNumber + 1
  8805                              <1> memlistbuf equ lbaad + 4
  8806                              <1> memlistend equ memlistbuf + 576
  8807                              <1> bsscopy equ memlistend
  8808                              <1> initialstack equ bsscopy
  8809                              <1> stackend equ initialstack + 4000
  8810                              <1> fileindex: equ stackend + 96
  8811                              <1> fileindexend: equ fileindex + 1024
  8812                              <1> previousstack equ fileindexend
  8813                              <1> lastfolderloc equ previousstack + 4
  8814                              <1> currentfolderloc equ lastfolderloc + 4
  8815                              <1> currentfolder equ currentfolderloc + 4
  8816                              <1> currentfolderend equ currentfolder + 512
  8817                              <1> uid equ currentfolderend
  8818                              <1> ranboot equ uid + 4
  8819                              <1> IFON equ ranboot + 1
  8820                              <1> IFTRUE equ IFON + 1
  8821                              <1> BATCHPOS equ IFTRUE + 100
  8822                              <1> BATCHISON equ BATCHPOS + 4
  8823                              <1> LOOPON equ BATCHISON + 1
  8824                              <1> LOOPPOS	equ LOOPON + 1
  8825                              <1> variables: equ LOOPPOS + 4
  8826                              <1> varend: equ variables + 4096
  8827                              <1> buftxt2: equ varend
  8828                              <1> buftxt: equ buftxt2 + 1024
  8829                              <1> buftxtend: equ buftxt + 1024
  8830                              <1> buf2: equ buftxtend
  8831                              <1> numbuf: equ buf2 + 20
  8832                              <1> %ifdef gui.included
  8833                              <1> 	graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8834                              <1> 	graphicstableend equ graphicstable + 200h
  8835                              <1> 	mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8836                              <1> 	mcolorend equ mousecolorbuf + 256
  8837                              <1> 	videobuf equ mcolorend + 1	;1280x1024pixels in characters
  8838                              <1> 	videobufend	equ videobuf + 160*64*2
  8839                              <1> 	videobuf2 equ videobufend
  8840                              <1> 	videobuf2end equ videobuf2 + 160*64*2
  8841                              <1> %else
  8842                              <1> 	videobuf equ numbuf + 1
  8843                              <1> 	videobufend equ videobuf + 80*30*2
  8844                              <1> 	videobuf2 equ videobufend
  8845                              <1> 	videobuf2end equ videobuf2 + 160*64*2
  8846                              <1> %endif
  8847                              <1> lastcommandpos: equ videobuf2end
  8848                              <1> commandbufpos: equ lastcommandpos + 4
  8849                              <1> commandbuf: equ commandbufpos + 4
  8850                              <1> commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8851                              <1> %ifdef rtl8139.included
  8852                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  8853                              <1> 	rbuffend equ rbuffstart + 8212
  8854                              <1> %else
  8855                              <1> 	rbuffstart equ commandbufend
  8856                              <1> 	rbuffend equ commandbufend
  8857                              <1> %endif
  8858                              <1> %ifdef threads.included
  8859                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  8860                              <1> 	threadlistend: equ threadlist + 1024*4
  8861                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  8862                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  8863                              <1> 	bssend equ stack1 + 1024*1024
  8864                              <1> %else
  8865                              <1> 	bssend equ rbuffend
  8866                              <1> %endif
  8867                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  8868                                      %include "build/files.asm"
  8869 000084D8 00<rept>            <1> align 512,db 0
  8870                              <1> f0:
  8871 000084D8 <incbin>            <1> incbin "included/argtest.elf"
  8872 000290F2 00<rept>            <1> align 512,db 0
  8873                              <1> f1:
  8874 000290F2 <incbin>            <1> incbin "included/boot.sh"
  8875 00029216 00<rept>            <1> align 512,db 0
  8876                              <1> f2:
  8877 00029216 <incbin>            <1> incbin "included/chartest.elf"
  8878 0004DEDB 00<rept>            <1> align 512,db 0
  8879                              <1> f3:
  8880 0004DEDB <incbin>            <1> incbin "included/dostest.com"
  8881 0004E12B 00<rept>            <1> align 512,db 0
  8882                              <1> f4:
  8883 0004E12B <incbin>            <1> incbin "included/execl"
  8884 0004E2D9 00<rept>            <1> align 512,db 0
  8885                              <1> f5:
  8886 0004E2D9 <incbin>            <1> incbin "included/finalcount.snd"
  8887 0004E502 00<rept>            <1> align 512,db 0
  8888                              <1> f6:
  8889 0004E502 <incbin>            <1> incbin "included/fork"
  8890 0004E754 00<rept>            <1> align 512,db 0
  8891                              <1> f7:
  8892 0004E754 <incbin>            <1> incbin "included/helloworld.elf"
  8893 000893E3 00<rept>            <1> align 512,db 0
  8894                              <1> f8:
  8895 000893E3 <incbin>            <1> incbin "included/int"
  8896 0008959B 00<rept>            <1> align 512,db 0
  8897                              <1> f9:
  8898 0008959B <incbin>            <1> incbin "included/lostwoods.snd"
  8899 00089656 00<rept>            <1> align 512,db 0
  8900                              <1> f10:
  8901 00089656 <incbin>            <1> incbin "included/mario.snd"
  8902 0008983A 00<rept>            <1> align 512,db 0
  8903                              <1> f11:
  8904 0008983A <incbin>            <1> incbin "included/solleros.bmp"
  8905 000DF9E6 00<rept>            <1> align 512,db 0
  8906                              <1> f12:
  8907 000DF9E6 <incbin>            <1> incbin "included/solleros.txt"
  8908 000DFB76 00<rept>            <1> align 512,db 0
  8909                              <1> f13:
  8910 000DFB76 <incbin>            <1> incbin "included/songotime.snd"
  8911 000DFC4A 00<rept>            <1> align 512,db 0
  8912                              <1> f14:
  8913 000DFC4A <incbin>            <1> incbin "included/stdiotest.elf"
  8914 00104A43 00<rept>            <1> align 512,db 0
  8915                              <1> f15:
  8916 00104A43 <incbin>            <1> incbin "included/tely"
  8917 00104DB2 00<rept>            <1> align 512,db 0
  8918                              <1> f16:
  8919 00104DB2 <incbin>            <1> incbin "included/timetest.elf"
  8920 00125909 00<rept>            <1> align 512,db 0
  8921                              <1> f17:
  8922 00125909 <incbin>            <1> incbin "included/tutorial.sh"
  8923 00125F52 00<rept>            <1> align 512,db 0
  8924                              <1> f18:
  8925 00125F52 <incbin>            <1> incbin "included/unfs"
  8926                              <1> align 512,db 0
  8927                              <1> f19:
  8928 00125F52 <incbin>            <1> incbin "included/victory.wav"
  8929 00128F48 00<rept>            <1> align 512,db 0
  8930                              <1> f20:
  8931 00128F48 <incbin>            <1> incbin "included/_img.bin"
  8932                              <1> align 512,db 0
  8933                              <1> f21:
